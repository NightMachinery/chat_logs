[00:00:18] <ggb> Clojure special forms are here: https://clojure.org/reference/special_forms
[00:00:40] <ggb> The rest is all "just" macros manipulating the environment and doing macro things.
[00:01:00] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[00:01:20] <tatsumaru> hey guys is the clojure :require key similar to the emacs lisp require function used in emacs
[00:01:36] <ggb> But due to what macros *are*, that "just" is huge. Specifically, it is anything you can express in Clojure itself, because that's what macros give you access to.
[00:01:52] <ridcully_> maybe it lacks some quotes.  "special form" vs "special" form
[00:02:03] <TimMc> macro-special?
[00:02:49] <ggb> It's tough to come up with a shorthand for "expressible in Clojure, implemented in a macro, and not following your expectations of typical Clojure or macro idioms."
[00:02:55] <TimMc> seebs: It's very instructive to read the source of clojure.core and see how the language gets built up from a few special forms and a lot of reliance on clojure.lang.RT (stuff that's implemented in Java) -- try not to learn any *habits* from it, though. :-)
[00:03:09] <TimMc> Some of that code is reaaaal dodgy.
[00:04:20] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[00:15:09] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[00:22:34] <sobel> but all those parentheses make it seem so smooth
[00:28:48] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[00:35:52] <technomancy> so is `catch` an identifier that points to a piece of functionality hidden away inside `try`? or is it more like a command you give to the macro?
[00:37:24] <ridcully_> my gut feeling would be here that is is a special magic inside try.  i doubt it could life outside it
[00:38:02] <technomancy> yeah, I mean it's definitely hidden inside try, but is it helpful to think of it as an identifier the same way vars and locals are? or is that misleading
[00:39:06] <ridcully_> it's hard to say.  in the end all bets are off inside a macro, right?
[00:40:06] <technomancy> yeah, more or less
[00:40:34] <technomancy> I'm still trying to unpack how to classify it and how it relates to more common anaphora
[00:40:48] <technomancy> like ... does "anaphoric identifiers" refer to the bad kind without including this?
[00:42:51] <ridcully_> sometimes you just have to simplify.  like "timey wimey"
[00:43:02] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 268 seconds)
[00:43:21] <technomancy> words mean things!
[00:43:26] <technomancy> 正名
[00:44:34] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[00:44:47] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[00:44:47] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[00:44:47] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[00:45:29] <ridcully_> MY MOTHER DOES WHAT?!
[00:46:14] <technomancy> (I actually have an emacs abbrev for that Chinese phrase too but that's not the one I typed!)
[00:46:34] <ridcully_> i'd have no clue one or the other way
[00:46:53] <technomancy> https://git.sr.ht/~technomancy/dotfiles/tree/master/item/.emacs.d/phil/cosmetics.el#L67
[00:50:41] <TimMc> Apparently "nie mój cyrk, nie moje malpy" isn't even originally Polish -- it's a valid translation, but isn't how a native Polish saying would sound.
[00:51:01] <TimMc> (Source: Polish coworker.)
[00:51:18] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 256 seconds)
[00:51:18] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[00:51:26] <goodger> does it help if you reverse it?
[00:54:27] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[00:54:27] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[00:54:27] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[00:54:28] <technomancy> lol
[00:54:29] <technomancy> TimMc: wait, so what's the correct way?
[00:55:12] <TimMc> Apparently Polish strongly prefers rhyming, maybe also alliteration but I don't recall for sure.
[00:55:30] <TimMc> something about a sing-song cadence, too?
[00:55:56] *** Joins: uncleyea1 (~ian@pppoe.178-66-159-233.dynamic.avangarddsl.ru)
[00:58:11] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[01:01:34] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[01:03:23] *** Quits: uncleyea1 (~ian@pppoe.178-66-159-233.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[01:04:59] *** Joins: uncleyear (~ian@pppoe.178-66-159-233.dynamic.avangarddsl.ru)
[01:07:57] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 240 seconds)
[01:09:14] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[01:12:44] <seebs> to be clear, i'm aware that the arcane stuff is unlikely to ever be necessary, except it turns out that (1) doing things like that is fun (2) also it tends to give me a better understanding of why perfectly reasonable-seeming things don't work.
[01:13:10] <seebs> and yes, TimMc, i appreciate the warning, but as it happens i once did some amount of C toolchain maintenance so i am *intimately* aware that you should generally not acquire habits in a language based on how its runtime is written.
[01:13:56] <technomancy> maybe some day you'll create a lisp of your own, and then this will be very useful information
[01:14:43] <seebs> i don't think i'm very likely to.
[01:15:01] <seebs> honestly, i think the "everything else will eventually embed lisp" thing was a transient state with small computers and CS people who'd learned lisp and needed a scripting engine.
[01:15:06] <seebs> nowadays i'd probably expect it to be lua
[01:15:18] <seebs> or javascript if people have no sense of scale
[01:15:22] <technomancy> haha so
[01:15:27] <technomancy> my lisp runs on the lua runtime
[01:15:41] <seebs> this will be really convenient if you ever need to embed a scripting language in it
[01:15:58] <seebs> or for that matter if you need to embed it in something else as a scripting language
[01:15:59] <seebs> or both
[01:41:44] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[01:44:34] *** Quits: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[01:48:20] <TimMc> seebs: hahaha
[01:49:13] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[01:52:33] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[01:55:47] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Remote host closed the connection)
[01:56:33] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[02:03:55] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[02:11:37] *** Quits: uncleyear (~ian@pppoe.178-66-159-233.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[02:13:13] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:27:15] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:31:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:33:18] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[02:38:45] *** Joins: uncleyear (~ian@pppoe.178-66-158-219.dynamic.avangarddsl.ru)
[02:45:31] *** Quits: uncleyear (~ian@pppoe.178-66-158-219.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[02:51:35] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:51:50] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:58:07] *** Joins: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[03:05:30] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Quit: Leaving)
[03:09:30] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Quit: WeeChat 3.4)
[03:09:54] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[03:16:39] *** Quits: jespada (~jespada@87.74.36.188) (Quit: Textual IRC Client: www.textualapp.com)
[03:17:30] *** Joins: uncleyear (~ian@pppoe.178-66-158-150.dynamic.avangarddsl.ru)
[03:25:45] *** Quits: uncleyear (~ian@pppoe.178-66-158-150.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[03:34:16] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:39:23] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:14:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 250 seconds)
[04:24:41] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Ping timeout: 256 seconds)
[04:25:18] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[04:25:18] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[04:25:18] *** Joins: turlando (~turlando@user/turlando)
[04:35:53] <sobel> a friend recently texted me that he just implemented a quine and i asked if it was due to greenspun's 10th or for grins
[04:45:38] <goodger> I wish the other nine rules existed
[04:45:42] <goodger> it seems they'd be interesting
[04:54:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:07:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:10:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:12:44] <seebs> fwiw, i got to a point where i Don't Understand What's Happening enough that i'm gonna give up and read some documentation forward rather than trying to reverse-engineer everything from the koans.
[05:14:02] <seebs> this has reminded me of a thing: given the existence of a macro system, is there a good way to do something corresponding to cpp, e.g, "show me what this looks like after you have expanded macros"?
[05:35:19] <TimMc> seebs: You can call macroexpand on something.
[05:36:20] <seebs> ahh, cool.
[05:36:29] <TimMc> (macroexpand `(->> 6 range (map inc) (reduce +)))
[05:36:50] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:38:01] <TimMc> I don't know how to walk through the *exact* steps that the compiler takes, but read-string, syntax-quote, and then macroexpand is a pretty good approximation of the first steps of execution.
[05:39:01] <seebs> fwiw, the thing that finally got me to admit i don't know what i'm doing:
[05:39:01] <seebs>   (= "Test Testerson, 123 Test Lane, Testerville, TX"
[05:39:01] <seebs>      (let ___ ["Test" "Testerson"] test-address)))
[05:39:19] <seebs> (where test-address is a plausible {...} including the address parts)
[05:39:56] <seebs> and usually in the koans, there's a single thing that replaces any given ___, but i'm pretty sure in this case i will need to add things other than in that place.
[05:50:10] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Remote host closed the connection)
[05:54:53] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[06:05:50] <seebs> answer: now i know that i can do [let [a b] ["a" "b"] {keywords} {map...}] and get the results i want. yay. 
[06:06:27] <seebs> clojure is scoring well on my key metric for any language which is the proportion of times that i learn how something works and feel a yawning void of despair
[06:09:45] <TimMc> seebs: Parens aren't balanced in that Test Testerson snippet.
[06:15:53] <seebs> i probably cut and pasted it wrong
[06:16:14] <seebs> eventual solution:
[06:16:16] <seebs>   (= "Test Testerson, 123 Test Lane, Testerville, TX"
[06:16:16] <seebs>     (let [[first-name last-name] ["Test" "Testerson"] {:keys [street-address city state]} test-address]
[06:16:16] <seebs>       (string/join ", " [(str first-name " " last-name) street-address city state])))
[06:16:48] <seebs> this reminds me: (1) is there a preferred/suggested pastebin/gist/etc type thing to use for code fragments? (2) is there something similar to the Go Playground for sharing code fragments as runnable things?
[06:17:26] <seebs> oh, and unrelated to those: is there an unsigned integer type? i ask because i'm reading aphyr's "clojure from the ground up" and it introduces byte/short/int/long and they all seem sort of... signed...
[06:21:55] <seebs> and while i'm at it: why are (:keyword map) and (map :keyword) interchangeable, or are they really? is this "this made as much sense as anything else you could do with them" or is there some benefit to this specifically?
[06:23:45] <v3ga> does anyone use ring-logger-timbre by chance?  I'm wondering if it's possible to keep it from tracking certain JS folders.  
[06:24:46] *** Joins: yoonkn (~user@175.197.208.79)
[06:25:56] <v3ga> oops, a little reading goes a long way
[06:31:17] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[06:35:52] <TimMc> seebs: There used to be refheap, but I think people just use whatever.
[06:36:03] <TimMc> sprunge, gist, etc.
[06:37:45] <TimMc> (refheap was for pastes)
[06:47:32] <seebs> *sigh* i got linked again to the reactjs issue tracker issue: "is it safe to use __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ?"
[06:48:07] <seebs> i sort of admire it honestly
[06:48:24] <seebs> that's the kind of mindset that leads to doing things people thought were impossible, or at least stupid
[06:51:55] <TimMc> hahaha
[06:54:06] <TimMc> Java doesn't have an unsigned integer type unless you count char, but I bet that gets exciting in some way.
[06:54:57] <seebs> huh, i didn't realize that.
[06:55:05] <seebs> hmm
[06:55:07] <seebs> > (= (quote __) '(1 2 3 4 5))
[06:55:23] <seebs> oh nevermind i just realized
[06:55:31] <seebs> this was supposed to introduce the '( syntax as opposed to (quote
[06:55:38] <TimMc> You can *use* int and long in unsigned ways, but you have to call the right operators.
[06:55:54] <TimMc> I guess that's newer.
[06:58:17] <TimMc> (:keyword map) and (map :keyword)... I'd say it mostly depends on whether the keyword or the map expression can evaluate to nil, which would certainly constrain things. But other than that, it's really about communicating intent.
[06:58:53] <seebs> also, they do different things when used with map, i guess
[06:59:44] <seebs> (map :keyword [maps]) gets you :keyword of all of those maps, (map m [keywords]) gets you the selected keywords from the map
[06:59:53] <seebs> but those both work only because the corresponding single-item call form exists
[07:01:25] <seebs> hmm. bitwise math looks less friendly, because it's being more friendly
[07:01:32] <seebs> and doing helpful things like automatically promoting
[07:01:51] <seebs> when i started using go i thought losing automatic promotions to reasonable types was horrible, now i love it
[07:07:05] <seebs> also i want to thank aphyr for the clojure from the ground up series, they're super helpful for just quickly getting an overview of things.
[08:01:48] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[08:02:06] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:17:48] *** Joins: shiranaihito (~textual@2001-b011-4000-1d51-058f-8c0e-0969-5bc9.dynamic-ip6.hinet.net)
[10:15:01] *** Quits: seabre_ (~seabre@user/seabre) (Ping timeout: 240 seconds)
[10:54:38] *** Joins: seabre (~seabre@user/seabre)
[11:13:44] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[11:13:59] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[11:37:10] *** Quits: shiranaihito (~textual@2001-b011-4000-1d51-058f-8c0e-0969-5bc9.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:42:24] *** Joins: uncleyear (~ian@pppoe.178-66-130-132.dynamic.avangarddsl.ru)
[11:55:19] *** Joins: shiranaihito (~textual@219.85.179.213)
[11:56:34] *** Quits: uncleyear (~ian@pppoe.178-66-130-132.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[12:08:18] *** Joins: uncleyear (~ian@pppoe.178-66-130-132.dynamic.avangarddsl.ru)
[12:21:32] *** Quits: uncleyear (~ian@pppoe.178-66-130-132.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[12:21:49] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[12:34:37] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[12:40:18] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[12:40:44] *** Joins: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de)
[12:49:39] *** Quits: shiranaihito (~textual@219.85.179.213) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:54:05] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[12:59:44] *** Joins: shiranaihito (~textual@219.85.179.213)
[13:00:15] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Quit: Lost terminal)
[13:02:21] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[13:17:58] *** Joins: xsperry (~xs@user/xsperry)
[13:23:29] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[13:52:46] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:53:25] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[13:53:36] <tatsumaru> is it fair to say that clojure is to java what haskell is to c?
[13:59:02] <v3ga> hmm, in a way.... i suppose but not really.
[13:59:57] <v3ga> more so than java you want to think of clojure sitting on the jvm.  C being more barebones I don't really feel that there's a layer between haskell in the same manner.  If that makes sense?
[14:00:10] <Solid> ...what is haskell to c?
[14:01:22] <tatsumaru> Solid: when doesn't haskell wrap up c libraries the same way clojure wraps java libraries?
[14:01:28] <tatsumaru> s/when/well
[14:02:55] <Solid> Not really, you just use FFI (presumably, just like in every other language) when writing library wrappers
[14:05:26] <v3ga> hmm isn't the jvm written in c++? if i'm not mistaken.
[14:08:14] *** v3ga is now known as v3gajerusalem
[14:16:45] *** Quits: shiranaihito (~textual@219.85.179.213) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:25:14] <yauhsien> no. people would never think about how haskell is to c.
[14:26:37] <yauhsien> and it's like that you cannot find anyone talking about how php is to c.
[14:28:19] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[14:34:34] *** Joins: amk (~amk@109.255.169.126)
[14:34:40] *** Joins: SR-71 (~user@user/SR-71)
[14:36:06] *** Joins: seschwar (~seschwar@user/seschwar)
[14:47:08] <Para> Not really; Clojure is practical.
[14:47:44] <v3gajerusalem> lol
[14:55:17] *** Quits: OscarZ (~oscarz@95.175.104.142) (Quit: Leaving)
[15:03:23] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[15:06:14] <yauhsien> yeah, it's that practical so people have to think it by thinking other language layers?
[15:16:47] *** Joins: shiranaihito (~textual@2001-b011-4000-1d51-f1e4-7879-e72d-3b4c.dynamic-ip6.hinet.net)
[15:20:03] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[15:23:16] *** Quits: shiranaihito (~textual@2001-b011-4000-1d51-f1e4-7879-e72d-3b4c.dynamic-ip6.hinet.net) (Ping timeout: 245 seconds)
[15:42:57] *** Quits: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[15:56:02] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Quit: Leaving)
[15:57:09] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[15:58:08] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Remote host closed the connection)
[16:19:47] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[16:36:27] <lunik1> if anything clojure is the CHICKEN of java, and even then I don't think it makes sense
[16:52:36] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[17:04:22] <Frozenlock> aphyr: Your Dom Top macros have stellar documentation. It's a really nice read!
[17:04:56] <Para> That's a risky google.
[17:05:40] <Frozenlock> Oh... right
[17:05:42] <Frozenlock> https://github.com/aphyr/dom-top/blob/master/src/dom_top/core.clj
[17:07:23] <Frozenlock> Compare that to many docstring in clojure.core... I read them but still don't understand what's happening and need to do a quick check on clojuredocs.org.
[17:07:34] <Frozenlock> *docstrings
[17:09:49] <Frozenlock> aphyr: do you use anything in particular to craft those docstrings? Something to indent the code inside them?
[17:11:03] <Para> Yep, looks good!
[17:11:24] <Para> The docstrings are in plain English and explain what the macros are for :)
[17:11:35] <Para> Usage ("how") is shown through practical examples.
[17:49:56] <aphyr> Frozenlock: Thanks! I work really hard on docs. I just use plain-old vim with vim-clojure-static, and = to reformat. Indentation for code samples is manual, and I'm probably doing it wrong.
[17:54:18] *** Joins: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de)
[18:33:31] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Quit: Leaving)
[18:59:13] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[19:01:02] <Para> aphyr: the only wrongness is that if you want markdown thingies to render them with syntax highlight, you should surround the blocks with triple backticks with language on the first line, eg. "```clojure\n(thing :foo :bar)\n```" (add indents and obviously unescape newlines to your taste)
[19:02:56] <Para> aphyr: have a gander at https://cljdoc.org/d/dom-top/dom-top
[19:03:28] <Para> ...cljdoc obviously defaults to Clojure :) but anyway, it's quite nice as well!
[19:03:43] <Para> Sort of a good documentation loop for public stuff to ensure your docs are fine is to just point to cljdoc.
[19:16:13] *** Quits: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:18:19] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:13:12] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[20:35:57] <seebs> hey, while i'm at asking questions about clojure ecosystem: (1) what if i wanted to do graphics on iOS/android targets (2) what if i wanted a standard GUI app
[20:36:41] <seebs> like, is this built-in stuff, widely available, people have made a couple of things but none of them work? i'm not sure where to even start looking and don't yet have the intuition to evaluate something for quality.
[20:47:40] <goodger> seebs: you can do anything with clojure that you can do with java, but in the case of these specific applications, the java libraries available may not please you
[20:48:20] <seebs> modern editors support unicode, thus zalgotext, thus allowing comments that go well with java's GL integration
[21:07:26] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[21:07:31] <tatsumaru> lol https://fortran.io/
[21:11:17] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[21:16:12] <tatsumaru> From reddit: "Finally web development become accessible to tenured physics professors"
[21:35:11] <goodger> ouch
[21:37:19] <Frozenlock> Inline tests (:test metadata). Good, bad, ugly?
[21:53:17] <seebs> in (meta #'test), what's #
[21:54:37] <seebs> hmm. actually, i guess the question is probably "what's #'", because #{ is sets, so # isn't a thing on its own, probably
[21:54:50] <cyberbanjo> #'a is VAR 'A
[21:54:56] <cyberbanjo> (var 'a)
[21:55:02] <cyberbanjo> https://clojure.org/reference/special_forms#var
[21:55:06] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[21:55:43] <seebs> ahh, thanks
[21:56:08] <seebs> is there a sane way to go from a squiggle to finding out its definition other than "read all the docs and remember them"?
[21:56:21] <cyberbanjo> # is the reader macro dispatch symbol https://clojure.org/reference/reader#_dispatch
[21:56:32] <cyberbanjo> im not sure about ways outside the docs though
[21:57:23] <seebs> hmm. so #{ and #" (set, regex) are also reader-macros?
[21:57:44] <cyberbanjo> yes :) i think anything after # will be
[21:59:43] <seebs> huh. are we allowed to create reader macros that get that special treatment, like, define a meaning for #<?
[22:05:59] <cyberbanjo> i dont know how and have heard user defined reader macros are frowned upon, idk
[22:06:22] <cyberbanjo> :readers of clojure.edn/read is a starting place, cant figure it myself
[22:09:26] <cyberbanjo> i think clojure supports a more restricted version called tagged literals
[22:09:34] <cyberbanjo> or data readers
[22:10:02] <cyberbanjo> example in comments of local binding readers https://clojuredocs.org/clojure.core/*data-readers*
[22:11:32] <seebs> one of my favorite things to do is produce programs which work but where experienced developers familiar with the language who try to figure out why they work will guess wrong.
[22:11:39] <seebs> not for production use, just for lulz.
[22:12:23] <cyberbanjo> i swear ive seen an example of data readers for priority queues in clojure, cant find now tho
[22:18:07] <cyberbanjo> maybe was just pretty printing them not reading them: https://github.com/danielmiladinov/joy-of-clojure/blob/master/src/joy-of-clojure/chapter5/how_to_use_persistent_queues.clj
[22:30:39] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[22:37:25] <seebs> (source source) says that it's calling (source-fn '~n)
[22:37:30] <seebs> but i can't find or refer to source-fn
[22:39:22] <seebs> ahh, clojure.repl/source-fn
[22:40:34] <seebs> okay so... the docstring for source-fn says that for most usage, source is more convenient
[22:41:19] <seebs> and indeed, (clojure.repl/source-fn clojure.repl/source-fn) doesn't work, but (source clojure.repl/source-fn) does. but... i don't really understand WHY. it's a macro that expands, in context, to (clojure.repl/source-fn '~n), and i don't know what '~n is actually *doing* here.
[22:49:31] <seebs> me: (take-last 3 (range))
[22:49:36] <seebs> clojure:
[22:49:38] <seebs> me: coward
[22:53:50] <seebs> although that leads to a question: is there anything less totally-interrupty than ^C, that would, say, cause a currently-running expression to get interrupted, without killing the whole REPL?
[22:57:50] <TimMc> I vaguely recall some kind of ctrl-c handler you can configure...
[22:58:09] <TimMc> or you can wait for (range) to eventually throw an integer-overflow exception :-P
[22:59:11] <seebs> lazy evaluation will really have arrived when i can ask for the first number from the sequence of numbers whose last value in a collatz sequence *isn't* 1 and get either a number or an error because there aren't any
[23:00:33] <TimMc> (oh wow, I think range is actually infinite now?)
[23:01:10] <TimMc> ->> (range (- Long/MAX_VALUE 5) Double/POSITIVE_INFINITY) (take 10) last class) => clojure.lang.BigInt
[23:01:28] <TimMc> missing an open paren at the beginning there, sorry
[23:04:25] <seebs> if range isn't infinite, (take-last 3 (range)) should probably have worked, if it's only counting a *finite* number, that should be basically instant, right? :P
[23:05:10] <seebs> recurring problem i have: was raised by mathematicians. people say things like "UUIDs are unique" and I get worried because 2^128 isn't even as big as a very small infinity.
[23:06:56] <seebs> hmm
[23:06:59] <seebs> in the definition of or:
[23:07:01] <seebs>   ([x & next]
[23:07:02] <seebs>       `(let [or# ~x]
[23:07:02] <seebs>          (if or# or# (or ~@next)))))
[23:07:28] <seebs> speculation: the or# thing there exists to avoid evaluating x twice when it's truthy
[23:07:56] <TimMc> Exactly, yeah.
[23:07:59] <leah2> yes
[23:08:10] <TimMc> Very, very common pattern.
[23:09:07] <TimMc> and if you forget to do this and x is side-effecting, you can get some fun bugs!
[23:21:55] <seebs> huh. so, the existence of (recur) implies to me that clojure doesn't automatically do tail-call optimizations?
[23:29:32] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:30:59] <yauhsien> seebs: (clojure.repl/set-bread-handler! f)
[23:32:24] <seebs> i'm aware that's probably a typo but i will accept it as also a good answer
[23:33:21] <seebs> hmm
[23:33:25] <seebs> > Exception in thread "SIGINT handler" java.lang.IllegalArgumentException: No matching method stop found taking 1 args for class java.lang.Thread
[23:33:33] <seebs> well it turns out that not providing the function doesn't work well :P
[23:40:36] <yauhsien> if it's (clojure.repl/set-break-handler! max), it will be silent after pressing ctrl+c.
[23:41:22] <seebs> this was just calling it without a function, which the docs says defaults to thread-stopper, but which apparently doesn't do anything useful currently.
[23:41:39] <seebs> > To hand someone an empty box and, later, before they open it, sneak in and replacing its contents with an actual gift? Surely I’m not the only one who does birthday presents this way.
[23:42:07] <seebs> what a lovely bit of writing
[23:43:51] <yauhsien> ahh I can use (clojure.repl/set-break-handler! println)
[23:44:51] *** Joins: z3t0_alt (~z3t0@146.71.14.98)
[23:44:54] <seebs> hmm
[23:45:06] <seebs> that does indeed make it say "caught signal SIGINT", but i don't get a prompt back.
[23:45:16] <z3t0_alt> hi all, I was trying to join the clojurians slack but the site clojurians.net seems to be down, does anyone know if the slack community is still active?
[23:45:33] <seebs> i was hoping for an easy way to make it kill the ... thread or whatever? and then let me continue having a prompt. not that it matters, the readline history is persistent.
[23:45:35] <z3t0_alt> I'm new to clj(s) and trying to understand some of the front-end routing libraries
[23:45:51] <yauhsien> though you will be still in repl
[23:52:54] <TimMc> seebs: In my REPL (Clojure 1.10.3, REPL-y 0.5.1, nREPL 0.8.3, lein 298) I'm able to use C-c while blocked on (deref (promise)) and it returns me to the REPL prompt.
[23:53:02] <TimMc> lein 2.9.8 rather
[23:54:22] <yauhsien> I guess, it's to build your work in some thread, and set and use a thread-breaker for the thread.
[23:54:22] <seebs> hmm
[23:55:02] <seebs> lein repl does, clj doesn't
[23:55:26] <TimMc> Now, if I then call (clojure.repl/set-break-handler!) and use C-c to interrupt something, I get the amusing "Exception in thread "SIGINT handler" java.lang.IllegalArgumentException: No matching method stop found taking 1 args for class java.lang.Thread"
[23:55:38] <seebs> so i got up to a chapter of the koan thing with defrecord etc and now i have to read things
[23:55:50] <seebs> and yeah, that's what i get from running that in clj too. seems like possibly-a-bug?
[23:56:06] <seebs> i don't know, it may be that the unhelpful error message is just a branding choice
[23:56:47] <yauhsien> z3t0_alt: this channel is active that you may want to place some question here.
[23:57:14] <TimMc> Bug or not, it's clear that whatever (clojure.repl/set-break-handler!) puts in place is not the default...
[23:58:09] <yauhsien> yep cuz (thread-stopper) stops a thread with error.
[23:59:06] <TimMc> thread-stopper tries to call (.stop thread (Error. msg)) but... at least in JDK 11 there's only a nullary stop method.
