[00:01:40] <Julius_> synaps3, yes, I got that 30 minutes ago
[00:01:53] <Julius_> Doesnt change the fact that I have too many shitcoins :/
[00:03:33] <synaps3> you are gonna be milionaire just wait
[00:05:44] <Julius_> synaps3, maybe. But maybe I should start to work
[00:06:14] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[00:08:28] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[00:16:12] *** Quits: xenoterracide_ (~xenoterra@50-124-250-111.alma.mi.frontiernet.net) (Ping timeout: 268 seconds)
[00:20:36] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[00:42:05] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[01:00:13] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[01:02:46] *** JollyRoger is now known as TheJollyRoger
[01:02:53] *** TheJollyRoger is now known as PeterEaston
[01:02:58] *** PeterEaston is now known as JollyRoger
[01:10:18] *** Quits: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru) (Read error: Connection reset by peer)
[01:10:36] *** Joins: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru)
[01:19:05] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 248 seconds)
[01:22:56] *** Joins: kbdlnx1_ (~kbdlnx123@72.252.198.165)
[01:25:29] *** Quits: kbdlnx (~kbdlnx123@102.129.153.140) (Ping timeout: 248 seconds)
[01:30:03] *** Joins: Wulf (~Wulf@user/wulf)
[01:31:03] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[01:40:08] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[01:40:32] *** Joins: Guest6954 (~bd@208.84.189.253)
[01:41:23] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:49:59] *** Quits: Guest6954 (~bd@208.84.189.253) (Quit: Leaving)
[01:53:58] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 244 seconds)
[02:02:39] *** Quits: Julius_ (~Julius76@2a02:810b:c640:514:64e8:2a3d:aa18:bae0) (Quit: Quit)
[02:05:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[02:08:30] <Gurkenglas> What's the name of the scheme where your encrypted zip has a file and another encrypted zip, which has a file and another encrypted zip, ... which has a file and a last fake encrypted zip with random text as ciphertext, so that under duress you can always plausibly claim that you have revealed all files?
[02:10:41] *** Joins: rtypo (~alex@user/rtypo)
[02:12:40] <Gurkenglas> (or perhaps, you have a number of encrypted files and a number of fake encrypted files, so that you can freely choose the subset of files to reveal and then plausibly claim that those are all)
[02:17:02] <ms7821> I don't think it has a name, it's just a way to do plausible deniability
[02:17:25] <ms7821> (which has never made sense to me, it becomes a key distribution problem again)
[02:19:25] <ms7821> also in the real world, nobody's gonna say "well I can't technically be sure you don't have anything hidden", just as they won't say "well technically your signal messages could be forged"
[02:20:09] *** Quits: moose (~moose@user/moose) (Ping timeout: 268 seconds)
[02:20:23] <onelegend> if you encrypt a file with different ciphers (you first encrypt with AES, then Threefish, then Serpent), then that's cascade encryption
[02:20:45] <onelegend> I know that's not what you're doing, but it's something interesting to keep in mind
[02:21:16] <onelegend> cascade encryption is actually not that bad. The read/write speeds are still much faster than a typical SATA hard drie
[02:21:18] <onelegend> *drive
[02:21:27] <LTCD> Gurkenglas I made CypherVault which was encryption with plausible deniability. You encrypt the dummy File_A, and then have the option to encrypt a second file File_B. If you do not pick a second file then CypherVault uses the Faroo search engine to find a random file (like a video) which it encrypts with a random password. This is returned to you
[02:21:28] <LTCD> as (File_A || File_B).
[02:22:58] <danieldg> the biggest problem is that these waste a bunch of storage space for no normal benefit
[02:23:17] <danieldg> (and not just storage, network if you transfer them)
[02:23:56] <LTCD> Gurkenglas So you must decrypt File_A, but in regards to File_B just claim you never even uploaded a second file so it must be from the CypherVault system finding a random file from Faroo online and then encrypting with a random password. The system is run as a RAM disk, no logs, and all metadata is erased too. So even if NSA have a quantum
[02:23:57] <LTCD> computer to decrypt File_B you can claim it is not your file, but a random file from Faroo, since there is no logs and metadata is scrubbed. 
[02:24:24] *** Joins: moose (~moose@user/moose)
[02:24:29] <Gurkenglas> LTCD, isn't the distribution of files that CypherVault would pick rather distinguishable from the distribution for which someone would use CypherVault?
[02:24:51] <LTCD> danieldg Really? My system found files on Faroo which were normally tiny, and if for some reason File_B was too big then just use the system for a second time.
[02:24:56] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[02:25:56] <LTCD> Gurkenglas They were all random things, sometimes it even generated random junk for File_B. With no metadata, and the fact nobody could decrypt it anyway (only God knows the password) how can they view it in the first place? Of course, you might be lying because secretly you know the password...
[02:26:17] <Gurkenglas> just collect usage data so you can pick a random file that someone else previously used CypherVault to encrypt :3
[02:26:20] <LTCD> It accesses Faroo via encrypted API, it does everything via Tor.
[02:27:10] <LTCD> Gurkenglas It never picks same files twice, it uses HTTPS, it uses Tor, anybody connecting is using Hidden Service, it is hosted offshore in privacy friendly country, no logging, RAM disk so after hourly reboot everything is gone...
[02:27:21] <LTCD> It likely never picks same files twice*
[02:27:28] <Gurkenglas> i was about to say :P
[02:27:44] <LTCD> The encryption is also randomised, so in the event two files were the same then their ciphertext would differ.
[02:28:17] <Gurkenglas> salted, you mean.
[02:28:27] <LTCD> File_A = Your dummy file for example your graduation photo.  File_B = Your secret file *or* something unknown from Faroo with a random password.
[02:28:52] <LTCD> Yes.
[02:29:35] <ms7821> wait, it uses a random password?
[02:29:39] <Gurkenglas> by ||, do you mean you get one of the two, or both in a random order?
[02:29:43] <ms7821> how do you then give that up under duress?
[02:29:44] <LTCD> Even if you annoy the NSA with their quantum computer, there is no proof you own File_B because metadata is erased from all of the different files, so your *insert criminal thing here* might have been randomly discovered on Faroo based on search terms.
[02:30:17] <LTCD> ms7821 File_B is either random file + random password *or* your file + your password.
[02:30:31] <LTCD> Gurkenglas Sorry, the || means concatenation in mathematics. 
[02:30:33] <ms7821> so it's not deniable encryption?
[02:30:39] <LTCD> It is deniable...
[02:31:05] <ms7821> how? if someone says "decrypt this file", how do you find out the random password to decrypt the phony file?
[02:31:19] <LTCD> Officer, I only encrypted File_A and the system always returns (File_A || File_B) together, I have no idea what the other file is ask Faroo who keep no logs...
[02:32:03] <ms7821> right, so then you decrypt File_A, whoops your fanmail to Jordan Peterson is now public
[02:32:34] <LTCD> I am happy to always decrypt File_A for you because it is just my love letter to my high school girlfriend, but the concatenated File_B is not mine.
[02:32:38] <Gurkenglas> judge: "neat encryption scheme. so you can decrypt only one of the two files, the one that's not a dummy, huh? decrypt one of them, please."
[02:33:05] <LTCD> No. You always decrypt File_A but whether you know the password and contents of File_B is debatable. 
[02:33:17] *** Quits: synaps3 (~void@user/synaps3) (Remote host closed the connection)
[02:33:26] <LTCD> File_B might be your file, or File_B might be a random file from Faroo.
[02:33:34] <Gurkenglas> Why have File_A then?
[02:33:38] <LTCD> Faroo is a search engine for privacy, like DuckDuckGo.
[02:33:59] <LTCD> Gurkenglas Because who keeps a single encrypted block of data on their hard drive taking up space?
[02:34:09] *** Joins: j4mb (~j4mb@host-80-181-97-82.retail.telecomitalia.it)
[02:34:15] <j4mb> hi
[02:34:26] <Gurkenglas> LTCD, the same guy who keeps File_A || File_B around when he could delete the File_B part
[02:34:34] <ms7821> who uses deniable crypto unless they have something in the hidden part
[02:34:44] <LTCD> (File_A || File_B) <--- This is a single file.
[02:35:14] <j4mb> how does the vaccine certificate revocation works? every user (veccinated person) has a key pair and then the pub is revoked when it expires?
[02:35:27] <LTCD> Incorrect, because this system has no backdoors etc... Defence in court is "I got forced to use this after the Edward Snowden leaks, because I cannot trust any other software"
[02:35:27] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[02:35:53] <ms7821> hahahaha
[02:35:54] <LTCD> "I honestly only wanted to encrypt a single file your honour, but I was forced to use CypherVault"
[02:35:57] <Gurkenglas> LTCD, let me rephrase: The same guy who encrypts (File_A || File_B) instead of the smaller File_A
[02:36:21] <Gurkenglas> forced by whom?
[02:36:41] <Gurkenglas> oh, missed a sentence
[02:36:56] <LTCD> If you encrypt just File_A then you are forced to use some untrusted close source application, so you were forced to pick my system that is open source. The fact it may, or may not, append a random File_B is not your problem.
[02:37:50] <Gurkenglas> LTCD, but you said you have an *option* to encrypt a second file. "who picks that option, increasing the wasted space on their hard drive?"
[02:38:05] <ms7821> j4mb: I don't think it supports revocation
[02:38:20] <LTCD> Gurkenglas Because if you do, or do not, pick your File_B my system will just find something for you ;-).
[02:38:30] <j4mb> it does in some country, but I am more interested how it would work in case it is supported
[02:38:30] <LTCD> There is always a File_B whether, or not, you uploaded it.
[02:38:51] <ms7821> j4mb: a health authority's signing keys can be revoked, but I really don't think it can
[02:39:01] <ms7821> for individual users
[02:39:02] <Gurkenglas> Ah. "Who would let CypherVault pick, when they could just use the smallest possible file?"
[02:39:27] <j4mb> ms7821, it means that every individial user has a key, but I doubt in this case..
[02:40:02] <ms7821> well exactly. Have a look at what's in the certificate https://gir.st/blog/greenpass.html
[02:40:06] <LTCD> Gurkenglas Non-technical users would not know they can just encrypt a small File_B, but like I said I have used my system many times and File_B has pretty random file sizes.
[02:40:26] <ms7821> no scope for revoking an individual cert, only the signing keys for the COSE wrapper
[02:40:33] <j4mb> ms7821, I will take a look, thanks
[02:40:41] <LTCD> From my experience, most of the time File_B was pretty small, like a PDF.
[02:40:52] <ms7821> j4mb: https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_v2_en.pdf might also be worth reading
[02:41:02] <j4mb> ms7821, it would be useful in case a cert is leaked and can be reused from others
[02:41:15] <ms7821> I don't think that's in their threat model
[02:41:30] <ms7821> it has name, which should be verified
[02:44:26] <j4mb> ms7821, ok so there is a certificate in the QR, which should be a key
[02:44:57] <ms7821> it's not a certificate in the X.509 sense
[02:45:05] <Gurkenglas> I think the system would be improved with n>2: You can point at and decrypt some number of files on the encryption disk section. You would have a number of manifestos scattered in there of escalating radicalism of opinion. In court, you would state that you were using this scheme for plausible deniability - you never know what opinions future governments might outlaw, so you wanted to be able to plausibly deny any 
[02:45:05] <Gurkenglas> such. Fortunately, none of the files on there are illegal in this timeline."
[02:46:10] <Gurkenglas> I'll have to think more about the quantum resistance though.
[02:46:43] <LTCD> My system is really that bad? o.O
[02:47:22] <Gurkenglas> Hm? I wouldn't be surprised if it's the best around that's actually implemented and opensourced.
[02:47:31] <LTCD> If someone does not like the fact you always have an appended File_B which you may, or may not, know the password for is because Edward Snowden said use open source programs, so you cannot trust Symantic Norton Antivirus which IIRC comes with a file encrypter.
[02:48:12] <LTCD> Nicest thing anyone has ever said about me and my crazy ideas. But yes, it works, want to see a quick video demo with my overly British accent haha?
[02:48:35] <Gurkenglas> no need for now, unless there are additional relevant features
[02:49:40] <Gurkenglas> But surely there is some way to smuggle in the defense of justified desire for plausible deniability
[02:50:29] <LTCD> If anyone wants to make me feel better, here is CypherVault: https://file.re/2021/08/16/encryptvideo/
[02:55:55] *** Joins: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net)
[02:56:23] <Gurkenglas> suppose the user encrypts a thousand files, never faroo. he goes to court, decrypt every File_A. wouldnt the filesize distribution over File_Bs be clearly distinct from what faroo would have produced?
[02:57:49] <Gurkenglas> Perhaps you should enforce that File_A and File_B are similar in size
[02:58:24] *** Quits: j4mb (~j4mb@host-80-181-97-82.retail.telecomitalia.it) (Quit: Client closed)
[03:00:09] <LTCD> Gurkenglas I have had Faroo files from a matter of bytes to 4K movies which take many GBs of space. Also, sometimes instead of using Faroo it just generates random junk haha.
[03:00:22] <LTCD> Generates random junk and then encrypts it with a random password.
[03:04:46] <Gurkenglas> LTCD, right, I'm talking about the distribution of file sizes. Suppose we sort all files on faroo by size and separate them into 10 buckets with equal numbers of files, and the largest files in each bucket are 1KB, 2KB, 10KB, 20KB, 100KB, 1MB, 10MB, 100MB, 1GB, 10GB. then we do the same to the defendant's 1000 File_Bs and find 1KB,2KB,3KB,4KB,6KB,8KB,10KB,100MB,1GB,10GB. we summon a statistician and he says that 
[03:04:46] <Gurkenglas> it's astronomically unlikely that the defendant's claim that every file came from faroo is true.
[03:06:29] <LTCD> If someone is being honest when they claim File_B is known, provided my services actually used Faroo (because sometimes it generates junk) then Faroo has not just files, but even HTML files which are occasionally downloaded. There is a crazy number, of almost every single possible file size.
[03:06:50] <LTCD> Also, sometimes file sizes might get corrupted during download, although I should not use exceptions for security. 
[03:07:14] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:07:46] <LTCD> Also, the randomly generated junk file might match one of Faroo's most common file sizes of 1337 bytes haha.
[03:07:50] <Gurkenglas> LTCD yeah we dont need to sort all the faroo files for the statistician to do his job - he just needs to encrypt a thousand files with cyphervault, actually selecting "make a file_B" each time
[03:08:15] <LTCD> Equally, the porn I want to encrypt might be 1234MB in length, which matches Faroo exactly. 
[03:08:50] <Gurkenglas> Do you understand what I mean by the difference between a file size and a file size distribution?
[03:08:52] <LTCD> Gurkenglas You mean *not* selecting his own File_B but letting the CypherVault service find a substitute on Faroo :-p
[03:09:18] <LTCD> Tell me in case I am wrong?
[03:09:19] <Gurkenglas> LTCD, yeah, telling cyphervault to produce a file_b for him
[03:09:34] <LTCD> It only produces a File_B if he decides against uploading his own.
[03:09:49] <ms7821> do I want to ask why the porn you're encrypting needs to be safe in the face of mandatory key disclosure
[03:09:58] <LTCD> ms7821 I was being cheeky. 
[03:10:22] <LTCD> Gurkenglas So he uses my service 1000 times, gets all randomly sized File_B files... and?
[03:10:38] <Gurkenglas> ms7821, just in case trump jr outlaws porn in 10 years >:)
[03:11:33] *** Joins: mouseghost (~draco@user/mouseghost)
[03:11:56] <Gurkenglas> LTCD, you know how you can tell a letter-substitution cipher from random letters, by checking whether some letters are way more common than others?
[03:12:26] <LTCD> Can you imagine how many different files and webpages are available, also I think the scheme I used used to change the output file size, not to mention it always used a random salt.
[03:12:26] <Gurkenglas> LTCD, the statistician checks how common each file size range is in the defendant's files versus the 1000 file_bs he just produced
[03:13:11] <LTCD> Gurkenglas That assumes the encrypted file matches whatever the defendant has on his/her computer. I would not keep a plaintext copy on my laptop...
[03:13:30] <Gurkenglas> you misunderstand. let me draw a picture
[03:13:43] <LTCD> Also, in the case of some very illegal activities, like Red Rooms, those videos are likely bigger than a movie and will not match anything they normally have.
[03:13:58] *** Quits: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) (Remote host closed the connection)
[03:17:16] *** Joins: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net)
[03:17:42] <Gurkenglas> after drawing the table im not sure if it helps http://sketchtoy.com/70064896
[03:18:01] *** Parts: jbis (~jbis@pool-71-190-180-229.nycmny.fios.verizon.net) ()
[03:18:25] <Gurkenglas> the court tries to encrypt the File_As that the defendant provided using his supposed protocol of "provide no File_B" and finds that the filesizes that come out are way different
[03:20:32] <LTCD> But every time you encrypt File_A the File_B will be a different random file (unless someone uploaded their own File_B).
[03:21:13] <Gurkenglas> (they dont have to be this obviously different - it's enough if there are a thousand files and the distributions look like this http://sketchtoy.com/70064902 )
[03:21:28] <LTCD> Like each time the court repeats the experiment those sizes will vary in a crazy manner.
[03:22:01] <LTCD> In my opinion, each file is equally likely.
[03:22:30] <Gurkenglas> aaaa what is this guy doing rolling his own crypto
[03:22:34] <LTCD> Besides, if this is such a huge problem then remind me to either 1) Only use random junk 2) Append random junk to each random file.
[03:23:16] <danieldg> surprisingly that doesn't help
[03:23:18] <Gurkenglas> suppose i have 10 20-sided dice and 10 6-sided dice
[03:23:32] <LTCD> So I go to jail because... the File_B happened to be 20KB which was less likely, but not impossible?
[03:23:45] <Gurkenglas> i roll the 6-sided dice and write down the results
[03:24:03] <danieldg> LTCD: the issue comes up when you have 1000 files, not 1
[03:24:05] <Gurkenglas> court summons you and says 6-sided dice are illegal, you say those were 20-sided results
[03:24:10] <LTCD> The only failure I see is if the file size does not match one from Faroo, but only God can go through every single page of a P2P search engine.
[03:24:57] <Gurkenglas> every time court rolls 10d20 they get way different results, and yet your numbers clearly dont looks like what they get
[03:25:21] <LTCD> So a better idea is to ensure File_B is always a fixed output length then...
[03:26:00] <LTCD> So always add padding to File_B.
[03:27:13] <LTCD> I also still bet that if I used my service now once, and let you use it 1000+ times you would not be able to get Beyond a Reasonable Doubt evidence as to whether File_B was my file, or a random file (generated or discovered on Faroo).
[03:27:38] <Gurkenglas> that is correct
[03:27:40] <maroon> i hope your zip files dont report as if they're using compression
[03:28:06] <LTCD> maroon I am not using zip folders, and all possible metadata is removed, unless this was a message for someone else?
[03:28:14] <LTCD> Gurkenglas What was correct, sorry?
[03:28:36] <maroon> discussion started talking about fake zip files
[03:29:01] <Gurkenglas> you are correct that this won't beyond a reasonable doubt prove you a liar for one file. it would if you have a thousand encrypted files and claim the file_bs are all generated/discovered.
[03:29:42] <Gurkenglas> maroon, i sure concur in your hope that encrypted zip files dont talk about contents like that!
[03:30:58] <LTCD> maroon Please rate my CypherVault system video haha, link in chat.
[03:33:06] <maroon> 2✔ Contains unknown viruses or malware - Last checked: 42 minutes
[03:33:18] <LTCD> Gurkenglas Hmmmm, very interesting. I guess padding is the way to go, ensuring File_B always meets a set size, albeit for wasted space (HDD space is dirt cheap though). What if you did encrypt some File_Bs you were happy to reveal, surely that would change something?
[03:33:31] <LTCD> WTF
[03:33:40] <LTCD> maroon Was that a joke?
[03:33:54] <maroon> no known == unknown
[03:34:42] <LTCD> Dude, that scared me into next year. It is clean, run it within a VM if you are so paranoid.
[03:36:31] <Gurkenglas> LTCD, if you encrypt an extra 100 File_Bs and then reveal them in court that uhhh does nothing to the file size distribution of the remaining 1000
[03:37:59] <Gurkenglas> the file_bs don't have to be all the same length - they only need to be of the same filesize distribution in the custom and generated/discovered case
[03:39:18] <LTCD> Gurkenglas True. I will just ensure every File_B is padded to 1MB, 10MB, 100MB, 1000MB etc... 
[03:39:22] <Gurkenglas> you could let the user specify the filesize distribution that generated files are to use - but then, the defense of "i had to waste space" becomes rather silly
[03:39:29] <LTCD> However big their file is I bring to round figure.
[03:40:01] <LTCD> Most likely it picks equally between the padding and always uses them.
[03:40:45] <maroon> if padded size is Z, then filesize + padlength = Z, and the ranges are known based on the value of Z
[03:40:47] <Gurkenglas> LTCD, damn it! I revoke your math license. Don't roll your own crypto until you ask a mathematician. This does not help if the thousand user files are all 10kb or 10gb
[03:41:51] <LTCD> Is there anything else notably wrong with the system, from what little you know? I coded in JavaEE for the automatic protection against buffer overflows, sanitised input, but regardless the RAM disk means every reboot everything is gone reducing the attackers availability. You can also run this locally on your own machine with NetBeans.
[03:41:58] <Gurkenglas> What would help if you tell the user to pack his data into exactly one zip archive
[03:42:14] <LTCD> Gurkenglas I like that.
[03:43:15] <Gurkenglas> Of course, if the user wants to be nsa-safe his one file_b also has to look like one that faroo might find.
[03:43:44] <LTCD> maroon No, like the random file is 10mb, then the total length is picked from a set 20, 50, 100 etc... So if you pick 100 then 10mb + 90mb = 100mb
[03:43:50] <Gurkenglas> But it's reasonable to presume that some troll uploads *one* zip archive of whatever illegal stuff, and you found it.
[03:44:09] <maroon> in addition to compressed/original sizes, the zip header also contains the purported crc32 of the decompressed file, as well as the file's purported timestamp
[03:44:25] <LTCD> Gurkenglas I have stumbled upon bad, evil things, on Google many times without having any bad intentions. ;-)
[03:44:37] <LTCD> Gurkenglas Faroo is the wildwest compared with Google.
[03:44:58] <LTCD> maroon My system does not use ZIPs luckily.
[03:45:56] <maroon> i remember the story of someone trying to demonstrate how wonderful the internet was, and pulled up whitehouse.com while thinking they were pulling up a US govt website, only to find it being owned by a porn company at that time
[03:46:06] <Gurkenglas> of course, the user isn't nsa-safe if his file_b contains hints that point at the user - for example, if a photo says that it was shot at his address.
[03:46:21] <LTCD> Gurkenglas So in your (and anyone else) honest opinion, the system is fine provided I always pick a random number in a pre-defined set to increase the File_B (whether it is user, or random generated/searched).
[03:46:34] <Gurkenglas> LTCD, no, no its not
[03:47:08] <LTCD> Gurkenglas Well, if they cannot decrypt File_B because the user does not know the password, even if NSA decrypt it good luck when metadata gets removed/
[03:47:09] <Gurkenglas> 10d6+10d3 is distinguishable from 10d20+10d3
[03:47:34] <maroon> you'd have trouble convincing a judge that there's a valid innocent reason to always padd files to length 10gb before encrypting them
[03:48:10] <LTCD> File_B always gets padded to a random length Judge to protect against statistical analysis attacks should somebody have used the plausible deniability feature.
[03:48:24] <Gurkenglas> yeah, the "this is the only crypto system" excuse is flimsy, i'd rather rely on "i have a valid reason to use a system that gives me plausible deniability under duress"
[03:49:09] <LTCD> Not random length sorry, I mean pick a random length from the set {1, 10, 100, 1000} so File_B is always 1MB, 10MB, 100MB, or 1000MB. If done properly you have a uniform distribution on those files.
[03:49:34] <Gurkenglas> LTCD oh wait - do you mean that the filesize is increased *by* the random number, or *to* the random number?
[03:49:38] <LTCD> Gurkenglas Fine, say that, then decrypt a few plausible deniability files but keep your most sensitive one.
[03:50:00] <LTCD> Gurkenglas *To* one of the following picked randomly: {1, 10, 100, 1000}.
[03:50:21] <LTCD> So File_B might be 0.1MB but if the system picks 1000 then the total size becomes 1000mb.
[03:50:35] <Gurkenglas> Getting better. What if the file is already bigger than the random size you picked?
[03:50:50] <LTCD> 0.1 + 999.9 = if I did maths correctly haha.
[03:51:31] <LTCD> Gurkenglas We set a file size limit I guess, which makes sense as nobody should use individual file encryption for anything that big.
[03:51:49] <Gurkenglas> LTCD, why shouldn't they?
[03:52:00] <Gurkenglas> And if there's a limit, you can always pad to that limit, no need to randomly go bigger
[03:52:47] <LTCD> I would prefer if my service had a 1/4 chance of File_B being 1mb, 1/4 of File_B being 10mb etc... to make stats impossible.
[03:52:57] <maroon> if padded filesize is 100, odds are much higher that the file is 90+ than it's 1-10
[03:53:13] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[03:53:13] <Gurkenglas> LTCD, in what manner does doing this hurt stats
[03:53:30] <LTCD> The file found on Faroo could be any size, we then pick a new total size for the file.
[03:54:04] <Gurkenglas> maroon, not for a log-uniform prior - you should rather say that it's evidence the file is >10.
[03:54:55] *** Joins: kish` (~aqua@user/aqua)
[03:55:15] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[03:55:35] *** Joins: kish` (~aqua@user/aqua)
[03:56:16] <Gurkenglas> LTCD, are user-supplied files still enforced as <1mb?
[03:59:06] <LTCD> File_B whether it is your file, or a randomly encrypted file found on Faroo, will be increased in size with padding so it matches one of the randomly picked options in this set {1,10,100,1000} provided of course your file is not bigger than one of the options. It would be unlucky if a tiny HTML file became 1000mb but all in the name of randomness.#
[04:02:12] <LTCD> Gurkenglas Correct?
[04:02:45] <Gurkenglas> LTCD, what happens if the file is larger than the option?
[04:03:08] <LTCD> LTCD appreciates the nice community on IRC, unlike the wolves to the sheep mentality of Reddit.
[04:04:03] <LTCD> Gurkenglas We limit file sizes to a size where we can still add padding.
[04:05:15] <Gurkenglas> LTCD, then what "stat-averting" advantage do you get from sometimes picking more than 1mb?
[04:05:41] <LTCD> The File_B will always have a total size of {1, 10, 100, 1000}
[04:05:57] <Gurkenglas> how is this better than always having 1
[04:05:59] <LTCD> Those sizes are picked randomly when possible.
[04:06:38] <Gurkenglas> what attack are you defending against with this measure
[04:07:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:09:27] <LTCD> The statistical one you mentioned earlier?
[04:09:44] <LTCD> Gurkenglas If I am wrong, please suggest an alternative, like giving every File_B the same file size.
[04:11:15] <Gurkenglas> LTCD, the statistical attack earlier is about distinguishing the generated/searched filesize distribution from the user-supplied filesize distribution. Whether the distributions are both "25% each on 1/10/100/1000" or both "always 1" doesn't matter
[04:13:44] <LTCD> Why does it not matter? In case there is a misunderstanding, I intend to also do this with actual user File_B's not just those generated or found on Faroo. Every single File_B will be padded to a specific size.
[04:13:47] <Gurkenglas> LTCD, padding all to 1 mb works, but the nsa-safety is again out the window if the file_bs are all zips or something - you wouldnt get that from faroo. So my actual suggestion is to only ever make one file pair.
[04:14:30] <Gurkenglas> And my more actual suggestion is to make it more than a pair, but that's a nontrivial feature request :)
[04:15:40] *** Joins: Julius_ (~Julius76@2a02:810b:c640:514:414:4862:40cd:eb0f)
[04:16:17] <Gurkenglas> (though i still dont have the nsa safety part of that, hmmm)
[04:18:25] <LTCD> What does one file pair mean?
[04:18:57] <Gurkenglas> A || B
[04:19:29] <Gurkenglas> The A seems unnecessary, but one could have many Bs
[04:20:43] <LTCD> I will stick with one file pair A || B. But, what is the problem with seeing File_B's file size and picking a suitable number to increment the file to, like if File_B in 50mb then out of {1,10,100,1000} you need to flip a coin and pick from {100,1000}. So returned File_B has a new size of 100mb or 1000mb.
[04:21:20] <Gurkenglas> well now youve gone and flipped it back from wasteful to leaky
[04:23:26] <LTCD> Oh, why?
[04:23:49] <LTCD> Sorry, just for the sake of me being a lost cause, what exactly should I do?
[04:26:27] <Gurkenglas> suppose the searched/generated files are 25% <1mb, 50% <10mb, 75% <100mb, 100%<1000mb. suppose your 1000 files are 50%<1mb, 50%<100mb, 100%<1000mb. then (disregarding noise) your 1000 encrypted file sizes will be 12.5% 1mb, 12.5% 10mb, 12.5% 100mb, 62.5% 1000mb, whereas if they were all generated/searched they would have been 6.25% 1mb, 14.6% 10mb, 27% 100mb, 52% 1000mb.
[04:27:34] <Gurkenglas> the court statistician says "p-value is small enough, lock him away boys"
[04:27:53] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[04:29:11] <LTCD> Hmmm good point. In that case, every File_B needs to be padded to the exact same length.
[04:29:17] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:29:58] <LTCD> If every File_B is like 200mb for the sake of security, plausible deniability, anti-statistics drama, open source cryptography, and the fact data storage is cheap...
[04:30:52] <LTCD> Next problem would be whether padding is noticeable somehow, as I heard some MACs are vulnerable to padding Oracles.
[04:32:35] <LTCD> Unless you have a better idea?
[04:34:20] <Gurkenglas> https://en.wikipedia.org/wiki/Padding_oracle_attack seems more like fun math resulting from a failure of basic opsec than something a crypto designed needs to worry about
[04:34:29] <Gurkenglas> *designer
[04:36:50] <Gurkenglas> LTCD, I see little reason to do the padding thing over the "one file per user" thing
[04:38:10] <LTCD> If I limit just to File_A this whole system becomes useless though... Why else would you have a random file on your computer you cannot decrypt?
[04:38:16] *** Quits: maroon (tinycrypt@user/maroon) (Ping timeout: 268 seconds)
[04:41:15] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[04:43:52] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[04:49:03] <Gurkenglas> miscommunication: i meant the mere documentation change where you tell the user of your current system to combine all of the files he wants to encrypt into one archive
[04:49:46] <Gurkenglas> (and if he wants to encrypt more than one file_b, also put those in one archive)
[04:50:27] *** Joins: xenoterracide_ (~xenoterra@50-124-250-111.alma.mi.frontiernet.net)
[04:50:39] *** Joins: xenoterracide (~xenoterra@50-124-250-111.alma.mi.frontiernet.net)
[04:51:48] *** Quits: xenoterracide (~xenoterra@50-124-250-111.alma.mi.frontiernet.net) (Client Quit)
[04:53:52] <Gurkenglas> LTCD, "i had nothing better to do with my drive space yet and this lets me stick it to the man" seems like defense enough
[04:54:25] <Gurkenglas> after all you already need some excuse for being interested in crypto and opensource xP
[04:55:04] <LTCD> "Edward Snowden said you cannot trust close source, so I stopped using Symmantec Norton Antivirus' file encryption capabilities"
[04:55:53] <LTCD> But yes, I like that idea, having one (File_A || File_B) is much less suspicious than having 2943732 of them scattered around on a hard drive. 
[04:58:50] *** Quits: xenoterracide_ (~xenoterra@50-124-250-111.alma.mi.frontiernet.net) (Ping timeout: 272 seconds)
[05:02:42] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[05:16:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[05:19:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:23:30] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[05:24:48] *** Joins: maroon (~tinycrypt@user/maroon)
[05:28:49] *** Joins: kbdlnx (~kbdlnx123@102.129.153.174)
[05:31:56] *** Quits: kbdlnx1_ (~kbdlnx123@72.252.198.165) (Ping timeout: 268 seconds)
[05:44:30] *** Joins: frost (~frost@59.71.240.119)
[05:47:56] *** Joins: Damage (~Damage@2a03:f80:ed16:ca7:ea75:b12d:1f0:c965)
[05:57:56] *** Joins: kbdlnx1_ (~kbdlnx123@72.252.198.165)
[05:57:57] *** Damage is now known as antion
[05:58:29] *** antion is now known as Damage
[06:00:41] *** Quits: kbdlnx (~kbdlnx123@102.129.153.174) (Ping timeout: 248 seconds)
[06:26:51] *** A_Dragon is now known as gAy_Dragon
[06:27:20] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[06:34:28] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 272 seconds)
[06:58:43] *** Joins: gggp__ (~gggp@114.245.111.117)
[06:58:48] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 244 seconds)
[07:07:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[07:08:32] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Ping timeout: 258 seconds)
[07:12:34] *** Joins: gggp_ (~gggp@114.243.61.163)
[07:15:49] *** Quits: gggp__ (~gggp@114.245.111.117) (Ping timeout: 258 seconds)
[07:34:52] *** Quits: Julius_ (~Julius76@2a02:810b:c640:514:414:4862:40cd:eb0f) (Read error: Connection reset by peer)
[07:38:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[07:48:27] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[07:50:32] *** Quits: Elzington (~Elzington@68.235.43.172) (Quit: Leaving)
[07:55:39] *** Quits: jtdowney (~jtdowney@user/jtdowney) (Quit: Bye)
[07:56:02] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[07:58:09] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:1b0:c497:1fa8:9a5d) (Quit: Client closed)
[08:00:40] *** Joins: Julius_ (~Julius76@2a02:810b:c640:514:4930:61c3:f0be:4b4f)
[08:03:54] *** Parts: Damage (~Damage@2a03:f80:ed16:ca7:ea75:b12d:1f0:c965) (WeeChat 2.6)
[08:18:53] *** Joins: Elzington (~Elzington@68.235.43.108)
[08:31:22] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 268 seconds)
[08:35:46] *** Quits: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752) (Remote host closed the connection)
[08:35:54] *** Joins: sec0nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[08:36:49] *** sec0nd is now known as sec^nd
[08:49:25] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[08:49:54] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[08:56:07] *** Joins: mei (~mei@user/mei)
[09:08:06] *** Joins: Wulf (~Wulf@user/wulf)
[09:12:38] *** Quits: moose (~moose@user/moose) (*.net *.split)
[09:12:38] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (*.net *.split)
[09:12:38] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[09:12:38] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (*.net *.split)
[09:12:38] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com) (*.net *.split)
[09:12:38] *** Quits: trebuh (~trebuh@2001:41d0:a:15c7::1) (*.net *.split)
[09:12:38] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:12:38] *** Quits: felco (~felco@user/felco) (*.net *.split)
[09:12:38] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[09:12:38] *** Quits: cwebber (~user@user/cwebber) (*.net *.split)
[09:12:38] *** Quits: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76) (*.net *.split)
[09:12:39] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (*.net *.split)
[09:12:39] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[09:12:39] *** Quits: zd (~zd@7.210.184.35.bc.googleusercontent.com) (*.net *.split)
[09:12:39] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[09:12:39] *** Quits: jds (rpc@2600:3c00::f03c:91ff:fed5:10aa) (*.net *.split)
[09:12:56] *** Joins: kish` (~aqua@user/aqua)
[09:13:10] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[09:13:12] *** Joins: moose (~moose@user/moose)
[09:13:12] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[09:13:12] *** Joins: dez (uid92154@user/dez)
[09:13:12] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[09:13:12] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com)
[09:13:12] *** Joins: trebuh (~trebuh@2001:41d0:a:15c7::1)
[09:13:12] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:13:12] *** Joins: felco (~felco@user/felco)
[09:13:12] *** Joins: cehteh (~ct@git.pipapo.org)
[09:13:12] *** Joins: cwebber (~user@user/cwebber)
[09:13:12] *** Joins: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76)
[09:13:12] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[09:13:12] *** Joins: _0ne (~one@user/0ne/x-2101768)
[09:13:12] *** Joins: zd (~zd@7.210.184.35.bc.googleusercontent.com)
[09:13:12] *** Joins: Henry151 (~bishop@user/henry151)
[09:13:12] *** Joins: jds (rpc@2600:3c00::f03c:91ff:fed5:10aa)
[09:13:32] *** Joins: kish` (~aqua@user/aqua)
[09:14:54] *** Quits: kbdlnx1_ (~kbdlnx123@72.252.198.165) (*.net *.split)
[09:14:54] *** Quits: WarpedAI (~Warped@user/warped) (*.net *.split)
[09:14:54] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[09:14:55] *** Quits: hendi (sid489601@id-489601.tooting.irccloud.com) (*.net *.split)
[09:14:55] *** Quits: krin (sid500722@user/krin) (*.net *.split)
[09:14:55] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[09:14:55] *** Quits: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se) (*.net *.split)
[09:14:55] *** Quits: duck[m] (~duckmatri@2001:470:69fc:105::ca77) (*.net *.split)
[09:14:55] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (*.net *.split)
[09:14:55] *** Quits: phebus (~phebus@fsf/member/phebus) (*.net *.split)
[09:14:56] *** Quits: martin02 (silas@hund.fs.lmu.de) (*.net *.split)
[09:14:56] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[09:15:22] *** Joins: kbdlnx1_ (~kbdlnx123@72.252.198.165)
[09:15:22] *** Joins: WarpedAI (~Warped@user/warped)
[09:15:22] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[09:15:22] *** Joins: hendi (sid489601@id-489601.tooting.irccloud.com)
[09:15:22] *** Joins: krin (sid500722@user/krin)
[09:15:22] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:15:22] *** Joins: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se)
[09:15:22] *** Joins: duck[m] (~duckmatri@2001:470:69fc:105::ca77)
[09:15:22] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[09:15:22] *** Joins: phebus (~phebus@fsf/member/phebus)
[09:15:22] *** Joins: martin02 (silas@hund.fs.lmu.de)
[09:15:22] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[09:15:57] *** Quits: heretical_crypte (~heretical@2001:470:69fc:105::8054) (Ping timeout: 245 seconds)
[09:16:34] *** Quits: cacu[m] (~cacuconve@2001:470:69fc:105::b9df) (Ping timeout: 240 seconds)
[09:16:34] *** Quits: lockna (~lockna@2001:470:69fc:105::d697) (Ping timeout: 240 seconds)
[09:16:37] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Max SendQ exceeded)
[09:17:14] *** Quits: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76) (Ping timeout: 272 seconds)
[09:18:04] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[09:18:04] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[09:18:04] *** Quits: piou (~piou@user/piou) (*.net *.split)
[09:18:04] *** Quits: yarmo (~web@keyoxide/dev/yarmo) (*.net *.split)
[09:18:04] *** Quits: Mutsuhito (sid13530@charlton.irccloud.com) (*.net *.split)
[09:18:04] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[09:18:04] *** Quits: FireFly (firefly@glowbum/gluehwuermchen/firefly) (*.net *.split)
[09:18:04] *** Quits: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f) (*.net *.split)
[09:18:04] *** Quits: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr) (*.net *.split)
[09:18:04] *** Quits: Colti (Miramar-FL@user/host-pond) (*.net *.split)
[09:18:04] *** Quits: rxcomm (~rxcomm@user/rxcomm) (*.net *.split)
[09:18:04] *** Quits: _- (~orgg@20.55.233.57) (*.net *.split)
[09:18:04] *** Quits: ch1p (~ch1p@ch1p.io) (*.net *.split)
[09:18:04] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[09:18:04] *** Quits: ldm (~ldm@hacksoc/member) (*.net *.split)
[09:18:04] *** Quits: Pricey (~pricey@libera/staff/pricey) (*.net *.split)
[09:18:04] *** Quits: KeterClass (~KeterClas@vm0.max-p.me) (*.net *.split)
[09:18:04] *** Quits: tkob (tkob@user/thekingofbandit) (*.net *.split)
[09:18:04] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[09:18:04] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (*.net *.split)
[09:18:04] *** Quits: neildaemond (~neildaemo@2607:5300:61:c67::196) (*.net *.split)
[09:18:04] *** Quits: kept (~kept@user/kept) (*.net *.split)
[09:18:05] *** Quits: kbdlnx1_ (~kbdlnx123@72.252.198.165) (*.net *.split)
[09:18:05] *** Quits: WarpedAI (~Warped@user/warped) (*.net *.split)
[09:18:05] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[09:18:05] *** Quits: hendi (sid489601@id-489601.tooting.irccloud.com) (*.net *.split)
[09:18:05] *** Quits: krin (sid500722@user/krin) (*.net *.split)
[09:18:05] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[09:18:05] *** Quits: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se) (*.net *.split)
[09:18:05] *** Quits: duck[m] (~duckmatri@2001:470:69fc:105::ca77) (*.net *.split)
[09:18:05] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (*.net *.split)
[09:18:05] *** Quits: phebus (~phebus@fsf/member/phebus) (*.net *.split)
[09:18:05] *** Quits: martin02 (silas@hund.fs.lmu.de) (*.net *.split)
[09:18:05] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[09:18:05] *** Quits: moose (~moose@user/moose) (*.net *.split)
[09:18:05] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (*.net *.split)
[09:18:05] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[09:18:05] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (*.net *.split)
[09:18:05] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com) (*.net *.split)
[09:18:05] *** Quits: trebuh (~trebuh@2001:41d0:a:15c7::1) (*.net *.split)
[09:18:05] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:18:05] *** Quits: felco (~felco@user/felco) (*.net *.split)
[09:18:05] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[09:18:05] *** Quits: cwebber (~user@user/cwebber) (*.net *.split)
[09:18:06] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (*.net *.split)
[09:18:06] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[09:18:06] *** Quits: zd (~zd@7.210.184.35.bc.googleusercontent.com) (*.net *.split)
[09:18:06] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[09:18:06] *** Quits: jds (rpc@2600:3c00::f03c:91ff:fed5:10aa) (*.net *.split)
[09:18:06] *** Quits: mei (~mei@user/mei) (*.net *.split)
[09:18:06] *** Quits: Elzington (~Elzington@68.235.43.108) (*.net *.split)
[09:18:06] *** Quits: jtdowney (~jtdowney@user/jtdowney) (*.net *.split)
[09:18:06] *** Quits: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru) (*.net *.split)
[09:18:06] *** Quits: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz) (*.net *.split)
[09:18:06] *** Quits: sol (~toor@oops.root.sx) (*.net *.split)
[09:18:06] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[09:18:06] *** Quits: srikavin (~srikavin@user/srikavin) (*.net *.split)
[09:18:06] *** Quits: terabit (sid146285@highgate.irccloud.com) (*.net *.split)
[09:18:06] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[09:18:06] *** Quits: SrPx (sid108780@highgate.irccloud.com) (*.net *.split)
[09:18:06] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (*.net *.split)
[09:18:06] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[09:18:06] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[09:18:06] *** Quits: lord| (~lordpipe@user/lordpipe) (*.net *.split)
[09:18:06] *** Quits: aravk (~aravk@user/aravk) (*.net *.split)
[09:18:06] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (*.net *.split)
[09:18:06] *** Quits: mz` (~mz`@user/mz/x-8532539) (*.net *.split)
[09:18:06] *** Quits: fltrz_ (~fltrz@213.219.147.109.adsl.dyn.edpnet.net) (*.net *.split)
[09:18:06] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[09:18:06] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (*.net *.split)
[09:18:07] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[09:18:07] *** Quits: meyer (~nunyuh@user/cosanostra) (*.net *.split)
[09:18:07] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[09:18:07] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[09:18:07] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (*.net *.split)
[09:18:07] *** Quits: Brnocrist (~spartak@user/brnocrist) (*.net *.split)
[09:18:07] *** Quits: bbear (~znc@21212.s.t4vps.eu) (*.net *.split)
[09:18:07] *** Quits: Dan0maN (~Dan0maN@user/dan0man) (*.net *.split)
[09:18:07] *** Quits: lizzie (~alex@meowface.org) (*.net *.split)
[09:18:07] *** Quits: signop_ (~signop@li699-102.members.linode.com) (*.net *.split)
[09:18:07] *** Quits: Gravis (~gravis@user/gravis) (*.net *.split)
[09:18:07] *** Quits: snappy (~snappy@user/snappy) (*.net *.split)
[09:18:07] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:18:07] *** Quits: emp75 (~emp75@50.39.119.176) (*.net *.split)
[09:18:07] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[09:18:07] *** Quits: dusk (~quassel@2a01:4f8:231:3ac7:2702::1) (*.net *.split)
[09:18:07] *** Quits: Brownout (~brown@user/brown) (*.net *.split)
[09:18:07] *** Quits: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com) (*.net *.split)
[09:18:07] *** Quits: stoner19_ (~stoner19@2a02:c207:2022:1374::1) (*.net *.split)
[09:18:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[09:18:07] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[09:18:08] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:18:08] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (*.net *.split)
[09:18:08] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (*.net *.split)
[09:18:08] *** Quits: gggp_ (~gggp@114.243.61.163) (*.net *.split)
[09:18:08] *** Quits: frost (~frost@59.71.240.119) (*.net *.split)
[09:18:08] *** Quits: maroon (~tinycrypt@user/maroon) (*.net *.split)
[09:18:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[09:18:08] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (*.net *.split)
[09:18:08] *** Quits: aleck1 (~aleck@user/aleck) (*.net *.split)
[09:18:08] *** Quits: struct0 (~struct0@104.248.115.49) (*.net *.split)
[09:18:08] *** Quits: nevivurn (~nevivurn@user/nevivurn) (*.net *.split)
[09:18:08] *** Quits: elichai2 (sid212594@stonehaven.irccloud.com) (*.net *.split)
[09:18:08] *** Quits: hsiktas (sid224847@tooting.irccloud.com) (*.net *.split)
[09:18:08] *** Quits: voiceofreason (~voiceofre@207.148.10.181) (*.net *.split)
[09:18:08] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[09:18:08] *** Quits: DefiantN (~DefiantN@user/defiantn) (*.net *.split)
[09:18:08] *** Quits: lazzurs (~lazzurs@user/lazzurs) (*.net *.split)
[09:18:08] *** Quits: onelegend (onelegend@wireguard/tunneler/onelegend) (*.net *.split)
[09:18:08] *** Quits: vicash (~vicash@pool-72-76-239-6.nwrknj.fios.verizon.net) (*.net *.split)
[09:18:08] *** Quits: em (~em@li247-180.members.linode.com) (*.net *.split)
[09:18:09] *** Quits: ericnoan_ (~en@user/ericnoan) (*.net *.split)
[09:18:09] *** Quits: francis (francis@user/francis) (*.net *.split)
[09:18:09] *** Quits: sarnold (~sarnold@ubuntu/member/sarnold) (*.net *.split)
[09:18:09] *** Quits: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:18:09] *** Quits: FortunateSon (~Fortunate@rrcs-67-79-54-150.sw.biz.rr.com) (*.net *.split)
[09:18:09] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[09:18:09] *** Quits: Julius_ (~Julius76@2a02:810b:c640:514:4930:61c3:f0be:4b4f) (*.net *.split)
[09:18:09] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[09:18:09] *** Quits: menace (~someone@user/menace) (*.net *.split)
[09:18:09] *** Quits: PotatoGim (sid99505@tooting.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (*.net *.split)
[09:18:09] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[09:18:09] *** Quits: swebb (~swebb@161.97.198.243) (*.net *.split)
[09:18:09] *** Quits: lenish (~Rodya@205.185.115.119) (*.net *.split)
[09:18:09] *** Quits: wxallowed (~d4@151.51.133.244) (*.net *.split)
[09:18:09] *** Quits: beard (sid110468@user/beard) (*.net *.split)
[09:18:09] *** Quits: hlieberman (sid17492@id-17492.tinside.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[09:18:09] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (*.net *.split)
[09:18:09] *** Quits: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net) (*.net *.split)
[09:18:09] *** Quits: mats1 (sid23029@id-23029.tinside.irccloud.com) (*.net *.split)
[09:18:09] *** Quits: aizen (sid462968@id-462968.charlton.irccloud.com) (*.net *.split)
[09:18:10] *** Quits: davidc__ (~user13172@will.hack.for.beer) (*.net *.split)
[09:18:10] *** Quits: linear_cannon (~linear@50.35.78.163) (*.net *.split)
[09:18:10] *** Quits: otoburb (~otoburb@user/otoburb) (*.net *.split)
[09:18:10] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[09:18:10] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[09:18:10] *** Quits: HifiKuno (~HifiKuno@167-179-170-202.a7b3aa.bne.nbn.aussiebb.net) (*.net *.split)
[09:18:10] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[09:18:10] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:18:10] *** Quits: sebbu (~sebbu@user/sebbu) (*.net *.split)
[09:18:10] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[09:18:10] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[09:18:10] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[09:18:10] *** Quits: mteo (francis@user/francis) (*.net *.split)
[09:18:10] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[09:18:10] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (*.net *.split)
[09:18:10] *** Quits: hardtotell (~hardtotel@satyr.seedboxes.cc) (*.net *.split)
[09:18:10] *** Quits: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com) (*.net *.split)
[09:18:10] *** Quits: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com) (*.net *.split)
[09:18:10] *** Quits: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[09:18:10] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (*.net *.split)
[09:18:10] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[09:18:10] *** Quits: yawkat (~yawkat@cats.coffee) (*.net *.split)
[09:18:10] *** Quits: t0x0sh (~tosh@176.158.137.106) (*.net *.split)
[09:18:10] *** Quits: aczid (~aczid@tuig.nikhef.nl) (*.net *.split)
[09:18:10] *** Quits: towel (~towel@user/towel) (*.net *.split)
[09:18:10] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (*.net *.split)
[09:18:11] *** Quits: hl (~hl@user/hl) (*.net *.split)
[09:18:11] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:18:11] *** Quits: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net) (*.net *.split)
[09:18:11] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[09:18:11] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[09:18:11] *** Quits: jstoker (~jstoker@user/jstoker) (*.net *.split)
[09:18:11] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[09:18:11] *** Quits: danieldg (~me@user/danieldg) (*.net *.split)
[09:18:11] *** Quits: lithiumpt (~lithiumpt@37.120.213.116) (*.net *.split)
[09:18:11] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[09:18:11] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:18:11] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:18:11] *** Quits: glider_ (~glider@user/glider) (*.net *.split)
[09:18:11] *** Quits: ms7821 (~Mark@london.rack.ms) (*.net *.split)
[09:18:11] *** Quits: Richard (EpicKitty@marshadow.epickitty.co.uk) (*.net *.split)
[09:18:11] *** Quits: echoreply1 (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[09:18:11] *** Quits: tolarz (bfa39a78db@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[09:18:11] *** Quits: voker57 (~quassel@2a06:1700:0:24::) (*.net *.split)
[09:18:11] *** Quits: yang (~yang@fsf/member/yang) (*.net *.split)
[09:18:11] *** Quits: kish` (~aqua@user/aqua) (*.net *.split)
[09:18:11] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (*.net *.split)
[09:18:11] *** Quits: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752) (*.net *.split)
[09:18:11] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (*.net *.split)
[09:18:11] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (*.net *.split)
[09:18:11] *** Quits: hendursaga (~weechat@user/hendursaga) (*.net *.split)
[09:18:11] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (*.net *.split)
[09:18:11] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (*.net *.split)
[09:18:11] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[09:18:11] *** Quits: madage (~madage@user/madage) (*.net *.split)
[09:18:11] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (*.net *.split)
[09:18:11] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[09:18:12] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:18:12] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[09:18:12] *** Quits: JvD (~jvd@kpa15.kuuskaista.fi) (*.net *.split)
[09:18:12] *** Quits: zgrep (~zgrep@user/zgrep) (*.net *.split)
[09:18:12] *** Quits: softpaw (~softpaw@185.162.184.11) (*.net *.split)
[09:18:12] *** Quits: iokill_ (~dave@static.16.105.130.94.clients.your-server.de) (*.net *.split)
[09:18:12] *** Quits: Kryczek (~kryczek@5.194.159.20) (*.net *.split)
[09:18:12] *** Quits: TimMc (~timmc@user/timmc) (*.net *.split)
[09:18:12] *** Quits: Ori_B (~ori@mimir.eigenstate.org) (*.net *.split)
[09:18:12] *** Quits: haskal (~haskal@tilde.town) (*.net *.split)
[09:18:12] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[09:18:12] *** Quits: gAy_Dragon (A_D@doom-tower.awesome-dragon.science) (*.net *.split)
[09:18:12] *** Quits: artart78 (~artart78@2001:41d0:a:3ba6::1) (*.net *.split)
[09:18:12] *** Quits: MyWay (~MyWay@2001:41d0:8:be9a::1) (*.net *.split)
[09:18:12] *** Quits: ndo- (~ndo@user/ndo-) (*.net *.split)
[09:18:12] *** Quits: pdg (sid395042@id-395042.tooting.irccloud.com) (*.net *.split)
[09:18:12] *** Quits: Hash (~weechat@thestonedapes.com) (*.net *.split)
[09:18:34] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[09:18:34] *** Joins: martin02 (silas@hund.fs.lmu.de)
[09:18:34] *** Joins: phebus (~phebus@fsf/member/phebus)
[09:18:34] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[09:18:34] *** Joins: duck[m] (~duckmatri@2001:470:69fc:105::ca77)
[09:18:34] *** Joins: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se)
[09:18:34] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:18:34] *** Joins: krin (sid500722@user/krin)
[09:18:34] *** Joins: hendi (sid489601@id-489601.tooting.irccloud.com)
[09:18:34] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[09:18:34] *** Joins: WarpedAI (~Warped@user/warped)
[09:18:34] *** Joins: kbdlnx1_ (~kbdlnx123@72.252.198.165)
[09:18:34] *** Joins: kish` (~aqua@user/aqua)
[09:18:34] *** Joins: jds (rpc@2600:3c00::f03c:91ff:fed5:10aa)
[09:18:34] *** Joins: Henry151 (~bishop@user/henry151)
[09:18:34] *** Joins: zd (~zd@7.210.184.35.bc.googleusercontent.com)
[09:18:34] *** Joins: _0ne (~one@user/0ne/x-2101768)
[09:18:34] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[09:18:34] *** Joins: cwebber (~user@user/cwebber)
[09:18:34] *** Joins: cehteh (~ct@git.pipapo.org)
[09:18:34] *** Joins: felco (~felco@user/felco)
[09:18:34] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:18:34] *** Joins: trebuh (~trebuh@2001:41d0:a:15c7::1)
[09:18:34] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com)
[09:18:34] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[09:18:34] *** Joins: dez (uid92154@user/dez)
[09:18:34] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[09:18:34] *** Joins: moose (~moose@user/moose)
[09:18:34] *** Joins: Wulf (~Wulf@user/wulf)
[09:18:34] *** Joins: mei (~mei@user/mei)
[09:18:34] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[09:18:34] *** Joins: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[09:18:34] *** Joins: Elzington (~Elzington@68.235.43.108)
[09:18:34] *** Joins: Julius_ (~Julius76@2a02:810b:c640:514:4930:61c3:f0be:4b4f)
[09:18:34] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[09:18:34] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[09:18:34] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:18:34] *** Joins: gggp_ (~gggp@114.243.61.163)
[09:18:34] *** Joins: frost (~frost@59.71.240.119)
[09:18:34] *** Joins: maroon (~tinycrypt@user/maroon)
[09:18:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:18:34] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[09:18:34] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:18:34] *** Joins: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru)
[09:18:34] *** Joins: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz)
[09:18:34] *** Joins: aleck1 (~aleck@user/aleck)
[09:18:34] *** Joins: menace (~someone@user/menace)
[09:18:34] *** Joins: struct0 (~struct0@104.248.115.49)
[09:18:34] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:18:34] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:18:34] *** Joins: sol (~toor@oops.root.sx)
[09:18:34] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[09:18:34] *** Joins: Ragnor (~Ragnor@user/ragnor)
[09:18:34] *** Joins: srikavin (~srikavin@user/srikavin)
[09:18:34] *** Joins: elichai2 (sid212594@stonehaven.irccloud.com)
[09:18:34] *** Joins: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com)
[09:18:34] *** Joins: PotatoGim (sid99505@tooting.irccloud.com)
[09:18:34] *** Joins: terabit (sid146285@highgate.irccloud.com)
[09:18:34] *** Joins: Mutsuhito (sid13530@charlton.irccloud.com)
[09:18:34] *** Joins: hsiktas (sid224847@tooting.irccloud.com)
[09:18:34] *** Joins: bw (sid2730@user/betawaffle)
[09:18:34] *** Joins: SrPx (sid108780@highgate.irccloud.com)
[09:18:34] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[09:18:34] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[09:18:34] *** Joins: voiceofreason (~voiceofre@207.148.10.181)
[09:18:34] *** Joins: yang (~yang@fsf/member/yang)
[09:18:34] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[09:18:34] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:18:34] *** Joins: sm2n (~sm2n@user/sm2n)
[09:18:34] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:18:34] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[09:18:34] *** Joins: somlis (~somlis@user/somlis)
[09:18:34] *** Joins: lord| (~lordpipe@user/lordpipe)
[09:18:34] *** Joins: swebb (~swebb@161.97.198.243)
[09:18:34] *** Joins: aravk (~aravk@user/aravk)
[09:18:34] *** Joins: lenish (~Rodya@205.185.115.119)
[09:18:34] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:18:34] *** Joins: DefiantN (~DefiantN@user/defiantn)
[09:18:34] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[09:18:34] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[09:18:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:18:34] *** Joins: fltrz_ (~fltrz@213.219.147.109.adsl.dyn.edpnet.net)
[09:18:34] *** Joins: FireFly (firefly@glowbum/gluehwuermchen/firefly)
[09:18:34] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[09:18:34] *** Joins: vicash (~vicash@pool-72-76-239-6.nwrknj.fios.verizon.net)
[09:18:34] *** Joins: em (~em@li247-180.members.linode.com)
[09:18:34] *** Joins: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f)
[09:18:34] *** Joins: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr)
[09:18:34] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[09:18:34] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[09:18:34] *** Joins: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com)
[09:18:34] *** Joins: sebbu (~sebbu@user/sebbu)
[09:18:34] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[09:18:34] *** Joins: madage (~madage@user/madage)
[09:18:34] *** Joins: wxallowed (~d4@151.51.133.244)
[09:18:34] *** Joins: Colti (Miramar-FL@user/host-pond)
[09:18:34] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:18:34] *** Joins: yarmo (~web@keyoxide/dev/yarmo)
[09:18:34] *** Joins: piou (~piou@user/piou)
[09:18:34] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[09:18:34] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[09:18:34] *** Joins: kept (~kept@user/kept)
[09:18:34] *** Joins: neildaemond (~neildaemo@2607:5300:61:c67::196)
[09:18:34] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[09:18:34] *** Joins: mweckbecker (~matthias@weckbecker.name)
[09:18:34] *** Joins: tkob (tkob@user/thekingofbandit)
[09:18:34] *** Joins: KeterClass (~KeterClas@vm0.max-p.me)
[09:18:34] *** Joins: Pricey (~pricey@libera/staff/pricey)
[09:18:34] *** Joins: ldm (~ldm@hacksoc/member)
[09:18:34] *** Joins: int-e (~noone@int-e.eu)
[09:18:34] *** Joins: ch1p (~ch1p@ch1p.io)
[09:18:34] *** Joins: _- (~orgg@20.55.233.57)
[09:18:34] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[09:18:34] *** Joins: ericnoan_ (~en@user/ericnoan)
[09:18:34] *** Joins: francis (francis@user/francis)
[09:18:34] *** Joins: sarnold (~sarnold@ubuntu/member/sarnold)
[09:18:34] *** Joins: lizzie (~alex@meowface.org)
[09:18:34] *** Joins: signop_ (~signop@li699-102.members.linode.com)
[09:18:34] *** Joins: stoner19_ (~stoner19@2a02:c207:2022:1374::1)
[09:18:34] *** Joins: Disconsented (~quassel@107.170.227.20)
[09:18:34] *** Joins: Gravis (~gravis@user/gravis)
[09:18:34] *** Joins: meyer (~nunyuh@user/cosanostra)
[09:18:34] *** Joins: zegalch (~zegalch@178.128.75.133)
[09:18:34] *** Joins: beard (sid110468@user/beard)
[09:18:34] *** Joins: hlieberman (sid17492@id-17492.tinside.irccloud.com)
[09:18:34] *** Joins: snappy (~snappy@user/snappy)
[09:18:34] *** Joins: Alipha (~AliphaX@user/alipha)
[09:18:34] *** Joins: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[09:18:34] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[09:18:34] *** Joins: edk (edk@libera/staff/edk)
[09:18:34] *** Joins: FortunateSon (~Fortunate@rrcs-67-79-54-150.sw.biz.rr.com)
[09:18:34] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:18:34] *** Joins: Brnocrist (~spartak@user/brnocrist)
[09:18:34] *** Joins: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net)
[09:18:34] *** Joins: webstrand (~webstrand@user/webstrand)
[09:18:34] *** Joins: emp75 (~emp75@50.39.119.176)
[09:18:34] *** Joins: Ara (~Ara@user/ara)
[09:18:34] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[09:18:34] *** Joins: Dan0maN (~Dan0maN@user/dan0man)
[09:18:34] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[09:18:34] *** Joins: mteo (francis@user/francis)
[09:18:34] *** Joins: hl (~hl@user/hl)
[09:18:34] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[09:18:34] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[09:18:34] *** Joins: Brownout (~brown@user/brown)
[09:18:34] *** Joins: dusk (~quassel@2a01:4f8:231:3ac7:2702::1)
[09:18:34] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[09:18:34] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:18:34] *** Joins: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net)
[09:18:34] *** Joins: aizen (sid462968@id-462968.charlton.irccloud.com)
[09:18:34] *** Joins: udet (~udet@ve603.venus.servdiscount-customer.com)
[09:18:34] *** Joins: mats1 (sid23029@id-23029.tinside.irccloud.com)
[09:18:34] *** Joins: shachaf (~shachaf@user/shachaf)
[09:18:34] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[09:18:34] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[09:18:34] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[09:18:34] *** Joins: davidc__ (~user13172@will.hack.for.beer)
[09:18:34] *** Joins: linear_cannon (~linear@50.35.78.163)
[09:18:34] *** Joins: otoburb (~otoburb@user/otoburb)
[09:18:34] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[09:18:34] *** Joins: scjosh (~scjosh@206.189.79.69)
[09:18:34] *** Joins: HifiKuno (~HifiKuno@167-179-170-202.a7b3aa.bne.nbn.aussiebb.net)
[09:18:34] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[09:18:34] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[09:18:34] *** Joins: hardtotell (~hardtotel@satyr.seedboxes.cc)
[09:18:34] *** Joins: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com)
[09:18:34] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[09:18:34] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[09:18:34] *** Joins: alip (~alip@exherbo/developer/alip)
[09:18:34] *** Joins: nisstyre (~wes@user/nisstyre)
[09:18:34] *** Joins: glider_ (~glider@user/glider)
[09:18:34] *** Joins: ms7821 (~Mark@london.rack.ms)
[09:18:34] *** Joins: Richard (EpicKitty@marshadow.epickitty.co.uk)
[09:18:34] *** Joins: echoreply1 (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[09:18:34] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[09:18:34] *** Joins: towel (~towel@user/towel)
[09:18:34] *** Joins: JvD (~jvd@kpa15.kuuskaista.fi)
[09:18:34] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[09:18:34] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[09:18:34] *** Joins: zgrep (~zgrep@user/zgrep)
[09:18:34] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[09:18:34] *** Joins: jstoker (~jstoker@user/jstoker)
[09:18:34] *** Joins: softpaw (~softpaw@185.162.184.11)
[09:18:34] *** Joins: AkechiShiro (~licht@user/akechishiro)
[09:18:34] *** Joins: yawkat (~yawkat@cats.coffee)
[09:18:34] *** Joins: iokill_ (~dave@static.16.105.130.94.clients.your-server.de)
[09:18:34] *** Joins: Kryczek (~kryczek@5.194.159.20)
[09:18:34] *** Joins: t0x0sh (~tosh@176.158.137.106)
[09:18:34] *** Joins: TimMc (~timmc@user/timmc)
[09:18:34] *** Joins: koolazer (~koo@user/koolazer)
[09:18:34] *** Joins: tolarz (bfa39a78db@ircbox.informatik.uni-erlangen.de)
[09:18:34] *** Joins: Ori_B (~ori@mimir.eigenstate.org)
[09:18:34] *** Joins: haskal (~haskal@tilde.town)
[09:18:34] *** Joins: MacGyver (~macgyver@user/macgyver)
[09:18:34] *** Joins: gAy_Dragon (A_D@doom-tower.awesome-dragon.science)
[09:18:34] *** Joins: artart78 (~artart78@2001:41d0:a:3ba6::1)
[09:18:34] *** Joins: MyWay (~MyWay@2001:41d0:8:be9a::1)
[09:18:34] *** Joins: danieldg (~me@user/danieldg)
[09:18:34] *** Joins: aczid (~aczid@tuig.nikhef.nl)
[09:18:34] *** Joins: lithiumpt (~lithiumpt@37.120.213.116)
[09:18:34] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[09:18:34] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[09:18:34] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[09:18:34] *** Joins: ndo- (~ndo@user/ndo-)
[09:18:34] *** Joins: pdg (sid395042@id-395042.tooting.irccloud.com)
[09:18:34] *** Joins: Hash (~weechat@thestonedapes.com)
[09:18:34] *** Joins: voker57 (~quassel@2a06:1700:0:24::)
[09:20:20] *** Quits: duck[m] (~duckmatri@2001:470:69fc:105::ca77) (Ping timeout: 256 seconds)
[09:20:20] *** Quits: Mutsuhito (sid13530@charlton.irccloud.com) (*.net *.split)
[09:20:20] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[09:20:20] *** Quits: FireFly (firefly@glowbum/gluehwuermchen/firefly) (*.net *.split)
[09:20:21] *** Quits: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f) (*.net *.split)
[09:20:21] *** Quits: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr) (*.net *.split)
[09:20:21] *** Quits: Colti (Miramar-FL@user/host-pond) (*.net *.split)
[09:20:21] *** Quits: rxcomm (~rxcomm@user/rxcomm) (*.net *.split)
[09:20:21] *** Quits: _- (~orgg@20.55.233.57) (*.net *.split)
[09:20:21] *** Quits: ch1p (~ch1p@ch1p.io) (*.net *.split)
[09:20:21] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[09:20:21] *** Quits: ldm (~ldm@hacksoc/member) (*.net *.split)
[09:20:21] *** Quits: Pricey (~pricey@libera/staff/pricey) (*.net *.split)
[09:20:21] *** Quits: KeterClass (~KeterClas@vm0.max-p.me) (*.net *.split)
[09:20:21] *** Quits: tkob (tkob@user/thekingofbandit) (*.net *.split)
[09:20:21] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[09:20:21] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (*.net *.split)
[09:20:21] *** Quits: neildaemond (~neildaemo@2607:5300:61:c67::196) (*.net *.split)
[09:20:21] *** Quits: kept (~kept@user/kept) (*.net *.split)
[09:20:39] *** Joins: Mutsuhito (sid13530@charlton.irccloud.com)
[09:20:39] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[09:20:39] *** Joins: FireFly (firefly@glowbum/gluehwuermchen/firefly)
[09:20:39] *** Joins: introom (introom@2600:3c01::f03c:92ff:fe95:9f0f)
[09:20:39] *** Joins: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr)
[09:20:39] *** Joins: Colti (Miramar-FL@user/host-pond)
[09:20:39] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[09:20:39] *** Joins: _- (~orgg@20.55.233.57)
[09:20:39] *** Joins: ch1p (~ch1p@ch1p.io)
[09:20:39] *** Joins: int-e (~noone@int-e.eu)
[09:20:39] *** Joins: ldm (~ldm@hacksoc/member)
[09:20:39] *** Joins: Pricey (~pricey@libera/staff/pricey)
[09:20:39] *** Joins: KeterClass (~KeterClas@vm0.max-p.me)
[09:20:39] *** Joins: tkob (tkob@user/thekingofbandit)
[09:20:39] *** Joins: mweckbecker (~matthias@weckbecker.name)
[09:20:39] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[09:20:39] *** Joins: neildaemond (~neildaemo@2607:5300:61:c67::196)
[09:20:39] *** Joins: kept (~kept@user/kept)
[09:22:42] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[09:22:42] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[09:22:42] *** Quits: piou (~piou@user/piou) (*.net *.split)
[09:22:42] *** Quits: yarmo (~web@keyoxide/dev/yarmo) (*.net *.split)
[09:22:52] *** Joins: piou (~piou@24.20.201.77.rev.sfr.net)
[09:22:56] *** Joins: yarmo (~web@2a01:4f9:c010:5b3::1)
[09:23:09] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[09:24:11] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[09:24:11] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:24:11] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[09:24:11] *** Quits: JvD (~jvd@kpa15.kuuskaista.fi) (*.net *.split)
[09:24:11] *** Quits: zgrep (~zgrep@user/zgrep) (*.net *.split)
[09:24:11] *** Quits: softpaw (~softpaw@185.162.184.11) (*.net *.split)
[09:24:11] *** Quits: iokill_ (~dave@static.16.105.130.94.clients.your-server.de) (*.net *.split)
[09:24:11] *** Quits: Kryczek (~kryczek@5.194.159.20) (*.net *.split)
[09:24:11] *** Quits: TimMc (~timmc@user/timmc) (*.net *.split)
[09:24:11] *** Quits: Ori_B (~ori@mimir.eigenstate.org) (*.net *.split)
[09:24:11] *** Quits: haskal (~haskal@tilde.town) (*.net *.split)
[09:24:11] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[09:24:11] *** Quits: gAy_Dragon (A_D@doom-tower.awesome-dragon.science) (*.net *.split)
[09:24:11] *** Quits: artart78 (~artart78@2001:41d0:a:3ba6::1) (*.net *.split)
[09:24:11] *** Quits: MyWay (~MyWay@2001:41d0:8:be9a::1) (*.net *.split)
[09:24:11] *** Quits: ndo- (~ndo@user/ndo-) (*.net *.split)
[09:24:11] *** Quits: pdg (sid395042@id-395042.tooting.irccloud.com) (*.net *.split)
[09:24:11] *** Quits: Hash (~weechat@thestonedapes.com) (*.net *.split)
[09:24:15] *** Joins: iokill (~dave@static.16.105.130.94.clients.your-server.de)
[09:24:16] *** Joins: ndo` (~ndo@2a00:6d40:40:3ec6::1)
[09:24:22] *** Joins: JvD (~jvd@kpa15.kuuskaista.fi)
[09:24:23] *** Joins: Kryczek (~kryczek@5.194.159.20)
[09:24:25] *** Joins: udet (~udet@ve603.venus.servdiscount-customer.com)
[09:24:26] *** Joins: artart78 (~artart78@2001:41d0:a:3ba6::1)
[09:24:31] *** Joins: Hash (~weechat@thestonedapes.com)
[09:24:31] *** Joins: TimMc (~timmc@user/timmc)
[09:24:34] *** Joins: MyWay (~MyWay@2001:41d0:8:be9a::1)
[09:24:40] *** Joins: MacGyver (~macgyver@sog.polvanaubel.com)
[09:24:42] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:24:45] *** Joins: pdg (sid395042@2001:67c:2f08:4::6:722)
[09:24:46] *** Joins: zgrep (~zgrep@user/zgrep)
[09:24:51] *** Joins: A_Dragon (A_D@doom-tower.awesome-dragon.science)
[09:24:59] *** Quits: MacGyver (~macgyver@sog.polvanaubel.com) (Changing host)
[09:24:59] *** Joins: MacGyver (~macgyver@user/macgyver)
[09:25:16] *** Joins: Ori_B (~ori@mimir.eigenstate.org)
[09:25:41] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[09:25:50] *** Joins: softpaw (~softpaw@185.162.184.11)
[09:26:34] *** Joins: haskal (~haskal@tilde.town)
[09:32:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 244 seconds)
[09:33:39] *** Joins: kish` (~aqua@user/aqua)
[09:36:19] *** Quits: Julius_ (~Julius76@2a02:810b:c640:514:4930:61c3:f0be:4b4f) (Quit: Quit)
[09:47:21] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 248 seconds)
[09:47:32] *** Joins: gggp__ (~gggp@60.10.23.162)
[09:48:34] *** Joins: lockna (~lockna@2001:470:69fc:105::d697)
[09:49:22] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[09:50:56] *** Quits: gggp_ (~gggp@114.243.61.163) (Ping timeout: 268 seconds)
[09:55:34] *** Joins: gggp_ (~gggp@123.113.184.163)
[09:58:23] *** Joins: gggp (~gggp@114.245.109.30)
[09:58:33] *** Quits: gggp__ (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[10:01:08] *** Quits: gggp_ (~gggp@123.113.184.163) (Ping timeout: 256 seconds)
[10:07:43] *** Quits: mteo (francis@user/francis) (Quit: rb)
[10:10:16] *** Joins: mteo (francis@user/francis)
[10:10:55] *** Quits: francis (francis@user/francis) (Quit: rb)
[10:12:03] *** Joins: francis (francis@user/francis)
[10:55:56] *** Joins: heretical_crypte (~heretical@2001:470:69fc:105::8054)
[10:56:00] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[10:56:11] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[10:56:17] *** Joins: kish` (~aqua@user/aqua)
[10:58:56] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[11:01:35] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[11:05:54] *** Joins: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76)
[11:08:35] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com) (Quit: jarthur)
[11:15:40] *** Joins: galex-713 (~user@portable.galex-713.eu)
[11:15:56] <galex-713> hello, anyone knows the appropriated channel to ask about luks/cryptsetup?
[11:16:46] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[11:18:04] *** Joins: gggp_ (~gggp@60.10.23.162)
[11:18:27] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:21:16] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[11:21:48] *** Quits: gggp (~gggp@114.245.109.30) (Ping timeout: 276 seconds)
[11:25:33] *** Joins: duck[m] (~duckmatri@2001:470:69fc:105::ca77)
[11:32:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:33:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[11:33:48] *** Lord_of_Life_ is now known as Lord_of_Life
[11:35:41] *** Joins: cacu[m] (~cacuconve@2001:470:69fc:105::b9df)
[11:42:00] *** Quits: piou (~piou@24.20.201.77.rev.sfr.net) (Changing host)
[11:42:00] *** Joins: piou (~piou@user/piou)
[11:53:38] *** Joins: gggp__ (~gggp@114.245.111.182)
[11:53:45] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[11:53:49] *** Quits: gggp__ (~gggp@114.245.111.182) (Remote host closed the connection)
[11:54:11] *** Joins: gggp__ (~gggp@123.113.185.125)
[11:59:31] *** Joins: gggp_ (~gggp@60.10.23.162)
[12:00:02] *** Quits: galex-713 (~user@portable.galex-713.eu) (Ping timeout: 245 seconds)
[12:02:28] *** Joins: gggp (~gggp@123.113.180.255)
[12:02:58] *** Quits: gggp__ (~gggp@123.113.185.125) (Ping timeout: 256 seconds)
[12:04:42] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 245 seconds)
[12:35:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:14] *** Joins: riv (~river@tilde.team/user/river)
[12:38:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:50:41] *** Quits: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (Ping timeout: 252 seconds)
[12:52:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[12:52:39] *** Joins: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net)
[13:30:06] *** Quits: Chouhartem (~fmoumou@epheme.re) (Quit: WeeChat 3.1)
[13:30:18] *** Joins: Chouhartem (~fmoumou@epheme.re)
[13:49:38] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[13:49:55] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[13:54:57] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[13:57:07] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 245 seconds)
[14:26:30] *** Joins: Guest64 (~Guest64@185.133.181.17)
[14:30:18] *** Quits: kbdlnx1_ (~kbdlnx123@72.252.198.165) (Ping timeout: 256 seconds)
[14:38:04] *** Quits: Guest64 (~Guest64@185.133.181.17) (Ping timeout: 246 seconds)
[15:00:49] *** Joins: kbdlnx1_ (~kbdlnx123@72.252.198.165)
[15:06:16] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[15:11:20] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[15:12:44] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[15:13:06] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[15:14:04] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[15:44:02] *** Joins: gggp_ (~gggp@123.113.180.255)
[15:45:37] *** Joins: gggp__ (~gggp@60.10.194.45)
[15:46:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:47:22] *** Quits: gggp (~gggp@123.113.180.255) (Ping timeout: 268 seconds)
[15:49:50] *** Quits: gggp_ (~gggp@123.113.180.255) (Ping timeout: 268 seconds)
[15:58:01] *** Joins: gggp_ (~gggp@123.113.180.255)
[16:01:17] *** Quits: gggp__ (~gggp@60.10.194.45) (Ping timeout: 245 seconds)
[16:02:01] *** Joins: salvatore (~Username@5.170.16.91)
[16:05:46] *** Quits: salvatore (~Username@5.170.16.91) (Remote host closed the connection)
[16:07:03] *** Joins: somlis (~somlis@user/somlis)
[16:12:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:16:04] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[16:24:08] *** Joins: terminaldweller (~devi@192.99.102.52)
[16:43:24] *** Joins: igemnace (~ian@user/igemnace)
[17:00:27] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 245 seconds)
[17:02:23] *** Joins: gggp__ (~gggp@60.10.194.45)
[17:03:29] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:05:41] *** Quits: gggp_ (~gggp@123.113.180.255) (Ping timeout: 268 seconds)
[17:09:37] *** Quits: gggp__ (~gggp@60.10.194.45) (Ping timeout: 245 seconds)
[17:14:48] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[17:26:34] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[17:27:52] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[17:29:11] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:29:38] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[17:32:07] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:34:02] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[17:41:13] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:42:10] *** Joins: rtypo (~alex@user/rtypo)
[17:42:29] *** Joins: DSync (~ds@user/deepspace-link)
[17:47:23] *** Joins: ses (uid38151@id-38151.stonehaven.irccloud.com)
[18:00:39] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 244 seconds)
[18:01:33] <onelegend> ^ this guy left the chat
[18:13:45] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[18:25:42] *** Joins: Julius_ (~Julius76@2a02:810b:c640:514:6cd5:1386:fd52:22a0)
[18:28:43] *** Joins: mouseghost (~draco@user/mouseghost)
[18:30:21] <TimMc> maroon: "unknown"/"no known", wow, that's a heck of a mistranslation :-D
[18:32:36] *** Joins: zro (~zro@user/zro)
[18:33:00] *** Quits: phebus (~phebus@fsf/member/phebus) (Quit: POKE 1,0)
[18:40:04] *** Quits: HifiKuno (~HifiKuno@167-179-170-202.a7b3aa.bne.nbn.aussiebb.net) (Ping timeout: 258 seconds)
[18:43:08] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[18:43:40] *** Joins: d1cor (~diego@179.63.242.114)
[18:52:28] *** Joins: HifiKuno (~HifiKuno@167-179-170-202.a7b3aa.bne.nbn.aussiebb.net)
[18:55:53] *** Quits: zgrep (~zgrep@user/zgrep) (Quit: It's a quitter's world.)
[18:57:20] *** Joins: zgrep (~zgrep@user/zgrep)
[19:13:12] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Changing host)
[19:13:12] *** Joins: nisstyre (~wes@user/nisstyre)
[19:22:59] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[19:24:57] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[19:38:08] *** Joins: g00fy (~g00fy@user/g00fy)
[19:48:51] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Read error: Connection reset by peer)
[19:52:17] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[19:59:18] *** Quits: zro (~zro@user/zro) (Ping timeout: 248 seconds)
[20:08:13] *** Quits: g00fy (~g00fy@user/g00fy) (Quit: The Lounge - https://thelounge.chat)
[20:08:42] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Changing host)
[20:08:42] *** Joins: betelgeuse (~john2gb@user/john2gb)
[20:09:51] *** Joins: g00fy (~g00fy@user/g00fy)
[20:10:09] *** Quits: d1cor (~diego@179.63.242.114) (Ping timeout: 258 seconds)
[20:11:17] *** Joins: zro (~zro@user/zro)
[20:17:45] *** Quits: DSync (~ds@user/deepspace-link) ()
[20:21:28] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:29:28] *** Joins: DSync (~ds@user/deepspace-link)
[20:53:33] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[20:57:03] *** Joins: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[21:16:17] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 245 seconds)
[21:18:10] *** mmlj4 is now known as RC1
[21:18:17] *** RC1 is now known as mmlj4
[21:29:01] *** Joins: xenoterracide (~xenoterra@50-124-250-111.alma.mi.frontiernet.net)
[21:49:09] *** Quits: riv (~river@tilde.team/user/river) (Remote host closed the connection)
[21:49:46] *** Joins: riv (~river@tilde.team/user/river)
[21:52:07] *** Quits: Julius_ (~Julius76@2a02:810b:c640:514:6cd5:1386:fd52:22a0) (Ping timeout: 245 seconds)
[21:59:08] *** Quits: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net) (Quit: WeeChat 2.3)
[22:01:40] *** Joins: aleck (~aleck@user/aleck)
[22:02:47] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:04:45] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 268 seconds)
[22:06:00] *** Quits: zro (~zro@user/zro) (Ping timeout: 268 seconds)
[22:11:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[22:17:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:21:10] *** Quits: tent406 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Quit: Leaving)
[22:21:26] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[22:46:31] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:48:47] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[22:51:44] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:54:57] *** Joins: zro (~zro@user/zro)
[23:03:10] *** Quits: xenoterracide (~xenoterra@50-124-250-111.alma.mi.frontiernet.net) (Ping timeout: 240 seconds)
[23:37:34] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[23:37:36] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Client Quit)
[23:40:14] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[23:48:55] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[23:50:10] *** Quits: DSync (~ds@user/deepspace-link) ()
[23:50:35] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Client Quit)
[23:54:00] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
