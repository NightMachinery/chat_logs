[03:24:46] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 260 seconds)
[04:16:30] *** Joins: subbu (~subbu@user/subbu)
[07:54:54] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 256 seconds)
[16:59:14] *** Joins: subbu (~subbu@user/subbu)
[17:32:11] <headius> Good morning!
[17:32:15] <headius> distant: I can try to answer some of your questions today... what's your status?
[17:55:17] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[18:30:47] <headius> enebo: https://github.com/jruby/jruby-readline/pull/6
[18:31:05] <headius> the open question is whether we will continue to ship and support jruby-readline
[18:31:57] <headius> 9.4 should be using reline now, I think, but we may still want to have jruby-readline as a known-working backup. I am not sure how compatible it is with the new IRB, however, but new IRB may explicitly use only reline anyway
[18:32:20] <headius> I have not done any work to make the one fall back on the other, nor much testing of IRB with jruby-readline or other readline things with reline
[20:24:13] <enebo[m]> headius: is this for 9.2/3 largely?   You say older irb.  I half wonder if we just update to newer irb in 9.2/9.3 and retire the project
[20:24:17] <enebo[m]> Unless those cannot run with the newer reline version
[20:28:17] <headius> 9.2/9.3 will continue to use jruby-readline so it may be worth it to do this upgrade
[20:28:59] <headius> They might work with reline if the io-console fixes I made have been backported
[20:29:14] <enebo[m]> I wonder though could we just use a newer irb?  I am not worried about compatibility in the case of irb so long as it works
[20:29:14] <headius> Those are in the gem now which master uses but it's the same code
[20:29:34] <enebo[m]> ah so there might be some risk with that idea
[20:30:19] <headius> I think the newer IRB always uses reline so that would have to be evaluated on 9.2 and 9.3
[20:30:26] <enebo[m]> I guess you answered your own question though.  Since we will support older irb we potentially need to fix jrbuy-readline if it helps irb work better
[20:31:02] <enebo[m]> If newer can work it would mean retirement of jruby-readline sooner than later but if it involves potentially messing with IO we maybe don't want to
[20:31:04] <headius> I'm not entirely sure new IRB is fully functional on master either, but it should be close and has been continuously improving
[20:31:11] <enebo[m]> ah
[20:31:31] <enebo[m]> That is enough of a ? for me for 9.2 at least
[20:31:40] <headius> jruby-readline is basically equivalent to the CRuby readline-ext gem
[20:32:03] <enebo[m]> Does reline also emulate readline?
[20:32:04] <headius> They attempt to load that when you require readline, falling back on reline if it is not available
[20:32:23] <headius> Yes it is supposed to be compatible I believe but no dependence on a native library
[20:32:34] <enebo[m]> ok yeah cool.
[20:32:55] <headius> It should just require a fully functional io-console which we provide via FFI where possible
[20:32:59] <enebo[m]> reline/readline is UI-ish.  I wonder if it has a test suite 
[20:33:00] <headius> I think windows may be an issue there
[20:33:13] <enebo[m]> ah
[20:33:16] <enebo[m]> yeah I bet
[20:33:23] <headius> Terminal emulation on windows lol
[20:33:44] <enebo[m]> although io-console for MRI must have the magic...so we could duplicate that or maybe it just works
[20:33:57] <enebo[m]> I assume IO is tricky in Windows :)
[20:34:31] <enebo[m]> This is another issue for 9.4 (although perhaps not 9.4.0)
[20:44:39] <headius> io-console passes all the io-console tests on Linux and MacOS after my fixes but I have not attempted to make it pass on Windows
[20:44:51] <headius> well, all the tests except the ones that require forking a PTY
[21:35:21] <headius> enebo: couple 9.3 PRs for your review
[21:35:43] <headius> null-checking the "fd" in case it was closed and nulled out across threads: https://github.com/jruby/jruby/pull/7131
[21:36:16] <headius> macos/m1 wants aarch64 to be arm64: https://github.com/jruby/jruby/pull/7132
[21:37:46] <headius> enebo: you might want to look at this one too since you did a bunch of work on marshal: https://github.com/jruby/jruby/pull/7128
[21:38:10] <headius> I merged kiichi's other PR: https://github.com/jruby/jruby/pull/7129
[21:53:38] <headius> enebo: eregon's latest spec update is still outstanding as well and we should decide how to handle new incoming failures considering our new WIP tag: https://github.com/jruby/jruby/pull/7126
[22:08:15] <enebo[m]> just got back from lunch....looking
[22:10:48] <enebo[m]> headius: 7131 The comment for the check was not obvious to me for a few seconds but your description in the issue is more clear.  but my broader question on it is whether we know this is the cause of the originally reported issue.  It makes sense that it could be 
[22:11:34] <enebo[m]> I guess it does not really matter though.  It seems likely it is a race so I am do not think it is a bad fix as much as wondering if it is the real cause of the issue which generated this PR
[22:13:56] <headius> I can't guarantee the cause is the same as the stack trace that commenter provided but it seems likely since the failing spec was related to closing an IO across threads while it is in use
[22:14:01] <headius> It's still an error but now it's a more appropriate error I guess
[22:14:41] <headius> I'm sure there are little races like this all over IO but multi-threaded use of an IO is somewhat undefined even in CRuby
[22:15:28] <enebo[m]> yeah
[22:16:00] <headius> And the code in question probably should be checking for a null FD anyway
[22:18:33] <enebo[m]> So I landed the marshal fix but it is mostly just time logic itself and not specific to marshal
[22:19:54] <enebo[m]> eregons PR I think should just be normal tags because none of them appear to be 3.0 or 3.1 behavior but I guess perhaps we need to triage all incoming tags and mark as WIP only if it is new behavior
[22:26:09] <headius> Yeah
[22:32:20] <enebo[m]> fwiw we probably should be eye-balling all incoming failures to make sure they are not really simple to fix
