[00:01:14] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[00:03:01] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[00:03:02] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[00:03:33] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[00:14:12] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:15:47] *** Joins: shka (~herr@109.231.0.226)
[00:22:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:26:29] *** Joins: Algernon91 (~Algernon6@i19-lef01-t2-89-85-246-57.ft.lns.abo.bbox.fr)
[00:30:46] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[00:31:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:31:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:32:10] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[00:34:31] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[00:34:31] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:36:16] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[00:36:21] *** Joins: sp (~sp@user/susam)
[00:36:36] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[00:37:25] *** Quits: Algernon91 (~Algernon6@i19-lef01-t2-89-85-246-57.ft.lns.abo.bbox.fr) (Ping timeout: 240 seconds)
[00:37:47] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[00:40:00] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[00:46:26] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[00:47:41] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 256 seconds)
[00:48:35] *** Joins: Everything (~Everythin@37.115.210.35)
[00:54:57] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[01:01:11] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[01:03:03] *** Joins: sepanko (~sepanko@user/sepanko)
[01:03:06] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[01:03:26] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[01:03:38] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:04:16] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[01:04:20] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:05:02] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:11:28] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079) (Remote host closed the connection)
[01:15:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:18:45] *** Joins: random-nick (~random-ni@87.116.180.98)
[01:18:54] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[01:18:55] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Read error: Connection reset by peer)
[01:18:55] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Read error: Connection reset by peer)
[01:18:55] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Write error: Connection reset by peer)
[01:18:55] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[01:18:55] *** Quits: sepanko (~sepanko@user/sepanko) (Read error: Connection reset by peer)
[01:18:55] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Read error: Connection reset by peer)
[01:18:56] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Read error: Connection reset by peer)
[01:18:56] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Write error: Connection reset by peer)
[01:18:56] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Write error: Connection reset by peer)
[01:18:56] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Write error: Connection reset by peer)
[01:18:57] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[01:18:57] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Write error: Connection reset by peer)
[01:18:58] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Read error: Connection reset by peer)
[01:18:59] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (Write error: Connection reset by peer)
[01:18:59] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Write error: Connection reset by peer)
[01:18:59] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Read error: Connection reset by peer)
[01:18:59] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Read error: Connection reset by peer)
[01:18:59] *** Quits: sp (~sp@user/susam) (Read error: Connection reset by peer)
[01:18:59] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Read error: Connection reset by peer)
[01:18:59] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[01:20:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:20:48] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[01:21:07] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[01:22:49] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (Ping timeout: 256 seconds)
[01:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:24:34] *** adeht is now known as _death
[01:26:31] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[01:30:39] *** robin_ is now known as robin
[01:30:39] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:30:39] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[01:30:39] *** Joins: sepanko (~sepanko@user/sepanko)
[01:30:39] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[01:30:39] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:30:39] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:30:39] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:30:40] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:30:40] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[01:30:40] *** Joins: sp (~sp@user/susam)
[01:30:40] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:30:40] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:30:40] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:30:40] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:30:40] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:30:40] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[01:30:40] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[01:30:40] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[01:30:40] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[01:30:40] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[01:30:40] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[01:30:40] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[01:30:40] *** Joins: linjian (~linj@user/linj)
[01:30:51] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[01:30:52] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[01:30:53] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[01:30:53] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[01:34:08] *** Joins: karlosz (~karlosz@136.56.98.53)
[01:35:09] <paul0> hum, can't load slime using sbcl and quicklisp
[01:35:30] <paul0> this file is missing, "/home/paulo/quicklisp/dists/quicklisp/software/slime-v2.24/swank-loader.lisp":
[01:36:07] <paul0> and I have slime-v2.26 directory
[01:36:51] <paul0> oh,  restarted emacs, it seems to be working fine now
[01:37:24] *** Joins: Algernon91 (~Algernon6@i19-lef01-t2-89-85-246-57.ft.lns.abo.bbox.fr)
[01:41:18] <rotateq> paul0: nice :)
[01:42:39] *** Joins: eddof13 (~textual@2806:102e:12:4fba:54d5:85ef:67d1:ca00)
[01:43:30] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[01:43:55] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Quit: Client limit exceeded: 20000)
[01:44:01] *** Quits: eddof13 (~textual@2806:102e:12:4fba:54d5:85ef:67d1:ca00) (Client Quit)
[01:44:12] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[01:44:22] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Client limit exceeded: 20000)
[01:44:24] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[01:44:36] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[01:44:40] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[01:44:42] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Client limit exceeded: 20000)
[01:45:15] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[01:45:26] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[01:45:29] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Quit: Client limit exceeded: 20000)
[01:45:45] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Quit: Client limit exceeded: 20000)
[01:46:24] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[01:46:25] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[01:46:46] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[01:46:49] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Client limit exceeded: 20000)
[01:47:27] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Client limit exceeded: 20000)
[01:48:24] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[01:49:01] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Client limit exceeded: 20000)
[01:49:12] *** Quits: linjian (~linj@user/linj) (Quit: Client limit exceeded: 20000)
[01:49:47] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[01:57:50] *** Quits: pve (~pve@37-136-220-98.rev.dnainternet.fi) (Quit: leaving)
[02:12:38] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Client limit exceeded: 20000)
[02:15:17] *** Joins: Krystof (~user@81.174.155.115)
[02:17:58] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[02:22:34] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[02:36:32] *** Quits: Algernon91 (~Algernon6@i19-lef01-t2-89-85-246-57.ft.lns.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:44:37] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[02:55:02] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[03:03:48] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[03:08:11] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[03:23:35] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[03:39:50] *** Quits: flip214 (~marek@user/flip214) (Read error: Connection reset by peer)
[03:44:22] *** Joins: flip214 (~marek@user/flip214)
[03:46:53] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[03:49:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:49:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[03:49:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:59:23] *** Joins: jstoddard (~user@2600:8801:a400:5a00::1dea)
[04:01:06] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:08:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:09:02] *** Joins: omr (~omr@user/omr)
[04:12:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:13:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:15:10] *** Joins: igemnace (~ian@user/igemnace)
[04:22:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:23:58] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[04:24:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[04:51:22] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[05:00:28] *** Joins: jeosol (~jeosol@2600:1700:d6d0:4540::49)
[05:11:10] *** Quits: omr (~omr@user/omr) (Quit: WeeChat 3.3)
[05:26:51] *** Quits: jstoddard (~user@2600:8801:a400:5a00::1dea) (Remote host closed the connection)
[05:27:05] *** Joins: jstoddard (~user@2600:8801:a400:5a00::ba77)
[05:29:20] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[05:55:58] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:23:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:24:51] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[06:25:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:25:58] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[06:33:21] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:40:36] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[06:46:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c) (Ping timeout: 250 seconds)
[06:48:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758)
[06:53:57] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[06:54:48] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[06:58:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:02:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:07:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[07:10:10] *** Quits: jstoddard (~user@2600:8801:a400:5a00::ba77) (Quit: ERC (IRC client for Emacs 27.1))
[07:21:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[07:22:33] *** Joins: perrierjouet (~perrier-j@185.128.26.174)
[07:25:02] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92)
[07:26:02] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92) (Ping timeout: 240 seconds)
[07:28:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:30:09] *** Quits: perrierjouet (~perrier-j@185.128.26.174) (Ping timeout: 256 seconds)
[07:36:12] <beach> Good morning everyone!
[07:36:24] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[07:36:24] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[07:36:36] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[07:36:36] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[07:36:36] *** Joins: sepanko (~sepanko@user/sepanko)
[07:36:36] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[07:36:36] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[07:36:36] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[07:36:36] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[07:36:36] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[07:36:36] *** Joins: sp (~sp@user/susam)
[07:36:37] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[07:36:37] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:36:37] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[07:36:37] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[07:36:37] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[07:36:49] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[07:36:49] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[07:36:49] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[07:36:50] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[07:36:50] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[07:36:50] *** Joins: linjian (~linj@user/linj)
[07:38:33] <Everything> beach: !
[07:39:43] <beach> Everything: Are you new here?  I don't recognize your nick.
[07:40:04] <Everything> beach: no, just changed it some ago. Another idea was Everyone
[07:40:15] <beach> Got it.
[07:43:50] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:44:06] <ck_> Good morning
[07:49:44] *** Quits: tyson2``` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:56:39] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 256 seconds)
[07:56:55] *** Joins: semz (~none@user/semz)
[08:11:07] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:14:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:15:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:24:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:24:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:28:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:30:08] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[09:00:53] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[09:08:00] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[09:25:41] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:28:17] *** Quits: jealousm` (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[09:45:51] <jackdaniel> o/
[09:48:58] <beach> Hello jackdaniel.
[09:52:04] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[10:04:08] *** Joins: spiaggia (~user@2a01:cb19:150:3400:60b7:49a0:2099:f48d)
[10:18:27] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[10:19:23] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[10:40:00] *** Joins: shka (~herr@109.231.0.226)
[10:50:49] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[10:51:10] *** Joins: shka (~herr@109.231.0.226)
[11:01:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:06:06] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e6:2aaa:ed7c:b42f:6ab4:354f)
[11:07:13] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[11:17:49] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[11:19:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[11:21:34] *** Joins: shka (~herr@109.231.0.226)
[11:24:56] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[11:26:33] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[11:28:18] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:29:17] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:42:05] *** Quits: spiaggia (~user@2a01:cb19:150:3400:60b7:49a0:2099:f48d) (Quit: ERC (IRC client for Emacs 26.3))
[11:48:06] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:05:47] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:09:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:18:14] *** Joins: pve (~pve@188-67-138-88.bb.dnainternet.fi)
[12:22:49] *** Joins: frgo (~frgo@2a02:3038:40b:a58:64fb:42e2:758c:c47a)
[12:29:47] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:30:38] *** Quits: frgo (~frgo@2a02:3038:40b:a58:64fb:42e2:758c:c47a) ()
[12:31:52] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Remote host closed the connection)
[12:32:14] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[12:34:37] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[12:36:16] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:40:27] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[12:42:53] *** massimo_zaniboni is now known as mzan
[12:58:31] *** Joins: mrmr1 (~mrmr@user/mrmr)
[12:59:37] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:00:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[13:00:11] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 268 seconds)
[13:00:11] *** mrmr1 is now known as mrmr
[13:00:22] *** Joins: amb007 (~a_bakic@117.135.22.93.rev.sfr.net)
[13:02:49] *** Quits: amb007 (~a_bakic@117.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:03:19] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:08:57] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:13:56] *** Joins: pjb (~pjb@user/pjb)
[13:14:37] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (Ping timeout: 250 seconds)
[13:17:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[13:18:09] *** Joins: amb007 (~a_bakic@117.135.22.93.rev.sfr.net)
[13:18:52] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[13:22:30] *** Quits: amb007 (~a_bakic@117.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:22:56] *** Joins: ns12 (~ns12@user/ns12)
[13:23:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:25:48] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[13:27:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[13:27:44] *** Joins: Alfr (~Alfr@user/alfr)
[13:28:41] *** Joins: notzmv (~zmv@user/notzmv)
[13:29:00] *** Joins: rogersm (~rogersm@90.166.180.250)
[13:48:07] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[13:49:36] *** Joins: mrmr (~mrmr@user/mrmr)
[14:00:13] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:01:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[14:01:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:05:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:13:38] <moon-child> has slime any affordances for reader macros, or must I modify its source code if I want it to be able to handle them?
[14:13:55] <phoe> the latter, I think
[14:14:00] <phoe> but I may be mistaken
[14:15:01] <moon-child> ok
[14:16:25] <beach> How would you have liked them to be "handled"?
[14:17:13] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:39a4:4154:9964:3167)
[14:18:37] <moon-child> custom indentation
[14:19:07] <moon-child> that's the main thing.  Syntax highlighting and autocompletion may also bend a bit, but I do not care so much about those
[14:19:17] <beach> I see.
[14:23:39] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:29:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[14:40:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:42:27] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:51:14] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[14:58:57] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[14:58:58] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[14:59:41] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:01:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:08:32] *** Joins: Everything (~Everythin@37.115.210.35)
[15:09:03] *** Joins: mrmr (~mrmr@user/mrmr)
[15:11:02] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[15:12:12] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 3.3)
[15:12:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 240 seconds)
[15:12:43] *** Joins: sterni (~lukas@user/sterni)
[15:13:17] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:23:20] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e6:2aaa:ed7c:b42f:6ab4:354f) (Read error: Connection reset by peer)
[15:23:29] <ns12> What is the meaning of backslashes within a string? For example, (format t "1\2\3") prints "123". What happened to the backslashes?
[15:23:39] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e6:2aaa:ed7c:b42f:6ab4:354f)
[15:23:48] <phoe> \\ is an escape character inside strings
[15:23:55] <phoe> s/\\/#\\/
[15:24:08] <phoe> "123" === "\123" === "\1\2\3"
[15:24:16] <beach> ns12: Try "1\"23"
[15:24:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:24:34] <phoe> escape your backslash with a backslash to get a literal backslash in your string, like "1\\2\\3"
[15:25:46] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (#commonlisp)
[15:26:45] <ns12> So "\1" is equivalent to "1"? So a backslash only has meaning for some characters that come after it?
[15:26:52] <jackdaniel> escape your backslash with a backslash to get a literal backslash to avoid metaphorical backslash from the formatter
[15:27:10] <jackdaniel> find which word has an additional s :)
[15:27:16] <phoe> ns12: the backslash escapes a character that comes directly after it only
[15:35:53] <ns12> Is this because the backslash is given special meaning by the reader?
[15:35:59] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:36:01] <phoe> yes, inside strings
[15:36:11] <phoe> when the reader is reading a string, there are only two special characters
[15:36:17] <phoe> the double quote, which ends string reading
[15:36:25] <phoe> and the backslash, which causes the next character to be read as a literal
[15:38:00] <ns12> I see. So this means that it is not possible in Common Lisp for "\" to have value "\" without somehow modifying the reader?
[15:40:37] <phoe> not inside strings, unless you devise a custom reader macro.
[15:40:55] <phoe> which you can do, even if it doesn't mean you should. :D
[15:42:09] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[15:42:51] <ns12> Is it possible to modify how strings are read? For example, could I modify the string reader to use | instead of \ as one of the special characters?
[15:44:48] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: Client limit exceeded: 20000)
[15:45:44] <moon-child> indeed
[15:45:48] <moon-child> you would have to write a reader macro
[15:45:56] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[15:48:19] <moon-child> (set-macro-character #\" (lambda (s c) (loop until (char= #\" (peek-char nil s)) for c = (read-char s) if (char= c #\|) collect (read-char s) else collect c finally (read-char s) (return ...))))
[15:48:31] <moon-child> err probably collect into
[15:48:48] <moon-child> and collecting into a list is slow (but pedagogically sound)
[15:48:48] <ns12> Oh wait. I actually know how to do that. Sorry. I didn't realize that I've actually done that before.
[15:49:06] <moon-child> (so is peeking)
[15:50:37] <mfiano> jackdaniel: lol
[15:52:59] <ns12> mfiano: jackdaniel: What's the joke? I didn't catch it.
[15:53:55] <jackdaniel> ns12: I was poking fun of multiple words 'backslash' in phoe explanation, and added "metaphorical backslash from the formatter" - it should be backlash.
[15:54:25] <jackdaniel> not a very funny joke, but if we take IRC standards of humour...
[15:54:55] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[15:55:12] <ns12> jackdaniel: Thanks. I understand it now.
[15:55:14] <mfiano> I object. jackdaniel is known for his jokes.
[15:55:53] <jackdaniel> :)
[15:55:54] <mfiano> Such as ECL and McCLIM maintainence
[15:55:57] * mfiano ducks
[15:56:00] <moon-child> T_T
[15:56:21] <jackdaniel> that was funny, no need to duck ;p
[15:56:28] <mfiano> ;)
[15:56:46] *** Joins: Guest41 (~Guest41@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[15:56:52] <mfiano> I can't spell first thing in the morning apparently.
[15:57:02] * mfiano goes to make tea
[15:57:04] <phoe> ns12: https://plaster.tymoon.eu/view/2822#2822
[15:57:09] <White_Flame> you certainly did spell it correctly
[15:57:16] <jackdaniel> from numerous quotes on McCLIM website my favourite is "McCLIM, the stuff that really boring dreams are made of." by Andy Hefner
[15:58:11] *** Demosthe1ex is now known as Demosthenex
[15:58:13] <jackdaniel> the cose second is the quote by Nikodemus Siivola
[15:58:16] <jackdaniel> close*
[15:59:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:59:36] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[16:00:02] <ns12> phoe: Thank you. Very interesting. Is :local-nicknames part of the official standard?
[16:00:07] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[16:00:13] *** Quits: Guest41 (~Guest41@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Client Quit)
[16:00:14] <phoe> ns12: nope, but it's an extension supported everywhere enough nowadays
[16:01:15] <mfiano> As Shinmera pointed out the other day, "enough" means that an implementation not supporting it would prevent the usage of a good portion of the library ecosystem nowadays.
[16:02:56] <mfiano> Which is even more of a reason to adopt it. It was one of |3b|'s more popular ideas apparently :)
[16:03:26] <jackdaniel> package local nicknames?
[16:03:29] <mfiano> Yes
[16:03:37] <jackdaniel> I didn't know it was his idea
[16:03:40] <mfiano> He wrote the original proposal
[16:03:41] <moon-child> |3b| came up with that?
[16:03:43] <moon-child> huh cool
[16:03:57] <mfiano> https://github.com/3b/package-local-nicknames
[16:04:38] <ns12> On the subject of package renaming. Suppose I am using a third-party library with a long package name (e.g. com.example.the-most-amazing-library) and I get tired of typing the long name whenever I use a function from that library. Is :local-nicknames *the* way to rename the package?
[16:05:00] <moon-child> yes
[16:05:13] <moon-child> (well, I do not aver the superlative.  But yes.)
[16:05:27] <Shinmera> It is if you don't want to break things :)
[16:05:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:05:59] <ns12> So it's the only sane way that is mostly portable?
[16:06:06] <mfiano> Yes
[16:06:16] <Shinmera> Also see my brief note in https://reader.tymoon.eu/article/377
[16:06:40] <moon-child> I see a bunch of 'ISSUE's in that proposal.  Curious: is there a proper spec somewhere?
[16:06:41] <Shinmera> 2.5 years ago now. Oof.
[16:07:05] <phoe> moon-child: AFAIK not
[16:07:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:07:27] <ns12> Thank you all. I learned something extremely useful today that I would not have gotten by reading the standards.
[16:07:35] <moon-child> phoe: that is a shame
[16:07:48] <mfiano> moon-child: The SBCL implementation/manual is the spec others go by, as it's what 3b contributed to.
[16:07:51] <phoe> I mean, it could be written, but someone needs to do it
[16:08:04] <phoe> and as mfiano said, the sbcl implementation is what most other implementations follow
[16:08:17] *** Joins: shka (~herr@109.231.0.226)
[16:08:22] <moon-child> phoe: 'someone needs to do it'  well, that's kind of The Problem in general, ne?  :P
[16:09:01] <phoe> moon-child: t
[16:09:25] <moon-child> hahha, ':P' is extremely appropriate
[16:09:46] <jackdaniel> should be P:
[16:09:53] <moon-child> details, details
[16:10:08] <jackdaniel> that's the problem in general,
[16:10:14] <jackdaniel> s/,//
[16:10:31] <ns12> It's not yet supported in CLISP: https://portability.cl/#trivial-package-local-nicknames
[16:10:33] <moon-child> can't argue with that
[16:10:54] <mfiano> CLISP hasn't had a release in what, 12 years now?
[16:10:56] <moon-child> ns12: in soviet russia, clisp does not support YOU
[16:12:07] <moon-child> hmm, portability.cl claims sicl does not support them, but afaik it does.  Not that it makes sense to have a sicl column at all, but
[16:12:26] <Shinmera> you, too, can update the information should it be out of date.
[16:14:28] <mfiano> Shinmera: About your blog post: I find it funny that I often use PLN to make a _longer_ nickname of your "V" nickname for "VERBOSE", so that it doesn't conflict with my preferred "V" nickname for vectors :)
[16:14:47] <Shinmera> Yes, that is an unfortunate historical artefact.
[16:15:04] <Shinmera> I will remove that global nickname some day
[16:16:55] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:17:02] <ns12> Shinmera: You make pretty websites. Are they written in Common Lisp too?
[16:17:22] <Shinmera> Most of them, sure.
[16:17:30] <Shinmera> as much as one can write a website in lisp, anyway.
[16:20:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:20:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:21:08] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:21:27] <moon-child> what does that mean?
[16:22:37] <Shinmera> in the end you still write html, css, and js.
[16:23:07] <moon-child> css sure.  Html can be wrapped.  And js can be compiled to
[16:23:20] <Shinmera> All of those things are always very thin wrappers
[16:23:21] <moon-child> (admittedly the latter is a somewhat less practical venture than the former.  But)
[16:23:27] <moon-child> always?
[16:23:36] <moon-child> people have done latex -> html
[16:23:46] <Shinmera> The context is lisp.
[16:23:52] <Shinmera> I am not interested in this debat.
[16:24:48] <mfiano> I'd like to buy an #\e please.
[16:25:31] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[16:31:05] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[16:32:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[16:32:30] *** Joins: amb007 (~a_bakic@242.134.22.93.rev.sfr.net)
[16:44:24] *** Joins: jayant (~quassel@223.236.0.223)
[16:49:37] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:50:44] <phoe> ns12: build from https://gitlab.com/gnu-clisp/clisp/-/merge_requests/3
[16:51:03] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[16:51:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758) (Ping timeout: 240 seconds)
[16:51:20] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:51:27] <phoe> CLISP is no longer an implementation I consider supportable because it hasn't released in a decade even if it's possible to build it from source nowadays
[16:51:42] <phoe> and if AFAIR it's possible to auto-build it via roswell
[16:52:07] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[16:52:25] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:52:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fd9c:24e7:5ea:6f47)
[16:52:30] <mfiano> and unresponsive developers apparently.
[16:53:04] <ns12> So what are we left with? SBCL and ...?
[16:53:15] <phoe> SBCL, CCL, ECL, Clasp, ABCL, LW, ACL
[16:53:36] <phoe> Mezzano and SICL and JSCL too, although they are incomplete and/or otherwise troublesome to use
[16:54:08] <phoe> JSCL, largely incomplete; SICL, incomplete but highly modular; Mezzano, because of its requirements
[16:54:35] <froggey> "otherwise troublesome to use" :D
[16:54:41] <mfiano> phoe: Good thing you used read-eval here for LW: https://github.com/phoe/trivial-package-local-nicknames
[16:54:42] <phoe> :D
[16:54:52] <moon-child> eh, mezzano can run in qemu, no?
[16:54:59] <phoe> mfiano: oh? what do you mean?
[16:55:10] <mfiano> 7.2 unreleased as on #.(now)
[16:55:13] <mfiano> of*
[16:55:24] <phoe> ooh
[16:55:27] <phoe> I need to update it
[16:55:30] <mfiano> Stable release8.0 / December 14, 2021
[16:55:31] <phoe> 8.0 was released instead
[16:55:59] <mfiano> Had the #. not been there I would have filed a bug ;)
[16:56:25] <phoe> mfiano: updated, thank you :D
[16:56:33] <mfiano> Then again, I would be the reader, so :thonk:
[17:00:03] * mfiano mentally places CLISP in the scrap pile to give GCL company
[17:03:43] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[17:04:53] <marcoxa> Hi
[17:05:01] <phoe> hey hi
[17:09:42] <rotateq> hi marcoxa :)
[17:10:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:13:25] <madnificent> Is there something like equalp that can be specialized using a generic function.  Either by standard or by convention?
[17:14:41] <phoe> madnificent: http://www.nhplace.com/kent/PS/EQUAL.html
[17:14:59] <phoe> tl;dr "equality" is a poorly specified term so there can't be a one-size-fits-all solution
[17:15:49] <phoe> so, write your own one and tailor it for the problem you have
[17:16:50] <phoe> and if you do, then either (defun foo= (foo1 foo2)) or (defgeneric eqv (x1 x2)) is probably the way to go
[17:19:15] <madnificent> phoe: Glancing over that article, I find that to be a very fragmenting statement.
[17:19:15] *** Quits: amb007 (~a_bakic@242.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:19:48] <mfiano> What do you mean?
[17:20:00] <mfiano> I would read that article carefully. It is one of the best ones KMP wrote.
[17:20:18] <phoe> fragmenting, as in?
[17:20:31] <madnificent> Scanning through this article, it makes sense.  But that does mean that every library will start defining their own equality predicate, rather than having something that could be shared and discovered.
[17:20:33] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:20:59] <moon-child> baker also has good things to say on equality predicates
[17:21:12] <moon-child> https://plover.com/~mjd/misc/hbaker-archive/ObjectIdentity.html  this I think
[17:21:57] <phoe> madnificent: yes, and then you'll write your own custom equality predicates as the user of those libraries based on the APIs exposed by those libraries
[17:22:27] <phoe> equality in an impure language is surprisingly complex and one can't magically make it simple
[17:22:40] <madnificent> So we lack a common terminology or wiring across libraries.  Even though imperfect, we don't have a shared language due to this.
[17:22:53] <madnificent> I am correct that I can't defmethod any of the equality operators, right?
[17:22:59] <mfiano> Correct
[17:23:03] <madnificent> predicates, sorry
[17:23:06] <madnificent> thank you
[17:23:07] <phoe> the standard ones? yes
[17:23:12] <phoe> you cannot defmethod them
[17:23:34] <splittist> dmv:car= and tyreco:car= are going to very different
[17:24:01] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[17:24:13] <madnificent> I would have expected there to be some library that exposed some method that said something like "if it's read the same way as it's written, then this should yield truthy".  I could implement that and reuse a common language.
[17:24:51] <phoe> read the same way as it's written?
[17:24:59] <madnificent> Now I'll expose an equality operator somewhere in my library for my special case and I get to define my special rules.  Rules which, in many cases, would conflate with other people's rules.
[17:24:59] <moon-child> written with *print-circle* as t or nil?
[17:25:03] <phoe> you mean that #< will break it?
[17:25:04] <moon-child> and what do you do about unreadable objects?
[17:25:32] <madnificent> phoe: Assuming you print readable objects.  But it's just an example.  Nothing in particular that interests me in this case.
[17:26:23] <madnificent> moon-child: right!  When I define my own, I'll make haphazard decisions on these things and I'll likely be wrong.  If a library would have defined a few terms, I could have chosen one and my decision would have been better than what I'll do now.
[17:27:01] <moon-child> madnificent: but this is the point we are trying to make.  There are not wrong decisions, but _appropriate_ ones; and what is appropriate is highly contextual
[17:27:08] <madnificent> I'm now going to define an equivalence function.  My definition will be full of holes (because I'm thinking of this one case).  It will work.  The next person reading it will probably wonder about some of the holes I didn't catch.
[17:27:38] <moon-child> those are not holes, but windows of inapplicability
[17:27:51] <madnificent> moon-child: no, they'll be drainfarts from my end.
[17:27:57] <phoe> if I (defclass foo () (bar baz)), what does it mean for two objects of class FOO to be equivalent?
[17:28:23] <phoe> or, in other words, what should be the body of (defmethod eqv ((x foo) (y foo)) ...)?
[17:28:36] <madnificent> phoe: Exactly!  A library can give some common descriptions.  I can implement one of them and we gain a shared vocabulary!
[17:29:11] <moon-child> comparing objects by enumerating their slots is the opposite of generality
[17:29:37] <madnificent> I agree that an implementation is hard to shove forward.  The Semantic Web has a similar issue with definitions of what is the same and what is related.  But having some form of definition helps create a shared language and at least we can combine datasets in a valuable way.  Perfect?  Nope, but we *can* roll our own.
[17:29:40] <moon-child> and a generic library can do no more
[17:29:48] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[17:30:06] <madnificent> I'm not looking for a library with an implementation, but rather one with a set of possible specifications.
[17:30:28] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Remote host closed the connection)
[17:30:41] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[17:30:49] <madnificent> I agree that providing a generic implementation is ... not at all better than what we already have in CL.
[17:31:08] <phoe> the issue is that you can't specify equivalence ahead of time no matter how your generic function is going to look like because there's plenty of possibilities to define *distinct* equivalence classes for all sets of objects
[17:31:29] <phoe> so you'd need to have something like (eqv x1 x2 ...) where ... specifies the "sort" of equivalence that you are looking for
[17:31:49] <madnificent> phoe: and a library defining generic functions could describe in its docsctrings various options.  Common sorts of equivalence.
[17:32:02] <madnificent> Combined with their intended use, ideally.
[17:32:49] <splittist> I think the library talk is a red herring; I can see the attraction of a shared vocabulary. e.g. slotwise-equivalent, read/write-equivalent
[17:33:00] <phoe> and so we're reimplementing DEFGENERIC EQUIVALENT-OBJECT from http://www.nhplace.com/kent/PS/EQUAL.html
[17:33:10] <madnificent> As an example.  OWL specifies owl:sameAs (https://www.w3.org/TR/owl-ref/#sameAs-def).  Although vague, it provides a shared vocabulary.
[17:33:48] <madnificent> phoe: I'm not looing for an implementation.  I'm looking for generic functions.
[17:33:56] <madnificent> ... and docstrings.
[17:33:58] <moon-child> madnificent: web has no pointers
[17:34:07] <moon-child> lisp does
[17:34:57] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[17:34:58] <phoe> madnificent: then (DEFGENERIC EQUIVALENT-OBJECTS (X Y INTENTIONAL-TYPE)) should work for a starting point
[17:35:02] <madnificent> moon-child: this is the exact same problem.  There are two URIs, like memory locations, and they mean the same thing.  owl:sameAs says "hey, these are actually the same".  Not perfect, but a sort of description that puts people in the same place.
[17:35:10] <madnificent> phoe: yes, but in what package should that be?
[17:35:14] <moon-child> madnificent: nope
[17:35:31] <moon-child> on the web, all pointers are weak
[17:35:32] <phoe> madnificent: the one in which you place it as the library author :D
[17:35:51] <madnificent> moon-child: if I clone an object, the pointer is weak too?
[17:36:15] <madnificent> phoe: I could create it as a library indeed XD
[17:36:26] <phoe> madnificent: you *must* create it as a library if you want it to become a reality
[17:36:34] <madnificent> moon-child: Also, that's not how the semantic web works.  You can reuse an identifier no problem.
[17:36:38] <phoe> you won't extend CL itself with it because the list of standard CL symbols is frozen
[17:36:50] <madnificent> phoe: LoL.  Agree.  Not the goal :P
[17:36:51] <phoe> so, a separate library you can make.
[17:37:04] <madnificent> phoe: I'm not even confident I'm the right person to jot down the library.
[17:37:06] <mfiano> Or contribute to generic-cl etc
[17:37:19] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[17:37:43] <phoe> madnificent: make a decent test suite and I won't need to be confident in you since I'll be able to be confident in the tests :D
[17:37:48] <phoe> mfiano: also a good idea
[17:38:07] *** Joins: Alfr (~Alfr@user/alfr)
[17:39:06] <mfiano> I think such a library would be subject to combinatorical explosion very quickly though.
[17:39:14] <madnificent> phoe: I don't think you can provide tests for something that has no implementation.  At least no valuable ones.  Ideally someone has researched equality in depth and has created categories of equality.
[17:39:57] <madnificent> I think generic-cl has a slightly different target, though the = operator could be used for this use indeed.
[17:40:23] <phoe> madnificent: that's why I wanted you to read kmp's article - it provides an example implementation, some example categories, and a rationale for both :D
[17:40:24] <madnificent> A context is indeed a welcome addition in some cases.
[17:40:32] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[17:40:41] <madnificent> phoe: I saw those and that makes sense!
[17:40:49] <phoe> also, you can write implementations and tests for standard CL data structures to make your library immediatey useful
[17:41:10] <phoe> (and to immediately provide some code for your test suite)
[17:41:10] <madnificent> phoe: I'm only searching for the defgeneric portion in some library.  I'm trying to avoid reinventing the wheel.
[17:41:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:41:23] <madnificent> It seems the CL community receives a lot of dirt for it, and I don't think I'm an exception.
[17:41:39] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Client Quit)
[17:42:02] <phoe> quicklisp tells me about https://github.com/karlosz/equals/blob/master/equals.lisp
[17:42:45] <phoe> which, in turn, implements https://common-lisp.net/project/cdr/document/8/index.html
[17:43:53] <Shinmera> I've written and used a lot lot lot of libraries and systems. There was maybe one point where I wanted a generic equality test, and in that case it was trivial to just write it for the cases that actually mattered.
[17:44:27] <Shinmera> Imo a generic equality thing is something that seems like a no-brainer, but is actually almost entirely superfluous at best, and actively confusing at worst.
[17:44:54] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:44:58] <moon-child> phoe: I already spot problems with that implementation :P
[17:44:59] <Shinmera> I don't even like equal/equalp, for instance, and instead wish hash-tables supported other tests like string= and string-equal.
[17:45:19] <moon-child> 'epsilon' is always taken as absolute, when a relative epsilon may be wanted in some circumstances
[17:45:33] <moon-child> (and this demonstrates the difficulty in coming up with such functions ...)
[17:46:14] <madnificent> moon-child: that's the point of Kent, you want an extra specifier.
[17:47:13] <madnificent> and I agree with you on that.  Though a shared known vocabulary is handy.  Like alexandria provides tools, this could provide generic methods.  I see that some have attempted a base implementation too.
[17:48:15] <madnificent> thanks for all the pointers and lovely argumentation moon-child, phoe, mfiano, Shinmera
[17:48:31] <phoe> there is one more problem with this way of defining EQUALS
[17:49:05] <phoe> what if in one part of my code I want to be sure that two slots of FOO refer to objects that are just EQUAL, because I only care about their value
[17:49:13] <madnificent> (my gut-feeling says that deep research would land at something that involves something like ContextL)
[17:49:23] <phoe> and in another part of the code I want them to be EQ, because I case about their identity
[17:49:38] <madnificent> phoe: I'm advocating for many generic methods
[17:49:47] <madnificent> or something extra to dispatch on.
[17:49:57] <phoe> and what if method for FOO is defined elsewhere and I cannot really redefine it or put an :around on it
[17:50:06] <madnificent> I'm searching for ways of making an informed decision, rather than assuming a single method can be implemented that works for all.
[17:51:03] <phoe> yes, I see
[17:51:24] <phoe> I'm just pointing out possible problems that have been discovered so far and that a Truly Generic Equality Operator® would need to take into account
[17:52:43] <madnificent> Yes.  Perhaps it would be possible to define the strictnes of equality in a tree (but perhaps not!) and if that would be the case, then perhaps an extra argument could help in that regard.  Perhaps objects could define their own "default" for equality and indicate they implement that.  I don't know.  I wonder though!
[17:54:00] <Alfr> madnificent, should 2 and 7 be equivalent?
[17:54:00] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[17:54:05] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[17:54:10] <phoe> well, this already sounds like (setf (fdefinition 'foo-equal) (make-equality-predicate ...)) :D
[17:54:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:55:02] <_death> one issue is that the result of an extensible equality operator may change at different points in time.. (equals x y) => nil ... seasons pass and methods are added, (equals x y) => t ... often an equality operator is presumed to be a (mathematical) function, so this is undesirable
[17:55:03] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:55:29] <madnificent> Alfr: (equivalent 5 7 'type), perhaps?
[17:55:45] <phoe> and that sounds like a lot of work for creating a framework/factory for different equality and equivalence predicates, whereas I'll do simply (defun my-equal (x y) (= (mod x 5) (mod y 5)))
[17:55:53] <phoe> which is likely what Alfr meant, but I might not be sure
[17:56:02] <phoe> could also be both being #'oddp
[17:56:13] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Client Quit)
[17:56:18] <phoe> oh wait, sorry; both less than 10
[17:56:19] <Alfr> phoe, yes.
[17:56:21] <mfiano> Or maybe we want to compare how many pen strokes it takes for a human to write
[17:56:43] <Alfr> mfiano, I like how you think. :)
[17:56:43] <moon-child> phoe: both of those are expressible as an existing equality function with some key
[17:56:48] <madnificent> phoe: you could roll your own loop too.  But that's what apparently is attributed to lisp being hard.  It's too easy to roll your own things and there's too little consensus.  Then again, that's by people outside of the community so what do I know.
[17:56:53] <moon-child> (mod 5), type-of, or oddp
[17:57:39] <madnificent> but really, what is worse: seeing (my-lib:equal 5 7) -> true, or seeing (shared:equal 5 7 'odd-p) -> true
[17:58:03] <madnificent> I'd be seriously surprised on the first result, but if there'd be a shared infrastructure I'd be only weary to see the second.
[17:58:37] <_death> (equal-parity 5 7)
[17:58:39] <madnificent> After this, the challenge becomes the definition of symbols like 'odd-p in the same namespace.  Preferable ones the community sees value in.
[17:58:43] *** Joins: Bike (~Glossina@71.69.170.70)
[17:58:43] *** ChanServ sets mode: +o Bike
[17:58:57] <Alfr> madnificent, if it's necessary to pass along something extra to specify how two thing are to be tested for equivalence, then you could also simply pass along such a predicate function.
[17:58:58] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[17:59:04] <mfiano> _death's solution has the added benefit that it can be variadic
[17:59:10] <phoe> the true challenge is that cl:oddp already exists as a symbol
[17:59:28] <madnificent> Alfr: true, but then I'm again at the situation where I don't have a place to discover what good options are for equality functions and what to think about.
[17:59:32] <moon-child> I was assuming (shared:equal 5 7 :key #'cl:oddp)
[17:59:54] <moon-child> which would turn into (shared:equal (funcall #'oddp 5) (funcall #'oddp 7))
[18:00:05] <madnificent> Alfr: My search was not for an implementation, but rather for defgeneric things so I can be more informed in my implementation, and so the community can have a shared vocabulary.
[18:00:21] <phoe> (equal 5 7 :key #'oddp :test #'eq)
[18:00:34] <moon-child> yeah
[18:00:45] <madnificent> phoe: although funny, that would defeat the purpose of a shared language.
[18:00:50] <mfiano> Are we no longer talking about a generic function which would not be able to portably dispatch on the value of a keyword argument?
[18:01:12] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[18:01:16] <phoe> mfiano: dispatch on the value of a keyword argument? what do you mean?
[18:01:22] <madnificent> mfiano: I think we're joking to vent frustration and avoid the point of the discussion.  But not sure.
[18:01:45] <phoe> (defun equal (x y &key z) (%equal x y z)) (defgeneric %equal (x y z)) ; here's your dispatch
[18:01:50] <moon-child> I interpreted (equal 5 7 :key #'oddp :test #'eq) as completely serious, and it seems reasonable to me
[18:01:53] <madnificent> mfiano: my gut-feeling says the keyword argument itself likely belongs to some form of inheritance.
[18:02:27] <madnificent> moon-child: Ah!  I was looking for terms that conveyed a meaning.  This suggestion conveys an implementation instead.  Comparing two forms of equality based on their intention is harder that way.
[18:02:32] <moon-child> (though perhaps (eq-equal 5 7 :key #'oddp) would be slightly preferrable)
[18:02:36] <mfiano> Personally, I prefer slate gray for the bike shed.
[18:02:42] <moon-child> lol
[18:02:44] <phoe> :D
[18:02:45] <mfiano> On that note, I'm running away from this conversation.
[18:03:13] <madnificent> moon-child: That example would work for numbers, but you can hardly port it to objects of some kind.  It lacks a higher-level meaning.  An intention.
[18:03:14] <Alfr> madnificent, call it an equivalence relation? (And make sure it is one, otherwise unexpected things will happen that one does not expect from =, eql etc.)
[18:04:04] <madnificent> Alfr: sounds reasonable.  That's also what http://www.nhplace.com/kent/PS/EQUAL.html uses (but because equal was taken)
[18:04:08] <moon-child> what higher-level meaning or intention could you possibly assign to 'have the same evenness/oddness'?
[18:04:22] <Alfr> madnificent, I think your underlying problem is that on a set of things you can define many such relations.
[18:04:46] <Alfr> madnificent, in particular every partition of the set corresponds to one such relation.
[18:04:49] <madnificent> moon-child: perhaps it's not the best candidate for an equivalence function then.  Why would you use that function?  Meaning comes from the use, rather than the implementation.  With only an implementation it's hard to indicate a meaning for me.
[18:05:26] <madnificent> Alfr: Yes.  But some common things likely pop up.  It's valuable to share a vocabulary on those.
[18:06:06] <madnificent> Like: I jotted down a prolog thing at some point because I couldn't download the prolog compiler/runtime and I had to make a school assignment.  I could use that if I'd find it back, but I'd rather share a solution.
[18:06:37] <madnificent> not even because of bugs, but also because it's makes things easier to read for others.  When you see split-sequence:split-sequence you probably already know it.  Similar for Alexandria.
[18:07:43] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[18:10:57] <_death> you could create an equality function builder.. like (create-equality-function :atomic-test (disjoin (conjoin #'integerp #'oddp) #'eql) :descend-into '(vector list)) ;; or something
[18:12:05] <_death> well, #'equal-parity there..
[18:12:35] <madnificent> I could.  But that still leaves open the whole issue of having a good description on the intended equality, which is what I was searching a solution for.
[18:13:03] <_death> the way to do that is by having a good name for the function
[18:13:07] * madnificent is not in the "tests are docs" camp
[18:13:29] <moon-child> mathematics disagrees with you :P
[18:13:48] <Alfr> madnificent, maybe simply a test key-argument? see tree-equal
[18:14:31] <madnificent> _death: somewhere in the beginning I pointed out that having a shared vocabulary is handy.  it both helps you wire implementations together easily, as well as teach you good solutions (and shows pitfalls).  like the statement Kent makes "you won't find one good equality, make sure you can have many"
[18:16:21] <_death> madnificent: in a create-equality-function case, a vocabulary is created.. terms for concepts like atomic or primitive test, descent into structures, etc.
[18:17:40] <_death> madnificent: the builder is a generic tool to create specialized equality operators
[18:18:27] <_death> I'm also reminded of that quick hack https://gist.github.com/death/6a441602bd6acebda067dd900e56e256
[18:20:06] <madnificent> _death: I doubt it would teach me what a good equality operator is and what should be taken into account for creating one.  It could help define equality once that information was shared.
[18:20:10] <_death> here the vocabulary consists of equality definition operators like funcall/and/call/nest/store
[18:20:34] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:21:11] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[18:21:58] <_death> madnificent: well, logicians already had that covered with the definition of equivalence relation
[18:22:08] <madnificent> _death: for the few things that make sense to me (store doesn't immediately), that looks like a cool way of implementing various ways to compare things.
[18:24:53] <madnificent> On the upside, this discussion has made my docstring substantially better already!  Thanks :D
[18:26:37] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[18:27:02] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[18:27:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[18:27:55] *** Joins: attila_lendvai (~alendvai@catv-176-63-14-32.catv.broadband.hu)
[18:28:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:29:07] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[18:33:01] *** Joins: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16)
[18:33:17] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[18:34:45] *** Joins: cranium (~cranium@user/cranium)
[18:36:36] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:36:50] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[18:37:18] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:37:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:39:24] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:39:45] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:40:24] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:49:49] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:50:39] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Quit: ERC (IRC client for Emacs 27.2))
[18:51:01] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[18:53:09] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[18:53:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:53:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:54:41] *** Joins: amb007 (~a_bakic@62.37.22.93.rev.sfr.net)
[18:56:12] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[18:57:51] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 268 seconds)
[18:57:53] *** Quits: amb007 (~a_bakic@62.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:58:12] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[18:58:23] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:12:05] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:12:15] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[19:12:49] *** Joins: amb007 (~a_bakic@62.37.22.93.rev.sfr.net)
[19:14:02] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[19:15:58] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:18:16] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 245 seconds)
[19:20:18] *** Quits: amb007 (~a_bakic@62.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[19:20:26] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:24:23] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:27:18] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:30:16] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:30:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[19:31:58] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[19:33:40] *** Quits: jeosol (~jeosol@2600:1700:d6d0:4540::49) (Ping timeout: 256 seconds)
[19:35:52] <madnificent> Hello again from the questions agancy.  IIUC, cl-ppcre should be able to understand unicode characters thrown at it.  Does that require any specific setting?  I'm not getting expected results with character ranges.
[19:37:38] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[19:38:37] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[19:39:23] <mfiano> Characters do not a unicode string make.
[19:39:46] <mfiano> I think SBCL encodes codepoints in UTF32, which is odd.
[19:40:16] <White_Flame> the encoding shouldn't affect anything
[19:41:02] <White_Flame> madnificent: best to use char-code to ensure that what you're testing with/against is what you expect numerically, since these are about ranges
[19:42:05] <White_Flame> if the string has combining forms, instead of single code points, that will muck with things as well
[19:42:29] <White_Flame> so you probably want to find a unicode normalization function first, too
[19:42:29] <madnificent> White_Flame: I convert from the hex code to a character when constructing the regex string and a string with ; matches [#x10000-#xEFFFF] which doesn't seem right.
[19:43:06] <White_Flame> you typed in the semicolon, and it passed a test for that range?
[19:43:07] <madnificent> Perhaps my assumption of using code-char isn't right
[19:43:23] <madnificent> Yes, semicolon matches that range
[19:43:34] <madnificent> Well it shouldn't.  But it matches.
[19:43:58] <White_Flame> (because of stuff like this: https://www.greece10best.com/wp-content/uploads/2018/08/8-7-696x400.jpg )
[19:44:39] <madnificent> White_Flame: That should only match if I explicitly entered the other semicolon and not one in the supplied range.
[19:44:52] <madnificent> It's not an external string.  Just a query I wrote.
[19:45:07] <White_Flame> can you post code?
[19:45:36] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[19:45:41] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[19:45:50] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:46:15] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:46:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Remote host closed the connection)
[19:47:14] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[19:47:34] <madnificent> I found the bug.  Thank you for confirming this should work!
[19:47:49] <White_Flame> ok
[19:48:16] <madnificent> If you try to replace #x[0-9A-F]{1,4} and expect #x10000 to match completely, you're o_O
[19:48:20] * madnificent is o_O
[19:48:21] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:48:32] <White_Flame> heh
[19:48:39] <madnificent> It's open source though!
[19:49:51] <frodef> Hi all, I'm using DEX:REQUEST to download some HTTP. When there's network issues, it seems to just hang forever, despite DEX:*DEFAULT-READ-TIMEOUT* being set to e.g. 10. When I inspect the stack etc. at the point of hanging, there seems to be no timeout-mechanism that has trickled down to the lower abstraction layers. Does anyone happen to know about this?
[19:51:01] <frodef> (... this is SBCL on linux.)
[19:56:06] <madnificent> frodef: I don't know, but maybe maybe drakma does work?  This isn't what you want to hear but the closest I get.
[19:57:17] <frodef> madnificent: "everybody" seem to say to transition from drakma to dexador.. :-)
[19:57:28] <phoe> ;; until they go back to drakma
[19:59:12] <frodef> I seem to be able to provoke a "standard" read timeout, so I'm guessing it's a matter of the timeout mechanism not being consistently propagated to the lower I/O calls.
[20:01:17] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 240 seconds)
[20:01:31] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: issued !quit command)
[20:02:17] *** Joins: Guest58 (~Guest58@c-73-215-210-211.hsd1.nj.comcast.net)
[20:03:24] *** Quits: Guest58 (~Guest58@c-73-215-210-211.hsd1.nj.comcast.net) (Client Quit)
[20:06:12] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[20:12:03] <frodef> There's already a bug-report, dated september 2020, and zero response. That's not a good sign, I suppose. https://github.com/fukamachi/dexador/issues/91
[20:13:17] *** Joins: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:14:14] <White_Flame> oh, it's fukamachi :-/  a lot of people end up looking for alternatives
[20:15:01] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[20:15:16] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[20:15:35] <mfiano> welcome to fukamachiware.
[20:16:25] <mfiano> the lone wolf way of CL, cranking out code to satisfy personal requirements with no replies to issues
[20:17:34] <mfiano> I think it's been about 5 ot 6 years since my issues were posted and still waiting on replies
[20:18:53] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Read error: Connection reset by peer)
[20:19:06] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[20:19:13] <frodef> I suppose this does highlight a bit of the problem with the CL scene.. it's never quite clear what is the canonical thing (i.e. library).
[20:19:37] <phoe> whatever is maintained and merges PRs and bugfixes
[20:19:43] <White_Flame> right, cliki needs some form of rankings, IMO
[20:19:49] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[20:20:21] <frodef> phoe: yes, but it's a bit sad to include "what is the latest github checkin" in my search parameters for a HTTP library.
[20:20:44] <frodef> Anyhow, is Drakma the thing to go for, then? :)
[20:21:13] <frodef> (I actually recently switched from Drakma to Dexador.. sigh.)
[20:22:07] <madnificent> frodef: The only thing I've effectively seen work in communities is individuals putting in the time to check libraries and evaluate them.
[20:22:32] <mfiano> quicklisp has an http client built in.
[20:22:47] <phoe> ;; though it's simple and can break for non-ql websites
[20:22:51] <mfiano> :)
[20:22:52] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:23:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:24:10] <mfiano> Personally I use dexador, and make lots of hacks locally to fix things. Not a recommended way to go for fukamachiware for the sane.
[20:25:22] <Xach> heh
[20:25:42] <Xach> for wigflip.com i wrote both an http client and a dns client so i had fine control over fetching resources over the nasty net
[20:26:00] <Xach> didn't want dns timeouts to get stuck
[20:26:32] <Xach> (they both used epoll)
[20:26:34] <frodef> Maybe there should be some sort of semi-social mechanism overlaying quicklisp? Something to indicate confidence level in general, and particularly for a list of standard library functionality (e.g. http download)
[20:26:55] <phoe> you mean a unit test suite?
[20:27:16] <White_Flame> there were popularity lists posted, saying which QL systems were downloaded the most, at least
[20:27:24] <Xach> phoe: i've sometimes thought more like amazon product reviews except for libraries
[20:27:28] <phoe> White_Flame: there still are!
[20:27:30] <Xach> "FOUR STARS would cons again"
[20:27:39] <frodef> phoe: no, something that essentially says "86% of people use <this> for downloading HTTP", etc.
[20:27:40] <phoe> White_Flame: https://github.com/phoe/quicklisp-stats
[20:27:45] <White_Flame> Xach: but those do change over time, too, so static old reviews aren't great here
[20:27:56] <White_Flame> phoe: cool, hadn't seen them in forever
[20:28:03] <mfiano> Inflated reviews are always indicative of good products.
[20:28:13] <Xach> White_Flame: yes, and if you leave one star, a foreign programmer will offer you a $25 amazon gift card to remove it
[20:28:19] <yitzi> Or bad ones.
[20:29:08] <Xach> download stats are also easily gamed
[20:29:20] <Xach> damned CI systems
[20:29:57] <phoe> White_Flame: you can download and print them yourself using this system
[20:30:02] *** Joins: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:30:16] <phoe> no need to depend on Xach's time to post download stats.
[20:30:31] <phoe> or you can automate formatting them into HTML and posting them if you feel like it
[20:31:17] *** Quits: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[20:33:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:35:02] <frodef> I suspect the thing is, CL lacks the Benevolent Dictator that most others have (or at least had while building community).
[20:35:41] *** Joins: robin (~robin@user/terpri)
[20:35:42] *** Quits: jayant (~quassel@223.236.0.223) (Read error: Connection reset by peer)
[20:36:29] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[20:36:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[20:37:12] *** Joins: amb007 (~a_bakic@62.37.22.93.rev.sfr.net)
[20:41:02] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[20:41:27] <phoe> herding lispers is a full-time job, herding lisp projects is at least another two
[20:42:23] *** Parts: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[20:44:00] <frodef> hm.. Apparently Drakma doesn't have READ-TIMEOUT at all.
[20:44:13] <madnificent> frodef: no bug!  sorry
[20:44:45] <semz> The BD comes with his own set of problems. Just look at van Rossum crippling functional programming in Python.
[20:45:07] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:ed7c:b42f:6ab4:354f)
[20:45:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[20:46:50] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[20:47:18] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:47:49] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e6:2aaa:ed7c:b42f:6ab4:354f) (Ping timeout: 240 seconds)
[20:52:46] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:53:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:54:57] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[20:54:58] *** Quits: amb007 (~a_bakic@62.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:55:48] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:56:25] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:56:37] *** Joins: etimmons (m-fyxyzb@li834-247.members.linode.com)
[20:57:20] *** Joins: Guest58 (~Guest58@c-73-215-210-211.hsd1.nj.comcast.net)
[20:57:26] *** Quits: Guest58 (~Guest58@c-73-215-210-211.hsd1.nj.comcast.net) (Client Quit)
[21:00:14] <frodef> madnificent: sorry, what did you mean?
[21:00:59] <frodef> madnificent: ... that the missing READ-TIMEOUT is a bug?
[21:04:54] <jeffrey> frodef, are you using HTTPS instead of HTTP by any chance? When I try `(time (nth-value 1 (dex:get "https://httpbin.org/delay/10" :read-timeout 2)))` without HTTPS I get the error
[21:05:05] <jeffrey> after the wanted time
[21:05:56] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[21:06:18] <frodef> jeffrey: yes, I think it's an SSL issue.
[21:09:24] <jeffrey> yooo
[21:09:26] <jeffrey> solved it
[21:09:59] <jeffrey> put the (when read-timeout after (if (string= scheme "https"
[21:09:59] *** Quits: Devon77 (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[21:10:20] <jeffrey> oops
[21:10:23] <jeffrey> wrong error
[21:11:03] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 268 seconds)
[21:12:15] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:20:28] <madnificent> frodef: I was joking.  I meant that if there is no such feature in drakma, then it can also have no such bug.  It was not helpful.  Sorry.
[21:21:28] *** Joins: rain3 (~rain3___@86.127.204.59)
[21:21:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:21:50] *** Joins: robin (~robin@user/terpri)
[21:22:48] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:23:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[21:24:30] <frodef> madnificent: np
[21:25:32] *** Joins: jeosol (~jeosol@2600:1700:d6d0:4540::49)
[21:25:47] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:33:50] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[21:34:48] <Xach> i guess the ql http client takes a lot from the wigflip one
[21:35:16] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[21:35:37] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:36:23] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:38:35] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 250 seconds)
[21:41:48] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:44:01] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[21:51:31] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:50] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:59:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:00:26] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[22:02:09] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:04:18] <phoe> does anyone know of a utility that produces a string-output-stream for a given string with indefinite extent?
[22:04:36] <phoe> something like (with-output-to-string (stream string) ...) except where STREAM is not DX
[22:08:14] <Alfr> phoe, how about make-string-output-stream and get-output-stream-string?
[22:08:51] <phoe> Alfr: I want to provide my own string to vector-push-extend chars into
[22:10:22] <Alfr> phoe, then I don't know about something appropriate, sorry.
[22:21:01] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:21:17] *** ec_ is now known as ec
[22:22:16] <frodef> Seems to me that CL+SQL just doesn't deal with timeouts.
[22:25:13] *** Joins: Catie (~user@user/catie)
[22:25:25] <marcoxa> frodef: "deals with timeouts" is quite a statement given any CL implementation period.  With or without SQL.
[22:26:27] <frodef> marcoxa: You're saying none of them deal with timeouts properly?
[22:28:24] *** Joins: karlosz (~karlosz@136.56.98.53)
[22:33:10] <frodef> Anyhow, seems to me that SB-SYS:WITH-DEADLINE serves the purpose.
[22:36:02] <frodef> ...except it leaks file-descriptors. Sigh.
[22:36:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:40:34] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:ed7c:b42f:6ab4:354f) (Read error: Connection reset by peer)
[22:43:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:44:09] <lisp123> http://funcall.blogspot.com -> really good blog I discovered today
[22:44:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[22:46:30] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[22:48:37] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 240 seconds)
[22:50:17] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[22:54:48] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[22:54:57] <phoe> Xach: is it indexed by Planet Lisp per chance?
[22:55:14] <Xach> per chance it is the inimitable joe marshall, indexed for more than a decade
[22:55:33] <phoe> ooh
[22:55:34] <phoe> good
[22:55:47] <Xach> planet lisp is almost 20 years old! yeep
[22:55:48] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[22:57:44] <lisp123> Nice one! 20 years of Lisp...ain't that something
[22:59:00] <Xach> I should have planted some apple trees the day I started learning Lisp
[22:59:42] <lisp123> heh. Well you can now and see them in another 20 ;)
[22:59:57] * Xach has an orchard already in progress, but it is only a few years old
[23:00:04] <lisp123> Nice
[23:00:12] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Ping timeout: 268 seconds)
[23:00:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:00:53] <edgar-rft> Planet Earth is 4.5 billion years old, only to give you a number to compare :-)
[23:02:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[23:02:56] <sm2n> frodef: Maybe <https://github.com/crev-dev/crev/> is a starting point?
[23:03:51] <lisp123> edgar-rft: But Planet Lisp is only the human incarnation of secret alien technology ;)
[23:04:52] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:05:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:07:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:23] <frodef> seems to me that the state of "alien technology" is that I simply cannot reliably download some files over HTTPS. (sorry, I'm just slightly frustrated by this..)
[23:08:17] *** Quits: rain3 (~rain3___@86.127.204.59) (Ping timeout: 240 seconds)
[23:09:39] *** Joins: tsiolkov (~tsiolkov@c-68-32-217-32.hsd1.mi.comcast.net)
[23:09:51] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[23:10:54] <rotateq> frodef: "Hello IT. Did you try turn it off and on again?" :D
[23:11:34] *** Quits: pk (~tsiolkov@c-68-32-217-32.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[23:12:47] <frodef> rotateq: That's pretty much how I expect these things are usually solved in practice. Kill the process and start over. The ultimate Garbage Collection.
[23:13:41] <rotateq> Yes and no. :D
[23:14:15] <theothornhill> frodef: I'm sure I'm totally missing the point, but did you try trivial-download?
[23:14:18] <rotateq> what are you using over there?
[23:14:32] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[23:15:55] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[23:17:12] <frodef> theothornhill: That seems to be something built atop Drakma?
[23:18:53] <theothornhill> yeah
[23:19:44] <theothornhill> Not sure what your problem is, but I use that in a utility to download pdfs all the time
[23:19:49] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Read error: Connection reset by peer)
[23:20:02] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[23:20:41] <frodef> theothornhill: my problem is what happens when the network hangs, or rather when a timeout occurs.
[23:21:57] <theothornhill> frodef: I see
[23:22:40] <frodef> I really thought CL was supposed to excel at Exceptional Situations.
[23:23:36] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:23:52] <aeth> when you have to interface with the rest of the world, you're going to have to deal with a messy situation, and potentially error codes
[23:23:56] <theothornhill> And connection-timeout isn't helping you?  Sorry if this is just looping over things already mentioned
[23:24:20] <aeth> even 100% native CL isn't going to help you with networking because the network protocol isn't going to be written with CL objects in mind
[23:24:28] <aeth> (but usually, the issue is CFFI, not networking)
[23:24:47] <aeth> you'll also potentially face type mismatches
[23:26:06] <frodef> theothornhill: I need read-timeout, not just connection-timeout. And the latter is just ignored for SSL with Dexador.
[23:26:51] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:27:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:28:21] <theothornhill> frodef: Oh, and that's only available on lispworks, it seems?
[23:28:23] <frodef> aeth: Sure, but dealing with "messy things" is kinda what I was hoping CL and its culture was supposed to deal with well.
[23:28:50] <frodef> theothornhill: don't think so, I'm using sbcl on linux.
[23:29:11] <theothornhill> I'm in drakma now... I'll show myself out
[23:29:13] <aeth> frodef: the problems of CFFI (or asm OS access if the OS has a stable API, but only Linux does afaik... the rest want you to go through C), DBs, and networking are just inherently messy
[23:29:26] <aeth> Only X11 tries to think about the existence of languages other than C or C++
[23:30:19] <aeth> I guess networking these days is mostly just "Do you have a JSON parser?", but they have subtle incompatibilities with each other and none of the CL JSON parsers are particularly good imo
[23:31:16] <frodef> aeth: I know that stuff is messy, and I can accept there are corner cases that can't be dealt with well. But this is just a plain download, dealing with a plain network outage.
[23:31:31] <aeth> I couldn't find something satisfactory with my IRC programming, either
[23:31:40] <aeth> the problem there is with usocket
[23:32:08] <marcoxa> frodef: I am saying (w.r.t. timeouts) that no semantics has been completely claified in any implementation.  We had a long discussion on th epro mailing list some time ago.
[23:32:39] <aeth> in particular, there is no READ-BYTE-NO-HANG (just READ-CHAR-NO-HANG) so if you read bytes (which you should, since the encoding over the network is unlikely to be exactly what your CL implementation expects)... you can... you know... hang
[23:32:47] <marcoxa> and yes... the issus came out about the use of usocket.  I don't remember the details.
[23:33:11] <aeth> You can guard the hanging with a check to LISTEN, but that does not give an error on the loss of the connection (it's defined not to, iirc)
[23:34:24] <aeth> So you either do a hanging read and get an error on connection loss (I guess a background thread makes that possible), or you do a non-hanging read (manually, by checking LISTEN first) and only READ-BYTE when LISTEN is T, but it doesn't tell you when there's a detected disconnection... So you can be waiting forever on a dead connection
[23:34:53] <yitzi> aeth: What deficiencies do you see with existing JSON parsers?
[23:35:07] <theothornhill> frodef: *default-read-timeout* is a no-go, at least.  It is only defined, not used anywhere as far as I can tell
[23:35:19] <aeth> yitzi: for starters, about 80% of them if not 100% of them don't understand the CL type system, preferring to treat NIL as null rather than as false
[23:35:32] <aeth> (by default, but everyone knows that defaults matter because virtually everyone uses the defaults)
[23:35:57] <aeth> if NIL isn't properly considered, then JSON encoding/decoding won't round trip
[23:36:22] <aeth> since NIL could be null (terrible idea; just use :null or 'null) or could be false or could be the empty list
[23:36:38] <theothornhill> https://github.com/Zulu-Inuoe/jzon is the new kid in town, I think
[23:37:07] <aeth> oh, and if you use plists/alists for JSON objects now you have an additional ambiguity
[23:37:32] <yitzi> jzon and shasht both use nil for truth
[23:37:36] <aeth> theothornhill: that at least considers round-tripping type mappings
[23:38:00] <frodef> Given the state of "Enterprise Software", I've found that the performance of JSON parsers is actually important. They need to gobble up megabytes...
[23:38:01] <aeth> true<->T false<->nill null<->'null array<->simple-vector, object<->hash-table
[23:38:16] <aeth> that does something that almost every JSON library doesn't do (by default)
[23:38:52] <yitzi> That is the default mapping for both jzon and shasht.
[23:39:24] <yitzi> Both of which pass the JSON test suite, unlike most other CL JSON parsers.
[23:39:35] <aeth> both libraries are (probably) fairly new
[23:39:42] <aeth> and only need to exist because the first 5 or so didn't even round trip
[23:39:52] <theothornhill> jzon not in quicklisp yet, at least
[23:41:05] <aeth> now you have the issue, though, of (1) getting it in Quicklisp and (2) getting everything that uses JSON to move over to one of the conforming and round-trip libraries
[23:41:11] <aeth> not easy considering how widespread JSON is
[23:41:20] <aeth> especially jzon, which would require a lot of lists to be converted to simple-vectors
[23:41:32] <yitzi> I wrote shasht about 1.5 years ago. jzon is about the same age.
[23:42:07] <aeth> what's worse is when a library reads/writes its own JSON
[23:42:18] <aeth> because now moving it to a conforming library might break the stored data
[23:42:40] <aeth> ones that simply read someone else's JSON don't have to worry about that
[23:42:55] *** Joins: Oladon (~olad@98.43.81.226)
[23:44:53] <aeth> I would say that the two biggest issues historically have been (1) no serious JSON library, (2) poor support for encrypted networking (e.g. HTTPS)
[23:47:00] <theothornhill> Does lispworks parse json?  Or was json largely ignored?
[23:49:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:50:53] <lisp123> I'm suprised how often JSON comes up in Lisp circles, I never thought it would be that hard to parse
[23:54:58] <yitzi> That the spec is ambiguous and ill defined does not help. And in my opinion it is not hard to parse, just that most of the parsers are just slightly flawed...IMHO.
[23:55:06] *** Joins: nature (~nature@45.32.235.173)
[23:56:52] <lisp123> It seems like there is something slightly missing from each. YASON has suited me well enough, but tbh I prefer just using XML were I need an independent format for serialization
[23:57:37] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:57:53] <lisp123> (but JSON can't be avoided much when working with the web, ofc)
[23:58:54] <frodef> JSON and HTTPS, indeed.
[23:59:30] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:59:56] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
