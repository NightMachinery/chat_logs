[00:00:01] *** Joins: Akiva (~Akiva@user/Akiva)
[00:03:13] <senoraraton> ~/join #programming
[00:03:37] <stenno> ~/../join
[00:09:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:09:58] *** Quits: RLa (~RLa@82.131.24.208.cable.starman.ee) (Quit: Client closed)
[00:10:21] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[00:10:26] *** Quits: kakashiA1 (~kakashi@37.84.156.126) (Ping timeout: 256 seconds)
[00:11:52] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:12:24] *** Joins: yaalon (~yaalon@2806:109f:14:5f5:b93f:f79d:69d9:cefb)
[00:12:57] <since_> ~.
[00:13:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:16:46] *** Joins: Naan` (~Naan@user/naan)
[00:17:14] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[00:20:31] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 268 seconds)
[00:27:36] *** Joins: Betal (~Betal@user/betal)
[00:27:53] *** Quits: salad (~cucumber@82.76.150.118) (Quit: salad)
[00:30:11] *** Joins: banana__ (~banana_@2603-6000-b500-9ce3-3ccd-5c9e-cfd0-95f1.res6.spectrum.com)
[00:30:26] *** Joins: thiras (~thiras@user/thiras)
[00:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:31:10] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[00:32:04] <ljharb> ox1eef: until someone does `Object.prototype.x = 'y'`
[00:32:08] <ljharb> ox1eef: for-in is never ok
[00:32:12] <ljharb> Maxdamantus: huh? no, like session cookies
[00:32:24] <ljharb> Alexendoo: i'm not sure what hpack is, but yes, it's still a concern
[00:32:45] <ljharb> Alexendoo: there's a ton of stuff attached to the request for a website that doesn't apply to requesting static assets.
[00:33:08] <ljharb> Alexendoo: there's also the per-domain download throttling limit, which is pretty high now but still might matter, so it's still beneficial there to have assets on another domain.
[00:33:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[00:33:58] <Alexendoo> ljharb: It's the name of HTTP2's header compression, it makes sending the same header for successive requests basically free
[00:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:29] <ljharb> Alexendoo: relying on http2 existing is a very unwise idea; http1 is still the most common thing.
[00:34:43] <ljharb> Alexendoo: so yes, that might reduce the impact. but that doesn't change that the best practice is to do the cleaner thing in the first place.
[00:34:49] *** Joins: msfninja (~kali@user/msfninja)
[00:35:22] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[00:35:52] <msfninja> in the first code snippet, in the comment that's under `console.log(target);`, is the expected output actually that of the `returnedTarget`?
[00:35:54] <msfninja> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
[00:36:40] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) (Remote host closed the connection)
[00:37:37] *** Quits: banana__ (~banana_@2603-6000-b500-9ce3-3ccd-5c9e-cfd0-95f1.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:37:37] *** Joins: bobdobbs (~user@118.148.85.252)
[00:39:08] <ljharb> msfninja: Object.assign both mutates, and returns, the first argument
[00:39:36] <msfninja> i see
[00:39:49] *** Joins: pavonia (~user@user/siracusa)
[00:40:36] <msfninja> so the sentence "It returns the modified target object." implies that it has been mutated
[00:43:29] <Alexendoo> ljharb: HTTP2 is more common, but sure. It could certainly be an improvement if the site is using HTTP1
[00:43:32] *** Joins: sam_1 (~sam_1@87.51.251.118)
[00:43:41] *** Quits: yaalon (~yaalon@2806:109f:14:5f5:b93f:f79d:69d9:cefb) (Remote host closed the connection)
[00:44:46] *** Joins: yaalon (~yaalon@2806:109f:14:5f5:b93f:f79d:69d9:cefb)
[00:47:42] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[00:48:00] *** Joins: nomic (~nomic@185.192.69.3)
[00:49:19] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:50:30] <devslash> This is my App component which is the parent component of all my components. https://pastebin.com/icHR0J9T On lines 70, 74 and 78 I create a copy of the states and assign them to another copy that makes a snapshop of the previous state. My problem is that if I assign the previous state variable directly (by doing something like  setPreviousPreferredStores(preferredStores); on line 70) any time I change a property of preferredStores, that change is
[00:50:30] <devslash> reflected in the previousPreferredStores state
[00:50:41] <ljharb> Alexendoo: it's an improvement anyways. because hpack isn't actually free
[00:50:51] <ljharb> Alexendoo: new features don't excuse sloppy approaches
[00:52:29] <Alexendoo> ljharb: It makes it 1 byte, maybe 2 if it came later on in the connection. You'd need to have thousands of static assets to just surpass the cost of setting up a new TLS connection
[00:52:35] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 268 seconds)
[00:52:52] *** Quits: ekathva (~ekathva@2001:999:51:be01:2799:25be:c992:870) (Remote host closed the connection)
[00:53:19] <ljharb> Alexendoo: there's a processing cost on the clientside, irrespective of the byte cost.
[00:53:27] <ljharb> Alexendoo: and TLS connections *are* basically free :-)
[00:53:47] <Alexendoo> Yeah they are basically free because they're like a few KB at most to set up
[00:54:03] <Alexendoo> hence the thousand or so required assets
[00:54:14] *** Joins: ekathva (~ekathva@2001:999:51:be01:4809:6feb:a1f2:4aa3)
[00:54:54] <devslash> ljharb, in my React project I have 2 states: preferredStores and prePreferredStores. When you are about to enter edit mode, I want to save a copy of the preferredStores state before starting the edit so I copy the value of preferredStores state to PrevPreferredStores but if I dont do a shallow copy, both states seem to reside in the same location in memory
[00:54:58] <Alexendoo> But same deal with TLS, yeah there's processing cost on the client side. It's basically free
[00:55:21] <Alexendoo> It's a lookup into a table
[00:55:40] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 268 seconds)
[00:56:47] <Alexendoo> I'm not saying TLS isn't basically free, I'm saying hpack is equally so
[00:58:41] <gjvc> Alexendoo: don't underestimate latency cost of (repeated) connection setups
[00:58:59] <gjvc> (+ssl/tls negotiations)
[00:59:11] <Slade> wonder how you explain this outage to customers. https://www.eastbaytimes.com/2022/01/30/sjm-l-xfinity/
[00:59:19] <Slade> california keeping it classy
[00:59:30] <Alexendoo> gjvc: Yeah, there is that
[01:00:35] <ljharb> Alexendoo: still doesn't mean it's ok to be sloppy ¯\_(ツ)_/¯
[01:00:59] <Alexendoo> ljharb: I disagree that it's sloppy
[01:01:05] <gjvc> daft comment
[01:01:49] *** Quits: ekathva (~ekathva@2001:999:51:be01:4809:6feb:a1f2:4aa3) (Remote host closed the connection)
[01:04:01] *** Quits: bobdobbs (~user@118.148.85.252) (Read error: Connection reset by peer)
[01:04:06] *** Joins: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au)
[01:05:42] <devslash> ljharb do you know why this is the case for my states
[01:09:55] *** Quits: yaalon (~yaalon@2806:109f:14:5f5:b93f:f79d:69d9:cefb) ()
[01:10:12] *** Joins: c4017w (~c4017@209.52.68.8)
[01:13:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:15:03] <ljharb> devslash: what does "copy the value of" mean
[01:15:13] <devslash> make a copy of an object
[01:15:20] <ljharb> how
[01:15:24] <ljharb> devslash: nothing in JS does a copy by default, even Object.assign and object spread are just a shallow copy.
[01:15:48] <devslash> why is it that 2 states reside in the same location in memory
[01:16:03] <devslash> did you see my app component
[01:16:49] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[01:17:08] <ljharb> devslash: there's no memory
[01:17:25] *** Joins: iffraff (~quassel@2605:a601:aae0:4a00:f06b:bc75:f491:f8b0)
[01:17:27] <devslash> I have got 2 states called preferredStores and PrevPreferredStores
[01:17:38] <ljharb> devslash: so, a) don't use a json round-trip to copy an object
[01:17:48] <devslash> this method in my component works
[01:17:57] <iffraff> Hi does anyone know a good way to call a package.json script programmatically from js?
[01:18:02] <ljharb> devslash: this is a really long pastebin to deal with. can you make a codesandbox please?
[01:18:12] <ljharb> iffraff: shell out to `npm run`
[01:18:17] <ljharb> iffraff: note that npm scripts are only for dev, not for runtime
[01:18:33] <ljharb> iffraff: why would you need to call out to an npm run-script programmatically tho?
[01:18:48] <iffraff> actually while I'm at it how about calling a makefile command from js
[01:19:01] <iffraff> so it will call my make file :)
[01:19:14] <iffraff> I thought it would be easier.
[01:19:34] <iffraff> when you say shell out do you mean call spawn or whatever?
[01:19:35] <devslash> Can I put just the app component into the sandbox
[01:20:45] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:22:05] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[01:22:25] *** Joins: audiobirb (~audio@user/audio)
[01:23:13] <devslash> ljharb: all that I really want to know is why on line 70, if I do setPreviousPreferredStores(preferredStores) which assigns the value of the state preferredStores to prevPreferredStores, and then I change preferredStore[0].Name, the value of prevPreferredStores[0].Name also gets modified with the same value.
[01:25:30] <devslash> It seems that this does a shallow copy instead of a deep copy this way
[01:25:53] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[01:27:23] <ljharb> iffraff: yes, spawn or exec
[01:27:26] <ljharb> iffraff: but also, that's pretty weird
[01:27:35] <ljharb> iffraff: if you're using make, just have npm run call `make` in the first place
[01:27:52] <ljharb> iffraff: a single run-script or make task shouldn't need to call others, it should be unix-like
[01:28:03] <ljharb> devslash: because that's how objects work in JS?
[01:28:06] <ljharb> devslash: that's not copying
[01:28:17] <ljharb> devslash: `var a = {}; var b = a;` both variables hold the same object
[01:28:55] <devslash> I know that in JS
[01:28:57] <devslash> but
[01:29:12] <devslash> I thought that with React states, you dont need to worry about that
[01:29:23] <iffraff> @ljharb yes, I have it "working' using execSync and calling my makefile command.  This is a clean db function for running before tests, it's not prod code
[01:29:40] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[01:29:59] <devslash> yea React is based on JS but I thought that each state is separate from one another
[01:30:07] *** Joins: trevors (~trevors@user/trevors)
[01:30:49] *** Joins: CoolerX (~CoolerX@user/coolerx)
[01:33:19] *** Joins: sudomann (~sudomann@98.219.211.182)
[01:33:54] <sudomann> Is "spawn" supposed to be a command available on my system? https://bpa.st/HX5A
[01:35:21] <sudomann> Thats me trying to build a react native app by the way - currently building for android, and some build step failed where it looks like it was supposed to run an executable from a js package
[01:37:18] <devslash> ljharb I mean consider this really simple example: https://pastebin.com/CQEYWshX
[01:37:26] <Maxdamantus> ljharb: sure, they're session cookies, but they're very big, so they're probably encoding a bunch of data inline.
[01:37:49] <ljharb> devslash: `useState` does not copy anything
[01:38:08] <ljharb> devslash: it works the same as anything in JS. it would be absurd for it to work differently.
[01:38:29] <Maxdamantus> ljharb: if it's only meant for correlation, it should be fine just using a 128-bit-or-so random number, but they seem to have cookies that are something like 1 KB long.
[01:38:32] <devslash> I learned the hard way that it doesnt work like that
[01:38:43] <ljharb> sudomann: no, spawn there is a function on child_process
[01:38:44] <devslash> but its a problem if you arent aware of that when working with objects
[01:38:54] <ljharb> Maxdamantus: who's they?
[01:39:00] <ljharb> devslash: yes, that's true of everything in js
[01:39:08] <ljharb> devslash: but once you know that, you shouldn't ever expect anything different
[01:39:12] <devslash> i meant in React specifically
[01:39:22] <ljharb> react is just js
[01:39:33] <ljharb> you shouldn't expect it to be different
[01:39:41] <devslash> its unintuitive that modifying one state can modify another one indirectly
[01:40:20] <devslash> I guess that thats the point I was trying to make...
[01:40:59] <Maxdamantus> ljharb: Google, GitHub, dunno, just seems like typical services do it.
[01:41:23] <Maxdamantus> on Youtube I can see I have a "LOGIN_INFO" cookie with a 407-byte value.
[01:41:36] *** Joins: kill (~killown@user/killown)
[01:43:06] <Maxdamantus> GitHub has a 504-byte "_gh_sess" cookie.
[01:45:24] *** Joins: goddard (~goddard@user/goddard)
[01:45:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:50:31] *** Quits: Intelo (~Intelo@88.244.94.93) (Ping timeout: 256 seconds)
[01:51:00] *** Joins: Wizzzzzy (~wizzzzzy@85.255.234.159)
[01:53:25] <ljharb> Maxdamantus: sure, there's often more data encoded in it
[01:53:35] <ljharb> but no matter how small, you don't want it on your asset requests
[01:53:40] <ljharb> devslash: it's intuitive if you know how JS works
[01:53:46] <sudomann> ljharb: I see thanks
[01:54:47] <devslash> I do know how JS works and as although React is based on JS that seems like something that could easily trip up any dev
[01:56:11] *** Quits: pmercado (~pmercado@186.11.41.95) (Ping timeout: 256 seconds)
[01:56:32] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[01:58:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:58:46] <stenno> n> const foo = {a: { b: 23 }}; const bar = foo; foo.a.b = 42; bar
[01:58:53] <jellobot> (timeout)
[01:58:56] <stenno> n> const foo = {a: { b: 23 }}; const bar = foo; foo.a.b = 42; bar
[01:58:57] <jellobot> (okay) { a: { b: 42 } }
[02:00:23] *** Joins: crashrep (~crashrep@user/crashrep)
[02:01:28] <Maxdamantus> n> const foo = function(){ const o = { b: 23 }; return () => o; }(); const bar = foo(); foo().b = 42; bar;
[02:01:29] <jellobot> (okay) { b: 42 }
[02:01:33] <ljharb> devslash: it could. but that's why devs need to learn JS.
[02:01:38] <Maxdamantus> Can't practically copy `foo`
[02:04:50] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[02:05:00] <stenno> wait what Maxdamantus
[02:05:33] <stenno> that is kinda blowing my mind i have to admit
[02:05:47] <stenno> lets see if it should
[02:06:39] <stenno> thats super weird lol
[02:07:56] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[02:09:29] <stenno> yes my mind is blown, this is not what i expected
[02:10:21] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 256 seconds)
[02:10:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:11:28] <stenno> hm
[02:11:43] <Maxdamantus> stenno: the `foo` function has closed over that `o` variable, which holds a reference to the object.
[02:12:06] <Maxdamantus> note that it's using an IIFE.
[02:12:11] <stenno> yes i saw the iife
[02:12:21] <Alexendoo> Yeah took me a while to spot that it was an IIFE
[02:12:43] <stenno> just got confused by the scoping
[02:12:49] <stenno> ok i see it now
[02:12:58] <stenno> i see now how it works, that is great
[02:12:59] <Maxdamantus> the point is you can't introspect or copy variables that are captured by a function value, so there is no general way to do a deep clone.
[02:13:24] <stenno> deep clone is code smell anyway :D
[02:13:32] <Maxdamantus> (and function values are acceptable state values as used by `useState`)
[02:13:51] <stenno> great demonstration
[02:14:36] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[02:17:29] *** Joins: zebrag (~chris@user/zebrag)
[02:18:29] *** Joins: banana__ (~banana_@2603-6000-b500-9ce3-d8fe-33e9-44ac-655d.res6.spectrum.com)
[02:19:03] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:22:09] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[02:22:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:28:57] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[02:29:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:bc3f:ae22:7b02:63e) (Quit: Leaving)
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[02:30:30] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:30:33] *** Quits: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac) (Quit: WeeChat 3.4)
[02:31:05] *** Quits: jopamo_ (~me@gateway/tor-sasl/jopamo) (Quit: WeeChat 3.5-dev)
[02:33:00] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[02:34:00] *** Joins: pizdets_ (~pizdets@183.182.111.155)
[02:34:13] *** Joins: crashrep (~crashrep@user/crashrep)
[02:34:32] *** Quits: pizdets (~pizdets@183.182.111.130) (Ping timeout: 250 seconds)
[02:35:49] *** Quits: Wizzzzzy (~wizzzzzy@85.255.234.159) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:36:11] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[02:38:32] *** Joins: ferdna (~ferdna@user/ferdna)
[02:39:13] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:ac63:f3f7:89ad:2997) (Quit: Leaving)
[02:39:21] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[02:41:34] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 260 seconds)
[02:42:19] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[02:43:57] *** Joins: luck (~luck@170.239.110.226)
[02:44:59] <ljharb> luck: you need to auth with nickserv for non-ops to see what you say. see the last link in the topic.
[02:46:29] *** Quits: erry (~erry@errietta.me) (Quit: WeeChat 2.5)
[02:47:19] *** Quits: iffraff (~quassel@2605:a601:aae0:4a00:f06b:bc75:f491:f8b0) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:47:32] *** Joins: erry (~erry@errietta.me)
[02:49:01] *** Joins: mtm49 (~mtm49@177.137.113.71)
[02:49:10] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[02:49:57] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:50:08] *** Joins: crashrep (~crashrep@user/crashrep)
[02:51:11] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:51:50] *** Quits: luck (~luck@170.239.110.226) (Remote host closed the connection)
[02:52:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[02:54:36] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[02:54:53] *** Joins: goddard (~goddard@user/goddard)
[02:55:45] <Alex8532> Hello :)
[02:55:51] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:58:32] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:59:00] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 268 seconds)
[02:59:39] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 256 seconds)
[03:11:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:15:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:18:26] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 260 seconds)
[03:19:00] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:20:28] *** Joins: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c)
[03:20:54] <twiclo> What's the best way to encode the .href on a URL object?
[03:22:28] <pavonia> Encode for what purpose?
[03:22:53] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:23:22] <twiclo> Like turning a & into a %3D&
[03:24:22] *** Quits: The_Tablet (~tablet@user/the-tablet) (Remote host closed the connection)
[03:25:12] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[03:27:11] <pavonia> n> encodeURIComponent("?foo=bar&blub")
[03:27:12] <jellobot> (okay) '%3Ffoo%3Dbar%26blub'
[03:27:32] <pavonia> n> encodeURI("?foo=bar&blub")
[03:27:32] <jellobot> (okay) '?foo=bar&blub'
[03:28:34] *** Joins: goddard (~goddard@user/goddard)
[03:33:17] <twiclo> Well this is frustrating. I can't pass it a whole URL
[03:33:27] <twiclo> It ends up encoding the :// part
[03:33:32] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 268 seconds)
[03:33:32] <twiclo> Oh well. I'll make it work
[03:33:56] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:37:07] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:37:53] <pavonia> It would be easier to help if you could tell what you are trying to do
[03:39:52] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:40:19] <twiclo> Not sure what other information I could give
[03:40:38] <twiclo> I'm building a URL and adding searchParams to it then trying to use that URL but the searchParams aren't encoded
[03:42:20] <twiclo> https://jsfiddle.net/kdgp8ocz/
[03:42:58] <ljharb> twiclo: https://npmjs.com/qs
[03:43:09] <ljharb> for the query string part, i mean.
[03:43:38] <twiclo> I'm not using npm
[03:43:57] <twiclo> Or node
[03:44:25] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[03:44:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:44:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:44:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:46:12] <pavonia> twiclo: Why do you expect the &s to be encoded like in your orig string? This is uncommon at least, if not wrong
[03:46:40] <twiclo> In that snippet I haven't done anything to try to encode anything. Just showing you where I'm at
[03:47:01] <twiclo> I'm sorry if you think it's wrong though. Maybe you should tell that to the state of Utah? This is the URL style they need to not give me a 500
[03:49:02] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 250 seconds)
[03:49:12] <ljharb> twiclo: then you're not doing modern web dev, because npm is required for that.
[03:49:29] <pavonia> Err wait, I was confused, it's not wrong
[03:49:32] <ljharb> twiclo: you can use npm libraries in the browser regardless of what your backend is, btw.
[03:49:48] <twiclo> ljharb npm is required for what?
[03:50:06] <twiclo> It's required for that library but I can encode this without that library
[03:50:09] <ljharb> twiclo: for modern web dev. using modules, and a bundler, and stuff off of npm.
[03:50:24] <ljharb> twiclo: no, i'm saying you can't do modern web dev without "npm libraries"
[03:50:33] <twiclo> I am using some modules but it's by no means required for "modern web dev
[03:50:40] <ljharb> it certainly is.
[03:50:53] <twiclo> That's really just your opinion. I have a whole web app that doesn't have any npm libraries
[03:50:55] <ljharb> as for your jsfiddle, URLSearchParams is insufficient for most use cases
[03:51:16] <ljharb> twiclo: it's a fact of the industry, not sure what to tell you. just because you can build a web app without npm packages doesn't mean it's any good.
[03:52:04] <twiclo> How is URLSearchParams insufficient?
[03:52:12] <ljharb> anyways, if the webserver you're talking to - like the state of Utah - doesn't handle the basic format that's all that URL and URLSearchParams supports, you can either use a library, or you can painstakingly reconstruct the code in a library
[03:52:20] <ljharb> twiclo: it's low-level. it's built for very basic use cases.
[03:52:22] <pavonia> To be honest, I don't understand the issue
[03:52:35] <twiclo> That's really cool that you think that though. I'm not interested in bringing down a whole library for what can be accomplished with one line of string manipulation in vaniallaJS
[03:52:36] <pavonia> The result of .href seems correct to me
[03:52:39] <ljharb> twiclo: and if the encoding a webserver understands deviates from that, then you can't use USP alone.
[03:52:54] <ljharb> twiclo: so far you haven't accomplished it even with 10 lines
[03:53:04] <twiclo> pavonia let me show you two strings side by side and you'll see. .href doesn't properly encode the ampersands
[03:53:05] <ljharb> twiclo: good luck getting your one-liner, i guess
[03:53:29] <twiclo> https://p.twil.cx/nuk.apache
[03:55:46] *** Joins: goddard (~goddard@user/goddard)
[03:56:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[03:58:57] *** Quits: banana__ (~banana_@2603-6000-b500-9ce3-d8fe-33e9-44ac-655d.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:00:44] *** Joins: k0nichiwa (~enkidu@wsip-70-167-141-182.ga.at.cox.net)
[04:01:29] <ljharb> k0nichiwa: you need to auth with nickserv for non-ops to see what you say. see the last link in the topic.
[04:01:41] <ljharb> k0nichiwa: but yes, i assure you it works :-) happy to talk more once you're authed
[04:03:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:05:41] <pavonia> twiclo: Your "where" parameter is different from the original, where it's "1=1", not just "1"
[04:05:41] *** Joins: trevors (~trevors@user/trevors)
[04:05:56] *** Quits: Jaran (~mail@user/jaran) (Ping timeout: 250 seconds)
[04:07:47] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[04:08:33] <pavonia> Not sure why your "geometry" is also different, I get something else
[04:09:02] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[04:10:36] *** Quits: jw_dungeon (~quassel@2601:44:4380:4a10:f36d:42d5:7cfb:b8af) (Remote host closed the connection)
[04:11:03] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 256 seconds)
[04:11:31] *** Joins: Jaran (~mail@p5b2c5993.dip0.t-ipconnect.de)
[04:11:31] *** Quits: Jaran (~mail@p5b2c5993.dip0.t-ipconnect.de) (Changing host)
[04:11:31] *** Joins: Jaran (~mail@user/jaran)
[04:11:51] *** Joins: jwdungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34)
[04:11:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:13:58] *** Joins: nomic (~nomic@185.192.69.3)
[04:15:01] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[04:15:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[04:15:46] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[04:16:05] *** Quits: Jaran (~mail@user/jaran) (Ping timeout: 268 seconds)
[04:16:57] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[04:17:14] *** Joins: Jaran (~mail@p5b2c538c.dip0.t-ipconnect.de)
[04:17:14] *** Quits: Jaran (~mail@p5b2c538c.dip0.t-ipconnect.de) (Changing host)
[04:17:14] *** Joins: Jaran (~mail@user/jaran)
[04:23:06] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:26:51] *** Joins: onosendi (~onosendi@user/onosendi)
[04:27:20] <ljharb> k0nichiwa: here, on this network, is where you want to be.
[04:28:11] *** Joins: sudomann (~sudomann@98.219.211.182)
[04:28:48] *** Parts: k0nichiwa (~enkidu@wsip-70-167-141-182.ga.at.cox.net) ()
[04:29:17] *** Joins: crashrep (~crashrep@user/crashrep)
[04:30:10] <pavonia> Apparently not :3
[04:32:44] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[04:33:07] *** Joins: bobdobbs (~user@118.148.82.148)
[04:33:58] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[04:36:22] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[04:37:20] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[04:38:12] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[04:39:31] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[04:40:28] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[04:42:44] *** Joins: junebug (~junebug@2600:1700:3db0:2540:cc4d:865d:c875:a5d1)
[04:43:55] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:45:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:45:20] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[04:45:32] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Read error: Connection reset by peer)
[04:45:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:45:45] *** Quits: junebug (~junebug@2600:1700:3db0:2540:cc4d:865d:c875:a5d1) (Client Quit)
[04:45:58] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[04:46:17] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:46:44] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[04:47:03] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[04:47:27] *** Quits: fury_ (~fury@znc.codexterous.com) (Quit: bye)
[04:47:32] *** Quits: AciD (~fu@user/acid/x-5205451) (Ping timeout: 268 seconds)
[04:47:42] *** Joins: fury_ (~fury@znc.codexterous.com)
[04:47:43] *** Quits: ninjabanjo_ (~ninjabanj@107.150.45.163) (Quit: ZNC - https://znc.in)
[04:47:55] *** Quits: Byteflux (~byte@byteflux.net) (Remote host closed the connection)
[04:47:57] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.30) (Quit: %bye mirc%)
[04:48:03] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[04:48:14] *** Joins: Byteflux (~byte@byteflux.net)
[04:48:16] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[04:48:19] *** Joins: bobdobbs` (~user@118.148.82.148)
[04:48:30] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[04:48:40] *** Joins: keypushe- (keypusher@user/keypusher)
[04:48:45] *** Quits: keypusher (keypusher@user/keypusher) (Quit: bye)
[04:48:47] *** Quits: Fossil (~Fossil@95.85.23.165) (Quit: Bye)
[04:48:53] *** Joins: zebrag (~chris@user/zebrag)
[04:49:00] *** Joins: Fossil (~Fossil@95.85.23.165)
[04:50:00] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 268 seconds)
[04:50:23] *** Joins: AciD (~fu@user/acid/x-5205451)
[04:51:01] *** Joins: ferdna (~ferdna@user/ferdna)
[04:51:14] *** Quits: teear (~teear@cbharraste.eu) (Ping timeout: 268 seconds)
[04:51:33] *** Joins: teear (~teear@cbharraste.eu)
[04:51:36] *** keypushe- is now known as keypusher
[04:52:41] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[04:53:02] *** Joins: goddard (~goddard@user/goddard)
[04:53:05] *** Quits: bobdobbs (~user@118.148.82.148) (Ping timeout: 268 seconds)
[04:53:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:53:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:53:37] *** Joins: wroathe (~wroathe@user/wroathe)
[04:53:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:56:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:58:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:00:00] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:00:13] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:89a7:25cc:df2a:3b33) (Read error: Connection reset by peer)
[05:02:53] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[05:03:50] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:04:35] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:07:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:11:17] *** Quits: z1haze (~z1haze@user/z1haze) (Quit: Leaving)
[05:11:24] *** Joins: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu)
[05:11:37] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[05:11:53] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[05:13:03] *** Joins: pmercado (~pmercado@186.11.41.95)
[05:14:47] *** Joins: vysn (~vysn@user/vysn)
[05:21:12] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[05:21:45] *** Quits: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu) (Quit: Client closed)
[05:22:32] *** Joins: crashrep (~crashrep@user/crashrep)
[05:25:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4bc:bc38:6fcd:3dae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:26:23] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:26:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:30:57] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[05:33:11] *** Quits: thiras (~thiras@user/thiras) (Quit: Leaving)
[05:36:11] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[05:38:13] *** Joins: mihael (~mihael@180.190.193.117)
[05:38:38] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[05:52:51] *** Quits: stagas (~stagas@2a02:587:c41d:f5c1:eed4:e52d:fac0:a0e7) (Ping timeout: 245 seconds)
[05:53:05] *** Joins: sam_1 (~sam_1@87.51.251.118)
[05:53:20] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[05:53:39] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[05:54:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:54:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:57:29] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[05:57:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:58:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[05:58:50] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:01:30] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[06:04:09] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c4a:c74a:4ba6:aa08)
[06:04:36] *** Quits: bobdobbs` (~user@118.148.82.148) (Ping timeout: 256 seconds)
[06:04:59] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:08:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:10:03] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[06:11:24] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 268 seconds)
[06:15:43] *** Quits: mtm49 (~mtm49@177.137.113.71) (Ping timeout: 256 seconds)
[06:15:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:15:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:15:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:32] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[06:20:38] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[06:23:37] *** Quits: Tabmow (~tabmow@user/tabmow) (Quit: ZNC 1.8.2 - https://znc.in)
[06:28:30] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[06:29:43] *** Joins: Tabmow (~tabmow@user/tabmow)
[06:36:08] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr)
[06:39:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:44:11] *** Joins: Rockwood (~Rocky@user/rocky)
[06:45:00] <Rockwood> o/
[06:45:14] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[06:45:44] *** Joins: Stinger (~Stinger@14-203-0-22.tpgi.com.au)
[06:48:43] <Stinger> anyone know why preventDefault (in pointerdown) would stop my handler adding a listener for mousemove?
[06:49:41] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:51:45] <theskillwithin> !fiddle
[06:51:45] <jellobot> theskillwithin, Please create a running example of your code (a screenshot is not acceptable). For browsers: jsfiddle.net, codesandbox.io, stackblitz.com, codepen.io, jsbin.com  For node: runkit.com, gist.github.com. See also !mcve and !paste
[06:52:48] *** Joins: fef (~thedawn@user/thedawn)
[06:53:01] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[06:53:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:54:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:54:28] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[06:54:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:55:22] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:56:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c4a:c74a:4ba6:aa08) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:58:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[06:59:09] <Rockwood> i noticed many don't like stackblitz
[07:00:00] <theskillwithin> Stinger https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
[07:01:20] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[07:02:22] <Stinger> oh that was at me
[07:08:18] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[07:09:33] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[07:10:36] *** Quits: z_lehinsun (~lehinsun@188.113.178.220) (Quit: Leaving)
[07:10:48] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:12:08] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:31] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:13:55] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:14:03] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:15:38] <Stinger> https://jsfiddle.net/es89oknq/
[07:16:04] <Stinger> alright uncomment the preventDefault line and it no longer works
[07:16:20] <Stinger> probably the critical peice is that I'm using setPointerCapture
[07:17:26] <Stinger> so my new question is why does preventDefault with setPointerCapture (inside a pointerdown) prevent me from adding a "mousemove" listener
[07:22:09] <theskillwithin> because preventDefault is preventing the event to bubble up probably
[07:22:22] <theskillwithin> why do you need preventDefault, seems to work without it
[07:22:47] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[07:22:57] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[07:24:10] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[07:25:48] <Stinger> my actual case uses middle mouse which can invoke a pan of the whole page
[07:26:56] <Stinger> preventDefault shouldnt prevent bubble up according to the docs and I can't work out why it should affect the (synchronous?) addition of my listener
[07:27:41] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[07:28:06] <Rockwood> const currentTime = new Date();
[07:28:06] <Rockwood> const timeInterval = currentTime.getUTCSeconds() + 20;
[07:28:16] <theskillwithin> document.body.onmousedown = function(e) { if (e.button === 1) return false; }
[07:28:31] <Rockwood> https://dpaste.com/6LCD63D68#line-19
[07:28:32] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[07:28:37] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:28:48] <Rockwood> i am confuse where i can do this stuff in the function
[07:29:28] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[07:30:22] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[07:30:28] <theskillwithin> Stinger try doing what I just pasted instead, does that fix the middle click?
[07:30:38] <Rockwood> what is the best way for timeInterval?
[07:30:39] <Stinger> ok now this is interesting, if I add the preventDefault and remove the setPointerCapture, then the move event only gets added when I click on the div, move the mouse out of the div and release
[07:31:26] <theskillwithin> https://jsfiddle.net/theskillwithin/vs8wxmjg/
[07:32:12] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Quit: Leaving.)
[07:32:32] <Rockwood> https://upmostly.com/tutorials/setinterval-in-react-components-using-hooks#:~:text=setInterval%20is%20a%20method%20that,()%20%3D%3E%20%7B%20console.
[07:32:39] <Rockwood> is not good way?
[07:33:37] <Stinger> theskillwithin : this might work, but it seems like a bit of a kludge - preventDefault seems like it should be the right way to do this
[07:33:48] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[07:34:25] <theskillwithin> Rockwood ya that article looks good,  the only difference is I would use setTimeout and clearTimeout first instead of setInterval and clearInterval
[07:34:34] <theskillwithin> !setInterval
[07:34:35] <Stinger> but maybe I am spoiled using javascript on my fixed environment and havent had to deal with 20 years of browser variations
[07:34:37] *** Joins: duds- (~duds-@146.70.31.116)
[07:35:43] <theskillwithin> !timeout
[07:35:43] <jellobot> theskillwithin, Use setTimeout for guaranteed delay (callbacks will be delayed at least x ms from the last execution). use setInterval for guaranteed frequency (callbacks will be called at least every x ms, regardless of previous executions).
[07:36:14] <theskillwithin> !no setInterval
[07:36:31] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:36:32] <theskillwithin> !no setinterval
[07:36:32] <jellobot> theskillwithin, Avoid setInterval; use setTimeout instead. https://web.archive.org/web/20160602165800/https://zetafleet.com/blog/2010/04/why-i-consider-setinterval-to-be-harmful.html (requestAnimationFrame may be another alternative, see !raf)
[07:37:06] *** Quits: mihael (~mihael@180.190.193.117) (Quit: Client closed)
[07:37:59] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:38:05] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:38:46] <theskillwithin> Rockwood altho with setTimeout calling itself you'd have to utalize a ref probably
[07:39:00] <Rockwood> ref hows?
[07:39:08] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:39:20] <Rockwood> ref way is not clear to me
[07:42:04] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[07:43:30] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:45:32] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:47:55] <Rockwood>     const timerGap = useRef(new Date.getUTCSeconds() + 20); is looks correct?
[07:48:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:48:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[07:49:20] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:49:43] *** Joins: wbrawner (~wbrawner@c-67-190-106-99.hsd1.co.comcast.net)
[07:50:11] <Rockwood> oops confusing
[07:50:20] <Rockwood> ref confusing me now
[07:51:09] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:51:17] <theskillwithin> Rockwood https://codesandbox.io/s/useref-cancelable-interval-uljky?file=/src/App.js:945-974
[07:51:45] <Stinger> thats really weird - seems like preventDefault delays the addition of the mousemove handler until after the pointer is released
[07:51:47] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[07:53:36] <silly> stinger it sounds more like onclick vs mousedown vs mouseup, care to make an example on jsfiddle?
[07:53:49] <Stinger> ehheh
[07:53:54] <Rockwood> theskillwithin, it is using setInterval
[07:53:58] <silly> i seriously dboubt that preventDefault function could interfere in such a way
[07:54:07] <Stinger> https://jsfiddle.net/es89oknq/1/
[07:54:08] <Rockwood> should exchange with timeout?
[07:54:17] *** Joins: sam_1 (~sam_1@87.51.251.118)
[07:54:55] <Stinger> silly: click the mouse on the red div - drag outside and release and then mouseover the div again
[07:55:04] <silly> k... i didn't even now of pointerdown/pointerup
[07:55:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:55:31] *** Joins: src_ (~src@user/src)
[07:55:51] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:56:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:56:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:56:26] *** Joins: wroathe (~wroathe@user/wroathe)
[07:57:30] <silly> wow, commenting ev.preventDefault() really helps
[07:57:46] <silly> i should read up on pointer events
[07:58:21] <Stinger> I haven't found anything that mentions this yet
[07:58:51] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[07:59:02] *** Joins: D4mned (~D1mned@212.101.253.15)
[07:59:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:59:17] *** Joins: banana__ (~banana_@2603-6000-b500-9ce3-2154-d6a1-fc8d-c123.res6.spectrum.com)
[07:59:56] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 268 seconds)
[07:59:59] <Rockwood> !setInterval
[08:00:00] <Stinger> interestingly now I've tried with mousedown mouseup and it seems to work
[08:00:24] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[08:00:39] *** Joins: fef (~thedawn@user/thedawn)
[08:01:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:01:59] <Stinger> ok so with mousedown mouseup and setCapture it works fine
[08:03:12] <Stinger> maybe I need to be using pointermove
[08:03:14] <silly> i should also do some experiments with touch sensitive things, i.e. try a website on a tablet or so
[08:03:30] <Rockwood> anyway time to work now
[08:03:33] <Rockwood> cya thanks
[08:03:37] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:04:27] <Stinger> silly: yeah I want to look into some mobile webdev
[08:06:00] <Stinger> I bet this is some weird edge case browsers have implemented to allow touch actions and mouse actions to occur near simultaneously
[08:06:07] <Stinger> or in parallel
[08:06:47] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:07:48] <silly> i'm all out of ideas
[08:07:54] <Stinger> yep that fixed it
[08:08:03] <Stinger> I use pointermove instead of mousemove
[08:08:06] <Stinger> and it all works
[08:08:53] <Stinger> seems preventDefault delays the addition of a mousemove eventlistener when added from a pointerdown event
[08:09:11] <sheetjs> yay for grammar problems
[08:09:12] <silly> wow
[08:09:41] <Stinger> which seems bizzare at first but I get the feeling is required for dual mouse/touchscreen systems maybe somehow
[08:10:02] <sheetjs> haha silly spent an unhealthy amount of time trying to diagnose an issue that boiled down to an iOS 11 javascript misparse
[08:10:13] <Stinger> probably becuase preventdefault in pointerdown might prevent a mousedown event
[08:10:54] <silly> iWhat iWhen and iWhat
[08:11:13] <silly> iDon't even have iAnything
[08:11:48] <sheetjs> tl;dr for some reason, iOS 11 safari was confused by /* foo, */ /* bar, baz */
[08:12:03] <silly> more questions
[08:12:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:13:04] *** Quits: Relms-Wah (~relms@user/relms) (Quit: UwU)
[08:13:37] *** Joins: Relms-Wah (~relms@user/relms)
[08:14:21] <Stinger> aaaah you know what it is I think
[08:14:32] <Stinger> no wait it cant be
[08:19:41] <systemfault> AHHHHHHHHHHHH
[08:20:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:21:05] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:24:05] * silly learning useRef
[08:24:28] <silly> "The only difference between useRef() and creating a {current: ...} object yourself is that useRef will give you the same ref object on every render."
[08:24:46] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[08:25:52] <silly> theskillwithin, from the example you gave, it seems to me that they are throwing away the only benefit from useRef in line 40
[08:26:00] *** Joins: sam_1 (~sam_1@87.51.251.118)
[08:27:20] <silly> theskillwithin, from the example you gave, it seems to me that in line 41 they are throwing away the only benefit they got from using useRef
[08:27:49] * silly learning english
[08:28:22] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Quit: Lost terminal)
[08:28:31] *** Joins: nomic (~nomic@185.192.69.3)
[08:28:36] * silly switching to job application
[08:28:52] <silly> oh my thought are jumping around like a little monkey
[08:29:28] <KevinX> line 39 is the bug
[08:29:30] <KevinX> return () => clearInterval(interval.current);
[08:29:57] <silly> oh, the clean up function
[08:30:08] <KevinX> But yeah no sense in useRef anyway
[08:30:10] <silly> o/c
[08:30:11] <theskillwithin> silly yeah I was concerned to be honest that it was a confusing example,  it was one I found not made
[08:30:53] <silly> very interesting though
[08:31:02] <theskillwithin> if the original person asking the question had made their own codesandbox, I probably would have helped at lot more
[08:31:36] <theskillwithin> otherwise im mostly doing just google-fu for people while I watch tv
[08:31:36] *** Quits: realies (~realies@user/realies) (Quit: ~)
[08:32:00] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 268 seconds)
[08:33:36] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[08:33:46] *** Joins: src (~src@user/src)
[08:34:11] <theskillwithin> KevinX if it was a setTimeout,  that would have to be inside a function that calls itself.  so then u'd need a ref.  but not for setInterval
[08:34:20] *** Joins: jazzy (~jaziz@user/jaziz)
[08:35:05] *** Quits: src (~src@user/src) (Client Quit)
[08:35:51] <theskillwithin> https://jsfiddle.net/theskillwithin/nbwcd194/
[08:39:42] <theskillwithin> well acctually you prob need a ref either way, if you have a cancel/reset function for the setInterval/setTimeout
[08:40:38] *** Joins: realies (~realies@user/realies)
[08:42:30] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:43:27] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:47:16] <hax> is there something wrong with this npm script? When I do 'yarn prodrun' it just sits there and doesn't actually start.
[08:47:18] <hax> "prodrun": "NODE_ENV=production node server/index.js",
[08:47:34] <hax> doing 'node server/index.js' works as expected
[08:48:42] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:49:15] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:51:23] <sheetjs> hax: don't people typically use cross-env for that
[08:51:34] <silly> hax i can see nothing wrong, have tried debugging what happens inside?
[08:51:42] <sheetjs> https://www.npmjs.com/package/cross-env
[08:51:54] <silly> isn't cross-env for cross system?
[08:52:20] <hax> it doesn't do anything to debug. just prints out yarn and its version, then the command itself, and the cursor waits on the next line. yeah there's no windows or osx devs
[08:52:32] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:52:43] <sheetjs> cross-env was designed to normalize all of the nonsense, you could try wrapping in env for the same effect
[08:52:59] <sheetjs> hax does "env NODE_ENV=production node server/index.js" work?
[08:53:28] <sheetjs> if execution is not passed through a shell, the first argument will be parsed as a command
[08:54:21] <hax> nope. does the same thing. just sits there
[08:54:41] <sheetjs> put a console.log in your script, preferably at the top
[08:54:52] <sheetjs> and log process.env.NODE_ENV to see what's going on
[08:55:08] <sheetjs> if no log shows up, you can also write to a temp file just to see if the process is being run
[08:55:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:55:55] <hax> it's in package.json...
[08:56:05] <sheetjs> edit server/index.js
[08:56:16] <sheetjs> and put a console.log("hello!") at the top, after a shebang line if you have one
[08:56:21] <sheetjs> that way you know its being run
[08:56:23] <hax> interestingly, 'env' on its own prints out a whole mess of stuff
[08:56:39] <sheetjs> `env` dumps the environment variables (standard posix stuff)
[08:56:51] <hax> it's not running. doing 'node server/index.js' starts fine
[08:57:01] <hax> I'll try console.log tho
[08:57:27] <sheetjs> (by default, node won't print anything)
[08:58:12] <hax> ooh shazam...
[08:58:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[08:58:18] <hax> I understand what happened now
[08:58:37] <hax> thanks a lot sheetjs! I hit the wrong port, and mistakenly expected output from node
[08:59:08] <sheetjs> faced the reverse problem recently
[08:59:14] <gde33> is there a way to gurantee an url always serves the same html document?
[08:59:26] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[08:59:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[08:59:59] <sheetjs> at some point, node started printing out the version number on errors
[09:00:09] <gde33> data uri, archive.org, ....?
[09:01:04] <gde33> force download?
[09:01:16] <gde33> ipfs?
[09:01:33] <silly> i guess a service worker or if you control the backend only
[09:01:48] <hax> hah! I am using express, react for /admin/ and eleventy for some static pages, and I thought chaining together the builds with && wasn't working because of some eleventy issue.
[09:02:06] <hax> like not returning 0 or something
[09:02:16] <Maxdamantus> Who guarantees that the service worker is always the same and doesn't get reinstalled?
[09:06:27] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:06:30] <MootPoot> for a html form, what makes it "unbreakable"
[09:06:40] <MootPoot> I know the usual things about input sanitization and stuff
[09:06:47] <MootPoot> but is there anything else I need to care about?
[09:07:47] <Stinger> all the exploits they haven't discovered yet
[09:08:26] <cis> MootPoot: depends what you mean by unbreakable
[09:08:53] <MootPoot> TLDR : code test for a job "Build a form that sends to a API and make it unbreakable"
[09:09:12] <MootPoot> I dont know exactly what they mean by unbreakable .... I presume its the normal stuff
[09:10:35] <cis> ah, they want you to interpret then... try to make it unbreakable in several ways
[09:10:52] <MootPoot> several ways?
[09:11:02] <MootPoot> all I know is control the inputs and validate
[09:11:16] <MootPoot> and sanitize
[09:11:53] <cis> unbreakable as in you can't send the API bad data - sanitized on both front and back-end, unbreakable in that you can't put the form into an invalid state (or you can't submit in an invalid state), unbreakable in that it handles copy/pasting weird text well, etc.
[09:12:26] <MootPoot> well, they just want me to do the front form so I only need to care about that
[09:12:39] <MootPoot> I was thinking of just using jquery and its default form tools
[09:13:14] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[09:13:53] <theskillwithin> https://codesandbox.io/s/react-form-example-gm9o6
[09:13:59] <cis> does the company use jquery?
[09:14:13] <cis> if you know what their stack is like, you should probably use it
[09:14:29] <theskillwithin> I would avoid jquery,  pure JS is easy these days
[09:15:20] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[09:15:24] <cis> ^
[09:16:19] <ljharb> jquery's still pretty useful
[09:16:25] <ljharb> but i'd also use react.
[09:16:44] <leduyquang753> jQuery is more like legacy stuff now right...
[09:16:47] <cis> also, unbreakable from a user's perspective - if the api call fails, the user should be informed that something went wrong... not just that the button was clicked and nothing happened
[09:17:00] <cis> unbreakable in that the user can't spam multiple requests, etc.
[09:18:09] <theskillwithin> ya, and also really the part most likely to break is the backend api
[09:18:28] <theskillwithin> well im a frontend so im biased there
[09:18:39] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:19:15] *** Joins: ekathva (~ekathva@2001:999:51:be01:cc59:a999:376f:a526)
[09:20:22] <theskillwithin> nothing is unbreakable
[09:22:17] <theskillwithin> in billions of years the sun will explode and break the entire earth
[09:23:57] <MootPoot> cis: not too sure about their stack...I'd have to check
[09:23:59] <MootPoot> sec
[09:24:59] <MootPoot> seems like its JS, PHP and react
[09:26:02] <theskillwithin> MootPoot well I gave an example of a form in react,  maybe can build off of that example
[09:26:45] <MootPoot> sure, just waiting on food to be done and munch - I'll get to it
[09:26:50] <MootPoot> need to refresh my react skills anyways
[09:29:35] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:30:08] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[09:30:18] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[09:30:51] <cis> theskillwithin: the eventual death of the sun is a good point to leave in as a comment
[09:31:46] <cis> wontfix
[09:32:37] <dave0> i think i'm pretty safe in saying that none of us will see the sun die
[09:33:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:34:28] <theskillwithin> I guess elon musk is trying to get us to mars,  so elon is removing the wontfix
[09:35:04] <cis> yes, I hope his workaround is viable
[09:35:11] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[09:35:15] <theskillwithin> they should make a cologne called elon musk
[09:35:41] <cis> elán musk
[09:37:36] <ljharb> ok, lol
[09:38:37] *** Quits: banana__ (~banana_@2603-6000-b500-9ce3-2154-d6a1-fc8d-c123.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:41:18] *** Relms-Wah is now known as happiness
[09:42:13] *** happiness is now known as sadness
[09:42:17] *** Quits: MassDebates_ (~MassDebat@2600:1700:1184:4510:98c4:6395:b7f6:11df) (Ping timeout: 240 seconds)
[09:42:37] <buu> theskillwithin: that hurt me, deepwithin
[09:42:43] *** sadness is now known as Happiness
[09:43:03] <buu>  // no timeout set because the universe will eventually die
[09:43:16] <buu>  // this implicitly times out when the universe does
[09:43:46] *** Quits: jazzy (~jaziz@user/jaziz) (Remote host closed the connection)
[09:44:26] <theskillwithin> elán musk - now you can smell like paypal, with a hint of rocket fuel, and new electric car smell, boring tunnel scent, but it only works if people around you have a brain chip implanted
[09:44:35] *** Happiness is now known as Relms-Wah
[09:45:11] <cis> produced entirely with solar energy
[09:45:40] *** Joins: jazzy (~jaziz@user/jaziz)
[09:45:40] *** Quits: \mSg (mSg@user/msg/x-0285936) ()
[09:46:55] <theskillwithin> hehe yep
[09:47:05] *** Quits: pmercado (~pmercado@186.11.41.95) (Ping timeout: 256 seconds)
[09:51:08] <theskillwithin> whats odd to think about is that nuclear has like a .05 death rate,  but solar has .5   so somehow solar energy kills more people than nuclear?
[09:52:26] <theskillwithin> and thats just from people falling off of roofs
[09:52:38] <ljharb> nuclear's very safe
[09:52:44] <ljharb> it just got a bad rep
[09:53:03] <Decker> that's because when it does go bad it goes really bad
[09:53:26] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[09:53:41] <theskillwithin> a lot of things go bad tho with early technology.  the technology is safe now
[09:53:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[09:54:13] *** Joins: mintoyatsu_ (~mint@user/mintoyatsu)
[09:54:42] <theskillwithin> even hydro does more damage than nuclear,  especially environmentally
[09:55:13] <silly> it'll take long until we see caribean beaches on mars
[09:56:09] *** Quits: jochum (~quassel@user/jochum) (Ping timeout: 256 seconds)
[09:56:10] *** Joins: mven9 (~mven@ip68-104-39-54.lv.lv.cox.net)
[09:56:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:56:42] *** Joins: kadobanana (~mud@user/kadoban)
[09:56:43] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 256 seconds)
[09:56:43] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[09:56:43] *** mven9 is now known as mven
[09:57:07] *** Quits: wbrawner (~wbrawner@c-67-190-106-99.hsd1.co.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[09:57:15] *** Joins: jochum (~quassel@user/jochum)
[09:57:17] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Ping timeout: 256 seconds)
[09:57:20] *** mintoyatsu_ is now known as mintoyatsu
[09:57:58] <theskillwithin> silly living on mars probably would be similar to living in hell, at least at first for a long ass time
[09:58:01] *** Joins: wbrawner (~wbrawner@c-67-190-106-99.hsd1.co.comcast.net)
[09:58:26] <cis> people tend to emphasize singular spectacular disasters while adjusting to consistent mundane ones
[09:58:52] <ljharb> cars are much more dangerous
[09:59:04] <silly> i can't even imagine messing up earth so much that it's worse than mars
[09:59:43] <theskillwithin> silly idk if we will mess it up, but doesn't hurt to have a plan b
[10:00:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:00:31] <silly> for an extinction level asteroid event maybe
[10:00:38] <cis> there's only one way to go, and that's out
[10:01:23] <theskillwithin> https://youtu.be/Kb3Tnmwx7Rc
[10:01:24] <skillbot> YouTube Title: 12 Years to Disaster? How Climate Activists Distort the Evidence
[10:03:44] <Maxdamantus> Someone's going to be eaten by a bronterauch.
[10:04:24] <ljharb> bronteroc
[10:04:40] <cis> we don't even know what that is yet
[10:05:07] <ljharb> it's greek or something for "thunder bird"
[10:05:51] <theskillwithin> nice, an opinion formed before could possibly watch 1/4th of the video
[10:08:07] <systemfault> To me it's easy... humans have an influence on climate, that said... if there's money to be done in the climate-change doomsaying business, it will be done.
[10:10:43] <theskillwithin> btw space travel is good for engineering,  and that does include software engineering
[10:10:57] <silly> so is it save now to burn up all wood worldwide and every last drop of oil we can find?
[10:11:17] <cis> nuke the whales
[10:11:17] <ljharb> lol what
[10:11:30] <systemfault> cis: nuke the snails!
[10:11:46] <theskillwithin> well its kind of ironic, we are burning tree's instead of oil which burning oil is way more sustainable than burning tree's
[10:13:27] <silly> if i could, i would make the trip from this video and leave all of you behind https://www.youtube.com/watch?v=b_TkFhj9mgk
[10:13:27] <skillbot> YouTube Title: A Journey to the End of the Universe
[10:14:09] <sheetjs> theskillwithin: what does "sustainable" mean to you?
[10:14:51] <systemfault> Trees as renewable though...
[10:15:09] <sheetjs> the actual fossil fuel cycle is generally millions of years
[10:15:27] <systemfault> Yup.
[10:15:29] <sheetjs> so in no meaningful way is oil use sustainable
[10:15:54] <theskillwithin> when we used oil, we stopped hunting animals for oil,  so animal populations went up not down
[10:16:00] <Maxdamantus> It might be sustainable if people were harvesting it from algae farms, but noone is.
[10:16:31] <Maxdamantus> Hunting animals for oil?
[10:16:50] <theskillwithin> ya like whales and polar bears
[10:16:51] <Maxdamantus> What, like whale oil?
[10:17:47] <Maxdamantus> Animals are not an efficient way of getting oil.
[10:17:56] <sheetjs> also not sustainable
[10:18:07] <theskillwithin> burning biofuel instead of oil is also really bad
[10:18:18] <Maxdamantus> Since they don't normally produce it themselves. You have to feed them oil sources, which ultimately comes from plants/algae.
[10:18:36] <Maxdamantus> and if you're growing plants/algae, you might as well just extract the oil from those.
[10:19:02] <theskillwithin> tree growth has grown massively since we started using oil,  but some people think burning tree's is the solution to the problem even tho it releases even more
[10:19:20] <systemfault> Maxdamantus: If people aren't doing it, it's probably because it's not profitable
[10:19:53] <sheetjs> "profitable" is a tricky statement
[10:20:14] <sheetjs> a huge number of products are subsidized to the extent that it skews the market price
[10:20:27] *** Joins: mihael (~mihael@180.190.193.117)
[10:20:36] <sheetjs> fracking, for example, is profitable at sufficiently high energy prices
[10:20:41] <theskillwithin> like how we subsidize corn, but then want to tax high fructose corn syrup
[10:20:59] <Maxdamantus> If there were no consequences, it might be more profitable for me to do crypto scams than to have a productive job.
[10:21:10] <theskillwithin> btw fracking has caused emissions to lower
[10:21:10] <Maxdamantus> But stealing is bad.
[10:21:15] <sheetjs> s/crypto scams/flipping houses/
[10:21:19] <Maxdamantus> Destroying the environment is also bad.
[10:21:41] <sheetjs> many economists argue that the economy is in a bad spot right now because productive activities are not as profitable as financial activities
[10:21:45] <theskillwithin> a hydro damn destroys the environment way more than oil
[10:21:51] *** Joins: stagas (~stagas@2a02:587:c41d:f5c1:d831:6959:d7f0:e701)
[10:22:05] <theskillwithin> the solution is nuclear
[10:22:08] <systemfault> Maxdamantus: Unrelated... but have you seen this thing? https://github.com/Kindelia/HVM
[10:23:22] *** Joins: banana__ (~banana_@2603-6000-b500-9ce3-2154-d6a1-fc8d-c123.res6.spectrum.com)
[10:23:31] <Maxdamantus> systemfault: no.
[10:24:34] <Maxdamantus> I'm generally sceptical of things that try to make general-purpose things faster through parallelism.
[10:24:37] <systemfault> Maxdamantus: Looks too good to be true...
[10:24:42] <systemfault> Haha, yeah :)
[10:24:44] <Maxdamantus> or at least things that make that claim.
[10:24:58] <Maxdamantus> parallelism makes your thing slower, at least in CPU time.
[10:27:55] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:33:55] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Remote host closed the connection)
[10:37:43] *** Joins: paule32 (~paul@nat-91-137-24-15.net.encoline.de)
[10:37:43] *** Quits: paule32 (~paul@nat-91-137-24-15.net.encoline.de) (Changing host)
[10:37:43] *** Joins: paule32 (~paul@user/paule32)
[10:38:07] <sheetjs> how does esbuild use npm to distribute go binaries?
[10:38:20] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[10:42:07] <ljharb> npm's just a tarball
[10:42:10] *** Quits: Relms-Wah (~relms@user/relms) (Quit: Ur Cute)
[10:42:58] <sheetjs> the `esbuild` npm package has a bunch of optionalDependencies
[10:43:08] <sheetjs> and a script that selects the right one for the given platform
[10:43:47] <sheetjs> wondering if there's a template for that type of thing
[10:43:58] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 268 seconds)
[10:45:59] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:46:07] <ljharb> i doubt it, it's a novel approach
[10:48:37] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:49:23] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:50:08] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[10:56:18] *** Quits: stagas (~stagas@2a02:587:c41d:f5c1:d831:6959:d7f0:e701) (Ping timeout: 268 seconds)
[10:56:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:58:19] *** Joins: stagas (~stagas@2a02:587:c40c:7fd2:bb29:a7be:1027:6ad5)
[11:00:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:01:23] <MootPoot> in react when you have a component that you rendered out using a function, and you pass a props into - whenever you make a change does that mean you then have to call that function again?
[11:01:30] <MootPoot> or does it change on its own
[11:01:40] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:02:59] *** Quits: ekathva (~ekathva@2001:999:51:be01:cc59:a999:376f:a526) (Remote host closed the connection)
[11:03:48] <SpiceMan> react handles re-rendering for you
[11:05:10] <MootPoot> ah, okay
[11:05:50] *** Joins: ekathva (~ekathva@2001:999:51:be01:f430:4edc:7521:6563)
[11:06:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d44d:e9a:465c:99de)
[11:06:47] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[11:06:48] <MootPoot> so its something like
[11:09:00] <MootPoot> 1.) method  where you write JSX is converted to JS and output on the page- instantly run upon the page opening 2.) yyou trigger a setmethod using some other button or event/function 3.) that setmethod takes the original method used to create the component and its new values =  updates the original methodd
[11:09:03] <MootPoot> is that it?
[11:10:56] <buu> It's not so much the method as the jsx inside the method is converted to a series of function calls
[11:11:04] <buu> Which create an object tree
[11:11:06] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:11:25] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:12:01] <buu> React keeps track of all the objects you create using template functions/jsx
[11:12:18] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[11:14:35] <buu> Hm
[11:14:40] <buu> Maybe it does have to rerun the render function
[11:15:38] <SpiceMan> afaik, it ALWAYS runs the render function and does a diff between the resulting element and the one it has on it's internal tree. if there is a difference, it replaces the one in the actual DOM
[11:15:42] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[11:15:42] *** Quits: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[11:15:43] <SpiceMan> but don't quote me on that
[11:16:02] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[11:16:26] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:16:43] <MootPoot> dude on YT seems to agree with you SpiceMan
[11:16:59] <buu> SpiceMan: I can't see how else it would work
[11:17:06] <MootPoot> its just annoying getting me head around the idea of a prop
[11:17:12] <MootPoot> hook*
[11:17:21] <buu> MootPoot: Yeah, react is ... unintuitive
[11:17:54] <MootPoot> props seem to just be a container object that you put in, and it has all the values for that object / JSX block / element
[11:18:07] <buu> They're essentially arguments, yeah
[11:18:13] <MootPoot> I dont know why they call it a prop instead of just an argument
[11:18:16] <MootPoot> webdev people
[11:18:18] <MootPoot> I swear
[11:18:27] <buu> MootPoot: To go along with the pretending jsx is html thing
[11:18:30] <MootPoot> like coming up with random new names every 10min
[11:18:45] <buu> MootPoot: elements have properties, not arguments
[11:18:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:19:56] <sheetjs> props are literally translated to properties
[11:20:11] <buu> How does it know when to call render again?
[11:21:05] <silly> stupid blackbox
[11:21:06] <sheetjs> outside of lifecycle events, you can modify the state or a prop
[11:21:09] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[11:21:24] <Maxdamantus> `setState` or `forceUpdate` will trigger a rerender.
[11:21:48] <MootPoot> rerender of that component that you passed in alongside your new props?
[11:21:57] <Maxdamantus> also, a parent rerendering will trigger a `shouldComponentUpdate` which can decide whether a rerender should be done.
[11:22:19] <sheetjs> props don't always trigger an update, hence forceUpdate
[11:22:25] <Maxdamantus> rerender of the target. `setState` and `forceUpdate` are methods on the instance.
[11:22:35] <theskillwithin> also outdated examples since react hooks
[11:22:35] <silly> useState returns a function and react will know when you called it, your component returned a (render) function and react will call it
[11:22:43] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[11:22:59] <sheetjs> but back to the original question, they are called "props" because of how they are translated
[11:23:03] <sheetjs> for example
[11:23:04] <Maxdamantus> props do always trigger an update, unless it's cancelled by `shouldComponentUpdate` returning false.
[11:23:30] <buu> "Thanks to the setState() call, React knows the state has changed, and calls the render() method again to learn what should be on the screen. This time, this.state.date in the render() method will be different, and so the render output will include the updated time. React updates the DOM accordingly.
[11:23:35] <Maxdamantus> But a new props is only provided when the parent renders.
[11:23:53] <sheetjs> <tag foo="bar">body</tag> is translated to React.createElement('tag', {foo: 'bar'}, 'body')
[11:23:58] <theskillwithin> unless its memoized
[11:24:08] *** Quits: mihael (~mihael@180.190.193.117) (Quit: Client closed)
[11:24:31] <Maxdamantus> The name "props" is somewhat arbitrary, but they're not the same thing as "arguments" in JS function calls.
[11:24:34] <silly> https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-different-in-the-new-transform
[11:24:43] <silly> React.createElement is legacy
[11:25:31] <buu> well, legacy for babel
[11:26:27] <silly> i can't deal with simple facts, i usually need to know why and how to learn something
[11:26:38] <Maxdamantus> > The functions inside react/jsx-runtime and react/jsx-dev-runtime must only be used by the compiler transform. If you need to manually create elements in your code, you should keep using React.createElement. It will continue to work and is not going away.
[11:26:54] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:27:21] <silly> legacy not so much then
[11:27:24] <Maxdamantus> Though you shouldn't generally need to use `React.createElement` explicitly.
[11:27:41] <Maxdamantus> I think I've only had to use it once, because `<option/>` has stupid behaviour.
[11:27:48] <silly> did i say stupid black box?
[11:28:08] <buu> hmph
[11:28:09] <theskillwithin> I think I also have only had to use it once,  just one time ever
[11:28:09] <silly> i mean it
[11:28:19] <buu> React just feels so rough and pointy after vue
[11:28:21] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:28:38] <SpiceMan> <buu> How does it know when to call render again?  ->  https://overreacted.io/react-as-a-ui-runtime/
[11:28:58] <theskillwithin> i love react,  vue is chill but I like react
[11:29:55] <Maxdamantus> Actually, my `<option/>` hack doesn't involve `React.createElement`, mainly involves `ReactDOM.createPortal`.
[11:31:33] * silly imagines human pictogram falling into a black hole
[11:32:15] <stagas> react has the most amazing ideas but the worst implementation u could think of for these ideas
[11:34:39] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:34:55] <theskillwithin> stagas need SSR
[11:34:58] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:35:14] <stagas> the one is dom structure as a function, jsx and therefore function call style intellisense for the components, and the other is "useEffect"
[11:35:41] <stagas> but the way they're implemented is always a source of confusion, where or when did this update and why
[11:37:03] <stagas> and react's jsx not being html compatible, meaning i can't copy paste my work on a static page to a function and that Should Work, it has to be converted to match some arbitrary react decisions
[11:37:12] <theskillwithin> so with useEffect,  you are confused where or when it is called?
[11:38:17] *** Quits: banana__ (~banana_@2603-6000-b500-9ce3-2154-d6a1-fc8d-c123.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:38:25] <theskillwithin> most would consider jsx a huge bonus to react,  you disagree?
[11:38:35] <stagas> theskillwithin: yes, now it will always rerun the function for all the tree where setSomething was introduced, i want to only update the consumers
[11:38:43] <Maxdamantus> imo JSX is not that great.
[11:38:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[11:39:06] <stagas> so what's needed is a .get() method that when i read it i know this function updates when that value updates, no confusion
[11:39:13] <Maxdamantus> Components should just be presented as functions that return elements.
[11:39:18] <buu> SpiceMan: Interesting article
[11:39:42] <stagas> theskillwithin: jsx is the best thing, react's jsx is not because it's not html compatible
[11:39:47] <buu> Also I hate jsx
[11:39:51] <buu> just for the record
[11:40:21] <Maxdamantus> so `Foo({ bar: "baz" }, R.div({ className: "qux" }))` instead of `<Foo bar="baz"><div className="qux"/></Foo>`
[11:40:55] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[11:40:57] <theskillwithin> the output of the jsx is html compatible tho?
[11:41:01] <sheetjs> n> process.arch
[11:41:02] <jellobot> (okay) 'x64'
[11:41:13] <Maxdamantus> JSX doesn't output HTML
[11:41:29] <Maxdamantus> JSX just gets translated into JS function calls.
[11:41:40] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:41:48] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:42:04] <Maxdamantus> There's no HTML involved anywhere in React, other than `dangerouslySetInnerHTML` or whatever it's called.
[11:42:45] <theskillwithin> Maxdamantus what do those js function calls do
[11:42:54] <buu> call document.createElement ?
[11:42:55] <Maxdamantus> theskillwithin: they create React "elements"
[11:43:08] <stagas> theskillwithin: in a proper implementation you'd copy paste any html chunk right after: mychunk = () => ...here... and it should work without modifications. That's a better workflow, you start create things statically and gradually introduce function, progressively enhancing the app with js/jsx logic
[11:43:14] <Maxdamantus> They don't call `document.createElement` directly.
[11:44:03] <buu> Oh my god what is useeffect
[11:44:09] <stagas> so it's detached from the reality of things, just wants you to use "create react app" and be locked in from the start
[11:44:13] <Maxdamantus> theskillwithin: `<Foo bar="baz"><div className="qux"/></Foo>` is `_jsx(Foo, { bar: "baz" }, [_jsx("div", { className: "qux" })])`
[11:44:36] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[11:44:37] <theskillwithin> Maxdamantus ok cool,  but what does it somehow end up as?
[11:44:53] <buu> theskillwithin: pdf?
[11:45:02] <buu> ios widgets?
[11:45:42] <Maxdamantus> theskillwithin: the caller of `render` will inspect the React elements and update some things.
[11:46:15] <Maxdamantus> theskillwithin: components like "div" are somewhat special since when they "update some things", that involves DOM manipulation.
[11:46:35] <stagas> buu: it's kind of observables that run when their dependencies are fulfilled or change, extremely useful in web apps because events come from everywhere all the time and you don't need to keep track of any of them
[11:47:26] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[11:47:56] <stagas> buu: so you can update a value from anywhere and not have to explicitly have to call "mySideEffect()", it'll be called automatically when its deps are met. the side effect function can also be the rendering function you're in, so that part of the app will update only
[11:48:01] <theskillwithin> Maxdamantus most apps server render a dom because well not doing so has some srs seo issues
[11:48:56] <buu> I bet most don't
[11:49:05] <buu> Because server rendering react is a giant pain in the ass
[11:49:16] <buu> And most things are terrible
[11:49:17] <buu> qed
[11:49:19] *** Joins: jazzy2 (~jaziz@user/jaziz)
[11:49:19] <stagas> so it's amazingly useful, the only problem is it's implemented backwards. the consumer should be explicit where they want to receive the updates, instead of having the scope being a catch-all
[11:49:23] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[11:50:32] <theskillwithin> buu well yes and no,  you could simply just use gatsby or nextjs.   if you wanted to do it manually ya its kind of a pain i guess
[11:50:34] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[11:50:48] <Maxdamantus> I've only done server-side rendering because our product needs to generate static (archivable) HTML.
[11:50:50] *** Joins: sudomann (~sudomann@98.219.211.182)
[11:51:47] <theskillwithin> back in the day on old project, we had php backend manually do SSR for react
[11:52:14] *** Joins: stenno (~stenno@user/stenno)
[11:52:33] <Maxdamantus> and in that case it basically just involves running all the frontend code in a JS sandbox (within JVM), and uses some React provider to make various UI components render slightly differently in the static mode.
[11:53:06] *** jazzy2 is now known as jazzy
[11:53:08] <MootPoot> everything I've learned from this conversation is - react is dumb
[11:53:40] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[11:55:06] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:55:30] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[11:57:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:59:17] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[11:59:32] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:59:41] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 256 seconds)
[12:01:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[12:01:32] *** Joins: stenno (~stenno@user/stenno)
[12:08:48] *** Joins: bobdobbs (~user@118.148.102.252)
[12:10:07] <bobdobbs> Hi all. I'm working through a React tutorial. It has this snippet of code: http://pastie.org/p/1EcM1gg4gZMQqq1Xv7PDO0
[12:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:10:50] <bobdobbs> Now, I can read it. And my build tooling can parse it. But I haven't seen anythng quiet like it in js before
[12:10:53] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:11:43] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[12:11:44] <buu> which part?
[12:11:49] <bobdobbs> Like, line 6 breaks suddenly and then the conditions start. I gather that the result of the conditionals are assigned to 'greeting'
[12:11:57] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:11:58] <theskillwithin> https://youtu.be/SAIdyBFHfVU
[12:11:59] <skillbot> YouTube Title: The introduction to React you've been missing - Kent C. Dodds
[12:12:09] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 268 seconds)
[12:12:21] <buu> bobdobbs: It is badly written-- adding the semicolons would make it clearer
[12:13:02] <buu> bobdobbs: but it's just: let greetings; if(x) { greetings = 42; } else { greetings = 52; } kinda thing
[12:13:08] <bobdobbs> buu: I'm glad you said that. When I re-wrote it in my test environment I added semicolons to make it more readable
[12:13:18] <buu> We like semicolons around here
[12:13:27] * bobdobbs high-fives buu
[12:14:10] <bobdobbs> Where can I read about this style of assignment that is happening in that snippet?
[12:15:06] <buu> bobdobbs: It's pretty basic javascript, I think you're overthinking it
[12:15:32] <buu> I mean it's literally an if statement and an assignment with a functioncall on the right side
[12:15:52] <stagas> bobdobbs: 'let greeting' is short for: 'let greeting = undefined'
[12:16:01] <buu> ;
[12:16:45] <bobdobbs> buu: so... should I think of the block that follets 'let greeting' as an anonymous function?
[12:17:47] <systemfault> bobdobbs: It's normal code... have you forgotten your JS ? :p
[12:18:21] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[12:18:31] <buu> bobdobbs: er, you know how an if statement works right?
[12:18:53] <systemfault> n> let a; if (1 < 10) { a = '1 is less than 10' } else { a = '1 is greater than 10' } a
[12:18:54] <jellobot> (okay) '1 is less than 10'
[12:19:16] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:19:21] <dave0> hi jellobot
[12:19:23] *** Joins: cebor (~cebor@user/cebor)
[12:20:45] <bobdobbs> systemfault: I've been hacking js for ages, but I've never learnt it that deeply. So yeah, it's the first time I've seen a js expression written like that
[12:21:23] <buu> bobdobbs: again, the 'let foo' is completely unrelated to the following line
[12:22:03] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:22:24] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[12:22:43] <buu> bobdobbs: line is completely independent of line 7
[12:22:44] <bobdobbs> buu: ah, ok
[12:23:01] <buu> bobdobbs: it's less clear because it's missing the semicolon
[12:23:08] <bobdobbs> you are right. I am overthinking it.
[12:23:09] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[12:23:21] <bobdobbs> and semicolons are good
[12:23:38] *** Joins: sudomann (~sudomann@98.219.211.182)
[12:23:53] <buu> bobdobbs:  same code https://clbin.com/LHd7H
[12:24:04] <buu> And yes, this is why we yell about semicolons
[12:28:11] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[12:28:12] <theskillwithin> bobdobbs https://codesandbox.io/s/distracted-fermi-f0zdh?file=/src/index.js
[12:30:01] *** Joins: chao (~stenno@user/stenno)
[12:30:30] <theskillwithin> https://codesandbox.io/s/exciting-smoke-hyhhb?file=/src/index.js
[12:31:20] <bobdobbs> huh. I haven't seen codesandbox before
[12:31:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:31:37] <theskillwithin> it is odd, id never write code like that
[12:31:40] <buu> the world is an amazing place
[12:31:42] <theskillwithin> id use jsx
[12:31:54] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[12:32:12] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[12:33:46] <bobdobbs> theskillwithin: I think that this particular tut hasn't gotten to js yet.
[12:34:05] <bobdobbs> https://frontarm.com/courses/react-fundamentals/basics/conditional-rendering/
[12:34:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:34:19] <systemfault> bobdobbs: Be careful, I see it as a red flag (I don't know what tutorial you're using)
[12:34:58] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 268 seconds)
[12:35:33] <bobdobbs> systemfault: I think that maybe they are trying to show some underlying things first?
[12:35:51] <systemfault> bobdobbs: If that's the case, check if it starts covering JSX soon
[12:35:53] <bobdobbs> That's a guess. I don't know React and I'm not even that good with js
[12:36:20] *** Joins: chao (~stenno@user/stenno)
[12:36:23] *** Joins: vysn (~vysn@user/vysn)
[12:37:03] <systemfault> You're too far in the tutorial it seems, it's like if you skipped sections
[12:37:18] <systemfault> From what I can see, JSX is covered pretty early.
[12:37:19] <bobdobbs> systemfault: I probably did.
[12:38:27] <bobdobbs> Yeah, first I started working through the tutorial in the existing official React dcs. I needed a change of flavour - partly cos that tut was getting too hairy for me. I switched to this one, and I might have skipped some stuff
[12:38:52] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[12:39:12] <bobdobbs> yeah - I picked up the nature of JSX and components from the official tut. So I skipped that part of the frontendarmoury tut
[12:40:54] <systemfault> It's fine for a React tutorial to show what JSX desugars to
[12:41:00] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[12:41:11] <bobdobbs> "desugars". yes.
[12:41:19] *** Joins: nomic (~nomic@185.192.69.3)
[12:42:03] <bobdobbs> I've also started looking at the tutorial material in the beta docs.
[12:42:41] <bobdobbs> At first I thought I'd have to relearn everything. But I picked up moving from component class definitions to functions pretty quickly
[12:43:01] <bobdobbs> And it seems like functions definitions for components are a little more flexible
[12:44:42] <systemfault> They're the predominant way to work with React these days... (functions + hooks) but I still believe that class components can still be useful in a few cases.
[12:45:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:45:33] *** Joins: sudomann (~sudomann@98.219.211.182)
[12:46:04] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 268 seconds)
[12:47:32] *** Joins: chao (~stenno@user/stenno)
[12:53:18] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[12:53:48] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[12:57:47] *** Quits: bobdobbs (~user@118.148.102.252) (Ping timeout: 268 seconds)
[12:57:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:59:20] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[13:00:39] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[13:01:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:04:06] *** Joins: programmar (~whatever@118.69.128.37)
[13:04:25] <programmar> does browser's javascript have any api for mqtt connection back to the server ?
[13:11:42] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[13:16:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:18:45] *** Quits: D4mned (~D1mned@212.101.253.15) (Read error: Connection reset by peer)
[13:22:21] *** Joins: lenarhoyt (~lenarhoyt@mail.bfc-net.de)
[13:23:40] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[13:23:48] *** Parts: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) ()
[13:25:28] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: No route to host)
[13:29:02] <chao> n> parseInt(0.000005)
[13:29:03] <jellobot> (okay) 0
[13:29:07] <chao> n> parseInt(0.0000005)
[13:29:08] <jellobot> (okay) 5
[13:29:17] <chao> n> parseInt(0.0000004)
[13:29:17] <jellobot> (okay) 4
[13:30:42] <chao> n> Number.MIN_VALUE
[13:30:42] <jellobot> (okay) 5e-324
[13:31:50] <chao> n> 0.0000004.toString()
[13:31:51] <jellobot> (okay) '4e-7'
[13:31:57] <chao> n> 0.000004.toString()
[13:31:58] <jellobot> (okay) '0.000004'
[13:31:59] <chao> aaaah
[13:32:08] <chao> thats so funny actually
[13:32:52] *** chao is now known as stenno
[13:32:59] *** Joins: revolve (~u0_a227@82-132-237-109.dab.02.net)
[13:34:19] *** Quits: Stinger (~Stinger@14-203-0-22.tpgi.com.au) (Ping timeout: 256 seconds)
[13:34:49] <Maxdamantus> n> 0.000004.toFixed(30);
[13:34:49] <jellobot> (okay) '0.000003999999999999999818992447'
[13:34:59] <Maxdamantus> toString lies.
[13:35:11] <Maxdamantus> n> 0.000004.toFixed(60);
[13:35:12] <jellobot> (okay) '0.000003999999999999999818992447303545034742455754894763231277'
[13:35:16] <stenno> rather, 'dont pass floats to a function which expects a string'
[13:35:37] <stenno> thats why
[13:35:40] <Maxdamantus> n> 0.000004.toFixed(100);
[13:35:41] <jellobot> (okay) '0.0000039999999999999998189924473035450347424557548947632312774658203125000000000000000000000000000000'
[13:35:41] <stenno> n> parseInt(0.0000004)
[13:35:42] <jellobot> (okay) 4
[13:35:53] <stenno> not a precision problem here
[13:35:56] <Maxdamantus> That's the actual value being represented.
[13:36:08] *** Joins: nomic (~nomic@185.192.69.3)
[13:36:25] <pavonia> In what way does toString lie?
[13:37:18] <Maxdamantus> When producing the decimal form, it will round such that it gets the smallest representation that will parse as that value.
[13:37:19] <stenno> i guess '4e-7' is still an approximation
[13:37:27] <stenno> but
[13:37:47] <stenno> yeah its not a precision problem, its a problem of using parseInt incorrectly
[13:37:47] <Maxdamantus> 4e-7 is not representable in binary (without recurrence)
[13:37:59] <Maxdamantus> Right, this is all separate to `parseInt`.
[13:38:09] <stenno> n> [parseInt(0.0000004), parseInt('0.0000004')]
[13:38:10] <jellobot> (okay) [ 4, 0 ]
[13:39:14] *** Joins: dirigible_ (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990)
[13:39:38] <pavonia> Maxdamantus: Can you show an example where you actually get wrong values?
[13:39:56] <stenno> pavonia: it was just demonstrated
[13:40:08] <stenno> n> 0.000004.toString()
[13:40:08] <jellobot> (okay) '0.000004'
[13:40:11] <stenno> n> 0.0000004.toString()
[13:40:12] <jellobot> (okay) '4e-7'
[13:40:15] <stenno> ^ this is wrong
[13:40:21] *** Joins: _sgen (~sgen@2607:fea8:7ce1:c8e0:ec63:8eee:4635:2aa8)
[13:40:33] <pavonia> Why?
[13:40:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:40:37] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:40:40] <pavonia> It's exactly that number
[13:40:52] <Maxdamantus> n> 0.000004 + 0.000001
[13:40:53] <jellobot> (okay) 0.0000049999999999999996
[13:40:55] <Maxdamantus> It's not.
[13:40:57] *** Quits: adas (adas@adas.shelltalk.net) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:41:01] <Maxdamantus> It's just close.
[13:41:02] *** Joins: b-rex_ (van@down.by.the.river.lol)
[13:41:10] <stenno> because the literal 0.0000004 actually represents the number 0.00000039999999
[13:41:10] *** Joins: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c)
[13:41:19] <stenno> (approx.)
[13:41:21] <Maxdamantus> 0.0000039999999999999998189924473035450347424557548947632312774658203125
[13:41:37] *** Quits: cythrawll (sid384410@id-384410.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: b-rex (van@down.by.the.river.lol) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: barkle (kirk@kirk.shelltalk.net) (Ping timeout: 240 seconds)
[13:41:38] *** Joins: Slade_ (uid128877@user/slade)
[13:41:49] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[13:41:51] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[13:41:52] *** Joins: cythrawll (sid384410@id-384410.ilkley.irccloud.com)
[13:41:52] *** Joins: michigan_ (uid507982@id-507982.ilkley.irccloud.com)
[13:41:56] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[13:41:57] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:846c:81c5:480a:6ed5) (Ping timeout: 240 seconds)
[13:41:57] *** michigan_ is now known as michigan
[13:41:57] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (Ping timeout: 240 seconds)
[13:42:01] *** Joins: victor__ (sid208353@id-208353.tinside.irccloud.com)
[13:42:15] <Maxdamantus> Note that the string representation of my addition ("0.0000049999999999999996") is also an approximation of the actual value produced by that addition.
[13:42:17] *** Quits: jwdungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: cyberbanjo (mksybr@tilde.team) (Ping timeout: 240 seconds)
[13:42:18] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[13:42:24] <pavonia> So can you even get a value that is closer to 4e-7?
[13:42:32] <Maxdamantus> n> (0.000004 + 0.000001).toFixed(100);
[13:42:33] <jellobot> (okay) '0.0000049999999999999995619823223158562086609890684485435485839843750000000000000000000000000000000000'
[13:42:37] *** Quits: victor_ (uid208353@id-208353.tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: Slade (uid128877@user/slade) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:297f:fa61:535f:aa91) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: entropy_ (~ent@user/entropy/x-9891564) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: cypha (raj@user/cypha) (Ping timeout: 240 seconds)
[13:42:37] *** Joins: paule32_ (~paul@nat-91-137-24-15.net.encoline.de)
[13:42:37] *** Quits: paule32_ (~paul@nat-91-137-24-15.net.encoline.de) (Changing host)
[13:42:37] *** Joins: paule32_ (~paul@user/paule32)
[13:42:37] *** Slade_ is now known as Slade
[13:42:45] <stenno> it should be the closest approximation, pavonia
[13:43:00] <Maxdamantus> n> 0.0000049999999999999996.toFixed(100) === (0.000004 + 0.000001).toFixed(100);
[13:43:00] <stenno> of course you have seen:
[13:43:00] <jellobot> (okay) true
[13:43:04] *** Joins: jwdungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34)
[13:43:04] <stenno> n> 0.1 + 0.2
[13:43:05] <jellobot> (okay) 0.30000000000000004
[13:43:09] <pavonia> I don't get the problem then :S
[13:43:10] *** Joins: raj_ (raj@2600:3c03::f03c:91ff:feae:498)
[13:43:19] <stenno> ^ this is the closest possible approximation to 0.3
[13:43:26] <Maxdamantus> stenno: it's not.
[13:43:30] <Maxdamantus> n> 0.3
[13:43:30] <jellobot> (okay) 0.3
[13:43:37] <Maxdamantus> That is the closest approximation to 0.3
[13:43:38] <stenno> oh its 0.1
[13:43:43] <Maxdamantus> n> 0.3.toString(100);
[13:43:44] <jellobot> (fail) RangeError: toString() radix argument must be between 2 and 36
[13:43:52] <Maxdamantus> n> 0.3.toFixed(100);
[13:43:52] <jellobot> (okay) '0.2999999999999999888977697537484345957636833190917968750000000000000000000000000000000000000000000000'
[13:44:01] <Maxdamantus> aka "0.3"
[13:44:03] *** Joins: D4mned (~D1mned@212.101.251.246)
[13:44:05] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:117c:703e:db5f:c029)
[13:44:09] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[13:44:26] <Maxdamantus> which as demonstrated is different to 0.1 + 0.2
[13:44:27] <stenno> yeah i mixed it up
[13:44:31] *** Quits: Fossil (~Fossil@95.85.23.165) (Ping timeout: 256 seconds)
[13:44:31] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 256 seconds)
[13:44:39] <stenno> 0.1 is the culprit here
[13:44:48] <Maxdamantus> 0.2 is a culprit too.
[13:44:48] <stenno> n> 0.1.toFixed(100)
[13:44:48] <jellobot> (okay) '0.1000000000000000055511151231257827021181583404541015625000000000000000000000000000000000000000000000'
[13:44:51] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[13:44:53] *** Parts: jwdungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34) ()
[13:44:54] <Maxdamantus> neither is representable in binary.
[13:44:54] *** Joins: b-rex (van@down.by.the.river.lol)
[13:44:55] *** Joins: fury__ (~fury@znc.codexterous.com)
[13:45:05] *** Quits: fury_ (~fury@znc.codexterous.com) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: Jaran (~mail@user/jaran) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: pizdets_ (~pizdets@183.182.111.155) (Ping timeout: 256 seconds)
[13:45:10] *** Joins: jw_dungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34)
[13:45:16] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[13:45:19] *** Joins: pizdets (~pizdets@183.182.111.155)
[13:45:21] <Maxdamantus> 0.25 is representable in binary, or 0.5, or 0.75, or 0.875, etc
[13:45:30] <pavonia> n> (4e-7 - parseFloat('0.0000004')).toFixed(100)
[13:45:31] <jellobot> (okay) '0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
[13:45:34] *** Joins: Jaran (~mail@p5b2c538c.dip0.t-ipconnect.de)
[13:45:34] *** Quits: Jaran (~mail@p5b2c538c.dip0.t-ipconnect.de) (Changing host)
[13:45:34] *** Joins: Jaran (~mail@user/jaran)
[13:45:39] *** Quits: revolve (~u0_a227@82-132-237-109.dab.02.net) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 256 seconds)
[13:45:41] <Maxdamantus> n> [0.25, 0.5, 0.75, 0.875].map(n => n.toFixed(100))
[13:45:42] <jellobot> (okay) [ '0.2500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0.7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0.8750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' ]
[13:46:01] <Maxdamantus> but 0.1, 0.2, 0.3, 0.000004 are not.
[13:46:13] *** Quits: b-rex_ (van@down.by.the.river.lol) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (Ping timeout: 256 seconds)
[13:46:23] *** Joins: revolve (~u0_a227@82-132-237-109.dab.02.net)
[13:46:41] *** Joins: jazzy2 (~jaziz@user/jaziz)
[13:46:41] <stenno> i wonder if the people who came up with IEEE 754 thought at some point 'do we really wanna do it like that'
[13:46:41] <Maxdamantus> because there's no integer solution for `a*b^2 = 0.1`
[13:47:38] *** Joins: pluri (~pluri@user/pluri)
[13:47:56] <Maxdamantus> The behaviour is fine. People just need to learn not to use floating points where a certain precision is required.
[13:48:14] <Maxdamantus> So they should always be treated as approximations.
[13:48:29] <Maxdamantus> unfortunately JS uses them by default.
[13:48:44] <stenno> the only alternative would be a Decimal type
[13:48:50] <stenno> well, one of the alternatives i guess
[13:48:54] <stenno> but the most sensible one
[13:49:04] <Maxdamantus> No, the alternative would be using an integer type by default.
[13:49:07] *** jazzy is now known as Guest819
[13:49:16] *** jazzy2 is now known as jazzy
[13:49:32] <Maxdamantus> Any decimal functionaly belongs in a library, not part of the language/standard library.
[13:49:35] *** Quits: Guest819 (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[13:49:45] <stenno> why do you think so?
[13:50:45] *** Joins: kirk (kirk@kirk.shelltalk.net)
[13:50:56] <stenno> python has decimal in their stdlib
[13:51:06] <Maxdamantus> Because decimal floats have the same issues as binary floats. They just make an extra assumption (that some non-recurring decimal numbers need to be represented).
[13:51:15] <Maxdamantus> Python has a very big stdlib.
[13:51:37] <stenno> well yeah you will have similar problems with stuff like 1/3, 1/7
[13:51:43] <Maxdamantus> in JS it might be okay having it as part of the browser/Node environment, similar to `Uint8Array` etc.
[13:52:40] <since_> n> 9007199254740993.0
[13:52:41] <jellobot> (okay) 9007199254740992
[13:52:57] <Maxdamantus> Oh wait, `Uint8Array` is part of ECMA262 now?
[13:53:29] <stenno> always has been?
[13:54:16] <stenno> ES6 apparently?
[13:54:33] <Maxdamantus> I thought it was just something that happened to exist in browsers, like `atob`.
[13:54:44] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[13:54:59] <stenno> array buffers and data views are so awesome
[13:55:11] *** Joins: cyberbanjo (mksybr@tilde.team)
[13:55:27] <stenno> btw, i assume we will see my initial parseInt thing a few times in the next days as it is a top post on /r/programmerhumor right now
[13:56:19] <silly> dis? https://www.reddit.com/r/ProgrammerHumor/comments/shmec9/we_all_love_javascript/
[13:56:28] <stenno> mhm
[13:56:39] *** Joins: sudomann (~sudomann@98.219.211.182)
[13:57:00] <stenno> i wont be the one putting on my helmet and going into the comments explaining what is happening
[13:57:19] <silly> omg...
[13:57:36] <stenno> and knowing the average audience of /r/programmerhumor they probably wouldn't care or understand anyway
[13:58:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:58:53] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[14:00:06] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:00:37] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[14:01:15] <stenno> took me a few to figure that one out though
[14:02:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[14:04:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:05:19] *** Joins: adas (adas@adas.shelltalk.net)
[14:05:28] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[14:08:31] <stenno> ah top comment explains it
[14:09:00] <stenno> and the replies are not 'ah ok, so OP was using parseInt wrong' but 'js dumb'
[14:09:05] <silly> this? https://dmitripavlutin.com/parseint-mystery-javascript/#2-solving-the-mystery-of-parseint
[14:09:14] *** Parts: michaelis (~michaelis@193.183.209.17) ()
[14:09:32] *** Quits: FightingFalcon (~none@user/fightingfalcon) (Ping timeout: 240 seconds)
[14:09:33] <stenno> i have said in the past that parseInt is a terrible, terrible function
[14:09:45] <silly> n> ''+.0000005
[14:09:46] <jellobot> (okay) '5e-7'
[14:09:58] <stenno> silly: yes, see above
[14:10:05] <stenno> see 40 minutes ago
[14:10:20] <silly> well at least it doesn't start calculating 5-7 and return -2 ¯\_(ツ)_/¯
[14:10:34] <stenno> that'd be eval
[14:10:36] <stenno> lol
[14:10:43] <stenno> n> eval(0.00000004)
[14:10:44] <jellobot> (okay) 4e-8
[14:10:53] <stenno> ok the e
[14:10:54] <stenno> idk
[14:11:08] <stenno> but here you cannot even blame parseInt unfortunately
[14:11:13] <silly> oh, what happened there?
[14:11:48] <leduyquang753> `parseInt` only takes as many valid characters as possible.
[14:12:06] <leduyquang753> C++'s `std::stoi` does the same for some perspective.
[14:12:15] <stenno> indeed
[14:12:20] <stenno> but parseInt is much worse
[14:13:06] *** Joins: FightingFalcon (~none@2a01:4f8:1c17:6cd5::1)
[14:13:08] <stenno> the function needs a clean-up, which wont happen, as this would break the web probably
[14:13:22] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[14:13:26] <stenno> but whenever you think you have to use parseInt, think again
[14:13:43] *** Joins: sudomann (~sudomann@98.219.211.182)
[14:13:54] <stenno> and if you still have to use it afterwards, be very careful
[14:14:03] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:14:47] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[14:15:11] *** Quits: adar (uid1346@user/adar) (Ping timeout: 250 seconds)
[14:15:18] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:15:30] *** Joins: adar (uid1346@user/adar)
[14:15:37] *** Quits: hughrawlinson_ (sid11243@2a03:5180:f:3::2beb) (Ping timeout: 250 seconds)
[14:15:39] *** Joins: han-solo (~hanish@user/han-solo)
[14:15:54] <stenno> n> eval(eval(0.00000004))
[14:15:55] <jellobot> (okay) 4e-8
[14:16:07] <stenno> idk
[14:16:14] *** Joins: hughrawlinson_ (sid11243@id-11243.ilkley.irccloud.com)
[14:16:14] *** Joins: _0x1d3_ (sid43116@id-43116.tinside.irccloud.com)
[14:16:14] *** Joins: mexen_ (uid495612@user/mexen)
[14:16:19] *** Joins: rosseaux_ (~BeRo@228.66.238.89.in-addr.arpa.manitu.net)
[14:16:29] *** Quits: mexen (uid495612@user/mexen) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: thykka (~thykka@2a01:4f8:c0c:e335::1) (Ping timeout: 250 seconds)
[14:16:29] *** mexen_ is now known as mexen
[14:16:29] *** _0x1d3_ is now known as _0x1d3
[14:16:37] *** Joins: arash- (arash@thinks.life.is-a.beauty)
[14:16:46] *** Joins: fef (~thedawn@user/thedawn)
[14:16:55] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: arash (arash@thinks.life.is-a.beauty) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: bodiccea_ (~bodiccea@user/bodiccea) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: rosseaux (~BeRo@2a00:1828:2000:859::2) (Ping timeout: 250 seconds)
[14:17:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:17:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[14:18:10] *** Quits: programmar (~whatever@118.69.128.37) (Ping timeout: 256 seconds)
[14:18:37] *** Joins: thykka (~thykka@2a01:4f8:c0c:e335::1)
[14:18:40] *** Joins: de-facto_ (~de-facto@user/de-facto)
[14:18:59] *** Joins: eXtr3m0_ (~eXtr3m0@p4fd3aba6.dip0.t-ipconnect.de)
[14:19:24] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[14:20:38] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 260 seconds)
[14:20:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:20:49] *** Joins: rosseaux (~BeRo@2a00:1828:2000:859::2)
[14:21:21] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (Ping timeout: 256 seconds)
[14:21:55] *** Quits: rosseaux_ (~BeRo@228.66.238.89.in-addr.arpa.manitu.net) (Ping timeout: 256 seconds)
[14:22:00] *** de-facto_ is now known as de-facto
[14:23:18] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[14:24:11] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[14:24:17] *** Joins: lara99 (~lara99@93-36-163-139.ip61.fastwebnet.it)
[14:24:38] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[14:29:21] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[14:29:39] <lara99> Hi, I found a strange js code on many pages that I have created locally, can you tell me what is it (I pasted it here https://jsfiddle.net/98vLqews/)? Is it a virus? It slows down the loading of my local IIS pages (on localhost), it tries o connect to https://cdnjs.org/v13/3/ but chrome seems to block it... should I worry?
[14:30:24] *** Joins: sudomann (~sudomann@98.219.211.182)
[14:31:14] <stenno> lara99: i would guess its a minified library taken from cdnjs
[14:31:22] <stenno> do you have the exact url?
[14:31:36] <lara99> it is local on my computer
[14:32:18] <stenno> can you give the exact url its trying to connect to?
[14:32:27] <stenno> its minified code from a cdn
[14:32:37] <lara99> https://cdnjs.org/ajax/libs/jquery.colorbox.js
[14:32:37] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[14:32:41] <stenno> well then
[14:32:43] <lara99> can it be this?
[14:32:45] <stenno> yes
[14:32:54] *** Joins: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4)
[14:33:04] <stenno> actually there should probably be a .min.js
[14:33:24] <stenno> CDN are third-party public code hosts
[14:34:14] <stenno> there is nothing to worry about, but you can consider downloading the library and hosting it yourself
[14:34:27] <lara99> ok but where is it called?
[14:34:38] *** Joins: xse_ (~xse@user/xse)
[14:34:41] <lara99> I do not call it
[14:34:41] <stenno> how should i know?
[14:34:50] <stenno> somewhere there is a <script> tag in your page
[14:35:05] <lara99> the fact is tha it happens even on blank pages
[14:35:17] *** Quits: xse (~xse@user/xse) (Ping timeout: 240 seconds)
[14:35:17] *** xse_ is now known as xse
[14:35:35] <lara99> could it be a chrome extension?
[14:36:06] <stenno> dunno if you are supposed to use jquery in your chrome extensions, i doubt it
[14:36:22] <stenno> which extensions do you have?
[14:36:33] <lara99> a lot
[14:36:47] <stenno> well yeah, that might be it then
[14:37:14] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[14:37:26] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:37:26] <lara99> disabling them it disappear
[14:37:30] <stenno> i assume chrome will block that whenever you are on a non-http site
[14:37:52] <stenno> er sorry
[14:37:55] <stenno> non-https site
[14:38:14] <lara99> ok so it is not something dangerous
[14:38:34] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[14:38:34] <stenno> it sounds like a harmless jquery plugin, yes
[14:39:01] <lara99> ok thanks, I am seeing that in incognito modoe it is 10 time faster
[14:39:08] <lara99> the loading
[14:39:21] <stenno> https://www.jacklmoore.com/colorbox/
[14:39:33] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[14:39:38] <stenno> lightbox plugin
[14:40:37] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Ping timeout: 256 seconds)
[14:40:47] *** Joins: Adoi (~Adoi@user/adoi)
[14:41:31] <lara99> ok, these are my extensions https://ibb.co/Vq9VPkY
[14:41:54] <Adoi> hello, if you don't regard it as an awkward question (as some already did elsewhere), I am curious to know how important XML is "today".
[14:42:10] *** Joins: Neoluxi (~Neoluxi@240e:33d:352e:c200:20c2:cc18:60ea:a19e)
[14:42:57] <Alexendoo> lara99: disable them all, then start reenabling them until it gets slow
[14:43:00] <Adoi> the posts on the topic often date back to a few years ago.
[14:43:11] <lara99> Alexendoo: ok
[14:43:19] *** Quits: Neoluxi (~Neoluxi@240e:33d:352e:c200:20c2:cc18:60ea:a19e) (Client Quit)
[14:43:51] <lara99> thank you all
[14:45:42] <silly> Adoi, not enough to receive an answer
[14:46:08] <Alexendoo> Adoi: It's fallen out of fashion for APIs but is still used in other places. e.g. SVG
[14:48:07] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[14:49:43] *** Quits: lara99 (~lara99@93-36-163-139.ip61.fastwebnet.it) (Quit: Client closed)
[14:50:26] *** Joins: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com)
[14:50:28] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:50:36] <silly> omg yes, of course
[14:51:13] <silly> oh and rss is still alive and well
[14:52:37] <Adoi> silly, generally I am interested in knowing if it is still essential and really useful in a way that more general programming languages cant
[14:52:44] *** Quits: eXtr3m0_ (~eXtr3m0@p4fd3aba6.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:53:03] <silly> it's x markup language
[14:53:14] <silly> i wouldn't call it a programming language
[14:53:22] <silly> as it itself does not
[14:54:11] <silly> but in modern... anything, it was replaced with json
[14:54:17] <stenno> also SAML/ActiveDirectory
[14:55:57] *** Quits: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:57:10] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:57:28] <Adoi> yes, so I presume the mentioned fields of application in the older posts are likely relevant today, too
[14:58:44] <Adoi> handling data transfers for large-scale websites/applications, mobile development, publishing..
[14:58:50] *** Joins: Naan (~Naan@user/naan)
[14:58:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[14:58:55] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[14:59:02] <Alexendoo> data transfers is not so true today
[14:59:34] *** Joins: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com)
[15:00:07] <Alexendoo> Android development specifically is full of XML though, that's still true
[15:03:38] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: nicoty (~nicoty@user/nicoty) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: assemblylang[m] (~assemblyl@2001:470:69fc:105::1:7012) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Darvesh[m] (~drvshmatr@2001:470:69fc:105::1:6c1e) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Bridge terminating on SIGTERM)
[15:05:12] <jwpapi> I have a general understanding issue:
[15:05:12] <jwpapi> I’m have coded my application with browserify which creates my client side javascript that runs on page load. However now I want to implement a facebook login, which requires me to implement their library and then make a call to their site to request login status, based on that login status I will receive an access token, which I then need in my application to run a specific task. I’m a bit stuck on how I should implement
[15:05:12] <jwpapi> that.
[15:06:15] <jwpapi> One potential solution is that I set up a new endpoint and make an API call to my application once the response is there. However that does not seem like the correct way.
[15:07:49] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (Ping timeout: 256 seconds)
[15:10:28] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[15:11:58] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[15:13:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[15:14:40] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:14:40] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-43fc-8805-e18a-4a61.res6.spectrum.com) (Remote host closed the connection)
[15:14:55] <stenno> jwpapi: can you do the auth on the server side with something like passport?
[15:15:09] <stenno> also i would have assumed that facebook offers some sort of login widget
[15:15:13] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[15:15:14] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[15:15:14] *** Joins: nicoty (~nicoty@user/nicoty)
[15:15:14] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[15:15:14] *** Joins: kadoban (~kadoban@user/kadoban)
[15:15:14] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[15:15:14] *** Joins: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a)
[15:15:14] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:15:14] *** Joins: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9)
[15:15:15] *** Joins: Deide (~deide@user/deide)
[15:15:15] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[15:15:15] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[15:15:15] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[15:15:15] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[15:15:15] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[15:15:15] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[15:15:15] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[15:15:19] <stenno> jesus christ matrix
[15:15:23] <stenno> fucking up once again
[15:15:24] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[15:15:28] *** Joins: Darvesh[m] (~drvshmatr@2001:470:69fc:105::1:6c1e)
[15:15:41] <jwpapi> stenno: I tried business sdk of Facebook, but that doesn’t seem the same
[15:15:51] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[15:16:05] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[15:16:05] *** Joins: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4)
[15:16:05] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[15:16:05] *** Joins: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec)
[15:16:05] *** Joins: assemblylang[m] (~assemblyl@2001:470:69fc:105::1:7012)
[15:16:18] <jwpapi> that’s basically the script I need to run and I need that access token later https://www.irccloud.com/pastebin/r2Y5COfV/
[15:16:27] <jwpapi> Line 16
[15:17:03] <stenno> where is 'FB' coming from?
[15:17:21] <jwpapi>     <script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js"></script>
[15:17:32] <jwpapi> one possible other option is to just download the file
[15:17:41] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (Remote host closed the connection)
[15:17:41] *** Quits: Darvesh[m] (~drvshmatr@2001:470:69fc:105::1:6c1e) (Remote host closed the connection)
[15:17:42] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Remote host closed the connection)
[15:17:42] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Remote host closed the connection)
[15:17:42] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[15:17:42] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (Read error: Connection reset by peer)
[15:17:42] *** Quits: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec) (Read error: Connection reset by peer)
[15:17:42] *** Quits: nicoty (~nicoty@user/nicoty) (Read error: Connection reset by peer)
[15:17:42] *** Quits: Deide (~deide@user/deide) (Remote host closed the connection)
[15:17:42] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[15:17:42] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (Remote host closed the connection)
[15:17:42] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Read error: Connection reset by peer)
[15:17:42] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Remote host closed the connection)
[15:17:42] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Write error: Connection reset by peer)
[15:17:42] *** Quits: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) (Read error: Connection reset by peer)
[15:17:42] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Read error: Connection reset by peer)
[15:17:42] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Read error: Connection reset by peer)
[15:17:42] <jwpapi> and require in my app, but not sure if that is the right solution either
[15:17:43] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Write error: Connection reset by peer)
[15:17:43] *** Quits: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a) (Write error: Connection reset by peer)
[15:17:43] *** Quits: assemblylang[m] (~assemblyl@2001:470:69fc:105::1:7012) (Read error: Connection reset by peer)
[15:17:43] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Remote host closed the connection)
[15:17:43] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (Read error: Connection reset by peer)
[15:17:45] *** Quits: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9) (Remote host closed the connection)
[15:17:45] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Read error: Connection reset by peer)
[15:17:55] <stenno> jwpapi: have you checked passport.js ?
[15:18:05] <jwpapi> stenno: doing now
[15:18:06] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:18:07] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[15:18:11] <stenno> its on the server side
[15:18:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:18:49] <jwpapi> I think that’s the solution!
[15:18:53] <jwpapi> found it in 5 seconds
[15:19:11] <jwpapi>  The strategy also requires a verify callback, which receives the access token and optional refresh token, as well as profile which contains the authenticated user's Facebook profile. The verify callback must call cb providing a user to complete authentication.
[15:21:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:21:53] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:21:59] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (Ping timeout: 256 seconds)
[15:24:46] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[15:26:11] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 245 seconds)
[15:28:49] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[15:28:54] <Adoi> thank you all, for your insights
[15:29:02] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:31:39] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[15:32:43] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Remote host closed the connection)
[15:33:22] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[15:33:43] *** Quits: lenarhoyt (~lenarhoyt@mail.bfc-net.de) (Quit: Ping timeout (120 seconds))
[15:35:31] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[15:35:58] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[15:37:49] *** Joins: pmercado (~pmercado@186.11.41.95)
[15:38:00] *** Quits: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:39:06] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[15:39:10] *** Joins: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com)
[15:43:16] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[15:49:01] *** Joins: trevors (~trevors@user/trevors)
[15:50:41] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[15:52:51] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[15:53:33] *** Joins: enoq (~enoq@194-208-178-35.lampert.tv)
[15:53:40] *** Quits: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:53:55] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[15:54:28] *** Joins: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com)
[16:00:37] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:01:01] *** Joins: mat001 (~mat001@213.143.69.121)
[16:02:26] *** Quits: Wizzzzzy (~wizzzzzy@host109-158-209-247.range109-158.btcentralplus.com) (Read error: Connection reset by peer)
[16:02:46] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Quit: Client limit exceeded: 20000)
[16:04:18] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[16:04:46] <fweht> whats the best way to replace a certain node by a dynamically loaded html string?  not replacing the innerhtml only, really the whole node?
[16:05:13] *** Joins: mat001 (~mat001@72.28.108.216)
[16:05:38] <stenno> fweht: https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith
[16:05:46] <fweht> stenno: thanks!!!
[16:06:15] <stenno> actually this requires a parsed string
[16:07:28] <stenno> fweht: maybe you have to use DOMParser
[16:07:49] <fweht> stenno: i see
[16:08:48] <fweht> but it wouldnt make a difference in terms of computation as the string needs to be parsed anyway at some point, right?
[16:09:48] <stenno> the difference would be that your string would still be a single text node
[16:13:29] <stenno> it would be inserted as a text node, not as a dom fragment tree
[16:14:26] <fweht> the shopify dawn theme uses this construction which strikes me as slightly weird
[16:14:39] <fweht> `document.getElementById('ProductGridContainer').innerHTML = new DOMParser().parseFromString(html, 'text/html').getElementById('ProductGridContainer').innerHTML;}`
[16:15:06] <fweht> so they just parse to get out the first childnode to replace the parents innerhtml with the childs innerhtml...  `replaceWith` seems more elegant somehow
[16:15:54] <stenno> maybe a compatability reason
[16:16:03] <fweht> true
[16:16:04] <stenno> replaceWith is not available in internet explorer
[16:16:09] <stenno> !ciu replaceWith
[16:16:09] <jellobot> stenno, Failed to look up feature
[16:16:18] <stenno> !ciu Element.replaceWith
[16:16:19] <jellobot> stenno, Failed to look up feature
[16:16:21] <stenno> meh
[16:16:21] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[16:16:21] *** Joins: nicoty (~nicoty@user/nicoty)
[16:16:21] *** Joins: kadoban (~kadoban@user/kadoban)
[16:16:21] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[16:16:21] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[16:16:21] *** Joins: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a)
[16:16:21] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[16:16:21] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[16:16:21] *** Joins: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9)
[16:16:21] *** Joins: Deide (~deide@user/deide)
[16:16:21] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:16:22] *** Joins: boris[m]12 (~borisruna@2001:470:69fc:105::32f3)
[16:16:22] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[16:16:22] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[16:16:22] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[16:16:23] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[16:16:23] *** Joins: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4)
[16:16:23] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[16:16:23] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[16:16:23] *** Joins: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec)
[16:16:23] *** Joins: assemblylang[m] (~assemblyl@2001:470:69fc:105::1:7012)
[16:16:24] <fweht> hehe
[16:16:35] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[16:16:37] *** Joins: Darvesh[m] (~drvshmatr@2001:470:69fc:105::1:6c1e)
[16:16:39] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[16:16:51] <stenno> https://caniuse.com/mdn-api_element_replacewith
[16:17:20] <Alexendoo> fweht: Could use outerHTML
[16:18:13] <fweht> ah thats even better!
[16:18:34] <stenno> the important thing here is just to use DOMParser
[16:18:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:19:03] <stenno> hmm or is it?
[16:19:29] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:20:04] <stenno> oh damn actually innerHTML/outerHTML _does_ do parsing
[16:20:22] <fweht> i think innerhtml works without parser
[16:20:27] <stenno> well then disregard what i have said
[16:20:29] <stenno> yeah...
[16:20:29] <fweht> dont know about replacewith
[16:20:32] <stenno> didn't know that
[16:20:41] <stenno> replaceWith does need a parsed node
[16:22:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[16:22:55] *** Joins: heatwave (~heatwave@122.161.75.143)
[16:24:49] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[16:25:07] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[16:25:08] *** Joins: plitter (~plitter@192.108.100.200)
[16:25:08] *** Quits: plitter (~plitter@192.108.100.200) (Changing host)
[16:25:08] *** Joins: plitter (~plitter@user/plitter)
[16:34:22] *** Quits: heatwave (~heatwave@122.161.75.143) (Quit: WeeChat 3.4)
[16:37:09] *** Joins: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac)
[16:37:30] *** Quits: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac) (Client Quit)
[16:37:43] *** Joins: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac)
[16:42:51] <jwpapi> stenno when I use `passport-facebook` then I have to share my client secret to the front end
[16:42:53] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[16:43:06] <jwpapi> client side
[16:44:09] <jwpapi> the function I pasted above does not use the app secret
[16:44:36] *** Joins: pulse (~pulse@user/pulse)
[16:45:05] *** Joins: Intelo (~Intelo@88.244.94.93)
[16:45:20] *** Joins: mat001_ (~mat001@213.143.69.121)
[16:45:34] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 250 seconds)
[16:47:32] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:47:57] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:48:15] *** Joins: MassDebates_ (~MassDebat@2600:1700:1184:4510:9c49:337:e7b4:2360)
[16:48:54] *** Joins: chao (~stenno@user/stenno)
[16:49:03] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[16:50:35] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[16:50:46] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[16:50:51] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[16:50:57] *** Quits: ekathva (~ekathva@2001:999:51:be01:f430:4edc:7521:6563) (Remote host closed the connection)
[16:51:10] *** Joins: ekathva (~ekathva@2001:999:51:be01:fca5:59f2:6173:4a62)
[16:51:42] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:53:13] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[17:03:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[17:04:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:04:56] *** Quits: Intelo (~Intelo@88.244.94.93) (Quit: Client closed)
[17:12:06] *** Joins: Isthmusi (~Isthmus@user/isveni)
[17:14:54] <zitter> hi, I have step() { return 'foo'; } can I do somewhere this[this.step()] so to call foo() function?
[17:16:22] <leduyquang753> Sure.
[17:16:36] *** BSaboia_ is now known as BSaboia
[17:18:18] <zitter> leduyquang753, becuase if I do a console.log(this.step()); it returns foo, if I do a console.log(this[this.step()]); returns the function printing. But this[this.step()] seems it doesnt call foo() function. I know it because I have a console.log() inside it
[17:18:48] <leduyquang753> That expression only returns the function object, you need `()` to call it.
[17:19:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:20:12] <zitter> leduyquang753, thanks you're right. It works :)
[17:21:05] <zitter> it works also with no backticks
[17:22:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:22:58] <leduyquang753> Those backticks are just to delimit code, not meant to be actually typed in. :)
[17:25:11] *** Quits: ekathva (~ekathva@2001:999:51:be01:fca5:59f2:6173:4a62) (Ping timeout: 250 seconds)
[17:27:26] <jwpapi> I have a function that needs to run after `window.fbAsyncInit` that functions returns me an accesscode I’ll need to use multiple times later. If turn the EventListener into a Promise will it be run multiple times or will the promise be stored
[17:27:30] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[17:28:06] <jwpapi> https://www.irccloud.com/pastebin/fhcrcKWf/
[17:33:56] <jaawerth> jwpapi: well the promise itself should only run once (and you can add {once: true} to .addEventListener so it'll clean that up as well rather than uselessly rerunning the resolve callback), but if you have a function that wraps .addEventListener to return a promise, you'll get a new promise that responds to a new event listener every time unless you cache it
[17:34:45] <jwpapi> jaawerth: ok give me some time to digest what you just said
[17:35:23] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[17:35:58] <jwpapi> I assume my code isn’t working, because `window.fbAsyncInit()` happens only once. So when I later call `fbConnection` it will not succeed
[17:37:45] <jwpapi> I think I have to pass that all through from the top
[17:37:52] <jaawerth> I don't see an event istener in there so tbh I'm not sure how to connect your snippet to the question - what is window.fbAsyncInit doing?
[17:39:19] *** wbrawner is now known as lefteye
[17:39:51] <jwpapi> jaawerth: window.fbAsyncInit is an event that happens after the Facebook sdk is loaded. I assume it happens once.
[17:39:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[17:40:00] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:40:12] <jwpapi> After it runs I can get an Accesstoken, which I can use later to get the data I need
[17:40:20] <jaawerth> you're calling it as a function though
[17:40:38] <jwpapi> I know that was wrong
[17:40:53] <jwpapi> https://www.irccloud.com/pastebin/0kKEW4jo/
[17:41:03] <jwpapi> that is how I get the needed accesstoken
[17:41:22] <jwpapi> This is where I’ll need it. https://www.irccloud.com/pastebin/wDfgcKJU/
[17:41:42] *** Joins: ekathva (~ekathva@2001:999:51:be01:35a5:6efe:4821:a5c8)
[17:42:03] <jwpapi> ^this calls happens  12 times.
[17:42:14] <jaawerth> are you intentionally invoking FB.login in both?
[17:42:40] <jwpapi> I could run everything inside the EventListener, but that would increase complexity quite a bit
[17:42:47] <jwpapi> jaawerth: srry now. let me send correct code
[17:43:15] <jwpapi> This is the standard snippet from Facebook https://www.irccloud.com/pastebin/Aaz3megr/
[17:44:07] <jaawerth> well I'm just confused by awiting fbAsyncInit and then running what looks like the samem code as in its body - should I ignore the first paste? Or is fbConnection just supposed to wrap fbAsyncInit to provide its promise resolution once ready (or put another way, to invoke it idempotently)?
[17:44:41] <jwpapi> So yeah my problem is that I don’t want to run all my app code  inside `(response.status ===  'connected')`, because that would lead to tons of intendation
[17:45:02] <jwpapi> yes please ignore the first paste. And yes it was my try to make it a promise
[17:45:33] <jaawerth> ah ok. so, unless FB documents taht FB.login returns a promise (and the presence of the callback suggests it doesn't) you'll need to wrap it in one for the await to do anything
[17:45:35] <jwpapi> I need `getFBData` to wait for `FB.login' to finish
[17:46:09] <jwpapi> ahh okay I have an idea jaawerth
[17:46:13] <jwpapi> or you had the idea
[17:46:19] <jwpapi> but lol I’m gonna try on my own
[17:48:06] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[17:48:27] <jwpapi> that about it https://www.irccloud.com/pastebin/r4Z51wI9/
[17:50:36] <jwpapi> along with `const accessToken = await fbAccessToken();` inside `getFBData`
[17:50:42] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[17:50:43] <jaawerth> jwpapi: pretty much! though you might want to resolve the whole authResponse so you can handle any edge cases in what it gives you, I dunno what other properties you might need beyond accessToken though
[17:50:56] <jaawerth> and similarly for reject you might want to include some more info about what went wrong. but that's the gist of it
[17:51:06] <jwpapi> yes I just wanted to sketch the concept out real quick
[17:51:18] <jwpapi> jaawerth: Shouldn’t I be able to also write that as async await function?
[17:51:48] <jwpapi> Just somehow had in mind that I always can use async/await instead of the Promise syntax
[17:51:59] <jaawerth> well except the window.fbAsyncInit = part - what is the purpose of that? is it just that you always want to get back the same Promise?
[17:52:24] <jaawerth> you can, but async/await only works on promises - if it's a callback-based thing you need to turn it into a promise
[17:53:37] <han-solo> https://developers.facebook.com/docs/facebook-login/web#example
[17:53:41] <jwpapi> jaawerth: that should be `window.addEventListener('fbAsyncInit', ()=> …)`
[17:54:03] <jaawerth> ohhh
[17:54:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:54:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:54:28] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:28] <jaawerth> that's an actual part of the FB sdk, I see
[17:54:30] <jaawerth> bizarre
[17:54:39] <jwpapi> I usually as a code style use async/await, how would I do that instead of using `new Promise()`
[17:55:04] <jwpapi> I don’t see it working along inside an eventlistener
[17:55:05] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:55:08] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:55:38] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Quit: enoq)
[17:55:54] *** Joins: enoq (~enoq@194-208-178-35.lampert.tv)
[17:56:12] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:56:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[17:56:50] <jaawerth> you don't. `new Promise()` exists to turn a non-promise-compliant asynchronous api into one that adheres to the Promise api so you can interop from there with things like async/await
[17:57:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Client Quit)
[17:57:08] <jaawerth> you normally wrap it in an innfer function so it's opaque to the caller but you still need it *somewhere*
[17:57:29] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[17:57:40] <jaawerth> since the await keyword expects at least something with a .then it can invoke and get a promise-like behavior
[17:58:10] <jaawerth> (as does the return value of async, which you can think of as being implicitly wrapped in Promise.resolve(ret))
[17:59:15] <jwpapi> like this wouldn’t work? https://www.irccloud.com/pastebin/ECEvMOOy/
[18:00:11] <jwpapi> this actually https://www.irccloud.com/pastebin/2o6EeIgy/
[18:00:33] <jaawerth> if FB.login() returned a promise (and you had `return` on line 10) it would work. otherwise, the async function just returns a promise that always resolves to undefiend, so awaiting it from another one does nothing
[18:01:00] <jwpapi> yes and also it would restart all the time
[18:01:17] <jwpapi> ok so it’s totally fine to use new Promise and later an async function it’s not two different code styles?
[18:01:21] <jaawerth> that will be true regardless, a Promise resolves once. a function that creates a promise will rerun teh code every time
[18:01:42] <jaawerth> no, it's what you need to do when wrapping a non-promise api
[18:01:45] <jaawerth> you can't not do it :)
[18:01:54] <jaawerth> util.promisify in node does something similar
[18:02:10] <jwpapi> thank you jaawerth
[18:02:24] <jwpapi> https://www.irccloud.com/pastebin/kwVCH7HF/
[18:02:30] <jaawerth> it's not even bad to mix .then/.catch with async/await either though tbh, if it helps code clarity. it's all promises anyway, async/await is just sugar
[18:02:36] <jwpapi> So I shouldn’t return a promise
[18:02:52] <jaawerth> you should. then other async functions can await it as much as they want
[18:02:54] <jwpapi> jaawerth: okay cool! I agree with you
[18:03:21] <jwpapi> okay so sorry I need some more clarity
[18:03:38] <jwpapi> the promise needs to be created before the event happens or?
[18:03:46] <jwpapi> otherwise it won’t resolve
[18:03:46] <jaawerth> but if you dont' want it to create a new promise and rerun teh same code every time you probably want to do something internally like set a property somewhere and reuse it if it's already been set
[18:05:25] <jwpapi> What’s wrong here? https://www.irccloud.com/pastebin/eKT45fGE/
[18:06:11] <jwpapi> if `fbAsyncInit` happens and the login succeeds everytime you `await fbAccessToken` it will just resolve instantly to the accesscode, which is what I want?
[18:07:29] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[18:09:45] *** Joins: nomic (~nomic@185.192.69.3)
[18:14:02] *** Joins: jazzy (~jaziz@user/jaziz)
[18:18:51] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[18:19:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:22:52] *** Joins: programmar (~whatever@118.69.128.37)
[18:23:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:27:34] *** Joins: APic (~apic@apic.name)
[18:30:24] *** Quits: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac) (Quit: WeeChat 3.4)
[18:30:40] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[18:30:57] <hassoon_> 'afternoon
[18:31:05] <jwpapi> afternoon hassoon_
[18:31:44] <ThePendulum> gudn abend
[18:31:52] <jwpapi> ThePendulum: u german?
[18:33:13] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:34:54] *** Joins: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac)
[18:35:42] <silly> "A report of your test results has been sent to us. Thank you for your time! " fuck, shit load of trick questions
[18:36:11] <silly> i should have used a screenrecorder so i can check afterwards
[18:37:25] <jwpapi> Are you guys all hired or is here anyone self-employed or freelancing?
[18:37:33] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[18:37:48] <silly> i'm neither nor nothinig
[18:38:26] <jwpapi> retired?
[18:38:29] *** Joins: kakashiA1 (~kakashi@37.84.156.126)
[18:38:53] <silly> that falls into the same category of nothing ness
[18:39:34] <ThePendulum> nah but the mainzelmännchen are dope
[18:39:53] <ThePendulum> I'm freelancelot
[18:39:59] <jwpapi> I want to change my career into coding. But I don’t want to have a job
[18:40:06] <jwpapi> But I also don’t need to make money immediately
[18:40:20] <silly> ThePendulum, to employ? (or would... me?)
[18:40:26] <silly> do you*
[18:40:49] <silly> i'd even love to come visit headquaters occasionly
[18:40:56] <jwpapi> one questions regarding the promises. So when I assign a promise to a variable it will only run once, but when I assign a function that returns a promise that will be run again every single time, is that correct?
[18:41:42] <Covrus> when you call the function that returns a promise, a promise will be returned when the function is done
[18:41:52] <silly> every time
[18:42:19] <silly> and when you assign a promise, the work has already begun
[18:42:30] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:42:33] *** Joins: Intelo (~Intelo@88.246.74.142)
[18:42:50] <jwpapi> https://www.irccloud.com/pastebin/eKT45fGE/ < so here once the login happened the variable will basically be the accestoken
[18:42:55] <jwpapi> wherever I `await` it
[18:44:20] <jwpapi> If I instead would make it a `const fbAccessToken =  () => return new Promise` it would start the promise once I do the `await fbAccessToken` and would not resolve if the event `window.fbAsyncinit` has happened before, is that correct?
[18:44:32] <robertparkerx> https://kopy.io/1xOg9 this console.log prints results but doesn't replace the contents for some reason
[18:44:36] *** Joins: banana__ (~banana_@cpe-65-29-184-109.wi.res.rr.com)
[18:45:03] *** Quits: revolve (~u0_a227@82-132-237-109.dab.02.net) (Read error: Connection reset by peer)
[18:45:25] *** Quits: banana__ (~banana_@cpe-65-29-184-109.wi.res.rr.com) (Client Quit)
[18:45:44] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:45:49] <banana_> o/
[18:46:12] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[18:46:23] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[18:46:59] <robertparkerx> it seems like it's supposed to replace the HTML
[18:47:00] *** Joins: revolve (~u0_a227@82-132-245-69.dab.02.net)
[18:47:01] <robertparkerx> but doesn't
[18:47:53] *** Quits: kadams_ (~kadams@cpe-74-136-29-104.kya.res.rr.com) (Quit: Lost terminal)
[18:47:58] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[18:49:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:50:08] <silly> jwpapi, i think... if you await fbAccessToken and execute fbAsyncInit later, you should indeed get what you want
[18:50:40] <silly> but it seems terrible what you did there
[18:50:44] <silly> to me
[18:50:45] <jwpapi> yes, but I can’t force `fbAsyncInit`
[18:50:57] <jwpapi> so it could’ve happened before
[18:51:16] <jwpapi> silly: You want to help me to improve
[18:51:28] *** Quits: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac) (Quit: WeeChat 3.4)
[18:52:32] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:52:39] <silly> i'm not sure if i can, off hand
[18:53:24] <silly> also, i feel smooshed now from the test :(
[18:53:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[18:55:16] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[18:56:55] <jwpapi> Can you just explain what you think is terrible silly
[18:58:41] <silly> a) assigning to window, b) not doing any actual work inside the promise
[18:59:06] <silly> ...but defining a function that would have to be called from somewhere else
[18:59:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:59:39] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[18:59:47] <silly> i feel like it should work though
[18:59:54] <jwpapi> I mean I just took the function FB provided me and turned it into a promise so I can use it somewhere else
[18:59:58] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[19:00:11] <silly> would have been a perfect fit for the test i took 10 minutes ago
[19:00:22] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[19:00:29] <jwpapi> silly: what test did you took
[19:00:40] <silly> job application
[19:01:16] <silly> jwpapi, run the function inside the promise
[19:02:07] <silly> i.e. remove lines 2 and 20
[19:03:03] <jwpapi> silly: fuck jobs
[19:03:15] *** Joins: gehn (~gehn@user/gehn)
[19:03:20] <silly> oh yea
[19:03:25] <silly> fuck money too :P
[19:03:38] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[19:03:48] <ljharb> jwpapi: you can’t modify facebook’s functions and expect everything to work; they have their own code that might break if you do that.
[19:03:55] <jwpapi> silly the function that needs to be run once that promise is resolved runs 12 times with different parameters
[19:03:57] <silly> in line 11, remote the return, it's just confusing
[19:04:11] <ljharb> it’s an SDK, you have to use it as is.
[19:04:19] <jwpapi> silly: oh yeah this one is removed
[19:04:41] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Ping timeout: 256 seconds)
[19:04:54] <jwpapi> I didn’t touch the sdk. I followed their instructions. I just made a promise around it and changed `console.log` to `resolve`
[19:04:54] <silly> is he modifying it? i thought this was only using it
[19:05:01] <jwpapi> yes I’m only using it
[19:05:59] <silly> i didn't understand "silly the function that needs to be run once that promise is resolved runs 12 times with different parameters"
[19:07:24] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[19:07:37] <jwpapi> this is the function that needs the accessToken https://www.irccloud.com/pastebin/y3sMRzQT/
[19:07:51] <jwpapi> I’m running this function 12 times with different timeframes and for different entities
[19:08:07] <jwpapi> that’s why I don’t want to run the code inside the promise
[19:08:31] <silly> append () in line 2
[19:08:50] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[19:09:05] <silly> but this will rerun FB.init and FB.login
[19:09:40] <jwpapi> it will only rerun it when `fbAsyncInit` happens
[19:09:45] <jwpapi> which is NOT what I want
[19:10:02] <jwpapi> https://www.irccloud.com/pastebin/KIrnkjto/
[19:10:14] <silly> omg
[19:10:33] <jwpapi> `fbAsyncInit` only happens once, once it’s done I want fbAccessToken to be the Token
[19:10:48] <silly> huh is this some FB custom event?
[19:11:08] <jwpapi> silly: exactly
[19:11:15] <jwpapi> triggered when the sdk finished loading
[19:11:33] <silly> have a link to their docs?
[19:11:59] <jwpapi> https://developers.facebook.com/docs/javascript/advanced-setup#:~:text=The%20function%20assigned%20to%20window.fbAsyncInit%20is%20run%20as%20soon%20as%20the%20SDK%20has%20completed%20loading
[19:12:11] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[19:12:20] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:15:48] <silly> "You must log in to continue." dafaq
[19:16:23] *** Joins: stenno (~stenno@user/stenno)
[19:16:48] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[19:19:25] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 256 seconds)
[19:20:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:21:19] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[19:22:07] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[19:23:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:24:47] <silly> i would stop messing with promises and call a function once the accesstoken is acquired
[19:28:16] <paulcarroty> wow https://github.com/nodejs/node/commit/6ec225392675c92b102d3caad02ee3a157c9d1b7
[19:29:07] *** Joins: Akiva (~Akiva@user/Akiva)
[19:29:44] <silly> served!
[19:30:01] <silly> as it was announced
[19:30:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[19:30:35] <silly> ljharb is so quiet...
[19:30:43] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Quit: enoq)
[19:30:47] *** Joins: fef (~thedawn@user/thedawn)
[19:31:52] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[19:34:00] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[19:34:37] <Covrus> what's this?
[19:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:38:28] *** Quits: plitter (~plitter@user/plitter) (Ping timeout: 250 seconds)
[19:44:46] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:47:32] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:47:52] <ljharb> silly: yeah, it’s pretty terrible
[19:48:05] <ljharb> yassernasc: you need to auth with nickserv for non-ops to see what you say
[19:48:16] <ljharb> and, it being global is the main reason it’s terrible.
[19:48:24] *** Joins: trevors (~trevors@user/trevors)
[19:48:28] <ljharb> but it’d all be fine if they hadn’t used the name “fetch”
[19:48:32] <silly> that's what i thought :)
[19:48:58] <silly> i could life with require('node-fetch')
[19:49:16] <silly> or even require('node-not-fetch')
[19:49:58] <ljharb> the only good thing is that it’ll kill the node-fetch package, which went ESM-only and thus is now user-hostile
[19:50:37] <ljharb> it’s the only non-sindre package that matters that’s made that move, afaik
[19:50:40] <silly> lol (╯°□°)╯︵ ┻━┻ everything
[19:50:42] <stenno> wait, nodes new fetch is actually not good?
[19:51:02] <ljharb> stenno: fetch can’t possibly be 100% compliant outside a browser. It’s a category error to *want* it in node.
[19:51:06] <silly> it's not fetch fetch
[19:51:16] <ljharb> a promise-returning request abstraction would be awesome, and node should have shipped one a decade ago
[19:51:30] <ljharb> but the one called “fetch” can’t exist properly outside a browser
[19:51:39] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Ping timeout: 250 seconds)
[19:51:40] <stenno> why not?
[19:51:46] <silly> confusion
[19:52:05] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[19:52:07] <silly> too much confusion
[19:52:22] <ljharb> because it’s spec contains cookies, and depends on the current url, and because it’s supposed to fail unless the remote server has CORS set up, etc
[19:52:55] <silly> in electron you have both next to another
[19:53:10] <stenno> hmm yeah 'credentials' doesnt really make sense for node fetch
[19:53:44] <silly> huh? credentials sounds like auth
[19:54:08] <ljharb> credentials are fine
[19:54:17] <ljharb> but not being able to save them in the cookie store isn’t
[19:54:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[19:54:19] <stenno> credentials include cookies
[19:54:26] <jaawerth> jwpapi: sorry, was on the road - make it easier to work with other FB.foo methods, I would probably break this down into smaller functions (including a dedicated Promise wrapper func for convenience), btw, something like http://ix.io/3Ojf/js
[19:54:27] <ljharb> because there’s no cookies in node
[19:54:43] <silly> oh, that's something else :/
[19:55:23] <ljharb> n> FormData
[19:55:24] *** Parts: programmar (~whatever@118.69.128.37) ()
[19:55:24] <jellobot> (fail) ReferenceError: FormData is not defined
[19:55:30] <stenno> thats what MDN says:
[19:55:32] <stenno> The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests.
[19:55:34] <ljharb> n> File
[19:55:34] <jellobot> (fail) ReferenceError: File is not defined
[19:55:38] <ljharb> n> Blob
[19:55:39] <jellobot> (fail) ReferenceError: Blob is not defined
[19:55:54] <ljharb> node’s missing lots of things. Most of them are safe to add, but fetch shouldn’t have been one of them.
[19:56:24] <ljharb> the problem is that there’s some folks in node that i call the “be like browser” people. The browser is shit; node shouldn’t try to be more like it, it should be better since it lacks the same constraints.
[19:56:28] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:56:45] <jaawerth> ljharb: node-fetch was user-hostile before that
[19:56:45] <austincheney> ^ agreed
[19:56:49] <stenno> i think in this case its more about the interface
[19:56:54] <ljharb> jaawerth: before v3? How?
[19:56:54] <stenno> yes, what jaawerth said
[19:57:06] <ljharb> stenno: right, but the interface under a different name has one of my concerns
[19:57:13] <ljharb> but also, “every single behavior and semantic” is the interface
[19:57:14] <austincheney> node should be pushing people to connect via streamed interfaces because its so much faster and they are very mature in Node
[19:57:22] <stenno> sure, lets call it 'web-fetch'
[19:57:41] <silly> and require it
[19:57:42] <ljharb> stenno: lol t hat implies compliance even stronger
[19:57:45] <silly> or node-fetch
[19:57:47] <jaawerth> ljharb: well I actually don't know the timing on this 100% but, to your point, it's a superset that isn't 100% compliant. and yet despite not being complaint in multiple ways, they totally were like "hmmmmm... nah" on allowing it to work with unix sockets
[19:57:48] <stenno> the fact that i couldn't just do 'fetch' in node pissed me off
[19:57:49] <ljharb> i think they should just call it “request”
[19:58:01] <jaawerth> which isn't exactly a super uncommon thing to do in certain node deployments
[19:58:04] <ljharb> jaawerth: not sure I’d call that user-hostile, but certainly sketchy
[19:58:12] <stenno> node:fetch/web
[19:58:20] <stenno> ljharb: just analog to https://nodejs.org/api/webstreams.html
[19:58:22] <ljharb> “user-hostile” is a really strong label that i reserve only for the worst of behaviors
[19:58:33] <ljharb> stenno: again, it’s impossible to have a real web fetch in node
[19:58:39] <jaawerth> well, that was my read on their tone in the relevant issue at the time anyway
[19:58:50] <ljharb> stenno: so anything that implies it’s fetch, which implies it’s the web’s fetch, is the problem. The word is tainted.
[19:58:54] <ljharb> jaawerth: fair
[19:58:56] <stenno> i am ok with it being called 'request'
[19:59:20] <stenno> its just the thing where i pass an url and i get a promise resolving to a response and i can stream that response and stuff like that
[19:59:33] <stenno> and i think the way the web fetch behaves is really comfortable
[19:59:34] <austincheney> ljharb, there is so much in the browser that is user hostile.  It shouldn't take 10mb of code and 10 seconds of load time to dynamically change some text in the browser, but.... that is everywhere
[19:59:43] <ljharb> lol if y’all actually do agree with me, feel free to comment on the fetch PR. But only if you really agree; and don’t give the impression i sent you :-) it’s just if you want a voice.
[19:59:59] <stenno> i don't care what its called
[20:00:06] <ljharb> stenno: right, 97% of fetch is fine in node, and i want that too. I just don’t want the baggage of the name “fetch”
[20:00:14] <stenno> i just want it to work intuitively like in the browser
[20:00:16] <stenno> yep
[20:00:19] <stenno> i gotcha
[20:00:23] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[20:00:56] <stenno> ljharb: did you see that thing on programmerhumor
[20:01:04] <stenno> n> parseInt(0.00000005)
[20:01:04] <jellobot> (okay) 5
[20:01:21] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[20:01:33] *** Quits: mat001_ (~mat001@213.143.69.121) (Remote host closed the connection)
[20:02:27] <samsch> res.json() -> Promise was honestly never intuitive. It makes sense only if you think about it. And assume for some reason that .json() can meaningfully be async in the browser, which given how everything else works, doesn't make sense.
[20:02:54] <ljharb> stenno: no
[20:02:54] <Alexendoo> The JSON parsing part can still be sync
[20:03:09] <Alexendoo> What you're waiting for is the body to finish arriving
[20:03:16] <stenno> i thought only by awaiting .json() it would consume the body
[20:03:16] <ljharb> samsch: the `.json()` part is silly, yeah
[20:03:25] <ljharb> what's also ridiculous is that you can't call `.json()` twice
[20:03:27] <stenno> allowing you to do streaming stuff
[20:03:27] <jaawerth> ehhh\
[20:03:35] <jaawerth> res.text() is also async because these method are parsing a stream
[20:03:36] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[20:03:42] <ljharb> you should be able to parse to json infinity times, it's just a string
[20:03:44] <jaawerth> it's consistent and IMO makes sense for a low-level API
[20:03:45] <stenno> yeah, its about stream consumption
[20:04:07] <stenno> which is actually awesome if you want to do more funky stuff
[20:04:17] * stenno looks at decompressionstream api
[20:04:25] <jaawerth> yeah. those are just methods for a "just get all the data [and turn it into X]"
[20:04:47] <stenno> but i can understand how this is not really intuitive
[20:04:54] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[20:05:13] <jaawerth> ljharb: I generally agree on "browserapis bad" but I think fetch is a sensible interface for low-level http stuffs, for the most part, and also the browser streams API is nicer than the node one
[20:05:19] <ljharb> jaawerth: i like the interface
[20:05:28] <ljharb> jaawerth: but the name is inextricably attached to its spec
[20:05:36] <jaawerth> yeah totally agree there
[20:05:37] <ljharb> and the spec is impossible to fully comply with in node
[20:06:20] <stenno> i guess its up to the user to realize that node doesn't need cookies
[20:06:23] <samsch> Of all the things though, what made me the most frustrated was that one day where I just wanted to write a quick script in Node that including making a basic http request, and I went through like 4 different http libraries before trying node-fetch which was the only one that worked out of the box.
[20:06:35] <jaawerth> I always had  it in mind to make my own isomorphic thing named kvetch with a fetch-like api, actually but *slightly* higher-level (rejecting on !response.ok), but it's never bothered me enough to actually do it lol
[20:06:37] <Covrus> axios usually works well for me
[20:06:38] <pulse> wow, parseInt is really stupidly implemented
[20:06:53] <pulse> it's doing parseInt('5e-7') lmao
[20:06:58] <jaawerth> axios is decent but a bit high-level for some purposes and not without its quirks
[20:06:59] <stenno> parseInt is terrible but my above line isn't the reason why its terrible
[20:07:15] <stenno> because hte docs literally say that parseInt takes a string
[20:07:17] <stenno> so thats fine
[20:07:20] <samsch> Covrus, I was expecting axios to be the one that worked, and I think it was the second one I tried. I don't remember what the problem was between them, I think something about what headers were being set.
[20:07:24] <Covrus> pretty much everything has quirks
[20:07:25] <stenno> and of course it will use the string representation
[20:07:29] <ljharb> jaawerth: lol i like that
[20:07:30] *** Quits: revolve (~u0_a227@82-132-245-69.dab.02.net) (Ping timeout: 250 seconds)
[20:07:35] <pulse> yeah, i guess if you know the input is string it's... less insane
[20:07:38] <stenno> so thats more a case of not reading the basic docs properly
[20:07:43] <ljharb> n> 0.00000005
[20:07:44] <jellobot> (okay) 5e-8
[20:07:45] <stenno> but parseInt has some other inane issues
[20:07:46] <ljharb> pulse: no it's not
[20:07:49] <jaawerth> ljharb: the companion mock lib will be called kvell
[20:07:55] <ljharb> pulse: the LANGUAGE is turning it into that. parseInt is doing the right thing.
[20:08:00] <samsch> Axios would be 90% better if it didn't automatically throw for non-200 responses.
[20:08:12] <pulse> depends on how you define the right thing
[20:08:22] <samsch> At least make that a non-default option
[20:08:24] <stenno> the right thing is 'the function takes a string as an argument'
[20:08:26] <pulse> i was really confused there for a second when i saw stenno's input, lol
[20:08:33] <stenno> pulse: yes, thats why i posted it
[20:08:45] <stenno> parseInt takes a string. period.
[20:08:49] <ljharb> yes, i was confused too
[20:08:50] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[20:08:54] <pulse> goes to show that implementation doesn't always conform to intuition
[20:08:54] <silly> i thought it was funny
[20:08:57] <ljharb> but parseInt isn't the issue
[20:09:03] <stenno> not in this specific case, no
[20:09:07] <ljharb> it's just one of those "funny wat things, that's not a real problem" things
[20:09:09] <stenno> but it has other stupid issues
[20:09:09] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[20:09:19] <jaawerth> ljharb: I dislike that parseInt tries to parse out an int from string nonense AND is how you would make use of a radix at the same time
[20:09:37] <ljharb> it's useful :-)
[20:09:50] <stenno> radix is implied to be 10, unless the prefix is 0x, where 16 is implied
[20:09:52] <stenno> so stupid
[20:09:54] <pulse> n> parseInt(999999999999999999999)
[20:09:54] <jellobot> (okay) 1
[20:10:11] <stenno> octal and binary will _not_ imply another radix, just 0x
[20:10:17] <jaawerth> parseInt('1') and parseInt('1bork', 36) should not give you two different seemingly-valid numbers
[20:10:21] <stenno> which is terrible
[20:10:25] <jaawerth> er, parseInt('1bork') rather
[20:10:43] <austincheney> n> parseInt(1e9, 2)
[20:10:43] <jellobot> (okay) 512
[20:10:45] <stenno> ALWAYS be explicit with your radix
[20:10:48] <stenno> with parseInt
[20:10:56] <jaawerth> even so!
[20:10:56] *** Quits: D4mned (~D1mned@212.101.251.246) (Read error: Connection reset by peer)
[20:11:07] <stenno> and as i stated this morning, if you think you need to use parseInt, think again
[20:11:07] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[20:11:12] <stenno> you most likely don't need it
[20:11:14] <jaawerth> "find the int in the string" and "parse the string with radix into an int" don't play well together
[20:11:15] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[20:11:18] <stenno> especially if you parse non-strings
[20:11:20] *** Joins: D4mned (~D1mned@212.101.251.246)
[20:11:25] <jaawerth> it'd be cleaner if characters outside of the radix range always gave you NaN
[20:11:27] <austincheney> n> parseInt(1e9, 16)
[20:11:28] <jellobot> (okay) 68719476736
[20:11:46] <stenno> jellobot: its analog to C++ stoi
[20:11:54] <stenno> sorry
[20:11:59] <stenno> jaawerth: its analog to C++ stoi
[20:12:20] <stenno> n> [parseInt('0.0000005'), parseInt(0.0000005)]
[20:12:21] <jellobot> (okay) [ 0, 5 ]
[20:12:29] <jaawerth> ok fine then give me printf
[20:12:34] <stenno> parseInt is just terrible
[20:12:40] <stenno> you wont need it
[20:12:54] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[20:12:55] <gehn> ez, don't feed nonsense to a function
[20:13:07] <stenno> gehn: what does that have to do with the implied radix thing?
[20:13:20] *** Joins: voltage_ (voltage@user/voltage)
[20:13:21] <stenno> i thought already that we agreed that the number thing was not a parseInt issue
[20:13:34] <gehn> it's a reddit meme right now "hurr derrr JS badd" 2 million upvotes
[20:13:42] <stenno> yes
[20:13:43] <pulse> heheh
[20:13:45] <jaawerth> when is that not a reddit meme
[20:13:51] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[20:13:54] <pulse> JS is quirky, it's not bad
[20:13:54] <gehn> well no this particular parseInt thing
[20:13:57] <pulse> it's actually pretty good
[20:13:58] <stenno> that is why i posted it this morning in the first place
[20:14:03] <gehn> and yes that's always a meme on reddit in general
[20:14:13] <gehn> wait that was you stenno? for shame...
[20:14:14] <ljharb> pulse: accurate take
[20:14:19] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[20:14:21] <stenno> gehn: nope, i mean in this channel
[20:14:24] <gehn> ah ok
[20:14:27] <stenno> liek 8 hours ago
[20:14:44] <gehn> it falls under the category of what I would call UB in C++, though JS doesn't *really* have UB, but this would be close
[20:14:44] *** Quits: D4mned (~D1mned@212.101.251.246) (Read error: Connection reset by peer)
[20:14:53] <gehn> parseInt is for strings, not for decimal numbers
[20:15:01] <stenno> its not UB, its well defined
[20:15:04] <gehn> feed it a string, otherwise who knows what the behavior is *supposed* to be
[20:15:08] <ljharb> it's very defined behavior
[20:15:08] *** Joins: D4mned (~D1mned@212.101.251.246)
[20:15:13] <stenno> feed it a string, or otherwise it will be converted to a string
[20:15:16] <ljharb> it runs the spec ToString operation on it
[20:15:17] <stenno> well-defined
[20:15:17] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[20:15:20] <stenno> one-liner in the specs
[20:15:30] <ljharb> and the number literal also has very defined behavior to change it to `5e-8`
[20:15:34] *** Joins: mat001 (~mat001@213.143.69.121)
[20:15:56] <ljharb> it's just that the defined behavior isn't intuitive. it would be if Number was rationals or reals, instead of floats, but we are where we are
[20:16:01] <jaawerth> JS has quirks but I can't think of many languages that odn't have quirks on a similar level. JS maye has more if you include non-strict mode
[20:16:09] <jaawerth> aka "mistake mode"
[20:16:18] <stenno> any language has quirks
[20:16:25] <gehn> yeah not really more than any other lang in my experience
[20:16:33] <stenno> the best people are the ones claiming that 'C is so much better'
[20:16:38] <stenno> because its so much worse
[20:16:43] <gehn> better than what?
[20:16:46] <Covrus> PHP is the bester of them, it does it gooder than
[20:16:46] <gehn> C is objectively trash
[20:16:48] *** Joins: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac)
[20:16:52] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[20:16:53] <jaawerth> I'll allow for exceptions only because there's always SOMEONE ready to bring up Rust and I haven't used it enough to have opinions
[20:17:00] <gehn> regardless of what it's compared to
[20:17:22] <ljharb> Covrus: i love php, but any language with variable variables forfeits
[20:17:23] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:17:29] <stenno> gehn: ask the pseudo-neckbeard 1st semester students on programmerhumor
[20:17:54] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 250 seconds)
[20:18:11] <gehn> probably because most C++ professors are actually old C fogies, so students get taught C in their C courses and they get taught C in their C++ courses
[20:18:13] <stenno> i had a conversation which such a person once, they claimed 'C is allowed to be shitty because its so old'
[20:18:37] <gehn> that's a weird bit of anthropomorphization
[20:18:47] *** Quits: heatwave (~heatwave@2401:4900:1c63:20b3:ae2b:7e47:754f:baac) (Client Quit)
[20:18:58] <jaawerth> C makes sense if "one step above ASM" is the goal
[20:19:12] <stenno> C is just the opposite of 'strict'
[20:19:13] <gehn> but you could still just use C++ instead
[20:19:26] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[20:19:27] <gehn> and have better and more of, well... everything
[20:19:30] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[20:19:50] <gehn> the only reason C makes sense is for old ass hardware vendors who provide a C compiler and not a C++ one
[20:19:55] <ljharb> stenno: i mean, it kind of applies to people too
[20:19:57] <gehn> or who provide a good C compiler and a shit C++ compiler
[20:20:05] <gehn> and that case is rapidly dwindling
[20:20:16] *** Joins: mat001 (~mat001@72.28.108.216)
[20:20:20] <stenno> ljharb: hah i guess
[20:20:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:22:10] <stenno> there are quite a few things to complain about regarding JS, why are people so good in picking the things you shouldn't complain about
[20:23:11] <stenno> like fucking `{} + []`
[20:24:00] <Alexendoo> It's small, fits on some image post
[20:24:26] <stenno> i guess
[20:24:27] <pulse> i like both C, C++, and JS, each for different reasons
[20:24:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:24:37] <stenno> i like C because its insane
[20:24:56] <pulse> C because it's simple and fast. C++ because it has a great stl. JS because it's very easy to produce complex software with it
[20:25:17] <stenno> C is almost an esotheric programming language
[20:25:19] *** Joins: Rockwood (~Rocky@user/rocky)
[20:25:27] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 250 seconds)
[20:25:38] <jaawerth> ehh a *lot* of stuff is still written in it. particularly unixy stuff, because posix
[20:25:42] <jaawerth> and all the gnu crap
[20:25:47] <pulse> the world depends on C in one way or another
[20:25:56] <silly> 20 minutes, no bashing yet https://github.com/nodejs/node/issues/19393#issuecomment-1027040690
[20:25:57] <pulse> every time you open a website somewhere under the hood zlib is doing something
[20:26:04] <stenno> can say the same about JS, pulse
[20:26:09] <jaawerth> but if I were going to write something with it I would basically always include lua for the business logic and C for the low-level/perf stuffs
[20:26:10] <Rockwood> stenno, o/
[20:26:12] <stenno> hi
[20:26:17] <pulse> stenno, sure but JS depends on C, C doesnt' depend on JS
[20:26:26] <jaawerth> (well, lua or other but lua is tiny to embed)
[20:26:45] <stenno> JS depends on C? thats a new one
[20:26:58] <stenno> JS is a language, it doesn't depend on C
[20:27:12] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:27:41] <stenno> node is written in C++, do you mean that?
[20:27:42] <silly> there is no import C
[20:27:54] <jaawerth> JS is one of the very few high-level languages with a proper spec specifically so it can be host-platform-agnostic
[20:28:04] <jaawerth> most are "well just follow the reference implementation"
[20:28:23] <silly> oh :(
[20:28:25] <stenno> ljharb: you know what sucks about php? include/require
[20:28:52] <pulse> stenno, unless you want to tell me that you use the JS port of zlib, everything you do depends on C software in some way or another :p
[20:29:10] <pulse> every time you open a JPG guess which language the lib processing it is written in
[20:29:19] <stenno> i don't open a jpeg
[20:29:26] <systemfault> jaawerth: I'd dare saying that most languages don't need anything but one implementation though... JS is just an outlier because of its history
[20:29:31] <stenno> what does that have to do with javascript?
[20:29:46] <jaawerth> systemfault: not just its history, also the various contexts it may be used
[20:29:52] <systemfault> True that
[20:29:57] <pulse> you're not a very good systems thinker if you don't get that
[20:30:01] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[20:30:04] *** Joins: ccapndave (~ccapndave@217-162-124-46.dynamic.hispeed.ch)
[20:30:16] <pulse> JS massively depends on a whole bunch of C things. otherwise it would be useless
[20:30:17] <ccapndave> Are web components much lighterweight than React?
[20:30:21] <jaawerth> but even like python and lua have multiple engine impls, they're just more... variable
[20:30:28] <ljharb> stenno: indeed
[20:30:52] <stenno> pulse: saying that js depends on C is objectively false
[20:31:05] <pulse> no, it's objectively true, you just have a narrow definition of what JS is
[20:31:14] <pulse> you think it's just the language, but the language by itself is meaningless without the ecosystem around it
[20:31:22] <pulse> and that ecosystem depends on a whole lot more than just JS
[20:31:22] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[20:31:26] <silly> your keyboard depends on C, so does everything you do with your computer
[20:31:27] <stenno> whatever lol
[20:31:39] <jaawerth> so anything that uses an existing native library like zlib intead of porting it depends on C?
[20:31:46] <pulse> yes
[20:31:55] <jaawerth> I guess you can argue that, but I don't think it's a very useful way to frame the conversation
[20:31:58] <stenno> maybe you should redefine what 'depends' means
[20:32:01] <stenno> yeah lol
[20:32:19] <pulse> i don't really see how that's a controversial opinion
[20:32:30] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:32:47] <stenno> its uncontroversial if you apply arbitrary meaning to words
[20:32:53] *** Quits: ccapndave (~ccapndave@217-162-124-46.dynamic.hispeed.ch) (Client Quit)
[20:32:55] <stenno> but this makes conversation in itself difficult
[20:33:17] <pulse> one definition of "depends" involves reliance
[20:33:21] <pulse> does that make it easier? :p
[20:33:30] <jaawerth> just not useful. I mean, firefox has e.g. been replacing a bunch of thigns with Rust for example. that probably doens't include zlib bcause why would you reimplement it rather than bind to it, but it *could*. is the "well just bind to the upstream native library" a case for C itself?
[20:33:44] <jaawerth> things can be true and meaningless at the same time
[20:33:55] <jaawerth> well, not meaningless, but not useful in context of discussion
[20:34:16] <jaawerth> for the record I don't even hate C THAT much. I find it to be less than expressive but I'll roll with it when I gotta
[20:34:23] *** Joins: benni (~benni@p5084a116.dip0.t-ipconnect.de)
[20:34:53] <stenno> i like the insanity of C
[20:34:56] <stenno> everything goes
[20:35:31] <stenno> every type is somehow a number
[20:35:39] <stenno> and you can add them up to your hearts content
[20:35:44] <pulse> like i said the other day, i find C way more rigid than JS
[20:35:44] <stenno> and overflow buffers
[20:35:48] <pulse> i can reason about C easier
[20:35:57] <stenno> and access violations
[20:36:00] <stenno> and all the good stuff
[20:36:02] <pulse> i find `anything goes` holds for JS far more, but *shrug*
[20:36:18] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[20:36:23] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:36:31] <jaawerth> stenno: well it's not QUITE so insane as it used to be on that front
[20:36:49] * stenno disables jaawerth 's CPU fan
[20:36:50] <pulse> C++ is probably better for modern programming, but it is a complex beast of a language
[20:36:53] <gehn> I'd suggest that it's not even close to a case that you can "reason about C easier", that has almost entirely to do with the author
[20:37:03] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[20:37:06] <pulse> gehn, yeah, fair
[20:37:07] <jaawerth> stenno: yeah but with modern C you're unlikely to disable my fan due to a stack overflow :P
[20:37:22] <pulse> however, maybe an average C programmer is just better than the average JS programmer
[20:37:28] <stenno> pulse: no,
[20:37:30] <stenno> no no no
[20:37:33] <stenno> this is so not true lol
[20:37:36] <gehn> though I might argue that *some* select languages are worthy of this accolade because of how they force all programmers to work. evidence: Haskell
[20:37:44] <pulse> stenno, average JS programmer is pretty bad honestly
[20:37:46] * Rockwood hide behind the wall bcz CPU will be blast soon :D
[20:37:48] <gehn> but even then I'm sure "difficult to reason about Haskell" code can be written
[20:37:58] <stenno> pulse: so is the average C programmer
[20:38:02] <gehn> pulse, yes probably, but only because it's a popular language
[20:38:13] <stenno> the bad thing about both is that they think they are good programmers
[20:38:15] <stenno> but arents
[20:38:17] <stenno> -s
[20:38:20] <stenno> dunning kruger
[20:38:21] <gehn> being the high school star quarterback doesn't mean much when you get to the real world
[20:38:23] <pulse> maybe
[20:38:34] <pulse> i think coding in C has a higher barrier to entry though
[20:38:49] <gehn> my point being, that as the popularity (and therefor dev population) increases, it becomes increasingly rare to find people at the actual "top" of their game
[20:38:49] <systemfault> Does it?
[20:38:53] <stenno> and being a bad js programmer might make your browser crash
[20:38:59] <stenno> being a bad C programmer might
[20:39:03] <pulse> if you want to be effective with C, i think so
[20:39:05] <stenno> might do all the things
[20:39:06] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 260 seconds)
[20:39:14] <pulse> if you want to be effective in JS, you don't have to know anything substantial. just syntax
[20:39:25] <stenno> put your computer into flames
[20:39:33] <pulse> if you want to be effective in C, you have to kind of know a lot about architecture and other low level particulates
[20:39:43] <pulse> i admit bias though
[20:39:46] <systemfault> pulse: That's false.... and you know it
[20:39:54] <pulse> well, let me at least hope it's true ;)
[20:40:05] <jaawerth> pulse: I was going to agree re barrier to entry until yous aid the "if you want to be effective" part. because JS does have a low barrier to entry in that you can just run it right in the browser and see whaty ou're building as you build it more quickly. But "if you want to be effective" means bundlings and xyz tooling which comes with tons of decision fatigeu
[20:40:08] <jaawerth> *fatigue
[20:40:11] <systemfault> pulse: You don't need to know anything about architecture to do pointer arithmetics
[20:40:16] <stenno> i am trying to tell you for a few days now that you have the wrong expression about C
[20:40:22] <gehn> if your domain requires knowing a lot about CPU architecture then yes you need to know about CPU architecture
[20:40:27] <pulse> jaawerth, it's kind of relative, i'll give you that much
[20:40:49] <gehn> that mostly only applies to people working on extreme high performance stuff where e.g. prefetching and branch prediction actually affect the end result
[20:40:56] <pulse> systemfault, you have to know a bit about it to use types effectively, though
[20:41:05] <pulse> and not step on the myriad of landmines available to you in C
[20:41:17] <jaawerth> JS landmines just explode later
[20:41:22] <stenno> and less loud
[20:41:26] <stenno> and less impactful
[20:41:28] <jaawerth> except when really loud
[20:41:34] <jaawerth> but usually less loud, lol
[20:41:49] <pulse> oh idk, i think the web as a whole is one giant landmine
[20:42:03] <stenno> if JS could be as terrible as C, it would be a bug in the engine
[20:42:07] <gehn> that was more true back in the days of IE6 and rampant browser quirks
[20:42:22] <gehn> babel mostly makes all that go away because compatibility selectors in your babelrc
[20:42:24] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:42:24] <stenno> can't blame js for activeX being shitty
[20:42:30] <pulse> no, it's more true now because the complexity of web solutions has reached an all time high
[20:42:39] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[20:42:46] <stenno> pulse: so what is the worst that can happen
[20:42:53] <gehn> has it though?
[20:42:56] <stenno> pulse: your page crashes? your browser requires more CPU?
[20:43:11] <systemfault> Anyway, C is still used because the only alternative was C++ which is often seen as "being too complex", not to mention that older C++ compilers were not that great.
[20:43:12] <gehn> I mean, sure the likes of Netflix and Twitter need intense "system design" skills, but most of those "systems" are *not* JS
[20:43:14] <jaawerth> stenno: you dump your password store into the blockchain
[20:43:16] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[20:43:23] <pulse> stenno, as a developer, the worst that can happen is you go absolutely crazy
[20:43:24] <systemfault> Rust is a new kid in the game
[20:43:28] <pulse> probably destroy a monitor or two in the process
[20:43:29] <stenno> jaawerth: sounds like a terrible plugin then
[20:43:32] <jaawerth> haha
[20:43:43] <gehn> you have load balancers, caching layers, databases, other APIs and services etc. also, most people (and therefor most needs) are not Netflix
[20:43:45] <jaawerth> I just mean there's a lot of very bad thigns that can happen on the web
[20:43:54] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:44:04] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[20:44:05] *** Joins: Rockwood_ (~Rocky@user/rocky)
[20:44:06] <stenno> jaawerth: sure, but its not because JS is in itself insecure
[20:44:12] <pulse> the gordian knots that can happen with webtech outshine anything in the systems dev world
[20:44:26] <gehn> modern C++ compilers still aren't that great... *ahem* *cough* *cough* MSVC *cough* *cough*
[20:44:28] <jaawerth> oh I agree, I just mean it's used in mroe contexts where a vuln is also a vector
[20:44:34] <systemfault> JS itself is pretty secure since it can't do shit :P
[20:44:39] <stenno> again, if JS was as terrible as C, it would be an engine bug
[20:44:42] <stenno> yes
[20:44:42] <gehn> still no HALO :(
[20:44:43] *** Joins: ___Rockwood__ (~Rocky@user/rocky)
[20:44:55] <gehn> gcc no heap elision
[20:45:11] <systemfault> gehn: I still wonder why they still haven't switched to clang... but it's still a lot better than it used to
[20:45:31] <gehn> well, in a sense, they *sort* of have, given that you can get clang and the ClangCL build tools for MSVC
[20:45:34] <jaawerth> macos uses clang as gcc which works great right up until it doesn't
[20:45:50] <systemfault> Blame Stallman and his GPL3
[20:45:51] <gehn> lol, mfw, first time I ever did `gcc --version` on MacOS
[20:45:58] <stenno> macos was terrible regarding gcc
[20:46:06] <gehn> thank god for homebrew
[20:46:08] <stenno> some intel stuff
[20:46:16] <stenno> or you need xcode for it? oslt
[20:46:18] <jaawerth> gehn: learned that one the hard way
[20:46:21] <stenno> xcode for proper c
[20:46:31] <jaawerth> via a homebrew dep
[20:46:45] <stenno> homebrew has become quite terrible
[20:46:56] <stenno> i prefer a docker setup over homebrew nowadays for anything dev related
[20:46:59] <jaawerth> readline bindings I think. they compile fine on gcc, not so much with clang-as-gcc, which homebrew uses
[20:47:05] <gehn> I'd still probably take homebrew over, you know, not having homebrew
[20:47:10] <gehn> miss me with that docker for dev shit
[20:47:15] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[20:47:18] <systemfault> Maybe Homebrew would have been better had the author known how to invert a binary tree</troll>
[20:47:24] <gehn> for deploy, sure, not for dev tho
[20:47:31] <jaawerth> could be worse and macports seems like it'd be even more annoying, though I know it has proponents
[20:47:32] <stenno> well the weechat i am using to chat here is built with homebrew
[20:47:44] <Covrus> me too
[20:47:52] <stenno> all the macos stuff will be interesting with the m1 stuff
[20:47:53] <gehn> I never thought I'd say this, but I don't completely hate WSL2 these days, cuz I would offer that windows would be the only place that I'd consider docker for dev
[20:47:59] <gehn> but docker requires wsl on windows these days
[20:48:13] <gehn> an egg and its chicken
[20:48:15] <jaawerth> it makes sense that it would
[20:48:32] <jaawerth> WSL2 is just super optimzied-for-purpose hyperv, why would docker reinvent the wheel
[20:48:32] <gehn> well, it didn't before tho
[20:48:57] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[20:48:58] <stenno> cant do the native containerization on windows (and macos, for that matter)
[20:49:05] <gehn> because they already reinvented that wheel?
[20:49:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[20:49:14] <gehn> ig then they don't need to support their invention anymore
[20:49:20] <stenno> so docker on macos/windows will always be a virtual machine
[20:49:26] <systemfault> Yup
[20:49:30] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[20:49:45] <gehn> I don't know anything about wsl internals or implementation
[20:49:47] <jaawerth> I mean if WSL1's abstraction were amazingly compliant to the linux kernel it wouldn't have been necessary, but that was never going to happen
[20:50:02] <jaawerth> and even then
[20:50:05] <stenno> yes
[20:50:08] <gehn> I use it for my Linux builds these days, and thank god I can finally uninstall cygwin
[20:50:10] <gehn> that's about it
[20:50:24] <jaawerth> gehn: WSL 1.x was basically reverse-wine in concept
[20:50:26] <systemfault> WSL 1 was a bit like a reverse Wine
[20:50:32] <systemfault> Ah...
[20:50:35] <gehn> ah that explains why WSL sucked hard
[20:50:40] <gehn> WSL1 that is
[20:50:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:50:55] <jaawerth> so you'd see weird quirks like being able to re-bind to teh same host:port and have it silently fail. and, worst (which I also found out teh hard way), an 80% perf hit when windows defender activescan is enabled
[20:51:01] <gehn> I mean, don't get me wrong, WINE and mingw and friends... noble concept
[20:51:13] <jaawerth> which is why they gave up and went with souped-up hyperv for WSL2
[20:51:13] <systemfault> IO was slow as F on WSL1
[20:51:22] <gehn> can confirm WSL1 was slow AF
[20:51:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:51:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:51:44] *** Joins: wroathe (~wroathe@user/wroathe)
[20:51:45] <gehn> by no means my only, nor my largest, gripe about WSL1, but that was kind of a deal breaker when I tried it originally
[20:52:21] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:52:24] <jaawerth> I once cloned a giant repo of aws policies in WSL1, went to lunch, and came back to find it still cloning
[20:52:34] <jaawerth> an hour+ after I'd started, lol
[20:52:45] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Ping timeout: 250 seconds)
[20:52:50] <jaawerth> that was when I gave up
[20:52:59] <jaawerth> (for that job anyway)
[20:53:02] <systemfault> Even simple NPM installs were very slow
[20:53:20] <pulse> what did they do to make wsl2 that much better?
[20:53:26] <jaawerth> nuking windows defender active scan helped a lot but I couldn't even do that on that machine because group policy and lots of monitoring
[20:53:29] <systemfault> But hey... it allowed me to develop on a Linux-like env... when I was forced to work on Windows
[20:53:41] <jaawerth> pulse: replaced the wine-like kernel abstraction with an optimized hyperv
[20:53:49] <jaawerth> seems backwards but it got rid of lots of deopts
[20:53:53] <gehn> there were a handful of things that just straight failed spectacularly for me on WSL1, like redis, memcached, haproxy and a few others. I gave up and wrote it off so I don't remember all the details
[20:54:09] <gehn> so far WSL2 seems to be not completely broken in this regard, which is nice
[20:54:33] <jaawerth> oh yeah the abstraction wasn't perfect - teh big one I remember was when I was helping someone and I realized they were re-binding to the same host:port, which in linux raises an exception and in windows silently fails
[20:54:41] <jaawerth> WSL had the windows behavior
[20:55:29] *** Joins: crashrep (~crashrep@user/crashrep)
[20:55:39] <stenno> i want wsl2 to be really good
[20:57:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:57:10] *** ___Rockwood__ is now known as Rockwood
[20:57:10] <stenno> make it so
[20:57:21] * stenno leans back
[20:57:51] * gehn hands stenno some infinity stones
[20:58:48] <gehn> it's clear to me that MS has changed their game in may regards when it comes to tech and dev, MSVC is a pretty good example: first to full C++17 compliance beating both gcc and clang
[20:59:05] <stenno> MS is really cool nowadays
[20:59:06] <gehn> but it was not long ago that it was a shit sandwich, and still is by many measures
[20:59:12] <pulse> MS owns blizzard now :D
[20:59:18] <stenno> MS has done a lot of things right
[20:59:20] <gehn> old news
[20:59:21] <stenno> in the last 10 years
[20:59:31] <stenno> otherwise we probably wouldn't talk about them anymore
[20:59:35] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[20:59:55] <gehn> right but in my mind they'll be perpetually playing catch up with the civilized world (aka Linux)
[21:00:01] <pulse> lol
[21:00:09] <pulse> on desktop windows is still king and will remain king
[21:00:14] <stenno> not sure about that anymore, gehn
[21:00:20] <stenno> even though i cannot give any evidence
[21:00:21] <jaawerth> I think they have realized they're better off just incorporating and contributing to linux so they can get help maintaining pieces of infra
[21:00:23] <gehn> king of 12 year old fortnite players named Jason?
[21:00:29] <ljharb> pulse: lol that very much depends on the context
[21:00:30] <jaawerth> particularly since most of the money these days is in services and not in the low-level parts of the oS
[21:00:33] <jaawerth> *OS
[21:00:44] <pulse> gehn, and autocad professionals, and photoshop experts, and music producers, and video editors, and, and, and ...
[21:00:44] <ljharb> pulse: there's plenty of places that macs are the dominant desktop platform
[21:00:52] <pulse> sure, macs is up there too
[21:00:55] <gehn> it's not really the fault of users that they are given a computer and it comes with windows, a choice over which most people have little sway and little interest in changing
[21:00:57] <pulse> but windows is #1, on the desktop at least
[21:01:00] <ljharb> (and virtually none where linux is)
[21:01:04] <systemfault> Macs? In North America web shops.
[21:01:15] <jaawerth> also they realized devs + unix environments isn't goign away and they're better off just rolling with it
[21:01:15] <stenno> windows is completely irrelevant for mobile
[21:01:15] <systemfault> Everywhere else on the planet... Windows dominates
[21:01:17] <gehn> like, having a monopoly which makes you #1 isn't much to brag about
[21:01:25] <pulse> gehn, so much, i mean soooooo much of the industry of the civilized world depends on windows, it's not even funny
[21:01:28] <jaawerth> well I say they, I think it was mostly the influence of whatshisname
[21:01:30] <jaawerth> Satya
[21:01:38] <ljharb> systemfault: which parts of the planet are equally relevant but also use mostly windows machines?
[21:01:47] <ljharb> systemfault: not saying there's none ofc, just asking for some examples
[21:01:51] <jaawerth> I dont' trust them to always have this philosophy though. it could last roughly as long as he does
[21:02:02] <gehn> pulse, indeed it's scary AF given how crap windows is
[21:02:06] *** Joins: salad (~cucumber@82.76.150.118)
[21:02:08] <pulse> the road you use to drive to work was probably designed in autocad on windows, and so were the traffic signals, and so was the sewer system, the railroad, the electric grid, the cogs in your car, .....
[21:02:08] <systemfault> ljharb: Take a list of countries, remove Canada and US... you have it.
[21:02:22] <pulse> linux is great but i find it funny how myopic people can get about it
[21:02:27] <ljharb> systemfault: i said relevant, like, to the web
[21:02:31] <gehn> ignoring availability of games, Linux user experience certainly leaves a lot to be desired, then as now
[21:02:33] <ljharb> systemfault: "every country" does not qualify
[21:02:43] <gehn> though it's increasingly streamlined depending on which distro and or DE you get
[21:03:03] <pulse> windows is enormously big in enterprise too
[21:03:09] <gehn> I'm probably in the minority of people who unironically used Unity (no not that one, the Linux DE)
[21:03:16] <pulse> i think i read somewhere the majority of MS's revenue is basically enterprise software
[21:03:27] <pulse> and linux barely touches that space
[21:03:30] <pulse> apart from servers obviously
[21:03:49] <gehn> yep pretty much MS makes its money on business customers not on workaday john doe
[21:04:01] <jaawerth> I mean, Office365 is large swaths azure
[21:04:02] <gehn> SBS is good, as windows versions go
[21:04:04] <stenno> does their OS even cost money nowdays?
[21:04:05] <pulse> yeah, that's why they don't care if entire countries pirate their products, lol
[21:04:07] <jaawerth> which isn't always linux but is.. a lot of linux
[21:04:30] <systemfault> Windows at Microsoft used to be a division of the company by itself... now it's just part of their cloud shit.
[21:04:34] <jaawerth> anyway, say what you will about windows, I'll give them this, I don't think anything beats them on the backwards compat front
[21:04:45] <pulse> jaawerth, yeah, that's one of my major gripes with linux tbh
[21:04:47] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[21:04:55] <gehn> piracy is more or less actually good for MS in the end because it just means more people using windows, which drives more developers to develop for windows, which begets more software, which begets more users, rinse repeat
[21:05:12] <pulse> yeah i don't see software piracy as a negative for the most part
[21:05:16] <stenno> jaawerth: 'there is no windows 9 because of backward comp'
[21:05:19] <pulse> it's probably beneficial in the long term
[21:05:21] <jaawerth> and upsells more cloud services, and ships mmmore user metrics
[21:05:28] <stenno> if you know what i am talking about
[21:06:04] <gehn> stenno, yes windows still costs $$ regardless of version
[21:06:25] <gehn> it may not seem like it given that for most people it's an invisible cost baked into the purchase of a new computer that no one really questions
[21:06:26] <stenno> i see
[21:06:35] <jaawerth> stenno: haha I don't actually know the deal with the version skip there, I wasn't paying much attention at the time
[21:06:38] <gehn> Windows Home (aka windows ass) is still like $99
[21:06:41] <gehn> pro is like $200
[21:06:43] <systemfault> OEM Windows is fairly cheap though
[21:06:48] <gehn> and they have some others too
[21:07:07] <banana_> idk if I'm paranoid but my bluetooth wouldn't work until I upgraded to windows 11
[21:07:08] <gehn> no bitlocker and no Visual Studio on Windows Home
[21:07:13] <stenno> jaawerth: it is said that they skipped 9 because they have really old programs checking the version by testing if it starts with 9 for 95/98
[21:07:17] <stenno> jaawerth: lemme find the sourec
[21:07:18] <banana_> probably just me was weirdest thing
[21:07:19] <jaawerth> ohhh
[21:07:24] <jaawerth> yes that makes total sense
[21:07:25] <gehn> at least, historically that has been the case, bitlocker probably still - idk about VS
[21:07:51] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[21:07:58] <systemfault> gehn: I don't know if that changed... but you couldn't install WSL or the new sandbox thing on Home without doing hacks
[21:08:07] <gehn> yeah, stuff like that
[21:08:09] <jaawerth> stenno: no it makes sense since there was windows 98 and windows98SE
[21:08:15] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[21:08:18] <jaawerth> and, yeah, 95
[21:08:33] <jaawerth> and it seems like something they'd do pre-Y2K
[21:08:34] <stenno> jaawerth: https://www.extremetech.com/wp-content/uploads/2014/10/windows-10-skipped-9-reddit-95.jpg
[21:08:40] <gehn> Windows V-Tec DOHC 16
[21:08:43] <stenno> its an anonymous reddit post so what gives
[21:08:50] <jaawerth> Y2K having tought everyone a valuable lesson about such things
[21:08:50] <stenno> but i like to enjoy the thought at least
[21:09:00] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[21:09:05] <stenno> 2k38 will be the actual y2k
[21:09:09] <gehn> inb4 bill gates teaches us how to count to ten
[21:10:07] <systemfault> He's too busy putting chips in vaccines lolollolol111one
[21:10:12] <banana_> you man 2k48?
[21:10:14] <jaawerth> stenno: yeah I absolutely believe that
[21:10:17] <stenno> banana_: no
[21:10:29] <stenno> banana_: https://en.wikipedia.org/wiki/Year_2038_problem
[21:10:34] *** Joins: trevors (~trevors@user/trevors)
[21:11:32] <banana_> oh nice
[21:11:40] <systemfault> Some companies are going to make a truckload of money to update systems that will crash in 2038... same that happened in 1999
[21:11:49] <banana_> 16 years away
[21:12:00] <systemfault> 2037 is going to be a good year for IT
[21:12:09] <gehn> well, for some people in IT, yes
[21:12:13] <stenno> 'migrate to 64bit' will be the task
[21:12:14] <systemfault> Hmm.. right.
[21:12:17] <stenno> lol gehn
[21:12:24] <jaawerth> that own't even always help though
[21:12:35] <stenno> lets exit the market in 2036
[21:12:37] <stenno> jaawerth: true
[21:13:28] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[21:13:43] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[21:14:12] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 268 seconds)
[21:14:20] *** Quits: pmercado (~pmercado@186.11.41.95) (Read error: Connection reset by peer)
[21:14:35] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:14:49] *** Joins: pmercado (~pmercado@186.11.41.95)
[21:14:58] *** Joins: pluri (~pluri@user/pluri)
[21:15:40] <stenno> its a problem that i am currently thinking of like 'it will be resolved in the future, there is still more than enough time left'
[21:15:48] <stenno> but turns out that the future is really approaching fast
[21:17:42] <pulse> depends if you're having fun or not
[21:18:08] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:18:09] <systemfault> The way things are happening, I believe that Idiocracy is a documentary that was way too optimistic about the future of humankind
[21:18:09] <stenno> you mean i should actively seek out boredom so i have more time left?
[21:18:22] <pulse> that's one way to dilate time
[21:18:24] <stenno> :D
[21:18:54] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[21:19:06] *** Joins: tex (~super@user/dix)
[21:19:14] <stenno> y2k38 unfortunately is one of the lesser problems we face in our future
[21:19:49] <stenno> anyway supermarket time for me
[21:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:24:55] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[21:25:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[21:25:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:26:11] *** Joins: fef (~thedawn@user/thedawn)
[21:26:26] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:28:27] *** Joins: onosendi (~onosendi@user/onosendi)
[21:34:28] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[21:35:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[21:37:20] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[21:37:42] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Remote host closed the connection)
[21:37:52] *** Joins: faLUKE (~paolo@host-79-23-176-199.retail.telecomitalia.it)
[21:38:09] <faLUKE> hello, I'm testing Webmidi javascript API on Chrome. Here is a page test, which works without attaching midi devices to the machine:  https://www.onlinemusictools.com/webmiditest/.  It should work by default, and it works on Linux (I can see midi inputs,  https://ibb.co/xFQ2Pjn ) . But on windows, no inputs are detected. What could be the cause?
[21:38:26] *** Joins: eXtr3m0 (~eXtr3m0@p4fd3aba6.dip0.t-ipconnect.de)
[21:39:16] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[21:39:24] *** Quits: eXtr3m0 (~eXtr3m0@p4fd3aba6.dip0.t-ipconnect.de) (Changing host)
[21:39:24] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[21:40:45] *** Joins: Relms-Wah (~relms@user/relms)
[21:41:36] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:49] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[21:50:30] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 260 seconds)
[21:51:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:53:18] *** Quits: benni (~benni@p5084a116.dip0.t-ipconnect.de) (Quit: Client closed)
[21:53:27] *** Joins: alystair (~alystair@user/alystair)
[21:54:30] <hax> tempted to say 'windows' haha, but really, might windows have some midi thing built in that conflicts? are chrome versions the same? any errors in the inspector console?
[21:54:59] <hax> any extensions that are different, like noscript or whatnot?
[21:56:36] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[21:58:19] *** Joins: Naan (~Naan@user/naan)
[22:00:11] <ljharb> Arisco: you need to auth with nickserv for non-ops to see what you say. see the last link in the topic
[22:00:48] *** Joins: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:03:12] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[22:03:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[22:05:11] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 252 seconds)
[22:05:49] <faLUKE> hax: chrome versions are the same, the console doesn't report anything. Just no midi inputs. but no errors
[22:06:20] <faLUKE> hax: the API works, I can inspect its objects
[22:06:38] <faLUKE> but it doesn't show any input available
[22:08:17] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[22:11:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:11:19] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:11:52] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[22:13:36] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:14:38] *** Quits: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[22:14:46] <Maxdamantus> faLUKE: "without attaching midi devices to the machine", so you're just using the "midi through port" on Linux?
[22:15:02] <Maxdamantus> afaik Windows doesn't have a "through port" (ie, loopback device) by default.
[22:15:09] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:15:15] <Maxdamantus> so you need to run some separate software to create one.
[22:15:21] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[22:16:30] <Maxdamantus> The Linux kernel will normally create a single loopback device by default.
[22:16:42] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[22:17:53] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[22:18:25] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[22:21:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:22:19] <jwpapi> jaawerth: your suggestions work. However I get a lot of 503 errors now for my AJAX api call to my own server. Can it be that implementing the sdk increases the load too much?
[22:22:34] *** Joins: sudomann (~sudomann@98.219.211.182)
[22:22:36] <jwpapi> https://connect.facebook.net/en_US/sdk.js
[22:22:48] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:22:49] <jwpapi> I just copy pasted this into my `index.js`
[22:22:53] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[22:23:00] <jwpapi> I’m not sure how to else implement this
[22:23:34] *** Joins: salad1 (~cucumber@82.76.150.118)
[22:23:34] *** Quits: salad (~cucumber@82.76.150.118) (Read error: Connection reset by peer)
[22:23:54] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[22:24:00] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[22:24:13] <jwpapi> 12 fetches synchronosly shouldn’t be too much, shouldd they?
[22:24:27] <jaawerth> umm well that minified thing is not something I'm about to try making sense of but I've seen that kinda thing happen when you get stuck in an authentication loop, usually because you're missing an authorization check somewhere
[22:24:38] <jaawerth> I'd double check your network tab either way
[22:25:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:25:49] <jaawerth> and also check for, like, recursive redirects and such
[22:25:51] *** Quits: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[22:25:59] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[22:28:45] <jaawerth> jwpapi: my guess is if you look at the actual calls going out there will turn out to be more than 12
[22:30:27] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:34:24] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 250 seconds)
[22:35:00] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[22:35:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:39:40] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[22:39:47] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[22:40:39] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[22:43:32] <faLUKE> Maxdamantus: thanks, this makes sense. I googled a bit but could not find any software for creating a midi through port on Win
[22:43:59] <Maxdamantus> faLUKE: iirc there's something called "loopmidi" for Windows.
[22:44:25] <faLUKE> Maxdamantus: right, now I remember that I used it some years ago, thanks
[22:44:28] <austincheney> jwpapi, why synchronous?
[22:44:46] *** Quits: kakashiA1 (~kakashi@37.84.156.126) (Ping timeout: 256 seconds)
[22:45:07] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:15] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[22:46:40] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:47:23] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 256 seconds)
[22:47:23] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:48:19] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[22:49:56] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 245 seconds)
[22:52:03] *** Joins: zebrag (~chris@user/zebrag)
[22:59:25] *** Quits: salad1 (~cucumber@82.76.150.118) (Quit: salad1)
[23:03:41] *** Joins: kakashiA1 (~kakashi@37.84.156.126)
[23:04:19] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[23:04:57] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:05:05] *** Quits: dmanto (~dmanto@181.110.128.9) (Remote host closed the connection)
[23:05:22] *** Joins: dmanto (~dmanto@181.110.128.9)
[23:05:46] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[23:07:16] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:08:14] <faLUKE> Maxdamantus: all solved with loopmidi
[23:10:39] *** Quits: faLUKE (~paolo@host-79-23-176-199.retail.telecomitalia.it) (Quit: Konversation terminated!)
[23:11:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:12:10] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 260 seconds)
[23:12:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:13:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:14:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:15:42] *** Joins: trevors (~trevors@user/trevors)
[23:17:18] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[23:20:03] *** Joins: underport (~underport@2a0c:5a80:1c17:5800:74b6:fd3f:5865:6f30)
[23:22:08] <MrMobius> if i want to do automatic syntax highlighting using js in an html document where i list the code in plaintext in a <p> tag, is there a smarter way to set that up than setting those paragraphs to a particular class then iterating through all the paragraphs when the page loads and modifying any with that class to add the highlighting?
[23:22:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:23:10] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[23:23:29] <austincheney> MrMobius, by syntax highlighting you mean presenting a code sample to your readers with colors applied to syntax characters?
[23:24:22] <jwpapi> jaawerth: it was total 15 calls but it all worked fine before adding the fb auth. I’m gonna check tmrw
[23:24:36] <austincheney> MrMobius, you will not want to use "p" tags for code.  For accessibility dump the code in a "code" tag and then style it however you want.
[23:25:44] <MrMobius> austincheney, yes, that kind of highlighting
[23:25:52] <austincheney> but you have to sanitize your code.  Primarily that means something like myCode.replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/&/g, "&amp;");
[23:25:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:26:03] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[23:26:39] <MrMobius> austincheney, no problem. i have to do that now anyway since im wrapping individual words and symbols in spans to color them
[23:26:57] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:27:06] <MrMobius> so once i have them in a code tag, scan the page for all code objects and apply formatting from js?
[23:27:38] <austincheney> MrMobius, you could probably do it entirely in CSS
[23:28:05] <MrMobius> hmm, how would that work?
[23:28:34] <austincheney> MrMobius, how you are applying these "span" tags?
[23:29:53] <MrMobius> sorry, im using font for those not span
[23:30:26] <austincheney> yeah dont do that.  Font tags were deprecated a million years ago
[23:30:37] <austincheney> that is 90s era HTML
[23:30:57] <MrMobius> <code>print("hello")</code> becomes <code><font class="syntax-keyword">print</font>(<font class="syntax-string">"hello"</font>)</code>
[23:31:24] <MrMobius> alright. what would be better?
[23:32:40] *** Joins: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[23:32:55] <austincheney> MrMobius, in this case specifically <code> to wrap the code sample and <span> for each area that receives color.
[23:33:10] *** Joins: ttys000 (~ttys000@user/ttys000)
[23:33:38] <austincheney> MrMobius, normally you want to use the most descriptive HTML element possible for a given piece of content and then just use span tags for things that are presentation only
[23:34:24] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[23:34:38] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:34:52] <MrMobius> that will work. so, using js to find all the code tags then parsing the content and inserting span tags is al alright solution?
[23:34:57] <austincheney> MrMobius, if somebody were literally reading the HTML what is it that would that would make the most sense when read outloud, because that is the world for people who use screen readers
[23:35:57] <austincheney> MrMobius, I would start with that, but if you are writing this code yourself you will need to discover what the most correct approach is
[23:36:22] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 250 seconds)
[23:36:54] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[23:38:05] <MrMobius> austincheney, what do you mean by most correct approach? i think that's what im asking here. ive found one way that i think will work but dont know that much about interacting with the DOM from js so im asking if there's a way that makes more sense
[23:39:45] <austincheney> MrMobius, my first open source project was this massive multi-language parser used for code beautification and diffs and such.  The right approach was an evolving concept as I became a better programming over a decade I was maintaining that project
[23:42:13] *** Quits: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[23:46:13] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[23:46:39] <hax> MrMobius, do you need to implement the highlighting logic yourself? how about using highlightjs.org
[23:46:53] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[23:50:00] *** Joins: audiobirb (~audio@user/audio)
[23:50:58] <MrMobius> hax, the logic part is not hard. i can parse things
[23:51:27] <MrMobius> looks like hilightjs.org has mips and x86 assembly which i need but not 6502 or MSP430 assembly or forth
[23:51:33] <MrMobius> plus it will be fun i think
[23:51:51] <hax> sure, but if a library covers your needs maybe you can move on to another problem. hah I get it
[23:51:59] *** Joins: defn (~n0b0dy@user/defn)
[23:52:15] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[23:52:25] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:52:28] <hax> you could fork it or make a PR to add that feature too
[23:52:43] <MrMobius> easier just to do it myself
[23:54:07] <systemfault> I'm a bit skeptical... but good luck
[23:55:17] <systemfault> Maybe I'd be crazy enough to just use instances of the monaco editor... then write|find language files I need
[23:57:05] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
