[00:00:00] *** Joins: Enitin (~Enitin@82.102.22.85)
[00:00:11] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:00:20] *** Joins: s0k1t_ (~s0k1t@86.106.121.31)
[00:00:22] *** Parts: fraggle (~fraggle@user/fraggle) (Leaving)
[00:01:26] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[00:01:43] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:02:39] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[00:04:09] *** Quits: s0k1tisgay (~s0k1t@193.27.13.184) (Ping timeout: 250 seconds)
[00:05:23] *** Joins: ThanatosJ (~Thanatos@105.112.184.76)
[00:05:35] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-1575-ba88-c6f1-7422.res6.spectrum.com)
[00:07:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[00:08:17] *** Quits: Thanatos (~Thanatos@197.210.47.93) (Ping timeout: 240 seconds)
[00:09:47] *** Quits: Denver (~Denver@174-16-236-178.hlrn.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:09:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:10:14] *** Quits: junebug (~junebug@2600:1700:3db0:2540:128d:5e50:6657:edb) (Quit: Leaving)
[00:10:34] *** Joins: Narrat (~omnius@p200300df5f4d4b8706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:10:35] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:6ca3:1933:1d08:7ad8) (Read error: Connection reset by peer)
[00:11:07] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:12:22] *** Joins: control (~v1@user/control)
[00:13:07] *** Joins: nomic (~nomic@51.52.78.152)
[00:13:18] *** Joins: greenbagels (~gb@user/greenbagels)
[00:13:29] <control> hi, how can i add variable into uniform()? a = 0,13 instead of doing uniform(0,13)?
[00:14:51] <SnoopJ> control, you can do `uniform(lo, hi)` if you have your parameters as separate variables. If they are in a tuple like that, you can do: `lo, hi = a; uniform(lo, hi)`
[00:15:55] <Wulf> control: you could do a = 0,13; uniform(*a). But that's ugly.
[00:16:19] <control> its impossible to do uniform(a)?
[00:16:28] <SnoopJ> control, you can do what Wulf suggested, and as they said, it's quite ugly.
[00:16:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[00:16:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[00:16:42] <control> but if its works
[00:16:47] <SnoopJ> (this "unpacks" the tuple)
[00:18:01] *** Quits: ketiv (~ketiv@92.40.196.142.threembb.co.uk) (Ping timeout: 250 seconds)
[00:18:02] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[00:18:07] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[00:18:22] *** Quits: control (~v1@user/control) (Quit: leaving)
[00:18:34] <Wulf> you're welcome.
[00:19:22] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[00:20:19] *** Joins: grooverman (~grooverma@177.102.119.40)
[00:21:09] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[00:21:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:24:16] <lantech19446> well I don't feel particularly confident about writing my own code yet but I was looking at scrapy examples and I can actually understand most of it so I'm kinda happy about that
[00:25:28] *** Quits: akk (~akk@174-28-122-47.albq.qwest.net) (Remote host closed the connection)
[00:26:44] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Quit: WeeChat 3.4)
[00:26:50] *** Joins: stockholm (~Andreas@p200300d2c705110004e8a56968b77eea.dip0.t-ipconnect.de)
[00:28:48] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[00:28:55] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:39bc:7f06:1559:f901) (Ping timeout: 256 seconds)
[00:31:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:31:52] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:32:12] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[00:33:01] *** Quits: driib2 (~driib@185.65.135.252) (Ping timeout: 256 seconds)
[00:35:01] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:35:03] *** Quits: emx (~emx@adsl-84-226-68-198.adslplus.ch) (Ping timeout: 268 seconds)
[00:35:30] *** Quits: runelind (~runelind@user/runelind) (Quit: ZNC 1.8.2 - https://znc.in)
[00:35:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:35:55] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:35:57] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (Quit: Leaving)
[00:36:14] *** Joins: runelind (~runelind@user/runelind)
[00:36:14] *** Quits: seednode (~seednode@user/seednode) (Read error: Connection reset by peer)
[00:36:15] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:36:44] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8352:571e:4c5b:4bff:5de3:55a6) (Read error: Connection reset by peer)
[00:37:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:37:27] *** Joins: martums (~martums@user/martums)
[00:37:29] *** Joins: schumaml (~schumaml@p200300e2ef1de00053c1821a43d17d29.dip0.t-ipconnect.de)
[00:37:57] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[00:38:04] *** Quits: runelind (~runelind@user/runelind) (Client Quit)
[00:38:11] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:38:31] *** Joins: seednode (~seednode@user/seednode)
[00:38:53] *** Joins: nomic (~nomic@51.52.78.152)
[00:39:12] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Client Quit)
[00:40:59] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:41:23] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[00:41:32] <mickey8> is there a limit to what i can pipe to input()? because json.loads(input()) seems to have *some* error, but if i json.load() from a file, the same content that i pipe, it works just fine?
[00:41:45] <bjs> mickey8: some error?  what error?
[00:43:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:43:49] <Repiphany> Input won't take multiple lines, probably
[00:44:23] <Repiphany> newline denoting the end of input
[00:44:37] <nedbat> mickey8: use sys.stdin as a file instead of input()
[00:44:41] *** Joins: ItsColdOutside (~max@gateway/vpn/pia/coldoutside)
[00:45:30] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Client Quit)
[00:45:44] *** Joins: Thanattt (~Thanatos@105.112.184.76)
[00:45:45] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[00:46:28] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:78d0:dbf8:2bc2:cf2c) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:46:50] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:47:10] *** Quits: ThanatosJ (~Thanatos@105.112.184.76) (Read error: Connection reset by peer)
[00:47:11] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:47:45] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Client Quit)
[00:48:27] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:48:29] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[00:49:23] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Client Quit)
[00:50:04] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[00:50:07] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:51:09] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[00:51:36] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:53:01] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[00:53:23] *** Joins: runelind (~runelind@user/runelind)
[00:53:28] *** Quits: ItsColdOutside (~max@gateway/vpn/pia/coldoutside) (Quit: Konversation terminated!)
[00:53:54] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 260 seconds)
[00:54:07] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:55:32] *** Quits: magla (~gelignite@55d4d2a6.access.ecotel.net) (Quit: Stay safe!)
[00:55:58] <mickey8> bjs im not sure tbh
[00:56:08] <mickey8> Repiphany it's a single line. a whole json serialized string though
[00:56:28] <mickey8> almost 50k chars long
[00:56:30] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[00:56:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[00:57:03] *** Joins: smoke (~smoke@user/smoke)
[00:57:29] <bjs> mickey8: you're not sure what the error is? doesn't Python say? like `TypeError: blah` or something?
[00:57:34] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:57:34] <nedbat> mickey8: json.load(sys.stdin) will work better
[00:57:49] <mickey8> nedbat ill try that
[00:57:53] <mickey8> bjs it doesnt. not sure why.
[00:58:04] <bjs> mickey8: okay what does happen that makes you say there's an error?
[00:59:08] *** Quits: NeoCore (~neocore@195.200.221.196) (Quit: Leaving)
[00:59:23] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Quit: WeeChat 3.4)
[00:59:49] <mickey8> bjs it returns a str instead of a list
[01:00:00] <mickey8> nedbat how do i let it know it's the eof though?
[01:00:19] <nedbat> mickey8: what are you using to create the data?
[01:00:32] <mickey8> golang's json.Marshal()
[01:01:06] <nedbat> mickey8: when your go program ends, it will close the pipe, which sends eof
[01:02:09] <mickey8> my go program doesn't end. it passes the data to python for some processing, expects an answer, and continues its thing
[01:02:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:03:46] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[01:04:43] <mickey8> i was using input() so i could pass data and receive answers back and forth, but i can live with the python script running again every time
[01:05:09] <mickey8> that worked pretty well with shorter input text, but not for this
[01:05:16] <bjs> mickey8: can you share what the input value actually was?
[01:05:23] <bjs> like if `v = input()` then `print(repr(v))` ?
[01:05:32] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:ebe0:24ed:11c1:2f28)
[01:05:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[01:05:51] <bjs> maybe it's not actually JSON, or not in the format you expect?
[01:06:38] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:06:53] <mickey8> it's definitely json, and in the right format. json.load() works with a file handle, but json.loads() doesnt work with the text
[01:07:02] <bjs> mickey8: can you share what the text is?
[01:07:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[01:07:54] <bjs> mickey8: I can tell you that json.load just calls json.loads
[01:08:06] *** Quits: teut (~teut@2401:4900:1c68:4942:1567:d5bb:75de:61d9) (Quit: Client closed)
[01:08:12] <mickey8> bjs can i pm you with it? nothing sensitive but i rather not post it here
[01:08:16] <bjs> mickey8: no
[01:08:30] <Repiphany> Presumably if you're getting a string, your input unwittingly has quotes enclosing it
[01:08:35] <mickey8> then i guess i can't share what the text is
[01:08:52] <bjs> mickey8: well, can you share the first 10 characters of it?
[01:10:03] *** Quits: grooverman (~grooverma@177.102.119.40) (Remote host closed the connection)
[01:11:12] *** Joins: grooverman (~grooverma@177.102.117.95)
[01:11:51] <nedbat> mickey8: how does your go program get an answer back from the python program? This sounds unusual.  can you give us the big picture?
[01:12:56] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:14:35] *** Joins: Viewday118 (~Viewday@user/viewday)
[01:15:12] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:16:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:16:06] *** Viewday118 is now known as Viewday11
[01:17:02] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:448c:3c3c:6126:9b85)
[01:17:21] <mickey8> bjs [{"Label":"2020/01/15","Value_0":...
[01:17:32] <bjs> mickey8: that's the output of print(repr(v)) ?
[01:17:59] *** Quits: skipworthy (~quassel@174-16-243-202.hlrn.qwest.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:18:27] *** Joins: Viewday116 (~Viewday@user/viewday)
[01:18:39] <nedbat> mickey8: i suspect there's a better way to connect these programs together, but it's hard to know
[01:19:45] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:19:45] <mickey8> nedbat i can try. go runs `python file.py` and then writes <json string> to stdout, python on the other hand takes that string with input() (or sys.stdin right now, but i have the EOF problem), does its thing and then throws back a json output to its stdout, go reads that output, unserializes it and continues
[01:20:11] <mickey8> when go is done with the script, it sends "EOF\n", which signals python to simply exit()
[01:20:21] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:20:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:20:37] *** Viewday116 is now known as Viewday11
[01:20:56] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[01:20:59] <mickey8> that worked just fine with text up to few hundred characters so far, but now i have this 50k~ chars long json to pass to python.
[01:21:15] <nedbat> mickey8: you could prefix each message with a length, then python can read that many bytes.
[01:21:41] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:39bc:7f06:1559:f901)
[01:21:41] <mickey8> i could, sure. just not sure how to make python read that many bytes.
[01:21:55] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[01:21:58] <nedbat> mickey8: s = sys.stdin.read(num_bytes)
[01:22:29] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[01:22:32] <mickey8> awesome. is num_bytes the same as the string's length?
[01:23:03] <nedbat> mickey8: i think you might have to check len(s) to see if you need to read more, not sure.
[01:23:23] <mickey8> i'll just send []byte. ill hit you up later if this still doesnt work
[01:23:28] <mickey8> thanks a lof for your time guys.
[01:23:50] <bjs> mickey8: the thing you showed me a minute ago, did you print(the_input_value) or did you print(repr(the_input_value)) to get it
[01:24:17] <bjs> or did you not get it from Python itself?
[01:24:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:24:33] <drew> If I do f"{7:{4}b}" I get ' 111' but I want it to pad with 0 instead of space to get '0111', how can I do that?
[01:24:53] <bjs> drew: {7:0{4}b}
[01:25:02] <mickey8> bjs print()
[01:25:02] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[01:25:15] <drew> thank you bjs
[01:25:16] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[01:25:16] <bjs> mickey8: use print(repr(...))
[01:25:24] <bjs> drew: see https://docs.python.org/3/library/string.html#format-specification-mini-language  for the full spec of what can come after the :
[01:25:37] *** Quits: rajkosto (~rajkosto@93-86-92-233.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[01:25:39] <bjs> drew: here the [fill] means an option "fill" value, and it comes right after the :
[01:25:50] <bjs> (which can be any single character)
[01:26:00] <mickey8> bjs before or after json.loads()?
[01:26:06] <bjs> mickey8: print(repr(the_input_value))
[01:26:18] <bjs> if `the_input_value = input()`
[01:26:39] <bjs> just forgetting the json module for now -- i'm just getting you to get Python to tell you what it *actually* read from stdin
[01:27:05] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:27:44] *** Joins: StickyIcky (~StickyIck@ec2-54-172-19-206.compute-1.amazonaws.com)
[01:27:48] *** Joins: StickyIcky2 (~StickyIck@ec2-54-172-19-206.compute-1.amazonaws.com)
[01:28:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:28:23] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:29:49] <mickey8> bjs yeah, i get a json error there. i think it might have to do with the input() not getting everything.
[01:30:01] <mickey8> i'm going to have to debug this further now before i keep asking questions blindly.
[01:30:22] <bjs> mickey8: I'm confused,  because I asked you to print(repr(the_input_value)) there's no json here, so how did you get a JSON error?
[01:30:27] *** Quits: Barones (~Barones@189.50.80.77) (Quit: Leaving)
[01:30:31] <bjs> ... there's no JSON happening at all
[01:30:40] <mickey8> bjs "{\"Err\":null}"
[01:31:03] <bjs> mickey8: that's from the Python print?
[01:31:07] <mickey8> yeah
[01:31:13] <bjs> mickey8: did you forget the repr ?
[01:31:20] <mickey8> nope
[01:31:26] <bjs> ehhh
[01:31:30] <mickey8> thats why i believe it's not even a python problem here.
[01:31:32] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[01:31:38] <mickey8> i'll go see whats going on and come back later.
[01:31:49] *** Joins: rajkosto (~rajkosto@93-86-92-233.dynamic.isp.telekom.rs)
[01:31:51] <StickyIcky2> Hey everyone, I'm having trouble catching a broken pipe exception in Flask 1.1 while it's deployed to AWS. There's only one single point in the app where requests are being performed, I've stepped through the code with a debugger to make sure, and I'm surrounding the code with a try/except statement. I've tried with socket.error, SSLError and even a general Exception to no avail. All that happens is that the exception is
[01:31:51] <StickyIcky2> raised, it's logged, and the application proceeds as normal as if it received an empty response. I have not been able to reproduce this error locally, but can frequently reproduce it in AWS. I'm 90% sure it's the size of the requests, but I'd still like to be able to catch this exception should it happen again, since we cannot have missing data in our application.
[01:31:55] <bjs> mickey8: that's not how Python repr prints strings, so I'm confused
[01:32:12] <bjs> the quotes are all wrong
[01:32:23] <mickey8> you might mean '"{\\"Err\\":null}"'
[01:32:45] <bjs> is that actually what got printed by the repr?
[01:33:15] <bjs> mickey8: what is the actual sequence of actual characters that the actual print(repr()) line output? :P
[01:33:16] *** Quits: rajkosto (~rajkosto@93-86-92-233.dynamic.isp.telekom.rs) (Client Quit)
[01:33:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:34:15] *** Quits: akk (~akk@174-28-122-47.albq.qwest.net) (Quit: +++)
[01:34:47] <mickey8> the last one i pasted i believe, but it's most likely not even a python problem. so apologies and i'll come back when i figure out whats going on with the go side of things first.
[01:35:12] <bjs> mickey8: if it's the last one, it implies your Go program is sending not JSON but rather some JSON source inside quotes to the Python process
[01:35:12] <StickyIcky2> Here's the full stack trace I'm getting: https://bpa.st/B7IA
[01:37:05] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[01:37:32] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[01:37:37] *** Joins: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com)
[01:37:56] <mickey8> bjs okay so now print(repr()) gives '"[{\\"Label\\":\\"2020/01/15\\",\\"Value_0\\": ... (i didn't add any of the quotes here)
[01:38:15] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:448c:3c3c:6126:9b85) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[01:38:34] <bjs> mickey8: yeah your Go program is actually sending that first " quote, and all the backslashes.  It's almost like you "escaped" your string before sending it to the Python process
[01:38:36] <Repiphany> So the input you're getting from go is surrounded by double quotes when it shouldn't be
[01:39:04] <nedbat> mickey8: it looks like you had a JSON string, and then JSON-encoded it again.
[01:39:21] <bjs> mickey8: which explains why you say you got a str;  [1,2,3] is a JSON array, but "[1,2,3]" is a JSON string
[01:39:27] *** Joins: nizda (~nizda@104-12-107-95.lightspeed.miamfl.sbcglobal.net)
[01:39:33] <bjs> yeah it does look like double-encoded JSON
[01:39:39] <mickey8> that's funny. okay at least now i know what i'm looking for.
[01:40:27] *** Quits: nizda (~nizda@104-12-107-95.lightspeed.miamfl.sbcglobal.net) (Client Quit)
[01:42:19] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[01:43:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:44:59] <TML> StickyIcky2: except IOError as e: if e.errno == errno.EPIPE: …
[01:45:16] *** Joins: fikran (~fikran@user/fikran)
[01:45:16] *** Quits: sazawal (~sazawal@122.161.85.84) (Quit: Leaving)
[01:45:20] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Read error: Connection reset by peer)
[01:45:23] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 252 seconds)
[01:45:48] <StickyIcky2> Thansk
[01:46:27] <StickyIcky2> TML: Thanks, but if it should have been caught by the general Exception, right? If it's not caught by the general one it doesn't matter how specific the error gets
[01:46:32] <StickyIcky2> Or am I wrong?
[01:46:59] *** Joins: ice9 (~ice9@user/ice9)
[01:47:15] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[01:50:11] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[01:51:59] *** Joins: humberto1 (~humbertow@189.132.138.198)
[01:52:03] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[01:52:25] <bjs> StickyIcky2: you probably have the try/except around the wrong part so it's not catching it at all
[01:52:57] <bjs> the traceback you gave doesn't seem to mention a part of *your* program, so I assume you're submitting a job to a thread pool or something and it's that job which has the exception (?)
[01:53:08] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Client Quit)
[01:53:48] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[01:54:38] <bjs> (given the traceback *starts* at urlopen, and for Thread-33 ...)
[01:55:11] *** Quits: humbertowoody (~humbertow@189.132.138.198) (Ping timeout: 256 seconds)
[01:55:59] <StickyIcky2> bjs: that makes sense, I understand that as of flask 1.0 threading is turned on by default, but if that's the case, then I'm in the dark as to how to handle this... Would I need to go into the urlib3 library itself? I don't think so, but that's the only thing that's coming to mind
[01:56:25] *** Joins: Thanatos (~Thanatos@105.112.184.76)
[01:56:48] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:57:31] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:57:35] *** Quits: Thanattt (~Thanatos@105.112.184.76) (Read error: Connection reset by peer)
[01:58:17] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[01:58:38] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[01:58:39] *** Quits: BillyZane (~BillyZane@185.202.221.179) (Remote host closed the connection)
[01:58:52] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[01:58:53] <bjs> StickyIcky2: well i'm more curious what *your* code is doing
[01:59:01] *** Joins: ice99 (~ice9@user/ice9)
[01:59:11] <StickyIcky2> Let me show you, give me a sec
[01:59:39] *** Joins: BillyZane (~BillyZane@185.202.221.179)
[02:01:09] *** Joins: rajkosto (~rajkosto@93-86-220-172.dynamic.isp.telekom.rs)
[02:01:40] *** Joins: ice9 (~ice9@user/ice9)
[02:01:43] *** Quits: ice99 (~ice9@user/ice9) (Read error: Connection reset by peer)
[02:02:00] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[02:02:39] *** Joins: Macuser (~Macuser@2600:1003:b461:a026:dcab:89c7:d4a3:7b5a)
[02:03:06] <TML> StickyIcky2: Are you calling back into your own Flask service from within your Flask code?
[02:06:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:06:09] *** Joins: raxor2k (~raxor2k@78.158.236.72)
[02:07:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:08:04] <StickyIcky2> bjs: here it is mostly: https://bpa.st/DHDA, it's not my code entirely, there are things that I'd like to do differently, but currently refactoring is not in the question.
[02:08:12] <raxor2k> ok so this code here: https://bpa.st/ONOQ  <---  works 110% perfectly when i run it locally on my pc. And it also worked until recently on the server, but now i am getting error code 401????
[02:08:14] <raxor2k> why ??
[02:08:24] *** Joins: vicfred (~vicfred@user/vicfred)
[02:08:25] <raxor2k> I am running the exact same code
[02:08:26] <StickyIcky2> TML: No
[02:09:06] <bjs> StickyIcky2: what is this moesif stuff
[02:09:19] <bjs> that I see in the traceback,  is that coming from your code or is it something else?
[02:09:26] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:09:56] *** Joins: ThanatosJ (~Thanatos@105.112.22.185)
[02:09:57] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[02:10:21] <bjs> raxor2k: well HTTP response 401 is that you are not authorized to perform that action https://httpstatuses.com/401
[02:10:23] <Yhg1s> raxor2k: it's very difficult to say without seeing the traceback, but I'm going to guess the server no longer likes you, or the request you send, or the data you send with the request.
[02:10:24] <TML> Guessing you probably shouldn't leak your firebase token that way
[02:10:34] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[02:10:52] *** Joins: nomic (~nomic@51.52.78.152)
[02:11:13] <raxor2k> well ok, so why does this "work perfectly" when i run it locally on my pc?
[02:11:16] <raxor2k> and not on the server?
[02:11:22] <bjs> raxor2k: who knows
[02:11:29] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Client Quit)
[02:12:02] *** Joins: nomic2 (~nomic@185.198.243.236)
[02:12:10] <raxor2k> and it worked until recently on the server as well
[02:12:14] <TML> raxor2k: You're getting the 401 back from the Firebase endpoint?
[02:12:25] <raxor2k> TML: no worries, im using a fake token
[02:12:29] <raxor2k> TML: yes
[02:12:55] <StickyIcky2> bjs: it's an internal library I'm gonna need to do some digging on
[02:12:55] *** Quits: withered_wolf (~withered_@97.112.15.92) (Read error: Connection reset by peer)
[02:12:57] *** Quits: Thanatos (~Thanatos@105.112.184.76) (Ping timeout: 240 seconds)
[02:13:00] <StickyIcky2> Thanks for catching that
[02:13:52] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[02:13:58] *** Quits: senj (~tc@user/senj) (Quit: WeeChat 3.4)
[02:14:05] <TML> raxor2k: So I see multiple people saying that FCM keys are sensitive to the hostname being "localhost" vs. the actual server name, but I don't use FCM so it's kind of Greek to me - check this thread out and see if anything meaningful to your problem shows up? https://stackoverflow.com/questions/37633188/firebase-401-unauthorized-error-fcm
[02:14:15] <StickyIcky2> bjs: actually, it's an analytics thing: https://github.com/Moesif/moesifpythonrequest
[02:14:33] <bjs> StickyIcky2: you are using it?  the traceback mentioned it but your code didn't
[02:14:46] <bjs> was just wondering where it came from
[02:15:04] *** Quits: henistein (~henistein@2001:8a0:c18a:f601:1861:a984:7f7c:5a12) (Quit: Client closed)
[02:15:31] <raxor2k> TML: i can display response as well, 2 sec, let me update paste
[02:16:03] *** Joins: parv (~quass@user/parv)
[02:16:09] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 256 seconds)
[02:16:43] <raxor2k> TML: he request was missing an Authentication Key. Please, refer to section &quot;Authentication&quot; of the FCM documentation, at https://firebase.google.com/docs/cloud-messaging/server   -->   https://bpa.st/AIVQ
[02:17:06] <TML> raxor2k: Yeah, that appears to line up with the statements in the SO thread I sent you
[02:17:31] <StickyIcky2> bjs: as far as I can tell it's some middleware thing that has all the requests tunneled through it, sounds like i'm going to need to talk to a team member to figure out what might be going on, and they're all on vacations
[02:18:02] <bjs> StickyIcky2: well perhaps that thing is intercepting all requests calls and obfuscating the errors?  I have no idea what it is or where it came from
[02:19:16] <raxor2k> TML: ok, because i run the code(exact same) locally from my pc
[02:19:21] <raxor2k> which is localhost
[02:19:37] <StickyIcky2> bjs: Neither do I... I'll read through that library's code and ping the team members once they're online. Thanks for helping me dig through this stuff, much appreciated, wish I could get ya a beer :)
[02:19:46] <TML> raxor2k: Right - which that thread says "Yes, <X> will work with localhost, but on your server you need to use <Y>"
[02:20:09] <StickyIcky2> TML: thanks to you too <3
[02:21:14] <TML> No worries, hope you figure it out
[02:21:26] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:21:28] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:21:35] <raxor2k> TML: now im getting 401 error from my local pc as well. Pheew..
[02:22:08] <TML> maybe your token hit a limit (e.g., expiry, number of requests, etc)
[02:22:21] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:f7ef:1a1c:4183:60be) (Ping timeout: 268 seconds)
[02:22:25] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:22:37] <TML> multiple people in that SO thread say something to the effect of "the problem was that I was using the legacy server key. when I used the new version of the server key the problem solved."
[02:22:42] <raxor2k> TML: ye maybe. I can ask my mate tomorrow to check it. At least im happy now
[02:22:47] <raxor2k> meaning there wasnt any bug in the code :)
[02:23:00] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[02:23:09] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:24:07] *** Joins: pepper (~pepper@user/pepper)
[02:24:39] *** Quits: delvian (~delvian@41.13.220.94) (Ping timeout: 256 seconds)
[02:25:40] <bjs> raxor2k: the error you said, had a link to some page and that page talks about an Authorization key in the header
[02:25:42] <raxor2k> TML: i found another strange thing now
[02:26:08] <raxor2k> aaaaaaaaaaaah
[02:26:14] <raxor2k> i found the problem
[02:28:38] <raxor2k> bjs: i hate to admit it, but youre answer made me find the problem
[02:28:45] <raxor2k> if was on the authorization part
[02:30:35] <bjs> raxor2k: well... you were getting a HTTP authorization error
[02:31:55] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[02:32:13] *** Quits: StickyIcky2 (~StickyIck@ec2-54-172-19-206.compute-1.amazonaws.com) (Quit: Leaving)
[02:32:13] *** Quits: StickyIcky (~StickyIck@ec2-54-172-19-206.compute-1.amazonaws.com) (Quit: Leaving)
[02:34:34] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:35:13] *** Joins: puzzled (~puzzled@2a01:cb18:959:fe00:1a33:851f:6af9:4303)
[02:36:29] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:36:51] *** Quits: upsala (~zcb@185.209.196.169) (Quit: WeeChat 3.4)
[02:38:35] *** Quits: raxor2k (~raxor2k@78.158.236.72) (Remote host closed the connection)
[02:38:39] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::30)
[02:39:10] *** Quits: puzzled (~puzzled@2a01:cb18:959:fe00:1a33:851f:6af9:4303) (Client Quit)
[02:39:13] *** Joins: Roedy- (Roedy@user/roedy)
[02:39:17] *** Quits: Roedy (Roedy@user/roedy) (Ping timeout: 252 seconds)
[02:40:32] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:40:45] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[02:42:14] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[02:42:39] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Max SendQ exceeded)
[02:42:59] *** Quits: maromau (~mauro@151.95.237.215) (Quit: Konversation terminated!)
[02:43:06] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[02:43:21] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[02:46:02] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:dd5b:2f02:9a81:7e0d)
[02:46:37] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[02:46:37] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:39bc:7f06:1559:f901) (Ping timeout: 256 seconds)
[02:46:57] *** Quits: zensei (~zensei@user/zensei) (Ping timeout: 240 seconds)
[02:47:22] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:48:08] *** s0k1t_ is now known as s0k1t
[02:48:35] *** Joins: zensei (~zensei@user/zensei)
[02:48:59] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b4ft5yllzgewv.ipv6.telus.net)
[02:49:14] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b4ft5yllzgewv.ipv6.telus.net) (Remote host closed the connection)
[02:49:25] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Remote host closed the connection)
[02:49:37] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b4ft5yllzgewv.ipv6.telus.net)
[02:50:50] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Lost terminal)
[02:51:16] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[02:52:06] <SnoopJ> hmm, when does PyRun_String() *not* give you None as a return value?
[02:52:27] *** Joins: junktext__ (~junktext@gateway/vpn/pia/junktext)
[02:52:57] *** Quits: nomic2 (~nomic@185.198.243.236) (Quit: Leaving)
[02:54:32] *** Quits: vegii (~quassel@2001:470:1f18:3aa:30f::5439) (Ping timeout: 240 seconds)
[02:58:39] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 256 seconds)
[02:58:48] <SnoopJ> oh, exec vs eval mode
[02:59:41] *** Quits: ThanatosJ (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[03:00:01] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:00:04] <SnoopJ> I guess I'm still curious about that, especially since the short form doesn't let you pass flags
[03:03:40] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[03:04:19] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:05:25] *** Joins: ThanatosJ (~Thanatos@105.112.22.185)
[03:05:53] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[03:06:17] <Yhg1s> SnoopJ: well, None or NULL if it's exec mode. Any value if it's eval mode.
[03:08:59] *** Joins: cliluw (~cliluw@47.147.73.223)
[03:09:01] <SnoopJ> Yhg1s, yea, I hadn't considered that Py_file_input might be why the code I pinched from CPython was always returning None. My little test works with Py_eval_input instead :)
[03:09:59] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[03:10:38] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[03:10:51] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:11:11] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 252 seconds)
[03:12:58] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 260 seconds)
[03:15:17] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[03:15:28] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[03:15:33] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[03:15:38] *** Joins: dmcc (~dmcc@88.97.3.48)
[03:16:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:17:47] *** Joins: arinov (~arinov@213.194.126.155)
[03:18:43] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[03:19:09] *** Joins: pepper (~pepper@user/pepper)
[03:19:55] *** Quits: ThanatosJ (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[03:20:23] *** Joins: damonlynch (~ngaio@static-68-235-44-69.cust.tzulo.com)
[03:20:56] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Quit: WeeChat 3.4)
[03:21:15] *** Joins: ThanatosJ (~Thanatos@105.112.22.185)
[03:21:37] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[03:23:43] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[03:24:15] *** Quits: Enitin (~Enitin@82.102.22.84) (Read error: Connection reset by peer)
[03:24:37] *** Joins: greenbagels (~gb@user/greenbagels)
[03:28:27] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:29:18] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[03:30:20] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:30:34] *** Joins: Enitin (~Enitin@82.102.22.85)
[03:31:02] *** Joins: millido (~millido@84.210.150.128)
[03:31:51] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:dd5b:2f02:9a81:7e0d) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[03:32:55] *** Quits: rajkosto (~rajkosto@93-86-220-172.dynamic.isp.telekom.rs) (Quit: Leaving)
[03:34:45] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[03:35:20] *** Joins: jello_ (~joe@cpe-67-247-57-25.nyc.res.rr.com)
[03:35:33] *** jello_ is now known as jello
[03:36:51] <jello> hello, I have two dicts which have matching keys and the values are dicts as well. how can I combine them so that i end up with a single merged dict for each key?
[03:37:47] <TML> jello: dict3 = {**dict1, **dict2}
[03:38:00] <jello> eg. a = { 'k1': {'a1':'v1'} }; b = { 'k1': {'a2':'v2'} }
[03:38:07] *** Joins: Terexen (~terexen@user/terexen)
[03:38:09] <SnoopJ> TML, that will replace entire subdicts, not merge them
[03:38:13] <jello> right
[03:38:52] <jello> I want c = { 'k1': {'a1':'v1', 'a2':'v2'} }
[03:38:58] <TML> Oh, I didn't read the question carefully enough, sorry
[03:39:00] <jello> as a function of a & b
[03:39:04] <SnoopJ> jello, who should win when the subdicts have key conflicts?
[03:39:05] <ChrisWarrick> jello: {k: {**a[k], **b[k]} for k in a}
[03:39:24] <jello> SnoopJ: shouldn't be any conflicts
[03:39:30] <SnoopJ> jello, then what ChrisWarrick said
[03:39:32] <jello> ChrisWarrick: that looks interesting
[03:39:46] *** Quits: The_Loko (~The_Loko@79.116.24.80) (Quit: Leaving)
[03:40:12] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[03:40:13] <Wulf> jello: keys in outer dicts always match or only some?
[03:40:17] <SnoopJ> the value can be `a[k] | b[k]` in 3.9+
[03:40:29] <jello> SnoopJ: right
[03:40:32] <SnoopJ> but the ** spelling is a lot more portable :)
[03:40:37] *** Quits: stockholm (~Andreas@p200300d2c705110004e8a56968b77eea.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:40:37] <jello> ack
[03:40:43] *** Joins: c10l (~c10l@user/c10l)
[03:40:45] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[03:40:46] <jello> Wulf: yeah, that's my next question :)
[03:41:11] <SnoopJ> you might want to do e.g. `a.get(k, {})` instead if you're not sure the keys exist
[03:41:17] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[03:41:24] <ChrisWarrick> …and perhaps merge keys from a and b so you get everything
[03:41:26] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[03:41:27] <InPhase> jello: If there are non-matching keys, merge a set of keys for the k in a.
[03:41:33] <SnoopJ> mm, a merge is a good idea, yea
[03:42:04] <jello> InPhase: so { ... for k in {a,b} } ??
[03:42:23] <SnoopJ> `... for k in a.keys() | b.keys()` I think
[03:42:34] <jello> is that 3.9+ ?
[03:42:40] <InPhase> jello: for k in {*a, *b}
[03:42:48] <jello> nice
[03:43:06] <SnoopJ> jello, no, that should be available in 3.6+
[03:43:12] <jello> why {} and not []?
[03:43:13] <SnoopJ> probably much older than that too
[03:43:21] <InPhase> jello: Because you want each key only once.
[03:43:32] <jello> ah, set not dict
[03:43:33] <jello> got it
[03:43:48] <InPhase> jello: Yeah, subtle * and not **
[03:44:02] * SnoopJ likes having "keys" right in his face there
[03:44:11] * jello agrees with SnoopJ 
[03:44:14] <InPhase> For this case the * vs ** might be confusing to a later reader.
[03:44:35] <InPhase> But, it's there as a compact option should you happen to be golfing, or you are the only reader.  :)
[03:44:36] <jello> thanks everyone for the assistance!
[03:44:59] <jello> InPhase: I'm going to be kind to future-me and use keys()
[03:45:42] <jello> this way i'm not back here in six weeks asking what {*a, *b} means :)
[03:46:02] <InPhase> :)
[03:47:35] *** Joins: cdown_ (~cdown@188.214.11.14)
[03:48:02] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[03:48:11] <SnoopJ> I guess the keys() spelling is a tiny bit slower because it involves calls, but I'll take that hit to avoid confusing myself :)
[03:48:49] * parv wishes another one for list( dict ) to produce a flattened list of keys & values, not just the keys
[03:49:24] <SnoopJ> if I had my ideal universe that would be a TypeError
[03:49:57] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[03:50:02] *** cdown_ is now known as cdown
[03:50:26] <parv> I won't mind that either
[03:51:07] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[03:52:01] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[03:52:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:54:37] *** Joins: fikran (~fikran@user/fikran)
[03:55:35] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:7998:b31a:77a5:1e61)
[03:56:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:57:47] *** Quits: damonlynch (~ngaio@static-68-235-44-69.cust.tzulo.com) (Quit: Leaving)
[04:00:04] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:7998:b31a:77a5:1e61) (Client Quit)
[04:02:52] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[04:03:22] *** Quits: Macuser (~Macuser@2600:1003:b461:a026:dcab:89c7:d4a3:7b5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:04:32] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:ebe0:24ed:11c1:2f28) (Ping timeout: 240 seconds)
[04:08:14] *** Quits: ThanatosJ (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[04:09:31] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[04:10:55] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[04:11:16] *** Joins: micah (~micah@debian/micah)
[04:11:20] <micah> i have a function available to me that i found via the python interpreter: BOND.functions.bondPriceInUSD(), if I try to call that, i get this result: <Function bondPriceInUSD() bound to ()> -- what does that mean?
[04:12:15] <micah> i thought I would get some kind of result
[04:12:29] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[04:12:56] *** Parts: akk (~akk@174-28-122-47.albq.qwest.net) (+++)
[04:13:18] <SnoopJ> micah, you're getting back a function object (whatever library this is, not the same kind of function you get with `def func(): ...`). The output you're seeing is the repr() of the object.
[04:13:47] <Yhg1s> not a regular function object, it's something specific to that package.
[04:13:51] *** Joins: ThanatosJ (~Thanatos@105.112.22.185)
[04:14:10] <SnoopJ> yea, the capital F and the binding thing are strong signals that this is coming from [whatever you're running in Python]
[04:14:28] <micah> ok, i thought I could call that function and get a result, if I'm getting a function object back, how do I actually call it?
[04:14:39] <parv> fx()()
[04:14:52] <SnoopJ> micah, you *are* getting a result, the Function object is the reuslt.
[04:14:54] <SnoopJ> result*
[04:14:57] <TML> my guess is that you need to read the manual for the BOND library
[04:15:11] <SnoopJ> If you want to know why, that's something we can't really answer, but it should be in the documentation for whatever BOND is
[04:15:41] <micah> ok, i'll read that, thanks!
[04:16:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[04:16:41] *** Quits: oncall-pokemon (uid134758@id-134758.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:18:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[04:20:53] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[04:22:05] *** Joins: fecktd (~fecktd@120.159.2.164)
[04:23:27] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[04:23:52] *** Quits: fecktd (~fecktd@120.159.2.164) (Client Quit)
[04:24:08] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:28:31] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.3)
[04:28:38] *** Joins: SudoBash (~SudoBash@45.43.99.181)
[04:28:50] <SudoBash> is there are way to turn python buffer related seg faults into an RCE?
[04:28:59] *** Joins: digilink (~digilink@user/digilink)
[04:29:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:29:54] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[04:30:06] *** Quits: nanobot567 (~pi@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Quit: WeeChat 3.0)
[04:30:11] <Yhg1s> SudoBash: it depends on the segfaults.
[04:31:03] <SudoBash> I have 2 segfaults, but not sure if they're vulnerable although I believe one is buffer related, but possibly in ash instead of python
[04:31:38] *** Joins: Wulf (~Wulf@user/wulf)
[04:32:03] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48b4ft5yllzgewv.ipv6.telus.net) (Quit: Leaving)
[04:32:06] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[04:32:27] <SnoopJ> if they're reproducible (or if you have a core dump), running the reproduction case with gdb can tell you where the fault occurred
[04:34:51] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[04:35:12] <SudoBash> I'm sure you're familiar with the for i in range(1000000): crash, but if you push it a little further, you can get a seg fault every time on 2.7
[04:35:34] <pr3d4t0r> Greetings.  I'm building Python 3.10.1 from source to install on a Linux box; all the dependencies are installed, the build can't find libssl-dev.  There is no error in building Python, make test passes, make install makes it available, but pip fails because SSL isn't available.
[04:35:48] <pr3d4t0r> Where is a good resource to figure out how to troubleshoot this?
[04:35:49] <Yhg1s> SudoBash: nobody cares about 2.7.
[04:35:56] <jello> Is there a reasonably good version of strptime() that auto-detects the format?
[04:36:12] <grym> jello: pendulum.parse
[04:36:21] <SudoBash> pr3d4t0r sudo apt-get install libssl-dev ?
[04:36:36] <mefistofeles> that's if it's a debian/ubuntu linux :P
[04:36:56] <Yhg1s> pr3d4t0r: ssl is built by setup.py, using distutils. It's not an error because you can still get a functioning Python without it.
[04:37:04] <pr3d4t0r> SudoBash: Like I said, it's there.  All the dependencies from apt.  I triple-check with dpkg and ran apt-get install anyway.
[04:37:09] <SudoBash> yea the yum command is a different package name, but he did mention libssl-dev which sounds like deb syntax
[04:37:21] <Yhg1s> pr3d4t0r: if you're building from source, 'the dependencies from apt' don't mean much.
[04:37:24] <SudoBash> check which version you have vs which one you need to have
[04:37:30] *** Joins: ketiv (~ketiv@92.40.196.172.threembb.co.uk)
[04:38:12] <pr3d4t0r> Yhg1s: Aware - how do I tell configure where to find the headers and lib for libssl-dev?
[04:38:22] <SudoBash> you might have to build latest dependencies if you're building newer than what is in the repo
[04:38:23] <Yhg1s> pr3d4t0r: configure doesn't do that. setup.py does.
[04:38:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[04:38:38] <pr3d4t0r> Yhg1s: Looking there, thanks.
[04:39:02] <Yhg1s> pr3d4t0r: if you've installed it via apt, it'll be in a location setup.py already looks. So either it's missing, or it's not an acceptable version.
[04:39:36] <pr3d4t0r> Yhg1s: I'll roll with the acceptable version.  Last Python I built on this box was 3.7.5.
[04:40:20] <SudoBash> I need to know for learning process
[04:40:24] <pr3d4t0r> Yhg1s: Thanks, looking now.
[04:40:55] <jello> pr3d4t0r: apt-get source python3.10 --build
[04:41:06] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[04:41:08] <Yhg1s> pr3d4t0r: https://docs.python.org/3/using/unix.html#custom-openssl might be of interest.
[04:41:14] <jello> that will download the source and then compile it
[04:41:15] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[04:42:04] <jello> which OS are you using precisely?
[04:43:55] <pr3d4t0r> Yhg1s: I just went through setup.py, it reuiqres OpenSSL 1.1.1, the box is on the latest patch for 1.0.2.  Upgrading and reading your link, then updating my build notes to watch for this in the future :)
[04:45:46] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[04:46:30] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[04:47:02] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[04:47:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:47:17] *** Joins: millido (~millido@84.210.150.128)
[04:47:23] *** Joins: nattiestnate (~nate@114.122.107.61)
[04:47:27] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[04:48:13] *** Joins: iflema (~ian@user/iflema)
[04:48:54] <SudoBash> c = bytearray(999999)
[04:48:55] <SudoBash> c += buffer(c)
[04:49:07] <SudoBash> that will segfault on 2.7.18 every time
[04:49:31] <grym> SudoBash: and it always will
[04:49:35] <Yhg1s> SudoBash: you'll have to understand why it segfaults to know whether it's a potential security issue.
[04:49:49] <TML> SudoBash:  January 1, 2020, was the day that they sunset Python 2
[04:50:02] <TML> "That means that we will not improve it anymore after that day, even if someone finds a security problem in it. "
[04:50:27] <SudoBash> yea I understand, but this is for pentesting and understanding.. there is still stuff on HTB that uses p2.7
[04:51:13] <SudoBash> ok what about a segfault that drops to ash because of too much print()
[04:51:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[04:51:41] <Yhg1s> SudoBash: what about it? (Also, what does "drops to ash" mean, and what is "too much print()"?)
[04:51:51] <SnoopJ> being able to see the program or a stack trace would be nice
[04:51:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[04:51:57] <TML> I don't know what HTB is, but from context, it sounds like you're trying to exploit Python, which I'm just not sure anyone here is going to be super-excited to assist you in
[04:52:09] <Yhg1s> TML: let them knock themselves out.
[04:52:12] <micah> in the python console, i can do: foo.functions.bondPriceInUSD().call()/10000000, and I get a value, but if I do this in my script: self.discount=set(foo.functions.bondPriceInUSD().call()/10000000) I get: TypeError: 'float' object is not iterable, what am I missing here?
[04:52:14] <Yhg1s> (especially on 2.7 :P)
[04:52:17] <SnoopJ> TML, on the contrary, if there's an unknown segfault, it's something of great interest :)
[04:52:43] <Yhg1s> micah: notice how the code is different? You're calling set() on the float. set() expects an iterable. floats are not iterable.
[04:53:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:54:08] <micah> Yhg1s: if I dont do the division, I get a value, but it is something like 4.732e+19, which I want to represent differently, hence the division
[04:54:19] <Yhg1s> micah: I said nothing what so ever about the division.
[04:54:26] <SudoBash> TML it's hackthebox and its sandboxed and legal hacking grounds and it's just 2.7, it's not like I'm messing with Python 3
[04:54:35] <Yhg1s> micah: you complained that one bit of code works and the other bit does not. The error you're getting is because of the differences between the code.
[04:54:53] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:55:04] <grym> micah: you're creating the set wrong, you're not getting the value you want to put in the set wrong
[04:55:15] <micah> Yhg1s: yes, you are right. I guess what I dont understand is how I can do that correctly
[04:55:29] <grym> set(5.6) is a type error; set((5.6,)) isn't
[04:55:29] <Yhg1s> micah: perhaps it would be more obvious what the problem is if you did 'f = foo.functions.bondPriceInUSD().call()/10000000)' and on the next line 'self.discount = set(f)'
[04:55:41] <Repiphany> You're possibly doing something wrong if you're representing monetary values with floats
[04:55:42] <grym> neither is {5.6}
[04:55:43] <Yhg1s> Or just use {f}.
[04:55:45] <SudoBash> you can also get a segfault with this because of the print(Z) or any of the commented prints https://pastebin.com/t9tXpBCA
[04:56:22] <SudoBash> I was really just interested in crashing python at a specific moment, but I realize that's next to impossible if not entirely impossible
[04:56:29] *** Quits: Narrat (~omnius@p200300df5f4d4b8706ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[04:56:38] <nedbat> SudoBash: it's not hard to crash python, as you have seen.
[04:57:01] <SudoBash> yea I see that, but can't segfaults lead to other stuff, especially if it's buffer related?
[04:57:05] <Yhg1s> SudoBash: I'm not sure why that code would segfault, other than just running out of memory.
[04:57:27] <Yhg1s> SudoBash: there aren't any buffer overruns involved in the code you just pasted.
[04:58:00] <nedbat> SudoBash: also, if the attacker can get their python code running on your machine, then you don't need segfaults, they'll just write nasty python code.
[04:58:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:58:27] <SudoBash> so if it runs out of memory and then segfaults like this, it doesn't mean anything?: zsh: segmentation fault  python2.7 crash2.py
[04:59:24] <Yhg1s> SudoBash: that message by itself says nothing, no. As I said, you have to undrestand what caused the segfault. If it's just running out of memory, it's not a security issue.
[04:59:27] <SudoBash> I'm working on the hardest machine on HTB, but it's running 2.7 which I see as a weak point especially with the webapps it's running
[04:59:30] <nedbat> SudoBash: sure, it means your program crashed
[04:59:34] <micah> Yhg1s: hm, if I do that, I get: TypeError: unsupported operand type(s) for /: 'method' and 'int'
[04:59:46] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[05:00:30] <grym> micah: how about `self.discount = {foo.functions.bondPriceInUSD().call()/10000000}`
[05:00:40] <Yhg1s> micah: sounds like you changed something else. Can you show the actual code?
[05:00:43] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:8c:bfd3:b9c3:2aee) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:58] <SudoBash> c = bytearray(999999)
[05:00:59] <SudoBash> c += buffer(c)
[05:01:08] <SudoBash> what causes that one?
[05:01:15] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[05:01:22] <Yhg1s> SudoBash: probably running out of memory. You'd have to inspect it.
[05:01:24] <SudoBash> I guess could be out of memory also
[05:01:38] *** Joins: nattiestnate (~nate@114.122.107.61)
[05:01:57] <nedbat> SudoBash: it works on my machine :)
[05:02:01] <SudoBash> someone on HTB discord just said: Segfault is at https://github.com/python/cpython/blob/f4c03484da59049eb62a9bf7777b963e2267d187/Objects/bytearrayobject.c#L312, what I'd guess is happening is it's trying to copy data outside of mapped memory
[05:02:01] <SudoBash> Appears to be on the heap
[05:02:10] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[05:02:17] *** Quits: ideopathic (~ideopathi@2600:1702:8b0:a500:d981:d23c:67fb:1d7c) (Ping timeout: 252 seconds)
[05:05:02] <SudoBash> that's about the 2 liner
[05:06:15] <Yhg1s> SudoBash: you understand why the crash isn't interesting, yes? You can't trigger it without writing that code yourself, and like nedbat said, if you're excuting arbitrary code, you can do much worse things.
[05:06:22] *** Joins: tWqaq (~tWqaq@240e:389:5dd3:9000:b897:88db:ae87:ee3b)
[05:06:59] *** Joins: ideopathic (~ideopathi@2600:1702:8b0:a500:d981:d23c:67fb:1d7c)
[05:07:21] <SudoBash> yea I get it, it's 2.7 and segfaults are common in python?
[05:08:00] <Yhg1s> SudoBash: no, but it is not hard to trigger them by writing code that does nonsensical things just to trigger them.
[05:08:12] <nedbat> SudoBash: there are pathologically deeply nested structures that will crash python
[05:09:01] <SudoBash> I'm trying to learn to turn bugs into exploits so I can be a better programmer and pentest my own code
[05:09:20] <Yhg1s> Well, good luck with that. I don't recommend trying it in Python. Start with C instead.
[05:09:26] <SudoBash> discord says: it changes the length but isn't able to properly allocate a properly sized buffer so it flows into unmapped memory
[05:09:43] <SudoBash> can't that lead to a heap spray?
[05:09:50] <micah> grym: even with that, i get: TypeError: unsupported operand type(s) for /: 'method' and 'int'
[05:09:54] *** Joins: Batzy (~quassel@user/batzy)
[05:10:10] <nedbat> SudoBash: i doubt that anything flows into unmapped memory.
[05:10:22] <nedbat> SudoBash: but I don't know why it segfaults for you
[05:10:25] <Repiphany> micah: You're missing calling brackets () in your line somewhere
[05:10:41] <Yhg1s> SudoBash: past tense, please, since you're talking about 2.7. Again, you would have to *explicitly write code that does this* in order for it to be exploitable. And it makes no sense to do this, so nobody writes code like that.
[05:11:11] <Yhg1s> nedbat: looks like it's resizing the buffer, and then trying to use the old buffer. (It's fixed in 3.)
[05:11:52] <SudoBash> what can be done with that?
[05:11:54] <nedbat> Yhg1s: ok
[05:11:58] <micah> Repiphany: oh! thank you
[05:12:15] <Yhg1s> SudoBash: nothing. It's not an interesting crash. If you wanted to write Python code that was exploitable, you'd just do 'exec(data)"
[05:12:24] <SudoBash> lol
[05:12:41] <SudoBash> jeez yea it doesn't get much worse than that...
[05:15:11] <SudoBash> well it is relevant and somewhat interesting because 2.7 is still installed alongside 3 on MANY systems including web servers, and if a hacker gets a reverse shell, they can just write something to privilege escalate to root if they can get something that overwrites the write memory right? So basically, you have to get your buffer allocation
[05:15:12] <SudoBash> exactly right and place a shell execution / shellcode in it?
[05:15:25] *** Quits: Bkid (~Bkid@user/bkid) (Ping timeout: 240 seconds)
[05:15:30] <SudoBash> right memory*
[05:16:02] <Yhg1s> SudoBash: I think you're misunderstanding quite a few things here. No, you can't get elevated privileges like this. You can get *your current* privileges with Python. Which you already have.
[05:16:04] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:16:13] *** Parts: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com) ()
[05:16:33] <SudoBash> it depends on what memory it's intruding into?
[05:16:42] <Yhg1s> No, it can only intrude on its own memory.
[05:16:46] *** Joins: Bkid (~Bkid@user/bkid)
[05:16:54] <SnoopJ> (that's what a segfault *is*)
[05:17:27] <SnoopJ> "you tried to access memory that you aren't allowed to access"
[05:17:52] <SudoBash> ahhh okay, so it crashes to prevent you from accessing it?
[05:18:00] <Yhg1s> Even if you could access it, it's still memory of the process.
[05:18:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:18:10] <Yhg1s> Not some other process's memory.
[05:18:34] <SudoBash> I gotcha, that was a major part of my disconnect I think
[05:19:23] <Gnuman> SudoBash: the operating system itself prevents the access and triggers a segfault signal on the offending process. you can catch and handle that segfault, but you're still not allowed to touch memory that isn't mapped to your own process
[05:19:28] <SudoBash> I really want to get this box, out of thousands of users it only have around 50 roots
[05:20:03] <Gnuman> It seems I missed the beginning of this really interesting conversation, though
[05:20:07] <SudoBash> right so really you would have to exploit the kernel somehow?
[05:20:35] <Gnuman> SudoBash: Yes, either the kernel or a priviledged process.
[05:20:36] <SudoBash> nah It's not as interesting as you might think, I'm just retarded
[05:20:56] <SnoopJ> SudoBash, privilege escalation often involves kernel bugs, or yea, a vulnerable target that is itself privileged
[05:21:08] <Gnuman> SudoBash: for example, if you found a python process running on the server that's running as root, and you can figure out how to inject your own code into that process, you could exploit it.
[05:21:20] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[05:21:52] <Gnuman> But if you're just running an unpriviledged python process and trying to exploint your own process... you'll get nowhere, really.
[05:22:11] <SudoBash> yea gotcha, I was retarded
[05:23:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:23:14] <Gnuman> SudoBash: nah, not retarded. You just didn't know =). I've been digging into linux one way or another since 2003
[05:23:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:25:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:25:15] <SudoBash> I'm trying to root the Fingerprint box on HacktheBox but it has an insane rating and only 48 roots
[05:25:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:25:39] *** Joins: TechTheory (~lwait@ip68-110-3-17.tc.ph.cox.net)
[05:25:41] <SudoBash> I have a TON of information I got from directory traversal though
[05:26:05] <SudoBash> https://app.hackthebox.com/machines/Fingerprint
[05:26:11] <TechTheory> whats good resources to learn ai in python
[05:26:32] <SudoBash> TechTheory I've heard tensorflow is pretty popular?
[05:26:53] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[05:26:55] <SnoopJ> TechTheory, what kind of AI are you interested in?
[05:27:02] <Gnuman> TechTheory, tensorflow is pretty advanced. you may want to try scikit-learn instead. It's what I use.
[05:27:11] <Gnuman> well, that's for machine learning, anyway
[05:27:25] <Gnuman> AI is not necessarily machine learning
[05:27:25] <SnoopJ> TF is certainly innovative in the realm of bad APIs
[05:27:46] <TML> TechTheory: https://www.heatonresearch.com/book/ is a series I enjoyed that covered the topic and used a lot of Python code in the examples
[05:27:55] <TechTheory> ok I will try scikit but what about machine learning that what I mean
[05:28:06] <SnoopJ> TechTheory, what kind of machine learning are you interested in?
[05:29:02] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[05:29:23] <TechTheory> I interested in machine learning that uses predictions.I want to code things that make prediction and go off that for data
[05:29:57] *** Quits: SudoBash (~SudoBash@45.43.99.181) (Quit: Connection closed)
[05:30:03] * SnoopJ isn't aware of machine learning that doesn't involve prediction
[05:30:23] <TechTheory> I send you an link hold on
[05:31:07] <TechTheory> https://stackabuse.com/using-machine-learning-to-predict-the-weather-part-1/
[05:31:26] <SnoopJ> TechTheory, "AI" and "machine learning" are both incredibly wide subjects, which is why I asked you questions trying to get a sense for what you want to learn about.
[05:31:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:31:54] <TechTheory> I forgot what the differents
[05:32:02] <SnoopJ> there isn't much of one
[05:32:38] <TechTheory> did you check out the link I sent you?
[05:32:47] <SnoopJ> nope
[05:34:47] <TechTheory> whats better to learn ai or ml
[05:35:12] <SnoopJ> TechTheory, let me try asking another way: what do you want to predict?
[05:35:39] *** Joins: retrosenator (~retrosena@51.sub-174-245-116.myvzw.com)
[05:35:42] <TechTheory> weather
[05:36:26] <TechTheory> thank you for being patient I am still learning
[05:36:36] <SnoopJ> well, your own link talks about how to do that with scikit-learn. That would be a good thing to read, then.
[05:36:45] <SnoopJ> And follow along with the code
[05:37:35] <TechTheory> how would I learn those packages for future reference
[05:38:10] <TML> TechTheory: By reading their documentation
[05:38:49] <parv> TechTheory, Do you prefer complex examples or reference documentation? (I don't have a suggestion either way)
[05:38:55] <TML> TechTheory: https://scikit-learn.org/stable/getting_started.html
[05:38:55] <TechTheory> Ok thank you sorry I am still learning I apologize
[05:39:08] <SnoopJ> scikit-learn offers some tutorials, and there have been some good workshops on it as well. There was an introduction at EuroSciPy 2017 for instance: https://www.youtube.com/watch?v=Vs7tdobwj1k
[05:39:20] <TML> TechTheory: If you want to learn general principles of AI, I'd recommend the Jeff Heaton books I linked previously as a good place to start
[05:39:42] <TechTheory> thank you for your guys help
[05:41:32] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[05:43:38] <SnoopJ> the extreme cliff-notes version: you have a function `f(x, k)` with parameters `k` that eats inputs `x`, find the settings of `k` that gives you the best predictions (whatever that means)
[05:45:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:46:10] *** Joins: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com)
[05:47:26] <jello> How do I get a date for 5 days ago? `datetime.date.today() - 5` gives a TypeError :(
[05:48:11] <parv> Use datetime.timedelta
[05:48:39] <parv> dt - datetime.timedelta( days = 5 )
[05:48:48] <SnoopJ> or `... + timedelta(days=-5)`
[05:49:24] <jello> ah, okay
[05:49:59] <jello> datetime.date.today() - datetime.timedelta(days=5)
[05:50:52] <jello> thanks parv SnoopJ
[05:51:53] <jello> would have thought that date - int would work...
[05:52:01] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 268 seconds)
[05:52:30] <SnoopJ> jello, what would the int represent? Why days rather than months, years, weeks, etc?
[05:52:46] <jello> SnoopJ: because that's the smallest unit for a date?
[05:53:01] <jello> and it's consistent with virtually every other language out there
[05:53:20] <jello> that i'm aware of at least
[05:53:21] <parv> Nope, don't the the sight of that
[05:53:21] <Gnuman> jello, you're forgetting seconds, microsecords, etc.
[05:53:29] * SnoopJ points out that C++'s std::chrono adopted exactly this approach WAY after the fact
[05:53:29] <Gnuman> microseconds*
[05:53:34] <SnoopJ> Gnuman, those aren't part of date
[05:54:08] <Gnuman> but they are part of a datetime
[05:54:12] <jello> yeah, wouldn't go there for a datetime, but for a date it makes sense
[05:54:25] <Gnuman> oh, right... only seconds
[05:54:33] <Gnuman> I got it mixed up with Go. you're right, SnoopJ
[05:54:56] *** Parts: micah (~micah@debian/micah) ()
[05:55:05] <SnoopJ> jello, I would personally find it more confusing if there was one way to do it for date, and another for datetime
[05:55:28] <TML> jello: actually, I am hard-pressed to think of a language that does allow you subtract an int from a date and it just happily assumes days
[05:55:38] <SnoopJ> `offset = 5  # what is this?`  vs  `offset = timedelta(days=5)  # ah, a time delta!`
[05:56:08] <jello> SnoopJ: fair point
[05:56:15] <Gnuman> for a datetime, if I had to add or subtract int, I'd assume seconds, but only because it's the smallest usable unit in a datetime
[05:56:17] <parv> jello, If a bare integer could be treated as days for datetime.date, then why should an integer not be treated as microsecond for datetime.datetme?
[05:56:23] <SnoopJ> Gnuman, hardly
[05:56:35] <Gnuman> SnoopJ what's hardly?
[05:56:47] <SnoopJ> Gnuman, the seconds are hardly the smallest usable unit on any system I've used before
[05:56:54] <jello> parv: I don't feel strongly about the datetime.datetime case
[05:56:57] <Gnuman> SnoopJ on a datetime?
[05:56:58] <TML> Not PHP, not JS, not Java, not C, not Rust…maybe Ruby does? I haven't done much in Ruby.
[05:57:01] <SnoopJ> Gnuman, on a datetime.
[05:57:09] <Gnuman> I'm looking at the pydoc for datetime right now
[05:57:11] <retrosenator> TML: do more
[05:57:14] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 260 seconds)
[05:57:17] <Gnuman> seconds is the smallest I see. please point out the other unites
[05:57:24] <Gnuman> units*
[05:57:29] <SnoopJ> yours doesn't have microsecond?
[05:57:41] <TML> retrosenator: Fair enough - can you list a few that do support this?
[05:57:51] <lorogue> I'm seeing microseconds...
[05:58:02] <SnoopJ> a second is an eternity in CPU time, heh
[05:58:13] *** Joins: Macuser (~Macuser@2600:1003:b46d:716d:74c6:2c42:c8f0:41ff)
[05:58:23] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:58:24] <Gnuman> lorogue, oh... you're right
[05:58:29] <Gnuman> I mixed it up again
[05:58:36] *** Joins: frost (~frost@user/frost)
[05:58:42] <Gnuman> I looked at the wrong section.
[05:59:06] <lorogue> No worries, I was trying to figure out why I kept getting them in a script a few weeks back xD
[05:59:12] <retrosenator> TML: you ahve to overload operators
[05:59:25] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[05:59:25] *** brabrax_ is now known as brabrax
[05:59:26] <Gnuman> yeah, so a bare int would only make sense for microseconds on a python datetime, IMHO... but then it'd be confusing, anyway
[05:59:42] <SnoopJ> it could be confusing across platforms, too
[05:59:52] <SnoopJ> where the clock resolution might be different
[05:59:53] <Gnuman> but I think the smallest that Go does is a nanosecond? javascript is microseconds, IIRC
[06:00:22] <SnoopJ> allowing an int to just freely interact with a type that describes time seems to defy the point of the type, to me
[06:00:32] <SnoopJ> why not just get rid of it and use ints for everything? :/
[06:00:47] <TML> retrosenator: OK, but then we could include Python in the list as well, right? Just provide a __sub__
[06:01:04] <SnoopJ> it wouldn't be too tricky to write a date subclass that does this, yea
[06:01:09] <Gnuman> SnoopJ that's what Go does, but it has its pros and cons...
[06:01:11] *** Parts: norwood- (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (Textual IRC Client: www.textualapp.com)
[06:01:12] *** Joins: norwood- (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net)
[06:01:26] <SnoopJ> Gnuman, what are the pros?
[06:01:35] <SnoopJ> The cons need no introduction
[06:01:56] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:01:57] <Gnuman> pros are you don't need special types. cons are you need to remember that you need to multiply everything
[06:02:11] <SnoopJ> well, then why have the type at all
[06:02:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:02:25] <Gnuman> well, I mean in Go, you don't need a delta type.
[06:02:25] <retrosenator> why would you need this
[06:02:35] <retrosenator> you can create a timespan from the integer first
[06:02:37] <Gnuman> it's not better in any way that I know of, just different
[06:02:38] <retrosenator> then subtract that
[06:02:39] <jello> SnoopJ: lots more things you can do with a date besides +/-
[06:02:58] <SnoopJ> jello, they could be functions that take ints, though
[06:03:08] <SnoopJ> if ints are truly representing the data
[06:03:36] <retrosenator> technically even the highest level language can do the most optimal representation once compiled
[06:03:58] *** Joins: fikran (~fikran@user/fikran)
[06:04:10] <jello> SnoopJ: enums exist for a reason, even though they're just ints
[06:04:40] <jello> dates are like that, with even more good stuff like parsing, formatting, etc...
[06:05:00] * SnoopJ shrugs
[06:05:06] <retrosenator> its a simple representation, if you dont like the language write a parser that converts your super code into python or whatever
[06:05:07] <jello> we could all program in ASM too...
[06:05:08] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:05:30] <SnoopJ> like I said, the subclass that does what you want is not that tricky
[06:05:32] <retrosenator> sometimes you also need to write python that generates python
[06:05:35] <jello> SnoopJ: agreed
[06:05:36] <SnoopJ> it's also not a good idea, but it's within reach
[06:06:03] <jello> why do you think it's not a good idea?
[06:06:23] <jello> i view it as nice to have syntactical sugar
[06:06:49] <SnoopJ> jello, what is `datetime.date(year=1752, month=9, day=2) + 1` ?
[06:07:31] <jello> I presume 1752-09-03, assuming the idealized gregorian calendar
[06:08:00] <TML> No, it would be 1752-09-14 by the Gregorian calendar
[06:08:03] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:08:18] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[06:08:34] <jello> ok, so what?
[06:08:47] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[06:08:48] <SnoopJ> so an integer can't represent nuance like that
[06:08:52] <SnoopJ> it's...just an integer
[06:08:53] <Gnuman> uh.... what are we even arguing about? I'm lost
[06:09:22] <Gnuman> IOW, it looks like we all agree on this?
[06:09:56] <jello> just trying to understand the other side of the argument
[06:09:56] <Xano> How do I find the type annotation of an attribute declared on a class? I am not even sure how to get that attribute since it's not included in inspect.getmembers() or getattr(cls, ...)
[06:10:30] <Gnuman> jello, you're asking why the time delta needs to be a class that requires explicitly stating the units?
[06:10:31] <jello> TML: but, 1752-09-14 is in fact the day after 1752-09-03, correct? so what's the problem?
[06:10:33] <SnoopJ> jello, my offset example is probably my principal objection: if the integer is separated by really any distance from the date it is supposed to augment, it is impossible to tell what its semantics are
[06:10:37] <TML> Gnuman: the disagreement appears to be "jello: datetime.date should assume that ints are datetime.timedelta(days=x) in its __add__ and __sub__ methods." vs "SnoopJ: No, it shouldn't."
[06:10:51] <Xano> Oh, of course immediately after I ask I find out these things are class annotations...
[06:10:53] *** Joins: qpdb (~qpdb@user/qpdb)
[06:10:56] <Gnuman> ah, thanks TML
[06:10:58] <SnoopJ> TML, I think they just want to understand why I think it's a bad idea
[06:11:09] <SnoopJ> "should" is pointless, datetime isn't going to budge here :)
[06:11:25] <TML> fair enough :)
[06:12:06] *** Parts: grym (~grym@user/grym) ()
[06:12:08] <TML> it does look like Ruby, at least, allows this kind of thing
[06:12:11] <Gnuman> ok, apologies that it's not specifically about python, but check this out, jello: https://pkg.go.dev/time#Time.Add
[06:12:59] <Gnuman> See, instead of having to initialize a class and be explicit, you explicitly multiply all your ints by the units you want. It's kind of the same but differnt. It's so easy to write bugs when the units aren't explicit.
[06:13:29] <SnoopJ> with times it's just asking for trouble, I think there's a stronger argument for it with calendar dates
[06:13:37] *** Joins: grym (~grym@user/grym)
[06:13:40] <jello> agree on the times
[06:13:55] <jello> too much room for mischief, both intended and not
[06:14:38] <SnoopJ> aesthetically I'd rather address them the same way since dates are a fiction on top of a fiction, but maybe if time weren't part of it *at all* I'd feel differently
[06:15:05] <SnoopJ> also aesthetically, the notion that every day is the same length is very silly
[06:15:06] <jello> sure, i get the consistency argument
[06:15:09] <Gnuman> ah, ok, so we agree on time, but date is the debate... I guess I could see adding an int to a pure date as something that could be allowed.
[06:15:50] <Gnuman> but if you get your date mixed up with your datetime types.... oof, what a messy bug that would be
[06:15:58] <jello> like i said a bit before, it's just nice syntactical sugar
[06:16:02] <Gnuman> I could see someone getting fired over that
[06:16:22] <parv> Gnuman, Over sugar?
[06:16:27] <jello> perhaps the juice is not worth the squeeze
[06:16:31] <Gnuman> parv: over a
[06:16:41] <Gnuman> parv: over adding 1 to a datetime object that you thought was a date
[06:16:46] <Gnuman> second vs day
[06:16:53] <parv> Gnuman, Thanks
[06:16:55] <TML> jello: Everyone has a different threshold for where "syntactical sugar" becomes "obscured meaning"
[06:17:00] <Gnuman> (or millisecond vs day, or whatever)
[06:17:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:17:21] <SnoopJ> from the perspective of the datetime library I think it's just that CPython is tidier if there's "one obvious way to do it" instead of two
[06:17:28] <jello> Gnuman: i would expect the datetime + int to still raise TypeError
[06:17:29] <Gnuman> yeah.... if you mix it up at a fintech, you could get fired
[06:17:45] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:18:06] *** Joins: nattiestnate (~nate@114.122.107.61)
[06:18:26] <Gnuman> One fintech I worked at actually has a special DateTime object that they made in-house for C++
[06:18:38] *** Joins: jinsun (~quassel@user/jinsun)
[06:18:51] <Gnuman> at first, I wondered why anyone would do this... but then I was informed that the bond market has been around a _long_ time
[06:19:23] <jello> yeah, bond houses dealt with the 2038 issue a long time ago...
[06:19:27] <TML> jello: Wait - that confused me. Are you saying that the add and subtract operators should have different behaviours on "datetime <op> integer"?
[06:19:30] <Gnuman> and we had a special 2-hour class in orientation teaching how to properly use their custom DateTime object, and what nasty things would happen if we messed it up.
[06:20:08] <Gnuman> jello, it's more representing dates that go back farther than most computer datetime objects can handle.
[06:20:19] <jello> TML: no, i'm saying that only date <op> int should be defined. datetime <op> int should continue to raise TypeError
[06:20:20] <SnoopJ> since I brought up std::chrono, though...the neat thing about it is that it ends up being mostly annotation around the templated type, IIRC
[06:20:22] <Gnuman> you know... back when the Julian Calendar was used.
[06:20:46] <TML> jello: Ah
[06:21:16] <SnoopJ> the promise is you get the type safety parts without runtime expense, at the low low price of unreadable template metaprogramming
[06:21:39] <parv> jello, I call that inconsistent API. If a bare integer works with datetime.date, I want it to work with datetime.datetime damnit.
[06:22:13] <SnoopJ> although C++ also lets you just change what literals mean so I guess that would provide a tidy solution here: `somedate + 1d` heh
[06:22:16] <jello> parv: 21:45 < jello> sure, i get the consistency argument
[06:22:39] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:23:08] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[06:23:19] <Gnuman> anyway.... great debate, but I gotta logoff for now. have fun =)
[06:24:27] <jello> thanks all for the info and thoughts!
[06:24:55] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 256 seconds)
[06:26:07] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[06:26:48] <SnoopJ> looks like pandas used to allow binary operations with integers for date-y stuff, but deprecated it
[06:27:23] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:29:16] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[06:29:46] *** byzafk is now known as byzandula
[06:29:58] *** Quits: ThanatosJ (~Thanatos@105.112.22.185) (Remote host closed the connection)
[06:30:30] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[06:30:47] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[06:31:04] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[06:31:29] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[06:34:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:35:28] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Remote host closed the connection)
[06:36:28] * parv saw a C++ presentation with time units example similar to SnoopJ had mentioned but apparently he missed to bookmark
[06:36:52] *** Parts: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com) ()
[06:37:02] <seanicus> Hello, in the asyncssh library, when I'm in the loop, it doesn't output any errors.  How do i get stderr to work with this library?
[06:37:03] *** Joins: dob1_ (~dob1@user/dob1)
[06:37:10] *** Quits: five6433 (~five6@8.40.26.66) (Read error: Connection reset by peer)
[06:37:17] <SnoopJ> parv, it wasn't Howard Hinnant's cppcon talks about <chrono> was it? That's where I got the info from
[06:37:23] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 256 seconds)
[06:37:32] *** Joins: five6433 (~five6@8.40.26.66)
[06:38:16] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:39:39] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 256 seconds)
[06:40:18] <seanicus> https://bpa.st/ILMQ  Here's an example.  In line 21 you can see a call to a nonexistent function.  When my client connects, it just automatically closes out, but the actual server doesn't give *any* indication of went on, at all, and just keeps running.
[06:40:33] <seanicus> This makes debugging hair-pullingly frustrating.
[06:40:41] *** Quits: Macuser (~Macuser@2600:1003:b46d:716d:74c6:2c42:c8f0:41ff) (Quit: Textual IRC Client: www.textualapp.com)
[06:41:03] <parv> SnoopJ, could be; will check. Thanks for the pointer
[06:41:36] <SnoopJ> it's the only discussion of the STL I've seen that comes anywhere near "down to Earth" heh
[06:41:59] *** Joins: Deana (~Deana@smtp.okb2-tmn.ru)
[06:43:18] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:43:42] *** Joins: dob1 (~dob1@user/dob1)
[06:44:28] <SnoopJ> wouldn't mind some feedback on my doodle of getting bytes out of a buffer object produced by evaluating [some expression] in an embedded interpreter: https://github.com/SnoopJeDi/playground/blob/master/python/bytes_from_embedded_python/main.cpp
[06:45:19] *** Quits: dob1_ (~dob1@user/dob1) (Ping timeout: 256 seconds)
[06:46:41] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:46:54] <SnoopJ> the 'real' code motivating that sample is probably going to be pointed at some user-defined callable rather than using PyRun_String() but the rest I would use pretty directly I think
[06:48:01] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[06:49:37] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[06:50:02] <pr3d4t0r> Yhg1s: Hola - that link you gave me was pure gold, thanks.  I also found another conflict with libssl-dev from a previous deployment.
[06:51:26] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[06:51:39] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:52:01] <parv> SnoopJ, I personally can't comment on C or C++ as I have only a rudimentary understanding of them.
[06:52:49] <pr3d4t0r> Yhg1s: Have a great evening, and a happy New Year :)
[06:52:55] * pr3d4t0r goes back to lurking for a few months.
[06:52:56] <SnoopJ> parv, I'm more worried about my usage of the CPython C API, I have a whole set of teammates to criticize my C++ ;)
[06:53:00] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:53:09] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:53:50] <parv> I know zero of CPython C API
[06:54:00] <parv> SnoopJ, Good luck to you
[06:54:24] <SnoopJ> thanks
[06:54:58] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[06:55:00] *** Joins: lalitmee__ (~lalitmee@180.94.32.14)
[06:55:06] *** Joins: nattiestnate (~nate@114.122.104.173)
[06:55:28] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Remote host closed the connection)
[06:56:08] *** Quits: CombatVet (~c4@user/combatvet) (Quit: suck it)
[07:00:37] *** Quits: TechTheory (~lwait@ip68-110-3-17.tc.ph.cox.net) (Ping timeout: 240 seconds)
[07:01:18] <SnoopJ> I suppose I could/should PyObject_CheckBuffer() to
[07:01:20] <SnoopJ> too*
[07:02:00] *** Joins: lalitmee_ (~lalitmee@180.94.33.168)
[07:02:08] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[07:02:12] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:02:12] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:02:12] *** finn_elija is now known as FinnElija
[07:02:58] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[07:03:03] *** Joins: CombatVet (~c4@user/combatvet)
[07:03:41] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[07:04:26] *** Quits: lalitmee__ (~lalitmee@180.94.32.14) (Ping timeout: 260 seconds)
[07:04:28] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Remote host closed the connection)
[07:06:37] *** Joins: bytehackr (~Sandipan@43.252.250.96)
[07:06:57] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[07:08:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:09:01] *** Joins: Vonter (~Vonter@user/vonter)
[07:09:57] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 240 seconds)
[07:14:44] *** Joins: zebrag (~chris@user/zebrag)
[07:17:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[07:17:03] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:17:06] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:18:50] *** Joins: adeliktas1 (~adeliktas@i59F4D5C9.versanet.de)
[07:20:32] *** Quits: adeliktas (~adeliktas@i59F4A2E7.versanet.de) (Ping timeout: 240 seconds)
[07:20:32] *** adeliktas1 is now known as adeliktas
[07:21:40] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:22:27] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[07:22:40] *** Parts: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Leaving)
[07:24:31] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:25:43] *** Quits: ideopathic (~ideopathi@2600:1702:8b0:a500:d981:d23c:67fb:1d7c) (Ping timeout: 250 seconds)
[07:27:33] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[07:27:42] *** Joins: BUSY (~BUSY@user/busy)
[07:28:01] *** Joins: jinsun (~quassel@user/jinsun)
[07:30:24] * parv found a presentation (but not The One) on C++ chrono library with the syntax I was looking for, thanks to SnoopJ: https://youtu.be/tzyGjOm8AKo?t=1484
[07:31:02] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 240 seconds)
[07:33:53] *** Quits: nattiestnate (~nate@114.122.104.173) (Quit: WeeChat 3.4)
[07:35:29] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:18] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:49:31] *** Joins: blei (~blei@136.144.43.31)
[07:49:54] <blei> i'm looking for a wrapper for socket that provides a more convenient interface but doesn't add overhead to socket performance
[07:50:36] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Remote host closed the connection)
[07:50:51] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[07:52:16] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[07:52:20] <yanmaani> hiya
[07:52:50] <yanmaani> Is there any difference between doing f("A" \n "B" \n "C"), and doing f("ABC")?
[07:53:41] <parv> Last one is more reasonable|not obnoxious?
[07:54:11] <yanmaani> or actually skip the newline. Why does f("A" "B" "C") not work, when f("ABC") does?
[07:54:13] *** Joins: quidnunc (~user@bas3-montreal02-65-94-9-48.dsl.bell.ca)
[07:55:33] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:55:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:56:38] <blei> is there a high performance python library to help you manage thousands of socket clients?
[07:57:13] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[07:57:34] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:57:47] *** Joins: bindu_ (~bindu@user/bindu)
[07:58:33] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:59:15] <parv> yanmaani,  'f("A" "B" "C")'  works here: https://termbin.com/9tje
[07:59:27] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-f97e-e727-1c21-7f91.res6.spectrum.com)
[07:59:34] *** bindu_ is now known as bindu
[07:59:57] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-1575-ba88-c6f1-7422.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:02:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[08:02:42] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[08:02:46] *** Quits: Tas-sos (~Tas-sos@ppp005054047017.access.hol.gr) (Ping timeout: 268 seconds)
[08:02:48] *** Joins: gopar_ (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[08:03:06] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:04:41] <TML> yanmaani: Can you give a case where f("A" "B" "C") isn't working?
[08:04:48] *** Joins: smoke (~smoke@user/smoke)
[08:05:23] *** Quits: _moep_ (~moep@user/moep/x-3358975) (Ping timeout: 250 seconds)
[08:07:34] *** Quits: thurs80601421053 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[08:08:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:11:20] *** Joins: thurs80601421053 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[08:11:28] *** Quits: lalitmee_ (~lalitmee@180.94.33.168) (Remote host closed the connection)
[08:11:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:11:59] <blei> https://en.wikipedia.org/wiki/C10k_problem
[08:13:19] *** Joins: fikran (~fikran@user/fikran)
[08:15:50] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:17:15] *** Joins: ravan (~ravan@user/ravan)
[08:19:15] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Remote host closed the connection)
[08:19:25] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 268 seconds)
[08:21:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:22:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:23:14] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[08:23:46] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Remote host closed the connection)
[08:26:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[08:27:26] *** Quits: sreve (~quassel@p4ff44cad.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:27:51] *** Joins: sreve (~quassel@p4ff44d67.dip0.t-ipconnect.de)
[08:28:27] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 256 seconds)
[08:29:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[08:30:27] *** Quits: norwood- (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (Quit: byyyyyyye)
[08:31:49] *** Joins: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net)
[08:33:44] <yanmaani> oh shit, I figured it out while trying to reduce it
[08:34:02] <yanmaani> f("A B C") is good, f("A" "B" "C") is not
[08:34:13] *** Quits: Xano (~Xano@2a00:23c4:4204:700:328f:5a5a:8290:3794) (Ping timeout: 268 seconds)
[08:34:17] *** Joins: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4)
[08:34:29] <parv> different strings
[08:34:58] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::30) (Quit: Konversation terminated!)
[08:34:58] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:36:38] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[08:39:04] *** Joins: vanessa (~farawayas@103.160.128.7)
[08:40:26] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[08:40:49] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[08:41:47] <jinsun> yeah you have to remember to put a space at the end/beginning when spltting at word boundaries like that, looks ugly but removing it changes the meaning
[08:42:05] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:44:53] *** Joins: et_ (~et@user/et)
[08:45:17] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[08:45:23] *** et_ is now known as et
[08:45:31] *** Joins: nomic (~nomic@185.198.243.161)
[08:46:35] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:47:34] *** Quits: nomic (~nomic@185.198.243.161) (Client Quit)
[08:50:00] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[08:51:32] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Remote host closed the connection)
[08:52:20] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[08:52:40] <parv> Ha! Implicit concatenation works for literal strings but not for variables.
[08:55:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:55:39] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[08:56:01] <jinsun> yeah, it is syntax error for variables, the compiler cannot know that the variable is string
[08:57:05] *** Joins: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net)
[08:58:50] <SnoopJ> and even if it knew that, the fold is done at compile time here
[08:59:03] *** Joins: Viewday11 (~Viewday@user/viewday)
[08:59:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[08:59:51] <SnoopJ> it can sometimes be convenient to break strings across lines without spoiling indentation or using textwrap.dedent()
[09:00:00] <deltab> >>> dis.dis(lambda: "A" "B" "C")
[09:00:00] <deltab>   1           0 LOAD_CONST               1 ('ABC')
[09:00:00] <deltab>               3 RETURN_VALUE
[09:00:47] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[09:00:54] *** Joins: tomasfarias (~tomasfari@ip-95-223-72-238.hsi16.unitymediagroup.de)
[09:01:17] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (Ping timeout: 240 seconds)
[09:01:20] <jinsun> yeah that too, it is not actually addding strings at runtime, the compiler would have to assume the value of the variable to do the implicit concat
[09:01:51] *** Quits: ketiv (~ketiv@92.40.196.172.threembb.co.uk) (Read error: Connection reset by peer)
[09:02:05] *** Joins: ketiv (~ketiv@92.40.196.172.threembb.co.uk)
[09:03:13] *** Joins: Viewday111 (~Viewday@user/viewday)
[09:04:17] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[09:04:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:04:43] *** Viewday111 is now known as Viewday11
[09:05:06] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[09:05:08] <maxtim> I have this logging bit I keep using over and over again in my scripts: https://bpa.st/FMHQ I was thinking about building a module so I can just import it and call it rather than writing the same bit of code over and over again. What's the best way to do that?
[09:05:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:29] *** Joins: Lazenca (~lazenca@user/lazenca)
[09:07:29] <SnoopJ> maxtim, it looks like you're partially re-implementing logging.config here, are you aware it exists? https://docs.python.org/3/library/logging.config.html
[09:07:32] <yanmaani> I have a foreign function (Rust, PyO3) that takes a struct of functions.
[09:07:41] *** Joins: aniketgm (~Aniket@49.36.107.251)
[09:07:47] <yanmaani> I have a Python object with methods.
[09:07:59] <yanmaani> Is there any way to marshal it into this struct and pass it in?
[09:09:25] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[09:09:37] <SnoopJ> yanmaani, what kind of methods? I imagine this depends on what the struct is like.
[09:10:20] <yanmaani> SnoopJ: https://github.com/freedomofpress/signal-protocol
[09:10:35] <yanmaani> wants smoething called a InMemSignalProtocolStore
[09:10:38] <yanmaani> which is a struct of fp's
[09:11:21] <yanmaani> If I'm not mistaken they are standard C pointers, they take pointers to data in some normal format
[09:11:36] <yanmaani> I think I can handle the serialization fine, it's the "make a struct that fits X" part
[09:14:30] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:15:30] <SnoopJ> I don't speak Rust, but if I'm reading that right, your methods are the ones declared in src/storage.rs ?
[09:16:00] <yanmaani> well, that's their implementation
[09:16:12] <yanmaani> those are methods on a struct
[09:16:20] <yanmaani> and I want to make my own struct instead and pass that in
[09:16:25] <yanmaani> but it complains about a type error
[09:16:26] <SnoopJ> Right, so you're lookign for a specific set of methods named such-and-such
[09:16:35] <yanmaani> No, I have my own implementations.
[09:16:41] <SnoopJ> On this Python object?
[09:16:42] <yanmaani> I need to make a struct with function pointers.
[09:17:37] *** Quits: s0k1t (~s0k1t@86.106.121.31) (Ping timeout: 240 seconds)
[09:17:41] <SnoopJ> When I say "looking for" I mean so that you can construct function pointers to the C-API call from the pointers to the methods themselves
[09:18:02] <deltab> maxtim: put the  parser.add_argument  calls in a function that takes a parser as its argument; then each script can add its own too
[09:18:04] <yanmaani> yeah, but that's easy right?
[09:18:11] <SnoopJ> yanmaani, once you know what the methods are named, yea
[09:18:29] <yanmaani> I know what the methods are named, they're located in my .py file.
[09:18:39] <yanmaani> My problem is I don't know how to create the struct of C function pointers.
[09:18:41] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:18:46] <maxtim> Thanks SnoopJ, looks like I'll be rewriting a bunch of code to implement this feature of logging
[09:18:46] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:18:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:19:01] <SnoopJ> yanmaani, sorry, you want to do this *from* Python, or from some other language? I might be understanding this program from the wrong side of FFI
[09:19:21] <yanmaani> from Python. Python calls a Rust library, and passes in a struct.
[09:19:37] <SnoopJ> My mistake, sorry
[09:20:09] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:22:22] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[09:22:24] <SnoopJ> yanmaani, and this object you have is not an instance of signal_protocol.storage.InMemSignalProtocolStore I guess? I don't know PyO3 either but it seems like there's some kind of macro being used here to generate the Python classes, I would think those would be the "easy" way here
[09:22:59] <yanmaani> SnoopJ: Yeah, generating th Python classes is a Rust macro, but I don't get how to go the other way
[09:23:33] <SnoopJ> yanmaani, what's the point of generating the classes if you don't get the FFI machinery to go from the generated thingy back across the FFI?
[09:23:54] *** Joins: gbmor (~gbmor@gbmor.org)
[09:24:02] <yanmaani> Hm, is there any way to change object attributes? Can I generate their InMemSignalProtocolStore, then just redefine the methods?
[09:24:16] <SnoopJ> You might be able to write a subclass
[09:24:19] <yanmaani> It says read-only though, so you'd have to go deeper.
[09:25:15] <yanmaani> Can I create a class without running its constructor?
[09:25:33] <SnoopJ> yes, `class Foo: pass` defines a class but does not construct an instance of it
[09:25:45] *** Quits: aniketgm (~Aniket@49.36.107.251) (Read error: Connection reset by peer)
[09:25:48] <yanmaani> Yeah, but if I have a class already defined
[09:25:54] <foo> SnoopJ: I've always been told I have class.
[09:25:56] <SnoopJ> yanmaani, are you sure you can't subclass here?
[09:26:07] <deltab> yanmaani: create a class or an instance?
[09:26:29] <yanmaani> can I tell Python to skip __init__
[09:26:32] <yanmaani> deltab: instance
[09:26:39] <yanmaani> SnoopJ: hmm possible, let me try
[09:26:54] <SnoopJ> yanmaani, [derive(Clone)] seems related to whether or not you'd be able to write a derived class, but I don't speak Rust and the docs are not helpful
[09:27:13] <SnoopJ> not helpful about this, anyway, perhaps that's some known Rust idiom they wouldn't think to mention
[09:28:03] *** Quits: blei (~blei@136.144.43.31) (Quit: Client closed)
[09:28:10] <SnoopJ> oh, no, apparently that would be spelled `[pyclass(subclass)]`
[09:28:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:29:12] <yanmaani>     class SQLiteStore(signal_protocol.storage.InMemSignalProtocolStore):
[09:29:14] <yanmaani> E   TypeError: type 'InMemSignalProtocolStore' is not an acceptable base type
[09:29:26] <yanmaani> so nope, no subclassing
[09:29:51] *** Quits: grooverman (~grooverma@177.102.117.95) (Remote host closed the connection)
[09:30:26] <SnoopJ> Bummer. Well, whatever parts (if any) of it are implemented in Python should be things you can get at from where you're standing and potentially twist to this purpose
[09:31:06] <SnoopJ> if the type itself is defined in Rust, there's not much you can do from the Python side, that would probably be "modify the library" territory
[09:31:09] *** Joins: grooverman (~grooverma@177.102.119.40)
[09:31:48] <yanmaani> I mean, the hacky way is
[09:32:02] <yanmaani> get the base addr of the struct from ffi
[09:32:06] <yanmaani> get the pointers
[09:32:11] <yanmaani> malloc a sufficiently large new struct
[09:32:19] <yanmaani> memcpy the new pointers into the old pointers
[09:32:27] <yanmaani> pass the struct
[09:32:42] <yanmaani> or even easier, just edit it in place.
[09:37:30] <SnoopJ> be careful not to change other instances of the same type, if that distinction matters
[09:37:52] *** Joins: tomasfarias0 (~tomasfari@gateway/vpn/pia/tomasfarias)
[09:38:32] * SnoopJ would prefer a brand new struct with the necessary pointer surgery, for that reason
[09:38:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:39:34] *** Quits: tomasfarias (~tomasfari@ip-95-223-72-238.hsi16.unitymediagroup.de) (Ping timeout: 268 seconds)
[09:39:34] *** tomasfarias0 is now known as tomasfarias
[09:40:57] *** Joins: DrBrownBear (~Drbb@2600:1700:9aa1:6bc0::1f)
[09:42:00] *** Joins: aniketgm (~Aniket@49.36.107.251)
[09:42:10] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:43:11] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:43:41] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[09:46:31] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:39bc:7f06:1559:f901)
[09:46:51] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[09:46:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[09:48:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[09:49:38] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[09:51:09] *** lukedashjr is now known as luke-jr
[09:55:01] *** Joins: nomic (~nomic@185.198.243.161)
[09:57:16] <yanmaani> Yeah no, this seems impossible, I just filed a bug in upstream. What a joke...
[09:57:29] *** Quits: DrBrownBear (~Drbb@2600:1700:9aa1:6bc0::1f) (Quit: Konversation terminated!)
[09:59:19] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 268 seconds)
[10:01:36] *** Joins: KvL (~KvL@user/KvL)
[10:04:47] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[10:06:07] *** Quits: yitz (~yitz@exercism/yitz) (Remote host closed the connection)
[10:07:21] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:08:18] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[10:08:31] *** Joins: JanC (~janc@user/janc)
[10:09:37] *** Quits: transhumanist (~hiken@2601:196:8800:35f0:4d08:6d31:8d7d:b576) (Ping timeout: 240 seconds)
[10:12:09] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:15:34] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[10:15:57] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 268 seconds)
[10:19:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[10:19:19] *** Quits: Deana (~Deana@smtp.okb2-tmn.ru) (Quit: Konversation terminated!)
[10:20:28] *** Joins: Deana (~Deana@185.46.198.220)
[10:20:53] *** Quits: ketiv (~ketiv@92.40.196.172.threembb.co.uk) (Ping timeout: 268 seconds)
[10:20:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:22:40] *** Joins: fikran (~fikran@user/fikran)
[10:22:57] *** Joins: runelind (~runelind@user/runelind)
[10:24:46] *** Quits: tomasfarias (~tomasfari@gateway/vpn/pia/tomasfarias) (Changing host)
[10:24:46] *** Joins: tomasfarias (~tomasfari@user/tomasfarias)
[10:27:17] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 240 seconds)
[10:29:09] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[10:31:30] *** Quits: aniketgm (~Aniket@49.36.107.251) (Quit: leaving)
[10:31:53] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[10:33:16] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-f97e-e727-1c21-7f91.res6.spectrum.com) (Quit: jarthur_)
[10:34:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:34:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[10:34:30] *** lukedashjr is now known as luke-jr
[10:34:44] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:35:00] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[10:35:30] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:38:16] *** Quits: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4) (Quit: Leaving)
[10:41:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:42:06] *** Joins: upsala (~zcb@185.209.196.169)
[10:47:17] *** Quits: humberto1 (~humbertow@189.132.138.198) (Ping timeout: 256 seconds)
[10:48:40] *** Joins: humberto1 (~humbertow@189.132.138.198)
[10:48:53] *** Joins: tobybl (~tobybl@213.31.132.151)
[10:50:10] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[10:51:27] *** Joins: gusto (~Augustus@109.255.100.54)
[10:52:57] *** Quits: humberto1 (~humbertow@189.132.138.198) (Ping timeout: 240 seconds)
[10:53:24] *** Joins: sazawal (~sazawal@122.161.85.84)
[10:54:25] *** Joins: humberto1 (~humbertow@189.132.138.198)
[10:57:22] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[10:58:26] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:58:57] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[10:58:59] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[10:59:07] *** Quits: humberto1 (~humbertow@189.132.138.198) (Ping timeout: 268 seconds)
[10:59:13] *** Joins: seednode (~seednode@user/seednode)
[11:00:38] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[11:01:42] <cluelessperson> Hey, I'm completely blanking, what's it called when you need to hash and salt a password through many rounds?
[11:02:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:02:26] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 260 seconds)
[11:02:34] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[11:03:28] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:39bc:7f06:1559:f901) (Quit: Client closed)
[11:04:32] <parv> Over cooking? I don't know
[11:05:46] *** Joins: Socra (~Socra@206.217.216.27)
[11:05:50] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[11:06:08] *** Quits: nomic (~nomic@185.198.243.161) (Quit: Leaving)
[11:07:14] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:07:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[11:07:44] <deniska> I don't remember any specific terms for that
[11:08:11] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:10:46] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[11:10:49] *** Joins: humberto1 (~humbertow@189.132.138.198)
[11:11:32] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:13:20] *** Joins: Jazzy (~jaziz@user/jaziz)
[11:13:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:13:55] <powftw> in my main app dir, there is another folder ```core```, inside it there's a file ```meta``` and a function inside it called ```halva``` i've added the folder  ```sys.path.append('core')```  and then ```from meta import halva```
[11:15:33] <powftw> it shows this error ```ImportError: cannot import name 'halva' from 'meta' (/home/bea/apps/core/meta.py)```
[11:16:08] <powftw> it identified the folder and the file. but cannot import it?
[11:17:06] <jinsun> it can import it, but it cannot find the function halva inside it
[11:17:57] *** Joins: NeoCore (~neocore@195.200.221.195)
[11:17:58] *** Joins: manti7 (~manti7@176.10.104.94)
[11:18:31] <powftw> changed function name. it works now..
[11:19:47] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:19:54] *** Joins: mrwick (~mrwick@user/mrwick)
[11:21:41] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[11:24:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:25:04] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:28:08] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[11:29:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:30:13] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[11:31:57] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[11:32:40] *** Joins: Deknos (~someone@user/menace)
[11:32:43] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Read error: Connection reset by peer)
[11:32:43] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 250 seconds)
[11:33:35] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:8fd1:153a:65d9:cd4c)
[11:34:19] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 256 seconds)
[11:34:40] *** Joins: emx (~emx@adsl-84-226-68-198.adslplus.ch)
[11:34:53] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[11:35:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:35:06] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 260 seconds)
[11:35:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:36:55] *** Joins: Klinda (~superleag@user/klinda)
[11:37:29] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[11:39:25] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:39:27] *** Joins: Tas-sos (~Tas-sos@ppp005054047017.access.hol.gr)
[11:40:04] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[11:43:03] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[11:43:17] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[11:43:19] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[11:43:50] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.26)
[11:44:25] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[11:44:48] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[11:45:51] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[11:46:11] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[11:46:28] *** Quits: Deana (~Deana@185.46.198.220) (Quit: Konversation terminated!)
[11:49:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:49:51] *** Joins: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru)
[11:50:11] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:50:39] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[11:51:59] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[11:52:25] *** Quits: gopar_ (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:53:58] *** Joins: nomic (~nomic@185.198.243.161)
[11:55:14] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:59:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:59:38] *** Quits: Gnuman (~gnuman@user/gnuman) (Remote host closed the connection)
[12:01:03] *** Joins: Gnuman (~gnuman@user/gnuman)
[12:01:08] *** Joins: humbertowoody (~humbertow@189.132.138.198)
[12:01:49] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:02:13] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[12:03:08] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Remote host closed the connection)
[12:03:45] *** Joins: ice9 (~ice9@user/ice9)
[12:03:49] *** Joins: eson123 (~sss@118.69.128.37)
[12:04:21] *** Quits: humberto1 (~humbertow@189.132.138.198) (Ping timeout: 256 seconds)
[12:04:46] <eson123> anyone else has faced the same problem as mine which when i try to establish a UNix-socket connectiong alongside with flask, the connection can transmit data simutaneously with flask if the DEBUG option in flask is false ? but when i set it to true, it suddenly stops the transmission
[12:05:05] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:05:19] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[12:05:22] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[12:05:44] <parv> When is 3-argument pow function is used?
[12:08:21] *** Quits: retrosenator (~retrosena@51.sub-174-245-116.myvzw.com) (Read error: Connection reset by peer)
[12:08:41] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[12:09:33] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[12:09:39] *** Joins: kosh (~kosh@user/kosh)
[12:09:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:09:52] <Wulf> parv: rsa
[12:10:34] <Wulf> parv: pow(msg, e, n)  # rsa encryption
[12:10:58] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:11:38] <parv> Wulf, Thanks.
[12:14:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Remote host closed the connection)
[12:14:27] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:32] *** Joins: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it)
[12:15:47] *** Joins: VaniaPy (~VaniaPy@46.12.11.60.dsl.dyn.forthnet.gr)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:16] *** Joins: epony (epony@user/epony)
[12:20:59] *** Joins: jmd (~user@de.cellform.com)
[12:21:04] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[12:22:45] *** Joins: jmd (~user@de.cellform.com)
[12:23:34] *** Joins: LordVan (~lordvan@gentoo/developer/lordvan)
[12:25:30] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:26:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:27:47] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:28:19] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:28:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:29:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:30:10] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[12:32:01] *** Joins: fikran (~fikran@user/fikran)
[12:33:22] *** Joins: rendar (~rendar@user/rendar)
[12:37:48] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:38:27] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[12:38:42] *** Quits: cba (~bch@78.47.230.132) (Quit: be right back)
[12:38:46] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.255)
[12:38:46] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8352:571e:7d74:3f4f:88b1:32fb)
[12:39:53] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[12:40:18] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:fb09:686f:8fff:8480)
[12:40:37] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.26) (Ping timeout: 256 seconds)
[12:41:11] *** Quits: davor_ (~davor@user/davor) (Ping timeout: 256 seconds)
[12:41:55] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[12:42:09] *** Joins: davor (~davor@user/davor)
[12:42:41] *** Quits: eson123 (~sss@118.69.128.37) (Quit: Leaving)
[12:43:27] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[12:44:14] *** Joins: arinov (~arinov@178.240.175.124)
[12:44:44] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:45:27] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[12:46:48] *** Joins: yvehan (~yvehan@117.136.39.247)
[12:48:22] *** Quits: yvehan (~yvehan@117.136.39.247) (Client Quit)
[12:49:01] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:49:02] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:50:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:52:37] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[12:53:20] *** Joins: sambauer74 (~sambauer6@84.232.209.233)
[12:53:24] *** Quits: sambauer74 (~sambauer6@84.232.209.233) (Client Quit)
[12:54:21] *** Quits: sazawal (~sazawal@122.161.85.84) (Quit: Leaving)
[12:55:03] *** Joins: sambauer74 (~sambauer6@84.232.209.233)
[12:55:19] *** Joins: sazawal (~sazawal@122.161.85.84)
[12:56:06] *** Quits: sazawal (~sazawal@122.161.85.84) (Remote host closed the connection)
[12:56:49] *** Joins: sazawal (~sazawal@122.161.85.84)
[12:57:36] *** Quits: sazawal (~sazawal@122.161.85.84) (Remote host closed the connection)
[12:57:49] <cheater> hi, has anyone ever heard of the web service ia[.]51[.]la ? i'm looking at some questionable code that calls out there, and i've found references of a virus calling out to that domain, but i don't know if it's a malicious domain, or if it's just that virus is using it because it's convenient for its author
[12:58:14] *** Joins: sazawal (~sazawal@122.161.85.84)
[12:59:19] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:59:36] *** Quits: sazawal (~sazawal@122.161.85.84) (Remote host closed the connection)
[12:59:37] *** Quits: parv (~quass@user/parv) (Quit: parv)
[13:00:08] *** Joins: Auron (~Auron956@user/auron)
[13:00:33] *** Joins: sazawal (~sazawal@122.161.85.84)
[13:00:40] *** Quits: SoF (~skius@user/skius) (Remote host closed the connection)
[13:00:59] *** Joins: Thanatos (~Thanatos@105.112.22.185)
[13:01:06] *** Quits: sazawal (~sazawal@122.161.85.84) (Remote host closed the connection)
[13:03:41] *** Joins: palasso (~palasso@user/palasso)
[13:05:21] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 245 seconds)
[13:05:32] *** Parts: sambauer74 (~sambauer6@84.232.209.233) ()
[13:07:30] *** Joins: stockholm (~Andreas@p200300d2c7032f008c491a5ff84ba46f.dip0.t-ipconnect.de)
[13:08:18] <TML> cheater: That's the Mozi botnet
[13:08:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:08:57] <cheater> yes, but i believe it might only be using that website to coordinate, similar to how it might be using pastebin maliciously without pastebin being malicious
[13:09:29] <cheater> from what i gather it's like a chinese statistics gathering backend that web developers use
[13:10:56] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[13:12:41] *** Quits: theo (~theo@user/theo) (Quit: Bye)
[13:13:47] *** Quits: nomic (~nomic@185.198.243.161) (Quit: Leaving)
[13:14:00] *** Joins: theo (~theo@user/theo)
[13:15:02] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:15:14] *** Joins: luischi (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[13:15:17] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[13:19:35] *** Quits: theo (~theo@user/theo) (Quit: Bye)
[13:19:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[13:19:43] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:20:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:21:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:21:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:23:09] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:23:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tungsten.libera.chat (Nickname regained by services)))
[13:24:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:24:36] *** Joins: theo (~theo@user/theo)
[13:28:58] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[13:29:03] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[13:30:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:30:26] <pycode1> bjs, are you there?
[13:30:57] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[13:35:20] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Client Quit)
[13:36:48] <rindolf> pycode1: can i help?
[13:39:56] <vanessa> hi, what is the best way to correctly do this?
[13:40:01] *** Joins: maromau (~mauro@151.95.237.215)
[13:40:19] <Wulf> vanessa: use "self" instead of "this". Or did you have a real question? :)
[13:40:35] <vanessa> for i in dir(object):   print(object.i);
[13:40:36] <rindolf> vanessa: do what?
[13:40:44] <pycode1> rindolf, thank you so much for your message but i just want to say a thing to bjs because yesterday we were talkinga bout a problem i had for three days...and i solved with one line -_-
[13:40:49] <Wulf> vanessa: getattr(object, i)
[13:41:06] <vanessa> thank you, Wulf
[13:41:27] *** Joins: agonhajdari (~textual@user/agonhajdari)
[13:41:37] <rindolf> Wulf++
[13:41:51] <Wulf> rindolf: syntax error
[13:43:13] *** Joins: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani)
[13:43:17] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[13:43:34] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[13:44:05] <vanessa> some of the attributes are long, so I wanted to see a short only first 30 characters. getattr(object, i).__str__()[:30] is giving me an error
[13:44:23] <rindolf> Wulf: at which line?
[13:44:43] <grawity> generally you should use str(x) instead of x.__str__()
[13:45:03] <vanessa> grawity, why?
[13:45:09] <rindolf> pycode1: i see
[13:45:24] <grawity> 1) it's the "official" interface, 2) many objects don't have a __str__(), I think, so str() might need to fall back to __repr__()
[13:45:28] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:45:47] <grawity> same reason why you use "a < b" instead of "a.__lt__(b)" etc
[13:47:17] <grawity> ah, huh, there's a default __str__() implementation in every object
[13:47:24] <Wulf> rindolf: 239559 according to my irc log
[13:47:57] <vanessa> I see. str(getattr(obj,i))[:30] also fixed the above error, grawity
[13:48:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:48:32] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 240 seconds)
[13:48:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[13:49:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:49:45] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[13:49:49] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:50:16] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:51:21] <rindolf> Wulf: heh.
[13:55:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:56:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:57:15] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[13:57:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:16] *** Joins: alius (~alius@2001:861:4444:49c0:3db0:d0c2:b370:4385)
[13:58:23] *** Joins: Tanngrisnir (~george@149.167.215.131)
[13:58:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:00:11] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[14:00:38] *** Parts: Tanngrisnir (~george@149.167.215.131) ()
[14:00:47] *** Joins: stealth[] (~stealth]@i6DFA2498.versanet.de)
[14:01:02] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[14:01:59] *** Quits: stealth[] (~stealth]@i6DFA2498.versanet.de) (Client Quit)
[14:02:32] *** Joins: stealth[] (~stealth]@i6DFA2498.versanet.de)
[14:03:19] *** Joins: WarpedAI (~Warped@user/warped)
[14:05:58] *** Quits: humbertowoody (~humbertow@189.132.138.198) (Ping timeout: 268 seconds)
[14:05:58] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 268 seconds)
[14:06:16] *** Joins: cruncher (~cruncher@90.68.118.49)
[14:07:52] *** Joins: pagios (~pagios@life.is-a.beauty)
[14:08:19] <pagios> hi b =  pybase64.b64decode(a)    print(b) is giving me output 'b',theValue,    how can i remove the 'b' part?
[14:08:31] <Wulf> pagios: what is pybase64?
[14:08:41] <Wulf> pagios: anyway, try .decode()
[14:09:16] <pagios> Wulf:  its a lib
[14:09:26] <pagios> it doesnt have a .decode()
[14:09:37] <grawity> it doesn't but the returned bytes-object does
[14:09:50] <grawity> anyway, how does pybase64 differ from the 'base64' library that comes with python?
[14:09:54] <cruncher> hi, if i do lstA.append(lstB), but delete lstB later then lstA is empty... how can i prevent that?
[14:10:00] <Wulf> grawity: appears to be faster
[14:10:07] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[14:10:15] <pagios> Wulf:  https://pastebin.com/zMh7UFnA
[14:10:40] <Wulf> pagios: b.decode()
[14:11:11] <pagios> thanks
[14:11:43] *** Quits: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:11:45] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[14:12:04] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[14:12:29] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[14:12:42] <Repiphany> cruncher: `del lstB` only removes the lstB reference to the list, it should still exist and be accessible by lstA[0] or whatever
[14:13:13] *** Joins: humbertowoody (~humbertow@189.236.11.28)
[14:13:23] <cruncher> Repiphany, oh, maybe there is the problem, i did lstB.clear()
[14:14:16] <Repiphany> lstA[0] and lstB both refer to the same list in memory so clearing either one is the same thing
[14:14:29] <Repiphany> You're not making a copy when you just append one list to the other
[14:14:51] <cruncher> Repiphany, yes, but how could i make a copy?
[14:15:20] <grawity> lstB[:] for lists, [*lstB] or list(lstB) for any iterable, I think lstB.copy() is a thing too?
[14:15:43] <Repiphany> It depends on what the list contents are and why you want a copy in the first place
[14:16:12] <grawity> also wondering if that lstB.clear() is necessary
[14:16:14] <Repiphany> and why you're bothering to clear the contents of one of the lists
[14:16:47] <grawity> as opposed to a) deleting lstB entirely, or b) putting a whole new empty list [] in lstB
[14:16:48] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-df9-618-6d9-5d87.fixed6.kpn.net) (Remote host closed the connection)
[14:16:48] <cruncher> grawity, yes, lstA.append(lstB.copy()) works like wanted, thanks
[14:17:08] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[14:17:22] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Client Quit)
[14:17:23] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[14:17:38] <Repiphany> Smells a bit XYish but whatever
[14:18:04] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-7dea-c95f-7e56-a6cd.fixed6.kpn.net)
[14:18:09] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[14:18:10] <cruncher> no, not necessary, i could also do del lstB and a lstB = [] after that again
[14:19:42] <cruncher> the thing is i need lstB empty every time since i use it as a temporary holder
[14:20:12] <Repiphany> `lstB = []` does that without needing to worry about deleting anything
[14:21:01] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[14:21:04] *** Joins: netpipe (~netpipe@user/netpipe)
[14:21:34] <Repiphany> cruncher: Dummy toy example https://bpa.st/GNWA
[14:21:39] *** Joins: jancoow (~jancoow@user/jancoow)
[14:22:20] *** Quits: NeoCore (~neocore@195.200.221.195) (Quit: Leaving)
[14:23:15] *** Joins: jinsun (~quassel@user/jinsun)
[14:23:45] *** Joins: stealth[]- (~stealth]@2001:9e8:36e1:6300:701c:fb77:fe98:95f6)
[14:25:46] <cruncher> Repiphany, yes, seems the lstB = [] is the easiest variant
[14:26:26] <cruncher> thank you Repiphany and grawity
[14:26:37] *** Quits: stealth[] (~stealth]@i6DFA2498.versanet.de) (Ping timeout: 240 seconds)
[14:28:46] *** Joins: ThanatosJ (~Thanatos@197.210.45.218)
[14:29:07] *** Joins: interweb (~interweb@user/interweb)
[14:30:04] *** Quits: Thanatos (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[14:31:27] *** Quits: luischi (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[14:31:32] *** Quits: foul_owl (~kerry@212.102.47.57) (Ping timeout: 252 seconds)
[14:31:57] *** Joins: NeoCore (~neocore@195.200.221.172)
[14:33:38] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[14:34:24] *** Quits: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[14:36:03] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[14:38:25] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[14:38:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:39:05] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Client Quit)
[14:40:01] *** Joins: SoF (~skius@user/skius)
[14:41:22] *** Joins: fikran (~fikran@user/fikran)
[14:41:27] *** ChanServ sets mode: +o nedbat
[14:41:34] *** nedbat sets mode: -fr 
[14:41:42] *** ChanServ sets mode: -o nedbat
[14:42:26] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[14:45:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:45:51] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[14:46:41] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[14:47:12] *** Joins: bluedust (~bluedust@103.165.167.220)
[14:48:39] *** Joins: afidegnum (~user@102.176.94.57)
[14:49:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:49:37] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 240 seconds)
[14:50:09] <afidegnum> hi, I don't understand why i'm having an error of String indices must be integer at https://www.toptal.com/developers/hastebin/hukaxigeha.coffeescript
[14:50:13] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:50:27] <afidegnum> i'm trying to recurse through a nested json data
[14:50:57] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (Ping timeout: 240 seconds)
[14:50:57] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 240 seconds)
[14:51:07] <ChrisWarrick> afidegnum: please use https://bpa.st/+python to paste your code
[14:51:17] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[14:51:59] <afidegnum> https://bpa.st/B2VQ
[14:52:38] <TML> afidegnum: when you recurse with template_tags(c['tag']) you are passing a value like "html" - and "html"["children"] is a TypeError
[14:53:33] <afidegnum> oh!
[14:54:23] <TML> you probably just want to pass `c`, rather than `c['tag']`
[14:55:16] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[14:55:29] *** Joins: bluedust_ (~bluedust@117.204.159.226)
[14:55:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:56:14] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:56:50] <afidegnum> TML: thanks, but not getting the desired result,
[14:57:06] <afidegnum> let me try something else
[14:57:11] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[14:57:51] <TML> afidegnum: Well, that more-or-less works here for me: https://replit.com/@tml/GiganticSpatialComputation#main.py
[14:58:17] *** Quits: bluedust (~bluedust@103.165.167.220) (Ping timeout: 240 seconds)
[14:58:22] <TML> I added that "print(parent_tag)" statement because your existing "template_tags" doesn't do anything
[14:58:40] <afidegnum> I wanted to create a nested tree
[15:00:02] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[15:00:28] <TML> you already have one
[15:00:33] <TML> why recreate it?
[15:01:00] <TML> If you look at https://replit.com/@tml/GiganticSpatialComputation#main.py I made some changes so the print actually shows the structure
[15:01:09] <TML> Full name: / > html > body > div6 > div7 > h2-3
[15:01:54] <afidegnum> i'm trying to create a custom template pug templating system to be integrated into a different framework, it goes like view! { tag  {}}
[15:01:54] *** Quits: maromau (~mauro@151.95.237.215) (Quit: Konversation terminated!)
[15:01:55] *** Joins: weedmic (~weedmic@5.102.235.240)
[15:02:05] *** Joins: interweb (~interweb@user/interweb)
[15:02:10] <TML> afidegnum: That sentence was completely meaningless to me, sorry
[15:02:16] <afidegnum> hold a sec
[15:02:22] <TML> "a custom template pug templating system to be integrated into a different framework"
[15:02:43] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[15:02:50] <afidegnum> wait a min
[15:04:58] *** Joins: foul_owl (~kerry@212.102.47.57)
[15:05:23] *** Joins: netpipe43 (~netpipe@user/netpipe)
[15:05:47] *** Joins: fullstack (~Thunderbi@2.183.242.36)
[15:05:48] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:05:57] *** Quits: fullstack (~Thunderbi@2.183.242.36) (Client Quit)
[15:06:15] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:06:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:07:39] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:07:48] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[15:08:03] *** Joins: jmd (~user@de.cellform.com)
[15:08:19] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[15:08:49] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:08:57] *** Quits: netpipe (~netpipe@user/netpipe) (Ping timeout: 256 seconds)
[15:09:08] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:10:14] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[15:10:22] *** Joins: weedmic_ (~weedmic@5.102.235.240)
[15:10:35] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[15:10:56] *** Joins: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[15:11:21] *** Quits: weedmic (~weedmic@5.102.235.240) (Ping timeout: 268 seconds)
[15:11:49] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:12:06] *** Quits: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:12:40] <afidegnum> TML: this is what I've done and it rather returns None
[15:12:42] <afidegnum> https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[15:13:20] <TML> afidegnum: it returns None because template_tags never returns a value
[15:13:42] *** Joins: millido (~millido@84.210.150.128)
[15:13:49] <TML> note the distinct lack of the 'return' keyword in your function
[15:14:18] *** Joins: sincorchetes (~sincorche@29.red-83-33-10.dynamicip.rima-tde.net)
[15:14:19] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Max SendQ exceeded)
[15:14:48] <afidegnum> i've updated it, but it doesn't look nice at all, https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[15:15:32] <TML> so make it look nice
[15:15:47] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[15:15:53] *** Quits: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[15:16:11] <afidegnum> that's where i need help, i need to have nested tags displaed
[15:16:11] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[15:16:15] <sincorchetes> Hello all, I want to create a CLI menu to run a program. I want to do main.py --create-server --server-name blabla --server-plan exact --server-net-id 21 However, I don't know how to do in Click because you have @click.option and @click.arguments. If you use only @click.options, you will get: Error: Got unexpected extra argument (d). If you use @click.option and @click.argument after tells SERVER_NAME is not defined.... :&
[15:17:51] <The-Compiler> sincorchetes: click.option sounds correct. Can you show your code, via https://bpa.st/+python please?
[15:18:40] *** Joins: fef (~thedawn@user/thedawn)
[15:20:05] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:20:52] <sincorchetes> The-Compiler, https://bpa.st/HDUA
[15:21:41] *** netpipe43 is now known as netpipe
[15:22:27] *** Quits: resmo (~resmo@2a00:d420:9:8a00:4072:38bc:a9e6:8cad) (Ping timeout: 268 seconds)
[15:24:45] <afidegnum> any insight ?
[15:25:04] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:28:38] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:29:20] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[15:29:21] <netpipe> is there such thing as a python bot that does not spam and just runs python commands ?
[15:29:34] <netpipe> like a 5 line limiter on it
[15:29:36] <TML> afidegnum: I gave you an example, did you look at it?
[15:30:17] *** Quits: nicode (~nic@2607:f2c0:95f4:cc00:f012:6618:6643:90a4) (Ping timeout: 240 seconds)
[15:30:37] <netpipe> possibly a time limiter and a logger
[15:30:41] <The-Compiler> sincorchetes: don't use both option and argument
[15:30:54] <afidegnum> yes, that's what i've forked
[15:31:07] <afidegnum> TML: the one I showed you
[15:31:09] *** Joins: legola (~legola@46.235.101.65)
[15:31:50] <TML> afidegnum: Go look again, I made changes after you forked
[15:32:20] *** Joins: nicode (~nic@2607:f2c0:9447:d00:cc88:6b2c:abb0:8ab7)
[15:32:37] <afidegnum> ok,
[15:33:14] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:33:21] <sincorchetes> The-Compiler, but If I use only options I got this: https://bpa.st/VNZA
[15:34:01] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:34:40] <afidegnum> TML: thanks, I've seen it, what should replace "document" with ? def template_tags(d, c_tag="{document}"):
[15:35:02] *** Joins: niv (~niv@limbo.cypherpunks.io)
[15:35:10] <TML> afidegnum: I have no idea, that's something you'll have to figure out. Whatever your "root" needs to look like
[15:35:11] <rindolf> sincorchetes: you have two "create_server"s identifiers
[15:35:51] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:13] <afidegnum> TML: ok, let me try my hand
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:55] <sincorchetes> rindolf,I've changed the name of the function create_server, and still happens
[15:38:35] <rindolf> sincorchetes: still agood idea
[15:39:18] *** Parts: pagios (~pagios@life.is-a.beauty) (Leaving...)
[15:40:19] *** Quits: weedmic_ (~weedmic@5.102.235.240) (Quit: Konversation terminated!)
[15:42:58] <afidegnum> TML: pls, no luck, https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[15:43:32] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[15:45:41] <TML> afidegnum: Well, just comparing it to my code, 3 things jump out at me: you didn't make your template_tags() take 2 parameters, you didn't define a default value for the 2nd parameter (because you didn't create it yet), and you didn't pass the second argument on recursive calls
[15:45:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:49] <afidegnum> TML: I did, def template_tags(d, c_tag=""):
[15:46:51] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:47:05] *** Joins: rsx (~dummy@ppp-188-174-157-104.dynamic.mnet-online.de)
[15:48:17] *** Joins: rajkosto (~rajkosto@178-221-115-84.dynamic.isp.telekom.rs)
[15:48:28] <The-Compiler> sincorchetes: that's because --create-server now consumes one argument
[15:48:29] <lericson> you have K numpy arrays of different shapes, you want all of them to be the same size. you do this by padding any array dimension smaller than the largest one with some padding value. is this possible without implementing yourself? i already did but now realize this is probably pretty common
[15:48:57] <TML> afidegnum: I still see `def template_tags(d): `
[15:49:01] <nedbat> lericson: which part did you implement yourself? Can you link us to the code?
[15:49:02] <lericson> basically [np.pad(v, [(0, max_shape[d] - v.shape[d]) for d in range(v.ndim)]) for v in arrays]
[15:49:09] <afidegnum> I need to save it
[15:49:34] <nedbat> lericson: seems good. i don't know if there's a thing like that in numpy already
[15:50:07] <afidegnum> TML: can you please refresh? https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[15:50:35] *** Joins: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it)
[15:50:56] *** Joins: georgios (~georgios@user/georgios)
[15:51:11] *** Quits: alius (~alius@2001:861:4444:49c0:3db0:d0c2:b370:4385) (Ping timeout: 245 seconds)
[15:52:28] <TML> afidegnum: OK, I see your function. What is the problem?
[15:53:11] *** Quits: XV8 (~XV8@2601:5cb:c001:50:bd72:41d1:6a0f:1d3a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:55:13] <afidegnum> I wanted the rest of the tag to be displayed inside the view! in a nested manner
[15:55:30] <lericson> nedbat: guess it's simple enough to do yourself
[15:55:51] *** Joins: dthpulse (~quassel@podciarou.sk)
[16:00:08] *** Joins: Rum (~bourbon@user/rum)
[16:00:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[16:00:25] *** Joins: zeden (~zeden@user/zeden)
[16:00:29] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[16:00:38] <afidegnum> TML: so far it's only "html" which prints inside the `my_view` which is strange, nothing from c['tag'] gets printed
[16:01:30] <TML> afidegnum: Why would you expect anything from c['tag'] to get printed? You never put it into anything that gets printed.
[16:01:39] *** Joins: arinov (~arinov@213.194.126.155)
[16:01:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:02:28] <afidegnum> TML: c_tag = c['tag']
[16:02:38] <TML> afidegnum: Right, but then you never _use_ c_tag
[16:03:04] <afidegnum> I did at line: 126
[16:03:30] <TML> but at line 126, c_tag contains whatever was passed in the second parameter
[16:03:51] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[16:04:20] <afidegnum> yes, you are right, means c_tag from the loop is never passed
[16:04:40] <afidegnum> How do i pass it ?
[16:05:54] <TML> well, first of all, I would urge you to stop re-using that variable name
[16:06:01] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[16:06:16] <afidegnum> ok
[16:06:17] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[16:06:25] *** Joins: withered_wolf (~withered_@97.112.15.92)
[16:06:31] *** Joins: Geminizer (~somebody@cpe-69-207-32-2.buffalo.res.rr.com)
[16:06:44] <TML> you've got c_tag as a parameter up until line 133, then you destroy it
[16:07:06] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:07:52] <afidegnum> how do i pass it on ?
[16:08:20] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[16:08:29] *** Joins: Xano (~Xano@2a00:23c4:4204:700:7c5c:4a96:71c7:8551)
[16:08:34] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[16:09:49] <TML> By…passing it
[16:09:58] <TML> I don't think I understand what your question is
[16:10:01] <afidegnum> including c_tag at Ln: 134 at template_tags(c, c_tag)  also didn't help
[16:10:23] *** Joins: moha (uid506645@id-506645.helmsley.irccloud.com)
[16:10:30] <afidegnum> I want to have something similar to ln: 109
[16:10:43] <TML> afidegnum: go back and look at my example - https://replit.com/@tml/GiganticSpatialComputation#main.py
[16:11:25] *** Quits: Geminizer (~somebody@cpe-69-207-32-2.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[16:11:50] <afidegnum> that was what i tried applying, with a different context,
[16:12:25] *** Joins: nochi (~nochi@static.216.66.130.94.clients.your-server.de)
[16:12:51] <afidegnum> I think the problem also is returning the value. how do i properly return it ?
[16:13:13] <TML> your return is fine
[16:14:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[16:15:47] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[16:15:52] <TML> if I had to guess what you're trying to do, I'd say you probably don't want the "view!" part being part of your method
[16:16:09] <TML> anything that's in there will get done on every recursion
[16:16:39] *** Quits: bluedust_ (~bluedust@117.204.159.226) (Remote host closed the connection)
[16:16:59] <afidegnum> I wanted it, that's why I enquoted it. I also wanted the tags to be aligned in a nested manner
[16:17:49] <maxtim> This feels like your trying to dynamically create a webpage...
[16:18:00] <TML> So you want your output to look like: "view! {{ div(class="foo") {{ view! {{ p {{  view! {{ span ..."?
[16:18:02] <maxtim> Is that close? afidegnum
[16:18:12] <afidegnum> yes TML,
[16:18:21] *** Joins: amanjhalmat12 (~amanjhalm@130.193.229.1)
[16:18:22] <afidegnum> maxtim: yes somehow close :)
[16:18:24] <TML> so you want the "view! {{" repeated on every element?
[16:18:35] <afidegnum> no, only the tags to be printed
[16:18:42] <TML> Because your example doesn't do that
[16:18:46] <afidegnum> i mean to be returned
[16:18:56] <TML> your example only does "view! {{" on the root
[16:19:08] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[16:19:22] <maxtim> pip3 install beautifulsoup4
[16:19:28] <TML> so either your example doesn't accurately reflect what you want, or you misread what I said
[16:19:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:19:38] <TML> because they're quite incompatible
[16:19:42] *** Quits: amanjhalmat12 (~amanjhalm@130.193.229.1) (Client Quit)
[16:19:50] <afidegnum> maxtim: no in a different template form, not BS4
[16:19:51] *** Joins: amanjhalmat12 (~amanjhalm@130.193.229.1)
[16:19:52] <TML> one might even say diametrically opposed
[16:20:49] *** Joins: NoelFlantier3 (~Hubert@static.238.157.9.5.clients.your-server.de)
[16:23:11] *** Leonarbro_ is now known as Leonarbro
[16:23:18] <TML> afidegnum: So, to repeat the question: do you want 'view! {{' added to every tag, or do you want it only at the root?
[16:23:29] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:23:54] <afidegnum> no, view shouldn't be added to every entry tag,
[16:24:00] <afidegnum> but it should contain other tags
[16:24:22] <afidegnum> I wanted like the result of ln: 116
[16:24:45] <maxtim> afidegnum, so view is root
[16:24:48] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:25:09] <afidegnum> yes, including "html"
[16:25:33] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[16:25:41] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[16:25:52] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[16:25:55] <TML> afidegnum: So move the 'view!' bit out of your function, because that will be added on every recursion, and you don't want it on every recursion
[16:26:12] <afidegnum> thanks,
[16:26:34] *** Quits: ThanatosJ (~Thanatos@197.210.45.218) (Ping timeout: 268 seconds)
[16:27:43] <TML> beyond that, all I can suggest is that you go back to the code I gave you - it should be pretty simple to think through what you need to do from there; though my example code won't do things like pretty indenting, you should at least be able to get the structure down.
[16:28:11] <afidegnum> ok
[16:28:11] <TML> You might want to do some pen and paper debugging - manually writing out what the state of your variables are on each recursive call
[16:28:32] <afidegnum> let me give it a try
[16:29:12] *** Joins: ThanatosJ (~Thanatos@197.210.45.218)
[16:30:44] <afidegnum> TML: from your example, how do i return parent_tag ?
[16:33:59] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[16:35:38] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[16:36:17] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[16:36:35] *** Quits: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net) (Quit: Leaving)
[16:37:20] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[16:38:53] <afidegnum> TML: returning the parent tag either inside the loop or outside the function returns empty. https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[16:39:32] *** Joins: ubert (~Thunderbi@p200300ecdf099447b83e75261410a8dd.dip0.t-ipconnect.de)
[16:39:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[16:40:53] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[16:41:55] *** Quits: stockholm (~Andreas@p200300d2c7032f008c491a5ff84ba46f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:42:01] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[16:42:56] <vanessa> why does a list sometimes accept [i,j] and sometimes throws "list indices must be integers or slices, not tuple" error.
[16:43:18] <Yhg1s> vanessa: a list would never accept L[i,j]. Are you sure you have a list?
[16:43:22] <bjs> vanessa: lists never accept [i,j]
[16:43:34] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:43:43] *** Joins: OCode (~OCode@user/Ocode)
[16:43:50] <dalan> What is the use case of `object.innerList[:] = [1,2,3]` ?
[16:43:57] <vanessa> 2 list of a list does accept [i,j], doesn't it?
[16:44:01] <bjs> vanessa: no
[16:44:07] <Yhg1s> dalan: it changes the contents of the list.
[16:44:15] <dalan> Why not omit the `[:]`?
[16:44:17] <Yhg1s> vanessa: you may be thinking of numpy arrays?
[16:44:20] <vanessa> what is an ndarray, btw?
[16:44:22] <Yhg1s> dalan: because it doesn't change the list.
[16:44:27] <Yhg1s> vanessa: it's a numpy array.
[16:44:32] <bjs> dalan: compare `x = [1,2,3]; y = x; x = [4,5,6]` with `x[:] = [4,5,6]`
[16:44:45] <bjs> dalan: with `x[:] = ...` then `y` sees the changes too
[16:44:57] *** Joins: alius (~alius@2001:861:4444:49c0:3db0:d0c2:b370:4385)
[16:45:13] <vanessa> and numpy array is what?
[16:45:24] <bjs> vanessa: okay clearly you're not thinking of numpy arrays
[16:45:56] <dalan> @bjs What is this called?
[16:46:12] <bjs> vanessa: (numpy is a popular library for doing math)  where did you see [i,j] ?  because lists never accept this
[16:46:23] <bjs> dalan: which called? it's "mutating" the list
[16:46:33] *** Quits: Oco[A]de (~OCode@user/Ocode) (Ping timeout: 256 seconds)
[16:46:46] <dalan> But why does the reassignment also effect `y` in this case?
[16:46:48] <bjs> dalan: it's like innerList.append(42) vs `innerList = innerList + [42]`  one of them actually changes the list itself, the other doesn't
[16:46:59] <dalan> Ahhh one is a new list
[16:47:01] <bjs> dalan: because `x[:] = ...` isn't re-assigning x
[16:47:06] <bjs> it's just mutating x
[16:47:24] *** Joins: Galladite (~Galladite@host-92-24-75-159.as13285.net)
[16:48:01] <bjs> dalan: like how `x[2] = 42` doesn't replace `x` with a whole new list, it only updates index 2.  `x[i:j] = ...` doesn't replace x either, it just inserts ... between i and j
[16:48:17] <bjs> (and if i or j are omitted, it takes the "ends")
[16:48:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:48:43] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:48:52] <vanessa> a numpy array accepts [i,j], that means that they overloaded __getitem__ to accept tuples. right? while a list's __getitem__ doesn't accept it. right?
[16:48:55] <bjs> dalan: `x[:] = new_list` could be written as `x.clear(); x.extend(new_list)` but it's just shorter
[16:48:57] <bjs> vanessa: yes.
[16:49:23] *** Quits: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:49:24] <dalan> Thanks @bjs 👍
[16:50:16] <vanessa> ok, thanks for clarifying.
[16:50:43] *** Joins: fikran (~fikran@user/fikran)
[16:51:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[16:54:19] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:55:58] *** Quits: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se) (Remote host closed the connection)
[16:57:19] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[16:57:28] *** cdown_ is now known as cdown
[16:59:06] *** Joins: wombawomba (~andre@h95-155-227-157.cust.a3fiber.se)
[16:59:37] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[17:00:14] *** Quits: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch) (Quit: leaving)
[17:01:33] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:02:35] *** Joins: treefrob (~treefrob@p2e5429e4.dip0.t-ipconnect.de)
[17:02:55] *** Joins: arinov (~arinov@213.194.126.155)
[17:03:17] *** Joins: cdown_ (~cdown@188.214.11.14)
[17:05:37] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[17:05:40] *** cdown_ is now known as cdown
[17:09:12] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[17:09:33] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[17:12:32] *** Quits: ubert (~Thunderbi@p200300ecdf099447b83e75261410a8dd.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:12:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2)
[17:12:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2) (Changing host)
[17:12:46] *** Joins: skapata (~Skapata@user/skapata)
[17:15:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:15:19] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[17:15:28] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:16:58] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:17:54] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[17:18:14] *** Quits: p-i-__ (~Ohmu@mx-ll-180.183.72-213.dynamic.3bb.co.th) (Remote host closed the connection)
[17:18:57] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[17:19:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[17:20:53] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:20:58] *** Joins: Crassus (~Crassus@user/crassus)
[17:21:01] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[17:21:22] *** Joins: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se)
[17:23:44] *** Joins: miique (~miique@181.46.139.166)
[17:24:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:25:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:25:49] *** Joins: weedmic (~weedmic@5.102.235.240)
[17:26:54] *** Joins: p-i- (~Ohmu@180.183.72.213)
[17:28:27] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:28:28] *** Joins: Macuser (~Macuser@2600:1003:b461:a17d:8420:b81c:5f21:533c)
[17:29:34] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[17:29:44] <NeilRG> how does this work? https://github.com/Marco-Sulla/python-frozendict/commit/ad449be47639d7c56328b315b0af5e84be00f188
[17:30:03] <NeilRG> doesn't this wipe out the old __subclasshook__?
[17:31:11] <amanjhalmat12> So hi guys  I've question in django
[17:31:12] <Yhg1s> it replaces the old one, yes.
[17:31:38] <amanjhalmat12> it must create new app for every model
[17:31:48] <amanjhalmat12> or single app for all models
[17:31:50] <amanjhalmat12> ?
[17:32:08] *** Joins: bloody (~bloody@user/bloody)
[17:33:37] *** test_ is now known as _flood
[17:33:54] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:36:21] *** Joins: fef (~thedawn@user/thedawn)
[17:37:06] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:38:21] *** Joins: arinov (~arinov@213.194.126.155)
[17:39:47] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[17:42:31] *** Quits: LordVan (~lordvan@gentoo/developer/lordvan) (Quit: Leaving)
[17:42:54] *** Joins: s0k1t (~s0k1t@86.106.121.100)
[17:43:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:44:23] *** Joins: stockholm (~Andreas@p200300d2c7032f008c491a5ff84ba46f.dip0.t-ipconnect.de)
[17:44:42] *** Joins: nicoz- (unixlab@ubuntu/member/nicoz)
[17:45:18] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[17:46:29] *** Quits: amanjhalmat12 (~amanjhalm@130.193.229.1) (Ping timeout: 256 seconds)
[17:46:58] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[17:47:17] *** Joins: arinov (~arinov@213.194.126.155)
[17:52:11] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[17:55:56] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[17:57:34] *** Joins: bluedust (~bluedust@117.204.159.226)
[18:00:27] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[18:00:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 240 seconds)
[18:01:00] *** Joins: bindu (~bindu@user/bindu)
[18:01:25] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Ping timeout: 240 seconds)
[18:01:57] *** Quits: Dotz0cat (~Dotz0cat@h118.166.187.173.ip.windstream.net) (Ping timeout: 240 seconds)
[18:02:27] *** Joins: Dotz0cat (~Dotz0cat@h8.47.90.75.dynamic.ip.windstream.net)
[18:02:44] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:04:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[18:04:38] *** Quits: five6433 (~five6@8.40.26.66) (Quit: Ping timeout (120 seconds))
[18:05:01] *** Joins: five6433 (~five6@8.40.26.66)
[18:05:26] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[18:05:32] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:05:47] *** Joins: amanjhalmat12 (~amanjhalm@130.193.229.1)
[18:05:59] *** Joins: thiras (~thiras@user/thiras)
[18:06:13] *** Quits: sincorchetes (~sincorche@29.red-83-33-10.dynamicip.rima-tde.net) (Quit: Leaving)
[18:06:45] *** Quits: WarpedAI (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[18:06:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:08:56] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[18:10:37] *** Joins: runelind (~runelind@user/runelind)
[18:11:09] *** Joins: pigweed (~pigweed@97.119.249.142)
[18:12:59] *** Joins: grooverman (~grooverma@177.102.117.95)
[18:16:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:17:35] <purplex> can i make android app in python?
[18:17:36] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[18:17:52] <ChrisWarrick> purplex: not really
[18:18:09] <deniska> purplex: it's technically possible, but it'd require quite deep knowledge of both android and python implementation
[18:18:31] <ChrisWarrick> purplex: you’d be much better off just learning kotlin
[18:19:01] *** Joins: grooverman (~grooverma@177.102.119.40)
[18:19:01] <deniska> purplex: you can use something like kivy for making multimedia kiosk style applications, but at this point may as well learn more native to android tooling
[18:21:05] <purplex> i learned native android 3 years ago using java + android studio, but i lost touch with java.
[18:21:47] <ChrisWarrick> the new (not so new) cool thing in android is kotlin
[18:22:09] <SnoopJ> Kivy is at least worth a look to see if it fits your wants
[18:23:01] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:24:48] <purplex> oh kotlin is language, seemed like a framework
[18:25:16] <SnoopJ> It's kinda like a much more concise version of Java
[18:25:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:25:51] <SnoopJ> I hadn't realized it became the officially preferred language, though, neat.
[18:27:06] *** Quits: dvyd (~dvyd@autolab1-pc.eng.tau.ac.il) (Quit: Client closed)
[18:27:19] *** Joins: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056)
[18:27:43] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[18:27:58] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[18:28:10] *** Joins: XV8 (~XV8@2601:5cb:c001:50:3d6e:cfa4:63ac:b4be)
[18:28:29] *** Quits: weedmic (~weedmic@5.102.235.240) (Quit: Konversation terminated!)
[18:28:30] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[18:29:20] *** vdamewood is now known as Guest9136
[18:29:20] *** Quits: Guest9136 (~vdamewood@fedora/vdamewood) (Killed (iridium.libera.chat (Nickname regained by services)))
[18:29:20] *** vinleod is now known as vdamewood
[18:30:13] <purplex> does this kivy provide native controls?
[18:30:25] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:31:27] <deniska> "multimedia style app" was a code for "no native controls"
[18:31:54] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ac49-a6fb-bfa4-621c.res6.spectrum.com)
[18:33:49] *** Quits: amanjhalmat12 (~amanjhalm@130.193.229.1) (Quit: Client closed)
[18:33:54] <SnoopJ> Is there any good way to include a module in an embedded CPython? I have libacmeplugin.so and would like to include the contents of acme-bindings*.whl if I can (so that users can just `import acme` in code meant to run in that embedding)
[18:34:04] <purplex> maybe i'll review java again
[18:35:07] <purplex> or, maybe none (i can still use pydroid on android to run scripts without gui)
[18:35:22] <SnoopJ> hmm, actually, maybe I can 'just' compile in the code generated by SWIG and get the necessary symbols that way.
[18:35:27] <deniska> purplex: if you are making stuff for yourself, you may check out termux + termux:gui
[18:35:57] <purplex> yes its just for a personal app
[18:36:00] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:36:27] *** Jazzy is now known as jazzy
[18:36:53] *** jazzy is now known as Jazzy
[18:37:27] <purplex> deniska: for a gui?
[18:37:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:38:04] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[18:38:38] *** Jazzy is now known as jazzy
[18:38:43] <purplex> let me see
[18:38:48] <deniska> purplex: termux is kinda like homebrew for android, termux:gui is an addon which allows you to create android activities https://github.com/termux/termux-gui
[18:39:07] <purplex> so its like pydroid
[18:39:21] <purplex> but with gui
[18:39:27] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[18:40:05] <deniska> purplex: termux is like a linux distro for (non-rooted) android, it can run python, among a lot of other stuff
[18:40:14] *** Joins: bluedust_ (~bluedust@89.238.130.72)
[18:40:24] <purplex> I suppose it runs everything from .py script including gui (no apk required)
[18:40:49] <deniska> yeah, you'd run py files
[18:42:18] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[18:43:08] <purplex> in pydroid which i have installed, it seems it will use 'Tkinter' for gui
[18:43:14] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[18:43:32] *** Quits: bluedust (~bluedust@117.204.159.226) (Ping timeout: 240 seconds)
[18:44:39] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[18:44:59] *** Joins: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com)
[18:45:14] *** Joins: bluedust (~bluedust@117.204.159.226)
[18:45:56] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 268 seconds)
[18:46:03] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[18:46:07] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[18:48:06] <purplex> deniska: termux must be more capable than pydroid since you say its like linux, but it misses an IDE
[18:48:17] *** Joins: tomitek (~tomitek@host-80-238-118-45.jmdi.pl)
[18:48:35] <deniska> purplex: well, vim/emacs/nano do run
[18:48:57] *** Quits: bluedust_ (~bluedust@89.238.130.72) (Ping timeout: 256 seconds)
[18:49:05] <deniska> purplex: you can coerce it into running X11 applications, but it's not very pleasant to use, especially on a phone, on a tablet it's ok
[18:49:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[18:49:37] <mrwick> termux comes with sshd, so you can ssh into your phone and develop remotely
[18:49:40] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[18:49:42] <deniska> purplex: you can also run ssh-server on the phone and access it from a computer
[18:49:47] <purplex> can it run more than one .py script or just one?
[18:49:47] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[18:50:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:50:59] <purplex> e.g. if i want to run one in background as service and then i want to run another (or maybe its not standalone like .apk)
[18:51:02] <deniska> purplex: it's like a linux distro, and a terminal emulator, with tabs, so you can certainly run multiple things at the same time
[18:51:30] <deniska> not sure if it's the right tool for your usecase, but it's certainly a fun one to play around with
[18:52:18] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[18:52:24] <purplex> yea its good enough, but may not have full control like native apk to run programs in background
[18:53:00] <deniska> I mostly use termux as an ssh-client with "normal" openssh config and key format, to run youtube-dl instead of one these dodgy android youtube downloaders, and as a file manager
[18:53:07] <purplex> i will just run .py script for some data analysis from time to time
[18:53:49] <deniska> it has "keep wakelock" button you can press so that android doesn't pause your programs when it's in background or the screen is turned off
[18:54:39] <purplex> yea thats good then, i'd like to run when my phone screen is turned off so it keeps crunching data
[18:54:41] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:54:44] *** Joins: jcass4 (~jcass4@066-188-202-056.res.spectrum.com)
[18:54:58] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[18:55:12] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[18:55:29] <foo> w2
[18:55:43] <purplex> since my phone stays idle most of time so i thought i could use its 8 core cpu for something
[18:57:06] *** Joins: runelind_ (~runelind@user/runelind)
[18:57:11] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 252 seconds)
[18:57:39] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 268 seconds)
[18:58:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[18:59:50] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::30)
[19:00:04] *** Joins: fikran (~fikran@user/fikran)
[19:01:22] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[19:04:22] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[19:05:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:06:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:07:55] *** Joins: retrosenator (~retrosena@79.sub-174-245-112.myvzw.com)
[19:11:00] <vanessa> purplex, you don't love your battery life or what?
[19:11:42] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[19:17:52] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[19:18:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:20:31] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[19:21:34] *** Joins: Forsaken87_ (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[19:24:00] *** Quits: withered_wolf (~withered_@97.112.15.92) (Remote host closed the connection)
[19:24:02] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Ping timeout: 240 seconds)
[19:24:35] *** Joins: withered_wolf (~withered_@97.112.15.92)
[19:24:44] *** Quits: withered_wolf (~withered_@97.112.15.92) (Remote host closed the connection)
[19:24:59] *** Joins: withered_wolf (~withered_@97.112.15.92)
[19:27:22] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[19:27:31] *** Joins: damonlynch (~ngaio@66.63.167.101)
[19:29:07] *** Quits: ThanatosJ (~Thanatos@197.210.45.218) (Ping timeout: 268 seconds)
[19:29:08] *** Joins: Roey (~Roey@user/Roey)
[19:31:43] *** Joins: slav0nic (slav0nic@python.su)
[19:31:59] *** Joins: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com)
[19:32:51] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:34:24] *** Joins: jmd (~user@de.cellform.com)
[19:38:29] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[19:39:41] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[19:40:09] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[19:41:32] *** Joins: zebrag (~chris@user/zebrag)
[19:41:43] *** Joins: eroux (~eroux@102-65-85-177.ftth.web.africa)
[19:42:17] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[19:42:38] *** Joins: ThanatosJ (~Thanatos@197.210.45.218)
[19:43:07] *** Joins: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net)
[19:44:12] *** Joins: nanobot567 (~pi@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[19:45:09] *** Joins: Helle (~helle@45.83.235.185)
[19:45:30] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:45:58] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[19:47:03] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[19:50:14] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 260 seconds)
[19:50:28] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:50:28] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[19:50:40] *** Joins: gdd (~gdd@129.199.146.230)
[19:50:58] *** Joins: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com)
[19:53:37] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:53:45] *** Joins: seednode (~seednode@user/seednode)
[19:53:56] *** Quits: tWqaq (~tWqaq@240e:389:5dd3:9000:b897:88db:ae87:ee3b) (Quit: Leaving)
[19:54:17] *** Quits: Macuser (~Macuser@2600:1003:b461:a17d:8420:b81c:5f21:533c) (Ping timeout: 240 seconds)
[19:54:23] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[19:54:39] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:57:29] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[19:57:39] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[19:57:39] *** Joins: menace (~someone@user/menace)
[19:57:49] *** Quits: ThanatosJ (~Thanatos@197.210.45.218) (Read error: Connection reset by peer)
[19:57:55] <rindolf> Roey: hi,ltns
[19:58:11] *** Joins: ThanatosJ (~Thanatos@197.210.45.218)
[19:58:36] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[19:59:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:01:36] *** Joins: grooverman (~grooverma@177.102.117.95)
[20:02:15] *** Quits: rajkosto (~rajkosto@178-221-115-84.dynamic.isp.telekom.rs) (Quit: Leaving)
[20:02:59] *** Joins: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com)
[20:03:12] *** Joins: yitz (~yitz@exercism/yitz)
[20:03:58] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:04:53] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Ping timeout: 256 seconds)
[20:06:10] *** Quits: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud) (Quit: Textual IRC Client: www.textualapp.com)
[20:06:16] *** Quits: MikZyth (~MikZyth@host-20-157-66-217.spbmts.ru) (Quit: WeeChat 3.4)
[20:06:35] *** Joins: rajkosto (~rajkosto@93-87-179-94.dynamic.isp.telekom.rs)
[20:08:47] *** Joins: andreasbuhr (~quassel@p549dbe1a.dip0.t-ipconnect.de)
[20:09:17] <afidegnum> pls i'm stuck in a middle, can you please give a hand ? after lengthy tries, i still can't get my custom tags to work, https://replit.com/@alexandropov/GiganticSpatialComputation#main.py
[20:10:10] *** Quits: tomitek (~tomitek@host-80-238-118-45.jmdi.pl) (Quit: Leaving)
[20:10:26] <jello> Hello, I have a list of dicts. How do I remove a dict from the list based on keys/values in that dict? For example, if the dict has 'deleted':'yes' ?
[20:11:00] <ChrisWarrick> jello: [d for d in list_of_dicts if d.get("deleted") != "yes"]
[20:11:06] <skullY> you'll have to iterate over the dict, check the value of the deleted key, and del(dict[key])
[20:11:19] <grym> skullY: better to rebind the name with a comprehension as ChrisWarrick just beat me to
[20:11:35] <skullY> yeah, he beat me too :)
[20:11:37] <nedbat> skullY: you won't be able to del from the list you are iterating over safely
[20:11:48] <jello> ChrisWarrick: thanks!
[20:12:39] <jello> next question: how can I do a multi-level sort of this list_of_dicts based on various fields in the dicts?
[20:13:05] *** Quits: rsx (~dummy@ppp-188-174-157-104.dynamic.mnet-online.de) (Quit: rsx)
[20:13:07] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:13:25] *** Joins: TechTheory (~lwait@2600:8800:7c03:c400:60cd:352c:88b0:13c0)
[20:13:26] <ChrisWarrick> jello: can you show an example?
[20:13:26] <jello> eg. if the dicts have last_name and first_name keys, and I want to sort first by last_name, then by first_name
[20:13:27] *** Joins: Thanattt (~Thanatos@105.112.22.185)
[20:13:38] <grym> sorted(... key = lambda x: (x[firstkey], x[secondkey],...)), i think.
[20:13:48] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[20:13:57] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.255) (Ping timeout: 240 seconds)
[20:14:10] *** Joins: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33)
[20:14:28] <ChrisWarrick> or key = operator.itemgetter(firstkey, secondkey)
[20:14:32] <TechTheory> what your guys favorite thing about python just out of curisosity
[20:14:45] *** Joins: brabrax (~brabrax@user/brabrax)
[20:14:47] *** Joins: levin (~levin@ip5b43276c.dynamic.kabel-deutschland.de)
[20:15:26] <jello> ah, so the key param takes a function which would received the dict as its only arg. I can work with that. Thanks ChrisWarrick grym !
[20:16:02] *** Parts: levin (~levin@ip5b43276c.dynamic.kabel-deutschland.de) ()
[20:16:08] <grym> jello: yeah. and if what you need to do is a little complicated, you can always `def sorter_key(value):...; sorted(..., key=sorter_key)` instead of dropping in a lambda
[20:16:26] <jello> grym: makes sense, thanks again!
[20:16:47] *** Quits: ThanatosJ (~Thanatos@197.210.45.218) (Ping timeout: 256 seconds)
[20:16:57] *** Quits: sudomannn (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33) (Ping timeout: 240 seconds)
[20:17:05] *** Quits: alius (~alius@2001:861:4444:49c0:3db0:d0c2:b370:4385) (Quit: Leaving)
[20:17:37] *** Quits: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com) (Ping timeout: 240 seconds)
[20:18:36] <afidegnum> any insight ?
[20:19:07] *** Joins: nomic (~nomic@185.198.243.161)
[20:19:41] *** Quits: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net) (Ping timeout: 252 seconds)
[20:19:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:20:12] *** Joins: raxor2k (~raxor2k@78.158.236.72)
[20:20:35] *** Joins: arinov (~arinov@213.194.126.155)
[20:20:44] *** Quits: Thanattt (~Thanatos@105.112.22.185) (Read error: Connection reset by peer)
[20:21:12] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:21:34] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:23:04] <TechTheory> is Tensorflow hard to learn
[20:23:33] *** Quits: jcass4 (~jcass4@066-188-202-056.res.spectrum.com) (Quit: Client closed)
[20:24:45] <raxor2k> is there a way to stop line 39,40,41 running once the variable on line 2 becomes true? right now it keeps calling those 3 last lines all the time: https://bpa.st/Z42Q
[20:25:07] *** Joins: knstn (~knstn@ppp-94-66-57-173.home.otenet.gr)
[20:25:30] <vanessa> TechTheory, barebones Tensorflow is hard. Tensorflow+Keras is easier. But PyTorch is better then Tensorflow in all respects.
[20:26:21] *** Joins: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com)
[20:26:23] <InPhase> raxor2k: You can simply add it to the conditionals you are checking.
[20:26:25] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[20:26:30] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:26:39] <TechTheory> just curious why is pytorch better and is it easy to learn
[20:26:54] <vanessa> why does the carriage return not work in Python?
[20:27:02] *** Quits: Tas-sos (~Tas-sos@ppp005054047017.access.hol.gr) (Quit: Lost terminal)
[20:27:23] <grym> nicer API
[20:27:34] *** Quits: VaniaPy (~VaniaPy@46.12.11.60.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:27:37] <grym> (pytorch has a nicer API than tensorflow)
[20:27:45] <raxor2k> inPhase: you mean moving it from line 2 to line 19?
[20:27:54] *** Joins: junktext__ (~junktext@gateway/vpn/pia/junktext)
[20:28:17] *** Joins: jcass4 (~jcass4@066-188-202-056.res.spectrum.com)
[20:28:18] *** Quits: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com) (Remote host closed the connection)
[20:28:18] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[20:28:19] <vanessa> TechTheory,  transparent tensors, dynamic graphs, functional api, etc
[20:28:41] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:28:42] <InPhase> raxor2k: What moving?  Line 2 is just an initialization.  You would do another conditional check for it.
[20:29:11] <InPhase> raxor2k: Oh, in fact you already do have it in that list of conditionals.
[20:29:51] *** Parts: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com) ()
[20:30:03] <InPhase> raxor2k: If lines 41 and 42 are being run more than once, then you have made a logic error somewhere else in the code.
[20:30:12] <vanessa> does anybody know why carriage return is not working as expected?
[20:30:59] <raxor2k> InPhase: in worst case i just add that variable in the class instance, but if possible i want to avoid that
[20:31:18] <deniska> vanessa: what are you trying, and what are you expecting?
[20:31:18] <InPhase> vanessa: It typically works just fine.  But you might be facing a Windows line ending issue not properly addressed.
[20:31:26] *** Joins: mokulus (~mokulus@user/mokulus)
[20:31:31] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[20:31:56] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:31:57] *** Joins: zebrag (~chris@user/zebrag)
[20:32:01] <InPhase> vanessa: Every OS using \n as a line ending, except Windows which by default considers the two characters \r\n a line ending.
[20:32:07] <InPhase> s/using/uses/
[20:32:33] *** Joins: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com)
[20:32:49] <raxor2k> Think i need the magic of bjs here
[20:33:08] <vanessa> print("%08d-%08d\r"%(some_integer, another_int)); doesn't update the line but prints newline everytime.
[20:33:32] <vanessa> InPhase, I am not on Windows.
[20:33:54] <InPhase> vanessa: Then what's the \r for?
[20:34:31] <ChrisWarrick> vanessa: print("%08d-%08d" % (some_integer, another_int), end='\r')
[20:34:52] <grawity> vanessa: print() always appends \n -- it isn't going to look at your string and decide "oh, you added a \r, I won't print an \n then"
[20:34:54] <vanessa> \r is to go to the beginning of the line and overwrite the text instead of going to newline
[20:35:01] <ChrisWarrick> InPhase: it can be used for erasing text for an ultra-simple console UI thing
[20:35:10] <grawity> vanessa: to disable the trailing \n (or change it to something else) you have to pass the end= arg
[20:35:21] <InPhase> vanessa: Ah, yes, if you're looking to NOT do a line ending, then follow ChrisWarrick's end='\r' example.
[20:35:22] <grawity> vanessa: e.g. print("abc\r", end="") or print("abc", end="\r")
[20:35:54] <grawity> vanessa: additionally you might want to specify flush=True, otherwise I think prints without an \n can get buffered
[20:36:26] *** Quits: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:36:28] <vanessa> oh, oh. now I get it. I was inserting '\n' at the end of all my print statements and was wondering why python is doing markdown-style newlines
[20:36:51] <InPhase> :)
[20:37:16] <Jong> Is there a word that means level of precision? Like if I iterated through a numpy array and set each number to random.randint(0,10000) / 1000, what sentence would you say to mean that the thousandths place is smallest step size? I'm having a hard time asking the question because I don't know the words
[20:37:33] *** Joins: circles (~circles@cpe-65-26-129-108.kc.res.rr.com)
[20:37:49] <grym> Jong: typically, 'tolerance'
[20:37:56] <grym> either absolute or relative
[20:37:57] <InPhase> Jong: Step size, precision, or unit.
[20:37:59] <mefistofeles> or precision itself
[20:38:32] <InPhase> Jong: If they represent time, sometimes one uses timestep.
[20:38:52] <grym> Jong: or maybe 'delta'
[20:38:56] <grawity> 'resolution' is common
[20:38:58] <mefistofeles> or resolution
[20:39:00] <mefistofeles> yes, exactly
[20:39:07] <grawity> e.g. "timestamps with 1ns resolution"
[20:39:09] <vanessa> coming from a low-level language, python makes a lot of things simple but there are many gotchas.
[20:39:09] <InPhase> Resolution can work in some contexts.
[20:39:28] *** Quits: bluedust (~bluedust@117.204.159.226) (Remote host closed the connection)
[20:39:35] <grym> vanessa: "we're helping! sometimes we help so much we don't even tell you!"
[20:39:40] <mefistofeles> vanessa: yeah, the higher level oyu go, the more conventions/opinions matter, I'd think
[20:39:48] *** Quits: akk (~akk@174-28-122-47.albq.qwest.net) (Quit: +++)
[20:39:57] *** Joins: Fremen (~Fremen@161.9.187.28)
[20:39:58] <grym> vanessa: i think it's normal to spend the first 6 months to a year of python dev feeling like you're walking on quicksand
[20:39:59] <InPhase> vanessa: Yeah, Python default targets a demographic expecting more hand-holding, so you have to turn off some of those conveniences at times, like with that end.
[20:40:10] <grym> (i certainly did)
[20:40:12] <Fremen> Hello everyone
[20:40:20] <SnoopJ> Jong, I'm kind of confused by the wording of your question. random.randint(0, 10000)/1000 may have digits that extend well beyond the thousandths place
[20:40:21] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.255)
[20:40:44] <nedbat> grym: i think that depends a lot on what you knew before
[20:40:50] <SnoopJ> ...no it won't, I'm thinking of a different denominator, don't mind me
[20:40:55] <grym> nedbat: c#, matlab, latex (in my case)
[20:41:14] * SnoopJ read randint() but *thought* random()
[20:41:15] <InPhase> vanessa: There is more of that with unicode strings versus bytes, which are very helpful when you need them, but then sometimes you do low level things and need to dance around it.
[20:41:32] <grym> nedbat: i spent a lot of time getting nailed by mutable state where i didn't expect it, but also by things like print doing extra stuff that's certainly in the docs but is kind of transparent at use time
[20:41:46] <Fremen> I installed spyder on a pipenv and it also contained kite as well. But when I tried to follow the tutorial, it did not show methods or values inside matplotlib figure. Do I need to install a documentation file or etc.? Because when I searched this problem I got closed bug reports from 2019.
[20:41:53] <vanessa> I only know C, Java, AWK and learning Python now.
[20:42:28] <InPhase> vanessa: Should go fairly smoothly overall with that background.
[20:42:37] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:8fd1:153a:65d9:cd4c) (Ping timeout: 240 seconds)
[20:42:37] <vanessa> InPhase, yeah, the other day I got confused because, apparently 'c' is not a character. the correct way was, b'c'
[20:42:39] <SnoopJ> vanessa, coming from that sort of context, Python's approach to iteration can feel a little unnatural at first
[20:43:06] <InPhase> vanessa: Oh it's a character.  It's a unicode character, which is also a string.  It's just not a byte.  :)
[20:43:10] <grym> vanessa: 'c' is certainly a character
[20:43:17] <grawity> python doesn't have the concept of characters (and the C terminology of 'char' to mean 'byte' is honestly a bit weird)
[20:43:21] <SnoopJ> grym, they're talking about "character" as a type
[20:43:22] <grym> or, well
[20:43:24] <SnoopJ> as in `char`
[20:43:24] <grym> ok
[20:43:28] <grawity> I remember that from yesterday though, bytes vs str
[20:43:35] <grawity> anyway, if you want slightly more low-level output, that'd be sys.stdout.write("foo\r"); sys.stdout.flush()
[20:43:37] <bjs> raxor2k: what do you expect me to do, InPhase already said if those lines are executing more than once there's a logic error
[20:43:44] <grawity> would be unnecessarily verbose in most python scripts though
[20:43:46] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:cccf:1d7:a0ee:b34d)
[20:43:47] <InPhase> vanessa: b'c' is both a byte and a byte array.
[20:43:51] <vanessa> grym, 'c' is definitely not a char, i.e, uint8. it is a object.
[20:43:59] <grym> vanessa: oh.  yes.
[20:43:59] <SnoopJ> everything is an object in Python
[20:44:02] <grym> ^
[20:44:02] <grym> that
[20:44:07] *** Quits: circles (~circles@cpe-65-26-129-108.kc.res.rr.com) (Changing host)
[20:44:07] *** Joins: circles (~circles@user/circles)
[20:44:17] <bjs> vanessa: in Python 'c' is a string, which is of length 1.  Python (unlike other languages) doesn't have a dedicated "single-character" type.
[20:44:23] <InPhase> vanessa: The integer literal 4 also is n object.
[20:44:30] <phy1729> even functions and classes are objects
[20:44:31] <SnoopJ> there isn't a distinction between "primitive" types and complex ones, as there is in C/Java
[20:44:35] <grawity> vanessa: b'c' is an object too though
[20:44:41] <SnoopJ> there's just objects, and you get some objects "out of the box"
[20:45:14] <InPhase> vanessa: See for example:  (4).to_bytes(4, 'little')
[20:45:20] *** Joins: lucasb (uid333435@id-333435.hampstead.irccloud.com)
[20:45:32] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[20:45:50] <vanessa> SnoopJ, iterators are kind of okay. It is like a linked list. You only get to see the next element.
[20:46:10] <InPhase> vanessa: I probably picked the worst example numbers there.  The second 4 is just the byte size.
[20:46:13] <Jong> For a = random.randint(0, 10000, size=100)/1000, how'd you describe this array using the word precision? "The precision of this array is the thousandths place." ?
[20:46:25] <SnoopJ> vanessa, more like iterators, but you're in the right ballpark
[20:46:32] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Remote host closed the connection)
[20:46:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:46:53] <vanessa> iterators are like iterators. no shit sherlock
[20:46:54] <bjs> Jong: precision isn't the right word,  I mean especially when you're using floats
[20:47:03] <grym> Jong: floats (which is what that list has as elements) have precisions well beyond thousandths
[20:47:05] <SnoopJ> :|
[20:47:18] <bjs> vanessa: I think SnoopJ is trying to get across that iterators aren't "linked lists" but are their own thing
[20:47:41] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[20:47:42] <phy1729> iterators are more like coroutines
[20:47:49] <bjs> not really
[20:47:57] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[20:47:58] <grym> awww we've said the i-words again
[20:47:59] <SnoopJ> you can build coros with them, though
[20:48:15] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:48:58] <SnoopJ> anyway, when I mentioned iteration I was thinking mostly of the common struggle of wanting to write `for i in range(len(obj))` which often at first feels more natural coming from a language with C-like looping, but is fairly unpythonic
[20:49:08] <bjs> Jong: possibly you want to describe the step itself, e.g. "array of numbers in range [0, 10] with step of 0.1"
[20:49:29] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:49:39] <bjs> Jong: well I mean, this example isn't a range, but you want to say "multiples of 0.1" or something like that
[20:50:01] <bjs> Oh wait no I'm wrong that's not what your code is doing at all, sorry.
[20:50:08] <vanessa> what is a coroutine? Is it some C++ bloat. I don't know C++. Only C.
[20:50:26] <grym> vanessa: c++ isn't really involved in python at all
[20:50:33] <bjs> vanessa: it's not anything to do with C++, this is Python
[20:50:38] <SnoopJ> https://docs.python.org/3/glossary.html#term-coroutine
[20:50:40] <Jong> I write a print statement something like this:   for i in [1,10,100,1000,10000,100000]:  print(f"Using array with precision 1 / {i}") ;  a = random.randint(0, 10000, size=100)/1000 ; output = run_a_through_some_algorithm(a)
[20:50:50] <bjs> Jong: the output array doesn't really have a precision does it? Because the "Precision" changes as you go through
[20:51:24] <grawity> vanessa: in that case https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html
[20:51:25] <SnoopJ> they're a generalization of subroutines (functions) that can be started/stopped. they're useful for concurrent programming
[20:51:39] <bjs> vanessa: iterators are part of how Python implements iterable objects;  they are simply "objects you can get the 'next' value from".
[20:51:51] <raxor2k> bjs: Maybe you can see where the logic is wrong? i cant see that
[20:51:51] <SnoopJ> grawity, huh, neat, I didn't realize he'd written about them, but I've enjoyed his other articles
[20:51:53] <bjs> Jong: I'm not sure "precision" is really a useful word here
[20:52:18] <bjs> raxor2k: I can't because you still haven't learned how to make a http://sscce.org/ and your code is bits of lines cut and paste into bpaste, there's 0 way anyone can tell what's going on there
[20:52:24] <grawity> SnoopJ: the PuTTY source code uses coroutines in C *extensively*
[20:52:29] <SnoopJ> oh, I must have realized it, I have this article in my pile of references because of the "Coding Standards" section
[20:52:45] <SnoopJ> grawity, it's been many moons since I've gone poking around in there, and I was certainly nowhere close to that machinery when I did :)
[20:52:50] <bjs> raxor2k: given you refuse to make small executable examples to show what you're seeing and when we do figure it out and we give you the answer you often just refuse to read it...
[20:53:34] <vanessa> bjs, so a single-linked list.
[20:53:38] <bjs> vanessa: no
[20:53:40] *** Quits: jcass4 (~jcass4@066-188-202-056.res.spectrum.com) (Quit: Client closed)
[20:54:12] <bjs> vanessa: I mean, you can write an iterator object whose "next" value is the next item from a linked list.  But that doesn't mean all iterators are linked lists
[20:54:13] <nedbat> vanessa: yes, it's similar to a linked list, in that the only operation is "get me the next thing"
[20:54:33] <nedbat> vanessa: it's different in that iterators might not be working from a collection in memory
[20:54:42] <bjs> or might not be a list, or involve links, at all
[20:54:54] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:55:04] <SnoopJ> case in point: CPython implements lists as dynamic arrays, no links in sight
[20:55:10] <nedbat> vanessa: for example, itertools.count() is an iterator that gives you 0, 1, 2, 3, ... forever
[20:55:16] <InPhase> Jong: You could say "With a discretization size of 0.001"
[20:55:35] <nedbat> Jong: or you could say, "an array of values on a .0001 grid"
[20:56:00] <SnoopJ> but a linked list isn't a bad way to start thinking about how iterators work, since they both usually have "next" and there's a special value used to terminate traversal
[20:56:00] <Jong> How about this? for i in range(0,5): print(f"Using array with {i} decimal places.") ; np.random.randint(0, 10000, size=5)/ 10**i
[20:56:09] <vanessa> single-linked list only points to the next node. so, you can only go to the next, but not to previous, like iterators
[20:56:26] <bjs> vanessa: yes, it's a similar idea that iterators give you the "next" item
[20:56:42] <InPhase> Jong: "Discretization size of 10**(-i)"
[20:56:44] <bjs> vanessa: and a single-linked list node might be one kind of iterator whose "next" is the next node in the list
[20:56:45] <SnoopJ> but what that 'next' is isn't necessarily part of any structure, it can be dynamic
[20:57:04] <SnoopJ> I guess you could say an iterator is kind of inducing a linked list, but ehhh
[20:57:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 256 seconds)
[20:58:06] <InPhase> Jong: While you're doing this though, do you understand how floating point precision works with decimal fractions and the way that decimal fractions cannot be exactly represented in finite floating point binary storage?
[20:58:07] <vanessa> yeah, what is the advantage of taking away freedom of random access and making sure something could only be accessible with a iterator
[20:58:30] <SnoopJ> well, iterators can be infinite, for one thing
[20:58:55] <InPhase> Jong: Because it might also be the case that you don't want to do what you're doing, and you might want to stick with integers and convert only at output, if you want to keep values exactly integer locked to this discretization step you are choosing.
[20:58:59] <vanessa> what will happen if I list(infinite_iterator)
[20:59:02] <bjs> vanessa: because you want to be able to loop over things (`for x in y:`) even when `y` doesn't have random-access
[20:59:12] <ChrisWarrick> vanessa: you’ll run out of memory
[20:59:22] <bjs> vanessa: list(some_iterable) creates a new list by looping over the iterable, if the iterable is infinite then you'll be waiting forever.
[20:59:23] <SnoopJ> yep, it'll churn until it consumes available memory and then barf
[20:59:28] <Jong> InPhase  that's it! Discretization. What about quantization? In music making software, the word "quantize" is used to align notes to a certain note value. (Note value meaning: https://en.wikipedia.org/wiki/Note_value)
[20:59:31] <ChrisWarrick> vanessa: you can loop over the infinite iterator though
[20:59:46] <TML> unless you have infinite memory, and then the answer is something like "The heat-death of the universe"
[20:59:54] <SnoopJ> `for item in infinite_iterable: print(item)` will also never halt, but it will print output as it goes
[20:59:55] <Jong> thanks InPhase
[21:00:06] <vanessa> so, the iterator forgets the past as soon as the HEAD jumps to the next element?
[21:00:15] <bjs> vanessa: iterators aren't linked lists.
[21:00:16] <SnoopJ> vanessa, iterators just produce new objects
[21:00:24] <SnoopJ> there is no link to forget because it didn't exist in the first place
[21:00:33] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:01:04] *** Joins: Betal (~Betal@user/betal)
[21:01:12] <ChrisWarrick> iterators have some state, which might be distinct from its output values
[21:01:16] <InPhase> Jong: Quantize is an acceptable term as well, recognized by mathematicians and physicisists at least as implying the same thing.
[21:01:32] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:02:19] <InPhase> Jong: Those from other fields might see "quantize" and think you mean "quantify" though.  It depends on your communication audience.  :)
[21:02:58] <bjs> vanessa: here is a concrete example, an iterator that just counts up https://bpa.st/74AA  (equivalent to nedbat's itertools.count() example)
[21:03:32] *** Joins: ttys000 (~ttys000@user/ttys000)
[21:03:42] <Jong> Often I spend more time trying to find the words to write in comments and print statements than I spend in coding the actual code.
[21:03:51] <bjs> vanessa: here, Counter is an iterator (because it has a __next__ which Python uses to get the "next" thing from the iteration).  this `for` loop will never end, and there's no actual linked-lists here
[21:04:27] <vanessa> oh, that actually makes a lot of sense.
[21:04:41] <InPhase> vanessa: The way to think of an iterator is that it's acting like a class, but where local function variables are serving the role of member variables, and it can return from the middle of the function and re-enter from where it left.  So it can do anything at all that you can do with a class that has its own state it tracks.
[21:05:04] <grym> Jong: that ought to be more normal than it is
[21:05:13] <ChrisWarrick> vanessa: the fact that the last value is stored as self.current is just a coincidence, I could replace line 11 with `return last * 2`
[21:05:33] <SnoopJ> InPhase, that's kind of complicated next to "you call __next__() on it and get the next value" :P
[21:05:51] <InPhase> SnoopJ: Well vanessa comes from Java.  :)
[21:06:01] <Jong> grym  really?? Are you telling me my struggle with language is normal? English is actually my first language, but finding the right words is tough sometimes.
[21:06:04] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:06:32] <InPhase> SnoopJ: From that context, generators are syntactic sugar on what small classes can do.
[21:06:46] *** Quits: Geminizer (~somebody@rrcs-72-45-146-210.nys.biz.rr.com) (Ping timeout: 260 seconds)
[21:07:06] <InPhase> (To the extent that there are small classes in Java...)
[21:07:24] <vanessa> InPhase, I come from C. Only know a little Java. ChrisWarrick, so iterators are more like syntatic sugar for a class that generates value on the fly.
[21:07:35] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:07:39] <vanessa> and saves its states
[21:07:40] <bjs> Jong: grym: this reminds me of something I was linked a while ago, http://thecodelesscode.com/case/220
[21:07:44] <ChrisWarrick> vanessa: iterators are not syntactic sugar
[21:07:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:07:51] <SnoopJ> vanessa, an iterator is an object that defines __next__() to give a next value, and __iter__() to produce itself.
[21:08:25] *** Quits: emx (~emx@adsl-84-226-68-198.adslplus.ch) (Quit: Leaving)
[21:08:39] <ChrisWarrick> language-wise, I’d call iterators a protocol/contract/interface
[21:08:39] <bjs> vanessa: in my example the class is real and I wrote it, that's how you make iterators in Python (by writing classes with those two methods)
[21:08:56] <bjs> vanessa: there isn't sugar, you really do have to write a class with __iter__ and __next__, it's very explicit.
[21:09:14] <SnoopJ> I would avoid the word "interface" in a conversation that includes javascript, but "contract" I would heartily agree to
[21:09:22] <bjs> (well, or you use something that already implemented those, like lists or generators or something)
[21:09:25] *** Joins: fikran (~fikran@user/fikran)
[21:09:51] <vanessa> now I get it.
[21:11:13] <vanessa> ChrisWarrick, bjs, SnoopJ and InPhase: thank you for bearing with me and my stupid questions. but eh, beginner here!
[21:11:19] <SnoopJ> they aren't stupid questions :)
[21:12:47] <SnoopJ> someone asked earlier what our favorite thing about Python is; I'd probably say the way it does iteration and makes all that index-juggling fade away
[21:13:08] <InPhase> vanessa: As a person who genuinely believes stupid questions exist, I will certify those weren't it.  ;)  That's a set of good learning questions.
[21:13:10] <TechTheory> Snoop is very helpful to me thank you and that was me
[21:13:44] <raxor2k> bjs: i dont know what i am doing wrong on line 88-91, can you help? : https://bpa.st/BBRA
[21:13:48] <TechTheory> I agree with you,InPhase
[21:13:51] <raxor2k> and then it is possible to run the program to show the problem
[21:13:53] <ChrisWarrick> SnoopJ: isn’t that a feature of basically all modern languages?
[21:14:30] <bjs> raxor2k: what is wrong with them
[21:14:36] <SnoopJ> ChrisWarrick, some of them. It feels like a clumsy bolt-on in most of the "modern" languages I've used that have grown this feature (I'm thinking of C++'s range-for mostly)
[21:14:48] <deniska> ChrisWarrick: in C-like languages it's… complicated
[21:14:50] <vanessa> ChrisWarrick, C doesn't have that sadly
[21:15:00] *** Joins: s0k1t_ (~s0k1t@206.217.205.17)
[21:15:12] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:15:15] <deniska> My favorite features of python compared to other languages are keyword arguments, and the lack of keyword `new`
[21:15:20] <raxor2k> bjs: i dont know
[21:15:36] <bjs> raxor2k: well does something go wrong? do you get an error? are you going to give me *some* clue as to why you say something is wrong
[21:16:07] <ChrisWarrick> SnoopJ: sure, C++ is a bit of a pain syntax-wise
[21:16:07] <SnoopJ> ChrisWarrick, but sure, I'm sure Python wasn't the first to the idea anyway. It just seems like Python got there and then "modern" stuff caught up 10-20 years later :)
[21:16:12] <Jong> vanessa if you're thinking of an iterator as basically a pointer that steps through an already-made array of numbers, that's not necessary how it works in python.  An often used alternative approach in Python is to replace the already-made array with on-the-fly generation of the element requested, discarding the need for an array entirely.  For example instead of creating an array [0,1,2,3,4,5,6] and iterating through it, you can make a function,
[21:16:12] <Jong>  def get_next_num_starting_from_zero(): i = 0 ; while True: t = i ; i = i+1 ; yield t.   To iterate through this: my_iterator = get_next_num_starting_from_zero ; print(my_iterator()) ;  print(my_iterator()) ;   print(my_iterator()) ..
[21:16:15] <InPhase> deniska: Keyword arguments and comprehensions are up there in my favorite features.
[21:16:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[21:16:25] <TechTheory> how would you send sms message in python without paying an company code it instead
[21:16:35] <SnoopJ> ChrisWarrick, the C++ syntax I'm actually fine with I think, it's more the way iterators work that just feels so clunky
[21:16:52] <SnoopJ> but then, C++ has much richer texture to them, so maybe that's just the price of all that functionality
[21:17:02] <InPhase> deniska: Keyword arguments do a good job of helping me to think more flexibly about interfaces.  There's a bit of a loss from lack of type dispatch, but the addition of keywords gives me another way to get at a good interface of a different type.
[21:17:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:17:27] <InPhase> s/of a different type/of a different kind/
[21:17:42] <raxor2k> bjs: ok so i made it, this code shows the problem: https://bpa.st/MWNQ
[21:17:44] <SnoopJ> It probably counts for a lot that Python thought about them from ~the beginning
[21:17:46] <raxor2k> you can paste it and run in
[21:17:47] <raxor2k> it
[21:17:54] *** Quits: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se) (Remote host closed the connection)
[21:17:55] <InPhase> And Python comprehensions just really simplify what could be some very elaborate code in other languages.
[21:18:02] <SnoopJ> Ruby's equivalent set my head to spinning when I tried to grok it
[21:18:15] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[21:18:22] <bjs> raxor2k: I don't run code people paste, just show me what happens (is there an error? is the output wrong?) and what you expected
[21:18:34] <deniska> InPhase: func(foo, bar=1, baz=2) is just so much nicer to read than func(foo,,,,1,,2)
[21:18:41] *** Quits: s0k1t (~s0k1t@86.106.121.100) (Ping timeout: 245 seconds)
[21:18:56] <vanessa> SnoopJ, that funny thing they do between || in Ruby are iterators, right?
[21:19:07] <InPhase> deniska: Yeah.  Basically, it lets functions do what I would otherwise do with configured classes.
[21:19:24] <raxor2k> i did tell it earlier? line 73, 74 and 75 shouldnt get called once "onetime_notifitcation_sent" becomes True ?
[21:19:28] <deniska> BuilderPattern
[21:19:28] <SnoopJ> vanessa, I don't know, I was talking about its equivalent of keyword arguments
[21:19:42] <bjs> raxor2k: okay, so you have some print()s, which do you see? how do you know what's going on?
[21:19:44] <SnoopJ> but I think that syntax shows up with iterators, yea
[21:20:00] <InPhase> deniska: And since it's so lightweight, I can do that all over the place and not have to justify the weight of it.  :)
[21:20:24] <bjs> raxor2k: lines 73-75 should be called if Python gets to that `elif` and the condition is true
[21:20:25] <vanessa> deniska, we also have *args counterpart in C. we call it varargs.
[21:20:31] <bjs> should be run
[21:20:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[21:20:50] <raxor2k> bjs: all i know is that "onetime_notification_sent" becomes true
[21:20:55] <raxor2k> and thats what gets printed
[21:21:05] <bjs> raxor2k: which line is that?
[21:21:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[21:21:21] <bjs> raxor2k: can you please take your output, copy+paste it and put it at the bottom of your code so we can talk about it
[21:21:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:21:26] <TechTheory> does anyone use replit.com here I recommnoded it it pretty cheap it 60 an year right now.It coding in the cloud? I woundering so if I need help with something you guys can help
[21:22:14] <bjs> raxor2k: if you show me what you actually saw, then tell me which prints you expected to see instead, I can help.  you need to actually show me things rather than make me guess
[21:22:16] <TechTheory> https://replit.com/~ is the link
[21:22:40] <InPhase> TechTheory: I used to use it when it was free.
[21:22:42] <raxor2k> bjs: ye sure, but you made me create a run able program for nothing
[21:22:44] <TML> TechTheory: I have been using replit for years and have not yet outgrownthe Free plan
[21:22:50] <bjs> raxor2k: not nothing
[21:22:52] *** Joins: bluedust (~bluedust@117.204.159.226)
[21:22:59] <InPhase> TechTheory: Haven't really touched it much lately.
[21:23:02] <bjs> raxor2k: now we have something concrete we can actually talk about, how do you not see that?
[21:23:21] <ChrisWarrick> TechTheory: coding in a good IDE is much more convenient IMO
[21:23:28] <ChrisWarrick> TechTheory: coding locally that is
[21:23:46] <TechTheory> so coding locally is better right
[21:24:03] <InPhase> TechTheory: I think replit was most convenient for sharing examples places like here, but it stopped being so convenient for that when they went harder into the accounts.
[21:24:11] <TML> I don't hate repl.it for putting together self-contained examples to show things
[21:24:29] <ChrisWarrick> TechTheory: faster, more convenient, more powerful
[21:24:32] <raxor2k> bjs: so here is code and trace: https://bpa.st/7AMA
[21:24:45] <SnoopJ> I liked it once upon a time but their UI changes put me off it for the most part
[21:24:55] <bjs> raxor2k: you had a for loop that looped over 2 things, how come your trace is really long?
[21:25:06] <SnoopJ> their support for most (all?) of PyPI is admirable, though
[21:25:08] <InPhase> TechTheory: But absolutely you want to primarily code locally with Python.  Those online sites are only good for sharing small examples, or sometimes for purposes of instruction.
[21:25:19] <TML> SnoopJ: yeah, the UI changes for viewing other people's REPLs have really tanked it
[21:25:22] <raxor2k> bjs: ehm, i dont know ?
[21:25:33] <SnoopJ> TML, it's got that "this won't exist as a free service in a few years" stank on it
[21:25:36] <bjs> raxor2k: oh the code changed, why did you add that for `for i in range(20):` doesn't that just make the output harder to read?
[21:25:54] <TechTheory> ok I just use replit when I go to school or share stuff.I going start coding loacally what the best ide
[21:26:05] <raxor2k> bjs: i had to make that more than 15 to show the problem
[21:26:08] <bjs> raxor2k: anyway, don't change the code again,  what's the problem
[21:26:11] <bjs> raxor2k: you did?
[21:26:19] <InPhase> TechTheory: If you're going to pay $60/yr, here's what you should do instead...  Go to digitalocean.com instead of replit.com, get a VPS for the same price, and you have a proper Linux computer that you can ssh into and share accounts with anyone you want to collaborate with.
[21:26:24] *** Quits: Fremen (~Fremen@161.9.187.28) (Quit: Leaving)
[21:26:26] <raxor2k> bjs: yes
[21:26:26] <bjs> raxor2k: you realise onetime_notification_sent  is a local variable?
[21:26:42] <raxor2k> bjs: yes i do. and yes i know that i can move that variable to inside the class
[21:26:47] <raxor2k> and it will solve everything
[21:26:53] <bjs> raxor2k: okay, well I'm glad we could help
[21:26:57] <raxor2k> but i possibly want to avoid that
[21:26:59] <bjs> that's the problem then
[21:27:20] <raxor2k> so there is no other option than to move that variable inside class ?
[21:27:25] <bjs> no
[21:27:32] <raxor2k> and im saying yes
[21:27:33] <grym> repl.it also did a favorite maintainer of mine a very dirty until they were called out on it extremely loudly, which i did not care to see very much
[21:27:37] <raxor2k> and im gonna find a way to do it
[21:27:38] *** Joins: rajkohaxor (~rajkosto@93-86-220-117.dynamic.isp.telekom.rs)
[21:27:49] <SnoopJ> InPhase, I used to have a VPS that cost me a whopping $12/yr. Granted, it also only had 256 MB of RAM, but so what? I rarely wrote programs with sophisticated needs that would run there
[21:27:50] <InPhase> TechTheory: A D.O. VPS will permit you to do anything at all that Python can do but at proper speeds and with full support for setting up environments flexibly, installing extra support packages, installing database software, and so on.
[21:27:57] <bjs> raxor2k: well it can't be a local variable, beacuse local variables aren't shared between different calls
[21:28:10] <InPhase> TechTheory: You could even slap JupyterLab on there if you want.
[21:28:19] <supakeen> Mrm, getting an illegal instruction on numpy import.
[21:28:32] <raxor2k> bjs: ok. So i wasted 1 hour then. Or i can look at it from a different view and say i learned something new ?
[21:28:33] <ChrisWarrick> grym: (who was involved, out of curiosity?)
[21:28:36] *** Joins: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126)
[21:28:37] <grym> (i am in fact talking to you now from a linode instance that has ipython/jupyer on it)
[21:28:51] *** Quits: bluedust (~bluedust@117.204.159.226) (Remote host closed the connection)
[21:29:00] <bjs> raxor2k: why did you spend an hour trying to not put it on the class if you already knew that was the solution?
[21:29:35] <grym> ChrisWarrick: radon rosborough (raxod502), who is entirely too precocious for his own good and also makes a really nice emacs package manager
[21:29:36] <raxor2k> bjs: because the class already have alot of variables
[21:29:36] <SnoopJ> supakeen, sounds interesting, what's the report like? My only guess would be "reinstall/rebuild it" on that basis, unless it's a flaw in one of its dependencies
[21:29:43] *** Joins: bitrot (~rajkosto@109-93-190-37.dynamic.isp.telekom.rs)
[21:29:44] <raxor2k> and i want to reduce the amount
[21:29:50] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:29:52] <bjs> raxor2k: it has like 6
[21:29:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:29:57] <SnoopJ> (which has been known to happen, I believe something in the 19.x series had a very serious incompat with OpenBLAS on Windows)
[21:29:58] <InPhase> SnoopJ: Looks like my $60/yr VPS came with 1GB and I'm using 354MB of it.  But I do a lot of things on it.
[21:30:15] <grym> ChrisWarrick: cf https://news.ycombinator.com/item?id=27424195 for the drama, if you're inclinde
[21:30:17] <bjs> raxor2k: and anyway, does it matter? it's clearly a property of the user is it not? so it should go on the class
[21:30:22] <ChrisWarrick> grym: thanks
[21:30:30] <InPhase> SnoopJ: Overall I'm very happy with that price point.  :)
[21:30:32] <supakeen> SnoopJ: Googling around seems to mention that this happens on the regular to numpy.
[21:30:36] <supakeen> See e.g: https://github.com/numpy/numpy/issues/18131
[21:30:55] <grym> afk for a bit
[21:31:01] *** Quits: rajkosto (~rajkosto@93-87-179-94.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[21:31:01] <raxor2k> bjs: the code i show u have 6 yes, but in reality? 20++
[21:31:09] <raxor2k> i didnt show all the code
[21:31:13] <ChrisWarrick> InPhase: there are cheaper trustworthy options out there
[21:31:39] <bjs> raxor2k: so what?  maybe you can do some rearranging of things but you shouldn't try and put things in random other places to make the number of variables smaller
[21:31:46] <SnoopJ> supakeen, what platform are you running on? That issue looks close-ish to the kind of incompat I'm remembering
[21:32:05] <raxor2k> bjs: ok fine.
[21:32:08] <bjs> raxor2k: maybe you should have a single `streaming_state` variable that contains another class that has all the information about the stream (for e.g.)
[21:32:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:32:16] <InPhase> ChrisWarrick: Any specific recommendations?  I have no intention of switching, but I like to keep a few options in the back pocket in case it becomes necessary later.
[21:32:16] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[21:32:23] <supakeen> arm64
[21:32:30] <bjs> raxor2k: it doesn't make sense to try take things out and put them in random places in the file to try make the `class` statement a bit shorter, that can't be more readable ?
[21:32:37] *** Quits: rajkohaxor (~rajkosto@93-86-220-117.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[21:32:43] <ChrisWarrick> InPhase: hetzner cloud
[21:33:03] *** Joins: rajkosto (~rajkosto@77-46-205-234.dynamic.isp.telekom.rs)
[21:33:09] <SnoopJ> supakeen, okay, so I'd update my guesses to: 1) try out the OPENBLAS_CORETYPE thing in that issue 2) try installing something from the 1.18.x and/or 1.20.x series, if the flaw is happening on 1.19.x
[21:33:23] <supakeen> Yea, going to try 1.20 after dinner. Thanks.
[21:33:47] <SnoopJ> I'm tempted to just swear off 1.19.x because that was a serious bout of indigestion
[21:33:50] <ChrisWarrick> InPhase: oh, it looks like their prices went up recently
[21:33:51] *** Joins: rajkohaxor (~rajkosto@109-93-113-132.dynamic.isp.telekom.rs)
[21:34:09] *** Joins: stblaha (~stblaha@user/stblaha)
[21:34:10] <InPhase> ChrisWarrick: I see they just setup in Ashburn which is nearby.  A reasonable backup option, although it looks to be the same price point.
[21:34:25] <bjs> raxor2k: reducing number of attributes is often done by grouping things up smarter, and having some hierarchical structure. Instead of 10 variables about a particular thing, you have 1 that stores an object that has that information
[21:34:32] <SnoopJ> ChrisWarrick, InPhase I found my previous cheapo VPS by browsing https://lowendbox.com/ for a bit
[21:34:37] *** Quits: bitrot (~rajkosto@109-93-190-37.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[21:34:56] <ChrisWarrick> InPhase: Their old lowest price was €2.49 + VAT (and the existing boxes were grandfathered in)
[21:35:22] <SnoopJ> I believe HostBrew was the provider for that system, and I think the price tier was a special deal that you could just keep if you'd signed up
[21:35:45] <raxor2k> bjs: maybe i can create a pauseClass then
[21:35:50] <raxor2k> to handle the different pause options
[21:35:54] *** Joins: bitrot (~rajkosto@178-222-119-221.dynamic.isp.telekom.rs)
[21:35:55] *** Joins: Guest31 (~Guest31@pool-96-253-74-73.rcmdva.fios.verizon.net)
[21:37:13] <SnoopJ> supakeen, do let me know if changing numpy versions addresses the issue, I'm curious now :)
[21:37:25] <TechTheory> where vps on https://www.digitalocean.com/pricing/ I can't find it
[21:37:37] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 240 seconds)
[21:37:59] *** Quits: rajkosto (~rajkosto@77-46-205-234.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[21:38:28] <jinsun__> they call it "Droplets" I think
[21:38:32] <supakeen> SnoopJ: Same thing on 1.21.5.
[21:38:36] *** Quits: rajkohaxor (~rajkosto@109-93-113-132.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[21:38:40] <SnoopJ> bummer :(
[21:38:47] *** Quits: quidnunc (~user@bas3-montreal02-65-94-9-48.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.1))
[21:38:49] <TML> TechTheory: Droplets are DO's term for VPS
[21:38:49] *** jinsun__ is now known as jinsun
[21:38:54] <SnoopJ> I would try going down, too, FWIW, but if going up didn't address it I doubt that will
[21:38:55] *** Joins: rajkosto (~rajkosto@178.220.170.101)
[21:39:11] <SnoopJ> might need to hand-hold the CPU detection for the BLAS
[21:40:14] <SnoopJ> Or possibly switch the BLAS? I don't really know how they stratify in terms of support for ARM
[21:40:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:40:40] <raxor2k> bjs: you still think im a noob in python ?
[21:40:57] <InPhase> TechTheory: The cheapest one is under Droplets, Basic, then "Regular Intel", giving the $5/month one.
[21:41:04] *** Quits: bitrot (~rajkosto@178-222-119-221.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[21:41:38] *** Joins: sudomannn (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33)
[21:41:41] <nedbat> raxor2k: why do you ask?
[21:43:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[21:43:32] <supakeen> SnoopJ: the plot thickens: https://www.irccloud.com/pastebin/gmNZAYwu/
[21:43:32] *** Quits: rajkosto (~rajkosto@178.220.170.101) (Ping timeout: 268 seconds)
[21:44:37] *** Quits: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33) (Ping timeout: 240 seconds)
[21:44:46] <SnoopJ> supakeen, weird. what's the trace like running it with gdb?
[21:45:02] <bjs> raxor2k: something like a PauseState class yeah, then if `user.pause_state is None` then it's not paused, otherwise `user.pause_state.paused_at` contains the date+time it was paused etc,  you can do a lot by just re-organizing the objects
[21:45:17] *** Quits: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 240 seconds)
[21:45:23] *** Joins: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[21:45:24] * SnoopJ could see the initialization happening in a way that doesn't actually block Python, but doesn't know enough about the guts
[21:45:36] <supakeen> I could see that happening too.
[21:46:06] <SnoopJ> certainly matplotlib there is pulling numpy, but hopefully the stack trace would be less mysterious
[21:46:14] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (Read error: Connection reset by peer)
[21:46:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:46:24] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Quit: Ping timeout (120 seconds))
[21:47:02] <TechTheory> is https://vpsdime.com/linux-vps good option it cheaper when it come to ram
[21:47:16] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[21:47:26] *** Joins: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126)
[21:47:26] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[21:47:31] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[21:47:54] <ChrisWarrick> TechTheory: how much linux experience do you have?
[21:48:15] <TechTheory> a little bit but I know how to work it
[21:48:36] <ChrisWarrick> TechTheory: how much experience do you have working with the shell?
[21:48:56] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[21:49:23] *** Joins: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it)
[21:50:16] <TechTheory> not that much I know how to install stuff you use sudo install then what evrever the package is correct
[21:50:54] *** Joins: arinov (~arinov@178.240.175.124)
[21:51:10] <ChrisWarrick> TechTheory: I’d recommend not buying a VPS right now then
[21:51:49] <TechTheory> ok thank you for your help I will not do an vps right now
[21:52:07] <ChrisWarrick> TechTheory: if you want to learn linux, it will be cheaper and easier to install a linux distro in a VPS and play with it
[21:52:10] <SnoopJ> you can probably do most of what you want on the computer you're using right now
[21:52:51] <SnoopJ> after all, a VPS is just someone else's computer for rent :)
[21:53:22] <deniska> a snippet of someone else's computer
[21:53:44] <TechTheory> Ok I have 12 gig of ram should I upgrade to 28 gig of ram and keep the 8gig of ram and then put in 16 with the 8
[21:53:44] <deniska> or as some cheeky lads called it, "droplet"
[21:53:58] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[21:54:02] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Ping timeout: 240 seconds)
[21:54:13] <SnoopJ> 12 GB of RAM is plenty
[21:54:26] <SnoopJ> (even for machine learning)
[21:54:49] <TechTheory> Ok thank you snoop your very helpful I just stick with the 12
[21:55:21] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:55:46] *** Quits: vladoski (~foo@93-36-221-58.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:55:57] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 256 seconds)
[21:56:17] <TechTheory> how would you send sms message in python without paying an company code it instead
[21:56:39] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:57:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[21:57:49] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[21:58:39] <SnoopJ> If you know the carrier, you may be able to send it as an email. It's usually worth paying for Twilio or another such service, though, SMS is a mess.
[21:58:44] <Payam> if x = 10 and y = 10. Do they then have same id in Python?
[21:58:56] <SnoopJ> Payam, it depends on the implementation
[21:58:58] <deniska> TechTheory: to arbitrary numbers, or handful of your own?
[21:59:11] <Payam> SnoopJ, what do you mean?
[21:59:20] <nedbat> Payam: they might or might not.
[21:59:23] <SnoopJ> Payam, I mean that the answer to your question depends on which implementation of the Python language we are talking about.
[21:59:23] *** Joins: ecdhe (~ecdhe@user/ecdhe)
[21:59:30] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:59:37] *** Joins: sudomann_ (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net)
[21:59:38] <SnoopJ> In CPython the answer is almost always going to be "yes" but even in CPython it's not a guarantee
[21:59:54] <Payam> ohh
[21:59:57] *** Quits: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 240 seconds)
[22:00:03] <TechTheory> whats CPython
[22:00:04] <sudomann_> elasticsearch-7.12.0-py2.py3-none-any.whl <-- a wheel with this name should install on any python2 or python3 system right?
[22:00:08] <Payam> so by imlementation you meant the interperter
[22:00:22] <TechTheory> is it the same as python
[22:00:41] <bjs> TechTheory: CPython is the name of the `python` program you have on your computer, probably
[22:00:42] <deniska> TechTheory: it's "normal" python you typically get when you type `python` in linux or get one from https://www.python.org/
[22:00:42] <SnoopJ> TechTheory, Python is a programming language, CPython is an interpreter for that language (the one you get from python.org)
[22:00:49] <Payam> SnoopJ, so what defines that it is garanteed to not. are there special conditions?
[22:00:50] <SnoopJ> But there are other interpreters
[22:01:05] <SnoopJ> Payam, I don't understand your question
[22:01:17] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 250 seconds)
[22:01:26] <deniska> id(int.from_bytes(b'\x0a', 'little')) is not 10 in cpython
[22:01:54] <Payam> SnoopJ, you said it is not a guarantee. Why wouldn't it be? What is the cause that it is not.
[22:01:59] <bjs> TechTheory: print(sys.implementation.name)  and you'll see the actual name of the program which you are running. It's probably "cpython" (which is the one you can download from https://www.python.org/ )
[22:02:01] <TechTheory> oh I understand what cpython I forgot but that an refreasher
[22:02:05] *** Joins: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126)
[22:03:10] <SnoopJ> Payam, the definition of any language guarantees certain things about *any* implementation of that language. You're guaranteed that `x == y` is True in this case, but you are *not* guaranteed that they will be exactly the same object.
[22:03:49] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[22:04:07] <Payam> so "x is y" is not guarantee but  "x==y"  is?
[22:04:14] <nedbat> Payam: it's not guaranteed because it doesn't matter if `x is y`.
[22:04:25] <Payam> I am so confused
[22:04:36] <nedbat> Payam: for immutable objects (like ints, strings, tuples), it doesn't matter if they are the same object or not.
[22:04:48] <SnoopJ> Payam, for the program: `x = 10; y = 10`, an implementation is free to make separate integer objects to represent the value 10
[22:05:01] <nedbat> Payam: definitely `a = 10; b = 10; assert a==b` is guaranteed
[22:05:01] <Payam> ah.
[22:06:02] *** Quits: Gnuman (~gnuman@user/gnuman) (Remote host closed the connection)
[22:06:09] <ecdhe> I have a ton of varied equipment in a lab that is relatively easily modelled with classes and inhertiance.  It's connected in a way that rarely changes, so I've modelled the equipment and it's interconnections in python.  Now I want to query this graph to find instances of equipment that are connected in certain ways.  "Get my the IP address of an instance of BIG_SOURCE such that BIG_SOURCE.output_port =>
[22:06:12] <ba> Payam: using `is` never makes sense for immutable types, but it *might* make sense for mutable types.
[22:06:15] <Payam> for lists then that are mutable
[22:06:15] <ecdhe> BIG_SINK.input_port".
[22:06:21] *** Quits: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[22:06:28] <Payam> ba, intresting
[22:06:35] <phy1729> ba: None and the booleans disagree
[22:06:43] <ba> Oh sure
[22:06:53] <Payam> why?
[22:06:54] *** Quits: sudomannn (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33) (Remote host closed the connection)
[22:06:57] <Payam> they are immutable as well
[22:07:01] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 245 seconds)
[22:07:06] <ba> They're singleton objects though. So what's the rule exactly?
[22:07:17] <phy1729> And the language spec guarentees that there's just one object with those values
[22:07:18] *** Joins: Gnuman (~gnuman@user/gnuman)
[22:07:22] *** Joins: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[22:07:29] <phy1729> Also NotImplementedError iirc
[22:07:29] <ecdhe> BIG_SOURCE might be a general class, and the Binford2000_Source might inherit it and it's properties.  So a client can then query for a generic BIG_SOURCE, or specifically for BINFORD2000_SOURCE and the query should resolve to the same resource
[22:07:35] *** Joins: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33)
[22:07:54] *** Joins: Warped (~Warped@user/warped)
[22:08:19] <bjs> Payam: `x is y` is really used when you want to ask if x and y really are _the same object_, and not just "contain the same values" or "look the same" but really are the same (e.g. live at the same memory address).  There are a few times you want this,  e.g. when dealing with singleton objects (like None, where you don't want to use ==) and where you're looking for cycles in some structure (e.g. in deepcopy)
[22:08:33] <SnoopJ> I don't know if I agree that `is` doesn't make sense for immutable types. Isn't this exactly what `x is None` is doing?
[22:08:45] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:08:47] <ecdhe> Where I'm running into trouble is that I'd like generic classes ("source, sink") to be polymorphic with the classes that inherit from them ("binford")
[22:08:48] <SnoopJ> (let's suppose I care about the distinction between `x` being False and None)
[22:08:56] <ba> Payam: I guess for `None`, `True`, `False` etc there's a limited set of possible values, and Python specifically says that only one `None` object exists. Whereas for integers, tuples, etc, its up to the implementation whether objects are re-used
[22:09:19] <ba> I seem to recall in early versions of Python, you could actually set `True` and `False` to different values?
[22:09:26] <SnoopJ> you can do that in 2.x yea
[22:09:33] <SnoopJ> it's awful :(
[22:09:35] <Payam> I need to watch a dummy video on it and come back with specific questions.
[22:10:00] *** Quits: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33) (Remote host closed the connection)
[22:10:01] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[22:10:11] <ChrisWarrick> SnoopJ: None is a singleton. Other immutable types (str, int) are not singletons.
[22:10:13] *** Joins: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33)
[22:10:15] <SnoopJ> Payam, if you read the language reference, you'll see some things that integers are required to do. You won't find "there should only be one object for a specific integer" anywhere in there, though, because that's not a requirement.
[22:10:24] <ecdhe> Polymorphism is simple enough.  A "source" will have an "output_port".  And a Binford source will also have an "output_port".  But on the front panel of the Binford equipment, the "output port" is actually labelled "signal out"
[22:10:31] <SnoopJ> ChrisWarrick, so that suggests that maybe "immutable" is not the property of interest
[22:10:44] * SnoopJ would prefer to just say that object identity is important when you care about the identity of the object
[22:10:50] <SnoopJ> (which is rarely)
[22:10:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:11:01] <ba> SnoopJ: except for checking against `None`
[22:11:15] <SnoopJ> ba, or any other singleton!
[22:11:27] <SnoopJ> True, False, Ellipsis come immediately to mind, there are sure to be others
[22:11:43] <ba> How many others do you run into, day-to-day? For me it's `None` or some custom application-specific types.
[22:12:01] <SnoopJ> ba, not many, but that's beside the point
[22:12:17] <bjs> Often default arguments which are some singleton object()
[22:12:24] <bjs> where you don't want to use None
[22:12:24] *** Joins: sudomannn (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33)
[22:12:29] <ba> It never made sense to me that you need to use `is None`. It feels like forcing noobs to memorise a boring implementation detail (always compare `None` by object identity).
[22:12:32] *** Quits: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[22:12:33] <ecdhe> So I want to be able to construct a directed graph where when I instantiate a "binford source" with it's property "signal out" pointing to some sink device, I also want the "BIG_SOURCE" class's "output_port" property to point to the same resource as the subclasses "signal out".  That way the client can speficy their query in terms of the base class and its properties, or in terms of the subclass and it's
[22:12:39] <ecdhe> properties.
[22:12:41] *** Joins: oatmealraisin (~ryan@2603-7000-4000-7c46-0000-0000-0000-16d9.res6.spectrum.com)
[22:12:46] <bjs> ba: you need to use `is None` because you don't want to invoke == on the object
[22:12:47] <SnoopJ> ba, you don't *need* to when you don't need to distinguish from not-None
[22:13:05] *** Joins: agonhajdari (~textual@user/agonhajdari)
[22:13:08] <SnoopJ> `if obj:` is fine if you don't care about the distinction between False and None, but is unacceptable when you do care about that
[22:13:10] <bjs> ba: consider `if maybe_a_numpy_array == None` for example (vs `is None`)
[22:13:11] *** Quits: stealth[]- (~stealth]@2001:9e8:36e1:6300:701c:fb77:fe98:95f6) (Quit: Leaving)
[22:13:22] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[22:13:31] *** Joins: luigibu1 (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[22:13:32] <bjs> they mean different things (and infact, the former will just raise an exception if the object wasn't actually None)
[22:14:03] <ecdhe> I could just have a dictionary for "ports" with the port name as a key.  The super class would define a few ports like "input", "output", "control link".
[22:14:03] <pycode1> bjs, hi!! :)
[22:14:08] <bjs> pycode1: hi
[22:14:17] <SnoopJ> ba, to be clear, I think `is` could be removed from the language entirely with no real loss, I'm not a fan of it :)
[22:14:33] <ba> bjs: does your example evaluate true if the numpy array is zero-length?
[22:14:48] <pycode1> bjs, 3 days...and the solution was pd.DataFrame(index=pd.DateTimeindex([]))
[22:14:56] <bjs> ba: no it crashes
[22:14:57] <pycode1> so basically the index was different
[22:14:57] *** Quits: sudomann (~sudomann@2601:155:8402:4960:f4b6:2f5c:9895:3a33) (Ping timeout: 240 seconds)
[22:14:59] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[22:14:59] <ecdhe> But when the subclass inherets from the superclass, if it initialized the ports as they are named in the super class, these port names do not match the labels on the equipment front panel that the subclass is supposed to model...
[22:15:10] <pycode1> setting the datetimeindex aas default fixed the problem with memory
[22:15:12] <ba> SnoopJ: +1 if you can find a way to make it work! :)
[22:15:16] <pycode1> now everything works good
[22:15:22] <SnoopJ> ba, it definitely won't happen, but oh well
[22:15:34] <SnoopJ> at least there are SyntaxWarnings about it now
[22:16:23] *** Joins: Grinchios (~Grinchios@2a00:23c8:240c:f801:655d:aa66:655d:49e4)
[22:16:59] <ecdhe> If I add additional dictionary entries for the subclass, then queries of the superclass will have access to these port names as well, so there's no way to detect if a query is mixing up generic equipment with vendor-specific port labels, since the vendor specific labels exist in the same dictionary as the generic labels.
[22:17:02] <bjs> ba: oh wait no I just checked, apparently zero-length numpy arrays don't give the error it just returns False (?)
[22:17:14] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[22:17:21] <ba> bjs: how fun!
[22:17:24] <bjs> numpy arrays len > 2 definitely give an error if you try bool them
[22:17:42] <bjs> But the point still stands, `if maybe_a_numpy_array == None` would be a bug
[22:17:48] *** Quits: menace (~someone@user/menace) (Read error: Connection reset by peer)
[22:17:56] <SnoopJ> bjs, False for the identity check?
[22:18:00] <ba> Yep, understood. Thanks for the example
[22:18:16] <bjs> SnoopJ: I mean bool(np.array([])) is False
[22:18:34] <ecdhe> I may need to model the ports themselves as classes.
[22:18:41] <SnoopJ> bjs, oh. that'll be come an error Eventually™
[22:18:43] *** Joins: cemotyz09 (~cemotyz09@2603-8081-6300-9e12-cc5c-2697-f309-99e5.res6.spectrum.com)
[22:18:56] <bjs> SnoopJ: ah
[22:19:15] <SnoopJ> it should issue a DeprecationWarning the first time
[22:19:28] <SnoopJ> uh, on newer numpys. I dunno when this decision was made, but I think it was a while ago
[22:21:57] *** Quits: bytehackr (~Sandipan@43.252.250.96) (Ping timeout: 240 seconds)
[22:22:37] *** Quits: hifi (hifi@heisenbridge/hifi) (Remote host closed the connection)
[22:23:03] *** Joins: hifi (hifi@heisenbridge/hifi)
[22:24:40] *** Quits: raxor2k (~raxor2k@78.158.236.72) (Remote host closed the connection)
[22:26:13] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[22:28:26] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:28:32] <jinsun> looks like >4 years ago https://github.com/numpy/numpy/pull/9718
[22:29:19] <SnoopJ> I have no idea exactly *when* it will become an error, but yea, it's there to remind you that there's a serious ambiguity
[22:29:32] *** Quits: moha (uid506645@id-506645.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:30:02] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Quit: ZNC - https://znc.in)
[22:30:02] *** Quits: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 240 seconds)
[22:31:45] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[22:32:03] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:fb09:686f:8fff:8480) (Ping timeout: 250 seconds)
[22:32:14] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[22:33:12] <mefistofeles> now I wonder if I should be testing for emptyness in lists or similar with len() instead...
[22:33:35] *** Joins: ArtfulDodger (~ArtfulDod@183.185.116.78.rev.sfr.net)
[22:34:06] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[22:34:09] *** Joins: CombatVet_ (~c4@user/combatvet)
[22:34:53] *** CombatVet_ is now known as CombatVet
[22:35:06] <SnoopJ> mefistofeles, it's fine to trust bool() over containers that define it, ndarray is just a special case where you probably should *not* do this
[22:36:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b1d4-3f07-bb3f-aa7e.res6.spectrum.com)
[22:36:32] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 240 seconds)
[22:37:33] <jinsun> numpy has ambiguity because of the elementwise operations I think, you can
[22:37:37] <jinsun> tcan
[22:37:42] <jinsun> oops
[22:38:00] <mefistofeles> yeah
[22:38:01] <SnoopJ> yea, the ambiguity is for e.g. np.array([False])
[22:38:10] <mefistofeles> but still, if we have len(), why not using it?
[22:38:21] <mefistofeles> if the test is for emptyness
[22:38:39] <SnoopJ> mefistofeles, that's what the deprecated bool() behavior is doing in numpy, it's just got a high confusion factor
[22:38:47] <SnoopJ> because of broadcasting
[22:38:51] *** Joins: lethu (~lethu@user/lethu)
[22:38:53] <mefistofeles> I know!
[22:39:06] <mefistofeles> I'm not talking about numpy
[22:39:12] <mefistofeles> but python objects
[22:39:26] <jinsun> with arrays you can do `if arr == value:` and `arr==value` gives another probbaly not empty array, and you probably wanted any or all
[22:39:37] <SnoopJ> mefistofeles, in general, __bool__ falls back on __len__ if it's there, so there's not really a need to care unless you know the object has both and bool() doesn't do what len() does
[22:39:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[22:39:50] *** Joins: Thanatos (~Thanatos@197.210.45.218)
[22:40:12] <mefistofeles> so now we are supposed to know these things... why not using len? :P
[22:40:25] <jinsun> with the stdlib objects the convention is to have empty == falsy, and there is no elementwise operation to make things sconfusing
[22:40:43] <mefistofeles> yeah, I agree, it's a convention
[22:42:12] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:42:27] *** Quits: withered_wolf (~withered_@97.112.15.92) (Remote host closed the connection)
[22:43:11] *** Joins: jamea (~jamea@189.237.49.43)
[22:43:27] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[22:44:57] <SnoopJ> mefistofeles, use len() if you want to be explicit about it
[22:45:05] <SnoopJ> use bool() when you just want the object turned into a bool
[22:45:06] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:24] *** Quits: vanessa (~farawayas@103.160.128.7) (Remote host closed the connection)
[22:46:02] <SnoopJ> well-behaved container types generally follow Python's lead on what's truthy
[22:46:37] <jinsun> actually len() can also bite with elementwise operations, though not really confusing like bool() but the wrong thing can "work" and it is hard to notice
[22:46:54] <SnoopJ> with ndarray you probably just want the stuff the interface defines, yea
[22:47:22] <jinsun> I had a bug at work where the code was something like `if len(arr == 1): ...`, when it should have been `if len(arr) == 1:  ...` somethinng like that
[22:47:23] <SnoopJ> which is why bool() will become an error: you should be using .size, .any(), .all(), etc. to ask for what you want since there isn't one obviously correct thing to do
[22:47:24] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:41] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:a020:bda8:8af6:5e63)
[22:48:42] *** Quits: s0k1t_ (~s0k1t@206.217.205.17) (Quit: dueces douches)
[22:48:54] *** Joins: parv (~quass@user/parv)
[22:51:04] *** Quits: onichomp (~onichomp@177.231.43.15) (Quit: onichomp)
[22:51:21] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Quit: ZNC - https://znc.in)
[22:52:30] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[22:52:30] *** Quits: tdsmith (~tdsmith@kvm.kumokasumi.org) (Read error: Connection reset by peer)
[22:53:21] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:55:03] *** Joins: tdsmith (~tdsmith@kvm.kumokasumi.org)
[22:55:57] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 240 seconds)
[22:56:24] *** Joins: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se)
[22:56:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:57:36] <whatsupdoc> In python, how do you use argparse to check if an argument was given?
[22:57:50] <whatsupdoc> args = parser.parse_args()
[22:58:09] <whatsupdoc> I am using, if args.my_arg, but what if the argument was set to 0?
[22:58:37] <whatsupdoc> oh wait they're strings, nvm
[23:01:44] *** Joins: tomitek (~tomitek@host-80-238-118-45.jmdi.pl)
[23:02:28] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 268 seconds)
[23:03:25] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:a020:bda8:8af6:5e63) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:04:04] <jinsun> they can be integers if you specify type when adding the argument to the parser
[23:05:01] *** Quits: lucasb (uid333435@id-333435.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:05:03] <SnoopJ> whatsupdoc, I usually default to None to indicate a value was not specified
[23:05:13] <jinsun> you can set default to None and do if args.my_arg is None to not accidentally check Falsy values
[23:05:25] *** Joins: jinie (~jimmy@188.114.173.37)
[23:05:39] <whatsupdoc> oh ok, thanks
[23:05:44] *** Joins: buzzard (~quassel@172.93.207.125)
[23:07:16] *** Quits: jinie (~jimmy@188.114.173.37) (Client Quit)
[23:08:17] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Ping timeout: 240 seconds)
[23:08:35] *** Quits: tomitek (~tomitek@host-80-238-118-45.jmdi.pl) (Quit: Leaving)
[23:09:34] *** Quits: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se) (Remote host closed the connection)
[23:09:37] *** Quits: sudomann_ (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net) (Ping timeout: 240 seconds)
[23:09:53] *** Joins: sudomann (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net)
[23:10:16] *** Joins: tomitek (~tomitek@host-80-238-118-45.jmdi.pl)
[23:10:37] *** Joins: semeion (~semeion@user/semeion)
[23:15:19] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:15:20] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.4)
[23:15:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: humbertowoody (~humbertow@189.236.11.28) (Quit: WeeChat 3.4)
[23:17:13] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[23:17:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:17:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:17:53] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[23:18:09] *** Joins: somlis (~somlis@user/somlis)
[23:18:23] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[23:18:46] *** Joins: fikran (~fikran@user/fikran)
[23:18:47] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[23:18:56] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Client Quit)
[23:22:01] *** Joins: italo (~italo@2804:29b8:50c2:27da:e9d:92ff:fe87:c787)
[23:25:57] *** Quits: davor (~davor@user/davor) (Ping timeout: 240 seconds)
[23:26:55] *** Joins: davor (~davor@user/davor)
[23:27:32] *** Quits: Grinchios (~Grinchios@2a00:23c8:240c:f801:655d:aa66:655d:49e4) (Ping timeout: 240 seconds)
[23:27:33] *** Joins: sazawal (~sazawal@122.161.85.84)
[23:29:07] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[23:29:34] *** Joins: magla (~gelignite@55d4b9f8.access.ecotel.net)
[23:30:17] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Remote host closed the connection)
[23:30:27] *** Quits: raek (~raek@37.250.253.86.bredband.tre.se) (Ping timeout: 256 seconds)
[23:32:19] *** Joins: raek (~raek@2.69.195.49.mobile.tre.se)
[23:32:50] *** Joins: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de)
[23:34:18] *** Joins: binary011 (~binary01@cpe-74-71-15-170.nyc.res.rr.com)
[23:34:47] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:c04c:7bb2:effd:1b5)
[23:35:02] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:cccf:1d7:a0ee:b34d) (Ping timeout: 240 seconds)
[23:35:31] *** Joins: blcyber (~blcyber@216.74.235.178)
[23:35:51] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[23:36:08] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:82f:3ee7:8f7a:8393)
[23:37:01] *** Quits: binary01 (~binary01@cpe-74-71-15-170.nyc.res.rr.com) (Ping timeout: 268 seconds)
[23:37:17] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Ping timeout: 240 seconds)
[23:37:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[23:37:37] *** Joins: hackers (~self@user/hackers)
[23:37:45] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[23:38:02] *** hackers is now known as remote
[23:38:25] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[23:38:31] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[23:38:31] *** Joins: menace (~someone@user/menace)
[23:38:35] *** menace is now known as Deknos
[23:38:51] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[23:41:48] *** Joins: zeden (~zeden@user/zeden)
[23:43:18] <whatsupdoc> How do I specify that an argument has exactly two items after it? I try using nargs='2', but I keep getting "ValueError: invalid nargs value"
[23:44:39] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[23:45:01] *** Quits: sudomann (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net) (Ping timeout: 268 seconds)
[23:45:42] <Repiphany> 2, not a string
[23:46:22] <Repiphany> whatsupdoc:
[23:46:27] *** Quits: Maikel (~Maikel@130.61.63.136) (Remote host closed the connection)
[23:46:41] <whatsupdoc> oh lol, thanks
[23:49:16] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:49:36] *** Joins: sudomann (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net)
[23:50:03] *** Joins: idontneedanick (~idontneed@h-158-174-186-127.NA.cust.bahnhof.se)
[23:50:58] *** Quits: tomitek (~tomitek@host-80-238-118-45.jmdi.pl) (Quit: Leaving)
[23:51:33] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[23:51:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:52:21] *** Joins: jamea22 (~jamea@189.237.49.43)
[23:52:57] *** Quits: blcyber (~blcyber@216.74.235.178) (Ping timeout: 240 seconds)
[23:53:00] *** Joins: blcyber_ (~blcyber@216.74.235.178)
[23:53:15] *** Quits: jamea (~jamea@189.237.49.43) (Ping timeout: 256 seconds)
[23:53:49] *** Quits: sudomann (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net) (Ping timeout: 256 seconds)
[23:54:56] *** Joins: ewwegweg (~ewwegweg@user/ewwegweg)
[23:55:23] *** Quits: Guest31 (~Guest31@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[23:55:38] *** Joins: Maikel (~Maikel@130.61.63.136)
[23:56:39] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Ping timeout: 256 seconds)
[23:56:43] *** Joins: jarthur__ (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[23:58:40] *** Joins: sudomann (~sudomann@c-24-126-8-18.hsd1.wv.comcast.net)
