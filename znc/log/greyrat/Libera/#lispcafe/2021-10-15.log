[00:21:07] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:21:25] *** Joins: hayley (~theemacss@user/hayley)
[00:21:27] <dave0> maw
[00:23:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[00:28:56] <hayley> mfiano: Well, that went better than expected.
[00:29:08] <dave0> maw hayley 
[00:34:42] <semz> why do people think an FFI belongs into a language standard?
[00:34:59] <semz> of all the places to put it this isn't the one
[00:35:17] <hayley> I don't know. But wouldn't it basically mean that the standard has to include the standard of another language?
[00:35:32] <Gnuxie> lel
[00:35:38] <semz> probably, if the FFI is going to be useful in any way
[00:35:55] <semz> useful for the complainer that is, since clearly a commonly supported library is not enough
[00:37:53] <semz> same person then later praises Python, which isn't even standardized at all
[00:37:54] <semz> ffs
[00:41:55] <hayley> "I wish I knew how to do that with CommonLisp, as far as I know it's not possible. Using Emacs and running code from files is not the same, it's not more interactive than my Go development cycle."
[00:42:01] <hayley> "I've tried nothing and I'm all out of ideas!"
[00:45:23] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c8a4:f52d:5948:d394)
[00:46:59] <gilberth> This whole interrupt stuff is suspicious, it doesn't work like any hardware I have ever seen. Real hardware doesn't lose interrupts.
[00:49:13] <hayley> How much do they even use the C FFI in e.g. Haskell, Go, Rust? Doesn't seem like a common occurrence to me.
[00:49:30] <hayley> The only FFI library I use is cl+ssl, and it's pretty nasty.
[00:49:51] <gilberth> You don't use McCLIM with Cairo?
[00:49:58] <hayley> No?
[00:50:08] <gilberth> No FreeType either?
[00:50:21] <gilberth> Plain X11R5?
[00:50:31] <hayley> Yes.
[00:50:36] <semz> all the time if the benchmark game is anything to go by :-)
[00:50:58] <gilberth> hayley: With bitmap fonts? Really?
[00:51:18] <selwyn> return to metafont
[00:51:45] <hayley> gilberth: Isn't there a vector renderer in McCLIM?
[00:51:51] <gilberth> selwyn: metafont rasters very poorly at low resolutions.
[00:52:17] <gilberth> hayley: In pure CL?
[00:52:29] <hayley> I think so, yes.
[00:53:28] <selwyn> remember seeing metafont mentioned in tex output today
[00:53:42] <hayley> The audacity of this mf
[00:54:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:56:14] <selwyn> remember seeing metafont mentioned in tex output today
[00:56:21] <selwyn> sorry
[00:56:30] <selwyn> i like ffi programming in cl
[00:57:01] <selwyn> it's nice to expose some powerful c library to common lisp
[00:57:25] <hayley> Sure. I'm not saying no one uses FFI.
[00:58:21] <gilberth> Well, for [native] GUIs there is no way around FFI.
[01:00:05] <hayley> https://www.youtube.com/watch?v=2mJZzU6-coo "50 Glitches and Facts about Half-Life 2 you have a low chance of having prior knowledge of"
[01:01:08] <dave0> sounds like PR speak to make me not feel dumb
[01:02:34] <GreaseMonkey> if you want to learn about HL2 glitches, you watch a speedrunning tutorial
[01:03:21] <GreaseMonkey> there's also HL2 DWaHMoV, which is a segmented run which is old enough that the single-segment world record is actually faster due to skipping quite a bit of waiting
[01:04:23] <selwyn> hm
[01:04:45] <GreaseMonkey> off the top of my head: you can clip through the train at the start, you can do the *entire* hovercraft section on-foot (well, in-air), two cutscenes where you meet up with Alyx get overlapped, you completely skip the gravity gun tutorial (and the gravity gun full stop)
[01:04:57] <selwyn> wondering if it would be easier to port ggplot2 to common lisp, or have something else as a backend
[01:06:10] <GreaseMonkey> but of course, DWaHMoV had matmo responsible for doing the waiting sections of the run, which tends to involve staring at butts
[01:06:49] <dave0> i watched a speedrun on super mario bros
[01:09:27] <GreaseMonkey> ah yes, super "if the bottom of the player is aligned with the grid then it can always go sideways" bros
[01:09:48] <selwyn> would we model ourselves on the trilobite?
[01:25:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:25:35] <kakuhen> quick question on lisp
[01:25:41] <kakuhen> so I made my own reader macro, but it uses the symbols [ and ]
[01:25:59] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:26:08] <kakuhen> is there a better choice of symbol? because i am certain that this may clash with reader macros introduced by other people's code
[01:26:14] <kakuhen> or am i worrying too much about a rare issue
[01:26:35] <kakuhen> I am wondering if there is a way to make a reader macro applicable only if you are in a certain package
[01:28:32] <semz> I think named-readtables can do that
[01:29:03] <semz> maybe only on the source file level rather than the package level
[01:33:01] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[01:33:06] <kakuhen> ideally I'd want package level 
[01:33:14] <kakuhen> I am writing a mahjong utility in common lisp
[01:33:26] <kakuhen> The way I represent tiles is by maintaining a list of lists conforming to specific patterns
[01:33:38] <kakuhen> so e.g. ((2 pin) (red 5 pin) ...) would constitute a hand
[01:33:50] <kakuhen> the usual notation used for computers, however, is a bit different, and it's easier to write for the user
[01:34:03] <kakuhen> e.g. tenhou would use 20p... for my above case
[01:34:11] <kakuhen> so I have a reader macro that converts from "tenhou notation" to my notation
[01:34:25] <kakuhen> [405m1s2p] ;=> ((4 man) (red 5 man) (5 man) (1 sou) (2 pin))
[01:34:44] <kakuhen> but I only need this reader macro to be available inside the package I made
[01:34:54] <kakuhen> it's useless everywhere else
[01:37:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[01:38:05] <GreaseMonkey> i'd love for there to be a way to scope reader macros inside of an s-expression, of course this would result in one having to partially reimplement #\( but that could actually be quite useful
[01:39:29] <GreaseMonkey> or maybe it would be better to have something like #w:optional-package:with-reader-dispatch-somethingrather(some-s-expr <some-custom-syntax>)
[01:40:10] <kakuhen> oh also i may make this a website just for fun
[01:40:16] <kakuhen> that way i can finally see what hutchentoot is all about
[01:40:29] <GreaseMonkey> hunchentoot is quite nice to play with
[01:40:43] <kakuhen> right now I am thinking of an "efficient" way to calculate frequency
[01:40:53] <kakuhen> im not really a programmer, so the most efficient method i can think of is uh
[01:41:11] <kakuhen> check if a key exists in an alist, if it doesnt, add it and start with 1
[01:41:24] <kakuhen> then every occurrence of a specific tile simply increments the value of its associated key
[01:41:49] <kakuhen> clozure cl has ccl:assq and does exactly what I want, but  I dont know how fast it is
[01:42:06] <GreaseMonkey> depends on the size of the list
[01:42:08] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:42:15] <hayley> https://www.youtube.com/watch?v=QnTWw-AzCzA
[01:42:17] <kakuhen> well the alist in theory is bounded above by 14
[01:42:22] <kakuhen> at least for my application
[01:42:45] <kakuhen> if i decided to support taiwan variant of mahjong then the bound is 16.
[01:43:13] <GreaseMonkey> should be fine, although admittedly i'm the sort who'd be tempted to use a hash table
[01:43:25] <hayley> Seems so far that, indeed, there is only ever one negative set in DERIVATIVE-CLASSES.
[01:43:25] <GreaseMonkey> even though it's quite likely that the alist would be faster
[01:43:35] <kakuhen> yeah im looking at the source of ccl:assq and it seems like it's O(n)-ish
[01:43:43] <kakuhen> goes through the entire list and then does stuff
[01:43:45] *** Joins: aeth (~aeth@user/aeth)
[01:43:48] <GreaseMonkey> as they say, everything is fast for small n
[01:44:06] <kakuhen> yeah I guess w
[01:44:15] <kakuhen> the issue is I want to create an O(n) algorithm
[01:44:19] <GreaseMonkey> but if you really want to go completely ham on it, a suitably-typed vector may be your fastest option
[01:44:20] <kakuhen> or at the very worst O(n*log(n))
[01:44:40] <kakuhen> and my brain just thinks "sacrifice memory and keep a hash table around"
[01:45:05] <hayley> When in doubt, hash table
[01:45:55] <mfiano> hayley: Yeah
[01:46:44] <mfiano> Could have been worse if you were more direct. I think a lot of the meaning was lost in your artsy methaphor speak :)
[01:46:47] <GreaseMonkey> also with that said the mantra for optimisation is: make it work, make it good, make it fast
[01:46:53] <hayley> I mean, the space overhead isn't that bad (Swiss tables do 7/8 load fine, though nothing implements Swiss tables except SICL :) and I suspect mahjong tables(?) aren't that big, either.
[01:47:02] <hayley> s/tables/boards
[01:47:08] <GreaseMonkey> once you have it working, and you have it working nicely, you can start to have a lot of fun with it ;)
[01:47:35] <GreaseMonkey> and the "make it work" seems to be in favour of hash tables probably
[01:47:44] <kakuhen> well, in japanese mahjong you have about 136 tiles overall
[01:47:54] <kakuhen> but the stuff im working on works "locally," so to speak
[01:48:01] <kakuhen> i.e. we're only concerned with hands
[01:48:06] <kakuhen> so 14 tiles
[01:48:25] <kakuhen> and it just so happens that the worst case scenario for the hash table thing is maintaining 14 keys.
[01:48:37] <hayley> Cooleo, MS Teams has decided to stop working, and I have a class in an hour.
[01:48:44] <GreaseMonkey> (symbol-macrolet ((h0 (gethash k0 hand))) (setf h0 (1+ (or h0 0))))
[01:48:47] <hayley> Oh, now it works.
[01:48:54] <GreaseMonkey> i have a habit of using symbol-macrolet for this stuff
[01:50:21] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c8a4:f52d:5948:d394) (Remote host closed the connection)
[01:52:40] <selwyn> `hm
[01:53:06] <selwyn> i suppose readtables are meant to be orthogonal to packages?
[01:53:30] <pjb> yes, totally unrelated.
[01:53:42] <pjb> This is why load binds both *package* and *readtable*. 
[01:53:49] <selwyn> yes
[01:53:50] <kakuhen> I guess what I want then is a compiler macro (?) not a reader macro
[01:54:21] <selwyn> uh
[01:54:37] <kakuhen> well the idea is that I have these functions that expect *my* notation
[01:54:42] <kakuhen> but the user is free to use the tenhou notation
[01:54:53] <kakuhen> that's why I originally thought "convert notations at read tiome"
[01:54:54] <kakuhen> time*
[01:55:09] <selwyn> compiler macros can't replace reader macros
[01:55:32] <pjb> what is tenhou notation?
[01:55:38] <kakuhen> so e.g. (dolist (tile [123m]) (princ tile)) ;=> (1 MAN)(2 MAN)(3 MAN)
[01:55:51] <kakuhen> so maybe instead I can make a different macro but same functionality
[01:56:06] <kakuhen> i.e. not a reader macro, but still a macro
[01:56:12] <kakuhen> (dolist (tile (foo 123m)) (princ tile))
[01:56:49] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:56:50] <kakuhen> pjb: to represent a mahjong hand, tenhou.net uses sequences of pairs of characters
[01:56:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[01:57:04] <kakuhen> i.e. we have [0-9][m,s,p,z]
[01:57:11] <kakuhen> first character denotes number and the second one the suit
[01:57:20] <selwyn> a reader macro is what you want for this because it is custom syntax
[01:57:22] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:57:24] <mfiano> You might want to ask phoe. He is big into that
[01:57:25] <pjb> kakuhen: then you want a reader macro.
[01:57:39] <selwyn> oh yeah phoe organised a mahjong tournament recently
[01:57:43] <pjb> use a prefix character. eg. !0m !3s etc…
[01:57:43] <kakuhen> ok; i'll keep the reader macro
[01:58:20] <selwyn> as for readtables, you simply have to accept that you are making a readtable that is not useful to others
[01:58:23] <selwyn> and that's fine
[01:59:20] <selwyn> not using named-readtables, or polluting the initial readtable, is probably antisocial
[01:59:24] <mfiano> kakuhen: https://github.com/phoe/riichi-evaluator
[02:00:06] <pjb> kakuhen: you can use named-readtables, then:  (in-package "FOO") (named-readtables:in-readtable tenhou)
[02:00:43] <kakuhen> mfiano: damn, someone beat me to it it seems :)
[02:00:50] <kakuhen> oh well, I'm still learning by doing it myself.
[02:00:50] <pjb> kakuhen: or you can just define your own macro to add your tenhou reader macro: (enable-tenhoo-reader-macro).
[02:01:40] <kakuhen> pjb: thanks for the suggestion
[02:01:44] <kakuhen> I think someone else also mentioned named readtables
[02:01:50] <kakuhen> I will have to read about them
[02:02:50] *** Joins: selwyn_ (~selwyn@user/selwyn)
[02:02:55] <pjb> kakuhen: if you only have a few reader macro, I think a specific macro such as (enable-tenhoo-reader-macro) can be better since you may thus enable different reader macros.  readtables are whole collections of reader macros…
[02:04:03] <pjb> kakuhen: https://termbin.com/61wh
[02:06:08] <kakuhen> oh this looks pretty useful
[02:06:36] <kakuhen> because this notation is only optional and for the user's convenience
[02:06:50] <kakuhen> so I can simply instruct the user to call this macro if they want to make use of the notation, otherwise don't call it
[02:08:30] <mfiano> hayley: I think most of the criticism is they just don't understand your writing style.
[02:08:56] * mfiano is all caught up now
[02:17:34] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[02:17:50] <gilberth> I still don't get why mouse clicks are lost at times.
[02:19:52] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[02:23:46] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:24:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[02:29:50] * hayley compiled a DFA to gilberth-code.
[02:29:59] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[02:30:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:30:38] <hayley> (ab)* has two states, three transitions and one exit map. 30 words, or 240 bytes. The code emitted by SBCL is 525 bytes. So, while pointless for us, it's also smaller.
[02:32:20] <hayley> mfiano: Still, I think it's for the better. Sorry.
[02:34:23] <mfiano> Seems to be getting a ton of boosts on mastodon
[02:42:13] <hayley> From experience, there's a 50-50 chance they read it. Though that experience was from a 60-page booklet, and not a snarky org document.
[02:45:02] <mfiano> heh
[02:45:27] <hayley> And by 50-50, I mean 90 against-10 in favour.
[02:47:32] <selwyn> link to the article?
[02:47:43] <hayley> https://gist.github.com/no-defun-allowed/4f0a06e17b3ce74c6aeac514281f350f
[02:48:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[02:51:51] <hayley> gilberth: Still, I like the DFA "tables" idea. The only dispatch is on deciding to transition to another state, win, or lose.
[02:54:39] <gilberth> hayley: Have you ever consider the following idea for greping? Have a single register at first, which records the start of the match and run that, when there is a match, run again from that start with all registers assigned?
[02:56:54] <hayley> Don't think so, but what would I win from it?
[02:57:14] <gilberth> I never got why people would indent C code by 8 columns. Isn't that excessive?
[02:57:34] <hayley> Hm, I guess it cuts down on the register count to not grep[], right.
[02:57:40] <gilberth> hayley: Less work when scanning all the garbage you ignore.
[02:58:24] <hayley> But having the registers around at runtime doesn't seem to hurt performance at all. It was ±2% or so on the "email" test.
[02:58:35] <gilberth> My application is very different. (1) I need to scan everything and (2) I need to tell which RE matched.
[02:59:37] <hayley> OTOH it's interesting as it would make the compiler faster, to not duplicate registers so damn much. But then it scans the RE twice, which might or not win. shrug
[03:00:06] <gilberth> hayley: Try something more complex with say submatches for the day, month, year, hour, minute, seconds, timezone part of a RE for a date. Feed some random real log with dates for a "real" live bench.
[03:00:26] <hayley> Sure.
[03:00:45] * hayley looks through /var/log
[03:00:49] <gilberth> hayley: You grep, right? You ignore most of the input, anyway, I suppose.
[03:00:55] <hayley> Yeah.
[03:01:12] <hayley>  /var/lib/pacman is pretty spicy. Lots of timestamps.
[03:01:37] <gilberth> You want a lot of false starts, too.
[03:01:58] <semz> gilberth: I do it because it's the standard tab width and because C functions that look bad with an 8col tab usually need a refactoring anyway.
[03:02:03] <hayley> There's version numbers, but most don't look like dates.
[03:02:05] <gilberth> Sth were Perl would backtrack.
[03:02:37] <semz> Doesn't work as well in, say, Javascript with its heavy nesting.
[03:02:41] <hayley> Though I really want isum and CHAR<= in my code for numeric ranges.
[03:02:54] <gilberth> Well, when you see "version 27", the 27 could still be the start of a timestamp, doesn't it?
[03:03:27] <hayley> Yes, there are some such versions, and even some versions like 20150314.blah
[03:03:32] <gilberth> hayley: So you borrow my ISUM data type?
[03:03:33] *** Joins: notzmv (~zmv@user/notzmv)
[03:03:52] <hayley> Eventually. Though I need to hash cons, but it is also not difficult.
[03:03:54] <gilberth> hayley: Then you have a nice benchmark!
[03:04:33] <hayley> Here we go, we are learning SSL and password brute forcing in class.
[03:05:24] <gilberth> Brute force? Dictionary attacks?
[03:06:26] <hayley> Dunno yet.
[03:08:31] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:08:32] <mfiano> Time to read this MOP to see how it compares to CL
[03:10:05] <hayley> Given that you use lists, I could be cheap and just use EQUAL to hash cons. Though I'd need to fiddle around as I use character objects in sets, rather than codes.
[03:11:21] <gilberth> hayley: You might be in trouble then, as the upper bound of an interval is exclusive.
[03:12:13] <hayley> Well, no problem still. I have a MEMBER-TEST-CODE function or smth which could generate (and (char<= #\a x) (char< x #\c)) for [a, c)
[03:13:03] <gilberth> You'd to modify isum-range then to make char-code-limit into NIL, as the ISUM (<k>) == any x >= k
[03:13:12] <gilberth> * need
[03:13:54] <gilberth> Which would make ISUM less general. I used that for all kind of things, not just code points. McCLIM has the 2d version of this.
[03:14:15] <gilberth> For rectangle sets.
[03:14:23] * hayley watches lecture
[03:14:50] <hayley> "<openssl> WARNING: deprecated key derivation used." "This is fine, don't worry about this message."
[03:17:23] <mfiano> lol https://missouriindependent.com/2021/10/14/missouri-governor-vows-criminal-prosecution-of-reporter-who-found-flaw-in-state-website/
[03:17:49] <gilberth> This happens all the time.
[03:18:04] <mfiano> You didn't read it
[03:18:46] <hayley> "Putting Social Security numbers within HTML, even if it’s ‘non-display rendering’ HTML, is a stupid thing for the Missouri website to do and is a type of boneheaded mistake that has been around since day one of the Internet. No exploit, hacking or vulnerability is involved here"
[03:18:47] <hayley> BWAHAHAHAHA
[03:18:54] <mfiano> A news reporter noted that teacher social security numbers were listed in the HTML. They are trying to prosecute them for noticing it, citing "decoding of the HTML"
[03:19:08] <gilberth> mfiano: I read the title.
[03:20:06] <gilberth> mfiano: As I said, spot a security flaw in a state operated website and you will be prosecuted. Happens all the time.
[03:20:10] <hayley> Would it hurt to make isum inclusive on either end?
[03:20:31] <GreaseMonkey> reminds me of that guy who did that one particular erlang book who ranted about how some local-government department had a flaw which made it easy to scrape through and steal a bunch of private information on a website, and a year later noticed it was still there so he straight up named them and said you should never let them design your website
[03:21:44] <GreaseMonkey> or was it someone else
[03:22:45] <gilberth> hayley: Yes. You complement an isum, which is closed on the left end by pushing NIL. The ISUM-OP would get way more complicated, when you would choose inclusive upper end points. The lower end point is inclusive. Have you read how that works?
[03:23:39] <hayley> Right then.
[03:23:44] <GreaseMonkey> bleh it may have been someone else, or maybe this guy merely linked to it
[03:23:46] <gilberth> You could fix that by a special ISUM-RANGE, and note that I need char-code-limit + 1 elements, as I need a symbol for EOF, too.
[03:24:17] <GreaseMonkey> nope, found the article: https://ferd.ca/surely-they-d-fix-it.html
[03:24:22] <GreaseMonkey> or blog post, whatever
[03:24:35] <gilberth> I detect EOF by a sentinel in the buffer, which is cheaper than (= P END) at each state.
[03:25:16] <gilberth> I mean, I dispatch anyway, so I dispatch on that EOF sentinel too. When I see it, I test for a real or false EOF.
[03:33:23] <hayley> Ooh, the lecturer pulled out hashcat now. That was fun when I was 15.
[03:34:47] <kakuhen> hmm I see to have trouble with hash tables
[03:34:56] <kakuhen> apparently keys can be any lisp object
[03:35:01] <kakuhen> but the hash table is making unique keys for the same list
[03:35:08] <hayley> :test #'equal
[03:35:09] <kakuhen> is there a way to loosen the equality
[03:35:12] <kakuhen> oh
[03:39:43] <hayley> https://twitter.com/e_rikipedia/status/1448783257978355712
[03:39:59] <hayley> I'll lower that to $30 million, and ass-to-ass.
[03:40:45] <hayley> https://youtu.be/hlKZ3opmIWM?t=144
[03:44:15] * hayley reads cat passwords.txt | grep password
[03:44:26] <hayley> 10/10 good UUOC
[03:44:48] <gilberth> grep for 123456
[03:45:22] <hayley> I think I can guess that it's in there.
[03:45:26] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:45:56] <hayley> "This is just a rainbow table" No it's not, a rainbow table has hashes in it.
[03:47:59] <kakuhen> I found a bug in plaster
[03:48:19] <gilberth> hayley: Here is a list: http://clim.rocks/gilbert/bad-password.lisp
[03:48:20] <kakuhen> Enter a blank captcha then enter the captcha it provides. Then you get an incorrect captcha error.
[03:48:22] <selwyn> rigetti is going public
[03:48:30] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[03:49:00] <selwyn> we now have a billion dollar valued company that actively develops in lisp
[03:49:40] * hayley values Applied Language at $69 trillion
[03:49:58] <kakuhen> wait never mind this seems to be a bug with my web browser
[03:50:04] <kakuhen> despite typing the correct captcha, it claims it is incorrect
[03:50:07] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[03:50:08] <kakuhen> ok using a different paste site i guess
[03:51:08] <kakuhen> https://bsd.to/1KDH/raw
[03:51:49] <kakuhen> it works, i think
[03:51:56] <kakuhen> (count-triples [123m222p456s19190m0p]) ;=> 2, which I expect
[03:52:27] <gilberth> The CADR emulator did sth very silly with mouse clicks. When a button was clicked, it would OR the button mask to the button state the CADR sees, and when the CADR reads, it would clear the button mask. I fixed that, together with reasserting the interrupt, when sth changed while the CADR was contemplating to read the current state. Now it works, also those "long clicks" requested by the "Move multiple" edge editor of the "Edit Screen" m
[03:54:58] <Alfr> hayley, consider it as using a variable length hash function named id.
[03:55:09] <gilberth> I can see why Brad Parker did that. The original usim is very slow because it mindlessly blitters all the time with the slow SDL, which takes 60ms per blitter, no matter how large, and then the button press would be missed by the CADR, as the buttons would be clear otherwise again, when the CADR responds to the original interrupt.
[03:58:12] * hayley uploaded an image: (89KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/IoaLjBuaLAyjRqxcDtGiNIcq/directness-principle.jpeg >
[04:01:04] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[04:01:22] <hayley> The other thing is that the "layout" now needs to specify CHAR-CODE, CODE-CHAR, CHAR< and CHAR<=. But that's very doable.
[04:02:01] <hayley> Well, that, or just CHAR-CODE and we use < and <= always.
[04:09:01] <selwyn> wondering how to send sms messages with common lisp for (nearly) free
[04:19:33] <selwyn> seems my service provider doesn't offer an sms email gateway
[04:19:35] <selwyn> grumble
[04:25:59] <GreaseMonkey> wrt that bad password list: oh good you use the uncensored one
[04:26:44] <GreaseMonkey> i've often seen the censored version of the password list, in the real one #5 is, uh, totally a cat honest
[04:52:11] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[05:02:53] <gilberth> selwyn: osascript -e 'tell application "Messages" to send "Grettings from #lispcafe!" to buddy "selwyn"'
[05:09:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:11:12] * hayley has written READ-WORD for virtual memory in her macro-assembler.
[05:11:21] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[05:18:33] <hayley> WRITE-WORD is more worrying, as it could require me to allocate a page. But that's still not awfully hard, I guess.
[05:26:50] <hayley> I guess I need to set up the page table and pages with the image that we run too, as there's no way it'll be loaded through IO.
[05:30:33] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:33:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:36:01] <gilberth> kakuhen: (deftype tile () '(or (cons (eql red) (cons (integer 1 9) (cons (member man pin sou) null))) (cons (integer 1 9) (cons (member man pin sou) null)) (cons (member ton nan sha pei haku hatsu chun) null)))
[06:04:10] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[06:17:19] *** Joins: semz (~none@user/semz)
[06:34:58] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[06:39:48] <hayley> https://www.youtube.com/watch?v=c29jLuCyBG8
[06:40:20] * hayley pokes ixelp
[06:43:15] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:47:05] <dave0> i tried    '(bacon lettuce tomato)    and it didn't not work, but i don't know what it did do?
[06:48:00] <dave0> what's bacon? is it something?
[06:48:23] *** Joins: semz (~none@user/semz)
[06:48:46] <dave0> in c you can't just write    bacon   somewhere without declaring it as a variable or function or whatever
[06:49:19] <hayley> It's just a symbol.
[06:49:19] <dave0> and it doesn't look like a string without "
[06:49:52] <hayley> It doesn't have any meaning that you haven't assigned to the name of the symbol, really.
[06:50:13] <dave0> hayley: what can i do with it?
[06:50:57] <hayley> You could dispatch off it, e.g. (let ((something 'x)) (if (eql 'x something) (print "X") (print "not X")))
[06:51:27] <hayley> One sort of "traditional" symbol and list program is to compute a derivative, though it's not easy enough to be one of your first Lisp programs.
[06:51:32] <dave0> it's supposed to be ingredients for a sandwich :-p
[07:01:56] *** Joins: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de)
[07:01:56] *** ChanServ sets mode: +o ixelp
[07:02:32] <ixelp> hayley: You called?
[07:02:45] <hayley> https://www.youtube.com/watch?v=c29jLuCyBG8
[07:03:17] <ixelp> Try again, sorry.
[07:04:15] <gilberth> Ok. My interrupts seem to work now, everything feels smooth now. And the CPU doesn't poll anymore. There is a single 'interrupt_pending' flag, which is polled by the microcode anyway. There is an instruction to poll for interrupts.
[07:05:12] <gilberth> That is: Both the Chaosnet and the console run in different threads now.
[07:06:18] <hayley> https://www.youtube.com/watch?v=c29jLuCyBG8
[07:06:19] -ixelp- Gary Numan Remind Me To Smile Hammersmith 1980 - YouTube
[07:09:08] <hayley> The other thing w.r.t ISUM using integers is that I pretty print regular expressions. But I suppose printing (char-code 97) still tends to work.
[07:09:32] <gilberth> I may attempt an evil hack: Take the huge 864 lines byte code interpreter, craft a function doing a single instruction, declare it inline, and dump the byte code like for (;;) switch (cpu->pc) { case 0: do_insn (cpu, 0xDEADCAFE); break; case 1: do_insn (cpu, 0xCAFEBABE); .... } and see, if gcc could do all the instruction decoding for me and boil do_insn down to what it really does.
[07:10:33] <gilberth> hayley: You sure have your regular expressions in some object and not as s-exprs?
[07:11:02] <hayley> I have regular expression objects, yes.
[07:11:08] <gilberth> Otherwise either play with weak hash tables and pprint dispatch.
[07:11:28] <gilberth> hayley: So then I don't see a problem.
[07:11:36] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Code/DFA-construction/re-types.lisp
[07:11:37] -ixelp- one-more-re-nightmare/re-types.lisp at master · telekons/one-more-re-nightmare · GitHub
[07:12:16] <hayley> There is none, just that naïvely CHAR-CODE-ing e.g. a RE encoding a UTF-8 byte string is going to look stupid. But I only test on strings really.
[07:12:46] <gilberth> Do you still need the negative symbol set data type?
[07:13:18] <hayley> It's not essential, no. If I set up ISUM then I'll just use its negative sets.
[07:13:41] <gilberth> Yep. () is nothing and (nil) is everything.
[07:27:46] <gilberth> There is only 128k (words) in the address space for I/O, this would limit my screen to 2730 by 1536 pixels, if you keep the 16:9 aspect ratio. Ok. my screen only has 2560x1440, so that should fit.
[07:30:41] <hayley> A friend suggested that I use the Minecraft world as primary memory for my metacircular LC-3 VM.
[07:32:26] <hayley> Though I don't know how to nest such a VM in itself. We'd have to pass through the traps to set blocks, but put them somewhere else so that we don't clobber the host memory.
[07:33:16] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:34:10] <gilberth> The only nasty thing is that the CADR has means to or'ing the next instruction with sth.
[07:47:01] *** Joins: semz (~none@user/semz)
[07:50:25] <gilberth> BTW these password lists have to be taken with a grain of salt. Remember that Adobe leak? Adobe required you to register to download information, so many used just any fake password like e.g. 123456. That kind of data really blurs this. Only because I register as joe@example.com with such a password, does not imply that you could use that password for anything interesting.
[07:52:15] <hayley> https://www.nbcnews.com/news/us-news/southlake-texas-holocaust-books-schools-rcna2965 LOL
[07:52:16] -ixelp- Southlake school leader tells teachers to balance Holocaust books with 'opposing' views
[07:52:19] <gilberth> When someone tries to break into my server via SSH at brute force, I recognize that the user name is just some popular name, like "john" or sth.
[07:53:58] <gilberth> hayley: Oppose what? The Holocaust?
[07:54:05] <hayley> Yes.
[07:54:30] <White_Flame> hopefully he opposes gravity, too
[07:54:51] <gilberth> Nobody got my joke.
[07:55:47] <gilberth> White_Flame: We could start with opposing views to the belief that Minecraft is flat.
[07:55:58] <White_Flame> I sort of already did :)
[07:56:15] <hayley> gilberth: "So you have books on cancer, does that mean you support cancer?"
[07:56:55] <gilberth> Some may actually do that.
[07:57:11] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[07:57:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:58:38] * White_Flame protests the cancer support center at the local hospital
[07:59:14] <gilberth> But yes, in general politicians have the belief that you could negotiate with nature.
[07:59:44] <White_Flame> also, all the "end women's suffrage" surveys people have done
[08:00:36] <gilberth> And the local Green party really beliefs that /me burning less oil, would safe the climate. When we don't burn it, somebody else would do. It's not that easy.
[08:00:56] <gilberth> * save
[08:01:32] <White_Flame> alt.pave.the.earth
[08:02:12] <gilberth> I am all for it, no more need to mow the lawn.
[08:02:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[08:21:02] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[08:30:22] <easye> hayley: nice essay ("Selling Lisp by the Pound")!
[08:30:49] <hayley> Thanks!
[08:37:58] <hayley> Funny that there's 32KiB of L1d cache, I thought it was closer to 8K still. So I don't really have to worry about things fitting into L1 or not.
[08:38:04] <hayley> *cache on my machine
[08:48:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:52:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[08:55:31] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:00:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[09:41:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:42:46] * hayley uploaded an image: (80KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/xiImeEPsGKSbkacCSzrbGHWc/at-23-years-old.jpeg >
[09:46:19] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[09:59:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:01:23] <mfiano> my favorite response yet (paraphrased): Because CL is a combination of different Lisps unified, the author thinks that somehow it rightfully claimed the heir to the throne and therefor the one true Lisp.
[10:02:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[10:02:54] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:04:03] <Mondenkind> kakuhen: you have a copy of lispworks, right?
[10:04:29] <Mondenkind> if so, any chance you can tell me the output of: (code-char #xd800)?
[10:04:38] <kakuhen> uh i have the personal edition but sure
[10:04:49] <kakuhen> i almost always use clozure cl
[10:04:54] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Ping timeout: 245 seconds)
[10:05:13] <hayley> mfiano: Yes.
[10:05:32] <kakuhen> Mondenkind: (code-char #xd800) ;=> NIL
[10:05:41] <kakuhen> This is with LW 7.1 personal edition
[10:05:50] <Mondenkind> cool, thank you!
[10:05:55] <kakuhen> 7.1.2 in particular, actually; np
[10:06:02] <kakuhen> I just came back from a looong night x.x
[10:06:16] <Mondenkind> oh--can you also run (code-char #x110001)?
[10:06:28] <Mondenkind> 'looong night' doing what? ;o
[10:06:33] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[10:08:16] <hayley> But, when compared to Maclisp machines or Interlisp, eh, CL has similar features in the end (in no small part by being a derivative of them, of course).
[10:09:07] <Mondenkind> hayley: sedit in spec when
[10:10:24] <hayley> Mondenkind: WSCL issue SLIME-IS-SLIMY
[10:12:34] <hayley> Though someone mentioned refs in Clojure, and they're already frowned upon, so trying to do objects with refs seems like a very bad idea. Though it still doesn't handle "history AND identity" like VPRI worlds do.
[10:13:19] <kakuhen> Mondenkind: in short, post anime club activities
[10:13:26] <kakuhen> also sorry for late response; the most disgusting bug entered my dorm room
[10:13:33] <kakuhen> and i took care of it
[10:14:26] * Mondenkind has had problems with horseflies recently
[10:14:30] * hayley uploaded an image: (209KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rFxLlYvWMKJzYNcUGoUoDruZ/Squid_Girl_Ikamusume_recommends_SICP.jpg >
[10:14:33] <Mondenkind> although they seem to be going away as it gets colder
[10:14:56] <mfiano> Mondenkind: I really like Raku, but I feel like I'll never be as productive as Lisp with all the added syntax/grammar, and the lack of interactivity. I am trying hard to not let that affect me to not want to use it though.
[10:15:16] <Mondenkind> http://timonoko.github.io/Nokolisp.htm  'the language was formally described as follows [...] (defun cons (x y) (list x . y))'
[10:15:16] -ixelp- Nokolisp
[10:15:19] <Mondenkind> thanks, I hate it
[10:15:36] <mfiano> ?
[10:16:34] <Mondenkind> I mean, it would be kinda cool if (f x . y) evaluated to the same thing as (apply #'f (list* x y)).  But nope nope nope nope nope
[10:17:04] <hayley> Once I joked that Scheme should use ... for APPLY, e.g. (list a b xs ...)
[10:17:50] <kakuhen> Mondenkind: regarding the lispworks output, it signals an error
[10:17:59] <kakuhen> https://bsd.to/eKZr/raw
[10:18:00] -ixelp- eKZr
[10:18:28] <kakuhen> wow I sure hope the paid version of lipsworks has a better debugger
[10:18:32] <kakuhen> this is the most useless stack trace ive seen
[10:18:44] <Mondenkind> probably
[10:18:47] <kakuhen> even my iphone gives better detailed ones
[10:18:50] <Mondenkind> they make you pay for the good shit
[10:19:33] <kakuhen> alright now the dilemma: work on math homework now or work moar on my lisp mahjong thingy
[10:19:38] <kakuhen> its so frustrating
[10:19:38] <Mondenkind> mfiano: 'never be as productive as Lisp with all the added syntax/grammar, and the lack of interactivity'  syntax/grammar is surely a matter of getting used to.  But yeah, the interactivity is a pain
[10:19:46] <kakuhen> i just met three people who know how to play mahjong but they all play chinese variant instead reee
[10:19:49] <kakuhen> so close yet so far
[10:20:15] <Mondenkind> somebody made a thing to hook up emacs to a raku repl.  But the language isn't really designed for it.  Like, the global namespace is fixed; so you can change existing definitions, but you can't add new ones
[10:20:50] <mfiano> Mondenkind: Yes, I mean even if I 'got used to it', it's obviously not as simple or fast to use as prefix notation sexps for everything
[10:21:43] <mfiano> I am quite sad that there is no lsp or real-time semantic analyzer for vim/neovim
[10:22:08] <Mondenkind> I maintain that rich syntax can be acceptable, as long as you have a real structural editor.  But none exists
[10:22:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:22:48] <Mondenkind> I don't like 'real-time semantic analysis'.  Everything falls short of real structural editing, and it always breaks horribly when I try to make proper use of my textual editor
[10:24:19] <mfiano> I guess it's 'switch to terminal and raku -c' every so often
[10:24:41] <mfiano> or keybind it, and hope its modules are loadable to even get that far
[10:27:19] *** Joins: cranium (~cranium@user/cranium)
[10:29:55] *** Joins: makomo_ (~makomo@user/makomo)
[10:30:05] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:30:09] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[10:32:13] <lisp123> My dream is to have the InterLisp editor today in Emacs
[10:32:26] <lisp123> Apparently ParEdit came from that, and they won an award for excellent software engineering
[10:33:21] <selwyn> we can hope for second climacs
[10:33:34] <selwyn> but it doesn't look like it will be finished soon
[10:33:47] <mfiano> Then contribute your time and expertise!
[10:34:05] <Mondenkind> climacs is not intended to be structural, afaik
[10:34:11] <lisp123> If I ever get rich, I will fund the development of a Common Lisp Editor
[10:34:29] <lisp123> Unfortunately, that won't happen, so I rely on you guys to create it :)
[10:34:44] <selwyn> expertise lol
[10:34:49] <selwyn> yeah don't know if i have much of that :)
[10:36:26] <lisp123> mfiano: I need to do new batch of Amazon book purchases
[10:36:34] <lisp123> What do you currently recommend?
[10:36:44] <mfiano> For?
[10:37:04] <lisp123> Lisp & Functional Programming I guess (AI seems to big of a subject)
[10:37:30] <lisp123> Currently I plan on getting Sonja Keen's book, Lisp in Small Pieces
[10:37:50] <kakuhen> when i marry a rich boy i will convince him to fund lispy things
[10:37:53] <kakuhen> for now this is simply a pipe dream
[10:37:54] <mfiano> I don't recommend reading anything other than PCL for free, and then take a good couple years of gaining experience programming. A book isn't going to give you that.
[10:39:59] <lisp123> kakuhen: Good luck, time to make that dream a reality!
[10:47:19] <pjb> kakuhen: your odds of such a marriage are (/ (/ 2755 8.0e9) 4.0e9) #| --> 8.609375E-17 |#  That's way worse than your odds to win a lottery!
[10:47:57] <hayley> How much money do they need exactly?
[10:48:13] <pjb> And I didn't even factor out the fact that the rich guys are probably already married with the most beautiful girls…
[10:48:29] <hayley> https://i.imgur.com/aUfLebM.jpg "Evil Talking Heads be like"
[10:48:35] <pjb> Better start up a company!
[10:49:17] <kakuhen> pjb: then i simply take the lottery and strive for such marriage
[10:49:22] <kakuhen> now my odds are increasing
[10:53:36] <mfiano> hayley: Can you recommend 42AT to be used yet?
[10:53:41] <selwyn> how does that calculation work lol
[10:54:16] <hayley> mfiano: I can't seriously recommend it.
[10:54:17] <selwyn> 2755 billionaires in the world?
[10:54:24] <pjb> yes
[10:54:29] <selwyn> many rich people are indeed already married
[10:54:40] <mfiano> hayley: :( Maybe put that in the readme then.
[10:54:56] <hayley> There seems to be a bug where decentralise2 drops like 1 in 10 million messages with 42AT, but not with another hash table. And, well, I only proved (enough of) decentralise2 correct.
[10:55:33] <mfiano> I will hold off on using it now then.
[10:55:40] <mfiano> Until you write tests or whatnot
[10:55:45] <hayley> But it could be a genuine bug in decentralise2, and maybe having a slower hash table doesn't provoke the bug. I don't know where to put the blame. Sorry.
[10:56:01] <hayley> Yeah, tests would be a good idea.
[10:56:10] <kakuhen> what's the most controversial thing you could possibly fund in the common lisp community 
[10:56:14] <kakuhen> i would say, a new cl spec
[10:56:18] <hayley> I'd recommend the hash table in https://github.com/Shinmera/luckless though.
[10:56:19] -ixelp- GitHub - Shinmera/luckless: Lockless data structures for Common Lisp
[10:56:23] <hayley> I'd say Hexstream.
[10:56:25] <kakuhen> why doesn't apple use like 0.01% of its cash to fund a new CL spec
[10:56:33] <mfiano> hayley: lmao
[10:56:50] <kakuhen> do i want to know what is hexstream? (^◇^;)
[10:56:56] <mfiano> You do not
[10:57:00] <lisp123> kakuhen: They should really fund BSD given they ripped it off :(
[10:57:03] <hayley> It does say "Don't look, AAAAAAAAAAAAAAAAAAAAAAAAAAa" in the readme, but I'll give you permission to look, and I'm sure Shinmera won't kill me for it.
[10:57:11] <selwyn> a new spec would be fun
[10:57:18] <selwyn> we could have a religious schism
[10:57:20] <kakuhen> lisp123: well BSD lets you rip it off so I say uhhh "serves them right"
[10:57:20] <mfiano> hayley: I tried it and I was not impressed with the performance nor the API
[10:57:27] <kakuhen> you see, Apple also took GPL-2 code for their Chess.app
[10:57:31] <hayley> Oh dear.
[10:57:37] <selwyn> hayley: hexstream lol
[10:57:38] <kakuhen> and end result? still ships in mac os but the About window has a shiny "download source code" button
[10:57:52] <lisp123> They have a chess app? brb time to play
[10:58:15] <hayley> When I get my shit together, you could use the interface in https://github.com/no-defun-allowed/concurrent-hash-tables, and I've tweaked the table to get about ~80% of the performance of Java in my own fork.
[10:58:16] -ixelp- GitHub - no-defun-allowed/concurrent-hash-tables: A "portability" library for concurrent hash tables in Common Lisp
[10:58:31] <kakuhen> concurrent hash tables sounds interesting
[10:58:57] <kakuhen> i assume its something like the lock-free hash tables that sbcl and ccl have except somehow making it work on other CLs
[10:59:01] <hayley> But I want to inline e.g. C-H-T:GETHASH to LUCKLESS:GETHASH, while also having some way to specify which table you want...somehow. The current version kinda sucks.
[10:59:27] <hayley> kakuhen: Yeah, except this uses our own implementations (or an implementation of a segmented lock table, which is better than not segmenting, but still shit).
[11:00:12] <hayley> Maybe I should stick :CHT-USE-LUCKLESS or :CHT-USE-THREADMILL in *FEATURES* and then :IF-FEATURE in the system.
[11:10:08] <mfiano> oh boy. someone just linked 'by the pound' in #lisp. this should go well
[11:11:14] <hayley> https://www.youtube.com/watch?v=0VC_ysnvIso
[11:11:15] -ixelp- Oh No (Live, 1988) - YouTube
[11:11:28] <Mondenkind> mfiano: considering you linked it on reddit and lobsters, you can hardly complain :)
[11:11:45] <mfiano> and HN and fediverse :)
[11:11:55] <hayley> "If that’s the core of their argument, then Factor and Smalltalk would also effectively be LISPs to, no?" Yes.
[11:12:13] <dave0> remember that game "lemmings" ? they say "oh no!"
[11:12:16] <kakuhen> hayley you use matrix, right
[11:12:23] <Mondenkind> factor?  Wasn't that a forth dialect?
[11:12:23] <hayley> kakuhen: Yes.
[11:12:29] <hayley> Yes.
[11:12:30] <kakuhen> how do i link my matrix account to my irc one
[11:12:39] <kakuhen> i heard libera is already bridged so i can "just join a room"
[11:12:47] <kakuhen> but clearly it will not preserve my registration on irc, right
[11:12:53] <kakuhen> what extra stuff do i need to do that
[11:13:12] <hayley> Hit up @appservice:libera.chat and say !nick <nickname> then !storepass <password>
[11:13:23] <kakuhen> Thanks; I'm going to try that soon
[11:13:27] <hayley> Somehow the latter never seems to work for me, so I have to identify myself every so often. idk
[11:22:20] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[11:24:10] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:34:13] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[11:38:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:42:25] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[11:43:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[11:43:33] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:43:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:48:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[11:49:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:50:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:14:13] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:20:08] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[12:20:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:26:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:30:46] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[12:32:13] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:32:19] <mfiano> Anyone use the compose key often?
[12:32:26] <hayley> Yes.
[12:32:34] <mfiano> How do I type pi, tau, etc?
[12:33:13] <hayley> I don't know, I have another key to change to a Greek layout (as I also speak Greek sometimes).
[12:35:06] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:38:02] <Mondenkind> mfiano: I have no idea what the defaults are; I mostly use the mappings from my own compose file
[12:38:44] <mfiano> I remember there being a compose key to switch to greek mode
[12:38:44] <Mondenkind> (i.e. you should make your with whatever method makes the most sense to you for typing that letter)
[12:39:18] <mfiano> so `<compose> <something> p` would do pi, but i forget what <something> is
[12:40:00] <hayley> Someone said <dead_greek> p which is another modifier.
[12:40:08] <Mondenkind> huh.  Apparently math π is the same as greek π
[12:40:15] <Mondenkind> but apl ⍳ is not the same as greek ι
[12:40:23] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[12:40:25] <SAL9000> <compose> <*> <p> at least in wincompose
[12:40:36] <hayley> C-S-u 03c0 SPC ; glhf
[12:41:23] <mfiano> C-S-u doesn't work at all for me
[12:41:36] <Mondenkind> nor for me
[12:41:44] <hayley> Is -S- shift or super?
[12:41:44] <hayley> I meant shift.
[12:41:50] <Mondenkind> tried both
[12:41:51] <mfiano> Shift
[12:41:53] <Mondenkind> super is -s-
[12:41:54] <hayley> Maybe it's the GUI toolkit too, dammit.
[12:42:13] <SAL9000> You might be looking for ucs-insert ?
[12:42:18] <Mondenkind> hmm.  I thought I was using the X version of emacs but apparently I am using the gtk version.  ¯\_(ツ)_/¯
[12:43:57] <mfiano> xmodmap -pke | grep dead_greek
[12:44:08] <mfiano> if this doesn't have output, you can't use greek with compose
[12:44:16] <mfiano> unless you add a mapping to another key
[12:44:33] <Mondenkind> so presumably you can setxkbmap ...dead_greek?
[12:44:33] <mfiano> or make your own compose file
[12:44:59] <mfiano> Right, but I don't really have another key free. Would rather have that key be modal within compose instead of global
[12:45:36] <mfiano> I am on a 60% keyboard. I could make another key layer but too lazy
[12:45:42] <Mondenkind> I think the dead_greek is in compose?
[12:45:56] <Mondenkind> at least, there are a bunch of references to it in /usr/share/X11/locale/en_US.UTF-8/Compose
[12:46:08] <mfiano> Right and that is the problem
[12:46:16] <mfiano> You have to type the dead_greek key
[12:46:42] <Mondenkind> oh, no, you are right, it is not modal.  Because those entries are not prefixed by <Multi_key>
[12:46:43] <mfiano> I don't have a physical one, and if I add one, I will have to unassign another key (small keyboard)
[12:48:13] <mfiano> Looks like the only solution is a custom Compose file. Wonder if that merges with the global one or what
[12:48:34] <mfiano> a left to right merge would be nice so i don't have to copy a huge file
[12:49:29] <Mondenkind> I believe the standard solution is to include the global one from your own, before defining your own entries
[12:49:45] <mfiano> Ah cool if there is an include directive
[12:50:58] <mfiano> Heh might be less trouble to just use a TeX input method
[12:53:46] <mfiano> or vim digraphs
[12:54:16] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[12:54:22] <mfiano> C-k *p is π
[12:54:40] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:58:19] <mfiano> all this because the vim-raku iabbrev solution is flawed: it takes less time to use compose or vim digraphs when the symbol you want is part of a large token (not separated by whitespace)
[12:58:42] <mfiano> because a space is what triggers the expansion or something
[12:59:00] <mfiano> i forget how it works...but it is a pain to use for non-word abbreviations
[12:59:39] * mfiano disables that shit
[13:03:23] <mfiano> Mondenkind: There was some talk in #raku yesterday about how ading types to arrays with sigils is hard to get right/very unintuitive
[13:03:36] <mfiano> that makes me worried. i didn't understand the code to follow along much
[13:20:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[13:23:05] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[13:23:28] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:25:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 245 seconds)
[13:33:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[13:33:31] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:46:43] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:48:22] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:49:08] *** Joins: makomo_ (~makomo@user/makomo)
[14:20:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:27:06] <Qwnavery> What do you guys/gals think of emacs vs vi/vim bindings? I'm curious from a design and usability perspective.
[14:27:49] <selwyn> for lisp development?
[14:28:06] <Qwnavery> yes, and in general
[14:29:28] <selwyn> well, i have not used the vim bindings, but i am intrigued and impressed by those who develop lisp using anything other than emacs
[14:29:34] <Qwnavery> specifically only keybinds/modes (i.e. edit mode, view mode) no other addons
[14:29:49] <selwyn> lisp has admittedly turned me into an emacs weenie
[14:29:53] <Qwnavery> ah ok. Yeah, I use emacs but with evil mode.
[14:30:01] <Qwnavery> Spacemacs to be precise.
[14:30:14] <selwyn> currently doing some academic writing in latex on emacs
[14:31:09] <Qwnavery> I don't like all the extra crap in emacs. I'm currently working on designing a Common Lisp implmentation of -macs
[14:31:54] <Qwnavery> I'm trying to think outside the box and design it in a way that makes my workflow way easier.
[14:32:11] <Qwnavery> (and potentially others)
[14:32:12] <selwyn> we already have such projects
[14:32:18] <mfiano> I would not recommend vim for Lisp for several reasons
[14:32:35] <mfiano> The most notable is that vim is geared towards languages with a fixed syntax
[14:32:52] <selwyn> https://github.com/robert-strandh/Second-Climacs is a reinvention of emacs to make common lisp implementation easier
[14:32:53] -ixelp- GitHub - robert-strandh/Second-Climacs: Version 2 of the Climacs text editor.
[14:32:56] <selwyn> *development
[14:33:02] <mfiano> If you write a macro that must be indented differently, vim can't know how to parse &body
[14:33:16] <mfiano> you instead must write indentation rules to a flat file for vim to load
[14:33:52] <mfiano> There are several other reasons, but this one alone will make you annoyed if you jump through those hoops, or others if they have to read your code
[14:35:01] <Qwnavery> selwyn: hm. well here's what I'm thinking. I want to have a client-server model where you have lightweight windows that access the servers buffers
[14:36:03] <selwyn> ok
[14:36:17] <Qwnavery> I want to make it so that you can configure two servers (computers) to talk to eachother and share buffers
[14:36:27] <selwyn> it would be nice to have a new editor. i really like emacs but it shows its age
[14:36:57] <Qwnavery> so you can edit the same buffer from 2 different computers with the cursors from each computer showing up and editing in realtime
[14:37:49] <Qwnavery> if the computers are disconnected and a buffer is edited in the meantime, nexttime the connect a diff buffer will open up allowing you to merge the two buffers with ease
[14:38:14] <selwyn> hm
[14:38:18] <Qwnavery> buffers can also then be accessed by other programs as a low level interface
[14:38:44] <Qwnavery> so you avoid emacs-bloat by distributing programs seperately from the main editor package
[14:39:34] <Qwnavery> things like CL-editing would be enhanced by a SLIME equivalent that can easily connect and interface with the editor and repl on a remote device
[14:40:17] <selwyn> well
[14:40:31] <Qwnavery> things like backups and time-stamps become automated as apart of the daemon
[14:41:30] <selwyn> from a common lisp perspective, the drawback of emacs is that you have a separation between the common lisp process (in which cl code is read/executed) and the emacs process (in which elisp is read/interpreted)
[14:42:11] <selwyn> if you had them both in the same process, then it becomes much easier for the text editor to be able to render common lisp source code in a sensible way
[14:42:38] <Qwnavery> yeah, that's my primary reason for choosing cl for this.
[14:42:46] <selwyn> iirc smalltalk/squeak has this feature, as well as old lisp machine emacs (genera?)
[14:42:52] <selwyn> qwnavery: ah ok
[14:43:02] <selwyn> but i mean, why have a slime equivalent in that case
[14:43:39] <selwyn> is that just to get different lisp images talking to each other?
[14:44:30] <Qwnavery> I was mostly considering slime an environment that allows for features like detailed tracing etc
[14:44:45] <Qwnavery> It's more sophisticated than just a plain sbcl repl
[14:45:33] <Qwnavery> but you're right, you wouldn't need slime because it would be inbuilt. I mean to say a slime-like interface to the cl environment with features like instant traceback to a point in a file
[14:46:04] <selwyn> hm
[14:46:22] <Qwnavery> It should be possible to make it implementation independent.
[14:56:42] <selwyn> well, a nice idea
[14:58:45] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[14:59:00] <Qwnavery> I'm going throught the TAO design process to ensure I make something that's not a travesty. Thank you I will definitely have a look at Second-Climacs though.
[15:00:27] *** Joins: makomo_ (~makomo@user/makomo)
[15:04:17] <selwyn> there have also been talks about it
[15:06:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[15:06:34] <selwyn> https://www.youtube.com/watch?v=JU-BL4XAOHo about a part of second climacs
[15:06:34] -ixelp- A CLOS Protocol for Editor Buffers - YouTube
[15:06:51] <selwyn> the name will never not be funny though
[15:08:34] <Qwnavery> hehehe
[15:10:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[15:12:44] <selwyn> beach refuses to change it
[15:13:18] <Qwnavery> I think it's a great name
[15:13:31] <Qwnavery> It's the *peak* of editors.
[15:14:05] <selwyn> it would be great to see second climacs one day
[15:19:07] <Qwnavery> Do you think robert would be ok if I cloned it and modified it?
[15:19:36] <mfiano> Ask in #sicl
[15:19:37] <Qwnavery> He doesn't seem to have any licenses on the project?
[15:34:19] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[16:02:57] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:18:19] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:54:28] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[16:59:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[17:13:10] <mfiano> Mondenkind: I'm sold on multi's :)
[17:13:23] <mfiano> custom dispatch predicates and all :)
[17:13:49] <SAL9000> Speaking of SLIME -- a silly question perhaps, but how "married" is it to the Lisp languages? I'm considering porting (parts of) SLIME/SWANK to a (proprietary) language with a more C-like syntax.
[17:16:45] <selwyn> hm
[17:17:44] <selwyn> the fact that clojure went down the route of apparently not porting slime/swank (instead opting for their own thing called cider)
[17:17:56] <selwyn> rather implies that slime/swank is married to common lisp
[17:18:26] <selwyn> in particular
[17:43:20] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:58:34] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[17:59:57] <SAL9000> good point
[18:01:10] <selwyn> though i have not checked out cider sources at all. perhaps there is a connection after all
[18:03:11] <SAL9000> I remember playing around with clojure and cider years ago, and it certainly felt like a totally different sytem
[18:03:13] <SAL9000> system*
[18:03:25] <SAL9000> (doesn't mean they didn't reuse code, of course)
[18:11:28] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:20:52] <gilberth> Good morning #lispcafe!
[18:21:53] <selwyn> good morning gilberth
[18:37:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:38:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:38:47] <gilberth> When a new interrupt is generated, while the CADR is handling a previous interrupt, the interrupt is lost. Perhaps I bite the bullet and emulate how a real vectored interrupt controller would work.
[18:39:34] *** Joins: aeth (~aeth@user/aeth)
[18:39:39] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:39:54] <gilberth> Another reason why I don't like edge triggered interrupts.
[18:40:48] <gilberth> Perhaps I read the schematics of the CADR.
[18:43:16] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[18:43:16] <gilberth> The current logic is that interrupts are ignored while interrupts are disabled, this is not like real HW works.
[18:44:36] *** Joins: makomo_ (~makomo@user/makomo)
[18:45:22] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:46:06] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:46:44] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3475:b970:7aa6:a1c7)
[18:46:52] *** Joins: keepitalphanumer (~user@user/keepitalphanumer)
[18:48:05] <gilberth> I seems like devices on the I/O board, like the keyboard and mouse generate edge-triggered interrupts, while the vectored interrupt controller is level based.
[18:48:35] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 260 seconds)
[18:57:30] *** Parts: keepitalphanumer (~user@user/keepitalphanumer) (bye!)
[19:00:20] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[19:02:13] *** Joins: ln43 (~ln43@user/ln43)
[19:10:09] *** Joins: makomo (~makomo@user/makomo)
[19:11:30] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:15:43] <ln43> Hi all, what's up ?
[19:16:19] <gilberth> You lost a space, where none belongs. I claim it.
[19:17:48] <ln43> ok but i like sometimes to discuss about something 
[19:19:06] <gilberth> Can you name a character that is shifted on an US-QWERTY layout but unshifted in some other layout?
[19:20:33] <selwyn> what do you mean by shifted
[19:20:50] <ln43> Hello sir selwyn !
[19:21:03] <selwyn> hi ln43
[19:21:05] <selwyn> how are you
[19:21:20] <ln43> quite fine, thx... and you ?
[19:21:29] <gilberth> selwyn: With the shift key depressed. Like '*' being <shift>+<8>
[19:21:40] <selwyn> not bad
[19:21:48] <selwyn> very busy for now
[19:21:50] <ln43> ah, recently i use a lot  shift+ enter
[19:22:01] <gilberth> I am cleaning up, and write some comments to explain what I do.
[19:22:43] <ln43> good for you selwyn, i'm not doing anything of particular recently
[19:23:38] <gilberth> On my keyboard '(' is unshifted, it sits where '[' is; but that is non standard. I don't remember anything about the German layout, but I believe '<' and '>' are on one key, with one shifted and the other not. Hmm. Hey, but it's printed on me keycaps. /me has a look.
[19:24:07] <ln43> in my ( is shifted
[19:24:16] <ln43> i should press shift to have a (
[19:24:29] <ln43> otherwise i get an 8
[19:25:18] <gilberth> Yes, e.g. on a German keyboard ';' is where you expect '<', that is <shift>+[,< key]; at the right of <m>
[19:25:45] <ln43> i have < and > next to the shift 
[19:25:48] *** Quits: raeda_ (~raeda@72.49.219.33) (Quit: Leaving)
[19:25:53] <ln43> on the right
[19:25:55] <gilberth> ln43: I swapped '('/')' and '['/']' because this way Lisp hacking is more comfortable.
[19:26:03] <selwyn> can't think of any
[19:26:17] <ln43> ok but there are so many different keyboard layouts... it's a mess
[19:26:42] <ln43> decisely too many
[19:26:51] *** Joins: rogersm (~rogersm@90.166.177.48)
[19:27:37] <ln43> and then maybe is better an US layout to not remap too much
[19:27:47] <gilberth> Exactly. I just wanted an example. But I already got one my looking at what is printed on my keys. I have a German keyboard but use an US-QWERTY layout. Since I could think, because '{' is on like <altgr>+<7> or so, a nightmare to type.
[19:27:50] <ln43> at least for my alphabet that is quite similar to that
[19:28:09] <ln43> i don't use èòàù too aften to say
[19:28:25] <ln43> ì
[19:29:09] <ln43> but ok... using autocompletion it should be not necessary at all digit strange symbols
[19:29:46] <ln43> but for example someone has arabic keyboards too...
[19:30:06] <gilberth> 99% of what I type is in English. And as I said, '{', '[', ']', '}' are almost impossible to type on a German layout. So I switched to US since I could think. And it also is only until recently, that you could transport umlauts reliable anyway, so I used to type say 'ae' instead of 'ä'.
[19:32:40] <ln43> And nothing, maybe for those who use "strange" alphabets it's a must have a local keyboard
[19:33:13] <gilberth> ln43: Sure, but you could switch layouts, if needed.
[19:33:26] <ln43> yes right
[19:34:31] <gilberth> I mean, you either write English or say Russian with its Cyrillic alphabet. And when hacking you should keep your comments in English anyway.
[19:35:29] <ln43> yes, right... i notice that many chinese developers don't care to put comments in english
[19:35:54] <ln43> yes they use often their own alphabet
[19:36:05] <gilberth> How useful, "nobody" can read it then.
[19:36:33] <ln43> maybe to restrict the access ... there is no other usefulness of that behaviour  
[19:36:49] <ln43> or it's a cultural choice
[19:37:01] <ln43> put comment in the native language 
[19:37:12] <gilberth> Take CLISP for example, most comments especially those explaining the very internals are in German. You want to fix a bug? Good luck.
[19:37:40] <ln43> yes i noticed time ago, and i was thinking Bruno was not germanic
[19:37:49] <gilberth> ln43: I don't do that, I always consider, that somebody else might want to fix or alter my code.
[19:38:13] <gilberth> ln43: Bruno is German.
[19:38:25] <ln43> yes i know the surname is germanic
[19:40:18] <ln43> ah ok, the origin of many if not all the actually used Common Lisp implementations were in the EU
[19:40:44] <ln43> OK, in the century before this one ...
[19:40:45] <selwyn> if you look at the qwertz adoption map
[19:40:53] <ln43> what is that ?
[19:40:54] <selwyn> its like german empire + austria hungary
[19:41:10] <gilberth> Heh.
[19:42:07] <selwyn> idk
[19:42:17] <selwyn> internationalisation is one thing
[19:42:26] <selwyn> it doesn't mean that everything should be in english
[19:42:36] <selwyn> but i can't think of a good counterargument to your point
[19:43:06] <ln43> and recently i was ispecting a water pipes network but i had a lower pressure drop in a particular zone than the expected... so now is a mess
[19:43:39] <gilberth> I own an old mechanical typewriter from like 1920 and it has QWERTZ, but non-alphabetic keys are a strange mix of what is US-Layout now and the todays's German layout. Like '.' and '?' where it is on an US layout, and where it is today. And it lacks both '1' and '0'.
[19:44:03] <gilberth> This is why you find 'L' and 'O' being used for binary digits in older books.
[19:44:11] <ln43> basically the water treatment plant is giving more pressure than the required value... and pumps are working out the optimum zone
[19:44:27] <ln43> and ok... i will see how to adjust if possible
[19:45:18] <ln43> and then there are quite few valves to cosider
[19:45:59] <ln43> yes water is a strategic resource even if it's not potable ... for the future
[19:49:42] <ln43> ok i will go to lunch, best regards 
[19:49:49] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[19:53:08] <pl> gilberth: well, the one part of CLISP I've read is unfixable not because German, but because the only fix is to delete and start over (the WHOLE memory management code) 
[19:54:54] <gilberth> pl: Yes, the memory management code is horrible. But this is also because early UNIX and UNIX-like systems were having all kinds of flaws and restrictions in that domain.
[19:55:39] <pl> gilberth: that was no longer the excuse in i think 2005, when Bruno defended that code 
[19:55:49] <pl> Also, it was insane even accounting for that 
[19:56:06] <pl> I mean, a lot of the insanity is not in the OS interaction 
[19:56:50] <pl> But due to something like three different interactions smushed together into turducken except made of crap 
[19:57:07] <pl> None of the three being written right for any os at any time 
[19:57:46] <gilberth> Yes, Bruno is not easy to work with. I used to contribute quite a bit to CLISP. E.g. the weak pointers are mine and many fixes. I once had multithreading for CLISP very early before there was even the clone(2) system call in Linux. But have been '95 or sth.
[19:58:30] <gilberth> * Must have been
[19:58:52] <pl> gilberth: for example, the memory management could be rewritten into something saner even using sbrk() - and that would have been the only time one of the st00pid routines would remain in any form 
[19:59:12] <pl> Except it would be limited then to handling of sbrk-style APIs 
[20:00:46] <gilberth> Well all this comes from sticking tag bits in the high bits of a pointer. This is something left over from the original 68k implementation as the 68k would just ignore the upper 8 bits of an address with its 24-bit address bus.
[20:01:29] <pl> gilberth: nope, tag bits in MSB do not explain the crap code I went through 
[20:02:01] <gilberth> ok. So what was your trouble then?
[20:02:05] <pl> sbrk() style OS interface only explains one tiny sliver of it (manual page alignment), except all the other code didn't do that 
[20:02:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[20:02:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:02:54] <pl> There was unholy mix of malloc/mmap/weird deeds done with pages all in single code path 
[20:03:14] <pl> I was more surprised it didn't explode on every allocation than anything 
[20:03:25] <gilberth> Mixing malloc and mmap? Strange.
[20:05:00] <pl> gilberth: the most charitable explanation is that code authors never learnt how to write a memory manager and never read os docs 
[20:05:17] <pl> (and I'm going all the way back to UNIX V6 on that) 
[20:05:35] <pl> Which is fine if it's old shame to be fixed 
[20:06:04] <pl> What wasn't fine was claiming that the code is good and that it actually operated OS interfaces correctly, on Linux, in 21st century 
[20:06:08] <gilberth> Does V6 even have mmap(2)? I would be surprised.
[20:06:27] <pl> No, PDP-11 Unix had only sbrk 
[20:06:45] <pl> And no paging 
[20:06:46] <gilberth> Yes, it was swapping anyway, not paging.
[20:23:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[20:25:43] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:27:13] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:31:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:35:11] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3475:b970:7aa6:a1c7) (Remote host closed the connection)
[20:36:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[20:37:30] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:54:53] <gilberth> Next challange: How to tell what is the meta key with X11, as most default modmaps are totally screwed, like putting both Alt and Meta on one modbit.
[20:56:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:59:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:05:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:05:55] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[21:10:50] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 265 seconds)
[21:15:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[21:16:20] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[21:16:46] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[21:20:47] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 264 seconds)
[21:23:04] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:23:27] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:27:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:32:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:33:01] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[21:34:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:36:35] *** Joins: aeth (~aeth@user/aeth)
[21:37:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[21:54:17] *** Parts: dimadima (~user@80.58.238.35.bc.googleusercontent.com) ()
[21:57:25] <selwyn> today i thought about the kid in america who tried to build a nuclear reactor out of fire alarms, and ended up getting his house destroyed by the epa and buried in the desert because it was radioactive
[21:57:32] <selwyn> how close did he actually get to making a nuclear reactor?
[22:04:26] <gilberth> Who is epa?
[22:04:35] <selwyn> environmental protection agency
[22:04:42] <selwyn> (or a similar body)
[22:05:09] <gilberth> How many fire alarms did they use that it was a real hazard?
[22:07:26] <selwyn> uh
[22:07:44] <selwyn> hard to find a more detailed answer than 'a lot'
[22:08:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:09:47] <selwyn> til gunsights have tritium in them
[22:10:07] <White_Flame> I think it was in the hundreds of fire alarms
[22:11:39] <gilberth> Hmm, and that already is dangerous?
[22:14:11] <selwyn> he managed to get thorium as well
[22:15:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:17:17] <gilberth> Oh, did he wanted to build a breeder?
[22:18:45] <selwyn> yes
[22:19:05] <selwyn> but it seemed he passed away young, very sad
[22:20:16] <gilberth> Ouch. Kill by the radioactivity? He perhaps would have gotten a bright engineer or scientist otherwise.
[22:20:27] <selwyn> https://en.wikipedia.org/wiki/David_Hahn apparently not
[22:22:08] <pjb> So, he died of chemistry, not of radioactivity…
[22:22:44] <gilberth> Ah, his mental illness killed him. Was he really mentally ill, or just could cope with normies?
[22:22:54] <pjb> I'd take the later.
[22:22:56] <gilberth> * could NOT cope
[22:23:20] <gilberth> Why, the hell, I always do skip the negation? Curious.
[22:23:51] <selwyn> well
[22:23:58] <gilberth> pjb: The articile mentioned he served the army, I guess that wasn't for the better.
[22:25:05] <selwyn> they say that one of the leading causes of death due to chernobyl was anxiety/depression/drug related
[22:25:10] <selwyn> *the leading cause
[22:25:26] <selwyn> people worry that they are sick because of their experiences
[22:39:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:39:34] <Qwnavery> gutenmorgen
[22:40:01] <gilberth> Moin Qwnavery!
[22:40:29] <Qwnavery> Just went for my morning walk at 5:00AM
[22:40:44] <gilberth> [And "moin" means "good" not morning and can be used whole day or night.]
[22:41:34] <gilberth> Qwnavery: 5:00AM is a time I usually crash.
[22:41:57] <Qwnavery> oh cool. I technically live in German settlement but I don't speak any German.
[22:43:03] <gilberth> bbl, I need to prepare something edible.
[22:43:06] <Qwnavery> I really should learn it along with a host of other languages but it's not like that's ever going to happen lol.
[22:43:14] <Qwnavery> Same ta.
[22:43:35] <gilberth> Heh, I could teach you, if you you teach me English and you wish. :)
[22:44:58] <selwyn> german settlement?
[22:46:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:52:53] <Qwnavery> Yes, Australia is a settlers country.
[22:53:44] <Qwnavery> We had a Gold Rush where free settlers from all over the world came here.
[22:54:18] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:54:26] <selwyn> oh i see
[22:54:29] <Qwnavery> Because it took >6 months to reach here, most never went back and established themselves in settlements.
[22:55:07] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:55:43] <Qwnavery> My family were free settlers, from Prussia and Northerneastern Europe (Scotland)
[22:58:59] <Qwnavery> Most people looking inwards see Australia as a "prison colony" which is partly true, but the prison colonies didn't expand inland apart from the main river inlets. It was the free settlers who came for a better life and went to find unclaimed land.
[22:59:58] <pjb> Qwnavery: well, how it turns to be a police state, it looks it's still a prison colony.
[23:01:37] <Qwnavery> pjb: I'm glad that NSW are rid of gladys and bruz (john barilaro), but that doesn't fix the laws inacted.
[23:02:45] <Qwnavery> Let's not talk politics though...
[23:03:08] <selwyn> i saw an australian lisp meeting advertised once
[23:03:21] <selwyn> and wondered how many people show up to that lol
[23:05:20] <Qwnavery> lol. That could change though.
[23:07:11] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[23:08:47] <Qwnavery> It almost needs too, the complexity (and might I add idiocity) of modern systems is getting out of hand.
[23:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:12:49] <Qwnavery> o crap.
[23:12:52] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[23:17:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:17:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:18:32] <pl> selwyn: a lot of Chernobyl related deaths/infirmity (especially fetal) were later tracked down to alcohol abuse of people coping 
[23:19:46] <selwyn> yeah kind of what i mean
[23:20:19] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:20:20] <selwyn> sad
[23:20:27] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[23:20:44] <Qwnavery> always keep backups.
[23:35:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:40:14] <contrapunctus> Qwnavery: for a second there I thought you meant "always keep backups of people"
[23:40:57] <contrapunctus> Qwnavery: is it complexity that's getting out of hand, though, or resilience?
[23:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[23:47:50] <contrapunctus> * lack of resilience
[23:47:58] <contrapunctus> (The two are not necessarily the same, and can even be at odds...right?)
[23:54:19] <Qwnavery> contrapunctus: interesting you mention that; I guess it goes hand-in-hand. Resilience implies resistance, and resistance in this case is complexity. Or percieved complexity in regards to the language lisp. Learning JS has very little resistance, you're even incentivised at universities and corporate hellholes to learn it. So in turn you need very little resilience to push up against that wall.
[23:54:22] <Qwnavery> The result is all these odd-shaped and unbalanced blocks being the foundation for everything you write, and a lot of them.
[23:55:52] <Qwnavery> In the instance of lisp, there's really no wider knowledge of it, no incentives, and a percieved complexity that most fresh-out-of-university students can't handle.
[23:56:13] <Qwnavery> All this, is resistance.
[23:58:45] <Qwnavery> It's a bit deeper than that though; if you've ever read ugh.pdf (The UNIX-Haters Handbook) it talks about an interesting phenonmenon. When people get into something like UNIX (or even linux) things like being able to "rm -r /" are just apart of the system. They will even defend these insane padagrims that they've grown into, not knowing better or refusing to critically evaluate them.
[23:59:54] <Qwnavery> Shouldn't you atleast have a confirmation box for something like "rm -r"? Such an idea would never occur to them.
