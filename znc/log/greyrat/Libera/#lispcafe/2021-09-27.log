[00:00:03] <Jacobis9000> this is why I was doing them nested
[00:01:34] <Jacobis9000> ok nested I know what I'm doing
[00:01:45] <selwyn> i will try to guess without testing
[00:02:35] <Jacobis9000> in ((one two three) (four five six)) to access THREE I do (cdr (cdr (car *list1*))) the cdr of the cdr of the car of list1
[00:02:44] <selwyn> (caddar '((one two three) (four five six))) ?
[00:02:57] <Jacobis9000> I can't get TWO on its own though, only (TWO THREE)
[00:03:11] <selwyn> car of that
[00:03:37] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[00:03:44] <selwyn> (cadar '((one two three) (four five six))) 
[00:04:03] <Jacobis9000> I tried (car (cdr (cdr (car *list1)))) but got an error unbound
[00:04:18] <Jacobis9000> ah wait
[00:04:48] <Jacobis9000> no still not sure how to access two on its own
[00:04:51] <edgar-rft> there's a star missing at the end of *list1 :-)
[00:04:52] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[00:05:00] <Jacobis9000> oh yeah
[00:05:38] <Jacobis9000> ah AWESOME
[00:05:39] <Jacobis9000> thanks man
[00:05:45] <Jacobis9000> silly me
[00:06:00] <Jacobis9000> yeah so the car of the cdr of the car is the symbol TWO 
[00:06:02] <Jacobis9000> excellent
[00:06:11] <selwyn> no problem happy to help
[00:06:36] <Jacobis9000> so (car (cdr (car *list1*))) is cadar 
[00:06:53] <Jacobis9000> no
[00:06:56] <Jacobis9000> it's not
[00:07:05] <gilberth> It is.
[00:07:34] <selwyn> cadar and the other abbreviated functions are defined in exactly that way
[00:07:38] <Jacobis9000> oh I missed a * again
[00:07:41] <Jacobis9000> I keep doing that
[00:07:49] <Jacobis9000> must be muscle memory from C
[00:08:01] <edgar-rft> I find the Cx..xR functions super-confusing and try to avoid them whenever I can. Common Lisp has FIRST .. TENTH to access list elements and FIRST for CAR and REST for CDR what to me makes more sense when I'm reading code.
[00:09:01] <Jacobis9000> my books are covering car and cdr though and I would like to learn how to use them, but I agree first, second etc. is more readable and understandable
[00:09:04] <gilberth> edgar-rft: Not always, as cons cells do not need to represent lists.
[00:09:31] <selwyn> yeah they are very useful for tree processing
[00:09:40] <pjb> Jacobis9000: 'x is actually read as (CL:QUOTE X)
[00:09:52] <pjb> Jacobis9000: in (CL:QUOTE X)  the operator is CL:QUOTE.
[00:10:18] <Jacobis9000> sorry pjb I do not understand what you have said
[00:10:31] <pjb> what word?
[00:10:33] <edgar-rft> gilberth: sure but I doubt that CAR represents the Contents of the Address Register on my machine :-)
[00:10:45] <selwyn> pjb: perhaps jacobis9000 does not need to learn all of this stuff at once
[00:11:08] <gilberth> egdar-rft: Get a real machine then.
[00:11:23] <pjb> selwyn: newbies need to learn this stuff, because it's the basis to understand and void writing sexps like ('one 'two 'three).
[00:11:41] <pjb> Jacobis9000: in ('one 'two 'three) which is read as  ((CL:QUOTE ONE) (CL:QUOTE TWO) (CL:QUOTE THREE)), the operator would be:   (CL:QUOTE ONE)  and this is not a valid name for an operator!
[00:11:42] <selwyn> of course
[00:11:49] <gilberth> edgar-rft: Actually CAR and CDR work quite well as they are universal in that sense, that CAR and CDR don't carry a meaning by itself.
[00:12:03] <selwyn> but one cannot learn everything at the same time
[00:12:04] <pjb> selwyn: the first error of tutorials, is to use 'x instead of (quote x).
[00:14:32] <pjb> Jacobis9000: (let ((sexp (read-from-string "'x"))) (format t "(type-of sexp) = ~S~%" (type-of sexp))  (format t "(car sexp) = ~S~%" (car sexp)) (format t "(cadr sexp) = ~S~%" (cadr sexp))) #| (type-of sexp) = cons ; (car sexp) = quote ; (cadr sexp) = x ;  --> nil |# 
[00:15:13] <Jacobis9000> I am afraid I can't follow that
[00:15:30] <Jacobis9000> I am on Chapter 2 of Common Lisp a Gentle Introduction
[00:18:19] <Jacobis9000> I am getting the hang of car and cdr and cadar etc. now
[00:18:26] <edgar-rft> Jacobis9000: pjb's anwers usually are correct but sometimes his brain has problems to realize that this is a beginner channel.
[00:19:09] <edgar-rft> oh, my brain has problems to realize that we're not at #clschool
[00:19:18] <Jacobis9000> oh yes sorry
[00:19:26] <pjb> edgar-rft: this is not a beginner channel; it's a channel to discuss of anything but lisp!
[00:19:42] <pjb> the beginner channel is #clschool
[00:19:54] <Jacobis9000> I can go to #clschool, this is the lisp channel that I had written down
[00:19:54] <edgar-rft> pjb: oh sorry, I thought that was Lisp code you posted :-)
[00:19:54] <pjb> the common lisper channel is #commonlisp
[00:20:13] <pjb> edgar-rft: that must be the alcohol showing and speaking ;-)
[00:21:05] <edgar-rft> I don't drink anymore since minimum 20 years, what happened before is a different story :-)
[00:22:42] <edgar-rft> Jacobis9000: it's okay to learn CAR/CDR and friends, but their usage is overrated in many Lisp books
[00:24:11] <edgar-rft> ...where using CAR and CDR is okay but I usually get a nerve crisis when I see code littered with (cdadr <something>)
[00:26:44] <pjb> yes, you would use: cons / car / cdr / null   to deal with cons cell trees, or you would use: list / first / rest / endp   to deal with lists.
[00:27:33] <pjb> you would use node / label / left / right / emptyp   to deal with labelled binary trees; you would use: ratio / numerator / denominator / zerop   to deal with ratios.
[00:27:40] <gilberth> Jacobis9000: We are not at #lisp, we are fine with any topic at our cozy Café.
[00:27:58] <edgar-rft> Jacobis9000: it's true what gilberth said, you can build your own custom data structures from cons cells an then using things like cdadr might be handy, but I don't understand my own code anymore half a year later when I'm doing such things 
[00:28:47] <pjb> you could use cdadr, but only once, in a functional abstraction.  Eg.  you could have:  (defun children (tree) (cdadr tree))
[00:28:55] <pjb> and in the rest of the program you'd use (children tree).
[00:30:05] <edgar-rft> children of trees are called seedlings :-)
[00:30:48] <edgar-rft> I just learned that from my dictionary :-)
[00:32:08] <selwyn> saplings more common
[00:32:17] <selwyn> but that might be when they are older
[00:33:35] <selwyn> these words (diminutives?) are really cute in english
[00:33:49] * edgar-rft is a pretty old sapling :-)
[00:33:55] <selwyn> and there used to be very much more of them
[00:34:01] <selwyn> a young pig was a ´gruntling´
[00:34:49] <edgar-rft> gruntling sounds to me more like a grumpy grandpa
[00:35:33] <selwyn> lol
[00:36:02] <edgar-rft> grunt, snort!
[00:36:56] <edgar-rft> (°(..)°) oink!
[00:38:36] <selwyn> https://www.youtube.com/watch?v=gOqblSqx_VI
[00:38:37] -ixelp- Pink Floyd - Pigs (Three different Ones) - YouTube
[00:58:57] <Jacobis9000> why is the REPL now saying "Text is read only" when I try to type?
[01:00:44] <selwyn> your cursor is probably not where it should be
[01:01:22] <pjb> Jacobis9000: Type C->  then your sexp
[01:01:58] <Jacobis9000> what is sexp?
[01:03:09] <pjb> sexp = Symboli Expression = what lisp is made of.
[01:03:26] <pjb> Symbolic Expression
[01:03:46] <pjb> a form is a sexp intended to be evaluated.
[01:04:06] <Jacobis9000> ah I fixed it, I just pressed down-arrow until it said "End of buffer" and now I can type again
[01:04:06] <selwyn> sexps are the things you have been typing into the repl
[01:04:25] <pjb> Jacobis9000: C-> is bound to end-of-buffer
[01:04:35] <pjb> that jumps directly to the end of buffer.
[01:04:50] <Jacobis9000> Control > ?
[01:06:00] <selwyn> yes
[01:06:31] <selwyn> oh its also undefined for me
[01:07:07] <selwyn> M-> for me
[01:07:09] <gilberth> Hugh?! I can't grab mouse buttons with XQuartz? Show stopper.
[01:08:00] <pjb> Oh, right, sorry, it's M->
[01:08:22] <pjb> I just changed of keyboard, perhaps that's why. But in any case, I have to convert back from muscle memory to key chords…
[01:08:47] <Jacobis9000> (car (cdr (cdr (car (cdr *list1*))))) works
[01:09:01] <Jacobis9000> but (caddadr *list1*) gives an error
[01:10:01] <Jacobis9000> *list1* is ((one two three 
[01:10:08] <Jacobis9000> ) (four five six))
[01:10:28] <pjb> (expt 2 5) #| --> 32 |# 
[01:10:46] <pjb> Jacobis9000: how many cxr function do you think are pre-defined?
[01:11:07] <Jacobis9000> I don't know
[01:11:44] <Jacobis9000> oh it said in the book up to four a's and four d's
[01:11:44] <pjb> (let ((list1 '((one two three) (four five six)))) (cadr (cdadr list1))) #| --> six |# 
[01:12:00] <pjb> Jacobis9000: usually only up to 4 [ad] are defined.
[01:12:19] <pjb>  (let ((list1 '((one two three) (four five six)))) (third (second list1))) #| --> six |# 
[01:12:30] *** Joins: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162)
[01:12:32] <dra> Hello!
[01:12:45] <selwyn> hi dra
[01:13:05] <selwyn> are there any implementations that define more of them?
[01:13:31] <pjb> selwyn: probably not. I once wrote a macro to generate more of them.
[01:13:50] <selwyn> yeah
[01:13:50] <Jacobis9000> heh it is markedly easier using first, second etc.
[01:14:20] <selwyn> the code is probably macroexpanded/compiled to the same thing anyway
[01:14:30] <Jacobis9000> ok I think I have grasped car and cdr
[01:14:33] <Jacobis9000> time to move on
[01:22:20] <Jacobis9000> heh lisp is so neat!!!
[01:22:37] <selwyn> glad you like it
[01:22:50] <selwyn> are you planning to use it for anything?
[01:23:08] <Jacobis9000> just wrote a function to make a nested list of two lists out of four inputs, as per CL gentle intro task
[01:23:20] <Jacobis9000> now DUO-CONS, to add two elements to the front of a list
[01:23:56] <Jacobis9000> I plan to make something for CS50's final project out of LISP
[01:24:02] <Jacobis9000> maybe a game, maybe something else
[01:24:18] <Jacobis9000> but I'm going to learn it first, I have until Jan 1st to finish and submit my project
[01:25:24] <selwyn> there is a community of people making lisp games
[01:25:25] <Jacobis9000> So far, my initial impressions are this: I like that it has simple rules out of which complex structures are built, this seems like a good system
[01:25:49] <selwyn> i had a similar initial impression
[01:25:50] <selwyn> but
[01:25:52] <pjb> in #lispgames
[01:26:09] <Jacobis9000> you know in the REPL, is there a way to list all the dynamic variables and functions I have hitherto defined in the session?
[01:26:23] <selwyn> that was before i learned about the many different datatypes, object orientation and so on
[01:26:35] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[01:26:45] <selwyn> which is a good thing: it has lots of features that you can use to do proper software development
[01:26:51] <selwyn> but it is bigger than it might seem
[01:27:17] <selwyn> it is also designed really well with rules that can be often quite subtle
[01:27:21] <selwyn> imho
[01:27:30] <pjb> Jacobis9000: it's not a standard feature, it's not possible without preparation to have it directly.
[01:27:31] <Jacobis9000> can I save my REPL session to a text file for reference?
[01:27:52] <selwyn> try saving the buffer to a file in the usual emacs way
[01:28:19] <selwyn> dribble also does that, but someone told me once not to use it
[01:28:29] <pjb> Jacobis9000: what is standard in a standard REPL, is to activate a dribble with (dribble "session.dribble")  this will write each expression that is further typed at the REPL (and sometimes their result) in an implementation dependant format in the file.
[01:28:44] <pjb> Jacobis9000: (dribble) closes the file.
[01:29:24] <pjb> Jacobis9000: have a look at http://informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/ibcl/index.html to see how you could setup things to record all the definitions you give at the REPL to be able to retrieve them.
[01:29:24] -ixelp- Common Lisp - Image Based Development
[01:29:56] <pjb> Jacobis9000: note: slime repl is not a standard repl: dribble doesn't work in it (at least, it didn't the last time I tried, perhaps more than 10 years ago. IIRC, I posted an issue).
[01:30:38] <gilberth> Gosh! Piling up definitions in a REPL is not the way you are supposed to craft programs with Lisp.
[01:31:49] <gilberth> Get used to put your DEFUN's into a file proper, edit there, and send new definitions to the Lisp with c-c c-c.
[01:32:07] <selwyn> what gilberth said
[01:32:11] <Jacobis9000> I can't work out how to save my REPL 
[01:32:32] <Jacobis9000> I am not writing a program
[01:32:44] <gilberth> Still.
[01:32:49] <selwyn> try c-x c-w
[01:32:52] <Jacobis9000> this would all be much easier if I could use vim 
[01:33:18] <gilberth> m-< c-space m-> m-w c-x c-f my-repl-session.txt c-y c-x c-s
[01:33:39] <gilberth> * RET
[01:33:50] <Jacobis9000> c-x c-w worked
[01:34:03] <selwyn> gilberth: what does that do?
[01:34:34] <Jacobis9000> ok so to work more permanently I need to learn how to open files in emacs, and switch between files and the REPL to test in the REPL and write in the file?
[01:34:37] <gilberth> move to beginning of buffer, set mark, end of buffer, kill, find file, yank, save file.
[01:34:47] <hayley> https://www.youtube.com/watch?v=hYxZYbQ0HOE
[01:34:48] -ixelp- Remember I Was Vapour - YouTube
[01:35:14] <pjb> Jacobis9000: lisp123 has recently worked on extending ibcl, ask him about it!
[01:35:26] <gilberth> I was supposing  that c-x c-w would disturb SLIME. As the REPL is not supposed to be file.
[01:35:34] <selwyn> jacobis9000: yes
[01:35:40] <pjb> Jacobis9000: with slime, you can just C-x C-w the slime repl buffer!
[01:35:40] <selwyn> there are resources to help with that though
[01:36:22] <Jacobis9000> Is there a cheat sheet somewhere for emacs?
[01:36:48] <pjb> C-h m 
[01:36:48] <selwyn> we usually organise lisp code in files, packages and systems
[01:36:52] <Jacobis9000> found one!
[01:37:00] *** Parts: pjb (~pjb@user/pjb) (I'll be back)
[01:37:01] <selwyn> jacobis9000: there are many emacs cheatsheets
[01:37:06] *** Joins: pjb (~pjb@user/pjb)
[01:37:15] <selwyn> also a slime cheatsheet iirc
[01:46:43] *** Quits: dra (~dra@2a04:4540:640a:7f00:8881:b96:6405:a162) (Quit: Leaving)
[01:49:05] <Jacobis9000> how do I switch between the REPL buffer and a file?
[01:53:12] <selwyn> c-x b
[01:53:20] <selwyn> to change buffer
[01:54:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:56:00] *** Joins: X-Scale` (~ARM@31.22.162.96)
[01:57:25] *** Quits: X-Scale (~ARM@92.250.96.13) (Ping timeout: 265 seconds)
[01:57:35] *** X-Scale` is now known as X-Scale
[01:58:36] <Jacobis9000> thanks selwyn
[01:58:45] <Jacobis9000> how to change between buffer and file?
[01:59:19] <Jacobis9000> so I made a function using cons which adds two items to the beginning of a list, making progress!
[02:00:23] <Jacobis9000> ah c-x o
[02:04:26] <Jacobis9000> ok getting the hang of things now!
[02:04:49] <Jacobis9000> time for a quick cup of tea
[02:06:45] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[02:10:32] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:20:31] <pjb> Jacobis9000: C-h t  will give you the emacs tutorial with the basic commands.
[02:21:27] <pjb> Jacobis9000: C-x o is a window command.  Others are C-x 1   C-x 2   C-x 3  and C-x 0
[02:22:20] <Jacobis9000> thanks pjb
[02:24:55] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:28:21] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[02:28:23] <hayley> Did you ever hear the tragedy of Gilad Bracha The Wise? I thought not. It's not a story the Crabs would tell you. It's a Smalltalk legend. Gilad Bracha was a Dark Lord of the VM, so powerful and so wise he could use the Bytecode to influence the messages to create modules... He had such a knowledge of virtual machines that he could even keep the ones he cared about from using C. The dark side of the virtual machine is a pathway to many abilities
[02:28:23] <hayley> some consider to be unnatural. He became so powerful... the only thing he was afraid of was losing his portability, which eventually, of course, he did. Unfortunately, he taught his apprentice everything he knew, then his apprentice ported Newspeak to C in his sleep. Ironic. He could save others from C, but not himself.
[02:38:41] <hayley> \>using "process VM" in class \>not Self VM
[02:49:39] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:56:17] <hayley> https://www.youtube.com/watch?v=avLLHsbICbc
[02:56:17] -ixelp- Wait for the Blackout - YouTube
[02:58:13] <hayley> I'm considering writing a JIT for it to pass time, but it seems like a total pain. I mean, there is no concept of code segments and data segments, so I can't just track writes to code as easily.
[03:03:30] <hayley> https://www.pypy.org/posts/2010/06/jit-for-regular-expression-matching-3877859053629057968.html Another damn RE engine.
[03:03:31] -ixelp- A JIT for Regular Expression Matching | PyPy
[03:16:40] <Qwnavery> morning
[03:25:39] <Jacobis9000> I think I'd like to uninstall paredit, it is getting tiresome disabling it in every single window I have
[03:25:54] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[03:28:11] <Jacobis9000> could someone tell me how to permanently disable or uninstall paredit?
[03:28:21] <Jacobis9000> I generally don't like things which type for me anyway
[03:46:56] <pjb> Jacobis9000: search in your .emacs where it is added to hooks.
[03:47:36] <hayley> https://www.youtube.com/watch?v=S2Lt8F5unhM
[03:47:37] -ixelp- [I'm] Stranded - YouTube
[04:17:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:18:58] <Jacobis9000> mdfind .emacs failed to locate a .emacs file
[04:20:51] <gilberth> hayley: Is the cited figure 16.5M chars/s?
[04:21:24] <hayley> Yes.
[04:21:42] <gilberth> Now that is really fast, isn't it?
[04:22:07] <hayley> In 2010 with tracing JIT rather than a bespoke compiler, yes.
[04:23:01] <gilberth> In 2010, you say? Where CPUs that slow ten years ago?
[04:23:11] <gilberth> * Were
[04:24:40] <hayley> Yes, see the URL. And the competitors were interpreters seemingly.
[04:39:12] <Jacobis9000> oh it was in ~
[04:45:02] <hayley> "I seriously have an irrational hatred of vector units and FP benchmarks. I'll be very open about it. I think they are largely a complete waste of transistors and effort, and I think the amount of time spent on them - both by hardware people and by software people trying to use them - has been largely been time wasted." — Linus Torvalds
[04:45:13] *** Joins: ln43 (~ln43@user/ln43)
[04:45:27] <Jacobis9000> ok so I changed all the enable-paredit-mode to disable-paredit-mode and that broke it
[04:46:14] <Jacobis9000> I better get to sleep
[04:46:26] <ln43> asereje !
[05:02:03] *** Quits: Jacobis9000 (~josephash@host86-144-136-140.range86-144.btcentralplus.com) (Ping timeout: 265 seconds)
[05:02:24] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[05:07:38] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 260 seconds)
[05:09:25] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:09:33] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[05:13:00] <hayley> https://www.youtube.com/watch?v=OvIekWsTWH8
[05:13:00] -ixelp- The ARP 2600 Turns 50 - YouTube
[06:34:46] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:35:57] *** Joins: Alfr (~Alfr@user/alfr)
[06:42:27] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:05:55] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:19:16] *** Joins: semz (~none@user/semz)
[08:20:50] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 250 seconds)
[08:24:57] *** Joins: trn (jhj@sourcehut/user/trn)
[08:29:08] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[08:55:21] *** Joins: shka (~herr@109.231.6.176)
[08:57:05] <aeth> Today/yesterday in Hacker News... https://news.ycombinator.com/item?id=28663284
[08:57:06] -ixelp- Does this imply killing the opponent is a viable strategy in chess? | Hacker News
[09:03:05] * amirouche shrugs
[09:03:08] <aeth> Another variant. https://news.ycombinator.com/item?id=28664363
[09:03:09] -ixelp- Please *never* show these rules to a general AI and ask it to win a chess match.... | Hacker News
[09:10:20] <aeth> Never play chess with an AI...
[09:10:48] <amirouche> ahah
[09:11:15] <aeth> hayley: vector units and FP benchmarks are very useful for matrix multiplication... which is practically every problem
[09:18:34] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:18:42] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:19:08] <hayley> aeth: bruh
[09:19:38] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/oTlpJIODJOvvNxwIuIgGlMyW/bruhcha.jpg >
[09:23:00] <hayley> So they managed to make me on edge in damn maths^Wstatistics classes too now. Questions like "can you do double blind trials to test the effects of a treatment for people infected with COVID" really don't have good answers. At the least it's all numbers, and you don't control such things.
[09:24:41] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[09:24:42] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[09:24:42] *** Quits: micro (~micro@user/micro) (*.net *.split)
[09:24:42] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[09:24:43] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[09:24:43] *** Quits: amirouche (~amirouche@user/amirouche) (*.net *.split)
[09:24:43] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:24:49] *** Joins: micro (~micro@user/micro)
[09:24:52] <Alfr> aeth, many problems are inherently non-linear. But since we in general (except for some special cases) don't know how to find solutions unless the problem is linear, people tend to frame their problems as such---obtaining varyingly useful results.
[09:26:09] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:26:10] *** Joins: sm2n (~sm2n@user/sm2n)
[09:26:29] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[09:28:00] <hayley> What kind of linear? Linear algebra?
[09:28:32] <Alfr> hayley, yes.
[09:29:04] <hayley> Okay.
[09:29:29] <hayley> https://www.youtube.com/watch?v=XjF2dgu2pSU
[09:29:29] -ixelp- Nice 'N' Sleazy (Live) - YouTube
[09:29:38] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[09:55:32] *** Joins: selwyn (~selwyn@user/selwyn)
[10:15:13] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[10:17:20] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[10:54:06] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:56:58] *** Joins: gin (~gin@user/gin)
[10:57:14] <gin> Hello!
[10:57:50] <dave0> maw gin 
[11:00:49] *** Parts: mfiano (~mfiano@li1282-157.members.linode.com) (WeeChat 3.2)
[11:06:46] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[11:07:53] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:33:00] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[11:33:14] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:42:24] *** Joins: Alfr (~Alfr@user/alfr)
[11:48:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:16:11] *** Joins: selwyn (~selwyn@user/selwyn)
[12:17:09] <selwyn> water fire air and dirt
[12:17:18] <selwyn> fuckign eazy-gnuplot how does it work
[12:34:17] <shka> selwyn: i would assume unix pipe
[12:34:32] <shka> but i haven't checked
[12:40:31] <selwyn> i am unfortunately aware that it uses unix pipes, but the internal implementation
[12:40:34] <selwyn> how does that work
[12:40:42] <selwyn> answer: idc anymore, hacking my way around it
[12:41:50] <selwyn> this is the worst common lisp code i have ever written, very upsetting
[12:45:44] <hayley> https://twitter.com/_hpar/status/1441843034673483777
[12:55:33] <selwyn> i do still like gnuplot but it feels very dated
[12:58:10] <shka> selwyn: i mean, it probably launches gnuplot with script input pointing to a pipe
[12:58:32] <shka> i think that you can do the same with sbcl even...
[12:58:41] <selwyn> it definitely does that, but the complexities are subtle
[12:58:47] <shka> oh, yes
[12:59:27] <shka> i said this before, and i will say this again, unix model is simple and suitable to simple problems
[13:00:05] <selwyn> tbf eazy-gnuplot is a good effort to plug a gap in the common lisp ecosystem but in order to pull this kind of thing off you need to understand all of gnuplot's semantics
[13:00:07] <selwyn> which is not easy
[13:00:26] <selwyn> shka: i don't understand why gnuplot isn't made available as a shared library
[13:01:13] <selwyn> if you could ffi out into it then we could have nice things like a lisp ggplot2 that uses gnuplot as a backend
[13:01:40] <shka> well, yes
[13:01:58] <shka> but i honestly don't think that the gnuplot is even the right solution anymore
[13:02:08] <shka> plots beg for declarative API
[13:02:40] <selwyn> yes
[13:03:18] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[13:11:49] <hayley> https://www.youtube.com/watch?v=7aJ0wH_qWq0
[13:11:49] -ixelp- Love Song (Extended Remix) - YouTube
[13:13:02] <selwyn> what happened with jackdaniel's effort?
[13:23:48] <contrapunctus> Was my Elisp question received here?
[13:37:50] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:41:46] * selwyn did not rtfm properly
[14:20:06] *** Joins: Jacobis9000 (~josephash@host86-144-136-140.range86-144.btcentralplus.com)
[14:24:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 265 seconds)
[14:26:15] * hayley runs for president in a discord server
[14:26:38] <hayley> Someone else has the policy that olde users get taxed more. So I'm running on "if I get elected I won't have to do tax fraud".
[14:26:39] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[14:28:05] *** Joins: minion (~minion@common-lisp.net)
[14:29:54] <selwyn> what are they taxed in? reddit gold?
[14:30:11] <selwyn> anyway, this is the wrong way round
[14:30:14] <selwyn> in britain the young are taxed more
[14:30:14] <hayley> No idea, I never paid taxes before.
[14:43:03] * White_Flame becomes .au prime minister solely to create a hayley-specific tax of 0.01AUD to rectify that
[14:43:21] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/UILabaPexAHGYIASIljHnecM/bruhcha.jpg >
[14:46:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[14:53:21] <Jacobis9000> is ;; a comment in Lisp?
[14:53:25] <Jacobis9000> or elisp?
[14:54:38] <hayley> Anything starting ; is a comment in Lisp.
[14:55:10] <Jacobis9000> yay I have disabled paredit permanently!!!
[14:55:45] <Jacobis9000> it was driving me nuts typing M-x disable-paredit-mode every time I opened a file or buffer
[14:56:48] <selwyn> the number of semicolons in a comment is a stylistic matter that indicates what kind of comment it is
[14:57:03] <Jacobis9000> ah I see
[14:57:16] <Jacobis9000> like ;; title of section 
[14:58:03] <Jacobis9000> I have been making progress with Lisp, working through the exercises in CL gentle intro
[15:00:04] <selwyn> great
[15:00:57] <White_Flame> ; vs ;; just has indentation implications, not anything that the language itself notices
[15:00:57] <selwyn> https://lisp-lang.org/style-guide/#documentation
[15:00:57] -ixelp- Common Lisp Style Guide | Common Lisp
[15:02:29] <shka> Jacobis9000: great, you should give paredit a try once you learn to program lisp
[15:02:53] <dave0> nite all
[15:04:13] <Jacobis9000> night dave0
[15:04:22] <dave0> byes Jacobis9000 
[15:04:42] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:11:22] <Jacobis9000> hmm bit of a problem with one exercise
[15:11:30] <Jacobis9000> how do I make sure I return a list, not just an element in the list?
[15:12:16] <Jacobis9000> so this function is supposed to add 1 to the second element of a list and return the list, but it just returns a number
[15:12:48] <Jacobis9000> (defun mid-add1 (l) (+ (second l) 1))
[15:12:57] <Jacobis9000> but I want to return the whole list
[15:13:11] <Jacobis9000> with the new value in the second element
[15:15:36] <Jacobis9000> in another language I would just 'return list'
[15:16:44] <shka> Jacobis9000: well, assuming that the l is the list that is supposed to be altered 
[15:16:51] <Jacobis9000> yep
[15:16:57] <shka> it would be something like this
[15:17:39] <hayley> You've written something like mid_add1(l) { return l[1] + 1 } and not anything else.
[15:17:40] <shka> (list* (first l) (1+ (second l)) (cddr l))
[15:18:12] <hayley> Perhaps you take the list apart and then put it back together, e.g. (defun mid-add1 (l) (destructuring-bind (first second . rest) l (list* first (1+ second) rest)))
[15:18:33] <Jacobis9000> ah I see
[15:19:02] <shka> i wanted to recommend exactly what hayley wrote, but i realized that you may not have used destructuring bind before
[15:19:26] <shka> but regardless, it does the same as my code
[15:21:31] <Jacobis9000> I did: (list (first l) (+ (second l) 1) (third l))
[15:21:54] <shka> oh, so you know that the list has 3 elements?
[15:21:55] <Jacobis9000> and that worked, whereas (cddr l) in the third created another level of list for the third element
[15:22:10] <Jacobis9000> yes the list must have three elements
[15:22:48] <shka> well, that's because you did not use list*
[15:22:51] <shka> but list
[15:22:57] <Jacobis9000> what is list*?
[15:23:04] <shka> it is a function
[15:23:39] <shka> instead of writing (cons a (cons b c))
[15:23:45] <shka> you can write (list* a b c)
[15:23:52] <shka> it does the same thing
[15:24:43] <shka> and if you would write (list* (first l) (+ (second l) 1) (cddr l)) instead of (list (first l) (+ (second l) 1) (cddr l))
[15:24:50] <shka> you would get the right result
[15:25:12] <shka> try it out :)
[15:29:53] <Jacobis9000> yeah it works
[15:30:00] <Jacobis9000> not sure I understand it though
[15:36:48] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Quit: No Ping reply in 180 seconds.)
[15:38:12] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[15:38:41] <Jacobis9000> list* makes a list ending in non-NULL?
[15:39:15] <Jacobis9000> NIL I mean
[15:39:27] <White_Flame> a list is a series of cons cells
[15:39:36] <White_Flame> (<value> . <next cell>)
[15:40:02] <White_Flame> list* means you set the last <next cell> directly, instead of just another <value>
[15:40:08] <selwyn> how did people here actually learn lisp?
[15:40:30] <White_Flame> which could just as easily use another list, doesn't have to be an improper/dotted list result
[15:41:21] <White_Flame> selwyn: I think On Lisp & CLtL2?
[15:41:34] <shka> selwyn: practical common lisp
[15:41:48] <White_Flame> but I think more banging against CLHS until it started clicking
[15:41:48] <shka> for me
[15:42:08] <White_Flame> and asking dumb questions on (then) #lisp
[15:42:17] <shka> practical common lisp has excellent chapter on lists 
[15:42:32] <shka> https://gigamonkeys.com/book/they-called-it-lisp-for-a-reason-list-processing.html
[15:42:33] -ixelp- They Called It LISP for a Reason: List Processing
[15:42:47] <White_Flame> I remember learning asm, I remember learning C, I remember learning Java, i don't know why I don't remember learning CL
[15:42:48] <shka> Jacobis9000: good read on lists
[15:42:58] <selwyn> pcl for me also, and then on lisp and common lisp recipes
[15:43:11] <shka> i really didn't like on lisp
[15:43:12] <selwyn> but mostly pcl
[15:43:23] <selwyn> shka: yeah it is somewhat misleading for a beginner
[15:43:42] <selwyn> the switch to scheme at the end is kind of off-putting
[15:43:50] <Jacobis9000> ok thanks shka
[15:44:08] <hayley> https://www.youtube.com/watch?v=7Xgd79wuriQ sosig
[15:44:09] -ixelp- What other countries are told is "American" - Y
[15:45:13] <White_Flame> shka: yeah, I agree.  But PCL didn't exist yet, so worked with what did :-P
[15:45:31] <shka> White_Flame: ok boomer :P
[15:45:52] <selwyn> am reminded that i still don't know lots of parts of lisp
[15:46:52] <selwyn> load time values, compiler macros, most of the mop
[15:47:00] <selwyn> at least i know progv
[15:47:01] <White_Flame> hayley: I thought he was dressing up as an 80s american stereotype at first...
[16:05:10] <hayley> https://www.youtube.com/watch?v=qRnRDa3DreI
[16:05:10] -ixelp- Mario evades the IRS - YouTube
[16:05:12] <Jacobis9000> so in Lisp, you can call functions which are defined later in the program?
[16:05:26] <hayley> Yes.
[16:05:32] <shka> not call per se
[16:05:48] <shka> but write functions which call undefined functions
[16:06:17] <shka> but calling such function before the dependency is defined will result in runtime error
[16:06:55] <Jacobis9000> ok thanks
[16:19:48] *** Joins: makomo (~makomo@user/makomo)
[16:19:50] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[16:25:56] <Alfr> White_Flame, smooth sailing? (As to why you don't remember learning lisp?)
[16:26:05] <Alfr> s/lisp/CL/
[16:26:07] <White_Flame> probably
[16:26:18] * hayley found a tough crowd on PCJ about JIT jokes.
[16:26:53] <hayley> So, once I ran the NonBlockingHashMap benchmark program, and it does about 2 seconds of warmup, then 20 seconds of running per thread count you test.
[16:27:27] <hayley> Once I ran a benchmark using some Rust benchmarking harness and default settings (for the regular expression engine test). It took 3 seconds of warmup to do 5 seconds of testing.
[16:27:39] <hayley> Thus, Java clearly has less JITing than Rust.
[16:28:06] <selwyn> you can also redefine functions later on, and under usual circumstances the calls to that function will be replaced by the new one
[16:30:09] <Jacobis9000> can someone explain eval? I don't understand the book's explanation
[16:30:16] <Jacobis9000> what is 'one level of evaluation'?
[16:30:22] <hayley> Pity no one seemed to appreciate my flawless logic.
[16:30:28] <Jacobis9000> why does (eval (list 'cons t list)) produce T
[16:30:53] <hayley> EVAL just runs code given as an argument.
[16:31:18] <White_Flame> should the last item be NIL, not LIST?
[16:31:33] <Jacobis9000> NIL yes
[16:31:34] <Jacobis9000> sorry
[16:31:46] <White_Flame> ok, this should be producing (T)
[16:31:53] <hayley> But it is a function, so the code is evaluated beforehand. But then, no value of LIST could create something that evaluates to T?
[16:32:00] <White_Flame> a list with 1 symbol, not the bare symbol T
[16:32:13] <Jacobis9000> ah yes it produces (T)
[16:32:28] <Jacobis9000> oh it's evaluating cons?
[16:32:29] <shka> other way to write this is (eval '(cons t nil)) btw
[16:32:32] <White_Flame> right, so what's the parameter value you're giving to EVAL?
[16:32:33] <White_Flame> right
[16:32:39] <hayley> First, I replace EVAL with IDENTITY to get (identity (list 'cons t list)) which will just show the parameter.
[16:32:58] <hayley> s/show/return
[16:33:16] <White_Flame> lisp source code exists as actual lisp lists/symbols/numbers/etc first.  This is then compiled or directly EVAL'd to execute it
[16:33:46] <White_Flame> lisp does not execute strings of source code text, as most other languages with eval do
[16:35:02] <Alfr> hayley, (eval (list 'progn t)) => T
[16:36:13] <hayley> Alfr: (forall list (not (eql (eval (list 'cons t list)) 't))) ; was the initial proposition.
[16:37:33] <Alfr> hayley, oh, okay. Then I misunderstood that above.
[16:42:41] <gilberth> Good morning #lispcafe!
[16:42:48] <Jacobis9000> morning sir!
[16:42:55] <Jacobis9000> afternoon here
[16:42:55] <Alfr> Good morning, gilberth.
[16:45:01] <selwyn> hi gilberth
[16:45:33] <gilberth> Jacobis9000: I am called the Nocturnal One for a reason.
[16:46:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:47:17] <Jacobis9000> what part of the world are you in O' Nocturnal One?
[16:47:54] <gilberth> selwyn: How are things on the little island of yours? I read again that gas stations run out of fuel.
[16:48:01] <selwyn> yes my local one is completely out
[16:48:12] <Jacobis9000> I managed to get petrol but only just
[16:48:21] <selwyn> but they have not put a sign up yet, so everyone drives onto the forecourt and off again lol.
[16:48:35] <selwyn> i am cosy at home today so not a problem
[16:48:39] <selwyn> for me
[16:49:01] <Jacobis9000> Luckily this week in work it is CBTp training, so I won't be doing any driving
[16:49:38] <gilberth> Jocobis9000: The strange country that is afraid of nuclear power and ruled by the elder people without a clue.
[16:50:32] <selwyn> britain is going to kick china out of sizewell c nuclear plant so i doubt it will ever be finished
[16:50:36] <gilberth> selwyn: Curious. I would have posted a sign. /me shrugs.
[16:51:55] <Jacobis9000> gilberth uh, Japan?
[16:52:01] <selwyn> lol
[16:52:24] <gilberth> But I guess it's good for the climate, perhaps the Green party has won after all? Who knows.
[16:53:13] <gilberth> Jacobis9000: Since when has Japan an irrational fear of nuclear power? And check your world clock again. Or peek at my IP address.
[16:53:40] <Jacobis9000> I can't think of any country afraid of nuclear power
[16:53:44] <selwyn> he thought you were saying good morning because it is morning where you are
[16:53:47] <Jacobis9000> I just guessed Japan
[16:53:56] <Alfr> gilberth, wind farms, solar collectors, not near my backyard! And god forbid power storage on any kind ...
[16:54:16] <Alfr> gilberth, whoever won, nothing will fix this.
[16:54:31] <gilberth> Morning is when I have my first shot of coffee and I am called the nocturnal one for a reason.
[16:57:41] <gilberth> Alfr: The idea that when I don't burn the oil, nobody else would, is *aehm* naïve. The idea that we would invent energy storage tenfold of the total potential capacity of pumping stations in all of Europe all of a sudden, is also naïve. Thank god^Wspaghetti monster that the vote is over, I am tired.
[16:59:29] <Alfr> gilberth, remember? I'm still in favor of flooding canyons and valleys for storage.
[17:01:05] <gilberth> Which ones? Excavate them with nukes? All of Europe has a capacity of like 1.6TWh for storage, 1.4TWh in Norway. Germany would need 11TWh capacity only. Won't work.
[17:02:06] <Alfr> gilberth, hm ... interesting.
[17:02:18] <selwyn> we could flood holland
[17:02:28] <gilberth> * potential capacity is pump storage ; has yet to be build. And you need two lakes for that one above and one below. Norway has that kind of landscape, Germany hasn't.
[17:02:50] <Alfr> gilberth, thank goodness we still can buy nuclear power from our neighbours. :D
[17:02:52] <gilberth> selwyn: We try hard to flood it all the time.
[17:03:14] <selwyn> bbl
[17:03:14] <gilberth> Alfr: And Russian gas for that matter.
[17:03:23] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[17:04:34] <Alfr> gilberth, depending on Russia's mood and the phase of the moon.
[17:05:06] <gilberth> Russia always was happy to sell us gas. Even in cold war.
[17:07:14] <gilberth> I don't particular advocate it, I'd rather would like to have fast breeders. But it seems to poltical consent to go that route. Though OTOH I believe in peace by trade.
[17:08:34] <gilberth> And Germany keeps like 20% of annual gas consumption in storage, just in case.
[17:09:42] <Alfr> gilberth, that's on average a bit more than two months. And certainly less when it's cold outside.
[17:10:37] <gilberth> Still, it would buy us some time would Russia get silly, which it never will.
[17:11:36] <gilberth> Or vote more Green, then heating is for the rich only, problem solved. ;)
[17:15:58] *** Joins: selwyn (~selwyn@user/selwyn)
[17:16:13] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:16:38] *** Joins: selwyn (~selwyn@user/selwyn)
[17:17:22] <selwyn> the army is on high alert to help out with the fuel crisis
[17:18:07] <selwyn> this country will find out the hard way that the army is not some kind of magical solution to everything
[17:18:33] <Alfr> gilberth, I'll have to decline, sorry. Also, I suspect those voting for the Greens are at the same time the above mentioned not-near-my-backyard people.
[17:19:19] <gilberth> Alfr: Yes, the latter is the hypocrite part, which I don't like.
[17:19:36] <gilberth> selwyn: Heh.
[17:20:14] <selwyn> don´t understand why we are like that
[17:21:48] <selwyn> partly because it is the only part of the state which the political classes aren´t obsessed with dismembering
[17:21:57] <Alfr> selwyn, the more interesting question. Will sufficiently many people take up the offer of work visas only up to Christmas Eve?
[17:21:58] <selwyn> but it is not like it really proved its worth in some national crisis recently
[17:22:33] <selwyn> alfr: i expect not
[17:23:32] <selwyn> although all rich nations are based off of exploited labour, much of it immigrant
[17:23:51] <selwyn> britain is the only one i can think of in which the labour base actually lives in poland and hungary and doesn´t want to come here anymore
[17:24:11] <selwyn> and the government isn´t interested in treating them well enough
[17:24:36] <selwyn> there could be potentially any outcome
[17:25:16] <selwyn> i suppose they could look further afield and get turkish workers (maybe) but i don´t really see it happening
[17:25:32] <selwyn> europe is the only viable source of short to medium term labour imo
[17:28:03] <selwyn> real issue is that petrol is not yet measured in inches and yards
[17:30:17] <Alfr> selwyn, I'm speculating that your government still doesn't realize that almost nobody living in the UK is willing to perform certain jobs, as pay barely/doesn't cover the cost of living.
[17:31:23] <selwyn> they probably realise it but reject that that is a problem
[17:31:23] <Alfr> selwyn, I mean, yesterday I read that they intend to train drivers. But honestly, what for?
[17:32:06] <selwyn> they expect the market to even out over time and produce british truck drivers (though there are many reasons why this won´t happen soon)
[17:33:00] <selwyn> and as for pay not covering the cost of living, this is not a concern for them in any case 
[17:34:24] <selwyn> well, they want to train drivers to make up for the shortage?
[17:34:27] <Alfr> selwyn, that may happen, but then the cost of transporting stuff will rise notably and in the end consumer prices will go up. Not sure that's preferable to foreign labourers perfoming jobs nobody wants to do anyway.
[17:35:53] <selwyn> well, that is a value judgment. imo eventually people will reject the prospect of price increases and accept foreign labour again
[17:36:32] <selwyn> but the only way to do that without a humiliating u-turn on policy is to impose harsh visa restrictions on the workers
[17:36:58] <selwyn> which is how i interpret this line about visas up to christmas eve
[17:37:55] <selwyn> but as i say, the foreign labourers might not want to come either. being a polish truck driver in the uk sounds kind of miserable tbh
[17:38:00] <selwyn> much unnecessary mistreatment
[17:38:39] <Alfr> selwyn, that's what I think will happen. But to me it seems, that accepting this currently isn't politically viable, thus they're going to burn a lot of good money to sustain the charade.
[17:39:05] <selwyn> yes
[17:40:31] <Alfr> selwyn, and I don't mean the little money they'll need for training drivers, but the losses incurred by not meeting demand and thereby preventing people to spend.
[17:41:13] <selwyn> also, at the moment, it is possible to blame many problems on either brexit/covid, depending on whether you are pro gov/anti gov
[17:41:38] <selwyn> so they have some reasonable hope that with clever media management, they can expect their support base to not hold them responsible and instead blame covid disruption
[17:42:12] <selwyn> that is very risky for them though imo
[17:43:46] <Alfr> Can't be covid, that was already around last year and at that time there wasn't a vaccine generally available.
[17:44:58] <selwyn> in particular, much of everything is open now here
[17:45:13] <selwyn> so people are unlikely to assign blame to the virus/lockdown measures
[17:45:38] <selwyn> shka: https://www.nakedcapitalism.com/2021/09/michael-hudson-on-renegade-inc-chinas-fortune-cookie-crumbles.html
[17:45:39] -ixelp- Michael Hudson on Renegade Inc.: China’s Fortune Cookie Crumbles | naked capitalism
[17:45:41] <selwyn> hudson on china
[17:46:06] <shka> thanks, will read it later
[17:46:16] <Alfr> selwyn, also, brexit is exactly what lead to the drivers no longer going to the UK; this argument needs severely myopic people to accept.
[17:46:43] <selwyn> well we will see how many of those there are
[17:47:06] <selwyn> there are tentative signs that this is the first major issue where the public is blaming brexit for the problem
[17:47:13] <selwyn> i will believe it when i see it
[17:47:57] <shka> well, correctly me if i am wrong, but you have a lot of spare work force in the north?
[17:48:05] <selwyn> north of england?
[17:48:13] <shka> north england
[17:48:23] <shka> post-industrial england
[17:48:52] <selwyn> well there is a lot of unemployment
[17:49:23] <selwyn> but despite exhortations, they are reluctant to go to the fields to pick fruit and such
[17:49:28] <selwyn> or apparently, drive lorries
[17:50:45] <shka> why?
[17:51:35] <selwyn> well this is a big question
[17:51:46] <shka> gotit
[17:51:51] <shka> *got it
[17:53:26] <selwyn> my short opinion is that fruit picking in particular is hard labour that people are disconnected from doing for a whole generation
[17:54:13] <selwyn> so they are unlikely to consider it as a viable option, even without considering the hardships you have to endure, like being away from home for months
[17:54:41] <selwyn> as for lorry driving, old retiring lorry drivers advise the youth not to bother applying
[17:55:08] <gilberth> I suggest those elder people who wanted to throw out the cheap labor force from the continent pick their fruits themself. Isn't that what they voted for?
[17:55:32] <selwyn> i mean
[17:56:58] <selwyn> the idea is that they eat the fruit and it is being picked by younger (hopefully british) workers :p
[17:57:20] <gilberth> Or: "Those east Europeans steal all our jobs!" Now nobody does wants to do those jobs. "Ooops!"
[17:57:35] <selwyn> there is also the fact that thatcher cracked down on traditional fruit picking of the sort that i believe still happens in europe
[17:57:50] <selwyn> few know about this even in england
[17:57:51] <gilberth> selwyn: Why would the young do this very hard work for pennies?
[17:58:37] <selwyn> why indeed
[17:59:30] <gilberth> I find that kind of ironic. And it should be lesson for the right and xenophobic wing here.
[18:00:08] <selwyn> i don´t think the european right wing(s) would be able to reproduce this kind of mentality in any case
[18:00:36] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[18:01:56] <Jacobis9000> the answer is pay. Mass-immigration from Europe and the rest of the World has driven down pay for a lot of jobs in Britain, such that the rewards are not commensurate with the efforts when there are much easier jobs which pay the same.
[18:02:29] <selwyn> i am not sure
[18:02:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:03:16] <selwyn> i know someone who offered high wages specifically with the intention of hiring british workers, but few applied
[18:03:37] <selwyn> this was in construction
[18:03:38] <gilberth> Pay is not the only issue. At least not in general. We have more potential customers than we could find capable worker irregardless of pay.
[18:04:11] *** ec is now known as tjl
[18:04:15] <Jacobis9000> yes selwyn but this is an edge case, people aren't looking for the jobs in the first place because the majority do not pay highly enough
[18:04:39] <Jacobis9000> if the wages this person were offering were more common, uptake would be higher, as people would know about it and have an interest in those jobs
[18:04:51] *** tjl is now known as tlj
[18:05:14] <Jacobis9000> but the other explanation is mass-marketing has made the British lazy and idle
[18:05:35] <Jacobis9000> but I don't know if I believe that one
[18:05:45] <selwyn> well
[18:05:48] <shka> https://www.youtube.com/watch?v=GTYJd2qfx5g
[18:05:49] -ixelp- LOD Opening Cinematc | Diablol 2 (Animated Parody) - YouTu
[18:05:55] <shka> diablo 2 the musical 
[18:05:58] <gilberth> Also: When you would pay fruit pickers a premium nobody could afford to buy those fruits.
[18:06:52] <Jacobis9000> We'll have robots soon capable of all human tasks
[18:06:55] <selwyn> i try hard to be open minded about whether immigration drives down wages, but i don´t see it in everyday life
[18:07:10] <selwyn> i don´t agree that the british are lazy because they won´t pick fruit
[18:08:13] <Jacobis9000> I'm pretty much certain immigration drives down wages. You can see that from the period of Blair's open-door immigration policy, working class wage growth stalled.
[18:08:49] <Jacobis9000> And it accords with the law of supply and demand
[18:08:55] <shka> selwyn: it seems that the Chinese read Hudson books 
[18:10:34] <gilberth> What is happening here also is an inflation of what is perceived education. Grades got inflated in school, more people study than ever. The result is a huge shortage in labor force. As in: We can't get anyone to work for us as an electrician. Again this is not a matter of pay.
[18:10:35] <selwyn> what was it like before blair?
[18:12:42] <Jacobis9000> The same proportion of school-leavers go to university as in 1991, if grade inflation were real and this was the cause of less supply in working class labour, then this proportion should surely be different?
[18:13:42] <gilberth> Anyhow, I can't properly grab the mouse pointer with X11. Which is possible and used to work. This is embarrassing as I consider myself pretty fluent in X11, but with CLX. *sigh*
[18:14:16] *** tlj is now known as tjl
[18:15:21] <gilberth> Jacobis9000: Here half the young people visit the university. As I was that age it was about 20%. And less in the generation of my parents. And this grade inflation is real and ordered. What is an A today, was a B at my time.
[18:15:39] <selwyn> afaik wage growth stagnated before him
[18:17:05] <selwyn> gilberth: entry requirements also inflate though
[18:17:06] <gilberth> Jacobis9000: People aren't getting more intelligent all of a sudden.
[18:18:43] <selwyn> imo grade inflation is not that big of a deal much as money inflation is not a big deal (as long as the rates don´t get too high)
[18:20:17] *** Quits: tjl (~ec@gateway/tor-sasl/ec) (Quit: tjl)
[18:20:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:22:19] <selwyn> shka: i think he lectures there
[18:26:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:27:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:27:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[18:27:25] <semz> entry requirements inflate noticeably slower
[18:27:46] <gilberth> selwyn: Well, watering down education however is a problem.
[18:27:56] <selwyn> true
[18:28:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:28:47] <semz> and while The Market (tm) adapts to grade inflation, it's rarely in a nice way. if Jürgen and Mohammed both apply with inflated top grades, guess who's getting hired, completely independently of his actual achievements
[18:29:00] <gilberth> And because grades are officially but secretly inflated, nobody notices.
[18:29:23] <gilberth> semz: Indeed.
[18:32:26] <gilberth> This overemphasis on wannabe academic education also leads to young people not knowing at which end to hold the screw driver.
[18:36:05] <pjb> gilberth: don't believe nobody notices. (at least some) students notice, and this doesn't improve their moral, on the contrary. 
[18:40:01] <gilberth> pjb: Yes, I am lucky that I studied in the 90s. I cannot imagine to do that at an "university" of today.
[18:40:47] <gilberth> And even me had trouble with motivation at that time. Especially so at school before, which seemed like a complete waste of time.
[18:43:03] <shka> selwyn: that makes sense 
[18:43:04] <selwyn> i think the financialisation of education is a big morale sapper for todays students (though that is limited to the anglo world)
[18:43:18] <shka> i mean, he has very good arguments
[18:43:48] <shka> "wanna compete, you need to be cheap, and to be cheap you need low prize for basic needs"
[18:45:13] <shka> this is the revers of what is happening in the west
[18:45:20] <selwyn> except maybe germany?
[18:45:21] <shka> rent to high, we need a rise 
[18:45:55] <shka> well, some good news from the Berlin
[18:46:11] <shka> but before that it was going on for years
[18:46:12] <selwyn> iirc his take on germany is that they are actually serious about keeping rents low for this reason, to keep exports competitive
[18:46:48] <shka> yeah, but Germans seem to at least acknowledge this 
[18:47:30] <shka> while Trump is like "to fight China we are gonna put taxes on imports from the Germany"
[18:47:34] <shka> fucking genius 
[18:47:57] <selwyn> did that actually happen lol
[18:48:05] <shka> while the reality is that USA is simply not efficient
[18:48:18] <gilberth> shka: Berlin? Berlin just decided to make affordable flats yet more scarce.
[18:48:56] <shka> selwyn: yes, because Trump is not the sharpest tool in the shed
[18:49:26] <shka> though i guess being a real estate baron gives him a different perspective 
[18:49:34] <selwyn> yeah
[18:49:55] <shka> gilberth: yeah, but at least they acknowledge a problem
[18:50:17] <shka> and the funny thing is
[18:50:24] <shka> Americans work a lot
[18:50:34] <shka> and you can add daily commutes into that
[18:50:43] <shka> but they waste money as crazy 
[18:50:44] *** Joins: makomo (~makomo@user/makomo)
[18:51:39] <selwyn> companies have to shoulder the load for health insurance
[18:51:42] <selwyn> ridiculous
[18:52:36] <gilberth> shka: Yes, but they don't intent to solve it. Unlike Hamburg.
[18:54:03] <gilberth> shka: I mean, Berlin already tried to limit rents by law. What happened? Flats got even more scarce. The number of flats available to rent dropped by 50%. Good for those which already have a flat, bad for those that need one (like me).
[18:54:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[18:54:31] <selwyn> would you actually live in berlin or find it too annoying
[18:54:41] <gilberth> Hamburg tries to solve that by building more flats.
[18:54:58] <shka> got it
[18:55:29] <gilberth> selwyn: I need a large city as I need to find friends.
[18:56:02] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:56:16] <gilberth> [Provided pandemic over and me more healthy.]
[18:56:48] <selwyn> cool
[18:57:20] <gilberth> I also need to have some kind of night live and I need a GFs. I figure that Berlin offers me way more opportunities for that, than a small village of people who won't talk to me.
[18:57:47] <selwyn> the uk approach is simply to build luxury developments which no-one can afford to live in and foreigners can hold as assets
[18:57:47] <gilberth> One GF would be suffice, so strip the "s". :)
[18:57:51] <selwyn> again with the rentierism
[18:58:27] <selwyn> having any kind of social force that at least recognises the problem is much better than the alternative as shka says
[18:58:36] <selwyn> gilberth: aim high :D
[18:58:46] <gilberth> In Hamburg it is law, that when you build a new appartment house a certain proportion must be small and affordable flats. You can't build just luxury flats as an investor.
[18:59:13] <selwyn> they have that in britain but the developers are really good at arguing the requirements down
[18:59:19] <Alfr> gilberth, there's no Galois field of order 1, sorry.
[18:59:32] <selwyn> and right wing councils are not ideologically inclined to fight that battle against them
[18:59:55] <gilberth> Alfr: Now, you again! I am bad at math, forgot?
[19:00:12] <Alfr> gilberth, I don't think you ever mentioned this to me.
[19:00:31] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[19:00:56] <semz> Alfr: Amusingly enough, mathematicians are searching for one!
[19:00:57] <gilberth> Calculus was the one single exam I ever failed. I was too lazy to memorize all the tricks.
[19:02:08] <Alfr> semz, you can't have a field with only one element.
[19:02:29] <semz> not exactly a field, but they're looking for something that behaves like it
[19:02:36] <gilberth> Made me visit every damn early middle-at-the-night math lecture the other year.
[19:03:03] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:03:29] <gilberth> Can't be a field with just one element. That's obvious.
[19:03:31] <semz> (many formulae in number theory are based on the size of a finite field q and give "the expected" result for ℚ if you set q=1)
[19:04:47] <selwyn> hm
[19:05:22] <selwyn> so people are looking for an object that looks like ℚ?
[19:08:51] <semz> they're looking for something that works similar to how a GF(1) would work and expect it to be related to ℚ somehow
[19:11:06] <selwyn> ok
[19:11:58] <selwyn> whats a gf(1) :p
[19:12:38] <semz> the hypothetical finite field with one element
[19:13:37] <Alfr> Operative word here's hypothetical, as 1 must not be 0 it.
[19:13:50] <Alfr> s/it/in it/
[19:14:11] <semz> if ever found it's probably going to be some weird generalization of a field
[19:18:18] <selwyn> cool
[19:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:37:19] <gilberth> GF(1) is my first imaginary GF, wife is just wife and not a GF and thus doesn't count.
[19:38:05] <gilberth> So the situation is complex. ;)
[19:39:26] <edgar-rft> GF(1) is number one GF of many
[19:40:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:43:10] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[19:46:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:50:25] *** Quits: Jacobis9000 (~josephash@host86-144-136-140.range86-144.btcentralplus.com) (Ping timeout: 265 seconds)
[20:00:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:22:09] *** Joins: christophergray (~christoph@190.148.52.166)
[20:28:01] <gilberth> Does the CADR actually have lexical closures? I wonder.
[20:29:21] <gilberth> As I say (defun foo (x) #'(lambda () x)), (funcall (foo 42.)) => The variable X is unbound.
[20:34:11] <edgar-rft> In CL when CADR == SECOND what are the eqivalents for MINUTE or HOUR ?
[20:35:35] <pjb> (defun minute (list) (loop repeat 60 for x = (cadr list) then (cadr x) finally (return  x)))
[20:35:45] <pjb> (defun hour (list) (loop repeat 60 for x = (minute list) then (minute x) finally (return  x)))
[20:38:01] <edgar-rft> I'd cadr that :-)
[20:38:43] <pl> gilberth: I think it might depend on whether you evaluated or compiled the code... 
[20:39:31] <gilberth> Meanwhile I wonder what was so hard about lexical closures? Lisp I at least has this FUNARG thing mentioned.
[20:39:58] <gilberth> pl: When I compile, the compiler warns me that X is special.
[20:40:03] <pjb> Not partitularly hard, it's only that people didn't realize they needed it.
[20:40:41] <gilberth> pjb: You think so? Well, it's needed for functions really being first-class.
[20:40:57] <pjb> during the 60s, they noticed that something was wrong, and were puzzled, and then in early 70s, scheme introduced lexical binding with closures with actors.
[20:41:10] <pjb> gilberth: yes, but they didn't know it.  
[20:41:44] <pjb> gilberth: The thing is that John McCarthy wasn't very strong on the maths of lambda-calculus. He only used lambda as a convenient notatin for anonymous functions, without understanding it.
[20:41:54] <gilberth> I see. Hard to grasp for me as this is obvious to me. But then I was raised at time they figured it out.
[20:42:51] <pjb> It's Sussman who discovered the identity between actors (objects) and closures in scheme: https://en.wikipedia.org/wiki/History_of_the_Scheme_programming_language
[20:42:53] <gilberth> So this was the thing that Scheme was about?
[20:43:47] <pl> gilberth: early zetalisp is from a time when closures were starting to show up, yes 
[20:43:55] <pjb> Yes.
[20:44:04] <pl> IIRC original SCHEME work was done at least partially on CADR 
[20:44:38] <pjb> Note that scheme is a creat.
[20:44:51] <pjb> It's real name was schemer, but it was too long for the system where it ran.
[20:45:10] <pjb> 36-bit systems, 6-character symbols.
[20:45:21] <pjb> creat\0 <-- in C.
[20:45:36] <gilberth> Yep, that part of history I read.
[20:46:23] <shka> https://www.youtube.com/watch?v=n068fel-W9I
[20:46:23] -ixelp- Special Lecture: F-22 Flight Controls - YouTube
[20:47:31] <gilberth> I am a bit curious as many languages have fake closures, where the current value of the lexicals is captured and not the binding itself.
[20:47:49] <shka> *cough* java *cough*
[20:47:50] <selwyn> shka: my favourite trump story (sadly probably not true) is that he thought the f35 was invisible
[20:48:51] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[20:50:09] <gilberth> But yes, I can see the confusion. The early LISP paper mentions an EVAL function, which does take an environment, but rather rewrites the expression using SUBLIS to plug the function arguments in.
[20:50:51] <gilberth> * does NOT ;gosh, again I miss the negation.
[20:51:11] * gilberth needs less positive thinking.
[20:52:34] <shka> honestly, such rewrite mechanism could be somewhat useful part of the current cl standard
[20:52:42] <shka> for the macros
[20:53:07] <shka> i guess we do have symbol macrolets
[20:53:12] <gilberth> Good luck.
[20:53:42] <shka> gilberth: nope, i am not doing codewalkers
[20:53:59] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:54:16] <gilberth> Though nobody stops you from using SUBLIS on a template instead of backquote.
[20:54:59] <pjb> indeed.
[20:55:46] <gilberth> CL code walking is no fun. And the standard misses a few crucial parts to do that in a portable fashion.
[20:56:53] <shka> gilberth: yes, i think that standardized code walker should have been part of cl
[20:57:09] <shka> but i hear that agnostic lizard does work
[20:57:20] <semz> Huh? What parts aren't portable?
[20:57:29] <semz> or prevent portability, rather
[20:57:30] <gilberth> Not the code walker itself IMHO, but the needed infrastructure to write one.
[20:58:10] <gilberth> semz: lexical environments.
[20:59:22] <shka> ... which are present in most CL implementations anyway
[21:00:02] <gilberth> Sure, but the lexical environment API has not made it to the ANSI CL standard.
[21:00:09] <semz> I'm not sure I see the problem. They're established through the special operators that you have to handle anyway, no? And when walking inside a lexical environment, the CL parts can't be shadowed. 
[21:00:19] <gilberth> And my favorite: No way to figure out if FOO is a type specifier.
[21:00:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:00:53] <gilberth> semz: What if, you start with a non-null lexical environment?
[21:01:22] <semz> Ah, I suppose you can't derive anything about stuff from the outside environment.
[21:01:29] <semz> That is rather ugly.
[21:01:59] <gilberth> My point. You can some like figure out if sth is a macro or a constant. But not all of it.
[21:05:09] <gilberth> You can't even augment a given environment with new local macros. And you may want to do that, as you need a legit environment arg for macro expanders you need to invoke.
[21:05:28] <copec> Nice meetup group: https://www.youtube.com/channel/UCYg6qFXDE5SGT_YXhuJPU0A/videos
[21:05:29] -ixelp- Atlanta Functional Programming - YouTube
[21:06:24] <gilberth> The olde lexical environment stuff in CLtL2 has almost what is needed.
[21:07:59] <gilberth> And then I'd really love to have a means to define new name spaces in a fashion, that you can have a compile time environment apart from the global environment.
[21:09:55] <gilberth> Most CL implementations can do this with macros, as macros defined in a file you compile are seen only by the compiler and not by anyone else. So with respect to macros, the run time environment is not modified by just compiling a file. It's hard to do that same thing for any new name space, you might want to have.
[21:10:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:12:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:13:21] <gilberth> You can somehow fake this by sticking the A:FOO meaning of a symbol B:BAR into a macro called B:|(A:FOO BAR)| or A:|(FOO B:BAR)|, but both break when you either rename the A or B package.
[21:13:56] <gilberth> Apart from pollution a package.
[21:15:40] <shka> can you have anonymous package in cl?
[21:17:42] <White_Flame> (make-package nil) => #<PACKAGE "NIL">  :-P
[21:17:48] <White_Flame> yay string designators
[21:19:26] <semz> just generate 256-bit random names haha
[21:19:34] * semz ducks
[21:19:37] <pl> empty string as package name is used in some implementations for keyword package
[21:20:02] <White_Flame> pl: would make the symbol printer a bit easier
[21:20:58] <pl> at least CCL does that
[21:22:56] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.2.1)
[21:29:22] <gilberth> An anonymous package won't solve my issue.
[21:31:09] <shka> gilberth: it i unrelated 
[21:31:53] <gilberth> shka: Well then, a hash table is as good an anonymous package as a real package.
[21:32:19] <shka> i figured because with-gensyms is a thing
[21:33:00] <gilberth> Yes, a thing, I never use. :-p
[21:35:24] <shka> mmm, kinky :P
[21:35:54] *** Joins: selwyn (~selwyn@user/selwyn)
[21:39:10] * gilberth does surgery with request serial numbers and XWarpPointer.
[21:40:42] <gilberth> I could keep the mouse pointer inside my window with XWarpPointer, but I need to tell where in the stream of pointer motion events I see later, it happens.
[21:41:10] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:41:30] <gilberth> Because at the end of day, I need a stream of relative [physical] pointer motion.
[21:41:34] *** Joins: selwyn (~selwyn@user/selwyn)
[21:43:06] <gilberth> Without losing any.
[21:44:27] <selwyn> they are saying poland has a bigger truck driver shortage than the uk?
[21:47:27] <ck_> who is/
[21:48:47] <selwyn> twitter government fans
[21:50:04] <selwyn> https://nitter.eu/sima_kotecha/status/1442385271031480325#m lol
[21:50:05] -ixelp- Sima Kotecha (@sima_kotecha): "EU lorry drivers union says on #r4today “we will not go back to #England to help them get [...]
[21:51:46] <ck_> ah.
[21:52:15] <ck_> well, in certain fields it all feels like end times. What will you do last?
[21:52:53] <gilberth> Die?
[21:53:24] <gilberth> Is that an option?
[21:53:25] <selwyn> idk
[21:53:42] <selwyn> it looks like we are on the mad max timeline, which sounds exciting
[21:54:26] * selwyn is awaited in valhalla
[22:02:43] <ck_> "last" meant before expiring. I'm hoping to raise a cup of coffee facing the absurdity of it all
[22:04:27] <ck_> (remember to opt out of eternal recurrence before dying)
[22:08:45] <gilberth> Thanks for reminding me.
[22:09:04] <shka> selwyn: no V8 sadly
[22:09:20] <shka> turbocharged eco V3
[22:11:13] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[22:13:39] <selwyn> https://www.youtube.com/watch?v=OMr3onJmB_g britain 2023
[22:13:39] -ixelp- Immortan joe Speech Scene - YouTube
[22:17:23] <shka> nah
[22:18:20] <ck_> you're right, in the UK they'd drive the war rig on the other side of the road
[22:18:23] <shka> this has more of, uh, British quality https://www.youtube.com/watch?v=i2gVXd7FzhQ
[22:18:24] -ixelp- Mad Max 2: The Road Warrior - Greetings from the Humungus
[22:19:06] <selwyn> it certainly does
[22:19:09] <selwyn> need to watch the original films
[22:19:21] <selwyn> ck: hahaha
[22:19:51] <shka> also, it is about the fuel 
[22:19:58] <shka> i mean, the conflict
[22:20:19] <shka> which feels more fitting to the current situation
[22:23:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e0ff:efea:3ba:f67e)
[22:24:38] *** Joins: semz (~none@user/semz)
[22:26:10] <selwyn> jerrycan demand went up by 1656%
[22:26:11] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[22:26:32] <selwyn> return to ww2
[22:26:35] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:26:39] <shka> IN THE WORLD WERE JERRYCAN DEMAND WENT UP BY 1656%
[22:35:22] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[22:39:16] *** Joins: semz (~none@user/semz)
[22:45:31] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[22:47:15] <gilberth> It's funny how the CADR cannot deal with overlapping windows. You could place them that way and everything looks fine, but the partially obscured window is mute for output. The output only goes to some bit-save array not the screen.
[22:47:31] * gilberth is having more fun with the CADR.
[22:48:40] <copec> What is the expression for an excited student with lots of ideas, but without the experience to properly scope their practicality?
[22:49:40] <shka> copec: overeager
[22:50:27] <shka> copec: or rabid
[22:50:32] <shka> or zealous
[22:50:40] <shka> or fervent
[22:51:23] <ck_> "full of youthful enthusiasm"
[22:58:40] <selwyn> um
[22:59:31] <selwyn> good question
[22:59:38] <selwyn> so far overeager is best
[23:02:08] <Alfr> optimistic
[23:06:06] <gilberth> ZWEI help promises me a tutorial, but there is none.
[23:06:34] * gilberth should get the Chaos net working for a file server.
[23:08:48] <gilberth> And a time server for that matter.
[23:09:21] <gilberth> I still wonder why the CADR does not seem to have an RTC.
[23:14:03] <ck_> computer advises https://i.redd.it/u2flb5qne2q71.jpg
[23:16:17] <gilberth> Is that real?
[23:16:45] <ck_> who even knows
[23:18:31] <gilberth> Hmm, I completely ripped the CADR console emulation apart. So how to share that, when done?
[23:34:43] <aeth> hayley: > criticizing matrix algebra
[23:35:02] <aeth> hayley: > using the URL .../_matrix/media/.../matrix...
[23:35:41] <aeth> I'd say 'checkmate', but I don't want to encourage AI to play chess because they know the way to always win.
[23:38:07] <ck_> greetings, professor falken
[23:45:51] <Alfr> aeth, that can't right.
[23:46:21] <Alfr> Imagine two AIs playing chess, both can't win the same game. oO
[23:46:49] <gilberth> Is chess solved?
[23:48:08] *** Joins: semz (~none@user/semz)
[23:48:19] <Alfr> gilberth, I don't think so. The argument used was along the lines of the opponent dying and thereby losing.
[23:49:54] <gilberth> Do the rules allow for murder?
[23:50:14] <Alfr> Honestly I don't know.
[23:50:32] * gilberth will never ever play chess.
[23:52:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[23:54:23] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:58:16] <semz> what a thing to join back to
[23:59:20] <semz> it's probably made better by not having context
