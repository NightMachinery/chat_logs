[00:00:24] <opalvaults[m]> i get the scope of what it has access to, i suppose what is confusing and interesting to me is that lambda automatically iterates over all define arguments. it's not obvious that lambda should be able to do that coming from an Algol related family.
[00:00:41] <concrete-houses> hierarchies require transitive closures
[00:00:59] <phoe> oh, yes - in Lisp that's perfectly normal and expected
[00:01:05] <opalvaults[m]> I'm conditioned to need to iterate over **kwargs (or some such), and test accordingly
[00:01:08] <phoe> again, it's possible due to automatic memory management
[00:03:49] <opalvaults[m]> gotcha! very, very convenient
[00:04:00] <opalvaults[m]> thanks for the info :)
[00:05:10] <hayley> I thought lexical scope came from Algol.
[00:07:01] <hayley> concrete-houses: To a zeroth approximation, having direct pointers rather than looking through an index would be faster. But I'd still like to see that if the join exposes multiple matches, i.e. the program follows a one-to-many relation.
[00:09:35] <concrete-houses> interesting that the wikipedia page for transitive closure mentions graphs -- aren't they all the buzz now?
[00:09:51] <hayley> Yes.
[00:10:03] <concrete-houses> so Baker was right...
[00:10:11] <hayley> He usually is.
[00:10:26] <concrete-houses> wow maybe I have been watching too much Alan Kay but it seems a lot of decades old computing was smarter
[00:12:05] <concrete-houses> sounds like an opportunity to make money by doing more with less
[00:12:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:13:24] <concrete-houses> What did Paul Graham mean when he said we faked continuations with closures?
[00:14:50] <hayley> He used closures to implement continuation passing style?
[00:16:31] <concrete-houses> http://www.paulgraham.com/vwfaq.html
[00:20:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[00:23:42] *** Quits: green__ (~green@104.156.64.75) (Remote host closed the connection)
[00:23:57] <concrete-houses> Work does a hunting license lottery......  So they have all these licenses fir 4 seasons and different game.....and need to randomize for 15k or so custoemrs, and then the first 'randomly' pciked customer gets the license that is the top one in a list of licenses they want I think 10 it limit to that list.....as licenses are won the availabel licesne count must be reduced by 1 or if the winner
[00:24:03] <concrete-houses> is  a team leader, by the team size, and each team member gets the same lciense....  now in our implementation the non team leader sare in the lottery which seems silly to me.... but would a lisper be able to get random numbers adn run such a lottery pretty easily?
[00:24:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:24:51] <concrete-houses> if the license count is not availble then the second choice is won, if available
[00:25:13] <White_Flame> concrete-houses: of course non-relational databases are faster.  Data is clustered and in specific application-aware format
[00:25:24] <concrete-houses> ah ha!
[00:25:41] <White_Flame> assuming he means pre-relational custom flat record databases
[00:29:09] <concrete-houses> https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-RelationalDatabases.html yes I think he does.
[00:32:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:34:12] <concrete-houses> is there a bittorrent client in lisp ? qbitorrent is pissing me off
[00:36:00] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[00:36:37] *** Joins: kevingal (~quassel@37.228.202.92)
[00:36:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:42:49] <phoe> sudo apt install transmission
[00:43:00] <phoe> (though #lispcafe might be a better place for bittorrent client discussion)
[00:44:42] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:19a6:db30:97eb:3075) (Remote host closed the connection)
[00:48:15] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:57:16] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:06:01] *** Joins: nature (~nature@45.32.235.173)
[01:07:44] *** Quits: nature (~nature@45.32.235.173) (Client Quit)
[01:07:59] *** Joins: nature (~nature@45.32.235.173)
[01:12:54] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[01:17:20] *** Quits: concrete-houses (~g@209.6.150.53) (Remote host closed the connection)
[01:19:45] *** Joins: dstein64- (~dstein64@dannyadam.com)
[01:21:08] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 252 seconds)
[01:21:08] *** dstein64- is now known as dstein64
[01:25:05] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[01:39:49] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[01:42:01] <dre> gosh, GOSH.
[01:42:15] <dre> do you guys do CL or other lisps in your place of employment ?
[01:44:38] <hayley> The only programming job I've ever had used Common Lisp.
[01:48:55] <scymtym> Bike: the protocol definition would also make associated specializers and type specifiers for the "roles" of the protocol: https://gist.github.com/scymtym/c4b842f04fe37ef52745d3ed3ea97e50
[01:50:27] *** Joins: ilmu (~ilmu@176.76.240.11)
[01:56:25] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:8111:fe7b:64a2:404b)
[01:57:24] *** Joins: frodef (~frode@46.212.93.4)
[01:57:24] *** Quits: frodef_ (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[01:57:34] <opalvaults[m]> dre:  i freakin' wish devops used common lisp. I'm sadly stuck with python
[01:59:17] <opalvaults[m]> i have to wonder if people who dive into CL just dread working in other languages and/or lose interest in all other languages after learning CL.
[01:59:31] <Bike> scymtym: very cool. is this using the "generalizers" extension or something else?
[02:02:00] <scymtym> Bike: mostly just CLOS and MOP. being able to spell the specializer like that uses SBCL's specializer parsing/unparsing machinery which is historically but not technically related to generalizers. that's only syntax though. one could construct the method by other, slightly less convenient, means
[02:03:24] <scymtym> and the type specifier is just syntax for (satisfies GENERATED-GENERIC-FUNCTION) where GENERATED-GENERIC-FUNCTION returns true for that same specializer and false otherwise
[02:04:33] <scymtym> so in summary, a class conforming to a "role" in a protocol can be "statically" checked, used as a specializer and used as a type
[02:04:55] <scymtym> it gets complicated with protocols that have multiple roles, of course
[02:10:01] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[02:17:01] *** Quits: cosimone (~user@93-34-133-112.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:19:37] <rotateq> dre: let the universe employ you. problem solved :D
[02:19:56] <dre> :)
[02:20:35] <rotateq> hayley: i often see much good DSL potential as a niche one can do, maybe for the future
[02:20:43] <dre> opalvaults[m], I am a python programmer as well, but I'm learning common lisp and I want to find a way to cram it into more of my projects. (keep in mind, I don't often make projects)
[02:20:53] <rotateq> or other really complex applications that really solve non-trivial tasks
[02:21:08] <rotateq> ah nice dre :)
[02:21:16] <rotateq> there's cl-python for example
[02:21:21] <hayley> In my opinion (which involves no experience with business), using a language you don't know at work is pretty risky.
[02:21:23] <dre> hmm
[02:21:31] *** Joins: dra (~dra@2a04:4540:6409:ed00:28b8:fa9b:c517:3cd1)
[02:21:40] <dre> hayley, yeah exactly
[02:21:45] <dre> rotateq, interesting :x
[02:21:54] <rotateq> hayley: yes it is! or that changes every 3 years
[02:22:26] <rotateq> where even the real experts can't track
[02:22:55] <hayley> I didn't like Java or Python very much when I did university courses with them, but I attribute that to the university.
[02:23:02] <rotateq> dre: and all can be kind of vocation you see for yourself :) i try too for myself
[02:23:42] <Bike> i see, i see
[02:23:45] <dre> much of it is that I need to just do it.
[02:24:06] <rotateq> yes here at the university there's a "functional programming" course with Haskell (of course) but the prof is not good at all and this gets the people a superficial idea of things
[02:24:06] <dre> hayley, i really liked python, at university, simply because it was an alternative to matlab.
[02:24:09] <hayley> But trying to do interactive development in Python was tricky, as it appeared things would refuse to reload unless I didn't do a topographical sort in my head.
[02:24:25] <rotateq> in earlier days it was with Scheme and SICP, i know some dude who did it
[02:24:30] <dre> :P
[02:24:36] <rotateq> now 30 years ago
[02:24:57] <rotateq> dre: matlab can get you ... mad XD
[02:25:18] <hayley> ...and we actually had to write somewhat fast code for one assignment, which scared me, but I somehow managed to find the best solution by accident, and the performance problems were really in a library we didn't write.
[02:26:00] <dre> I had like, half a day left and we had to implement some sort of robotics algorithm. There was some "matlab on computer to rpi robot, sent over wifi" contraption that was a pain
[02:26:27] <hayley> Ouch.
[02:26:32] <dre> and we were like, getting so late, and panicky about it (cause robot is not moving, close to deadline)
[02:27:46] <rotateq> oh cool robotics, also a LISPy task :)
[02:28:16] <dre> and I'm like "welp nothing to lose lets try this" - python on robot. "if direction is not None and indicator is type(int): foo()" -- worked, saved the assignment, and have been diggin python for a while since.
[02:29:01] <rotateq> using inverse kinematics shall also be useful for robotics i heard
[02:29:05] <dre> but yeah, gotten to the point where there's complaints, and having dabbled in lisp, I get it; I have my foot in the door, and I want more :)
[02:29:30] <rotateq> dre: it's a wonderful journey
[02:29:36] <dre> :)
[02:30:30] <rotateq> I'm still surely a sorcerer's apprentice. :) but taking the time is worth it
[02:33:35] <dre> I got the practical common lisp book, but found it dry compared to "Land of Lisp"
[02:33:46] <rotateq> oh PCL, a great start
[02:34:22] <dre> as a newcommer, Land of Lisp was a much more fun start into the language, but PCL has some great tibbets in it
[02:34:27] <rotateq> yes, but Land of Lisp also has its flaws
[02:34:39] <rotateq> yes it's fun, especially the comics
[02:35:15] <dre> interesting, what are the flaws?
[02:35:27] <dre> or rather,
[02:35:37] <dre> what should I be mindful of as a beginner?
[02:35:57] <dre> I'll probably work my way though PCL soon. I did some of AoC in common lisp which was also a great experience
[02:36:13] <hayley> It's very loose with names. Been a while since I read it, but beach had a list of mistakes in the first few chapters <http://metamodular.com/Books/land-of-lisp.html>
[02:37:15] <rotateq> ehm it was here some weeks ago
[02:39:53] <dre> ah
[02:40:06] <dre> good explanations
[02:41:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:42:17] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[02:50:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:8111:fe7b:64a2:404b) (Ping timeout: 268 seconds)
[02:51:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:11:12] *** Joins: Oladon (~olad@98.43.81.226)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:20] <Spawns_Carpeting> does SBCL support TLS TCP connections out of the box?
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:28:42] <Xach> Spawns_Carpeting: no
[03:31:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:38:23] <Spawns_Carpeting> what is the type of the buffer returned by socket-receive?
[03:38:42] <Spawns_Carpeting> i can use ssltunnel for SSL/TLS connections I support
[03:38:45] <Spawns_Carpeting> suppose
[03:44:37] <opalvaults[m]> *no-defun-allowed* I love that guys writing. I believe he wrote a paper about a common lisp operating system that I really liked.
[03:45:05] <opalvaults[m]> hard to find through the website, thankfully i bookmarked it. For anyone interested: http://metamodular.com/closos.pdf
[03:46:39] *** Joins: dra_ (~dra@2a04:4540:6401:7800:28b8:fa9b:c517:3cd1)
[03:48:57] *** Quits: dra (~dra@2a04:4540:6409:ed00:28b8:fa9b:c517:3cd1) (Ping timeout: 240 seconds)
[03:50:23] *** Quits: dra_ (~dra@2a04:4540:6401:7800:28b8:fa9b:c517:3cd1) (Remote host closed the connection)
[03:52:24] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[03:52:39] <rotateq> and dre, good to have you on board btw :)
[03:52:54] <dre> thanks :D
[03:53:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:54:52] <rotateq> we need every potential magician for the future :)
[03:54:54] *** Quits: pve (~pve@87-93-164-140.bb.dnainternet.fi) (Quit: leaving)
[03:57:50] *** Joins: jstoddard (~user@2600:8801:a400:5a00::d374)
[03:58:06] <Spawns_Carpeting> how can I turn the buffer returned by socket-recv into a string?
[03:58:21] <Spawns_Carpeting> I am not exactly sure what the type is in the first place, whether its a vector or hwat
[03:59:00] <Spawns_Carpeting> i could setup a local irc server for testing but it would be easier to uh, just know the type
[03:59:28] <Spawns_Carpeting> its sb-bsd-sockets:socket-receive
[03:59:30] <Xach> Spawns_Carpeting: it's been a while, but i believe it's a vector of octets. octets-to-string will convert it if you like.
[03:59:44] <Spawns_Carpeting> thanks Xach
[03:59:48] <Spawns_Carpeting> very cool!
[03:59:57] <Xach> Spawns_Carpeting: you can use TYPE-OF to find the type of an object.
[04:00:45] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d17b:468b:e993:f386)
[04:04:45] <Spawns_Carpeting> oh geez i didn't know that
[04:05:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[04:05:51] <Spawns_Carpeting> how can I use sb-bsd-sockets inside of an asdf package? Do I need to :use something, or just require it?
[04:06:04] <Spawns_Carpeting> or if there is some good reading material
[04:08:17] *** Quits: amb007 (~a_bakic@cable-94-189-181-124.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[04:12:13] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[04:13:21] <Spawns_Carpeting> I am trying to logically work my way through this so I know how to do it in the future. I see that sb-bsd-sockets is itself an asdf "system", but I am not sure if the :use part of a defpackage imports systems, packages, or what exactly
[04:14:55] <Xach> Spawns_Carpeting: defpackage manages the availability of symbols
[04:15:16] <Xach> Spawns_Carpeting: asdf manages loading systems and their prerequisites
[04:15:35] <Xach> Spawns_Carpeting: so, if you have a project with an .asd system file, :depends-on (#:sb-bsd-sockets) is a thing you could have in your file.
[04:16:11] <Xach> to refer to external symbols in the sb-bsd-sockets package without a prefix, you could :use #:sb-bsd-sockets in your defpackage form.
[04:16:28] <Xach> lots of options and no one best way! that can make it slow to get started.
[04:16:31] <Xach> reading other code can help though.
[04:17:39] <Spawns_Carpeting> so the (defpackage (:use)) uses other packages?
[04:18:12] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:18:24] <Xach> Spawns_Carpeting: it makes it so you can refer to their external symbols without a package prefix
[04:18:47] <Xach> so after (defpackage #:foo (:use #:cl)) (in-package #:foo), you can refer to CL:CAR without the "CL:" part
[04:18:56] <Xach> or CL:DEFUN, etc.
[04:19:03] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 256 seconds)
[04:19:15] <Xach> If you don't :use, you can still refer to them just fine - but you have to write the prefix.
[04:19:50] <Spawns_Carpeting> okay that makes sense
[04:19:53] *** Joins: frodef (~frode@46.212.93.4)
[04:19:56] <Spawns_Carpeting> thank you Xach
[04:19:58] <Xach> there are a few ways to manage that sort of thing. importing is one, and shadowing comes into play when you :use multiple packages when there's a conflict
[04:21:16] <Spawns_Carpeting> what does the pound symbol do in the defpackage/defsystem form do?
[04:21:24] <Spawns_Carpeting> seems to work with and without it
[04:22:05] <hayley> #:foo reads as an uninterned symbol with the name FOO.
[04:22:17] <hayley> :foo reads as a symbol interned into the KEYWORD package, i.e. a keyword.
[04:22:18] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d17b:468b:e993:f386) (Ping timeout: 260 seconds)
[04:26:00] <Xach> Spawns_Carpeting: it's a way to use a symbol for its name without interning it in any package
[04:26:20] <Xach> the real critical part is the name of the symbol - the #:... is syntax for a particular kind of symbol.
[04:27:21] *** Quits: VincentVega (~user@212.97.4.228) (Remote host closed the connection)
[04:27:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:29:11] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 268 seconds)
[04:29:32] *** Joins: frodef (~frode@46.212.93.4)
[04:30:51] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[04:35:53] <rotateq> dre: this dialect seems to be domain specific for programming robots too: https://staff.aist.go.jp/t.matsui/eus/
[04:36:26] <rotateq> wouldn't wonder me if it's written in CL :D
[04:41:17] <rotateq> and i still wait for newer google captchas "select all cdrs"
[04:41:43] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 256 seconds)
[04:42:57] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 240 seconds)
[04:43:06] <hayley> Per https://staff.aist.go.jp/t.matsui/eus/manual/node6.html#SECTION02013000000000000000 it seems unlikely.
[04:44:31] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[04:44:59] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:45:21] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[04:47:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[04:53:14] <rotateq> hayley: it surely was my intention that you say that :)
[04:54:02] <rotateq> but as the text mentions they seem to follow Greenspun's 10th rule
[04:54:43] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[04:54:45] <rotateq> ehm and they mention a special form COMPILER-LET
[04:54:59] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[04:56:57] <rotateq> seems pre-ANSI: https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node59.html
[04:58:50] <rotateq> there's this interesting paper metacircular semantics for CL special ops surely you know it
[05:05:09] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.46.9657&rep=rep1&type=pdf
[05:06:35] <rotateq> yes hayley already had and read it ;) but have to rework
[05:06:57] *** Joins: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no)
[05:07:01] <rotateq> was fascinating what it gives
[05:08:48] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[05:09:03] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[05:11:37] *** Quits: ilmu (~ilmu@176.76.240.11) (Ping timeout: 240 seconds)
[05:15:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:21:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:23:57] *** Quits: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no) (Ping timeout: 240 seconds)
[05:24:01] *** Joins: ilmu (~ilmu@176.76.240.11)
[05:24:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[05:33:25] <Spawns_Carpeting> is there a list util library for cl similar to elisp's dash.el?
[05:34:00] <Spawns_Carpeting> dash defines a bunch of handy functions for working with lists, like flatten, filter, map, take, take-last, take-while, etc etc etc
[05:34:13] <Spawns_Carpeting> i realize many are actually built into lisp already, but some aren't
[05:35:04] <Xach> Spawns_Carpeting: alexandria has a lot of stuff
[05:35:07] <Xach> Spawns_Carpeting: not just for lists
[05:37:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:38:13] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[05:38:55] <rotateq> Spawns_Carpeting: and it can also curry your meals :) or you do the alias "to schoenfinkel"
[05:40:42] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[05:46:17] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[05:47:30] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[05:48:57] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[05:50:36] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:52:07] <jstoddard> Hi everyone, say I have a class with three slots that have accessors a, b, and c. I want to create a subclass--all the methods on the original class make sense for my subclass, but it would make more sense to users if the accessors were named x, y, and z.
[05:52:24] <jstoddard> Is there a straightforward way to "alias" the names of those accessors for my subclass?
[05:52:49] <Xach> jstoddard: sure.
[05:53:06] <Xach> jdz: (defclass subclass (class) ((a :accessor x) ...))))
[05:53:20] <Xach> sorry, jstoddard not jdz on the last
[05:53:44] <Xach> you can have any number of reader/writer/accessor options for a slot
[05:54:16] <Xach> and when implementing a protocol it's not unusual to implement it with method names that don't match the slot name
[05:54:17] <jstoddard> And that basically shadows slot a, etc.?
[05:54:29] <Xach> jstoddard: no - it augments it with another name
[05:55:07] <jstoddard> Okay, fantastic. I'll play around with it a bit. Thanks.
[05:57:31] <rotateq> even multiple initargs or the same for more than one slot at once
[05:57:35] <jstoddard> I assume I can do the same thing with initargs -- (defclass subclass (class) ((a :initarg x :accessor x) ...))?
[05:57:36] <Xach> not another name - another accessor for the slot
[05:57:43] <Xach> rotateq: great anticipation
[05:57:52] <jstoddard> rotateq: Thanks -- as you can see, that was my followup question, haha.
[05:59:00] <rotateq> maybe I used my secret time machine :) [aka reality continuation]
[05:59:37] <rotateq> Xach: I just realised and tried that some weeks ago
[06:02:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:07:26] <Spawns_Carpeting> how can i convert a string into a format suitable for using in socket-send?
[06:07:36] <Spawns_Carpeting> is there a reverse of octet-to-string?
[06:07:52] <hayley> There is, but you won't like the name: string-to-octets
[06:09:04] <rotateq> jstoddard: and for subclasses you of course can rewrite other options like initform or allocation
[06:09:49] <Spawns_Carpeting> that seems to give an undefined function error hayley
[06:10:35] <hayley> (babel:string-to-octets "Hello")
[06:11:09] <Spawns_Carpeting> it works in the repl but not in my package
[06:11:20] <Spawns_Carpeting> do I need to import something perhaps
[06:12:08] <rotateq> Spawns_Carpeting: how does your defpackage form look like?
[06:13:03] <Spawns_Carpeting> https://bpa.st/LRCA
[06:15:13] <hayley> What error do you get?
[06:15:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:15:48] <rotateq> just cause I see it now, it's a convention to place earmuffs around global parameters :) so one can say from reading "ahh that's a global parameter". and also wrapping constants with plus signs
[06:16:37] <Spawns_Carpeting> hayley:  The function IRC::STRING-TO-OCTETS is undefined.
[06:16:54] <hayley> And I wrote babel:string-to-octets after, with the babel: package prefix. Granted, IRC and programming is asynchronous. But you probably also want babel:octets-to-string instead of octets-to-string, to avoid the same error when you receive a message.
[06:17:41] <Spawns_Carpeting> is babel a built in package or something?
[06:18:03] <rotateq> you can load it with quicklisp i guess
[06:18:20] <Spawns_Carpeting> there is a built in function that does it though
[06:18:42] <Spawns_Carpeting> but for some reason it only works in the repl, not in this snippet
[06:19:03] <Spawns_Carpeting> i suppose it probably just loops through the string an creates a vector of char codes
[06:19:31] <rotateq> yes when you load a new image and babel isn't loaded into it won't know the symbol
[06:19:49] <Spawns_Carpeting> I don't have babel installed afaik
[06:19:55] <Spawns_Carpeting> unless its shipped with sbcl
[06:20:11] <Spawns_Carpeting> in which case I guess i just need to add it to depends or something
[06:20:17] <rotateq> for this kind of thing we have quicklisp :)
[06:20:27] <Spawns_Carpeting> i don't have quicklisp installed either
[06:20:38] <rotateq> yes in an asd file you define for your system
[06:20:58] <rotateq> oh go ahead, you will enjoy the xach-technology
[06:22:11] <rotateq> with it you load/build systems that define packages, which are container for symbols
[06:22:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:24:03] <rotateq> https://www.quicklisp.org/beta/
[06:26:05] <jstoddard> Things work! You all just saved me potentially hours of tinkering around to figure out these little details about accessors, that I can now spend learning about what I'm trying to do (raytracing, if anyone cares). So thanks!
[06:26:20] <rotateq> nice
[06:26:41] <rotateq> I didn't help anything, but pleasure. :)
[06:27:06] <rotateq> yes I care jstoddard
[06:28:25] <rotateq> improving the raytracer from Alexander Lehmann also with parallel and concurrent calculation or such could be a good go-on project and for rendering more complex scenes
[06:34:08] <jstoddard> Oh, he has videos up about raytracing in Common Lisp. Here I am working through a C++ tutorial rewriting things in Lisp.
[06:34:35] <rotateq> yes, I think you will learn more from it
[06:35:24] <rotateq> just cause C++ things aren't so directly adaptable (in my head)
[06:35:44] <rotateq> do you have this tutorial, so a link to?
[06:36:14] <jstoddard> https://raytracing.github.io/books/RayTracingInOneWeekend.html
[06:36:37] <rotateq> Much comes together that's used in game engines. :)
[06:37:21] <rotateq> ah nice thx
[06:38:21] <jstoddard> Yeah, I never really got into C++, so it's kind of like speaking Spanish but trying to read Portuguese.
[06:39:01] <rotateq> One of the first big differences between C++ OO-system and CLOS is the decoupled classes and methods that are specializations to generic-functions with also possible method-combinations.
[06:39:13] <rotateq> And of course the multiple-dispatch.
[06:39:26] <rotateq> But maybe let's take it to #clschool.
[06:40:14] <rotateq> jstoddard: When in Rome, do as the Romans do. :)
[06:43:18] <rotateq> and always write "#define public private" in C++ headers
[06:45:14] <rotateq> replace the above part with "... are specializations to a generic function ..."
[06:47:30] <jcowan>  When in Rome, shoot off Roman candles.
[06:47:34] <Spawns_Carpeting> how exactly do vectors work in lisp? I can't seem to get vector-push to work
[06:47:41] <Spawns_Carpeting> i have defvar x (vector)
[06:47:52] <Spawns_Carpeting> then I want to do (vector-push 1 x)
[06:47:59] <rotateq> jcowan: heh. :D
[06:48:00] <Spawns_Carpeting> it throws an error saying its the wrong type
[06:48:19] <hayley> Only if the vector is adjustable; your average vector is not.
[06:48:24] <rotateq> Spawns_Carpeting: on what kind of vector?
[06:48:42] <hayley> (defvar *x* (make-array 10 :adjustable t :fill-pointer 0)) (vector-push-extend 1 *x*)
[06:49:09] <rotateq> or vector-push if it has a fill-pointer that is at the moment smaller than (1- length)
[06:49:23] <hayley> Er, the vector needs to have a fill-pointer, but it doesn't have to be adjustable for VECTOR-PUSH...
[06:49:46] <hayley> but I would recommend using an adjustable vector and VECTOR-PUSH-EXTEND, unless you know you definitely don't want resizing semantics.
[06:49:51] <Spawns_Carpeting> i didn't realize vectors weren't dynamically sized by default
[06:49:54] <Spawns_Carpeting> whoop!
[06:50:01] <rotateq> oh noez of course "smaller than the length"
[06:50:41] <rotateq> Spawns_Carpeting: there are simple vectors firstly, which you type with #(1 2 3)
[06:50:56] <hayley> A Common Lisp vector is just a one-dimensional array, whereas some languages use "vector" to mean a resizable one-dimensional array.
[06:52:33] <Spawns_Carpeting> yeah I am used to c++ and stuff where vector = a dynamic array
[06:52:57] <rotateq> and how about strings in C++? like in C?
[06:54:49] <rotateq> we could give them zero-dimensional arrays too
[06:57:38] <Spawns_Carpeting> strings in c++ are pretty much just an std::vector but specialized afaik
[06:59:09] <rotateq> ah okay. in CL they are also vectors specialized to element-type character and thous you can look up their length directly
[07:02:04] *** Joins: Bike (~Bike@71.69.170.70)
[07:02:04] *** ChanServ sets mode: +o Bike
[07:02:55] <Spawns_Carpeting> darn i am getting errors trying to decode the bytes from the socket into UTF8
[07:03:15] <Spawns_Carpeting> i ended up using "flexi-streams::octets-to-string"
[07:03:23] <Spawns_Carpeting> it looks like it supports UTF-8
[07:04:14] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 260 seconds)
[07:04:47] *** Joins: frodef (~frode@46.212.93.4)
[07:07:41] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[07:08:57] <hayley> WHAT ERRORS?
[07:09:38] <hayley> I think something is going wrong if babel:octets-to-string doesn't work, but no one would know what, if you only say you are "getting errors".
[07:10:11] <Spawns_Carpeting> it complains that #\E is not an octet
[07:10:33] <Spawns_Carpeting> turns out socket-recieve returns a string rather than byte vector
[07:10:37] <Spawns_Carpeting> very strange api choice
[07:11:08] <hayley> Well, guess you don't need to convert the string then?
[07:11:45] <Spawns_Carpeting> nope, I didn't realize that but I am not going to complain
[07:12:33] <rotateq> hayley: as long as they're signaled and not thrown
[07:13:04] <rotateq> of course it's not an octet, it's a character
[07:14:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:18:09] <Spawns_Carpeting> well, I figured the function would return bytes, not a string
[07:28:19] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:30:29] <beach> Good morning everyone!
[07:30:35] <Spawns_Carpeting> do I use setf of setq to set slots that have been brought "into scope" with with-slots?
[07:30:46] <Spawns_Carpeting> neither seem to be working for me
[07:31:20] <Spawns_Carpeting> like (with-slots (x y z) c (setf x 1))
[07:31:40] <beach> clhs with-slots
[07:31:41] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm
[07:32:11] *** Joins: rogersm_ (~rogersm@89.130.187.152)
[07:32:26] <Spawns_Carpeting> looks like they use setq
[07:32:29] <beach> Spawns_Carpeting: Are you sure you are in the right package?
[07:32:32] <Spawns_Carpeting> no idea why its not working
[07:32:50] <Spawns_Carpeting> not sure what you mean by that, but I can show the entire source file
[07:33:13] <Spawns_Carpeting> https://bpa.st/RNMA
[07:34:33] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 256 seconds)
[07:35:46] <Spawns_Carpeting> oh darn it was a typo
[07:35:54] <beach> How does the problem manifest itself?
[07:35:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:36:32] <Spawns_Carpeting> the problem was, I had the loop setup to read from socket until the message delimiter appears at least once in the connection buffer, but it was looping forever
[07:36:53] <Spawns_Carpeting> i fixed it though, i forgot to concatenate the buffer with the data from the socket
[07:47:19] <Spawns_Carpeting> thanks for help tonight guys
[07:49:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:54:10] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:07:02] *** Joins: semz (~none@user/semz)
[08:07:26] <Spawns_Carpeting> what would something like (setf (struct-field struct) nil) do in terms of bytecode?
[08:07:56] <Spawns_Carpeting> a better question might be what exactly is going on when using the slot accessor functions
[08:08:22] <Spawns_Carpeting> does that eval to some special symbol or something
[08:08:28] <beach> Bytecode?  It could be native code or interpreted.
[08:09:27] <beach> There would likely be native instructions to compute the address of the slot and then store a new value at that address.
[08:11:08] <Spawns_Carpeting> I am thinking of a high level bytecode type of thing. just curious because I am still working on my personal lisp project, but haven't got as far as structs and classes yet
[08:11:40] <Spawns_Carpeting> im still in the early stages of compiling it actually, progress has been slow
[08:12:37] <Bike> if you're asking what the lisp compiler compiles into, it's not necessarily bytecode. sbcl and ccl both compile to native code for example.
[08:12:48] <Bike> like, there is no bytecode to speak of, so your question does not make sense.
[08:13:20] <Bike> if there was bytecode it would be the same way you do a structure access in pretty much any kind of instruction set, though? memory set kind of deal
[08:13:35] <Spawns_Carpeting> i mean, what kind of bytecode would it look like on a bytecode based lisp interpreter
[08:13:52] <Spawns_Carpeting> ah okay that makes sense
[08:13:58] *** Quits: dre (~dre@2001:8003:c932:c301:58d1:88a7:d83f:4266) (Quit: Leaving)
[08:14:03] <Spawns_Carpeting> probably a specialized opcode to handle structs
[08:14:15] <Spawns_Carpeting> ill have to look at how python handles this
[08:14:31] <Spawns_Carpeting> ofc its not a lisp, but i am stealing many ideas from it
[08:14:39] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:14:39] <Bike> doesn't have to be specialized. it's just an index into a structure and then a load from memory. or store to memory.
[08:17:01] <beach> Spawns_Carpeting: I recommend you read up on compiler techniques.
[08:17:13] <Spawns_Carpeting> i certainly have been!
[08:17:29] <Spawns_Carpeting> i've made a great deal of progress
[08:17:37] <Spawns_Carpeting> but its slow progress
[08:17:41] <beach> OK.
[08:18:00] <Spawns_Carpeting> i seem to catch on to the whole compiler thing a little more slowly than others
[08:18:35] <beach> It's tricky stuff.
[08:18:41] <Spawns_Carpeting> i guess in my VM a struct slot accessor could just put a reference to a struct field on the stack or something
[08:18:59] <Spawns_Carpeting> yeah it can be for sure! it's a lot of information to process as well
[08:44:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:49:06] <hayley> The easiest solution would be to pass the name of the slot to a SET-SLOT instruction, or something.
[08:49:58] <hayley> ...and also some description of the structure that you want to write to, if you are checking types like an accessor function would.
[08:50:51] <hayley> Compiling "x.y = 2" in CPython does just that, except without the type check part.
[08:52:40] *** Joins: miique (~miique@181.46.139.166)
[08:54:44] *** Quits: jealousmonk (~user@2804:431:e7c4:325e:faf7:a143:6e41:2f65) (Quit: sleep)
[09:02:21] *** Joins: alfonsox (~quassel@103.92.42.192)
[09:14:30] <Spawns_Carpeting> very cool hayley
[09:15:34] <Spawns_Carpeting> i have another question, sorry for asking so much stuff. are SBCL threads "managed", meaning I can use them without worrying about races and similar issues
[09:15:54] <dbotton> nope
[09:16:03] <hayley> Define "race".
[09:16:10] <Spawns_Carpeting> data races
[09:16:28] <Spawns_Carpeting> like, trying to read and write to something at the same time and ending up with the wrong value
[09:16:57] <hayley> As far as I know, Lisp implementations offer the same guarantees as Java, i.e. you'll read some written value and not total garbage.
[09:17:20] <Spawns_Carpeting> that's pretty good then
[09:17:50] <dbotton> race conditions, they just map to system threads which do not provide any protections
[09:18:21] <hayley> (It's basically free on modern hardware, since cache coherency protocols just don't let you see word tearing.)
[09:20:07] <dbotton> Is there a way to "skip" adding to the return list during a mapping function like mapcar?
[09:23:04] <dbotton> (I can just strip nils from the return list but curious)
[09:25:36] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[09:25:36] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[09:25:51] *** Joins: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs)
[09:27:54] <lisp123> dbotton: I can't imagine so
[09:28:09] <lisp123> I usually would just write a custom collecting function
[09:29:02] <lisp123> e.g. (let ((IRC-STUFF ())) (mapc (lambda (a) (when (____) (push a IRC-STUFF)....
[09:37:57] <dbotton> thanks
[09:46:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:53:19] <beach> dbotton: Use LOOP for stuff like that.
[09:53:50] <beach> dbotton: ... WHEN ... COLLECT...
[09:55:07] <dbotton> Thanks.
[09:55:31] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[09:56:04] <dbotton> Is (remove nil (mapcar inefficient?
[09:56:39] <beach> You will first CONS a list with NILs in it and then another list without them.
[09:56:53] <beach> Whether that's acceptable depends on your application.
[10:04:43] *** Joins: notzmv (~zmv@user/notzmv)
[10:09:21] <beach> dbotton: I recommend you do the thing that gives the most readable and maintainable code.  Then you can measure whether your solution needs performance improvements and if so where.
[10:10:00] <beach> dbotton: Programmers are notorious for being wrong about what parts of the code take the most resources.
[10:10:51] <dbotton> Agreed. The remove nil version in this case more elegant and efficient enough for its purpose
[10:11:42] <beach> This is especially true for inexperienced programmers, who often fail to design good algorithms and data structures, and instead concentrate on what they (think they) know, i.e. low-level performance.
[10:11:45] <dbotton> I tend to never optimize first round and try for readability first
[10:12:17] <beach> Sounds good.
[10:12:33] <dbotton> The the code is maintainable is infinitely more important to me
[10:12:51] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:13:12] <dbotton> I have code from 30 years ago that I still value because I can read what I did and
[10:14:08] <dbotton> not have to spend time figuring out what was done to optimize
[10:14:28] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:14:31] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[10:14:32] <dbotton> Most time modern compilers do a better job anyways
[10:14:59] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[10:15:45] *** Quits: ilmu (~ilmu@176.76.240.11) (Ping timeout: 268 seconds)
[10:16:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:17:49] <Bike> dbotton: you can do mapcan, returning a list of one element or nil. loop will probably be more readable though.
[10:19:05] <dbotton> thanks, will look in my am. gn
[10:23:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[10:27:01] *** Quits: jstoddard (~user@2600:8801:a400:5a00::d374) (Quit: goodnight)
[10:27:17] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[10:31:39] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[10:32:03] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[10:39:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[10:52:17] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:53:32] *** Joins: treflip (~user@user/treflip)
[11:09:03] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[11:09:42] *** Joins: alvaro121 (~aa@201.230.126.66)
[11:21:22] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:4886:7280:84d3:cbf7)
[11:23:02] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:38f1:b855:8deb:de60)
[11:27:18] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:4886:7280:84d3:cbf7) (Ping timeout: 268 seconds)
[11:37:27] *** Joins: shka (~herr@109.231.0.226)
[11:45:05] *** Joins: ilmu (~ilmu@176.76.242.169)
[11:50:34] *** Joins: igemnace (~ian@user/igemnace)
[12:14:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:17:19] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:505:5669:c90d:82dc)
[12:27:48] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[12:30:10] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: You have been kicked for being idle)
[12:31:35] *** Joins: rain3_ (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[12:32:28] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zirconium.libera.chat (Nickname regained by services)))
[12:32:32] *** Joins: Alfr (~Alfr@user/alfr)
[12:34:12] *** Quits: rain3_ (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Client Quit)
[12:40:56] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[12:41:09] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[12:45:52] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[12:46:10] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[12:49:17] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:52:47] *** Joins: Lycurgus (~juan@98.4.112.204)
[13:04:14] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[13:05:12] *** Joins: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no)
[13:23:03] *** Quits: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no) (Ping timeout: 256 seconds)
[13:28:15] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:29:16] *** Joins: treflip (~user@user/treflip)
[13:31:03] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:35:01] *** Joins: treflip (~user@user/treflip)
[13:35:14] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[13:37:59] *** Joins: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no)
[13:52:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:52:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:54:52] *** Lord_of_Life_ is now known as Lord_of_Life
[13:57:48] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[14:00:21] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:02:45] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[14:03:33] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:17:11] *** Joins: nature (~nature@45.32.235.173)
[14:17:37] *** Quits: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no) (Ping timeout: 240 seconds)
[14:17:58] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:18:04] *** Quits: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs) (Read error: Connection reset by peer)
[14:18:48] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[14:29:08] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:41:58] *** Joins: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no)
[14:55:17] *** Quits: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no) (Ping timeout: 240 seconds)
[15:06:32] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[15:06:40] *** Joins: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no)
[15:19:47] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:38f1:b855:8deb:de60) (Ping timeout: 268 seconds)
[15:21:14] *** Quits: mingus (~jan-magnu@auth-147-130.anyconnect.uib.no) (Ping timeout: 260 seconds)
[15:22:43] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:38f1:b855:8deb:de60)
[15:23:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:38f1:b855:8deb:de60) (Read error: Connection reset by peer)
[15:25:06] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:26:44] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:31:28] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:45:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:57:30] <nij-> Anyone had fun with coalton?
[15:58:54] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[16:03:43] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[16:11:17] <phoe> there's a coalton-centric Discord server where you should be find some devs and users
[16:12:04] <phoe> https://discord.gg/26AcnjmcGr <- coalton-lang on Discord
[16:19:50] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:20:33] *** Joins: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs)
[16:29:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:33:40] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[16:34:57] *** Inline__ is now known as Inline
[16:37:17] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:143f:3bb6:6851:39df)
[16:37:56] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f4:eb56:94a1:a63b:16a6:cc86)
[16:41:32] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:143f:3bb6:6851:39df) (Ping timeout: 240 seconds)
[16:41:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:42:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:45:29] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[16:54:23] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:11:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[17:15:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:35:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:44:08] <rotateq> dbotton: oh, long in business :)
[17:47:14] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (#commonlisp)
[18:03:14] *** skyl4rk is now known as tlvb
[18:03:14] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f4:eb56:94a1:a63b:16a6:cc86) (Ping timeout: 252 seconds)
[18:04:25] *** tlvb is now known as skyl4rk
[18:11:14] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f4:eb56:94a1:a63b:16a6:cc86)
[18:11:27] <dbotton> My first paid for program was 40 years ago. A program for the psych department of Nova university (south Florida us) running on trs-80s attached to a cables so could load the app to many machines from the same tape recorder
[18:12:10] <dbotton> Written in basic and hand translated assembly poked in to memory
[18:16:43] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1c2f:340c:9046:c73e)
[18:16:43] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f4:eb56:94a1:a63b:16a6:cc86) (Read error: Connection reset by peer)
[18:20:43] *** Joins: Bike (~Bike@71.69.170.70)
[18:20:43] *** ChanServ sets mode: +o Bike
[18:23:17] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 240 seconds)
[18:32:14] <pjb> dbotton: nice.  Mine was a program in basic on TO7 to drive some lights on an advertizing panel for some conserve can manufacturer.
[18:32:23] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1c2f:340c:9046:c73e) (Ping timeout: 252 seconds)
[18:48:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:53:50] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1c2f:340c:9046:c73e)
[18:54:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:57:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[19:01:20] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:06:27] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[19:06:56] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[19:08:56] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:23:04] *** Joins: Everything (~Everythin@37.115.210.35)
[19:37:17] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Ping timeout: 240 seconds)
[19:40:47] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Remote host closed the connection)
[19:42:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[19:42:51] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[19:43:50] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[19:45:46] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Remote host closed the connection)
[19:53:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:53:58] *** Joins: ilmu1 (~ilmu@176.76.240.33)
[19:54:03] *** Quits: ilmu (~ilmu@176.76.242.169) (Ping timeout: 256 seconds)
[19:55:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:55:45] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Ping timeout: 256 seconds)
[20:08:47] *** Quits: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[20:09:04] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[20:10:21] *** Joins: jealousmonk (~user@2804:431:e7c4:325e:faf7:a143:6e41:2f65)
[20:10:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:19:35] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[20:27:57] *** Alfr is now known as Guest2790
[20:27:57] *** Quits: Guest2790 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[20:28:01] *** Joins: Alfr (~Alfr@user/alfr)
[20:29:41] *** Quits: dcx (~dcx@user/dac) (Remote host closed the connection)
[20:31:05] *** Joins: dcx (~dcx@user/dac)
[20:37:32] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:51:55] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:55:12] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:56:18] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:57:36] *** Joins: panji (~panji@120.188.1.145)
[21:00:30] *** Quits: panji (~panji@120.188.1.145) (Read error: Connection reset by peer)
[21:01:08] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:01:14] *** ilmu1 is now known as ilmu
[21:02:37] *** Joins: panji (~panji@120.188.1.145)
[21:07:56] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[21:08:31] *** Joins: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs)
[21:10:19] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[21:11:22] *** Quits: panji (~panji@120.188.1.145) (Quit: Leaving.)
[21:11:44] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[21:12:37] *** Joins: rito_ (~rito_gh@45.112.243.69)
[21:14:16] *** Joins: Catie (~user@user/catie)
[21:14:31] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:18:26] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[21:19:37] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[21:21:58] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[21:31:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:33:18] <jcowan> online.interlisp.org is up, with a Merry Lispmas to all!
[21:35:43] <Catie> This is so cool!
[21:39:45] <opalvaults[m]> Nyxt browser did not like that lmao
[21:41:35] <jcowan> It probably can't cope with VNC.  Safari also has problems, but Chrome/Firefox/Edge all work fine
[21:43:00] <opalvaults[m]> This is very neat. I had no idea what I was signing up for lol. This reminds me of the OpenBSD default WM
[21:43:27] <opalvaults[m]> awesome that this was working back in the day and was used to develop on
[21:45:42] <opalvaults[m]> wow it evaluates immediately this is dope
[21:46:13] <opalvaults[m]> http://metamodular.com/closos.pdf -- common lisp operating system when
[21:47:36] <opalvaults[m]> https://interlisp.org/docs/20211015-interlisp-book-2.pdf -- looks like this is the docs for anyone interested in tinkering
[21:47:54] <Catie> Good thank you, I was just a little bit lost
[21:48:58] <jcowan> Volume 1 is https://interlisp.org/docs/1986-Interlisp-language-book-1.pdf; it's about the language itself.
[21:52:46] <opalvaults[m]> wow this is strangely intuitive!!
[21:53:08] <opalvaults[m]> oh thank you jcowan , that's the link I thought I had copied
[21:53:40] <opalvaults[m]> Catie:
[21:53:48] <opalvaults[m]> oops, early return. the man pages are really intuitive
[21:53:49] <rotateq> oh merry lispmas, have to remember that
[21:54:03] <opalvaults[m]> for instance man window gets you information about interaction with the windows manager, etc.
[21:54:44] <opalvaults[m]> merry lispmas :D
[21:55:11] <Catie> Embarassingly, I didn't even think to run "man". I figured Interlisp had some other mnemonic
[21:55:51] <jcowan> Note that you are in a Xerox CL Exec at startup
[21:59:22] <opalvaults[m]> Catie: I was surprised as well!
[22:00:17] <opalvaults[m]> the CL interpreter inside this VM is actually very smart as well
[22:00:41] <Catie> I think it's interesting how much older GUI systems used the right mouse button. We've kind of settled on using left click for most things, but for example scrolling up on the scroll bar is done with a right click. A lot has changed
[22:00:41] <opalvaults[m]> for instance I can define a function that evaluates as soon as it recognizes the last paren.
[22:01:02] <Catie> opalvaults[m]: CL? I thought it was interpreting Interlisp?
[22:01:36] <opalvaults[m]> oh! It might be. I was under the impression that Xerox CL Exec meant that it was an offshoot of CL
[22:01:47] <opalvaults[m]> my misunderstanding if so
[22:02:43] *** Joins: jstoddard (~user@189.202.78.167.cable.dyn.cableonline.com.mx)
[22:03:20] <Catie> Oh no worries! I don't have a great handle on all of this, so I figured I'd ask
[22:03:25] <opalvaults[m]> There was another WM that allowed you to create windows very similarly to how this Interlisp VM does and I can't for the life of me remember it.
[22:03:30] <jcowan> It just means you are in the CL readtable and the XCL user package.  There is no law that says `read` has to wait foor a newline.
[22:03:39] <jcowan> opalvaults[m]: Genera, perhaps.
[22:04:01] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Read error: No route to host)
[22:04:03] <opalvaults[m]> It's actually kind of interesting how much of this technology we still use and take for granted today! This is actually really great. Reminds me a bit of windowmaker on GNU/Linux.
[22:04:41] <opalvaults[m]> Are there any (aside from GUIX) operating systems being currently developed in Lisp?
[22:04:52] <Catie> There's Mezzano
[22:05:19] <Catie> I think that's largely the work of one person though, and I haven't seen an update from her in a while (please correct me if I'm wrong)
[22:05:38] <jcowan> Waiting for newline was an adaptation to conventional TTY drivers.
[22:06:05] <opalvaults[m]> Whoa that's AMAZING
[22:06:07] <opalvaults[m]> Thanks Catie
[22:06:23] <Catie> opalvaults[m]: It's a project I'm very interested in!
[22:07:17] <rotateq> Mezzano is impressive
[22:07:34] <Catie> Oh strong agree, I'm blown away by it
[22:08:25] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:08:40] <jcowan> Both Interlisp and Genera show their origins on the bare metal, and rewriting maiko for bare metal would certainly be possible
[22:12:08] <jcowan> maiko being Japanese foor "microocode"
[22:13:59] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[22:13:59] *** ChanServ sets mode: +o MichaelRaskin
[22:15:38] <jcowan> Both systems (also MIT Scheme) were born on programmable-microcode shipe. Even now Interlisp has no native compiler.
[22:15:57] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Ping timeout: 240 seconds)
[22:16:39] <jcowan> s/shipe/chips
[22:17:38] <Catie> Are there major hurdles in compiling to -- for example -- x86?
[22:20:40] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f2:707e:ddb8:a66e:1a62:892a)
[22:20:45] *** Joins: Bike (~Bike@71.69.170.70)
[22:20:45] *** ChanServ sets mode: +o Bike
[22:21:34] <jcowan> Spoons; https://www.healthline.com/health/spoon-theory-chronic-illness-explained-like-never-before
[22:22:17] <Catie> Ah, understood
[22:24:29] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1c2f:340c:9046:c73e) (Ping timeout: 252 seconds)
[22:25:15] <jcowan> Which is also why we don't have Medley working natively on Windows, only through WSL.
[22:25:43] <jcowan> (plus downloading a native X server is just annoying)
[22:26:24] <Catie> I haven't tried it, it always felt like a fool's errand
[22:26:43] <jcowan> We do have an SDL back end, though, so eventually there may be a native Windows build without X
[22:26:58] <jcowan> all Medley wants is a screen buffer
[22:27:13] <jcowan> it does all the compositing itself
[22:27:57] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[22:29:56] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[22:40:29] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[22:41:14] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[22:41:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[22:44:23] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[22:44:29] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f2:707e:ddb8:a66e:1a62:892a) (Read error: Network is unreachable)
[22:45:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:47:28] <lisp123> I read somewhere that LW was better than SBCL for CLOS-related matters, which this (old) set of benchmarks seems to support http://zeniv.linux.org.uk/~ober/clb/
[22:47:31] <lisp123> Is that true?
[22:49:46] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[22:51:14] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Quit: Leaving)
[22:52:16] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:56:11] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Ping timeout: 245 seconds)
[23:00:23] <rotateq> lisp123: when you look at the Franz Inc website "Allegro Common Lisp is the most powerful dynamic object-oriented development system available today, and ..."
[23:02:37] <lisp123> rotateq: ACL looks nice, but currently only looking at LW for its ability to create ObjC shared libraries
[23:03:01] <rotateq> isn't CCL also good at that?
[23:03:07] <lisp123> I think so
[23:03:18] <lisp123> And ECL too I guess
[23:05:13] <nij-> A naive question on how CFFI is designed: when I call C within CL, does my code get translated into C-code, passed to C, evaluated there, output passed back, and transformed to a CL data type?
[23:05:30] <nij-> Or is it implemented in another way?
[23:06:26] <rotateq> nij-: you load a shared object file INTO your running lisp image :)
[23:06:49] <rotateq> and not write bindings in C but in CL
[23:07:32] <nij-> What is a shared object file? And what is a binding..?
[23:07:38] <nij-> "*.o"?
[23:07:41] <opalvaults[m]> boring troubleshooting topic, I'm trying to have Nyxt browser load Quicklisp. I have quicklisp added to my .sbclrc file, and a ~/quicklisp directory exists, yet I'm unable to get Nyxt to (ql:quickload 'slynk). Any suggestions?
[23:07:42] <rotateq> erm ok
[23:08:21] <opalvaults[m]> I get WARN - Warning: Error on separate thread: Package QL does not exist. Stream: #
[23:08:25] <rotateq> nij-: when you want to use a foreign lib that lives in a *.o file
[23:08:32] <rotateq> or *.so
[23:09:11] <lisp123> opalvaults[m]: Might be a question for the developers directly, but you can try first making sure. you do all the steps here: https://www.quicklisp.org/beta/
[23:09:37] <opalvaults[m]> cool, i'll take another read through and see if I missed anything
[23:09:49] <lisp123> try #nyxt
[23:09:55] <lisp123> looks like they have a channel
[23:10:06] <rotateq> yesyes
[23:10:46] <opalvaults[m]> I tried there but the one person helping me had to go. I was thinking its more a me and CL issue than with #nyxt directly.
[23:10:55] <nij-> opalvaults[m]: By running your CL implementation from the terminal (e.g. `$ sbcl`), does QL get loaded (try `ql:quickload 'slynk'`)?
[23:11:04] <rotateq> it's IRC after all :)
[23:11:30] <rotateq> nij-: there's a wonderful 2h video by baggers about it from which i learned a bit more in the summer
[23:11:51] <nij-> rotateq does it talk about how CFFI is designed?
[23:12:07] <rotateq> erm yes
[23:12:21] <nij-> !! I wish someone timestamps it. It is sooo long.
[23:12:31] <rotateq> so it's really different again from other approaches
[23:12:32] <opalvaults[m]> nij-: yes that drops me into a slynk prompt
[23:12:33] <lisp123> opalvaults[m]: You can try and see if QL works from a Lisp implementation like SBCL, if so, then perhaps the issue is the nyxt config, if not, then the issue is around QL config (but the link I gave you is pretty much perfect in setting up QL, hence I shared it)
[23:12:51] <rotateq> patience :) I also worked through it
[23:12:59] <opalvaults[m]> okay, i'll keep tinkering and see what is going on. thanks for the help :)
[23:13:18] <lisp123> If slynk works from command line, then perhaps its a nyxt query
[23:13:33] <lisp123> I would raise it with them and see if there is a way they can bundle QL going forward
[23:13:50] <nij-> Interesting. I got the same error as opalvaults[m] did.
[23:14:02] <nij-> (Never bothered to call slynk in nyxt before though..)
[23:14:45] <lisp123> opalvaults[m]: Try evaluating  (load "~/quicklisp/setup.lisp") in nyxt?
[23:14:50] <lisp123> Does that work
[23:14:52] <opalvaults[m]> It was suggested by another user that I load slynk in order to call functions for nyxt inside of Emacs
[23:15:07] <opalvaults[m]> which is why I'm trying to load slynk, so I can manipulate buffers
[23:15:11] <opalvaults[m]> one sec lisp123
[23:15:41] <rotateq> nij-: or this: https://www.youtube.com/watch?v=lvHi5LyhxGk
[23:16:15] <rotateq> even gets to the point to do cheating with it in a castlevania game :D
[23:16:17] <opalvaults[m]> lisp123: it evalautes to T
[23:16:29] <lisp123> ok now try your (ql:quickload 'slynk) command
[23:16:47] <opalvaults[m]> ah, and now (ql: quickload 'slynk) evaluates to (SLYNK)
[23:16:53] <opalvaults[m]> awesome
[23:17:02] <lisp123> This makes me suspect that nyxt is using a different SBCL file / config file
[23:17:23] <opalvaults[m]> I think you're right, I'll ask aartaka in #nyxt. Thanks for helping me troubleshoot that!
[23:17:31] <lisp123> No worries :)
[23:17:56] <etimmons> It's highly unlikely nyxt (or any CL application, really) will load your user unit files
[23:19:23] <opalvaults[m]> Even if it uses SBCL?
[23:19:27] <nij-> Or maybe.. if you get nyxt from a package manager, it might pull down another configured CL implementation that doesn't read your config..
[23:19:53] <opalvaults[m]> that could be it. I'm using Guix so maybe it's packaged in such a way
[23:20:23] <lisp123> Glad to see guix getting more popular
[23:20:38] <opalvaults[m]> It's such a smooth experience now.
[23:20:45] <nij-> I gave up on guix after trying to package one thing I need for 3 days.
[23:20:55] <nij-> opalvaults[m]: :) glad to hear that
[23:21:01] <opalvaults[m]> a bit off-topic, but defintiely the funnest distro I've ever used
[23:21:26] <lisp123> the power of lisp ;)
[23:21:38] <opalvaults[m]> nij-: there are some good examples in the packages repo if you need examples fwiw. that's how I've packaged
[23:21:45] <opalvaults[m]> but thats the last ill say on it here
[23:23:48] <etimmons> opalvaults: yes, even if it uses SBCL. Files like .sbclrc are typically written for dev use. Applications may provide their own way to to user init, but loading .sbclrc is almost certainly the wrong thing to do and has a high chance of causing weird bugs if folks have an esoteric init
[23:24:58] <opalvaults[m]> that's a good point erc. I'll add the ql package init to the nyxt/init.lisp. I believe that's teh way you have to do it in StumpWM as well
[23:25:02] <opalvaults[m]> eric*
[23:25:29] * _death adds (sb-ext:quit) to his ~/.sbclrc
[23:29:23] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[23:33:39] *** Joins: random-nick (~random-ni@87.116.180.98)
[23:38:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:41:48] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[23:42:39] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[23:44:03] *** Joins: jealousm` (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[23:45:42] *** Quits: jealousmonk (~user@2804:431:e7c4:325e:faf7:a143:6e41:2f65) (Ping timeout: 260 seconds)
[23:50:12] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[23:55:27] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:55:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
