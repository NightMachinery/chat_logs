[00:00:37] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[00:03:54] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Ping timeout: 250 seconds)
[00:04:46] *** Quits: srhm (dda3db84b5@user/srhm) (Ping timeout: 250 seconds)
[00:05:27] *** Joins: srhm (dda3db84b5@user/srhm)
[00:05:38] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Ping timeout: 250 seconds)
[00:06:04] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Ping timeout: 250 seconds)
[00:06:04] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[00:06:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:06:19] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[00:06:47] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[00:07:22] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[00:15:35] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[00:19:04] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 250 seconds)
[00:19:53] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[00:20:14] *** Quits: wacki (~wacki@87.122.81.3) (Quit: Leaving.)
[00:22:06] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Ping timeout: 250 seconds)
[00:23:24] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[00:24:18] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:36:33] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Ping timeout: 256 seconds)
[00:41:44] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:c9cc:8012:bb39:a9b0)
[00:43:50] <Xach> dbotton: (char= (char (prin1-to-string object) 0) #\:) is probably the best and safest way
[00:44:03] <Xach> (this is not true, it is only a joke)
[00:44:26] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ec08:9ba4:bce:4350) (Ping timeout: 252 seconds)
[00:44:43] <_death> it even has a :) there
[00:46:25] <Xach> #\:) is a jaunty australian slouch hat smile
[00:48:12] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:c9cc:8012:bb39:a9b0) (Ping timeout: 240 seconds)
[00:48:50] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a80d:ed30:9b2a:ad8a)
[00:55:15] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:56:54] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a80d:ed30:9b2a:ad8a) (Ping timeout: 260 seconds)
[00:57:00] *** Joins: kevingal_ (~quassel@80.233.62.102)
[01:00:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:03:30] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:07:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:10:04] *** Joins: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397)
[01:10:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:13:37] *** Joins: morganw (~user@80.225.24.132)
[01:19:39] *** Joins: dra (~dra@2a04:4540:641c:6c00:74d9:8d1:b2db:e527)
[01:29:51] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:46:53] <dbotton> :)
[01:48:15] *** Quits: dra (~dra@2a04:4540:641c:6c00:74d9:8d1:b2db:e527) (Quit: Leaving)
[01:52:36] *** Joins: pillton (~user@193-116-114-235.tpgi.com.au)
[01:57:15] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[02:02:10] *** Joins: opcode (~opcode@user/opcode)
[02:08:02] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:10:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:22:24] *** Joins: dra (~dra@2a04:4540:641c:6c00:54ef:98ae:e09c:d636)
[02:23:05] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Ping timeout: 256 seconds)
[02:28:07] *** Quits: spm (~user@201.58.255.162.in-addr.arpa) (Remote host closed the connection)
[02:35:00] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 240 seconds)
[02:39:05] *** Quits: cosimone (~user@93-34-133-75.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:40:04] *** Joins: Guest7459 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:42:13] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Remote host closed the connection)
[02:50:00] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[02:54:54] *** Quits: kevingal_ (~quassel@80.233.62.102) (Remote host closed the connection)
[02:55:15] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[03:08:09] *** Quits: pve (~pve@178-55-101-2.bb.dnainternet.fi) (Quit: leaving)
[03:11:46] *** Joins: jealousmonk (~user@user/jealousmonk)
[03:16:16] *** Joins: machine_infinity (~machine_i@2601:600:c480:2010:5094:9dbd:396d:1a54)
[03:16:49] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:17:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:21:57] *** Parts: machine_infinity (~machine_i@2601:600:c480:2010:5094:9dbd:396d:1a54) ()
[03:49:37] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 240 seconds)
[04:07:56] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:11:35] *** Joins: dra_ (~dra@2a04:4540:6408:cb00:54ef:98ae:e09c:d636)
[04:13:57] *** Quits: dra (~dra@2a04:4540:641c:6c00:54ef:98ae:e09c:d636) (Ping timeout: 240 seconds)
[04:15:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:16:41] *** Joins: igemnace (~ian@user/igemnace)
[04:19:50] *** Quits: dra_ (~dra@2a04:4540:6408:cb00:54ef:98ae:e09c:d636) (Remote host closed the connection)
[04:21:32] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:36:56] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:38:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:42:12] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[04:47:55] *** Joins: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[04:53:37] *** Joins: zacque (~zacque@175.140.124.235)
[04:59:09] *** Quits: zacque (~zacque@175.140.124.235) (Quit: Goodbye :D)
[05:19:02] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Quit: Client closed)
[05:26:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:33:24] *** Joins: ritchie101 (~qiduo@112.10.208.0)
[05:34:37] *** Quits: qiduo (~qiduo@117.147.41.81) (Ping timeout: 256 seconds)
[05:38:36] *** Quits: ritchie101 (~qiduo@112.10.208.0) (Ping timeout: 240 seconds)
[05:39:49] *** Joins: ritchie101 (~qiduo@112.10.208.0)
[05:40:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:45:57] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[05:52:39] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[05:57:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:03:32] *** Joins: akoana (~ah@user/akoana)
[06:04:10] *** Joins: Devon7 (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[06:04:22] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[06:09:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[06:09:38] *** Quits: Devon7 (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[06:24:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:25:03] *** Joins: notzmv (~zmv@user/notzmv)
[06:35:04] <dbotton> all my symbol hacking using functions or macros to get slots was a waste, since  events spawn new threads I am always in "common-lisp-user" in every new thread
[06:40:58] <dbotton> my point in that mess of a statement, is that not having the class type and the encapsulating package coupled offers some flexibility but also takes away too. While probably not realistic with out changing the core language to allow that, it is a drawback of CLOS imo.
[06:42:25] <Guest7459> I'm not sure how being in an unexpected by you package is a drawback of CLOS.
[06:42:43] <Guest7459> Maybe you should provide an environment for your threads?
[06:43:30] <dbotton> a solution, but not the one I will take, will just use mop to get the symbols
[06:44:18] *** Joins: Oladon (~olad@98.43.81.226)
[06:44:46] <dbotton> I came across already a few times, with out that coupling you don't really have an "object" in the sense of many languages
[06:45:16] <dbotton> ie data and code coupled
[06:50:38] <dbotton> (I am not saying things should change as this is best solution for CL)
[07:06:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[07:08:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:26:32] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[07:30:14] <beach> Good morning everyone!
[07:35:49] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:40:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:42:34] <moon-child> is it possible to make an anonymous package?
[07:43:53] <beach> I don't think so.  Even MAKE-PACKAGE requires a name and registers it globally.
[07:50:21] <aeth> You can (make-package (gensym)) but of course it will have a name, some string like "G234"
[07:50:40] <aeth> but that might be the closest you can get?
[07:53:34] <beach> clhs make-package
[07:53:34] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mk_pkg.htm
[07:54:11] <beach> I don't see where it says that the package is made available globally.  But the examples suggest that of course.  Then, examples are not normative as I recall.
[07:54:34] <beach> A case for WSCL I guess.
[07:56:31] <moon-child> clhs 11.1.1.1
[07:56:31] <specbot> Package Names and Nicknames: http://www.lispworks.com/reference/HyperSpec/Body/11_aaa.htm
[07:56:57] <moon-child> and make-package _does_ enforce that names are globally uniquene
[07:57:30] <beach> Indeed.
[08:02:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:02:57] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:04:28] *** Joins: semz_ (~semz@user/semz)
[08:07:04] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:10:10] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[08:14:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:14:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:22:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:31:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:33:42] *** Joins: toastloop (~toastloop@user/toastloop)
[08:38:23] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[08:38:42] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[08:46:42] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:49:29] *** Joins: qiduo (~qiduo@112.10.208.0)
[08:49:56] *** Quits: ritchie101 (~qiduo@112.10.208.0) (Ping timeout: 272 seconds)
[08:51:47] <Josh_2> Good morning
[08:52:17] <Josh_2> brb
[08:52:32] *** Quits: Josh_2 (~user@197.185.100.162) (Quit: ERC (IRC client for Emacs 27.1))
[08:53:49] *** Joins: Josh_2 (~user@197.185.100.162)
[08:57:17] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:58:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:59:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:02:49] *** Quits: Josh_2 (~user@197.185.100.162) (Remote host closed the connection)
[09:03:28] *** Joins: Josh_2 (~user@197.185.100.162)
[09:10:18] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[09:31:00] *** Joins: dirtcastle (~dirtcastl@103.43.203.227)
[09:31:58] <dirtcastle> I'm new to lisp. I'm trying to compile stumpwm. an window manager written on common lisp. I'm getting errors.please help
[09:32:31] <beach> What are the errors?
[09:32:41] <beach> ... and how do you compile it?
[09:34:21] <dirtcastle> sbcl , quicklisp.
[09:34:51] <beach> And what's the error?
[09:38:56] <dirtcastle> https://termbin/gjqy
[09:39:07] <dirtcastle> https://termbin.com/gjqy
[09:41:30] <dirtcastle> beach:
[09:41:32] <beach> It may be that there is a warning, and ASDF converts it into an error.  Try putting (setf asdf:*compile-file-failure-behavior* :ignore) after (require '#:asdf) in your .sbclrc
[09:51:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:52:58] <dirtcastle> beach, https://termbin.com/vm03
[09:53:21] <dirtcastle> beach, https://termbin.com/ym03
[09:53:29] <dirtcastle> that's my .sbclrc
[09:54:06] <dirtcastle> and the error is still error.  I'll send it
[09:55:18] <dirtcastle> https://termbin.com/hqha
[09:57:03] <holycow>  just compiled stumpwm from github
[09:57:08] <moon-child> You are missing a * at the end of asdf:*compile-file-failure-behaviour
[09:57:11] <moon-child> should be asdf:*compile-file-failure-behaviour*
[09:57:42] <holycow> i had to remove cl-clx-sbcl and make sure quicklisp had cls installed
[09:57:49] <holycow> on debian
[09:58:41] <dirtcastle> I'm on ubuntu
[09:59:06] <dirtcastle> cls?
[09:59:10] <holycow> ubuntu users had a problem with clx from the repos as well
[09:59:19] <dirtcastle> it was not there on manual.
[09:59:20] <dirtcastle> ok
[09:59:26] <dirtcastle> i just need cls right?
[09:59:42] <holycow> not sure how badly fubared your install is, you've been messing with it
[10:00:03] <holycow> i compiled it from here:  https://github.com/stumpwm/stumpwm
[10:00:10] <beach> Oops, sorry for my typo.
[10:02:52] <dirtcastle> holycow, I'll remove the stumpwm and clone it again?
[10:03:20] <holycow> clone it to a different dir even, i don't know what you are fiddling with
[10:04:41] <dirtcastle> how to get cls? (ql:quickload "cls")
[10:04:46] <holycow> clx
[10:04:52] <dirtcastle> clx?
[10:04:58] <dirtcastle> i have that already
[10:05:26] <dirtcastle> are u telling me it won't work on ubuntu?
[10:05:29] <dirtcastle> lmao
[10:05:33] <holycow> i only said i needed to remove cl-clx-sbcl from apt THEN make sure clx is installed via quicklisp
[10:06:32] <dirtcastle> sudo apt remove cl-clx-sbcl
[10:06:42] <dirtcastle> not installed, so not removed
[10:07:18] <holycow> none of your pastes had the error messages.  recompile and paste the full message, let's see
[10:09:48] <dirtcastle> ok it installed successful
[10:09:54] <dirtcastle> .ly
[10:10:34] <dirtcastle> thanks beach, holycow. looking forward to learning common lisp.
[10:10:48] <beach> Good luck.
[10:11:04] <beach> Hmm.  Stuff like this should be easy.  I wonder why it isn't so.
[10:11:21] <holycow> what, compiling stumpwm?
[10:11:30] <beach> Yeah.
[10:12:09] <holycow> yeah, really it should just be (ql:quickload :stumpwm) and then dump image with a one liner
[10:18:43] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[10:22:52] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[10:26:25] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:27:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:28:28] *** Joins: spiaggia (~user@2a01:cb19:150:3400:3132:e05c:e93:beff)
[10:31:14] <Josh_2> with SBCL I have declared the ftype of my function, I have speed 1, safety 3, debug 3, but I do not get a type-error when I pass the wrong type of argument to my function
[10:31:41] <Josh_2> Should I just use assert instead?
[10:32:24] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[10:32:30] <moon-child> I would use check-type rather than assert
[10:35:41] <Josh_2> oh I had to use declaim outside of the function to get a type-error
[10:35:52] <Josh_2> moon-child: alright :)
[10:44:55] <pillton> clhs 3.3.1
[10:44:55] <specbot> Minimal Declaration Processing Requirements: http://www.lispworks.com/reference/HyperSpec/Body/03_ca.htm
[10:45:16] <pillton> Josh_2: Take note of the minimal declaraion processing requirements above.
[10:46:12] <pillton> Some implementations automatically insert a check-type in to code when using (declare (type integer x)) and others do not.
[10:46:44] <pillton> The same goes for (THE INTEGER X).
[10:51:18] <Josh_2> Okay thanks
[10:52:04] <Josh_2> I was reading the CMUCL user manual https://cmucl.org/docs/cmu-user/cmu-user.html#Advanced-Compiler-Use-and-Efficiency-Hints
[10:57:13] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Quit: Konversation terminated!)
[10:57:28] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:06:03] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[11:06:13] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[11:30:33] *** Joins: unixlisp (~unixlisp@111.37.115.121)
[11:30:45] *** Joins: shka (~herr@109.231.3.55)
[11:31:07] *** Quits: spiaggia (~user@2a01:cb19:150:3400:3132:e05c:e93:beff) (Quit: ERC (IRC client for Emacs 26.3))
[11:33:20] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 272 seconds)
[11:34:26] *** Joins: amb007 (~a_bakic@91.244.204.77.rev.sfr.net)
[11:35:35] *** Quits: micro (~micro@user/micro) (Ping timeout: 256 seconds)
[11:36:50] <Alfr> Josh_2, not for sbcl; but I think in general there's no guarantee that an error will be signaled (even for safe calls), see 1.4.4.3 and 3.3 .
[11:37:07] *** Joins: micro (~micro@user/micro)
[11:37:29] *** Joins: Krystof (~user@81.174.155.115)
[11:39:33] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[11:54:07] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[12:05:03] *** Quits: frgo (~frgo@p548a3783.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:05:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:07:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:19] *** Joins: toastloop (~toastloop@user/toastloop)
[12:20:57] <unixlisp> Josh_2: see sbcl manual 4.2.4. "If the function type is proclaimed before function definition, type checks are inserted by the compiler"
[12:24:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:35:40] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[12:35:59] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[12:36:36] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Read error: Connection reset by peer)
[12:36:44] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[12:41:51] *** Parts: unixlisp (~unixlisp@111.37.115.121) ()
[12:47:01] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Ping timeout: 245 seconds)
[12:47:02] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Ping timeout: 240 seconds)
[12:47:02] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Ping timeout: 240 seconds)
[12:47:08] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Ping timeout: 252 seconds)
[12:47:11] *** Quits: srhm (dda3db84b5@user/srhm) (Ping timeout: 250 seconds)
[12:47:51] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Ping timeout: 245 seconds)
[12:48:13] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Ping timeout: 240 seconds)
[12:48:13] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[12:48:25] *** Joins: srhm (dda3db84b5@user/srhm)
[12:48:27] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Ping timeout: 256 seconds)
[12:48:37] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Ping timeout: 240 seconds)
[12:48:41] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[12:48:46] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[12:48:55] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[12:48:58] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[12:49:02] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 260 seconds)
[12:49:11] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[12:49:41] *** Joins: sm2n (ae95cb1267@user/sm2n)
[12:49:43] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[12:49:54] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[12:49:56] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[12:49:59] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[12:51:49] <phoe> yay! a new Quicklisp dist!
[12:53:02] <Josh_2> I just updated and got an error oof
[12:53:18] <Josh_2> The archive file "hu.dwim.defclass-star-stable-git.tgz" for "hu.dwim.defclass-star" is the wrong size: expected 9,114, got 7,909
[12:58:28] <phoe> huh! works on my machine
[13:02:31] <flip214> Josh_2: transfer interruptus
[13:02:47] <Josh_2> Guess my slow mobile internet
[13:08:10] *** Parts: toastloop (~toastloop@user/toastloop) (Leaving)
[13:10:13] *** Joins: pve (~pve@188-67-210-62.bb.dnainternet.fi)
[13:14:40] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[13:20:13] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[13:25:59] *** Joins: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl)
[13:26:55] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[13:27:13] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[13:31:20] *** Joins: rogersm (~rogersm@90.166.180.250)
[13:36:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:36:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:38:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[13:38:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:44:59] <edgar-rft> maybe it helps if you move faster with your mobile
[13:45:17] *** Quits: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[13:53:44] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:57:05] *** semz_ is now known as semz
[14:00:36] *** Joins: MCSH (~user@158.51.245.126)
[14:01:59] *** Joins: OlCe (~user@amontpellier-655-1-45-169.w109-210.abo.wanadoo.fr)
[14:13:39] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[14:16:54] *** Joins: zachel (~zachel@user/zachel)
[14:22:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:23:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:32:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:37:12] *** Joins: frgo (~frgo@p548a3783.dip0.t-ipconnect.de)
[14:38:21] <scymtym> Josh_2: can you provide a small example? SBCL should check type declarations under the policy you mentioned
[14:40:22] <Josh_2> I think it was my own fault, I was using (declare (ftype ..)) rather than (declaim.. )
[14:40:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:41:22] <scymtym> i see, thanks
[14:43:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:44:37] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:45:07] <Josh_2> What is a synonym stream used for?
[14:46:23] <phoe> Josh_2: run SBCL or CCL in a terminal and issue (synonym-stream-symbol *standard-output*)
[14:48:45] <Josh_2> https://lisptips.com/post/127524780849/when-a-synonym-stream-is-useful seems useful
[14:50:02] *** Joins: Earnestly (~earnest@user/earnestly)
[14:52:20] *** Quits: pillton (~user@193-116-114-235.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[15:21:20] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[15:21:48] *** Joins: zachel (~zachel@user/zachel)
[15:27:21] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Ping timeout: 256 seconds)
[15:29:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:47:42] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:49:35] *** Joins: notzmv (~zmv@user/notzmv)
[15:54:03] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:14:23] *** Joins: igemnace (~ian@user/igemnace)
[16:21:40] *** Quits: qiduo (~qiduo@112.10.208.0) (Quit: WeeChat 3.4)
[16:31:59] *** Joins: Bike (~Glossina@71.69.170.70)
[16:35:30] *** Parts: MCSH (~user@158.51.245.126) (ERC (IRC client for Emacs 27.2))
[16:51:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:00:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[17:02:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:04:32] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[17:07:06] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 260 seconds)
[17:10:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:12:23] *** Joins: heisig (~Marco@p57942f93.dip0.t-ipconnect.de)
[17:17:06] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:19:36] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b4d8:cb19:ba30:6fb5)
[17:20:17] *** Joins: eugercek (~user@user/eugercek)
[17:21:42] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[17:27:17] *** Joins: eugercek (~user@user/eugercek)
[17:28:42] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[17:29:17] *** Joins: eugercek (~user@user/eugercek)
[17:30:42] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[17:35:47] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[17:38:31] *** Joins: treflip (~user@user/treflip)
[17:38:57] *** Joins: eugercek (~user@user/eugercek)
[17:40:22] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[17:41:11] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[17:41:19] *** Joins: wacki (~wacki@87.122.81.3)
[17:42:26] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[17:44:35] *** Joins: eugercek (~user@user/eugercek)
[17:49:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:51:17] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Ping timeout: 256 seconds)
[18:09:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:09:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:11:45] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[18:13:00] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[18:25:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:30:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:34:17] *** Joins: jeosol (~jeosol@user/jeosol)
[18:36:32] *** Joins: nature (~nature@45.32.235.173)
[18:54:49] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:54:49] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[18:55:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:55:08] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:02:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:02:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:19:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[19:20:22] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[19:22:42] *** Joins: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218)
[19:29:08] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b4d8:cb19:ba30:6fb5) (Ping timeout: 250 seconds)
[19:34:02] *** Quits: amb007 (~a_bakic@91.244.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[19:35:15] *** Joins: amb007 (~a_bakic@39.135.22.93.rev.sfr.net)
[19:41:50] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[19:41:50] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[19:41:50] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Remote host closed the connection)
[19:41:50] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Remote host closed the connection)
[19:41:50] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Remote host closed the connection)
[19:41:50] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:41:50] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Remote host closed the connection)
[19:41:50] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Remote host closed the connection)
[19:41:50] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[19:41:50] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Remote host closed the connection)
[19:41:50] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[19:41:51] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[19:42:30] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[19:42:31] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:42:34] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[19:42:38] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:42:38] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[19:42:38] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[19:42:38] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:42:38] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[19:42:38] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[19:42:56] *** Joins: srhm (dda3db84b5@user/srhm)
[19:42:56] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[19:42:56] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[20:05:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:05:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[20:06:59] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[20:07:51] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Ping timeout: 256 seconds)
[20:09:27] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[20:09:33] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[20:16:21] *** Joins: morganw (~user@80.225.24.132)
[20:19:54] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:28:11] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Remote host closed the connection)
[20:28:11] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Remote host closed the connection)
[20:28:11] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[20:28:11] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[20:28:11] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Remote host closed the connection)
[20:28:12] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[20:28:12] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[20:28:12] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Remote host closed the connection)
[20:28:12] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Remote host closed the connection)
[20:28:12] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Remote host closed the connection)
[20:28:12] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[20:28:17] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[20:34:15] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[20:34:16] *** Joins: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178)
[20:34:16] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[20:34:17] *** Quits: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178) (Changing host)
[20:34:17] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[20:34:21] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[20:34:21] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[20:34:21] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[20:34:26] *** Joins: sm2n (ae95cb1267@user/sm2n)
[20:34:31] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[20:34:31] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[20:34:32] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[20:34:32] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[20:34:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[20:34:40] *** Joins: srhm (dda3db84b5@user/srhm)
[20:35:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:35:58] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[20:37:56] *** Quits: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218) (Remote host closed the connection)
[20:38:05] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[20:40:22] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 260 seconds)
[20:42:02] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:43:30] *** Quits: dirtcastle (~dirtcastl@103.43.203.227) (Remote host closed the connection)
[20:44:58] *** Joins: Catie (~user@user/catie)
[20:45:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:47:12] *** Quits: frgo (~frgo@p548a3783.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:49:31] *** Joins: Desk (~Deskatech@130.209.157.48)
[20:56:55] *** Joins: Cball (~Cball@130.209.157.48)
[20:57:25] *** Parts: Desk (~Deskatech@130.209.157.48) (Killed buffer)
[21:01:16] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:08:00] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[21:09:26] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[21:10:49] *** Quits: Cball (~Cball@130.209.157.48) (Quit: Konversation terminated!)
[21:15:17] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[21:22:56] *** Joins: frgo (~frgo@185.66.193.56)
[21:24:16] *** Quits: heisig (~Marco@p57942f93.dip0.t-ipconnect.de) (Quit: Leaving)
[21:31:19] *** Joins: sndr (~sander@user/sander)
[21:32:17] *** Quits: sander (~sander@user/sander) (Ping timeout: 256 seconds)
[21:32:17] *** sndr is now known as sander
[21:33:31] <dbotton> Is there any documentation on using mop/closer mop?  I find myself running in to symbol issues or forcing myself to be compiler dependent which means I am doing something wrong
[21:34:10] <jackdaniel> dbotton: the closest thing is a book "the art of the metaobject protocol"
[21:34:44] <jackdaniel> there is also a specification derived from the book with various improvements here: http://metamodular.com/CLOS-MOP/
[21:37:35] <dbotton> thank you, that is perfect
[21:38:04] <dbotton> and already see what I did wrong (and should already know better)
[21:38:30] <jackdaniel> you may find a website l1sp.org very useful for looking up symbols
[21:38:55] <jackdaniel> it has references to documents like the standard, the above mop specification, the sbcl manual etc etc
[21:40:05] <dbotton> thanks
[21:40:14] <jackdaniel> sure
[21:40:28] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:41:19] <_death> if you're using slime may also find this patch interesting https://github.com/death/slime/commit/e1d978ee40fbefcf6e48392b7052f3c8996566ad
[21:42:53] <dbotton> are there any helper libs like I want to find the slot-name by string
[21:43:08] <dbotton> so that I can get the actual symbol
[21:43:39] <dbotton> so can properly set-value the slot regardless of *package*
[21:44:17] <_death> what if there are two slots, a::slot and b::slot
[21:45:02] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[21:45:41] <dbotton> for now I assume compute-slots gives me the one exposed to the user world
[21:45:49] <dbotton> but I am somewhat ignoramt
[21:46:15] <_death> not sure I understand this answer
[21:47:13] <_death> what you can do is use strings like "A::SLOT" or "B::SLOT" to designate the slots
[21:47:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:48:26] <_death> then you can use read-from-string or your own limited version to map them into the right symbols
[21:51:11] *** Joins: Desk (~Desk@130.209.157.48)
[21:51:37] <Guest7459> dbotton: you don't use package prefixed accessors for your classes?
[21:53:40] *** Quits: Desk (~Desk@130.209.157.48) (Quit: rcirc on GNU Emacs 27.2)
[21:57:00] <dbotton> sure, but the issue here is I need to use slot-value in this case and I need the symbol for the slot
[21:57:31] <dbotton> I know the object and I know the name of the slot on the object
[21:57:54] *** Joins: Desk` (~Desk@130.209.157.48)
[21:58:18] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:58:35] <dbotton> I don't know the package of the object (and that is the issue I mentioned with CLOS, that I should even need that info)
[21:59:20] *** Quits: Desk` (~Desk@130.209.157.48) (Remote host closed the connection)
[21:59:35] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:59:41] <dbotton> (but with out the package knowledge I can't even execute generic functions, that i trade off made by CLOS to not break CL as it stands)
[22:00:03] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:00:06] <dbotton> that is the long answer Guest7459
[22:00:19] <Bike> what happens if an object has two different slots named A::FOO and B::FOO? i.e., they have the same symbol-name "FOO", but different packages.
[22:00:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:00:59] <_death> there's confusion here.  objects don't live in packages, unless by "object" you mean symbol, which I doubt, because you want to use slot-value on it, which indicates to me that by "object" you mean an instance of standard-object.  you say that you "know the name of the slot", but slots are named by symbols.  I believe you know the name of a symbol that names a slot.  but an instance can have multiple slots with the same symbol name, so
[22:01:01] <_death> it's ambiguous.
[22:01:32] <dbotton> _death I don't have access to package of the object and don't think I want to force the user of my API to know, I'd rather leave it a limitation
[22:01:48] <Bike> what is "the package of the object"?
[22:01:56] <Bike> like death said, that's not really a concept that makes sense
[22:02:20] <dbotton> the symbols I need are in a package
[22:02:25] <dbotton> the object is not
[22:02:39] <dbotton> but to use set-value
[22:02:47] <dbotton> I need the slot's symbol
[22:03:01] <Bike> you need the slot's name, which is a symbol, sure.
[22:03:10] <Bike> but you only have the name of the symbol, not the symbol itself, for some reason?
[22:03:20] <Bike> usually you'd just pass the symbol itself around.
[22:03:37] <dbotton> I have a string representing the nae
[22:03:41] <Bike> since, again, for example, you can have two symbols with the same name in different packages, and have both of those symbols name different slots in the same object.
[22:03:45] <dbotton> name, I need the symbol
[22:03:56] <Bike> so using a string is probably not the best idea. it is ambiguous.
[22:04:03] <dbotton> not a choice here
[22:04:07] <Guest7459> how do you get the name?
[22:04:15] <dbotton> A hash
[22:04:17] <Guest7459> is this user provided or something?
[22:04:25] <Bike> your slot name is a hash?
[22:04:32] <dbotton> I can force the info from the user
[22:05:27] <dbotton> here is the interface (defun data-load-plist (obj plist &key (upcase-key t))
[22:05:56] <dbotton> in this case I want the user to be able to pass their object and load its slots from a plist
[22:06:18] <dbotton> I don't want to force the use of the package name where the class is
[22:06:23] <Bike> ...but then the plist keys would be symbols, no?
[22:06:37] <dbotton> no, strings or symbols, etc
[22:06:37] *** Quits: amb007 (~a_bakic@39.135.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[22:06:42] <dbotton> dbi returns keywords
[22:06:49] <Bike> like, you have an object with slot A::FOO = 4 and B::FOB = 7, so your plist is (A::FOO 4 B::FOB 7)
[22:07:00] *** Joins: amb007 (~a_bakic@48.144.204.77.rev.sfr.net)
[22:07:02] <Bike> why would you ever have strings?
[22:07:08] <dbotton> no :foo :fob
[22:07:16] <Bike> okay, sure?
[22:07:23] <Bike> those are still symbols.
[22:07:39] <dbotton> yes, I am also ok with "foo" or "fob"
[22:08:22] <Bike> i don't know why you'd want to do that, but if all your slot names are keywords, you could just do (intern "FOO" "KEYWORD")
[22:08:27] <dbotton> the current implementation works if *package* is where you did the defclass
[22:08:36] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[22:08:54] <dbotton> No as the slot-names are not keywords
[22:09:04] <dbotton> they could be A::fob
[22:09:47] <Bike> Okay then, third time now - what happens if you have one slot named A:FOO and another named B:FOO? What would "FOO" as an indicator mean?
[22:09:53] *** Joins: alvaro121 (~aa@201.230.126.66)
[22:10:00] <dbotton> will be limitation of API
[22:10:15] <dbotton> can only load distinct names
[22:10:28] <dbotton> Can't really fix that
[22:10:42] <dbotton> And unlikely a user of this api would care
[22:10:55] <mfiano> That seems like a strange restriction when you can just marshall symbols.
[22:11:02] <Guest7459> are you in control of all the classes this function works for?
[22:11:08] <dbotton> no
[22:11:12] <dbotton> nor the data
[22:11:20] <Bike> this is a really weird API, but whatever. if you want to search by symbol name you can do that.
[22:11:34] <_death> if you just want to find _some_, not necessarily the right one, slot that has the symbol name, you could (find name slot-definitions :key #'slot-definition-name :test #'string=) (or even string-equal if you want to allow more ambiguity and ignore case) .. but we're trying to tell you that's pretty bad
[22:11:36] <Bike> get a list of slots with mop:class-slots, then the slot name with mop:slot-definition-name, then the name of the symbol with symbol-name.
[22:11:47] <Bike> so yeah, what death said.
[22:12:16] <dbotton> right that is what I am working on now
[22:12:32] <dbotton> question was just if there was a function already
[22:13:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:13:09] <dbotton> I know is bad :)
[22:13:29] <dbotton> But somethings in life are bad for you but taste so good worth it
[22:14:10] <_death> but it quite likely that you can do better without much pain
[22:14:26] <dbotton> In this case allowing a user to match database fields to controls on a graphical panel with common names is worth it
[22:15:03] <dbotton> I am a martyr :) I'll bare the pain for their panes
[22:15:48] <_death> no, the pain that you save from yourself will be amplified and inflicted on your users
[22:16:01] <_death> anyway :)
[22:16:03] <mfiano> This
[22:17:27] <dbotton> If someone does anything more complex they won't use this API
[22:18:09] <_death> it is possible that _you_ may want to grow this functionality in the future, but then get stuck with this decision
[22:18:10] <dbotton> Quick solutions only help at prototype stages in advanced projects, but they are valuable
[22:19:44] <dbotton> Over engineering can be an issue to, it makes an API unusable
[22:20:35] <_death> oh well
[22:20:40] <dbotton> Most APIs die from that alone, it solves all problems and so none
[22:21:37] <dbotton> A user hitting the limitation of this can easily put in the sweat and type out the nitty gritty
[22:22:00] <Guest7459> if you're using a plist, I'd probably just use reinitialize instance and force users to use initargs. but that may be to simple.
[22:22:08] <dbotton> and set each slot or control themselves
[22:22:24] <_death> everyone's free to live with their convictions.. in this channel at least ;)
[22:22:24] *** Quits: amb007 (~a_bakic@48.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:22:29] <Guest7459> s/to simple/to simple for some people/
[22:22:38] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:23:04] <dbotton> Doesn't work as most slots here actually contain controls and the api is called to set the value
[22:23:13] <dbotton> the slots that do not get the value directly
[22:24:24] <dbotton> https://www.irccloud.com/pastebin/3LYuGZFj/
[22:24:56] <dbotton> the plist are usually created by dbi in this case
[22:25:37] <dbotton> dbi uses lower case keys
[22:25:51] <dbotton> (if the db is case insensitive)
[22:27:48] <Guest7459> how is slot a clog-element?
[22:28:59] <dbotton> contains
[22:29:17] <dbotton> work in progress
[22:40:54] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:41:02] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: Lost terminal)
[22:52:41] *** Quits: Guest7459 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:59:00] *** Quits: frgo (~frgo@185.66.193.56) (Ping timeout: 240 seconds)
[23:02:24] *** Joins: drakonis (~drakonis@user/drakonis)
[23:15:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:15:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:18:22] *** Lord_of_Life_ is now known as Lord_of_Life
[23:21:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[23:44:13] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[23:44:13] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[23:44:13] *** Joins: tane (~tane@user/tane)
[23:46:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:56:55] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Remote host closed the connection)
[23:58:49] *** Joins: cjb (~cjb@user/cjb)
