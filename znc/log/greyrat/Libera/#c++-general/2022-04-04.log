[00:00:38] <ville> pointers are objects
[00:00:39] <xkoncek> i was wondering whether my tree visit should be const or nonconst
[00:01:29] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[00:01:35] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[00:01:49] <xkoncek> yeah, pointers themselves don't have anything to do with the objects they point to
[00:01:51] <ville> is it guaranteed the tree object compares equal to a copy to it self before the opeation
[00:02:20] <ville> tree x; tree y = x; x.op; assert(x == y);
[00:02:28] <xkoncek> ... i didn't think comparison would make sense
[00:02:58] <ville> even if you're not implementing it, that's a question you can ask
[00:03:34] <xkoncek> i would go with a shallow approach
[00:04:16] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[00:05:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[00:05:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d4ed:85b6:d4b0:a14d)
[00:05:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d4ed:85b6:d4b0:a14d) (Changing host)
[00:05:56] *** Joins: skapata (~Skapata@user/skapata)
[00:09:03] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 256 seconds)
[00:09:30] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[00:09:56] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:10:56] <ville> maybe give stepanov a read and go from there?
[00:14:31] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[00:17:51] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 260 seconds)
[00:22:06] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[00:25:42] *** Joins: johnny (~johnny@user/johnny)
[00:27:17] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[00:27:25] *** Quits: paul424 (~tom@ip-5-172-239-254.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:27:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[00:27:44] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[00:28:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[00:29:53] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:30:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:34:09] *** Joins: BobRosses (~BobRoss@2600:8805:ab00:2b:381a:252f:c09f:196)
[00:34:18] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 260 seconds)
[00:34:43] *** Quits: BobRosses (~BobRoss@2600:8805:ab00:2b:381a:252f:c09f:196) (Client Quit)
[00:35:21] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[00:36:06] *** Joins: BobRoss (~BobRoss@2600:8805:ab00:2b:381a:252f:c09f:196)
[00:36:32] *** BobRoss is now known as BobRosses
[00:36:43] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[00:36:50] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 246 seconds)
[00:39:02] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[00:39:29] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6d01:9a81:e4c8:b60e)
[00:41:43] *** Joins: Terminus (~null@user/terminus)
[00:57:19] *** Joins: kaph (~kaph@151.35.76.11)
[00:58:10] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[01:06:51] *** Quits: robod34 (Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:08:06] *** Joins: jokoon (~eio@2a01:e0a:542:e160:c53c:c8c0:ea5c:ff3f)
[01:15:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:19:39] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:22:15] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[01:22:57] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:32:32] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[01:33:22] *** Quits: BobRosses (~BobRoss@2600:8805:ab00:2b:381a:252f:c09f:196) (Remote host closed the connection)
[01:42:11] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:42:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:44:07] *** Joins: markong (~kvirc@213.146.188.203)
[02:01:37] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 250 seconds)
[02:10:41] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[02:15:07] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:19:42] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[02:20:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Ping timeout: 260 seconds)
[02:20:51] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[02:21:09] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:22:13] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:22:22] <RandomReader> xkoncek - I don't think "pointer" is the right analogy for container .. maybe consider "struct" instead
[02:22:36] <RandomReader> (which is then consistent with C)
[02:23:18] *** Joins: kaph (~kaph@151.35.76.11)
[02:24:30] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:25:47] *** Joins: kaph (~kaph@151.35.76.11)
[02:30:29] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 256 seconds)
[02:34:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[02:34:55] <mort> is the shared_ptr control block refcounted? Since it has to keep on living past the end of the payload if there are weak refs
[02:36:17] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6d01:9a81:e4c8:b60e) (Ping timeout: 260 seconds)
[02:38:08] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:38:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[02:38:55] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[02:39:08] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4) (Remote host closed the connection)
[02:39:23] <bpalmer> mort: hmm? Weak references explicitly don't affect the lifetime of the pointed to object. (that's what makes them weak)
[02:40:01] <bpalmer> oh, sorry, I see what you're asking now.
[02:40:58] <bpalmer> Yeah, I guess it must be.
[02:42:19] <mort> interesting implications for the cases where the control block and the payload shares a single allocation through make_shared
[02:42:41] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:42:50] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[02:43:44] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[02:44:51] *** Joins: kaph (~kaph@151.35.76.11)
[02:44:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:45:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:45:03] *** ChanServ sets mode: +v npaperbot
[02:48:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[02:51:46] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:52:30] *** Quits: Leone (~Leo@216.154.4.77) ()
[02:53:44] *** Quits: jokoon (~eio@2a01:e0a:542:e160:c53c:c8c0:ea5c:ff3f) (Quit: Leaving)
[02:54:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:58:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:701a:9260:82ec:f4bf) (Ping timeout: 240 seconds)
[02:58:46] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[03:00:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:701a:9260:82ec:f4bf)
[03:04:38] *** Joins: badone (~badone@209.132.189.152)
[03:12:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:13:28] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[03:16:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:19:58] *** Quits: proller (~p@2a02:6b8:b081:18::1:32) (Remote host closed the connection)
[03:21:14] <Alipha> mort: there's a shared ptr ref count and a weak ptr ref count. Only when both are zero does the control block get freed
[03:22:04] *** Joins: proller (~p@80.240.216.69)
[03:26:33] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[03:26:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Remote host closed the connection)
[03:26:56] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[03:27:19] *** Joins: proller (~p@2a02:6b8:b081:8804::1:1d)
[03:28:13] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[03:36:53] *** Quits: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) (Quit: Leaving.)
[03:40:08] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 252 seconds)
[03:41:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[03:48:19] *** Quits: jsbach (~jsbach@2a01:c22:a9f6:7600:7dd:385c:8a8f:e58b) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:56:09] *** Quits: Xe4roX (~Xe4roX@31-10-149-112.cgn.dynamic.upc.ch) (Remote host closed the connection)
[03:58:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:03:47] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[04:12:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[04:13:03] *** Quits: proller (~p@2a02:6b8:b081:8804::1:1d) (Ping timeout: 260 seconds)
[04:14:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:15:08] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[04:16:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[04:17:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:19:26] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[04:20:30] *** Quits: emerent (~quassel@p200300cd5743c321ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:21:43] *** Joins: emerent (~quassel@p200300cd5743c321ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:27:06] *** Joins: proller (~p@80.240.216.69)
[04:32:37] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[04:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[04:34:42] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:38:30] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[04:43:42] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:701a:9260:82ec:f4bf) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:47:33] *** Joins: proller (~p@2a02:6b8:b081:b705::1:32)
[04:49:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:49:26] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[04:49:48] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[04:52:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:54:20] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[04:56:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:06:06] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[05:10:27] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[05:11:47] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[05:15:35] *** Quits: proller (~p@2a02:6b8:b081:b705::1:32) (Ping timeout: 260 seconds)
[05:16:30] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[05:26:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Remote host closed the connection)
[05:26:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[05:32:03] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[05:41:42] <johnny> i assigned *.tpp files to be seen/parsed/associated as c++ files some time ago. now i can't remember where i saw .tpp files.  :)
[05:42:12] <bpalmer> at a guess, they were used for template instantiations.
[05:42:31] <johnny> probaby but i wonder what project it was
[05:42:37] <johnny> s i guess it's somewhat common then
[05:42:38] <bpalmer> I occasionally see foo.h, foo-impl.h and foo.cpp/foo.cc
[05:43:01] <bpalmer> No, I've never seen the tpp extension before, but that would be my guess.
[05:43:08] <johnny> ah
[05:43:35] <johnny> as soon as i upgrade to clang 14 my language server stops working and i've been trying to figure out why, so i was making sure it wasn't on the editor side and noticed it
[05:47:59] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 246 seconds)
[05:53:56] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[05:55:32] <great_taste> !rq
[05:55:32] <nolyc> great_taste: <CarloWood> When archive.org realized they were storing the history of cplusplus.com they took everything down and retired in a remote area of Antartic where there is no internet.
[05:59:13] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:02:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:17:38] *** Joins: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[06:20:27] *** Quits: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:24:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:29:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:32:47] <computerquip> !rq
[06:32:47] <nolyc> computerquip: <Raziel> when will they learn that we want both fast AND deep, at the same time
[06:33:47] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:38:02] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 246 seconds)
[06:38:58] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:44:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:45:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:45:02] *** ChanServ sets mode: +v npaperbot
[06:47:38] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:52:10] *** Joins: Soni (~quassel@autistic.space)
[06:54:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:02:04] *** Joins: adeliktas3 (~adeliktas@i59F5F92F.versanet.de)
[07:04:17] *** Quits: adeliktas (~adeliktas@i59F4D7EF.versanet.de) (Ping timeout: 246 seconds)
[07:04:17] *** adeliktas3 is now known as adeliktas
[07:12:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[07:12:51] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:14:42] *** Joins: teepee (~teepee@openscad/teepee)
[07:26:13] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 260 seconds)
[07:32:13] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:32:29] <computerquip> Sometimes I go to use a conan recipe off of conan-center... and I realize that it doesn't work. But even worse, I realize that it never worked and has some 1000 downloads.
[07:32:48] <computerquip> What the hell are the other 999 people doing with this recipe that blatantly doesn't work.
[07:49:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:50:29] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[07:55:13] *** Joins: teepee (~teepee@openscad/teepee)
[07:58:13] <MaddHatter> trying it, discovering it doesn't work, throwing it away
[08:01:07] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[08:02:23] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[08:06:35] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:09:07] *** Quits: Kill-Animals (uid548360@id-548360.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:15:16] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[08:20:10] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[08:22:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:23:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[08:24:38] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:32:11] <hnOsmium0001[m]> at some point I just gave up using conan center recipes directly
[08:32:56] <hnOsmium0001[m]> I have a dedicated `deps/conan` folder that contain recipes from conan center, that require fixup to work on my machine and I couldn't be bothered to PR to fix
[08:33:15] <hnOsmium0001[m]> I just change the recipe names to have a prefix of my project name and build to for each project manually
[08:34:16] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[08:35:38] <computerquip> Yeah, I planned on making my own repository for recipes with my own user/channel
[08:35:55] <computerquip> But for most of them, I'm just going to copy and fixup from conan-center as the base.
[08:36:02] <computerquip> Just a bit surprised as the low-quality of some of them.
[08:38:07] <hnOsmium0001[m]> what I found is basically everything that either autotools to build, or somehow depends on gtk are a huge hit or miss
[08:39:50] <computerquip> I can thankfully stay away from the gtk stuff. I remember writing up the original recipe requests some years ago for cairo, gtk+, glib, etc. and it ended up being a super difficult request.
[08:40:16] <computerquip> A lot of that stuff is not fun to build at all... especially outside of the Linux ecosystem.
[08:40:33] <johnny> it should be better now shouldn't it?
[08:40:40] <johnny> now that it's no longer autotools
[08:41:04] <johnny> gstreamer and friends should build directly on windows even with msvc
[08:41:29] <johnny> i've yet to try gtk though.. but glib would get pulled in for gstreamer
[08:41:50] <computerquip> I mean, anything is better than autotools for Windows.
[08:41:55] <computerquip> I'm sure meson is a touch better.
[08:42:02] <johnny> it's a LOT better
[08:42:35] <johnny> so.. maybe too specific such that i won't get an answer.. did anybody upgrade from clang 13 to 14 and have their clangd break?
[08:43:07] <johnny> fedora finally got clang 14 (in the beta for fedora 36), and it broke my clangd . it can't find system includes
[08:43:24] <johnny> the clangd changelogs are never very good, so you can't tell if something actually changed or not
[08:43:34] <johnny> i mean clang changelogs :)
[08:45:15] <computerquip> I think part of the problem with buildsystems for things like cairo is that when it gets ported to something like meson, they refuse to change how anything is done... so they drag all the intricacies that autotools have with it.
[08:46:12] <computerquip> Sometimes that's a good thing for compatibility. Hard to tell sometimes.
[08:46:59] <johnny> well i dunno about cairo in particular, but i know gstreamer is CI tested on windows, which means glib would run as well
[08:48:05] <johnny> unrelated to C++, but it's pretty interesting to see how that's all gonna play with wine moving more stuff to thewindows side from the unix side, so all that stuff is gonna include libs built with mingw for use on the windows side
[08:49:37] <johnny> i forgot to mention the most important part. this is for an embedded project, so i'm using --query-driver=/path/to/arm-eabi-none-gcc/bin/arm-eabi-none-g*
[08:52:27] <hnOsmium0001[m]> it's not that the buildsystem is bad nowdays, most of the time it's because GTK has so many transitive dependencies and it's quite sensitive to the version of them; if some downstream package happened to need a different version and override GTK's own version (because it has lower priority due to being upstream), the build may fail for some completely random reason
[08:53:02] <hnOsmium0001[m]> such as missing a symbol from some random library that probably nobody uses except GTK, or the macro definitions are conflicting in some form causing the compiler to complain
[08:57:31] <johnny> well, that's a different proble than the autools issue
[08:58:09] <johnny> i realized i had another C++ project I could test with, and it works there
[08:58:10] <hnOsmium0001[m]> yeah, what I said about autotool and gtk are meant to be 2 separate issues, not one
[08:58:29] <johnny> that one isn't embedded
[08:58:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1462:1997:8fd2:85eb)
[09:01:20] <johnny> it has what seems to be the proper system includes, and extracted the target
[09:04:53] <johnny> man.. this is quite the path path/to/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/10.3.1/../../../../arm-none-eabi/include/c++/10.3.1
[09:10:44] <johnny> now i'm getting somewhere.. main.cpp works fine
[09:11:31] <johnny> wait what.. now it's just working.. :(
[09:12:11] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Read error: Connection reset by peer)
[09:12:27] *** Joins: kaph (~kaph@151.82.171.171)
[09:19:39] *** Quits: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:27:06] <johnny> these inlay hints are nice
[09:32:41] <johnny> and now it's broken again
[09:34:10] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:36:24] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[09:36:48] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[09:37:13] *** Joins: letto (~letto@188.27.114.171)
[09:48:26] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[09:52:29] *** Quits: emerent (~quassel@p200300cd5743c321ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:52:47] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[09:52:54] *** Joins: emerent (~quassel@p200300cd5743c3caba27ebfffed28a59.dip0.t-ipconnect.de)
[09:55:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:00:26] <smallville7123> will copying a byte array to a larger size always result in the same value as long as the host and target endianess are the same?
[10:00:37] <smallville7123> eg int8_t[2] to int16_t
[10:01:30] <smallville7123> would copying int8_t[2] {12, 34} to a int16_t* result in 1234 in both big endian and little endian ?
[10:04:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:05:43] <johnny> nope
[10:06:26] <smallville7123> for example
[10:07:18] <smallville7123> if (littleEndian) for (int i = 0; i < s; i++) array[i] = tmp[i];
[10:07:19] <smallville7123> else for (int i = s-1; i >= 0; i--) array[i] = tmp[i];
[10:07:57] <smallville7123> with s being the length of tmp
[10:08:21] <smallville7123> and array being the int8_t[2]
[10:08:48] <johnny> i mean, you can prove it yourself if you're writing code right?
[10:08:57] <bpalmer> smallville7123: just do regular math with them and stuff will turn out fine.
[10:09:11] *** gentooclimax is now known as climax
[10:09:39] <bpalmer> smallville7123: int8_t vals[] = { 12, 34 }; auto x = int16_t{vals[0]} << 8 | int16_t{vals[1]};   <-- what is x ?
[10:10:10] <smallville7123> dunno
[10:10:39] <bpalmer> smallville7123: I've got faith you can figure out its value. What do you know about its "upper" 8 bits?
[10:11:42] <johnny> i already know this one because i something just like it in my codebase:)
[10:11:52] *** climax is now known as gentooclimax
[10:12:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:12:40] <johnny> except of course the indexes swapped
[10:13:36] <johnny> well i guess i'm gonna export CPLUS_INCLUDE_PATH stuck in here until i get time to actually figure it out, or hope it gets fixed for me
[10:14:02] <johnny> that is extremely annoying :(
[10:14:38] <johnny> now maybe i can actually sepnd time writing code instead of screwing with that :(
[10:15:06] <johnny> thinking about how this is gonna be in C++23 https://en.cppreference.com/w/cpp/numeric/byteswap
[10:15:36] <bpalmer> oh, neat, I suppose.
[10:16:01] <bpalmer> save reliance on  htonl and ntohl , I guess.
[10:16:14] <bpalmer> although now you have to remember what endianness your host is.
[10:16:29] <johnny> well std::endian exists since C++20
[10:16:49] <bpalmer> Good call. I didn't remember that.
[10:17:22] <johnny> i've never personally had to consider host endianness myself . it's all about the network
[10:19:49] <johnny> hmm.. i guess i don't really know what's out there when it comes to all the various embedded platforms (that support standard compilers). i don't know which of those use big endian
[10:20:26] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[10:20:28] <johnny> i'm not interested in considering anything that i can't use gcc (or clang if clang ever happens to support something gcc doesn't)
[10:21:12] <johnny> i'm only a hobbyist.. i can't got time to consider that stuff.
[10:21:42] <johnny> uggh spend 3 hours trying to figure out why clangd started acting up, and i still don't know :(
[10:22:10] <johnny> well i know it started acting up after i upgraded from 13 to 14. but i couldn't figure out why it kept forgetting its include paths
[10:24:58] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[10:25:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:28:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1462:1997:8fd2:85eb) (Ping timeout: 240 seconds)
[10:30:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7092:94e7:8ad0:d7f4)
[10:32:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Quit: Quit)
[10:34:05] <smallville7123> how do i get a little endian and a big endian compiler and executor on godbolt
[10:34:31] <computerquip> I don't think there is one... I remember failing to find one awhile back.
[10:35:47] <smallville7123> as all the arm, mips and power pc compilers have the Execute Code grayed out :(
[10:40:50] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:44:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:45:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:45:02] *** ChanServ sets mode: +v npaperbot
[10:48:17] *** gentooclimax is now known as climax
[10:50:08] *** climax is now known as gentooclimax
[10:52:32] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[10:58:40] *** Joins: jsbach (~jsbach@2a01:c23:6018:f800:6f6c:d942:12b0:84da)
[11:00:24] *** Quits: kaph (~kaph@151.82.171.171) (Ping timeout: 272 seconds)
[11:04:38] *** Joins: paul424 (~tom@ip-5-172-238-66.multi.internet.cyfrowypolsat.pl)
[11:09:27] *** Quits: segnior (segnior@user/segnior) (*.net *.split)
[11:09:27] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[11:09:27] *** Quits: naur_ (naur@user/naur) (*.net *.split)
[11:09:27] *** Quits: dasrael (~rabbit@user/dasrael) (*.net *.split)
[11:09:27] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[11:09:27] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:09:27] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[11:09:27] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:09:27] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[11:09:27] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[11:09:27] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[11:09:27] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[11:09:27] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[11:09:27] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[11:09:28] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[11:09:28] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[11:09:37] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[11:09:38] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[11:09:38] *** Joins: segnior (segnior@user/segnior)
[11:09:47] *** Joins: Friithian (gunqqer@friithian.dev)
[11:09:47] *** Joins: InPhase (~InPhase@openscad/inphase)
[11:09:55] *** Joins: aosync (~aws@mx1.aosync.me)
[11:09:57] *** Joins: naur (naur@user/naur)
[11:10:06] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[11:10:30] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[11:10:36] *** Joins: joji (~jojo@86.4.72.180)
[11:10:41] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:10:55] *** Joins: RazielZ (~Raziel@user/raziel)
[11:11:01] *** Joins: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com)
[11:11:04] *** Quits: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com) (Changing host)
[11:11:04] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[11:11:12] *** Joins: Karyon (~Karyon@user/karyon)
[11:11:16] *** Joins: geordi (~geordi@tinodidriksen.com)
[11:11:17] *** ChanServ sets mode: +v geordi
[11:11:18] *** Quits: Raziel (~Raziel@user/raziel) (Killed (NickServ (GHOST command used by RazielZ)))
[11:11:19] *** RazielZ is now known as Raziel
[11:11:24] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:11:28] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[11:11:53] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[11:13:11] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[11:13:11] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[11:13:11] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[11:13:11] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[11:13:11] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[11:13:12] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[11:13:12] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:13:12] *** Quits: rpav (~rpav@user/rpav) (*.net *.split)
[11:13:12] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[11:13:12] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:13:19] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[11:13:20] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[11:13:32] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[11:13:35] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[11:13:39] *** Joins: andreyv (~andrey@user/andreyv)
[11:13:44] *** Joins: celphi (sid97751@user/celphi)
[11:13:48] *** Joins: obiwahn (~heini@obiwahn.org)
[11:13:55] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[11:13:57] *** Quits: obiwahn (~heini@obiwahn.org) (Changing host)
[11:13:57] *** Joins: obiwahn (~heini@user/obiwahn)
[11:14:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[11:14:05] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:14:15] *** Joins: deepy (deepy@user/deepy)
[11:14:15] *** Joins: rpav (~rpav@user/rpav)
[11:19:11] *** Joins: robod34 (Username@79.115.134.214)
[11:25:06] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[11:36:32] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[11:41:33] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:43:22] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:46:25] *** Joins: ville (~ville@user/ville)
[11:52:31] *** gentooclimax is now known as climax
[11:53:14] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::102:b65c)
[11:56:29] *** climax is now known as gentooclimax
[11:56:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:57:43] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::102:b65c) (Ping timeout: 256 seconds)
[12:06:58] <LordKalma> yes
[12:07:03] <LordKalma> because CE runs on x86
[12:07:46] <LordKalma> !rq
[12:07:47] <nolyc> LordKalma: <LordKalma> I hate C++ too, but at least I like C++
[12:07:50] <LordKalma> yap
[12:15:10] <johnny> hate to love it
[12:15:18] <johnny> or love to hate it..
[12:15:21] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9087:2ff:7cb5:38c5)
[12:28:32] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::101:b65c)
[12:33:02] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::101:b65c) (Ping timeout: 260 seconds)
[12:39:43] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 250 seconds)
[12:44:21] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:45:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:52:10] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[12:56:52] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 268 seconds)
[13:09:18] *** Joins: plastico (~plastico@neomutt/plastico)
[13:09:43] <oj> C++ is the worst programming language. The only thing that's worse is every other language.
[13:16:01] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:16:11] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[13:17:44] <ville> or people just have unrealistic expectations
[13:20:55] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 268 seconds)
[13:22:05] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[13:22:16] <LordKalma> well, it's better than C
[13:24:11] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[13:24:53] *** Joins: jokoon (~eio@2a01:e0a:542:e160:c53c:c8c0:ea5c:ff3f)
[13:26:28] <ville> is it?
[13:26:37] <Haohmaru> of course it is
[13:26:39] <Haohmaru> >:/
[13:26:53] * Haohmaru gives ville some coffee
[13:27:24] *** Joins: andreasbuhr (~quassel@p549dbec6.dip0.t-ipconnect.de)
[13:27:39] <Haohmaru> !C++
[13:27:53] * Haohmaru slaps nolyc
[13:27:57] <ville> adding more crap while keeping (most) the crap you're based on does not automatically qualify as better
[13:28:56] <Haohmaru> i heard someone is working on adding std::audio
[13:29:03] <Haohmaru> that'd be good
[13:29:22] <LordKalma> Haohmaru, I hope not
[13:29:25] <Haohmaru> i never even.. in my dreams even..
[13:29:30] <Haohmaru> LordKalma WHY?!
[13:29:37] <ville> it'll be bang average and unusable in anything serious. just like everything else from the standard library
[13:29:52] <LordKalma> because it would come out the worst API possible and then can never be changed because mah backwards compat
[13:29:55] <Haohmaru> no, it'd be great for simple things
[13:30:09] <LordKalma> for simple things go to miniaud.io
[13:30:12] <ville> Haohmaru:  you are solving the "problem" at the wrong point
[13:30:12] <LordKalma> great library
[13:30:25] <LordKalma> (it's packaged in conan, because I packaged it)
[13:32:55] <LordKalma> I'd rather have boost::audio hahaha
[13:33:01] <Haohmaru> no
[13:33:04] <LordKalma> the way Network TS is turning out...
[13:33:19] <LordKalma> !network ts
[13:33:19] <nolyc> LordKalma: Error: 'supybot.ts' is not a valid configuration variable.
[13:33:23] <LordKalma> fuck
[13:33:27] <LordKalma> npaperbot, search network ts
[13:33:27] <npaperbot> P2469R0: [WG21] Response to P2464: The Networking TS is baked, P2300 Sender/Receiver is not. <https://wg21.link/p2469r0> (by Christopher Kohlhoff, Jamie Allsop, Vinnie Falco, Richard Hodges, Klemens Morgenstern) (2021-10-04) (Related: https://wg21.link/p2469r0/github)
[13:33:27] <npaperbot> Also: P2171R2, P2171R1, P2171R0, P1943R0, P1861R0, P1790R1, P1790R0, P1446R0, P1442R0, P1322R3, P1322R2, P1322R1, P1322R0, P1269R0, P1259R1, P1259R0, P1133R0, P0958R3, P0958R2, P0958R1, P0958R0, P0748R0, P0747R1, P0747R0, ... (47 in total)
[13:33:40] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::102:b65c)
[13:33:47] <LordKalma> C++ standards drama :D
[13:34:14] <LordKalma> also not all of ASIO is in the networking TS
[13:34:18] <LordKalma> which is another BS in itself
[13:34:20] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[13:34:21] <Haohmaru> for quick audio experiments i use a program that allows adding plugins.. and then you can route the audio in/out from the soundcard into the plugin.. that's.. cool.. but.. it's crapdows only
[13:34:50] <ville> LordKalma: why would all of asio have to be in the network ts?
[13:35:21] <LordKalma> doesn't have to. But afaik it's missing on everything that's not networking
[13:35:23] <LordKalma> and meh...
[13:35:39] <ville> well the name kind of gives it away
[13:35:45] <Haohmaru> i want serial ports in std::
[13:35:57] <ville> you could call it something else than _networking_ ts and expand its scope
[13:35:59] <LordKalma> Haohmaru, well, if it was ASIO TS instead of networking TS
[13:36:50] <ville> ...but as far as getting a paper through the committee smaller scope may be a good place to start
[13:37:05] <Haohmaru> yeah, i don't care how::its::gonna::be::called::exactly as long as it's available and i don't have to use my own fugly code for 3 platforms
[13:37:25] <ville> use a ready library
[13:37:28] <LordKalma> you have both serial an audio in Qt
[13:37:30] * LordKalma runs
[13:37:39] <Haohmaru> no, thanks
[13:37:53] <Haohmaru> ville too late now, i use my own fuggly code
[13:38:19] <Haohmaru> at the time, there were only GPL-ish options, and not many to choose from
[13:38:23] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::102:b65c) (Ping timeout: 260 seconds)
[13:39:09] <LordKalma> in windows you can technically use file IO :D
[13:39:19] <LordKalma> I assume in nix you can too
[13:39:27] <Haohmaru> oh yeah, i remember now.. at the time, i was told "just use boost::asio" and i.. did..
[13:39:30] <ville> these days i'm of the opinion that the standard library really should drop a lot of things, focus on actual core things, what's essential to "boot up" other things. std::vector? gone!
[13:39:33] <Haohmaru> and i quit
[13:40:15] <Haohmaru> ville eh?! just when i started using std::vector, you wanna get it removed?!
[13:40:36] <LordKalma> oh sure, let's get rid of those things. We all remember how life was sooo easy before std::string, when everybody had their non-interoperable string types with no de-facto intermediate type to convert to
[13:40:53] <ville> sure. it's not an essential component in anyway
[13:41:06] <Haohmaru> typedef my_string ..;
[13:41:22] <LordKalma> Haohmaru, haave you checked out the embedded template library?
[13:41:28] <LordKalma> I probably suggested it to you before
[13:41:44] <Haohmaru> i've seen it, what about it?
[13:42:02] <LordKalma> since you do embedded might have soemthing that interests you just that
[13:42:36] <ville> LordKalma: std::string is no better really
[13:42:47] <Haohmaru> i've written my own stuff mostly (okay, i stole a few things from stdlib, like array)
[13:43:20] <Haohmaru> perhaps, since armgcc appears to have stdlib i should maybe not use my modified array
[13:43:23] <ville> LordKalma: you're getting a copy anyhoo to stuff your things into std::string and on top of that it has the allocator baked into it so you can't even get the memory for those copies from the right place
[13:44:09] <ville> so it is in fact crap
[13:44:20] <Haohmaru> ville make string grate again?
[13:46:11] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:46:19] <Haohmaru> ville so what should std:: have then?
[13:46:33] <Haohmaru> seems the list of things to keep is gonna be smaller
[13:46:48] <ville> LordKalma: few years ago lakos got on the allocator bandwagon and published some numbers across bloomberg's codebase where they were getting 10-20% performance improvements just by choosing the right kind of allocator
[13:47:02] <Haohmaru> ...than the list of things it has plus those which are trying to get in
[13:47:20] <ville> LordKalma: err "10-20%", been so long i can't remember their numbers
[13:48:03] <LordKalma> std::basic_string has an allocator argument in the template...
[13:48:12] <ville> LordKalma: sure. but std::sring doesn't
[13:48:43] <Haohmaru> std::basic_string isn't like.. hidden away from you somewhere deeper, is it?
[13:48:52] *** Joins: rty (~rty@gateway/vpn/pia/rty)
[13:48:54] <ville> Haohmaru: don't really have a list of things to enumerate. a lot less than even the c library probably
[13:48:58] <LordKalma> nope
[13:49:01] <LordKalma> it's right there in <string>
[13:49:25] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:49:27] <Haohmaru> so.. using mystring = basic_string<blah,bloh,bleh>;
[13:49:35] <TinoDidriksen> Allocators have huge impact, and don't even need to change the code or binary. Just preload mimalloc or tcmalloc or something.
[13:49:51] <LordKalma> ville complains (and rightfully so, with that much I agree) that a lot of the std::lib has a lot of actual language features.
[13:50:00] <Haohmaru> pjballoc
[13:50:03] <LordKalma> so, if we did what he wants and moved every language feature to the language
[13:50:13] <LordKalma> and removed anything from the std::lib that's not bootstraping
[13:50:20] <ville> TinoDidriksen: that's one way of doing it, but you can beat that by doing them at code-level
[13:50:23] <LordKalma> it's like 5 functions
[13:50:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9087:2ff:7cb5:38c5) (Quit: Quit)
[13:50:30] <rty> does boost program options support something like: ./foo --bar -- baz; and all options after -- would be in a different group, that can either be parsed by boost or passed to a child process?
[13:51:10] <LordKalma> I'd tell you to read the docs, but who understands boost documentation anyway?
[13:51:38] <Haohmaru> LordKalma the boost authors, after the 4th RedBull
[13:51:59] <LordKalma> TinoDidriksen, Allan Talbot has a talk where he made like a memory recycling system for hot-look vector allocations
[13:52:01] <LordKalma> massive gains
[13:52:10] <LordKalma> *hot-loop
[13:52:13] <ville> LordKalma: https://www.youtube.com/watch?v=ebn1C-mTFVk and similar presentations
[13:52:13] <PJBoy> tcmalloc >:(
[13:52:28] <rty> and another thing, does boost program options support something like ./foo bar --baz; where bar is like -- in the example above, so all options after bar are interpreted in regards to bar
[13:52:29] <LordKalma> tldr: don't re-create and resize vectors every iteration in a loop
[13:52:54] <ville> LordKalma: no... use an allocator that doesn't give the memory back to the os
[13:53:18] <LordKalma> that's more or less what Alan did
[13:53:20] <Haohmaru> LordKalma i always try to keep vectors or similar RAII things outside loops, unless it's precisely needed
[13:53:27] <TinoDidriksen> tcmalloc is perfectly fine, and actually packaged and available in most places.
[13:53:31] <LordKalma> basically keep a "pool of vectors" same as you'd have a pool of threads
[13:53:39] <ville> LordKalma: yes, you just simplified it the wrong thing
[13:53:45] <ville> err to the
[13:53:50] <LordKalma> hah fair
[13:53:55] <rty> or if not, maybe you know of some other library that does support that
[13:54:20] <LordKalma> rty, C++ has terrible GUI frameworks, and somehow equally shit argparsing libraries
[13:54:23] <LordKalma> pick your poison
[13:54:33] <PJBoy> tcmalloc crashes on memory allocation failure even if you only link to it
[13:54:47] <Haohmaru> i've been thinking to write my own CLI argument parser thing
[13:54:50] <TinoDidriksen> And in my tests, tcmalloc was consistently not the worst. Sometimes jemalloc was fastest, sometimes mimalloc was fastest, but tcmalloc was never slowest.
[13:54:54] <PJBoy> that behaviour should be reserved for the nothrow version of operator new
[13:54:57] <Haohmaru> but meh
[13:55:44] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[13:55:50] <Haohmaru> TinoDidriksen is that for computers or tightly-coupled-memory (as found on some embedded stuff) ?
[13:56:01] <TinoDidriksen> PJBoy, I use tcmalloc with processes using 16+ GB RAM - works fine.
[13:56:13] <Haohmaru> hm, sounds like computers then
[13:56:26] <TinoDidriksen> It'll throw a warning about a large allocation, but that's just a warning.
[13:56:49] <PJBoy> we used tcmalloc on embedded and it causes crashes >_>
[13:57:08] <TinoDidriksen> Haohmaru, general purpose computing indeed. I would not use a pool alloctor on embedded.
[13:57:21] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[13:57:36] <Haohmaru> nah, i have nearly zero clue about memory allocation
[13:57:38] <LordKalma> depending on the embedded, just don't allocate :p
[13:57:45] <Haohmaru> so don't even begin trying to explain ;]
[13:57:58] <PJBoy> strictly speaking it was opera browser that was using tcmalloc
[13:58:05] <Haohmaru> yeah, avoid dynamic memory on bare-metal is the default way
[13:58:28] <Haohmaru> which is.. easier in C++ than in C i'd say
[13:58:46] <Haohmaru> because all the fancy C code i've seen sooner or later use malloc() or some such
[13:58:57] <Haohmaru> for silly reasons
[13:59:14] <PJBoy> TC is "thread caching" btw
[13:59:19] <Haohmaru> oh
[13:59:36] *** Quits: rty (~rty@gateway/vpn/pia/rty) (Quit: rty)
[13:59:51] <LordKalma> Haohmaru, C has VLAs, which makes a lot of allocation unecessary
[13:59:59] <LordKalma> in C++ you could write a stack allocator, I guess
[14:00:00] <Haohmaru> dafuq was that
[14:00:18] <LordKalma> the fact you can write int foo[N]; where N is a runtime value
[14:00:19] <Haohmaru> virtual.. something addresses?
[14:00:26] <LordKalma> variable lengh arrays
[14:00:36] <Haohmaru> meh
[14:01:01] <Haohmaru> then why do i always see malloc()
[14:01:20] <LordKalma> well, big chunkus of memory need malloc anyway
[14:01:29] <barometz> because VLAs have their own issues, and you can't use a VLA as part of a struct
[14:01:34] <LordKalma> but yeah, for simple char buffers or something, VLAs are fine
[14:01:34] <Haohmaru> or they don't?
[14:01:47] <ville> i don't think i've still seen a library in the wild to use the std::pmr-versions of things
[14:02:02] <PJBoy> stack overflow is a thing and maybe they want their memory to outlive the function
[14:02:02] <Haohmaru> i still have not use dynamic memory on baremetal
[14:02:03] <LordKalma> you can write a non-polymorphic allocator
[14:02:08] <LordKalma> but yeah, I've neever seen pmr used as well
[14:02:24] <PJBoy> I've met a few people that use PMR at their $work
[14:02:31] <LordKalma> what's the advantage?
[14:02:35] <ville> LordKalma: you want the pmr versions
[14:02:39] <PJBoy> easy to write
[14:02:55] <ville> LordKalma: it makes testing easier because chaning allocator one place doesn't make your shit not compile
[14:02:56] <PJBoy> and interactions between containers with different allocators is better
[14:03:06] <LordKalma> what's the situation where you *can't* just template your containers with different allocators at compile time
[14:03:13] <ville> LordKalma: testing as in testing for what kind of allocator makes sense in this situation
[14:03:20] <LordKalma> fair
[14:03:36] <LordKalma> and yeah, the fact your can just use a base class and so keeping the type the same
[14:03:39] <ville> LordKalma: you don't want the allocator type in the container type because it makes your job harder
[14:03:46] <LordKalma> yeah, true
[14:03:51] <LordKalma> makes API boundaries a pain I guess
[14:03:58] <LordKalma> because the type is technically different
[14:05:14] <PJBoy> but you gotta pay for that virtual function call overhead
[14:05:28] <LordKalma> with some "luck" the compiler can trim it out
[14:05:44] <LordKalma> or your speculative execution just handles it
[14:05:44] <PJBoy> which is fine for business codebases that constantly add overhead whether it helps or not
[14:06:03] <PJBoy> I would probably not use it in personal code
[14:06:36] <LordKalma> CPUs are fucking magic
[14:06:39] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::101:b65c)
[14:06:52] <ville> PJBoy: the virtual call doesn't even register if you're getting a context switch for a system call
[14:06:52] <Haohmaru> <magic.gif>
[14:07:49] <LordKalma> yesterday I was reading the AVX2 intrinsics
[14:07:55] <PJBoy> still doesn't mean I like adding bits of pieces of overhead
[14:08:01] <LordKalma> and I can barely register what those words means in sequence
[14:08:17] <PJBoy> I could add random sleep(0.001) here and there and it wouldn't make a difference
[14:08:20] <ville> also i've had some luck in this area with final allowing the compiler to devirtualize the call anyhoo
[14:08:35] <Haohmaru> LordKalma advanced vector extension?
[14:08:45] <LordKalma> > "Gather 32-bit integers from memory using 32-bit indices."
[14:08:53] <LordKalma> what the fuck does "gather" even mean
[14:09:02] <Haohmaru> collect
[14:09:04] <Haohmaru> read
[14:09:41] <ville> PJBoy: given my apparent avoidance of various c++ features, you may be surprised that this is the one place where i do actually use a base+virtuals
[14:09:41] <Haohmaru> [] --> [] -> [] <- [] <-- []
[14:09:42] <PJBoy> opposite of scatter
[14:09:55] <PJBoy> ville, I am indeed surprised
[14:09:55] <ville> LordKalma: map N=>1
[14:10:42] <LordKalma> like, the AVX load functions are easy: https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#techs=AVX&cats=Load&ig_expand=3893,3899,4362
[14:10:46] <LordKalma> the AVX2... WTF: https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#techs=AVX2&cats=Load&ig_expand=3893,3899,4362,3892
[14:10:48] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:10:54] <PJBoy> but using PMR allocators avoids needing to understand non PMR allocator interactions
[14:10:56] <PJBoy> so it makes sense
[14:11:02] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::101:b65c) (Ping timeout: 260 seconds)
[14:11:03] <ville> LordKalma: always helps to try to draw diagrams of how the values "travel"
[14:12:19] <LordKalma> ville, I can understand _mm256_loadu_ps shoves 256 bits in ymm. But "Gather 32-bit integers from memory using 32-bit indices. 32-bit elements are loaded from addresses starting at base_addr and offset by each 32-bit element in vindex (each index is scaled by the factor in scale). Gathered elements are merged into dst. scale should be 1, 2, 4 or 8."
[14:12:21] <LordKalma> I have no idea
[14:12:30] <PJBoy> so it converts 00000000 11111111 22222222 33333333 ... -> 0123456789AB... 0123456789AB...
[14:12:47] <PJBoy> where there are 32 digits
[14:13:00] <LordKalma> I have no idea how you understood that :(
[14:13:36] <PJBoy> it's a bit like bitplanes in some image formats
[14:14:01] <ville> LordKalma: http://const.me/articles/simd/simd.pdf has some fun drawings
[14:14:42] <ville> LordKalma: doesn't cover all the instructions of course, but you can get the idea what to _try_ to draw when trying to understand an instruction
[14:15:03] <ville> surprisingly: boxes and arrows
[14:15:18] <PJBoy> weird how they write `const int scale` in the function
[14:15:24] <PJBoy> parameter
[14:15:53] <PJBoy> but not __m128i
[14:16:30] <LordKalma> because _m128i are opaque types
[14:16:36] <LordKalma> they are the actual return values of load functions
[14:16:38] <LordKalma> not parameters
[14:16:57] <LordKalma> they are only parameters to functions that *process* loaded registers
[14:17:08] <PJBoy> oh right
[14:17:49] <LordKalma> look at this signature: __m256 _mm256_load_ps (float const * mem_addr)
[14:17:58] <LordKalma> __m256 is basically a token for the ymm register
[14:18:10] *** Joins: proller (~p@80.240.216.69)
[14:19:52] <LordKalma> if I had to guess, I'd say that the compiler uses that return value to lkeep track of the register you want to use in the instructions
[14:27:53] <ville> PJBoy: also one more thing choosing pmr-like by default is that it does make testing different allocator kinds fairly alright. and then after you've picked the allocator kind you can see if going from pmr-like to non-pmr-like shows any improvement. the selection of the allocator kind is probably higher-order of magnitude in the gains than getting rid off the virtual calls
[14:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:36] <PJBoy> that makes perfect sense
[14:36:38] *** Quits: paul424 (~tom@ip-5-172-238-66.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:38:27] *** Joins: markong (~kvirc@213.146.188.203)
[14:41:05] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 268 seconds)
[14:44:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:45:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:45:04] *** ChanServ sets mode: +v npaperbot
[14:49:43] *** Joins: cursey (~cursey@user/cursey)
[14:50:14] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Read error: Connection reset by peer)
[14:50:33] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:53:37] *** magla is now known as jellyknight
[14:54:06] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[15:04:18] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[15:07:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42)
[15:07:17] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 246 seconds)
[15:09:23] *** flooded is now known as _flood
[15:17:25] *** Joins: vnf (~vnf@85.174.194.51)
[15:18:28] *** Quits: vnf (~vnf@85.174.194.51) (Read error: Connection reset by peer)
[15:18:45] *** Joins: vnf (~vnf@85.174.194.51)
[15:29:35] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:32:31] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[15:34:12] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[15:34:58] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 260 seconds)
[15:35:17] <TinoDidriksen> hans, a cross-platform TCP server is rather simple? Boost, Qt, POCO, etc - lots of options.
[15:36:47] <hans> thanks, is posix an option? (<sys/socket.h> / listen() / accept() /etc)  oooor
[15:37:16] <TinoDidriksen> Almost, but then you need some Winsock setup functions on Windows.
[15:37:21] *** Quits: joji (~jojo@86.4.72.180) (Quit: Leaving)
[15:37:38] <hans> hmm ok, and if i want to use Boost sockets, i need like 300mb worth of libraries and ship with DLLs? or
[15:38:12] <TinoDidriksen> ASIO is header-only for most uses.
[15:38:49] <hans> that sounds neat, if i can get away with header-only, then i don't care if the boost installation is big
[15:39:19] <hans> thanks
[15:40:08] * Haohmaru used kissnet for sockets recently
[15:42:28] <hans> Haohmaru: "A lightweight, header only, crossplatform C++17 socket library." - that sounds cool too, i'll check it out, thanks
[15:46:59] *** Joins: v4mp (~v4mp@user/v4mp)
[15:48:15] <LordKalma> hans, boost has a nice license, you can just use the static libraries version :)
[15:48:18] <LordKalma> no dlls to carry around
[15:49:16] <Haohmaru> i once caried the boost dlls up the 8th floor, my arms fell off
[15:49:35] <LordKalma> usually boos(ters) are the ones doing the carrying
[15:50:09] <Haohmaru> THEY DIDN'T FIT IN THE ELEVATOR
[15:50:26] <LordKalma> Didn't work great for the Challenger crew tho
[15:50:28] <LordKalma> too soon?
[15:51:10] <Haohmaru> hey, those NASA folks who had a potato-grade MCU to do everything
[15:52:26] <Haohmaru> i wonder if my synth's gonna work in space
[15:53:40] <LordKalma> probably wouldn't survive a solar flare
[15:54:23] <Haohmaru> maybe some layers of duct-tape(TM) shielding
[15:56:07] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[15:56:35] <LordKalma> Haohmaru, as long as you don't make an Ariane 5 bug
[15:56:55] <Haohmaru> what's that
[15:57:21] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 248 seconds)
[15:57:21] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:57:35] * Haohmaru twiddles nolyc's bits
[15:57:37] <Haohmaru> !fact
[15:57:38] <nolyc> Haohmaru: The identifier in a sizeof... expression shall name a parameter pack.
[15:57:51] <LordKalma> basically they reused software from Ariane 4 (Ariane is a series of european spacecraft), but that caused an integer overflow on Ariane 5
[15:58:07] <LordKalma> the integer overflow put an error code on the bus, that was not equipped to deal with it
[15:58:10] <Haohmaru> ..on a different processor?
[15:58:20] <LordKalma> so the error code was understood as guideance data
[15:58:25] <LordKalma> so the Ariane 5 went of course
[15:58:34] <LordKalma> and it ended with the self-destruction system blowing up the rocker
[15:58:36] <LordKalma> *rocket
[15:58:36] <Haohmaru> oh
[15:58:48] <LordKalma> *off course anyway
[15:58:57] <LordKalma> that's the TLDR
[15:59:12] <urdh> it triggered a hardware exception but yeah
[15:59:27] <LordKalma> Haohmaru, the problem was not different CPUs. The Ariane 5 was massively more powerful than Ariane 4
[15:59:41] <LordKalma> the sensors/bus weren't recalibrated so that the values fit in the same register
[15:59:47] <Haohmaru> they should've used floating point, amateurs
[15:59:50] <Haohmaru> ;P~
[15:59:58] <urdh> they did, lol
[16:00:10] <Haohmaru> then wtf "integer overflow"
[16:00:28] <urdh> the hardware exception was caused by converting an out-of-range 64-bit floating point number to a 16-bit integer one
[16:00:34] <urdh> that's integer overflow
[16:00:45] <Haohmaru> you could get +/-inf, (q)NaN..
[16:00:45] <LordKalma> https://en.wikipedia.org/wiki/Ariane_flight_V88#Launch_failure
[16:01:06] <Haohmaru> aww
[16:01:16] <Haohmaru> they should've done their mathz better
[16:01:19] <LordKalma> "The active module presented a diagnostic bit pattern to the On-Board Computer which was interpreted as flight data, in particular causing full nozzle deflections of the solid boosters and the Vulcain main engine. "
[16:01:25] <LordKalma> hilarious
[16:02:04] <LordKalma> anyway, it blew up the rocket, plus the payload that consisted on couple satellites from ESA and satellites from research institution that ESA gave a free ride to
[16:02:29] <LordKalma> imagine being in a research institution, starved for resources, building a space-certified payload, and ESA blows it up
[16:02:42] <Haohmaru> "oops"
[16:02:56] <urdh> the issue is not that they did bat math, the issue is that they just kept the dead code without analyzing whether that math would still be correct in the new rocket
[16:03:19] <PJBoy> that's really interesting
[16:03:46] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[16:03:56] <lpapp> hi, is it possible to use a plain function as the comparator for a map?
[16:04:07] <very_sneaky> if only they had a robust continuous integration process
[16:04:10] <urdh> also, sort of unfortunate that they trapped on ieee exceptions but i'm not convinced using a different policy there would be appropriate on a system level...
[16:04:14] <LordKalma> they were starved for resources and made dumb decisions. One of them is letting a system communicate with another system without a sanitization system
[16:04:18] <lpapp> as opposed to using std::function or lambda
[16:04:49] <LordKalma> lpapp, any function pointer with the correct signature should work?
[16:05:40] <lpapp> I must be doing something wrong here then: https://bpa.st/4QZQ
[16:06:02] <lpapp> std::function behind comment works, plain function does not.
[16:06:04] <urdh> meh, at least it's not as bad as the Therac-25 thing
[16:06:45] <lpapp> tried both std::map<std::string, std::string, decltype(caseInsensitiveCompare)> myMap(&caseInsensitiveCompare); and std::map<std::string, std::string, decltype(caseInsensitiveCompare)> myMap(caseInsensitiveCompare);
[16:06:57] <PJBoy> { map<int, int, bool(*)(int, int)> m({{1, 1}, {2, 2}, {4, 4}}, &f); } bool f(int x, int y) { BARK; return x < y; }
[16:06:58] <geordi> f(int, int) f(int, int) f(int, int) f(int, int)
[16:07:34] <LordKalma> lpapp,
[16:07:35] <LordKalma> https://godbolt.org/z/x7Y1366fo
[16:07:40] <PJBoy> you want decltype(&case...) as the template argument
[16:07:43] <LordKalma> I added exactly one character ;)
[16:07:44] <LordKalma> ^that one
[16:07:47] <lpapp> hah
[16:08:14] <LordKalma> lpapp, anyway, use auto to declare templates
[16:08:29] <lpapp> ?
[16:08:41] <LordKalma> and you could have used std::map<std::string, std::function<bool(const string&, const string&)> also
[16:08:53] <LordKalma> std::function<bool(const std::string&, const std::string&)> caseInsensitiveCompare = [] // ....
[16:08:55] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[16:08:56] <PJBoy> mapping strings to functions?
[16:09:07] <LordKalma> use instead auto  caseInsensitiveCompare = [] // ....
[16:09:08] <lpapp> interesting that decltype works on std::function, but not on a plain function
[16:09:24] <LordKalma> PJBoy, I forgot the second string
[16:09:37] <lpapp> LordKalma: I did that behind the comments as you can see
[16:09:39] <PJBoy> problem with `map<..., decltype(func)>` is that decltype(func) is a reference to a function
[16:09:43] <lpapp> but you cannot really use decltype on auto
[16:10:18] <PJBoy> map wants an object, like a pointer, and unlike a reference
[16:10:26] <lpapp> yes, clearly, std::function and plain function are different things for decltype
[16:10:29] <lpapp> which is surprising
[16:10:47] <lpapp> when I use std::function, I do not have to use &
[16:11:21] *** Joins: Leone (~Leo@216.154.4.77)
[16:11:51] <PJBoy> if you std::function variable was declared as a reference, then you'd have the same issue
[16:12:22] <lpapp> hmm
[16:12:55] <LordKalma> https://godbolt.org/z/cEfWhTcEr
[16:13:06] *** Quits: nebula_moe (sid259061@id-259061.uxbridge.irccloud.com) ()
[16:13:35] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 268 seconds)
[16:14:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[16:14:20] <LordKalma> all of these work: https://godbolt.org/z/v61WGTPTr (plus auto lambda)
[16:14:30] <lpapp> LordKalma: the former looks simpler!
[16:15:02] <lpapp> in case of a single use
[16:15:41] <LordKalma> std::map<std::string, std::string, std::function<bool(const std::string&, const std::string&)>> is the most generic you can go
[16:15:48] <LordKalma> becaus std::function can take function pointers OR lambdas
[16:16:03] <PJBoy> move_only_function is more generic
[16:17:07] <PJBoy> I'm surprised btw
[16:17:19] <PJBoy> std::map does seem to be able to use a reference to std::function as its comparator type
[16:17:49] <lpapp> then why not func?
[16:17:51] <LordKalma> wtf is std::move_only_function
[16:18:24] <PJBoy> it does take a reference to function type too
[16:18:37] <lpapp> then why did my original attempt not compile?
[16:18:47] <PJBoy> it's just that decltype(func) for a first-class function gives you neither a reference nor pointer
[16:19:07] <LordKalma> you needed function pointer, and got whatever else
[16:19:26] <PJBoy> <<TYPE<decltype(f)>, TYPE<decltype(&f)>, TYPE<add_lvalue_reference_t<decltype(f)>>; bool f(int, int);
[16:19:27] <geordi> bool(int, int), bool (*)(int, int), bool (&)(int, int)
[16:19:46] <PJBoy> so std::map can work with those last too
[16:19:50] <lpapp> decltype in post c++23 improvement?
[16:19:53] <PJBoy> and the first one can't be used to declare anything
[16:20:54] <PJBoy> decltype's doing the job as advertised tbf
[16:21:04] <PJBoy> decltype(var) gets you the type of var as declared
[16:21:28] <PJBoy> bool f(int, int) up there really is declared as a `bool(int, int)`
[16:21:30] <lpapp> I would like it to advertise itself as decltype(plain_old_func) to return what a comp expects.
[16:21:36] *** Quits: v4mp (~v4mp@user/v4mp) (Ping timeout: 268 seconds)
[16:22:17] <PJBoy> one option you have is to use the decltype(expr) form
[16:22:21] <PJBoy> { map<int, int, decltype((f))> m({{1, 1}, {2, 2}, {4, 4}}, f); cout << TYPE(m); } bool f(int x, int y) { BARK; return x < y; };
[16:22:22] <geordi> f(int, int) f(int, int) f(int, int) f(int, int) lvalue map<int, int, bool (&)(int, int)>
[16:22:47] <PJBoy> that form of decltype gives you a reference because `f` is an lvalue
[16:22:53] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[16:23:13] <PJBoy> probably not what you'd want from std::function in the same context though
[16:24:07] <PJBoy> { map<int, int, decltype((f))> m(f); cout << TYPE(m); } std::function f([](int x, int y) { BARK; return x < y; });
[16:24:08] <geordi> lvalue map<int, int, function<bool(int, int)>&>
[16:24:15] <PJBoy> notice the reference type used for the comparator
[16:25:22] <PJBoy> I'm not sure if there's a decent generic form then?
[16:25:26] <PJBoy> other than std::decay
[16:26:48] * PJBoy likes to rely on CTAD instead
[16:27:11] <LordKalma> shame tjhere isn't partial ctad
[16:27:32] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 260 seconds)
[16:27:33] <LordKalma> map<string,string> foo([](){}); should have been enough :(
[16:28:19] <PJBoy> yeah
[16:28:22] <PJBoy> understandable though
[16:28:32] <LordKalma> NO. I WANT CTAD
[16:28:34] <LordKalma> *partial
[16:28:56] <LordKalma> I want my programming languages with lots of pitfalls
[16:29:30] <LordKalma> npaperbot, search partial ctad
[16:29:31] <npaperbot> Nothing found for: partial, ctad
[16:29:43] <LordKalma> npaperbot, search partial class template argument deduction
[16:29:44] <npaperbot> Nothing found for: partial, class, template, argument, deduction
[16:29:58] <lpapp> life is tough
[16:30:00] <lpapp> :P
[16:30:06] <lpapp> thanks, btw!
[16:34:50] *** Joins: v4mp (~v4mp@user/v4mp)
[16:35:05] <Haohmaru> npaperbot, search partial
[16:35:05] <npaperbot> P2430R0: [Library Evolution] Slides: Partial success scenarios with P2300 <https://wg21.link/p2430r0> (by Christopher Kohlhoff) (2021-08-23) (Related: https://wg21.link/p2430r0/github)
[16:35:05] <npaperbot> Also: P2407R1, P2407R0, P2096R2, P2096R1, P2096R0, P2034R2, P2034R1, P2034R0, P1494R2, P1494R1, P1494R0, P0863R1, P0863R0, P0485R0, P0356R5, P0356R4, P0356R3, P0356R2, P0356R1, P0356R0, P0309R0, N3281, N2955, N1393, ... (27 in total)
[16:35:25] <PJBoy> rest assured there are no proposals for this
[16:36:15] <Haohmaru> npaperbot, print me some money
[16:36:16] <npaperbot> Sorry, I didn't understand that.
[16:36:26] <Haohmaru> yeah, right
[16:37:14] *** Quits: jokoon (~eio@2a01:e0a:542:e160:c53c:c8c0:ea5c:ff3f) (Quit: Leaving)
[16:37:27] <PJBoy> you do have alias templates to the rescue though
[16:38:03] <PJBoy> { map_t m(&f); cout << TYPE(m); } bool f(int x, int y) { BARK; return x < y; }; template<typename F> using map_t = map<int, int, F>;
[16:38:04] <geordi> lvalue map<int, int, bool (*)(int, int)>
[16:38:44] *** Joins: vnf (~vnf@85.174.194.51)
[16:39:02] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[16:39:56] <LordKalma> rustc isn't upstream on llvm's repo
[16:39:58] <LordKalma> just noticed that
[16:43:40] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[16:45:59] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 246 seconds)
[16:53:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[16:54:00] *** Joins: Guest69 (~Guest69@ip68-105-113-105.sd.sd.cox.net)
[16:56:28] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:59:05] <smallville7123> if std::variant cannot do type punning can one use std::variant to reinterpret a float as a 32 bit int
[16:59:09] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[16:59:11] <smallville7123> and vice versa
[16:59:16] <lpapp> not found printed, so still something wrong with the custom comp: https://bpa.st/P6AA
[16:59:21] <smallville7123> or a long to a int[2]
[16:59:25] <smallville7123> and so on
[16:59:32] <smallville7123> as a C Union allows ?
[17:01:12] <PJBoy> C union supposedly allows that in C
[17:01:30] <PJBoy> but it's UB in C++ as are all other in-place type punning methods
[17:02:00] <PJBoy> you want std::bit_cast in C++20 or std::memcpy prior to C++20
[17:02:32] <smallville7123> oof it cant
[17:02:35] <smallville7123> std::variant<int, float> v, w;
[17:02:39] <rpav> or you can write a nice raii pun<T> class
[17:02:44] <smallville7123> w = std::get<int>(v);
[17:02:51] <smallville7123> std::get<float>(w); // w contains int, not float: will throw
[17:03:09] <rpav> though you can't constrain access to the original so you can't ensure it gets optimized out, but you can't really ensure optimizations anyway
[17:03:53] <smallville7123> is this behaviour specific to the definition and behaviour of a variant itself or only std::variant ?
[17:04:03] *** Quits: Cyp (~cyp@213.237.84.236) (Excess Flood)
[17:04:06] <LordKalma> smallville7123, type punning with variants is also not allowed
[17:04:19] <LordKalma> you have to memcpy or bit_cast
[17:04:28] <LordKalma> bit_cast is nice in the sense that it starts the lifetime of the object
[17:04:32] *** Joins: Cyp (~cyp@213.237.84.236)
[17:05:10] <PJBoy> as does memcpy
[17:05:15] <LordKalma> no it doesn't
[17:05:18] <smallville7123> is variant specific to C++
[17:05:20] <PJBoy> it does
[17:05:30] <ville> LordKalma: they DR-ed, or will DR the new rules
[17:05:39] <LordKalma> no. you first create the objewct, then memcpy to it
[17:05:47] <LordKalma> ah interesting
[17:06:05] <lpapp> LordKalma: forgot to highlight you
[17:06:07] <rpav> actually how _is_ memcpy valid with c++'s abstract concept of an object
[17:06:15] <lpapp> maybe you know what is wrong about the comp
[17:06:15] <ville> LordKalma: it's hidden in some committee ballot result paper, and there isn't an actual DR resolution about it
[17:06:24] <LordKalma> because when you do int a; float b; memcpy(&b, &a, sizeof(a)); it's `float b;` that starts the lifetime
[17:06:33] <LordKalma> rpav, standard blessing
[17:06:49] <rpav> LordKalma: "it just works"
[17:06:50] <LordKalma> lpapp, please use godbolt for examples and test code
[17:06:53] <ville> LordKalma: now do it with copying into byte buffers
[17:06:53] <PJBoy> even if b's lifetime wasn't started, memcpy would start it
[17:07:28] <PJBoy> if I knew where memcpy was in the standard I'd prove it
[17:07:31] <rpav> PJBoy: that seems dubious
[17:07:42] <rpav> memcpy doesn't do anything object-lifetime-relevant
[17:07:55] <PJBoy> http://eel.is/c++draft/cstring.syn#3.sentence-2
[17:08:04] *** Joins: proller (~p@2a02:6b8:b081:20::1:2a)
[17:08:46] <LordKalma> what's an implicit creation?
[17:09:15] <rpav> gotta clikc the link
[17:09:21] <PJBoy> it creates an object as per usual
[17:09:39] <PJBoy> for implicitly creatable types
[17:09:51] <PJBoy> http://eel.is/c++draft/intro.object#10
[17:09:58] <rpav> this seems either broken or an exploitable loophole in the standard
[17:10:12] <ville> why not both?
[17:10:16] <LordKalma> well
[17:10:18] <LordKalma> my question is then
[17:10:25] <ville> the c++ object lifetime rules are very complex
[17:10:36] <LordKalma> how can you create a buffer for memcpy to copy to and NOT start lifetime?
[17:10:38] <PJBoy> bit_cast also implicitly creates objects, malloc, and std::allocator::allocate
[17:10:59] <ville> LordKalma: object of different type. you have array of bytes and start a float there
[17:11:16] <LordKalma> and how is that related to memcpy?
[17:12:08] <rpav> what's the simple thing where not having an object created would have a visible effecta
[17:12:09] <ville> LordKalma: see the second link PJBoy pasted
[17:13:00] <rpav> PJBoy: ok actually i think the correct reading of this is probably that it creates _character_ objects in the destination region
[17:13:24] <ville> "have to do X, unless the rest of the following 1500 pages makes it defined. good luck"
[17:13:27] <rpav> not that if e.g. you're memcpy to a float, it creates a float object, because that's impossible and nonsensical
[17:13:37] <PJBoy> it creates whatever allows for well defined behaviour
[17:13:38] <LordKalma> I mean, I can understand this example: http://eel.is/c++draft/intro.object#12
[17:13:39] <rpav> but it _is_ sensical that it implicitly creates `n` char
[17:13:49] <PJBoy> so if you access those bytes as a float afterwards, then it created a float
[17:13:56] <ville> rpav: sense has nothing to do with this discussion
[17:14:21] <LordKalma> PJBoy, so you can literally type-pun to anything *after* memcpying into a buffer?
[17:14:25] <rpav> PJBoy: no, that's not necessary, because the float is already created, and as elsewhere you can always access an object by char
[17:14:41] <ville> rpav: no you can't
[17:14:57] <rpav> why don't i have ville on ignore again
[17:15:07] <LordKalma> because, like, int a[]; float b[]; memcpy(b, a), it's float b[] that starts an array of floats, not memcpy
[17:15:20] <PJBoy> nah like if you have a `char buf[n]; memcpy(buf, obj, obj_size); float& f = *(float*)buf;`
[17:15:26] <PJBoy> then memcpy created a flat
[17:15:29] <PJBoy> float
[17:15:34] <Haohmaru> /ignore is for the weak
[17:15:51] <lpapp> LordKalma: no idea how to use godbolt
[17:15:54] <LordKalma> so you're saying that int a[]; float b[]; memcpy(b, a); (double*)b[0] is well defined? beacuse the memcpy happened?
[17:16:02] <rpav> Haohmaru: i actually have a nicer system than pure ignore
[17:16:03] <PJBoy> yeah
[17:16:23] <LordKalma> lpapp, https://godbolt.org/z/3K3648P3h start from here. Paste whatever code. Click the "share button" on the top right, and send us the link
[17:16:38] <LordKalma> share the new link every time you change anything
[17:17:06] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 268 seconds)
[17:17:07] <smallville7123> a C union is equvilant to a std::variant with type punning capabilities, right?
[17:17:10] <lpapp> LordKalma: https://godbolt.org/z/GEcTeesEq
[17:17:10] <LordKalma> okay, the fact memcpy allows you to type put to whaatever you want in a buffer that was memcpied into is... interesting
[17:17:19] <LordKalma> smallville7123, a C union is a C++ union
[17:17:26] <LordKalma> the unions don't know what they are holding
[17:17:29] <LordKalma> the std::variant knows
[17:17:33] <PJBoy> it's what people want from memcpy
[17:17:36] <ville> LordKalma: no they are not. c allows punning. c++ doesn't
[17:17:44] <LordKalma> and yes, C unions allow type punning
[17:17:52] <PJBoy> people make these assumptions about memcpy anyway, so might as well legalise it
[17:18:20] <LordKalma> PJBoy, well, I thought, and I what I see around is that people understand, like in my example, is that it is the float b[] that creates lifetime
[17:18:28] <LordKalma> didn't know about this
[17:18:30] <LordKalma> interesting
[17:18:37] <smallville7123> yea, but if std::variant DID allow type punning then it would basically be a type-safe union, right?
[17:18:40] <PJBoy> float b[] does also create a lifetime
[17:18:48] <PJBoy> memcpy will replace that lifetime if it needs to
[17:19:33] <LordKalma> lpapp, so tests 1, 2 and 4 file
[17:19:39] <LordKalma> fail*
[17:19:49] <smallville7123> as in a C union, each type name is simply an identifier for the type itself, and makes no difference if multiple identifiers of the same type appear, but C simply has no such "template/generic" way of specifying such type
[17:20:04] <smallville7123> right?
[17:20:50] <lpapp> LordKalma: yes, why 1-2
[17:21:09] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[17:21:24] <lpapp> LordKalma: the comp implementation looks alright to me
[17:21:32] <rpav> was http://open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3751.pdf superseded? it's 2013
[17:22:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42) (Ping timeout: 248 seconds)
[17:22:09] <lpapp> LordKalma: caseInsensitiveCompare("foo", "Foo") returns yes
[17:22:18] <PJBoy> npaperbot search implicit object
[17:22:19] <npaperbot> P0593R6: [Evolution, Core, Library] Implicit creation of objects for low-level object manipulation <https://wg21.link/p0593r6> (by Richard Smith, Ville Voutilainen) (2020-02-14) (Related: https://wg21.link/p0593r6/github)
[17:22:19] <npaperbot> Also: P0593R5, P0593R4, P0593R3, P0593R2, P0593R1, D0593R6, D0593R4
[17:22:24] <Haohmaru> rpav what could that possibly be
[17:22:25] <lpapp> so, something, I guess, about how I set up the comp.
[17:23:21] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.4.1)
[17:25:45] <lpapp> LordKalma: not working even with std::function
[17:26:13] <rpav> so _prior to c++20_ by the looks, it was UB
[17:27:42] <rpav> i'm not sure waht P0593R6 grants yet though but it seems to be the only other relevant thing
[17:29:21] <rpav> this still seems exploitable
[17:30:22] <LordKalma> lpapp, honestly, I'm also surprised
[17:30:44] <lpapp> yeah...
[17:30:51] <LordKalma> let's see if our colleagues can help: https://godbolt.org/z/3ezfocja1
[17:30:53] <LordKalma> cough PJBoy
[17:30:53] <lpapp> cookie award for the winner who finds the bug? :P
[17:31:42] <PJBoy> got meetings for the next hour
[17:34:47] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:829c:c5ed:b007:1abf) (Quit: Konversation terminated!)
[17:36:09] <LordKalma> caseInsensitiveCompare("bananas", "BaNNanAS");   fails
[17:36:49] <LordKalma> that's because I got the NN instead of N
[17:36:51] <LordKalma> nevermind
[17:37:25] <Raziel> LordKalma, a map takes a comparison operator, not an equality one
[17:37:35] <Raziel> comparison returns 0 if things are equal, not true (1)
[17:37:49] <Raziel> you're returning true
[17:38:23] <Haohmaru> << "ba" << -sqrt(-1) << "as";
[17:38:24] <geordi> bananas
[17:38:32] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[17:38:36] *** Quits: dld (~davidlowr@2601:197:600:1210:295d:ca2a:3a31:19f2) (Ping timeout: 240 seconds)
[17:38:52] <Raziel> or rather, I guess comparison returns true if the first argument is before/lower than the second
[17:38:55] <Raziel> and false otherwise.
[17:39:01] <Raziel> https://en.cppreference.com/w/cpp/named_req/Compare
[17:39:05] <LordKalma> that's for lpapp
[17:39:54] <lpapp> Raziel: got the original idea from here, are you saying this post is wrong? https://stackoverflow.com/a/4119881/2682142
[17:40:20] <LordKalma> For all a, comp(a,a)==false
[17:40:20] <lpapp> Ah, sorry, that was not written for map, so that is ok
[17:40:22] <Raziel> lpapp, no, the function itself is fine, it's just using it as a map's comparison function is wrong
[17:40:22] <LordKalma> oh for fucks sake
[17:40:50] <LordKalma> who the fuck takes a function called comp and then tells For all a, comp(a,a)==false
[17:40:52] <Raziel> because that doesn't do what you seem to think it should
[17:41:01] <lpapp> Raziel: I see what you mean here, https://stackoverflow.com/questions/1801892/how-can-i-make-the-mapfind-operation-case-insensitive
[17:41:07] <lpapp> return ::strcasecmp(a.c_str(), b.c_str()) < 0;
[17:41:14] <lpapp> so, I need to add a <0
[17:41:49] <lpapp> return std::tolower(a) < std::tolower(b);
[17:41:53] <lpapp> this made it work, thanks.
[17:41:59] <LordKalma> "yields true if the first argument of the call appears before the second in the strict weak ordering relation induced by this type, and false otherwise. "
[17:42:04] <Raziel> yeah that's probably the most straightforward way to do it
[17:42:11] *** Parts: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) ()
[17:42:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:43:17] <LordKalma> https://godbolt.org/z/Mes6brxvM
[17:43:21] <LordKalma> fucking C++ standard
[17:43:34] <lpapp> Raziel: you are eligible for a cookie
[17:43:56] <lpapp> what is wrong about the c++ stnadard?
[17:44:15] <LordKalma> you are eligible for cookie stealing for visit XSS-vulnerable websites
[17:44:35] <lpapp> :D
[17:44:47] <Raziel> LordKalma, lol, std::equal still has no place being in there
[17:44:53] *** Joins: Gvidon (~Gvidon@user/gvidon)
[17:44:57] <Raziel> make another test searching for something that isn't in the map, it still returns foo
[17:45:13] <LordKalma> hahah amazing
[17:45:35] <Raziel> in my case, I did .find("lol")
[17:45:38] <Raziel> found it just fine as foo :p
[17:45:44] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 272 seconds)
[17:45:51] <lpapp> so, a custom loop then, right?
[17:45:53] <lpapp> rather than std::equal
[17:46:10] <LordKalma> you have to first make the lower case string
[17:46:22] <LordKalma> and then compare them
[17:46:37] <Raziel> lpapp, probably, or std::transform both strings to lower then just compare them directly
[17:46:42] <Raziel> yeah, that
[17:46:44] <LordKalma> yap
[17:46:47] <lpapp> it is slower
[17:46:50] <lpapp> but prolly micro opt.
[17:47:27] <lpapp> in that case though, the comp loses its meaning, right?
[17:47:38] <lpapp> I could just do transform and tolower at insertion and once at lookup?
[17:47:56] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[17:48:04] <LordKalma> return std::tranform(a.begin(), a.end(), [](auto x){return std::tolower(x);} <  std::tranform(b.begin(), b.end(), [](auto x){return std::tolower(x);}
[17:48:06] <lpapp> the whole idea was to avoid double tolower
[17:48:06] <LordKalma> something like that
[17:48:10] <Raziel> sure, I guess
[17:48:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[17:48:23] <LordKalma> no double tolower in there
[17:48:39] <LordKalma> assuming std::string's operator< does the weak ordering thing
[17:49:10] <Raziel> LordKalma, that won't use std::string's operator<
[17:49:17] <Raziel> cause transform returns an iterator to past the last transformed element
[17:49:20] <Raziel> V:
[17:49:24] <LordKalma> ah for fucks sake hahah
[17:51:32] <Raziel> transform also won't work on a const reference, for obvious reasons, so uh, have fun with those copies too :p
[17:51:42] <rpav> 1) if `int i; char* ptr = (char*)&i; float* f = (float*)f;` would only be valid if you created an int object and the float provided space for the int 2) memcpy implicitly creates objects if doing so would give the program defined behavior 3) memcpy can copy 0 bytes
[17:51:53] <lpapp> darn
[17:52:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:52:33] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Ping timeout: 248 seconds)
[17:53:06] *** Joins: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com)
[17:53:36] <LordKalma> https://godbolt.org/z/f4r6dnTGe
[17:53:37] <LordKalma> THERE
[17:53:38] <LordKalma> ffs
[17:54:18] <Raziel> haha blower
[17:54:19] <Raziel> :^)
[17:54:28] <lpapp> std::string aLower = a; std::string bLower = b; std::transform(aLower.begin(), aLower.end(), aLower.begin(), [](unsigned char c){ return std::tolower(c); }); std::transform(bLower.begin(), bLower.end(), bLower.begin(), [](unsigned char c){ return std::tolower(c); }); return aLower < bLower;
[17:54:31] *** Quits: cahoots (~cahoots@cpe-24-193-233-195.nyc.res.rr.com) (Client Quit)
[17:55:12] <LordKalma> lpapp, check the latest godbolt link
[17:55:33] <lpapp> yeah, it is the same more or less
[17:56:01] <LordKalma> auto x is a great way for you to not worry about the exact type of the argument in <algorithm>s
[17:57:32] <lpapp> thanks
[17:57:34] <rpav> or the exact type of a lot of things, like for(std::some_long<template_of,various,bullshit>::const_iterator i = ...;
[17:57:49] <Raziel> rpav, lol, EnTT views say hi
[17:58:00] <Raziel> I have to auto template deduce if I wanna pass one of those anywhere
[17:58:15] <Raziel> I tried to figure out the actual template for one specifically, and I don't think I succeeded
[17:58:44] <rpav> to be fair you can using them, and i have before, but pre-11 you'd still have to type it out once and using alias types is not necessarily more legible
[17:59:17] <rpav> (since you start having to come up with a standard naming scheme for all the things you alias, which tends to grow toward the original anyay)
[18:00:16] <LordKalma> I can't imagine a world with iterator types and no auto
[18:00:35] <rpav> it was pretty shitty; for(;;) often took 2-3 lines
[18:00:51] <PJBoy> you just make a type alias
[18:00:57] <rpav> see above
[18:01:58] <rpav> like you start doing it consistently and you have `typedef std::vector<int> VectorInt; typedef VectorIntIterator VectorInt::iterator;` and then you're really not writing much less
[18:03:12] <Raziel> rpav, pls no
[18:03:41] <rpav> well the point is `auto` was a vast QoL improvement and should not be underrated
[18:04:11] <Raziel> I remember when people were like "auto is gonna turn C++ into python/js!!111one"
[18:04:17] <Raziel> good times v:
[18:04:37] <rpav> people are too OCD about
[18:04:47] <rpav> ...explicitly typing types
[18:04:55] <LordKalma> because automatic type deduction is the same as no-type bound variables and duck typing /s
[18:05:00] <rpav> ^
[18:05:04] <Raziel> indeed
[18:05:18] <Raziel> I mean, I like explicit typing in a lot of places... but at the same time, I'm also exceedingly lazy
[18:05:23] <Raziel> so, this works out.
[18:05:32] <LordKalma> {auto a = 1; a = "bananas";} // yap, python
[18:05:32] <geordi> error: invalid conversion from 'const char*' to 'int'
[18:05:35] <LordKalma> ohhh :(
[18:05:43] <rpav> LordKalma: technically different things but yeah
[18:05:51] <rpav> we _should_ be able to do that
[18:05:56] <smallville7123>  so, basically a union is just a punnable variant (simplified), it does not make sence to create a named mapping since duplicate types of different names are simply aliased to eachother
[18:06:06] <smallville7123> as it*
[18:06:08] <LordKalma> NO
[18:06:18] <LordKalma> C++ unions are *not* legally type-punninh
[18:06:19] <Raziel> smallville7123, wat r u doin
[18:06:23] <rpav> but we should have a `a := 1; a := "foo";` such that := is "makes a new variable"
[18:06:26] <LordKalma> they just don't know what type they are holding
[18:06:30] <LordKalma> they make it YOUR problem
[18:06:34] <smallville7123> LordKalma: thats why i have "(simplified)"
[18:06:35] <Raziel> LordKalma, yeah, but everyone does it anyway because doing it bitwise is too damn long
[18:07:03] <rpav> i.e. you can re-bind `a` to a new object, and it has a new type, in a new place
[18:07:06] <LordKalma> I'm going to write a CÂ´++ compiler that does crappy things in all common UB scenarios
[18:07:14] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[18:07:17] <LordKalma> type pun via an union? call operator++
[18:07:19] <smallville7123> LordKalma: what would be the correct term then?
[18:07:39] <LordKalma> unions are unions and variants are type-safe unions
[18:07:46] <Raziel> it is the correct term
[18:07:48] <smallville7123> as std::variant is very close except it cannot be type punned
[18:07:49] <Raziel> it's just technically UB
[18:07:50] <Raziel> >_>
[18:08:00] <LordKalma> neither chan union
[18:08:03] <LordKalma> arae you even listening?
[18:08:04] <LordKalma> ffs
[18:08:12] <LordKalma> I can't write also, apparently
[18:08:22] <smallville7123> XD
[18:08:22] <Raziel> it *can* though, in practice
[18:08:27] <LordKalma> shhhh
[18:08:30] <Raziel> but, yeah, it's UB, in theory
[18:08:31] <smallville7123> Raziel: yea
[18:08:32] <LordKalma> we talk standard C++ here
[18:08:44] <smallville7123> tho only within reason
[18:08:59] <LordKalma> but yeah, I would even bet all compilers promise to be nice in that specific case
[18:09:28] <Raziel> I've not seen any compiler and platform where it doesn't work
[18:09:42] <Raziel> but yeah, ymmv, theoretically UB, here be dragons and spiders and shit
[18:09:56] <LordKalma> and it's not like every major library does something "technnically UB" anyway
[18:09:56] <smallville7123> or rather, a generic... auto bitcasting... variant ?
[18:10:14] <LordKalma> no
[18:10:29] <LordKalma> if we think about it, __declspec(export) is not standard C++
[18:10:41] <LordKalma> so every time you're doing that in MSCS you're not compiling standard C++
[18:10:54] <Raziel> I don't think compiler extensions and UB are the same thing...
[18:10:56] <LordKalma> equivalent applied to GCC and Clang
[18:10:58] <rpav> smallville7123: the "better" way to do type punning is to copy an object by bytes into the type you want, muck with that, then copy it back, and the compiler more or less optimizes out any intermediate space
[18:10:59] <Raziel> but yes, it's not standard :p
[18:11:11] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[18:11:12] <smallville7123> Raziel: yea
[18:11:13] <LordKalma> Raziel, the point being that compiler extensons aren't "standard" C++
[18:11:26] <LordKalma> so compilers can do "the standard says this, and we do this extra"
[18:11:54] <rpav> every compiler i've seen optimizes that and memcpy is basically a barrier notation to the compiler, as long as you don't also touch the original object
[18:12:18] *** Joins: ivii (~ivan@user/ivii)
[18:12:35] <LordKalma> yeah, compilers trim away memcopies
[18:13:27] <rpav> wtf can't i search my github gists
[18:15:36] <smallville7123> rpav: oof
[18:16:16] <LordKalma> https://godbolt.org/z/f6EoPjx88
[18:16:19] <PJBoy> re type aliases for iterators
[18:16:21] <LordKalma> curiouslt enough, it didn't
[18:16:41] <PJBoy> you'd just write `using it_t = decltype(vec)::iterator;` or whatever
[18:16:49] <LordKalma> https://godbolt.org/z/xrbMfEvWM
[18:16:50] <LordKalma> clang does
[18:16:53] <LordKalma> :D win for clang
[18:16:54] <PJBoy> doesn't need to be a non-local typedef
[18:17:16] <smallville7123> why doesnt std have a std::union type ?
[18:17:42] <LordKalma> PJBoy, see? clang good :D
[18:17:51] <smallville7123> that is similar to std::variant except it is type punnable and retains the same qualities as a C/C++ union
[18:18:20] <PJBoy> yeah clang's real good
[18:18:22] <LordKalma> because C++'s object model's whole point is to NOT do that
[18:18:26] <PJBoy> it has great potential
[18:18:35] <smallville7123> rip
[18:19:01] <LordKalma> you can't just type pun in C++,. you have to handle lifetime rules
[18:19:23] <PJBoy> you can type pun with memcpy / bit_cast
[18:19:32] <LordKalma> because they handle lifetime :)
[18:19:52] <PJBoy> we just don't want to allow aliasing of differently typed objects
[18:20:01] <LordKalma> true
[18:20:23] <PJBoy> so if you memcpy, then that's not aliasing anymore, and we'r ehappy
[18:20:49] <LordKalma> and even without thinking about strict aliasing, with the C++'s object model, how would you define lifetime in a union where type punning is allowed? thtey all live the whole lifetime of the union?
[18:20:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42)
[18:20:59] <LordKalma> they, all the union types
[18:21:56] <PJBoy> yeah you'd just allow all objects to be alive, limit them to implicit lifetime types, and disallow optimisations based on knowing the type
[18:22:04] <smallville7123> basically it should only allow type punning of primative types
[18:22:11] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:22:35] <PJBoy> but there's not much demand for type punning in real code, so eh
[18:23:05] <smallville7123> PJBoy: there is in https://elixir.bootlin.com/musl/v1.2.2/source/src/math/hypot.c :)
[18:23:16] <PJBoy> C is fake code
[18:23:16] <smallville7123> which IS real code :)
[18:23:19] <smallville7123> oof
[18:23:27] <LordKalma> pffff
[18:23:43] <LordKalma> C needs to do that kind of shit because C has no idioms to actually write expressive coe
[18:23:49] <LordKalma> *code
[18:23:55] <PJBoy> ideally you'd just bit_cast and it would be even simpler
[18:25:10] <smallville7123> :)
[18:25:22] <LordKalma> I've seen unions in C used as "polymorphism"
[18:25:34] <LordKalma> just union a couple structs because only one of them will be needed, and put an if in there
[18:25:47] <PJBoy> `auto uxi = bit_cast<uint64_t>(x) & -1ull>>1;`
[18:26:33] <LordKalma> I love it. C programmers loves to shit on C++ to then just implement the same features but worse
[18:29:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:30:39] <PJBoy> just wait for C lambdas
[18:32:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:33:22] *** Joins: dld (~davidlowr@107.126.253.180)
[18:33:36] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[18:36:02] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 268 seconds)
[18:38:41] *** Quits: proller (~p@2a02:6b8:b081:20::1:2a) (Ping timeout: 245 seconds)
[18:39:07] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 268 seconds)
[18:40:22] *** Joins: SaltHilStroller_ (~SaltHillS@199.249.111.186)
[18:40:37] *** Joins: dld (~davidlowr@107.126.253.180)
[18:40:45] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:43:13] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:43:21] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::102:b65c)
[18:43:30] <rpav> no wonder i can't find anything, it's 4/04
[18:44:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:45:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:45:04] *** ChanServ sets mode: +v npaperbot
[18:45:58] *** Joins: Cyp_ (~cyp@213.237.84.236)
[18:46:23] *** Quits: Cyp (~cyp@213.237.84.236) (Ping timeout: 260 seconds)
[18:46:32] *** Quits: SaltHilStroller_ (~SaltHillS@199.249.111.186) (Ping timeout: 272 seconds)
[18:47:59] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::102:b65c) (Ping timeout: 256 seconds)
[18:48:16] <PJBoy> >:(
[18:49:51] *** Joins: proller (~p@2a02:6bf:fff0:1:9287:1625:4183:ccf2)
[18:50:44] <rpav> it's too bad you can't extract parameter names from lambdas with __PRETTY_FUNCTION__ .. and worse we don't simply have good compile-time reflection
[18:54:07] <PJBoy> you don't get them anyway
[18:54:17] <PJBoy> { f({}, {}); } void f(int a, float b) { cout << __PRETTY_FUNCTION__; }
[18:54:17] <geordi> void f(int, float)
[18:55:06] <rpav> right
[18:56:22] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.4.1)
[19:03:02] *** Quits: Cyp_ (~cyp@213.237.84.236) (Quit: Konversation terminated!)
[19:03:29] *** Quits: proller (~p@2a02:6bf:fff0:1:9287:1625:4183:ccf2) (Ping timeout: 248 seconds)
[19:04:03] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:06:13] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[19:06:20] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 246 seconds)
[19:06:47] *** Joins: proller (~p@2a02:6b8:0:40c:7ebf:9b54:ebb8:6daa)
[19:07:46] *** Joins: rajkosto (~rajkosto@93-87-175-157.dynamic.isp.telekom.rs)
[19:07:51] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[19:13:45] *** Quits: Cyp_ (~cyp@213.237.84.236) (Excess Flood)
[19:14:17] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:15:27] *** Quits: jellyknight (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[19:16:45] *** Joins: Mat_42 (~mat_42@2001:1458:204:1::102:b65c)
[19:17:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[19:18:17] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:18:17] <rpav> argh, hrm
[19:21:25] *** Quits: Mat_42 (~mat_42@2001:1458:204:1::102:b65c) (Ping timeout: 256 seconds)
[19:22:00] *** Joins: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[19:28:33] *** Joins: dld (~davidlowr@2620:6e:6000:2900:38c1:e5a4:b065:9eb3)
[19:45:39] *** Quits: rajkosto (~rajkosto@93-87-175-157.dynamic.isp.telekom.rs) (Quit: Leaving)
[19:49:35] *** Joins: xkuru (~xkuru@user/xkuru)
[19:50:08] *** Joins: Mat_42 (~mat_42@194.12.130.217)
[19:54:58] *** Quits: Mat_42 (~mat_42@194.12.130.217) (Ping timeout: 268 seconds)
[19:55:17] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[20:05:07] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[20:07:16] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:14:44] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[20:16:48] *** Joins: ville (~ville@user/ville)
[20:21:22] *** Joins: sonic (~sonic@user/sonic)
[20:21:38] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:21:49] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Remote host closed the connection)
[20:22:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:24:05] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[20:26:32] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[20:31:35] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:36:06] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[20:38:09] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:39:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00) (Ping timeout: 260 seconds)
[20:40:49] <Haohmaru> !rq
[20:40:49] <nolyc> Haohmaru: <xkoncek> too bad there won't be c++69
[20:41:14] <LordKalma> !rq
[20:41:14] <nolyc> LordKalma: <PJBoy> `$(CC) -c -o $@ $< $(CFLAGS)` makes jesus cry
[20:41:53] <Haohmaru> jesus gonna tell his mommy
[20:54:06] *** Joins: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[20:59:52] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:02:15] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:08:32] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[21:08:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:09:14] *** Quits: andreasbuhr (~quassel@p549dbec6.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:15:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:21:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42) (Ping timeout: 248 seconds)
[21:22:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:23:03] *** Joins: meator (~meator@user/meator)
[21:23:13] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:9056:bc03:7a33:55af)
[21:23:13] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:9056:bc03:7a33:55af) (Changing host)
[21:23:13] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:24:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:27:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:28:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:31:33] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[21:36:42] *** Joins: BobRosses (~BobRoss@2600:8805:ab00:2b:3515:b4e2:1ab4:49ce)
[21:40:02] *** Joins: vnf (~vnf@85.174.194.51)
[21:52:09] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[21:53:38] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 246 seconds)
[22:05:21] *** Quits: BobRosses (~BobRoss@2600:8805:ab00:2b:3515:b4e2:1ab4:49ce) (Remote host closed the connection)
[22:14:19] <rpav> there's no easy std container that can be an easy map key / has operator< is there
[22:14:39] <rpav> (not counting tuple / pair which shouldn't be considered containers)
[22:17:41] *** Joins: paul424 (~tom@ip-5-172-233-229.multi.internet.cyfrowypolsat.pl)
[22:18:51] <PJBoy> all of them?
[22:19:12] <rpav> ðŸ¤”
[22:19:52] <rpav> whoa. huh. i did not remember e.g. vector had operator<
[22:20:05] <PJBoy> { map<vector<int>, int> m{pair{vector{1, 2, 3}, 0}, pair{vector{1, 2, 4}, 1}, pair{vector{1, 2, 5}, 2}}; SHOW((m[{1, 2, 3}])); }
[22:20:06] <geordi> (m[{1, 2, 3}]) = 0
[22:20:46] <rpav> too bad there's not a dynarray ;/ all those useless pointer fields
[22:23:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:25:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[22:26:17] <rpav> { S s("foo"); } /* reason not to shadow parameters */ struct S { string s; S(string s) : s(std::move(s)) { cout << "s = "; } };
[22:26:18] <geordi> warning: declaration of 's' shadows a member of 'S'
[22:27:32] <rpav> and even if you don't use it in the body, you might potentially use it directly or otherwise in the member initializer list
[22:29:27] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[22:30:30] *** Joins: teepee (~teepee@openscad/teepee)
[22:32:02] <PJBoy> I will always disable shadowing warnings because of that usage
[22:32:27] <PJBoy> probably for any other usage of shadows too
[22:32:36] <PJBoy> yeah screw that warning
[22:35:01] <rpav> it's not default anyway
[22:35:11] <rpav> you should be pretty careful if you shadow parameters like that though
[22:35:20] <rpav> shadow with
[22:38:23] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[22:44:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:45:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:45:06] *** ChanServ sets mode: +v npaperbot
[22:47:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:47:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:48:28] *** Joins: kkd (uid425746@id-425746.lymington.irccloud.com)
[22:48:33] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[22:49:07] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[22:52:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7092:94e7:8ad0:d7f4) (Ping timeout: 240 seconds)
[22:53:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3f:bc36:fa50:982)
[22:53:53] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 248 seconds)
[22:53:53] *** Quits: proller (~p@2a02:6b8:0:40c:7ebf:9b54:ebb8:6daa) (Ping timeout: 248 seconds)
[23:04:15] <Alipha> LordKalma: you really should do `std::lower(a[i]) < std::lower(b[i])` in a loop so that you can short circuit behavior and no additional allocations
[23:04:19] *** Joins: seninha (~seninha@user/seninha)
[23:06:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:09:05] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[23:10:27] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[23:18:31] *** Joins: paule32_ (~paul@nat-91-137-17-30.net.encoline.de)
[23:18:31] *** Quits: paule32_ (~paul@nat-91-137-17-30.net.encoline.de) (Changing host)
[23:18:31] *** Joins: paule32_ (~paul@user/paule32)
[23:21:43] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 260 seconds)
[23:24:16] <paul424> What's up with uint32 ? I got CreatureEffectDigTile(uint32_t nbTurnsEffect, double effectValue, const std::string& particleEffectName) I can instantiate  new CreatureEffectDigTile(-1, 1.0, "Examples/Smoke");
[23:24:35] <paul424> why the compiler doesn't issue any warnings nor errors ?
[23:24:53] *** Joins: proller (~p@80.240.216.69)
[23:26:53] <Alipha> paul424: -Wsign-conversion
[23:28:28] <Alipha> i generally don't recommend it because then you also get warnings for stuff like `my_signed_int + my_unsigned_int` or `my_signed_int < my_unsigned_int`
[23:28:51] <TinoDidriksen> Which you should get warning about.
[23:29:03] <rpav> ^
[23:29:06] <paul424> oki many thanks :D
[23:29:16] <rpav> better: -Werror=sign-conversion
[23:29:23] <Alipha> and while i advocate for using the same signness of variables whenever possible, in reality, that is rather difficult
[23:29:50] <TinoDidriksen> It's not difficult. Turn on warnings, fix warnings with the correct static_cast
[23:29:51] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:31:07] <rpav> static_cast is so long to type; as_s<T> / as_u<T> with deduction
[23:31:44] <TinoDidriksen> The minimum is -Wall -Wextra and fix all warnings, or selectively disable ones you know are superfluous in your codebase. But -Wall -Wextra is a very good basis.
[23:32:01] <rpav> (there's already std::make_signed / make_unsigned which you can shortcut)
[23:32:02] <Alipha> -Wsign-conversion isn't part of either
[23:32:31] <rpav> TinoDidriksen: -W might add some more though not sure; also don't forget -pedantic-errors
[23:32:45] <Alipha> -W is the same as -Wextra
[23:32:57] <rpav> or /permissive- if you're subject to that
[23:33:01] <rpav> Alipha: ah cool
[23:33:06] <TinoDidriksen> Not a fan of -Werror. That's fine for a local build, but don't commit -Werror
[23:33:15] <rpav> -Werror is good for some errors
[23:33:45] <rpav> -Werror=return-type should be soemthing everyone uses as it's always a crash error
[23:34:20] <rpav> unless your code is so convoluted the compiler can't tell (something i've not actually run into), in which case make your code clearer
[23:35:54] <TinoDidriksen> Ah, -Wsign-compare is part of -Wall -Wextra; you're right that -Wsign-conversion is not.
[23:37:09] <TinoDidriksen> I wonder if that's old enough now to be widely usable. It's gone through a few names.
[23:38:09] <TinoDidriksen> Oh, no, that was the -Wcoercion to -Wconversion thing.
[23:39:29] <PJBoy> problem with -Werror=return-type is that it'll trigger on exhaustive switch cases
[23:40:45] <PJBoy> and std::unreachable() is C++23
[23:41:49] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[23:42:21] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[23:44:14] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[23:44:56] *** Joins: proller (~p@80.240.216.69)
[23:46:41] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 248 seconds)
[23:46:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 248 seconds)
[23:47:26] <rpav> exhaustive switch cases?
[23:47:56] <PJBoy> yeah like `int f(int x) { switch (x) { case 0: return 0; case 1: return 1; ... } }`
[23:48:01] <rpav> it has not triggered on cases where i've had every available enum value
[23:48:02] <PJBoy> where you cover all the cases
[23:48:13] <rpav> and you can always toss a return {}; at the end if it does
[23:49:16] <PJBoy> https://godbolt.org/z/6vsMM1n8Y for enum example
[23:49:54] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 272 seconds)
[23:49:57] <rpav> that's not an example
[23:50:09] <PJBoy> you could add a return at the end, but then you might get a dead code warning
[23:51:30] <rpav> or maybe gcc just sucks
[23:52:30] <rpav> looks like gcc just sucks
[23:52:36] <PJBoy> Werror bad in any case
[23:52:46] <rpav> gcc bad in any case
[23:52:52] <PJBoy> just acknowledge your warnings
[23:53:19] <PJBoy> and then you don't have to rebuild just because of some stupid warning
[23:53:21] <rpav> yeah it's easy to miss warnings if they scroll by in thousands of files building
[23:53:42] <rpav> and anyway if you must you can add a return {}; at the end and gcc will be fine
[23:53:49] <PJBoy> disable your warnings if you don't care enough to fix them
[23:54:05] <rpav> yeah easy to say if you're dealing with trivial code and not a bunch of 3rd party stuff
[23:54:20] <PJBoy> disregard third party warnings
[23:54:39] <rpav> i agree code should be warning-free but getting it as such is not always practical, and return-type is a _very_ specifically bad thing
[23:54:49] <rpav> even the name is terrible ;)
[23:55:06] <rpav> (another way to avoid such is using default:)
[23:55:21] <PJBoy> but using default cripples other warnings
[23:55:25] *** kenanmarasli_ is now known as kenanmarasli
[23:55:26] <PJBoy> like unused enum cases
[23:55:32] <PJBoy> unwritten rather
[23:55:49] <rpav> moral: avoid gcc
[23:56:02] <PJBoy> now who's being unpractical :p
[23:56:20] <PJBoy> in 2030 clang's still gonna be stuck on C++17
[23:56:23] <rpav> well the reality is you can easily fix such cases even with gcc
[23:57:10] <rpav> and if you must gcc has an unreachable builtin you can #define something for in extreme and unusual cases
[23:57:18] <PJBoy> you can easily fix the warning yeah, it just sucks that you have to rebuild
[23:57:27] <rpav> rebuild?
[23:57:30] <rpav> what do you have to rebuild?
[23:57:36] <PJBoy> because you made the warning an error
[23:57:39] <PJBoy> so your build stops
[23:57:43] <rpav> you had a literal error in your code, you _needed_ to rebuild
[23:57:56] <PJBoy> there's no error in the godbolt I wrote
[23:58:10] <PJBoy> and even if there was, it might not be relevant to the code I'm testing
[23:58:17] <rpav> yeah and it's a highly contrived case you will almost never run into, and boo hoo if you do and have to recompile an entire file :p
[23:58:20] <rpav> do you even write C++
[23:58:49] <PJBoy> if it's in a header then it'll trigger more than a single file recompile
[23:59:24] <PJBoy> etc.
[23:59:33] <rpav> this is the idiotic attitude that infects too much of C++ already .. "there _MIGHT_ be this _ONE_ highly unusual case that you'll almost never run into, but hypothetically you might, so let's make things less useful and more error prone just in case so you can avoid having to do some trivial amount of work in the improbable case you encounter it"
[23:59:37] <PJBoy> it's not the slightest bit contrived
[23:59:46] <PJBoy> it's the only time you'll ever run into this warning in practice
[23:59:53] <fiesh> of course gcc handles the switch case correctly
[23:59:58] <fiesh> you just need to add -fstrict-enums
