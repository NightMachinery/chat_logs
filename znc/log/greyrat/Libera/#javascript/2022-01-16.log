[00:03:49] <Maxdamantus> FlorianBad: you can't necessarily modify the browser's `ctx` (`CanvasRenderingContext2D`) object.
[00:04:24] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[00:07:01] <Maxdamantus> FlorianBad: you'd usually just pass down your own parameter, either by putting all of your drawing functions into a single class (so you can use eg `this.ctx.stroke(); this.someState += 4; this.custom();`), or if there's no shared state you'd probably just write all your functions as taking the `CanvasRenderingContext2D` object, so you'd do eg `ctx.stroke(); custom(ctx);`
[00:08:38] <Maxdamantus> and as for overlaying canvases, you can do it either way. I mentioned the overlay yesterday because if you get to the point where redrawing the entire thing is a performance concern, you can avoid redrawing the entire thing by overlaying the canvas.
[00:08:53] <Maxdamantus> but as others have mentioned, it might not be necessary.
[00:09:15] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[00:09:32] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-af6c.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:10:06] <Maxdamantus> You can also render things to offscreen canvases and then draw those to your main canvas using `ctx.drawImage` or whatever.
[00:10:37] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com)
[00:11:05] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:11:28] <Maxdamantus> That's what I did for example here: https://maxdamantus.github.io/recplay/
[00:12:17] <Maxdamantus> If you opent the console on that page and do `window.dbg = 1;`, you'll actually see the lines around the cached level render canvases.
[00:15:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[00:19:08] *** Parts: easbarba (~user@2804:1b2:82:9e45:4297:f578:559c:973f) (ERC (IRC client for Emacs 27.1))
[00:21:46] *** Joins: matsaman (~matsaman@user/matsaman)
[00:22:57] *** Quits: stagas (~stagas@2a02:587:c411:ab53:7bd7:2aa9:7b02:4c40) (Ping timeout: 240 seconds)
[00:23:59] *** Joins: stagas (~stagas@2a02:587:c428:f731:64eb:b07e:fb2c:fead)
[00:32:30] *** Quits: MonoL (~MonoL@user/MonoL) (Quit: Leaving)
[00:32:35] <FlorianBad> Maxdamantus! hahaha lol That's awesome. Ok I'll check all that this afternoon
[00:37:16] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:39:12] *** Quits: Tangent-Man (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:41:08] *** Joins: Tangent-Man (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:44:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:47:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:47:18] *** Joins: tangent_ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:47:37] *** Quits: Tangent-Man (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:48:57] <FlorianBad> Maxdamantus: I think number 8 won
[00:49:25] *** Joins: Tangent-Man (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:50:28] *** Joins: tangent__ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:50:33] *** Quits: tangent__ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:54:33] *** Joins: tangent__ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:56:01] *** Joins: Tangent (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:56:45] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[00:57:05] *** Quits: Tangent (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Client Quit)
[00:57:05] *** Quits: Tangent-Man (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:57:05] *** Quits: tangent__ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Client Quit)
[00:57:05] *** Quits: tangent_ (~tangent@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[01:01:42] <hassoon> number 8 ? what eight ?
[01:02:25] *** Joins: bambanxx (~bambanx@2800:150:106:1061:ad25:3f08:6623:1200)
[01:05:47] *** Joins: thiras (~thiras@user/thiras)
[01:06:49] *** Quits: bambanxx (~bambanx@2800:150:106:1061:ad25:3f08:6623:1200) (Client Quit)
[01:09:42] <pavonia> hassoon: https://simpsons.fandom.com/wiki/Number_8
[01:10:05] <hassoon> ewwww simpsons
[01:11:30] *** Joins: bambanxx (~bambanx@2800:150:106:1061:ad25:3f08:6623:1200)
[01:12:20] <FlorianBad> hassoon: in his link: https://maxdamantus.github.io/recplay/
[01:12:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:12:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:12:25] *** Joins: wroathe (~wroathe@user/wroathe)
[01:12:50] <hassoon> motorama ? wow
[01:13:15] <hassoon> used to play it around 17 years ago
[01:13:20] <hassoon> mid 2000's
[01:14:14] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[01:16:37] <Maxdamantus> Not motorama. Elastomania.
[01:16:49] <Maxdamantus> Motorama is probably some clone, likely with worse physics.
[01:17:03] <Maxdamantus> Here's a playable version: https://maxdamantus.eu.org/levplay-9avxoot7br/
[01:17:40] <Maxdamantus> (the level in the "recplay" link is 47)
[01:19:01] <hassoon> Maxdamantus: yes yes, the name was Elastomania !!
[01:19:10] <Maxdamantus> Actually, "motorama" doesn't seem to exist, yeah, you probably did play Elastomania then.
[01:19:37] <hassoon> ya definitely
[01:19:45] <hassoon> just got confused for a moment
[01:19:55] <hassoon> the native desktop exe game was way smoother and faster than this web version though
[01:20:11] <hassoon> and i remember it had split screen 2 players mode
[01:21:33] <Maxdamantus> Like this: https://maxdamantus.github.io/recplay/stuff/multiz14inspab.htm
[01:21:53] <Maxdamantus> (the playable version doesn't support multiplayer, but the replayer does)
[01:23:01] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[01:23:50] <rustyshackleford> so I'm parsing a document that contains tables
[01:24:08] <rustyshackleford> I have types for the parsed object
[01:24:32] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 240 seconds)
[01:24:45] <rustyshackleford> columns labels should be one of a distinct set of strings. I have a type for this also
[01:25:15] *** Quits: bambanxx (~bambanx@2800:150:106:1061:ad25:3f08:6623:1200) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:25:18] <rustyshackleford> but as I'm interacting through and building this object, does typescript catch if I try to use a key that is not one of the set?
[01:26:41] <KevinX> yes
[01:26:56] <KevinX> Should be easy to confirm though
[01:27:21] <systemfault> rustyshackleford: It should be able if you declare your set property.
[01:27:28] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[01:27:30] <systemfault> *properly
[01:27:35] <KevinX> your editor should be able to give you instant feedback
[01:27:37] <rustyshackleford> I guess the point is, the parsed value isn't known until runtime
[01:27:40] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[01:27:58] <KevinX> you still need to set a type or an interface for it
[01:27:58] <systemfault> rustyshackleford: Then "type guards" exist for that
[01:28:02] <rustyshackleford> const map = new Map<"a" | "b", string>()
[01:28:08] <rustyshackleford> map.set(parsedKey, parsedValue)
[01:28:25] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[01:29:13] <systemfault> It won't allow you to set any string without you "proving" that the string is 'a' or 'b'
[01:29:29] <systemfault> Either using a type guard... or by doing a type assertion if you're 100% sure
[01:31:18] <rustyshackleford> systemfault: so I could make type ValidKeys = "a" | "b"
[01:31:35] <rustyshackleford> how can I assert a given value is one of them? I can't iterate over the ValidKeys type, can I?
[01:31:59] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[01:32:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:32:55] *** Joins: Praise (~Fat@user/praise)
[01:33:11] <systemfault> Ah, you can do a type guard: function isValidKey(key: string): key is ValidKeys { return ['a', 'b'].includes(key); }
[01:33:27] *** Joins: sidro (~sidro@86.122.231.222)
[01:33:40] <systemfault> If the check passes then TypeScript will narrow your string to ValidKeys
[01:34:07] <rustyshackleford> maybe an enum?
[01:34:25] <systemfault> What do you mean?
[01:34:31] <rustyshackleford> thats a bit of duplication if you need to type out the literals twice
[01:34:50] <systemfault> Ah, then you can create your type from an array with "as const"
[01:35:19] <systemfault> const validKeys = ['a', 'b'] as const; type ValidKeys = (typeof validKeys)[number];
[01:35:55] <systemfault> Then you can do:  function isValidKey(key: string): key is ValidKeys { return (validKeys as string[]).includes(key); }
[01:35:59] <systemfault> No useless duplication
[01:37:18] <systemfault> (untested but should just work)
[01:39:05] <systemfault> Once it's done you can just do: if (isValidKey(myString)) { myMap.set(key, someValue) } else { console.log('INVALID', myString); }
[01:40:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:41:36] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:43:49] <systemfault> rustyshackleford: I was close, forget to specify "readonly" in my type assertion https://tsplay.dev/m3aQbw
[01:45:11] <rustyshackleford> systemfault: neato
[01:45:21] <rustyshackleford> yikes I really don't know typescript
[01:45:29] <rustyshackleford> I've never seen the declare keyword
[01:45:29] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[01:45:58] <systemfault> It's usually done in type definition files, not in real code
[01:46:28] <systemfault> But it can be useful when you're trying to define a typed API.. because you can focus on the API first instead of the implementation
[01:46:48] <systemfault> "declare" are type-level only.
[01:52:00] *** Quits: sidro (~sidro@86.122.231.222) (Quit: Konversation terminated!)
[01:53:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:53:52] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[01:55:16] <rustyshackleford> systemfault: there's a lot to unpack
[01:55:29] <rustyshackleford> function isValidKey(key: string): key is ValidKeys {
[01:55:40] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[01:55:58] <rustyshackleford> key is ValidKeys tells the compiler how to infer types
[01:56:09] <rustyshackleford> or what's it called... type refinement
[01:56:44] <systemfault> See that "key is ValidKeys" part? It's TypeScript magic (Type guard) that means "if the function returns true then it means that 'key' is of type ValidKeys"
[01:57:08] <systemfault> You could change that part to a boolean and you will see that "narrowing" will not happen
[01:57:16] <systemfault> Only a type guard can do that
[01:58:43] <rustyshackleford> I don't really understand this syntax either: type ValidKeys = (typeof validKeys)[number];
[01:59:40] <systemfault> Decompose it, to get the type of a variable, you can use typeof. If you do: type X = typeof validKeys; You should get "readonly ['a', 'b']"
[01:59:58] <systemfault> Then you can index that type by "key"
[02:00:13] <systemfault> If you do: type Y = X[0]; you will get 'a'
[02:00:24] <systemfault> type Z = X[1]; you will get 'b';
[02:00:50] <systemfault> Then if you do: X[number]; it means for all numbers... so 'a' | 'b'
[02:06:32] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 240 seconds)
[02:07:18] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7)
[02:09:07] <rustyshackleford> pretty neat
[02:09:13] <rustyshackleford> systemfault: that example was helpful
[02:09:31] *** Joins: harpia (~harpia@2804:2aec:205:1400:be2a:c8d5:4566:5dc8)
[02:09:48] <systemfault> Glad I could help :) If you use VSCode, your mouse cursor is your best friend to figure out the type of things
[02:10:13] <rustyshackleford> as const implies readonly
[02:10:28] <rustyshackleford> and it took me a while to figure out that cast to readonly string[]
[02:10:42] <rustyshackleford> systemfault: surprisingly, the playgroundd supports the same sort of hover over information
[02:10:47] <systemfault> Yeah, without the "as const", the compiler will widen the types to string[]
[02:11:14] <rustyshackleford> but you can use as const and readonly almost equivalently, right?
[02:11:42] <systemfault> Not in every case IIRC
[02:12:54] <systemfault> With readonly, you'll be forced to manually declare the type, right?
[02:13:31] <systemfault> "readonly" is part of the type declaration, as const is part of the data declaration
[02:14:08] <systemfault> const a = [1,2,3] as const; vs const a: readonly [1,2,3] = [1,2,3]
[02:14:29] <systemfault> Of even with objects... const myEnum = { FOO: 10, BAR: 20} as const;
[02:15:02] *** Quits: MrBlue (~MrBlue@146.70.75.214) (Quit: Leaving)
[02:15:12] <rustyshackleford> microsoft is really reinventing themselves with typescript
[02:15:19] <rustyshackleford> trying to stay relevant ha
[02:15:20] *** Joins: MrBlue (~MrBlue@146.70.75.214)
[02:15:48] *** Quits: MrBlue (~MrBlue@146.70.75.214) (Client Quit)
[02:15:56] <systemfault> JavaScript being soo expressive, MS has to try hard to support most JS idioms
[02:22:08] <hassoon> they updated the youtube UI again
[02:22:44] <hassoon> now you hover on the video, and you get a silent play of the hovered video and like 1.3 zoom
[02:23:01] *** Joins: monkey_ (~user@190.104.116.153)
[02:24:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:25:11] *** Quits: federico_it (~textual@151.51.84.71) (Quit: Textual IRC Client: www.textualapp.com)
[02:28:31] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:5143:664b:aeb1:9527) (Read error: Connection reset by peer)
[02:28:45] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7) (Quit: Leaving)
[02:29:04] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7)
[02:29:41] *** Quits: Camilo (~hugh@host-92-1-126-125.as13285.net) (Ping timeout: 256 seconds)
[02:29:50] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7) (Client Quit)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:33] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:30:34] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7)
[02:30:35] <ThePendulum> I thought it was already pre-playing the video, bit confused what they actually changed
[02:30:39] <ThePendulum> the zoom seems a bit clunky
[02:30:55] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:32:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:32:31] *** Quits: pizdets (~pizdets@183.182.111.149) (Ping timeout: 256 seconds)
[02:32:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[02:33:31] *** vinleod is now known as vdamewood
[02:33:35] <ThePendulum> I think chapters and loop mode are the only useful things they've added in recent years
[02:33:49] *** Joins: pizdets (~pizdets@183.182.110.138)
[02:35:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[02:35:28] <systemfault> As long as I can watch videos and build playlists, I'm happy..
[02:35:35] <systemfault> They can do whatever..
[02:35:45] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:39:21] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:40:44] <ThePendulum> removing the dislike score has been quite annoying
[02:42:08] <Decker> is it?
[02:42:27] <systemfault> Yup, it was a good metric to know if a video was bad
[02:42:45] <systemfault> Now you can just "guess it" by looking at the ratio of likes vs views
[02:42:48] <ThePendulum> of course there's a grey area where it doesn't say all that much, but it was useful to weed out the truly horrible
[02:43:23] <ThePendulum> especially for videos on non-controversial topics where there's not really much of an incentive to dislike it purely from an emotional conviction
[02:43:39] <systemfault> The way I see it is that it's easier to push propaganda if you silence any dissenting voice.
[02:45:39] *** Joins: jazzy (~jaziz@user/jaziz)
[02:45:56] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:46:19] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:47:15] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:48:05] *** Joins: MrBlue (~MrBlue@5.181.233.29)
[02:48:52] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:51:56] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[02:52:50] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[02:54:51] <KevinX> what was the reason for removing it?
[02:57:06] *** Parts: MrBlue (~MrBlue@5.181.233.29) ()
[02:57:27] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[02:59:34] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[03:01:22] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:01:42] *** Joins: jazzy2 (~jaziz@user/jaziz)
[03:01:44] *** Joins: MrBlue_ (~MrBlue@37.19.212.18)
[03:02:02] *** MrBlue_ is now known as MrBlue
[03:02:02] *** Joins: noarb (~noarb@user/noarb)
[03:04:17] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[03:07:17] <ThePendulum> I think the offiical reason was that they just wanted to encourage positivity or something
[03:07:42] <ThePendulum> some say it's to hide the fact their YouTube rewind videos tanked, but I don't think that can be the only reason
[03:08:00] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:08:12] *** Quits: MrBlue (~MrBlue@37.19.212.18) (Quit: Leaving)
[03:08:19] *** Quits: george91 (~george91@103.137.204.24) (Quit: Leaving...)
[03:10:08] *** Joins: MrBlue (~MrBlue@37.19.213.153)
[03:10:13] *** Quits: MrBlue (~MrBlue@37.19.213.153) (Remote host closed the connection)
[03:10:34] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[03:10:40] <KevinX> yeah the rewind thing doesnt sounds right
[03:10:49] <KevinX> nor does the positivity :(
[03:11:14] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[03:11:14] <KevinX> probably something to do with advertisers not wanting to appear on videos with dislikes or something
[03:11:29] *** Joins: monkey_ (~user@190.104.116.153)
[03:13:22] *** Joins: jazzy3 (~jaziz@user/jaziz)
[03:14:52] *** Joins: jazzy (~jaziz@user/jaziz)
[03:15:37] *** Joins: panella32 (~panella32@45.130.83.91)
[03:16:17] <cheater> i want to make a wrapper around console.log. this means i have to make a function of variable parameters that basically does console.log(myprefix, arg1, arg2, ..., argn). how do i call console.log like that? i know that the args are in the object called arguments, but i don't know how to pass it all in like that, also with myprefix as the first argument.
[03:16:17] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[03:17:16] *** Joins: cisme_ (~cisme_@2600:1700:d980:1a40:4c84:61f3:586:9717)
[03:17:56] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:17:57] *** Quits: jazzy3 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[03:18:16] *** Quits: mccrazy (~mccrazy@user/mccrazy) (Ping timeout: 256 seconds)
[03:18:21] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[03:18:21] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:18:43] <wez> cheater: I recommend using pino
[03:18:53] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[03:18:59] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:19:22] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:19:33] *** Quits: N4buc0 (~N4buc0@191.250.99.50) (Ping timeout: 256 seconds)
[03:20:02] <KevinX> cheater const log = (...arguments) => console.log('prefix', ...arguments)
[03:20:32] <cheater> oh nice thanks
[03:20:50] *** Joins: up_running (~up_runnin@cpe-98-150-242-72.hawaii.res.rr.com)
[03:21:35] <up_running> I have a list of links and I would like to open each one in its own tab in FF.
[03:21:43] <up_running> What do you think of this script?
[03:21:44] <wez> cheater: pino has this type of stuff out of the box and it is fast
[03:21:45] <up_running> https://dpaste.com/33NZNSQLT
[03:21:48] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:22:00] <cheater> wez: i don't know what pino is.
[03:22:02] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:22:03] *** Joins: mud (~mud@user/kadoban)
[03:22:23] <wez> up_running: for link in $LINKS; do open $link; done
[03:22:39] <wez> cheater: a logging libraruy
[03:22:45] <cheater> i don't want it
[03:22:54] <cheater> but thanks
[03:22:54] <KevinX> wez looks horrible
[03:23:02] <KevinX> oops
[03:23:03] <wez> KevinX: It is awesome
[03:23:07] <KevinX> not wez
[03:23:09] <wez> oh
[03:23:16] <KevinX> up_running looks horrible
[03:23:28] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:23:38] <KevinX> I don't know pino but looks like it's for server runtimes only?
[03:23:39] <wez> KevinX: u and w are nowhere near each other, unless you're using a DVORAK keyboard or something?
[03:23:42] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:24:01] <KevinX> your nick was above and my eyes moved too fast ;-)
[03:24:03] <wez> KevinX: It works in browser
[03:24:18] <wez> ah, GUI
[03:25:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:27:02] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 250 seconds)
[03:27:41] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:33:15] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:33:31] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:33:42] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:33:54] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[03:34:19] <twainwek> what does '(a, b, c) => 3, 2' mean?
[03:34:23] <twainwek> what's the return value?
[03:34:49] <twainwek> what would be the equivalent if i was using return the keyword
[03:34:56] <twainwek> using the return keyword*
[03:37:56] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:38:12] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:39:00] <twainwek> oh lol.... it was the second argument to the outer function
[03:39:19] *** Quits: harpia (~harpia@2804:2aec:205:1400:be2a:c8d5:4566:5dc8) (Quit: harpia)
[03:39:30] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:39:46] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:41:17] *** Quits: cisme_ (~cisme_@2600:1700:d980:1a40:4c84:61f3:586:9717) (Ping timeout: 240 seconds)
[03:42:07] *** Joins: MichaelLaRosa[m] (~michaelbi@2001:470:69fc:105::1:6ac9)
[03:42:38] *** Joins: bambanxx (~bambanx@2800:150:106:1061:c13f:df44:1986:4b12)
[03:42:51] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Quit: Leaving)
[03:43:35] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:44:58] *** Joins: trevors (~trevors@user/trevors)
[03:47:21] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[03:48:03] <up_running> wez: You mean run that directly in the FF console window?
[03:48:31] <up_running> The links are in a txt file all on separate lines.
[03:50:39] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:50:56] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:51:45] *** Joins: kalen (~kalen@gateway/vpn/pia/kalen)
[03:56:17] *** zero is now known as zzz
[03:56:30] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[04:00:59] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:49ab:f940:8417:967b)
[04:03:29] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[04:03:31] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[04:07:38] <panella32> hi guys!
[04:08:02] <panella32> Possible to generate UUID in js?
[04:08:23] <panella32> random like ab5d7272-7662-11ec-90d6-0242ac120003
[04:09:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:11:27] *** Joins: mccrazy (~mccrazy@66.205.192.35)
[04:11:40] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[04:12:11] *** Quits: mccrazy (~mccrazy@66.205.192.35) (Client Quit)
[04:13:03] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[04:13:15] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[04:15:25] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[04:16:51] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[04:16:55] *** Parts: up_running (~up_runnin@cpe-98-150-242-72.hawaii.res.rr.com) ()
[04:17:56] <systemfault> Get a UUID library?
[04:19:03] <systemfault> If you use Node then it's built-in
[04:19:29] <systemfault> n> require('crypto').randomUUID()
[04:19:31] <jellobot> (okay) '3a45f735-cd22-43b3-918d-743d1b15eb15'
[04:23:51] *** Joins: monkey_ (~user@190.104.116.153)
[04:26:19] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:31:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[04:43:42] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[04:44:23] *** Joins: monkey_ (~user@190.104.116.153)
[04:45:52] *** Joins: c4017__ (~c4017@S0106c0943583f893.vf.shawcable.net)
[04:48:34] *** Joins: lehinsun (~ttytwiste@188.113.176.117)
[04:48:57] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:a889:4f4d:e472:168c) (Ping timeout: 240 seconds)
[04:50:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:56:37] *** Quits: stagas (~stagas@2a02:587:c428:f731:64eb:b07e:fb2c:fead) (Ping timeout: 240 seconds)
[05:01:35] *** Quits: lehinsun (~ttytwiste@188.113.176.117) (Quit: Leaving)
[05:01:56] <bobdobbs> offtopic, but... does anyone here use postcss? What are your thoughts on it?
[05:04:24] <KevinX> yes, it's great
[05:05:02] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Quit: Peace!)
[05:05:35] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[05:07:32] *** Quits: panella32 (~panella32@45.130.83.91) (Ping timeout: 240 seconds)
[05:07:43] *** Quits: bambanxx (~bambanx@2800:150:106:1061:c13f:df44:1986:4b12) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:19:57] *** Quits: cotko_ (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 240 seconds)
[05:20:11] *** Joins: nomic2 (~nomic@185.198.243.163)
[05:20:39] *** Joins: vysn (~vysn@user/vysn)
[05:22:40] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:23:05] *** Quits: nomic (~nomic@185.198.243.163) (Ping timeout: 256 seconds)
[05:28:36] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[05:28:43] *** nomic2 is now known as nomic
[05:29:53] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:30:58] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[05:31:45] <systemfault> PostCSS looks great but bad for teams...
[05:32:56] <KevinX> why? we use it at work
[05:34:29] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[05:35:06] <systemfault> KevinX: If a candidate says that they know PostCSS, what does that even mean?
[05:36:13] <systemfault> IIRC, it has a ton of config/plugins allowing it to do anything...
[05:36:28] <KevinX> It's just a tool for processing CSS files. I've written a few scripts we use to transform CSS in specific ways. You just need to understand the tool like any other
[05:36:53] <KevinX> But for the normal user, you just need to understand the plugins, ecosystem and how it all fits together
[05:36:57] <KevinX> like any other tool though
[05:38:22] <KevinX> Tailwind runs through postcss too (currently)
[05:39:42] *** Quits: src (~src@user/src) (Quit: Leaving)
[05:40:30] <systemfault> It's just that SASS is more or less an industry standard... everyone knows it and I can pick any frontend, give them an editor and they're good to go.
[05:40:56] <KevinX> Maybe it used to be but sass us very much fading out
[05:41:01] <KevinX> is*
[05:41:28] <KevinX> I'd even say it's been ont he decline the last 3+ years
[05:41:30] <systemfault> Replaced by things like React + Emotion/Styled Components?
[05:41:42] <KevinX> Yeah among other things
[05:41:56] <KevinX> like utility frameworks
[05:42:21] <systemfault> I haven't used Tailwind and I have to admit that I'm a bit skeptical
[05:42:55] <KevinX> I wouldn't even recommend anyone to learn sass
[05:42:59] <systemfault> IIRC, I was agree with the author's assessment of the problem with current CSS (some blog post) but I'm not sure Tailwind is the answer
[05:43:15] <systemfault> *agreeing
[05:43:42] <KevinX> tailwind is a delight to use but only after you use it a few times and get fluent at scanning classnames
[05:43:55] <KevinX> Theres a useful VS code extension too that helps
[05:44:21] <KevinX> maintaining an abstracted CSS file just feels wild to me now
[05:53:08] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[05:56:05] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Client Quit)
[05:56:13] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[06:04:02] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:05:05] *** Joins: stagas (~stagas@2a02:587:c428:f731:f0d4:2f8e:42a2:d5c9)
[06:09:32] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[06:10:32] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[06:17:36] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8cc6:12ce:bf8a:e847) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:19:06] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[06:19:38] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[06:19:53] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:20:07] *** Joins: src (~src@user/src)
[06:22:15] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:24:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:27:47] *** Joins: cisme_ (~cisme_@2600:1700:d980:1a40:f602:5394:36bb:e5f9)
[06:33:09] *** Parts: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (ERC (IRC client for Emacs 25.3.1))
[06:33:14] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[06:43:28] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[06:43:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:47:35] <bobdobbs> I'm starting to experiment with React. Nooby question, but... I'm wondering how to include my js scripts into the page. Normally I concat my libs and then scripting into one single file, and then include that in the head using a script tag.
[06:48:10] <bobdobbs> But in a few demos that I've seen, the library and scripts get called from just inside the Body tag.
[06:48:23] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[06:48:47] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[06:49:16] <bobdobbs> So I'm also wondering... is it best perhaps to provide two files? One with libs and the other with my own scripting that uses the libs I've included?
[06:50:48] <stagas> bobdobbs: use vite and forget about it :)
[06:51:02] <KevinX> it's always been a best practice to load scripts in the footer, or add the defer (or similar) attribute to the script tag.
[06:51:11] <bobdobbs> stagas: lol :)
[06:51:30] <bobdobbs> stagas: my poor encumbered brain
[06:51:33] <ljharb> bobdobbs: you don't
[06:51:34] <ljharb> don't use vite.
[06:51:37] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[06:51:38] <ljharb> bobdobbs: you provide a node module.
[06:51:43] <ljharb> bobdobbs: the top-level app uses a module bundler.
[06:51:45] <ljharb> that's it
[06:52:06] <ljharb> and i wouldn't assume that demos are a pattern worth following - that's just a demo
[06:52:21] <bobdobbs> I did actually look into Vite. Decided not to use it. Something to do with it's strict way of doing things not being the way I wanted to do things.
[06:52:21] <stagas> vite and just <script src="myapp.ts"> everything else is automatic
[06:52:34] <KevinX> you can extract vendor assets, but really only needed if you update the non-vendor scripts often
[06:52:41] <stagas> thank god
[06:53:14] <bobdobbs> ljharb: You've probably watched my fumblings over the past few days. I've settled on esbuild for bundling.
[06:54:28] <bobdobbs> ljharb: so, is the idea that I (at least for my small test projects) I should just bundle everything - libs and my own script - into one file and include that as normal in the document head? Using the 'src' attribute of a script tag?
[06:54:59] <ljharb> stagas: vite does a bunch of things that break the ecosystem, i wouldn't trust it.
[06:55:05] <ljharb> bobdobbs: for an app, yes
[06:55:10] <bobdobbs> kewl
[06:55:27] <stagas> noone even knows how to answer that question, it can only be crowdsourced by usage and vite is used by everybody at this point so it aggregates all knowledge into one correct way of doing frontend development
[06:55:31] <bobdobbs> ljharb: uhm, silly question, but how are we defining 'app' here?
[06:55:56] <ljharb> bobdobbs: a thing you deploy. versus a package, a thing you publish.
[06:56:03] <bobdobbs> ok
[06:56:07] <ljharb> stagas: lol vite is in no way "used by everybody at this point"
[06:56:20] <ljharb> stagas: and the way vite does things is objectively incorrect (somewhat, not entirely)
[06:56:23] <bobdobbs> yeah, I haven't seen vite around much. It looks pretty niche
[06:56:30] <stagas> if you're not using vite you're just wasting your time
[06:56:38] <ljharb> stagas: it's fine if you like it, but don't delude yourself into thinking it's some kind of ideal or will get massive adoption
[06:56:51] <ljharb> i would say you're wasting your time using any tool that's fundamentally broken by design
[06:57:38] <stagas> i don't know how broken it is but i know that i simply create an index.html add a script tag, do npm install vite, npx vite and my app works
[06:57:46] <stagas> that is developer experience
[06:58:20] <stagas> no fiddling with anything, not even a config file, it just works
[06:59:08] <stagas> i add sass, typescript without configuring anything, they just work
[06:59:15] <stagas> it's amazing
[06:59:20] <stagas> then i do build and it's deployable
[06:59:35] <KevinX> my money isn't on vite
[07:00:02] <ljharb> stagas: yes but just because something looks good on the surface doesn't mean it is actually good
[07:00:26] <ljharb> create-react-app had "the best DX ever", but turns out it's actually shit underneath, and eventually everyone figured that out
[07:00:27] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[07:00:29] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[07:00:36] <ljharb> you can't build good DX on top of broken fundamental principoles.
[07:00:39] <ljharb> *principles
[07:00:44] <ljharb> but, enjoy it while it lasts, i guess
[07:01:13] <stagas> it's not the same thing, it has it's nuances, like everything, but still it's a huge step forward imo
[07:01:43] <KevinX> I wouldn't even bet on Vue, although I like vue
[07:02:36] <stagas> you're confusing tooling with frameworks
[07:02:43] <stagas> react and vue are frameworks, vite is tooling
[07:03:04] <stagas> it's like "node"
[07:03:05] <KevinX> Evan You wrote Vue and Vite
[07:03:16] *** Joins: Rockwood (~Rocky@user/rocky)
[07:03:31] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[07:03:37] <KevinX> vite is like node?
[07:03:52] <KevinX> vite is like nextJs
[07:04:02] <KevinX> deno is like node
[07:04:14] <ljharb> vite is like next.js, yes
[07:04:32] <stagas> vite doesn't tell me how to structure my app, unlike next
[07:04:33] <ljharb> stagas: fundamental brokenness isn't "nuance", it's a rotten core that will always eventually collapse the structure
[07:04:45] <stagas> so next is a framework
[07:04:59] <stagas> vite is simply a bundler with everything configured
[07:05:10] <stagas> and a dev server which you're gonna need also
[07:05:19] <stagas> and basically the tooling you need for frontend
[07:05:37] <KevinX> i dont dislike vite, I just wouldn't bet on it
[07:05:49] <stagas> all packaged neatly and because it has adoption it's fixing things that will bite you if you do it manually
[07:05:51] <KevinX> Probably for the reasons you just said
[07:06:09] <KevinX> People like dogmatic frameworks and tooling
[07:07:31] <KevinX> I'm not saying this is me, but a lot of people like nextjs because it tells you what to do
[07:07:36] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[07:08:34] <KevinX> I think vercel will continue to grow
[07:08:56] <KevinX> (vercel owns nextjs)
[07:13:10] <ljharb> stagas: right but it's not configured properly.
[07:13:16] <ljharb> stagas: especially around CJS packages
[07:13:19] <stagas> a good abstraction is one that lets you treat it like a black box, and that's what vite does. i don't care if it's building on broken principles as long as it works and it doesn't ask me to investigate its details to force it to work, which is what webpack, next.js etc have been doing
[07:13:27] <ljharb> right, but it doesn't
[07:13:29] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[07:13:41] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:41] <ljharb> i get bug reports from vite users filed on my packages, because vite does the wrong thing
[07:13:54] *** Joins: Rockwood (~Rocky@user/rocky)
[07:13:55] <ljharb> if a package author has to know anything about how that package works with a specific bundler, that bundler is broken
[07:14:16] <stagas> you're getting bug reports from vite users because people are using vite and finding bugs that will be solved
[07:14:22] <stagas> that's a sign of adoption
[07:14:43] <stagas> of course there will be bugs, and everything
[07:15:00] <stagas> but the main principle is that it's going to a direction of becoming the black box i'm talking about
[07:15:02] <stagas> which is ideal
[07:15:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:45] <KevinX> I'll give vite a try next time I want to mess around with something
[07:16:48] <stagas> it's a tool i don't even need to read the documentation to use it, i simply make an index.html and a script tag and npx vite. i write my app how i want it and it just does all the work that i don't really want to do
[07:17:01] <ljharb> stagas: they're not bugs. they're design flaws.
[07:17:11] <KevinX> I want to try this out too: https://alephjs.org/
[07:17:16] <ljharb> stagas: obv if it was just bugs that got fixed i wouldn't be complaining, that's just how open source works
[07:17:38] <ljharb> and whether you want to do work or not, some work shouldn't *be* abstracted away.
[07:17:41] <stagas> give me a concrete example of a design flaw in vite
[07:17:57] <stagas> that can't be fixed fundamentally
[07:18:01] <ljharb> it requires custom config for CJS packages, something around optimization or something?
[07:18:05] <ljharb> "can't" be fixed, nothing
[07:18:13] <ljharb> but they *won't* fix it. because they don't think they should.
[07:18:16] <ljharb> that's why it's a design flaw.
[07:18:23] <ljharb> webpack 5 could be fixed too, but they don't want to fix it.
[07:18:26] <stagas> is that an issue of vite, or node delaying ditching cjs
[07:18:33] <ljharb> CJS will never be ditched, ever.
[07:18:34] <ljharb> nor should it be.
[07:18:40] <ljharb> so yes, it's an issue of vite.
[07:18:52] <stagas> imo node should bump major and ditch cjs forever and let the ecosystem deal with it
[07:18:55] <ljharb> CJS and ESM are the two first-class module systems in node, forever
[07:19:02] <ljharb> then it's good you're not in charge of node, because that'll never happen
[07:19:14] <ljharb> the vast majority of useful javascript on the planet is in CJS.
[07:19:28] <ljharb> and when migrating to ESM offers zero benefits and nonzero downsides, that's going to stay the case
[07:19:39] <ljharb> ESM isn't actually better than CJS. it's just prettier syntax.
[07:19:41] <stagas> well then you're going to have node's implementation details leaking out in every other js package in the world because cjs-esm is unsolvable
[07:19:53] <ljharb> it's not unsolveable. node solved it.
[07:20:18] <ljharb> most things should stay CJS - CJS can be required or imported. things that go ESM (not that there's any benefit to doing so) can still ship CJS also, and it works fine
[07:20:30] <stagas> node is the only thing that is throwing errors in the console that this is esm or cjs and can't be used vice versa
[07:20:34] <ljharb> the only thing that's not solved is "requiring ESM"
[07:20:42] <ljharb> stagas: those errors are good and correct
[07:20:42] <stagas> why doesn't it do the right thing and stop throwing errors
[07:20:47] <stagas> like vite
[07:20:48] <ljharb> stagas: the right thing is to throw errors.
[07:20:49] <stagas> :)
[07:21:04] <ljharb> the wrong thing is to pretend that these things that *by spec can never be treated the same* can be treated the same
[07:21:25] <ljharb> this is the kind of inherent design flaw i'm talking about. building a product based on objectively incorrect and nonstandard philosophies and behaviores.
[07:21:41] <ljharb> you can't build a good tool if you think CJS is going to go away. because it'll never go away.
[07:21:55] <stagas> that's called learned helplessness
[07:22:07] <ljharb> no, it's not
[07:22:11] <ljharb> that's called being realistic
[07:22:13] <stagas> cjs can go away the same way it arrived
[07:22:17] <ljharb> "pragmatism", maybe
[07:22:20] <ljharb> CJS never can go away.
[07:22:34] <ljharb> npm is the largest repository of software on the entire planet, and it's almost entirely CJS
[07:22:43] <ljharb> that's like saying "the web can go away". no it can't, ever.
[07:23:42] <ljharb> you can't hallucinate your way out of reality by pretending ESM is a) better, b) going to replace CJS, or c) that CJS is going away.
[07:23:59] <ljharb> good luck tho, i'm sure all the people who're stuck with CRA now will buy you a drink when you're stuck with vite in a few years
[07:25:15] <stagas> i try not to invest in vite's implementation details and treat it as a black box. most of the time i don't even use a vite.config, simply vite and build around that. so when it's time to ditch it, i can do it for another tool because i won't have adapted any of my own code to the tool
[07:25:20] *** Joins: summersault (~summersau@179.221.251.36)
[07:25:26] <stagas> so i don't care if it's vite
[07:25:36] <stagas> as long as it's one cli command that makes my frontend app work
[07:25:46] <ljharb> don't get me wrong, the DX you describe sounds nice. if a tool that's actually not broken by design can do that, i'd love to see it
[07:25:54] <ljharb> but DX never outweighs correctness imo.
[07:26:12] *** Joins: trevors (~trevors@user/trevors)
[07:27:02] <stagas> i dont know but one time i had issue with commonjs in vite i just installed a plugin for it and it went away, it was just doing plugins: [commonJs()] and then i continued my work
[07:27:26] <stagas> so i don't know what's broken but i have yet to find it
[07:27:26] <ljharb> sounds like config
[07:27:33] <ljharb> but sure, glad it's working for you
[07:29:10] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:29:39] <stagas> if you can point me to a "correct" alternative, i'd be happy to ditch it, but there's no alternative for these features at this point
[07:30:39] <stagas> it's about picking which brokenness you want, i prefer a little broken but working most of the time, than "correct" and being in front of json files and documentation instead of building my app
[07:31:25] <ljharb> Guest49: you need to auth with nickserv for non-ops to see what you say. see the last link in the topic.
[07:31:51] <ljharb> stagas: the cost of those subtle bugs will always far outweigh the cost of configuring your app over time.
[07:32:51] <ljharb> Guest49: read the last link in the topic. you have to register with nickserv and authenticate.
[07:33:23] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:33:42] <stagas> for the subtle bugs to bite first i have to have built something, deployed it and some time down the road discover that vite isn't cutting it. But 99.99% of the things i build never go there, so the really pragmatic solution is something that brings you to the point of having to discover that subtle bug, but having not wasted all of your time not actually building the app but doing "correct" configurations
[07:34:11] <stagas> that probably doesn't compile ^ :P
[07:35:09] <ljharb> no, i get what you mean
[07:35:13] <stagas> so maybe it's a dev tool, and maybe to low scale production
[07:35:24] <stagas> and it's targetting that niche and it's doing it right
[07:35:24] <ljharb> but if you're doing such early prototypy work that that's the case, then please consider that your scenario doesn't match most's
[07:35:55] <ljharb> most people aren't building for next week's pitch deck, they're building for the long term. (or at least, should be)
[07:36:37] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:37:48] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Quit: leaving)
[07:38:04] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[07:39:03] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[07:39:53] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[07:40:25] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[07:41:59] *** Joins: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de)
[07:43:05] *** Quits: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de) (Remote host closed the connection)
[07:43:12] <ljharb> Guest49: still not authed
[07:43:28] *** Joins: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de)
[07:44:15] <stagas> i wish i was a long term person, i start 5 projects in the morning and by the night i'm working on 7 different ones
[07:44:18] <ljharb> Guest49: `/msg nickserv help`, or ask in #libera
[07:44:37] *** Quits: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de) (Remote host closed the connection)
[07:44:42] <stagas> so i want something that doesn't waste my time and just works when i type "run"
[07:45:02] *** Joins: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de)
[07:46:07] *** Quits: wellen (~w~llen@dynamic-046-114-174-051.46.114.pool.telefonica.de) (Remote host closed the connection)
[07:49:53] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:52:34] <de-facto> how do i programatically set variables outside a function that appear inside that functions scope?
[07:53:52] <ThePendulum> why can't you pass them as arguments?
[07:54:50] <de-facto> you mean with bind?
[07:55:15] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 250 seconds)
[07:58:32] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:05:01] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:05:45] <Decker> expose a function inside that can actually do the work?
[08:06:40] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-af6c.res6.spectrum.com)
[08:08:44] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:09:46] <de-facto> if I have var args = { arg1: [ 0, 1, 2], arg2: [ 1, 2, 3 ] }, how do i get the variables arg1, arg2 inside function() { } ?
[08:11:32] <de-facto> bind seems to set this, but i need the scope itself
[08:12:32] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:15:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[08:16:56] <de-facto> how can i create a variable in a scope dynamically?
[08:17:04] <ljharb> de-facto: you canâ€™t
[08:17:11] <ljharb> which is good, as dynamic scoping is terrible
[08:17:33] <ljharb> you can do `const { arg1, arg2 } = args;` inside the function body tho.
[08:17:37] *** Quits: nomic (~nomic@185.198.243.163) (Quit: Leaving)
[08:17:55] *** Joins: nomic (~nomic@185.198.243.163)
[08:18:20] <de-facto> arg1 and arg2 are unknown at time of writing the code
[08:18:27] <de-facto> hence dynamically
[08:20:29] <stagas> de-facto: const [a,b] = Object.keys(args); new Function(`const { ${a}, ${b} } = args`, args)
[08:20:49] <stagas> a bit :P
[08:21:22] <stagas> ah you need 'args' first parameter i think
[08:21:27] <stagas> so it's scoped
[08:21:31] <stagas> then call with (args)
[08:22:42] <stagas> n> const args = { a: 1, b: 2 }; const [a,b] = Object.keys(args); new Function('args', `const { ${a}, ${b} } = args; return ${a} + ${b}`)(args)
[08:22:43] <jellobot> (okay) 3
[08:23:37] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[08:25:25] <de-facto> hmm but the names a and b are not known, they would have to be created on the fly inside a function scope
[08:31:01] <stagas> de-facto: in that example 'a' and 'b' can be anything the object 'args' has, as long as the number of arguments match and order
[08:31:51] <de-facto> but how do i define the variables name outside that functions scope?
[08:33:05] <stagas> the variable names don't exist in the function's scope, the function's body is generated with any variable name the object 'args ' has, outside of it
[08:33:25] <stagas> that is a string that is passed to the js and the function is generated on the fly
[08:33:49] <stagas> ${a} ${b} are replaced by the names of the variables in 'args'
[08:34:25] <de-facto> n> const args = { a: 1, b: 2 }; new Function('args', 'return a + b;')(args)
[08:34:26] <jellobot> (fail) ReferenceError: a is not defined
[08:36:06] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:36:27] <de-facto> so how do i define a variable named "a" outside that Function() code and inject it into its scope?
[08:37:25] <stagas> can you write in pseudocode what you expect to work?
[08:38:31] <Decker> n> const args = { a: 1, b: 2 }; new Function('args', `return args.a + args.b;`)(args) // I would think you would want this
[08:38:32] <jellobot> (okay) 3
[08:38:52] <Decker> n> const args = { a: 1, b: 2 }; new Function('args', `return ${args.a} + ${args.b};`)(args) // although this works too
[08:38:53] <jellobot> (okay) 3
[08:39:03] <de-facto> yes without the args in the function body
[08:39:17] <de-facto> or this.a or such
[08:39:18] <de-facto> only a
[08:39:19] <Decker> then you don't need to pass args or have it
[08:39:27] <Decker> there is no 'a'
[08:39:34] <de-facto> hence my desire to create it
[08:39:42] <Decker> const a = 1;
[08:39:54] <stagas> ${foo} replaces in the string of the function body what "foo" equals to, not the name "foo"
[08:40:04] <de-facto> how do i do that outside the functions scope and then inject it into the functions scope?
[08:40:08] <de-facto> i can not hardcode it
[08:40:45] <Decker> n> const a = 1, b=3, args = { a: 1, b: 2 };  new Function(`return ${a} + ${b};`)() // no real args
[08:40:45] <jellobot> (okay) 4
[08:40:57] <Decker> n> const {a,b}= { a: 1, b: 2 };  new Function(`return ${a} + ${b};`)() // no real args
[08:40:58] <jellobot> (okay) 3
[08:41:15] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[08:43:52] <de-facto> n> const args = { a: 1, b: 2 }; (function(){ return a + b; }).bind(null, args)
[08:43:53] <jellobot> (okay) [Function: bound ]
[08:44:01] <de-facto> n> const args = { a: 1, b: 2 }; (function(){ return a + b; }).bind(null, args)()
[08:44:02] <jellobot> (fail) ReferenceError: a is not defined
[08:44:22] <de-facto> hmm
[08:44:29] <Decker> n> const args = { a: 1, b: 2 };  new Function('a','b',`return a + b;`)({a,b}=args)
[08:44:30] <jellobot> (okay) '[object Object]undefined'
[08:44:59] <Decker> n> const args = { a: 1, b: 2 };  new Function('a','b',`return a + b;`)(args.a,args.b)
[08:45:00] <jellobot> (okay) 3
[08:45:16] <de-facto> i can not hardcode the names
[08:45:42] <Decker> except you are
[08:45:52] <Decker> in all of the examples
[08:46:48] <de-facto> n> const args = { exp: 'a+b', a: 1, b: 2 }; (function(){ return eval(exp); }).bind(null, args)()
[08:46:49] <jellobot> (fail) ReferenceError: exp is not defined
[08:46:59] <de-facto> n> const args = { exp: 'a+b', a: 1, b: 2 }; (function(){ return eval(this.exp); }).bind(null, args)()
[08:46:59] <jellobot> (okay) undefined
[08:47:23] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:47:29] <de-facto> n> const args = { exp: 'this.a+this.b', a: 1, b: 2 }; (function(){ return eval(this.exp); }).bind(null, args)()
[08:47:29] <jellobot> (okay) undefined
[08:47:33] <de-facto> argh
[08:47:44] <Decker> exp takes 2 numbers not 1 object
[08:47:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:48:03] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:49:06] <Decker> n> const args = { a: 1, b: 2 };  new Function(`return this.a+this.b;`).bind(args)()
[08:49:07] <jellobot> (okay) 3
[08:49:26] <de-facto> yeah but i need it without this
[08:51:29] <Decker> arguments can be some sort of array instead
[08:51:32] <llanhmod> isnt this always there though?
[08:51:40] <de-facto> can i somehow define the arguments that are given into the function scope *with* their names?
[08:51:45] <Decker> it is if you bind
[08:51:50] <llanhmod> ah
[08:52:34] <Decker> sure - inject a prefix around the code snippet... with a 'with this'
[08:52:53] <Decker> and suffix to close {}
[08:53:06] *** Joins: han-solo (~han-solo@user/han-solo)
[08:53:13] <de-facto> huh? how do you mean that?
[08:54:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[08:54:16] <Decker> n> const args = { a: 1, b: 2 };  new Function('with (this) {'+ `return a+b;` +'}').bind(args)()
[08:54:17] <jellobot> (okay) 3
[08:55:56] <de-facto> oh that looks interesting
[08:57:19] <dave0> is that a:1 and b:2 thing like in c bitfields?
[08:57:25] *** Joins: fef (~thedawn@user/thedawn)
[08:57:44] <de-facto> nope just an example here
[08:57:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:00:08] <de-facto> n> const args = { exp: 'a+b', a: 1, b: 2 }; (function(){ with (this) { return eval(exp); } }).bind(args)()
[09:00:09] <jellobot> (okay) 3
[09:00:44] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Read error: Connection reset by peer)
[09:02:36] *** Joins: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d)
[09:05:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:05:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:05:37] *** Joins: wroathe (~wroathe@user/wroathe)
[09:09:14] <de-facto> thank you that was really helpful
[09:10:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:10:57] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:17c:22a2:b625:20d7) (Ping timeout: 240 seconds)
[09:13:48] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:18:03] <macswagger> do you have a code snippet or a longer example of what you're trying to do? I'm not 100% sure I totally get the problem
[09:18:15] <macswagger> oh whoops
[09:18:20] <macswagger> I was scrolled up, disregard that!
[09:18:28] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[09:19:23] *** Quits: optimant (~asavage@user/optimant) (Ping timeout: 256 seconds)
[09:20:18] *** Quits: nomic (~nomic@185.198.243.163) (Quit: Leaving)
[09:23:14] *** Quits: stagas (~stagas@2a02:587:c428:f731:f0d4:2f8e:42a2:d5c9) (Ping timeout: 250 seconds)
[09:23:34] *** Joins: stagas (~stagas@2a02:587:c41a:ecb9:b7df:6055:566f:c59a)
[09:23:57] *** Parts: llanhmod (~developer@user/domhnall/x-2887755) ()
[09:25:03] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[09:31:01] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:36:22] *** Quits: stagas (~stagas@2a02:587:c41a:ecb9:b7df:6055:566f:c59a) (Remote host closed the connection)
[09:36:45] *** Joins: stagas (~stagas@2a02:587:c41a:ecb9:b7df:6055:566f:c59a)
[09:47:10] *** Joins: optimant (~asavage@user/optimant)
[09:49:18] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[09:55:03] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[09:55:22] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[09:56:50] *** Joins: Duckling (uid193337@id-193337.tinside.irccloud.com)
[09:57:10] *** Quits: Duckling (uid193337@id-193337.tinside.irccloud.com) (Client Quit)
[10:03:20] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:04:09] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[10:30:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:33:00] *** Joins: Tempesta_ (~Tempesta@183.98.39.112)
[10:33:02] *** Quits: Tempesta_ (~Tempesta@183.98.39.112) (Remote host closed the connection)
[10:36:56] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[10:40:19] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[10:42:46] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:48:36] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[10:52:47] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[10:53:37] *** Joins: jazzy (~jaziz@user/jaziz)
[11:01:32] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 240 seconds)
[11:01:37] *** Joins: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com)
[11:03:49] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[11:04:36] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[11:04:59] *** Joins: Rockwood (~Rocky@user/rocky)
[11:14:39] *** Quits: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com) (Quit: The Lounge - https://thelounge.chat)
[11:14:49] *** Joins: Duckling (uid193337@id-193337.tinside.irccloud.com)
[11:15:33] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[11:18:04] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-af6c.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:20:02] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 240 seconds)
[11:23:19] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[11:27:00] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[11:29:16] *** Joins: Rockwood (~Rocky@user/rocky)
[11:29:57] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:40:58] *** Joins: Tempesta (~Tempesta@user/tempesta)
[11:41:03] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[11:44:28] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[11:47:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:48:40] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[11:49:21] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:50:57] *** Quits: stagas (~stagas@2a02:587:c41a:ecb9:b7df:6055:566f:c59a) (Ping timeout: 240 seconds)
[11:53:35] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[11:53:48] *** Joins: stagas (~stagas@2a02:587:c43a:e9ef:f6ed:6a6d:5cda:3add)
[11:58:35] *** Joins: sam_1 (~sam_1@87.51.251.118)
[12:08:01] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[12:08:41] *** Joins: henry40408 (~henry4040@175.181.155.165)
[12:12:02] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[12:12:17] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[12:17:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[12:17:52] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 250 seconds)
[12:20:31] *** Joins: pluri (~pluri@user/pluri)
[12:21:07] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[12:21:38] *** Joins: henry40408 (~henry4040@175.181.155.165)
[12:29:33] *** Joins: Guest58 (~Guest58@195-72-208-243-bgn-glf.intercom.it)
[12:30:09] *** Quits: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575) (Quit: You have been kicked for being idle)
[12:31:14] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[12:31:51] *** Joins: henry40408 (~henry4040@175.181.155.165)
[12:33:01] *** Joins: stenno (~stenno@user/stenno)
[12:34:59] *** Quits: Guest58 (~Guest58@195-72-208-243-bgn-glf.intercom.it) (Quit: Client closed)
[12:35:49] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:35:50] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[12:36:21] *** Joins: henry40408 (~henry4040@175.181.155.165)
[12:38:36] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[12:39:31] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Read error: Connection reset by peer)
[12:39:54] *** Joins: sam_1 (~sam_1@87.51.251.118)
[12:40:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:240b:629c:66c3:c78c)
[12:43:20] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[12:44:09] *** Quits: Duckling (uid193337@id-193337.tinside.irccloud.com) ()
[12:44:21] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[12:46:57] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:59da:fcd2:abfb:4d1d)
[12:48:16] *** Joins: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com)
[12:49:10] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:53:50] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 250 seconds)
[12:54:20] <bobdobbs> the other day someone implied that babel is oldtech. Just wondering why that is.
[12:55:39] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[12:55:55] <silly> maybe they meant established
[12:56:53] <silly> old doesn't mean obsolete
[13:04:23] <dave0> sometimes old code is a shining jewel
[13:05:18] <dave0> it's hard to imagine code from 20 years ago that still runs.. and code written now that will still run in 20 years
[13:05:28] <dave0> but some does and it's brilliant
[13:07:56] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[13:08:02] <AlbertLast> in my area i eyes starts bleeding when i see code from ~10 years
[13:08:27] *** Joins: henry40408 (~henry4040@175.181.155.165)
[13:08:28] <AlbertLast> since the people from this time was no developer and the language was limited
[13:08:37] <AlbertLast> (i don't talk from js)
[13:09:47] <dave0> oh right i forget javascript is a young language ;-)
[13:10:53] <deniska> I think I recently saw an example of js code from 20 years ago still running
[13:11:02] <han-solo> that's true for any lang i would assume. Most langs would have added new syntax and or features in 10 years
[13:11:02] *** Quits: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com) (Quit: The Lounge - https://thelounge.chat)
[13:11:03] <deniska> I think 25 even
[13:11:53] *** Joins: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com)
[13:12:03] <han-solo> and now you are accustomed to new features and syntax, the old one seems ...not good or hard to read
[13:15:09] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[13:15:57] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[13:16:10] <Maxdamantus> I was recently wondering what the behaviour of `tail` was in Unix SVR4 (from 1983), so found the source code and compiled it. Worked first time.
[13:16:28] *** Joins: henry40408 (~henry4040@175.181.155.165)
[13:18:05] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:19:35] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[13:19:43] <Maxdamantus> (C was only standardised in 1989, though SVR4's tail compiled in gcc without modification)
[13:20:03] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 256 seconds)
[13:21:16] <Maxdamantus> oh, actually SVR4 was released in 1988, so I guess they were probably intentionally making it conform to the standard at about that time.
[13:23:15] <deniska> Maxdamantus: or the standard was largely reflecting the state of actual already written C code and compilers
[13:23:56] <Maxdamantus> /*      Copyright (c) 1990 UNIX System Laboratories, Inc.       */
[13:24:05] <Maxdamantus> /*      Copyright (c) 1984, 1986, 1987, 1988, 1989, 1990 AT&T   */
[13:24:23] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[13:26:17] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:31:00] <silly> iirc linux keyboard input code was much older than linux itself
[13:31:31] <silly> i'm likely to be wrong tho
[13:35:10] *** Quits: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com) (Quit: The Lounge - https://thelounge.chat)
[13:37:17] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[13:40:50] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[13:42:49] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[13:47:03] *** Quits: sfields (~sfields@2605:a601:adea:7a00:416b:7a6e:7331:138f) (Remote host closed the connection)
[13:50:10] *** Joins: sfields (~sfields@2605:a601:adea:7a00:c08f:11c9:d7b2:855b)
[13:50:34] *** Parts: cheater (~Username@user/cheater) (BitchX by panasync)
[13:59:39] *** Quits: sfields (~sfields@2605:a601:adea:7a00:c08f:11c9:d7b2:855b) (Remote host closed the connection)
[14:00:32] *** Joins: sfields (~sfields@2605:a601:adea:7a00:c08f:11c9:d7b2:855b)
[14:13:53] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35)
[14:16:17] *** Joins: nomic (~nomic@185.198.243.163)
[14:17:49] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:24:31] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:24:48] *** Joins: Guest14 (~Guest14@213.16.177.123.dsl.dyn.forthnet.gr)
[14:25:47] *** Quits: Guest14 (~Guest14@213.16.177.123.dsl.dyn.forthnet.gr) (Client Quit)
[14:26:20] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[14:29:53] <hassoon> 'morning
[14:32:27] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:33:00] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:34:42] *** Joins: kordou (~goartist@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01)
[14:42:49] *** Joins: fef (~thedawn@user/thedawn)
[14:43:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[14:45:30] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[14:45:36] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:53:29] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[14:54:01] *** Quits: kordou (~goartist@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01) (Quit: Leaving)
[14:55:59] <Rockwood> o/
[14:56:37] *** Joins: kordou (~goartis@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01)
[14:58:29] *** Quits: kordou (~goartis@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01) (Client Quit)
[15:00:03] *** Joins: kordou (~goartis@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01)
[15:13:14] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[15:15:52] *** Joins: voltage_ (voltage@user/voltage)
[15:19:06] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[15:26:48] *** Joins: Rockwood_ (~Rocky@user/rocky)
[15:27:13] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:27:37] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[15:30:18] *** Joins: Rockwood (~Rocky@user/rocky)
[15:33:12] *** Quits: Rockwood_ (~Rocky@user/rocky) (Remote host closed the connection)
[15:33:51] *** Joins: pln_ (~pln@213.142.150.32)
[15:36:32] *** Joins: thiras (~thiras@user/thiras)
[15:44:08] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[15:49:31] *** Joins: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[15:51:49] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[15:51:55] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[15:54:02] *** Quits: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 240 seconds)
[15:58:09] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[16:01:41] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:04:59] *** Joins: nomic2 (~nomic@185.217.117.104)
[16:06:18] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[16:06:36] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[16:08:02] *** Quits: nomic (~nomic@185.198.243.163) (Ping timeout: 240 seconds)
[16:08:26] <wez> \o
[16:08:32] <theskillwithin> o/
[16:09:05] <wez> :D
[16:09:22] <wez> theskillwithin: Have you externalised the skills yet?
[16:09:36] <wez> Or are they still within?
[16:09:44] *** Joins: Rockwood_ (~Rocky@user/rocky)
[16:09:46] <theskillwithin> haha, slowly
[16:10:46] *** nomic2 is now known as nomic
[16:10:47] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[16:11:34] *** Joins: voltage (voltage@user/voltage)
[16:11:55] *** Quits: voltage_ (voltage@user/voltage) (Killed (NickServ (GHOST command used by voltage)))
[16:11:57] *** voltage is now known as voltage_
[16:17:29] *** Joins: sumaro (~sumaro@88.244.93.37)
[16:23:45] <Rockwood_> slowly what?
[16:23:54] <Rockwood_> https://dpaste.com/7JPG7J24S any more way to this stuff?
[16:24:02] <Rockwood_> this one is working fine
[16:24:12] <Rockwood_> i wanna chk more ways to do this
[16:24:13] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 256 seconds)
[16:24:28] *** Rockwood_ is now known as Rockwood
[16:24:48] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[16:26:12] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[16:26:31] *** Joins: thiras (~thiras@user/thiras)
[16:28:53] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:30:24] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:31:01] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[16:32:12] *** Joins: fef (~thedawn@user/thedawn)
[16:32:19] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[16:36:02] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[16:36:27] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[16:36:51] *** Quits: jonifen (~jonifen@user/jonifen) (Read error: Connection reset by peer)
[16:37:00] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 250 seconds)
[16:39:07] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[16:39:40] *** Joins: jonifen (~jonifen@user/jonifen)
[16:41:04] *** Joins: pulse (~pulse@user/pulse)
[16:42:26] *** Joins: emyrs (~emyrs@user/emyrs)
[16:47:48] <Rockwood> anyway to reset other scripts usestate to reset
[16:58:35] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[16:59:02] *** Joins: APic (apic@apic.name)
[17:05:11] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 256 seconds)
[17:05:57] *** Joins: Rockwood_ (~Rocky@user/rocky)
[17:07:17] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[17:08:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:10:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:11:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:11:40] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 250 seconds)
[17:15:16] *** Joins: Rockwood (~Rocky@user/rocky)
[17:17:52] *** Joins: Rockwood_ (~Rocky@user/rocky)
[17:19:57] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[17:20:36] *** Rockwood_ is now known as Rockwood
[17:25:07] *** Joins: src (~src@user/src)
[17:25:32] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:27:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:30:24] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Remote host closed the connection)
[17:30:47] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[17:32:39] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:39:14] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[17:40:57] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[17:43:08] *** Joins: Rockwood (~Rocky@user/rocky)
[17:45:42] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[17:46:05] *** Joins: Rockwood_ (~Rocky@user/rocky)
[17:47:38] *** Quits: sickdyd_ (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[17:49:37] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 240 seconds)
[17:51:23] <austincheney> Rockwood_, do what?  Add some JSX?
[17:51:48] <Rockwood_> austincheney, like?
[17:52:03] <Rockwood_> its react
[17:52:08] <Rockwood_> not native
[17:52:36] <austincheney> Right, its JSX.  Are you wanting to know how to do that without JSX?  Like vanilla JS?
[17:53:35] <Rockwood_> i never used vanilla js before
[17:53:43] <austincheney> its easy
[17:54:06] <Rockwood_> sure
[17:54:14] <Rockwood_> i wanna see that too
[17:54:32] *** Joins: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de)
[17:54:33] <austincheney> let me gather an example.  Keep in mind if you go down the vanilla road people are going to lose their shit on you.  There is a lot of insecurity in JavaScript most especially around how to acces the DOM.
[17:54:49] <austincheney> Yet, its what I prefer and what all frameworks eventually do under the hood anyways
[17:55:47] <austincheney> Rockwood_, several examples here: https://github.com/prettydiff/share-file-systems/blob/master/lib/browser/content/file_browser.ts
[17:56:40] <austincheney> document.createElement creates a new element unattached to the document.  The setAttribute method allows attribute assignment on a node.
[17:57:06] <austincheney> The appendChild method adds an element to a location in the document.
[17:57:39] <Rockwood_> context very nice way
[17:57:44] <Rockwood_> i like this way too
[17:57:47] <austincheney> dont assign events as attributes, as React does
[17:58:09] <austincheney> React actually converts the onClick attributes to event listeners
[17:58:31] <Rockwood_> yeah i am agree
[18:00:01] <Rockwood_> very lengthy code
[18:00:33] <austincheney> There are two proper ways to add events.  1) use event listeners.  This is what everybody does because its resistant against assignment collisions, but there is a lot of added complexity with event listeners.  2) assign event handlers directly to an element's event property: myElement.click = myHandler.  This super simple (what I prefer), but third party code could replace your assignment and break your application
[18:01:34] *** Rockwood_ is now known as Rockwood
[18:01:36] <austincheney> Rockwood_, yes, most developers see that vanilla DOM interaction is highly declarative and then go into an emotional freefall like somebody bipolar who should be on meds.  Be prepared for that if you are writing code in a group.
[18:02:06] <austincheney> sorry, not declarative.  Imperative.
[18:02:48] <Rockwood> ah okay
[18:03:50] <austincheney> but its really about tradeoffs.  The imperative vanilla JS code is more code when creating content, but there is very little code to manage thereafter, while the declarative framework approach requires tremendous amounts of code to do any kind of modification to the page.
[18:05:02] <austincheney> these APIs to the DOM are executing no matter which approach you use.  Its only a matter if you have to look it or if its buried under layers of abstractions.
[18:07:41] *** Joins: pyzozord (pyzozord@user/pyzozord)
[18:07:49] <pyzozord> hey, can anyone help me optimize https://app.codility.com/demo/results/training8567RG-M9S/
[18:09:21] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[18:09:40] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[18:13:45] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[18:19:16] *** Joins: thojanssens (~thojansse@182.232.128.126)
[18:19:30] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[18:26:06] *** Joins: up_running (~up_runnin@cpe-98-150-242-72.hawaii.res.rr.com)
[18:26:52] <up_running> Can anyone help me with reading a file in Node, please?
[18:26:58] <up_running> https://dpaste.com/GHXRYF7AW
[18:27:26] <up_running> I keep getting a `[Error: ENOENT: no such file or directory, open 'C:\Users\Sunny\Documents\UsersSunnyDocumentslinks_(no_spaces).txt']` error.
[18:28:17] <Rockwood> up_running, are you indian?
[18:30:45] <Rockwood> C:\Users\Willow\Documents\links (no spaces).txt' try to open this link directly first
[18:31:48] <up_running> Rockwood: ahh, I think I see your point.
[18:32:08] <up_running> I have to include the location of the file from where I am currently in cli
[18:32:19] <up_running> let me try that
[18:32:26] <Rockwood> what is your project file location
[18:32:42] <Rockwood> think about root folder first
[18:34:40] *** Joins: kalen- (~kalen@gateway/vpn/pia/kalen)
[18:35:51] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Ping timeout: 256 seconds)
[18:35:58] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:36:01] *** kalen- is now known as kalen
[18:36:21] <up_running> That actually worked!
[18:36:41] <up_running> But for some reason, all the URLs had a number appended to them.
[18:36:55] <up_running> That is incorrect and I have to figure out how to stop that behaviour.
[18:41:09] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[18:44:01] <up_running> Nevermind, fixed everything. Thank you!
[18:44:13] *** Parts: up_running (~up_runnin@cpe-98-150-242-72.hawaii.res.rr.com) ()
[18:46:30] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:54:51] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:59:50] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[19:00:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:00:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:00:51] *** Joins: wroathe (~wroathe@user/wroathe)
[19:05:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:11:43] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[19:12:07] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[19:18:35] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:19:37] *** Joins: sfields_ (~sfields@136.34.181.232)
[19:20:10] <fweht> if i call an async function inside an async function, do i need to use await to make sure the first function waits until the second function completes?
[19:21:05] <Decker> that's an optoin
[19:21:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:21:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:21:15] *** Joins: wroathe (~wroathe@user/wroathe)
[19:21:57] *** Quits: sfields (~sfields@2605:a601:adea:7a00:c08f:11c9:d7b2:855b) (Ping timeout: 240 seconds)
[19:22:53] *** Joins: trevors (~trevors@user/trevors)
[19:23:02] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:24:19] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[19:24:29] <fweht> so its optionaal?
[19:24:40] <ljharb> fweht: yes, `await` is never required
[19:24:59] <ljharb> fweht: an `async function` always only returns a promise. `await` is sugar inside an `async function` for `.then` on a promise
[19:26:31] <ljharb> `await` should be used very rarely, unless it's in concert with `Promise.all`.
[19:26:39] <fweht> aaah wow i didnt know
[19:26:58] <fweht> i thought without await the functions will all be proceeded in parallel?
[19:28:24] <ljharb> fweht: JS is always single-threaded
[19:28:29] <fweht> hmm but my code stops working when i remove the await?
[19:28:32] <ljharb> fweht: nothing's in parallel, but things can happen concurrently
[19:28:42] <ljharb> fweht: because if you don't await a promise, you have to `.then` it.
[19:28:52] <ljharb> fweht: but share your code in a codesandbox, i'll show you how to improve it
[19:28:53] <fweht> aah yeah, ok, that makes sense
[19:29:15] <fweht> but in the last call of a function, that should be irrelevant?
[19:31:01] <ljharb> fweht: `return await` is redundant, yes, just return.
[19:31:18] *** Joins: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de)
[19:31:49] <fweht> ljharb: but when i dont return  anythin, like `async function foo(){await bar(); baz();}`?
[19:32:31] <ThePendulum> ljharb: except inside a try/catch block I think?
[19:33:36] *** Quits: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de) (Client Quit)
[19:33:56] *** Joins: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de)
[19:34:24] *** Quits: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de) (Client Quit)
[19:34:49] *** Joins: voltage (voltage@user/voltage)
[19:34:55] *** Quits: voltage_ (voltage@user/voltage) (Killed (NickServ (GHOST command used by voltage)))
[19:34:57] *** voltage is now known as voltage_
[19:35:54] <ljharb> ThePendulum: yes but that nuance would just be confusing here
[19:36:08] <ljharb> fweht: in that case you definitely have to await baz()
[19:36:19] <ljharb> fweht: otherwise `foo`'s promise can't wait for the baz promise to resolve
[19:36:56] <ljharb> fweht: but in that case, i assume baz doesn't depend on bar, so it's harmful to await them both like that. do `await Promise.all([bar(), baz()])`
[19:37:19] <ljharb> that way, bar and baz happen concurrently (not parallel), and you've correctly conveyed in your code that they don't depend on each other
[19:40:27] <fweht> ljharb: aah, thanks so much for the clarification!
[19:41:08] <fweht> its pretty logical :)
[19:42:58] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3) (Remote host closed the connection)
[19:43:17] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:9952:728:f039:79c2)
[19:45:48] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[19:47:27] *** Joins: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de)
[19:47:32] *** Quits: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de) (Client Quit)
[19:52:41] *** Joins: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de)
[19:55:48] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[19:56:05] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087)
[20:00:03] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[20:00:56] *** Joins: programmar (~whatever@118.69.128.37)
[20:01:49] <programmar> is there anyhow i can request a URL on the same origin and check its status only ? like my site has two path /test1 and /test2, on the /test2 i would like to have some codes running and checking the response status of /test1
[20:04:37] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[20:05:08] <programmar> oh wait, i think ajax can do this
[20:05:09] <programmar> nvm
[20:09:13] *** Quits: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[20:09:23] *** Joins: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de)
[20:11:56] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 250 seconds)
[20:14:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:21:58] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[20:30:09] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[20:31:56] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[20:35:56] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[20:36:12] *** Quits: thojanssens (~thojansse@182.232.128.126) (Ping timeout: 250 seconds)
[20:37:43] <Rockwood> bye cya
[20:38:54] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[20:39:09] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[20:40:08] *** Joins: thojanssens (~thojansse@182.232.128.126)
[20:53:28] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:54:58] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[20:55:23] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[20:55:25] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[20:57:55] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[20:57:55] *** Quits: thojanssens (~thojansse@182.232.128.126) (Ping timeout: 256 seconds)
[20:58:32] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:59:25] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[21:03:04] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[21:09:32] *** Quits: mud (~mud@user/kadoban) (Read error: Connection reset by peer)
[21:10:37] *** Joins: mud (~mud@user/kadoban)
[21:16:17] <stagas> there is a subtle difference with `return promise` and `return await promise`
[21:16:59] <stagas> is that the stack trace will point to the function that does the return if you use return await, otherwise you lose it
[21:17:15] <stagas> not lose it but it goes one level up, the stack traces when it throws points to the other one that called it
[21:29:30] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[21:30:36] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:08] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:32:11] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[21:39:18] *** Quits: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net) (Remote host closed the connection)
[21:41:42] <de-facto> how can I speed up large array operations?
[21:41:56] <de-facto> predefine arrays and only change their values in the loops?
[21:42:08] <de-facto> e.g. can i malloc() them in advance?
[21:43:24] *** Joins: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net)
[21:45:37] *** Joins: thiras (~thiras@user/thiras)
[21:45:44] *** Joins: Betal (~Betal@user/betal)
[21:47:42] <ljharb> stagas: thatâ€™s only in v8, and not part of the spec
[21:48:02] <ljharb> stagas: so yes, v8 has a current flaw there, but in practice itâ€™s not really an issue
[21:48:11] <ljharb> de-facto: no, you canâ€™t , and shouldnâ€™t - thatâ€™s slower
[21:48:21] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[21:48:23] <ljharb> de-facto: JS arrays are fastest when you treat them idiomatically - dynamically.
[21:48:29] <ljharb> de-facto: how large is large?
[21:50:41] <de-facto> about 1k entries and that about 1k times
[21:51:00] <de-facto> it brings down chrome it seems for a moment
[21:51:42] <Svitkona> 1k isn't very large
[21:52:21] <de-facto> what i want is that v8 reserves memory for floats so that i only set them with the [] operator later
[21:52:32] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[21:52:47] <austincheney> de-facto, JS does not have floats.
[21:53:14] <ljharb> de-facto: 1k is tiny and insignificant
[21:53:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:240b:629c:66c3:c78c) (Ping timeout: 240 seconds)
[21:53:18] <de-facto> well whatever js uses for 123.456 then
[21:53:19] <ljharb> de-facto: and JS doesn't "reserve memory"
[21:53:20] <austincheney> de-facto, instead of talking about how to do something what is it you want to do?  As in end state?
[21:53:35] <ljharb> de-facto: JS is a memory-managed language, and it is *objectively incorrect* to be thinking about memory usage.
[21:53:51] <ljharb> austincheney: i mean technically JS only has double-precision floats
[21:53:59] <ljharb> i guess now there's also unlimited-precision integers
[21:54:12] <ljharb> but yes this definitely sounds like an xy problem
[21:54:16] <ljharb> !xy @ defjam
[21:54:17] <jellobot> defjam, The XY problem: You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that either. You ask about Y, which is a strange thing to want to do. Just ask about X. See also: http://xyproblem.info/
[21:54:20] <ljharb> oops, de-facto
[21:54:22] <de-facto> i populate those 1k arrays of size 1k floats with loops and its slow to do that with the [] operator, hence how can i optimize for speed?
[21:54:28] <ljharb> de-facto: slow how?
[21:54:38] <ljharb> de-facto: but also yes, the SLOWEST thing you can do is preallocate an array
[21:54:46] <ljharb> de-facto: it is faster to do `[]` and `.push()` into it every time
[21:55:03] <ljharb> de-facto: basically every C/C++ optimization trick makes JS slower. don't try to be smarter than the engine.
[21:55:03] <de-facto> it is so slow that chrome blocks the site load for a moment
[21:55:09] <de-facto> i do it with [] and push()
[21:55:13] <ljharb> ok good
[21:55:16] <austincheney> de-facto, my beautifier that I used to maintain frequently dealt with JavaScript arrays in the 10s of millions of index performing a bunch of algorithms and it was very fast
[21:55:18] <ljharb> de-facto: ok so what are you trying to do with such an array at all?
[21:55:34] <de-facto> hold my data for the page
[21:55:38] <ljharb> what does the data represent
[21:55:48] <de-facto> metrics
[21:55:48] <ljharb> without 100% of the context we can't help effectively
[21:56:02] <ljharb> what's it measuring if you're computing it
[21:57:01] <austincheney> without seeing the code we are guessing, but my guess is that you are doing thing inefficient per index, but for the problems you are describing it would have to be an extreme mistake
[21:57:06] <austincheney> 1k indexes is tiny
[21:57:26] <de-facto> i have some measurement data that comes in as json and is in a global "data" object. its optimized for small transport size and now i need to process it to bring it into the full "expanded" state again, so its an object containing arrays that get populated on page load
[21:57:43] <de-facto> then after its done the page uses that expanded object to display metrics etc
[21:59:03] <austincheney> de-facto, my recommendation is to defer processing of data on page load.  Load all the UI artifacts and give the user an indication something is happening like a spinner.  Then process the data after.
[21:59:21] <de-facto> hence my question about what kind of memory management v8 will trigger in the background by such "expanding" or deep copying over into the expanded object properties
[22:00:29] <austincheney> de-facto, my current application displays an OS GUI in the browser including file system display.  The page load is about 30ms (excluding background graphic) including full state restoration.  I don't let file system contents hold up my page load.
[22:00:38] <de-facto> if i count up indices in a loop v8 wont know in advance how much memory to preserve for holding the final expanded state
[22:01:55] <austincheney> de-facto, dont worry about memory management unless you are writing for a tiny Raspberry-PI or something embedded.
[22:02:07] <austincheney> memory is dynamically allocated and it is extremely fast
[22:02:22] <austincheney> it is not always efficient (as far as quantity of memory) but it is always fast
[22:02:30] <de-facto> door rang bbl sorry
[22:03:01] <ljharb> de-facto: optimizing for small transport size is the wrong optimization
[22:03:11] <ljharb> de-facto: do all processing on the server
[22:03:23] <ljharb> de-facto: gzip will handle transport well enough
[22:03:41] <ljharb> de-facto: v8 does not TRY to know in advance how much memory to preserve. that's not how JS engines operate.
[22:03:48] <ljharb> de-facto: v8 doesn't *want* a hint - and it's faster without one.
[22:04:06] <austincheney> ljharb, I optimize for transport by sending large payloads as an array of arrays instead of an array of indexes.  It saves on key names, but it sounds like he is already doing that.
[22:04:23] <austincheney> errr, instead of an array objects
[22:06:47] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d45:c0f8:56d9:c89f)
[22:09:38] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[22:16:51] *** Quits: pln_ (~pln@213.142.150.32) (Ping timeout: 256 seconds)
[22:18:27] *** Joins: xse (~xse@user/xse)
[22:19:21] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:21:36] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[22:23:38] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Client Quit)
[22:29:17] *** Quits: programmar (~whatever@118.69.128.37) (Quit: Leaving)
[22:32:14] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[22:38:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[22:40:13] *** Sven_vB_ is now known as Sven_vB
[22:40:32] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 240 seconds)
[22:41:36] *** Joins: stenno (~stenno@user/stenno)
[22:43:24] *** Quits: AtomicLong (~primamate@p200300ee170add00b1d37216256ea955.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[22:44:34] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:45:06] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:25] *** Joins: lain6141 (~lain6141@119.224.72.222)
[22:47:27] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[22:47:55] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:48:11] *** Joins: trevors (~trevors@user/trevors)
[22:48:35] <FlorianBad> When I create a canvas dynamically, assign it and its wrapper some styles with style.insertRule(), I cannot start drawing immediately because it seems to take some time to apply these styles. So if I call getBoundingClientRect() for example to get the size of the canvas it is 0, but if I put a setTimeout on that it works.
[22:48:51] <FlorianBad> So my question is: Is there anything better that I can use instead of setTimeout?
[22:49:34] <FlorianBad> Like some kind of callback that tells me the styles got applied... A timeout is completely arbitrary, it's a bit of an unreliable way to deal with the issue
[22:49:45] <rustyshackleford> https://www.typescriptlang.org/play?#code/MYewdgzgLgBAJgQygmBeGBtAUDTPcwDkAcggLYCmhANProQMIhkAOCYAnjXUQKKsAbEBwoUYASQAi3AkQAKCDjDkUATgEsQcGACEKAc3VgZBQgqUqNWmLzBwT9BgAsKwANYxJSKrVmMX7jDEAK5kAEZqJgC6vpiEAFIgTmCeID5EAOIgIPoC6YQAjABMAMwALACsNEQFAPR1RQAMRUXVhfVltU0tbXUFnd2t1ETEtQCChDFYUQDcWFigkLAAZuqq0DogAB4A0hQcEGh49KSUJozMbJzn-CxCImJS5+bKapraeobGsWaKr1baWz2H7OVweLxQHz4fxgoKhCKqbhRGAIQ6LaBzLBQDgsMQAMTWG22eyU6GxuJAyxgq3WUE
[22:49:46] <rustyshackleford> 2u32EAwYHhalmWJx+MJdO2RwA3pg3PsYEYYATafSSVEAFwwaAaMD6GAAX0xy2CYGAUE0KXUEHFRIZHAAFEKOLL5UZ9ABKWVmkWHA08o0wPn4VQUKDBVQpY00w0kw6omAehBwcACJSWxUYKLWgB0RmAAmCcAoEFN+2tc2V83Vmu14Bg+k9TvpxvUkLIEAtUAV+ljsdtYu59Nd+HRK1bvPQlYo1fjEAE6mAFGNBWGJWz+H9zowBSi8ZYwQgTmNJHGhGnHfA0BgLjDakOvarTIXc1wnZgADcECn00cMPHn33qxgijERpv2TuljAKGAdbqOmACyCAsEcYAUAA7jAYEsAAPGWxL7MM0b6AAfMa064AeabrPGywgKovAIMAa6ZhwwxGGmWzWmgGHtrI6hUhW+rdkalHWvRbqyLgAFAaB
[22:49:46] <rustyshackleford> 4GDp6lHDLe95MjRFBbHGF4EMq-4CBAYi8XxUBOKoICwVBsG8KoWmqOuq6VkGAgCCGnoIKoab2DhCn4Mq264B6Xo+jAADyYQAFauFAhFaWQtiCRmAkaEJLDTrm8xAA
[22:49:54] <rustyshackleford> wow, I apologize
[22:50:46] <rustyshackleford> https://tinyurl.com/mr3kmbam
[22:51:04] <rustyshackleford> I'm trying to parse my payslip document. So I'm struggling with typescript
[22:51:56] <rustyshackleford> I'm getting an error at Object.fromEntries(entriesMap)
[22:52:24] <rustyshackleford> I've asserted that this map contains only values defined in FirstBoxKey, but I haven't asserted that it contains ALL of those values
[22:52:54] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) ()
[22:53:17] *** Joins: fef (~thedawn@user/thedawn)
[22:53:37] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:55:09] <Svitkona> looks like you need to loop through firstBoxKeys and check if headers includes each key too
[22:55:30] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[23:01:48] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 250 seconds)
[23:01:55] *** Joins: redcat (~dev@user/redcat)
[23:02:24] <redcat> why does ++i in a for loop not increment the var before returning it? https://jsfiddle.net/7m86odyr/
[23:02:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:03:06] <Svitkona> because that expression runs after the loop body
[23:03:25] <Svitkona> so there's no difference between ++i or i++
[23:03:45] <redcat> Svitkona, counter intuitive
[23:03:59] <redcat> so how would I fix this? a while?
[23:04:05] *** Joins: ferdna (~ferdna@user/ferdna)
[23:04:55] <Svitkona> you can do `for (var x = 0; x < 2;) { ++x; console.log(x); }
[23:04:56] <Svitkona> `
[23:05:14] <redcat> gosh, that feels so hackerish
[23:05:16] <KevinX> or x = 1
[23:05:19] <silly> if you want it to start at 1 instead of 0...
[23:06:11] <redcat> thanks for the help
[23:08:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:09:27] *** Joins: Talon (Talon@172.77.118.229)
[23:11:14] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Read error: Connection reset by peer)
[23:11:19] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[23:11:32] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[23:12:12] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[23:12:33] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[23:13:28] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:15:02] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[23:15:32] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[23:17:38] *** Joins: fef (~thedawn@user/thedawn)
[23:17:53] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[23:18:52] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[23:22:39] *** Joins: cotko_ (~cotko@188-230-251-153.dynamic.t-2.net)
[23:24:41] *** Joins: pavonia (~user@user/siracusa)
[23:29:23] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[23:33:17] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[23:37:19] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[23:37:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:38:17] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:43:16] *** Joins: audiobirb (~audio@user/audio)
[23:46:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:46:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:46:14] *** Joins: wroathe (~wroathe@user/wroathe)
[23:47:17] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:50:31] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[23:50:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:51:35] *** Quits: kordou (~goartis@2a02:2149:8a91:c000:7127:3f9f:8a59:ee01) (Read error: Connection reset by peer)
[23:53:07] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:f80c:6cea:37f1:9b76) (Ping timeout: 250 seconds)
[23:53:48] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 250 seconds)
[23:54:04] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c865:bd48:8b5c:8488)
[23:54:54] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[23:55:48] *** Joins: matsaman (~matsaman@user/matsaman)
[23:59:44] *** Joins: teut (~teut@2401:4900:1c68:6b85:8d9c:5c88:1fa7:34f3)
[23:59:53] <teut> hi, ca someone help me with postman?
