[00:11:28] *** Joins: Everything (~Everythin@37.115.210.35)
[00:40:12] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[00:41:50] *** Quits: chrisz (bj1ru6m4v7@55d4c60d.access.ecotel.net) (Quit: leaving)
[00:48:14] <rgrinberg> hackinghorn indeed you need to create the dir first
[00:58:49] <d_bot> <Kakadu> Could you recommend some reading (except reading C) about closure representation when flambda is enabled?
[00:59:41] <companion_cube> afaik closure representation is the same
[00:59:45] <companion_cube> there's just fewer closures :p
[01:02:43] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[01:03:05] <d_bot> <Kakadu> I tried to print them from C and it looks like they are not the same
[01:08:32] <d_bot> <Kakadu> or maybe I'm wrong....
[01:09:15] <d_bot> <RegularSpatula> They‚Äôre basically an alternative interface to the normal in and out channels‚Ä¶the mli docs are decent for these. Did you still need a couple more examples ?
[01:12:53] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:20:59] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:21:43] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:2507:1779:a1f7:5925)
[01:31:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:34:12] *** Joins: chrisz (xxm7t0sx26@55d42356.access.ecotel.net)
[01:37:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[01:48:13] <zozozo> kakadu: the representation of closures is the same, but flambda might generate different sets of closures than closure
[01:59:42] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[02:46:13] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[02:49:44] <d_bot> <Kakadu> It looks like there is a difference but I don't yet fully understand where it is. (See README https://github.com/kakadu/asdf)
[02:50:01] * d_bot <Kakadu> will investigate it later
[02:50:40] <d_bot> <Kakadu> if somebody has any text description about flambda and partial applications of closures, it will be appreciated.
[03:04:58] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:2507:1779:a1f7:5925) (Quit: Konversation terminated!)
[03:06:53] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[03:07:16] *** Joins: kakadu (~kakadu@195.19.236.234)
[03:09:51] <zozozo> kakadu: okay, so the results you get are perfectly fine as far as I can tell
[03:10:45] <zozozo> the main difference is that flambda is able to see that the "free variables" of your closures are actually compile-time constants, so there is no need for the closures to contain these, since they are known at compile-time, and can simply be substituted in the code
[03:11:30] <zozozo> the overall way closures are represented is the same, but flambda can optimize the code so that it generates different, smaller closures (e.g. with some free variables removed)
[03:12:26] <zozozo> kakadu: also, note that the "closure with X free variables" output of your examples is completely wrong
[03:13:01] <zozozo> I'll try and do a small writeup tomorrow about closure representation (it's the second time the topic has come up on irc, maybe it's time to have a doc to point people to, ^^)
[03:37:03] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[03:39:03] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Client Quit)
[03:44:33] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[04:20:18] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:44:27] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:55:16] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[06:43:01] *** Joins: spip (~bobo@37.170.195.69)
[06:43:05] *** Quits: Guest7956 (~bobo@37.166.53.4) (Ping timeout: 256 seconds)
[06:43:25] *** spip is now known as Guest8932
[07:31:01] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[08:02:25] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:15:54] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[08:38:41] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[08:52:29] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[09:24:57] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:48:12] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Ping timeout: 240 seconds)
[09:50:26] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[10:37:41] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[10:44:33] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Quit: Leaving)
[10:55:01] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:57:12] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[11:36:49] *** Joins: jlrnick (~josephler@2a01cb040a159400a1a1e7ff5808f1f9.ipv6.abo.wanadoo.fr)
[11:37:24] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:56:28] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:13:00] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[13:37:05] *** Joins: bartholin (~bartholin@158.110.70.210)
[13:53:01] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:85b8:9078:b4ac:ca26)
[13:53:03] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:85b8:9078:b4ac:ca26) (Client Quit)
[14:05:53] *** Joins: olle_ (~olle@i5E866D9C.versanet.de)
[14:47:03] <hackinghorn> I would like to find all dir/test* files but Sys.readdir does not expand the *. Is there something that expand the "*" for me in this case?
[15:02:46] <Fardale> I would find all files in dir/ and then filter to keep only the test*.
[15:18:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:19:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:45:43] *** Joins: Everything (~Everythin@37.115.210.35)
[15:46:21] *** Joins: xiongxin (~Thunderbi@113.116.34.213)
[15:58:41] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[16:35:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:47:16] <d_bot> <zakkor> What is more commonly used: Base or Batteries?
[16:47:57] <d_bot> <dinosaure> @companion_cube
[16:56:19] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:01:49] <companion_cube> I imagine it's base > containers > batteries, but i don't have numbers
[17:02:06] *** Quits: jlrnick (~josephler@2a01cb040a159400a1a1e7ff5808f1f9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[17:02:06] <companion_cube> Afaik no one but Unix junkie uses batteries anymore
[17:11:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:12:25] *** Joins: namkeleser (~namkelese@101.179.128.103)
[17:13:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:15:00] *** Quits: chrisz (xxm7t0sx26@55d42356.access.ecotel.net) (Ping timeout: 240 seconds)
[17:17:08] *** Joins: chrisz (zbaquop3gq@55d45522.access.ecotel.net)
[17:24:05] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[17:35:15] <d_bot> <VPhantom> Really? I had never heard of Containers until today. ü§î
[17:36:15] <companion_cube> üòî
[17:36:30] <d_bot> <VPhantom> I know, I'm sorry‚Ä¶
[17:37:26] <d_bot> <VPhantom> I learned initially with Real World OCaml (so, Base/Core) and then heard about a duality with Batteries in places like StackOverflow, where I haven't seen Containers come up very often.
[17:44:12] <d_bot> <VPhantom> It'd be interesting to hear from long-time users (I'm just a rookie) what use cases might distinguish the three libraries.
[17:49:19] <d_bot> <darrenldl> used core/core kernel for a while, my overall experience is it doesnt work very well with |> cause many arguments are labelled
[17:50:23] <d_bot> <darrenldl> containers generally have the usual convenience functions you'd want
[18:01:02] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:08:14] *** Quits: xiongxin (~Thunderbi@113.116.34.213) (Quit: xiongxin)
[18:09:55] *** Joins: namkeleser (~namkelese@101.179.128.103)
[18:20:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:21:14] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:22:46] <companion_cube> SO for OCaml is pretty sparse, I think
[18:23:58] <smondet[m]> used all of them and/or made my own at some point over the past couple of decades. I think JaneSt's ‚Äút comes first, label everything else‚Äù is the best approach, by far. The lower mental overhead and the gain in readability/maintainability out-weights any perceived inconvenience.
[18:25:45] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:25:51] <companion_cube> it's not the only dimension though
[18:25:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:26:09] <d_bot> <VPhantom> I like argument ordering predictability. I also naturally use a "t first" approach in my own work ever since my C days decades ago. I think it fits very naturally with OCaml's currying.
[18:26:09] <companion_cube> backward compatibility is also a practical concern, as can be (depending on your taste) compatibility with the stdlib
[18:26:30] <companion_cube> @VPhantom sometimes "t last" works best with currying and |> though.
[18:26:56] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[18:27:59] <d_bot> <VPhantom> I do get a kick lately, of seeing how far I can go with just the Stdlib. And yes, first and last have special uses depending on what I'm doing. I tend to naturally place types first (for currying) and I/O references last (for piping).
[18:32:57] <d_bot> <Patate> What do you mean by "t first" and "t last" aproach?
[18:35:17] <d_bot> <Patate> is it something like
[18:35:18] <d_bot> <Patate> apply : t -> f:(t-> unit) -> unit
[18:35:20] <d_bot> <Patate> vs
[18:35:21] <d_bot> <Patate> apply : f:(t-> unit) -> t -> unit
[18:35:22] <d_bot> <Patate> ?
[18:35:36] <companion_cube> yeah
[18:35:42] <d_bot> <Patate> Oh ok
[18:36:09] <companion_cube> e.g `Map.set: key -> 'a -> 'a t -> 'a t`
[18:36:25] <companion_cube> so you can do `Map.empty |> Map.set 1 true |> Map.set 2 false |> Map.set 3 true`
[18:36:35] <companion_cube> (if you have a int map)
[18:36:44] <d_bot> <Patate> I see
[18:37:43] <d_bot> <Ulugbek> Not particularly OCaml question, but I have a UDP socket that I send from and receive to a lot of packets in a short amount of time. I have a hypothesis that there is congestion in the socket because with logging turned on my application throughput goes much higher while with logging turned off the throughput is x100 less. I think that logging to stdout is taking time away from the sender and thus decreases the congestion.
[18:37:44] <d_bot> <Ulugbek> Any idea on how to debug or solve such a problem?
[18:38:55] <d_bot> <reynir> I have a `(char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t` but I really want a `(int, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t`. Isn't there a way to reinterpret the bigarray? been staring at the docs for a while now
[18:40:06] <d_bot> <darrenldl> @Ulugbek oh logging on sender? was really confused as i thought you meant logging on receiver
[18:41:09] <companion_cube> @reynir I don't think you can have that, it'll always be a char array with a underlying int8
[18:41:11] <d_bot> <Ulugbek> my application is a node in a decentralized system, where applications broadcast packets to each other
[18:41:15] <companion_cube> (as far as I can tell)
[18:41:30] <d_bot> <darrenldl> is your code async?
[18:41:35] <d_bot> <Ulugbek> yes
[18:41:47] <d_bot> <darrenldl> is it public?
[18:41:53] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:41:58] <reynir> Hm okay
[18:42:09] <reynir> now I'm frustrated :D
[18:42:51] *** Quits: Guest8932 (~bobo@37.170.195.69) (Ping timeout: 245 seconds)
[18:43:02] *** Joins: Guest8932 (~bobo@37.172.196.118)
[18:46:53] <d_bot> <Patate> I did not thought there would be a discord server dedicated to ocaml! This is pretty cool!
[18:47:25] <d_bot> <VPhantom> I thought bigarrays could have different layouts applied to them? ü§î With `genarray_of_array1` and co.
[18:48:10] <d_bot> <VPhantom> Sorry I mean with `Bigarray.reshape`
[18:49:44] <companion_cube> layouts yes, but the type vs underlying storage type are relatively fixed
[18:50:04] <companion_cube> you can turn your thing into a 3D byte array if you want
[18:50:09] <companion_cube> it'll still be `char`
[18:50:14] <d_bot> <VPhantom> Ah yes I see they're matched in the signature. Bummer.
[18:50:44] <d_bot> <Patate> Why do you need this @VPhantom ?
[18:50:48] <companion_cube> you can go from char to int, but it means packing chars 4 by 4 or 8 by 8
[18:51:01] <companion_cube> (so the result is 4 or 8√ó shorter)
[18:51:20] <d_bot> <VPhantom> @Patate It's in reference to the question by @reynir and since I'm starting to learn how to do buffers and I/O with Bigarray I took an interest. üòâ
[18:51:37] <d_bot> <Patate> I am not sure this is what they wanted
[18:52:42] <d_bot> <Patate> Oh yes, I mistook you for reynir ^^
[18:54:05] <d_bot> <Patate> The goal is to see each int8_unsigned as an int instead of a char, am I right?
[19:16:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:17:59] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:48:59] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[19:54:21] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[19:58:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:59:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:25:21] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:56:26] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (Ping timeout: 268 seconds)
[21:11:19] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[21:16:10] <reynir> yea
[21:17:04] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[21:17:31] <reynir> well, I'm trying to use a bigarray from one API with another API, and one treats them as chars and the other as ints, but as far as I understand (and I don't understand bigarray very well) the underlying type in memory is 8bit unsigned ints
[21:18:01] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[21:25:39] <Drup> reynir: there was a PR to add an operation to change the kind as you say
[21:25:45] <Drup> something by gasche, iirc
[21:38:16] <reynir> Ah
[21:38:29] <reynir> curious what happened with that PR
[21:49:31] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:53:23] <d_bot> <Patate> Oh ok, I  understand better now
[22:06:57] <d_bot> <Patate> There might be a hack to this, as after all they are both arrays of int8_unsigned internally... But I have no clue how to do it...
[22:10:21] <d_bot> <EduardoRFS> Can pattern matching on a first class module change the type of an abstract type? Like it happens when matching on GADTs.
[22:14:07] *** Quits: olle_ (~olle@i5E866D9C.versanet.de) (Ping timeout: 256 seconds)
[22:19:57] <d_bot> <Patate> What do you mean by pattern matching a first class module?
[22:29:18] *** Joins: zebrag (~chris@user/zebrag)
[22:43:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:48:57] <d_bot> <octachron> Not currently, there are not type equation to introduce when pattern matching on a first class modules
[22:51:12] <companion_cube> how are equations handled, internally? rewriting?
[23:11:32] *** Joins: olle_ (~olle@i5E866D9C.versanet.de)
[23:12:49] <d_bot> <Alistair> Is there any documentation on how gadts are implemented?
[23:21:23] <d_bot> <octachron> The current implementation works by adding a temporary expansion to an abstract type  through the environment (which is why GADTs can only refine abstract types).
[23:26:59] <d_bot> <octachron> I fear that the documentation are the few articles on the subject, the few comments in the code and the code itself.
[23:28:51] <d_bot> <Alistair> I've read the ambivalent types paper, but it was rather unclear on a couple things and I was looking to see whether the code could clarify anything
[23:42:08] *** Joins: vicfred (~vicfred@user/vicfred)
[23:51:25] <d_bot> <hcarty> @reynir IIRC there was a post on the discuss forum showing how to use ctypes to cast bigarrays between different types but the same memory representation
[23:52:32] <d_bot> <hcarty> https://discuss.ocaml.org/t/cast-bigarray-kind/8469/6 is the thread I was thinking of
