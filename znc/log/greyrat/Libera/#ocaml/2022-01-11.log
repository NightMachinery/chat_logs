[00:00:45] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:03:49] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[00:05:06] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:10:31] <companion_cube> it's long but it's a nice overview I think
[00:10:55] <d_bot> <VPhantom> I liked the CBOR spec. Nice and small.
[00:11:41] <companion_cube> I like the msgpack spec (the online one)
[00:11:43] <companion_cube> very readable
[00:13:14] <d_bot> <VPhantom> In either case since it spells out field names with strings everywhere I never saw a real appeal to it vs text JSON. Size is only marginally smaller, it's still free-form, it just represents some types a bit more compactly. On the plus side, CBOR allows integers as keys, so one could kinda do as compact as Protobuf with it, with the upside of not having to know the size of nested structures ahead of serializing them.
[00:22:15] *** Quits: jlrnick (~josephler@2a01cb040a15940000d35e859ebfbf6e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[00:37:45] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[00:38:33] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:41:55] *** Joins: gdd (~gdd@129.199.146.230)
[00:46:19] <companion_cube> well strings can still be s bit smaller
[00:46:24] <companion_cube> a*
[00:46:30] <companion_cube> and faster to encode/decode
[00:48:49] <d_bot> <VPhantom> CBOR doesn't use Varint though so its integers are straight-through I/O.
[00:54:21] <Leonidas> companion_cube: I remember something about the Msgpack spec that strings are terribly encoded
[00:54:30] <Leonidas> and there was a new encoding added later
[00:55:01] <companion_cube> I don't know, the current spec is ok
[00:55:05] <companion_cube> https://github.com/msgpack/msgpack/blob/master/spec.md (for reference)
[00:57:22] <Leonidas> Ah, I think it was fixstr vs str 8/16/32 or something, don't remember anymore
[00:58:27] <Leonidas> we used it at work and I thought it was a terrible choice because it is neither compact nor human readable so all the downsides of protobuf with none of the upsides
[00:58:54] <companion_cube> well you certainly need a decoder
[01:02:07] <Leonidas> Yes, and our structure was always fixed
[01:19:17] <d_bot> <cemerick> Is anyone aware of an OCaml take on the liveview/hotwire/blazor concept?
[01:35:31] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:40:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:45:24] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 256 seconds)
[01:46:04] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[01:48:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:53:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:09:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:19:09] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[02:19:21] <rgrinberg> server side rendering?
[02:35:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:36:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:36:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[02:44:22] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Remote host closed the connection)
[02:44:54] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[02:47:53] *** infinity0 is now known as Guest9673
[02:47:53] *** Quits: Guest9673 (~infinity0@occupy.ecodis.net) (Killed (zirconium.libera.chat (Nickname regained by services)))
[02:48:09] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[02:49:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:06:00] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:ff6c:f852:4f52:5e7c) (Quit: Konversation terminated!)
[03:08:49] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi) (Quit: Leaving.)
[03:13:28] *** Joins: vijon (~vijon@8.45.42.59)
[03:14:12] *** Quits: vijon (~vijon@8.45.42.59) (Client Quit)
[03:18:01] *** Quits: rks` (~trefis@ns366843.ip-37-59-60.eu) (Ping timeout: 268 seconds)
[03:18:20] *** Joins: rks` (~trefis@ns366843.ip-37-59-60.eu)
[03:21:25] *** Joins: bobo_ (~bobo@37.170.94.249)
[03:22:18] *** Quits: spip (~bobo@37.165.237.23) (Ping timeout: 256 seconds)
[03:27:49] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:32:55] *** Quits: olle (~olle@i5E866D84.versanet.de) (Ping timeout: 256 seconds)
[04:03:00] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:44:19] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[05:56:22] <companion_cube> not just that
[05:56:44] <companion_cube> re-rendering parts of pages  from the server
[06:21:51] <d_bot> <colin> can someone remind me how you're meant to get odoc to work
[06:28:29] *** Joins: rgrinberg (~textual@187.223.71.231)
[06:30:56] <rgrinberg> do you have a dune project? if you do, it should just be $ dune build @doc
[06:31:17] <d_bot> <colin> that's something that's said in docs
[06:31:19] <d_bot> <colin> but is not true
[06:31:38] <d_bot> <colin> you seem to require some bunch of `.opam` stuff and `public_name` and etc. etc.
[06:31:51] <d_bot> <colin> I had this working before but totally forgot the trick
[06:32:04] <d_bot> <colin> I don't publish opam packages so it's surreal that I require opam stuff to generate some HTML
[06:33:08] <d_bot> <Anurag> I don't think you need `.opam`, but you do need `public_name`. Or as the docs mention you can use `dune build @doc-private` <https://dune.readthedocs.io/en/stable/documentation.html?highlight=odoc#building-documentation>
[06:35:16] <d_bot> <colin> thank you, that appears to work
[06:53:14] <ns12> cemerick: Eliom.
[07:15:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:17:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:53] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[07:18:47] *** Joins: noddy (~user@user/noddy)
[07:44:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:45:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:48:44] <d_bot> <rbjorklin> Do you have any kind of budget for this stuff? I used to work for https://www.apptus.com/ and their ecommerce platform is pretty solid. In-memory database with search, navigation, recommendations the whole shebang.
[07:53:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:55:46] *** Joins: mbuf (~Shakthi@122.178.183.53)
[08:00:39] <d_bot> <rbjorklin> The landing page is full of fluff nowadays but if you want to look into it in a bit more detail their docs page is pretty good: https://docs.apptus.com/
[08:09:33] *** Joins: hackinghorn (~hornhacki@137.132.214.132)
[08:09:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:10:11] *** Quits: hackinghorn (~hornhacki@137.132.214.132) (Client Quit)
[08:10:18] *** Joins: hackhorn (~hornhacki@137.132.214.132)
[08:10:25] *** hackhorn is now known as hackinghorn
[08:10:30] *** Quits: hackinghorn (~hornhacki@137.132.214.132) (Remote host closed the connection)
[08:15:15] *** Joins: hackinghorn (~hornhacki@137.132.214.132)
[08:15:24] *** Quits: hackinghorn (~hornhacki@137.132.214.132) (Changing host)
[08:15:24] *** Joins: hackinghorn (~hornhacki@user/hackinghorn)
[08:18:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:20:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:25:47] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[08:32:26] *** Joins: tizoc (~user@li296-221.members.linode.com)
[08:34:02] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:38:22] *** Quits: ansiwen (~sanders@vm1.a6n.de) (Quit: ZNC 1.7.1 - https://znc.in)
[08:40:36] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[08:51:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:51:50] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[08:54:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:21:26] *** Joins: hackhorn (~hornhacki@137.132.212.138)
[09:23:50] *** Quits: hackinghorn (~hornhacki@user/hackinghorn) (Ping timeout: 256 seconds)
[09:28:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:30:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:31:57] *** Joins: hornhack (~hornhacki@137.132.212.135)
[09:34:36] *** Quits: hackhorn (~hornhacki@137.132.212.138) (Ping timeout: 256 seconds)
[09:37:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[10:01:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:26:27] *** Joins: mro (~mro@port-92-195-228-180.dynamic.as20676.net)
[10:27:40] <ns12> I noticed that Opium doesn't yet support sessions. Are users supposed to implement their own support using cookies, as a stopgap measure?
[10:35:06] <hornhack> should I unpack a tuple with "match t with | (a,b) ->" or "let a, b = t in" ?
[10:35:28] <hornhack> oh let a,b = t in looks more simple
[10:51:33] <hornhack> how do I make a list of tuple into 2 lists? I can write a function, I think
[10:53:48] <hornhack> like this: let first = .. let second = ..; let divide = (List.map ~f:first tuple_list) , (List.map ~f:second tuple_list)
[10:55:02] <hornhack> I guess thats good enough?
[10:58:38] <d_bot> <quernd> There are builtin functions for this in the Stdlib: https://ocaml.org/api/Stdlib.html#1_Pairoperations
[10:59:12] <d_bot> <quernd> `fst` and `snd`, so you won't have to define your own
[11:00:16] <octachron> List.split
[11:00:37] *** Quits: rom1504 (rom1504@rom1504.fr) (Ping timeout: 240 seconds)
[11:02:53] *** Joins: rom1504 (rom1504@rom1504.fr)
[11:03:17] <d_bot> <quernd> even better
[11:17:07] <hornhack> eh really
[11:17:11] <hornhack> let me see, thanks
[11:17:55] <hornhack> wow, list.split is good
[11:18:43] <hornhack> hm I'm using Base
[11:18:59] <hornhack> oh they are unzip in Base
[11:19:10] *** Quits: mro (~mro@port-92-195-228-180.dynamic.as20676.net) (Remote host closed the connection)
[11:19:23] <hornhack> woohoo, I will use List.unzip, thankss
[11:20:27] *** Joins: mro (~mro@port-92-195-228-180.dynamic.as20676.net)
[11:51:50] *** Quits: hornhack (~hornhacki@137.132.212.135) (Changing host)
[11:51:50] *** Joins: hornhack (~hornhacki@user/hackinghorn)
[12:01:42] *** Quits: rgrinberg (~textual@187.223.71.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:05:17] *** Quits: mro (~mro@port-92-195-228-180.dynamic.as20676.net) (Remote host closed the connection)
[12:07:05] *** Joins: mro (~mro@port-92-195-228-180.dynamic.as20676.net)
[12:25:59] *** Quits: mro (~mro@port-92-195-228-180.dynamic.as20676.net) (Remote host closed the connection)
[12:26:08] *** Quits: Absalom (kax@envs.net) (Quit: the lounge - https://webirc.envs.net)
[12:26:35] *** Joins: mro (~mro@port-92-195-228-180.dynamic.as20676.net)
[12:26:40] *** Joins: Absalom (~Absalom@envs.net)
[12:39:56] *** Joins: hackhorn (~hornhacki@137.132.211.135)
[12:42:13] *** Quits: hornhack (~hornhacki@user/hackinghorn) (Ping timeout: 240 seconds)
[12:44:57] *** Joins: hornhack (~hornhacki@137.132.217.134)
[12:47:50] *** Quits: hackhorn (~hornhacki@137.132.211.135) (Ping timeout: 256 seconds)
[12:48:05] *** Joins: bartholin (~bartholin@158.110.70.210)
[12:50:49] *** Joins: olle (~olle@i5E866D9F.versanet.de)
[12:52:27] *** Joins: hackhorn (~hornhacki@137.132.218.137)
[12:53:02] *** Joins: xd1le (~xd1le@user/xd1le)
[12:55:03] *** Quits: hornhack (~hornhacki@137.132.217.134) (Ping timeout: 256 seconds)
[13:29:51] *** Quits: mro (~mro@port-92-195-228-180.dynamic.as20676.net) (Remote host closed the connection)
[13:31:54] *** Joins: mro (~mro@port-92-195-228-180.dynamic.as20676.net)
[13:57:22] *** Joins: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr)
[14:00:41] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[14:03:47] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[14:09:57] *** Joins: hornhack (~hornhacki@137.132.211.135)
[14:11:26] *** Quits: hornhack (~hornhacki@137.132.211.135) (Remote host closed the connection)
[14:11:46] *** Joins: hornhack (~hornhacki@137.132.211.135)
[14:12:13] *** Quits: hackhorn (~hornhacki@137.132.218.137) (Ping timeout: 240 seconds)
[14:16:48] *** Quits: hornhack (~hornhacki@137.132.211.135) (Ping timeout: 256 seconds)
[14:21:45] *** Quits: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr) (Ping timeout: 256 seconds)
[14:28:06] <d_bot> <let Butanium = raise Not_found;;> https://cdn.discordapp.com/attachments/436568060288172044/930415268566544434/unknown.png
[14:28:31] <d_bot> <let Butanium = raise Not_found;;> I'm looking at the optimization page of the ocaml website :
[14:28:31] <d_bot> <let Butanium = raise Not_found;;> > Owl: a scientific computing library that accelerates mathematical code. If you’re considering writing code that’s heavy in floating point math, you should be using Owl.
[14:28:58] <d_bot> <let Butanium = raise Not_found;;> What's a code heavy in floating point math ?
[14:39:28] <d_bot> <Alistair> data science stuff I imagine
[14:45:44] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[14:49:31] <d_bot> <bnguyenv> I'd say there are two topics. As the page says, one of the difficulties is that floats are boxed. With enough flambda inlining and unboxing that can be ok though. The other is if you're doing linear algebra (or just vectorized operations on arrays), then you want BLAS etc, and Owl can give you a convenient interface (a la numpy) (but I've never used it).
[14:49:40] <d_bot> <bnguyenv> In that case I think owl-base is enough.
[14:52:17] <d_bot> <bnguyenv> Personally I've used lacaml and odepack for simple linear algebra and ODE integration (because at the time Owl was just starting and was a bit too big for me).
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:58:11] *** Quits: mro (~mro@port-92-195-228-180.dynamic.as20676.net) (Read error: Connection reset by peer)
[14:58:17] *** Joins: mro_ (~mro@port-92-195-228-180.dynamic.as20676.net)
[15:21:32] <d_bot> <VPhantom> The problem is that our complexity isn't where most retailers' are. We make some products in-house, outsource some others, we customize in all cases (embroidery, laser engraving, silk screening, etc.) which leads to a fairly complex catalogue. Products have variants and those have options, customers have corporate-set budgets, etc.
[15:21:41] *** Joins: spip (~bobo@37.165.209.213)
[15:21:49] *** Quits: bobo_ (~bobo@37.170.94.249) (Ping timeout: 256 seconds)
[15:23:12] <d_bot> <VPhantom> We looked at platforms like Shopify Plus (used by Staples) and it's too cookie-cutter for us.
[15:25:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:30:04] *** Joins: jlrnick (~josephler@gw.lipn.univ-paris13.fr)
[15:30:55] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[15:32:03] *** Quits: mro_ (~mro@port-92-195-228-180.dynamic.as20676.net) (Remote host closed the connection)
[15:35:37] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[15:48:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:53:01] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 240 seconds)
[15:53:19] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[16:06:36] *** Joins: mro (~mro@2002:5cc3:e4b4:0:647f:106a:e37f:c059)
[16:15:22] *** Quits: mro (~mro@2002:5cc3:e4b4:0:647f:106a:e37f:c059) (Remote host closed the connection)
[16:21:29] *** Joins: xiongxin1 (~Thunderbi@119.123.100.12)
[16:23:01] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 256 seconds)
[16:23:01] *** xiongxin1 is now known as xiongxin
[16:43:55] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[17:00:00] *** Quits: xiongxin (~Thunderbi@119.123.100.12) (Ping timeout: 256 seconds)
[17:00:20] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[17:01:40] <d_bot> <cemerick> there's a lot more to e.g. liveview than just server-side rendering, but yeah
[17:08:38] <d_bot> <cemerick> eliom is a different thing altogether; the multitier concept is appealing, but not looking to buy into something like that at this point
[17:21:58] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:22:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:28:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:31:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:33:47] <d_bot> <VPhantom> About Hotwire & co, isn't this basically going back to good old "AJAX"? Like <https://htmx.org/> and such modern takes.
[17:44:37] <d_bot> <mseri> Note that owl-base does not use blas/lapack, it is all ocaml
[17:45:19] <d_bot> <mseri> To use optimized libraries you need to use `owl`
[17:45:34] <d_bot> <mseri> Or, as suggested lacaml
[17:47:33] <d_bot> <mseri> Sorry, I was still logged with the wrong account
[17:47:43] <d_bot> <bnguyenv> Oh ok thanks for the correction !
[17:48:19] <d_bot> <mseri> Np. It is useful if you want to use it to compile for the browser for interactive simulations for example
[17:49:07] <d_bot> <mseri> Like https://www.mseri.me/owlde-demo-icfp2019/
[17:52:31] *** Joins: gwizon (~gwizon@ool-45798cb0.dyn.optonline.net)
[17:54:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[17:56:59] *** Parts: olle (~olle@i5E866D9F.versanet.de) ()
[18:01:19] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Remote host closed the connection)
[18:16:55] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[18:20:24] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:22:13] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Ping timeout: 240 seconds)
[18:26:13] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:27:49] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 240 seconds)
[18:28:07] *** Joins: xiongxin (~Thunderbi@119.123.100.12)
[18:36:01] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[18:43:50] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:44:27] *** Joins: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95)
[18:44:51] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Ping timeout: 268 seconds)
[18:45:58] *** Joins: xiongxin1 (~Thunderbi@113.116.224.194)
[18:45:58] *** Quits: xiongxin (~Thunderbi@119.123.100.12) (Ping timeout: 256 seconds)
[18:45:59] *** xiongxin1 is now known as xiongxin
[18:47:07] <d_bot> <Bluddy> Has the merge of the multicore PR been celebrated here yet?
[18:47:36] <d_bot> <Bluddy> Found it
[18:50:13] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:13:07] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[19:14:35] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[19:17:25] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Ping timeout: 240 seconds)
[19:18:34] *** Quits: xiongxin (~Thunderbi@113.116.224.194) (Quit: xiongxin)
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:23:41] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[19:41:55] *** Quits: jlrnick (~josephler@gw.lipn.univ-paris13.fr) (Ping timeout: 256 seconds)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:53:43] *** Quits: kakadu (~kakadu@195.19.236.234) (Quit: Konversation terminated!)
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:14:11] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:44:29] *** Quits: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:11:55] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[21:12:12] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[21:13:43] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[21:16:37] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Ping timeout: 240 seconds)
[21:24:58] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:30:21] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[21:32:53] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[21:38:24] *** Quits: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131) (Quit: Leaving...)
[21:40:58] *** Quits: mbuf (~Shakthi@122.178.183.53) (Quit: Leaving)
[21:43:47] <d_bot> <mseri> @Bluddy it started here 🙂
[21:44:44] <d_bot> <Kakadu> What is the best way to explain a newbie, that putting a mutable field 'value' to part of AST that represents variables, is a bad idea?
[21:46:23] <Corbin> It sounds like some sort of basic constant propagation? It might be fine if wrapped with a `result`.
[21:47:12] <d_bot> <Kakadu> No, he's going to write an interpeter with assignment,  and needs to store values of various variables.
[21:54:08] <d_bot> <Et7f3> use a exemple with shadowing ?
[21:55:18] <d_bot> <Kakadu> @Et7f3 Could you expand your idea with more details?
[22:00:10] <d_bot> <Et7f3> `let foo = 3 in 4 + 4` is stored with something like that `Bind{name="foo", value=Int{value=3}, exp=Plus{lhs=Int{value=4}, Int{value=4}}, value=0}`?
[22:01:47] <d_bot> <Et7f3> then I will just show a exemple with many Bind and he will see how it is slow to access variable and will present map.
[22:01:59] <d_bot> <Kakadu> No, values are stored near identifiers.  https://github.com/IAmFunkyFrog/fp2021/blob/kotlin/Kotlin/lib/ast.ml#L56
[22:03:50] <d_bot> <Et7f3> where does he mutate this field ?
[22:04:50] <d_bot> <Kakadu> I don't know yet.... Right now I got an idea, that if variabless occurs in code many times, how will assignment of one will be propagated to other occurences....
[22:09:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:13:45] <d_bot> <Et7f3> One advice I can give is at least to use adt instead of bool+ref so he doesn't forget to check it
[22:14:29] <d_bot> <Et7f3> The only reason that can break is if you want a step back feature in the interpreter
[22:23:29] <d_bot> <Et7f3> value is in variable_t is in record_content is in record_t is in object_t so it basically mean that when in the language we write: `someObject.field = 3` it mutate in memory object
[22:25:07] *** Quits: gwizon (~gwizon@ool-45798cb0.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:43:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:59:25] <d_bot> <KW78> Isn't the the AST somehow separate from the environnement which hold the variables. ASTs are typically immutable (unless you are doing in place AST to AST transformation, but I would guess it is not that  here). The environment contains the "foo" variable. When evaluating / interpreting, a Bind node will update the environment. (Env.add "foo" 8 myenv).
[22:59:43] <d_bot> <KW78> this solves the problem of "propagating"
[23:00:01] <companion_cube> in OCaml, the typedtree is mutable, afaik
[23:00:07] <companion_cube> beause it does contain the bindings
[23:00:09] <d_bot> <KW78> but not that of shadowing / scope.
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:01:11] <d_bot> <KW78> but why would the bindings change ? unless you want some AST transformation
[23:02:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[23:03:15] <d_bot> <octachron> The typedtree is immutable, it is type expressions that are mutable in order to handle variable unification with an union-find.
[23:04:09] <d_bot> <KW78> ok that makes sense
[23:04:56] <companion_cube> if  you want to be pedantic and separate types from typedtree :p
[23:05:15] <d_bot> <Kakadu> @KW78 I understand how having an environment helps with propagation. I want a concrete points why proposed "ast" is bad
[23:06:10] <d_bot> <KW78> I think one reason is prececily how to you map all occurences of an variable in a AST.
[23:06:33] <Corbin> Concretely, ASTs should be immutable; syntax is immutable, and that should include abstract syntax.
[23:07:37] <Corbin> Earlier, when you first asked, I wanted to suggest teaching about Harvard-style machines where code is always immutable. But I'm still not sure whether that would be an appropriate topic for newbies.
[23:08:50] <companion_cube> OCaml has mutable types for good reasons, though :)
[23:10:20] *** Joins: mro (~mro@2002:5cc3:e4b4:0:4802:986f:fce5:e131)
[23:10:28] <Corbin> Sure. But remember Pirsig's definition; "good" is what you like. (Also remember that Pirsig emphasized not demeaning "good" simply because it's an opinion!)
[23:10:45] <d_bot> <Kakadu> @companion_cube Is it the case where mutability required?
[23:11:02] <companion_cube> I mean it's not required, as far as I can tell. It's just faster.
[23:11:32] <d_bot> <Kakadu> @companion_cube Faster to produce spagetti or faster for perfoance reasons?
[23:11:42] <d_bot> <Kakadu> perfomance*
[23:11:49] <companion_cube> performance is better
[23:12:00] <companion_cube> the typechecker spends a lot of time dereferencing metavariables
[23:12:51] <d_bot> <Kakadu> Yeah, in context of OCaml's type inference you are right, but I'm more interested in mini-Kotlin example above
[23:13:27] <d_bot> <Kakadu> @Corbin we explain newbies about Harvard architecture but I don't understand how it is relevant to my original question
[23:13:51] <companion_cube> I haven't followed, but how do you do when there's multiple instances of a variable?
[23:13:55] <companion_cube> like in a recursive  call
[23:15:26] <d_bot> <Bluddy> Immutable trees are good when they're simple. The more abstract interpretation/types you add to them, the less simple they become, and the more you might as well use mutability.
[23:15:38] <Corbin> Kakadu: If they can understand that it's acceptable for a computer to have immutable code, then hopefully it's not hard to explain to them that an AST is a code object, and thus that it can be reasonable for ASTs to be immutable.
[23:16:15] <companion_cube> are AST "code object"? hmmm :p
[23:16:39] <d_bot> <Bluddy> At a certain point, to stay immutable, you're handling multiple maps from id to value, where the id represents a node. So now you need to handle garbage collection on that map. Might as well just use references.
[23:18:10] <d_bot> <Bluddy> @Kakadu the newbie doesn't understand that the AST is completely separate from the state machine that interprets the AST. The state machine is far easier to make mutable. The AST is much cleaner when it's immutable.
[23:23:46] <d_bot> <Kakadu> > ... you're handling multiple maps from id to value, where the id represents a node. So now you need to handle garbage collection on that map. Might as well just use references
[23:23:46] <d_bot> <Kakadu> Does it implies that we need to prepare beforehand places in AST for new information, which implies high coupling?
[23:24:51] <Corbin> companion_cube: A practical example: My preferred JIT toolkit can accelerate AST-walking interpreters, but only really works when the AST is immutable.
[23:25:23] <companion_cube> ah, JITs, such a good example of code always being immutable :)
[23:25:29] <companion_cube> (I imagine you talk about graal?)
[23:27:14] <Corbin> (RPython, actually. Fun fact: I changed Monte's RPython codebase to *remove* a bytecode compiler, and it got faster; the bytecode format was cyclopean compared to the AST, I guess.)
[23:27:59] <companion_cube> rpython does sound cool
[23:28:41] <companion_cube> not really related to my point about ocamlc, which itself wasn't really related to the kotlin AST above, though :)
[23:30:43] <d_bot> <Bluddy> I think so. If you're trying to coordinate multiple trees (e.g. an effect tree, a type tree, a syntax tree), pure immutability quickly becomes painful. I did it in haskell and it was awful. But if you keep the tree structure simple, things remain easy to manage.
[23:30:52] <d_bot> <Bluddy> And then immutable trees are by far the best.
[23:31:14] <d_bot> <Bluddy> That's what OCaml does -- it doesn't decorate the tree, but rather transforms it entirely at every step.
[23:31:29] <d_bot> <Bluddy> Although it still uses mutability for efficiency
[23:31:50] <d_bot> <Kakadu> Yes, but it *should* hurt performance!
[23:32:07] <d_bot> <Kakadu> I'm talking about tranforming to entire new tree
[23:32:43] <d_bot> <Bluddy> You're not doing that during evaluation of the interpreter! If it's just a typing stage, and then some other analysis stage etc -- those things are cheap.
[23:32:59] <d_bot> <Bluddy> creating the new tree isn't a dominant cost in that case
[23:33:06] <d_bot> <Bluddy> the interpreter should not work this way at all
[23:33:59] <d_bot> <Kakadu> > creating the new tree isn't a dominant cost in that case
[23:33:59] <d_bot> <Kakadu> Can you recommend papers/projects that measure it?
[23:38:40] <d_bot> <Bluddy> I really don't know. How many times are you going to be transforming the tree?
[23:39:34] <d_bot> <Bluddy> Most times you have an input and you go through several stages to produce the output. Even 50 stages are going to be trivial in most instances.
[23:40:54] <d_bot> <Bluddy> That's kind of what functional programming excels at: immutable input -> immutable output. That's why they're so good for compilers
[23:46:47] <d_bot> <Kakadu> >  Even 50 stages are going to be trivial in most instances.
[23:46:48] <d_bot> <Kakadu> If we have an another type for AST for every (nano) pass of optimisation, I suspect that most parts of AST should be just copied, so overall performance is going to be pessimised. It's difficult for amy to imagine any structural sharing between stages.
