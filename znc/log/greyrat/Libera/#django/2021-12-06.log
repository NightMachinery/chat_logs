[00:00:05] <VaniaPy> hmm that raises an exception
[00:00:14] <VaniaPy>     raise ImproperlyConfigured(
[00:00:14] <VaniaPy> django.core.exceptions.ImproperlyConfigured: Requested setting STATIC_URL, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.
[00:01:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:01:56] *** ChanServ sets mode: +v EvilDMP
[00:09:46] *** Quits: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[00:11:13] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:14:04] <GinFuyou> schemefusion, tying django app to webpages, even "usually", is generally incorrect.
[00:22:45] <schemefusion> GinFuyou: lots of generalization in tutorials out there
[00:26:29] <GinFuyou> That why we usually recommend sticking with official one, though it might be not very detailed one
[00:38:23] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 252 seconds)
[00:42:41] <duoi> GinFuyou the official one is meh
[00:42:55] <duoi> ive always liked the django girls tutorial, it's really high quality
[00:51:27] *** Joins: schemefusion (~schemefus@fedora/twohot)
[01:26:15] *** Quits: justSleigh (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[01:28:31] *** Joins: justSleigh (~justache@user/justache)
[01:30:27] *** Quits: pidroid (~pidroid@user/pidroid) (Quit: bye !)
[01:46:41] <dre> the official one does the job tbh
[01:47:31] *** Joins: pidroid (~pidroid@user/pidroid)
[01:49:57] <FunkyBob> they're both excellent
[01:53:10] <GinFuyou> I have issues with official, but overall it pretty good and doesn't give wrong ideas as far as I remember
[01:55:37] *** Joins: dor (~erg@78.11.12.207)
[02:03:11] *** Parts: yanchai (~yanchai@203.177.194.130) ()
[02:05:17] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 252 seconds)
[02:07:53] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[02:09:41] *** Quits: dre (~dre@2001:8003:c932:c301:4931:2ba9:a613:d21a) (Ping timeout: 252 seconds)
[02:11:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:11:55] *** Joins: dor (~erg@78.11.12.207)
[02:13:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:15:08] *** Quits: dor (~erg@78.11.12.207) (Read error: Connection reset by peer)
[02:16:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:40:50] *** Joins: dor (~erg@78.11.12.207)
[02:45:35] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 256 seconds)
[02:54:42] *** Joins: dor (~erg@78.11.12.207)
[03:02:47] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[03:02:49] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[03:04:56] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 245 seconds)
[03:06:59] *** Joins: schemefusion (~schemefus@fedora/twohot)
[03:11:44] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[03:15:20] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:18:08] *** Joins: dre (~dre@60.229.45.121)
[03:22:45] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[03:23:01] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[03:25:26] *** Joins: pyrrhus (~pyrrhus@user/pyrrhus)
[03:25:35] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:30:12] *** Joins: Atque (~Atque@user/atque)
[03:43:00] *** Quits: pyrrhus (~pyrrhus@user/pyrrhus) (Quit: pyrrhus)
[03:48:21] <dre> here's a question. if I have a bunch of models that are all linked together through FK
[03:49:17] <dre> and I wanted to check a value "far away" like (hypotheical): classroom.class.school.district.state.country.currency == "GBP"
[03:49:25] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 252 seconds)
[03:50:10] <dre> is there a better way to get that? or will django automatically put all of the queries onto the db ?
[03:51:20] <dre> i dunno nvm
[03:56:37] <nbjoerg> dre: it's still a single query
[03:57:00] <nbjoerg> I mean something like .filter(classroom__class__school__... = "GBP")
[03:57:19] <nbjoerg> it will include a number of joins, so it might end up being inefficient
[04:16:44] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 252 seconds)
[04:19:33] *** Joins: schemefusion (~schemefus@fedora/twohot)
[04:33:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:34:59] *** Joins: _jb0t (~j@c-71-59-206-62.hsd1.wa.comcast.net)
[04:39:18] *** Joins: yanchai (~yanchai@222.127.97.162)
[04:47:41] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:49:04] <_jb0t> If I run django-channels with docker containers.. wsgi/gunicorn + nginx in one container and asgi/daphne  in another,  can I still push notifications from the wsgi side. This is described in Using Outside of Consumers https://channels.readthedocs.io/en/stable/topics/channel_layers.html#using-outside-of-consumers
[04:53:35] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 252 seconds)
[04:56:24] <schinckel> dre: It depends - it could be multiple queries, although sometimes you can reduce this by using select_related/prefetch_related.
[04:56:54] <schinckel> Sometimes knowing more about the domain/models means you can shortcut stuff, but not always.
[04:58:32] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 252 seconds)
[05:00:16] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[05:00:24] *** Joins: dor (~erg@78.11.12.207)
[05:00:32] *** Joins: schemefusion (~schemefus@fedora/twohot)
[05:00:42] *** Joins: yanchai (~yanchai@222.127.97.162)
[05:05:08] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 252 seconds)
[05:09:55] *** Joins: djapo (~archangel@user/djapo)
[05:15:01] <yanchai> hi guys
[05:15:36] <yanchai> where should i save my user's info like firstname lastname contact number etc
[05:15:51] <yanchai> should be placed in profile model or in user model?
[05:22:55] *** Quits: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 252 seconds)
[05:30:20] <dre> yanchai, the user model has most of that for you
[05:31:20] *** Quits: Elzington__ (~Elzington@static-68-235-44-10.cust.tzulo.com) (Quit: Leaving)
[05:32:15] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[05:32:23] *** Joins: minto (~mintograd@47.201.5.61)
[05:32:51] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 245 seconds)
[05:46:17] <_jb0t> exit
[05:46:24] *** Quits: _jb0t (~j@c-71-59-206-62.hsd1.wa.comcast.net) (Quit: leaving)
[05:48:16] *** Quits: kostkon (~kostkon@2a02:587:a10c:b4c7:fd34:1163:4629:119a) (Remote host closed the connection)
[05:48:58] *** Joins: catbeard (~noise@user/catbeard)
[05:54:01] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:01:47] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[06:02:03] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:02:40] *** Joins: cliluw (~cliluw@47.147.80.149)
[06:03:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (osmium.libera.chat (Nickname regained by services)))
[06:03:13] *** vinleod is now known as vdamewood
[06:06:55] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 252 seconds)
[06:32:10] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[06:58:22] *** Joins: jb0t (~j@c-71-59-206-62.hsd1.wa.comcast.net)
[06:58:43] *** Joins: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[07:00:18] <jb0t> Anybody using django channels in production with stand alone wsgi and asgi servers? Trying to find out if I can create notifications from the wsgi side.
[07:29:55] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:30:59] *** Joins: yanchai (~yanchai@222.127.97.162)
[07:49:06] *** Quits: sreve (~quassel@p54a71246.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:49:38] *** Joins: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de)
[08:07:37] *** Joins: schemefusion (~schemefus@fedora/twohot)
[08:12:33] *** Quits: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 256 seconds)
[08:22:45] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:26:37] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 252 seconds)
[08:26:41] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:29:48] *** Joins: rje (~rje@50.35.241.164)
[08:44:07] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[08:45:23] *** Joins: Atque (~Atque@user/atque)
[08:46:26] *** Joins: bandit_za (~bandit@192.145.145.86)
[08:50:36] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[08:53:56] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 252 seconds)
[08:56:28] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[08:56:28] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[08:56:28] *** Quits: sisel4 (lysy@user/sisel4) (*.net *.split)
[08:56:29] *** Quits: ops (~ops@user/echelon) (*.net *.split)
[08:56:29] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[08:56:29] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[08:56:29] *** Quits: anorthall_ (~anorthall@user/anorthall) (*.net *.split)
[08:56:29] *** Quits: schemefusion (~schemefus@fedora/twohot) (*.net *.split)
[08:56:29] *** Quits: cliluw (~cliluw@47.147.80.149) (*.net *.split)
[08:56:29] *** Quits: dre (~dre@60.229.45.121) (*.net *.split)
[08:56:29] *** Quits: mxp (~mxp@185.16.205.131) (*.net *.split)
[08:56:29] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (*.net *.split)
[08:56:29] *** Quits: jug (~jug@user/jug) (*.net *.split)
[08:56:29] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[08:56:29] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[08:56:29] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (*.net *.split)
[08:56:29] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[08:56:30] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[08:56:30] *** Quits: lazzurs (~lazzurs@user/lazzurs) (*.net *.split)
[08:56:30] *** Quits: zBeeble (~zBeeble@2001:1928:1::35) (*.net *.split)
[08:56:30] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[08:56:30] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[08:56:30] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[08:56:30] *** Quits: jasonbraganza (~jasonbrag@user/jasonbraganza) (*.net *.split)
[08:56:30] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[08:56:31] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[08:56:31] *** Quits: gitly (~gitly@85.255.233.8) (*.net *.split)
[08:56:31] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (*.net *.split)
[08:56:31] *** Quits: gcbirzan_ (~gcbirzan@user/gcbirzan) (*.net *.split)
[08:56:31] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[08:56:31] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[08:56:31] *** Quits: Throgkt (~Throgkt@user/throgkt) (*.net *.split)
[08:56:31] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[08:56:31] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[08:56:31] *** Quits: lod (~lod@cyber-anlage.de) (*.net *.split)
[08:56:31] *** Quits: hylje (~hylje@ponie.fi) (*.net *.split)
[08:56:31] *** Quits: nathanhi (~nathanhi@user/nathanhi) (*.net *.split)
[08:56:31] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[08:56:31] *** Quits: Damianz (~damian@user/damianz) (*.net *.split)
[08:56:31] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[08:56:31] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[08:56:32] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[08:56:32] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[08:56:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[08:56:32] *** Quits: carl0s[m] (~carl0s@2001:470:69fc:105::305b) (*.net *.split)
[08:56:32] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[08:56:33] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[08:56:33] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[08:56:33] *** Quits: optiz0r (~quassel@universe.sihnon.net) (*.net *.split)
[08:56:33] *** Quits: DanDare (~DanDare@user/dandare) (*.net *.split)
[08:56:33] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[08:56:33] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[08:56:33] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: kanzure (~kanzure@user/kanzure) (*.net *.split)
[08:56:33] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[08:56:33] *** Quits: vancha112[m] (~vancha@2001:470:69fc:105::3473) (*.net *.split)
[08:56:33] *** Quits: brownan (~brownan@2001:470:69fc:105::e01b) (*.net *.split)
[08:56:33] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[08:56:33] *** Quits: krisd (krisd@s0.mydevil.net) (*.net *.split)
[08:56:34] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[08:56:34] *** Quits: dongcarl (~dongcarl@70.107.207.192) (*.net *.split)
[08:56:34] *** Quits: xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[08:56:34] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[08:56:34] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[08:56:34] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[08:56:34] *** Quits: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de) (*.net *.split)
[08:56:34] *** Quits: brsc2909 (~Thunderbi@109.255.244.60) (*.net *.split)
[08:56:35] *** Quits: b-rex (van@down.by.the.river.lol) (*.net *.split)
[08:56:35] *** Quits: KramerC (kramer@user/kramerc) (*.net *.split)
[08:56:35] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[08:56:35] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[08:56:35] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[08:56:35] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[08:56:35] *** Quits: znpy (~znpy@user/znpy) (*.net *.split)
[08:56:35] *** Quits: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[08:56:36] *** Quits: mambang[m] (~mambang@user/mambang) (*.net *.split)
[08:56:36] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[08:56:36] *** Quits: carom (~carom@143.198.135.106) (*.net *.split)
[08:56:36] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[08:56:36] *** Quits: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001) (*.net *.split)
[08:56:36] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[08:56:37] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: veb (sid43929@id-43929.ilkley.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[08:56:37] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[08:56:37] *** Quits: allegary (~allegary@apache/committer/gjm) (*.net *.split)
[08:56:37] *** Quits: ktosiek[m] (~ktosiek@2001:470:69fc:105::87ab) (*.net *.split)
[08:56:37] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[08:56:37] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[08:56:38] *** Quits: dnns01_ (~quassel@2a02:c207:3003:651::1) (*.net *.split)
[08:56:38] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[08:56:38] *** Quits: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd) (*.net *.split)
[08:56:38] *** Quits: Kipe__ (kipe@user/kipe/x-8442575) (*.net *.split)
[08:56:38] *** Quits: nbjoerg (~joerg@netbsd/developer/joerg) (*.net *.split)
[08:56:38] *** Quits: felixx (felixx@django/moderator/felixx) (*.net *.split)
[08:56:38] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[08:56:38] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[08:56:38] *** Quits: malvin (~retlo@172.245.134.89) (*.net *.split)
[08:56:38] *** Quits: wez (~wyoung@about/web/wez) (*.net *.split)
[08:56:38] *** Quits: serafeim (serafeim@thunix.net) (*.net *.split)
[08:56:39] *** Quits: c17r (~c17r@c17r.com) (*.net *.split)
[08:56:39] *** Quits: jochum (~quassel@user/jochum) (*.net *.split)
[08:56:39] *** Quits: blip2 (~blip2@blip2.net) (*.net *.split)
[08:56:39] *** Quits: monokrome (~monokrome@50.215.11.140) (*.net *.split)
[08:56:39] *** Quits: benjaoming (~benjaomin@37.139.19.237) (*.net *.split)
[08:56:39] *** Quits: saschi_ (~saschi@user/saschi) (*.net *.split)
[08:56:39] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[08:56:39] *** Quits: lithium_sulfate (~li2so4@sr388.sophieversum.net) (*.net *.split)
[08:56:39] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[08:56:39] *** Quits: Azelphur (~Azelphur@2a01:4f8:141:3251::2) (*.net *.split)
[08:56:39] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[08:56:39] *** Quits: kiska (james@user/kiska) (*.net *.split)
[08:56:40] *** Quits: syberspa1e (~syberspac@xiaoxiao.anvor.at) (*.net *.split)
[08:56:40] *** Quits: captain_morgan (~morgan@oit.cloud) (*.net *.split)
[08:56:40] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[08:56:40] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[08:56:40] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[08:56:40] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[08:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[08:56:40] *** Quits: beancurd (~root@149.28.173.96) (*.net *.split)
[08:56:40] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[08:56:40] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[08:56:40] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[08:56:40] *** Quits: T-101 (T-101@imases.biss.ee) (*.net *.split)
[08:56:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[08:56:40] *** Quits: Atque (~Atque@user/atque) (*.net *.split)
[08:56:40] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (*.net *.split)
[08:56:41] *** nyany is now known as Duck
[08:57:20] *** Duck is now known as 020AAGZV8
[08:58:08] *** Joins: Atque (~Atque@user/atque)
[08:58:08] *** Joins: schemefusion (~schemefus@fedora/twohot)
[08:58:08] *** Joins: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de)
[08:58:08] *** Joins: cliluw (~cliluw@47.147.80.149)
[08:58:08] *** Joins: dre (~dre@60.229.45.121)
[08:58:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:58:08] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[08:58:08] *** Joins: koo5_ (~quassel@51.140.155.227)
[08:58:08] *** Joins: gitly (~gitly@85.255.233.8)
[08:58:08] *** Joins: mxp (~mxp@185.16.205.131)
[08:58:08] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[08:58:08] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[08:58:08] *** Joins: gcbirzan_ (~gcbirzan@user/gcbirzan)
[08:58:08] *** Joins: jgee (~jgee@186.80.49.20)
[08:58:08] *** Joins: Azelphur (~Azelphur@2a01:4f8:141:3251::2)
[08:58:08] *** Joins: newdimension (~newdimnes@user/newdimension)
[08:58:08] *** Joins: jug (~jug@user/jug)
[08:58:08] *** Joins: malvin (~retlo@172.245.134.89)
[08:58:08] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[08:58:08] *** Joins: Throgkt (~Throgkt@user/throgkt)
[08:58:08] *** Joins: Trieste (T@user/pilgrim)
[08:58:08] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[08:58:08] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[08:58:08] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[08:58:08] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:58:08] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[08:58:08] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[08:58:08] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[08:58:08] *** Joins: lod (~lod@cyber-anlage.de)
[08:58:08] *** Joins: hylje (~hylje@ponie.fi)
[08:58:08] *** Joins: nathanhi (~nathanhi@user/nathanhi)
[08:58:08] *** Joins: c17r (~c17r@c17r.com)
[08:58:08] *** Joins: dlam (~dlam@dlam.me)
[08:58:08] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[08:58:08] *** Joins: Damianz (~damian@user/damianz)
[08:58:08] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[08:58:08] *** Joins: crowbar (~crowbar@user/crowbar)
[08:58:08] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[08:58:08] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[08:58:08] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[08:58:08] *** Joins: jasonbraganza (~jasonbrag@user/jasonbraganza)
[08:58:08] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[08:58:08] *** Joins: vancha112[m] (~vancha@2001:470:69fc:105::3473)
[08:58:08] *** Joins: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[08:58:08] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[08:58:08] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[08:58:08] *** Joins: rvgate (~rvgate@user/rvgate)
[08:58:08] *** Joins: brownan (~brownan@2001:470:69fc:105::e01b)
[08:58:08] *** Joins: carl0s[m] (~carl0s@2001:470:69fc:105::305b)
[08:58:08] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[08:58:08] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[08:58:08] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[08:58:08] *** Joins: b-rex (van@down.by.the.river.lol)
[08:58:08] *** Joins: deepy (deepy@user/deepy)
[08:58:08] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[08:58:08] *** Joins: KramerC (kramer@user/kramerc)
[08:58:08] *** Joins: ktosiek[m] (~ktosiek@2001:470:69fc:105::87ab)
[08:58:08] *** Joins: sisel4 (lysy@user/sisel4)
[08:58:08] *** Joins: blip2 (~blip2@blip2.net)
[08:58:08] *** Joins: monokrome (~monokrome@50.215.11.140)
[08:58:08] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[08:58:08] *** Joins: veb (sid43929@id-43929.ilkley.irccloud.com)
[08:58:08] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[08:58:08] *** Joins: bparker (~nobody@user/bparker)
[08:58:08] *** Joins: benjaoming (~benjaomin@37.139.19.237)
[08:58:08] *** Joins: saschi_ (~saschi@user/saschi)
[08:58:08] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[08:58:08] *** Joins: vlt (~dm@157.230.21.14)
[08:58:08] *** Joins: krisd (krisd@s0.mydevil.net)
[08:58:08] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[08:58:08] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[08:58:08] *** Joins: xavierdarkness (~xavierdar@user/xavierdarkness)
[08:58:08] *** Joins: tonitch (~tonitch@user/tonitch)
[08:58:08] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[08:58:08] *** Joins: mdk (~mdk@python/psf/mdk)
[08:58:08] *** Joins: syberspa1e (~syberspac@xiaoxiao.anvor.at)
[08:58:08] *** Joins: captain_morgan (~morgan@oit.cloud)
[08:58:08] *** Joins: mastardet (~mastardet@user/mastardet)
[08:58:08] *** Joins: lithium_sulfate (~li2so4@sr388.sophieversum.net)
[08:58:08] *** Joins: optiz0r (~quassel@universe.sihnon.net)
[08:58:08] *** Joins: DanDare (~DanDare@user/dandare)
[08:58:08] *** Joins: pjs (~pjs@user/pjs)
[08:58:08] *** Joins: duoi (~duoi@user/duoi)
[08:58:08] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[08:58:08] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[08:58:08] *** Joins: tureba (~tureba@tureba.org)
[08:58:08] *** Joins: kanzure (~kanzure@user/kanzure)
[08:58:08] *** Joins: _janus (~janus@blotter.ld-linux.so)
[08:58:08] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[08:58:08] *** Joins: wallbroken (wallbroken@user/wallbroken)
[08:58:08] *** Joins: cebor (~cebor@user/cebor)
[08:58:08] *** Joins: urth (~urth@geertswei.nl)
[08:58:08] *** Joins: znpy (~znpy@user/znpy)
[08:58:08] *** Joins: mambang[m] (~mambang@user/mambang)
[08:58:08] *** Joins: allegary (~allegary@apache/committer/gjm)
[08:58:08] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[08:58:08] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[08:58:08] *** Joins: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f)
[08:58:08] *** Joins: T-101 (T-101@imases.biss.ee)
[08:58:08] *** Joins: ops (~ops@user/echelon)
[08:58:08] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[08:58:08] *** Joins: beancurd (~root@149.28.173.96)
[08:58:08] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[08:58:08] *** Joins: Wooble (~Wooble@107.170.27.240)
[08:58:08] *** Joins: anorthall_ (~anorthall@user/anorthall)
[08:58:08] *** Joins: beanzilla (beanzilla@user/beanzilla)
[08:58:08] *** Joins: shodan45 (~quassel@107.161.22.155)
[08:58:08] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[08:58:08] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:08] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[08:58:08] *** Joins: strudl (~strudl@user/strudl)
[08:58:08] *** Joins: carom (~carom@143.198.135.106)
[08:58:08] *** Joins: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001)
[08:58:08] *** Joins: Kipe__ (kipe@user/kipe/x-8442575)
[08:58:08] *** Joins: nbjoerg (~joerg@netbsd/developer/joerg)
[08:58:08] *** Joins: felixx (felixx@django/moderator/felixx)
[08:58:08] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[08:58:08] *** Joins: wyre (~wyre@user/wyre)
[08:58:08] *** Joins: bss (bss@rie.incorporeal.org)
[08:58:08] *** Joins: dnns01_ (~quassel@2a02:c207:3003:651::1)
[08:58:08] *** Joins: serafeim (serafeim@thunix.net)
[08:58:08] *** Joins: wez (~wyoung@about/web/wez)
[08:58:08] *** Joins: shrysr (~shrysr@user/shrysr)
[08:58:08] *** Joins: jochum (~quassel@user/jochum)
[08:58:08] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[08:58:08] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[08:58:08] *** Joins: kiska (james@user/kiska)
[08:58:08] *** Joins: oisota (~oisota@user/oisota)
[08:58:08] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[08:58:08] *** Joins: adamchainz (~adamj@51.15.34.126)
[08:58:08] *** Joins: ChanServ (ChanServ@services.libera.chat)
[08:58:08] *** strontium.libera.chat sets mode: +vvo felixx apollo13 ChanServ
[08:58:13] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:40] *** Joins: koolazer (~koo@user/koolazer)
[09:07:33] *** Quits: blip2 (~blip2@blip2.net) (*.net *.split)
[09:07:33] *** Quits: monokrome (~monokrome@50.215.11.140) (*.net *.split)
[09:07:33] *** Quits: benjaoming (~benjaomin@37.139.19.237) (*.net *.split)
[09:07:33] *** Quits: saschi_ (~saschi@user/saschi) (*.net *.split)
[09:07:33] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[09:07:33] *** Quits: lithium_sulfate (~li2so4@sr388.sophieversum.net) (*.net *.split)
[09:07:33] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[09:07:33] *** Quits: Azelphur (~Azelphur@2a01:4f8:141:3251::2) (*.net *.split)
[09:07:33] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[09:07:33] *** Quits: kiska (james@user/kiska) (*.net *.split)
[09:07:49] *** Joins: benjaoming (~benjaomin@37.139.19.237)
[09:07:54] *** Joins: lithium_sulfate (~li2so4@sr388.sophieversum.net)
[09:08:02] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[09:08:03] *** Joins: blip2 (~blip2@blip2.net)
[09:08:10] *** Joins: kiska (james@user/kiska)
[09:08:31] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[09:08:34] *** Joins: shrysr (~shrysr@user/shrysr)
[09:20:28] *** Quits: syberspa1e (~syberspac@xiaoxiao.anvor.at) (*.net *.split)
[09:20:28] *** Quits: captain_morgan (~morgan@oit.cloud) (*.net *.split)
[09:20:28] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[09:20:28] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[09:20:28] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[09:20:29] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[09:20:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[09:20:29] *** Quits: beancurd (~root@149.28.173.96) (*.net *.split)
[09:20:29] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[09:20:29] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[09:20:29] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[09:20:29] *** Quits: T-101 (T-101@imases.biss.ee) (*.net *.split)
[09:20:38] *** Joins: adamchainz (~adamj@51.15.34.126)
[09:20:39] *** Joins: syberspace (~syberspac@xiaoxiao.anvor.at)
[09:20:41] *** Joins: shodan45 (~quassel@107.161.22.155)
[09:20:58] *** Joins: urth (~urth@geertswei.nl)
[09:21:07] *** Joins: captain_morgan (~morgan@oit.cloud)
[09:21:07] *** Joins: oisota (~oisota@user/oisota)
[09:21:16] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[09:21:34] *** Joins: beanzilla (beanzilla@user/beanzilla)
[09:21:50] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:26:49] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[10:15:14] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[10:15:38] *** Joins: yanchai (~yanchai@222.127.97.162)
[10:15:43] <yanchai> hi guys
[10:16:01] <yanchai> is it possible to save 2 user_id into 2 fields on logs table?
[10:16:32] <yanchai> assuming the employee who is logged in and the student being scanned will be added to the logs table
[10:16:41] <yanchai> ?
[10:18:26] <yanchai> i mean what is the best practice in saving into logs table wherein we need to know the student who enters the campus and the employee scanning the student
[10:18:40] <yanchai> student and employee shares the same user table
[10:19:04] <yanchai> where the users table has user_type field to distinguis between the two
[10:27:18] <ktosiek[m]> yanchai: you can add 2 ForeignKey fields to your log table, just make sure they have different `related_name='...'`
[10:45:06] *** Joins: cyphase (~cyphase@user/cyphase)
[10:45:46] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:46:50] <serafeim> hello friends
[10:53:22] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[10:54:37] *** vdamewood is now known as Guest1016
[10:54:37] *** Quits: Guest1016 (~vdamewood@fedora/vdamewood) (Killed (zinc.libera.chat (Nickname regained by services)))
[10:54:37] *** vinleod is now known as vdamewood
[11:12:45] *** Quits: bandit_za (~bandit@192.145.145.86) (Ping timeout: 256 seconds)
[11:14:30] *** Joins: bandit_za (~bandit@192.145.144.24)
[11:19:42] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:d1e5:a687:3950:5fb1)
[11:19:47] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:27:25] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 240 seconds)
[11:31:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:31:50] *** ChanServ sets mode: +v EvilDMP
[11:34:39] *** Joins: Tas-sos (~Tas-sos@ppp079167204100.access.hol.gr)
[11:42:18] *** Joins: Azelphur (~Azelphur@static.156.2.9.176.clients.your-server.de)
[11:42:34] *** Quits: pidroid (~pidroid@user/pidroid) (Quit: bye !)
[11:43:39] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:47:11] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[11:49:41] *** Joins: pidroid (~pidroid@user/pidroid)
[11:54:14] *** Quits: pidroid (~pidroid@user/pidroid) (Client Quit)
[11:54:53] *** Joins: pidroid (~pidroid@user/pidroid)
[12:07:57] <pidroid> hello
[12:20:21] <FunkyBob> hi
[12:26:21] *** Quits: gitly (~gitly@85.255.233.8) (Ping timeout: 256 seconds)
[12:27:24] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:d1e5:a687:3950:5fb1) (Quit: Leaving)
[12:28:06] *** Joins: gitly (~gitly@185.69.144.108)
[12:38:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:42:46] *** Joins: jmd (~user@195.243.197.82)
[12:46:45] *** Quits: gitly (~gitly@185.69.144.108) (Ping timeout: 265 seconds)
[12:48:25] *** Joins: gitly (~gitly@148.252.133.169)
[12:53:29] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:57:41] *** Joins: dedsm (~dedsm@140-243-178-143.ftth.glasoperator.nl)
[13:01:06] *** Joins: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr)
[13:01:39] *** Parts: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr) ()
[13:02:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:02:39] *** ChanServ sets mode: +v EvilDMP
[13:10:45] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[13:10:54] *** Joins: dor (~erg@78.11.12.207)
[13:11:25] *** Quits: gitly (~gitly@148.252.133.169) (Quit: WeeChat 3.3)
[13:16:13] *** Quits: jmd (~user@195.243.197.82) (Ping timeout: 240 seconds)
[13:20:09] *** Quits: pidroid (~pidroid@user/pidroid) (Quit: bye !)
[13:34:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[13:35:43] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[13:42:32] *** Quits: dre (~dre@60.229.45.121) (Remote host closed the connection)
[13:43:57] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[14:04:45] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[14:14:41] *** Joins: pidroid (~pidroid@user/pidroid)
[14:20:30] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[14:39:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[14:39:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:39:45] *** ChanServ sets mode: +v EvilDMP
[14:41:28] *** Joins: xkuru (~xkuru@user/xkuru)
[14:42:37] *** Quits: pidroid (~pidroid@user/pidroid) (Ping timeout: 240 seconds)
[14:44:16] *** Quits: oblikoamorale (~n@user/oblikoamorale) (Ping timeout: 268 seconds)
[14:44:49] *** Joins: oblikoamorale (~n@user/oblikoamorale)
[14:45:16] *** Joins: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e)
[14:59:08] *** Quits: schemefusion (~schemefus@fedora/twohot) (Ping timeout: 252 seconds)
[15:09:10] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[15:09:19] *** Joins: schemefusion (~schemefus@fedora/twohot)
[15:13:51] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:16:06] *** Quits: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e) (Ping timeout: 265 seconds)
[15:33:19] *** Joins: dre (~dre@60.229.45.121)
[15:33:25] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 256 seconds)
[15:34:44] *** Joins: burgandyhill191 (~quassel@169-0-235-156.ip.afrihost.co.za)
[15:41:18] *** Quits: burgandyhill191 (~quassel@169-0-235-156.ip.afrihost.co.za) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:53:19] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:53:19] *** ChanServ sets mode: +v EvilDMP
[15:53:57] *** Quits: bandit_za (~bandit@192.145.144.24) (Ping timeout: 252 seconds)
[15:56:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:58:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:58:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:00:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:05:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:06:32] <duoi> hey, havent played with django admin for a long time, im wondering if i can achieve what i want to achieve
[16:07:10] <duoi> essentially when adding an entry i want to create a 'bulk add' form which has a few basic fields followed by a tabularinline of a series of different fields, and eventually i can hook in and modify the create to do what i want to do
[16:07:22] <duoi> on change i just want to display a standard set of fieldsets specific to that particular instance
[16:07:28] <duoi> is there any clear way of actually acheiving this?
[16:12:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:17:46] *** Quits: hylje (~hylje@ponie.fi) (Quit: Now offline)
[16:18:15] *** Joins: hylje (~hylje@ponie.fi)
[16:23:43] *** Joins: imakestuff (~imakestuf@197.156.77.3)
[16:24:38] <imakestuff> Anyone using turbolinks and stimulus with Django? Do you use middleware implementations like https://github.com/dgladkov/django-turbolinks for it?
[16:31:42] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[16:36:35] *** Joins: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br)
[16:36:42] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Remote host closed the connection)
[16:38:34] *** Joins: SteveR (~SteveR@103.215.168.1)
[16:40:18] *** Joins: yanchai (~yanchai@203.177.194.130)
[16:43:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[16:52:54] *** Joins: Kalov (~Thunderbi@181.226.249.159)
[16:55:35] *** Quits: imakestuff (~imakestuf@197.156.77.3) (Remote host closed the connection)
[16:56:02] *** Quits: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br) (Read error: Connection reset by peer)
[16:56:16] *** Joins: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br)
[17:00:35] *** Joins: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[17:15:49] *** Quits: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br) (Ping timeout: 240 seconds)
[17:19:03] <yanchai> hi everyone
[17:19:36] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[17:19:49] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[17:20:16] <yanchai> what is the best practice for this
[17:21:15] <yanchai> 3 user types , student, employee and guest all of them have profile except student has SN and Degree Program while employee has EN and designation column
[17:21:37] <yanchai> but all of them has address and names
[17:26:20] <yanchai> nvm i gtg thanks everyone!
[17:26:25] *** Parts: yanchai (~yanchai@203.177.194.130) ()
[17:29:06] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Read error: No route to host)
[17:29:18] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[17:31:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:31:20] *** ChanServ sets mode: +v EvilDMP
[17:35:09] *** Quits: Tas-sos (~Tas-sos@ppp079167204100.access.hol.gr) (Quit: leaving)
[17:38:52] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[17:41:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:41:55] *** Joins: xkuru (~xkuru@user/xkuru)
[17:48:28] *** Joins: imakestuff (~imakestuf@197.156.77.3)
[17:58:24] *** Quits: imakestuff (~imakestuf@197.156.77.3) (Remote host closed the connection)
[18:00:49] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 252 seconds)
[18:04:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:17:19] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Remote host closed the connection)
[18:31:45] *** Joins: dez (uid92154@user/dez)
[18:34:55] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[18:48:27] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[18:53:31] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[19:03:03] *** Joins: gitly (~gitly@148.252.133.169)
[19:04:15] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:04:52] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Read error: No route to host)
[19:04:57] *** Joins: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br)
[19:05:09] *** Joins: pycode (~pycode@2001:b07:5d28:551:b178:7be9:b2ba:bab9)
[19:05:11] <pycode> hello
[19:05:15] <pycode> i have a field single_payment = models.BooleanField(blank=True, null=True, default=False)
[19:05:23] <pycode> i pass offer-single_payment = '1'
[19:05:32] <pycode> why it does not set it to True?
[19:05:41] <pycode> should i pass a string with "True" ?
[19:05:55] <pycode> i am reading the request.POST
[19:06:04] <pycode> i see 'offer-single_payment': ['1'],
[19:06:08] <pycode> so there is that field
[19:06:09] <GinFuyou> If it's BoolenField it probably expects type of boolean
[19:06:23] <pycode> GinFuyou, from FORM? so? should i convert 1 to True ?
[19:06:32] *** Quits: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br) (Read error: Connection reset by peer)
[19:06:42] <GinFuyou> Form is always an answer
[19:06:46] *** Joins: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br)
[19:07:22] <GinFuyou> sometimes even litterally since it has validation error messages
[19:07:37] <pycode> GinFuyou, the form is_valid() but i see NULL On db
[19:07:42] <pycode> when i set that field to 1
[19:08:29] <GinFuyou> need more details
[19:08:36] <GinFuyou> what is in cleaned data for example
[19:10:25] <pycode> GinFuyou, i already checked it
[19:10:27] <pycode> and it is 'single_payment': None,
[19:10:43] <pycode> so the data in db is correct, but i have to turn it to True when there is '1'
[19:13:37] <pycode> GinFuyou, how can i turn it to True?
[19:18:09] <moldy> pycode: you have a bug somewhere
[19:18:17] <moldy> we can't tell you where without seeing the code
[19:19:02] <pycode> moldy, it is a custom CBV https://bpa.st/U3MQ
[19:19:37] <moldy> self.request.method in ('POST') <-- that's one bug
[19:20:20] <moldy> this is equivalent to self.request.method in ['P', 'O', 'S', 'T']
[19:20:21] <GinFuyou> https://dpaste.org/ORih well, you are doing something wrong
[19:21:26] <moldy> you probably mean self.request.method in ('POST', ) (the extra comma makes it a tuple). but then you can just write self.request.method == "POST"
[19:22:11] <pycode> GinFuyou, please try with prefix
[19:24:14] <pycode> GinFuyou, request.POST HAS 'offer-single_payment': ['1'],
[19:24:26] <pycode> so i set the '1' correctly from form and i use offer prefix
[19:24:33] *** Quits: schemefusion (~schemefus@fedora/twohot) (Read error: Connection reset by peer)
[19:24:47] <pycode> moldy, ok i fix that
[19:26:03] <GinFuyou> https://dpaste.org/UkJL
[19:26:29] <moldy> i guess the point of overriding get_form_kwargs() is that you want to make the CBV work with a formset?
[19:26:50] <pycode> moldy, no because from the same view i manage two forms
[19:26:52] <pycode> one moment
[19:27:23] <moldy> https://dpaste.org/1Nis you probably want to do something like this then
[19:27:24] <pycode> moldy, the whole class https://bpa.st/5AHA
[19:27:55] <pycode> so each submit button has a name and with that name i can understand what form has been submitted ('offer' or 'contract')
[19:29:38] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[19:33:38] <pycode> moldy, i cant, it is not a FormView or CreateView or something
[19:33:41] <pycode> just templateview
[19:35:21] <pycode> i basically set the "data" on form if THAT FORM has been submitted
[19:35:55] <pycode> moldy, GinFuyou any idea?
[19:39:42] *** Joins: maxizmail (~Max@ip-1b0c.rusanovka-net.kiev.ua)
[19:39:56] *** Joins: Ergo^ (~ergo@91.238.59.144)
[19:40:44] <pycode> so basically i have the same object that could be changed by two forms
[19:49:12] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[19:56:52] *** Quits: dedsm (~dedsm@140-243-178-143.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[19:58:41] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:59:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:02:26] *** Joins: bandit_za (~bandit@192.145.145.31)
[20:02:35] <GinFuyou> pycode, what is the point of 'prefix in self.request.POST' part?
[20:03:10] <pycode> GinFuyou, i have the prefix name in the submit button... to understand what form has been submitted
[20:03:26] <pycode> input type="submit" name="offer" value=".." and so on...
[20:04:01] <GinFuyou> it's on both forms?
[20:04:28] <pycode> GinFuyou, yes one submit has "offer" name and the other "contracT"
[20:04:35] <pycode> "contract"
[20:05:34] *** Quits: lucas_ (~lucascast@192-140-51-192.static.oncabo.net.br) (Remote host closed the connection)
[20:05:38] <pycode> maybe because i use the same object in both ? https://bpa.st/5AHA#1L26
[20:05:53] <pycode> but it is strange because the 'offer" for is the first in post method
[20:06:57] <GinFuyou> so we back to original question, what is point of that line if it on practice always True
[20:08:21] <pycode> GinFuyou, ?? i do not understsand... prefix is a variable, with the name of the form, so to answer to your question i do that control to avoid setting data to the other form
[20:08:28] <pycode> i just need to set data on the correct form
[20:08:49] <pycode> so if it prefix is 'offer' and that form has been sent i set the 'data' on the formclass
[20:09:00] <pycode> otherwise i do not set the data to the other form class if it has NOT been sent
[20:09:10] <GinFuyou> lines 40 and 54 already solve that problem
[20:09:45] <jb0t> If I run daphne/asgi in one docker container and gunicorn/wsgi in another, can I issue notifications from the wsgi app when using Channels?
[20:10:04] <pycode> GinFuyou, yes but whats the point ? i miss it...ok i can remove that condition that check if the prefix is inside the form, ok you are right..
[20:10:06] <pycode> but then ?
[20:11:12] <pycode> GinFuyou, https://bpa.st/CDUQ
[20:11:20] *** Joins: aavrug (uid524982@id-524982.lymington.irccloud.com)
[20:11:54] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[20:12:16] <pycode> GinFuyou,
[20:12:20] <GinFuyou> Well, I was considering what happens on None, I guess it's not the case, but I don't like unnecessary bits in misbehaving code
[20:12:20] <pycode> no now i remember
[20:12:24] <pycode> look at get_context_data
[20:12:29] <pycode> that's the reason i check that too
[20:12:41] <pycode> so i need that condition
[20:12:50] <pycode> in get_context_data i basically load empty form
[20:13:08] <pycode> so in that case i do not have data and 'files'
[20:13:36] <GinFuyou> It only needs check for method == "POST" if any check at all
[20:13:52] <GinFuyou> there is no problem loading those in both forms anyway
[20:13:57] <pycode> for example in case of error... no because in case of error i load the 'data' on both if i do not check what has been sent
[20:14:53] <pycode> GinFuyou, for exampple in case 'offer' form has errors, it reach get_context_data and i load the 'data' on both form but it is not correct... i should load data only in the form that has been sent
[20:16:03] *** Joins: fikran (~fikran@user/fikran)
[20:16:38] <GinFuyou> no, I don't see what's incorrect about it
[20:16:57] <GinFuyou> Anyway, are you sure your data is prefixed correctly?
[20:18:24] <pycode> GinFuyou, the request.POST data is https://bpa.st/DRAA
[20:18:46] <pycode> 'offer-single_payment': ['1'], <--- it has the field
[20:19:31] *** Quits: rje (~rje@50.35.241.164) (Quit: My computer has gone to sleep. ZZZzzz…)
[20:20:45] <GinFuyou> Looks correct, all other fields are fine? I assume you've checked that field is included in form meta?
[20:21:27] <pycode> GinFuyou, no it is not included...i mean i do:
[20:21:28] <pycode> exclude = ('user', 'deal', 'price', 'original_price', 'quote_message', 'email_subject', 'email_message', 'to', 'cc', 'price_list', 'view_time', 'sent_time', 'notes')
[20:21:36] <pycode> i am not using fields i am using exxlcude
[20:22:18] <GinFuyou> also should work
[20:23:00] <pycode> GinFuyou, the form is simple: https://bpa.st/HZBA
[20:30:40] *** Joins: SteveR53 (~SteveR@103.215.168.1)
[20:31:43] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:32:36] <pycode> GinFuyou, maybe the querydict is the problem
[20:33:29] <pycode> wait wait wiat
[20:33:30] <pycode> wait
[20:33:36] <GinFuyou> Looks OK to me... if there is nothing basic, like a typo I don't really see why it wouldn't work like it does in my test
[20:34:58] <jb0t> pycode: Try using ipdb or pdb and check values at runtime with breakpoints.
[20:35:11] <pycode> GinFuyou, how do you explain this? https://bpa.st/WZVA
[20:35:33] <pycode> 'single_payment': None,  :o
[20:35:56] <pycode> found!
[20:36:02] <pycode> it should be an INTEGER
[20:36:06] <pycode> '1' is not working
[20:36:17] <pycode> if i change in data = {'offer-single_payment': 1, .... }
[20:36:20] <pycode> it works!! -_-
[20:36:47] <pycode> https://bpa.st/DLTA <--- this
[20:37:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:37:48] <pycode> how is that possible? so? should i convert the data coming from the form to int ?
[20:38:56] <pycode> pardon i copied it bad... now looks better: https://bpa.st/UXPQ
[20:39:08] <pycode> so? sounds very strange to me that i must convert to int
[20:40:03] <pycode> as you can see conditions = '1' is working....maybe because 'conditions' it is not a field of the model? it is an extra field i have added into the form
[20:40:16] <pycode> conditions  = forms.BooleanField()
[20:40:48] <pycode> in the model the field single_payment is single_payment = models.BooleanField(blank=True, null=True, default=False)
[20:42:23] <jb0t> The to_python() method on a Field is the first step in every validation. It coerces the value to a correct datatype and raises ValidationError if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a FloatField will turn the data into a Python float or raise a ValidationError.
[20:43:13] <jb0t> You shouldn't need to coherce or force cast a form field value if you use django forms.
[20:43:20] <pycode> jb0t, yes sounds correct, but what happen in my case? it is really strange
[20:43:26] <pycode> jb0t, sure i am using django form
[20:43:50] <pycode> jb0t, this one https://bpa.st/IJNA
[20:45:04] <GinFuyou> pycode, well, as showed in my paste it does conversion for me
[20:45:19] <jb0t> If you use the debugger, you can set break points in your code and from that point of execution, analyze all the variables in play of interest. This is the fastest way to figure out what is going on.
[20:46:34] <pycode> GinFuyou, not in my case: https://bpa.st/R6MQ
[20:47:39] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Ping timeout: 252 seconds)
[20:50:34] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[20:51:32] <pycode> i am a bad man i never used the debugger in vscode i need to see how to runserver with debug
[20:53:25] *** Quits: maxizmail (~Max@ip-1b0c.rusanovka-net.kiev.ua) (Ping timeout: 240 seconds)
[20:53:57] *** Joins: Oxygene (~Oxygene@lfbn-lil-1-421-45.w81-49.abo.wanadoo.fr)
[20:54:07] <jb0t> pip install ipython and ipdb then import in the code and use ipdb.set_trace(). In the console running the dev webserver you'll pop into debug mode. If you aren't familiar with ipdb/pdb, its a 10min crash course that will serve you well for years to come.
[20:55:36] <pycode> i check it
[20:55:37] <pycode> thanks
[20:55:40] <jb0t> For this problem, you can stop code execution at any line in real time and see what the current state of variables are at that point of execution.
[20:55:55] <jb0t> verify that values are what you think they are.
[21:02:53] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[21:03:19] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[21:05:26] *** Joins: rje (~rje@65.141.156.170)
[21:07:15] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:07:34] <pycode> i am debugging with vscode but i cannot reach to_python
[21:07:38] <pycode> i do not know the reason
[21:08:49] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:08:53] <jb0t> You won't need to look at to_python. Those get called on validation where the form will walk all field values and call to_python cohercing them to python types then performing validation. That won't be where the problem lives.
[21:09:51] <jb0t> drop set_trace() into your view and/or into your form then step through as necessary.
[21:10:42] <jb0t> pycode: could you make one large pastebin with all the parts involved that I could look at
[21:13:49] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Ping timeout: 240 seconds)
[21:20:21] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[21:20:55] <pycode> jb0t, how to remove set_trace from shell ?
[21:22:01] <jb0t> You'll need to familiarize yourself with the PDB commands. q = quit
[21:22:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:45] <jb0t> When you run inside the dev server, it can introduce problems with threading I think. Just suspend the process with ctrl-z and then kill it.
[21:23:18] <jb0t> *if you find ctrl-c  no longer stops the dev server.
[21:23:36] *** Joins: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[21:23:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:23:50] *** ChanServ sets mode: +v EvilDMP
[21:23:51] *** Joins: rje_ (~rje@65.141.156.170)
[21:25:55] <pycode> however it is very strange to me what happen
[21:26:06] <pycode> as i shown the problem is not my view
[21:26:49] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 265 seconds)
[21:30:31] *** Joins: lucascastro (~lucascast@189.90.44.253.jupiter.com.br)
[21:30:41] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:39:55] *** Joins: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net)
[21:44:35] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[21:45:02] <pycode> null=True
[21:45:04] <pycode> is the problem
[21:45:16] <pycode> if i remove it from the creation of the field in the model
[21:45:35] <pycode> if i set single_payment = 'something' django sets it to True
[21:45:41] <pycode> if i pass an empty string it pass False
[21:45:47] <pycode> so i think it is the correct behavior
[21:46:15] <pycode> it is strange that if i pass single_payment = '0' is True too so basically empty string is False a not empty string is True
[21:46:25] <pycode> is that correct for you right? i mean
[21:48:09] <pycode> GinFuyou, if i use your example
[21:48:16] <pycode> and put '0' it becames True
[21:48:21] <pycode> so i think it is the correct behavior
[21:50:07] <Wooble> pycode: normalizing to a bool by just calling bool() doesn't really sound that weird.
[21:50:20] <jb0t> if 'x': print('a non empty string tests True in Python')
[21:51:24] <pycode> ok
[21:53:17] <jb0t> can you make a single pastebin with all the parts?
[22:01:20] *** Joins: ras_manny (~ras_manny@196.24.166.120)
[22:01:37] *** Quits: SteveR53 (~SteveR@103.215.168.1) (Quit: Client closed)
[22:01:37] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[22:03:57] *** Quits: pycode (~pycode@2001:b07:5d28:551:b178:7be9:b2ba:bab9) (Ping timeout: 268 seconds)
[22:07:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:13:20] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[22:13:25] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[22:20:36] *** Quits: aavrug (uid524982@id-524982.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:23:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:25:24] *** Joins: fikran (~fikran@user/fikran)
[22:27:25] *** Joins: pycode (~pycode@2001:b07:5d28:551:9e8e:828e:b1b7:885d)
[22:33:31] <pycode> jb0t, pardon
[22:33:34] <pycode> i will create it
[22:38:07] <pycode> how can i create a model on the fly?
[22:39:43] <pycode> jb0t, i do not know how to create a model on the fly
[22:39:45] <pycode> however
[22:39:45] <pycode> https://bpa.st/Q3UQ
[22:39:54] <pycode> try those example
[22:40:03] <pycode> and then re-run them without null=True
[22:40:08] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[22:40:10] <pycode> in Test model
[22:40:31] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[22:41:52] *** Joins: slav0nic (slav0nic@python.su)
[22:46:34] *** Quits: pycode (~pycode@2001:b07:5d28:551:9e8e:828e:b1b7:885d) (Ping timeout: 265 seconds)
[22:50:23] *** Joins: dedsm (~dedsm@140-243-178-143.ftth.glasoperator.nl)
[22:52:37] *** Quits: lucascastro (~lucascast@189.90.44.253.jupiter.com.br) (Ping timeout: 240 seconds)
[22:52:47] *** Joins: schemefusion (~schemefus@fedora/twohot)
[22:59:11] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[23:01:34] <jb0t> pycode: https://bpa.st/PRPQ
[23:01:41] *** Quits: ras_manny (~ras_manny@196.24.166.120) (Remote host closed the connection)
[23:01:58] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Read error: Connection reset by peer)
[23:04:39] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[23:05:59] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Remote host closed the connection)
[23:06:12] *** Joins: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br)
[23:08:16] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[23:08:21] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[23:08:36] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[23:09:33] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Read error: Connection reset by peer)
[23:12:36] *** Quits: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net) (Remote host closed the connection)
[23:13:38] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[23:18:07] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[23:18:21] *** Quits: lucascastro (~lucascast@192-140-51-192.static.oncabo.net.br) (Ping timeout: 252 seconds)
[23:18:23] *** Joins: lucas__ (~lucascast@192-140-51-192.static.oncabo.net.br)
[23:38:18] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[23:43:15] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:44:45] *** Quits: Oxygene (~Oxygene@lfbn-lil-1-421-45.w81-49.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[23:46:26] *** Joins: cyphase (~cyphase@user/cyphase)
[23:46:36] *** Joins: jmd (~user@de.cellform.com)
[23:46:55] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
