[00:20:35] *** Joins: klovett (~klovett@107.115.32.2)
[00:36:07] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[01:13:11] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:13:46] *** Joins: badkins (~badkins@136.56.92.199)
[01:14:42] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:14:50] *** Joins: badkins (~badkins@136.56.92.199)
[01:19:14] <amazigh> People gave me feedback, but then I lost momentum
[01:19:26] <amazigh> I documented the process to add a Scheme at https://git.sr.ht/~amirouche/scheme.rs/tree/main/item/comparator/README.md
[01:20:13] <amazigh> I will make a questionnaire later, when I improve a little the thing.
[01:27:02] <amazigh> e.g. add a description about what each flag means
[01:30:01] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[01:30:01] *** Joins: gproto23_ (~gproto23@user/gproto23)
[01:30:39] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Quit: Leaving)
[01:47:33] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[02:00:11] <wasamasa> sounds like a joke
[02:00:29] <wasamasa> "Why did Scheme not succeed? Because it lost momentum."
[02:02:01] <sham1> The momentum is just in another continuation
[02:02:38] <wasamasa> yeah, you just need to call it some day
[02:06:22] <gwatt> guix is interesting and is providing some momentum
[02:07:58] <sham1> Sadly there are still parts in there in Nix
[02:11:25] <gwatt> what do you mean by that?
[02:15:08] <amazigh> it is not wholly and fully scheme, it has c++ bits
[02:15:14] <amazigh> curly braces et al.
[02:15:43] <amazigh> wasamasa: yes, I know, there is so much thing to do, I do not know on which one to focus.
[02:16:00] <wasamasa> focus on one thing and finish it, lol
[02:16:13] <wasamasa> small projects have better chances
[02:16:37] <amazigh> #true
[02:27:00] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 260 seconds)
[02:37:34] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[02:45:30] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:49:58] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[03:02:40] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 264 seconds)
[03:07:19] *** Joins: klovett_ (~klovett@107.115.32.2)
[03:09:42] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:10:17] *** Joins: badkins (~badkins@136.56.92.199)
[03:10:28] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 264 seconds)
[03:13:16] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c8e1:ef7b:3ea9:8366) (Remote host closed the connection)
[03:14:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[03:16:23] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c8e1:ef7b:3ea9:8366)
[03:19:53] *** Cathrinus is now known as lulu
[03:20:02] *** lulu is now known as Lulu
[03:20:39] *** Joins: daviid (~user@179.210.52.91)
[03:25:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:26:20] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[03:30:03] *** Quits: klovett_ (~klovett@107.115.32.2) (*.net *.split)
[03:30:03] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[03:30:03] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (*.net *.split)
[03:30:03] *** Quits: amoe (~amoe@visarend.solasistim.net) (*.net *.split)
[03:30:03] *** Quits: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8) (*.net *.split)
[03:30:03] *** Quits: winning-luser (~winning-l@2601:8c1:80:70d0::756) (*.net *.split)
[03:30:03] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (*.net *.split)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:03] *** Quits: Lysandros (~Lysandros@user/lysandros) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[03:30:04] *** Quits: j0ni (c79e08d4b1@2604:bf00:561:2000::2a) (*.net *.split)
[03:30:04] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[03:30:04] *** Quits: saorge (~saorge@ns378138.ip-5-196-67.eu) (*.net *.split)
[03:30:11] *** Joins: j0ni (c79e08d4b1@2604:bf00:561:2000::2a)
[03:30:19] *** Joins: aeth (~aeth@69.250.185.173)
[03:30:21] *** Joins: saorge (~saorge@ns378138.ip-5-196-67.eu)
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:24] *** Joins: Lysandros (~Lysandros@2a02:aa13:8100:7880:21a:a0ff:fea7:35e)
[03:30:25] *** Joins: amoe (~amoe@visarend.solasistim.net)
[03:30:25] *** Quits: aeth (~aeth@69.250.185.173) (Changing host)
[03:30:25] *** Joins: aeth (~aeth@user/aeth)
[03:30:47] *** Joins: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8)
[03:31:51] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[03:32:31] *** Joins: daviid` (~user@179.210.52.91)
[03:32:44] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[03:33:55] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[03:34:11] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[03:34:36] *** daviid` is now known as daviid
[03:35:11] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[03:35:22] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:29] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:36:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:38:32] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 240 seconds)
[03:38:46] *** Quits: jao (~jao@45.152.183.62) (Ping timeout: 256 seconds)
[03:41:02] *** Joins: livoreno (~livoreno@user/notzmv)
[03:42:33] *** Joins: badkins (~badkins@136.56.92.199)
[03:51:56] *** Quits: tripfandango (~tripfanda@5.29.56.77) (Ping timeout: 252 seconds)
[03:52:20] *** Menchers is now known as BoostedMenchers
[04:30:04] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5)
[04:33:08] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[04:34:17] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5) (Ping timeout: 252 seconds)
[04:36:02] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:36:43] *** Joins: badkins (~badkins@136.56.92.199)
[04:44:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:47:20] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:51:19] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:02:51] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 245 seconds)
[05:38:06] *** Joins: hiruji (~hiruji@user/hiruji)
[05:41:53] *** Joins: sheb (~sheb@31.223.228.71)
[05:44:04] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[05:44:20] *** Joins: sheb (~sheb@31.223.228.71)
[05:45:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[05:50:11] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[05:58:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:08:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:17:24] <Zipheir> dpk: Given that the poll page doesn't say anything about sending email to anyone, I may just take it out of the topic.  I don't want people to get the wrong idea.
[06:17:52] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5)
[06:22:26] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5) (Ping timeout: 245 seconds)
[06:27:36] <Zipheir> The poll already asks for a name; if what's missing is biographical/"interest in Scheme" info, IMHO that should be added as a required field.
[06:28:22] <Zipheir> "Well, it's not so simple, you've got to *send* your name here..." is just silly red tape.
[06:33:17] *** Joins: klovett (~klovett@107.115.32.2)
[06:41:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:44:26] <Zipheir> Eh, sorry for the grumpiness.
[06:56:07] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:59:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:01:25] *** Joins: aeth (~aeth@user/aeth)
[07:08:07] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Remote host closed the connection)
[07:08:40] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[07:11:35] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[07:19:06] *** Quits: choas (~lars@ppp-188-174-58-126.dynamic.mnet-online.de) (Ping timeout: 245 seconds)
[07:21:07] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[07:24:50] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[07:37:49] <mdhughes> Grumpiness is appreciated. I don't want to mess around with mailing lists. It's 2021, the dream of email is over.
[07:54:06] *** Quits: shawn (~shawn_w@152.44.212.188) (Ping timeout: 245 seconds)
[07:56:35] *** Joins: mononote (~mononote@user/mononote)
[08:04:35] *** Joins: badkins (~badkins@136.56.92.199)
[08:06:05] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5)
[08:09:09] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[08:10:39] *** Quits: sbodin (~sbodin@185.12.224.251) (Quit: Leaving)
[08:11:15] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5) (Ping timeout: 268 seconds)
[08:17:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:29:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[08:31:32] *** Quits: Lysandros (~Lysandros@2a02:aa13:8100:7880:21a:a0ff:fea7:35e) (Changing host)
[08:31:32] *** Joins: Lysandros (~Lysandros@user/lysandros)
[08:33:16] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[08:34:00] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[08:38:40] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[09:20:58] *** Joins: shawn (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:27:38] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[09:28:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:40:02] <ns12> I noticed that some R7RS-small Scheme implementations (e.g. Guile and MIT Scheme) do not implement datum labels e.g. #0=(1 2 3 . #0#). Is this feature particularly difficult to implement?
[09:40:20] <amazigh> hello ns12 et al.
[09:40:22] <amazigh> :)
[09:40:30] <amazigh> ns12: I do not know 
[09:40:47] <amazigh> I never used that feature
[09:41:22] <amazigh> ns12: do you have an example R7RS-small project with mit-scheme?
[09:41:37] <amazigh> I am looking for one
[09:42:06] <ns12> No, I do not have any R7RS-small projects ...
[09:42:42] <amazigh> how do you run program with mit-scheme?
[09:42:50] <amazigh> you do not use define-library?
[09:43:31] <ns12> Either using (load ...) or "mit-scheme --quiet < myprog.scm".
[09:43:44] <amazigh> ok :)
[09:45:50] <ns12> For a long time, I used MIT Scheme version 9.x, which did not implement R7RS-small. I have only recently begun looking into R7RS-small in MIT Scheme after I installed version 11.2, which has improved R7RS-small support.
[09:46:26] <amazigh> I wondering how to create my own R7RS libraries with mit-scheme.
[09:46:36] <amazigh> I guess I will need to ask on the mailing list
[09:47:08] <ns12> You write a file containing define-library, then you (load ...) that file into the REPL.
[09:47:41] <amazigh> libraries can be `(load ...)`'ed
[09:47:43] <amazigh> ?
[09:48:12] <ns12> The file containing the define-library can be (load ....)ed.
[10:03:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:05:17] <ns12> amazigh: For example, copy the library example in R7RS-small section 5.6.2 into a file (e.g. myprog.scm). Run it in MIT Scheme using (load "myprog.scm").
[10:06:07] <ns12> But REPL support for "define-library" and "import" appears to be deficient.
[10:07:13] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[10:28:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:35:36] *** Joins: tripfandango (~tripfanda@5.29.56.77)
[10:40:02] *** Quits: tripfandango (~tripfanda@5.29.56.77) (Ping timeout: 252 seconds)
[10:40:15] *** Joins: badkins (~badkins@136.56.92.199)
[10:44:54] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[10:59:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[11:06:54] *** Quits: renormalist (~ss5@renormalist.net) (Quit: leaving)
[11:07:02] *** Joins: renormalist (~ss5@renormalist.net)
[11:08:57] *** Joins: badkins (~badkins@136.56.92.199)
[11:11:34] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2b1a:1927:b5c5:1912)
[11:13:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[11:17:55] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5)
[11:23:53] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[11:27:34] *** Quits: amazigh (~amirouche@user/amirouche) (Read error: Connection reset by peer)
[11:29:33] *** Joins: amazigh (~amirouche@user/amirouche)
[11:32:35] *** Quits: amazigh (~amirouche@user/amirouche) (Client Quit)
[11:32:45] *** Joins: amazigh (~amirouche@user/amirouche)
[11:34:28] <dpk> i’m get the impression that the future of MIT Scheme is looking distinctly uncertain anyway
[11:34:51] <ecraven> well, it lay dormant for a few years, then had a burst of activity, so maybe it's just dormant again?
[11:35:17] <dpk> it already doesn’t work on OpenBSD because of enforced W^X and they say that would be too much effort to fix
[11:35:55] <ecraven> ah, yea, I read about the W^X problems.. 
[11:36:10] <ecraven> well, maybe someone steps up to fix that, but it'll be a lot of work..
[11:36:20] <ecraven> like making Edwin support utf-8, I think that's still an open task too :-/
[11:36:45] <dpk> it doesn’t run on ARM-based Macs for unclear reasons (possibly a combination of W^X and no ARM backend?), but if they don’t fix that Mac support will disappear entirely in the next five to ten years
[11:37:49] <dpk> plus the weird situation with partial R7 support
[11:39:35] <amazigh> The problem is between the chair and the keyboard regarding R7 and mit-scheme
[11:40:09] <amazigh> the mit-scheme source has .sld files, and can be imported, but those need to compiled (or packaged), the test suite has an example of that
[11:40:45] <amazigh> re Apple M1, IIRC the problem is also W^X
[11:41:23] <amazigh> OpenBSD enforce W^X
[11:41:40] <amazigh> W^X is write XOR execute mmap'ed file, correct?
[11:43:30] <dpk> yes
[11:43:52] <amazigh> on an unrelated note, I still think that unsyntax (https://unsyntax.org) would have been more interesting and useful if it was hosted on R5RS
[11:44:09] <dpk> or on Chez
[11:44:18] <amazigh> why Chez?
[11:44:42] <dpk> speed, mainly
[11:44:56] <amazigh> unsyntax should be written with R5RS, and generate R5RS code.
[11:45:45] <dpk> wait, does vanilla Chez run on ARM Macs? i thought i read the Racket team wrote the Aarch64 backend
[11:45:45] <amazigh> In that case, it would be trivial to target Chez.
[11:45:59] <amazigh> Racket yes, but not cisco
[11:46:18] <amazigh> they even have W^X support iirc.
[11:48:12] <lockywolf> I think /usr/local is usually mounted with wxallowed
[11:49:31] <lockywolf> scheme popularity could be increased by writing useful software in scheme :)
[11:49:44] <amazigh> On openbsd? Apple M1 force W^X at the silicon level
[11:49:53] <lockywolf> on openbsd, obviously
[11:49:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[11:50:09] <amazigh> re useful software: so say we all!
[11:50:49] <lockywolf> amazigh, do you, by any chance, know amirouche ?
[11:50:57] <amazigh> lockywolf: yes, it is me :)
[11:51:01] <amazigh> why?
[11:51:13] <amazigh> see /whois amazigh 
[11:51:49] *** Joins: aeth (~aeth@user/aeth)
[11:52:45] <amazigh> At this very time, I have 12 scheme implementation running in debian, some are compiled from source, others are from debian repository, and at least racket is just a binary install.
[11:52:59] <lockywolf> I recently talked to a guy who was interested in taking part in making a competitor to Google, so I remembered your project.
[11:53:07] <lockywolf> Babelia, wasn't it...?
[11:53:12] <amazigh> yes.
[11:53:24] <lockywolf> Are you still working on it?
[11:55:17] <amazigh> more or less... I mean, $WORK IP and $$$ situation is complicated, I will know during this month whether I can continue.
[11:55:57] <amazigh> I few weeks back, there was babelbot here, that was a search engine.
[11:56:07] <lockywolf> "writing useful software", I think, often means finding "pain points", such that people would be willing to overcome the difficulties of switching to a new language
[11:57:06] <lockywolf> e.g., in terms of censorship circumvention, I found a lot of stuff written in Go, which made me learn a bit of Go
[11:57:24] <amazigh> I unplugged babelbot because I have no more VPS.
[12:00:26] <amazigh> re pain points, search is a pain point, but more down to earth^Wscheme there is portable programs and libraries
[12:02:27] <amazigh> on a completly unrelated note, I think I am an op on this channel.
[12:02:36] *** ChanServ sets mode: +o amazigh
[12:02:48] *** ChanServ sets mode: -o amazigh
[12:04:32] <lockywolf> amazigh, keep this duty with honour
[12:04:57] <lockywolf> I am not sure that a general-purpose web search is a pain point now
[12:05:06] <lockywolf> Google is not that bad, after all
[12:05:47] <amazigh> it improved last year, but it is missing key features imo
[12:05:54] <dpk> Google the search engine is still the best in terms of results quality, though UI quality has got dramatically worse in recent years
[12:05:59] <lockywolf> I really wish someone could do at least a semi-working indexer for all those colossal data silos that are called "messengers"
[12:06:03] <dpk> Google the company can get fucked
[12:06:31] <amazigh> such as 'command + query' like github introduced behinda feature flag, or history of search queries.
[12:06:46] <lockywolf> at least those that have "free entry", like Telegram
[12:07:16] <lockywolf> a "history of search queries" is not the search engine's responsibility
[12:07:23] <amazigh> re github command doc at https://docs.github.com/en/get-started/using-github/github-command-palette
[12:07:30] <lockywolf> there should be a browser extension for that
[12:07:35] <amazigh> hehe
[12:08:23] <amazigh> basically, there is many tools one can build upon a bare search api, that nobody so far does.
[12:09:09] <amazigh> tho, implementing those features on top ddg is also possible.
[12:09:36] <lockywolf> the problem is that few people use web search now
[12:09:37] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[12:09:49] <amazigh> yep that's true
[12:09:57] <amazigh> I mean that's my feeling too
[12:09:59] <lockywolf> Google is still great for programmers
[12:11:50] <amazigh> I was waiting a follow up message...
[12:12:08] <lockywolf> ?
[12:12:15] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[12:12:29] <amazigh> Google is merely a homepage 
[12:12:43] <amazigh> people use it as an entry point into silos
[12:13:05] <lockywolf> I am just saying that user experience differs between social groups.
[12:13:54] <lockywolf> Google search may feel awesome to programmers, who can relatively easily find solutions to their problems, partially because most people who develop Google search are using it themselves.
[12:14:13] <lockywolf> But overall, Google indexes ~5% of the Internet
[12:15:05] <Franciman> lockywolf: incredible
[12:15:24] <lockywolf> I have been astonished to learn that high school kids overwhelmingly do not know how to use google search
[12:15:41] <amazigh> lol
[12:15:45] <amazigh> how did you learn that?
[12:15:46] <lockywolf> Just do not have that intuition.
[12:15:58] <lockywolf> Well, I worked as a high school teacher for a year.
[12:16:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:17:05] <amazigh> that somewhat similar to the article "millenials are more clueless about computers, than boomers, even if millenials were born with computers"
[12:17:38] <lockywolf> The pay was laughable, but I had access to the younger generation (with sinister intentions, obviously:)), and got at least something into my CV.
[12:18:17] <amazigh> the essay is about how locked-in platforms have stripped away (or blocked from) knowledge from their users
[12:18:35] <lockywolf> I am still planning to find a teaching job eventually, but probably not in a high school.
[12:19:38] <lockywolf> I remember that butthurt-inducing article discussed on Slashdot, that discussed how search has replaced filesystem hierarchy.
[12:20:37] <amazigh> on the subject I highly recommend reading about akkartik work on https://github.com/akkartik/teliva#readme and https://github.com/akkartik/mu/#readme
[12:20:37] <lockywolf> So, indexing silos could have been a great thing to do.
[12:21:13] <amazigh> re telive description is: Fork of Lua 5.1 to encourage end-user programming.
[12:22:18] <lockywolf> I do not really think that it is possible to make programming as omnipresent as writing.
[12:22:41] <lockywolf> Most people like executing programs much more than making them.
[12:23:01] <amazigh> yes, it is similar to books, most people do write books.
[12:23:07] <amazigh> yes, it is similar to books, most people do NOT write books.
[12:23:17] <lockywolf> most people do write _something_
[12:23:47] <lockywolf> Gees, the piece of software I use to pay for food, requires 1.3G RSS.
[12:23:56] <amazigh> in a similar way, I think most people should be able to code _something_
[12:24:21] <lockywolf> and I only use it to scan a QR-code and input the sum and the pin
[12:24:24] *** Quits: klovett (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[12:24:41] <amazigh> also end-user programming is not only about turning non-programmers into programmers, it is also a principled approach toward programs that are hackable
[12:25:07] <lockywolf> people don't want hackable programs :(
[12:25:43] <dpk> the popularity of spreadsheets suggests otherwise
[12:25:44] <lockywolf> just as people don't want stainful knives
[12:26:06] <lockywolf> spreadsheets are a marvelous exception
[12:26:29] <lockywolf> maybe it is possible to go lure people into programming via spreadsheets
[12:27:25] <amazigh> I just read someone made x86 emulator inside excel
[12:27:44] <dpk> also rms's remark on how the secretaries at MIT learned Emacs Lisp from the manual
[12:28:25] <lockywolf> people are usually surprised how easy programming is
[12:30:39] <amazigh> I recall another essay about a related topic that explains that some person from an alternate universe come to our universe and explain how they do programming their universe: there is not a SPOF 'software engineer' role, instead there is a miriad of roles, and "at the top" there is the *designer* which are world famous, and considered in way that is similar to worldwide artist in our universe.
[12:31:03] <amazigh> some of them are world famous.
[12:31:33] <amazigh> the essay try to draw a parallel with construction work domain somewhat in a romantic way
[12:32:09] <amazigh> in fact, any domain except software. That is only in software where we put "everybody" in the same bucket, with short deadlines, and expect miracles.
[12:32:59] <amazigh> another good metaphor / parallel, that I read in another essay is: medecine.
[12:33:24] <lockywolf> well, John Carmack is quite famous
[12:33:29] <amazigh> they say, software should be built by teams that looks like medecine teams doing operations.
[12:33:35] <lockywolf> as is Linus
[12:34:00] <amazigh> with a chief operator, then various assistants.
[12:34:36] <dpk> even non-professional programmers who can program, do write their own programs
[12:34:53] <dpk> sometimes quite significant ones (pandoc comes to mind)
[12:36:37] <amazigh> which is in fact what happens in pratice, but that is not the official paradigm. 
[12:36:51] <amazigh> Also chief operators have do most of their education from free-time work, unlike doctors that have dedicated time at school.
[12:37:38] <wasamasa> dpk: wasn't that story about how it could be, not what actually happened? I remember it being worded very carefully...
[12:37:40] <amazigh> military works in a way that relatable
[12:37:40] <lockywolf> there is "software-driven X"
[12:39:31] <lockywolf> "relatable" as "in total chaos"?
[12:40:40] <lockywolf> test
[12:42:13] <lockywolf> gees, my connection is awful
[12:45:37] <lockywolf> being a doctor could have been fun, but they are too restricted by rules
[12:46:00] <lockywolf> medicine is to a large extent mechanised 
[12:46:13] <lockywolf> there are standard treatment protocols
[12:46:26] <lockywolf> experimenting is very seldom allowed
[13:03:37] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[13:07:01] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c8e1:ef7b:3ea9:8366) (Remote host closed the connection)
[13:08:22] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e520:1a5d:a0b:fffb)
[13:09:58] *** Joins: badkins (~badkins@136.56.92.199)
[13:14:13] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[13:43:41] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[13:48:27] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[13:52:25] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[13:52:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:01:01] <dTal> I've been thinking that we should divide medicine into two pillars, the explicitly procedural and and the explicitly experimental
[14:02:11] <dTal> first line medical treatment should be completely flowcharted to stabilize people - like "first aid plus"
[14:03:13] <dTal> at the endpoints to certain parts of the flowchart, the cause of the problem is not completely known, and so you get handed off the Dr House MD or whatever
[14:04:04] <dTal> right now Dr House MD spends 99% of their time dealing with rote stuff, which means they're very likely to mess up when the 1% weird stuff comes along
[14:04:19] <dTal> and also stretched way too thin
[14:16:18] <sham1> It's never lupus
[14:36:04] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:39:13] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Quit: CGI:IRC (Ping timeout))
[14:39:53] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[14:44:20] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:53:47] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:d4d2:95d0:9902:dba5) (Read error: Connection reset by peer)
[14:53:50] *** Joins: trip_fandango (~tripfanda@5.29.56.77)
[14:55:37] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[14:57:07] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Error))
[14:57:59] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[14:58:49] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Client Quit)
[14:59:54] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[15:07:37] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:07:53] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3e37:1000:411e:c48c) (Ping timeout: 252 seconds)
[15:10:53] *** Joins: badkins (~badkins@136.56.92.199)
[15:11:12] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:15:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[15:18:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:28:32] *** Joins: TCZ (~tcz@91.150.178.124)
[15:34:52] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:40:31] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:04:33] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:06:10] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[16:12:32] *** Joins: madage (~madage@user/madage)
[16:15:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:17:48] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[16:18:22] *** Joins: TCZ (~tcz@91.150.178.124)
[16:18:22] <mdhughes> Software should be created alone, at night, because character is what you are in the dark.
[16:19:48] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[16:20:10] *** Joins: TCZ (~tcz@91.150.178.124)
[16:33:08] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:39:39] *** Joins: zwr (~zwr@2804:d45:b966:fb00:e8f3:9015:4194:f553)
[16:51:27] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:54:21] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[16:57:09] *** Joins: s-liao42 (~s-liao@101.86.99.70)
[16:58:24] <amazigh> my first docker image is giant according to docker standards
[16:58:37] <amazigh> ~2GB
[17:00:27] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[17:00:34] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[17:01:10] <amazigh> mdhughes: and software ought to reflect who we really are
[17:01:13] *** Joins: badkins (~badkins@136.56.92.199)
[17:01:31] <ns12> Hi, which Scheme standard allows "define" without a value? For example (define x).
[17:01:39] <amazigh> chez has that
[17:01:50] <amazigh> but idk which standard allow it
[17:02:20] <ns12> What is it used for?
[17:02:27] <amazigh> idk
[17:03:10] <sjamaan> ns12: To make sure an identifier is registered, but initialized to an undefined value.  Later you can set! it to a value
[17:03:22] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[17:03:24] <sjamaan> This for those Schemes which don't allow set!ing undefined values
[17:04:07] <ns12> Why would I want to define a variable to be "undefined"?
[17:04:14] <sjamaan> So you can set! it without erroring
[17:05:02] <ns12> Is that actually mentioned in any Scheme standards?
[17:05:26] <amazigh> I wonder what is the point of SRFI-229 (tagged procedures) @ https://srfi.schemers.org/srfi-229/srfi-229.html
[17:05:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[17:05:43] <sjamaan> ns12: No, it's an extension
[17:06:04] <ns12> sjamaan: It sounds useful for implementing letrec and letrec*, but I can't think of any other use.
[17:07:12] <sjamaan> ns12: In procedural code sometimes this comes in handy.  But you could also argue that you could just initialize it to #f or so
[17:07:57] <sjamaan> s/procedural/imperative/ I guess
[17:09:01] <amazigh> There is 7 draft SRFIs @ https://srfi.schemers.org/?statuses=draft
[17:13:02] <amazigh> ns12: sjamaan: on top of that undefined value is not part of standard.
[17:17:40] <amazigh> some scheme allow to (set! foo 42) without prior (define foo) e.g... javascript.
[17:18:00] <amazigh> :trollface:
[17:19:44] *** Joins: badkins (~badkins@136.56.92.199)
[17:20:22] <ns12> amazigh: Isn't that allowed by R7RS?
[17:20:37] <ns12> Wait... I'll take a look at the standard.
[17:21:02] <ns12> I meant to say: Isn't that allowed by R7RS [in the REPL]?
[17:23:56] <ns12> Found it: R7RS-small section 5.7: "Implementations may provide an initial REPL environment which behaves as if all possible variables are bound to locations, most of which contain unspecified values"
[17:49:21] <sham1> Yeah, REPLs are allowed to set! without defining the lexical variable, but that's not otherwise allowed
[17:50:41] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[17:51:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52)
[17:51:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52) (Changing host)
[17:51:58] *** Joins: skapata (~Skapata@user/skapata)
[17:52:41] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[17:53:18] <sham1> amazigh: well, one could probably define a portable way of doing generic functions with tagged procedures, by having the tag be a vector or something of monomorphised functions
[17:54:25] <sham1> So you could have a list of concrete implementations that are distinguished by the types of the arguments, that is, if the implementation specifies that the first argument is for a list vs a bytevector, it'd then allow for discriminating according to the argument types
[17:54:55] <sham1> And then pick the correct implementation. The tagged procedure itself just finds the proper implementation for the given arguments (if one exists) and tail-calls
[17:58:37] *** Joins: klovett (~klovett@107.115.32.2)
[18:03:08] *** Joins: johnjay (~pi@192.142.100.50)
[18:06:21] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[18:15:01] *** Joins: klovett_ (~klovett@107.115.32.2)
[18:18:17] *** Quits: s-liao42 (~s-liao@101.86.99.70) (Quit: Client closed)
[18:18:48] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[18:18:59] <amazigh> looks dubious, I always have thought of procedure as some primordial object that are just callables.
[18:19:20] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (Quit: ZNC 1.8.2 - https://znc.in)
[18:19:55] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[18:20:06] <sham1> Well now you can also associate additional data with them
[18:22:09] <mdhughes> Normally stuff that has to be initialized I (define foo #f) and the accessor does set! on it. I don't think an undefined value is a good idea.
[18:23:44] *** Joins: klovett (~klovett@107.115.32.2)
[18:25:53] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[18:29:21] <amazigh> Kernel as guideline that leads to the definition of undefined, I do not recall the proper wording but it follows the idea that only #false is false according to if
[18:30:32] <amazigh> similarly, R7RS' generators built with Kernel would need (according to those guidelines) have their own singleton object to describe the end of the generator.
[18:31:19] <amazigh> IIRC the goal is to avoid very rare but difficult to debug mistakes
[18:31:37] <amazigh> somewhat in the spirit of hygienic macros.
[18:33:20] <sham1> Hum. Apparently a generator returns an EOF
[18:34:12] <amazigh> yes, R7RS generator end is marked with an object that satisfy eof-object?
[18:34:39] <sham1> I'm not sure how I feel about that
[18:37:01] <sham1> I suppose that one can justify it by thinking of the eof-object as being a specific marker for "generator is exhausted" that just happened to be specified before the more general generator concept
[18:37:10] <sham1> That's still so odd though
[18:37:59] *** Quits: shawn (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[18:38:32] <sham1> It's a nice idea, unifying ports and more general generator objects
[18:39:02] <amazigh> I agree. I fail to find a good answer, because I am not sure what is the problem that must be solved: "What is the question?"
[18:39:08] <amazigh> Still, R7RS generators are handy, and maybe introducing a generator-end? will solve some problems.
[18:39:50] <sham1> Yeah. Something where an (eof-object) has to satisfy generator-end? but the opposite needn't be the case
[18:42:39] *** Joins: civodul (~user@guix/contributor/civodul)
[18:43:18] <amazigh> It is not new I dislike ports, custom ports, similarly I dislike #:keywords, and I believe it is because it leads to polymorphic behaviors, similar to how adding a boolean to a procedure will slightly change the behavior 
[18:43:20] <sham1> Generators are always nice, although proper coroutines can be useful as well, as one can see in Lua for example
[18:43:40] <sham1> amazigh: I see you too have dealt with CL's FORMAT
[18:43:45] <amazigh> at this time I believe any time a procedure's behavior must be explained with "it depends",  if it is not a source of hidden problems, it is at least difficult to explain.
[18:44:06] <amazigh> sham1: what does CL's FORMAT does?
[18:45:28] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:46:01] <sham1> If you give it `t` it outputs to the active output port, so stdout or equivalent. If you give it `nil`, because that's falsy in CL, it outputs to a string. And if you give it a stream it just outputs to it
[18:46:40] <amazigh> I think chez' format does the same, so does guile's format
[18:46:52] <sham1> In the SRFI where a subset of FORMAT was ported over, SRFI 48, it uses #t, #f and a port the same way
[18:47:50] <sham1> It's just weird because in SRFI 48, it's an optional positional argument that comes before the actual required positional argument of the format-string
[18:48:40] <amazigh> it happens
[18:49:02] <amazigh> like I wrote above, idk what is the perfect solution to generators' end, and in general whether polysemic objects are good thing or not => it depends.
[18:49:57] <amazigh> the problem with optional arguments at the beginning of the signature, ime, is that it break emacs' indentation.
[18:50:31] <amazigh> so e.g. (call-with-foobar [something] proc) can not be indented correctly in all cases.
[18:52:36] <amazigh> One thing I am confident is good thing, is to have the ability to break the "convention" when it is necessary, e.g. dynamic typed procedure allow to return one or more arguments, or even an unspecified number of arguments.
[18:52:48] <sham1> Although of course wrt. formatted string output, I like SRFI 159 better anyway. It's more schemeish
[18:53:25] <amazigh> ref: https://srfi.schemers.org/srfi-159/
[18:53:28] <amazigh> I never used it.
[18:53:56] <amazigh> That is one of the few R7RS libraries I have zero xp with
[18:54:46] <amazigh> in fact (scheme show) is https://srfi.schemers.org/srfi-166/
[18:54:48] <sham1> The show-procedure of 159 is like the one from 48, in that the first argument is either #t, #f or a port, but this one is a required arg. Makes it clearer
[18:55:13] <sham1> 166 might be a more "up-to-date" version
[18:55:21] <sham1> They certainly look similar
[18:55:23] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[18:56:16] * amazigh is tired, and can't code, compiling schemes consumes a lot of energy
[18:56:57] <amazigh> I uploaded an image with ~10 schemes at https://hub.docker.com/r/letloopxyz/schemers
[19:03:27] <ns12> amazigh: What are the specific Schemes?
[19:03:36] <ns12> Why not package them for GNU Guix?
[19:11:18] <amazigh> I did not have guix installed.
[19:14:12] *** Quits: johnjay (~pi@192.142.100.50) (Quit: WeeChat 3.3)
[19:20:09] <amazigh> chez chibi chicken cyclone gambit gauche gerbil guile loko racket sagittarius
[19:20:29] <amazigh> I am trying to port my json library to multiple implementations
[19:21:08] <amazigh> so far I have chez chibi gauche and sagittarius passing (a reduced, but stil interesting) test suite
[19:21:22] <amazigh> most of the remove test cases, if not all, are related to unicode.
[19:22:48] <amazigh> gambit and gerbil will most likely work too.
[19:23:38] <amazigh> I need to a quick-fix patch for cyclone library location algorithm, otherwise, I do not forsee problems with cyclone yet
[19:23:50] <amazigh> mit is problematic...
[19:48:05] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2b1a:1927:b5c5:1912) (Quit: WeeChat 2.8)
[19:51:04] *** Joins: tristero (~nobody@user/tristero)
[19:53:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:56:34] *** Joins: mononote (~mononote@user/mononote)
[19:59:45] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[20:10:30] <mdhughes> The lack of Unicode in so many half-assed impls is really awful. If it has to be hacked in with SRFI and it runs slower like CHICKEN does, minimally acceptable. The ones that can't do it at all are disgusting.
[20:10:43] <mdhughes> s/SRFI/egg/
[20:11:03] <Franciman> does scheme say how unicode must be handled?
[20:11:17] <Franciman> like what normalisation technique to pick etc
[20:11:18] <mdhughes> R5 was pre-Unicode. R6 required it. R7 doesn't.
[20:12:02] <mdhughes> In R6, a character is a Unicode code point. How that's represented (32-bit int or whatever) isn't dictated.
[20:12:46] <Franciman> so it doesn't say when two identifiers are equal
[20:17:16] <mdhughes> identifiers? They're defined as a character sequence, so they'd have to be exactly the same to match.
[20:17:22] <mdhughes> strings are more complex, of course.
[20:17:32] <sham1> Does R6 require unicode normalisation?
[20:17:42] <sham1> For identifier identity
[20:18:36] <mdhughes> They're not normalized because there's no surrogates or whatever, it's not UTF-8 internally, they're code points. "scalar values" is the exact term.
[20:20:05] <sham1> Well you still need to decide if one wants NFC or whatever.
[20:20:15] <sham1> Them being full codepoints is irrelevant
[20:21:59] <mdhughes> Well, it doesn't compact ligatures, and the rationale calls out ß can't be uppercased to SS because that'd be 2 chars.
[20:22:43] <mdhughes> I suspect there's some ugly edge cases you could make where visually-identical identifiers are distinct.
[20:23:41] <mdhughes> And maybe if R7 was built on R6, it'd do that, instead of not even requiring Unicode support.
[20:24:17] <mdhughes> s/that/normalization/
[20:29:29] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[20:32:51] <Franciman> +1 sham1 
[20:33:10] <Franciman> yes I am afraid it is possible mdhughes 
[20:33:12] <Franciman> :<
[20:33:15] <Franciman> damn unicode is hard ahah
[20:33:55] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:34:04] <sham1> I feel that doing NFC normalisation for identifiers might be the most useful thing. Most text is in NFC anyhow so it wouldn't be that bad
[20:34:27] *** Joins: badkins (~badkins@136.56.92.199)
[20:34:38] <sham1> With an R7 implementation that understands unicode
[20:37:10] *** Joins: seninha (~seninha@user/seninha)
[20:38:37] *** Joins: daviid (~user@179.210.52.91)
[20:38:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[20:44:07] <Oxyd> The Unicode implementation in R7RS is quite half-baked. It simply switched from “strings are sequences of ASCII characters” to “strings are sequences of Unicode scalar values” and called it a day, pretty much. (Talking about implementations that do choose to support “Unicode”, of course.)
[20:47:01] <sham1> Well one probably doesn't want to force the way an implementation does it. For example with Kawa Scheme, I would guess that the underlying representation of a string is a Java string or something like that while allowing mutation, and forcing a specific representation might get rough
[20:47:57] <sham1> I'm glad that R7 didn't go with something weird like "strings are a sequence of UTF-16 code units" which is certainly a popular choice
[20:48:05] <Oxyd> It's not about the representation, that's fine to leave up to implementations. It's about the naivety of the interface, such as, like you mentioned, completely ignoring normal forms.
[20:48:27] <sham1> Well yeah. That's rough
[20:49:25] <Oxyd> It's really obvious that it's a result of doing a s/ASCII/Unicode/g, plus some concessions to the Unicode reality regarding things like lowercasing and uppercasing.
[20:49:53] <sham1> What's worse though is that I don't even know if there is an SRFI or anything like that
[20:51:20] <sham1> Of course, it doesn't help that the unicode character database is a mess
[20:51:29] <amazigh> see the list of files I ignore at this time: https://dpaste.com/2NC53YHLX.txt those starting with i- are ambigious json spec
[20:51:56] <amazigh> according to the author of the JSONTestSuite
[20:52:54] *** Joins: jao (~jao@194.99.104.13)
[20:53:01] <amazigh> (all those tests pass with Chez)
[20:53:10] <amazigh> I mean Chez is the Oracle.
[20:53:36] <amazigh> so, maybe for some of those, e.g guile might be correct.
[20:53:59] <sham1> Well Chez working isn't that surprising
[21:02:31] <amazigh> I use Chez as an oracle, I do not know what is the correct behavior.
[21:02:41] <amazigh> neither does the creator of the test suite
[21:02:56] <amazigh> I mean, it is unclear what the expected behavior is.
[21:04:55] <amazigh> Even with the current prescriptions, there is still many discrepties in R7RS-small implementations; I am not sure adding requirements will help
[21:06:27] <amazigh> in other words, portability is (still) difficult, or at least requires further work
[21:28:06] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[21:37:26] *** Joins: wigust (~wigust@130.61.95.6)
[21:37:37] <dpk> another irritation about Racket's Chez fork: at some point, they appear to have given up on tagging 'stable' versions of Chez corresponding to stable versions of Racket
[21:38:28] <dpk> the most recent such tag is for Racket 7.8 in 2020, but in the meanwhile they're up to Racket 8.3
[21:42:23] * dpk requests that they start doing this again https://github.com/racket/ChezScheme/issues/42
[21:49:43] <Zipheir> Wow, it's all go on #scheme today.
[21:50:44] *** Joins: livoreno (~livoreno@user/notzmv)
[21:52:30] *** Joins: badkins (~badkins@136.56.92.199)
[21:54:40] <amazigh> dpk: bisect for the win
[21:57:53] <amazigh> With mit-scheme, to execute `main.scm` with custom R7RS libraries, one needs to do the following in mit-scheme repl:
[21:57:57] <amazigh> > (find-scheme-libraries! ".")
[21:57:59] <amazigh> > (load "main.scm")
[21:58:08] <amazigh> and replace "." with the directory where the libraries are.
[22:09:57] *** Quits: klovett (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[22:20:22] *** Joins: theruran_ (uid11305@id-11305.hampstead.irccloud.com)
[22:21:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[22:25:00] <jcowan> The trouble with adding a novel "eog" object is that whereas eof objects can now be generated, "eog" objects cannot.  The only real answer is to return a Maybe, which is why the Maybe SRFI has a bunch of protocol converters.
[22:27:10] <jcowan> https://srfi.schemers.org/srfi-189/srfi-189.html#protocolconversion
[22:28:37] *** Joins: klovett (~klovett@107.115.32.2)
[22:32:18] <amazigh> maybe I should fix the define-record-type I use to be able to create records without fields
[22:34:16] <amazigh> ?
[22:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:35:05] <amazigh> I do not have strong opinion against the current generators.
[22:36:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:36:20] <mdhughes> Why would you want to return an eog from a generator if you're not at eog?
[22:37:36] <amazigh> idk, it would be programming error
[22:37:52] <mdhughes> It is a little nicer to have a value than throw exceptions for flow control like Python does.
[22:38:16] <amazigh> what I had in mind, is (define eog '(eog)), then (define (eog? x) (eq? eog x))
[22:38:18] <gwatt> jcowan: I think the use of any sentinel value to signal the end of a generator is bad. I think no values should trigger the end of a generator
[22:38:40] <mdhughes> Or wrap every value in yet another wrapper doubling memory for simple types.
[22:38:41] <gwatt> As in, literally (values) is what signals the generator is done
[22:39:13] <amazigh> I did not think about (values)
[22:39:49] <amazigh> then the code will be need call-with-values and case-lambda?
[22:39:49] <jcowan> Before SRFI 189 was finalized, we allowed a Just to return multiple values: returning no values still counts as success, not failure.
[22:40:15] <jcowan> s/allowed/added the ability
[22:40:18] <sham1> Perhaps having just some kind of a (generator-exhausted? generator-object) might be better
[22:40:19] <mdhughes> I think amazigh's definition is fine.
[22:42:32] <jcowan> There is a protocol converter between Maybe and zero vs. non-zero number of values, if that's what you want and you are willing to treat (just (values)) as (nothing).  But yes, that protocol forces case-lambda.
[22:42:42] <mdhughes> Imitating a successful pattern of how ports work is better than new patterns.
[22:43:01] <jcowan> "Or perhaps it isn't."  --my father, often
[22:43:52] <jcowan> Ports are special in that they can't return just any object, only ones with external representations, which the eof-object lacks.
[22:44:10] <gwatt> well, that's not true for every scheme
[22:44:48] <sham1> Yeah, you could do some custom thing like #<eof>
[22:45:12] <mdhughes> (read) can return almost anything.
[22:45:50] <jcowan> True.  In Chicken, you can type (#!eof) to the REPL and get a list of one eof object.  But if you type #!eof, the repl quits, because it can't communicate the difference between actual end of file and reading "#!eof".
[22:46:06] <gwatt> same with chez
[22:46:20] <jcowan> s/it can't/`read` can't
[22:47:02] <gwatt> thopugh chez can differentiate at some level the difference between ^D and #!eof
[22:47:55] <gwatt> (read-token) will report that "#!eof" is atomic whereas ^D is eof
[22:48:55] <jcowan> mdhughes: There are quite enough things that standard `read` cannot read: record instances, procedures, ports.
[22:49:16] <jcowan> Makes sense, yes.
[22:53:37] <mdhughes> https://paste.debian.net/1221554/
[22:54:07] <mdhughes> Now, obviously that's not gonna work between sessions, since the RTD will be different. But you *can* read/write records.
[22:54:20] <gwatt> That is a particular to chez feature
[22:54:36] <gwatt> at least, that syntax for record literals
[22:55:27] <mdhughes> Sure. Portability is 0.0. But it does read/write. Might be fine in a live stream between programs.
[22:56:21] <gwatt> you actually can read/write between sessions though, if you specify a nongenerative name for the rtd
[22:56:43] <mdhughes> Oh, good call!
[22:58:18] <mdhughes> I oughta try that in my game, right now I have Foo->data, data->Foo functions. Which is often useful because I don't serialize everything naively. But it'd be convenient for some to just dump the object tree.
[22:59:57] <gwatt> Oh yeah, that sounds like it could cut down on some boilerplate
[23:01:17] <sham1> (define-record-type <name> (constructor datum1 datum2) ...) something like #<<name> datum1 data-of-datum1 datum2 data-of-datum-2> might be an interesting thing. Or maybe replacing the datum names with corresponding keywords in the external rep
[23:01:31] <sham1> Or #{} or whatever
[23:10:31] <sham1> Of course such a representation wouldn't be portable at all, but it would be neat
[23:12:25] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:15:35] <jcowan> The Twinjo representation is #record("name" "field1" "value1" "field2" "value2" ...)
[23:20:57] <mdhughes> The unserializable thing that annoys me is hashtables. I always have to do a hashtable->alist for output.
[23:24:34] <gwatt> yeah, it's unfortunate that there's no good solution for that 
[23:33:10] <Zipheir> jcowan: Wait, Justs can still contain multiple values, no?
[23:33:44] <Zipheir> Oh, nvm, I misread.
[23:34:52] <sham1> But I do think that justs can also contain multiple values
[23:35:12] <Zipheir> They can.
[23:35:49] <Zipheir> And a just of no values is still a just.
[23:36:08] <Zipheir> (Otherwise it breaks the monad laws.)
[23:36:43] <Zipheir> IIRC; it's been a while since that discussion with MNW happened.
[23:37:17] *** Quits: trip_fandango (~tripfanda@5.29.56.77) (Quit: WeeChat 3.3)
[23:38:58] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[23:39:56] *** Joins: tripfandango (~tripfanda@5.29.56.77)
[23:40:10] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[23:47:05] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[23:47:47] <jcowan> Not Maybe, but Just so!  :-)
