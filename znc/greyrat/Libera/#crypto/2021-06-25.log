[10:49:59] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[10:49:59] *** Server sets mode: +nt 
[10:53:27] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:53:51] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[10:55:40] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[10:57:34] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[10:57:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:58:15] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:00:40] *** Joins: kish` (~aqua@user/aqua)
[11:02:05] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[11:02:14] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:02:38] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:06:35] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:06:58] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:07:58] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 272 seconds)
[11:08:35] *** Joins: andreasbuhr (~quassel@p549db761.dip0.t-ipconnect.de)
[11:09:50] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[11:11:08] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:11:32] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:15:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:15:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:16:02] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:17:58] *** Joins: Nimrodel (~Nimrodel@2a02:587:4c26:3e00:6423:4fda:c0fd:6213)
[11:19:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:20:00] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:20:24] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:21:10] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:22:34] *** Quits: Nimrodel (~Nimrodel@2a02:587:4c26:3e00:6423:4fda:c0fd:6213) (Client Quit)
[11:24:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:24:54] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:25:36] <wasamasa> OTRv4 might be a bad name for what's essentially an OMEMO competitor
[11:29:05] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:29:29] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:29:56] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:31:29] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:33:21] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:33:46] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:37:44] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:38:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:40:55] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 265 seconds)
[11:41:54] *** Joins: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz)
[11:42:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:42:35] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:43:40] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (K-Lined)
[11:55:16] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[12:40:33] *** Quits: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net) (Quit: Leaving)
[12:40:48] *** Joins: aquijoule_ (~richbridg@213-225-12-210.nat.highway.a1.net)
[12:41:35] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[12:43:57] *** Joins: menace (~someone@2001:a61:3456:4d01:3894:5a7f:f2e5:cc9f)
[12:44:18] *** Quits: menace (~someone@2001:a61:3456:4d01:3894:5a7f:f2e5:cc9f) (Changing host)
[12:44:18] *** Joins: menace (~someone@user/menace)
[12:52:22] *** Joins: rtypo (~alex@user/rtypo)
[12:58:56] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:2b2e:62ff:bd4a:55cb)
[13:24:18] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 240 seconds)
[13:30:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:32:23] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[13:39:53] *** Joins: blyat-73 (~hjgkjhgkj@79.101.60.163)
[13:42:34] *** Quits: mz` (~mz`@xvm-240-147.dc2.ghst.net) (Changing host)
[13:42:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:43:23] *** Quits: blyat-73 (~hjgkjhgkj@79.101.60.163) (Client Quit)
[13:53:19] *** menace is now known as Deknos
[14:02:00] *** Joins: Ohlov31 (~Ohlov3@dyndsl-085-016-152-155.ewe-ip-backbone.de)
[14:04:19] *** Joins: Ohlov313 (~Ohlov3@dyndsl-095-033-057-157.ewe-ip-backbone.de)
[14:05:55] *** Quits: Ohlov3 (~Ohlov3@dyndsl-091-248-236-188.ewe-ip-backbone.de) (Ping timeout: 265 seconds)
[14:06:43] *** Quits: Ohlov31 (~Ohlov3@dyndsl-085-016-152-155.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[14:45:40] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[14:55:50] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[14:57:20] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[14:57:30] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[15:00:16] *** Joins: Quiark[m] (~quiarkmat@2001:470:69fc:105::16be)
[15:03:31] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[15:20:43] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 268 seconds)
[15:27:59] *** Quits: CryptoClub (~fafs@2001:ac8:23:5b::a05e) (Ping timeout: 256 seconds)
[15:36:08] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[15:37:45] *** Joins: blyat-73 (~hjgkjhgkj@79.101.60.163)
[15:38:20] *** Quits: blyat-73 (~hjgkjhgkj@79.101.60.163) (Remote host closed the connection)
[15:41:41] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 268 seconds)
[15:44:18] *** Joins: dunkeln (~dunkeln@94.129.65.28)
[16:01:03] *** Joins: KidBeta (~KidBeta@user/kidbeta)
[16:02:25] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[16:10:44] *** Joins: pera (~pera@user/pera)
[16:11:20] *** Quits: dunkeln (~dunkeln@94.129.65.28) (Ping timeout: 272 seconds)
[16:22:36] *** Joins: jw_ (~njw@58.182.164.99)
[16:23:21] *** Quits: jw_ (~njw@58.182.164.99) (Read error: Connection reset by peer)
[16:24:33] *** Joins: jw_ (~njw@58.182.164.99)
[16:30:36] *** Joins: chronon (~chronon@user/chronon)
[16:32:25] *** Joins: dunkeln_ (~dunkeln@94.129.65.28)
[16:33:04] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[16:37:56] *** Quits: dunkeln_ (~dunkeln@94.129.65.28) (Ping timeout: 272 seconds)
[16:38:45] *** Joins: dunkeln_ (~dunkeln@188.71.193.140)
[16:40:40] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:41:52] *** Joins: ionface (~ionface@user/ionface)
[16:45:18] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (Read error: Connection reset by peer)
[16:52:04] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[16:53:28] *** Joins: blarnath (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[16:54:07] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Ping timeout: 265 seconds)
[16:57:38] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[16:58:14] *** Quits: pera (~pera@user/pera) (Ping timeout: 250 seconds)
[16:59:47] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:59:48] <wasamasa> I'm looking into GCM/CCM/OCB currently
[17:00:03] <wasamasa> I thought all of these are AEAD ciphers where you can obtain an authentication tag
[17:00:35] <wasamasa> at least that's what the openssl docs suggest, but if I whip up an example in ruby with CCM, I get an error that authentication tags are not supported (same API call works fine for GCM)
[17:00:53] <wasamasa> looking at https://datatracker.ietf.org/doc/html/rfc3610 I suspect this is because authentication data is included into the ciphertext instead
[17:04:53] <wasamasa> is it the same for OCB?
[17:05:21] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:2b2e:62ff:bd4a:55cb) (Remote host closed the connection)
[17:06:01] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:b401:1d9:cf08:e9d0)
[17:07:00] <MacGyver> Flip a bit and find out.
[17:07:24] <bw> heh
[17:10:16] <wasamasa> it's kind of weird because how would you verify without knowing the correct tag
[17:10:50] <wasamasa> but yeah, I guess it's a funny design choice of GCM to keep the tag outside the ciphertext
[17:11:27] <MacGyver> You wouldn't verify.
[17:11:38] <MacGyver> The decryption would simply fail.
[17:11:58] <wasamasa> I guess it would fail if I were to just strip the tag part
[17:13:59] <MacGyver> My guess would be GCM did it this way so you can also use it only for verification of associated data without encrypting anything?
[17:14:01] <MacGyver> Not sure.
[17:21:42] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[17:22:04] *** Joins: kish` (~aqua@user/aqua)
[17:22:29] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[17:27:17] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[17:28:08] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:34:15] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[17:38:29] <wasamasa> sigh, why does CCM need to know the size of the data in advance
[17:39:17] *** Quits: KidBeta (~KidBeta@user/kidbeta) (Remote host closed the connection)
[17:39:18] <wasamasa> CBC-MAC sucks
[17:52:05] *** Joins: pkalorog (~pkalorog@85.93.125.227)
[17:52:23] *** Parts: pkalorog (~pkalorog@85.93.125.227) (Leaving)
[17:57:05] <rqsd> OCB3 gang rise up
[18:00:23] *** Joins: cwebber (~user@user/cwebber)
[18:11:07] *** [iz] is now known as iz
[18:11:25] *** iz is now known as [iz]
[18:13:45] *** [iz] is now known as iz
[18:14:14] *** iz is now known as Guest3011
[18:14:31] *** Guest3011 is now known as [iz]
[18:18:33] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 256 seconds)
[18:27:05] *** Joins: MrFantastik (~Thunderbi@98.1.50.67)
[18:31:42] *** Quits: piou (~piou@user/piou) (Ping timeout: 244 seconds)
[18:31:55] *** blarnath is now known as d34dh0r53
[18:33:27] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 272 seconds)
[18:36:49] *** Joins: dez (uid92154@user/dez)
[18:51:26] *** Joins: winircuser-318 (~winircuse@170.250.221.149)
[18:51:56] *** Quits: winircuser-318 (~winircuse@170.250.221.149) (Client Quit)
[18:54:57] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[18:55:38] *** [iz] is now known as iz
[18:55:43] *** iz is now known as [iz]
[19:01:39] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:05:15] *** Joins: blyat-73 (~hjgkjhgkj@79.101.60.163)
[19:05:54] *** Quits: blyat-73 (~hjgkjhgkj@79.101.60.163) (Remote host closed the connection)
[19:07:09] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 244 seconds)
[19:11:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:16:06] *** Joins: Sebz (~austin@cpe-173-88-17-234.columbus.res.rr.com)
[19:16:16] *** Parts: Sebz (~austin@cpe-173-88-17-234.columbus.res.rr.com) ()
[19:16:36] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:31:38] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (Quit: MrFantastik)
[19:35:13] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:35:22] *** Quits: frost (~frost@59.71.242.236) (Quit: Connection closed)
[19:36:29] <wasamasa> yup, OCB works as expected
[19:37:03] <wasamasa> the openssl implementation of it separates ciphertext and auth tag, whereas the test vectors in https://datatracker.ietf.org/doc/html/rfc7253 don't
[19:44:24] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:44:31] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:44:52] <rqsd> AEGIS gang rise up
[19:47:29] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[19:50:11] *** [iz] is now known as iz
[19:50:21] *** iz is now known as [iz]
[19:50:52] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[19:54:12] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-df50-9334-2200-b3b6.res6.spectrum.com)
[19:55:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:59:15] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:59:38] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:02:17] *** Joins: SomeWeirdAnon (~shwn@2a02:8109:abf:ffb4:38d2:141e:ecd6:356b)
[20:03:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:03:59] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:07:47] <softraid> why can't OTRv4 use PAKE instead of SMP?
[20:08:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:29] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:08:32] *** Parts: [iz] (~iz@157-131-220-165.fiber.dynamic.sonic.net) ()
[20:08:34] *** Joins: kulak (~kulak@user/kulak)
[20:11:18] *** softraid is now known as [[OneLegend]]
[20:11:26] *** Joins: lithiumpt (~lithiumpt@217.138.203.173)
[20:12:19] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[20:12:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:46] *** Joins: kulak (~kulak@user/kulak)
[20:12:46] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:13:13] *** Parts: [[OneLegend]] (onelegend@wireguard/tunneler/onelegend) (WeeChat 3.2)
[20:15:29] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:16:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:17:18] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:21:26] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:21:51] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:25:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:26:19] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:27:22] *** Joins: hardtotell (~hardtotel@satyr.seedboxes.cc)
[20:30:25] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:30:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:34:04] <wasamasa> this keeps getting weirder and weirder
[20:34:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:35:25] <wasamasa> because I suspect ruby's openssl binding to subtly screw up somewhere, I ported my tests to python's pycryptodome and get somewhat wrong values for CCM
[20:35:59] <wasamasa> as in, the tag is completely wrong and part of the expected ciphertext shows up in the actual ciphertext
[20:37:03] <wasamasa> maybe I should retest with pycrypto
[20:39:52] <wasamasa> or wait
[20:39:57] <wasamasa> could this be padding biting my ass
[20:49:06] *** Joins: Nimrodel (~Nimrodel@2a02:85f:2802:8100:f4cf:a88e:5b0a:f319)
[20:50:49] *** Joins: mikeliuk (~mikeliuk@213.205.198.125)
[20:53:58] *** Quits: dunkeln_ (~dunkeln@188.71.193.140) (Ping timeout: 250 seconds)
[20:57:22] *** Joins: ChoHag (~mking@81.187.183.71)
[20:57:36] <ChoHag> I was pointed here to ask this:
[20:57:44] <ChoHag> Is there any literature relating to how a high-level language might safely refer to sensitive data, eg. passwords and keys which must be kept in memory that won't be swapped or dumped?
[20:57:54] *** Quits: Nimrodel (~Nimrodel@2a02:85f:2802:8100:f4cf:a88e:5b0a:f319) (Quit: Leaving)
[20:58:20] <ChoHag> So that eg. when giving a password's value as raw data to a hashing function the programmer can declare that the value (and intermediary values calculated from it) should be treated as sensitive and kept in memory allocated for the purpose.
[20:58:34] *** Joins: piou (~piou@24.20.201.77.rev.sfr.net)
[21:00:31] *** Joins: aleck (~aleck@user/aleck)
[21:02:53] <wasamasa> pycrypto has CCM, but not OCB, meh
[21:03:13] <wasamasa> screw the patent system
[21:04:16] <ChoHag> Stop asking lawyers for permission to write maths?
[21:04:31] <wasamasa> well
[21:05:06] <wasamasa> there's this cryptography person who did lots of interesting papers and research and for some reason they thought it to be a good idea to have a patent on a cipher mode
[21:05:21] <wasamasa> the patent expires this year I've heard
[21:05:28] <wasamasa> there's been a grant for openssl
[21:06:52] <wasamasa> I think they do regret it now because their cipher mode hasn't been standardized, but a far worse one has been
[21:07:00] <wasamasa> and they wrote a paper about that topic
[21:11:19] <Peng> He released OCB into the public domain recently, FWIW
[21:11:34] <Peng> By intentionally not paying the patent renewal fee or whatever
[21:11:47] <wasamasa> so it did expire
[21:12:44] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[21:23:23] <wasamasa> https://github.com/pyca/cryptography/issues/6136
[21:36:54] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[21:42:32] *** Joins: riv (~river@tilde.team/user/river)
[21:42:54] *** Joins: tradar (~tradar@user/tradar)
[21:53:07] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:54:00] *** Joins: kulak (~kulak@user/kulak)
[21:56:48] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 250 seconds)
[22:02:54] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:05:54] <wasamasa> mystery solved, it was me not specifying a tag length
[22:06:04] *** Quits: chronon (~chronon@user/chronon) (Quit: leaving)
[22:07:47] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[22:16:24] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:16:37] *** Quits: sesquisentient (uid38151@id-38151.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[22:16:52] *** Joins: kulak (~kulak@user/kulak)
[22:17:40] <Alipha> ChoHag: typically high level languages have some functionality for that, eg, C# has SecureString. So it depends upon the language, but yeah, it's typically a lot more difficult to know if sensitive data is being swapped out, etc, in high level languages
[22:22:10] <rqsd> Alipha: https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-5.0#remarks "We don't recommend that you use the SecureString class for new development."
[22:24:17] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:25:06] *** Joins: kulak (~kulak@user/kulak)
[22:26:12] *** Joins: aleck (~aleck@user/aleck)
[22:26:44] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:27:30] *** Joins: kulak (~kulak@user/kulak)
[22:27:38] *** Quits: andreasbuhr (~quassel@p549db761.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:33:57] <ChoHag> Reassuring.
[22:34:24] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:34:41] <rqsd> And the link there is just tl;dr, don't have secrets in memory because it's a literal unsolved problem, especially in a managed language
[22:35:34] <yawkat> java people used to use char arrays and empty them later, but that has become a bit futile with compacting GCs. but potential attacks are fairly dubious anyway.
[22:35:43] <int-e> don't have secrets. put cryptographers out of work. ;)
[22:36:35] <int-e> C people used to do the same but that has become a bit futile with hyperaggressively optimizing compilers
[22:36:55] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 244 seconds)
[22:38:26] *** Quits: FireFly (firefly@glowbum/gluehwuermchen/firefly) (Quit: WeeChat 2.0.1)
[22:40:15] *** Joins: kulak (~kulak@user/kulak)
[22:42:12] *** Joins: FireFly (firefly@glowbum/gluehwuermchen/firefly)
[22:47:48] *** Joins: Kryczek (~kryczek@hashcat/team/Kryczek)
[22:56:05] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:58:46] <ms7821> anyone know of a block cipher that can be truncated to the length of the input and only shows small (possibly gradual) changes between similar plaintexts for the same key?
[22:59:15] *** Quits: piou (~piou@24.20.201.77.rev.sfr.net) (Changing host)
[22:59:15] *** Joins: piou (~piou@user/piou)
[22:59:21] <ms7821> likely implemented in python
[22:59:39] <wasamasa> you sure you want a block cipher for that?
[22:59:41] <TimMc> Has to be a block cipher and not a stream cipher?
[22:59:44] <wasamasa> there's similarity hashes
[22:59:55] <wasamasa> in python, too
[22:59:59] <ms7821> well it seems to be scrambling the full output based on single-bit changes to the input
[23:00:08] <ms7821> but only a tiny amount of scrambling
[23:00:15] <TimMc> Oh, this is "have", not "want". :-)
[23:00:21] <ms7821> yeah
[23:00:28] *** Joins: kulak (~kulak@user/kulak)
[23:00:39] <int-e> "only shows small changes between similar plaintexts" is the antithesis of proper encryption
[23:00:44] <wasamasa> a jeopardy question?
[23:00:46] <ms7821> it's not proper encryption
[23:01:11] <wasamasa> jeopardy style CTF?
[23:01:15] <TimMc> int-e: Is it, though?
[23:01:18] <ms7821> I was hoping maybe someone would remember some terrible cipher from say 10 years ago that has these properties
[23:01:37] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:01:40] <int-e> TimMc: well, for block ciphers at least it's not what you usually strive for
[23:02:17] <yawkat> even ciphers from 80 years ago dont have this property
[23:02:40] <wasamasa> caesar though, hm
[23:02:54] <int-e> caesar is more of a stream cipher
[23:03:07] <int-e> (and a lousy one at that)
[23:03:54] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[23:04:26] <edk> what does a tiny amount of scrambling mean
[23:04:36] <ChoHag> Gooey eggs.
[23:04:53] <edk> adding one to the input scrambles it a tiny bit
[23:04:57] <int-e> I guess it's something like... flipping an input bit only flips 3 output bits
[23:05:00] <ms7821> ^
[23:05:17] <TimMc> ms7821: So you're REin something, maybe a web service or other API?
[23:05:23] <TimMc> *RE-ing
[23:05:34] <ms7821> yeah, the teespring dump if anyone's interested
[23:05:47] <ms7821> in one case, the input differs by 1a001a, and the output by 001a00020e14
[23:05:59] <ms7821> the input may be ucs-2, so 001a0000001a 
[23:06:42] <TimMc> OK, so not a live service, just static data -- and a good bit of it.
[23:07:38] <ms7821> I mean this still has consequences for the people with teespring accounts, but it's basically just a list of emails
[23:08:03] <TimMc> What's been encrypted?
[23:08:09] <ms7821> the email address
[23:10:51] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[23:11:31] <edk> were you implying that the length is preserved
[23:11:42] <wasamasa> that would suggest a stream cipher
[23:12:09] <wasamasa> but still, how would you know about the scrambling properties from looking at a static dump of encrypted email addresses
[23:12:18] <ms7821> because some of the email addresses are included
[23:12:18] <wasamasa> are they this little random?
[23:12:37] <ms7821> and some only differ by a single bit, but the output only has a few character in common
[23:12:41] <ms7821> so there's something odd going on
[23:13:03] <wasamasa> if they inputs are similar, but the outputs aren't, then that's the usual encryption, lol
[23:13:14] <wasamasa> that would contradict your encryption
[23:13:14] <ms7821> it kind of feels like the cipher takes a while to warm up
[23:13:38] <wasamasa> the only thing coming to mind with that description is RC4 and I doubt you can see that by eye
[23:13:49] <onelegend> arcfour is slooow
[23:13:53] <wasamasa> s/encryption/description
[23:14:06] <ms7821> I tried rc4, but that doesn't show the avalanche (because it's actually a stream cipher)
[23:14:20] <edk> the avalange is in both directions?
[23:14:24] <edk> or avalanche
[23:14:38] <ms7821> not sure, perhaps there's a permutation step?
[23:14:54] <ms7821> I mean this might be a random thing implemented by an intern for all I know
[23:15:16] *** Joins: dunkeln_ (~dunkeln@188.71.193.140)
[23:18:07] <wasamasa> rc4 isn't representative of all stream ciphers
[23:18:10] <wasamasa> it doesn't use a nonse
[23:18:12] <wasamasa> *nonce
[23:19:10] <onelegend> is rc4 a joke?
[23:19:22] <ms7821> pretty much these days
[23:19:27] <edk> if your two similar inputs are xxxxyyyy and xxxzyyy and your outputs are 12345678 and 123gjwnk then i'd guess it's something with byte-level feedback and i can't think of anything standard that could possibly be
[23:20:21] <wasamasa> what if it's some static thing prepended to the cipher output
[23:20:30] <wasamasa> hard to tell without actual examples
[23:20:35] <ms7821> it definitely seems to match the length of the input * 2
[23:20:42] <wasamasa> this isn't the breach you're talking about, right: https://twitter.com/UnderTheBreach/status/1386281705477189633
[23:20:58] <ms7821> no, this one's a few months old
[23:21:52] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 244 seconds)
[23:21:54] <onelegend> does anyone have a good ebook (I'll pay if needed) or video tutorial on how ChaCha20 works?
[23:22:16] <yawkat> the paper? it's not that difficult
[23:22:37] <onelegend> yea
[23:23:00] <wasamasa> it's easier to understand than AES
[23:24:17] <wasamasa> it's 25 lines of C
[23:24:45] <onelegend> oh rly?
[23:24:47] <onelegend> nice
[23:24:57] <onelegend> thank god it has no galois fields
[23:25:04] <wasamasa> https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant
[23:25:05] <sarnold> ioccc is full of 25 lines of c that's well-neigh unreadable :)
[23:25:31] <wasamasa> I didn't know there was money to be made in explaining beautifully simple code
[23:25:40] <wasamasa> but I guess that's the youtuber market
[23:26:13] <yawkat> lol there actually *is* a 14min video https://www.youtube.com/watch?v=UeIpq-C-GSA
[23:26:35] <sarnold> oh nice, computerphile even :)
[23:27:06] <onelegend> lol
[23:27:08] <onelegend> it's the Pound
[23:28:50] <onelegend> someone should write a hardware implementation for ChaCha20
[23:30:23] <wasamasa> sure, go bribe intel and AMD
[23:30:45] <yawkat> not sure itd actually be faster
[23:30:57] <yawkat> theres no lookups or anything after all
[23:31:24] <wasamasa> openssl has perl-assembler implementations of it
[23:31:48] <onelegend> maybe I'll make my own CPU
[23:31:58] <onelegend> out of RISCV
[23:33:47] <wasamasa> wtf is c64x+
[23:33:49] <sarnold> fpga that thing, https://blog.mellanox.com/2018/08/defining-smartnic/
[23:34:12] <sarnold> wasamasa: I think it's a modern-made fpga implementation of a c64
[23:34:23] <wasamasa> why the fuck does openssl support that, but not risc-v
[23:35:31] <sarnold> lol
[23:36:08] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:36:58] *** Joins: kish` (~aqua@user/aqua)
[23:37:12] <wasamasa> but yes, the perl-assembler for that has the expected X and Y registers
[23:37:24] <wasamasa> and like 32 A and 32 B registers
[23:37:46] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 250 seconds)
[23:43:06] <onelegend> even with AES NI https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[23:43:21] <onelegend> 1107 lines of code
[23:45:01] <sarnold> vs 400 for chacha20 poly1305 .. https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_aead/
[23:45:05] <sarnold> ewrr
[23:45:10] <onelegend> ikr 
[23:45:11] <sarnold> https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c
[23:45:23] <sarnold> there we go. I wonder why firefox didn't copy the url the first time. heh.
[23:45:38] <sarnold> and I know which lines I'd rather read, too :)
[23:46:09] *** Platonid1s is now known as Platonides
[23:47:04] <yawkat> thats just the C boilerplate though
[23:47:54] <yawkat> chacha20 impls are here: https://github.com/jedisct1/libsodium/tree/master/src/libsodium/crypto_stream/chacha20
[23:48:07] <wasamasa> so, no, c64x+ is texas instruments DSP
[23:48:40] <onelegend> yawkat: EVEN BETTEr
[23:48:45] <onelegend> 69 lines of code
[23:48:47] <onelegend> 57 sloc
[23:48:48] <sarnold> wasamasa: aha. sorry for the bad advice :(
[23:49:15] <onelegend> err nvm
[23:49:17] <onelegend> 164
[23:49:19] <onelegend> still good
[23:49:30] <wasamasa> not sure why you'd run openssl on those, but whatever
[23:49:54] <onelegend> and the original implementation by djb https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.c
[23:50:00] <onelegend> 378sloc
[23:50:05] <onelegend> *278 sloc
[23:50:06] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[23:50:15] <wasamasa> is it though
[23:50:21] <wasamasa> I'd look at tweetnacl
[23:50:39] <rqsd> Monocypher also implemented its own ChaCha20
[23:50:42] <wasamasa> ok, no, that one just has salsa20
[23:51:12] *** Quits: mikeliuk (~mikeliuk@213.205.198.125) (Ping timeout: 250 seconds)
[23:51:13] <wasamasa> still, the wikipedia implementation of chacha20 is the shortest, though not production quality
[23:51:16] <onelegend> oh
[23:51:25] <onelegend> still good for memorization tho
[23:51:28] <rqsd> Where my fellow SPECK fans at though
[23:51:32] <wasamasa> it's not about memorization
[23:51:46] <wasamasa> it's about understanding things well enough that you can look up the bits you can't recall at the moment
[23:53:56] <Chouhartem> ee»«"«(
[23:54:59] <sarnold> Chouhartem: your cat is on the keyboard again
[23:55:55] <onelegend> meow
[23:56:11] <Chouhartem> ha no, it's my gpu that crashed, so apparently at some point the focus went on IRC
[23:58:35] *** Joins: gareppa (~gareppa@user/gareppa)
