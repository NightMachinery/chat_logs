[00:28:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:44:08] <FromGitter> <bryce-carson> @dalanicolai It took me some trial and error after reading the documentation, but I wrote a layer for Gitter to help myself out while I hack on the package. How are you managing your hacks on it?
[00:48:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[01:15:57] <FromGitter> <golanv:tchncs.de> <tab> should indent text in org-mode, yes?
[01:17:34] <FromGitter> <bryce-carson> It depends, the ~tab~ key can do a lot of things in Org. It folds, unfolds, indendts, outdents, promotes, demotes... It can be confusing, and takes a lot of time to become muscle memory. I haven't gotten there yet. Look at the Org manual, and *then* check over the keymappings *depending on *point**.
[01:20:39] <FromGitter> <golanv:tchncs.de> point?
[01:23:08] <FromGitter> <golanv:tchncs.de> I really thought the "tab" key on a new line would match indentation of the subheading...maybe I mis-remember.
[01:23:16] <FromGitter> <lebensterben> point is where your "cursor" is in a buffer
[01:24:11] <FromGitter> <lebensterben> in general you should use = = to indent current line
[01:32:31] <FromGitter> <golanv:tchncs.de> I see....thanks!
[02:05:03] *** Joins: vancz_ (~vancz@user/vancz)
[02:09:44] *** Quits: penguwin (~penguwin@fribbledom.com) (*.net *.split)
[02:09:45] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[02:15:26] *** Joins: penguwin (~penguwin@fribbledom.com)
[02:36:21] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[02:54:16] <FromGitter> <mughalgit> Hi Everyone, I have been using emacs for just over a year and now trying to make the switch to spacemacs. So forgive me if my understanding of spacemacs is not very polished! I'm having trouble configuring my custom TODOs in for ORG mode.
[02:54:50] <FromGitter> <mughalgit> If I try to put the following in my (defun dotspacemacs/user-config ()
[02:55:04] <FromGitter> <mughalgit> (setq org-todo-keywords ‚èé  ‚èé ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=622bda50d1b64840db60ee62]
[02:55:44] <FromGitter> <mughalgit> then upon loading spacemacs I get the message:
[02:55:46] <FromGitter> <mughalgit> Auto-evilification could not remap these functions in map ‚Äòorg-agenda-mode-map‚Äô: ‚èé  ‚èé 1) ‚Äòorg-agenda-next-line‚Äô originally mapped on ‚ÄòC-n‚Äô ‚èé Auto-evilification could not remap these functions in map ‚Äòorg-agenda-mode-map‚Äô: ‚èé 2) ‚Äòorg-agenda-toggle-time-grid‚Äô originally mapped on ‚ÄòG‚Äô ... [https://gitter.im/syl20bnr/spacemacs?at=622bda7a09092523181deb73]
[02:56:08] <FromGitter> <mughalgit> Any idea what I am missing????
[02:56:33] <FromGitter> <mughalgit> Needless to say the TODO items do not behave in the expected manner.
[03:02:24] <FromGitter> <lebensterben> post your .spacemacs
[03:02:36] <FromGitter> <lebensterben> to gist or pastebin
[03:06:38] <FromGitter> <mughalgit> Apologies but what do you mean by "gist" and "pastebin" are these areas on the gitter  where I can paste my .spacemacs file (I also have to say this is the very first time I am using this gitter chat room!)
[03:09:27] <FromGitter> <lebensterben> google
[03:14:41] <FromGitter> <mughalgit> https://pastebin.com/KRncMNqT
[03:25:00] <FromGitter> <lebensterben> the warning about auto-evilification can be ignored.
[03:26:07] <FromGitter> <lebensterben> the setting for `org-todo-keywords` is valid
[03:27:52] <FromGitter> <lebensterben> what do you see from `M-x describe-variable` for `org-todo-keywords`?
[03:29:27] <FromGitter> <mughalgit> Hi thanks.
[03:29:46] <FromGitter> <mughalgit> I was trying another configuration in the meantime. Same sort of thing.
[03:30:15] <FromGitter> <mughalgit> When I do M-x describe-variable and then org-todo-keywords I get:
[03:30:17] <FromGitter> <mughalgit> org-todo-keywords is a variable defined in ‚Äòorg.el‚Äô. ‚èé Its value is ‚èé ((sequence "NEXT" "TODO" "WAITING" "INACTIVE" "|" "DONE" "CANCELLED" "DELEGATED") ‚èé  (sequence "NOTE" "TO FILE" "|" "ARCHIVE")) ‚èé Original value was  ... [https://gitter.im/syl20bnr/spacemacs?at=622be2913ae95a1ec19544e4]
[03:31:49] <FromGitter> <mughalgit> But when I try to switch between states "C-c C-t" I only get the TODO and DONE states
[03:32:35] <FromGitter> <lebensterben> ??? That doesn't make sense
[03:33:16] <FromGitter> <mughalgit> :-) I'm also perplexed...!
[03:33:35] <FromGitter> <lebensterben> It's correctly set ...
[03:34:06] <FromGitter> <lebensterben> Do you run Emacs in daemon?
[03:35:10] <FromGitter> <mughalgit> I'm just running emacs on a mac with a straight GUI interface ... nothing special
[03:35:40] <FromGitter> <lebensterben> This doesn't make any sense....
[03:40:44] <FromGitter> <lebensterben> `M-x org-version` ?
[03:41:44] <FromGitter> <mughalgit> 1) 5.2
[03:42:17] <FromGitter> <lebensterben> Can you restart emacs and try again?
[03:44:47] <FromGitter> <mughalgit> sure, I have tried a few times. I'll do it again. Maybe the following might give you a hint: If I try to start the bullet point with NEXT or say NOTE ... these are not recognised - emacs thinks these are just simple bullet point headings.... anyway trying to restart now...
[03:45:47] <FromGitter> <lebensterben> ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=622be6333ae95a1ec1954ac9]
[03:46:40] <FromGitter> <lebensterben> Try replacing the `(setq org-todo-keywords ...)` by this form
[03:46:44] <FromGitter> <lebensterben> and restart
[03:46:54] <FromGitter> <mughalgit> OHHH!! I get something!
[03:47:20] <FromGitter> <lebensterben> but it still just doesn't make any sense ...
[03:47:21] <FromGitter> <mughalgit> If I open emacs BUT NOT FROM MY TERMINAL
[03:47:34] <FromGitter> <lebensterben> ???
[03:48:27] <FromGitter> <lebensterben> what's special about terminal Emacs...
[03:48:31] <FromGitter> <mughalgit> If I open my org file by right clicking on it and say "open with emacs" then the expected ability to cycle through the TODO lists works!!
[03:48:50] <FromGitter> <lebensterben> what command do you use when you open it within terminal
[03:49:06] <FromGitter> <mughalgit> Ahhh! let me check...
[03:50:11] <FromGitter> <mughalgit> I think I've been using an alias to launch emacs:
[03:50:13] <FromGitter> <mughalgit> alias emacs='/usr/local/bin/emacs'
[03:50:37] <FromGitter> <lebensterben> well that should not make a difference ...
[03:51:17] <FromGitter> <lebensterben> as you see from `M-x describe-variable`, it's set correctly
[03:51:40] <FromGitter> <lebensterben> Spacemacs has done no magic to `C-c C-t` (`org-todo`)
[03:54:04] <FromGitter> <mughalgit> yes, I agree with you. It is correctly set. And for some mysterious reason when I tell the mac to open the file by right clicking on it .... it works.... but when I try to launch from terminal it doesn't do the right thing.... sorry.... I'm also puzzled...
[03:54:39] <FromGitter> <lebensterben> Do you have `/usr/bin/emacs`?
[03:56:25] <FromGitter> <mughalgit> indeed, yes:
[03:56:26] <FromGitter> <mughalgit> ls /usr/bin/emacs ‚èé /usr/bin/emacs
[03:57:13] <FromGitter> <lebensterben> what if you start terminal Emacs via /usr/bin/emacs?
[03:58:38] <FromGitter> <mughalgit> so I seem to see a sort of "primitive" emacs environment inside a terminal... is that what you would expect?
[03:59:25] <FromGitter> <lebensterben> yes Emacs doesn't support a number of UI features within terminal
[04:00:07] <FromGitter> <lebensterben> > what if you start terminal Emacs via /usr/bin/emacs? ‚èé  ‚èé ^ does this make a difference for `org-todo`?
[04:02:32] <FromGitter> <mughalgit> I think in this enviroment it doesn't even know what a org-todo is!
[04:02:33] <FromGitter> <mughalgit> An error has occurred while loading `/Users/adilmughal/.emacs.d/init.el':
[04:03:32] <FromGitter> <lebensterben> ..........
[04:03:51] <FromGitter> <lebensterben> have you replaced `setq` by `custom-set-variables`
[04:04:15] <FromGitter> <lebensterben> the later one only has effect after `org` is loaded
[04:05:00] <FromGitter> <lebensterben> (Though I doubt it would make a differecne)
[04:06:51] <FromGitter> <mughalgit> Lucius, thanks for your help - but I'm going to get back to this another day (its pretty late now in the UK). But at least I think the problem must be something to do with the terminal enviroment from which I'm launching emacs as opposed to whatever the mac is doing when its told to launch it from the application launcher.... don't know why there should be a difference!!
[04:07:50] <FromGitter> <lebensterben> okay bye
[04:08:10] <FromGitter> <mughalgit> Thanks man - I may be back here again on another day soon.
[06:51:12] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[08:33:28] *** Quits: pagurus (~user@i59F4D307.versanet.de) (Ping timeout: 272 seconds)
[08:40:06] *** Joins: pagurus (~user@i59F529EA.versanet.de)
[08:51:19] *** Quits: TikityTik (~TikityTik@user/TikityTik) (Read error: Connection reset by peer)
[09:28:16] <FromGitter> <bryce-carson> How can I add functions to a Hydra / transient state?
[09:32:12] <FromGitter> <bryce-carson> I know the name of the state, `spacemacs/scroll-transient-state`, and its keymap, `spacemacs/scroll-transient-state/keymap`, but I can't locate information on extending keymaps, which I assume would be the method to include those in the transient state. That's not a good assumption, since it wouldn't define which header the key is shown underneath in the transient state help (`?`). ‚èé  ‚èé There are several 
[09:32:12] <FromGitter> ... variables for the state: `//hint`, `//heads`, `//params`, `//keymap`, `//docstring`. I will look at this and see if I can manage to locate the information I'm looking for.
[09:51:49] <FromGitter> <bryce-carson> Ah! `//heads` *are* the *heads* of the hydra, not the headers.
[10:03:05] <FromGitter> <bryce-carson> I have learned how to grow `//heads`. ‚èé  ‚èé ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=622c3ea1161ffc40d7af96e1]
[10:03:39] <FromGitter> <dalanicolai> You can use ripgrep to find its definition
[10:04:50] <FromGitter> <dalanicolai> @bryce-carson `SPC s f spacemacs/scroll-transient-state`
[10:05:06] <FromGitter> <dalanicolai> withing your `.emacs.d` dir
[10:06:47] <FromGitter> <lebensterben> `C-h f spacemacs/scroll-transient-state` will shows you where it's defined
[10:06:58] <FromGitter> <lebensterben> or just `g d` on the symbol
[10:08:07] <FromGitter> <bryce-carson> `C-h f` doesn't tell me where it's defined, actually.
[10:09:27] <FromGitter> <bryce-carson> `g d` fails, as no jump handlers could find the definition.
[10:09:32] <FromGitter> <lebensterben> Okay
[10:10:03] <FromGitter> <lebensterben> `SPC /` `spacemacs|define-transient-state scroll`
[10:10:09] <FromGitter> <lebensterben> youmay need to escape `|`
[10:10:15] <FromGitter> <dalanicolai> > @bryce-carson `SPC s f spacemacs/scroll-transient-state` ‚èé  ‚èé So after this you can directly change its definition
[10:11:26] <FromGitter> <dalanicolai> I think more straightforward/cleaner then growing more heads on that monster
[10:12:58] <FromGitter> <bryce-carson> Ah, wonderful. I'm at the definition in `packages.el` after using `SPC /` with the argument you provided. ‚èé  ‚èé I had already exhausted my basics, describe-function, -variable, -apropos, et cetera. ‚èé  ‚èé I wasn't familiar with `SPC /` or ripgrep. Ripgrep failed, interestingly; `grep` didn't find anything. [https://gitter.im/syl20bnr/spacemacs?at=622c40f26b912423202d954b]
[10:12:59] <FromGitter> <dalanicolai> @lebensterben We are working on improving `gitter.el`, you can try it from https://github.com/dalanicolai/gitter.el
[10:13:21] <FromGitter> <dalanicolai> Would be nice if you could let us know if it works faster then the desktop app...
[10:13:31] <FromGitter> <dalanicolai> Here it works perfectly fine
[10:14:12] <FromGitter> <lebensterben> You can do something like ‚èé  ‚èé ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=622c413cd1b64840db619e18]
[10:14:18] <FromGitter> <lebensterben> @bryce-carson
[10:14:30] <FromGitter> <lebensterben> then
[10:15:02] <FromGitter> <lebensterben> ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=622c416e8db2b95f0a62f4dd]
[10:15:25] <FromGitter> <lebensterben> you can omit `:exit t` if the transient state remains open after the command
[10:15:57] <FromGitter> <bryce-carson> @lebensterben, there is no variable of that name. Did you mean `spacemacs/scroll-transient-state/docstring`?
[10:16:38] <FromGitter> <lebensterben> just do it
[10:16:39] <FromGitter> <bryce-carson> Oh, I see. Very interesting... yet still, the variable you mention doesn't exist.
[10:16:53] <FromGitter> <lebensterben> this is the magic of LISP...
[10:17:01] <FromGitter> <bryce-carson> üòÜ okay... I'll try.
[10:17:14] <FromGitter> <dalanicolai> @bryce-carson btw you can also find it via `SPC h SPC bootstrap evil`
[10:17:35] <FromGitter> <lebensterben> We have bad documentation for internal functions
[10:17:36] <FromGitter> <dalanicolai> It is in `spacemacs-bootstrap/init-evil`
[10:18:47] <FromGitter> <lebensterben> well that might not work
[10:19:12] <FromGitter> <bryce-carson> Is the opening ` ` (space) in the ...`state-doc` required?
[10:20:30] <FromGitter> <lebensterben> okay I found it
[10:20:34] <FromGitter> <lebensterben> just modify `spacemacs--scroll-ts-full-hint`
[10:21:37] <FromGitter> <lebensterben> things are complicated because users have too much freedom now.
[10:22:01] <FromGitter> <bryce-carson> *Only* do that, now?, or add the bindings still?
[10:22:19] <FromGitter> <lebensterben> that's the just the text part
[10:22:31] <FromGitter> <lebensterben> You also need to register new bindings
[10:22:47] <FromGitter> <bryce-carson> Okay, *just* checking. I'm a little terse sometimes. Especially when it comes to Emacs. You need to be clever a little too often.
[10:25:15] <FromGitter> <lebensterben> @dalanicolai https://github.com/dalanicolai/gitter.el/blob/2e8ad5e05bfa386a84a3223b51cd0e0055d29da8/gitter.el#L149-L162
[10:25:20] <FromGitter> <lebensterben> looks very bad
[10:25:45] <FromGitter> <lebensterben> string in most languages are immutable objects
[10:26:04] <FromGitter> <lebensterben> pushing characters into a string actually clone the original string to a new one
[10:26:58] <FromGitter> <bryce-carson> Thank you for the help. I need to study this stuff now. ‚èé I'm a bit behind in learning elisp, so my contribution to `gitter.el` has ended swiftly after enabling it to refresh the rooms it knows about.
[10:27:47] <FromGitter> <dalanicolai> What do you mean? He is pushing to a list?
[10:28:02] <FromGitter> <lebensterben> elisp is not very hard. macros make it hard.
[10:28:14] <FromGitter> <dalanicolai> Maybe it is not all perfect code... but it is q quite nice code and a great pakcage
[10:28:20] <FromGitter> <lebensterben> Okay.. My bad
[10:28:40] <FromGitter> <lebensterben> too late now
[10:28:48] <FromGitter> <dalanicolai> To late what?
[10:29:14] <FromGitter> <dalanicolai> Ah... the time
[10:29:21] <FromGitter> <dalanicolai> I guess
[10:29:33] <FromGitter> <dalanicolai> Here it is 8.00 in the morning
[10:30:32] <FromGitter> <dalanicolai> B.t.w. it is extremely easy to create the token and get started
[10:31:41] <FromGitter> <dalanicolai> There is no other functionality yet, than writing and reading messages... but the API looks easy to use.. and functionalities can slowly get added
[10:32:13] <FromGitter> <dalanicolai> I think I have improved the package already quite a lot in the last two commits
[10:32:32] <FromGitter> <dalanicolai> With only a little bit of code
[10:32:55] <FromGitter> <dalanicolai> (well this was the easy thing of course)
[10:33:31] <FromGitter> <dalanicolai> Okay... I should go now
[10:33:47] <FromGitter> <dalanicolai> See you later...
[10:42:25] <FromGitter> <lebensterben> from what I see is gitter.el is user Gitter's HTTP API via curl
[10:43:15] <FromGitter> <lebensterben> If I'm not mistaken, for each API request, gitter.el start a new process to let curl do the job
[10:43:49] <FromGitter> <lebensterben> it would be much more efficient if there's a program sitting in the background
[10:44:33] <FromGitter> <lebensterben> Emacs talks to the program via some kind of inter process communication
[10:45:01] <FromGitter> <lebensterben> one example is  LSP. another is emacs application network.
[10:45:10] <FromGitter> <lebensterben> *emacs application framework
[10:47:00] <FromGitter> <bryce-carson> There's a stream API for Gitter as well, I don't think the package consumes from it at all though.
[10:47:12] <FromGitter> <bryce-carson> It does start *some* process, yes.
[10:47:23] <FromGitter> <bryce-carson> I don't know what kind.
[10:48:01] <FromGitter> <lebensterben> curl I believe
[10:57:32] <FromGitter> <dalanicolai> gitter.el is using the streaming API
[10:57:58] <FromGitter> <dalanicolai> So it is a single program running in the background
[10:58:39] <FromGitter> <dalanicolai> Well... for 'keeping track' of incoming messages at least
[11:00:03] <FromGitter> <dalanicolai> To send a message it probably does a request using curl... but I really see no problem with that
[11:00:23] <FromGitter> <dalanicolai> i.e. it is how REST api's work
[11:00:53] <FromGitter> <dalanicolai> > gitter.el is using the streaming API ‚èé  ‚èé https://developer.gitter.im/docs/streaming-api
[11:01:09] <FromGitter> <dalanicolai> So I think it is a quite clean design
[11:03:03] <FromGitter> <dalanicolai> It starts a single `curl` streaming process... so that the app does not have to 'poll' for new messages... but simply 'listens' for them
[11:03:46] <FromGitter> <dalanicolai> I think for other functionalities it uses the REST API, but sending requests is the whole idea of a REST API
[11:05:32] <FromGitter> <dalanicolai> That would make an 'extra' layer between the gitter-client and the REST API
[11:05:47] <FromGitter> <dalanicolai> The client can just do the calls itself directly
[11:05:56] <FromGitter> <dalanicolai> Very clean
[11:07:19] <FromGitter> <dalanicolai> It looks very clean to me
[11:10:00] <FromGitter> <lebensterben> Okay. That's good
[17:04:31] <FromGitter> <mughalgit> Just reporting back. If I open emacs from the terminal as  "$emacs" then navigate to the file (e.g. "test.org") then my custom TODOs work just fine! However if open the file as a command line argument "$emacs test.org" then they don't work! I wonder if there is some restriction on spacemacs NOT accepting files on the command line. Anyway, there you go ... still puzzled (full disclosure: I'm trying all this out 
[17:04:31] <FromGitter> ... on an old MAC before trying this all out on my main systems... I wonder if perhaps these problems might just disappear on my other machines... won't know until I try it!)
[20:18:51] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[21:07:28] *** Quits: penguwin (~penguwin@fribbledom.com) (*.net *.split)
[21:12:56] *** Joins: penguwin (~penguwin@fribbledom.com)
[22:37:39] *** Joins: ur5us (~ur5us@122-56-201-64.mobile.spark.co.nz)
[23:09:05] *** Quits: ur5us (~ur5us@122-56-201-64.mobile.spark.co.nz) (Quit: Leaving)
