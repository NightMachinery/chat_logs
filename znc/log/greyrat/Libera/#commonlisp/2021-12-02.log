[00:08:24] *** Quits: scymtym_ (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[00:10:09] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[00:10:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[00:10:34] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[00:13:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:17:07] <jackdaniel> some progress with the incremental redisplay in mcclim: https://turtleware.eu/static/paste/incrm-table.mp4
[00:25:07] *** Joins: utis (~utis@84.208.165.160)
[00:29:41] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[00:30:18] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[00:31:37] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 256 seconds)
[00:35:37] <utis> hi
[00:36:57] <utis> i've got this recursion that works once but hangs if i run it again
[00:37:04] <utis> https://bpa.st/FLHQ
[00:38:26] <utis> to be run on:
[00:38:28] <utis> https://bpa.st/73JQ
[00:42:05] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[00:45:50] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[00:47:24] <hayley> You're doing an awful lot of subseq-ing.
[00:50:16] <hayley> It would be better to maintain the position of the start of the next numeral to match, rather than creating new strings.
[00:51:01] <utis> i see.  thanks!
[00:58:46] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:11:43] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[01:23:51] <jcowan> If only there was a Lisp with shared strings...
[01:25:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[01:31:45] <dre> guys I've done it !
[01:31:50] <dre> https://dpaste.org/h6U9 (ignore the princ)
[01:32:01] <dre> a much nicer and more lispy solution
[01:33:27] *** Quits: pve (~pve@178-55-34-151.bb.dnainternet.fi) (Quit: leaving)
[01:35:51] <pjb> dre: https://termbin.com/buxm
[01:36:25] <pjb> the function count-positive should clearly count the positive reals in the sequence…
[01:36:49] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[01:37:25] <pjb> dre: there was no link in a comment to the specifications, so I guessed that the file only contained integers, and that you didn't really want to just take the first integer on each line.
[01:37:52] <pjb> just using read should be faster than read-line + parse-integer, if the file is well formed.
[01:39:45] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:43:25] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:50:06] <Guest74> pjb: that's not doing the same thing.
[01:53:13] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[01:54:13] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:1561:c191:6e5b:3c40)
[01:55:32] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d2:ff0:5d37:5050:b319:2cd2)
[01:55:42] <hayley> jcowan: Sharing, mutability, or both and insanity, pick one.
[01:56:21] <hayley> I guess displaced arrays count as the last one...
[01:57:44] *** gpiero_ is now known as gpiero
[01:57:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:59:27] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:1561:c191:6e5b:3c40) (Ping timeout: 250 seconds)
[02:03:59] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:05:41] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 252 seconds)
[02:19:13] <dre> pjb, yeah that's not doing the same thing
[02:19:22] <dre> this is for AoC day 1 part 2 puzzle
[02:19:39] <dre> sorry my code is a little unreadable lol
[02:20:27] <dre> it should be "count increases" i guess. it's counting the number of increases from the nth value to the nth + 3 value
[02:20:45] <dre> tomorrow will be a better day
[02:21:03] <pjb> hence the importance of choosing names carefully.
[02:21:59] <dre> would "count-increases" make more sense?
[02:22:41] <pjb> it would.
[02:22:55] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 252 seconds)
[02:24:23] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[02:26:09] <pjb> dre: https://termbin.com/amsq
[02:28:57] <dre> nthcdr is nice
[02:29:06] <dre> thanks
[02:30:03] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[02:30:14] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[02:31:49] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b02d:5aba:3d76:28ce:508d:cece)
[02:34:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[02:36:51] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 256 seconds)
[02:38:19] <rotateq> "which of your CARs is that now?" "oh, it's my nth"
[02:48:45] *** Quits: gaqwas (~john@dynamic-077-002-080-002.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[02:49:22] <Guest74> dre: I made the same 'mistake'.  It makes not sense to use an if to transform a T or Nil to 1 or 0 to sum the count when you can just (COUNT T list)
[02:50:14] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d2:ff0:5d37:5050:b319:2cd2) (Ping timeout: 252 seconds)
[02:54:26] <Guest74> I still think my favourite for part 2 is (COUNT T (MAPCAR #'< list (CDDDR list)))
[03:02:20] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:03:57] * jasom feels a bit embarassed to not have thought of that one
[03:04:18] <jasom> I did observe that (A + B + C) < (B + C + D) ≡ A < D though
[03:15:19] <pdietz> < is not guaranteed to return T for true, although in most (all?) CL implementations it does.
[03:15:49] *** Joins: asarch (~asarch@187.143.19.32)
[03:16:48] *** Quits: asarch (~asarch@187.143.19.32) (Client Quit)
[03:19:36] *** Joins: igemnace (~ian@user/igemnace)
[03:27:25] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:30:04] <mzan> I made AoC day 1 part 2, using tap and series packages (a stream library), and I'm happy of the code.
[03:30:06] <mzan> https://0bin.net/paste/XCJzvbq0#VgKrSn-ufslrk7/kt7rsbNLPX88E5qK1QdESN9/fzH/
[03:30:16] <mzan> I'm a newbie of CL
[03:30:45] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[03:33:38] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:34:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[03:39:16] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[03:48:11] <jasom> pdietz: could use count-if #'identity then
[03:49:14] <pdietz> Or (count nil (mapcar #'>= list (cdddr list)))
[03:57:20] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[04:02:17] <dre> <Guest74> I still think my favourite for part 2 is (COUNT T (MAPCAR #'< list (CDDDR list)))
[04:02:20] <dre> that is very nice
[04:02:28] <dre> and if only I had thought of it
[04:02:39] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b02d:5aba:3d76:28ce:508d:cece) (Ping timeout: 252 seconds)
[04:17:06] *** Joins: Oladon (~olad@98.43.81.226)
[04:17:24] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.3)
[04:17:46] *** Joins: mariari (~mariari@user/mariari)
[04:17:50] *** Quits: mariari (~mariari@user/mariari) (Remote host closed the connection)
[04:33:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:35:08] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[04:35:20] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:42:21] *** Joins: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26)
[04:56:35] *** Joins: akoana (~ah@user/akoana)
[05:08:20] *** Joins: ad-absurdum (~ad-absurd@98.sub-174-210-128.myvzw.com)
[05:36:53] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:39:54] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[05:43:54] *** Quits: ad-absurdum (~ad-absurd@98.sub-174-210-128.myvzw.com) (Ping timeout: 256 seconds)
[05:49:17] *** Joins: ad-absurdum (~ad-absurd@5.sub-174-210-161.myvzw.com)
[05:49:34] *** Quits: ad-absurdum (~ad-absurd@5.sub-174-210-161.myvzw.com) (Client Quit)
[05:57:49] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:16:33] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[06:25:48] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[06:26:03] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:46:44] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 252 seconds)
[06:47:17] *** Quits: prxq (~quassel@x4db98d43.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:47:30] *** Joins: prxq (~quassel@x4dbd88a7.dyn.telefonica.de)
[06:51:00] *** Joins: paule32_ (~paule32@user/paule32)
[06:51:06] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[06:52:25] *** Joins: paule32__ (~paule32@user/paule32)
[06:54:53] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:55:52] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 256 seconds)
[06:57:14] *** Joins: paule32 (~paule32@user/paule32)
[06:59:01] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[07:02:05] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[07:06:21] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:10:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:12:30] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[07:13:21] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Client Quit)
[07:13:30] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[07:19:55] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[07:21:39] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Quit: Leaving)
[07:30:43] <beach> Good morning everyone!
[07:33:28] <beach> mzan: There is no reason to have a newline after LET*.  And in Common Lisp, we don't have closing parentheses preceded by whitespace (and that includes newlines).  Plus, there is no particular reason to have blank lines in the middle of top-level forms.
[07:34:50] <beach> mzan: And (lambda (ss) (series:collect-sum ss)) can be more simply expressed as #'series:collect-sum.
[07:35:12] <beach> mzan: Similar with series:collect.
[07:35:55] <beach> mzan: And your indentation is off.  Lines after (->>ss3 ought to be indented.
[07:36:21] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:36:56] <beach> mzan: And (lambda (x) nil) can be expressed as (constantly nil).
[07:37:19] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:37:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:41:35] <beach> jackdaniel: I am not sure from your demo what the improvement is compared to what things were before.  Any hints?
[07:41:43] <Guest74> pdietz: what are some of the possible return values implementations might choose?
[07:42:07] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:43:23] <beach> Guest74: Anything other than NIL to represent true.
[07:43:50] <Guest74> yeah, just read that, generalized boolean.
[07:43:55] <beach> (< 2 3) => "Why, of coure" is perfectly conforming.
[07:44:25] <aeth> clearly you want NIL and (NOT NIL)
[07:44:26] <beach> *course!
[07:45:03] <Guest74> not nil doesn't work with count
[07:45:28] <Guest74> what's that reversing function?
[07:45:40] <beach> :test-not?
[07:46:17] <Guest74> what item would you supply with test not?   another page to read.
[07:46:43] <Guest74> but asking about the function that returns the complement of a fucntion?  probably complement?
[07:47:07] <beach> I haven't had my coffee yet, but perhaps (count nil ... :test-not #'identity) or (count nil ... :test #'not)
[07:47:26] <Guest74> or i guess use count-if
[07:47:48] <beach> Many possible solutions.
[07:48:09] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[07:48:18] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[07:49:03] <Guest74> oh, test-not takes two args.
[07:49:22] <beach> Maybe I meant :key.
[07:49:32] <beach> Like I said, coffee not consumed yet.
[07:49:59] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:50:08] <Guest74> count nil :key #'null works
[07:50:21] <beach> Right.
[07:51:03] <Guest74> it's an interesting use.
[07:54:39] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[07:55:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:58:15] <Guest74> I guess it probably wouldn't be good style to use it since :key sort of implies an accessor?
[07:59:21] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:59:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:00:38] <hayley> The :key and :test arguments are pretty open to interpretation to me. I recall mentioning some form in #commonlisp a while ago, something like (find 'integer '(fixnum real string) :test #'subtypep).
[08:02:08] <hayley> Worse, the :test doesn't have to be an equivalence relation. For example, (complement #'=) or #'/= is not an equivalence relation, but using either for :test is preferred over using the deprecated :test-not.
[08:02:40] *** Joins: semz (~none@user/semz)
[08:02:57] <Guest74> well, I will happily abuse this if the opportunity presents itself.  I notice clhs doesn't mention anything besides it being a designator for a function.
[08:03:47] *** Joins: Oladon (~olad@98.43.81.226)
[08:04:58] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[08:05:54] <beach> hayley: Nobody cares about the deprecated features it seems.
[08:06:31] <hayley> Oh well, they'll be in trouble when we get a new standard, and I won't.
[08:06:57] <Guest74> I love me some remove-if-not
[08:07:11] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:07:21] *** Quits: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26) (Quit: ERC (IRC client for Emacs 27.1))
[08:08:12] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:08:17] <Guest74> i think it communicates more what you want.
[08:12:40] <semz> I definitely find it more natural to enforce a predicate than to describe what I want removed.
[08:13:15] <semz> Do remove-if and remove-if-not predate the "filter" terminology that's more common nowadays?
[08:13:45] <hayley> I'm not sure, but "filter" is vague as to what is kept.
[08:14:19] <hayley> The Standard ML function List.partition partitions into two lists instead, which seems nicer.
[08:15:00] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[08:16:43] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:21:16] <beach> I agree with hayley that FILTER is ambiguous.  Plus, in Common Lisp there is the distinction between REMOVE and DELETE which is made explicit this way.
[08:21:42] <beach> When appropriate, I just think of REMOVE-IF-NOT as KEEP-IF.
[08:23:06] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:24:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:38:05] <Guest74> damn, i don't even know how these people type this fast to submit so fast.
[08:39:00] <hayley> Competitive programming is a thing, unfortunately.
[08:40:14] <hayley> ...notably, the competitions where people churn out code as quickly as possible. Not all competitions are based on programming speed.
[08:41:18] <Guest74> are there elegant competitions?
[08:42:02] <hayley> Quite likely, but I don't know how you judge that.
[08:44:39] <dre> ok
[08:44:50] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:45:11] <dre> so how do we use (split-sequence #\space "this is a string")  in sbcl?
[08:45:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:45:34] <Guest74> just like that.  maybe split-sequence:split-sequence
[08:45:59] <Guest74> you have to have the system loaded (ql:quickload "split-sequence")
[08:46:25] <dre> ^ that's what i was missing, thanks
[08:46:25] <hayley> Make sure you have loaded the split-sequence system, and then (split-sequence:split-sequence #\space "this is a string")
[08:46:38] <dre> I also have found (ql:quickload :cl-ppcre)
[08:46:42] <dre> which might be a nicer lib?
[08:47:04] <Guest74> if you understand regex
[08:47:08] <hayley> I'd usually say something right about now, but I don't have functions that replace and split strings.
[08:47:49] <hayley> But, yes, CL-PPCRE performs operations on regular expressions, and not just strings, so e.g. splitting on "|" might go sideways quickly.
[08:48:16] <hayley> I recall my first university assignment involved parsing "database" files which were | delimited, just to throw people off using .split() in Java, which takes a regular expression.
[08:49:17] <dre> ok I don't get it
[08:49:40] <dre> I've loaded up ppcre  with ql, but when i try to run anything I get undefined function
[08:49:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:49:59] <hayley> Amusingly, I was just about to ask something about regexen implementation: somehow an article I wrote on my regular expression compiler got big on Reddit and Hacker News. Someone asked me how I would handle character classes like \w or [:alpha:]. I suspect generating a whole lot of <= for each range is a terrible way to match a character class comprised of many ranges.
[08:50:32] <dre> the very first code line on the ppcre documentation is "(parse-string "(ab)*")
[08:51:25] <hayley> Another approach would be to use a bitmap, but we'd need a lot of bits for every Unicode character. And the generated code is quite fast, so having a large table also would result in more cache misses and more of a slowdown, which would be unfortunate. Is there a clever way to "compress" a bitmap in a way that allows for random access to the bitmap?
[08:51:41] <dre> (ql:quickload :cl-ppcre) (parse-string "(ab)*") => undefined function
[08:51:47] *** Joins: Jing_ (~hedgehog@2604:a840:3::1061)
[08:51:48] <dre> can someone explain ?
[08:52:04] <dre> has it got to be in the form?
[08:52:26] <hayley> dre: I assume the documentation assumes you have used the package, but that is not a good idea, so you need to include the name of the CL-PPCRE package. Try (cl-ppcre:parse-string "(ab)*")
[08:52:29] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[08:52:41] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[08:52:41] *** Quits: Jing (~hedgehog@115.207.46.97) (Ping timeout: 252 seconds)
[08:52:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[08:52:54] <dre> oh
[08:52:57] <dre> nice  thanks that worked
[08:53:27] <dre> so what's the workaround? how can I be "using cl-ppcre" in that sense?
[08:53:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:53:36] <dre> although I don't mind prefixing everything with the package that it comes from...
[08:53:40] <beach> dre: Workaround?
[08:53:50] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:53:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:54:02] <hayley> Prefixing everything with the package is usually easier on the person reading your code, so I would just do that.
[08:54:09] <beach> dre: If CL-PPCRE is to long, use a package-local nickname.
[08:54:11] <dre> the workaround is to work harder, I get it :)
[08:54:57] <hayley> Not by much. And it's better if your editor can complete names, so (cl-p <tab> p-str <tab> "(ab)*") might suffice.
[08:55:05] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Client Quit)
[08:55:19] * hayley forgot the : after completing cl-ppcre, but hopefully dre gets the idea.
[08:56:25] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:57:53] <hayley> Here is a hackish implementation of a "page table" which avoids requiring parts of the bitmap that are entirely 0 or 1 to exist in memory <https://plaster.tymoon.eu/view/2740#2740>, but I would guess testing for the sentinel values could confuse branch prediction.
[08:58:19] <hayley> Hm, I could hash cons instead, and there would only be one fully 0 page, and one fully 1 page.
[09:00:32] <dre> another newb question
[09:00:51] <dre> if I write a function, call it, and it fails, getting me into the debugger,
[09:01:32] <dre> if I then redefine the function ( correcting the mistake), and then "Ctrl-D" to get out of the debugger...
[09:01:59] <dre> do i have the new corrected function, or the old crappy function defined ?
[09:02:27] <beach> If you evaluate the DEFUN form again, you have the new version.
[09:02:37] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:02:52] <beach> dre: Are you using SLIME?
[09:02:54] <dre> but I'm evaluating the defun in the debugger, then leaving the debugger, so I have the old version right?
[09:03:01] <dre> no, SBCL / vim
[09:03:04] <dre> sorry ;_;
[09:03:09] <dre> I'm so naughty ;;_;
[09:03:33] <beach> SBCL has only one global environment, so if you evaluate the DEFUN form in that environment, the old function will be replaced.
[09:04:13] <beach> dre: Not "naughty", but you are depriving yourself of some reasonably good tools.
[09:05:05] <hayley> There is SLIMV for vim, though I have heard mixed things about it. Granted, I have also heard mixed things about SLIME too.
[09:06:39] <dre> I use "vim-slime" which, very basically, will send the paragraph I'm on to *another-terminal* with a <c-c><c-c>
[09:06:49] <dre> which actually works suprisingly well.
[09:07:03] <dre> but I don't get introspection like I do with emacs.
[09:07:33] <Nilby> or you could be like me and not use SLIME/SLIMV/SLY anything, and even more naughty, use :use/use-package
[09:09:21] <Nilby> and really mess yourself up the hard way
[09:11:35] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:11:45] <dre> nice ^
[09:20:24] <lisp123> dre: Try EVIL Mode with Emacs
[09:23:02] <dre> solution day 2: ~~~ https://dpaste.org/OCGM
[09:23:12] <dre> I know it's begging for macros, I'll figure that out soon.
[09:24:34] <Guest74> SECOND might be more readable than CADR
[09:27:29] <hayley> It might be better to use DESTRUCTURING-BIND too. e.g. (destructuring-bind (action distance-string) (cl-ppcre:split " " item) ...)
[09:28:30] <Guest74> or that. I really need to go to bed.
[09:34:33] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:35:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:36:09] *** Joins: abrahms (~user@75.164.87.141)
[09:37:00] <abrahms> Hey commonlisp folks. I'm trying to figure out how to call a function if I have the string representing it's name.  (funcall (intern "func-name-here") 1) doesn't seem to work.
[09:37:51] <hayley> Try with an uppercase name.
[09:38:14] <hayley> The reader upcases symbol names by default, so you probably need to upcase the name yourself.
[09:38:15] <abrahms> I'm so grumpy that works. :)
[09:38:28] <abrahms> Thanks so much!
[09:38:29] <_death> probably want FIND-SYMBOL instead
[09:38:59] <abrahms> _death: find-symbol can't find the function if it's lowercase, sadly.
[09:39:35] <Alfr> abrahms, no but it won't intern a new symbol into package if func-name-here is misspelled.
[09:39:35] <abrahms> https://pastebin.com/03xpiKXE - repl session.
[09:39:50] <abrahms> Alfr++ that makes sense. :)
[09:40:00] <jackdaniel> beach: on master the same code (sans cells are aligned differently, but that doesn't matter here) -- https://turtleware.eu/static/paste/incrm-table-old.mp4
[09:40:18] <_death> another alternative is a hash-table mapping strings to functions
[09:41:48] <Alfr> _death, with an equalp hash table for case insensitiveness?
[09:42:12] <_death> perhaps
[09:42:41] <Alfr> _death, that's the first time I actually consider equalp to be of any use.
[09:46:00] <beach> jackdaniel: Ah, so you are saying you fixed that bug?
[09:46:00] <_death> often when I want to have such dispatch equal is more appropriate.. but I do use equalp sometimes, either for such case-insensitiveness or for non-string array equality
[09:46:04] <beach> jackdaniel: Great!
[09:47:13] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[09:47:27] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:48:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[09:49:55] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[09:54:45] <jackdaniel> beach: well, the spec is quiet about what does it mean to propagate changes, so not strictly a bug
[09:55:55] <beach> Ah, yes, I see.
[09:56:27] <beach> So was the behavior different before when incremental redisplay was in use, compared to when it was not?
[09:56:57] <beach> I guess I was puzzled by the mention of incremental redisplay.
[09:57:40] <jackdaniel> I've fixed a few bugs too, but table readjust is new
[09:58:38] <jackdaniel> I've been fixing issues for situation when some record was redisplayed that was not top level
[09:58:52] <beach> I see.
[10:01:46] <beach> Every day, there are fewer reasons to choose an FFI-based solution to Common Lisp GUI applications. :)
[10:11:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:19:16] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[10:24:56] <dre> What am I misunderstanding about "setf" here: https://dpaste.org/tBDH#L
[10:25:28] <hayley> What are you setting in the body of the last WHEN form?
[10:25:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[10:26:06] <dre> I want to set both pos and depth.
[10:26:23] <hayley> You are also passing a string to + and - which will not do what you want.
[10:26:28] <dre> oh right
[10:26:37] <dre> yes just caught the string. my bad, thanks
[10:26:38] <hayley> clhs parse-integer
[10:26:38] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_parse_.htm
[10:26:57] <dre> ye cheers,
[10:26:59] <hayley> You might want to use (incf aim blah) rather than (setf aim (+ aim blah)) too.
[10:27:21] <dre> but I get an error during macroexpansion of setf
[10:27:32] <dre> is it the string?
[10:27:37] <dre> thanks for incf
[10:27:55] <hayley> You didn't provide a variable name to set in the SETF forms that comprise the body of the last WHEN form.
[10:29:33] <dre> OH
[10:29:36] <dre> right
[10:29:39] <dre> neat thanks
[10:29:46] <dre> changing to incf will solve that anyway :P
[10:32:08] <dre> thanks, this is superb
[10:36:25] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:39:01] *** Quits: dre (~dre@2001:8003:c932:c301:3452:4883:fbcf:635) (Remote host closed the connection)
[10:54:20] <abrahms> Is there a utility function that amounts to "Given <list>, replace the 4th element with <thing> and return it to me"?  I've looked and I can't quite find one. rplacd is as close as I've come and it's a bit wonky of an API
[10:55:04] <lisp123> does (setf (nth 3 *list*) 50) work?
[10:55:48] *** Joins: nature (~nature@45.32.235.173)
[10:56:43] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[10:56:48] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[10:57:12] <abrahms> Close. It returns `50`. I tried playing around with setf in the repl, but it was very angry about replacing constant data.
[10:57:30] <lisp123> It modifies the list in place
[10:57:37] <lisp123> so you just need to read *list*
[10:58:00] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[10:59:37] <abrahms> Thanks. :)
[11:00:14] *** Joins: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de)
[11:03:08] *** Joins: dre (~dre@2001:8003:c932:c301:8916:3a5f:8275:217d)
[11:04:14] <lisp123> abrahms: You can also use this https://pastebin.com/R2wLtDGc
[11:04:25] <lisp123> If you don't want to change the original list, but rather return a new one
[11:09:59] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11d2:ff0:d9f:6aa2:37a5:9073)
[11:13:51] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:14:02] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[11:15:15] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:18:49] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:19:27] *** Joins: amb007 (~a_bakic@57.244.204.77.rev.sfr.net)
[11:23:49] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:37:43] *** Joins: treflip (~user@95.79.32.99)
[11:38:20] *** Joins: cosimone (~user@93-44-186-55.ip98.fastwebnet.it)
[11:39:00] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[11:46:31] *** Quits: amb007 (~a_bakic@57.244.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[11:47:10] *** Joins: amb007 (~a_bakic@139.14.23.93.rev.sfr.net)
[11:47:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:49:34] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[11:54:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[11:55:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:56:17] *** Joins: aeth (~aeth@user/aeth)
[12:02:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:04:38] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[12:11:26] *** Quits: amb007 (~a_bakic@139.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:11:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:18:25] *** Joins: pjb (~pjb@user/pjb)
[12:32:59] *** Quits: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:38:17] *** Quits: Jing_ (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[12:38:52] *** Joins: Jing (~hedgehog@115.207.46.97)
[12:44:35] *** Joins: s-liao (~s-liao@101.86.99.70)
[12:46:53] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:07:33] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[13:21:42] <mzan> beach: apart these "cosmetic" details, sadly: 1) the library series was not able to execute correctly the same code, but written in a slightly different way; 2) my code is not 100% stream-oriented, because it can not process a file of 30Mb. It is ok for 16Kb
[13:29:05] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 256 seconds)
[13:29:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[13:35:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:17] *** Joins: etiago (~etiago@user/etiago)
[13:35:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:36:32] *** Lord_of_Life_ is now known as Lord_of_Life
[13:43:06] <beach> mzan: I did not study your code enough to understand what it does, nor the problem to understand what the code is supposed to do.
[13:45:21] *** Joins: semz_ (~none@user/semz)
[13:45:24] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[13:47:22] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[13:55:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:00:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:09:20] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:09:35] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[14:11:07] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:32:33] *** Joins: treflip (~user@95.79.32.99)
[14:39:11] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:39:47] *** Joins: amb007 (~a_bakic@139.14.23.93.rev.sfr.net)
[14:45:36] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:47:07] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:54:58] *** Quits: amb007 (~a_bakic@139.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:56:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:57:28] *** Joins: heisig (~heisig@p200300cbcf0ceb00d4359ddbac2c69fd.dip0.t-ipconnect.de)
[15:02:11] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[15:10:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:18:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[15:21:02] *** Joins: sbodin (~Android@188.170.198.130)
[15:30:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:32:32] *** Quits: heisig (~heisig@p200300cbcf0ceb00d4359ddbac2c69fd.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:33:28] *** Joins: heisig (~heisig@p200300cbcf15540049ad9c2cf529996d.dip0.t-ipconnect.de)
[15:40:13] *** Joins: ldb (~user@user/ldb)
[15:40:16] <ldb> sup
[15:43:06] <jcowan> hayley: a classic hacque for Unicode char classes is to keep a sorted sequence of ranges as a vector.  Contains is binary search, where the index mod 2 tells you if the char is in  or out.  Union and intersection are O(number of ranges), and complement is O(1)
[15:44:20] <hayley> Interesting. I'm not sure if O(log n) for contains would be okay, but I've set myself unreasonably high standards for scanning performance so far, honestly.
[15:44:27] <jcowan> if the range excludes NUL and O(n) otherwise.
[15:45:03] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:45:22] <Xach> abrahms: you want the old 4th element? or the list?
[15:45:29] <Xach> if the former, i love SHIFTF for that!
[15:46:17] <hayley> I already have such a sorted sequence to represent sets, but I don't want to give the branch predictor a hard time. I guess I can do a binary search of fixed length branch-free though.
[15:47:34] <jcowan> If truly fixed it will be large; if fixed up to a bound it's more feasible.
[15:47:53] <jcowan> consider the set of every other codepoint.
[15:48:18] <hayley> Sure. Then I would bail out to a bitmap.
[15:48:55] <hayley> ...or perhaps my two level table idea, which would allow reusing the same #*0101... subvector for each group of characters.
[15:50:08] <hayley> From memory, ALPHANUMERICP had some 550 ranges or so, thus 10 iterations of binary search. Not sure if that is too many.
[15:51:10] *** Joins: unyu (~pyon@user/pyon)
[15:53:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:59:52] *** Quits: sbodin (~Android@188.170.198.130) (Quit: -a- IRC for Android 2.1.59)
[16:00:53] *** Quits: heisig (~heisig@p200300cbcf15540049ad9c2cf529996d.dip0.t-ipconnect.de) (Quit: Leaving)
[16:01:03] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[16:04:23] <pdietz> The distribution of inputs is likely highly nonuniform in practice, which would speed things up.
[16:07:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[16:40:39] *** Parts: dmgk (~dmgk@user/dmgk) ()
[16:43:07] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 252 seconds)
[16:49:41] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[16:50:23] <pjb> hayley: perhaps not, when dealing with random unicode characters. it can be optimized for the iso-8859-1 case.  But instead of using a binary search, perhaps one could have an indexed search. Are those ranges very non-uniformly distributed?
[17:11:49] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[17:16:33] *** Joins: pve (~pve@188-67-23-226.bb.dnainternet.fi)
[17:16:34] *** Joins: etiago (~etiago@user/etiago)
[17:34:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:49:32] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[18:03:10] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[18:04:12] *** Joins: treflip (~user@95.79.32.99)
[18:20:13] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:24:02] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:d9f:6aa2:37a5:9073)
[18:27:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11d2:ff0:d9f:6aa2:37a5:9073) (Ping timeout: 250 seconds)
[18:27:37] *** Joins: Bike (~Glossina@71.69.170.70)
[18:27:37] *** ChanServ sets mode: +o Bike
[18:32:00] <mzan> beach: about my assertion "my code is not 100% stream-oriented, because it can not process a file of 30Mb. It is ok for 16Kb"
[18:32:20] <mzan> it is probably wrong, because I noticed that there are ways for instructing series to optimize the code.
[18:32:24] <mzan> So I will try them.
[18:32:42] <mzan> series == the series library
[18:44:31] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[18:47:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:49:12] *** Joins: aeth (~aeth@user/aeth)
[18:51:31] *** Quits: prxq (~quassel@x4dbd88a7.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[18:51:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:59:53] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 252 seconds)
[19:00:45] *** Joins: etiago (~etiago@user/etiago)
[19:05:30] *** Quits: Jing (~hedgehog@115.207.46.97) (Quit: Textual IRC Client: www.textualapp.com)
[19:09:23] *** Joins: tyson2` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:09:35] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:13:05] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 252 seconds)
[19:13:24] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[19:13:38] *** Quits: tyson2` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[19:17:51] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[19:18:06] *** Joins: tyson2`` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:26:17] *** Quits: tyson2`` (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[19:27:23] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[19:41:44] *** Quits: phadthai (mmondor@user/phadthai) (Ping timeout: 260 seconds)
[19:43:05] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:43:20] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 252 seconds)
[19:48:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:50:37] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[19:50:52] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[20:13:02] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[20:14:37] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:17:01] *** Parts: abrahms (~user@75.164.87.141) (ERC (IRC client for Emacs 27.2))
[20:21:29] <_73> In SBCL when I try to compile my file with a `defpackage` clause that has an `import-from #:alexandria ...` clause I get an error "The name ALEXANDRIA does not designate any package". If I go to the repl and `(ql:quickload "alexandria")` then recompile the file everything works fine. Should I ensure that my libraries are loaded by editing my `~/.sbclrc` file, or is their a different way to load my dependencies? I have made a `.asd`
[20:21:29] <_73> for my project that mentions my dependencies but I don't know how to tell SBCL about it.
[20:22:37] <_73> I am using sly in emacs.
[20:22:43] <bremner> isn't it enough to put it in the same directory as the file containing defpackage?
[20:22:58] <Bike> _73: packages are orthogonal to dependency resolution. to tell asdf about dependencies you should load your system via ASDF.
[20:23:28] <bremner> oh, duh, nvm me.
[20:25:52] *** Joins: makomo (~makomo@user/makomo)
[20:41:43] <pjb> _73: you should ensure that your dependencies are loaded, indeed, but better do it by writing an asd file rather than in you rc file.
[20:41:46] <beach> _73: In your ASDF system definition, put :depends-on (#:alexandria), then load your system with (asdf:load-system '#:<your-system-name>)
[20:43:54] <White_Flame> if you put a symlink to your project directory from ~/quicklisp/local-projects/, then you can (ql:quickload "your-system") as well
[20:44:31] <beach> Am I the only one who finds it strange when people who are given advice don't even acknowledge having seen it?
[20:44:58] <White_Flame> eh, I get into working on things and forget to check IRC, too
[20:45:20] <beach> Like "I don't understand", "OK, let me try that", "What do you mean 'package'?".
[20:46:14] <Bike> well, if they don't say anything else they could just be off to lunch for a bit or something
[20:46:34] *** Joins: Inline (~Inline@aftr-37-201-240-43.unity-media.net)
[20:46:36] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:46:52] <beach> White_Flame: Sure, if it takes more than a few minutes to get any reaction, but if the advice is given almost immediately, one would think they would stick around.
[20:47:04] <pjb> Well, the first answer was given 16 seconds after the last message.
[20:47:20] <_73> I have been here the entire time struggling through docs: When I try `(asdf:load-system :my-system)` I get an error `Component :MY-SYSTEM not found`. I understand from the docs that the problem is I do not have my code in a standard location like `~/common-lisp`. I am trying to modify the `asdf:*central-registry*` but can't seem to get it right.
[20:47:21] <pjb> I think people can wait 30 seconds for an answer on irc.  The time to type it!
[20:47:23] <beach> But my question was answered.  I seem to be the only one.
[20:47:56] <White_Flame> _73: you should just use the quicklisp portion of it, as it makes it easier
[20:48:20] <White_Flame> QL wraps ASDF's functionality and adds download and a standard path (~/quicklisp/local-projects/)
[20:48:51] <pjb> _73: modifying asdf:*central-registry* is one way. Another is to put it in i~/quicklisp/local-projects/ (symlinks don't work with all implementations) another is to set ql:*local-project-directories* (similar to asdf:*central-registry*)
[20:49:24] <pjb> _73: (push #P"/path/to/the/directory/where/you/put/your/asd/file/" #| <--note the final / |# asdf:*central-registry*)
[20:49:52] <pjb> _73: the asd file should have the same name as the system (it's possible to be different, but it's easier if it's the same, without the ".asd" of course.
[20:49:54] * _73 goes to try this and will report back
[20:50:40] <pjb> beach: you're not the only one, but we can't do much about, so…
[20:50:58] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:51:05] <pjb> let's rejoice that we don't have martians on irc yet…
[20:51:22] *** Joins: phadthai (mmondor@user/phadthai)
[20:51:43] *** Quits: Inline (~Inline@aftr-37-201-240-43.unity-media.net) (Ping timeout: 256 seconds)
[20:55:57] *** Joins: Oladon (~olad@98.43.81.226)
[20:56:18] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[20:56:45] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[20:56:48] <Bike> _73: if your asd is in /home/seventythree/code/my-system/my-system.asd, you want (push "/home/seventythree/code/my-system/" asdf:*central-registry*)
[20:59:29] <Bike> _73: if you're using quicklisp, another possibility is to put a symlink to my-system/ in quicklisp/local-projects, and then make sure it's synced with (ql:register-local-projects)
[21:00:57] <_73> ohh I see. I was symlinking the asd file instead of the projects top level dir.
[21:05:42] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:05:43] *** Quits: phadthai (mmondor@user/phadthai) (Read error: Connection reset by peer)
[21:05:51] <Xach> that will work also.
[21:06:17] *** Joins: phadthai (~mmondor@user/phadthai)
[21:08:42] <_73> I have succeeded. Thanks for the help.
[21:10:07] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:13:14] *** Joins: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com)
[21:15:54] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:16:08] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: leaving)
[21:16:39] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:18:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:18:36] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:20:03] *** Quits: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com) (Ping timeout: 256 seconds)
[21:20:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:20:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:21:04] <Catie> In C, it's possible to spawn a POSIX thread with a "detached" attribute, such that when the thread's function exits its resources are freed by the operating system; there's no need to join the thread. Is anyone aware of a way to spawn a "detached" thread in Common Lisp?
[21:22:15] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 256 seconds)
[21:22:19] <Bike> i believe bordeaux does not have detachment
[21:22:35] <Catie> Not that I've been able to find, at the very least
[21:22:40] <jackdaniel> if you are interested only in the final effect, then you could join in the finalizer
[21:23:25] <Catie> Register a finalize on the thread, all right! I'll give that a go and see if it'll work
[21:23:31] <Bike> i don't think implementations have this functionality much. clasp doesn't have it, doesn't look like sbcl does
[21:23:34] <Catie> Register a finalizer, rather
[21:24:03] <jackdaniel> I've written recently a short piece about a certain gotcha with finalizers: http://turtleware.eu/posts/Selective-waste-collection.html
[21:24:03] <Bike> you could also give the thread function an unwind-protect, maybe?
[21:24:45] <Catie> jackdaniel: Thank you, I'll give that a read
[21:24:46] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: leaving)
[21:25:09] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:25:35] *** Joins: amb007 (~a_bakic@76.149.22.93.rev.sfr.net)
[21:25:56] <Catie> Bike: the issue I run into is that you can't join a thread from within itself, and threads execute in their own dynamic environment. Originally I was hoping to make this work by signalling a condition, but none of the handlers I establish in the thread-spawning context are in effect for the thread
[21:26:23] <Bike> i meant within the function itself. like, (make-thread (lambda () (unwind-protect (do-stuff) (clean-up))))
[21:26:58] <jackdaniel> isn't this about system-reserved resources? how can you clean that up?
[21:29:37] <Catie> The system-reserved resource in this case is the thread itself. There's a limit along the lines of _POSIX_THREAD_MAX after which you get no more threads, and while it's incredibly unlikely that I'll run into that limit, ignoring it entirely just feels wrong
[21:30:14] *** Joins: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com)
[21:30:49] <Bike> ah, i see. so it can't clean itself up.
[21:31:18] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[21:31:59] <Catie> Yeah, it's a real weird one. The other idea I've got in my head is to have a dedicated thread-joining thread that responds to an asynchronous Unix-type signal and joins the thread, which would let my main loop continue uninterrupted
[21:32:24] *** Joins: yourname_ (~mfiano@li1282-157.members.linode.com)
[21:33:09] <Catie> jackdaniel: Wouldn't establishing a finalizer on a thread object that calls join-thread on the object itself cause a cycle?
[21:33:13] *** Quits: yourname_ (~mfiano@li1282-157.members.linode.com) (Client Quit)
[21:33:22] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:33:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:33:34] <Catie> I suppose I could put it in a real lightweight struct or something
[21:33:55] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:34:00] <Bike> as he describes in the post, on some implementations (but not all, so there's a complication) the finalizer function receives the object as an argument
[21:34:09] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[21:34:14] <jackdaniel> some implementations (most notably _not_ sbcl and trivial-garbage) pass the object as an argument to the finalizer -this allows rehabilitation or joining the thread
[21:34:22] <Catie> Which is incredibly convenient! I just don't want to have to rely on a specific implementation
[21:34:37] *** Quits: amb007 (~a_bakic@76.149.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:35:07] <jackdaniel> well, trivial garbage is the smallest common denominator, so it will work everywhere
[21:35:07] *** Joins: amb007 (~a_bakic@151.150.22.93.rev.sfr.net)
[21:35:37] <jackdaniel> the trick is to register a finalizer that closes over the resource for the single object that wraps over it (i.e (list resource))
[21:35:52] <Guest74> so how do you find out what the max thread limit is and how close you are to it?
[21:36:14] <Catie> Probably by writing a C program. You could inspect your system headers too
[21:36:33] <jackdaniel> (let ((thread my-thread) (wrapper (list my-thread))) (set-finalizer wrapper (lambda () (join-thread thread))))
[21:36:44] <Guest74> system headers it is.  I don't C.
[21:37:11] *** Quits: CrashTestDummy2 (~CrashTest@cpe-24-168-60-220.hvc.res.rr.com) (Ping timeout: 252 seconds)
[21:37:23] <jackdaniel> that said, you will probably need to take care to keep wrapper alive until the thread is finished, I'm not sure how blocking finalizers behave in implementations
[21:38:20] <Catie> Guest74: Under FreeBSD it's aliased to __ULONG_MAX, which is probably 2^64 (but I don't feel like looking through sys/types.h)
[21:38:48] <Guest74> I just read it depends on how much memory and stack size you have on linux
[21:39:02] <Catie> jackdaniel: If the wrapper object is referencing an alive thread, could it still be garbage collected?
[21:39:28] <jackdaniel> if nothing is referencing the wrapper - sure, why not?
[21:40:26] <Guest74> (os:shell "cat /proc/sys/kernel/threads-max") works. 62424 on my machine.  Probably not a problem for my purposes.
[21:40:31] <Catie> Guest74: I think PTHREAD_THREADS_MAX is compile-time, but there may be a separate runtime tunable that's less than or equal to it
[21:40:42] <jackdaniel> passing the wrapper to the thread's environment should suffice for that purpose I guess (because when the thread finishes then it will be referenced no more)
[21:41:36] <random-nick> wouldn't the implementation of detached threads just be calling the pthread function which detaches the thread on the pthread? the thread would have to unwind all the way (and run the handlers) in order to exit anyway, right?
[21:42:03] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: leaving)
[21:42:19] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:42:50] <jackdaniel> fwiw ecl creates them in detached state
[21:45:38] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Client Quit)
[21:45:47] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:46:59] <Bike> huh. kind of seems like a good idea for lisp threads generally?
[21:47:03] <Guest74> interesting max threads is determined by real memory, max threads per process by virtual memory on linux.
[21:47:21] <Bike> we can just have a separate thread object that keeps whatever info we want that we garbage collect normally
[21:47:56] <Catie> Bike: I agree! I'm looking through the SBCL source to see if they do the same
[21:48:16] <jackdaniel> yes, I didn't check on other implementaitons, but I have never actually thought that implementation might leave some linger resources when not joined
[21:48:37] <jackdaniel> it is, well, possible (and not probable)
[21:49:35] <Catie> The SBCL thread struct has a result slot, which indicates to me that the thread is joined by the runtime somehow and the result is collected, and that calling the sb-thread join function just returns that value
[21:49:55] <jackdaniel> otoh I think that I remember that sbcl doesn't care for closing streams taht are garbage collected (and such leak may end with no more descriptors)
[21:50:03] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Client Quit)
[21:50:13] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:51:22] <Guest74> I think they fixed that?  Or I fixed my code.  I used to run into that a lot.
[21:51:45] <jackdaniel> technically it is not a bug
[21:52:37] <jackdaniel> you could have copied the file descriptor by using some internals, closing it on gc may give strange results (but well, you've copied it by using some internals :)
[21:52:52] <jackdaniel> figurative "you"
[21:57:26] <Catie> Okay, so working backwards a bit, SBCL has a global variable *joinable-threads* and a function join-pthread-joinables. When I run a thread and let it exit, it resides in *joinable-threads*. When I trigger a garbage collection, the thread is no longer in *joinable-threads*. So maybe SBCL does the convenient thing?
[21:59:47] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[22:01:26] <Devon> Which implementations Garbage Collect Truly Worthless Atoms?  (GCTWA)
[22:03:10] <random-nick> Catie: they also seem to get joined in allocate-thread-memory
[22:05:44] <Catie> Ah, sure enough! I missed it because pauseless-threadstart isn't in my *features* anymore, so I skipped right over it
[22:06:35] <frgo> Oh-kay - I just booked my flights to Porto to ELS2022. Hope to see many of you there ...
[22:07:16] <jackdaniel> let's hope they won't have borders closed at the time
[22:07:59] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:08:06] <frgo> True words. I hope that by March we're out of of wave 4 and not yet into wave 5 ...
[22:08:42] <Guest74> omicron will either be the end, or a new start.
[22:10:55] <frgo> In my day job I work for the German Red Cross. I hope, really hope, that Omicron is covered with the current vaccines. Having all red flags on ICU bed availability in a 100 km radius around Stuttgart is no fun.
[22:11:33] <Catie> Sakes alive
[22:11:49] <rotateq> frgo: yes they start now giving more pressure to the situation
[22:14:05] <frgo> Catie: Heh - never heard "Sakes alive" before. But, yeah...
[22:14:45] <pdietz> From what I hear, if you have the mRNA vaccine doses and the booster they're pretty effective against omicron.
[22:15:15] <pdietz> Booster takes a month to reach full effect, mind you.
[22:15:35] <Guest74> As far as I know, there has been so far 0 hospitalizations for omicron.
[22:15:53] <jackdaniel> even if you have superman immune system and there is no kryptonite around, when borders are closed then they are closed
[22:16:04] <pdietz> It's looking nasty in South Africa.  In particular it looks much worse than previous variants for children under 2.
[22:16:28] <frgo> That's what we see - so far (it's too early to tell really). And that's why we don't mind to booster a few weeks before the 6 months period.
[22:16:34] <frgo> But yeah, back to Lisp ...
[22:17:50] <Guest74> pdietz: they still don't know if that's omicron or delta.
[22:18:12] <Guest74> We are having a lot of kids here, canada, with delta.
[22:18:29] <pdietz> I think 2/3 of the cases in SA right now are omicron.
[22:21:19] <pdietz> #\GREEK_SMALL_LETTER_OMICRON
[22:23:23] <Guest74> in more happy offtopic news. https://oskarstalberg.com/Townscaper/
[22:30:15] *** Quits: amb007 (~a_bakic@151.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:30:30] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:30:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:d9f:6aa2:37a5:9073) (Ping timeout: 252 seconds)
[22:31:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:34:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[22:36:03] *** Joins: aeth (~aeth@user/aeth)
[22:36:46] <random-nick> am I missing something or does CFFI not have a builtin type for fixed-size arrays?
[22:37:19] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[22:37:59] <frgo> random-nick: What's the C definition look like you want to map to Lisp?
[22:37:59] <Catie> random-nick: Can you not declare it as (:array :type size)?
[22:40:09] <random-nick> Catie: I can't find :array in the CFFI manual
[22:40:54] <random-nick> frgo: e.g. int foo(int bar[3])
[22:41:18] <random-nick> if my understanding of the C ABI is correct, foo would be passed a pointer?
[22:41:25] <Catie> It's something I used in foreign-array-to-lisp
[22:44:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:45:49] <frgo> random-nick: As Catie pointed out:
[22:45:53] <frgo> (cffi:defcfun ("foo" foo) :int
[22:45:54] <frgo>   (bar (:array :int 3)))
[22:49:33] *** Joins: robin__ (~robin@user/terpri)
[22:49:35] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[22:50:55] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:51:16] <frgo> random-nick: There's also https://www.cliki.net/WAAF-CFFI
[22:54:15] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[22:57:53] * attila_lendvai is annoyed by the covid discussion, especially when people echo what they say on TV, as opposed to first-hand experience/info
[23:02:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:04:49] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[23:06:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:16:03] <_73> from the SBCL repl, what is the way I can unqualify a library function? For example I would like to be able to use the symbol `alexandria:compose` as just `compose`. I can do this fine in a package using defpackages `:import-from`.
[23:17:16] <Catie> You can just (import alexandria:compose)
[23:17:38] <_73> ok thanks
[23:17:38] <Alfr> _73, the repl starts up in the package common-lisp-user, you could use IMPORT.
[23:18:04] <Catie> Or rather, (import 'alexandria:compose)
[23:19:07] <Alfr> _73, you also may want to think about creating your own package for repl use.
[23:20:13] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[23:20:46] <_73> Alfr: I would want this so I could have my own custom default toolset?
[23:21:27] *** Joins: paule32 (~paule32@user/paule32)
[23:25:34] <Alfr> _73, or to make your repl habits less implementation dependent, because implementations make symbols accessible in cl-user which are not in cl.
[23:25:51] <Bike> clhs use-package
[23:25:51] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_use_pk.htm
[23:25:53] <Bike> also available
[23:27:03] <Guest74> is there a way to make a lisp vector from some mmap'd area?
[23:29:29] <Catie> Guest74: My understanding is that cffi:foreign-array-to-lisp copies elements from the pointer you hand it
[23:29:45] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:30:21] <Catie> Frustratingly, I don't think the Lisp array acts as an alias for the C array
[23:30:23] <Guest74> yeah, I'm looking for a direct access method.  Sort of reverse static-vectors.
[23:32:05] <Catie> That would be really nice, I agree. I don't know of anything in CFFI that can do that, but I have no idea about any other FFI packages
[23:32:07] <Guest74> though WAAF looks interesting.  copying isn't so bad, it's basically doublebuffering.  But direct access would be nice.
[23:32:36] <Guest74> would be interesting to try some scan line chasing.
[23:36:29] *** robin__ is now known as robin
[23:37:49] <yitzi> Guest74: are you looking for mem-aref?
[23:40:34] <Guest74> I don't know.  I'm looking to have a lisp array directly mapped to a mmap'd region.
[23:40:53] <Guest74> where I receive the address from some ioctl.
[23:42:09] <Guest74> doesn't look like it.
[23:42:23] <yitzi> Well, with mem-aref you can read the individual elements directly. https://common-lisp.net/project/cffi/manual/cffi-manual.html#mem_002dref
[23:42:45] <Guest74> I may be wrong, but I assume writing individual bytes to 'foreign memory' would be slower than just copying.
[23:43:17] <Guest74> yes, I read.  That doesn't look like what I want.
[23:46:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[23:47:03] *** Joins: nature (~nature@45.32.235.173)
[23:47:27] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:49:07] *** Joins: ebrasca (~user@librepanther.com)
[23:53:13] <Bike> that's probably not possible, because lisp arrays usually have header data that wouldn't be in foreign controlled memory.
[23:54:07] *** Joins: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca)
[23:55:25] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 252 seconds)
[23:55:38] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[23:55:58] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[23:56:36] <_death> may be interested in https://github.com/death/marray
[23:56:45] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:58:02] <varjag> so between the two mmap cl libraries, which one would folks prefer
[23:59:21] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
