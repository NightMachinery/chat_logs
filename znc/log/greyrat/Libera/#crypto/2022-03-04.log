[00:08:50] <sarnold> https://datatracker.ietf.org/doc/html/draft-afrvrd-dnsop-stateful-hbs-for-dnssec-00 (thanks Peng :)
[00:14:50] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[00:20:34] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[00:25:11] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:29:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[00:33:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:39:07] *** Joins: ses (uid38151@id-38151.hampstead.irccloud.com)
[00:40:37] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:41:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:49:11] *** Joins: sobkas (~sobkas@95.175.17.217)
[00:56:27] *** Joins: gabriel1_ (~gabriel1@37.173.213.27)
[00:59:40] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 272 seconds)
[01:04:38] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 250 seconds)
[01:07:26] *** Joins: Maxattax97 (~max@2600:1700:68c0:3bb0::43)
[01:13:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:29:52] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:32:59] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Ping timeout: 256 seconds)
[01:33:56] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[01:38:54] *** Joins: llorllale (~llorllale@198.98.119.85)
[01:48:27] *** Quits: Alexthek1d (~Alexthek1@p5b3ae657.dip0.t-ipconnect.de) (Quit: Leaving)
[01:50:46] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:03:39] *** Joins: EmmyNoether (~EmmyNoeth@yoke.ch0wn.org)
[02:04:54] *** Joins: Nebraskka_ (~Nebraskka@user/nebraskka)
[02:05:14] *** Server sets mode: +nt 
[02:05:32] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 272 seconds)
[02:06:10] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (Ping timeout: 272 seconds)
[02:07:09] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:07:48] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[02:11:47] *** Nebraskka_ is now known as Nebraskka
[02:12:19] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[02:14:18] *** Quits: Maxattax97 (~max@2600:1700:68c0:3bb0::43) (Remote host closed the connection)
[02:15:48] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:17:50] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:18:18] *** Joins: skaro (~skaro@2600:8807:180:80:a866:c0bb:2054:d0cd)
[02:26:15] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 256 seconds)
[02:26:19] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:29:50] *** Quits: xx (~xx@user/xx) (Ping timeout: 260 seconds)
[02:35:26] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:35:56] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 272 seconds)
[02:40:54] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[02:48:05] *** Joins: euidzero_ (~euidzero@158.101.10.150)
[02:49:01] *** Quits: euidzero (~euidzero@158.101.10.150) (Ping timeout: 268 seconds)
[02:49:22] *** Joins: ua_ (~ua@public-gprs266162.centertel.pl)
[02:51:34] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Read error: Connection reset by peer)
[02:51:42] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[02:56:57] *** Joins: fltrz (~ik@109.236.138.239)
[02:58:23] <fltrz> Who was the cryptographer that famously lost his private key, and was/is still occasionally receiving emails, or can no longer open his old emails? I was thinking it was perhaps Bruce Schneier or perhaps Zimmermann from PGP. I think I read it on Wikipedia but I can no longer find this factoid.
[03:00:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:00:54] <fltrz> it might have been an implementer or a cryptographer
[03:01:15] <maroon> dunno about that, but i heard there's some famous guys who still have pgp or gpg keys out there that are protected only by sha1, and supposedly are ripe for trolling
[03:02:07] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Read error: Connection reset by peer)
[03:02:46] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[03:06:41] <cvmn> trying to understand this:  https://vitalik.ca/general/2017/11/09/starks_part_1.html
[03:07:13] <cvmn> i see why f(x) is a step forward.  but why is C(x) a step forward?  is it to leak even less information, and make the output only zero or non-zero?
[03:08:11] *** Quits: ua_ (~ua@public-gprs266162.centertel.pl) (Ping timeout: 256 seconds)
[03:09:15] <cvmn> next question is:  why is he using a merkle tree?
[03:19:49] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[03:20:45] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[03:22:09] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[03:36:44] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:37:59] *** Joins: Wulf (~Wulf@user/wulf)
[03:44:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:00:48] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[04:03:21] <aweinstock> cvmn: it's not clear what you mean by "a step forward", the part where a computation is broken down into steps to verify isn't until part 3 of that blog series
[04:08:00] <aweinstock> the merkle tree is used to commit to N polynomial evaluations such that the verifier can verify that the polynomial meets the constraint with only log_2(N) queries
[04:11:34] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com)
[04:12:37] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:12:48] <cvmn> i guess i'm confused about earlier stages:  P(x).  what makes the verifier know if P's output (i.e. P(x)) is the true answer for x?  the verified doesn't know x.
[04:13:21] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[04:15:57] *** Quits: thelounge64 (~thelounge@47.31.197.42) (Ping timeout: 240 seconds)
[04:20:43] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[04:28:59] *** Quits: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com) (Quit: Leaving)
[04:29:10] <int-e> maroon: found  third one, http://paste.debian.net/1232922/ ...it ends in a 3, breaking the 7/B streak.
[04:29:43] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[04:32:19] *** Joins: hg (~halosghos@user/halosghost)
[04:35:01] <maroon> int-e, i've only seen 1 of these, and this is the same as the https://paste.debian.net/1232815/ you pasted yesterday
[04:35:28] <int-e> huh
[04:36:20] <maroon> and yesterday's list of 42 at 512bits, where there were zero of them having order=1q at both g=2 and g=5, so i suspect that it's throwing those 1/6th of safe primes away
[04:36:57] <int-e> Oh, darn, I don't get them in order when I just cat the files
[04:37:33] <int-e> maroon: https://paste.debian.net/1232923/ is more meaningful, and has the correct order
[04:37:37] <maroon> you can confirm that by giving it a tiny range holding this 1536-bit safe prime, which does not have order=2q for any generator smaller than g=31 https://datatracker.ietf.org/doc/html/rfc3526#page-3
[04:37:47] <int-e> (you can get the ... from the other paste if you need it)
[04:38:06] <maroon> so if im right, the range will end up disgorging somewhere around 35 safe primes instead of 43
[04:38:20] <int-e> so the B and 7 are new, and break the *non*-7/B streak?
[04:39:41] <maroon> yes, but so far the streak is intact where there's no safe prime having order=2q only by having g > 5
[04:40:44] <int-e> At this rate I'm headed for ~10 instead of ~40 primes, which irritates me.
[04:43:00] <maroon> i agree with the math that there should be 43.97 in there
[04:43:23] <TunnelJ> anyone recommend any US based infosec accelerators that aren't mach37 ? 
[04:45:41] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Read error: Connection reset by peer)
[04:45:48] *** Joins: linearcannon (~linear_ca@50.35.78.163)
[04:46:14] <int-e> maroon: but you're right about it throwing away candidates where neither 2 nor 5 generate the whole group: https://github.com/openssh/openssh-portable/blob/master/moduli.c#L712-L724
[04:48:44] <int-e> But yeah, that should be a factor of 5/6.
[04:49:30] <int-e> (generator_wanted is zero for the normal screening pipeline)
[04:50:04] <maroon> the range is 2^31 or 2^32?
[04:51:27] *** Joins: moose (~moose@user/moose)
[04:53:55] <int-e> Huh. It looks like it's actually 2^33... https://paste.debian.net/1232924/ is from the candidates file... not that this seems to be q rather than p, and the difference is 2^32 - 528226
[04:55:15] <int-e> And I'm about 1/4 done and have 3 safe primes. Something feels off.
[04:57:30] <maroon> so i guess it's 2^32 for the q range, and 2^33 for the p range
[04:58:35] <int-e> But this changes the estimate from 44 to 88.
[04:58:55] <int-e> Or am I using the estimate wrong?
[04:59:18] <int-e> Ah. I am.
[04:59:31] *** Quits: TunnelJ (~TunnelJ@64.201.243.34) (Quit: Quit)
[04:59:42] <int-e> I guess it's nice to have two mistakes actually cancel each other out for once.
[05:01:10] <int-e> (So since the estimate is for Sophy Germanin primes... which are the q-s... and the range for those is 2^32, we expect about 44 results in the end. Times 5/6 because only 2 and 5 are considered as potential generators.)
[05:03:26] <int-e> maroon: Oh, I can actually see that factor. I'm processing batches of size 1000 and getting outputs like this: Fri Mar  4 02:30:07 2022 Found 0 safe primes of 833 candidates in 1206 seconds
[05:05:27] <maroon> so, your mod-pow is much faster than mine, but discarding 1/6th of candidates made yours look a little faster than it really was
[05:06:04] <maroon> if rust is a bad choice, is there a good choice for modpow code to call from c#? because the builtin biginteger.modpow() is horribly slow
[05:06:06] <int-e> maroon: (the actual number fluctuates; examples are 845, 817, 847, 844, 824, 819, 833, 851... that's a good match for 5/6*1000 = 833.3333...)
[05:06:25] <maroon> the rust code im using is actually about 5-6x faster than the builtin biginteger function, and it's still about a dozen times slower than yours
[05:07:05] <int-e> maroon: the modpow test was really just a *single* modpow using gmp. But yeah, the openssl code benefits from the artificial 20% speedup.
[05:08:04] <maroon> int-e, that's same as mine. im doing a single fermat test against p if it passes the trial divisions, and only rarely need to test q also
[05:08:59] <sarnold> maroon: this is a bit old now but used to be a reliable source for rust performance improvements https://gist.github.com/jFransham/369a86eff00e5f280ed25121454acec1
[05:09:11] <maroon> so this is basically calling openssl as a dll, to perform the mod-exp?
[05:10:20] <sarnold> maroon: and unless you specify the target cpu directly, I think the compiler will restrict itself pretty severely -- you might want to try doing a target-cpu=native https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html
[05:11:34] <int-e> maroon: "this"? I used gmp as bound by Haskell (GHC).
[05:12:06] <maroon> i meant this==SSH
[05:15:28] <int-e> Ah. That uses BN_is_prime_ex to do most of the work, https://manpages.debian.org/unstable/libssl-doc/BN_is_prime_ex.3ssl.en.html
[05:15:48] <int-e> (schedule: 1 test for q, then test p thoroughly, then test q thoroughly)
[05:18:38] <maroon> i dont trust the openssl isiprime, because they have a tiny trial division table. i was thinking maybe it would help to make an external call only to the function doing the modular exponentiation, especially if it's not wasting time being constant-time
[05:19:39] <maroon> also, openssl's isprime combines tests for normal primes with test for safe primes, so it has branch code inside the interior loop that's constantly checking whether it was called to check normals or safe's
[05:22:09] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:22:10] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:22:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:22:24] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[05:23:58] <int-e> maroon: that's in the prime generation code, not in the primaly testing code.
[05:25:17] <maroon> ok right. but i would be satisfied in just having a fast fermat test, because that's where it seems that im spending 99.9% of my time
[05:25:22] <int-e> the BN_is_prime_ex function ends up in https://github.com/openssl/openssl/blob/2cc7c9b6981d683711e76c3483f813701b686eb9/crypto/bn/bn_prime.c#L337 fairly directly (after skipping the trial division stage and a few more trivial checks)
[05:27:29] <int-e> enhanced is 0, so we reach line 405 where it will spend most of its time (on modular exponentiation, just like the Fermat test), I think.
[05:27:30] *** Quits: linearcannon (~linear_ca@50.35.78.163) (Read error: Connection reset by peer)
[05:27:46] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[05:28:10] <maroon> id prefer a single fermat test, rather than doing 64 rounds against p when 99% of the time q is composite
[05:28:34] <int-e> That's why it does /one/ test for q first.
[05:28:59] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:29:00] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:29:24] <int-e> One MR test that is, which subsumes a Fermat test, at approximately the same cost.
[05:38:39] <int-e> I think the screening implementation really looks good from a high level perspective on performance... if there are improvements to be found it'll be in the low level parts (modular multiplication/exponentiation).
[05:39:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[05:39:38] <int-e> (And the fact that it only checks for 2 and 5 as generators is a bit sad. Especially when we'd be happy to use a subgroup of order q instead.)
[05:40:47] <int-e> (But this check is early in the screening pipeline and cheap, so it doesn't really matter for performance.)
[05:44:24] <int-e> maroon: https://paste.debian.net/1232926/
[05:46:34] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:49:42] <maroon> for my tests, i dont even generate q except for the rare cases where p passes the fermat test. i can do the trial divisions without knowing 'q', by just testing if the remainder mod p is 0 or 1
[05:49:50] <maroon> sorry remainder p mod smallprime
[05:52:09] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[05:52:57] <maroon> i assumed the desired order of q/2q is configurable, it this source code shows it's hardcoded
[05:53:05] <int-e> The reason why there's no trial division in that screening is that it's already done (well, up to 2^32).
[05:54:25] *** Joins: Sofia (~sofia@user/sofia)
[05:54:25] <maroon> i guess they test 'q' first because that's 1 less loop in the M-R round
[05:55:18] <int-e> naively... it shouldn't matter which one you test first
[05:55:29] <int-e> what matters is that you don't test it twice before the other one
[05:56:11] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[05:56:19] <maroon> well when MR does s*2^d, the d is smaller for q than for p, so it's 1 fewer 'fermat' tests in the MR round#1
[05:57:42] <int-e> q is smaller, d is larger, so s is smaller :P
[05:58:14] <int-e> But the difference between 16381 (say) squarings and 16383 squarings... is small.
[05:59:41] <int-e> maybe there's another effect from being a bit further away from 2^16384 (for example, you can add two numbers that are reduced modulo q without overflowing into the next word)
[06:00:19] <int-e> "a bit" -- not an intentional pun, bit it does work.
[06:00:23] <int-e> *but
[06:00:58] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[06:00:59] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:03:21] <int-e> (FWIW, the sieving can probably be sped up fairly easily, but it's not the bottleneck.)
[06:03:29] <maroon> i meant that i thought MR did a separate test for each value of d, and d is 1 loop smaller for q
[06:05:14] <int-e> it's just up to (d-1) squarings and comparisons, I think.
[06:05:23] <int-e> not full modular exponentiations
[06:05:49] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:05:49] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:06:11] <int-e> note that g^(2^i s) = (g^s)^(2^i), so you can start with g^s and then square to increment i.
[06:06:57] <int-e> And then you compare with -1 each time (and with 1 the first time)
[06:07:10] <maroon> ah of course
[06:14:42] <maroon> is SSH just designed so only a few g are accepted? every prime has *some* value for g that would give order 2q, you'd just have to find it
[06:14:53] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 256 seconds)
[06:18:21] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[06:26:04] <caveman> any nice online site where one can enc/dec text?
[06:26:09] <caveman> javascript?
[06:26:37] <sarnold> https://gchq.github.io/CyberChef/
[06:29:03] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 256 seconds)
[06:29:39] <caveman> i'm looking for a friendly site.
[06:30:13] <sarnold> what could be friendlier than her majesty's intelligence agency?
[06:35:09] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[06:43:18] <hg> caveman: are you looking for enc/dec via a particular cipher, or just anything?
[06:43:32] <hg> (google instant answers supports rot13 iirc)
[06:43:40] <caveman> hg: anything.
[06:43:56] <caveman> chatting with some people in some site with nasty admins that spy on their users.
[06:44:05] <caveman> i want to teach them to pass each other encrypted messages.
[06:45:15] <hg> https://igniparoustempest.github.io/Pocket-RC4/
[06:45:28] <hg> there's an interactive demo at the bottom of the page
[06:45:34] <hg> of course, pocket-rc4 isn't secure
[06:45:39] <hg> so, you konw, consider that
[06:46:21] <caveman> what about this https://the-x.cn/en-US/cryptography/Aes.aspx
[06:47:18] <hg> not familiar with it
[06:49:07] <hg> part of the reason why this is somewhat rare is that typing a passphrase into a website to encrypt text either trusts the site to not transmit that (and do it all via js), or trusts the site operator (and the stack in between you and it) to not capture and leverage your key
[06:49:53] <hg> which is worth mentioning because, if they're going to be using the site on the network with the “nasty admins”, then that might not work at all to avoid eaves-dropping
[06:53:32] <danieldg> SSL man-in-the-middle is actually quite common these days when the admin is providing the network (so, not just the admin of a random website, but say an IT department)
[06:53:50] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[06:54:12] <danieldg> but if it's just some random website's admin... maybe use another site?
[07:26:54] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:27:24] *** Joins: frost (~frost@user/frost)
[07:30:22] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[08:00:29] <hg> danieldg: I was thinking that too
[08:00:44] *** Quits: hg (~halosghos@user/halosghost) (Quit: WeeChat 3.4)
[08:02:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[08:02:11] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[08:04:25] <caveman> any powerful online demo for diffie-hellman key exchange
[08:04:27] <caveman> ?
[08:04:38] <caveman> e.g javascript, but can handle large numbers to be realistically secure?
[08:06:31] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:06:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:06:45] <int-e> . o O ( Sure, just use HTTPS and capture the resulting TCP traffic. )
[08:07:22] <caveman> i want people in a chat to talk to each other in clear text, to get their shared secret off dh
[08:07:49] *** Quits: peace-angel (uid540140@user/star1) ()
[08:07:58] <halosghost> what?
[08:08:06] <danieldg> that's not going to be secure unless all your users are security experts
[08:09:11] <caveman> so, what do you suggest?
[08:09:27] <danieldg> have you considered that your users likely already have a quite secure encryption mechanism known as a web browser with TLS support?
[08:09:32] <int-e> https://xyproblem.info/
[08:09:55] <danieldg> when connected to a trustworthy server, that is
[08:10:01] <caveman> danieldg: the chat admin is not trusty.  he spies on users.
[08:10:07] <caveman> the chat is https.
[08:10:18] <danieldg> find a chat that is trustworthy
[08:10:23] <danieldg> like, say, this one
[08:10:32] <caveman> lel.  no.  let's use dh.
[08:10:56] <caveman> i made them exchange base-64 aes encryptions.  but now they just need dh to pick a key.
[08:10:58] <danieldg> dh won't make it secure
[08:11:04] <int-e> Use Signal?
[08:11:17] <caveman> they sort of like that dishonest chat.
[08:11:58] <danieldg> so just use that chat to share memes, put all the real contents on the trustworthy chat
[08:12:04] <int-e> DisHonest = DH, hmm.
[08:12:53] <maroon> dh securely shares a key with whever made that public key, you just dunno for sure who that is
[08:13:17] <int-e> If you don't trust the chat, how do you know it's not up to your tricks and playing person in the middle?
[08:13:25] <danieldg> also dh with more than two parties is hard
[08:13:38] <caveman> dis-honest-merkle.
[08:13:44] <int-e> This all seems like seeking a complicated solution to a problem that is solved by not involving the untrusted party.
[08:14:27] <caveman> yes, but it won't hurt.  because, if the person is --himself-- a dishonest admin in disguise, then he will have his own key, and that's cool.
[08:14:47] <halosghost> int-e: perhaps I'm mis
[08:14:59] <halosghost> -remembering, but I seem to remember a time before that fancy new xyproblem page existed
[08:15:03] <halosghost> int-e: it's very handy
[08:15:09] <danieldg> caveman: a proposal that relies on dishonest people not lying is ... strange
[08:15:13] <caveman> is octave good at exponentiating with modulus?
[08:15:14] <halosghost> (when people are willing to recognize that they're engaging in X-Y
[08:15:25] <halosghost> caveman: why not try it and see?
[08:15:30] <int-e> halosghost: that's easy: .info isn't that old :)
[08:15:43] <halosghost> lol
[08:15:58] <caveman> 2^23432434 % 5 = infty.
[08:16:31] <int-e> halosghost: tbh, "XY problem" is just a polite way of saying "this is a stupid question, what is it that you *really* want to do?"
[08:16:49] <maroon> the answer is 4
[08:16:50] <halosghost> int-e: I suppose I agree
[08:17:45] <halosghost> calc handles that just fine
[08:18:02] <halosghost> though, iirc, it can only handle exponents of size 2^32 or less
[08:18:30] <halosghost> “something, something, something, phsyical limits of typical machines, something, something, something”
[08:18:38] <maroon> XY problem: you are wasting my time by trying to be coy about what you want to know, by instead asking a question that you don't really care about the solution, in the hopes that the solution is the same as what you really want to know
[08:18:47] <int-e> echo 'Mod(2,5)^23432434' | gp -q
[08:19:01] <halosghost> int-e: what's gp?
[08:19:04] <halosghost> not familair with it
[08:19:09] <halosghost> s/lair/liar/
[08:19:18] <danieldg> pari-gp, a nice calculator
[08:19:29] <maroon> well, technically 5 is a safe prime
[08:19:34] <halosghost> oh cool, it's a CAS
[08:19:56] <halosghost> wonder if I should swap out calc for it
[08:20:01] <halosghost> though, calc is quite pleasant
[08:20:17] <halosghost> (it's not for number-theoretic work though)
[08:20:43] <danieldg> I assume you mean something other than calc.exe as shipped with Windows 95?
[08:20:48] <halosghost> lol
[08:21:00] <halosghost> danieldg: http://www.isthe.com/chongo/tech/comp/calc/
[08:21:54] <halosghost> I mean, I suppose it's been used for number-theoretic work
[08:23:45] <maroon> ah the FNV guy, i thought that website seemed familiar
[08:24:24] <halosghost> FNV?
[08:24:34] <halosghost> (Fallout: New Vegas?)
[08:24:46] <maroon> FNV1a non-crypto hash function
[08:25:08] <halosghost> that makes more sense ☺
[08:25:18] <halosghost> mmm, that reminds me I need to take another look at xxhash again
[08:25:33] <int-e> maroon: also https://www.ioccc.org/judges.html
[08:26:41] <halosghost> int-e: ooh, that's fun
[08:26:45] <halosghost> didn't make that connection either
[08:29:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[08:29:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[08:30:56] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[08:38:31] *** Quits: pagios (~pagios@life.is-a.beauty) (Quit: fBNC - https://bnc4free.com)
[08:42:34] *** Joins: thelounge64 (~thelounge@157.37.141.111)
[08:43:51] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:44:57] *** Joins: Sofia (~sofia@user/sofia)
[08:45:20] *** Joins: pagios (~pagios@life.is-a.beauty)
[08:53:42] *** Joins: labrador (~labrador@user/labrador)
[09:12:16] *** Joins: thelounge643 (~thelounge@157.37.141.111)
[09:13:41] *** Quits: thelounge64 (~thelounge@157.37.141.111) (Ping timeout: 256 seconds)
[09:15:53] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[09:22:56] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:858f:1c83:7b4e:c545)
[09:23:59] *** Joins: thelounge6439 (~thelounge@157.37.141.111)
[09:24:26] *** Quits: thelounge643 (~thelounge@157.37.141.111) (Ping timeout: 272 seconds)
[09:26:23] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 252 seconds)
[09:46:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:47:32] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[09:47:41] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:47:49] *** Joins: labrador (~labrador@user/labrador)
[09:51:57] *** Joins: frost (~frost@user/frost)
[09:57:52] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:01:52] *** Quits: labrador (~labrador@user/labrador) (Remote host closed the connection)
[10:02:19] *** Joins: labrador (~labrador@user/labrador)
[10:02:28] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[10:02:40] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[10:07:47] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:07:47] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:08:23] *** Quits: gabriel1_ (~gabriel1@37.173.213.27) (Remote host closed the connection)
[10:14:03] *** Quits: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net) (Quit: Ping timeout (120 seconds))
[10:14:24] *** Joins: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net)
[10:15:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[10:15:52] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:19:45] *** Joins: frost (~frost@user/frost)
[10:33:25] *** Joins: Amadiro (~Amadiro@45.91.21.36)
[10:34:44] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[10:45:17] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c107-df80-8e8d-d75d.res6.spectrum.com) (Quit: jarthur)
[10:47:23] *** Quits: skaro (~skaro@2600:8807:180:80:a866:c0bb:2054:d0cd) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[10:57:57] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[11:08:06] *** Joins: jringstad__ (~Amadiro@45.154.138.40)
[11:09:56] *** Quits: jringstad__ (~Amadiro@45.154.138.40) (Remote host closed the connection)
[11:10:14] *** Joins: Amadiro_ (~Amadiro@45.154.138.40)
[11:11:49] *** Quits: Amadiro (~Amadiro@45.91.21.36) (Ping timeout: 256 seconds)
[11:11:58] *** Amadiro_ is now known as Amadiro
[11:12:49] *** zer0bitz_ is now known as zer0bitz
[11:18:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:32:34] *** Quits: sambauer64 (~sambauer6@5-12-118-53.residential.rdsnet.ro) (Ping timeout: 268 seconds)
[12:03:41] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[12:03:55] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[12:05:13] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:09:37] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:10:11] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:11:04] *** Joins: xx (~xx@user/xx)
[12:16:44] *** Joins: peace-angel (uid540140@user/star1)
[12:43:45] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[12:44:01] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[12:52:55] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:03:59] *** Joins: ivii (~ivan@user/ivii)
[13:38:30] *** Joins: mikp0 (~mikp0@188.164.246.218)
[13:40:58] *** Parts: mikp0 (~mikp0@188.164.246.218) ()
[13:42:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:46:50] *** Joins: Vitto (~Vitto@se-14.nat.univ-paris4.fr)
[13:47:39] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:47:40] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:48:27] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[13:59:50] *** Quits: Vitto (~Vitto@se-14.nat.univ-paris4.fr) (Remote host closed the connection)
[14:25:00] *** Quits: xx (~xx@user/xx) (Quit: xx)
[14:26:55] *** Joins: xx (~xx@user/xx)
[14:37:04] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[14:37:30] *** Joins: labrador (~labrador@user/labrador)
[15:09:12] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:41:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:43:27] *** Joins: b93 (~I@a94-132-238-173.cpe.netcabo.pt)
[15:43:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:44:04] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[15:46:23] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 256 seconds)
[15:48:55] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:48:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:54:19] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[16:03:20] *** Joins: dez (uid92154@user/dez)
[16:38:24] *** Joins: ua_ (~ua@public-gprs231422.centertel.pl)
[16:57:21] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:57:23] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[16:57:28] *** Quits: fltrz (~ik@109.236.138.239) (Quit: leaving)
[17:01:26] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[17:02:01] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:02:02] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:07:46] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[17:07:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:08:14] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[17:11:31] *** Joins: Alexthek1d (~Alexthek1@p5b3ae632.dip0.t-ipconnect.de)
[17:11:36] <Alexthek1d> hello
[17:12:52] <Alexthek1d> general question: RSA: let's say you have a  public key and private key. Is it possible to check if the private key is a valid match to the public key?
[17:13:18] <Alexthek1d> like verify(publickey,privatekey) -> True or False
[17:17:19] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:18:35] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[17:24:29] <yawkat> well, sign something with the private key, and see if it verifies.
[17:28:15] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[17:30:40] <wasamasa> or encrypt something with the public key and see whether it decrypts to the expected thing
[17:30:55] *** Quits: X-Scale (~ARM@83.223.250.236) (Ping timeout: 256 seconds)
[17:30:55] *** X-Scale` is now known as X-Scale
[17:32:04] *** Joins: Vitto (~Vitto@2a01:e0a:981:cd30:7678:27ff:fe76:21aa)
[17:33:34] <Alexthek1d> Ah okay thank you guys. Sorry for noob question :)
[17:35:20] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[17:39:25] <Alexthek1d> Another question: What is more secure? Generating a private key with "urandom" or "openssl genkey"? 
[17:39:48] <Alexthek1d> So essentially which has "more" randomness i guess?
[17:41:16] <river> urandom
[17:42:57] <duckie> It’s worth noting that they finally made urandom consistent with the other devices
[17:43:03] <duckie> i.e., it blocks
[17:45:21] *** Quits: b93 (~I@a94-132-238-173.cpe.netcabo.pt) (Ping timeout: 245 seconds)
[17:45:34] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:47:07] <Alexthek1d> thank you
[17:47:35] <Alexthek1d> i read openssl uses /dev/urandom as default when available
[17:47:55] <Alexthek1d> but u can explicitly use it with "-genkey -rand /dev/urandom"
[17:47:57] <Alexthek1d> :)
[17:48:31] <Alipha> Alexthek1d: note that the public and private keys would have the same n value. I suppose the e and d values could not be compatible with each other, but someone would have to intentionally create multiple public/private keys with the same n or something weird like that
[17:52:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:31] *** Joins: gproto23_ (~gproto23@user/gproto23)
[17:55:21] <maroon> openssl does create a .rng file containing a scratchpad of randomness, so if you create several keys and throw them away, the .rnd filesize 1024 should have plenty of entropy
[17:59:27] *** Joins: gabriel1_ (~gabriel1@37.165.138.83)
[18:00:22] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 250 seconds)
[18:05:03] <Alexthek1d> Alipha, thanks
[18:05:14] <Alexthek1d> maroon, where is this file stored?
[18:06:08] <maroon> my experience that it's stored in whatever is the output folder, and if it doesnt already exist there, it generates a warning
[18:07:44] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[18:17:04] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:24:26] *** Joins: Gravis_ (~gravis@user/gravis)
[18:24:36] *** Server sets mode: +nt 
[18:25:00] *** Joins: Platonid1s (~Wikipedis@wikimedia/Platonides)
[18:25:12] *** Quits: asalor_ (~asalor@85-70-151-113.rcd.o2.cz) (Changing host)
[18:25:12] *** Joins: asalor_ (~asalor@user/asalor)
[18:25:22] *** Joins: Brnocris1 (~spartak@user/brnocrist)
[18:25:24] *** Joins: tent4051 (~tent405@2600:1700:8150:214f::df1)
[18:25:30] *** Joins: Maxattax97 (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[18:25:50] *** Joins: _joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net)
[18:26:58] *** Joins: danie1dg (~me@user/danieldg)
[18:27:09] *** Joins: linearcannon (~linear_ca@50.35.78.163)
[18:27:40] <Alexthek1d1977> can't find the file anywhere
[18:29:52] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (*.net *.split)
[18:29:52] *** Quits: Alexthek1d (~Alexthek1@p5b3ae632.dip0.t-ipconnect.de) (*.net *.split)
[18:29:52] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (*.net *.split)
[18:29:52] *** Quits: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net) (*.net *.split)
[18:29:52] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[18:29:52] *** Quits: jdmark (~jdmark@user/jdmark) (*.net *.split)
[18:29:52] *** Quits: arooni (~arooni@li1062-244.members.linode.com) (*.net *.split)
[18:29:52] *** Quits: danieldg (~me@user/danieldg) (*.net *.split)
[18:29:52] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[18:29:52] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[18:29:52] *** Quits: Brnocrist (~spartak@user/brnocrist) (*.net *.split)
[18:29:52] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[18:29:52] *** Quits: Platonides (~Wikipedis@wikimedia/Platonides) (*.net *.split)
[18:29:52] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[18:29:52] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[18:29:53] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[18:29:53] *** Quits: asalor (~asalor@user/asalor) (*.net *.split)
[18:29:53] *** Quits: eth0p1 (~eth0p1@bacalhau.chourico.net) (*.net *.split)
[18:29:53] *** Quits: joe7057 (~joseph@wnpgmb016qw-ds01-2-119.dynamic.bellmts.net) (*.net *.split)
[18:29:53] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (*.net *.split)
[18:29:53] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (*.net *.split)
[18:29:53] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[18:29:53] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[18:29:53] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[18:29:53] *** Quits: Gravis (~gravis@user/gravis) (*.net *.split)
[18:29:53] *** Quits: tykling (~tykling@irc.tyknet.dk) (*.net *.split)
[18:29:53] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (*.net *.split)
[18:29:53] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[18:29:53] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[18:29:53] *** X-Scale` is now known as X-Scale
[18:29:53] *** platta4 is now known as platta
[18:29:53] *** Lord_of_Life_ is now known as Lord_of_Life
[18:29:54] *** noonien6 is now known as noonien
[18:29:54] *** Guyver2_ is now known as Guyver2
[18:29:57] *** abraham2 is now known as abraham
[18:30:14] *** Joins: zegalch (~zegalch@178.128.75.133)
[18:35:38] *** hayaliali is now known as alip
[18:36:12] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[18:36:27] <maroon> Alexthek1d1977, i dunno what to tell you, ever build of openssl i've tested, the file is put there in the same folder where the cert.pem is output, filename .rnd begins with a . and is filesize 1024
[18:36:34] *** Joins: _0ne (~one@user/0ne/x-2101768)
[18:36:58] *** Joins: koolazer (~koo@user/koolazer)
[18:37:39] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[18:38:02] <Alexthek1d1977> maroon, okay thanks. maybe not on my raspi :D
[18:38:15] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[18:40:39] <Alexthek1d1977> now i read that using /dev/random is even better than /dev/urandom
[18:41:19] <river> urandom is fine
[18:41:27] <ms7821> where did you read that?
[18:42:07] <Alexthek1d1977> https://www.kicksecure.com/wiki/Dev/Entropy#/dev/random_vs._/dev/urandom
[18:42:19] <halosghost> that is long out-of-date information
[18:42:39] <Alexthek1d1977> okay thanks :)
[18:43:12] <halosghost> I suppose it's possible you're running linux 1.x
[18:43:19] <halosghost> if so, then perhaps you should read the code and double-check
[18:43:32] <Alexthek1d1977> so even if i boot up a fresh linux live CD it is no problem to use urandom immediately after boot?
[18:43:33] <halosghost> (because I don't know if it was ever even reasonable advice, but it certainly isn't now)
[18:43:58] <Alexthek1d1977> or should you wait some time an open some things?
[18:45:56] *** Brnocris1 is now known as Brnocrist
[18:48:30] <Alexthek1d1977> @halosghost
[18:50:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:50:17] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[18:51:49] <ms7821> you should use get_random instead of urandom
[18:52:23] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:52:45] <ms7821> if you can't, because you're writing crypto code in bash or something, 1. reconsider your life choices 2. use urandom anyway
[18:52:54] <MacGyver> And even if it wasn't out of date, it's a complete misinterpretation of the arguments.
[18:53:09] <MacGyver> Even when it wasn't out of date, "prefer /dev/random for keys" was bullshit.
[18:53:23] <MacGyver> The argument was always "Initialize your random pools"
[18:55:20] <halosghost> ms7821: I still like fastrandom for crypto-in-shell
[18:56:24] <halosghost> ms7821: also, crypto-in-shell feels similar to HPC-in-brainfuck
[18:56:28] <halosghost> “wrong tool for the job”
[18:58:47] * Alipha uses rand()
[18:58:53] * ms7821 uses $PID
[18:59:25] <ms7821> halosghost: guess what fastrandom uses to seed itself
[19:00:14] <Alipha> PID xor timestamp?
[19:01:39] <halosghost> ms7821: urandom ☺
[19:01:47] <halosghost> (or get_random if you mean that openssl uses that)
[19:01:50] <halosghost> 🤷
[19:01:56] <ms7821> https://docs.python.org/3/library/os.html#os.urandom
[19:02:12] <ms7821> getrandom, or urandom if it can't
[19:02:38] <ms7821> (using python is kinda cheating tho)
[19:02:39] <halosghost> sorry, I meant this: https://0x0.st/-BMs.sh
[19:02:58] <ms7821> wtf
[19:03:00] <halosghost> lol
[19:03:34] <halosghost> tl;dr: get enough bytes from urandom to get a reasonable AES key, and then encrypt bytes from /dev/zero and throw away the key
[19:03:50] <ms7821> ngl, that's kinda OK
[19:03:55] <halosghost> :)
[19:04:07] <Alipha> halosghost: just don't encrypt in ECB mode
[19:04:15] <halosghost> Alipha: it's CTR
[19:04:40] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[19:04:58] <ms7821> doesn't openssl have a rand command?
[19:05:14] <ms7821> (which hopefully would use getrandom to see its internal RNG)
[19:05:18] <ms7821> seed*
[19:05:29] *** asalor_ is now known as asalor
[19:06:05] <ms7821> yeah, you can replace your dd with openssl rand -base64 256
[19:06:25] *** Joins: hg (~halosghos@user/halosghost)
[19:06:25] <ms7821> it uses getrandom
[19:06:38] * halosghost does the thing
[19:07:54] <halosghost> so yeah, when I need a shitton of securely-random bytes, that's what I use ☺
[19:10:55] <Alexthek1d1977> So should i use "-rand -base64 256" instead of "-rand /dev/random" ?
[19:11:11] <Alexthek1d1977> i get "Can't load -base64 into RNG"
[19:11:13] <ms7821> for what?
[19:12:01] <ms7821> halosghost: interestingly encrypting /dev/zero is ~7 times faster than openssl rand $((1024*1024*1024))
[19:12:48] <ms7821> on my WSL2 machine
[19:17:25] <hg> mm
[19:38:19] <Alexthek1d1977> for creating bitcoin wallet offline
[19:39:03] <MacGyver> ms7821: Maybe don't have a shell fork off to compute 1073741824 ? :P
[19:40:22] <ms7821> I don't think that creates a subshell, it's the syntax for arithmetic
[19:43:53] <MacGyver> Hmm still.
[19:44:53] <iz> i guess encrypting has aes hw accel?
[20:05:27] <Alexthek1d1977> guys i have to ask again sorry:
[20:05:30] <Alexthek1d1977> so even if i boot up a fresh linux live CD it is no problem to use urandom immediately after boot? or should you wait some time an open some things?
[20:06:49] <ms7821> it's no problem
[20:06:51] <iz> on a computer, i think it should be fine right away, but on an embedded device like a pi or something, maybe not right away
[20:07:17] <ms7821> even embedded devices usually have decent sources of random, particularly if it's a live CD with therefore physical input and networking
[20:07:51] <iz> well, yeah, depends on the live CD and the system
[20:07:52] <ms7821> if you want to be absolutely certain, just read a single byte from /dev/random
[20:09:31] <ms7821> but really, why are you using urandom and not (e.g.) openssl rand
[20:10:16] <MacGyver> Actually uh, yeah, if you boot up a fresh linux live CD it *can be* a problem to use urandom immediately after boot. It's the one case where you should be careful, especially in the absence of spinning rust.
[20:10:55] <Alexthek1d1977> ms7821, i thought urandom is the best option
[20:11:07] <Alexthek1d1977> and network would be disabled (offline)
[20:11:19] <Alexthek1d1977> which linux live ist best for this? tails?
[20:11:29] <ms7821> what are you doing?
[20:11:51] <MacGyver> What you can do at that point is basically try to read a single byte from /dev/random, and *when that succeeds* subsequently use /dev/urandom.
[20:11:54] <iz> urandom is the best in terms of fastest
[20:12:12] *** Quits: thelounge6439 (~thelounge@157.37.141.111) (Ping timeout: 240 seconds)
[20:12:14] <MacGyver> Basically abuse /dev/random's blocking behaviour as a signal the random pool has been initialized.
[20:13:26] <ms7821> if it's actually a live *CD* (and not flash memory), this is probably a system that has rdrand
[20:13:42] <Alexthek1d1977> ms7821, just trying to create a bitcoin wallet offline
[20:13:53] <MacGyver> (Though caveat that it's possible, though unlikely, that even *with* that you get bad randomness because entropy estimation is all probabilities.)
[20:14:15] <MacGyver> (If you're not doing it on a Linksys router you should probably be fine.)
[20:14:49] <ms7821> Alexthek1d1977, just type some crap on the keyboard and pipe it to /dev/random
[20:15:34] <ms7821> your only risk is that the entropy pool is utterly broken somehow, adding some extra random will prevent anyone guessing what it contains
[20:18:21] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:18:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:18:35] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:18:37] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[20:21:08] <Alexthek1d1977> why /dev/random ? everyone said urandom is better an hour ago ^^
[20:21:42] <ms7821> pipe it *into*, i.e. echo sjejehrmdjs >/dev/random
[20:22:46] <hg> fastrandom > /dev/random
[20:22:48] <hg> what could go wrong
[20:23:20] <Alexthek1d1977> so "echo sjejehrmdjs >/dev/random" and after that "openssl ecparam -name secp256k1 -genkey -rand /dev/urandom -check -out key" 
[20:23:22] <Alexthek1d1977> right?
[20:23:34] <hg> tangentially related: are there strong opinions about the security of haveged or similar entropy daemons?
[20:23:46] <ms7821> why are you specifying -rand?
[20:23:48] <Alexthek1d1977> and typing whatever long string to pipe
[20:23:59] <Alexthek1d1977> so it uses urandom
[20:24:06] <MacGyver> Alexthek1d1977: And what I said was, /dev/random blocks until the pool has initialized. So you still end up using /dev/urandom, but you ensure the pool has been initialized by blocking on a read from /dev/random before that.
[20:24:19] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:24:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:24:22] <MacGyver> hg: Yes, there are.
[20:24:47] <hg> cool
[20:24:57] <hg> sounds like that's also a good option
[20:25:10] <ms7821> Alexthek1d1977, pretty sure openssl uses getrandom by default
[20:26:51] <ms7821> I'm not even sure if -rand /dev/urandom will work
[20:30:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[20:31:36] <Alexthek1d1977> MacGyver,  thank you. so "echo type-something-here >/dev/random" and after that "openssl ecparam -name secp256k1 -genkey -check -out key" is the way to go ?
[20:31:47] <Alexthek1d1977> ms7821, i don't know too
[20:32:22] <MacGyver> Alexthek1d1977: No, that's not what I said.
[20:37:13] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[20:37:22] <Alexthek1d1977> oh sorry
[20:38:51] <MacGyver> Alexthek1d1977: What I said is basically, "head -c1 /dev/random" and then after that "openssl ecparam -name secp256k1 -genkey -check -out key". You can dump stuff *into* /dev/random between those calls to ensure you also don't hit the too-optimistic-entropy-estimation case.
[20:39:29] <ms7821> openssl uses getrandom if you don't specify -rand
[20:39:54] <MacGyver> Alexthek1d1977: Basically, you *block* until the entropy pool has initialized, then you *dump* some additional stuff in it to avoid the Linksys-routers-all-generating-the-same-keys-stupidity, and only *then* do you read a key from /dev/urandom.
[20:43:17] <Alexthek1d1977> thank you MacGyver !!!
[20:43:32] <Alexthek1d1977> no i have a better understanding
[20:43:45] <Alexthek1d1977> ms7821, so getrandom better than urandom ?
[20:44:35] <Alexthek1d1977> MacGyver, does this apply to getrandom to ?
[20:44:57] *** Joins: Sofia (~sofia@user/sofia)
[20:45:43] <ms7821> you don't *need* the head -c1 bit, but it does no harm
[20:46:06] <ms7821> just don't write an article saying it's the right way :P
[20:47:04] *** Joins: thelounge6439 (~thelounge@47.31.204.153)
[20:50:54] *** Quits: thelounge6439 (~thelounge@47.31.204.153) (Client Quit)
[20:51:12] *** Joins: thelounge6439 (~thelounge@47.31.204.153)
[20:53:26] *** Joins: tradar (~tradar@user/tradar)
[20:55:13] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:02:33] *** Joins: sobkas (~sobkas@95.175.17.217)
[21:05:59] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[21:06:43] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[21:12:26] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[21:16:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:16:34] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[21:20:52] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 268 seconds)
[21:21:33] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:21:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:22:16] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[21:30:40] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Quit: WeeChat 3.4)
[21:40:32] *** Quits: Alexthek1d1977 (~Alexthek1@p5b3ae632.dip0.t-ipconnect.de) (Quit: Leaving)
[21:41:00] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[22:10:22] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[22:11:58] *** Joins: somlis (~somlis@user/somlis)
[22:12:39] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[22:13:26] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[22:20:31] <duckie> <Alexthek1d1977> "ms7821, so getrandom better than..." <- You should definitely use getrandom
[22:21:05] <duckie> It has predictable behavior, unlike /dev/(u)random depending on kernel version
[22:28:08] *** Joins: aleck (~aleck@user/aleck)
[22:29:51] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 256 seconds)
[22:30:07] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[22:36:34] <MacGyver> ms7821: You don't need it on any sane modern Linux distribution.
[22:37:17] <MacGyver> And if that's the case it just returns immediately.
[22:39:22] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:42:30] *** Joins: menace (~someone@ppp-93-104-179-71.dynamic.mnet-online.de)
[22:42:30] *** Quits: menace (~someone@ppp-93-104-179-71.dynamic.mnet-online.de) (Changing host)
[22:42:30] *** Joins: menace (~someone@user/menace)
[22:42:40] *** menace is now known as Deknos
[22:45:13] *** Gravis_ is now known as Gravis
[22:47:11] <maroon> if paranoid of the quality of 1 source, wouldn't it be good to just xor 2 sources together, assuming they don't peek at each other? (pure good random) xor 1-constant is still good random
[22:47:48] <hg> maroon: per DJB, adding extra sources hoping that there's at least 1 good one and that that's enough doesn't necessarily net out to be a good idea
[22:48:38] <maroon> wouldn't it have helped with the router that always returns the same?
[22:50:32] <hg> https://blog.cr.yp.to/20140205-entropy.html
[22:52:00] <TimMc> As long as they're *truly* independent (which includes "not malicious") then it should be fine.
[22:54:08] <maroon> if there's something able to peek and alter my rng's output, you've already lost
[22:56:44] <hg> doesn't mean you cannot be intentional about the sources you choose to mitigate the risk of an attacker being able to control one of the sources
[22:57:08] <hg> (which also means preferring the use of fewer, high-quality sources, rather than as many as you can fit in)
[22:57:42] <hg> (aiui anyway)
[22:58:05] <maroon> even if the attacker controls 1 source, it doesn't help if there's a good source they can't peek at or control
[22:58:46] <TimMc> I liked the point about incorporating the maybe-malicious sources first, *then* the safer sources,
[22:59:46] <TimMc> (although "malicious" here has an implication of "can snoop on RNG state", which honestly feels pretty dubious)
[23:00:34] <maroon> yea, if they can noop and alter the rng, why can't they mess with the program's own buffers
[23:00:54] <maroon> unless just that the rng is a known fixed target
[23:01:58] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:06:30] *** Quits: thelounge6439 (~thelounge@47.31.204.153) (Ping timeout: 260 seconds)
[23:06:57] *** Joins: thelounge6439 (~thelounge@47.31.204.153)
[23:08:12] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[23:08:57] <MacGyver> maroon, hg: We've had that discussion recently and I maintain that the risk DJB outlines there is smaller than the risk of the attacker learning the state of the entropy pool and computing from there onwards.
[23:09:48] <MacGyver> He closes by a refutation of that argument that is not *actually* a refutation if you read it and reason through it, because the claim isn't that the attacker can from that state re-compute previous outputs.
[23:17:34] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[23:17:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:19:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[23:21:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:21:38] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[23:22:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:22:15] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:22:18] <hg> mm
[23:22:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:23:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:25:38] *** Lord_of_Life_ is now known as Lord_of_Life
[23:50:44] <caveman> for diffie-hellman, is any large prime is good as p?
[23:53:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[23:54:18] <maroon> caveman, it's easiest to avoid a trapdoor having a small order if you use a safe prime
[23:54:31] <maroon> that avoids the need to calculate the order, since q is also prime
[23:54:59] <maroon> is your 'any' making a statement as to 'any' bit length?
[23:55:45] <caveman> q?  -- 5^x mod p   
[23:55:52] <caveman> which one is q?
[23:56:21] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:56:36] <maroon> in safe prime p, p=2q+1
[23:57:08] <caveman> should i pick the largest safe prime?
[23:57:34] <maroon> you want the safe prime to be large enough that it's not the weakest link in the chain
[23:58:03] <caveman> what are the other weaknesses?
[23:58:16] <caveman> e.g. exponent x being too small?
[23:58:46] <maroon> if im going to break into a house, am i going to try to pick the 5 locks on the door, or climb thru the open window
[23:59:12] <maroon> other avenue would include cracking the symmetric cipher itself
[23:59:18] <caveman> yes.  but in the case of diffie-hellman key exchange, what is the other weakness?
[23:59:51] <maroon> DH is used to share the symmetric key used for the actual encryption. is that key AES-256 or DES-56?
[23:59:53] <caveman> i guess one is small randomness range in x?  (5^x mod p)?
