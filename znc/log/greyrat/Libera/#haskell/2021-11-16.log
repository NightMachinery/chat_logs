[00:00:04] <tomsmeding> Prelude> let z :: [Int] ; z = [1,2,undefined,3]    |   Prelude> :sprint z   |   z = [1,2,_,3]
[00:00:49] <tomsmeding> this is more than #10160 says, because one of those (:) applications doesn't have only NF arguments!
[00:00:54] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 256 seconds)
[00:02:00] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[00:03:32] <EvanR> tomsmeding, I was thinking that, and originally though I could test it with a less trivial top level definition
[00:03:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[00:04:02] <EvanR> but... it's kind of like tree falling in the woods with no one there
[00:05:16] <EvanR> z's top node is :, but if it was an actual computation that would need to run, would sprint see it then
[00:05:25] <EvanR> without let
[00:05:54] *** Joins: mcglk (~mcglk@131.191.49.120)
[00:06:34] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:06:53] <tomsmeding> EvanR: see https://paste.tomsmeding.com/tS1PgVlB
[00:07:44] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[00:07:50] <tomsmeding> EvanR: or more to the point to your exact question: https://paste.tomsmeding.com/De664kvY
[00:08:24] <tomsmeding> this is consistent with the first case in https://paste.tomsmeding.com/2e92s4gm
[00:08:55] <tomsmeding> the only case that is not explained by #10160 is the third case in https://paste.tomsmeding.com/2e92s4gm , I think
[00:09:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:09:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[00:10:00] *** Joins: slack1256 (~slack1256@186.11.99.34)
[00:10:24] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:10:31] <EvanR> it does indeed evaluate a and remember it without let if it would have to do a computation
[00:10:43] <EvanR> i knew it! xD
[00:11:08] <slack1256> Is there anyway to specify different cost centers break down on the same executable? Currently I am running the same program with `-hc` or `-hm` to the the whole picture.
[00:11:11] <tomsmeding> yeah, but if evaluates (possibly nested) direct constructor applications in one go
[00:11:15] <tomsmeding> s/if/it/
[00:11:25] <slack1256> Probably I could get the same view of the RTS from the eventlog interface. Has somebody done that?
[00:12:08] *** Joins: desantra (~skykanin@user/skykanin)
[00:12:39] <tomsmeding> EvanR: um wat? 'a :: Int ; a = id [1,2,3]' gives _ and _:_ -- now it suddenly breaks up the NF chunk
[00:15:31] <tomsmeding> lol
[00:15:40] <EvanR> that tracks
[00:15:49] <tomsmeding> EvanR: https://paste.tomsmeding.com/7ONg80mp
[00:15:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:15:56] <tomsmeding> madness
[00:15:58] <EvanR> assuming id counts as requiring computation
[00:16:11] <tomsmeding> well it has different behaviour than everything :p
[00:16:22] <EvanR> c and e shows
[00:17:32] <EvanR> just the fact that we are investigating this for the sake of it, when if it wasn't like this, we wouldn't be, is annoying xD
[00:18:02] <tomsmeding> EvanR: in my latest paste, the non-let version is actually _more_ consistent: there, the results for map and id are equivalent
[00:20:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[00:22:49] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: m4lvin)
[00:23:40] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Quit: WeeChat 3.3)
[00:24:01] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[00:24:24] *** Joins: m4lvin (~m4lvin@w4eg.de)
[00:24:42] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:25:21] *** Quits: Farzad (~FarzadBek@151.238.206.168) (Quit: Leaving)
[00:26:58] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[00:28:24] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:29:01] <Guest5126> hi
[00:29:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[00:30:21] <Guest5126> Anyone who knows how to contact Tom and Jerry Market
[00:33:09] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:34:51] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[00:35:23] <geekosaur> why would you be asking that here?
[00:37:30] *** Joins: Guest5161 (~Guest51@180.230.60.84)
[00:37:53] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:38:39] *** Joins: theproffesor (~theproffe@2601:282:847f:8010::390f)
[00:38:40] *** Quits: theproffesor (~theproffe@2601:282:847f:8010::390f) (Changing host)
[00:38:40] *** Joins: theproffesor (~theproffe@user/theproffesor)
[00:39:21] *** Joins: alx741 (~alx741@181.196.68.87)
[00:40:14] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:40:34] <shapr> what was that about?
[00:40:42] *** Joins: son0p (~ff@181.136.122.143)
[00:40:52] <tomsmeding> well, the Tom and Jerry Market, presumably
[00:40:56] <geekosaur> no clue
[00:42:53] <sm> toons need groceries too
[00:44:29] *** Quits: derelict (~derelict@user/derelict) (Quit: bye)
[00:44:52] <tomsmeding> EvanR: https://tomsmeding.com/vang/7qvC5S do you agree this describes the issue adequately?
[00:44:56] <tomsmeding> mark__: ^
[00:44:59] *** Joins: derelict (~derelict@user/derelict)
[00:45:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[00:46:22] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) ()
[00:46:32] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[00:47:33] <mark__> Haha, so now we have: No 'let': a) as expected, c) as expected, e) simply wrong. With 'let': b) as expected, d) not intuitive but not wrong, f) not intuitive but not wrong. :)
[00:47:46] <mark__> Very nice. Thank you for writing this up.
[00:49:31] *** Joins: pavonia (~user@user/siracusa)
[00:49:35] <tomsmeding> yeah it's beautiful, isn't it?
[00:49:39] <mark__> So we only get consistent and expected behavior if the outermost call is not 'id' and not a value con.
[00:49:50] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: m4lvin)
[00:50:01] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[00:50:10] <tomsmeding> the 'id' case is an example of a case where, after WHNF evaluation, you get an entire constructor application chunk
[00:50:17] *** Joins: m4lvin (~m4lvin@w4eg.de)
[00:50:38] <tomsmeding> in that case, and in the value con case, #10160 applies and wreaks havoc
[00:51:01] <tomsmeding> the _new_ thing with this issue is the discrepancy between let and non-let
[00:51:19] <tomsmeding> I'll submit :)
[00:51:25] <mark__> thank you
[00:51:33] <tomsmeding> EvanR: mark__: https://gitlab.haskell.org/ghc/ghc/-/issues/20687
[00:54:27] <tomsmeding> and now I'm off to bed :)
[00:54:50] <EvanR> correct
[00:55:10] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[00:56:26] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[00:58:52] <Guest5161> Can anyone tell me how to contact the Tom and Jerry store?
[00:59:07] *** ChanServ sets mode: +o geekosaur
[00:59:18] *** geekosaur sets mode: +b *!*Guest51@180.230.60.*
[00:59:18] *** Guest5161 was kicked by geekosaur (Guest5161)
[00:59:27] *** geekosaur sets mode: -o geekosaur
[00:59:57] <geekosaur> hm, less than ideal, that ban
[01:00:01] *** ChanServ sets mode: +o geekosaur
[01:00:59] *** geekosaur sets mode: +b *!*@180.230.60.84
[01:01:08] *** geekosaur sets mode: -b *!*Guest51@180.230.60.*
[01:01:19] *** geekosaur sets mode: -o geekosaur
[01:02:20] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[01:02:33] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[01:02:42] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[01:03:54] *** Joins: ystael (~ystael@user/ystael)
[01:08:10] <yushyin> with https://libera.chat/guides/bots#litharge you can add a ban record for e.g. a few days; useful for ip bans
[01:08:54] <geekosaur> I was planning to remove it this evening, but I'll look into it
[01:10:11] <geekosaur> ooh, I like that last part. I'm always worried about the scope of bans
[01:10:24] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[01:10:54] *** ChanServ sets mode: +o geekosaur
[01:12:18] <geekosaur> welp. I got ops but not permissions for that :(
[01:12:19] *** geekosaur sets mode: -o geekosaur
[01:13:19] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[01:16:02] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[01:16:19] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:16:28] *** Joins: Guest4530 (~Guest45@185.16.69.203)
[01:20:44] <ozzloy_> what's this about tom and jerry store?  is this a meme i'm unaware of?
[01:21:37] * slack1256 hates PINNED memory leaks.
[01:22:18] <EvanR> I'm not sure I wanna know what tom and jerry is
[01:22:42] <EvanR> (probably not the cartoon)
[01:26:42] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:30:11] * geekosaur guesses it's some sort of cat-and-mouse allusion to "hacking" and we have another idiot who thinks all IRCers are "hackers"
[01:30:33] *** Joins: zebrag (~chris@user/zebrag)
[01:30:51] <ozzloy_> hello, fellow hackers
[01:33:14] * ozzloy_ adjusts his novelty disguise glasses with giant nose and obviously fake moustachioeau
[01:34:13] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 250 seconds)
[01:34:19] <EvanR> no one here but us hackers
[01:34:27] <ozzloy_> tis a good day for doing the illegals with the computers.  wouldn't you say?
[01:36:18] *** ChanServ sets mode: +o geekosaur
[01:36:25] *** Joins: litharge (litharge@libera/bot/litharge)
[01:37:04] *** geekosaur sets mode: -o geekosaur
[01:39:42] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[01:41:00] <shapr> ozzloy_: righto old chap
[01:42:00] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:46:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[01:48:34] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[01:50:41] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 250 seconds)
[01:57:04] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 256 seconds)
[01:57:37] <jkaye> Yeah personally I love doing my illicit activities on a public messaging system that anyone can look at whenever they want
[02:01:24] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[02:06:10] *** Joins: emerson (~emerson@libera/staff/emerson)
[02:11:14] *** Joins: mimmy (~mimmy@72.142.88.18)
[02:15:14] *** Quits: Guest5126 (~Guest51@180.230.60.84) (Ping timeout: 256 seconds)
[02:15:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:15:19] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[02:15:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:15:59] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[02:16:02] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[02:22:56] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[02:24:12] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 265 seconds)
[02:25:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:25:27] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[02:25:36] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[02:37:00] *** Joins: alzgh (~alzgh@user/alzgh)
[02:38:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:2831:8d93:d152:2332)
[02:41:10] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:22] *** Quits: Techcable_ (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:44:19] *** Joins: jbox (~jbox@user/jbox)
[02:44:26] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:44:49] *** Joins: atlas (~jbox@user/jbox)
[02:46:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[02:46:15] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:48:38] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:49:14] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[02:49:22] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 268 seconds)
[02:51:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[02:56:25] *** Quits: puke (~puke@user/puke) (Quit: puke)
[02:59:09] *** Quits: cjb (~cjbayliss@user/cjb) (Remote host closed the connection)
[02:59:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:01:13] *** Quits: michalz (~michalz@185.246.204.57) (Remote host closed the connection)
[03:02:23] *** Joins: cjb (~cjbayliss@user/cjb)
[03:02:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:10:18] *** ChanServ sets mode: +o geekosaur
[03:10:32] *** geekosaur sets mode: -b *!*@180.230.60.84
[03:10:36] *** geekosaur sets mode: -o geekosaur
[03:10:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[03:12:18] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:d1ec:e4ac:744a:8e08)
[03:20:15] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:22:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:23:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:23:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:23:54] *** Joins: wroathe (~wroathe@user/wroathe)
[03:24:38] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:25:04] *** Quits: srk (~sorki@user/srk) (Remote host closed the connection)
[03:25:22] *** Joins: srk (~sorki@user/srk)
[03:28:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:32:50] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:d1ec:e4ac:744a:8e08) (Ping timeout: 265 seconds)
[03:39:34] *** Quits: mark__ (~a@p200300ef973db1d9502293e1a26d2ca1.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[03:41:30] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[03:44:13] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 250 seconds)
[03:44:36] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:49:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7289:19f7:f3fa:e188) (Ping timeout: 250 seconds)
[03:52:27] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:2831:8d93:d152:2332) (Remote host closed the connection)
[03:52:35] *** Quits: emf_ (~emf@2620:10d:c090:400::5:91bf) (Ping timeout: 264 seconds)
[03:53:28] *** Quits: max22- (~maxime@2a01cb08833598005714d2986a3eb6d2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:53:59] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[03:55:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:59:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[04:00:01] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:00:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:06] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e4cb:5a57:fd6e:e655)
[04:03:10] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[04:03:34] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[04:06:19] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:08:03] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[04:09:02] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:20d6:2b3a:ce41:e0b6)
[04:11:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e4cb:5a57:fd6e:e655) (Ping timeout: 264 seconds)
[04:12:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2d58:181a:7f09:e906)
[04:16:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:fc41:a35f:792:b57c)
[04:18:27] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:20d6:2b3a:ce41:e0b6) (Ping timeout: 250 seconds)
[04:23:08] *** Joins: sagax (~sagax_nb@user/sagax)
[04:24:57] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[04:28:26] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:41:15] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:47:22] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:53:54] *** Quits: Guest4530 (~Guest45@185.16.69.203) (Ping timeout: 256 seconds)
[04:55:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:56:41] <shapr> OH: Don't use comments. Use PackageImports
[04:57:31] <dsal> PackageImports looks weird to me.  I'm not sure it's valuable enough for mem.
[04:57:51] <geekosaur> either one is scary imo
[04:58:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[04:58:45] <geekosaur> comments are too easy to miss, PackageImports is "wtf are you doin mate?"
[04:58:53] *** Joins: burnsidesLlama (~burnsides@client-8-81.eduroam.oxuni.org.uk)
[04:59:08] <glguy> Given that we have PackageImports, using comments is just a way to have wrong comments
[05:00:09] <dsal> I don't know that I could argue against PackageImports in anyway that would be consistent with arguing against unqualified/naked imports
[05:02:37] <dsal> I guess my only argument is that it sounds hard to do.
[05:03:13] *** Quits: burnsidesLlama (~burnsides@client-8-81.eduroam.oxuni.org.uk) (Ping timeout: 265 seconds)
[05:13:13] *** Joins: JonasTripps (~user@bras-base-crnwon2435w-grc-27-76-70-40-124.dsl.bell.ca)
[05:13:17] <JonasTripps> https://youtu.be/ykT_g0-bgZo
[05:14:34] *** Quits: JonasTripps (~user@bras-base-crnwon2435w-grc-27-76-70-40-124.dsl.bell.ca) (K-Lined)
[05:17:10] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:ec1e:7b74:9028:2102)
[05:17:43] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:fc41:a35f:792:b57c) (Ping timeout: 265 seconds)
[05:22:36] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 245 seconds)
[05:22:46] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[05:23:24] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[05:24:28] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[05:28:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:29:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[05:30:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:40:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:45:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:45:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:45:34] *** Joins: wroathe (~wroathe@user/wroathe)
[05:50:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[05:51:37] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 250 seconds)
[05:56:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[05:56:03] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[05:56:03] *** finn_elija is now known as FinnElija
[05:58:00] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[06:04:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:04:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6f4:bc42:8be5:e20d)
[06:07:01] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:ec1e:7b74:9028:2102) (Ping timeout: 265 seconds)
[06:09:31] *** Joins: mimmy_ (~mimmy@185.244.215.86)
[06:10:04] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:10:24] *** Joins: alzgh (~alzgh@user/alzgh)
[06:12:42] *** Quits: alx741 (~alx741@181.196.68.87) (Quit: alx741)
[06:17:32] *** Joins: Lycurgus (~juan@98.4.112.204)
[06:17:36] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 245 seconds)
[06:18:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:18:23] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[06:19:02] *** Quits: mimmy_ (~mimmy@185.244.215.86) (Ping timeout: 268 seconds)
[06:19:30] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[06:20:11] *** Quits: xff0x (~xff0x@2001:1a81:52ee:6600:288d:876:4868:af07) (Ping timeout: 264 seconds)
[06:21:42] *** Joins: xff0x (~xff0x@2001:1a81:5330:8c00:519e:34db:fab7:a573)
[06:22:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:24:03] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[06:24:13] *** Joins: mimmy_ (~mimmy@185.244.215.86)
[06:26:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:33:50] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[06:33:58] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[06:47:57] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Ping timeout: 250 seconds)
[06:48:33] <pop3> tomsmeding, thanks
[06:56:29] *** Joins: asivitz (uid178348@tinside.irccloud.com)
[07:01:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[07:06:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:06:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:06:36] *** finn_elija is now known as FinnElija
[07:06:56] <asivitz> not sure what the right place to ask is, but stack is segfaulting when I use it for basically anything. I got stack from nixpkgs. this is on an m1 mac. anyone seen this before?
[07:07:27] <dsal> asivitz: What system?
[07:08:04] <asivitz> system?
[07:08:14] <dsal> You can override the system in /etc/nix/nix.conf
[07:08:40] <asivitz> hm no override there. (I am brand new to nix)
[07:09:05] <dsal> Ah.  It used to ship as aarch64, but it works natively now.  I've not done a recent install, so I don't know where it leaves you.
[07:09:20] <dsal> What does  "file `which nix`" say?
[07:09:42] <asivitz> `/nix/var/nix/profiles/default/bin/nix: Mach-O 64-bit executable arm64`
[07:09:58] <dsal> Huh.  What about stack?
[07:10:09] <asivitz> same
[07:10:38] <asivitz> it can run --help and --version. seems to die when running ghc
[07:10:39] <dsal> Interesting.  I'm not using a global install, but otherwise that's basically what I'm doing.  Is this a recent project?
[07:10:55] <dsal> i.e., that combination would only work on a fairly recent LTS.
[07:11:10] <dsal> e.g., lts-18.16
[07:11:12] *** Joins: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net)
[07:11:18] <asivitz> looks like my resolver is nightly-2021-03-01
[07:11:29] <dsal> That probably won't work.
[07:11:43] <dsal> If you want to build older stuff, you can do it with rosetta if you change your nix config to amd64
[07:12:25] <dsal> Basically     echo "system = x86_64-darwin" > /etc/nix/nix.conf 
[07:12:30] *** Quits: mimmy_ (~mimmy@185.244.215.86) (Quit: WeeChat 3.3)
[07:12:46] <dsal> Then `nix-env -iA nixpkgs.nix`
[07:13:08] <asivitz> hm, I think I can handle the latest stackage. but, just tried the latest nightly and it still bombs
[07:13:15] <dsal> I built under emulation for a long time.  Only the last month or so has it been useful.
[07:13:24] <dsal> Yeah, so *newer* GHCs are differently bad.  :)
[07:13:33] <asivitz> haha oh dear
[07:14:05] <dsal> I've been building with LTS-18.16 just fine.
[07:14:10] <dsal> Using haskell.nix
[07:14:24] <asivitz> well, am I right in thinking the problem is in the ghc that built stack when I installed that with nix-env?
[07:14:25] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[07:14:55] <asivitz> stack hasn't even attempted to download a ghc binary I don't think
[07:15:01] <dsal> I don't know for sure.
[07:15:30] <dsal> stack doesn't *come* with a ghc, but the LTS will define one.
[07:15:31] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:16:07] *** Quits: slack1256 (~slack1256@186.11.99.34) (Ping timeout: 250 seconds)
[07:16:12] <dsal> There are a few different ways to configure things, so it can get confusing.  It works pretty well for me with stack nix integration.
[07:16:17] *** Joins: mbuf (~Shakthi@223.178.89.16)
[07:17:29] <asivitz> yea. FWIW I'm familar with stack. but... it bombs immediately when I run any non-trivial command (other than help or version). like it should read my stack.yaml and download the defined ghc and then use that to build other stuff, but it never gets to any of that. so the stack binary itself is messed up somehow... but it is the right arch seemingly :(
[07:18:39] <dsal> stack nix integration is slightly different.
[07:18:48] <asivitz> for your setup- you skip stack and turn the stack.yaml into a nix derivation? (do I have that right?)
[07:18:55] <asivitz> I thought just using stack would be simpler but maybe not
[07:19:02] <Lycurgus> lol
[07:19:30] <Lycurgus> (you saved me a status check)
[07:19:44] <dsal> my ~/.stack/config.nix has "nix:\n  enable: true" and my stack projects look like... let me find one.
[07:20:06] <dsal> Basically this:  https://github.com/dustin/waitforsocket/blob/master/stack.yaml
[07:20:13] <dsal> You'll pretty much always need that zlib thing.  heh
[07:20:25] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:20:42] <Nolrai2> So afaict, the mutable unboxed fixed length boolean vectors in vector-fixed just don't work at all, freezing then thawing sets both the original and the resultant immutable vectors to all FALSE. If I want to make a local version of the library so I can fix the issue how would I do that?
[07:20:57] <Nolrai2> *False
[07:20:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:21:00] <dsal> Oh, you might need network-3.1.2.5 as well, because that fixes M1 builds.
[07:24:24] <asivitz> dsal: welp. it still segfaults even with enabling nix in stack
[07:24:38] <dsal> asivitz: How did you get stack?
[07:26:15] <dsal> I wonder if you have an older, broken one.   You could try:  [sudo] nix-channel --update && nix-shell -p stack
[07:26:32] <asivitz> I think I did the equivalent of `nix-env -iA nixpkgs.stack`
[07:26:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:26:52] *** Quits: td_ (~td@muedsl-82-207-238-041.citykom.de) (Ping timeout: 256 seconds)
[07:26:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:26:59] <Lycurgus> dsal, are you using nixos or just nix?
[07:27:04] <dsal> I run both.
[07:27:09] <Lycurgus> figured
[07:27:11] <dsal> This is a Mac, though.
[07:27:16] *** Joins: alzgh (~alzgh@user/alzgh)
[07:27:51] <asivitz> ok interesting. that does not segfault
[07:27:56] <dsal> nix-env -u
[07:28:02] <dsal> It sounds like you just have something old and broken.
[07:28:20] <Axman6> Nolrai2: that sounds... unfortunate
[07:28:37] *** Joins: td_ (~td@94.134.91.233)
[07:30:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:30:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:30:25] *** Joins: wroathe (~wroathe@user/wroathe)
[07:33:43] <Nolrai2> Axman6 : It is somewhat.
[07:34:07] <Axman6> maybe it's a statement on the state of the world, everything is truly false
[07:34:13] <Nolrai2> >.<
[07:34:35] <Nolrai2> I mean it works if I don't use a fixed sized vector, so what does that mean? :P
[07:34:46] <asivitz> dsal: well if you don't mind taking a look, here's basically the set of nix things I'm doing. I'm probably doing something really stupid here. just kind of picking things off the internet. https://paste.tomsmeding.com/hgvAv0QV
[07:35:26] *** Joins: jinsun (~quassel@user/jinsun)
[07:36:13] <asivitz> maybe I should just read the nix manual and stop bothering #haskell lol
[07:36:32] <dsal> Oh interesting.  I use home-manager.  I don't exactly understand how that installs stuff.  You said it works OK in a nix-shell, though?
[07:37:43] <asivitz> yea it does. so I'm doing something silly. maybe I should just use home-manager
[07:37:57] <asivitz> thanks so much for your help! I'm on the right track now at least
[07:39:10] *** Joins: puke (~puke@user/puke)
[07:42:07] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[07:49:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:52:18] *** Joins: zaquest (~notzaques@5.130.79.72)
[07:54:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6f4:bc42:8be5:e20d) (Ping timeout: 250 seconds)
[07:57:33] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[08:01:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[08:02:11] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 264 seconds)
[08:03:30] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[08:05:19] *** Joins: rkrishnan (~user@122.167.19.65)
[08:06:20] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (Ping timeout: 268 seconds)
[08:09:50] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[08:10:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:12:31] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:14:43] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[08:15:22] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[08:16:08] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[08:17:16] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[08:20:58] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:21:22] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 260 seconds)
[08:22:34] *** Joins: MoC_ (~moc@user/moc)
[08:22:50] *** Quits: MoC (~moc@user/moc) (Ping timeout: 265 seconds)
[08:23:43] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:25:46] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:54e1:e6c6:79ac:779c)
[08:28:32] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 268 seconds)
[08:29:07] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 265 seconds)
[08:30:43] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:31:46] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[08:38:25] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:38:41] *** Joins: img (~img@user/img)
[08:42:20] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[08:42:25] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[08:47:01] <jackdk> Given `x :: Lens' a (Maybe b)` and `y :: Lens' b (Maybe c)`, is there a combinator that produces a `Lens' a (Maybe c)`?
[08:48:35] <nshepperd> There is not
[08:49:19] <jackdk> darn. feels like there should
[08:49:36] <awpr> hm, I don't think that can be a valid Lens -- when setting to Nothing, it can't distinguish outer Nothing from inner Nothing
[08:49:43] *** Quits: atlas (~jbox@user/jbox) (Ping timeout: 250 seconds)
[08:51:48] <nshepperd> also, putting Just (x :: c) into such a lens if it was initially Nothing would not tell it how to make the required b
[08:51:52] <jackdk> fair. this is distilled from an example using amazonka-dynamodb's AttributeValue type, which (because of codegen reasons) badly implements a sumtype by providing a set of lenses in lieu of prisms.
[08:53:12] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[08:53:18] <jackdk> If you parsed AttributeValue into a better AST and then had `x :: Prism' a b` and `y :: Lens' b (Maybe c)`, could you then get a `Lens' a (Maybe c)`? Feels more plausible, anyway
[08:54:16] <nshepperd> however i think if you have a concept of a "default value" for b, you can convert Lens' a (Maybe b) to Lens' a b
[09:01:09] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[09:01:18] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[09:02:33] <glguy> :t non
[09:02:34] <lambdabot> (Eq a, Profunctor p, Functor f) => a -> p a (f a) -> p (Maybe a) (f (Maybe a))
[09:03:11] <glguy> Like: at 'k' . non 0
[09:07:22] <asivitz> dsal: lol this was the problem: https://github.com/commercialhaskell/stack/issues/5607
[09:08:12] <dsal> Ah, I don't run zsh
[09:11:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:21:03] <dibblego> jackdk: there is a traversal
[09:22:58] <dibblego> @type \x y -> x . _Just . y
[09:23:00] <lambdabot> (Choice p, Applicative f) => (p (Maybe a1) (f (Maybe b)) -> c) -> (a2 -> p a1 (f b)) -> a2 -> c
[09:23:06] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:34:10] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:39:49] <jackdk> dibblego: thanks but i particularly want to be able to write back in . but I think I need to write a proper AST type for amazonka-dynamodb's attributevalue type. After I get around to everything else I need to write
[09:46:29] *** Quits: cjb (~cjbayliss@user/cjb) ()
[09:50:00] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:50:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[09:55:38] *** Quits: phma (phma@2001:5b0:210f:6c88:14c5:503:d6e5:c919) (Read error: Connection reset by peer)
[09:56:35] *** Joins: phma (phma@2001:5b0:2172:a9b8:34c1:76b3:d477:41fd)
[09:57:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:59:50] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 260 seconds)
[10:07:06] *** Joins: Guest8054 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[10:13:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:13:53] <turlando> Hello everyone. I'm not sure what's wrong with this code https://pastebin.com/raw/2H6dmtqE GHC says "Could not deduce (Simulation state event0 result)" ... "The type variable â€˜event0â€™ is ambiguous" in the "simulation" function definition
[10:18:15] <sm> AllowAmbiguousTypes extension makes it go away..
[10:19:17] *** Joins: atlas (~jbox@user/jbox)
[10:21:32] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:22:30] <sm> ..or maybe just moves it around ? not sure
[10:23:52] *** atlas is now known as jbox
[10:31:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[10:36:35] <turlando> sm: I have AllowAmbiguousTypes enabled for the Simulator module (not enabled globally)
[10:36:54] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:37:16] <turlando> I also have FunctionalDependencies for the module and MultiParamTypeClasses and RankNTypes globally
[10:42:49] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[10:44:06] <sm> turlando: I'm playing with this much:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/b695ad494f768676bc5b4018dff0490c9be681c3)
[10:44:43] *** Joins: sm2n_ (~sm2n@user/sm2n)
[10:44:56] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[10:45:01] <sm> I may have wrong terminology: the rule seems to be that if one of the class type variables is not mentioned in the a type signature, it must be declared as a dependent variable with a functional dependency
[10:45:26] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 268 seconds)
[10:45:27] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 268 seconds)
[10:45:59] *** Joins: ystael (~ystael@user/ystael)
[10:46:38] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[10:48:51] <turlando> sm: now it cannot deduce result0 in finalState :\
[10:48:59] <turlando> May I need to define multiple fundeps?
[10:50:12] <turlando> Sorry, I misread your comment, that's exactly what you proposed. It worked, thank you a lot
[10:51:04] <sm> excellent
[10:52:00] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c480:7b03:c5d:3876)
[10:56:16] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[10:57:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:59:33] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[11:00:14] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[11:01:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:04:16] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[11:11:49] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:14:25] *** Quits: xff0x (~xff0x@2001:1a81:5330:8c00:519e:34db:fab7:a573) (Ping timeout: 265 seconds)
[11:14:53] *** Joins: xff0x (~xff0x@2001:1a81:5330:8c00:614e:b47b:9eaf:eaca)
[11:19:18] *** Quits: the_finn (uid526334@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:24:28] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[11:26:05] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:29:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:2831:8d93:d152:2332)
[11:30:51] *** Joins: Everything (~Everythin@37.115.210.35)
[11:33:53] *** Joins: chele (~chele@user/chele)
[11:37:25] *** Joins: slice (~slice@user/slice)
[11:37:34] *** Joins: pfurla_ (~pfurla@2804:14d:5c81:4104:6cc4:7b65:8ee1:2dd3)
[11:38:44] *** Joins: pfurla__ (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced)
[11:40:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:54e1:e6c6:79ac:779c) (Ping timeout: 265 seconds)
[11:42:27] *** Quits: pfurla_ (~pfurla@2804:14d:5c81:4104:6cc4:7b65:8ee1:2dd3) (Ping timeout: 265 seconds)
[11:42:54] *** Joins: michalz (~michalz@185.246.204.41)
[11:47:30] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[11:48:05] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:55:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:2831:8d93:d152:2332) (Remote host closed the connection)
[11:59:31] *** Joins: cfricke (~cfricke@user/cfricke)
[12:00:02] *** Joins: kuribas (~user@ptr-25vy0i87u19ttsdwrve.18120a2.ip6.access.telenet.be)
[12:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:03:19] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:05:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2d58:181a:7f09:e906) (Remote host closed the connection)
[12:06:23] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 264 seconds)
[12:10:32] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 268 seconds)
[12:12:28] *** Joins: johnjay (~pi@192.142.100.50)
[12:12:40] *** Joins: wei2912 (~wei2912@138.75.71.147)
[12:17:38] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[12:18:21] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:20:57] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[12:23:08] *** Joins: mmhat (~mmh@55d47041.access.ecotel.net)
[12:25:35] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[12:26:43] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[12:28:35] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:28:36] *** Joins: chele_ (~chele@user/chele)
[12:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:30:08] *** Quits: stoicswe[m] (~deadlette@2001:470:69fc:105::d277) (Quit: You have been kicked for being idle)
[12:31:16] *** Quits: chele (~chele@user/chele) (Ping timeout: 265 seconds)
[12:32:16] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[12:32:33] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[12:38:37] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[12:39:18] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:42:09] *** Joins: AlexNoo_ (~AlexNoo@178.34.150.115)
[12:44:26] *** Quits: AlexNoo (~AlexNoo@178.34.150.115) (Read error: Connection reset by peer)
[12:49:15] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:50:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 250 seconds)
[13:06:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[13:06:53] <zincy> davean: Hey
[13:07:02] <zincy> Good meeting?
[13:09:58] *** Joins: vysn (~vysn@user/vysn)
[13:10:55] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:11:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[13:12:27] *** Quits: vysn (~vysn@user/vysn) (Client Quit)
[13:12:44] *** Joins: vysn (~vysn@user/vysn)
[13:14:22] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[13:18:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:19:25] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:19:58] *** Joins: chele (~chele@user/chele)
[13:22:01] *** Quits: chele_ (~chele@user/chele) (Ping timeout: 265 seconds)
[13:23:36] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:24:28] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:24:38] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[13:25:43] <carbolymer> will `act >>= (\x -> x `seq` pure x)` evalute x in this case?
[13:27:27] <Axman6> for one, it depends on which monad you're using
[13:27:46] <carbolymer> a stack, with IO on the bottom
[13:28:58] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 256 seconds)
[13:29:13] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[13:29:28] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[13:29:35] <tomsmeding> in plain IO, it would because bindIO is strict IIRC
[13:29:49] <tomsmeding> in a stack it might depend on what exactly is above it?
[13:29:59] <kuribas> carbolymer: That doesn't evaluate the function, it creates a new IO monad.
[13:30:21] <carbolymer> kuribas: by function you mean x?
[13:30:29] <carbolymer> tomsmeding: damn, I forgot that bind can be lazy
[13:30:29] <kuribas> carbolymer: no (\x -> ..)
[13:31:54] <tomsmeding> kuribas: point is whether writing that will ensure that x is evaluated before any further evaluation is done in the monad
[13:32:44] <carbolymer> yeah, going step back, I have `act :: m a`, I want to evaluate `a` when evaluating `act`
[13:32:45] <kuribas> tomsmeding: yes, to hnf
[13:32:46] <tomsmeding> like, readFile "a.txt" >>= (\x -> x `deepseq` pure x) >>= (\x -> deleteFile "a.txt" >> doSomethingWith x)
[13:32:57] <tomsmeding> kuribas: point is, depends on the monad
[13:33:06] <tomsmeding> >>= may be lazy, in which case no, it will not evaluate
[13:33:52] <tomsmeding> oh I misplaced some parens
[13:34:03] <tomsmeding> like, readFile "a.txt" >>= (\x -> x `deepseq` pure x >>= (\x -> deleteFile "a.txt" >> doSomethingWith x))
[13:34:05] <tomsmeding> I think
[13:34:52] <tomsmeding> carbolymer: what kind of monads are on top, if they require sequencing in the underlying IO monad for every >>= of the stack, then it'll probably evaluate
[13:35:04] <tomsmeding> but I think there are other monads that have lazy bind
[13:35:39] <tomsmeding> s/have lazy bind/do their bind magic within itself, only calling underlying >>= once in a while or something/
[13:35:44] <carbolymer> tomsmeding: ReaderT and ExceptT, I guess you're right, this should evaluate in my case
[13:35:51] <tomsmeding> yeah those are well-behaving
[13:36:11] <tomsmeding> was thinking along the lines of ContT or LogicT or what have you
[13:36:18] * tomsmeding doesn't actually know how those things work
[13:37:02] <carbolymer> yeah, in our team we aren't eager into jumping into that voodoo stuff, we have a lot of fun with laziness already ;]
[13:37:18] <tomsmeding> sounds smart :p
[13:44:00] <tomsmeding> carbolymer: example of non-strict >>= https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#line-1176
[13:44:15] *** Quits: xff0x (~xff0x@2001:1a81:5330:8c00:614e:b47b:9eaf:eaca) (Ping timeout: 265 seconds)
[13:44:33] *** AlexNoo_ is now known as AlexNoo
[13:45:05] *** Joins: xff0x (~xff0x@2001:1a81:5330:8c00:7ee9:82eb:bec8:3505)
[13:45:44] <carbolymer> tomsmeding: hmm, well, this works, i.e. GHCi sees exception: `(foo (pure undefined :: [Int]) >> pure 2)` where `foo act = act >>= (\x -> x `seq` pure x)`
[13:45:46] <tomsmeding> or hm, maybe it ends up being strict anyway
[13:45:51] <carbolymer> yeah, seems to be strict
[13:47:37] <carbolymer> hmm, but why?
[13:48:48] <tomsmeding> because even >> traverses its left argument
[13:48:59] <tomsmeding> I believe
[13:51:00] <carbolymer> > ((pure undefined :: [Int]) >> pure 2)
[13:51:02] <lambdabot>  [2]
[13:51:06] <carbolymer> tomsmeding: ^
[13:51:25] <tomsmeding> yeah traverses its left _monad_ argument
[13:51:35] <tomsmeding> Control.Monad.Writer.Lazy is an example though
[13:51:51] <tomsmeding> % foo act = act >>= (\x -> x `seq` pure x)
[13:51:51] <yahb> tomsmeding: 
[13:52:25] <tomsmeding> % Control.Monad.Trans.Writer.Strict.mapWriter (second (const "")) $ foo (pure undefined :: Writer String Int) >> pure 2
[13:52:25] <yahb> tomsmeding: ; <interactive>:78:67: error:; * Couldn't match type: WriterT String Identity; with: Control.Monad.Trans.Writer.Strict.WriterT w0 Identity; Expected: Control.Monad.Trans.Writer.Strict.Writer w0 a; Actual: WriterT String Identity a; NB: `Control.Monad.Trans.Writer.Strict.WriterT' is defined in `Control.Monad.Trans.Writer.Strict'; `WriterT' is defined 
[13:52:46] <tomsmeding> % Control.Monad.Trans.Writer.Strict.mapWriter (second (const "")) $ foo (pure undefined :: Control.Monad.Trans.Writer.Strict.Writer String Int) >> pure 2
[13:52:47] <yahb> tomsmeding: WriterT (Identity (*** Exception: Prelude.undefined; CallStack (from HasCallStack):; error, called at libraries/base/GHC/Err.hs:75:14 in base:GHC.Err; undefined, called at <interactive>:79:77 in interactive:Ghci34
[13:52:57] <tomsmeding> % Control.Monad.Trans.Writer.Lazy.mapWriter (second (const "")) $ foo (pure undefined :: Control.Monad.Trans.Writer.Lazy.Writer String Int) >> pure 2
[13:52:57] <yahb> tomsmeding: WriterT (Identity (2,""))
[13:52:59] <tomsmeding> boom
[13:53:29] <tomsmeding> (you need the mapWriter here because otherwise there is still, of course, a bottom in the written log)
[13:53:37] *** Joins: MarcoZ[m] (~ocramzmat@2001:470:69fc:105::1:35b0)
[13:53:43] *** MarcoZ[m] is now known as ocramz[m]
[13:53:51] <ocramz[m]> o/
[13:53:52] <tomsmeding> s/of course/I think/
[13:54:12] <tomsmeding> yeah there is because of how >>= works
[13:54:20] <tomsmeding> carbolymer: ^
[13:54:54] <tomsmeding> ocramz[m]: \o
[13:55:35] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[13:56:16] <kuribas> @hoogle $>
[13:56:17] <lambdabot> Data.Functor ($>) :: Functor f => f a -> b -> f b
[13:56:17] <lambdabot> Data.Functor.Compat ($>) :: Functor f => f a -> b -> f b
[13:56:17] <lambdabot> Data.Functor.Apply ($>) :: Functor f => f a -> b -> f b
[13:56:25] <kuribas> @hoogle <$
[13:56:25] <lambdabot> Prelude (<$) :: Functor f => a -> f b -> f a
[13:56:25] <lambdabot> Control.Monad (<$) :: Functor f => a -> f b -> f a
[13:56:25] <lambdabot> Control.Applicative (<$) :: Functor f => a -> f b -> f a
[13:56:31] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[13:56:47] <tomsmeding> clearly, you only need <$ when you rose above the world of functors
[13:57:07] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:57:50] <kuribas> what do you mean?
[13:58:17] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[13:58:35] *** Quits: slice (~slice@user/slice) (Quit: cya)
[13:58:37] <tomsmeding> dumb joke, because <$ is in Control.{Applicative,Monad} while $> is in Data.Functor
[13:59:02] <kuribas> right, strange indeed
[14:01:33] <carbolymer> tomsmeding: yeah, but https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.Writer.Lazy.html#line-206 has irrefutable patterns, so it kind of explicitly encodes laziness in Monad instance - so `>>` is strict by default?
[14:01:49] <ocramz[m]> imagine what kind of shouting match if we were to move <$ and $> to the same module
[14:02:21] <tomsmeding> carbolymer: note that WriterT doesn't specialise >>
[14:02:27] <tomsmeding> so the strictness can't come from >>
[14:02:37] <tomsmeding> ocramz[m]: heh yes
[14:03:50] <tomsmeding> carbolymer: note that the irrefutable patterns are not essential; that >>= can also be written: m >>= k = WriterT $ runWriterT m >>= \p -> runWriterT (k (fst p)) >>= \q -> return (fst q, snd p `mappend` snd q)
[14:04:00] <tomsmeding> using fst/snd instead of irrefutable patterns, same semantics
[14:04:29] <carbolymer> tomsmeding: but you demonstrated the laziness of `>>` in lazy Writer
[14:04:49] <tomsmeding> which inherits laziness from >>=
[14:04:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:05:55] <tomsmeding> I wonder if lazy Writer becomes strict if you do 'WriterT StrictIdentity', where StrictIdentity doesn't have 'm >>= k = k (runIdentity m)' but '!m >>= k = k (runIdentity m)'
[14:06:17] <carbolymer> tomsmeding: so that bind oneliner you wrote is also lazy?
[14:06:26] <tomsmeding> the fst/snd one? yes
[14:06:34] <tomsmeding> it's completely equivalent to the ~() version
[14:08:05] <carbolymer> I think I don't see it (yet)
[14:08:43] <tomsmeding> that equivalence? or where the laziness comes from
[14:08:49] <tomsmeding> I'm also not completely sure yet about the latter
[14:08:59] <carbolymer> the laziness
[14:15:39] <tomsmeding> ah, making Identity strict indeed defeats the laziness of lazy Writer
[14:16:10] <tomsmeding> carbolymer: https://paste.tomsmeding.com/iVwhUJ6g
[14:16:28] <tomsmeding> only difference between Identity and SIdentity is that SIdentity's bind operator is strict, as you can see
[14:16:40] <tomsmeding> mapWriter' is just mapWriter but then for SIdentity
[14:17:03] <tomsmeding> thing1 produces 'WriterT (Identity (2,""))', while thing2 produces WriterT (SIdentity (*** Exception: Prelude.undefined'
[14:17:17] <carbolymer> so now I don't understand why list's `>>` is strict ;]
[14:18:10] <tomsmeding> carbolymer: >> = *> for lists, and in *> you see that in order to produce items of the result list, you have to evaluate the spine of the left-hand argument to *>
[14:19:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:19:16] <tomsmeding> so the spine (i.e. monad structure) of the result list is dependent on the spine (monad structure) of the left argument
[14:19:33] <carbolymer> tomsmeding: so this is because of this pattern match: `xs *> ys  = [y | _ <- xs, y <- ys]` ?
[14:19:40] <tomsmeding> yeah talking about that one
[14:20:16] <tomsmeding> if xs is [], the result is []; if xs is _ : _, the result depends on ys
[14:20:28] <carbolymer> so this means that list comprehension is strict?
[14:20:38] <tomsmeding> so evaluating (xs >> ys) to WHNF requires evaluation of xs to WHNF -- to check whether it's [] or _:_
[14:21:00] <tomsmeding> it must be! because the outermost constructor of the result depends on the inputs :p
[14:21:00] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2663873d9a1bfed1dd8.dip0.t-ipconnect.de)
[14:21:21] <carbolymer> ok, now everything makes sense
[14:21:22] <carbolymer> ;]
[14:21:23] <tomsmeding> bit like 'if isJust x then 1 else 2' is strict in x, because, well, it must be
[14:21:29] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:21:34] <tomsmeding> even if there is no seq in sight
[14:21:48] <tomsmeding> carbolymer: does it? it only half does for me
[14:21:51] <tomsmeding> :p
[14:22:14] <tomsmeding> but yeah, lazy bind exists shrugs
[14:22:59] <carbolymer> tomsmeding: I mean, it still feels that "haskell is lazy, except [list of dozen corner cases"
[14:23:08] <tomsmeding> haskell is call-by-need
[14:23:16] <tomsmeding> stuff gets evaluated when the result depends on it
[14:23:33] <tomsmeding> and you can create artificial dependencies using seq/BangPatterns
[14:23:46] <kuribas> carbolymer: well, stuff has to be evaluated *some* time :)
[14:24:10] <tomsmeding> carbolymer: and then you have https://gitlab.haskell.org/ghc/ghc/-/issues/20687
[14:24:19] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2663873d9a1bfed1dd8.dip0.t-ipconnect.de) (Client Quit)
[14:24:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:25:53] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[14:26:12] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:26:22] <carbolymer> kuribas: well yes, until you use `void` ;]
[14:26:32] <carbolymer> or similar thing
[14:28:28] <tomsmeding> carbolymer: my feeling with stuff like this is more, I think I'm okay enough with the low-level rules, like I know what irrefutable patterns do in the common cases and things like that. But then people build skyscrapers on top of that, and hell if I know what the resonance index of a skyscraper is given the resonance indices of all the individual metal panels
[14:29:04] <tomsmeding> WriterT s Identity is fairly low building still
[14:29:15] <carbolymer> tomsmeding: that's when abstractions failed you, because you need to know internals to properly use them
[14:29:17] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 268 seconds)
[14:29:26] <tomsmeding> I guess
[14:29:35] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[14:30:03] <carbolymer> tomsmeding: and then you stick chewing gum to the metal panel - and resonance avoided!
[14:30:07] <tomsmeding> though Writer in particular also allows you to reason on a higher level: strict WriterT adds strictness, while lazy WriterT doesn't. So it's lazy only if the underlying monad is lazy and you're using lazy WriterT
[14:30:12] <tomsmeding> :D
[14:30:37] <tomsmeding> but that high-level reasoning doesn't transfer to other monads
[14:30:39] *** Joins: alx741 (~alx741@181.196.68.87)
[14:30:45] <carbolymer> yeah
[14:31:39] <maerwald> "laziness is a leaky abstraction"?
[14:31:44] <maerwald> I think I might agree on that
[14:32:24] <maerwald> at least when you reason operationally
[14:32:35] <kuribas> laziness isn't an abstraction
[14:32:35] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[14:33:00] <carbolymer> pipes are monads, so they sometimes leak
[14:33:24] <maerwald> kuribas: I think it is
[14:33:42] <maerwald> you can write lazy code in other languages like C, but it requires manual effort
[14:33:44] <tomsmeding> laziness is an abstraction, but for something else than we're talking about here
[14:33:56] <tomsmeding> the topic here was how monads abstract over certain instances of laziness
[14:33:59] *** Joins: m1dnight (~christoph@christophe.dev)
[14:34:24] <tomsmeding> what laziness abstracts over is the evaluation model, which we're not even talking about currently
[14:43:39] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:43:49] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[14:44:09] *** Joins: alzgh (~alzgh@user/alzgh)
[14:47:41] *** Joins: __monty__ (~toonn@user/toonn)
[14:51:44] *** Quits: Guest8054 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:53:43] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 250 seconds)
[14:53:44] *** Quits: kaychaks__ (sid236345@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:00:03] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:04:17] *** Joins: nschoe (~quassel@178.251.84.79)
[15:07:26] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:08:07] *** Joins: mark__ (~a@p200300ef973db1d9502293e1a26d2ca1.dip0.t-ipconnect.de)
[15:09:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[15:11:55] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[15:12:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:12:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:13:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[15:23:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:23:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:10] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[15:31:33] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 265 seconds)
[15:34:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:34:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:35:11] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:35:15] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:39:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:40:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:23] *** Joins: dlbh^ (~dlbh@h50.174.139.63.static.ip.windstream.net)
[15:43:43] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:45:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:45:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:54] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:50:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:51:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:51:15] *** Joins: fef (~thedawn@user/thedawn)
[15:54:21] <dminuoso> Is there a simple way to have a const generic over the number of arguments?
[15:54:48] *** Joins: Guest4216 (~Guest42@wificampus-098145.grenet.fr)
[15:54:57] <dminuoso> Background: Im writing out some servant code, and I have a bunch of handlers where Im writing: { foo = \_ _ _ -> forbidden, bar = \_ -> forbidden, quux = \_ _ _ _ _ -> forbidden } and so on
[15:55:26] <dminuoso> And it'd be much simpler if I could just write `API { foo = constG forbidden; bar = constG forbidden; quux = constG forbidden }`
[15:56:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:56:11] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[15:56:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:34] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[15:58:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:58:36] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:02:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:02:11] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[16:02:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:03:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:06:20] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[16:06:51] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[16:17:45] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: Textual IRC Client: www.textualapp.com)
[16:20:45] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[16:25:41] <tomsmeding> I think the only way would be with a printf-like type class, but that won't work here because the final return type doesn't have anything to distinguish it
[16:26:41] <tomsmeding> or hm, does seem to work?
[16:26:41] <dminuoso> Indeed, Ive been trying to crack this nut for a while now
[16:26:46] <dminuoso> How would you?
[16:27:04] <tomsmeding> % :set -XFlexibleInstances -XMultiParamTypeClasses
[16:27:04] <yahb> tomsmeding: 
[16:27:11] <tomsmeding> % class GenConst a t where constG :: a -> t
[16:27:12] <yahb> tomsmeding: 
[16:27:12] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:27:15] <tomsmeding> % instance GenConst a a where constG = id
[16:27:16] <yahb> tomsmeding: 
[16:27:20] <tomsmeding> % instance GenConst a t => GenConst a (s -> t) where constG x = const (constG x)
[16:27:20] <yahb> tomsmeding: 
[16:27:24] <merijn> I missed the preamble
[16:27:27] <merijn> What's the goal?
[16:27:39] <tomsmeding> % constG 42 'a' [] () :: Int
[16:27:40] <yahb> tomsmeding: ; <interactive>:85:1: error:; * No instance for (GenConst Integer Int) arising from a use of `constG'; * In the expression: constG 42 'a' [] () :: Int; In an equation for `it': it = constG 42 'a' [] () :: Int
[16:27:55] <tomsmeding> % (constG :: Int -> a -> b -> c -> Int) 42 'a' [] () :: Int
[16:27:55] <yahb> tomsmeding: 42
[16:28:13] <tomsmeding> okay type inference breaks completely so doesn't help
[16:28:25] <tomsmeding> merijn: https://ircbrowse.tomsmeding.com/day/lchaskell/2021/11/16?id=274123#trid274123
[16:28:39] <opqdonut> % constG (42::Int) 'a' [] () :: Int
[16:28:39] <yahb> opqdonut: 42
[16:28:43] <opqdonut> not completely
[16:28:45] <tomsmeding> oh!
[16:28:52] <tomsmeding> oh lol defaulting
[16:28:59] <opqdonut> yeh
[16:28:59] <tomsmeding> dminuoso: ^
[16:29:08] <merijn> ah
[16:29:32] <tomsmeding> this seems deceptively simple
[16:29:33] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:29:47] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:29:58] <tomsmeding> how are those instances not overlapping, by the way?
[16:30:00] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[16:30:10] <dminuoso> tomsmeding: Yeah no: https://gist.github.com/dminuoso/3465f25002106f618cf2d69a6deda9e8
[16:30:14] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:30:16] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[16:30:26] <dminuoso> Mmm
[16:30:31] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:30:33] <dminuoso> Probably doesn't help that `forbidden` is polymorphic either
[16:30:44] <tomsmeding> dminuoso: the problem is precisely that 'forbidden' is polymorphic
[16:30:53] <tomsmeding> are you ever going to put a function value in that?
[16:30:53] <dminuoso> Given the problem domain, it has to be
[16:31:03] <dminuoso> tomsmeding: forbidden just throws an exception.
[16:31:14] <tomsmeding> like, are you ever going to write 'constG f' with f of function type
[16:31:16] <dminuoso> You can think of it as type `IO a`
[16:31:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:31:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:31:34] <dminuoso> No
[16:31:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:31:57] <tomsmeding> if not, make the '->' instance OVERLAPPING and rewrite the first instance to 'instance {-# OVERLAPPABLE #-} a ~ b => GenConst a b where constG = id'
[16:32:07] <tomsmeding> untested :D
[16:32:28] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Client Quit)
[16:32:36] *** Quits: Guest4216 (~Guest42@wificampus-098145.grenet.fr) (Ping timeout: 256 seconds)
[16:32:43] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:32:56] <dminuoso> tomsmeding: Ah yes, that did the trick.
[16:33:04] <tomsmeding> \o/
[16:33:07] <dminuoso> My typeclass-fu is not good enough to understand why that even worked.
[16:33:07] *** kmein_ is now known as kmein
[16:33:29] <tomsmeding> it now always selects the -> instance if possible, which gives the const another argument
[16:33:33] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Client Quit)
[16:33:39] <tomsmeding> if it's not a function anymore, it always selects the first instance
[16:33:51] <dminuoso> That much I understand, but why did you move the `a ~ b` into a constraint?
[16:33:57] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:34:06] <tomsmeding> the difference between 'instance GenConst a a' and 'instance a ~ b => GenConst a b' is that with the 'a a' version, ghc has to have proven already that the two arguments are equal
[16:34:11] <tomsmeding> before being able to use the instance
[16:34:14] <dminuoso> Is that because instance selection occurs first, and you want that instance to be not preferred?
[16:34:30] <tomsmeding> with the ~ version, ghc can always select the instance, and then _learn_ that it must also have equality
[16:34:43] <tomsmeding> which then, subsequently, forces the polymorphic 'forbidden' to have the right type
[16:34:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:34:49] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[16:34:51] <dminuoso> Ohh
[16:34:56] <dminuoso> I kind of..
[16:34:59] <dminuoso> Not quite.
[16:35:05] <tomsmeding> ghc can't prove that GuardM a ~ GuardM [Server], but it can _instantiate_ a to [Server]
[16:35:28] <dminuoso> Alright. Next up, I have to cook up generic code that can generically set `forbidden` on any handler with this!
[16:35:35] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[16:35:43] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[16:35:51] <dminuoso> (Arguably, if I have generics, I could just generically do a nested const...)
[16:36:16] <dminuoso> 14:05:05 tomsmeding | ghc can't prove that GuardM a ~ GuardM [Server], but it can _instantiate_ a to [Server]
[16:36:19] <dminuoso> Mmm
[16:36:49] <dminuoso> I think there's an earlier piece that Im missing
[16:36:52] <tomsmeding> the key thing here, I believe, is that type classes are _open_
[16:37:18] <tomsmeding> if they were closed, i.e. ghc could be sure there are no more instances floating around that it doesn't know of, then the ~ version and the 'a a' version would be equivalent
[16:37:45] <tomsmeding> but because type classes are open, ghc doesn't know that there might not be some other 'GenConst a b' instance around that it should select if the two arguments are _not_ equal
[16:38:00] <dminuoso> Maybe Im actually confused about your construction of the base case to begin with
[16:38:07] <tomsmeding> so ghc can't pick the 'GenConst a a' instance if it isn't already sure that the arguments are the same
[16:38:36] <tomsmeding> whereas writing 'GenConst a b' precludes the existence of any other such instance, so ghc can freely pick this one
[16:38:48] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[16:38:57] <tomsmeding> dminuoso: the base case, as in, const with zero ignored arguments is id?
[16:39:01] <dminuoso> Yes
[16:39:22] *** Quits: nschoe (~quassel@178.251.84.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:39:25] <dminuoso> Oh.
[16:39:31] <dminuoso> I get it.
[16:39:40] * tomsmeding is not quite sure what your confusion as
[16:39:51] <tomsmeding> but "I get it" sounds good :D
[16:39:53] <dminuoso> Yeah no, I think Ive looked at this problem for far too long
[16:40:09] <tomsmeding> 13:59 <tomsmeding> this seems deceptively simple
[16:40:11] <merijn> dminuoso: My advice would be: just write the lambdas :p
[16:40:17] <tomsmeding> I didn't expect this to work
[16:40:30] <dminuoso> merijn: I have a lot of them with varying arguments.
[16:40:50] <merijn> dminuoso: Write a TH function or just write them out once? :p
[16:40:51] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:40:51] <tomsmeding> dminuoso: do you see why this breaks completely if you ever pass a function value to constG ?
[16:41:14] <tomsmeding> % constG (id :: Int -> Int) () [] :: Int -> Int
[16:41:14] <yahb> tomsmeding: ; <interactive>:88:1: error:; * Overlapping instances for GenConst (Int -> Int) (Int -> Int) arising from a use of `constG'; Matching instances:; instance [safe] forall a. GenConst a a -- Defined at <interactive>:83:10; instance [safe] forall a t s. GenConst a t => GenConst a (s -> t) -- Defined at <interactive>:84:10; * In the expression: constG (id :: Int -> Int) () [] ::
[16:41:15] <merijn> Write a helper for 1-10 (or whatever) arguments with a number at the end of the name and don't think about it again
[16:41:25] <merijn> Utils.hs to the rescue
[16:41:57] <tomsmeding> yeah, functions not working make me sort of prefer merijn's suggestion of const3 const4 const5 const6
[16:42:17] <dminuoso> Perhaps if this was ever needed
[16:42:34] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[16:45:46] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:46:45] <merijn> I mean, is it ugly to handwrite that function 10 times? Sure. It's also foolproof and unlikely to ever break or need any maintenance
[16:46:49] <merijn> so who cares
[16:47:08] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[16:47:15] <dminuoso> Perhaps you're right. Another reason is that it doesnt require a trip to #haskell and having luck whether tomsmeding is around to make sense of it.
[16:47:22] <dminuoso> Mmm
[16:47:52] <tomsmeding> :p
[16:48:19] <dminuoso> tomsmeding: To continue the previous, why would it have to prove `GuardM a ~  GuardM [Server]`?
[16:48:26] <tomsmeding> who knew that I would be in a position to spread type class fu
[16:48:42] <tomsmeding> dminuoso: for the original 'GenConst a a' instance
[16:49:17] <tomsmeding> the constraint at that point is 'GenConst (GuardM a) (GuardM [Server])', because the value it's passed is 'forbidden', and the value it should produce is GuardM [Server]
[16:49:38] <tomsmeding> to be allowed to even look at that 'GenConst a a' instance, ghc has to prove that those arguments are equal
[16:49:54] <tomsmeding> because there might be another 'GenConst a b' instance around, technically
[16:50:03] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[16:50:10] <tomsmeding> overlapping instances notwithstanding, I guess
[16:50:45] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[16:50:53] <wmacmil> whats the easiest way to work with vanilla mutually inductive datatypes in haskell? for gadts?
[16:50:54] <dminuoso> tomsmeding: But why cant GHC simply insert its `a ~ [Server]` constraint itself?
[16:51:13] <tomsmeding> dminuoso: because there might be another 'GenConst a b' instance around :p
[16:51:13] <dminuoso> This might sound a bit dumb, and perhaps ignorant of what you just wrote
[16:51:15] <dminuoso> Mmm
[16:51:22] <tomsmeding> which it might have to select if it turns out that a ~ () or something
[16:51:23] <wmacmil> i.e. how do you replicate the mutual keyword from agda
[16:51:42] <tomsmeding> wmacmil: gadts are already mutually recursive by default in haskell?
[16:52:09] <tomsmeding> everything is mutually recursive in haskell, except for template haskell stuff
[16:52:20] <wmacmil> cool :)
[16:52:54] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[16:53:35] <dminuoso> tomsmeding: But GHC already sees all instances in scope, the resolution happens right here. My use of constG doesnt produce any GenConst constraint, why would GHC care whether someone on the moon wrote an instance for that?
[16:53:48] <tomsmeding> dminuoso: no, type classes are open, ghc cannot assume it sees all instances in scope
[16:54:02] <tomsmeding> compare 'type family F a ; type instance F Int = ... ; ...' with 'type family F a where ...'
[16:54:06] <tomsmeding> the first is open, the second is closed
[16:54:10] <tomsmeding> type classes are always open
[16:54:42] <tomsmeding> type classes are supposed to be coherent
[16:54:43] <dminuoso> tomsmeding: That cant be entirely true, since clearly you can have more specific instances in some cases.
[16:55:06] <tomsmeding> ghc isn't allowed to instantiate the same type class with two different dictionaries in two different situations
[16:55:11] <tomsmeding> so it has to be careful
[16:55:23] <tomsmeding> dminuoso: with overlapping instances you mean?
[16:56:07] <tomsmeding> indeed, I believe ghc actively optimises code based on the assumption that two dictionaries of the same type class are always equal
[16:56:43] <dminuoso> Well you can write this:
[16:56:43] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Remote host closed the connection)
[16:56:47] <dminuoso> % class F a where f :: a
[16:56:47] <yahb> dminuoso: 
[16:56:48] <tomsmeding> see the Note [NOINLINE someNatVal] here: https://hackage.haskell.org/package/base-4.15.0.0/docs/src/GHC-TypeNats.html
[16:56:52] <dminuoso> % instance F [a] where f = []
[16:56:52] <yahb> dminuoso: 
[16:56:58] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:57:21] <tomsmeding> in particular the second-to-last paragraph of that Note
[16:57:36] <dminuoso> tomsmeding: If GHC was in a complete open world assumption, GHC was *never* allowed to select that instance for `[T]`, since someone on the moon - outside the scope of the compilation unit - could have written an instance F [T]
[16:57:49] <dminuoso> (Which would be more specific)
[16:57:55] <dminuoso> These are not overlapping, mind you
[16:58:00] <dminuoso> Just more specific
[16:58:04] <tomsmeding> they are, right?
[16:58:13] <tomsmeding> % instance F [Int] where f = Maybe
[16:58:13] <yahb> tomsmeding: ; <interactive>:6:28: error:; * Data constructor not in scope: Maybe :: [Int]; * Perhaps you meant variable `maybe' (imported from Prelude)
[16:58:16] <dminuoso> Well sure
[16:58:21] <tomsmeding> % instance F [Int] where f = ()
[16:58:21] <yahb> tomsmeding: ; <interactive>:7:28: error:; * Couldn't match expected type `[Int]' with actual type `()'; * In the expression: (); In an equation for `f': f = (); In the instance declaration for `F [Int]'
[16:58:29] <tomsmeding> OH it's a class
[16:58:35] <tomsmeding> % instance F [Int] where f = []
[16:58:35] <yahb> tomsmeding: 
[16:58:35] <dminuoso> % instance F String where f = "foo"
[16:58:35] <yahb> dminuoso: 
[16:58:43] <dminuoso> % f @String
[16:58:44] <yahb> dminuoso: ; <interactive>:10:1: error:; * Overlapping instances for F String arising from a use of `f'; Matching instances:; instance [safe] F [a] -- Defined at <interactive>:5:10; instance [safe] F String -- Defined at <interactive>:9:10; * In the expression: f @String; In an equation for `it': it = f @String
[16:58:46] * tomsmeding is confused
[16:58:47] <dminuoso> Oh
[16:58:48] <tomsmeding> right
[16:58:49] <dminuoso> Hold on
[16:58:50] <tomsmeding> there you go
[16:59:04] <tomsmeding> which you can fix with OVERLAPPING and OVERLAPPABLE pragmas
[16:59:15] <tomsmeding> which are more specific versions of the earlier INCOHERENT pragma
[16:59:16] <tomsmeding> ;)
[17:00:21] <dminuoso> tomsmeding: The error message was that the type variable 'a0' is ambiguous though
[17:00:34] <dminuoso> But I guess your point is:
[17:01:11] <dminuoso> GHC doesnt have a mechanism to monomorphize and introduce that constraint in the type checker in general, since in the general case it doesnt make sense in an open world assumption
[17:01:31] <dminuoso> Since I might as well have written something like `f = genConst forbidden` and exported `f`
[17:01:46] <dminuoso> Err `f = constG forbidden`, and exported `f`. here we go.
[17:02:00] <tomsmeding> I think so, yes
[17:02:13] <tomsmeding> the justifications and details of the algorithm I also don't know :p
[17:02:19] <dminuoso> Strictly speaking, inside this compilation unit, GHC could have safely made that unfiication
[17:02:31] <dminuoso> Or introduced that constraint
[17:02:50] <tomsmeding> I suspect that writing that F [T] instance in another module would be technically invalid
[17:03:14] <tomsmeding> just like defining the same name in two different compilation units in C/C++ might work sometimes but is technically undefined behaviour
[17:03:40] <tomsmeding> but this is my feeling, not anything concrete
[17:04:23] <merijn> Looks like there might be a 2022 NL-FP \o/
[17:04:29] <merijn> But it won't be in January >.>
[17:04:44] <tomsmeding> \o/
[17:04:47] <tomsmeding> saw the email
[17:05:15] <maerwald> merijn: like... remote?
[17:05:23] <merijn> I think wouter forgot to replace 2021 with 2022 though xD
[17:06:02] <tomsmeding> heh yes
[17:06:10] <merijn> I see basically zero value in a remote NL-FP. Better off cancelled than remote
[17:06:37] <maerwald> I haven't checked whether my front door still works
[17:07:19] <merijn> Remote conferences already suck with conferences that have actual money to pay for online infrastructure/streaming >.>
[17:09:21] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[17:10:00] *** Quits: pfurla__ (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Quit: gone to sleep. ZZZzzzâ€¦)
[17:10:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[17:11:17] <dminuoso> Id rather spend 800EUR on a national compulsory vaccination, and then spend another 800 on a cool conference, than some remote conference where you cant hang out with people and talk to them over a beer.
[17:12:26] <maerwald> Does tea not work for you?
[17:12:29] <maerwald> :D
[17:13:08] <dminuoso> Tea, beer, combined, I dont care.
[17:13:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:14:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[17:15:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[17:15:33] *** Joins: Carras (~carras@2001:f40:904:54b9:f507:3f1e:f14f:9046)
[17:15:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[17:15:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:16:27] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[17:16:47] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[17:18:17] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[17:21:32] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[17:23:04] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:27:59] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[17:28:02] *** Quits: Carras (~carras@2001:f40:904:54b9:f507:3f1e:f14f:9046) (Remote host closed the connection)
[17:28:32] *** Joins: Carras (~carras@2001:f40:904:54b9:cc2c:1730:8d25:ddca)
[17:29:07] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[17:30:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:33:27] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[17:33:37] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 250 seconds)
[17:35:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:36:31] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-12d4-e982-14bb-9a24.fixed6.kpn.net)
[17:37:39] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:38:36] *** Joins: aman (~aman@user/aman)
[17:38:57] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[17:40:09] *** Joins: pfurla (~pfurla@201.17.118.230)
[17:42:16] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:42:32] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[17:43:11] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[17:44:31] *** Quits: emerson (~emerson@libera/staff/emerson) (Quit: Quitting)
[17:44:40] *** Joins: benin (~benin@183.82.27.20)
[17:48:13] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:49:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4)
[17:49:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:53:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[17:53:41] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[17:56:07] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[18:01:49] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:03:07] *** Joins: cfricke (~cfricke@user/cfricke)
[18:05:01] *** Joins: acarrico1 (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[18:08:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:08:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:08:42] *** Joins: wroathe (~wroathe@user/wroathe)
[18:09:58] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:11:08] *** Joins: thyriaen (~thyriaen@dynamic-077-013-170-047.77.13.pool.telefonica.de)
[18:12:00] <Guest42> if `(+) :: Num a => a -> a -> a`, then is this a function defined somewhere in Prelude, or is it a compiler intrinsic?
[18:13:45] <Guest42> all I could find from hackage was the Num type class definition
[18:13:47] <Guest42> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Num.html#%2B
[18:14:18] *** Joins: vysn (~vysn@user/vysn)
[18:14:21] <maerwald> Guest42: the instance are right below that
[18:15:53] <Guest42> so for example Integer defines `(+) = integerAdd`
[18:16:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[18:16:47] <Guest42> trying to click it leads me nowhere, I'll try cloning the source for myself I guess
[18:16:48] <Guest42> https://hackage.haskell.org/package/base-4.16.0.0/ghc-bignum-1.2/src/GHC-Num-Integer.html#integerAdd
[18:16:52] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[18:16:52] *** Joins: asm (~alexander@user/asm)
[18:17:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:18:11] <Guest42> 640k objects o_O
[18:18:36] <maerwald> there's also integer-simple
[18:18:37] <Guest42> ghc's my favourite compiler, it always feels like pure magic
[18:18:48] <maerwald> https://hackage.haskell.org/package/integer-simple-0.1.1.1/docs/src/GHC.Integer.Type.html#plusInteger
[18:18:49] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[18:18:52] <maerwald> different bignum backend
[18:18:53] <Guest42> maerwald: yes but what are they?
[18:19:10] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[18:19:29] <maerwald> ghc-bignum depends on libgmp
[18:20:00] <Guest42> so compiler instrinsics?
[18:20:31] <Guest42> integerAdd is in the end a call into GMP?
[18:20:46] <Guest42> or is there something below integerAdd too
[18:21:09] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[18:21:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:22:22] *** Joins: zincy_ (~zincy@host-92-8-239-246.as13285.net)
[18:22:50] *** Quits: zincy_ (~zincy@host-92-8-239-246.as13285.net) (Remote host closed the connection)
[18:22:55] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[18:24:14] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 268 seconds)
[18:24:15] *** Quits: acarrico1 (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Quit: Leaving.)
[18:24:15] *** Joins: [Kalisto]_ (~nico@user/kalisto/x-8968079)
[18:24:31] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[18:24:31] <lortabac> Guest42: most of these primitives are just FFI calls to C code
[18:24:39] *** [Kalisto]_ is now known as [Kalisto]
[18:26:02] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzzâ€¦)
[18:26:13] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Client Quit)
[18:26:31] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[18:28:42] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:28:51] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Client Quit)
[18:29:09] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[18:30:48] *** Joins: nvmd (~nvmd@user/nvmd)
[18:30:54] <merijn> lortabac: Most of them are primitives that are just primitives in the compiler, tbh
[18:31:30] <merijn> But the Integer stuff is just libgmp calls, yeah
[18:31:35] *** Quits: mark__ (~a@p200300ef973db1d9502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:31:57] *** Joins: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de)
[18:32:52] <merijn> Guest42: Most of the primitives are "in" ghc-prim (which mostly exists for typechecking, the primitives themselves are implemented inside GHC's codegen)
[18:32:57] <merijn> Guest42: See, for example, https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/GHC-PrimopWrappers.html
[18:33:25] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[18:33:47] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:33:48] <merijn> Guest42: Which also shows that Int/Word/Float/Double/Char/etc. are just thing wrappers around primitive types: https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/GHC-Types.html#t:Int
[18:35:13] <lortabac> the definition of Int# is: data Int# :)
[18:35:13] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:35:58] <merijn> Same for stuff like "gtChar# = gtChar#"
[18:37:34] <boxscape_> IIRC it used to be a lot of `gtChar# = let x = x in x` - I wonder why it was changed
[18:37:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:37:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:37:55] *** Joins: wroathe (~wroathe@user/wroathe)
[18:38:24] <merijn> I don't recall it being that, so that must've been a *long* time ago
[18:38:32] <boxscape_> hmm
[18:39:55] *** Quits: Carras (~carras@2001:f40:904:54b9:cc2c:1730:8d25:ddca) (Ping timeout: 250 seconds)
[18:40:09] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[18:40:34] *** Joins: jkaye (~jkaye@BELVEDERE-T.ear2.Denver1.Level3.net)
[18:40:36] *** Joins: gentauro (~gentauro@user/gentauro)
[18:40:56] *** Joins: mimmy (~mimmy@146.70.75.156)
[18:41:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:41:30] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[18:41:53] <boxscape_> looking through the commits there's not a ton of instances of this so maybe I'm misremembering
[18:42:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:42:39] <boxscape_> wait I need to grep the ghc-prim submodule 
[18:43:01] <boxscape_> okay no difference
[18:43:14] *** Quits: Unode (~Unode@194.94.44.220) (Quit: Not that cable)
[18:43:52] <boxscape_> https://stackoverflow.com/questions/15893524/what-is-the-meaning-of-let-x-x-in-x-and-data-float-in-ghc-prim-in-haskell
[18:44:35] <boxscape_> https://hackage.haskell.org/package/ghc-prim-0.3.1.0/docs/src/GHC-Prim.html has a lot of `let x = x in x`
[18:45:16] <boxscape_> ...clearly I need to hone my grepping skills if I wasn't able to find this with grepping through commits
[18:45:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[18:45:55] *** Joins: Unode (~Unode@194.94.44.220)
[18:47:28] <boxscape_> merijn it was changed in ghc-prim 0.5.0.0, uploaded 2016-05-21
[18:48:59] *** Quits: srk (~sorki@user/srk) (Quit: ZNC 1.8.1 - https://znc.in)
[18:49:18] *** Joins: srk (~sorki@user/srk)
[18:50:39] *** Joins: John_Ivan (~John_Ivan@user/john-ivan/x-1515935)
[18:50:56] <John_Ivan> hi. anyone want to teach me haskell?
[18:51:50] *** Quits: dlbh^ (~dlbh@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[18:52:15] <sm> https://wiki.haskell.org/Haskell , ready set go!
[18:52:33] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Quit: Leaving)
[18:53:04] <John_Ivan> sm, without inkhorn please.
[18:53:08] <dminuoso> John_Ivan: Depends, are you ready to pay usual developer consulting fees?
[18:53:43] <dminuoso> @where cis194
[18:53:44] <lambdabot> https://www.seas.upenn.edu/~cis194/spring13/lectures.html
[18:54:16] <dminuoso> This is a high quality haskell course that is widely regarded in this community
[18:54:21] <John_Ivan> dminuoso, sorry. I don't abide by inkhorns ;/
[18:54:30] <dminuoso> Im not sure why you think there's an inkhorn here, but okay
[18:54:32] <sm> @where htac
[18:54:32] <lambdabot> "Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
[18:55:19] <John_Ivan> right. more inkhorn material.
[18:55:25] * John_Ivan sighs
[18:55:33] <dminuoso> Not sure what you're asking for.
[18:55:55] <John_Ivan> I suppose I'm not asking for anything.
[18:56:17] * geekosaur suddenly wants to misquote Hillel
[18:57:10] <shapr> oh yeah?
[19:00:01] <dminuoso> "That which is yummy to you, do cook it for another. That is the whole dish. The rest is just side dishes. Now go and eat"
[19:00:04] <dminuoso> geekosaur: ^- this?
[19:00:17] <geekosaur> roughly yes
[19:00:19] <geekosaur> https://www.chabad.org/library/article_cdo/aid/689306/jewish/On-One-Foot.htm
[19:00:58] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[19:01:03] <geekosaur> problem being I can't come up with a pithy enough Haskellism to teach on one foot :)
[19:01:21] * John_Ivan removes his mask
[19:01:30] <John_Ivan> it is I, Scooby.
[19:01:35] * dminuoso idly wonders about the lack of division of powers in old religion.
[19:01:57] <merijn> Now I'm curious what the hell an inkhorn is in this context
[19:02:10] <dminuoso> Maybe anything that closely resembles writing?
[19:02:23] <dminuoso> Who knows, they could be illiterate
[19:02:46] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 265 seconds)
[19:02:53] * geekosaur thinking they're the opposite of me, they want a youtube or something
[19:03:11] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[19:03:38] <John_Ivan> I already know Haskell, sorry to break your bubble.
[19:03:51] * John_Ivan plot twist.
[19:03:56] <dminuoso> That's what I thought too
[19:04:04] <dminuoso> Then I discovered functions.
[19:04:47] <maerwald> John_Ivan: that's amazing
[19:05:54] <John_Ivan> dminuoso, yeah. damn inkhorns. them applicative functors and their monadic rules.
[19:06:09] <John_Ivan> burn all higher order level functions
[19:06:40] <John_Ivan> "function pointer" was a better substitute
[19:06:43] * John_Ivan slaps Jill
[19:06:53] <John_Ivan> you had one job Jill. one job
[19:07:03] <John_Ivan> and that was to not go apeshit with your terminology.
[19:07:08] <John_Ivan> I don't care if math is your background
[19:07:13] <geekosaur> wat
[19:07:17] <John_Ivan> when in Rome, you do as the Romans do.
[19:07:38] <John_Ivan> don't ever let a mathematician touch a compiler
[19:07:45] *** Quits: aman (~aman@user/aman) (Quit: aman)
[19:07:47] <John_Ivan> they will start producing the plague
[19:08:48] <yushyin> What is going on? o.O
[19:09:37] <merijn> yushyin: (an attempt at) trolling, presumably
[19:09:52] <maerwald> I could see this happening from a mile away
[19:10:23] <dminuoso> maerwald: Is that a nautic mile?
[19:10:54] <Franciman> hi maerwald how are you?
[19:11:00] <John_Ivan> side effects my ass and zypper my balls
[19:11:03] <maerwald> So... after I've read some non-trivial code using freer-simple, I'm starting to form the opinion that I dislike effects systems that are used for high-level effects
[19:11:08] <merijn> @where ops
[19:11:08] <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
[19:11:24] *** ChanServ sets mode: +o geekosaur
[19:11:27] <merijn> maerwald: See, I just skipped all that effort
[19:11:33] *** geekosaur sets mode: +b *!*@*user/john-ivan/x-1515935
[19:11:34] *** John_Ivan was kicked by geekosaur (John_Ivan)
[19:11:34] <boxscape_> what counts as a high-level effect?
[19:11:38] <merijn> maerwald: And went straight to "I don't think they're worth the effort"
[19:11:48] <merijn> boxscape_: The various composable effects stuff
[19:11:55] <boxscape_> I see
[19:11:56] <maerwald> it's impossible to understand what the code does, unless you constantly jump back and forth between the effect handlers and re-examine the code over and over again
[19:12:21] *** geekosaur sets mode: -o geekosaur
[19:12:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[19:12:32] <geekosaur> and I think I already like litharge :)
[19:13:20] <maerwald> I mean... low-level effects like filesystem operations, maybe
[19:13:24] *** Joins: max22- (~maxime@2a01cb0883359800502e2c31bca551ab.ipv6.abo.wanadoo.fr)
[19:13:35] <maerwald> but complex effects make it really impossible to understand behavior
[19:14:59] <maerwald> and... you can't understand an effect handler isolated
[19:15:22] <Franciman> that's the curse of delconts, right?
[19:15:26] <Franciman> you jumping around
[19:15:29] <maerwald> so the code structure is bad as well
[19:16:19] <maerwald> if the domain is spaghetti... better keep it in one pot
[19:16:49] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[19:17:08] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[19:17:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[19:17:59] <Franciman> is mtl style better, tho maerwald ?
[19:18:12] <maerwald> Franciman: mtl are not high-level effects
[19:18:23] <Franciman> ah I don't know what they are then
[19:18:25] <Franciman> sorry
[19:19:14] <maerwald> think of effects as business domain effects
[19:19:45] <Franciman> like, downloadPirateMusic
[19:19:48] <Franciman> for a clone of napsters?
[19:19:57] <maerwald> now you read the code... and your functions fire different effects everywhere and they are intertwined, maybe through remote state... so you jump to the handler, but that doesn't make sense on its own
[19:21:03] <Franciman> so you are basically arguing that having this concept gets you nothing because it's so powerful you get fully side effected code
[19:21:05] <Franciman> it's like coding in C
[19:21:39] <maerwald> no, the separation of effects code and interpreters clouds control flow and breaks reasoning about actual behavior
[19:21:41] <Hecate> merijn: oh, I was looking for you! 
[19:21:51] * merijn hides
[19:21:52] <Hecate> merijn: What are you doing these days, Haskell-wise?
[19:22:14] <merijn> atm nothing :p
[19:22:30] <Hecate> merijn: needing to rest, or is boredom eating at you? :p
[19:22:42] <Franciman> maerwald: to be more clear, you don't know what the heck is going on in your code, when using the damn abstraction?
[19:22:57] <maerwald> Franciman: I don't use effects systems in my own code
[19:23:34] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:24:46] <merijn> Hecate: thesis is at the committee, so no need to touch my phd code for awhile and I still haven't fixed any of my CIs from Travis breaking, so I can't be arsed to update stuff until I fix that >.>
[19:25:01] <Franciman> merijn: what is your phd thesis about?
[19:25:14] *** Quits: thyriaen (~thyriaen@dynamic-077-013-170-047.77.13.pool.telefonica.de) (Quit: Leaving)
[19:25:16] <Franciman> maerwald: wise
[19:25:18] <Franciman> I see
[19:25:53] <maerwald> merijn: I might have broken your travis xD
[19:26:14] <merijn> Franciman: Supposedly graph processing on GPUs. In reality it's me whining that everyone's terrible at empirical computer science and showing that 5 years is just enough time to built infrastructure to *begin* research :p
[19:26:32] <maerwald> Franciman: I mean... to understand effects code, you either need an *intuition* about the effects or *total understanding* of the interpreters
[19:26:40] <merijn> maerwald: Naah, ran out of free minutes in half a month after they limited open source CI time
[19:26:44] <Franciman> ggwp merijn 
[19:26:52] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:26:52] <merijn> maerwald: So I should migrate to github actions
[19:27:20] <Franciman> maerwald: unfortunately I am still miles away from learning about these stuff
[19:27:24] <Franciman> that's why I asked
[19:27:27] <maerwald> intuition is difficult if your effects are very high-level
[19:27:49] <Franciman> i like conal's idea of denotational semantics design
[19:28:02] <Franciman> for very high level things
[19:28:12] <dminuoso> Franciman: The idea is good and noble, but I think its hard to employ in a lot of situations.
[19:28:14] <Franciman> if I interpret it correctly, sorry if I don't 
[19:28:23] <Franciman> you deliver a dumbass easy model
[19:28:26] <merijn> Hecate: tbh, I haven't really done any programming "as hobby" since, like, Advent of Code last year and with a new round of semi-lockdown, I doubt I will do any any time soon
[19:28:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk)
[19:28:27] <dminuoso> The example frequently picked, namely that of an image transformation library, is extremely cherry picked.
[19:28:32] <maerwald> merijn: I mean I broke github actions
[19:28:43] <Franciman> I see dminuoso 
[19:28:45] <Franciman> thanks
[19:28:54] <merijn> Hecate: I have plans to try and sucker the people on my new project into letting me do it in Haskell, but we'll have to see :p
[19:29:09] <maerwald> merijn: github actions environments are not fixed... they are rebuilt every week and may change randomly
[19:29:22] <maerwald> that has some merits though
[19:29:29] <Franciman> dminuoso: I mostly think about it liek this, you define your language, your laws
[19:29:34] <merijn> maerwald: Well, that's one reason why I haven't bothered fixing anything :p
[19:29:36] <Franciman> and give a dumbass easy model for it
[19:29:36] <dminuoso> Franciman: And on a high level it becomes quickly hard, because at some point you need to prove an equivalence of your implementation to mathematical models.
[19:29:45] <dminuoso> Franciman: so it's easier on a small level
[19:29:48] <Franciman> I see
[19:29:52] <merijn> I made a new command to migrate the Travis setups from Haskell-CI to the github ones
[19:30:00] <merijn> But phadej hasn't commented on that PR yet
[19:30:00] <Franciman> for high level we should then give up to the our lord compositionality?
[19:30:02] <Franciman> I hope
[19:30:06] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:30:08] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: You have been kicked for being idle)
[19:30:12] <merijn> Not sure if he's still working much on Haskell-CI
[19:30:16] <dminuoso> What does "compositionality" even mean?
[19:30:25] <Franciman> that's the lord part
[19:30:27] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[19:30:27] *** Parts: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) ()
[19:30:31] <Franciman> I don'tu nderstand what it means
[19:30:35] <Franciman> just try to make things compose
[19:30:39] <dminuoso> Denotational semantics has little to do with expression effects, it's more about linking a programs meaning to mathematical models.
[19:30:40] <Franciman> and say hey that's from CT
[19:30:43] <Franciman> that's why it works
[19:31:30] <maerwald> high-level effects are like microservices... if you get the boundaries wrong, you're f****d
[19:32:11] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:32:42] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-12d4-e982-14bb-9a24.fixed6.kpn.net) (Quit: Leaving)
[19:33:01] <Franciman> I understand thanks dminuoso 
[19:33:04] <Franciman> and maerwald 
[19:33:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:33:17] <Franciman> I will probably try to use comonads to infer purity, on the other hand, in my journey
[19:33:29] <Franciman> seems easier to start with
[19:36:47] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:37:04] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:37:06] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 260 seconds)
[19:37:37] *** Joins: zebrag (~chris@user/zebrag)
[19:38:00] *** Quits: benin (~benin@183.82.27.20) (Quit: The Lounge - https://thelounge.chat)
[19:39:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:39:14] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[19:40:08] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:41:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:43:40] *** Joins: MidAutumnMoon3 (~MidAutumn@user/midautumnmoon)
[19:44:06] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Ping timeout: 256 seconds)
[19:44:06] *** MidAutumnMoon3 is now known as MidAutumnMoon
[19:45:46] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:46:04] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[19:47:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:49:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: Reconnecting)
[19:49:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:50:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:52:45] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:53:02] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[19:53:03] *** Joins: xkuru (~xkuru@user/xkuru)
[19:54:43] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:57:33] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:01:40] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:01:58] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:05:38] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:05:56] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:06:58] <dolio> "Compositionality" means that you can understand something by understanding smaller pieces of it individually, together with understanding the ways of combining those pieces.
[20:07:24] <dolio> Rather than having to understand the entire system as an irreducible unit.
[20:09:36] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:09:54] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:10:17] <dolio> For instance, some category theorists are trying to figure out how Petri nets form a topos, so that instead of just figuring out an entire net as a blob, you might be able to analyze it as a product/sum/exponential/... of smaller nets.
[20:10:48] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[20:13:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:14:18] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 265 seconds)
[20:14:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[20:15:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:16:10] *** Joins: Guest68 (~Guest68@2401:4900:1f2a:2065:285b:1f0c:e2ab:1175)
[20:16:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:17:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:18:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[20:18:36] <Guest68> Iam trying to create an API using servant
[20:18:37] <Guest68> To begin I want to load some config which includes config db creds
[20:18:37] <Guest68> What is the best practice to do so
[20:18:38] <Guest68> 1. create a config.json file read interpret it as a data type and pass it to server
[20:18:38] <Guest68> 2. read each parameter from env variables and create a data type or map and pass it to the server
[20:19:37] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c480:7b03:c5d:3876) (Ping timeout: 265 seconds)
[20:19:37] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[20:19:47] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:20:33] <ocramz[m]> @Guest68 I made a little utility package to embed environment variables into the binary itself https://hackage.haskell.org/package/include-env-0.4.0.0 . I use it for building on CI 
[20:20:33] <lambdabot> Unknown command, try @list
[20:20:39] *** Joins: EvanR (~evan@user/evanr)
[20:20:47] <ocramz[m]> s/@//
[20:21:39] *** Joins: moet (~moet@mobile-166-171-251-187.mycingular.net)
[20:21:56] <ocramz[m]> this requires you trust your CI agent. I use repo secrets, works well with github actions
[20:22:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:22:36] <Guest68> Sounds cool I'll check it out ..
[20:23:37] <Guest68> But wouldn't this be a problem if I dockerize the app
[20:24:03] <Guest68> if it was env vars I could deploy from the same image to all envs
[20:25:27] <ocramz[m]> where do you build your docker images?
[20:27:10] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:27:28] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:27:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:27:49] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 250 seconds)
[20:28:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced)
[20:29:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[20:29:39] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[20:30:52] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:31:11] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:31:20] <Guest68> Oh I am learning
[20:31:24] <Guest68> now locally
[20:31:42] <Guest68> but eventually some CI pipeline
[20:33:22] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:35:27] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:35:35] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[20:36:53] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[20:39:16] <moet> as a general rule, don't put secrets in env-vars .. any process on the same machine can read your secrets out of the env-vars
[20:40:14] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:41:22] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 265 seconds)
[20:41:39] <Guest68> Ok but what is the best way to do include creds
[20:41:43] <EvanR> imagine sharing a machine with literal other users that you can't trust xD
[20:44:19] <Guest68> embed to binary?
[20:44:46] <EvanR> how many levels of paranoia are we on
[20:44:57] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[20:45:18] <Guest68> wont docker containers give enough isolation to prevent that
[20:45:39] *** Quits: mbuf (~Shakthi@223.178.89.16) (Quit: Leaving)
[20:45:49] <Guest68> And why would we share a machine with others we dont trust
[20:46:49] <EvanR> if someone got access to any user at all, then you could be thinking of ways to mitigate the fallout of that
[20:49:06] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 265 seconds)
[20:49:45] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Read error: Connection reset by peer)
[20:49:48] *** Joins: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon)
[20:51:51] *** Quits: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net) (Quit: Client closed)
[20:52:14] *** Quits: tired (~tired@user/tired) (Ping timeout: 268 seconds)
[20:52:16] *** Joins: tired- (~tired@user/tired)
[20:53:26] <moet> Guest68: the way this is done in larger companies is: after your production service starts up it requests credentials scoped to the task it needs to perform from some credentialing service.. there needs to be material provided to auth against the credentialing service, and the credentialing service should also look up the identity of the requester in a table, etc.. all of that might be too much for your use 
[20:53:32] <moet> case
[20:54:13] <moet> Guest68: a simpler approach would be to have your deployment system provide the creds to the production service at startup, though instead of envvars or the cli, write them to stdin
[20:54:27] *** Joins: desantra (~skykanin@user/skykanin)
[20:55:51] <Guest68> something like aws secrets manager right?
[20:55:52] <Guest68> So what about the creds for authenticating with thta service ?
[20:56:06] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[20:56:33] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[20:56:35] <Guest68> moet You mean giving them as arguments while running
[20:57:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Quit: gone to sleep. ZZZzzzâ€¦)
[20:57:56] <moet> Guest68: the heavyweight approach is to give credentials after startup, the lightweight approach is to give credentials at startup, but never via envvars or cli
[20:59:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.3)
[20:59:24] <moet> aws secrets manager falls into the heavyweight approach, but that's probably the right approach if you're building on aws.. if you're building on aws you can dictate access to secrets via the requester iam role
[20:59:42] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:00:05] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:00:20] *** Joins: emf (~emf@2620:10d:c090:400::5:69fc)
[21:01:23] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:01:55] <Guest68> moet thank you
[21:01:56] <Guest68> could you please elaborate a little on the lightweight approach
[21:02:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:02:50] *** Joins: alzgh (alzgh@user/alzgh)
[21:03:58] *** Joins: deadmarshal (~deadmarsh@95.38.114.190)
[21:04:17] <EvanR> how do you provide the material the authenticate with the credentially service
[21:04:36] <EvanR> oof
[21:05:37] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[21:06:25] <moet> EvanR: you could embed a key in the binary or some other less secure path, but the point is that the credentialing service doesn't only use that data, it also checks a table using the identity of the requester .. this isn't foolproof.. if you want to go the really heavyweight approach, you'd have a TOFU key exchanged for an expiring key and the production service is responsible for continually updating the 
[21:06:26] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[21:06:31] <moet> expiring key forever
[21:07:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk) (Remote host closed the connection)
[21:07:34] <moet> Guest68: lightweight approach: on startup, your production service reads stdin; your deployment service starts your production service and then writes data to its stdin 
[21:07:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk)
[21:07:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:08:05] <EvanR> the more over engineered it is, the less I believe it's secure xD
[21:08:08] <moet> it's hard to elaborate further because i don't know what deployment service you're using .. also, your deployment service should have documentation about how to provide secrets to your production service
[21:08:25] <moet> EvanR: you're gonna be surprised when you take a look at encryption code <3
[21:08:39] <moet> s/surprised/horrified/g
[21:09:26] <EvanR> steps taken in encryption are always for a good reason though, sort of another topic from configuring web apps
[21:09:44] *** Joins: burnside_ (~burnsides@dhcp168-035.wadham.ox.ac.uk)
[21:09:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk) (Remote host closed the connection)
[21:09:53] <moet> sure
[21:10:19] <moet> Guest68: if the stdin thing doesn't seem like it'll work, you could always use a file with permissions locked down, as long as you have a secure way to put the file in place
[21:11:03] <moet> really, don't go nuts with this; the security precautions you take should reflect the risk of a breach.. if you're not risking anything, then you don't need to worry about this as much..
[21:12:08] <maerwald> You should at least follow IEC 62443
[21:16:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:23] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[21:19:54] *** Quits: mmhat (~mmh@55d47041.access.ecotel.net) (Quit: WeeChat 3.3)
[21:23:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[21:23:30] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[21:24:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[21:26:24] <maerwald> is there a version of hp2ps that doesn't suck? (e.g. doesn't cut off half of the graph/legend)
[21:27:01] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:29:30] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:29:43] <glguy> maerwald: have you used this? https://hackage.haskell.org/package/hp2html
[21:29:48] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[21:31:01] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:32:39] *** Quits: Guest68 (~Guest68@2401:4900:1f2a:2065:285b:1f0c:e2ab:1175) (Quit: Client closed)
[21:32:57] *** Joins: fef (~thedawn@user/thedawn)
[21:33:31] <maerwald> it seems to leak memory... let's see if it finishes
[21:34:13] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[21:35:34] *** Joins: gensyst (gensyst@user/gensyst)
[21:35:39] <maerwald> 27mb html file, let's see how that goes
[21:35:44] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:35:56] <gensyst> Hi, how come Data.Finite (https://hackage.haskell.org/package/finite-typelits-0.1.4.2/docs/Data-Finite.html) has no monadic indexing? Is it someplace else or do I have to write my own utility func?
[21:35:56] <maerwald> well, it doesn't: entirely broken page :D
[21:36:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:36:17] <gensyst> (such a utility func would unwrap it and rewrap it..)
[21:36:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:38:32] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:38:51] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[21:40:31] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:40:48] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[21:43:13] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:43:31] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[21:48:14] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:48:50] *** Quits: drewolson (~drewolson@user/drewolson) (Quit: Ping timeout (120 seconds))
[21:49:01] *** Joins: drewolson (~drewolson@user/drewolson)
[21:49:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[21:49:41] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 245 seconds)
[21:50:01] *** Quits: cfebs (~cfebs@user/cfebs) (Quit: ZNC 1.8.2 - https://znc.in)
[21:50:06] *** Quits: thaumavorio_ (~thaumavor@thaumavor.io) (Ping timeout: 260 seconds)
[21:50:21] *** Joins: dragestil_ (~znc@user/dragestil)
[21:50:50] *** Quits: dragestil (~znc@user/dragestil) (Ping timeout: 246 seconds)
[21:50:56] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Ping timeout: 245 seconds)
[21:50:56] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (Ping timeout: 245 seconds)
[21:51:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:51:46] *** Joins: FragByte (~christian@user/fragbyte)
[21:52:02] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[21:52:23] *** dragestil_ is now known as dragestil
[21:52:23] *** Joins: cfebs (~cfebs@user/cfebs)
[21:52:30] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[21:54:54] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[21:55:13] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[21:55:36] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[21:55:55] *** Joins: boxscape_ (~boxscape_@i59F67A72.versanet.de)
[21:56:05] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[21:56:16] <boxscape_> Can i tell cabal to use a particular ghc executable rather than the one in path?
[21:56:36] <glguy> boxscape_: -w
[21:56:40] <boxscape_> thanks!
[21:57:05] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 250 seconds)
[21:57:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:57:56] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:58:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[21:58:21] *** Joins: aegon (~mike@174.127.249.180)
[22:03:02] *** Joins: econo (uid147250@user/econo)
[22:03:24] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:05:01] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:05:19] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:05:42] <dminuoso> 18:09:16       moet | as a general rule, don't put secrets in env-vars .. any process on the same machine can read your secrets out of the env-vars
[22:05:46] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[22:05:48] <dminuoso> This is grossly misleading.
[22:06:08] *** Joins: alzgh (alzgh@user/alzgh)
[22:06:13] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[22:06:17] <moet> dminuoso: okay?
[22:06:23] <moet> dminuoso: any more? :)
[22:06:23] <dminuoso> On linux the only API you have to access this is via procfs, but /proc/$pid/environ has permissions matching the owner of the process.
[22:06:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:06:45] <dminuoso> And if you have *that* much access, you can pretty much get access to its credentials anyway
[22:06:55] <dminuoso> In other words: environment variables are perfectly safe.
[22:06:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:08:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:08:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[22:09:22] <dminuoso> And arguably "credential manager" are a double edged sword. Poor security can result to a much larger leak, and now you have additional runtime dependencies on services and on networking. 
[22:09:31] <boxscape_> You love to see it: "Could not deduce (Braided JSFunc (Product JSFunc)) from the context: Braided JSFunc (Product JSFunc)"
[22:10:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:10:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:10:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:10:46] <boxscape_> (problem is invisible kind arguments are different)
[22:11:02] <dminuoso> And it dramatically increases the security implications, since if you have wide spread credentials, are they all accessible via a singular host?
[22:11:34] <EvanR> all your eggs in one basket / are belong to us
[22:12:05] *** ChanServ sets mode: +o litharge
[22:12:05] *** litharge sets mode: -bo *!*@*user/john-ivan/x-1515935 litharge
[22:12:23] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:13:23] <dminuoso> And then you quickly get to the point "why do we want another poor reimplementation of kerberos, when you should be using kerberos instead"
[22:13:33] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[22:14:22] <dminuoso> Or having all your services depend on an additional network path/firewall/routers/hypervisor/VM/credential service to potentially come up. If that service goes down, how much of your infrastructure will follow?
[22:15:06] * dminuoso finds it ridiculous how some people overengineer
[22:19:12] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:21:16] *** Joins: fef (~thedawn@user/thedawn)
[22:21:21] *** Quits: xff0x (~xff0x@2001:1a81:5330:8c00:7ee9:82eb:bec8:3505) (Ping timeout: 250 seconds)
[22:21:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[22:22:17] *** Joins: xff0x (~xff0x@port-92-195-74-242.dynamic.as20676.net)
[22:24:16] *** Joins: mimmy (~mimmy@146.70.75.158)
[22:25:34] *** Quits: deadmarshal (~deadmarsh@95.38.114.190) (Ping timeout: 260 seconds)
[22:27:18] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:27:36] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:27:40] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[22:28:19] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[22:29:00] *** Quits: mimmy (~mimmy@146.70.75.158) (Ping timeout: 256 seconds)
[22:29:03] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:29:25] <moet> dminuoso: fwiw, i recommended that Guest68 not overengineer it and suggested two lightweight approaches
[22:29:40] <dminuoso> moet: Absolutely.
[22:30:05] <dminuoso> That wasn't really meant as criticsm towards you
[22:31:45] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:31:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:32:04] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:32:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[22:33:15] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:33:37] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[22:33:51] *** Joins: fef (~thedawn@user/thedawn)
[22:35:48] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:35:55] *** Quits: max22- (~maxime@2a01cb0883359800502e2c31bca551ab.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[22:36:06] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:37:46] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:38:03] *** Joins: jkhs (~jkhs@94-255-217-215.cust.bredband2.com)
[22:39:02] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:41:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:41:13] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[22:41:58] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[22:43:12] *** Quits: jkhs (~jkhs@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:43:27] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[22:44:10] *** Joins: mimmy (~mimmy@146.70.75.158)
[22:45:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[22:46:07] *** Quits: asivitz (uid178348@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:47:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced)
[22:51:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[22:53:19] *** Joins: desantra (~skykanin@user/skykanin)
[23:12:10] *** Joins: max22- (~maxime@2a01cb0883359800fa2f4e7c9f6204ba.ipv6.abo.wanadoo.fr)
[23:12:47] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[23:13:50] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:16:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:20:27] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:20:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[23:32:00] <moet> totally. and you're totally right that awsthings are easy to misuse and create gaping security holes.. thanks for pointing out the thing about /proc/$pid/environ .. now I want to follow up with the people who taught me this and figure out what they were referring to
[23:32:51] <monochrom> Perhaps a long long time ago in a unix version far far away it was true.
[23:33:08] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[23:33:50] <monochrom> You should still check it on Solaris, Mac, various BSDs, etc.
[23:34:20] <monochrom> But the over-arching lesson is: check before speaking up.
[23:34:46] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:35:05] <monochrom> You would be surprised how many conventional wisdoms are outdated or even prejudiced.
[23:35:39] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:36:11] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[23:36:43] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:52] *** Joins: pop3 (~pop3@user/pop3)
[23:38:29] <monochrom> Even I am surprised once in a while, e.g., https://mail.haskell.org/pipermail/haskell-cafe/2013-April/107775.html
[23:40:00] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[23:41:39] *** Quits: moet (~moet@mobile-166-171-251-187.mycingular.net) (Ping timeout: 265 seconds)
[23:45:59] <boxscape_> is there a way to refer to (%1 ->) with LinearHaskell just like how you can refer to (->) for regular functions usually?
[23:46:03] <boxscape_> that particular syntax doesn't seem to wkr
[23:46:03] <Rembane_> monochrom: That's so good. 
[23:46:09] <boxscape_> s/wkr/work
[23:46:33] <boxscape_> oh I suppose maybe I have to use FUN from GHC.Exts
[23:46:43] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 250 seconds)
[23:47:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[23:47:53] <boxscape_> s/GHC.Exts/Data.Kind
[23:48:42] *** Joins: moet (~moet@mobile-166-171-249-243.mycingular.net)
[23:50:59] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:51:24] *** Quits: kuribas (~user@ptr-25vy0i87u19ttsdwrve.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:51:41] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[23:52:16] <boxscape_> yeah that works
[23:52:17] *** Quits: mimmy (~mimmy@146.70.75.158) (Ping timeout: 265 seconds)
[23:52:33] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[23:55:35] *** Quits: burnside_ (~burnsides@dhcp168-035.wadham.ox.ac.uk) (Remote host closed the connection)
[23:57:15] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[23:58:19] *** Joins: pavonia (~user@user/siracusa)
[23:58:52] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
