[00:02:01] *** Joins: Guest63 (~Guest63@5.30.23.247)
[00:05:30] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[00:13:46] *** Quits: Guest63 (~Guest63@5.30.23.247) (Quit: Connection closed)
[00:15:23] *** Joins: derelict (~derelict@user/derelict)
[00:29:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:31:07] <lisp123> I joined comp.lang.lisp and tried to delete the spam posts - it says only a "content moderator" has access to that
[00:31:08] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:31:25] <lisp123> Does that mean there is someone who can delete these posts? There's only 1 per day looks like
[00:33:44] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 252 seconds)
[00:34:15] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[00:35:16] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[00:38:23] *** Joins: srhm (~ascii@user/srhm)
[00:41:16] <pjb> lisp123: that's not how nntp works.
[00:42:14] <pjb> lisp123: posts can be cancelled by its originator, if he made prosivions to this effect (include a key that let him cancel the article).  But once the nntp servers have spread the data, it cannot be deleted. Someone will have a copy.
[00:42:38] <pjb> lisp123: cancelling an article doesn't mean deleting it.
[00:43:21] <lisp123> pjb: thanks. does that mean there's nothing we can do about the spammers?
[00:43:32] <pjb> mostly, yes.
[00:43:43] <lisp123> thats a shame
[00:43:50] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Remote host closed the connection)
[00:44:26] <pjb> Now, since there's a lot less nntp traffic, only a few servers remain.  The articles could be removed or filtered in a server.
[00:44:45] <pjb> This is why I suggested to install a private (and centralized) nntp server.
[00:45:00] <pjb> With some kind of authentication to allow posting.
[00:45:27] <lisp123> I remember you said this before - then I googled nntp but its well over my head
[00:45:32] <pjb> It's a sad situation, but technically nowadays, a single server can easily serve all the nntp users.
[00:45:59] <pjb> https://datatracker.ietf.org/doc/html/rfc3977
[00:46:59] <pjb> https://datatracker.ietf.org/doc/html/rfc3977
[00:47:04] <pjb> https://www.oreilly.com/library/view/linux-network-administrators/1565924002/ch22.html
[00:47:58] <lisp123> Thanks - the last link looks most useful
[00:48:02] <pjb> Since you'd want to add features, it may not be a bad idea to implement it in CL.
[00:48:21] <pjb> Or use the linux nntp as basis and write tools and filters around it.
[00:49:14] <lisp123> pjb: the latter sounds most feasible
[00:49:25] <lisp123> now to find some sort of plug and play tutorial
[00:50:22] <pjb> A nice thing is that there are archives of usenet, so you can integrate them to your server, so people could still read and search old news.
[00:50:38] <pjb> This is what google did, but with their horrible user interface.
[00:50:57] <lisp123> is it possible to still have the name "comp.lang.lisp" or would you have to choose a new name?
[00:51:13] <pjb> Of course. Each nntp network has its own name hierarchy.
[00:51:24] <pjb> It's similar to irc.
[00:51:54] <lisp123> nice. I might try and do one, one day (in the not too distant future).
[00:52:12] <lisp123> then i guess users have to subscribe to your newsgroup?
[00:52:19] <pjb> There are several nntp server software; you'd have to select the right one.
[00:52:25] <pjb> https://wiki.debian.org/UseNet
[00:52:51] <pjb> Indeed you'll have to implement some way to register users and prevent posting from non-registered users.
[00:53:24] <pjb> Nowadays, most nntp service do that.  But this doesn't prevent idiots to spam the groups.
[00:53:27] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 272 seconds)
[00:53:30] *** Joins: akoana (~ah@user/akoana)
[00:53:36] <lisp123> and sorry for all the stupid questions, can people read and reply via their e-mail?
[00:53:44] <lisp123> since I'm only used to google groups
[00:53:48] *** Joins: aeth_ (~Michael@user/aeth)
[00:54:01] <pjb> No. You have to use a specific client, talking nntp instead of smtp/imap or pop.
[00:54:11] <lisp123> cool thanks
[00:54:12] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[00:54:17] *** aeth_ is now known as aeth
[00:54:23] <pjb> But a nice feature is to have a mail<->nntp gateway.
[00:54:27] <pjb> gmane did that.
[00:54:37] <lisp123> doesn't sound too bad - we should do it
[00:54:39] <pjb> So you could use nntp to read and write on maillists.
[00:55:32] <phantomics> I recall someone suggesting once that nntp could use "moderation as a service"
[00:55:37] <lisp123> makes sense - but how would auth work?
[00:55:40] <_death> gmane still does it https://gmane.io/ .. it does miss the web interface
[00:55:44] <lisp123> if writing from a maillist
[00:55:45] <pjb> I used http://individual.net
[00:56:08] <phantomics> I.e. someone could publish a list of messages to block and others would subscribe to that list in some way and filter out spam in that manner
[00:56:10] <lisp123> i guess people need to be approved onto the mailist?
[00:56:36] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:56:37] <phantomics> If you didn't like one moderator's choices of what messages to block you could subscribe to a different mod's block feed
[00:56:38] <pjb> http://individual.net/overview.php
[00:56:44] <phantomics> Don't know how practical it would be
[00:57:13] <pjb> lisp123: yes. But usually there's an way to register automatically, and you'd be removed manually in case of bad behavior.
[00:57:25] <pjb> So spam filters might be essential.
[00:57:32] <pjb> (to help human moderators).
[00:57:59] <lisp123> seems like there is just that one or two spammers
[00:58:01] <lisp123> fortunately
[00:58:21] <lisp123> but it does ruin the whole experience, especially the violent nature of the titles
[00:58:33] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[00:58:51] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:59:10] <lisp123> is the current comp.lang.lisp basically google's? so it would be good to migrate away?
[00:59:18] <lisp123> i don't trust google groups sticking around
[00:59:32] <lisp123> or do messages get propogated across different servers
[01:00:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 244 seconds)
[01:01:16] <pjb> the wikipedia page is interesting too, notably the graphic that shows the existing nntp providers and their links: https://en.wikipedia.org/wiki/News_server
[01:01:33] <phantomics> There are other nttp servers mirroring the group, like eternal-september.org
[01:01:59] <pjb> lisp123: so, indeed, subscribing to some server and slurping the archives (you may contact the administrator for the initial rsync if you want to mirror old news).
[01:02:25] <lisp123> thanks!
[01:03:01] <pjb> Also, some newsgroups receive "binary" data.  Big messages uuencoded (or nowadays base64-encoded), notably picture files. So a lot of storage may be required if you want to allow it.
[01:03:19] <lisp123> phantomics: has the enternal-september.org newsgroup added authentication / blocked spammer?
[01:04:11] <lisp123> pjb: presuming you can disable binary data?
[01:04:23] <phantomics> I think they'll kick you off for spamming, they have a user account system
[01:04:48] <phantomics> eternal-september and a lot of other servers don't host the binary groups because of the storage required
[01:05:06] <pjb> lisp123: this may help: https://muspin.gsfc.nasa.gov/download/docs/technical_guides/planning_a_usenet_site_2_of_2.pdf
[01:05:50] <pjb> lisp123: sure, 1- you can disable those newsgroups, and 2- you can filter big uuencoded/base64 encoded messages
[01:06:05] <pjb> lisp123: when you own the server, you can do whatever you want.
[01:06:57] <pjb> The fundamental problem was that nntp server form a network and you don't own all the nodes, so if a server accepts a message from a user, it gets diffused automatically to your server.
[01:09:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[01:09:31] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[01:13:07] <lisp123> thanks for the link
[01:14:10] <lisp123> pjb: . that makes sense. but i guess if you start from scratch you don't have any nodes that could cause you problems. Which I assume is what you are saying
[01:16:16] <lisp123> phantomics: thanks
[01:16:21] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:18:55] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:19:13] *** Joins: livoreno (~livoreno@user/notzmv)
[01:21:31] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[01:21:51] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[01:27:45] *** Parts: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (Leaving)
[01:28:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:28:29] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[01:29:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:29:15] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[01:31:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:31:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:31:52] *** Joins: tyson2 (~user@70.54.112.49)
[01:32:11] *** Joins: asdf-uiop (~user@p5089a11c.dip0.t-ipconnect.de)
[01:36:34] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[01:38:36] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:fdad:b9cb:7f55:135b) (Remote host closed the connection)
[01:41:37] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[01:45:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:46:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:50:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[01:52:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[01:52:07] <Josh_2> Hi
[01:52:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:55:57] <phantomics> Hi Josh_2
[01:56:17] <Josh_2> I am having one almighty mind blank right now
[01:56:18] <Josh_2> :(
[01:57:45] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[01:58:50] *** Joins: thelounge27573 (ac3aac48@67.205.143.82)
[02:01:40] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:6960:94b2:101c:551b)
[02:01:40] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:6960:94b2:101c:551b) (Changing host)
[02:01:40] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:02:26] *** Quits: thelounge27573 (ac3aac48@67.205.143.82) (Client Quit)
[02:02:34] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:02:50] <phantomics> How so, working on something?
[02:03:54] *** Quits: pve (~pve@87-93-220-246.bb.dnainternet.fi) (Quit: leaving)
[02:04:31] *** Joins: ljsilver (ac3aac9b@67.205.143.82)
[02:04:44] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[02:05:46] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[02:05:58] *** Quits: ljsilver (ac3aac9b@67.205.143.82) (Client Quit)
[02:07:32] *** Joins: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e)
[02:08:45] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e) (Ping timeout: 244 seconds)
[02:13:20] <Josh_2> Not working on it very well
[02:14:26] *** Joins: killsushi (~killsushi@user/killsushi)
[02:16:39] <Josh_2> Actually maybe my first solution is the best
[02:16:43] <Josh_2> a nice list
[02:20:37] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[02:22:00] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[02:25:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:26:52] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[02:29:39] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[02:30:33] <phantomics> What are you writing?
[02:35:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[02:37:10] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 244 seconds)
[02:41:42] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 252 seconds)
[02:50:00] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[02:56:34] *** Joins: derelict (~derelict@user/derelict)
[03:01:07] *** Quits: frgo_ (~frgo@p200300deef27d700057bab8d782c7038.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:01:34] *** Joins: frgo (~frgo@p200300deef27d700057bab8d782c7038.dip0.t-ipconnect.de)
[03:06:01] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 265 seconds)
[03:06:42] *** Joins: aeth_ (~Michael@user/aeth)
[03:08:44] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 272 seconds)
[03:09:52] *** aeth_ is now known as aeth
[03:12:08] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:15:41] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[03:20:50] <jcowan> Perhaps writing a CL in JS would be the best approach
[03:23:49] <aeth> There is one, it's not very complete.
[03:24:02] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[03:40:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[03:42:56] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[04:03:16] *** Joins: amb007 (~a_bakic@125.198.204.77.rev.sfr.net)
[04:03:16] *** Quits: amb007 (~a_bakic@125.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[04:03:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[04:07:26] *** Joins: [deleted] (~livoreno@user/notzmv)
[04:10:04] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[04:10:41] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 244 seconds)
[04:11:26] <jcowan> Naturally.  Writing a CL requires a bunch of students or very remarkable stick-to-it-iveness
[04:11:36] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 258 seconds)
[04:13:10] *** Joins: aeth (~Michael@user/aeth)
[04:13:37] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[04:14:40] *** Quits: lad (~lad@user/lad) (Ping timeout: 250 seconds)
[04:26:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[04:44:17] *** Joins: lad (~lad@user/lad)
[05:07:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:17:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[05:29:08] <pjb> jcowan: or just writting a backend to an existing CL implementation.
[05:29:25] <pjb> A easy way to do it, for example, would be to implement the clisp VM in js.
[05:29:45] <pjb> Another would be to write SBCL VOPs for js.
[05:30:35] <moon-child> pjb: tools exist to compile c to js; those could be used for clisp or ecl
[05:30:49] <pjb> Indeed.
[05:36:01] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 246 seconds)
[05:43:43] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[05:53:56] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[05:56:08] *** Quits: leeb_ (~leeb@KD111239153087.au-net.ne.jp) (Quit: WeeChat 3.1)
[06:00:34] *** Joins: srhm (~ascii@user/srhm)
[06:01:59] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[06:02:15] *** Joins: srhm (~ascii@user/srhm)
[06:02:30] *** Quits: srhm (~ascii@user/srhm) (Client Quit)
[06:23:51] *** Quits: phantomics (~phantomic@71-218-249-240.hlrn.qwest.net) (Ping timeout: 272 seconds)
[06:27:54] *** Quits: tyson2 (~user@70.54.112.49) (Remote host closed the connection)
[06:43:11] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[06:47:38] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 250 seconds)
[06:49:39] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:49:57] *** Joins: livoreno (~livoreno@user/notzmv)
[06:50:54] *** Joins: prxq_ (~quassel@x4db6ce7a.dyn.telefonica.de)
[06:54:42] *** Quits: prxq (~quassel@x4db90b50.dyn.telefonica.de) (Ping timeout: 252 seconds)
[07:17:30] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[07:17:56] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[07:24:33] *** Joins: seok (~Seok@49.2.163.56)
[07:27:11] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[07:31:40] <beach> Good morning everyone!
[07:39:20] <kakuhen> hi
[07:40:05] <kakuhen> What regular expression is most used by CLers? I'm assuming cl-ppcre
[07:40:25] <kakuhen> regular expression library*
[07:43:11] <Bike> probably ppcre, but there are some other good ones
[07:43:18] <Bike> i think
[07:50:02] <beach> Maybe some people were asleep when I suggested a project 12 hours or so ago, so let me repeat it:
[07:50:51] <beach> Write a "magit"-like pane for McCLIM.  And presumably call it "McGIT".
[07:52:27] <beach> It would have clickable presentations in addition to keyboard shortcuts, so that the mouse could be used, with context menus and such.
[07:52:52] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[07:53:12] <beach> I don't know whether vim has something like magit, and if not, I would think such a project would be attractive to users of vim.
[07:53:59] <beach> And splittist pointed out to me that Shinmera has written "legit" which is a Common Lisp library for interfacing with GIT, so that part is partly done.
[07:55:57] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 244 seconds)
[07:56:14] *** Joins: silasfox (~sbv@xdsl-195-14-218-243.nc.de)
[07:58:31] <moon-child> I have never found git 'frontends' very interesting, but I hear good things about And it encourages lots of monomorphization in e.g. ranges. fwiw
[07:59:00] <moon-child> sorry, about https://github.com/tpope/vim-fugitive
[08:00:12] <beach> Oh, so there is one.  Good to know.
[08:04:08] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[08:04:32] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[08:05:25] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:06:05] <beach> A McCLIM pane would still be useful of course, and it would be an essential part of a future IDE for Common Lisp.
[08:09:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[08:09:33] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[08:09:56] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[08:10:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:11:14] <moon-child> I wonder the extent to which it's meaningful to create an 'IDE' vs a general window-management paradigm which can be used to organize arbitrary tools; including those which are used for software development, but not limited to them
[08:12:03] <beach> Well, I write IDE, but that's the kind of architecture I am thinking of.
[08:12:40] <beach> I am thinking of a collection of pane classes for McCLIM that the user can then assemble in various ways.  So McCLIM would act as a "window manager".
[08:13:24] <beach> Like an editor pane, a debugger pane, an inspector pane, a backtrace-inspector pane, a GIT pane, an ASDF pane, etc.
[08:13:35] <moon-child> I see
[08:14:02] *** Quits: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e) (Ping timeout: 244 seconds)
[08:14:21] <beach> I think for Common Lisp users, there is no other choice, because people have individual preferences that can't be met by one common design.
[08:14:55] <beach> Plus, it's a development environment for Common Lisp written in Common Lisp, so programmers are capable of doing the "pane assembly" themselves.
[08:17:07] <beach> But the important part here is that these tools can collaborate, which is made easier with CLIM presentations and such.
[08:41:35] <rdrg109> [Q] Consider this simple script: (let ((items '(1 2 3))) (push 4 (cdr (last items))))
[08:41:53] <rdrg109> Why I'm getting: Destructive function SB-KERNEL:%RPLACD called on constant data: (3)?
[08:41:59] <rdrg109> Am I doing something wrong?
[08:42:02] <beach> Yes.
[08:42:08] <beach> You are doing what the message says.
[08:42:16] <beach> You are modifying a literal object.
[08:42:27] <rdrg109> What would be the correct way to do that?
[08:42:43] *** Joins: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810)
[08:43:03] <beach> I don't know what you are trying to do, but you can create the list using LIST instead of using a literal object.
[08:45:23] <rdrg109> beach: Given a list, I want to insert at the end of it. I found this question at Stack Overflow: https://stackoverflow.com/questions/13359025/adding-to-the-end-of-list-in-lisp
[08:45:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:46:46] <rdrg109> The reason why I used let in my example is because I use let for writing minimal working examples. Thus, I can see the behavior of functions without cluttering my SLIME REPL session with global varaibles. I guess I need to stop doing that and use defvar instead. Is that right?
[08:46:49] <beach> Your technique for inserting is correct, and the code in that link is really bad in many ways.
[08:47:11] <beach> But you can't use '(1 2 3) because that is a literal object.
[08:47:12] <mfiano> rdrg109: ' is a reader macro that expands into (quote ...). As the name suggests, a reader macro applies its transformation at read time, before any code is compiled.
[08:47:16] <beach> So use (list 1 2 3) instead.
[08:47:38] <mfiano> Such reader macros can be assumed to create "literal objects"
[08:49:03] <rdrg109> As someone coming from Emacs Lisp, I found that disturbing because I've been using that in all my Elisp code.
[08:49:07] <mfiano> These forms should never be mutated, instead copied or created at runtime. This is because they are expanded at read-time, and thus are embedded into compiled code.
[08:50:40] <beach> rdrg109: Let me give you an example of why you should not do that.  Try this: (defun ff () '(1 2)) then (defparameter *l* (ff)) then (setf (car *l*) 234) then (ff).
[08:52:23] <beach> rdrg109: You see, Common Lisp uses what I call "uniform reference semantics" meaning that, semantically speaking, every object is manipulated indirectly through a reference or a pointer.  So there is only one list object containing the elements 1 and 2, and that same object is returned each time FF is called.
[08:52:44] <beach> So when you do the (SETF (CAR *L*) ...) you are modifying that object.
[08:53:03] <beach> And the next time FF is called, a modified object is returned.
[08:53:54] <beach> rdrg109: You should consider yourself lucky that SBCL was able to catch the problem this time.  It is not always that easy, and you can have some very strange bugs that are difficult to find if you modify literal data.
[08:57:03] <moon-child> beach: apparently, the emacs lisp of the code that you showed will run without error, with ... consequences
[08:57:39] <beach> It runs without error in SBCL too.
[08:57:48] <beach> What are the consequences in Emacs Lisp?
[08:57:56] <mfiano> beach: https://www.gnu.org/software/emacs/manual/html_node/elisp/Mutability.html
[08:58:39] <mfiano> Basically assume the same thing: UB
[08:58:39] <moon-child> oh.  The same as in sbcl
[08:59:08] <beach> rdrg109: So, you should not do that in Emacs Lisp either.
[08:59:17] <mfiano> Whether a warning/error is raised is just a convenience. It could just as well launch nethack :)
[08:59:23] <mfiano> s/raised/signalled
[08:59:33] <beach> Yeah.
[08:59:45] <beach> rdrg109: Does that make sense to you?
[09:00:12] <beach> rdrg109: It is time to go over all your Emacs Lisp programs and make sure you don't modify literal data.
[09:01:43] <mfiano> It may be unintutive, but Lisp gives us access to different stages of the compiler, within other stages.
[09:01:45] <moon-child> a perhaps somewhat more practical consideration is interning.  An implementation could very plausibly return 5, given the following:  (let ((x '(1 2)) (y '(1 2))) (setf (car x) 5) (car y))
[09:01:59] <mfiano> Consider what would happen if you mutated other literal objects, such as a literal integer of 42 (not that you can without some serious hackage).
[09:02:04] <rdrg109> Thank you all for asnweing my question deeply. It is of much help. I guess I will have to read more docs and change the mistakes I made
[09:02:33] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:02:37] <rdrg109> Yes beach, thanks for the help!
[09:02:44] <beach> Pleasure.
[09:15:26] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[09:16:42] *** Joins: derelict (~derelict@user/derelict)
[09:19:47] <pjb> rdrg109: alteratively you can use copy-list. Notaby in functions that want to modify their parameter, but that can accept literal (immutable) values:  (let ((items '(1 2 3))) (let ((items (copy-list items))) (push 4 (cdr (last items))) items)) #| --> (1 2 3 4) |#
[09:21:09] <pjb> rdrg109: or more wisely, write your functions so they don't try to mutate their parameters at all.
[09:21:58] <pjb> (let ((items '(1 2 3)))  (nconc (butlast items) (cons 4 (last items)))) #| --> (1 2 4 3) |#
[09:22:14] *** Quits: silasfox (~sbv@xdsl-195-14-218-243.nc.de) (Ping timeout: 244 seconds)
[09:22:30] <pjb> rdrg109: ^ note the use of nconc, which mutates the fresh list returned by butlast, so we don't copy it again.
[09:22:54] <pjb> rdrg109: but that expression doesn't touch the literal list items.
[09:23:25] <pjb> So you can use mutation inside your functions as long as you are only mutating objects created by (or for) your function, and not the arguments.
[09:36:11] *** Joins: silasfox (~sbv@2001-4dd6-57a2-0-a504-35b8-bb69-198e.ipv6dyn.netcologne.de)
[09:41:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:41:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:44:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:45:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:48:35] *** Quits: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810) (Ping timeout: 244 seconds)
[09:50:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[09:52:21] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[09:53:14] *** Quits: seok (~Seok@49.2.163.56) (Ping timeout: 244 seconds)
[10:12:04] *** Quits: frgo (~frgo@p200300deef27d700057bab8d782c7038.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:12:55] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[10:25:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:27:44] *** Quits: sp41 (~spal@70.241.120.35) (Ping timeout: 252 seconds)
[10:37:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[10:44:15] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[10:46:38] *** Quits: silasfox (~sbv@2001-4dd6-57a2-0-a504-35b8-bb69-198e.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[10:48:38] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[10:57:48] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[11:08:29] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b00b:1035:d939:6904:8916:1f7d)
[11:17:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:23:27] *** Joins: pve (~pve@178-55-4-2.bb.dnainternet.fi)
[11:26:44] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[11:26:45] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[11:27:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:28:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[11:28:28] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-54.prtc.net)
[11:29:07] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:32:16] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:42:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:43:49] *** Joins: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de)
[11:46:14] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:54:48] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[11:58:39] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[11:59:39] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[12:00:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:02:28] *** Joins: shka (~herr@109.231.62.239)
[12:14:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:16:13] <susam> Good morning, #commonlisp! Hope you are having a good weekend.
[12:17:14] <beach> Hello susam.
[12:17:34] <susam> Hi beach!
[12:17:47] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[12:19:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[12:20:31] <rdrg109> Good morning!
[12:21:04] <Inline> morning
[12:21:34] <rdrg109> pjb: Thanks for helping! I will need to devote some time to understand what you all mentioned.
[12:21:42] *** Quits: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de) (Remote host closed the connection)
[12:22:13] <pjb> or ask for precisions.
[12:22:25] <rdrg109> Fortunately, Org Babel supports Slime code blocks, so having that + irc logs is helpful for taking notes
[12:22:42] <pjb> :-)
[12:22:47] <rdrg109> pjb: I will do that if necessary, thanks!
[12:22:57] <susam> Quick survey: What do you prefer for outputting HTML? Writing HTML using CL macros or writing HTML as plain HTML and combining them with Lisp? And why?
[12:23:05] <rdrg109> s/slime code blocks/lisp code blocks/
[12:23:43] <moon-child> susam: I generally write plain html.  Was at one point working on a macro language that would let you write html but without quotation marks around plain text.  Never finished that, though
[12:24:01] <moon-child> err, would let you write lisp to forma thtml, but without quotation...
[12:24:20] <susam> moon-child: Okay. Thank you for sharing your style.
[12:25:37] <susam> I have been torn between the two approaches. While writing HTML using CL macros can be convenient as a developer, I worry it would prevent someone else who does not know CL from editing the HTML independently. So far I have been leaning towards writing plain HTML.
[12:29:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[12:29:52] *** Joins: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de)
[12:32:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[12:33:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 244 seconds)
[12:34:18] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[12:34:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:35:41] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:37:56] *** Quits: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de) (Remote host closed the connection)
[12:38:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:39:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[12:39:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:28] <lisp123> susam: I like CL-WHO for outputting HTML, but I'm not trying out BKNR.IMPEX - it outputs to XML well (automatically, once you create a DTD). I don't think it will do tables well, but for that I wrote a custom function very quickly
[12:40:35] <lisp123> now*
[12:41:44] <lisp123> In general, I'm trying to store objects now in classes, and then have a defgeneric / defmethod to define a "print-html" method for each object - thus creating HTML files is just printing the objects
[12:41:50] <lisp123> I think that's the best approach IMO
[12:44:31] <susam> lisp123: Thanks!
[12:44:38] <lisp123> also check out HTML-TEMPLATE - it's a great solution to allow designers to work on HTML and then have lisp populate it.
[12:53:35] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[12:55:08] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[12:55:24] *** Joins: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de)
[12:57:13] *** Quits: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de) (Remote host closed the connection)
[13:03:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[13:07:35] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:12:26] <splittist> I use djula as a templating solution. Not that anyone should take web lessons from me.
[13:17:25] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-54.prtc.net) (Ping timeout: 246 seconds)
[13:32:26] *** prxq_ is now known as prxq
[13:36:21] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net)
[13:42:39] *** Joins: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de)
[13:47:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:47:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:52:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[13:56:50] *** Quits: frgo (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de) (Remote host closed the connection)
[14:22:11] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:22:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:27:16] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:29:21] *** Joins: asdf-uio` (~user@p5089a11c.dip0.t-ipconnect.de)
[14:29:25] *** Quits: asdf-uiop (~user@p5089a11c.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:32:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:45:08] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[14:47:22] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net) (Ping timeout: 246 seconds)
[14:48:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:49:49] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[15:16:23] <coat> I am trying to load a file from current directory but I get error that the file does not exist. issue only in slime. works fine in shell.
[15:16:46] <lisp123> what's your code
[15:17:47] <susam> coat: Check *default-pathname-defaults* . Perhaps it is pointing to some directory other than the one you think is the current directory?
[15:20:02] <coat> susam: thanks. it is pointing to a different directory. i thought it would be automatically set to the directory of my current .lisp file.
[15:32:33] <prxq> has anyone here used this?: https://marketplace.eclipse.org/category/free-tagging/common-lisp
[15:32:42] <prxq> it's an eclipse plugin for CL....
[15:33:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:38:36] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[15:38:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:39:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:40:51] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[15:43:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[15:43:38] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:46:16] *** Quits: lad (~lad@user/lad) (Ping timeout: 250 seconds)
[15:55:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[15:56:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:05:45] *** Quits: asdf-uio` (~user@p5089a11c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:06:38] *** Joins: treflip (~user@95.79.32.99)
[16:16:06] *** Joins: random-nick (~random-ni@87.116.177.254)
[16:20:36] <shka> prxq: never seen this before, but i am actually curious if it is any good
[16:21:19] <shka> surprisingly, updated not long ago
[16:28:22] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[16:51:46] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[16:56:46] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[16:57:25] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[16:58:35] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[16:59:56] <lisp123> hi - how do I run common lisp code from elisp?
[17:00:17] <lisp123> (slime-eval ...) works on basic forms, but I want to call functions stored in packages loaded in my cl image
[17:00:30] <lisp123> e.g. (slime-eval (package-name:function "This is a string"))
[17:04:02] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:09:04] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:11:17] <lisp123> Looks like this works: (slime-eval '(cl:eval (cl:read-from-string "(package-name:exported-function \"test string\")")) "CL-USER")
[17:12:03] <lisp123> or just (slime-eval '(cl:eval (cl:read-from-string "(parser:parser \"The sentence x and y gives 3 and 4.\")")))
[17:12:35] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[17:12:53] <_death> (slime-eval '(foo:bar 123))
[17:13:35] <lisp123> _death: Thanks! What a difference a ' makes
[17:13:51] *** Joins: derelict (~derelict@user/derelict)
[17:14:11] <beach> _death: Does that mean that packages in the Common Lisp image must also exist in the Emacs Lisp image?
[17:14:36] *** Joins: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e)
[17:15:40] <lisp123> I wonder if this answer needs updating - maybe I missed the point, but the above solution by _death is much easier https://stackoverflow.com/questions/49476788/how-to-evaluate-common-lisp-code-in-non-slime-buffers
[17:17:10] <_death> beach: no, in emacs it's just a symbol with #\: in its name.. swank reinterprets it
[17:17:19] <beach> Oh, I see.
[17:17:38] <beach> Oh, right, Emacs Lisp doesn't have packages.  Duh!
[17:19:41] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[17:24:22] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[17:35:17] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[17:40:17] <edgar-rft> Emacs Lisp has packages, but it's not what *you* think, see package.el
[17:40:34] <beach> Hmm.
[17:41:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:41:21] <edgar-rft> One more idiotic design decision...
[17:42:18] <_death> it has obarrays
[17:44:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:46:11] <_death> (eq 'foo (intern "foo" (make-vector 251 0))) => nil
[17:46:52] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[17:49:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[17:49:25] <_death> it also has this erroneous note in https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html : "Common Lisp note: In Common Lisp, you can intern an existing symbol in an obarray. In Emacs Lisp, you cannot do this, because the argument to intern must be a string, not a symbol."
[17:52:21] <_death> this note and the other note indicate misunderstanding of CL packages
[17:52:22] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:52:56] <_death> O
[17:57:26] <_death> I'm guessing they intended to compare against multiple conceptual obarrays for accessible symbols in a package
[17:58:18] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[17:59:39] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[18:00:04] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[18:08:42] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[18:13:43] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[18:21:04] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[18:22:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:30:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[18:32:46] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[18:34:59] *** Joins: selwyn (~selwyn@user/selwyn)
[18:35:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:36:25] *** cage is now known as cage_
[18:38:09] *** Quits: cage_ (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[18:38:59] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[18:46:01] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[18:50:35] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 258 seconds)
[19:05:07] *** Joins: Josh_2 (~user@37.25.47.130)
[19:05:24] <Josh_2> Hi
[19:05:31] <char> Hi there
[19:05:48] <Josh_2> with format can I conditionally print elements from a list? basically can I reduce this:
[19:06:05] <Josh_2> (format nil "~{~A~^,~}" (loop :for ele :in '(1 3 4 5 6) :when (oddp ele) :collect ele)) into a single format call?
[19:06:40] <Josh_2> Also ~^ is very useful
[19:06:52] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[19:07:03] <gabc> Josh_2: (remove-if-not #'oddp '(1 2 3 4)) ?
[19:07:20] <Josh_2> well that shortens the loop, but I mean can I do it with format
[19:07:21] <gabc> (I don't know format much tho sorry)
[19:11:14] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[19:17:44] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[19:22:34] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[19:25:15] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[19:26:09] <Josh_2> I'm trying to represent a tree of products, their subproducts and varying lengths of time and prices for each product
[19:27:52] <Josh_2> with product A having two sub products A.b and A.c with A.b and A.c having the same number of months but varying prices on each
[19:28:09] *** Joins: amb007 (~a_bakic@222.146.204.77.rev.sfr.net)
[19:28:09] *** Quits: amb007 (~a_bakic@222.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[19:28:10] <Josh_2> I've been having a hard time finding a nice way to do this
[19:28:21] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:31:57] <char> I will try to help you, but also consider #clschool
[19:32:08] <Josh_2> what
[19:32:29] <Josh_2> is my question so plebish that I should ask it in #clschool :(
[19:33:25] <char> I'm not being demeaning; it is just a consideration.
[19:34:02] <char> can A.b have subproducts?
[19:34:38] <shka> eh
[19:35:12] <shka> Josh_2: you wanna do this in memory or in the database?
[19:36:09] <Josh_2> memory
[19:36:14] <shka> right
[19:36:27] <shka> so here is what i suggest you to do
[19:36:29] <Josh_2> char: yes, that was my thinking, this is why I've been stuck
[19:36:58] <shka> define class for representation of product snapshot in time
[19:37:21] <shka> for instance, in June
[19:38:02] <shka> slap slots with time brackets on it
[19:38:23] <shka> then, define class called product-timeline or something
[19:39:11] <shka> which will group all time version of the particular product in order, so you can binary search (or something) given the date
[19:39:47] <shka> all product-timelines, holding product-snapshot can be placed in a hashtable
[19:40:17] <shka> mapping product name to the product-timeline
[19:40:51] <shka> sub-products can be represented as a list of product names in each product
[19:41:18] <shka> next, you gonna want something to map the name of the product to the product, given the time domain
[19:41:33] <shka> and i think that this is it
[19:41:56] <shka> this way you can have varying subproducts in each month even
[19:42:12] <Josh_2> Yes that seems like a highly extensible way of doing it
[19:42:42] <shka> alternative solution is to have another hash-table mapping product-name to subproducts
[19:43:45] <shka> but this will be good only if products never gets or looses another subproduct
[19:44:48] <shka> regardless: remember that the special variables can be very helpful at times
[19:45:13] <shka> hope that this helps!
[19:46:07] <Josh_2> I think I may not have been clear enough, when I say months I mean say you can get the product for X months, and the X is adjustable with different prices say 1, 2, 3, 6, forever, etc with each seller being able to change the number of months and their prices
[19:46:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[19:46:59] <shka> Josh_2: yes, that's why you gonna need two slots to bracket the time period
[19:47:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[19:50:55] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[19:56:26] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 252 seconds)
[19:57:09] <Josh_2> I will try this approach but using lists instead of hash tables
[19:57:37] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b00b:1035:d939:6904:8916:1f7d) (Quit: Leaving)
[19:59:00] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:00:12] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 250 seconds)
[20:02:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:02:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:04:36] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 272 seconds)
[20:07:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[20:17:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 258 seconds)
[20:25:37] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:26:57] <Josh_2> shka: got this so far, I think it will work https://plaster.tymoon.eu/view/2513#2513 each user will have their own product tree which they can modify as they wish, taking away and adding
[20:27:04] <Josh_2> this is just the class structure ofc
[20:27:45] <Josh_2> Thank you for helping me, feels like you sprayed a bit of WD40 on my brain, lubricating it a bit
[20:28:44] <char> also might consider using structs. I'm not certain myself when to use struct vs class
[20:28:59] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[20:29:43] <Josh_2> When you want to go fast
[20:30:19] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:33:28] <beach> You should avoid structs unless performance measures indicate that they would have a certain advantage to standard classes.
[20:34:01] <shka> structs are annoying to use
[20:34:05] <shka> all those redefinitions
[20:34:09] <char> It is hard to get simpler than that, thanks beach
[20:34:25] <beach> shka: Exactly.
[20:36:24] <shka> but you can inline slot access... which is sometimes important
[20:36:39] <shka> but beach got it right
[20:36:51] <shka> don't waste your time with structs until you have to
[20:40:24] <beach> Also, we keep inventing new techniques, like call-site optimization, that make it possible to inline slot accessors of standard objects in many cases.  It would be silly to dumb down your programming style for reasons that may go away in the future.
[20:43:19] <beach> Same thing with generic functions.  It would be silly to avoid generic functions in favor of ordinary functions if we can make generic dispatch as fast as ordinary function calls in many cases.
[20:43:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:43:42] <beach> Same thing with keyword arguments.
[20:45:56] <shka> keyword arguments are way to useful to not use even despite theoretical performance hit
[20:46:15] <shka> and there is also INLINE
[20:47:42] <shka> i've been programming in golang lately, lack of optional/named arguments lead to some intriguing oddities in the language
[20:48:35] <shka> for instance there is os.Open, but also os.OpenFile
[20:48:54] <shka> which may rise some eyebrows
[20:49:25] <beach> Oh, just wait for the new version of the language.  I presume it is like every other language in that the specification changes every year or so.
[20:50:12] <char> beach: that is right
[20:50:30] <char> extensibe language needs no updates
[20:52:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[20:53:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[21:02:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:02:59] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[21:06:46] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:18:23] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[21:27:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:36:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[21:39:38] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:40:53] <pjb> Josh_2: (format nil "~{~@[~A~^, ~]~}" '(1 nil 2 nil 3 nil)) #| --> "1, 2, 3, " |#
[21:40:53] <pjb> Josh_2: (format nil "~{~:[odd~;even~] ~A~^, ~}" (mapcan (lambda (n) (list (evenp n) n)) '(1 2 3 4 5))) #| --> "odd 1, even 2, odd 3, even 4, odd 5" |#
[21:40:53] <pjb> Josh_2: (format nil "~:{~:[~;even ~A; ~]~}" (mapcar (lambda (n) (list (evenp n) n)) '(1 2 3 4 5))) #| --> "even 2; even 4; " |#
[21:40:53] <pjb> Josh_2: (format nil "~{~[even ~:*~A~;odd~;even ~:*~A~;odd~;even ~:*~A~;odd~;even ~:*~A~;odd~]~^; ~}" '(1 2 3 4 5)) #| --> "odd; even 2; odd; even 4; odd" |#
[21:41:45] <pjb> Josh_2: but if you want to filter the list while printing, you will have to write a format function and use it with (format nil "~{~/fmt-only-even/~^, ~}" '(1 2 3 4 5))
[21:49:20] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[21:51:38] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 272 seconds)
[21:53:52] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[22:00:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[22:01:08] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[22:01:11] *** Quits: trn (jhj@2600:3c00::f03c:92ff:feb2:b9ef) (Ping timeout: 272 seconds)
[22:08:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[22:13:44] <jcowan> That remark about Common Lisp "obarrays" should be about Lisp 1.5 or Maclisp.
[22:14:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[22:18:10] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:19:42] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:21:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[22:28:50] *** Joins: makomo (~makomo@user/makomo)
[22:28:56] *** Joins: selwyn (~selwyn@user/selwyn)
[22:36:37] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:38:02] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:38:40] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:45:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:46:55] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[22:48:41] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:49:04] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:51:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[22:51:20] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[23:10:06] *** Joins: Bike (~Bike@2603-6081-2340-023a-cd10-e750-f896-e114.res6.spectrum.com)
[23:10:06] *** ChanServ sets mode: +o Bike
[23:11:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[23:13:36] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[23:14:39] *** Joins: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de)
[23:20:39] *** Joins: frgo_ (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de)
[23:21:37] *** Quits: Bike (~Bike@2603-6081-2340-023a-cd10-e750-f896-e114.res6.spectrum.com) (Quit: Client closed)
[23:23:52] *** Quits: frgo (~frgo@p200300deef27d7007d0e4ee460703613.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:30:36] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:39:23] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[23:45:00] *** Quits: frgo_ (~frgo@dynamic-046-114-149-165.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[23:45:26] *** Joins: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de)
[23:51:19] *** Joins: lad (~lad@user/lad)
