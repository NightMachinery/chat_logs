[00:00:52] <vtorri41> i don't take itpersonally, i'm respnsibleof only a very small part of the project
[00:00:55] <vtorri41> :)
[00:02:16] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:02:55] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[00:07:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:07:46] *** Joins: cruncher (~cruncher@user/cruncher)
[00:08:58] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[00:09:16] *** Quits: nvmd (~weechat@user/nvmd) (Read error: Connection reset by peer)
[00:09:16] *** Joins: ramzy (~ramzy@102.44.102.37)
[00:10:03] *** Quits: oakyy (~oaky@2001:6b0:1:1041:5689:65ab:4784:52bd) (Ping timeout: 256 seconds)
[00:23:13] *** Quits: Guest7489 (~Guest@181.91.157.216) (Remote host closed the connection)
[00:24:27] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[00:24:42] *** Joins: ramzy (~ramzy@102.44.102.37)
[00:25:32] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:28:14] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[00:28:58] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Ping timeout: 272 seconds)
[00:29:54] *** Quits: alch (~alch@151.68.224.233) (Read error: Connection reset by peer)
[00:30:38] *** Quits: FLHerne (flh@flherne.uk) (Quit: There's a real world out here!)
[00:31:49] *** Joins: FLHerne (flh@flherne.uk)
[00:32:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[00:33:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:34:08] *** Joins: alch (~alch@151.44.11.249)
[00:34:41] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:40:12] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[00:40:27] *** Joins: ramzy (~ramzy@102.44.102.37)
[00:42:49] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:43:15] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[00:43:30] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[00:44:12] *** Quits: King_julian (~King_juli@41.23.68.86) (Ping timeout: 252 seconds)
[00:49:54] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[00:53:44] *** Joins: csrf (~csrf@user/csrf)
[00:54:31] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[00:55:32] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[00:55:33] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[00:56:00] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:56:11] *** Joins: ramzy (~ramzy@102.44.102.37)
[00:58:38] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[01:00:38] *** Quits: ncrowl (~ncrowl@83-233-96-189.cust.bredband2.com) (Ping timeout: 272 seconds)
[01:01:44] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[01:01:46] <Dean> hello!
[01:01:56] *** Joins: ncrowl (~ncrowl@89-160-77-216.cust.bredband2.com)
[01:01:58] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[01:02:27] *** Joins: ekathva__ (~ekathva@mobile-access-b04872-245.dhcp.inet.fi)
[01:02:38] <caze> hello Dean
[01:02:58] <Dean> hello master caze :D
[01:04:13] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:04:30] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:04:50] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:05:05] *** Quits: ekathva_ (~ekathva@n14jrd0b036rtepea-1.v6.elisa-mobile.fi) (Ping timeout: 252 seconds)
[01:06:17] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:06:30] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[01:06:30] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[01:06:51] *** Joins: bindu (~bindu@user/bindu)
[01:07:02] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[01:07:26] *** Joins: tejr (~tejr@user/tejr)
[01:13:21] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[01:13:35] *** Joins: ramzy (~ramzy@102.44.102.37)
[01:15:37] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:15:51] *** Joins: bladerunner1 (~bladerunn@103.167.123.127)
[01:16:19] <bladerunner1> what is the "&" for in this: bit_a = (i & 2) / 2; // Get the second bit.
[01:16:43] <caze> bladerunner1: bitwise "and"
[01:16:43] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[01:17:00] <bladerunner1> and what's for OR?
[01:17:04] <clarity> |
[01:17:11] <bladerunner1> ahh, ok
[01:17:13] <bladerunner1> thanks
[01:18:07] <caze> bladerunner1: They could also have just done: (i / 2) & 1
[01:18:21] *** Joins: Torr (~Torr@user/torr)
[01:19:44] *** Quits: brad_mssw (~bhouse@172.110.173.1) (Ping timeout: 256 seconds)
[01:19:51] <bladerunner1> yeah, makes sense
[01:22:04] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[01:22:08] *** Quits: bladerunner1 (~bladerunn@103.167.123.127) (Quit: WeeChat 3.4)
[01:23:35] *** Joins: moog__ (~moog@98.97.87.156)
[01:23:51] <SaltHilStroller_> fizzie: To follow up on our early conversation regarding `bx r0` vs `mov pc, r0`. The guy just got back to me with verbatim "Yes bx would have better performance, there was a reason I used mov, can't remember what it was"
[01:24:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:25:11] *** Joins: brad_mssw|mac (~bhouse@172.110.173.1)
[01:26:00] *** Quits: moog_ (~moog@107.126.53.51) (Ping timeout: 252 seconds)
[01:26:00] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com) (Read error: Connection reset by peer)
[01:27:21] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[01:28:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:29:53] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[01:30:07] *** Joins: ramzy (~ramzy@102.44.102.37)
[01:32:33] <constxd> kings
[01:33:36] *** Joins: kurahaupo (~kurahaupo@pa49-197-132-8.pa.qld.optusnet.com.au)
[01:35:01] *** Quits: ekathva__ (~ekathva@mobile-access-b04872-245.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:36:55] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:38:09] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:38:09] *** Joins: Satin (uid193953@user/Seten)
[01:38:50] *** Joins: immibis (~hexchat@62.156.144.218)
[01:44:55] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[01:45:01] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[01:45:16] *** Joins: ramzy (~ramzy@102.44.102.37)
[01:47:55] *** Quits: orthoplex64 (~crm@70.120.0.94) (Quit: Leaving)
[01:50:41] *** Quits: bnchs__ (~bnchs@160.177.31.32) (Remote host closed the connection)
[01:54:38] *** Quits: Macuser (Macuser@here.for-the.chat) (Ping timeout: 250 seconds)
[01:56:12] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 240 seconds)
[01:56:49] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[02:00:06] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:00:07] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:00:14] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[02:00:26] *** Joins: pulse_ (~pulse@user/pulse)
[02:00:33] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Remote host closed the connection)
[02:00:37] *** Joins: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[02:00:41] *** Joins: lllh (~UPP@198.48.244.21)
[02:00:43] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[02:00:47] *** Joins: gonogo__ (~gonogo@167.88.62.87)
[02:00:56] *** Joins: immibis_ (~hexchat@62.156.144.218)
[02:00:58] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[02:01:29] *** Joins: Goodbye_Vincent4 (cyvahl@freakshells.net)
[02:01:31] *** Joins: rany5 (~rany@user/rany)
[02:01:31] *** Quits: rany (~rany@user/rany) (Killed (tantalum.libera.chat (Nickname regained by services)))
[02:01:31] *** rany5 is now known as rany
[02:01:31] *** Joins: tasty1 (~mew@user/tasty)
[02:02:15] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:02:26] *** Quits: Waynes (~Waynes@user/waynes) (Quit: Leaving.)
[02:02:27] *** Joins: luca0N_ (~luca0N@nautilus.luca0n.com)
[02:02:29] *** Joins: novns_ (~novns@user/novns)
[02:02:31] *** Joins: MrBenC (Ben@mrbenc.net)
[02:02:31] *** Quits: MrC (~Ben@mrbenc.net) (Killed (lead.libera.chat (Nickname regained by services)))
[02:02:31] *** MrBenC is now known as MrC
[02:02:31] *** Joins: nitrix_ (~nitrix@user/nitrix)
[02:02:31] *** Joins: Bitflux (~byte@byteflux.net)
[02:02:32] *** Joins: drin (~Geezabisc@user/geezabiscuit)
[02:02:32] *** Joins: Nex8192_ (~Nex8192@user/nex8192)
[02:02:35] *** Joins: cursey_ (~cursey@user/cursey)
[02:02:35] *** Joins: phroa (~phroa@user/phroa)
[02:02:37] *** Joins: Trashlord__ (~trash@user/trashlord)
[02:02:49] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[02:03:36] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:04:15] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[02:04:27] *** Joins: Wulf4 (~Wulf@user/wulf)
[02:04:32] *** Joins: omnihil_ (hermes@camel.ethereal.net)
[02:04:37] *** Joins: zachel_ (~zachel@user/zachel)
[02:04:39] *** Joins: zwrr (~zwr@2804:d45:b966:fb00:d5f4:d325:b39e:8704)
[02:04:40] *** Joins: ski_ (~ski@remote12.chalmers.se)
[02:04:49] *** Joins: coruja_ (~coruja@user/coruja)
[02:04:55] *** Joins: Betal_ (~Betal@user/betal)
[02:04:58] *** Joins: ndorf_ (~nd@ob.noxio.us)
[02:04:59] *** Joins: tazle_ (tazle@kapsi.fi)
[02:05:03] *** Joins: vancz_ (~vancz@user/vancz)
[02:05:03] *** Joins: Xeroine_ (~Xeroine@user/xeroine)
[02:05:04] *** Quits: esselfe (~steph@user/esselfe) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[02:05:06] *** Joins: esselfe (~steph@user/esselfe)
[02:05:12] *** Joins: bparker_ (~nobody@user/bparker)
[02:05:12] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[02:05:15] *** Joins: g2anj_ (~v@58.228.230.4)
[02:05:17] *** Joins: treble1 (~treble@user/treble)
[02:05:25] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[02:05:30] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[02:05:32] *** Joins: asd_ (~noname@user/asd)
[02:05:34] *** Joins: johnnyre1 (~tth@user/johnnyreb)
[02:05:36] *** Joins: jack_rabbit (~knusbaum@23.249.37.254)
[02:05:46] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[02:07:04] *** Quits: lllh (~UPP@198.48.244.21) (Quit: :::: ( UPP ) ::::)
[02:08:07] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[02:08:09] *** Joins: marcj (~marc@205.175.215.11)
[02:08:35] *** Joins: jaeckel_ (~jaeckel@sleipnir.jaeckel.eu)
[02:09:44] *** Quits: ramzy (~ramzy@102.44.102.37) (*.net *.split)
[02:09:44] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[02:09:44] *** Quits: kurahaupo (~kurahaupo@pa49-197-132-8.pa.qld.optusnet.com.au) (*.net *.split)
[02:09:44] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[02:09:44] *** Quits: mrblarg64 (~mrblarg64@142-165-167-195.sktn.static.sasknet.sk.ca) (*.net *.split)
[02:09:44] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[02:09:44] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[02:09:44] *** Quits: treble (~treble@user/treble) (*.net *.split)
[02:09:44] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[02:09:44] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (*.net *.split)
[02:09:44] *** Quits: constxd_ (~brad@142.134.78.128) (*.net *.split)
[02:09:44] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (*.net *.split)
[02:09:44] *** Quits: knusbaum (~knusbaum@23.249.37.254) (*.net *.split)
[02:09:44] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (*.net *.split)
[02:09:44] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[02:09:44] *** Quits: Viewday115 (~Viewday@user/viewday) (*.net *.split)
[02:09:44] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[02:09:44] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[02:09:44] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (*.net *.split)
[02:09:44] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (*.net *.split)
[02:09:44] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[02:09:44] *** Quits: avar (avar@vm.nix.is) (*.net *.split)
[02:09:44] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[02:09:44] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (*.net *.split)
[02:09:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[02:09:44] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[02:09:45] *** Quits: Matt|home (~matt@adsl-74-233-58-80.mia.bellsouth.net) (*.net *.split)
[02:09:45] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[02:09:45] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[02:09:45] *** Quits: rcf (~rcf@sdf.org) (*.net *.split)
[02:09:45] *** Quits: Xeroine (~Xeroine@user/xeroine) (*.net *.split)
[02:09:45] *** Quits: coruja (~coruja@user/coruja) (*.net *.split)
[02:09:45] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:09:45] *** Quits: tazle (~tazle@kapsi.fi) (*.net *.split)
[02:09:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[02:09:45] *** Quits: novns (~novns@user/novns) (*.net *.split)
[02:09:45] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[02:09:45] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[02:09:45] *** Quits: foul_owl (~kerry@23.82.193.89) (*.net *.split)
[02:09:45] *** Quits: asd (~noname@user/asd) (*.net *.split)
[02:09:45] *** Quits: omnihil (~hermes@camel.ethereal.net) (*.net *.split)
[02:09:45] *** Quits: pranshukhandal (~ghost@envs.net) (*.net *.split)
[02:09:45] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[02:09:45] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[02:09:45] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[02:09:45] *** Quits: llh (~UPP@user/llh) (*.net *.split)
[02:09:45] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[02:09:45] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[02:09:45] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[02:09:45] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[02:09:45] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (*.net *.split)
[02:09:45] *** Quits: xa0s (~xa0s@mab.sdf.org) (*.net *.split)
[02:09:45] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[02:09:45] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[02:09:45] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[02:09:45] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[02:09:45] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[02:09:45] *** Quits: zachel (~zachel@user/zachel) (*.net *.split)
[02:09:45] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[02:09:45] *** Quits: voldial (~user@195.179.201.175) (*.net *.split)
[02:09:45] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[02:09:45] *** Quits: n1000_ (~n1000@user/n1000) (*.net *.split)
[02:09:45] *** Quits: marcj- (~marc@205.175.215.11) (*.net *.split)
[02:09:45] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[02:09:45] *** Quits: routeveg_ (~lee@197.ip-51-195-136.eu) (*.net *.split)
[02:09:45] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[02:09:45] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[02:09:45] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[02:09:45] *** Quits: Luke- (~ldm@hacksoc/alumni/ldm) (*.net *.split)
[02:09:45] *** Quits: gonogo_ (~gonogo@167.88.62.87) (*.net *.split)
[02:09:45] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[02:09:45] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[02:09:45] *** Quits: jaeckel (~jaeckel@user/jaeckel) (*.net *.split)
[02:09:45] *** Quits: zaratustra (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[02:09:45] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[02:09:45] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[02:09:45] *** Quits: tasty (~mew@user/tasty) (*.net *.split)
[02:09:45] *** Quits: aesin (~aesin@81.211.127.107) (*.net *.split)
[02:09:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[02:09:45] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[02:09:45] *** Quits: luca0N (~luca0N@nautilus.luca0n.com) (*.net *.split)
[02:09:45] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[02:09:45] *** Quits: zwr (~zwr@200-97-242-107.user3p.veloxzone.com.br) (*.net *.split)
[02:09:45] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[02:09:45] *** Quits: jtmusky (~jtmusky@104-1-122-97.lightspeed.okcbok.sbcglobal.net) (*.net *.split)
[02:09:45] *** Quits: phroa` (~phroa@user/phroa) (*.net *.split)
[02:09:45] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[02:09:45] *** Wulf4 is now known as Wulf
[02:09:45] *** nitrix_ is now known as nitrix
[02:09:46] *** drin is now known as geezabiscuit
[02:09:46] *** Goodbye_Vincent4 is now known as Goodbye_Vincent
[02:09:49] *** tasty1 is now known as tasty
[02:09:50] *** scoobydoob is now known as scoobydoo
[02:10:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:10:04] *** pulse_ is now known as pulse
[02:10:04] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:10:06] *** Quits: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[02:10:13] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[02:10:15] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[02:10:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[02:10:53] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:11:00] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:11:02] *** Joins: ramzy (~ramzy@102.44.102.37)
[02:11:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:12:23] *** Quits: brad_mssw|mac (~bhouse@172.110.173.1) (Quit: Leaving)
[02:12:39] *** Quits: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net) (Read error: Connection reset by peer)
[02:12:49] *** Joins: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net)
[02:12:59] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[02:13:42] *** Quits: joev (~joev@user/joev) (Ping timeout: 250 seconds)
[02:14:24] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:14:28] *** Joins: joev (~joev@user/joev)
[02:15:26] *** Joins: constxd_ (~brad@142.134.78.128)
[02:15:26] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[02:15:26] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[02:15:26] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[02:15:26] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:15:26] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[02:15:26] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[02:15:26] *** Joins: avar (avar@vm.nix.is)
[02:15:26] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[02:15:26] *** Joins: brdb (~alarm@24.61.226.255)
[02:15:26] *** Joins: rcf (~rcf@sdf.org)
[02:15:26] *** Joins: biotty (~coien@li35-173.members.linode.com)
[02:15:26] *** Joins: Praise (~Fat@user/praise)
[02:15:26] *** Joins: foul_owl (~kerry@23.82.193.89)
[02:15:26] *** Joins: pranshukhandal (~ghost@envs.net)
[02:15:26] *** Joins: blinky42 (~quassel@user/blinky42)
[02:15:26] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[02:15:26] *** Joins: flynn (~mcbloch@user/flynn)
[02:15:26] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[02:15:26] *** Joins: xa0s (~xa0s@mab.sdf.org)
[02:15:26] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[02:15:26] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[02:15:26] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[02:15:26] *** Joins: gjvc (~gjvc@user/gjvc)
[02:15:26] *** Joins: n1000_ (~n1000@user/n1000)
[02:15:26] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[02:15:26] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[02:15:26] *** Joins: Luke- (~ldm@hacksoc/alumni/ldm)
[02:15:26] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[02:15:26] *** Joins: Phil-Work (~phil@62.3.100.20)
[02:15:26] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[02:15:26] *** Joins: aesin (~aesin@81.211.127.107)
[02:15:56] *** Joins: Akiva (~Akiva@user/Akiva)
[02:16:07] *** Quits: foul_owl (~kerry@23.82.193.89) (Max SendQ exceeded)
[02:16:07] *** Quits: flynn (~mcbloch@user/flynn) (Max SendQ exceeded)
[02:16:23] *** Joins: Matt|home (~matt@adsl-74-233-58-80.mia.bellsouth.net)
[02:16:26] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[02:16:39] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:16:45] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[02:16:47] *** Joins: foul_owl (~kerry@23.82.193.89)
[02:16:49] *** Joins: flynn (~mcbloch@user/flynn)
[02:16:50] *** Joins: mrblarg64 (~mrblarg64@142-165-167-195.sktn.static.sasknet.sk.ca)
[02:17:01] *** Joins: koolazer (~koo@user/koolazer)
[02:17:14] *** ski_ is now known as ski
[02:17:28] *** Joins: voldial (~user@195.179.201.175)
[02:18:42] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[02:19:27] <Dean> What is Netsplit?
[02:20:02] <supakeen> It's when a server disconnects from the network and all the people connected to that server disappear with it.
[02:20:19] <Dean> thank you supakeen
[02:20:25] <supakeen> (the network is built up of quite a few servers, everyone joins one of them and then the servers interconnect and relay)
[02:20:39] <Dean> thanks!
[02:20:40] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Read error: Connection reset by peer)
[02:20:57] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[02:21:00] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Quit: Lost terminal)
[02:21:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:24:20] *** Parts: vtorri41 (~vtorri@78.197.30.2) ()
[02:29:13] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:29:41] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[02:30:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[02:32:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:33:35] *** Quits: vekay (~vekay@user/vekay) (Quit: Leaving)
[02:33:39] *** Quits: pizdets_ (~pizdets@183.182.115.74) (Ping timeout: 256 seconds)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.152)
[02:34:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:34:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:36:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:36:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:38:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:38:57] *** Joins: Macuser (Macuser@here.for-the.chat)
[02:40:58] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[02:43:14] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[02:43:29] *** Joins: seninha (~chatzilla@user/seninha)
[02:43:50] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[02:44:10] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Remote host closed the connection)
[02:44:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[02:47:46] <nitrix> (Internet Relay Chat)
[02:48:23] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[02:50:29] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:52:37] *** Joins: yggdrasil (~yggdrasil@67-0-95-171.albq.qwest.net)
[02:53:09] <yggdrasil> hi, what does s += x % 10 ; do ?
[02:53:16] <yggdrasil> i get the += part but not sure about %
[02:53:40] <caze> ,%
[02:53:40] <candide> % is the remainder after division operator
[02:54:06] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[02:54:54] <yggdrasil> hmm.
[02:55:09] <yggdrasil> wow.
[02:55:30] <yggdrasil> haha ok so it so wait what does that statement do then?
[02:55:36] <yggdrasil> if x is 919
[02:57:26] <caze> It divides 919 by 10 and yields the remainder.
[02:57:29] <yggdrasil> thats why i like python i could
[02:57:42] <yggdrasil> put this into the interactive shell
[02:57:43] <nitrix> 919 % 10. 919 cookies split equally into 100 jars gives you 91 cookies into each, leaving you left with 9 that you cannot divide fairly.
[02:57:58] <nitrix> Into ten jars, sorry.
[02:58:35] <yggdrasil> so then it stick the remainder in s right?
[02:58:35] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[02:58:47] <caze> No.
[02:58:57] <caze> Are you sure you know what += does?
[02:59:00] <yggdrasil> i dont
[02:59:28] <caze> It's the same as s = s + x % 10;
[02:59:37] <yggdrasil> ahh
[02:59:41] <nitrix> > yggdrasil | i get the += part
[02:59:46] <yggdrasil> ok thank you. sorry
[02:59:51] <yggdrasil> i know im dumb, i thought i did.
[03:00:00] <fizzie> a % b is the value r for which a/b*b + r equals a (as long as a/b is representable). ;)
[03:00:41] <fizzie> (It's a neat way of tying together the definitions of / and %, but not exactly the easiest-to-absorb definition.)
[03:00:50] <caze> Let's take bets on if he knows how integer dividsion works.
[03:00:57] <nitrix> I prefer saying it's intuitionally the "remainder" of the division, even though it's not quite true because of the sign.
[03:01:37] <yggdrasil> i do alot of python stuff and , i kinda got roped into helping  afriend who is a girl with her homework...
[03:01:59] <yggdrasil> thats the the truth ... so ive done some arduino c but thats really about it.
[03:02:24] <nitrix> I'm glad you specified your friend is a glad.
[03:02:30] <nitrix> girl.
[03:02:34] <nitrix> I'm glad I can't type.
[03:02:46] <yggdrasil> hhaa
[03:02:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:06] <yggdrasil> although i guess i should learn c ...
[03:03:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[03:03:40] *** Quits: mrblarg64 (~mrblarg64@142-165-167-195.sktn.static.sasknet.sk.ca) (Quit: Leaving)
[03:05:28] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:05:36] *** Parts: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net) (Leaving)
[03:06:22] <caze> yggdrasil: Does Python have the += operator?
[03:06:33] <yggdrasil> probboly i never use it though
[03:06:34] <yggdrasil> haha
[03:06:59] <yggdrasil>  i jsut do, like the traditional thing... x = x + s % 10
[03:07:18] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[03:08:14] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Ping timeout: 260 seconds)
[03:08:51] <yggdrasil> yea it looks like basically the same thing in python .?
[03:09:36] <constxd_> kings
[03:10:33] <fizzie> You see a lot of (well, not a _lot_ lot, but some) `x += 1` statements over in Python, since it does have that, but it doesn't have the ++.
[03:12:19] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:12:29] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[03:12:44] <yggdrasil> i do alot of network scripting stuff so, thats mostly what i use python for
[03:13:00] <constxd_> based
[03:13:07] <yggdrasil> and i do stuff where i take like a config from a device and manipulate it to feed some log aggregator or something.
[03:13:45] <yggdrasil> or like ill pull a config and its ips and then run a ldap query for owner
[03:13:50] <yggdrasil> onwer of the box.
[03:16:16] *** Joins: Guest8534 (~Guest@host181.190-137-39.telecom.net.ar)
[03:17:00] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:19:01] <yggdrasil> welll thanks for the help guys
[03:19:05] <yggdrasil> appreciate it.
[03:19:10] *** Joins: hiroshi_ (~freedom@151.57.8.7)
[03:21:07] <yggdrasil> wow i really suck at this.
[03:21:08] <yggdrasil> hahah
[03:21:17] <yggdrasil> i wont continue to bug you guys, its not fair.
[03:21:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:21:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:21:54] *** Joins: wroathe (~wroathe@user/wroathe)
[03:22:42] <constxd_> yggdrasil: what happen
[03:22:50] <yggdrasil> the next question...
[03:22:59] <yggdrasil> in c,n;
[03:23:01] <yggdrasil> n=0;
[03:23:13] <yggdrasil> while ((c = getchar()) != EOF)
[03:23:19] <yggdrasil> if (c=='\n\)
[03:23:23] <yggdrasil> ++n;
[03:23:37] <yggdrasil> value of n after the loop.
[03:23:51] <yggdrasil> im not sure what ++n is.
[03:23:51] <candide> yggdrasil: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[03:24:02] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[03:24:16] <fizzie> ,english ++n;
[03:24:17] <candide> fizzie: Pre-increment `n`.
[03:24:26] <fizzie> (Just checking how informative that is.)
[03:24:44] <cehteh> .japanese ++kawai++
[03:24:47] <constxd_> Turns out not very
[03:24:55] <fizzie> Yeah. Sometimes it is.
[03:24:57] <yggdrasil> no that actually helped.
[03:25:03] <fizzie> There's probably more efficient ways to learn the language than random questions on chat, TBH.
[03:25:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:25:20] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[03:25:28] <yggdrasil> yea , I know thats why i was like... it not fair to you guys.
[03:25:31] <constxd_> more efficient yes but not more fun
[03:25:42] <yggdrasil> you wouldnt get to make fun of me.
[03:25:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:26:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:26:22] *** Quits: Torr (~Torr@user/torr) ()
[03:26:31] <fizzie> ,english int c, n; n = 0; while ((c = getchar()) != EOF) if (c == '\n') ++n; // let's check the full thing too
[03:26:32] <candide> fizzie: Declare `c` and `n` as int. Then assign to `n` the value 0. Then while (`c` which is assigned to be the result of the function `getchar`) is not equal to `EOF`, if `c` is equal to a newline then pre-increment `n`. Finally, a quick comment: "let's check the full thing too".
[03:26:39] *** Joins: Torr (~Torr@user/torr)
[03:26:42] *** Quits: hiroshi_ (~freedom@151.57.8.7) (Quit: hiroshi_)
[03:26:53] <yggdrasil> thats pretty cool.
[03:28:12] <yggdrasil> so then n is 1 i think
[03:28:17] <yggdrasil> after the first loop
[03:28:59] <constxd_> if the first character on stdin is a newline, sure
[03:29:26] *** Quits: cruncher (~cruncher@user/cruncher) (Quit: Leaving)
[03:29:33] <yggdrasil> yea thats what i was tihnking its dependant on whats typed ?
[03:29:45] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:30:05] <constxd_> typed or otherwise written to that stream
[03:30:13] <yggdrasil> yea kind of a dumb question.
[03:30:49] <yggdrasil> it just says after the while loop, not the number of loop its in...
[03:31:48] <pragma-> it even does comments (most of the time)
[03:32:03] <fizzie> The direct Python equivalent is: n = 0; for c in sys.stdin.read(): if c == '\n': n += 1
[03:32:04] <yggdrasil> its tight.
[03:32:11] <pragma-> shit's dope, bro.
[03:32:21] <fizzie> I imagine it's looking for a high-level description of what the program is trying to accomplish.
[03:33:14] <yggdrasil> i dont know, i should have known i was gonna pay for sex one way or another...
[03:33:17] <yggdrasil> :(
[03:33:33] <constxd_> bro?
[03:33:46] <yggdrasil> im helping her with her homework?
[03:33:57] <constxd_> oh i missed the beginning of this
[03:34:01] <yggdrasil> haha
[03:34:06] <pragma-> bro.
[03:34:15] <yggdrasil> its better than actually paying i guess
[03:34:26] <yggdrasil> and i get to learn a little c while im at it.
[03:34:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[03:34:43] <pragma-> you're gonna get computerzoned
[03:34:50] <fizzie> Is that like in TRON?
[03:34:57] <yggdrasil> english hahah
[03:35:14] <pragma-> you're gonna become her personal I.T. slave
[03:35:29] <fizzie> ,cc int c, n; n = 0; while ((c = getchar()) != EOF) if (c == '\n') ++n; printf("n = %d", n); /* you could of course also just experiment */ -stdin=foo\nbar\nbaz\nquux
[03:35:31] <candide> fizzie: n = 4
[03:35:41] <yggdrasil> english brb
[03:35:56] <yggdrasil> exit
[03:36:00] *** Quits: yggdrasil (~yggdrasil@67-0-95-171.albq.qwest.net) (Quit: leaving)
[03:36:10] <pragma-> imagine him using vim
[03:36:15] <constxd_> :)
[03:36:36] *** Joins: yggdrasil (~yggdrasil@67-0-95-171.albq.qwest.net)
[03:37:28] <yggdrasil> english int p; for (p = 1; b > 0; --b) p = p * a; return p;
[03:37:40] <constxd_> u need the , or ! at the start king
[03:37:42] <pragma-> needs to start with `candide:` or a comma
[03:37:52] <yggdrasil> ! english int p; for (p = 1; b > 0; --b) p = p * a; return p;
[03:37:54] <pragma-> doesn't use a ! in this channel
[03:37:57] <constxd_> oh
[03:38:01] <constxd_> it used to
[03:38:07] <yggdrasil> ,english int p; for (p = 1; b > 0; --b) p = p * a; return p;
[03:38:08] <constxd_> only 90s kids will remember
[03:38:08] <candide> yggdrasil: Declare `p` as an int. Then prepare a loop by assigning to `p` the value 1, then for as long as `b` is greater than 0, assign to `p` the result of the expression `p` times `a`. After each iteration, pre-decrement `b`. Finally, return `p`.
[03:38:24] <pragma-> it does in #c-offtopic, though
[03:38:30] <pragma-> candide: regset #c-offtopic trigger
[03:38:30] <candide> Registry: [#c-offtopic] trigger not found; similiar matches: [#c] trigger; [#perlbot] trigger; [general] trigger
[03:38:42] <pragma-> see?
[03:38:54] * pragma- nods as if he just proved something.
[03:39:29] <pragma-> ,regset general trigger
[03:39:29] <candide> [general] trigger: value set to [!,]
[03:40:15] <pragma-> I thought #c-offtopic had its own trigger.
[03:40:18] * pragma- shrugs.
[03:40:45] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:40:47] <fizzie> You should add ¡ as a trigger, to catch off guard all those ¡foo! interjections.
[03:41:02] <fizzie> (Do people actually do that stuff in IRC, even in languages where it's a thing?)
[03:41:34] <pragma-> ¡olé!
[03:41:58] <constxd_> what happened to atk
[03:42:32] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 250 seconds)
[03:42:35] *** Joins: Wulf (~Wulf@user/wulf)
[03:43:12] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:44:14] <yggdrasil> , english int i = 0;
[03:44:14] <yggdrasil> char s[] = “To be or not to be”;
[03:44:14] <yggdrasil> while (s[i] != '\0')
[03:44:15] <candide> yggdrasil: Declare `i` as an int initialized to 0.
[03:44:26] <pragma-> constxd_: he lost his A rating
[03:44:43] <pragma-> he is a mere tk now
[03:44:45] <yggdrasil> :(
[03:44:52] <yggdrasil> ,english int i = 0; char s[] = “To be or not to be”; while (s[i] != '\0'); ++i;
[03:44:53] <candide> yggdrasil: error: stray '\342' in program error: expected ',' or ';' before 'be' error: stray '\342' in program
[03:44:56] *** Joins: fapple (~user@193.32.249.138)
[03:45:12] <pragma-> you have unicode quotes in your copy/paste
[03:45:21] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:45:26] <yggdrasil> , english int i = 0; char s[] = 'To be or not to be'; while (s[i] != '\0'); ++i;
[03:45:27] <candide> yggdrasil: error: character constant too long for its type error: invalid initializer
[03:45:35] <yggdrasil> hmmm..
[03:45:41] <constxd_> ,english int i = 0; char s[] = "To be or not to be"; while (s[i] != '\0'); ++i;
[03:45:42] <candide> constxd_: Declare `i` as an int initialized to 0. Then declare `s` as an array of char initialized to the result of the expression "To be or not to be". Then while the element at location `i` of `s` is not equal to '\0', do nothing. Finally, pre-increment `i`.
[03:45:55] <yggdrasil> i jumped on my winbox i guess over putty , it screwed it up.
[03:46:18] <pragma-> that's one way to detect a semi-colon
[03:46:18] <constxd_> are you copying the code from a pdf or something
[03:46:30] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[03:46:34] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[03:46:35] <yggdrasil> ahh yea.
[03:46:52] <yggdrasil> dam your good !
[03:46:56] <yggdrasil> constxd_: Declare `i` as an int initialized to 0. Then declare `s` as an array of char initialized to the result of the expression "To be or not to be". Then while the element at location `i` of `s` is not equal to '\0', do nothing. Finally, pre-increment `i`.
[03:47:05] <yggdrasil> doh!
[03:47:38] <pragma-> you're certain to woo her with your mastery of technology
[03:48:20] <yggdrasil> shes a cutie. kind of a mess though.
[03:48:37] <yggdrasil> i just got divorced like 2 years ago so , shes just one of the harem.
[03:48:48] <yggdrasil> i try to take care of them.
[03:49:12] <yggdrasil> shes the youngest one in the harem, i think shesl ike 29 or so.
[03:49:18] <constxd_> being in a C programming course is a red flag for a woman
[03:49:36] <pony> why?
[03:50:02] <yggdrasil> shes got bigger problems than that hahah
[03:50:08] <constxd_> because well-adjusted women generally don't go into STEM
[03:50:29] <constxd_> women in STEM is a psyop
[03:51:00] <yggdrasil> well adjusted women do java
[03:51:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:51:49] *** Joins: Figworm (FiggyWitIt@user/figworm)
[03:55:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:55:13] *** Joins: jess (~jess@libera/staff/cat/jess)
[03:55:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:58:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:59:48] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[04:00:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:04:33] *** Joins: hizonxx (~hizon@123.114.24.8)
[04:04:49] *** Quits: msk (~Thunderbi@89.205.124.19) (Quit: msk)
[04:07:09] <yggdrasil> ,english #define ARSIZE 10; int ch_arr[ARSIZE], count1; int count2, stop, lastchar; lastchar = 0; stop = 0; while(stop != 1) {ch_arr[lastchar] = getchar();  if (ch_arr[lastchar] == ‘\n’) ;stop = 1; else; lastchar = lastchar + 1;if(lastchar == ARSIZE) ;lstop = 1;}
[04:07:09] <candide> yggdrasil: error: stray '\342' in program error: expected statement before ')' token error: 'else' without a previous 'if' error: expected ')' before ';' token note: in expansion of macro 'ARSIZE' note: to match this '(' error: stray '\342' in program note: in expansion of macro 'ARSIZE' error: expected expression before '}' token
[04:07:49] <yggdrasil> ,english #define ARSIZE 10; int ch_arr[ARSIZE], count1; int count2, stop, lastchar; lastchar = 0; stop = 0; while(stop != 1) {ch_arr[lastchar] = getchar();  if (ch_arr[lastchar] == '\n') ;stop = 1; else; lastchar = lastchar + 1;if(lastchar == ARSIZE) ;lstop = 1;}
[04:07:50] <candide> yggdrasil: Define the macro `ARSIZE` to mean 10; int ch_arr[ARSIZE], count1; int count2, stop, lastchar; lastchar = 0; stop = 0; while(stop != 1) {ch_arr[lastchar] = getchar(); if (ch_arr[lastchar] == '\n' ) ;stop = 1; else; lastchar = lastchar + 1;if(lastchar == ARSIZE) ;lstop = 1;}.
[04:08:20] <constxd_> yggdrasil: /msg candide ,english ...
[04:08:26] <yggdrasil> rgoer
[04:08:31] <yggdrasil> roger..
[04:08:36] <pragma-> you need to use \n instead of ; at the end of #define
[04:08:36] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 240 seconds)
[04:08:46] <yggdrasil> ahhh...
[04:08:47] <pragma-> it thinks the entire thing is part of the #define
[04:08:49] <yggdrasil> i was wondering about that.
[04:08:50] <yggdrasil> yea
[04:09:27] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:15:06] *** Joins: tec_ (~quassel@gate.sixtopia.net)
[04:15:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[04:15:54] *** Quits: fapple (~user@193.32.249.138) (Quit: leaving)
[04:16:09] *** Joins: zer0x (~zer0x@1.55.210.143)
[04:16:11] *** Joins: rgrinberg (~textual@177.244.18.30)
[04:23:07] *** Quits: hizonxx (~hizon@123.114.24.8) (Quit: Leaving)
[04:23:51] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:27:37] *** Quits: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:30:01] *** Quits: rgrinberg (~textual@177.244.18.30) (Read error: Connection reset by peer)
[04:30:02] *** Quits: alch (~alch@151.44.11.249) (Read error: Connection reset by peer)
[04:30:02] *** Joins: nostart (~nostar@107.175.102.69)
[04:30:38] *** Joins: rgrinberg (~textual@177.244.18.30)
[04:32:12] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[04:34:27] *** Joins: alch (~alch@151.44.49.109)
[04:36:44] *** Quits: Guest8534 (~Guest@host181.190-137-39.telecom.net.ar) (Remote host closed the connection)
[04:40:13] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:41:09] *** Joins: LuKaRo (~LuKaRo@p200300dfa712f1141fa1e0576466c280.dip0.t-ipconnect.de)
[04:43:21] *** Joins: MsPoop (~MsPoop@S01069050ca4e3573.cg.shawcable.net)
[04:56:38] *** Joins: vysn (~vysn@user/vysn)
[04:56:45] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:01:50] *** Joins: semeion (~semeion@user/semeion)
[05:04:28] *** Quits: mahmutov (~mahmutov@5.176.2.106) (Ping timeout: 272 seconds)
[05:06:00] *** Quits: newblue (~SingSong@user/yagamisato) (Ping timeout: 252 seconds)
[05:06:39] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[05:07:05] *** Joins: m4v (~znc@ubuntu/member/m4v)
[05:13:47] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:14:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad4e:3a0a:e234:5531) (Quit: Quit)
[05:18:00] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:b9b6:fae0:c24f:e19b)
[05:18:32] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[05:18:39] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[05:19:04] *** Joins: joev (~joev@user/joev)
[05:21:29] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:21:46] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:b9b6:fae0:c24f:e19b) (Client Quit)
[05:22:47] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:24:23] *** Joins: fe23 (~fe23@2409:8a34:466:6010:ccc9:1297:bd1a:aa23)
[05:24:42] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[05:24:48] *** Joins: Torr (~Torr@user/torr)
[05:27:46] *** Joins: eddof13 (~eddof13@192.154.196.160)
[05:30:15] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:34:12] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[05:35:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[05:36:14] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:37:56] *** Joins: slimbo (~qooupapn@user/slimbo)
[05:40:43] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[05:43:38] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Read error: Connection reset by peer)
[05:46:12] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:49:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[05:49:29] *** Quits: slimbo (~qooupapn@user/slimbo) (Remote host closed the connection)
[05:54:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:55:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:55:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:55:24] *** Joins: wroathe (~wroathe@user/wroathe)
[05:57:02] *** Quits: coruja_ (~coruja@user/coruja) (Quit: WeeChat 3.4)
[05:57:47] *** Joins: coruja (~coruja@user/coruja)
[05:57:56] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[05:58:14] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[05:58:39] *** Joins: joev (~joev@user/joev)
[05:59:06] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[05:59:49] *** Quits: gog (~ada@user/gog) (Quit: byee)
[06:00:22] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[06:00:33] *** novns_ is now known as novns
[06:05:17] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 272 seconds)
[06:05:38] <yggdrasil> constxd: pragma-: fizzie: thanks for the help gents.
[06:05:40] <yggdrasil> appreciate it.
[06:09:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:10:36] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 240 seconds)
[06:11:35] *** Joins: O0c (~b@69-226-234-181.lightspeed.nsvltn.sbcglobal.net)
[06:12:16] <O0c> How can I use surf with tor?
[06:12:51] <O0c> Is this an appropriate channel to discuss suckless software, becuase it is written entirely in C ?
[06:13:14] <pony> not really
[06:13:28] <O0c> I'm sorry to bother you.
[06:15:30] *** Joins: Inline__ (~Inline@p200300cd472d8600a7f83f236a05ec56.dip0.t-ipconnect.de)
[06:15:45] *** Parts: O0c (~b@69-226-234-181.lightspeed.nsvltn.sbcglobal.net) ()
[06:17:28] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[06:17:42] *** Quits: eddof13 (~eddof13@192.154.196.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:17:57] *** Quits: Inline (~Inline@p200300cd470c47009a06da4df68ae634.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:23:41] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:25:16] *** Quits: cnsunyour (~sunyour@129.226.182.99) (Quit: WeeChat 3.1)
[06:25:38] *** Joins: sunyour (~sunyour@129.226.182.99)
[06:25:44] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:25:52] *** Quits: sunyour (~sunyour@129.226.182.99) (Client Quit)
[06:26:14] *** Joins: sunyour (~sunyour@129.226.182.99)
[06:31:29] *** Joins: slimbo (~slim@user/slimbo)
[06:31:34] *** Joins: O0c (~b@69-226-234-181.lightspeed.nsvltn.sbcglobal.net)
[06:31:45] <O0c> How similar is C to go ?
[06:33:06] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:49] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[06:35:17] *** Quits: yggdrasil (~yggdrasil@67-0-95-171.albq.qwest.net) (Ping timeout: 268 seconds)
[06:35:22] <O0c> sweetsymph: Do you happen to know how similar C is to go?
[06:36:24] *** Joins: yggdrasil (~yggdrasil@67-0-79-69.albq.qwest.net)
[06:36:36] <O0c> yggdrasil: How are you?
[06:40:17] <fizzie> It's not really very. There's some superficial syntactic similarity, but Go does all that automatic memory management, and has all those higher-level facilities (maps, closures, goroutines, channels) built into the language. Lack of any exception handling and mostly being explicit about pointers are a few other points of similarity though.
[06:42:14] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[06:43:20] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:44:36] <Maxdamantus> Might be worth mentioning that Go is one of the few languages other than C with structs that are normally unboxed.
[06:45:02] <Maxdamantus> So its memory handling is actually relatively similar to C in that respect.
[06:45:28] <O0c> Okay.
[06:45:30] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:45:36] <O0c> Thank you for the information.
[06:45:55] <fizzie> And obviously both are similar if you start comparing them to languages that emphasize other paradigms (let's say Haskell, Prolog, ...) but that doesn't really make Go similar to C in particular.
[06:46:11] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[06:46:33] <O0c> Is it okay to talk about languages being compilded vs being interpreted?
[06:46:51] <fizzie> ISTR C# does the "structs are value types" thing too.
[06:47:11] <O0c> What doess ISTR mean?
[06:47:29] <fizzie> "I seem to recall."
[06:47:33] <O0c> Okay.
[06:47:48] <O0c> I was told that C is very different from C#.
[06:48:02] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:48:11] <fizzie> Being interpreted vs. compiled feels more like an implementation difference than a language difference to me.
[06:48:43] <Maxdamantus> Value types are not necessarily the same as structs, though I'm not familiar with C#.
[06:49:10] <O0c> Is it possible to implement C by interpretation instead of compiling?
[06:49:11] <fizzie> If you count C# as different from C (which is a reasonable position), then Go should logically count as different too.
[06:49:17] <fizzie> Certainly.
[06:49:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:49:48] <fizzie> Cling is a "well-known" (as far as these things go) C interpreter.
[06:50:10] <Maxdamantus> No, they're the same as in C in that they are specifically unboxed, so you can't do something like `a.b = a;`
[06:50:24] <Maxdamantus> since that would imply having a type with infinite size.
[06:51:21] <fizzie> Well, Cling maybe focuses more on C++, but I've been informed it does C too.
[06:51:27] <Maxdamantus> I'm just not sure if that's also true in C#, but it might be.
[06:51:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:52:21] <fizzie> That's what I meant by them being value types.
[06:52:32] <fizzie> The C# definition: "Value types and reference types are the two main categories of C# types. A variable of a value type contains an instance of the type. This differs from a variable of a reference type, which contains a reference to an instance of the type."
[06:53:08] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:17] <O0c> Is C++ just C, but object oriented instead of going in order.
[06:55:40] <O0c> Should it be called C--?
[06:58:50] *** Joins: meandrain (~meandrain@2a02:2f0e:f70f:6e00:705a:a9d3:274:ebee)
[06:58:57] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[06:59:58] *** Parts: O0c (~b@69-226-234-181.lightspeed.nsvltn.sbcglobal.net) ()
[07:02:13] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[07:04:58] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Remote host closed the connection)
[07:07:14] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:09:14] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:09:15] *** Parts: slimbo (~slim@user/slimbo) (WeeChat 3.4)
[07:09:26] *** Joins: slimbo (~slim@user/slimbo)
[07:10:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:13:53] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[07:18:50] *** Joins: kurahaupo (~kurahaupo@pa49-182-12-74.pa.qld.optusnet.com.au)
[07:18:58] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:19:05] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[07:20:12] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 252 seconds)
[07:23:19] *** Quits: Dotz0cat (~Dotz0cat@h244.35.188.173.dynamic.ip.windstream.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:24:36] <tusko> no
[07:24:42] <tusko> C++ is a totally different language
[07:25:15] *** Joins: Dotz0cat (~Dotz0cat@h244.35.188.173.dynamic.ip.windstream.net)
[07:26:45] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[07:27:00] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:27:01] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[07:28:58] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[07:31:25] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[07:31:48] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[07:34:18] *** Joins: kts (~kts@103.73.237.109)
[07:34:26] *** nwulfe is now known as night_wulfe
[07:35:13] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:36:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[07:37:16] *** Joins: tejr (~tejr@user/tejr)
[07:42:24] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[07:42:39] *** Joins: ramzy (~ramzy@102.44.102.37)
[07:44:03] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[07:44:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:44:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:44:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:45:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[07:48:40] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[07:49:58] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 250 seconds)
[07:50:55] *** Joins: frost (~frost@user/frost)
[07:51:09] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[07:51:30] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[07:51:40] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 272 seconds)
[07:58:39] *** Joins: saribro (~swinnenb@user/swinnenb)
[07:59:45] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:00:09] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[08:00:39] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[08:01:32] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 240 seconds)
[08:02:28] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[08:03:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:07:23] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:07:24] *** Joins: AlterEgo (~AlterEgo@2601:8c1:17f:2630::3d3d)
[08:07:31] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[08:08:42] *** Quits: AlterEgo (~AlterEgo@2601:8c1:17f:2630::3d3d) (Quit: WeeChat 3.4)
[08:09:47] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:12:16] *** some02 is now known as sudden
[08:12:48] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[08:13:22] *** Joins: rgrinberg (~textual@177.244.18.30)
[08:13:39] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:15:44] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:18:18] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[08:18:52] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[08:24:36] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 272 seconds)
[08:25:01] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:26:39] *** Joins: ymwm (~yingmanwu@110.85.121.119)
[08:27:32] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[08:27:48] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[08:29:22] *** Joins: raym (~raym@user/raym)
[08:29:34] *** Quits: alch (~alch@151.44.49.109) (Read error: Connection reset by peer)
[08:29:59] *** Joins: lsszze (~Username@189.127.31.60)
[08:30:30] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:34:52] *** Joins: alch (~alch@151.46.88.56)
[08:35:21] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[08:40:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[08:44:06] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[08:44:07] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[08:44:54] *** Joins: ztx (~ztx@user/ztx)
[08:45:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[08:47:05] *** Quits: lsszze (~Username@189.127.31.60) (Quit: Going offline, see ya! (www.adiirc.com))
[08:47:49] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Read error: Connection reset by peer)
[08:47:53] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Read error: Connection reset by peer)
[08:48:05] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[08:48:05] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Read error: Connection reset by peer)
[08:48:17] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[08:48:40] *** Quits: tm512 (~tm512@user/tm512) (Read error: Connection reset by peer)
[08:48:54] *** Joins: tm512 (~tm512@50.53.132.213)
[08:49:00] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 240 seconds)
[08:49:01] *** Quits: tm512 (~tm512@50.53.132.213) (Changing host)
[08:49:01] *** Joins: tm512 (~tm512@user/tm512)
[08:49:20] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:49:20] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:50:06] *** Quits: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c) (Quit: ZNC - https://znc.in)
[08:50:06] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:50:07] *** Quits: pony (sid524992@smol/hors) (Read error: Connection reset by peer)
[08:50:07] *** Quits: ikiryo (sid109660@user/ikiryo) (Read error: Connection reset by peer)
[08:50:07] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Read error: Connection reset by peer)
[08:50:07] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Write error: Connection reset by peer)
[08:50:08] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Read error: Connection reset by peer)
[08:50:08] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (Read error: Connection reset by peer)
[08:50:08] *** Quits: buhman (sid411355@user/buhman) (Read error: Connection reset by peer)
[08:50:08] *** Quits: chewbranca (sid35447@couchdb/committer/chewbranca) (Read error: Connection reset by peer)
[08:50:16] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[08:50:23] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[08:50:24] *** Joins: pony (sid524992@smol/hors)
[08:50:24] *** Joins: ikiryo (sid109660@user/ikiryo)
[08:50:25] *** Joins: BlueShark (sid10311@user/blueshark)
[08:50:26] *** Joins: chewbranca (sid35447@couchdb/committer/chewbranca)
[08:50:26] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[08:50:27] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[08:50:27] *** Joins: buhman (sid411355@user/buhman)
[08:50:28] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[08:50:29] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[08:50:29] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[08:50:30] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[08:50:31] *** Joins: DarkPlutonium (~DarkUrani@stdrand.com)
[08:50:32] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[08:50:38] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 250 seconds)
[08:50:40] *** Quits: lonjil (~quassel@user/lonjil) (Remote host closed the connection)
[08:51:48] *** Joins: lonjil (~quassel@user/lonjil)
[08:51:56] *** Quits: bw_ (~bw@coconut.xen.prgmr.com) (Ping timeout: 250 seconds)
[08:51:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[08:52:40] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[08:52:45] *** Joins: bw_ (~bw@coconut.xen.prgmr.com)
[09:10:46] *** Joins: zacts (~zacts@user/zacts)
[09:16:15] *** Quits: rgrinberg (~textual@177.244.18.30) (Ping timeout: 252 seconds)
[09:17:48] *** Quits: kurahaupo (~kurahaupo@pa49-182-12-74.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[09:18:31] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:19:12] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:20:27] *** Joins: rgrinberg (~textual@177.244.18.30)
[09:24:02] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[09:28:50] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:30:33] *** Quits: kts (~kts@103.73.237.109) (Ping timeout: 252 seconds)
[09:31:10] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:37:47] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[09:39:31] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[09:41:53] *** Quits: dasrael (~rabbit@user/dasrael) (Quit: And away we go!)
[09:43:28] *** Joins: kts (~kts@103.73.237.109)
[09:43:41] *** Joins: dasrael (~rabbit@user/dasrael)
[09:43:45] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[09:45:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:45:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:47:02] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[09:47:19] *** Quits: pony (sid524992@smol/hors) ()
[09:47:41] *** Joins: pony (sid524992@smol/hors)
[09:49:14] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[09:49:28] *** Joins: ramzy (~ramzy@102.44.102.37)
[09:50:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:50:51] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:52:42] *** Joins: savolla (~quassel@95.10.239.22)
[09:56:30] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:49fc:dd14:62fe:1d6f) (Ping timeout: 250 seconds)
[09:59:01] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e7c4:5253:dd7b:aefb)
[10:02:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[10:02:06] *** Joins: oakyy (~oaky@2-248-81-51-no181.tbcn.telia.com)
[10:02:44] *** Trashlord__ is now known as Trashlord
[10:04:40] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[10:05:02] *** Quits: oakyy (~oaky@2-248-81-51-no181.tbcn.telia.com) (Client Quit)
[10:05:17] *** Quits: ramzy (~ramzy@102.44.102.37) (Ping timeout: 256 seconds)
[10:05:20] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[10:06:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:07:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:07:41] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Remote host closed the connection)
[10:09:56] *** Quits: buzel (~buzel@fsf/member/buzel) (Quit: bye)
[10:10:01] *** Joins: ramzy (~ramzy@102.44.102.37)
[10:10:45] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[10:11:01] *** Joins: ramzy (~ramzy@102.44.102.37)
[10:16:57] *** Joins: zer0x (~zer0x@1.55.210.143)
[10:21:07] *** Joins: buzel (~buzel@fsf/member/buzel)
[10:21:48] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 240 seconds)
[10:23:39] <APic> Moin
[10:23:42] <APic> ww
[10:25:00] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 252 seconds)
[10:26:54] *** Quits: ramzy (~ramzy@102.44.102.37) (Remote host closed the connection)
[10:27:00] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[10:27:22] *** Joins: ramzy (~ramzy@102.44.102.37)
[10:29:59] *** Quits: ramzy (~ramzy@102.44.102.37) (Client Quit)
[10:33:21] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[10:36:10] *** Joins: Atque (~Atque@user/atque)
[10:38:46] *** Quits: slimbo (~slim@user/slimbo) (Quit: WeeChat 3.4)
[10:46:30] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:47:24] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:47:34] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[10:48:19] *** Quits: savolla (~quassel@95.10.239.22) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:48:40] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[10:52:46] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[10:56:03] *** Joins: zer0x (~zer0x@1.55.210.143)
[10:56:04] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:57:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:09:30] *** Joins: mahmutov (~mahmutov@5.176.1.238)
[11:14:25] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:15:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:18:46] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 272 seconds)
[11:18:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:19:08] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[11:19:48] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[11:25:58] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:28:16] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 272 seconds)
[11:29:25] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:34:18] *** Quits: MsPoop (~MsPoop@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[11:34:54] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[11:39:38] *** Quits: Xeroine_ (~Xeroine@user/xeroine) (Quit: leaving)
[11:42:09] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[11:44:05] *** Joins: Xeroine (~Xeroine@user/xeroine)
[11:44:21] *** Quits: z4r4 (~z4r4@89.36.78.168) (Quit: Leaving.)
[11:46:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:47:40] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[11:50:55] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:50:57] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:51:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:52:48] *** Joins: jusski (~user@88.118.27.206)
[11:53:08] *** Joins: strajder (~strajder@user/strajder)
[11:54:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[11:59:06] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[12:08:48] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:16:45] *** Joins: oakyy (~oaky@2-248-81-51-no181.tbcn.telia.com)
[12:18:37] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:21:22] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[12:22:17] *** Joins: novns (~novns@user/novns)
[12:22:36] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[12:24:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[12:25:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:29:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[12:29:33] *** Quits: alch (~alch@151.46.88.56) (Read error: Connection reset by peer)
[12:30:57] *** Quits: mahmutov (~mahmutov@5.176.1.238) (Ping timeout: 252 seconds)
[12:32:03] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Ping timeout: 256 seconds)
[12:32:40] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:33:34] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[12:34:02] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[12:34:09] *** Joins: alch (~alch@151.46.47.14)
[12:35:34] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:36:29] *** Joins: meator (~meator@user/meator)
[12:36:41] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:36:59] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:40:30] *** Joins: moog (~moog@98.97.87.156)
[12:41:07] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[12:41:51] *** Joins: ztx (~ztx@user/ztx)
[12:42:49] *** Quits: moog__ (~moog@98.97.87.156) (Ping timeout: 256 seconds)
[12:43:54] *** Joins: on^ (~on@50.232.121.75)
[12:47:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:11] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:50:46] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[12:55:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:57:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: No route to host)
[13:00:35] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[13:01:59] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:06:04] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:08:30] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[13:08:54] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:14:20] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[13:14:26] <dave0> ,cc raise(SIGABORT);
[13:14:27] <candide> dave0: error: 'SIGABORT' undeclared; did you mean 'SIGABRT'?
[13:14:45] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[13:16:15] *** Quits: kajiryoj- (~kajiryoji@180.160.50.152) (Quit: ZNC 1.8.2 - https://znc.in)
[13:22:51] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) (Remote host closed the connection)
[13:24:02] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[13:27:24] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:33:12] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[13:34:23] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:35:31] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[13:35:55] <cytokine_storm> #include <stdio.h>
[13:35:55] <cytokine_storm> #ifdef _WIN32 // Includes both 32 bit and 64 bit
[13:35:55] <cytokine_storm> #ifdef _WIN64
[13:35:55] <cytokine_storm>   printf("Windows 64 bit\n")
[13:35:58] <cytokine_storm> #else
[13:35:58] *** ChanServ sets mode: +o candide
[13:35:58] *** candide sets mode: +b *!~user@user/cytokine-storm/x-1083107
[13:37:04] *** Joins: ztx (~ztx@user/ztx)
[13:37:16] *** candide sets mode: -b *!~user@user/cytokine-storm/x-1083107
[13:37:45] <cytokine_storm> pre.c:9:10: error: expected declaration specifiers or â...â before string constant
[13:37:45] <cytokine_storm>     9 |   printf("Not a Windows OS\n")
[13:37:46] <cytokine_storm>       |          ^~~~~~~~~~~~~~~~~~~~
[13:37:46] <cytokine_storm>  
[13:37:52] <cytokine_storm> i get this why
[13:38:03] <cytokine_storm> the error
[13:38:30] <dave0> did you #include <windows.h> ?
[13:39:15] <cytokine_storm> no but when i put the (#ifdef... #endif) part inside main() it works
[13:40:26] <dave0> so you fixed it, yay
[13:40:46] <cytokine_storm> no but why it doest work like that
[13:41:29] <dave0> no idea
[13:41:45] <Bou> all I can see from your code is that the first printf seems to be missing a semicolon
[13:42:11] <cytokine_storm> yeah even after i put ; it doesnt work
[13:42:41] <cytokine_storm> of course ; was missing but still it shows error
[13:43:04] <Bou> please post the full program (not here, use bpa.st or some other pastebin thing)
[13:44:03] <cytokine_storm> https://paste.debian.net/1233914
[13:44:07] <cytokine_storm> this runs fine
[13:45:06] <cytokine_storm> https://paste.debian.net/1233915
[13:45:12] <cytokine_storm> but this shows the error
[13:45:36] <Bou> of course
[13:45:48] <Bou> this will put the printf outside your main function
[13:46:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:46:27] *** Joins: aradesh (~aradesh@user/aradesh)
[13:46:41] <cytokine_storm> https://paste.debian.net/1233916
[13:47:00] <cytokine_storm> but if i // comment out the last printf it compiles fine without error
[13:47:10] <Bou> this https://bpa.st/ELXQ do you agree that this is an incorrect program?
[13:47:55] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[13:48:05] <dave0> cytokine_storm: it has to be in a function
[13:48:49] <Bou> and commenting it out will work, because comments can be anywhere
[13:48:57] <cytokine_storm> okay so printf has to be inside a function always
[13:49:12] <dave0> yep
[13:49:24] <dave0> cytokine_storm: you could instead put a variable there
[13:49:47] <cytokine_storm> yes
[13:50:08] <dave0> eg.   #ifdef _WIN64 char *os = "windows 64 bit"; #else char *os = "windows 32 bit"; #endif
[13:50:23] <dave0> then you could  printf(os);  in your function
[13:51:18] <cytokine_storm> yeah right
[13:52:34] <cytokine_storm> thanks guys
[13:53:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:57:59] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[13:58:46] *** Joins: pucara (~i@host112.190-139-217.telecom.net.ar)
[13:58:56] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[13:59:56] *** Quits: avar (avar@vm.nix.is) (Quit: Lost terminal)
[14:00:12] *** Joins: avar (avar@vm.nix.is)
[14:00:54] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 272 seconds)
[14:03:05] *** Joins: iomari891 (~iomari891@197.210.76.39)
[14:04:36] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 240 seconds)
[14:04:56] *** Joins: vekay (~vekay@user/vekay)
[14:04:57] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[14:06:39] *** Quits: kts (~kts@103.73.237.109) (Ping timeout: 252 seconds)
[14:07:22] *** Joins: namkeleser (~namkelese@101.175.104.107)
[14:08:59] *** Joins: slimbo (~slim@user/slimbo)
[14:09:40] *** imm__ is now known as imm_
[14:13:54] *** Joins: cadmio (~cadmio@151.47.50.184)
[14:14:05] <cadmio> I've read that const values cannot be assigned
[14:14:21] <cadmio> then I tried const int a = 5; int b = a; and gcc doesn't complain at all
[14:14:49] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[14:15:47] *** Joins: zacts (~zacts@user/zacts)
[14:16:18] <NRK> ,cc const int a = 5; a = 10;
[14:16:19] <candide> NRK: error: assignment of read-only variable 'a'
[14:16:28] <NRK> complains fine
[14:18:33] *** Joins: kurahaupo (~kurahaupo@pa49-182-12-74.pa.qld.optusnet.com.au)
[14:18:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[14:19:08] <cadmio> I've added also -Wall
[14:21:28] <cadmio> NRK: that's a reassignment
[14:21:57] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:22:21] <cadmio> but I've read that "a symbol with the const qualifier merely means that the symbol cannot be used for assignment"
[14:22:38] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Remote host closed the connection)
[14:23:00] <dave0> probably, sounds technical.. i just know it as "read-only"
[14:23:34] <dave0> cadmio: if you truly want a constant, you can use enum    enum { a = 5 };
[14:23:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:27:49] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[14:28:04] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[14:28:05] <cadmio> The const qualifier really means "read-only"; an object so qualified is a run-time object which cannot (normally) be assigned to.
[14:28:20] <cadmio> maybe that was case it can be assigned
[14:28:22] *** Joins: frost (~frost@user/frost)
[14:28:41] <dave0> you can force it through pointers or even casting
[14:28:59] <dave0> oh not casting directly
[14:29:08] <cadmio> b = a; is an assignment (not forced)
[14:29:40] <dave0> ,cc const int a = 5; printf("%d ", a); int *b = &a; *b = 69; printf("%d ", a);
[14:29:42] <candide> dave0: [warning: initialization discards 'const' qualifier from pointer target type [-Wdiscarded-qualifiers]] 5 69
[14:29:57] <dave0> terrible terrible code. never do it
[14:30:19] <cadmio> my code was const int a = 5; int b = a;
[14:30:51] <greeter> i've seen many warnings before, but not that one till now
[14:31:18] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 272 seconds)
[14:31:31] <dave0> cadmio: that's not assigning to `a` it's perfectly fine to use a in an expression
[14:32:23] <cadmio> ah ok you can assign 'a' to another object but not assign something to 'a'
[14:32:39] <dave0> yep
[14:33:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:34:20] <cadmio> but const int a; and int arr[a]; is not correct even if I'm not assigning to a
[14:35:08] <dave0> it's correct in c99 but not c89 and prior
[14:35:49] <dave0> but it is special and i personally don't like them
[14:36:27] <dave0> however an actual constant works in all versions of c    int arr[5];    enum { a=5 }; int arr[a];    #define a 5  int arr[a];
[14:37:09] <dave0> i dont know what the technical word for that is
[14:37:49] <cadmio> if you do int arr[a] ={0,0,0,0,0}; it isn't correct anymore
[14:37:56] *** Joins: apple75 (~apple75@180.190.170.176)
[14:38:13] <dave0> that's right, you are not allowed to initialize a VLA like that
[14:38:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:38:48] <apple75> I'm new to C, whats the point of malloc? Should I malloc an int array?
[14:38:51] <cadmio> but I'm not assigning anything to the const 'a'
[14:38:57] <dave0> VLA's contradict a basic rule that the compiler knows the size of every object
[14:39:45] <dave0> apple75: you use malloc to allocate memory, usually because you don't know it's size in advance... if you know the size of something in advance, it is still valid to malloc, but it's easier to declare an array
[14:40:08] <apple75> Fair, thanks!
[14:40:10] *** Quits: jusski (~user@88.118.27.206) (Ping timeout: 272 seconds)
[14:40:19] <sham1> And by "knowing in advance" basically means known at compile time
[14:40:33] <sham1> That it's a compile time constant or reducible to a compile time constant
[14:40:58] <dave0> cadmio: i don't know the technical term, but when you declare an array in c89 it must be an actual constant ... `a` is still a variable and in c89 it's not allowed
[14:41:21] <fizzie> ("Integer constant expression.")
[14:41:28] <dave0> thanks fizzie !
[14:41:58] <dave0> naturally the "constant" in that sentence is confusing when you see the "const" keyword
[14:42:16] <fizzie> ,c11 6.6p6
[14:42:16] <cadmio> dave0: ok so that explains that const is not really a constant!
[14:42:18] <candide> http://www.iso-9899.info/n1570.html#6.6p6 [Constant expressions] An integer constant expression117) shall have integer type and shall only have operands that are integer constants, enumeration constants, character constants, sizeof expressions whose results are integer constants, _Alignof expressions, and floating constants that are the immediate operands of casts. Cast operators in an integer constant ex... <truncated; https://0x0.st/oZ2e.txt>
[14:42:45] <cadmio> I guess it's the same in C99
[14:42:49] <fizzie> Notably missing from that list are any kinds of variables, even const-qualified ones.
[14:42:55] <fizzie> Yep.
[14:43:38] <NRK> cadmio: i think i showed you why some days ago
[14:43:42] <NRK> ,cc const int r = rand();
[14:43:44] <candide> NRK: no output: r = 1804289383
[14:44:09] <NRK> r is `const` but not an "integer constant"
[14:44:32] <dave0> cadmio: c99 relaxed that rule when you declare an array... it is not that c99 said `a` is an `integer constant expression`... rather that you were allowed to declare an array with an integer that /wasnt/ an integer constant expression
[14:45:12] <dave0> cadmio: c99 lets you do this:    int arr[foo()];
[14:45:50] <dave0> ,cc int foo(void) { return 69; } int main(void) { int a[foo()]; }
[14:45:52] <candide> dave0: no output: a = <error reading variable a (value requires 562949379969648 bytes, which is more than max-value-size)>
[14:46:19] <fizzie> (`constexpr` in a future C standard? Honestly a little surprised haven't noticed that proposed yet.)
[14:46:22] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:46:46] <pragma-> lol
[14:46:54] <pragma-> value requires 562949379969648 bytes
[14:47:02] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[14:47:31] <NRK> nice
[14:48:02] <NRK> fizzie: it is?
[14:49:00] <fizzie> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2917.pdf -- oh, of course.
[14:49:00] *** Joins: unknow (~i.am@user/marlboro)
[14:49:06] <fizzie> Just hadn't noticed.
[14:54:39] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[14:56:11] <cadmio> const int a; int arr[a]; arr[0]=1;arr[1]=2 is perfectly fine
[14:56:56] <NRK> a is uninitialized
[14:57:14] <NRK> and you're most likely gonna stack overflow if u use unchecked VLAs like that
[14:57:15] <cadmio> my bad const int a = 2;
[14:57:41] <NRK> why not just use `enum { a = 2 };` ?
[14:57:47] <NRK> this will work on compilers that don't implement VLAs
[14:57:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[14:58:04] <cadmio> because I want to understand the implication of const qualifier (it's just for study)
[14:58:09] <kurahaupo> mumble #define a 2
[14:58:29] <NRK> i prefer enums
[14:58:38] <NRK> ¯\_(ツ)_/¯
[14:58:45] <cadmio> from what I've understood const is not at all a constant like #define a 2
[14:58:54] <NRK> correct.
[14:59:25] <NRK> `#define a` isn't a constant either it's `2` that's an integer constant.
[14:59:26] <kurahaupo> cadmio: This seems to be recycling a conversation from yesterday. const just means "can't be modified via that symbol"; it doesn't mean the value of the object is necessarily known at compile time
[14:59:38] <cadmio> so text say it's an erro to assign array's size like that but gcc doesn't complain on my system
[14:59:50] <dave0> cadmio: it's a qualifier that constrains your use of the variable
[14:59:55] <NRK> because gcc implements VLAs...
[15:00:11] <NRK> ,cc -Wvla const int a = 5; arr[a];
[15:00:12] <candide> NRK: error: 'arr' undeclared
[15:00:12] <dave0> cadmio: maybe try it with    -std=c89
[15:00:25] <kurahaupo> const int a = my_random(2); // a is definitely unknown at compile time
[15:00:27] <NRK> ,cc -Wvla const int a = 5; int arr[a];
[15:00:28] <candide> NRK: [warning: ISO C90 forbids variable length array 'arr' [-Wvla]] no output: a = 5; arr = {0, 0, 0, 0, 0}
[15:00:31] <cadmio> kurahaupo: yeah, but it seems to work fine with gcc so it must know its value
[15:01:03] *** Quits: yggdrasil (~yggdrasil@67-0-79-69.albq.qwest.net) (Read error: Connection reset by peer)
[15:01:09] <kurahaupo> cadmio: An auto array can have a variable size, since C99
[15:01:23] <cadmio> even with -std=c89 it's fine
[15:01:25] <dave0> cadmio: prior to c99, when you declare an array, it's size must be a `integer constant expression`
[15:01:28] <kurahaupo> cadmio: try gcc --std=c89
[15:02:09] <cadmio> I tried it
[15:02:19] <dave0> cadmio: `const` does not make your identifier an `integer constant expression` therefore, prior to c99, you may not use it to declare the size of an array
[15:02:20] <kurahaupo> err, -std=c89 (gcc doesn't use -- for long options)
[15:02:47] <NRK> kurahaupo: u'll need to enable -Wpedantic too i think
[15:02:51] <cadmio> yes, I don't get any error and you?
[15:03:04] <NRK> ,cc -std=c89 const int a = 5; int arr[a];
[15:03:05] <candide> NRK: no output: a = 5; arr = {0, 0, 0, 0, 0}
[15:03:07] <dave0> cadmio: c99 did not redefine the meaning of `const` ... c99 modified the rules for declaring an array
[15:03:15] <NRK> ,cc -std=c89 -Wpedantic const int a = 5; int arr[a];
[15:03:16] <cadmio> ok: ISO C90 forbids variable length array ‘arr’ [-Wvla]
[15:03:17] <candide> NRK: [warning: ISO C90 forbids variable length array 'arr' [-Wvla]] no output: a = 5; arr = {0, 0, 0, 0, 0}
[15:03:24] <dave0> where's somewhere else you need an `integer constant expression` ?
[15:03:26] <NRK> ^^
[15:03:41] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[15:03:45] <kurahaupo> dave0: A case in a switch
[15:03:53] <dave0> kurahaupo: nice!
[15:04:03] <fizzie> A width of a bit-field.
[15:04:19] <fizzie> The value of an enumeration constant.
[15:04:20] <dave0> ,cc const int a = 5; switch(rand()) { case a: printf("it was five!"); }
[15:04:22] <candide> dave0: error: case label does not reduce to an integer constant
[15:04:31] *** Joins: zer0python (jk@user/zer0python)
[15:04:42] <dave0> ,cc enum { a = 5 }; switch(rand()) { case a: printf("it was five!"); }
[15:04:44] <candide> dave0: no output: a = a
[15:05:44] <dave0> ,cc const int a = 5; enum { b = a }; printf("%d ", b);
[15:05:45] <candide> dave0: error: enumerator value for 'b' is not an integer constant
[15:05:48] *** Joins: yggdrasil (~yggdrasil@67-0-50-195.albq.qwest.net)
[15:06:00] <dave0> cadmio: make sense now?
[15:06:10] <kurahaupo> ,cc switch(1) case 4/3.0: printf("Yep!\n");
[15:06:11] <candide> kurahaupo: error: case label does not reduce to an integer constant
[15:06:35] <kurahaupo> ,cc switch(1) case (int)( 4/3.0 ): printf("Yep!\n");
[15:06:37] <candide> kurahaupo: [warning: case label is not an integer constant expression [-Wpedantic]] Yep!
[15:06:55] <cadmio> dave0: yes, but that seems a different issue from const int a = 2; int arr[a] = {0,0}; isn't it?
[15:07:02] <cadmio> it's illegal even in C99
[15:07:33] <fizzie> It's not a *different* issue, the illegality of `const int a = 2; int arr[a] = {0,0};` is just a combination of two things.
[15:07:55] <fizzie> The fact that `a` is not an integer constant expression makes the array a variable-length array; and there's a second rule that says you're not allowed to initialize a VLA.
[15:08:23] <kurahaupo> ,cc const int a = 5; int *b=&a; *b=-1; int x[a]; printf("%p", x);
[15:08:25] <candide> kurahaupo: [warning: initialization discards 'const' qualifier from pointer target type [-Wdiscarded-qualifiers]  warning: format '%p' expects argument of type 'void *', but argument 2 has type 'int *' [-Wformat=]]  runtime error: variable length array bound evaluates to non-positive value -1  0x7fffffffe2a0
[15:09:10] <kurahaupo> ,cc const int a = 5; int *b=&a; *b=1; int x[a]; printf("%zu", sizeof x);
[15:09:12] <candide> kurahaupo: [warning: initialization discards 'const' qualifier from pointer target type [-Wdiscarded-qualifiers]] 4
[15:09:15] <dave0> cadmio: you stumbled on a special case where c99 changed the rules specifically for arrays ... in my other examples of things that require an `integer constant expression`, const int a = 5; was an error
[15:10:17] <kurahaupo> C11 partially removed VLAs; a compiler can still be compliant without implementing them
[15:11:08] <cadmio> fizzie: but also in const int a =2; int arr[a]; we're dealing with a varible lenght array and C99 does not comply
[15:11:21] <fizzie> Because you're not initializing it.
[15:11:47] <fizzie> VLAs were added as a feature in C99, and made optional in C11, as's been mentioned.
[15:12:06] <dave0> the context is cadmio is trying to understand the `const` qualifier
[15:12:06] <fizzie> They just aren't allowed initializers.
[15:13:10] *** Quits: pucara (~i@host112.190-139-217.telecom.net.ar) (Quit: Lost terminal)
[15:13:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:13:44] <cadmio> whether you initialize or not you're defining a VLA
[15:14:06] <cadmio> I'd expect to produce an error in both cases
[15:14:44] <fizzie> The part that has to do with initializing a VLA has nothing to do with the `const` qualifier, though. The effect of `const` is just to make the declaration a VLA instead of a "plain" array type. The fact that `int arr[/* not an integer constant expression */];` is allowed but `int arr[/* not an integer constant expression */] = {1, 2, 3};` is orthogonal.
[15:15:56] <fizzie> But *why* would you expect an error in both cases (in C99 or later)? The whole reason we have a word for them, VLA, is because they were added as a supported feature in the standard.
[15:16:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[15:16:19] <dave0> ,cc const int five = 5; switch(5) { case five: printf("it's five "); }
[15:16:20] <candide> dave0: error: case label does not reduce to an integer constant
[15:16:22] <cadmio> I'd prefer gcc complaining even with declaration of that VLA and not only in case of initialization
[15:16:27] <dave0> cadmio: why doesn't that work ^
[15:16:50] <fizzie> Well, compile with -Wvla=error or whatever the relevant flag is, then it will.
[15:16:58] <dave0> ,cc switch(5) { case 5: printf("it's five "); }
[15:17:00] <candide> dave0: it's five
[15:17:02] <dave0> cadmio: but that does ?
[15:17:18] <fizzie> ,cc -Werror=vla const int a = 2; int arr[a]; // look, it complains
[15:17:19] <candide> fizzie: error: ISO C90 forbids variable length array 'arr' [-Werror=vla] cc1: some warnings being treated as errors
[15:17:33] <fizzie> (I always forget which way around that warning flag goes.)
[15:18:13] <fizzie> The reason why it (by default) complains for initialization but not for the declaration is because one is not allowed by the standard while the other is.
[15:18:50] <NRK> that warning msg is abit retarded. in this case, it's not that C90 forbids VLAs, but rather that we explictly enabled `-Werror=vla`
[15:19:10] <NRK> that warning msg only makes sense if `-std=c89/90`
[15:19:15] <dave0> test  ,{cc puts(" ok "); }
[15:19:17] <candide> dave0:  ok
[15:19:26] <fizzie> Yeah, that's just the fixed -Wvla message. I guess it's still the best kind of correct, though? (That is, technically correct.)
[15:20:40] <dave0> cadmio: why does this work?   ,{cc switch(5) { case 5: printf(" five "); }}    but this doesnt?    ,{cc const int xxx = 5; switch(5) { case xxx: printf(" five "); }}
[15:20:42] <candide> cadmio:  five
[15:20:43] <candide> cadmio: error: case label does not reduce to an integer constant
[15:21:26] <pragma-> dave0: it allows a word before commands as a nick-prefix to address the resulting output to that nick. but if the nick isn't actually present in the channel, it'll omit the prefix.
[15:22:12] <dave0> pragma-: ah okay thanks
[15:24:08] <cadmio> it's the definition that defines an object not the initialization so in both cases it's a VLA and it's bad it complains only in the latter
[15:24:19] <dave0> i wanted to mingle my words with the sourcecode, so the output lines wasn't mixed with other convos
[15:24:22] <fizzie> cadmio: The C standard allows thing A, and doesn't allow thing B. You're asking why GCC complains only about thing B. You'd want for it to complain about both thing A and thing B. Why is that?
[15:25:02] <cadmio> I want to understand well the difference between A and B
[15:25:35] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:26:28] <fizzie> I guess the part I'm missing is what understanding the difference between them has to do with it being "bad" that GCC doesn't complain about thing A.
[15:28:03] <cadmio>  ISO C99 forbids only variable length inizialization, but declarion of a VLA is perflectly fine
[15:28:17] <cadmio> and I find it odd
[15:28:35] *** Quits: meator (~meator@user/meator) (Ping timeout: 252 seconds)
[15:28:58] <fizzie> To add to that earlier fork in the conversation, alignment specifiers (`_Alignas (16)`), designators in an initializer list for an array object `... = { [10] = 123 }`) and the controlling expression of a `_Static_assert` declaration are three more things that require an integer constant expression.
[15:29:50] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[15:29:52] <dave0> cadmio: that's ^ other places a `const` wont work
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:58] *** Joins: csrf (~csrf@user/csrf)
[15:31:45] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[15:31:54] <kurahaupo> cadmio: C99 added VLAs as a new feature. If it seems strange that initialisers are forbidden, consider for a moment: how many initialiser values in the {…} would be valid?
[15:32:14] <kurahaupo> The initialiser list is fixed at compile time.
[15:32:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:35:25] <cadmio> with just the declaration arr[a] you're reserving the mememory for 'a' integers. Why is that known at compile time?
[15:36:07] *** candide sets mode: -o candide
[15:36:43] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 268 seconds)
[15:37:51] *** Joins: VoidSync (~sync@user/voidsync)
[15:38:12] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[15:38:19] *** Joins: utis (~utis@vpn-client283.uio.no)
[15:38:41] *** Joins: AmR (~AmREiSa@156.199.236.198)
[15:39:16] <fizzie> It's not known at compile time either.
[15:39:50] <cadmio> so how is that it works?
[15:40:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[15:40:33] <fizzie> Reserving the memory for an object of automatic storage duration doesn't happen at compile time in general either.
[15:40:44] <fizzie> The details of *how* it happens are up to the implementation.
[15:41:14] <dave0> cadmio: you say that like you can't allocate memory at runtime
[15:42:01] <fizzie> A typical implementation strategy is to have a stack, and a stack pointer, and the difference between `int arr[10];` and `int arr[1 + rand() % 10];` is mostly just that in one case, the address the stack pointer is changed by is constant, and in the other it's not. But that part's not specified by the standard: it can be implemented any other way that respects the semantics.
[15:42:15] <fizzie> s/address/amount/
[15:43:21] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[15:44:49] *** Joins: plastico (~plastico@neomutt/plastico)
[15:45:49] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[15:47:40] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[15:54:17] <cadmio> compiling with gcc test.c -Wvla -o test you're warned correctly
[15:54:48] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[15:54:57] <cadmio> in both cases
[15:55:00] <kurahaupo> cadmio: The size of an initialiser list is inherently fixed at compile time, whereas the size of a VLA is not; that's what makes them incompatible.
[15:55:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[15:56:04] <pragma-> C could have simply filled uninitialized members as static and ignored excess initializers, if any. As it already does with normal array initializers.
[15:56:15] <pragma-> members/elements
[15:56:21] *** Joins: constxd (~brad@142.134.78.128)
[15:56:29] <cadmio> with that option you get "ISO C90 forbids variable length array ‘arr’"
[15:56:41] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[15:56:42] <cadmio> and I assume both declaration and initialization
[15:56:59] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:57:04] *** Joins: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:58:03] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:03] *** Quits: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:18] <fizzie> It doesn't ignore excess initializers, those are just a constraint violation.
[16:00:01] <fizzie> But sure, it *could* have been done. The rationale is silent on why it wasn't. Though I don't think it's _that_ odd. Still, allowing at least the zero initialization might've been nice.
[16:00:36] <cadmio> without -Wvla the program workds btw
[16:00:46] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:01:22] <cadmio> well that's just a warning so the program works in any case
[16:02:05] *** Joins: Klinda (~superleag@user/klinda)
[16:03:46] <pragma-> C compilers tend to be extremely lax about constraint violations. They didn't even warn about the majority of violations until very recently!
[16:04:00] <pragma-> ,cc int a[2] = { 1, 2, 3 };
[16:04:01] <candide> pragma-: [warning: excess elements in array initializer  note: (near initialization for 'a')] no output: a = {1, 2}
[16:04:41] *** Joins: kts (~kts@103.73.237.109)
[16:05:28] * pragma- stares at "near initialization for a"
[16:05:39] <pragma-> why not just say "excess elements in array initializer for `a`"
[16:05:44] * pragma- gestures at gcc.
[16:05:51] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[16:05:55] <pragma-> ,clang int a[2] = { 1, 2, 3 }; // just curious
[16:06:00] <candide> pragma-: [warning: excess elements in array initializer [-Wexcess-initializers]] no output: a = {1, 2}
[16:06:10] * pragma- shakes his head.
[16:06:36] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 240 seconds)
[16:06:57] <dave0> ,cc int a[2] = { [0]=1, [0]=2, [0]=3 };
[16:06:59] <candide> dave0: [warning: initialized field overwritten [-Woverride-init]  note: (near initialization for 'a[0]')  warning: initialized field overwritten [-Woverride-init]  note: (near initialization for 'a[0]')] no output: a = {3, 0}
[16:07:08] <fizzie> ,cc struct { int x, a[2]; } s = { .x = 1, .a = {1, 2, 3} }; // just curious
[16:07:09] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[16:07:10] <candide> fizzie: [warning: excess elements in array initializer  note: (near initialization for 's.a')] no output: s = {x = 1, a = {1, 2}}
[16:07:14] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[16:07:17] <pragma-> hmm
[16:07:20] <fizzie> Well, 's.a' is a nice touch.
[16:08:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:08:12] <clarity> meow.
[16:08:24] <fizzie> I guess if you weren't putting in all the braces, it might not be entirely clear which subobject the excess elements are for.
[16:08:48] <fizzie> ,cc struct { int a, b[2], c; } s = { 1, 2, 3, 4, 5 };
[16:08:50] <candide> fizzie: [warning: excess elements in struct initializer  note: (near initialization for 's')  warning: missing braces around initializer [-Wmissing-braces]] no output: s = {a = 1, b = {2, 3}, c = 4}
[16:09:13] <pragma-> hmm
[16:09:22] <fizzie> Oh well. Can't argue it's not "near".
[16:11:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:13:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:13:34] <constxd> ,sh gcc --version
[16:13:35] <candide> constxd: gcc (GCC) 12.0.1 20220129 (R﻿ed Hat 12.0.1-0) Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[16:13:50] <constxd> W
[16:14:32] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 272 seconds)
[16:14:33] *** Joins: Rounin (~david@84.212.130.215)
[16:19:22] *** Quits: cadmio (~cadmio@151.47.50.184) (Quit: WeeChat 3.0)
[16:19:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:21:09] *** Joins: shivesh (~shivesh@user/shivesh)
[16:23:32] *** Quits: freakazoid333 (~matt@2603-9000-cf03-86c3-dcba-088f-f497-9b47.inf6.spectrum.com) (Ping timeout: 240 seconds)
[16:25:06] <kurahaupo> pragma-: I agree, it could, but then (a) there would have to bea bunch more language specifying that the expression must have a value not less than the number of initialisers, and (b) the compiler would have to generate code to 0-initialise all the fields regardless of their type, keeping in mind at for C99 both 0.0 and NULL could have representations other than all-bits-0
[16:26:56] *** Quits: utis (~utis@vpn-client283.uio.no) (Ping timeout: 250 seconds)
[16:27:46] *** Joins: not_not_not (~not_not_n@5.2.74.230)
[16:27:46] <not_not_not> is
[16:28:43] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[16:28:46] <Dean> hello
[16:28:56] *** Joins: utis (~utis@84.208.160.26)
[16:29:09] <fizzie> It has to do that for `struct { int i; double d; void *p; } big[1024];` already.
[16:29:47] *** Quits: alch (~alch@151.46.47.14) (Read error: Connection reset by peer)
[16:29:51] <fizzie> Well, add ={0} but anyway.
[16:30:31] <fizzie> Not much difference in generating the code to zero-initialize a VLA.
[16:30:54] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com)
[16:30:56] *** Joins: ascetics (~mingk@2408:8207:c84:96f0:69e2:2b68:460f:aed5)
[16:31:08] *** Quits: not_not_not (~not_not_n@5.2.74.230) (Remote host closed the connection)
[16:31:53] <fizzie> I don't think it would even require any new language, because the existing constraint (6.7.9p2: "No initializer shall attempt to provide a value for an object not contained within the entity being initialized.") would cover that case as well.
[16:32:09] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[16:34:29] *** Joins: alch (~alch@151.44.68.134)
[16:35:21] *** Joins: ymwm_ (~yingmanwu@27.153.166.227)
[16:37:32] *** Quits: ymwm (~yingmanwu@110.85.121.119) (Ping timeout: 240 seconds)
[16:37:34] *** Parts: apple75 (~apple75@180.190.170.176) (Leaving)
[16:37:55] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[16:40:46] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:41:35] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[16:41:44] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[16:41:46] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[16:42:07] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[16:42:49] *** Joins: zer0x (~zer0x@1.55.210.143)
[16:43:30] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[16:43:48] *** Joins: cation (cation@user/cation)
[16:43:55] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:51:42] <sham1> Looking at the discussion, I'm not surprised that gcc has a worse diagnostic than clang, saying near the initialization instead of in the initialization
[16:52:40] <fizzie> That's not what happened in there.
[16:53:08] <fizzie> The GCC diagnostic was "warning: excess elements in array initializer  note: (near initialization for 'a')", the Clang diagnostic was "warning: excess elements in array initializer" with no note.
[16:53:34] <fizzie> Exactly the same, except GCC *added* one of those "note: ..." extra bits.
[16:55:33] *** Quits: kts (~kts@103.73.237.109) (Ping timeout: 256 seconds)
[16:55:46] <fizzie> It wasn't a _great_ addition, but Clang didn't really say "in the initialization of a" either. Sure, it would have indicated the location in the source code, which is quite sufficient, but that's what GCC did as well.
[16:56:49] <fizzie> Here's a fuller version: https://0x0.st/oZ_q.txt -- "that note is useless" is a valid criticism, but "Clang is more precise" isn't.
[16:57:30] *** Joins: pulse (~pulse@user/pulse)
[16:57:34] *** Parts: v4mp (~v4mp@user/v4mp) ()
[16:57:37] <sham1> Hmm
[16:57:44] <NRK> that note is useless
[16:58:52] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Ping timeout: 272 seconds)
[16:59:17] <fizzie> And the note is (arguably) less useless in this more complicated case: https://0x0.st/oZ_T.txt
[16:59:26] *** Quits: ascetics (~mingk@2408:8207:c84:96f0:69e2:2b68:460f:aed5) (Quit: Leaving.)
[16:59:30] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 272 seconds)
[17:00:27] <NRK> it prints the line number already
[17:00:31] <NRK> still useless in my books
[17:00:50] <fizzie> The line number doesn't tell you which member of the struct the initializer corresponds to, without manually counting them.
[17:00:55] <fizzie> And don't say "designators".
[17:00:55] <sham1> Well, it truly seems that GCC is the clearer one. Usually it's the other way around
[17:01:12] *** Joins: kts (~kts@103.73.237.76)
[17:01:44] <NRK> designators
[17:01:48] <NRK> *leaves*
[17:02:07] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[17:03:17] <sham1> Yeah
[17:03:35] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com) (Read error: Connection reset by peer)
[17:04:38] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[17:05:20] *** Joins: jusski (~user@88.118.27.206)
[17:08:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:09:10] *** Joins: frostygoth (~frostygot@li1566-163.members.linode.com)
[17:10:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:12:48] *** Quits: kts (~kts@103.73.237.76) (Ping timeout: 272 seconds)
[17:17:26] <dave0> i like the warning about misleading whitespace.. that's when i reach for -w
[17:20:40] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 250 seconds)
[17:21:32] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com)
[17:21:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:25:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:26:22] *** Joins: inlight (~n0ise@user/inlight)
[17:29:40] *** Joins: kts (~kts@103.73.237.76)
[17:30:33] *** Joins: seninha (~chatzilla@user/seninha)
[17:34:06] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[17:34:33] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[17:34:43] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:38:41] *** Quits: dld (~davidlowr@2601:197:600:1210:4c4:32b6:46a8:f2ee) (Ping timeout: 245 seconds)
[17:39:24] *** Joins: Rynn (~rynn@216.30.158.198)
[17:40:36] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[17:40:43] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Read error: Connection reset by peer)
[17:40:58] *** Joins: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da)
[17:41:35] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[17:44:03] *** Quits: Rynn (~rynn@216.30.158.198) (Ping timeout: 256 seconds)
[17:44:15] *** Joins: bnchs__ (~bnchs@160.177.31.32)
[17:45:13] *** Joins: saohh (~saohh@ip-78-45-142-108.net.upcbroadband.cz)
[17:46:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:46:43] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[17:47:14] *** Quits: saohh (~saohh@ip-78-45-142-108.net.upcbroadband.cz) (Client Quit)
[17:48:25] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4deb:db1a:1e48:ef58)
[17:48:25] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4deb:db1a:1e48:ef58) (Changing host)
[17:48:25] *** Joins: skapata (~Skapata@user/skapata)
[17:49:32] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 272 seconds)
[17:49:39] *** Joins: gog (~ada@user/gog)
[17:49:44] *** Joins: Rynn (~rynn@216.30.158.198)
[17:51:30] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7)
[17:54:24] *** Joins: meator (~meator@user/meator)
[17:54:58] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:55:21] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[17:58:23] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[17:58:58] <frostygoth> New to c, so hopefully this isn't a dumb question. I'm trying to write a simple terminal chat program. I'd like the program to update the terminal with newly received messages without clearing a message they may be in the middle of typing.
[17:59:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[17:59:38] <frostygoth> My question is, what should I be googling to figure out how to deliver asynchronous messages to the terminal without blocking on the read to stdio?
[18:00:17] <frostygoth> I can figure out the details on my own, I'm just lacking the knowledge of terminology to find what I'm looking for at present.
[18:00:31] <NRK> most likely, you want (n)curses library
[18:01:09] <frostygoth> Thanks. I'll start from there!
[18:01:18] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:01:30] <NRK> and if you want to do non-blocking reads, i think you can set the O_NONBLOCK flag via fcntl.
[18:02:31] <NRK> but setting up a "raw terminal" is a bit more complicated than that
[18:03:23] <NRK> look into tc{set,get}attr() functions.
[18:05:20] *** Joins: Satin (uid193953@user/Seten)
[18:05:31] <frostygoth> Awesome, will do! I've read through the advanced programming in unix book, and I know some of the terminal manipulation stuff is in there. Should be a fun spring project!
[18:05:53] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:06:24] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[18:07:20] <pony> I think you ask curses for nonblocking reads via curses IIRC
[18:07:38] <pony> been a while since I've used it
[18:07:44] *** Joins: jkotra (~jkotra@122.169.141.242)
[18:08:38] <pony> The getch, wgetch, mvgetch and mvwgetch, routines read a character from the window. In no-delay mode, if no input is waiting, the value ERR is returned.
[18:08:39] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:09:29] *** Joins: Rynn (~rynn@216.30.158.198)
[18:09:40] <pony> The nodelay option causes getch to be a non-blocking call. If no input is ready, getch returns ERR. If disabled (bf is FALSE), getch waits until a key is pressed.
[18:10:17] *** Joins: neo1 (~neo@103.144.161.8)
[18:12:30] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 252 seconds)
[18:13:00] <frostygoth> oh, so I could listen with pselect on stdin and use getch to save the characters to a buffer until I get \n right? Then i'd have my message ready to send over the network and wouldn't be blocking on read?
[18:13:13] <frostygoth> Seems reasonable, if I'm not totally mistaken.
[18:13:54] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[18:14:22] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[18:14:53] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:15:12] <pony> no, you just have to call nodelay() once and then grab characters with getch(), checking for ERR
[18:15:31] *** Joins: bruce633 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com)
[18:15:39] <bruce633> hhhh
[18:15:57] <bruce633> c programmers ?
[18:16:15] <pony> no, we're cookie monsters
[18:16:59] <bruce633> ^_^
[18:17:41] <pony> frostygoth: something like this may be helpful https://invisible-island.net/ncurses/ncurses-intro.html
[18:17:43] <candide> Title of pony's link: Writing Programs with NCURSES
[18:18:01] <NRK> frostygoth: don't u want to show what's being typed as well?
[18:18:10] <NRK> is your program a TUI or CLI?
[18:18:30] <frostygoth> CLI for now. and yeah, I'll want them to see what they're typing.
[18:18:42] <frostygoth> Man, I've clearly got a ways to go. lol
[18:18:44] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 250 seconds)
[18:19:08] *** Joins: zer0x (~zer0x@1.55.210.143)
[18:19:10] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[18:19:17] <NRK> honestly, i wouldn't bother doing this manually lol.
[18:19:24] <NRK> terminals are pretty ugly, and often incompatible.
[18:20:39] <bruce633> cli is powerful
[18:20:40] <frostygoth> Yeah, I could tell that from what I've read about them. It looks like a legacy hack that worked so nobody changed it.
[18:20:56] <frostygoth> But, I'm working on a portfolio in preparation for graduate school.
[18:21:13] <bruce633> htop code will be a good example.
[18:21:31] <frostygoth> so being able to work with and utilize these difficult programming systems and designs is something I'm challenging myself to do.
[18:21:32] <bruce633> https://github.com/hishamhm/htop
[18:21:33] <candide> Title of bruce633's link: GitHub - hishamhm/htop: htop is an interactive text-mode process viewer for Unix systems. It aims to be a better 'top'.
[18:21:51] <NRK> for anything interactive, you probably just want to use ncurses
[18:21:53] <frostygoth> +1 to htop code review.
[18:22:08] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:22:19] <NRK> or any of the other curses style libs
[18:23:17] <bruce633> just reading code - -  that will be helpful.all answers on the source.
[18:23:37] <pony> ^^
[18:24:48] *** Quits: raym (~raym@user/raym) (Ping timeout: 250 seconds)
[18:25:02] <frostygoth> thanks all! Gonna be a fun weekend :)
[18:25:05] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[18:25:07] *** Joins: cincoswim (~cincoswim@cm-72-241-174-56.buckeyecom.net)
[18:25:56] <bruce633> welcome
[18:28:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[18:30:30] *** Joins: toulene (~toulene@user/toulene)
[18:31:05] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:31:44] *** Quits: jusski (~user@88.118.27.206) (Ping timeout: 250 seconds)
[18:35:05] *** Quits: inlight (~n0ise@user/inlight) (Quit: WeeChat 3.3)
[18:36:08] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[18:36:59] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[18:37:07] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:37:14] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[18:38:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:38:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:41:16] *** Quits: zer0x (~zer0x@1.55.210.143) (Remote host closed the connection)
[18:42:06] *** Joins: zer0x (~zer0x@1.55.210.143)
[18:42:32] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:43:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[18:44:17] *** Joins: Rynn (~rynn@216.30.158.198)
[18:44:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:50:53] *** Joins: raym (~raym@user/raym)
[18:52:51] *** Joins: frostygoth_ (~frostygot@98.97.80.133)
[18:53:11] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[18:53:44] *** Quits: cincoswim (~cincoswim@cm-72-241-174-56.buckeyecom.net) (Quit: WeeChat 3.4)
[18:53:50] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[18:54:02] *** Joins: cincoswim (~cincoswim@cm-72-241-174-56.buckeyecom.net)
[18:56:02] *** Quits: frostygoth (~frostygot@li1566-163.members.linode.com) (Ping timeout: 272 seconds)
[18:58:35] *** Joins: mahmutov (~mahmutov@5.176.1.238)
[18:59:01] *** Quits: bruce633 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com) (Quit: Client closed)
[18:59:21] *** Joins: Guest25 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com)
[18:59:22] *** Joins: cadmio (~cadmio@151.47.29.97)
[19:01:33] <cadmio> I don't understand well why when doing const int a=2; int arr[a] = {0,1}; 'a' is not known at compilation time
[19:01:50] <pragma-> because C is retarded
[19:02:11] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:03:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:05:33] <cadmio> so it's not aware of 'a' size at compilation time
[19:05:41] <markand> cadmio, understand const more as readonly rather than compile time constant
[19:05:52] *** Joins: Guest2547 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com)
[19:05:54] <markand> that why c++ has constexpr (along with ten thousands const keywords)
[19:05:55] *** Quits: frostygoth_ (~frostygot@98.97.80.133) (Quit: Leaving)
[19:06:04] <pragma-> it still should be aware that a is 2 at that point.
[19:06:13] *** Quits: Guest2547 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com) (Write error: Broken pipe)
[19:06:33] *** Quits: Guest25 (~Guest25@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com) (Quit: Client closed)
[19:06:44] <pragma-> I cannot imagine a reason otherwise.
[19:07:15] <markand> when it's a literal yes, but that would not work in something like void f(int x) { const int size = x * 2; int tab[x]; } where in that place "readonly" has much better meaning
[19:07:59] <pragma-> Sure, but he has `const int a = 2;`.  no `x`.
[19:07:59] <cadmio> The array size is locked into the program at compile time, since int arr[a] = {0,1}; comes after int a =2 I thought it'd be aware of it at that point
[19:08:10] <pragma-> the 2 isn't ever going to change
[19:08:24] <markand> cadmio, for that kind of purposes #define stay unfortunately the best
[19:09:38] <cadmio> const int a = 2; int arr[a] = {0,1}; and the compiler is not aware of 'a' at this point?
[19:09:50] <cadmio> C99 allows vla
[19:11:00] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[19:11:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:12:07] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[19:12:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:13:55] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:14:25] <dave0> cadmio: are you asking about `const` or about arrays?
[19:14:52] <cadmio> the issue could be interelated
[19:14:59] *** Joins: bruce63332 (~bruce633@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com)
[19:15:24] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 240 seconds)
[19:15:51] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Ping timeout: 256 seconds)
[19:16:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com)
[19:16:15] <cadmio> in C99 you're allowed to handle arrays whose size is defined at execution tme
[19:16:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[19:16:49] <bruce63332> right
[19:17:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:17:32] <cadmio> so what's the matter there? why the init is an error?
[19:17:49] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:18:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:18:24] *** Joins: bruce633 (~sdsdsd@101.228.203.32)
[19:18:35] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[19:18:50] <bruce633> Hello
[19:20:40] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:20:42] *** Quits: bruce63332 (~bruce633@ec2-54-179-237-162.ap-southeast-1.compute.amazonaws.com) (Quit: Client closed)
[19:20:57] *** Joins: meator (~meator@user/meator)
[19:23:17] *** Quits: ymwm_ (~yingmanwu@27.153.166.227) (Ping timeout: 272 seconds)
[19:26:06] <markand> cadmio, there is no error since C99
[19:26:49] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[19:27:45] <cadmio> markand: yes there is  error: variable-sized object may not be initialized
[19:28:14] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-dcba-088f-f497-9b47.inf6.spectrum.com)
[19:28:17] <markand> no error with clang/gcc if using -std=c99, what are you using?
[19:28:44] *** Joins: orthoplex64 (~crm@70.120.0.94)
[19:28:44] <cadmio> I think C99 is the default in gcc
[19:29:10] <pragma-> depends on the gcc version
[19:29:53] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:29:59] <cadmio> gcc version 10.2.1
[19:30:28] <pragma-> in gcc 11, gnu18 is the default -std
[19:30:54] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:31:29] <pragma-> same in 10.3
[19:31:36] *** Joins: ztx (~ztx@user/ztx)
[19:31:57] <cadmio> so you can compile without errors my code?
[19:32:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:32:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:32:40] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[19:32:56] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[19:32:58] *** Joins: ymwm_ (~yingmanwu@27.153.166.227)
[19:33:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:33:50] <pragma-> -std=gnu18 is the default all the way back to gcc 8. in gcc 7 it's gnu11.
[19:34:07] <pragma-> if you're still using anything earlier than gcc 7 i feel bad for you
[19:34:24] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Remote host closed the connection)
[19:34:26] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:34:31] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[19:34:39] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7) (Quit: Quit)
[19:34:45] <bruce633> Clang will be good
[19:36:51] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[19:37:02] *** Joins: damian (~damian@151.34.113.10)
[19:37:10] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:37:10] *** Quits: kts (~kts@103.73.237.76) (Ping timeout: 250 seconds)
[19:37:12] *** Parts: damian (~damian@151.34.113.10) ()
[19:38:30] *** Joins: kts (~kts@103.73.237.76)
[19:39:00] *** Quits: on^ (~on@50.232.121.75) (Remote host closed the connection)
[19:40:30] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:41:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:41:38] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:44:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:45:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[19:46:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:47:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:47:32] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[19:47:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[19:48:02] <meator> Hi. I have seen some code that uses malloc() to allocate a char array of fixed size, uses it as a temporary buffer and frees it. I think this is done to save memory, because it will be used only for short period of time. Is this reasonable? I have thought that dynamic memory allocated with fixed size should be used only when it's going to be realloc()ed (dynamic arrays) or when something expects that the data passed to it is free()able.
[19:48:06] <meator> If I would be in the same situation, I would just use an array and maybe enclose the few lines that use the temporary buffer in a block to communicate to the compiler that the array is temporary and that it won't be needed after it's used.
[19:48:28] *** Parts: cadmio (~cadmio@151.47.29.97) (WeeChat 3.0)
[19:48:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:48:46] <sham1> Is it fixed-size as in known at compile time, or a fixed size that is computed at runtime
[19:49:43] <meator> It's size is a inteager constant (it's malloc(100)).
[19:49:55] <NRK> that seems silly
[19:50:05] <NRK> is it returning that buffer to it's caller?
[19:50:29] <NRK> fun() { char *buf = malloc(); ... return buf; } ?
[19:51:58] *** Joins: Betal (~Betal@user/betal)
[19:53:00] <meator> It's a logging section in a function. It looks roughly like this: https://termbin.com/agms3
[19:53:58] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:54:10] <NRK> not sure if i want my log to contain tranculated path :'D
[19:54:20] <meator> Will the malloc() approach save memory?
[19:55:01] <NRK> but with that aside, the memory saving is questionable.
[19:55:22] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[19:55:26] <ioxzev1z> meator, malloc not needed for that
[19:55:30] <NRK> most OS don't hand out memory in bytes. they hand it out in larger chunks.
[19:55:50] <ioxzev1z> 100 is such a small value, for such a small time in your code
[19:55:50] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:56:04] <ioxzev1z> Just char pwd[100] = { 0 };
[19:56:12] *** Quits: nostart (~nostar@107.175.102.69) (Ping timeout: 240 seconds)
[19:56:28] <NRK> don't think {0} needed either.
[19:56:42] <bruce633> 2^n size
[19:56:44] <ioxzev1z> NRK, sure but why not
[19:56:50] <bruce633> 128 , 256, ..
[19:57:01] <NRK> just waste of cpu cycles
[19:57:21] <ioxzev1z> right
[19:57:26] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[19:57:26] <NRK> getcwd() manpage says it returns null terminated string
[19:57:44] *** Joins: wand (~user@gateway/tor-sasl/wand)
[19:58:02] <NRK> if it didn't null terminate incase of tranculation, then maybe {0} and then calling it with `len-1` would be w/e
[19:59:09] *** Quits: bruce633 (~sdsdsd@101.228.203.32) (Quit: Leaving)
[20:01:31] *** immibis_ is now known as immibis
[20:03:41] *** Joins: ferdna (~ferdna@user/ferdna)
[20:03:41] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[20:03:41] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:07:04] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[20:07:35] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:08:53] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:09:14] *** DarkPlutonium is now known as DarkUranium
[20:09:41] *** Parts: r0057er[m] (~r0057erma@2001:470:69fc:105::1:d7f5) ()
[20:10:12] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 252 seconds)
[20:17:13] *** Joins: danisanti (~daniel@user/danisanti)
[20:17:30] *** Joins: angelacrust (~angelacru@182.64.84.36)
[20:17:53] <angelacrust> Is there something I can improve in this code? https://bpa.st/DVWA
[20:19:25] <danisanti> if I have a while(condition) { if(MACRO) command1 else command2 } does the compiler with -02, if MACRO is false, convert to while(condition) { command2 } ?
[20:20:08] <NRK> https://godbolt.org/ try it out
[20:21:59] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:22:15] <NRK> https://godbolt.org/z/6bfhP9W6n :)
[20:22:32] *** Quits: kts (~kts@103.73.237.76) (Ping timeout: 240 seconds)
[20:22:47] <ioxzev1z> angelacrust, more whitespace
[20:23:19] <ioxzev1z> Maybe ++i on the for loops rather than i++, etc
[20:23:23] <ioxzev1z> But that isn't too importnat
[20:23:34] <angelacrust> okay, where exactly should I insert more whitespaces?
[20:23:44] <angelacrust> and I will use ++i if that's the standard
[20:23:58] <danisanti> NRK: I tried and I cannot understand how to work with that godbolt.org page
[20:24:11] <danisanti> I also don't know assembly
[20:24:15] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[20:24:23] <angelacrust> ioxzev1z oh nvm, I got it
[20:24:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[20:24:38] <ioxzev1z> angelacrust, all your lines are together, where you could split into logical "blocks" of code, you also have if() { } which reads fine as a line but a lot of the time \n on the brackets adds readability
[20:24:45] <danisanti> can someone give me an answer
[20:24:47] <angelacrust> I should insert whitespaces between different blocks
[20:24:50] <angelacrust> Yeah
[20:24:52] *** Joins: neo1 (~neo@103.144.161.13)
[20:25:00] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 240 seconds)
[20:25:08] <NRK> `i < n` i don't see any checks to see if n is bigger the buff size or not.
[20:25:20] <angelacrust> ioxzev1z Understood.
[20:25:23] <NRK> danisanti: yes, it's a pretty easy optimization.
[20:25:36] <danisanti> thank you
[20:25:47] <angelacrust> NRK The input is always going to be less than 50 chars so I needn't worry about extra checks
[20:25:52] <danisanti> so no need to optimize my code, the compiler does it
[20:26:24] <NRK> you're getting your input from stdin
[20:26:45] <angelacrust> yeah
[20:27:30] <angelacrust> `n` is the length of the string actually
[20:27:42] *** Quits: neo1 (~neo@103.144.161.13) (Client Quit)
[20:28:48] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:29:17] <NRK> i'd much rather have an assert in that case instead of getting silent memory corruption.
[20:29:31] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[20:29:40] <angelacrust> hmm
[20:30:10] *** Quits: alch (~alch@151.44.68.134) (Read error: Connection reset by peer)
[20:30:14] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[20:30:28] <meator> Sorry, I had to leave for a moment. The code I posted here is just an example I found. If I would want to print the CWD, I would use get_current_dir_name() (which has a reason to be dynamic, because it doesn't know the length of CWD in advance) or I would use /proc/self/cwd.
[20:30:29] <meator> So where is the limit, when would be malloc()ing acceptable? Is it 1024, or 2048...
[20:30:36] <angelacrust> Got it. thanks
[20:30:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7)
[20:30:44] *** Quits: angelacrust (~angelacru@182.64.84.36) (Quit: Client closed)
[20:31:58] <NRK> meator: depends. assuming the function won't recurse, then anything below 2K i tend to put it on the stack.
[20:32:00] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[20:32:09] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[20:32:18] <ioxzev1z> meator, just char cwd[2048] and let it be, you don't need malloc(); some calls; free()
[20:32:25] <meator> About putting it in a block, can't the compiler somehow optimize this? https://termbin.com/annf
[20:32:27] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:32:28] <NRK> 2K bytes, i should add.
[20:32:57] <ioxzev1z> meator, if you don't need the buffer after the print, keep it in a nameless block
[20:33:48] *** Quits: ymwm_ (~yingmanwu@27.153.166.227) (Ping timeout: 240 seconds)
[20:34:25] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[20:34:51] *** Joins: alch (~alch@151.46.85.228)
[20:36:40] <meator> I think memory doesn't work like that, but can't the compiler "free" pwd after the block ends? It clearly won't be needed after the block ends. I understand that it could be ambiguous it wasn't in the block, but I have the block.
[20:37:24] <ioxzev1z> It only exists for the duration of the block
[20:38:04] <meator> So pwd won't take up system resources after the block ends?
[20:38:07] <ioxzev1z> naw
[20:39:16] *** Joins: Rynn (~rynn@216.30.158.198)
[20:39:23] <ioxzev1z> Same as a for(...) { int x = 0; } block
[20:39:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[20:42:01] <meator> If it really wouldn't take up system resources, then the size of the buffer shouldn't matter at all, so there would be no reason to use malloc() in this case, am I right?
[20:42:13] *** Quits: iomari891 (~iomari891@197.210.76.39) (Ping timeout: 256 seconds)
[20:42:15] <ioxzev1z> I've been telling you to not use malloc since you asked the question
[20:43:58] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[20:44:35] <meator> I have thought that pwd would still be there after the block ends, but it won't be accessible from the program. The fact that it is in a block then changes everything.
[20:45:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:45:29] <ioxzev1z> malloc() is needed mainly when you want data to persist, e.g. char *foo(void) { char p = malloc(10); /* code */; return p; } You really don't need to care about buffer creation on the stack, e.g. char buf[2048]. In fact you could go all the way to 8192 without caring imo
[20:45:48] <ioxzev1z> Uh, char *p ^
[20:46:22] <meator> Or when I don't know the length in advance.
[20:46:26] <ioxzev1z> Right
[20:46:31] <ioxzev1z> But in your case you do know
[20:47:51] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[20:49:15] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[20:49:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:50:05] <meator> I think this answers my question. Thanks!
[20:50:34] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[20:53:33] *** Joins: semeion (~semeion@user/semeion)
[20:54:37] *** Quits: semeion (~semeion@user/semeion) (Client Quit)
[20:54:41] *** Joins: iomari891 (~iomari891@197.210.77.126)
[20:56:54] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 250 seconds)
[20:57:51] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:58:16] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[20:58:48] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[20:59:03] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[21:00:53] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[21:01:44] *** Quits: moog (~moog@98.97.87.156) (Remote host closed the connection)
[21:02:56] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:03:48] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:04:05] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[21:04:55] *** Quits: fe23 (~fe23@2409:8a34:466:6010:ccc9:1297:bd1a:aa23) (Quit: fe23)
[21:06:32] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Remote host closed the connection)
[21:07:15] *** Joins: R2robot (~R2robot@user/r2robot)
[21:07:28] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[21:07:28] *** Quits: Viewday115 (~Viewday@user/viewday) (*.net *.split)
[21:07:28] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (*.net *.split)
[21:07:28] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (*.net *.split)
[21:07:28] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[21:07:28] *** Quits: rcf (~rcf@sdf.org) (*.net *.split)
[21:07:28] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[21:07:28] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[21:07:28] *** Quits: pranshukhandal (~ghost@envs.net) (*.net *.split)
[21:07:28] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[21:07:28] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[21:07:28] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (*.net *.split)
[21:07:28] *** Quits: xa0s (~xa0s@mab.sdf.org) (*.net *.split)
[21:07:28] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[21:07:28] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[21:07:28] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[21:07:28] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[21:07:28] *** Quits: n1000_ (~n1000@user/n1000) (*.net *.split)
[21:07:28] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[21:07:28] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[21:07:28] *** Quits: Luke- (~ldm@hacksoc/alumni/ldm) (*.net *.split)
[21:07:28] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[21:07:28] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[21:07:28] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[21:07:28] *** Quits: aesin (~aesin@81.211.127.107) (*.net *.split)
[21:08:21] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:09:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[21:10:32] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:12:55] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[21:12:55] *** Joins: Viewday115 (~Viewday@user/viewday)
[21:12:55] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[21:12:55] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[21:12:55] *** Joins: brdb (~alarm@24.61.226.255)
[21:12:55] *** Joins: rcf (~rcf@sdf.org)
[21:12:55] *** Joins: biotty (~coien@li35-173.members.linode.com)
[21:12:55] *** Joins: Praise (~Fat@user/praise)
[21:12:55] *** Joins: pranshukhandal (~ghost@envs.net)
[21:12:55] *** Joins: blinky42 (~quassel@user/blinky42)
[21:12:55] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[21:12:55] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[21:12:55] *** Joins: xa0s (~xa0s@mab.sdf.org)
[21:12:55] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[21:12:55] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[21:12:55] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[21:12:55] *** Joins: gjvc (~gjvc@user/gjvc)
[21:12:55] *** Joins: n1000_ (~n1000@user/n1000)
[21:12:55] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[21:12:55] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[21:12:55] *** Joins: Luke- (~ldm@hacksoc/alumni/ldm)
[21:12:55] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[21:12:55] *** Joins: Phil-Work (~phil@62.3.100.20)
[21:12:55] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[21:12:55] *** Joins: aesin (~aesin@81.211.127.107)
[21:15:22] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[21:18:17] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[21:18:28] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[21:18:40] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:18:58] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:20:18] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:20:59] *** Joins: kts (~kts@103.73.237.221)
[21:25:21] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[21:26:22] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[21:28:16] *** Joins: novns (~novns@user/novns)
[21:33:05] *** Joins: neo1 (~neo@103.144.161.8)
[21:34:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:34:38] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[21:38:08] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[21:45:49] *** Joins: karakedi (~eAC53C340@user/karakedi)
[21:45:57] *** Quits: ncrowl (~ncrowl@89-160-77-216.cust.bredband2.com) (Ping timeout: 240 seconds)
[21:46:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:46:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[21:47:32] *** Joins: bladerunner1 (~bladerunn@103.167.123.127)
[21:47:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 268 seconds)
[21:47:59] *** Joins: ncrowl (~ncrowl@89-160-77-134.cust.bredband2.com)
[21:48:09] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:02] *** Joins: icy_troubles (~icy_troub@2605:8d80:642:b37b:3a7b:4fdb:1bf:f689)
[21:49:18] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:49:25] *** Quits: icy_troubles (~icy_troub@2605:8d80:642:b37b:3a7b:4fdb:1bf:f689) (Read error: Connection reset by peer)
[21:53:16] *** Joins: tiotags (~tiotags@user/tiotags)
[21:55:01] *** Joins: danisanti (~daniel@user/danisanti)
[21:56:09] *** Joins: icy_troubles (~icy_troub@2605:8d80:64a:c435:941b:86de:c08d:98fd)
[21:56:09] *** Joins: cruncher (~cruncher@user/cruncher)
[21:56:27] *** Quits: iomari891 (~iomari891@197.210.77.126) (Ping timeout: 256 seconds)
[21:56:32] *** Joins: bnchs (~bnchs@105.157.174.172)
[21:56:34] *** Quits: icy_troubles (~icy_troub@2605:8d80:64a:c435:941b:86de:c08d:98fd) (Read error: Connection reset by peer)
[21:57:12] *** Joins: iomari891 (~iomari891@197.210.53.194)
[21:57:48] *** Quits: bnchs__ (~bnchs@160.177.31.32) (Ping timeout: 272 seconds)
[21:59:41] *** Joins: icy_troubles (~icy_troub@2605:8d80:646:b80f:fa8d:44e2:a30a:fef5)
[22:00:09] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[22:00:10] *** Quits: icy_troubles (~icy_troub@2605:8d80:646:b80f:fa8d:44e2:a30a:fef5) (Read error: Connection reset by peer)
[22:02:18] *** Joins: bnchs__ (~bnchs@105.157.215.150)
[22:02:39] *** Joins: vboyko (~vboyko@46.211.111.120)
[22:02:43] <vboyko> Hi
[22:03:03] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:04:22] *** Joins: icy_troubles (~icy_troub@67-208-31-163.ip.tor.radiant.net)
[22:05:24] *** Quits: bnchs (~bnchs@105.157.174.172) (Ping timeout: 272 seconds)
[22:06:40] *** Quits: bnchs__ (~bnchs@105.157.215.150) (Ping timeout: 250 seconds)
[22:10:14] <twkm> moo.
[22:12:04] *** Quits: cruncher (~cruncher@user/cruncher) (Quit: Leaving)
[22:13:10] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[22:14:05] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:14:49] *** Joins: rgrinberg (~textual@177.244.18.30)
[22:15:20] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[22:16:32] *** Parts: R2robot (~R2robot@user/r2robot) (See ya'll later. o/")
[22:18:38] *** Quits: iomari891 (~iomari891@197.210.53.194) (Quit: WeeChat 3.3)
[22:19:40] *** Quits: icy_troubles (~icy_troub@67-208-31-163.ip.tor.radiant.net) (Ping timeout: 250 seconds)
[22:20:54] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:22:11] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 252 seconds)
[22:25:38] *** Joins: danisanti (~daniel@user/danisanti)
[22:31:50] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:35:59] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:36:24] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[22:36:36] *** Joins: zzbot (~zzbot@user/zzbot)
[22:37:02] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:39:19] *** Joins: icy_troubles (~icy_troub@2605:8d80:643:1add:a289:bab5:e64d:fde4)
[22:39:55] *** Quits: icy_troubles (~icy_troub@2605:8d80:643:1add:a289:bab5:e64d:fde4) (Read error: Connection reset by peer)
[22:40:48] *** Joins: Giovanni (~Giovanni@176.55.170.26)
[22:42:44] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b471:facc:b3cc:8f3)
[22:43:19] *** Joins: zmt01 (~zmt00@user/zmt00)
[22:43:26] <h4k1m0u> Hi, anyone using ninja (build tool) here? I can't find `ninja install` in the manual! where does the option `install` come from?
[22:43:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:44:00] <NRK> not a C question, try ##workingset maybe
[22:44:24] <h4k1m0u> I'll do, thanks NRK
[22:44:56] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:45:22] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:45:41] <bladerunner1> NRK :) could u help me understand a code bout bitwise operators?
[22:46:57] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[22:47:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:47:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:48:56] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[22:48:57] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:50:24] <ioxzev1z> bladerunner1, ask the channel
[22:52:34] *** Joins: aradesh (~aradesh@user/aradesh)
[22:53:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[22:53:11] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[22:53:34] *** Joins: zmt01 (~zmt00@user/zmt00)
[22:53:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:55:10] <bladerunner1> alright, here ya go: https://bpa.st/DBDQ
[22:55:24] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:55:47] <ioxzev1z> ah, no code formatting
[22:56:18] <bladerunner1> what?
[22:56:37] <ioxzev1z> You have no whitespace in your codez
[22:56:50] <bladerunner1> I copied that from a book
[22:57:03] <ioxzev1z> Right, but your paste is all left aligned with no indentation
[22:57:21] <bladerunner1> Ik, it looks annoying to me as well
[22:57:32] <ioxzev1z> Maybe easier to read if you indent it?
[22:57:35] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[22:57:38] <bladerunner1> sure?
[22:58:17] *** Quits: vekay (~vekay@user/vekay) (Quit: Leaving)
[22:58:29] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e7c4:5253:dd7b:aefb) (Ping timeout: 252 seconds)
[22:59:03] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[23:00:19] <Bou> hm, why divide by 256*256*256 when there's a `>>` bitshift operator
[23:00:21] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 245 seconds)
[23:00:28] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:00:42] <fizzie> At least it's consistent.
[23:00:55] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[23:01:01] <fizzie> `*= 2` for `<<= 1`, `/= 256` for `>>= 8`, and so on.
[23:01:07] <fizzie> (Weird, though.)
[23:01:18] *** Joins: moog (~moog@98.97.87.156)
[23:01:33] <bladerunner1> https://bpa.st/H4NA
[23:01:55] <bladerunner1> The code's from 2008
[23:01:57] *** Quits: epicout (~epicout@2a01:e0a:77:db70:978a:6e9:9495:cd9d) (Ping timeout: 256 seconds)
[23:02:49] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2e86:80a5:f58b:d1a4)
[23:03:01] <bladerunner1> that's the link for indented version. Anyway, I don't understand the whole binary_print() function
[23:03:03] *** Joins: magla (~gelignite@d5366f7c.access.ecotel.net)
[23:05:36] <fizzie> Does it become any clearer when it's written with shifts instead of multiplication and division? https://0x0.st/oZ9k.txt
[23:06:02] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[23:07:03] <Bou> tbh the whole thing feels a bit awkward to me
[23:07:13] <bladerunner1> maybe I'll understand if I know what the "mask" variable's for, the value looks like hexadecimal
[23:07:18] <Bou> assumed unsigned int is 32 bits, for starters
[23:08:28] <bladerunner1> Bou the code is from a 2008 book
[23:08:29] <fizzie> The mask variable is for clearing all the bits of the `value` it's trying to print that are not set in the mask.
[23:08:56] <fizzie> It's not exactly necessary for anything, since the code will only look at a specific bit of the extracted byte, but I guess it doesn't hurt either.
[23:09:40] *** Joins: Akuli (~Akuli@213.216.209.23)
[23:09:42] <fizzie> If you have a value like 0x12345678, and you & it with a mask like 0x00ff0000 (the value of mask for the second iteration of the outer loop), the result will be 0x00340000.
[23:09:43] <Rounin> Understanding masks is usually a lot easier when you convert them to binary, right
[23:10:06] <fizzie> Well, yeah. The binary equivalent is too long to write out in IRC though. ;)
[23:10:14] <Rounin> Like, 11111111 & 01010101 is 01010101 and so forth
[23:10:52] <Rounin> Yeah, hex is a great shorthand, I was more thinking of a person trying to read through it
[23:11:09] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[23:11:17] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:11:33] <bladerunner1> fizzie yeah I think I understand now, but I didn't know hexadecimals can be assigned to unsigned ints?
[23:11:41] <fizzie> They're just numbers.
[23:12:49] <bladerunner1> I see
[23:12:54] <bladerunner1> why is the shift set to 24?
[23:12:57] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b471:facc:b3cc:8f3) (Ping timeout: 256 seconds)
[23:12:58] <fizzie> (Though there's a slight difference in how a type is assigned to hexadecimal integer literals vs. decimal ones.)
[23:13:48] *** Joins: v4mp (~v4mp@user/v4mp)
[23:13:57] <fizzie> The code assumes blindly that an `unsigned int` has 32 bits (and that bytes have 8), so to look at the most significant byte it shifts the value by 24, leaving the 8.
[23:14:14] <fizzie> The same thing as dividing by 256*256*256 accomplished in the original.
[23:14:15] <bladerunner1> alright @@ my self-esteem is hurting due to my lack of understanding
[23:15:12] <bladerunner1> alright so it pushes it 24 bits ahead then it pushes 1 bit ahead again
[23:15:13] <Bou> maybe try something easier first? how much is 8 >> 1?
[23:15:31] *** Joins: mahmutov_ (~mahmutov@5.176.35.94)
[23:16:00] <fizzie> Well, if you have again that value 0x12345678, then the "first" byte 0x12 are bits 31 through to 24 (counting from the right), the second byte 0x34 are bits 23..16, the third byte 0x56 are bits 15..8 and the final byte 0x78 are bits 7..0. So if you want to process the 0x12 part, you can shift the entire value by 24 bits to the right, so that the 0x12345678 becomes 0x00000012.
[23:16:20] *** Quits: mahmutov (~mahmutov@5.176.1.238) (Ping timeout: 272 seconds)
[23:16:26] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[23:17:00] <bladerunner1> you mean 32 through 24?
[23:17:07] <fizzie> No, that would be 9 bits.
[23:17:31] <fizzie> The 32 bits in a 32-bit value are commonly numbered from 0 to 31.
[23:17:39] <bladerunner1> oh
[23:17:49] *** Joins: danisanti (~daniel@user/danisanti)
[23:18:02] <fizzie> You might number them from 1 to 32 if you prefer. But then it'd be bits 32 through 25.
[23:19:34] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:22:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[23:22:30] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 250 seconds)
[23:22:56] <fizzie> bladerunner1: FWIW, I wouldn't necessarily write it this way either, but here's a possibly easier-to-follow function that does exactly the same thing (with the same assumptions about type sizes): https://ideone.com/MXPmZZ
[23:24:08] <fizzie> Or if not easier-to-follow, at least there's less of it.
[23:24:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:27:39] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[23:27:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[23:27:50] <Maxdamantus> "24 to 32" SGTM, assuming half open ranges.
[23:28:09] <Maxdamantus> 0 to 8, 8 to 16o 16 to 24, 24 to 32
[23:28:33] <bladerunner1> alright I understand this almost
[23:28:51] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:29:35] <bladerunner1> if(byte & 0x80) 0x80 is hex to decimals 128, why's that?
[23:29:55] <Maxdamantus> because 8*16 = 128
[23:30:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:30:23] <bladerunner1> Bou you mean the division equation?
[23:31:00] <Maxdamantus> in decimal, 123 means 1*10^2 + 2*10^1 + 3*10^0
[23:31:24] <Maxdamantus> in hex, 0x123 means 1*16^2 + 2*16^1 + 3*16^0
[23:31:38] *** Lord_of_Life_ is now known as Lord_of_Life
[23:32:27] *** Joins: pulse (~pulse@user/pulse)
[23:33:06] <Maxdamantus> (where `^` is exponentiation, not XOR)
[23:34:28] <bladerunner1> hmm
[23:34:30] <Bou> 0x80 is 10000000, so a byte with only the highest bit set to 1
[23:34:50] <Bou> so the program starts with the highest byte, then it checks the highest bit of that byte
[23:36:09] <Bou> and then it does `byte <<= 1` which moves all bits to the left, making the second-highest bit now the highest bit
[23:36:18] *** Joins: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se)
[23:36:47] <kevin-oculus> atk are you here
[23:37:41] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:37:44] <bladerunner1> right for the next loop iteration
[23:38:39] <bladerunner1> wouldn't it be easier to just do if(byte & 1)
[23:40:00] <Bou> then the order of the bits will be wrong
[23:40:17] <Bou> just like a decimal number like 12345, you want to print the ten-thousands digits first, then the thousands digit, etc
[23:41:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[23:42:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[23:42:37] *** Parts: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se) (Leaving)
[23:43:06] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Quit: quit)
[23:43:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:43:27] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[23:46:36] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:02] <ioxzev1z> Now lets talk endianness
[23:49:06] <fizzie> I'd rather not.
[23:49:41] <fizzie> (There's no need to get object representations involved at all.)
[23:50:13] <bladerunner1> alright I get it now
[23:50:16] <ioxzev1z> fizzie, doesn't endianness affect the above?
[23:51:07] <bladerunner1> except why's mask and shift shifting to right 8 bits after those each 8 iterations
[23:51:56] <bladerunner1> for the next byte.. ight nvm
[23:52:10] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[23:53:31] <Bou> like I said, the code is awkward, it shifts that byte to the left each time, but the mask to the right
[23:54:07] <Bou> it could have had a `value <<= 8` and used the same mask/shift each time instead
[23:55:47] <fizzie> It doesn't need to "isolate the byte" at all, since it's just going to print all the bits.
[23:56:01] <fizzie> Hence the https://ideone.com/MXPmZZ variant.
[23:56:39] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[23:57:08] <bladerunner1> fizzie yeah that variant made a lot of sense, but this one's still hurting my neurons a little
[23:57:21] *** Quits: cincoswim (~cincoswim@cm-72-241-174-56.buckeyecom.net) (Ping timeout: 252 seconds)
[23:57:57] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[23:57:58] <fizzie> Even if it does want to do it byte by byte, there's no need for the 0xff000000 mask, because the line where it checks the bit to print already masks to a single bit (with `byte & 0x80`), so it doesn't matter what values outside that bit are.
[23:59:28] *** Joins: cincoswim (~cincoswim@cm-72-241-174-56.buckeyecom.net)
