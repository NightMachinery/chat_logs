[00:02:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:d036:698b:4f59:ac7:3ad8:3320)
[00:02:31] *** Joins: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de)
[00:04:55] *** Quits: rgherdt_ (~rgherdt@2a01:598:d038:d67f:f4bd:95ae:c30:7222) (Ping timeout: 250 seconds)
[00:05:46] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[00:05:48] *** Quits: Brucio-92 (~Brucio-92@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[00:16:33] *** Quits: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de) (Remote host closed the connection)
[00:19:02] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[00:21:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[00:22:50] *** Joins: aeth (~aeth@user/aeth)
[00:25:18] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[00:30:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:41:32] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: yottabyte (uid195082@id-195082.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: santiagopim (~user@84.78.243.45) (*.net *.split)
[00:41:32] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[00:41:32] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[00:41:32] *** Quits: jackdaniel (~jack@turtleware.eu) (*.net *.split)
[00:41:32] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[00:41:32] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (*.net *.split)
[00:41:32] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (*.net *.split)
[00:41:32] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (*.net *.split)
[00:41:32] *** Quits: Bike (~Glossina@71.69.170.70) (*.net *.split)
[00:41:32] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[00:41:32] *** Quits: artchad (~user@public-gprs218803.centertel.pl) (*.net *.split)
[00:41:33] *** Quits: pve (~pve@178-55-110-170.bb.dnainternet.fi) (*.net *.split)
[00:41:33] *** Quits: utis (~utis@84.208.160.26) (*.net *.split)
[00:41:33] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[00:41:33] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[00:41:33] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[00:41:33] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (*.net *.split)
[00:41:33] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[00:41:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[00:41:33] *** Quits: froggey (~froggey@li1514-95.members.linode.com) (*.net *.split)
[00:41:33] *** Quits: mgxm_ (~mgxm@user/mgxm) (*.net *.split)
[00:41:33] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[00:41:33] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[00:41:33] *** Quits: stack1 (~stack@ctrl-c.club) (*.net *.split)
[00:41:33] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[00:41:33] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[00:41:33] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[00:41:34] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[00:41:34] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[00:41:34] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[00:41:34] *** Quits: russe (~user@cl-user.org) (*.net *.split)
[00:41:34] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[00:41:34] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[00:41:34] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[00:41:34] *** Quits: les_ (~whome@user/les) (*.net *.split)
[00:41:34] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[00:41:34] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[00:41:34] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[00:41:34] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[00:41:34] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[00:41:34] *** Quits: Catie (~user@user/catie) (*.net *.split)
[00:41:34] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (*.net *.split)
[00:41:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[00:41:34] *** Quits: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350) (*.net *.split)
[00:41:34] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (*.net *.split)
[00:41:34] *** Quits: wacki (~wacki@87.122.86.194) (*.net *.split)
[00:41:34] *** Quits: semz (~semz@user/semz) (*.net *.split)
[00:41:35] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net) (*.net *.split)
[00:41:35] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[00:41:35] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[00:41:35] *** Quits: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net) (*.net *.split)
[00:41:35] *** Quits: susam (~susam@user/susam) (*.net *.split)
[00:41:35] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[00:41:35] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[00:41:35] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (*.net *.split)
[00:41:35] *** Quits: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f) (*.net *.split)
[00:41:35] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: gko` (~user@user/gko) (*.net *.split)
[00:41:35] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[00:41:35] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (*.net *.split)
[00:41:35] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (*.net *.split)
[00:41:35] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[00:41:35] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[00:41:35] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[00:41:35] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[00:41:35] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[00:41:35] *** Quits: Equill (~Equill@80.30.200.244) (*.net *.split)
[00:41:36] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[00:41:36] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[00:41:36] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[00:41:36] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[00:41:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[00:41:36] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (*.net *.split)
[00:41:36] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[00:41:36] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (*.net *.split)
[00:41:36] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[00:41:36] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[00:41:36] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (*.net *.split)
[00:41:36] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (*.net *.split)
[00:41:36] *** Quits: srhm (dda3db84b5@user/srhm) (*.net *.split)
[00:41:36] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[00:41:36] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[00:41:36] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: light (~light@user/light) (*.net *.split)
[00:41:36] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[00:41:36] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[00:41:36] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[00:41:36] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[00:41:36] *** Quits: ogamita`` (~t@hubble.informatimago.com) (*.net *.split)
[00:41:36] *** Quits: hirez (~hirez@104.128.237.40) (*.net *.split)
[00:41:36] *** Quits: jsatk__ (sid304796@id-304796.helmsley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[00:41:36] *** Quits: rgherdt__ (~rgherdt@2a01:598:d036:698b:4f59:ac7:3ad8:3320) (*.net *.split)
[00:41:37] *** Quits: Oddity (~Oddity@user/oddity) (*.net *.split)
[00:41:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[00:41:37] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[00:41:37] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[00:41:37] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (*.net *.split)
[00:41:37] *** Quits: [smlckz] (3329f5a75b@user/smlckz) (*.net *.split)
[00:41:37] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[00:41:37] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[00:41:37] *** Quits: phadthai (~mmondor@user/phadthai) (*.net *.split)
[00:41:37] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[00:41:37] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[00:41:37] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[00:41:37] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[00:41:37] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[00:41:37] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[00:41:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[00:41:37] *** Quits: raeda (~raeda@72.49.252.109) (*.net *.split)
[00:41:37] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[00:41:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[00:41:37] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (*.net *.split)
[00:41:37] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[00:41:37] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[00:41:37] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (*.net *.split)
[00:41:37] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (*.net *.split)
[00:41:37] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[00:41:38] *** Quits: linjian (~linj@user/linj) (*.net *.split)
[00:41:38] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[00:41:38] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[00:41:38] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[00:41:38] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[00:41:38] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (*.net *.split)
[00:41:38] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[00:41:38] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[00:41:38] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[00:41:38] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[00:41:38] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[00:41:38] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[00:41:38] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[00:41:38] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[00:41:39] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[00:41:39] *** Quits: jealousmonk (~user@user/jealousmonk) (*.net *.split)
[00:41:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (*.net *.split)
[00:41:39] *** Quits: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de) (*.net *.split)
[00:41:39] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[00:41:39] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[00:41:39] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[00:41:39] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (*.net *.split)
[00:41:39] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[00:41:39] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[00:41:39] *** Quits: spec (~spec@user/spec) (*.net *.split)
[00:41:39] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[00:41:39] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:39] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[00:41:40] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (*.net *.split)
[00:41:40] *** Quits: morganw (~user@80.225.24.132) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: neominimum (sid537410@user/neominimum) (*.net *.split)
[00:41:40] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: random-nick (~random-ni@87.116.167.125) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[00:41:40] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[00:41:40] *** Quits: micro (~micro@user/micro) (*.net *.split)
[00:41:40] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net) (*.net *.split)
[00:41:40] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[00:41:40] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[00:41:40] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: sander (~sander@user/sander) (*.net *.split)
[00:41:40] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[00:41:40] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[00:41:41] *** Quits: igemnace (~ian@user/igemnace) (*.net *.split)
[00:41:41] *** Quits: beach (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89) (*.net *.split)
[00:41:41] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (*.net *.split)
[00:41:41] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[00:41:42] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[00:41:42] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[00:41:42] *** Quits: hefner (~hefner@user/hefner) (*.net *.split)
[00:41:42] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[00:41:42] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[00:41:42] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[00:41:42] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[00:41:42] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[00:41:42] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[00:41:42] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[00:41:42] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[00:41:42] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[00:41:42] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[00:41:43] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[00:41:43] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[00:41:43] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[00:41:43] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: victor__ (sid208353@id-208353.tinside.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: dale (~dale@user/dale) (*.net *.split)
[00:41:43] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[00:41:43] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[00:41:43] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[00:41:43] *** Quits: form_feed (~form_feed@user/f/x-7101985) (*.net *.split)
[00:41:43] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[00:41:43] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[00:41:43] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (*.net *.split)
[00:41:43] *** Quits: djuber (~user@65.79.128.64) (*.net *.split)
[00:41:43] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (*.net *.split)
[00:41:43] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[00:41:43] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[00:41:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (*.net *.split)
[00:41:43] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[00:41:43] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[00:41:43] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[00:41:43] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[00:41:43] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[00:41:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (*.net *.split)
[00:41:43] *** Quits: parjanya (~esb@2804:14c:1ad:9351:1402:1741:3531:7449) (*.net *.split)
[00:41:43] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[00:41:43] *** Quits: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[00:41:44] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (*.net *.split)
[00:41:44] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[00:41:44] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[00:41:44] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (*.net *.split)
[00:41:44] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[00:41:44] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[00:41:44] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[00:41:44] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[00:41:44] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[00:41:44] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (*.net *.split)
[00:41:44] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[00:41:44] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[00:41:44] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: pok (~pok@user/pok) (*.net *.split)
[00:41:44] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[00:41:44] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[00:41:44] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[00:41:44] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (*.net *.split)
[00:41:44] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[00:41:44] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (*.net *.split)
[00:41:45] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[00:41:45] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[00:41:45] *** Quits: antoni (~antoni@rozalia.antoszka.pl) (*.net *.split)
[00:41:45] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[00:41:45] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: spacebat (spacebat@spot.ubermonkey.net) (*.net *.split)
[00:41:45] *** Quits: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f) (*.net *.split)
[00:41:45] *** Quits: Odin- (~odin@cybernetic.anarchism.is) (*.net *.split)
[00:41:45] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[00:41:45] *** Quits: ecraven (~ecraven@user/nex) (*.net *.split)
[00:41:45] *** Quits: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[00:41:45] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[00:41:45] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[00:41:45] *** Quits: _death (~death@adeht.org) (*.net *.split)
[00:41:45] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[00:41:46] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[00:44:10] *** Joins: skyl4rk (~tlvb@user/tlvb)
[00:44:10] *** Joins: materialfuture (~materialf@149.248.8.187)
[00:44:10] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[00:44:10] *** Joins: TMA (~tma@twin.jikos.cz)
[00:44:10] *** Joins: les_ (~whome@user/les)
[00:44:10] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[00:44:10] *** Joins: russe (~user@cl-user.org)
[00:44:10] *** Joins: amk (~amk@109.255.169.126)
[00:44:10] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[00:44:10] *** Joins: z3t0 (~z3t0@146.71.14.98)
[00:44:10] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[00:44:10] *** Joins: danieli (~danieli@user/danieli)
[00:44:10] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[00:44:10] *** Joins: stack1 (~stack@ctrl-c.club)
[00:44:10] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[00:44:10] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:44:10] *** Joins: gjvc (~gjvc@user/gjvc)
[00:44:10] *** Joins: mgxm_ (~mgxm@user/mgxm)
[00:44:10] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[00:44:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:44:10] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[00:44:10] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[00:44:10] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[00:44:10] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[00:44:10] *** Joins: Alfr (~Alfr@user/alfr)
[00:44:10] *** Joins: utis (~utis@84.208.160.26)
[00:44:10] *** Joins: pve (~pve@178-55-110-170.bb.dnainternet.fi)
[00:44:10] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[00:44:10] *** Joins: Bike (~Glossina@71.69.170.70)
[00:44:10] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[00:44:10] *** Joins: mason (~mason@redhat/mason)
[00:44:10] *** Joins: jackdaniel (~jack@turtleware.eu)
[00:44:10] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:44:10] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[00:44:10] *** Joins: santiagopim (~user@84.78.243.45)
[00:44:10] *** Joins: lonjil (~quassel@user/lonjil)
[00:44:10] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[00:44:10] *** Joins: even4void (even4void@came.here.for-some.fun)
[00:44:10] *** Joins: dcx (~dcx@user/dac)
[00:44:10] *** Joins: gabc (~gabc@user/gabc)
[00:44:10] *** Joins: bollu (~bollu@159.65.151.13)
[00:44:10] *** Joins: copec (~copec@schrodbox.unaen.org)
[00:44:10] *** Joins: lieven (~mal@ns2.wyrd.be)
[00:44:10] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[00:44:10] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[00:44:10] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[00:44:10] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[00:44:10] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[00:44:10] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[00:44:10] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[00:44:10] *** Joins: linjian (~linj@user/linj)
[00:44:10] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[00:44:10] *** Joins: pjb (~pjb@user/pjb)
[00:44:10] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[00:44:10] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[00:44:10] *** Joins: sterni (~lukas@user/sterni)
[00:44:10] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[00:44:10] *** Joins: _death (~death@adeht.org)
[00:44:10] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[00:44:10] *** Joins: dmgk (~dmgk@user/dmgk)
[00:44:10] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[00:44:10] *** Joins: ecraven (~ecraven@user/nex)
[00:44:10] *** Joins: BytesAndCoffee (~libera@bytes.coffee)
[00:44:10] *** Joins: Odin- (~odin@cybernetic.anarchism.is)
[00:44:10] *** Joins: spacebat (spacebat@spot.ubermonkey.net)
[00:44:10] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[00:44:10] *** Joins: derelict (~derelict@user/derelict)
[00:44:10] *** Joins: antoni (~antoni@rozalia.antoszka.pl)
[00:44:10] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[00:44:10] *** Joins: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f)
[00:44:10] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:44:10] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[00:44:10] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[00:44:10] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[00:44:10] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[00:44:10] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[00:44:10] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[00:44:10] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[00:44:10] *** Joins: beach (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)
[00:44:10] *** Joins: igemnace (~ian@user/igemnace)
[00:44:10] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f5:7936:a1de:2e7b:487:f6fb)
[00:44:10] *** Joins: ns12 (~ns12@user/ns12)
[00:44:10] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[00:44:10] *** Joins: Fade (fade@outrider.deepsky.com)
[00:44:10] *** Joins: specbot (~specbot@common-lisp.net)
[00:44:10] *** Joins: phadthai (~mmondor@user/phadthai)
[00:44:10] *** Joins: luis (~luis@lisp/luis)
[00:44:10] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[00:44:10] *** Joins: [smlckz] (3329f5a75b@user/smlckz)
[00:44:10] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[00:44:10] *** Joins: psf (~pi@206.55.172.18)
[00:44:10] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[00:44:10] *** erbium.libera.chat sets mode: +oo pl luis
[00:44:10] *** Joins: dstein64 (~dstein64@dannyadam.com)
[00:44:10] *** Joins: Oddity (~Oddity@user/oddity)
[00:44:10] *** Joins: rgherdt__ (~rgherdt@2a01:598:d036:698b:4f59:ac7:3ad8:3320)
[00:44:10] *** Joins: jfb4 (~jfb4@178.62.2.68)
[00:44:10] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[00:44:10] *** Joins: phoe (~phoe@user/phoe)
[00:44:10] *** Joins: pok (~pok@user/pok)
[00:44:10] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[00:44:10] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[00:44:10] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[00:44:10] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[00:44:10] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[00:44:10] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[00:44:10] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[00:44:10] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:44:10] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[00:44:10] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[00:44:10] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[00:44:10] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[00:44:10] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[00:44:10] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[00:44:10] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[00:44:10] *** Joins: notzmv (~zmv@user/notzmv)
[00:44:10] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[00:44:10] *** Joins: parjanya (~esb@2804:14c:1ad:9351:1402:1741:3531:7449)
[00:44:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:44:10] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[00:44:10] *** Joins: borodust (~irc@user/borodust)
[00:44:10] *** Joins: Kabriel (~Kabriel@user/kabriel)
[00:44:10] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:44:10] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[00:44:10] *** Joins: zagura (~zagura@user/zagura)
[00:44:10] *** Joins: loke (~loke@junk.nocrew.org)
[00:44:10] *** Joins: hefner (~hefner@user/hefner)
[00:44:10] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:44:10] *** Joins: markasoftware (~quassel@107.161.26.124)
[00:44:10] *** Joins: hisacro (~OBSD@my.displ.nl)
[00:44:10] *** Joins: sander (~sander@user/sander)
[00:44:10] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:44:10] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[00:44:10] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[00:44:10] *** Joins: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net)
[00:44:10] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:10] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[00:44:10] *** Joins: micro (~micro@user/micro)
[00:44:10] *** Joins: shka (~herr@109.231.0.226)
[00:44:10] *** erbium.libera.chat sets mode: +o fe[nl]ix
[00:44:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:44:10] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:10] *** Joins: random-nick (~random-ni@87.116.167.125)
[00:44:10] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[00:44:10] *** Joins: neominimum (sid537410@user/neominimum)
[00:44:10] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:10] *** Joins: morganw (~user@80.225.24.132)
[00:44:10] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:44:10] *** Joins: aeth (~aeth@user/aeth)
[00:44:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:44:10] *** Joins: raeda (~raeda@72.49.252.109)
[00:44:14] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[00:44:32] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[00:44:32] *** Joins: robin (~robin@user/terpri)
[00:44:32] *** Joins: Catie (~user@user/catie)
[00:44:32] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[00:44:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:44:32] *** Joins: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350)
[00:44:32] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[00:44:32] *** Joins: wacki (~wacki@87.122.86.194)
[00:44:32] *** Joins: semz (~semz@user/semz)
[00:44:32] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net)
[00:44:32] *** Joins: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net)
[00:44:32] *** Joins: easye (~user@oxi.slack.net)
[00:44:32] *** Joins: Josh_2 (~user@37.25.47.130)
[00:44:32] *** Joins: susam (~susam@user/susam)
[00:44:32] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[00:44:32] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[00:44:32] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[00:44:32] *** Joins: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f)
[00:44:32] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[00:44:32] *** Joins: gko` (~user@user/gko)
[00:44:32] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[00:44:32] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[00:44:32] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[00:44:32] *** Joins: etiago (~etiago@user/etiago)
[00:44:32] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[00:44:32] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[00:44:32] *** Joins: |smlckz| (~smlckz@user/smlckz)
[00:44:32] *** Joins: Krystof (~user@81.174.155.115)
[00:44:32] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:44:32] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[00:44:32] *** Joins: Equill (~Equill@80.30.200.244)
[00:44:32] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:44:32] *** Joins: opcode (~opcode@user/opcode)
[00:44:32] *** Joins: mixfix41 (~homefame@user/mixfix41)
[00:44:32] *** Joins: unyu (~pyon@user/pyon)
[00:44:32] *** Joins: lagash (lagash@lagash.shelltalk.net)
[00:44:32] *** Joins: etimmons (m-fyxyzb@li834-247.members.linode.com)
[00:44:32] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[00:44:32] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[00:44:32] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[00:44:32] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:44:32] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[00:44:32] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[00:44:32] *** Joins: srhm (dda3db84b5@user/srhm)
[00:44:32] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[00:44:32] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[00:44:32] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[00:44:32] *** Joins: light (~light@user/light)
[00:44:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[00:44:32] *** Joins: lewisje (~lewisje@72.49.207.113)
[00:44:32] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[00:44:32] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[00:44:32] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[00:44:32] *** Joins: hirez (~hirez@104.128.237.40)
[00:44:32] *** Joins: jsatk__ (sid304796@id-304796.helmsley.irccloud.com)
[00:44:32] *** Joins: flip214 (~marek@user/flip214)
[00:44:37] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Ping timeout: 240 seconds)
[00:44:40] *** Quits: mixfix41 (~homefame@user/mixfix41) (Max SendQ exceeded)
[00:44:49] *** Joins: jealousmonk (~user@user/jealousmonk)
[00:44:49] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[00:44:49] *** Joins: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de)
[00:44:49] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[00:44:49] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[00:44:49] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[00:44:49] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[00:44:49] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:44:49] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[00:44:49] *** Joins: spec (~spec@user/spec)
[00:44:49] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:44:49] *** Joins: selwyn (~selwyn@user/selwyn)
[00:44:49] *** Joins: energizer (~energizer@user/energizer)
[00:44:49] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[00:44:49] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[00:44:49] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[00:44:56] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 245 seconds)
[00:45:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:45:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:45:01] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[00:45:01] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:45:01] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Ping timeout: 250 seconds)
[00:45:01] *** Joins: bldr (~bull@185.117.72.168)
[00:45:01] *** Joins: nckx (~nckx@tobias.gr)
[00:45:01] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[00:45:02] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 240 seconds)
[00:45:02] *** Joins: yottabyte (uid195082@id-195082.lymington.irccloud.com)
[00:45:02] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[00:45:02] *** Quits: sp (~sp@user/susam) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Ping timeout: 240 seconds)
[00:45:08] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[00:45:13] *** Joins: epony (epony@lz2.eu)
[00:45:17] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:45:17] *** Joins: remexre (~remexre@user/remexre)
[00:45:17] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:45:17] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[00:45:17] *** Joins: victor__ (sid208353@id-208353.tinside.irccloud.com)
[00:45:17] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[00:45:17] *** Joins: dale (~dale@user/dale)
[00:45:17] *** Joins: mzan (~quassel@mail.asterisell.com)
[00:45:17] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[00:45:17] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[00:45:17] *** Joins: form_feed (~form_feed@user/f/x-7101985)
[00:45:17] *** Joins: Xach (~xach@user/xach)
[00:45:17] *** Joins: xsperry (~xs@user/xsperry)
[00:45:17] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[00:45:17] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[00:45:17] *** Joins: djuber (~user@65.79.128.64)
[00:45:17] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[00:45:17] *** Joins: minion (~minion@common-lisp.net)
[00:45:17] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:45:17] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[00:45:17] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[00:45:17] *** Joins: samebchase (~samebchas@51.15.68.182)
[00:45:17] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[00:45:17] *** erbium.libera.chat sets mode: +o Xach
[00:45:19] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 245 seconds)
[00:45:25] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 250 seconds)
[00:45:32] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[00:45:38] *** Quits: linjian (~linj@user/linj) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 260 seconds)
[00:45:41] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Ping timeout: 252 seconds)
[00:46:06] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[00:46:15] *** Quits: szkl (uid110435@uxbridge.irccloud.com) (Client Quit)
[00:47:44] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:47:52] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[00:48:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:50:13] *** Joins: mon_aaraj (~MonAaraj@149.255.212.24)
[00:50:49] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:50:57] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[00:51:52] *** Joins: jesopo (~jess@libera/staff/jess)
[00:52:25] *** jesopo is now known as jess
[00:53:33] *** Quits: szkl (uid110435@uxbridge.irccloud.com) ()
[00:55:13] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:58:45] *** Quits: pve (~pve@178-55-110-170.bb.dnainternet.fi) (Quit: leaving)
[01:01:25] *** Quits: wacki (~wacki@87.122.86.194) (Quit: Leaving.)
[01:01:30] *** Quits: jess (~jess@libera/staff/jess) (Changing host)
[01:01:30] *** Joins: jess (~jess@libera/staff/cat/jess)
[01:01:31] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:01:31] *** erbium.libera.chat sets mode: +o ChanServ
[01:01:49] *** epony is now known as Guest3959
[01:02:03] *** Joins: sepanko (~sepanko@user/sepanko)
[01:02:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:03:14] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[01:06:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:09:08] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[01:13:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:16:12] <dbotton> I worked up a written tutorial for the builder. https://docs.google.com/document/d/149DUQqdmV8OL8C22l_WHRxxgWbkrEIzcmwkvqltOU2w/edit?usp=sharing
[01:16:24] <dbotton> Always open to comments
[01:17:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:19:10] *** Joins: jeosol (~jeosol@user/jeosol)
[01:19:41] *** Joins: sp (~sp@user/susam)
[01:20:19] *** Joins: makomo (~makomo@user/makomo)
[01:20:44] <wmblathers> A tutorial! That's great.
[01:21:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:22:42] <phoe> congrats :D
[01:23:37] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[01:23:46] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[01:25:05] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:28:29] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[01:30:35] *** Joins: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de)
[01:32:13] <dbotton> I have 10 or so planned
[01:32:32] <dbotton> I will likely do written and a video
[01:33:44] <dbotton> There is just so much you can do with CLOG and the Builder that it is hard to understand with out some examples
[01:33:59] <dbotton> and explanations
[01:34:17] *** Quits: rgherdt__ (~rgherdt@2a01:598:d036:698b:4f59:ac7:3ad8:3320) (Ping timeout: 240 seconds)
[01:34:29] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[01:36:42] *** Joins: rgherdt (~rgherdt@2a01:598:b1b2:f0d:4e46:754d:1f4e:6c59)
[01:39:53] *** Joins: rgherdt_ (~rgherdt@tmo-085-242.customers.d1-online.com)
[01:42:05] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[01:42:06] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[01:42:17] *** Quits: rgherdt (~rgherdt@2a01:598:b1b2:f0d:4e46:754d:1f4e:6c59) (Ping timeout: 240 seconds)
[01:43:33] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:43:34] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:43:51] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:44:08] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[01:44:11] *** Joins: linjian (~linj@user/linj)
[01:44:30] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[01:44:49] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[01:44:52] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:44:54] *** Quits: jess (~jess@libera/staff/cat/jess) ()
[01:44:59] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:45:04] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:45:33] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:47:39] *** Joins: rgherdt__ (~rgherdt@2a01:598:d03c:ef11:9e18:72c6:4634:55ef)
[01:48:12] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[01:48:48] *** Joins: Oladon (~olad@98.43.81.226)
[01:48:58] *** Joins: akoana (~ah@user/akoana)
[01:49:06] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[01:49:20] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[01:50:17] *** Quits: rgherdt_ (~rgherdt@tmo-085-242.customers.d1-online.com) (Ping timeout: 240 seconds)
[01:50:54] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1af:b926:5f9f:a4b1:97d1:4aea)
[01:52:37] *** Quits: rgherdt__ (~rgherdt@2a01:598:d03c:ef11:9e18:72c6:4634:55ef) (Ping timeout: 240 seconds)
[01:53:56] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a9:b031:f985:fb0b:1e5a:81f3)
[01:55:51] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1af:b926:5f9f:a4b1:97d1:4aea) (Ping timeout: 250 seconds)
[01:56:28] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:56:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b1:c2df:de86:9a83:dbc:738f)
[01:59:43] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a9:b031:f985:fb0b:1e5a:81f3) (Ping timeout: 256 seconds)
[02:03:47] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f5:7936:a1de:2e7b:487:f6fb) (Ping timeout: 252 seconds)
[02:05:03] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[02:08:25] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b1:c2df:de86:9a83:dbc:738f) (Ping timeout: 250 seconds)
[02:09:27] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:10:25] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[02:18:15] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:20:17] *** Quits: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[02:21:29] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:23:38] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[02:26:18] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:27:51] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[02:30:19] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[02:32:52] <tyson2> dbotton: eagerly looking forward to those.  Clog inspired me to really dig into CL
[02:33:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:35:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Read error: Connection reset by peer)
[02:37:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[02:45:51] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:46:47] <dbotton> I am happy to hear tyson2
[02:48:04] <dbotton> CL is an incredibly versatile language
[02:49:43] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:55:31] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[02:58:06] *** Joins: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de)
[02:59:38] *** Joins: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[03:00:01] *** Quits: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de) (Remote host closed the connection)
[03:19:49] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[03:22:47] *** Joins: huckleberry (~huckleber@2603-8000-4102-9b00-3ebd-f708-684f-2aea.res6.spectrum.com)
[03:24:58] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net) (Quit: Leaving)
[03:29:06] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net)
[03:49:03] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[03:50:42] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:59:58] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[04:02:18] <jkordani> so I'm wondering.  How would I go about making a package in such a way that certain parts of them could be made optional.  For example, I'm having trouble installing packages that depend on hdf5-cffi for example.  It got me thinking, is there a way that I could make a package that can conditionally include dependencies?
[04:04:58] <sm2n> jkordani: Use a subsystem. i.e write code without the dependency in mysystem and then have a mysystem/somedep system people can optionally choose to load
[04:05:09] <jkordani> I'm not sure I'm asking the right question, but I spent a few hours last night trying to get hdf5-cffi from both the official repo, and the fork used in cl-ana, to work on my machine.  It got me thinking about how this would work with asdf and packages, and quicklisp to a degree.  In the autotools/configure world, support can be provided to the
[04:05:09] <jkordani> software builder to include certain functionality and libraries.  I really haven't heard the same thing being talked about
[04:06:12] <jkordani> sm2n: I guess I have to read more on asdf then
[04:06:35] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:10:03] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:12:38] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[04:15:13] <jkordani> sm2n: so how would the interface between the two work? generic functions which the subpackage provides?
[04:15:23] *** Quits: mon_aaraj (~MonAaraj@149.255.212.24) (Ping timeout: 250 seconds)
[04:16:09] <jkordani> *provides implementations of?
[04:17:21] <Xach> Hmm, some cheap copies of ANSI Common Lisp and PAIP on US ebay today.
[04:17:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:18:30] <Xach> https://www.ebay.com/itm/194651754978 about Golden Common Lisp would be interesting.
[04:19:00] <Xach> *could be
[04:27:14] *** Quits: huckleberry (~huckleber@2603-8000-4102-9b00-3ebd-f708-684f-2aea.res6.spectrum.com) (Quit: disconnected)
[04:31:50] <sm2n> jkordani: that is one way to do it, yeah
[04:32:43] <jkordani> I'm trying to think of a good example
[04:34:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:36:40] <jkordani> like a generic file reader/writer/plotter class.  file format specific subsystems can be made.  General smarts live in the parent project, but have to provide an interface of some kind.  a user of the class would have to require all of the subsystems they want.  Or I suppose "meta" systems could be defined for common subsets, like foo bar baz
[04:36:40] <jkordani> subsystems of file-lib-base, and then a file-lib-full which requires foo bar baz and base, but doesn't provide any functionality itself
[04:39:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:41:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:43:09] <jkordani> I've never written a large system before so I'm sure there are things that I'm missing.  Like for instance, lets say that I load the hdf5 subsystem.  I want to provide the user with a read function passing a filename.  They presumably know the type but I'd like to let the library handle it.  Somewhere, some code opens the file and determines
[04:43:09] <jkordani> that it is an hdf file and the hdf functions are called to pull the data out.  But where does the dispatch on the file occur?  At some point the file gets opened.  Somewhere there has to be smarts to determine what kind of file this is, but if those are in the hdf5 system, how can the base system use them to access the file?  Or, the base lib
[04:43:10] <jkordani> has enough smarts to determine that its an hdf5 file, but the rest of the implementation for reading the file is in the hdf5 subsystem.  If the base lib doesn't have any references to hdf5 subsystem functions/methods/symbols, how does it dispatch at all?
[04:43:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:43:57] <jkordani> I ran into this chicken and egg problem before and I used the symbol-name dispatch type on methods to do this, but it felt hacky.  I am not sure another way to do it though
[04:52:13] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[04:57:54] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[05:00:43] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-103B-static.midco.net)
[05:03:29] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net) (Ping timeout: 250 seconds)
[05:08:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:10:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:13:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:14:19] <jkordani> so I removed a subsystem from the parent system's depends line, but when loading the system the subsystem is still being brought in
[05:14:37] <jkordani> is there a way to find "reverse dependencies" for a package?
[05:15:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:17:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:21:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:24:07] <jkordani> oh holy cow I can just pull things in from cl-ana piecemeal
[05:25:13] <jkordani> still not sure how the functionality that I want to exclude it being pulled in.  the subsystem hdf5-cffi grovel op is running even though I can't find any system that depends on it outside of cl-ana.asd, which I removed it from
[05:26:33] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[05:27:20] <jkordani> nm
[05:28:32] *** Joins: random-nick (~random-ni@87.116.181.150)
[05:31:58] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:34:29] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:46:46] <jkordani> yea this is really strange.  I suppose I shouldn't look a gift horse in the mouth, but I finally removed all hdf subsystem dependencies and package :use-package lines.  When I load the parent project I get no compile errors, which I don't expect, I expect that I would get "symbols not found" in systems that claim to depend on hdf subsystems
[05:59:05] *** Quits: Guest3959 (epony@lz2.eu) (Quit: QUIT)
[06:04:24] *** Joins: epony (epony@user/epony)
[06:15:44] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[06:27:24] *** Joins: Bike (~Bike@71.69.170.70)
[06:28:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:32:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[06:37:41] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[06:48:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:48:44] *** Quits: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[06:50:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:54:10] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:56:04] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (Remote host closed the connection)
[06:57:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:00:45] *** Joins: patrice (~patrice@user/patrice)
[07:02:50] *** Joins: dre (~dre@2001:8003:c932:c301:a9ae:c59a:a85f:47a7)
[07:03:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:05:23] *** Quits: patrice (~patrice@user/patrice) (Client Quit)
[07:10:21] *** Quits: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:12:17] *** Joins: silasfox (~sbv@p200300cec71e0500336c21a235a152ea.dip0.t-ipconnect.de)
[07:13:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:16:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:23:01] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[07:23:29] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[07:30:31] <beach> Good morning everyone!
[07:41:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:41:58] *** Joins: occ (~occ@user/occ)
[07:42:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:43:54] *** Quits: parjanya (~esb@2804:14c:1ad:9351:1402:1741:3531:7449) (Read error: Connection reset by peer)
[07:45:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[07:45:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:46:11] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[07:50:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:50:46] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[07:52:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:00:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:06:08] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Remote host closed the connection)
[08:07:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:07:19] *** Joins: semz_ (~semz@user/semz)
[08:09:50] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:11:19] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:17:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:22:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:24:23] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[08:30:10] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:33:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:39:14] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 268 seconds)
[08:39:28] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[08:52:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:56:13] *** Joins: domovod (~domovod@176.196.122.197)
[08:59:23] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:00:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:07:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:17:17] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[09:17:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[09:17:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[09:29:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:35:28] *** Joins: notzmv (~zmv@user/notzmv)
[09:43:54] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[09:44:15] *** Joins: artchad (~user@public-gprs221196.centertel.pl)
[09:47:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:55:22] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Quit: Lost terminal)
[09:56:42] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[09:56:45] *** Quits: artchad (~user@public-gprs221196.centertel.pl) (Read error: Connection reset by peer)
[09:59:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:00:44] *** Joins: wacki (~wacki@87.122.83.47)
[10:06:44] *** Joins: attila_lendvai (~alendvai@catv-176-63-14-84.catv.fixed.vodafone.hu)
[10:12:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:18:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:21:25] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:23:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[10:31:19] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181)
[10:33:07] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:43:02] <mfiano> Good morning
[10:43:17] <mfiano> I think I need a bit of help with CLOS initialization arguments.
[10:44:35] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[10:48:00] <mfiano> https://gist.github.com/mfiano/7c26c1761980fbc9cc9975cc213bdb0d
[10:48:37] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Quit: Konversation terminated!)
[10:51:26] <mfiano> I am hoping the solution isn't to define 1 initialize-instance auxiliary method per RGB variant class.
[10:51:47] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2d8d:81bc:85e6:c719)
[10:51:56] <mfiano> I really don't want to hide this away behind a macro and there will be many of them.
[10:55:39] <flip214> mfiano: I don't understand the problem or what you're trying to do, sorry.
[10:55:52] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: yottabyte (uid195082@id-195082.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: santiagopim (~user@84.78.243.45) (*.net *.split)
[10:55:52] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[10:55:52] *** Quits: jackdaniel (~jack@turtleware.eu) (*.net *.split)
[10:55:52] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[10:55:52] *** Quits: utis (~utis@84.208.160.26) (*.net *.split)
[10:55:52] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[10:55:52] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[10:55:52] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (*.net *.split)
[10:55:52] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: froggey (~froggey@li1514-95.members.linode.com) (*.net *.split)
[10:55:52] *** Quits: mgxm_ (~mgxm@user/mgxm) (*.net *.split)
[10:55:52] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[10:55:52] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[10:55:52] *** Quits: stack1 (~stack@ctrl-c.club) (*.net *.split)
[10:55:52] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:55:52] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[10:55:52] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[10:55:52] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[10:55:52] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[10:55:52] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[10:55:52] *** Quits: russe (~user@cl-user.org) (*.net *.split)
[10:55:52] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[10:55:52] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[10:55:52] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[10:55:52] *** Quits: les_ (~whome@user/les) (*.net *.split)
[10:55:52] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[10:55:52] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[10:55:52] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[10:56:09] <mfiano> The comments and the code should explain that, but no worries.
[10:58:06] *** Joins: santiagopim (~user@84.78.243.45)
[10:58:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[10:58:06] *** Joins: jackdaniel (~jack@turtleware.eu)
[10:58:06] *** Joins: mason (~mason@redhat/mason)
[10:58:06] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[10:58:06] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[10:58:06] *** Joins: utis (~utis@84.208.160.26)
[10:58:06] *** Joins: Alfr (~Alfr@user/alfr)
[10:58:06] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[10:58:06] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[10:58:06] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[10:58:06] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[10:58:06] *** Joins: mgxm_ (~mgxm@user/mgxm)
[10:58:06] *** Joins: gjvc (~gjvc@user/gjvc)
[10:58:06] *** Joins: alvaro121 (~aa@201.230.126.66)
[10:58:06] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[10:58:06] *** Joins: stack1 (~stack@ctrl-c.club)
[10:58:06] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[10:58:06] *** Joins: danieli (~danieli@user/danieli)
[10:58:06] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[10:58:06] *** Joins: z3t0 (~z3t0@146.71.14.98)
[10:58:06] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[10:58:06] *** Joins: amk (~amk@109.255.169.126)
[10:58:06] *** Joins: russe (~user@cl-user.org)
[10:58:06] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[10:58:06] *** Joins: les_ (~whome@user/les)
[10:58:06] *** Joins: TMA (~tma@twin.jikos.cz)
[10:58:06] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[10:58:06] *** Joins: materialfuture (~materialf@149.248.8.187)
[10:58:06] *** Joins: skyl4rk (~tlvb@user/tlvb)
[10:58:06] *** Joins: yottabyte (uid195082@id-195082.lymington.irccloud.com)
[10:58:06] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[11:01:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:04:07] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:7936:8c47:5652:a14e:1810)
[11:07:37] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[11:07:41] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2d8d:81bc:85e6:c719) (Ping timeout: 250 seconds)
[11:21:02] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[11:22:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:22:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:24:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:26:13] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[11:27:45] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:29:10] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl)
[11:31:54] <White_Flame> mfiano: is this a general question about how not to pass keyword arguments if not given to the current function?
[11:32:55] <White_Flame> eg, if :standard-illuminant is not passed to the RGB function, you don't want that key passed to MAKE-INSTANCE either and let its default occur?
[11:34:15] <phoe> if (&rest rest &key ...) is not enough, I know of nothing better than https://github.com/phoe/in-nomine/blob/master/src/define-namespace/long.lisp#L41-L63
[11:34:43] <phoe> where ARGLIST is then passed to MAKE-INSTANCE
[11:35:18] <White_Flame> via APPLY presumably?
[11:35:35] <phoe> yes
[11:35:40] <phoe> no other way to do that
[11:36:01] <mfiano> Cooking, be back in a few to read these suggestions
[11:36:05] *** Joins: rgherdt_ (~rgherdt@2a01:598:d036:eda0:56ad:c143:9a9a:4cb6)
[11:36:28] <phoe> ...although that whole thing might be superfluous now that I look at it
[11:36:44] <phoe> I can replace it with &REST
[11:37:01] <phoe> because the only thing that DESTRUCTURING-BIND does is checking if the plist keys match
[11:37:31] <phoe> so it's not a good example actually but unnecessary code :D
[11:37:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:39:46] * phoe makes an issue
[11:39:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:40:01] <phoe> it would be another case if the keyword arguments were meant to be somehow transformed or canonicalized
[11:40:09] <phoe> but here they're passed as-is, only DOCUMENTATION is split off
[11:40:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:43:57] <mfiano> White_Flame: Yes, I think so, to answer your question.
[11:45:51] <White_Flame> ok, and as phoe mentions, it's not a convenient issue to solve.  &rest + plist operations + apply is generally the course taken
[11:46:10] <White_Flame> using the supplied-p flags aren't generally that useful for passing things on
[11:46:59] <mfiano> I discovered that the hard way. Nothing I have tried is convenient.
[11:47:09] <mfiano> (or works)
[11:47:58] <phoe> mfiano: "I would like each RGB variant class to have its own default value for STANDARD-ILLUMINANT"
[11:48:03] <flip214> mfiano: if you have similar code in multiple (> 3) places, why not generate it via a macro?
[11:48:07] <phoe> sounds like a class-allocated slot?
[11:48:25] <phoe> (DEFAULT-STANDARD-ILLUMINANT :ALLOCATION :CLASS ...) or something
[11:48:33] <flip214> and a class can have a per-class slot, that could be used in a initialize-instance function.... oh, phoe
[11:48:39] <phoe> :D
[11:49:07] *** Joins: rgherdt__ (~rgherdt@2a01:598:d03d:8b4:2ee3:b766:719e:5183)
[11:50:01] <mfiano> I do not want the constructor to alter the slot value of pre-existing instances, unless I misunderstand.
[11:50:18] <phoe> what slot value
[11:50:27] *** Joins: pve (~pve@176-93-15-10.bb.dnainternet.fi)
[11:50:33] <mfiano> the value of the class allocated slot
[11:50:44] <phoe> you don't write to that slot
[11:50:49] <phoe> you read from that slot
[11:51:00] <mfiano> How, if I don't have an instance?
[11:51:04] <phoe> if you want to have one default illuminant per class, then you only write to that slot in each class's :default-initargs
[11:51:14] <phoe> either that, or you write to its class prototype
[11:51:17] <phoe> or you provide an initform
[11:51:41] *** Quits: rgherdt_ (~rgherdt@2a01:598:d036:eda0:56ad:c143:9a9a:4cb6) (Ping timeout: 250 seconds)
[11:52:31] <flip214> initform would be the right thing, and reading from the prototype, IIRC
[11:52:32] <mfiano> I think you are losing me. :DEFAULT-INITARGS is out because I want the default to be overridden with a make-instance initarg.
[11:52:58] *** Joins: shka (~herr@109.231.0.226)
[11:53:06] <phoe> what do you mean by a make-instance initarg?
[11:53:07] <mfiano> CLHS says DEFAULT-INITARGS only takes effect if that initarg is not supplied to make instance
[11:53:28] <phoe> yes - why do you need to provide it in the constructor if it's meant to be per-class?
[11:53:35] <mfiano> Sigh
[11:54:29] <mfiano> It's not meant to be per class. The DEFAULT is meant to be per class, but the constructor is making an instance of any one of a variety of classes (given as another initarg)
[11:54:47] <phoe> OK, so :ALLOCATION :CLASS is not the right thing
[11:55:15] <mfiano> See the rgb constructor in my gist
[11:55:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:55:24] <mfiano> and see what is passed to make-instance's first argument
[11:55:40] <phoe> then I guess it's a variant of my code - grab the argument list, transform it some way (e.g. via calling MAKE-INSTANCE on some keyword arguments), and then APPLY it further
[11:56:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:57:14] <mfiano> I'll read your code then.
[11:57:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:57:28] *** Joins: amb007 (~a_bakic@156.15.23.93.rev.sfr.net)
[12:04:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:07:06] <mfiano> So my solution is to add :default-initargs to each class, and have the constructor do (apply #'make-instance working-space (when standard-illuminant-p `(:standard-illuminant ,standard-illuminant)))
[12:07:21] <mfiano> I'm not sure how good that is, but it seems to work
[12:07:24] <phoe> yes, that'll work
[12:07:26] <mfiano> Thanks for the help
[12:10:46] * phoe adds an idea for a CLR recipe
[12:18:52] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:19:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:19:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:23:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[12:33:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:34:10] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:41:05] *** Quits: lewisje (~lewisje@72.49.207.113) (Quit: Leaving)
[12:41:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:44:09] *** Joins: JeromeLon (~jerome@2a00:23c7:99b2:9501:f05:6b6b:180e:fbdb)
[12:48:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:48:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[12:51:42] *** Quits: amb007 (~a_bakic@156.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:52:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:00:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[13:01:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:08:02] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[13:08:02] *** Joins: jackdaniel (~jack@user/jackdaniel)
[13:08:02] *** ChanServ sets mode: +o jackdaniel
[13:09:00] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:10:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:10:50] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[13:19:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:25:57] *** Quits: rgherdt__ (~rgherdt@2a01:598:d03d:8b4:2ee3:b766:719e:5183) (Ping timeout: 256 seconds)
[13:34:47] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:35:37] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5)
[13:43:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:45:17] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[13:45:45] *** Quits: JeromeLon (~jerome@2a00:23c7:99b2:9501:f05:6b6b:180e:fbdb) (Quit: WeeChat 3.3)
[13:57:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:58:01] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[13:59:52] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:00:13] *** Joins: patrice (~patrice@user/patrice)
[14:05:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:12:33] *** Joins: kevingal (~quassel@149.157.105.172)
[14:16:57] *** Quits: kevingal (~quassel@149.157.105.172) (Ping timeout: 240 seconds)
[14:17:04] *** Joins: kevingal (~quassel@2001:770:c0:401:3cb8:c3d4:606c:25bd)
[14:20:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:24:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:25:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:25:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:50] *** Joins: rgherdt (~rgherdt@tmo-085-175.customers.d1-online.com)
[14:28:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:44:35] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1ac:96ef:8db7:8ec2:ed09:8b1a)
[14:48:21] *** Quits: rgherdt (~rgherdt@tmo-085-175.customers.d1-online.com) (Ping timeout: 256 seconds)
[14:51:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[14:52:01] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[14:52:21] *** Joins: amb007 (~a_bakic@141.15.23.93.rev.sfr.net)
[14:52:32] <jkordani> good morning lispers
[14:52:32] <minion> jkordani, memo from pjb: start by fetching ccl from github, compile it, and then select an open issue.
[14:54:37] *** Joins: rgherdt__ (~rgherdt@2a01:598:d03e:28da:8819:d411:42e8:e2fb)
[14:57:05] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[14:57:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1ac:96ef:8db7:8ec2:ed09:8b1a) (Ping timeout: 256 seconds)
[15:01:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:07:58] *** Quits: amb007 (~a_bakic@141.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:32] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:10:03] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[15:10:22] *** Joins: z3t0 (~z3t0@146.71.14.98)
[15:15:45] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[15:19:06] *** Joins: rgherdt_ (~rgherdt@2a01:598:d032:459f:e0f8:4312:91d7:f237)
[15:22:07] *** Quits: rgherdt__ (~rgherdt@2a01:598:d03e:28da:8819:d411:42e8:e2fb) (Ping timeout: 256 seconds)
[15:25:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:27:36] <jkordani> its been a minute since I've been in the lisp world.  Seems that if functions are evaluated that call undefined functions, you don't run into compile time errors... so if you are missing a subsystem, you can successfully load the whole system but will get undefined function errors when you to to *use* parts depending on the subsystems you didn't
[15:27:36] <jkordani> install.  The new Steve Vai album is clearing my head
[15:30:45] <beach> What do you mean by "functions [being] evaluated"?
[15:31:39] <Shinmera> typically this is not a problem because other systems use their own packages, and the reader will error if you try to use a symbol from an inexistent package.
[15:31:42] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[15:32:08] <jkordani> after say (ql:quickload 'package) or if I send the form to be evaluated over slime
[15:32:12] <phoe> jkordani: (defun foo () (bar))) - if you never call FOO, then you'll never get an error about BAR being an undefined function
[15:32:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:32:40] <jkordani> phoe: yea... its been a minute
[15:32:43] <phoe> oh, you want to get compilation-time warnings from Quicklisp
[15:32:52] <beach> jkordani: If a form is evaluated that calls a function that is not defined, then you will get an error.
[15:32:54] <jkordani> no I don't.  I was erroneously expecting them
[15:33:09] <phoe> oh - quicklisp is usually silent about compiler output
[15:33:12] *** Joins: dlowe (~dlowe@user/dlowe)
[15:34:43] *** Joins: domovod (~domovod@176.196.122.197)
[15:34:59] <jkordani> beach:  I'm not seeing that. slime is giving me a warning that a function it calls it undefined, but there's no outright error, I'm not landing in the debugger
[15:35:25] <rotateq> As it's a warning and not a signaled condition.
[15:35:27] <phoe> yes, compiling (defun foo () (bar)) will give you just a warning that BAR is undefined
[15:35:30] <beach> jkordani: Then you are not evaluating a form that calls a function.  perhaps you are compiling that form?
[15:35:31] <phoe> rotateq: wat
[15:35:36] <phoe> a warning is a signaled condition
[15:35:36] <rotateq> not phoe?
[15:35:46] <phoe> every condition that is signaled is a signaled condition
[15:36:02] <phoe> a warning is not an error, if that is what you meant
[15:36:17] <rotateq> Ok then I learned something new now. Okay right, superclass of warning is condition.
[15:36:33] <rotateq> Yes more specifically.
[15:37:25] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[15:38:52] <rotateq> then better "no error gets signaled" aka not landing in the debugger
[15:39:23] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[15:40:31] <jkordani> beach:  Oh.  Yes, I guess I am compiling the function.  Man... its been too long.  Nothing to see here.
[15:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[15:43:01] <rotateq> jkordani: You're welcome.
[15:43:36] <jkordani> so basically I was experimenting with ripping out hdf5 support from cl-ana so I could load the whole thing (before I realized I could get away with loading only parts) and I was surprised that it didn't break the way I expected
[15:44:05] *** Joins: Bike (~Bike@71.69.170.70)
[15:47:25] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:7936:8c47:5652:a14e:1810) (Ping timeout: 250 seconds)
[15:51:57] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[15:53:24] <jkordani> Shinmera: maybe this was what I was expecting.  While (foo () (bar)) will compile with a warning if bar doesn't exist, (foo () (mypackage:symbol-does-not-exist)) will error on read due to symbol not being found.
[15:53:42] <phoe> yes
[15:57:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:57:32] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:7936:8c47:5652:a14e:1810)
[15:58:50] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[15:59:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:00:28] <jkordani> so I guess that was what I was trying to figure out how to work around.  So what I'm looking at is a parent package that uses (in the package sense) a sub package.  The sub package exports functions that the parent package calls.  When I compile parent files that call the exported functions
[16:06:27] <jkordani> I get a warning about undefined functions.  So unless I'm mistaken about what I'm seeing, using symbols from other packages that haven't been brought into your package with a "use" declaration, aka by calling subpackage:sub-func, incur a lookup that will fail if the symbol isn't found?
[16:08:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:09:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:09:57] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:12:33] *** Quits: silasfox (~sbv@p200300cec71e0500336c21a235a152ea.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:13:16] *** Joins: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de)
[16:14:04] <beach> jkordani: We need to work on your terminology.
[16:14:14] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[16:17:36] <jkordani> yup
[16:18:38] <jkordani> I understand that in a defpackage form, there is a :use form that lists packages who's exported symbols get brought into that package's symbol table.  is this right so far?
[16:21:57] *** Quits: rgherdt_ (~rgherdt@2a01:598:d032:459f:e0f8:4312:91d7:f237) (Ping timeout: 240 seconds)
[16:22:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:25:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[16:25:56] <beach> There may not be such a :USE, and it is not a "form", it is an "option".
[16:26:15] <beach> And functions are not exported.  Only symbols are.
[16:26:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:27:12] *** Joins: aeth (~aeth@user/aeth)
[16:27:29] <dlowe> There's also a number of options and functions to import symbols into packages, so :use isn't the only way it happens.
[16:27:49] <dlowe> I have a strong preference for using :local-nicknames over :use
[16:28:21] <beach> Definitely!
[16:28:41] <dlowe> typically the only thing I :use in a package is #:cl
[16:29:40] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[16:30:02] *** Joins: Bike (~Glossina@71.69.170.70)
[16:37:58] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[16:38:02] *** Joins: rgherdt (~rgherdt@2a01:598:d032:459f:e0f8:4312:91d7:f237)
[16:40:06] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:6306:6a90:aa99:b860:ce3d)
[16:42:11] *** Joins: patrice (~patrice@user/patrice)
[16:42:20] *** Joins: _patrice (~patrice@2603:301c:604:2a00::b3b1)
[16:42:35] *** Quits: _patrice (~patrice@2603:301c:604:2a00::b3b1) (Remote host closed the connection)
[16:42:53] *** Quits: rgherdt (~rgherdt@2a01:598:d032:459f:e0f8:4312:91d7:f237) (Ping timeout: 250 seconds)
[16:46:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:53:37] *** Joins: rgherdt__ (~rgherdt@2a01:598:d03d:7413:d93:cf16:2283:cb2a)
[16:53:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:56:19] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:6306:6a90:aa99:b860:ce3d) (Ping timeout: 250 seconds)
[16:58:23] <jkordani> so I decided to restart lisp and reload cl-ana, and I'm getting errors I expect now, with symbols not being defined at read/compile time
[17:00:09] <jkordani> so obviously there is a difference from compiling a function that calls an undefined function (so assuming its a function attached to a symbol, has a value for symbol-function), the reader is happy with that and you get a warning, vs compiling a function that refers to a symbol by its package name
[17:00:55] <phoe> the latter doesn't even reach compilation stage
[17:01:06] <jkordani> I see
[17:01:14] <phoe> the reader signals an error before any read Lisp code reaches the compiler
[17:03:07] <jkordani>   so I guess the issue I'm running into is that somehow when a project that depends on hdf5-cffi gets loaded, the cffi grovel step for hdf5-cffi gets triggered which fails for me, and I want to avoid that.  I removed dependencies on the hdf5 packages from asdf depenencies and defpackage use options, and when I reload the lisp process and try to
[17:03:08] <jkordani> require cl-ana, I get what I expect at read time for missing symbols from those packages referred to in other places by the packagename:symbol syntax
[17:05:41] <jkordani> so, since any package can be compiled that calls undefined functions (symbols without a value for symbol-function), one way to build a system of systems where dependencies can be optionally included (by hacking out the package names in asdf dependencies or package use options) could be to expect symbols to be exported from the dependent packages,
[17:05:42] <jkordani> so that at read time there will only be warnings, allowing all the rest of the parts of the system to be loaded and usable, minus the runtime surprises about missing those symbols?
[17:06:26] <jkordani> amend the first sentence to say "the reader can handle reading symbols not yet defined, but cannot read symbols declared as belonging to a package that don't exist at the time of the read"
[17:06:52] <jkordani> is this all accurately described?  It seems to hold from my experimentation
[17:07:26] <phoe> more or less; if package FOO already exists but does not export the symbol BAR, the reader will nonetheless yell at you if you try to refer to FOO:BAR
[17:07:26] <mfiano> symbols aren't defined. they are interned. and that is what the reader does when it sees a symbol for the first time.
[17:09:03] <jkordani> also, when quicklisp:register-local-projects is called, asd files in subdirectories of the main system are registered.  So you can optionally load the subsystems without having to load the toplevel system?
[17:09:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:10:34] <jkordani> that also seems to bear out through experimentation
[17:10:41] <Alfr> jkordani, in the following:
[17:10:50] <Alfr> clhs 2.3.5
[17:10:50] <specbot> Valid Patterns for Tokens: http://www.lispworks.com/reference/HyperSpec/Body/02_ce.htm
[17:12:52] <Josh_2> Afternoon all
[17:15:42] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:17:41] <jkordani> So, big question I suppose, is there a way to design a system that when it gets loaded with asdf that a pre-load check can be performed that would detect, say, lack of support for the system (such as foreign libraries being missing) that will allow dependent packages to asdf depend on them, but detect that the specific functionality is missing at
[17:17:41] <jkordani> runtime?  It must hold that dependent packages can not refer to symbols that would have been brought in by the dependency, but instead rely on them to be exported to the dependent pacakge and define a condition handler for calling them, or else provide generic functions which the dependency can specialize, and still define a condition handler when
[17:17:42] <jkordani> a specialized method can't be found?
[17:18:14] <phoe> usually ASDF dependencies are hardcoded into an ASDF system
[17:18:24] <phoe> there is a concept of "weakly depends on" in ASDF, but I don't think it's very popular
[17:19:34] <phoe> and you're conflating a ton of stuff into your question, like ASDF systems and their dependencies, foreign libraries, specialized methods, condition handlers - it's hard to untangle this
[17:19:58] <White_Flame> there's also #+ #- and the *features* list, but again I don't think that's necessarily the best idea
[17:20:05] <Alfr> jkordani, or just dump the idea of automagic configuration, make a foo-bar system!
[17:20:09] <phoe> White_Flame: ASDF has the :feature-if
[17:20:32] <Bike> "We do NOT recommend you use [weakly-depends-on]. If you are tempted to write a system foo that weakly-depends-on a system bar, we recommend that you should instead write system foo in a parametric way, and offer some special variable and/or some hook to specialize its behaviour; then you should write a system foo+bar that does the hooking of things together. "
[17:20:37] <Bike> says the asdf manual.
[17:20:38] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[17:20:41] <phoe> Bike: yes
[17:21:46] <Bike> just elaborating on "not very popular"
[17:22:11] <phoe> yes, that's what I meant, I just failed to use proper words for that
[17:22:14] <phoe> thanks
[17:23:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:25:13] <jkordani> so with that, there has to be enough functionality such that foo attempts to use foo+bar for specialized activity.  I'm trying to think of how to, for instance, make a generic function in foo that foo+bar specializes.  but somehow foo must know that it needs to dispatch to something in foo+bar.  For instance, an open-file method in foo can be
[17:25:13] <jkordani> called that is passed a filename.  foo doesn't know what filetype this is and is relying on the available methods to figure out which should be used.  I don't see how this can work.
[17:26:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[17:26:43] <phoe> dispatch? why
[17:26:56] <phoe> in FOO, (defgeneric frob (thing))
[17:27:19] <phoe> in FOO+BAR, (defmethod frob ((thing foo+bar:my-thing)) ...)
[17:27:39] <phoe> this separates the interface/protocol from the implementation
[17:27:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:28:28] *** Joins: aeth (~aeth@user/aeth)
[17:28:41] <jkordani> doesn't thing have to be specialized ahead of time, so that the dispatch machinery chooses foo+bar frob?
[17:28:52] <phoe> of course it doesn't
[17:29:06] <phoe> CLOS allows you to add or redefine or remove methods at more or less any time
[17:29:21] <jkordani> right
[17:29:24] *** Quits: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[17:29:31] <phoe> you aren't doing a TYPECASE where you need to define your types ahead of time so FOO can use them
[17:30:21] <jkordani> I guess I mis spoke, at run time, whatever thing is needs to have enough information in it for the foo+bar frob method to be chosen, right?
[17:30:38] <phoe> the method to be chosen depends on the methods available
[17:31:17] <phoe> if a method is added to a GF, then CLOS is smart enough to recompute that GF's applicable methods
[17:31:19] *** Quits: kevingal (~quassel@2001:770:c0:401:3cb8:c3d4:606c:25bd) (Ping timeout: 256 seconds)
[17:31:50] *** Joins: kevingal (~quassel@149.157.105.172)
[17:33:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:34:19] <jkordani> well I've run into this before and I'm not sure how I could have solved it better.  I wrote a serialization class for a tag-value bitstream.  I made a read-stream GF that returned deserialized objects, but I can't know which read-stream method would need to be called to determine which class parser should be used (I couldn't think of a better way
[17:34:19] <jkordani> to write the parser than to write ser/deser functions for each value based on a specification for that value)  I had to make a parser for the tag part of the stream that read in a flag, and pass the flag and the bitstream into the GF signature so that the right value ser/deser function could be called
[17:35:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:35:28] <phoe> jkordani: https://plaster.tymoon.eu/view/2916#2916 see how the new methods are taken even though (FROB 42) is called all the time
[17:36:08] <phoe> what do you mean, "which read-stream method would need to be called"
[17:36:12] <phoe> you don't call methods in CL
[17:36:18] <phoe> your generic function does that for you
[17:37:24] <phoe> you call a generic function, and it chooses the most applicable method and calls it - and it can call the next method if/when it wants to
[17:37:46] <jkordani> per your paste, thing has a type associated with it, and the most specialized method will be called on that type
[17:37:55] <phoe> it has a *class* associated with it
[17:38:04] <phoe> CLOS works on classes rather than types, and the two are a bit separate
[17:38:19] <phoe> e.g. KEYWORD is a type, you can't specialize methods on it
[17:38:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:38:35] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:39:57] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[17:40:13] <Bike> is the issue here that the read-stream GF only gets the stream, so it doesn't know what kind of object it's deserializing until it starts reading, so you can't have different methods for each kind of thing to deserialize?
[17:42:38] <phoe> there needs to be some way to figure that out - e.g. a JSON parser also doesn't know what it is about to deserialize, until it actually starts reading from the stream
[17:42:56] <phoe> if anything, it can try to peek at the first element of that stream without removing it from the stream and decide based on that
[17:43:12] <jkordani> right.  I used eql specialization, where my "read tag value" function returned an object with a keyword symbol for the value type, and then wrote another generic function that took a bytestream and the keyword symbol, where the specialization for that keyword symbol would get chosen and the right class deserialization function would be called
[17:43:19] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:43:57] <phoe> so, (defun stream-element-object-type (stream-element) ...) that returns e.g. :FOO, and then call something like (defgeneric deserialize-object (object-type stream)) with methods like (defmethod deserialize-object ((object (eql :foo)) stream) ...)
[17:44:03] <phoe> yes
[17:44:27] <Bike> and now the issue is you want to add this optional system that maybe expands what stream-element-object-type can return?
[17:44:30] <phoe> and the STREAM-ELEMENT-OBJECT-TYPE function does the actual mapping between the "type tag" of the serialized representation and the keyword that will get passed into DESERIALIZE-OBJECT
[17:45:12] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Client Quit)
[17:45:20] <jkordani> so for example, if there is a file type for which the bar package specialized to read a file format, and a read-file GF defined in foo+bar, foo must know enough about the file to allow for the foo+bar method to be selected
[17:45:25] <phoe> I think the question is what is the thing that is being extended here - do we want to add more type tags into STREAM-ELEMENT-OBJECT-TYPE, or do we want to call a "more efficient" method to DESERIALIZE-OBJECT that
[17:45:28] <jkordani> bike: yes
[17:45:43] <phoe> OK, so the former
[17:46:00] <phoe> I'd just get a hash table that FOO+BAR sets new value in
[17:46:06] <jkordani> phoe: that is what I wrote before, yes
[17:46:21] <phoe> and then S-E-O-T can consult the hash table and return the new keyword
[17:46:27] <Bike> so what is the issue.
[17:47:56] <hineios> Hello! I'm having trouble padding with #\FULL_STOP. I'm not really sure why, but using this format control "~80,1,0,.A[Done]" yields a format error for an unknown directive... doesn't ~a support for arguments?
[17:48:08] <hineios> *four arguments
[17:48:26] <Bike> does ~80,1,0,'.A[Done] work
[17:48:44] <hineios> uh
[17:48:46] <hineios> it does
[17:48:50] <Bike> ok great.
[17:48:55] <Bike> you need to quote character arguments.
[17:49:08] <Bike> this is to enable using a comma or other otherwise reserved character
[17:49:34] <hineios> yes, that makes sence
[17:50:09] <hineios> Thank you so much Bike
[17:50:16] <Bike> happy to help.
[17:50:32] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:51:45] <phoe> jkordani: https://plaster.tymoon.eu/view/2917#2917
[17:51:47] <jkordani> in the case of hdf5 for example, the hdf5-cffi grovel process fails.  I'm trying to find a way to shield the user from this failure such that the rest of the system can load.  But if the foo+hdf5 system can be set up, then it will tie in in some way to foo that will allow foo to make use of it.  But in the way I wrote it before, foo needed
[17:51:47] <jkordani> knowledge of the underlying stream to determine which deserialize function to use.  In this case, if the hdf5-cffi won't load, I don't know the class of the object being passed in.  Even in the case of the way I wrote it before, given a bytestream to a function in order to discover what file type it is depends on being able to read that
[17:51:48] <jkordani> specialized file.  after which the right deserialization method can be selected.
[17:52:34] <phoe> if FOO+BAR fails to load, then the machinery in FOO still works
[17:53:00] <phoe> and other systems like FOO+QUUX can set up their own implementations and tie them into the system used by the main entry point, DESERIALIZE
[17:55:27] *** Joins: igemnace (~ian@user/igemnace)
[17:57:33] <jkordani> phoe: thank you!  I like that hash table approach very much.  The crux of the problem for me is that I don't know how to figure out the equivalent for peek-char for a binary format I can't use without loading FOO+BAR's functionality.  I have to hand roll enough out of band smarts to figure out what the tag is, at least I think I do.  Or in the
[17:57:33] <jkordani> case of a file I can shell out to the file command and hope there's a magic byte for the file type.  So it seems like there's no way around it, FOO must be able to determine what "type" is being passed in to the deserialization generic function
[17:57:43] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[17:58:04] <jkordani> in the case of a file, the unix file command can be used to differentiate file types
[17:58:29] <phoe> jkordani: FOO+BAR's functionality?
[17:58:41] <phoe> PEEK-CHAR is only used in FOO, not FOO+BAR
[17:59:05] <phoe> oh, you mean you don't know how to recognize if you can deserialize a file
[17:59:11] <phoe> in that case you can try something else
[17:59:36] <jkordani> yes, peek char assumes knowledge about the bytestream
[17:59:45] <phoe> you want a collection of functions that try to understand a file format
[17:59:45] <jkordani> if I don't have that knowledge ahead of time, I can't do it this way
[18:00:00] <phoe> systems like FOO+BAR can PUSHNEW symbols into that list
[18:00:14] <phoe> and when you encounter a file, you call every function from that list until one of them returns something true
[18:00:28] <phoe> when such a function returns true, you know which concrete deserializer to use
[18:00:41] <phoe> if none return true, then you know you can't recognize that file
[18:01:21] <jkordani> ok that's what I see.  FOO must have enough knowlege about the object being passed in for method dispatch to choose the right method, there's no way around that
[18:02:16] <phoe> not really to choose the right method, but the right keyword to call DESERIALIZE-OBJECT with
[18:02:28] <jkordani> I guess thats the question, is there a way around it.  Yes that is a better way to say that
[18:02:40] <phoe> so, you need a mechanism that will accept such a byte stream, and will return such a keyword
[18:02:46] <phoe> and you need that mechanism to be extensible
[18:03:17] <phoe> (defvar *recognizers* '()) + (pushnew 'foo+bar:bar-recognizer foo:*recognizers*) sounds like it can do the job
[18:04:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:06:05] *** Quits: rgherdt__ (~rgherdt@2a01:598:d03d:7413:d93:cf16:2283:cb2a) (Ping timeout: 250 seconds)
[18:08:28] <jkordani> phoe: beach: thanks all
[18:12:36] <etimmons> jkordani: I haven't followed the whole conversation, but you may find something like https://gitlab.common-lisp.net/cl-tar/cl-tar-file/-/blob/main/src/peeking-stream.lisp interesting
[18:12:55] <etimmons> It's a gray stream that lets you peek at an arbitrary number of elements
[18:14:13] <etimmons> I use it to read enough bytes to determine if a stream has the gzip magic bytes and if so, pass it off to chipz for decompression
[18:14:13] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:14:57] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:15:10] <phoe> etimmons: can I borrow that for a CLR recipe?
[18:15:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:15:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:16:24] <etimmons> Sure! Just be sure to let me know if you find any bugs or improvements that could be made :)
[18:16:40] <phoe> yes, I'll borrow the test suite too :D
[18:16:45] <phoe> (and/or expand on it)
[18:17:12] <etimmons> hmmm... Now you're making me realize I don't test that in isolation
[18:17:21] <etimmons> I can add a few tests
[18:17:22] <phoe> yes, I am making you realize that
[18:17:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:17:51] <etimmons> :)
[18:18:00] <phoe> :D
[18:18:30] <etimmons> There's also a "blocked-stream" in the same repo (that does have tests, because it was a pain to write!)
[18:19:01] <etimmons> It reads multiples of some block size from the stream at a time
[18:19:13] <etimmons> Not sure if it's useful for anything other than tar files, though
[18:20:54] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[18:24:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:24:29] *** Quits: kevingal (~quassel@149.157.105.172) (Ping timeout: 256 seconds)
[18:26:57] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[18:27:23] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[18:33:53] *** Joins: artchad (~user@public-gprs221196.centertel.pl)
[18:35:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:37:51] *** Joins: aeth (~aeth@user/aeth)
[18:40:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:40:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:42:20] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[18:42:48] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[18:44:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:50:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:51:05] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[18:52:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:57:27] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[18:59:07] *** Joins: domovod (~domovod@176.196.122.197)
[19:00:54] *** Joins: kevingal (~quassel@2001:770:c0:401:31d7:f824:9832:740a)
[19:04:33] *** Quits: Grauwolf (~grauwolf@user/grauwolf) (Quit: WeeChat 3.3)
[19:13:19] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 256 seconds)
[19:30:10] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: You have been kicked for being idle)
[19:31:15] <NotThatRPG> Xach: ping?
[19:33:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:34:17] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:37:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:47:13] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[19:47:47] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[19:51:09] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[19:52:07] <Xach> NotThatRPG: hello
[19:53:11] *** Joins: Guest7457 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:55:04] <NotThatRPG> Hi. I have a bugfix in the current main for ASDF, and I would like to test the topic branch against QL before merging. I'm afraid I've lost track of how to do that.
[19:55:50] <Xach> NotThatRPG: what does it mean to test against QL to you?
[19:56:33] <NotThatRPG> I was thinking of whatever you do. Do you just build everything, or do you also run `test-operation` where it's available?
[19:57:22] <NotThatRPG> The problem is that there seems to be a mild bug in UIOP:DEFINE-PACKAGE, and it's hard for me to guess if it's something we need to be bug-compatible with
[19:57:40] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[19:58:12] <NotThatRPG> It seems like a simple oversight, and also something that would be hard to be depending on, but...
[19:58:14] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[19:58:34] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Quit: quit)
[19:58:42] <Xach> NotThatRPG: I can't really recommend doing what I do, as it requires a lot of manual setup (that should be, but is not, automated). but if it works for you, i can run the test in my system for you and report the results. i would have something to report later today.
[19:59:09] <NotThatRPG> Oh, that would be great. Should I give you the topic branch pointer for ASDF?
[19:59:53] <Xach> NotThatRPG: sure
[20:00:22] <Xach> NotThatRPG: if you wanted to test locally, the "qlmapper" project on github is probably a better option than what i do
[20:01:20] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[20:01:43] <NotThatRPG> I'll have a look at that, but I may not have the computational resources configured RN.  When I look at "checkout branch" on gitlab, they give me: `git checkout -b 'uiop-docstring' 'origin/uiop-docstring'` (after a fetch, of course) if you have an ASDF clone.
[20:11:43] *** Quits: Guest7457 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:12:45] <NotThatRPG> I'll try to be around all day, but might be better to send me an email when you are done. Meanwhile I will check our server and see if I can make qlmapper work there.
[20:12:54] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[20:13:05] *** Joins: Guest7471 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:13:46] *** Joins: alejandrozf (~user@190.191.153.68)
[20:13:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:14:33] <jackdaniel> NotThatRPG: cl-test-grid perhaps?
[20:15:34] <NotThatRPG> Now I have to go back to zooming all day long.
[20:15:39] <jackdaniel> that's what I use to compare ecl between releases (or between different build options)
[20:15:52] <NotThatRPG> @jackdaniel: I wasn't sure what the status of that was these days. Haven't used it in a long time
[20:15:53] <jackdaniel> https://github.com/cl-test-grid/cl-test-grid indespensible tool
[20:17:50] <NotThatRPG> @jackdaniel: Reading over the cl-test-grid docs, I'm not sure how I would submit a job for this, but I probably need to carefully read docs for the agent
[20:18:09] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[20:18:50] <jackdaniel> there are some examples too and avodonosov is very responsive and helpful; but sure, docs are probably the right thing to read
[20:20:30] <NotThatRPG> Looks like I would have to have a locally configured system able to run all the tests, and then I would have to push them to cl-test-grid so I could make a comparison.
[20:21:31] <jackdaniel> sounds about right, yes
[20:23:04] <NotThatRPG> Unfortunately, very likely something I can't get done right away because of pressure of paid work, but I will try.
[20:24:05] <NotThatRPG> Thought: it might be nice to have the CL foundation set up an agent runner. They might be able to do the tests with the commercial lisps like Allegro and LispWorks on their end and post results to the grid, since they wouldn't have to expose their license secrets.
[20:24:06] <jackdaniel> afair files run-agent.sh.sample and run-agent.sample.lisp are self-descriptive enough to start from there
[20:26:54] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[20:31:06] *** Joins: Catie (~user@user/catie)
[20:32:05] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:35:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:37:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:42:28] <jackdaniel> phantomics: congrats for the new release of april
[20:42:54] <phantomics> Thanks jackdaniel
[20:43:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:43:25] <Josh_2> phantomics: Does April make use of compiler macros?
[20:44:13] <phantomics> Josh_2: yes, very many
[20:44:43] <phantomics> jackdaniel: any update on acos? Heard you've been sick, hope you're better now
[20:45:27] <jackdaniel> yes, I still need to stay at home , but I've brought my workstation here. I'm feeling much better now, thanks
[20:45:40] <Bike> glad to hear it
[20:45:45] <phantomics> Good news
[20:45:51] <jackdaniel> :)
[20:46:23] <jackdaniel> re acos, was that about complex float results and signed 0?
[20:46:49] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[20:46:56] *** Joins: Oladon (~olad@98.43.81.226)
[20:47:15] <jackdaniel> if so, then Marius argues that what we do is in fact /more/ consistent -- see https://gitlab.com/embeddable-common-lisp/ecl/-/merge_requests/266
[20:48:51] <jackdaniel> (and I'm OK with this rationale, the only remarks I had were about documentation, I still need to re-review it)
[20:51:31] <phantomics> In my case, I was just giving it (acos 2), I guess the +0.0i part is inferred
[20:52:23] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[20:52:39] <jackdaniel> yes, that is the case
[20:52:45] <phantomics> The other thing is that your fallback function works in the opposite way, which can be confusing
[20:53:24] <jackdaniel> yes, I believe that the pull request fixes that inconsistency (in favor of the declared behavior)
[20:56:04] <phantomics> Ok, I suppose the rationale of following C99 makes sense for ECL. Unfortunate that languages can't agree on a standard. One of my questions about branch cuts in Dyalog APL actually resulted in a Usenet response from the guy who wrote the paper suggesting that branch cut
[20:56:10] *** Joins: alejandr` (~user@190.191.153.68)
[20:56:44] <jackdaniel> I think that common lisp is more underspecified than disagreeing on that subject
[20:57:35] *** Quits: attila_lendvai (~alendvai@catv-176-63-14-84.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[20:57:37] *** Quits: alejandrozf (~user@190.191.153.68) (Ping timeout: 240 seconds)
[20:58:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:58:33] <phantomics> The only other thing to resolve ECL and ABCL is (rationalize), I'll see if I can get in touch with Bruno Haible about his algo from SBCL
[20:59:38] <jackdaniel> right, I don't think that we've did anything about that yet
[20:59:52] <jackdaniel> (or, to be more precise, I'm not aware of such doing)
[21:00:44] <jackdaniel> but but, I need to catch up with other things too, see you later :) congrats again
[21:00:47] <phantomics> Having rationalize is necessary for complex floor, leading to GCD/LCM of complex numbers
[21:01:00] <phantomics> Appreciate it, glad you're on the mend
[21:02:12] <phantomics> Btw, April now includes a fun ncurses demo application using croatoan which demonstrates the use of convolution kernels for computer graphics, it's in the april/demos/ncurses directory
[21:02:44] <phoe> phantomics: is there a video of it available and/or recordable? asking for YouTube purposes
[21:03:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:03:09] <phantomics> I could record one
[21:03:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:03:47] <phoe> please do! (I'll accept a brief explanation of what's happening under the hood for an OLM video too :D)
[21:05:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:06:20] <phantomics> What's your channel?
[21:07:08] <phoe> https://www.youtube.com/c/OnlineLispMeetings
[21:07:21] <phoe> there's a playlist with all OLM videos so far
[21:07:22] <jkordani> etimmons: thanks!
[21:07:36] <jkordani> :phoe are you talking about making a new CLR book?  or the website
[21:07:43] <phoe> jkordani: the book
[21:07:48] <phoe> or rather, a new edition of it
[21:07:54] <jkordani> sweet!
[21:08:06] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[21:08:31] *** Quits: alejandr` (~user@190.191.153.68) (Quit: ERC (IRC client for Emacs 28.0.50))
[21:09:52] *** Joins: ldb (~user@user/ldb)
[21:15:41] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:18:51] <Guest7471> I'm trying to settle on a config format for window-manager workspaces.  any thoughts on https://pastebin.com/09y1TAJH
[21:19:01] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:19:50] <Guest7471> First element is name of the workspace followed by keyword parameters that match the structure.
[21:20:58] <Guest7471> maybe :windows should be :classes?  As it goes by ewmh class and window names can be different?
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:55] *** Joins: ns12 (~ns12@user/ns12)
[21:31:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:32:50] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fa:4cc7:8c47:5652:a14e:1810)
[21:34:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[21:35:47] *** Joins: amb007 (~a_bakic@175.15.23.93.rev.sfr.net)
[21:35:49] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:7936:8c47:5652:a14e:1810) (Ping timeout: 250 seconds)
[21:44:51] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[21:49:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[21:53:35] *** Quits: amb007 (~a_bakic@175.15.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:54:32] *** Joins: amb007 (~a_bakic@99.151.22.93.rev.sfr.net)
[21:55:10] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[21:59:13] *** Joins: rgherdt (~rgherdt@2a01:598:d03d:7413:d93:cf16:2283:cb2a)
[22:06:06] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1af:727c:924c:f30e:7ba8:4c4c)
[22:06:31] <_73> Do you guys have personal libraries where you store your own macros, etc and if so how do you deal with integrating your personal library into your projects?
[22:07:16] <Guest7471> same was everything, prefix with package name or local package name.
[22:07:26] <Guest7471> s/was/way as/
[22:08:37] *** Quits: rgherdt (~rgherdt@2a01:598:d03d:7413:d93:cf16:2283:cb2a) (Ping timeout: 240 seconds)
[22:08:44] <_73> what do you call the library?
[22:09:00] <jackdaniel> _73: if they are not available in published libraries I put them in a file utilities.lisp
[22:09:09] <Guest7471> usually use a nickame of u:
[22:09:31] <Guest7471> library is myname-utils.
[22:09:49] <Catie> I do the same as jackdaniel, add them piecemeal to the project as I start using them
[22:09:55] <_73> jackdaniel: And you publish this file to github so other people can still build your project?
[22:10:01] <Guest7471> or what jd: said, especially if i'm using 1 or 2 things.
[22:10:04] <jackdaniel> yes, that file is part of the project
[22:10:41] *** Quits: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:11:07] *** Joins: rgherdt__ (~rgherdt@tmo-084-1.customers.d1-online.com)
[22:11:25] <_73> ah so you don't put it in its own repository but rather each project has its own utilities.lisp file
[22:11:51] <jackdaniel> exactly
[22:12:13] <Guest7471> i tend to not like that for things that get read a lot or are not obvious.  reading code without package prefixes is horrible for me.
[22:12:22] *** Joins: silasfox (~sbv@p4fe8d839.dip0.t-ipconnect.de)
[22:12:54] <_73> That makes sense because different projects will need different utilities and you can easily just copy paste ones from old projects when they make sense. Thanks.
[22:13:05] <jackdaniel> sure
[22:13:14] *** Joins: rgherdt (~rgherdt@2a01:598:b1b0:a856:30ff:e601:11c2:7c67)
[22:13:37] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1af:727c:924c:f30e:7ba8:4c4c) (Ping timeout: 240 seconds)
[22:16:15] *** Quits: rgherdt__ (~rgherdt@tmo-084-1.customers.d1-online.com) (Ping timeout: 256 seconds)
[22:16:16] *** Joins: rgherdt_ (~rgherdt@tmo-117-2.customers.d1-online.com)
[22:18:05] <Xach> one option is to take over maintenance of a really popular project and then make it depend on your personal utilities. then your utilities will be everywhere.
[22:18:07] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:c639:772d:26a5:3189:a1)
[22:18:37] *** Quits: rgherdt (~rgherdt@2a01:598:b1b0:a856:30ff:e601:11c2:7c67) (Ping timeout: 256 seconds)
[22:21:55] *** Quits: rgherdt_ (~rgherdt@tmo-117-2.customers.d1-online.com) (Ping timeout: 256 seconds)
[22:23:03] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:c639:772d:26a5:3189:a1) (Ping timeout: 250 seconds)
[22:25:02] *** Quits: kevingal (~quassel@2001:770:c0:401:31d7:f824:9832:740a) (Remote host closed the connection)
[22:27:23] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fa:4cc7:8c47:5652:a14e:1810) (Ping timeout: 250 seconds)
[22:30:14] <Fare> I plead guilty to kind of doing that with ASDF and UIOP.
[22:30:15] *** Quits: amb007 (~a_bakic@99.151.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:31:47] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:35:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:37:15] <Fare> (except that UIOP didn't exist beforehand but grew strictly out of functions needed by ASDF itself, except for a couple like delete-directory-tree that were only needed by ASDF's test system but were general purpose and completed the functionality to supersede CL-FAD)
[22:37:33] *** Quits: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[22:39:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:41:29] <dlowe> UIOP was fine except for the name :p
[22:42:23] <dlowe> I do feel like it filled a valuable hole, and ASDF needed that stuff anyway
[22:42:26] <jackdaniel> good it is not BNM, ; the comma would be problematic
[22:44:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:44:35] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[22:48:13] <Guest7471> i think JKL; would be more consistent.
[22:50:05] <Fare> I am French, so it'd be JKLM. AZERTY!!!
[22:51:09] <Guest7471> interesting.  'French' keyboards here are still pretty much qwerty.
[22:51:34] <Guest7471> here being Quebec.
[22:54:32] <Fare> That means the language police still has more work to do.
[22:55:33] <Catie> GCRL for the Dvorak users in the audience
[22:58:51] <Guest7471> offtopic but language police is the stupidest idea ever.  Having a decent french education would do more to protect the language, but french education is subpar to any english schooling in the province. Those who attend english school usually speak better french than anybody educated in french schools.
[23:03:57] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[23:04:59] *** Joins: gaqwas (~john@dynamic-095-115-083-146.95.115.pool.telefonica.de)
[23:06:59] *** Joins: ebrasca (~user@librepanther.com)
[23:07:21] *** Quits: Guest7471 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:07:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:14:17] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[23:17:11] *** Quits: gaqwas (~john@dynamic-095-115-083-146.95.115.pool.telefonica.de) (Remote host closed the connection)
[23:25:57] *** Quits: silasfox (~sbv@p4fe8d839.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:26:16] <jackdaniel> Xach: do you happen to know why bknr-datastore is on sharplispers? I see newer commits in the repository https://github.com/hanshuebner/bknr-datastore
[23:36:09] *** Joins: jeosol (~jeosol@user/jeosol)
[23:41:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:53:43] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[23:54:03] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
