[00:23:20] <FromDiscord> <Phil> @tracy  recall how I wanted to point out to keep in mind when code runs at compile time and when at runtime?
[00:23:38] <FromDiscord> <Phil> Variable assignment has one of those things
[00:24:31] <FromDiscord> <Phil> let = variable assignment at runtime but variable is immutable ↵var = variable assignment at runtime, but variable is mutable↵const = variable assignment at compile time (which means no CPU cycles will be wasted assigning a value to this variable, it'll exist like that in the binary)
[00:24:48] <FromDiscord> <tracy> so can i write a const into the code or sm
[00:25:08] <FromDiscord> <Phil> Pretty much, keep in mind though that this also means you can't assign anything to a const var that isn't available at compile time
[00:25:27] <FromDiscord> <Phil> so you can access e.g. type definitions no problems
[00:25:28] <FromDiscord> <Phil> (edit) "problems" => "problem"
[00:25:34] <FromDiscord> <tracy> In reply to @Isofruit "Pretty much, keep in": how would i add in "const settings = "test"
[00:25:34] <FromDiscord> <Phil> (edit) "problem" => "problem. Those are there at compile time"
[00:25:49] <FromDiscord> <Phil> Specific object instances are not available at compile time though
[00:25:52] <FromDiscord> <Phil> add in where?
[00:25:56] <FromDiscord> <tracy> the exe
[00:26:01] <FromDiscord> <tracy> wait what are we talking aobut
[00:27:09] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3QQH
[00:29:48] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3QQI
[00:30:53] <FromDiscord> <Phil> This is for elaborating on what using "const" means
[00:31:54] <FromDiscord> <Phil> Since enthus1ast wanted to point you towards using const buffers or whatnot
[00:32:05] <FromDiscord> <tracy> what
[00:32:05] <FromDiscord> <tracy> is
[00:32:06] <FromDiscord> <tracy> buffer
[00:32:07] <FromDiscord> <tracy> 😭
[00:33:19] <FromDiscord> <enthus1ast> const buffers for directly writing the configuration into the binary (withouth recompilation) i though that was the goal
[00:33:26] <FromDiscord> <tracy> yes it is
[00:33:27] <FromDiscord> <tracy> i just dont know
[00:33:28] <FromDiscord> <tracy> what a buffer is
[00:33:46] <FromDiscord> <enthus1ast> just a string or a array
[00:33:49] <FromDiscord> <Phil> That you can ask enthus1ast, never done file reading that way, I tend to use the bog standard solution:↵https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers#Reading-and-writing-files
[00:35:23] <FromDiscord> <Phil> A buffer is typically just something that temporarily stores something, amassing it until something is triggered and then acting on it all at once to make one big call rather than 50 small ones
[00:35:26] <FromDiscord> <Phil> e.g. writing a file
[00:35:49] <FromDiscord> <Phil> It makes more sense to first collect a bunch of text to write to disc and then hand all of it at once to the system to write into a file
[00:36:02] <FromDiscord> <Phil> Than it does making 500.000 individual requests for every single character
[00:36:37] <FromDiscord> <Phil> Buffer mechanisms are generally there to reduce the number of operations being made in a general sense
[00:36:59] <FromDiscord> <tracy> oh alr
[00:37:08] <FromDiscord> <Phil> Another scenario would be log messages
[00:37:57] <FromDiscord> <Phil> Where you can say "buffer me 100.000 log messages first before you send them all to my logging server"↵That way you make 1 big request towards your logging server rather than 100.000 individual ones
[00:38:05] <FromDiscord> <Phil> (edit) "server"↵That" => "server for storage"↵That"
[00:39:02] <FromDiscord> <Phil> Triggering a buffer to do its thing in the context of writing to disc is often referred to as flushing the buffer to disc
[00:39:16] <FromDiscord> <Phil> (edit) "Triggering a buffer to do its thing ... in" 03added "and send all of its contained data away"
[00:55:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[01:19:34] <FromDiscord> <tracy> how i convert int64 to itn
[01:19:35] <FromDiscord> <tracy> int
[01:20:51] <nrds> <06Prestige99> let i: int = (int) someInt64Variable
[01:21:01] <FromDiscord> <tracy> In reply to @nrds "<Prestige> let i: int": whats prestige
[01:21:08] <nrds> <06Prestige99> That's me
[01:21:11] <FromDiscord> <tracy> oh mb
[01:21:12] <FromDiscord> <tracy> 😭
[01:21:17] <nrds> <06Prestige99> haha np
[01:24:04] <FromDiscord> <b4mbus> how do I determine if given Nim's data structures are thread safe or not?
[01:24:06] <nrds> <06Prestige99> also you don't need the parentheses, I just do that out of habit
[01:24:35] <FromDiscord> <b4mbus> For example I have my own ErrorQueue, internally it uses a HeapQueue and I dont know if I should lock on every push operation or if the HeapQueue already does that
[01:24:41] <FromDiscord> <b4mbus> docs dont give any info
[01:24:51] <FromDiscord> <ynfle> In reply to @b4mbus "For example I have": Is it global?
[01:25:11] <FromDiscord> <b4mbus> In reply to @ynfle "Is it global?": is what global?
[01:25:19] <FromDiscord> <ynfle> In reply to @b4mbus "is what global?": The queue
[01:25:24] <FromDiscord> <ynfle> Is it a global variable?
[01:25:47] <FromDiscord> <b4mbus> if you mean the one of type ErrorQueue, not quite, it's a part of a bigger Application type, but yes, it's shared across different thread
[01:26:01] <FromDiscord> <b4mbus> I mean, ErrorQueue is a part of an ErrorHandler which is a part of Application
[01:26:42] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3QQV
[01:27:22] <FromDiscord> <b4mbus> Im not sure if that's a Nim idiomatic way but that's how I would do that in C++ so that's how Im doing it in Nim
[01:27:43] <FromDiscord> <b4mbus> IM going to post the full code for CR anyway
[01:27:54] <FromDiscord> <b4mbus> for now Im just gonnna implement it with locks; we'll see later
[01:28:59] <FromDiscord> <tracy> how do i write at a certain position with file streams
[01:33:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:41:11] *** Joins: ltriant (~ltriant@118.102.122.246)
[01:45:57] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[01:48:09] <rockcavera> tracy https://nim-lang.org/docs/streams.html#setPosition%2CStream%2Cint
[01:49:20] *** Quits: kenran (~kenran@200116b82b2bf100d77c1a62a38a1f9a.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[02:10:31] <nrds> <06Prestige99> Is there any noticeable mistake with this c binding? https://i.imgur.com/lbgL5Bs.png
[02:11:26] <nrds> <06Prestige99> It seems like, when I'm running the code, that `zoom` is actually the x value and `zNear` is the y value
[02:13:36] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[02:21:58] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:38:22] <FromDiscord> <Elegantbeef> @ShalokShalom\: seems fine, though i'd use a single `type` block fo them all, and the more important thing is the PIP Expanse watching 😛
[02:39:21] <FromDiscord> <Elegantbeef> That seems fine prestige
[02:41:09] <FromDiscord> <Elegantbeef> Perhaps throw `{.packed.}` on it?
[02:42:47] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3QRj
[02:43:12] <FromDiscord> <Elegantbeef> `const defaultLoggingString = "[$levelname $date::$time]"`
[02:44:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:54:36] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "<@208199869301522432>\: seems fine, though": single type?
[02:55:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QRn
[02:58:54] <FromDiscord> <b4mbus> In reply to @Elegantbeef "`const defaultLoggingString = "[$levelname":  https://media.discordapp.net/attachments/371759389889003532/947274050294644766/unknown.png
[02:58:56] <FromDiscord> <b4mbus> not really?
[02:59:19] <FromDiscord> <b4mbus> but I guess it's bad design anyway I only use it in `newErrorHandler`
[02:59:23] <FromDiscord> <auxym> unindent it
[02:59:34] <FromDiscord> <auxym> it should not be part of the `type` block
[03:00:01] <FromDiscord> <b4mbus> so it's not possible to do what I want
[03:00:14] <FromDiscord> <b4mbus> I meant something like static class variables
[03:00:21] <FromDiscord> <Elegantbeef> No nim does not have default values for types
[03:00:24] <FromDiscord> <Elegantbeef> It defaults to `0`
[03:00:45] <FromDiscord> <Elegantbeef> You need to make constructors for the default behaviour
[03:01:35] <FromDiscord> <b4mbus> yeah
[03:01:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QRo
[03:01:53] <FromDiscord> <Elegantbeef> Which lets you do `ErrorHandler.defaultLoggingString`
[03:02:01] <FromDiscord> <b4mbus> that's a thing yeah
[03:02:03] <FromDiscord> <Elegantbeef> make it return a `static string` if you want aswell to get it to kick in at CT
[03:02:18] <FromDiscord> <b4mbus> how do you even know you can do `typedesc[ErrorHandler]` when Nim's docs don't mention shit about it
[03:02:24] <FromDiscord> <b4mbus> except `magic type blah`
[03:02:40] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#special-types-typedesc-t
[03:03:10] <FromDiscord> <b4mbus> oh?
[03:03:19] <FromDiscord> <b4mbus> manual vs docs
[03:03:23] <FromDiscord> <b4mbus> yeah right
[03:03:45] <FromDiscord> <b4mbus> sent a code paste, see https://paste.rs/GpY
[03:03:46] <FromDiscord> <b4mbus> (edit) "right" => "right, thanks"
[03:04:08] <FromDiscord> <Elegantbeef> You editted it so i cannot see it here, resend it 😛
[03:04:14] <FromDiscord> <b4mbus> sure
[03:04:39] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3QRq
[03:05:32] <FromDiscord> <Elegantbeef> Ah a sugar issue, uhhh one second
[03:05:46] <FromDiscord> <Elegantbeef> Dont use lambda/anonymous procs much so might take a me a minute to reason
[03:06:18] <FromDiscord> <b4mbus> (generally I resolved this issue differently because this approach was wrong on a couple levels, but I still wanna know what is wrong with this)
[03:07:11] <FromDiscord> <Elegantbeef> Generially i say use `applyit` over apply, but yea i'll see if i can make that work
[03:07:46] <FromDiscord> <Elegantbeef> Hmm i cannot get it to play even remotely nice
[03:09:36] <FromDiscord> <Elegantbeef> No clue if that works in your case
[03:09:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QRu
[03:10:32] <FromDiscord> <b4mbus> hmm?
[03:10:39] <FromDiscord> <b4mbus> why did u put `()` in there?
[03:10:54] <FromDiscord> <Elegantbeef> To make it know exactly what statement to use
[03:11:14] <FromDiscord> <b4mbus> okay so it's about how nim parses this
[03:11:25] <FromDiscord> <Elegantbeef> Well i didnt get the same error as you
[03:11:32] <FromDiscord> <Elegantbeef> So clearly i did something wrongish
[03:11:49] <FromDiscord> <b4mbus> oh, also
[03:11:55] <FromDiscord> <b4mbus> why do I have to specify the type here?
[03:12:14] <FromDiscord> <Elegantbeef> Like i said i dont use sugar, so i just guessed
[03:12:17] <FromDiscord> <b4mbus> nim doesnt even have generic lambdas?
[03:12:20] <FromDiscord> <b4mbus> okay, thanks anyway
[03:12:30] <FromDiscord> <Elegantbeef> generic lambdas dont make any sense imo
[03:12:52] <FromDiscord> <Elegantbeef> Firstly it's reversed type inference, secondly a specific type needs to be instantiated
[03:13:08] <FromDiscord> <Elegantbeef> Nim doesnt do reversed type inference
[03:13:16] <FromDiscord> <b4mbus> theyre nice, you dont always want to specify the type explicitly, especially if it doesnt matter or is inferable from an expression literally two characters later
[03:14:12] <FromDiscord> <Elegantbeef> Eh i generally stay away from anonymous procs, so no comment
[03:14:19] <FromDiscord> <b4mbus> ... also std/sugar shows examples of it working without specyfing the type
[03:14:30] <FromDiscord> <Elegantbeef> Well maybe i was wrong to add the type?
[03:14:38] <FromDiscord> <b4mbus> no, you were right
[03:14:41] <FromDiscord> <b4mbus> it doesnt compile without it
[03:15:10] <FromDiscord> <b4mbus> but I guess its because its a template
[03:15:17] <FromDiscord> <b4mbus> in C++ sich a thing wouldnt compile either
[03:15:22] <FromDiscord> <b4mbus> it would require lifting
[03:15:26] <FromDiscord> <Elegantbeef> It's not a template?
[03:15:28] <FromDiscord> <b4mbus> which is more work that simply specyfing the type
[03:15:31] <FromDiscord> <b4mbus> https://nim-lang.org/docs/sequtils.html#apply%2CopenArray%5BT%5D%2Cproc%28T%29_3
[03:15:38] <FromDiscord> <b4mbus> > proc apply[T](s: openArray[T]; op: proc (x: T) {.closure.}) {.inline,↵>     effectsOf: op.}
[03:15:39] <FromDiscord> <b4mbus> I mean, sorry
[03:15:41] <FromDiscord> <Elegantbeef> It's not a template
[03:15:42] <FromDiscord> <b4mbus> a generic
[03:15:47] <FromDiscord> <b4mbus> Nim has a different teminology
[03:15:47] <FromDiscord> <Elegantbeef> Ah
[03:16:07] <FromDiscord> <Elegantbeef> \~\~I'd argue more correct\~\~ 😛
[03:16:11] <FromDiscord> <b4mbus> (edit) "> proc apply[T](s: openArray[T]; op: proc (x: T) {.closure.}) {.inline,↵>     effectsOf: op.}" => "sent a code paste, see https://play.nim-lang.org/#ix=3QRv"
[03:16:29] <FromDiscord> <b4mbus> well yeah
[03:16:33] <FromDiscord> <huantian> maybe just use applyIt for now
[03:16:44] <FromDiscord> <Elegantbeef> Damn was just writing that `applyit` is just better
[03:16:49] <FromDiscord> <b4mbus> it took me some time to understand that templates in nim are not what templates in C++ are
[03:17:03] <FromDiscord> <b4mbus> hmm
[03:17:06] <FromDiscord> <b4mbus> yeah I see
[03:17:41] <FromDiscord> <Elegantbeef> Actually it doesnt work either it seems
[03:17:44] <FromDiscord> <b4mbus> Im not using it anyway, because as I stated before the apply thing was wrong anyway
[03:17:53] <FromDiscord> <b4mbus> But its still a valuable advice, thanksk
[03:17:56] <FromDiscord> <b4mbus> (edit) "thanksk" => "thanks"
[03:18:02] <FromDiscord> <Elegantbeef> Yea applyit expects a mutable collection
[03:18:18] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3QRx
[03:18:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/HUb
[03:18:54] <FromDiscord> <huantian> you might want map for what you're doing?
[03:19:16] <FromDiscord> <b4mbus> Ill repeat it third time ;d
[03:19:17] <FromDiscord> <b4mbus> Im not using it anyway, because as I stated before the apply thing was wrong anyway
[03:19:32] <FromDiscord> <b4mbus> (edit) "Im not using it anyway, because as I stated before the apply thing was wrong anyway ... " 03added "(Im not using apply or any similiar operation)"
[03:19:50] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3QRy
[03:20:14] <FromDiscord> <Elegantbeef> you might want to usue apply it 😜
[03:20:16] <FromDiscord> <Elegantbeef> So it's a really mess
[03:20:16] <FromDiscord> <Elegantbeef> real\
[03:20:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QRz
[03:20:24] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3QRA
[03:20:24] <FromDiscord> <b4mbus> thats how I do it now
[03:21:16] <FromDiscord> <Elegantbeef> That's quite a inefficient way of doing it
[03:21:37] <FromDiscord> <b4mbus> I dont know shit about Nim :P
[03:21:41] <FromDiscord> <Elegantbeef> Probably doesnt matter though
[03:21:47] <FromDiscord> <huantian> In reply to @Elegantbeef "Joke aside to use": you'd probably want to use a discard map so you don't have to do a dup
[03:21:47] <FromDiscord> <b4mbus> so if there's anything to change, yeah, please correct me
[03:21:51] <FromDiscord> <ynfle> In reply to @b4mbus "if you mean the": So the queue is a global variable? I don't think it's threadsafe for writes
[03:22:00] <FromDiscord> <huantian> In reply to @huantian "you'd probably want to": but honestly a for loop is just better in this case if you're not using the result
[03:22:33] <FromDiscord> <b4mbus> In reply to @ynfle "So the queue is": its not literally global, but it is supppsed to be shared accross threads, yes
[03:22:43] <FromDiscord> <b4mbus> I implemented it with locks
[03:23:00] <FromDiscord> <b4mbus> if the locks are reduntant because seq/HeapQueue is threadsafe already Ill just remove that later
[03:23:01] <FromDiscord> <ynfle> In reply to @b4mbus "its not literally global,": So how do you share it? You pass a ref?
[03:23:11] <FromDiscord> <ynfle> In reply to @b4mbus "if the locks are": I don't think it is
[03:23:21] <FromDiscord> <b4mbus> In reply to @ynfle "So how do you": I havent gotten to that part of the implementation yet
[03:23:23] <FromDiscord> <Elegantbeef> Well the way to do it more efficiently is to iterate over the string if you hit a `$` check if the following characters are the replacement characters and if so plop in the new string and carry on the string from the end of it
[03:23:27] <FromDiscord> <b4mbus> Im starting from the very bits of the app
[03:24:48] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3QRD
[03:25:34] <FromDiscord> <b4mbus> In reply to @Elegantbeef "Well the way to": oh actually, sorry
[03:25:44] <FromDiscord> <b4mbus> Ive pasted the wrong, old impl here, my bad
[03:26:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QRE
[03:26:04] <FromDiscord> <Elegantbeef> dont need parseutils i guess
[03:26:14] <FromDiscord> <Elegantbeef> Ah
[03:26:19] <FromDiscord> <b4mbus> sent a code paste, see https://paste.rs/nf1
[03:26:28] <FromDiscord> <b4mbus> this is the correct impl
[03:26:32] <FromDiscord> <b4mbus> and I guess I dont need dup here?
[03:26:52] <FromDiscord> <Elegantbeef> Ah still similar issue, multiple iterations, so if ever care about performance of this easy thing to tend to
[03:26:53] <FromDiscord> <b4mbus> sent a code paste, see https://paste.rs/2CG
[03:27:19] <FromDiscord> <Elegantbeef> Cause replace chained like that iterates the entire string mutliple times instead of once
[03:27:27] <FromDiscord> <b4mbus> hmm true
[03:27:29] <FromDiscord> <Elegantbeef> I was just commenting on a possible performance increase
[03:27:32] <FromDiscord> <huantian> or you can use multiReplace
[03:27:41] <FromDiscord> <b4mbus> great heavens
[03:27:43] <FromDiscord> <Elegantbeef> Oh right multi replace
[03:27:54] <FromDiscord> <Elegantbeef> Everyone forgets about multi replace
[03:28:00] <FromDiscord> <b4mbus> I was wondering why doesnt replace have any overload with an openArray or shi
[03:28:05] <FromDiscord> <b4mbus> Im going to check it out rn
[03:28:20] <FromDiscord> <Elegantbeef> I wonder does multiReplace store a set of the starting characters to optimize it?
[03:28:39] <FromDiscord> <Elegantbeef> It does!
[03:28:45] <FromDiscord> <Elegantbeef> So it's super efficient
[03:29:06] <FromDiscord> <b4mbus> oh not really
[03:29:11] <FromDiscord> <b4mbus> I cant really use multiReplace
[03:29:18] <FromDiscord> <Elegantbeef> Why not?
[03:29:21] <FromDiscord> <b4mbus> oh, no
[03:29:24] <FromDiscord> <b4mbus> sorry, my bad
[03:29:36] <FromDiscord> <b4mbus> it takes a string and a var array of tuples (original, replace)
[03:29:40] <FromDiscord> <Elegantbeef> Was going to say it's literally doing what you're doing just vastly more efficient
[03:29:40] <FromDiscord> <b4mbus> neeaaatt
[03:29:45] <FromDiscord> <ajusa> In reply to @ajusa "Any reason I could": figured out that error - it's because the type of `[]` is not possible to infer. How can I tell it that `[]` is of type `openArray[string, string]`? I tried a cast and that didn't work
[03:30:38] <FromDiscord> <Elegantbeef> make a second span that takes no arguments
[03:30:55] <FromDiscord> <Elegantbeef> or do `default(array[0, (string, string)]`
[03:31:37] <FromDiscord> <ajusa> thanks, default is what I was missing!
[03:31:55] <FromDiscord> <Elegantbeef> You can also do `array[0, (string, string)([])`
[03:32:06] <FromDiscord> <Elegantbeef> Or any other form fof that
[03:32:15] <FromDiscord> <ajusa> there's no way to give a default argument for an untyped parameter, right? I've got an overload for that, but curious if there's a way to remove the overload
[03:32:23] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3QRI
[03:32:33] <FromDiscord> <Elegantbeef> Yep nice and clean now
[03:32:49] <FromDiscord> <b4mbus> thanks a lot
[03:33:02] <FromDiscord> <b4mbus> now lets figure out how to use threads in this language :p
[03:34:23] <FromDiscord> <Elegantbeef> There are a bunch of different ways to do it 😀
[03:34:44] <FromDiscord> <b4mbus> probably, how would you do it?
[03:34:52] <FromDiscord> <Elegantbeef> No clue what you're writing
[03:36:16] <FromDiscord> <b4mbus> the default nim logger does not color the output so Im writing a very simple logger that does basically what `ConsoleLogger` does, but colors the ouput for `INFO`, `WARNING`, `ERROR` and `FATAL` like so https://media.discordapp.net/attachments/371759389889003532/947283454377197568/unknown.png
[03:36:44] <FromDiscord> <Elegantbeef> You have the standard lib's channels and basic threads, Weave, taskpools, and more 😀
[03:36:50] <FromDiscord> <b4mbus> this func is responsible for taking a format string and returning it BUT with an ansi color code prependend and asci color code that resets appended
[03:37:21] <FromDiscord> <Elegantbeef> So this is just for testing logger?
[03:37:33] <FromDiscord> <b4mbus> not sure wym by `testing logger`
[03:37:42] <FromDiscord> <Elegantbeef> Well why do you need threads
[03:37:54] <FromDiscord> <b4mbus> it's public only for testing purposes, but Itll be private finally
[03:38:03] <FromDiscord> <b4mbus> In reply to @Elegantbeef "Well why do you": not for the logger, for the whole app
[03:38:11] <FromDiscord> <Elegantbeef> And what's the app?
[03:39:32] <FromDiscord> <b4mbus> A discord bot, consisting of an error handler, a logger and a discord "service" (that part that actually registers commands, registers interaction callbacks etc)
[03:39:47] <FromDiscord> <b4mbus> the discord part uses threads itself for shards
[03:39:48] <FromDiscord> <Elegantbeef> Ok so then the basic Nim threads will probably be fine for you
[03:40:30] <FromDiscord> <b4mbus> yeah I guess so, but system/threads says "DONT IMPORT CUZ WE SAY SO", some articles online use `createThread` which errors on me, bla, bla
[03:40:43] <FromDiscord> <b4mbus> I was just testing a bit I havent gotten to the implementation phase where I actually use threads
[03:40:56] <FromDiscord> <Elegantbeef> `--threads:on`
[03:41:19] <FromDiscord> <b4mbus> .. yeah I actually did forgot to include that in my config file
[03:41:23] <FromDiscord> <Elegantbeef> Nim has threads disabled by default, which will change with 2.0
[03:41:54] <FromDiscord> <b4mbus> it doesnt follow ZOA?
[03:41:56] <FromDiscord> <Elegantbeef> The reason you dont import it is cause it's imported with that flag
[03:42:00] <FromDiscord> <b4mbus> (edit) "ZOA?" => "ZCA?"
[03:42:04] <FromDiscord> <Elegantbeef> ZOA?
[03:42:27] <FromDiscord> <b4mbus> ZCA, sorry, Zero Cost Abstraction - what you dont use you should not be paying for. I see no other reason to disable threads by default tbh
[03:42:37] <FromDiscord> <Elegantbeef> TLS
[03:42:42] <FromDiscord> <b4mbus> (edit) "be paying" => "pay"
[03:42:44] <FromDiscord> <b4mbus> TLS?
[03:43:13] <FromDiscord> <b4mbus> like the protocol?
[03:43:31] <FromDiscord> <Elegantbeef> thread local storage emulation has performance cost presently afaik,  but Nim 2.0 will have threads enabled by default
[03:44:14] <FromDiscord> <b4mbus> I see
[03:44:21] <FromDiscord> <b4mbus> makes sense then
[03:46:42] <FromDiscord> <ShalokShalom> I did a little program, that simply executes three command line binaries
[03:47:00] <FromDiscord> <ShalokShalom> when I compile it, it says: Error: expression expected, but found '[EOF]'
[03:47:26] <FromDiscord> <Elegantbeef> You have a procedure or statement that expects something
[03:47:28] <FromDiscord> <Elegantbeef> Show code
[03:49:43] <FromDiscord> <ShalokShalom> sent a code paste, see https://play.nim-lang.org/#ix=3QRS
[03:50:17] <FromDiscord> <Elegantbeef> No quotes
[03:50:28] <FromDiscord> <ShalokShalom> around?
[03:50:40] <FromDiscord> <Elegantbeef> the right hand of `exec`
[03:51:06] <FromDiscord> <Elegantbeef> What `exec` are you even using?
[03:51:41] <FromDiscord> <tracy> sent a code paste, see https://play.nim-lang.org/#ix=3QRT
[03:52:02] <FromDiscord> <ShalokShalom> thanks
[03:52:12] <FromDiscord> <tracy> np
[03:55:44] <FromDiscord> <Elegantbeef> forgot to mention `import os` 🙂
[03:58:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[04:07:19] <FromDiscord> <$ tracy> discord keep locking my accs bro
[04:08:03] <nrds> <06Prestige99> For phone numbers?
[04:09:29] <FromDiscord> <$ tracy> yh
[04:11:04] <FromDiscord> <Elegantbeef> Time to use something aside from discord 😛
[04:12:52] <FromDiscord> <ajusa> is there a way to have a template that has two overloads: one with a single argument of type string, and another with a single argument of type untyped? And use the first one if the type is string, and the second one if the type isn't?
[04:13:34] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3QS2
[04:14:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/PkQ
[04:15:08] <FromDiscord> <Elegantbeef> The issue here is the `openArray` you need your own
[04:15:50] <FromDiscord> <ajusa> what's wrong with the openarray? do I need a more concrete type?
[04:16:09] <FromDiscord> <Elegantbeef> Openarray is a runtime type that requires conversion so `untyped` is more exact
[04:17:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/CHe
[04:18:34] <FromDiscord> <ajusa> that's some wizardry right there. are there are options without concepts (just curious)
[04:19:07] <FromDiscord> <Elegantbeef> The concept is the best option, you'd otherwise need a way to say `array[auto, T]` which i dont think is valid
[04:26:08] <FromDiscord> <Rika> spooky concepts
[04:26:12] <FromDiscord> <Rika> im jokin
[04:28:31] *** Joins: ltriant (~ltriant@118.102.122.246)
[04:30:41] *** Quits: shalokshalom (~quassel@2a02:1748:dd5e:7f60:b5dc:871:61:d7) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:33:16] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 245 seconds)
[04:41:55] <FromDiscord> <Patitotective> how can i know if a variable is var, let or const?
[04:43:00] <FromDiscord> <Rika> from a macro?
[04:43:06] <FromDiscord> <Patitotective> nvm
[04:43:07] <FromDiscord> <Patitotective> hehe
[04:43:15] <FromDiscord> <Elegantbeef> It's a simple macro
[04:43:20] <FromDiscord> <Patitotective> how to modify a nested value from a table?
[04:43:32] <FromDiscord> <Patitotective> like, it was working when it wasn't nested 🤷‍♂️
[04:43:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QS5
[04:43:52] <FromDiscord> <Elegantbeef> Jeez i messd that up
[04:43:57] <FromDiscord> <Rika> wasnt working as in how?
[04:44:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QS6
[04:44:33] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QS7
[04:45:14] <FromDiscord> <Patitotective> an i guess it's because it's not `var`
[04:45:17] <FromDiscord> <Rika> no?
[04:45:36] <FromDiscord> <Rika> whats the error
[04:46:46] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QS9
[04:47:13] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3QS9" => "https://paste.rs/MZY"
[04:47:25] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3QSb" => "https://paste.rs/alf"
[04:48:38] <FromDiscord> <Rika> is the `prefs` variable a var
[04:48:44] <FromDiscord> <Rika> it might be a var thing now yes
[04:48:51] <FromDiscord> <Patitotective> yep `var prefs = initPrefs(defaultPrefs, "settings.niprefs")`
[04:49:16] <FromDiscord> <Rika> what are the procs you have for `[]` for the prefsnode type
[04:50:11] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QSd
[04:50:12] <FromDiscord> <Elegantbeef> `(prefs.table["scheme"]["font"]["size"]) = 20.toPrefs`?
[04:50:58] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QSe
[04:51:03] <FromDiscord> <Rika> In reply to @Elegantbeef "`(prefs.table["scheme"]["font"]["size"]) = 20.toPre": requires a `[]` that returns a var T
[04:51:14] <FromDiscord> <Rika> same with the first error
[04:51:16] <FromDiscord> <Elegantbeef> return var
[04:52:29] <FromDiscord> <Patitotective> In reply to @Elegantbeef "return var": do you mean that i should make the `[]` procedures return a var?
[04:52:33] <FromDiscord> <Patitotective> (edit) "var?" => "var type?"
[04:53:36] <FromDiscord> <Rika> yes
[04:53:52] <FromDiscord> <Rika> if one of the types are also var, that is
[04:53:56] <FromDiscord> <Elegantbeef> well i mean make them return var if the node is var
[04:54:08] <FromDiscord> <Rika> example here https://nim-lang.org/docs/tables.html#%5B%5D%2COrderedTable%5BA%2CB%5D%2CA_2
[04:54:12] <FromDiscord> <Patitotective> In reply to @Elegantbeef "well i mean make": oh, that makes sense
[04:54:44] <FromDiscord> <Elegantbeef> Yea you dont have a var accessor
[04:54:44] <FromDiscord> <Elegantbeef> you need two `[]` procs one for var and one for non varf
[04:54:56] <FromDiscord> <Elegantbeef> It's semi-annoying but it's what's required for mutable/immutable types
[04:55:28] <FromDiscord> <Patitotective> thank you guys ❤️ i ll try it tomorrow :D
[05:27:09] <nrds> <06Prestige99> Hm yeah I think something is up with these bindings @ElegantBeef - scratching my head still
[05:28:42] <FromDiscord> <Elegantbeef> Yea i didnt see an issue there, so do not know
[06:39:38] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[06:46:25] <FromDiscord> <ajusa> is there an easy way to print out the nim code after templates have expanded?
[06:47:06] <FromDiscord> <Elegantbeef> `--expandMacro: name` or `macros.expandmacros`
[06:50:19] <FromDiscord> <ajusa> that almost does what I want - I want to see code right before C codegen happens, as with expandMacros I can see a bunch of unused templates that I don't want to see
[06:50:42] <FromDiscord> <Elegantbeef> what about `--expandMacro`?
[06:54:36] <FromDiscord> <ajusa> that works, thanks!
[06:56:14] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:56:41] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:56:48] <FromDiscord> <Pandasdontfly> would anybody reccomend the nim in action book
[06:58:05] <FromDiscord> <Elegantbeef> A fair bit of people read it and like it, I've never read it
[07:00:16] *** Joins: ltriant (~ltriant@118.102.122.246)
[07:01:50] <FromDiscord> <Rika> I bought it but I never read it in depth but I still think it’s a good resource
[07:03:04] <FromDiscord> <Elegantbeef> I'm too dumb to read so i've never got it
[07:04:00] <FromDiscord> <Elegantbeef> I have read parts stefan salewski's  and it is pretty good https://ssalewski.de/nimprogramming.html
[07:14:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:21:16] <FromDiscord> <abdu> sent a long message, see http://ix.io/3QSH
[07:21:41] <FromDiscord> <abdu> (edit) "http://ix.io/3QSH" => "http://ix.io/3QSI"
[07:23:09] <FromDiscord> <huantian> You can’t hold on to an openArray like that iirc
[07:23:28] <FromDiscord> <Elegantbeef> Openarray is only for parameters presently
[07:23:55] <FromDiscord> <Elegantbeef> It's an abstraction over `seq[T] or array[any, T]` to allow any indexed array and sequence to go through the same procedure
[07:24:13] <FromDiscord> <abdu> Ok
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:05] <FromDiscord> <sheldon> How to clean nimble test cached files?
[07:38:39] <FromDiscord> <sheldon> or is it the same to forceBuild when nimble test
[07:40:26] <FromDiscord> <Elegantbeef> Nimble doesnt handle the cache of the files so a force build will work
[07:41:31] <FromDiscord> <demotomohiro> @abdu https://nim-lang.org/docs/system.html#toOpenArray%2Ccstring%2Cint%2Cint
[07:42:28] <FromDiscord> <sheldon> How to make nimble test force build 😅
[07:42:51] <FromDiscord> <Elegantbeef> does `nimble test -f` work?
[07:54:01] <FromDiscord> <sheldon> I think it should work
[07:54:43] <FromDiscord> <sheldon> I'm trying with https://github.com/marcomq/nimview
[08:04:16] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[08:21:02] <FromDiscord> <sheldon> Playing with Flutter recently, seems nimview targets the same goal.
[08:44:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:58:45] <FromDiscord> <Bung> experimental strictEffects is in nim 1.4 ? I got `/home/runner/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/hseq_distance.nim(1, 17) Error: unknown experimental feature↵` am runing on nim 1.4.8
[08:59:18] <FromDiscord> <Elegantbeef> Wasnt it added in 1.6 ?
[08:59:57] <FromDiscord> <Rika> Experiments aren’t back ported no?
[09:00:05] <FromDiscord> <Elegantbeef> They are not
[09:02:10] <FromDiscord> <Bung> oh, thanks ! I think I create a issue to @haxscramper
[09:02:53] <FromDiscord> <haxscramper> What experimental feature is this
[09:03:54] <FromDiscord> <Bung> strictEffects
[09:04:50] <FromDiscord> <haxscramper> Nim 1.4.8 is not supported
[09:04:56] <FromDiscord> <Bung> https://github.com/haxscramper/hmisc/issues/10 I create one
[09:05:13] <FromDiscord> <haxscramper> Hmisc only supports latest nim
[09:05:49] <FromDiscord> <Bung> requires "nim >= 1.4.8" should change
[09:05:52] <FromDiscord> <Rika> In reply to @haxscramper "Nim 1.4.8 is not": The nimble dependency file says otherwise i think
[09:06:39] <FromDiscord> <haxscramper> Ok, I will update that
[09:10:42] <FromDiscord> <Bung> please also update version
[09:26:46] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:25:11] <FromDiscord> <Bung> https://github.com/bung87/scorper/runs/5348802366?check_suite_focus=true I got `Did you mean to use 'quiet'? (silent -> quiet)` when run `slim --silent test` on macosx and linux , slim is my nimble package before, now it becoming other binary I think ?
[11:03:33] <FromDiscord> <haxscramper> it seems like someone actually uses my failed message suggestion generator
[11:03:37] <FromDiscord> <haxscramper> I'm surprised
[11:05:00] <FromDiscord> <haxscramper> In reply to @Bung "please also update version": done
[11:30:42] <FromDiscord> <Bung> In reply to @haxscramper "I'm surprised": hmm, I searched hmisc source maybe it wrongly parse nimble arguments
[11:31:22] <FromDiscord> <haxscramper> I parse nimble arguments somewhere?
[11:32:59] <FromDiscord> <Bung> stringMismatchMessage(/algo/clformat.nim) ->  other/hargparse.nim or other/cliparse.nim
[11:35:45] <FromDiscord> <haxscramper> this is a general CLI parser
[11:57:48] <FromDiscord> <Bung> I tred to find will it calls , havn't found yet, theres only silent in slim and nimble source, I dont know why it suggest quiet
[11:58:06] <FromDiscord> <Bung> (edit) "will" => "where"
[12:00:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[12:01:04] *** Joins: ltriant (~ltriant@118.102.122.246)
[12:06:09] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[12:35:41] <FromDiscord> <⎝⪩﹏⪨⎠> Yay, the parser is able to at least sum two numbers :) https://media.discordapp.net/attachments/371759389889003532/947419203315589150/unknown.png
[12:37:36] <FromDiscord> <Rika> In reply to @⎝⪩﹏⪨⎠ "Yay, the parser is": “Nim?”
[12:38:08] <FromDiscord> <⎝⪩﹏⪨⎠> In reply to @Rika "“Nim?”": Because I wasn't sure if I wanted to learn Nim in that time.
[12:38:19] <FromDiscord> <Rika> No it’s funny lmao
[12:38:34] <FromDiscord> <Rika> It kinda reads like you don’t know if the code is Nim or not lol
[12:38:39] <FromDiscord> <Bung> https://github.com/haxscramper/hnimast/blob/e62725ae033d4c832f0e2106c634c87a4351b259/src/hnimast/hast_common.nim#L859  @haxscramper where is noneOfIt importing from ?
[12:39:02] <FromDiscord> <⎝⪩﹏⪨⎠> And still, I don't know if keep learning it or stick with Lua and C++ (although, I think I'll keep with Nim).
[12:39:41] <FromDiscord> <Rika> Your choice, dunno what’s keeping you from choosing
[12:40:58] <FromDiscord> <⎝⪩﹏⪨⎠> In reply to @Rika "Your choice, dunno what’s": C++: too complex for me (at least, the libraries)↵Lua: lack of documentations for some libraries and not compiled↵Nim: lack of good tutorials
[12:43:36] <FromDiscord> <haxscramper> In reply to @Bung "https://github.com/haxscramper/hnimast/blob/e62725a": https://github.com/haxscramper/hmisc/search?q=noneOfIt github has search
[12:43:37] <FromDiscord> <haxscramper> you can use it
[12:44:36] <FromDiscord> <haxscramper> what exactly do you use hmisc for?
[12:47:02] <FromDiscord> <haxscramper> and I will be moving to nimskull in the future anyway, so you might want to consider looking for the alternatives
[12:47:56] <FromDiscord> <Bung> https://github.com/bung87/slim I try to update
[12:48:56] <FromDiscord> <Bung> but seems hnimast and hmisc breaking
[12:49:32] <FromDiscord> <haxscramper> hnimast already uses nimskull
[12:49:55] <FromDiscord> <haxscramper> I think I should just take all my repos from nimble
[12:50:21] <FromDiscord> <haxscramper> because I don't think I'm really fit for supporting the libraries myself, so
[12:50:34] <FromDiscord> <haxscramper> to not give people unnecessary  expectations
[12:55:15] <FromDiscord> <haxscramper> so you can just copy everything you need directly (I'm pretty sure you don't use every single part of the library)
[12:56:43] <FromDiscord> <Bung> yeah, I think so , I may use my fork version , I only use small part of your libraries
[13:09:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:45:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[14:10:57] <NimEventer> New thread by Mardiyah: To prompt one character input only, see https://forum.nim-lang.org/t/8961
[14:52:20] *** Joins: ltriant (~ltriant@118.102.122.246)
[14:57:50] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[14:59:32] <FromDiscord> <ShalokShalom> In reply to @⎝⪩﹏⪨⎠ "C++: too complex for": Oh yeah 🙄
[15:00:58] <FromDiscord> <ShalokShalom> I have never seen a software project with such comprehensive, but still useless documentation. No offense, it just seems the docs got largely generated by a computer, and somebody thinks this is all that is useful. Particular to newbies, I consider the docs virtually not in existence. Sadly.
[15:03:35] <FromDiscord> <Rika> In reply to @ShalokShalom "I have never seen": Lua?
[15:35:26] *** Joins: shalokshalom (~quassel@2a02:1748:dd5e:7f60:b5dc:871:61:d7)
[15:35:37] <FromDiscord> <ShalokShalom> No, Nim
[15:35:53] <FromDiscord> <abdu> Try to get one character input... just like in Bash read -n1 ?
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:12] <FromDiscord> <abdu> (edit) "read -n1" => "`read -n1`"
[15:36:27] <FromDiscord> <ShalokShalom> idk about Lua. But it seems so simply, I could live with less documentation there.
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] <FromDiscord> <ShalokShalom> (edit) "simply," => "simple,"
[15:37:00] <FromDiscord> <Rika> The docs to me have been largely helpful but I don’t know I’m a strange fellow I imagine
[15:38:07] <FromDiscord> <haxscramper> "nim doc has received many improvements over the years"
[15:43:29] <FromDiscord> <ShalokShalom> Yeah, I dont think they are bad for experienced users.
[15:45:39] <FromDiscord> <enthus1ast> i also like the nim docs, not so bad as its reputation imho
[15:46:33] <FromDiscord> <ShalokShalom> How many people do you have, who are new to programming?
[15:46:54] <FromDiscord> <ShalokShalom> The language is simpler than Python, and has an equivalent lower amount of newbies.
[15:47:05] <FromDiscord> <ShalokShalom> I think thats a clear language towards its documentation.
[15:47:08] <FromDiscord> <enthus1ast> what could be nice, is some "php style" documentation, so auto create pages for every func proc etc, then allow users to add examples "wiki style"
[15:49:45] <FromDiscord> <exelotl> This is like the 1 thing that PHP does well xD
[15:57:30] <FromDiscord> <exelotl> I generally dislike Nim docs, whenever they're helpful it's usually in spite of their structure (e.g. when someone puts a little table at the top linking to the most commonly used functions) - they really need the ability to group related symbols under custom headings
[16:01:43] <FromDiscord> <planetis> something like the index?
[16:04:41] <FromDiscord> <enthus1ast> documentation generation
[16:06:49] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/447
[16:07:00] <FromDiscord> <haxscramper> there is an RFC
[16:08:47] <FromDiscord> <enthus1ast> ok so it's not THAT easy currently
[16:09:15] <FromDiscord> <haxscramper> docgen is easy if you come to it with the right approach
[16:10:11] <FromDiscord> <haxscramper> at least my experience in writing and then re-writing analyser part clearly shown it can be greatly simplified if you thing the design from start to end instead of piling up global mutable state with weird hacks for a decade
[16:10:31] <FromDiscord> <enthus1ast> yes i see your effort in nimskull
[16:12:24] <FromDiscord> <haxscramper> This is a proof-of-concept implementation right now
[16:12:57] <FromDiscord> <haxscramper> and I actually would prefer docgen to be a tool that uses compiler API
[16:13:02] <FromDiscord> <haxscramper> instead of a built-in compiler feature
[16:13:30] <FromDiscord> <enthus1ast> yes it would be much more approachable for non compiler devs
[16:13:36] <FromDiscord> <enthus1ast> (like me)
[16:14:42] <FromDiscord> <haxscramper> speaking of, since this is a POC I should probably use your templating engine to generate everything
[16:16:17] <FromDiscord> <haxscramper> or at least that's how the whole design should be structured - `docgen -> intermediate.sqlite -> website`
[16:16:31] <FromDiscord> <enthus1ast> yes
[16:17:01] <FromDiscord> <enthus1ast> maybe not even sqlite, its quite an heavy dependency
[16:17:06] <FromDiscord> <haxscramper> and people who know how to actually make decent-looking html/websites don't have to be burdened with learning whole compiler internals
[16:17:24] <FromDiscord> <haxscramper> it is very convenient for the data model I came up with
[16:18:01] <FromDiscord> <haxscramper> and since it is shipped in the stdlib by default I think it is quite reasonable "weight"-wise
[16:24:09] <FromDiscord> <enthus1ast> yes if its a robust choice then why not
[16:52:36] <FromDiscord> <enthus1ast> can i test in a template, if the sourrounding block is an iterator or a normal proc (that has result)
[16:53:12] <FromDiscord> <enthus1ast> my template should yield if the surrounding is an iterator, but result.add when the sourrounding is a proc
[17:04:03] <FromDiscord> <enthus1ast> ok this seems to work\:↵↵when compiles(result.add body)
[17:04:37] <FromDiscord> <enthus1ast> and in the else block, i just yield
[17:05:06] <FromDiscord> <enthus1ast> its not the best but works, any better ideas are welcome \:)
[17:11:25] <FromDiscord> <ShalokShalom> In reply to @enthus1ast "what could be nice,": I would think more about a tutorial, that explains step by step "how-to-program" simply programs, like an editor, command-line program and so on...
[17:12:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:17:11] <FromDiscord> <auxym> Nim in Action sort of does that, starts with a chat app using async and http, etc
[17:19:07] <perro> very practical
[17:19:47] <perro> dom did a  good job with that
[17:22:00] <FromDiscord> <enthus1ast> also this\:   https://ssalewski.de/nimprogramming.html
[17:26:45] <FromDiscord> <haxscramper> https://nim-lang.org/documentation.html
[17:26:45] <FromDiscord> <haxscramper> https://xmonader.github.io/nimdays/book_intro.html↵(@ShalokShalom)
[17:41:50] <FromDiscord> <ShalokShalom> thanks a lot
[17:42:06] <FromDiscord> <ShalokShalom> In reply to @auxym "Nim in Action sort": isnt that already pretty outdated?
[17:47:31] <Amun-Ra> I have a template problem, what am I doing wrong here? https://play.nim-lang.org/#ix=3QUG
[17:49:21] <NimEventer> New question by itil memek cantik: Nim must be able to get one character input just like in Bash, see https://stackoverflow.com/questions/71285476/nim-must-be-able-to-get-one-character-input-just-like-in-bash
[17:54:24] *** Joins: pro (~pro@user/pro)
[17:57:51] *** Joins: arkurious (~arkurious@user/arkurious)
[18:16:38] *** Joins: ltriant (~ltriant@118.102.122.246)
[18:21:46] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[18:24:40] *** Joins: rockcavera (~rc@user/rockcavera)
[19:00:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:07:51] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:18:00] *** Joins: evilkhaoskat (~evilkhaos@37.214.82.40)
[19:22:51] *** Quits: evilkhaoskat (~evilkhaos@37.214.82.40) (Client Quit)
[19:27:22] <FromDiscord> <auxym> In reply to @ShalokShalom "isnt that already pretty": So parts, most of it I think not. Araq has committed to not breaking anything in the book in nim v1.x
[19:32:56] <shalokshalom> hnn
[19:47:16] <FromDiscord> <System64 ~ Flandre Scarlet> https://github.com/WohlSoft/SDL-Mixer-X↵Is there a Nim module for that please?
[20:06:07] <FromDiscord> <auxym> you could write a wrapper for it. Or base yourself on https://github.com/nim-lang/sdl2
[20:07:23] *** Quits: pro (~pro@user/pro) (Quit: pro)
[20:10:43] *** Joins: jjido (~Denis@94.4.149.217)
[20:16:32] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright, thanks
[20:57:25] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:23:44] <FromDiscord> <dom96> In reply to @perro "dom did a ": Thanks 🙂
[22:04:23] <NimEventer> New thread by Haoliang: Cstring has different behavior in different MM mode, see https://forum.nim-lang.org/t/8962
[22:09:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[22:18:13] *** Joins: ltriant (~ltriant@118.102.122.246)
[22:22:48] <FromDiscord> <chancy> sent a code paste, see https://play.nim-lang.org/#ix=3QW7
[22:23:42] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[22:30:19] <FromDiscord> <haxscramper> https://ssalewski.de/nimprogramming.html is on the HN front page
[22:38:39] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[22:43:27] <FromDiscord> <Phil> Question
[22:43:41] <FromDiscord> <Phil> I don't understand why anyone stores json in databases
[22:43:55] <FromDiscord> <Phil> (edit) "databases" => "databases. So why?"
[22:45:21] <FromDiscord> <Phil> (edit) "I don't understand why anyone stores json in ... databases." 03added "relational"
[22:46:17] <FromDiscord> <ynfle> In reply to @Isofruit "I don't understand why": Why not?
[22:49:31] <FromDiscord> <Phil> In reply to @ynfle "Why not?": I means a lot more hassle. ↵To directly interact with it via SQL it needs special new functionality and it makes parsing more complicated than having a traditional table setup. But yet, e.g. the Sqlite authors took it upon themselves to implement new functions in sqlite that allow you to interact and manipulate that json. So there has to be some usecase/benefit to it, I just don't get what that's supposed t
[22:55:51] <FromDiscord> <chancy> In reply to @Isofruit "I means a lot": I'd say "laziness", in the programming sense, would be one case. If you may not know or care about the entire schema from some other source and you need to shove the data somewhere temporarily without having an entirely orthogonal storage system.
[22:56:01] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[22:56:49] <FromDiscord> <ajusa> it can be more performant for certain access patterns to dump a json string into a field than to do the whole sql table + join
[23:00:17] <FromDiscord> <chancy> In reply to @chancy "What's the appropriate way": using a regular `object` instead of `ref object` seems to work for me here.
[23:13:41] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[23:52:41] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QWv
[23:54:22] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3QWy
