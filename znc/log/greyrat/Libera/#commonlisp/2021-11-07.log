[00:01:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:01:29] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:03:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:05:10] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[00:14:25] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:15:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:16:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:20:32] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:20:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:23:39] *** Joins: Guest71 (~Guest71@240e:306:3081:8093:f4e5:9aeb:8ae3:c0b0)
[00:24:34] *** Quits: Guest71 (~Guest71@240e:306:3081:8093:f4e5:9aeb:8ae3:c0b0) (Client Quit)
[00:27:03] *** Quits: BonnieT100 (BonnieT100@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[00:31:38] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:31:52] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:32:47] *** Quits: cyberbanjo (~user@2607:fb90:42be:b3b0:e0fe:3da7:5a78:9773) (Ping timeout: 264 seconds)
[00:35:08] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:35:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:38:51] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:45:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:46:24] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Quit: Using Circe, the loveliest of all IRC clients)
[00:48:54] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[00:57:53] *** Quits: Catie (~user@user/catie) (Ping timeout: 256 seconds)
[01:04:09] *** Joins: Catie (~user@user/catie)
[01:04:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:05:50] *** Quits: dra (~dra@2a04:4540:6404:4700:e5a4:edb7:ca89:e1bc) (Remote host closed the connection)
[01:12:40] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[01:16:40] *** Joins: Devon7 (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[01:17:38] *** Joins: BonnieT100 (BonnieT100@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[01:18:23] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[01:21:07] *** Quits: Devon7 (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[01:22:23] *** Joins: nature (~nature@45.32.235.173)
[01:24:49] <_death> been optimizing today.. gotta brag about Lisp making zero allocation code possible https://gist.github.com/death/9b9914c76866d32c7dc15c55cc05b526
[01:27:30] *** Joins: Devon7 (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[01:31:39] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[01:32:14] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[01:35:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[01:36:21] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Ping timeout: 245 seconds)
[01:37:26] *** Joins: taiju (~taiju@83.213.49.163.rev.vmobile.jp)
[01:37:44] *** Quits: taiju (~taiju@83.213.49.163.rev.vmobile.jp) (Read error: Connection reset by peer)
[01:38:46] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[01:49:05] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[01:49:06] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[01:49:29] *** Joins: minion (~minion@common-lisp.net)
[01:49:29] *** Joins: specbot (~specbot@common-lisp.net)
[01:53:43] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:55:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:57:31] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:57:58] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 260 seconds)
[02:00:38] *** Joins: Oladon (~olad@98.43.81.226)
[02:11:27] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:11:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:12:08] *** Quits: Devon7 (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:13:08] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:13:31] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:14:10] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[02:15:42] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[02:16:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:16:27] <mfiano> Nice
[02:17:04] *** Quits: pve (~pve@37-33-42-214.bb.dnainternet.fi) (Quit: leaving)
[02:18:56] <mfiano> I've been thinking of getting back into coding CL after a few months of reading books/papers.
[02:20:01] *** Quits: cosimone (~user@93-47-229-157.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:20:07] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[02:21:06] <mfiano> One reason I needed a break from coding, is designing a rendering system general enough for the things I want to visualize is incredibly difficult/time consuming. I'd like to save some time and use something like McCLIM, but that has more than a few rough edges, and I don't think it'd be great for animations anyway.
[02:21:13] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[02:22:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:24:27] <mfiano> I'm not sure what I should do yet. I am desperately trying not to be a heretic and port stuff over to Racket which has a super simple cross-platform graphics/animation system builtin.
[02:26:31] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[02:36:23] *** Joins: anddam (~anddam@user/anddam)
[02:39:02] *** Quits: totoro (~totoro@user/totoro) (Ping timeout: 260 seconds)
[02:39:59] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 264 seconds)
[02:41:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:da94:668f:b78c:97b1) (Remote host closed the connection)
[02:41:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:d6e1:9cdb:c2c:75e6)
[02:53:43] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[02:55:51] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[02:57:26] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[02:58:19] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[03:12:09] <jcowan> You could port CL to Racket instead.
[03:15:34] <hayley> Would that fix the toplevel situation?
[03:16:37] <mfiano> Ah yeah, the toplevel situation :/
[03:17:02] *** Quits: Jing (~textual@2604:a840:3::10f2) (Remote host closed the connection)
[03:18:06] *** Joins: Jing (~textual@2604:a840:3::10f2)
[03:20:47] *** Quits: gaqwas (~john@dynamic-077-007-078-143.77.7.pool.telefonica.de) (Ping timeout: 264 seconds)
[03:22:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[03:22:56] <jcowan> probabbly a CL-Racket bridge would be simpler
[03:23:21] *** Joins: guthur (~guthur@149.167.145.129)
[03:26:43] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[03:29:23] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[03:29:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:30:18] *** Joins: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10)
[03:34:05] *** Quits: taiju (~taiju@2400:4153:ea04:3b00:2cdc:1f32:d88a:fa10) (Read error: Connection reset by peer)
[03:36:42] *** Joins: taiju (~taiju@p7223054-ipoefx.ipoe.ocn.ne.jp)
[03:38:40] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:41:05] *** Quits: taiju (~taiju@p7223054-ipoefx.ipoe.ocn.ne.jp) (Ping timeout: 256 seconds)
[03:41:36] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[03:42:13] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 256 seconds)
[03:46:06] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[03:48:37] <mfiano> Heh, it seems McCLIM doesn't even build anymore.
[03:49:14] <mfiano> It depends on some SLIME system expecting a swank package, even when loaded from terminal repl or Sly
[03:53:23] *** Joins: horar (~horar@2001:4454:417:a700:95b1:1e4f:1f2d:5609)
[03:54:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:55:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:55:53] *** Lord_of_Life_ is now known as Lord_of_Life
[03:56:59] *** Quits: horar (~horar@2001:4454:417:a700:95b1:1e4f:1f2d:5609) (Client Quit)
[03:57:06] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:57:58] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:59:21] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:59:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:12:52] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:14:30] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[04:16:18] <yodudd> can anyone see this?
[04:16:46] <hayley> No.
[04:17:25] <yodudd> Good
[04:19:03] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[04:19:27] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[04:21:37] <random-nick> mcclim builds fine for me (from quicklisp)
[04:25:50] <mfiano> Probably because you have that read-time dependency
[04:40:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:41:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:42:27] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:42:45] <random-nick> I think it's something on your end, because I just tried it with a fresh quicklisp in a fake home directory and it quickloaded without any errors
[04:50:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:54:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[04:55:44] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:55:48] *** Quits: BonnieT100 (BonnieT100@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Remote host closed the connection)
[05:02:34] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4) (Remote host closed the connection)
[05:09:41] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 245 seconds)
[05:13:26] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[05:23:49] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:29:19] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 256 seconds)
[05:30:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:31:14] <Guest74> mfiano: what kind of things are you looking for in a graphics/animation package?
[05:32:28] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[05:32:53] <Guest74> I'm thinking I need an animation schedular, that handles animations for the whole system.
[05:34:42] <Guest74> currently I just launch individual threads for each animation, which is just made generating the animation through templates, i.e. backquote forms.
[05:37:45] <Guest74> I tried using my stuff to visualize your code but your fn to generate output didn't seem to be giving me the correct sized array for the first pass and then it kept hanging on the second pass.
[05:39:52] <Guest74> I think I should probably clean up my surface/draw/vector-graphic/raster/image protocols since it seems to be something that keeps coming up.
[05:41:16] <Guest74> and maybe reuse cl-svg to render svg.
[05:42:54] <Guest74> I just wish I had a lisp only way to turn off screen updates on the console.  The framebuffer stuff is usable but a bit annoying when emacs repaints parts of the screen.
[05:45:16] <Guest74> it's not really that slow either, here's some turtle graphics on the console. https://www.youtube.com/watch?v=KXOhVNbECDc
[06:06:56] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:09:03] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[06:09:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:d6e1:9cdb:c2c:75e6) (Ping timeout: 245 seconds)
[06:12:38] <copec> You have n layers of nested hash-table's, for instance n=2: (gethash key1 hash-table1) => hash-table2 and (gethash key2 hash-table2) => end object; Can you iterate over all the end objects using LOOP, without knowing n ahead of time?
[06:14:39] *** Joins: s-liao (~s-liao@101.86.103.113)
[06:14:49] <copec> I used a recursive algorithm with function calls, it just got me thinking. I can see generating a function with n nested loops and then funcall'ing it, and memozing the function for each n
[06:21:05] <Guest74> Wouldn't you have to know N beforehand because you know the keys?
[06:25:33] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:44:07] <copec> Oh sorry, I mean writing something that iterates over all the end objects
[06:44:07] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[07:02:52] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[07:05:56] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:13:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:14:47] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:15:00] *** Joins: Oladon (~olad@98.43.81.226)
[07:17:11] *** Quits: vats (~vats@180.149.226.109) (Ping timeout: 264 seconds)
[07:20:01] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[07:20:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:21:34] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[07:24:21] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 256 seconds)
[07:30:32] <beach> Good morning everyone!
[07:30:48] <lisp123> Good morning!
[07:32:21] <yodudd> Hello
[07:33:01] <beach> yodudd: Are you new here?  I don't recognize your nick.
[07:37:29] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:50:14] *** Joins: ym (~ym@217.107.106.229)
[07:50:53] *** Joins: semz (~none@user/semz)
[07:53:40] *** Quits: guthur (~guthur@149.167.145.129) (Quit: Client closed)
[07:54:41] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:55:07] <lisp123> TIL: The word "mixin" comes from Steve's Ice Cream, a favorite ice cream shop of MIT students located in Somerville, Mass., in the late '70s. Steve's made its own (very rich) ice cream in a motorized old-fashioned ice cream maker in the window of the shop. Sometimes the line for an ice cream cone was out the door and down the block! You would order a cone or dish, and specify the base flavor and any mixins you wanted.
[07:56:52] <beach> Right, and that's also why we use "vanilla" to mean something basic, like "vanilla Linux".
[07:57:50] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:58:24] <lisp123> That's interesting - thanks
[07:58:57] <beach> Sure.
[08:00:11] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[08:20:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:21:17] <Nilby> When all the ice cream shops in Boston started doing mixins everybody's ice cream became highly customized. Also Lisp OO stuff before CLOS was called Flavors.
[08:22:00] <yodudd> Yes I'm new here beach
[08:26:47] <yodudd> thomaslewis sent me over here
[08:27:19] <holycow> lisp123_win: have you plaged with CLOG yet?  just curious if you have any thought.
[08:33:42] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[08:35:04] <beach> yodudd: Welcome!
[08:35:14] <beach> yodudd: Are you new to Common Lisp?
[08:36:01] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:37:39] *** Joins: Alfr (~Alfr@user/alfr)
[08:42:08] *** Joins: Everything (~Everythin@37.115.210.35)
[08:43:47] <yodudd> Yup, never used it
[08:45:40] <beach> Feel free to ask questions.  If they become numerous and truly trivial, you may get redirected to #clschool.
[08:52:11] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 245 seconds)
[08:52:14] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[08:55:11] *** Quits: ym (~ym@217.107.106.229) (Ping timeout: 268 seconds)
[08:55:11] <yodudd> Okay thanks!
[09:09:27] *** Joins: ebrasca (~user@librepanther.com)
[09:17:36] *** Parts: lisp123_win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[09:21:34] <beach> yodudd: Have you programmed in other languages before?
[09:23:52] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:29:14] *** Joins: lisp123w (~user@80.227.170.170)
[09:29:45] <lisp123w> holycow: No, I hadn't heard of that until now. But I had a look and it looks pretty cool! Will definitely check it out when I start some GUI work
[09:29:54] <lisp123w> Have you started using it?
[09:30:05] <holycow> a bit here and there
[09:30:31] <holycow> i remember seeing your web tests on reddit
[09:30:41] <lisp123w> Nilby: Yes, thought of you when I saw that post :) To think the most powerful object oriented system came from a love of ice cream ;)
[09:30:42] <holycow> would be interesting to see what you think of clog
[09:31:52] <lisp123w> Will let you know! Web GUI / Apps fit CL like a hand in a glove ;)
[09:32:20] <lisp123w> Nilby: Did you ever frequent that shop?
[09:36:23] <Nilby> Yes. It was pretty good. I like CLOS mixin's too, but I never got the hang of Flavors.
[09:39:28] <Nilby> But stealth mixins in non-CLOS ice cream aren't usually so good. There's also the "make a sundae" example in CLHS.
[09:43:17] <lisp123w> Great - will check it out! I just did my first mixin today (not tested)
[09:46:01] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[09:47:18] *** Joins: s-liao (~s-liao@101.86.103.113)
[09:49:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[09:56:14] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[09:56:24] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[09:58:49] *** Joins: johnjay (~pi@192.142.100.50)
[10:05:38] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[10:08:17] *** Joins: johnjay (~pi@192.142.100.50)
[10:13:50] <White_Flame> beach: yeah, and it's funny when you learn that vanilla is the second most expensive spice in the world, next to saffron
[10:14:10] <White_Flame> so vanilla really should be some sort of compliment :)
[10:21:16] <beach> Good point.
[10:37:32] *** Joins: guthur (~guthur@149.167.145.129)
[10:38:40] <yodudd> No not really beach. I have edited code in other languages, and made games with scratch 2.
[10:41:06] <beach> I see.  Then you have an advantage over others when it comes to learning Common Lisp. :)
[10:41:59] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:43:43] *** Quits: dre (~dre@2001:8003:c932:c301:c7a0:423f:5a6a:50c7) (Ping timeout: 268 seconds)
[10:53:53] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:58:14] *** Quits: Lycurgus (~juan@98.4.112.204) (Client Quit)
[10:59:15] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[11:09:29] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:14:33] *** Joins: pve (~pve@188-67-143-84.bb.dnainternet.fi)
[11:20:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:22:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:28:12] <yodudd> Lol, good to know that :-)
[11:28:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[11:32:11] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[11:36:00] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[11:36:26] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[11:46:55] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4)
[11:55:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:58:01] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 245 seconds)
[11:58:06] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[12:00:05] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:06:21] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[12:08:24] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:11:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:13:55] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[12:15:44] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:21:17] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[12:23:03] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:23:39] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:26:07] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:26:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[12:27:24] *** Lord_of_Life_ is now known as Lord_of_Life
[12:29:41] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[12:32:25] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[12:33:26] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[12:33:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:35:22] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:35:29] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:01] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[12:38:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:19] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4) (Remote host closed the connection)
[12:43:46] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[12:45:46] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[12:53:10] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[12:55:05] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[13:08:19] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[13:10:33] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[13:24:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[13:25:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[13:30:34] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[13:33:01] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[13:34:34] *** Joins: cosimone (~user@93-47-231-203.ip115.fastwebnet.it)
[13:36:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:37:39] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[13:38:05] *** Joins: dre (~dre@2001:8003:c932:c301:a34d:66ac:4577:d0c)
[13:43:35] *** Quits: pve (~pve@188-67-143-84.bb.dnainternet.fi) (Ping timeout: 264 seconds)
[13:45:20] *** Joins: pve (~pve@37-136-97-160.rev.dnainternet.fi)
[14:05:54] *** Quits: dre (~dre@2001:8003:c932:c301:a34d:66ac:4577:d0c) (Ping timeout: 260 seconds)
[14:07:18] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[14:08:50] *** Joins: Nselm (~Nselm@p200300d56f36767abc11a97d0f0c6784.dip0.t-ipconnect.de)
[14:09:09] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[14:14:37] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[14:16:28] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[14:23:33] <Jing> I'm quite new to Emacs and found that Ivy is recommended with Emacs. Would it conflict with, say, Sly and some other Lisp related packages?
[14:24:11] <Jing> I meant Ivy, counsel, and swiper
[14:24:31] *** Joins: s-liao (~s-liao@101.86.103.113)
[14:26:33] <contrapunctus> Jing: not at all. It enhances some completion mechanisms, and you can turn them off if you don't like them.
[14:27:07] <Jing> Thank you, contrapunctus. I was worried that its key-bindings may cause conflict...
[14:27:52] *** Joins: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[14:32:28] <jackdaniel> welcome to the emacs game: first to configure to their satisfaction wins
[14:32:50] <jackdaniel> the most promising contender plays 23y and has 20kloc of configuration, but we don't know when they'll reach satisfaction
[14:35:13] *** Quits: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Remote host closed the connection)
[14:36:12] *** Joins: random-nick (~random-ni@87.116.176.55)
[14:37:13] *** Joins: MumblyFoo (~Cherrybar@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[14:39:07] *** Joins: paule32 (~paule32@user/paule32)
[14:40:27] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[14:42:22] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[14:44:17] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[14:59:00] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Remote host closed the connection)
[14:59:53] <Jing> I try to keep it simple :)
[15:03:12] * shka can't get no satisfaction
[15:03:18] *** Joins: utis (~utis@vpn-client105.uio.no)
[15:11:11] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[15:11:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:12:23] <jackdaniel> and we don't need no education
[15:26:12] <hayley> We don't need no CONS control...
[15:26:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:41:20] *** Joins: pjb (~pjb@user/pjb)
[15:43:09] *** Quits: Nselm (~Nselm@p200300d56f36767abc11a97d0f0c6784.dip0.t-ipconnect.de) (Quit: Client closed)
[15:47:11] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[15:59:22] *** Joins: ogamita (~ogamita@2a01cb040b1ae100f812c9c00bfe384e.ipv6.abo.wanadoo.fr)
[16:00:32] *** Quits: guthur (~guthur@149.167.145.129) (Quit: Client closed)
[16:01:49] *** Quits: ogamita (~ogamita@2a01cb040b1ae100f812c9c00bfe384e.ipv6.abo.wanadoo.fr) (Client Quit)
[16:04:33] *** Joins: ogamita (~pjb@2a01cb040b1ae100f812c9c00bfe384e.ipv6.abo.wanadoo.fr)
[16:04:47] *** Joins: ldb (~user@user/ldb)
[16:05:14] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[16:05:51] *** Joins: ldb (~user@user/ldb)
[16:07:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[16:10:58] *** ogamita is now known as Guest2347
[16:11:20] <pve> The Emacs game is a bit like Nethack. First you fight your way to the deepest levels of hell and then all the way back up. And if you did everything exactly right, you get to ascend to the heavens :)
[16:11:59] *** Joins: pjb (~pjb@user/pjb)
[16:12:25] *** Quits: Guest2347 (~pjb@2a01cb040b1ae100f812c9c00bfe384e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:13:01] <ldb> and emacs crashes when I use tls to connect irc :D
[16:14:22] *** pjb is now known as Guest641
[16:14:39] *** Joins: pjb (~pjb@user/pjb)
[16:17:10] <jackdaniel> emacs exploits both the stockholm syndrome and the sunk cost syndrome at the same time
[16:17:54] <Guest74> possible diffusion of responsibility.
[16:17:58] *** Quits: Guest641 (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:18:41] *** Joins: McParen (~mcp@user/mcparen)
[16:18:46] <Guest74> s/possible/possibly/
[16:18:49] <Guest74> as well
[16:23:31] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:24:50] *** Joins: Nselm (~Nselm@p200300d56f36767a7833d135788b5191.dip0.t-ipconnect.de)
[16:30:27] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[16:38:36] *** Joins: pjb (~pjb@user/pjb)
[16:46:20] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:47:59] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Remote host closed the connection)
[16:48:11] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[16:49:46] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Remote host closed the connection)
[16:50:57] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[16:54:04] <edgar-rft> ldb: tls detected emacs as a security risk and killed it
[16:54:22] *** Joins: ym (~ym@217.107.106.229)
[17:04:14] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Remote host closed the connection)
[17:04:29] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:06:29] <Guest74> I've written some basic documentation that i'm hoping to get some feedback on. I'm not quite sure what is expected. This package is meant to be mainly used by frontend implementors.
[17:06:32] <Guest74> https://github.com/JMC-design/nsane/blob/master/documentation.lisp
[17:06:33] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[17:07:19] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[17:08:26] <beach> I would be more consistent with upper/lower case.
[17:08:42] <Guest74> yes, where is it expected?
[17:08:46] <Guest74> or is that now passe
[17:09:01] <beach> I think when you write "a sane network daemon", you probably mean "a SANE network daemon", no?
[17:09:04] <mfiano> You should be using ~@ for end of line docstrings in this case.
[17:09:05] <beach> The two are very different.
[17:09:27] <beach> And Common Lisp is spelled with a capital C and a capital L.
[17:09:32] <Guest74> yes, hopefully, it does have both quality.
[17:10:38] <Guest74> I like the idea of capitalized function names in docstrings, but what about function args?
[17:10:57] <Guest74> mfiano: for all the docstrings? or the package one?
[17:11:18] <mfiano> For any time you align the next line to a different column other than 0
[17:11:29] <mfiano> Which seems to be everywhere.
[17:12:17] <Guest74> what's the difference?  It seems to work as is.  first time doing it.
[17:12:42] <Guest74> is there an emacs binding to change case?
[17:13:43] <jackdaniel> if I can suggest something - the system should be named insane :-)
[17:13:57] <Guest74> that'll be the name of my frontend
[17:14:00] <jackdaniel> (based on my experience with scanners)
[17:14:01] <jackdaniel> ah!
[17:14:35] <Guest74> yes, it did drive me quite mad.
[17:14:53] <Guest74> took me 4 days just to get the scanner served by sane.
[17:16:00] <Guest74> pushed the suggested fixes.
[17:22:56] <Guest74> No, i think i definitely want ~ . I prefer to leave formatting of docstrings to your documentation viewer.  Was useful to learn about ~@ though.
[17:23:09] *** Quits: Nselm (~Nselm@p200300d56f36767a7833d135788b5191.dip0.t-ipconnect.de) (Quit: Client closed)
[17:26:27] *** Joins: nature (~nature@45.32.235.173)
[17:32:58] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:38:06] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[17:42:35] <Guest74> are there any good tutorials on compiler macros?
[17:43:17] <Guest74> Is it possible to use them to replace calls to generic functions?
[17:43:43] <beach> Sure.
[17:44:43] <Guest74> is it sufficient to have declarations of the object type at the call site to 'activate' the compiler macro?
[17:45:23] <beach> Er, what?
[17:45:52] <shka> little to do with types, actually
[17:45:54] <beach> The compiler macro, if invoked at all, is invoked on the call form, no matter what the function does.
[17:46:27] <Guest74> so what invokes it?  Or do you know of a good tutorial?
[17:46:28] <beach> But the standard says that a conforming implementation does not have to invoke compiler macros at all.
[17:46:47] <beach> The compiler invokes it, just as it invokes ordinary macro functions.
[17:48:39] <beach> There is nothing special with compiler macros.  They work almost like ordinary macros.  They take a form an produce another form.  They return the original form to indicate that it declined to do anything.
[17:49:22] <beach> Guest74: Why do you feel you need a compiler macro?
[17:50:00] <shka> that is actually a very good question
[17:50:08] <beach> They can be a bit tricky to do right, especially if the callee has keyword arguments.
[17:50:15] <shka> because compiler macros have a very limited use case
[17:50:28] <beach> s/has/takes/  or s/arguments/parameters/
[17:50:59] <Guest74> I have this protocol for adding tags to objects and I use it in some graphics operations where it takes substantially longer than just  doing something like getf.
[17:51:19] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[17:51:33] *** Joins: ldb (~user@user/ldb)
[17:52:12] <Guest74> for getting things like backbuffers, contexts, etc...
[17:52:46] <beach> It's a bit strange to have a protocol generic function and then stick a compiler macro to it.  Then, it wold seems that client code would no longer be able to put auxiliary methods on those functions and expect them to work as advertised.
[17:52:57] <shka> Guest74: this does not sound like a compiler macro use case
[17:53:46] <beach> *would seem
[17:53:54] * beach can't type today for some reason. 
[17:54:00] <shka> maybe you want to share your code, we can figure why it is going slow
[17:54:06] <shka> also, use profiler
[17:54:13] <shka> profile is your help
[17:54:17] <Guest74> ok, so it would affect additional methods, but wouldn't it just not be invoked in that case.
[17:54:18] *** Joins: makomo (~makomo@user/makomo)
[17:54:32] <beach> "that case"?
[17:54:51] <Guest74> shka: I mention this because I have profiled it and I know that it is substantially slower.
[17:55:36] <Guest74> if you do not think a compiler macro would help what do you think would help?
[17:55:39] <beach> The compiler sees a function-call form (FOO ARG1 ARG2 ...) and if it is so inclined, it calls the compiler-macro function for FOO without checking whether it is generic, whether it has methods, or anything like that.
[17:55:49] <Guest74> I'd really an editor macro.
[17:56:02] <Guest74> ah, i see
[17:56:07] <shka> well, there has to be the reason behind poor performance?
[17:56:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[17:56:50] <shka> compiler macros from my experience are most useful when you are trying to optimize for literal values
[17:56:54] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:57:33] <shka> and what you describe does not appear to be conducive toward that
[17:57:38] <beach> shka: You could use them to avoid keyword parsing or checking for optional arguments.
[17:57:41] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4)
[17:57:55] <shka> well... ok
[17:58:11] <Guest74> beach: that sounds interesting!
[17:58:27] <shka> those are not that costly... and sufficiently smart compiler could optimize that anyway (in the future)
[17:58:28] <beach> shka: Check the call site for optional and keyword arguments, and call a specialized function for the particular constellation of the call site.
[17:59:03] <beach> shka: Sure, my paper on call-site optimization shows how it can be done in a lot of such cases.
[17:59:10] <Guest74> well, I've got some vector graphic calls that can have a dozen or more keywords.
[17:59:20] <shka> yeah, that's what i meant ;)
[17:59:31] <beach> Heh, OK.
[18:00:06] <shka> Guest74: and sb-sprof (or anything else) clearly points to those as being the most costly calls?
[18:00:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:01:25] <beach> Guest74: That could be a problem for performance.  But I think you should check whether that is the case before spending a lot of effort.
[18:02:21] <shka> also
[18:02:29] <Guest74> yes, small things add up, especially if you're making millions of calls.
[18:02:31] <beach> Guest74: It is particularly tricky to do keyword arguments, because they still have to be evaluated left-to-right according to how they appear at the call site, and independently of the order of the arguments in your specialized function(s).
[18:02:52] <shka> would those tags be critical part of the application anyway?
[18:03:38] <Guest74> beach: do you know of any code that does so that I can read?
[18:03:51] *** Joins: Bike (~Bike@71.69.170.70)
[18:03:51] *** ChanServ sets mode: +o Bike
[18:04:34] <beach> Guest74: Let me check.  It is likely I deleted much of such code, given that call-site optimization according to my paper will make many compiler macros obsolete.
[18:04:59] <Guest74> yes, I can't wait for that!
[18:05:15] <Guest74> ever since i read your paper i've been drooling.
[18:05:39] <Bike> you want compiler macro code that deals with keywords correctly?
[18:06:00] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[18:06:14] *** Quits: X-Scale (~ARM@31.22.160.27) (Ping timeout: 260 seconds)
[18:07:04] <Guest74> yes, mainly for education.  Any compiler macro stuff would be appreciated.  I usually need plenty of examples.
[18:07:48] <Bike> i wrote https://github.com/clasp-developers/clasp/blob/main/src/lisp/kernel/clos/static-gfs/compiler-macros.lisp#L24-L56 for clasp. you'd have to switch out constantp and constant-form-value to be completely portable
[18:07:55] *** X-Scale` is now known as X-Scale
[18:08:21] <Bike> it takes the keyword portion of a function call and returns bindings and variable to use
[18:09:15] <Bike> like, you give it (:stream x :foo y) and it returns (:stream :foo) (#:stream1 #:foo1) ((#:stream1 x) (#:foo1 y)) t. the third value works as let* bindings
[18:09:24] <Bike> you will note that this is kind of annoying and complicated
[18:10:24] <beach> Yes, that's my recollection too.
[18:10:42] <beach> I think I deleted all compiler macros for functions with keyword parameters.
[18:10:57] <beach> ... in SICL, I mean.
[18:11:35] <Bike> you'd have to do some kind of processing like this with a call site manager too, wouldn't you?
[18:11:36] <Guest74> It does look complicated.
[18:12:06] <beach> Bike: Not really.  The call site manager receives the arguments already evaluated.
[18:12:48] <beach> Or, rather, it receives locations where those arguments are located, but they have already been evaluated in the order determined by the call site.
[18:13:25] <Bike> so it would receive all the arguments, including the keywords?
[18:13:50] <beach> No, not quite.
[18:14:07] <beach> The keywords would be associated with a description indicating that they are literals.
[18:14:41] <Bike> you'd need to process the arguments at compile time to know that, right?
[18:15:11] *** Joins: akoana (~ah@user/akoana)
[18:15:14] <beach> Not sure what you mean.
[18:15:22] <Guest74> so I'm guessing since you don't know what order a person uses the keywords or if all keywords are used this is where the difficulty comes in.
[18:16:03] <beach> Yes, the order is the problem.
[18:16:16] <Bike> well, i mean, so what's the call site manager doing, here? i figured the idea was you'd have a (foo :x w :z y) call, and you want it to end up doing (%foo y w), so it doesn't do all the expensive keyword argument processing at runtime
[18:16:32] <beach> Right.
[18:16:42] <beach> So the call-site manager does the argument parsing.
[18:17:06] <beach> The callee has an entry point where it needs the value of w and z.
[18:17:06] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[18:17:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[18:17:52] <beach> So the call-site manager identifies :x and :z as keywords, and it knows the places where w and y are expected by the callee.
[18:18:23] <beach> So it accesses the second argument location in the caller and puts it where the callee wants the value of :x etc.
[18:19:28] <Guest74> this certainly elucidates things. thanks beach: bike:
[18:19:44] <beach> Pleasure.
[18:20:04] <Guest74> also confirms I should work on other things first :)
[18:21:41] <beach> Guest74: The complication is this:  Say you have a function (defun f (&key x y)) and a specialized version of it (defun ff (x y) that takes only required parameters.
[18:22:04] <Bike> okay, so i mean, you'd need to have the compiler look at (foo :x w :z y) and go, okay, this is looks like a keyword arguments call, since :x and :z are literal. i should compile it to use a call site manager that can deal with those keywords. i'll just pass the call site two arguments, w and y, and it can do what it will. right?
[18:22:32] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:4d0f:6b02:d329:b5d2) (Ping timeout: 268 seconds)
[18:22:55] <beach> Guest74: Now you see (f :y <form1> :x <form2>), you can't turn that into (ff <form2> <form1>).  You need to do (let ((y <form1>) (x <form2>)) (ff x y)).
[18:23:09] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 268 seconds)
[18:23:22] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89e7:f55a:92fd:8abb)
[18:23:31] *** Joins: engblom (~foo@user/engblom)
[18:23:46] <Guest74> got it, makes sense.
[18:24:02] <engblom> In what situation do you prefer alist and when do you prefer plist?
[18:24:24] <beach> Bike: No, the compiler just emits a JUMP and there is an associated description that says first argument is a literal :x, second argument is to be found in <location>, third argument is the literal :z, fourth argument is to be found in <location>.
[18:26:25] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (Remote host closed the connection)
[18:29:35] <beach> engblom: A plist is preferable if you want to APPLY a function with keyword parameters to it.  And it is also what you have in your &REST parameter in a function that has keyword parameters.
[18:30:31] <Guest74> I certainly hope Shinmera get's that grant so he can hire someone to implement fast dispatch in sbcl.  While it would be nice to have all my generic graphic functions getting replaced by calls to the backend specific functions it sounds like a ton of work.
[18:31:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:31:06] <Bike> so the call site manager looks at that description and looks at the lambda list of the function and the entry point and works out what to pass
[18:31:14] <random-nick> a literal plist might also be easier to write than a literal alist
[18:31:28] <Shinmera> Hmm, unfortunately the grant only pays half of what we need to finish the game at all, without any extra spending on improving the ecosystem overall.
[18:31:39] <beach> Bike: Yes.
[18:31:51] *** Joins: igemnace (~ian@user/igemnace)
[18:32:01] <beach> Bike: Perhaps not the raw lambda list, but some description of it.
[18:32:26] <beach> Bike: Like the massaged one we have in Cleavir with only lexical variables.
[18:33:22] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[18:34:00] <Bike> right...
[18:35:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89e7:f55a:92fd:8abb) (Quit: Leaving)
[18:35:24] <beach> The calls-site manager can of course give up and just use the default entry point.
[18:36:09] <beach> Like if the function is (defun f (&key a b c d) ...) and the call is (f <form> <form> <form> <form> <form> <form> <form> <form> <form> )
[18:37:12] <beach> It could then either generate code to check whether odd arguments are keywords, or it can let the default entry point of f do the work.
[18:37:56] <beach> Such situations are not frequent, so it probably doesn't matter what it does.
[18:39:23] <beach> But the general idea is that the trampoline snippet is in charge of argument parsing.
[18:39:58] <engblom> beach: Then I will continue to use plists. I have never used alists and I was thinking if I do something wrong.
[18:40:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:fbbe:75e0:a944:53e0)
[18:40:22] <engblom> What would be a typical usage of alists?
[18:44:07] <Guest74> I don't know about typical, but I use them to store ui/wm layouts.
[18:44:32] <Bike> simple key value map
[18:45:38] <Bike> the difference between alists and plists probably isn't worth stressing over. neither of them is performant if you have a big map, and if you have a small map the differences shouldn't matter much regardless
[18:46:39] <Guest74> you can have multiple values mapped to a key without containing them in a list.
[18:47:06] <Guest74> that might not make sense.
[18:51:16] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:53:23] *** Joins: minu99 (~slimbook@2a0c:5a80:5105:2200:b146:6e43:1b03:4b20)
[19:01:06] *** minu99 is now known as slimbook
[19:02:44] *** slimbook is now known as minu99
[19:03:42] *** minu99 is now known as slimbook
[19:05:15] *** slimbook is now known as minu99
[19:06:18] <edgar-rft> engblom: alists were something like the predecessors of hashtables, they most often were used as key-value databases, in alists key-value pairs can be easier added and removed than in plists
[19:07:29] <engblom> Thanks
[19:12:15] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:13:23] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[19:14:00] <beach> engblom: What Bike said.  Alists can be used to implement a simple "dictionary" abstract data type, i.e., map keys to values.
[19:17:03] *** Quits: minu99 (~slimbook@2a0c:5a80:5105:2200:b146:6e43:1b03:4b20) (Quit: minu99)
[19:19:27] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[19:19:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:24:24] <jcowan> And alists are also the simplest possible persistent dictionaries.
[19:27:46] <jackdaniel> hurrey for alists
[19:28:37] *** Joins: kadir (~kadir@78.178.105.36)
[19:31:09] <jackdaniel> I've derived a separate internals note from command parsing for command parsing (still incomplete but allowed me to pinpoint a few more edge cases): https://gist.github.com/dkochmanski/afaab9bf890e7b27d68892a41c8604cc
[19:31:38] <jackdaniel> oups, that was meant for #clim
[19:51:18] *** Joins: minu99 (~minu99@2a0c:5a80:5105:2200:b146:6e43:1b03:4b20)
[19:53:17] *** Quits: minu99 (~minu99@2a0c:5a80:5105:2200:b146:6e43:1b03:4b20) (Client Quit)
[20:04:56] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[20:06:13] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:09:55] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[20:11:55] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:25:28] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Remote host closed the connection)
[20:25:58] *** Parts: McParen (~mcp@user/mcparen) ()
[20:26:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:fbbe:75e0:a944:53e0) (Remote host closed the connection)
[20:26:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[20:28:04] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 244 seconds)
[20:34:46] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[20:35:41] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Remote host closed the connection)
[20:57:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Read error: Connection reset by peer)
[21:00:17] <Guest74> Shinmera: didn't even see you comment.  Glad you at least got some grant money to help with your project.
[21:03:01] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[21:08:30] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:15:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:17:57] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:20:19] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Read error: Connection reset by peer)
[21:20:23] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:21:35] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Remote host closed the connection)
[21:23:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:33:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:38:19] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[21:39:24] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:44:06] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[21:54:05] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Remote host closed the connection)
[21:54:27] *** Joins: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[21:56:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:59:25] *** Joins: Oladon (~olad@98.43.81.226)
[22:00:59] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[22:06:36] *** Joins: tyson2 (~user@24.114.73.80)
[22:06:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:07:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:17:37] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[22:19:27] *** Joins: Bike (~Bike@71.69.170.70)
[22:19:27] *** ChanServ sets mode: +o Bike
[22:31:32] *** Quits: tyson2 (~user@24.114.73.80) (Remote host closed the connection)
[22:32:14] *** Joins: Jing_ (~textual@2604:a840:3::1033)
[22:35:06] *** Quits: Jing (~textual@2604:a840:3::10f2) (Ping timeout: 245 seconds)
[22:36:07] *** Quits: ym (~ym@217.107.106.229) (Ping timeout: 256 seconds)
[22:37:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Remote host closed the connection)
[22:38:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2315:e7f0:55c7:7d49)
[22:41:39] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361)
[22:42:31] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361) (Remote host closed the connection)
[22:42:58] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361)
[22:45:14] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2315:e7f0:55c7:7d49) (Ping timeout: 268 seconds)
[22:45:34] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:47:27] *** Joins: Nselm (~Nselm@p200300d56f3676fb51149a61e900cfaf.dip0.t-ipconnect.de)
[22:49:50] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[22:53:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:12:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[23:13:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:15:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:17:18] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 268 seconds)
[23:23:21] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:30:11] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:30:35] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:33:11] *** Quits: Nselm (~Nselm@p200300d56f3676fb51149a61e900cfaf.dip0.t-ipconnect.de) (Quit: Client closed)
[23:36:56] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:42:41] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:43:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:51:03] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:52:37] *** Quits: MumblyFoo (~Cherrybar@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
