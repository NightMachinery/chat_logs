[00:03:55] *** Joins: max22- (~maxime@2a01cb088335980095f5aa054085323a.ipv6.abo.wanadoo.fr)
[00:06:07] *** Quits: max22- (~maxime@2a01cb088335980095f5aa054085323a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:06:24] *** Joins: max22- (~maxime@2a01cb088335980066febfaec4664aa6.ipv6.abo.wanadoo.fr)
[00:21:00] <arkanoid> haxscramper, I'm finding quite a lot of difficulties in debugging code with compiler/ast
[00:21:31] <arkanoid> if gives zero hints in stacktrace where the problem happens
[00:23:19] <FromDiscord> <haxscramper> Can you elaborate what you mean? Nim compiler/ast is just a regular nim code, I'd it raises exception it shows all the stacktraces
[00:24:35] <arkanoid> haxscramper, like https://play.nim-lang.org/#ix=3uUM
[00:25:07] <arkanoid> line 114 is last line "echo myPNode"
[00:25:32] <arkanoid> basically it fails to render tree, but how to know where?
[00:26:29] <FromDiscord> <haxscramper> Same as macros - treeRepr and look over the output
[00:26:54] <FromDiscord> <haxscramper> Well, compiler calls it astalgo.dump IIRC
[00:27:01] <FromDiscord> <haxscramper> Hnimast has normal treeRepr
[00:30:14] <arkanoid> there's no treeRepr for PNode
[00:34:01] <FromDiscord> <haxscramper> Yes, that's exactly what I said just now. https://haxscramper.github.io/hnimast/src/hnimast/hast_common.html#treeRepr%2CPNode%2Cbool%2Cbool%2Cbool%2Cint%2Cint
[00:34:52] <FromDiscord> <haxscramper> Compier API is a little rough on the quality-of-life features that were added to macros
[00:41:19] <arkanoid> whoa, hnimast treerepr is super!
[00:42:49] <FromDiscord> <haxscramper> Yes. I should probably add checks for missing subnode index, to show invalid/unexpected nodes in the trees, though not right now
[00:43:30] <arkanoid> I now have to wrap my head around the differences between macro and compiler/ast. I'm trying to replace my old code
[00:48:03] *** Joins: rockcavera (~rc@192.12.115.217)
[00:48:03] *** Quits: rockcavera (~rc@192.12.115.217) (Changing host)
[00:48:03] *** Joins: rockcavera (~rc@user/rockcavera)
[01:04:16] <arkanoid> hooray! it works! Thanks a lot haxscramper again. For the lib and the wise hints
[01:04:17] <FromDiscord> <Ayy Lmao> I'm having an issue where I want to make something async but have no idea how to do it. It involves an event loop driven by a win32 window. My window implementation abstracts the win32 api away and uses closures to customize behavior. This seems to make doing any async code impossible because the compiler complains that I'm not being memory safe. I wrote some example code: https://play.nim-lang.org/#ix=3uUY
[01:26:31] <FromDiscord> <haxscramper> Welcome to the "dealing with god's machinery" club
[01:33:13] <FromDiscord> <dom96> @Ayy Lmao you need to integrate the async event loop with win32's. You'll need to do some research on how to best do this, worst case you can just call asyncdispatch.poll every few miliseconds.
[01:35:26] <FromDiscord> <Ayy Lmao> In reply to @dom96 "<@!277645179115143178> you need to": I am able to set a timer with the win32 api and I was thinking I would just call `poll` in there. My problem is that I can't seem to make any of my functions `async` because of memory safety issues.
[01:36:04] <FromDiscord> <dom96> what memory safety issues?
[01:36:34] <FromDiscord> <Ayy Lmao> Like in my example try to make `longCalculationThatBlocksTheThread` async and the compiler will complain
[01:37:18] <FromDiscord> <dom96> oh you can't use `var T` in async
[01:37:26] <FromDiscord> <dom96> but you don't need `var` there
[01:37:30] <FromDiscord> <dom96> this type is already a ref
[01:38:50] <FromDiscord> <Ayy Lmao> Oh interesting. I seem to be confused of what `var` means. I was thinking that `var` was simply used to mark when you are changing the thing that is passed in.
[01:39:33] <FromDiscord> <Ayy Lmao> I guess that only applies to non ref objects then
[01:45:06] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 258 seconds)
[01:45:41] <FromDiscord> <Ayy Lmao> So there is never a case where `var ref` does anything useful?
[01:46:25] <FromDiscord> <dom96> indeed
[01:50:58] <FromDiscord> <Ayy Lmao> I have it working now by removing var. I was wondering, `poll` seems to raise an exception when there are no handles in the dispatcher. How should I deal with that in my case, because there are times where my calculation will finish and doesn't need to be updated. Do I need to always keep track of when the calculation is being performed and only poll then?
[01:52:15] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3uVh
[01:52:38] <FromDiscord> <Ayy Lmao> (edit) "https://play.nim-lang.org/#ix=3uVh" => "https://play.nim-lang.org/#ix=3uVi"
[01:58:47] <FromDiscord> <Elegantbeef> Well you're not handling the exception in anyway which will bite your ass in the future, i'd say at the very least do the lazy thing of `echo getCurrentExceptionMsg()` just to give feedback
[02:03:21] <FromDiscord> <Ayy Lmao> My program is an extension that is run in another program, and currently any exceptions will be seen by the user. If I allow poll to raise an exception it will spam the user. I guess the proper way is to manually keep track of when I need to poll then?
[02:05:45] <FromDiscord> <Ayy Lmao> Is there some reason of why `poll` shouldn't be called when there are no events in the dispatcher? Does it have a lot of overhead or something?
[02:10:17] <FromDiscord> <Ayy Lmao> I guess my case is kind of niche and this isn't an issue in most cases.
[02:20:51] <arkanoid> I'm trying to filter xmlattributesO.attrs via filter/filterIt, but it's not working
[02:21:04] <arkanoid> I'm no more trying this at compile time but runtime
[02:22:53] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:24:01] *** Joins: flynn (~mcbloch@user/flynn)
[02:38:44] <FromDiscord> <deech> How do I make a `const` pointer for FFI purposes?,eg. I have `ptr cchar` and I want `const char` but that's just one example.
[02:45:25] <FromDiscord> <Elegantbeef> @deech\: i could be wrong but i think https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-codegendecl-pragma
[03:40:24] *** Parts: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (when i leave, come together like butt cheeks)
[03:47:33] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3uVB
[03:53:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I know `$` is stringify, is there also something like `toString`?
[03:53:32] *** Quits: max22- (~maxime@2a01cb088335980066febfaec4664aa6.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:00:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3uVF
[04:07:34] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[04:18:02] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[05:01:49] *** Joins: [R] (~rs@genoce.org)
[05:26:53] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[05:33:16] *** Joins: thunder (~thunder@user/thunder)
[05:50:14] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[05:50:40] *** Joins: thunder (~thunder@user/thunder)
[06:03:00] <nrds> <06Prestige99> that's interesting
[06:03:25] <nrds> <06Prestige99> oh you can still use $ with decimals, cool
[06:07:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:10:26] <FromDiscord> <Elegantbeef> Prestige impressed with the oddest thing
[06:11:29] <FromDiscord> <theangryepicbanana> In reply to @@bracketmaster-5a708063d73408ce4 "I know `$` is": isn't `$` already `toString` thought?
[06:11:32] <FromDiscord> <theangryepicbanana> (edit) "thought?" => "though?"
[06:12:24] <FromDiscord> <Elegantbeef> Hey i found it odd, but i just showed them how \:D
[06:12:43] <FromDiscord> <theangryepicbanana> fair enough
[06:13:43] <FromDiscord> <Elegantbeef> Sometimes i should say the "but why" instead of just giving a solution
[06:13:43] <FromDiscord> <Elegantbeef> Sometimes i should say the
[06:16:43] *** Joins: rockcavera (~rc@192.12.114.202)
[06:16:43] *** Quits: rockcavera (~rc@192.12.114.202) (Changing host)
[06:16:43] *** Joins: rockcavera (~rc@user/rockcavera)
[06:27:15] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 258 seconds)
[06:32:21] <nrds> <06Prestige99> :)
[07:35:17] *** Quits: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de) (Remote host closed the connection)
[07:39:58] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[07:46:06] *** Joins: thunder (~thunder@user/thunder)
[08:01:46] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:02:44] <FromDiscord> <Rika> The
[08:05:02] <FromDiscord> <Elegantbeef> quick
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[10:49:02] <FromDiscord> <ynfle (ynfle)> Is this a bug https://play.nim-lang.org/#ix=3uX7? Why can't a NimNode's kind be determined at compile time. Its' only ever available then
[10:51:58] <FromDiscord> <Elegantbeef> Except when that procedure is instantiated there is no way to reason what x.kind is
[10:53:38] <FromDiscord> <ynfle (ynfle)> I'm not sure what that means?
[10:54:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3uX8 this might work for you
[10:55:29] <FromDiscord> <Elegantbeef> Well let's look what you're asking, you call a procedure  providing an argument, so that means everytime you invoke this procedure `x.kind` would need to be changed since `{.error.}` only takes consts
[10:56:10] <FromDiscord> <ynfle (ynfle)> But at compile time, all of the instantiations are known
[10:56:27] <FromDiscord> <Elegantbeef> There is only one instantiation of this procedure
[10:56:34] <FromDiscord> <ynfle (ynfle)> It is a minified example
[10:56:49] <FromDiscord> <Elegantbeef> It doesnt matter what you do to it
[10:56:49] <FromDiscord> <ynfle (ynfle)> Oh
[10:57:01] <FromDiscord> <ynfle (ynfle)> So the error message isn't acurate
[10:57:12] <FromDiscord> <Elegantbeef> Well it is
[10:57:20] <FromDiscord> <Elegantbeef> Or sorta is
[10:57:21] <FromDiscord> <ynfle (ynfle)> Why?
[10:57:42] <FromDiscord> <Elegantbeef> Cause it cannot reason what x in a constant frame
[10:58:24] <FromDiscord> <Elegantbeef> It knows it'll be a Nimnode but has 0 clue what it could contain
[10:59:21] <FromDiscord> <Elegantbeef> I suppose if NimNodes were treated as a `static` it'd enable that, but the implications would be weird
[10:59:38] <FromDiscord> <Elegantbeef> Plus i might be spewing some amount of inconsistencies 😀
[11:00:34] *** Quits: thunder (~thunder@user/thunder) (Quit: Leaving)
[11:04:22] <FromDiscord> <ynfle (ynfle)> https://play.nim-lang.org/#ix=3uX9
[11:05:58] <FromDiscord> <Elegantbeef> I said "if they were treated"
[11:07:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/zj5
[11:07:34] <FromDiscord> <Elegantbeef> I still just say use expect kinds where you need to or assertions
[11:12:49] <FromDiscord> <ynfle (ynfle)> I have a proc that uses a case statement and I want to produce a useful error message
[11:14:57] <FromDiscord> <ynfle (ynfle)> For when a node was passed in that isn't part of the case statement
[11:15:58] <FromDiscord> <ynfle (ynfle)> If I use expectkind, I'd have to manually collect all of the NimNode possibilities
[11:21:07] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:23:42] <FromDiscord> <Elegantbeef> To steal some logic from CPS https://play.nim-lang.org/#ix=3uXe
[11:24:48] <FromDiscord> <Elegantbeef> Plus error doesnt really do what you want https://play.nim-lang.org/#ix=3uXf
[11:28:10] <FromDiscord> <ynfle (ynfle)> Is there a reason that the example in https://nim-lang.github.io/Nim/manual_experimental.html#case-statement-macros doesn't compile?
[11:28:28] <FromDiscord> <ynfle (ynfle)> @elegantbeef\:matrix.org it's not exactly what I need
[11:29:04] <FromDiscord> <Elegantbeef> those are devel logs, replace `case` with `match`
[11:29:24] *** Joins: max22- (~maxime@2a01cb08833598001f7929d8943df049.ipv6.abo.wanadoo.fr)
[11:30:05] <FromDiscord> <Elegantbeef> Notice it doesnt use `{.error.}` it uses `error(msg)`
[11:31:01] <FromDiscord> <Elegantbeef> As such you dont have that compile time issue since it's not in a pragma https://play.nim-lang.org/#ix=3uXh
[11:33:21] <FromDiscord> <ynfle (ynfle)> Ohhh
[11:33:49] <FromDiscord> <ynfle (ynfle)> \:facepalm
[11:57:40] <FromDiscord> <ynfle (ynfle)> Thanks for the help @elegantbeef\:matrix.org
[12:04:26] <FromDiscord> <zygon.sisyphus> hi
[12:06:23] <FromDiscord> <zygon.sisyphus> how possible is to use zig / zig cc as compiler for nim ? also, is possible to generate zig instead of c as intermediate lang ?
[12:06:35] <FromDiscord> <zygon.sisyphus> or combine c + zig
[12:07:01] <FromDiscord> <Elegantbeef> People have used the zig compiler as the C compiler and no Nim doesnt have a zig backend
[12:07:04] <FromDiscord> <zygon.sisyphus> how dificult will  be to implement this ?
[12:07:12] <FromDiscord> <ynfle (ynfle)> Zig compiler, yes. generate zig, yes, but it'd require tons of work
[12:07:50] <FromDiscord> <Elegantbeef> What'd even be the benefit to using nim -\> zig
[12:08:01] <FromDiscord> <Elegantbeef> We already have nlvm so seems more sensiible to work on that
[12:08:18] <FromDiscord> <zygon.sisyphus> is cleaner than c and integrates better with libs
[12:08:36] <FromDiscord> <zygon.sisyphus> as cross platform target
[12:08:42] <FromDiscord> <Elegantbeef> Again what's the benefit over nlvm
[12:09:39] <FromDiscord> <zygon.sisyphus> nlvm ?
[12:09:53] <FromDiscord> <Elegantbeef> https://github.com/arnetheduck/nlvm
[12:09:56] <nrds> <12R2D299> 4GitHub: 7"LLVM-based compiler for the Nim language"
[12:11:07] <FromDiscord> <zygon.sisyphus> thx, i didn't know about nlvm
[12:14:20] <FromDiscord> <ynfle (ynfle)> 1) the nim c instead supposed to be read. 2) using the zig compiler with nim c, it becomes cross platform
[12:17:27] <FromDiscord> <Elegantbeef> Well also Zig's compiler for C is mostly just clang isnt it?
[12:17:30] <FromDiscord> <zygon.sisyphus> the "advantages" are on front page https://ziglang.org
[12:17:50] <FromDiscord> <zygon.sisyphus> sent a long message, see http://ix.io/3uXw
[12:17:55] <FromDiscord> <Elegantbeef> but how is that a benefit over using C as an IR
[12:18:05] <FromDiscord> <Elegantbeef> C has a compiler for almost every cpu
[12:18:31] <FromDiscord> <Elegantbeef> So if you have a CPU you can most likely run Nim
[12:18:45] <FromDiscord> <zygon.sisyphus> today the development is more than just the compiler
[12:18:53] <FromDiscord> <ynfle (ynfle)> That's only an issue for writing programs not generating
[12:19:59] <FromDiscord> <zygon.sisyphus> is about libs, package mangement, dependecy management, crossplatform, static analysis
[12:20:18] <FromDiscord> <Elegantbeef> But Nim already does most of that
[12:20:29] <FromDiscord> <zygon.sisyphus> at hi level
[12:21:06] <FromDiscord> <zygon.sisyphus> it was just an idea
[12:21:08] <FromDiscord> <ynfle (ynfle)> Right
[12:21:18] <FromDiscord> <Elegantbeef> I'm just trying to see the benefits
[12:21:20] <FromDiscord> <ynfle (ynfle)> Why do we need low level if we have high level?
[12:22:00] <FromDiscord> <zygon.sisyphus> it was based on my experience on testing some c projects
[12:22:15] <FromDiscord> <Elegantbeef> No one is writing the generated C code, so almost all of those aforementioned benefits are not actually needed
[12:22:20] <FromDiscord> <zygon.sisyphus> is as bad as was 20 year ago
[12:22:29] <FromDiscord> <Elegantbeef> But nim isnt C
[12:23:32] <FromDiscord> <zygon.sisyphus> but most of the time is necessary to have low level integration and most OS Api today are desined based on libc
[12:24:03] <FromDiscord> <zygon.sisyphus> so an middle level that can solve some issues is an idea
[12:24:16] <FromDiscord> <ynfle (ynfle)> Which issues?
[12:24:34] <FromDiscord> <ShalokShalom> How does have Nim implemented the effects tracking, to say if func is pure or not?
[12:24:34] <FromDiscord> <zygon.sisyphus> package/libs management
[12:24:42] <FromDiscord> <Elegantbeef> How does zig solve that
[12:24:44] <FromDiscord> <zygon.sisyphus> header management
[12:24:50] <FromDiscord> <zygon.sisyphus> references
[12:25:34] <FromDiscord> <haxscramper> In reply to @ShalokShalom "How does have Nim": Each procedure is either manually annotated with effects, or they are computed based on its body.
[12:26:22] <FromDiscord> <haxscramper> Some "root" procedures like echo has manual side effect annotation, which then propagates through the callers
[12:27:30] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/blob/devel/compiler/sempass2.nim#L1338
[12:27:32] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:28:21] <FromDiscord> <haxscramper> This has nothing to do with low-level backend, features.
[12:28:33] <FromDiscord> <zygon.sisyphus> I think the same apply to rust
[12:28:35] *** Joins: xet7 (~xet7@user/xet7)
[12:28:45] <FromDiscord> <zygon.sisyphus> but rust is to llvm dependent
[12:29:44] <FromDiscord> <ynfle (ynfle)> What applies to rust?
[12:31:18] <FromDiscord> <haxscramper> I think we have a misunderstanding, because I'm also having hard time figuring out how zig backend would affect anything you listed earlier
[12:31:19] <FromDiscord> <zygon.sisyphus> use rust/zig instead of plain c
[12:31:57] <FromDiscord> <Elegantbeef> Feel free to make a `ziggen.nim` file in the compiler to get the rewards
[12:31:58] <FromDiscord> <haxscramper> Why this would be better? Compiling to rust is probably useless idea in the first place
[12:32:09] <FromDiscord> <haxscramper> Like, really useless
[12:32:19] <FromDiscord> <zygon.sisyphus> the idea is to combine an hi level lang with GC with low level no GC
[12:32:19] <FromDiscord> <Elegantbeef> Yea you still havent said why it's beneficial clearly
[12:32:24] <FromDiscord> <Elegantbeef> But that's not what nim is
[12:32:24] *** Quits: max22- (~maxime@2a01cb08833598001f7929d8943df049.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[12:32:28] <FromDiscord> <haxscramper> C/js?
[12:33:16] <FromDiscord> <haxscramper> I mean C does have a package management solutions (usually they are a distro PM but anyway)
[12:33:41] <FromDiscord> <haxscramper> And C is almost universal language for interop
[12:33:43] <FromDiscord> <zygon.sisyphus> for big projects c is dificult to read and allow to many errors
[12:33:51] <FromDiscord> <haxscramper> Yes, but nim is not C
[12:33:52] <FromDiscord> <Elegantbeef> Which is why we say write Nim
[12:33:58] <FromDiscord> <haxscramper> Nim generates C
[12:34:08] <FromDiscord> <zygon.sisyphus> this is ok
[12:34:11] <FromDiscord> <Elegantbeef> You arent using C + Nim, you're using Nim
[12:34:29] <FromDiscord> <zygon.sisyphus> until you need to interact with other libs, usualy c/c++
[12:34:38] <FromDiscord> <Elegantbeef> And you still arent using C/C++
[12:34:46] <FromDiscord> <zygon.sisyphus> because OS needs c/libc
[12:34:56] <FromDiscord> <Elegantbeef> You write bindings and then use Nim
[12:35:00] <FromDiscord> <Elegantbeef> Have you actually used Nim?
[12:35:10] <FromDiscord> <zygon.sisyphus> not yet
[12:35:18] <FromDiscord> <zygon.sisyphus> just try some demo
[12:35:28] <FromDiscord> <zygon.sisyphus> just try some samples
[12:35:44] <FromDiscord> <ynfle (ynfle)> Of nim?
[12:35:50] <FromDiscord> <zygon.sisyphus> need an good IDE with debug support
[12:35:54] <FromDiscord> <haxscramper> Nim can interface with c and c++ without having to actually write C/c++ code
[12:36:25] <FromDiscord> <Elegantbeef> You do need to write/generate bindings, but that can be slightly automated using `c2nim` and `nimterop`
[12:36:36] <FromDiscord> <Elegantbeef> But many popular libraries already have bindings
[12:36:57] <FromDiscord> <zygon.sisyphus> compared to crates.io ?
[12:37:02] <FromDiscord> <zygon.sisyphus> how many ?
[12:37:10] <FromDiscord> <zygon.sisyphus> how stable ?
[12:37:35] <FromDiscord> <Elegantbeef> Am i supposed to grab a stick and count?
[12:37:53] <FromDiscord> <Elegantbeef> They're rather stable since most C libraries are rather concreted as APIs
[12:37:59] <emery> i heard that most crates were garbage
[12:38:03] <FromDiscord> <zygon.sisyphus> no, I was just curios what popular is
[12:38:30] <FromDiscord> <zygon.sisyphus> crates is better than npmjs
[12:38:42] <FromDiscord> <Elegantbeef> Sdl, Opengl, Glfw, Imgui, X, WinApi, Gtk, Qt is a small selection
[12:38:48] <FromDiscord> <haxscramper> > qt
[12:38:52] <FromDiscord> <haxscramper> Qt qml
[12:38:55] <FromDiscord> <haxscramper> Lest be honest here
[12:39:01] <FromDiscord> <zygon.sisyphus> ssl, cypto, libuv ?
[12:39:10] <FromDiscord> <Elegantbeef> openssl, bearssl
[12:39:29] <FromDiscord> <zygon.sisyphus> how about serialization ? cbor, xml, json ?
[12:39:38] <FromDiscord> <Elegantbeef> xml and json are stdlib
[12:40:13] <FromDiscord> <zygon.sisyphus> pessagepack ?
[12:40:14] <FromDiscord> <Elegantbeef> https://nimble.directory/ probably more beneficial
[12:40:16] <FromDiscord> <zygon.sisyphus> messagepack ?
[12:40:57] <FromDiscord> <zygon.sisyphus> ok, thx ( https://nimble.directory/ )
[12:40:57] <FromDiscord> <zygon.sisyphus> probabli I don't know all about nim
[12:40:58] <FromDiscord> <zygon.sisyphus> need more info
[12:41:03] <emery> cbor is outside stdlib
[12:41:09] <FromDiscord> <Elegantbeef> Well you're talking about non problems \:D
[12:41:22] <FromDiscord> <zygon.sisyphus> I didn't say is a problam
[12:41:26] <FromDiscord> <zygon.sisyphus> I didn't say is a problaem
[12:41:38] <FromDiscord> <zygon.sisyphus> I didn't say is a problem
[12:41:48] <FromDiscord> <Elegantbeef> Well you suggested using zig to solve problems which is what i was referencing
[12:41:57] <FromDiscord> <zygon.sisyphus> It was just an idea
[12:42:26] <FromDiscord> <Elegantbeef> Hey i'm not going to hold it against you, i just jest
[12:42:26] <FromDiscord> <zygon.sisyphus> I just like zig more  than c/c++
[12:44:40] <FromDiscord> <zygon.sisyphus> that is why I switch to c#
[12:44:40] <FromDiscord> <haxscramper> Compiling to smart languages is harder
[12:44:40] <FromDiscord> <zygon.sisyphus> now I'm investigating alternatives like nim, vala ,...
[12:44:40] <FromDiscord> <haxscramper> Compiling to C is easy because it is dumb as brick
[12:44:40] <FromDiscord> <Elegantbeef> Nim isnt an alternative to C# per se
[12:44:40] <FromDiscord> <zygon.sisyphus> is not
[12:44:40] <FromDiscord> <Elegantbeef> It's a systems language so it's capable of what C/Zig/C++ can do
[12:44:40] <FromDiscord> <zygon.sisyphus> I agree
[12:45:41] <FromDiscord> <zygon.sisyphus> c is not easy to replace
[12:47:24] <FromDiscord> <zygon.sisyphus> nim is opensouce, so if somebody want to implemnt zig backed is possible
[12:47:40] <FromDiscord> <Elegantbeef> Yes
[12:51:20] <FromDiscord> <Elegantbeef> You also have the jsgen and cgen modules as reference
[12:51:21] <FromDiscord> <zygon.sisyphus> ok
[12:51:21] <FromDiscord> <zygon.sisyphus> this is the info I need
[12:51:22] <FromDiscord> <zygon.sisyphus> just need to add an new one
[12:51:22] <FromDiscord> <zygon.sisyphus> cgen is for c++ also\\
[12:51:23] <FromDiscord> <zygon.sisyphus> cgen is for c++ also?
[12:51:23] <FromDiscord> <zygon.sisyphus> the backend is modular and independent
[12:51:24] <FromDiscord> <Elegantbeef> I dont know
[13:25:54] *** Joins: max22- (~maxime@2a01cb08833598004092428c22c43f90.ipv6.abo.wanadoo.fr)
[13:35:33] <FromDiscord> <ShalokShalom> @haxscramper In regards to func:↵↵How do you that with higher order functions?
[13:35:48] <FromDiscord> <ShalokShalom> To ensure no side effects
[13:36:02] <FromDiscord> <Rika> the type of a func is `proc (...): ... {.noSideEffects.}`
[13:37:27] <FromDiscord> <ShalokShalom> Because the approach of having a single keyword means you cannot express "this function is pure if it's arguments are pure"
[13:37:38] <FromDiscord> <ShalokShalom> @Rika I know
[13:37:50] <FromDiscord> <ShalokShalom> The question is, how higher order functions work on that
[13:37:52] <arkanoid> any news on the "code coverage" topic?
[13:37:58] <FromDiscord> <haxscramper> no
[13:38:13] <FromDiscord> <haxscramper> In reply to @ShalokShalom "Because the approach of": https://github.com/nim-lang/RFCs/issues/404 https://github.com/nim-lang/RFCs/issues/403
[13:38:38] <FromDiscord> <haxscramper> Right now effects are inferred based on callback effectrs
[13:39:00] <FromDiscord> <haxscramper> but ultimately you can put anything in the callback, and it is not possible to fully track
[13:39:25] <FromDiscord> <haxscramper> So `cb: proc()` means `{.raises: [Any], effects: [AllEffects].}` roughly speking
[13:39:51] <FromDiscord> <haxscramper> In reply to @arkanoid "any news on the": at least nothing changed since the last time
[13:40:06] <FromDiscord> <ShalokShalom> So there is no guarantee?
[13:41:07] <FromDiscord> <Rika> cant you enforce raises: [] and effects: [] in a type?
[13:41:36] <FromDiscord> <haxscramper> yes, you can
[13:41:40] <arkanoid> sad, nim really deserves a native code coverage tool
[13:41:58] <arkanoid> I enforce no exceptions and no effects all the time
[13:42:16] <FromDiscord> <haxscramper> In reply to @arkanoid "sad, nim really deserves": https://github.com/binhonglee/coco/issues/19
[13:42:28] <arkanoid> "func can raise side effects" is my favorite error
[13:44:56] <FromDiscord> <haxscramper> execution traces PR looks really promising
[13:46:11] <FromDiscord> <ShalokShalom> "Side effects are allowed in nosideeffect functions if the effect is passed as a parameter"↵↵ So you just dont care?
[13:46:38] <arkanoid> haxscramper, I'm already getting nim coverage but is quite convoluted
[13:46:39] <FromDiscord> <ShalokShalom> sent a code paste, see https://play.nim-lang.org/#ix=3uXT
[13:47:20] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3uXU
[13:47:27] <FromDiscord> <haxscramper> So yeah, you need to be explicit in that case
[13:48:09] <FromDiscord> <haxscramper> In reply to @arkanoid "<@608382355454951435>, I'm already getting": Are you using gcc coverage options? I do that as well, but they don't have perfect results
[13:48:13] <FromDiscord> <ShalokShalom> Aha, ok.
[13:48:17] <FromDiscord> <haxscramper> As they are based on `#line` in generated code
[13:48:28] <FromDiscord> <ShalokShalom> So why not preventing by default?
[13:48:35] <FromDiscord> <ShalokShalom> And letting the people choose a proc
[13:48:45] <FromDiscord> <ShalokShalom> I mean, that is the whole point of func
[13:48:46] <FromDiscord> <Rika> because when you say `proc()` it means proc and not func
[13:49:00] <FromDiscord> <haxscramper> yes, if you need no side effect you say so
[13:49:02] <FromDiscord> <Rika> same thing why you can do `x: var int` i guess
[13:49:10] <FromDiscord> <Rika> but it's "backwards"
[13:49:10] <arkanoid> haxscramper, exactly
[13:49:24] <FromDiscord> <haxscramper> It would be really weird if `proc(cb: proc())` and `func(cb: proc())` would mean different things
[13:49:33] <FromDiscord> <Rika> since you're being less "funcy" by specifying less instead of more "funcy" for specifying less
[13:49:51] <FromDiscord> <ShalokShalom> In reply to @haxscramper "yes, if you need": isnt this, by using func?
[13:49:55] <FromDiscord> <Rika> no
[13:50:02] <FromDiscord> <Rika> think of it this way
[13:50:10] <FromDiscord> <ShalokShalom> 😄
[13:50:14] <FromDiscord> <Rika> the `func` is no side effects because you said so
[13:50:25] <FromDiscord> <haxscramper> Though I still don't understand why
[13:50:25] <FromDiscord> <Rika> but if you ask for a `proc()` you didnt say you wanted no side effects
[13:50:26] <FromDiscord> <haxscramper> `Error: func keyword is not allowed in type descriptions, use proc with {.noSideEffect.} pragma instead`
[13:50:31] <FromDiscord> <ShalokShalom> yeah, I understand that
[13:50:37] <FromDiscord> <Rika> In reply to @haxscramper "`Error: func keyword is": i was gonna say that'
[13:50:40] <FromDiscord> <haxscramper> FFS what was the reasoning for explicitly disallowing
[13:50:46] <FromDiscord> <Rika> func keyword for type would be super nice
[13:50:58] <FromDiscord> <haxscramper> yes, `{.noSideEffect.}` is just super verbose
[13:51:02] <FromDiscord> <Elegantbeef> There is a PR somewhere the enables it iirc
[13:51:09] <FromDiscord> <ShalokShalom> yeah, so passing in as parameters only happens at type definitions?
[13:51:26] <FromDiscord> <Rika> ?
[13:51:40] <FromDiscord> <Rika> wdym'
[13:51:54] <FromDiscord> <Rika> parameters, when not specified as no side effects, can have side effects
[13:52:26] <FromDiscord> <Rika> no matter if the thing the parameter is part of is a func or a proc
[14:21:27] <arkanoid> I keep having issues with vscode + nim, autocompletion just works for first 5 minutes, then I have to restart
[14:43:29] <FromDiscord> <konsumlamm> which plugin do you use?
[15:20:10] <arkanoid> nimsaem one
[15:20:46] <arkanoid> whoa, HashSet dosn't work with type aliases
[15:22:07] <arkanoid> https://play.nim-lang.org/#ix=3uYb
[15:22:10] <FromDiscord> <Rika> type alias -> distinct or
[15:22:36] <arkanoid> no, not distinct, just plain alias
[15:22:38] <FromDiscord> <Rika> you're `=`
[15:22:42] <FromDiscord> <Rika> `:`
[15:23:09] <FromDiscord> <Rika> and add is wrong i believe
[15:23:43] <FromDiscord> <Rika> its not add, its `incl`
[15:24:01] <FromDiscord> <Rika> https://play.nim-lang.org/#ix=3uYc
[15:29:33] <arkanoid> oh! thanks
[15:55:28] *** Joins: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[15:59:17] *** Quits: max22- (~maxime@2a01cb08833598004092428c22c43f90.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:35] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:42:32] *** Joins: max22- (~maxime@2a01cb0883359800a47bf6e1608c4a82.ipv6.abo.wanadoo.fr)
[16:46:12] <arkanoid> how do I set a default for a var argument?
[16:46:57] <arkanoid> if I do myproc(foo: var HashSet[string] = HashSet[string]()) it complains that wants a var thing
[16:48:31] <FromDiscord> <exelotl> I don't think you can, as a var argument needs to be something that exists outside the called proc and is mutable
[16:52:09] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3uYt
[16:56:46] <FromDiscord> <haxscramper> `proc q(a: var int = (var tmp = 12; tmp)) = discard`
[16:58:34] <arkanoid> thanks
[16:58:50] <arkanoid> it's for a recursive function that returns a collection
[16:59:18] <arkanoid> so first call wants an empty collection, default arg seems a correct choice here
[17:00:24] <FromDiscord> <haxscramper> I'd rather do↵↵func main() ... func aux(it\: var int)\`
[17:00:31] <FromDiscord> <Rika> why would you need a var param then?
[17:00:36] <FromDiscord> <haxscramper> And this `var tmp = 12; tmp` is a horrible hack
[17:00:54] <FromDiscord> <haxscramper> Like, yes it is possible, but don't do this, there are better ways
[17:15:59] *** Quits: max22- (~maxime@2a01cb0883359800a47bf6e1608c4a82.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:27:22] *** Joins: arkurious (~arkurious@user/arkurious)
[17:31:36] <FromDiscord> <haxscramper> I have a large project that uses jsony to write `JsonNode` to a file (along with multiple other fields). If json node is `nil` it silently crashes, without any stacktrace.  When launched it under gdb I found out the crash happens after `switch ((v).kind) {` which is pretty unsurprising. I tried to reproduce the same issue at a smaller scale, but failed to do this - `import jsony, std/json; echo toJson(cast[JsonNode](nil))` generated 
[17:32:20] <FromDiscord> <haxscramper> I did all the testing in the same directory, so if there is a configuration file that disabled stracktraces it should've affected both (not to mention all other exceptions are fine)
[17:32:55] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/r4U
[17:33:16] <FromDiscord> <haxscramper> In both cases - for a large project, and for a smaller one
[17:34:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3uYG
[17:34:32] <FromDiscord> <haxscramper> Failure happens in the same function, the only difference is how it is called - directly by `toJson`, or from other `.dumpHook()`
[17:47:28] <arkanoid> haxscramper thanks for the suggestion, I've refactored the code
[17:47:56] <FromDiscord> <StefanSalewski (StefanSalewski)> For the var parameter default value we can also use the cast[ptr t](http://nil)[] hack as suggested by https://github.com/StefanSalewski/gintro/issues/102#issuecomment-726454448
[17:48:05] <FromDiscord> <StefanSalewski (StefanSalewski)> We use that for gintro.
[17:50:08] <arkanoid> thanks StefanSalewski, but I think that I can skip hacks here, as it's pure nim code. It's just up to find out how. I'd prefer to avoid var and mutability and get back to pure func
[17:50:28] <arkanoid> probably with some copying I can do this
[17:52:08] <FromDiscord> <StefanSalewski (StefanSalewski)> logout
[17:54:16] <arkanoid> do you know why there's a merge function for Countable but not for Table?
[17:55:20] <FromDiscord> <Rika> which value should be chosen when you encounter two duplicates of a key
[18:07:38] <arkanoid> well, first or second table
[18:07:49] <arkanoid> like others do
[18:08:26] <arkanoid> or if fancier: mergeLeft mergeRight
[18:08:42] <FromDiscord> <Rika> then i guess it is a matter of prs welcome
[18:28:20] *** Joins: max22- (~maxime@2a01cb08833598009ddc982b031228c0.ipv6.abo.wanadoo.fr)
[19:29:42] *** Quits: max22- (~maxime@2a01cb08833598009ddc982b031228c0.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[19:34:56] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:44:57] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 258 seconds)
[19:45:31] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:16:06] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[20:17:11] *** Joins: max22- (~maxime@2a01cb088335980097053d23e98cbc0d.ipv6.abo.wanadoo.fr)
[20:36:39] *** Quits: max22- (~maxime@2a01cb088335980097053d23e98cbc0d.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[20:43:56] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:49:11] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:51:46] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[21:54:57] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[23:01:08] <arkanoid> is there an xml serialization/deserialization lib in nim?
[23:03:42] <FromDiscord> <haxscramper> If you want to test your luck - https://github.com/haxscramper/nimtraits/blob/master/src/nimtraits/trait_xml.nim , and https://github.com/haxscramper/haxdoc/blob/master/src/haxdoc/docentry_io.nim
[23:04:30] <FromDiscord> <haxscramper> It is no longer necessary to explicitly instantiate serialization procedures, the example has somewhat outdated API
[23:04:53] <FromDiscord> <haxscramper> Otherwise there is nothing for working with XML in automated manner
[23:07:59] <arkanoid> I've dived into xml xsd world in the last 48 hours and I've found madness
[23:08:14] <arkanoid> it is exactly how I imaged hell in my mind
[23:10:02] <FromDiscord> <haxscramper> So you want to store a date? Here is 10+ built-in date types
[23:11:45] <arkanoid> why declare types just in one place, when you can include,import,ref,declare inline,make them anonymous
[23:12:17] <arkanoid> and when you think that you can map into a type system, you have to deal with sequence vs attribute
[23:12:29] <arkanoid> and there you have the impossible type
[23:14:16] <arkanoid> so here I have a wsdl from an international well-known thing that I'm struggling to work with nim as just declaring types is much harder than expected
[23:14:21] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[23:15:04] <arkanoid> I'll probably give up working with metaprogramming and type-system and just hack SOAP messages with strings
[23:15:12] <arkanoid> it's probably much quicker
[23:16:16] <FromDiscord> <haxscramper> It is quicker, though I did some automatic xsd2nim converters as well. But I did it because I need to parse tons of XML from doxygen
[23:16:47] <FromDiscord> <haxscramper> Otherwise it is easier to use string
[23:18:33] <arkanoid> yea but this was kinda like my testbed on nim metaprogramming. I kinda succeeded with it (even with compiler/ast thanks to you!) but now I feel down as I feel that the effort has been useless
[23:21:15] <arkanoid> how did you deal with complexTypes that have both sequence and attributes?
[23:22:34] <FromDiscord> <haxscramper> I have `{.Attr.}` annotation
[23:23:13] <FromDiscord> <haxscramper> And then I just write attributes first, then fields
[23:23:23] <FromDiscord> <haxscramper> s/fields/sequence
[23:25:13] <FromDiscord> <haxscramper> For reading I either manually write code like this https://github.com/haxscramper/hmisc/blob/master/src/hmisc/hasts/xml_ast.nim#L959 , or generate checks
[23:25:19] <arkanoid> wise! know nothing abount annotations, are them in nim manual?
[23:26:03] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#userminusdefined-pragmas-custom-annotations
[23:26:23] <FromDiscord> <haxscramper> For parsing I generate loops like this, based on the earlier structure https://github.com/haxscramper/hcparse/blob/master/src/hcparse/dox_compound.nim#L2269
[23:26:58] <arkanoid> I like your use of vertical space while writing code. I should give some more space too
[23:27:25] <FromDiscord> <haxscramper> Note that actually checking whether field is annotated with `{.Attr.}` requires very convoluted setup, you can see how it is implemented in https://github.com/nim-lang/Nim/blob/version-1-4/lib/core/macros.nim#L1484
[23:28:12] <FromDiscord> <haxscramper> You can use `hasCustomPragma`, but it is not available in the macros, so you need to adapt implementation
[23:28:12] <FromDiscord> <haxscramper> At least that's what I did for hnimast
[23:30:12] <FromDiscord> <haxscramper> Or you can just use `getObjectStructure()` to get all object parsed and checked for attributes
[23:30:30] <arkanoid> why are you saying that hasCustomPragma is not available in the macros?
[23:30:53] <arkanoid> is this broken? https://github.com/nim-lang/Nim/blob/44e653a9314e1b8503f0fa4a8a34c3380b26fff3/lib/core/macros.nim#L1557
[23:31:21] <FromDiscord> <haxscramper> because you can do `macro test(field: typed) = if hasCustomPragma(field, "Attr")`
[23:31:26] <FromDiscord> <haxscramper> What you linked is a `macro`
[23:31:36] <FromDiscord> <haxscramper> You can't call macro during macro execution
[23:32:10] <arkanoid> oh! ok, you're doing it at runtime. Is this necessary?
[23:33:02] <arkanoid> I mean, once you've parsed the types (with annotations), then you create the required encoding/decoding functions still at macro/ast time
[23:33:04] <FromDiscord> <haxscramper> yes? well, you take `typedesc` of an object you want to write/load to/from xml, so you have a macro runtime, which has to execute all kind of checks
[23:33:25] <FromDiscord> <haxscramper> And `hasCustomPragma` cannot be used for these checks
[23:34:14] <FromDiscord> <haxscramper> All macros like this must be implemented in form of procs IMO
[23:34:17] <FromDiscord> <haxscramper> So you would have `macro hasCustomPragma(a: typed): untyped = newLit(hasCustomPragmaImpl(a))`
[23:34:29] <FromDiscord> <haxscramper> Where `proc hasCustomPragmaImpl(a: NimNode): bool` implements logic
[23:34:45] <FromDiscord> <haxscramper> But sadly there is almost no macros in stdlib that follow this pattern
[23:35:54] <FromDiscord> <haxscramper> And why `proc customPragmaNode(n: NimNode): NimNode =` is not exposed to the user API? I mean, we have `import {.all.}` hack now, but this should not be the reason to hide parts of an API
[23:35:58] <arkanoid> when you say "macro runtime" you mean just "runtime"?
[23:36:44] <FromDiscord> <haxscramper> when macro is executed
[23:37:06] <FromDiscord> <haxscramper> It is hard to pinpoint what exactly "runtime" and "compile-time" means when you talk about macros
[23:38:08] <arkanoid> well, if you're talking to post-expansion and nim compiler process is not running, it's just runtime
[23:39:10] <arkanoid> whatever, I'm surely the one who's not getting it completely here, probably. I see a huge knowledge gap between your code and what I can do
[23:42:41] <FromDiscord> <Elegantbeef> Yea that's the best pattern hax, enables the most code reuse
[23:42:45] <arkanoid> how did you takle the xml/xsd/namespace/types madness, in general? I mean, which order/strategy did you used?
[23:44:31] <FromDiscord> <haxscramper> Namespaces - they weren't needed so I ignored that part. But if I had to use them, I would just concatenate type name and namespace.
[23:44:53] <FromDiscord> <haxscramper> Xsd type is mapped to nim type almost 1:1, or at least I try to do it as close as possible
[23:45:14] <nrds> <06Prestige99> Hey beef
[23:45:25] <FromDiscord> <Elegantbeef> Hello
[23:45:28] *** Joins: max22- (~maxime@2a01cb088335980020b17d54c2d68f76.ipv6.abo.wanadoo.fr)
[23:45:43] <FromDiscord> <haxscramper> When converting xsd to nim types I don't differentiate between attributes and sequence, this is done at parser level
[23:45:53] <nrds> <06Prestige99> What was your question from earlier?
[23:46:21] <FromDiscord> <Elegantbeef> Drawing window frames, how is that done? I did see a function that seems like it might do that but i'm uncertain
[23:46:42] <nrds> <06Prestige99> like, creating a new window? Or a border?
[23:46:51] <arkanoid> so you just annotate which is sequence and which is attribute with pragmas, and then on reader/writer do what's needed
[23:46:53] <FromDiscord> <Elegantbeef> Border
[23:47:09] <nrds> <06Prestige99> XSetWindowBorderWidth(display, this.window, this.borderWidth.cuint)
[23:47:28] <FromDiscord> <Elegantbeef> Ah wasnt certain that was actually what it was for 😀
[23:47:31] <FromDiscord> <Elegantbeef> Well that makes live easy
[23:47:33] <nrds> <06Prestige99> and XSetWindowBorder
[23:50:30] <FromDiscord> <haxscramper> In reply to @arkanoid "so you just annotate": Correct.
[23:50:58] <arkanoid> now I'm really curious how you read pragmas back at runtime!
[23:51:24] <FromDiscord> <haxscramper> I don't. What do you mean by "read pragmas" anyway?
