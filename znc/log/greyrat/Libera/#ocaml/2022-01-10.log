[00:18:51] *** Joins: olle (~olle@i5E866D83.versanet.de)
[00:20:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[00:20:53] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[01:04:33] *** Quits: mro (~mro@port-92-195-248-12.dynamic.as20676.net) (Ping timeout: 256 seconds)
[01:09:25] *** Joins: mro (~mro@2002:5cc3:f80c:0:bdac:e51c:defd:8d12)
[01:10:51] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:11:04] *** Joins: bartholin (~bartholin@109.53.7.201)
[01:13:16] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[01:37:01] *** Quits: bartholin (~bartholin@109.53.7.201) (Ping timeout: 240 seconds)
[01:57:36] *** Joins: bartholin (~bartholin@109.53.7.50)
[02:22:42] *** Quits: bartholin (~bartholin@109.53.7.50) (Quit: Leaving)
[02:25:10] *** Quits: olle (~olle@i5E866D83.versanet.de) (Ping timeout: 256 seconds)
[02:25:18] *** Quits: mro (~mro@2002:5cc3:f80c:0:bdac:e51c:defd:8d12) (Quit: Leaving...)
[02:33:01] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 240 seconds)
[02:39:03] <rgrinberg> Leonidas \o/
[02:56:40] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Remote host closed the connection)
[02:57:31] *** Joins: rgrinberg (~textual@177.246.219.153)
[03:23:01] *** Quits: bobo_ (~bobo@37.166.172.250) (Ping timeout: 240 seconds)
[03:23:13] *** Joins: bobo_ (~bobo@37.172.121.110)
[03:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:37:08] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:51:48] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi) (Quit: Leaving.)
[04:04:52] *** Joins: Soni (~quassel@autistic.space)
[04:27:59] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:28:07] *** Quits: rgrinberg (~textual@177.246.219.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:28:30] *** Joins: wagle (~wagle@quassel.wagle.io)
[04:31:09] <dh`> in ocamlyacc, is it a bug if accidentally pasting two copies of a rule breaks the world? or is this a consequence of some undocumented "feature"?
[05:05:10] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[05:54:37] *** Joins: mbuf (~Shakthi@182.77.103.82)
[05:55:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:56:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[06:03:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:09:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:11:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:12:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:35:22] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[06:36:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:47:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:14:36] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:16:20] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[07:16:48] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:26:33] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:34:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:05:25] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[08:06:53] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:09:24] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:12:00] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:12:22] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:13:44] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:14:05] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:19:59] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:20:22] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:22:40] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:23:01] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:26:12] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:28:20] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:28:34] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:28:47] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[08:56:15] *** Joins: olle (~olle@p5784cb5f.dip0.t-ipconnect.de)
[09:02:43] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:47:59] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[10:15:40] <d_bot> <rbjorklin> Has this been merged and/or released?
[10:17:35] <d_bot> <rbjorklin> Answering my own question, looks like it was merged ~22h ago: https://github.com/mirage/ocaml-cohttp/pull/819
[10:24:56] *** Joins: jlrnick (~josephler@2a01cb040a159400795fee19f0d3d4c0.ipv6.abo.wanadoo.fr)
[10:27:02] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[10:27:15] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[10:34:17] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 240 seconds)
[10:42:15] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[10:47:38] *** Quits: jlrnick (~josephler@2a01cb040a159400795fee19f0d3d4c0.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[11:22:51] <d_bot> <mseri> There is still some work to do, but it will be in the next release. You can already try it out by pinning the master branch
[11:39:31] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (*.net *.split)
[11:39:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (*.net *.split)
[11:39:31] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[11:39:31] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[11:39:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[11:39:31] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[11:39:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[11:39:32] *** Quits: notnotdan (~notd@v22019068545391262.megasrv.de) (*.net *.split)
[11:39:32] *** Quits: sadiq (~sadiq@toao.com) (*.net *.split)
[11:39:32] *** Quits: shawnw (~shawn_w@152.44.212.188) (*.net *.split)
[11:39:32] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[11:39:32] *** Quits: d_bot (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027) (*.net *.split)
[11:39:32] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (*.net *.split)
[11:39:32] *** Quits: jsoo (~znc@irc.refl.club) (*.net *.split)
[11:39:32] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: rom1504 (rom1504@rom1504.fr) (*.net *.split)
[11:39:32] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[11:39:32] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[11:39:32] *** Quits: nfc_ (nfc@tilde.institute) (*.net *.split)
[11:39:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[11:39:32] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[11:39:33] *** Quits: theblatt1 (~theblatte@82-71-49-100.dsl.in-addr.zen.co.uk) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[11:39:33] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[11:39:33] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[11:39:33] *** Quits: Absalom (kax@envs.net) (*.net *.split)
[11:39:33] *** Quits: grobe0ba (~grobe0ba@mars.pulpie.xyz) (*.net *.split)
[11:39:33] *** Quits: Enjolras (~enjolras@139.99.101.27) (*.net *.split)
[11:39:34] *** Quits: haesbaert (~haesbaert@195.95.187.184) (*.net *.split)
[11:39:34] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: v0idpwn (sid483136@id-483136.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: chiastre (~chiastre@user/chiastre) (*.net *.split)
[11:39:34] *** Quits: nore (~nore@217.69.13.67) (*.net *.split)
[11:39:34] *** Quits: copy (~copy@2604:a880:800:10::1e0a:8001) (*.net *.split)
[11:39:34] *** Quits: klu (~klu@user/klu) (*.net *.split)
[11:39:35] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[11:39:35] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (*.net *.split)
[11:39:35] *** Quits: olle (~olle@p5784cb5f.dip0.t-ipconnect.de) (*.net *.split)
[11:39:35] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:35] *** Quits: qwr (~qwr@173-97-46-176.dyn.estpak.ee) (*.net *.split)
[11:39:35] *** Quits: johnel (~johnel@185.157.234.34) (*.net *.split)
[11:39:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: gahr (~gahr@user/gahr) (*.net *.split)
[11:39:36] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[11:39:36] *** Quits: lobo (~lobo@user/lobo) (*.net *.split)
[11:39:36] *** Quits: kandu (~kandu@138.68.48.10) (*.net *.split)
[11:39:36] *** Quits: omni (~user@shellbox.hack.org) (*.net *.split)
[11:39:36] *** Quits: andreypopp (~andreypop@94.188.42.16) (*.net *.split)
[11:39:36] *** Quits: arg__ (~arthur@ns3054037.ip-91-121-134.eu) (*.net *.split)
[11:39:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[11:39:37] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[11:39:37] *** Quits: companion_cube (~simon@user/companion-cube) (*.net *.split)
[11:39:37] *** Quits: habnabit_ (~habnabit@python/site-packages/habnabit) (*.net *.split)
[11:39:37] *** Quits: ocabot (~coucoubot@134.209.175.17) (*.net *.split)
[11:39:37] *** Quits: wingsorc (~wingsorc@user/wingsorc) (*.net *.split)
[11:39:38] *** Quits: Sofi[m] (~sofi@2001:470:69fc:105::1:44cc) (*.net *.split)
[11:39:38] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[11:39:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:39:39] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (*.net *.split)
[11:39:39] *** Quits: zozozo (~zozozo@gbury.eu) (*.net *.split)
[11:39:39] *** Quits: fds (franki@triton.blinkenshell.org) (*.net *.split)
[11:39:39] *** Quits: ejones (~jones@167.88.120.129) (*.net *.split)
[11:39:39] *** Quits: mclovin (~zapashcan@2001:470:69fc:105::43) (*.net *.split)
[11:39:40] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[11:39:40] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[11:39:40] *** Quits: rustyne (c7dec7c28e@2604:bf00:561:2000::1ab) (*.net *.split)
[11:39:41] *** Quits: chrisz (xn79syhhdp@55d4ea59.access.ecotel.net) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:42] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[11:39:42] *** Quits: beise (~beise@85.17.52.17) (*.net *.split)
[11:39:42] *** Quits: ccx (~ccx@82.142.125.46) (*.net *.split)
[11:39:42] *** Quits: dmbaturin (~dmbaturin@vyos/developer/dmbaturin) (*.net *.split)
[11:39:42] *** Quits: dh` (~dholland@netbsd/developer/dholland) (*.net *.split)
[11:39:43] *** Quits: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65) (*.net *.split)
[11:39:43] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: rks` (~trefis@ns366843.ip-37-59-60.eu) (*.net *.split)
[11:39:43] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[11:39:44] *** Quits: Johann (~johann@user/johann) (*.net *.split)
[11:39:44] *** Quits: nimaje (~nimaje@bureaucracy.bureaucracy.de) (*.net *.split)
[11:39:44] *** Quits: Armael (~Armael@macaron.isomorphis.me) (*.net *.split)
[11:39:44] *** Quits: dinosaure (~dinosaure@163.172.65.89) (*.net *.split)
[11:39:44] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[11:39:44] *** Quits: octachron (~octachron@2a01:4f8:1c1c:69ae::1) (*.net *.split)
[11:39:44] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[11:39:44] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[11:39:44] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (*.net *.split)
[11:39:44] *** Quits: Geekingfrog (geekingfro@2a01:7e01::f03c:92ff:fe48:8bdf) (*.net *.split)
[11:39:44] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (*.net *.split)
[11:39:44] *** Quits: thizanne (~thibault@ns333098.ip-37-187-125.eu) (*.net *.split)
[11:39:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[11:39:45] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[11:39:45] *** Quits: Leonidas (~Leonidas@user/leonidas) (*.net *.split)
[11:39:45] *** Quits: dy (~dy@user/dy) (*.net *.split)
[11:39:45] *** Quits: sim642 (~simmo@europium.sim642.eu) (*.net *.split)
[11:45:01] *** Joins: johnel (~johnel@185.157.234.34)
[11:51:44] *** Joins: qwr (~qwr@173-97-46-176.dyn.estpak.ee)
[11:51:44] *** Joins: mro (~mro@2002:5cc3:ad64:0:dcf5:8a5c:320:aef2)
[11:51:44] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:51:44] *** Joins: sagax (~sagax_nb@user/sagax)
[11:51:44] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:51:44] *** Joins: olle (~olle@p5784cb5f.dip0.t-ipconnect.de)
[11:51:44] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[11:51:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:51:44] *** Joins: mbuf (~Shakthi@182.77.103.82)
[11:51:44] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[11:51:44] *** Joins: wagle (~wagle@quassel.wagle.io)
[11:51:44] *** Joins: Soni (~quassel@autistic.space)
[11:51:44] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:51:44] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:51:44] *** Joins: greenbagels (~gb@user/greenbagels)
[11:51:44] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[11:51:44] *** Joins: notnotdan (~notd@v22019068545391262.megasrv.de)
[11:51:44] *** Joins: sadiq (~sadiq@toao.com)
[11:51:44] *** Joins: shawnw (~shawn_w@152.44.212.188)
[11:51:44] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[11:51:44] *** Joins: chrisz (xn79syhhdp@55d4ea59.access.ecotel.net)
[11:51:44] *** Joins: mclovin (~zapashcan@2001:470:69fc:105::43)
[11:51:44] *** Joins: epony (~epony@user/epony)
[11:51:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[11:51:44] *** Joins: gahr (~gahr@user/gahr)
[11:51:44] *** Joins: tomku (~tomku@user/tomku)
[11:51:44] *** Joins: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65)
[11:51:44] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[11:51:44] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[11:51:44] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[11:51:44] *** Joins: Sofi[m] (~sofi@2001:470:69fc:105::1:44cc)
[11:51:44] *** Joins: ocabot (~coucoubot@134.209.175.17)
[11:51:44] *** Joins: habnabit_ (~habnabit@python/site-packages/habnabit)
[11:51:44] *** Joins: companion_cube (~simon@user/companion-cube)
[11:51:44] *** Joins: drewolson (~drewolson@user/drewolson)
[11:51:44] *** Joins: dstein64 (~dstein64@dannyadam.com)
[11:51:44] *** Joins: arg__ (~arthur@ns3054037.ip-91-121-134.eu)
[11:51:44] *** Joins: andreypopp (~andreypop@94.188.42.16)
[11:51:44] *** Joins: omni (~user@shellbox.hack.org)
[11:51:44] *** Joins: kandu (~kandu@138.68.48.10)
[11:51:44] *** Joins: lobo (~lobo@user/lobo)
[11:51:44] *** Joins: v0idpwn (sid483136@id-483136.helmsley.irccloud.com)
[11:51:44] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[11:51:44] *** Joins: haesbaert (~haesbaert@195.95.187.184)
[11:51:44] *** Joins: Enjolras (~enjolras@139.99.101.27)
[11:51:44] *** Joins: grobe0ba (~grobe0ba@mars.pulpie.xyz)
[11:51:44] *** Joins: Absalom (kax@envs.net)
[11:51:44] *** Joins: kurfen (~kurfen@176.119.195.10)
[11:51:44] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[11:51:44] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[11:51:44] *** Joins: theblatt1 (~theblatte@82-71-49-100.dsl.in-addr.zen.co.uk)
[11:51:44] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:51:44] *** Joins: d_bot (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027)
[11:51:44] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[11:51:44] *** Joins: klu (~klu@user/klu)
[11:51:44] *** Joins: copy (~copy@2604:a880:800:10::1e0a:8001)
[11:51:44] *** Joins: nore (~nore@217.69.13.67)
[11:51:44] *** Joins: chiastre (~chiastre@user/chiastre)
[11:51:44] *** Joins: ejones (~jones@167.88.120.129)
[11:51:44] *** Joins: zozozo (~zozozo@gbury.eu)
[11:51:44] *** Joins: bronsen (~bronsen@2a04:d480:0:1::3)
[11:51:44] *** Joins: Exa (exa@irc.moe)
[11:51:44] *** Joins: fds (franki@triton.blinkenshell.org)
[11:51:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:51:44] *** Joins: rustyne (c7dec7c28e@2604:bf00:561:2000::1ab)
[11:51:44] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[11:51:44] *** Joins: gdd (~gdd@129.199.146.230)
[11:51:44] *** Joins: octachron (~octachron@2a01:4f8:1c1c:69ae::1)
[11:51:44] *** Joins: dinosaure (~dinosaure@163.172.65.89)
[11:51:44] *** Joins: Armael (~Armael@macaron.isomorphis.me)
[11:51:44] *** Joins: nimaje (~nimaje@bureaucracy.bureaucracy.de)
[11:51:44] *** Joins: Johann (~johann@user/johann)
[11:51:44] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[11:51:44] *** Joins: slothby (~JoshAshby@irc.isin.space)
[11:51:44] *** Joins: rks` (~trefis@ns366843.ip-37-59-60.eu)
[11:51:44] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[11:51:44] *** Joins: beise (~beise@85.17.52.17)
[11:51:44] *** Joins: lisq (~quassel@lis.moe)
[11:51:44] *** Joins: dh` (~dholland@netbsd/developer/dholland)
[11:51:44] *** Joins: dmbaturin (~dmbaturin@vyos/developer/dmbaturin)
[11:51:44] *** Joins: ccx (~ccx@82.142.125.46)
[11:51:44] *** Joins: sim642 (~simmo@europium.sim642.eu)
[11:51:44] *** Joins: dy (~dy@user/dy)
[11:51:44] *** Joins: Leonidas (~Leonidas@user/leonidas)
[11:51:44] *** Joins: asm (~alexander@user/asm)
[11:51:44] *** Joins: jakzale (6291399afa@user/jakzale)
[11:51:44] *** Joins: thizanne (~thibault@ns333098.ip-37-187-125.eu)
[11:51:44] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[11:51:44] *** Joins: Geekingfrog (geekingfro@2a01:7e01::f03c:92ff:fe48:8bdf)
[11:51:44] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[11:51:44] *** Joins: nfc_ (nfc@tilde.institute)
[11:51:44] *** Joins: leah2 (~leah@vuxu.org)
[11:51:44] *** Joins: rom1504 (rom1504@rom1504.fr)
[11:51:44] *** Joins: unyu (~pyon@user/pyon)
[11:51:44] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[11:51:44] *** Joins: jsoo (~znc@irc.refl.club)
[11:51:44] *** Joins: _tjr_ (~tjr@233.ip-144-217-92.net)
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:08] *** Quits: d_bot (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027) (Excess Flood)
[11:52:09] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:52:09] *** Joins: epony (~epony@user/epony)
[11:52:09] *** Joins: d_bot (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027)
[11:55:39] *** Quits: qwr (~qwr@173-97-46-176.dyn.estpak.ee) (Ping timeout: 256 seconds)
[11:55:46] *** Joins: qwr (~qwr@173-97-46-176.dyn.estpak.ee)
[12:37:50] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:38:09] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:42:19] *** Joins: bartholin (~bartholin@158.110.70.210)
[12:49:31] *** Joins: olle_ (~olle@i5E866D84.versanet.de)
[13:12:18] *** Quits: olle_ (~olle@i5E866D84.versanet.de) (Ping timeout: 256 seconds)
[13:14:41] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:15:00] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[13:20:53] <ns12> What is this ocaml-cohttp? Is it a HTTP server?
[13:23:32] <d_bot> <undu> it's a library for making http servers and clients
[13:25:17] <ns12> Why not make a HTTP server instead of a library for making HTTP servers? Isn't it a bit unusual to make a library for making HTTP servers. Apache HTTPd and NGINX are not built using an existing library for making HTTP servers ...
[13:27:22] <d_bot> <undu> allows sharing code between unix servers and unikernel-based servers
[13:28:26] <d_bot> <undu> in any case it also allows you to do http clients
[14:01:09] <ns12> cohttp and httpaf do the same thing?
[14:19:22] *** Joins: kakadu (~kakadu@195.19.236.234)
[14:26:33] <Leonidas> ns12: I am not sure httpaf has a client library
[14:35:25] *** Joins: jlrnick (~josephler@gw.lipn.univ-paris13.fr)
[14:36:26] <d_bot> <mseri> Indeed, there is piaf that uses httpaf: https://github.com/anmonteiro/piaf
[14:37:43] <d_bot> <mseri> (or a fork of httpaf)
[15:04:32] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:22:46] *** Joins: spip (~bobo@37.165.237.23)
[15:23:12] *** Quits: bobo_ (~bobo@37.172.121.110) (Ping timeout: 256 seconds)
[15:36:18] *** Quits: mro (~mro@2002:5cc3:ad64:0:dcf5:8a5c:320:aef2) (Remote host closed the connection)
[15:57:47] <d_bot> <leviroth> It’s entirely normal to have libraries for writing HTTP servers. For example, the people who made Twitter or Facebook had to use such libraries. It’s not as if those sites are just configurations of nginx.
[16:10:27] *** Joins: Haudegen (~quassel@91.114.49.10)
[16:13:49] *** Quits: jlrnick (~josephler@gw.lipn.univ-paris13.fr) (Ping timeout: 240 seconds)
[16:19:21] <d_bot> <VPhantom> Even behind Nginx, it can be easier to serve HTTP vs FastCGI. I'm rusty with the latter but I think it's easier to deal with custom headers in the former.
[16:30:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:40:30] <Leonidas> Yes, for the most part it is just easier to integrate with HTTP than other protocols like FCGI or SCGI or CGI.
[16:43:09] *** Joins: Guest17 (~Guest17@wificampus-097061.grenet.fr)
[16:44:37] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[16:45:32] *** Joins: xiongxin (~Thunderbi@113.116.34.15)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:00:12] *** Quits: olle (~olle@p5784cb5f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:02:26] *** Quits: Guest17 (~Guest17@wificampus-097061.grenet.fr) (Quit: Client closed)
[17:07:20] *** Joins: olle (~olle@p5784cb5f.dip0.t-ipconnect.de)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:41:09] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[17:48:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[17:48:40] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[17:48:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:53:13] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Ping timeout: 256 seconds)
[18:03:44] *** Joins: mro (~mro@2002:5cc3:ad64:0:dcf5:8a5c:320:aef2)
[18:04:46] *** Quits: mro (~mro@2002:5cc3:ad64:0:dcf5:8a5c:320:aef2) (Remote host closed the connection)
[18:05:41] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[18:10:45] <sadiq> https://github.com/ocaml/ocaml/commit/001997e81342fd0d321fd877b73608150601e7d9
[18:11:11] <companion_cube> :o :o
[18:11:12] <companion_cube> congrats
[18:14:11] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[18:15:05] <d_bot> <VPhantom> Yay!!
[18:16:41] *** Quits: xiongxin (~Thunderbi@113.116.34.15) (Remote host closed the connection)
[18:17:00] *** Joins: xiongxin (~Thunderbi@113.116.35.64)
[18:19:08] <theblatt1> insane! <3
[18:19:12] *** theblatt1 is now known as theblatte
[18:22:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[18:24:04] <d_bot> <undu> yuss!!
[18:29:54] <ns12> OCaml now supports multicore?
[18:31:33] <octachron> OCaml 5.0 (which is expected to be released around March/April) will.
[18:32:06] <companion_cube> time to work on multicore containers :-°
[18:32:36] <ns12> How long have people been waiting for this?
[18:32:45] <companion_cube> my wet finger says 15 years
[18:33:06] <ns12> This must be such a happy day.
[18:33:22] <olle> woa
[18:33:32] <olle> another circle jerk dies :(
[18:33:37] <olle> (after go got generics too)
[18:34:25] <ns12> octachron: What's going to happen between now and OCaml 5.0? Mostly bugfixes?
[18:35:16] <olle> typed effects, duh
[18:35:27] *** Joins: xiongxin1 (~Thunderbi@113.116.35.64)
[18:35:36] <d_bot> <undu> and modular implicits
[18:35:49] <octachron> OCaml 4.14 which is essentially 5.0 twin without the multicore bells and whistles will be released around February.
[18:36:17] *** Quits: xiongxin (~Thunderbi@113.116.35.64) (Ping timeout: 256 seconds)
[18:36:17] *** xiongxin1 is now known as xiongxin
[18:36:20] <olle> and affine types
[18:36:25] <companion_cube> not going to happen
[18:36:27] <companion_cube> (afaik)
[18:36:28] <olle> :D
[18:36:31] <olle> jk
[18:36:40] <octachron> Otherwise, it would be essentially bug fixes and maybe some porst to few more architectures or OSs.
[18:37:14] <octachron> Not going to happen, except if you are thinking of plutonian months.
[18:38:21] <ns12> Do you think there will be a resurgence of interest in OCaml?
[18:38:48] <olle> Only if it has really impressive benchmarks
[18:40:06] <companion_cube> not necessarily, it serves to remove the knee-jerk "but Ocaml is a toy, it's not multicore"
[18:41:02] <olle> mm
[18:41:07] <octachron> There is also the effect system that might attract some interest.
[18:41:14] <olle> So who's doing the language benchmark games? :D
[18:44:15] <d_bot> <Et7f3> https://programming-language-benchmarks.vercel.app 👀
[18:44:31] <d_bot> <Et7f3> I remember another site but can't find URL
[18:45:02] <d_bot> <Et7f3> maybe it is the same and they changed the css and host
[18:45:11] <ns12> Aren't there some benchmarks in the pull request itself? https://github.com/ocaml/ocaml/pull/10831
[18:47:12] <d_bot> <Et7f3> I remember orange website maybe it is this one https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html 🤷
[18:53:18] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[18:53:35] <d_bot> <mseri> Multicore is merged to ocaml trunk 🥳🥳🥳
[18:55:13] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[18:57:33] <d_bot> <mseri> Yes the benchmarks come from https://github.com/ocaml-bench/sandmark
[18:58:57] *** Quits: xiongxin (~Thunderbi@113.116.35.64) (Ping timeout: 256 seconds)
[19:00:23] *** Joins: xiongxin (~Thunderbi@119.123.103.1)
[19:06:48] <d_bot> <VPhantom> It'll be interesting to see something Eio-based in Techempower benchmarks eventually. There seems to be real potential to rival Rust and friends now.
[19:10:30] <d_bot> <hcarty> Congratulations @sadiq and everyone involved in the multicore work over the past several years! It was an enormous effort
[19:11:37] <d_bot> <mseri> Indeed. The numbers here look promising: https://github.com/ocaml-multicore/retro-httpaf-bench/pull/16
[19:11:51] <d_bot> <mseri> Maybe better to wait for 5.0 to actually be released though
[19:12:10] <d_bot> <VPhantom> Of course.
[19:13:23] *** Quits: xiongxin (~Thunderbi@119.123.103.1) (Remote host closed the connection)
[19:15:02] <sadiq> hcarty: thanks!
[19:18:04] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[19:27:48] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[19:53:45] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[19:54:19] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[19:57:34] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:ff6c:f852:4f52:5e7c)
[20:10:31] *** Joins: Everything (~Everythin@37.115.210.35)
[20:11:32] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:19:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[20:21:48] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:24:23] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[20:26:23] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[20:35:29] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:47:32] <d_bot> <rgrinberg> There was always that potential with trivial multi process arch.
[21:01:34] <olle> In particular, numbers should look good compared to F#, Scala, Haskell
[21:10:17] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[21:10:52] <d_bot> <RegularSpatula> Could you explain a bit why that would be?
[21:14:13] *** Quits: olle (~olle@p5784cb5f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:17:29] *** Quits: quernd (~quernd@boethin.uberspace.de) (Quit: The Lounge - https://thelounge.chat)
[21:19:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[21:20:13] *** Joins: quernd (~quernd@boethin.uberspace.de)
[21:25:12] <d_bot> <VPhantom> My understanding was that the benchmarks were already multi-process. I didn't dig into the source to find out though. That could explain why the initial benchmarks were so average. I expected OCaml higher up out of the gate (vs for example NodeJS which is also single-process).
[21:25:44] <companion_cube> a lot of core node.js functions are in C++
[21:25:55] <d_bot> <VPhantom> True, libuv or something like that.
[21:26:47] <d_bot> <VPhantom> I've seen bindings for it in OCaml, 1-2 projects, but I'm rooting for Eio since it's native.
[21:30:20] <d_bot> <Anurag> the reason to use libuv with OCaml was most likely not performance. It won't give you that much if you were already using epoll, kqueue etc either directly (like async does), or via libev like lwt does. What libuv might provide is a better tested IO loop that's tested on all major platforms.
[21:30:37] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[21:30:42] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[21:30:46] *** infinity0_ is now known as infinity0
[21:32:10] <Corbin> Yeah, libuv is portable but not especially fast. It's fast enough internally, but its default event loop is pretty bad at throughput and you'll need to write a small scheduler on top.
[21:36:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[21:36:56] *** Joins: mbuf (~Shakthi@182.77.103.82)
[21:43:50] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:56:05] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[22:01:04] <d_bot> <rgrinberg> nginx uses multiple processes to scale across cores. Nobody would claim that it is slow
[22:01:35] <d_bot> <rgrinberg> Web servers are embarrassingly parallel mostly. Especially the trivial ones in benchmarks. The issue lies elsewhere
[22:02:38] <d_bot> <Anurag> I don't particularly consider the techempower benchmarks to be the best source for presenting how useful a server library is, but FWIW there are multiple submissions for OCaml server libraries and some of them are using multi-processing, and some aren't.
[22:05:15] <d_bot> <VPhantom> I certainly never have.
[22:07:16] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[22:07:18] <d_bot> <VPhantom> That's actually why I never saw the need for built-in multicore support in OCaml (any more than in NodeJS) to achieve good performance for web-type services. Just spread requests across processes, like I did in my old C days and like NodeJS does to this day with its Cluster. — Now OCaml Multicore's effects however, and hence Eio, doing async I/O without promise monads, now _that_ is really intriguing to me. 😉
[22:09:14] <sadiq> where a multicore runtime is super useful is shared mutable state
[22:09:17] <d_bot> <VPhantom> It's not great, but TechEmpower is by far the most thorough benchmark for web services I could find to get a feel of a language-library combo. Basic service, JSON codec, PostgreSQL I/O.
[22:10:13] <sadiq> when I used to write high throughput stuff on the JVM we made really aggressive use of large in-memory caches
[22:11:04] <d_bot> <VPhantom> The kind of web services I deal with don't really have shared mutable state, I guess. We cache stuff in Redis and in per-connection memory, not much survives across connections beyond general configuration.
[22:11:59] <d_bot> <VPhantom> Although you're reminding me that I did have plans for in-process caches for things like exchange rate history and ACL rights, things that change rarely and that don't take too much space.
[22:12:18] <d_bot> <rgrinberg> I think in these trivial benchmarks there's no opportunity to cache much.
[22:12:46] <sadiq> for reference we were carrying out an auction (which involve a bit of ml as well) and getting the request out of the door in less than a single round-trip across AWS' network to our Redis.
[22:12:56] <d_bot> <VPhantom> I can't wait to see our ecommerce site fly on OCaml vs the current mod_perl stuff but I'm doing this solo, probably at least 2 years away from a decent prototype.
[22:13:28] <sadiq> even putting redis or memcache on the box, serializing back and forward starts to get expensive
[22:13:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:13:42] <d_bot> <rgrinberg> If this information isn't classified, what's the site?
[22:13:53] <d_bot> <VPhantom> Yeah that's seriously quick. Protobuf codecs are a drop in the ocean for us. 😛
[22:14:19] <sadiq> rgrindberg: I used to work in adtech.
[22:15:31] <companion_cube> in theory, empower benchmarks have some more elaborate sections that test dynamic queries
[22:15:32] <rgrinberg> sadiq the question was for VPhantom, but you cannot see this in IRC :)
[22:15:37] <sadiq> aah
[22:15:38] <companion_cube> not just returning a constant string or json
[22:15:40] <d_bot> <VPhantom> https://www.gxd.ca/ — It looks simple enough, but on the corporate side the pricing is extremely dynamic, depends on a lot of variables. Not visible from the outside is also where 80% of my work is: the ERP behind it.  Instead of jumping on something like Odoo we're going to try to rewrite our homebrew Perl ERP in OCaml, to fine-tune it to our needs.
[22:15:50] <d_bot> <VPhantom> Argh, gotcha.
[22:17:01] <rgrinberg> sadiq btw, it's typically hard to replace a redis cache with an in memory shared cache. How would you do failover or graceful upgrades without redis/memcache?
[22:18:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[22:18:06] <d_bot> <rgrinberg> @VPhantom how much traffic does that site get?
[22:18:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:18:59] <d_bot> <VPhantom> On GXD: part of our problem with Perl, aside from it being dynamic (lots of surprises in production months after the offending commit!) was lack of staff in Québec. That said I more or less convinced them that ReasonML was a gateway drug to OCaml to get help when we'll need it and that OCaml's type system would be key to having an extremely reliable end result. (They had been with a PHP based company for a couple of years and t
[22:21:52] <companion_cube> rgrinberg: is there a downside to wiping the cache when you restart your server?
[22:22:16] <d_bot> <VPhantom> @rgrinberg On a typical day, not that much. Maybe 10 requests per second at most. However there's the occasional promotions that can spike to… I'm not sure but we had close to 1000 orders per hour in a peak two years ago and it completely saturated our system; had to rework how it connects to their accounting back-end, etc. For my rewrite my personal benchmark is 10x the current scale so I want to be able to generate pages wit
[22:22:47] <companion_cube> 1000/hr is still less than 1/s
[22:22:53] <d_bot> <VPhantom> Those are orders, not page views.
[22:23:03] <companion_cube> so apples to oranges? :)
[22:23:16] <d_bot> <VPhantom> They have to register, confirm their e-mail, search for products, fool around in their shopping carts, enter payment info, etc.
[22:23:17] <rgrinberg> companion_cube if your service is slow without the cache, it seem pretty bad. especially if this will generate a massive load spike on the db.
[22:23:33] <d_bot> <VPhantom> Yeah it's because I don't have actual pages/hour from that period; we were too swamped to notice. 😉
[22:23:52] <companion_cube> heh, fair enough
[22:24:00] <companion_cube> I imagine you use redis with some persistence then
[22:24:29] <d_bot> <VPhantom> Some of our internal report pages cause 30K+ database requests. The site is _begging_ for a rewrite and it's on crutches until I can deliver it.
[22:24:42] <rgrinberg> companion_cube you would still need redis for sessions at least. it's very rare that your use case allows you to flush all user sessions down the drain on an upgrade
[22:24:54] <d_bot> <VPhantom> The old site doesn't even use Redis; this is for the upcoming one. The old site is… made of good intentions that didn't scale at all.
[22:25:42] <rgrinberg> VPhantom, without knowing much about the site, I would guess it's essentially bottlenecked by the db and the question of frameworks, protobufs, etc aren't even relevant
[22:25:49] <companion_cube> is there a reason why sessions can't be in the DB?
[22:25:59] <companion_cube> (I imagine the queries for that would be trivial)
[22:26:32] <rgrinberg> companion_cube depends on your db.
[22:27:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:21] <d_bot> <VPhantom> @rgrinberg Our typical web page delivery will spend about 25% of its time waiting for MySQL and 75% with Perl doing something itself. (This is now that I added in-process caching all over the place over the years.)
[22:27:53] <companion_cube> rgrinberg: sorry for all the questions. Are there DBs that are bad at such basic key/value queries?
[22:29:00] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:29:54] <d_bot> <VPhantom> @rgrinberg For sure rewriting things would be good, even in Perl, but the mere fact of choosing OCaml will cut CPU time by 20x or so. Combine that with better caching, judicious use of Redis for what it's best at (RPC queues, web session data) and better use of PostgreSQL and I think we'll have a real winner. (Our current system doesn't let MySQL do enough of what it does well, and often greps client-side. Ugh.)
[22:30:34] <rgrinberg> companion_cube If it's a write + read heavy load, I don't think any SQL will perform particularly well.
[22:31:01] <rgrinberg> not to mention they'd be a pain to scale in a cluster
[22:31:32] <companion_cube> so I hear
[22:31:41] <companion_cube> the alternative is to scale vertically, apparently :)
[22:33:17] <rgrinberg> VPhantom what are you doing in perl that is so cpu intensive?
[22:36:15] <d_bot> <VPhantom> It's the sum of a _lot_ of small parts. The low-hanging fruit have been picked. For example the style of query building that my predecessor chose involves a _lot_ of calling functions back and forth between modules (circular dependencies aplenty, even). A final query might involve bits generated by 25 different functions calling each other. For example getting a list of products a user can see is a pretty big SQL query, and then
[22:36:59] <d_bot> <VPhantom> Displaying any of our pages involves between 200 and 2000 distinct SQL queries, and there's rarely any query sent multiple times (now that I cache aggressively).
[22:44:15] <rgrinberg> doesn't seem like it is perl that's at fault :)
[22:44:29] <rgrinberg> but in any case, rewriting in OCaml is a lot of fun and there will be plenty of other benefits
[22:45:43] *** Joins: olle (~olle@i5E866D84.versanet.de)
[22:46:54] <d_bot> <VPhantom> Nah like I said, Perl consumes 75% of our waiting time and for sure a full rewrite in Perl would already be massively better, but I am incredibly fed up with Perl's dynamic types. Whenever I have to dive into his code to address a bug or change something, I inevitably am stuck with wondering "`$item`? What the heck does `$item` contain there?" …usually in a bit that I can't test on my own (long story for later, sync with our a
[22:47:13] *** Joins: Guest46 (~Guest46@165.225.76.177)
[22:47:33] *** Parts: Guest46 (~Guest46@165.225.76.177) ()
[22:47:49] <d_bot> <VPhantom> At least with OCaml I can just hit `\t` in Vim and Merlin tells me what my cursor is.
[22:54:03] <d_bot> <VPhantom> Of note: our Perl stuff was built under tight budgetary constraints in 2003-2012. Lots undocumented, poor test suite coverage. It's nicely OO but to the point of being very heavy. Now I've been given a "take as long as it takes" budget for the OCaml rewrite, which makes all the difference in the world.
[22:58:27] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[23:01:18] <rgrinberg> sadiq is there a C api for effects?
[23:04:36] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Remote host closed the connection)
[23:04:53] *** Joins: mro (~mro@port-92-195-173-100.dynamic.as20676.net)
[23:05:49] <sadiq> rgrinberg: no, not as far as I'm aware.
[23:06:14] <rgrinberg> :'(
[23:08:27] <sadiq> rgrinberg: re: caches withour redis. We had a database that stored canonical data and a pub-sub which informed the app servers they needed to refresh some particular bit of data (this was triggered by anything that updated info in the database).
[23:09:17] <sadiq> when a new app server came up it needed to pull in everything from scratch. We had read replicas set aside for this (but it took about ten minutes to bring up a new app server).
[23:09:46] <sadiq> we had a strategy for speeding that up but it never proved to be an issue, we only did rolling upgrades anyway.
[23:10:27] <sadiq> so basically each app server always had all the data it needed to service a request available in memory.
[23:20:34] *** Joins: jlrnick (~josephler@2a01cb040a15940000d35e859ebfbf6e.ipv6.abo.wanadoo.fr)
[23:38:29] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi)
[23:38:30] <rgrinberg> that's a sophisticated way to do it
[23:50:22] *** Quits: mro (~mro@port-92-195-173-100.dynamic.as20676.net) (Quit: Leaving...)
[23:52:08] <rgrinberg> companion_cube some bed time reading for you https://arxiv.org/abs/2201.02089
[23:52:56] <companion_cube> 100 pages :o
[23:53:49] <companion_cube> > BSON treats arrays as JSON objects [18] with stringified integral keys.
[23:53:54] <companion_cube> welp
[23:57:11] <rgrinberg> bson is a mongodb special right? i don't think it's used anywhere else
[23:57:26] <companion_cube> yeah I think that's the idea
[23:57:45] <companion_cube> there's not point in using it over msgpack or cbor anyway
[23:59:26] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
