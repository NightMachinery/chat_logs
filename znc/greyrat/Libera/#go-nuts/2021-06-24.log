[00:00:36] *** Parts: stdio (~stdio@2804:14c:f284:90e0::1002) ()
[00:02:59] *** Quits: DHowett (~dustin@kaus.howett.net) (Remote host closed the connection)
[00:06:50] <src> is there a more elegant terminology than saying "factored keyword form" :P
[00:06:52] <src> -> https://play.golang.org/p/ZzprWX04XOL
[00:07:12] <src> is that even a description that makes any sense?
[00:08:20] <Tv_> no
[00:08:35] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:08:42] <Tv_> "grouping the variable declarations"?
[00:08:52] <foobaz> naming things is famously one of only two hard things in computer science
[00:09:05] <Tv_> the spec has no special name for the paren format
[00:09:33] <src> I think I know this one, but can't remember exactly, so foobaz ... what's the other hard thing?
[00:09:45] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:09:51] <Tv_> i think you mean "what are the other two things"
[00:10:33] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[00:10:38] <foobaz> cache invalidation
[00:10:39] *** Joins: dr0n (~nabromov@217.138.202.108)
[00:11:01] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Quit: WeeChat 3.2)
[00:11:23] <src> apparently there are many quotes in this form
[00:11:35] <src> "There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors" :P
[00:11:42] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[00:11:45] <foobaz> some days i feel like i spend half my time trying to figure out what to call variables and functions
[00:12:14] <src> and then you call them foo bar baz etc
[00:12:17] <foobaz> aha so that's what Tv was referencing
[00:12:35] <src> it's funny you complaining about naming things given your nick :D
[00:12:40] <foobaz> lol
[00:12:56] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[00:14:14] <src> Tv_: k I almost thought so since I coudln't really look successfully for it online
[00:14:59] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[00:17:06] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:20:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:21:50] *** Joins: SincereFox (uid337158@user/sincerefox)
[00:21:59] *** Joins: dmathieu (~textual@78.203.212.55)
[00:28:30] <Rudde> How do I get json.Marshal to automatically output every key in snake case convention?
[00:31:39] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 265 seconds)
[00:33:38] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:34:06] *** Joins: Xjs (~jannis@user/xjs)
[00:34:47] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[00:36:26] <Tv_> Rudde: no magic
[00:39:07] <Rudde> What?
[00:39:40] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[00:39:44] <Tv_> there is no magic, no infinitely customizable rewrite layers, no DWIM, just a simple thing taking the name from the struct field or tag
[00:41:08] <Rudde> Well, I don't mind making a snakefier myself, I just need to get the json.Marshal thing to use it, or get it to prepare the structs for it somehow
[00:42:26] *** Joins: acidfu- (~nicolasbo@24-54-25-165.resi.cgocable.ca)
[00:43:16] <b0nn> Rudde: what exactly are you wanting to do?
[00:44:09] <Rudde> I the API to always return snake convention on the json keys
[00:44:31] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:44:32] <Tv_> Rudde: struct tags can rename fields
[00:44:50] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[00:45:12] <Rudde> Yes, I know, that's why I asked for an automated way, it will always be snake case, nothing else is relevant
[00:45:24] <Rudde> completely pointless douplicating hundres of element
[00:45:29] <b0nn> Rudde: sorry it's early morning here, you're going to have to expand on your requirements a little for me
[00:45:33] <Rudde> and keep duplicateing them when they are changed
[00:47:03] <Rudde> If I have a struct with like type Model struct { FirstName string, PhoneNumber string } I will always want them to be processed to JSON { "first_name": "", "phone_number": "" }
[00:47:28] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[00:47:51] *** Joins: c10l (~c10l@89.34.167.207)
[00:48:09] <Tv_> there are no infinitely customizable rewrite layers...
[00:49:24] <deafpiano> there are extensions to editors and you can use //go:generate with https://github.com/fatih/gomodifytags it does it during editing/build rather then at run time
[00:49:50] <Rudde> Well, go is a programming language so of course it's infinitely customizable. The question is then I guess, if I would have to reimplement json.Marshal entirely from scratch? :S
[00:50:01] <foobaz> no, you can use struct tags
[00:50:19] <Rudde> No, that's duplication, not automation
[00:50:24] <foobaz> if you wish to automate the struct tags, you will need to do that yourself, go does not offer such functionality
[00:50:47] <Rudde> I can't automate struct tags either, I've tried :/
[00:51:08] <foobaz> perhaps not at runtime, but have you considered automating them ahead of time?
[00:51:23] <foobaz> write a script to generate .go files with your structs in them
[00:51:48] <Tv_> no, go is very much not infinitely customizable
[00:51:58] <foobaz> it's turing complete isn't it?
[00:52:08] <foobaz> how much more customizable can you get
[00:52:12] <Tv_> foobaz: you can write such things in go, that doesn't make go change
[00:52:38] <Rudde> That's a preprocessor, I would prefer to avoid it, I don't want to dicate and debug every workstation being set up correctly and validate all of this on every commit
[00:53:00] <foobaz> maybe it is possible to do the struct tags at runtime
[00:53:01] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:6c60:cc17:23fd:bf78) (Quit: Leaving)
[00:53:13] <Tv_> foobaz: yes. eww.
[00:53:19] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:53:22] <foobaz> unfortunately i don't have much expertise with the reflect package so i can't help with that
[00:53:37] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[00:53:39] <Rudde> reflect doesn't offer a set on tags at least :(
[00:53:50] <foobaz> b0nn: east asia?
[00:53:53] <Tv_> you can't change preexisting types, that's insanity
[00:54:15] <Rudde> tags?
[00:54:17] <Rudde> or types?
[00:54:25] <foobaz> the tag is part of the type
[00:54:38] *** Joins: warl (~warl@2601:647:5e80:45bc:bcfa:bc64:c1b2:b2cd)
[00:54:38] *** Quits: warl (~warl@2601:647:5e80:45bc:bcfa:bc64:c1b2:b2cd) (Changing host)
[00:54:38] *** Joins: warl (~warl@user/warl)
[00:56:00] <Rudde> Well if I could have named my variables in accordance with what they're expected to look like that would work, but go don't let you name things in snake case without changing its export behavior
[00:56:17] <Rudde> Can I get marshal to ignore that and export them anyway?
[00:56:23] <foobaz> no
[00:56:30] <foobaz> i don't like that about go either but there's not much we can do about it
[00:57:11] <Rudde> The offical go-to is actually to duplicate names inches apart?
[00:57:22] <Tv_> they're not duplicates, they're different names...
[00:57:29] <foobaz> yes
[00:57:39] <Rudde> They wouldn't be if I wasn't forced to
[00:58:13] <foobaz> there is a reason 80% of the questions we get in here relate to JSON deserialization
[00:58:28] <Tv_> yes, json.
[00:58:35] <Rudde> So shouldn't it be addressed?
[00:58:36] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[00:58:44] <foobaz> keep drinking that kool-aid
[00:58:52] <Tv_> Rudde: the trade-off is still toward simple things
[00:59:01] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:59:15] <Rudde> I don't think it's simple at all to reimplement json.Marshal I would like to avoid that
[00:59:49] <foobaz> whether or not the language should be changed to address your issues is not a productive discussion to have
[01:00:05] <foobaz> we are not in charge of go, we are simply users of the language like yourself
[01:00:16] <foobaz> we don't have the power to change the language to make it how you like
[01:00:38] <Rudde> Well I won't be doing things like this for very long at least. So I guess my only option is to jump companies
[01:01:58] <b0nn> Or have a chat with whomever set your requirements
[01:02:00] <foobaz> let us know if you do, so we can apply for your job :)
[01:02:07] <jimeh> Rudde: your options basically boil down to code generation, or runtime reflection in custom Marshal/Unmarshal functions… for the code generation path, have a look at easyjson, it produces some interesting code from what I recall…
[01:02:31] <Tv_> no need to step out of the safety of encoding/json, https://github.com/betacraft/easytags
[01:03:05] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[01:03:30] <jimeh> Tv_: nice, I hadn’t seen that one :)
[01:03:54] <Tv_> jimeh: it takes less time to find solutions than people spend bitching on irc about lack thereof...
[01:04:00] *** Quits: LiftLeft2 (~LiftLeft@154.21.28.194) (Ping timeout: 252 seconds)
[01:04:33] <Rudde> I just don't like another thing I need to remember when I code
[01:04:41] <Rudde> I want my code to work as I write it
[01:04:52] <jimeh> Rudde: as for making sure people don’t forget to update generated code, simply add a code generation check step for your CI…
[01:05:23] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:06:05] <foobaz> you could add a runtime check when your program launches, that iterates over all structs, checks their tags, and panics if they are incorrect
[01:06:58] <fizzie> Rudde: I don't expect you *want* to do it, but you *can* make reflect do this. https://play.golang.org/p/98rQlSwIpLU
[01:07:11] <foobaz> then if people forget to run the code generation, they will know immediately, and the bad code won't get checked in
[01:07:15] <fizzie> (Providing ill-advised solutions since <insert year>.)
[01:07:29] <jimeh> Rudde: I hear ya, but it’s a trade off with the language design, you can’t dynamically change types which is getting in your way, but at the same time you have static types meaning lots of bugs are avoided compared to say Ruby…
[01:07:37] *** Joins: nabromov (~nabromov@94.11.23.235)
[01:07:58] <Tv_> more to the point, the *kind* of arbitrary changes encoding/json would have to accommodate to please everyone would make it much more complicated
[01:08:02] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[01:08:12] <Tv_> -> choose to have no arbitrary change mechanism
[01:08:47] <b0nn> For my sake, can someone explain why struct tags won't work?
[01:08:47] <Rudde> fizzie: Oh so I can change them!
[01:08:47] <jimeh> Also, “I want my code to work as I write it” could be taken to the extreme to mean that code should not be compiled ^_^
[01:08:53] <Rudde> That was quite nice
[01:08:59] <Rudde> I much prefer reflection over preprocessing
[01:09:05] <fizzie> Rudde: No, you can't *change* them, you can just make a new on-the-fly struct type with different tags.
[01:09:31] <jimeh> Rudde: keep in mind on the fly reflection will be slower
[01:09:32] <foobaz> i want my code to work as i intend it, not as i write it :)
[01:09:56] <ikke> I want my code to write itself
[01:10:04] <b0nn> 06:39 < foobaz> i want my code to work as i intend it, not as i write it :) <<-- gold
[01:10:05] <Tv_> foobaz: next level, as i *should* have intended, had i understood
[01:10:09] <Rudde> good enough, probably going to cost use some memory, but what I do to make development easy insted of making it cycle-easy
[01:10:17] <jimeh> Ikke: that’s the dream :D
[01:11:09] <jimeh> Yeah, dev time is often more expensive than CPU cycle time, but not always… lol
[01:11:16] *** Quits: dr0n (~nabromov@217.138.202.108) (Ping timeout: 246 seconds)
[01:12:06] <b0nn> jimeh: Yeah, it depends on the scale of your application too
[01:12:15] *** Quits: mytec (~mytec@ip70-175-212-138.ri.ri.cox.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:12:30] <Tv_> typing really isn't where i spend my dev time...
[01:12:42] <b0nn> like if you're creating something that's going to run several k instances of EC2 you're going to want to spend a bit more $ on devs :)
[01:13:08] <jimeh> Personally, I’d be more in favor of code generation or easytag, chances are you’ll want code generation for something at some point, and adding a CI to verify no changes happened after running `go generate` isn’t difficult :)
[01:13:32] <Tv_> also good luck debugging when there's reflect used all over the place
[01:13:40] <jimeh> *a CI step
[01:14:00] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[01:16:15] *** Parts: nabromov (~nabromov@94.11.23.235) ()
[01:16:20] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:16:22] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:16:34] *** Joins: mickey (~user@user/mickey)
[01:16:37] *** Joins: dr0n (~nabromov@94.11.23.235)
[01:17:09] *** Joins: LiftLeft2 (~LiftLeft@154.21.114.47)
[01:17:50] *** Joins: andlabs (~andlabs@71.190.119.164)
[01:20:21] *** Joins: siika (~siika@223.166.246.51)
[01:20:30] *** Quits: siika_ (~siika@139.226.50.205) (Ping timeout: 252 seconds)
[01:21:59] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:24:05] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:26:28] *** Joins: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de)
[01:27:57] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:28:41] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[01:34:43] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[01:35:31] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[01:36:58] *** Quits: gzj (~GZJ0X@96.45.188.88.16clouds.com) (Remote host closed the connection)
[01:39:18] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Read error: Connection reset by peer)
[01:40:34] *** Joins: Torr (~Torr@user/torr)
[01:40:34] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[01:44:55] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[01:45:59] <Rudde> fizzie: I think it got pretty nice with your proposal, I think it's a way better alternative to "it's impossible" at least :)
[01:48:02] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 268 seconds)
[01:48:07] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[01:48:29] <Tv_> ...nobody said that...
[01:48:47] <Rudde> Do you mean to tell me you didn't imply it?
[01:49:58] *** ghenry is now known as gavinhenry
[01:51:28] *** gavinhenry is now known as ghenry
[01:51:44] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 268 seconds)
[01:51:59] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[01:53:41] *** Quits: \r (jeda@hellomouse/dev/cryb.jeda) (Quit: //System Offline//)
[01:55:10] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:56:07] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[01:56:38] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[01:59:26] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:59:45] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[02:00:37] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[02:00:54] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[02:01:11] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[02:02:26] *** Quits: ariedro (~ariedro@user/ariedro) (Quit: WeeChat 3.2)
[02:02:56] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Client Quit)
[02:03:08] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[02:03:48] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:05:17] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[02:07:04] *** Quits: pepee (~user@user/pepee) (Ping timeout: 252 seconds)
[02:08:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:09:57] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[02:10:14] *** Quits: src (~src@user/src) (Quit: leaving)
[02:10:25] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[02:11:47] *** Joins: src (~src@user/src)
[02:12:57] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:13:02] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:14:17] <seebs> I dunno about exactly "impossible", but I can't think of a generic way to do it that will handle possibly-nested data structures, etcetera, without at least one custom json.Marshal implementation.
[02:14:17] *** Joins: MrFantastik (~Thunderbi@98.1.50.67)
[02:14:25] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[02:17:20] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:18:47] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[02:20:37] *** Joins: pepee (~user@user/pepee)
[02:25:28] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 246 seconds)
[02:30:09] *** acidsys is now known as LSD
[02:33:44] <LambdaComplex> is there a way to have cobra require global flags be placed before a subcommand? as opposed to using persistent flags (which get passed to the subcommand)
[02:34:00] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[02:34:13] *** Joins: goldfish (~goldfish@user/goldfish)
[02:36:28] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[02:38:24] *** Quits: siika (~siika@223.166.246.51) (Remote host closed the connection)
[02:38:47] *** Joins: siika (~siika@139.226.50.205)
[02:41:25] *** Quits: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:41:34] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[02:41:48] *** Joins: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de)
[02:47:29] *** Quits: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:51:32] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[02:54:40] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[02:54:59] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[02:57:43] <evidlo> what does it mean when a function has the form 'func (foo Foo) String() string {}`?
[02:57:48] <evidlo> e.g: https://github.com/tulir/mautrix-go/blob/master/id/opaque.go#L35
[02:57:52] <LambdaComplex> evidlo: which part?
[02:58:14] <LambdaComplex> evidlo: https://tour.golang.org/methods/1
[02:58:30] <b0nn> evidlo: it means that the type Foo has a method attached called "String" that returns a string
[02:58:31] <LambdaComplex> it's a method on type Foo called String() that returns a string
[02:58:38] <LambdaComplex> b0nn: jinx
[02:58:55] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[02:59:05] <b0nn> Also it's /not/ a pointer receiver
[02:59:27] <evidlo> so I can't directly use id.RoomAlias as a string, even though it's a string type?
[02:59:30] <LambdaComplex> evidlo: also worth noting that this implements the fmt.Stringer interface https://golang.org/pkg/fmt/#Stringer
[02:59:50] *** Joins: iauc (~iauc@cm-84.209.101.110.getinternet.no)
[02:59:58] <iauc> https://github.com/C2FO/vfs is pretty nifty
[03:00:01] <LambdaComplex> evidlo: no, you'd have to convert it like string(roomAlias)
[03:00:07] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[03:00:26] <LambdaComplex> hey b0nn did you actually /ignore me the other day? i'm curious
[03:00:45] <b0nn> evidlo: you should be able to use that as a string, yes
[03:00:47] <LambdaComplex> iauc: that does look nifty
[03:00:55] <LambdaComplex> evidlo: okay maybe i was wrong
[03:01:16] <evidlo> I get an error that it can't be used as type string
[03:01:16] <iauc> could use more work, but I have been using it and I am very happy to have it
[03:01:45] <LambdaComplex> okay i think i was actually right
[03:02:22] <b0nn> evidlo: show us what you are doing
[03:02:28] <b0nn> play.golang.org
[03:02:45] * LambdaComplex thinks b0nn did ignore him
[03:02:52] <LambdaComplex> https://play.golang.org/p/PKs4LBv2QAV
[03:03:12] <LambdaComplex> evidlo: i'm guessing that's what you're talking about?
[03:06:21] <b0nn> evidlo: hrm, my bad you have to tell your code that you are using id.RoomAlias as a string (and the converstion should be easy because id.RoomAlias has an underlying type of string)
[03:06:38] <b0nn> so string(is.RoomAlias("whatever"))
[03:08:52] *** Quits: src (~src@user/src) (Ping timeout: 246 seconds)
[03:10:40] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 265 seconds)
[03:11:44] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[03:14:50] *** Quits: jolof (~jolof@user/jolof) (Quit: leaving)
[03:16:55] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[03:20:45] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:21:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:24:10] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[03:24:56] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:25:32] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:26:10] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:26:25] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:26:55] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:28:26] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Quit: leaving)
[03:33:34] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[03:35:09] *** Quits: egy (egy@tilde.team) (Quit: ZNC 1.8.1 - https://znc.in)
[03:35:25] *** Quits: daegalus (~yulian@user/daegalus) (Ping timeout: 268 seconds)
[03:35:28] *** Joins: egy (egy@tilde.team)
[03:38:25] *** Joins: daegalus (~yulian@user/daegalus)
[03:38:46] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 250 seconds)
[03:40:36] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:42:39] *** Quits: thiccdaddy (~OwO@thiccdaddy.sexy) (Quit: Ping timeout (120 seconds))
[03:42:45] *** Quits: Ruxnor (~Kevin@user/kddlb) (Quit: Ping timeout (120 seconds))
[03:43:04] *** Joins: thiccdaddy (~OwO@thiccdaddy.sexy)
[03:43:14] *** Joins: Ruxnor (kevin@user/kddlb)
[03:45:39] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[03:47:19] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (Quit: MrFantastik)
[03:49:30] *** Quits: bloony (~bloony@2a02:2121:309:b13c:1c13:86d4:5401:3) (Ping timeout: 264 seconds)
[03:51:16] *** Quits: anticw_ (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[03:51:57] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[03:53:35] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[03:53:51] <jay_wild> does pprof expose any coverage-counter type data? like "how many times did this statement run" or "how much wall-time was spent on this line"?
[03:54:29] <Tv_> jay_wild: that is what its profiles approximate...
[03:54:32] <jemaclus> try it and see
[03:54:47] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:56:07] <jay_wild> I'm slowly getting the skill to piece together a profile and a trace, but am having a hard time for certain scenarios like "why did this thing take 2 seconds to process, but it's not using a ton of CPU during this time"
[03:56:45] <Tv_> jay_wild: https://blog.golang.org/pprof ?
[03:56:56] <jay_wild> it seems like profiles repeatedly snapshot the stack of running/runnable goroutines, not necessarily those that are waiting on IO
[03:57:28] <Tv_> sampling profilers sample the cpu
[03:57:33] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[03:57:56] <Tv_> if they see the cpu sitting idle, then they see the cpu sitting idle
[03:58:14] <jay_wild> hmmm, should probably dive deeper into the mutex/block stuff then
[04:00:04] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[04:01:09] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Client Quit)
[04:02:18] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[04:03:17] *** Joins: bloony (~bloony@2a02:2121:309:b13c:1c13:86d4:5401:3)
[04:12:38] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Quit: Leaving)
[04:15:27] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[04:30:00] *** Quits: jdrab (~jdrab@user/jdrab) (Quit: jdrab)
[04:30:35] *** Joins: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d)
[04:30:35] *** Quits: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d) (Changing host)
[04:30:35] *** Joins: jdrab (~jdrab@user/jdrab)
[04:31:37] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com)
[04:31:42] *** Joins: sono_ (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[04:34:37] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 246 seconds)
[04:38:07] *** Quits: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com) (Remote host closed the connection)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:33] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:56] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 252 seconds)
[04:49:02] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (Ping timeout: 272 seconds)
[04:49:40] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[04:51:09] *** Joins: w0x12ef_ (~w0x12ef@117.61.31.20)
[04:52:40] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[04:52:47] *** Quits: philmacfly (~philmacfl@galaxie.weltraumhochofen.space) (Ping timeout: 252 seconds)
[04:52:47] *** Quits: Chepra (~chepra@summer.c137.eu) (Ping timeout: 252 seconds)
[04:52:47] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Ping timeout: 252 seconds)
[04:53:01] *** LSD is now known as acidsys
[04:53:32] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[04:54:37] *** Joins: Chepra (~chepra@summer.c137.eu)
[04:54:49] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[04:55:13] *** Joins: dalan7 (~dalan@118.102.85.89)
[04:57:12] *** Quits: dalan (~dalan@110-175-186-185.tpgi.com.au) (Ping timeout: 252 seconds)
[04:57:12] *** dalan7 is now known as dalan
[05:01:09] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com)
[05:03:16] *** Joins: minimal22 (~m@201.219.236.82)
[05:04:52] <LambdaComplex> so i may or may not be confused about using http.MaxBytesReader
[05:05:12] <LambdaComplex> i have some existing code that's calling io.ReadAll on the request body
[05:05:50] <LambdaComplex> is this as easy as calling MaxBytesReader and then passing the returned ReadCloser to ReadAll instead?
[05:05:52] *** Quits: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com) (Client Quit)
[05:12:35] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:12:57] *** Quits: keiser009107 (~keiser@83.25.201.125.ipv4.supernova.orange.pl) (Ping timeout: 265 seconds)
[05:18:10] <minimal22> kill all programmers!
[05:18:13] *** Parts: minimal22 (~m@201.219.236.82) (going off the grid fuck u all)
[05:19:42] *** Joins: philmacfly (~philmacfl@galaxie.weltraumhochofen.space)
[05:20:46] <Tv_> LambdaComplex: yup, assuming you're using MaxBytesReader correctly
[05:21:21] <LambdaComplex> Tv_: well now I feel the need to ask what the correct way is
[05:21:29] <LambdaComplex> Tv_: or what's the incorrect way
[05:22:09] <Tv_> LambdaComplex: you can only start sending a response to ResponseWriter once
[05:24:08] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:24:18] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[05:24:33] *** Quits: acidfu- (~nicolasbo@24-54-25-165.resi.cgocable.ca) (Ping timeout: 265 seconds)
[05:35:22] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[05:36:46] <LambdaComplex> Tv_: okay i honestly haven't figured out why MaxBytesReader takes a responsewriter
[05:37:01] <LambdaComplex> i get the feeling that what you just said will make sense once i f igure that out
[05:37:19] <Tv_> the documentation doesn't really explain that, but the source is pretty easy to follow
[05:38:12] <LambdaComplex> it looks like the ResponseWriter is only used to see if Read is being called from server code or from client code?
[05:40:49] <Tv_> wat
[05:41:02] <Tv_> there's no ResponseWriter on the client side
[05:41:18] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Quit: Leaving)
[05:42:26] <Tv_> oh heh it's using the underlying internal thing for the client
[05:42:32] <LambdaComplex> https://golang.org/src/net/http/request.go?s=36939:37016#L1160
[05:42:34] <Tv_> and they made a weird abstraction over it
[05:42:55] <Tv_> anyway, that only explains why the call is conditional
[05:43:04] <Tv_> res.requestTooLarge is the meat
[05:43:08] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[05:44:01] <LambdaComplex> ahhh
[05:44:06] <LambdaComplex> i see. i think
[05:44:25] <LambdaComplex> if you read too much then MaxBytesReader will write a header
[05:49:38] <LambdaComplex> Tv_: does "if !w.wroteHeader" not solve the problem you're talking about though?
[05:49:42] <LambdaComplex> https://golang.org/src/net/http/server.go#L547
[05:49:45] *** Quits: GoodbyeVincent (~GoodbyeVi@55.15.95.92.rev.sfr.net) (Ping timeout: 258 seconds)
[05:50:03] <Tv_> the other way around
[05:50:10] <Tv_> if you say ok, MaxBytesReader can't say nope
[05:51:15] <LambdaComplex> i think i'm lost
[05:51:19] <LambdaComplex> what do you mean by "if you say ok"?
[05:51:41] <Tv_> if you send HTTP 200 OK response
[05:52:04] <LambdaComplex> ah, gotcha
[05:52:49] <LambdaComplex> so as long as my WriteHeader call is after my io.ReadAll(maxBytesReader) call, then i'm good?
[05:53:32] <LambdaComplex> i'm honestly kinda wondering if i should just use io.LimitReader
[05:53:39] <Tv_> and you don't do that on the error path, etc, then yes
[05:53:40] *** Quits: KekSi (~KekSi@x4db9b20c.dyn.telefonica.de) (Ping timeout: 252 seconds)
[05:53:52] <Tv_> io.LimitReader used in this scenario is a recipe for data loss
[05:54:11] <Tv_> consider io.LimitReader size 3 and what happens
[05:54:20] <LambdaComplex> because it'll just stop reading but the other side won't realize?
[05:54:25] <Tv_> neither side will
[05:54:47] <LambdaComplex> >and you don't do that on the error path
[05:54:50] <LambdaComplex> ...don't do what?
[05:54:54] <LambdaComplex> i am sorry if i sound very dumb today
[05:55:36] <Tv_> try send a response
[05:55:41] <Tv_> it's already done for you
[05:55:53] <Tv_> actually the opposite
[05:55:59] <Tv_> i appreciate the effort to read the source
[05:56:06] <Tv_> this is the way
[05:56:37] <LambdaComplex> what do you mean by "response" exactly? i see a header being written but not a status code
[05:57:09] <LambdaComplex> so wouldn't it be fine to send a status code after reading the maxBytesReader fails?
[05:58:12] <Tv_> basically any methods on ResponseWriter
[05:58:18] <Tv_> (not 100% true but close enough)
[05:58:31] <Tv_> if MaxBytesReader gives error, do not touch ResponseWriter
[05:58:33] *** Joins: KekSi (~KekSi@x4db6b464.dyn.telefonica.de)
[05:58:50] <Tv_> there's no such thing as HTTP header written without sending status
[05:58:58] <Tv_> literally starts with the status
[05:59:35] <LambdaComplex> i'm aware
[05:59:58] <LambdaComplex> but i don't see where maxBytesReader is actually _writing_ anything to the response
[06:00:03] <LambdaComplex> i just see where it's setting a header
[06:00:07] <Tv_> actually you know i may be off on that, i'm just reading the source myself
[06:00:30] <kn100> anyone know why time.Parse("Jan.2200603:04:PM", "Jun.4202110:12:AM") fails but time.Parse("Jan.2 200603:04:PM", "Jun.4 202110:12:AM") doesn't?
[06:00:46] <Tv_> LambdaComplex: yeah okay so *do* send an error reponse
[06:00:50] <Tv_> LambdaComplex: sorry for misleading
[06:00:59] <Tv_> LambdaComplex: i'm confusing it with some other helper
[06:01:08] <LambdaComplex> Tv_: no worries :D
[06:01:26] <Tv_> kn100: can you put that on play.golang.org?
[06:01:59] <Tv_> kn100: i think that comes down to whether a number is 2 and a space or 22
[06:02:21] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com)
[06:02:33] <kn100> Tv_ https://goplay.space/#EdYsqHyHKhs
[06:02:47] <kn100> I am trying to parse OCR output, for some context - hence the dumb date formatting
[06:08:09] <Tv_> kn100: i think you're bitten by 3pm = 15:00, 15:00 in tz -07:00 is 22:00 in UTC
[06:08:42] <Tv_> actually no, that can't be it, that logic doesn't exist in time.Parse
[06:09:04] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:09:05] <kn100> weird right
[06:09:23] <kn100> It's an awful format and I hate everything about it, but it feels like it should work heh
[06:11:07] *** Joins: oxum (~oxum@106.203.210.162)
[06:12:41] <Tv_> kn100: https://play.golang.org/p/HWY0OOCplE9 the last two
[06:13:17] <Tv_> kn100: first 2 consumes 42, then it doesn't?
[06:13:17] <kn100> so I guess it's just tripping up on the fact a day can have one or two digita
[06:13:21] <Tv_> yeah
[06:13:26] <kn100> that is...very odd
[06:13:43] *** Quits: siika (~siika@139.226.50.205) (Remote host closed the connection)
[06:14:11] *** Joins: siika (~siika@223.166.246.51)
[06:14:58] *** Joins: SincereFox (uid337158@user/sincerefox)
[06:16:55] <LambdaComplex> okay now about returning a proper response code...
[06:17:12] <LambdaComplex> this strikes me as slightly wrong https://stackoverflow.com/a/52880675
[06:17:25] <LambdaComplex> wouldn't it be possible to read up to the limit (but not exceed it) and then fail for an unrelated reason?
[06:17:48] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 250 seconds)
[06:21:44] *** Joins: orthoplex64 (~crm@70.120.0.94)
[06:22:36] *** Joins: siika_ (~siika@223.166.246.51)
[06:23:07] *** Quits: siika (~siika@223.166.246.51) (Ping timeout: 246 seconds)
[06:24:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[06:27:54] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 264 seconds)
[06:29:00] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[06:30:01] *** Quits: sztanpet (~sztanpet@user/sztanpet) (Quit: asd)
[06:31:37] *** Quits: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com) (Remote host closed the connection)
[06:32:01] *** Joins: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com)
[06:32:13] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 265 seconds)
[06:32:56] *** Joins: sztanpet (sztanpet@znc.sztanpet.net)
[06:32:56] *** Quits: sztanpet (sztanpet@znc.sztanpet.net) (Changing host)
[06:32:56] *** Joins: sztanpet (sztanpet@user/sztanpet)
[06:33:59] *** Joins: jespada (~jespada@90.254.247.46)
[06:36:01] <Tv_> LambdaComplex: i would say try to not care about the error
[06:36:52] <Tv_> LambdaComplex: and to make that trick work reliably, you need to do the old +1 trick: if you max valid input is 10 bytes, try reading 11; if that worked, it's bad
[06:37:18] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 252 seconds)
[06:41:56] <LambdaComplex> Tv_: isn't this exactly what a 413 Payload Too Large response is for though?
[06:43:00] *** Quits: Sam (b8f15a4bbd@smtp.cheogram.com) (Quit: Gateway shutdown)
[06:43:40] <Tv_> LambdaComplex: sure but 400 is fine
[06:43:46] <Tv_> is the client gonna do anything different
[06:44:15] <LambdaComplex> if you're ignoring the error from ReadAll then can you really distinguish between a client and server issue?
[06:45:21] *** Joins: GoodbyeVincent (~GoodbyeVi@55.15.95.92.rev.sfr.net)
[06:46:13] <Tv_> that could also be a network error, in between
[06:54:10] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:55:33] *** Joins: Sam (~sam@smtp.cheogram.com)
[06:55:33] *** ChanServ sets mode: +o Sam
[07:03:38] <LambdaComplex> >l.err = errors.New("http: request body too large")
[07:03:48] <LambdaComplex> i'm assuming that checking against a hardcoded error like that is probably frowned upon
[07:14:04] *** Quits: w0x12ef_ (~w0x12ef@117.61.31.20) (Read error: Connection reset by peer)
[07:14:28] *** Joins: w0x12ef_ (~w0x12ef@117.61.31.20)
[07:15:44] *** Parts: GoodbyeVincent (~GoodbyeVi@55.15.95.92.rev.sfr.net) ()
[07:19:52] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:10] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[07:21:17] *** Joins: andlabs (~andlabs@71.190.119.164)
[07:24:23] *** Joins: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[07:24:23] *** Quits: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[07:24:23] *** Joins: alienwarlock (~warl@user/warl)
[07:27:30] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:27:34] *** Quits: warl (~warl@user/warl) (Ping timeout: 250 seconds)
[07:28:35] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[07:29:00] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 252 seconds)
[07:40:04] *** Joins: jsrnop (~mark@user/jsrnop)
[07:41:25] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[07:53:08] *** Quits: MrFantastik (~Thunderbi@2603-7080-ae03-948a-c6c3-075d-a2af-fe90.res6.spectrum.com) (Ping timeout: 250 seconds)
[08:00:12] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[08:01:28] *** Joins: kindablue (znc@irc.tpurist.com)
[08:07:34] *** Quits: Sam (~sam@smtp.cheogram.com) (Quit: Gateway shutdown)
[08:17:34] *** Joins: arcatech (~arcatech@user/arcatech)
[08:19:35] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[08:24:18] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[08:25:00] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[08:25:40] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:28:53] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[08:31:09] *** Joins: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de)
[08:31:54] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[08:33:44] <Tv_> LambdaComplex: yeah, pretty ugly and a little brittle
[08:34:01] *** Quits: pztrn (~pztrn@user/pztrn) (Ping timeout: 265 seconds)
[08:34:06] <Tv_> LambdaComplex: there may or may not be an issue open asking for that error to be exported
[08:34:45] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[08:35:10] *** Joins: sagax (~sagax@213.138.71.146)
[08:37:10] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[08:38:26] *** Joins: shka (~herr@109.231.62.239)
[08:41:11] *** Joins: oxum (~oxum@106.203.210.162)
[08:45:55] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 246 seconds)
[08:51:12] *** Joins: frost (~frost@59.71.242.236)
[08:52:30] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[08:53:28] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:44a1:5b0c:408d:dc6a)
[08:57:46] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:00:23] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[09:00:24] *** Joins: arcatech (~arcatech@user/arcatech)
[09:00:28] *** Joins: Sam (b8f15a4bbd@smtp.cheogram.com)
[09:00:28] *** ChanServ sets mode: +o Sam
[09:01:04] *** Joins: kulak (~kulak@user/kulak)
[09:15:12] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:19:33] <LambdaComplex> https://github.com/golang/go/issues/41493
[09:19:35] <LambdaComplex> there is
[09:20:00] <LambdaComplex> >When do you need this? When does this need come up in practice? Thanks.
[09:20:11] <LambdaComplex> ...i feel like these count as possibly dumb questions
[09:21:19] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:26:25] *** Joins: pztrn (~pztrn@user/pztrn)
[09:29:42] *** Joins: Eddward (~Eddward@207.138.204.132)
[09:42:16] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[09:44:50] *** Joins: oxum (~oxum@106.203.210.162)
[09:44:52] *** Joins: kochchef (~quassel@80.146.255.46)
[09:49:25] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 265 seconds)
[09:56:50] *** Joins: keiser009107 (~keiser@83.25.191.2.ipv4.supernova.orange.pl)
[09:56:50] *** Quits: keiser009107 (~keiser@83.25.191.2.ipv4.supernova.orange.pl) (Client Quit)
[09:57:49] *** Joins: keiser009107 (~keiser@83.25.191.2.ipv4.supernova.orange.pl)
[10:04:00] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 250 seconds)
[10:15:27] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:32:45] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:36:41] *** Joins: andlabs (~andlabs@71.190.119.164)
[10:38:53] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[10:45:48] *** Joins: oxum (~oxum@106.203.210.162)
[10:46:39] *** w0x12ef_ is now known as w0x12ef
[10:48:49] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[10:50:31] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 246 seconds)
[10:53:34] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:53:46] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:54:38] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[10:54:54] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:55:02] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:55:13] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:57:18] *** Quits: LiftLeft2 (~LiftLeft@154.21.114.47) (Ping timeout: 250 seconds)
[10:57:32] <snappy> Can someone help explain this idiom: var _ Iface = (*impl)(nil) -- it's meant to ensure that type impl implements the interface Iface. My first difficulty is the syntax on the rhs of the = - that is (*impl)(nil) -- what is this?
[10:58:07] *** Joins: absc (~absc@37.163.19.235)
[10:59:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[10:59:21] *** Joins: Vukan (~drazen@46.235.100.7)
[11:00:36] <snappy> Oh I see, it's a conversion of nil to type (*impl), I think the rest kind of explains itself
[11:01:08] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:01:21] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[11:01:50] *** Joins: novns (~novns@user/novns)
[11:08:25] *** Joins: dmathieu (~textual@78.203.212.55)
[11:11:47] *** Quits: dmathieu (~textual@78.203.212.55) (Client Quit)
[11:16:20] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:18:00] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[11:19:46] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Client Quit)
[11:20:29] <A_Dragon> think of it this way, its like a normal cast of that type (ie, between structs with same field names and layouts, or between primitives, eg int(13.37)), but because its a pointer, we need to ensure that the pointer is seen, so we wrap it in (), *thing becomes (*thing), but we still want to cast nil to it, thus (*thing)(nil)
[11:25:34] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.8.2 - https://znc.in)
[11:32:51] *** Quits: Vukan (~drazen@46.235.100.7) (Ping timeout: 265 seconds)
[11:34:02] <Rudde> Tv_: These go preprocessors (I've looked at gomodifytags too) they will overwrite if I have an actual proper custom tag that I do actually intend to change with a json tag
[11:45:42] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[11:49:19] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[12:00:27] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:01:25] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[12:02:09] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:06:45] *** Joins: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl)
[12:07:56] *** Joins: src (~src@user/src)
[12:10:17] <gpeskens[w]> Is there a straightforward way to bind to a non-local IP adress in golang for the purpose of a UDP socket?
[12:11:08] <gpeskens[w]> enabling sysctl ip_nonlocal_bind and then calling net.DialUDP fails with the source IP not resolving
[12:11:48] <rk4> what does it mean to bind to a non-local IP
[12:12:04] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 246 seconds)
[12:12:25] <gpeskens[w]> It means an IP that is not (yet) present on the machine
[12:12:35] <gpeskens[w]> Which is useful for failover purposes
[12:13:26] <gpeskens[w]> "udp 192.168.88.55:0->239.168.88.134:5000: connect: network is unreachable" is the error I get
[12:13:33] <gpeskens[w]> when using net.DialUDp
[12:18:11] <rk4> feels like more of an OS question than go, but maybe someone will know
[12:18:34] * rk4 hasn't seen ip failover irl in years
[12:18:47] <gpeskens[w]> When doing it in C it "just works"
[12:19:07] <gpeskens[w]> I'm assuming it's only failing because the source IP is not existing at all.
[12:19:17] *** Joins: icy (~icy@152.67.162.71)
[12:19:40] <gpeskens[w]> I could also just try to connect and when failing run a reconnect go-routine with a tiny sleep
[12:19:45] <gpeskens[w]> though that feels less elegant ;)
[12:20:29] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[12:21:51] *** Joins: kulak (~kulak@user/kulak)
[12:22:42] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:24:54] *** Quits: icy (~icy@152.67.162.71) (Changing host)
[12:24:54] *** Joins: icy (~icy@user/icy)
[12:27:54] <rk4> have you tried comparing the syscalls Go is making vs what you're doing in C
[12:28:46] *** Joins: mrig (~mrig@user/mrig)
[12:29:03] *** Joins: indigochill (~indigo@nova-046-182-189-051.nat.novanet.is)
[12:33:32] *** Joins: Vukan (~drazen@46.235.100.7)
[12:47:25] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[12:48:02] *** Joins: c10l (~c10l@89.34.167.207)
[12:52:14] <gpeskens[w]> No, didn't, the C library I tested it with is not mine, but I assume it's just a simple bind call
[12:52:24] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:52:29] <gpeskens[w]> I guess golang does a test first to see what it's binding to is available
[12:55:01] *** Quits: Vukan (~drazen@46.235.100.7) (Ping timeout: 265 seconds)
[13:03:20] *** Joins: fef (~thedawn@user/thedawn)
[13:04:24] <siXy> gpeskens[w]: Have you set net.ipv4.ip_nonlocal_bin to 1 ?
[13:04:35] <siXy> (assuming ipv4, linux)
[13:06:45] <siXy> Oh sorry, you mentioned you did above. Oh and this is for a Dial not a Listen? That's somewhat unusual. Listen should work fine. I've never tried Dial - I can't think off-hand of too many non-malicious uses for that.
[13:08:34] <siXy> Hm, yeah, I see how you'd do this, I think - but I'd be interested to hear why you want this.
[13:12:07] *** Quits: siika_ (~siika@223.166.246.51) (Remote host closed the connection)
[13:12:34] *** Joins: siika_ (~siika@139.226.40.153)
[13:13:25] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[13:14:38] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:18:34] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[13:24:58] <siXy> As Sundar shared in May, Googlers will have more flexibility in where they work once we are able to safely return to our offices. Last week, product area (PA) and function leaders announced how the hybrid approach to work will apply to their organizations. To help Googlers easily explore their options and submit applications for office location transfers or fully remote work, a team spanning People
[13:25:04] <siXy> Operations (POps) and Corp Eng banded together to create a brand new work location tool for Googlers. Today, it's available at go/worklocation. We sat down with Arvind KC, lead of POps Works in Corp Eng, Frank Wagner, who heads up Compensation, and Gary Flynn, our POps Central lead, to learn more.
[13:25:14] <siXy> oops
[13:27:02] <mikoto-chan> what's the safest way to write a function that generates a random string? I want my own function that takes a length as a parameter ._.
[13:28:29] <nevivurn> mikoto-chan: with a specific character set, or can it be just a random slice of bytes? eg. "only alphanumeric" ?
[13:32:15] <mikoto-chan> nevivurn: only a-z, A-Z and 0-9, I've been thinking about using the current time to generate a random number which can be used to pick a random character from the ascii table within the specified boundaries
[13:32:22] <mikoto-chan> maybe I need to demonstrate what I mean
[13:35:33] *** Quits: absc (~absc@37.163.19.235) (Read error: Connection reset by peer)
[13:36:19] <nevivurn> mikoto-chan: depending on your use case, one of the "safest" ways to do this would be to generate random indexes with crypto/rand and build a string that way
[13:37:30] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[13:37:32] *** Joins: absc (~absc@37.163.19.235)
[13:38:05] <nevivurn> If you don't care at all if someone is able to predict the resulting strings, and the slight bias, then you can just yourCharacterSet[math/rand.Int() % len(yourCharacterSet)]
[13:39:55] <mikoto-chan> nevivurn: it's for a captcha image generator, I don't think that being able to predict the output is useful in any way as long as the generated images have a different checksum every time (dunno how this exactly works)
[13:40:06] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 258 seconds)
[13:40:32] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:40:44] <mikoto-chan> since there are (26+26+10)^6 outcomes
[13:41:15] <mikoto-chan> I'll be generating 100 images per hour so I don't know how intensive crypto/rand is
[13:41:29] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[13:44:43] <ikke> If it can be predicted, they don't have to solve the captcha
[13:44:57] <mikoto-chan> oh yeah ... forgot lol
[13:45:25] <mikoto-chan> how can I measure the amount of resources used by my program?
[13:47:12] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[13:48:13] <jimeh> mikoto-chan: not sure if this is useful for your case, but I made a package a while ago to generate various kinds of random data using crypto/rand: https://github.com/jimeh/rands
[13:48:28] *** Joins: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de)
[13:49:18] <jimeh> it started as a toy thing to learnt o to use crypto/rand properly, and then spiraled a bit out of control :P... but I've actually ended up using it in more projects than I thought I would... lol
[13:49:22] *** Joins: arinov_ (~arinov@213.194.126.155)
[13:49:52] <mikoto-chan> jimeh: amazing but I think it's a little overkill for my small project
[13:50:03] <mikoto-chan> will def read the source
[13:50:52] <ikke> Probably better then reinventing the wheel
[13:51:14] <ikke> Especially with these kinds of problems
[13:51:55] <jimeh> mikoto-chan: in that case, the core of what you'd need is in the Bytes function in bytes.go, basically all string-based functions uses that under the hood...
[13:52:24] <mikoto-chan> jimeh: thanks :P
[13:53:01] <mikoto-chan> you did a good job structuring your project btw
[13:53:41] <jimeh> nvm, I lied, Bytes() is used by some of the string functions, others uses String() as under the hood >_<... it's been some time since I looked at this source... lol
[13:54:59] <jimeh> mikoto-chan: thanks, I like structure, not sure if it's "good" structure, but made sense to me... lol
[13:55:26] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[13:57:07] <mikoto-chan> jimeh: lol I knew you had "abcd..." hardcoded somewhere
[13:57:10] *** Quits: iauc (~iauc@cm-84.209.101.110.getinternet.no) (Ping timeout: 246 seconds)
[13:57:24] <mikoto-chan> not a fan of it but I guess that's the best option we have
[13:58:57] <jimeh> I felt it was clearer to understand the code that way compared generating/hard-coding byte slices with int ranges matching up to ascii offsets... lol
[13:59:34] <mikoto-chan> that would be my approach but I doubt the ascii will ever change
[13:59:40] <mikoto-chan> ascii table*
[14:02:52] <jimeh> yeah, I'm not that worried about performance of picking out singular characters by offset from a string after this PR to my undent package which relies heavily on it: https://github.com/jimeh/undent/pull/6
[14:03:50] *** Joins: Ohlov369 (~Ohlov3@dyndsl-091-248-236-188.ewe-ip-backbone.de)
[14:05:09] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[14:06:11] *** Quits: Ohlov36 (~Ohlov3@dyndsl-080-228-185-047.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[14:07:43] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:11:41] *** Quits: arinov_ (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[14:12:02] *** Joins: arinov_ (~arinov@213.194.126.155)
[14:12:22] *** Quits: arinov_ (~arinov@213.194.126.155) (Client Quit)
[14:18:24] *** Joins: iauc (~iauc@2a02:2121:308:c9e3:a6b1:c1ff:fed7:afa)
[14:21:38] <fef> egy, h
[14:26:34] *** Quits: iauc (~iauc@2a02:2121:308:c9e3:a6b1:c1ff:fed7:afa) (Quit: Client closed)
[14:29:27] *** Joins: GoLiath_ (~GoLiath@2a02:c7f:8703:d000:146e:e195:1f5d:7027)
[14:32:36] *** Joins: Garb0 (~Garb0@user/garb0)
[14:36:37] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[14:39:54] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:45:07] *** Quits: GoLiath_ (~GoLiath@2a02:c7f:8703:d000:146e:e195:1f5d:7027) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:54:53] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:55:09] *** Joins: kayprish (~kayprish@46.240.143.86)
[14:55:25] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[14:59:55] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:01:34] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[15:02:52] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[15:05:45] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:06:30] *** Quits: llorllale1 (~llorllale@2607:9880:3a18:69:cd00:7e66:2790:8be6) (Quit: WeeChat 3.2)
[15:06:58] *** Joins: GoLiath_ (~GoLiath@134.19.185.124)
[15:07:53] *** Joins: Crassus (~Crassus@user/crassus)
[15:09:02] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:597:b5cf:3629:f483)
[15:12:19] *** Quits: absc (~absc@37.163.19.235) (Ping timeout: 246 seconds)
[15:12:20] *** Joins: GoLiath__ (~GoLiath@80.179.69.245.cable.012.net.il)
[15:13:11] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:13:38] *** Quits: GoLiath_ (~GoLiath@134.19.185.124) (Ping timeout: 258 seconds)
[15:19:32] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[15:23:27] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Quit: Brb, going to the moon)
[15:26:55] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[15:30:04] *** Quits: indigochill (~indigo@nova-046-182-189-051.nat.novanet.is) (Ping timeout: 252 seconds)
[15:34:25] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:37:41] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[15:54:37] *** Quits: sono_ (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[15:55:17] *** Joins: w0x12ef_ (~w0x12ef@117.61.21.204)
[15:55:56] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:57:28] *** Quits: w0x12ef (~w0x12ef@117.61.31.20) (Ping timeout: 246 seconds)
[16:03:39] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[16:18:57] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:19:24] *** Joins: fef (~thedawn@user/thedawn)
[16:20:32] *** Joins: kyzaodro (~kyzaodro@217.138.252.249)
[16:25:13] *** Joins: yoonkn (~user@175.197.208.79)
[16:25:34] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[16:26:06] *** Joins: arinov (~arinov@212.156.215.30)
[16:35:50] *** Joins: absc (~absc@37.163.19.235)
[16:36:58] *** Quits: kyzaodro (~kyzaodro@217.138.252.249) (Quit: Leaving)
[16:40:02] *** Joins: w0x12ef__ (~w0x12ef@117.61.21.204)
[16:41:08] *** Quits: w0x12ef_ (~w0x12ef@117.61.21.204) (Read error: Connection reset by peer)
[16:43:09] *** w0x12ef__ is now known as w0x12ef
[16:43:22] *** Joins: mickey9 (~user@user/mickey)
[16:44:07] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 265 seconds)
[16:44:27] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[16:44:27] *** mickey9 is now known as mickey
[16:44:27] *** Quits: w0x12ef (~w0x12ef@117.61.21.204) (Read error: Connection reset by peer)
[16:44:44] *** Joins: w0x12ef (~w0x12ef@117.61.21.204)
[16:48:31] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[16:49:55] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:12:16] *** Ohlov369 is now known as Ohlov3
[17:15:09] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[17:15:35] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[17:19:03] *** Joins: Xjs (~jannis@user/xjs)
[17:20:14] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:23:05] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:23:16] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[17:28:15] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 15000)
[17:31:54] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:33:01] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[17:33:15] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:33:23] *** Quits: thing (~thing@user/thing) (Quit: WeeChat 3.2)
[17:34:02] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:34:39] *** Quits: jai (~darkapex@user/darkapex) (Quit: Client limit exceeded: 15000)
[17:34:51] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[17:35:42] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[17:36:09] *** Joins: thing (~thing@user/thing)
[17:37:40] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 252 seconds)
[17:44:08] *** Quits: nekron (~nekron@noordsee.de) (Quit: ZNC 1.8.2 - https://znc.in)
[17:45:07] *** Joins: nekron (~nekron@noordsee.de)
[17:47:20] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[17:48:43] *** Joins: Xjs (~jannis@user/xjs)
[17:57:10] *** Quits: Garb0 (~Garb0@user/garb0) (Remote host closed the connection)
[17:59:12] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 15000)
[18:00:55] *** Joins: cskr (~cskr@49.207.204.20)
[18:01:30] *** Quits: abc_ (~abc@user/abc) (Ping timeout: 264 seconds)
[18:02:16] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[18:02:17] *** Joins: Garb0 (~Garb0@user/garb0)
[18:07:04] *** Quits: jhenson (~jhenson@user/jhenson) (Remote host closed the connection)
[18:09:19] *** Joins: jhenson (~jhenson@user/jhenson)
[18:09:40] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[18:10:41] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[18:13:42] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:14:13] *** Joins: kulak (~kulak@user/kulak)
[18:14:32] *** Joins: MrFantastik (~Thunderbi@98.1.50.67)
[18:16:27] *** Joins: arinov (~arinov@213.194.126.155)
[18:16:42] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:18:40] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:19:57] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[18:22:26] *** Joins: kulak (~kulak@user/kulak)
[18:23:28] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[18:24:24] *** Joins: arcatech (~arcatech@user/arcatech)
[18:24:33] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Client Quit)
[18:24:39] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Ping timeout: 265 seconds)
[18:29:37] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[18:32:10] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[18:34:27] <shibumi> Do you know gorm.io? Do you know how I can recursively load data with db.Find()? my problem is I have a struct with different fields. A few basic datatypes (string, int, etc) and a few complex data types like slices or other structs. The basic data types will be loaded
[18:34:27] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[18:34:27] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[18:34:27] *** Joins: jai (~darkapex@user/darkapex)
[18:34:38] <shibumi> The complex ones will not get loaded
[18:34:42] <shibumi> They are just nil
[18:34:44] <shibumi> :(
[18:35:04] <shibumi> I tried setting db.Set("gorm:autp_preload", true).Find(...)
[18:35:07] <shibumi> but this doesn't work either
[18:38:33] *** Quits: kayprish (~kayprish@46.240.143.86) (Read error: Connection reset by peer)
[18:39:09] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[18:40:05] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:40:14] *** Joins: arinov (~arinov@213.194.126.155)
[18:40:33] *** Joins: andlabs (~andlabs@71.190.119.164)
[18:40:33] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:40:56] *** Joins: kulak (~kulak@user/kulak)
[18:42:19] *** Quits: moto (~moto@user/moto) (Ping timeout: 246 seconds)
[18:44:23] *** Joins: Eddward (~Eddward@207.138.204.132)
[18:49:20] *** Joins: moto (~moto@user/moto)
[18:49:57] *** Quits: cskr (~cskr@49.207.204.20) (Remote host closed the connection)
[18:50:22] *** Joins: cskr (~cskr@49.207.204.20)
[18:52:57] *** Quits: Garb0 (~Garb0@user/garb0) (Remote host closed the connection)
[18:54:53] *** Joins: Garb0 (~Garb0@user/garb0)
[18:55:02] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:40] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[18:58:55] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[18:59:57] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:02:21] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[19:03:31] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:04:03] *** Joins: LiftLeft2 (~LiftLeft@154.21.28.156)
[19:07:57] *** Joins: edrocks (~Ed@user/edrocks)
[19:08:13] *** Quits: daegalus (~yulian@user/daegalus) (Ping timeout: 246 seconds)
[19:08:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[19:08:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 264 seconds)
[19:09:06] *** Quits: cskr (~cskr@49.207.204.20) (Quit: Leaving)
[19:09:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:09:57] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[19:10:04] <lilgopher> I have two modules A and B. Module A contains a package named X that model be imports and uses.
[19:10:04] <lilgopher> I decided to move package X out of module A to its own repository. But I cannot make module B to update its dependency to get package from the new repository,
[19:10:04] <lilgopher> I replaced manually the import path but I get an error when I do go get and I think go is trying to fetch wrong stuff using go mod
[19:10:05] *** Quits: whoami (~whoami@d118-75-122-76.col.wideopenwest.com) (Ping timeout: 265 seconds)
[19:10:29] <lilgopher> model B imports and uses***
[19:11:06] <lilgopher> should I "clean" or "reset" go mod somehow after changing the package locatioin?
[19:11:33] *** Joins: daegalus (~yulian@user/daegalus)
[19:13:22] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[19:13:54] *** Joins: dmathieu (~textual@91-168-59-67.subs.proxad.net)
[19:15:27] <ikke> go mod tidy?
[19:15:56] *** Quits: daegalus (~yulian@user/daegalus) (Ping timeout: 252 seconds)
[19:16:09] <lilgopher> i tried that already, get the same error: fatal: could not read Username for 'https://gitlab.com': terminal prompts disabled
[19:16:16] <lilgopher> I know it looks like a git error
[19:16:21] <lilgopher> but I already tried:
[19:16:35] <lilgopher> env GIT_TERMINAL_PROMPT=1 go get ./...
[19:16:54] <lilgopher> and i already have in my gitconfig:
[19:16:58] <lilgopher> [url "git@gitlab.com:"]
[19:16:58] <lilgopher> 	insteadOf = https://gitlab.com/
[19:17:47] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[19:23:02] <lilgopher> and I can do git clone with git@gitlab with no problems
[19:23:40] <ikke> You cannot use insteadOf to switch between http and ssh
[19:24:13] <Tv_> ikke: i do that every time i push  to github
[19:24:48] <Tv_> it may not be *everything* you need to use private modules on gitlab, though; there's the discovery aspect too
[19:25:00] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:29:09] *** Joins: daegalus (~yulian@user/daegalus)
[19:34:15] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[19:35:03] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[19:35:11] <kupi> hi
[19:35:23] <kupi> is it possible to make IIFE in go?
[19:35:38] <kupi> https://developer.mozilla.org/en-US/docs/Glossary/IIFE
[19:36:49] <Sam> You can run a closure as soon as its defined func() { fmt.Println("Hello world") }()
[19:37:01] <Sam> But you can't do it with an actual function definition at the package level, no
[19:38:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:38:44] <siXy> you can write code that looks the same, but there's no compelling reason to do so. Go does not work like javascript, and none of the reasons to do this in javascript apply to Go. Go has better ways of doing that.
[19:39:21] <kupi> what I would like to do is this in go: (js code) const a = (() => { /*some statements*/ return expr; })();
[19:39:53] <kupi> siXy: well it is useful in C++, java, csharp too
[19:40:13] <kupi> basically languages which does not have block expressions but have lambda expression
[19:40:20] <siXy> kupi: I'd strongly suggest starting from a concrete goal you want to achieve rather than "how can I write code that looks the same as X"
[19:40:54] <kupi> the equivalent scala code is this: val a = { /*some statement*/ expr }
[19:41:15] <siXy> Aesthetics are important in software, especially if you're Moxie, but you seem to be forgetting that different languages are, well, different.
[19:41:31] <kupi> the purpose is make a immutable and reduce scopes of variables
[19:41:38] <Sam> kupi: you can do that in Go, but chances are you don't need to.
[19:41:53] <siXy> kupi: use const if you want it to be immutable.
[19:42:20] <kupi> siXy: that's what I am trying to do
[19:42:31] <kupi> but without iife you can't make it a constant
[19:42:35] <Sam> (more or less, your example doesn't translate directly because they're different languages, but you can define a variable with the output of a closure if you really need to for some reason)
[19:42:36] <Sam> You cannot define a const that way. Go does not have const functions.
[19:42:56] <siXy> kupi: Yes you can make it a constant. Go has real constants. Again: Go is NOT javascript.
[19:42:57] <Sam> And Go's concept of constants are different than JavaScripts, I'd recommend you read up on them first.
[19:43:06] <Sam> What siXy said :)
[19:43:56] <Tv_> javascript "const" is more like "unassignable", it can still mutate
[19:44:02] <Tv_> go const is a name for a literal value
[19:45:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:47:04] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:49:36] <kupi> found what I need https://gist.github.com/theqp/3c6349ea2f2c424593ffac47a79357fc
[19:49:47] <kupi> is there a way to say that the value of x does not change?
[19:49:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:50:13] <Tv_> by using a constant. variables are variable.
[19:50:13] <kupi> e.g. x = 3 cannot happen?
[19:50:35] <kupi> Tv_: const does not work about that expression is evaluated at compile time
[19:50:51] <Tv_> kupi: so what's the real expression trying to do?
[19:51:09] <kupi> the expression part is fine, it works
[19:51:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:51:25] <Sam> Maybe it would help if you explain what you actually want to accomplish instead of how you want to accomplish it? Eg. why do you want an immutable thing set to the value returned by a function?
[19:51:37] <kupi> i want to say that the value of x does not change but it will be evalued at runtime
[19:51:55] <Sam> const x = 2
[19:51:55] <kupi> js code: const x = someFunc();
[19:52:02] <kupi> not 2!
[19:52:04] <kupi> someFunc();
[19:52:11] <Sam> Right, so why do you need the function return?
[19:52:22] <Tv_> kupi: what actual problem is being solved here
[19:52:27] *** Joins: spencer (~s@2600:1700:1739:4000:30ab:fca:c1b6:5340)
[19:52:27] <Sam> The answer is "you can't do that in Go", but we can't show you the Go way to do it unless we know what you're actually trying to acomplish
[19:52:30] <sztanpet> this is the usual "i want immutable variables"
[19:52:42] <kupi> Tv_: evaluating an expression into an immutable variable
[19:52:48] <lazyreader> Or Enums?
[19:53:00] <Tv_> kupi: that's an attempted solution for an unstated problem, and one which is not possible. and what Sam said.
[19:53:07] <lazyreader> this feels like someone trying to make enums
[19:53:17] <kupi> i just stated it
[19:53:21] <kupi> const x = someFunc();
[19:53:29] <lazyreader> go doesn’t let you do that.
[19:53:33] <kupi> ok
[19:54:07] <kupi> thanks
[19:54:10] <sztanpet> thats not a problem statement tho, you want a compiler error when you try to mutate a variable "by accident"
[19:54:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:55:03] <Sam> I do agree that a lack of immutability is one of Go's biggest weaknesses, FWIW. I've seen more bugs due to things being mutated when they shouldn't be than probably every other common category of bug combined. It's possible to reduce them, but it would be nice if a good program could just eliminate them.
[19:55:23] <Sam> Actually, that may not be true, not handling nil and panicing might be the most common. I dunno, it's just anecdotal either way. Point is I agree that's a problem FWIW.
[19:55:38] *** Joins: oxum (~oxum@106.203.210.162)
[19:55:41] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:56:49] *** Quits: w0x12ef (~w0x12ef@117.61.21.204) (Read error: Connection reset by peer)
[19:56:56] <siXy> Sam: I'd put the loop iterator mistake up there, too.
[19:57:12] <lazyreader> kupi depending on what your actual use-case is, have you looked at the `iota` operator?
[19:57:14] <siXy> (though I think these days go vet might check for that)
[19:57:16] <Tv_> Sam: you might enjoy digging in the archives for a discussion about e.g. immutable byte slices (`[].byte` was a quick syntax idea that may help) and the concept of "const poisoning". it comes down to: there was no meaningful way discovered to do that, in a way that actually helped, without causing huge duplication throughout stdlib
[19:57:18] <Sam> oh yah, shadowing in general always causes issues
[19:57:20] *** Joins: w0x12ef (~w0x12ef@117.61.21.204)
[19:57:37] <spencer> I'm working an http middleware function that does some limited string comparison (think if header "abc" return "ABC", true; if "def" return "DEF", true; else return "", false).  Is there any *obvious* performance benefit to having the comparison or return strings being typed string constants?  Or am I purely in the realm of unnecessary premature optimization?  This is a fairly hot path endpoint so I'm looking to minimize the response
[19:57:37] <spencer>  time impact of the middleware as much as possible
[19:57:42] <Sam> Tv_: yah, I vaguely remember that; I'll have to go back and re-read it at some point
[19:57:44] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:57:51] <Tv_> also shadowing lets you make "unassignable" things assignable again just fine, so immutable variables don't even help with that
[19:58:31] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:47] <Sam> They would still fix the issue; shadowing would still be a problem but it's a different one. You still wouldn't be mutating a thing that might have already been passed along to a different thread, you'd be creating a new thing which shadowed the old thing and not able to mutate either.
[19:58:58] <siXy> spencer: There will be zero real world performance difference.
[19:59:11] <sztanpet> just dont use a regexp for it
[19:59:32] *** Joins: w0x12ef_ (~w0x12ef@117.61.28.100)
[20:00:01] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:00:07] <spencer> thanks!
[20:00:12] <siXy> yeah, as long as you stay away from really expensive things (text/template, regexp, reflection), you'll be just fine, and save yourself a big mess of consts at the top of your source
[20:00:18] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 252 seconds)
[20:01:50] *** Quits: w0x12ef_ (~w0x12ef@117.61.28.100) (Remote host closed the connection)
[20:02:17] *** Quits: w0x12ef (~w0x12ef@117.61.21.204) (Ping timeout: 265 seconds)
[20:02:22] <sztanpet> Sam #libera-cloak btw, just in case you care :)
[20:02:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:03:31] <Sam> Don't care (although this is one of the reasons I think IRC is such a bad protocol and should be abandoned). I should figure out how to issue cloaks in the golang-* namespace though, just for fun.
[20:03:34] <DaftMonk> Hey. Quick one. Is there a golang cert? can't find one
[20:04:00] <Tv_> DaftMonk: please define cert in this context
[20:04:10] <DaftMonk> to prove you know golang
[20:04:20] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:04:27] <Tv_> DaftMonk: there is nothing official (and that's a good thing)
[20:04:59] <Tv_> also, any place hiring based on a checklist of certifications deserves what they asked for
[20:05:22] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:05:27] *** Quits: kaleido (~adam@user/kaleido) (*.net *.split)
[20:05:27] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (*.net *.split)
[20:05:27] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (*.net *.split)
[20:05:27] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[20:05:28] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[20:05:28] *** Quits: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107) (*.net *.split)
[20:05:28] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (*.net *.split)
[20:05:28] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[20:05:28] *** Quits: MD87 (~MD87@user/md87) (*.net *.split)
[20:05:28] *** Quits: daved (~daved@162.67.197.35.bc.googleusercontent.com) (*.net *.split)
[20:05:28] *** Quits: gt (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050) (*.net *.split)
[20:05:28] *** Quits: sayoun (~sayoun@kwiky.fr) (*.net *.split)
[20:05:28] *** Quits: diff (~diff@tilde.town) (*.net *.split)
[20:05:28] *** Quits: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com) (*.net *.split)
[20:05:28] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[20:05:28] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[20:05:28] *** Quits: gwd (~gwd@xenbits.xenproject.org) (*.net *.split)
[20:05:28] *** Quits: DaftMonk (sid201914@user/daftmonk) (*.net *.split)
[20:05:28] *** Quits: samf (~root@159.65.228.88) (*.net *.split)
[20:05:28] *** Quits: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex) (*.net *.split)
[20:05:28] *** Quits: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: zerok (~zerok@user/zerok) (*.net *.split)
[20:05:28] *** Quits: j416 (~j416@user/j416) (*.net *.split)
[20:05:28] *** Quits: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net) (*.net *.split)
[20:05:28] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (*.net *.split)
[20:05:28] *** Quits: gildarts (16abab341f@user/gildarts) (*.net *.split)
[20:05:28] *** Quits: toshywoshy (~toshywosh@ptr-377wf33o3bnthuddmycb.18120a2.ip6.access.telenet.be) (*.net *.split)
[20:05:28] *** Quits: dan- (~d@ircdocs/dan-) (*.net *.split)
[20:05:28] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[20:05:28] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[20:05:28] *** Quits: st3fan (sid43079@id-43079.tooting.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: LawnGnome (~LawnGnome@user/lawngnome) (*.net *.split)
[20:05:28] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (*.net *.split)
[20:05:28] *** Quits: Shimmy (~Shimmy@user/shimmy) (*.net *.split)
[20:05:28] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (*.net *.split)
[20:05:28] *** Quits: aarchi (sid486183@id-486183.highgate.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (*.net *.split)
[20:05:28] *** Quits: halden (~halden@lden.im) (*.net *.split)
[20:05:28] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[20:05:29] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[20:05:29] *** Quits: jag (~jag@li669-242.members.linode.com) (*.net *.split)
[20:05:29] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[20:05:29] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[20:05:29] *** Quits: buz (~buz@damn.serious.im) (*.net *.split)
[20:05:29] *** Quits: lux0r (~lux0r@163.172.148.99) (*.net *.split)
[20:05:29] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[20:05:29] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[20:05:29] *** Quits: dirbaio2 (~dirbaio@nsmbhd.net) (*.net *.split)
[20:05:29] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[20:05:29] *** Quits: aram (~aram@9front.army) (*.net *.split)
[20:05:29] *** Quits: karl (~Karlssel@2001:41d0:8:9a4b::1) (*.net *.split)
[20:05:29] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[20:05:35] *** Joins: karl (~Karlssel@2001:41d0:8:9a4b::1)
[20:05:36] *** Joins: jadra_ (~jadra@chai.0xbad.coffee)
[20:05:38] *** Joins: kaleido_ (~adam@2604:4300:a:22a:202:c9ff:fec1:9e70)
[20:05:39] *** Joins: sayoun (~sayoun@kwiky.fr)
[20:05:39] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[20:05:40] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 265 seconds)
[20:05:41] *** Joins: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net)
[20:05:41] *** Joins: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107)
[20:05:44] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[20:05:47] *** Joins: mweckbecker (~matthias@weckbecker.name)
[20:05:53] *** Joins: DaftMonk (sid201914@user/daftmonk)
[20:05:54] *** Joins: deniska_ (~denis@user/deniska)
[20:05:57] *** Joins: buz (~buz@damn.serious.im)
[20:05:57] *** Joins: gt (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050)
[20:05:58] *** Joins: Shimmy (~Shimmy@user/shimmy)
[20:05:58] *** Joins: aram (~aram@9front.army)
[20:05:59] *** Joins: gcd_ (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[20:06:00] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[20:06:01] *** Joins: seds (sid492514@id-492514.brockwell.irccloud.com)
[20:06:12] *** Joins: aarchi (sid486183@id-486183.highgate.irccloud.com)
[20:06:12] *** Joins: st3fan (sid43079@id-43079.tooting.irccloud.com)
[20:06:14] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[20:06:18] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[20:06:22] *** Joins: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com)
[20:06:33] *** Quits: seds (sid492514@id-492514.brockwell.irccloud.com) (Changing host)
[20:06:33] *** Joins: seds (sid492514@user/seds)
[20:06:40] *** ChanServ sets mode: +v aram
[20:06:43] *** Quits: Sam (b8f15a4bbd@smtp.cheogram.com) (Changing host)
[20:06:43] *** Joins: Sam (b8f15a4bbd@user/sam)
[20:06:43] *** sodium.libera.chat sets mode: +o Sam
[20:06:45] *** Joins: flynn (~mcbloch@user/flynn)
[20:07:03] *** Joins: halden (~halden@lden.im)
[20:07:04] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:07:14] *** Joins: gildarts (16abab341f@user/gildarts)
[20:07:15] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[20:07:28] *** Joins: dan- (~d@ircdocs/dan-)
[20:07:32] *** Joins: LawnGnome (~LawnGnome@user/lawngnome)
[20:07:34] *** Joins: zerok (~zerok@user/zerok)
[20:07:43] *** Joins: diff (~diff@tilde.town)
[20:07:44] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[20:07:44] *** deniska_ is now known as deniska
[20:07:44] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[20:07:45] *** Joins: explodes (~explodes@user/explodes)
[20:07:45] *** Joins: toshywoshy (~toshywosh@ptr-377wf33o3bnthuddmycb.18120a2.ip6.access.telenet.be)
[20:07:47] *** Joins: samf (~root@159.65.228.88)
[20:07:49] *** Joins: MD87 (~MD87@onl3.fr.929w.net)
[20:07:51] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[20:07:52] *** Joins: dirbaio2 (~dirbaio@nsmbhd.net)
[20:07:54] *** Joins: lux0r (~lux0r@163.172.148.99)
[20:07:57] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[20:07:59] *** Joins: j416 (~j416@user/j416)
[20:08:05] *** Joins: jaguar (jag@maddshark.com)
[20:08:32] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:08:39] *** Joins: gwd (~gwd@xenbits.xenproject.org)
[20:09:03] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[20:09:15] *** Joins: a1paca (~a1paca@user/a1paca)
[20:09:25] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[20:09:41] *** Joins: daved (~daved@162.67.197.35.bc.googleusercontent.com)
[20:10:43] *** Joins: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com)
[20:11:20] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:11:31] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:11:55] <Rudde> fizzie: Ey, yo, ehh that create new type solution to the json snake_case issue, it seems very difficult if my struct contein other structs or pointers to them. You know any easy solution for something like that?
[20:12:59] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:15:49] *** Quits: GoLiath__ (~GoLiath@80.179.69.245.cable.012.net.il) (Ping timeout: 265 seconds)
[20:16:02] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:16:12] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: bbiaf.)
[20:17:30] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:20:17] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:20:33] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[20:20:41] *** Quits: Sam (b8f15a4bbd@user/sam) (Changing host)
[20:20:41] *** Joins: Sam (b8f15a4bbd@golang/sam)
[20:20:41] *** sodium.libera.chat sets mode: +o Sam
[20:21:46] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:22:36] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 258 seconds)
[20:23:13] *** Quits: spencer (~s@2600:1700:1739:4000:30ab:fca:c1b6:5340) (Changing host)
[20:23:13] *** Joins: spencer (~s@user/spencer)
[20:23:39] *** spencer is now known as s_
[20:24:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:24:30] *** Quits: s_ (~s@user/spencer) (Quit: Textual IRC Client: www.textualapp.com)
[20:24:41] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:26:09] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:26:25] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:29:06] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:29:17] <LambdaComplex> so if I open a page about scope in golang and it mentions "global scope" then i should just immediately close it without reading it, right?
[20:30:18] <Tv_> LambdaComplex: we often call package-scope variables globals though
[20:30:35] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:30:39] <LambdaComplex> Tv_: well i prefer the term package-scope because it's more correct :P
[20:30:46] <Tv_> it's like some other languages can have "static" in any scope
[20:33:32] *** Quits: absc (~absc@37.163.19.235) (Quit: Leaving.)
[20:33:38] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:33:48] *** Joins: absc (~absc@37.163.19.235)
[20:34:32] *** Quits: absc (~absc@37.163.19.235) (Client Quit)
[20:35:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:35:41] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[20:37:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:39:24] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:40:38] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[20:40:56] <beeza> so I have three booleans in a struct type, and I want instances with all combinations of the three booleans. One way is to just use bittest and loop through 0 to 7
[20:41:08] <beeza> is there another way to do this? which is a bit more direct/
[20:41:26] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[20:42:11] <Tv_> beeza: if you had used bits as flags, it would a simple for loop...
[20:42:14] <Tv_> +be
[20:42:30] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:42:54] <Tv_> for a larger state space, the new fuzzing or https://golang.org/pkg/testing/quick/ would be good, but this is small enough to really test exhaustively
[20:43:54] <Tv_> i don't think there's any magic to make that simple, you could use that for loop and then build your input struct with T{a: flags & 1 != 0, b: flags & 2 != 0, c: flags & 4 != 0}
[20:43:58] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:44:24] *** Joins: whoami (~whoami@d118-75-122-76.col.wideopenwest.com)
[20:44:32] *** Joins: arinov (~arinov@213.194.126.155)
[20:46:57] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:48:26] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:49:53] <beeza> just doing: for idx := 0; idx <= (1<<3)-1; idx++ {
[20:50:04] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[20:50:08] *** Quits: whoami (~whoami@d118-75-122-76.col.wideopenwest.com) (Ping timeout: 265 seconds)
[20:50:46] <LambdaComplex> beeza: https://play.golang.org/p/smxXn7gT0WP
[20:50:52] <LambdaComplex> have you thought about doing it like that?
[20:51:00] <LambdaComplex> and then just having the struct have one field
[20:51:09] <LambdaComplex> (possibly defining your own type rather than using int)
[20:51:18] <beeza> yeah, I could
[20:51:18] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:51:29] <beeza> 🤔
[20:51:46] <LambdaComplex> the real question is: should I have named that FlagFour instead of FlagThree?
[20:51:48] <LambdaComplex> :P
[20:52:47] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:52:56] <rgl> hello. do you known why time.LoadLocation("Europe/Lisbon") might be failing even when I have the embedded timezone data in my binary by using import (_ "time/tzdata")?
[20:53:04] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[20:53:40] <LambdaComplex> rgl: what error was LoadLocation returning?
[20:54:08] <rgl> nothing useful :(
[20:54:23] <siXy> rgl: It works for me. Perhaps you could share your code?
[20:54:38] <rgl> a log.fatalf("%v", err) shows nothing :(
[20:55:01] <LambdaComplex> that sounds incredibly surprising
[20:55:01] <rgl> oh... I'm loading /etc/timezone which has a trailing \n :/
[20:55:31] <LambdaComplex> all lines end in a \n though
[20:55:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:55:39] <LambdaComplex> or do you mean the file ends with two \n characters?
[20:56:07] <siXy> LambdaComplex: That is not true. It's perfectly possible for the last line of a file not to end with \n
[20:56:38] <LambdaComplex> siXy: not according to the POSIX definition of a line
[20:57:05] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:57:11] <rgl> @LambdaComplex, that was it... doing strings.TrimSpace(string(timezone)) made it work :-)
[20:57:13] <siXy> Noone cares about the posix definition of a line.
[20:57:30] <LambdaComplex> Plenty of things do
[20:57:43] <LambdaComplex> >> printf 'one\ntwo' | wc -l
[20:57:45] <LambdaComplex> 1
[20:58:21] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 265 seconds)
[20:58:37] <Tv_> partial last lines are pure evil and cause all kinds of things to break, avoid
[20:58:38] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 258 seconds)
[20:58:58] <Tv_> (assuming the format was "lines of ..." to begin with)
[20:59:39] *** Joins: indigochill (~indigo@nova-046-182-189-051.nat.novanet.is)
[20:59:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:01:18] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:01:36] <shibumi> do you have a favorite Go ORM for postgresql?
[21:01:45] <shibumi> I tried gorm.io and upper.io/db and I am still searching
[21:02:30] <Tv_> not an orm but sqlc was an okay experience
[21:04:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:04:17] <shibumi> mh for smaller projects this sounds fine
[21:04:28] <shibumi> but for bigger ones.. with nested structs and so on?
[21:05:41] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:05:43] <Tv_> i don't pretend SQL isn't SQL...
[21:05:52] *** Joins: pepee (~user@user/pepee)
[21:05:53] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[21:05:53] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:06:05] <siXy> I tend to want to write my own sql rather than fire a struct at a vast bit of reflection and hope it does something sensible.
[21:08:23] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:08:25] <LambdaComplex> ^same
[21:09:32] *** Joins: andlabs (~andlabs@71.190.119.164)
[21:09:52] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:09:53] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[21:11:11] *** Joins: edrocks (~Ed@user/edrocks)
[21:12:02] *** Quits: dmathieu (~textual@91-168-59-67.subs.proxad.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:12:41] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:12:46] *** Joins: alip (~alip@exherbo/developer/alip)
[21:12:57] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[21:13:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 268 seconds)
[21:14:10] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:15:23] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 268 seconds)
[21:16:59] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:18:22] *** Joins: Jigsy (~Jigsy@user/jigsy)
[21:18:28] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:19:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[21:20:50] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:22] *** Joins: andlabs (~andlabs@71.190.119.164)
[21:21:24] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:22:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:22:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:25:46] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:27:15] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:28:02] *** Joins: power_adapter (~power_ada@2402:e280:3e0c:1c3:95c5:fb5e:9bbd:1e81)
[21:29:40] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Quit: WeeChat 1.9.1)
[21:30:02] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:31:32] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:31:39] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:32:24] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[21:34:10] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Ping timeout: 252 seconds)
[21:34:18] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:35:01] *** Joins: andlabs (~andlabs@71.190.119.164)
[21:35:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:36:41] *** Joins: kodah (~kodah@user/kodah)
[21:37:34] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:38:26] *** Quits: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:38:41] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:38:43] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[21:40:10] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:41:56] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:42:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:43:45] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 268 seconds)
[21:44:29] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:47:25] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:47:26] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:48:53] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 256 seconds)
[21:48:55] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:50:37] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 268 seconds)
[21:50:40] *** Quits: tristero (~nobody@user/tristero) (Ping timeout: 252 seconds)
[21:51:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:52:14] <dza> does testing.B always run a minimum of 2 times even if benchtime=1x ?
[21:53:25] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:54:36] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 258 seconds)
[21:54:39] *** Joins: edrocks (~Ed@user/edrocks)
[21:54:44] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:55:27] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[21:56:11] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:56:14] *** Joins: kulak (~kulak@user/kulak)
[21:57:00] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[21:57:38] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[22:00:29] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[22:01:09] *** Quits: Vigdis (~danj@anycast.chown.me) (Quit: WeeChat 3.1)
[22:01:21] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 256 seconds)
[22:01:58] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[22:02:09] *** Joins: nperez (~nperez@nickandperla.net)
[22:04:41] *** Joins: GoLiath_ (~GoLiath@2a02:c7f:8703:d000:146e:e195:1f5d:7027)
[22:04:52] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[22:06:21] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[22:09:09] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[22:12:40] *** Joins: Torr (~Torr@user/torr)
[22:12:57] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:13:10] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[22:14:25] *** Joins: kulak (~kulak@user/kulak)
[22:14:49] *** Joins: oxum (~oxum@106.203.210.162)
[22:15:46] *** Joins: tristero (~nobody@user/tristero)
[22:15:58] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[22:16:02] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[22:17:07] *** Quits: oxum (~oxum@106.203.210.162) (Remote host closed the connection)
[22:17:20] <j416> I wouldn't depend on it.
[22:17:31] <j416> (I don't know)
[22:17:57] <j416> dza: you can start and stop the timer as you want if you need to do setup or such.
[22:21:29] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 265 seconds)
[22:25:26] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:26:05] *** Joins: kulak (~kulak@user/kulak)
[22:26:11] <Tv_> dza: for 1x, that might be an actual bug, otherwise it runs once to estimate how many runs will be needed to fill -benchtime
[22:26:30] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:27:08] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[22:27:09] <Tv_> i would guess it just unnecessarily runs the estimation round for 1x? only source will tell
[22:27:22] *** Joins: goldfish (~goldfish@user/goldfish)
[22:27:37] <Tv_> also, 1x benchmarks are highly dubious
[22:28:17] <dza> j416: Tv_: If I do a a simple fmt.Println("PONG") in a BenchmarkTestHandler in prints: "PONG; BenchmarkTestHandler-4          PONG" like it runs twice with go test -run=. -bench=BenchmarkTestHandler -benchtime=1x
[22:28:58] <dza> I don't know if this is just the output from the function that is appended twice in the benchmark output?
[22:29:10] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[22:30:12] <Tv_> the source code does *not* look like it would mishandle 1x
[22:30:45] <j416> dza: note that it'll run the tests _and_ benchmarks, unless you filter
[22:31:15] <j416> though it does look like you are filtering
[22:31:35] <j416> unless the -run=. runs the tests; probably does.
[22:32:00] <j416> nevermind you're printing that inside the actual benchmark I suppose.
[22:32:34] <dza> j416: there are no other tests, I was just fooling around and refreshing testing :) but it puzzled me why it would print the output of that fmt first and then a bench summary after including output from each function under
[22:32:49] <j416> puzzling indeed
[22:32:54] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:33:11] <j416> for any real scenario though, I can't see how it matters
[22:33:17] *** Joins: kulak (~kulak@user/kulak)
[22:34:12] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:34:32] <dza> It does print that it runs it 1x BenchmarkTestHandler-4          PONG       1             51200 ns/op, but it prints PONG at the top also
[22:35:29] *** Joins: kulak (~kulak@user/kulak)
[22:35:49] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[22:36:22] <Tv_> dza: run go test -c and then run that binary directly, it's interesting
[22:36:28] *** Joins: lidenbrock (~lidenbroc@2804:14c:32:8120:b5ea:17c2:30ba:3c57)
[22:36:59] <Tv_> actually no, same behavior, just interleabed output so my debug message got hidden in the noise
[22:37:16] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[22:38:24] <Tv_> it's weird though, one set of output comes up front, *then* it prints the goos: etc headers, and the second round is like in the middle of printing the benchmark results
[22:39:18] <Tv_> which means B.run wasn't called for the first round
[22:39:49] <Tv_> which really sounds like it's calling b.doBench from inside the estimation thing
[22:40:32] <Tv_> err no wait that's different code.. this is processBench
[22:41:01] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 256 seconds)
[22:41:19] <Tv_> but that seems to be only called from inside B.run, which would have done the goos: printing... that part has to do with the stdout capturing i bet. and -test.v changes the behavior a little
[22:41:27] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[22:41:55] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:42:07] *** Joins: oxum (~oxum@106.203.210.162)
[22:42:42] *** Joins: kulak (~kulak@user/kulak)
[22:42:49] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[22:44:11] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:44:46] <Tv_> dza: https://github.com/golang/go/issues/32051
[22:45:35] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[22:46:01] *** Joins: kulak (~kulak@user/kulak)
[22:46:22] <Tv_> so apparently it's the gimmick to discover sub-benchmarks?
[22:46:25] <Tv_> anyway, known bug
[22:47:03] <dza> Tv_: I see, thanks !
[22:47:15] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 256 seconds)
[22:47:46] <Tv_> 1x is still probably the wrong thing to do
[22:47:51] <Tv_> unless in context of https://github.com/golang/go/issues/44499
[22:50:43] <dza> what I get from it is that the first pass is sort of the discovery pass, where it discovers the sub-benchmarks and the next pass in the summary is the real pass
[22:51:37] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[22:53:07] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[22:57:37] <Tv_> i think i would have opted to run the discovery at b.N==0
[22:57:44] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[22:57:48] <Tv_> because putting b.Run inside your benchmark loop is wrong
[22:57:59] <Tv_> so ==0 shouldn't rule out any valid calls
[22:58:27] <dza> BenchmarkTest-4 <-- what does the 4 here mean?
[22:59:29] <Tv_> 4 cpus
[22:59:45] <dza> yep -num <procs> apparently
[23:02:18] <mikoto-chan> what's the use of defer? why not just remove defer and put your function at the end of the scope?
[23:03:35] *** Joins: oxum (~oxum@106.203.210.162)
[23:04:09] <Tv_> mikoto-chan: early returns & panics
[23:04:48] <LambdaComplex> mikoto-chan: sometimes that's totally possible, although you might have early returns and forget to add stuff there
[23:05:21] <LambdaComplex> also i think defer gets called _after_ returns? sometimes i'll defer a function that sends something on a channel so that i can block until the function actually returns
[23:07:08] <morgan> it's also nice to be able to (say) open a file and state that it should be closed when the function returns in the same place
[23:07:13] <morgan> easier to understand / remember
[23:07:27] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[23:08:13] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 256 seconds)
[23:13:55] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 246 seconds)
[23:15:14] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[23:16:00] *** Joins: Xjs (~jannis@user/xjs)
[23:16:30] *** Joins: oxum (~oxum@106.203.210.162)
[23:19:29] *** Joins: jjonah (~jjonah@p200300d5d71ebc00dea632fffeb3342f.dip0.t-ipconnect.de)
[23:21:15] *** Quits: oxum (~oxum@106.203.210.162) (Ping timeout: 256 seconds)
[23:22:18] <dza> why does allocs/op go down the more tests you do?
[23:23:17] <Tv_> dza: you mean the larger b.N is?
[23:23:31] <j416> mikoto-chan: if you have a lot of return statements, it's handy to not need to run cleanup code before each and every one
[23:23:32] <Tv_> dza: consider e.g. slice append with amortizing growth
[23:23:50] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 265 seconds)
[23:24:01] <j416> mikoto-chan: defer lets you say, run this before any return
[23:25:26] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:25:56] *** Quits: lidenbrock (~lidenbroc@2804:14c:32:8120:b5ea:17c2:30ba:3c57) (Quit: Client closed)
[23:26:04] <dza> Tv_: yes
[23:26:40] *** Joins: Vigdis (~danj@ns4.chown.me)
[23:27:59] *** Joins: popey2 (~popey@ubuntu/member/popey)
[23:29:04] <mikoto-chan> morgan: true, did just that :)
[23:30:17] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 272 seconds)
[23:30:17] *** popey2 is now known as popey
[23:30:25] *** Quits: kwilczynski (sid379192@user/kwilczynski) ()
[23:31:08] <mikoto-chan> the better question is, why does github.com/golang/freetype use 26.6 fixed point numbers of pixels in their library? I find this very confusing and it looks ugly
[23:31:20] <mikoto-chan> it says that it refers to the std library's image.Point
[23:31:34] <Tv_> mikoto-chan: speed
[23:31:53] <Tv_> fixed point is faster than floats
[23:32:01] <Tv_> (and it can't be just integers, because it does subpixel rendering)
[23:32:25] <mikoto-chan> Tv_: no I mean, why did they choose 26.6 and not 13.5 for example?
[23:32:33] <mikoto-chan> this is a magic number to me
[23:32:36] <Tv_> you have 18-bit integers?
[23:32:49] <mikoto-chan> what?
[23:33:20] <Tv_> 26.6 is using a 26+6=32 bit integer so that 26 bits encode the wholes and 6 bits encode the fractional part
[23:33:29] *** Joins: sedi (~lol@user/sedi)
[23:33:37] <Tv_> you can argue about the split, or the size of the base unit to pick
[23:33:41] <mikoto-chan> what do they encode?
[23:33:58] <Tv_> the coordinate, along one axis
[23:34:27] <Tv_> a pair of those is like a pair of x,y coordinates, except it can do subpixel coordinates
[23:34:44] <mikoto-chan> oh, Go can get complex pretty quickly huh ...
[23:34:48] <Tv_> not really about Go
[23:34:56] <mikoto-chan> oh sorry
[23:35:08] <Tv_> https://i.imgur.com/EKDDfSy.png time again
[23:37:42] <mikoto-chan> programming is easy, understanding the computer is the hard part :)
[23:40:40] *** Joins: fputs (~fputs@67.59.83.166)
[23:49:54] *** Quits: milosz (~milosz@user/milosz) (Quit: Leaving)
[23:52:01] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (Ping timeout: 268 seconds)
[23:52:14] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:52:21] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[23:56:42] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 265 seconds)
[23:59:33] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[23:59:57] *** Quits: indigochill (~indigo@nova-046-182-189-051.nat.novanet.is) (Ping timeout: 258 seconds)
