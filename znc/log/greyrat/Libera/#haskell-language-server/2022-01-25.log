[00:52:17] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:41:30] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:33:18] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:44:14] *** Joins: hololeap (~hololeap@user/hololeap)
[05:30:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[06:20:02] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[06:20:45] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[07:05:48] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[09:38:28] *** Joins: arrowd (~arr@2.94.236.140)
[09:49:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[11:19:56] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 245 seconds)
[11:23:20] *** Joins: idnar (sid12240@debian/mithrandi)
[11:44:13] *** Quits: arrowd (~arr@2.94.236.140) ()
[11:47:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:58:22] *** Joins: fendor (~fendor@91.141.44.222.wireless.dyn.drei.com)
[13:55:26] <wz1000> jneira[m]: can you check if something like 'import("child_process"); child_process.execFileSync("./test.sh")' works under the node repl in windows for you, where test.sh contains `#!/bin/sh \n echo hello`
[14:02:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:03:12] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:34:04] <jneira[m]> nope:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7e1b89e371b8f0a0738ab93b1024ec26b8010ebf)
[14:34:36] <jneira[m]> hmm let me try with a cmd scrip
[14:35:46] <wz1000> jneira[m]: what about execFileSync("./test.sh", shell="/bin/sh")
[14:36:27] <jneira[m]> `child_process.execFileSync(".\\test.cmd")` works but `child_process.execFileSync(".\\test.sh")` does not
[14:37:32] <wz1000> jneira[m]: ok, can we expect either `gcc` or `ldd` to be in the path on windows?
[14:37:43] <wz1000> or `cc`
[14:38:11] <wz1000> this is in the context of the extension
[14:38:58] <wz1000> nevermind, we can simply not hit this code path on windows
[14:44:24] <jneira[m]> üëçÔ∏è
[15:03:57] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[15:05:24] *** Joins: hololeap (~hololeap@user/hololeap)
[16:17:35] <fendor[m]> do we have any special weapons to debug HLS getting stuck?
[16:41:03] *** Joins: fendor_ (~fendor@77.119.167.8.wireless.dyn.drei.com)
[16:43:55] *** Quits: fendor (~fendor@91.141.44.222.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[18:34:35] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:36:26] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:50:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:18:03] *** fendor_ is now known as fendor
[19:26:33] <maerwald> wz1000: so the short term solution is just to build HLS dynamically on all linux platforms supported by GHC and hope people don't mix it with other GHCs?
[19:37:32] <fendor[m]> > error "please help me"
[19:37:32] <fendor[m]> lol
[19:54:08] <jneira[m]> not sure if I understand the interaction between the ghc embedded in hls and the runtime one
[19:54:45] <jneira[m]> we are collecting ghc flags from the runtime one through hie-bios
[19:55:17] <jneira[m]> and then we use the embedded one to parse, typecheck etc the code, no?
[19:59:19] <wz1000> jneira[m]: but dependencies are compiled with the runtime one
[20:24:20] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:31:19] <jneira[m]> the th evaluation also is done by the embedded one 8 suppose
[20:31:35] <jneira[m]> <wz1000> "jneira: but dependencies are..." <- aha, thanks
[20:32:47] <jneira[m]> and could we tell cabal use hls for compile deps? and to collect flags via hie-bios
[20:33:42] <jneira[m]> if we have already an almost ghc included in hls, let's use it all the way down...
[20:37:02] <jneira[m]> * an almost omplete ghc included
[20:58:52] <wz1000> jneira[m]: yes, but currently the problem is that as long as the output of `ghc --version` (or `hls-ghc --version`) is the same, cabal will not actually recompile deps and will reuse the ones compiled with the wrong GHC.
[21:30:50] <maerwald> just use a HLS specific cabal store then?
[21:31:13] <maerwald> that's maybe generally better
[21:31:28] <maerwald> pretty sure cabal wasn't designed to deal with race conditions
[21:35:06] <wz1000> maerwald: is there an option to control that?
[21:35:54] <maerwald> cabal --store-dir=...
[21:36:03] <wz1000> nice, I didn't know
[21:36:56] <wz1000> doesn't show up with `--help` or `v2-build --help`
[21:37:15] <maerwald> --help is useless :p
[21:37:35] <maerwald> https://cabal.readthedocs.io/en/3.6/cabal-project.html?highlight=store-dir#cmdoption-store-dir
[21:47:41] *** carbolymer_ is now known as carbolymer
[22:00:30] <jneira[m]> the problem then will be the lose of consistency between the regular build in the cli and the hls one, but it could happen now for local packages
[22:00:59] <jneira[m]> we already have a dedicated buildir for hls so a dedicated store is the natural continuation of that
[22:02:24] <jneira[m]> PS D:\dev\ws\haskell\cabal> cabal --help | grep "store-dir"
[22:02:24] <jneira[m]>  --store-dir=DIR                The location of the build store
[22:02:53] <jneira[m]> it is a "general" option which should be put before the subcommand
[22:07:03] <jneira[m]> and hey users would not have to even download ghc :-D 
[22:10:22] <wz1000> But we shouldn't do this if people get both GHC and HLS from ghcup, or their package manager or something
[22:11:07] <maerwald> wz1000: then you need to solidify the compatibilty detection logic
[22:12:19] <maerwald> and maybe throw an error, pointing to a config option that enables the internal GHC
[22:12:44] <maerwald> or tell the user to build HLS from source
[22:12:50] <maerwald> I think those are 2 reasonable options
[22:16:49] *** Joins: dminuoso_ (~dminuoso@static.88-198-218-68.clients.your-server.de)
[22:17:29] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[23:25:13] *** Quits: fendor (~fendor@77.119.167.8.wireless.dyn.drei.com) (Remote host closed the connection)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:35] *** Joins: juhp (~juhp@128.106.188.82)
[23:47:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:47:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:51:49] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[23:53:11] <pepeiborra> HEAD will tell people to build HLS from source if they try to use a static HLS to load a TH codebase 
[23:57:24] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
