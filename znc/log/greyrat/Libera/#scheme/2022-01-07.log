[00:05:49] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 240 seconds)
[00:06:35] *** mdhughes_ is now known as mdhughes
[00:17:17] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[00:37:52] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[00:40:38] *** Quits: klovett (~klovett@166.205.110.2) (Quit: ZZZzzz…)
[00:48:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:56:28] *** Joins: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net)
[01:03:54] *** Quits: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net) (Quit: Ping timeout (120 seconds))
[01:24:24] *** Joins: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net)
[01:31:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[01:31:23] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[01:34:50] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:45:17] <mdhughes> Marc Feeley helped get my maintest running for Gambit, so it's now usable to write programs! https://mdhughes.tech/2022/01/06/gambit-hits-a-mark/
[01:48:33] *** Quits: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net) (Quit: Ping timeout (120 seconds))
[01:51:55] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:b566:ba1e:b76b:4040)
[01:53:57] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:98c5:85f6:eace:a4d7) (Ping timeout: 240 seconds)
[02:03:24] *** Joins: jwd_ (~jwd@23.252.56.93)
[02:19:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153)
[02:19:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153) (Changing host)
[02:19:57] *** Joins: skapata (~Skapata@user/skapata)
[02:21:39] *** Joins: livoreno (~livoreno@user/notzmv)
[02:26:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:29:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:34:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:37:09] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:40:13] *** Quits: jwd_ (~jwd@23.252.56.93) (Quit: jwd_)
[02:44:43] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:46:30] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:48:32] *** Joins: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net)
[02:49:49] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[02:58:18] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[03:28:48] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[03:30:48] *** Quits: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net) (Quit: Ping timeout (120 seconds))
[03:33:04] *** Joins: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net)
[03:47:54] *** Joins: klovett (~klovett@166.205.110.2)
[03:50:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:50:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[03:54:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:01:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:06:17] *** Quits: nullx002 (~nullx002@2402:8100:39ab:64cf:545:fc3f:51fb:2065) (Ping timeout: 240 seconds)
[04:10:38] *** Quits: Guest81 (~Guest81@198-58-168-234.qc.dsl.ebox.net) (Quit: Ping timeout (120 seconds))
[04:29:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:30:00] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[04:38:37] *** Quits: jao (~jao@26.red-176-80-110.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[04:39:45] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:41:40] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:43:16] *** Joins: jao (~jao@92.40.173.58.threembb.co.uk)
[04:48:26] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:49:40] *** Joins: TCZ (~tcz@91.150.178.124)
[04:56:17] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:00:44] *** Joins: wyrd_ (~wyrd@gateway/tor-sasl/wyrd)
[05:02:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:03:09] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[05:05:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:08:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:21:48] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:23:54] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:26:42] *** Joins: Guest8152 (~Guest81@198-58-168-234.qc.dsl.ebox.net)
[05:30:49] *** Joins: m455 (~m455@user/m455)
[05:37:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:40:02] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:43:39] *** Quits: Guest8152 (~Guest81@198-58-168-234.qc.dsl.ebox.net) (Quit: Ping timeout (120 seconds))
[06:01:01] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[06:18:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:22:29] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[06:28:33] *** Quits: nalaginrut_ (~nalaginru@183.11.128.121) (Ping timeout: 256 seconds)
[06:30:03] *** Joins: nalaginrut_ (~nalaginru@183.11.128.121)
[06:42:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:43:31] *** Joins: frost (~frost@user/frost)
[06:56:57] *** Quits: jao (~jao@92.40.173.58.threembb.co.uk) (Ping timeout: 240 seconds)
[06:59:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:02:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:12:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:18:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:35:48] *** Quits: qhong- (~qhong@rescomp-21-400677.stanford.edu) (Quit: ZNC 1.7.4 - https://znc.in)
[07:36:02] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[07:43:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:06:45] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:17:10] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:31:48] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:26] *** Quits: klovett (~klovett@166.205.110.2) (Quit: ZZZzzz…)
[08:47:18] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[08:54:19] *** Joins: gproto23 (~gproto23@user/gproto23)
[09:00:22] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:09:13] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[09:09:31] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:34:30] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[09:36:17] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:40:37] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:47:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[09:47:19] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Client Quit)
[10:00:24] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[10:02:05] *** Joins: Darkcoal (~user@139.64.51.226)
[10:28:23] <Spawns> am I correct that the first argument to define is interpreted literally rather than eval'd?
[10:28:28] <Spawns> (define x 1)
[10:28:39] <Spawns> how does that work exactly?
[10:32:47] <light> define is a special form that associates the variable x with the value 1
[10:34:32] <light> (define (f x) ...) is the same as (define f (lambda (x) ...))
[10:34:59] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[10:35:40] <Spawns> yeah the reason I ask is I am curious how to implement it in an interpreter
[10:35:49] <Spawns> i guess i'll take the symbol itself
[10:36:01] <Spawns> in lisp setq quotes the symbol
[10:37:02] <light> Have you read The Little Schemer or The Seasoned Schemer? They both culminate in writing basic interpreters.
[10:37:19] <Spawns> no but I will check them out if they are free!
[10:37:46] <light> You can probably find them at your library.
[10:37:59] <Spawns> i've actually gotten pretty far with my interpreter. if my closures end up working well I'll be on way to having a turing complete scheme interpreter very soon!!!
[10:38:03] <light> They start off very easy and build up piece by piece.
[10:38:17] <Spawns> i am compiling to bytecode
[10:39:09] <Spawns> thats good light, a lot of the material i've been following was intended for creating non lisp interpreters, so I've had to do a lot of side research to figure certain things out
[10:44:40] <dpk> Spawns: yes, define is a primitive special form that knows not to evaluate the name of the variable because the compiler recognizes it specially
[10:45:07] <dpk> you can take the symbol, but bear in mind if you want to support real Scheme™ with hygienic macros, it actually needs to be an identifier
[10:45:24] <dpk> (which is a symbol with scoping information invisibly attached to it)
[10:45:49] <Spawns> ah darn, I haven't learned about identifiers yet
[10:46:04] <Spawns> at least the scoping info part
[10:46:25] <dpk> yeah, if you're just learning to implement Scheme for the first time, i wouldn't bother with the difference yet. you can add it in later if you still have the inclination
[10:47:12] <Spawns> that was my plan yeah, the hygienic macro stuff is pretty complicated and a little bit advanced for me right now
[10:47:53] <Spawns> in theory they are simple but actually implementing them, I wouldn't even know where to start. I might just have a custom non-hygienic macro system for a while
[10:49:13] <dpk> there are a couple of nice articles about it, once you get to that stage. bookmark http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.pdf and https://www.cs.utah.edu/plt/scope-sets/
[10:49:58] <dpk> the former walks you through the standard implementation in Scheme, the latter presents an implementation which is allegedly much simpler but i haven't fully worked through and understood it yet
[10:50:17] <Spawns> that's some great material, thanks dpk. for some reason I get the idea that its going to be an entire topic of study on its own
[10:50:59] <Spawns> its really impressive that people came up with this stuff in the first place
[11:19:40] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[11:20:16] *** Joins: mdhughes (mdhughes@user/mdhughes)
[11:26:26] *** Joins: civodul (~user@guix/contributor/civodul)
[11:29:39] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[12:38:35] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:42:25] *** Quits: zwr (~zwr@2804:d45:b966:fb00:dc36:d82f:f864:4cfe) (Ping timeout: 250 seconds)
[12:43:10] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7298:34ad:5290:1c7e)
[12:46:20] *** Joins: mdhughes_ (mdhughes@user/mdhughes)
[12:49:55] *** Quits: mdhughes (mdhughes@user/mdhughes) (Ping timeout: 256 seconds)
[12:50:59] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:55:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:57:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:01:17] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Ping timeout: 240 seconds)
[13:27:26] *** Joins: mdhughes (mdhughes@user/mdhughes)
[13:30:35] *** Quits: mdhughes_ (mdhughes@user/mdhughes) (Ping timeout: 256 seconds)
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:36:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:38:13] <s-liao> amazigh there is a python lib, which can do validation on JSON file.
[13:38:28] <s-liao> https://docs.python.org/3/library/json.html#module-json.tool
[13:38:42] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:59:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:02:03] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:06:15] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:4b3f:4209:6732:558e)
[14:08:33] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:09:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:22:18] <amazigh> s-liao: that is low level validation.
[14:26:33] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[14:31:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:35:33] <ns12> I wonder why SICP doesn't teach hygienic macros. That would have significantly reduced confusion among Scheme beginners.
[14:37:04] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[14:40:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:42:08] <s-liao> You mean that basic type validation like (object, array, string, number, true, false）
[14:44:56] <wasamasa> ns12: considering they use true/false instead of #t/#f, I doubt hygienic macros would have made the cut either
[15:14:17] <sham1> I mean, nowadays SICP is javascript anyway
[15:17:18] <amazigh> s-liao: yes
[15:17:37] *** Joins: ASau (~user@lmpc.drb.insel.de)
[15:18:05] <amazigh> hygienic macros is recent compared to SICP
[15:20:55] <ns12> When will JavaScript get hygienic macros?
[15:25:22] <wasamasa> don't they kind of have them with their language compiler tools
[15:25:35] <wasamasa> https://www.sweetjs.org/
[15:37:51] <s-liao> What is hygienic macros?
[15:40:05] <s-liao> Capture the already defined identifier during macro expand?
[15:40:28] *** Quits: curium (~curium@mail.clouded.monster) (Remote host closed the connection)
[15:40:31] <ns12> s-liao: https://en.wikipedia.org/wiki/Hygienic_macro
[15:40:47] *** Joins: curium (~curium@mail.clouded.monster)
[15:42:44] *** Quits: curium (~curium@mail.clouded.monster) (Remote host closed the connection)
[15:43:02] *** Joins: curium (~curium@mail.clouded.monster)
[15:54:01] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[15:58:17] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:01:36] <dpk> SICP doesn't teach macros at all, because they're irrelevant to what SICP teaches
[16:02:27] <dpk> also, SICP came out in 1985/1996. the first edition before hygienic macros existed at all, the second before syntax-rules was actually standardized
[16:03:24] <Franciman> what would you say SICP teaches, dpk ?
[16:04:10] <dpk> computation as a way of thinking, and ways of implementing computation
[16:04:42] * Franciman amused
[16:05:14] <dpk> remember also the target audience for SICP is people who've never programmed before. that may not be who mostly reads it now, but it's who it was written for
[16:11:24] <X-Scale> ifair the second edition of SICP (1996) follows IEEE Std 1178-1990 standard
[16:21:33] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[16:22:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:24:55] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:55:18] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:05:05] *** Joins: jao (~jao@92.40.173.56.threembb.co.uk)
[17:12:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[17:14:33] *** Joins: seninha (~seninha@user/seninha)
[17:17:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:17:49] <Zipheir> Contrary to popular belief, SICP doesn't teach much about Scheme, even as the language existed when SICP was written.
[17:21:11] <Franciman> sicp is about computational models
[17:21:14] <Franciman> and abstractions
[17:21:26] <Franciman> ?
[17:21:30] <Franciman> is it ok for you?
[17:21:36] <Franciman> as a definition
[17:22:18] <mdhughes> You'll still learn a lot of practical scheme going thru SICP, doing the exercises. I can't imagine someone coming to it as their first computer experience and surviving, tho.
[17:22:57] *** Joins: lockywolf_ (~lockywolf@46.23.90.177)
[17:23:02] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Ping timeout: 240 seconds)
[17:27:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:30:02] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:33:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:34:10] *** Joins: mdhughes_ (mdhughes@user/mdhughes)
[17:34:30] <Zipheir> Franciman: Sounds good to me.
[17:36:06] <Zipheir> There are definitely some Lisp artifacts in that books, like the implementation of (basically) every type in terms of lists.
[17:36:14] <Zipheir> s/books/book/
[17:37:37] *** Quits: mdhughes (mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[17:38:30] <Zipheir> Introducing macros would have pulled the books much deeper into the weeds with explaining Scheme (and hygienic expansion, oof).
[17:42:35] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[17:45:34] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:45:38] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:49:48] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:58:36] *** Joins: klovett (~klovett@166.205.110.2)
[17:59:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:14:38] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:30:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:31:38] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:33:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71)
[18:33:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71) (Changing host)
[18:33:13] *** Joins: skapata (~Skapata@user/skapata)
[18:33:23] *** Quits: lockywolf_ (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:36:54] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[18:38:30] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:42:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[18:47:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:49:52] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:50:38] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[18:51:46] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:53:39] *** Joins: ASau (~user@lmpc.drb.insel.de)
[18:54:42] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[19:02:33] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:05:39] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[19:07:37] *** Quits: nalaginrut_ (~nalaginru@183.11.128.121) (Ping timeout: 240 seconds)
[19:09:39] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:10:53] *** Joins: nalaginrut_ (~nalaginru@183.11.128.121)
[19:11:06] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:11:57] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Remote host closed the connection)
[19:15:42] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:32:23] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[19:35:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:35:02] <ns12> What is the conventional book recommendation for getting deeper into Scheme (including implementing hygienic expansion) once someone has finished SICP?
[19:35:05] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:35:31] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:38:56] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:4b3f:4209:6732:558e) (Ping timeout: 256 seconds)
[19:47:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:49:26] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:10:37] *** Quits: jao (~jao@92.40.173.56.threembb.co.uk) (Ping timeout: 240 seconds)
[20:40:31] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963)
[20:40:31] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963) (Changing host)
[20:40:31] *** Joins: skapate (~Skapata@user/skapata)
[20:42:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[20:43:27] *** Joins: notzmv (~zmv@user/notzmv)
[20:48:12] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[21:03:49] <Zipheir> ns12: TSPL is often recommended https://scheme.com/tspl4/
[21:04:21] <Zipheir> AFAIK there is no book on Scheme that explains how to implement hygienic macros.  You'll have to read the various papers.
[21:04:32] <Zipheir> (And then look at some implementations.)
[21:07:57] <Zipheir> I think TSPL is a useful reference, but I don't particularly like Dybvig's writing.  I always recommend instead Bird & Wadler's Intro to Functional Programming ("The classic book on FP", according to SRFI 41).
[21:14:50] <Zipheir> Er, *In addition to* TSPL.  If TSPL gets to be too nuts & bolts, try Bird & Wadler.  And the Little books, of course.
[21:18:53] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[21:20:10] <mdhughes> I really like TSPL4 as a "how to Scheme if you're already a good programmer" book.
[21:22:32] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 240 seconds)
[21:22:37] *** Quits: mdhughes_ (mdhughes@user/mdhughes) (Ping timeout: 256 seconds)
[21:23:06] <mdhughes> Simply Scheme is maybe a good intro book, except it basically redefines LOGO in Scheme then teaches LOGO.
[21:24:01] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[21:25:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[21:30:33] <ecraven> I like Programming in Scheme (1990), by Michael Eisenberg, edited by Harold Abelson
[21:30:43] <ecraven> (foreword by Julie Sussman)
[21:33:09] <wasamasa> same
[21:37:56] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:41:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[21:47:34] *** Quits: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:50:36] *** Joins: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr)
[21:50:52] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:51:29] *** Quits: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:52:10] *** Quits: psf (~pi@206.55.172.18) (Read error: Connection reset by peer)
[21:56:49] *** Joins: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr)
[21:58:09] *** Joins: psf (~pi@206.55.172.18)
[21:59:21] <Zipheir> That's a cool book.  Unfortunately it's hard to find.
[22:09:00] *** Quits: psf (~pi@206.55.172.18) (Read error: Connection reset by peer)
[22:14:32] *** Joins: psf (~pi@206.55.172.18)
[22:32:17] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:32:23] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:32:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:42:16] <gwatt> I really liked TSPL for giving code examples in general, but particularly for the syntax case macros
[22:42:56] <gwatt> I find the conversational style of the little books to get tedious
[22:47:01] <Zipheir> I would not want to read all of the Little books in unbroken sequence.
[22:53:49] *** Joins: jao (~jao@92.40.173.22.threembb.co.uk)
[23:06:20] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:18:35] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[23:20:53] <gwatt> When does the yellow ballot close?
[23:24:28] *** Joins: livoreno (~livoreno@user/notzmv)
[23:28:29] <Zipheir> IIRC jcowan said the end of February.
[23:28:54] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[23:30:32] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:31:49] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[23:32:40] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[23:32:55] <sonny> Is this how you would handle the eof object? <https://bpa.st/Z73Q>
[23:34:10] <Zipheir> Yes.
[23:35:02] <Zipheir> I find the (if (and (or ... construct slightly tricky, but that's a matter of taste.
[23:35:33] <gwatt> Does the eof-object? test inside of id-byte? actually get used?
[23:36:03] <Zipheir> Oh yeah, you can drop that.
[23:36:33] <Zipheir> sonny: https://srfi.schemers.org/srfi-61/srfi-61.html may be a much more concise way to do this, if you have access to it.
[23:36:39] <sonny> gwatt: yes
[23:37:00] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462)
[23:37:00] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462) (Changing host)
[23:37:00] *** Joins: skapata (~Skapata@user/skapata)
[23:37:00] <sonny> it will short circuit eval on #t
[23:37:13] <gwatt> or can you? I'm probably misunderstanding the point, but the logic looks suspect.
[23:37:46] <Zipheir> I don't understand why eof-object? is checked twice.
[23:37:52] <Zipheir> It looks overcomplicated.
[23:38:00] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[23:38:55] <sonny> I did not have the check in id-byte? before, but it would error with "real expected, got eof "
[23:39:08] <sonny> on the first range
[23:40:32] *** Joins: ASau (~user@lmpc.drb.insel.de)
[23:41:02] <gwatt> So, if the id-byte? check returns false it looks like you're going to continue to cons bytes onto the list regardless of if (> i idlen)
[23:41:58] <Zipheir> (if (or (eof-object? b) (> i idlen) (id-byte? b)) ...) should work, no?
[23:42:01] <gwatt> I think maybe what you want is (if (or (> i idlen) (eof-object? b) (not (id-byte? b))) ...)
[23:42:35] <sonny> Zipheir: yes, I think so
[23:42:43] <Zipheir> Oh, the logic is slightly more complicated as written.
[23:43:19] <Zipheir> If in doubt, move the eof-object? test outside of the actual byte logic.
[23:43:31] <Zipheir> Since that's just I/O bookkeeping.
[23:44:02] <sonny> hmm, wait. I recall wanting the `and` since I did not want other characters to be accepted
[23:44:21] <gwatt> are you trying to build a list of characters that make up an identifier?
[23:44:27] <sonny> yes
[23:45:00] <sonny> the restriction is at most 16 characters
[23:45:41] <gwatt> It looks like if id-byte? returns true is when you will return an empty list.
[23:46:15] <Oxyd> What do you want to happen when you read a character that's not a valid id-byte?
[23:46:58] <sonny> that signals the end of building the list
[23:49:38] <Zipheir> So you return a short list?
[23:49:48] <sonny> yeah
[23:49:54] <Zipheir> Why not error out?
[23:50:12] <Zipheir> Oh, sorry, up to 16 characters.
[23:50:24] <Zipheir> I thought for a moment they were of fixed size.
[23:51:37] <sonny> yeah, it's just an identifier like you would use in define, with a length restriction
[23:52:22] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[23:52:27] <sonny> my logic is incorrect, so it's back to the drawing board
[23:54:05] <Zipheir> Also, you can lift idlen out of the loop, since it's a constant.
[23:55:02] <sonny> where do I put it?
[23:55:17] <gwatt> just somewhere else
[23:55:25] <gwatt> you could do a top-level (define idlen 16)
[23:55:40] <sonny> ok
[23:56:11] <gwatt> or even something like (define (exceeds-max-id-length? i) (> i 16))
[23:56:31] <gwatt> but might be overkill for playing around
