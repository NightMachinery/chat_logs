[00:00:04] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[00:00:25] *** Joins: dor (~erg@78.11.12.207)
[00:00:54] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[00:02:17] *** Joins: dor (~erg@78.11.12.207)
[00:07:16] *** Joins: audiobirb (~audio@user/audio)
[00:08:12] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[00:08:15] *** Joins: fury__ (~fury@znc.codexterous.com)
[00:08:55] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[00:10:33] *** Joins: audio (~audio@user/audio)
[00:17:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:17:39] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[00:19:14] *** Joins: fikran (~fikran@user/fikran)
[00:22:13] *** Joins: Thanatos (~Thanatos@105.112.181.57)
[00:27:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[00:30:25] <ktosiek> maharshipatel: I guess you forgot to set a value for printcodes on a PurchaseLine?
[00:39:43] *** audio is now known as audiobirb
[00:47:34] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[01:00:13] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979)
[01:00:20] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[01:02:36] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[01:03:01] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[01:03:35] *** Quits: nicode (~nic@2607:f2c0:9545:fa00:47ff:84f1:8a69:2f9) (Ping timeout: 256 seconds)
[01:07:27] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[01:07:47] *** Quits: pipapipapibo (~w@c-24-17-130-228.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:09:18] <captain_morgan> is there some way to apply the .using('some_db') method at the Model level so all Model methods use the specified DB?
[01:09:37] <captain_morgan> seems AdminModel supports using = 'some_db' but Model doesn't?
[01:10:38] <GinFuyou> At worst case you could inject it into it's manager
[01:16:47] <ktosiek> captain_morgan: that's what database routers are for
[01:18:10] <ktosiek> See here: https://docs.djangoproject.com/en/4.0/topics/db/multi-db/#topics-db-multi-db-routing
[01:19:26] <captain_morgan> that's what I figured I'd have to use, feels super overkill to me though
[01:20:13] <captain_morgan> like the default routing is just missing the feature that appears on AdminModel
[01:38:11] <captain_morgan> oh, I misunderstood the ModelAdmin example on that page, but I think it provides a cleaner solution than either a new Manager or Router
[01:46:59] *** Quits: admin123 (~harrymore@cpe-69-203-109-69.nyc.res.rr.com) (Ping timeout: 250 seconds)
[01:52:08] <captain_morgan> that didn't work either, but instead a basic Manager to override get_queryset did
[01:52:46] *** Joins: Guddu (~Guddu@59.95.234.221)
[02:05:21] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[02:13:21] *** Joins: Guddddu (~Guddu@196.196.232.10)
[02:16:21] *** Quits: Guddu (~Guddu@59.95.234.221) (Ping timeout: 256 seconds)
[02:21:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:23:55] *** Joins: Gudddu (~Guddu@59.95.234.221)
[02:26:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:27:21] *** Quits: Guddddu (~Guddu@196.196.232.10) (Ping timeout: 256 seconds)
[02:28:35] *** Joins: fikran (~fikran@user/fikran)
[02:39:47] *** Joins: pipapipapibo (~w@c-24-17-130-228.hsd1.wa.comcast.net)
[02:44:53] *** Joins: tolson (~tolson@107.182.237.14)
[02:47:44] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:48:58] <tolson> I'm trying to move from a syndication feed view to writing out the rss feed as a text file. I was trying to attack it with render_to_string, but that didn't work and seemed silly. I wanted to use .get_feed() but I'm not really sure it's a good idea to "mock" a request either. Am I missing something obvious?
[02:56:35] *** Quits: ahadi (~ahadi@25-40-142-46.pool.kielnet.net) (Ping timeout: 256 seconds)
[02:56:46] *** Joins: ahadi (~ahadi@25-40-142-46.pool.kielnet.net)
[02:58:17] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[03:00:13] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:05:14] *** Quits: Gudddu (~Guddu@59.95.234.221) (Quit: Leaving)
[03:16:01] *** Quits: tolson (~tolson@107.182.237.14) (Quit: WeeChat 3.4)
[03:25:45] <PaulWay[w]> Why render_to_string when you want to render to the browser?
[03:25:51] <PaulWay[w]> or to the client request anyway?
[03:43:01] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:47:53] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 250 seconds)
[04:22:29] *** Quits: rob4226 (~Thunderbi@45.131.195.71) (Quit: rob4226)
[04:24:00] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[04:24:18] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[04:29:17] *** Quits: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 256 seconds)
[04:36:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:37:57] *** Joins: fikran (~fikran@user/fikran)
[04:45:02] *** Parts: sw (~sw@user/sw) ()
[04:51:14] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[05:04:29] *** Joins: yanchai (~yanchai@222.127.97.162)
[05:08:55] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:28:19] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:39:25] *** Quits: Thanatos (~Thanatos@105.112.181.57) (Ping timeout: 240 seconds)
[05:45:11] *** Joins: djapo (~archangel@user/djapo)
[05:51:07] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[05:52:45] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[05:55:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[06:00:13] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:33:37] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 256 seconds)
[06:39:14] *** Joins: djapo (~archangel@user/djapo)
[06:45:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:47:17] *** Joins: fikran (~fikran@user/fikran)
[06:49:19] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: Ping timeout (120 seconds))
[06:49:41] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[07:05:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[07:07:50] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:11:06] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[07:17:17] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:19:28] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[07:55:49] *** Quits: sreve (~quassel@p4ff44ec8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:56:27] *** Joins: sreve (~quassel@p549d724b.dip0.t-ipconnect.de)
[07:57:32] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[07:58:05] *** Joins: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[08:06:55] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[08:19:46] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979) (Ping timeout: 250 seconds)
[08:23:28] *** Joins: pembo13 (~pembo13@47.196.105.244)
[08:24:41] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Ping timeout: 256 seconds)
[08:24:57] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[08:54:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:56:38] *** Joins: fikran (~fikran@user/fikran)
[08:56:59] *** Quits: ahadi (~ahadi@25-40-142-46.pool.kielnet.net) (Ping timeout: 256 seconds)
[08:57:10] *** Joins: ahadi (~ahadi@25-40-142-46.pool.kielnet.net)
[09:14:37] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 240 seconds)
[09:16:47] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[09:21:04] *** Joins: yanchai (~yanchai@222.127.97.162)
[09:32:10] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[09:43:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[09:45:35] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[09:52:54] *** Quits: pembo13 (~pembo13@47.196.105.244) (Quit: Leaving)
[10:20:36] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:46:55] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[10:48:18] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[10:50:04] *** Joins: mrwick (~mrwick@user/mrwick)
[10:53:07] <yanchai> hi how to we update a related model when a condition is true?
[10:55:35] <yanchai> got it nvm thanks
[10:59:00] *** Joins: luigibu (~luigi@93.176.155.54)
[11:03:06] *** Quits: luigibu (~luigi@93.176.155.54) (Client Quit)
[11:04:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[11:05:59] *** Joins: fikran (~fikran@user/fikran)
[11:07:49] *** Joins: luigibu (~luigi@93.176.155.54)
[11:14:33] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:15:00] *** Joins: audiobirb (~audio@user/audio)
[11:20:10] *** Joins: Thanatos (~Thanatos@105.112.181.242)
[11:21:11] *** Joins: jmd (~user@de.cellform.com)
[11:25:35] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:4839:a2a7:487b:278c)
[11:25:57] *** Joins: pro_z_ (~pro_z@37.214.69.56)
[11:29:17] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 240 seconds)
[11:32:19] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[11:34:00] *** Joins: sliss (~sliss@109.136.165.60)
[11:37:45] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[11:42:49] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:51:37] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 240 seconds)
[12:09:53] *** Quits: alex_c (~amcollie@204.236.95.27) (Ping timeout: 256 seconds)
[12:27:33] <serafeim> hey friends
[12:27:54] <serafeim> do you know if gunicorn will server consequtive requests from the same user/ip using the same worker ?
[12:28:49] <serafeim> is there some prefernce on which worker will be used to serve each request ?
[12:52:57] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[12:53:36] <jmd> When I do ./manage.py runserver I see that two processes are started -- both of which run my application code.  Is this normal?  It's causing me grief because they both try to access the same resources.
[12:55:44] *** Quits: Thanatos (~Thanatos@105.112.181.242) (Read error: Connection reset by peer)
[12:57:43] *** Joins: Thanatos (~Thanatos@105.112.181.242)
[13:04:38] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[13:05:12] *** Joins: sliss (~sliss@109.136.165.60)
[13:13:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[13:14:20] *** Quits: Thanatos (~Thanatos@105.112.181.242) (Read error: Connection reset by peer)
[13:14:51] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:15:20] *** Joins: fikran (~fikran@user/fikran)
[13:18:09] *** Joins: dor (~erg@78.11.12.207)
[13:19:10] <nbjoerg> yes
[13:19:30] <nbjoerg> you have the supervising instance and the process that actually runs the request
[13:23:56] <MarkusH> serafeim: what you're looking for is typically called "sticky sessions". I'm unaware that gunicorn supports it. You could implement it on the load balancer in front of gunicorn and run with a single process and single worker
[13:24:11] <MarkusH> Not sure that's a great idea though. Why do you need sticky sessions?
[13:24:14] <serafeim> MarkusH: i use nginx as a load balancer
[13:24:42] <serafeim> to understand if it is worth it to use thhe worker as a primitive cache
[13:24:45] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[13:25:11] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 252 seconds)
[13:25:26] *** Joins: sliss (~sliss@109.136.165.60)
[13:26:12] <jmd> nbjoerg: It seems then that my problem is, that the supervising instance is doing far too much.  Is there a way in my code I can test which is which?
[13:26:24] <MarkusH> serafeim: per-worker cache makes sense for shared resources. I'd avoid it for per-user caching
[13:27:24] <serafeim> hm there are a bunch of slow queries that run multiple times ... these are per/user
[13:27:45] <nbjoerg> jmd: what *are* you doing that is problematic?
[13:28:22] <nbjoerg> since most things that would fail with the dev-server are also problematic for a production environment
[13:29:36] <jmd> My application communicates over a CAN bus.  So when two instances run, then all the traffic on the bus get sent twice, which make all hell break loose - especially since they both claim to have the same address!!
[13:30:04] <serafeim> MarkusH: you propose to cache them properly i guess using memcached or redis
[13:31:17] <MarkusH> serafeim: yes. But you may even be better off optimizing the queries
[13:31:36] <serafeim> not easy because it's from a db i can't mess that much
[13:41:09] *** Joins: audiobirb (~audio@user/audio)
[13:44:53] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[13:45:32] *** Joins: sliss (~sliss@109.136.165.60)
[13:48:01] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 256 seconds)
[13:48:44] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[13:57:30] *** Joins: rusrushal13 (~rusrushal@2405:201:7003:8952:a27c:c592:8e19:8656)
[14:05:00] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[14:05:35] *** Joins: sliss (~sliss@109.136.165.60)
[14:06:05] *** Joins: xkuru (~xkuru@user/xkuru)
[14:10:01] <nbjoerg> jmd: are you using global variables?!
[14:11:19] <jmd> No
[14:11:59] <jmd> (and even if I was, they wouldn't be shared between processes, would they?)
[14:12:33] <nbjoerg> if you do things like create a socket on module load, interesting things can happen after fork
[14:14:08] <jmd> Well yes, I suspect something like that might be happening.  So I want to only open the socket on the "real" Django instance, not on the parent.
[14:20:59] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[14:25:08] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[14:25:44] *** Joins: sliss (~sliss@109.136.165.60)
[14:38:53] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[14:44:30] *** Joins: luigibu (~luigi@93.176.155.54)
[14:45:16] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[14:45:50] *** Joins: sliss (~sliss@109.136.165.60)
[15:03:26] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[15:04:29] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[15:05:23] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[15:05:58] *** Joins: sliss (~sliss@109.136.165.60)
[15:18:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:22:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:24:41] *** Joins: fikran (~fikran@user/fikran)
[15:25:30] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[15:26:04] *** Joins: sliss (~sliss@109.136.165.60)
[15:32:38] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:4839:a2a7:487b:278c) (Ping timeout: 260 seconds)
[15:33:12] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:9cfa:ea51:f041:e757)
[15:35:08] *** Joins: luigibu (~luigi@93.176.155.54)
[15:40:16] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[15:40:55] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[15:45:38] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[15:46:17] *** Joins: sliss (~sliss@109.136.165.60)
[15:58:38] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:9cfa:ea51:f041:e757) (Ping timeout: 252 seconds)
[16:00:28] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[16:03:00] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[16:03:18] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[16:04:10] *** Joins: ekathva_ (~ekathva@2001:999:50:cab1:2a0:4370:b0b2:db60)
[16:07:27] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[16:07:37] *** Quits: ekathva_ (~ekathva@2001:999:50:cab1:2a0:4370:b0b2:db60) (Remote host closed the connection)
[16:08:17] *** Joins: Guddu (~Guddu@59.95.234.221)
[16:10:20] *** Quits: sliss (~sliss@109.136.165.60) (Read error: Connection reset by peer)
[16:11:02] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[16:11:29] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[16:30:01] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:e4af:750c:7b8:c5e6)
[16:32:51] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:45:08] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[16:56:14] *** Quits: urb4nm (~urb4nm@165.227.158.65) (Quit: The Lounge - https://thelounge.chat)
[16:56:42] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[16:56:42] *** Quits: urb4nm (~urb4nm@165.227.158.65) (Client Quit)
[16:57:10] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[17:02:53] *** Quits: urb4nm (~urb4nm@165.227.158.65) (Remote host closed the connection)
[17:03:16] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[17:21:21] *** Joins: dor (~erg@78.11.12.207)
[17:26:09] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:26:44] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:28:34] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Read error: Connection reset by peer)
[17:29:07] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[17:31:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[17:32:02] *** Joins: alex_c (~amcollie@204.236.95.27)
[17:32:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:33:45] *** alex_c is now known as alexandros_c
[17:34:02] *** Joins: fikran (~fikran@user/fikran)
[17:53:03] *** Quits: rusrushal13 (~rusrushal@2405:201:7003:8952:a27c:c592:8e19:8656) (Ping timeout: 256 seconds)
[18:38:22] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 260 seconds)
[18:40:32] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[18:41:53] *** Joins: slav0nic (slav0nic@python.su)
[19:07:37] *** Quits: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 240 seconds)
[19:14:41] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[19:17:12] *** Joins: dkliban (~dkliban@107.13.176.50)
[19:21:47] *** Quits: dkliban (~dkliban@107.13.176.50) (Ping timeout: 256 seconds)
[19:24:30] *** Joins: dkliban (~dkliban@107.13.176.50)
[19:30:59] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[19:39:51] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[19:41:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:43:23] *** Joins: fikran (~fikran@user/fikran)
[19:58:51] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[20:08:10] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 256 seconds)
[20:09:17] *** Joins: dor (~erg@78.11.12.207)
[20:29:45] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[20:30:44] *** Joins: dor (~erg@78.11.12.207)
[20:48:30] *** Quits: dkliban (~dkliban@107.13.176.50) (Remote host closed the connection)
[20:48:53] *** Joins: dkliban (~dkliban@107.13.176.50)
[20:54:01] *** Quits: dkliban (~dkliban@107.13.176.50) (Ping timeout: 250 seconds)
[20:55:09] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:08:46] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[21:08:50] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[21:35:30] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[21:38:33] *** Joins: dkliban (~dkliban@107.13.176.50)
[21:46:03] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Read error: Connection reset by peer)
[21:46:31] *** Quits: dkliban (~dkliban@107.13.176.50) (Ping timeout: 256 seconds)
[21:48:37] *** Quits: Guddu (~Guddu@59.95.234.221) (Ping timeout: 240 seconds)
[21:51:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[21:52:41] *** Quits: oblikoamorale (~n@user/oblikoamorale) (Quit: oblikoamorale)
[21:52:44] *** Joins: fikran (~fikran@user/fikran)
[21:54:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[21:54:14] *** Joins: oblikoamorale (~n@user/oblikoamorale)
[22:02:22] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[22:14:55] *** Joins: audiobirb (~audio@user/audio)
[22:29:07] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:e4af:750c:7b8:c5e6) (Ping timeout: 250 seconds)
[22:30:17] *** Joins: humanBird (~humanBird@2603-8001-7000-3642-8c2b-39c2-5b67-a4ff.res6.spectrum.com)
[22:31:35] <humanBird> i have a react ui that creates some input to be sent to a GET request (some search functionality).Â  It stores that info in react state somewhere.Â  How do I glue this to an existing django form that has it's own input to send to this GET endpoint?
[22:32:58] <humanBird> Feels like i should just do the POST-ing from the react form to the django server endpoint in react and delete the input in the Django template.Â  Problem here is that to test React with being able to work, i would need to do a full react build and copy the build folder into django. building a react app is non trivial and takes a long time.
[22:33:39] *** Joins: Atque (~Atque@user/atque)
[22:34:46] <humanBird> also, the functionality of the django app is to send a page refreshing request (not just calling an api and receiving json).
[22:37:26] <humanBird> I might just have to do it the hack way and use javascript to inject whatever state is in react into the django form from within a javascript file living inside django
[22:41:21] *** Joins: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[22:47:08] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:47:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:52:15] *** Quits: pro_z_ (~pro_z@37.214.69.56) (Ping timeout: 256 seconds)
[22:55:56] *** Joins: Atque (~Atque@user/atque)
[23:09:56] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[23:10:39] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[23:11:00] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[23:31:26] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:33:54] <humanBird> bah this is actually kind of hard to think about.Â  Do i need to provide my own csrf token from the react from ?
[23:34:47] <humanBird> if i copy paste the form code from the django template into the react jsx, it feels like i might lose the csrf protection.
[23:37:46] <humanBird> all of the react static and build files/index.html etc etc etc are living in django.Â  if i serve them, they getÂ  served from django, not some react node server.Â  or so i think?
[23:39:37] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[23:42:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 260 seconds)
[23:45:44] <humanBird> hrm.Â  is there a way to inject a template variable into the react form?Â  like the post/get url.Â  Right now, i see it as being hardcoded in the react code since you can't mix django template {% %} or {{ som_var}} into the react front end code. it will just not build in node.js.Â  I can possibly add some javascript into react that scrapes
[23:45:45] <humanBird> something off of the template after a hidden input is set in django but this also seems like a hack.
[23:49:08] <humanBird> hrm. there appears to be some 3rd party tools that sit between react and django templates.Â  Something that injects the django template variables into a <script> tag, and then React uses what's in this script tag.Â  it's not directly injecting from django into the react application but react can still use the variable.
[23:54:29] *** Joins: alex_c (~amcollie@108.60.250.134)
[23:57:40] *** Quits: alexandros_c (~amcollie@204.236.95.27) (Ping timeout: 256 seconds)
[23:59:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
