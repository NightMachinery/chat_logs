[00:45:25] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[02:12:57] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[02:42:53] *** Quits: shapr (~user@2601:7c0:c202:5190:cecd:8e39:7234:9a0d) (Ping timeout: 252 seconds)
[04:14:06] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:18:53] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:19:21] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:23:59] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:31:25] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:35:45] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:36:38] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:41:25] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:41:52] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:46:31] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:47:06] *** Joins: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz)
[04:51:45] *** Quits: libertyprime (~libertypr@125-236-224-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[05:23:23] *** Joins: kokobd (~kokobd@120.196.76.135)
[06:13:31] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[06:58:22] *** Quits: kokobd (~kokobd@120.196.76.135) (Quit: Client closed)
[08:26:11] *** Joins: shapr (~user@2601:7c0:c202:5190:cc66:94d5:eb1a:5dfe)
[08:57:28] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[09:21:32] *** Quits: juhp (~juhp@128.106.188.82) (Read error: Connection reset by peer)
[10:26:13] *** Joins: juhp (~juhp@128.106.188.82)
[10:51:57] *** Quits: shapr (~user@2601:7c0:c202:5190:cc66:94d5:eb1a:5dfe) (Ping timeout: 240 seconds)
[14:26:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[16:21:09] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:29:34] <anton-latukha[m]> I always wondered how much overhead `lens` accessors/modifiers have. Do they have: "in cases ... guaranteed to be ... (as good as ...) ...". I looked around a bunch & never seen info on the performance considerations of lenses during runtime (thou it is probably the thing to not be worried about until the performance profiling time comes).
[18:30:58] <anton-latukha[m]> I imagine `lens` probably quite often infers right into the optimal accessor.
[19:01:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:40:27] *** Joins: shapr (~user@98.54.1.142)
[19:46:31] *** Quits: shapr (~user@98.54.1.142) (Ping timeout: 256 seconds)
[23:26:37] *** Joins: Hecate (~mariposa@user/hecate)
[23:29:58] <Hecate> hello
[23:29:58] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[23:29:58] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[23:29:58] *** Joins: elonsroadster[m] (~elonsroad@2001:470:69fc:105::d121)
[23:30:04] <Hecate> I see that https://github.com/haskell/haskell-language-server/issues/2431 has been solved apparently
[23:30:10] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[23:30:24] *** Joins: hjulle[m] (~hjullemat@2001:470:69fc:105::1dd)
[23:30:25] <Hecate> is there anything that prevents us today from avoiding segfaults when using HLS in a TH codebase?
[23:30:36] *** Joins: ttylec[m] (~ttylecmat@2001:470:69fc:105::1:554c)
[23:32:03] <Hecate> pepeiborra: any chance you would know about this? :)
[23:32:39] <wz1000> Hecate: what is your question exactly?
[23:32:45] <pepeiborra> Yes. It's mentioned in the user guide: -dynamic
[23:34:09] <pepeiborra> https://github.com/haskell/haskell-language-server/blob/master/docs/troubleshooting.md#static-binaries
[23:34:29] <pepeiborra> I suspect that's not easy enough to find - PRs welcome!
[23:35:27] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:38:41] *** Joins: juhp (~juhp@128.106.188.82)
[23:41:50] <Hecate> wz1000: I think the broader question was answered by pepe :)
[23:41:52] <Hecate> thanks pepeiborra!
[23:42:14] <wz1000> Hecate: more generally, the alpine built binaries shouldn't segfault, opne an issue if they do
[23:43:43] <pepeiborra> wz1000: we have not released the alpine binaries yet. But I suspect they can still segfault if TH is loading system shared objects 
[23:45:02] <wz1000> you mean when there is an overlap/conflict with the libraries the HLS process itself loads?
[23:46:10] <Hecate> wz1000: right now ghcup is the main method through which we source HLS, so I'm gonna submit a PR that adds the proper ghcup invocation to get an HLS with the proper options 
[23:46:36] <Hecate> pepeiborra: when you're saying -dynamic, you're referring to --enable-executable-dynamic right?
[23:47:19] <Hecate> (I just want to be sure :)
[23:47:59] <pepeiborra> Yes. I already created a ticket about this in the ghc up issue tracker, please find it
[23:48:06] <wz1000> Hecate: that doesn't sound like a very good idea since it basically means you have to recompile HLS yourself instead of installing binaries. Like I said, the alpine binaries should fix this and if they don't, open an issue.
[23:48:35] <Hecate> wz1000: you mean the unreleased binaries? :P
[23:48:42] <Hecate> they don't fix much at the moment :P
[23:49:04] <Hecate> and yes I know it's not ideal but the situation hasn't been ideal for months so I guess we're past that point, in industrial contexts
[23:49:31] <wz1000> Hecate: you can download binaries from recent CI jobs, and the proposed ghcup option is also unreleased and unimplemented :)
[23:49:51] <Hecate> you mean
[23:49:52] <Hecate> ghcup compile hls -g master --ghc 8.10.7 -- --enable-executable-dynamic
[23:49:55] <Hecate> ?
[23:50:11] <Hecate> I did try it before withou the --enable-executable-dynamic and it did work
[23:50:22] <Hecate> unless something terribly fishy happened and it lied to me
[23:50:43] <wz1000> Yes, if you are compiling it yourself HLS will see a consistent view of the system libraries and won't segfault in 99% of cases
[23:50:59] <wz1000> the --enable-executable-dynamic option doesn't add much in that case
[23:51:10] <Hecate> I see :)
[23:51:12] <wz1000> Compiling it on your particular system is what does the trick
[23:51:13] <Hecate> thank you very much
[23:51:59] <wz1000> so again I don't see the point of an additional GHCup option
[23:52:07] <wz1000> either use the alpine binaries or compile yourself
[23:59:55] <Hecate> wz1000: sorry I badly expressed myself, I wasn't advocating for an additional ghcup option
