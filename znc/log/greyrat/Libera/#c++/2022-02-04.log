[00:00:51] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[00:03:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:06:52] *** Quits: adder` (~adder@user/adder) (Read error: Connection reset by peer)
[00:07:05] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:07:12] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[00:07:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:08:21] *** Joins: adder` (~adder@user/adder)
[00:08:34] *** Joins: jkl (~jkl@user/jkl)
[00:10:29] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:11:35] *** Quits: jkl (~jkl@user/jkl) (Client Quit)
[00:12:33] *** Quits: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:13:01] *** Joins: jkl (~jkl@user/jkl)
[00:13:26] *** Quits: shtrb (~shtrb@user/shtrb) (Quit: Leaving)
[00:13:57] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[00:14:44] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[00:15:06] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:15:16] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:fff2:9747:6e59:f1b0:31ec) (Remote host closed the connection)
[00:15:25] *** Joins: N4buc0 (~N4buc0@177.156.214.250)
[00:18:35] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[00:18:52] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:20:23] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:21:15] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:21:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:26:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:27:32] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[00:27:34] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[00:28:59] *** Joins: RabidToaster1 (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:30:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:31:47] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:31:47] *** RabidToaster1 is now known as RabidToaster
[00:47:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:48:56] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:55:54] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:57:45] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:13:09] *** Joins: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr)
[01:13:09] *** Quits: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr) (Changing host)
[01:13:09] *** Joins: Uswald (~leandre@user/Uswald)
[01:15:28] *** Joins: theglass (~glass@user/theglass)
[01:17:44] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[01:18:15] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[01:19:48] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:23:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:23:54] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[01:27:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:30:28] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:30:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:30:57] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Ping timeout: 240 seconds)
[01:31:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:33:15] *** Joins: badone (~badone@209.132.189.152)
[01:34:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:39:57] *** Quits: proller (~p@2a02:6b8:b081:a405::1:19) (Ping timeout: 240 seconds)
[01:40:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:40:43] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[01:41:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:07] *** ChanServ sets mode: +v npaperbot
[01:43:07] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[01:45:57] *** Quits: jsbach (~jsbach@2a01:c22:a40c:d700:4679:1947:b982:eeb8) (Ping timeout: 240 seconds)
[01:56:53] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[01:59:19] *** Joins: proller (~p@2a02:6b8:b081:a403::1:35)
[01:59:20] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[02:06:10] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:06:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:07:31] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[02:09:30] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[02:10:03] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[02:15:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77)
[02:15:42] *** Quits: highrate (~presonic@user/highrate) ()
[02:22:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:22:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[02:26:14] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[02:27:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:28:11] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:29:15] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:29:23] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[02:31:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:31:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[02:31:35] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:32:42] *** Quits: pizdets_ (~pizdets@183.182.110.216) (Ping timeout: 250 seconds)
[02:33:46] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:33:56] *** Joins: pizdets (~pizdets@183.182.111.49)
[02:34:11] *** Joins: walterwhip (~www@user/walterwhip)
[02:39:31] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[02:40:09] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:41:45] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[02:42:55] *** Quits: bnchs (~bnchs@196.65.49.136) (Ping timeout: 256 seconds)
[02:43:10] *** Parts: jplejacq (~jplejacq@68.71.169.160) ()
[02:45:45] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[02:46:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:47:48] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (Quit: Stable ZNC provider #bnc4you)
[02:50:09] *** Joins: Markow (~Markow@176.122.215.103)
[02:52:34] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:52:47] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[02:52:51] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[02:53:28] *** Joins: walterwhip (~www@user/walterwhip)
[02:54:25] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:56:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:59:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:02:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[03:02:36] *** Joins: ferdna (~ferdna@user/ferdna)
[03:03:30] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:04:14] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:04:41] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[03:08:05] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[03:09:30] *** Joins: ivii (~ivan@user/ivii)
[03:09:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:10:10] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-Pogorze-Karpackie-CUSTOM-KERNEL)
[03:14:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:16:53] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[03:17:24] *** Joins: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b)
[03:20:31] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77) (Quit: Konversation terminated!)
[03:20:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:21:06] *** Joins: c4017w (~c4017@209.52.68.8)
[03:24:04] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[03:24:37] *** Quits: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b) (Ping timeout: 240 seconds)
[03:26:31] *** Joins: Markow (~Markow@176.122.215.103)
[03:31:11] *** Joins: highrate (~presonic@user/highrate)
[03:47:31] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Ping timeout: 256 seconds)
[03:53:11] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[03:54:39] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[03:59:39] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:01:56] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:07:11] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:11:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:13:33] *** Joins: walterwhip (~www@user/walterwhip)
[04:18:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:20:01] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:23:35] *** Quits: proller (~p@2a02:6b8:b081:a403::1:35) (Ping timeout: 250 seconds)
[04:24:55] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:25:45] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[04:32:46] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Quit: Leaving)
[04:42:59] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-Pogorze-Karpackie-CUSTOM-KERNEL)
[04:46:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:48:28] *** Joins: Viewday117 (~Viewday@user/viewday)
[04:48:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:48:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326)
[04:48:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326) (Changing host)
[04:48:56] *** Joins: skapata (~Skapata@user/skapata)
[04:50:15] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:50:39] *** Quits: Viewday11 (~Viewday@61.141.126.127) (Ping timeout: 256 seconds)
[04:50:39] *** Viewday117 is now known as Viewday11
[04:50:59] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:52:04] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:52:19] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:53:26] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[04:55:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:15] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:55:23] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:57:27] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:57:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[05:00:35] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Remote host closed the connection)
[05:00:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:02:08] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:02:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[05:02:30] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[05:08:19] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[05:08:59] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:09:02] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:13:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[05:14:01] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[05:16:29] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Read error: Connection reset by peer)
[05:16:53] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:21:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:25:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:27:51] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[05:29:43] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[05:41:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:06] *** ChanServ sets mode: +v npaperbot
[05:52:09] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[05:58:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:06:13] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[06:06:59] <linext> can someone explain what i'm doing wrong here: https://ibb.co/56K0jqn
[06:07:21] <linext> i'm not really sure what the return should be for initialize function
[06:09:19] <linext> it needs to return a pointer to a  struct
[06:09:35] <smallville7123> linext:
[06:10:22] <smallville7123> Available_Workshops * aw = new Available_Workshops();     aw.start_time = start_time; aw.ration = duration;    return aw;
[06:10:38] <smallville7123> Available_Workshops * aw = new Available_Workshops();     aw.start_time = start_time; aw.duration = duration;    return aw;
[06:11:16] <linext> oh wait
[06:11:18] <linext> i see the other error
[06:11:27] <smallville7123> wait no
[06:11:33] <linext> start_time and duration are int pointers
[06:11:50] <linext> that's another reason the initialize method has the underline
[06:12:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:12:08] <linext> looks ok now
[06:12:15] <smallville7123> brb
[06:12:16] <linext> i forgot that structs require "new"
[06:16:05] <smallville7123> linext: this should do https://gist.github.com/9e153766826c1dffb7353c2b0892c7f1
[06:16:39] <linext> yes, i was reaching the same answer
[06:17:41] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[06:21:18] <linext> https://ibb.co/Jvj85GC
[06:21:29] <linext> i think they're after passing arrays as a pointer
[06:22:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:24:19] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:25:27] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46)
[06:26:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:29:04] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a151:152f:1fb7:8c9f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:32:23] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:32:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6)
[06:32:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6) (Changing host)
[06:32:51] *** Joins: skapata (~Skapata@user/skapata)
[06:33:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:40:23] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:41:41] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:44:01] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:47:42] *** Joins: MadcapJake (~MadcapJak@2600:6c44:257f:e1f7::1a29)
[07:05:24] *** Quits: ville (~ville@user/ville) (Quit: ville)
[07:06:25] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[07:06:52] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:57] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[07:08:33] *** Joins: ville (~ville@user/ville)
[07:08:37] *** Joins: Donno (~donno@58.84.206.182)
[07:08:45] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:09:37] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:23] *** Quits: N4buc0 (~N4buc0@177.156.214.250) (Ping timeout: 256 seconds)
[07:11:06] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:11:47] *** Quits: justyb11 (~justyb@64.253.212.72) (Quit: Leaving)
[07:22:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:23:48] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[07:24:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:24:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:24:54] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:25:22] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Client Quit)
[07:25:37] <senoraraton> !paste
[07:25:38] <nolyc> Paste your test case to https://wandbox.org/ or https://rextester.com/ or http://coliru.stacked-crooked.com/ or another pastebin that can compile code. Do _not_ paste to the channel. See the testcase checklist at http://eel.is/c++/testcase
[07:26:39] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:26:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:27:51] <senoraraton> This won't compile because Im' using SDL, but there is something going on with the decleration of menuItem.  If I comment out one of the constructors that never gets used it breaks and gives me the following error. -> code https://wandbox.org/permlink/FouW2iUek4jWrg9S
[07:28:06] <senoraraton> Error: main.cpp: In function ‘void initMenu(std::vector<std::__cxx11::basic_string<char> >, fontData*, menuItem*)’:
[07:28:28] <senoraraton> error: no matching function for call to ‘std::vector<menuItem>::push_back(menuItem*)
[07:28:49] <senoraraton> It doesn't make any sense, because I never call the single constructor, I only call it with the full set of arguments.
[07:34:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:37:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[07:38:00] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[07:41:16] <Alipha> senoraraton: mainMenu is a vector of menuItem objects and you're trying to push a menuItem pointer onto it
[07:42:01] <Alipha> I'm assuming you meant mainMenu to be a vector of pointers
[07:44:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:49:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:00:32] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[08:09:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[08:11:45] *** Quits: tbcr (~tbcr@107.13.189.161) (Read error: Connection reset by peer)
[08:12:16] *** Quits: MadcapJake (~MadcapJak@2600:6c44:257f:e1f7::1a29) (Quit: MadcapJake)
[08:15:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:17:01] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[08:17:32] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:22:11] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[08:23:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:23:35] *** Joins: Guest7000 (~eAC53C340@88.227.64.4)
[08:25:45] *** Quits: highrate (~presonic@user/highrate) (Ping timeout: 256 seconds)
[08:26:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:30:20] *** Joins: highrate (~presonic@user/highrate)
[08:31:55] *** Joins: emerent_ (~quassel@p200300cd57044366ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:55] *** Quits: emerent (~quassel@p200300cd5704437cba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (mercury.libera.chat (Nickname regained by services)))
[08:31:55] *** emerent_ is now known as emerent
[08:34:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:38:47] *** Joins: reset (~reset@user/reset)
[08:40:29] *** Guest7000 is now known as karakedi
[08:40:31] *** Quits: karakedi (~eAC53C340@88.227.64.4) (Changing host)
[08:40:31] *** Joins: karakedi (~eAC53C340@user/karakedi)
[08:40:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:50:43] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[08:55:47] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[08:59:51] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:01:33] *** Joins: Guest36 (~Guest36@2610:148:1f00:5000::22b)
[09:02:28] <Guest36> hi, I'm trying to use the boost library in a project of mine, however, whenever I try running my make command, I get the following error:
[09:02:31] <Guest36> In file included from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/mpl/apply_wrap.hpp:34,
[09:02:31] <Guest36>                  from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/mpl/aux_/numeric_op.hpp:22,
[09:02:32] <Guest36>                  from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/mpl/aux_/comparison_op.hpp:27,
[09:02:32] <Guest36>                  from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/mpl/equal_to.hpp:19,
[09:02:33] <Guest36>                  from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/statechart/detail/constructor.hpp:13,
[09:02:33] <Guest36>                  from C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/statechart/state_machine.hpp:19,
[09:02:34] <Guest36>                  from ../src/main.cpp:2:
[09:02:34] <Guest36> C:/Users/vkout/GTSR/driver-controls/src/boost_1_78_0/boost/mpl/aux_/include_preprocessed.hpp:37:89: fatal error: boost/mpl/aux_/preprocessed/1/apply_wrap.hpp: No such file or directory
[09:02:35] <Guest36>    37 | #   include BOOST_PP_STRINGIZE(boost/mpl/aux_/preprocessed/AUX778076_PREPROCESSED_HEADER)
[09:02:35] <Guest36>       |                                                                                         ^
[09:02:36] <Guest36> compilation terminated.
[09:02:46] <Guest36> I'm using GNU Arm embedded toolchain
[09:03:15] <Guest36> I also do not see any folder called 1 when I look in boost/mpl/aux_/preprocessed
[09:04:54] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:05:06] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[09:06:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:07:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:09:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:09:45] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:11:59] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[09:23:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:27:12] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:27:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:33:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:36:44] <Eelis> geordi -c struct E { int:4; }; // hmm i had no idea you could omit member names like that
[09:36:45] <geordi> Success
[09:37:33] <Eelis> then again i can't even remember the last time i used bit-fields, so it makes sense that i'm not familiar with their quirks
[09:39:54] <Eelis> geordi -c struct E { int; }; // i don't get why this isn't allowed though. if unnamed bit field members are legit, why are unnamed members that span multiple bytes not legit?
[09:39:54] <geordi> error: declaration does not declare anything
[09:41:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:05] *** Quits: reticuli (~reticuli@user/reticuli) (Ping timeout: 250 seconds)
[09:42:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:08] *** ChanServ sets mode: +v npaperbot
[09:42:49] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[09:42:51] <Eelis> i suspect that there is no logically sound basis for only allowing members to be unnamed in the special case where they're bit-fields
[09:43:35] <Eelis> if there is a rationale for allowing unnamed members, it cannot be linked to bit-field-ness
[09:44:57] *** Joins: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309)
[09:45:50] <Eelis> because anything one may wish to do with bits is something that one may equally well with to do with bytes
[09:46:01] <Eelis> s/with/wish/
[09:47:42] <sam113101> well, if you want to ignore some bits, or pad some bits, you don't really want or need those unused  bits to have a name
[09:48:10] <Eelis> is that not true for bytes also?
[09:49:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[09:50:00] *** Quits: Guest36 (~Guest36@2610:148:1f00:5000::22b) (Quit: Client closed)
[10:01:09] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:03:25] *** Joins: letto (~letto@86.120.81.105)
[10:07:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:10:19] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.188)
[10:11:24] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.188) (Remote host closed the connection)
[10:11:45] <ville> plenty of times you pad for size to match some binary file format/protocol layout. of course c++ tries its damnest, until recently, to not make this a thing that you would "overlay" on top of a byte buffer
[10:13:57] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[10:19:34] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:23:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:b910:cb62:dbba:4511) (Ping timeout: 240 seconds)
[10:23:56] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:24:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:26:29] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:27:03] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Quit: Leaving)
[10:27:04] <Eelis> even without overlays, matching layout exactly enables memcpy-ing buffers from file/network format to struct
[10:27:26] <Eelis> so padding is totally legit. it's just weird that bit padding is allowed to be unnamed while byte padding isn't
[10:27:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:30:56] <TinoDidriksen> But bit padding allows byte padding, so why should there be 2 ways to do the same? char:CHAR_BIT;
[10:33:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:33:07] <ville> can you do it on an array of bytes then?
[10:33:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:34:59] <ville> at least i don't know if there's syntax for: char[16] : 16 * CHAR_BIT;
[10:36:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:36:59] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[10:39:29] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[10:43:50] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.116)
[10:46:57] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:47:18] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[10:48:29] *** Joins: Donno (~donno@58.84.206.182)
[10:53:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:01:10] *** Joins: clime (~clime@37-48-57-231.nat.epc.tmcz.cz)
[11:01:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:05:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:07:18] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:b5d5:d73c:495d:54e2)
[11:13:49] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.116) (Ping timeout: 256 seconds)
[11:18:39] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:18:56] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[11:19:35] *** Joins: Donno (~donno@58.84.206.182)
[11:24:50] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:24:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:26:24] *** Joins: Guest1159 (~Guest11@216.24.177.3.16clouds.com)
[11:26:36] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:28:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:29:55] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[11:31:06] *** Quits: Guest1159 (~Guest11@216.24.177.3.16clouds.com) (Quit: Client closed)
[11:33:57] *** Joins: Guest11 (~Guest11@216.24.177.3.16clouds.com)
[11:34:21] *** Guest11 is now known as czgg
[11:40:13] *** czgg is now known as czgc
[11:55:53] *** Joins: rendar (~rendar@user/rendar)
[11:58:11] *** Emet-Selch is now known as haise01
[11:58:17] *** haise01 is now known as Azem
[12:05:27] *** Joins: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de)
[12:06:38] *** Quits: czgc (~Guest11@216.24.177.3.16clouds.com) (Quit: Client closed)
[12:06:45] *** Joins: czgg (~czgg@216.24.177.3.16clouds.com)
[12:07:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:08:02] *** Quits: czgg (~czgg@216.24.177.3.16clouds.com) (Client Quit)
[12:14:21] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 256 seconds)
[12:15:26] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[12:22:28] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:25:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:26:02] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:28:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:31:09] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:34:57] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[12:45:07] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[12:53:15] *** Joins: xkuru (~xkuru@user/xkuru)
[12:53:27] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[12:53:54] *** anyone is now known as zz
[12:54:08] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Quit: ...)
[12:58:28] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[13:00:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:09:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d142:9ff8:db64:1336)
[13:11:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:53] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:20:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:22:10] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[13:25:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:27:56] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:29:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:29:42] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:34:48] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Ping timeout: 250 seconds)
[13:38:21] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:692:26ff:fed8:f216)
[13:38:51] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:40:10] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: No route to host)
[13:40:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:41:25] *** Quits: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309) (Quit: callq)
[13:41:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:06] *** ChanServ sets mode: +v npaperbot
[13:47:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:47:41] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[13:51:11] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:54:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[13:55:41] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:56:05] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:692:26ff:fed8:f216) (Quit: wickedmic)
[13:56:14] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:692:26ff:fed8:f216)
[13:56:19] *** Joins: callq (~callq@49.37.43.70)
[13:56:27] *** gentooclimax is now known as climax
[13:56:30] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:692:26ff:fed8:f216) (Client Quit)
[13:56:49] *** Quits: feldim2425 (~feldim242@188-23-89-78.adsl.highway.telekom.at) (Quit: ZNC 1.8.x-git-91-b00cc309 - https://znc.in)
[13:56:58] *** Joins: feldim2425 (~feldim242@2001:871:25a:362c:ce4d:a405:275e:4ce4)
[13:58:07] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[13:58:17] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:58:25] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[13:58:27] *** Quits: callq (~callq@49.37.43.70) (Read error: Connection reset by peer)
[14:00:26] *** climax is now known as gentooclimax
[14:01:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:02:45] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:04:39] *** Joins: ko (~i.am@user/marlboro)
[14:07:17] *** Joins: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34)
[14:09:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:09:06] *** Quits: joilerv (~joilerv@80.169.238.242) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:10:17] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[14:15:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:17:18] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[14:17:20] *** Joins: bnchs (~bnchs@105.157.169.34)
[14:17:42] *** Joins: ckdCreations (~ckdCreati@147.55.133.129)
[14:19:34] *** Joins: rando25892 (~homefame@user/rando25892)
[14:22:10] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:26:11] <AliceMeows> Is there any reason to prefer non member inout_ptr() function over some member to_inout_ptr() function?
[14:26:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:27:36] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[14:28:39] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[14:29:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:33:35] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[14:33:52] *** Joins: spithash (~spithash@user/spithash)
[14:34:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:37:14] *** Joins: ipgd (~IPGD@180.254.226.48)
[14:38:09] <ville> is inout_ptr supposed to refer to a known entity?
[14:38:43] <ville> as in std:: or at least boost::?
[14:42:47] <PJBoy> inout_ptr just calls member functions right?
[14:43:00] <PJBoy> might as well allow it to be applied to any smart pointer that has those member functions
[14:51:19] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Remote host closed the connection)
[14:51:34] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[14:56:36] *** Parts: ipgd (~IPGD@180.254.226.48) ()
[14:59:19] *** Joins: Markow (~Markow@176.122.215.103)
[15:04:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[15:04:50] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:04:52] <AliceMeows> Yes its meant to be non intrusive returning a type holding
[15:05:19] <AliceMeows> I'm specifically referring to this http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html
[15:05:29] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:05:59] <AliceMeows> But I'm trying to understand if there is any benefit to this over a member function that returns inout_ptr_t or some other alternative 'inout_ptr' type
[15:11:41] *** Joins: retux (~user@dyndsl-091-096-027-122.ewe-ip-backbone.de)
[15:13:15] <retux> Is it legal to memcpy from an array into std::vector#data()? Or are there any constraint that I'm missing?
[15:13:53] <AliceMeows> Why on earth would you use memcpy?
[15:14:00] <AliceMeows> What's wrong with std::copy?
[15:14:08] <osse> retux: its size() wouldn't be correct, for example.
[15:14:46] <retux> I knew someone would ask this question :D. I'm consuming a C library in my C++ library. The called C function uses memcpy to copy the results into a double *.
[15:15:59] <retux> osse: memcpy copies exactly size elements into data()
[15:16:40] <osse> retux: yes. I just mean that the value of vec.size() won't encessarily reflect what's been copied it. you have to resize the vec yourself
[15:16:46] <osse> *copied in
[15:16:51] <AliceMeows> I'd suggest to allocate array instead and copy from that array to your vector
[15:18:57] <retux> AliceMeows: That's what I'm currently doing. But this way I copy the array twice. Once from the C library into my allocated array. And a second time from the array into the vector.
[15:19:00] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[15:19:44] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Client Quit)
[15:19:50] <retux> I wonder whether I could copying the values only once. 1. Create a vector of certain size. 2. Pass data() into the C library.
[15:19:54] <AliceMeows> Even if you were to copy directly into your vector it wont be ideal as you'd have to call resize which in turn will call T() on each element
[15:20:27] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[15:20:42] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Client Quit)
[15:21:03] <retux> AliceMeows: Why do I need to call resize? The vector has already the expected length.
[15:21:21] <AliceMeows> If its preallocated then its fine
[15:21:28] <AliceMeows> But it still calls T() for each element
[15:21:40] <retux> std::vector<double>(10) should create a vector containing 10 elements, right?
[15:21:47] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[15:21:50] <AliceMeows> Yes
[15:22:15] <retux> AliceMeows: You have a valid point.
[15:23:06] <retux> Well there still the advantage that I don't have to release the vector on my own. The allocated array must be freed explicitly.
[15:24:23] <AliceMeows> How so?
[15:24:24] <osse> unique_ptr<double[]>  \o/
[15:24:46] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: arf)
[15:25:01] <osse> But T() isn't exactly a big deal when T = double
[15:25:05] <retux> std::vector<double>(10) exists on the stack. Its destructor is called at the end of the method.
[15:25:09] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[15:25:25] <AliceMeows> Its function not method
[15:25:30] <AliceMeows> C++ does not have methods
[15:26:01] <retux> Aren't functions declared in classes called methods?
[15:26:24] <AliceMeows> No
[15:26:26] <retux> Whatever, osse: My code doesn't use C++11 :).
[15:26:26] <AliceMeows> Not in c++
[15:26:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:26:55] <osse> ah, so unique_ptr is out of the question
[15:27:06] <AliceMeows> You could use boost or develop your own unique_ptr
[15:27:07] <retux> AliceMeows: Thanks for clarification. So the vector allocated on stack is deconstructed at the end of the function.
[15:27:33] <AliceMeows> The vector will be allocated on the stack but not its internal data, that will most likely go into the heap
[15:27:49] <retux> AliceMeows: To avoid memcpy(vec.data(), array, ...) I should include boost or develop my own unique_ptr?
[15:28:32] <AliceMeows> unique_ptr only solves the problem of managing your array nothing more
[15:28:42] <retux> AliceMeows: Yes, but std::vector own data() and frees it when the destructor is called.
[15:29:07] <AliceMeows> Yes it does
[15:30:10] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[15:30:25] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:30:35] <retux> I feel like we are loosing the focus. My question is: given std::vector<double>(n) (vec) and an array (arr), is it legal to call memcpy(vec.data(), arr, n * sizeof(double))?
[15:30:43] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Client Quit)
[15:31:21] <AliceMeows> Technically its UB in pre c++11 because data() didn't have to be continues iirc but in practice it most likely will be so it'll work just fine
[15:32:19] <PJBoy> I doubt that
[15:32:37] <AliceMeows> I might confuse it with something else so don't quote me on that
[15:32:40] <retux> AliceMeows: "because data() didn't have to be continues iirc" That's an important info. So for the sake of portability I shouldn't use this (despite all the other concerns)
[15:32:55] <AliceMeows> Check it to be sure because I may as well be wrong
[15:33:01] <PJBoy> working with pre C++11 strings, definitely err on the side of caution
[15:33:10] <PJBoy> but for vector other than vector<bool>
[15:33:14] <PJBoy> I think we're good
[15:34:00] <PJBoy> did we cover why we're not using std::copy yet?
[15:34:11] <retux> I was wondering about AliceMeows statement anyway, because that means you cannot call data()[..]
[15:34:12] <AliceMeows> C api copying the data using memcpy
[15:34:14] <PJBoy> the memcpy looks fine, but not preferable
[15:34:17] <PJBoy> ah
[15:34:52] <PJBoy> yeah passing the vector's internal array to C API is like the main driving force behind data()'s existence
[15:35:13] <retux> Even it someone is writing into it?
[15:35:18] <PJBoy> yeha
[15:35:28] <retux> Here we go :). Thank you very much!
[15:35:28] <AliceMeows> Its why its not returning const pointer
[15:36:00] <PJBoy> if it were a vector of non trivial type, then you should be avoiding memcpy et al
[15:36:09] <AliceMeows> Gotta go now though
[15:36:14] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[15:36:19] <PJBoy> but then you wouldn't be interacting with a C API, so that's not an issue you need to worry about
[15:36:56] <osse> I like to memmove() multi_index_containers by 3 bytes
[15:36:58] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Quit: Leaving.)
[15:37:25] * PJBoy rubs eyes
[15:38:27] <osse> It was just the worst possbile case I could think of :p
[15:41:37] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:b5d5:d73c:495d:54e2) (Ping timeout: 240 seconds)
[15:42:57] *** Joins: unyu (~pyon@user/pyon)
[15:42:59] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[15:45:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:46:15] *** Joins: tavares (~tavares@187.19.213.50)
[15:46:17] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Quit: Leaving)
[15:46:26] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[15:46:26] *** Joins: tavares (~tavares@user/tavares)
[15:47:19] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:49:27] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:49:27] *** Joins: seninha (~seninha@user/seninha)
[15:51:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:58:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[16:03:13] *** Joins: proller (~p@2a02:6b8:0:40c:bd04:d6e:3a0d:3cab)
[16:06:17] *** Quits: termos (sid18647@id-18647.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[16:06:26] *** Joins: termos (sid18647@id-18647.helmsley.irccloud.com)
[16:07:23] *** Quits: gdarko (~me@dg.mk) (Remote host closed the connection)
[16:07:24] *** Quits: akacrs (k7f@user/akacrs) (Remote host closed the connection)
[16:07:33] *** Joins: gdarko_ (~me@dg.mk)
[16:09:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[16:10:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:10:39] *** Joins: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de)
[16:11:12] *** Joins: Uswald (~leandre@37.35.6.200)
[16:11:12] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[16:11:12] *** Joins: Uswald (~leandre@user/Uswald)
[16:14:11] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-Pogorze-Karpackie-CUSTOM-KERNEL)
[16:17:17] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:17:59] *** Joins: pulse (~pulse@user/pulse)
[16:22:04] *** Joins: Atque (~Atque@user/atque)
[16:24:43] *** Joins: Leone (~Leo@108.175.224.215)
[16:27:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:28:22] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:30:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:32:25] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:37:25] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:38:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:39:30] *** Quits: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:43:11] *** Joins: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de)
[16:50:36] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[16:55:08] *** Joins: jsbach (~jsbach@p57bc9344.dip0.t-ipconnect.de)
[17:02:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[17:02:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:03:45] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:09:08] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:21:04] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Quit: wickedmic)
[17:21:14] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[17:22:44] *** Quits: ko (~i.am@user/marlboro) (Read error: Connection reset by peer)
[17:25:25] *** Joins: ko (~i.am@177.96.143.233)
[17:25:25] *** Quits: ko (~i.am@177.96.143.233) (Changing host)
[17:25:25] *** Joins: ko (~i.am@user/marlboro)
[17:27:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:29:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[17:31:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:36:25] *** Joins: reticuli (~reticuli@user/reticuli)
[17:41:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c)
[17:41:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c) (Changing host)
[17:41:06] *** Joins: skapata (~Skapata@user/skapata)
[17:42:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:09] *** ChanServ sets mode: +v npaperbot
[17:46:01] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:46:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:14] *** Quits: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de) (Quit: Leaving...)
[17:49:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:50:28] <Alipha> retux: prior to c++03, std::vector's storage technically didn't have to be contiguous. I would still probably not be concerned about that though and just go ahead and use your memcpy
[17:50:47] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Quit: wickedmic)
[17:50:57] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[17:53:13] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[18:03:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:05:12] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:06:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:08:09] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:08:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[18:10:38] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:11:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:19:03] *** Quits: bnchs (~bnchs@105.157.169.34) (Ping timeout: 256 seconds)
[18:21:34] *** Quits: reticuli (~reticuli@user/reticuli) (Quit: WeeChat 3.4)
[18:29:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:31:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:34:33] *** Joins: seninha (~seninha@user/seninha)
[18:34:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:35:14] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:36:57] *** Quits: NovaXrine_ (~NovaXrine@2604:a880:4:1d0::183:6000) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:37:16] *** Joins: NovaXrine (~NovaXrine@void.novaxrine.com)
[18:37:34] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[18:40:50] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[18:41:29] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[18:42:01] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Read error: Connection reset by peer)
[18:43:08] <retux> Alipha: Why shouldn't I be concerned about that?
[18:43:11] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[18:44:14] <Alipha> retux: it's unlikely any std::vector implementation actually had non-contiguous storage
[18:44:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:45:28] <retux> Well, I don't like to rely on "it's unlikely that" :).
[18:46:03] <AliceMeows> You could always develop your own containers if need be
[18:47:18] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:47:38] <retux> Yeah, but why should I implement my own containers if there are containers that are battle proof.
[18:47:39] <retux> I
[18:48:17] <retux> I'll then just stick with allocating an array and initializing a vector with std::vector<double>(first, last)
[18:48:53] *** Joins: bnchs (~bnchs@105.158.12.46)
[18:48:55] <zz> vector: "The elements are stored contiguously"
[18:48:57] <zz> so that's that
[18:49:11] <Alipha> zz: added in c++03
[18:49:25] <zz> I'm sorry, I missed the part where C++98 is still relevant
[18:49:29] <Alipha> retux: why are you on a pre-c++03 compiler?
[18:49:54] <Alipha> !grab zz
[18:49:54] <nolyc> Alipha: The operation succeeded.
[18:50:00] <Friithian> I only compile my programs with C++98
[18:50:18] <zz> joke's on you, I'm into grabbing
[18:50:25] <retux> My library is designed to work on as many system/compilers as possible. So I decided to go with C++98.
[18:51:16] <Alipha> retux: you're going to lose a lot of interest from people who want to use c++11 then
[18:51:21] <IceMichael> what is wrong with you all...
[18:51:29] <IceMichael> c++98 should die, sorry
[18:51:40] * IceMichael ducks like a duck away from all the shots being fired now
[18:51:42] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 260 seconds)
[18:51:54] *** Joins: seninha (~seninha@user/seninha)
[18:52:13] <AliceMeows> Somehow I think that hardly anyone would disagree with you
[18:52:14] <retux> Actually, my library is written in C, and C++ only severs as an object-oriented wrapper from which, in turn, bindings to several other languages are generated using Swig.
[18:52:19] <Friithian> if someone's using 98 they don't deserve a lib
[18:52:52] * IceMichael nods and slowly stands up again, still cautious
[18:52:54] <AliceMeows> Friithian: do you suffer from masochism?
[18:53:11] <Friithian> well, uh, the answer is immaterial
[18:53:14] <IceMichael> retux: why do these other wrappers not rely on C instead of the C++ one?
[18:53:16] <Friithian> next question
[18:53:28] <retux> Alipha: Why? Users can still write their software in > C++11 and just consume my C++98 library.
[18:53:31] <Alipha> retux: unless you're also adding #if __cplusplus >= 20110101 or whatnot to add move operations and other things that modern c++ programmers want
[18:53:34] <IceMichael> -wrappers+bindings
[18:53:39] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[18:53:51] *** Joins: Dreg (~Dreg@fr33project.org)
[18:54:50] <Alipha> retux: the style of a c++98 library is very different from a library written for c++11
[18:54:58] <Alipha> (or later)
[18:55:26] <Alipha> Look at Qt :-)
[18:55:31] <retux> IceMichael: Swig generates pleasant object-oriented interfaces for C#, Java, Ruby, Lua etc. If I wrap the C library, I have to add OOP on my own, for each binding.
[18:55:54] <AliceMeows> Qt requires c++17 now
[18:55:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:57:06] <retux> Alipha: That's true. Without doubts C++11 is the way to go for modern C++ development. But I decided to go with the lowest standard.
[18:57:47] <zz> I wonder if there are any C++98 constructs that are outright rejected in -std=c++17
[18:57:54] <retux> My library is not only written in C it is implemented in ANSI C with -pandantic switch. You know, C++98 is a programmer's heaven compared to ANSI C :).
[18:57:56] <zz> (other than throw())
[18:58:09] <Alipha> zz: auto_ptr
[18:58:12] <Friithian> I compile eall my personal stuff with c++20 currently
[18:58:38] <zz> retux: so there. By being C++98, you are actually incompatible with certain projects. Therefore "designed to work on as many system/compilers as possible" no longer holds.
[18:59:12] <Alipha> It should be easy enough to avoid c++98 features which have since been removed
[18:59:21] <retux> zz: Could you elaborate on that.
[18:59:37] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:00:06] <AliceMeows> Some c++98 code might not be legal in c++17
[19:00:32] <retux> If C++98 really cannot be used by modern C++ standards, moving to 11 is apparently the way to go.
[19:00:35] <Alipha> If you're distributing binaries of your library, then there's ABI breaks which prevent it from being used with c++11 or later
[19:00:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:01:00] <ville> retux: there are incompatibilities every new standard to previous ones
[19:01:24] <AliceMeows> C++11 should really be considered the bare minimum at this point
[19:01:34] <AliceMeows> C++98 wont provide you anything of value
[19:02:06] <retux> Alipha: "If you're distributing binaries of your library, then there's ABI breaks which prevent it from being used with c++11 or later" Wait what. C++ binaries may not be compatible with newer versions?
[19:02:15] <AliceMeows> Nope
[19:02:21] <zz> Depending on implementation.
[19:02:22] <AliceMeows> There never was a stable ABI either
[19:03:05] <AliceMeows> We don't have ABI in the standard but what we do have are defacto standards
[19:03:16] <retux> What the hack.
[19:03:24] <AliceMeows> Welcome to C++ lol
[19:04:00] <zz> #include <retux.h> bringing in a f(std::string) declaration means g++/c++11 tries to look for a function wiht "f(std::string[cxx11])", which your library would not provide. In other words, the header is not indicating it's meant to be compiled in C++98 mode.
[19:04:12] <retux> Nice one. So, based on these information I have to rethink my design decisions :D.
[19:04:16] *** Quits: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34) (Quit: callq)
[19:04:34] <AliceMeows> You could write various hacks to glue it all together but that will be a major pain
[19:04:40] <Alipha> retux: eg, https://stackoverflow.com/questions/45417707/glibcxx-use-cxx11-abi-gcc-4-8-and-abi-compatibility
[19:04:43] <zz> unfortunately C++ has made no provisions TTBOMK to compile just a particular namespace or block with a different std.
[19:04:46] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:04:46] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[19:05:20] <Alipha> retux: you could provide a c++98 binary and a c++11 binary.
[19:05:36] <retux> So you say, I should upgrade to 11, to have some sort of minimal standard?
[19:06:05] *** Quits: jsbach (~jsbach@p57bc9344.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:06:13] <AliceMeows> I don't think that using C++11 would be unreasonable
[19:06:25] <zz> I feel binaries are unreasonable :D
[19:06:36] <AliceMeows> zz: what do you suggest to use instead?
[19:06:44] <retux> zz: You are right, but did you ever talk to Windows developers...
[19:07:33] * AliceMeows is a windows developer
[19:08:56] <Alipha> Personally, I would likely to skip over a library that advertised c++98 compatibility because I'd assume the interface is sucky in order to be compatible with c++98
[19:09:07] <retux> Does anyone know a good tutorial for move semantics? With C++11 I should implement them.
[19:09:31] <zz> Alipha: source code of course
[19:09:53] <retux> Alipha: Well, the C++ interface mainly only uses std::string and std::vector<double>.
[19:12:48] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) ()
[19:13:16] <Alipha> retux: so, going back again to if you were to make this c++98 compatible. You would just need to double check that it's compatible up to c++20 by compiling with -std=c++20 in addition to -std=c++98. And if you're distributing binaries, then you'll need a c++98 binary and a c++11 binary
[19:14:38] <Alipha> I believe c++03 -> c++11 was the only noteworthy ABI break
[19:14:46] <retux> That should be easy. I'm using CMake so I can easily build with different versions in the CI.
[19:14:50] <Alipha> (for gcc/clang)
[19:15:41] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Quit: wickedmic)
[19:15:52] <IceMichael> retux: ah good to know
[19:15:56] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[19:16:07] <IceMichael> but yeah, I would still not support c++98
[19:16:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[19:16:28] <Alipha> Though again, c++11 and later programmers would appreciate move semantics and, if relevant, smart pointer compatibility
[19:16:52] <retux> If I need to distribute C++11 binaries anyway, then there is no reason to stick with 98. I also can make use of move semantics.
[19:17:30] <AliceMeows> You could just stick with C++11 and if there is demand then you could bother with C++98 too
[19:19:16] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[19:19:23] <Alipha> C++17 programmers would appreciate a library to use std::variant and std::optional, if relevant, and CTAD
[19:19:43] <Alipha> C++20 programmers would like concepts and modules :-)
[19:19:54] <Friithian> I like concepts
[19:20:02] <IceMichael> move semantics and smart pointers are way more important
[19:20:07] <IceMichael> what's more, concepts and modules are not complete yet
[19:20:15] <retux> Alipha: Again, the C++ interface is rather simple. Besides move semantics nothing is needed from higher standards.
[19:21:03] <Alipha> then you're not truly embracing c++ by making the interface overly generic and templated ;-)
[19:21:09] <CarloWood> Is it possible to append another type to a given tuple?  Input std::tuple<Foo, Bar>, output: std::tuple<Foo, Bar, int> ?
[19:21:16] <AliceMeows> Yes
[19:21:23] <CarloWood> Meow
[19:21:41] <CarloWood> Cool - but how?
[19:21:44] <IceMichael> c++ templates would be great if compile times would not explode :(
[19:21:47] <IceMichael> so I don't use them
[19:21:52] <Friithian> just get a better cpu lol
[19:21:59] <Alipha> std::tuple_cat, if you're talking about objects of type std::tuple
[19:22:00] <retux> Alipha: Swig with generics is a mess. I really try to avoid them.
[19:22:26] <AliceMeows> Better cpu wont solve the problem it only delays the inevitable
[19:22:38] <CarloWood> Oh, there is std::tuple_cat
[19:22:54] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[19:23:02] <Alipha> CarloWood: it's funny that you said "Meow"
[19:23:15] <Alipha> And you need to use tuple_cat
[19:23:18] <CarloWood> I love cats
[19:23:30] <Friithian> AliceMeows: if a better cpu is no longer solving the problem, you need to get better cpu++
[19:23:55] <Friithian> just keep throwing clock cycles at the problem until it goes away
[19:24:20] <AliceMeows> You're just ignoring the root cause
[19:24:31] <ville> IceMichael: that's a bit of a mischaracterization. you are able to explode compiletimes with templates, but you don't have to
[19:24:32] <Friithian> yes that's the joke
[19:25:03] <Alipha> retux: it's actually perhaps quite possible that you don't have to do anything extra to take advantage of move semantics, since it sounds like your interface is rather simple
[19:25:04] <AliceMeows> Sooner or later you'll reach physical limits and I haven't heard of ways around them yet so...
[19:25:28] <renopt> metaprogramming at the boundary of reality
[19:25:43] <renopt> B-)
[19:26:32] <Friithian> AliceMeows: quantum computer compiling :P
[19:27:24] <retux> Alipha: I can paste the link to GitHub if you would like to have a look. But only if you promise to not beat me for using exceptions :D.
[19:27:48] <Alipha> I've been having some thought exercises about what a c++-like language would look like that used something more like "generics" than "templates" (and hence the generic functions would be able to be compiled separately)
[19:28:18] <Alipha> retux: sure
[19:28:40] <retux> https://github.com/msteinbeck/tinyspline
[19:28:59] <retux> The C++ interface can be found here: https://github.com/msteinbeck/tinyspline/blob/master/src/tinysplinecxx.h
[19:31:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[19:32:10] <renopt> hmm, you could do that with c++ templates as they are now, define "generic" containers with void* and lightweight templated accessors
[19:32:38] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[19:35:25] *** Joins: amit_ (~amit@2607:ea00:117::1aa)
[19:37:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[19:39:32] <Alipha> retux: `using std_real_vector_in = std::vector<tinyspline::real> *;` instead of #defines. avoid #defines, except for header guards or configs coming from your build system
[19:40:35] <Alipha> retux: don't even write copy constructors or copy operator=, unless you're doing something special. the compiler will write it for you. and specifying copy ctor/op= will inhibit the creation of the move ctor/op=
[19:41:36] <retux> Alipha: What do you propose instead of the define? typedef?
[19:42:07] <Alipha> retux: `using`, as i showed above. or `typedef`, if you're pre-c++11
[19:43:00] <retux> Thanks for the hint.
[19:44:32] <Alipha> retux: Vec2, Vec3, and Vec4 don't need copy constructors or copy operator=, as i said above.
[19:45:15] <retux> Ah yes, you are right.
[19:46:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[19:47:11] <Alipha> seems that FrameSeq::m_frames could be a std::vector<tsFrame> instead?
[19:48:39] <Alipha> `DeBoorNet(tsDeBoorNet &data)` should probably become `DeBoorNet(tsDeBoorNet &&data)` if you're switching to c++11
[19:49:19] <Alipha> i'm being rather picky of course. overall, it seems like a good wrapper around a c lib
[19:49:31] <retux> Replacing the type of m_frames with std::vector<tsFrame> breaks builds on Windows because std::vector is not exportable.
[19:50:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[19:50:39] <retux> So I can completely remove the copy-ctor if there is a move-ctor?
[19:51:24] <AliceMeows> You could always do T(const T&) = default;
[19:51:57] <ville> IceMichael: have you used explicit instantiations in code where you experienced template instantiation related build time increases?
[19:52:29] <Alipha> copy ctors and move ctors do different things. if you don't specify either, then the compiler generates both for you--that's the ideal case. if you specify one or the other, then the other won't be generated. so specifying only a move ctor makes your class "move-only". and specifying a copy ctor only makes your class not take advantage of possible situations where it can be moved
[19:53:17] <Alipha> retux: https://github.com/msteinbeck/tinyspline/blob/master/src/tinysplinecxx.cxx#L1233-L1235 the for loop is unnecessary because std::vector will zero-initialize
[19:53:21] <retux> Alipha: So why should I replace DeBoorNet's copy-ctor with a move-ctor?
[19:54:01] <AliceMeows> move is usually cheaper than copy but it also depends on the use case
[19:54:51] <retux> Alipha: I was a bit too careful I guess :).
[19:55:49] <Alipha> retux: oh, heh. so, you have `DeBoorNet(const DeBoorNet &other)` and `DeBoorNet(DeBoorNet &other)`. I'm saying keep the former, which would be your copy ctor, but change the latter to be a move ctor.
[19:56:11] <AliceMeows> It should be DeBoorNet(DeBoorNet &&other)
[19:56:55] <Alipha> taking a non-const reference is a pre-c++11 hack to have "a move-like constructor"
[19:57:22] <Alipha> which didn't work out very well for std::auto_ptr :-)
[19:57:37] <AliceMeows> It is now dead
[19:57:57] <CarloWood> What is the purpose of std::forward ?
[19:58:28] <AliceMeows> Meant to be used to perfectly forward
[19:58:42] <retux> Thanks for the hints. I appreciate your reviews :).
[19:59:07] <CarloWood> Ok, but what does perfectly forward mean? :/.  Why would one need it?
[19:59:32] <ville> CarloWood: if you're in a function template and a template parameter is used such as: T&& in the parameter list, passing it through std::forward() maintains its value category
[19:59:37] <AliceMeows> If for example you have a function that constructs an object you don't want to copy the parameters you'd want to forward them to said object's ctor
[20:00:49] <Alipha> and by "maintains its value category", that means if the function was passed an lvalue reference, then you're forwarding an lvalue reference to another function. if the function was passed an rvalue reference, then you're forwarding an rvalue reference to another function
[20:01:36] <CarloWood> Hmmmokay... lemme write a wandbox test to understand that.
[20:01:44] <Alipha> template<typename T> void foo(T&& x) { bar(std::forward<T>(x)); }  // if x is an lvalue ref, then call bar with an lvalue ref. if x is an rvalue ref, call bar with an rvalue ref
[20:02:25] <Alipha> template<typename T> void foo(T&& x) { bar(x); }  // here, bar will always get called with an lvalue ref
[20:02:33] <AliceMeows> CarloWood: https://eli.thegreenplace.net/2014/perfect-forwarding-and-universal-references-in-c
[20:03:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[20:03:16] <ville> CarloWood: http://coliru.stacked-crooked.com/a/e5221a2d0e8984a6
[20:03:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:03:34] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:03:45] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:03:54] <ville> hitting the mythical aa const&& case left as an exercise for the reader
[20:05:00] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[20:07:17] <Alipha> retux: i would personally make add, subtract, operator+, etc. non-member functions accepting two arguments, instead of member functions accepting 1 argument, but it doesn't particularly matter, especially in this case. but, to me, it doesn't make sense for, e.g., add to be a member function because both arguments participate equally in the addition. i.e., in `x.add(y)`, there's nothing special about x or less
[20:07:19] <Alipha> important about y. whereas with `add(x, y)`, the impression is that x and y contribute equally. i realize that's more of a philosophical argument than anything though :-)
[20:07:25] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:08:49] <Alipha> `x.add(y)` may also give the impression that it's performing `x += y` not `x + y`
[20:11:19] <ville> and if you want to rise a few eyebrows do: f((T)x); rather than std::forward()
[20:11:54] <AliceMeows> You could at least use static_cast
[20:12:07] <ville> not nearly as cool
[20:12:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:12:54] <Alipha> that'll copy in the case of foo being called with an rvalue ref?
[20:13:08] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Quit: WeeChat 3.4)
[20:13:13] <Alipha> f((T&&)x);  perhaps?
[20:13:16] <retux> Alipha: I will think about changing them to non-member functions, thanks.
[20:13:29] <ville> Alipha: http://coliru.stacked-crooked.com/a/f1b8d1af27ea6e18
[20:13:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:13:45] <Alipha> retux: std::enable_if_t is c++17: https://github.com/msteinbeck/tinyspline/blob/master/src/tinysplinecxx.h#L612
[20:13:51] <ville> sorry http://coliru.stacked-crooked.com/a/7b966440b2ff14a1
[20:14:47] <ville> but yeah that's pretty good way to trip up a candidate or two in an interview if you're into such things
[20:17:04] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[20:17:12] <Alipha> ville: http://coliru.stacked-crooked.com/a/86bab71208f9f521
[20:18:03] <retux> Alipha: This peace of code is included only when compiling with emscripten.
[20:18:08] <Alipha> ville: http://coliru.stacked-crooked.com/a/d46776d4ec363991
[20:18:10] <ville> ah that sucks. has to be a T&& then
[20:18:46] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[20:18:57] <Alipha> so, let's get rid of std::move and std::forward. just replace both with (T&&) ;-)
[20:21:05] <Alipha> retux: any particular reason you're using std::malloc/std::memcpy/std::free instead of new[]/std::copy/delete[]? https://github.com/msteinbeck/tinyspline/blob/master/src/tinysplinecxx.cxx#L588-L591
[20:22:28] <retux> Alipha: No, I'm just used to malloc and free.
[20:23:20] <Alipha> let's play "spot the c coder" ;-)
[20:23:49] <Friithian> do we get the shame them once we've spotted them?
[20:24:59] <xq> yes
[20:25:11] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:25:49] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:26:06] <Alipha> nah, we just link them to youtube videos like https://www.youtube.com/watch?v=xnqTKD8uD64 and https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
[20:26:28] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd)
[20:26:29] *** Joins: ipgd (~IPGD@180.254.226.48)
[20:26:40] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[20:26:42] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[20:28:04] <retux> So I switched the build to C++11. How do I write proper move constructors and move assignment operators?
[20:29:11] <retux> Alipha: Frame doesn't need a copy-ctor and copy assignment operator either, right?
[20:29:43] <Alipha> well, if you delete the unnecessary copy ctors and copy op=, you only need to write move ctors and move op= for FrameSeq, DeBoorNet, and BSpline
[20:30:34] <Alipha> retux: correct. if you don't have a custom destructor, then odds are high you don't need custom copy/move ctors or op=
[20:30:40] <Alipha> !ruleof3
[20:30:41] <nolyc> If you have one of 1) non-empty destructor 2) copy constructor 3) copy assignment operator then you almost certainly need _all_ three. In C++11, this is optionally extended to the Rule Of Five (by including the move constructor and move assignment operator).
[20:30:42] <retux> Is the copy-ctor and op= generated automatically based on the move semantics?
[20:31:50] <Alipha> retux: the compiler-generated copy ctor and op= will simply call the copy ctor or copy op= on all members (and bases). likewise, the move ctor and move op= will call the move ctor and move op= on all members and bases.
[20:33:40] <retux> Alipha: So why do I have to delete the "unnecessary copy ctors and copy op=" from "FrameSeq, DeBoorNet, and BSpline"?
[20:34:13] <Alipha> retux: if you specify your own copy ctor/op=, then the compiler will not generate a move ctor/op= for you
[20:34:49] <Alipha> the presumption is that if your class needs special copying semantics, then it also probably needs special move semantics, and so it's safer to not auto-generate move semantics
[20:35:00] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 2.8)
[20:35:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[20:35:24] <retux> Alipha: But why do you think that their copy-ctors and copy op= are unnecessary?
[20:36:37] *** Joins: Rynn_ (~rynn@216.30.158.198)
[20:36:42] <Alipha> retux: because the copy ctors and copy op= that the compiler will generate for you for Vec2, Vec3, Vec4, and Frame will do exactly the same thing that you're currently doing
[20:37:04] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[20:38:17] <Alipha> retux: if you want to write unnecessary code, go ahead :-P then you should also unnecessarily write move ctor and move op=
[20:38:18] *** Quits: amit_ (~amit@2607:ea00:117::1aa) (Read error: Connection reset by peer)
[20:38:41] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[20:39:23] <retux> But the members of BSpline, DeBoorNet and FrameSeq need special treatment, don't they?
[20:39:54] *** Joins: amit_ (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[20:40:03] <retux> Maybe we are talking about different things. I see that the other classes don't need special ctors etc. But BSpline, DeBoorNet, and FrameSeq do.
[20:40:20] *** Joins: tavares (~tavares@187.19.213.50)
[20:40:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689)
[20:40:22] <Alipha> retux: oh, i see the confusion. sorry, when i said " unnecessary copy ctors and copy op=", i was referring to Vec2, Vec3, Vec4, and Frame
[20:40:55] <Alipha> FrameSeq, DeBoorNet, and BSpline's copy ctors and copy op='s are necessary
[20:40:58] <retux> Ok thanks.
[20:44:28] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:44:29] <IceMichael> ville: I know the idea, sure, but to be honest... then using templates is not really fun
[20:44:46] <IceMichael> I like to use templates also for quite basic things like having a function that should serialize a container<T>
[20:45:10] <IceMichael> T might also be T*, T&, const T or whatever, to be honest... this is a read-only function, I could not care less what kind of container this is
[20:45:14] <CarloWood> I am trying to combine tuple and perfect forwarding, but miserably failing :(  What am I doing wrong here: https://wandbox.org/permlink/hIsk6IUa7fC6wpMW
[20:45:37] <IceMichael> I only want access to T, don't want to care about . or ->, whether it's wrapped in a unique_ptr and so on
[20:45:57] <IceMichael> this is doable with some deref implementation + templates, but... it's very basic operation and I don't want to have all of my serialization code in the header
[20:46:15] <IceMichael> sure, I could have the looping stuff in the header and the detail stuff in the cpp but that's also not neat and clean :(
[20:46:20] <IceMichael> C++ sucks in that regard big time
[20:50:27] <CarloWood> Oh, I have it working... https://wandbox.org/permlink/UtmGlKwXK5Yxfshj
[20:50:41] *** Joins: bnchs__ (~bnchs@41.141.173.31)
[20:51:40] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:52:37] *** Quits: bnchs (~bnchs@105.158.12.46) (Ping timeout: 256 seconds)
[20:52:54] <ville> IceMichael: well it may avoid you having to write f_int_vector(), f_float_vector(), ...
[20:54:08] <ville> so dunno. that must count for some fun even if you stick some explicit instantiations in one tu
[20:54:32] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[20:54:32] *** Joins: tavares (~tavares@user/tavares)
[20:54:39] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[20:55:02] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[20:55:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:55:48] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:57:40] <IceMichael> ville: sure, death by gunshot is better than death by fire but...
[20:59:06] <CarloWood> But you live longer - if you are just seconds away from inventing immortality...
[20:59:59] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[21:01:05] <IceMichael> okay, that's convincing IF there are no better options
[21:01:10] <IceMichael> like .. not dying for now
[21:01:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:01:38] <PJBoy> not sure that's preferable
[21:02:27] <IceMichael> not dying? well, not sure it helps, samsara
[21:02:33] <CarloWood> Which brings us to the following question: You participate in a game show. There are three doors. One hides a car, one death by gunshot and one death by fire.  You pick a door.  The host opens ANOTHER door and reveals that this contains death by gunshot.  You then get the option to change your mind.  Should you pick the other door or stick with your original choice?
[21:03:28] <PJBoy> samsara?
[21:03:35] <PJBoy> is that a reference I'm missing
[21:03:38] <kalven> monty hall problem
[21:03:49] <IceMichael> probably take the chance. death by fire is still ok because you die fast enough because suffocating
[21:03:59] <IceMichael> if it was death by day-long torture, probably stick to the door
[21:04:09] <rpav> if anyone _doesn't_ recognize the monty hall problem
[21:04:30] <PJBoy> to this day I still don't get it
[21:05:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:05:08] <PJBoy> which is why my old algorithms lecturer used to tell us: "don't try to reason about statistics, just do the algebra"
[21:05:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:05:22] <rpav> PJBoy: imagine you have an 1000 doors, 1 is win, 999 are lose; you pick one; the host reveals 998 fails, and one closed door .. do you switch?
[21:05:24] <IceMichael> indeed, the best way to understand this is just draw all options
[21:06:00] <IceMichael> that is, draw an easy picture: a choice made with the gun being at door 1. Now, what happens at switch
[21:06:10] <IceMichael> then the same with gun being at door 2, door 3
[21:06:10] <rpav> i.e. do you think your 1-in-1000 choice has a better chance of being the winner than the remaining door, after all other wrong choices are counted
[21:06:12] <PJBoy> rpav, it seems to me that it's a 50/50 chance of it being the door I chose or the one I can switch to
[21:06:15] <IceMichael> and then the same with choice made for door 2
[21:06:25] <IceMichael> in the end, you get 9 cases
[21:06:38] <rpav> PJBoy: right but think about the 1000-door problem. does the remaining door still seem to be 50/50 to you?
[21:06:39] <IceMichael> or 6, depends on how you draw it. either way, it gets very clear then
[21:06:48] <PJBoy> yeah I meant in the 1000-door problem
[21:06:57] *** Quits: proller (~p@2a02:6b8:0:40c:bd04:d6e:3a0d:3cab) (Ping timeout: 240 seconds)
[21:07:02] <rpav> PJBoy: so your original choice was what, 50/50 or 1-in-1000?
[21:07:04] <IceMichael> repeat for 4 choices, 5... and 1000 is easy
[21:07:11] <PJBoy> my original choice was 1/1000
[21:07:16] <PJBoy> but then it becomes 1/2
[21:07:17] <IceMichael> and samsara is buddhism
[21:07:26] <rpav> PJBoy: your original choice does not change its probability
[21:07:43] <PJBoy> but it becomes a 1/2 chance that it was right
[21:07:44] <IceMichael> like: life is suffering. But dying does not help because unless you get enlightened you will begin a new life and suffer again, damn it
[21:08:13] <rpav> PJBoy: think about it like this, if the host revealed 999 doors, do you think _your_ door has a bigger chance of being in the 999 or being the remaining door
[21:08:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[21:08:38] <rpav> your original choice does not "become" 50/50
[21:08:47] <rpav> it was always 1-in-1000
[21:08:47] <PJBoy> I don't think there's any way to conclude that one door's better than the other
[21:09:12] <PJBoy> the door I chose could have just as easily been the one left over :/
[21:09:22] <rpav> it actually baffles me that the 1000-door method isn't intuitively obvious to someone
[21:09:26] *** Joins: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com)
[21:09:41] <rpav> PJBoy: but it _couldn't_ have been "just as easy" .. you had a 1-in-1000 chance
[21:09:41] <PJBoy> well I just don't see that removing incorrect choices has any effect on the end state
[21:09:51] <PJBoy> the end state is one of the two doors is right
[21:10:11] <PJBoy> with no information on which one it is
[21:10:19] <IceMichael> draw my picture and understand or leave it :D talking about it does not help. As was said before "don't try to explain statistics"
[21:10:21] <PJBoy> I mean I guess there is information, but it makes no sense to me
[21:10:31] <ville> PJBoy: draw the decission tree
[21:10:38] <CarloWood> The answer is: yes you should switch; gives you a chance of survival (the car) that is twice as larger as sticking with the original door. However, this assumes that the host ALWAYS opens a door that doesn't have the car.
[21:11:14] <PJBoy> not sure how to draw out the decision tree
[21:11:27] <rpav> PJBoy: the information was given to you by reavealing 998 of the incorrect doors
[21:11:34] <IceMichael> CarloWood: but dying by fire could be much worse to the individual, so they are so afraid that dying by gun is better than even taking the better chance
[21:11:38] <PJBoy> yeah so I won't pick any of those 998 removed doors
[21:11:51] <PJBoy> but I don't see how that has any relevance to the remaining one
[21:11:57] <rpav> seriously
[21:12:27] *** Joins: Soni (~quassel@autistic.space)
[21:12:28] <ville> PJBoy: do the decision tree for the 3-door version
[21:12:31] <PJBoy> yeah if I picked the right door originally, the remaining one is wrong, if I picked the wrong door, the remaining one is right
[21:12:34] <rpav> imagine that the host _would_ have opened 999 wrong doors; do you really think the door you picked had a 50/50 chance of being correct?
[21:12:38] <PJBoy> could be either way
[21:12:56] <CarloWood> IceMichael: in my particular example the host showed a door with death by gunshot; you don't get to pick that one, so it is car or fire.  The chance is still 1/3 against 2/3 just as with the original Monty Hall problem.
[21:13:05] <ville> PJBoy: then you can just follow the branches and get the odds for the outcomes
[21:13:18] <IceMichael> CarloWood: ah yes, but you could by purpose choose the gunshot door, no?
[21:13:21] <PJBoy> still not sure how to write a decision tree
[21:13:41] <IceMichael> you can google it: https://www.google.com/url?sa=i&url=https%3A%2F%2Fmath.stackexchange.com%2Fquestions%2F845089%2Fprobability-a-variant-of-the-monty-hall-problem&psig=AOvVaw1RscGttSTzRKVYCE_vXH7i&ust=1644082835212000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCIjKiv7L5vUCFQAAAAAdAAAAABAR
[21:13:42] <PJBoy> not in a way that doesn't use the same lack of logic I'm using right now anyways
[21:14:12] <ville> PJBoy: start from a root, branch fo reach option you have at each step
[21:14:26] <rpav> like i can see _maybe_ someoen arguing "well ok for 1000, it's obvious; switch because that has a 998-in-1000 chance of being correct, but if you reduce it to 3, it's the same" but just not seeing how the remaining door is 998-in-1000 is baffling
[21:14:52] <ville> PJBoy: stich the probability on the edge. then when you go from root-to-leaf the edges tell you the total odds for that outcome once you hit the leaf
[21:15:04] <IceMichael> link.. above.. shows it :)
[21:15:13] <IceMichael> okay, need to disappear in a dramatic way, see you then
[21:15:16] <PJBoy> I don't see any decision trees in that link
[21:15:27] <PJBoy> oh wait, I uh
[21:15:31] <PJBoy> didn't scroll down far enough
[21:15:32] <ville> i am sure the monty hall wikipedia as an example
[21:15:32] * IceMichael leaves in a dramatic way, by switching the decision, going through a door, but... no one gets to see what's behind
[21:15:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:15:55] <T`aZ> the probability changes between the first case (no info) and the next step (we have info). it's 2 different situations, 2 different probabilities
[21:15:56] <ville> but better if you manage to draw it your self
[21:16:26] <rpav> T`aZ: yeah apparently there's some misconception that your first-stage probability changes
[21:16:51] <T`aZ> the confusion comes from the fact that, you are in the second stage, but ask do you keep your first choice from the first stage
[21:16:56] <rpav> like i get the confusion with 3 doors because it's close, but 1000 or a million or whatever should really be obvious
[21:17:09] <PJBoy> to me it's like, you flip a coin and it's heads or tails, then someone tells you it isn't 998 options that aren't tails, then you're left with a flipped coin that's either heads or tails
[21:17:11] <PJBoy> and nothing changed
[21:17:25] <rpav> PJBoy: you didn't flip a coin
[21:17:26] <T`aZ> you can no longer ask the probability of the first stage, because the situation has changed
[21:18:10] <rpav> PJBoy: imagine a million boxes; one has a fancy new gadget. you pick one. take it. set it aside .. the host reveals 998 empty boxes
[21:18:23] <rpav> do you think you now have a 50-50 chance of a gadget?
[21:18:44] <T`aZ> you have 50/50, stop wasting time :p
[21:18:50] <PJBoy> nah you'd have a 1/999002 chance
[21:18:54] <rpav> or do you think the remaining box has a 999998-in-1000000 chance of a gadget
[21:18:59] <ville> do you mean 998 or 999998?
[21:19:11] <rpav> err, i mean 1m-1
[21:19:13] <ville> or did you mean thousand instead of a million?
[21:19:46] <rpav> either way, they reveal all empty boxes but leave one remaining; surely that box is _almost_ certainly the box with the gadget
[21:19:55] <rpav> the one you're holding is almost certainly not the one with the gadget
[21:20:14] <PJBoy> it does after it's revealed that you have one of two boxes :/
[21:20:27] <rpav> your one-in-a-million choice doesn't get better because you get more info
[21:20:35] <PJBoy> why not?
[21:20:42] <rpav> when did it get better?
[21:20:43] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:20:44] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[21:20:52] <PJBoy> surely I'm that much more confident that my box is right
[21:20:56] <PJBoy> hm
[21:20:58] <T`aZ> not to be pedantic but, this is offtopic :p
[21:21:04] <rpav> if you made a one in a million choice, and you're _almost certainly_ a loser in the first round, how does a gadget appear inside in the second?
[21:21:05] * Alipha wonders if he should write a javascript app for PJBoy to play with
[21:21:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:21:13] <PJBoy> because if you swapped my box and the remaining box around, nothing would change
[21:21:37] <PJBoy> so I figure those two choices can't admit a preference one way or the other
[21:22:20] <rpav> you really need to think about that a lot harder; nothing "gets switched around" or mixed in the second round
[21:22:22] *** Joins: BobTheTomato (~paul@141.217.247.7)
[21:22:30] <rpav> but yes this is OT
[21:23:11] <rpav> `constexpr class` when
[21:23:40] <retux> Here we go. I upgraded the lib to C++11 with move semantics. Thanks for your advises.
[21:24:52] *** Quits: Rynn_ (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:25:34] *** Quits: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com) (Quit: MadcapJake)
[21:30:20] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:33:31] *** Joins: zuhkov (~duycop@14.166.144.253)
[21:33:48] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:34:21] <zuhkov> hi
[21:35:06] <CarloWood> I am stuck again. Why is the first line below "Calling baz_from_tuple():" printing that the `const&` constructor of Bar was called? In https://wandbox.org/permlink/R3iM8SO63To3FhMA
[21:35:32] <Alipha> PJBoy: here you go: https://wandbox.org/permlink/4MptPW4MW79QuZEQ
[21:38:10] <Eelis> !rule 50
[21:38:11] <nolyc> Many people here do not consider anything longer than 50 lines a testcase and will refuse to analyze it.
[21:38:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:38:59] <CarloWood> Alipha: https://gyazo.com/7753a1fdffb46eb9fcb0c4844ba6ba90
[21:39:28] <Alipha> CarloWood: lol, nice
[21:39:35] <Alipha> and you had 90 fails :-P
[21:39:44] <Alipha> better than 1/100 though
[21:40:02] <CarloWood> Worse, the first time it said "Right" I STILL clicked on 'Run' as an automate
[21:40:19] <zz> CarloWood: dat color scheme tho...
[21:40:27] <zz> screams USA/France right into one's face
[21:41:04] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[21:41:48] <PJBoy> UK too
[21:41:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:42:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:08] *** ChanServ sets mode: +v npaperbot
[21:43:03] <zz> PJBoy: they don't have as much white portions imo
[21:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:43:23] <PJBoy> russia too
[21:43:27] <CarloWood> Eelis: same question: https://wandbox.org/permlink/xC5f3Ku0qAhi97Ld
[21:43:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:44:33] <PJBoy> UK flag is 34% white
[21:44:53] <PJBoy> so that's more than france
[21:44:54] <Eelis> the testcase lacks any indication of what the difference is between expected output and actual output
[21:44:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:45:15] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[21:45:34] <Eelis> see point 3 in http://eel.is/c++/testcase/
[21:45:53] <CarloWood> lol - that's because you had me remove the part that suggested that the expected output is "Bar::Bar(double&, int&, A&)" for the first line :P
[21:46:06] <CarloWood> Nothing is const.
[21:46:16] <CarloWood> So why suddenly call the const& version?
[21:46:28] <Eelis> if your claim is that 50 lines is not enough for both code and an indication of the issue: i don't believe it (not even a little bit)
[21:47:01] <CarloWood> You just don't want to help, that's clear.  Can anyone else have a look? :/
[21:47:05] <Alipha> CarloWood: the std::make_tuple(a) on line 49 means that your tuple is std::tuple<..., A>, and so std::make_from_tuple is going to match that to either A&& or const A&
[21:47:39] <Eelis> CarloWood: you just don't want to make a good testcase, that's clear. but there's definitely other people that will help you regardless :)
[21:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[21:49:16] <Alipha> CarloWood: https://wandbox.org/permlink/w5srPJaxhSUuBFq7
[21:49:32] <CarloWood> Alipha: Hmm... so `std::make_tuple(a)` is std::tuple<A>, that's clear.  And the `std::forward<std::tuple<Args...>>(args)` is std::tuple<double const&, A&>`?
[21:49:57] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:50:56] *** Joins: seninha (~seninha@user/seninha)
[21:51:00] *** Parts: zuhkov (~duycop@14.166.144.253) ()
[21:51:05] <Alipha> CarloWood: the std::forward on line 42 nor 49 do anything meaningful
[21:51:32] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[21:52:35] <CarloWood> The one on line 42 is from a previous test and was definitely needed: https://wandbox.org/permlink/M4KqIZ3uyDsFZMtC
[21:53:20] <PJBoy> code breaks horribly if you remove the forward on 49
[21:53:56] <CarloWood> If I remove it, I get: https://wandbox.org/permlink/6c2WpJFLOGhmhLzN
[21:54:01] <Alipha> actually, both should be std::move instead of std::forward, for clarity (std::move and std::forward have the same effect in this case because `args` is always an rvalue reference)
[21:54:06] <Alipha> my mistake
[21:54:43] <CarloWood> nuh... args is a universal reference :/
[21:54:44] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:54:47] <PJBoy> it doesn't have to always been an rvalue reference
[21:55:08] <PJBoy> although it is in that testcase
[21:55:10] <Alipha> CarloWood: a "forwarding reference" (or "universal reference") is in the form of T&& where T is a template parameter to the function. `std::tuple<Args...>&&` is not in that form.
[21:55:25] <CarloWood> Oh
[21:55:31] *** Quits: bnchs__ (~bnchs@41.141.173.31) (Ping timeout: 256 seconds)
[21:55:38] <PJBoy> bah, fair enough
[21:55:58] <CarloWood> Then do I need && at all there?
[21:55:59] <PJBoy> this is why we need herb's in/inout/out/forward/move parameters
[21:57:01] <Alipha> e.g., T&& can match either int& or int&& (with T=int& in the former and T=int in the latter). and so, T&& is a forwarding/universal reference. std::tuple<Args...>&& can match std::tuple<int>&& but not std::tuple<int>&
[21:57:05] <CarloWood> What I am trying to do, in case that wasn't clear :p, is to perfect forward using tuples and cat extra parameters on the way.
[21:58:22] <CarloWood> Maybe, once it is a tuple, there is no need for std::forward or any tuple variation thereof - cause then the types are fixed as part of the tuple as &, const&, && or const&& anyway.
[21:58:54] <Alipha> CarloWood: seems that you want `a` to be an lvalue if d and i are lvalues and `a` to be an rvalue if d and i are rvalues. but what if d is an lvalue and i is an rvalue?
[21:59:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:59:28] <CarloWood> No not really...
[21:59:37] <CarloWood> That just happened in this test case.
[22:00:00] <CarloWood> It would be more practical to just pass a A* (the actual case that I'll first need this for)
[22:00:52] <CarloWood> Otherwise I'd have to make four different baz_from_tuple functions I think - to add each of the four possible 'A' types.
[22:01:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:02:14] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[22:05:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:10:08] <CarloWood> Ok this works: https://wandbox.org/permlink/DkgPXTDRAYe02ZqR
[22:10:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64)
[22:10:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64) (Changing host)
[22:10:22] *** Joins: skapata (~Skapata@user/skapata)
[22:11:01] <CarloWood> Thanks again! I didn't understand the forwarding thing one bit - but knowing that this is really only a thing for T&& - that helped a lot.
[22:11:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:11:21] <CarloWood> It *is* annoying though that I have to do:
[22:11:25] <senoraraton> How do I initalize a variable the first time I call a function, but then never reinialize it in the function?  I have a function that creates a pointer to my data structure on init, but that pointer will get over written if I call the function again.
[22:11:31] <CarloWood>   baz_from_tuple(std::forward_as_tuple(d, i));
[22:11:35] <CarloWood> instead of
[22:11:47] <CarloWood>   baz_from_tuple(std::make_tuple(d, i));
[22:11:54] *** Joins: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de)
[22:12:05] <Eelis> senoraraton: you make a class that does the initialization in the constructor, and make the function a member function
[22:12:33] *** Joins: bnchs (~bnchs@41.141.173.31)
[22:13:45] <CarloWood> senoraraton: there are several ways to do that. Often people use a static in the function, only thread-safe when the first time it is called you're sure there is no race. Then there is https://en.cppreference.com/w/cpp/thread/call_once
[22:16:21] *** Joins: seninha (~seninha@user/seninha)
[22:17:41] *** Joins: Guest36 (~Guest36@res388d-128-61-91-234.res.gatech.edu)
[22:18:48] *** Joins: Uswald (~leandre@lfbn-idf2-1-243-131.w83-202.abo.wanadoo.fr)
[22:18:48] *** Quits: Uswald (~leandre@lfbn-idf2-1-243-131.w83-202.abo.wanadoo.fr) (Changing host)
[22:18:48] *** Joins: Uswald (~leandre@user/Uswald)
[22:20:02] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:22:43] *** Joins: writeback[m] (~writeback@2001:470:69fc:105::1:6118)
[22:26:05] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[22:28:13] <senoraraton> eelis Your solution doesn't work because it kicks the can down the road, I still have to instantiate the class to call the constructor, but I can only do that AFTER the first data element is created because thats my pointer.  So I can't instantiate in the loop, and I don't have the data I need until the first iteration.
[22:28:14] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[22:28:14] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[22:28:28] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[22:28:28] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:28:28] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[22:28:28] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[22:28:28] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[22:28:28] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[22:28:28] *** Joins: Stewart (~stewart@2001:470:69fc:105::1:6cd)
[22:28:40] *** Joins: nlatp[m] (~nlatpmatr@2001:470:69fc:105::1:4d1f)
[22:28:40] *** Joins: wielding (~wielding@user/wielding)
[22:28:41] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[22:28:41] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[22:28:41] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[22:28:41] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[22:28:41] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[22:29:18] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[22:30:55] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[22:32:45] *** macbook is now known as toad
[22:33:01] *** toad is now known as toadtoad
[22:33:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:33:23] *** Joins: thebe111 (~thebe111@user/thebe111)
[22:34:24] <CarloWood> senoraraton: why can't you create an uninitialized variable?
[22:35:24] *** Joins: quartz (~quartz@user/quartz)
[22:35:49] <senoraraton> I could, but then I have to assign it in the loop. I can't declare the variable as static at the class level, because I may have multiple instances of the class.
[22:35:53] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[22:36:06] <CarloWood> I mean, the whole class idea is good; it's object oriented ;). You have to put your variable somewhere, and as member of a class is logical.
[22:36:55] <senoraraton> Still though, I can't declare the variable as static.  So how do I assign it once in the method?/
[22:36:58] <CarloWood> What is the signature of the function?
[22:37:10] <senoraraton> Static variables in a class: As the variables declared as static are initialized only once as they are allocated space in separate static storage so, the static variables in a class are shared by the objects.
[22:37:16] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[22:37:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:37:47] <CarloWood> static is bad anyway - not suited for threaded programs and/or extensions later on.
[22:38:05] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:38:09] <senoraraton> https://github.com/SenorGato/8bit/blob/main/main.cpp
[22:38:36] <CarloWood> Ok that totally puts Eelis out of the picture :p
[22:38:50] <senoraraton> In line 34 I used to have a global scoped vector to hold the data.  I don't have the class written here, but my initMenu function needs to define the pointer head to the linked lists of menus.
[22:39:30] <senoraraton> *menuItems to be correct, not list of menus.
[22:39:50] <CarloWood> So line 72 needs to be executed once?
[22:40:58] <CarloWood> Or what is the pointer that you want to initialize?
[22:41:40] <senoraraton> I'm changing the data structure. On line 34 I define a global vector that used to hold the inital data set.
[22:42:06] <senoraraton> I want to remove the global, move it into a menu class, and instantiate a pointer that points to the first element created the first time initMenu is called for a given object.
[22:42:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:42:40] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:43:14] <CarloWood> You're being very very vague.
[22:44:06] <CarloWood> All I want is to see the function, and the pointer that you initialize, and how it is being initialized; even if it is initialized every call. And then I can tell you how to change it so it is only initialized the first call.
[22:44:21] <senoraraton> I'll rewrite it.
[22:45:04] <CarloWood> You got to at least show broken code - now I have the feeling you show something where you deleted code and I have to guess what you deleted.
[22:45:16] <senoraraton> The pointer never existed.
[22:45:44] <senoraraton> The code is in re-write.  I was asking how to fix the problem so that I could rewrite it properly.  I'm editing it.
[22:48:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[22:51:02] *** Quits: ckdCreations (~ckdCreati@147.55.133.129) (Quit: Leaving)
[22:51:10] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[22:52:28] <CarloWood> { A a; auto t = make_tuple(3.14, 42, 'x', &a); SHOW(t); } struct A {};
[22:52:29] <geordi> t = {3.14, 42, 'x', 0x7fff9a87e752}
[22:52:40] <CarloWood> How is geordi doing that? ...
[22:54:17] <Alipha> presumably SHOW checks if t either has std::begin/std::end or std::get defined and uses those to iterate over the container/tuple-like object
[22:55:12] <Alipha> std::get/std::tuple_size
[22:55:35] <CarloWood> looking at https://stackoverflow.com/questions/6245735/pretty-print-stdtuple
[22:55:44] <CarloWood> but there are so many solutions :/
[22:56:25] <CarloWood> https://stackoverflow.com/a/58417285/1487069 is the latest I guess.
[22:57:03] <CarloWood> powerful..
[22:57:54] *** gentooclimax is now known as climax
[22:59:44] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[23:00:16] *** Joins: vicfred (~vicfred@user/vicfred)
[23:00:25] *** Joins: Dreg (~Dreg@fr33project.org)
[23:00:25] <CarloWood> { A a; auto t = make_tuple(3.14, 42, 'x', &a); cout << t; } struct A {}; template<typename... Args> ostream& operator<<(ostream& os, tuple<Args...> const& t) { std::apply([&os](auto&&... args) {((os << args << " "), ...);}, t); return os; } }
[23:00:25] <geordi> error: Unexpected `}` after ` os; } `. Expected balanced code or end of request.
[23:00:32] <CarloWood> { A a; auto t = make_tuple(3.14, 42, 'x', &a); cout << t; } struct A {}; template<typename... Args> ostream& operator<<(ostream& os, tuple<Args...> const& t) { std::apply([&os](auto&&... args) {((os << args << " "), ...);}, t); return os; }
[23:00:32] <geordi> error: no match for 'operator<<' in 'operator<< <char_traits<char> >((* & o), ((const char*)", ")) << t' (operand types are 'ostream' and 'const ostream')
[23:00:38] <CarloWood> wut
[23:00:54] <kalven> plz privmsg geordi
[23:02:04] <PJBoy> recall that geordi overloads operator, for ostream
[23:02:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:02:33] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (Read error: Connection reset by peer)
[23:02:37] <PJBoy> so your comma fold needs a void cast, e.g. `(void(os << args << " "), ...)`
[23:02:45] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
[23:03:54] <Alipha> CarloWood: yeah, your snippet works fine on non-geordi: https://wandbox.org/permlink/a8Rd3kSojV32GtZL
[23:04:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:04:33] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:05:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:05:56] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[23:05:58] *** Joins: Soni (~quassel@autistic.space)
[23:09:03] *** climax is now known as gentooclimax
[23:09:18] <CarloWood> Ah ok... couldn't find the difference.
[23:09:41] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[23:09:59] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:10:00] <CarloWood> Now imagine I had privmsg-ed geordi from the start, then I'd still be searching!
[23:11:26] <senoraraton> Okay here -> https://github.com/senorgato/8bit/blob/main/main.cpp
[23:12:04] <kalven> CarloWood: nah, privmsg with geordi until you have a question.. Not trivial errors like unbalanced input.
[23:12:07] <senoraraton> So in the Menu class there is a *head.  On the first call of initMenu() I want to assign the first element created to that pointer, because that points to the master node of the menu.
[23:12:11] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:12:27] <kalven> That is, the second line is ok, the first one is just spam
[23:12:49] <PJBoy> yeah I almost always test my snippets in PMs
[23:13:01] <CarloWood> The first one was a typo. I fixed that in 1 second.
[23:13:02] <PJBoy> and every time I don't, I regret it
[23:13:02] <Alipha> why is "initMenu" called more than once? don't you only "init" once?
[23:13:25] <CarloWood> If you look at #geordi - you'll see that 95% of the tests are by me.
[23:13:26] <senoraraton> Currently no, because each level of the menu is intalized seperately, so that you can pass it a "level" of the menu
[23:13:44] <CarloWood> so, don't tell me I don't use geordi in "private" :P
[23:13:46] <kalven> CarloWood: exactly, typos happen. By doing them in private we don't all have to see them.
[23:13:50] <senoraraton> So the top level gets inited, then you point to the 2nd level head you want(i.e. file) and then it inits the next layer.
[23:13:58] <kalven> This should be a fairly uncontroversial request
[23:16:52] <senoraraton> If I declare a static ptr in the function, and then I make the assignment to the object, it won't ever get redeclared because its static, but the assignment will happen in every loop, which is "okay"?
[23:17:26] <CarloWood> So we have the first call to:
[23:17:28] <CarloWood> void initMenu(std::vector<std::string> keys, Menu *menu, menuItem* parent = new menuItem()){
[23:17:40] <CarloWood> And then you want to initialize what with what?
[23:18:05] <CarloWood> menu->head = ?
[23:18:19] <CarloWood> menu->head = parent ?
[23:18:20] <senoraraton> I want to initalize mainMenu *head = the FIRST instance of new menuItem{} that is created, because I need a pointer to that menu item, because the first one is the "master node" of the linked list.
[23:18:30] *** Joins: seninha (~seninha@user/seninha)
[23:19:03] <senoraraton> The child that is created.  so menu->head = parent->children.back();
[23:19:53] <senoraraton> Because the first time through the loop the parents are NULL, because top level elements don't have parents, so your always referencing the children in the loop.
[23:19:57] <CarloWood> But at the moment you enter, parent->children is empty
[23:20:04] <senoraraton> Exactly!
[23:20:23] <CarloWood> So then when is this back() known?
[23:20:26] <senoraraton> I have to create the first data element and THEN assign it to ptr, but the loop will reassign.  This is the entire problem.
[23:20:41] <senoraraton> It gets created on line 81
[23:21:27] <CarloWood> But you append stuff - so is it the first time you do line 81? Or do you need to back() at the moment you leave this function?
[23:21:37] <CarloWood> the* back()
[23:21:53] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[23:22:27] <senoraraton> So I iterate through the loop over a vector of keys.  I need a pointer to the first time I create an instance of menuItem(line 81).  Because that is the FIRST menu item, which functions as the head node for all later menu items.
[23:22:54] <senoraraton> And I want to store that to Menu->head.
[23:23:30] <CarloWood> So, it's not really parent->children.back() but the very first menuItem{} that is created on line 81?
[23:23:43] <senoraraton> Correct
[23:23:52] <CarloWood> Now I have enough info :)
[23:23:55] <CarloWood> lemme think
[23:24:13] <senoraraton> The decleration and the assignment are on the same line.  Its bad practice I guess?  Someone told me not to do that, but it feels much cleaner imho.
[23:24:51] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[23:25:00] *** Joins: Betal (~Betal@user/betal)
[23:26:29] <CarloWood> I don't understand lines 107 to 110
[23:26:41] <senoraraton> They are deprecated.
[23:26:53] <CarloWood> There is no 'at()' in mainMenu - which is a Menu*
[23:27:08] <senoraraton> Once I have the ptr to the head I will use that to make the calls for the secondary menus, and I will have to parse the tree to find the parent node.
[23:27:26] <senoraraton> They are commented out for a reason.
[23:27:44] <CarloWood> Once it works, how will line 107 look like then?
[23:28:39] <CarloWood> I mean - the way it is now, you only call initMenu once - so my solution would be to just initialize your pointer.  I need to see how it is called afterwards in order to take that into account.
[23:29:46] *** Joins: qaluh (~qaluh___@p200300e61718b3006245cbfffea017b6.dip0.t-ipconnect.de)
[23:30:20] <senoraraton> I don't know, because I don't have the pointer to figure it out.
[23:31:19] <senoraraton> Essentially I am going to have to traverse the list, and check the key to a key provided by the call as a string.  And set the parent node equal to the matched key string that I passed.  But I can't start that tree travesal without a pointer to the head.
[23:31:58] *** Joins: Uswald (~leandre@2a01cb040075f900d52579b4cac4dfe6.ipv6.abo.wanadoo.fr)
[23:31:58] *** Quits: Uswald (~leandre@2a01cb040075f900d52579b4cac4dfe6.ipv6.abo.wanadoo.fr) (Changing host)
[23:31:58] *** Joins: Uswald (~leandre@user/Uswald)
[23:32:25] <senoraraton> So I can't FIND the data I need to make the calls make sense until I have an initalized pointer that won't get overwritten in the function call.
[23:32:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:34:06] *** Quits: ipgd (~IPGD@180.254.226.48) (Read error: Connection reset by peer)
[23:37:01] <senoraraton> Here -> This is how it should work.
[23:37:26] <senoraraton> https://github.com/SenorGato/8bit/blob/main/main.cpp
[23:37:56] <senoraraton> Wait there is an error, line 110 should be initMenu(aboutLevel, menuFont, mainMenu->head->sibling->sibling->sibling);
[23:38:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689) (Ping timeout: 256 seconds)
[23:38:46] <CarloWood> where is menuFont->head assigned then?
[23:39:05] <senoraraton> .... >.>  It is not.  That is the ENTIRE point of the whole question.
[23:39:29] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 268 seconds)
[23:39:36] <CarloWood> And it shouldn't be assigned? You want to keep it nullptr?
[23:39:57] <senoraraton> How do I assign it a single time on the first instance of menuItem in initMenu and assign it to Menu->head and not overwrite it.
[23:40:07] <senoraraton> No I NEED the head pointer.
[23:40:14] <senoraraton> Without it, I can't access my data structure.
[23:40:39] <CarloWood> On line 107 you do: initMenu(fileLevel,menuFont, mainMenu->head);
[23:40:54] <CarloWood> menuFont->head at that point is nullptr (or unassigned anyway)
[23:41:02] <senoraraton> Because the problem that I have is not solved.
[23:41:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[23:41:15] <CarloWood> It is not what you assigned to mainMenu->head.
[23:41:27] <senoraraton> I never assigned anything to mainMenu->head
[23:41:39] <senoraraton> Because I don't know how to, which is the root of the entire question.
[23:41:50] <CarloWood> Not yet, but I am assuming we will do so in initMenu no?
[23:42:11] <senoraraton> *shrug* I do not know.  If you instantiate the ptr in the loop, then it gets overwritten.
[23:42:13] <CarloWood> Assume initMenu works.
[23:42:16] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[23:42:42] <CarloWood> No it doesn't - you only pass mainMenu once.
[23:43:14] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:43:14] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[23:43:17] <senoraraton> Thats a bug
[23:43:51] <CarloWood> fix it?
[23:44:10] <senoraraton> Reload
[23:44:19] <CarloWood> Ah ok
[23:44:44] <senoraraton> Wait, I have an idea.
[23:45:49] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:46:27] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[23:46:29] <senoraraton> Since I'm instantiate mainMenu, I can build a constructor that accepts a Menu, and that constructor can build my head ptr, and I can have a constructor that accepts a *menuItem which would be the parent, and that doesn't.
[23:47:05] <senoraraton> So I don't need to pass the mainMenu to the secondary functions, because I can just pass a ptr to their parent, which is already a member of mainMenu(Or whatever menu its a child of)
[23:47:22] <CarloWood> senoraraton: why would this not work? https://bpa.st/4WVQ
[23:47:46] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:29] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:48:45] *** Parts: qaluh (~qaluh___@p200300e61718b3006245cbfffea017b6.dip0.t-ipconnect.de) (Leaving)
[23:49:25] <CarloWood> It does the same as your code (or should), but also assigns menu->head.  You can ignore all my other changes if you want - I just rewrote it in a way that I thought was more intuitive.
[23:49:30] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:50:22] <CarloWood> Aka - no allocation outside a possible empty loop (leaks memory if keys is empty), no 'sib' that is really just the same as 'child' and no juggling with sib and back() - while they are all the same thing anyway.
[23:50:42] <senoraraton> Just to be clear on line 21: child ? child : new menuItem  Means either assign child if defines, or create child ifndef?
[23:51:29] <CarloWood> if child is non-null then that is child, otherwise create and pass a new menuItem (your initial sib = new..)
[23:52:20] <CarloWood> I didn't check your logic... I just rewrote the code keeping it the same as what it did before.
[23:52:25] <senoraraton> I feel like I was attempting to avoid running the check at the end, but it works just as well.
[23:54:33] <CarloWood> I think this code still looks weird; which would indicate you have some design error or bug imho.
[23:54:41] <CarloWood> So many 'new'.
[23:55:11] <CarloWood> And suppose there is only a single key.  Then you STILL call THREE times new... kinda odd.
[23:55:59] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd) (Ping timeout: 252 seconds)
[23:56:02] <CarloWood> parent is new-ed, then child is new-ed and gets passed another new-ed menuItem.  That's three menuItem's for the smallest possible menu tree with one key. Is that ok?
[23:57:14] <CarloWood> For the main menu I could imagine that is because you have an empty "root" node - that isn't really part of the menu - so 1. root, 2. parent, 3. one key = one child.
[23:57:25] <CarloWood> But the same happens for the other calls.
[23:57:26] <senoraraton> Well, the parent that gets newed is an artifact of reducing the code to treating every element as if it had a parent, which means you can treat top level elements as children and it condenses the code.  So its kind of necessary, child is obviously necessary cause thats the actual data.
[23:57:51] <senoraraton> Where is the third new?  Child just gets instantiated, and it is a menuItem
[23:57:57] <RandomReader> it looks a bit like you've fixed on a particular function pattern, rather than the data structure
[23:58:10] <CarloWood> I'll leave that to you... I'm going to cook dinner and eat while watching a movie.  I hope this helps you in how to assign that pointer though.
[23:58:16] <RandomReader> I'd usually suggest prioritizing things the other way, since that tends to result in easier-to-use code
[23:58:41] <senoraraton> Honestly I have spend 3 days rewriting this function, and its been a learning experience.*shrug*
[23:58:44] <RandomReader> fixated*
[23:59:09] <senoraraton> I'm not sure how to do what your suggesting RandomReader.
[23:59:11] <RandomReader> ok, so that fits then .. now that you've done it and learned some things, my question would be: why this function at all?
[23:59:29] <RandomReader> why is calling initMenu this way the simplest option to represent what you want to do?
[23:59:42] <RandomReader> e.g. it's not how std::vector works
[23:59:50] <senoraraton> So i have to build the menu, and my data structure that I'm using is nested linked lists, because it gives me scalability.
[23:59:59] <RandomReader> (and you have an idea of how vector feels to use)
