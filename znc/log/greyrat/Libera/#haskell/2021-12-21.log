[00:00:28] <euouae> is that adding 1 to the bit representation?
[00:00:32] <tomsmeding> yeah
[00:00:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:00:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:00:34] *** Joins: wroathe (~wroathe@user/wroathe)
[00:01:09] <euouae> nice, is there an issue between Double and Int being incompatible in size?
[00:01:33] <tomsmeding> Int is a 64-bit int on 64-bit platforms, and Double is also 64-bit, so they happen to have equivalent representations
[00:03:45] <EvanR> and then somehow the adding 1 to an int does what you want ðŸ¤”
[00:04:14] <geekosaur> I bet it only does so if the modulus is correct
[00:04:18] <EvanR> yeah
[00:04:21] *** Joins: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com)
[00:04:31] <tomsmeding> modulus?
[00:04:33] <euouae> I think https://hackage.haskell.org/package/floating-bits-0.3.0.0/docs/Data-Bits-Floating-Ulp.html may be a bit more careful 
[00:04:59] <geekosaur> % unsafeCoerce (unsafeCoerce (1e120 :: Double) + 1 :: Int) :: Double
[00:04:59] <yahb> geekosaur: 1.0000000000000001e120
[00:05:02] <geekosaur> huh
[00:05:24] <EvanR> what does it do one the last value before exponent change
[00:05:24] <geekosaur> soorry, meant exponent
[00:05:39] <geekosaur> since floats and doubles are stored as modulus and exponent
[00:05:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:06:18] <euouae> https://en.wikipedia.org/wiki/IEEE_754-1985 This is how floats are stored I believe, that's the standard it follows
[00:06:26] <tomsmeding> % -1.0/0
[00:06:26] <yahb> tomsmeding: -Infinity
[00:06:29] <tomsmeding> % unsafeCoerce (unsafeCoerce (-1.0/0 :: Double) - 1 :: Int) :: Double
[00:06:30] <yahb> tomsmeding: -1.7976931348623157e308
[00:06:31] <tomsmeding> clearly
[00:06:44] <euouae> oh whoops, that's the /old/ one, the new one is https://en.wikipedia.org/wiki/IEEE_754
[00:06:49] * tomsmeding learned "mantissa and exponent"
[00:06:55] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[00:07:08] <geekosaur> and I misremembered mantissa, dammit
[00:07:13] <geekosaur> not my day I guess
[00:07:27] <EvanR> so to get out of -infinity, you have to go down lol
[00:07:50] <tomsmeding> IEEE-754 floats are designed in such a way that apart from the sign bit, < comparison is the same as interpreting them as integers
[00:07:57] <EvanR> should be in the hacker survival guide or something
[00:08:09] <tomsmeding> only flaw in that is that negative numbers sort above positive numbers due to the sign bit
[00:08:25] <tomsmeding> so adding one is indeed +1ULP, except that there are special cases surrounding infinity/NaN
[00:08:39] <tomsmeding> because they take up some of the code space
[00:08:40] <euouae> now I wish I had some na'an
[00:08:54] <tomsmeding> naan <3
[00:09:15] <gentauro> geekosaur: `8.10.7` seem to work. Thx for the tip
[00:09:16] <gentauro> :)
[00:09:32] <geekosaur> np
[00:09:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[00:10:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[00:10:18] <tomsmeding> 21:35 <EvanR> what does it do one the last value before exponent change
[00:10:29] <tomsmeding> it raises the exponent by one and resets the mantissa to zero
[00:10:33] <tomsmeding> which is exactly the right thing
[00:10:37] <EvanR> slick
[00:10:48] <tomsmeding> (except at the inf/nan boundaries and across zero)
[00:11:18] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[00:11:25] <euouae> I think those checks are shown in the floating-bits link I had above
[00:11:55] <tomsmeding> yeah use a proper lib please instead of this hack lol
[00:12:11] <euouae> in undergrad I was grilled on floats by a professor
[00:12:40] <euouae> scary stuff, I managed to blurt out "maybe try double?"
[00:13:39] <euouae> "No. Won't work." he responded before moving on to a different set of questions, and to this day I have no idea what the issue wqas 
[00:14:04] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:14:08] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 268 seconds)
[00:14:20] <geekosaur> my opinion on floating point is if I need to know that stuff, I've landed in the wrong line of work :)
[00:14:33] <geekosaur> that's the compiler's job as far as I
[00:14:40] <EvanR> if you remember the question at least you could try again or ask it here
[00:14:40] <geekosaur> 'm concerned
[00:15:15] <geekosaur> that said I guess now I understand how that hack that came up the other day works
[00:15:16] <euouae> well, it /was/ a numerical analysis class...
[00:15:47] <geekosaur> (mm, did that come up here or in a different channel?)
[00:15:47] <monochrom> float and double have the same problems, just at different scales.
[00:15:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:15:57] <tomsmeding> euouae: perhaps it was some kind of log(1+x) style issue
[00:16:24] *** Joins: Guest70 (~Guest70@89.151.178.153)
[00:16:37] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:16:53] *** Quits: Guest70 (~Guest70@89.151.178.153) (Client Quit)
[00:17:35] <euouae> Who knows. I knew increasing to double would make it more accurate like monochrom says, but he must have been wanting me to analyze the underlying cause.
[00:17:58] *** Joins: cjb (~cjb@user/cjb)
[00:19:05] <[itchyjunk]> Is there an easy enough example of this that I might understand?
[00:19:06] <[itchyjunk]> https://en.wikipedia.org/wiki/Uniqueness_type
[00:19:07] <EvanR> it gets more precise but not necessarily more accurate xD
[00:19:29] <[itchyjunk]> String is also list of char so it's not unique?
[00:19:53] <tomsmeding> [itchyjunk]: have you ever looked at the programming language Futhark
[00:19:59] <tomsmeding> or Clean
[00:20:06] <[itchyjunk]> never heard of them :O
[00:20:10] <EvanR> > let (m,e) = decodeFloat 99.0 in encodeFloat (m - 1) e -- I guess this is a passable way without having to install floating bits
[00:20:12] <lambdabot>  98.99999999999999
[00:20:20] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[00:20:28] <EvanR> wait that won't work
[00:20:36] <EvanR> or will it
[00:20:54] <euouae> [itchyjunk] look into linear types, that should help you I think
[00:21:00] <tomsmeding> [itchyjunk]: https://futhark.readthedocs.io/en/stable/language-reference.html#in-place-updates
[00:21:14] <tomsmeding> not sure that will help you, but it _is_ a real-world example of usage of uniqueness types
[00:21:45] <monochrom> I thought of that. What I worried about was again "what does it do one the last value before exponent change", does encodeFloat do the desirable thing? Or does it just bottom out?
[00:21:55] <[itchyjunk]> ohh, you get to do non functional programming language thing but with the fp benifits of no side effect?
[00:21:58] <EvanR> encodeFloat is the wildcard
[00:22:01] <tomsmeding> linear types, depending on who you talk to, either refers to something subly different from uniqueness types, or otherwise to a more general class of type system( feature)s that include uniqueness types among other things
[00:22:32] <tomsmeding> [itchyjunk]: kind of, the idea is that if you have a value with a unique type, then you know that you have the only reference to that thing
[00:22:50] <tomsmeding> so it's safe to do all kinds of mutation on it, because you remain referentially transparent: nobody else can see what you're doing
[00:23:16] <[itchyjunk]> hmm cant i have some unique type but with two things pointing to it?
[00:23:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[00:23:24] <[itchyjunk]> it's still one of a kind but 2 things point to it
[00:23:36] <tomsmeding> note that this is subly different from the LinearTypes thing that Haskell has since GHC 9.0: there we have function arrows %1-> that guarantee that a function uses its input exactly once (roughly)
[00:23:56] <monochrom> I think you are using the "unique" adjective on the wrong object.
[00:24:04] <monochrom> It is not "unique as in snowflake".
[00:24:09] <tomsmeding> doesn't mean that the function can assume that it has the only reference to its input value
[00:24:21] <monochrom> It is "unique as in can't have two users".
[00:24:46] <[itchyjunk]> ahh
[00:25:43] <dmj`> Has anyone attempted to parse the Haskell 2010 grammar with an Earley parser? Wondering if that can help in situations where ambiguity is present (e.g. aexp vs. apat). 
[00:26:37] <tomsmeding> suppose that you have an imaginary haskell-like language where for any type T, *T denotes "a unique T". Suppose you have a function f :: *(Array Int) -> *(Array Float). Then the code `let a = newArray in zipWith (+) (f a) (f a)` is invalid because `a` is shared between the two calls to `f`, so the arguments to `f` are not unique
[00:27:07] <tomsmeding> however, `let a = newArray ; b = newArray in zipWith (+) (f a) (f b)` would be valid, since both calls to `f` get a value to which they have the only reference
[00:27:21] <tomsmeding> assuming that newArray produces a brand new value of type *(Array Int)
[00:28:29] <c_wraith> dmj`: Earley's algorithm can't handle context-sensitive grammars, which Haskell is. at best you could parse it to an intermediate point and then you'd have to do another pass to fix up the things it couldn't parse correctly on the first pass
[00:30:07] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[00:30:32] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:34:56] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:35:03] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:37:55] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:38:05] <dmj`> c_wraith: Haskell's grammar as defined in the report is not context sensitive (so it says). Things like white space / layout are handled by a post-lexing layout phase to convert the grammar into a CFG. So by the time you get to the LALR parser you're operating on a CFG. My understanding is that the issue is the CFG is not a deterministic CFG.
[00:39:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[00:39:58] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:5835:b5d3:9cc8:104b)
[00:41:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:43:59] *** Joins: ksqsf (~user@134.209.106.31)
[00:44:19] *** Joins: acidjnk (~acidjnk@p200300d0c7271e5430c1f3c646e9c4d1.dip0.t-ipconnect.de)
[00:44:35] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:5835:b5d3:9cc8:104b) (Ping timeout: 252 seconds)
[00:46:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:47:04] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:5835:b5d3:9cc8:104b)
[00:47:24] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[00:47:36] <dmj`> c_wraith: GHC (and JHC) "solve" this by treating all patterns as expressions https://github.com/ghc/ghc/blob/master/compiler/GHC/Parser.y#L3280-L3289
[00:48:59] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 252 seconds)
[00:49:52] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[00:55:06] *** jmtd is now known as Jon
[01:01:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:04:58] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[01:05:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[01:07:57] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:08:42] *** Quits: sander (~sander@user/sander) (Read error: Connection reset by peer)
[01:09:27] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[01:10:41] *** Joins: sander (~sander@user/sander)
[01:13:33] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Client Quit)
[01:13:45] *** Quits: hueso (~root@user/hueso) (Ping timeout: 250 seconds)
[01:14:21] *** Joins: hueso (~root@user/hueso)
[01:14:58] <Henson> what's a good IDE for doing Haskell development?  I used to use Atom's haskell-ide package, but it looks like it hasn't been updated in some time, and ghc-mod apparently doesn't work with newer versions of Haskell.
[01:15:06] <disfrutar-conchi> there are no none deterministic operations for a machine. 
[01:15:14] <disfrutar-conchi> especially not for a computer.
[01:15:24] <euouae> I like Emacs Henson, I use it with the doom-emacs package and it's batteries included 
[01:15:43] <tomsmeding> Henson: vscode is generally the easiest to get working with haskell-language-server, but you can use haskell-language-server with other editors too if they support the language server protocol
[01:15:57] <tomsmeding> (HLS is "the thing" for IDE support now)
[01:15:58] <disfrutar-conchi> that is at the the heart of the erisian illusion (as opposed to the unerisian)
[01:16:31] <iqubic> HLS is excellent. I use HLS with Emacs and it works really really well.
[01:17:18] <euouae> disfrutar-conchi never heard of the erisian illusion 
[01:17:39] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:18:21] <disfrutar-conchi> euouae: you certainly heard einstein popularily claiming god does no dice. well.. it turned out he spent the whole sunday on inventing them. 
[01:18:34] <Henson> thanks for the info, everyone, I'll look into HLS.  Maybe I need to switch from VI to Emacs!
[01:18:53] <disfrutar-conchi> and by that get rid of his almight. hardest part.
[01:19:10] <disfrutar-conchi> but much more exciting.
[01:19:30] <tomsmeding> Henson: I'm using HLS in neovim with the built-in LSP support and it works fine; I used it before in vim with ALE and it also worked fine. Though it doesn't support all the fancy stuff like code lenses and whatnot
[01:19:46] <disfrutar-conchi> euouae: https://principia-discordia.com 
[01:20:07] <geekosaur> disfrutar-conchi, what has this to do with Haskell?
[01:20:35] <disfrutar-conchi> geekosaur: look up chain of events. if you care.
[01:20:55] <disfrutar-conchi> i would like to know what is meant with deterministic. 
[01:21:09] <EvanR> haskell allows non-deterministic computations
[01:21:23] <EvanR> pretty easily
[01:22:19] <disfrutar-conchi> i will look it up. thank you. good night. bye.
[01:22:58] * disfrutar-conchi there is nothing that will stop me.
[01:22:58] <euouae> oh we're getting trolled
[01:23:19] *** Parts: disfrutar-conchi (uid498179@user/earendel) ()
[01:23:34] <geekosaur> yeh, that was why I stepped in
[01:24:23] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 250 seconds)
[01:24:26] <geekosaur> don't see what part of "not a deterministic CFG" leads to "there are no none (sic) deterministic operations for a machine" followed by a bunch of pseudophilosophy
[01:24:44] <geekosaur> but I may be grumpy today
[01:28:59] <EvanR> trolling / philosophy is there a diff? xD
[01:30:14] *** Joins: deadmarshal (~deadmarsh@95.38.230.107)
[01:31:13] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[01:32:32] <euouae> I enjoy Nietzsche
[01:33:23] <pfurla-matrix> Descartes
[01:33:42] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[01:33:54] <euouae> curry-howard correspondence has a section on philosophical interpretation on wikipedia :P
[01:34:17] *** Quits: deadmarshal (~deadmarsh@95.38.230.107) (Ping timeout: 240 seconds)
[01:34:21] <monochrom> "earendel is now known as disfrutar-conchi" some 5 hours ago.
[01:34:28] <Inst_> hi guys
[01:34:30] <Inst_> btw, i'm confused
[01:34:38] <Inst_> someone on Functional Programming Discord
[01:34:52] <Inst_> told me that join is only defined for 2 or more levels of structure on a given monad
[01:35:17] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Ping timeout: 240 seconds)
[01:35:21] <pfurla-matrix> euouae: all by the same author, a bit disheartening 
[01:35:56] <pfurla-matrix> `join :: m (m a) -> m a`
[01:36:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:36:32] <Inst_> ah
[01:37:17] <Inst_> join :: Monad m => m (m a) -> m a
[01:37:28] <Inst_> yup so join should not be defined for stuff like join [3]
[01:37:41] <pfurla-matrix> euouae: the said author https://en.wikipedia.org/wiki/Ruy_de_Queiroz, he is actually an engineer
[01:37:51] <monochrom> IMO, as usual, the type signature is infinitely clearer than wordy descriptions like "two levels of structure".
[01:38:03] <Inst_> okay, world makes sense again
[01:38:07] *** Joins: ksqsf (~user@134.209.106.31)
[01:38:32] <Inst_> bind = join.fmap
[01:38:47] <geekosaur> didn't we cover that one yesterday?
[01:38:51] <Inst_> i think we did
[01:38:57] <geekosaur> :t join . fmap -- doesn't work
[01:38:58] <lambdabot> error:
[01:38:58] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[01:38:58] <lambdabot>       Expected type: (a -> a1) -> m (m a1)
[01:39:08] <geekosaur> :t (join .) . fmap
[01:39:09] <lambdabot> Monad m => (a1 -> m a2) -> m a1 -> m a2
[01:39:16] <Inst_> ????
[01:39:22] <Inst_> :t id.id
[01:39:23] <lambdabot> c -> c
[01:39:26] <euouae> pfurla-matrix rest assured there are probably more philosophical works out there discussing CHL iso...  
[01:39:29] <Inst_> :t join.fmap
[01:39:30] <lambdabot> error:
[01:39:30] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[01:39:30] <lambdabot>       Expected type: (a -> a1) -> m (m a1)
[01:39:36] <geekosaur> you can think of this meaning that (join . fmap) only handles one parameter, whereas fmap needs two
[01:39:38] <Inst_> iirc that's the definition of bind somewhere, no?
[01:39:47] <monochrom> NO
[01:39:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[01:39:54] <Inst_> oh christ
[01:40:22] <monochrom> IMO in this case the pointful formula is more helpful.  m>>=k = join (fmap k m)
[01:40:39] <monochrom> join (fmap k m) is obviously not (join . fmap) k m
[01:41:02] <dmj`> geekosaur: thanks for trying to keep my question from getting derailed, "machines do not have deterministic operations" is arguing a separate point from Haskell2010 CFG.
[01:41:48] <Inst_> okay, fine, so let's use that definition of bind, etc etc etc
[01:42:48] *** Parts: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[01:43:00] *** Quits: xff0x (~xff0x@2001:1a81:5214:2e00:39f0:aaaf:c001:5cae) (Ping timeout: 240 seconds)
[01:43:03] <pfurla-matrix> join . fmap k
[01:43:41] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 245 seconds)
[01:44:10] <monochrom> It is still pretty ugly. At best you have to invoke section syntax (which isn't enlightening) and go "(>>= k) = join . fmap k".
[01:44:14] *** Joins: xff0x (~xff0x@2001:1a81:5214:2e00:3a40:685:1119:99d6)
[01:44:14] <pfurla-matrix> join = (>>= id)
[01:44:14] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:46:31] <EvanR> join .: fmap, :sunglasses:
[01:46:40] <monochrom> heh
[01:46:42] <Inst_> (>>= k) = join . fmap k
[01:47:11] <EvanR> there you go
[01:47:13] <Inst_> what is .: anyways?
[01:47:13] <Inst_> is that compose with cons?
[01:47:34] <EvanR> it composes but feeds two arguments into the first function
[01:47:47] <EvanR> your missing k in this case
[01:48:05] <pfurla-matrix> euouae: in the CHL wikipage, right after there is a section named "synthetic papers", do you know what is synthetic paper?
[01:48:32] <EvanR> it's a cheesy not really standard operator
[01:48:39] <Inst_> i see
[01:48:47] <pfurla-matrix> EvanR, where is it defined?
[01:48:51] <EvanR> right here
[01:48:54] <pfurla-matrix> :t (.:)
[01:48:55] <lambdabot> error:
[01:48:55] <lambdabot>     â€¢ Variable not in scope: .:
[01:48:56] <lambdabot>     â€¢ Perhaps you meant one of these:
[01:49:01] <EvanR> @def (.:) = (.) . (.)
[01:49:01] <lambdabot>  <command line>: does not exist: .L.hs
[01:49:10] <monochrom> It's @let
[01:49:13] <euouae> pfurla-matrix I think it's a technical term in logic, "synthetic". I'm suspecting it from pages such as https://ncatlab.org/nlab/show/synthetic+topology
[01:49:27] <EvanR> @let (.:) = (.) . (.)
[01:49:27] <lambdabot>  <command line>: does not exist: .L.hs
[01:49:49] <geekosaur> o.O
[01:49:52] <monochrom> But yeah lately lambdabot has a problem with that.
[01:50:28] <pfurla-matrix> euouae: I think this is the correct definition https://ncatlab.org/nlab/show/synthetic+mathematics, but thanks
[01:51:18] <Inst_> what is a function composition anyways?
[01:51:22] <Inst_> maybe I don't get the meaning of .
[01:51:27] <euouae> pfurla-matrix hmm yeah I think you got it 
[01:51:48] <geekosaur> (f . g) x is just a short way of saying f (g x)
[01:51:51] <monochrom> f . g = \x -> f (g x)
[01:52:01] <pfurla-matrix> :t (.)
[01:52:02] <lambdabot> (b -> c) -> (a -> b) -> a -> c
[01:52:20] <euouae> pfurla-matrix I've read the P. Wadler paper "Propositions as Types" and I would not call it "synthetic", more of an exposition.
[01:52:22] <Inst_> wait, is the problem with . that (b -> c) -> (a -> B)?
[01:52:29] <Inst_> erm, (a -> b)?
[01:52:34] <monochrom> Soon, you will understand why I follow Dijkstra in saying "a formula is worth a thousand pictures" (so a million words).
[01:53:14] <Inst_> since fmap is (a->b) -> a -> b iirc
[01:53:21] <pfurla-matrix> euouae: I agree
[01:53:35] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:53:41] <pfurla-matrix> fmap :: (a -> b) -> m a -> m b
[01:53:46] <monochrom> (a->b) -> M a -> M b, whichever monad you use for M.
[01:53:46] *** Quits: yushyin (3RNeQpThcJ@karif.server-speed.net) (Quit: WeeChat 3.3)
[01:53:48] <Inst_> erm, f a f b
[01:53:55] *** Joins: yushyin (C2iSDogdK9@karif.server-speed.net)
[01:54:35] <Inst_> so . fails in join . fmap because fmap doesn't match the type requirements of .?
[01:54:48] <pfurla-matrix> how many words is a type worth? :)
[01:55:07] <monochrom> Type signatures are formulas, too.
[01:55:52] <Inst_> :t .
[01:55:53] <lambdabot> error: parse error on input â€˜.â€™
[01:55:54] <pfurla-matrix> yeah
[01:55:59] <Inst_> :t (.)
[01:56:00] <lambdabot> (b -> c) -> (a -> b) -> a -> c
[01:56:04] <Inst_> :t (.)(.)
[01:56:05] <lambdabot> (a1 -> b -> c) -> a1 -> (a2 -> b) -> a2 -> c
[01:56:20] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[01:56:20] <pfurla-matrix> it needs a section
[01:56:22] <pfurla-matrix> :t (.)
[01:56:24] <lambdabot> (b -> c) -> (a -> b) -> a -> c
[01:56:25] <Inst_> :t (..)
[01:56:26] <lambdabot> error: parse error on input â€˜..â€™
[01:56:42] <hpc> ".." is part of import syntax and list ranges
[01:56:57] <Inst_> (.)(.) join fmap
[01:57:15] <EvanR> :t ((.) . (.)) join fmap
[01:57:15] <lambdabot> Monad m => (a1 -> m a2) -> m a1 -> m a2
[01:57:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[01:57:23] <pfurla-matrix> sections are when you don't give all the arguments to an operator and it the compiler needs to be aware it's missing arguments
[01:57:32] *** Quits: hueso (~root@user/hueso) (Ping timeout: 240 seconds)
[01:57:35] <EvanR> surely all is clear now
[01:57:37] <pfurla-matrix> so we right (+) or (+1)
[01:57:50] <Inst_> :t (>>=)
[01:57:51] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[01:58:09] <pfurla-matrix> *write (f phonetics)
[01:58:30] <hpc> fonetics
[01:58:35] <monochrom> I think "((.) . (.))" can be further "improved" to "((.) (.) (.))"
[01:58:47] <Inst_> you know this is a boobies joke, right?
[01:58:51] <pfurla-matrix> hpc: exactly
[01:58:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:59:02] <monochrom> In fact, using the covariant homset functor, "(fmap fmap fmap)"
[01:59:09] <EvanR> ((.) (.) (.)) would have to be the total recall boobies joke
[01:59:10] *** Joins: cjb (~cjb@user/cjb)
[01:59:19] <monochrom> heh
[01:59:51] <Inst_> :t join (.).(.) fmap
[01:59:52] <pfurla-matrix> EvenR: I see you are familiar on the ways of 80s references
[01:59:52] <lambdabot> Functor f => ((f a -> f b) -> a -> b) -> (f a -> f b) -> f a -> f b
[02:00:02] <Inst_> heh
[02:00:13] <Inst_> in this channel, we are trying to turn monads into a mammary gland joke
[02:00:19] <EvanR> not usually
[02:00:26] <monochrom> @type fmap fmap fmap join fmap
[02:00:27] <lambdabot> Monad m => (a1 -> m a2) -> m a1 -> m a2
[02:00:31] *** Joins: hueso (~root@user/hueso)
[02:00:32] <monochrom> \âˆ©/
[02:00:47] <EvanR> my god it's full of fmaps
[02:00:58] <mrianbloom> What is the right way to enable LinearTypes in package.yaml?
[02:01:11] <Inst_> :t join (.)(.) fmap
[02:01:12] <lambdabot> error:
[02:01:12] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: a ~ f a
[02:01:12] <lambdabot>       Expected type: ((b -> f b) -> (f a -> b) -> f a -> f b)
[02:01:28] <Inst_> :t join . fmap
[02:01:29] <lambdabot> error:
[02:01:29] <lambdabot>     â€¢ Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[02:01:29] <lambdabot>       Expected type: (a -> a1) -> m (m a1)
[02:01:40] <monochrom> OK I'm done.
[02:01:44] <Inst_> yeah, sorry
[02:01:50] <Inst_> i'll scoot, just need to repair my thinkpad again
[02:01:55] *** Joins: notzmv (~zmv@user/notzmv)
[02:01:57] <Inst_> need to send it back to servicing, f- lolnovo
[02:03:34] <janus> mrianbloom: you put it in default-extensions?
[02:04:02] <mrianbloom> Ah, default-extensions? I'll try that.
[02:05:36] <dmj`> c_wraith: purescript has an interesting way of getting around this ambiguity using %partial in happy, https://github.com/natefaubion/purescript-cst/blob/master/src/Language/PureScript/CST/Parser.y#L441-L454
[02:06:12] <pfurla-matrix> :t join (+)
[02:06:14] <lambdabot> Num a => a -> a
[02:06:57] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[02:07:05] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:08:22] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:08:40] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[02:12:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[02:13:53] *** Parts: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (server died; rip)
[02:15:11] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:15:45] <janus> why can't i coerce Int32 -> Int ? does GHC support platforms where Int is smaller than 32 bits?
[02:16:22] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[02:17:04] <geekosaur> it can'tper the Report (minimum size of Int is 30 bits)
[02:17:28] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[02:17:45] <geekosaur> how are you trying to coerce it?
[02:18:07] <janus> with Data.Coerce.coerce. but i will just use fromIntegral then, i guess
[02:18:22] <geekosaur> oh. that does not work ith basic types, only with newtypes
[02:18:42] <geekosaur> it wraps and unwraps newtypes only
[02:19:16] <janus> but i thought Int32 and Int were actually newtypes that wrapped some type with a hash sign in it
[02:19:24] <monochrom> Ah right, "data Int32 = ..."
[02:19:30] <monochrom> similarly for Int
[02:19:38] <janus> @src Int
[02:19:38] <lambdabot> data Int = I# Int#
[02:19:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:20:04] <monochrom> Int and Int32 have to support laziness. Can't be Int# directly.
[02:20:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:24:04] <janus> it's interesting that there is coerce and fromIntegral. but what if i want to convert but without betraying the sign of the input? what is the function for that?
[02:24:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:24:47] <geekosaur> I don't understand "betraying the sign", but I think there is a package for that
[02:25:48] <janus> geekosaur: i mean, if you convert 256 to an Int8, it becomes negative, right? that is what i mean about betraying the sign
[02:27:04] <janus> % :m +GHC.Int
[02:27:04] <yahb> janus: 
[02:27:17] <janus> % 0xf0000000 :: Int32
[02:27:17] <yahb> janus: ; <interactive>:216:1: warning: [-Woverflowed-literals] Literal 4026531840 is out of the Int32 range -2147483648..2147483647; -268435456
[02:27:44] <janus> % fromIntegral 0xf0000000 :: Int32
[02:27:44] <yahb> janus: -268435456
[02:27:47] <EvanR> in quickcheck's Arbitrary instance for Float, it doesn't seem to ever generate very small values or very large, just "normal" and zero?
[02:28:24] <geekosaur> https://hackage.haskell.org/package/conversions-0.0.4/docs/Data-Conversions.html#v:checkedFromIntegral
[02:28:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[02:29:01] <janus> oooh very cool
[02:29:09] <janus> suspicious how it has no docs
[02:29:13] <janus> but i guess it documents itself
[02:30:08] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:30:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:30:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:31:15] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:31:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[02:31:48] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:32:20] *** Joins: ksqsf (~user@134.209.106.31)
[02:33:39] <pfurla-matrix> I am adopting https://inutile.club/estatis/falso/ for all my logic needs https://inutile.club/estatis/falso/
[02:34:02] <EvanR> prop_huh x = not (0 < x && x < 0.001) -- passes 10000 tests
[02:35:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[02:35:35] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:36:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[02:37:04] <EvanR> ok, it doesn't pass 1000000 tests
[02:38:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:41:49] <janus> that's why hedgehog is better ;)
[02:41:55] <janus> @check \x -> not $ 0 < x && x < 0.1
[02:41:57] <lambdabot>  +++ OK, passed 100 tests.
[02:45:00] *** Joins: typeswitch (~textual@2001:8a0:da87:e500:68bf:9d74:2322:5a5b)
[02:45:57] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:81c1:fdbc:2b2:4c4a) (Read error: Connection reset by peer)
[02:46:09] <Christoph[m]> <janus> "why can't i coerce Int32 -> Int..." <- In Which, Int32 -> Int is instanciated as TryFrom:
[02:46:09] <Christoph[m]> https://hackage.haskell.org/package/witch-0.3.4.1/docs/Witch.html
[02:46:09] <Christoph[m]> But it doesn't say why.
[02:46:37] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 240 seconds)
[02:46:59] <EvanR> Int32 isn't guaranteed promotable to Int
[02:47:19] <Axman6> Int is defined as being at least 30 bits
[02:47:19] <EvanR> there's multiverse where haskell runs on 30 bit computers
[02:47:50] <Axman6> well, not quite, there was some space left for tagging if implementations wanted to do that
[02:47:56] <euouae> lisp machines
[02:47:59] <Axman6> having Int take up one Word would be quite nice
[02:48:02] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:48:04] <euouae> do the tagging too
[02:48:26] <Axman6> GHC does too, but on pointers, since everything is word aligned
[02:49:06] <euouae> has anyone looked into F*? I've been learning more of it recently and it's fun
[02:49:16] <euouae> The language F*
[02:50:04] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:51:45] <janus> it seems really focused on cryptography
[02:51:48] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[02:54:45] <euouae> From what I've learned so far I can do some elementary proofs. So a property such as (reverse (reverse l)) == l can be proven in the type system
[02:55:21] <euouae> and so you wouldn't need e.g. hedgehog to run tests on such a property, because you've proven it true
[02:56:21] <janus> right, it has dependent types. some people want haskell to have this also
[02:56:48] <EvanR> funny "workflow" in idris is to write the property as a type at the top level, the definition of it is the proof, checked by the type checker
[02:57:44] <EvanR> you may or may not run or use the value
[02:58:08] <euouae> the other component of F* is that it uses the Z3 theorem prover, and that means you can get automation and other things, and I think Idris does not have that.
[02:58:24] <euouae> There's also other projects like Liquid Haskell? Lean, ...
[02:59:59] <euouae> so that's the sort of thing that blew my mind because when you're trying to prove properties for your functions, the implementation matters, and the "black box abstraction" of functions is out the window!
[03:00:13] *** Joins: AlexNoo_ (~AlexNoo@178.34.150.63)
[03:00:57] *** Joins: ksqsf (~user@134.209.106.31)
[03:01:59] <euouae> but ok -- not much enthusiasm. I really hope to learn more because I'm fascinated about the application of extracting correct programs. 
[03:02:17] *** Quits: AlexZenon (~alzenon@178.34.163.82) (Ping timeout: 240 seconds)
[03:02:38] <EvanR> that's what some people say, you can't hide implementation details with dependent types
[03:03:04] <EvanR> also it seems like there might be like 5 people on earth who know what they're doing with dependent types 
[03:03:24] *** Quits: Alex_test (~al_test@178.34.163.82) (Ping timeout: 256 seconds)
[03:03:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:04:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[03:04:21] *** Quits: AlexNoo (~AlexNoo@178.34.163.82) (Ping timeout: 268 seconds)
[03:04:41] <justsomeguy> How can I seek to the beginning of an open file handle?
[03:05:29] <EvanR> hSeek
[03:05:34] <EvanR> in System.IO
[03:05:44] <Henson> tomsmeding: vscode seems to be a pretty similar experience Atom, and HLS support was very easy to get working.
[03:06:14] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[03:07:02] *** Joins: AlexZenon (~alzenon@178.34.150.63)
[03:07:42] *** Joins: Alex_test (~al_test@178.34.150.63)
[03:08:23] *** AlexNoo_ is now known as AlexNoo
[03:08:37] *** Quits: kranius (~kranius@user/kranius) (Ping timeout: 240 seconds)
[03:08:50] *** Quits: typeswitch (~textual@2001:8a0:da87:e500:68bf:9d74:2322:5a5b) (Changing host)
[03:08:50] *** Joins: typeswitch (~textual@user/typeswitch)
[03:09:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:10:15] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[03:17:42] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[03:20:01] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[03:21:02] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:25:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[03:26:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[03:27:12] *** Quits: euouae (~euouae@user/euouae) (Ping timeout: 256 seconds)
[03:27:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:28:12] *** Joins: ksqsf (~user@134.209.106.31)
[03:28:42] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[03:30:15] <zero> f 0 = 1 ; f n = n + n * f (pred n)  -- should i expect ghci to be faster at running `f x` after i run `f (x-1)` ?
[03:30:28] <Axman6> no
[03:30:41] <Axman6> there is no automatic memoisation in Haskell
[03:30:47] <Axman6> (*)
[03:31:32] <zero> what about `map f [0..] ; f !! x` ?
[03:31:38] <zero> i mean
[03:32:00] <zero> `fx = map f [0..] ; fx !! x`
[03:32:06] <Axman6> yes
[03:32:15] <zero> got it
[03:32:17] *** Joins: euouae (~euouae@user/euouae)
[03:32:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:32:22] <Axman6> because fx is still in scope
[03:32:54] <geekosaur> and it behaves like a constant, not a function
[03:32:57] <monochrom> Memoization happens if you go "fs = 1 : map (\n -> n + fs !! (pred n)) [1..]
[03:33:00] <Axman6> uh, well, actually if you ran f n, f (n-1) wouldn't be any faster
[03:33:00] <zero> question #2: why can't there be automatic memoisation in Haskell? :p
[03:33:26] <geekosaur> how much of your memory do you want to spend on inadvertently memoized stuff you'll never look at again?
[03:33:31] <Axman6> because it's generally a bad idea that leads to slow programs that use a lot of RAM
[03:33:33] <monochrom> It is a pessimization.
[03:34:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:34:11] <monochrom> Imagine a web server that memoizations all webscale transactions in the past.
[03:34:32] *** Quits: acidjnk (~acidjnk@p200300d0c7271e5430c1f3c646e9c4d1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:34:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[03:34:37] <Axman6> Why does that immediately make me thing of blockchain...
[03:34:39] <Axman6> think*
[03:34:47] <monochrom> :)
[03:35:54] <Axman6> zero: if you had fibs = 0:1:zipWith (+) fibs (tail fibs), then fibs !! n would compute fibs !! (n-1) for you
[03:35:54] <zero> what about annotating? like `{-# MEMO f #-}`
[03:36:10] <Axman6> why annotate when you can just use a function?
[03:36:15] *** Quits: max22- (~maxime@2a01cb0883359800b82a50c14ca08cd9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:36:17] <Axman6> @hoogle memo
[03:36:18] <lambdabot> Data.MemoTrie memo :: HasTrie t => (t -> a) -> t -> a
[03:36:18] <lambdabot> FRP.Elerea.Param memo :: Signal a -> SignalGen p (Signal a)
[03:36:18] <lambdabot> FRP.Elerea.Simple memo :: Signal a -> SignalGen (Signal a)
[03:36:50] <Axman6> hmmmm could Ed's discrimination library be used for memoisation?
[03:38:28] <Axman6> should be trivial actually...
[03:38:28] *** Quits: euouae (~euouae@user/euouae) (Read error: Connection reset by peer)
[03:38:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:41:04] <zero> @.@
[03:41:04] <lambdabot> Maybe you meant: @ .
[03:41:45] <zero> i would have to invest some time in understanding that
[03:42:42] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[03:43:40] <mrianbloom> @Janus, thanks for that suggestion. It worked but I also sent myself in cabal hell for an hour.
[03:43:40] <lambdabot> Unknown command, try @list
[03:43:48] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:45:37] <Axman6> s/trivial/"trivial"
[03:46:19] <mrianbloom> I'm out now.
[03:50:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[03:53:10] <zero> ok what abut this one: Data.Map.Strict.fromList [(1,let fibs = 0 : 1 : zipWith (+) fibs (tail fibs) in fibs)]
[03:53:57] <zero> should I expect ghci to give me `mymap M.! 1 !! x` faster after (x-1)?
[03:54:01] <zero> because it's not
[03:55:38] *** Joins: lragyslmtdwnbt^ (~lragyslmt@64.253.22.77)
[03:57:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:57:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:57:17] *** Joins: wroathe (~wroathe@user/wroathe)
[03:57:34] <jkaye> Why would it?
[03:57:35] <typeswitch> should be, `mymap M.! 1` should be the same `fibs` every time
[03:58:12] <zero> actually i'm not even seeing any improvement on fibs !! x... strange
[03:58:21] <typeswitch> seems a bit convoluted to put it in a map tho
[03:59:26] <geekosaur> if you're doing this in ghci it may not work because it relies on the monomorphism restriction
[03:59:48] <zero> geekosaur: how's that?
[03:59:51] <geekosaur> otherwise it's secretly a function because your numbers are Num a => a
[04:00:05] <zero> ah..
[04:00:54] <zero> ok it works now
[04:01:00] <zero> thanks geekosaur 
[04:04:22] <zero> that's an important detail
[04:04:36] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:06:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:10:12] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[04:11:34] *** Joins: sander (~sander@user/sander)
[04:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:14:15] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[04:15:47] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:17:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[04:19:15] <mrianbloom> So if I want to use linear types do I need to replace every monad usage with the monad definition from Prelude.Linear?
[04:22:48] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[04:23:18] <mrianbloom> What is the right way to override Prelude by using mixins?
[04:23:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[04:24:50] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:24:51] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[04:25:00] *** Quits: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 256 seconds)
[04:25:25] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:25:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Client Quit)
[04:26:34] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:27:10] *** Joins: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[04:27:17] <geekosaur> I don't think mixins will work. You need to use Prelude.Linear in place of Prelude
[04:28:48] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:29:04] <mrianbloom> Thanks, so is the right way to make base-noprelude and linear-base dependencies?
[04:29:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:31:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[04:32:15] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:32:41] <mrianbloom> My hope is to avoid changing the header of every file.
[04:33:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:33:46] <geekosaur> I don't think you will succeed
[04:34:10] <geekosaur> the documented use is to {-# LANGUAGE NoImplicitPrelude #-} and import Prelude.Linear
[04:34:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[04:34:49] <geekosaur> if you want it to be more transparent, I guess you'll have to talk to the folks at Tweag
[04:35:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:35:57] <geekosaur> but I'm not sure they want it to be transparent because too much would break
[04:36:24] <geekosaur> you really need to start out with linear types in mind, from what I am seeing
[04:38:18] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:38:27] <mrianbloom> Alright, I'm actually trying to integrate them into the futhark wrapper, futhask, to try and eliminate gpu space leaks, but I'll try it with a very simple example first.
[04:38:30] <geekosaur> they don't even use compatible module names (Monad is in Control.Functor.Linear)
[04:38:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Ping timeout: 240 seconds)
[04:38:45] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:38:48] <mrianbloom> I see.
[04:39:30] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:39:42] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:39:58] <mrianbloom> I'll try a common import module for Monad, MonadIO etc.
[04:40:08] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:40:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[04:41:19] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:41:48] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:41:52] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:43:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:43:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[04:43:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:47:17] *** Quits: danso (~danso@d67-193-121-2.home3.cgocable.net) (Ping timeout: 240 seconds)
[04:47:20] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[04:47:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[04:47:57] *** Joins: trollRoger (~trollroge@ti0017q161-1333.bb.online.no)
[04:48:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:48:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:52:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[04:52:37] *** Quits: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 240 seconds)
[04:55:13] *** Joins: ksqsf (~user@134.209.106.31)
[04:58:45] *** [_] is now known as [itchyjunk]
[04:59:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[05:01:38] *** Joins: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[05:02:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:08:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[05:11:22] *** Quits: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 268 seconds)
[05:11:29] *** Quits: trollRoger (~trollroge@ti0017q161-1333.bb.online.no) (Quit: WeeChat 3.4)
[05:11:39] *** Joins: aeka (~aeka@2606:6080:1001:d:c59c:6e9a:3115:6f2f)
[05:15:09] *** Joins: danso (~danso@d67-193-121-2.home3.cgocable.net)
[05:17:50] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[05:19:01] *** Joins: hololeap_ (~hololeap@user/hololeap)
[05:19:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:19:59] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:20:28] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[05:23:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[05:29:16] *** Quits: danso (~danso@d67-193-121-2.home3.cgocable.net) (Ping timeout: 268 seconds)
[05:29:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[05:29:39] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:29:40] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:31:56] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[05:32:20] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 268 seconds)
[05:32:54] *** Joins: Guest17 (~Guest17@2001:19f0:7001:3383:5400:3ff:fea2:fee5)
[05:35:57] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[05:37:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:37:17] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[05:37:28] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:39:04] *** Quits: typeswitch (~textual@user/typeswitch) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:41:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[05:43:29] *** Joins: berberman_ (~berberman@user/berberman)
[05:44:32] *** Quits: berberman (~berberman@user/berberman) (Ping timeout: 240 seconds)
[05:45:11] *** Joins: Guest26 (~Guest26@209.141.167.143)
[05:45:35] *** Quits: Guest26 (~Guest26@209.141.167.143) (Client Quit)
[05:49:14] *** Joins: Guest23 (~Guest23@cpec025e909512d-cm00fc8d8c9620.cpe.net.cable.rogers.com)
[05:49:19] *** Joins: ksqsf (~user@134.209.106.31)
[05:51:48] *** Quits: Guest23 (~Guest23@cpec025e909512d-cm00fc8d8c9620.cpe.net.cable.rogers.com) (Client Quit)
[05:54:32] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[05:55:14] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[05:55:14] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[05:55:14] *** finn_elija is now known as FinnElija
[06:03:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdb2:1444:46f4:adc7) (Ping timeout: 240 seconds)
[06:10:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:11:29] *** finstern1s is now known as finsternis
[06:15:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[06:16:14] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:18:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[06:19:37] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[06:22:00] *** Quits: finsternis (~X@23.226.237.192) (Quit: leaving)
[06:22:40] *** Joins: finsternis (~X@23.226.237.192)
[06:22:52] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:23:48] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[06:25:21] *** Quits: xff0x (~xff0x@2001:1a81:5214:2e00:3a40:685:1119:99d6) (Ping timeout: 245 seconds)
[06:27:24] *** Joins: xff0x (~xff0x@2001:1a81:5251:6900:31bd:c473:a01b:db9e)
[06:27:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[06:30:55] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[06:32:01] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[06:37:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:42:57] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[06:43:30] *** Joins: ksqsf (~user@134.209.106.31)
[06:44:55] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:47:14] *** Quits: Guest17 (~Guest17@2001:19f0:7001:3383:5400:3ff:fea2:fee5) (Quit: Client closed)
[06:48:05] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[06:48:22] *** Quits: td_ (~td@94.134.91.10) (Ping timeout: 256 seconds)
[06:48:26] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[06:48:27] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[06:49:17] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Ping timeout: 240 seconds)
[06:49:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[06:50:06] *** Joins: td_ (~td@94.134.91.4)
[06:51:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[06:53:42] *** Quits: lragyslmtdwnbt^ (~lragyslmt@64.253.22.77) (Remote host closed the connection)
[06:55:48] *** Joins: mbuf (~Shakthi@122.164.195.237)
[06:56:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[07:03:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:06:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:06:34] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:06:34] *** finn_elija is now known as FinnElija
[07:07:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[07:10:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:10:57] *** hololeap_ is now known as hololeap
[07:14:17] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:15:46] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[07:20:08] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:20:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:25:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[07:27:47] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[07:28:13] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Client Quit)
[07:28:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:32:02] *** Joins: BrokenClutch (~pioneer@2804:d41:c251:8e00:2f95:d3cd:d94f:7520)
[07:34:39] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[07:37:09] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[07:37:37] *** Joins: ksqsf (~user@134.209.106.31)
[07:37:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:39:17] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[07:39:19] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:39:22] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:39:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[07:40:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:42:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[07:42:23] *** Quits: Guest9348 (~mike@user/feetwind) (Quit: WeeChat 3.1)
[07:42:42] *** Parts: BrokenClutch (~pioneer@2804:d41:c251:8e00:2f95:d3cd:d94f:7520) ()
[07:43:42] *** Joins: feetwind (~mike@user/feetwind)
[07:45:14] *** Quits: puke (~puke@user/puke) (Quit: puke)
[07:45:40] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[07:47:58] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[07:50:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:51:44] <Square> Im planning on making a simple text serialization module. Possibly just work as Show and Read, wo replacing them, but not be stock derivable. I wonder if anyone knows a lib that does this or any other simple short cut before i start shoving tons of time this way. 
[07:52:40] <dsal> Square: How do you want it to worok?
[07:53:05] <dsal> There's generic related things like Aeson, or DerivingVia
[07:55:04] <Square> dsal, basically i want it to work like quick (https://hackage.haskell.org/package/quiet) wo replacement of show / read
[07:55:53] <Square> dsal, ...and generics seems to be a the be a good approach to shorten time doing this.
[07:56:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[07:56:13] <dsal> Yeah, that uses DerivingVia
[07:56:56] <Square> And if i dont want to replace show / read - deriving via is no go right? 
[07:57:15] <dsal> Orthogonal.
[07:57:35] <dsal> This is specifically making Show/Read instances.  You can make up your own type class and do the same thing.
[07:58:25] <Square> So you suggest i make a copy of Show / Read and then wire it up by deriving via? 
[08:00:09] <dsal> Well, you can click source on that and see what it does.  It's not much.  There are two things:  1: make it do the thing for Generic and 2: make it do the thing for whatever class you want.
[08:00:14] <Square> (copy in the sense of structure (not the class function names)
[08:00:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[08:04:17] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:05:02] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[08:07:29] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:09:57] *** Quits: emf (~emf@2620:10d:c091:480::1:8fa6) (Ping timeout: 240 seconds)
[08:09:58] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:11:51] *** Joins: ymh (~ym@pool-96-253-29-94.prvdri.fios.verizon.net)
[08:14:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[08:14:59] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:5835:b5d3:9cc8:104b) (Quit: gone to sleep. ZZZzzzâ€¦)
[08:15:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:15:21] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[08:20:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[08:29:01] *** oats is now known as factsandlogic
[08:29:49] *** Joins: Guest83 (~Guest83@122-199-1-30.ip4.superloop.com)
[08:29:49] *** Joins: jimmys (~jimmys@2001:8004:11a0:5d05:1516:3364:d6ab:71dd)
[08:29:57] *** Joins: ksqsf (~user@134.209.106.31)
[08:30:11] *** factsandlogic is now known as oats
[08:30:57] *** Quits: Guest83 (~Guest83@122-199-1-30.ip4.superloop.com) (Client Quit)
[08:31:37] *** Joins: Guest23 (~Guest23@cpec025e909512d-cm00fc8d8c9620.cpe.net.cable.rogers.com)
[08:31:39] *** Joins: Guest83 (~Guest83@122-199-1-30.ip4.superloop.com)
[08:31:56] *** Quits: Guest83 (~Guest83@122-199-1-30.ip4.superloop.com) (Client Quit)
[08:33:01] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:33:26] *** Joins: sagax (~sagax_nb@user/sagax)
[08:39:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:41:03] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[08:44:21] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[08:45:40] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[08:52:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:56:11] *** Joins: Guest138 (~Guest1@2601:18c:4300:36d0:480a:3125:fad9:df2e)
[09:06:54] *** Quits: jimmys (~jimmys@2001:8004:11a0:5d05:1516:3364:d6ab:71dd) (Quit: Client closed)
[09:06:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:44] *** Joins: emf (~emf@2620:10d:c091:480::1:3482)
[09:09:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:14:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[09:14:17] *** Quits: emf (~emf@2620:10d:c091:480::1:3482) (Ping timeout: 240 seconds)
[09:15:18] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[09:17:58] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 256 seconds)
[09:18:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[09:23:00] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[09:23:45] *** Quits: juhp (~juhp@128.106.188.82) (Read error: Connection reset by peer)
[09:23:53] *** Quits: Guest23 (~Guest23@cpec025e909512d-cm00fc8d8c9620.cpe.net.cable.rogers.com) (Quit: Client closed)
[09:23:57] *** Joins: juhp (~juhp@128.106.188.82)
[09:24:02] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[09:24:12] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[09:25:03] *** Joins: notzmv (~zmv@user/notzmv)
[09:27:36] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[09:30:26] *** Quits: ymh (~ym@pool-96-253-29-94.prvdri.fios.verizon.net) (Ping timeout: 256 seconds)
[09:32:56] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:33:48] *** Quits: Guest138 (~Guest1@2601:18c:4300:36d0:480a:3125:fad9:df2e) (Quit: Client closed)
[09:35:56] *** Joins: matthias1 (~igloo@cpe-76-170-236-166.socal.res.rr.com)
[09:38:06] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:39:43] *** Joins: hololeap (~hololeap@user/hololeap)
[09:41:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:41:49] *** Joins: emf (~emf@163.114.130.6)
[09:48:34] *** Quits: emf (~emf@163.114.130.6) (Ping timeout: 256 seconds)
[09:49:09] *** Joins: falafel (~falafel@2603-8000-d800-688c-f998-9914-c722-4c43.res6.spectrum.com)
[09:51:58] *** Quits: matthias1 (~igloo@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 256 seconds)
[09:53:48] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:53:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[09:54:24] *** Joins: joo-_ (~joo-_@80-62-117-215-mobile.dk.customer.tdc.net)
[09:54:24] *** Quits: joo-_ (~joo-_@80-62-117-215-mobile.dk.customer.tdc.net) (Changing host)
[09:54:24] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[09:57:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-f998-9914-c722-4c43.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:57:36] <Axman6> edwardk: I might have nerdsniped myself and given myself an impossible challenge: is it possible to write: memo :: forall t a. Grouping t => (t -> a) -> (t -> a)
[09:57:57] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 240 seconds)
[09:59:01] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:02:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:06:28] <int-e> how can you write `instance Divisible Group where` with a straight face
[10:06:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:06:51] <int-e> (cf. https://en.wikipedia.org/wiki/Divisible_group )
[10:08:11] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[10:12:57] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:12:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:12:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:12:58] *** Joins: wroathe (~wroathe@user/wroathe)
[10:13:58] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[10:15:46] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:17:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:20:09] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[10:21:35] *** Quits: sweater1 (~sweater@206.81.18.26) (Read error: Connection reset by peer)
[10:23:11] *** Joins: ksqsf (~user@134.209.106.31)
[10:23:54] *** Joins: emf (~emf@2620:10d:c091:480::1:3482)
[10:24:37] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[10:24:50] *** Quits: td_ (~td@94.134.91.4) (Ping timeout: 256 seconds)
[10:26:26] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[10:26:45] *** Joins: td_ (~td@muedsl-82-207-238-131.citykom.de)
[10:30:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[10:31:57] *** Quits: emf (~emf@2620:10d:c091:480::1:3482) (Ping timeout: 240 seconds)
[10:33:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:34:04] <int-e> > unwords $ map (\x -> printf "%.2f" (191-x/42)) [7885,7880,7803,7737,7636,7610,7600,7539,7452,7385]
[10:34:05] <lambdabot>  "3.26 3.38 5.21 6.79 9.19 9.81 10.05 11.50 13.57 15.17"
[10:35:09] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:38:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Read error: Connection reset by peer)
[10:39:48] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[10:41:32] *** Quits: xff0x (~xff0x@2001:1a81:5251:6900:31bd:c473:a01b:db9e) (Ping timeout: 240 seconds)
[10:41:54] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 268 seconds)
[10:42:07] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:42:35] *** Joins: xff0x (~xff0x@2001:1a81:5251:6900:24dc:6835:7948:5232)
[10:44:24] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:48:42] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:49:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[10:54:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[10:55:46] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[10:56:36] *** Quits: xff0x (~xff0x@2001:1a81:5251:6900:24dc:6835:7948:5232) (Ping timeout: 245 seconds)
[10:56:41] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[10:57:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[10:57:47] *** Joins: xff0x (~xff0x@2001:1a81:5251:6900:442a:7d08:a5db:f300)
[10:59:57] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:08:53] *** Joins: kaph (~kaph@151.35.8.156)
[11:11:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Remote host closed the connection)
[11:12:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[11:15:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:18:41] <iqubic> What are impredictive types?
[11:19:07] <iqubic> I'm getting a compiler error saying that GHC doesn't yet support them.
[11:21:36] <tomsmeding> iqubic: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/impredicative_types.html#extension-ImpredicativeTypes
[11:21:56] <tomsmeding> the extension has existed for a long time, but the mentioned robust Quick Look algorithm is only since 9.2
[11:22:10] <tomsmeding> the earlier implementation was (apparently, I wouldn't know) wonky
[11:25:19] *** Quits: kaph (~kaph@151.35.8.156) (Remote host closed the connection)
[11:26:50] <EvanR> more like GHC finally admitted that they aren't supported
[11:27:21] <EvanR> maybe that changed in 9.2
[11:27:32] <tomsmeding> that certainly changed in 9.2
[11:27:44] <tomsmeding> there's a paper! :p
[11:29:36] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:30:52] <dminuoso> tomsmeding: Im not happy with these boolean tags somehow.
[11:31:16] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c53a:6a45:8ba8:8ed6)
[11:32:44] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:33:00] <tomsmeding> :(
[11:37:02] <iqubic> I'm running into a bit of an issue with Data.Finite. I need the following function: "add :: (KnownNat n) => Finite n -> (Int/Integer) -> Finite n"
[11:37:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:37:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:39:13] <dsal> modulo :: KnownNat n => Integer -> Finite n
[11:39:45] <dminuoso> tomsmeding: Im thinking that patricia tries offer this out of the box.
[11:39:54] <tomsmeding> do they?
[11:40:13] <tomsmeding> can you distinguish ["fo", "foo", "fob"] from ["foo", "fob"] without tags?
[11:40:21] <dminuoso> Yes, because ["google", "com"] would not give me something like [["google"], ["com"]]
[11:40:30] <tomsmeding> (honest question)
[11:40:31] <dminuoso> Unless we already had ["com"]
[11:40:51] <dminuoso> tomsmeding: Well it doesnt matter whether we can "distinguish" them
[11:40:56] <dminuoso> Oh
[11:41:04] <dminuoso> I dont think this actually matters though
[11:41:04] <tomsmeding> (use 'map (map (\c -> [c]))' if you like the Domain version)
[11:41:21] <dminuoso> The question is whether the subsequent lookup will behave correctly
[11:41:43] <dminuoso> The patricia trie will give you the least number of nodes always
[11:41:48] <tomsmeding> if the tree contains "foo" and "fob", and you do a longest-prefix lookup for "fom", won't it give "fo"?
[11:42:00] <dminuoso> darn you are right again.
[11:42:02] <tomsmeding> which, in my understanding of the problem, is the wrong answer, because "fo" is not in the tree
[11:42:27] <dminuoso> I should look at what iproute does
[11:42:38] <tomsmeding> well, in the tree, but not in the set it's supposed to model :p
[11:42:40] <dminuoso> Because forwarding decisions are longest prefix matching
[11:42:45] <tomsmeding> ah
[11:43:05] <dminuoso> Its just that every time I looked at it, I found stuff inside it bizarre
[11:43:20] <dminuoso> data IPRTable k a = Nil   | Node !(AddrRange k) !k !(Maybe a) !(IPRTable k a) !(IPRTable k a)
[11:43:32] <dminuoso> And there's a comment stating that this is a TRIE with one way branching removed, not sure what that means here
[11:43:39] <dminuoso> Because it seems like you can have one way branches?
[11:43:47] <tomsmeding> sounds like patricia tree to me, that comment :p
[11:43:57] <tomsmeding> what's the k and a here
[11:44:08] <dminuoso> k is just to track address family, whether its ipv4 or ipv6 
[11:44:16] <tomsmeding> then why is there a k in every node
[11:44:16] <dminuoso> And `a` is some additional payload I think
[11:44:36] <tomsmeding> or is this the bizarre thing you mentioned? :p
[11:44:44] <dminuoso> That as well
[11:45:50] <tomsmeding> seems the k is either IPv4 or IPv6, which are both full addresses
[11:45:57] <dminuoso> Right
[11:46:09] <dminuoso> Ah hold on I know why
[11:46:17] <dminuoso> tomsmeding: The `AddrRange k` is what we care about
[11:46:21] <dminuoso> the `k` is some additional payload we can ignroe
[11:46:30] <dminuoso> its the `next hop address` in your routing table
[11:46:43] <dminuoso> but what really matters here, is the "what network to route for", which is `AddrRange k
[11:47:25] <dminuoso> tomsmeding: Very broadly, a simple router would be supplied with some `lookupRoute :: k -> IPRTable k a -> Maybe k
[11:47:48] <dminuoso> Such that you provide some address, it finds the matching AddrRange with longest prefix, and then returns the contained `k`
[11:48:13] <tomsmeding> ah, AddrRange a = { addr :: a, mask :: a, mlen :: Int {- mask prefix length -} }
[11:48:52] <dminuoso> Yeah
[11:49:09] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:31] <dminuoso> Though, Im not entirely sure because that library offers: lookup :: Routable k => AddrRange k -> IPRTable k a -> Maybe a
[11:49:58] <tomsmeding> that keyToTestBit function is weird
[11:50:19] <tomsmeding> it converts an AddrRange to a prefix of 1-bits as long as the mask was
[11:50:23] <tomsmeding> or so it seems
[11:50:37] <dminuoso> That is very reasonable
[11:50:52] * tomsmeding wonders why they use an intmap for a statically fixed table of max 128 entries
[11:51:09] <dminuoso> Why max 128 entries?
[11:51:35] <tomsmeding> ipv6 has length 128, right?
[11:51:38] <dminuoso> Yes
[11:51:43] <tomsmeding> the intmap is keyed on the mlen
[11:51:46] <tomsmeding> from the AddrRange
[11:52:47] <dminuoso> tomsmeding: Ah and I think I get why you understand that "with one way branching removed" as patricia trie.
[11:53:05] <dminuoso> The only way for one way branching to ever occur, is if you turned "foo" into ["f", "o", "o"]
[11:53:17] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 240 seconds)
[11:53:23] <tomsmeding> that's what it sounded like to my naive ears
[11:54:15] *** Joins: chomwitt (~chomwitt@94.66.63.187)
[11:56:26] <tomsmeding> dminuoso: from scanning through `insert`, I get the feeling that that Maybe is precisely my boolean tag
[11:56:30] <tomsmeding> the Maybe a, that is
[11:56:58] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:57:07] <tomsmeding> because it retains them on normal insert and creates Just values for the places where it puts the inserted value, but it puts Nothing in the weird splitting code in `link` that I haven't yet figured out
[11:57:44] <tomsmeding> (which makes sense: there only is an associated value `a` if that prefix is actually in the set)
[11:59:25] <tomsmeding> dminuoso: that recursion loop in `glue` is weird -- wouldn't that be more efficiently written as `let n = countLeadingZeros (addr k1 `xor` addr k2)`
[12:00:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:01:59] <tomsmeding> (followed by the 'otherwise' branch)
[12:03:00] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[12:04:00] *** Quits: deech (~user@024-217-244-075.res.spectrum.com) (Ping timeout: 256 seconds)
[12:05:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:06:40] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:07:12] *** Joins: deech (~user@024-217-244-075.res.spectrum.com)
[12:07:51] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:08:25] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[12:08:30] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[12:10:39] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[12:11:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[12:11:27] *** Quits: phma (phma@2001:5b0:211f:b348:59d8:7cb7:9451:9394) (Read error: Connection reset by peer)
[12:11:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:12:40] *** Quits: jespada (~jespada@87.74.33.157) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:12:47] *** Joins: phma (phma@2001:5b0:211f:1938:f16a:3063:a09d:1c4c)
[12:13:08] *** Joins: jespada (~jespada@87.74.33.157)
[12:13:08] *** Quits: jespada (~jespada@87.74.33.157) (Client Quit)
[12:13:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:13:44] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:13:44] *** Joins: wroathe (~wroathe@user/wroathe)
[12:15:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Ping timeout: 240 seconds)
[12:16:45] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[12:17:07] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[12:18:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:22:48] <dminuoso> tomsmeding: Im not sure what glue or link do exactly
[12:22:54] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[12:23:15] <dminuoso> Or hold on
[12:23:30] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[12:23:35] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:23:36] <dminuoso> I think `link` takes two addresses that are disjoint, and forms a new node that contains them both I think
[12:23:44] <dminuoso> this is just an assumption based on its usage and the guards in `insert`
[12:24:32] <dminuoso> And presumably `glue` gives you the longest common prefix that contains them both
[12:25:40] *** Joins: acidjnk (~acidjnk@p200300d0c7271e54d135507ad6b9a309.dip0.t-ipconnect.de)
[12:27:11] <dminuoso> Yeah, that seems to be it
[12:28:57] <dminuoso> tomsmeding: Then yeah, the countLeadingZeros approach is definitely faster
[12:29:12] <dminuoso> It's probably not a big deal, since rarely will you be spending much time in insertion
[12:29:54] *** Joins: jespada (~jespada@87.74.33.157)
[12:30:10] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Quit: You have been kicked for being idle)
[12:30:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:31:17] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 240 seconds)
[12:35:55] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[12:47:24] *** Joins: deech` (~user@024-217-244-075.res.spectrum.com)
[12:49:20] *** Quits: deech (~user@024-217-244-075.res.spectrum.com) (Ping timeout: 256 seconds)
[12:51:03] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-005.ewe-ip-backbone.de)
[12:52:13] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[12:52:57] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:53:34] <tomsmeding> fair point about the time spent in insertion :p
[12:53:53] <tomsmeding> and yes that's also what I concluded from the usage in `insert`
[12:55:53] <tomsmeding> dminuoso: do you agree about the `Maybe a` containing the information of the boolean tag?
[12:56:27] <dminuoso> Yeah
[12:56:41] <dminuoso> Thanks I think I get the implementation now
[12:56:49] <dminuoso> I took your implementation and twisted it a bit around 
[12:57:02] <tomsmeding> sounds good
[12:57:08] <dminuoso> https://gist.github.com/dminuoso/dc8cccaff1e72592b4f285153fbe4605
[12:57:18] <dminuoso> Find that a bit easier to read
[12:57:33] <dminuoso> Oh hold on
[12:57:43] <dminuoso> Note how I dont need that reverse on domain anymore? (I forgot to delete it in that gist)
[12:58:28] <dminuoso> Mm, some bug lingering still
[12:58:31] <dminuoso> But Ill find it
[12:58:48] <tomsmeding> dminuoso: what do you return for looking up "abc" in ["ab", "abcd"]
[12:58:53] <tomsmeding> under map (map (\c -> [c]))
[12:59:15] *** Joins: kranius (~kranius@162.19.149.77.rev.sfr.net)
[13:00:07] <tomsmeding> oh and perhaps more interestingly, for looking up "abcd" in ["a", "abc", "abcde"] -- but untested
[13:00:39] * tomsmeding thinks you're going to get "ac" as the prefix
[13:00:47] <dminuoso> Mmm yeah
[13:00:52] <dminuoso> I had the same thought just when I hit enter
[13:00:56] <tomsmeding> lol
[13:01:08] <dminuoso> Im going to pursue this, could be really cool if I dont need reverse here. :)
[13:01:20] *** Quits: kranius (~kranius@162.19.149.77.rev.sfr.net) (Client Quit)
[13:01:38] <tomsmeding> you can have two additional parameters, one that always accumulates, and the other that gets overwritten with the accumulating parameter if b == True
[13:01:45] <dminuoso> tomsmeding: One thing I could do is keep the full domain at the label instead.
[13:01:48] <dminuoso> instead of a bool
[13:01:54] <dminuoso> That would simplify everything
[13:02:05] <tomsmeding> or that, but more memory usage :p
[13:02:27] <dminuoso> That's fine, it's short lived
[13:02:36] <dminuoso> Decisions decisions!
[13:04:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[13:04:37] <dminuoso> tomsmeding: And the insert becomes less pretty :(
[13:04:46] <dminuoso> But a quick application of `tails` can solve that
[13:04:50] <tomsmeding> :p
[13:05:03] <tomsmeding> my two-extra-parameters is also still a possibility, think that would work
[13:05:07] <dminuoso> or inits I suppose
[13:05:30] <dminuoso> tomsmeding: Yeah, but I think we've already ruined fusion.
[13:05:40] <dminuoso> We should do two-extra-parameters with continuations!
[13:06:13] <dminuoso> Is this the point where I should mention Im going to start out with 10 domains in the trie?
[13:06:22] <tomsmeding> :p
[13:06:23] <dminuoso> No but seriously, in production there will be more
[13:07:38] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 252 seconds)
[13:09:37] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 240 seconds)
[13:11:41] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[13:13:46] *** Joins: neurocyte0132889 (~neurocyte@IP-185117070150.dynamic.medianet-world.de)
[13:13:46] *** Quits: neurocyte0132889 (~neurocyte@IP-185117070150.dynamic.medianet-world.de) (Changing host)
[13:13:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:14:43] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:15:45] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[13:18:17] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[13:18:56] *** Joins: kuribas (~user@ptr-25vy0i8itabkuxqpwp8.18120a2.ip6.access.telenet.be)
[13:19:06] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:20:46] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[13:25:47] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[13:38:17] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:39:03] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[13:44:26] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[13:44:48] *** Joins: darchitect (~darchitec@82-132-215-233.dab.02.net)
[13:47:54] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:48:31] *** Joins: machinedgod (~machinedg@24.105.81.50)
[13:49:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:49:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:49:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:52:20] *** Lord_of_Life_ is now known as Lord_of_Life
[13:57:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:57:54] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:59:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[14:00:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:02:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:03:38] *** Joins: jinsun (~quassel@user/jinsun)
[14:04:52] *** Joins: jinsun___ (~quassel@user/jinsun)
[14:07:17] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:07:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:13:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[14:14:00] *** Joins: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac)
[14:14:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:14:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:14:32] *** Joins: wroathe (~wroathe@user/wroathe)
[14:17:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Ping timeout: 240 seconds)
[14:17:40] *** Joins: jinsun (~quassel@user/jinsun)
[14:18:49] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[14:19:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:20:36] <dminuoso> tomsmeding: https://gist.github.com/dminuoso/37edae34ce73428fbb691bcd34e9868a
[14:20:38] <dminuoso> final version.
[14:21:19] <dminuoso> I actually like this because as I recurse down I reconstruct the original domain :)
[14:21:42] *** Quits: jinsun___ (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[14:23:47] <tomsmeding> dminuoso: looks good!
[14:23:57] <tomsmeding> don't you need to reverse the result though? Or am I reading it wrong
[14:24:18] <tomsmeding> you're producing a suffix in reversed order, I think
[14:24:41] <tomsmeding> (s/Domain/Domain . reverse/ on line 3)
[14:25:29] *** Joins: toastloop (toastloop@user/toastloop)
[14:26:03] <Digit> lol, fun intro https://www.youtube.com/watch?v=RqvCNb7fKsg
[14:26:28] <dminuoso> tomsmeding: Im reversing the lookup domain
[14:26:36] <dminuoso> But not the result
[14:26:50] <tomsmeding> yeah
[14:27:02] <tomsmeding> if you want the reversed suffix, this is fine :)
[14:27:07] <dminuoso> huh?
[14:27:11] <dminuoso> What do you mean?
[14:27:31] <dminuoso> tomsmeding: No this produces it in the right order.
[14:27:47] <dminuoso> tomsmeding: consider: the tree starts in reverse, and as I traverse down I prepend.
[14:27:52] <tomsmeding> OH
[14:27:55] * tomsmeding is stupid
[14:27:56] <tomsmeding> yes
[14:28:03] <tomsmeding> awesome
[14:28:06] <dminuoso> this is why this is so cute, no reverse needed :)
[14:28:11] <tomsmeding> and it's even shorter than my original code I think
[14:29:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[14:29:08] *** Joins: typeswitch (~typeswitc@user/typeswitch)
[14:29:55] <dminuoso> now ontop, I could also make a separate `DomainR` newtype where my attosec parser generates the labels in reverse.
[14:29:55] *** Quits: dka_ (~code-is-a@ns3059207.ip-193-70-33.eu) (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
[14:30:05] <dminuoso> (this seems like it would be faster, even)
[14:30:31] <tomsmeding> that feels like overdoing it somehow :p
[14:30:33] <dminuoso> :p
[14:31:10] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[14:33:51] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:41:57] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 240 seconds)
[14:45:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:45:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:45:18] *** Joins: wroathe (~wroathe@user/wroathe)
[14:46:28] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[14:47:08] *** Joins: Jing (~hedgehog@115.207.51.59)
[14:50:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:53:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:57:31] *** Joins: toastloopex (toastloop@user/toastloop)
[14:57:31] *** Quits: typeswitch (~typeswitc@user/typeswitch) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:59:56] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[15:00:50] *** Quits: toastloopex (toastloop@user/toastloop) (Remote host closed the connection)
[15:00:54] *** Quits: toastloop (toastloop@user/toastloop) (Ping timeout: 268 seconds)
[15:01:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:05:21] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:05:38] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:05:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:06:45] *** Quits: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac) (Quit: mikoto-chan)
[15:10:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:11:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:11:33] *** Joins: pfurla (~pfurla@2804:18:5828:51e7:9893:1d7d:a278:3fd2)
[15:12:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[15:13:24] *** Joins: kaph (~kaph@151.37.203.0)
[15:16:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:16:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:16:07] *** Joins: wroathe (~wroathe@user/wroathe)
[15:16:47] *** Parts: iqubic (~user@2601:602:9502:c70:c28f:848:f184:6c67) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[15:21:02] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 240 seconds)
[15:21:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[15:24:32] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:24:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:26:48] *** Joins: pfurla_ (~pfurla@177.79.126.247)
[15:27:53] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:27:53] *** Quits: pfurla (~pfurla@2804:18:5828:51e7:9893:1d7d:a278:3fd2) (Ping timeout: 252 seconds)
[15:29:37] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:29:42] *** Joins: jinsun (~quassel@user/jinsun)
[15:29:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:35:56] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[15:36:30] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[15:36:45] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[15:37:13] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Client Quit)
[15:37:47] *** Quits: acidjnk (~acidjnk@p200300d0c7271e54d135507ad6b9a309.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:40:12] *** Joins: kaph (~kaph@151.37.203.0)
[15:41:33] *** Joins: pfurla (~pfurla@177.25.184.32)
[15:44:37] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:44:53] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:45:18] *** Quits: pfurla_ (~pfurla@177.79.126.247) (Ping timeout: 268 seconds)
[15:45:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[15:45:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:42] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[15:46:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:46:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:46:52] *** Joins: wroathe (~wroathe@user/wroathe)
[15:48:20] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:48:23] *** Joins: wehttam (~wehttam@175.103.19.88)
[15:48:35] *** Joins: jinsun (~quassel@user/jinsun)
[15:50:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[15:50:58] *** Joins: ksqsf (~user@134.209.106.31)
[15:51:16] *** Joins: fef (~thedawn@user/thedawn)
[15:51:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:55:12] *** Quits: wehttam (~wehttam@175.103.19.88) (Read error: Connection reset by peer)
[15:56:36] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (Quit: lambdap)
[15:56:58] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[15:56:59] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[16:00:43] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[16:05:06] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c53a:6a45:8ba8:8ed6) (Quit: WeeChat 2.8)
[16:05:39] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 268 seconds)
[16:06:10] *** Joins: kaph (~kaph@151.37.203.0)
[16:09:12] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[16:09:28] *** Joins: kaph (~kaph@151.37.203.0)
[16:15:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[16:17:38] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:19:00] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[16:19:15] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[16:19:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Ping timeout: 240 seconds)
[16:20:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:21:41] *** Quits: pfurla (~pfurla@177.25.184.32) (Quit: gone to sleep. ZZZzzzâ€¦)
[16:23:12] *** Quits: tubogram4 (~tubogram@user/tubogram) (Ping timeout: 260 seconds)
[16:25:48] *** Joins: evocatus (~evocatus@62.182.78.42)
[16:29:30] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[16:30:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:32:14] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[16:32:17] *** Joins: rusty (~rustyboy@82.77.225.165)
[16:32:31] *** Joins: pfurla (~pfurla@2804:18:581a:c123:74be:cb28:dc5f:8826)
[16:32:50] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:38:17] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:39:02] *** Quits: evocatus (~evocatus@62.182.78.42) (Ping timeout: 240 seconds)
[16:43:27] *** Quits: pfurla (~pfurla@2804:18:581a:c123:74be:cb28:dc5f:8826) (Quit: gone to sleep. ZZZzzzâ€¦)
[16:44:12] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[16:44:18] *** Joins: kaph (~kaph@151.47.131.129)
[16:47:05] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e)
[16:49:50] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[16:49:57] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:98ca:4368:fd5e:1ee0) (Ping timeout: 240 seconds)
[16:56:13] *** Quits: m1dnight (~christoph@christophe.dev) (Ping timeout: 268 seconds)
[16:57:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[17:00:35] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:00:49] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[17:01:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:02:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Client Quit)
[17:05:52] <raehik> I'm having issues with cabal haddock --enable-documentation : sometimes it rebuilds dependencies with docs so it can link to them, sometimes it doesn't and complains instead. Any tips?
[17:07:29] *** Joins: m1dnight (~christoph@christophe.dev)
[17:07:51] <raehik> actually, it might just be the base libs. on CI it won't rebuild them to link, but it does with identical cmd locally...
[17:08:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305)
[17:11:54] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:12:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:18:25] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:18:30] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 256 seconds)
[17:18:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:18:48] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:20:17] *** Quits: darchitect (~darchitec@82-132-215-233.dab.02.net) (Read error: Connection reset by peer)
[17:22:09] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:54] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:24:26] *** Joins: max22- (~maxime@2a01cb08833598007266ea6574ab9177.ipv6.abo.wanadoo.fr)
[17:27:20] *** Joins: son0p (~ff@181.136.122.143)
[17:27:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:27:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:27:53] *** Joins: wroathe (~wroathe@user/wroathe)
[17:30:09] *** Quits: max22- (~maxime@2a01cb08833598007266ea6574ab9177.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:30:38] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:30:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[17:32:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[17:35:53] *** Quits: rusty (~rustyboy@82.77.225.165) (Quit: Leaving)
[17:46:06] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[17:46:15] *** Joins: bodisiw (~bodiskw@128.163.238.115)
[17:46:53] *** Joins: Bartol (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it)
[17:50:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:51:52] *** Joins: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03)
[17:52:43] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:53:46] *** Joins: Guest4242 (~Guest4242@78.198.4.122)
[17:53:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[17:55:46] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[17:57:41] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Quit: leaving)
[18:00:02] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 240 seconds)
[18:00:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:00:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:00:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:28] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:7976:b4da:33a:e80c)
[18:03:57] *** Quits: xff0x (~xff0x@2001:1a81:5251:6900:442a:7d08:a5db:f300) (Ping timeout: 240 seconds)
[18:04:59] *** Joins: xff0x (~xff0x@2001:1a81:5251:6900:1836:4f55:974b:f1ca)
[18:08:32] *** Joins: KnifeFire (~Knifefire@120.242.178.114)
[18:09:05] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4)
[18:10:10] *** Quits: KnifeFire (~Knifefire@120.242.178.114) (Client Quit)
[18:12:15] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:13:13] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[18:14:23] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:14:37] *** Quits: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:16:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:16:57] *** Quits: Inst__ (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e) (Ping timeout: 240 seconds)
[18:18:09] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:22:49] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:24:20] *** Joins: evocatus (~evocatus@62.182.78.42)
[18:28:54] *** Joins: max22- (~maxime@2a01cb0883359800aceba2125845502e.ipv6.abo.wanadoo.fr)
[18:31:58] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:32:18] *** Joins: zebrag (~chris@user/zebrag)
[18:33:41] *** Joins: __monty__ (~toonn@user/toonn)
[18:34:36] *** Joins: Bartol60 (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it)
[18:34:53] *** Quits: Bartol (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it) (Ping timeout: 256 seconds)
[18:35:05] <Guest4242> Hey, could anyone explain what's wrong with my implementation https://paste.tomsmeding.com/B1u4ChwF ? I wanted to test a foldr that could be short circuited, but turns out that the foldr doesn't even work as I expect (I expect the example given to return True)
[18:35:39] *** Bartol60 is now known as Bartol
[18:35:50] <tomsmeding> > intercalate "" $ take 10 $ repeat "a"
[18:35:51] <lambdabot>  "aaaaaaaaaa"
[18:35:57] <tomsmeding> > replicate 10 'a'
[18:35:59] <lambdabot>  "aaaaaaaaaa"
[18:36:17] *** Quits: bodisiw (~bodiskw@128.163.238.115) (Quit: Leaving)
[18:37:20] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4) (Quit: gone to sleep. ZZZzzzâ€¦)
[18:37:22] <tomsmeding> Guest4242: if your foldr encounters an element in the needles that does not occur in the haystack, the result becomes False, right? (and ignores the tail in that case)
[18:37:39] <tomsmeding> and 'a' is not in haystack
[18:37:40] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[18:37:57] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[18:38:03] *** Quits: Bartol (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it) (Client Quit)
[18:38:21] *** Joins: neurocyte0132889 (~neurocyte@IP-185117070150.dynamic.medianet-world.de)
[18:38:21] *** Quits: neurocyte0132889 (~neurocyte@IP-185117070150.dynamic.medianet-world.de) (Changing host)
[18:38:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:38:21] *** Joins: Bartol (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it)
[18:38:27] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[18:39:01] *** Joins: puke (~puke@user/puke)
[18:39:05] *** Bartol is now known as andbartol
[18:39:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:39:58] *** andbartol is now known as Bartol
[18:40:29] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4)
[18:43:00] *** Joins: jinsun (~quassel@user/jinsun)
[18:43:03] *** Quits: Bartol (~Bartol@dynamic-adsl-84-221-241-8.clienti.tiscali.it) (Changing host)
[18:43:03] *** Joins: Bartol (~Bartol@user/Bartol)
[18:43:18] <Guest4242> But why does foldr ignore the tail of the needles then?
[18:44:01] <Guest4242> Shouldn't foldr traverse the list (the needles) completely?
[18:49:04] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[18:49:31] <tomsmeding> > foldr f z [a, b, c, d]
[18:49:32] <lambdabot>  f a (f b (f c (f d z)))
[18:50:14] <tomsmeding> Guest4242: if 'f' ignores its second argument, in your case 'acc', which indeed it does if 'elem x haystack' is False, then the tail of the list remains unevaluated
[18:50:18] <tomsmeding> because of lazy evaluation
[18:50:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[18:51:07] <tomsmeding> > foldr (\x rest -> if x > 10 then [] else x : rest) undefined [1..]
[18:51:09] <lambdabot>  [1,2,3,4,5,6,7,8,9,10]
[18:52:35] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:53:42] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[18:54:02] *** Joins: jinsun (~quassel@user/jinsun)
[18:54:14] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[18:54:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:54:49] *** Joins: sweater (~sweater@206.81.18.26)
[18:56:11] <Guest4242> That means that in ` f a (f b (f c (f d z)))` if z is ignored, then only (f d z) will be computed?
[18:57:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:57:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:57:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:57:00] <tomsmeding> > foldr (\x _ -> x) 10 [1,2,3,4]
[18:57:02] <lambdabot>  1
[18:57:26] <tomsmeding> > (\x _ -> x) 1 ((\x _ -> x) 2 ((\x _ -> x) 3 ((\x _ -> x) 4 10)))
[18:57:28] <lambdabot>  1
[18:57:41] <tomsmeding> Guest4242: does that help?
[18:58:16] <tomsmeding> the entirety of ((\x _ -> x) 2 ((\x _ -> x) 3 ((\x _ -> x) 4 10))) is not computed in that example
[18:58:40] <tomsmeding> > (\x _ -> x) 1 (error "oops I lied")
[18:58:42] <lambdabot>  1
[18:59:11] <xerox> > foldr (\x _ -> f x) a [b,c,d,e]
[18:59:13] <lambdabot>  f b
[19:01:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:03:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:03:49] <Guest4242> tomsmeding: I think that helps yeah.Â  How would you change my function to do what I initially wanted? And if possible with a short-circuit of foldr in case any needle isn't found in the haystack.
[19:04:14] <tomsmeding> what exactly do you want to compute
[19:04:39] <tomsmeding> you're checking whether all needles occur in the haystack, and bailing out with False if that's not the case
[19:04:57] <tomsmeding> which you're correctly doing: not all needles in aaaa...aaabaaaaa.... occur in "bc" :)
[19:05:51] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[19:06:09] *** Joins: ksqsf (~user@134.209.106.31)
[19:06:23] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:07:08] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[19:07:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:08:30] <Guest4242> I want to check that all the needles appear in the haystack yes. So it's already correct and already short-circuiting right?
[19:09:21] <tomsmeding> yes -- at the very first 'a' :p
[19:09:25] <tomsmeding> because it doesn't occur in the haystack
[19:11:51] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:12:15] <Guest4242> All right. And I was right to use foldr, because of how foldl is defined it can't be short-circuited that way right?
[19:14:18] *** Joins: pavonia (~user@user/siracusa)
[19:14:27] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-005.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[19:15:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[19:16:30] <tomsmeding> > foldl f z [a,b,c,d,e]
[19:16:32] <lambdabot>  f (f (f (f (f z a) b) c) d) e
[19:16:34] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:17:17] <tomsmeding> if the list is finite, as it is here, an 'f' can short-circuit based on its _second_ argument, ignoring its first argument
[19:17:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[19:18:21] <tomsmeding> > foldl (\x y -> if y <= 7 then 0 else x + y) 0 [1..10]
[19:18:22] <lambdabot>  27
[19:18:34] <tomsmeding> > 8 + 9 + 10
[19:18:36] <lambdabot>  27
[19:19:37] <tomsmeding> but if the list is infinite, then foldl will never produce anything anyway! Regardless of how lazy f is
[19:21:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Ping timeout: 240 seconds)
[19:24:20] <Guest4242> I'm not sure I get your short-circuit example :/  for me, in your foldl, there is no short-circuit, foldl will go over every element of [1..10]
[19:24:47] <tomsmeding> hm it's a bit verbose
[19:25:05] <tomsmeding> > foldl (\x y -> if y <= 3 then 0 else x + y) 0 [1,2,3,4,5]
[19:25:07] <lambdabot>  9
[19:25:19] <tomsmeding> note that the function ignores its left argument if the right argument is <= 3
[19:25:27] <tomsmeding> > foldl f 0 [1,2,3,4,5]
[19:25:28] <lambdabot>  error:
[19:25:28] <lambdabot>      â€¢ Ambiguous type variable â€˜a0â€™ arising from a use of â€˜show_M534001523296...
[19:25:28] <lambdabot>        prevents the constraint â€˜(Show a0)â€™ from being solved.
[19:25:32] <tomsmeding> > foldl f 0 [1,2,3,4,5 :: Int]
[19:25:33] <lambdabot>  error:
[19:25:33] <lambdabot>      â€¢ Ambiguous type variable â€˜a0â€™ arising from a use of â€˜show_M896483681726...
[19:25:34] <lambdabot>        prevents the constraint â€˜(Show a0)â€™ from being solved.
[19:25:38] <tomsmeding> > foldl f (0 :: Int) [1,2,3,4,5 :: Int]
[19:25:39] <lambdabot>  error:
[19:25:39] <lambdabot>      â€¢ No instance for (FromExpr Int) arising from a use of â€˜fâ€™
[19:25:39] <lambdabot>      â€¢ In the first argument of â€˜foldlâ€™, namely â€˜fâ€™
[19:25:42] <tomsmeding> oh come on
[19:25:44] <geekosaur> use Expr
[19:25:51] <tomsmeding> > foldl f (0 :: Expr) [1,2,3,4,5 :: Expr]
[19:25:52] <lambdabot>  f (f (f (f (f 0 1) 2) 3) 4) 5
[19:25:55] <tomsmeding> geekosaur++
[19:26:04] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:26:11] <tomsmeding> Guest4242: ignore the type annotations, not relevant to the point :p
[19:26:38] <tomsmeding> do you see that the call 'f _ 3', where the _ is really 'f (f 0 1) 2', just evaluates to 0?
[19:27:04] *** Joins: isovector1 (~isovector@172.103.216.166)
[19:28:17] <tomsmeding> > let f = \x y -> if y <= 3 then 0 else x + y  in  f (f (f (error "not evaluated") 3) 4) 5
[19:28:19] <lambdabot>  9
[19:28:49] <tomsmeding> > let f = \x y -> if y <= 3 then 0 else x + y  in  (((error "not evaluated") `f` 3) `f` 4) `f` 5
[19:28:50] <lambdabot>  9
[19:28:56] <tomsmeding> perhaps clearer
[19:31:52] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4) (Quit: gone to sleep. ZZZzzzâ€¦)
[19:33:03] <Guest4242> Mmh, isn't that only an example of lazy-evaluation?
[19:33:16] <tomsmeding> what's the difference?
[19:33:27] <tomsmeding> short-circuiting is precisely because of lazy evaluation
[19:36:16] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:37:50] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[19:42:10] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:43:39] <Guest4242> tomsmeding: https://paste.tomsmeding.com/H8m1shVP Here foldr short circuits at 100 and foldl doesn't. I'm not sure that's the perfect example, but that kinda shows the kind of thing i'm trying to do.
[19:46:34] <tomsmeding> Guest4242: foldr: if the function ignores its right argument, the rest of the list, to the right, is ignored. foldl: if the function ignores its left argument, the rest of the list, to the LEFT, is ignored.
[19:46:48] <tomsmeding> note that in my last example, elements 1,2,3 of the list were ignored
[19:48:42] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[19:52:13] *** Joins: sweater1 (~sweater@206.81.18.26)
[19:53:00] <tomsmeding> Guest4242: side note about foldl: note that if the list is infinite, whatever f does, no result will ever be produced because foldl is too busy staging all the f calls. foldl' is a bit better in this, in that it doesn't allow short-circuiting: it evaluates every f call from the innermost to the outermost.
[19:53:36] <tomsmeding> There are almost no cases where the plain foldl is a useful choice -- this short-circuiting might be one, but then there are probably better ways to do that anyway, like reversing the list first and then using foldr :p
[19:54:30] *** Quits: sweater (~sweater@206.81.18.26) (Read error: Connection reset by peer)
[19:55:00] *** Quits: sweater1 (~sweater@206.81.18.26) (Remote host closed the connection)
[19:55:10] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[19:57:04] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:7976:b4da:33a:e80c) (Quit: WeeChat 2.8)
[19:57:49] *** Joins: sweater (~sweater@206.81.18.26)
[19:59:32] *** Joins: ksqsf (~user@134.209.106.31)
[20:01:52] <Guest4242> > foldr f z [a, b, c, d]
[20:01:54] <lambdabot>  f a (f b (f c (f d z)))
[20:02:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[20:03:32] <Guest4242> In this example, the evaluator tries to evaluate f a ??, then ?? because it's needed, and not f d z first and and then f c (f d z) ? If that's the case I think I get it now.
[20:03:43] <tomsmeding> yes!
[20:03:47] <tomsmeding> that's the point of lazy evaluation
[20:05:08] <mrianbloom> If you are hoping to use linear types, does an entire project have to use the linear prelude?
[20:05:19] <tomsmeding> no
[20:05:23] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4)
[20:05:38] <tomsmeding> well, technically no, but linear types are only useful if you have linear APIs to use
[20:06:19] <tomsmeding> I believe the meaning of existing valid haskell code never changes by enabling -XLinearTypes
[20:06:27] *** Quits: isovector1 (~isovector@172.103.216.166) (Quit: Leaving)
[20:06:33] <tomsmeding> there's just more stuff that you can do
[20:06:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[20:06:45] <mrianbloom> I'm actually looking into writing a linear API for futhark and I'm just trying to wrap my brain around what a user would need to change to use it.
[20:07:15] <tomsmeding> the user would probably need to enable the extension in order to use your API sensibly, but not necessarily anything else
[20:07:19] <Guest4242> Hm ok. That also explains how it can work on infinite lists. It's said to treat elements right-to-left, but the evaluator will actually try to evaluate f 1 ... first in `foldr f acc [1..]`, right? And then f 2 only if it was needed by f 1, right?
[20:07:30] <tomsmeding> mrianbloom: the linear prelude is just a lot of utility functions and data types
[20:07:45] <tomsmeding> Guest4242: correct
[20:08:12] <mrianbloom> I think the issue is whether we need to use the linear version of monad bind or not.
[20:08:20] <Guest4242> tomsmeding: All right. Thanks a lot !
[20:08:27] <tomsmeding> ah, linear monads
[20:08:50] <mrianbloom> We give users a monad transformer that holds a Cuda/OpenCL context.
[20:09:09] <tomsmeding> mrianbloom: in any case, you can just re-export the entirety of the linear prelude from your library if you want :p
[20:09:32] <tomsmeding> not sure how exactly linear monads work with monad transformers etc
[20:09:55] <mrianbloom> Yes that's my question as well.
[20:11:37] *** Joins: emf (~emf@2620:10d:c091:480::1:cf46)
[20:13:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:15:57] *** Quits: emf (~emf@2620:10d:c091:480::1:cf46) (Ping timeout: 240 seconds)
[20:16:16] <geekosaur> I would extpect a type error tbh, since everything else is built against the Prelude Monad
[20:16:44] <geekosaur> ghc tends not to like this, since it doesn't do whole-program compilation so it can't just replace one with the other on the fly
[20:17:44] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Quit: ZNC 1.8.2 - https://znc.in)
[20:18:03] *** Joins: ksqsf (~user@134.209.106.31)
[20:18:08] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[20:18:14] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:499c:186d:f10d:6a24)
[20:20:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[20:21:26] <tomsmeding> yeah you wouldn't be able to use existing monad transformers unchanged; the data definitions might work, but the instances are for Prelude.Monad, not for the linear Monad class
[20:21:56] <tomsmeding> geekosaur: you might be right, but I also think it's possible that the first error you get is just a missing instance error
[20:22:12] <tomsmeding> s/also think it's /think it's also /
[20:22:18] <geekosaur> Prelude.Linear has instances
[20:22:39] <tomsmeding> but not for State or anything, right?
[20:22:42] <geekosaur> er, not exactly that module but there's a replacement Control.Monad.Trans.Instances.Linear
[20:22:52] <monochrom> Guest4242: In fact, "f b (f c (f d z))" or "f 2 (...)" was not even generated, not even as a delayed expression.  For example, foldr (&&) z (False : foo) -> False && foldr (&&) z foo -> False, this takes constant time therefore constant space.
[20:23:14] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[20:24:20] *** Quits: Guest4242 (~Guest4242@78.198.4.122) (Quit: Client closed)
[20:24:42] <tomsmeding> geekosaur: I'm only finding this thing? https://hackage.haskell.org/package/linear-base-0.1.0/docs/src/Control.Functor.Linear.Internal.Instances.html
[20:25:05] <geekosaur> mm, there's a State monad on the contents page but no docs link
[20:25:22] <tomsmeding> oh yeah there is stuff, e.g. https://hackage.haskell.org/package/linear-base-0.1.0/docs/src/Control.Functor.Linear.Internal.State.html#line-98
[20:25:42] <tomsmeding> TIL
[20:26:07] <tomsmeding> the instances are listed in Control.Functor.Linear
[20:28:28] *** Joins: emf (~emf@2620:10d:c091:480::1:cf46)
[20:30:02] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:30:03] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:31:39] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:31:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:32:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:32:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:33:15] <danso> has there been much follow-up discussion to alexis king's post "names are not type safety"?
[20:33:47] <danso> i am wondering whether it's possible to create a type of strings which contain alphabetic chars only
[20:34:13] <geekosaur> not presently
[20:34:16] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:34:17] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:34:44] <danso> (without having 52 constructors) 
[20:34:45] <monochrom> That would be predicate subtypes, which is known as "refinement types" around this neighbourhood.
[20:34:46] *** Joins: ksqsf (~user@134.209.106.31)
[20:35:00] <geekosaur> what you can do is create a newtype-d String and export a smart constructor
[20:35:13] <danso> geekosaur, oh :^/
[20:35:25] <danso> yes, that's what alexis says is the typical pattern but not ideal 
[20:35:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:35:49] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:36:03] <geekosaur> not ideal, but the best you can do with standard Haskell. you can express it in Liquid Haskell, though, I think
[20:36:16] *** Joins: econo (uid147250@user/econo)
[20:36:22] <monochrom> Well, something else would be non-ideal if you could express that with types. Namely, programmers have more proof obligations.
[20:36:37] *** Quits: emf (~emf@2620:10d:c091:480::1:cf46) (Ping timeout: 240 seconds)
[20:36:48] <monochrom> At that point, what is "ideal" anyway?
[20:39:25] <danso> i always thought refinement types were a little weird. 
[20:39:46] <monochrom> For a system that does both dependent typing and predicate subtyping, see http://pvs.csl.sri.com/
[20:39:54] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[20:39:55] <danso> you can express something like `x: {... -2, -1, 0, 1, 2 ...} | x > 0`
[20:40:09] <danso> which is effectively the same as `x: {0, 1, 2...}`
[20:40:10] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:40:10] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:40:15] *** Joins: ksqsf (~user@134.209.106.31)
[20:40:22] *** Joins: emf (~emf@2620:10d:c091:480::1:cf46)
[20:40:52] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:40:52] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:41:27] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:41:28] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:42:27] *** Quits: xff0x (~xff0x@2001:1a81:5251:6900:1836:4f55:974b:f1ca) (Ping timeout: 250 seconds)
[20:42:28] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:42:28] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:43:10] *** Joins: xff0x (~xff0x@2001:1a81:5251:6900:a6ab:a36:c73a:5d3f)
[20:43:21] <monochrom> In practice, it's "x : Integer | x>0" so we never have to write "{... -2, -1, 0, 1, 2 ...}".
[20:43:41] *** Quits: kaph (~kaph@151.47.131.129) (Ping timeout: 245 seconds)
[20:43:56] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4) (Quit: gone to sleep. ZZZzzzâ€¦)
[20:44:06] <monochrom> And there will be time when you appreciate "x : Integer | x >= 65 && x < 65+26"
[20:44:10] <danso> that's true, but i wonder why we can't give a name to `Integers > 0` instead 
[20:44:33] <danso> (correction: why we *shouldn't*, because of course we can: Natural)
[20:44:53] <monochrom> I don't know Liquid Haskell, but a self-respecting refinement type system ought to support type aliases too.
[20:45:20] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[20:45:30] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:47:03] <geekosaur> danso, simply because Haskell's type system does not support it.
[20:47:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:47:24] <danso> i guess my dream would be support for type declarations like `newtype CapitalInt = { 65 ... 91 }
[20:47:34] <monochrom> Also, Natural should be "integers >= 0".
[20:47:48] <danso> but i think that would basically require every number literal to have its own typeclass
[20:47:51] <geekosaur> the first decision you must make in such a system is whether to do checking at runtime (easier) or compile time (and now programmers must provide proofs with every operation on such a number that they don't violate the invariant)
[20:48:05] <monochrom> Pascal can do the special case of range subtypes.
[20:48:16] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4)
[20:48:17] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:48:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:48:28] <geekosaur> *such a type
[20:48:33] <monochrom> You literally write "type T = 65...91" or "x : 65..91".
[20:48:57] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[20:49:06] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:49:08] *** Joins: tewrvd^ (~tewrvd@64.253.22.77)
[20:49:14] <monochrom> Although, yeah, Pascal checks the range at run time.
[20:49:20] <danso> monochrom, mathematicians much smarter than i am disagree about the exact definition of "natural"
[20:49:48] <danso> i think ada supports a similar type feature
[20:49:54] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:49:55] <monochrom> Oh, it gets better. They disagree with each other.
[20:50:17] <danso> but both of those languages still have much... simpler type systems than haskell
[20:50:18] <monochrom> And they are split into 3 camps regarding 0^0.
[20:50:25] <danso> monochrom, that is what i meant :^)
[20:50:25] *** Joins: Akiva (~Akiva@user/Akiva)
[20:50:38] <monochrom> Ah OK haha.
[20:50:55] <danso> you clearly have an opinion, but i don't really 
[20:51:25] <danso> i am fine with nats starting at 0 or 1 
[20:51:35] <danso> of course anything else would be one of those "abominations"
[20:52:47] *** Quits: mbuf (~Shakthi@122.164.195.237) (Quit: Leaving)
[20:53:03] <monochrom> The anicent Greeks started at 2. They did not consider 0 or 1 to be numbers. They did not have 0, they probably didn't even have 1.
[20:53:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[20:54:13] <danso> uncivilized heathens. luckily for us, the arabs taught them the error of their ways
[20:54:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:54:45] <monochrom> You can see some of it in Euclid's elements, in which when he stated a theorem that today we regard as "true for all positive integers", he stated a version for 1 and a version for >=2 separately.
[20:55:22] <monochrom> It also has a relic in our languages. If I say "I have a number of wives", you automatically assume it's >=2.
[20:55:31] <monochrom> Apparently 1 is not a "number".
[20:55:36] <danso> that is a good observation
[20:55:56] <danso> likewise, 0, -1, e, and 2+i are not "numbers"
[20:56:54] <danso> i am now wondering when such proofs are necessary and when they can be worked around. 
[20:57:32] *** Quits: xff0x (~xff0x@2001:1a81:5251:6900:a6ab:a36:c73a:5d3f) (Ping timeout: 240 seconds)
[20:57:44] <geekosaur> the cases when they're not necessary are pretty much the cases when you wouldn't want to use them (e.g. constants, which the compiler can check)
[20:57:47] <danso> taking the set/type CapsInt = {65 ... 91}, + and * could be the semiring operations isomorphic to the naturals mod 26
[20:58:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:58:04] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:58:18] <danso> though that would have the funny consequence that 65*65 = 65 and 66*66 = 66
[20:58:23] *** Joins: xff0x (~xff0x@port-92-195-26-37.dynamic.as20676.net)
[20:58:40] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:58:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[20:58:59] <danso> (the naturals beginning at zero, of course ;^))
[20:59:14] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[20:59:14] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:00:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:00:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:00:03] <danso> i guess it would look funny because "65" is an unusual way to write zero
[21:00:38] <geekosaur> I think most people would want an exception for wraparounds; see complaints already about Haskell's Int and Word
[21:01:29] <danso> i am not aware of such complaints
[21:02:10] <danso> i suppose what they want is more like (+) :: Int -> Int -> Maybe Int
[21:02:51] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[21:04:02] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c52a:cb9b:7833:8fe4) (Ping timeout: 240 seconds)
[21:05:21] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:05:22] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:05:45] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:05:46] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:06:00] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c98d:6161:3d03:dc15)
[21:06:11] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:06:12] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:06:26] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:07:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:07:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:07:41] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[21:08:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:08:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:09:38] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:09:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:10:32] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c98d:6161:3d03:dc15) (Ping timeout: 240 seconds)
[21:12:37] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:12:37] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:13:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:13:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:13:42] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[21:14:06] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 260 seconds)
[21:15:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:15:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:15:49] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[21:16:41] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:16:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:16:56] *** Joins: cosimone (~user@93-47-231-231.ip115.fastwebnet.it)
[21:21:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:21:04] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:21:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:21:56] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:21:56] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:22:51] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:22:52] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:24:13] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:24:13] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:25:38] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:25:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:26:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[21:26:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:26:51] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:29:29] *** Joins: ksqsf (~user@134.209.106.31)
[21:30:35] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[21:31:11] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[21:31:20] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[21:32:26] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:32:37] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:32:56] <Arsen> what's a good way to cache deps in a, say, stack build in github actions cache
[21:34:48] <sshine> Arsen, https://github.com/sshine/evm-opcodes/blob/main/.github/workflows/haskell.yml#L33-L40
[21:35:04] <sshine> Arsen, sorry, that was for cabal.
[21:35:28] *** Joins: nvmd (~nvmd@user/nvmd)
[21:35:34] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 268 seconds)
[21:35:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[21:36:54] <sshine> Arsen, in Stack's case you want to cache .stack-work/ and ~/.stack, I think. let me just look.
[21:38:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[21:39:46] <Arsen> I think it's just stack-work
[21:40:00] <sshine> Arsen, you might like this: https://github.com/freckle/stack-action
[21:40:07] <Arsen> oh, damn, I didn't know that actions can cache dirs
[21:40:11] <Arsen> I thought it just caches a blob
[21:40:34] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:40:58] <sshine> Arsen, https://github.com/freckle/stack-action#hlint--weeder -- possibly the shortest solution on GitHub is: - uses: freckle/stack-cache-action@v1
[21:41:29] <sshine> although, consider pinning the action by the commit hash instead of a version for security reasons.
[21:41:31] *** Joins: ksqsf (~user@134.209.106.31)
[21:41:57] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[21:42:01] <sshine> https://michaelheap.com/ensure-github-actions-pinned-sha/
[21:42:05] <Arsen> yeah, of course
[21:42:07] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[21:42:24] <Arsen> that's great, thank you! :D
[21:42:34] <sshine> yw!
[21:43:14] <sshine> also, I think it's not just .stack-work/ if you also want to cache building external dependencies.
[21:43:26] <sshine> I think .stack-work/ contains symlinks to ~/.stack/...?
[21:43:53] <Arsen> maybe..
[21:44:09] <sshine> might as well let the pre-made action figure that part out :-P
[21:44:37] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[21:44:41] <Arsen> as long as it's audited and pinned
[21:45:29] <sshine> you can always hard-fork it, but I think @freckle looks like a reliable place to refer to one's actions, especially when hash-pinnned. :)
[21:46:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[21:48:47] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c98d:6161:3d03:dc15)
[21:48:47] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[21:49:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:49:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:49:21] *** Joins: wroathe (~wroathe@user/wroathe)
[21:51:01] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[21:52:57] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c98d:6161:3d03:dc15) (Ping timeout: 240 seconds)
[21:54:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[21:56:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[21:57:33] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[21:57:42] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:58:01] <zero> why is take specialized to lists? aaarhg
[21:58:19] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:59:16] *** Joins: haasn (~nand@haasn.dev)
[21:59:38] <monochrom> What's wrong with that. What does "generalize" mean in that context?
[22:01:24] <geekosaur> what were you expecting it to work with, and why?
[22:01:37] <zero> take :: Foldable f => Int -> f a -> [a]
[22:01:54] <geekosaur> now imagine take applied to a Set
[22:02:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:02:06] <monochrom> That one can simply go through toList.
[22:02:24] <geekosaur> sure, but is it going to do what a caller would expect?
[22:02:37] <geekosaur> (for that matter, what would a caller expect it to do?)
[22:02:58] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[22:03:26] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:03:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:03:26] *** Joins: wroathe (~wroathe@user/wroathe)
[22:03:39] * geekosaur is now imagining take applied to the infamous Foldable instance for tuples
[22:03:42] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:03:47] <EvanR> repeatedly minViewing a set
[22:03:50] <zero> take n = take n . foldl' (:) []
[22:04:38] <EvanR> oof... spider sense tingling at that choice of fold
[22:04:45] <zero> oops
[22:04:57] <dmj`> maybe there should be a 'takeBy', takeBy on a Tree could give you an in/pre/post order traversal
[22:05:03] <zero> you're right but you get my point
[22:05:07] <EvanR> but yeah any Foldable can be converted to a list, which you can take
[22:05:12] <zero> that was muscle memory
[22:05:28] <EvanR> drop is the one that makes less sense
[22:05:44] <monochrom> People are too eager for strictness in a lazy language.
[22:05:50] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:06:01] <zero> monochrom: ;)
[22:08:15] *** Quits: tewrvd^ (~tewrvd@64.253.22.77) (Remote host closed the connection)
[22:08:55] <EvanR> I often want to not only take, by drop precisely what I took to end up with a "partition" that could hypothetically go back together
[22:09:07] <EvanR> but drop*
[22:09:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[22:09:21] <monochrom> Yeah, span or break.
[22:09:26] <EvanR> dunno what typeclass that would be
[22:09:38] <EvanR> span for list, split for map or set
[22:09:51] <geekosaur> don't think there is one since you lose structure on the way
[22:10:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:12:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:12:59] <EvanR> for a more complex database of sets and indexes, splitting into the found set and the rest... for "purposes"
[22:13:16] <EvanR> this is how my deranged mind works
[22:16:50] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[22:17:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:19:23] *** Quits: deech` (~user@024-217-244-075.res.spectrum.com) (Remote host closed the connection)
[22:19:36] *** Joins: deech` (~user@024-217-244-075.res.spectrum.com)
[22:20:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[22:21:40] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:22:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:23:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:23:38] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:24:51] *** Joins: ksqsf (~user@134.209.106.31)
[22:25:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[22:25:56] <zero> what's the advantage of the class system over having overladed functions?
[22:26:36] <zero> *overloaded
[22:26:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:27:32] <monochrom> The Haskell class system is organized overloading.
[22:27:53] <monochrom> C++'s is unorganized.
[22:28:07] <monochrom> The difference is separate compilation.
[22:28:27] *** Quits: cosimone (~user@93-47-231-231.ip115.fastwebnet.it) (Remote host closed the connection)
[22:28:32] <monochrom> Separate compilation has benefits in error message management too.
[22:28:45] <EvanR> type directed name disambiguation seems hit or miss
[22:28:59] <monochrom> For example, if you try to do "x < y" where the type of x and y do not support <
[22:29:26] <monochrom> Err, I need to start my example with:
[22:29:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[22:30:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[22:30:11] <monochrom> If I define a function "f x y = ... x<y ..." and you are the user.
[22:31:15] <monochrom> As a user, you don't want to hear how I coded it up, which line number I'm doing x<y at.
[22:31:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305) (Ping timeout: 240 seconds)
[22:31:54] <monochrom> But you used it wrong. You try to have "f X Y" where X and Y are from a type that doesn't support <
[22:31:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:32:20] <monochrom> In Haskell, the error message is simply "your type is not an instance of Ord".
[22:33:26] <monochrom> In C++, the error message is "you're #include'ing monochrom.h and at line 451 it has x<y and it's nonsense".
[22:33:33] *** Quits: max22- (~maxime@2a01cb0883359800aceba2125845502e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:34:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:34:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:34:27] *** Joins: wroathe (~wroathe@user/wroathe)
[22:35:00] <monochrom> It can get worse if f doesn't use x<y directly, but instead f calls g, g calls h, h is where I have x<y. And all that goes through 3 transitive #include's, too.
[22:35:23] <zero> i just wish there was a better way to disambiguate which function i mean without having to mess with imports
[22:36:16] <EvanR> ah that's a whole nother topic
[22:36:29] *** Joins: pfurla (~pfurla@177.142.243.216)
[22:36:34] <EvanR> the same name is used in prelude, Data.Map, Data.Set, Data.Sequence, Data.HashMap, etc
[22:36:40] <monochrom> The C++ error message will be telling you all about monochrom1.h, monochrom2.h, monochrom3.h, f, g, h, and a lot of line numbers that you didn't write.
[22:37:24] <zero> EvanR: exactly
[22:37:48] <zero> i hate having to qualify all my imports
[22:37:48] <EvanR> clojure tries to help you by making all these names part of some interface, but then the interfaces don't come with any guarantees at all and end up doing a bunch of import fu anyway
[22:37:53] <monochrom> That one you solve by "import qualified Data.Map as M".
[22:38:26] <EvanR> I'm getting pretty close to having a copy pastable block of qualified imports that I just know
[22:38:48] <monochrom> Why were they not unified by a class? Because people felt that they didn't know how to design that class properly.
[22:39:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[22:39:44] <monochrom> Moreover classes might not even be the right answer. Parametrized modules might be a better answer. We were not sure.
[22:39:45] <zero> monochrom: also that would require coordination and also some time travel
[22:39:57] <monochrom> Moreoever, parametrized modules came too little too late.
[22:40:18] <zero> monochrom: what are paremeterized modules?
[22:40:32] <EvanR> and how would they help zero's issue
[22:40:42] *** Joins: xkuru (~xkuru@user/xkuru)
[22:40:45] <EvanR> (not wanting to specify anything)
[22:40:56] <monochrom> Okassaki tried to do the classes in the "edision" library, when he was also doing functional data structures.
[22:41:04] <monochrom> No one went on to use that library.
[22:41:17] *** Quits: pfurla (~pfurla@177.142.243.216) (Ping timeout: 252 seconds)
[22:41:37] <carter> which was a bummer
[22:41:38] <monochrom> That was the closest we ever got.
[22:41:42] <carter> yeah
[22:41:51] *** Joins: ubert (~Thunderbi@p548c89c3.dip0.t-ipconnect.de)
[22:41:57] *** Joins: Akiva (~Akiva@user/Akiva)
[22:41:58] *** Joins: ksqsf (~user@134.209.106.31)
[22:42:02] <carter> partly its because type class composition is sortah not qutie the right "user demanded" ux
[22:42:28] *** Joins: cosimone (~user@93-47-231-231.ip115.fastwebnet.it)
[22:43:13] <monochrom> Suppose you write a module M, in which you may want to use one of: [], Array, Set.  But you are not sure which.
[22:43:17] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:43:23] <carter> yeah
[22:43:36] <carter> parameterized modules are sortah friendlier for that UX
[22:43:55] <monochrom> But you are sure that you want these 3 operations: isEmpty, singleton, insert.
[22:45:07] <monochrom> So you say your M takes a parameter, the parameter needs to be a module that exports a type T, and 3 operations isEmpty:T a->Bool, singleton:: a -> T a, insert :: a -> T a -> T a.
[22:45:30] <d34df00d> Suppose I have a `class Has (x :: Ty) (xs :: [Ty])`. How do I write `instance Has x (x :: xs)`? ghc thinks that latter :: is a type annotation and not a constructor.
[22:45:35] <monochrom> A module that takes a module as parameter.
[22:45:53] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[22:45:54] <monochrom> See SML "functor" and Haskell+cabal "backpack".
[22:46:13] <monochrom> And now you know all 4 definitions of "functor" :)
[22:46:15] <EvanR> headscratch... ok that's cool and all but, it sounds like more typing than import qualified Data.Map as M
[22:46:32] <EvanR> it solves a different issue from zero's gripe
[22:46:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[22:47:18] <EvanR> yes you don't specify exact which module you will use
[22:47:33] <EvanR> but you build a whole interface before doing anything
[22:48:11] *** Joins: smyds (~smyds@176.10.118.193)
[22:48:20] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 268 seconds)
[22:48:44] <EvanR> maybe zero was saying I know which module I want to use, why can't the compiler just know what I know
[22:49:09] <EvanR> some kind of inference
[22:49:22] <smyds> hey, I'm reading a tutorial where they use the type "!Text", what does the '!' means ?
[22:49:26] <monochrom> Yeah, zero is not exactly known to clearer state their real concern.
[22:49:32] <monochrom> s/clearer/clearly/
[22:49:41] *** Joins: nvmd (~nvmd@user/nvmd)
[22:50:05] <d34df00d> Ah dang, too much different languages lately. Of course, haskell's list constructor is :, not ::. Sorry for the brainfart.
[22:50:17] <geekosaur> smyds, the ! makes it strict
[22:50:29] *** Joins: ksqsf (~user@134.209.106.31)
[22:50:30] <monochrom> smyds: You should post a more complete line of code, but it is likely http://www.vex.net/~trebla/haskell/strict-field.xhtml
[22:50:39] <monochrom> Context is very important.
[22:51:31] <monochrom> I am just upset that querents simply assume that they don't need to provide more context.
[22:51:48] <monochrom> Or it is reasonable to ask over-generalized questions.
[22:52:22] <monochrom> I was in a math channel in which some students were like "Is there an algorithm for solving equations in general?"
[22:52:36] <monochrom> And they only meant "like 3x+5 = 4".
[22:53:01] <monochrom> Or rather, they meant "my homework is 3x+5 = 4".
[22:54:46] <monochrom> This channel is not free of the same disease either.
[22:55:04] <monochrom> There were people who asked like "how do I use the Maybe type?"
[22:55:11] <EvanR> equations in general, like, commutative diagrams? xD
[22:55:34] *** Joins: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net)
[22:55:39] <monochrom> And it turned out they just meant: "I got an error message for this line of code: f x = g Just x".
[22:55:45] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[22:57:49] <monochrom> in which the only problem was the lack of parentheses, "g (Just x)".
[22:58:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5) (Remote host closed the connection)
[22:58:31] <EvanR> less generalized problems, more generalized solutions
[22:58:53] <smyds> geekosaur: thanks, monochrom : thanks anyway
[22:59:14] <EvanR> including complaining about generalized problems
[22:59:37] *** Quits: yauhsien (~yauhsien@61-231-38-209.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:01:01] *** Joins: max22- (~maxime@2a01cb0883359800cf3672742e8ded0b.ipv6.abo.wanadoo.fr)
[23:01:32] *** Quits: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03) (Read error: Connection reset by peer)
[23:02:17] <zero> monochrom: my concerns are not clear, i'm just generally concerned :)
[23:02:21] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:04:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:04:21] <zero> my curiosity is most often better satisfied if i don't try to be too specific with my questioning
[23:04:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:04:58] <zero> this channel is a never-ending funtain of knowledge
[23:05:15] <geekosaur> flip side you can be so nonspecific that nobody can give you an answer
[23:05:29] <zero> never happened
[23:05:42] <EvanR> if you think qualified imports are bad in haskell, in elixir not only is everything qualified but you use the full module name everywhere
[23:05:44] <zero> when it does, i can specify ;D
[23:05:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e0f7:dc28:dd0d:f0d5)
[23:06:29] <EvanR> 50% of a short snippet of code can be module names xD
[23:07:40] <monochrom> Now I know that next time I need not answer.
[23:08:17] <zero> i know understand what the issue is, why it is, and what the possible solutions are
[23:08:33] <sshine> zero, I like the term funtain.
[23:08:53] <zero> monochrom: your answers have been very helpful
[23:09:11] <zero> sshine: my 'o' key is acting up
[23:09:41] <pragma-> zero: have you tried sitting down with it and talking to it to see what may be bothering it?
[23:10:52] <zero> pragma-: i know exaclty what has been bthering it and that's my cat
[23:10:53] <EvanR> is strict field of primitives without UNPACK useful, or is UNPACK sometimes automatic?, and if you change UNPACK does that break anything down the line, already compiled, that depended on that type?
[23:11:33] <geekosaur> ghc with optimization will often try to UNPACK strict fields itself, iirc
[23:12:02] <geekosaur> anything already compiled will depend on it via the .hi file and will get recompiled if needed
[23:12:09] <EvanR> cool
[23:12:11] <monochrom> If you change UNPACK, you trigger "it recompiles everything, again".
[23:12:12] <zero> EvanR: unpacking often happens in optimizations
[23:12:48] <monochrom> Strict field is useful without UNPACK.
[23:12:50] <EvanR> so it might not even be necessary to state it
[23:13:04] <EvanR> strict field of e.g. Float?
[23:13:11] <geekosaur> yes, and you can have fields that are strict but can't be UNPACKed
[23:13:33] <geekosaur> (for example, anything with more than one constructor)
[23:13:55] <monochrom> If you try to do foldl' (z0, z1) ... and find that it is still too lazy and uses too much space, you need data S a b = S !a !b, foldl' (S z0 z1) ...
[23:14:49] <EvanR> yeah strict field in general is that, which is why i tagged "of primitives" on there xD
[23:15:00] <monochrom> Oh!
[23:15:07] <monochrom> Yeah I missed that.
[23:15:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:16:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[23:16:29] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:18:25] *** Joins: yin (~yin@user/zero)
[23:19:53] <yin> do linear types have anything to do with the way rust handles the "borrowing" of values?
[23:20:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:20:36] *** Joins: deadmarshal (~deadmarsh@95.38.229.7)
[23:21:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[23:21:35] *** Joins: ksqsf (~user@134.209.106.31)
[23:21:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:84c9:5514:9bd3:b2f5)
[23:25:20] *** Quits: deadmarshal (~deadmarsh@95.38.229.7) (Ping timeout: 268 seconds)
[23:26:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[23:26:20] <geekosaur> from the last discussion of that here I gather it's related but not identical
[23:27:27] <geekosaur> forthat matter ghc does the same kind of "borrowing" but it's simpler because of purity and that it therefore knows what values are no longer "alive" and can be reused
[23:29:26] <EvanR> specifically with the linear types?
[23:30:08] <geekosaur> which is how it does fusion
[23:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:34:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:34:37] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[23:35:20] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:58] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:25] *** Joins: andbartol (~andrea@user/Bartol)
[23:39:09] *** Quits: andbartol (~andrea@user/Bartol) (Client Quit)
[23:42:52] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:44:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:46:29] <geekosaur> it doesn't yet use linearity / multiplicity for optimization at all. apparently that's supposed to come later
[23:49:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:49:34] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:50:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:51:11] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[23:54:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[23:54:54] <carter> its more that they cant make their fusion rewrite api safe UNLESS it type checks as linear
[23:55:02] <carter> rather than linearity being used for the optimization
[23:55:08] <carter> if you're talking about the xample i think youare
[23:56:18] <geekosaur> actually I started out talking about regular fusion (as compared to rust "borrowing") and only brought multiplicity into it later
[23:56:27] *** Joins: ksqsf (~user@134.209.106.31)
[23:56:40] <geekosaur> I was wondering how much linear RULES could help with fusion, I admit
[23:57:28] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[23:58:06] *** Joins: amk (~amk@109.255.169.126)
[23:59:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
