[00:09:34] *** Joins: gfldex (~dex@ip5f5ab722.dynamic.kabel-deutschland.de)
[00:12:49] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[00:15:51] *** Quits: Altreus (~altreus@2a03:b0c0:1:e0::439:5001) (Ping timeout: 276 seconds)
[00:16:30] *** Quits: tbrowder (sid168924@id-168924.tooting.irccloud.com) (Ping timeout: 276 seconds)
[00:16:44] *** Joins: tbrowder (sid168924@id-168924.tooting.irccloud.com)
[00:22:23] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[00:23:42] <Geth> ¬¶ doc: cc90195825 | Coke++ | xt/lib-test-files.raku
[00:23:42] <Geth> ¬¶ doc: Update comment explaining how file is used
[00:23:42] <Geth> ¬¶ doc: 
[00:23:42] <Geth> ¬¶ doc: Resolves #3934
[00:23:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/cc90195825
[00:24:24] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:28:17] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[00:35:39] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[01:26:26] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:27:21] *** Quits: SystemFFan (~SystemFFa@188.70.6.7) (Remote host closed the connection)
[01:28:10] *** Joins: SystemFFan (~SystemFFa@188.70.6.7)
[01:33:22] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:ac9b:2578:55e3:e77a) (Ping timeout: 245 seconds)
[01:38:20] <moon-child> m: sub f(:$x=1, :$y=2) { say "x $x; y $y" }; f |("x"|"y" => 5)
[01:38:20] <camelia> rakudo-moar 84c47294b: OUTPUT: ¬´This type cannot unbox to a native string: P6opaque, Junction‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[01:38:26] <moon-child> should junction keys autothread?
[02:00:13] *** Joins: Altai-man_ (~koto@94.142.239.45)
[02:32:13] *** Quits: Altai-man_ (~koto@94.142.239.45) (Quit: Leaving)
[02:36:43] *** Quits: Altai-man (~koto@94.142.239.45) (Ping timeout: 252 seconds)
[03:36:43] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:36:43] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:38:27] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:39:16] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:31:10] *** Quits: SystemFFan (~SystemFFa@188.70.6.7) (Ping timeout: 240 seconds)
[04:31:22] *** Quits: lichtkind (~lichtkind@p200300d0a7115de3b0e40a09bada4fc7.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:32:48] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:35:50] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:11:45] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 250 seconds)
[05:14:34] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[05:25:01] <Xliff> Can rakudo do Twig?
[05:55:09] <[Coke]> would you expect the code in the twig templates to be raku?
[05:56:09] <[Coke]> https://modules.raku.org/search/?q=template has a few templating options.
[05:58:19] <[Coke]> https://cro.services/docs/reference/cro-webapp-template also may be of interest.
[06:14:34] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:14:34] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:48:01] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[06:49:29] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 244 seconds)
[06:51:42] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 245 seconds)
[06:51:42] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 245 seconds)
[06:53:30] *** Joins: frost (~frost@59.71.240.119)
[06:57:07] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 245 seconds)
[07:06:48] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[07:08:47] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[07:15:24] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:38:44] *** Joins: aleksb (~aleksb@202-159-174-62.tpgi.com.au)
[07:43:27] *** Quits: rakuUser (~rakuUser@179.215.180.176) (Quit: Connection closed)
[07:59:34] *** Quits: keutoi (~keutoi@157.47.108.29) (Ping timeout: 252 seconds)
[08:01:23] *** Joins: keutoi (~keutoi@27.59.194.183)
[08:06:28] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[09:06:28] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:28] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:06:45] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:06:51] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:07:09] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:07:26] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[09:07:51] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[09:07:52] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[09:08:09] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:08:13] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:08:23] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[09:08:26] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[09:08:48] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[09:09:09] *** Joins: homura (root@2605:6400:c847:1486::6841)
[09:09:43] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:17:41] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:23:31] *** Quits: kjp (~kevin@180.216.13.19) (Ping timeout: 250 seconds)
[09:25:29] *** Joins: kjp (~kevin@180.216.227.52)
[09:47:38] *** Quits: homura (root@2605:6400:c847:1486::6841) (Changing host)
[09:47:38] *** Joins: homura (root@user/homura)
[10:06:55] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[10:07:34] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:32:32] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:01] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:48:25] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:04:27] *** Quits: Summer (~summer@user/summer) (Quit: bye bye!)
[11:04:45] *** Joins: Summer (~summer@user/summer)
[11:05:24] *** Joins: Altai-man (~koto@94.142.239.45)
[11:06:18] *** Quits: Altai-man (~koto@94.142.239.45) (Client Quit)
[11:07:41] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[11:08:17] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[11:09:48] *** Joins: Altai-man (~koto@94.142.239.45)
[11:31:35] *** Quits: keutoi (~keutoi@27.59.194.183) (Ping timeout: 244 seconds)
[11:41:58] *** Joins: lichtkind (~lichtkind@p200300d0a7115ddcb0e40a09bada4fc7.dip0.t-ipconnect.de)
[11:43:48] *** Joins: keutoi (~keutoi@27.59.194.183)
[12:05:27] *** Joins: yggdrasil63 (~yggdrasil@197.248.20.39)
[12:08:12] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[12:09:42] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[12:10:32] *** Quits: aleksb (~aleksb@202-159-174-62.tpgi.com.au) (Quit: Connection closed)
[12:17:34] *** Quits: keutoi (~keutoi@27.59.194.183) (Ping timeout: 252 seconds)
[13:12:24] *** Joins: holyghost (~holyghost@109.136.39.83)
[13:24:16] *** Joins: MoC (~moc@user/moc)
[13:26:34] <yggdrasil63> m: say 13.^methods;
[13:26:34] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´(new Capture Int sign Num Rat FatRat abs Bridge sqrt base polymod expmod is-prime floor ceiling round lsb msb narrow Range conj rand sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech‚Ä¶¬ª
[13:27:35] <yggdrasil63> m: say "z1".succ;
[13:27:35] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´z2‚ê§¬ª
[13:27:56] <yggdrasil63> m: say "/".succ;
[13:27:56] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´/‚ê§¬ª
[13:28:04] <yggdrasil63> m: say "?".succ;
[13:28:04] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´?‚ê§¬ª
[13:28:21] <yggdrasil63> m: say "..".succ;
[13:28:21] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´..‚ê§¬ª
[13:31:38] <yggdrasil63> m: say $*DISTRO;
[13:31:38] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´opensuse-leap (15.2)‚ê§¬ª
[13:52:14] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:53:22] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:53:36] *** Joins: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[13:55:13] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 244 seconds)
[13:58:22] <yggdrasil63> m: say "z1".succ.succ;
[13:58:22] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´z3‚ê§¬ª
[13:59:15] <yggdrasil63> m: say "a".prev;
[13:59:15] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´No such method 'prev' for invocant of type 'Str'.  Did you mean any of‚ê§these: 'grep', 'pred', 'tree'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[13:59:20] <yggdrasil63> m: say "a".pred;
[13:59:20] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´Decrement out of range‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[13:59:29] <yggdrasil63> m: say "/".pred;
[13:59:29] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´/‚ê§¬ª
[14:05:45] <lizmat> yggdrasil63: "/" is not magical
[14:05:54] <lizmat> m: say "B".prev
[14:05:54] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´No such method 'prev' for invocant of type 'Str'.  Did you mean any of‚ê§these: 'grep', 'pred', 'tree'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:05:58] <lizmat> m: say "B".pred
[14:05:58] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´A‚ê§¬ª
[14:05:59] <lizmat> :-)
[14:08:03] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[14:09:22] <yggdrasil63> lizmat: I was just wondering what would happen for symbols when you call .succ or .pred
[14:10:01] <yggdrasil63> m: say "B".pred;
[14:10:01] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´A‚ê§¬ª
[14:10:19] <yggdrasil63> m: say "&".pred;
[14:10:20] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´&‚ê§¬ª
[14:10:47] <lizmat> m: say "&".ord.pred.chr
[14:10:48] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´%‚ê§¬ª
[14:11:07] <lizmat> that would be more general :-)
[14:17:48] <yggdrasil63> Interesting
[14:18:05] <yggdrasil63> m: say "¬´".ord.prev.chr
[14:18:05] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´No such method 'prev' for invocant of type 'Int'.  Did you mean any of‚ê§these: 'grep', 'pred', 'tree'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:18:16] <yggdrasil63> m: say "¬´".ord.pred.chr
[14:18:16] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´¬™‚ê§¬ª
[14:18:21] <yggdrasil63> Ha!
[14:18:29] <yggdrasil63> Very interesting language.
[14:18:39] <lizmat> thank you :-)
[14:19:04] <yggdrasil63> m: say "¬´".ord.succ.chr
[14:19:04] *** Joins: Nih (~Nih@host-212-18-14-210.customer.m-online.net)
[14:19:04] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´¬¨‚ê§¬ª
[14:19:36] *** Quits: Nih (~Nih@host-212-18-14-210.customer.m-online.net) (Client Quit)
[14:21:49] <yggdrasil63> m: subset zero-integer of Int where * = 0; my zero-integer i = 1; say i ;
[14:21:49] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Multiple prefix constraints not yet implemented. Sorry.‚ê§at <tmp>:1‚ê§------> 3er of Int where * = 0; my zero-integer i7‚èè5 = 1; say i ;‚ê§¬ª
[14:23:15] <yggdrasil63> Does where support multiple clauses?
[14:31:25] <yggdrasil63> x`
[14:37:10] <frost> m: subset zero-integer of Int where * = 0; my zero-integer $i = 1; say $i ;
[14:37:10] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´Cannot modify an immutable Whatever (*)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:37:20] <frost> m: subset zero-integer of Int where * == 0; my zero-integer $i = 1; say $i ;
[14:37:21] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´Type check failed in assignment to $i; expected zero-integer but got Int (1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:37:29] <frost> m: subset zero-integer of Int where * == 0; my zero-integer $i = 0; say $i ;
[14:37:29] <camelia> rakudo-moar 3ebbcee23: OUTPUT: ¬´0‚ê§¬ª
[14:40:41] *** Joins: keutoi (~keutoi@157.47.12.197)
[14:42:47] <raydiak> yggdrasil63: you can compare against multiple values with junctions, or you can do more complex logic using the block form instead of the whatever star
[14:45:24] <raydiak> e.g. `where * == 0|1`, or `where { $_ == 0 || $_ == 1 }`
[14:47:26] <Xliff> /j #cro
[14:48:50] *** Quits: lichtkind (~lichtkind@p200300d0a7115ddcb0e40a09bada4fc7.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:13:06] <keutoi> I am not sure how `sub MAIN` is being dispatched, but why doesn't this work `sub MAIN(@a)` while `sub MAIN(*@a)` works?
[15:16:23] <lizmat> keutoi: you cannot specify an array on the commandline
[15:16:43] <lizmat> you *can* specify multiple named arguments on the command line
[15:17:09] <lizmat> so something like sub MAIN(:@foo)   would work with --foo=a --foo=b
[15:18:04] <lizmat> you *can* specify (unnamed) arguments on the command line, but they'd be interpreted as multiple single values
[15:18:22] <lizmat> so sub MAIN($a,$b) for two values
[15:18:37] <lizmat> if you don't know the number of values you're going to get, you need a slurpy array
[15:19:48] <keutoi> So there is no situation in which `sub MAIN(@a)` definition actually works, right?
[15:20:37] <lizmat> I don't think so, but would gladly be proven wrong :-)
[15:22:20] <keutoi> We might need that clarification in language/create-cli.
[15:28:14] <Geth> ¬¶ doc: k3ut0i++ created pull request #3949: passing indeterminate number of parameters to MAIN
[15:28:14] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3949
[15:48:50] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:48:51] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:49:52] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[15:51:01] *** Quits: avar (avar@vm.nix.is) (Quit: leaving)
[15:52:29] *** Quits: jaguart (~jaguart@178.171.187.81.in-addr.arpa) (Remote host closed the connection)
[16:14:06] <yggdrasil63> :frost :raydiak thanks for the clarification.
[16:32:40] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:35] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:40:18] *** Parts: yggdrasil63 (~yggdrasil@197.248.20.39) ()
[16:44:48] <tbrowder> hi, all
[16:45:55] *** Joins: rakuUser (~rakuUser@179.215.180.176)
[16:47:04] *** Quits: keutoi (~keutoi@157.47.12.197) (Ping timeout: 252 seconds)
[16:47:18] *** Joins: keutoi (~keutoi@157.47.12.197)
[16:50:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:51:16] <tbrowder> not quite raku related, but is there a mac user here who has installed user TLS/SLS certificate for use in accessing private areas of websites who would be willing to help a friend of mine (located in us mountain time zone) with his problem?
[16:52:57] <tbrowder> i don't have access to a mac so it's difficult to debug over the phone and we don't have a way to see his screen.
[16:53:58] <tbrowder> pls contact me by private msg if interested, thanks.
[16:56:00] <tbrowder> but re raku, i am using raku in creating web maps on my websites using tomtom maps SDK
[16:58:41] *** Joins: avar (avar@vm.nix.is)
[17:03:05] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[17:03:49] <Doc_Holliwood> Would it be possible to modify the regex engine so that it operates on lists of characters as input instead of strings?
[17:12:56] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:39:11] <moritz_> with enough work put in, that would be possible
[17:44:35] *** Quits: PotatoGim (sid99505@id-99505.tooting.irccloud.com) ()
[17:45:11] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[17:53:44] *** Quits: tbrowder (sid168924@id-168924.tooting.irccloud.com) ()
[17:53:58] *** Joins: tbrowder (sid168924@id-168924.lymington.irccloud.com)
[18:32:19] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:33:34] <tib> Hello, a tentative planning for the ephemeral miniconf: https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-tentative-planning-aom normal slots are full, still looking for lightning talks speakers :)
[18:39:45] <codesections> are `my @l := (1, 2, 3)` and `my @l is List = (1, 2, 3)` exactly the same, or is there a semantic difference that I'm missing?
[18:45:46] <ugexe> seems that way for the most part, but for instance:
[18:45:49] <ugexe> m: my @a := (1,2,3); my @b is List = (1,2,3); @a := 1
[18:45:49] <camelia> rakudo-moar ea8a95e56: OUTPUT: ¬´Type check failed in binding; expected Positional but got Int (1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:45:51] <ugexe> m: my @a := (1,2,3); my @b is List = (1,2,3); @b := 1
[18:45:52] <camelia> rakudo-moar ea8a95e56: OUTPUT: ¬´Type check failed in binding; expected List but got Int (1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:46:29] *** Quits: b2gills (~brad@64.191.7.0) (Quit: Leaving.)
[18:46:40] *** Joins: b2gills (~brad@64.191.7.0)
[18:47:11] <codesections> Interesting 
[18:48:39] <ugexe> that comment does help me internalize golangs := a bit better though
[18:50:52] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[18:53:34] *** Quits: keutoi (~keutoi@157.47.12.197) (Ping timeout: 252 seconds)
[18:54:27] *** Joins: neither (~neither@5.177.228.185)
[18:55:35] *** Joins: keutoi (~keutoi@157.48.90.28)
[19:09:22] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[19:17:34] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[19:28:34] *** Quits: doconthe1ocks (~animeshs@129-241-228-245-gw.cgn.ntnu.no) (Ping timeout: 240 seconds)
[19:29:44] *** Quits: keutoi (~keutoi@157.48.90.28) (Quit: leaving)
[19:32:17] *** Parts: homura (root@user/homura) ()
[19:38:05] <Geth> ¬¶ doc/rx-adverbs: 5e54c056ff | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6
[19:38:05] <Geth> ¬¶ doc/rx-adverbs: Clarify where rx declarator allows adverbs
[19:38:05] <Geth> ¬¶ doc/rx-adverbs: 
[19:38:05] <Geth> ¬¶ doc/rx-adverbs: A regex declared with `rx` allows adverbs both before the delimiter (`rx:s/pattern/`) and 
[19:38:05] <Geth> ¬¶ doc/rx-adverbs: after (`rx/:s pattern/`), but the docs only mentioned the first option.  This fixes that, and
[19:38:06] <Geth> ¬¶ doc/rx-adverbs: brings the rx section of the page into alignment with the adverb section.
[19:38:06] <Geth> ¬¶ doc/rx-adverbs: review: https://github.com/Raku/doc/commit/5e54c056ff
[19:38:17] *** Quits: neither (~neither@5.177.228.185) (Ping timeout: 244 seconds)
[19:38:27] <Geth> ¬¶ doc: codesections++ created pull request #3951: Clarify where rx declarator allows adverbs
[19:38:27] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3951
[20:14:44] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit:  bbl)
[20:16:11] <Geth> ¬¶ doc: e223f5e11a | keutoi++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/create-cli.pod6
[20:16:12] <Geth> ¬¶ doc: passing indeterminate number of parameters to MAIN
[20:16:12] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/e223f5e11a
[20:16:15] <linkable6> Link: https://docs.raku.org/language/create-cli
[20:24:42] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[20:52:21] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:792d:29ae:a5b3:8fc3)
[20:55:03] *** Joins: keutoi (~keutoi@157.48.132.21)
[20:58:57] *** Joins: Guest59 (~Guest59@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8)
[21:04:47] *** Quits: Guest59 (~Guest59@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8) (Quit: Client closed)
[21:05:36] *** Joins: Guest20 (~Guest20@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8)
[21:05:46] *** Quits: Guest20 (~Guest20@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8) (Client Quit)
[21:20:59] *** Joins: Guest92 (~Guest92@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8)
[21:21:11] *** Quits: Guest92 (~Guest92@2409:4070:2e1f:fb78:ec9b:8d69:4b2c:bdd8) (Client Quit)
[21:51:48] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[22:01:32] *** Joins: Guest26 (~Guest26@node-1w7jr9qr7aarwmvpij3qrqg3k.ipv6.telus.net)
[22:03:04] *** Quits: Guest26 (~Guest26@node-1w7jr9qr7aarwmvpij3qrqg3k.ipv6.telus.net) (Client Quit)
[22:32:08] *** Joins: neither (~neither@5.177.228.185)
[22:32:50] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:38:45] *** Joins: patrickb (~quassel@55d466dd.access.ecotel.net)
[22:52:06] *** Quits: keutoi (~keutoi@157.48.132.21) (Remote host closed the connection)
[23:02:05] *** Joins: neither64 (~neither@5.177.228.185)
[23:03:05] *** Quits: neither64 (~neither@5.177.228.185) (Client Quit)
[23:04:26] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 244 seconds)
[23:08:42] *** Joins: lichtkind (~lichtkind@p200300d0a7115ddcb0e40a09bada4fc7.dip0.t-ipconnect.de)
[23:15:45] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[23:17:01] *** Joins: neither31 (~neither@5.177.228.185)
[23:27:59] <neither31> hi, is `$obj.WHAT.new` an idiomatic way to make a new object as the same type as `$obj`?
[23:30:40] <MasterDuke> seems like a decent way to me
[23:30:40] <codesections> I don't think I've ever needed to do that, so I'm not sure‚Ä¶
[23:30:41] <lizmat> I think for most core classes, you can leave out the .WHAT
[23:30:44] <codesections> but wouldn't $obj.new also work unless it's a very strangely constructed object?
[23:31:04] <lizmat> for custom classes: if a new does does something different if the invocant is an instance, 
[23:31:09] <lizmat> then who knows
[23:31:28] <lizmat> most classes I know of, don't make the distinction
[23:31:39] <codesections> yeah, that's what I meant by "very strangely constructed" :D 
[23:37:24] <ugexe> .WHAT.clone is another option although i dont see why it would be better than the other options
[23:37:40] <lizmat> cloning a type object ??
[23:38:39] <moon-child> neither31: you can just use $obj.new
[23:38:48] <moon-child> oh, already suggested
[23:38:50] <ugexe> cloning a type object is the first example shown for https://docs.raku.org/routine/clone#class_Mu
[23:39:45] <moon-child> 'Note that .clone does not go the extra mile to shallow-copy @. and %. sigiled attributes'  should that not be 'deep-copy'?
[23:40:12] <codesections> ugexe yeah, but that example dies‚Ä¶
[23:40:49] <ugexe> because its being passed incorrect arguments
[23:40:54] <ugexe> m: say Num.clone
[23:40:55] <camelia> rakudo-moar ea8a95e56: OUTPUT: ¬´(Num)‚ê§¬ª
[23:41:24] <codesections> m: say Num.clone(4)
[23:41:25] <camelia> rakudo-moar ea8a95e56: OUTPUT: ¬´Cannot resolve caller clone(Num:U: Int:D); none of these signatures match:‚ê§    (Mu:U: *%twiddles)‚ê§    (Mu:D: *%twiddles)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:41:41] <codesections> m: say Num.clone.new(4)
[23:41:42] <camelia> rakudo-moar ea8a95e56: OUTPUT: ¬´4‚ê§¬ª
[23:41:57] <codesections> but why not just do Num.new ?
[23:44:03] <ugexe> well i did say i dont see why it would be better than .new
[23:44:15] <codesections> fair :)
[23:46:46] <neither> Oh I didn't even think of `$obj.new` as I was looking for a class method
[23:46:47] <neither> But still, with WHAT intent is more clear IMHO
[23:46:47] <neither> Thanks
[23:46:47] *** Quits: patrickb (~quassel@55d466dd.access.ecotel.net) (Quit: Quit.)
[23:49:40] <MasterDuke> yeah, i rarely prefer something longer over shorter, but i think i would in this case
