[00:01:49] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 240 seconds)
[00:06:20] *** Joins: CormacAttack (~mac@144.62.50.200)
[00:14:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:16:13] *** Quits: proller (~p@2a02:6b8:b081:8012::1:16) (Ping timeout: 240 seconds)
[00:16:45] *** Joins: Viewday111 (~Viewday@user/viewday)
[00:18:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:18:44] *** Viewday111 is now known as Viewday11
[00:20:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:21:13] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:21:54] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:23:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:28:13] *** Quits: snbk97 (~sayan@122.161.65.178) (Ping timeout: 240 seconds)
[00:30:29] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[00:31:11] *** Quits: Leone (~Leo@216.154.50.172) (Read error: Connection reset by peer)
[00:32:24] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[00:44:04] *** Joins: pulse (~pulse@user/pulse)
[00:46:35] *** Joins: proller (~p@80.240.216.69)
[00:50:16] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[00:56:29] *** Joins: jplejacq (~jplejacq@24.224.100.40)
[00:56:41] *** Quits: rgrinberg (~textual@187.223.58.12) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:58:50] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[01:02:52] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[01:06:36] *** Joins: seninha (~seninha@user/seninha)
[01:07:49] *** Quits: jplejacq (~jplejacq@24.224.100.40) (Quit: Leaving.)
[01:08:02] *** Joins: jplejacq (~jplejacq@24.224.100.40)
[01:12:44] *** Quits: jplejacq (~jplejacq@24.224.100.40) (Client Quit)
[01:21:10] *** Joins: Brainium (~brainium@user/brainium)
[01:24:47] *** Quits: magla (~gelignite@55d47927.access.ecotel.net) (Quit: Stay safe!)
[01:25:52] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:25] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:33:42] *** Joins: fdkf (~fdkf@178.49.152.151)
[01:34:08] *** Joins: troller (~p@80.240.216.69)
[01:34:23] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:37:40] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[01:39:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:17] *** ChanServ sets mode: +v npaperbot
[01:40:06] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[01:49:56] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[01:50:47] *** Joins: Atque (~Atque@user/atque)
[01:51:12] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[01:51:15] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:53:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:53:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[01:54:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:59:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[02:03:29] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:03:57] *** Joins: troller (~p@2a02:6b8:b081:8806::1:2f)
[02:06:20] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:09:20] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[02:14:02] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Quit: Client closed)
[02:16:55] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Ping timeout: 252 seconds)
[02:24:11] <Raziel> why is type_index not constexpr? v:
[02:26:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:27:33] *** Quits: CormacAttack (~mac@144.62.50.200) (Ping timeout: 252 seconds)
[02:28:32] <SuperNintendoSUX> fapfap
[02:29:12] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[02:29:40] <PJBoy> yeah I mean
[02:29:47] <PJBoy> that explains it entirely
[02:30:29] <SuperNintendoSUX> :)
[02:30:38] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:32:30] *** Quits: pizdets (~pizdets@183.182.115.237) (Ping timeout: 250 seconds)
[02:32:46] *** Quits: smartin (~Thunderbi@88.135.18.171) (Quit: smartin)
[02:33:56] *** Joins: pizdets (~pizdets@183.182.115.115)
[02:38:07] *** Joins: CormacAttack (~mac@144.62.50.200)
[02:39:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:46:16] <PJBoy> [p1328]
[02:46:16] <npaperbot> P1328R1: [Library] Making std::type_info::operator== constexpr <https://wg21.link/p1328r1> (by Peter Dimov) (2021-05-03) (Related: https://wg21.link/p1328r1/github)
[02:50:22] <Raziel> nice to see that it's suggested at least
[02:50:26] <Raziel> I guess I can live with just const for now :p
[02:54:24] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 268 seconds)
[02:54:27] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[02:55:18] <Raziel> aw shit I broke wandbox
[02:57:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:59:37] <Raziel> so, this meta abomination seems to work fine on clang and my msvc, but doesn't compile on gcc https://wandbox.org/permlink/Dkb0cX3pqPWdn8e9
[02:59:41] <Raziel> any idea... why?
[02:59:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:00:32] <Raziel> I apologize in advance for the inconsistent use of capitalization in names. v:
[03:02:15] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:2340:f1d3:d7bc:cf0a:7599)
[03:02:43] *** Quits: qft (~mzhang@69-222-187-165.lightspeed.sntcca.sbcglobal.net) (Quit: WeeChat 3.3)
[03:02:48] <manuels> how does RTTI work under the hood? example: what happens if i have an executable, two libraries each providing an exported class with the same name. what happens when the second class gets loaded?
[03:04:34] <Oxyd> Raziel: Because you didn't #include <functional>.
[03:05:04] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:2340:f1d3:d7bc:cf0a:7599) (Client Quit)
[03:05:16] <manuels> let it be a pure virtual class (interface) otherwise the ond definiton rule would apply I guess. and the linker would refuse to load the lib
[03:05:36] <Raziel> Oxyd, weird that the others don't need it. but yeah, that seems to do it, along with adding std::ref on the return
[03:06:00] <manuels> what happens when 1) the classes are the same and 2) the interface differs?
[03:06:53] <Raziel> also, is using references to map elements like that valid? I mean, it seems to work fine, but
[03:07:13] <Oxyd> Raziel: Standard library headers may optionally include other standard library headers, but, except in a few cases, aren't required to. So that's why some compilers accept it but others don't.
[03:07:21] <Raziel> I see
[03:10:55] *** Quits: CormacAttack (~mac@144.62.50.200) (Quit: WeeChat 3.3)
[03:14:33] *** Joins: szutt (~szutt@116.37.2.145)
[03:16:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:35] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[03:20:59] *** Parts: abraham (~abraham@143.244.185.86) (The Lounge - https://thelounge.chat)
[03:22:04] *** Quits: Brainium (~brainium@user/brainium) (Ping timeout: 265 seconds)
[03:33:23] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community at https://indiedevs.net/)
[03:37:18] <RandomReader> manuels - all of that would be about particular implementations, not the language standard .. as in, the language does not specify a linker, or libraries that can be loaded dynamically, or any of that
[03:37:51] <RandomReader> ODR certainly applies in general, but that's not how all implementations handle exports/imports for their dynamic systems
[03:38:23] <RandomReader> would be the sort of topic better for #c++-general or one of the implementation channels
[03:39:23] <RandomReader> in terms of the language, an abstract class (pure virtual) doesn't change ODR at all, which applies to pretty much everything
[03:41:00] <RandomReader> because of the separate translation phases (TUs being compiled independently), there are several kinds of ODR violations a typical compiler and linker won't detect, but the result would still be UB
[03:41:59] <RandomReader> RTTI doesn't affect this one way or another, it's just a mechanism built on the same language rules as everything else
[03:50:01] <Raziel> I'm really shooting myself in the balls here trying to use references when I really should just be using pointers for this, eh
[03:50:06] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 265 seconds)
[03:50:47] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:52:15] <Alipha> Raziel: references are not a replacement for pointers
[03:52:38] <Raziel> Alipha, I know. What I don't know if there's supposed to be a nice/workable way of doing this with references, or if this is pointer territory
[03:52:43] <Raziel> is if*
[03:53:22] <Raziel> wherein "this" is returning a reference to an element in a container (a map, in this case)
[03:54:25] <Alipha> Raziel: is there a "but"?
[03:54:56] <Raziel> Alipha, the current "but" is that it seems my current way of doing it is actually making a local copy of said element and returning a reference to that local copy
[03:55:07] <Raziel> rather than a reference to the actual thing in the map
[03:55:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:55:34] <Alipha> Raziel: it's UB to return a reference to a local variable
[03:55:51] <Raziel> well, yeah. but I don't wanna return a reference to a local variable, I wanna return a reference to the element in the map. :(
[03:56:01] <RandomReader> this sounds less like "reference vs pointer" and more like "insufficient use of references"
[03:56:51] <RandomReader> e.g.   map[key]   is already a reference, so don't try to stick a non-reference between that and your return
[03:57:21] <RandomReader> what's the actual scenario?
[03:57:57] <Alipha> Foo &get_element(std::string key) { return map[key]; }  // Raziel works fine
[04:00:12] *** Joins: Techcable (~Techcable@168.235.93.147)
[04:00:41] <Raziel> Alipha, I was doing it from an iterator I got with find, and I wasn't sure how to get a ref out of it. seems just explicit casting ->second to ref for the return works alright, although other methods were failing to cast
[04:00:48] <Raziel> thankees
[04:01:04] <RandomReader> er, no, don't cast
[04:01:16] <Raziel> well shit
[04:01:20] <RandomReader> (if you have to cast, something is already wrong, so don't make it worse)
[04:01:40] <Alipha> Raziel: what error do you get if you don't cast?
[04:02:33] <Raziel> Alipha, no viable conversion
[04:02:38] <Raziel> https://wandbox.org/permlink/JsX87HrzJrR9FG9c
[04:03:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:03:55] <RandomReader> reference_wrapper is not a general-use type, and doesn't seem appropriate here
[04:04:00] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[04:04:17] <Raziel> RandomReader, so it should just be a return type of int& instead of ref wrapper, mayhaps?
[04:04:22] *** Joins: Rayke (rayke@user/rayke)
[04:04:36] <RandomReader> if you intend for this to be a function that can fail, then pick one of:   pointer with nullptr signaling failure, or reference with exception signaling failure
[04:04:38] <Raziel> it does work with ref wrapper if I do explicitly cast, I did confirm it's not doing shenanigans, but, idk if it's actually UB or what :p
[04:04:57] <Alipha> Raziel: so, the error is that you have a const map and a const iterator, but you're trying to have a non-const reference_wrapper refer to it
[04:05:12] <Raziel> yeah, I'll add exceptions, although in most cases where I want to map things like this silent-failing with a specific "null" element of that type is valid
[04:05:30] <Alipha> but indeed, you probably want a `int*` or a `const int*`, not reference_wrapper
[04:05:31] <Raziel> Alipha, removing the const on the iterator doesn't seem to change much, but yeah, I did forget that part
[04:05:35] <RandomReader> there's no such thing in this case though
[04:05:46] <RandomReader> "int" has a specific range of values, there's no sentinel
[04:05:53] <Alipha> Raziel: the map is also const, which means find will still return a const iterator
[04:06:06] <Raziel> RandomReader, right, but the int is just for example. this is gonna be used for more specific stuff (handles that do have an invalid handle sentinel, etc)
[04:06:17] <RandomReader> ah ok
[04:06:39] <RandomReader> for this kind of interface, the sentinel needs to be stored somewhere though
[04:06:48] <Raziel> Alipha, the type_index map is const, the others are not
[04:07:01] <RandomReader> so you're setting yourself up for either a container with a static member, or global-ish constants somewhere
[04:07:11] <Alipha> Raziel: const auto& myMap = ... ;   // myMap is const
[04:07:12] <Raziel> yeah, they're global-ish const data
[04:07:35] <Raziel> Alipha, oh, when I get it. this is true.
[04:08:04] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:05] <Alipha> `auto& myMap =` and `auto myIntIt =` makes it compile. whether or not this is a good idea is another question :-)
[04:09:22] <Raziel> RandomReader, I'm not against doing exceptions instead either. realistically, since this is enum mapping, it can never actually be called with an invalid one, but, either way. not really relevant to the ref part :p
[04:09:25] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[04:09:41] <RandomReader> it is in the sense that with exceptions, you need no sentinel
[04:09:46] <Raziel> yeah
[04:10:29] <Raziel> Alipha, not sure if it is a good idea myself, but it is an interesting way of being able to dynamically use some stuff that usually isn't very dynamic :p
[04:10:33] <RandomReader> but yes using a reference with a sentinel object signaling failure would be a third option
[04:11:14] <Alipha> but in that case, int* and returning nullptr is probably better
[04:12:03] *** Joins: c4017w (~c4017@209.52.68.8)
[04:13:25] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:28:06] *** Joins: Speakz (speakz@user/gadreel)
[04:29:29] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30)
[04:31:01] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:d1fb:d15b:4215:e584) (Remote host closed the connection)
[04:31:58] *** Joins: nvmd (~nvmd@user/nvmd)
[04:32:13] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30) (Ping timeout: 240 seconds)
[04:35:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:52] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51)
[04:42:47] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30) (Ping timeout: 265 seconds)
[04:43:30] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[04:45:14] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:46:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[04:47:22] *** Joins: nostar (~nostar@68.51.221.108)
[04:50:14] *** Joins: skapata (~Skapata@user/skapata)
[04:53:24] *** Joins: gargus (~user@114.198.29.250)
[04:53:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1572:52e4:1190:1c22) (Ping timeout: 240 seconds)
[04:57:15] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[04:59:13] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 265 seconds)
[04:59:55] *** Joins: nvmd (~nvmd@user/nvmd)
[05:04:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9def:63cb:61cc:904f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:06:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:09:59] *** Joins: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358)
[05:15:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:15:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:18:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:18:59] *** Joins: seninha (~seninha@user/seninha)
[05:19:35] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:25:45] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[05:30:02] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[05:33:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:33:24] *** Joins: nvmd (~nvmd@user/nvmd)
[05:36:47] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:38:34] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[05:39:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:17] *** ChanServ sets mode: +v npaperbot
[05:46:08] *** Parts: Kaedenn (~kaedenn@137.229.82.89) ()
[05:51:01] *** Quits: nostar (~nostar@68.51.221.108) (Ping timeout: 240 seconds)
[05:51:03] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[05:51:45] *** Quits: fdkf (~fdkf@178.49.152.151) (Quit: Client closed)
[05:57:31] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[05:58:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:02:03] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[06:02:17] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[06:07:05] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:08:06] *** anyone is now known as zz
[06:11:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:12:40] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:16:59] *** Joins: andreasbuhr_ (~quassel@p549db063.dip0.t-ipconnect.de)
[06:17:02] *** Quits: andreasbuhr (~quassel@p548ddc5e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:22:23] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:22:54] <sprout_> is there a manner to portably create flexible objects of a class?  (classes which end with a `type[] m`member)?
[06:25:01] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[06:26:37] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600bced6d5f88ca5ed5.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[06:27:51] <zz> After a moment of thought, I would enter the discussion on the hypothesis that _creating_ them is portable -- but the "struct { T hanging_off[]; }" syntax to conveniently _access_ it isn't.
[06:29:26] <zz> (requiring the use of e.g. a member function within the struct)
[06:33:39] *** Joins: millido (~millido@84.210.150.128)
[06:37:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358) (Ping timeout: 268 seconds)
[06:37:46] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:39:33] *** Joins: emerent_ (~quassel@p200300cd571d489bba27ebfffed28a59.dip0.t-ipconnect.de)
[06:39:33] *** emerent is now known as Guest2577
[06:39:33] *** Quits: Guest2577 (~quassel@p200300cd5715b0a8ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (zinc.libera.chat (Nickname regained by services)))
[06:39:33] *** emerent_ is now known as emerent
[06:40:14] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[06:41:43] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 256 seconds)
[06:47:58] <zz> https://wandbox.org/permlink/svOZACijRklX9Zs7  I wonder if I've overlooked anything
[06:50:30] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[06:51:36] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:52:51] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[06:57:09] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 265 seconds)
[06:59:20] *** Joins: letto2 (~letto@79.115.130.66)
[06:59:51] *** Quits: letto (~letto@188.25.118.240) (Ping timeout: 256 seconds)
[07:00:35] <zz> https://wandbox.org/permlink/1rSgk5U9mr6dIhrR and a version with slightly more managed pointers
[07:00:35] *** Joins: ferdna (~ferdna@user/ferdna)
[07:02:42] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b8d0:c079:925e:725a)
[07:16:37] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 240 seconds)
[07:26:00] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:30:23] <sprout_> oooh.  that could be great help indeed! imma study that in detail
[07:30:23] <Alipha> sprout_: why not just use `std::vector<type> m;`?
[07:30:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:31:44] <sprout_> my language rewrites a graph,  most of the graph consists of arrays of atoms,  preferably I'll get rid of the vector all together since it's way too performance degrading
[07:32:04] <sprout_> millions of allocations/deallocations of vector is a bit much,  maybe
[07:34:02] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[07:34:49] <zz> well, if you were contemplating about struct with hanging data, your array size is known at the time of allocation, so using vector::reserve would fit the bill too
[07:36:12] <sprout_> the problem is that that's two allocations.  one for vector,  one for some pointer to an array (or whatever) it holds internally
[07:36:28] <sprout_> preferably I'll just allocate one array,  and nothing more
[07:37:08] <sprout_> it's just double the work for every rewrite in my graph rewriter so I want to half the number of allocations
[07:38:50] <sprout_> or I just give up on the entire object hierarchy,  which I'll do after the prototype.   but flexible objects could solve this for this prototype interpreter
[07:40:27] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[07:42:15] *** Joins: biberu (~biberu@user/biberu)
[07:42:19] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[07:42:58] *** Joins: Burgundy (~yomon@79.115.213.171)
[07:43:15] <Alipha> sprout_: i mean, i don't see any issue with zz's solution, other than S should probably have its copy constructor and operator= deleted
[07:45:07] <sprout_> heh.  I'll see whether I can adapt it to the object hierarchy.   this allocates and array of S's I think (glancing over it).  what I need is an S with an array of variable size (since otherwise it doesn't fit neatly into my class hierarchy)
[07:45:22] <sprout_> *object = class
[07:45:45] *** Joins: snbk97 (~sayan@122.161.65.178)
[07:46:07] <zz> considered copy/move. v3 https://wandbox.org/permlink/MudHedCQngviqSXP
[07:46:12] <sprout_> right.   value = atom | array (value*).  <- that's roughly the class hierarchy
[07:46:58] <Alipha> sprout_: `new (20) S(20)` allocates an S object and 20 T's stored in memory adjacent to it
[07:47:20] <sprout_> Aaaah!  I only glanced at it so far.  Excellent!
[07:48:37] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 241 seconds)
[07:49:10] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 268 seconds)
[07:50:00] <zz> one can't reasonably do copy/move ctor/asg as a member function, since member functions don't have the power to change the location of an S
[07:50:26] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Quit: Leaving)
[07:50:47] <Alipha> yeah, you'd just move the std::unique_ptr anyway instead. though you could add a clone function
[07:52:37] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:24] <zz> ah you mean leaving S(S&&) deleted. Yeah, sounds cool.
[07:59:12] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:59:38] <Alipha> zz: I'd delete S(const S&) and operator=const S&) also and instead write a `std::unique_ptr<S> clone() const`
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:01:34] <zz> yup. Now I'm just thinking about what to do in case T is non-copyable
[08:02:37] <Alipha> Sfinae away the clone function
[08:02:49] <zz> if only sfinae syntax was easier
[08:04:30] *** Joins: leah2 (~leah@vuxu.org)
[08:05:49] *** Quits: snbk97 (~sayan@122.161.65.178) (Ping timeout: 240 seconds)
[08:08:54] <Alipha> std::unique_ptr<S<T>> clone() const requires(std::is_copy_constructible_v<T>) {...} // ;-)
[08:09:47] *** Joins: letto (~letto@188.26.158.104)
[08:09:49] *** Quits: letto2 (~letto@79.115.130.66) (Ping timeout: 240 seconds)
[08:11:27] <sprout_> I'll see whether the std::shared_ptr<T> will take a silly experimental definition of value = atom | array value* in some test program tomorrow
[08:11:52] <sprout_> thanks a lot anyway all.
[08:12:07] <zz> if operator| gives the right return type, ...suuuuure
[08:20:47] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:23:35] *** Quits: rahl (~rahl@102.114.3.60) (Ping timeout: 252 seconds)
[08:24:03] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[08:25:34] *** Joins: rahl (~rahl@102.114.126.85)
[08:30:31] *** Quits: nshire_ (~nshire@47.146.41.156) (Quit: Leaving)
[08:30:32] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[08:30:48] *** Joins: nshire (~nshire@user/nshire)
[08:31:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:32:32] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[08:35:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:36:58] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[08:47:01] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[08:54:32] *** Joins: biberu (~biberu@user/biberu)
[08:57:16] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:3ddf:77ed:0:281) (Remote host closed the connection)
[08:59:54] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[09:06:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f0a3:e269:e520:8c3b)
[09:10:20] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 252 seconds)
[09:10:29] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[09:11:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f0a3:e269:e520:8c3b) (Ping timeout: 240 seconds)
[09:16:01] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[09:20:28] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[09:22:54] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[09:25:33] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[09:29:08] *** Joins: skapata (~Skapata@user/skapata)
[09:30:35] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:33:07] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:36:28] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[09:38:45] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b8d0:c079:925e:725a) (Ping timeout: 252 seconds)
[09:39:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:17] *** ChanServ sets mode: +v npaperbot
[09:49:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:58:37] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Ping timeout: 240 seconds)
[10:01:22] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[10:05:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:07:39] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[10:09:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:10:26] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[10:10:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[10:13:05] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[10:17:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[10:17:41] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:32:05] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:3d8:320d:e930:69a6)
[10:37:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:38:13] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.127) (Ping timeout: 240 seconds)
[10:42:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:42:08] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:43:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:44:19] *** Joins: [R] (~rs@genoce.org)
[10:45:58] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:54:24] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:59:47] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 265 seconds)
[11:00:37] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[11:04:58] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:3d8:320d:e930:69a6) (Quit: Leaving)
[11:05:20] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[11:07:08] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:07:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:16:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:16:13] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51) (Ping timeout: 240 seconds)
[11:17:09] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:18:18] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:27:40] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:28:01] *** Joins: snbk97 (~sayan@122.161.65.178)
[11:29:21] *** Joins: Guest31 (~Guest31@2001-4dd4-11c2-0-99e-d85a-17ad-fec4.ipv6dyn.netcologne.de)
[11:29:30] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:3d8:320d:e930:69a6)
[11:29:38] *** Guest31 is now known as limubs
[11:31:35] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:33:13] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.68)
[11:36:29] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[11:39:17] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[11:40:46] *** Joins: moose` (~moose@user/moose)
[11:40:55] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[11:41:18] *** Quits: moose` (~moose@user/moose) (Read error: Connection reset by peer)
[11:44:03] *** Joins: frost (~frost@user/frost)
[11:48:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:51:43] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[11:55:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:59:25] *** Quits: snbk97 (~sayan@122.161.65.178) (Ping timeout: 240 seconds)
[12:01:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:03:32] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[12:04:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:05:02] *** Joins: NEYi (~NEYi@109.251.216.38)
[12:09:24] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 268 seconds)
[12:10:26] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:14:39] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:15:33] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:18:35] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:20:27] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:21:55] *** Joins: robod34 (Username@79.113.195.239)
[12:27:45] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[12:34:45] *** Joins: AmR (~AmREiSa@156.199.223.24)
[12:35:35] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[12:38:20] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:40:29] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[12:40:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:43:01] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[12:46:59] *** Joins: bpalmer` (~user@user/bpalmer)
[12:49:03] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 252 seconds)
[12:50:17] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:50:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[12:52:10] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:59:09] *** Joins: pulse (~pulse@user/pulse)
[13:00:19] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[13:07:09] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Remote host closed the connection)
[13:09:49] *** Joins: [R] (~rs@genoce.org)
[13:10:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:35] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[13:27:29] *** Joins: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com)
[13:27:29] *** Quits: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com) (Changing host)
[13:27:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:23] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[13:30:28] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[13:33:03] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[13:35:35] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[13:39:09] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[13:39:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:19] *** ChanServ sets mode: +v npaperbot
[13:40:18] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:41:27] *** Joins: nofx (~i.am@189.26.169.41.dynamic.adsl.gvt.net.br)
[13:41:45] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[13:45:05] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[13:47:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:48:52] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[13:52:44] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:08:55] *** Joins: xkuru (~xkuru@user/xkuru)
[14:16:48] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:16:58] <manuels> if I know the type 100% can I use static cast instead of dynamic?
[14:17:33] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:17:40] <lockywolf> http://paste.debian.net/1222400 is this code okay? It does what I expect it to do, but I am not sure I am not doing something unusual here.
[14:20:27] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[14:20:58] <PJBoy> manuels, yes
[14:21:47] <PJBoy> lockywolf, that code is horrible
[14:22:05] <PJBoy> I highly doubt it's well defined
[14:22:13] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:22:19] <zz> so much red
[14:22:42] <PJBoy> complex<int> has "unspecified behaviour"
[14:23:05] <PJBoy> and then yeah, memcpying over `this` to change a const data member
[14:23:07] <zz> and memcpying a Test type into complex<int> smells UB left right and center
[14:23:40] <zz> hm strike that
[14:24:07] <zz> it still looks unnecessarily complicated
[14:24:27] <zz> just copy Test::A rather than Test
[14:24:30] <PJBoy> you can only memcpy over trivial types or some such
[14:24:44] <zz> and you need to check that it isn't a copy-to-self
[14:24:45] <PJBoy> and even then, I doubt that includes const variables
[14:25:55] <lockywolf> I am not copying over this to change a const data member.
[14:26:01] <zz> remove 11-16 altogether. Test::operator=(Test) can be implicitly generated because complex<int> should have a copy assign of its own
[14:26:25] <lockywolf> zz, it will be implicitly deleted
[14:26:31] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[14:26:50] <PJBoy> you're memcpying to this
[14:26:55] <lockywolf> I am making A const, because I want to prohibit obj1.A = stuff;
[14:27:08] <zz> wonder why that is
[14:27:13] <PJBoy> << is_trivially_copyable_v<S>; struct S { const complex<int> x; S& operator=(const S&) { return *this; } };
[14:27:13] <geordi> false
[14:27:18] <PJBoy> confirmed not memcpy eligible
[14:27:19] <zz> don't use a "const" complex<int>, then?
[14:27:25] <lockywolf> But when I write obj1 = obj2; , I want it to mean "throw away obj1 entirely, and make obj1 whatever what at obj2"
[14:27:32] <zz> just S { complex<int> A; }
[14:27:53] <PJBoy> you should still probably get rid of complex<int>
[14:28:24] <zz> https://wandbox.org/permlink/Prza1HiUiBGPWvAh without all the garbage
[14:29:57] <lockywolf> zz, you didn't understand me
[14:30:02] <lockywolf> A needs to be const
[14:30:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:31:01] <PJBoy> no it doesn't
[14:31:09] <lockywolf> because I do not want to accidentally overwrite it via the . syntax
[14:31:09] <lockywolf> if this is undefined, I would give up on this idea
[14:31:33] <PJBoy> you're making that data member non modifiable, even by operator=
[14:31:43] <PJBoy> it's actually very atypical to have const data members
[14:31:57] <lockywolf> ?
[14:32:10] <PJBoy> if you can't trust users of your class to not modify A, then you should make it private
[14:32:27] <PJBoy> and provide a getter for it
[14:32:36] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:33:08] <lockywolf> hm... okay
[14:33:15] *** Joins: Tempesta (~Tempesta@user/tempesta)
[14:34:08] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:35:39] <ville> lockywolf: also realize that you can't really idiot-proof everything, so try to have a guess of likelyhood, severity and fixability of an error
[14:37:32] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[14:38:24] <lockywolf> Okay, understood. I'm still new to C++. This seemed to be a relatively straightforward way to make it behave more like Java or Scheme. But I understand it is a different language with different practices.
[14:39:08] <PJBoy> I thought java worked the same way here
[14:39:26] <PJBoy> you control access to a variable via getters and possibly setters
[14:40:00] <furrymcgee> does a move constructor not mean 'throw away obj1 entirely and make obj1 whatever what at obj2'?
[14:40:29] <ville> furrymcgee: const members
[14:40:44] <PJBoy> and presumably final members in java can't be changed by java's assignment operator either
[14:40:50] <ville> oh sorry _constructor_. nevermind
[14:41:25] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Ping timeout: 240 seconds)
[14:41:39] <lockywolf> PJBoy, I think, in Java "everything is a pointer", although I am not very sure.
[14:42:40] <PJBoy> move ctor is a ctor that has a rvalue reference parameter, semantically indicating that the parameter object is expiring and so you can gut it and steal its resources if you want
[14:43:09] <furrymcgee> I suppose call destructor and placement new with copy constructor
[14:43:29] <PJBoy> nothing enforces that you do take advantage of this resource stealing opportunity though
[14:44:45] <PJBoy> ok you're way too new to C++ to be thinking about calling dtors and placement new
[14:45:13] <PJBoy> those things basically never come up
[14:45:36] <PJBoy> if you're writing a constructor, calling a dtor makes no sense whatsoever, as the object hasn't even been constructed
[14:46:45] <PJBoy> placement new has complicated rules regarding when and how it's valid to use the resulting object
[14:47:30] <furrymcgee> ?
[14:47:58] <PJBoy> yeah exactly
[14:48:02] <lockywolf> hm... placement new seems relevant is interesting
[14:49:14] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[14:50:57] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[14:51:31] <lockywolf> java is fine with something similar to my code
[14:51:33] <RandomReader> it's not relevant to what you're trying to do here though, which (as mentioned earlier) is fundamentally nonsense
[14:51:42] <lockywolf> lol
[14:51:49] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:51:49] <RandomReader> C++ is not Java, treat it as a separate language
[14:52:00] <lockywolf> IRC never disappoints
[14:52:33] <RandomReader> in particular, C++ does not have properties
[14:53:03] <RandomReader> it's a common mistake to chase that syntax when you're used to languages that do
[14:56:17] *** Quits: troller (~p@2a02:6b8:b081:8806::1:2f) (Ping timeout: 252 seconds)
[14:56:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:56:56] <RandomReader> what would be the Java version of what you're trying there?
[15:02:45] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[15:03:11] <RandomReader> to expand on some of the underlying C++ specifics, value vs reference semantics depends on how you use the types (vs the types themselves), so assignment isn't about variables (symbolic names) but about the objects themselves
[15:03:38] <RandomReader> ("object" being "conceptual container for a value", which is basically everything in C++ .. not specifically OOP things associated with "class")
[15:05:49] <RandomReader> objects in turn have lifetime, type-based characteristics associated with them, and expectations on how they're accessed .. so they don't get silently "replaced" in any sense
[15:06:38] <RandomReader> (so syntactically, variable1 = variable2 assignment is always going to perform the operation for both of those existing objects, it can't remove/replace the object in variable1)
[15:07:15] *** Quits: m0shbear (~nope@205.185.119.231) (Ping timeout: 256 seconds)
[15:07:34] *** Joins: m0shbear (~nope@205.185.119.231)
[15:07:48] <RandomReader> but that also means a constant object is fixed once initialized, there's no logical way to remove its constness, since that's a trait of the type it was created with
[15:08:00] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:08:13] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Ping timeout: 265 seconds)
[15:11:11] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:11:17] <RandomReader> the act of attempting to modify its storage, e.g. with memcpy or placement new or similar, is therefore formally undefined .. in practice one of the common side effects is that because it's known to be constant, the value is propagated or cached, so changing it leads to mixed results instead of intended behavior
[15:12:19] <RandomReader> (but since the modification attempt is undefined, it can lead to more difficult to explain outcomes, since there aren't any constraints on what may happen)
[15:12:55] *** nofx is now known as ko
[15:12:56] *** Quits: ko (~i.am@189.26.169.41.dynamic.adsl.gvt.net.br) (Changing host)
[15:12:56] *** Joins: ko (~i.am@user/marlboro)
[15:14:34] <RandomReader> as far as I'm aware Java doesn't have most of these things as concepts, the object and variable models are both different, so it'd be interesting to see what the equivalent code would be
[15:14:59] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.68) (Ping timeout: 265 seconds)
[15:15:21] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.235)
[15:16:44] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.235) (Max SendQ exceeded)
[15:17:38] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.235)
[15:22:52] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Quit: food with kids time)
[15:25:19] *** Joins: fdkff (~fdkff@178.49.152.151)
[15:28:26] <furrymcgee> Java does not help to understand concepts of destructor and placement new
[15:30:21] <RandomReader> well no, C++ has unique models for those, but I was talking about the concepts behind usage of the Test type that started this conversation
[15:30:43] <RandomReader> those same concepts mean that placement new doesn't apply here
[15:30:59] <RandomReader> (other concepts would mean it doesn't apply anyway, the defined use cases for it are fairly narrow)
[15:31:20] <furrymcgee> I think they try to learn C++ so it is relevant
[15:31:50] <RandomReader> it doesn't help to accomplish anything they were trying to do here, so how is it relevant?
[15:32:23] <RandomReader> it's just as silly as saying "you can throw an exception!"
[15:32:38] <RandomReader> I mean, that's true, you can .. but it doesn't have anything to do with Test
[15:32:43] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[15:34:39] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[15:34:40] <furrymcgee> who knows
[15:35:01] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.235) (Ping timeout: 240 seconds)
[15:37:39] *** Joins: gobanon (~vardan@ti0035a400-2849.bb.online.no)
[15:39:11] *** Joins: CaCode (~CaCode@user/cacode)
[15:40:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:47:34] *** Joins: troller (~p@2a02:6b8:0:51e:247d:133b:f0cd:2843)
[15:48:05] *** Joins: Enzix (~Enzix@77.105.17.172)
[15:52:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[15:57:59] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[16:00:27] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[16:03:05] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[16:06:41] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Ping timeout: 252 seconds)
[16:09:13] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[16:10:37] *** Joins: grayn (grayn@gateway/vpn/protonvpn/grayn)
[16:10:41] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:15:22] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:22:05] *** Quits: fdkff (~fdkff@178.49.152.151) (Quit: Client closed)
[16:24:37] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[16:25:23] *** Joins: xkuru (~xkuru@user/xkuru)
[16:28:16] *** Joins: xiongxin (~Thunderbi@119.123.103.34)
[16:33:39] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[16:34:19] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[16:34:20] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[16:37:17] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[16:39:26] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:3ddf:77ed:0:281)
[16:39:47] *** Joins: pingpongball51 (~pingpongb@user/pingpongball)
[16:43:32] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[16:46:10] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:50:12] *** Quits: grayn (grayn@gateway/vpn/protonvpn/grayn) (Quit: grayn)
[16:50:19] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[16:51:55] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:53:14] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[16:53:19] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:54:10] *** Joins: reset (~reset@user/reset)
[16:55:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:56:13] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:56:51] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:3d8:320d:e930:69a6) (Quit: Leaving)
[16:57:51] *** Quits: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Ping timeout: 245 seconds)
[16:58:11] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[16:59:44] *** Joins: osse (~osse@zsh/user/osse)
[17:03:56] *** Quits: pingpongball51 (~pingpongb@user/pingpongball) (Quit: Client closed)
[17:07:23] *** Joins: xiongxin1 (~Thunderbi@113.116.34.60)
[17:09:05] *** Quits: xiongxin (~Thunderbi@119.123.103.34) (Ping timeout: 256 seconds)
[17:09:06] *** xiongxin1 is now known as xiongxin
[17:13:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:20:10] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Ping timeout: 265 seconds)
[17:21:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:24:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:24:54] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:3ddf:77ed:0:281) (Remote host closed the connection)
[17:30:37] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:31:17] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Ping timeout: 265 seconds)
[17:32:34] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[17:38:21] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Ping timeout: 252 seconds)
[17:38:21] *** Quits: froggyc (~froggy@2.235.241.212) (Ping timeout: 252 seconds)
[17:38:33] *** Joins: snbk97 (~sayan@122.161.65.178)
[17:38:49] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[17:39:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:19] *** ChanServ sets mode: +v npaperbot
[17:40:38] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[17:41:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:41:38] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[17:42:31] *** Joins: froggyc (~froggy@2.235.241.212)
[17:44:53] *** Quits: andreasbuhr_ (~quassel@p549db063.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:47:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:01] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[17:58:09] *** Joins: rvalue (~rvalue@user/rvalue)
[18:01:44] *** Quits: rahl (~rahl@102.114.126.85) (Ping timeout: 265 seconds)
[18:02:07] *** Joins: rahl (~rahl@102.114.126.85)
[18:02:28] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[18:03:17] *** Joins: seninha (~seninha@user/seninha)
[18:06:12] *** Joins: mli (~mli@user/mli)
[18:06:23] <mli> hello
[18:06:27] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[18:06:36] <mli> anyone is here?
[18:06:41] <mli> someone*
[18:07:03] *** Parts: mli (~mli@user/mli) (Leaving)
[18:07:27] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Remote host closed the connection)
[18:07:34] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[18:10:15] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Ping timeout: 252 seconds)
[18:11:48] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[18:14:55] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[18:15:05] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[18:15:11] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:16:03] *** Joins: callq (~callq@157.41.67.21)
[18:18:16] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:19:40] <limubs> yes
[18:21:52] *** Quits: Tokamak_ (~Tokamak@172.58.191.55) (Ping timeout: 268 seconds)
[18:22:23] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[18:23:53] *** Joins: xiongxin1 (~Thunderbi@113.116.34.60)
[18:25:54] *** Quits: xiongxin (~Thunderbi@113.116.34.60) (Ping timeout: 265 seconds)
[18:25:54] *** xiongxin1 is now known as xiongxin
[18:28:22] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[18:29:52] *** Quits: callq (~callq@157.41.67.21) (Quit: callq)
[18:31:09] *** Joins: Tyaku (~Tyaku@176-154-243-92.abo.bbox.fr)
[18:31:36] <Tyaku> Hi, Did "StreamReader" class exists in C++ ? I search on google and don't find it in cppreference like websites
[18:32:49] <RandomReader> no, C++ standard library type names are all snake_case
[18:33:15] <artok> StreamReader sounds like Windows thingie
[18:33:56] <TinoDidriksen> Tyaku, the closest equivalent is std::istream which can be used with files via std::ifstream or any other stream-compatible read-only source such as std::cin
[18:35:27] *** Quits: ERROH (~mama@user/mama) (Ping timeout: 268 seconds)
[18:37:10] *** Joins: ERROH (~mama@user/mama)
[18:37:22] *** Joins: tolog (~tolog@89.36.78.180)
[18:39:54] *** Quits: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (Remote host closed the connection)
[18:40:04] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:40:16] *** Joins: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f)
[18:40:25] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[18:40:53] *** Quits: baltazaar (~baltazar@94-21-221-155.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:41:23] *** Quits: mitch0 (~mitch@94-21-221-155.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:42:24] *** Joins: sayan_ (~sayan@122.161.65.178)
[18:44:06] *** Quits: tolog (~tolog@89.36.78.180) (Remote host closed the connection)
[18:45:11] <imMute> System.IO.StreamReader is also a C# thing.
[18:46:11] *** Quits: snbk97 (~sayan@122.161.65.178) (Ping timeout: 252 seconds)
[18:47:55] *** Joins: sereg (~sereg@89.36.78.180)
[18:48:42] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:56:50] *** Quits: sayan_ (~sayan@122.161.65.178) (Quit: Konversation terminated!)
[19:00:37] <Tyaku> Thanks, another dummy question: I have a thread function defined in a class, the thread is initialised by the class (in a start() function). I want to pass on my thread the instance of the class so that inside the thread i can keep instance parameters/properties.
[19:01:08] <Tyaku> I did this using a pointer, but i get this error: std::thread arguments must be invocable after conversion to rvalues
[19:01:52] <Tyaku> I also try something like this "void MyClass::Runner(MyClass& context)"
[19:02:56] <Tyaku> The problems seems to be when i do this: "std::thread t1(Runner, this);"
[19:03:06] *** Joins: mitch0 (~mitch@188-143-71-34.pool.digikabel.hu)
[19:04:15] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:04:47] <PJBoy> so you have a non-static member function named Runner?
[19:04:53] <PJBoy> taking a reference to MyClass
[19:05:18] <PJBoy> that's gonna need a `this` and `*this` argument to be invoked
[19:05:44] <PJBoy> or just a `*this` argument if it's a static member function
[19:07:42] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[19:12:51] *** Quits: xiongxin (~Thunderbi@113.116.34.60) (Remote host closed the connection)
[19:16:10] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[19:23:13] <Alipha> Tyaku: do you mean `std::thread t1(&MyClass::Runner, this);`
[19:23:46] <Alipha> Rather, *this
[19:24:23] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Ping timeout: 265 seconds)
[19:24:44] <Alipha> Or is this where you're supposed to use std::ref? `std::thread t1(&MyClass::Runner, std::ref(*this));`
[19:25:31] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:32:30] <Tyaku> Thanks alipha the last one works
[19:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7)
[19:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7) (Changing host)
[19:33:01] *** Joins: skapata (~Skapata@user/skapata)
[19:33:17] *** Joins: nosystemd (~nosystemd@27.34.47.120)
[19:34:44] <nosystemd> How to create update-rc.d to create the symlinks?
[19:35:18] <TinoDidriksen> nosystemd, that has nothing to do with C++ - ask some Linux channel.
[19:35:34] <nosystemd> c++ == linux
[19:35:39] <nosystemd> ok
[19:36:26] <Alipha> Tyaku: if you make Runner non-static, `void MyClass::Runner()` then `std::thread t1(&MyClass::Runner, this);` should work
[19:38:09] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51)
[19:44:42] *** Quits: Tyaku (~Tyaku@176-154-243-92.abo.bbox.fr) (Quit: Lost terminal)
[19:45:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:48:28] *** bpalmer` is now known as bpalmer
[19:53:11] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:dcc8:ad1a:f19b:91b0)
[19:59:30] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Remote host closed the connection)
[20:03:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:06:17] *** Quits: nosystemd (~nosystemd@27.34.47.120) (Quit: Client closed)
[20:07:10] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:10:14] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:14:32] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:15:38] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[20:21:13] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[20:22:27] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:31:00] *** Joins: magla (~gelignite@55d44df1.access.ecotel.net)
[20:38:59] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:40:04] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) ()
[20:40:35] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:45:10] *** Parts: __zoidberg (~user@2a02:2f00:2110:d000:8093:c97d:cdb:2b2f) (ERC (IRC client for Emacs 27.1))
[20:45:42] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) ()
[20:46:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:46:45] *** Joins: aLeSD__ (~aLeSD@139.47.114.114)
[20:48:22] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[20:48:23] *** Quits: aLeSD_ (~aLeSD@139.47.114.114) (Ping timeout: 256 seconds)
[20:49:50] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:56:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:57:12] *** Joins: Betal (~Betal@user/betal)
[21:02:29] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:11:18] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[21:12:13] *** Quits: presonic (~presonic@111-22-237-24.gci.net) (Ping timeout: 240 seconds)
[21:12:37] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[21:16:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:18:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:20:01] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[21:20:23] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[21:22:28] *** Joins: Guest40 (~Guest40@host-78-144-121-71.as13285.net)
[21:22:45] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[21:23:00] *** Joins: froggyc (~froggy@2.235.241.212)
[21:27:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:27:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[21:27:49] *** Quits: troller (~p@2a02:6b8:0:51e:247d:133b:f0cd:2843) (Ping timeout: 240 seconds)
[21:28:14] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Quit: leaving)
[21:32:48] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[21:33:50] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[21:34:01] *** Quits: Guest40 (~Guest40@host-78-144-121-71.as13285.net) (Quit: Client closed)
[21:34:02] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:11] *** Joins: froggyc (~froggy@2.235.241.212)
[21:35:38] *** Quits: froggyc (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[21:35:50] *** Joins: froggyc (~froggy@2.235.241.212)
[21:37:57] *** Quits: froggyc (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[21:39:08] <Raziel> is there any decent way to shove constexpr lambdas in a container, considering std::function cannot be constexpr?
[21:39:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:19] *** ChanServ sets mode: +v npaperbot
[21:39:48] <kalven> use a tuple?
[21:40:17] *** Quits: magla (~gelignite@55d44df1.access.ecotel.net) (Quit: Stay safe!)
[21:40:51] *** Joins: froggyc (~froggy@2.235.241.212)
[21:44:21] <Raziel> kalven, any example?
[21:47:10] <kalven> is` argument to be invoked
[21:47:13] <kalven> oops
[21:47:18] <kalven> https://wandbox.org/permlink/a0lCIQdt3qSXnqST
[21:47:34] <kalven> not sure what you actually want to accomplish
[21:48:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:48:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:51:05] <Alipha> Raziel: if the lambdas are captureless, they're convertible to function pointers
[21:51:12] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[21:51:26] <Raziel> Alipha, so using a function pointer rather than std::function could work there, as constexpr
[21:51:27] *** Joins: froggyc (~froggy@2.235.241.212)
[21:53:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5016:201a:4e0f:3d82)
[21:54:24] *** Joins: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[21:54:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[21:55:57] *** Quits: froggyc (~froggy@2.235.241.212) (Client Quit)
[21:56:13] *** Joins: froggyc (~froggy@2.235.241.212)
[21:57:02] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 252 seconds)
[22:06:31] *** Quits: limubs (~Guest31@2001-4dd4-11c2-0-99e-d85a-17ad-fec4.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[22:16:57] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[22:17:09] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[22:17:26] *** Joins: froggyc (~froggy@2.235.241.212)
[22:19:14] <jellie> Hello all
[22:19:21] <jellie> I need some reference/pointer help
[22:19:22] <jellie> https://wandbox.org/permlink/RvXZfZiPwS7zt9sk
[22:19:50] <jellie> I don't understand why L 36-38 don't seem to have an effect
[22:20:08] <jellie> Like I basically have a vector of maps and I want to pick a map at an index and update it
[22:20:13] <jellie> then pick another map etc
[22:20:26] <InPhase> jellie: The question might work better with a working testcase.
[22:20:36] <InPhase> !give jellie testcase
[22:20:37] <nolyc> jellie: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[22:20:47] <imMute> jellie: line 19 makes a copy of each item in the vector.  you probably want "auto &" there
[22:21:29] <jellie> Thanks for that tip imMute
[22:22:33] <imMute> jellie: that's maybe the problem, I didn't study the code very much. just saw "this thing doesn't update" inside a for-loop that uses auto instead of auto&
[22:22:41] *** Joins: proller (~p@80.240.216.69)
[22:22:41] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[22:23:11] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[22:23:12] *** Joins: froggyc (~froggy@2.235.241.212)
[22:23:31] <bpalmer> you're trying to move current_node around, jellie?
[22:23:37] <jellie> No the issue is with a vector
[22:23:41] <bpalmer> but it's a reference; current_node = t.at(...) is calling operator= to mutate it
[22:23:42] <jellie> bpalmer: Yes
[22:23:57] <bpalmer> references are fixed to an object when created.
[22:24:06] <jellie> and can't be updated?
[22:24:09] *** Quits: froggyc (~froggy@2.235.241.212) (Client Quit)
[22:24:27] <imMute> references can't be changed to reference (point at) a different object than the one they were initialized with.
[22:24:27] *** Joins: magla (~gelignite@55d40eb7.access.ecotel.net)
[22:24:43] <jellie> I try to essentially overwrite it it at L 38
[22:24:55] <jellie> imMute: I see
[22:24:59] <jellie> What should I do?
[22:25:10] <jellie> I couldn't get a pointer with &t[<idx>]
[22:25:20] <jellie> Let me try again
[22:27:47] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:31:58] *** Joins: smartin (~Thunderbi@88.135.18.171)
[22:35:01] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Ping timeout: 240 seconds)
[22:35:01] *** Joins: froggyc (~froggy@2.235.241.212)
[22:36:51] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[22:37:57] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[22:42:06] *** Joins: nostar (~nostar@68.51.221.108)
[22:49:30] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[22:56:56] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[22:59:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:03:15] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[23:05:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[23:07:09] <Raziel> Alipha, I dunno if I should bother much with insistence on constexpr anyway, it's not like hashmaps are slow in the first place anyway
[23:11:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ad12:63d3:cdb6:3c28)
[23:14:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:16:50] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:16:51] *** Joins: chozorho (~chozorho@2601:146:300:c30::814d)
[23:18:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:18:44] *** Joins: proller (~p@2a02:6b8:b081:7::1:2f)
[23:20:18] *** Joins: treble (~treble@user/treble)
[23:20:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[23:24:21] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[23:26:47] *** Quits: sereg (~sereg@89.36.78.180) (Remote host closed the connection)
[23:27:10] *** tin- is now known as tin
[23:32:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:37:57] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:39:52] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:40:51] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:41:28] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[23:46:26] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[23:49:56] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 268 seconds)
[23:52:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[23:52:43] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:58:48] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
