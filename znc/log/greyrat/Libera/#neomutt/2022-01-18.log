[00:45:46] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:32:14] *** Joins: gabriel1_ (~gabriel1@37.173.6.111)
[01:34:32] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 240 seconds)
[01:35:18] *** Joins: rsaavedra (~rodrigo@user/rsaavedra)
[02:29:37] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Quit: Oh, so they have Internet on computers now!)
[02:43:08] *** Joins: pekman (~pekman@user/pekman)
[02:55:33] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:31:44] *** Quits: rsaavedra (~rodrigo@user/rsaavedra) (Quit: WeeChat 3.4)
[03:34:25] *** Joins: rsaavedra (~rodrigo@user/rsaavedra)
[03:37:27] *** Quits: rsaavedra (~rodrigo@user/rsaavedra) (Client Quit)
[03:40:27] *** Joins: rsaavedra (~rodrigo@user/rsaavedra)
[03:52:19] *** Joins: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au)
[03:54:02] *** Quits: Pali (~pali@user/pali) (Ping timeout: 240 seconds)
[04:04:14] *** Quits: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au) (Ping timeout: 250 seconds)
[04:04:55] *** Quits: limon (~limon@biber.verj.us) (Ping timeout: 268 seconds)
[04:05:03] *** Quits: Jon (jon@dow.land) (Quit: ZNC - http://znc.in)
[04:05:20] *** Joins: msirabella (~bnc@user/mjsir911)
[04:05:23] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[04:05:45] *** Joins: limon (~limon@biber.verj.us)
[04:06:10] *** Quits: juliank (~juliank@ubuntu/member/juliank) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: M9d0cd7d2[m] (~M9d0cd7d2@2001:470:69fc:105::1:1609) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: mechanic41turk[m (~mechanic4@2001:470:69fc:105::2e73) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: mjsir911 (~bnc@user/mjsir911) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: honza (honza@2600:3c03::f03c:91ff:fe61:4243) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: adray (~araymatri@2001:470:69fc:105::1873) (Ping timeout: 268 seconds)
[04:07:01] *** Quits: flatcap (flatcap@neomutt/flatcap) (Ping timeout: 240 seconds)
[04:08:00] *** Joins: flatcap (flatcap@neomutt/flatcap)
[04:08:25] *** Joins: Jon (jon@dow.land)
[04:08:32] *** Joins: juliank (~juliank@ubuntu/member/juliank)
[04:09:19] *** Joins: honza (~honza@li1276-4.members.linode.com)
[04:15:23] *** Joins: adray (~araymatri@2001:470:69fc:105::1873)
[04:19:49] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[04:22:25] *** Joins: mechanic41turk[m (~mechanic4@2001:470:69fc:105::2e73)
[04:23:55] *** Joins: M9d0cd7d2[m] (~M9d0cd7d2@2001:470:69fc:105::1:1609)
[04:24:36] *** Quits: elshize (elshize@gateway/vpn/protonvpn/elshize) (Ping timeout: 250 seconds)
[04:26:28] *** Joins: elshize (~elshize@70.107.91.44)
[04:30:07] *** Joins: dcpurton (~dcpurton@1.124.107.141)
[04:30:14] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:46:49] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:47:17] *** Quits: neo-bot (~neo-bot@flatcap.org) (Ping timeout: 240 seconds)
[04:47:33] *** Joins: neo-bot (~neo-bot@flatcap.org)
[05:20:13] *** Quits: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[05:21:07] *** Joins: haniaF (~haniaF@83.24.207.85.ipv4.supernova.orange.pl)
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:34:56] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:56] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:56] *** Joins: maetthew (~maetthew@user/maetthew)
[05:41:12] *** Quits: ericam (~ericam@pool-98-113-135-30.nycmny.fios.verizon.net) (Quit: WeeChat 3.4)
[05:44:59] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 256 seconds)
[05:45:38] *** Joins: dob1 (~dob1@user/dob1)
[05:54:11] *** Quits: gabriel1_ (~gabriel1@37.173.6.111) (Remote host closed the connection)
[06:25:32] *** Quits: pekman (~pekman@user/pekman) (Quit: pekman)
[07:05:02] *** Quits: dcpurton (~dcpurton@1.124.107.141) (Ping timeout: 240 seconds)
[07:32:17] *** Joins: dcpurton (~dcpurton@1.124.107.141)
[07:36:46] *** Joins: vysn (~vysn@user/vysn)
[09:18:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:39:05] *** Quits: sbach (~sbach@user/sbach) (Read error: Connection reset by peer)
[09:41:40] *** Joins: sbach (~sbach@user/sbach)
[10:00:32] *** Joins: kzak (~kzak@nat-37.starnet.cz)
[10:32:26] *** Quits: rsaavedra (~rodrigo@user/rsaavedra) (Quit: WeeChat 3.4)
[10:47:59] *** Quits: dcpurton (~dcpurton@1.124.107.141) (Ping timeout: 256 seconds)
[11:12:19] <gahr> morning
[11:35:13] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:51:19] *** Joins: reset (~reset@user/reset)
[12:03:02] *** Quits: weirdsmiley (~weirdsmil@203.122.10.222) (Ping timeout: 240 seconds)
[12:07:27] *** Joins: weirdsmiley (~weirdsmil@203.122.10.222)
[12:30:09] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (Quit: You have been kicked for being idle)
[12:34:57] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Quit: Easy as 3.14159265358979323846...)
[12:38:36] *** Joins: Pali (~pali@user/pali)
[12:50:22] *** Joins: vysn (~vysn@user/vysn)
[12:54:00] *** Joins: plastico (~plastico@neomutt/plastico)
[13:00:30] *** Quits: k33p3r (kexik@2605:6400:c847:1948::8491) (Quit: ZNC - https://znc.in)
[13:08:47] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[13:10:46] *** Joins: ueberall (ueberall_l@user/ueberall)
[13:52:08] <flatcap> morning all
[13:52:30] <gahr> hi flatcap 
[13:53:00] <flatcap> hi gahr 
[14:01:18] <flatcap> I had another look at #3189
[14:01:19] <neo-bot> PR by @artagnon "macos_keychain: introduce a way to store credentials in Keychain": https://github.com/neomutt/neomutt/pull/3189
[14:01:47] <flatcap> I'm a little concerned by all the asserts...
[14:02:14] <flatcap> I can't test it, but if the user has an enormous password in their keychain, won't that kill neomutt?
[14:18:07] <gahr> yeah, it should emit an error
[14:18:55] <flatcap> good
[14:19:17] <gahr> or we just heap-allocate the members in ConnAccount
[14:20:08] <flatcap> er... the CA is owned by the Account
[14:20:36] <flatcap> allocating them on the heap is a good idea, but more work
[14:21:27] <flatcap> (probably not difficult, but separate PR)
[14:23:06] <gahr> we currently truncate 
[14:23:37] <gahr> https://github.com/neomutt/neomutt/blob/b838ccf8d45afac7b3e6c7b37e74c714c4aefe9d/conn/connaccount.c#L70
[14:23:58] <gahr> perhaps we can do the same thing here
[14:25:15] <flatcap> hehe, that'd be a tricky one to debug
[14:25:55] <gahr> yeah, I just say, for consistency, we should just do the same thing
[14:26:04] <gahr> then we can move to heap-allocate the whole user/pass everywhere
[14:26:13] <flatcap> sounds good
[14:31:07] <gahr> did the night bring advise on @date@ ?
[14:32:31] <flatcap> not yet.  Monday night's quiz night
[14:32:43] <gahr> :)
[14:33:06] <flatcap> I'm still leaning towards %h because the changes are simpler than messing with the pattern code
[14:38:42] <gahr> are they?
[14:43:40] * flatcap looks ...
[14:44:38] <flatcap> eat_date() - https://github.com/neomutt/neomutt/blob/master/pattern/compile.c#L976
[14:44:49] <flatcap> eval_date_minmax() - https://github.com/neomutt/neomutt/blob/master/pattern/compile.c#L499
[14:45:48] <gahr> yep
[14:46:07] <flatcap> we'd have to turn "today" into a range (1642464000, 1642550400)
[14:46:15] <jindraj_> gahr: I've noticed the keychain comment of yours. I can test it later today if you still want to.
[14:46:24] <gahr> jindraj_: thanks
[14:47:39] <gahr> flatcap: or use 1D for today and 1d for 24 h
[14:47:51] <flatcap> hmm... here's a problem.  the ranges need to be re-evaluated with time
[14:49:01] <gahr> get_offset()
[14:49:30] <gahr> can we use D to adjust hours?
[14:49:57] <flatcap> we can't compile the pattern when we configure index-format-hook...
[14:50:02] *** Joins: dcpurton (~dcpurton@1.124.107.202)
[14:51:04] <flatcap> we'd need to store the "meaning" -- "less than 4 hours", then recompile the regex each time the index is refreshed
[14:51:08] <flatcap> I _think_
[14:51:13] <gahr> but that's already an issue
[14:51:55] <flatcap> yes
[14:53:53] <gahr> wait
[14:54:33] <gahr> nothing.
[14:55:36] <artagnon> flatcap: Each application writes its own unique value into keychain.
[14:56:05] <artagnon> So, what’s written by neomutt is retrieved by neomutt.
[14:56:35] <gahr> flatcap: we could recompile hook->regex.pattern in mutt_idxfmt_hook 
[14:56:54] <gahr> once per hour or so..
[14:56:59] <flatcap> ah MUTT_PC_PATTERN_DYNAMIC
[14:57:07] <artagnon> Unless the user manually modifies the keychain entry that neomutt has written with a huge username/password, neomutt won’t crash.
[14:57:16] <gahr> ahhh
[14:57:32] <gahr> phew
[14:58:06] <gahr> artagnon: oh, so I have to enter the password from neomutt once, and it'll be found in the keychain the next time?
[14:58:50] <flatcap> artagnon: but I presume other tools could write a huge password into the keychain
[14:59:15] <artagnon> gahr: yes.
[14:59:32] <gahr> cool, that works!
[14:59:39] <flatcap> woo!
[14:59:47] <artagnon> flatcap: nobody else has permissions to modify the neomutt entry.
[15:00:16] <gahr> unless you change that in the keychain access
[15:00:42] <artagnon> Right. kSecurityDefault.
[15:00:58] <flatcap> ah, ok
[15:02:12] <artagnon> By default, nobody is allowed to read another application’s password! Think about what a security nightmare that would be!
[15:02:39] <artagnon> Much less, write.
[15:02:51] <gahr> is the application identified by name?
[15:02:56] <flatcap> how does neomutt prove that it's neomutt?
[15:03:30] <flatcap> is /bin/neomutt == /usr/local/bin/neomutt?
[15:03:33] <artagnon> No. There’s a certain binary signature.
[15:03:55] <artagnon> If you rebuild neomutt, it will ask for permissions again.
[15:04:19] <flatcap> hehe, your life must be a nightmare of permissions boxes :-)
[15:04:33] <gahr> yup, just checked
[15:04:39] <gahr> rebuilding asks me for confirmation
[15:04:59] <artagnon> Nah, macOS has dove everything beautifully and seamlessly.
[15:05:02] <flatcap> it makes sense, but not for developers
[15:05:05] <gahr> now I also get the message "Did you modify the keychain item by hand?"
[15:05:26] <gahr> still, I guess I wouldn't crash
[15:06:46] <flatcap> my "message", you mean assert?
[15:06:50] <artagnon> People rarely go into keychain to modify individual passwords. They go there to retrieve passwords, when autofill fails.
[15:07:04] <flatcap> ok
[15:07:06] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:07:11] <gahr> yeah, I get what that string means :)
[15:07:55] <gahr> still, I would emit an error instead of crashing
[15:08:03] <artagnon> Okay.
[15:08:13] <gahr> rule of thumb: crashes are for programmers' errors
[15:08:30] <gahr> like, you pass a null when you shouldn't
[15:08:33] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:08:39] <artagnon> I can change it to mutt_error.
[15:09:24] <flatcap> lovely
[15:09:57] <artagnon> I was thinking of turning keychain on by default on macOS. I don’t know why we’d need a config var.
[15:10:31] <artagnon> In general, I’m against unnecessary config bloat.
[15:10:59] <artagnon> I don’t know who on macOS wouldn’t want to use keychain.
[15:12:13] <artagnon> Please test thoroughly though, before we decide to turn it on by default.
[15:12:13] <flatcap> on by default: great.  config: I'll leave the you mac users to decide
[15:13:09] <dcpurton> Risky question… Does anyone ever use a GUI MUA that can paste images inline and send PGP/MIME signed emails? I'm interested is having a look at how other MUAs contruct such messages. Looking to for someone to send a simple test message to a couple of my addresses.
[15:13:19] <artagnon> Fwiw, Alpine and git use keychain by default.
[15:13:33] <gahr> artagnon: I think that makes sense
[15:13:47] <gahr> perhaps I'd warn "Password saved in keychain"
[15:14:15] <dcpurton> by paste images inline I mean embedded images in an HTML part
[15:14:27] <artagnon> Unnecessary, I think, since it pops up for permissions anyway.
[15:14:59] <gahr> it didn't pop up when I first stored the password in the keychain
[15:15:02] <flatcap> dcpurton: I could try to ressurrect my RoundCube installation
[15:15:32] <gahr> perhaps because I had Keychain Access open?
[15:15:54] <gahr> dcpurton: I don't have pgp setup on roundcube, sorry
[15:15:59] <bookworm> thunderbird is the usual MUA in GUI linux land I think
[15:16:26] <bookworm> and it can do gpg by now
[15:16:33] <dcpurton> I do have a proton mail account, but it creates an email with a really weird structure and it's the only thing I have that does PGP and I can not for the life of me construct a message that it can understand
[15:16:35] <bookworm> (as in, no addons needed)
[15:17:04] <artagnon> gahr: Hmm, unsure. Can you try it just once more?
[15:17:20] <gahr> I closed Keychain Access, not sure if I need to let some time pass
[15:17:24] *** Joins: strajder (~strajder@user/strajder)
[15:17:39] <gahr> but sure, I think I'll go to lunch and try again later
[15:17:48] <dcpurton> bookworm, oh, maybe I do have it installed. But I don't think set up (just asking in case someone had something ready to go). But I realise this is #neomut…
[15:17:54] <artagnon> Sure, no rush.
[15:17:59] <dcpurton> And obviously I don't have somethign ready to go!
[15:18:40] <bookworm> it's thunderbird... chances are it's a next, next, next wizard kind of thing so just set it up
[15:19:18] <artagnon> I’m thinking of dropping the config flag entirely: why compile without macoskeychain at all? Compile with it on macOS, and without it on other systems.
[15:20:06] <bookworm> cross compilation might get tedious if you don't make it optional, although whether that matters is a different story
[15:20:42] <artagnon> Why would anyone need —disable-macoskeychain? It doesn’t introduce any extra deps anyway.
[15:20:43] <bookworm> or maybe that's a wrong statement and any cross compiler has the ability to compile that in
[15:21:28] <artagnon> bookworm: Hm, cross-compiling for Linux on macOS?
[15:21:43] <bookworm> that or the other way around
[15:21:47] <artagnon> You can’t do it.
[15:22:00] <artagnon> You need security.h.
[15:22:43] <bookworm> I see
[15:23:44] <artagnon> … but yeah, you raise a good point. Maybe we should err on the side of caution, and keep —disable-macoskeychain.
[15:24:10] <flatcap> yeah, let's leave it in for now
[15:24:51] <flatcap> if you're developing and building neomutt a lot, you might want to be able to turn it off
[15:25:19] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Quit: WeeChat 3.4)
[15:25:28] *** Joins: sogens (~Sogens@gateway/vpn/pia/sogens)
[15:25:32] <artagnon> Right.
[15:25:39] <artagnon> Makes sense.
[15:27:13] <artagnon> I’ll make the mutt_error() change and re-submit soon.
[15:27:27] <artagnon> How’s the %h thing going?
[15:27:38] <flatcap> cool
[15:27:42] <artagnon> Settled on something yet?
[15:27:55] <flatcap> still thinking.  I was busy last night
[15:28:15] <artagnon> Okay, np. No rush.
[15:30:38] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Quit: WeeChat 3.4)
[15:30:50] *** Joins: sogens (~Sogens@gateway/vpn/pia/sogens)
[15:39:41] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[15:43:54] <dcpurton> hmph, Thunderbird does worse than my code.
[15:46:43] <dcpurton> Perhaps clients are just buggy when it comes to reading PGP/MIME signed emails
[15:47:06] <dcpurton> I would have expected more from the Proton Mail Android App though
[15:47:40] <flatcap> :-(
[16:14:47] <gahr> artagnon: confirmed, it doesn't ask before storing into keychain
[16:15:10] <gahr> < artagnon> I’m thinking of dropping the config flag entirely <-- my point exactly :)
[16:17:56] <flatcap> gahr: please can you tweak the build for the keychain to default to on and still check for __APPLE__
[16:18:41] <gahr> well, I'd just add the flag if on a mac
[16:19:50] <gahr> not sure.. why would you ever want to compile it out?
[16:20:00] <flatcap> i think a --disable option would be useful for developers who build neomutt frequently
[16:20:05] <gahr> why not make its *use* optional, instead of its *availability* ?
[16:20:10] <gahr> why?
[16:20:24] <gahr> oh, to avoid *using* it :)
[16:20:28] <flatcap> yes
[16:20:40] <gahr> I'm in favour of a config option
[16:21:02] <flatcap> ok, config's fine
[16:21:25] <gahr> btw, I would like to bump the freebsd version in cirrus
[16:21:41] <flatcap> go for it
[16:21:47] <gahr> I pushed the fix for rocksdb, but I'm not sure how often packages get rebuilt
[16:22:00] <flatcap> ah, ok
[16:23:50] <flatcap> oh, here's something C-technical for you...
[16:24:13] <flatcap> coverity was complaining about a for loop (running on some recently allocated memory)
[16:24:33] <flatcap> for (int i = 0; i < num; i++)
[16:24:43] <flatcap>   mem[i] = 123;
[16:25:28] <flatcap> it complained that the upper bound for 'i' was 'num'
[16:25:44] <flatcap> and that mem[num] would overrun
[16:26:02] <gahr> is num an int?
[16:26:36] <flatcap> I'll check.  num was small, finite
[16:28:19] <flatcap> short
[16:28:40] <gahr> do you have a link to the report on coverity?
[16:29:03] * flatcap looks ...
[16:29:23] <gahr> oh let me check my emails, I might have it
[16:29:38] <flatcap> I fixed it in one case by just memset() the block
[16:29:51] <flatcap> the issue was probably fairly old
[16:30:01] <gahr> oh
[16:30:33] <gahr> so you memset mem, mem+i-1, and it stopped complaining?
[16:30:40] <gahr> sorry s/i/num/
[16:31:43] <flatcap> yeah
[16:31:52] <gahr> coverity...
[16:32:00] <gahr> I wouldn't lose my sleep over it
[16:32:05] <flatcap> yeah :-)
[16:32:25] <flatcap> I just worried there might be some fundamental of C that I was overlooking
[16:32:52] <gahr> I don't believe in such a thing
[16:32:57] <gahr> :)
[16:33:04] <gahr> did you turn cirrus off by chance?
[16:33:52] <gahr> ah no, it won't run on drafts
[16:34:12] <flatcap> :-)
[16:37:04] <gahr> I'll keep that PR and run it when rocksdb is back
[16:37:41] <flatcap> ok
[16:42:23] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[16:58:41] <artagnon> gahr: Okay, but it does ask when retrieving the key from the keychain, right?
[16:59:29] <artagnon> Neither git nor alpine “warn” about something stored in keychain. As far as I know, no program on macOS does.
[16:59:46] <artagnon> It’s standard and expected behavior.
[17:01:37] <artagnon> I think compile-flag bloat is a lot better than config bloat. Besides, what if the person doesn’t have dev tools installed on macOS or something? I’m not sure if Security.h would be missing, but I’m not willing to bet on it.
[17:04:34] <artagnon> I _really_ dislike config-bloat. For every extra config variable, testing burden increases exponentially, as every combination of config variables need to be tested.
[17:05:59] <artagnon> Besides, documenting which config vars are incompatible with which others is a pain.
[17:06:50] <bremner> doesn't every combination of build variables also need to be tested?
[17:07:07] <artagnon> Yes, they do.
[17:07:36] <artagnon> Fortunately, with a good build system like CMake, this can be automated.
[17:08:02] <artagnon> You can even specify which ones make sense together. Nothing to document.
[17:21:03] <artagnon> On a less theoretical note, introducing a config var that’s os-dependent is a bad idea, imo. I can imagine that people check their .neomuttrc into git, and share them across machines.
[17:23:50] <flatcap> good point
[17:24:18] <flatcap> you _could_ #ifdef either DT_BOOL or DT_DEPRECATED, which would be silently accepted
[17:26:10] <artagnon> Why do something so ugly, when a good build system is perfectly capable of handling this elegantly, and testing it in an automated fashion?
[17:28:07] <flatcap> handling _what_ elegantly?  os-dependent config?
[17:29:37] <artagnon> Anything to do with differences between OSes.
[17:30:13] *** khardix is now known as jstanek
[17:30:23] <artagnon> We’ll rewrite it in CMake one day, for sure :)
[17:30:43] <flatcap> right :-)
[17:33:17] *** Joins: just1602_ (~just1602@199.58.80.143)
[17:33:17] *** Quits: just1602 (~just1602@user/just1602) (Read error: Connection reset by peer)
[17:33:57] <artagnon> As a rule of thumb: software should completely platform-agnostic, and it should do what makes most sense on every platform seamlessly, when built: all the differences should be detected and handled by the build system.
[17:34:27] *** Quits: dcpurton (~dcpurton@1.124.107.202) (Ping timeout: 256 seconds)
[17:43:29] *** Joins: just1602 (~just1602@199.58.80.143)
[17:43:29] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[17:50:39] *** Joins: just1602_ (~just1602@199.58.80.143)
[17:50:39] *** Quits: just1602 (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[17:59:50] *** Joins: just1602 (~just1602@199.58.80.143)
[17:59:51] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[18:01:45] <gahr> artagnon: it never asks
[18:02:21] <gahr> 13:34 < artagnon> I _really_ dislike config-bloat. For every extra config variable, testing burden increases exponentially, as every combination of config variables need to be tested. <-- this is true for compile-time options, too, if you want to be thorough
[18:03:31] <gahr> artagnon: your rule of thumb resonates to me, for something like Outlook. This is neomutt, it is developer friendly. It is for people who want to customize their mail client
[18:03:38] <gahr> it's a terminal-based app after all
[18:03:44] <gahr> my grandma won't use it
[18:04:29] <artagnon> True, but we're talking about devs on macOS :\
[18:05:11] <artagnon> I'm talking about software like git and zsh.
[18:05:35] <gahr> ok so I suggested to add a warning "your password has been stored in the keychain", you said no need because macos will warn, except it doesn't
[18:05:50] <gahr> so where are we now? Do you think it's ok to at least inform the user?
[18:06:26] <gahr> if we add keychain support unconditionally on macos and you can't choose to turn it off, then at least let's inform the users
[18:06:46] <gahr> (wild guess: 95% of our users on macos install neomutt via brew and won't recompile it)
[18:08:39] <artagnon> Right, they'll get it via brew.
[18:09:06] <artagnon> It should pop up a warning with every new version of neomutt from brew :\
[18:09:20] <artagnon> Not a warning, but ask for permissions.
[18:09:41] <gahr> it doesn't
[18:09:50] <gahr> at least, I can't get macos to ask me to store the password
[18:10:08] <artagnon> So, it never asks for permissions to retrieve the password?
[18:10:08] <gahr> also, question, we don't handle changes of password
[18:10:10] <gahr> it just fails to login
[18:10:20] <gahr> is that something we might be wanting to look into?
[18:10:25] <artagnon> Yes, that's true.
[18:10:38] <artagnon> I agree that it's a possible enhacement.
[18:10:47] <gahr> it only asks me when I recompile neomutt and the application that accesses the keychain changes
[18:10:55] <gahr> but it won't ask to store the password the first time
[18:10:58] <gahr> nor to retrieve it
[18:11:38] <artagnon> Well, the new version of neomutt will be retrieved via brew (a re-compile), and ask people who update, right?
[18:12:01] <gahr> no, because there won't be a password yet
[18:12:20] <gahr> so first the new version will start storing the password, then, at the second upgrade, you'll get a warning
[18:12:23] *** Joins: k33p3r (kexik@2605:6400:c847:1948::8491)
[18:12:50] <artagnon> Oh, I see. This is a bit strange, I must admit.
[18:13:38] <artagnon> Maybe we can add a friendly message: "Password stored in Keychain. It will be used for future logins."
[18:14:18] <gahr> that's all I'm asking for :)
[18:14:23] <artagnon> Okay, no problem.
[18:14:34] <artagnon> I was a bit turned off when you phrased it as "warning".
[18:15:48] <gahr> mutt_warning :)
[18:16:05] <artagnon> mutt_message?
[18:16:53] <gahr> if you're taking the questions that come up, sure
[18:17:03] <gahr> I just don't want to introduce this thing unnoticed
[18:17:08] <gahr> it has security implications
[18:17:19] <artagnon> Makes sense.
[18:17:32] <gahr> also, possibility to turn it on/off run-time? 
[18:18:04] <artagnon> I'm not too happy about having an os-specific config var :\
[18:18:23] <artagnon> Even if it no-ops on non-macOS.
[18:19:32] <artagnon> I don't mind something like credential_backend = [file | gpg | keychain].
[18:19:38] <artagnon> ... but we have to document it.
[18:20:33] <gahr> I'm looking at precedents for os-specific things
[18:20:36] <flatcap> there's always the neomutt `ifdef` command
[18:20:59] <flatcap> ifdef enable_macos_keychain set emk=yes
[18:22:21] <gahr> true
[18:22:44] <artagnon> I've pushed everything minus the config var change for now.
[18:23:00] <gahr> ok I'm pretty sure we have autocrypt settings that only work if you have autocrypt compiled in
[18:23:11] <gahr> not a big deal, are they?
[18:23:26] <artagnon> Will they error out if autocrypt isn't compiled in?
[18:24:03] <flatcap> yes, but so will every other compiled-out feature
[18:24:12] <gahr> yeah
[18:24:37] <gahr> I think I'm more and more in favour of having both a compile-time switch and a run-time switch
[18:24:53] <artagnon> I'm definitely in favor of the compile-time switch.
[18:25:04] <artagnon> I've turned it on by default in auto.def.
[18:25:21] <artagnon> ... but I'm not sure it's the most elegant way to do it.
[18:26:02] <artagnon> For instance, ./compile --macoskeychain will silently drop macoskeychain on non-macOS.
[18:27:17] <artagnon> Okay, can  you give me a practical usecase of a user not using keychain?
[18:27:30] <artagnon> They'd put their user/pass in the config, right?
[18:27:47] <artagnon> In which case, I've coded it so that keychain never gets hit anyway.
[18:28:15] <gahr> yep, that was a good design decision
[18:28:25] <artagnon> Unless the user wants to manually enter user/pass everytime on curses (I can't imagine why), I don't see the practical need for a runtime switch.
[18:29:12] <artagnon> Is there some other credential store I'm not aware of?
[18:29:29] <artagnon> AFAIK, neomutt can't write creds to .neomuttrc anyway.
[18:30:17] <artagnon> If not 100% of existing users, a vast majority of them, would already have a user/pass in the config file.
[18:30:37] <artagnon> In order to activate macoskeychain in the next version, they have to *remove* the user/pass in the config.
[18:31:06] <gahr> we can use build_os in auto.def to figure whether it's a mac and turn it off/on by default based on that
[18:31:53] <gahr> artagnon: I might have rarely used accounts for which I don't store a password
[18:32:03] <gahr> or I might access test accounts one off
[18:32:14] <gahr> I don't necessarily want to store all password I type in
[18:32:59] <artagnon> Hm, what is your view of keychain?
[18:33:20] <artagnon> It stores passwords on all websites while browsing the internet on a macOS, by default.
[18:33:29] <artagnon> Even websites you've only visited once.
[18:34:25] <bremner> my view is the less I have to think about macOS, the better :P
[18:35:23] <gahr> artagnon: won't it ask you if you want the password to be stored?
[18:36:06] <gahr> I have very few Internet entries in my keychain access
[18:36:13] <artagnon> Nope, it automatically fills in the password in the password field in Safari.
[18:36:24] <gahr> oh, that's because I don't use safari
[18:36:25] <artagnon> And it stores that transparently.
[18:36:51] <gahr> I'm more, if you want to use the feature, add a config once and forget all about it
[18:36:58] <gahr> but I wouldn't have the feature by default
[18:37:20] <gahr> if we're building a new project, you can make default decisions, but this would be a POLA violation in my opinion
[18:38:39] <bremner> Principle of Least Arsing about?
[18:38:56] <bremner> (honest question, I don't know this acronym)
[18:39:08] <artagnon> Hm, it's a cultural difference. Devs on macOS care as little as possible about such things.
[18:39:40] <gahr> least astonishment
[18:39:59] <gahr> principle of prudence applies, too
[18:40:04] <bremner> ah, OK. I am used to "surprise", but meaning is the same I guess
[18:40:47] <artagnon> On macOS, putting passwords anywhere but keychain is a POLA ;)
[18:40:57] <artagnon> violation of*
[18:41:41] <artagnon> I remember exactly one password: and that's the password to my Apple ID.
[18:41:48] <artagnon> The rest is in keychain.
[18:42:44] <artagnon> IME, the situation of other macOS users/devs is similar.
[18:43:53] <gahr> artagnon: I'm talking about existing neomutt users
[18:45:13] <gahr> so you're adding a new feature, which might result in user passwords being stored whereas previously they weren't. I don't think it's unreasonable to ask for it to be under control of a config switch, so the user can decide
[18:45:47] <capn> Can you specify the command to retrieve the password in the conf file similar to how we do for `pass` or `gpg`? (I'm not a mac user)
[18:45:51] <capn> eg: set imap_pass=`security find-generic-password -w -s 'neomutt pass' -a 'user'`
[18:46:15] <capn> Found here: https://scriptingosx.com/2021/04/get-password-from-keychain-in-shell-scripts/
[18:46:48] <gahr> ah cool
[18:46:56] <gahr> we might not need the feature at all, after all :)
[18:47:13] <artagnon> For what it's worth, even the git community didn't do this when osxkeychain was introduced, and they're really old-school.
[18:47:54] <artagnon> I'm just going by prior art here.
[18:48:31] <gahr> what if a neomutt developer went to git and asked them to do how neomutt has always done. By prior art.
[18:48:41] <gahr> I think I raised my concerns loudly enough
[18:48:59] <gahr> no point in rehearsing our POVs any further I guess
[18:49:36] <artagnon> Nope, no point at all. I'll get around to it sometime.
[18:52:01] <gahr> I think the cleanest thing to do would be to remove the auto.def thingie (why *not* have it when you could?) and just add a run-time config, so you can *choose* not to have it even if you could
[18:53:13] <gahr> then in the next release we could advertise the feature. MacOS users will set the config option, and everybody will be happy
[18:53:53] <gahr> and if you're developing or anyway want to enter your passwords manually each time, you can just turn it off temporarily
[18:54:13] <gahr> even via a command line ./neomutt -e "set nomacoskeychain"
[18:54:14] <artagnon> Like I said, I'll get around to it sometime. Probably drift away from this community -- it's a bit too conservative for my tastes.
[18:54:33] <gahr> it's not the community, it's probably just me
[18:55:49] <gahr> but you have my point here, and you have flatcap who agreed with my proposal here: https://github.com/neomutt/neomutt/pull/3189#issuecomment-1015178338
[18:55:49] *** Quits: just1602 (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[18:56:02] *** Joins: just1602 (~just1602@199.58.80.143)
[18:56:30] *** Quits: just1602 (~just1602@199.58.80.143) (Changing host)
[18:56:30] *** Joins: just1602 (~just1602@user/just1602)
[19:03:20] <flatcap> artagnon: I'm sorry you feel that way...
[19:03:57] <flatcap> but gahr and I are running a project with a lot of users and we have to be cautious
[19:04:21] <flatcap> it only takes a few poor choices to undermine a community that we've been building for years
[19:05:12] <flatcap> I agree that gahr has been playing devil's advocate a bit hard :-)
[19:05:46] <flatcap> but I have spent a considerable amount of the last week helping you to achieve your goals
[19:07:12] <flatcap> you're new to the project and you've been pushing pretty hard...
[19:07:12] *** Quits: just1602 (~just1602@user/just1602) (Read error: Connection reset by peer)
[19:07:13] *** Joins: just1602_ (~just1602@199.58.80.143)
[19:07:51] <artagnon> Yes flatcap, and I appreciate it. It's just that fighting like this really turns my mood sour :\
[19:08:01] <flatcap> I'd like to keep your skills and enthusiams, but you may need to accept that some decisions may not go your way
[19:09:05] <flatcap> that's partly IRC's fault.  discussions over text lose a lot of subtlety
[19:09:13] <gahr> I totally second that, although I'm not as good as flatcap at communicating
[19:09:52] <gahr> I do welcome your proposals and your will to help out and get your hands dirty with the code, I do appreciate that a lot!
[19:10:06] <artagnon> I don't expect all decisions to go my way, flatcap. ... but I do expect to maintain a cordial and friendly conversation.
[19:10:20] <flatcap> of course
[19:11:19] <flatcap> unrelated to this conversation, I've just decided on the date thing :-)
[19:12:05] <flatcap> it needs some tweaks to the string handling, because translation plurals can be tricky
[19:12:34] <flatcap> I'll find some examples
[19:12:41] <gahr> ITYM < 4w ?
[19:12:46] <gahr> instead of < 8W ?
[19:13:22] <gahr> or you'd never hit "1 month ago"
[19:14:37] <flatcap> er, yes...
[19:15:04] <flatcap> I put in the single/plural months because the translations might be needed
[19:15:32] <flatcap> as for the 4w vs 8w -- I was thinking what timespans a user might find meaningful
[19:15:58] <flatcap> 6 weeks ago conveys _slightly_ more info than a month ago
[19:16:35] <gahr> I see
[19:17:50] <flatcap> here's a complicated Serbian translation where there isn't a singular: https://github.com/neomutt/neomutt/blob/master/po/sr.po#L359-L365
[19:17:54] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Remote host closed the connection)
[19:17:54] *** Quits: jstanek (022d7844b9@sourcehut/user/khardix) (Remote host closed the connection)
[19:17:54] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (Remote host closed the connection)
[19:17:54] *** Quits: ninjin (e5f30034cf@user/ninjin) (Remote host closed the connection)
[19:18:28] *** Joins: ninjin (e5f30034cf@user/ninjin)
[19:18:37] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[19:18:42] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:18:44] *** Joins: jstanek (022d7844b9@sourcehut/user/khardix)
[19:31:50] * flatcap settles back to the Attach API
[19:44:56] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[19:45:25] *** Joins: just1602_ (~just1602@199.58.80.143)
[20:01:28] *** Quits: polve (~polve@user/polve) (Ping timeout: 250 seconds)
[20:01:28] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[20:01:36] *** Joins: just1602_ (~just1602@199.58.80.143)
[20:01:59] *** Joins: nyah (~nyah@94.6.71.219)
[20:14:44] *** Joins: polve (~polve@user/polve)
[20:21:09] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[20:21:46] *** Joins: just1602_ (~just1602@199.58.80.143)
[20:27:37] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[20:27:58] *** Joins: just1602_ (~just1602@199.58.80.143)
[20:29:37] *** Joins: rgrinberg (~textual@187.223.115.174)
[20:38:12] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:38:31] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[20:45:03] *** Joins: kalebris_ (~kalebris@84-236-12-125.pool.digikabel.hu)
[20:45:59] *** Quits: kalebris| (~kalebris@94-21-127-208.pool.digikabel.hu) (Ping timeout: 256 seconds)
[20:55:47] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[20:56:07] *** Joins: just1602_ (~just1602@199.58.80.143)
[21:06:19] *** Joins: just1602 (~just1602@199.58.80.143)
[21:06:19] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[21:08:30] *** Joins: just1602_ (~just1602@199.58.80.143)
[21:08:30] *** Quits: just1602 (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[21:27:27] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[21:27:41] *** Joins: just1602_ (~just1602@199.58.80.143)
[21:30:45] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[21:30:51] *** Joins: just1602_ (~just1602@199.58.80.143)
[21:34:02] *** Quits: weirdsmiley (~weirdsmil@203.122.10.222) (Ping timeout: 240 seconds)
[21:35:50] *** Joins: weirdsmiley (~weirdsmil@203.122.10.222)
[21:44:02] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[21:46:53] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[21:55:50] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Read error: Connection reset by peer)
[21:56:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a)
[22:17:39] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Ping timeout: 268 seconds)
[22:19:02] *** Joins: sogens (~Sogens@gateway/vpn/pia/sogens)
[22:19:26] *** Joins: gabriel1_ (~gabriel1@37.164.212.139)
[22:22:09] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[22:24:35] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Ping timeout: 256 seconds)
[22:26:16] *** Joins: sogens (~Sogens@gateway/vpn/pia/sogens)
[22:30:32] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Ping timeout: 240 seconds)
[22:32:37] *** Joins: sogens (~Sogens@gateway/vpn/pia/sogens)
[22:37:27] *** Quits: sogens (~Sogens@gateway/vpn/pia/sogens) (Ping timeout: 256 seconds)
[22:38:56] *** Joins: sogens (~Sogens@pa49-182-138-25.pa.qld.optusnet.com.au)
[22:40:10] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e402:caf0:4534:e84a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:46:02] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Ping timeout: 240 seconds)
[22:47:49] *** Quits: sogens (~Sogens@pa49-182-138-25.pa.qld.optusnet.com.au) (Quit: WeeChat 3.4)
[22:47:49] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[22:48:01] *** Joins: just1602_ (~just1602@199.58.80.143)
[22:50:00] *** Joins: sogens (~Sogens@pa49-182-138-25.pa.qld.optusnet.com.au)
[22:51:50] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[22:55:53] *** Quits: sogens (~Sogens@pa49-182-138-25.pa.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[22:57:19] *** Joins: sogens (~Sogens@23.81.114.219)
[22:58:21] *** Joins: strajder (~strajder@user/strajder)
[23:21:17] *** drocan_ is now known as drocan
[23:45:13] *** Joins: just1602 (~just1602@199.58.80.143)
[23:45:13] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
