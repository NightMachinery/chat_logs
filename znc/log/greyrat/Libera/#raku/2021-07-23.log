[00:40:50] *** Joins: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net)
[00:41:38] *** Quits: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net) (Client Quit)
[00:43:22] *** Joins: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net)
[00:45:16] *** Joins: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779)
[00:46:17] <thundergnat> m: use lib ‘data/all-modules/github/thundergnat/Sort-Naturally’; use Sort::Naturally; say <1 1.1 1.10 2 2.1 2.3 2.30 4.3 4.10>.sort(&naturally);
[00:46:18] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find Sort::Naturally in:␤    file#/home/camelia/data/all-modules/github/thundergnat/Sort-Naturally␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤…»
[00:46:32] <thundergnat> bummer
[00:47:09] <thundergnat> locally: (1 1.1 1.10 2 2.1 2.3 2.30 4.3 4.10)
[00:48:09] <Geth> ¦ doc: 0429a0b0fe | Coke++ | xt/pws/code.pws
[00:48:09] <Geth> ¦ doc: new word
[00:48:09] <Geth> ¦ doc: 
[00:48:09] <Geth> ¦ doc: from unicode char name
[00:48:09] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0429a0b0fe
[00:56:59] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[01:11:15] <tbrowder> mykhal: excellent observation!
[01:11:50] <tbrowder> enabling MasterDuke to win the golfing prize me thinks
[01:18:51] <tbrowder> i did manage to get a fairly small sub using split, defined, <=>, and the ternary operator, but you folks (esp. mykhal and MasterDuke) really know Raku. THANKS
[01:27:08] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[01:29:39] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[01:30:00] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[01:30:09] <melezhik> how can I create a class with a following constructor: `my $a = Foo.new(1)` ?
[01:31:02] <melezhik> m: class Node {  submethod BUILD (Int $data) }; Node.new(1)
[01:31:02] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3ass Node {  submethod BUILD (Int $data) 7⏏5}; Node.new(1)␤»
[01:31:29] <moon-child> that's an unfortunate truncation
[01:31:30] <melezhik> m: class Node {  submethod BUILD (Int $data) { ... } }; Node.new(1)
[01:31:31] <camelia> rakudo-moar b4d33982a: OUTPUT: «Default constructor for 'Node' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»
[01:32:28] <melezhik> `«Default constructor for 'Node' only takes named arguments` basically I need to change this ...
[01:32:53] <MasterDuke> create your own new?
[01:33:12] <melezhik> m: class Node {  submethod new (Int $data) { ... } }; Node.new(1)
[01:33:13] <camelia> rakudo-moar b4d33982a: OUTPUT: «Stub code executed␤  in submethod new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[01:33:46] <melezhik> m: class Node { has $.data;  submethod new (Int $data) { $!.data = data } }; Node.new(1)
[01:33:46] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    data used at line 1␤␤»
[01:34:07] <melezhik> m: class Node { has $.data;  submethod new (Int $data) { $!.data = $data } }; Node.new(1)
[01:34:08] <camelia> rakudo-moar b4d33982a: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in submethod new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[01:34:35] <melezhik> m: class Node { has Int $.data;  submethod new (Int $data) { $!.data = $data } }; Node.new(1)
[01:34:36] <camelia> rakudo-moar b4d33982a: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in submethod new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[01:35:47] <melezhik> now I stuck with that ...
[01:35:54] <moon-child> m: class Node { has Int $.data;  submethod new (Int $data) { self.bless(:$data) } }; say Node.new(1)
[01:35:55] <camelia> rakudo-moar b4d33982a: OUTPUT: «Node.new(data => 1)␤»
[01:37:33] <melezhik> m: class Node { has Int $.data;  submethod new (Int $d) { $!.data = $d } }; Node.new(1)
[01:37:34] <camelia> rakudo-moar b4d33982a: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in submethod new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[01:37:49] <melezhik> why can't I change $.data?
[01:40:05] <moon-child> I guess you need to make both your own new and BLESS
[01:40:13] <moon-child> m: class Node { has Int $.data;  submethod new (Int $data) { self.bless(:$data) }; submethod BUILD(Int :$data) { $!data = $data } }; say Node.new(1)
[01:40:13] <camelia> rakudo-moar b4d33982a: OUTPUT: «Node.new(data => 1)␤»
[01:41:55] <melezhik> sigh ... seems not intuitive to me ... what the difference between redefining new and BUILD and why should redefine both?
[01:42:35] <melezhik> brb
[01:42:53] <moon-child> my understanding is, new is called with a type object self, BUILD is called with an actual newly instantiated object
[01:42:59] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[01:43:10] <moon-child> and bless is what creates the new object and then calls BUILD
[01:50:27] *** Quits: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779) (Quit: Leaving)
[01:54:18] <melezhik> moon-child thanks for clarification 
[01:55:12] * mykhal is somewhat shy to accept some tbrowder's compliments.. what looks like really knowing Raku might just be recently read certain doc chapters
[01:57:16] <melezhik> m: class Node { has Int $.data; has Str $.foo;  submethod new (Int $data) { self.bless(:$data) } }; Node.new(1)
[01:57:16] <camelia> rakudo-moar b4d33982a: ( no output )
[01:57:27] <melezhik> m: class Node { has Int $.data; has Str $.foo;  submethod new (Int $data) { self.bless(:$data) } };  say Node.new(1)
[01:57:27] <camelia> rakudo-moar b4d33982a: OUTPUT: «Node.new(data => 1, foo => Str)␤»
[01:58:33] <melezhik> moon-child looks like we don't even need to redefine BUILD. the only magic is that new's parameter should be named after class data
[01:59:13] <melezhik> so it should be `submethod new (Int $data) { self.bless(:$data) } `
[01:59:31] <melezhik> not something `submethod new (Int $d) { self.bless(:$d) }`
[02:01:07] <melezhik> m: class Node { has Int $.data; has Str $.foo;  submethod new (Int $data) { self.bless(:$data) } };  Node.new(1).foo = "OK"
[02:01:07] <camelia> rakudo-moar b4d33982a: OUTPUT: «Cannot modify an immutable 'Str' type object␤  in block <unit> at <tmp> line 1␤␤»
[02:01:15] <melezhik> I also stuck here
[02:01:26] <melezhik> why can't I modify foo?
[02:03:12] <raydiak> attributes default to read-only. you need 'is rw' after 'has Str $.foo'
[02:03:41] <melezhik> oh, thanks
[02:03:51] <raydiak> yw
[02:03:57] <melezhik> I even at some point remember that )))
[02:04:17] <melezhik> have not touched Raku classed in awhile ...
[02:04:25] <melezhik> classes
[02:05:29] <raydiak> it's a very broad language, there's a lot to remember/forget :)
[02:10:07] <melezhik> raydiak absolutely, I always feel like that!  
[02:11:19] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[02:13:12] <raydiak> it's not entirely unintentional. aspects of the design were modeled after natural human languages, including the idea that there is a lot of vocabulary and most people don't know and retain all of it, just the parts they frequently read/write/hear/say. one of the reasons we have several ways of doing most things
[02:15:29] <raydiak> I can't even remember all of just the operators and I started with raku in 2013 :D
[02:16:12] <melezhik> yeah, makes a sense 
[02:43:38] <mykhal> m: say <a b>.map(* => *.succ)  # wanted (a => b, b => c), if can be done better way, still wanna know if currying asterisk can be reused
[02:43:38] <camelia> rakudo-moar b4d33982a: OUTPUT: «(a => c)␤»
[02:45:22] <japhb> mykhal: Two asterisks are going to make map pull two args per iteration.  In this case, it's equal length to use $_:
[02:45:27] <japhb> m: say <a b>.map($_ => .succ)
[02:45:28] <camelia> rakudo-moar b4d33982a: OUTPUT: «No such method 'succ' for invocant of type 'Any'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»
[02:45:35] <japhb> m: say <a b>.map({$_ => .succ})
[02:45:35] <camelia> rakudo-moar b4d33982a: OUTPUT: «(a => b b => c)␤»
[02:45:43] <japhb> Sorry, forgot that I'd have to add {}
[02:48:42] <mykhal> yeah, i hoped for block-less. and, have to do additional .Hash to get {a => b, b => c}, which I in fact wanted rather :)
[02:51:17] <moon-child> my @x = <a b>; my %x; %x{@x} = @x».succ; say %x
[02:51:18] <evalable6> moon-child, rakudo-moar b4d33982a: OUTPUT: «{a => b, b => c}␤»
[02:52:02] <japhb> Do we have any other tree structure serialization format codecs in the ecosystem other than JSON, BSON, CBOR, YAML, and .raku?  I'm not including CSV because it's for tabular instead of tree-structured data, and I didn't see any XML libraries that looked like they could take an arbitrary tree of Raku data and encode into XML with a single call.
[02:52:25] <japhb> (Though of course I could have missed one.)
[02:52:46] <moon-child> toml?
[02:52:58] <moon-child> (though I would not use toml for nested data)
[02:54:03] <japhb> moon-child: Hmmm, I've never used toml.  Why do you say it would *work* for nested data but you wouldn't use it for that?
[02:55:14] <moon-child> just, the format is not really suited to that
[02:55:27] <moon-child> toml is essentially a formalization of ini; it's intended for simple config files
[03:11:13] <japhb> Ah, gotcha
[03:11:19] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:11:19] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:13:58] <japhb> I'm discovering that our various serialization modules have *wildly* different performance profiles.  To a frustrating degree when doing performance tests, actually, because I can't reasonably use the same test data for some of them, let alone the same iteration count.
[03:17:54] <japhb> Also it seems to be too easy to make grammars with really poor performance behavior, likely quadratic or worse.
[03:20:57] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[03:40:36] <mykhal> m: say (<a b>.map({:$_}), <a b>.map({:$^a}))  # :-o
[03:40:37] <camelia> rakudo-moar b4d33982a: OUTPUT: «((_ => a _ => b) (a => a a => b))␤»
[03:43:08] <moon-child> yeah, :$x  means  x => $x
[03:43:11] <mykhal> m: say (<a b>.map({:$^xxx})
[03:43:11] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say (<a b>.map({:$^xxx})7⏏5<EOL>␤    expecting any o…»
[03:43:18] <moon-child> where the lhs of the => ignores any symbols and twigils
[03:44:27] <mykhal> interesting
[03:44:44] <moon-child> err, sigils and twigils
[03:49:01] <mykhal> well, still might not get it, is it related to e.g. ... ?
[03:49:07] <mykhal> m: say :3days
[03:49:08] <camelia> rakudo-moar b4d33982a: OUTPUT: «Unexpected named argument 'days' passed␤  in block <unit> at <tmp> line 1␤␤»
[03:49:16] <mykhal> m: say ( :3days )
[03:49:16] <camelia> rakudo-moar b4d33982a: OUTPUT: «days => 3␤»
[03:49:41] <mykhal> or is it mentioned in https://docs.raku.org/type/Pair ?
[03:50:11] <mykhal> maybe sleep and morning helps
[03:51:20] <mykhal> seems related but
[03:52:13] <mykhal> oooh. ok. night
[03:53:46] <mykhal> btw, it does not feel right, if _ in $_ is supposed to mean nothing
[03:56:29] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[04:00:04] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:01:07] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[04:33:00] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:33:43] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[05:23:37] *** Quits: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net) (Quit: Leaving.)
[05:43:17] *** Joins: RandalSchwartz (~Adium@c-73-37-116-192.hsd1.or.comcast.net)
[05:43:38] *** Quits: RandalSchwartz (~Adium@c-73-37-116-192.hsd1.or.comcast.net) (Client Quit)
[06:43:39] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:43:39] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:43:39] *** Quits: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[06:43:39] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:43:39] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:43:39] *** Quits: shareable6 (~sha-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: benchable6 (~ben-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: coverable6 (~cov-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:43:39] *** Quits: tellable6 (~tel-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:43:39] *** Quits: quotable6 (~quo-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:43:39] *** Quits: greppable6 (~gre-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:43:39] *** Quits: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:43:39] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:44:42] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:45:00] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:45:03] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:45:22] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[06:45:39] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[06:45:46] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[06:45:51] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:46:07] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[06:46:27] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[06:46:30] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:46:48] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:56:01] *** Joins: frost (~frost@59.71.241.179)
[07:33:32] *** Joins: canw (~canw@138.199.9.161)
[07:34:28] <canw> How to read password from keyword not displaying it in Raku?
[07:38:09] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[07:47:17] *** Quits: canw (~canw@138.199.9.161) (Quit: Connection closed)
[07:50:33] *** Joins: canw (~canw@221.192.3.237)
[07:55:48] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 252 seconds)
[08:12:31] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:20:50] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:22:12] *** Quits: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net) (Ping timeout: 252 seconds)
[08:24:15] *** Joins: frost (~frost@59.71.241.179)
[08:25:54] <Util> m:say <1 1.1 1.10  2 2.1 2.3 2.30>.sort({ .comb(/\d+/)».Int });
[08:26:15] <Util> m: say <1 1.1 1.10  2 2.1 2.3 2.30>.sort({ .comb(/\d+/)».Int });
[08:26:16] <camelia> rakudo-moar b4d33982a: OUTPUT: «(1 1.1 1.10 2 2.1 2.3 2.30)␤»
[08:26:33] <Util> tbrowder: Is this what you wanted? ^^^
[08:27:00] <Util> It is from http://rosettacode.org/wiki/Sort_a_list_of_object_identifiers#Raku (which can have multiple dots), 
[08:27:03] <Util> and works because when Raku compares two lists, it compares first elements, then goes to 2nd elements only if 1st were a tie, etc.
[08:27:06] <Util> So, making Numerics into lists of 1 or 2 elements (depending on pure-Int vs has-a-frac-part) works,
[08:27:09] <Util> provided we turn all the .comb'ed bits back into numbers with hyper .Int.
[09:10:50] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:11:54] *** Quits: canw (~canw@221.192.3.237) (Quit: Ping timeout (120 seconds))
[09:12:11] *** Joins: canw (~canw@221.192.3.237)
[09:42:54] *** Joins: Guest9 (~Guest9@2402:e280:2117:297:bcc8:41f:8b96:eaea)
[09:52:32] *** Joins: ufobat_ (~martin@dynamic-095-115-007-035.95.115.pool.telefonica.de)
[09:58:24] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:26:59] *** Quits: canw (~canw@221.192.3.237) (Quit: Connection closed)
[10:33:46] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:47:28] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:53:11] *** Quits: Guest9 (~Guest9@2402:e280:2117:297:bcc8:41f:8b96:eaea) (Quit: Client closed)
[11:19:12] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[11:22:41] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:29:45] *** Joins: Nahita (~Nahita@213.211.18.208)
[11:33:03] *** Joins: ufobat__ (~martin@dynamic-077-009-090-004.77.9.pool.telefonica.de)
[11:33:29] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[11:36:32] *** Quits: ufobat_ (~martin@dynamic-095-115-007-035.95.115.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:44:24] *** Quits: Eddward__ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[11:45:09] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[11:55:01] <mykhal> Util: nice. also behaves the same like version sort for debatable cases like -2, 1.04
[11:58:59] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[12:00:18] <MasterDuke> canw: you'll have to use something like https://modules.raku.org/dist/Terminal::Readsecret:github:titsuki or https://modules.raku.org/dist/Terminal::Getpass:cpan:TITSUKI
[12:00:19] <tellable6> MasterDuke, I'll pass your message to canw
[12:09:47] *** Joins: patrickb (~quassel@55d49697.access.ecotel.net)
[12:26:12] <mykhal> moon-child: ok, these :$_ 's are mentioned at least in https://docs.raku.org/language/operators#term_{_} , not very explicit though
[13:09:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:09:47] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:11:22] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:17:39] <raydiak> pair forms (including :$) are also covered or mentioned in https://docs.raku.org/type/Pair https://docs.raku.org/language/syntax#Adverbial_pairs_(colon_pairs) https://docs.raku.org/language/glossary#Colon_pair_and_colon_list https://docs.raku.org/language/glossary#Adverbial_pair https://docs.raku.org/type/Signature#Positional_vs._named_arguments and https://docs.raku.org/type/Capture
[13:21:49] <mykhal> raydiak: tanks. i was adressing special case with $_ , where i feel _ is not supposed to me exactly "name"
[13:22:00] <mykhal> .. s/me/be/
[13:22:09] *** Quits: patrickb (~quassel@55d49697.access.ecotel.net) (Quit: Quit.)
[13:22:37] <raydiak> gotcha. it's just another variable, works the same way as usual :$whatever
[13:26:27] <mykhal> m: say :$  # .. i have spotted even standalone $
[13:26:28] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 :$  # .. i have spotted even standalone␤Confused␤at <tmp>:1␤------> 3say :$7⏏5  # .. i have spotted even standalone $␤    expecting any of:…»
[13:26:32] <mykhal> m: say :($)
[13:26:33] <camelia> rakudo-moar b4d33982a: OUTPUT: «($)␤»
[13:26:40] *** Joins: patrickb (~patrickb@55d49697.access.ecotel.net)
[13:27:13] <raydiak> that's a placeholder. it truly has no name
[13:27:49] <lizmat> it's also the nameless state variable
[13:28:22] <lizmat> m: sub a() { say $++ }; a for ^10
[13:28:22] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»
[13:29:03] <raydiak> that's cool, I didn't know that worked
[13:32:49] <raydiak> I've written (state $)++ to do that in the past
[13:32:54] <mykhal> m: say ( ++$ for ^5 )
[13:32:54] <camelia> rakudo-moar b4d33982a: OUTPUT: «(1 2 3 4 5)␤»
[13:32:57] <mykhal> m: say ( -$ for ^5 )
[13:32:58] <camelia> rakudo-moar b4d33982a: OUTPUT: «Use of uninitialized value of type Any in numeric context␤(0 0 0 0 0)␤  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context…»
[13:34:10] *** Quits: Nahita (~Nahita@213.211.18.208) (Ping timeout: 265 seconds)
[13:39:45] *** Quits: patrickb (~patrickb@55d49697.access.ecotel.net) (Remote host closed the connection)
[13:43:52] <raydiak> m: say $ += $++ for ^5 # triangular numbers
[13:43:52] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤1␤3␤6␤10␤»
[13:44:11] <raydiak> kinda fun, even if it is a bit illegible
[13:45:42] <Altreus> I just discovered that sort is sort-by if the sub has chirality of 1
[13:46:06] <Altreus> Signatures make so much magic possible!
[13:46:22] <mykhal> m: say ( !$ for ^2 )  # ??
[13:46:22] <camelia> rakudo-moar b4d33982a: OUTPUT: «(True True)␤»
[13:47:07] <Altreus> oh I missed that someone actually exemplified it in here so actually I didn't need to discover it
[13:47:40] <mykhal> Altreus: i wonder what chitality means in this non-geometry, non-physics, non-chemistry context ...
[13:47:50] <moon-child> arity, probably
[13:47:52] *** Joins: patrickb (~quassel@55d49697.access.ecotel.net)
[13:47:53] <mykhal> :)
[13:51:22] <Altreus> arity yes
[13:51:29] <Altreus> I knew it was one of those
[13:51:38] <Altreus> chirality ... arity ... charity ... something like that
[13:52:34] <Altreus> Anyway, a language that easily supports different options for the same procedure really speaks to me after more than a decade of perl5
[14:02:13] <mykhal> Altreus: ok, i now get that you were probably referring to Util's sort post
[14:03:10] <mykhal> (with unwanted language associations)
[14:07:34] <mykhal> m: say !(Any)
[14:07:34] <camelia> rakudo-moar b4d33982a: OUTPUT: «True␤»
[14:07:40] <mykhal> m: say +(Any)
[14:07:41] <camelia> rakudo-moar b4d33982a: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at <tmp> line 1␤»
[14:21:38] <mykhal> m: say +()
[14:21:39] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤»
[14:47:52] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:48:08] <Altreus> a sort post?
[14:50:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:55:04] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[14:55:21] <mykhal> Altreus: a post on sorting, or, just a post (or multiple consecutive ones), there are no other posts of him/her in a couple of days
[14:57:18] <mykhal> m: say (0+0, [+], 0 gcd 0)
[14:57:18] <camelia> rakudo-moar b4d33982a: OUTPUT: «(0 0 0)␤»
[14:57:36] <mykhal> m: say ( [gcd], )
[14:57:37] <camelia> rakudo-moar b4d33982a: OUTPUT: «No zero-arg meaning for infix:<gcd>␤  in block <unit> at <tmp> line 1␤␤»
[14:59:52] <Altreus> I was referring to the discussion in which you pointed out we were sorting things like version numbers
[15:00:43] <Altreus> i.e. you can just pass *.Version to sort and it will DTRT
[15:01:00] <Altreus> probably some sort of schwartzian thing
[15:01:38] <MasterDuke> yeah, it'll do a schwartzian transform for that case
[15:03:59] <mykhal> Altreus: ah, ok. but there, variadicity is no as obvious as in Util's .sort({ .comb/\d+/>>.Int })
[15:04:13] <mykhal> .. plus parens around regexp
[15:21:29] *** Joins: Nahita (~Nahita@176.220.122.254)
[15:47:40] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[15:56:49] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[16:17:59] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[16:32:36] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:33:38] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[16:50:12] *** Joins: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net)
[16:50:25] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[16:55:56] *** Quits: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net) (Ping timeout: 258 seconds)
[17:41:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:03:03] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:23:32] *** Joins: Eddward__ (~Eddward@207.138.204.132)
[18:42:07] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[18:50:37] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[18:50:44] <melezhik> .
[18:58:23] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[19:02:39] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[19:19:01] <Altreus> ;
[19:34:29] <mykhal> m: say <,>
[19:34:30] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «,␤»
[19:46:56] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:04:42] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[20:24:42] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[20:30:48] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[20:33:18] <mykhal> m: say { $_ ?? &?BLOCK($_-1) * $_ !! 1 }(10)
[20:33:18] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «3628800␤»
[20:39:23] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[20:42:42] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[20:51:38] *** Quits: Nahita (~Nahita@176.220.122.254) (Ping timeout: 272 seconds)
[21:15:22] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[21:21:01] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:22:19] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:22:20] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[21:27:57] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[21:28:10] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:31:57] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[21:32:00] *** Joins: Merfont (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:32:58] *** Quits: Merfont (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[21:33:15] *** Joins: Merfont (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:38:32] *** Joins: Nahita (~Nahita@176.220.122.254)
[21:38:37] *** Quits: Merfont (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[21:40:39] *** Quits: ufobat__ (~martin@dynamic-077-009-090-004.77.9.pool.telefonica.de) (Remote host closed the connection)
[21:41:38] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:44:18] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:46:34] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Ping timeout: 240 seconds)
[21:48:33] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[21:48:45] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[22:09:45] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[22:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:33:02] *** Quits: Nahita (~Nahita@176.220.122.254) (Ping timeout: 255 seconds)
[22:35:15] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:44:20] *** Joins: Nahita (~Nahita@176.220.122.254)
[22:49:31] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[22:55:53] *** Quits: Nahita (~Nahita@176.220.122.254) (Ping timeout: 252 seconds)
[23:05:32] *** Joins: archenoth (~archenoth@s0106889e6827f474.cg.shawcable.net)
[23:07:42] *** Quits: Oshawott (~archenoth@s0106889e6827f474.cg.shawcable.net) (Ping timeout: 252 seconds)
[23:08:47] *** Joins: Oshawott (~archenoth@S0106889e6827f474.cg.shawcable.net)
[23:10:16] *** Quits: archenoth (~archenoth@s0106889e6827f474.cg.shawcable.net) (Ping timeout: 252 seconds)
[23:10:58] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[23:11:16] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[23:26:04] <mykhal> fignting with Match object, getting an excessive space somehow, minimal example:
[23:26:19] <mykhal> say: "x12x3".subst(:g, /['x'(\d+)]+/, { $/.caps>>.value })
[23:26:33] <mykhal> m: say "x12x3".subst(:g, /['x'(\d+)]+/, { $/.caps>>.value }).raku
[23:26:34] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"12 3"␤»
[23:30:17] <mykhal> .. i need that [...]+ s better example would be this (and expected result is "0zzz123" :
[23:31:21] <mykhal> m: say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value }).raku
[23:31:21] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"0zzz12 3"␤»
[23:32:02] <mykhal> this Match object is somewhat chunky
[23:34:36] <moon-child> m: say S:g/'x' (\d+)/$0/ given 'x0zzzx12x3'
[23:34:36] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «0zzz123␤»
[23:35:07] <mykhal> nice, however I want to beat this { $/ } code solution
[23:35:43] <moritz> don't use the outer + in your subsitution regex
[23:36:06] <moon-child> mykhal: then
[23:36:10] <moon-child> say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value.join }).raku
[23:36:13] <moritz> the problem is that that  $/.caps>>.value returns a list of two values, because the + made it match twice
[23:36:14] <moon-child> m: say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value.join }).raku
[23:36:15] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"0zzz123"␤»
[23:36:31] <moritz> and subst wants a string, so it joins the two values, which defaults to inserting a space
[23:36:37] <moritz> m: say ~<a bc>
[23:36:38] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «a bc␤»
[23:37:34] <moritz> or you can use $/.caps>>.value.join('')
[23:37:46] <moritz> that should also get rid of that space
[23:38:05] <moon-child> no need for (''), can just use .join as in my example above
[23:38:43] <moritz> aye, but it makes the difference less obvious
[23:38:49] <moon-child> ne, fair enough
[23:41:05] <mykhal> moon-child, moon-child : thanks, i was panicking of seeing miltiple "0" keys in hash
[23:41:42] <mykhal> during debugging
[23:42:32] <mykhal> or maybe in list of pairs
[23:46:55] <mykhal> i think i will continue using perl -pe / -ne for quick text filtering and processing, for some time :)
[23:48:45] *** Quits: cooper (~mitchell@user/cooper) (Quit: leaving)
[23:52:00] <moon-child> startup time has gotten better, but is still a reason to prefer perl over raku for those sorts of pipelines
[23:52:17] <moon-child> e.g. over 100 runs I get perl -e exit is 66x faster than raku -e exit
[23:54:19] <mykhal> did you try jvm instead of m ? :)
[23:57:00] <moon-child> no
[23:57:43] <moon-child> I don't even build jvm rakudo anymore; it takes forever to build and doesn't work properly
[23:59:16] <ugexe> i built it on a raspberry pi 2 running net-bsd like 8 years ago... it took like 4 days
[23:59:21] <mykhal> but perl then might be even 666x faster
