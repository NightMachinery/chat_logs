[00:10:36] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de) (Ping timeout: 240 seconds)
[00:41:04] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:44:57] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:45:32] *** Joins: jeosol (~jeosol@user/jeosol)
[00:47:09] *** Joins: Rue (~rue@2001-b011-1000-1496-cf3a-2116-83d3-2a18.dynamic-ip6.hinet.net)
[00:51:46] <gilberth> Good morning #lispcafe!
[00:54:32] <gilberth> In theory the whole display state of a CLIM application is defined by a tree-structured display list of the sheet hierarchy and within the sheets of the output history aka display list within them. The application modifies this hierarchy and with time that new state is reflected to your display.
[00:55:49] <gilberth> I now ponder. Suppose I would just have a stream of all modifications done. Like "make a new sheet here", "move that thing there", "add a line", "remove that". Couldn't that be my network display server protocol?
[00:56:30] <moon-child> snapshots > diffs
[00:56:45] <moon-child> and you need a strategy for when the rate of changes exceeds the network bandwidth
[00:57:56] <Aurora_v_kosmose> Aren't the compromises between snapshots & diffs why most video formats use both?
[00:58:00] <gilberth> moon-child: yep. I am getting there, slowly. I could "compress" the changes. And I could also transfer them on demand. Suppose a huge pane of 100k lines suddenly appearing. No need to transfer all those lines at once. You could send those few lines that are visible first.
[00:58:56] <gilberth> I imagine that the protocol knows about scrolling. Scrolling could happen at the display server.
[00:59:21] <moon-child> Aurora_v_kosmose: complicated.  Snapshots are more semantically coherent; diffs can be an _optimization_ strategy
[00:59:41] <Aurora_v_kosmose> moon-child: Ah I see.
[00:59:56] <gilberth> I am just not sure how to pull that off. The server pulling what he needs would be the HANDLE-REPAINT protocol. That is server: "I'd like to display this and that part and don't know how, send me the content".
[00:59:56] <Aurora_v_kosmose> gilberth: It might be worth buffering a few pages both ways though to prevent stutter.
[01:00:16] <gilberth> As moon-child said.
[01:02:25] <gilberth> Aurora_v_kosmose: Yes. Cocoa does that with pixmaps. It generates redraw events for currently not visible parts of your scrolled pane. So a little scrolling could be served instantly by blittering. It then schedules more redraw events to keep some "safety" region beyond the currently visible readily rendered.
[01:03:23] <gilberth> This is important for iOS were scrolling is kind of animated.
[01:04:05] *** Joins: Brucio-61 (~Brucio-52@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:04:06] <gilberth> But as moon-child said, snapshots and diffs, compressed by skipping redundant writes, and only sending them in part, are orthogonal.
[01:04:33] <vms14> hi gilberth :D
[01:04:50] <vms14> it's at night here
[01:05:36] <gilberth> Yes, perfect time to get up, drink coffee and ponder display servers.
[01:06:10] <Aurora_v_kosmose> gilberth: Ah got it.
[01:06:13] <gilberth> I need to take a break from hacking. I have the feeling I am getting somewhere for a possible new display server protocol.
[01:06:13] <vms14> I've stolen a forth implementation in C
[01:06:25] <vms14> now I want to put dirty stuff on top of that
[01:06:42] <vms14> https://gist.github.com/lbruder/10007431
[01:06:43] -ixelp- A minimal Forth compiler in ANSI C Â· GitHub
[01:07:09] <vms14> I'm sure I can find more like this one, but it seems it's good enough
[01:07:40] <vms14> found a shit that only reads words and execute them (I can do that by myself)
[01:08:07] <gilberth> I am just not sure, if I keep CLIM's output records as my display list, or if I construct my own and regard handle-repaint as the protocol. In theory not ever sheet with CLIM even has an output history.
[01:08:08] <kakuhen> i want to get ecl running on my ps vita
[01:08:50] <vms14> btw gilberth you said like something like clim maintains a state as a list?
[01:09:10] <vms14> in a way you could (save-state) into a file?
[01:09:35] <vms14> a way would be have a history of commands and just save that
[01:09:43] <gilberth> Sorry, I don't get what you are refering to.
[01:09:58] <hayley> https://twitter.com/marcan42/status/1494213855387734019 "It turns out Apple's custom NVMe drives are amazingly fast - if you don't care about data integrity. If you do, they drop down to HDD performance."
[01:10:11] <vms14> In theory the whole display state of a CLIM application is defined   
[01:10:11] <vms14>            by a tree-structured display list of the sheet hierarchy and within  
[01:10:11] <vms14>            the sheets of the output history aka display list within them. The   
[01:10:11] <vms14>            application modifies this hierarchy and with time that new state is  
[01:10:13] <Aurora_v_kosmose> hayley: lol nice
[01:10:15] <vms14>            reflected to your display.  
[01:10:55] <vms14> yes, i didn't learn to use emacs
[01:11:08] <gilberth> Yes. I was pondering if the stream of writes to my internal state could already be a display server protcol. Nothing too CLIM specific here.
[01:11:20] <kakuhen> hayley: Just keep a UPS hooked to your Mac and data is integritied or something ;)
[01:12:00] <vms14> but reading this, sounds like you can save snapshots of the current clim application state and recover from that later
[01:12:26] <vms14> don't know if it's a feature present yet, but sounds like a nice feature
[01:12:28] <kakuhen> anyway, the fsync "lying" thing is imo a case of ppl forgetting that man pages are a thing
[01:12:36] <kakuhen> apple's own man pages on fsync basically tells you the "lie" it makes
[01:12:37] <gilberth> If font metrics would match, you could.
[01:12:42] <Aurora_v_kosmose> hayley: Holy shit those magnitudes of difference
[01:12:55] <vms14> kakuhen: ecl was compiled to android, so maybe you can end having it in a psp
[01:13:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:13:31] <gilberth> vms14: CLIM as it is, can't do that. The output record generated are port aka display specific.
[01:13:56] <Aurora_v_kosmose> kakuhen: It could be misleading depending on how stats are presented.
[01:14:05] <Aurora_v_kosmose> Such as not mentioning the difference in the stats.
[01:14:08] <vms14> gilberth: another "easy" way is to save a command history
[01:14:14] <vms14> but not a nice way
[01:14:16] <kakuhen> for some reason my pager is screwing up the output of the man page
[01:14:27] <kakuhen> err rather `man 2 fsync >> fsync.2.txt` is not working as i exepct
[01:14:27] <moon-child> vms14: that has issues with timing and nondeterminism
[01:14:30] <Aurora_v_kosmose> kakuhen: woman.el to the rescue?
[01:14:42] <kakuhen> for some reason women.el never works on my machine :(
[01:14:44] <gilberth> vms14: But if you tweak that, you could in theory take a sheet and degraft it from one port (display) and later graft it to another display. Could be done.
[01:14:47] <Aurora_v_kosmose> kakuhen: :(
[01:14:51] <moon-child> kakuhen: MANPAGER=cat man 2 fsync?
[01:14:51] *** Joins: aeth (~aeth@user/aeth)
[01:15:04] <kakuhen> i can try but basically the man index thing that woman.el uses is not updated by my system
[01:15:13] <kakuhen> and no matter how many times i run makewhatis, woman.el just wont find the man pages on my system
[01:15:32] <kakuhen> i dont blame the utility... mac os has the most stupid spots for storing manpages
[01:15:50] <Aurora_v_kosmose> kakuhen: Oh, you need to modify woman-manpath
[01:16:03] <vms14> kakuhen: I'm poor so I have not those problems
[01:16:03] <gilberth> And that would be useful. Think screen^Wtmux for CLIM applications.
[01:16:12] <vms14> :D
[01:16:34] <kakuhen> ok even using cat as my pager makes the output duplicate several letters
[01:16:35] <kakuhen> what a strange bug
[01:16:42] <kakuhen> there's 3 things that are possibly going wrong 
[01:16:55] <kakuhen> and i just figured out what it is
[01:17:03] <Aurora_v_kosmose> kakuhen: Have you tried man -l $filepath ?
[01:17:09] <kakuhen> TextEdit is using the wrong encoding, the file's fine
[01:17:25] <kakuhen> https://z.zz.fo/KJmt8.txt
[01:17:35] <kakuhen> ok this looks really screwed on firefox but it looks fine when I `cat fsync.txt` on my terminal
[01:17:38] <Aurora_v_kosmose> man apparently has a flag -R for encoding stuff
[01:17:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:17:53] <kakuhen> the part that matters is basically the paragraph on "theroetical edge cases"
[01:18:35] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ede5:6357:bb4:e959) (Remote host closed the connection)
[01:19:12] <kakuhen> oh i see what's going on actually... I guess the way you render "bold" text is duplicating letters
[01:19:38] <kakuhen> ok but when i run it through cat, i dont see any duplicates
[01:19:39] <kakuhen> I hate unix
[01:19:50] <hayley> Cliff is selling Coffee Compiler Club shirts for $20.
[01:19:56] <gilberth> kakuhen: man man | col -b
[01:20:55] <kakuhen> anyway yeah, apple cheats for performance on their SSDs
[01:21:23] <kakuhen> and they very subtly hint at it in fsync manpages
[01:22:48] <kakuhen> https://danluu.com/file-consistency/
[01:22:49] -ixelp- Files are hard
[01:22:50] <kakuhen> this is also a good reason
[01:22:53] <kakuhen> good read*
[01:23:29] <kakuhen> "OS X and some versions of ext3 have an fsync that doesn't really flush to disk. OS X requires fcntl(F_FULLFSYNC) to flush to disk, and some versions of ext3 only flush to disk if the the inode changed (which would only happen at most once a second on writes to the same file, since the inode mtime has one second granularity), as an optimization."
[01:25:05] <Aurora_v_kosmose> btrfs & zfs have saved me a lot of trouble with the shitty power where I am.
[01:25:31] <Aurora_v_kosmose> To think filesystems with similar care for integrity were only available in expensive enterprise stuff before annoys me to no end.
[01:25:40] <Aurora_v_kosmose> As if I was the only one dealing with unreliable infrastructure...
[01:28:00] <Aurora_v_kosmose> Although journaling wasn't bad, it didn't go quite as far.
[01:28:38] <Aurora_v_kosmose> (Of course it would've helped if I knew to enable journaling before I looked into it after losing a lot of stuff)
[01:57:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:01:38] <hayley> https://twitter.com/slava_pestov/status/1494443431120224258
[02:01:42] <hayley> "I prefer languages without âpuzzlesâ, like C. Clear, unambiguous syntax and semantics that trivially compile to machine code in a straightforward 1:1 mapping"
[02:02:09] <Aurora_v_kosmose> I think they meant to say "Lisp"
[02:03:36] <gilberth> Puzzles? Declare 'foo' as an array of functions return that return a function taking an int and return an int.
[02:04:53] <hayley> He's a compiler writer, he is joking the entire way through.
[02:05:18] <Aurora_v_kosmose> The only reason the assembly/machine-code statement applies is because you can also do in-line assembly in C. But implementing an assembler DSL in Lisp isn't a herculean task either.
[02:05:25] <Aurora_v_kosmose> hayley: Yeah I suspected it was a joke.
[02:05:55] <hayley> <me> But, if the participants in such a meeting think that they are designing a language that is "close to the metal", like C, then they should have no problems whatsoever writing a compiler which is competitive with the best available. Right?
[02:05:57] <hayley> <beach> Yeah, right!
[02:33:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:33:21] <vms14> haha 1:1 mapping
[02:35:52] <vms14> the only lang which seems to do 1:1 mapping is forth
[02:35:58] <vms14> or nearest
[02:36:21] <vms14> they say it's just alternative syntax for asm with a stack
[02:52:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[02:59:36] <moon-child> gilberth: int (*(*x[])())(int))
[03:00:07] <moon-child> s/)$//
[03:00:44] <gilberth> moon-child: Doesn't it concern you? I mean that you could write that?
[03:00:51] <moon-child> it does, it really does...
[03:01:25] <moon-child> perhaps I should be rehabilitated
[03:01:35] <moon-child> go through conversion therapy to forget the horrors of c
[03:01:39] <moon-child> and x86
[03:01:43] <moon-child> and vt-terminals
[03:01:55] <moon-child> and the unix process model
[03:03:07] <gilberth> Find a remote place without internet and barricade yourself there with just a Lisp machine for a few month. That should cure you.
[03:03:25] <moon-child> how will I get my coffee then?
[03:03:25] <vms14> moon-child: don't worry, look at the first implementation of the unix shell https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h
[03:03:39] <vms14> if you don't die, congratulations :D
[03:03:56] <vms14> no coffe until you make a killer app in lisp
[03:04:02] <vms14> coffee*
[03:04:21] <gilberth> moon-child: Ok. I grant you a coffee maker.
[03:05:31] <vms14> when I saw this file I imagine the guy saying something like "I have to make a parser? easy stuff..."
[03:07:20] <gilberth> Very early C shows its B heritage as types were completely optional.
[03:07:55] <gilberth> I have seen things like main(argc, argv) int argv[]; { ... }
[03:08:16] <pl> that's the old, pre-prototype declaration style
[03:08:22] <pl> not so much typing optional
[03:08:25] <moon-child> at some point I realised that, if you leave off the types, function declarations are exactly the same in c and shell
[03:08:29] <moon-child> f() { ... }
[03:08:31] <gilberth> argv is a pointer to pointers. So an 'int' will do fine for a pointer.
[03:08:31] <moon-child> exactly the same
[03:08:39] <pl> (though auto-typing iirc existed from scratch)
[03:08:53] <moon-child> (well, also leave off the parameters...)
[03:09:00] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[03:09:41] <gilberth> pl: I was refering to saying int argv[] instead of char **argv. argv is declared as an array of ints here, not of pointers.
[03:10:01] <pl> ah
[03:10:33] <gilberth> And the compiler would happy compile: foo (x) { return x[0]; }
[03:11:54] <gilberth> The 'char' type is only needed to address an octet instead of a word aka int. That's the B heritage I am referring to. I really saw code like that as when bored I like to read very early UNIX code as it is available now.
[03:12:47] <gilberth> This works too: struct { int x, y; } foo (p) { return p->x; }
[03:12:57] <vms14> which remembers I wanted to allocate only one bit, but it's not possible
[03:13:05] <pl> vms14: depends on platform
[03:13:08] * gilberth missed a ";"
[03:13:10] <pl> also, on language
[03:13:11] <vms14> even if you malloc(1) you'll get malloc(8)
[03:13:31] <pl> vms14: malloc(1) allocates sizeof(char)
[03:13:41] <pl> which is guaranteed to be >=8 bits
[03:13:56] <pl> and for all practical purposes =8
[03:13:57] <vms14> I wanted only one bit :/
[03:14:11] <pl> vms14: use Ada then, or assembly on one of the bit-addressable CPUs
[03:14:24] <vms14> haha, I'm trying to use forth
[03:14:37] <gilberth> You can't, with C. sizeof(char) is defined to be 1. And sizeof can't be fraction.
[03:14:47] <vms14> trying to learn it, but mostly just looking at the web about forth
[03:14:55] <vms14> and all the implementations it has
[03:15:19] <vms14> you have a forth implemented in almost every language 
[03:15:29] <vms14> or better said, several forths
[03:15:49] <vms14> and in almost all cpu/arch/platforms
[03:15:56] <vms14> even in the game boy xd
[03:18:04] <vms14> I have to learn the basics and try to make an html generator in order to reproduce the lisp macro usage
[03:19:33] <vms14> I see a lot of power in a language that seems to have the lisp macros power and it's so easy to implement than even I could make some dirty implementation and would be usable
[03:20:38] <vms14> you don't have to implement lambda let environments...
[03:21:28] <vms14> just the behavior of the forth compiler for stuff like immediate and postpone and stack operations
[03:23:14] <vms14> when tried making a lisp I was printing every environment I traverse when looking for a symbol and seemed so wrong to have to traverse all the trees for every symbol
[03:23:49] <vms14> gilberth: how do you speed up or improve symbol lookups?
[03:24:25] <vms14> or better said, can you escape having to traverse all the fucking environments until you find the symbol?
[03:24:55] <gilberth> s-exprs and macros are very nice. I use that for my B32 assembler too. The syntax is s-expressions and you define your macros using CL. And I also use that for my primitive programming language, which is like B but with s-expressions. Even given such a low-level stupid language having CL for your macro allows you be very productive. I always wanted to do that C, but never could decide how the s-exprs should look like.
[03:25:46] <gilberth> vms14: Are you talking about a Lisp interpreter?
[03:25:48] <vms14> gilberth: are you transpiling code from cl?
[03:25:51] <vms14> yes
[03:26:15] <vms14> a lisp interpreter with scope needs environments and needs to traverse them for every symbol
[03:26:20] <gilberth> No, I am not transpiling. I just have macros available, which are like usual Lisp macros.
[03:27:11] <vms14> it didn't seem wrong at first, but try to print while traversing those environments and it will get annoying
[03:27:20] <gilberth> vms14: When interpreting, I just use ASSOC for the lexical environment and SYMBOL-VALUE for the global. And when compiling, I know where on the stack the lexical variables reside.
[03:27:49] <gilberth> It isn't so bad, when you have lexical scope.
[03:28:44] <vms14> the more scope has a variable you are refering to, the more you have to traverse the environments
[03:29:03] <gilberth> For dynamic scope you could consider shallow binding, which however won't work with multiple threads. But then I really don't like dynamic scope for I like to have closures proper.
[03:29:35] <vms14> what is shallow binding? 
[03:29:40] <gilberth> vms14: Yes, of course. You can escape that by compiling.
[03:29:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[03:30:15] <vms14> never got into compile, more than writing dirty transpilers that just output some weird code
[03:30:28] <vms14> but never to asm
[03:30:46] <vms14> and wasn't a "compiler"
[03:31:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:31:06] <gilberth> vms14: Shallow binding for variables works by not pushing a new binding onto the environment, but by always having the symbol value at it's symbol value slot. When a variable is bound you save the old value and restore it, when leaving the scope. I don't recommend doing that though.
[03:31:10] <vms14> a compiler thinks about the program, my shit just translated stuff
[03:32:09] <vms14> gilberth: so you have a global variable that changes value depending on the scope
[03:32:13] <gilberth> Well, a bc compiler could be easy when your VM is a stack machine. Just flip prefix to suffix. Turn (foo 1 2) into 1 2 foo
[03:32:31] <vms14> gilberth: the stack makes everything so fucking easy
[03:32:58] <vms14> in the sense that your only problem is push stuff into the stack and execute expressions
[03:33:07] <vms14> expressions will find their stuff on the stack
[03:33:25] <gilberth> When you face (let ((x 10)) ...) just push the 10 and when 'x' is read, the compiler knows the number of values between the current top of stack and the 'x'.
[03:33:38] <vms14> yes
[03:33:46] <vms14> and you have efficient scope
[03:34:04] <vms14> even more if you manage to get some part of the stack as registers
[03:34:36] <vms14> usually in forth the top of a stack is a register and they say it speeds by 10%
[03:35:59] <vms14> but in my case the stack simplifies stuff in a way that make a language can be affordable by me
[03:35:59] <gilberth> Or you do as Emacs does. And have BIND, UNBIND, and VAR operations. <http://clim.rocks/gilbert/tiny-bc/pico-bc.lisp> does that.
[03:36:17] <gilberth> vms14: TOS being a register is an implementation detail of the BC interpreter.
[03:36:57] <vms14> gilberth: but I only see they put only tos as a register, not ton or the rest of the stack
[03:37:12] <vms14> there is no gain compared with the complexity added?
[03:37:41] <vms14> I don't get why ton is not also a register when numeric functions take 2 args
[03:37:45] <gilberth> Here is a compiler, which knows where on the stack the lexicals could be found: <http://clim.rocks/gilbert/tiny-bc/alt-bc.lisp> You find a comment with the instruction set there.
[03:38:46] <gilberth> This is more complicated because of closures. As when you have (defun foo (x) (lambda () x)) the 'x' lexical cannot live on the stack anymore.
[03:39:38] <gilberth> You could also JIT that BC: <http://clim.rocks/gilbert/tiny-bc/fib-jitted.lisp>
[03:40:31] <vms14> :O
[03:42:52] <gilberth> Add some register allocation and you could have assembly.
[03:44:05] * hayley watches some of the FOSDEM talks she was rambling about long ago, now that they happened, and still expects to observe JMC with high rotational velocity, would she visit his grave.
[03:47:45] <vms14> gilberth: actually some forths let you add inline assembly, I suppose you just put the opcode of every instruction and it works?
[03:48:14] <vms14> as long as you say the cpu, execute this shit and it's the opcode he wanted
[03:49:05] <vms14> I mean, I just have to put opcodes in memory and then point the instruction pointer to that memory?
[03:49:19] <vms14> or there is something more?
[03:50:42] <vms14> because then you get an interactive assembler
[03:51:13] <gilberth> I never used Forth.
[03:51:41] <gilberth> Can Forth generate Forth? Like as PS could generate new PS code?
[03:56:56] <vms14> depends
[03:57:41] <vms14> usually forth is written in asm and it's just a collection of primitive words which are asm code and secondary words which are lists of memory adressess of primary and secondary words
[03:58:42] <vms14> the compile mode is just creating a secondary word, which is to put a new word in the dictionary memory and "unroll" the list of memory adresses in this word
[03:59:16] <vms14> but, words can be marked as immediate which means when compiling instead of put the memory adress of the word you execute the word at compile time
[03:59:53] <vms14> note that the word could do stuff in the stack, has the whole language accessible and can read the input buffer as reader macros do
[04:00:20] <vms14> also you have a return stack used by the language where you can put stuff
[04:00:39] <vms14> so you can have call with cc 
[04:01:26] <vms14> the whole idea is an interesting concept and the main reason I'm wondering if I should adopt forth as my main language instead of lisp
[04:01:53] <vms14> because it would mean to have my main language available everywhere as I'm able to implement it wherever I want
[04:01:59] <vms14> a thing I cannot do with lisp
[04:02:34] <gilberth> Well, with PS a procedure is just a vector^Warry marked executable. PS could craft those arrays at run-time.
[04:02:43] <vms14> also as I told you before, some forths can compile asm words
[04:03:00] <vms14> like the inline asm of c
[04:03:23] <gilberth> Which of course will not be portable.
[04:03:30] <vms14> I think they just have the opcodes of the machine and make a list of those opcodes?
[04:03:55] <vms14> gilberth: you can write this language in less than an hour
[04:04:06] <vms14> in asm I suppose it would take more
[04:04:27] <gilberth> With PS the nice thing is that I can write a Lisp -> PS compiler in PS itself.
[04:04:36] <vms14> but if it's not asm,, then you can't play with memory adresses
[04:04:52] <gilberth> No, and I don't want to.
[04:05:09] <vms14> no but in the case of forth it forces you to emulate them
[04:05:22] <vms14> as the return stack is used to return from words
[04:05:53] <gilberth> And? How is that related to actual physical memory? Why do I need to care about that?
[04:06:37] <vms14> because words are just a memory address
[04:07:31] <gilberth> Not pointers into just some array?
[04:08:02] <vms14> well actually they have a header and a body
[04:08:56] <vms14> the header has the name and additional info like if it's immediate and some flags
[04:09:16] <gilberth> Anyhow, when you care about a sane stack based language, I suggest you take a peek at PS as a language. It's quite nice.
[04:10:22] <gilberth> It has dynamic typing, code is data and it comes with a GC.
[04:11:38] <clothespin> hello
[04:11:55] <gilberth> Hello there, clothespin.
[04:12:02] <clothespin> that was hunt and peck typing
[04:12:27] <vms14> gilberth: it's likely you'll like forth if you like ps
[04:12:41] <vms14> clothespin: hi
[04:13:01] <vms14> lol didn't know ps had a gc
[04:13:25] <clothespin> i appreciate forth, but it's awfully terse in practice
[04:14:09] <gilberth> I am not sure, if would like Forth. Does it come with dynamic typing and a GC? Is code data?
[04:16:00] <vms14> gilberth: data is code
[04:16:20] <vms14> well words are code and can be data or code
[04:16:43] <vms14> it has metaprogramming ability if that's your concern
[04:16:45] <gilberth> So Forth can generate new Forth? Forth code could generate new Forth code and invoke it?
[04:16:59] <vms14> I think it can do all lisp macros can including reader macros
[04:17:12] <vms14> but I'm not sure and it's this what I really want to check
[04:17:40] <clothespin> giberth is waiting on fifth
[04:17:43] <vms14> forth code is words and forth can generate new words
[04:18:01] <vms14> also, it's likely the forth you'll use will be written by you
[04:18:09] <vms14> so if it misses something shame on you
[04:18:42] <clothespin> don't we have enough things to be ashamed of?
[04:18:54] <vms14> but I think you can enjoy writing a forth as I see you writing "funny" lisps
[04:19:06] <vms14> clothespin: never is enough
[04:19:52] <gilberth> Hey, the Lisp is not funny. The languages I use to implement the Lisps with are funny, like Rust or Perl. I am not brave enough to attempt to do in INTERCAL.
[04:20:01] <clothespin> i might go to a real cafe for breakfast
[04:20:01] <vms14> it is several times easier to implement
[04:20:24] <vms14> gilberth: they inherit the fun
[04:20:41] * gilberth points to JMC's paper. That's easy.
[04:21:22] <vms14> actually what will take you time is knowing what to implement
[04:21:35] <vms14> but once you do you could even make ps write forths
[04:21:43] <gilberth> If you're crazy you could have <http://clim.rocks/lisp100/lisp100.c> and <http://clim.rocks/lisp100/init.lisp> to be fully meta-circular. Have fun.
[04:21:51] <vms14> write me one :D
[04:23:04] <gilberth> JMC said you could also use strings for s-expressions, and so I did. :-)
[04:23:07] <vms14> ;; Welcome to LISP100, enjoy your stay.
[04:23:07] <vms14> LISP> :O
[04:23:07] <vms14> ERROR: Not a cons - NIL
[04:23:07] <vms14> [1]   Abort trap (core dumped) ./a.out
[04:23:32] <clothespin> somebody rewrote nendo (which itself was a watered down rewrite of mirai (which was a rewrite of s-geometry)) in erlang
[04:24:03] * hayley picks up telephone
[04:25:07] <vms14> gilberth: it's  nice
[04:25:18] <vms14> never seen a shorter lisp
[04:25:59] <gilberth> This is why I indented it so funny, to keep within 100 lines. Otherwise: Just nuts, I was bored.
[04:26:11] <clothespin> autolisp returns nil instead of erroring
[04:26:21] <hayley> I should write a bot which produces random Henry Baker quotes.
[04:27:59] <clothespin> in fith
[04:31:15] <vms14> gilberth: I have this forth https://gist.github.com/lbruder/10007431
[04:31:15] -ixelp- A minimal Forth compiler in ANSI C Â· GitHub
[04:31:34] <vms14> much longer than your lisp, but still very tiny
[04:31:51] <clothespin> what about an ANSI forth compiler in minimal C
[04:31:52] <vms14> and can compile definitions and knows what immediate is 
[04:32:25] <vms14> clothespin: the forth standard is ANS, not ANSI which I don't understand
[04:32:51] <vms14> I've looked at, and ANS is the previous state of the standard, you submit this to ansi and ansi approves
[04:32:58] <clothespin> ansi produces ans'
[04:33:18] <vms14> so ansi never approved or what?
[04:33:29] <clothespin> no your missing me
[04:34:02] <clothespin> american national standard institute create american national standards
[04:34:23] <vms14> but why all the others are named ansi
[04:34:36] <clothespin> why does forth have no u?
[04:35:02] <vms14> yes the answer could be: forth is different
[04:35:20] <vms14> even in that had to be fucking different
[04:35:53] <vms14> clothespin: because there was no space
[04:36:11] <vms14> the system moore used to make forth only let him those letters
[04:36:25] <vms14> he wanted to put fourth
[04:37:20] <vms14> he could use four directly btw
[04:38:12] <vms14> but thanks to that is not a number, but a progress
[04:41:20] <clothespin> i feel like a starbucks
[04:45:05] <vms14> clothespin: want to be rich? I've just had an idea
[04:45:23] <vms14> make a community and make users pay for getting unbanned
[04:52:47] <clothespin> apparently i don't want to be rich, i have squandered so many opportunities
[05:08:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:08:54] <vms14> yes, a lot of ideas we have (not this one) could make us rich if we just had tried them
[05:09:10] <vms14> even stupid ideas
[05:09:28] <vms14> you can see a lot of people getting rich with the most stupid ideas in the world
[05:10:52] <vms14> in my case I have an idea for example: "let's make a web application that gets the most traffic with the less effort possible and put adds on that"
[05:11:18] <vms14> but then I think "I should make a framework to make this application"
[05:11:36] <vms14> and then "I should make a language to make this framework"
[05:11:58] <vms14> and here I am, looking about forth so I can make a language
[05:13:41] <vms14> btw I've defined the most important word I needed in forth : :D ." :D" ;
[05:20:26] <sm2n> huh
[05:20:54] <sm2n> javascript will silently cast functions/closures to floats if it feels the need
[05:20:58] <sm2n> that's amazing
[05:21:52] <sm2n> I was messing around with the new linux kernel security module today, "landlock"
[05:22:10] <sm2n> Conclusion is, I don't like unix
[05:32:47] <hayley> "let's make a web application that gets the most traffic with the less effort possible and put adds on that"
[05:32:56] <hayley> The application: one-more-re-nightmare writeup
[05:32:59] <hayley> Effort: minimal
[05:33:05] <hayley> Ads: it links to one-more-re-nightmare
[05:34:51] <gilberth> It's not the idea that makes you rich, but the talent to sell it.
[05:35:51] <gilberth> And luck.
[05:45:42] <gilberth> And don't forget the "worse is better" principle, if you want to make money.
[05:49:03] <vms14> gilberth: I have talent to sell it, just need the product
[05:49:21] <vms14> whenever I'm done I'll come to reddit quora and alike with multiple accounts
[05:49:42] <vms14> asking for the best X kind of product
[05:50:19] <vms14> and answering myself with another account telling how my product has changed my life
[05:50:28] <vms14> xD
[05:51:07] <vms14> it's not only spam, people who does not notice will think actually this product is good
[05:51:58] <vms14> but if the product is shit, is better to not invest time in promoting it
[05:52:19] <vms14> actually the product has to offer something, even if is simple stuff
[05:53:44] <vms14> also, doing this shitty multiaccount (with accounts created in different times and with some activity) is also more helpful if you fake different products which are the same
[05:54:09] <vms14> as you other accounts could say X is good but Y and Z are also nice
[05:54:24] <vms14> being all the alphabet the same product
[05:54:45] <vms14> just different links and presentation
[05:56:02] <vms14> and of course all your accounts are experts in the stuff your product is about, maybe except the guy who asks the question
[05:56:25] <vms14> and even more easy, there is thispersondoesnotexist.com
[05:56:32] <vms14> which creates random persons for you
[05:57:12] <vms14> so you can have ceo of the enterprise, a secretary or whatever the person google has created looks like
[06:05:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:11:27] <vms14> gilberth: https://github.com/larsbrinkhoff/lbForth 
[06:11:27] -ixelp- GitHub - larsbrinkhoff/lbForth: Self-hosting metacompiled Forth, bootstrapping from a few lines of C; targets Linux, Win [...]
[06:11:50] <vms14> This is a self-hosted implementation of Forth, which can regenerate itself from Forth source code. The bootstrapping process uses a metacompiler written in Lisp to target a small inner interpreter and a handful of code words written in C.
[06:12:31] <vms14> A new metacompiler written in Forth generates an x86 executable using using assembly language code words.
[06:12:58] <vms14> so yes, forth can generate a new forth
[06:21:21] <gilberth> This is not what I meant. Not a Forth implementing Forth, but data being code at runtime. Like CL:COMPILE or even CL:EVAL.
[06:22:35] <gilberth> As (compile nil '(lambda () (+ x 1)) gives you a new function. As [ 1 /add cvx ] cvx does in PS.
[06:23:39] <gilberth> So my question was, has Forth a function that would turn some data into a new function? Specified.
[06:24:50] <gilberth> Not whether I could write a Forth interpreter in Forth. Or a compiler living in some other environment.
[06:25:31] <gilberth> Rather trageting some other environment.
[06:29:24] <vms14> I think yes, but cannot really arge why or how
[06:29:30] <vms14> argue*
[06:30:00] <gilberth> In PS [ and ] are used to construct an array. [ pushes a mark and ] gathers everything on the stack up to the mark and gives you an array. cvx makes sth executable. You could also say [ 1 2 add /add cvx ] cvx which turns into { 3 add }, which is procedure adding 3. When you invoke it the 1 2 add isn't evaluated, it's evaluated at the time you construct that array.
[06:30:53] <gilberth> vms14: If you can, the standard must have a primitive for that. That was my question. If it doesn't have a primitive, it doesn't count as it is not part of the language proper.
[06:48:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[06:50:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:53:23] <hayley> https://www.youtube.com/watch?v=0AW-14o2puM
[06:53:23] -ixelp- The Everlasting - YouTube
[07:03:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[07:06:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:13:27] * hayley read ISMM 1995 proceedings cause Henry Baker edited them.
[07:14:12] <hayley> Something like "Compile time garbage collection for a lazy language" which suggested reusing cons cells as you destructure them. So functional but in place is olde. But I still cannot use it because I want a working debugger.
[07:18:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:21:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:52] <sm2n> That is pretty cool
[07:23:05] <sm2n> Do you have a copy you can link? sci-hub is failing me
[07:24:11] <hayley> Nope, I had to go through university sadly.
[07:26:13] <sm2n> oh
[07:27:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:29:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:43:55] <vms14> I'm the only one who dreams with replacing emacs some day?
[07:44:31] <vms14> I use it cause I didn't find something better
[07:44:52] <vms14> always wanted a cl one
[07:45:00] <sm2n> You may want to talk to this guy named beach
[07:45:01] <vms14> and that's your fault gilberth 
[07:45:35] <vms14> oh yes they were some cl emacs
[07:59:07] <gilberth> My fault? I am innocent.
[08:01:32] <gilberth> Cloning GNU Emacs is a lost cause. I once contemplated that. And if anything is my fault, it is that Hemlock can survive with CCL.
[08:02:13] <gilberth> It begins with that I always have the impression that Emacs folks don't like CL, lexical scoping and window systems.
[08:02:53] <vms14> hayley: btw this is the bookmark for the night mode in the firefox pdf reader javascript:(function(){viewer.style = 'filter: grayscale(1) invert(1) sepia(1)';})()
[08:02:57] <gilberth> And they don't believe in Lisp in general and hack way too much in C.
[08:03:07] <edgar-rft> vms14: have you already tried to replace emacs with notepad.exe?
[08:06:47] *** Joins: semz_ (~semz@user/semz)
[08:07:32] <gilberth> And look at epoch and Lucid Emacs^W^WXEmacs. These guys had the better emacs, yet struggled to keep up with GNU Emacs. As I mentioned earlier mind "worse is better".
[08:08:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:09:17] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[08:10:10] <gilberth> We can't win as we are outnumbered. And no, I don't want CL to become popular.
[08:17:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:20:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[08:25:26] <ck_> notepad.exe is great, it has built-in timestamp functionality out of the box. wow.
[08:27:17] <hayley> It also barfs on "Bush hid the facts" sometimes.
[08:27:20] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:28:25] *** Joins: notzmv (~zmv@user/notzmv)
[08:37:19] *** Joins: dre (~dre@2001:8003:c932:c301:147f:456a:d163:a87f)
[09:04:28] <White_Flame> vms14: I'm no fan of emacs, either.  I just use it because it's the standard CL dev environment
[09:29:00] <mfiano> Would anyone be up for helping me to writing a recursive macro?
[09:32:43] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[09:33:01] *** Joins: robin (~robin@user/terpri)
[09:34:28] <aeth> Emacs keys? Great fun. Emacs the program? Eh... it has gotten better since I first used it. Syntax highlighting, a "package manager", etc.
[09:35:42] <aeth> The main advantage to Emacs vs alternatives seems to me to be that you can use a full-featured graphical version of the client while also using an in-terminal version of it (emacs -nw) when you need an in-terminal editor (such as via ssh) while retaining most of the features and (almost) all of the muscle memory (unlike having to switch to vim for that use case).
[09:36:44] <aeth> This also means that its code is probably a gigantic mess because it needs to be written for two very different environments.
[09:37:47] <aeth> mfiano: I can give my general advice for complicated macros, which is to move almost all of the logic into helper functions (either inside of an EVAL-WHEN or in a separate file)
[09:38:07] <mfiano> aeth: https://gist.github.com/mfiano/3bba464ecea166a19a3d53fab407831b
[09:38:08] -ixelp- scratch.lisp Â· GitHub
[09:38:08] <aeth> That or LET also avoids the ` inside of a ` inside of a ` mess
[09:40:42] <aeth> mfiano: where do you get with-color from and would it be possible to write a (with-color* ((color2 'color2) (color 3 'color3) ...) ...) that expands into the nested (with-color (color2 'color2) (with-color (color3 'color3) ...
[09:41:12] <mfiano> Not very feasible.
[09:49:36] <contrapunctus> o/
[09:51:39] <hayley> \o
[09:51:57] <aeth> \o/
[09:52:57] <contrapunctus> A CLIM question I'm too scared to ask in #clim - I see that McCLIM has a PDF backend. Does that mean that all one needs to write a PDF viewer in McCLIM is a PDF parser?
[09:54:26] <hayley> I understand that as "McCLIM can generate a PDF document", not necessarily being able to read them.
[09:56:00] <aeth> PDF supports JavaScript, right? So... McCLIM should be able to compile the interactive program into a PDF, right? :-p
[09:56:35] * hayley uploaded an image: (41KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/leJVqUnrVFdmktfYyJUeTgIp/before-and-after-google.jpg >
[09:56:45] <contrapunctus> ,shoot aeth 
[09:56:53] <contrapunctus> hayley: cool...
[09:57:11] <contrapunctus> So one requires a parser as well as a renderer.
[09:58:05] <contrapunctus> I think I got thrown off by the PostScript stuff, because the examples seem to be rendering PostScript in a McCLIM GUI.
[09:59:09] <contrapunctus> (package `:clim-demo.drawing-tests` )
[10:09:38] <hayley> gilberth: Before I get, look for "Why do you use left-handed pointer syntax?" in https://buildyourownlisp.com/faq
[10:09:38] -ixelp- Frequently Asked Questions â¢ Build Your Own Lisp
[10:09:50] <hayley> "For a learning resource I believe picking the left-handed version was the best approach. Once comfortable with the method behind C's declaration syntax, I encourage programmers to migrate toward the right-handed version."
[10:09:53] <hayley> AAAAAAAAAAAAAaaaaaaaaaaaaaaaa
[10:10:18] <hayley> s/I get/I forget/
[10:16:43] <moon-child> gilberth: I do not think there is a single 'forth'; rather, forth is a loosely defined collection of languages that share some common traits.  I think many forths are capable enough to turn data into code, but I do not know
[10:17:11] <hayley> https://www.youtube.com/watch?v=19bhY6xHqHo
[10:17:12] -ixelp- Careful With That Axe, Eugene (BBC Radio Session, 16 July 1970) - YouTube
[10:18:25] <moon-child> hayley: aaaarghhh why am I rereading this
[10:18:46] <moon-child> 'Secondly it is more consistent. It no longer requires the concept of Macros, but instead transforms quoted expressions to become the dominant, more powerful concept that does everything needed by either. With Q-Expressions there are only Functions and Expressions, and the language is even more homo-iconic than before.'
[10:18:48] <hayley> I say we make an entry for the book and its author on the SCP wiki.
[10:18:53] * hayley muscle-memory typed "SICP wiki". Erm.
[10:18:54] <moon-child> 'Finally, Q-Expressions are distinctively more powerful than Macros. Using Q-Expressions it is possible to pass an argument to a function that evaluates to a Q-Expression, making input arguments capable of being dynamic. In conventional Lisps passing an expression to a Macro will always pause the evaluation, and so the arguments cannot be dynamic, only symbolic.'
[10:19:03] <moon-child> I mean, f*xprs are there if you want them... ...
[10:19:23] <hayley> You censor out that?
[10:19:31] <moon-child> I dare not speak that name here
[10:19:41] * hayley bonks moon-child with the RÂ¯Â¹RS spec
[10:19:57] <hayley> Er, RÂ¯Â¹RK
[10:22:43] <hayley> Reminds me of one thing: that scripting language for a Garry's Mod plugin that I despise could legitimately be called an "interpreted language" to an extent, I think. There is an "op" quota, and if you exceed it, your program is killed. You have to count ops, no matter if you constant fold, unroll, or do any tricks.
[10:22:51] <hayley> But, then again, it wouldn't be hard to fudge the op count. Just a passing thought.
[10:23:21] <moon-child> are you allowed 'data'?
[10:23:24] <moon-child> could build an interpreter
[10:25:04] <hayley> I can, but at the moment I am being bothered with optimising tight loop code written in that damn language. So I have to do loop invariant code motion myself.
[10:26:56] <hayley> Though it is not worth my brain CPU time, it's funny that you simply cannot manipulate so-called "S-expression" lists, and most expressions are going to be those. So much for "more homo-iconic" [sic].
[10:27:34] <hayley> I didn't know they could make a book that gives you brain damage until Mr Daniel Holden showed it was possible.
[10:57:00] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[11:03:47] <mfiano> color science is filled with these strange constants. I just discovered this happy accident. Wonder how they derived it as such: https://gist.github.com/mfiano/d5a7ba5e3d955558e337956760bdd166
[11:03:47] -ixelp- *sly-mrepl for sbcl*.txt Â· GitHub
[11:05:03] <mfiano> oh 216/27 is 8. i didn't notice the num/den were the same flipped
[11:14:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:19:04] *** semz_ is now known as semz
[11:19:38] *** Joins: shka (~herr@109.231.3.55)
[11:26:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[11:44:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:47:40] * semz clicks to check what "left-handed pointer syntax" is
[11:48:14] <semz> ...wow.
[11:48:36] <semz> That bikeshed is a full blown garage
[11:58:44] <gilberth> moon-child: I see. To be fair there are also many flavors of Lisp. But I take that EVAL/COMPILE is not a common feature of Forth. I skimmed the ANS(I) draft, there is an EVALUATE primitive, but it's not clear to me, if it can return subroutines. It also is not clear to me whether subroutines are first class even. The list of data type doesn't mention them.
[11:59:34] <moon-child> ANSI is definitely not popular among forth programmers, I can tell you that much
[12:00:06] <moon-child> and: usually forth is bootstrapped from a small number of 'words' (not unlike lisp in that respect)
[12:00:23] <mfiano> When you see "C sin H", without any parens in a formula, should I assume to take the sine of H?
[12:00:51] <moon-child> that would be my interpretation
[12:00:57] <moon-child> C times the sine of H
[12:01:04] <mfiano> Ok just checking
[12:03:09] <gilberth> moon-child: So, it makes it harder for me to judge whether Forth can generate Forth code. In a structured fashion even that is not from a character string. However when that would be common feature, we wouldn't ponder about it that much.
[12:08:50] <hayley> Someone told someone else to type "quit" into the Source console, and that latter someone did it. I can't even
[12:09:17] <gilberth> You can't?
[12:10:14] <moon-child> hayley: did you know that, if you press alt+f4, you will get infinite monies?
[12:10:26] <hayley> moon-child: You get free diamonds.
[12:10:44] <gilberth> hayley: Try +++ ATH then. Be sure to wait a little after you typed +++.
[12:11:20] <hayley> "Apparently, for some time a number of Hayes employees would post to the Usenet with strings like "+++ATH" in the text.[8] This would cause a TIES modem to hang up.[9]" lol
[12:12:09] <gilberth> There needs to be a pause between +++ and ATH, that's the in-band signaling for out-of-band data.
[12:12:25] <hayley> If you have a modem with https://en.wikipedia.org/wiki/Time_Independent_Escape_Sequence then not.
[12:13:23] <gilberth> Oh, that's awful. Heh, at least I made look up what ATH means.
[12:14:20] <gilberth> Here is another trick: ~.
[12:19:38] <moon-child> Recently, I actually wanted to type ~. at the beginning of a new line over an ssh connection, and completely forgot it was interpreted specially
[12:21:32] <gilberth> ssh does that too?
[12:23:15] <hayley> lol
[12:26:25] <moon-child> who else does it?
[12:26:55] <gilberth> Oh, does also do ~+ ? Can I use Z-Modem over ssh?
[12:27:01] <gilberth> moon-child: man cu
[12:27:26] * hayley would make a joke about crashing a remote server by sending NUL, but doesn't feel like it.
[12:34:30] <gilberth> hayley: That would be a bug and not a feature.
[12:34:57] <hayley> gilberth: I once could crash one of Drew Devault's servers by sending a NUL to it. 
[12:35:09] <hayley> Apparently it broke some bookkeeping somewhere.
[12:35:18] <gilberth> Yes, you keep repeating yourself.
[12:36:34] <dave0> hi gilberth, how are you?
[12:37:42] <gilberth> dave0: I am fine, but disappointed about the so called storm. Can it me that news tries to be a bit hysteric and exaggerate?
[12:38:02] <dave0> gilberth: perish the thought!
[12:38:04] <gilberth> * it be ; me/be dyslexia strikes again.
[12:38:10] <hayley> https://www.youtube.com/watch?v=lnGD8RI0kGQ
[12:38:10] -ixelp- King Crimson - indiscipline (Live In Frejus 1982) - YouTube
[12:39:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:39:07] <dave0> gilberth: i had a pretty good saturday.. i bought my friend a new tv and i got his old one... and also we had a burger for lunch
[12:39:56] <gilberth> dave0: Well that is a difficult topic. (1) warnings about storms or floods are now so common that you tend to ignore them. (2) for the last summer flood because of hefty rain there was no warning in time.
[12:40:36] *** Joins: treflip (~user@user/treflip)
[12:40:37] <dave0> gilberth: what do you think is causing it? maybe global warming?
[12:41:01] <dave0> we had a wet summer
[12:41:45] <gilberth> So authorities tend to warn, when there is nothing particular unusual. Which leads to people not taking warnings serious. Would this have been a real storm surge, people would have ignored it. It was a storm surge, but nothing happens. We can take the 3m higher water than usual with ease.
[12:42:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[12:43:06] <gilberth> dave0: I don't believe we see global warning yet. I believe we see way more hysteric news coverage. Look at the calendar, we have February. A little wind isn't unusual here at that time of year.
[12:43:19] <gilberth> * warming ;lol
[12:43:35] <dave0> we're a bit like that with bushfires
[12:43:50] <gilberth> I can imagine that.
[12:43:53] <dave0> "worst bushfire season ever" even though we have them since thousands of years
[12:45:13] <gilberth> There is another thing: News coverage is way more global these days. If there is some flood in a remote distant part of the world, I read in the news about it and TV -- which I don't watch -- broadcasts pictures. I believe it wasn't that way in the 80s, say.
[12:45:50] <edgar-rft> worse than the fires when earth still was a cooking lava ball?
[12:45:53] <gilberth> So at any given time, there is some strong weather somewhere on the globe. News reporting about it may give you the impression that the world is falling apart.
[12:45:55] <dave0> internet made the world a bit smaller
[12:46:11] <dave0> gilberth: the last thing i remember was the volcano in tonga
[12:47:26] <gilberth> And in general, I tend to not read too much news. I read news every morning to stay informed but I do so very selective.
[12:48:05] <dave0> gilberth: meh
[12:48:21] <dave0> gilberth: the ukrane thing is the latest du jour
[12:48:34] <gilberth> And for foreign affairs I don't particular trust the news. In general German news isn't bad, but you get some different impression when you talk to people at a particular region.
[12:49:23] <gilberth> dave0: For the Urkane, I believe the western world is a bit hysteric, too.
[12:51:12] <ck_> it was worse with georgia, when us-americans thought it meant georgia, their part of the union
[12:51:32] <gilberth> But then I don't like all the kindergarten about Nord Stream 2. Politics decided that burning Russian gas would be better than nuclear power, so then why all the kindergarten then? The pipeline is ready to use, we have a natural gas shortage, so why don't we use it dammit. And in general I believe in peace by trade.
[12:52:10] <gilberth> ck_: lol. Indeed. As I read about the Georgia confusion, I was falling of my chair. Best joke ever.
[12:55:22] <aeth> ck_: reunite the two Georgias
[12:55:42] <gilberth> aeth: I owe me a new keyboard.
[12:55:53] <ck_> hwhy?
[12:56:32] <gilberth> I was laughing and by that spitting coffee all over. That's why.
[12:56:41] <ck_> just now?
[12:56:54] <gilberth> Now and back then.
[12:58:01] <dave0> you need a keyboard condom :-)
[12:58:07] <gilberth> I mean, how could you really believe that the Russians conquer a part of the US in the middle of the nation? Ok, not right in the middle, granted.
[12:58:32] <ck_> that already assumes more thought than went on in these people's minds
[12:58:43] <gilberth> dave0: I am a master at spilling beverages over my keyboard. So I actually keep spare keyboard. And I once destroyed my MacBook with some wine.
[12:58:57] <dave0> gilberth: ehehe whoops!
[12:59:35] <ck_> here's just the thing https://www.keyboardco.com/keyboard/antibacterial-sterileflat-backlit-medical-keyboard.asp
[12:59:36] -ixelp- Antibacterial SterileFlat Backlit Medical Keyboard : SF20BL : The Keyboard Company
[13:00:11] <gilberth> Right.
[13:00:29] <ck_> or get one of those flexible ones. terrible to use, but definitely spillproof
[13:01:00] <ck_> or, final link I promise, look at this https://www.amazon.de/dp/B085M6B64R
[13:01:04] <ck_> quite cheap too
[13:01:28] <gilberth> Won't solve the laptop issue. That was a pretty expensive mishap. You could usually rinse keyboards and just let them dry.
[13:02:00] <ck_> I spilled some coffee into my laptop once as well. but it was a thinkpad so ther wasn't much damage
[13:02:33] <gilberth> Because the thinkpad was not worth it or because the thinkpad was so robust?
[13:04:01] <gilberth> Anyhow, I was unlucky, the so called "logic board" was bricked. And you can't even quickly pull the battery before the beverage makes it to the electronics.
[13:04:21] <gilberth> Otherwise it wouldn't have been a problem.
[13:06:16] <ck_> the latter, they have spill channels and separate the logic from the keyboard by a plate
[13:06:38] <gilberth> The have spill channels? That's nice.
[13:07:28] <ck_> https://www.youtube.com/watch?v=j_tBsMCNEa0
[13:07:28] -ixelp- Water Test of Working Thinkpad T61 - YouTube
[13:08:48] <gilberth> Wow. A laptop made for me! A macbook will definitely not survive.
[13:09:07] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[13:09:35] <ck_> I'm not sure about the current models
[13:09:45] <gilberth> Incredible to see how the water exits the machine at the bottom.
[13:10:20] <ck_> https://www.notebookcheck.net/fileadmin/_migrated/pics/ttastdet5_01.jpg
[13:11:05] <gilberth> Heh, they even marked the drain. Nice, really nice.
[13:11:59] <ck_> great device, I still have the T60, but it isn't really comparable to modern machines
[13:12:20] <ck_> weighs a ton, loud as hell, very bad integrated graphics adapter
[13:13:20] <gilberth> I never owned a Thinkpad, but I once used one and the one thing I would love to have is this little red "joystick" for the mouse. What's it called again?
[13:14:02] <aeth> All laptops used to have one. Before the trackpads
[13:14:11] <aeth> gilberth: lots of names for it. https://en.wikipedia.org/wiki/Pointing_stick
[13:14:32] <gilberth> aeth: I was late with laptops.
[13:14:48] <ck_> https://xkcd.com/243/
[13:14:49] -ixelp- xkcd: Appropriate Term
[13:15:35] <gilberth> Heh.
[13:16:30] <gilberth> Is there any topic without an xkcd about?
[13:16:55] <aeth> yes, I had to link to Wikipedia (which I found through the "ThinkPad" article as they're the last laptop OEM to still include them) because I only remembered the crude names
[13:25:29] *** Joins: notzmv (~zmv@user/notzmv)
[13:31:28] <ck_> last oem laptop, sure?
[13:33:48] <ck_> this isn't a recent example of that series ("hp elitebook") , but the latest ones still also have one https://www.notebookcheck.net/fileadmin/_processed_/csm_20151211_104113_34520c77d9.jpg
[13:34:07] <ck_> you'll note how absolutely terrible the keyboard layout is other than that though
[13:39:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[13:40:30] *** Joins: aeth (~aeth@user/aeth)
[13:42:18] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:46:45] <hayley> https://octordle.com/?mode=daily
[13:46:45] -ixelp- Octordle
[13:49:50] <aeth> I've been playing quordle like a peasant
[13:50:17] <dave0> i feel like i'm missing out
[13:52:08] <aeth> PIANO is a good word to open with on these multiword variations ime
[13:52:11] <aeth> get all the vowels
[13:52:23] <aeth> maybe UNITE for the #2 to get the other vowels
[13:52:51] <aeth> currently, I've been doing PIANO, EVERY, UNITS. That'll get R, S, T, vowels. Two E's isn't a disadvantage because a lot of words have two E's
[13:54:13] <dave0> i heard you're not allowed to write BLACK because it's racist
[13:55:06] *** Joins: eugercek (~user@user/eugercek)
[13:55:18] * hayley plays quordle
[13:55:24] <hayley> I have 3/4 and one row to go. Shit.
[13:56:47] <hayley> Oh crap, I got it on my last go. Whew!
[13:57:01] <hayley> https://pastebin.com/xAstJ0XL
[13:57:01] -ixelp- Daily Quordle #268ï¸â£9ï¸â£7ï¸â£4ï¸â£quordle.comâ¬â¬â¬â¬ð¨ â¬â¬ð¨â¬ð¨ð©ð©â¬â¬â¬ â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ - Pastebin.com
[13:58:51] <gilberth> You broke my internet, I get squares, more squares, with hex digits.
[13:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:10:22] *** Joins: cosimone (~user@93-47-228-207.ip115.fastwebnet.it)
[14:16:33] <selwyn> yeah quordle is great
[14:18:42] <hayley> It appears that if you get the HL2 car at just the right angle, it will spin on its side instead of flipping itself back upright.
[14:18:56] <selwyn> how many hours of gmod do you have?
[14:19:33] <hayley> 628 since 2015.
[14:20:11] <aeth> that's low
[14:20:27] <aeth> anyone who has gmod in their Steam history usually has 9,999
[14:22:13] <aeth> probably more now
[14:22:46] <aeth> Add GNU Emacs to Steam and only open it via Steam so you can track your hours in the only game that matters.
[14:24:40] <ck_> oh man :( what a sad thought
[14:24:55] <ck_> "[your friend] is playing [software development job]"
[14:25:06] * hayley uploaded an image: (6KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/IqfukyGEiHzIqqbePQOWhWFp/Screenshot_2022-02-19_22-05-05.png >
[14:25:11] <selwyn> can't wait to find out how many writing hours i have
[14:25:12] <hayley> You joke, but...
[14:25:20] <hayley> And I've seen VS Code interact with Discord. You can even see the file name they're editing!
[14:25:24] <hayley> Usually "app.py" or smth.
[14:25:26] <selwyn> what
[14:25:30] <moon-child> ^
[14:25:48] <moon-child> I also have questions
[14:26:01] <selwyn> clearly this is what lisp needs to be doing
[14:26:12] <hayley> I have annoyed some vim fans with this method of launching.
[14:26:43] <hayley> But I also have Emacs bound to S-t, so literally anything else is slower to start Emacs from.
[14:31:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:31:44] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[14:43:16] <hayley> https://tokio.rs/blog/2022-02-announcing-tokio-metrics massively inferior cleavir-meters
[14:43:16] -ixelp- Announcing Tokio Metrics 0.1 | Tokio - An asynchronous Rust runtime
[14:43:51] <hayley> *cleavir-meter, I usually use decentralise-utilities:define-time-meter
[14:44:13] <hayley> And Cleavir got it from Multics, because of course it did.
[14:47:26] <hayley> "Once you start collecting metrics, you will be able to answer questions like: - Are my tasks running for too long without yielding?" Poor questions.
[14:51:58] <selwyn> what do people actually do on gmod
[14:52:01] <selwyn> ive never played it
[14:52:21] <hayley> I feed bread to geese.
[14:52:24] <moon-child> isn't it a sandbox-type game?
[14:52:29] <hayley> Yes.
[14:53:46] * hayley uploaded an image: (661KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/nGGlVzsnqNkKnAkHJhPlPJPm/gm_construct0016.jpg >
[14:54:59] <selwyn>  https://garry.blog/motivation
[14:55:00] -ixelp- Motivation - Garry's Blog
[14:55:06] <selwyn> honestly thought he was talking about crablang
[14:58:19] <selwyn> cl-steamworks is based off of garry's reverse engineering of steamworks
[15:02:56] <contrapunctus> selwyn: thanks for sharing; the portfolio post on that site gave me new insight in resumÃ©-writing.
[15:05:37] <gilberth> hayley: No pony rather?
[15:06:46] * hayley uploaded an image: (224KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WdMzdPmBfCEdYEtScNHLoBMg/gm_eagconstruct_v20024.jpg >
[15:21:29] <selwyn> contrapunctus: happy to help
[15:26:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:31:45] <hayley> https://www.youtube.com/watch?v=pqSEJw1vCyI
[15:31:46] -ixelp- Would you like to sign my petition? - YouTube
[15:32:48] <selwyn> is that lara croft
[15:33:03] <shka> it is postal 2 dude
[15:33:25] <shka> https://www.youtube.com/watch?v=yzQ9ADQgLfk&list=PLjpAzVTa-X3T-p3OYqKHncP2JwoPJNHTl
[15:33:25] -ixelp- Pro Postal - Monday - Reupload - YouTube
[15:34:02] <shka> https://github.com/marcoheisig/numpy-file-format/pull/9
[15:34:03] -ixelp- Handle endianness (on the input side) and also allow for reading on streams by sirherrbatka Â· Pull Request #9 Â· marcohei [...]
[15:34:12] * shka is a productive member of the community
[15:34:34] <shka> selwyn: "bastion of bad taste"
[15:34:43] <shka> yes, that's postal 2
[15:36:10] * hayley regrets nothing
[15:36:23] <shka> oh really 
[15:36:34] <shka> hayley: play postal 3
[15:37:20] <hayley> No.
[15:38:06] <shka> that would give you some regrets for sure :P
[15:56:27] *** Joins: random-nick (~random-ni@87.116.179.129)
[16:04:11] <hayley> Postal 4 seemingly costs money.
[16:10:18] <selwyn> i wonder if the cyberpunk 2077 patches will improve its reputation
[16:10:41] <ck_> probably yes
[16:15:15] <ck_> but it won't reach what it was before release in my opinion. maybe it's nostalgia, but "back in the day", when what you thought about a game followed from the game itself and not promotional material, the world was a better place [dramatization]
[16:19:34] <shka> selwyn: the problem with CP is that it is not a well designed game
[16:19:56] <shka> it would be way better if they would quit that looting shooting shit
[16:21:00] <shka> i would personally even prefer disco elysium style of gameplay over that
[16:22:54] <shka> such a beautiful game https://www.youtube.com/watch?v=zTLIjfJVDOc
[16:22:55] -ixelp- Disco Elysium ~ Ancient Reptilian Brain ~ Bloated Corpse Of A Drunk - YouTube
[16:38:44] <ck_> that's what I meant. Deus Ex had a great story, and if you treated it like a shooter it sucked
[16:42:08] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:49:38] <selwyn> shka: did you play it?
[16:49:46] <shka> a little bit
[16:49:52] <selwyn> cp i mean
[16:49:55] <shka> yeah
[16:49:59] <shka> i got it
[16:50:10] <shka> i mean, you don't ask if somebody played deus ex
[16:50:13] *** Joins: razetime (~quassel@117.254.35.46)
[16:51:12] <shka> selwyn: so in summary, if the whole game was like that crucifixion quest, it would fucking rock
[16:52:31] <shka> and to be fair, it is visually impressive
[16:52:56] <shka> but there is simply focus on stuff that i have less interest in 
[16:53:18] <shka> and execution is... not perfect
[16:53:28] <selwyn> visually impressive is boring nowadays
[16:53:47] <shka> insert obligatory cruelty squad reference 
[16:54:13] <selwyn> and not necessarily due to plateauing of visual improvements
[16:54:37] <selwyn> i played black mesa recently, and the xen levels were simply stunning
[16:54:43] <shka> anyway, if CP would have a narrower scope, and simply focus on the stories in the cyberpunk world, it would work way better then what it is right now
[16:55:04] <ck_> does it have good polish audio (did you try it?)
[16:55:13] <selwyn> not because of the rendering, or whatever, but because they were made by people who clearly had a passion for world building and detail, with a coherent artistic direction
[16:55:44] <shka> ck_: sure it has, and witcher 3 in Polish sounds WAY better 
[16:56:03] <shka> selwyn: again, insert cruelty squad reference 
[16:56:36] <shka> C O H E R E N T
[16:56:40] <shka> xD
[16:58:20] <shka> https://www.youtube.com/watch?v=lQVlT1qtr0w
[16:58:21] -ixelp- Witcher III - English vs Polish - YouTube
[16:58:29] <shka> english sounds so try-hard
[16:58:42] <shka> Polish is natural 
[17:00:34] <ck_> to you
[17:00:48] <selwyn> i've noticed this in some bilingual tv shows and films i've watched recently
[17:01:01] <selwyn> i don't think it is the fault of the (voice) actors
[17:01:18] <selwyn> so much as writing dialogue in two languages seems to be really, really hard
[17:01:43] <shka> ck_: no, i mean, gerald sounds like he is actually being himself,
[17:02:08] <ck_> to my ears, both sound similarly theatrical
[17:03:05] <shka> i also like yennefer voice more 
[17:03:09] <selwyn> metro 2033 didn't sound that weird when i started playing it in english
[17:03:39] <selwyn> but you have to play a game set in the apocalyptic moscow metro with english subs :)
[17:34:52] <selwyn> disco elysium will get adapted for tv
[17:56:40] <shka> huh, really?
[17:57:20] <selwyn> https://www.pcgamer.com/amazon-signs-deal-with-studio-producing-disco-elysium-and-life-is-strange-shows/
[17:57:20] -ixelp- Amazon signs deal with studio producing Disco Elysium and Life is Strange shows | PC Gamer
[17:58:09] <shka> cool
[17:59:36] <selwyn> it might suck
[17:59:55] <shka> sure
[17:59:59] <shka> i may be also good
[18:02:21] <shka> or have a one good season :P
[18:03:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:05:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:09:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:13:54] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[18:32:06] *** Joins: treflip (~user@user/treflip)
[18:47:46] *** Joins: jeosol (~jeosol@user/jeosol)
[18:51:53] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 256 seconds)
[18:53:43] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[19:18:04] <pl> Their Wot adaptation was great for 6/8ths,then totally fucked up finale 
[19:20:38] <selwyn> u wot m8
[19:20:54] <shka> wheel of time most likely
[19:21:19] <pl> Yep 
[19:21:31] <ck_> ifuckinfiteyourswearonmemum
[19:25:15] <pl> Well, they fucked over the plot line, hard 
[19:25:52] <shka> "see hard fucking on the amazon prime!"
[19:26:53] <pl> I could excuse everything else (casting was actually great, even if it stretched things at times), I guess props could have been better, it's the butchery of finale that I have issues with 
[19:27:27] <selwyn> i suspect its down to the huge budgets they have available for productions
[19:27:50] <selwyn> they can afford to take questionable decisions if it means that only some things will end up really good
[19:28:06] <pl> shka: more like "do you want to feel fucked without any gentleness or lube?" 
[19:28:08] <selwyn> and people will watch shows that finish badly anyway, because they are already interested in them
[19:28:21] <pl> selwyn: arguably WoT was pretty low budget 
[19:28:52] <selwyn> ok, but how much money does amazon spend on all of their shows combined
[19:29:19] <pl> Yes, but that's not an excuse to botch individual shows 
[19:30:18] <selwyn> no
[19:32:05] <shka> first season of "the boys" was pretty good
[19:32:22] <shka> second was just a failure
[19:32:32] <shka> and nothing makes sense in that show anymore
[19:34:10] <selwyn> thats a shame
[19:34:16] <selwyn> i also heard it was good in the first season
[19:34:25] <shka> it was decent
[19:34:41] <shka> arguably started strong, and ended weak
[19:35:09] <shka> a shame because the whole concept was pretty interesting
[19:39:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:40:56] *** Joins: aeth (~aeth@user/aeth)
[19:43:15] *** Joins: tane (~tane@user/tane)
[20:00:24] <pl> Well, you don't have to wait till s2 for show to stop making sense in case of WoT 
[20:00:32] <pl> At least if you know the books 
[20:14:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:16:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:38:44] *** Quits: razetime (~quassel@117.254.35.46) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:07] *** Joins: razetime (~quassel@117.254.35.46)
[20:43:44] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:00] *** Joins: razetime (~quassel@117.254.35.46)
[20:44:10] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:33] *** Joins: razetime (~quassel@117.254.35.46)
[20:45:05] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:52:14] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:52:42] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:29:56] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 256 seconds)
[21:45:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:47:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:48:19] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:07:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:09:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:11:31] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:9e4:e295:e419:65fb)
[22:12:56] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[22:23:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:25:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:35:48] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[22:44:13] *** Joins: McParen (~McParen@user/mcparen)
[22:51:29] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:10:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[23:20:50] *** Joins: notzmv (~zmv@user/notzmv)
[23:27:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[23:32:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:53:37] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:58:31] *** Quits: cosimone (~user@93-47-228-207.ip115.fastwebnet.it) (Remote host closed the connection)
