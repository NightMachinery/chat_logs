[00:00:06] <afidegnum> how do i add the dictionary from the inner loop to the existing one?
[00:00:32] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 272 seconds)
[00:00:35] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:00:38] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[00:00:52] <Payam> you are creating a dictionary for each value of d?
[00:00:52] *** Joins: greedom (~greedom@2001:16b8:2ea7:af00:c1d7:12ae:83a2:190d)
[00:01:16] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:01:47] <matsaman> afidegnum: I mean the only difference is the (el)if condition & the for loop
[00:01:50] <bjs> afidegnum: do you mean to do `mydict = {}`  *inside* the loop?
[00:02:02] <bjs> why not just have 1 dict you keep adding to
[00:02:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:02:30] <afidegnum> bjs: i don't understand
[00:02:48] <bjs> afidegnum: inside the loop you have `mydict = {}`,  this creates a new dict and throws away the old one
[00:03:04] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[00:03:40] <bjs> afidegnum: or maybe I misunderstand what you think the problem is?
[00:03:46] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[00:03:52] <afidegnum> bjs: even from the outer loop too, i'm facing the same issue. the objective is to print a list of dictionaries, after traversing the items
[00:04:23] <bjs> afidegnum: well your program doesn't create any lists anywhere, so I don't see how it'd print a list of dictionaries out
[00:04:44] <bjs> afidegnum: maybe I should ask, the output at the bottom of your paste,  what is wrong with it?
[00:04:52] <afidegnum> sorry i mean dictionaries from line
[00:05:15] <bjs> afidegnum: from line?  what is "line"?
[00:05:24] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 252 seconds)
[00:06:29] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[00:07:02] <Payam> Is this setup correct? I get an error saying that could not find src : https://bpa.st/I2QA
[00:07:05] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[00:07:17] *** Joins: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at)
[00:07:20] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[00:07:44] <bjs> Payam: that console_scripts line looks weird `sokbostad=src.sokbostad.__main__:main`  is your package really called "src" ?
[00:07:46] <afidegnum> bjs: here is the update. https://dpaste.org/Yu9M#L10 values from z supposed to part of the existng dic
[00:08:05] <Payam> bjs, it is the location of the __main__ script
[00:08:11] *** Quits: greedom (~greedom@2001:16b8:2ea7:af00:c1d7:12ae:83a2:190d) (Remote host closed the connection)
[00:08:15] <Payam> seen from root
[00:08:40] <bjs> Payam: are you sure "src" is really the name of your package and not just the directory that _contains_ the "sokbostad" package.
[00:08:49] <bjs> Payam: are you supposed to `import sokbostad` or `import src` to use it?
[00:08:53] <Payam> it is the directory
[00:08:57] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:08:57] *** Joins: greedom (~greedom@2001:16b8:2ea7:af00:c1d7:12ae:83a2:190d)
[00:09:07] <Payam> no
[00:09:16] <bjs> Payam: no to which?
[00:09:24] <Payam> from setup file?
[00:09:44] <bjs> Payam: no I mean,  your package,  it gets installed and then you can import it
[00:09:50] <bjs> are you supposed to import it like `import sokbostad`
[00:10:18] <bjs> afidegnum: you updated the lines at the bottom but I don't really understand where they're coming from? Which print() is making those lines?
[00:10:25] <Payam> I never done it. I use `from src.sokbostad.Byggvesta import Byggvesta`
[00:11:02] <bjs> Payam: are you sure "src" isn't just supposed to be the "source" folder, which contains the package
[00:11:14] <Payam> it is the source folder yes
[00:11:18] *** Joins: c10l (~c10l@89.34.167.207)
[00:11:21] <Payam> it is just a folder
[00:11:26] *** Quits: mattil (~mattilinn@87-92-172-201.rev.dnainternet.fi) (Quit: Leaving)
[00:11:34] <bjs> Payam: so then you'd import it like `from sokbostad.Byggvesta import ...`
[00:11:35] <bjs> not from src
[00:11:43] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[00:11:47] <bjs> Payam: and the console_scripts line shouldn't mention src
[00:11:55] <afidegnum> values from "z" at line 10 have their results at the bottom of the line from
[00:12:04] <afidegnum> line 24
[00:12:13] <bjs> afidegnum: from z?  but how do you know? you don't even print z
[00:12:17] <Payam> but if I want to import something to setup.py then I should have from src.sokbostad.byggveta
[00:12:21] <afidegnum> that's what i wanted to be part from mydict
[00:12:43] <bjs> Payam: where are you importing things in setup.py ? you shouldn't be importing the package in __init__.py and even if you were, no you wouldn't do that
[00:13:07] <bjs> afidegnum: but where did those lines come from? There is no line in your program that prints them out
[00:13:12] <bjs> did you just make them up? or guess?
[00:13:16] <afidegnum> I commented it
[00:13:21] <bjs> afidegnum: commented what?
[00:13:39] <Payam> bjs, no! I meant that when you say "import packages" do you mean importing inside the source code ? because it is relative. It means importing to where
[00:13:41] <afidegnum> sorry, there was a typo. it was "t" changed to z
[00:13:52] <afidegnum> to avoid name clash
[00:14:03] <bjs> afidegnum: ... a typo where?  Maybe you should re-paste showing the actual program and the actual output of the print()s in the program
[00:14:25] <Payam> bjs,  If I were to import something for instance in Akelius. I would do from Byggvesta import Byggvesta
[00:14:39] <bjs> Payam: no that's not how relative imports work in Python
[00:15:05] <bjs> Payam: you'd do `from sokbostad.Byggvesta import Byggvesta`  (or `from .Byggvesta import Byggvesta`)
[00:15:19] <Payam> if Byggvesta is a class inside Byggvesta.py and If I were to import the class to Akelius (that is also a file in the same directory)
[00:15:31] <bjs> Payam: your setup.py doesn't (and really shouldn't) import the package
[00:15:33] *** Joins: y04nn (~y04nn@91.193.4.154)
[00:15:50] <bjs> Payam: and `src` isn't a part of the name of the package (you wouldn't mention "src" when importing it)
[00:15:56] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 244 seconds)
[00:17:22] <Payam> okey I think I undrestand
[00:17:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[00:17:38] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:17:43] <Payam> but why does my code work by having from Akelius import Akelius`
[00:17:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:17:51] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[00:18:05] <matsaman> Payam: probably because it requires Akelius
[00:18:32] <twomoon> how do i match "CA", "California", or "CALIFORNIA"? is the code just "if ("CA" or "California" or "California") in string: " ?
[00:18:44] <bjs> Payam: probably because you're running it like `python3 sokbosta/Akelius.py`
[00:18:52] <twomoon> "if ("CA" or "California" or "CALIFORNIA") in string: "
[00:18:55] <bjs> but that's not the same as importing and then all the imports break when you do that.
[00:19:00] <matsaman> twomoon: convert to lowercase or uppercase first?
[00:19:04] <Payam> yes I think
[00:19:06] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[00:19:07] <matsaman> twomoon: and then slice?
[00:19:11] <matsaman> there are lots of ways
[00:19:16] <Payam> no I don't
[00:19:18] <Payam> bjs,
[00:19:33] <twomoon> something weird happened when i used 'or'
[00:19:50] <twomoon> I am worried I don't understand 'or' fully yet in python =P
[00:19:55] <The-Compiler> twomoon: that doesn't do what you think it does, yes :)
[00:20:36] <matsaman> twomoon: for example: 'CALIFORNIA'.lower()[:2] == 'ca'
[00:20:42] <The-Compiler> twomoon: the parts in parentheses get evaluated first, so ("CA" or "California" or "California") evaluates to True (because those strings are non-empty, and thus truthy); and your condition ends up as "if True in string:"
[00:20:44] <bjs> Payam: well, or you’re doing something similar and running the file directly not importing it. importing isn’t the same as just running is my point
[00:20:48] <Payam> bjs, I changed the setup and still get an error saying 'could not find sokbostad. ModuleNotFoundError: No module named 'sokbostad' https://bpa.st/D22A
[00:20:57] <Yhg1s> The-Compiler: not True, "CA".
[00:21:04] <The-Compiler> Yhg1s: true
[00:21:25] <twomoon> ahh thanks The-Compiler
[00:21:47] <The-Compiler> twomoon: what Yhg1s said - it evaluates to the first truthy value, thus "CA", and you end up with    if "CA" in string:
[00:21:49] <twomoon> matsaman, thanks for the idea to use .lower()
[00:21:53] <The-Compiler> my bad :)
[00:22:17] <twomoon> oh i see. that explains everything suddenly hehe
[00:22:39] <The-Compiler> twomoon: the right way to do what you've done above would be to say    if "CA" in string or "California" in string or "CALIFORNIA" in string:
[00:22:49] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[00:22:50] <matsaman> if you did it that way
[00:22:59] <matsaman> which I wouldn't, personally, very long winded
[00:23:13] <matsaman> but there's more than one way to do it!
[00:23:15] <The-Compiler> twomoon: or you could do      if any(s in string for s in ["CA", "California", "CALIFORNIA"]):
[00:23:17] <matsaman> this is #perl rite? =P
[00:23:20] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 272 seconds)
[00:23:29] <The-Compiler> twomoon: but yes, like matsaman and others said, there are probably easier ways to do this still :)
[00:23:58] <The-Compiler> matsaman: agreed, I'm just trying to explain why what twomoon did originally didn't work out
[00:24:00] <jinsun> Payam: you need to add packages=find_packages(where-"src") inside your setup() https://setuptools.readthedocs.io/en/latest/userguide/package_discovery.html#using-find-or-find-packages
[00:24:48] <matsaman> The-Compiler: certainly $
[00:25:06] <bjs> Payam: "still" get an error? you never mentioned this error so far.  But as jinsun says you're not actually telling setup.py about the sokbosta package.
[00:25:10] <jinsun> Payam: I mean where="src"
[00:25:18] <The-Compiler> matsaman, twomoon: Though   'CALIFORNIA'.lower()[:2] == 'ca'   would also match with, say, "Caronlina"
[00:25:33] <The-Compiler> (err, Carolina, but you get the point)
[00:25:54] <twomoon> oh crap i didn't consider that
[00:25:57] <twomoon> that's not good
[00:26:38] <The-Compiler> twomoon: what's the strings you're dealing with? Do you really need to know if those things are anywhere in there, or do they have some structured form?
[00:26:48] <matsaman> twomoon: there is probably a library somewhere, that matches full state names to official abbreviated state names
[00:26:59] <matsaman> not that it'd be hard to put together your own dictionary for that
[00:27:01] *** Joins: qlixed (~qlixed@181.44.129.13)
[00:27:02] <twomoon> it's state data, and yes "Carolina" could be in there
[00:27:14] <The-Compiler> yeah, but how does 'string' look like?
[00:27:21] <twomoon> it seems that only these appear: CA, ca, California, or CALIFORNIA
[00:27:21] <matsaman> it's just a list of 50-55 or so, after all
[00:27:42] <matsaman> twomoon: so broadly, what are you doing?
[00:27:46] <bjs> can you normalise the string first, to turn names of states into their two letter codes and then do the simpler logic
[00:27:49] *** Quits: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[00:28:10] <Non-ICE>  .lower()
[00:28:23] <twomoon> I'm adding up the data in column 27 but only when column 11 specifies "CA/ca/California/CALIFORNIA"
[00:28:44] <The-Compiler> twomoon: so, do you really need in, or do you need ==?
[00:28:58] <matsaman> twomoon: well you can either distinguish between california and carolina, or you can't
[00:29:02] <The-Compiler> twomoon: because   'ca' in 'carolina'  would of course be True too
[00:29:05] <twomoon> yeah == is better. like what you said earlier
[00:29:09] <twomoon> kinda verbose but better
[00:29:15] <The-Compiler> why verbose?
[00:29:18] <matsaman> twomoon: if it'll always be the full state name, there's not much reason to use an abbreviation, no?
[00:29:21] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:152b:157f:3f41:6e81)
[00:29:37] <The-Compiler> twomoon: With ==, you could use   string in ["CA", "California", "CALIFORNIA"]
[00:29:39] <twomoon> if "CA" in string or "California" in string or "CALIFORNIA" in string or "ca" in string:
[00:29:45] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:29:56] <Non-ICE> 'ca' would be in 'carolina' too
[00:30:00] <The-Compiler> twomoon: that's still using 'in', and the   "ca" in string   part would match for carolina too
[00:30:02] <SnoopJ> neat, one of the pygame maintainers thinks that libsdl2 incompatibility is actually a bug in the library's error reporting :)
[00:30:18] *** Joins: mickey (~user@user/mickey)
[00:30:36] <twomoon> oh i see The-Compiler , sorry I am slow today
[00:30:53] <twomoon> yes you are right matsaman
[00:31:04] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:152b:157f:3f41:6e81) (Read error: Connection reset by peer)
[00:31:13] <matsaman> but basically you need to be sure of your data first
[00:31:18] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:31:24] <matsaman> so get every unique state field value, and see if there are 50
[00:31:38] <matsaman> look at the rare values, see if they should be something else
[00:32:14] <matsaman> and then you'll obviously have to deal with outliers that aren't officially states but always show up in such lists
[00:32:15] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:ce3:eccc:9d90:1542)
[00:32:17] <matsaman> like DC, guam, etc.
[00:32:36] <afidegnum> bjs: here is my situation https://dpaste.org/M0hP
[00:32:54] <Payam> thank you bjs . I works very good . But there is one more thing if you could point me to right direction.
[00:33:10] <Payam> Is it possible to install requirements while instaling the .deb package?
[00:33:15] <bjs> afidegnum: what happened to the mydict.update(t) line that was in your old paste?
[00:33:18] <twomoon> matsaman the data looks pretty clean, it's not a huge set. Guam is possible but I don't see it in this set
[00:33:31] <twomoon> it's just that states can be spelled out or abbreviated
[00:33:32] <Payam> I already have "install_requires" but it didn't install the packages
[00:33:37] <twomoon> if i use .lower() there are only two possibilities
[00:33:38] <bjs> Payam: i know nothing about .deb packages,  presumably .deb packages aren't going to play nicely for `pip`
[00:34:18] <bjs> afidegnum: (or whatever variable name it had there)
[00:34:30] *** Quits: goode_bye (~goode_bye@2600:1700:17c8:8e0:811f:38f0:9754:3a0e) (Quit: Client closed)
[00:34:33] <matsaman> twomoon: so back to the california vs carolina question
[00:34:40] <afidegnum> bjs: I have reupdated everything so it can be clearer
[00:34:45] <twomoon> does this work: "if row[11].lower() == "ca" or row[11].lower() == "california":  " ?
[00:35:00] <bjs> afidegnum: anyway, what do you want the *output* to be? dicts have unique keys so if you keep updating with a dict with a "tag" key you just keep over-writing the old value
[00:35:15] <matsaman> twomoon: do you have 'SC' and 'NC' for the carolinas, or something horrible like 'CA'? =P
[00:35:31] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[00:36:00] <matsaman> anyway, the real problem with this system is that you shouldn't allow abbreviations or full names in the first place, you should only allow one, and it should be from a list so you don't get different formats and misspellings
[00:36:03] <afidegnum> wait a sec, a typo somewhere, https://dpaste.org/WW3O
[00:36:19] <twomoon> matsaman, I just have "North Carolina", "South Carolina", "NC", "SC", "nc", or "sc"
[00:36:42] <twomoon> i do not see "NORTH CAROLINA" or "SOUTH CAROLINA" but i suppose those are possible given that "CALIFORNIA" is present
[00:36:47] <afidegnum> bjs: thanks for updating, I forgot that, what's the best approach?
[00:36:49] <matsaman> cool, so 'ca' for carolina probably isn't an issue, and you can probably match against any full name or any official USPS abbreviation
[00:37:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 276 seconds)
[00:37:18] <twomoon> you're right matsaman maybe i should regularize the data set first
[00:37:20] <bjs> afidegnum: you mentioned you wanted a list earlier,  why not do that? make a list of dicts, or make a "tag": [list of tags] ?
[00:37:33] <bjs> i dont know which is more appropriate
[00:37:45] <matsaman> twomoon: https://www.google.com/search?q=python+states+usps+abbreviations&btnI
[00:38:03] <matsaman> twomoon: well you need to have an idea of how regular or messy it is
[00:38:12] <matsaman> sounds like, despite having both abbreviations and full names, that it's not bad
[00:38:36] <matsaman> it'd be worth knowing if any items have non-official USPS state abbreviations, or misspelled or non-official spellings in the full name form
[00:38:49] <afidegnum> bjs: i'm making entires into a graph db, i want to find it easier to define the relationships and iterate on them
[00:38:54] <matsaman> in short, take the dictionary from that link right there ^ loop through the data and see if anything doesn't match
[00:39:00] <twomoon> it's not bad but this particular data set is small and a bigger data set of the same type could have more possibilities
[00:39:01] <matsaman> or just use it to fail against if not matching
[00:39:12] <twomoon> thanks matsaman
[00:39:15] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:39:28] <matsaman> and if you can do anything about the original data having so many varieties of state input, and control that better, that'd be worthwhile too
[00:39:33] <afidegnum> bjs: while making an entry, i want to pass in the last inserted id to the next iteration
[00:39:42] <twomoon> I hadn't considered American Samoa, Guam, etc
[00:39:44] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Quit: brb, sex)
[00:39:54] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 240 seconds)
[00:40:06] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[00:40:23] *** Joins: oriba (~oriba@dynamic-077-011-024-104.77.11.pool.telefonica.de)
[00:40:24] <matsaman> well either it's a place you ship to or deal with or whatever, or it's not
[00:40:26] <twomoon> oh I guess Northern Mariana Islands, Puerto Rico, and Virgin Islands are also possible
[00:40:37] <matsaman> if you ship to or deal with anyplace, then you can get a list of anyplace
[00:40:47] <twomoon> those are definitely possible but haven't arisen before
[00:41:16] <matsaman> and then you can always fail on an unknown and forward to a human
[00:41:26] <matsaman> and then account for it in the code in future
[00:41:26] *** Quits: withered_wolf (~withered_@111.sub-174-192-82.myvzw.com) (Remote host closed the connection)
[00:42:55] <twomoon> thanks matsaman
[00:43:11] <matsaman> mmhmm, what the channel's for =)
[00:44:00] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Client Quit)
[00:44:22] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[00:44:24] <afidegnum> bjs: what approach do you suggest for such issue ?
[00:44:56] *** Quits: zrsm (~mrrobot@173.171.254.123) (Quit: BitchX: the original point-and-click interface.)
[00:45:09] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[00:45:34] *** Quits: y04nn (~y04nn@91.193.4.154) (Remote host closed the connection)
[00:47:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[00:47:40] *** Joins: marduk8 (~marduk@172.58.187.158)
[00:47:44] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 258 seconds)
[00:47:44] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:49:15] *** Joins: marduk5 (~marduk@172.58.190.163)
[00:50:15] *** Joins: pacbard (~pacbard@user/pacbard)
[00:51:04] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[00:51:19] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:52:02] *** Quits: marduk (~marduk@172.58.187.100) (Ping timeout: 268 seconds)
[00:52:02] *** marduk5 is now known as marduk
[00:52:42] *** Quits: marduk8 (~marduk@172.58.187.158) (Ping timeout: 252 seconds)
[00:53:17] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[00:55:12] *** Quits: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[00:57:54] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[00:58:29] *** Joins: rany_ (~rany@user/rany)
[00:59:26] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[00:59:27] *** rany_ is now known as rany
[01:03:04] *** Quits: twobitsprite (~isaac.fre@cpe-173-95-153-183.nc.res.rr.com) (Ping timeout: 258 seconds)
[01:05:13] *** Joins: Samian (~Sami@2620:10d:c091:480::1:385b)
[01:07:24] *** Joins: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at)
[01:08:04] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 256 seconds)
[01:08:10] *** Joins: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de)
[01:10:20] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:ac5e:9636:3230:157a)
[01:10:46] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:12:21] *** Joins: seednode (~seednode@user/seednode)
[01:13:27] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[01:15:29] *** Quits: seednode (~seednode@user/seednode) (Client Quit)
[01:16:13] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:20:58] *** Quits: Payam (~Payam@c-39bfe255.01-402-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[01:23:01] *** Joins: LiftLeft (~LiftLeft@138.199.10.4)
[01:24:23] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[01:25:13] *** Joins: seednode (~seednode@user/seednode)
[01:25:19] *** Joins: rany (~rany@user/rany)
[01:25:32] *** Joins: bboles (~bboles@64.94.212.195)
[01:26:26] *** audio is now known as audiocat
[01:26:44] *** Joins: drd (~drd@151.37.160.53)
[01:27:38] *** Quits: Allegretto (~allegrett@94-21-139-70.pool.digikabel.hu) (Ping timeout: 255 seconds)
[01:27:50] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[01:28:07] <hans> why does this segfault? python3 -c "(i for i in []).throw(type('E', (BaseException,), dict(__new__=lambda cls, *args: cls))())"
[01:28:53] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 252 seconds)
[01:32:27] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[01:32:34] <KirkMcDonald> hans: I don't know, specifically, aside from "because of a bug."
[01:33:00] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 272 seconds)
[01:33:12] <KirkMcDonald> I will say that __new__ method seems malformed, in that it does not return an instance of the exception type, but rather just returns the type. So this is unlikely to come up in "real" code.
[01:34:01] <SnoopJ> It looks like it's faulting in an XDECREF. https://bpa.st/HJ2A
[01:34:15] <SnoopJ> (that's 3.9.4)
[01:35:34] *** Quits: Narrat (~omnius@p200300df5f45d8ce06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:37:49] <jinsun> I remembered seeing that before, it is from here https://old.reddit.com/r/programming/comments/ecdhpm/make_cpython_segfault_in_5_lines_of_code/fbb5wzk/
[01:38:13] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:38:29] <jinsun> the github gist linked in the post goes into some detail (which I never understood)
[01:38:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:39:26] <jinsun> https://gist.github.com/coolreader18/6dbe0be2ae2192e90e1a809f1624c694
[01:39:31] <SnoopJ> looks like the fix has been languishing: https://github.com/python/cpython/pull/17658
[01:39:54] *** Joins: Allegretto (~allegrett@94-21-172-215.pool.digikabel.hu)
[01:41:36] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:44:20] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 272 seconds)
[01:47:34] *** Joins: schumaml1 (~schumaml@dslb-092-074-010-232.092.074.pools.vodafone-ip.de)
[01:47:47] *** Joins: twobitsprite (~isaac.fre@cpe-173-95-153-183.nc.res.rr.com)
[01:50:06] *** Quits: schumaml (~schumaml@dslb-188-104-191-129.188.104.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[01:51:22] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 272 seconds)
[01:53:07] *** Joins: Oddity (Oddity@user/oddity)
[01:53:53] *** Quits: arnzzz (~arnzzz@cpc76484-cwma10-2-0-cust118.7-3.cable.virginm.net) (Quit: Leaving)
[01:54:10] <SnoopJ> jinsun, I think I grok it: it's calling `BaseException_set_tb()` on an object that isn't actually an exception. That function modifies the `traceback` pointer stored on an exception, and decrements the reference count of the value at the end of the old pointer. If it's not an exception, it's treating some other data as a pointer and violating segmentation while doing the decref.
[01:54:32] *** Quits: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[01:55:17] <SnoopJ> In other words, `(PyBaseExceptionObject* obj)->traceback` is garbage if `obj` isn't actually safe to cast that way.
[01:55:35] <SnoopJ> (might be missing some parens there but hopefully the point is clear)
[01:56:43] <jarthur> I have a somewhat naive question about pip. Why does it sometimes build a wheel from an sdist instead of building an egg or plain runtime package dirs?
[01:58:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[01:58:24] <SnoopJ> jarthur, eggs are deprecated so far as I know. Not sure about the rest of the question.
[01:58:33] <matsaman> 'cause it's inconsistent and silly
[01:58:41] <matsaman> there are params to make it more consistent
[01:59:27] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[02:00:14] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[02:01:06] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[02:02:17] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[02:02:17] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[02:02:18] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[02:03:22] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[02:03:39] <madprops> how do I specify the PIL.Image type (annotation) ?
[02:04:00] <SnoopJ> madprops, the type is PIL.Image.Image
[02:04:06] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[02:04:25] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[02:04:45] <madprops> thanks
[02:05:48] *** Joins: schumaml2 (~schumaml@ipservice-092-211-206-206.092.211.pools.vodafone-ip.de)
[02:05:50] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[02:06:46] <disi> is there a way to atomically add to a set, emitting an error if the element already exists?
[02:07:14] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:07:22] *** Joins: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at)
[02:07:51] *** Quits: schumaml1 (~schumaml@dslb-092-074-010-232.092.074.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[02:09:00] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:09:44] <jinsun> SnoopJ: okay, I think I get it (mostly), good explanation, so it is possible to pass non exception to set_tb, but it does the decref assuming that it gets an exception, and the fix is to do a type check
[02:10:06] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[02:11:26] *** Quits: greedom (~greedom@2001:16b8:2ea7:af00:c1d7:12ae:83a2:190d) (Remote host closed the connection)
[02:12:12] <SnoopJ> disi, doesn't seem like any of the instance methods do it. I guess short of GIL trivia, you need your own lock.
[02:12:23] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[02:12:43] <disi> wah wah
[02:12:43] <SnoopJ> or maybe some Cython
[02:12:47] <disi> SnoopJ: thanks
[02:15:05] *** Joins: TML (~tml@user/tml)
[02:15:59] *** Quits: jay-m126_ (~jay-m@129.0.204.218) (Ping timeout: 250 seconds)
[02:17:06] *** Quits: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255) (Quit: WeeChat 3.2)
[02:17:34] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[02:18:45] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 265 seconds)
[02:19:48] <madprops> I don't get why an instance of mageDraw.Draw(img), like draw.text(...) shows the warning "Type of "text" is partially unknown"
[02:19:54] <madprops> ImageDraw*
[02:20:16] <madprops> this is from PIL
[02:20:33] <madprops> draw.text((x - 1, y), top_text, font=font, fill=shadowcolor, align="center")
[02:20:48] <SnoopJ> disi, what's the use-case? I'm trying to think of when I'd want to do this and the examples I'm coming up with are things where acquiring a lock probably makes sense anyway.
[02:22:13] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[02:22:24] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:c50d:e168:3f25:ee18) (Ping timeout: 272 seconds)
[02:24:00] <SnoopJ> madprops, are you using PIL or Pillow? I don't see that warning in Pillow
[02:24:35] <jinsun> that is a pyright warning
[02:24:47] <madprops> SnoopJ, I'm importing through 'PIL' buuut I think what I installed from pip3 is Pillow
[02:25:36] <madprops> Requirement already satisfied: pillow in /usr/lib/python3/dist-packages (7.0.0)
[02:26:12] <jinsun> probably you will have to fix the annotations for pilllow, there are some parts that don't have annotations, or don't use strict mode in vscode when working with PIL
[02:26:30] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[02:26:37] <SnoopJ> hmm, removed since 7.0.0 maybe? that's an older version.
[02:26:44] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[02:27:36] *** Joins: p-i-_ (~Ohmu@node-3bg.pool-1-0.dynamic.totinternet.net)
[02:27:38] <SnoopJ> I don't see it in 7.0.0 either. madprops can you check PIL.__file__ after importing it?
[02:27:59] <madprops> I just updated it to 8.3.1
[02:28:23] <SnoopJ> You should probably check anyway, I'm not sure which of them wins out if you have both installed.
[02:28:47] <madprops> i used the --upgrade flag
[02:28:59] <madprops> still getting the warning after vscode restart though
[02:29:04] <SnoopJ> madprops, I mean both Pillow and PIL.
[02:30:18] *** Quits: p-i- (~Ohmu@node-12gc.pool-118-173.dynamic.totinternet.net) (Ping timeout: 240 seconds)
[02:30:21] <SnoopJ> ...oh, I understand, the warning isn't from the library.
[02:30:28] *** Quits: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de) (Quit: Leaving.)
[02:31:03] <jinsun> yup, it is vscode
[02:31:13] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[02:31:39] <SnoopJ> madprops, do you have types-Pillow installed? https://pypi.org/project/types-Pillow/
[02:32:32] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[02:32:38] <madprops> SnoopJ, installed it. restart vscode, but it keeps getting highlighted
[02:32:51] <madprops> oh should I import them?
[02:33:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:33:21] <madprops> btw this is on strict mode
[02:33:28] <madprops> in vscode
[02:33:32] <SnoopJ> madprops, no, mypy should be able to find them. It could be that vscode is running mypy in a venv and you installed the stubs somewhere else.
[02:34:42] *** Joins: MrFantastik (~user@cpe-69-204-101-67.buffalo.res.rr.com)
[02:34:53] *** Quits: magla (~gelignite@55d4c33c.access.ecotel.net) (Quit: Stay safe!)
[02:35:04] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[02:35:27] <twomoon> does amazon collect sales tax on the shipping and handling fee?
[02:35:54] <twomoon> i'm struggling to explain why the average tax rate is greater than 10% when according to the internet the highest sales tax rate is 10% in california
[02:36:09] <twomoon> sorry off topic
[02:36:13] <SnoopJ> twomoon, which part of that is a Pytho--yea, that.
[02:36:16] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[02:36:19] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:36:31] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[02:36:36] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 276 seconds)
[02:38:03] <jinsun> does pyright even use those types-packages? I think it comes bundled with its own annotations, but maybe it will use those if it can find it
[02:38:24] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[02:39:26] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:39:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:39:56] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:40:51] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:42:36] <disi> SnoopJ: i'm implementing a check ID system (a la flake8's F100 or whatever), and i want to register check ids (strs) in a set (because they should be unique). ideally i could check/add atomically (but it's not practically a concern since this isn't concurrent... atm anyway)
[02:42:39] <jinsun> madprops: your problem is here I guess https://github.com/python/typeshed/blob/master/stubs/Pillow/PIL/ImageDraw.pyi#L57
[02:42:54] <jinsun> those args and kwargs don't have annotations
[02:43:22] <jinsun> and vscode strict mode requires that you do `*args: Any, **kwargs: Any` explicitly
[02:43:53] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[02:44:03] *** Joins: zebrag (~chris@user/zebrag)
[02:44:07] <madprops> i see
[02:44:17] <madprops> any way to fix it without turning strict off?
[02:45:20] *** Quits: rany (~rany@user/rany) (Ping timeout: 265 seconds)
[02:46:37] <madprops> or maybe i could add an exception for this file
[02:47:33] <jinsun> you can put # type: ignore comment after that line, but that will disable all messages for that line
[02:47:37] *** Quits: twobitsprite (~isaac.fre@cpe-173-95-153-183.nc.res.rr.com) (Ping timeout: 250 seconds)
[02:48:21] <madprops> something odd is that if I reduce the line to: draw.text((x - 1, y), top_text) , I still get the warning
[02:48:27] <jinsun> or you could find where the pyi file exists in your system, which vscode is using, and fix the annotations there and see if it works
[02:48:31] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[02:48:52] <jinsun> then send a pull request to typeshed
[02:48:55] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:c50d:e168:3f25:ee18)
[02:49:07] *** Joins: bninja (~bloodninj@user/bloodninja)
[02:50:16] *** Quits: drd (~drd@151.37.160.53) (Ping timeout: 272 seconds)
[02:50:17] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[02:50:18] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:51:58] *** Joins: drd (~drd@151.57.228.213)
[02:52:34] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 240 seconds)
[02:52:59] <Linux77> nice UGT cool friends, i have some pratice in programming and devel, but have a long time with don't build anything for web, now i have some works with it, i follow python evolution since begin, i never used django but have good knownledge about mvc's i have one library published under GPL3 on pypi,  now i am trying deploy an django app with nginx, any can help?
[02:53:26] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[02:53:56] *** Joins: c10l (~c10l@89.34.167.207)
[02:54:31] *** Quits: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[02:54:36] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:c50d:e168:3f25:ee18) (Ping timeout: 256 seconds)
[02:55:20] *** Quits: Akuli (~Akuli@87-94-111-243.bb.dnainternet.fi) (Quit: Leaving)
[02:57:18] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[02:58:02] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[02:58:17] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[02:58:45] <mat001> Hey. What does "blocking" mean in synchronous py queues. Let's say in Queue.get what does "block" argument actually blocking. The docs say "block if necessary until an item is available", but I don't get what this means. Is it blocking. Is getting item from the queue blocked?
[02:59:21] <mat001> I mean is it blocking getting an item from the queue?
[03:00:00] <KirkMcDonald> mat001: The Queue contains a mutex, and holds it during those operations. https://github.com/python/cpython/blob/3.9/Lib/queue.py#L42
[03:00:35] <SnoopJ> disi, gotcha.
[03:01:02] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:01:10] <disi> SnoopJ: fwiw, probably going with something like this: `d.setdefault(key, []).append(value); if len(d[key]) > 1: raise Exception`
[03:01:35] <mat001> KirkMcDonald: Thx, now I'm g oing to look up what "mutexs" are ;-)
[03:01:47] <KirkMcDonald> mat001: It's a thread lock.
[03:01:54] *** Joins: humberto1 (~humbertow@2806:107e:f:59bc:4856:116b:944e:4569)
[03:02:24] *** Joins: paravida (~myChateau@user/paravida)
[03:03:01] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:04:18] *** Quits: humbertowoody (~humbertow@2806:107e:f:6914:7cc0:2b40:8f32:ba9c) (Ping timeout: 240 seconds)
[03:04:30] <jinsun> madprops: if you are fine with adding ugly comments to your code, you can add a comment `# pyright: reportUnknownMemberType=false` on the line where you are using draw.text
[03:05:03] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[03:06:22] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[03:06:28] <jinsun> that is better than the # type: ignore comment because it will only silence that one stupid warning
[03:06:39] *** Joins: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at)
[03:06:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:07:18] <madprops> i'll use that, thanks
[03:07:27] *** roguelazer_ is now known as roguelazer
[03:08:22] <madprops> jinsun, that doesn't remove the warning, while #type: ignore did
[03:09:21] <madprops> maybe I'm not using pyright?
[03:09:22] *** Quits: junktext (~junktext@77.247.181.218) (Ping timeout: 240 seconds)
[03:10:06] <jinsun> madprops: hmm maybe, or a different pyright warning, see in the problems tab what exact warning you are getting
[03:11:37] <madprops> https://dpaste.org/mne5
[03:11:40] *** Joins: cjb (~cjb@user/cjb)
[03:12:12] *** Joins: korg815 (~korg815@user/korg815)
[03:12:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[03:12:38] *** Quits: drd (~drd@151.57.228.213) (Ping timeout: 258 seconds)
[03:12:42] *** Joins: c10l (~c10l@89.34.167.207)
[03:13:30] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:15:22] <jinsun> madprops: do "Copy" instead of "Copy Message" frm the problems tab to get more detailed information like the source of the warning
[03:15:34] *** Quits: philipp64|work (~philipp64@174.27.172.137) (Ping timeout: 256 seconds)
[03:16:17] *** Joins: drd (~drd@151.57.228.213)
[03:16:23] <jinsun> but that looks exactly like the pyright reportUnknownMemberType messaage, so that pyright comment should have disabled that
[03:16:51] <madprops> ahh that looks better https://dpaste.org/7T0S
[03:17:29] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:18:36] <jinsun> so source is Pylance, which uses pyright internally, as expected
[03:18:53] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[03:19:36] <jinsun> then # pyright: reportUnknownMemberType=false should have worked, works on my machine™ :)
[03:19:56] <madprops> if I run mypy --strcit I get: error: unused 'type: ignore' comment
[03:20:06] <madprops> with  # type: ignore
[03:20:13] <madprops> --strict*
[03:20:46] <jinsun> are you adding the comment on the same line or before? you have to add it on the same line as draw.text on the right
[03:21:06] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[03:21:26] <madprops> that's what i was doing. but now I added # pyright: reportUnknownMemberType=false on a line above it, and all warnings disappeared :o
[03:22:00] <madprops> maybe I did it wrong before
[03:22:18] *** Joins: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org)
[03:23:02] <jinsun> I think adding that before will disable is for all the lines below, and adding on the same line will disable it only for that one line
[03:23:05] *** Joins: sembiance (~sembiance@108.170.16.18)
[03:23:28] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[03:23:45] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[03:23:45] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[03:23:57] <sembiance> trying to just debug a package. got a folder named 'whatever' and trying `python -m whatever` says it can't find main. main is defined in whatever/cli.py  what CLI args do I need to pass so it will run whatever/cli:main ?
[03:24:49] *** Joins: junktext (~junktext@77.247.181.209)
[03:24:53] <sembiance> python isn't really my thing, but just trying to get some code running so I can fix a bug in a package that isn't really maintained anymore. been searching google for help for about 20 minutes.
[03:25:01] <jinsun> sembiance: add a __main__.py inside whatever and import your main function there and call it
[03:25:57] <sembiance> jinsun: k. So did this package creator do it wrong by sticking it in cli.py and having the setup.py do   entry_points={"console_scripts": ["whatever = whatever.cli:main"]}  ?
[03:27:21] <mat001> KirkMcDonald: thx. So queue holding a mutex (lock) means that only one thread is allowed to work on the operation to prevent the race condition. "Block" argument True would then mean implement the lock. The second argument "timeout" would mean "it blocks at most 'timeout' seconds" meaning the race condition, one-thread-operation is used for the duration of the timeout o[eration
[03:27:25] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:27:35] <jinsun> sembiance: no that is fine to do, just that without __main__.py you cannot do `python -m whatever`, you have to directly run `whatever` in your shell
[03:27:51] <jinsun> sembiance: after installing it with pip
[03:28:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[03:29:30] <mat001> KirkMcDonald: so when Block=False in Queue.get(Block=False), it means one can use threads but the lock is not used, so should be used when no risk of a race condition
[03:29:48] <sembiance> jinsun: that seems like it would make development really painful. wouldn't that mean after every code change you'd have to reinstall with pip just to test out the code?
[03:31:23] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[03:31:26] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[03:32:05] *** Joins: Roey (~Roey@user/Roey)
[03:32:15] *** Joins: philipp64|work (~philipp64@174.27.13.9)
[03:32:55] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:33:29] <jinsun> sembiance: you could install it in editable more with `pip install --editable` to avoid reinstalling, but for debugging I guess it would be better to have a __main__.py (not sure if we can debug those entrypoints directly)
[03:34:20] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[03:35:15] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[03:37:30] <sembiance> jinsun: k. I got it working by adding a __main__.py file. Thanks for your help, I appreciate. Now to figure out the bug. code is doing a re.sub() on a variable that is of type 'bytes' but it fails with 'cannot use a string pattern on a bytes-like object'. Probably need to convert the bytes into a string heh. time to do some googling :)
[03:37:44] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:800d:9af4:8534:b40)
[03:38:55] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[03:38:57] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:bd13:b917:7235:9b7c)
[03:39:00] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[03:40:00] *** Joins: korg815 (~korg815@user/korg815)
[03:40:26] *** Quits: drd (~drd@151.57.228.213) (Ping timeout: 265 seconds)
[03:41:49] <Repiphany> Are you trying to convert something from python 2 to 3
[03:42:50] *** Quits: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org) (Ping timeout: 272 seconds)
[03:42:52] <sembiance> Repiphany: nope. It's a python 3 module: https://github.com/dottedmag/archmage/issues/27
[03:43:37] <sembiance> this module depends on another pyhton Moduel pychm which wraps a lib chmlib. one of these must have change behavior at some point to maybe return a raw bytes array instead of a string, or so, that's that guess
[03:44:13] *** Joins: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org)
[03:44:28] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:bd13:b917:7235:9b7c) (Ping timeout: 256 seconds)
[03:44:40] *** Quits: junktext (~junktext@77.247.181.209) (Ping timeout: 272 seconds)
[03:46:58] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:ac5e:9636:3230:157a) (Quit: Leaving)
[03:47:18] <sembiance> or maybe it used to be a python 2 module. there are other places the author is doing a re.sub directly on a bytes array but not making all the arguments of type byte. I betcha that's the issue. thanks everyone for the help. I think I'm on the right path now :)
[03:51:40] *** Joins: tims (~tims@61.69.131.46)
[03:52:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[03:52:50] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[03:53:25] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[03:55:30] *** Quits: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[03:55:58] *** Joins: emika8 (~emika@83.136.182.54)
[03:56:46] *** Quits: emika (~emika@83.136.182.25) (Ping timeout: 272 seconds)
[03:56:46] *** emika8 is now known as emika
[03:57:12] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 276 seconds)
[03:57:48] <sembiance> yah, this is certainly a case of a module creator who just kinda half-assed the conversion from python2 to python3. I'm finding lots of places where it's still python2 type calls like str.join(data, "\n") instead of the other way around
[03:59:01] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:59:21] *** Joins: aeon_flux (~textual@d-207-244-191-202.fl.cpe.atlanticbb.net)
[04:02:45] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[04:02:47] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[04:03:35] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[04:04:48] *** Joins: c10l (~c10l@89.34.167.207)
[04:05:28] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[04:05:35] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Client Quit)
[04:06:16] *** Quits: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com) (Ping timeout: 272 seconds)
[04:06:42] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 240 seconds)
[04:07:01] <Yhg1s> sembiance: that's not particularly python2, unless it's 'string' instead of 'str'.
[04:07:37] <stealth_> wow, does `asyncio` get `events.get_running_loop()` for every event call?
[04:07:46] *** Joins: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at)
[04:09:46] *** Joins: dg_dg (~dg_dg@84.252.92.10)
[04:10:07] <stealth_> and its based on pid? so you can't do https://bpa.st/HOBQ
[04:10:19] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[04:11:20] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[04:11:39] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[04:11:43] <Yhg1s> stealth_: the error there has nothing to do with the pid. It's to do with only having one running event loop. asyncio.run() in a coroutine doesn't make sense (you would just 'await hi()' instead.)
[04:11:51] *** Quits: dgdg (~dg_dg@84.252.92.15) (Ping timeout: 265 seconds)
[04:12:37] <stealth_> Yhg1s, you can only have 1 `asyncio.run` per  pid according to its code
[04:13:10] <stealth_> sometimes, you might want another event loop run to get something
[04:14:28] <Yhg1s> stealth_: that depends on the event loop that's used. And yes, you can have multiple loops, but not with asyncio.run.
[04:14:42] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[04:15:28] <Yhg1s> stealth_: asyncio.run is a top-level conveniency function for starting a new event loop, run it until a coroutine is complete, and then closing the loop.
[04:16:00] <stealth_> Yhg1s, i was wondering why asyncio was slower, making a syscall per event to get+check `os.getpid` can be expensive
[04:16:46] <Yhg1s> stealth_: I doubt it's a performance bottleneck, considering Python does significantly more work on *any* call than that one (usually cached, by libc) syscall.
[04:17:30] <stealth_> Yhg1s, well it adds up, they could have went about it differently
[04:17:44] <Yhg1s> stealth_: I'm sure patches are welcome.
[04:18:35] <Yhg1s> stealth_: what I'm saying, though, is that the small amount of time on getpid doesn't nearly add up as much as the many other things involved in calls.
[04:19:19] <stealth_> Yhg1s, i know what you are saying, i am just saying stuff like that adds up, maybe there are other things gong on as well. i just looked at that 1 part going wtf
[04:19:44] <Yhg1s> stealth_: have you actually measured the time spent on that call?
[04:19:50] <stealth_> Yhg1s, syscalls are expensive, last thing you need to do is call then on every event check!
[04:20:03] <Yhg1s> stealth_: is that a no? :)
[04:20:25] <stealth_> Yhg1s, why? common sense.
[04:21:09] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[04:21:31] <Yhg1s> stealth_: ok.
[04:21:52] <Byteflux> surely if it's so common, producing a benchmark that demonstrates what portion of time it adds up to under a reasonable workload would be trivial
[04:21:57] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[04:22:05] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[04:22:08] *** Quits: oriba (~oriba@dynamic-077-011-024-104.77.11.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:22:32] <Byteflux> usually that's how it works when you make assertions, you back it up.
[04:24:01] *** Joins: rany (~rany@user/rany)
[04:24:12] <stealth_> Yhg1s, for example i base mine on `id(run())`, this way you are only checking for `id` or the `run`, no need to make a syscall
[04:24:38] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[04:25:16] <stealth_> Yhg1s, also that previous code doesn't break
[04:25:23] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 265 seconds)
[04:25:27] <Yhg1s> stealth_: I'm sorry, I stopped caring.
[04:25:59] *** Quits: georgios (~georgios@2a02:587:a001:d91:55c3:9b1f:744:834d) (Ping timeout: 250 seconds)
[04:26:31] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[04:26:40] <stealth_> Yhg1s, i thought maybe i can get an opinion from another expert before making an actual suggestion to python dev
[04:27:06] <Yhg1s> stealth_: you already dismissed my suggestion.
[04:27:13] <Byteflux> benchmarks would at least be somewhat interesting, but "my way is better because i said so" is boring and unproductive.
[04:27:57] <stealth_> `syscall` vs `id` check! figure this would be obvious
[04:28:25] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[04:28:47] <Yhg1s> stealth_: do you know *why* you're seeing that getpid call?
[04:29:19] *** humberto1 is now known as humbertwooody
[04:29:54] <stealth_> Yhg1s, ?
[04:30:06] <Yhg1s> stealth_: so, no?
[04:30:29] <stealth_> Yhg1s, do tell
[04:31:46] <Yhg1s> stealth_: because you don't want to use a defunct event loop after a fork.
[04:32:07] *** Joins: mkv (~znc@ubuntu/member/m4v)
[04:32:11] <Yhg1s> stealth_: an identity check isn't going to help there.
[04:32:12] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[04:32:39] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[04:32:56] <stealth_> Yhg1s, that could be a possibility
[04:33:00] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:3052:bc6e:620e:8974)
[04:33:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:34:03] *** Joins: matsaman (~matsaman@user/matsaman)
[04:34:17] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 245 seconds)
[04:34:18] *** mkv is now known as m4v
[04:34:39] *** Joins: tpw_rules (~tpw_rules@li1059-135.members.linode.com)
[04:34:56] <Yhg1s> stealth_: before you try to figure out ways to get rid of the getpid call, I implore you to do the simple thing and benchmark it. Then comment out the getpid call in _asynciomodule.c and benchmark it again.
[04:35:19] *** Joins: ice9 (~ice9@user/ice9)
[04:35:29] <Yhg1s> stealth_: nobody is going to care about replacing the getpid call with other solutions if you can't show it to have significant impact.
[04:35:44] <tpw_rules> hello. how does python build sys.argv when running a module from a zip file? suppose i have coolprog.zip with a file named __main__.py which contains `import sys; print(sys.argv)`. then if i do python3 coolprog.zip blah, it just prints ['coolprog']. how do i get sys.argv to get the argument?
[04:36:08] <Yhg1s> tpw_rules: you should be getting that in sys.argv.
[04:36:36] <tpw_rules> i should be getting what, exactly?
[04:36:48] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[04:37:08] <stealth_> Yhg1s, this is why i am talking about it, cause other ppl will have a different input on it then me. you made a valid point, i would have to look into threadsafe part.
[04:37:14] <Yhg1s> tpw_rules: your sys.argv should be ['coolprog.zip', 'blah'] if you run 'python3 coolprog.zip blah'
[04:37:24] <tpw_rules> okay. then do you know why it is not?
[04:37:33] <Yhg1s> tpw_rules: not without seeing your actual code, no.
[04:37:53] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[04:37:54] <Yhg1s> stealth_: no, you have to look at *benchmarks*.
[04:38:34] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:3052:bc6e:620e:8974) (Ping timeout: 272 seconds)
[04:40:02] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[04:41:28] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[04:41:31] *** Joins: georgios (~georgios@2a02:587:a001:d91:55c3:9b1f:744:834d)
[04:42:02] *** Joins: dangrenier83 (~user@user/dangrenier83)
[04:43:24] <tpw_rules> oh i found the problem, it turns out the script was being extracted by something else and run without arguments... whoops
[04:43:27] *** Parts: tpw_rules (~tpw_rules@li1059-135.members.linode.com) (Textual IRC Client: www.textualapp.com)
[04:45:18] *** Joins: digilink (~digilink@user/digilink)
[04:46:23] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:47:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[04:47:44] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[04:47:45] *** Joins: kenoba (~kenoba@user/kenoba)
[04:48:13] *** Gustavo6046_ is now known as Gustavo6046
[04:50:39] *** Joins: monkey_ (~user@190.104.116.134)
[04:52:03] <stealth_> Yhg1s, i base mine of `id(ring)` not `run`, just correction. but ya i was more wondering why you couldn't have internal event-loop https://bpa.st/HOBQ
[04:52:03] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:52:18] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:54:59] *** Quits: y1n (~y1n@84-115-65-223.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[04:55:42] <stealth_> it sure it interesting, each event-manager design seems to have its own set of limits/features
[04:57:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[04:59:13] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 265 seconds)
[05:01:19] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[05:02:17] *** Quits: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71) (Read error: Connection reset by peer)
[05:02:20] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Read error: Connection reset by peer)
[05:02:21] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Read error: Connection reset by peer)
[05:02:21] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Write error: Connection reset by peer)
[05:02:21] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Read error: Connection reset by peer)
[05:02:21] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Read error: Connection reset by peer)
[05:02:21] *** Quits: jwon (~jwon@user/jwon) (Read error: Connection reset by peer)
[05:02:21] *** Quits: Helmholtz (~leibnizma@user/helmholtz) (Write error: Connection reset by peer)
[05:02:22] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Read error: Connection reset by peer)
[05:02:22] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Read error: Connection reset by peer)
[05:02:22] *** Quits: bgardner[m] (~bgardner@2001:470:69fc:105::8a8) (Write error: Connection reset by peer)
[05:02:22] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Write error: Connection reset by peer)
[05:02:22] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Write error: Connection reset by peer)
[05:02:22] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Write error: Connection reset by peer)
[05:02:23] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Read error: Connection reset by peer)
[05:02:23] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[05:02:23] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Write error: Connection reset by peer)
[05:02:23] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Read error: Connection reset by peer)
[05:02:23] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Read error: Connection reset by peer)
[05:02:23] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[05:02:23] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (Read error: Connection reset by peer)
[05:02:23] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Read error: Connection reset by peer)
[05:02:23] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Read error: Connection reset by peer)
[05:02:23] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Read error: Connection reset by peer)
[05:02:24] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Read error: Connection reset by peer)
[05:02:29] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[05:02:56] *** Joins: KeiraT (~k@lulzsec.co.uk)
[05:03:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:03:45] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[05:05:22] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[05:06:34] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 240 seconds)
[05:07:01] *** Joins: y1n (~y1n@84-115-65-133.wifi.dynamic.surfer.at)
[05:07:06] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:07:49] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:07:57] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[05:10:44] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[05:11:47] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:12:49] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[05:12:49] *** Joins: bgardner[m] (~bgardner@2001:470:69fc:105::8a8)
[05:12:49] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[05:12:49] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[05:12:49] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[05:12:49] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[05:12:49] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[05:12:49] *** Joins: jwon (~jwon@user/jwon)
[05:12:49] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[05:12:49] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[05:12:49] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[05:12:49] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[05:12:49] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[05:12:49] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[05:12:49] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[05:12:49] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[05:12:49] *** Joins: psydroid (~psydroid@user/psydroid)
[05:12:50] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[05:12:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[05:12:50] *** Joins: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71)
[05:13:03] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[05:13:03] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[05:13:18] <KombuchaKip> I'm using a tqdm progress bar. I've set leave=False, so it automatically removes itself from the terminal after it reaches a 100 %. However, if the user decides to abort with a keyboard interrupt (KeyboardInterrupt), I catch that exception and close() the progress bar. The progress bar remains at its incomplete progress on the terminal. How can I ensure it is fully removed in the except KeyboardInterrupt handler?
[05:14:32] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:15:34] <rndusr> is there a way to make an array the keys for a dictionary?
[05:15:46] <matsaman> but of course
[05:15:49] <KirkMcDonald> rndusr: Certainly; using which values?
[05:16:04] <rndusr> e.g. ["foo", "bar"] => {"foo": None, "bar": None}
[05:16:15] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[05:16:33] <KirkMcDonald> rndusr: dict.fromkeys(that_list)
[05:16:49] <rndusr> is dict included by default
[05:16:53] *** Joins: dgdg (~dg_dg@84.252.92.8)
[05:16:57] <KirkMcDonald> dict is a builtin, yes.
[05:17:03] <rndusr> cool
[05:19:43] <KirkMcDonald> KombuchaKip: I would expect that to work. It's hard to say more without seeing the code.
[05:19:45] <rndusr> followup
[05:19:54] *** Quits: dg_dg (~dg_dg@84.252.92.10) (Ping timeout: 258 seconds)
[05:19:56] <rndusr> using dict.fromkeys(list, value=[]) doesn't work
[05:19:59] <rndusr> how would I make that work?
[05:20:04] <rndusr> it throws a typeerror
[05:20:18] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[05:20:26] <KombuchaKip> KirkMcDonald: It could be not a tqdm problem, but just a fundamental limitation of the terminal.
[05:20:33] <KirkMcDonald> rndusr: dict.fromkeys(foo, []), but note that this will use the *same* list for each value.
[05:20:35] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 250 seconds)
[05:21:12] <KirkMcDonald> rndusr: If you want to make a new (mutable) object for each value, you may want a dict comprehension: {k: [] for k in that_list}
[05:21:28] <rndusr> KirkMcDonald: didn't know there were dict comprehensions
[05:21:29] <stealth_> rndusr, just go with `{i: None for i in ["foo", "bar"]}` if things are confusing
[05:21:34] <rndusr> nice
[05:21:51] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[05:22:16] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 272 seconds)
[05:22:28] *** Parts: sembiance (~sembiance@108.170.16.18) (thanks pythong)
[05:22:45] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 268 seconds)
[05:23:46] <rndusr> okay, another question
[05:24:11] <rndusr> i have an object that may or may not contain a method
[05:24:32] <rndusr> i ued hasattr to get the attr, but how do I programmatically execute the method?
[05:24:47] <rndusr> like, getattr(foo, "hi")()
[05:24:48] <grym> getattr(...)()
[05:24:50] <rndusr> oh
[05:24:53] <Repiphany> if callable(foo): foo()
[05:25:23] <KirkMcDonald> I would do: m = getattr(foo, "name", None); if m: m()
[05:26:48] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[05:27:02] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[05:27:58] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[05:29:02] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:29:40] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[05:30:28] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:33:53] *** Joins: whatsupdoc_ (uid509081@id-509081.stonehaven.irccloud.com)
[05:34:20] *** Joins: vlm (~vlm@user/vlm)
[05:35:29] *** Quits: zeenk (~zeenk@2a02:2f04:a211:a800:553b:3cb0:5ea1:7e83) (Quit: Konversation terminated!)
[05:37:07] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:f4b0:de96:75fe:6d99)
[05:37:23] <whatsupdoc_> Hi, anyone know why this code is slower than if I use Counter https://dpaste.org/c3NJ
[05:37:34] *** starship is now known as duracrisis
[05:37:39] <whatsupdoc_> collections.counter
[05:37:42] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[05:38:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[05:40:23] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[05:40:51] <mefistofeles> whatsupdoc_: I haven't checked in detail, but my first guess is that counter objects are basically optimized C objects for the job
[05:40:54] <ammar2> whatsupdoc_: what's the comparison collections.Counter based code?
[05:41:20] <ammar2> but aside from that, one obvious thing is that you're looking up elements again after doing a presence check
[05:41:35] <ammar2> and yeah, what mefistofeles said, Counter implements all this logic in C
[05:41:53] <whatsupdoc_> https://dpaste.org/VO0Z
[05:42:06] <AhmedAmerican> C is mostly mentioned in every Python topic :S
[05:42:38] <mefistofeles> that is, in the CPython implementation :)
[05:43:00] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[05:44:42] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:45:27] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[05:45:40] *** Quits: ckdcreation (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[05:45:58] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[05:46:30] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[05:46:49] *** Joins: Fiji (~Fiji@user/fiji)
[05:46:50] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[05:46:50] *** brabrax_ is now known as brabrax
[05:47:18] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[05:52:32] *** Joins: gggp (~gggp@123.116.95.154)
[05:52:58] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Read error: Connection reset by peer)
[05:54:04] *** Quits: kmh (~kmh@p200300df5f07d8004dd03bbe727dd565.dip0.t-ipconnect.de) (Quit: Leaving)
[05:54:49] *** Quits: y1n (~y1n@84-115-65-133.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[05:55:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:55:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[05:58:05] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[05:58:05] *** Jigsy` is now known as Jigsy
[06:00:02] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[06:00:03] *** Joins: pacbard (~pacbard@user/pacbard)
[06:01:00] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[06:02:36] *** Joins: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128)
[06:04:04] *** Quits: gggp (~gggp@123.116.95.154) (Read error: Connection reset by peer)
[06:04:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 258 seconds)
[06:05:31] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[06:06:36] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:08:01] *** Joins: y1n (~y1n@84-115-64-67.wifi.dynamic.surfer.at)
[06:09:39] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:15:17] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[06:15:21] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[06:20:45] <whatsupdoc_> How do you get a substring starting at index i that is length 2?
[06:21:30] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 276 seconds)
[06:21:42] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[06:22:37] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[06:23:40] *** drincruz_ is now known as drincruz
[06:24:03] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[06:24:06] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:f4b0:de96:75fe:6d99) (Ping timeout: 276 seconds)
[06:27:16] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[06:27:24] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[06:27:29] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[06:27:54] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[06:29:44] *** Gustavo6046_ is now known as Gustavo6046
[06:30:02] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 272 seconds)
[06:30:29] <BtbN> whatsupdoc_,  yourstring[i:i+2]
[06:31:34] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[06:32:02] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:32:02] <whatsupdoc_> oh duh
[06:32:24] <whatsupdoc_> thanks
[06:32:46] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 256 seconds)
[06:38:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[06:39:34] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:41:45] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[06:48:55] *** Joins: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au)
[06:49:22] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:3ceb:2a2f:fe5e:d7f4)
[06:49:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:49:44] *** FinnElija is now known as Guest7136
[06:49:44] *** Quits: Guest7136 (~finn_elij@user/finn-elija/x-0085643) (Killed (mercury.libera.chat (Nickname regained by services)))
[06:49:44] *** finn_elija is now known as FinnElija
[06:50:01] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:54:01] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[06:55:09] *** Quits: y1n (~y1n@84-115-64-67.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[06:55:51] <rndusr> is there a way to import modules using importlib inside a directory? i tried an os.chdir() but i got a ModuleNotFoundError
[06:57:16] <Repiphany> Adding the directory to sys.path
[06:58:37] <rndusr> ah
[07:04:13] *** Quits: flyback (~flyback@2601:540:8201:1e60:5500:eead:fb7e:80be) (Quit: Leaving)
[07:05:04] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:3ceb:2a2f:fe5e:d7f4) (Ping timeout: 256 seconds)
[07:06:51] *** Quits: V1mV1m (~VimVim@85.191.89.214) (Read error: Connection reset by peer)
[07:07:10] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:07:16] *** Joins: y1n (~y1n@84-115-64-67.wifi.dynamic.surfer.at)
[07:08:14] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 252 seconds)
[07:08:36] *** Joins: flyback (~flyback@2601:540:8201:1e60:8dfc:4aa1:a0b2:4985)
[07:09:31] *** Joins: zeden (~zeden@user/zeden)
[07:11:18] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[07:12:28] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[07:15:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[07:15:44] *** Joins: c10l (~c10l@89.34.167.207)
[07:21:18] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 276 seconds)
[07:24:54] *** Joins: d00gy (~d00gy@user/d00gy)
[07:26:16] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[07:27:20] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[07:28:51] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:34:10] *** Quits: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128) (Ping timeout: 240 seconds)
[07:34:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:36:34] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[07:37:41] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[07:38:51] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 276 seconds)
[07:39:16] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:40:58] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[07:43:27] *** Joins: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks)
[07:44:05] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:46:18] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 252 seconds)
[07:48:47] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:54:56] *** Quits: y1n (~y1n@84-115-64-67.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[07:55:37] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[07:56:48] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 272 seconds)
[07:57:25] *** Parts: nickodd (~nickodd@user/nickodd) ()
[07:58:39] <SnoopJ> rndusr, you can use importlib.machinery.PathFinder, too
[08:03:05] *** Joins: earthbreaker9000 (~earthbrea@li778-229.members.linode.com)
[08:03:19] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[08:04:07] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[08:05:34] *** Quits: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71) (Quit: Reconnecting)
[08:06:19] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:104d:e67b:167:5475)
[08:07:54] *** Joins: y1n (~y1n@84-115-65-25.wifi.dynamic.surfer.at)
[08:07:58] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 256 seconds)
[08:08:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[08:08:44] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[08:11:41] *** Joins: nickodd (~nickodd@user/nickodd)
[08:12:07] *** Quits: dcaro (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[08:12:20] *** Joins: dcaro (~dcaro@user/dcaro)
[08:12:53] *** Quits: earthbreaker9000 (~earthbrea@li778-229.members.linode.com) (Quit: I Break D Ert)
[08:13:00] *** Joins: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71)
[08:13:07] *** Joins: earthbreaker9000 (~earthbrea@li778-229.members.linode.com)
[08:18:17] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[08:18:20] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 272 seconds)
[08:18:35] <afidegnum> hi, i still have issue, the dictionary at the inner div cannot be updated to the one at the outer div. what am i doing wrong? https://dpaste.org/WW3O
[08:19:41] <BrenBarn> what are you expecting to happen there?
[08:19:45] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[08:19:46] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (Ping timeout: 240 seconds)
[08:19:57] <BrenBarn> you realize every time you do .update it's going to overwrite the old "tag" value in the dict
[08:20:21] <afidegnum> oh, ok
[08:20:40] <afidegnum> what function do i need?
[08:22:13] *** Joins: emika6 (~emika@83.136.182.125)
[08:22:23] <afidegnum> i wanted to have values from the inner loop to add to the outer loop
[08:22:49] <afidegnum> i mean "t" to add to "mydict"
[08:23:44] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[08:24:40] *** Quits: emika (~emika@83.136.182.54) (Ping timeout: 258 seconds)
[08:24:40] *** emika6 is now known as emika
[08:24:48] *** Quits: earthbreaker9000 (~earthbrea@li778-229.members.linode.com) (Quit: I Break D Ert)
[08:24:58] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 240 seconds)
[08:28:22] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[08:29:05] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[08:29:08] <afidegnum> BrenBarn: what do you suggest?
[08:32:56] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Remote host closed the connection)
[08:33:19] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:34] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Read error: Connection reset by peer)
[08:37:04] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:39:18] *** Joins: Syrup (uid10029@user/maple)
[08:39:54] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:40:42] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:41:33] *** Syrup is now known as Maple
[08:41:33] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[08:43:55] *** Joins: c10l (~c10l@89.34.167.207)
[08:47:15] <BrenBarn> what do you mean "add"?
[08:47:26] <BrenBarn> if you want a list of values, then maybe use a defaultdict
[08:48:29] *** Joins: fluter- (~fluter@user/fluter)
[08:48:40] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[08:49:17] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:50:44] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 265 seconds)
[08:55:33] *** Quits: sunyibo (~dorsch@5.2.75.229) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[08:55:56] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[08:56:03] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[08:56:05] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:56:32] *** Quits: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud) (Ping timeout: 265 seconds)
[08:57:55] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[08:59:32] *** Quits: jabberwock (~jessy@user/jabberwock) (Ping timeout: 256 seconds)
[09:00:05] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[09:03:06] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[09:05:11] *** Joins: Wulf (~Wulf@user/wulf)
[09:05:33] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[09:05:34] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[09:06:15] *** fluter- is now known as fluter
[09:06:36] *** Quits: y1n (~y1n@84-115-65-25.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[09:06:44] *** Joins: jabberwock (~jessy@user/jabberwock)
[09:07:07] *** Joins: reumeth (~reumeth@user/reumeth)
[09:08:55] *** Joins: t3g (~t3g@2603:9000:960c:8700:6e1b:9ec6:46c6:d82c)
[09:10:31] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[09:10:56] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:11:31] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:12:12] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[09:12:23] *** Quits: jabberwock (~jessy@user/jabberwock) (Remote host closed the connection)
[09:12:25] *** Quits: whatsupdoc_ (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:12:51] *** Quits: t3g (~t3g@2603:9000:960c:8700:6e1b:9ec6:46c6:d82c) (Client Quit)
[09:16:08] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:b49a:634:c996:84fd)
[09:17:57] *** Joins: jabberwock (~jessy@user/jabberwock)
[09:18:37] *** Joins: y1n (~y1n@84-115-65-25.wifi.dynamic.surfer.at)
[09:19:08] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (Ping timeout: 252 seconds)
[09:19:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:20:54] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:b49a:634:c996:84fd) (Ping timeout: 276 seconds)
[09:20:56] *** Joins: korros (~korros@li1845-92.members.linode.com)
[09:21:25] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:23:08] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[09:23:44] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:25:34] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[09:28:41] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:30:39] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:08] *** Joins: c10l (~c10l@89.34.167.207)
[09:31:14] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:20] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[09:31:45] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[09:32:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:33:35] *** Joins: stranac (~stranac@195.29.239.126)
[09:36:28] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[09:36:28] *** Quits: Tritium (~tritium@toxin.sdamon.com) (*.net *.split)
[09:36:28] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[09:36:28] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (*.net *.split)
[09:36:28] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[09:36:28] *** Quits: chandankumar (~chandanku@51.159.58.174) (*.net *.split)
[09:36:28] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (*.net *.split)
[09:36:28] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[09:36:28] *** Quits: nac (~nac@user/nac) (*.net *.split)
[09:36:28] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[09:36:28] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[09:36:28] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[09:36:28] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[09:36:28] *** Quits: daniel-k7 (~daniel-k@192.241.135.211) (*.net *.split)
[09:36:28] *** Quits: matiss (~matiss@almalinux/web/matiss) (*.net *.split)
[09:36:28] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[09:36:28] *** Quits: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) (*.net *.split)
[09:36:28] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[09:36:28] *** Quits: Quaack (~Quack@185.21.216.169) (*.net *.split)
[09:36:28] *** Quits: saorge (~saorge@ns378138.ip-5-196-67.eu) (*.net *.split)
[09:36:28] *** Quits: steve (~steven@li677-71.members.linode.com) (*.net *.split)
[09:36:28] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[09:36:28] *** Quits: leahey (~thelounge@static.36.0.217.95.clients.your-server.de) (*.net *.split)
[09:36:28] *** Quits: cation (cation@user/cation) (*.net *.split)
[09:36:28] *** Quits: francis (francis@user/francis) (*.net *.split)
[09:36:28] *** Quits: Masklin_Gurder (~joel@93.182.183.85) (*.net *.split)
[09:36:29] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) (*.net *.split)
[09:36:29] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[09:36:29] *** Quits: jdiez (~jdiez@static.197.82.46.78.clients.your-server.de) (*.net *.split)
[09:36:29] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[09:36:29] *** Quits: rdvn (~rdvn@user/rdvn) (*.net *.split)
[09:36:29] *** Quits: faceface (~faceface@user/faceface) (*.net *.split)
[09:36:29] *** Quits: beeza (sid53872@id-53872.tinside.irccloud.com) (*.net *.split)
[09:36:29] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[09:36:29] *** Quits: alxndr (~alexander@ybti.net) (*.net *.split)
[09:36:29] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[09:36:29] *** Quits: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de) (*.net *.split)
[09:36:29] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (*.net *.split)
[09:36:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[09:36:29] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[09:36:29] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (*.net *.split)
[09:36:29] *** Quits: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net) (*.net *.split)
[09:36:29] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (*.net *.split)
[09:36:29] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[09:36:29] *** Quits: mattf (~mattf@li908-138.members.linode.com) (*.net *.split)
[09:36:29] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:36:29] *** Quits: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f) (*.net *.split)
[09:36:29] *** Quits: Liexei (Liexei@user/liexei) (*.net *.split)
[09:36:29] *** Quits: amirouche (~amirouche@user/amirouche) (*.net *.split)
[09:36:29] *** Quits: rubin55 (sid175221@2001:67c:2f08:8::2:ac75) (*.net *.split)
[09:36:29] *** Quits: itok (sid418430@2001:67c:2f08:3::6:627e) (*.net *.split)
[09:36:29] *** Quits: Tips|Cloud (sid62231@2001:67c:2f08:3::f317) (*.net *.split)
[09:36:29] *** Quits: mrtnt (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0) (*.net *.split)
[09:36:29] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[09:36:29] *** Quits: VSpike (~johncc@2001:bc8:47ac:1a22::1) (*.net *.split)
[09:36:29] *** Quits: tuxifreund (tuxifreund@ubuntuusers/wikiteam/tuxifreund) (*.net *.split)
[09:36:29] *** Quits: jor (~jor@jor.link) (*.net *.split)
[09:36:29] *** Quits: jrabbit (~jack@user/jrabbit) (*.net *.split)
[09:36:29] *** Quits: tuxd00d (sid401305@id-401305.charlton.irccloud.com) (*.net *.split)
[09:36:29] *** Quits: mustache_ride (sid451683@user/mustache-ride/x-6533344) (*.net *.split)
[09:36:29] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[09:36:29] *** Quits: josh_h (sid301834@id-301834.brockwell.irccloud.com) (*.net *.split)
[09:36:29] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[09:36:29] *** Quits: sphalerite (~sphalerit@sosiego.soundray.org) (*.net *.split)
[09:36:29] *** Quits: marienz_ (~marienz@libera/staff/marienz) (*.net *.split)
[09:36:29] *** Quits: cmagina (sid286142@user/cmagina) (*.net *.split)
[09:36:29] *** Quits: Helenah (~helenah@user/helenah) (*.net *.split)
[09:36:29] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[09:36:29] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[09:36:29] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[09:36:29] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[09:36:29] *** Quits: flay (~flay@user/flay) (*.net *.split)
[09:36:29] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[09:36:29] *** Quits: fxrs (~fxrs@192.227.212.130) (*.net *.split)
[09:36:29] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[09:36:30] *** Quits: greyblue9 (sid500829@id-500829.charlton.irccloud.com) (*.net *.split)
[09:36:30] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[09:36:30] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[09:36:30] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[09:36:30] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[09:36:30] *** Quits: gbristol (gbristol@hermes.gbristol.net) (*.net *.split)
[09:36:30] *** Quits: DarkaMaul (~dm@163.172.81.54) (*.net *.split)
[09:36:30] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[09:36:30] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[09:36:30] *** Quits: unary (unary@ternary.ca) (*.net *.split)
[09:36:30] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[09:36:30] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[09:36:30] *** Quits: TML (~tml@user/tml) (*.net *.split)
[09:36:30] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[09:36:30] *** Quits: Kamuela (sid111576@id-111576.tinside.irccloud.com) (*.net *.split)
[09:36:30] *** Quits: infernix (nix@2a02:22a0:bbb1:d500::2) (*.net *.split)
[09:36:30] *** Quits: noord (~noord@user/noord) (*.net *.split)
[09:36:30] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[09:36:30] *** Quits: AUDaags (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[09:36:30] *** Quits: mirai (~mirai@2001:bc8:630:161::1) (*.net *.split)
[09:36:30] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[09:36:30] *** Quits: trench (trench@user/trench) (*.net *.split)
[09:36:30] *** Quits: zbe (~zbe@pleiades.zbe.bz) (*.net *.split)
[09:36:34] *** Joins: alxndr_ (~alexander@ybti.net)
[09:36:37] *** Joins: Wegge (~wegge@user/wegge)
[09:36:39] *** Joins: deniska_ (~denis@user/deniska)
[09:36:42] *** Joins: `rdvn (~rdvn@user/rdvn)
[09:36:42] *** Joins: m4td3v (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[09:36:45] *** Joins: foo_ (~foo@user/foo/x-8763512)
[09:36:51] *** Joins: mustache_ride_ (sid451683@user/mustache-ride/x-6533344)
[09:36:52] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[09:36:52] *** Joins: harleypig (thelounge@harleypig.com)
[09:36:53] *** Joins: rubin55_ (sid175221@id-175221.stonehaven.irccloud.com)
[09:36:56] *** Joins: AUDaags_ (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com)
[09:36:57] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[09:37:08] *** Joins: shodan45 (~quassel@107.161.22.155)
[09:37:08] *** Joins: dthpulse (~quassel@podciarou.sk)
[09:37:08] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[09:37:10] *** Joins: FLHerne_ (flh@flherne.uk)
[09:37:48] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[09:37:50] *** Joins: MrC (Ben@mrbenc.net)
[09:38:06] *** Joins: Masklin_Gurder (~joel@93.182.183.85)
[09:38:14] *** Joins: infobob (~infobob@python/bot/infobob)
[09:38:15] *** Joins: _0ne (~one@user/0ne/x-2101768)
[09:38:17] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[09:38:19] *** Joins: sandeepk (~sandeepk@223.130.30.175)
[09:38:19] *** Joins: cation (cation@user/cation)
[09:38:19] *** Joins: mirai (~mirai@2001:bc8:630:161::1)
[09:38:22] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[09:38:23] *** Joins: jrabbit (~jack@user/jrabbit)
[09:38:23] *** Joins: flay (~flay@user/flay)
[09:38:24] *** Joins: tuxifreund (tuxifreund@ubuntuusers/wikiteam/tuxifreund)
[09:38:25] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[09:38:28] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[09:38:29] *** Joins: fxrs (~fxrs@192.227.212.130)
[09:38:30] *** Joins: jor (~jor@jor.link)
[09:38:30] *** Joins: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de)
[09:38:31] *** Joins: wereii (~wereii@37.205.14.89)
[09:38:35] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[09:38:37] *** Joins: noord (~noord@user/noord)
[09:38:46] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[09:38:52] *** FLHerne_ is now known as FLHerne
[09:38:59] *** Joins: zbe (~zbe@pleiades.zbe.bz)
[09:39:30] *** Joins: effprime (~effprime@user/effprime)
[09:39:46] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[09:40:09] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[09:40:41] *** Joins: mjsir911 (~bnc@user/mjsir911)
[09:40:51] *** Joins: Liexei (Liexei@user/liexei)
[09:41:34] *** Joins: ario (~ario@159.65.220.102)
[09:41:36] *** Joins: trench (trench@user/trench)
[09:41:46] *** Joins: Stx (stx@libera/staff/stx)
[09:42:12] *** Joins: Helenah (~helenah@user/helenah)
[09:42:23] *** Joins: dvx (~dvx@185.63.97.64)
[09:43:11] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:43:45] <afidegnum> BrenBarn: I managed to do something but the issue i'm facing, values from the local scope are not able to pass on to those in the outer scope.
[09:43:47] *** Joins: rubberd0g (~kha0s@pd9e2f8a9.dip0.t-ipconnect.de)
[09:44:14] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:45:33] *** Joins: infernix (~nix@2a02:22a0:bbb1:d500::2)
[09:46:37] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:46:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:47:43] *** Joins: djapo (~archangel@user/djapo)
[09:49:06] *** Joins: qk1z (~qk1z@110-175-249-154.tpgi.com.au)
[09:53:48] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:54:44] <Wulf> Hello. How can I find out inside a module if it's being imported by Sphinx autodoc?
[09:55:01] *** Quits: LiftLeft (~LiftLeft@138.199.10.4) (Ping timeout: 265 seconds)
[09:58:10] *** Quits: y1n (~y1n@84-115-65-25.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[09:58:24] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 272 seconds)
[09:59:41] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:01:59] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[10:03:42] *** Joins: jazzy (~jaziz@2600:380:465b:aa32:a5e0:69d:ea69:d1e4)
[10:03:59] *** Joins: nac (~nac@user/nac)
[10:04:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:09:41] *** Quits: resmo (~resmo@2a00:d420:9:8a00:f9b9:4f2e:947c:3224) (Quit: Leaving)
[10:09:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:10:22] *** Quits: rubberd0g (~kha0s@pd9e2f8a9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:10:40] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:13:49] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (Ping timeout: 268 seconds)
[10:14:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:16:56] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[10:17:22] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:18:53] *** deniska_ is now known as deniska
[10:20:31] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:21:08] *** Quits: P1ro (~quassel@181.208.115.174) (Ping timeout: 256 seconds)
[10:23:24] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:24:52] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[10:25:04] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:25:35] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[10:26:18] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[10:26:31] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[10:29:06] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:29:28] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[10:31:11] *** Joins: whatsupdoc_ (uid509081@id-509081.stonehaven.irccloud.com)
[10:31:44] *** whatsupdoc_ is now known as whatsupdoc
[10:32:12] <whatsupdoc> is there an alternative to len(s) - i - 1
[10:36:57] *** Quits: djapo (~archangel@user/djapo) (Quit: leaving)
[10:37:24] *** Joins: ihristov (~ihristov@78.130.205.229)
[10:37:40] <Wulf> whatsupdoc: what are you trying to do?
[10:38:14] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:38:26] <whatsupdoc> traverse backwards
[10:38:31] <whatsupdoc> on a list
[10:38:40] <Wulf> whatsupdoc: you could do len(s) +~ i if you're golfing.
[10:38:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[10:39:02] <whatsupdoc> ~?
[10:39:41] <Wulf> whatsupdoc: two's complement
[10:40:49] <Wulf> whatsupdoc: you can reverse the list: for item in reversed(stuff)
[10:42:16] *** Joins: death916 (~death916@user/death916)
[10:42:17] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 258 seconds)
[10:42:41] <whatsupdoc> ok
[10:43:11] <Repiphany> Slicing also has a step option which can be negative, stuff[::-1]
[10:43:40] <Wulf> but that creates a copy of the list
[10:44:45] <Wulf> reversed(reversed([1,2,3]))  -->  TypeError: 'list_reverseiterator' object is not reversible  :-(
[10:44:46] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[10:45:09] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 250 seconds)
[10:45:39] *** Joins: kosh (~kosh@user/kosh)
[10:45:53] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:25] *** Joins: seednode (~seednode@user/seednode)
[10:46:54] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[10:48:25] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:48:26] <supakeen> :D
[10:48:29] *** Joins: kosh (~kosh@user/kosh)
[10:49:20] *** Joins: djapo (~archangel@user/djapo)
[10:49:58] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[10:50:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:50:41] *** Joins: mexen (uid495612@user/mexen)
[10:50:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[10:51:14] *** Joins: yogoyo (~Paffy@user/yogoyo)
[10:51:14] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:51:32] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:52:25] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[10:52:26] *** Joins: Wulf (~Wulf@user/wulf)
[10:52:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:54:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[10:55:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:55:19] *** Lord_of_Life_ is now known as Lord_of_Life
[10:55:37] *** Joins: P1ro (~quassel@181.208.115.174)
[10:56:32] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[10:57:14] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[10:57:24] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:00:52] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[11:01:30] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[11:01:40] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 272 seconds)
[11:01:55] *** Joins: SuperLag (~akulbe@user/superlag)
[11:02:03] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[11:02:13] *** Quits: hexeme_ (~hexeme@user/hexeme) (Quit: co'o ro do)
[11:02:22] *** Quits: emerent (~quassel@p200300cd57058c90ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[11:02:28] *** Joins: emerent_ (~quassel@p200300cd57058c07ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:02:29] *** emerent_ is now known as emerent
[11:03:11] *** Joins: hexeme (~hexeme@user/hexeme)
[11:03:57] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:04:23] *** Joins: gusto (~Augustus@2620:149:e0:6003::26)
[11:05:51] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[11:06:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:06:07] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[11:06:09] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (Client Quit)
[11:06:30] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 258 seconds)
[11:06:45] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:07:25] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[11:07:26] *** Quits: audiocat (~audio@2603-8081-1800-00ad-df68-b045-38b9-154d.res6.spectrum.com) (Ping timeout: 272 seconds)
[11:07:34] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[11:07:46] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[11:08:18] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 240 seconds)
[11:08:42] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[11:08:50] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:09:05] <Repiphany> I don't think iterating through a slice creates a new list fwiw
[11:09:39] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:09:43] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 246 seconds)
[11:10:06] *** Joins: upsala (~zcb@185.213.155.160)
[11:14:16] <Wulf> Repiphany: I'm pretty sure it does.
[11:14:48] *** Quits: p-i-_ (~Ohmu@node-3bg.pool-1-0.dynamic.totinternet.net) (Remote host closed the connection)
[11:15:31] <BrenBarn> it's not that iterating it creates it, it's that doing the slice itself creates it
[11:15:42] *** Quits: hexeme (~hexeme@user/hexeme) (Quit: co'o ro do)
[11:16:02] <Wulf> Repiphany: easy to confirm. Create a huge list. Check memory usage. Then create the slice and check mem usage again.
[11:16:13] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:16:19] <Repiphany> https://bpa.st/MGHQ
[11:16:19] <Wulf> BrenBarn: yeah, sure
[11:18:48] *** Joins: hexeme (~hexeme@user/hexeme)
[11:18:59] *** Quits: Maple (uid10029@user/maple) (Quit: Connection closed for inactivity)
[11:19:20] <Wulf> Repiphany: think big. E.g. 100_000_000 instead of 50_000
[11:19:25] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[11:22:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[11:24:39] *** Joins: rendar (~rendar@user/rendar)
[11:25:21] *** Quits: sandeepk (~sandeepk@223.130.30.175) (Ping timeout: 268 seconds)
[11:25:21] *** Joins: raxor2k (~raxor2k@46.99.0.188)
[11:27:24] *** Quits: poorboy (~poorboy@104.131.46.87) (Read error: Connection reset by peer)
[11:27:27] *** Joins: shrysr (~shrysr@user/shrysr)
[11:28:28] *** Joins: poorboy (~poorboy@104.131.46.87)
[11:28:28] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:29:12] *** Joins: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de)
[11:29:51] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[11:33:20] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[11:33:47] <Repiphany> https://bpa.st/52CQ
[11:34:07] <raxor2k> lets say i read a column/row from the db which is a string containing this = 'glutes, biceps, triceps', is there an easy script that can read this and split into multiple words based on how many ',' there are inside the string ?
[11:34:24] <Repiphany> So it seems like there's some memory overhead with [::-1] but it's not quite creating an extra list of the same size
[11:34:39] *** Joins: chele (~chele@user/chele)
[11:34:47] <Repiphany> 'glutes, biceps, triceps'.split(', ')
[11:36:19] <raxor2k> Repiphany: so only the :  .split(','), is needed ?
[11:36:50] <Repiphany> You'll be left with whitespace if you don't have the space in the split argument
[11:37:25] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:38:02] <raxor2k> repiphany: i see. Thanks!
[11:38:20] *** Quits: P1ro (~quassel@181.208.115.174) (Changing host)
[11:38:20] *** Joins: P1ro (~quassel@user/p1ro)
[11:40:00] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[11:40:17] *** Joins: sandeepk (~sandeepk@223.130.30.245)
[11:40:31] *** Joins: et (~et@user/et)
[11:40:37] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:41:57] *** Joins: amoe (~amoe@visarend.solasistim.net)
[11:43:40] *** Joins: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at)
[11:44:23] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 258 seconds)
[11:45:15] <ross> hi all, I'm trying to do something that's distinctly unpythonic (in that it seems there's no 'good' way to do it). I have a generator returning some expensive-to-get raw data, and want to make a wrapper generator that processes the data. The processing function is expensive. I also want to get a bit of simple data from the result of the raw generator, which is a lot cheaper (but not negligible) to calculate. However, I know that the 'simple' data will
[11:45:15] <ross> always have the same value for any given raw generator, so I can potentially optimise it such that the simple data is only calculated once. Is there a happy middle ground where I can process data for each turn of the generator, but only get the simple data once, while keeping costs (time/memory) to a minimum?
[11:45:29] <ross> Example of my issue with 3 non-ideal 'solutions' outlined: https://bpa.st/PSEA
[11:45:33] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:47:08] *** Quits: ihristov (~ihristov@78.130.205.229) (Ping timeout: 258 seconds)
[11:48:01] <ross> (note that "for a given raw_generator" in the above I mean a raw_generator constructed at a given time with given args
[11:48:03] <ross> )
[11:48:39] *** Joins: reumeth2 (~reumeth@user/reumeth)
[11:49:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:50:02] *** Quits: reumeth (~reumeth@user/reumeth) (Remote host closed the connection)
[11:50:19] <Repiphany> Is there something wrong with making a class that processes the data and calculates simple data once
[11:50:57] *** Joins: audiocat (~audio@2603-8081-1800-00ad-bb52-7b55-5725-a43b.res6.spectrum.com)
[11:50:58] <Wulf> Repiphany: it needs (almost) 8 bytes per item in the list. I assume the implementation stores pointers in an array. So it is creating another list of the same size. Most memory is used by the integer objects though.
[11:51:22] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 244 seconds)
[11:52:11] <ross> Repiphany: was that @ me or Wulf?
[11:52:37] *** Joins: Blankspace (~abcd@user/blankspace)
[11:52:41] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[11:52:56] <ross> if me, nothing wrong with that, just not sure how to do that for this situation
[11:53:21] *** Joins: ihristov (~ihristov@78.130.205.229)
[11:54:14] *** Joins: emper0r (~emper0r@93-62-144-68.ip22.fastwebnet.it)
[11:54:16] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[11:54:33] <emper0r> hi... how can I install python 3.8 using pip in my requirements.txt ?
[11:55:21] <ross> emper0r: not possible with pip afaik. look into pyenv https://github.com/pyenv/pyenv
[11:55:41] <ross> I know that the pipenv package manager is able to have a separate python version per project
[11:55:44] <ross> likely others
[11:57:07] <emper0r> hm....
[11:57:14] <emper0r> ok thx
[11:58:50] *** Joins: node1 (~node1@user/node1)
[12:00:30] <The-Compiler> emper0r: you can set python_requires in a setup.py/.cfg, but that won't install that Python, it just will show an error on incompatible versions: https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
[12:00:55] <The-Compiler> emper0r: if you really want something installing a specific Python, you'd need to use something like Docker
[12:02:05] <Repiphany> ross: Kinda scuffed way https://bpa.st/NA7A
[12:02:26] <Repiphany> Oops, line 6 should be get_simple_data(raw_data_0)
[12:02:33] *** Quits: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks) (Remote host closed the connection)
[12:02:49] <ross> ooooooo! I like this approach. yielding it once instead of trying to wrangle yielding it every time
[12:02:56] *** Joins: manti7 (~manti7@176.10.104.94)
[12:03:00] *** Joins: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks)
[12:03:03] <ross> thanks for the pointer! will definitely see how well this works for me
[12:05:00] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[12:06:09] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[12:07:15] *** Joins: zeenk (~zeenk@2a02:2f04:a211:a800:553b:3cb0:5ea1:7e83)
[12:11:13] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[12:11:47] *** Joins: Blankspace (~abcd@user/blankspace)
[12:11:55] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[12:12:24] *** Joins: Blankspace (~abcd@user/blankspace)
[12:13:05] *** Quits: yogoyo (~Paffy@user/yogoyo) (Remote host closed the connection)
[12:13:35] *** Quits: audiocat (~audio@2603-8081-1800-00ad-bb52-7b55-5725-a43b.res6.spectrum.com) (Ping timeout: 258 seconds)
[12:13:58] *** Joins: Pickchea (~private@user/pickchea)
[12:15:40] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[12:16:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:17:23] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[12:19:19] *** Joins: palasso (~palasso@user/palasso)
[12:21:34] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:22:06] <amoe> I want to use poetry for a project at work.  However Poetry does not create virtualenvs in a predictable location.  Our existing dev infrastructure relies on the Poetry virtualenv location being able to be stored in certain config files.  How could I handle this?
[12:22:45] <NeilRG> amoe: you just get the location using poetry env list --full-path
[12:22:48] *** Joins: yogoyo (~Paffy@user/yogoyo)
[12:22:58] <NeilRG> and don't store the paths in config files
[12:25:10] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-e09d-5ac8-afbf-2237.res6.spectrum.com) (Quit: jarthur)
[12:25:20] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[12:25:33] <amoe> NeilRG: We have a server running under a systemd unit file that needs to have the virtualenv path stored in the unit file.  Hmm, I suppose I could use a wrapper script to launch it instead.
[12:25:46] <NeilRG> good idea
[12:26:11] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[12:28:14] *** Joins: ice9 (~ice9@user/ice9)
[12:28:28] *** Joins: shad (~shad@user/shad)
[12:29:52] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[12:30:33] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[12:30:38] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[12:30:57] *** Quits: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[12:33:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:35:15] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Quit: brb, sex)
[12:35:38] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[12:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:38] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:38:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:37] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Quit: brb, sex)
[12:40:39] <rendar> any clue why this happens? https://bpa.st/NSCA
[12:40:59] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[12:42:37] <graingert> rendar: What
[12:43:00] <graingert> rendar: can you make a runnable example? And what's aio?
[12:44:11] *** Joins: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at)
[12:45:55] *** Joins: francis (francis@user/francis)
[12:46:10] *** Joins: Payam (~Payam@138.106.57.131)
[12:46:39] <rendar> import asyncio as aio
[12:46:52] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 258 seconds)
[12:46:56] <rendar> graingert: that is the runnable example, i have just typed those commands into python repl
[12:46:56] <Payam> Hi. I have a directory with python unit tests and I want to run those in paralell on gitlab. so shorten the time. Does anyone know how?
[12:47:02] *** Quits: emika (~emika@83.136.182.125) (Ping timeout: 252 seconds)
[12:47:07] *** Joins: drogas (~drogas@jump2.jet.uk)
[12:47:33] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:47:36] <graingert> Payam: pytest-xdist
[12:47:46] <Payam> on Gitlab?
[12:47:52] <graingert> Payam: everywhere
[12:47:56] <Payam> I use unittest framework
[12:47:59] <Payam> no pytest
[12:48:09] *** Joins: emika (~emika@83.136.182.38)
[12:48:31] <graingert> Payam: pytest-xdist supports unittest tests
[12:49:13] <Payam> okej, So that will run the tests in parallell. how would the stdout look? do they accupy the same terminal?
[12:50:41] <graingert> rendar: You probably want _set_result_unless_cancelled
[12:50:56] <graingert> Payam: it handles the stdout very nicely actually
[12:51:05] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[12:51:18] <graingert> Payam: xdist attaches to each process and the leader process manages stdout
[12:51:36] <graingert>  rendar you probably want _set_result_unless_cancelled
[12:52:01] <graingert> https://github.com/python/cpython/blob/bb3e0c240bc60fe08d332ff5955d54197f79751c/Lib/asyncio/tasks.py#L605 rendar
[12:52:54] <rendar> i see
[12:54:03] <rendar> AttributeError: '_asyncio.Future' object has no attribute
[12:54:03] <rendar> '_set_result_unless_cancelled'
[12:55:51] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[12:56:57] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:57:06] *** Joins: frost (~frost@59.71.241.179)
[12:58:10] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[12:58:34] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[12:58:37] *** Joins: colorado (~fluiD@161.97.231.145)
[12:58:43] *** Quits: fluiD (~fluiD@161.97.231.145) (Read error: Connection reset by peer)
[12:59:53] *** Joins: rgp (~rgp@user/rgp)
[13:00:48] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Quit: brb, sex)
[13:01:10] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[13:02:22] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[13:02:33] *** Joins: moto (~moto@user/moto)
[13:04:50] <Payam> graingert how do I do to run the tests?
[13:05:21] <Payam> I use python 3.6
[13:05:22] <graingert> rendar: it's a function not a method
[13:05:29] <graingert> Payam: pytest -n auto
[13:06:17] <Payam> graingert this is the command used today to run the tests. - coverage run --source=./src/ivar_backend/core --branch -a -m unittest discover tests/unittests/ "*Test.py" -v > tests/test_results/test_result_log.txt
[13:08:16] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:08:42] <graingert> Payam: you can use pytest -n auto --cov
[13:08:49] <graingert> You'll need to install pytest-cov and pytest-xdist
[13:09:14] <Payam> in the directory of the tests?
[13:09:59] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[13:10:29] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[13:10:42] *** Quits: reumeth2 (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[13:11:00] *** Joins: chandankumar (~chandanku@51.159.58.174)
[13:11:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[13:12:03] <Payam> graingert can you help me rewrite the command? I have now installed the packages.
[13:16:34] <graingert> Payam: usually it will discover your tests correctly if you run pytest in the root of your repo
[13:17:36] <graingert> Payam: also you should configure coverage in a coverage file eg https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L59-L62
[13:18:26] <graingert> Payam: how are you adding ivar_backend to your sys.path? are you using `pip install .` or `tox` ?
[13:18:58] *** Quits: manti7 (~manti7@176.10.104.94) (Read error: Connection reset by peer)
[13:18:58] <Payam> I don't know. It is not my own project. Don't know everythig
[13:19:53] <graingert> do you have a pyproject.toml or a tox.ini or a setup.cfg?
[13:20:09] *** Joins: varaindemian (~varaindem@86.124.78.162)
[13:20:54] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:21:13] <Payam> setup file
[13:21:18] <Payam> setup.py
[13:21:36] <graingert> Payam: show the code above your `coverage run`?
[13:21:51] <graingert> is there a `pip install .` or `pip install -e`
[13:22:24] <Payam> https://paste.debian.net/1206420/
[13:22:50] <graingert> yeah so this bit sets the sys.path:     - export PYTHONPATH=$PYTHONPATH:$PWD/src
[13:23:14] <Payam> yes
[13:23:25] *** Joins: manti7 (~manti7@176.10.104.94)
[13:23:40] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:800d:9af4:8534:b40) (Remote host closed the connection)
[13:23:49] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[13:23:54] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:24:33] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:800d:9af4:8534:b40)
[13:24:52] <graingert> ok so you should be good to use `pytest -n auto --cov --cov --cov-report=term-missing:skip-covered --cov-report=xml` then you can configure branch coverage and source_pkgs in .coveragerc or pyproject.toml it's up to you
[13:25:15] <graingert> Payam: (you don't need `coverage report -m`) pytest-cov does it all for you
[13:25:17] *** Quits: Blankspace (~abcd@user/blankspace) (Remote host closed the connection)
[13:25:24] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[13:26:03] <graingert> you'll also need to add a pytest.ini or pyproject.toml with pytest config like:
[13:26:15] <graingert> [pytest]
[13:26:15] <graingert> python_files = test_*.py *_test.py *Test.py
[13:26:42] <graingert> the toml version is
[13:26:43] *** Joins: Pickchea (~private@user/pickchea)
[13:27:07] <graingert> [tool.pytest.ini_options]
[13:27:07] <graingert> python_files = ['test_*.py', '*_test.py', '*Test.py']
[13:27:26] <Payam> so I remove line 3-6 right?? https://paste.debian.net/1206421/
[13:27:35] *** Joins: darksun (~darksun@user/darksun)
[13:27:49] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[13:28:02] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[13:28:23] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[13:28:37] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[13:28:43] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[13:28:56] <azidhaka> Hi everyone, need some help with extracting information from a file. I've got a big file with multiple contents like this: https://regex101.com/r/mJ9xhe/1 (excuse the ugly regex) I need group 3 with its corresponding groups 5, 7, 9, 11 (there can be any number of those). Then the whole cycle repeats with the next few lines of the file.
[13:29:26] *** Joins: dez (uid92154@user/dez)
[13:29:26] <azidhaka> Until now i've only dealt with line-by-line processing
[13:29:49] *** Quits: ihristov (~ihristov@78.130.205.229) (Ping timeout: 250 seconds)
[13:30:07] <Payam> graingert does it find the test under tests/unittests?
[13:30:08] <azidhaka> Could you give me a simple example of working with multiple matches on multiple lines?
[13:30:13] <graingert> Payam: it aught to
[13:30:42] <graingert> Payam: oh you already have a export COVERAGE_RCFILE=$PWD/tests/.coveragerc
[13:30:43] <Payam> graingert and do I add the pytest.ini in the same folder as unittests?
[13:30:45] *** Joins: shad (~shad@user/shad)
[13:30:46] <graingert> Payam: what's in that file?
[13:30:51] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[13:30:57] <graingert> Payam: pytest.ini goes next to your setup.py
[13:30:57] *** Quits: dld (~davidlowr@2601:197:600:1210:7827:638:62ea:3bc0) (Ping timeout: 245 seconds)
[13:31:09] *** Quits: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[13:31:20] <Payam> graingert the setup.py is used for packaging
[13:31:32] <Payam> under src/
[13:31:53] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[13:33:06] *** Joins: dld (~davidlowr@73.61.8.44)
[13:33:13] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[13:34:04] <Payam> graingert so the pytest.ini looks like this now : https://paste.debian.net/1206423/
[13:34:29] *** Joins: reumeth2 (~reumeth@user/reumeth)
[13:34:34] <graingert> Payam: you need to pick the ini format in pytest.ini or the toml format in pyproject.toml
[13:34:38] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[13:35:06] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[13:35:34] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[13:35:53] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[13:36:21] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:37:01] *** Joins: c10l (~c10l@89.34.167.207)
[13:37:05] *** Joins: shad (~shad@user/shad)
[13:38:26] <graingert> Payam: You can't use both
[13:38:35] *** Joins: audiocat (~audio@2603-8081-1800-00ad-63c9-045d-dd73-f4c7.res6.spectrum.com)
[13:39:38] *** Quits: yogoyo (~Paffy@user/yogoyo) (Quit: WeeChat 3.2)
[13:40:13] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[13:41:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:33] *** Joins: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at)
[13:46:47] *** Joins: crippa (~crippa@160.62.4.100)
[13:47:51] <crippa> hi. Trying to get key codes with cv2.waitKey() but failing miserably.. why does print(waitKeys(0) always returns '0'?
[13:49:17] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[13:51:08] <japh> https://www.japh.se/2021/08/03/use-perl-modules-in-python3.html :)
[13:51:46] *** Quits: jpic (~jpic@82.142.6.158) (Ping timeout: 240 seconds)
[13:51:48] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[13:51:55] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[13:52:31] <crippa> mm... apparently this happens only if I use the arrow keys. How can I detect those keys?
[13:54:52] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[13:56:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:58:22] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:00:32] *** Joins: rsx (~dummy@ppp-188-174-148-117.dynamic.mnet-online.de)
[14:01:04] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:01:53] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:596f:b49c:c2de:ec35)
[14:02:10] *** Quits: philipp64|work (~philipp64@174.27.13.9) (Ping timeout: 272 seconds)
[14:03:49] *** snalty_ is now known as snalty
[14:08:11] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[14:08:25] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:11:06] *** Joins: TomyWork (~TomyLobo@p200300e80f133c007585c42c4fccc2ad.dip0.t-ipconnect.de)
[14:11:14] <TomyWork> hi
[14:12:11] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:12:17] *** Joins: Naan (~Naan@user/naan)
[14:13:14] *** Joins: lorcab (~user@197.251.194.240)
[14:13:41] *** Joins: yogoyo (~paddy@user/yogoyo)
[14:14:39] *** Quits: Jefren (~Jefren@70.35.67.14) (Ping timeout: 258 seconds)
[14:14:49] <TomyWork> I'm want to make a package that, if you import it and instantiate one of its classes, will wait until your script exits and then take over. basically your script is configuration/callbacks for that package. is that advisable? is atexit the correct way to do this?
[14:15:16] *** Joins: akaWolf (~akaWolf@akawolf.org)
[14:15:22] *** Joins: Jefren (~Jefren@70.35.67.8)
[14:15:49] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[14:15:55] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[14:16:30] <Widdershins> TomyWork: it's weird and perhaps not the best way to do that, but it also probably works
[14:18:08] <graingert> Payam: did that work?
[14:18:59] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:19:32] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[14:21:53] *** Joins: Jefren1 (~Jefren@70.35.67.42)
[14:22:01] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[14:23:55] *** Quits: Jefren (~Jefren@70.35.67.8) (Ping timeout: 258 seconds)
[14:24:13] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:24:24] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:25:35] *** Joins: Jefren2 (~Jefren@208.104.190.60)
[14:27:44] *** Joins: Matheo_bis (~yaaic@user/matheo-bis/x-4309430)
[14:27:46] *** Joins: kosh (~kosh@user/kosh)
[14:28:19] *** Quits: Jefren1 (~Jefren@70.35.67.42) (Ping timeout: 250 seconds)
[14:29:00] *** Quits: Matheo_bis (~yaaic@user/matheo-bis/x-4309430) (Client Quit)
[14:29:17] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[14:30:41] <graingert> TomyWork: use a context manager
[14:31:12] *** Quits: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[14:31:16] *** Joins: magla (~gelignite@55d4b6d1.access.ecotel.net)
[14:31:16] <graingert> TomyWork: then people can use:
[14:31:16] <graingert> @your_package.some_cmgr()
[14:31:16] <graingert> def main(): ...
[14:31:30] <graingert> TomyWork: if you make it with `@contextlib.contextmanager`
[14:32:12] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 245 seconds)
[14:32:24] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:33:11] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[14:33:31] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[14:34:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:34:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:35:15] *** Quits: mei (~mei@user/mei) (Quit: mei)
[14:36:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:40:48] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[14:41:30] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[14:42:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:42:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:43:53] *** Joins: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at)
[14:44:11] *** Joins: shad (~shad@user/shad)
[14:44:12] *** Joins: palasso (~palasso@user/palasso)
[14:45:18] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 272 seconds)
[14:45:48] *** Joins: Alpha3031 (~alpha3031@wikipedia/alpha3031)
[14:46:17] <TomyWork> hmm, that doesnt sound like what I want. basically I don't want to modify the main script, but I want to mock up enough of the original framework to use its code
[14:46:49] <TomyWork> basically the original framework is PyKDE4, which was discontinued, but I still have a bunch of krunner plugins i want to revive
[14:47:07] <TomyWork> ideally without modifying the plugins themselves
[14:47:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:48:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:40] *** Joins: entuland (~entuland@user/entuland)
[14:48:51] <TomyWork> hmm, I'll also need to run a function that's at that plugin script's scope
[14:49:15] <TomyWork> from within that atexit handler
[14:50:40] <TomyWork> the plugins also create a class whose superclass is part of the framework, so that could help
[14:50:45] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[14:53:16] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[14:53:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:53:40] <TomyWork> hah, "import __main__" within the atexit handler gives me access to that scope
[14:54:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:55:06] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:57:40] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[14:59:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:59:40] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[15:00:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:19] <TomyWork> success!
[15:01:52] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[15:05:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:06:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:06:18] *** Quits: raxor2k (~raxor2k@46.99.0.188) ()
[15:08:54] *** Joins: ubert (~Thunderbi@91.141.40.237.wireless.dyn.drei.com)
[15:10:07] *** Quits: magla (~gelignite@55d4b6d1.access.ecotel.net) (Quit: Stay safe!)
[15:10:26] *** Joins: ihristov (~ihristov@78.130.205.229)
[15:11:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:12:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:37] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 245 seconds)
[15:13:40] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:13:51] *** Joins: Pickchea (~private@user/pickchea)
[15:14:14] *** Joins: jinsun (~quassel@user/jinsun)
[15:14:17] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 245 seconds)
[15:14:17] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 245 seconds)
[15:14:18] *** ayusta is now known as ayustae
[15:14:34] *** Joins: jpic (~jpic@82.142.6.158)
[15:17:01] *** Joins: p-i- (~Ohmu@182.232.250.21)
[15:17:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:17:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:17:47] *** Quits: reset (~reset@user/reset) (Quit: reset)
[15:19:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:20:02] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[15:20:33] <nedbat> TomyWork: that sounds very strange
[15:22:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:22:56] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:23:15] *** Joins: kosh (~kosh@user/kosh)
[15:23:48] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[15:23:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:06] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[15:25:26] *** Quits: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[15:26:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7)
[15:27:43] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[15:29:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:29:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:23] *** Quits: y1n (~y1n@84-115-65-253.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[15:32:02] <TomyWork> nedbat, that's expected :)
[15:32:02] *** Quits: p-i- (~Ohmu@182.232.250.21) (Read error: Connection reset by peer)
[15:32:51] *** Joins: p-i- (~Ohmu@2403:6200:8870:eb96:11fb:5823:c7ea:de6a)
[15:33:18] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[15:35:43] *** Quits: ubert (~Thunderbi@91.141.40.237.wireless.dyn.drei.com) (Quit: ubert)
[15:35:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[15:36:17] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[15:36:24] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[15:36:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:37:31] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[15:37:59] *** Joins: rany_ (~rany@user/rany)
[15:38:13] *** Joins: kosh (~kosh@user/kosh)
[15:38:40] *** Joins: TFKyle (~kyle@64.201.205.70)
[15:39:51] *** Quits: rany (~rany@user/rany) (Ping timeout: 252 seconds)
[15:40:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:40:39] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 268 seconds)
[15:41:30] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:41:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:12] *** Quits: afidegnum (~user@41.66.203.57) (Ping timeout: 258 seconds)
[15:44:36] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[15:45:46] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[15:47:27] *** Joins: drogas (~drogas@jump2.jet.uk)
[15:48:53] *** Quits: crippa (~crippa@160.62.4.100) (Quit: Connection closed)
[15:49:08] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[15:49:57] <Payam> graingert no.
[15:50:11] <Payam> I still havent undrestood where to put paytest.ini and the other one
[15:50:15] <graingert> Payam: did you choose between pytest.ini or pyproject.toml ?
[15:50:26] <Payam> should I have only one?
[15:50:29] <Payam> then pytest.ini
[15:50:30] <graingert> you need to pick one
[15:50:37] <graingert> ok so use the .ini format
[15:50:54] <Payam> Okey, I choose .pytest.ini
[15:51:00] <Payam> pytest.ini
[15:51:04] <graingert> https://www.irccloud.com/pastebin/9sLMeW3Y/Payam.log
[15:51:25] <graingert> Payam: you see how they're too different syntaxes for the same thing?
[15:51:35] *** Joins: kostkon_ (~androirc@ob21aa.static.otenet.gr)
[15:51:36] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:51:37] <Payam> https://paste.debian.net/1206423/
[15:52:00] <graingert> yeah you have the toml syntax concatenated on the bottom of your ini syntax
[15:52:00] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[15:52:06] <Payam> okey so I only use one of them? the lines 1 and 2
[15:52:07] <graingert> you need to pick one or the other
[15:52:14] <graingert> yes
[15:52:15] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:52:27] <Payam> okey
[15:52:29] <p-i-> Suppose I have [[1,10], [1,15], [2,7], [3,11]] as a numpy array, is there an efficient way of summing the values for each key, so I would get [[1,15], [2,7], [3,11]]?
[15:52:44] <Payam> I added that file next to setup.py
[15:52:59] <nedbat> p-i-: do you mean [1,25] ?
[15:53:10] <p-i-> woops yes I did
[15:54:03] <Payam> graingert and I have this in my ci file: https://paste.debian.net/1206431/
[15:54:09] <nedbat> p-i-: you'd have to iterate over the array.  Are you sure it makes sense for it to be a numpy array?
[15:54:19] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[15:55:35] <p-i-> Currently I'm converting to a dict and doing `M={}; for (p,q) in L: M[p] = M.get(p, 0) + q)`, and then converting back: N = np.array[(p,q) for p,q in M.items()]`
[15:55:54] <graingert> Payam: great did it work?
[15:56:13] <Payam> graingert I am testing it in gitlab ci now
[15:56:46] <Payam> graingert should it be --cov so many times?
[15:57:45] <nedbat> p-i-: a little easier would be:  M = collections.Counter(); for p,q in L: M[p] += q
[15:57:53] <Yhg1s> But using a numpy array would be even better.
[15:58:26] <Yhg1s> oh, the first column is a key, and supposed to be unique. nevermind.
[15:58:53] <p-i-> nedbat: Is Counter good for noninteger q?
[15:59:08] <Yhg1s> p-i-: it's fine with anything that can be a dict key.
[15:59:16] <Yhg1s> oh, 'q'; it's fine for anything.
[15:59:39] <jinsun> p-i-: if you can use pandas then you could do `pandas.DataFrame([[1,10], [1,15], [2,7], [3,11]]).groupby(0).sum()`
[15:59:44] <p-i-> great! That'll save me a lot of `.get`s.
[15:59:47] <Yhg1s> p-i-: are you saying the values aren't actually numbers?
[16:00:12] *** Joins: jdmark (~jdmark@67.8.137.130)
[16:00:16] <p-i-> No, it's a list of number-pairs. price/qty. I need the total quantity for each price 'shelf'.
[16:00:33] <p-i-> mmm maybe time to dig into pandas
[16:00:36] <Yhg1s> p-i-: are they floats, then?
[16:00:40] <p-i-> yes!
[16:00:53] <Yhg1s> p-i-: okay: don't use floats.
[16:00:54] <graingert> Payam: not sure why you have `--cov --cov`
[16:01:04] <Yhg1s> (you get into trouble because of their inexactness)
[16:01:06] <graingert> you only need one
[16:01:12] <Payam> graingert didn't you write it? I copyied it
[16:01:19] <Payam> Can you write the correct command again pleasE?
[16:01:22] <Yhg1s> p-i-: use decimals or a fixed point type.
[16:01:22] <graingert> Payam: hmm also I think I posted --cov-report=xml
[16:01:32] <Payam> yes but I wanted in html
[16:01:33] <p-i-> floats are HORRIBLE. Adding two nice floats can give 1.99999999999995.
[16:01:39] <graingert> Payam: if you're using gitlab you want the xml and the html
[16:01:57] <Yhg1s> p-i-: they are horrible for exactness, yes, because they don't care about exactness.
[16:02:00] <Payam> can you please provide me with correct line?
[16:02:02] <graingert> gitlab can consume the coverage.xml and report that info on your PRs Payam
[16:02:02] <Yhg1s> (they care about speed instead.)
[16:02:18] <graingert> pytest -n auto --cov --cov --cov-report=term-missing:skip-covered --cov-report=html --cov-report=xml
[16:02:29] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:02:33] <graingert> uhh wait `pytest -n auto --cov --cov-report=term-missing:skip-covered --cov-report=html`
[16:02:37] <p-i-> I'm worried about the overhead of using Decimal as I'm chewing a huge volume of data. So I sanitize them at the end. `fsanitized = lambda f: round(float(f), 12)`
[16:02:55] <graingert> but you can add as many `--cov --cov --cov` as you like
[16:03:04] <graingert> they cancel out with `--no-cov`
[16:03:07] <p-i-> Is there any efficient datatype I can use instead that is numpy-friendly?
[16:03:11] <Yhg1s> p-i-: okay, well, don't. Measure the performance if you're worried about it. Or, use integers instead of floats.
[16:03:11] <Repiphany> Integers
[16:03:15] <Payam> so should I take both xml and html?
[16:03:22] <Repiphany> $1.00 = 100 cents
[16:03:48] <p-i-> That's a good point. I could just multiply everything by 1e12 and use ints.
[16:04:03] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 252 seconds)
[16:04:09] <graingert> Payam: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html#python-example
[16:04:22] <p-i-> That's what ethereum did. They use length-18 integers for everything, and it was a really smart move.
[16:06:28] *** Joins: afidegnum (~user@102.176.94.177)
[16:06:40] <Payam> graingert so that command will generate a html or xml report. where does it save all these reports?
[16:06:44] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[16:06:49] <graingert> Payam: it will make both
[16:07:13] <Payam> yes but what will the paths= be when generating these reports?
[16:07:48] <Repiphany> p-i-: Numpy only version btw, https://bpa.st/BOPQ
[16:08:16] <Repiphany> Still uses some not-array-manipulation but
[16:08:23] <graingert> Payam: it ./coverage.xml by defaut
[16:08:27] *** Quits: jazzy (~jaziz@2600:380:465b:aa32:a5e0:69d:ea69:d1e4) (Ping timeout: 245 seconds)
[16:11:23] <Payam> I don't undrestand what it does
[16:11:27] <Payam> let me show you the ooutput
[16:12:07] *** Joins: jinsun_ (~quassel@user/jinsun)
[16:12:17] <Payam> https://paste.debian.net/1206433/ graingert
[16:12:24] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 258 seconds)
[16:12:54] <Payam> it didn't even run the tests
[16:15:13] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:15:31] *** Joins: dpreacher (~dpreacher@user/dpreacher)
[16:15:37] *** Joins: dez (uid92154@user/dez)
[16:16:12] <p-i-> Repiphany: Nice!!!
[16:16:21] <nedbat> the new error messages with carets indicating the part of the line that failed are cool, but maybe we should suppress them if they simply underline the entire line.
[16:16:53] <Yhg1s> nedbat: wrong place to suggest it ;)
[16:16:59] <nedbat> Yhg1s: i know :)
[16:17:09] <nedbat> sometimes it's helpful to try out an idea first
[16:17:42] <p-i-> It looks like a fair fraction of this community are data scientists.
[16:17:50] <supakeen> nedbat: I'm very happy with them as well.
[16:18:04] <supakeen> I would still prefer a link for exceptions as well (in the default interpreter).
[16:18:09] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[16:18:20] <nedbat> what are the tildes vs carets on line 4?  https://gist.github.com/nedbat/861717e389a873193b498e1e5cb3a0f6
[16:18:20] <Yhg1s> nedbat: did you see how they try to point at a single thing even in a long underlined expression?
[16:18:29] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[16:18:46] <nedbat> Yhg1s: is that the tildes?
[16:18:51] <Yhg1s> yes.
[16:19:10] <Yhg1s> it uses tildes for the whole expression, and carets for the thing that's the problem (in this case, the key that raised the KeyError)
[16:19:34] <nedbat> Yhg1s: how come no tildes on line 33?
[16:20:00] <Yhg1s> Probably an oversight
[16:20:17] <Yhg1s> (file a bug? :)
[16:20:42] <bjs> is it not because line 33 the Union[...] isn't part of the error, but on the earlier line it was a getitem call so it hilighted the object that was being called on too
[16:21:06] <supakeen> Why not colors!
[16:21:17] <Yhg1s> bjs: well, is it the 'py.path' part or the '(py.path).local' part that raised the error?
[16:21:46] <bjs> Yhg1s: hmm, good point :)
[16:21:59] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 258 seconds)
[16:22:25] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[16:22:31] <Payam> graingert why does it run coverage on all .py files? even those in site-package
[16:22:46] <bjs> maybe it'd be more readable if there were 2 lines, the semantics of the tildes are not obvious to me
[16:23:35] <graingert> Payam: what's your site-packages look like?
[16:23:46] <Payam> All the tests are failing
[16:23:58] <Payam> Can I show you the tree? wait
[16:24:29] <graingert> Payam: Show your .coveragerc?
[16:24:52] <Payam> graingert https://paste.debian.net/1206435/
[16:25:01] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[16:25:32] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:25:46] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[16:25:47] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:26:01] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[16:26:26] <supakeen> We're in 3.10-rc right?
[16:26:30] <bjs> nedbat: https://bpa.st/WZHA is probably something like what I would suggest
[16:26:38] *** Quits: dpreacher (~dpreacher@user/dpreacher) (Ping timeout: 256 seconds)
[16:26:45] <bjs> supakeen: so modern
[16:26:52] <nedbat> supakeen: 3.10.0rc1 has been tagged, but I think not announced
[16:26:53] <bjs> with colours
[16:26:57] <supakeen> nedbat: Oki :)
[16:27:01] <supakeen> bjs: Emojis!
[16:27:02] *** Quits: georgios (~georgios@2a02:587:a001:d91:55c3:9b1f:744:834d) (Ping timeout: 252 seconds)
[16:27:14] <bjs> supakeen: the day my compiler spits out emojis is the day i quit
[16:27:14] <bjs> :D
[16:27:38] <Yhg1s> Yes, not announced yet.
[16:27:38] <supakeen> ⬆️
[16:28:05] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[16:28:10] <supakeen> Ah then I probably just misread my Twitter feed :)
[16:28:58] <Yhg1s> https://www.python.org/downloads/release/python-3100rc1/ doesn't have the released packages yet, so yeah. :P
[16:29:32] <supakeen> I was wondering why I didn't see `3.10-rc1` in `pyenv` :)
[16:29:47] <nedbat> supakeen: these days I seem to be the person updating pyenv for the new releases
[16:30:08] <supakeen> Ah, so I have a familiar face to blame. That makes it easier!
[16:30:40] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[16:31:02] *** Joins: foobaz212 (~foobaz212@75.188.159.143.dyn.plus.net)
[16:31:33] <supakeen> Meanwhile I still have to decide on how I want to deploy my snakes (deadsnakes, or pyenv, or prebuilt somehow).
[16:32:46] <Payam> graingert No tests are runing still
[16:32:47] <Payam> :(
[16:34:21] *** Quits: ihristov (~ihristov@78.130.205.229) (Quit: Connection closed)
[16:35:42] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[16:35:42] <nedbat> Payam: were the tests running without coverage measurement?
[16:35:49] <Payam> yes
[16:35:55] *** Quits: foobaz212 (~foobaz212@75.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[16:36:00] <Payam> wait
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:04] <graingert> Payam: looks like you have `def __init__(self):` methods
[16:36:17] *** Joins: Pickchea (~private@user/pickchea)
[16:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:46] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 268 seconds)
[16:36:50] *** Joins: nrg (~NRG@user/nrg)
[16:37:23] *** Joins: shad (~shad@user/shad)
[16:37:24] *** Joins: zeden (~zeden@user/zeden)
[16:37:44] <graingert> Payam: you need to set:
[16:37:44] <graingert> [run]
[16:37:44] <graingert> branch = True
[16:37:44] <graingert> source_pkgs = ivar_backend
[16:37:44] <graingert> source = tests
[16:37:46] <graingert> oops
[16:37:58] <graingert> apologies that was supposed to be a snip
[16:38:04] <Payam> https://paste.debian.net/1206436/ this is the tree and setup.py is located under src and not in project root
[16:38:25] *** Joins: Jefren3 (~Jefren@70.35.66.69)
[16:38:36] <graingert> Payam: ah normally `setup.py` is above the `src/`
[16:38:37] <Payam> graingert in where? pytest.ii?
[16:38:47] <Payam> graingert yes I know but in this project
[16:38:48] *** Joins: fuz (~fuz@user/fuz)
[16:38:48] <graingert> Payam: .coveragerc
[16:39:42] *** Quits: Jefren2 (~Jefren@208.104.190.60) (Ping timeout: 245 seconds)
[16:39:48] <graingert> Payam: it looks like it didn't find your pytest.ini
[16:40:09] <Payam> the whole thing changes right? with having setup.py somewhere else
[16:40:24] *** Joins: Jefren4 (~Jefren@70.35.67.151)
[16:40:32] *** Joins: RickySpanish (~shit@85.203.23.172)
[16:40:35] <graingert> Payam: yeah we can move setup.py into setup.cfg later ;D
[16:40:41] <graingert> Payam: yeah we can move setup.py into ../setup.cfg later ;D *
[16:40:53] <RickySpanish> graingert how much money do you make
[16:41:22] <nedbat> RickySpanish: that is an odd question
[16:41:24] <graingert> RickySpanish: is this a question about your career progression?
[16:41:44] <RickySpanish> yeah I am curious
[16:42:06] <Payam> graingert didn't work
[16:42:11] <Payam> I didn't run any tests
[16:42:15] <graingert> Payam: what happened?
[16:42:22] <nedbat> RickySpanish: unless you are friends with graingert, it's impolite to ask
[16:42:28] <RickySpanish> what about you nedbat
[16:42:29] <Payam> just a xml file
[16:42:30] *** Joins: Jefren (~Jefren@70.35.66.126)
[16:42:40] <nedbat> RickySpanish: it is also impolite to ask me :)
[16:42:44] <graingert> nedbat: I disagree, but it does feel wierd
[16:42:55] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[16:43:04] *** Quits: Jefren3 (~Jefren@70.35.66.69) (Ping timeout: 258 seconds)
[16:43:40] <graingert> RickySpanish: I'm happy to let you know if you give me some context, probably in a DM as this is offtopic. unless there's a career progression channel like in Discord
[16:44:00] <graingert> employees only gain from sharing their compensation
[16:44:36] <graingert> uhh details of the compensation
[16:44:58] *** Quits: Jefren4 (~Jefren@70.35.67.151) (Ping timeout: 240 seconds)
[16:46:31] *** Quits: sandeepk (~sandeepk@223.130.30.245) (Ping timeout: 258 seconds)
[16:47:05] <nedbat> whether employees would gain or not, current norms make it a tricky question to ask
[16:47:35] *** Quits: emper0r (~emper0r@93-62-144-68.ip22.fastwebnet.it) (Quit: leaving)
[16:47:41] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[16:48:02] <Payam> graingert I did `- pytest -n auto tests/unittests/*Test.py --cov --cov --cov-report=term-missing:skip-covered --cov-report=xml` It ran all the tests but all of them are failing.
[16:48:19] <graingert> nedbat: definitely
[16:48:35] *** Joins: Jefren1 (~Jefren@208.104.190.21)
[16:48:43] <graingert> you still have the extra `--cov` there
[16:48:50] <graingert> Payam: what failures do you get?
[16:49:06] <Payam> Error and Fail on tests thatshouldn't get errored or failed
[16:49:13] <graingert> show an example?
[16:49:21] <graingert> you don't need `tests/unittests/*Test.py` you can use the pytest.ini
[16:49:41] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:49:56] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:50:03] *** Quits: Jefren (~Jefren@70.35.66.126) (Ping timeout: 276 seconds)
[16:51:20] <graingert> Payam is it this?  /home/vagrant/GitlabRepos/ats-tool-ivar/tests/test_coverage/scripts/test_requirement_coverage.py:39: PytestCollectionWarning: cannot collect test class 'TestCoverageReqIsNotAsLongAsTags' because it has a __init__ constructor (from: tests/test_coverage/scripts/test_requirement_coverage.py)
[16:51:44] *** Joins: Jefren2 (~Jefren@206.253.157.214)
[16:51:55] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7) (Quit: Leaving)
[16:52:01] <Payam> no
[16:52:18] <Payam> I don't even see the error message it only says Error tests/unittests/...
[16:52:33] <Payam> and how do I even know that it runs in parallell
[16:52:36] <graingert> Payam: ok try removing `tests/unittests/*Test.py --cov` from the line?
[16:52:45] *** Quits: zbr (~zbr@h.sbarnea.com) (Quit: The Lounge - https://thelounge.chat)
[16:52:56] <Payam> That triggered the tests
[16:53:06] *** Quits: gusto (~Augustus@2620:149:e0:6003::26) (Quit: Textual IRC Client: www.textualapp.com)
[16:53:08] <graingert> great stuff
[16:53:28] <graingert> show the output again Payam ?
[16:53:57] <Payam> No I mean tests/unittests/*Test.py triggered the tests
[16:54:02] *** Quits: Jefren1 (~Jefren@208.104.190.21) (Ping timeout: 268 seconds)
[16:54:19] <Payam> I removed the pytest.ini and added that text to the actuall command
[16:54:25] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[16:56:15] *** Joins: Jefren3 (~Jefren@70.35.67.97)
[16:56:26] <graingert> Payam: ah try passing `pytest -c pytest.ini ...`
[16:57:02] <graingert> Payam: you shouldn't use your shell globbing to collect tests
[16:57:11] <graingert> 13:23:29 <graingert> show the output again Payam ?
[16:58:01] *** Quits: Jefren2 (~Jefren@206.253.157.214) (Ping timeout: 258 seconds)
[16:58:07] <Payam> dear graingert As I tole you the setup.py is under src/ and not in the root of the project. Where should I put pytest.ini?
[16:58:37] <graingert> Payam: put your pytest.ini where your setup.py should go. Next to your `.git/` dir
[16:59:29] <Payam> so in the root of the project
[17:00:03] <Payam> [pytest]
[17:00:04] <Payam> python_files=*Test.py
[17:00:06] *** Joins: matkor (~matkor@93.179.197.152)
[17:00:18] <Payam> Now I have added it there
[17:00:42] <graingert> https://www.irccloud.com/pastebin/PbHlUQJ7/Payam.tree
[17:01:08] *** Joins: georgios (~georgios@2a02:587:a042:8188:15c9:6170:ebb0:fd1d)
[17:01:08] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[17:01:14] <graingert> you want `python_files=*_test.py test_*.py *Test.py` otherwise it will confuse people
[17:01:21] <graingert> when their tests don't run
[17:02:41] <Payam> graingert https://paste.debian.net/1206437/
[17:03:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:03:44] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:2c62:d9b7:a938:d1d6)
[17:03:46] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[17:04:04] <lpapp> maybe, it is a bit subjective, but what lib would you recommend to plot some data on x and y axes?
[17:04:10] <lpapp> matplotlib or something simpler or heavier?
[17:04:16] *** Joins: rany (~rany@user/rany)
[17:05:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:05:17] <Payam> graingert https://paste.debian.net/1206438/ after installing pydot.  btw I only want to run the unittests that are inside unittests/ folder
[17:05:52] *** Joins: adamts (~Adam@user/mysteryblokhed)
[17:06:32] <graingert> Payam: you can make a conftest.py in your unittests.py containing: https://www.irccloud.com/pastebin/TMn66blZ/unittests%2Fconftest.py
[17:06:58] <graingert> then add `pytest -m unit ...` to your pytest command
[17:07:37] *** Quits: georgios (~georgios@2a02:587:a042:8188:15c9:6170:ebb0:fd1d) (Ping timeout: 245 seconds)
[17:08:29] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:11:17] *** Joins: MetalSutton (~MetalSutt@101.100.153.131)
[17:11:22] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[17:11:42] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:12:00] <Payam> I gave up graingert but thank you
[17:12:02] *** Joins: Jefren4 (~Jefren@208.104.190.7)
[17:12:03] <MetalSutton> Hey all
[17:12:14] <graingert> Payam: why, you're one step away from it working
[17:12:35] <Payam> no. I don't undrestand it.  :(
[17:12:48] <GinFuyou> Hello! Probably I just missing it, but I can't quite clearly get how pyinstaller get my requirements. I see it's said it analyzes imports, so it just copy all mentioned modules from current path?
[17:12:59] *** Quits: jpic (~jpic@82.142.6.158) (Ping timeout: 250 seconds)
[17:13:09] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[17:13:40] <MetalSutton> I am wondering about how to best code/develop a python script without it locking up my raspberry pi. Is there anytthing I can do to easily force kill the process and reset a tft screen each time i want to test? like I can put a safety kill code assigned to a button?
[17:13:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:13:43] *** Joins: gusto (~Augustus@109.255.100.54)
[17:13:54] *** Quits: emika (~emika@83.136.182.38) (Ping timeout: 252 seconds)
[17:14:08] *** Joins: emika (~emika@83.136.182.197)
[17:14:12] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[17:14:17] *** Joins: thiras (~thiras@user/thiras)
[17:14:48] *** Quits: Jefren3 (~Jefren@70.35.67.97) (Ping timeout: 256 seconds)
[17:14:56] <Payam> graingert We use unittest framework
[17:15:09] <TomyWork> I'm having trouble figuring out what PEP8 suggests for local variables. is it snake_case?
[17:15:12] <graingert> Payam: yes pytest is just used to collect and parallelize your unittest tests
[17:15:15] <Payam> isn't there any other methods to run unittests in parallel
[17:15:23] <graingert> it still runs them via the unittest framework
[17:15:24] <bjs> TomyWork: yes.
[17:15:27] <TomyWork> thanks
[17:15:30] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[17:15:30] *** Quits: afidegnum (~user@102.176.94.177) (Ping timeout: 240 seconds)
[17:15:36] <Payam> I will give it a try again. so first having the pytest.ini
[17:15:46] <TomyWork> that's what i've been doing anyway, so that's great :)
[17:15:51] <bjs> TomyWork: https://www.python.org/dev/peps/pep-0008/#function-and-variable-names
[17:16:14] <Payam> then having that pytestmark = pytest.mark.unit in all the unit tests. and then run pytest -m unit ..?
[17:16:35] <graingert> Payam: show your pytest.ini and tree and .gitlab-ci.yaml before you run it
[17:16:46] <graingert> Payam: no only in the unittest/conftest.py
[17:16:56] <Payam> aha okej
[17:16:59] <Payam> wait a sec
[17:17:34] *** Quits: Jefren4 (~Jefren@208.104.190.7) (Ping timeout: 258 seconds)
[17:18:01] *** Joins: Jefren4 (~Jefren@206.253.157.221)
[17:18:37] *** Joins: cmagina (sid286142@user/cmagina)
[17:19:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:20:15] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[17:20:35] <lpapp> https://bpa.st/LYZQ
[17:20:38] *** Joins: gggp (~gggp@60.10.194.46)
[17:20:39] <lpapp> hi, I have these two lines of code
[17:20:43] <lpapp> but I do not get any plots on my Mac?
[17:20:56] <lpapp> regardless whether I run it from a python script or the python interpreter. What am I doing wrong?
[17:21:10] <lpapp> Just followed the first instructions here: https://matplotlib.org/stable/tutorials/introductory/usage.html#sphx-glr-tutorials-introductory-usage-py
[17:21:21] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7)
[17:21:30] <graingert> lpapp: you need plt.show()
[17:21:30] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 240 seconds)
[17:21:40] *** schumaml2 is now known as schumaml
[17:21:52] <graingert> lpapp: that example is using an ipython notebook
[17:21:59] <graingert> lpapp: do you have vscode?
[17:22:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[17:22:47] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[17:22:55] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[17:23:41] *** Joins: jpic (~jpic@82.142.6.158)
[17:23:49] <TomyWork> bjs, oh, I'm blind and missed that section :D
[17:23:54] *** Joins: DaNeenjah (~jake@adsl-74-230-8-4.hsv.bellsouth.net)
[17:25:37] <lpapp> graingert: nope, mac terminal
[17:25:38] <Payam> graingert https://bpa.st/C5FQ
[17:25:54] <lpapp> it would be nice if they showed working code without such assumptions
[17:26:15] <lpapp> graingert: thanks!
[17:26:22] <Payam> sorry about repeated --cov. I removed it now graingert
[17:27:26] <Payam> graingert the unittests are right under unittests/
[17:27:45] <Payam> and setup.py is under src/ graingert and the pytest.ini is in root
[17:27:54] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:28:18] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 258 seconds)
[17:29:15] <graingert> Payam: Where's your `-c`? And there's the output?
[17:29:23] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[17:29:26] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[17:29:28] <Payam> aah a sec
[17:29:29] <graingert>  Where's your `-c`? And where's the output?
[17:29:41] <graingert> You need to remove the glob from your test call
[17:30:12] *** Joins: LordVan (~lordvan@gentoo/developer/lordvan)
[17:30:24] *** Quits: Melantha (~pyon@user/pyon) (Ping timeout: 252 seconds)
[17:30:27] <Payam> https://bpa.st/XM2Q graingert
[17:30:37] <Payam> what is glob?
[17:31:22] *** Quits: p-i- (~Ohmu@2403:6200:8870:eb96:11fb:5823:c7ea:de6a) (Ping timeout: 258 seconds)
[17:31:45] *** Quits: RickySpanish (~shit@85.203.23.172) (Ping timeout: 258 seconds)
[17:32:12] *** Joins: Melantha (~pyon@user/pyon)
[17:33:53] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[17:34:10] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[17:34:31] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:34:40] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[17:35:09] *** Joins: marduk4 (~marduk@172.58.190.153)
[17:37:15] *** Joins: marduk1 (~marduk@172.58.187.231)
[17:38:12] *** Quits: bninja (~bloodninj@user/bloodninja) (Ping timeout: 272 seconds)
[17:39:28] *** Quits: marduk (~marduk@172.58.190.163) (Ping timeout: 272 seconds)
[17:39:54] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[17:40:57] *** Quits: marduk4 (~marduk@172.58.190.153) (Ping timeout: 258 seconds)
[17:41:24] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[17:41:49] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[17:42:00] *** Quits: marduk1 (~marduk@172.58.187.231) (Ping timeout: 256 seconds)
[17:43:02] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[17:45:15] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 252 seconds)
[17:46:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:47:19] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[17:47:35] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[17:47:43] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[17:48:34] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[17:48:59] *** Joins: shad (~shad@user/shad)
[17:49:10] *** Joins: Matheo_bis (~matheo@user/matheo-bis/x-4309430)
[17:49:26] *** Joins: Ad1Tech (~Ad1Tech@h104101.man.tk-internet.pl)
[17:50:56] *** Joins: Bardon (~Bardon@user/Bardon)
[17:51:50] <rud0lf> sorry for not googling first but i'm in a hurry, can you install several packages with one pip command, like "pip3 install --user package1 package2 package3" ?
[17:52:07] <tims> rud0lf: yes
[17:52:12] <rud0lf> thank you tims
[17:52:13] *** Joins: wakeup (~wakeup@user/wakeup)
[17:52:21] <wakeup> Hi
[17:52:50] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[17:53:36] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 258 seconds)
[17:53:41] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[17:53:44] <wakeup> I've noticed that __code__.co_code is the same for 2 different functions, but I was expecting this not to be the case. The functions may be logically equivalent, but they contain different code. I guess that's why __code__.co_code is different. Right? Anyone familiar with the topic that can confirm or not? I don't need more guesses, like I am
[17:53:44] <wakeup> doing. I need someone that really knows what co_code returns and whether what I said is true
[17:53:57] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[17:53:58] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:54:02] <NoImNotNineVolt> [A
[17:54:25] *** Quits: Matheo_bis (~matheo@user/matheo-bis/x-4309430) (Quit: Konversation terminated!)
[17:54:35] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[17:55:19] <wakeup> If what I said is true, what would be the solution to the problem of getting a string representation of two functions, such that the strings are different if they contain different code, even if the functions are logically equivalent
[17:55:35] <wakeup> The only thing that it's fine to be the same is the name
[17:55:54] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:800d:9af4:8534:b40) (Ping timeout: 240 seconds)
[17:57:57] <tims> wakeup: If I want to get a unique method name I prepend it with the module name
[17:58:12] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[17:58:49] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[17:59:05] *** Joins: dpreacher (~dpreacher@user/dpreacher)
[17:59:21] <tims> eg my_func.__module__ or use id
[17:59:29] <wakeup> no, that's not my question
[18:00:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:00:07] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[18:00:07] <tims> You want the identifier to be the same if the code is identical?
[18:00:16] <Repiphany> Knowing whether two functions are logically equivalent even if they're written differently is probably unsolvable
[18:00:27] <wakeup> let's say that the function or property I am looking for should return me 2 string representations, one for each function passed as input, f and g, such that those string representations are different whenever f and g are in all aspects but the name
[18:01:00] <wakeup> Repiphany I don't want to know whether 2 functions are logically equivalent
[18:01:06] <wakeup> I want to know whether they have different code
[18:01:14] *** Joins: LiftLeft (~LiftLeft@138.199.10.79)
[18:01:24] <tims> wakeup: might want to start looking at the AST module
[18:01:40] <wakeup> tims I'm already working with that module for months
[18:01:47] <wakeup> As far as I know, it doesn't do that
[18:02:10] <wakeup> I was looking for something like __code__.co_code, actually I've been using it, but I noticed that it doesn't do exactly what I wanted
[18:02:22] <wakeup> probably because the Python compiler performs some code optimizations
[18:02:29] <wakeup> before the compilation to bytecode
[18:03:05] <tims> you can do that with AST, but you would need to write something to do the diff
[18:03:15] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[18:03:40] <wakeup> it would be to cumbersome
[18:03:48] <wakeup> trying to figure all the cases
[18:04:04] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[18:04:24] <tims> I've usually ended up with some form of recursion when I've had to process AST
[18:04:28] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[18:04:52] *** Joins: Elodin (~weechat@user/elodin)
[18:05:10] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:05:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:05:39] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[18:05:50] <Repiphany> import inspect; inspect.getsource(func)
[18:05:52] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[18:06:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:06:31] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:08:27] *** Joins: digilink (~digilink@user/digilink)
[18:09:20] *** Joins: junktext (~junktext@77.247.181.217)
[18:10:18] *** Quits: gggp (~gggp@60.10.194.46) (Read error: Connection reset by peer)
[18:11:55] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:13:04] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:13:20] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 265 seconds)
[18:13:29] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[18:14:15] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[18:14:18] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 272 seconds)
[18:15:21] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[18:15:32] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[18:16:13] *** Quits: dpreacher (~dpreacher@user/dpreacher) (Ping timeout: 258 seconds)
[18:16:28] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[18:17:45] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[18:17:59] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 250 seconds)
[18:19:03] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:19:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:19:36] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:20:07] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 245 seconds)
[18:22:21] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:23:26] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (Ping timeout: 258 seconds)
[18:23:45] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[18:23:59] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[18:24:01] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[18:24:20] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:24:47] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:26:06] <kieto> Would you use conftest.py to set a global env variable that all tests need?
[18:26:30] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:9c68:bd4a:d73:9488)
[18:26:49] *** Joins: monkey_ (~user@190.148.252.236)
[18:27:06] <bjs> wakeup: if the co_code is the same then the two functions are going to execute the same code
[18:27:24] <bjs> wakeup: but note that co_code isn't everything about the function,  stuff like the closure and variables are separate
[18:27:36] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[18:29:03] *** Joins: marduk (~marduk@172.58.187.5)
[18:29:08] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[18:29:21] <bjs> wakeup: what do you want the string representation for exactly?  in Python you can just pass the functions themselves around and ask if the functions are the same etc
[18:30:04] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[18:30:05] <wakeup> It's a research problem. I cannot share more details, but I need this
[18:30:33] *** Joins: jess (~jess@libera/staff/jess)
[18:30:48] *** Joins: kosh (~kosh@user/kosh)
[18:30:52] <bjs> wakeup: a research problem that involves stringifying functions immediately sounds fishy because any researcher would immediately see the undecidability in generating semantics-aware strings for functions
[18:31:10] <bjs> unless you just mean, "take the hash of the source code" or something
[18:32:35] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:32:45] *** Joins: Jefren (~Jefren@208.104.190.2)
[18:33:41] *** Joins: marduk5 (~marduk@172.58.187.52)
[18:34:22] *** Quits: monkey_ (~user@190.148.252.236) (Remote host closed the connection)
[18:34:37] *** Quits: Jefren4 (~Jefren@206.253.157.221) (Ping timeout: 258 seconds)
[18:34:41] *** Joins: Jefren1 (~Jefren@70.35.67.243)
[18:36:03] <Payam> is this a valie python statement? `return iid in (mr for mr in project.mergerequests.list() if mr.source_branch==branch_name)`
[18:36:05] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:36:05] <SnoopJ> kieto, you could do it with an autouse fixture defined in conftest.py, but all tests depending on an env var sounds like the underlying code is maybe a little scary.
[18:36:18] <Payam> there is only one element satisfying that condition
[18:36:19] *** Joins: marduk6 (~marduk@172.58.187.127)
[18:36:24] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:36:25] <SnoopJ> Payam, it is syntactically valid
[18:36:26] <bjs> Payam: valid?  surely Python can tell you that?
[18:36:58] *** Quits: Jefren (~Jefren@208.104.190.2) (Ping timeout: 240 seconds)
[18:36:59] <Payam> iid is nt valid. Just wondering if there is an other way
[18:37:27] <bjs> Payam: "iid is nt valid" ?
[18:37:30] *** Quits: marduk (~marduk@172.58.187.5) (Ping timeout: 252 seconds)
[18:37:30] *** marduk6 is now known as marduk
[18:37:31] <bjs> I'm not sure what that means.
[18:37:32] <SnoopJ> Payam, can you explain what "not valid" means?
[18:37:43] <Payam> defined
[18:37:45] <Payam> sorry
[18:37:58] <bjs> Payam: then what is iid ?
[18:38:07] <Payam> just a name
[18:38:18] <bjs> Payam: but you said it wasn't defined
[18:38:20] <bjs> I'm confused :)
[18:38:26] <SnoopJ> Well, it will need to be defined for that statement to execute. Perhaps we can see the complete code
[18:38:34] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[18:38:40] <kieto> SnoopJ: it's a client library which defines the prod/staging/dev secrets/variables from a single envvar "CLIENT_ENV"
[18:38:43] <SnoopJ> (to execute successfully, that is)
[18:38:44] <GinFuyou> Payam, but you can return it as list comprehension
[18:38:53] <Payam> I did a next on it
[18:39:24] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:39:45] <bjs> Payam: can you explain what you're actually trying to do?  The line is "valid" Python,  but it's not clear what you want it to do
[18:39:48] *** Quits: marduk5 (~marduk@172.58.187.52) (Ping timeout: 256 seconds)
[18:39:49] <bjs> (if it doesn't do what you want already?)
[18:39:59] <Payam> I solved it sorry. thank you anyway
[18:40:57] <SnoopJ> kieto, can it change during runtime? I normally do this sort of thing where there may be multiple ways to configure it, so it gets brought in once at initialization time.
[18:41:27] <kieto> SnoopJ: it should be brought only once at init time. How do you do it? I'm having quite a few issues with it
[18:42:06] *** Joins: p-i- (~Ohmu@2001:44c8:4609:a6a1:fdc4:fbe6:6df9:9c71)
[18:42:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[18:42:34] <wakeup> bjs That's a big claim. "Any researcher?" No, not any researcher. What do researchers in biology would know about that? Moreover, my problem is decidable.
[18:43:15] <wakeup> You can just take the source code, ignore all comments, and format the functions equally, ignore the names of the functions, and compare the resulting string
[18:43:17] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:43:20] <wakeup> decidability right there
[18:43:24] <SnoopJ> kieto, e.g. in __init__.py, `SECRET = os.environ["CLIENT_ENV"]` and then I use `SECRET` elsewhere, but maybe there are other things that will configure it, or maybe it lives inside a object class if it might need to take multiple values during program lifetime.
[18:43:44] <bjs> wakeup: you made it seem like the actual stringification you wanted of the function was the research;  maybe I misunderstood what you were trying to do. But either way looking at co_code is probably incorrect and looking at the source is much simpler
[18:44:08] <bjs> wakeup: yes I said you can look at the source, you just can't try infer anything about the semantics by doing so. ( two  programs that look the same can do different things ,two programs that look different can do the same thing )
[18:44:29] <SnoopJ> geneticists know a great deal about semantics-aware strings, but I haven't read the complete context of scrollback
[18:44:42] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:44:47] *** Quits: TomyWork (~TomyLobo@p200300e80f133c007585c42c4fccc2ad.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:45:19] <bjs> SnoopJ: you cannot generate strings of computer code and try and assign meaning to those strings in a decidable way without _severely_ restricting the computational power of those programs.
[18:45:36] * SnoopJ nods
[18:46:10] <bjs> so there is no standard way to even attempt,  Python will let you say that "this function is the same function as that function" but it doesn't give any way to know if they do the same/different things or if they "look the same" or anything.
[18:46:46] <bjs> because e.g. `def f(): return x` does different things if you put it in different files/in different places, and `def f(x): return x` and `def f(y): return y` are "the same" even though they look different.
[18:46:48] <SnoopJ> Having looked at the original messages, the broad answer to "what does co_code give me" is "whatever *that specific Python* emitted"
[18:46:50] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[18:47:13] <bjs> (although the latter two's co_code should(?) be the same.)
[18:47:22] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[18:47:31] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[18:47:42] <SnoopJ> bjs, I believe so, the difference should be in co_consts
[18:47:51] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:48:01] <kieto> SnoopJ: thanks! I'll think about it a little more then :)
[18:48:11] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[18:48:40] <kieto> it's like, somewhere down the code, I do `getenv("CLIENT_ENV")` and it's empty, I don't know how
[18:49:03] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[18:49:25] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:49:46] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 272 seconds)
[18:50:37] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:51:13] <wakeup> bjs You can assume that the functions would be used in the same place and defined in the same place
[18:51:16] <wakeup> you can ignore that
[18:51:21] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 250 seconds)
[18:52:11] *** Joins: akk (~akk@75.161.157.26)
[18:52:15] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[18:52:36] <SnoopJ> kieto, well, the environment could definitely have changed in the interim. This is why I say it sounds scary to depend on it everywhere if the work can be done once.
[18:53:50] <bjs> wakeup: you need to apply a lot of domain knowledge in order for this to work/be safe that you may as well just restrict the domain of the input itself
[18:54:22] <wakeup> the functions that I will have to deal with are already restricted
[18:54:27] <wakeup> I don't really think this is the problem
[18:54:35] <wakeup> no closures
[18:54:37] <wakeup> not stuff like that
[18:54:39] <wakeup> simple functions
[18:55:06] <SnoopJ> wakeup, could you draft up an equivalent problem that we could examine?
[18:55:08] <wakeup> in any case, my problem is decidable and Python actually solves it
[18:55:15] <wakeup> Python solves my problem
[18:55:17] <wakeup> but it does more
[18:55:22] <wakeup> more than what I want
[18:55:23] <wakeup> that's why
[18:55:56] <bjs> wakeup: fair enough,  just be wary that any of these techniques will fall apart really quick if your inputs stray too far out of the domain
[18:56:10] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[18:56:12] <bjs> and these bugs are a complete PITA to fix
[18:56:20] <wakeup> basically, I want a similar solution to what Python does with __code__.co_code but ignoring functions that have been simplified because Python understood they are equivalent
[18:56:22] <SnoopJ> trying to reconstruct source from co_code is definitely barking up the wrong tree, because there are a lot of ways to get identical co_code from different text
[18:56:32] *** Joins: Jefren2 (~Jefren@70.35.67.133)
[18:56:40] <xheimlich> Hi. Starting at which version of Python is the syntax "list[int]" for type annotations (rather than "List[int]") available?
[18:56:41] <SnoopJ> (and it's not stable between versions anyway)
[18:56:48] <bjs> wakeup: Python doesn't "understand they're equivalent", it's just that co_code is only *one* part of the code object
[18:57:16] <wakeup> SnoopJ can you provide an example of two different functions that have identical co_code?
[18:57:22] <madprops> what section should I put "warn_unused_ignores = false" in pyproject.toml ?
[18:57:22] *** Joins: sharperguy__ (~sharpergu@2001:16b8:5cb8:8700:7c13:7fe3:176d:1dc7)
[18:57:44] <phy1729> xheimlich: 3.9 https://www.python.org/dev/peps/pep-0585/
[18:57:46] <wakeup> You can ignore if co_code is not stable across versions
[18:57:54] <wakeup> you can assume a single version of Python
[18:57:56] *** Quits: Jefren1 (~Jefren@70.35.67.243) (Ping timeout: 256 seconds)
[18:58:08] <bjs> wakeup: you just shouldn't look at co_code at all, or if you are least look at the *entire* code object
[18:58:10] <bjs> not just co_code
[18:58:55] <bjs> (or really since you want to do something syntactic, just ask `ast` to give you an AST for the function)
[18:58:58] <graingert> xheimlich: 3.7 with `from __future__ import annotations`
[18:59:08] <SnoopJ> wakeup, sure. here's the example bjs gave earlier on 3.9.4, for instance: https://bpa.st/ILOQ
[18:59:21] *** Joins: digilink (~digilink@user/digilink)
[18:59:29] <SnoopJ> the bytecode doesn't care what the names are, that lives somewhere else on the code object
[18:59:31] <bjs> (with some argument about whether they are "different functions" if they have the same code)
[18:59:39] <graingert> xheimlich: use pyupgrade to automatically fix your annotations
[18:59:54] <xheimlich> graingert: cool. thanks!
[18:59:56] <SnoopJ> bjs, and whitespace :/
[19:00:10] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:00:18] <graingert> bjs: Also you can mess with the flags on the code object
[19:00:32] *** Quits: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 272 seconds)
[19:00:34] <SnoopJ> (and parens, and other sourcetext changes that don't modify the mapping)
[19:00:38] <graingert> And make Coroutines out of Generators and fun stuff like that
[19:00:45] <wakeup> SnoopJ those functions have exactly the same code. The only thing that is different is the name of the variables
[19:01:06] <graingert> Also have a look at patchy.patch for cool __code__ stuff
[19:01:35] *** Joins: Jefren3 (~Jefren@70.35.67.248)
[19:01:43] <bjs> wakeup: I mean SnoopJ can extend that example and add some different globals and non-locals and do some arithmetic
[19:01:51] <bjs> and still get things with the same co_code
[19:02:10] *** Quits: p-i- (~Ohmu@2001:44c8:4609:a6a1:fdc4:fbe6:6df9:9c71) (Ping timeout: 240 seconds)
[19:02:44] <SnoopJ> right, you can add `1+1` to either of those functions without modifying the co_code. CPython will fold that away.
[19:03:13] <wakeup> Can you show me the example?
[19:04:02] *** Joins: Jefren4 (~Jefren@70.35.67.162)
[19:04:05] <SnoopJ> https://bpa.st/PPJQ
[19:04:09] *** Quits: Jefren2 (~Jefren@70.35.67.133) (Ping timeout: 268 seconds)
[19:04:21] <bjs> wakeup: I don't really get why,  you can't try work around these examples, they change all the time and it's just whatever instructions Python has that day and decides to emit and it can fold things together or not or put names in different parts (like, a lot of the data of the instructions aren't part of co_code and that can be pretty arbitrary)
[19:04:44] <SnoopJ> bjs, well, they did say they're restricting the problem to one particular interpreter, so there's that at least
[19:05:04] <wakeup> SnoopJ Yes, exactly, that's what co_code does that I didn't want it to do
[19:05:08] <wakeup> it performs optimizations
[19:05:13] *** Joins: cris (~xkd50swas@85.203.46.225)
[19:05:17] <SnoopJ> wakeup, "co_code" doesn't "do" anything, it's the result of the compiler's work.
[19:05:19] <bjs> SnoopJ: except it doesn't work that way as you well know, two interpreters that claim the same X.Y.Z version can have different behaviours
[19:05:19] <wakeup> and understands that the functions are logically equivalent
[19:05:32] <SnoopJ> wakeup, you have some source code that's being optimized away, but you don't want it to be?
[19:05:35] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[19:05:37] <wakeup> SnoopJ Yes, I know but you understood what I meant
[19:05:57] <SnoopJ> Just making sure we're on the same page.
[19:06:03] <bjs> wakeup: I *highly* recommend just not looking at __code__
[19:06:23] <wakeup> That's the only thing that is acceptable in my case
[19:06:26] *** Quits: Jefren3 (~Jefren@70.35.67.248) (Ping timeout: 258 seconds)
[19:06:30] <wakeup> I don't want to spend 2 weeks trying to parse ast
[19:07:20] <bjs> wakeup: import ast; print(ast.dump(ast.parse(inspect.getsource(f))))
[19:07:25] <SnoopJ> wakeup, can you answer my question about optimization?
[19:08:59] <SnoopJ> also yea, looking at the source for this is nice, whenever it's possible (which is basically always if it's coming from a file)
[19:09:43] <bjs> wakeup: and if you want you can make a https://docs.python.org/3/library/ast.html#ast.NodeTransformer that normalises the bits that hit corner cases in your domain
[19:10:23] <wakeup> SnoopJ yea, for my purposes, I don't want the optimizations to happen
[19:10:34] <bjs> wakeup: you can't *stop* them from happening
[19:10:43] <wakeup> how?
[19:10:48] <bjs> ... well you can't
[19:10:52] <wakeup> ha
[19:10:54] <wakeup> I read can
[19:11:06] <wakeup> well, that's what I was also wondering
[19:11:22] <bjs> wakeup: `ast` is fairly easy to use and has lots of features to make doing syntactic things easier
[19:11:33] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 268 seconds)
[19:11:36] <bjs> wakeup: I'm sure it'll be easier to use the ast module than using co_code
[19:11:58] *** Quits: cris (~xkd50swas@85.203.46.225) (Quit: Leaving)
[19:12:53] *** Joins: p-i- (~Ohmu@2001:44c8:4609:a6a1:d511:3e84:a1d:196f)
[19:12:56] <SnoopJ> there might be a compiler flag or something? but if you can do this in another way it would be far superior. Code folding isn't the only thing to worry about here, because the grammar itself also admits identical ASTs from non-identical text.
[19:13:01] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[19:13:23] <bjs> SnoopJ: there's not, see: the arguments ned has had over these optimizations for $N years :P
[19:13:25] <SnoopJ> but maybe that's less important, since you're saying you have [something] and it's being optimized away and that's a problem for...some reason.
[19:13:49] <SnoopJ> bjs, for all the CPython trivia I have absorbed, I am still very ignorant of the compiler :)
[19:14:20] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:14:25] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:14:46] *** Quits: rsx (~dummy@ppp-188-174-148-117.dynamic.mnet-online.de) (Quit: rsx)
[19:14:52] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[19:14:56] <SnoopJ> oO(what if -O=-1)
[19:15:07] *** Leonarbro_ is now known as Leonarbro
[19:15:12] <bjs> SnoopJ: iirc nedbat had problems with coverage due to dead-code elimination and the like,  the issue is not the lack of free flags to use
[19:15:16] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:15:18] <bjs> it's the fact they don't want the feature at all
[19:15:27] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[19:15:27] <SnoopJ> yea, I know
[19:16:03] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:16:15] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Excess Flood)
[19:16:25] <bjs> SnoopJ: fwiw nedbat's case is probably fixed with https://www.python.org/dev/peps/pep-0626/ so now there is nobody arguing strongly for such a flag
[19:16:26] <SnoopJ> oh oops, -1 is the placeholder value anyway
[19:16:41] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:16:55] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 250 seconds)
[19:17:05] <graingert> SnoopJ: They broke something in anyio by changing the placeholder recently
[19:17:14] <SnoopJ> wow
[19:17:25] <bjs> graingert: anyio broke it or cpython broke it?
[19:17:30] <graingert> It was cancelling async generator expressions
[19:17:44] <SnoopJ> twice wow, I suppose. one for that code churning in CPython, the other for it rippling out to a lib like that
[19:19:23] *** Joins: VimVim (~VimVim@85.184.175.6)
[19:21:14] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:21:29] *** Joins: Bardon (~Bardon@user/Bardon)
[19:21:54] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[19:22:10] <SnoopJ> MetalSutton, that issue has drawn a surprising amount of attention from the pygame maintainers, looks like they consider it an error-reporting bug after all (there's even a check for exactly this thing, but it ignores the patch version of SDL)
[19:23:05] <MetalSutton> oh yup. nice!
[19:23:39] <MetalSutton> I managed to get a secondary problem sorted which was when i got pygame working, I couldnt draw to fb1 , being the tft screen
[19:24:19] <MetalSutton> I was scratching my head for a while, but eventually realized i had to run as sudo, and now im all back on track.
[19:24:27] *** Quits: reumeth2 (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[19:24:34] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 256 seconds)
[19:24:35] <MetalSutton> Using python 3.7
[19:26:40] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[19:26:54] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[19:27:12] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[19:29:03] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 258 seconds)
[19:29:08] *** Joins: airmailsteam (~airmailst@user/airmailsteam)
[19:29:14] <gitesh> do you like dot notation? i feel it odd
[19:29:19] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[19:29:33] *** Joins: nyah (~nyah@90.221.186.180)
[19:29:36] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:addb:a87a:2c4:cf0e) (Quit: Leaving)
[19:29:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da)
[19:30:38] <xheimlich> what's dot notation? graphviz? fluent api?
[19:30:56] *** Joins: marduk0 (~marduk@172.58.190.229)
[19:32:38] <bjs> gitesh: what do you mean by "dot notation"?
[19:33:01] *** Joins: marduk6 (~marduk@172.58.187.78)
[19:33:04] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Remote host closed the connection)
[19:33:36] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:5967:2fb0:cc2f:4c7c)
[19:34:46] *** Quits: marduk (~marduk@172.58.187.127) (Ping timeout: 256 seconds)
[19:34:46] *** marduk6 is now known as marduk
[19:34:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:36:43] *** Quits: marduk0 (~marduk@172.58.190.229) (Ping timeout: 258 seconds)
[19:36:47] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 245 seconds)
[19:36:51] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[19:36:59] <lpapp> hi, how can I kill a stuck python/matplotlib? python3 plot2.py
[19:36:59] <lpapp> ^C^C^C^C^C^C^C
[19:37:08] <lpapp> it would not stop for even ctrl-c and ctrl-z
[19:37:23] <jabberwock> I wonder if that's a python thing or an OS thing
[19:37:26] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[19:37:46] <lpapp> I have to close the plot window.
[19:37:49] <lpapp> but it is quite annoying.
[19:38:06] <lpapp> I guess plot.show() takes away the keyboard management from the prompt?
[19:39:31] <bjs> lpapp: what is plot2.py ?
[19:39:39] <gitesh> bjs: for example, L2.sort() where L2 is a list
[19:40:26] <bjs> gitesh: you think it's odd?
[19:41:14] <bjs> gitesh: I'm just so used to that syntax I don't really find it odd,  what do you think is odd about it?
[19:41:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:41:50] <gitesh> bjs: it's odd to think about it , like invoking a method on an object means what
[19:42:41] <bjs> gitesh: well,  the way to think about it (usually) is that inside the object are some methods and attributes. so L2.sort() is looking inside the L2 object to find the "sort" method, which it then calls.
[19:43:11] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:43:52] *** Joins: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net)
[19:43:57] *** Joins: zebrag (~chris@user/zebrag)
[19:44:53] <SnoopJ> jabberwock, the UI's event loop is swallowing the interrupt I think.
[19:45:27] <jabberwock> SnoopJ: That makes sense. I was thinking that I've seen this behavior in Qt
[19:45:54] <jcalla> Ctrl+z could work to give you back terminal control. then you can kill the background job
[19:48:13] <gitesh> bjs: if inside object there are some methods and attributes then where the real value (the list) lies?
[19:48:51] <bjs> gitesh: it's also inside the object
[19:48:52] *** Joins: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com)
[19:48:56] *** jinsun_ is now known as jinsun
[19:49:03] <gitesh> bjs: and why every time to create methods for each object it will just take a lot of memory
[19:49:05] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) ()
[19:49:25] <SnoopJ> gitesh, it doesn't make a "copy" of the methods if that's what you're thinking.
[19:49:27] <bjs> gitesh: well Python is smart and it doesn't actually use more memory each time
[19:49:39] <gitesh> SnoopJ: yeah that's what I'm thinking
[19:49:44] *** Joins: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com)
[19:49:45] <bjs> gitesh: (Python keeps the methods on the _class_, but conceptually they're part of the object)
[19:49:48] <gitesh> bjs: okay
[19:50:12] <AhmedAmerican> isn't possible within `selenium` to use `params=params` ?
[19:50:13] <SnoopJ> gitesh, these are "implementation details," they're the things people who are writing a Python interpreter have to worry about. The person writing Python rarely needs to even know they exist.
[19:51:17] <gitesh> and also are all methods a side effects?
[19:51:26] <gitesh> I mean not all but mostly?
[19:51:34] <bjs> gitesh: well surely it depends on the method
[19:51:41] <gitesh> okay
[19:52:12] *** Quits: zeenk (~zeenk@2a02:2f04:a211:a800:553b:3cb0:5ea1:7e83) (Ping timeout: 245 seconds)
[19:52:23] <bjs> gitesh: L2.sort() has a side-effect clearly,  but L2.count(x) probably doesn't
[19:52:42] *** Quits: airmailsteam (~airmailst@user/airmailsteam) (Quit: Konversation terminated!)
[19:52:58] <bjs> gitesh: I don't think anyone has gone around counting up all of the methods on all of the classes in all of the files in all of the Python code to see how many of each type there are :)
[19:53:16] *** Joins: philipp64|work (~philipp64@174.27.13.9)
[19:53:25] <gitesh> that
[19:53:26] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:596f:b49c:c2de:ec35) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:53:33] <gitesh> that's okay :)
[19:53:40] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:53:55] *** Joins: srhm (~ascii@user/srhm)
[19:54:29] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:54:30] <SnoopJ> and some of the behavior isn't guaranteed to be the same between different interpreters. There's a certain risk associated with getting too close to the details.
[19:54:49] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[19:58:34] <gitesh> is coding algorithm is important because with python you can just do it right away .sort() or sorted()
[19:58:47] <SnoopJ> yes, it's important
[19:58:48] <gitesh> I mean sorting algorithm
[19:58:50] <gitesh> okay
[19:58:52] *** Joins: reumeth (~reumeth@user/reumeth)
[19:59:08] <SnoopJ> you don't *need* to know about it, but it's important :)
[19:59:10] <bjs> gitesh: well,  do *you* need to know all the different sorting algorithms?  Maybe not
[19:59:10] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[19:59:29] <bjs> gitesh: are they important? Well yes,  that's why there's methods and functions built-in so you can use them without needing to do it yourself :)
[19:59:38] <AhmedAmerican> is it possible to pass query parameters to selenium separately ? instead of driver.get(UrlWithParams) to be driver.get(url, params=params) ?
[20:00:15] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[20:00:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[20:01:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 245 seconds)
[20:02:34] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:03:06] <bjs> gitesh: I guess sorting algorithms are one of those things that will get taught to people when they learn programming/compsci,  but the point isn't really to teach them about sorting.  But rather sorting algorithms are just a nice, relatively simple set of algorithms that cover a lot of good techniques in programming that people are likely to encounter in the real world.
[20:03:37] <bjs> Do I expect random programmers are able to implement heapsort off the top of their head? No.  But a programmer who has learned about heapsort and the techniques it uses will probably be a better programmer.
[20:04:15] <gitesh> ok bjs
[20:05:03] <SnoopJ> it's helpful to know what you don't know, too
[20:05:06] *** Joins: marduk0 (~marduk@172.58.187.156)
[20:05:20] *** Joins: Pickchea (~private@user/pickchea)
[20:06:34] <SnoopJ> example: everyone needs to know about the concept of sorting, and the notion that there are different ways to do it with different tradeoffs. But very few people *need* to know all the different ways.
[20:06:44] *** Joins: marduk2 (~marduk@172.58.190.193)
[20:08:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:08:38] *** bjonnh is now known as clippy
[20:08:50] *** clippy is now known as bjonnh
[20:08:55] *** Quits: marduk (~marduk@172.58.187.78) (Ping timeout: 258 seconds)
[20:08:56] *** marduk2 is now known as marduk
[20:09:57] *** Joins: epistax (~epistax@64.222.98.26)
[20:10:22] *** Joins: crised (~crised@200.112.228.39)
[20:10:27] *** Quits: marduk0 (~marduk@172.58.187.156) (Ping timeout: 258 seconds)
[20:10:35] <hodapp> behavior of sorting algorithms can also matter in some applications, and it's beneficial to understand (for instance) when you might need a stable sort, what a topological sort looks like, and cases where you can avoid requiring a comparison sort (and use something like radix sort)
[20:10:38] <crised> Is there a function like all() for a list, that allows a specific function?
[20:10:50] <crised> My goal is to check if every element of list is either int/float typed?
[20:10:56] <hodapp> crised: are you trying to call this function on every element of the list, and collect the results of that?
[20:11:01] <epistax> Just upgraded from 3.7.4 to 3.9.6 on Windows. a cdll.LoadLibrary is now failing that used to pass (cannot find dll). The python process was launched with the dll's folder on the system path (Windows 10). Is there anything else required now?
[20:11:41] <bjs> crised: you can just go `all(isinstance(x, float) for x in that_list)`
[20:11:42] <crised> hodapp: yes, but I want to process the collection of the results with a boolean output.
[20:11:46] <SnoopJ> crised, that's usually spelled `all(predicate(val) for val in iterable)` or maybe `all(map(predicate, iterable))` if you prefer a functional aesthetic.
[20:11:49] *** Joins: cbasah (~armycook2@202.185.71.229)
[20:11:58] <meejah> crised: there's "any()"
[20:11:59] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 268 seconds)
[20:12:56] *** Quits: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:13:23] <crised> Great suggestions guys thanks.
[20:13:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[20:14:13] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[20:14:45] <SnoopJ> huh, implementations of any() and all() differ by only two lines, but the rest is duplicated. Guess there's not really any problem with that, but I guess I expected them to have a common impl
[20:14:56] <crised> SnoopJ: How can I use isinstance(x, float) in the map?
[20:15:00] *** Joins: plancksconstant (~plancksco@223.225.129.187)
[20:15:19] *** Joins: fdan (~fdan@192.146.154.3)
[20:15:37] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:15:37] <crised> i.e How can i pass the predicate function to map?
[20:15:38] *** Quits: plancksconstant (~plancksco@223.225.129.187) (Client Quit)
[20:15:52] <bjs> crised: make a `def is_float(x): return isinstance(x, float)` function and pass that to map
[20:15:59] <bjs> (or e.g. do the same but with a lambda)
[20:16:02] <SnoopJ> crised, you could `all(map(lambda val: isinstance(val, float), iterable))` but blegh. What bjs said, or just write a comprehension.
[20:16:38] <SnoopJ> or maybe there needs to be another set of parentheses in there, I always have trouble with that.
[20:17:02] <crised> SnoopJ: thanks
[20:17:17] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[20:17:37] <AhmedAmerican> graingert: are you around ?
[20:17:54] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[20:18:14] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:18:45] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[20:19:44] *** Quits: kostkon_ (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[20:20:04] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[20:20:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[20:20:48] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 258 seconds)
[20:22:07] <rndusr> is there a way to get a list comprehension to return less items than the thing it's comprehending? aka return no value sometimes in the loops
[20:22:15] *** Quits: d3sync- (~d3sync@77.49.118.37.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[20:22:48] <SnoopJ> rndusr, you want the filter spelling: `[item for item in iterable if predicate(item)]`
[20:23:19] <rndusr> oh, cool
[20:23:21] <rndusr> thanks
[20:23:44] *** Joins: Ares000 (~Ares3@37.228.196.119)
[20:24:38] *** Quits: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org) (Ping timeout: 256 seconds)
[20:24:44] *** Joins: d3sync (~d3sync@77.49.118.37.dsl.dyn.forthnet.gr)
[20:25:10] <Ares000> hi! How do you find jobs to work on and make some money? I am just starting freelancing!
[20:26:01] *** Joins: Elzington_ (~Elzington@68.235.43.76)
[20:26:01] *** Quits: Elzington_ (~Elzington@68.235.43.76) (Client Quit)
[20:27:23] *** Quits: Elzington (~Elzington@68.235.43.12) (Ping timeout: 252 seconds)
[20:27:25] *** Joins: Elzington_ (~Elzington@68.235.43.76)
[20:27:48] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[20:27:51] *** Quits: Elzington_ (~Elzington@68.235.43.76) (Remote host closed the connection)
[20:29:18] <graingert> I am
[20:29:30] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[20:30:04] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:31:12] *** Joins: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org)
[20:31:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[20:33:10] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:33:28] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[20:33:40] *** Quits: matkor (~matkor@93.179.197.152) (Quit: Konversation terminated!)
[20:33:50] *** Joins: wovixo (~wovixo@128.104.205.49)
[20:34:02] *** Joins: vitejose (~vitejose@2600:6c40:5b00:6875:76e1:e3e:e31b:c6a2)
[20:35:26] *** Joins: Elzington (~Elzington@68.235.43.76)
[20:35:28] *** Quits: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:35:57] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:37:26] *** Quits: cbasah (~armycook2@202.185.71.229) (Ping timeout: 272 seconds)
[20:41:14] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[20:41:38] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:42:22] *** Joins: marduk5 (~marduk@172.58.190.195)
[20:42:49] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[20:44:00] *** Joins: marduk1 (~marduk@172.58.187.45)
[20:44:26] <todda7> how to monkey patch the quit method of a class, in order to quit something else too? without creating a circular reference? eg HTTPConn.quit = HTTPConn.quit + Server.quit
[20:45:07] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[20:45:26] *** Joins: visl (visl@user/visl)
[20:45:46] *** Elon_Satoshi is now known as Musk_Nakamoto
[20:45:46] *** Quits: marduk (~marduk@172.58.190.193) (Ping timeout: 240 seconds)
[20:45:46] *** marduk1 is now known as marduk
[20:46:47] *** Joins: Fiji (~Fiji@user/fiji)
[20:47:24] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:47:38] *** Quits: marduk5 (~marduk@172.58.190.195) (Ping timeout: 258 seconds)
[20:47:40] *** Musk_Nakamoto is now known as Elon_Satoshi
[20:48:45] <bjs> todda7: just give the old one a different name: `old_quit = HTTPConn.quit; def new_quit(self): old_quit(...); Server.quit(...)`
[20:50:01] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:50:26] *** Joins: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de)
[20:50:29] <todda7> perf
[20:50:35] *** Joins: manti7 (~manti7@176.10.104.94)
[20:52:04] *** Quits: marduk (~marduk@172.58.187.45) (Ping timeout: 268 seconds)
[20:54:29] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[20:55:04] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[20:55:54] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[20:56:08] *** Joins: whaley (uid13429@id-13429.stonehaven.irccloud.com)
[20:56:51] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[20:57:06] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[20:57:36] *** Joins: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br)
[20:57:43] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:104d:e67b:167:5475) (Ping timeout: 246 seconds)
[20:57:53] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[21:01:15] *** Quits: k5tux (~k5tux@67.6.11.151) (Remote host closed the connection)
[21:01:33] *** Quits: MetalSutton (~MetalSutt@101.100.153.131) (Quit: Leaving)
[21:01:47] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[21:01:55] *** Quits: Elon_Satoshi (~elonsatos@172.86.186.171.adsl.inet-telecom.org) (Changing host)
[21:01:55] *** Joins: Elon_Satoshi (~elonsatos@user/elon-satoshi/x-4242282)
[21:02:14] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[21:04:19] <rendar> let's say i have this string "abc[a,b,c,d,e]xyz", what is the best way to get "a,b,c,d,e" ? like split() but taking into account 2 different characters (one for opening and one for closing)
[21:04:41] *** Joins: Betal (~Beta@user/betal)
[21:04:48] <bjs> rendar: probably a regex is the best way
[21:05:02] <bjs> rendar: otherwise, a couple of str.partition() calls if your input is so well structured that it's an option
[21:05:04] <kolcon> re.search(r'abc(.)xyz', ...)
[21:05:09] <kolcon> or something like that
[21:05:17] <rendar> bjs: yeah maybe a couple of str.partition()
[21:05:24] <bjs> rendar: or a regex :)
[21:05:36] <rendar> regex would be like 1000x slower than 2 partition()
[21:05:58] <kolcon> string.split('abc')[0]
[21:06:03] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[21:06:06] <bjs> rendar: probably?  I dont actually know
[21:06:06] <kolcon> string.split('abc')[1][0]
[21:06:14] <rndusr> string.replace(']', '[').split('[')
[21:06:27] <rendar> rndusr: that's interesting solution
[21:06:46] <kolcon> ah the [ is literal
[21:06:55] <rndusr> well, s/$/[1]/g
[21:06:58] <kolcon> string.split('[')[1][0]
[21:06:59] <rndusr> but you get the point
[21:07:10] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[21:07:11] *** Quits: DaNeenjah (~jake@adsl-74-230-8-4.hsv.bellsouth.net) (Ping timeout: 258 seconds)
[21:07:33] *** Joins: Payam (~Payam@138.106.57.132)
[21:07:51] <bjs> rndusr: i cannot explain why, but I really hate that solution :P
[21:08:03] <kolcon> bjs: regex is regex :D
[21:08:15] <bjs> kolcon: rndusr's solution is not a regex one
[21:08:43] <rndusr> bjs: i didn't enjoy making it lol
[21:08:55] <rndusr> it is weird
[21:08:58] *** Joins: marduk (~marduk@172.58.190.149)
[21:08:59] <bjs> rndusr: but it's totally irrational, there's no reason why it's bad
[21:09:02] <bjs> but it is clearly bad
[21:09:10] *** Quits: xheimlich (~xheimlich@179.218.1.150) (Quit: leaving)
[21:09:17] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[21:09:27] <rendar> bjs: it's a nice way imho
[21:10:35] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:11:05] *** Quits: SuperLag (~akulbe@user/superlag) (Quit: leaving)
[21:14:13] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[21:15:39] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:16:26] *** Joins: afidegnum (~user@41.66.203.57)
[21:16:53] *** Joins: Bardon (~Bardon@user/Bardon)
[21:17:18] <dale> regex is really slower there?
[21:17:25] <dale> You just want to extract the stuff in the []s?
[21:18:20] <rendar> dale: yep
[21:18:39] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: No route to host)
[21:18:41] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[21:19:22] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:20:11] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[21:20:27] <afidegnum> how do i add variable function parameters from a dictionary? I have the following function. g.Node(tag="div", text="") but i have the following dictionary of variable fields which the function also accept of the following nature: {'tag': 'strong', 'text': 'Fast to Start'} how do i pass in the dictionary to the function of the type key/value ?
[21:20:49] <InPhase> rendar: It's clearly a regex structured problem.  The only good reason to not use a regex for that is if one is not available.  But this is not the case in Python.
[21:21:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[21:21:13] <rendar> InPhase: but a regex is way slower than partition/split functions
[21:21:15] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[21:21:24] <rendar> and i have to repeat this a lot of times
[21:21:29] <InPhase> rendar: It's probably not.
[21:21:30] <SnoopJ> rendar, did you time it?
[21:21:31] <dale> python -m timeit -s 'import re; haystack="abc[a,b,c,d,e]xyz"' "re.search(r'\[([^]]*)\]', haystack).group(1)" -> 791 nsec
[21:21:43] <rendar> InPhase: huh? regex is like 1000x slower than partition/split, try and see
[21:21:49] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:22:00] <rendar> SnoopJ: not me, but a friend of mine did
[21:22:05] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[21:22:07] <dale> python -m timeit -s 'haystack="abc[a,b,c,d,e]xyz"' "haystack.replace(']', '[').split('[')[1]" -> 285 nsec
[21:22:07] <SnoopJ> rendar, you should time it.
[21:22:17] <dale> 3x not 1000x
[21:22:32] <rendar> ok, 3x
[21:22:32] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:22:39] <rendar> SnoopJ ^
[21:22:49] <epistax> Regex is slow but powerful. If you're not doing it in a tight loop, the slowness is often worth it. Sometimes I'll use something more basic to determine if I want to run a regex. For example if I want to extract a timestamp from a particular line, I might use if 'this is the thing i am looking for' in line:  and then do the regex.
[21:22:52] <SnoopJ> rendar, note that dale's sample includes the time it takes to compile the regex, too, which is a one-time cost.
[21:22:57] <InPhase> rendar: Well I've done tons of profiling of regexes in perl, and it's definitely not there.  The regex would be the fast solution.  I will try profiling this on Python and see.
[21:22:59] <dale> SnoopJ: Yeah, I was just thinking about that
[21:23:05] <rendar> epistax: of course i know it, but this is a tight loop
[21:23:31] <rendar> InPhase: read just above ^ dale has proved that regex are 3x slower
[21:23:33] <epistax> Then the next question is do you really care?
[21:23:36] <rendar> and since this is a tight loop, it mtters
[21:23:45] <rendar> epistax: of course!
[21:23:48] <dale> Big difference if you compile: python -m timeit -s 'import re; pat=re.compile(r"\[([^]]*)\]");haystack="abc[a,b,c,d,e]xyz"' "pat.search(haystack).group(1)" -> 313 nsec
[21:24:00] <dale> So re is almost as fast as split.
[21:24:47] <epistax> How you write the re can also make a big difference to how long it takes to process.
[21:24:56] <rendar> it's still 10% slower, and if i can use split to gain that speed, i will do that
[21:25:07] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 245 seconds)
[21:25:08] <dale> python -m timeit -s 'haystack="abc[a,b,c,d,e]xyz"' "haystack.partition('[')[2].partition(']')[0]" -> 287 nsec
[21:25:56] <AhmedAmerican> is it possible to pass query parameters to selenium separately ? instead of driver.get(UrlWithParams) to be driver.get(url, params=params) @graingert shall i monkeypatch this ? or make a subclass
[21:26:03] <SnoopJ> rendar, if this makes that much of a difference, maybe you just want to write it in Cython.
[21:26:19] <rendar> SnoopJ: yep, that would be a good idea
[21:26:25] <SnoopJ> (or your preferred way of making an extension)
[21:26:41] *** Quits: Ad1Tech (~Ad1Tech@h104101.man.tk-internet.pl) (Quit: Leaving)
[21:26:43] <rendar> dale: why in your first version you got that much slowness?
[21:26:56] <dale> rendar: SnoopJ was right, I left the pattern compilation in the loop.
[21:26:59] <rendar> dale: oh you didn't compile the regex, right
[21:27:08] <SnoopJ> Yea, compilation is a cost you eat up-front.
[21:27:10] <dale> IIRC the pattern gets compiled after a few uses but you still eat that cost up front.
[21:27:16] <SnoopJ> It's cached after the very first use
[21:27:19] <graingert> AhmedAmerican: send a PR to fix it?
[21:27:24] <rendar> yeah
[21:27:26] <graingert> Instead of patching it
[21:27:28] *** Quits: junktext (~junktext@77.247.181.217) (Ping timeout: 272 seconds)
[21:28:57] <Payam> graingert hi. Got time to help me out with the pytest thing?
[21:29:09] <epistax> So to overcome a change in cdll between Python 3.7.x and 3.9.x, I'm basically just doing: for path in os.get_exec_path(): os.add_dll_directory(path). This is the answer to my question about an hour ago.
[21:29:29] <graingert> Payam: What's happening so far?
[21:30:02] <graingert> epistax: sounds like the thing they fixed in the very latest 3.9
[21:30:40] <epistax> Oh you mean Python 3.10?
[21:30:45] <epistax> oh wait duh
[21:30:48] <dale> afidegnum: Is that just g.Node(tag="div", text="", **{your dict here})?
[21:30:48] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[21:30:48] <epistax> I have 3.9.6
[21:31:29] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:32:16] <graingert> epistax: This thing? https://bugs.python.org/issue44070
[21:32:52] <graingert> epistax: Ah no then not that
[21:32:59] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[21:33:06] <graingert> epistax: what happens in 3.10?
[21:33:13] <InPhase> rendar: That original benchmark included both compilation AND the import.  When you precompile the regex with re.compile, like should be done when performance matters in a loop, the regex is only about 25% slower.
[21:33:17] <epistax> graingert: nothing. I was asking about 3.10
[21:33:44] <rendar> ok
[21:34:01] <InPhase> rendar: The regex approach scales better with complexity though, such as if there are data imperfections that arise, or slightly more complex inputs.
[21:34:15] <epistax> The issue was that as a security measure, the cdll load library no longer looks at the local directory of the system PATH to determine dll locations. It looks nowhere but absolute paths. But they added a function in 3.8, os.add_dll_directory that allows you to put the functionality back
[21:34:36] <Payam> graingert the coverage does its job even on packages.
[21:34:37] <epistax> or* the system path
[21:35:09] <rendar> InPhase: that's true
[21:35:14] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[21:36:44] <SnoopJ> the "did you time it?" question extends to the larger program this code lives inside of, incidentally.
[21:37:39] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:38:25] <InPhase> rendar: Perhaps this is cleaner for you.  It's basically the same time as the split:  haystack[haystack.find('[')+1:haystack.find(']')]
[21:38:39] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:e809:16a6:2cf5:a7a7)
[21:39:00] <rendar> oh right, yeah that's a good way too, string slicing
[21:39:38] *** Joins: Auron (Auron956@user/auron)
[21:40:06] *** Joins: emika7 (~emika@212.102.45.58)
[21:40:19] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:40:42] *** Quits: emika (~emika@83.136.182.197) (Ping timeout: 240 seconds)
[21:40:42] *** emika7 is now known as emika
[21:40:51] <graingert> Payam: show your .coveragerc ?
[21:41:10] <graingert> And your gitlab-ci.yml
[21:41:47] <Payam> graingert https://bpa.st/PRMA  btw I realized that I don't have a __init__ in unittest directory
[21:42:10] <InPhase> rendar: Note that the regex is cleaner and simpler for reporting a failed match.
[21:42:21] <rendar> yeah i agree on that
[21:42:33] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 276 seconds)
[21:42:39] <Payam> graingert https://bpa.st/P2EQ
[21:42:47] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:42:50] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 256 seconds)
[21:42:56] *** Joins: mattil (~mattilinn@62-113-176-119.bb.dnainternet.fi)
[21:43:16] <graingert> Payam: Yeah __init__.py is usually a good idea to get tests.unittests on the sys.path
[21:43:27] <graingert> https://www.python.org/downloads/release/python-3100rc1/ it's out?
[21:43:29] <SnoopJ> I wonder how parsimonious would perform on that, too.
[21:43:41] <graingert> Payam: and what seems to be the problem?
[21:43:46] <SnoopJ> graingert, woohoo 🎉
[21:44:04] *** Quits: p-i- (~Ohmu@2001:44c8:4609:a6a1:d511:3e84:a1d:196f) (Remote host closed the connection)
[21:44:15] <Payam> all the tests fail. and the coverage run even on packages in my /usr/share/... python files.
[21:45:46] *** Joins: Crassus (~Crassus@user/crassus)
[21:45:50] <Payam> and it runs even tests that are in an other directory. e.g integration tests. I only want to run the unit tests
[21:46:42] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[21:48:14] <afidegnum> dale: let me try that
[21:53:38] <dale> InPhase: I did my benchmark with the import outside of the loop, at least give me that much. :)
[21:53:41] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[21:54:48] <dale> SnoopJ: Ha, I would not have thought about busting out a parser generator just to parse that.  If it's actually faster that would surprise me.
[21:55:03] <Payam> graingert any idea?
[21:56:02] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[21:56:56] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:58:32] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[21:59:43] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[22:00:20] <SnoopJ> dale, it's an even bigger bazooka than regex, heh. I'd be surprised too, more code and all that.
[22:00:56] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:00:58] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[22:01:59] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:02:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:03:35] *** Joins: mike18 (~geri@217-149-163-174.nat.highway.telekom.at)
[22:03:41] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (Quit: Cya)
[22:03:47] <mike18> hi - how to improve this code? https://ideone.com/Xyj661
[22:04:24] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[22:04:57] <jabberwock> How would I install a pip package that I built on another host? I've compiled gattlib on a raspi4 and want to install the binaries on a raspi zero w
[22:05:28] <bancroft> jabberwock: can you push the code to pypi?
[22:05:40] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[22:05:41] <bancroft> s/code/package
[22:05:52] <jabberwock> I don't know how to get credentials to upload it
[22:06:07] <jabberwock> First time for me :)
[22:06:12] <Wooble> jabberwock: you should be able to copy over a wheel you build and pip install from it.
[22:06:17] <SnoopJ> jabberwock, I think you want `pip wheel` to make a wheel to copy over. But also check if what you want is on piwheels.org first.
[22:06:26] <jabberwock> oh, ty all
[22:06:42] *** Quits: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de) (Quit: Leaving.)
[22:06:43] <jabberwock> the pi zero just can't seem to build it. the pi 4 builds it in seconds
[22:06:44] <SnoopJ> looks like it is, but the build is failing: https://www.piwheels.org/project/gattlib/
[22:06:57] <SnoopJ> yea, the zero is not a great machine for compilation heh
[22:07:29] <SnoopJ> note: piwheels tells you to `sudo pip` but it's terrible advice, don't do that
[22:07:41] <jabberwock> SnoopJ: Is there a simple way for me to get permission to upload this arm,python3.7 version?
[22:07:54] <waveform> jabberwock, we're happy to do manual imports for packages on piwheels if you want to "donate" your build, but it would have to be built against the system libraries for (presumably) raspbian bullseye
[22:08:21] <jabberwock> cat /etc/issue shows "Raspbian GNU/Linux 10"
[22:08:47] <SnoopJ> that's buster. piwheels builds for current release ± 1 I think
[22:08:48] <jabberwock> and yes I'd like to donate. It would help the folks at SwitchBot too
[22:09:01] <jabberwock> kk, I'll look into upgrading. I don't mind this box being wiped
[22:09:07] <waveform> that should be fine -- feel free to use the links at the bottom of the page to open an issue in the piwheels/packages repo and we can look at importing it
[22:09:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:09:18] <jabberwock> thanks waveform!
[22:09:27] <BytesAndCoffee> i have 2 values, x and y. i have a dict of tuples for all 1-square moves (up, right-up, right, right down, down, etc as (0, -1), (1, -1), (1, 0), (0, 1), etc), whats the best way to apply those tuples to x and y?
[22:09:34] *** Joins: shailangsa (~shailangs@host86-185-98-7.range86-185.btcentralplus.com)
[22:09:43] <BytesAndCoffee> x and y are instance properties
[22:10:47] <waveform> SnoopJ, we do have a FAQ on using sudo, and whilst I would generally agree using sudo is bonkers, given piwheels particular purpose (building wheels against the system libraries), and the limited nature of many SD cards on a Pi (i.e. single use systems) it's not *entirely* insane here :)
[22:10:59] <ammar2> BytesAndCoffee: position.x += transform[0]; position.y += transform[1]?
[22:10:59] <SnoopJ> not insane, no
[22:11:04] <mike18> hi - how to improve this code? https://ideone.com/Xyj661
[22:11:05] <mike18> ?
[22:11:07] <BytesAndCoffee> ah
[22:11:30] <InPhase> dale: Oh, yes, I guess you did with that subtle quote split there.
[22:11:47] <InPhase> dale: You receive one additional point.  ;)
[22:11:50] <ammar2> BytesAndCoffee: or if the x and y are in a namedtuple you can do position = position + transform
[22:12:02] <Wooble> mike18: that's pretty vague; what makes you think it needs improvement?
[22:12:34] <mike18> is there another way to get exception to string with line of error?
[22:12:43] <mike18> in one line without and \n
[22:12:53] <BytesAndCoffee> ammar2: ooh i like that
[22:13:46] *** Quits: lambda (~weechat@cyka.blyat.vodka) (Quit: WeeChat 3.2)
[22:13:46] <SnoopJ> waveform, since you're here, question for you: is using 3.9 always going to give you a bullseye package? I found a pygame incompatibility the other day that was coming from a user running 3.9 against buster, didn't seem like there was any piwheels workaround other than --no-binary.
[22:13:50] *** Joins: cul8r (~cul8r@198.133.178.20)
[22:13:55] <jabberwock> waveform: I'm a little confused. Am I just filing a ticket for the errors that occur when I `pip3 install gattlib` ? Is this related at all to me supplying binaries for this?
[22:14:06] <jabberwock> I can do all of that. Just wondering the best way to get this onto the pi zero w
[22:14:24] <SnoopJ> jabberwock, the package looks like it's been broken as long as the reported history. If nothing else, that's worth a ticket imo.
[22:14:31] <jabberwock> ack
[22:14:50] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[22:14:59] *** Joins: djapo (~archangel@user/djapo)
[22:15:31] *** Joins: saschi (~saschi@user/saschi)
[22:16:00] <waveform> jabberwock, open a ticket letting us know you've got a build of gattlib and Ben or I will be happy to import it manually. You could also open a ticket that it's not building successfully and we can look into the build logs to see what's causing it to fail -- if it's a simple library dependency that's required and it's a reasonably "popular" package (for arbitrary values of "popular" :) we can look at installing that dependency by default on the
[22:16:00] <waveform> builders. But to SnoopJ's question (which is related)...
[22:16:12] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[22:17:31] *** Joins: node1 (~node1@user/node1)
[22:17:49] <mike18> whats wrong here in the code? https://ideone.com/Xyj661
[22:17:54] <mike18> cnat see the error...
[22:18:00] <waveform> SnoopJ, the wheels we build on piwheels are specifically built against the *system* python for a given raspbian release. In other words, we provide no support at all for people running custom-built python interpreters, or wanting to build against C-libraries that aren't in the apt repo for the given release
[22:18:42] <cul8r> mike18 TabError: inconsistent use of tabs and spaces in indentation
[22:18:43] <graingert> Payam: it looks like it's not picking up your . coveragerc
[22:18:43] <waveform> SnoopJ, this is partly so we can provide (semi :) accurate dependency info. For example on the numpy page (https://www.piwheels.org/project/numpy/) we provide the apt instructions necessary to install the libs required for the wheel that's built
[22:18:50] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7) (Quit: Leaving)
[22:19:05] <mike18> cul8r: oh - is there another online tool i can check that?
[22:19:32] <SnoopJ> waveform, understood, I figured this was the case. As it turns out, the user's problem would have been resolved getting SDL from the future release as well. Was just wondering if users were weakly 'locked in' to the release's version or if there were some safety rails that made it more explicit.
[22:19:42] <cul8r> mike18 you can just retype the line with whatever you used above (tabs or spaces)
[22:19:47] *** Quits: epistax (~epistax@64.222.98.26) (Quit: Client closed)
[22:19:50] <SnoopJ> And it is apparently also a reporting bug in pygame itself, so piwheels isn't really implicated at all, just curious :)
[22:20:00] <cul8r> its just that you use one above and the other on line 39
[22:20:35] <waveform> SnoopJ, I'm afraid it's all quite "release specific". However, we have just finished the 3.9 builds for bullseye (this weekend!) so things should be ready "out of the box" when that gets released
[22:21:21] *** Quits: audiocat (~audio@2603-8081-1800-00ad-63c9-045d-dd73-f4c7.res6.spectrum.com) (Ping timeout: 252 seconds)
[22:21:37] *** Joins: josh_h (sid301834@id-301834.brockwell.irccloud.com)
[22:22:16] <SnoopJ> makes sense enough, especially given the nature of the platform as you say
[22:22:29] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:22:31] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[22:23:06] <waveform> SnoopJ, eventually the plan is to "educate" piwheels about arm64 and then (hopefully) I can put together a version for ubuntu on the pi but that's a ways off yet
[22:23:11] <mike18> cul8r: fixed it - what is still missing? https://ideone.com/JxJbJS
[22:23:27] *** Quits: pneff (~pneff@2a02:168:fedc:0:f190:a21a:e79e:83da) (Ping timeout: 245 seconds)
[22:23:44] *** Joins: audiocat (~audio@2603-8081-1800-00ad-45bc-ff66-5742-0276.res6.spectrum.com)
[22:24:24] <cul8r> mike18 inspect isnt defined, you have to import it
[22:24:59] <mike18> cul8r: cool - now it runs - but no output? https://ideone.com/JxJbJS
[22:25:02] *** Joins: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455)
[22:25:06] *** Quits: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455) (Remote host closed the connection)
[22:25:41] <SnoopJ> waveform, ubuntu is part of what made me wonder, I think, since it's a lot easier to end up with multiple installed versions for it
[22:25:51] *** Joins: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455)
[22:27:33] *** Joins: magla (~gelignite@55d4b7f5.access.ecotel.net)
[22:27:56] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:27:58] <SnoopJ> i.e. focal has python3.8 and python3.9 and will presumably grow a python3.10, or maybe that goes into focal-updates. Either way, sounds like a lot more headache 😬
[22:28:12] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[22:28:30] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:32:21] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 250 seconds)
[22:32:45] <waveform> SnoopJ, yes -- it also means teaching piwheels that a release can have multiple CPython ABIs, although that's actually less complex than dealing with the archs question (which affects the build-queue logic, which is ... non-trivial!). Another minor annoyance is how horrifically lazy I was in determining ABI sort order within that logic and the fact that cp310 sorts before cp39 :)
[22:33:02] *** Quits: dreamer (~dreamer@user/dreamer) (Remote host closed the connection)
[22:33:51] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[22:34:29] <cul8r> mike18 printing stack on line 21, its populated. on line 22 its empty. ind is not incrementing, so your loop on line 9 is probably looping over a single element.
[22:34:49] <SnoopJ> hmm, maybe the classifier system could be used (abused?) to track release compat metadata
[22:34:55] *** Quits: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455) (Remote host closed the connection)
[22:35:08] <SnoopJ> I don't envy you the task to be sure 😅
[22:35:19] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[22:35:40] *** Joins: Akuli (~Akuli@87-94-109-26.bb.dnainternet.fi)
[22:36:19] <mike18> cul8r: whats in line 21?
[22:36:32] <mike18> print(stack) give me an error
[22:37:07] <cul8r> mike18 it shows a list of frame summary files for me
[22:37:15] <mike18> ok i see now
[22:38:45] *** Joins: sartan (~sartan@user/sartan)
[22:41:22] *** Joins: p-i- (~Ohmu@2001:44c8:4609:a6a1:9894:e658:fa3d:7b5a)
[22:42:31] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[22:43:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[22:43:37] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[22:44:44] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[22:45:07] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[22:47:11] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a7a6:e11d:a1c8:db28:4a76)
[22:48:00] *** Quits: p-i- (~Ohmu@2001:44c8:4609:a6a1:9894:e658:fa3d:7b5a) (Ping timeout: 256 seconds)
[22:50:23] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Ping timeout: 252 seconds)
[22:50:39] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[22:51:16] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:51:28] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-697d-76f9-c1bf-e9e5.res6.spectrum.com)
[22:51:45] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:52:17] <BytesAndCoffee> can you type hint in a lambda?
[22:53:07] *** Joins: marduk0 (~marduk@172.58.187.220)
[22:53:15] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[22:54:59] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:55:12] *** Joins: marduk3 (~marduk@172.58.187.144)
[22:56:49] *** Quits: marduk (~marduk@172.58.190.149) (Ping timeout: 258 seconds)
[22:56:50] *** marduk3 is now known as marduk
[22:57:01] <sartan> IMO if you're using a lambda and find you need type hinting perhaps it should just be a function in the first place
[22:57:31] <BytesAndCoffee> ah
[22:57:33] <sartan> https://mail.python.org/pipermail/python-3000/2006-May/001613.html Guido's response here, BytesAndCoffee
[22:57:41] <SnoopJ> BytesAndCoffee, no
[22:58:06] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:58:27] *** Quits: marduk0 (~marduk@172.58.187.220) (Ping timeout: 245 seconds)
[22:58:57] <jinsun> BytesAndCoffee: https://www.python.org/dev/peps/pep-3107/#lambda
[22:59:30] <Samian> jinsun  your nick looks familiar. Ever been on efnet?
[23:00:17] <jinsun> Samian: nope, I use this only here (and earlier on freenode)
[23:01:54] *** Joins: rememberYou (~someone@user/rememberyou)
[23:03:13] *** Joins: p-i- (~Ohmu@2403:6200:8870:a7a6:e8c3:dbcc:7fa6:8242)
[23:03:30] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 240 seconds)
[23:03:58] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[23:04:04] *** Joins: rany_ (~rany@user/rany)
[23:04:32] *** Quits: rany (~rany@user/rany) (Killed (zinc.libera.chat (Nickname regained by services)))
[23:04:32] *** rany_ is now known as rany
[23:05:34] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a7a6:e11d:a1c8:db28:4a76) (Ping timeout: 256 seconds)
[23:07:17] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:07:56] *** Quits: marduk (~marduk@172.58.187.144) (Ping timeout: 258 seconds)
[23:08:17] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com)
[23:09:13] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[23:09:52] *** Joins: Pickchea (~private@user/pickchea)
[23:10:38] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:ce3:eccc:9d90:1542) (Read error: Connection reset by peer)
[23:17:01] *** Joins: Roey (~Roey@user/Roey)
[23:19:41] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:21:28] *** Quits: adamts (~Adam@user/mysteryblokhed) (Quit: That's all Folks!)
[23:24:24] <twomoon> samian what's on efnet?
[23:24:40] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:26:49] *** Joins: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455)
[23:27:03] *** Joins: junktext (~junktext@77.247.181.218)
[23:29:24] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (WeeChat 3.1)
[23:32:03] <gordonjcp> twomoon: a wretched hive of scum and villainy
[23:32:16] <gordonjcp> twomoon: it's pretty good if you like that sort of thing
[23:32:22] <twomoon> is it a good tech chat?
[23:32:23] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[23:32:43] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:32:54] <gordonjcp> twomoon: last time I was there it was mostly drunk american children calling everyone a gay commie
[23:33:02] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:33:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[23:33:18] <gordonjcp> it may have improved since
[23:33:37] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[23:33:39] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:35:01] *** Joins: marduk (~marduk@172.58.187.238)
[23:35:11] <twomoon> hehe ok
[23:35:17] *** Quits: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455) (Remote host closed the connection)
[23:36:01] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:4352:aacd:a15a:e476)
[23:36:03] *** Joins: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455)
[23:36:05] *** Joins: marduk7 (~marduk@172.58.190.143)
[23:37:27] *** mh3f_ is now known as mh3f
[23:38:35] *** Joins: waynew (~wayne@user/waynew)
[23:39:30] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:39:50] *** Quits: marduk (~marduk@172.58.187.238) (Ping timeout: 272 seconds)
[23:39:50] *** marduk7 is now known as marduk
[23:39:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:42:00] *** Quits: guntbert (~yesitsme@user/guntbert) (Ping timeout: 265 seconds)
[23:42:07] <WhyNotHugo> How can I programatically detect if a project uses poetry, pipenv, flint, or none of those?
[23:42:30] <waynew> a better question is why would you want to?
[23:43:14] <WhyNotHugo> I want a wrapper for mypy, that detects what the current project uses, and run `poetry run mypy` (in ase it's poetry).
[23:43:20] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[23:43:38] <WhyNotHugo> *in case
[23:44:09] <ChrisWarrick> WhyNotHugo: do you expect to run projects using many different build systems?
[23:44:14] <WhyNotHugo> My intent is to use this via my IDE (which currently just calls `mypy`, so I have to remember to activate the virtualenv _before_ starting it.
[23:44:40] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[23:44:43] <WhyNotHugo> ChrisWarrick: I currently deal with poetry and pipenv, but would also like to deal with projects that just use plain workon/mkvirtualenv as a fallback.
[23:45:14] <waynew> ah, so you want a plugin for your IDE to detect the project settings to know how to run mypy?
[23:45:24] *** Joins: Payam (~Payam@138.106.57.131)
[23:45:36] <WhyNotHugo> waynew: Yes, that's essentially it. mypy is an example, other tools would follow.
[23:45:37] <raek> WhyNotHugo: the pyproject.toml file specifies which underlying buildsystem is used
[23:45:44] <waynew> (in theory, that could be setting in your IDE, but that's one to create)
[23:46:17] <WhyNotHugo> waynew: Setting in the IDE? What do you mean?
[23:46:22] <raek> but that's for building distribution packages. I don't know how running tools fit into this.
[23:46:55] <Payam> Hi guys, so I try to package a python project to a .deb file. I use asyncio. In the setup.py I specify that python_requires >=3.7.5 but when I package it and run the command I get an error saying that asyncio does have 'run' https://bpa.st/NPWA
[23:47:47] <WhyNotHugo> raek: That might be a good starting point. It's safe to assume that if a project uses, eg, poetry, then its poetry environment will have the dependencies for mypy to do its job.
[23:48:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[23:49:20] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[23:49:56] <WhyNotHugo> What would the recommended tooling / library to read data from pyproject? I'm sure parsing the toml and extracting the data has already been done.
[23:51:52] *** Quits: Imbapokah (~pavel@88.201.129.183) (Ping timeout: 272 seconds)
[23:54:01] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[23:54:11] <jinsun> Payam: you could `print(sys.version)` in your code to see what version of python is actually running
[23:54:13] <SnoopJ> WhyNotHugo, `tomli` is good for reading TOML (and regularly updated), there's also `toml`
[23:54:58] *** Joins: RBEL (~jigubigul@2001:1c06:19c3:7000:a178:1258:3480:b7c7)
[23:55:00] <WhyNotHugo> There's nothing like setuptools().parse_pyproject()["buildsystem"] ?
[23:55:11] *** Joins: r3m (~launch@user/r3m)
[23:55:25] <WhyNotHugo> I'd just hate to write the whole thing and then realise the code is already in my system somewhere XD
[23:56:59] <SnoopJ> WhyNotHugo, here's a very relevant read, but the short answer is "not really" https://discuss.python.org/t/adopting-recommending-a-toml-parser/4068
[23:57:26] *** Joins: lmmx (~louis@host-2-99-2-156.as13285.net)
[23:57:58] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:58:43] <lmmx> Hi all, I've got a streaming HTTP request as an `io.BytesIO` buffered I/O stream, and I'd like to view it in another object (as a 'window' onto the stream)
[23:58:52] <WhyNotHugo> Yeah, that pretty much says it all.
[23:59:46] <lmmx> can anyone point me to what exactly it is I want to do that? I'm thinking it's `BytesIO.getbuffer` which gives the memory, but not sure how to use it to get bytes, and not read the entire stream (which for a streaming request will pull down the rest of the file)
