[00:00:38] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:04:23] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.4)
[00:05:07] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[00:05:36] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:05:48] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[00:07:17] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 256 seconds)
[00:09:26] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:10:46] *** Joins: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:10:52] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:15:03] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[00:15:33] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:17:23] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:21:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:23:13] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[00:25:26] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:26:22] *** Quits: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:26:27] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:27:22] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:27:49] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:29:45] *** Joins: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de)
[00:31:43] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[00:32:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[00:32:35] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:33:02] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:33:51] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:36:11] *** Macbethwin is now known as Chargen
[00:39:04] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 246 seconds)
[00:39:07] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[00:41:03] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:41:16] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[00:42:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:26] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:43:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:43:48] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[00:44:22] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 260 seconds)
[00:44:54] *** Joins: bliminse (~bliminse@host86-185-253-73.range86-185.btcentralplus.com)
[00:45:26] *** Lord_of_Life_ is now known as Lord_of_Life
[00:46:30] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[00:48:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:49:59] *** Joins: cheater (~Username@user/cheater)
[00:50:19] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[00:51:36] *** Joins: pavonia (~user@user/siracusa)
[00:52:27] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:54:49] *** Quits: jonathanx (~jonathan@c-5eea3313-74736162.cust.telenor.se) (Ping timeout: 246 seconds)
[00:57:18] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Remote host closed the connection)
[00:57:35] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[00:59:49] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Quit: WeeChat 3.3)
[01:00:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[01:00:51] *** Parts: riddler2d (~riddler2d@94.250.72.176) ()
[01:02:01] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:02:03] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[01:04:22] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[01:04:31] *** Joins: asocialblade (~qsl@user/asocialblade)
[01:06:33] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[01:11:39] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:13:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:14:27] *** Joins: Emil3566 (~Emil3566@host-45-159-164-7.netcity.pl)
[01:14:35] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 260 seconds)
[01:15:21] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:23b1:9164:bf8a:2d11) (Quit: WeeChat 2.8)
[01:19:21] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:20:32] *** Parts: Emil3566 (~Emil3566@host-45-159-164-7.netcity.pl) (Leaving...)
[01:20:53] *** Quits: asocialblade (~qsl@user/asocialblade) ()
[01:28:09] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:28:10] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:28:37] *** Joins: Guest19 (~Guest19@ip-86-49-182-248.zrnko.net)
[01:28:37] *** Quits: nattiestnate (~nate@202.138.250.9) (Quit: WeeChat 3.5)
[01:28:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:29:13] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:31:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[01:31:39] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[01:33:00] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[01:35:18] *** Joins: kaph (~kaph@net-31-156-214-2.cust.vodafonedsl.it)
[01:35:34] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[01:35:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[01:36:53] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:37:28] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[01:39:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:40:47] <sshine> xcmw, interesting blogpost!
[01:40:59] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 250 seconds)
[01:41:41] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[01:42:35] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 260 seconds)
[01:43:34] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:44:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:46:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:47:14] *** Quits: Guest19 (~Guest19@ip-86-49-182-248.zrnko.net) (Quit: Client closed)
[01:51:08] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[01:51:24] <kuribas> not sure what that's supposed solve, is it compile times?
[01:54:10] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[01:57:23] *** Quits: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net) (Quit: Leaving)
[01:59:48] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 272 seconds)
[02:02:23] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:02:42] *** Quits: michalz (~michalz@185.246.204.97) (Remote host closed the connection)
[02:07:45] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 256 seconds)
[02:08:13] *** Joins: nattiestnate (~nate@202.138.250.11)
[02:10:29] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:11:16] <koz> I have a FilePath that looks like "/foo/bar/baz/../quux". Is there some function somewhere I can call which would turn it into "/foo/bar/quux"?
[02:11:32] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 252 seconds)
[02:12:19] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:55] *** Quits: nattiestnate (~nate@202.138.250.11) (Quit: WeeChat 3.5)
[02:14:21] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:14:26] <geekosaur> https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/directory-1.3.6.0/System-Directory.html#v:canonicalizePath ?
[02:14:39] <koz> That looks perfect, thank you, you cute dino!
[02:14:45] <geekosaur> also beware that that will do the wrong thing if baz is a symlink
[02:15:04] <geekosaur> (canonicalizePath may deal with this for you, hopefully)
[02:15:20] <koz> I don't _think_ this is the situation in my case. Worth a try at least.
[02:15:26] *** Joins: dolio (~dolio@130.44.130.54)
[02:15:33] <Franciman> i don't know if i said it
[02:15:38] <Franciman> but haskell's runtime is RAD
[02:15:40] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[02:15:49] <koz> Franciman: Yeah, it does some quite miraculous things.
[02:15:50] <geekosaur> I should say what you requested would do the wrong thing
[02:16:11] <koz> I think Gabriella Gonzales even mentioned that we don't even have to care if IO is async or not, even for FFI.
[02:16:19] <koz> Which is actually miraculous.
[02:17:08] <maerwald> geekosaur: what do you mean?
[02:17:55] <geekosaur> /foo/bar/baz/../quux to /foo/bar/qux is wrong if baz is a symlink
[02:17:56] *** Quits: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:17:59] <maerwald> `..` is a file, not some special path component
[02:18:00] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:18:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:18:10] <geekosaur> yes, but it will point somewhere else
[02:18:17] *** Joins: k8yun_ (~k8yun@user/k8yun)
[02:18:23] <maerwald> yes and that's the only possible semantics
[02:18:32] <abastro[m]> `..` is a file?
[02:18:33] <geekosaur> precisely because it is an actual directopry entry
[02:18:37] <maerwald> yes
[02:18:44] <koz> abastro[m]: Yes.
[02:18:47] <abastro[m]> Oh hmm
[02:18:47] <geekosaur> \but it will be an entry in the symlinbked-todirectory and will point to its actual parent
[02:18:49] <koz> So is '.' for that matter.
[02:18:51] *** Joins: alp (~alp@user/alp)
[02:18:53] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[02:18:57] <abastro[m]> So that is how unix is implemented
[02:19:10] <monochrom> "is" and "file" are very broad in the context of unix.
[02:19:13] <geekosaur> this is the weak spot in symlinks
[02:19:17] <maerwald> monochrom: lol
[02:19:23] <monochrom> Well, "is" is very broad universally.
[02:19:39] *** Joins: asocialblade (~qsl@user/asocialblade)
[02:19:49] <maerwald> geekosaur: yeah... mountpoints are cleaner xD
[02:19:58] <abastro[m]> In my OS class IIRC I hardcoded those entries
[02:20:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:20:17] <maerwald> with mountpoints it gets extra tricky to figure out if your recursive file operation may terminate
[02:20:21] <maerwald> although it's possible
[02:20:27] <abastro[m]> So that was the wrong way :<
[02:20:58] <geekosaur> .recursivefindtrap :)
[02:21:18] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:21:32] <sm> Franciman: what do you like about it ?
[02:21:47] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 260 seconds)
[02:22:07] <Franciman> sm: i was doing some tests on my 70lines lambda calculus implementation
[02:22:30] <maerwald> here's why unix is hard: https://github.com/valvesoftware/steam-for-linux/issues/3671
[02:22:36] <maerwald> classic
[02:22:40] <Franciman> and while laziness is a big problem. Once you get rid of lazy data, haskell's runtime is way more efficient than MLton sml runtime
[02:22:43] <Franciman> by a lot
[02:22:50] <Franciman> i think it may be laziness!
[02:22:52] <Franciman> but who knows
[02:22:55] <Franciman> btw great job
[02:23:14] <sm> great job everyone
[02:25:01] <sm> also, great job on http://play-haskell.tomsmeding.com:8123/play, maerwald & tomsmeding
[02:25:17] <maerwald> we're still looking for someone with CSS skillz
[02:25:30] <sm> any particular CSS problem causing trouble ?
[02:25:37] <maerwald> it looks so 80s
[02:25:52] <maerwald> dialing in with my 56k modem
[02:26:06] <tomsmeding> sm: my friend @lieuwex helped me fix the most egregious one, the output making the page overflow
[02:26:12] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[02:26:55] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[02:27:04] <maerwald> tomsmeding: sorting the list [1..100000] already times out xD
[02:27:11] <maerwald> kinda funny
[02:27:17] <tomsmeding> wa-
[02:27:22] <boxscape_> hmm is it intentional that the default program, the quicksort, removes duplicates?
[02:27:26] <sm> I kind of like the UI of https://hackmd.io/t_T9l454R5aRWwNsFT0SaA?both. Ctrl-Alt-e/v/b shows edit/view/both. Strong light/dark split to show which is which
[02:27:43] *** Quits: fendor (~fendor@178.165.199.73.wireless.dyn.drei.com) (Remote host closed the connection)
[02:27:45] <tomsmeding> boxscape_: you found a bug in maerwald's code
[02:27:49] <boxscape_> (by having filter (>) and filter (<) rather than one of them being e.g. filter (<=))
[02:28:06] <monochrom> I like 80s.
[02:28:19] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[02:28:41] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:28:53] <maerwald> tomsmeding: it's a test
[02:28:58] <tomsmeding> lol
[02:29:13] <monochrom> In fact as a matter of principle I also dislike total strangers using CSS to condescend on me what are "good" background colours and foreground colours.
[02:29:22] <sm> how hard would it be to embed the haskell code in the url ?
[02:29:41] <maerwald> url's have a length limit
[02:29:57] <maerwald> the idea is to integrate it with the pastebin
[02:30:01] <tomsmeding> yeah
[02:30:18] <sm> 👍️
[02:30:26] <tomsmeding> as you can see on http://play-haskell.tomsmeding.com:8123/LwAM5UU5 I got half-way with one direction of that :p
[02:31:43] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[02:32:21] <abastro[m]> <maerwald> "here's why unix is hard: https:/..." <- Interesting that hasufell, ghcup dev, was actively involved in the issue discussion
[02:32:47] <tomsmeding> abastro[m]: maerwald = hasufell
[02:33:02] <abastro[m]> Oh?!?!?
[02:33:15] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:26] <maerwald> I was just trying to get hired as a bash developer xD
[02:33:32] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 252 seconds)
[02:33:38] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:33:41] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3)
[02:33:50] <Franciman> maerwald: are you saying that it's easier to live as a bash dev than fixing laziness bugs?
[02:34:05] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 250 seconds)
[02:34:23] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[02:34:27] <maerwald> bash is like coding C... one line per day is exhausting and then you think about it over the weekend and find bugs during your sleep
[02:34:39] *** Joins: Pickchea (~private@user/pickchea)
[02:34:51] <abastro[m]> XD
[02:35:01] <abastro[m]> At least you do not need to type much
[02:35:02] <sm> not any more! Fire up fly-check & ShellCheck !
[02:35:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 246 seconds)
[02:35:41] <abastro[m]> ShellCheck noticed my `dev/null | ..` and removed it. 
[02:35:55] <maerwald> hehe, ShellCheck is good. But there are some corner cases where it may introduce a bug if you rely on quirks, especially with quoting
[02:36:03] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:37:00] <abastro[m]> Relying on quoting quirks?
[02:37:23] <maerwald> tomsmeding: I'm thinking the playground should randomize the starting code
[02:37:56] <tomsmeding> give a different bug to each visitor?
[02:37:57] <maerwald> maybe from the pastes... can we keep a list of runnable playground pastes?
[02:38:05] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[02:38:19] <maerwald> those that compiled
[02:38:23] <boxscape_> is that a typescript autocompletion when trying to write an import statement?
[02:38:35] *** Quits: kaph (~kaph@net-31-156-214-2.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:38:35] <maerwald> some internal table with maybe 100 results
[02:38:40] <maerwald> boxscape_: yeah
[02:38:42] <tomsmeding> I think we cannot just present people's pastes like that, have to curate a selection
[02:38:47] <boxscape_> I see
[02:39:22] <maerwald> they have a rust parser https://github.com/codemirror/codemirror.next/tree/5377e5104d3424734b5fa0f5f2d66a5a7ea916f4/lang-rust
[02:39:24] <maerwald> but not haskell
[02:39:26] <maerwald> darn
[02:40:59] <maerwald> the parser is lazy or so... so even if you have 100million lines and you scroll down, it won't crash your page
[02:41:08] <sm> idea to get more styling help: include a link to the source repo, and one specifically to the css file asking for help
[02:41:13] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[02:42:05] <tomsmeding> ok maybe the play thing should truncate output if it's too long
[02:42:30] <tomsmeding> my firefox had some issue rendering [1..1000000]
[02:42:51] <maerwald> doesn't seem too hard though: https://github.com/lezer-parser/rust/blob/main/src/rust.grammar
[02:42:58] <maerwald> who knows haskell grammar well? :p
[02:42:59] <tomsmeding> but yeah so mergesort doesn't time out where quicksort does :)
[02:43:02] <tomsmeding> mergesort > quicksort in haskell
[02:43:22] <tomsmeding> "lezer" -- that sounds like dutch
[02:43:23] <maerwald> the best mergesort is bottom-up
[02:43:34] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:43:35] <maerwald> I think it's also partly in-place
[02:44:11] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[02:44:50] <maerwald> we can also do the quicksort in-place
[02:45:06] *** Quits: kuribas (~user@ptr-25vy0i96ymkampl0mim.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[02:45:14] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:45:18] <boxscape_> Might it be possible to use the GHC API for parsing?
[02:45:25] <tomsmeding> boxscape_: in JS?
[02:45:33] <boxscape_> ah, hm, I didn't think of that
[02:45:42] <maerwald> ghcjs? :D
[02:45:47] <tomsmeding> plz no
[02:45:50] <maerwald> haha
[02:46:06] <tomsmeding> I've said this before, ghcjs is an amazing technical feat, but...
[02:47:33] <boxscape_> asterius? I suppose it's probably difficult to get that to compile the ghc library
[02:47:41] <boxscape_> (mainly because it's not listed as supported)
[02:48:37] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 240 seconds)
[02:48:50] <maerwald> maybe the new HF ED can do it
[02:48:58] <maerwald> as a community test
[02:49:00] <maerwald> :D
[02:49:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[02:49:38] <boxscape_> to make it clear to him what he signed up for eh
[02:49:55] <abastro[m]> In the github thread I saw hasufell fighting (someone who likely doesn't know what they are talking about). Interesting..
[02:50:31] <maerwald> impossible
[02:51:27] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[02:52:29] <janus> abastro[m]: https://hasufell.github.io/pages/Contact.html
[02:52:40] <abastro[m]> * hasufell fighting against (someone who
[02:52:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:53:08] <abastro[m]> Oh
[02:53:27] <abastro[m]> It is also powered by hakyll, hmm seems like many ppl are using it
[02:53:43] <abastro[m]> Does it mean I can use it as well right
[02:54:19] <sm> nope, it has reached the cutoff, sorry, no more hakyll sites allowed
[02:56:11] <abastro[m]> Oh noooo
[02:57:51] <hpc> a few rails slots just opened up, hurry before you're forced to use wordpress :D
[03:00:08] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:00:24] *** Joins: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu)
[03:00:43] <abastro[m]> Btw, how feasible is it to use purescript on hakyll
[03:01:06] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:01:20] <xcmw> kuribas: It is supposed to solve the problem of reusing what can be reused and only computing what is needed for LSP
[03:01:21] <abastro[m]> It seems that purescript does botb html generation and redirecting part, so it makes me a bit confused.
[03:02:15] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[03:02:28] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[03:02:34] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[03:02:41] <seydar> is Network.Simple.TCP actually meant to be used? its version is 0.4.5, so I'm worried that I'm going down the wrong path by learning it
[03:03:07] <seydar> it's just... listening on a port via Network.Simple is kinda (please don't hurt me) burdensome
[03:04:24] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 272 seconds)
[03:04:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:05:08] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:05:32] <davean> The standard package is https://hackage.haskell.org/package/network
[03:05:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[03:06:21] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[03:07:40] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:07:46] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:10:47] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[03:11:33] <geekosaur> I think it's a low level interface, roughly the same thing you'd do in C to listen on an arbitrary port. Normally you'd use a higher levelpackage for whatever it is you're trying to do
[03:12:27] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:14:02] <seydar> geekosaur: is there a preferred higher-level package for network ops? or is it, like davean said, just Network?
[03:14:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[03:14:28] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 246 seconds)
[03:14:29] <seydar> I'm struggling to figure out how to get `getAddrInfo` to take a port number (1024) instead of a port hint ("http")
[03:15:41] <sm>  abastro hakyll just makes websites, so why couldn't you publish some purescript on those too
[03:16:09] <dons> morning all.
[03:16:16] <abastro[m]> Oh, makes sense! Thank you
[03:16:20] <sm> morning dons o/
[03:16:22] <abastro[m]> Perhaps then I'd learn purescript
[03:16:45] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[03:17:02] <davean> seydar: if you have the port number and such, you wouldn't use getAddrInfo?
[03:17:10] <sm> (but of course it'll be confusing, they're each confusing on their own so you'll have double the fun)
[03:17:11] <davean> seydar: the only thing getAddrInfo does is resolve that
[03:17:18] <seydar> davean: I'm having trouble understanding the API — what should i be using instead?
[03:17:37] <davean> seydar: if you ahve the numeric versions you just construct the AddrInfo you want
[03:17:39] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:17:41] <davean> because you *already have it*
[03:18:46] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Quit: alx741)
[03:19:31] <monochrom> I suppose getAddrInfo also does hostname lookup, not just "http"->80.
[03:19:50] <davean> hence "versions"
[03:19:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:20:45] <monochrom> But ironically the doc has "let hints = defaultHints { addrFlags = [AI_NUMERICHOST], addrSocketType = Stream }" which is relevant for supplying "80" as the string, if you poke around the names mentioned.
[03:21:14] <monochrom> Ugh damn English. s/relevant for/relevant to/ .
[03:21:17] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:21:20] <monochrom> Prepositions die die die.
[03:21:37] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[03:22:06] <monochrom> Err nevermind NUMERICHOST is not about service/port, sorry!
[03:22:11] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 250 seconds)
[03:22:30] <monochrom> But there is AI_NUMERICSERV
[03:22:53] *** Quits: Topsi (~Tobias@dyndsl-095-033-095-210.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[03:23:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[03:23:44] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:24:09] <monochrom> OTOH to a large extent you can supply a junk (but working) service name, get your SockAddr, then override its port part to your liking. That is, if you use getAddrInfo at all, which is not compulsory.
[03:24:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:24:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:25:51] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 250 seconds)
[03:26:38] <monochrom> Because for DNS lookup you can use network-bsd instead.
[03:26:57] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[03:27:14] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 260 seconds)
[03:28:06] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:29:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:30:00] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[03:30:18] <koz> Is there a way to programmatically dump the contents of PATH?
[03:31:07] <monochrom> System.Environment has some kind of getEnv.
[03:31:39] <geekosaur> https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/filepath-1.4.2.1/System-FilePath-Posix.html#g:2 ?
[03:31:44] <monochrom> lookupEnv is probably nicer to work with.
[03:31:54] <geekosaur> (well, yiou';d use System.FilePath for portability)
[03:32:00] <monochrom> Oh, that's even nicer.
[03:32:05] <koz> Nice!
[03:32:20] <seydar> monochrom: what's my alternative to getAddrInfo?
[03:32:34] <seydar> I'm struggling to just create a SockAddrInet
[03:33:03] <monochrom> I need to use that in my https://github.com/treblacy/ep haha, as opposed to rolling my own splitter.
[03:35:23] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 250 seconds)
[03:36:00] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:37:00] <seydar> davean: since I don't need to use getAddrInfo, what is the alternative? It feels like `SockAddrInet 1024 (word32 conversion of a string)` is the wrong answer
[03:38:36] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:39:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[03:41:11] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 245 seconds)
[03:44:03] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:44:46] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[03:45:43] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[03:47:02] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:47:25] <janus> seydar: did you see https://hackage.haskell.org/package/network-3.1.2.7/docs/Network-Socket.html#v:tupleToHostAddress
[03:48:09] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:48:16] <seydar> janus: i did, but how do i get to the tuple to begin with?
[03:49:07] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 246 seconds)
[03:49:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:49:42] <janus> seydar: oh, you're not starting with an IP address?
[03:49:52] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[03:50:13] <seydar> janus: I have "0.0.0.0" and 1024, and I'm trying to create an address from that
[03:50:35] <janus> right, then you can just put 0 in each of those tuple entries using tupleToHostAddress
[03:50:36] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[03:50:40] <seydar> i can combine them and do SockAddrUnix "0.0.0.0:1024", but I'm trying to create an addr with separate parts, akin to SockAddrInet 1024 "0.0.0.0"
[03:50:54] <janus> % :m +Network.Socket
[03:50:55] <yahb> janus: ; <no location info>: error:; Could not find module `Network.Socket'; It is not a module in the current program, or in any known package.
[03:51:00] <janus> i think you can do
[03:51:10] <janus> > tupleToHostAddress 1024 (0,0,0,0)
[03:51:11] <lambdabot>  error:
[03:51:11] <lambdabot>      Variable not in scope:
[03:51:11] <lambdabot>        tupleToHostAddress :: t0 -> (a0, b0, c0, d0) -> t
[03:51:12] *** Joins: hololeap (~hololeap@user/hololeap)
[03:51:38] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:51:56] <seydar> > tupleToHostAddress (127, 0, 0, 1)
[03:51:58] <lambdabot>  error:
[03:51:58] <lambdabot>      Variable not in scope: tupleToHostAddress :: (a0, b0, c0, d0) -> t
[03:52:11] <seydar> janus: but you're correct, that works in ghci for me
[03:52:13] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Client Quit)
[03:52:33] <janus> yeah, each dot separated number is a word8 in haskell
[03:52:45] <seydar> ah interesting
[03:52:51] <janus> a Word8 is a byte, and an IPv4 address is 4 bytes
[03:54:02] <seydar> i hate that i now have to split my hostname
[03:54:14] <seydar> is this how everyone else is doing network ops, or am i doing something crazy?
[03:54:46] <janus> i think you are correct in that there is no platform-independent way to represent an IP address with its port
[03:55:02] <janus> consider that IPv6 also uses colons inside of it...
[03:55:07] *** Joins: deadmarshal_ (~deadmarsh@95.38.118.21)
[03:55:23] <janus> so i think it is simplest to just store the port separately of the address
[03:55:40] <seydar> i now understand the impetus behind haskell: we should all be pure and disabuse ourselves of IO
[03:56:12] <janus> many command line tools take the port number completely separately. somehow concatenating the address and the port is something you should only really need for URL's. but you're not dealing with URL's
[03:56:34] <janus> better not invent yet another encoding scheme that will break whenever you choose to add IPv6 support...
[03:56:38] <seydar> i'm storing the port separately, but now I have to write a splitter to split the hostname up on dots to turn it into a Word32
[03:56:43] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[03:58:13] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:58:20] <janus> you don't need to make a Word32 if you're using the function we talked about...
[03:58:41] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[03:59:31] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:59:38] *** Quits: deadmarshal_ (~deadmarsh@95.38.118.21) (Ping timeout: 260 seconds)
[03:59:38] <seydar> janus: my hostname comes in as a string
[04:00:22] <seydar> so i need to turn it into an IPv4 quadruple
[04:00:43] *** Quits: acidjnk (~acidjnk@p200300d0c7049f4214af152190df7355.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:01:33] <Axman6> (,,,) <$> word8 <* char '.' <*> word8 <* char '.' <*> word8 <* char '.' <*> word8
[04:02:52] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[04:04:17] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Ping timeout: 260 seconds)
[04:04:41] <janus> you can also do it without attoparsec: do { [a,b,c,d] <- pure $ splitOn "." "127.0.0.1"; (,,,) <$> readMaybe a <*> readMaybe b <*> readMaybe c <*> readMaybe d } :: Maybe (Word8,Word8,Word8,Word8)
[04:05:16] <janus> @package split
[04:05:16] <lambdabot> https://hackage.haskell.org/package/split
[04:06:39] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[04:07:42] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Client Quit)
[04:07:53] <janus> seydar: btw when you say 'hostname' that makes it sound like you're using dns (to me at least). but it seems like you're not
[04:07:55] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[04:10:29] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:12:32] <janus> seydar: btw SockAddrUnix needs to be used with a path to a unix socket which exists on your filesystem. you can't just plug an IP address in there
[04:13:45] <janus> ok, i am not 100% sure it needs to exist since there may also be a way to create unix sockets with this type. but IP address is wrong for sure
[04:14:09] <geekosaur> it should *not* exist, if you're intending to listen on it
[04:14:57] <janus> all right, makes sense
[04:15:33] <geekosaur> but yes, SockAddrUnix is an AF_UNIX socket represented by an object of filetype 's' in the filesystem, not an IP address. you want SockAddrInet
[04:15:58] <janus> does windows have Unix sockets? 
[04:17:04] <hpc> no
[04:17:12] <janus> oh seems like it does https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/
[04:17:27] <hpc> wuh?
[04:17:35] <janus> even using winsock, it says
[04:17:45] <monochrom> Still, the haskell library package may not know about it.
[04:19:33] <geekosaur> haskell tries to supportolder versions of windows as well, so probably it doesn't
[04:22:11] <seydar> janus: damn, now i need to install Data.List.Split in order to use splitOn
[04:22:17] <seydar> this is too much for one day, i'll try again tomorrow
[04:22:25] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Quit: leaving)
[04:22:53] <janus> seydar: it's very useful to know how to install libraries though. but see you tomorrow, good night
[04:24:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:32:29] *** Joins: alp (~alp@user/alp)
[04:39:24] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[04:49:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:50:17] *** Joins: xkuru (~xkuru@user/xkuru)
[04:50:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[04:54:34] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 246 seconds)
[04:55:19] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:56:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:59:19] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:03:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[05:04:36] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:04:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:09:09] *** Joins: zebrag (~chris@user/zebrag)
[05:10:47] *** Quits: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:14:43] *** Joins: k8yun (~k8yun@user/k8yun)
[05:16:47] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[05:17:24] <zebrag> "The pioneer string-processing language SNOBOL (1962)" (https://en.wikipedia.org/wiki/Backtracking)
[05:17:48] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Ping timeout: 240 seconds)
[05:18:19] *** Joins: obfusk (~quassel@77-172-60-123.fixed.kpn.net)
[05:19:26] <zebrag> Do you know why "continuation" would be used for backtracking? I mean "continuation" is often used in relation with backtracking sort of parsers.
[05:22:27] <zebrag> With monadic parsers, one of the important point is that list-monad can be used for backtracking. But I've never found why "continuation" is used in relation with parsers.
[05:22:56] <abastro[m]> Becuz monad is continuation with effects
[05:23:01] <abastro[m]> Or wait, what was the term
[05:23:24] <zebrag> I wait
[05:24:12] <abastro[m]> A monad is just submonad of continuation
[05:25:13] <abastro[m]> That is, if you have continuations and state, you can simulate any functional monad.
[05:25:45] <c_wraith> zebrag: continuations in parsers are mostly used for efficiency
[05:26:06] <zebrag> there is that too
[05:26:12] <abastro[m]> If you think about `a -> m b`, it is sort of continuation after `a`
[05:26:38] <abastro[m]> But yea continuation is efficient in that application too
[05:30:48] <c_wraith> like, you can find a non-continuation encoding of what most parser monads are doing, I'm sure. But they'll end up doing a lot more pattern matching on ADTs, which is a lot slower of an operation than just passing around extra parameters which function as continuations for the exceptional cases
[05:33:06] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:33:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:33:25] <zebrag> yes, looking into that
[05:33:35] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[05:33:36] *** Joins: mud (~mud@user/kadoban)
[05:36:20] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[05:37:37] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[05:37:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:40:29] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:46:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:46:36] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:50:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:50:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:50:48] *** Joins: wroathe (~wroathe@user/wroathe)
[05:51:08] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:20] *** Joins: neurocyte86 (~neurocyte@IP-094046070123.dynamic.medianet-world.de)
[05:51:20] *** Quits: neurocyte86 (~neurocyte@IP-094046070123.dynamic.medianet-world.de) (Changing host)
[05:51:20] *** Joins: neurocyte86 (~neurocyte@user/neurocyte)
[05:53:31] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:53:31] *** neurocyte86 is now known as neurocyte8
[05:58:37] *** Quits: Chargen (~chargen@8.21.8.253) (Quit: Leaving)
[06:00:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:04:55] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[06:05:07] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[06:07:16] *** Joins: Mxfromagna (~Mxfromagn@mob-5-90-109-174.net.vodafone.it)
[06:07:22] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[06:09:09] *** Quits: Mxfromagna (~Mxfromagn@mob-5-90-109-174.net.vodafone.it) (Client Quit)
[06:09:25] <Axman6> Is it fair to say that, at least in GHC, continuation passing basically lets you pass in a target for a goto? It's literally just a jump in the compiled code right?
[06:11:25] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:12:37] <abastro[m]> I wonder if it works that way in GHC's STG
[06:13:39] <Axman6> I believe it does, a function call is just a jump to that function
[06:16:20] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:32:48] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-64-179.hive.is) (Quit: ZNC 1.8.2 - https://znc.in)
[06:33:37] *** Joins: _xor (~xor@74.215.232.169)
[06:36:10] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-ab92-d9c1-c016-553e.res6.spectrum.com) (Remote host closed the connection)
[06:36:49] *** Joins: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu)
[06:40:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:40:56] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:41:40] *** Quits: zyklotomic (~ethan@res380d-128-61-83-149.res.gatech.edu) (Ping timeout: 246 seconds)
[06:41:52] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:42:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:42:25] *** Quits: _xor (~xor@74.215.232.169) (Quit: WeeChat 3.4.1)
[06:42:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:42:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:42:47] *** Joins: wroathe (~wroathe@user/wroathe)
[06:43:40] *** Joins: zyklotomic (~ethan@r4-128-61-93-8.res.gatech.edu)
[06:44:10] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:44:15] *** alMalsamo is now known as lumberjack123
[06:49:55] *** Joins: Guest|18 (~Guest|18@116.21.1.31)
[06:53:13] <Guest|18> :)
[06:53:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[06:54:15] <Axman6> We currently don't have any way to define types which contain an unpacked array of a known size do we? I'd love to be able to do data Tree n k v = Empty | Leaf k v | Node {-#UNPACK#-} (Vec n (Tree n k v))
[06:55:15] *** Joins: AlexNoo_ (~AlexNoo@178.34.151.158)
[06:57:24] *** Quits: AlexZenon (~alzenon@94.233.240.35) (Ping timeout: 240 seconds)
[06:57:24] *** Quits: Alex_test (~al_test@94.233.240.35) (Ping timeout: 240 seconds)
[06:58:06] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[06:58:37] *** Quits: AlexNoo (~AlexNoo@94.233.240.35) (Ping timeout: 240 seconds)
[06:58:52] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:03:13] <abastro[m]> Unpacked array? What is that?
[07:03:17] <abastro[m]> Oh
[07:03:29] <abastro[m]> Like Vector.Unboxed but dependently sized?
[07:03:38] *** Joins: Alex_test (~al_test@178.34.151.158)
[07:04:13] *** Joins: AlexZenon (~alzenon@178.34.151.158)
[07:07:23] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[07:08:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:08:53] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:08:53] *** finn_elija is now known as FinnElija
[07:15:19] *** Quits: Typedfern (~Typedfern@220.red-83-56-165.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[07:19:16] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[07:19:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[07:20:52] *** Joins: raym (~raym@user/raym)
[07:24:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:29:04] *** Joins: slim (uid300876@id-300876.lymington.irccloud.com)
[07:29:44] *** Joins: cdman (~dcm@27.2.218.248)
[07:29:44] *** Quits: cdman (~dcm@27.2.218.248) (Changing host)
[07:29:44] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[07:29:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:29:59] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:31:58] *** Joins: Typedfern (~Typedfern@73.red-83-57-140.dynamicip.rima-tde.net)
[07:35:16] *** Joins: slim_ (uid300876@id-300876.lymington.irccloud.com)
[07:37:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[07:37:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:37:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:37:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:43:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:47:43] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:47:55] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:51:43] *** Joins: mbuf (~Shakthi@136.185.73.48)
[07:55:57] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[07:57:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:58:33] *** Joins: aeka (~aeka@user/hiruji)
[08:04:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:28:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:29:57] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:30:23] *** Joins: nate1 (~nate@98.45.167.61)
[08:30:24] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:30:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:32:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:32:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:33:10] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[08:34:28] *** Joins: notzmv (~zmv@user/notzmv)
[08:34:43] *** Quits: nate1 (~nate@98.45.167.61) (Ping timeout: 246 seconds)
[08:36:40] *** Joins: deadmarshal_ (~deadmarsh@95.38.118.21)
[08:38:10] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:39:11] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:39:41] *** Joins: hgolden (~hgolden2@cpe-172-251-233-141.socal.res.rr.com)
[08:43:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:44:18] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:55:18] *** Joins: vicfred (~vicfred@user/vicfred)
[09:00:25] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[09:04:03] *** Joins: ystael (~ystael@user/ystael)
[09:07:04] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[09:07:39] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[09:09:53] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:18:08] *** Quits: xcmw (~textual@dyn-72-33-2-250.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:21:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Quit: The Lounge - https://thelounge.chat)
[09:21:38] *** Joins: benin (~benin@183.82.24.110)
[09:22:41] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:43:56] <Axman6> abastro[m]: not quite, more that the array itself would be unpackable into the structure, Tree 8 k v would have nodes that are smaller than Tree 16 k v because the array is like having another 8/16 fields in the constructor
[09:44:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:48:22] <abastro[m]> So basically vector without indirection?
[09:48:40] <abastro[m]> I thought unpacked data fields are for that
[09:48:49] <Axman6> yeah - whether the values inside are boxed or not is another consideration
[09:49:20] *** Joins: danso (~danso@danso.ca)
[09:49:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:50:30] <abastro[m]> I guess encoding of the Vector library might be important then
[09:50:43] <Axman6> ideally you could have an unboxed array of unboxed values - similar to C's struct foo { size_t len; uint8_t vec[];} which allows the vec to hang off the end of the struct
[09:50:48] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[09:50:50] <abastro[m]> I think I am heard of unboxed vector
[09:50:55] <abastro[m]> I mean
[09:51:01] <abastro[m]> Unpacked vector.
[09:52:46] *** Quits: deadmarshal_ (~deadmarsh@95.38.118.21) (Ping timeout: 246 seconds)
[09:52:51] <danso> main = putStrLn "hello world" >> threadDelay 5000000
[09:53:06] <danso> this trivial program outputs "hello world" then waits 5 seconds before exiting
[09:53:21] <danso> unless i redirect stdout from the shell.
[09:53:22] <Axman6> normal Vector is like struct vec {size_t len; object *[] vals;} (array of pointers to some object) with unboxed being like struct vec {size_t len; uint64_t[] vals;}, an array of values directly in the array
[09:53:45] <danso> if i run ./helloworld > output.txt, nothing is written to output.txt until the program terminates
[09:53:59] <danso> sorry if this is not exactly a haskell question, but i don't even know where to begin looking
[09:54:29] <Axman6> yeah that's a buffering question
[09:55:00] <danso> i haven't found any other language implementations that have this behaviour; only GHC
[09:55:04] <Axman6> you can change the BufferingMode on the stdout handle to something like line buffered (I can't remember what the other choices are)
[09:55:16] <Axman6> @hoogle BufferingMode
[09:55:16] <lambdabot> No results found
[09:55:17] <monochrom> Ugh, this happens in C too.
[09:55:21] <Axman6> @hoogle BufferMode
[09:55:21] <lambdabot> System.IO data BufferMode
[09:55:21] <lambdabot> GHC.IO.Handle data BufferMode
[09:55:21] <lambdabot> GHC.IO.Handle.Types data BufferMode
[09:56:21] <monochrom> In fact I have great fun teasing^W teaching my student if in C you have printf("hello") then fork, why you will eventually see "hello" twice. :)
[09:56:47] <monochrom> Pretty sure all languages do this.
[09:56:49] <abastro[m]> Oh, the point about size having to be known is prob problematic
[09:56:50] <Axman6> damn handles
[09:57:22] <monochrom> Either that or someone would have complained "such low I/O performance, please reinstate block buffering"
[09:57:33] <danso> interesting monochrom, i just tested and you are correct
[09:57:52] <danso> i only tested shell (dash) and python, both of which behaved the way i expected
[09:58:09] <Axman6> changing the buffering mode for handles used for logging is something you pretty commonly want
[09:58:38] <monochrom> The shell command "foo > file" contains a close(stdout).
[09:59:02] <monochrom> Especially when foo is an executable.
[10:00:30] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:02:32] <danso> thanks both, `hSetHandle stdout LineBuffering` was the fix i needed
[10:02:47] <danso> i'm going to have to dig deeper another time to learn more tho :^) 
[10:02:58] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:03:13] *** Joins: michalz (~michalz@185.246.204.107)
[10:03:27] <abastro[m]> I hate how my reply is somehow out of place because matrix bridge
[10:03:55] <monochrom> Come join the dark side ^W^W IRC >:)
[10:04:21] <monochrom> https://xkcd.com/1782/
[10:04:27] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:04:36] <Axman6> There are only two chat protocols, IRC and whatever the falvour of the week is
[10:05:32] <Axman6> particularly when we have such a nice Haskell IRC client in glirc, there's no excuse (thanks glguy! <3)
[10:05:56] <abastro[m]> Haha
[10:06:15] <abastro[m]> nice haskell irc client?
[10:06:20] <abastro[m]> Which one?
[10:06:34] <Axman6> glirc
[10:06:49] <Axman6> @hackage glirc
[10:06:50] <lambdabot> https://hackage.haskell.org/package/glirc
[10:07:29] <abastro[m]> > Greater Long Island Running Group
[10:07:31] <lambdabot>  error:
[10:07:31] <lambdabot>      • Data constructor not in scope:
[10:07:31] <lambdabot>          Greater :: t0 -> t1 -> t2 -> t3 -> t
[10:07:38] <abastro[m]> https://www.glirc.org/
[10:07:44] <abastro[m]> Hmm
[10:10:12] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[10:11:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:15:20] *** Joins: Graham31415 (~Graham@user/Graham31415)
[10:18:01] <abastro[m]> Oh, so there was a package named `glirc`
[10:34:32] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[10:36:02] <abastro[m]> How do I automatically generate config file for glirc?
[10:38:07] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[10:38:13] *** Joins: deadmarshal_ (~deadmarsh@95.38.118.21)
[10:38:20] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:38:23] <Axman6> I think I just copied one from the wiki on github - that's where all the docs are
[10:40:18] <abastro[m]> Personally I wish it were easier to use
[10:44:10] <Graham31415> operator associativity seems to always be explained by placing parentheses around an expression, as in (a+b)+c. I feel this is incomplete though. How should one interpret two operators of equal precendence, say opL with left associativity and opR with right associativity, in: a `opR` b `opL` c?
[10:44:36] <Axman6> as a parser error
[10:44:42] *** Joins: ss- (~ss-@187.83.249.216.dyn.smithville.net)
[10:44:44] <Graham31415> So what is the non-parentheses explanation for operator associativity?
[10:45:43] <jackdk> % f <&> g >>> h
[10:45:43] <yahb> jackdk: ; <interactive>:14:1: error: Precedence parsing error cannot mix `<&>' [infixl 1] and `>>>' [infixr 1] in the same infix expression
[10:46:00] <Axman6> I feel like you've run into exactly the problem that definind precedence and associativity was built to solve, it's ambiguous, so what should the compiler do?
[10:46:39] <Axman6> it has to (consistently!) pick weither (a `opR` b) `opL c OR a `opR` (b `opL` c)
[10:46:43] <Graham31415> Thank you! Strangely, when operator associativity is explained this is never mentioned!
[10:46:44] <Axman6> either
[10:47:24] <abastro[m]> Due to the ambiguity of this situation, there is a school of thought that precedence is not ideal
[10:47:39] <Axman6> yeah I feel a lot of how this is taught is from the perspective of someone who's actually run into this problem before. If you haven't it's not obvious why you'd care
[10:47:57] <Axman6> need moar lisp or RPN
[10:47:59] <abastro[m]> Wait, I don't mean what I said
[10:48:01] <ss-> i'm trying to get profiling to work on a stack project I have, but I keep running into "Perhaps you haven't installed the profiling libraries for package `base-4.15.1.0`?". running stack build --profile with lts-19.1 after stack clean, stack clean --full, stack purge and nothing makes a difference. isn't stack supposed to know to reinstall
[10:48:01] <ss-> profiling versions or am I missing something here? do i have to delete the global ~/.stack to reset it?
[10:48:37] <Graham31415> I see that the common Haskell operators of a given precedence generally associate in the same direction, which makes much more sense now.
[10:48:49] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[10:50:05] <Axman6> yeah
[10:50:06] <ephemient> https://www.haskell.org/onlinereport/exps.html "Consecutive unparenthesized operators with the same precedence must both be either left or right associative to avoid a syntax error."
[10:51:27] * Graham31415 adds the haskell report to his reading list
[10:52:41] <abastro[m]> I meant that ppl propose operators of same precedence to never mix together
[10:52:55] <abastro[m]> Like, not permitting `a + b + c`, instead always do `(a + b) + c`
[10:54:42] <Axman6> (+ a b c)
[10:54:53] <abastro[m]> a `opR` b `opL` c would also be similarly disallowed
[10:55:52] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:55:57] <ephemient> even if they're at different precedence levels?
[10:56:49] *** Joins: califax (~califax@user/califx)
[10:57:22] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[10:57:43] *** Joins: mncheck (~mncheck@193.224.205.254)
[10:57:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:58:23] *** Joins: neurocyte86 (~neurocyte@IP-094046070123.dynamic.medianet-world.de)
[10:58:24] *** Quits: neurocyte86 (~neurocyte@IP-094046070123.dynamic.medianet-world.de) (Changing host)
[10:58:24] *** Joins: neurocyte86 (~neurocyte@user/neurocyte)
[10:58:30] <abastro[m]> Oh, allowed if different precedence levels
[10:58:49] <abastro[m]> They'd like it only disallowed when same precedence levels, even for the same operator
[10:58:50] <ephemient> that's already how it works in Haskell then
[10:58:59] <abastro[m]> So no need to left/right specify?
[10:59:07] <ephemient> I mean no mixing left and right
[10:59:28] <Axman6> % :info (<$>)
[10:59:28] <yahb> Axman6: (<$>) :: Functor f => (a -> b) -> f a -> f b -- Defined in `Data.Functor'; infixl 4 <$>
[10:59:32] <Axman6> % :info (<*>)
[10:59:32] <yahb> Axman6: type Applicative :: (* -> *) -> Constraint; class Functor f => Applicative f where; ...; (<*>) :: f (a -> b) -> f a -> f b; ...; -- Defined in `GHC.Base'; infixl 4 <*>
[10:59:40] <Axman6> % :info (<&>)
[10:59:40] <yahb> Axman6: (<&>) :: Functor f => f a -> (a -> b) -> f b -- Defined in `Data.Functor'; infixl 1 <&>
[10:59:43] <Axman6> % :info (>>>)
[10:59:43] <yahb> Axman6: (>>>) :: forall {k} (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c -- Defined in `Control.Category'; infixr 1 >>>
[11:00:19] <ephemient> arithmetic is one thing, but having to parenthesize `a : b : c : _` would be pretty painful (fixity rules apply to pattern matching too)
[11:00:25] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 256 seconds)
[11:00:48] *** Joins: ystael (~ystael@user/ystael)
[11:02:53] <abastro[m]> I mean, yea they do propose `a : (b : (c : _))` being easier to understand
[11:04:25] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:05:24] *** Joins: califax (~califax@user/califx)
[11:05:51] <ephemient> I suppose that is a consistent opinion at least...
[11:06:07] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:06:11] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:07:05] *** Joins: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net)
[11:07:06] *** Joins: califax (~califax@user/califx)
[11:08:39] *** Quits: ss- (~ss-@187.83.249.216.dyn.smithville.net) (Quit: Client closed)
[11:08:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dda:4bff:cdb5:90b8) (Ping timeout: 260 seconds)
[11:08:53] *** Quits: deadmarshal_ (~deadmarsh@95.38.118.21) (Ping timeout: 252 seconds)
[11:09:09] <abastro[m]> Yep
[11:09:35] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:10:56] <abastro[m]> Let me clarify after 10 minutes
[11:17:05] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:18:06] *** Joins: califax (~califax@user/califx)
[11:20:39] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:20:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:22:15] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[11:22:25] <abastro[m]> Well those ppl usually do not think much about patterns
[11:22:45] <abastro[m]> However, I think they would be okay with `a : (b : (c : _))`
[11:22:48] <abastro[m]> In the end, wouldn
[11:23:09] <abastro[m]> Wouldn't it as readable as lisp anyway?
[11:23:14] <abastro[m]> (If you get used to it)
[11:24:47] *** Joins: fendor (~fendor@178.165.199.73.wireless.dyn.drei.com)
[11:26:03] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:26:14] *** Joins: acidjnk (~acidjnk@p200300d0c7049f58501b6673664ff2c4.dip0.t-ipconnect.de)
[11:29:41] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:35:52] *** Joins: vysn (~vysn@user/vysn)
[11:36:30] *** Joins: euandreh (~euandreh@191.181.59.160)
[11:44:59] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[11:45:26] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[11:46:40] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:46:46] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[11:51:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[11:53:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:55:50] *** Joins: abastro (~abab9579@143.248.229.191)
[11:59:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:01:03] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[12:02:06] *** Quits: rembo10 (~rembo10@main.remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[12:03:00] *** Joins: rembo10 (~rembo10@main.remulis.com)
[12:03:30] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:03:36] <abastro> splits libera:#haskell libera:#haskell-offtopic
[12:03:39] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:d8aa:2d89:2452:a45)
[12:03:40] <abastro> Oh sorry
[12:03:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[12:04:04] <Inst> yo
[12:04:18] <Inst> can CPS be used to make it so that a function takes one argument by default, but CPS allows it to take multiple functions?
[12:04:29] <Inst> as an example case, i have a library that hooks me into tinyfiledialogs
[12:04:37] <Inst> the problem is that invoking its functions are a pain
[12:05:07] <abastro> Guess that should depend on what you mean by "making functions take one argument"
[12:05:22] <Inst> well, all haskell functions only take one argument
[12:05:38] <Inst> but the idea is that, say, i have filepathfinder *
[12:06:08] <Inst> CPS would have it be defaultpath (filepathfinder *) **
[12:06:32] <Inst> filepathfinder by default opens up a window, but the CPS version would allow me to pass an additional argument to filepathfinder
[12:06:52] <Inst> and the expression returned is a filepath
[12:06:58] <abastro> Hm, can you say the type of `filepathfinder`
[12:07:21] *** Joins: lortabac (~lortabac@88.125.6.227)
[12:07:29] <abastro> Is it a library function?
[12:07:38] <Inst> IO FilePath
[12:07:50] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:07:52] <Inst> where FilePath = Text
[12:08:10] <abastro> `filepathfinder :: IO FilePath`?
[12:08:39] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:10:25] <Inst> yeah
[12:10:29] <abastro> Simply that just takes no parameter though
[12:10:41] <abastro> In fact, such `filepathfinder` is not even a function
[12:10:42] <Inst> i guess, but defaultpath (filepathfinder) *
[12:10:47] <Inst> IO action
[12:11:05] <Inst> filepathFinder is a wrapper around a function that takes 4 arguments
[12:11:07] <abastro> All you can do with the action is just running it.
[12:11:29] <abastro> Eh, what do you now mean by "wrapper around a function taking 4 arguments"
[12:11:38] <abastro> Oh wait, is this about a FFI binding?
[12:11:41] <Inst> it invokes the function, but with arguments
[12:11:42] <Inst> yeah
[12:11:46] <Inst> as ""
[12:11:48] <abastro> So that the library does not expose enough arguments?
[12:11:56] <Inst> the library exposes tons of arguments
[12:12:15] <abastro> Uhm, I mean the haskell side of the library
[12:12:18] <Inst> i just want to be able to run filepathfinder by default, with the default arguments being "" :: Text
[12:12:32] <Inst> openFileDialog "" "" "" ""
[12:12:41] <abastro> Oh, now I see
[12:12:44] <Inst> filepathFinder = openFileDialog "" "" "" ""
[12:12:52] <abastro> So you want to call e.g. `openFileDialong "" "" "" ""`
[12:13:06] <abastro> but that's, you know, not easy to use - that is what you mean?
[12:13:12] <Inst> I want to see if I can set it up so a syntax of startingPath filepathFinder equals openFileDialog with the startingPath field filled out
[12:13:34] <abastro> In my case, I just write function for that
[12:13:35] <Inst> openFileDialog is in the lib, which has FFI built for it
[12:13:54] <abastro> Like, filepathfinder foo = openFileDialog "bar" "baz" foo "meh"
[12:13:57] <Inst> startingPath openFileDialog * is ergonomic enough
[12:14:28] <abastro> Then, use your `filepathfinder` afterwards
[12:14:33] <Inst> hmmm
[12:14:53] <Inst> trying to figure out how to get openFileDialog to work without any arguments, as well as with some arguments imposed on it by a larger function
[12:14:56] <Inst> it's not that hard, tbh
[12:15:04] <Inst> use pattern matching to check cases
[12:15:06] <Inst> but it's rather ugly
[12:16:39] <abastro> Wait, pattern matching? How does pattern matching work here?
[12:18:27] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:58] <abastro> Also, I wonder how much familiar you are with haskell
[12:19:31] <Inst> why?
[12:19:45] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 256 seconds)
[12:20:29] <abastro> I mean, are you fairly familiar with haskell, or are you an intermediate haskeller?
[12:20:56] <Inst> beginner / intermediate
[12:21:02] <abastro> Because it is a bit hard to understand what you want
[12:21:07] <abastro> Ah, so you are intermediate
[12:21:11] <[exa]> Inst: if I get it right, you're trying to have the filepathFinder work with varying number of arguments?
[12:21:14] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:21:15] <Inst> yeah
[12:21:44] <Inst> with the structure being used to have the function be fed as an argument to another function in order to have multiple arguments
[12:21:49] <Inst> by itself it has no arguments
[12:21:49] *** Joins: cfricke (~cfricke@user/cfricke)
[12:21:55] <abastro> Oh. Perhaps I am just not good at reading
[12:22:39] <abastro> So, you mean you want to make it work for both `filepathfinder "foo"` and `filepathfinder "foo" "bar"`?
[12:22:54] <[exa]> Inst: yes that can be done except patternmatching alone is not sufficient (parameter count for patternmatching is completely static, no matter what you match)
[12:23:16] <[exa]> Inst: it can be done with a simple typeclass though that allows the typesystem to decide how many parameters the filepathfinder actually takes
[12:23:35] <Inst> i think it can be done via pattern matching
[12:23:54] <Inst> let shell1function = actualfunction "" "" "" ""
[12:23:58] <abastro> Well, pattern matching only works with specified types
[12:24:37] <Inst> then argumentfeeder arg, if it meets shell function, turns it into actualfunction "" arg "" ""
[12:24:40] <abastro> So you cannot have both `fn "foo" "bar"` and `fn "foo"` working with pattern matching.
[12:24:51] <[exa]> Inst: you can't patternmatch different counts of arguments (first the types won't match, and it's also forbidden explicitly for some reasonable reason)
[12:24:54] <abastro> Oh wait
[12:25:17] <abastro> Hm yea, that would not work without typeclass
[12:25:18] <[exa]> Inst: have a look at `printf` package where they do basically the same :]
[12:25:35] <abastro> Though there is another way to simulate these kinds of parameters
[12:26:17] <abastro> Like `someFunction def { foo = "foo", bar = "bar" }`
[12:26:33] <Inst> i could always dummy it out, like, force the function to include _ in the calling
[12:26:52] <[exa]> Inst: the other way is to have a monoid for argument types, like optparse-applicative does
[12:26:55] <abastro> And you define `def` like `def = FooRecord { foo = "", bar = "", baz = "", baq = "" }`
[12:27:07] *** Quits: benin (~benin@183.82.24.110) (Ping timeout: 246 seconds)
[12:27:11] <[exa]> I'd say optparse is in fact very nice
[12:27:13] <abastro> Monoid also works well with arguments
[12:27:57] *** Quits: slim_ (uid300876@id-300876.lymington.irccloud.com) ()
[12:29:27] <[exa]> Inst: is there any "semantics" for the arguments/argument in your var-arg function?
[12:33:24] <Andrew> Anyone has a beginner-friendly guide for doing socket programming?
[12:33:33] <Andrew> Especially TCP
[12:33:52] <[exa]> Andrew: 1] brace for impact
[12:34:04] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[12:34:11] <abastro> wh
[12:34:26] <Andrew> Well, I certainlly do have the flight data recorder
[12:35:00] <Inst> [exa] sort of
[12:35:03] <Inst> i'll have to look it up
[12:35:46] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[12:36:09] *** Joins: Hemmo (Hemmo@eduroam-252-47.uta.fi)
[12:36:24] <Andrew> https://hackage.haskell.org/package/network-3.1.1.1/docs/Network-Socket.html, interesting
[12:36:38] <[exa]> Andrew: anyway I wanted to say that either it's super simple (you use haskell to abstract yourself from all the blocking&polling and use the TCP socket literally as a file handle or stdin/stdout), OR pretty complicated (you write the polling yourself and explode from the amount of possibilities the stuff can go wrong)
[12:37:15] <Andrew> Got it
[12:37:17] <abastro> Btw what is the role of optparse? I thought it was for parsing command arguments
[12:37:27] <abastro> Apparently it isn't, I guess
[12:38:38] <[exa]> the first approach is recommended; the only extra thing you need to know is that the TCP sockets have addresses instead of filenames (you can get them from hostnames using `getAddrInfo`), and you open the communication channels using `socket->bind->listen->accept` on the server side and `socket->connect` on the client side
[12:38:49] *** Joins: alp (~alp@user/alp)
[12:40:06] <Andrew> [exa]: Thanks
[12:40:31] <Andrew> One of the other issues quite specific to me is that before, I've only looked at the mathematical and CS side of Haskell, I haven't looked at the practical side
[12:40:47] <Andrew> So what's happening here is I don't know how to debug issues with things like "I can't find this library"
[12:41:11] <[exa]> Andrew: btw it's pretty easy with haskell to make a tiny terminal server that people can connect to using telnet, for example this is a "painting server" I gave to students last time https://github.com/exaexa/hs21/blob/master/u3/paintserver.hs (they had to write the client for homework)
[12:41:42] <abastro> "Can't find library"? e.g. when setting up through cabal?
[12:41:47] <[exa]> Andrew: with simple technical questions usually just posting/pastebinning the error here (depending on length) will get you a quick solution :D
[12:41:52] <Andrew> https://hackage.haskell.org/package/network-3.1.1.1/docs/Network-Socket.html ... the server program on here, when I try to compiule it, says that variables gracefulClose and withFdSocket are  not in scope
[12:41:59] <Andrew> k
[12:42:15] *** Quits: tiferrei2000 (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[12:42:21] <Andrew> https://lib.andrewyu.org/public/echo-serv.hs
[12:42:47] <Andrew> and output: termbin.com/bie9l
[12:43:23] <[exa]> what's the version of network package you have installed? seems like the 2 functions are fairly new
[12:43:48] <[exa]> if you have cabal file around, make sure you explicitly depend on a version newer than 3.1 (see the notes in the docs there)
[12:43:48] <Andrew> ghc 8.10.4, not sure how I check any packages
[12:44:01] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[12:44:12] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:d8aa:2d89:2452:a45) (Ping timeout: 240 seconds)
[12:44:17] * Andrew tries cabal install Network
[12:44:24] <Andrew> s/N/n/
[12:44:31] <Andrew> Ok, I do need an update
[12:44:33] <Andrew> Thanks :)
[12:44:35] <[exa]> yes that might help
[12:44:44] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[12:44:56] <[exa]> `ghc-pkg describe somepackage` can help with checking the versions
[12:45:06] <abastro> IIRC using `cabal install` to install a library is not ideal
[12:45:14] *** Joins: Midjak (~Midjak@82.66.147.146)
[12:45:25] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:e47a:f359:ed75:db12)
[12:45:40] <abastro> Usually better to handle package with .cabal file
[12:46:00] <[exa]> Andrew: you might need to add `cabal install --lib network` if you are installing them "globally". Managing the packages locally for each project is a bit better as abastro says
[12:46:01] <Andrew> abastro: That's what I expected to work, but why?
[12:46:07] <Andrew> Oh I do need --lib
[12:46:25] *** Joins: desklamp[m] (~desklampm@2001:470:69fc:105::77b8)
[12:46:28] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[12:46:29] <Andrew> k
[12:47:04] <Andrew> k, thanks! Now at least I got the libraries worked out
[12:47:32] <[exa]> for starting "realistic programming", this is incredibly useful: https://wiki.haskell.org/How_to_write_a_Haskell_program
[12:48:04] <Andrew> Thank you!
[12:48:53] <abastro> The link includes `cabal sandbox init` tho..
[12:49:08] <abastro> Or is it quite usable?
[12:49:09] <[exa]> Inst: about the arguments, the main question there is whether it's just a "bunch of strings" that is expandable infinitely, or each of them has a specified semantics (like 'from' and 'to' and 'username' or so), which should probably drive the actual API implementation
[12:49:36] <Inst> specified semantics
[12:49:45] <abastro> wow, sandbox in cabal. Interesting
[12:49:45] <[exa]> abastro: oh wow I didn't check all the way there, that might require an update
[12:49:49] <merijn> abastro: cabal sandbox is pretty much deprecated
[12:49:53] <abastro> Ouch
[12:49:54] <[exa]> yeah explicit sandboxes were a thing
[12:49:57] <merijn> abastro: It's completely obsolete
[12:49:57] <abastro> Yea, as expected..
[12:50:04] <abastro> Does cabal always sandbox now?
[12:50:15] <merijn> abastro: Yes, no, maybe, depends on your point of view
[12:50:44] <[exa]> it uses nix-style builds, everything is sufficiently isolated by default so sandboxes are usually only required for technical reasons
[12:50:55] <abastro> Oh, so it was practically overhaul-ed
[12:50:59] <[exa]> hm, how do I edit the haskell wiki? just register and go?
[12:51:23] <[exa]> abastro: yes, afaik that was the bigest deal in updating from cabal 1 to 2
[12:51:33] <abastro> https://cabal.readthedocs.io/en/3.6/getting-started.html might be better
[12:53:15] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[12:55:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:55:19] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[12:57:11] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[12:58:35] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[12:59:06] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[12:59:09] <Andrew> How do I turn ByteString into a String ([char])?
[12:59:15] <Andrew> s/c/C/
[12:59:44] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[13:00:32] <abastro> @hoogle ByteString -> String
[13:00:32] <lambdabot> Control.Lens.Internal.ByteString unpackStrict8 :: ByteString -> String
[13:00:32] <lambdabot> Control.Lens.Internal.ByteString unpackLazy8 :: ByteString -> String
[13:00:32] <lambdabot> Data.ByteString.Lazy.UTF8 toString :: ByteString -> String
[13:00:54] <abastro> Typically through `toString`, I guess.
[13:02:49] <dminuoso> Andrew: That action requires decoding.
[13:02:57] <dminuoso> ByteString is sadly poorly named
[13:03:07] <abastro> Oh wait
[13:03:08] <dminuoso> ByteBuffer might have been a better term
[13:03:16] <abastro> Duh I almost forgot that
[13:03:41] <abastro> I wonder what does `toString` do
[13:04:02] <dminuoso> Which toString?
[13:04:19] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[13:05:38] <Inst> @exa
[13:05:38] <lambdabot> Maybe you meant: vera eval
[13:05:42] <Inst> if you're still playing with me
[13:05:48] <Inst> i just realized what i wanted
[13:05:53] <Inst> which is basically record syntax for arguments
[13:05:56] <Inst> erm, functions
[13:06:22] <abastro> dminuoso: Data.ByteString.UTF8.toString I guess
[13:06:31] <Inst> by default, you run default arguments, but if you want to change any of the arguments, you invoke the function through a grabber, then the grabber changes the argument for you
[13:06:44] <abastro> dminuoso: The instance method of `IsString`
[13:06:47] <Inst> which is useful if someone added way too many arguments for the function to take
[13:08:47] <abastro> My unpopular opinion: Most libraries should take a record as single input instead of taking multiple inputs
[13:09:00] <dminuoso> Yes that is unpopular and a bad idea.
[13:09:26] <dminuoso> Otoh, there is some merit to that idea but not to avoid 1+ arguments
[13:10:13] <dminuoso> If you have a function `f :: ServerOpts -> T`, and not expose ServerOpts, but only a `defaultServerOpts` and field accessors, you can add fields without a) causing breakage and b) staying inside PVP minor versions
[13:12:59] <Hemmo> Hey! I have a unfinished function I am trying to get to work, but it gives a strange type error! I have a [string] as a parameter and when I try to load the file ghci complains about a type error?? It's a list of strings and not a string, but it still gives a Char error??
[13:13:00] <Hemmo> https://paste.tomsmeding.com/2cbEeWdb
[13:13:04] <Hemmo> Heres the code
[13:13:39] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[13:14:25] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:14:39] *** Quits: abastro (~abab9579@143.248.229.191) (Ping timeout: 260 seconds)
[13:15:01] <abastro[m]> dminuoso, why is it a bad idea?
[13:15:05] *** Joins: tafa (~tafa@user/tafa)
[13:17:06] <Guest|18> tifa
[13:17:09] <dminuoso> abastro[m]: Well I guess it depends. Is if useful to carry it curried around?
[13:17:24] <dminuoso> But insisting it takes only 1 argument for the sake of taking 1 argument, thats just a poor design choice
[13:19:32] *** Joins: abastro (~abab9579@143.248.229.191)
[13:20:22] <abastro> Oh, ofc for sake of having single argument, it is a bad idea.
[13:21:07] <abastro> However I also see many cases where benefit of currying doesn't apply
[13:21:07] <Guest|18> the function (String -> String -> Float) ：-(
[13:21:41] <abastro> Especially when the two parameters have no specific reasonable order.
[13:22:02] <abastro> Having record as parameter also helps with readability of the function, since you can name the parameters
[13:24:20] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:25:40] *** Quits: abastro (~abab9579@143.248.229.191) (Remote host closed the connection)
[13:26:28] *** Joins: abastro (~abab9579@143.248.229.191)
[13:26:59] *** Quits: lispy (~lispy@82.212.115.165) (Quit: Client closed)
[13:29:46] *** Quits: Hemmo (Hemmo@eduroam-252-47.uta.fi) (Ping timeout: 246 seconds)
[13:30:25] *** Joins: Hemmo (~Hemmo@91.221.67.198)
[13:46:57] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (Ping timeout: 240 seconds)
[13:48:49] <Hemmo> Okay so I get the right elements on my list of lists now, but is there a way to make it work so my function would make a list for each element of X? So the X would iterate over the Y's and when it hops on to the second X it will have created a list of the first one? Function here: clusters :: (String -> String -> Float) -> Float -> [String] -> [[String]]
[13:48:49] <Hemmo> clusters f d ss = [x | x <- ss, y <- ss, (f x y <= d)] : []
[13:49:38] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:49:38] <Hemmo> So now it returns one list inside a list whereas I would like it to return multiple lists inside a list
[13:50:08] <Hemmo> Also as a sidenote; is it somehow possible to create this recursively since I must iterate over the same elements each time until I reach the last one?
[13:50:58] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:51:08] <abastro[m]> So what you want is, like, for each y, make a list Ly that: Ly includes x when `f x y <= d`
[13:52:21] *** Quits: abastro (~abab9579@143.248.229.191) (Ping timeout: 256 seconds)
[13:52:27] <abastro[m]> Right?
[13:52:42] <Hemmo> Uh for each X I would say
[13:52:49] <Hemmo> "For each string s  in ss, the function clusters computes a "cluster", ie a list of similar strings in ss (strings that are at most distance d from the s). The list of strings similar to s should also contain s (if the distance function allows). "
[13:53:08] <Guest|18> [(f x y)| x <- ss, y <- ss, (f x y <= d)] ?
[13:53:52] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:55:00] <Hemmo> Also I wish to point out that I am not looking for straight up answers, but pointers on how to proceed ;D
[13:55:08] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:56:11] *** Joins: agumonkey (~user@88.163.231.79)
[13:56:20] <kuribas> How do you compose a natural transformation?
[13:56:34] <kuribas> type (~>) f g = forall a. f a -> g a
[13:56:59] <kuribas> but then "type F3 f g h = f ~> (g ~> h)" gives a kind error.
[13:58:19] <[exa]> kuribas: I guess it doesn't like the hidden forall in (g~>h) ?
[13:58:38] <kuribas> yeah
[13:58:50] <abastro[m]> Hemmo: so, is your X the `s` in the problem statement?
[13:59:28] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[14:00:07] <kuribas> [exa]: but it seems, if ~> works for any "a", then I should be able to partially apply the "a"?
[14:00:19] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[14:00:24] <Hemmo> Yes my X is the 's'
[14:00:53] <[exa]> Hemmo: btw re loading from files, the easiest way is to do something like: myStrings <- lines <$> readFile "myFile.txt"
[14:01:04] <abastro[m]> Hemmo: Then, you want to give list of y's, right? Because `y` is supposed to be the close one
[14:02:06] <[exa]> kuribas: you can tru writing the F3 with the explicit forall, but not sure it will work
[14:02:10] <[exa]> *try
[14:03:09] <Hemmo> abastro[m]: here's an example of what I am trying to accomplish: ss = ["aaabc", "aabdd", "a", "aa", "abdd", "bcbcb", "", "abcdefghij"] should return [[""],["a","aa"],["a","aa","aaabc"],["aa","aaabc","aabdd","bcbcb"],["aaabc","aabdd","abdd"],["aaabc","bcbcb"],["aabdd","abdd"],["abcdefghij"]]
[14:04:06] <abastro[m]> Well, Hemmo, we don't know which `f` function is applied there to get the result
[14:04:24] <Hemmo> Oh oh, let me share the full code to pastebin!
[14:04:39] <abastro[m]> But yea it seems like you need to list `y` instead of `x`
[14:05:04] <Hemmo> Oh yes
[14:05:08] <Hemmo> Now I got what you meant ;D
[14:05:12] <abastro[m]> <Hemmo> "clusters f d ss = [x | x <- ss..." <- In this code, you are listing x. Perhaps you'd want to list y, and somehow nest the list one level down
[14:05:14] <Hemmo> That's right, put the Y in the list
[14:05:52] <Hemmo> here's the full code too if you want to take a look; https://paste.tomsmeding.com/sooJbKaN
[14:06:10] <abastro[m]> Btw nesting the list is.. like
[14:06:10] <abastro[m]> `[[y | y <- ss, (put sth here)] | x <- ss]`
[14:06:44] <abastro[m]> Lisy comprehension's iteration comes at right side
[14:06:57] <abastro[m]> (Or, perhaps you could learn do notation here)
[14:07:18] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[14:07:38] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:08:54] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:09:59] <kuribas> [exa]: I suppose I'd need a type application and a type lambda.
[14:10:00] <Hemmo> Yeah I tried to do it the other way before; [x | [ x <- ss, y <- ss]] but that just gave errors ;D
[14:10:06] <kuribas> [exa]: the latter doesn't exist.
[14:10:18] <Hemmo> abastro[m]: got it to work now! thanks! 
[14:10:37] <[exa]> kuribas: `forall` is the latter afaik
[14:10:49] <[exa]> except obvious limits
[14:10:55] <kuribas> hmm, you could put it in a newtype.
[14:11:29] <abastro[m]> Hemmo: congrats!
[14:11:44] <Hemmo> abastro[m]: cheers ;D
[14:11:48] <abastro[m]> kuribas: yea, if some typelevel stuff does not work, just make newtype.
[14:12:28] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 246 seconds)
[14:12:57] *** Joins: nice29 (~nice29@183.37.157.66)
[14:14:56] <kuribas> newtype TypeLambda f a = TypeLambda (f @a)
[14:15:11] <kuribas> That doesn't look legal...
[14:15:40] <kuribas> abastro[m]: s/make newtype/use idris
[14:15:49] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:16:11] <abastro[m]> Oh. I don't mean that one
[14:16:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:16:44] <abastro[m]> `newtype (~>) f g a =  MkA (f a -> g a)`
[14:16:47] *** Quits: fendor (~fendor@178.165.199.73.wireless.dyn.drei.com) (Remote host closed the connection)
[14:19:00] *** Quits: nice29 (~nice29@183.37.157.66) (Quit: Connection closed)
[14:19:21] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:21:23] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:21:30] *** Joins: deadmarshal_ (~deadmarsh@95.38.118.21)
[14:30:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:31:53] *** Joins: abastro (~abab9579@143.248.229.191)
[14:32:48] *** Joins: nice29 (~nice29@183.37.157.66)
[14:32:51] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[14:33:45] *** Quits: nice29 (~nice29@183.37.157.66) (Client Quit)
[14:34:12] *** Joins: benin (~benin@183.82.176.175)
[14:37:03] *** Quits: Hemmo (~Hemmo@91.221.67.198) (Remote host closed the connection)
[14:37:20] *** Joins: Benzi-Junior (~BenziJuni@88-149-64-179.du.xdsl.is)
[14:40:20] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:40:28] *** Quits: abastro (~abab9579@143.248.229.191) (Remote host closed the connection)
[14:40:45] *** Joins: nice29 (~nice29@183.37.157.66)
[14:40:56] *** Joins: abastro (~abab9579@143.248.229.191)
[14:45:21] *** Quits: nice29 (~nice29@183.37.157.66) (Ping timeout: 245 seconds)
[14:46:34] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[14:48:09] *** Joins: komikat (~komikat@157.47.55.13)
[14:50:53] *** Quits: komikat (~komikat@157.47.55.13) (Read error: Connection reset by peer)
[14:53:33] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[14:56:16] *** Joins: ccntrq (~Thunderbi@2a01:c23:8d1c:5b00:7bca:2599:a3ae:73a4)
[14:56:40] *** Joins: oskar_greda (~oskar_gre@84.69.89.37)
[15:00:39] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[15:00:49] *** Quits: oskar_greda (~oskar_gre@84.69.89.37) (Client Quit)
[15:02:32] *** Quits: benin (~benin@183.82.176.175) (Quit: The Lounge - https://thelounge.chat)
[15:05:16] *** Joins: oskar_greda (~oskar_gre@84.69.89.37)
[15:07:24] <oskar_greda> Hey All, I work for MLabs - A remote Haskell consultancy, and we are growing rapidly in the Fintech/Blockchain space - I am looking for places to find solid Haskell devs, is anyone interested in having a chat about this?
[15:08:41] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:11:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:12:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[15:13:36] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[15:14:33] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[15:15:14] *** Joins: Graham31415 (~Graham@user/Graham31415)
[15:15:25] <Andrew> abastro[m]: yeah, Data.ByteString.UTF8.toString sounds correct
[15:15:29] <Andrew> I used fromByteString, not ideal
[15:17:07] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:22:26] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:22:41] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:41:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:45:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[15:49:22] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[15:51:42] *** Quits: agumonkey (~user@88.163.231.79) (Remote host closed the connection)
[15:53:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:54:17] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (Ping timeout: 240 seconds)
[15:56:16] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[15:57:02] <juri_> ugh. just had to debug a call to error, caused by a minor change in a different call to error. frustrating. 
[15:57:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:02:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[16:04:20] *** Joins: dut (~dut@user/dut)
[16:05:10] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:10:46] *** Quits: abastro (~abab9579@143.248.229.191) (Ping timeout: 245 seconds)
[16:11:11] *** Quits: acidjnk (~acidjnk@p200300d0c7049f58501b6673664ff2c4.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[16:15:59] *** Joins: xkuru (~xkuru@user/xkuru)
[16:17:10] *** Joins: abastro (~abab9579@192.249.26.126)
[16:17:10] *** Joins: razetime (~quassel@117.254.35.251)
[16:30:30] *** Joins: Deide (~deide@user/deide)
[16:31:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:31:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[16:31:41] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[16:31:57] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:34:48] *** Joins: Guest7414 (~diego@151.67.153.91)
[16:37:07] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:e47a:f359:ed75:db12) (Ping timeout: 250 seconds)
[16:38:21] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[16:44:06] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[16:44:37] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:46:06] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Remote host closed the connection)
[16:46:23] *** Joins: cdman (~dcm@27.2.218.248)
[16:46:23] *** Quits: cdman (~dcm@27.2.218.248) (Changing host)
[16:46:23] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[16:50:18] *** Quits: abastro (~abab9579@192.249.26.126) (Remote host closed the connection)
[16:50:31] *** Joins: abastro (~abab9579@192.249.26.126)
[16:55:01] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:56:04] *** Joins: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de)
[16:58:37] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[17:02:07] *** Joins: cfricke (~cfricke@user/cfricke)
[17:02:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[17:03:17] *** Quits: oskar_greda (~oskar_gre@84.69.89.37) (Quit: Client closed)
[17:03:30] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:04:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[17:05:20] *** AlexNoo_ is now known as AlexNoo
[17:06:46] <abastro[m]> Lmao someone near me just said that Go is going to be big
[17:07:05] <abastro[m]> E.g. compared to rust, rust is not great at maintenance. Like what
[17:09:01] <abastro[m]> I dislike how many ppl are eager to follow the megacorps, esp google
[17:09:19] <abastro[m]> Wait, sorry, I thought this was # haskell-offtopic
[17:15:10] *** Quits: razetime (~quassel@117.254.35.251) (Ping timeout: 246 seconds)
[17:18:02] <kuribas> abastro[m]: worse is the eagerness to work in financial speculation and ecologically unfriendly pyramid schemes.
[17:19:30] <maerwald[m]> *sigh*
[17:20:53] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 250 seconds)
[17:21:24] <maerwald[m]> abastro: Go is already *much* bigger than haskell.
[17:21:26] <juri_> ok haskel. what the heck.
[17:22:45] <juri_> https://paste.rs/MzV.patch
[17:23:10] <juri_> that change is enough to cause the error in noIntersection to be called.
[17:23:37] <juri_> If i didn't know better (this is haskell, right?) i'd swear this is a compiler error.
[17:25:07] <kuribas> maerwald[m]: yeah, so what?
[17:28:48] <kuribas> As long is it gets decent tooling, good enough libraries, I don't care how popular haskell is.
[17:30:11] *** Joins: razetime (~quassel@117.254.35.196)
[17:30:42] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:32:41] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:32:54] <maerwald> kuribas: I didn't draw a conclusion
[17:33:16] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[17:33:24] <maerwald> except that popularity has little to do with language features
[17:33:27] <exarkun> There seems to be a sweet spot where it's just popular enough so that other smart people build those tools and libraries for you but not so popular that a lot of bad ideas get jammed in and ruin it, too.
[17:33:45] <maerwald> but I think Haskell community often thinks it's a race of features
[17:34:00] <abastro> I don't mean that it is race of features or anything
[17:34:11] <abastro> Just that it feels bad how Go is going dominant
[17:34:30] <maerwald> why?
[17:34:44] <abastro> Oh I think I am going to talk abt it in #haskell-offtopic
[17:34:46] <maerwald> I don't think they're attracting any Haskellers away
[17:34:52] <maerwald> rust is
[17:36:52] *** Quits: lortabac (~lortabac@88.125.6.227) (Ping timeout: 260 seconds)
[17:37:09] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:8d5e:9f6:968:fb4b)
[17:38:10] <abastro> Hmm
[17:38:16] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[17:39:10] <abastro> I mean, Go vs Rust could change the entire programming ecosystem's direction
[17:39:21] <maerwald> Go and rust are not really competing imo
[17:39:57] <abastro> What I just heard kind of indicates that, tho I admit it could be exceptional
[17:40:04] <abastro> A company switching to Go from Rust
[17:40:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:40:20] <maerwald> yeah well, I also know a company that switched from Haskell to Go
[17:40:28] <c_wraith> if they can do that, they probably shouldn't used Rust in the first place.
[17:40:57] <maerwald> I just think those are probably rather business decisions, less so technical ones. These often come with the star team leaving the company
[17:40:59] <abastro> Oh, interesting
[17:41:16] <abastro> I see, so Rust is for places where it cannot afford Go?
[17:41:22] <abastro> Uh what is "cannot afford Go" hmm
[17:41:32] <c_wraith> Rust is for when circumstances preclude garbage collection.  If you can switch to a language with garbage collection, you're paying a lot for something you don't need.
[17:41:37] <abastro> I mean, yea, it was because maintenance - Rust is harder to maintain, I guess
[17:41:53] <abastro> Hm doesn't go also have pointers?
[17:42:00] <maerwald> programmers think too much about technicalities. Those are only a small part of why a company might switch
[17:42:10] <abastro> Yep, I know
[17:42:37] <abastro> I mean, possibly Rust has less ppl working for it
[17:42:46] <abastro> Which is why they had to ditch rust
[17:43:22] <juri_> ease of hiring, willing to work for low pay, productive. pick two.
[17:43:47] <maerwald> one big part of Go's success is that the ecosystem has extremely good support for microservice architectures and a lot of clueless CTOs believe in that sort of thing
[17:45:21] <tdammers> juri_: or really just pick "productive"
[17:47:01] <abastro> Yeah, microservice architecture
[17:47:11] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[17:47:59] <abastro> Meh..
[17:48:13] <abastro> Why are CTOs not great at tech itself
[17:48:16] <juri_> we microservice (13 microish services), but it's hard. each service has a library of types that is sometimes required in other services.
[17:48:33] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[17:48:36] <abastro> Well they perhaps just design each microservice as crap
[17:48:46] <abastro> And patch problems in hard-coding manner
[17:48:46] <juri_> stack didn't like that very much, so we moved back to cabal.
[17:49:50] <tdammers> the problem with microservices is that you need a lot of infrastructure in place before you can even begin to implement actual features without fighting the architecture every step
[17:50:20] <tdammers> you pay a huge up-front cost, and whether it'll actually pay off is questionable
[17:50:27] *** Quits: belphegor666 (~satan@user/belphegor666) (Ping timeout: 260 seconds)
[17:52:27] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[17:52:29] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[17:52:58] <maerwald> tdammers: only if you have massive scaling issues
[17:53:01] <maerwald> and most companies don't
[17:53:10] <abastro> Scaling issues?
[17:53:26] <maerwald> yes, microservices allow micro-managing scaling 
[17:53:44] <maerwald> if you have one monolith and a tiny part of it needs more ram, well
[17:54:14] <maerwald> it's more of an optimization strategy than an architecture pattern
[17:54:20] <tdammers> indeed
[17:54:28] <tdammers> also, not just performance, but also decoupling deployments
[17:54:34] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[17:54:58] <tdammers> instead of taking the entire system down, installing new code, and then firing it up again, you upgrade each individual service whenever you have updates for it
[17:55:13] <maerwald> today people use it to facilitate team and sprint separation
[17:55:28] <tdammers> indeed, but that's kind of throwing the baby out with the bathwater
[17:55:45] <juri_> we have one big helm chart that covers all of the things, so you upgrade every time regardless.
[17:55:55] <tdammers> the proper answer to that problem is "librarize your components, and set up an internal supply chain"
[17:56:12] <maerwald> this one is great about microservices: https://www.youtube.com/watch?v=y8OnoxKotPQ xD
[17:56:29] <tdammers> you can have 30 teams working independently on 30 modules, and still ship the system as a monolith
[17:58:34] <maerwald> if you think that video is exaggarating... it is not. I've been in the middle of it xD
[17:58:45] <maerwald> took me 4 months to figure out it's not me who's insane
[17:59:20] <remexre> Is there a standard technique for deriving a structural editing structure (with multiple holes, etc) from a zipper? It "feels like" it should be easy, but I'm missing something in the translation from single-hole zippers to multi-hole
[18:00:05] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:00:09] *** Joins: gaff (~gaff@49.207.210.61)
[18:00:18] *** Quits: gaff (~gaff@49.207.210.61) (Client Quit)
[18:00:45] <lortabac> maerwald: that video describes my old job accurately :D
[18:01:00] <maerwald> oh, a fellow microservice veteran
[18:01:20] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:01:21] <geekosaur> I feel like zipper doesn't work for dynamic editing structures? it's more for static ones. don't you want a rope instead?
[18:02:23] <maerwald> lortabac: at some point, they used microservice architecture to improve database queries... so one microservice would push data to another, that one would denormalize it for faster queries, etc.
[18:02:37] <maerwald> I mean...
[18:02:48] <remexre> geekosaur: what do you mean by static vs dynamic? I'm not quite actually making a text editor (i.e. this is an API, not a UI), so I probably don't actually want a rope I think?
[18:03:26] <lortabac> maerwald: haha reality is even worse than the video
[18:03:26] <geekosaur> zippers are good when you have a fixed number of foci. ropes seem like they'd be better if it's dynamic
[18:03:35] <maerwald> and you needed to be *very* careful to not accidentially create cycles in the microservice dependency graphs
[18:03:55] <abastro> Eww incredibly small microservice
[18:04:03] <abastro> Like how does the company manage to handle all that
[18:04:07] <geekosaur> *flashbacks to OLE*
[18:04:08] <abastro> By sheer manpower?
[18:04:11] <maerwald> yes
[18:04:15] <juri_> geekosaur: *triggered*
[18:04:28] <abastro> Oh god no
[18:04:33] <lortabac> yes, microservices needs a crazy amount of manpower
[18:04:43] <maerwald> and very smart engineers
[18:04:50] <maerwald> I'm not being sarcastic
[18:04:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[18:04:52] <abastro> And that is why they need to hire ppl at bargain price
[18:05:00] <maerwald> that stuff is really complicated
[18:05:39] <lortabac> to be honest there are some cases in which a network barrier between components is actually useful
[18:05:42] <remexre> geekosaur: what would a rope on a tree structure actually look like?
[18:06:02] <abastro> So.. handful of smart ppl, lots of coders just bashing at keyboard to make something vaguely close to "working"
[18:06:16] <geekosaur> mm, that's a good question
[18:06:32] <lortabac> however IMHO it should be a technical choice and not an imposed organizational thing
[18:06:33] <maerwald> abastro: I mean, that stuff was born from big companies. And then small companies thought they have the same problem like the big ones
[18:07:01] <maerwald> and programmers rarely question business value of tech decisions
[18:07:03] <abastro[m]> Oh noo
[18:07:07] <maerwald> so they just go one with what they know
[18:07:22] <geekosaur> guess you're looking at a tree where you can treat any part as an independent "root"?
[18:07:26] <abastro[m]> I hate when ppl just copy the megacorps
[18:07:33] <abastro[m]> "Because they succeeded" ..
[18:07:37] <geekosaur> but I'd need to know more about the API in question
[18:07:59] <maerwald> abastro[m]: that's what most CTOs do... read blog posts from google employees
[18:07:59] <geekosaur> treesshould actually be pretty good at that, though
[18:08:16] <abastro[m]> Wh
[18:08:26] <abastro[m]> "CTO" Yet just read employees
[18:08:32] <geekosaur> since the only realdifference between the actual root and your current "focus" is that one has a parent node
[18:08:56] <abastro[m]> I get that megacorps like microservices, their "micro" is still big
[18:09:03] <abastro[m]> But small companies..
[18:09:04] <abastro[m]> Meh
[18:09:19] *** Joins: Pickchea (~private@user/pickchea)
[18:09:48] <maerwald> anyway, we're disrupting someone asking actuall Haskell questions :p
[18:10:01] <geekosaur> the hard part in Haskell is you can't easily build nodes with actual parent pointers (you can tie the knot, but then you can't update easily) so moving through the tree is difficult without holding on to what amounts to the whole spine
[18:10:09] <abastro[m]> Ouch
[18:10:25] <remexre> geekosaur: yeah, that's why I was thinking of zippers
[18:10:43] *** Quits: abastro (~abab9579@192.249.26.126) (Ping timeout: 260 seconds)
[18:11:21] <remexre> I'm basically trying to build a tactic engine for a simple PL
[18:11:39] <geekosaur> zipper on a tree just automates that part. but yes, multiple zippers then becomes a problem. I know tree zippers exist but don'tknow about multiple foci in that case
[18:11:54] <abastro[m]> (Posted continuing convo in #haskell-offtopic)
[18:11:58] <geekosaur> hypothetically it's just another differentiation
[18:12:26] <geekosaur> but practically what does that mean? :)
[18:12:33] <remexre> so I guess the API I want is something like, "navigate cursors around, replace the current subtree, rebuild the whole tree into a 'real tree' so semantic checks can happen"
[18:13:25] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[18:14:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:14:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:14:35] *** Joins: wroathe (~wroathe@user/wroathe)
[18:15:04] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:88a0:fb04:2d2:c434)
[18:15:08] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:15:26] <remexre> augh, sry, afk
[18:16:31] <geekosaur> how many cursors will need to be around at any given time? and what happens if they overlap?
[18:17:00] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:17:08] <abastro[m]> Sounds like ConcurrentModificationException
[18:17:47] *** Joins: acidjnk (~acidjnk@p200300d0c7049f58687650f0568aa4d7.dip0.t-ipconnect.de)
[18:18:23] <geekosaur> yeh, that'sthe next question, how many of these cursors are held by the same session
[18:19:42] <geekosaur> and is there a concept of splitting / joining cursors
[18:23:00] *** Joins: abastro (~abab9579@192.249.26.126)
[18:24:35] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[18:24:53] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:26:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[18:27:54] <remexre> ok back, sorry about that
[18:28:09] <remexre> hm, yeah, hadn't thought about the overlapping case
[18:28:44] <remexre> maybe I could tweak it to having one cursor, but multiple holes, as long as I can efficiently find the holes?
[18:30:21] <geekosaur> well, that still depends on how you represent the zipper, which depends on how many holes
[18:31:49] <geekosaur> and may depend on how the tree itself is represented (i.e. can we get away with having null trees, or do we need to use Maybe?)
[18:32:37] <remexre> null trees? I've got it represented as a pattern functor, so it shouldn't be hard to do the MaybeFix f = Maybe (f (MaybeFix f)) thing
[18:32:45] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[18:34:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[18:36:22] <geekosaur> ok, I was thinking something that looked more like the traditional list zipper, only with a list of foci and intervening subtrees. but come to think of it, not sure that would work
[18:38:07] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:42:39] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:6050:16ec:fe01:4f97)
[18:42:45] <Inst> i'm busy being pissed off at record syntax
[18:42:57] <Inst> you know my dream is to have the Chinese government adopt Haskell, and rebrand it to Micius, after the ancient Chinese logician and militant pacifist Mozi
[18:43:08] <Inst> fork it as well
[18:43:18] <Inst> one of the first things that happen is that the record syntax system has to be replaced
[18:44:48] <Inst> Mozi is a very good name for a FP language, i.e, Mozi ran around defending cities from attackers (i.e, high security), was a logician and physicist a couple of centuries before Christ
[18:44:56] <Inst> and we'll put the keywords in Wenyanwen ;)
[18:45:06] <Inst> (classical Chinese, which is extremely terse)
[18:45:42] <maerwald> SJTUG teaches Haskell, no?
[18:50:20] <geekosaur> record syntax got reworked in 9.2 didn't it? although you really want lens (which fits well with the newer stuff)
[18:54:08] <c_wraith> except 9.2 also got RecordDotSyntax, which is a travesty of overloading the . character even more
[18:55:27] <geekosaur> tempting to reference the Go discussion here }:>
[18:57:38] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:59:43] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:04:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 246 seconds)
[19:05:45] *** Joins: odnes_ (~odnes@5-203-245-187.pat.nym.cosmote.net)
[19:06:36] *** Joins: jinsun__ (~jinsun@user/jinsun)
[19:07:04] *** Quits: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net) (Read error: Connection reset by peer)
[19:07:20] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:07:28] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 260 seconds)
[19:08:30] <Inst> maerwald: Shanghai Jiaotong?
[19:08:34] <Inst> That's my Dad's alma
[19:08:49] *** Quits: jinsun__ (~jinsun@user/jinsun) (Client Quit)
[19:09:09] *** Joins: jinsun (~jinsun@user/jinsun)
[19:09:15] <maerwald> yes I think so
[19:10:11] <Inst> nice, and he won't overwatch me learning comp sci
[19:10:23] *** Quits: ccntrq (~Thunderbi@2a01:c23:8d1c:5b00:7bca:2599:a3ae:73a4) (Quit: ccntrq)
[19:10:27] *** Joins: ccntrq1 (~Thunderbi@dynamic-077-001-011-041.77.1.pool.telefonica.de)
[19:10:33] <Inst> how badly overloaded is . right now?
[19:10:53] <Inst> iirc it's the function composition operator, for f.g, \x -> f (g x)
[19:11:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:12:46] *** ccntrq1 is now known as ccntrq
[19:13:03] <geekosaur> function composition, module separator, module hierarchy separator, decimal point, series syntax (Foo(..), [f..g], etc.)
[19:13:17] <geekosaur> there's already a conflict between those
[19:13:35] <geekosaur> > [False..True] -- legal Haskell but misparsed by ghc
[19:13:37] <lambdabot>  error:
[19:13:37] <lambdabot>      Not in scope: ‘False..’
[19:13:37] <lambdabot>      No module named ‘False’ is imported.error:
[19:14:55] <geekosaur> it's a tricky one to get right, lexing has to know that False is not a module name so it doesn't treat it as one
[19:15:20] <geekosaur> RecordDotSyntax introduces the same conflict but with lowercase names
[19:15:57] *** Quits: abastro (~abab9579@192.249.26.126) (Ping timeout: 250 seconds)
[19:16:36] *** Quits: acidjnk (~acidjnk@p200300d0c7049f58687650f0568aa4d7.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:16:59] *** Quits: anderson (~ande@user/anderson) (Quit: bye)
[19:16:59] *** Quits: eldritch (~eldritch@user/eldritch) (Quit: bye)
[19:16:59] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[19:17:00] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:8d5e:9f6:968:fb4b) (Quit: WeeChat 2.8)
[19:17:23] <geekosaur> which requires feedback between the typechecker and lexing, or (ghc's solution) just treating any `x.y` as record dot and requiring spaces around the `.` to get composition
[19:18:25] <abastro[m]> That is quite clever solution actually
[19:19:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:21:40] <tdammers> I've been thinking about alternative record systems a bit, and even tried the one Purescript uses in production, and came to the conclusion that the status quo isn't actually too bad
[19:21:47] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[19:22:38] <tdammers> I think the best we could do without breaking compatibility would be some kind of syntax sugar for record updates, but then again, lenses already achieve that without changing or extending the core language, so there's that
[19:23:01] <abastro[m]> Status quo?
[19:23:10] <tdammers> Record syntax as it is in Haskell now.
[19:23:12] <abastro[m]> Oh existing records
[19:23:16] <geekosaur> "what already is", in Latin
[19:23:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[19:23:41] <abastro[m]> What I am getting is that ppl dislike namespace pollution
[19:23:45] <tdammers> the beauty is that the "is" is implicit. Latin is great that way.
[19:23:54] *** Quits: Guest7414 (~diego@151.67.153.91) (Quit: Leaving)
[19:24:12] <tdammers> abastro[m]: yes, that is a bit of a downside. But the alternative isn't that much better.
[19:24:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:24:30] <abastro[m]> Yea, possibly
[19:24:39] <tdammers> and if you can accept a "one exported record type per module" policy, then the problem largely goes away
[19:24:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[19:24:55] <tdammers> I do this a lot in projects that require lots of record types
[19:25:11] <abastro[m]> One exported record per module?
[19:25:14] <tdammers> yes
[19:25:23] <abastro[m]> Hm, how do you avoid cyclic reference in modules
[19:25:26] *** Joins: anderson (~ande@user/anderson)
[19:25:50] <tdammers> the kind of record types for which you would do this would not normally need cyclic references
[19:26:07] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[19:26:14] <abastro[m]> I mean, functions involved with records
[19:26:35] <tdammers> you define the functions elsewhere. the "record module" only defines the record type itself.
[19:26:38] <abastro[m]> (Why do I feel like this is flexible Java classes, one record per file..)
[19:26:45] <abastro[m]> Oh
[19:26:46] *** Joins: __monty__ (~toonn@user/toonn)
[19:26:47] <abastro[m]> Now I see.
[19:26:55] <abastro[m]> Makes quite a sense
[19:27:00] *** Joins: jinsun__ (~jinsun@user/jinsun)
[19:27:01] *** Lord_of_Life_ is now known as Lord_of_Life
[19:27:12] <abastro[m]> Maybe ppl just do not like that approach
[19:27:18] <tdammers> e.g.: module Entities.User where data User = { username :: Text, password :: Hash, email :: EMailAddress }
[19:27:27] <abastro[m]> Perhaps because too many imports
[19:27:45] <tdammers> it's a pity you can't re-export qualified
[19:27:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:27:58] <abastro[m]> Now that
[19:27:59] *** Joins: eldritch (~eldritch@user/eldritch)
[19:28:09] <abastro[m]> That is the prime pain point I found
[19:28:25] * geekosaur shudders at the linker pain trying to support that would cause
[19:28:25] <tdammers> so if you want User and Page to be imported into different namespaces, you have to import them separately; you can't make a "God module" that imports all your different record types and re-exports each one into a separate namespace
[19:28:31] <abastro[m]> If that was solved, namespace pollution would not affect me anymore
[19:28:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[19:29:00] <tdammers> geekosaur: well, the problem is of course that GHC Haskell conflates "source file", "compilation unit", and "namespace", and conveniently assumes that those are the same thing
[19:29:06] *** Joins: glider (~glider@user/glider)
[19:29:12] <abastro[m]> Yea tbh I like any kind of namespace
[19:29:24] <tdammers> (also "module")
[19:29:50] <abastro[m]> Haskell, avoid success at all costs, yet does not fix its namespace/compile unit issues
[19:30:06] <tdammers> if we could define namespaces independently from compilation unit boundaries, like in C++, then that would solve the issue (but also introduce new ones, so there's that)
[19:31:08] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 272 seconds)
[19:32:26] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[19:33:24] <abastro[m]> Yep, honestly it would be great if haskell did not oversimplify this part
[19:33:35] *** Quits: ccntrq (~Thunderbi@dynamic-077-001-011-041.77.1.pool.telefonica.de) (Quit: ccntrq)
[19:33:52] *** Joins: ccntrq (~Thunderbi@dynamic-077-001-011-041.77.1.pool.telefonica.de)
[19:34:08] <tdammers> unfortunately, the module system as it is is difficult to extend / replace
[19:34:43] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[19:36:13] *** Quits: razetime (~quassel@117.254.35.196) (Ping timeout: 240 seconds)
[19:36:39] <geekosaur> mm, now that I think about it, I wonder if that's actually true. the real name of anything is qualified by full module and package names; namespaces could be implemented by replacing the module part, conceivably
[19:37:29] <geekosaur> exceptthat would make the reexport collide with the original definition, hm
[19:37:48] <geekosaur> (which is why this is a problem to begin with)
[19:42:09] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:44:45] *** Joins: razetime (~quassel@117.254.35.251)
[19:45:54] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:46:10] <abastro[m]> Reexport collide?
[19:46:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:47:13] <abastro[m]> Oh, so basically you can reexport named exports along with original name?
[19:47:24] <abastro[m]> Just that it would require both
[19:47:36] <geekosaur> no
[19:47:56] <geekosaur> I'm saying if a module tried to reexport qualified, the qualified name would conflict with the original at link time
[19:48:37] <geekosaur> therewould need to be a way to distinguish namespaced names from module names, and then you'd have to work specifically with one or the other even though they both refer to the same thing
[19:52:32] *** Joins: ccntrq1 (~Thunderbi@2a01:c23:8d1c:5b00:e103:4fc:b5d9:b33d)
[19:54:37] *** Quits: ccntrq (~Thunderbi@dynamic-077-001-011-041.77.1.pool.telefonica.de) (Ping timeout: 240 seconds)
[19:54:37] *** ccntrq1 is now known as ccntrq
[19:56:04] <abastro[m]> Oh, qualified conflict with original?
[19:56:07] <abastro[m]> Wait how
[19:56:28] <geekosaur> sigh
[19:56:31] <geekosaur> read back
[19:56:46] <geekosaur> [30 15:06:39] <geekosaur> mm, now that I think about it, I wonder if that's actually true. the real name of anything is qualified by full module and package names; namespaces could be implemented by replacing the module part, conceivably
[19:57:19] <geekosaur> I am talking about how one might add namespaces without breaking literally every existing library
[19:57:36] <geekosaur> except that it introduces a different problem
[19:59:56] <abastro[m]> Oh, sorry. I am not informed enough to understand that in one go.
[20:01:45] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[20:01:49] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:07:14] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:08:03] <Andrew> Simple way to decode UTF-8 encoded ByteString replacing invalid stuff with U+FFFD rather than a Nothing value or an Exception?
[20:08:27] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[20:10:50] <maerwald> Andrew: is that a question?
[20:11:08] <Andrew> Yeah
[20:11:14] <maerwald> https://hackage.haskell.org/package/text-2.0/docs/Data-Text-Encoding.html#v:decodeUtf8With
[20:11:25] <Andrew> Thanks :P
[20:13:04] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:20:23] *** Joins: dut_ (~dut@user/dut)
[20:22:28] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:23:31] *** Quits: dut (~dut@user/dut) (Ping timeout: 260 seconds)
[20:25:25] <Andrew> What the heck is the Text type
[20:25:30] <Andrew> I want [Char]
[20:28:13] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:29:32] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[20:29:41] <sm> https://hackage.haskell.org/package/text-2.0/docs/Data-Text.html#v:unpack
[20:30:41] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[20:31:52] <maerwald> Andrew: Text is a more efficient type than String
[20:32:05] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:32:06] *** Joins: razetime (~quassel@117.254.35.251)
[20:32:35] <geekosaur> most people who think they want [Char] probably want something mroe efficient than a singly linked list
[20:32:58] <Andrew> Okay, I'll look into that
[20:33:33] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:34:17] <Andrew> I wonder if that' a good idea while parsing internet protocols such as Irc
[20:34:56] <geekosaur> IRC would be mostly ByteString, tbh
[20:35:22] <geekosaur> and more complicated because there isn't actually an encoding for anything except nicks, which aren't utf8
[20:35:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[20:35:38] <Andrew> hmm true
[20:35:47] <geekosaur> utf8 is a convention and not an especially widely used one; many clients attempt utf8 decode and fall back to latin-1
[20:35:51] <Andrew> so i should just deal with ByteString everywhere?
[20:36:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:36:32] <geekosaur> probably
[20:36:37] <Andrew> k
[20:36:49] <maerwald> Don't use the Char8 module
[20:36:53] * Andrew dislikes having so many text-like types and looks at https://hackage.haskell.org/package/monoid-subclasses-0.4.2/docs/Data-Monoid-Textual.html
[20:37:10] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[20:37:16] <Andrew> I just want a proper typeclass for everything that's text like
[20:37:48] <maerwald> we don't have, but there's IsString for converting from String to
[20:38:07] <maerwald> but it doesn't have any other useful typeclass functions
[20:38:20] <tdammers> There aren't that many text-like types, really
[20:38:35] <tdammers> ByteString, despite the name, is really just a byte array, not a text-like type
[20:38:45] <maerwald> tdammers: we have 3 bytestring like types
[20:38:48] <Andrew> Yes, I get that point
[20:39:08] <Andrew> Conversion is silly, we need proper typeclasses and polymorph
[20:39:09] <maerwald> it really is excessive
[20:39:40] <tdammers> and there's the lazy/strict distinction, but we really only have this because we can - other languages need more elaborate ceremony to give you lazy string / byte array processing
[20:39:45] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:40:00] <tdammers> I do agree that [Char] is silly
[20:40:00] <maerwald> streamly could solve that :p
[20:40:10] <maerwald> but it will never make it into base
[20:40:10] *** Quits: dut_ (~dut@user/dut) (Ping timeout: 272 seconds)
[20:40:16] <tdammers> but explicit conversions between ByteString and Text are 100% a good thing
[20:41:15] <Andrew> I agree with the last point
[20:42:03] <Andrew> We might as well go into ghc and make [Char] more efficent... [Char] as of now isn't practical but it looks really sweet and "correct"
[20:43:12] <geekosaur> hard to make a linked list more efficient without breaking it
[20:43:42] <tdammers> yeah. [Char] might seem theoretically elegant, but for practical string munging, it's horrible
[20:43:57] <tdammers> the theoretical elegance is why it's the default, after all
[20:44:12] <tdammers> but that was long before Haskell got anywhere near being a viable industry language
[20:44:13] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:44:30] <maerwald> I think a linked list would be cool if the contents were graphemes
[20:45:07] <tdammers> you'd still have to deal with the massive memory overhead, cache trashing, and shlemiel-the-painter problems
[20:45:14] <geekosaur> wouldn't be enormously different from what we have now
[20:45:49] *** Quits: ccntrq (~Thunderbi@2a01:c23:8d1c:5b00:e103:4fc:b5d9:b33d) (Remote host closed the connection)
[20:46:22] <Zemyla> Chars are 21 bits. You can fit three of them into a 64-bit word, along with an annotation bit that says whether there are 2 or 3 characters in that word. That makes them perfect for fingertrees.
[20:46:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:47:06] <Zemyla> Fingertrees also give you O(log n) split and concatenate.
[20:47:06] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[20:47:55] <Andrew> to me, haskell means elegance
[20:48:19] <maerwald> Zemyla: excellent... so all we need now is a tech proposal. And if you push long enough (say, 10 years), you might actually get it into base :D
[20:49:48] <tdammers> Andrew: that's nice, but to other people, haskell means "a language that I can ship to production"
[20:52:11] * Andrew missed the Lisp machines
[20:54:00] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:56:22] <Andrew> Apparently they're before I was born, but lambda machines are just a great idea to me: why would we run beautiful functional code on (also beautiful, but inconsistent and incompatible) turing machines?
[20:56:25] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:56:36] <Andrew> I mean hs and lisp would be much more efficent, supposedly
[20:56:50] <Andrew> At least it gives me a warm fuzzy feeling of "correctness"
[20:59:09] <monochrom> IMO the most important reason is: It doesn't really matter.
[20:59:15] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:59:58] <monochrom> Then, the secondary reason is historical trajectory and networking effect and economy of scale that landed at von-Neumann hardware.
[21:01:33] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:01:43] <Andrew> "It doesn't really matter" ... I'm uncomfortable running functional code on imperatively-designed hardware
[21:01:47] <monochrom> If you're a C&C Red Alert fan, you might like to repeat its "go back in time, shake hand with Einstein, caused them to vanish, change history", except you s/Einstein/Turing/ so lambda calculus might have a better chance in the new time line.
[21:01:54] <Andrew> *designed-for-imperative
[21:02:41] <monochrom> Except that the same trope also says that whoever you think would have a better chance does not, there is always something else that comes up.
[21:03:04] <maerwald> correctness? pah
[21:03:10] <monochrom> Your comfort level doesn't matter, either. The computer doesn't care.
[21:06:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[21:08:52] *** Quits: dfg (dfg@user/dfg) (Quit: I hate quit messages.)
[21:09:56] *** Quits: odnes_ (~odnes@5-203-245-187.pat.nym.cosmote.net) (Ping timeout: 272 seconds)
[21:10:11] *** Joins: dfg (~dfg@dfg.rocks)
[21:10:11] *** Quits: dfg (~dfg@dfg.rocks) (Changing host)
[21:10:11] *** Joins: dfg (~dfg@user/dfg)
[21:10:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Ping timeout: 260 seconds)
[21:13:13] <sm> everybody says [Char] is horribly inefficient without actually testing it, but it's not so clear cut. For the common case of small strings, IIRC it can be faster. It's also much easier to work with when getting started.
[21:13:53] <sm> s/when getting started//
[21:15:02] <dsal> Yeah, I use String a lot without it having any negative impact on my life.
[21:15:29] <raehik1> I'm trying to add a remote Cabal dependency to a non-Hackage pkg. Contains some C. When I add it as a dep to my separate project, Cabal fails and complains "include dir doesn't exist". But it builds fine by itself. 
[21:16:38] <raehik1> I can fix it by adding the required header to install-includes. But I'm not sure why that fixes it & whether it's the right fix, since it's an internal-only header
[21:17:26] <raehik1> Same problem if you try "cabal install --lib". pkg I'm trying to use: https://github.com/keystone-engine/keystone/tree/master/bindings/haskell
[21:18:48] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[21:20:51] <raehik1> any insights here? can't make a PR while I don't know why it fixes a (my) problem! Cabal docs don't talk about this interaction
[21:20:52] *** Joins: econo (uid147250@user/econo)
[21:21:09] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[21:23:12] *** Quits: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:23:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:24:44] <sm> https://www.okapi.wiki/design#motivation, "...born from the frustration..." - sign of a good project
[21:24:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:25:35] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[21:26:00] <sm> "a monadic HTTP parser". I wonder what this means in practice
[21:26:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:27:42] <Zemyla> Should I add zipping traversals to lens?
[21:27:52] <sm> the examples look very nice, but similar to other haskell web frameworks. But "This means it can be used with all Applicative, Alternative, and Monad typeclass methods, plus other Haskell idioms like parser combinators.", maybe this is new
[21:28:45] <sm> raehik1 I think you'll have to share lots of details
[21:28:55] <geekosaur> yeh, my comment about Text vs. [Char] is as someone who has yet to make use oflarge enough String-s to justify Text
[21:29:16] <geekosaur> I just don't do a lot of Stringy stuff in Haskell
[21:31:46] <Zemyla> Odd. Stringy stuff is a lot of what I do in Haskell. Parser combinators make it easy.
[21:32:59] <raehik1> sm: right ofc. in that pkg, `cabal build` works, but `cabal install --lib` fails with an error "include dir not found". It is found when building regularly
[21:32:59] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[21:33:07] <geekosaur> maybe it'd be more correct to say I don't do a lot of Stringy stuff
[21:33:32] <geekosaur> raehik1, what does "cabal check" say?
[21:33:40] <sm> @where paste
[21:33:40] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[21:33:51] <raehik1> oh, I actually have the same problem on an older proj of mine!
[21:33:52] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:34:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:35:08] <raehik1> geekosaur: cabal check says nothing unusual: https://paste.tomsmeding.com/iPZFiJSp
[21:36:33] <sm> yes I think I get it.. okapi's handler code is more composable than most
[21:37:57] <geekosaur> interesting. normally it at least tries to catch things like required headers that aren't so marked. although that is admittedly harder for C than for Haskell
[21:39:51] <raehik1> here's the output of cabal install --lib -v https://paste.tomsmeding.com/kGWB3W91
[21:40:03] <sm> oh yeah, and all the handlers (so far) have no arguments, they just parse. That's different
[21:40:55] <geekosaur> "Warning: 'include-dirs: src/include' directory does not exist."
[21:41:12] <geekosaur> line 191, during configuring
[21:41:35] *** Quits: skandal (~skandal@user/szahid) (Quit: ZNC 1.8.2 - https://znc.in)
[21:42:42] <raehik1> Yeah. Don't understand why
[21:43:09] <raehik1> Cabal's generated sdists don't have the include dir (of that proj, or another one where include is in cbits)
[21:43:45] <geekosaur> this is c2hs blowing up, I see; it might have different expectations from normal C includes
[21:44:29] <raehik1> geekosaur: I'm reproducing the same issue on another project that uses hsc2hs https://github.com/raehik/lzo-hs
[21:44:38] <raehik1> I don't rly know how they differ tho
[21:45:40] <geekosaur> cbits/src/include isn't the same thing as src/include, looking at that package
[21:46:30] <sclv> yeah looks like that pkg needs to specify adding the include dir directly
[21:47:14] <raehik1> geekosaur: what do you mean? both projs seem to write the same thing in the cabal file
[21:47:23] <sclv> include dirs are for what gets passed as include flags not what goes in the sdist
[21:47:24] <sclv> ?
[21:47:38] <raehik1> sclv: yes that's what I'm thinking
[21:47:57] <geekosaur> yes, it translated to an -Isrc/include as sent to c2hs
[21:48:05] <sclv> i guess they never tested a normal sdist workflow
[21:48:21] <ProfSimm> If Haskell never computes ahead of time, just aggregates expressions, does that mean every time a function runs, there's a semantic "copy' of the expression tree of that function
[21:48:45] <raehik1> how should I get those files placed in the sdist?
[21:51:12] <geekosaur> ProfSimm, (a) nothing says it can't compute ahead of time, just that it must have the same outcome as not doing so. otherwise strictness analysis would be forbidden. (b) don't understand what you mean by «semantic "copy"». it's the expression tree itself, no copying needed. purity…
[21:51:55] <geekosaur> but then I rarely have any idea what you're on about; you seem to have some odd notions of how things work in general
[21:52:25] <ProfSimm> geekosaur: yes I do
[21:52:52] <raehik1> another Haskell lib using cbits puts all the headers in extra-source-files. so maybe that's the intended solution! but unexpected
[21:52:53] <ProfSimm> geekosaur: well we have an expression tree, one time you call the function it reduces one way, then another way
[21:54:13] <geekosaur> yes, but it's not substituting the parameter in directly; thatparameter is part of the expression tree (think: APPLY (LAM ...) BINDING ...)
[21:54:47] <ProfSimm> geekosaur: I was thinking substituting directly might be a neat way to have memoization
[21:54:59] <ProfSimm> geekosaur: what about partial application and reduction
[21:55:23] <geekosaur> partial application just means youget another (LAM ...) back
[21:57:09] <geekosaur> not sure what you intend here by reduction, unless you mean what happens when it's fully applied. in that case it still isn't necessarily "reduced", these things happen when the result is demanded
[21:58:49] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:58:53] <geekosaur> so you have a "thunk" which is an (APPLY (LAM ...) BINDING ...) waiting for something to demand the result.
[21:59:17] *** Joins: napping (~brandon@65.128.43.198)
[21:59:21] <geekosaur> (in this case. a CAF can also be a thunk, it just isn't an APPLY)
[22:02:30] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:05:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:07:35] <napping> Does GHC put any useful build hashes into executables, which would be suitable for checking if a serialized Compact was made with the same executable?
[22:11:37] <geekosaur> portably extracting and using such would be an … adventure
[22:16:45] <maerwald> are there any tricks to match on deeply nested ASTs for a particular pattern?
[22:17:30] <maerwald> (SQL AST in this case)
[22:21:17] <[exa]> maerwald: by the "deeply nested AST" you mean basically a small "open" subtree or something more complicated?
[22:21:51] <[exa]> *by the _matching_ on deeply nested AST
[22:21:55] <maerwald> https://hackage.haskell.org/package/postgresql-syntax-0.4.0.2/docs/PostgresqlSyntax-Ast.html
[22:22:19] <maerwald> There are a thousand combinations you can see a table identifier, for example
[22:22:39] <[exa]> u u u uhhhhhhhhhhhh
[22:22:44] <maerwald> gg
[22:23:27] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[22:23:59] <[exa]> ok well, probably depends on the complexity of the query
[22:24:11] <maerwald> the query can be arbitrarily complex :D
[22:24:32] <[exa]> the complexity of the match will then scale with the query complexity :D
[22:24:58] <maerwald> nah, I mean, at some point I'm exhaustive
[22:25:07] <[exa]> anyway, this is going to be ugly even with pretty advanced syb
[22:25:18] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:25:29] <[exa]> do you actually receive the SQL or you generate it?
[22:25:37] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[22:25:53] <maerwald> receive
[22:26:01] <maerwald> and then manipulate
[22:26:08] <[exa]> ok that rules out the possibility to do on a sane-complexity IR
[22:26:13] *** Joins: Macbethwin (~chargen@8.21.8.253)
[22:27:06] <maerwald> it is rather well-defined and not that complicated... replace a table identifier with a subquery and an alias
[22:27:27] <maerwald> in a from clause
[22:27:36] <[exa]> I'd just syb
[22:27:51] <[exa]> sounds reasonable in this case
[22:28:03] *** Quits: mbuf (~Shakthi@136.185.73.48) (Quit: Leaving)
[22:29:16] <maerwald> the readme is empty and points to a non-existing website
[22:29:18] <maerwald> very good
[22:30:09] <[exa]> the main issue is that the SQL model here doesn't look like it consistently lists all possible places where the reference Ident can be a table name, this looks more like you'll just need to list them
[22:32:19] *** Quits: deadmarshal_ (~deadmarsh@95.38.118.21) (Ping timeout: 260 seconds)
[22:32:45] <[exa]> like, IMO it looks like `gmapT` from the original SYB paper would do
[22:32:51] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[22:33:45] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[22:33:57] <[exa]> nowadays it's in uniplate afaik
[22:34:19] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:34:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[22:37:14] <maerwald> your regular haskell lib: no documentation, just some academic papers that you have to search for manually
[22:37:45] *** Joins: vicfred (~vicfred@user/vicfred)
[22:37:58] <maerwald> and people still debate why Haskell is not more popular :D
[22:39:16] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[22:39:21] *** Joins: hololeap (~hololeap@user/hololeap)
[22:39:29] <sm> not all libs are like that. What we need is much better discoverability of libs' doc level and general production-readiness, which will create positive pressure
[22:40:20] <sm> "hackage, show me only class A production-ready libraries!"
[22:40:40] <maerwald> that would be a rather short list mostly comprised of backend libs
[22:40:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[22:41:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:41:54] <sm> I'm not sure how short or long it is right now. That would start changing more quickly..
[22:42:17] <maerwald> sm: https://github.com/haskellfoundation/stability/issues/7
[22:43:55] <sm> thanks. I think in practice it may end up requiring a new hackage.. how's that going Hecate 
[22:45:04] <Hecate> hello
[22:45:27] <Hecate> it's doing well I think
[22:45:33] <Hecate> considering I'm the only one on it :P
[22:46:30] <maerwald> sounds like an excellent burnout rate
[22:46:50] <dminuoso> 20:07:14    maerwald | your regular haskell lib: no documentation, just some academic papers that you have to search for manually
[22:47:12] <dminuoso> You forgot: You have type signatures, but with no description or explanation.
[22:47:27] <maerwald> yeah, types are self-explanatory, right?
[22:47:38] <dminuoso> I guess thats the thing, with some time spent they can be
[22:47:50] <dminuoso> Which results in unfortunate feedback loops
[22:48:10] <sm> Hecate: I think you posted a link recently, could you share again ?
[22:48:15] <dminuoso> If you're sufficiently advanced, types (even those of other peoples libraries) become self-explanatory.
[22:48:27] <maerwald> dminuoso: I don't think so :)
[22:48:48] <geekosaur> only some types are self-explanatory.
[22:48:51] <dminuoso> maerwald: My point rather is, this can easily train experienced Haskellers to not elaborate them, because they might feel they are self-explanatory.
[22:49:02] <dminuoso> Not that its a good idea.
[22:49:24] <maerwald> openFile :: FilePath -> IO Handle <-- I have a thousand questions about what this function does :)
[22:49:58] <dminuoso> You belong to the upper 10% to even know there's more to than just "well it opens a right, right"
[22:50:03] <maerwald> the reason I know what it does is because I read the entire implementation down to the windows IO manager
[22:50:12] <dminuoso> Note, the 10% are from my made up statistics.
[22:51:14] <sm> ah, https://dev.flora.pm
[22:52:18] <sm> showing only the class A production ready packages I see 
[22:52:30] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:52:52] <maerwald> it looks like someone new a thing or two about CSS there
[22:52:56] <maerwald> *knew
[22:54:04] <sm> for pretty CSS you've pretty much got to pick a framework and learn that. (What's playground using ?)
[22:54:13] <maerwald> none
[22:54:32] *** Joins: coot (~coot@213.134.190.95)
[22:54:44] <sm> flora is using tailwindcss it seems
[22:56:19] <sm> I see they call these "UI kits"
[22:56:56] <sm> The main difference between TailwindCSS and Bootstrap is that Tailwind CSS is not a UI kit. Unlike UI kits such as Bootstrap, Bulma, and Foundation, Tailwind CSS doesn’t have a default theme or built-in UI components. Instead, it comes with predesigned widgets you can use to build your site from scratch. Bootstrap is known for its responsiveness, whereas proponents of Tailwind CSS typically value the framework’s customizability.
[22:57:42] <maerwald> did you copy paste that?
[22:57:55] <sm> yup, from the internet
[22:58:02] <maerwald> amazing
[22:58:13] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:58:40] *** Macbethwin is now known as Chargen
[22:58:44] <sm> whatever ui kit/css framework you pick, it must at minimum be responsive enough that your thing just works on big and small screens
[22:58:52] <ario> i've been meaning to give tailwind a try
[22:59:07] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[22:59:10] <maerwald> sm: playground works on mobile I think
[23:00:12] <sm> maerwald: I haven't tried, but without a framework ensuring this it'll probably seem to work but you'll find problems sooner or later
[23:00:30] <maerwald> now I feel you're selling me tech :D
[23:01:26] <sm> well I am, this is a case where using some tech is justified IMHO
[23:01:46] <maerwald> I think tomsmeding is a fan of simplicity
[23:01:50] <sm> trying to make something (a) pretty and (b) looking right on all the wacky clients out there is a futile task
[23:02:03] <sm> by yourself with no framework, I mean
[23:04:08] <tomsmeding> maerwald: yes
[23:04:47] <tomsmeding> I'm not sure leaving responsiveness of a playground to a css framework is a good idea
[23:05:18] <sm> and when I say "framework", I'm thinking "include one tiny css file, *maybe* one js file, and enjoy massive benefits"
[23:05:27] <tomsmeding> it might work great for an article, but for this playground thing I'd not want to be at the mercy of the layout suggested by some framework
[23:05:52] <tomsmeding> the main pastebin site uses purecss, but that doesn't do too much responsiveness really
[23:05:58] <tomsmeding> though I guess it does some
[23:06:03] <tomsmeding> depending on what you call "responsive"
[23:06:59] <sm> these are lightweight things I'm talking about, not heavy handed. You use just the bits you want, usually #1 is a bit of magic to adjust layout when screens are small so you don't have to think about, implement, debug, support that yourself
[23:07:33] <tomsmeding> sm: what layout would you want to be adjusted how for the playground?
[23:07:41] <sm> so yes it's a tradeoff, just MHO that it's a good one but YMMV
[23:08:07] *** Joins: alp (~alp@user/alp)
[23:08:11] * sm tries it 
[23:08:23] <tomsmeding> (I'm not against including tech, I'm just unwilling to introduce tech for the sake of it, or when there's a similarly decent solution without said tech)
[23:08:46] *** Joins: Pickchea (~private@user/pickchea)
[23:09:26] <hololeap> have you guys tried using elm-ui? just curious
[23:09:30] <sm> well, look at it. On an iphone SE you can see "putStrLn" and that's about it
[23:09:39] *** Joins: modnar (~modnar@shell.sonic.net)
[23:09:59] <sm> I think apps would typically replace a split screen with a full screen, or horizontal split in this case
[23:10:11] <tomsmeding> sm: right, that's what I was thinking as well
[23:10:25] <tomsmeding> and I'm damn sure a framework is not going to do that out of the box here for you
[23:10:26] <sm> and a good ui kit will do that sort of thing for you automatically
[23:10:29] <maerwald> we could use obelisk to build an app :D
[23:10:46] <dminuoso> Can we go back to GUI clients? Qt applications were *fine*, extremely snappy and have had nice animations for decades, oh and all the features are controllable by the software author.
[23:10:51] <dminuoso> Web has *none* of these.
[23:10:52] <tomsmeding> especially given that we want heights to be stable, scrolling output within the columns' containers, and a loading spinner that doesn't resize stuff
[23:11:02] <tomsmeding> dminuoso: yes lol
[23:11:17] <tomsmeding> except then nobody would use it, because if they need to install a local app for a playground, they could just as well run ghcup
[23:12:24] <hololeap> dminuoso: talking about types being self-explanitory: https://hackage.haskell.org/package/reflex-0.8.2.0/docs/Reflex-EventWriter-Base.html#v:sequenceDMapWithAdjustEventWriterTWith
[23:12:34] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:12:43] <geekosaur> winghci still needs a replacement (and a linux/osx port :)
[23:13:17] <maerwald> hololeap: I like the patch type lol
[23:14:01] <dminuoso> hololeap: It's self evident. Do you really want to display a lack of Haskellsauce by asking me to explain that type?
[23:14:03] *** Joins: coot (~coot@213.134.190.95)
[23:14:25] <sm> tomsmeding: https://hackmd.io should be a decent example. On a small screen, they drop the split screen mode and you toggle between view/edit
[23:14:25] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:14:28] <tomsmeding> lol that type is funny
[23:15:02] <maerwald> the function name could be straight out of a Java library
[23:17:53] <dminuoso> hololeap: But yeah, that one is quite terrible. I recall one of the type safe SQL libraries having quite similar complicated types
[23:17:58] <dminuoso> I just dont recall which one that was
[23:18:25] <dminuoso> Ah I think it was beam
[23:18:57] <dminuoso> https://hackage.haskell.org/package/beam-core-0.9.2.1/docs/Database-Beam-Query.html#v:manyToMany_
[23:19:34] <dminuoso> At that point, why not go all the way and specify the sql queries at the type level. It's beyond insanity already
[23:19:35] <maerwald> and you really want to give US dependent types? :)
[23:20:31] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[23:22:27] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:22:34] <sm> Hecate: did you rule out sqlite for flora ?
[23:24:13] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:24:49] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[23:27:45] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:29:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:33:20] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:35:51] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[23:38:34] *** Joins: modnar (~modnar@shell.sonic.net)
[23:40:52] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[23:41:41] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:48:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[23:48:53] <Hecate> sm: yes
[23:49:31] <sm> I'm interested to know the reason.. just because the postgres requirement shrinks the pool of potential contributors
[23:49:44] <Hecate> sm: search doesn't work yet but most UI elements should: https://dev.flora.pm/packages/@haskell/base/4.16.0.0
[23:49:54] <sm> (and I have often thought of using sqlite for such apps)
[23:50:01] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4.1)
[23:50:24] <Hecate> sm: yes but if it rules out the people who are comfortable with the SQLite type system it's okay
[23:50:25] <sm> ah, there's a package. I wasn't able to find any so thought it was empty
[23:50:27] <Hecate> https://twitter.com/mitchellsalad/status/1361022421021696003
[23:50:42] <Hecate> sm: yeah I haven't implemented some UI elements
[23:50:51] <Hecate> https://dev.flora.pm/categories
[23:51:01] <Hecate> again, if you find something that doesn't work, it's normal
[23:51:07] <Hecate> it's not even an MVP
[23:52:31] <Hecate> sm: also it's pretty hard to have a read-replica with sqlite :-P
[23:52:52] <Hecate> and multiple applicative instances
[23:53:04] <sm> my current plan, should I ever be asked to make a scalable new web app, is to use persistent + sqlite at least for local dev with the option to switch to postgres in production
[23:53:28] <sm> I don't see sqlite's lesser type safety as an issue
[23:53:51] <Hecate> it's your right
[23:54:24] <Hecate> sm: It doesn't work 
[23:54:44] <Hecate> because I can't test search locally then :P
[23:54:58] <Hecate> or I have to write in the subset of SQL that is supported by both Postgres and SQL
[23:55:01] <Hecate> *SQLite
[23:55:03] <Hecate> so no trigrams
[23:55:10] <sm> because with all the structure and guidance provided by the haskell layer, I can't see how I'd really screw up sqlite data in practice. Maybe I'm not seeing it
[23:56:34] <sm> Hecate: yes, I'd expect to be mostly using persistent / esqueleto for queries, and any lower-level ones would have to carefully be compatible with both dbs
[23:56:42] <sm> I saw you're using your own pg-entity ?
[23:56:47] <Hecate> yeah
[23:57:06] <sm> ah, https://hackage.haskell.org/package/pg-entity. Nice
[23:57:16] <Hecate> yup'
[23:57:24] <Hecate> although I ought to make a release
[23:58:23] <Hecate> sm: yeah so in the end I get no trigrams and no JSON operators
[23:58:37] <Hecate> I feel like I deserve a better experience than that :-P
