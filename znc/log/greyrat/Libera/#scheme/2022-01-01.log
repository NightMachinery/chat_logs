[00:17:58] *** Joins: karlosz (~karlosz@136.56.98.53)
[00:20:59] *** Joins: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee)
[00:23:41] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Client closed)
[00:24:05] *** teiresias2 is now known as teiresias
[00:31:56] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[00:40:37] *** Quits: Darkcoal (~user@167.86.137.72) (Quit: Darkcoal)
[00:41:00] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[00:45:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:51:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:53:53] *** Joins: Darkcoal (~user@167.86.137.72)
[00:56:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[00:57:16] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:58:56] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[00:59:09] *** Joins: madage (~madage@user/madage)
[01:09:41] *** Joins: livoreno (~livoreno@user/notzmv)
[01:27:30] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Client closed)
[01:28:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[01:30:36] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:31:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[01:32:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:34:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:35:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:38:50] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:39:05] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:50:24] *** Quits: Darkcoal (~user@167.86.137.72) (Quit: Darkcoal)
[01:50:31] *** Joins: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb)
[01:50:37] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[01:52:11] *** Parts: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) ()
[01:57:26] *** Quits: Darkcoal (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb) (Ping timeout: 268 seconds)
[01:59:02] *** Joins: Darkcoal (~user@167.86.137.72)
[02:02:24] *** Joins: notzmv (~zmv@user/notzmv)
[02:30:07] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[02:37:33] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[02:38:12] *** Joins: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:fc27:6bd6:9b6c:1b57)
[02:39:28] *** Joins: paul_j` (~user@67.26.169.217.in-addr.arpa)
[02:41:17] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[02:41:22] *** Joins: rudybot_ (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[02:41:45] *** Joins: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net)
[02:42:28] *** Joins: gnomon_ (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[02:42:53] *** Joins: Darkcoal_ (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb)
[02:43:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[02:47:27] *** Quits: Darkcoal (~user@167.86.137.72) (*.net *.split)
[02:47:28] *** Quits: python476 (~user@88.160.31.174) (*.net *.split)
[02:47:28] *** Quits: schulze (~schulze@dynamic-077-001-014-030.77.1.pool.telefonica.de) (*.net *.split)
[02:47:28] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[02:47:28] *** Quits: nalaginrut (~nalaginru@183.11.131.186) (*.net *.split)
[02:47:28] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[02:47:28] *** Quits: x88x88x (~x88x88x@149.28.53.172) (*.net *.split)
[02:47:28] *** Quits: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de) (*.net *.split)
[02:47:28] *** Quits: daviid (~user@179.210.52.91) (*.net *.split)
[02:47:28] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (*.net *.split)
[02:47:28] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[02:47:28] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[02:47:28] *** Quits: f8l (~f8l@37.228.213.3) (*.net *.split)
[02:47:28] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[02:47:28] *** Quits: light (~light@user/light) (*.net *.split)
[02:47:28] *** Quits: akarle (~akarle@user/akarle) (*.net *.split)
[02:47:28] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[02:47:28] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[02:47:28] *** Quits: groomvy (sid62069@hampstead.irccloud.com) (*.net *.split)
[02:47:29] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (*.net *.split)
[02:47:29] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[02:47:29] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[02:47:29] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[02:47:29] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[02:47:29] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[02:47:57] *** Quits: Darkcoal_ (~user@2001:16a2:7a1f:b00:ca86:5f6b:1065:2cb) (Ping timeout: 240 seconds)
[02:50:13] *** Joins: Darkcoal_ (~user@167.86.137.72)
[02:50:25] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:50:25] *** Joins: daviid` (~user@179.210.52.91)
[02:50:25] *** Joins: stultulo (~f8l@37.228.213.3)
[02:50:25] *** Joins: python476 (~user@88.160.31.174)
[02:50:25] *** Joins: hexology (~hexology@user/hexology)
[02:50:25] *** Joins: nalaginrut (~nalaginru@183.11.131.186)
[02:50:25] *** Joins: DaPinkOne (~Dap@user/dap)
[02:50:25] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[02:50:25] *** Joins: psf (~pi@206.55.172.18)
[02:50:25] *** Joins: light (~light@user/light)
[02:50:25] *** Joins: akarle (~akarle@user/akarle)
[02:50:25] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[02:50:25] *** Joins: groomvy (sid62069@hampstead.irccloud.com)
[02:50:25] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[02:50:25] *** Joins: Oxyd (~oxyd@user/oxyd)
[02:50:25] *** Joins: nisstyre (~wes@user/nisstyre)
[02:51:45] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[02:52:15] *** Joins: nmeum (~nmeum@barium.8pit.net)
[03:02:41] <amazigh> happy new year all!
[03:09:08] *** Parts: stultulo (~f8l@37.228.213.3) ()
[03:09:48] *** Joins: f8l (~f8l@37.228.213.3)
[03:12:21] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[03:18:30] *** Quits: f8l (~f8l@37.228.213.3) (Quit: WeeChat 3.3)
[03:18:48] *** Joins: f8l (~f8l@37.228.213.3)
[03:19:44] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:21:18] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Remote host closed the connection)
[03:21:34] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[03:27:32] *** Quits: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:41:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:45:14] *** Joins: karlosz (~karlosz@136.56.98.53)
[03:47:45] *** Quits: Perryman (~perryman@user/perryman) (Remote host closed the connection)
[03:50:47] *** Joins: Perryman (~perryman@user/perryman)
[03:51:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:51:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:57:31] <Spawns_Carpeting> is there any books or websites that cover in great detail how to implement your own scheme from scratch?
[03:57:47] <Spawns_Carpeting> also happy new year
[04:00:01] <edgar-rft> I think this is the usual recommendation -> https://www.goodreads.com/book/show/1168500.LISP_in_Small_Pieces
[04:00:34] <Spawns_Carpeting> i would prefer something that is free
[04:00:47] <Spawns_Carpeting> i do not currently have very much money
[04:02:31] <edgar-rft> There's MAL, the "Make A Lisp" project somewhere on GitHub, where people have implemented Lisp in various other programming languages 
[04:03:31] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[04:04:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:04:23] <light> Spawns_Carpeting: Essentials of Programming Languages
[04:04:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:17:08] <elly> wow, the ebook versions of LiSP are like, $100
[04:18:58] <edgar-rft> tell them you want to pay in small pieces :-)
[04:20:24] *** Joins: Everything (~Everythin@37.115.210.35)
[04:26:01] <amazigh> ^^'
[04:26:25] <amazigh> Spawns_Carpeting: I have a very minimal scheme that compiles to JavaScript
[04:26:28] <amazigh> would that help?
[04:26:37] <amazigh> at least to get started?
[04:26:45] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[04:27:28] <amazigh> the code is at https://git.sr.ht/~amirouche/ruse-javascript
[04:27:32] <amazigh> let me check the code
[04:28:15] <tatsumaru> hey guys, i just read that openAI's GPT-3 is capable of translating source code from one programming language to another. does this mean that someone could write a scheme and just translate all the python libs they need into said scheme in order to get fast traction with that language?
[04:28:42] <aeth> no
[04:28:45] <amazigh> Spawns_Carpeting: that is the interesting file and branch: https://git.sr.ht/~amirouche/ruse-javascript/tree/wasm2/item/scratch.scm
[04:29:17] <aeth> tatsumaru: even if that claim was true, it would only work on the most popular programming languages. There isn't even one "Scheme", there's dozens of incompatible dialects.
[04:29:32] <aeth> tatsumaru: Just like how machine learning isn't too good at translating to/from Latin
[04:29:41] <amazigh> Spawns_Carpeting: go through this https://github.com/akeep/scheme-to-c
[04:30:25] <tatsumaru> aeth: but you could hypothetically translate from one language that doesn't have guaranteed bytecode compatibility like python into something like java that has guaranteed bytecode compatibility for use with clojure?
[04:30:30] <aeth> (Actually, Scots would be a better analogy because it checks both boxes: relatively obscure and dozens of incompatible dialects instead of a uniform language)
[04:31:40] <amazigh> btw LiSP is not super great read imo, could not finish it.
[04:31:49] <amazigh> not anymore at least.
[04:31:53] <aeth> tatsumaru: cleaning up subtle mistakes in machine-generated code (which isn't a new thing) is probably going to take about as long as translating it by hand
[04:32:05] <aeth> "better" AI just makes the mistakes more subtle
[04:32:12] <aeth> but without strong AI you're not going to get it to be flawless
[04:32:13] *** Quits: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:fc27:6bd6:9b6c:1b57) (Ping timeout: 268 seconds)
[04:32:40] <tatsumaru> i see, thanks
[04:32:47] <aeth> imo of course
[04:32:51] <amazigh> +1
[04:33:48] <aeth> the way you generally translate a library is gradually, with runtime compatibility
[04:33:52] <aeth> e.g. C/C++
[04:33:56] <aeth> afaik
[04:34:06] <aeth> (that is, slowly turning C into C++ is easy)
[04:36:14] <amazigh> they are companies specialising in translating C to C++ or Cobol to Java
[04:36:37] <amazigh> I know one company that does that
[04:36:49] <amazigh> never seen the work done first hand
[04:37:22] <tatsumaru> if you are doing it by hand like that isn't it simply easier to just write it from scratch?
[04:37:36] <amazigh> it is not done by hand but by a program
[04:37:46] <amazigh> apparantly no. That's what the company claims.
[04:38:39] <amazigh> The thing with COBOL is nobody learns it anymore, so it is apparantly better to grab a progoram translate it to Java, and I guess fix the Java code
[04:39:48] <tatsumaru> amazigh: did you know that most of US money runs on cobol mainframes? banks/federal reserve
[04:43:02] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[04:43:09] <aeth> amazigh: My guess is that you generate an unidiomatic C program that's binary compatible with regular C programs and slowly rewrite it
[04:43:30] <aeth> As opposed to machine learning, which will produce something that looks correct and idiomatic, but might subtly differ from the original program
[04:43:53] <aeth> s/C program/Java program/
[04:44:56] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 245 seconds)
[04:45:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:49:00] <Zipheir> Spawns_Carpeting: Here's a good one.  It's a compiler, not an interpreter, but it's easy enough to understand. https://matt.might.net/articles/compiling-scheme-to-c/
[04:49:52] <Zipheir> NB: No tail-call optimization.
[04:52:23] <amazigh> aeth: yes, anyway GPT-3 has been disappointing imo
[04:52:46] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 260 seconds)
[04:53:13] *** Joins: m455 (~m455@user/m455)
[04:53:27] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[04:55:05] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 256 seconds)
[04:57:24] *** Joins: livoreno (~livoreno@user/notzmv)
[05:04:35] <Zipheir> Also: Happy belated new year UTC!
[05:04:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:05:46] <Zipheir> LiSP is a very hard recommendation.  Not at all a book for getting started implementing Scheme, IMO.
[05:06:22] <Zipheir> Ah, here it is.
[05:06:25] <Zipheir> Spawns_Carpeting: http://michaux.ca/articles/scheme-from-scratch-introduction
[05:07:08] <Zipheir> That's what I learned from when trying to understand Scheme interpreters in lower-level languages.
[05:10:32] <s-liao> Zipheir is possible to remove r7rs dependence from srfi-207 implementation?
[05:14:30] <Zipheir> s-liao: Yes, but it would be a lot of work.  We would have to replace all of the bytevector-* stuff with u8vector-* equivalents.  So the egg would depend on srfi-160, then, probably.
[05:14:52] <Zipheir> The r7rs egg has good support from the CHICKEN developers, too.
[05:15:45] <Zipheir> s-liao: Why do you want to get rid of the r7rs dep.?
[05:16:54] <s-liao> Yes, That is what I am looking for. I would like figure out how much implementation have been done in r7rs egg.
[05:17:12] <s-liao> That is my next task.
[05:17:30] <Zipheir> OK.
[05:19:26] *** Quits: Darkcoal_ (~user@167.86.137.72) (Quit: Darkcoal_)
[05:21:23] <amazigh> ahah I launched the docker build for twelve scheme implementation to test gambit, but gambit was using a 2 month old checkout 
[05:21:32] <amazigh> I did the mistake twice
[05:21:52] <amazigh> yet another building, at least my cores will be useful for something.
[05:22:17] <amazigh> it is almost freezing, it seems like spring :p
[05:22:23] <amazigh> sorry bad joke
[05:22:31] <amazigh> edgar-rft: teach me jokes plz :)
[05:25:35] <s-liao> Zipheir one more question, have you been coding on js before?
[05:27:29] <s-liao> I saw your code. the function signature you have, it has "undefined"Â  such this.
[05:28:27] <s-liao> It likes you have such experience on the JavaScript.
[05:28:34] <Zipheir> s-liao: I rarely write any JS.  'undefined' is what (chicken type) calls "the unspecifed value".
[05:28:59] <Zipheir> So, for-each, display, etc. all return "undefined" in CHICKEN.
[05:29:36] <s-liao> Yes. it is.
[05:30:17] <Zipheir> I don't think it's a good name.  Usually when something is "undefined', things blow up or demons fly out of your nose.
[05:30:34] <s-liao> I was learning JS for a while like a month ago. I messed up with it.
[05:31:37] <amazigh> undefined in js is not a good habit
[05:31:44] <amazigh> either, same as scheme
[05:32:43] <Zipheir> s-liao: Did you like it?
[05:32:50] <Zipheir> amazigh: Undefined or unspecified?
[05:34:18] <Zipheir> Unspecified values are very common in Scheme (somewhat unfortunately, IMO).
[05:39:27] <s-liao> I thought that your guys have experience on JavaScript, I am trying to figure out to build the portalÂ  like https://caniuse.com/Â  for scheme knowedge
[05:42:56] <s-liao> Undefined is Okay. I have not thought too much. As before I was coding in the java. I can not figure out one value, it is not null andÂ  "" , but representation undefined case. Maybe that is it. or Unspecified Undefined .
[05:44:54] <Zipheir> I know there are many, many people in #scheme with JS knowledge.  Some might be willing to help out.
[05:46:41] <s-liao> Yes.
[05:48:11] <Zipheir> There's also https://en.wikibooks.org/wiki/Scheme_Programming , which I mean to get (back) to work on sometime soonish.
[05:48:20] <s-liao> It like https://caniuse.com/flexbox-gap, we come into one srfi or one feature, all the knowledge for user to easy navigate
[05:50:45] <s-liao> And the different release in each implementation as well.
[05:54:25] <amazigh> sorry, I am confusing.
[05:55:13] <s-liao> ?
[05:56:55] <s-liao> Yes, amazigh you have pre-srfi about the web UI before.
[05:57:37] <s-liao> Do you have some recommend for building the portal like https://caniuse.com/Â  for scheme knowedge
[05:58:08] <s-liao> or suggestion.
[05:59:10] <amazigh> s-liao: I started one, with chicken-spock
[05:59:29] <Zipheir> Good use for spock.
[05:59:46] <amazigh> but honestly, the best use of our time regarding portable stuff, I think is getting together portable libraries or programs.
[06:00:05] <amazigh> (and possibly a linter)
[06:00:25] <amazigh> I am not even sure what do to, I promised myself, not to make plans this year, and just code.
[06:01:07] <amazigh> I mean, we had enough high level libraries in scheme-live, it would be clear what is portable
[06:01:44] <amazigh> And push piece wise stuff to SRFI when we feel it is ready.
[06:02:00] <amazigh> somewhat superseeding the pre-srfi org
[06:02:59] <amazigh> I started with another JSON library supported by 12 scheme :>
[06:03:17] <s-liao> That is cool.
[06:03:53] <amazigh> :)
[06:04:07] <amazigh> but it is still fuzzy what the point is
[06:04:20] <amazigh> (I take the risk to say that even if it might be a downer)
[06:04:52] <Zipheir> Hey, it's a new year.  No downers, please.
[06:05:17] <amazigh> 2022 is the year of scheme... in the editor!
[06:05:34] <s-liao> Can I stupid question about json library?
[06:05:39] <amazigh> sure
[06:05:45] <amazigh> there is not stupid question.
[06:05:50] <s-liao> Why I rarely see the validation for json file?
[06:05:52] <amazigh> s/not/no/
[06:06:11] <amazigh> like XML schemas?
[06:06:20] <s-liao> Yes.
[06:06:26] <amazigh> ah
[06:06:55] <amazigh> Sure thing validation is required. I rarely see it either
[06:07:35] <amazigh> The point of XML / JSON Schema is to avoid everybody rolling their own validation machinery
[06:07:45] <amazigh> basically factoring and making it easier to interop
[06:08:38] <amazigh> The thing is there is less *big* JSON schemas to validate, everything is ad-hoc
[06:09:18] <amazigh> unlike XML, they started from the start that they wanted to have various documents that conform to a particular schema, hence the need from the start for a shared validation logic
[06:09:18] <s-liao> When are we talking xml/html. they always are talking validation for them.
[06:09:52] <amazigh> That is what I try to explain, there is little interop around JSON, hence no need for much validation
[06:09:59] <amazigh> but JSON Schema is a standard.
[06:10:48] <s-liao> Like http://json-schema.org/
[06:10:55] <Zipheir> Yes.
[06:13:45] <s-liao> But what json file is almost like js file, what is the validation for the subset of js file?
[06:14:36] <s-liao> the validation is for the reader of js file?
[06:15:06] <amazigh> the goal is the make sure the JSON file has the correct shape
[06:15:13] <amazigh> that input validation
[06:15:16] <amazigh> that is input validation
[06:17:11] <s-liao> Do we have the same concept in the scheme?
[06:18:09] <Zipheir> S-exp validation?
[06:19:52] <amazigh> There is no formal spec yet
[06:20:05] <s-liao> https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
[06:20:28] <Zipheir> (read) does Scheme validation.
[06:26:35] <s-liao> Yes. Read in scheme and Elisp are super security in term of the input validation.
[06:30:00] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[06:31:51] <Zipheir> Haha.
[06:34:49] *** Quits: nalaginrut (~nalaginru@183.11.131.186) (Ping timeout: 256 seconds)
[06:35:03] <wasamasa> OWASP is not concerned with correctness of code
[06:35:34] <wasamasa> they just provide checklists what to avoid so that you don't get pwned or yelled at by your auditor
[06:37:09] <Zipheir> What's the point of performing input validation on a program?  You're screwed anyway if you're executing something from an untrusted source.
[06:37:36] <wasamasa> yes
[06:37:50] <wasamasa> it's misleading to talk about JSON as a JS subset
[06:38:02] <wasamasa> it isn't even
[06:38:17] <wasamasa> it very much looks like it (which makes it easier to think about)
[06:40:19] *** Joins: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee)
[06:41:39] <s-liao> wasamasa yes. OWASP is just a cheatsheets. I thought that youÂ  probly have something to say about the input validation.
[06:41:53] <wasamasa> ultimately, JSON is an underspecified serialization format and JS is a turing-complete language
[06:42:16] <wasamasa> OWASP reminds you that you shouldn't do stuff like using eval to parse JSON (because then you'd treat it like JS, not JSON)
[06:42:29] <wasamasa> (yes, people did that)
[06:42:42] <wasamasa> (yes, there's intentional workarounds to break code doing that)
[06:43:09] <wasamasa> I don't really have anything to say here
[06:43:36] <Zipheir> "I have nothing to say.  And I am saying it." --John Cage
[06:43:57] <wasamasa> the entire reason that input validation avoids unexpected behavior is because it forces you to be explicit about what expected behavior should be
[06:44:53] <wasamasa> OWASP teaches you which approaches work better and what trade-offs they have, but it doesn't teach you how to engineer a correct program
[06:45:30] <Zipheir> Sounds a bit like a type system.
[06:45:39] <wasamasa> yeah
[06:46:10] <wasamasa> it's quite interesting how several classes of vulnerabilities just disappear if you introduce formal methods into your code
[06:49:02] <s-liao> which one is more close to the serialization process?
[06:50:19] <wasamasa> I need more context to answer that
[06:51:13] <s-liao> Yes. Like the electricity off, what would happen during the application is running.
[06:51:42] <wasamasa> that doesn't help me figuring out what you meant to say
[06:52:29] <wasamasa> anyway, it's late
[06:53:38] <s-liao> the electricity off suddenly during the application is running, what is living objects in the application. serialization object in the disk.
[06:53:49] <s-liao> Take your time.
[06:55:28] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[06:56:40] *** Joins: nalaginrut (~nalaginru@183.11.131.186)
[07:10:06] <s-liao> What I mean is that JSON is potential for the serialization format, but it is still in the phrase, serialize JS object.
[07:11:51] <s-liao> And also the fact, there is not any eval to parse JSON file.
[07:13:07] <s-liao> I mean that from the concept point view, people can do whatever they want.
[07:13:44] *** Quits: taylan (~taylan@user/taylan) (Quit: Leaving)
[07:22:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:38:25] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 250 seconds)
[07:42:13] <s-liao> I mean that from the concept point view, but people can do whatever they want.
[07:43:01] *** Joins: taylan (~taylan@user/taylan)
[07:55:45] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:58:12] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:05:42] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[08:10:23] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:26:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:30:22] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[08:32:02] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:36:39] *** Quits: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:43:00] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[08:43:53] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[08:44:46] *** Joins: m455 (~m455@user/m455)
[08:48:00] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[08:59:39] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[09:15:32] *** Joins: klovett (~klovett@107.115.32.130)
[09:18:37] *** Quits: klovett_ (~klovett@107.115.32.130) (Ping timeout: 240 seconds)
[10:00:05] *** Quits: livoreno (~livoreno@user/notzmv) (Quit: Quit)
[10:00:23] *** Joins: livoreno (~livoreno@user/notzmv)
[10:42:18] *** Joins: catonano (~catonano@net-93-148-86-201.cust.dsl.teletu.it)
[10:42:53] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:47:42] *** Quits: catonano (~catonano@net-93-148-86-201.cust.dsl.teletu.it) (Quit: catonano)
[10:49:20] *** Joins: catonano (~catonano@net-93-148-86-201.cust.dsl.teletu.it)
[10:50:59] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[10:52:00] *** Joins: hexology (~hexology@user/hexology)
[10:53:11] *** Quits: catonano (~catonano@net-93-148-86-201.cust.dsl.teletu.it) (Client Quit)
[11:04:35] *** Joins: mns_ (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[11:06:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:06:49] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[11:22:18] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:32:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[11:36:46] *** Joins: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi)
[11:45:43] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[12:24:14] *** Joins: hexology (~hexology@user/hexology)
[12:32:09] *** Joins: klovett_ (~klovett@107.115.32.130)
[12:35:13] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[12:45:10] *** Joins: karlosz (~karlosz@136.56.98.53)
[13:08:56] *** Joins: schulze (~schulze@dynamic-077-001-121-162.77.1.pool.telefonica.de)
[13:11:30] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[13:13:40] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[13:22:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:29:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:32:09] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[13:32:42] <tatsumaru> hey everyone, is there any well-developed scheme or lisp which is suitable for embedded programming?
[13:33:49] <sham1> Pre-scheme?
[13:33:58] *** Joins: rgherdt__ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[13:47:08] <s-liao> Where is Pre-scheme?
[13:48:34] <dpk> define 'embedded' in your case
[13:50:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:54:57] <amazigh> There is lambda chip
[13:55:14] <amazigh> https://lambdachip.com/index/
[13:55:24] <amazigh> tho, good question, it depends what embedded means
[13:59:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:00:08] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:00:09] <tatsumaru> dpk: amazigh: for writing firmware for biomedical devices
[14:04:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:07:49] <edgar-rft> embedded programming is when you're lying in a bed while programming, everybody knows that :-)
[14:08:23] <tatsumaru> edgar-rft: isn't that just called sleeping
[14:12:49] <amazigh> ah ah
[14:12:51] <amazigh> :)
[14:19:17] <dpk> armpit scheme perhaps
[14:19:35] <dpk> http://armpit.sourceforge.net
[14:28:25] <wasamasa> tatsumaru: lol, well-developed
[14:28:42] <wasamasa> tatsumaru: no, you'll most likely find some one person project for a very particular microcontroller
[14:29:08] <wasamasa> tatsumaru: have you considered using forth instead?
[14:31:46] <tatsumaru> wasamasa: I am not familiar with forth. what's great about it?
[14:31:58] <wasamasa> it is stupidly simple
[14:32:04] <wasamasa> it's friendly to hardware
[14:32:15] <wasamasa> it gives you interactive development
[14:32:31] <wasamasa> implementing your own forth is way easier than implementing your own scheme
[14:34:07] <tatsumaru> wasamasa: lol have you seen this: http://collapseos.org/
[14:34:11] <wasamasa> yes
[14:34:22] <wasamasa> it's been a while
[14:34:34] <wasamasa> apparently it's done
[14:34:38] <wasamasa> anyway, forth has its downsides
[14:34:47] <wasamasa> code tends to be unreadable
[14:34:56] <wasamasa> I don't like thinking in terms of stack operations
[14:35:19] <wasamasa> the idiomatic forth problem solving approach is to just bludgeon the problem into something simpler
[14:36:35] <wasamasa> http://yosefk.com/blog/my-history-with-forth-stack-machines.html
[14:38:37] <wasamasa> I haven't tried forth yet, but I find it interesting nonetheless, especially when it comes to the hardware domain
[14:39:18] <wasamasa> it's one of the few other languages rivaling scheme in simplicity and learning value
[14:53:46] <tohoyn> I have sometimes used HP48 calculator, which uses Forth. It was cool.
[14:54:08] <tohoyn> I think Forth is very good for calculators.
[14:58:06] <mdhughes> There's Loko Scheme https://scheme.fail 
[14:59:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:05:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:06:53] *** Joins: seninha (~seninha@user/seninha)
[15:16:50] *** Quits: rgherdt__ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:18:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8554:afc8:ad1a:43cc)
[15:32:03] *** Quits: gnomon_ (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[15:32:17] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[15:55:10] <sham1> I don't think HP calculators ever used Forth, but they did do RPN
[16:08:12] <tohoyn> anyway, RPN is better than the conventional mathematical notation in calculators
[16:17:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:31:53] <sham1> Well it matches the way the hardware does the operations. Well, ish. At least the way a stack machine would, but of course conversation between that semantic representation and doing stuff with register machines is possible and done with quite some frequency
[16:52:45] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Read error: Connection reset by peer)
[16:52:59] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[16:52:59] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[16:52:59] *** Joins: turlando (~turlando@user/turlando)
[16:58:51] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[17:06:05] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[17:19:23] <lagash> sham1: yeah I think that's correct, HP calcs used a "Forth-like" language but it certainly wasn't FORTH
[17:30:02] *** Joins: s-liao20 (~s-liao@101.86.96.21)
[17:30:30] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:32:17] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[17:33:02] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[17:37:22] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[17:43:31] *** Joins: civodul (~user@guix/contributor/civodul)
[18:01:52] *** Quits: s-liao20 (~s-liao@101.86.96.21) (Quit: Client closed)
[18:27:44] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[18:29:17] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[19:06:03] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[19:34:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:34:43] *** Joins: mwette (~user@64-52-176-132.championbroadband.com)
[19:35:58] *** Joins: aeth (~aeth@user/aeth)
[19:48:53] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Quit: Leaving.)
[20:23:04] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[20:24:39] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Ping timeout: 276 seconds)
[20:40:43] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[20:50:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3403:156c:961e:b2fe)
[20:50:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3403:156c:961e:b2fe) (Changing host)
[20:50:12] *** Joins: skapata (~Skapata@user/skapata)
[21:00:39] *** Joins: Avichi (~Avichi@lithe.xs4all.nl)
[21:14:14] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[21:15:02] *** Joins: karlosz (~karlosz@136.56.98.53)
[21:30:09] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[21:33:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[21:35:03] *** Joins: aeth (~aeth@user/aeth)
[21:49:07] *** Quits: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi) (Quit: Leaving)
[22:17:14] *** Quits: mwette (~user@64-52-176-132.championbroadband.com) (Quit: ERC (IRC client for Emacs 27.1))
[22:24:43] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[22:25:49] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:39:42] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:42:12] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[22:43:06] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[22:51:13] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:05:55] *** Quits: klovett_ (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[23:20:25] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:21:07] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:32:45] <mdhughes> Back in the day I made a Java emulator for the HP-48's language.
[23:33:16] <mdhughes> It's great for doing quick math, it's not fun to program anything bigger in, even if the HP-48 had the memory or I/O for it.
[23:33:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[23:38:54] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: Happy new year!)
[23:50:57] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Remote host closed the connection)
[23:51:14] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:52:57] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[23:56:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:58:35] *** Joins: aeth (~aeth@user/aeth)
[23:58:35] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
