[00:03:01] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 256 seconds)
[00:03:21] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[00:04:12] *** Joins: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de)
[00:33:40] *** Joins: kstatz12 (~karl.stat@50-105-191-199.snpr.wi.frontiernet.net)
[00:51:44] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:1c60:7a3d:d99c:bdd7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:02] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Ping timeout: 240 seconds)
[01:19:50] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 268 seconds)
[01:56:46] *** Joins: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de)
[02:39:57] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:01:05] *** Quits: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99) (Quit: WeeChat 3.3)
[03:09:00] *** Quits: kstatz12 (~karl.stat@50-105-191-199.snpr.wi.frontiernet.net) (Ping timeout: 268 seconds)
[03:15:55] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[04:06:14] *** Quits: damjan (~damjan@user/damjan) (Quit: bye)
[04:07:37] *** Joins: damjan (~damjan@user/damjan)
[04:44:27] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:33:47] *** Quits: damjan (~damjan@user/damjan) (Quit: bye)
[05:34:53] *** Joins: damjan (~damjan@user/damjan)
[06:26:19] *** Quits: hlieberman__ (sid17492@id-17492.tinside.irccloud.com) (Ping timeout: 250 seconds)
[06:29:30] *** Joins: hlieberman__ (sid17492@id-17492.tinside.irccloud.com)
[06:49:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[06:51:02] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[06:52:57] *** Joins: jespada (~jespada@87.74.33.157)
[07:30:43] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[08:38:48] *** Quits: BadRequest (uid3514@user/badrequest) (Quit: Connection closed for inactivity)
[08:58:06] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[09:36:50] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[09:48:12] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Ping timeout: 240 seconds)
[09:50:13] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[11:21:37] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[12:13:00] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:22:08] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[12:25:23] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:24] *** Joins: mexen (uid495612@user/mexen)
[12:33:07] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:35:18] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[12:38:14] *** Joins: vidbina (~vid@dynamic-077-191-121-138.77.191.pool.telefonica.de)
[12:48:04] *** Joins: thevishy (~Nishant@2405:201:f005:c007:4c69:b93c:3bc3:9ff2)
[12:55:14] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:56:48] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[13:02:16] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:48] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[13:26:06] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:56:09] *** Joins: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99)
[14:16:31] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:1961:285b:f9aa:3957)
[14:20:37] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:1961:285b:f9aa:3957) (Ping timeout: 240 seconds)
[14:32:28] *** Quits: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99) (Quit: WeeChat 3.3)
[15:18:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:19:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:52:09] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[15:59:48] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[16:14:32] *** Quits: vidbina (~vid@dynamic-077-191-121-138.77.191.pool.telefonica.de) (Ping timeout: 240 seconds)
[16:14:42] <fantazo> Do people run erlang on kubernetes in distributed mode? From what I have seen so far on guides regarding the configuration of such a deployment it seems to me that this is high rocket science.
[16:16:39] <gearnode> fantazo: You can do it with libcluster but to be honest Kubernetes network is terrible so you may have a lot of issue.
[16:22:26] <fantazo> gearnode: that's really fantastic then. considering, that people love that behemoth.
[17:14:19] *** Joins: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99)
[17:18:37] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:23:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:49:47] *** Joins: vidbina (~vid@2a02:3032:1:568f:80d6:a5e0:d099:f634)
[18:19:52] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Remote host closed the connection)
[18:20:43] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:23:43] *** Joins: phaleth (~phaleth@user/phaleth)
[18:30:17] *** Quits: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99) (Ping timeout: 240 seconds)
[19:01:38] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[19:06:48] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:15:56] *** Joins: Corbit (~Corbit@2001:a61:2a5f:de01:eae4:9e64:aa23:eb99)
[19:52:07] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[20:25:39] *** Joins: BadRequest (uid3514@user/badrequest)
[20:36:27] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Quit: Leaving)
[20:59:13] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:26:29] <okeuday> you must love big brother
[21:35:46] <tristan> no need for libcluster (which is an elixir lib)
[21:36:09] <tristan> and k8s makes clustering easier than many other environments actually
[21:36:38] <tristan> since every erlang node gets its own ip and everything is setup in dns for you. just query the DNS records and connect to the nodes returned
[21:38:28] *** Joins: kstatz12 (~karl.stat@50-105-191-199.snpr.wi.frontiernet.net)
[21:38:48] <fantazo> tristan: which means what actually? how do you make node-discovery?
[21:45:39] <tristan> you make a dns query to get the IPs of all the other erlang nodes
[21:46:38] <tristan> apparently I don't have a published exampel of this to show setting up the k8s service... I'll need to get around to do this for https://adoptingerlang.org/docs/production/kubernetes/#clustering
[21:46:56] <tristan> could have swore I had an example posted somewhere else already, but i don't
[21:48:07] <rkallos> I'm very interested to know more about this, tristan :)
[21:49:04] <tristan> important to also note that you do not need or want EPMD. you might run into guides using it within k8s. things are much simpler these days. the "hard" part is if you don't yet know how to setup k8s services :)
[21:49:59] <fantazo> tristan: I wonder how you would do a dns query to get neighbouring nodes. My knowledge of DNS is in this regard limited, so I'm curious to know about it.
[21:57:23] <tristan> k8s dns services will create records automaticaly for a Service. so you can use erlang inet_res module to query for all pods in the service and then connect to them
[22:04:26] *** Joins: ahf (ahf@irssi/staff/ahf)
[22:18:59] <fantazo> tristan: that I already know, but what dns query returns all the nodes around the querying node or is there a dns query for the service?
[22:29:23] <tristan> dns query for the service
[22:32:44] <tristan> https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#services
[22:33:47] <rkallos> My total lack of experience with DNS is showing, but it's dawning on me that getting one IP in a DNS response is all that's needed to hook up a fully connected Erlang cluster.
[22:34:22] <Ankhers> rkallos: Unless that single IP is unreachable for some reason.
[22:35:00] <rkallos> Of course
[22:35:39] <tristan> you want to get all the IPs
[22:35:57] *** Quits: vidbina (~vid@2a02:3032:1:568f:80d6:a5e0:d099:f634) (Ping timeout: 240 seconds)
[22:41:41] <rkallos> I find that a bit surprising! Is there a recommendation to run erl with '-connect_all false'?
[22:43:13] <tristan> no, but there is no reason to only get one
[22:59:15] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[23:48:57] *** Quits: kstatz12 (~karl.stat@50-105-191-199.snpr.wi.frontiernet.net) (Ping timeout: 240 seconds)
[23:57:08] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
