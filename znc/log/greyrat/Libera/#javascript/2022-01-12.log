[00:00:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:01:00] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[00:06:51] *** Joins: lenarhoyt (~lenarhoyt@p2e5cf45b.dip0.t-ipconnect.de)
[00:06:57] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 240 seconds)
[00:07:57] *** Quits: teut (~teut@2401:4900:1c68:6b85:dd24:2947:a394:79e4) (Quit: Client closed)
[00:09:28] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Quit: Konversation terminated!)
[00:11:25] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[00:17:16] *** Quits: victor (uid208353@user/victor) (Quit: Connection closed for inactivity)
[00:17:33] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[00:19:52] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:20:22] *** Joins: e9n (~espen@84.211.95.182)
[00:25:11] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[00:26:15] *** Joins: gehn (~gehn@user/gehn)
[00:26:35] *** Joins: spacenomad (~nomad@cpe-66-91-226-246.hawaii.res.rr.com)
[00:27:46] *** Joins: summersault (~summersau@179.221.251.36)
[00:33:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:33:57] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[00:34:19] *** Joins: wovixo (~wovixo@128.104.205.49)
[00:36:48] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[00:39:07] *** Quits: spacenomad (~nomad@cpe-66-91-226-246.hawaii.res.rr.com) (Changing host)
[00:39:07] *** Joins: spacenomad (~nomad@user/spacenomad)
[00:45:06] *** Quits: lenarhoyt (~lenarhoyt@p2e5cf45b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:45:39] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[00:46:22] *** Quits: e9n (~espen@84.211.95.182) (Quit: WeeChat 3.4)
[00:46:24] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[00:47:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:47:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:47:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:47:19] *** Joins: wroathe (~wroathe@user/wroathe)
[00:47:37] *** Quits: KlobberTobby (~KlobberTo@193.180.57.75) (Ping timeout: 240 seconds)
[00:49:47] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[00:50:07] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[00:52:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:55:26] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[00:58:01] *** Joins: spacenomad (~nomad@user/spacenomad)
[00:58:47] <ThePendulum> find hot areas in your girls now
[00:59:25] <ThePendulum> frankly I think the only spam I ever got on freenode in a decade is someone trying to smear libera at the very end
[01:00:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[01:00:17] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Ping timeout: 240 seconds)
[01:01:02] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83)
[01:01:29] <gehn> I've seen significantly more spam than that on Freenode, but overall it wasn't too bad. Maybe half a dozen actual malicious/jerk spammers in several years.
[01:01:54] *** Quits: scara (~user@user/scara) (Remote host closed the connection)
[01:02:00] <gehn> probably depends on which channels, not sure how spammers decide which channels to spam, seems almost random
[01:02:27] *** Joins: scara (~user@user/scara)
[01:02:37] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[01:03:57] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[01:05:17] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[01:05:25] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83) (Ping timeout: 240 seconds)
[01:06:34] <twiclo> Do variables become immutable when they're imported from another module? I need to change the value of a variable that's been imported but I get an error stating I'm trying to assign to a constant variable
[01:09:26] <gehn> twiclo, no
[01:09:43] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[01:10:12] <gehn> you can export anything from a module. anything that you can put into a variable, basically. int, string, object, etc etc
[01:10:35] <twiclo> https://stackoverflow.com/questions/48168601/change-the-value-of-imported-variable-in-es6
[01:10:41] <gehn> presumably the const-ness issue is that you did const foo = whatever; and then later tried to do foo = somethingelse;
[01:10:44] <twiclo> Looks like they are indeed immutable
[01:10:49] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Client Quit)
[01:11:01] <gehn> I mean, I dunno about the new-ish ES6 modules
[01:11:20] <gehn> also const != immutable, at least not necessarily
[01:11:41] <twiclo> Modules were part of ES6 but you seem pretty confident on them
[01:11:45] <gehn> n> const foo = {'a': 'b'}; foo.a = 'c'; foo.a;
[01:11:46] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[01:11:48] <jellobot> (okay) 'c'
[01:11:50] <twiclo> Right. You can mutate them inside of the module they came form
[01:11:59] <systemfault> Modules were not part of ES6... only the syntax.
[01:12:07] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1) (Ping timeout: 268 seconds)
[01:12:20] <systemfault> That was a dumb move that I'm pretty sure will never happen again
[01:12:31] <twiclo> I like them
[01:12:39] <systemfault> I like them too
[01:12:45] <samsch> I don't :P
[01:12:47] <gehn> I still prefer CommonJS
[01:13:00] <systemfault> The dumb move is to define a module syntax without specifying how it works
[01:13:02] <samsch> The only thing they have going for them is automatic strict mode
[01:13:15] <gehn> which has the major benefit of being the same (syntax wise) between node.js and the browser bundle
[01:13:22] *** Quits: MrBlue (~MrBlue@5.181.233.205) (Quit: Leaving)
[01:13:43] *** Joins: MrBlue (~MrBlue@5.181.233.205)
[01:14:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:14:11] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[01:14:15] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[01:14:50] <systemfault> I prefer ESM syntax-wise and the fact that it's not as powerful as CommonJS
[01:14:52] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[01:14:56] <ljharb> the ESM syntax is nice
[01:15:02] <ljharb> but ESM shouldn't have been in ES6 at all
[01:15:09] <ljharb> and browsers shouldn't have shipped it until node was able to support it
[01:15:23] <ljharb> and node shouldn't have shipped it without CJS-style index/extension lookup
[01:15:43] <gehn> also, immutable != const necessarily
[01:15:48] <ljharb> systemfault: ESM is just as powerful as CJS in terms of dynamicness - `import()` exists.
[01:15:59] <gehn> strings are immutable iirc, but you can still put them in non const vars
[01:16:18] <gehn> const in C++ actually (well... mostly) means immutable in the general case
[01:16:29] <gehn> const in JS basically just means "can't reassign to this name"
[01:16:43] <systemfault> ljharb: One is sync, the other async... it may look like a subtle difference in a async/await world but the difference is real
[01:17:43] <gehn> ignoring the fact that anyone can cast away const-ness in C++ fairly easily, const in C++ is supposed to generally mean both that you can't reassign and the object data can't be mutated (object in C++ is not the same as object in JS btw)
[01:18:07] <samsch> Of course, if top level await exists, you can use import() like a... synchronous import... üôÑ
[01:18:29] <systemfault> I was at a node conference 2-3 years ago and there was a talk explaining how ESM worked on Node... I can't remember all the details but wow, it's sooooo complicated compared to CommonJS
[01:20:54] <EdFletcher> Does anyone have a good reference discussing what was wrong with CJS that it couldn‚Äôt have been adopted as-is? Or the TL;DR? Not sure I‚Äôve ever heard it articulated
[01:20:59] <ljharb> systemfault: right but sync is better
[01:21:03] <ljharb> systemfault: not more powerful
[01:21:25] <ljharb> samsch: `await import()` still isn't synchronous, nor is anything using await, as you well know :-p
[01:21:46] <ljharb> EdFletcher: nothing's wrong with it
[01:21:59] <systemfault> Synchronous imports don't work in a browser...
[01:22:00] <ljharb> EdFletcher: at the time ESM was designed, node/CJS wasn't really the defacto standard
[01:22:01] <EdFletcher> ljharb: I mean, that‚Äôs what I thought too‚Ä¶
[01:22:18] <ljharb> now, it's true that browsers would have issues with synchronous importing
[01:22:28] <EdFletcher> ljharb: Ah, so like anything in this field: let‚Äôs create another standard instead! üòÇ
[01:22:39] <ljharb> but basically, by the time everyone realized node's way was The Way, ESM couldn't be redesigned, but it adapted by adding default exports
[01:22:40] <EdFletcher> There‚Äôs an XKCD for this‚Ä¶
[01:22:46] <gehn> I feel like CommonJS has been as close to a defacto standard as existed for many years
[01:23:05] <ljharb> it is, not
[01:23:06] <EdFletcher> ljharb: Ah gotcha, the ship had sailed. Yeah makes sense, thank you a ton
[01:23:12] <Slade> EdFletcher, you're refering to 927?
[01:23:13] <systemfault> I feel like ESM was a solution to a non-existant problem
[01:23:13] <Slade> https://xkcd.com/927/
[01:23:16] <ljharb> but at the time there were a dozen module formats, CJS and AMD just being the two most used
[01:23:25] <EdFletcher> Slade: That‚Äôs the one! üëè
[01:23:27] <ljharb> and it took time to show that AMD sucked
[01:23:35] <ljharb> and it took time for node to become dominant
[01:23:43] *** Joins: summersault (~summersau@179.221.251.36)
[01:23:52] <ljharb> which is why i wish ESM hadn't been in ES6. because by the new stage process, ESM would never have landed in its current form.
[01:23:58] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[01:24:18] <EdFletcher> So really though the only technical issue with CJS would have been synchronous imports (which could‚Äôve been solved for browsers somehow no)?
[01:24:26] <systemfault> No
[01:24:30] <systemfault> It cannot be solved.
[01:24:32] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[01:24:47] <EdFletcher> Anything can be solved, it‚Äôs just typing üòú
[01:24:48] <systemfault> The browser would have to block... then we're back to "sync XHR"
[01:24:52] <ljharb> EdFletcher: no, it can't be
[01:25:08] <EdFletcher> Yeah no sorry that was a bad joke that doesn‚Äôt land on IRC
[01:25:14] <onosendi> Slade: lol, that's funny.
[01:25:18] <EdFletcher> Gotcha, fair enough. So that indeed was an issue.
[01:25:21] <ljharb> there was potentially still a way to make CJS work in browsers with async wrappers. but nobody spec'd it.
[01:25:42] <EdFletcher> That‚Äôs what I was thinking, just wrap the synchronous imports
[01:26:03] <EdFletcher> But of course it‚Äôs never ‚Äújust‚Äù that easy
[01:26:08] *** Joins: biberu (~biberu@user/biberu)
[01:26:25] *** Joins: spacenomad (~nomad@user/spacenomad)
[01:26:32] <samsch> Browsers could have done more to support bundling as a concept, rather than sitting on the html imports forever before finally deciding to back ESM
[01:26:43] <EdFletcher> Anyway thanks a ton for the info ljharb et al, really nice to finally be clear on this.
[01:28:41] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[01:29:54] <ljharb> samsch: indeed
[01:30:34] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[01:31:08] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[01:32:19] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:32:54] <samsch> I came into web dev through college ed in 2012/13, and started working in 2014 (first pro app used compass to build js + scss assets I think). If a lot of the shouty parts of the web were to be believed at that time, Web components was a half-step away and web frameworks were about to go away. While somehow the only way to pretend to use those things required a web framework...
[01:33:32] <samsch> I am pretty sure npm was the very clear winner by at least mid 2015 though.
[01:34:12] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[01:34:18] <samsch> It wasn't perfectly obvious for a while that that was also going to be true for front-end packages though, tbf
[01:34:56] *** Quits: xall (~xall@2600:8800:8c02:3600:1173:a052:4798:9101) (Quit: Client closed)
[01:36:48] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83)
[01:37:08] <onosendi> Why do some prefer yarn, over npm?
[01:38:04] <Decker> the contrarian part of human nature? :)
[01:38:18] <EdFletcher> lol srsly
[01:38:32] <EdFletcher> the only reason i can think of! i'm curious too, honestly. it must have _some_ redeeming feature no?
[01:38:52] <Alexendoo> initially people used it because it was way faster than npm
[01:38:55] <samsch> Very early on, yarn had vast performance benefits, which was helpful for large projects. After that, a lot of people stayed purely due to momentum.
[01:39:15] <ljharb> samsch: ESM was designed in like 2012
[01:39:22] <ljharb> onosendi: because few people understand how either works
[01:39:57] <samsch> yarn 2+ is also shiny toy syndrome with the alternate module loading strat stuff
[01:40:12] <Alexendoo> I don't think I've seen anybody using yarn 2
[01:40:16] <ljharb> which breaks things, but is SHINY AND NEW
[01:40:21] <ljharb> yarn 3 is out, even
[01:40:31] <gehn> onosendi, hype mostly. same reason people adopt horribad tech stacks like MEAN
[01:40:34] <ljharb> yarn 1 and 2 are EOL, and yarn pnp breaks things
[01:40:37] <ljharb> it's best avoided.
[01:41:19] <systemfault> Yarn had workspaces... but now NPM has them too
[01:41:49] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83) (Ping timeout: 240 seconds)
[01:43:25] *** Quits: rcoote (~rcoote@2a02:908:690:a140:8c44:f579:dbaf:36b5) (Ping timeout: 240 seconds)
[01:44:15] *** Joins: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net)
[01:44:16] *** Quits: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net) (Changing host)
[01:44:16] *** Joins: corgi (~corgi@user/corgi)
[01:44:34] *** Quits: montybanksnyc (~montybank@108.50.135.21) (Remote host closed the connection)
[01:44:36] *** Quits: tmm88 (~tmm88@bl22-240-102.dsl.telepac.pt) (Quit: Lost terminal)
[01:44:57] <ljharb> yep
[01:45:01] *** Joins: montybanksnyc (~montybank@108.50.135.21)
[01:45:04] <ljharb> also resolutions - now npm has overrides.
[01:45:55] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[01:46:25] *** Joins: enoq (~enoq@194-208-178-35.lampert.tv)
[01:46:49] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Remote host closed the connection)
[01:47:05] *** Joins: jazzy (~jaziz@user/jaziz)
[01:47:46] *** Joins: spacenomad (~nomad@user/spacenomad)
[01:48:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[01:48:18] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[01:50:24] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 256 seconds)
[01:52:13] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[01:56:19] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[01:58:35] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[02:01:35] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:01:47] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[02:07:03] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[02:08:25] *** Joins: summersault (~summersau@179.221.251.36)
[02:10:57] *** Quits: pmercado (~pmercado@186.107.48.62) (Ping timeout: 240 seconds)
[02:15:11] *** Quits: arthurpbs (~arthurpbs@168.121.98.7) (Ping timeout: 256 seconds)
[02:15:43] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[02:19:44] *** Joins: spacenomad (~nomad@user/spacenomad)
[02:19:48] *** Joins: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net)
[02:19:48] *** Quits: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net) (Changing host)
[02:19:48] *** Joins: corgi (~corgi@user/corgi)
[02:24:04] <ThePendulum> any suggestions for why the exact same regex could take 3 seconds to process one time and a fraction of a millisecond the next? got a million factors to go through but maybe that rings a bell to someone to put me on the right path
[02:24:09] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[02:24:30] <ThePendulum> oh, hmm, optimization I'm guessing
[02:24:55] <ThePendulum> it always seems to happen after the regex gets reloaded, so even though it's the same pattern it's not the same RegExp instance
[02:25:17] <Alexendoo> Is it massive? could be compiling the first time round
[02:25:44] <ThePendulum> it is fairly beefy, about 44075 characters atm, not particularly complicated
[02:25:57] *** Quits: panella32 (~panella32@89.46.114.44) (Ping timeout: 240 seconds)
[02:26:47] <ThePendulum> it's fast enough once it's compiled, I guess the solution is to try and get it to compile behind the scenes before substituting the old one
[02:27:34] *** Joins: arthurpbs (~arthurpbs@168.121.98.90)
[02:29:49] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:08] <ThePendulum> this has been puzzling me for so long, glad to finally have a faint clue what's going on
[02:30:35] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:01] *** Joins: pluri (~pluri@user/pluri)
[02:32:48] *** Joins: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net)
[02:32:48] *** Quits: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net) (Changing host)
[02:32:48] *** Joins: corgi (~corgi@user/corgi)
[02:32:54] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[02:32:58] <ThePendulum> n> var items = Array.from({ length: 1000000 }, (value, index) => index); var exp = new RegExp(`${items.join('|')}`); console.time('round 1'); '555'.replace(exp, 666); console.timeEnd('round 1'); console.time('round 2'); '555'.replace(exp, 666); console.timeEnd('round 2');
[02:33:05] <jellobot> (timeout)
[02:33:19] <ThePendulum> I think I overestimated jellobot's resources vs my browser console lol
[02:33:26] <ThePendulum> n> var items = Array.from({ length: 100000 }, (value, index) => index); var exp = new RegExp(`${items.join('|')}`); console.time('round 1'); '555'.replace(exp, 666); console.timeEnd('round 1'); console.time('round 2'); '555'.replace(exp, 666); console.timeEnd('round 2');
[02:33:28] <jellobot> (okay) round 1: 373.169ms round 2: 115.214ms
[02:33:59] *** Joins: pizdets (~pizdets@183.182.111.72)
[02:34:02] <ThePendulum> not as drastic as in my application although there seems to be more to it than just running it twice in a row
[02:34:02] *** Quits: pizdets_ (~pizdets@183.182.115.239) (Ping timeout: 256 seconds)
[02:34:15] *** Joins: trevors (~trevors@user/trevors)
[02:35:00] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:44] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[02:40:30] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[02:41:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[02:42:38] *** Quits: nomic (~nomic@185.198.243.30) (Quit: Leaving)
[02:46:02] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[02:46:48] <oscurochu> I'm probably doing this wrong, or it might be working for me. https://dpaste.com/8Z64KRRLZ
[02:47:45] <sheetjs> Alexendoo: the history is much funnier
[02:47:47] *** Joins: summersault (~summersau@179.221.251.36)
[02:48:28] <oscurochu> im trying to learn how to spy on a function being called inside of a module.
[02:48:38] <oscurochu> in this case, my query function
[02:50:06] *** Joins: spacenomad (~nomad@user/spacenomad)
[02:51:53] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[02:52:02] <sheetjs> basically, yarn was faster to a large extent because they used cloudflare.  NPM eventually switched to using cloudflare, which broke yarn
[02:53:09] <sheetjs> contemporaneous github issue https://github.com/yarnpkg/yarn/issues/5885
[02:53:43] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:54:40] <ljharb> rofl i didn't even know that
[02:54:44] <ljharb> even MORE reason yarn's trash
[02:55:37] *** Quits: haslo (uid390999@id-390999.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:55:57] <Alexendoo> Somehow I feel you'd not appreciate if people used some npm downtime to call it trash
[02:56:25] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:56:55] <ljharb> Alexendoo: sorry let me clarify. part of yarn's entire selling point was they said they were faster. but that was a lie if part of the reason they're faster is slapping a cache in front of the registry.
[02:57:09] <ljharb> it's not the downtime that was the problem.
[02:57:16] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[02:58:31] <sheetjs> ljharb: technically its not a lie if they said they were faster and they actually were faster
[02:58:52] <Alexendoo> It also wasn't the only reason they were faster, npm didn't reach parity by just switching to cloudflare
[02:59:11] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Remote host closed the connection)
[03:00:59] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[03:03:24] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[03:04:46] *** Quits: federico_it (~textual@151.51.84.71) (Quit: Textual IRC Client: www.textualapp.com)
[03:04:58] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[03:05:17] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[03:05:25] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[03:05:49] <oscurochu> here is a cleaner example lol i might have it figured out soon, maybe https://dpaste.com/4TFK3QZ7R
[03:06:34] <oscurochu> the last line does not pass, ignore the comments
[03:07:34] *** Joins: xall (~xall@2600:8800:8c02:3600:c410:abec:9550:6f0b)
[03:07:38] <oscurochu> I can get all the tests to pass, except for the one that I'm actually trying to test.
[03:08:02] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[03:10:47] <Alexendoo> Well I say parity, but I don't think it ever even caught up to yarn, but it's much better than it used to be
[03:13:06] <sheetjs> parity is not relevant as long as npm is bundled with nodejs
[03:15:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[03:16:44] <Alexendoo> For adoption? Sure, mostly
[03:17:03] <Alexendoo> But that doesn't mean I can't wish npm was faster
[03:17:41] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:12] *** Quits: kmh (~kmh@2a00:6020:5004:6800:155e:f714:239e:56bd) (Remote host closed the connection)
[03:19:24] *** Joins: kmh (~kmh@2a00:6020:5004:6800:155e:f714:239e:56bd)
[03:20:07] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.3)
[03:20:39] <sheetjs> there's limited space to innovate
[03:27:10] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[03:27:51] <oscurochu> run npm test in the terminal https://codesandbox.io/s/falling-pond-39bt2?file=/src/index.test.js
[03:30:18] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[03:31:52] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[03:31:57] *** Quits: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:33:03] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:36:11] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83)
[03:36:22] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[03:36:30] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[03:37:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[03:39:09] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[03:39:27] <systemfault> oscurochu: I get a 502: Bad Gateway in the "browser" of the codesanbox and can't do anything with the terminal
[03:40:09] <oscurochu> thats dumb lol what should i do then
[03:40:16] <systemfault> As for your tests, I don't know what the first three should be testing..
[03:40:26] <oscurochu> just to see if my mocks are working
[03:41:25] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83) (Ping timeout: 240 seconds)
[03:41:27] <systemfault> So, for test4, it doesn't make a lot of sense to me.
[03:41:28] *** Quits: roadt_ (~roadt@60.168.93.72) (Ping timeout: 256 seconds)
[03:41:49] <systemfault> You're mocking a pool... then you're not using it in "myFunc", you're creating another one instead.
[03:42:21] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:42:22] <systemfault> Then you're not checking the spy after...
[03:42:22] <oscurochu> true
[03:42:58] <systemfault> So... what are you going to do to about it?
[03:43:38] <systemfault> You could pass the pool as an argument to myFunc?
[03:43:39] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[03:44:09] <systemfault> And then at line 35, you probably want to check if the "spy" was called and not spyOn.connect
[03:44:12] *** Joins: trevors (~trevors@user/trevors)
[03:44:13] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:44:13] <oscurochu> i have an import 'pool' that calls 'new Pool()'. maybe i should mock that import
[03:44:47] <oscurochu> but for now maybe i will defined new Pool once at the top?
[03:45:06] <oscurochu> i dont know. mocking is so confusing
[03:45:12] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:45:19] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[03:45:26] <systemfault> It's even more when you're doing weird things..
[03:45:43] *** Joins: jazzy (~jaziz@user/jaziz)
[03:46:05] <systemfault> I haven't used jest in years... and I can easily see weird things in your code
[03:46:57] <oscurochu> thank you
[03:47:23] *** Joins: ruzui (~ruzu@107-179-252-71.cpe.teksavvy.com)
[03:48:38] <systemfault> Look... just try what I said.
[03:48:50] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:2012:4dbd:2b9f:eaeb) (Ping timeout: 252 seconds)
[03:49:23] <oscurochu> i am.
[03:51:06] *** Quits: arthurpbs (~arthurpbs@168.121.98.90) (Remote host closed the connection)
[03:51:42] <systemfault> oscurochu: https://jsfiddle.net/kh63mq2j/
[03:51:49] <systemfault> A bit like that (untested.. of course)
[03:53:01] <systemfault> That's assuming you changed "myFunc" to async function myFunc(pool) {
[03:54:08] *** Joins: roadt_ (~roadt@60.168.93.178)
[03:54:40] *** Joins: vysn (~vysn@user/vysn)
[03:55:00] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:55:29] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[03:57:43] <ljharb> sheetjs: it's a marketing lie tho
[03:58:09] <ljharb> Alexendoo: npm caught up to yarn 9 months after yarn was released
[03:58:13] <ljharb> Alexendoo: yarn hasn't been faster in many years
[03:58:21] <ljharb> or at least, significantly faster.
[03:58:27] <oscurochu> ok more weird stuff is happening. i copied and pasted the test. the first one passes, the second fails. they are exactly the same. lol =/
[03:58:27] <sheetjs> its like the benchmarks that win by memoization
[03:58:40] <ljharb> or like the ones that win by getting the wrong answer VERY quickly
[03:58:46] <systemfault> Sometimes a bit of competition is healthy
[03:58:53] <ljharb> and sometimes you get yarn
[03:58:57] <sheetjs> competition would require nodejs not to ship with npm
[03:59:00] <ljharb> chrome tried that once, they broke the precision of all the JS math functions. it was much faster! but it was wrong.
[03:59:04] <ljharb> sheetjs: no
[03:59:12] <ljharb> sheetjs: it wouldn't be competition unless there's another *registry*
[03:59:18] <systemfault> Well, as far as I'm concerned... yarn did its job, NPM improved... and hopefully will now die
[03:59:31] <systemfault> (yarn I mean, not NPM)
[03:59:33] <ljharb> systemfault: it could have done that job by making an npm test suite, and *then* making a faster CLI
[03:59:49] *** Quits: stagas (~stagas@2a02:587:c429:f47f:3e7b:1cf1:8cd1:226c) (Ping timeout: 240 seconds)
[03:59:51] <ljharb> yarn screwed up a *lot* of ways because they had no idea how npm actually worked
[04:00:02] <sheetjs> there's a client tool and a registry
[04:00:15] <ljharb> sheetjs: there is no yarn registry tho. it's just a domain that points to npm
[04:00:36] <ljharb> anyways node now has corepack, so it "ships" with npm and yarn and pnpm
[04:00:57] <ljharb> so that complaint can vanish now. yarn still sucks and nothing really competes with npm, because nothing does a good enough job yet.
[04:01:04] <oscurochu> so the web part of the site _should_ say 502 bad gateway, but the terminal still works https://codesandbox.io/s/falling-pond-39bt2?file=/src/index.test.js
[04:01:13] <sheetjs> pnpm?
[04:01:25] <ljharb> sheetjs: yes
[04:01:28] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:01:56] <ljharb> also there's an "isolated" layout mode coming to npm from some pnpm folks that will largely make pnpm entirely redundant, as i understand it
[04:02:59] *** Joins: summersault (~summersau@179.221.251.36)
[04:05:41] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[04:06:08] *** Quits: Harlin (~DonQixote@63-230-76-242.clsp.qwest.net) (Quit: Leaving)
[04:06:11] <Alexendoo> ljharb: Gave it a test, yarn (1) is still about 10% faster. So yeah, not world shattering. Apart from on windows for some reason, where yarn is like 50% faster
[04:08:42] *** Joins: Harlin (~DonQixote@63-230-76-242.clsp.qwest.net)
[04:09:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:09:34] <Alexendoo> I don't really believe the 9 months thing, as I remember it the speed increases in npm came across quite a few updates
[04:09:39] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[04:10:14] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[04:11:02] *** Joins: junebug (~junebug@2600:1700:3db0:2540:713f:1c86:4ff0:b8)
[04:14:54] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 256 seconds)
[04:17:33] *** Joins: teut (~teut@2401:4900:1c68:6b85:dd24:2947:a394:79e4)
[04:18:41] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[04:22:20] *** Joins: solrize (~solrize@user/solrize)
[04:23:31] <solrize> hey is this an ok place to talk about web programming (websockets etc), or is it purely about the JS language?  i'm hoping to write a simple in-browser chat client unless someone knows of one that isn't full of confusing distractions.  basically something like the old xtalk unix utility
[04:23:58] *** Quits: ruzui (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[04:25:31] *** Quits: MrBlue (~MrBlue@5.181.233.205) (Ping timeout: 256 seconds)
[04:25:39] <oscurochu> my first test passes. the second test fails. they are exactly the same. the second test fails with TypeError: Cannot read properties of undefined (reading 'query')
[04:25:44] *** Joins: spacenomad (~nomad@user/spacenomad)
[04:26:12] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[04:26:22] <solrize> does current JS have anything like threads, instead of async/await for concurrency?
[04:27:47] <EdFletcher> solrize: yes, on the node side you can use worker threads https://nodejs.org/api/worker_threads.html, in the browser it'll be web workers https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers
[04:28:09] <Alexendoo> solrize: Practically, no, web workers are not really like threads in other languages
[04:28:12] <EdFletcher> but they're a lot heavier weight than you might be used to in other languages
[04:28:24] <EdFletcher> yeah was just getting to that, don't expect them to be "threads" in the traditional sense
[04:28:32] <EdFletcher> (even as-named)
[04:28:40] <solrize> this is for the browser side
[04:29:12] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:30:14] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:30:49] <solrize> oh web workers, let me look at that, thanks.  do most current browsers support them?
[04:30:56] <Alexendoo> The IO in the worker would still be asynchronous also, they're essentially only for computation
[04:32:23] <Donitz> https://news.ycombinator.com/item?id=29863672
[04:32:30] <Donitz> good discussion
[04:33:02] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[04:33:34] <Donitz> "Whatever the language or repository system reusing libraries like React, Requests, Apache commons, or lodash make sense after reviewing the pros and cons (functionality, security, size, performance etc). But blindly adding small repositories to your packages file without understanding the implications is only increasing the risk of trouble."
[04:33:38] <Donitz> indeed
[04:34:44] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[04:36:44] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[04:36:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:36:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:36:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:39:00] <sheetjs> Donitz: that's a terrible take
[04:39:48] *** Joins: src (~src@user/src)
[04:40:02] <sheetjs> a large part of using react involves dipping into the ecosystem, many of which are small SPoFs
[04:40:34] <sheetjs> pulling in lodash is outsourcing your process to the lodash maintainers
[04:44:04] <solrize> yeah it's true about all those imports
[04:44:24] <solrize> i couldn't believe the site i worked at had an npm update and a similar gem thing as part of its production deployment script omg
[04:45:51] <sheetjs> is that better or worse than an alternative where every dependency vendors everything?
[04:47:48] <solrize> have fewer dependencies, have the production stack be 100% identical to the test stack at all times, not sure what mean by vendoring but yeah maybe something like that.  i mean python used to have "batteries included" philosophy to decrease dependencies, heavyweight java still sort of has that, etc.
[04:48:09] <sheetjs> ultimately everything is underpinned by trust
[04:48:52] *** Joins: g00fy78 (~g00fy@user/g00fy)
[04:49:01] <sheetjs> having "fewer dependencies" is shifting the trust
[04:49:07] <solrize> yeah but trusting 1000 internet randos is more dangerous than a smaller number
[04:49:41] <sheetjs> the problems stem from transitivity (or lack thereof) in trust
[04:49:54] <solrize> there could also be some sandboxing included in the language, so if you call a left-justify function you can be sure it won't open sockets or mess with the dom
[04:50:00] <sheetjs> the colors thing was an issue because many projects like aws-cdk depended on colors
[04:50:17] <sheetjs> end users trusted that amazon did their due diligence
[04:50:30] <solrize> idk what colors was, i've mostly managed to keep js out of my life, but find myself wanting to write some
[04:50:59] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:50:59] <sheetjs> donitz comment was in response to the recent events involving colors.js
[04:51:46] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: back later)
[04:51:53] *** Joins: spacenomad (~nomad@user/spacenomad)
[04:52:17] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[04:52:56] *** Joins: bprompt (~default@207.98.72.3)
[04:52:57] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[04:53:07] <oscurochu> my mock function finally works the way i want it to, so far.... lol
[04:53:53] <solrize> yeah i saw that thread, idk what colors.js is but i got the general picture and it has seemed to me there has always been tons of vulnerability to that
[04:55:45] <sheetjs> the developer is clearly going through tough times, but the overall problem is that the modern ecosystem involves trust, either directly or transitively, in a large number of unpaid volunteers
[04:55:54] *** Quits: lovezrs (~lovezrs@101.64.0.72) (Quit: leaving)
[04:56:23] <solrize> yeah
[04:56:27] <solrize> there is an xkcd about that
[04:56:43] <solrize> but we all have to do our part to make bezos even richer, lol
[04:57:28] *** Quits: bprompt (~default@207.98.72.3) (Client Quit)
[04:57:38] *** Joins: sam_1 (~sam_1@87.51.251.118)
[04:57:41] <sheetjs> actually there's a more interesting character
[04:58:16] <sheetjs> npm is owned by github and github is owned by microsoft
[04:58:28] <solrize> haha good point
[04:58:50] <solrize> i didn't know github owned npm
[04:58:54] <sheetjs> microsoft unilaterally acted against the developer after what he did, and while what he did was not in good taste
[04:59:18] <sheetjs> there's a lingering question of what exactly is github and npm's role in this situation
[05:00:12] *** Quits: teut (~teut@2401:4900:1c68:6b85:dd24:2947:a394:79e4) (Quit: Client closed)
[05:01:06] <solrize> yeah i like to say "microsoft github" when i feel like trolling
[05:01:25] <sheetjs> github and npm can change repos and ban users at will
[05:02:21] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[05:03:54] <solrize> i've had to use github at work but have avoided npm so far.. i guess i wlil have to use it soon though
[05:05:02] *** Quits: Jaran (~mail@user/jaran) (Remote host closed the connection)
[05:06:14] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[05:06:35] <solrize> ok i found an online websocket tutorial, i guess i will read that and install npm on a vps and mess with it
[05:10:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[05:11:01] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-b071.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:11:38] *** Quits: junebug (~junebug@2600:1700:3db0:2540:713f:1c86:4ff0:b8) (Quit: Leaving)
[05:12:31] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:13:25] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:17:35] *** Joins: trevors (~trevors@user/trevors)
[05:21:26] *** Joins: src (~src@user/src)
[05:22:14] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:24:53] <ljharb> Alexendoo: on one data point of a dep graph, presumably, but ok
[05:25:27] <ljharb> Alexendoo: what i meant is, npm 5 came out 9 months after yarn did, and the speed delta at that point was not enough to be worth the cost of using a nonstandard client
[05:25:41] <ljharb> solrize: modern web dev requires bundling, transpiling, and npm
[05:26:07] <ljharb> sheetjs: also github banned marak temporarily. he was back after like an hour. he just didn't tweet that part; instead he broke `colors` in a patch version
[05:26:27] <ljharb> Donitz: hacker news with another stupid take, i guess
[05:27:01] <ljharb> however, no apps were broken by `colors` unless they failed to use a lockfile, in which case it's their own fault.
[05:27:48] <solrize> ljharb uh oh i don't know what any of those are except npm.  transpiling i.e. use something like purescript instead of raw JS?  i do plan to do that but didn't think it was required
[05:28:03] <ljharb> solrize: huh? no, purescript isn't js
[05:28:07] <ljharb> solrize: transpiling means "use babel"
[05:28:23] <ljharb> solrize: it's required if you want to avoid having to think about which browsers support what syntax
[05:28:46] <sheetjs> if the history is "marak was banned" -> "marak tweeted" -> "other people expressed concern" -> "github backpedalled", it's unclear whether the length of the ban matters
[05:29:07] <ljharb> sheetjs: fair. but either way, it was reasonable to ban him because it wasn't clear if it was a hack or not.
[05:29:09] <solrize> uh oh idk what babel is, but ok, it sounds like it translates some common form of js to multiple browsers?  does that mean you need separate .js files for each user agent?  omg
[05:29:22] <solrize> brb
[05:29:22] <ljharb> unless you've known marak for a decade and know about his decade of public acting out due to mental health issues
[05:29:28] <ljharb> solrize: no
[05:29:42] <ljharb> solrize: it means you write one JS, modern JS, and babel handles transforming it to a more broadly compatible version (older JS)
[05:29:43] <sheetjs> they're already started the enhanced verification stuff
[05:29:56] <ljharb> that's just 2FA
[05:29:59] <solrize> ljharb, hmm ok
[05:30:04] <solrize> brb
[05:30:16] <sheetjs> so what's the point of enforcing it in the first place if it is not effective?
[05:30:45] <ljharb> sheetjs: nothing's perfectly effective
[05:30:52] <ljharb> the point is adding layers
[05:31:08] <ljharb> but also, there's no way to prevent a single person becoming a bad actor
[05:31:30] <ljharb> (because there's no way to mandate more than one maintainer on a project, because people don't show up for that)
[05:33:26] <ljharb> anyways whenever some npm incident happens - twice a year on averaga, which is effectively "never" given how many packages we're talking about - people start trying to rail against small dependencies
[05:33:54] <ljharb> it's almost always a dumb argument (not analyzing the tradeoffs, just cherrypicking problems)
[05:41:18] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cb70.res6.spectrum.com)
[05:41:36] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[05:43:52] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[05:43:59] <solrize> if a dependency is that small then why does the implementation at the other end have to keep changing?  js itself is part of the problem though.  i hate java but maybe there could be an applet-like interface for lots of those deps, with enforced security boundaries
[05:45:47] *** Joins: spinningCat (~spinningC@94.54.210.37)
[05:45:47] *** Quits: spinningCat (~spinningC@94.54.210.37) (Changing host)
[05:45:47] *** Joins: spinningCat (~spinningC@about/web/muscles)
[05:49:53] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:52:14] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[05:52:17] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cb70.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:52:37] *** Joins: src (~src@user/src)
[05:53:50] <ljharb> solrize: lots of reasons. improvements, new features, discovered bugs, adapting to new browser/node versions
[05:54:01] <ljharb> solrize: JS already has quite enforceable security boundaries, as does node.
[05:54:25] <solrize> hmm i didn't know that.  i used it a little ages ago and at the time it was very haphazard
[05:54:38] *** Joins: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com)
[05:54:49] <solrize> about the security boundaries
[05:55:12] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[05:55:26] <solrize> is there a book i can read that is targeted at nerds?
[05:58:14] <buu> what kind of book
[05:59:17] <solrize> "browser programming for nerds".  about JS, websockets, the related toolchains, etc.  but aimed at programmers who are web haters (or else they would know this stuff already)
[05:59:32] <solrize> btw ']is webassembly just for pure computation?  can it call JS functions?
[05:59:32] <buu> meh
[05:59:53] <solrize> true
[06:00:09] <solrize> ages ago, JS Bible was a good way to get started
[06:01:47] <EdFletcher> saw https://exploringjs.com/impatient-js/ recently, looks pretty good
[06:02:45] <solrize> hmm thanks, i'll look at that, but by "for nerds" i meant something more like "technically hardcore and assume that the reader is ready for that"
[06:03:15] <EdFletcher> solrize: it has a companion book you might be more interested in then: https://exploringjs.com/deep-js/
[06:03:27] <solrize> ah ok i will lok at that too
[06:03:29] <solrize> look
[06:03:33] <EdFletcher> üëç
[06:03:35] *** Joins: Rockwood (~Rocky@user/rocky)
[06:03:47] <ljharb> solrize: what kind of programming book wouldn't be obsolete before it's sent to the printers
[06:03:55] <ljharb> !eloquent @ solrize
[06:03:55] <jellobot> solrize, Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/
[06:04:02] <ljharb> online books are basically your only hope
[06:04:04] <EdFletcher> ljharb: an online one? üòâ
[06:04:07] <EdFletcher> lol dammit
[06:04:13] <EdFletcher> _just_ beat me to it
[06:04:18] <ljharb> :-p
[06:04:34] <solrize> ljharb, "book" is kidn of a vague term these days.  also i think the JS language itself is less of a topic than the current browser api's (websockets, webrtc, wasm, etc)
[06:05:08] *** Quits: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com) (Quit: WeeChat 3.1)
[06:05:10] <solrize> yeah i don't really do paper books any more
[06:05:26] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cb70.res6.spectrum.com)
[06:05:40] <solrize> but, i like the idea of "book" as a single document (online) that you can read in linear order instead of having to jump around
[06:05:47] <solrize> so if there is a pdf then that helps
[06:06:14] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83)
[06:06:28] <solrize> he has one about typescript too
[06:07:22] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:02] <solrize> "It covers only the language (ignoring platform-specific features such as browser APIs) but not exhaustively. Instead, it focuses on a selection of important topics."   see that's the opposite of what i want :(
[06:08:13] *** Joins: spacenomad (~nomad@user/spacenomad)
[06:08:24] <ljharb> solrize: important to start with that tho
[06:08:32] <solrize> fair enough
[06:08:36] <ljharb> browsers have a whole complex security model, node has its own
[06:08:46] <solrize> i don't plan to use node
[06:08:53] <solrize> node is server side only right?
[06:08:56] <ljharb> you have to use it for linting and building and testing
[06:09:00] <solrize> oh hmm
[06:09:04] <ljharb> and npm
[06:09:35] <solrize> well ok maybe i have to use node for testing but i don't have to expose it to attackers i hope
[06:09:52] <EdFletcher> solrize: it's not "server side only", it's just a javascript runtime that runs as system tool (like any other) rather than in the browser
[06:10:04] <ljharb> solrize: indeed, but that depends on which attackers you're worried about
[06:10:23] <ljharb> solrize: there's not really any attackers on the clientside, except when they can attack your webserver
[06:10:26] <solrize> EdFletcher, ah fair enough.  there will be some node-based tools then
[06:10:34] <ljharb> almost every tool will be node-based
[06:10:37] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83) (Ping timeout: 240 seconds)
[06:10:45] <solrize> client side attackers = cross site scripting and stuff like that
[06:11:04] <solrize> like OMG any JS page can open a websocket to anyplace rather than having same origin policy?
[06:11:13] <ljharb> only obeying CORS.
[06:11:16] <ljharb> !cors @ solrize
[06:11:16] <jellobot> solrize, Cross-origin resource sharing (http://www.w3.org/TR/cors/) allows browser to negotiate access for cross-domain requests - for example with XMLHttpRequest - as a way to work around the same-origin policy. See also: !same, http://caniuse.com/cors , https://developer.mozilla.org/en/HTTP_access_control
[06:11:23] <solrize> yeah
[06:11:30] <ljharb> but also sure, you'll need to know about CSRF, and XSS
[06:11:37] <ljharb> and cookies, and whatnot
[06:11:40] *** Joins: pmercado (~pmercado@186.107.48.62)
[06:11:44] <EdFletcher> websockets are ‚ù§Ô∏è
[06:12:00] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[06:12:11] <ljharb> i'm meh on them, they're fine
[06:12:12] <solrize> websockets wants you to send a location header to tell the server that you're not an attacker, but why should it believe you?  heh
[06:12:23] <solrize> well i don't understand that part for now
[06:12:46] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[06:13:19] <EdFletcher> ljharb: my affinity for them most comes from having to work on systems that live deep within client networks and have no outbound egress except for http ports... it became an absolutely lifesaver for visibility into those systems
[06:14:28] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[06:14:42] *** Quits: Harlin (~DonQixote@63-230-76-242.clsp.qwest.net) (Remote host closed the connection)
[06:16:17] *** Joins: src (~src@user/src)
[06:17:08] *** Joins: spacenomad (~nomad@user/spacenomad)
[06:17:22] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cb70.res6.spectrum.com) (Ping timeout: 268 seconds)
[06:19:11] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:19:49] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:4dd2:40f6:5cc8:f674) (Ping timeout: 240 seconds)
[06:20:52] *** wahpanda is now known as Room-Wah
[06:21:47] *** Room-Wah is now known as relms
[06:22:37] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:7125:6c88:316f:2f30)
[06:24:14] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[06:24:47] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:34:43] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[06:36:47] *** Joins: jazzy2 (~jaziz@user/jaziz)
[06:37:58] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[06:39:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[06:40:00] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[06:41:08] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:42:14] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 256 seconds)
[06:45:04] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:45:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[06:46:05] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[06:46:19] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Read error: Connection reset by peer)
[06:46:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:49:36] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[06:49:55] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:51:25] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 240 seconds)
[06:53:25] *** Quits: pmercado (~pmercado@186.107.48.62) (Ping timeout: 256 seconds)
[06:56:47] *** Joins: keypusher (keypusher@user/keypusher)
[06:56:49] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[06:58:36] *** Joins: sam_1 (~sam_1@87.51.251.118)
[06:58:46] <solrize> lol there is already a replacement for websockets  https://news.ycombinator.com/item?id=29894080
[07:03:01] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[07:03:10] *** Joins: stagas (~stagas@2a02:587:c429:f47f:6c35:efac:1c76:9fb4)
[07:04:12] <queue-> https://github.com/awknode/homelab <---can someone help me build a nicer front-end that will eventually go on awknode.com? :D im bad at front-end now. i was really good at action scripting and i can build from scratch which will take me a long time or use bootstrap templates, i just need something better than awknode.com, i guess mainly for imagery or something to make it 'work' because ill be
[07:04:12] <queue-> adding a lot more content soon. i understand some js but not enough to build my own front-end here :(
[07:04:34] <queue-> this is a major project tbqh using k3s like this, so feel free to collaborate
[07:07:02] <queue-> just made this repo public not long ago, its easy for us to just add helm charts into argocd which is auto-deployed with an A record via cloudflare secrets (api key && token)
[07:07:12] <queue-> with SSO, its pretty sick
[07:07:37] <queue-> sso -- authelia
[07:08:05] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[07:09:52] *** Joins: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net)
[07:09:52] *** Quits: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net) (Changing host)
[07:09:52] *** Joins: corgi (~corgi@user/corgi)
[07:11:07] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[07:11:52] *** Quits: corgi (~corgi@user/corgi) (Client Quit)
[07:14:10] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[07:14:37] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[07:15:30] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[07:16:19] *** Quits: xall (~xall@2600:8800:8c02:3600:c410:abec:9550:6f0b) (Quit: Client closed)
[07:21:50] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[07:25:43] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[07:29:41] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[07:41:40] <oscurochu> i have functions that look like this: function (arg1, arg2) { return query('sql statemeent', [arg1, arg2]); }. im wondering if there would be any benefit to doing unit tests on these types of functions, considering the extreme reduncancy. i feel like there really isnt anything to "test"
[07:43:44] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[07:43:56] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[07:44:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:48:32] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[07:49:02] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[07:50:28] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Read error: Connection reset by peer)
[07:54:11] <oscurochu> i guess will write them anyways. it couldn't hurt to have additional sanity
[07:55:26] *** Joins: spacenomad (~nomad@user/spacenomad)
[07:56:44] *** Joins: matsaman (~matsaman@user/matsaman)
[07:58:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:00:10] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[08:02:08] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[08:07:54] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83)
[08:08:13] *** Quits: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:08:32] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[08:08:35] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:09:01] <solrize> do people here use purescript and/or typescript much?
[08:09:11] <solrize> and does reasonML have any traction at all?
[08:10:28] <matsaman> the react.js creator likes ocaml? The plot thickens
[08:12:41] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5923:8523:47b7:c83) (Ping timeout: 268 seconds)
[08:13:45] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[08:14:17] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[08:14:47] <solrize> reasonml is by the react creator?  i didn't know that.  but i have been told that react has an FP flavour
[08:19:40] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:24:14] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:24:54] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:25:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:40f5:2114:f40e:465b) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:30:26] *** Joins: spacenomad (~nomad@user/spacenomad)
[08:34:44] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:35:22] <sheetjs> what version of the JS spec introduced bigint?
[08:36:11] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[08:36:40] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[08:39:25] <jaawerth> consult the oracle!
[08:39:28] <jaawerth> !kangax
[08:39:28] <jellobot> jaawerth, ES5,ES6/ES2015,ES2016-ES2020 (ES2015 was formerly known as ES6) and proposal support tables: http://kangax.github.io/compat-table/
[08:40:42] <jaawerth> 2020
[08:40:45] <jaawerth> sheetjs: ^
[08:40:56] <sheetjs> oof
[08:41:37] <jaawerth> too recent for your purposes?
[08:41:58] *** Joins: fef (~thedawn@user/thedawn)
[08:42:19] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:42:55] <sheetjs> hard to say what is "too recent" but the yearly releases sorta blur together like madden or fifa releases
[08:43:11] <jaawerth> lol
[08:43:17] <jaawerth> I thin kof it more as a rolling release
[08:43:21] <jaawerth> they ust cut it once a ayear
[08:43:42] <jaawerth> then again I wouldn't be that surprsid if Fifadden did the same thing
[08:44:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[08:44:37] <jaawerth> there ARE editions wher ether's, like, 2 features
[08:44:46] <sheetjs> so there's "ES5" which we can loosely say is like IE8+
[08:44:50] <sheetjs> (after shims)
[08:45:03] <sheetjs> and "ES6" which we can loosely say is like IE11
[08:45:27] <sheetjs> but after that there's no obvious anchor
[08:45:41] <jaawerth> yeah and ES6 was only such a ridiculous jump because ES5 staged for so ong. I could do without ome o what they threw in there but others were sorely needed imo
[08:45:58] <jaawerth> promise, iterator protocol, Map/Set, all good things
[08:46:17] <jaawerth> Array.from is a great friend to me
[08:46:48] *** Quits: kmh (~kmh@2a00:6020:5004:6800:155e:f714:239e:56bd) (Quit: Leaving)
[08:47:38] <sheetjs> with the evergreen browsers, it's harder to develop an intuition for whether a feature is too new to use
[08:47:50] <jaawerth> I could do without classes and mot of what came with them thoughf. it feels clunky every time
[08:49:57] <systemfault> I hate classes but I'm glad they're part of the language.
[08:51:48] <jaawerth> yeah there are upsides
[08:51:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[08:52:41] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[08:53:22] <theskillwithin> i use analytics or sometimes I just make a guess
[08:53:29] *** Joins: kmh (~kmh@2a00:6020:5004:6800:915f:df59:cb07:8bee)
[08:54:07] <jaawerth> lol who are you talking to? I don't think I have anyone on ignore
[08:54:22] <theskillwithin> for when its safe to use a new feature
[08:54:25] <theskillwithin> esp in css
[08:54:31] <jaawerth> oh
[08:54:49] <jaawerth> I just blindly trust in browerslist and houldiuses nd such,yes
[08:54:57] <jaawerth> but it depends on target market too
[08:55:03] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:55:07] <theskillwithin> ya
[08:56:11] *** Joins: remolej2 (~kenoba@user/kenoba)
[08:56:14] *** Joins: zuQe80 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[08:56:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:56:24] *** Joins: tofran7 (~tofran@37.189.158.134)
[08:56:27] *** Joins: monoxane2 (~monoxane@user/monoxane)
[08:56:30] *** Joins: SoF4 (~skius@user/skius)
[08:56:55] *** Joins: sickdyd_ (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[08:57:11] *** Joins: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[08:57:16] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[08:58:13] <dave0> google says windows xp has internet explorer 8 .. is that a good "lowest common denominator" for javascript?
[08:58:42] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[08:58:44] <theskillwithin> oof thats brutal
[08:58:51] *** Joins: Zauberfisch_ (~Zauberfis@cm147-42.liwest.at)
[08:59:05] <dave0> my friend still runs XP :-)
[08:59:15] *** Joins: hassoon_ (hassoon@grape.ircnow.org)
[08:59:20] *** Joins: Hazza (~Haxxa@202-144-174-197.ip4.superloop.com)
[08:59:22] *** Joins: StormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[08:59:23] *** Joins: sam_1 (~sam_1@87.51.251.118)
[08:59:24] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[08:59:50] *** Joins: nullheroes1 (~nullheroe@168.235.66.22)
[08:59:54] *** Joins: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[09:00:02] <theskillwithin> i for the most part dont even consider extra effort to support IE anymore
[09:00:02] *** Joins: robyndrake (~robyndrak@154.16.118.240)
[09:00:02] *** Joins: spiceman1 (~spiceman@zaq31fa4c95.rev.zaq.ne.jp)
[09:00:03] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 276 seconds)
[09:00:06] <ljharb> dave0: XP is super ancient
[09:00:08] *** Joins: aku_ (~aku@163.172.137.34)
[09:00:14] <ljharb> i'd say generally that sites still need to be supporting IE 11
[09:00:26] *** robyndrake is now known as Guest1826
[09:00:26] *** Joins: g2anj_ (~v@58.228.230.4)
[09:00:28] <ljharb> dave0: i think IE 8 possibly can't even connect to SSL websites anymore
[09:00:40] *** Joins: doc|home (~doc@user/doc)
[09:00:56] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[09:01:28] <systemfault> We should target Netscape Communicator 4.x and a screen resolution of 640x480
[09:02:13] <CoJaBo> gross.
[09:02:20] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[09:02:29] <CoJaBo> I still have a cient running Win XP
[09:03:06] *** Joins: Trieste_ (T@user/pilgrim)
[09:03:13] *** Joins: AciD (~fu@user/acid/x-5205451)
[09:03:37] *** AciD is now known as Guest3720
[09:03:45] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[09:03:55] <jaawerth> https://p.jaawerth.com/shut-it-down.gif
[09:04:16] <theskillwithin> lol
[09:04:20] *** Joins: wez_ (~wyoung@about/web/wez)
[09:05:01] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[09:05:10] *** Quits: trevors (~trevors@user/trevors) (*.net *.split)
[09:05:11] *** Quits: roadt_ (~roadt@60.168.93.178) (*.net *.split)
[09:05:11] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (*.net *.split)
[09:05:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[09:05:11] *** Quits: jonifen (~jonifen@user/jonifen) (*.net *.split)
[09:05:11] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (*.net *.split)
[09:05:11] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (*.net *.split)
[09:05:11] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (*.net *.split)
[09:05:11] *** Quits: mishiran- (~mishiranu@78.129.171.229) (*.net *.split)
[09:05:11] *** Quits: sheetjs (~sheetjs@user/sheetjs) (*.net *.split)
[09:05:11] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[09:05:11] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (*.net *.split)
[09:05:11] *** Quits: remolej (~kenoba@user/kenoba) (*.net *.split)
[09:05:11] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (*.net *.split)
[09:05:11] *** Quits: robyn (~robyndrak@user/robyndrake) (*.net *.split)
[09:05:11] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[09:05:11] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[09:05:11] *** Quits: hassoon (hassoon@grape.ircnow.org) (*.net *.split)
[09:05:11] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[09:05:11] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:05:11] *** Quits: Tabmow (~tabmow@user/tabmow) (*.net *.split)
[09:05:11] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (*.net *.split)
[09:05:11] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[09:05:12] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[09:05:12] *** Quits: realies (~realies@user/realies) (*.net *.split)
[09:05:12] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[09:05:12] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[09:05:12] *** Quits: SpiceMan (~spiceman@user/SpiceMan) (*.net *.split)
[09:05:12] *** Quits: doc (~doc@user/doc) (*.net *.split)
[09:05:12] *** Quits: AlbertLast (~nix@0exclusive.de) (*.net *.split)
[09:05:12] *** Quits: Guest3988 (~fu@user/acid/x-5205451) (*.net *.split)
[09:05:12] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[09:05:12] *** Quits: brw (~bas@haring.bas.sh) (*.net *.split)
[09:05:12] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (*.net *.split)
[09:05:12] *** Quits: Zauberfisch (~Zauberfis@cm147-42.liwest.at) (*.net *.split)
[09:05:12] *** Quits: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (*.net *.split)
[09:05:12] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[09:05:12] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[09:05:13] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[09:05:13] *** Quits: tccki (~tccki@box.webslate.co.nz) (*.net *.split)
[09:05:13] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:05:13] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:05:13] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:05:13] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (*.net *.split)
[09:05:13] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[09:05:13] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[09:05:13] *** Quits: queue- (~nerd@user/queue/x-7267619) (*.net *.split)
[09:05:13] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[09:05:13] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (*.net *.split)
[09:05:13] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[09:05:13] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (*.net *.split)
[09:05:13] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[09:05:13] *** Quits: wez (~wyoung@about/web/wez) (*.net *.split)
[09:05:13] *** Quits: aku (~aku@163.172.137.34) (*.net *.split)
[09:05:13] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[09:05:14] *** remolej2 is now known as remolej
[09:05:14] *** zuQe80 is now known as zuQe8
[09:05:14] *** tofran7 is now known as tofran
[09:05:17] *** SoF4 is now known as SoF
[09:05:35] *** monoxane2 is now known as monoxane
[09:06:01] *** Quits: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Ping timeout: 256 seconds)
[09:06:01] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[09:06:04] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[09:06:05] <jaawerth> he really yells it with the exactly right amount of intensity you'd want for shutting down XP/IE 8, too https://www.youtube.com/watch?v=S5ZSDCvUwN8
[09:06:26] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[09:06:31] *** Trieste_ is now known as Trieste
[09:06:47] <jaawerth> shut it dowwwn *machines whirring*
[09:08:17] *** Quits: kogepan (~kogepan@user/kogepan) (Ping timeout: 256 seconds)
[09:08:28] * theskillwithin walks in with the garden hose
[09:08:48] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[09:08:51] *** Quits: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 256 seconds)
[09:09:05] *** Joins: kogepan (~kogepan@user/kogepan)
[09:09:25] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[09:09:59] *** Quits: Zauberfisch_ (~Zauberfis@cm147-42.liwest.at) (Ping timeout: 256 seconds)
[09:10:01] *** Joins: Zauberfisch (~Zauberfis@cm147-42.liwest.at)
[09:10:13] *** Joins: queue (~nerd@rektnet.com)
[09:10:13] *** Joins: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[09:10:13] *** Joins: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[09:10:13] *** Joins: trevors (~trevors@user/trevors)
[09:10:13] *** Joins: roadt_ (~roadt@60.168.93.178)
[09:10:13] *** Joins: jonifen (~jonifen@user/jonifen)
[09:10:13] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[09:10:13] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[09:10:13] *** Joins: mishiran- (~mishiranu@78.129.171.229)
[09:10:13] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[09:10:13] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[09:10:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:10:13] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[09:10:13] *** Joins: Tabmow (~tabmow@user/tabmow)
[09:10:13] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[09:10:13] *** Joins: Pixi (~Pixi@user/pixi)
[09:10:13] *** Joins: AlbertLast (~nix@0exclusive.de)
[09:10:13] *** Joins: ario (~ario@159.65.220.102)
[09:10:13] *** Joins: brw (~bas@haring.bas.sh)
[09:10:13] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[09:10:13] *** Joins: tccki (~tccki@box.webslate.co.nz)
[09:10:13] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:10:13] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[09:10:13] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:10:13] *** Joins: skillbot (~skillbot@user/skillbot)
[09:10:13] *** molybdenum.libera.chat sets mode: +v skillbot
[09:10:39] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 268 seconds)
[09:10:42] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[09:10:45] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[09:11:06] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:11:31] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:11:35] *** Joins: koolazer (~koo@user/koolazer)
[09:11:38] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[09:12:00] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[09:13:39] *** Quits: happymeal` (~happymeal@user/happymeal) (Read error: Connection reset by peer)
[09:15:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:15:51] <solrize> https://news.ycombinator.com/item?id=29895938   ugh this is informative
[09:17:13] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[09:19:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:20:17] <ljharb> a rare fine, HN is usually a garbage fire
[09:20:27] <ljharb> *find
[09:22:12] <solrize> heh
[09:22:14] <solrize> yeah
[09:22:41] *** Joins: Jaran|zZzZzZzZz (~mail@p57a89e45.dip0.t-ipconnect.de)
[09:22:41] *** Quits: Jaran|zZzZzZzZz (~mail@p57a89e45.dip0.t-ipconnect.de) (Changing host)
[09:22:41] *** Joins: Jaran|zZzZzZzZz (~mail@user/jaran)
[09:22:46] <solrize> makes me feel discouraged about websockets though
[09:23:13] <solrize> i guess what i really want is some kind of preemptive multitasking in JS
[09:24:14] <dave0> threads?
[09:24:39] <solrize> threads or lightweight processes
[09:24:48] <solrize> something like erlang
[09:26:16] <ljharb> threads are terrible
[09:26:18] <systemfault> So... what is that problem you're having that you would solve using those?
[09:26:22] <ljharb> JS being single-threaded is a gift
[09:27:03] <jaawerth> also TLS is still kind of a pain in the ass when you aren't able to ust ride on the core platforms
[09:27:23] <solrize> for now just want to write a simple in-browser chat.  and you can avoid all those synchronization headaches that give people thread anxiety by message passing, again a la erlang
[09:27:33] <jaawerth> like, you can get it by plugging into openssl but that turns into a headache the minute you want to go embedding or creatin static/standalone builds of things
[09:27:38] <solrize> TLS as an in-browser API would be useful
[09:27:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:27:47] <solrize> or a wasm tls stack
[09:28:56] <jaawerth> for what? peer to peer encryption? ad-hoc client certificates and such?
[09:29:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:29:38] <systemfault> I still don't understand what you're trying to do... you're not the first one who tried to implement a websocket chat...
[09:29:58] <solrize> i've seen a bunch of browser chats that i didn't like, though maybe i should look at more
[09:30:01] <systemfault> Not even sure what TLS has to do with the conversation...
[09:30:02] <Maxdamantus> solrize: why would you want preemption in particular? Preemptive threads would just be harder to use than cooperative threads, with some potential performance improvements if you're willing/able to spend time optimising things.
[09:30:58] <solrize> Maxdamantus, so you don't end up locking out the scheduler.  i guess it is not a practical idea in a browser that has so many synchronous api's
[09:31:14] <Maxdamantus> (though to the extent that you can get "performance improvements" with preemptive threads, there's always a cost to that, and unless you really can't achieve your goal without parallelisation, the cost is probably going to outweigh any gain)
[09:31:35] <solrize> i think performance per se is not that important for this stuff most of the time
[09:31:36] <Maxdamantus> solrize: you would only lock out the scheduler if you do a busy loop.
[09:31:54] *** Joins: nomic (~nomic@185.192.69.217)
[09:32:11] <solrize> threads have always seemed more natural to me than async... maybe it's a matter of what i'm used to
[09:32:15] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[09:32:20] <Maxdamantus> solrize: and even if you do that accidentally, with cooperative threads you could just add a yield into your loop.
[09:32:28] <jaawerth> I'm alll about the worker pools
[09:32:30] <solrize> there is a famous rant about node.js by an erlang guy on youtube... you've probably seen it
[09:32:40] <solrize> Maxdamantus, i don't know a good way to put yield into javascript?
[09:32:47] <jaawerth> erlang is the wackiest of alll async platforms though lol
[09:32:55] <jaawerth> it's awesome, but man
[09:32:57] <solrize> it is nice
[09:33:16] <solrize> i use python in about the same way
[09:33:21] <Maxdamantus> solrize: right, so if you're not trying to make things work faster through paralellisation, you'll almost certainly prefer cooperative threads to preemptive threads (note that JavaScript provides neither).
[09:33:34] <jaawerth> "let's build a stateless system on a really complicated VM that does nothing but side effects" https://p.jaawerth.com/my-mind.gif
[09:33:46] <jaawerth> (and somehow succeed)
[09:33:57] *** Quits: kmh (~kmh@2a00:6020:5004:6800:915f:df59:cb07:8bee) (Quit: Leaving)
[09:34:26] <solrize> cooperative would be ok if there was a way to yield, i mean all the green thread systems are cooperative under the hood unless there is a hardware interrupt driving the scheduler somehow
[09:34:41] <hexology> is lodash truncate() materially different from subString()? i am looking at a codebase that uses a handful of helper functions from lodash but doesn't actually use functional programming anywhere.  i am wondering if i can delete the entire dependency,  but i want to know if these helpers are worth keeping around
[09:34:59] <solrize> i guess the difference is that the yield is built into the language runtime instead of explicit
[09:35:01] <hexology> other helper functions used in this way: isEmpty(), first(), flatten()
[09:35:13] <Maxdamantus> solrize: in the async/await model, you can yield by doing something like: await new Promise(resolve => { setTimeout(resolve, 0); });
[09:35:14] <jaawerth> the main thing lodash gives you is a known api of utils. it doesn't offe much that's unique these days
[09:35:33] <solrize> Maxdamantus, ok i'll try some stuff like that
[09:35:37] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[09:35:48] <hexology> alright. maybe i'll try to double check that the source code isn't doing anything too interesting
[09:35:52] <hexology> always happy to delete a dep
[09:35:54] <jaawerth> though there aare a few usecases where even I'm like "this wouldn't be that bad to write but there are other things I could be doing, oh wait there's a standaone lodasdh module for it"
[09:35:57] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[09:36:05] <hexology> we are using ramda too in the same application
[09:36:13] <jaawerth> intense
[09:36:16] <hexology> two different isEmpty helper functions from 2 different librariers
[09:36:17] <solrize> buthanks
[09:36:21] <jaawerth> ramda rubs people the wrong way but I like it
[09:36:26] <hexology> and still almost no functional programming :)
[09:36:27] <solrize> what is ramda?
[09:36:29] <Maxdamantus> solrize: green threads implementations (eg, Go, Haskell) are usually considered to be preemptive, because they either run multiple threads in parallel or they interrupt (preempt) a running thread that hasn't yielded.
[09:36:42] <jaawerth> solrize: it's like if lodash were written by clojure fans
[09:36:47] <jaawerth> actually it's literally that
[09:36:49] <solrize> what is lodash?
[09:36:50] <hexology> heh
[09:37:05] <jaawerth> utility belt lib
[09:37:12] <hexology> i used to use stuff like this in python all the time,  but i stopped
[09:37:16] <jaawerth> don't ask me what a belt is
[09:37:20] <jaawerth> ;-)
[09:37:21] <Maxdamantus> solrize: note though that unless you've got a CPU-bound computation, you probably don't actually want to yield.
[09:37:28] <hexology> i got it out of my system by writing hobby code instead... now i stick to the boring stuff at work
[09:37:28] <theskillwithin> solrize lodash.com
[09:37:36] <solrize> ah ok thanks
[09:38:04] <Maxdamantus> solrize: explicit yielding is only useful if you've got a CPU-bound task which is taking a long time, in which case you will yield to prevent indefinite blocking of the UI/network.
[09:38:15] <jaawerth> haha when I use python I tend to to reach for libraries like toolz, which was also v ery inspired by the clojure stdlib, but my pytho code gets called "not pythonic"
[09:38:23] <hexology> i used to do the same
[09:38:28] <jaawerth> then again when Ican get away with it I'll just write hylang
[09:38:36] <hexology> i wouldn't accuse toolz of being unpythonic, but the language really doesn't lend itself to clojure-style programming
[09:38:37] <solrize> what is hylang?  i'm not from around here
[09:38:52] <jaawerth> yeah it isn't big on composition and such
[09:39:06] <jaawerth> solrize: it's a lisp that runs on the python vm
[09:39:08] <hexology> +1 about hy,  unfortunately it's in this kind of chaotic between-state where they released announced 1.0 way too early,  so "1.0alpha3" has diverged wildly from git master
[09:39:19] <hexology> to the point where i gave up trying to follow git master and i'll wait until 1.0 is actually out
[09:39:20] <solrize> ah ok thanks
[09:39:52] <hexology> its an interesting clojure/lisp/scheme hybrid too
[09:40:00] <jaawerth> huh I didn't really we beat hylang to 1.0
[09:40:03] <hexology> and it compiles to plain python so you can interop with python easily
[09:40:03] <jaawerth> er, we being fennel
[09:40:09] <hexology> i knew i recognized your name
[09:40:12] <hexology> you did,  by a long way
[09:40:20] <hexology> but lua is a much easier target
[09:40:22] <solrize> doesr it have cps conversion ?
[09:40:41] <solrize> yeah i use python but it is sort of the new cobol :/
[09:40:48] <hexology> good question, i don't think so because it generates fairly readable python code
[09:41:11] <hexology> i havent seen any cps stuff in the generated python ive read, but i havent tried to read the output from a large compiled hy program
[09:41:12] <solrize> i want to use purescript but have been put off by its JS and NPM dependencies
[09:41:22] <solrize> well what happens with simple tail recursion?
[09:41:24] <ljharb> lol that's the only reason TO use it
[09:41:31] <ljharb> solrize: avoid "not JS", tbqh
[09:41:43] <solrize> not JS = purescript etc.?
[09:41:52] <jaawerth> bene a while since I've poked at it, npm deps are actually a step in the right direction though... back in the day their package manger wwas built on top of bower
[09:41:52] <hexology> hy has a loop/recur macro
[09:41:55] <hexology> i dont remember what fennel does
[09:42:15] <ljharb> solrize: yes
[09:42:23] <solrize> i got scared of JS when I saw 1+"1" = 11  or something like that
[09:42:25] <hexology> so there's no compelling reason to use `_.isEmpty(x)` instead of (!!x) when i know that x is definitely a plain array, right?
[09:42:27] <ljharb> solrize: write actual javascript. typescript if you really must (but you probably shouldn't)
[09:42:32] <ljharb> solrize: embrace it
[09:42:35] <jaawerth> lua already has TCO so fennel gets it for free
[09:42:38] <systemfault> solrize: If you're into pure FP, I've had fun with TypeScript and Effect-TS
[09:42:39] <solrize> fair enough
[09:43:04] <solrize> i talked to someone about joining a TS project and i think TS has a fair amount of traction while PS is a nerd thing
[09:43:22] <systemfault> hexology: !! won't check if the array is empty
[09:43:28] <jaawerth> fennel targets a light touch so as to maintain lua's tiny embddability and focuses more on lang and compiletime semantics, but we do have stuff like compsition macros icollect/collect/accumulate that let you express most higher-order things like fold/rduce, every, map, filter ,etc
[09:43:40] <systemfault> hexology: (!x.length)
[09:43:44] <solrize> what is fennel?  PS has a lua back end fwiw
[09:43:55] <solrize> i've sort of lost interest in lisp by now
[09:44:14] <solrize> except as a backend
[09:44:25] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:44:45] <jaawerth> it's a lightweight lisp that runs on fennel ;). full disclore, I'm inolved in the project (though there's a core contributor who I will freely admit does the lion's share of work)
[09:44:51] <jaawerth> er, runs on lua rather
[09:45:01] <solrize> ah nice
[09:45:05] <jaawerth> what's nice is since lua embeds all over the place, fennel gets to hitch a ride
[09:45:12] <jaawerth> and it works with everything >= lua 5.1
[09:45:16] <hexology> purescript lua backend? interesting.
[09:45:18] <hexology> there was an idris2 lua backend but development faltered and it wont work on new versions
[09:45:21] <hexology> fennel is a lisp that compiles to lua solrize
[09:45:23] <hexology> systemfault: is that better than !!?
[09:45:25] <hexology> we use the double-bang idiom a lot in this codebase
[09:45:27] <hexology> fennel makes lua scripting a lot more fun
[09:45:35] <solrize> yeah it sounds nice, though i liked purescript to lua better
[09:45:50] <jaawerth> purescript is its own beast, they target different things
[09:46:04] <solrize> i had a joke that i wanted to make an embedded haskell dialect for microprocessors and call it control-H so that the file extension would be a backspace character
[09:46:26] <solrize> but then it occurred to me, purescript+lua or purescript+hedgehog VM is sort of already that
[09:47:09] <hexology> wow there's an erlang purescript backend to
[09:47:11] <jaawerth> wait when you say purescript + lua do you mean it's compiling to lua instead of js?
[09:47:11] <hexology> too*
[09:47:14] <jaawerth> that is interesting
[09:47:16] <hexology> what's hedgehog vm?
[09:47:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:47:33] <solrize> hexology, yes, there is also a BEAM backend and also c++11 using shared_ptr
[09:47:35] <solrize> sec
[09:47:36] <hexology> wild
[09:47:47] <Maxdamantus> Oh no, 1-based arrays.
[09:47:47] <solrize> https://github.com/sbp/hedgehog  hedgehog is a really tiny functional lisp
[09:47:54] <hexology> looks like there is also a fork of purescript called hamler now, which specifically targets erlang/beam
[09:48:00] <hexology> Maxdamantus: yep it's a common complaint
[09:48:02] <solrize> oh i didn't know that
[09:48:07] <solrize> you mean lua?  yeah
[09:48:17] <jaawerth> 1-based arrays are like.. I used to think I would care but I ended up not caring at all
[09:48:21] <Maxdamantus> Yeah, I knew Lua had them. Was looking into whether Fennel had them.
[09:48:30] <hexology> yes it does
[09:48:43] <hexology> it's basically just alternative syntax for lua + some useful builtins
[09:48:46] <hexology> very thin layer over lua
[09:48:55] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[09:48:56] <jaawerth> and it's not like you're actually counting pointer byte offsets in any arrays on a vm
[09:49:02] <solrize> hedgehog's main data structure is functional AVL trees
[09:49:03] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:49:07] *** Joins: spacenomad (~nomad@user/spacenomad)
[09:49:16] <solrize> i think lua doesn't have anything like that unless fennel or PS supplies it
[09:49:33] <hexology> i will say, i know people dislike undefined vs null in javascript sometimes.  but after using lua, i am aways grateful for the distinction
[09:49:40] <solrize> there was something called alpaca that was another typed front end for beam but idk what happened with it
[09:49:55] <hexology> there's gleam which seems to be actively developed
[09:49:59] <jaawerth> nah, I want to eventually add some of that to the ecosystem but fennel's whole thing is minimal runtime overhead
[09:50:02] <solrize> what is gleam?
[09:50:16] <jaawerth> glam BEAM?
[09:50:17] <hexology> some kind of statically typed functional programming beam language
[09:50:26] <solrize> ah ok
[09:50:44] <solrize> i think it would be ok to compile hedgehog's avl trees or something similar into lua or maybe even picolisp
[09:51:06] <jaawerth> I still haven't tried clojerl or EFL but it feels like it could be the perfect combo
[09:51:12] <Maxdamantus> If `a` is an array of 3 arrays of 10 things, what array does item 30 go into? You don't need byte offsets to find problems where counting from 0 is more natural.
[09:51:33] <solrize> i haven't felt the need for that... i've looked at EFL but why bother, i don't mind plain erlang
[09:51:35] <Maxdamantus> Or my usual version of that question is "which year of which century are we currently in?"
[09:51:37] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[09:51:46] <jaawerth> there are tradeoffs. in exhcange, you can do t[#t] = v
[09:51:57] <jaawerth> either way you're going to have to remember the offset somewhere
[09:52:21] <systemfault> hexology: You cannot use !! with arrays...
[09:52:30] <jaawerth> it's mor annying to get used to the fact that you can use tables as either as arrays AND objects at the same time
[09:52:33] <systemfault> hexology: So yeah, anything is better than something that doesn't work at all
[09:52:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[09:52:47] <Maxdamantus> You can do that in JS too, though it means something different.
[09:52:57] <hexology> you can't use it with arrays?
[09:53:05] <systemfault> Maxdamantus: Yeah... but it's kind of useless...
[09:53:06] <Maxdamantus> n> const a = []; a[a.length] = "foo"; a[a.length] = "bar"; a;
[09:53:07] <jellobot> (okay) [ 'foo', 'bar' ]
[09:53:20] <Maxdamantus> But arguably more logical.
[09:53:35] <jaawerth> er sorry I meant t[#t] points to the end
[09:53:39] <Maxdamantus> Just happens that there's a method for that, I guess because JS doesn't have a single-character `length` operator.
[09:53:40] <jaawerth> it's my bedtime
[09:53:46] <Maxdamantus> Yes, I guessed that.
[09:53:49] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[09:53:54] <hexology> n> const a = [1,2,3]; const b = []; !!a; !a; !!b; !b;
[09:53:55] <jellobot> (okay) false
[09:54:04] <systemfault> hexology: !!array is always "true" no matter if the array is empty or not
[09:54:15] *** Joins: jazzy2 (~jaziz@user/jaziz)
[09:54:16] <hexology> ah
[09:54:18] <hexology> i see
[09:54:32] <jaawerth> anyway it's funny to me how many js people don't like lua and vice versa when the languages' semantics are actually very similar
[09:54:46] <hexology> there might be some other people in our organization who don't realize that, systemfault :)
[09:54:49] <hexology> i got this idiom from coworkers
[09:54:53] <solrize> haha
[09:55:09] <jaawerth> just add more bangs for emphasis
[09:55:17] <solrize> does lua have anything like async/await, and async i/o primtiives?
[09:55:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:55:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:55:30] *** Joins: wroathe (~wroathe@user/wroathe)
[09:55:33] <jaawerth> it has coroutines, which are basically more powerful generators
[09:55:52] <hexology> you can do cooperative multitasking w/ coroutines right?
[09:56:01] <jaawerth> but the vm itself is minimal to be embeddable everywhere so if you want proper async io you'll need to a native bindings. but it'as also built to be trivial to bind to C et al
[09:56:10] *** Quits: riotz (riotz@user/riotz) (Ping timeout: 260 seconds)
[09:56:19] <solrize> oh right yeah
[09:56:25] <solrize> it has good coroutines
[09:56:33] <jaawerth> the coros are more for the flow control. you can transfer control across the stack and such (well except on non-luajit 5.1, I learned that the hard way)
[09:56:35] *** Joins: riotz (riotz@is.only.here.for-some.fun)
[09:56:58] *** riotz is now known as Guest8414
[09:57:08] <solrize> so you could put an io_uring wrapper around it and have a mini beam
[09:57:30] <solrize> well you do need those yields
[09:57:32] <jaawerth> hehe I've thought about doing something like that with zeromq
[09:57:33] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[09:57:46] <jaawerth> or just cqueues, but I want an excuse to play with zeromq
[09:59:17] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[09:59:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:59:52] *** Parts: Guest1826 (~robyndrak@154.16.118.240) ()
[10:00:31] <jaawerth> solrize: so this is one way we use it in the tests - you can yield from a callack so here I used it to turn the repl into a flat send/receive function to run tests and completion throughg it. but since we run our tests on all lua versions, and non-jit 5.1 can't do that, when I first wrote it, the repl loop ended up generating gigybtes upon gigabytes of repeating ereor beffore I managed to get
[10:00:33] <jaawerth> it to stop, lol https://github.com/bakpakin/Fennel/blob/main/test/repl.fnl#L11-L25
[10:01:01] <jaawerth> basically just spamming the hell out of circleci
[10:03:03] <solrize> haha
[10:04:16] *** Joins: fef (~thedawn@user/thedawn)
[10:06:58] <Maxdamantus> If you've got coroutines as in */yield, you basically have async/await.
[10:07:47] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[10:08:27] <oscurochu> these unit tests that i thought were going to be stupidly redundant, i can already see how they have saved my future self from going [more] gray
[10:08:29] <Maxdamantus> function foo*(bar){ return makePromise(function*(){ return yield doSomething(bar) + yield doSomething(4); }); }
[10:08:40] <Maxdamantus> async function foo(bar){ return await doSomething(bar) + await doSomething(4); }); }
[10:09:50] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[10:10:01] <jaawerth> yeah eactly, they're more powerful versions of generators and all you need for async/await generators. well, and the platform apis undre the hood
[10:10:33] <jaawerth> but coros are bread and butter control structures for varous threading-type things, including goroutines type chanenls and whatnot. I like them
[10:10:53] *** Joins: spacenomad (~nomad@user/spacenomad)
[10:12:58] <systemfault> yield* is fun, you can even implement do-style monad stuff...
[10:13:38] <jaawerth> hahaha when ES6 generators were new I went to town on them and implementing concat with them was my favorite
[10:13:49] *** Quits: ZeroWalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d) (Quit: Leaving)
[10:14:17] <jaawerth> because it's fust function* concat(...iters) { for (const iter of iters) yield* iter; }
[10:14:37] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Ping timeout: 240 seconds)
[10:14:43] <systemfault> Example https://github.com/Effect-TS/core/blob/master/packages/core/test/gen.test.ts#L44
[10:14:50] <systemfault> Powerful stuff..
[10:14:54] *** Joins: dvanloon7 (~dvanloon@user/dvanloon)
[10:15:59] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 250 seconds)
[10:16:30] <jaawerth> I still don't use them often though on the client-side, it's fine in apps but in libraries, having to bundle renerator runtime ca be  big ask. but I also enjoyed implementing tries that way, where [Symbol.iteartor] on the nodes let you lazily walk the tree
[10:20:00] <Maxdamantus> Hmm.. Why do you need `yield*` for that? a regular `yield` should be capable enough.
[10:20:33] <Maxdamantus> not sure what the need for the `_` wrapper is, should also be able to just achieve it using `const a = yield O.some(1);`
[10:20:48] <Maxdamantus> just relies on `O.gen` being defined appropriately.
[10:21:06] <jaawerth> nothing wrong with a little sugar once in a while :P
[10:21:43] <Maxdamantus> Here's an example of an `IO` monad with a function to create an `IO` operation from a generator function: https://gist.github.com/Maxdamantus/9aa0199af9b86fb9e71a1c5d12606e15
[10:22:19] <solrize> goldbach: forall n. even n => n=p+q, p, q prime
[10:22:19] <solrize> twin prime: forall n. exists p. p>n, p prime, p+2 prime
[10:22:19] <solrize> collatz: forall n. exists k. forall t.  iter_k(collatz, t) = 1.
[10:22:19] <solrize>    anyone use idris?  it looks nice
[10:22:29] <solrize> oh oops wrong paste
[10:22:39] <solrize> https://github.com/nickdrozd/busy-beaver-stuff/tree/main/idris
[10:22:45] <Maxdamantus> (no dependencies there; the `IO` moand, generator and some sleep example are all in  that gist)
[10:28:01] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[10:28:32] *** Joins: spacenomad (~nomad@user/spacenomad)
[10:29:00] <systemfault> Maxdamantus: Well, if I can make your code typecheck in TS, I would totally send a PR.
[10:30:06] <ljharb> that should really be a `class`
[10:30:32] <systemfault> Maxdamantus: It's like that because the main IO type of the lib is a bit complex I guess
[10:31:24] <systemfault> Uses Effect<R, E, A> which is more or less like a reader + either for IO
[10:37:19] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[10:37:48] *** Joins: Akiva (~Akiva@user/Akiva)
[10:40:19] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:45:34] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:46:04] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[10:46:45] *** Joins: poncha (~poncha@user/poncha)
[10:57:02] *** Joins: thiras (~thiras@user/thiras)
[11:03:37] *** Quits: Swayze (~gryster@user/swayze) (Remote host closed the connection)
[11:04:20] *** Joins: Swayze (~gryster@user/swayze)
[11:04:58] *** Joins: N4buc0 (~N4buc0@200.146.13.23.dynamic.dialup.gvt.net.br)
[11:06:31] *** Joins: lenarhoyt (~lenarhoyt@mail.bfc-net.de)
[11:08:11] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[11:11:15] <Maxdamantus> systemfault: afaik TypeScript has no way to properly type the `co` function.
[11:11:57] <Maxdamantus> I can imagine extensions that would allow it, but I suspect they haven't added such functionality.
[11:12:37] <Maxdamantus> systemfault: otherwise, it's basically all typeable, though `join` should probably be moved outside of the object, since that's difficult to type there.
[11:13:06] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:13:14] <Maxdamantus> function join<T>(op: IO<IO<T>>): IO<T> { .. }
[11:14:11] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[11:14:23] <systemfault> I wonder if join(this: IO<IO<T>>) {} would work as a member function
[11:14:50] <Maxdamantus> That looks invalid to me.
[11:15:31] <Maxdamantus> did you mean to have a `T` type parameter?
[11:15:52] <Maxdamantus> it should look something like one of these two things, though I'm not aware of TS supporting either pattern:
[11:16:11] <Maxdamantus> join<T>(this: IO<IO<T>>): IO<T> { ... }
[11:16:13] <systemfault> It's magic syntax to specify the type of this in a function
[11:16:14] <Maxdamantus> or:
[11:17:23] <Maxdamantus> join<case T of IO<IO<U>>>(): IO<U> { .. }
[11:17:58] <Maxdamantus> hang on, I'll rewrite that second one, because I remembered the syntax I was trying to think of
[11:19:30] <systemfault> Maxdamantus: https://tsplay.dev/w145GW
[11:20:18] <Maxdamantus> join(): T extends IO<infer U>? IO<U> : never { .. }
[11:20:35] <Maxdamantus> hm, that last thing that I wrote seems like it might be possible.
[11:20:55] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[11:20:56] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[11:21:14] <Maxdamantus> but imo I'd just move `join` outside since it's simpler type-wise.
[11:21:51] <systemfault> I'm used to using pipeable functions because of fp-ts/effect-ts
[11:22:18] <systemfault> Most FP libs moved to that because they want to be tree shakable...
[11:22:27] <Maxdamantus> Oh okay, so that's basically my first example.
[11:22:38] <Maxdamantus> I wonder if my last one also works.
[11:23:49] <Maxdamantus> Hmm.. Your code sample doesn't seem to actually type the body of the `join` function correctly.
[11:24:18] <systemfault> It doesn't?
[11:24:35] <Maxdamantus> https://www.typescriptlang.org/play?#code/MYGwhgzhAECSAmBTAdgFwJaoJ4B4AqAfNAN4BQ00wA9shKgE4CuwqV9AFPYmPDSFtABuYEI0QAuaHgCUJAL6ly0OmAzBoVAGb4C7VJJkklFLqkb1k0ZIgDucJGkxY90pQqUArKumQ4AqrqoABboEJIIKBjYOBGO0QEE0uEOUbgBRhQmiGYW0MGhAHTCoohupO4A9BWxqQVa7ACMAAzSBV4+7LJV0ACi9PRs0IgAHgAOiCyI8Io1TnWa7LPY840tre3IndDdAMpBVIwg8NA2bADWQA
[11:24:58] <Maxdamantus> Oh, nevermind. that is valid.
[11:25:41] <theskillwithin> Maxdamantus use the Link Shortener plugin on typescriptlang play
[11:25:41] <systemfault> TS' typesystem is surprisingly powerful :P
[11:26:35] <Maxdamantus> I couldn't see a link shortener.
[11:26:53] <systemfault> Maxdamantus: It's not enabled by default, you need to enable it in the plugins
[11:27:17] <systemfault> (Yes, it's dumb that it's not enabled by default... pasting those stupidly long URLs sucks)
[11:28:27] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[11:28:36] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Read error: Connection reset by peer)
[11:28:43] <Maxdamantus> Okay, well here's the short version of my previous link, though I realised after posting it that it was in fact correct: https://tsplay.dev/WK7oZW
[11:29:13] <Maxdamantus> (I was initially thinking that it had allowed an incorrect definition of `join`)
[11:29:51] <systemfault> A nice encoding was recently found to emulate HKTs, a lot nicer than the one fp-ts uses
[11:30:24] <systemfault> Maxdamantus: If you're interested https://dev.to/matechs/encoding-of-hkts-in-typescript-5c3
[11:30:37] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[11:31:13] <systemfault> It doesn't need a global dictionary of types... which is quite an improvement.
[11:31:33] <systemfault> (To be augmented via interface merging)
[11:33:16] <systemfault> It's probably as close as we'll ever get to HKTs in TS.
[11:34:02] *** Joins: ccapndave (~ccapndave@213.55.220.234)
[11:34:10] <ccapndave> Hey everyone
[11:34:28] <Maxdamantus> I'll probably look into it some time.
[11:34:28] <systemfault> Hey
[11:34:42] <ccapndave> I have a `js` file compiled with `esbuild` and I want to import it into a page with a `script` tag and then render a React component inside of it.
[11:35:00] <ccapndave> The only thing is, I'm not quite sure how to get at anything inside the compiled file in order to render it.
[11:35:11] <ccapndave> Is this the wrong approach?  Would I be better to have the `js` file render itself?
[11:35:41] <ccapndave> Or I guess I could export something to `window.<blah>` but that doesn't feel right
[11:35:51] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:36:16] <Maxdamantus> Though I don't like that you have to use esoteric typing to handle such scenarios. At some point it's probably better to just simplify things by using unsafe `as` expressions.
[11:36:52] <Maxdamantus> Proper HKP is the preferred simple approach.
[11:37:33] <systemfault> I don't mind esoteric shit as long as it's hidden from the user of the lib
[11:38:39] <Maxdamantus> Sure, I guess if I were writing my own code I might mind it less.
[11:39:02] <Maxdamantus> code that doesn't need to be maintained by other people.
[11:39:17] <ccapndave> I figured out a good solution - use a web component
[11:39:52] *** Joins: spacenomad (~nomad@user/spacenomad)
[11:40:33] <systemfault> Maxdamantus: A more "real-world" example https://github.com/mikearnaldi/hkt-new/blob/main/src/index.ts
[11:40:36] <systemfault> Anyway :P
[11:41:08] *** Quits: naeluh__ (sid95128@id-95128.lymington.irccloud.com) (Ping timeout: 268 seconds)
[11:41:08] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[11:41:21] *** Joins: naeluh__ (sid95128@id-95128.lymington.irccloud.com)
[11:41:37] <ccapndave> Maxdamantus: Cool - I hadn't heard of effect-ts
[11:41:50] <Maxdamantus> ccapndave: I didn't mention it, systemfault did.
[11:41:51] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:410:b257:d310:4a8f) (Ping timeout: 256 seconds)
[11:42:00] <ccapndave> systemfault: Cool - I hadn't head of effect-ts
[11:42:04] <ccapndave> Head?
[11:42:07] *** Joins: jochum (~quassel@user/jochum)
[11:42:43] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[11:42:59] *** Quits: Decker (~d3x0r@user/d3x0r) (Ping timeout: 268 seconds)
[11:43:10] <ccapndave> I'm just starting a new TS project, I might check it out
[11:43:13] <jochum> Hey good Morning, does someone know why this is false: https://dpaste.org/TEYX ? (Date stuff)
[11:43:41] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: back later)
[11:43:48] <jochum> Ohh me idiot ...
[11:44:07] *** Joins: Decker (~d3x0r@user/d3x0r)
[11:45:24] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[11:45:42] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Quit: !be back soon)
[11:46:07] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[11:46:20] *** Joins: D4mned (~D1mned@212.101.251.178)
[11:48:20] <jochum> https://dpaste.org/ikTG <-- this one
[11:48:55] <silly> i see no difference
[11:49:10] *** Quits: ccapndave (~ccapndave@213.55.220.234) (Quit: Textual IRC Client: www.textualapp.com)
[11:50:21] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[11:50:50] <systemfault> I get true here...
[11:51:03] <silly> oh really?
[11:51:15] <systemfault> https://jsfiddle.net/pgzt7bam/
[11:52:49] <silly> oh, i didn't see how the < changed into >
[11:53:39] <jochum> silly, systemfault: my goal is to compare dates with a filter date
[11:54:13] <jochum> Currently everything isn't compared as the getTime of bDate is so high
[11:55:38] *** Joins: spacenomad (~nomad@user/spacenomad)
[11:57:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469)
[11:58:33] *** Joins: thojanssens (~thojansse@182.232.32.63)
[11:58:50] <thojanssens> hello
[12:00:29] <D4mned> STOP! this is Internet Engineering Task Force!
[12:00:32] <D4mned> hands up!
[12:00:40] <thojanssens> \o/
[12:00:45] <D4mned> hahaha
[12:00:52] <D4mned> what a cool title man
[12:01:41] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[12:02:25] <thojanssens> how do I test that a function is immutable? e.g. `const obj = { /*...*/ }; someFunction(obj);` how is it best to test that `someFunction` didn't modify the `obj` input (including nested objects)?
[12:04:31] *** Joins: voltage_ (voltage@user/voltage)
[12:05:24] <silly> by reading it and confirming personally
[12:05:27] *** jazzy2 is now known as jazzy
[12:05:35] <sheetjs> freeze it
[12:06:22] <sheetjs> n> const mod = (o) => { o.x = 3; }, val = {}; mod(val); val
[12:06:23] <jellobot> (okay) { x: 3 }
[12:06:38] <sheetjs> n> const mod = (o) => { o.x = 3; }, val = {}; Object.freeze(val); mod(val); val
[12:06:38] <jellobot> (okay) {}
[12:07:02] <sheetjs> n> "use strict"; const mod = (o) => { o.x = 3; }, val = {}; Object.freeze(val); mod(val); val
[12:07:03] <jellobot> (fail) TypeError: Cannot add property x, object is not extensible
[12:07:28] <sheetjs> (without "use strict", the mutation silently fails)
[12:09:12] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:09:19] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[12:09:23] <sysRPL> hello
[12:09:55] <thojanssens> n> "use strict"; const mod = (o) => { o.x.y = 3; }, val = { x: { y: 2 } }; Object.freeze(val); mod(val); val
[12:09:56] <jellobot> (okay) { x: { y: 3 } }
[12:10:00] <thojanssens> sheetjs, ^
[12:11:19] <sheetjs> right freeze is shallow
[12:11:27] <silly> you need deepFreeze
[12:11:31] <thojanssens> sheetjs, yes, so the test on immutability is limited
[12:11:37] <sheetjs> make your own
[12:11:40] <thojanssens> thanks i'll look for deepFreeze
[12:11:46] <sheetjs> https://github.com/jsdf/deep-freeze/blob/master/index.js
[12:11:48] <silly> that's preventing, not testing
[12:12:05] <thojanssens> silly, this code will be called in a test suite
[12:12:07] <sheetjs> its easy to make that a test
[12:12:16] <silly> oic
[12:12:54] <sheetjs> function testIfImmutable(func, data) { try { "use strict"; deepFreeze(data); func(data); return true; } catch(e) { return false; } }
[12:13:16] <sheetjs> where deepFreeze is the recursive freeze thing
[12:13:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[12:14:08] *** Joins: spacenomad (~nomad@user/spacenomad)
[12:15:12] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[12:15:54] <thojanssens> nice ty guys!<3
[12:19:44] <sysRPL> is typescript a dirty word in the channel?
[12:20:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:20:02] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[12:20:27] *** Joins: pluri (~pluri@user/pluri)
[12:20:50] <theskillwithin> sysRPL of course not
[12:21:29] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[12:21:30] <sysRPL> ok, so typescript, javascript, and dart walked into a bar ...
[12:22:45] <silly> but dart wasn't allowed to enter
[12:22:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[12:23:09] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[12:23:24] *** Joins: henry404089 (~henry4040@175.181.155.165)
[12:23:25] <silly> typescript started a fight
[12:23:59] <silly> what happened to javascript?
[12:24:57] *** Quits: henry40408 (~henry4040@175.181.188.127) (Ping timeout: 240 seconds)
[12:24:58] *** henry404089 is now known as henry40408
[12:25:09] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:30:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: You have been kicked for being idle)
[12:30:19] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[12:37:03] *** Joins: benni (~benni@ipbcc2c807.dynamic.kabel-deutschland.de)
[12:37:17] *** Joins: sagax (~sagax_nb@user/sagax)
[12:38:20] <sheetjs> sysRPL: overall, once you accept the idea that the code you are writing is not the code that is running in your web page, modern JS and typescript are on even footing
[12:39:27] *** Quits: oscurochu (~oscurochu@37.120.215.102) (Remote host closed the connection)
[12:41:24] *** Joins: Guest8567 (~Guest85@105.112.161.47)
[12:42:28] *** Quits: Guest8567 (~Guest85@105.112.161.47) (Client Quit)
[12:45:00] *** Quits: lenarhoyt (~lenarhoyt@mail.bfc-net.de) (Quit: Client closed)
[12:47:02] *** Quits: devslash (~devslash@46.232.211.210) (Quit: ZNC 1.8.2 - https://znc.in)
[12:47:37] *** Joins: devslash (~devslash@46.232.211.210)
[12:47:54] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[12:49:15] *** Joins: Jck_true2 (~jcktrue@user/jck-true/x-0200799)
[12:50:08] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[12:50:14] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Ping timeout: 260 seconds)
[12:50:14] *** Jck_true2 is now known as Jck_true
[12:50:59] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:52:01] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[12:52:10] *** Quits: benni (~benni@ipbcc2c807.dynamic.kabel-deutschland.de) (Quit: Client closed)
[12:53:49] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[12:56:50] *** Joins: pluri (~pluri@user/pluri)
[13:02:55] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[13:07:38] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:08:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[13:08:19] <gde35> https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/
[13:08:21] <gde35> wild
[13:09:09] <sheetjs> its read only
[13:09:23] <gde35> sheetjs: yeah but still very useful
[13:11:45] <sheetjs> https://blog-nrrd.doi.gov/homepage-revamp-part-two/ people do this with excel files too
[13:12:16] <sheetjs> tragically they allude to the gatsby-transformer-excel plugin but no mention of how that library is a light wrapper over sheetjs :(
[13:12:18] <gde35> sheetjs: I one time bake a half baked torrent search engine into a html torrent. It loads a html document with 1000 table rows runs some js then loads the next page.
[13:12:38] <gde35> sheetjs: eh
[13:12:46] <gde35> sheetjs: send them a message?
[13:13:05] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:13:40] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[13:13:54] <gde35> from the local file system loading 100 pages one after the other isn't even all that slow :P
[13:14:12] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[13:15:51] <gde35> sheetjs: I passionately hate static site generators
[13:16:13] <sheetjs> that wasn't the reason for writing the plugin
[13:16:38] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[13:16:44] <sheetjs> because of how gatsby hot loaded, it was possible to make a local site refresh data from an excel file automatically
[13:16:53] <sheetjs> so you could edit a file, save it, and the page would refresh with new content
[13:17:03] <gde35> nice
[13:17:18] <gde35> how unusual for excell
[13:17:19] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[13:17:33] <sheetjs> well gatsby had some file watcher thing
[13:19:00] <solrize> https://www.greyblake.com/blog/from-typescript-to-rescript/   woh now there is another typed JS, based on rust?  i mean what's the point?  JS is garbage collected so the main interesting part of Rust's type system is useless...
[13:19:33] <gde35> sheetjs: I find it mind blowing how some large offices mule around excel files as if its a sensible solution for everything
[13:19:58] <sheetjs> you say that gde35 but the alternatives aren't better
[13:20:45] <gde35> sheetjs: I'm very ignorant about excel and have no idea about the alternatives. All I know is that people at work seem to always be 4-5 versions behind on everything.
[13:21:17] <gde35> and that they cant seem to organize anything into folders
[13:21:49] <gde35> sheetjs: it seems IT failed horrifically all over the place
[13:22:19] <sheetjs> it's easy to point blame on individuals
[13:22:45] <gde35> I'm not that kind of guy
[13:23:18] <sheetjs> https://old.reddit.com/r/software/comments/s053t3/lastpass_is_holding_peoples_data_hostage_and_it/
[13:23:42] <sheetjs> ^^ that is becoming more commonplace and is arguably the root cause of the problems we have now
[13:23:47] <gde35> it could be that old geezers in politics failed to jump on the IT bandwagon
[13:23:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:24:00] <gde35> some time 30 years ago or so
[13:24:29] <solrize> the young geezers in IT right now manage to screw things up pretty good without politicians being involved
[13:24:39] <gde35> I often think of this lol : https://en.wikipedia.org/wiki/Tower_of_Babel#Sumerian_and_Assyrian_parallel
[13:24:49] <gde35> solrize: yes omg
[13:24:59] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[13:25:02] <sheetjs> theres a famous quote attributed to upton sinclair
[13:25:03] <gde35> solrize: where have all the neck beards gone?
[13:25:22] <sheetjs> "It Is Difficult to Get a Man to Understand Something When His Salary Depends Upon His Not Understanding It "
[13:25:25] <gde35> wait that link is wrong https://en.wikipedia.org/wiki/Tower_of_Babel
[13:25:35] <gde35> sheetjs: indeed
[13:26:33] <solrize> did you all see that erlang guy rant about node?    warning NSFW, lots of swearing.   https://www.youtube.com/watch?v=bzkRVzciAZg
[13:26:33] <skillbot> YouTube Title: Node.js Is Bad Ass Rock Star Tech
[13:26:37] <gde35> our incentive structures are all fucked up
[13:26:55] <gde35> solrize: ofc
[13:27:39] *** Joins: rcoote (~rcoote@2a02:908:690:a140:5630:a269:ee65:4eb)
[13:28:50] <gde35> solrize: its not even true, event driven shit cant consume available resources
[13:29:19] *** Joins: spacenomad (~nomad@user/spacenomad)
[13:29:45] <gde35> its the same mistake people make planning to do stuff then wait for the last moment before doing anything
[13:29:57] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[13:30:19] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[13:30:26] <gde35> then you have to "miraculously" do 100 things at the same time
[13:34:53] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[13:35:54] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[13:44:42] *** Joins: thiras (~thiras@user/thiras)
[13:47:49] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[13:48:50] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Remote host closed the connection)
[13:49:50] *** Joins: spacenomad (~nomad@user/spacenomad)
[13:49:57] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[13:49:59] *** Joins: thiras_ (~thiras@user/thiras)
[13:50:27] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[13:51:22] *** Joins: Axy (~Axy@user/axy)
[13:53:55] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[13:54:36] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[13:55:39] <evulish> not sure why it took me this long to set up an entry in windows terminal to ssh directly into my server and reattach my screen session
[14:02:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:03:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:04:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:05:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:05:58] *** Joins: lenarhoyt (~lenarhoyt@mail.bfc-net.de)
[14:06:20] *** Joins: ccapndave (~ccapndave@213.55.220.234)
[14:07:43] <ccapndave> I'm having some iframe woes.  I'm using `srcdoc` to put some stuff in an iframe, but I have an `icons.svg` with a bunch of `symbol`s in it that I want to use from within the iframe.  I can't access it via `use` because I get a cross-domain error.  One possibility is to inline the whole thing as text into the iframe content, but it seems wasteful.  Is there another way?
[14:08:36] <ccapndave> I can load the `icons.svg` file by putting `<script>` in the head of the iframe's `srcdoc`, but I can't see how to access its symbols afterwards
[14:09:01] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:8dab:4b67:acba:8565)
[14:09:45] *** Quits: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net) (Ping timeout: 256 seconds)
[14:09:47] *** Joins: Naan (~Naan@user/naan)
[14:17:29] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[14:17:41] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:18:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:20:05] <rick123> ccapndave: What's use ? Also is there any code we can see or a live demo ?
[14:20:45] <ccapndave> I have a self-contained iframe which shouldn't be allowed to access stuff outside except in its initial HTML, and need to get icons into it.  For building a JSFiddle kind of thing.
[14:20:50] <ccapndave> No code I'm afraid
[14:21:19] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[14:21:48] *** Quits: thojanssens (~thojansse@182.232.32.63) (Ping timeout: 256 seconds)
[14:22:22] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[14:22:32] <rick123> I haven't fiddled with srcdoc much but if your iframe has sandbox attribute then allow-same-origin will be required to access its content.
[14:22:48] <ccapndave> Sure, but the point of the iframe is not to allow same origin :)
[14:23:30] <ccapndave> I'm looking for a way to make the icons accessible from whatever is initially in the `srcdoc` (which is the only time content can be loaded)
[14:24:47] <rick123> So the images (icons) passed through srcdoc are not loading inside the iframe ?
[14:25:54] <ccapndave> The problem is that everything is defined using svg symbols - the file loads, but I don't know how to reference the symbols in the page afterwards
[14:26:39] <ccapndave> So I can do `<script href="icons.svg" />` in the srcdoc and it loads, but then `<svg><use href="icons.svg#myicon" /></svg>` throws an error
[14:26:49] <ccapndave> And I don't know how to reference the symbol without the filename
[14:27:52] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[14:28:42] *** Joins: han-solo (~hanish@user/han-solo)
[14:32:39] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:33:08] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[14:35:04] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[14:35:33] *** Joins: panella32 (~panella32@68.235.43.12)
[14:36:36] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[14:36:52] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[14:40:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:40:19] *** Joins: spacenomad (~nomad@user/spacenomad)
[14:40:30] *** Quits: panella32 (~panella32@68.235.43.12) (Ping timeout: 256 seconds)
[14:41:33] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:42:37] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[14:43:59] *** wez_ is now known as wez
[14:44:28] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[14:47:43] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[14:47:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[14:49:01] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:49:45] *** Quits: scara (~user@user/scara) (Ping timeout: 276 seconds)
[14:50:05] *** Quits: nomic (~nomic@185.192.69.217) (Quit: Leaving)
[14:50:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:51:14] *** Joins: scara (~user@user/scara)
[14:54:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:54:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:55:54] *** Quits: ccapndave (~ccapndave@213.55.220.234) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[14:56:33] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[14:58:39] *** Joins: stenno (~stenno@user/stenno)
[15:00:07] <gde35> today i lurn D has string like manipulation for all elements of an array like arr[] += 1
[15:00:14] <gde35> seems a cool thing to have
[15:00:54] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[15:01:10] *** Joins: spacenomad (~nomad@user/spacenomad)
[15:01:28] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[15:01:47] <jaawerth> hey if you like that, bash has it too :P
[15:02:31] <gde35> js is still a bit getElementByTagName about it
[15:02:40] <gde35> what to call it, enterprise?
[15:03:10] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[15:03:14] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[15:03:35] <gde35> before the arrow function it was even more silly
[15:03:44] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[15:04:42] <jaawerth> well, I do like the arrow function but I'm happier without being able todo arr[] += 1 I think. I find that code like that tends to be a little overly declarative to the point that you have to go look up what operator overloads are in place which means more cognitive debt
[15:05:08] <gde35> we have so much of that already
[15:05:11] <jaawerth> I *can* work but I'm not convinced it's better
[15:05:30] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[15:05:53] *** Joins: bobdobbs (~user@2406:5a00:4434:4c00:4c33:4257:ae75:9713)
[15:05:57] <gde35> I wrote a game where one has to pick the right array method. Coders hated it so I had some gamers play it (who know nothing about arrays)
[15:06:05] <jaawerth> like, that's what drives me nuts a lot about python, a lot of the libraries use tons of operator overloading so everything looks like math, which is great for an analyst or whatever but as a dev I just want the flow of the code
[15:06:14] <gde35> To my surprise one figured out that everything can be done with splice
[15:06:33] <gde35> no need for push pull pop shift etc etc
[15:07:40] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:07:52] <gde35> jaawerth: its really an unsolved puzzle
[15:08:07] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[15:08:53] <gde35> jaawerth: I vaguely remember some old nerd from the early days describing how doing premade code reaches some kind of escape velocity where writing it from scratch is less work than looking it up even in an ideal system
[15:09:06] <jaawerth> but what make the other methods wrong for whatever it is they wre doing?
[15:09:14] <gde35> he joked the ideal system would be one where you write the code first then use it to query the db
[15:09:35] <gde35> jaawerth: overhead for those who still have to learn them
[15:10:25] *** Quits: hassoon_ (hassoon@grape.ircnow.org) (Changing host)
[15:10:25] *** Joins: hassoon_ (hassoon@user/hassoon)
[15:10:26] *** hassoon_ is now known as hassoon
[15:10:53] <gde35> then again it is such a strange combination of things perhaps splice should not exist in stead
[15:10:55] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[15:11:43] <jaawerth> splice is like the most complicated one though, at least not counting reduce at al
[15:11:55] <gde35> jaawerth: If I look at #php or #javascript nowadays the topic is always something I dont undestand :P
[15:12:27] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:14:04] <gde35> oh I suppose I dont understand much of css either, not anymore
[15:17:01] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 240 seconds)
[15:18:53] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[15:19:55] *** Quits: D4mned (~D1mned@212.101.251.178) (Quit: Leaving)
[15:21:36] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Quit: Leaving)
[15:23:23] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:27:06] *** Joins: nomic (~nomic@185.192.69.217)
[15:28:06] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[15:29:18] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:35:17] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[15:38:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[15:46:28] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[15:46:49] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[15:47:03] *** Joins: pluri (~pluri@user/pluri)
[15:47:15] *** Quits: pluri (~pluri@user/pluri) (Client Quit)
[15:47:40] *** Quits: sickdyd_ (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Quit: leaving)
[15:48:37] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:48:41] *** Joins: pmercado (~pmercado@186.107.48.62)
[15:48:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[15:53:38] *** Joins: MrBlue_ (~MrBlue@37.19.213.8)
[15:59:07] *** Joins: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com)
[16:04:22] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[16:12:44] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[16:13:59] *** Joins: realies (~realies@user/realies)
[16:14:54] *** Quits: nomic (~nomic@185.192.69.217) (Quit: Leaving)
[16:17:29] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[16:18:08] *** Joins: spacenomad (~nomad@user/spacenomad)
[16:20:43] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: Lost the game...)
[16:20:58] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[16:21:40] *** Joins: phryk (~totallyno@user/phryk)
[16:21:56] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[16:26:28] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[16:26:37] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:28:12] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Client Quit)
[16:28:29] *** Joins: Booster2ooo (~kvirc@user/booster2ooo)
[16:29:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:30:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:30:55] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Quit: WeeChat 3.4)
[16:33:07] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[16:33:39] *** Joins: Alexthek1d (~Alexthek1@p5b3ae8bf.dip0.t-ipconnect.de)
[16:33:45] <Alexthek1d> hello
[16:34:09] <Alexthek1d> I have a question. What is a good site to share the code?
[16:34:20] <Alexthek1d> It it console only no html
[16:39:27] *** Joins: spacenomad (~nomad@user/spacenomad)
[16:40:28] <Alexendoo> Alexthek1d: There's a few, jsfiddle, codesandbox, repl.it (would be nodejs, so console based)
[16:40:52] <Alexendoo> some are annoying when it comes to wanting you to sign up, can't recall which is which
[16:42:03] <Alexthek1d> Thanks
[16:42:06] <Alexthek1d> Here it is:
[16:42:06] <Alexthek1d> https://replit.com/@pnekekekma/FatalEthicalBoard#index.js
[16:42:58] <Alexthek1d> mystr is a multiline string. i want to convert it to an array (every line). How to ignore the lines with at least one empty whitespace?
[16:45:44] <Alexendoo> Alexthek1d: could do mystr.split("\n").filter(line => !line.match(/^\s*$/))
[16:46:14] <Alexendoo> or .filter(line => line.match(/\S/)) is equivalent, probably clearer
[16:46:19] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:47:39] <Alexthek1d> Alexendoo, thanks you works like a charm <3
[16:49:02] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:51:08] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[16:51:27] *** Quits: Booster2ooo (~kvirc@user/booster2ooo) (Read error: Connection reset by peer)
[16:53:03] *** Joins: trevors (~trevors@user/trevors)
[16:53:24] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:55:20] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[16:55:21] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 245 seconds)
[16:57:39] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[16:59:16] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[17:02:19] *** Joins: han-solo (~hanish@user/han-solo)
[17:02:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:02:47] *** Joins: bobdobbs` (~user@116.251.149.196)
[17:04:17] *** Quits: bobdobbs (~user@2406:5a00:4434:4c00:4c33:4257:ae75:9713) (Ping timeout: 240 seconds)
[17:07:34] *** Joins: mknod (~mknod@user/mknod)
[17:10:08] *** Joins: kmh (~kmh@2a00:6020:5004:6800:dcb7:d938:b87e:d07e)
[17:11:44] <mknod> Howdy. Is there a proper way to inject a variable into a regex (read: construct a regex pattern with dynamic parts) without having to escape regex metacharacters in the variable?
[17:11:59] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:12:46] <jaawerth> mknod: nope, pretty much you need a regex. There *was* going to be a RegExp.escape helper added and it was even in babel for a while a few years go, but it never made it into the spec :(
[17:13:04] <jaawerth> ljharb: do you remember why it was rejected? just because it's easy enough to do in userland, or..?
[17:14:11] <mknod> Easy enough... It's not like all metacharacters are made equal when it comes to escaping them.
[17:15:21] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 245 seconds)
[17:15:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:16:01] <mknod> jaawerth, I may not be alone to consider backslash escaping as a hack, maybe they're working on something else?
[17:16:32] <jaawerth> well, there's not much else one can do, it's a dynamic regex
[17:16:55] <jaawerth> the fact that you have to use one in the first place is itself a necessary evil :-)
[17:17:09] <mknod> In Bash it would be as simple as quoting the parts you want to be treated as literal string. :)
[17:18:17] <mknod> Does jellobot speak Bash?
[17:20:42] <jaawerth> that's because in bash everything upon everything is parsed as a string command. I don't think JS would be improved if you had to put defensive quotes everywhere to prevent argument splitting :P
[17:21:06] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Remote host closed the connection)
[17:21:07] <jaawerth> a dynamic regex takes a string and gives you a regex, by nature if you don't want the string you pass in to be parsed as a regex, you need to escape it
[17:21:38] <jaawerth> that's true in most langs I can think of. the main alternative I can think of would just abstract that away, and I have actually done this before: a tagged template function
[17:22:00] <jaawerth> if it's the ergonomics you're worried about and not the fact that string escaping happening at all, then I can show you
[17:23:45] <jaawerth> mknod: actually I already have a thing kicking around from a few years back https://replit.com/@jaawerth/regex-template-tag-function#index.js
[17:26:15] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[17:32:46] *** Quits: roadt_ (~roadt@60.168.93.178) (Ping timeout: 256 seconds)
[17:33:34] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[17:34:41] *** Joins: roadt (~roadt@60.168.93.178)
[17:42:05] *** Quits: roadt (~roadt@60.168.93.178) (Remote host closed the connection)
[17:42:31] *** Joins: roadt (~roadt@60.168.93.178)
[17:42:37] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[17:47:30] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[17:50:48] *** Joins: spacenomad (~nomad@user/spacenomad)
[17:51:03] *** Quits: Alexthek1d (~Alexthek1@p5b3ae8bf.dip0.t-ipconnect.de) (Quit: Leaving)
[17:51:18] *** Joins: pavonia (~user@user/siracusa)
[17:51:48] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:56:25] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[17:57:01] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Quit: Ping timeout (120 seconds))
[17:58:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:57] *** Joins: wroathe (~wroathe@user/wroathe)
[18:02:52] *** Joins: happymeal (~happymeal@user/happymeal)
[18:04:48] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:10:37] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[18:11:33] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:14:49] *** Joins: pulse (~pulse@user/pulse)
[18:15:16] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:17:52] <mknod> jaawerth, will check it out thanks.
[18:20:52] <mknod> Ended up setting up a data validation on the Google Sheets cell that served as a parameter and hardcoding it. ;)
[18:21:25] *** Joins: voltage (voltage@user/voltage)
[18:21:41] *** Quits: voltage_ (voltage@user/voltage) (Killed (NickServ (GHOST command used by voltage)))
[18:21:43] *** voltage is now known as voltage_
[18:22:31] *** Joins: D1nger (~Booster2o@host-95-182-204-88.dynamic.voo.be)
[18:22:57] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[18:25:13] *** Joins: spacenomad (~nomad@user/spacenomad)
[18:26:55] *** Joins: rritoch (~kvirc@222.127.246.55)
[18:29:50] *** Quits: rritoch (~kvirc@222.127.246.55) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:31:09] *** Joins: trevors (~trevors@user/trevors)
[18:33:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[18:33:41] *** Joins: shokohsc (~shokohsc@0.133.22.93.rev.sfr.net)
[18:34:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[18:36:16] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (Remote host closed the connection)
[18:36:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:36:40] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[18:37:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:37:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:37:45] *** Joins: wroathe (~wroathe@user/wroathe)
[18:37:46] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (Remote host closed the connection)
[18:38:10] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[18:38:19] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:40:13] *** Quits: simius (~simius@user/simius) (Ping timeout: 240 seconds)
[18:40:16] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (Remote host closed the connection)
[18:40:44] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[18:40:49] *** Joins: simius (~simius@user/simius)
[18:41:46] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (Remote host closed the connection)
[18:42:13] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[18:43:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:43:16] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (Remote host closed the connection)
[18:43:23] *** Joins: stenno (~stenno@user/stenno)
[18:43:41] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[18:44:25] <rick123> Service workers are supposed to lose their global state if the browser stops them to save memory until any further event is triggered that'd start them back up. But when I tried to access a global var/state, its just always accessible across restarts. Can someone explain this behaviour ?
[18:46:19] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[18:46:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:46:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:46:55] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:36] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[18:48:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:48:42] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[18:50:15] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[18:50:49] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[18:50:57] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[18:51:08] *** Sven_vB_ is now known as Sven_vB
[18:52:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:54:00] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:55:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:55:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:55:29] *** Joins: wroathe (~wroathe@user/wroathe)
[18:58:02] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:58:58] *** Quits: ckdCreations (~ckdCreati@147.55.133.139) (Read error: Connection reset by peer)
[18:59:12] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[18:59:32] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[18:59:56] <banana_> gah
[19:00:08] <banana_> TIL wow ljharb the humanity
[19:00:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:00:38] <banana_> n> [].every(what => what/*!!!*/)
[19:00:39] <jellobot> (okay) true
[19:01:07] *** Joins: onosendi (~onosendi@user/onosendi)
[19:02:04] *** Joins: biberu (~biberu@user/biberu)
[19:02:51] <banana_> I guess because it's vacuously true in that case. e.g. "all cellphones are turned off in the building" is true when there is in fact no cell phones in the building
[19:04:43] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[19:06:46] <pmercado> Hi, I have a div with inner elements that when div have display:none hide descendant as expected. Is there a way to know if a child of div[display:none] element is visually visible?
[19:08:05] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:12:13] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[19:13:08] <banana_> that's odd yeah I found think normally all descendants would not display either
[19:14:26] <banana_> shows "Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off. To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead." in https://developer.mozilla.org/en-US/docs/Web/CSS/display
[19:14:32] <netameta> function a(a, ...rest) {}// is this possible?
[19:14:51] <systemfault> Have you tried it?
[19:14:58] <netameta> system i did not no.
[19:15:10] <netameta> you are right. i should have before asking.
[19:15:13] <systemfault> The answer is yes but take the habit of trying before asking
[19:15:23] <systemfault> (Especially for very simple things like this)
[19:17:03] <netameta> Yes it works. you are 100% correct i usually tries first hence i bearly ask questions here. oddly i got lazy and asked.
[19:17:07] <banana_> you can use n> on here
[19:17:19] *** Joins: GreyMister (~GreyMiste@2a02:810a:11bf:dd28:252f:ea74:91f5:a6d8)
[19:17:53] <han-solo> n> [1,2,3,4,5] + [6,7,8,9,9]
[19:17:54] <jellobot> (okay) '1,2,3,4,56,7,8,9,9'
[19:18:02] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:18:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:18:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:18:08] *** Joins: wroathe (~wroathe@user/wroathe)
[19:18:37] <netameta> I also see that you can do it the other way around.. i remember to achieve this we had to use apply/call before
[19:19:03] <banana_> n> const doesThisWork = (maybe, ...yes) => yes; doesThisWork('maybe', 'yes')
[19:19:04] <jellobot> (okay) [ 'yes' ]
[19:19:56] <ljharb> jaawerth: because someone delegates want an escaping function that tanked an entire regex at once
[19:20:26] <ljharb> banana_: that every on an empty array is true is mathematically sound
[19:20:44] <banana_> ljharb: idk what that means
[19:20:59] <banana_> it's just how they wanted that case to work
[19:21:04] *** Joins: thojanssens (~thojansse@182.232.32.63)
[19:21:17] <ljharb> banana_: ‚Äúsome‚Äù on an empty array is false, because nothing returned true. ‚Äúevery‚Äù on an empty array is true, because nothing returned false
[19:21:23] <ljharb> banana_: and no, it‚Äôs set theory stuff.
[19:22:00] <banana_> MDN says because the edge case is technically vacuously true.
[19:22:17] <banana_> and an example of a vacuous truth is the one I have above^
[19:22:27] <jaawerth> ljharb: wait, I'm having trouble parsing that. tanked an entire regex at once?
[19:22:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:23:42] <banana_> what regex issue
[19:24:16] *** Joins: nomic (~nomic@185.192.69.217)
[19:25:23] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[19:25:44] <ljharb> jaawerth: made, sorry
[19:26:00] <ljharb> jaawerth: like the userland escape everyone wants and uses just takes a string and makes another string
[19:26:09] <ljharb> the one some delegates wants takes a string and makes a regex
[19:26:11] <jaawerth> ahhh
[19:26:19] <ljharb> as a template tag
[19:26:39] <jaawerth> right right, I think us talking about this before must be why I implemented a temlpate tag myself ala that repl I linked earlier, now that you mention it
[19:27:42] <jaawerth> the template tag does soundl ike an idea compromise since it would allow further composition with unescaped patterns in the safest way possible
[19:27:50] <jaawerth> it's sort of like a regex equivalent to prepared sql statements
[19:29:46] *** Joins: shokohsc5 (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[19:30:22] *** Quits: ingo (~ingo@user/ingo) (Quit: Leaving)
[19:30:24] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[19:31:01] *** Quits: shokohsc (~shokohsc@0.133.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[19:31:01] *** shokohsc5 is now known as shokohsc
[19:31:50] *** Joins: ingo (~ingo@user/ingo)
[19:31:50] <ljharb> the problem is that it‚Äôs so difficult to do the tag case, and it‚Äôs more than literally everyone actually needs
[19:32:03] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:35:02] *** Quits: lenarhoyt (~lenarhoyt@mail.bfc-net.de) (Ping timeout: 256 seconds)
[19:39:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:41:08] *** Joins: xsperry (~xs@user/xsperry)
[19:43:21] *** Joins: Rockwood (~Rocky@user/rocky)
[19:43:38] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[19:47:26] *** Joins: nomad1 (~nomad@user/spacenomad)
[19:48:37] *** Quits: spacenomad (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[19:50:59] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[19:52:07] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[19:52:56] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[19:55:26] *** Quits: GreyMister (~GreyMiste@2a02:810a:11bf:dd28:252f:ea74:91f5:a6d8) (Quit: Leaving)
[19:55:35] *** Joins: GreyMister (~GreyMiste@2a02:810a:11bf:dd28:252f:ea74:91f5:a6d8)
[19:55:39] *** Quits: GreyMister (~GreyMiste@2a02:810a:11bf:dd28:252f:ea74:91f5:a6d8) (Remote host closed the connection)
[19:58:35] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[20:00:40] *** Quits: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[20:00:49] *** Joins: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[20:02:22] *** Joins: node1 (~hex@user/node1)
[20:02:51] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 245 seconds)
[20:04:04] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[20:04:34] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[20:04:48] *** Quits: thiras_ (~thiras@user/thiras) (Remote host closed the connection)
[20:12:16] *** Joins: thiras (~thiras@user/thiras)
[20:15:04] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[20:16:22] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[20:17:52] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:18:26] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.3)
[20:23:59] *** Joins: Zauberfisch_ (~Zauberfis@cm147-42.liwest.at)
[20:24:19] *** Quits: Zauberfisch (~Zauberfis@cm147-42.liwest.at) (Read error: Connection reset by peer)
[20:24:24] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[20:25:28] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[20:29:00] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[20:29:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:29:30] *** Joins: onosendi (~onosendi@user/onosendi)
[20:30:14] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[20:30:30] *** Joins: thojanssens_ (~thojansse@182.232.32.63)
[20:31:50] *** Joins: trevors (~trevors@user/trevors)
[20:31:51] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5d9d:d9fc:2e49:cdee)
[20:31:54] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:32:48] *** Joins: Akiva (~Akiva@user/Akiva)
[20:33:57] *** Quits: thojanssens (~thojansse@182.232.32.63) (Ping timeout: 256 seconds)
[20:36:17] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:5d9d:d9fc:2e49:cdee) (Ping timeout: 240 seconds)
[20:37:21] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[20:40:10] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[20:43:31] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:45:36] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:45:48] *** Joins: federico_it (~textual@151.51.84.71)
[20:46:01] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[20:46:48] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[20:46:50] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:48:30] *** Joins: thiras (~thiras@user/thiras)
[20:49:04] *** Quits: poncha (~poncha@user/poncha) (Remote host closed the connection)
[20:49:45] *** Joins: Rockwood (~Rocky@user/rocky)
[20:50:18] <jaawerth> heh
[20:51:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[20:53:44] <Rockwood> lol
[20:56:53] *** Quits: rcoote (~rcoote@2a02:908:690:a140:5630:a269:ee65:4eb) (Ping timeout: 250 seconds)
[20:57:36] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[21:00:51] *** Quits: scara (~user@user/scara) (Remote host closed the connection)
[21:01:36] *** Joins: scara (~user@user/scara)
[21:01:38] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[21:06:01] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[21:06:57] *** Joins: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2)
[21:06:57] *** Quits: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2) (Changing host)
[21:06:57] *** Joins: corgi (~corgi@user/corgi)
[21:07:57] *** Quits: g2anj_ (~v@58.228.230.4) (Ping timeout: 256 seconds)
[21:08:28] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[21:09:22] *** Joins: thojanssens (~thojansse@182.232.32.63)
[21:10:13] *** Quits: thojanssens_ (~thojansse@182.232.32.63) (Ping timeout: 256 seconds)
[21:13:47] *** Quits: thojanssens (~thojansse@182.232.32.63) (Ping timeout: 250 seconds)
[21:13:57] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[21:15:56] *** Joins: thojanssens (~thojansse@182.232.32.63)
[21:16:41] *** Joins: g2anj (~v@58.228.230.4)
[21:24:18] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[21:24:22] *** Joins: matsaman (~matsaman@user/matsaman)
[21:27:40] *** Joins: zebrag (~chris@user/zebrag)
[21:30:38] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:10] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:32:02] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[21:34:50] <Camilo> I'm having some issues with an async function in my reactjs application. The saveProperty function is in store.js and works fine, but when I call it from the "AddProperty" function, AddProperty doesn't wait for saveProperty to return... https://dpaste.org/3e63
[21:35:53] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[21:35:54] <Camilo> I'd like to use the return value to flash a message and redirect the user
[21:38:58] *** Quits: onosendi (~onosendi@user/onosendi) (Read error: Connection reset by peer)
[21:42:36] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:43:39] <KevinX> Camilo `return axios.post()`
[21:44:17] *** Quits: doji (~doji@user/doji) (Ping timeout: 240 seconds)
[21:51:37] <Camilo> thanks KevinX, doesn't seem to work. Maybe I can rewrite the "saveProperty" function to take another function as an argument, then run that function in the .then block to act on the api response
[21:51:49] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:52:22] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:52:50] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[21:53:10] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[21:53:36] <KevinX> no, something else is wrong, but your code snippet isn't complete
[21:53:50] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:55:54] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[21:57:00] *** Joins: Rubba (~Kol@d75-157-122-186.bchsia.telus.net)
[21:57:27] *** Joins: fury__ (~fury@znc.codexterous.com)
[21:57:35] *** Joins: LIERO_ (~no@vmi473477.contaboserver.net)
[21:57:38] *** Joins: BinarySavior_ (~BinarySav@josh.vet)
[21:57:49] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[21:58:42] *** Joins: Lewix__ (sid158496@tinside.irccloud.com)
[21:58:43] *** Joins: calcmandan_ (~quassel@67.159.143.134)
[21:59:40] *** Joins: mattf_ (~mattf@li908-138.members.linode.com)
[22:00:22] *** Joins: teear (~teear@cbharraste.eu)
[22:02:54] *** Joins: onosendi (~onosendi@ip70-162-92-63.ph.ph.cox.net)
[22:05:15] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[22:05:16] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:7125:6c88:316f:2f30) (*.net *.split)
[22:05:16] *** Quits: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net) (*.net *.split)
[22:05:16] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[22:05:16] *** Quits: sunarch (uid526836@user/sunarch) (*.net *.split)
[22:05:16] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:78c1:741e:24d7:1bb) (*.net *.split)
[22:05:16] *** Quits: pax_os_ (uid535114@id-535114.ilkley.irccloud.com) (*.net *.split)
[22:05:16] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (*.net *.split)
[22:05:16] *** Quits: Nitrousoxide_ (~msdos@user/nitrousoxide) (*.net *.split)
[22:05:16] *** Quits: syg (sid521913@id-521913.lymington.irccloud.com) (*.net *.split)
[22:05:16] *** Quits: b-rex (van@down.by.the.river.lol) (*.net *.split)
[22:05:16] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[22:05:16] *** Quits: Anarchic` (~Anarchic@getlegit.co.uk) (*.net *.split)
[22:05:16] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[22:05:16] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[22:05:16] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[22:05:17] *** Quits: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:17] *** Quits: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[22:05:17] *** Quits: adas (adas@adas.shelltalk.net) (*.net *.split)
[22:05:17] *** Quits: Pabc1 (~Pabc1@2001:19f0:6c01:74e:5400:3ff:fe60:e5d6) (*.net *.split)
[22:05:17] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[22:05:17] *** Quits: fury_ (~fury@znc.v6.codexterous.com) (*.net *.split)
[22:05:17] *** Quits: Kol (~Kol@d75-157-122-186.bchsia.telus.net) (*.net *.split)
[22:05:17] *** Quits: mikeputnam1 (~mikeputna@wilug/mikeputnam) (*.net *.split)
[22:05:17] *** Quits: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (*.net *.split)
[22:05:17] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[22:05:17] *** Quits: teear_ (~teear@cbharraste.eu) (*.net *.split)
[22:05:17] *** Quits: VectorX (~sunilaiya@user/vectorx) (*.net *.split)
[22:05:17] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[22:05:17] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (*.net *.split)
[22:05:17] *** Quits: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at) (*.net *.split)
[22:05:17] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[22:05:17] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[22:05:17] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[22:05:17] *** Quits: mdel (~mdel@user/mdel) (*.net *.split)
[22:05:17] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[22:05:18] *** Quits: drew (~drew@user/drew) (*.net *.split)
[22:05:18] *** Quits: entropygain (levitate@user/entropygain) (*.net *.split)
[22:05:18] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (*.net *.split)
[22:05:18] *** Quits: silly (~silly@user/silly) (*.net *.split)
[22:05:18] *** Quits: Lewix_ (sid158496@id-158496.tinside.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: prime- (~prime@user/prime) (*.net *.split)
[22:05:18] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: merpnderp (sid16744@id-16744.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: snek (sid280155@id-280155.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[22:05:18] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[22:05:18] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: machuga (~machuga@104.236.124.225) (*.net *.split)
[22:05:18] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (*.net *.split)
[22:05:18] *** Quits: zer0 (~zer0@user/zer0) (*.net *.split)
[22:05:18] *** Quits: znf (~ibm86@toaster.linge-ma.ro) (*.net *.split)
[22:05:18] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (*.net *.split)
[22:05:18] *** Quits: lvlinux (~ruel@150.136.4.160) (*.net *.split)
[22:05:18] *** Quits: fkm (~fkm@user/fkm) (*.net *.split)
[22:05:18] *** Quits: purphoros (purphoros@devforge.org) (*.net *.split)
[22:05:18] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[22:05:18] *** Quits: line (~info@li2021-150.members.linode.com) (*.net *.split)
[22:05:18] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[22:05:19] *** Quits: FightingFalcon (~none@user/fightingfalcon) (*.net *.split)
[22:05:19] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[22:05:19] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[22:05:19] *** Quits: scara (~user@user/scara) (*.net *.split)
[22:05:19] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (*.net *.split)
[22:05:19] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (*.net *.split)
[22:05:19] *** Quits: fef (~thedawn@user/thedawn) (*.net *.split)
[22:05:19] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (*.net *.split)
[22:05:19] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[22:05:19] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[22:05:19] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[22:05:19] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[22:05:19] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[22:05:19] *** Quits: hamess (~hamess@user/hamess) (*.net *.split)
[22:05:19] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[22:05:20] *** Quits: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[22:05:20] *** Quits: Swant (~swant@libera/staff/swant) (*.net *.split)
[22:05:20] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[22:05:20] *** Quits: davve (davve@bsd.douchedata.com) (*.net *.split)
[22:05:20] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[22:05:20] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[22:05:20] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (*.net *.split)
[22:05:20] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[22:05:20] *** Quits: Kays (Kays@user/kays) (*.net *.split)
[22:05:20] *** Quits: SchmoSeph (sid530771@id-530771.tinside.irccloud.com) (*.net *.split)
[22:05:20] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[22:05:20] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[22:05:21] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (*.net *.split)
[22:05:21] *** Quits: jushi (~j@2a01:4f9:c010:8455::1) (*.net *.split)
[22:05:21] *** Quits: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (*.net *.split)
[22:05:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[22:05:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469) (*.net *.split)
[22:05:21] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (*.net *.split)
[22:05:21] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[22:05:21] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[22:05:21] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[22:05:21] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[22:05:21] *** Quits: Voxel (~f8er@user/voxel) (*.net *.split)
[22:05:22] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[22:05:22] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: Selicre (~x@hello.i.am.selic.re) (*.net *.split)
[22:05:22] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[22:05:22] *** Quits: theskillwithin (~theskillw@user/theskillwithin) (*.net *.split)
[22:05:22] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[22:05:22] *** Quits: gkatsev (~gkatsev@spacecompute.com) (*.net *.split)
[22:05:22] *** Quits: mynickisregister (~mynickisr@5.79.67.8) (*.net *.split)
[22:05:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[22:05:22] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[22:05:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[22:05:22] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[22:05:22] *** Quits: Zauberfisch_ (~Zauberfis@cm147-42.liwest.at) (*.net *.split)
[22:05:22] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[22:05:23] *** Quits: nomad1 (~nomad@user/spacenomad) (*.net *.split)
[22:05:23] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[22:05:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (*.net *.split)
[22:05:23] *** Quits: D1nger (~Booster2o@host-95-182-204-88.dynamic.voo.be) (*.net *.split)
[22:05:23] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[22:05:23] *** Quits: bobdobbs` (~user@116.251.149.196) (*.net *.split)
[22:05:23] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[22:05:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[22:05:23] *** Quits: realies (~realies@user/realies) (*.net *.split)
[22:05:23] *** Quits: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com) (*.net *.split)
[22:05:23] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[22:05:23] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (*.net *.split)
[22:05:23] *** Quits: Axy (~Axy@user/axy) (*.net *.split)
[22:05:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (*.net *.split)
[22:05:23] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (*.net *.split)
[22:05:23] *** Quits: devslash (~devslash@46.232.211.210) (*.net *.split)
[22:05:23] *** Quits: Camilo (~hugh@host-92-1-126-125.as13285.net) (*.net *.split)
[22:05:23] *** Quits: Decker (~d3x0r@user/d3x0r) (*.net *.split)
[22:05:23] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[22:05:23] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (*.net *.split)
[22:05:23] *** Quits: dvanloon7 (~dvanloon@user/dvanloon) (*.net *.split)
[22:05:23] *** Quits: Jaran|zZzZzZzZz (~mail@user/jaran) (*.net *.split)
[22:05:23] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (*.net *.split)
[22:05:23] *** Quits: aku_ (~aku@163.172.137.34) (*.net *.split)
[22:05:23] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[22:05:23] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[22:05:23] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[22:05:23] *** Quits: remolej (~kenoba@user/kenoba) (*.net *.split)
[22:05:23] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (*.net *.split)
[22:05:24] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (*.net *.split)
[22:05:24] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[22:05:24] *** Quits: crised (~crised@200.112.228.40) (*.net *.split)
[22:05:24] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[22:05:24] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[22:05:24] *** Quits: zwei (~Zweihande@znc.ext.zweihander.me) (*.net *.split)
[22:05:24] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[22:05:24] *** Quits: z_lehinsun (~lehinsun@188.113.178.220) (*.net *.split)
[22:05:24] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[22:05:24] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[22:05:24] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[22:05:24] *** Quits: nepeat (~nepeat@79.110.170.60) (*.net *.split)
[22:05:24] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[22:05:24] *** Quits: Quark (7f000001@user/quark) (*.net *.split)
[22:05:24] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[22:05:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[22:05:24] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:24] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[22:05:24] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[22:05:24] *** Quits: dka (~code-is-a@193.70.33.83) (*.net *.split)
[22:05:24] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[22:05:24] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[22:05:24] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (*.net *.split)
[22:05:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[22:05:25] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[22:05:25] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[22:05:25] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[22:05:25] *** Quits: bodiccea (~bodiccea@user/bodiccea) (*.net *.split)
[22:05:25] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[22:05:25] *** Quits: ox1eef (~0x1eef@user/ox1eef) (*.net *.split)
[22:05:25] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[22:05:25] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[22:05:25] *** Quits: defn- (~n0b0dy@user/defn) (*.net *.split)
[22:05:25] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[22:05:25] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[22:05:25] *** Quits: Pajus (~Pajus@user/pajus) (*.net *.split)
[22:05:25] *** Quits: kraucrow (~polarizin@188.166.72.81) (*.net *.split)
[22:05:25] *** Quits: jochum (~quassel@user/jochum) (*.net *.split)
[22:05:25] *** Quits: Woet (~me@irc.woet.me) (*.net *.split)
[22:05:25] *** Quits: feoh (~feoh@idlerpg/player/feoh) (*.net *.split)
[22:05:25] *** Quits: lilmonkey`` (~lilmonkey@user/lilmonkey) (*.net *.split)
[22:05:25] *** Quits: _var (~kdy@kiana.kdy.ch) (*.net *.split)
[22:05:25] *** Quits: monokrome| (~monokrome@50.215.11.140) (*.net *.split)
[22:05:25] *** Quits: c17r_ (~c17r@c17r.com) (*.net *.split)
[22:05:25] *** Quits: NoiseEee (~NoiseEee@178.128.153.219) (*.net *.split)
[22:05:25] *** Quits: seed0 (~seed0@user/seed0) (*.net *.split)
[22:05:25] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[22:05:25] *** Quits: root____ (~root@157.245.144.252) (*.net *.split)
[22:05:25] *** Quits: CoJaBo (~aztec@user/CoJaBo) (*.net *.split)
[22:05:25] *** Quits: flameboi (dgw@user/flameboi) (*.net *.split)
[22:05:26] *** Quits: Swayze (~gryster@user/swayze) (*.net *.split)
[22:05:26] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (*.net *.split)
[22:05:26] *** Quits: kogepan (~kogepan@user/kogepan) (*.net *.split)
[22:05:26] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (*.net *.split)
[22:05:26] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (*.net *.split)
[22:05:26] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3) (*.net *.split)
[22:05:26] *** Quits: christian[m] (~christian@2001:470:69fc:105::f6f1) (*.net *.split)
[22:05:26] *** Quits: nicoty (~nicoty@user/nicoty) (*.net *.split)
[22:05:26] *** Quits: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01) (*.net *.split)
[22:05:26] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[22:05:26] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[22:05:26] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[22:05:26] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[22:05:26] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[22:05:26] *** Quits: avu (~jan@user/avu) (*.net *.split)
[22:05:27] *** Quits: ljharb (sid43720@user/ljharb) (*.net *.split)
[22:05:27] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[22:05:27] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[22:05:27] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[22:05:27] *** Quits: glider (~glider@user/glider) (*.net *.split)
[22:05:27] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[22:05:27] *** Quits: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e) (*.net *.split)
[22:05:27] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[22:05:27] *** Quits: Benett (~Benett@xnetx.de) (*.net *.split)
[22:05:27] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[22:05:27] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[22:05:27] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[22:05:27] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[22:05:27] *** Quits: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com) (*.net *.split)
[22:05:27] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (*.net *.split)
[22:05:27] *** Quits: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c) (*.net *.split)
[22:05:27] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (*.net *.split)
[22:05:28] *** Quits: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575) (*.net *.split)
[22:05:28] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[22:05:28] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[22:05:28] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[22:05:28] *** Quits: andrew9184_ (sid416777@id-416777.uxbridge.irccloud.com) (*.net *.split)
[22:05:28] *** Quits: hughrawlinson_ (sid11243@2a03:5180:f:3::2beb) (*.net *.split)
[22:05:28] *** Quits: adar (uid1346@user/adar) (*.net *.split)
[22:05:28] *** Quits: croraf (croraf@croraf.ircforever.org) (*.net *.split)
[22:05:28] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[22:05:29] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[22:05:29] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[22:05:29] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[22:05:29] *** Quits: rosseaux (~BeRo@2a00:1828:2000:859::2) (*.net *.split)
[22:05:29] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[22:05:29] *** Quits: futs (~nico@142.93.239.247) (*.net *.split)
[22:05:29] *** Quits: betterOn1 (~user@vmi489242.contaboserver.net) (*.net *.split)
[22:05:29] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[22:05:29] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (*.net *.split)
[22:05:29] *** Quits: Koopz (~Koopz@koopz.rocks) (*.net *.split)
[22:05:29] *** Quits: thykka (~thykka@2a01:4f8:c0c:e335::1) (*.net *.split)
[22:05:29] *** Quits: arash (arash@thinks.life.is-a.beauty) (*.net *.split)
[22:05:29] *** Quits: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at) (*.net *.split)
[22:05:29] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[22:05:29] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (*.net *.split)
[22:05:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[22:05:30] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[22:05:30] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[22:05:30] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (*.net *.split)
[22:05:30] *** Quits: relipse (sid16131@id-16131.tinside.irccloud.com) (*.net *.split)
[22:05:30] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (*.net *.split)
[22:05:31] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (*.net *.split)
[22:05:31] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[22:05:31] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[22:05:31] *** Quits: petril (~petril@user/petril) (*.net *.split)
[22:05:31] *** Quits: APic (apic@apic.name) (*.net *.split)
[22:05:31] *** Quits: OneMirror (~far@onegrandcircle.com) (*.net *.split)
[22:05:31] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (*.net *.split)
[22:05:31] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[22:05:31] *** Quits: hackdash (h@user/hackdash) (*.net *.split)
[22:05:32] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[22:05:32] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[22:05:32] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[22:05:32] *** Quits: _nderscore (~nderscore@silentf.art) (*.net *.split)
[22:05:32] *** Quits: WizJin (~z0rbaznc@78.141.221.79) (*.net *.split)
[22:05:32] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[22:05:32] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[22:05:32] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[22:05:32] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[22:05:32] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[22:05:32] *** Quits: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2) (*.net *.split)
[22:05:33] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[22:05:33] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[22:05:33] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[22:05:33] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[22:05:33] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[22:05:33] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[22:05:33] *** Quits: hbjy (~hbjy@rockylinux/web/hbjy) (*.net *.split)
[22:05:33] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[22:05:33] *** Quits: pagios (~pagios@life.is-a.beauty) (*.net *.split)
[22:05:33] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[22:05:33] *** Quits: nemesit|znc (~nemesit@2a01:488:66:1000:2ea3:4eeb:0:1) (*.net *.split)
[22:05:33] *** Quits: fakuve (~fakuve@192.210.243.250) (*.net *.split)
[22:05:33] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[22:05:33] *** Quits: xsznix9 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[22:05:33] *** Quits: pez_ (~pez@user/pez) (*.net *.split)
[22:05:33] *** Quits: ThePendulum (~znc@37.139.2.240) (*.net *.split)
[22:05:33] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[22:05:33] *** Quits: Kirjava (~cake@user/kirjava) (*.net *.split)
[22:05:34] *** Quits: les (znc@user/les) (*.net *.split)
[22:05:34] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[22:05:34] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[22:05:34] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[22:05:34] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[22:05:34] *** Quits: lf94 (~lf94@user/lf94) (*.net *.split)
[22:05:34] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[22:05:34] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[22:05:34] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[22:05:34] *** Quits: Sol3 (~Sol3@user/sol3) (*.net *.split)
[22:05:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[22:05:34] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:8dab:4b67:acba:8565) (*.net *.split)
[22:05:35] *** Quits: mulchy[m] (~mulchynig@2001:470:69fc:105::1:4dd3) (*.net *.split)
[22:05:35] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[22:05:35] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9) (*.net *.split)
[22:05:35] *** Quits: Liber- (cis@user/cis) (*.net *.split)
[22:05:35] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com) (*.net *.split)
[22:05:35] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: cythrawll (sid384410@id-384410.ilkley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: trog (~trog@user/trog) (*.net *.split)
[22:05:36] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[22:05:36] *** Quits: ekl (~ekl@user/ekl) (*.net *.split)
[22:05:36] *** Quits: newton (james@user/newton) (*.net *.split)
[22:05:36] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[22:05:36] *** Quits: joepie91 (~joepie91p@user/joepie91) (*.net *.split)
[22:05:36] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[22:05:36] *** Quits: Sherpard2 (~VPard@user/sherpard2) (*.net *.split)
[22:05:36] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (*.net *.split)
[22:05:36] *** Quits: kevindank (~kevindank@c-76-99-182-66.hsd1.de.comcast.net) (*.net *.split)
[22:05:36] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (*.net *.split)
[22:05:36] *** Quits: henry40408 (~henry4040@175.181.155.165) (*.net *.split)
[22:05:36] *** Quits: corgi (~corgi@user/corgi) (*.net *.split)
[22:05:36] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[22:05:36] *** Quits: ingo (~ingo@user/ingo) (*.net *.split)
[22:05:36] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr) (*.net *.split)
[22:05:36] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (*.net *.split)
[22:05:36] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5) (*.net *.split)
[22:05:37] *** Quits: MrBlue_ (~MrBlue@37.19.213.8) (*.net *.split)
[22:05:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[22:05:37] *** Quits: pmercado (~pmercado@186.107.48.62) (*.net *.split)
[22:05:37] *** Quits: sbrothy (~sbrothy@23.102.41.137) (*.net *.split)
[22:05:37] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[22:05:37] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[22:05:37] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (*.net *.split)
[22:05:37] *** Quits: Guest8414 (riotz@is.only.here.for-some.fun) (*.net *.split)
[22:05:37] *** Quits: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (*.net *.split)
[22:05:37] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[22:05:37] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[22:05:37] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[22:05:37] *** Quits: keypusher (keypusher@user/keypusher) (*.net *.split)
[22:05:37] *** Quits: spinningCat (~spinningC@about/web/muscles) (*.net *.split)
[22:05:37] *** Quits: g00fy78 (~g00fy@user/g00fy) (*.net *.split)
[22:05:38] *** Quits: montybanksnyc (~montybank@108.50.135.21) (*.net *.split)
[22:05:38] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[22:05:38] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[22:05:38] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (*.net *.split)
[22:05:38] *** Quits: netameta (~netameta@2a00:a040:193:50fe:7859:e7d0:9a61:3c76) (*.net *.split)
[22:05:38] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (*.net *.split)
[22:05:38] *** Quits: Cyp (~cyp@213.237.85.9) (*.net *.split)
[22:05:38] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[22:05:38] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[22:05:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[22:05:38] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (*.net *.split)
[22:05:38] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (*.net *.split)
[22:05:38] *** Quits: robertparkerx (~robertpar@user/robertparkerx) (*.net *.split)
[22:05:38] *** Quits: mrdata (~mrdata@user/mrdata) (*.net *.split)
[22:05:38] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[22:05:38] *** Quits: jellobot (~jellobot@li334-26.members.linode.com) (*.net *.split)
[22:05:38] *** Quits: deniska (~deniska@user/deniska) (*.net *.split)
[22:05:38] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[22:05:38] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[22:05:38] *** Quits: defjam (~eb0t@90.203.120.248) (*.net *.split)
[22:05:38] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[22:05:39] *** Quits: Sqaure (~a@user/square) (*.net *.split)
[22:05:39] *** Quits: zero (~z@user/zero) (*.net *.split)
[22:05:39] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[22:05:39] *** Quits: mosh3k21 (~mosh3k21@user/mosh3k21) (*.net *.split)
[22:05:39] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[22:05:39] *** Quits: ashnur (~rak@user/ashnur) (*.net *.split)
[22:05:39] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[22:05:39] *** Quits: shayr_ (shayr@ip62.ip-91-134-189.eu) (*.net *.split)
[22:05:39] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[22:05:39] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (*.net *.split)
[22:05:39] *** Quits: Slade (~user@user/slade) (*.net *.split)
[22:05:39] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[22:05:39] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[22:05:39] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[22:05:39] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[22:05:39] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[22:05:39] *** Quits: dmanto (~dmanto@181.110.128.50) (*.net *.split)
[22:05:39] *** Quits: Croran (~Croran@71.231.214.173) (*.net *.split)
[22:05:39] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[22:05:39] *** Quits: samsch (~samsch@171.ip-192-99-69.net) (*.net *.split)
[22:05:39] *** Quits: ozymandias (~ozymandia@libre.theyareafter.us) (*.net *.split)
[22:05:39] *** Quits: Enissay (~Enissay@user/enissay) (*.net *.split)
[22:05:39] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[22:05:39] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[22:05:39] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (*.net *.split)
[22:05:39] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[22:05:39] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[22:05:39] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:06:03] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:06:07] *** Quits: onosendi (~onosendi@ip70-162-92-63.ph.ph.cox.net) (Client Quit)
[22:08:24] *** Quits: happymeal (~happymeal@user/happymeal) (Quit: https://www.endofthelinegaming.com -- A Team Fortress 2 community!)
[22:10:21] *** Joins: doji (~doji@user/doji)
[22:10:21] *** Joins: windsurf_ (~windsurf_@S0106f02f74280100.vn.shawcable.net)
[22:10:21] *** Joins: onosendi (~onosendi@user/onosendi)
[22:10:21] *** Joins: Henry151 (~bishop@user/henry151)
[22:10:21] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[22:10:21] *** Joins: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[22:10:21] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[22:10:21] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[22:10:21] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[22:10:21] *** Joins: webstrand (~webstrand@user/webstrand)
[22:10:21] *** Joins: mikeputnam2 (~mikeputna@wilug/mikeputnam)
[22:10:21] *** Joins: zer0 (~zer0@user/zer0)
[22:10:21] *** Joins: florian2 (~none@2a01:4f8:1c17:6cd5::1)
[22:10:21] *** Joins: blank (~info@li2021-150.members.linode.com)
[22:10:21] *** Joins: llorllale1 (~llorllale@2607:9880:3a18:69:bd04:28fb:9b4c:879)
[22:10:21] *** Joins: lockdown_ (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com)
[22:10:21] *** Joins: v3ga1 (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[22:10:21] *** Joins: fruitypunk1 (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[22:10:21] *** Joins: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr)
[22:10:21] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[22:10:21] *** Joins: VectorX (~sunilaiya@user/vectorx)
[22:10:21] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:879e:7125:6c88:316f:2f30)
[22:10:21] *** Joins: entropyg1 (levitate@2600:3c01::f03c:91ff:fecc:c443)
[22:10:21] *** Joins: prime (~prime@user/prime)
[22:10:21] *** Joins: znf_ (~ibm86@toaster.linge-ma.ro)
[22:10:21] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:10:21] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[22:10:21] *** Joins: dskull (~dskull@user/dskull)
[22:10:21] *** Joins: fkm_ (~fkm@user/fkm)
[22:10:21] *** Joins: syg (sid521913@id-521913.lymington.irccloud.com)
[22:10:21] *** Joins: purphoroff (purphoros@devforge.org)
[22:10:21] *** Joins: jsatk_ (sid304796@id-304796.helmsley.irccloud.com)
[22:10:21] *** Joins: pax_os__ (uid535114@id-535114.ilkley.irccloud.com)
[22:10:21] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[22:10:21] *** Joins: hexeme (~hexeme@user/hexeme)
[22:10:21] *** Joins: drew (~drew@user/drew)
[22:10:21] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[22:10:21] *** Joins: sunarch (uid526836@user/sunarch)
[22:10:21] *** Joins: merpnderp (sid16744@id-16744.hampstead.irccloud.com)
[22:10:21] *** Joins: ross (sid305269@user/ross)
[22:10:21] *** Joins: snek (sid280155@id-280155.lymington.irccloud.com)
[22:10:21] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[22:10:21] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[22:10:21] *** Joins: silly- (~silly@194-233-162-170.ip.linodeusercontent.com)
[22:10:21] *** Joins: Pabc1_ (~Pabc1@45.77.53.54)
[22:10:21] *** Joins: b-rex (van@down.by.the.river.lol)
[22:10:21] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[22:10:21] *** Joins: mdel (~mdel@user/mdel)
[22:10:21] *** Joins: harpia (~harpia@2804:2aec:205:1400:be2a:c8d5:4566:5dc8)
[22:10:21] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:10:21] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[22:10:21] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:10:21] *** Joins: henry40408 (~henry4040@175.181.155.165)
[22:10:21] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[22:10:21] *** Joins: g2anj (~v@58.228.230.4)
[22:10:21] *** Joins: corgi (~corgi@user/corgi)
[22:10:21] *** Joins: thiras (~thiras@user/thiras)
[22:10:21] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:10:21] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[22:10:21] *** Joins: Zauberfisch_ (~Zauberfis@cm147-42.liwest.at)
[22:10:21] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[22:10:21] *** Joins: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[22:10:21] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[22:10:21] *** Joins: nomad1 (~nomad@user/spacenomad)
[22:10:21] *** Joins: xsperry (~xs@user/xsperry)
[22:10:21] *** Joins: ingo (~ingo@user/ingo)
[22:10:21] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[22:10:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:10:21] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[22:10:21] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:10:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:10:21] *** Joins: dirigible (~dirigible@2602:fe90:100:1e:e5a6:79af:9abe:fae5)
[22:10:21] *** Joins: D1nger (~Booster2o@host-95-182-204-88.dynamic.voo.be)
[22:10:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:10:21] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[22:10:21] *** Joins: pavonia (~user@user/siracusa)
[22:10:21] *** Joins: bobdobbs` (~user@116.251.149.196)
[22:10:21] *** Joins: wovixo (~wovixo@128.104.205.49)
[22:10:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:10:21] *** Joins: realies (~realies@user/realies)
[22:10:21] *** Joins: MrBlue_ (~MrBlue@37.19.213.8)
[22:10:21] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:10:21] *** Joins: pmercado (~pmercado@186.107.48.62)
[22:10:21] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[22:10:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:10:21] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[22:10:21] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:8dab:4b67:acba:8565)
[22:10:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:10:21] *** Joins: Axy (~Axy@user/axy)
[22:10:21] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[22:10:21] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[22:10:21] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[22:10:21] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[22:10:21] *** Joins: devslash (~devslash@46.232.211.210)
[22:10:21] *** Joins: sagax (~sagax_nb@user/sagax)
[22:10:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d15a:88a1:e780:f469)
[22:10:21] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[22:10:21] *** Joins: Decker (~d3x0r@user/d3x0r)
[22:10:21] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[22:10:21] *** Joins: jochum (~quassel@user/jochum)
[22:10:21] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[22:10:21] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[22:10:21] *** Joins: Swayze (~gryster@user/swayze)
[22:10:21] *** Joins: EdFletcher (~PKD@user/edfletcher)
[22:10:21] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:10:21] *** Joins: dvanloon7 (~dvanloon@user/dvanloon)
[22:10:21] *** Joins: fef (~thedawn@user/thedawn)
[22:10:21] *** Joins: Guest8414 (riotz@is.only.here.for-some.fun)
[22:10:21] *** Joins: Jaran|zZzZzZzZz (~mail@user/jaran)
[22:10:21] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[22:10:21] *** Joins: kogepan (~kogepan@user/kogepan)
[22:10:21] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[22:10:21] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[22:10:21] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[22:10:21] *** Joins: aku_ (~aku@163.172.137.34)
[22:10:21] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[22:10:21] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[22:10:21] *** Joins: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[22:10:21] *** Joins: SoF (~skius@user/skius)
[22:10:21] *** Joins: monoxane (~monoxane@user/monoxane)
[22:10:21] *** Joins: tofran (~tofran@37.189.158.134)
[22:10:21] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[22:10:21] *** Joins: remolej (~kenoba@user/kenoba)
[22:10:21] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:10:21] *** Joins: keypusher (keypusher@user/keypusher)
[22:10:21] *** Joins: spinningCat (~spinningC@about/web/muscles)
[22:10:21] *** Joins: g00fy78 (~g00fy@user/g00fy)
[22:10:21] *** Joins: montybanksnyc (~montybank@108.50.135.21)
[22:10:21] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[22:10:21] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[22:10:21] *** Joins: crised (~crised@200.112.228.40)
[22:10:21] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:10:21] *** Joins: Unfixed (~Jake@64.31.33.140)
[22:10:21] *** Joins: kevindank (~kevindank@c-76-99-182-66.hsd1.de.comcast.net)
[22:10:21] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[22:10:21] *** Joins: netameta (~netameta@2a00:a040:193:50fe:7859:e7d0:9a61:3c76)
[22:10:21] *** Joins: polyrob (~rob@user/polyrob)
[22:10:21] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[22:10:21] *** Joins: Cyp (~cyp@213.237.85.9)
[22:10:21] *** Joins: morgabra (sid500580@user/morgabra)
[22:10:21] *** Joins: \mSg (mSg@user/msg/x-0285936)
[22:10:21] *** Joins: zwei (~Zweihande@znc.ext.zweihander.me)
[22:10:21] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[22:10:21] *** Joins: noarb (~noarb@user/noarb)
[22:10:21] *** Joins: de-facto (~de-facto@user/de-facto)
[22:10:21] *** Joins: z_lehinsun (~lehinsun@188.113.178.220)
[22:10:21] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[22:10:21] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[22:10:21] *** Joins: fakuve (~fakuve@192.210.243.250)
[22:10:21] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[22:10:21] *** Joins: Sol3 (~Sol3@user/sol3)
[22:10:21] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[22:10:21] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[22:10:21] *** Joins: mrdata (~mrdata@user/mrdata)
[22:10:21] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[22:10:21] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[22:10:21] *** Joins: litharge (litharge@libera/bot/litharge)
[22:10:21] *** Joins: jellobot (~jellobot@li334-26.members.linode.com)
[22:10:21] *** Joins: deniska (~deniska@user/deniska)
[22:10:21] *** Joins: Quark (7f000001@user/quark)
[22:10:21] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[22:10:21] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[22:10:21] *** Joins: Cork (~Cork@user/cork)
[22:10:21] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[22:10:21] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[22:10:21] *** Joins: justIrresolute (~justache@user/justache)
[22:10:21] *** Joins: defjam (~eb0t@90.203.120.248)
[22:10:21] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:10:21] *** Joins: nepeat (~nepeat@79.110.170.60)
[22:10:21] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[22:10:21] *** Joins: Sqaure (~a@user/square)
[22:10:21] *** Joins: zero (~z@user/zero)
[22:10:21] *** Joins: corwin (someone@fosshost/director/corwin)
[22:10:21] *** Joins: a1paca (~a1paca@user/a1paca)
[22:10:21] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[22:10:21] *** Joins: mosh3k21 (~mosh3k21@user/mosh3k21)
[22:10:21] *** Joins: Kobaz (~libera@its.kobaz.net)
[22:10:21] *** Joins: ashnur (~rak@user/ashnur)
[22:10:21] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[22:10:21] *** Joins: edr (~edr@user/edr)
[22:10:21] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[22:10:21] *** Joins: shayr_ (shayr@ip62.ip-91-134-189.eu)
[22:10:21] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[22:10:21] *** Joins: Deide (~deide@user/deide)
[22:10:21] *** molybdenum.libera.chat sets mode: +v jellobot
[22:10:21] *** Joins: rvgate (~rvgate@user/rvgate)
[22:10:21] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[22:10:21] *** Joins: christian[m] (~christian@2001:470:69fc:105::f6f1)
[22:10:21] *** Joins: akurilin_ (uid322841@id-322841.ilkley.irccloud.com)
[22:10:21] *** Joins: percY- (~percY@138.68.239.19)
[22:10:21] *** Joins: nemesit|znc (~nemesit@2a01:488:66:1000:2ea3:4eeb:0:1)
[22:10:21] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[22:10:21] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[22:10:21] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[22:10:21] *** Joins: Slade (~user@user/slade)
[22:10:21] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[22:10:21] *** Joins: Jigsy (~Jigsy@user/jigsy)
[22:10:21] *** Joins: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c)
[22:10:21] *** Joins: nicoty (~nicoty@user/nicoty)
[22:10:21] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[22:10:21] *** Joins: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01)
[22:10:21] *** Joins: mulchy[m] (~mulchynig@2001:470:69fc:105::1:4dd3)
[22:10:21] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[22:10:21] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[22:10:21] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[22:10:21] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[22:10:21] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[22:10:21] *** Joins: orkim (~orkim@user/orkim)
[22:10:21] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[22:10:21] *** Joins: kadoban (~kadoban@user/kadoban)
[22:10:21] *** Joins: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575)
[22:10:21] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[22:10:21] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[22:10:21] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:10:21] *** Joins: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2)
[22:10:21] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[22:10:21] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[22:10:21] *** Joins: kcrk (~kcrk@user/kcrk)
[22:10:21] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[22:10:21] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:10:21] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[22:10:21] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:10:21] *** Joins: flameboi (dgw@user/flameboi)
[22:10:21] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[22:10:21] *** Joins: sunyour (~sunyour@129.226.182.99)
[22:10:21] *** Joins: root____ (~root@157.245.144.252)
[22:10:21] *** Joins: seed0 (~seed0@user/seed0)
[22:10:21] *** Joins: NoiseEee (~NoiseEee@178.128.153.219)
[22:10:21] *** Joins: c17r_ (~c17r@c17r.com)
[22:10:21] *** Joins: monokrome| (~monokrome@50.215.11.140)
[22:10:21] *** Joins: _var (~kdy@kiana.kdy.ch)
[22:10:21] *** Joins: lilmonkey`` (~lilmonkey@user/lilmonkey)
[22:10:21] *** Joins: feoh (~feoh@idlerpg/player/feoh)
[22:10:21] *** Joins: Woet (~me@irc.woet.me)
[22:10:21] *** Joins: Pajus (~Pajus@user/pajus)
[22:10:21] *** Joins: kraucrow (~polarizin@188.166.72.81)
[22:10:21] *** Joins: nortoh (~nortoh@user/nortoh)
[22:10:21] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[22:10:21] *** Joins: tkazi (~tkazi@user/tkazi)
[22:10:21] *** Joins: defn- (~n0b0dy@user/defn)
[22:10:21] *** Joins: BUSY (~BUSY@user/busy)
[22:10:21] *** Joins: ox1eef (~0x1eef@user/ox1eef)
[22:10:21] *** Joins: eMBee (~eMBee@realss.com)
[22:10:21] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[22:10:21] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[22:10:21] *** Joins: Praise (~Fat@user/praise)
[22:10:21] *** Joins: enyc (~enyc@user/enyc)
[22:10:21] *** Joins: jushi (~j@2a01:4f9:c010:8455::1)
[22:10:21] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[22:10:21] *** Joins: [R] (~rs@genoce.org)
[22:10:21] *** Joins: phenom (~primus@user/phenom)
[22:10:21] *** Joins: SchmoSeph (sid530771@id-530771.tinside.irccloud.com)
[22:10:21] *** Joins: Kays (Kays@user/kays)
[22:10:21] *** Joins: Albright (~Albright@149.28.13.173)
[22:10:21] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[22:10:21] *** Joins: mcint (mcint@user/mcint)
[22:10:21] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[22:10:21] *** Joins: davve (davve@bsd.douchedata.com)
[22:10:21] *** Joins: tabakhase (tabakhase@user/tabakhase)
[22:10:21] *** Joins: Swant (~swant@libera/staff/swant)
[22:10:21] *** Joins: xisop (~xisop@bnull.net)
[22:10:21] *** Joins: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[22:10:21] *** Joins: celphi (sid97751@user/celphi)
[22:10:21] *** Joins: hamess (~hamess@user/hamess)
[22:10:21] *** Joins: abraham (~abraham@143.244.185.86)
[22:10:21] *** Joins: gkatsev (~gkatsev@spacecompute.com)
[22:10:21] *** Joins: mynickisregister (~mynickisr@5.79.67.8)
[22:10:21] *** Joins: theskillwithin (~theskillw@user/theskillwithin)
[22:10:21] *** Joins: DCTWD (~dc@uz.utmappro.com)
[22:10:21] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[22:10:21] *** Joins: llinguini (sid257922@id-257922.hampstead.irccloud.com)
[22:10:21] *** Joins: Selicre (~x@hello.i.am.selic.re)
[22:10:21] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[22:10:21] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[22:10:21] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[22:10:21] *** Joins: Voxel (~f8er@user/voxel)
[22:10:21] *** Joins: Artea (~Lufia@artea.com.pt)
[22:10:21] *** Joins: foo (~foo@user/foo/x-8763512)
[22:10:21] *** Joins: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com)
[22:10:21] *** Joins: Spydar007 (~spydar007@user/spydar007)
[22:10:21] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[22:10:21] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[22:10:21] *** Joins: dlam (~dlam@dlam.me)
[22:10:21] *** Joins: Benett (~Benett@xnetx.de)
[22:10:21] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[22:10:21] *** Joins: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e)
[22:10:21] *** Joins: Exa (exa@irc.moe)
[22:10:21] *** Joins: glider (~glider@user/glider)
[22:10:21] *** Joins: tazle (tazle@kapsi.fi)
[22:10:21] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[22:10:21] *** Joins: dfg (dfg@user/dfg)
[22:10:21] *** Joins: ljharb (sid43720@user/ljharb)
[22:10:21] *** Joins: avu (~jan@user/avu)
[22:10:21] *** Joins: Dev0n (~Dev0n@user/dev0n)
[22:10:21] *** Joins: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at)
[22:10:21] *** Joins: arash (arash@thinks.life.is-a.beauty)
[22:10:21] *** Joins: thykka (~thykka@2a01:4f8:c0c:e335::1)
[22:10:21] *** Joins: Koopz (~Koopz@koopz.rocks)
[22:10:21] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[22:10:21] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[22:10:21] *** Joins: futs (~nico@142.93.239.247)
[22:10:21] *** Joins: Isthmusi (~Isthmus@user/isveni)
[22:10:21] *** Joins: betterOn1 (~user@vmi489242.contaboserver.net)
[22:10:21] *** Joins: rosseaux (~BeRo@2a00:1828:2000:859::2)
[22:10:21] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[22:10:21] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[22:10:21] *** Joins: croraf (croraf@croraf.ircforever.org)
[22:10:21] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[22:10:21] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[22:10:21] *** Joins: adar (uid1346@user/adar)
[22:10:21] *** Joins: hughrawlinson_ (sid11243@2a03:5180:f:3::2beb)
[22:10:21] *** Joins: andrew9184_ (sid416777@id-416777.uxbridge.irccloud.com)
[22:10:21] *** Joins: klys (~mdasoh@show.op8.us)
[22:10:21] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[22:10:21] *** Joins: ringo__ (~ringo@157.230.117.128)
[22:10:21] *** Joins: Emil (emil@emil.fi)
[22:10:21] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[22:10:21] *** Joins: lf94 (~lf94@user/lf94)
[22:10:21] *** Joins: Moyst_ (~moyst@user/moyst)
[22:10:21] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[22:10:21] *** Joins: theglass (~glass@user/theglass)
[22:10:21] *** Joins: Kirjava (~cake@user/kirjava)
[22:10:21] *** Joins: les (znc@user/les)
[22:10:21] *** molybdenum.libera.chat sets mode: +o ljharb
[22:10:21] *** Joins: Fossil (~Fossil@95.85.23.165)
[22:10:21] *** Joins: chronon (~chronon@user/chronon)
[22:10:21] *** Joins: ThePendulum (~znc@37.139.2.240)
[22:10:21] *** Joins: pez_ (~pez@user/pez)
[22:10:21] *** Joins: xsznix9 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[22:10:21] *** Joins: Joel (~jjshoe@user/joel)
[22:10:21] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[22:10:21] *** Joins: pagios (~pagios@life.is-a.beauty)
[22:10:21] *** Joins: ttys000 (~ttys000@user/ttys000)
[22:10:21] *** Joins: hbjy (~hbjy@rockylinux/web/hbjy)
[22:10:21] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[22:10:21] *** Joins: erry (~erry@errietta.me)
[22:10:21] *** Joins: edk (edk@libera/staff/edk)
[22:10:21] *** Joins: niko (~niko@libera/staff/niko)
[22:10:21] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[22:10:21] *** Joins: PigDude (~PigDude@159.203.16.199)
[22:10:21] *** Joins: OverCoder (~OverCoder@user/overcoder)
[22:10:21] *** Joins: hackdash (h@user/hackdash)
[22:10:21] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[22:10:21] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[22:10:21] *** Joins: OneMirror (~far@onegrandcircle.com)
[22:10:21] *** Joins: APic (apic@apic.name)
[22:10:21] *** Joins: petril (~petril@user/petril)
[22:10:21] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[22:10:21] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[22:10:21] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[22:10:21] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[22:10:21] *** Joins: laris (undead@37.221.209.36)
[22:10:21] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[22:10:21] *** Joins: WizJin (~z0rbaznc@78.141.221.79)
[22:10:21] *** Joins: _nderscore (~nderscore@silentf.art)
[22:10:21] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[22:10:21] *** Joins: quesker (~idnet@mail.89vx.net)
[22:10:21] *** Joins: Sherpard2 (~VPard@user/sherpard2)
[22:10:21] *** Joins: Stx (stx@libera/staff/stx)
[22:10:21] *** Joins: joepie91 (~joepie91p@user/joepie91)
[22:10:21] *** Joins: con3 (~con3@143.198.53.32)
[22:10:21] *** Joins: newton (james@user/newton)
[22:10:21] *** Joins: ekl (~ekl@user/ekl)
[22:10:21] *** Joins: madprops (hj8oijo@user/madprops)
[22:10:21] *** Joins: trog (~trog@user/trog)
[22:10:21] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[22:10:21] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[22:10:21] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[22:10:21] *** Joins: cythrawll (sid384410@id-384410.ilkley.irccloud.com)
[22:10:21] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[22:10:21] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[22:10:21] *** Joins: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com)
[22:10:21] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[22:10:21] *** Joins: Liber- (cis@user/cis)
[22:10:21] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9)
[22:10:21] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[22:10:21] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[22:10:21] *** Joins: cebor (~cebor@user/cebor)
[22:10:21] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[22:10:21] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:10:21] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[22:10:21] *** Joins: Enissay (~Enissay@user/enissay)
[22:10:21] *** Joins: ozymandias (~ozymandia@libre.theyareafter.us)
[22:10:21] *** Joins: samsch (~samsch@171.ip-192-99-69.net)
[22:10:21] *** Joins: Byteflux (~byte@byteflux.net)
[22:10:21] *** Joins: Croran (~Croran@71.231.214.173)
[22:10:21] *** Joins: dmanto (~dmanto@181.110.128.50)
[22:10:21] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:21] *** molybdenum.libera.chat sets mode: +o ChanServ
[22:10:29] *** Joins: victor_ (uid208353@user/victor)
[22:10:29] *** Quits: calcmandan_ (~quassel@67.159.143.134) (Changing host)
[22:10:29] *** Joins: calcmandan_ (~quassel@user/calcmandan)
[22:10:30] *** Joins: adas (adas@adas.shelltalk.net)
[22:10:32] *** Quits: znf_ (~ibm86@toaster.linge-ma.ro) (Ping timeout: 263 seconds)
[22:10:32] *** Joins: happymeal (~happymeal@user/happymeal)
[22:10:32] <windsurf_> can anyone recommend a tool to click an interface for me to expedite navigating to the spot I'm testing (I'm repeating the same cumbersome step a lot). I don't want to introduce shortcut code into my app to do it. I'd rather a browser plugin or something like that
[22:10:33] *** Joins: scara (~user@user/scara)
[22:10:33] *** Joins: znf (~ibm86@toaster.linge-ma.ro)
[22:10:33] <windsurf_> and I'm not ready for Cypress E2E testing yet (though I have that once I am feature complete)
[22:10:35] *** Parts: florian2 (~none@2a01:4f8:1c17:6cd5::1) ()
[22:10:36] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[22:11:15] *** Joins: rvgate3 (~rvgate@user/rvgate)
[22:11:27] *** Joins: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net)
[22:11:47] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[22:12:35] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[22:13:03] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:13:07] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 256 seconds)
[22:13:07] *** rvgate3 is now known as rvgate
[22:13:29] *** Joins: machuga (~machuga@104.236.124.225)
[22:13:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[22:14:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:16:20] *** Joins: stenno (~stenno@user/stenno)
[22:16:50] <ljharb> windsurf_: if your app is built properly, the URL should contain all of the information needed for you to directly navigate there
[22:17:01] <ljharb> perhaps modulo logging in
[22:18:01] <windsurf_> ljharb not necessarily
[22:21:47] *** Joins: sybariten (~jake@157.90.217.120)
[22:21:49] *** Joins: s1b1 (~s1b1@user/s1b1)
[22:22:13] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[22:24:19] <ljharb> windsurf_: can you give me an example? because my instinct and experience tells me yes, necessarily
[22:25:36] <windsurf_> Some software designs require the user to go through certain actions and choices to arrive at a particular state int he app that is complex ‚Äì too complex to reconstitute from some URL parameters or hashes. There are business cases why you wouldn't want a user to deep link into a specific state without going through the proper process.
[22:25:57] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[22:26:26] <windsurf_> I found this btw https://chrome.google.com/webstore/detail/imacros-for-chrome/cplklnmnlbnpmjogncfgfijoopmnlemp?hl=en
[22:29:44] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[22:30:04] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:31:16] *** Quits: scara (~user@user/scara) (Ping timeout: 276 seconds)
[22:31:29] <windsurf_> also, some of these clicks build up an ephemeral state that is not persisted to a back-end/session until a certain critical point so you can't have just an id in the url to correlate to all the settings on the state in this case.
[22:33:17] *** Joins: scara (~user@user/scara)
[22:33:52] *** Joins: sam_1 (~sam_1@87.51.251.118)
[22:34:05] <Camilo> thanks for the help ljharb, but I'm getting a "response is undefined" error now.
[22:35:06] <Camilo> which I assume means the "onSubmit" funciton still isn't waiting for the "saveProperty" function
[22:38:26] <ljharb> Camilo: make a codesandbox
[22:38:37] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[22:38:41] <ljharb> windsurf_: I‚Äôve never seen a state too complex to be stored in the url
[22:38:51] <ljharb> windsurf_: but also, store the state in the db and out an identifier in the url
[22:38:58] <ljharb> there‚Äôs never an excuse to make state session-dependent.
[22:39:26] <windsurf_> I build very complex applications, I have seen it a number of times. I also have information in the URL where it is applicable.
[22:39:54] *** Quits: thojanssens (~thojansse@182.232.32.63) (Ping timeout: 256 seconds)
[22:40:10] <windsurf_> regarding the id in the url ‚Äì I addressed that ‚Äì this is front-end state that hasn't been committed to back-end yet so there is no ID at this point in time in the use case I'm testing.
[22:40:54] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:41:16] <windsurf_> @ljharb Maybe this is a good simplified example: partially filling out a large unsubmitted form
[22:45:05] *** Quits: Hazza (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:21] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[22:47:16] *** Joins: N4buc0- (~N4buc0@2804:7f4:348a:16c8:ba8f:32d3:58a7:9277)
[22:47:27] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:47:36] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:47:50] *** Quits: N4buc0 (~N4buc0@200.146.13.23.dynamic.dialup.gvt.net.br) (Ping timeout: 256 seconds)
[22:47:55] *** Joins: thojanssens (~thojansse@182.232.32.63)
[22:48:05] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:3557:1340:68be:61e8)
[22:49:27] <onosendi> windsurf_: is each partial form saving the current state somewhere? If so, just mock the data in the state?
[22:49:49] *** Quits: kevindank (~kevindank@c-76-99-182-66.hsd1.de.comcast.net) (Quit: Client closed)
[22:49:51] <windsurf_> onosendi I'm trying not to modify the app's code to do this.
[22:49:53] <ljharb> windsurf_: having such a large form is a massive UX issue
[22:49:56] *** Joins: trevors (~trevors@user/trevors)
[22:50:03] <windsurf_> ljharb it's just an analog for what I'm really talking about.
[22:50:10] <ljharb> windsurf_: but sure, you could use a bookmarklet to fill out the form for yourself
[22:50:17] <ljharb> but if it's onerous for you then it's onerous for users.
[22:51:56] <jaawerth> huh, this is new. I'm working on a somewhat gnarly legacy project - and bundle sizes are already such that I need to be careful about what I do without removing other things first. and I just added an import of `lodash/compose` (sine they already have lodash all up in here) and.. it made the bundle size go *down* by 0.04 kb. it wasn't just an artifact either, it seems deterministic
[22:52:25] <jaawerth> I can't think of any reason for this, lol. I didn't use it, I literally just imported it.. all I can think is maybe what it did to the bundler state made tree-shaking more efficient somehow??
[22:53:14] <windsurf_> jaawerth could it be that your version of lodash is overwriting the one they had and it's more optimized?
[22:53:18] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:3557:1340:68be:61e8) (Ping timeout: 268 seconds)
[22:54:49] *** Quits: N4buc0- (~N4buc0@2804:7f4:348a:16c8:ba8f:32d3:58a7:9277) (Read error: Connection reset by peer)
[22:54:57] *** Joins: N4buc0 (~N4buc0@191.250.99.50)
[22:55:06] <windsurf_> @ljharb ah, bookmarklet should work, thanks!
[22:57:19] <jaawerth> windsurf_: it's the same project, I just added an import statement
[22:57:21] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[22:57:46] <jaawerth> oh well, guess I shouldn't look a gift horse in the mouth lol
[22:57:48] <windsurf_> jaawerth very interesting. I wouldn't claim to understand the deep inner workings of webpack, sorry
[22:57:51] <windsurf_> hah
[22:58:23] <jaawerth> lol I wasn't really expecting *anyone* to ahve an answer but I was curious if anyone had any educated guesses because it's interesting
[22:58:46] <jaawerth> my guess is it affected how tree-shaking does whatever math it does to figure out what it can remove without false postiives
[22:59:52] <hassoon> best portfolio website http://marek.mojzik.net/
[22:59:53] <ljharb> jaawerth: it's probably that webpack is extracting it to the common bundle based on usage
[22:59:55] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:00:06] <ljharb> jaawerth: that can happen all the time by adding or removing a usage of a lib
[23:01:13] <jaawerth> ljharb: no common bundle here tho
[23:01:32] <ljharb> jaawerth: very weird
[23:01:47] <ljharb> i still suspect webpack's heuristics which are often based on arbitrary thresholds
[23:02:17] <jaawerth> yeah, it's gotta be something like that
[23:03:01] <jaawerth> now that you mention it I should definitely cross-check lodash's size stimates
[23:03:39] <jaawerth> er, webpack's rather
[23:03:41] <jaawerth> SAME THING AMIRITE
[23:04:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[23:04:44] <jaawerth> hahaha ok yeah webpack's just telling me baldfaced lies. good call.
[23:04:56] <jaawerth> `ls -sh` has a thing or two to say about it
[23:05:18] *** Joins: trevors (~trevors@user/trevors)
[23:05:28] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[23:06:57] <ljharb> lol
[23:07:46] <avu> jaawerth: ls -s is not a very precise way to see the size of files as it measures in blocks
[23:07:56] *** Quits: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: All for nothing)
[23:09:08] <avu> especially since you were walking about differences in the 0.04kb range, those will most definitely be swallowed by that
[23:09:11] *** Quits: calcmandan_ (~quassel@user/calcmandan) (Quit: Visit me at: gopher://gcpp.world)
[23:09:50] *** Joins: calcmandan (~quassel@user/calcmandan)
[23:09:57] *** Quits: thojanssens (~thojansse@182.232.32.63) (Read error: Connection reset by peer)
[23:12:46] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[23:14:12] *** Joins: gopar (~gopar@199.36.94.212)
[23:18:38] <jaawerth> avu: true
[23:18:44] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:18:45] <jaawerth> I forget that sometimes
[23:19:27] <jaawerth> `wc` it is then
[23:19:49] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[23:21:57] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (Quit: ZNC - https://znc.in)
[23:21:57] *** Quits: scara (~user@user/scara) (Ping timeout: 276 seconds)
[23:22:12] *** Joins: iio7 (~iio7@user/iio7)
[23:22:20] <iio7> How do I do this correctly? https://paste.rs/FM0.js
[23:22:36] <jaawerth> hmm nope, wc -c shows a 41 byte increase when I remove `import lodash/compose`. I suppose it shall just remain a mystery
[23:24:15] *** Joins: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2)
[23:24:15] *** Quits: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2) (Changing host)
[23:24:15] *** Joins: corgi (~corgi@user/corgi)
[23:24:56] *** Joins: scara (~user@user/scara)
[23:25:01] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[23:25:20] <onosendi> jaawerth: `du` ?
[23:27:08] <jaawerth> du also operates on blocks
[23:27:17] <jaawerth> wc actually processes things
[23:28:51] <onosendi> Ah
[23:28:57] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[23:29:36] <Camilo> ljharb: https://codesandbox.io/s/nervous-glitter-rg1mr
[23:29:51] <jaawerth> avu: thanks, bad habbit I guess
[23:31:15] <onosendi> Camilo: you forgot to save? There's nothing in there.
[23:31:57] *** Quits: jw_dungeon (~jw@2601:44:4380:4a10:9c0:1948:7472:cb5d) (Ping timeout: 240 seconds)
[23:32:30] <Camilo> oh, do i have to sign up to save it?
[23:32:43] *** Quits: D1nger (~Booster2o@host-95-182-204-88.dynamic.voo.be) (Read error: Connection reset by peer)
[23:34:37] <onosendi> Camilo: just: file -> save your files.
[23:35:24] <Camilo> thanks, sorry first time using this
[23:37:29] <avu> jaawerth: yeah, it's easy to fall into and in many cases it doesn't matter anyway since 4kb increments are precise enough
[23:37:33] <iio7> Bumb, I just need a hint, https://paste.rs/FM0.js
[23:39:57] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 240 seconds)
[23:40:46] *** Joins: c4017_ (~c4017@2604:3d08:747f:7c90:a889:4f4d:e472:168c)
[23:42:45] <onosendi> Camilo: https://codesandbox.io/s/crimson-darkness-y3uk3
[23:43:07] <onosendi> Camilo: you can't `let pokemon`, then set it in your click handler and expect the UI to update. You have to `useState`
[23:44:35] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:8dab:4b67:acba:8565) (Ping timeout: 250 seconds)
[23:47:53] *** Joins: gehn (~gehn@user/gehn)
[23:49:17] *** Quits: scara (~user@user/scara) (Remote host closed the connection)
[23:49:57] <jaawerth> it's funny taht I use wc all the time for literally everything else involving counting thigns in a file though
[23:51:11] *** Joins: scara (~user@user/scara)
[23:52:09] *** Joins: jw_dungeon (~jw@2601:44:4380:4a10:84fa:95e:73a6:3e6d)
[23:52:15] <Camilo> you're right onosendi, I've updated the code to reflect this, but the underlying issue is that line 9 doesn't do what I expect (as evidence by the console log)
[23:56:00] <onosendi> Camilo: what is "fetchSurveySuccess" ?
[23:56:02] *** Joins: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2)
[23:56:03] *** Quits: corgi (~corgi@2620:1b2:c40:3000:bcdd:cde2:d226:bdd2) (Changing host)
[23:56:03] *** Joins: corgi (~corgi@user/corgi)
[23:59:04] <Camilo> ah some mobx convention I think. sorry didn't edit the code properly. Just realised what I could (should?) do is save the result of the api request in the store, then have an observer in the app watch the store and react to changes
[23:59:44] <iio7> This is also not working https://paste.rs/82T.js I thought a global variable declared before the function can be used as global inside the function.
