[00:00:15] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[00:01:34] *** Joins: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se)
[00:01:35] *** Joins: hololeap (~hololeap@user/hololeap)
[00:03:57] <ski> > [M.fromList [(0,"zero")],M.fromList [(1,"one"),(2,"two")]] & partsOf (traverse . traverse) %~ reverse  -- Henson, maybe something like this ?
[00:03:58] <lambdabot>  [fromList [(0,"two")],fromList [(1,"one"),(2,"zero")]]
[00:04:19] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[00:06:36] *** Quits: nucranium (~nucranium@2a02:8010:6173:0:1518:15e2:d1d7:f9f8) (Ping timeout: 250 seconds)
[00:07:46] *** Joins: nucranium (~nucranium@2a02:8010:6173:0:1518:15e2:d1d7:f9f8)
[00:07:47] <ski> (or perhaps using `unsafePartsOf' in place of `partsOf', which will error out if your `bar' produces too few elements (too many will ignore the excess ones, for either combinator))
[00:08:58] <ski> @. hoogle type (sequence .) . fmap
[00:09:00] <lambdabot> Prelude mapM :: (Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)
[00:09:00] <lambdabot> Control.Monad mapM :: (Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)
[00:09:00] <lambdabot> Data.Traversable mapM :: (Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)
[00:09:06] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[00:10:05] <[exa]> oh unsafePartsOf can change the type, cool.
[00:10:22] *** Quits: nucranium (~nucranium@2a02:8010:6173:0:1518:15e2:d1d7:f9f8) (Client Quit)
[00:11:52] <Henson> ski: hmm, it looks like partsOf might be what I need, I'll experiment with that and see where it gets me.
[00:12:15] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[00:12:32] <ski> Henson : assuming you have `Traversable (Foo K)', obviously
[00:12:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:13:55] *** Joins: acidjnk (~acidjnk@p200300d0c7049f99c07e6a42421e5c0c.dip0.t-ipconnect.de)
[00:17:27] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[00:17:35] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[00:18:46] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:19:00] <ski> hm, now i'm wondering if there's `Functor f => Traversing (->) f s t a b -> exists t. Traversable t *> LensLike f s t (t a) (t b)' or `(Functor f,Traversable t) => ATraversal s t a b -> (t a -> f (t b)) -> s -> f t' (possibly with `a = b')
[00:20:27] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Read error: Connection reset by peer)
[00:21:01] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[00:21:06] <ski> er, accidentally used the same tyvar `t' for two different things. and the latter one was wrong anyway. try `Functor f => Traversing (->) f s t a b -> exists g. Traversable g *> LensLike f s t (g a) (g b)' or `Functor f => ATraversal s t a b -> (forall g. Traversable g => g a -> f (g b)) -> s -> f t' (possibly with `a = b'), rather
[00:22:31] <Henson> I don't actually need to the type change.  In my application Y = X, so partsOf should work
[00:22:31] *** Quits: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se) (Remote host closed the connection)
[00:23:14] <Henson> ski: yeah, I'm writing all of these types myself, so I can make the necessary instances.
[00:23:20] <ski> @type let partsOf'_ :: Functor f => ATraversal s t a a -> (forall g. Traversable g => g a -> f (g a)) -> s -> f t; partsOf'_ = partsOf' in partsOf'_
[00:23:21] <lambdabot> Functor f => ATraversal s t a a -> (forall (g :: * -> *). Traversable g => g a -> f (g a)) -> s -> f t
[00:23:26] <ski> seems legit ..
[00:23:56] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:6118:54b1:a270:d89b) (Quit: Leaving)
[00:24:17] <ski> of course, you can't easily use `reverse' with this variant
[00:24:26] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[00:25:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:25:42] <ski> (you could probably do a `Control.Monad.State.Lazy' trick, along the lines of what [exa] suggested)
[00:26:27] <ski> Henson : well, i was thinking maybe you'd prefer it to error out if `bar' returned a shorter list
[00:27:16] <ski> (not sure if there's an easy way to also make it error out if it returns a longer list .. that's what got me thinking about using an abstract `Traversible' `g', rather than the concrete `[]')
[00:29:00] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:29:02] <Henson> ski: thanks for the suggestion, but that would make things even more complicated.  The returned list should always be the same size so I'm not concerned with it changing shape.
[00:29:34] *** Quits: nexus_ (~nexus@178-164-207-111.pool.digikabel.hu) (Ping timeout: 250 seconds)
[00:30:29] <ski> yea, the `Traversable g' stuff was more of a side rumination, than an actual suggestion for you
[00:31:34] *** Joins: nexus (~nexus@176-241-62-204.pool.digikabel.hu)
[00:35:42] *** Quits: namkeleser (~namkelese@101.175.155.55) (Quit: Client closed)
[00:37:04] <ski> hm, perhaps one could add `Representable g' (or something ?) in addition to `Traversable g' ..
[00:37:07] <jackdk> Henson: How'd you go with your streaming stuff yesterday?
[00:37:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:37:27] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:c81a:b383:83c1:b919)
[00:38:21] *** Joins: Everything (~Everythin@37.115.210.35)
[00:38:49] *** Quits: ph88 (~ph88@84-30-78-253.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[00:39:01] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[00:39:35] *** Joins: Pickchea (~private@user/pickchea)
[00:40:38] <Henson> jackdk: well, this Optics thing is a way to try to get around that.  Instead of splitting the things into separate streams, I'm trying to manipulate the data in one go using something like "over".
[00:42:19] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Ping timeout: 250 seconds)
[00:42:20] <[exa]> ski: actually I'm not sure now if lazy state would even help there
[00:42:34] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[00:43:38] <ski>   exists a. C a *> (Foo a -> Bar)  >--->  (forall a. C a => Foo a) -> Bar
[00:43:44] <ski>   exists a. C a *> (Foo a -> Bar)  =====  forall o. ((exists a. C a *> (Foo a -> Bar)) -> o) -> o
[00:43:47] <ski>                                    =====  forall o. (forall a. C a => (Foo a -> Bar) -> o) -> o
[00:43:53] <ski> .. hmm
[00:44:04] *** Joins: pavonia (~user@user/siracusa)
[00:44:04] <ski> (how to make a commuting diagram ?)
[00:45:20] <ski> [exa] : hm, wouldn't TyingTheKnot work, you think ?
[00:45:44] <[exa]> yeah just wondering how to get all the values out correctly at once
[00:46:24] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[00:46:57] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[00:47:08] <jackdk> Henson: so the item type of your stream is a `Foo K X` and you want to go to `Foo K Y`?
[00:50:57] <ski> Henson : hm, your list is an incrementally produced stream ? i'd guess that the `partsOf' solution(s) above are bulky, rather than incremental (so waits for the end of the list/stream, before producing the first `Foo K Y' output element) (i haven't tested this, it's just a guess)
[00:51:45] *** Joins: alp (~alp@user/alp)
[00:52:35] <ski> @hoogle (a,b -> c) -> (a -> b) -> c
[00:52:36] <lambdabot> No results found
[00:52:36] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 240 seconds)
[00:52:40] <ski> @djinn (a,b -> c) -> (a -> b) -> c
[00:52:40] <lambdabot> f (a, b) c = b (c a)
[00:52:43] <ski> @hoogle a -> (b -> c) -> (a -> b) -> c
[00:52:43] <lambdabot> No results found
[00:52:45] *** Quits: thyriaen (~thyriaen@ip5f5af2d7.dynamic.kabel-deutschland.de) (Quit: Leaving)
[00:53:16] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:54:37] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[00:54:38] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[00:57:26] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:c81a:b383:83c1:b919) (Quit: bye)
[00:59:20] <[exa]> ski: any thoughts on de-abominating this?--
[00:59:22] <[exa]> > let (d,r) = traverseByOf (traverse._2) (\x->(mempty,x)) (<*>) (\x -> ([x],x++(concat d))) [('a',"bcd"),('c',"def")] in r
[00:59:24] <lambdabot>  [('a',"bcdbcddef"),('c',"defbcddef")]
[01:00:36] <[exa]> okay there's one very explicit `pure`
[01:01:00] <[exa]> which makes it traverseOf I guess....
[01:01:26] *** Joins: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com)
[01:04:47] <[exa]> > let (d,r) = traverseOf (traverse._2) (\x -> ([x],show (x*sum d))) [('A',1),('B',2)] in r
[01:04:48] <lambdabot>  [('A',"3"),('B',"6")]
[01:06:53] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[01:07:22] <[exa]> (,) is the best type ever and I can sleep now.
[01:07:37] <ski> > sequence ["01","ab"]
[01:07:38] <lambdabot>  ["0a","0b","1a","1b"]
[01:07:45] <ski> > getZipList `map` [ZipList [\case False -> '0'; True -> '1',\case False -> 'a'; True -> 'b'] <*> ZipList ij | ij <- replicateM 2 [False,True]]
[01:07:47] <lambdabot>  ["0a","0b","1a","1b"]
[01:07:52] <ski> % :set -XApplicativeDo
[01:07:52] <yahb> ski: 
[01:07:57] <ski> % getZipList `map` getZipList (do ij <- replicateM 2 (ZipList [False,True]); return (ZipList [\case False -> '0'; True -> '1',\case False -> 'a'; True -> 'b'] <*> ZipList ij))
[01:07:57] <yahb> ski: ["0a","1b"]
[01:08:22] <ski> @type sequence
[01:08:24] <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
[01:08:26] <ski> @type (<*>)
[01:08:27] <lambdabot> Applicative f => f (a -> b) -> f a -> f b
[01:08:53] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:11:05] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:11:36] <nf> int-e: could you take a look at https://github.com/lambdabot/lambdabot/pull/204 when you have a minute?
[01:12:30] <sm> nice, https://hackage.haskell.org/package/ihp-hsx on hackage now
[01:12:35] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[01:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:15:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:15:22] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[01:20:15] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:20:51] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:20:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:20:57] <ski> > let (d,r) = [('A',1),('B',2)] & traverse._2 %%~ \x -> ([x],show (x * sum d)) in r
[01:20:58] <lambdabot>  [('A',"3"),('B',"6")]
[01:21:00] <ski> > let (r,d) = runWriter ([('A',1),('B',2)] & traverse._2 %%~ \x -> do tell [x]; return (show (x * sum d))) in r
[01:21:02] <lambdabot>  [('A',"3"),('B',"6")]
[01:21:04] <shapr> oh wow, a lambdabot plugin I wrote no longer works with ghc 9?!
[01:21:20] <ski> [exa] : took me a bit to decipher it
[01:22:09] <shapr> nf: I think the fortune plugin was written in 2002 it's had a long life!
[01:23:19] <ski> @fortune
[01:23:19] <lambdabot> May you have many beautiful and obedient daughters.
[01:24:11] <ski> @palomer
[01:24:11] <lambdabot> (_|_)
[01:24:29] <shapr> hahaha
[01:24:48] * ski still remembers palomer,Keal
[01:24:52] <ski> @keal
[01:24:52] <lambdabot> i aint running that on my puter
[01:25:52] *** Quits: michalz (~michalz@185.246.204.43) (Remote host closed the connection)
[01:25:54] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Ping timeout: 250 seconds)
[01:28:27] *** Joins: michalz (~michalz@185.246.204.41)
[01:28:42] *** Quits: michalz (~michalz@185.246.204.41) (Remote host closed the connection)
[01:29:03] <[exa]> ski: we should have some syntax for marking important and arbitrary bits in the examples :] but I guess it's nailed there with the Writer
[01:29:45] * ski still isn't really familiar with `lens'
[01:30:17] <nf> shapr: are you saying it's had a long life and it needs to die or the opposite :D
[01:30:34] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:31:13] *** Joins: michalz (~michalz@185.246.204.43)
[01:32:31] * ski . o O ( ‟That is not dead which can eternal lie,And with strange aeons even death may die.” )
[01:32:47] <c_wraith> ski: the best thing about your examples is that (%%~) = id
[01:33:36] <jackdk> How much of lens is secretly `id` at this point?
[01:33:52] <c_wraith> only like about 10 things
[01:34:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92)
[01:34:12] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:34:19] <[exa]> yup the rest is just Identity
[01:34:31] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:35:15] <c_wraith> (and runIdentity)
[01:35:36] <[exa]> :]
[01:35:37] <ski> c_wraith : figured that'd look nicer, in the operator salad version :p
[01:36:03] <jackdk> Axman6: see, I knew it!
[01:36:04] <nf> that which is not id is (.), and that which is not (.) is id
[01:36:31] <ski> (although, i'm pretty tired atm, so i only noticed it could be omitted, in passing, then promptly forgot about it again, when presenting the finished examples)
[01:36:50] *** Quits: michalz (~michalz@185.246.204.43) (Remote host closed the connection)
[01:37:05] <[exa]> btw, now when seeing this, I might already have asked and forgot-- what was the reason the tuple is "reversed" in State and Writer?
[01:37:19] <ski> (.. i had to check my backlog, to notice that i had already noticed before)
[01:37:26] <c_wraith> I don't think there is a good reason
[01:37:38] <c_wraith> Other than "it doesn't matter since it's behind a newtype anyway"
[01:37:43] <[exa]> (reversed as in "unlike the usual functor position")
[01:38:32] <ski> well, i suppose it's just an (unhappy) accident
[01:38:43] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com)
[01:39:15] <[exa]> maybe a safety precaution against misusing fmaps&others from actual (,) where they don't belong?
[01:39:31] <[exa]> my best hypothesis so far ^
[01:39:39] <ski> (perhaps, for the `Writer' case, it could be because there was a slight preference to writing the larger output expressions after the smaller result expression .. but that's focusing on convenience for implementation, rather than user interface ..)
[01:39:57] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:39:59] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:40:15] <monochrom> I heard the reason, but I forgot. Let me see if I can find it in my logs.
[01:40:31] <ski> if `Writer' and `State' were to be redone, i'd advocate for swapping it around
[01:40:36] <[exa]> yeah the question's been around already
[01:40:47] <geekosaur> wasn't it some CT thing?
[01:40:54] <geekosaur> vague memory
[01:41:25] <ski> my bet would be on "hysterical raisins"
[01:42:12] <shapr> nf: I don't know! It's a nice plugin I guess?
[01:42:16] <shapr> @fortune
[01:42:16] <lambdabot> "I say we take off; nuke the site from orbit.  It's the only way to be sure."
[01:42:16] <lambdabot> - Corporal Hicks, in "Aliens"
[01:42:27] <ski> @yow
[01:42:27] <lambdabot> Do I have a lifestyle yet?
[01:42:49] <ski> perhaps there could be slightly more bot abuse in the channel
[01:43:11] <shapr> When I first wrote that plugin it (and @quote) had an off by one error that persistent for years. Ten years later I jumped in to finally fix it, and found it HAD BEEN FIXED and someone had saved the off by one error as a quote?!?!?
[01:43:36] <nf> @yow
[01:43:36] <lambdabot> I'm also against BODY-SURFING!!
[01:43:50] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[01:43:53] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:44:02] <nf> @arr
[01:44:02] <lambdabot> Keelhaul the swabs!
[01:44:05] <nf> @yarr
[01:44:05] <lambdabot> Yo ho ho, and a bottle of rum!
[01:44:07] <shapr> Yeah, that plugin came from testing the quote plugin with zippy the pinhead quotes that shipped with emacs!
[01:44:15] <shapr> @protontorpedo
[01:44:15] <lambdabot> hakell is not lisp or ml right?
[01:44:23] <ski> @v
[01:44:23] <lambdabot> "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\"
[01:44:34] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:45:24] <ski> @pinky
[01:45:24] <lambdabot> I think so, Brain, but, the Rockettes? I mean, it's mostly girls, isn't it?
[01:45:29] <nf> fine i'll make a shell wrapper
[01:46:19] <shapr> The fortune / quote / yow / etc plugin was the second plugin that worked, @echo was the first
[01:46:34] <shapr> @echo hello
[01:46:34] <lambdabot> echo; msg:IrcMessage {ircMsgServer = "libera", ircMsgLBName = "lambdabot", ircMsgPrefix = "shapr!~user@pool-173-73-44-186.washdc.fios.verizon.net", ircMsgCommand = "PRIVMSG", ircMsgParams = ["#
[01:46:34] <lambdabot> haskell",":@echo hello"]} target:#haskell rest:"hello"
[01:47:17] <shapr> nf: if you're interested, there's a bit of history about lambdabot in the most recent cofree coffee podcast
[01:47:32] <nf> i don't like history
[01:47:39] <shapr> fair enough
[01:47:39] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[01:48:39] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[01:48:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[01:48:40] *** finn_elija is now known as FinnElija
[01:49:22] <shapr> though at least one person recently active in this channel did get their PhD from figuring out how to hot-reload lambdabot plugins
[01:50:57] <hpc> i didn't think PhD work could be specific in that particular way
[01:51:07] <nf> lol
[01:51:13] *** Joins: Guest|20 (~Guest|20@dynamic-046-114-001-168.46.114.pool.telefonica.de)
[01:51:26] *** Quits: Guest|20 (~Guest|20@dynamic-046-114-001-168.46.114.pool.telefonica.de) (Client Quit)
[01:51:30] * ski . o O ( "Les Horribles Cernettes" <https://web.archive.org/web/20120101010055/http://musiclub.web.cern.ch/MusiClub/bands/cernettes> )
[01:54:13] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Quit: Client closed)
[01:58:50] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[02:00:41] <monochrom> This: https://ircbrowse.tomsmeding.com/day/lchaskell/2022/01/22?id=388992#trid388992
[02:04:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[02:05:40] * ski . o O ( "Types and Reflection" (Masters thesis) by Lauri Emil Alanko in 2004-11-08 at <https://web.archive.org/web/20130510183001if_/http://www.cs.helsinki.fi/u/lealanko/alanko04types.ps.gz>,<http://lambda-the-ultimate.org/node/219> )
[02:06:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:06:48] <shapr> Are you figuring out which thesis was about hot reloading lambdabot plugins?
[02:06:48] <ski> monochrom : oh, that recently ..
[02:07:50] <ski> shapr : i don't recall / i'm not sure which one you had in mind (note the above was not a Ph. D. thesis, so perhaps you were thinking about something else) .. it's just what i reminisced, when you mentioned that
[02:07:59] <shapr> ah, fair enough
[02:08:03] <shapr> I was curious
[02:08:11] <ski> (although i was foiled for a little while, since i misremembered the surname as "Alenko")
[02:08:19] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[02:08:24] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[02:08:41] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Client Quit)
[02:10:44] <ski> @wn trefoil
[02:10:44] <lambdabot> *** "trefoil" wn "WordNet (r) 3.0 (2006)"
[02:10:44] <lambdabot> trefoil
[02:10:44] <lambdabot>     n 1: any of several Old World herbs of the genus Medicago having
[02:10:44] <lambdabot>          small flowers and trifoliate compound leaves [syn: {medic},
[02:10:44] <lambdabot>          {medick}, {trefoil}]
[02:10:46] <lambdabot> [3 @more lines]
[02:11:01] <ski> @more
[02:11:01] <lambdabot>     2: a plant of the genus Trifolium [syn: {clover}, {trefoil}]
[02:11:01] <lambdabot>     3: an architectural ornament in the form of three arcs arranged
[02:11:01] <lambdabot>        in a circle
[02:11:40] <ski> reading that backlog, i'm surprised i remember the conversation about `readme'
[02:12:01] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[02:12:09] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:12:15] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[02:12:23] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:12:31] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[02:12:39] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:12:52] * ski notes shapr was the one initiating that LtU thread, though
[02:13:42] <shapr> uh oh
[02:15:00] <dons> moin moin
[02:15:27] <shapr> howdy dons ! How you doin?
[02:15:38] <dons> hey d00d. pretty good. been a while. 
[02:15:48] <shapr> looks like the link to your PhD thesis is broken from your homepage
[02:15:52] <shapr> yeah, it's been years!
[02:15:53] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[02:16:03] <dons> oh yeah i need to update some links.
[02:16:15] <dons> i think all the stuff was hosted on code.haskell.org 
[02:17:19] <monochrom> Here is an earlier one: https://ircbrowse.tomsmeding.com/day/lchaskell/2022/01/14?id=374888#trid374888
[02:17:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:18:08] <shapr> dons: are you taking a break from management to write code?
[02:18:27] <geekosaur> right, that;s the one I half-remembered
[02:18:30] <dons> i most certainly am :) extended break i guess at this point (~2 years)
[02:18:35] <shapr> oh nice!
[02:19:01] <dons> moved back to australia, remote IC working on dev infra stuff for Meta still. code search/navigation/IDE things
[02:19:05] <ski> yea, just found the reference to "Plugging Haskell In" by André Pang,Don Stewart,Sean Seefried,Manuel Chakravarty in 2004-09, in the references/bibliography of the Alanko thesis
[02:19:16] <shapr> ski: yup! you're getting close!
[02:20:33] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[02:24:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:25:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:29:16] <ski> ah, i guess it's available at <https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.9.7627>
[02:29:38] <ski> (a draft version, anyway)
[02:30:02] <geekosaur> I did a quick once-over of archives.haskell.org/code.haskell.org and didn't spot it
[02:30:07] <ski> "plugs" -- heh :)
[02:30:22] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:b1b7:1201:f52f:8468)
[02:31:46] *** Quits: nexus (~nexus@176-241-62-204.pool.digikabel.hu) (Ping timeout: 250 seconds)
[02:33:39] *** Joins: nexus (~nexus@92-249-150-216.static.digikabel.hu)
[02:34:00] <hololeap> janus, I'm working on someone else's project and I don't want to pull in any more deps. parsec is already in the build-depends
[02:34:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:35:03] <hololeap> but remind me, what is the canonical way to parse a lazy ByteString encoded as UTF8 into lazy Text?
[02:35:41] <monochrom> I think text has some utf-8 decode functions.
[02:36:24] <hololeap> ok, I just found Data.Text.Lazy.Encoding.decodeUtf8
[02:37:05] <hololeap> or I should probably use decodeUtf8' to avoid pure errors
[02:38:10] <monochrom> Yeah, or the "With" variant if you have a per-bad-byte replacement plan.
[02:39:20] <hololeap> eh, yeah `decodeUtf8With lenientDecode`
[02:43:24] *** Joins: jbox (~jbox@user/jbox)
[02:46:59] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:47:17] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:48:27] <ski> > let seqM :: (Ord k,Ord l) => M.Map k (M.Map l a) -> M.Map (M.Map k l) (M.Map k a); seqM kla = M.fromList [(M.fromList kl,M.fromList ka) | (kl,ka) <- map unzip (sequence [[((k,l),(k,a)) | (l,a) <- M.toList la] | (k,la) <- M.toList kla])] in (map (M.toList *** M.toList) . M.toList . seqM . M.fromList . (map . fmap) M.fromList) [(False,[(False,'0'),(True,'1')]),(True,[(False,'a'),(True,'b')])]
[02:48:29] <lambdabot>  [([(False,False),(True,False)],[(False,'0'),(True,'a')]),([(False,False),(Tr...
[02:48:32] *** Joins: fendor_ (~fendor@91.141.70.76.wireless.dyn.drei.com)
[02:48:34] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:48:42] <ski> hmm .. can this be done more nicely ?
[02:48:58] *** InstX1 is now known as Inst
[02:50:24] *** Quits: acidjnk (~acidjnk@p200300d0c7049f99c07e6a42421e5c0c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:51:02] *** Quits: fendor (~fendor@178.165.206.62.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[02:51:53] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:52:32] <ski> (yea, this is a continuation of the `sequence' and `(<*>)' examples from close to two hours ago)
[02:54:03] <Henson> jackdk: I really want to go from Foo K X to Foo K X where X is of the same type but has been manipulated.  I initially asked about going to Foo K Y to ask the more generic question first.
[02:55:10] <Henson> ski: the Pipe stream produces a list of values which I then collect into a list of values into a chunk.  The chunk needs to be processed all at once, then de-chunked afterwards.  So the lists will be the same length and don't need to be read lazily.  They'll be ready to go when they're passed into the bar :: [X] -> [X] function
[02:55:22] *** Quits: fendor_ (~fendor@91.141.70.76.wireless.dyn.drei.com) (Remote host closed the connection)
[02:56:01] <ski> ok
[02:56:24] <jackdk> Henson: look up Bifunctor or Bitraversable type classes?
[02:56:25] <ski> (being able to process them incrementally would be a nice bonus .. but i guess you don't need that, then)
[02:56:50] <ski> it sounds to me like `Traversable (Foo K)' should be enough ?
[02:58:41] <ski> (or maybe `MonoTraversable (Foo K X)' .. although there's probably no need to reach for that)
[02:59:47] *** Joins: Alleria (~textual@user/alleria)
[03:00:01] <Henson> ski: remember the Foo K is inside of a list.  Can I make a Traversable instance for [Foo K]?  Can I make a Traversable instance for something that is a bunch of types combined together, provided it has kind * -> *?
[03:02:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:04:51] <ski> @type traverse :: (Traversable f,Traversable g) => Applicative i => (a -> i b) -> (Compose f g a -> i (Compose f g b))
[03:04:52] <lambdabot> (Traversable f, Traversable g, Applicative i) => (a -> i b) -> Compose f g a -> i (Compose f g b)
[03:04:57] <ski> @type ((fmap getCompose .) . (. Compose)) . traverse :: (Traversable f,Traversable g) => Applicative i => (a -> i b) -> (f (g a) -> i (f (g b)))
[03:04:58] <lambdabot> (Traversable f, Traversable g, Applicative i) => (a -> i b) -> f (g a) -> i (f (g b))
[03:05:11] <ski> @type traverse . traverse :: (Traversable f,Traversable g) => Applicative i => (a -> i b) -> (f (g a) -> i (f (g b)))
[03:05:12] <lambdabot> (Traversable f, Traversable g, Applicative i) => (a -> i b) -> f (g a) -> i (f (g b))
[03:06:25] <ski> Henson : as in the `lens' examples above, it's enough to use `traverse . traverse' to step inside the list, and then the `Foo K'. but if you really want to, you could use a single `traverse', with `Compose', to step inside both at the same time
[03:07:36] <ski> (note that `Traversable (Compose [] (Foo K)' holds, provided `Traversable (Foo K)' does, since there is an instance `(Traversable f,Traversable g) => Traversable (Compose f g)', where in our case `f' is `[]' and `g' is `Foo K')
[03:08:54] <ski> (another way would be to do `newtype Foos k a = MkFoos [Foo k a]', and then make a `Traversable (Foos K)' instance)
[03:08:54] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[03:09:15] *** Joins: alp (~alp@user/alp)
[03:10:20] <ski> (`[Foo K]' is a kind error, however. `Foo K :: * -> *', but `[]' doesn't accept a `* -> *' as input, just a `*', since (also) `[] :: * -> *'. so you either need to define a new type like `Foos', or use a presupplied composition combinator like `Compose')
[03:10:57] <ski> (`newtype Compose f g a = Compose {getCompose :: f (g a)}', if you were unfamiliar with that one. it's in `Data.Functor.Compose')
[03:12:00] *** Quits: agumonkey (~user@88.163.231.79) (Read error: Connection reset by peer)
[03:13:01] *** Joins: agumonkey (~user@88.163.231.79)
[03:17:47] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:17:48] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 252 seconds)
[03:23:44] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4)
[03:26:47] <Henson> ski: thank you for all of these suggestions.  A lot of it is over my head, as I'm just learning about Lenses, but I've got the chat logs, and will try out some of these ideas tomorrow and see what happens.  Maybe I'll be back tomorrow with new questions :-)
[03:28:49] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:29:22] *** Joins: namkeleser (~namkelese@125.7.37.86)
[03:33:22] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:35:01] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:40:24] <ski> Henson : yea, some of what i was raving about was just some random intriguing (to me) ruminations and associations on the problem space, not particularly directed towards your specific situation. caveat emptor
[03:42:02] <Henson> ski: thanks for the warning :-)
[03:43:20] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:47:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:50:37] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[03:51:00] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:b1b7:1201:f52f:8468) (Ping timeout: 240 seconds)
[03:51:14] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[03:53:33] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[03:57:07] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[04:01:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:03:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[04:04:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:04:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:04:26] *** Joins: wroathe (~wroathe@user/wroathe)
[04:05:16] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[04:06:47] *** Joins: xkuru (~xkuru@user/xkuru)
[04:08:25] *** Joins: x_kuru (~xkuru@user/xkuru)
[04:11:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[04:11:43] <Axman6> :t traverse . traverse
[04:11:43] <lambdabot> (Applicative f, Traversable t1, Traversable t2) => (a -> f b) -> t1 (t2 a) -> f (t1 (t2 b))
[04:11:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:12:21] *** Joins: k8yun (~k8yun@user/k8yun)
[04:12:29] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:13:01] <Axman6> Henson: a possibly more general solution to your problem is lens (I haven't looked back at the history)
[04:16:53] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:21:22] <jackdk> Axman6: he's been wrestling with that too
[04:31:00] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[04:31:35] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[04:31:53] *** alMalsamo is now known as lumberjack123
[04:41:04] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:57] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:45:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:46:00] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[04:46:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:47:10] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:52:27] *** Joins: img (~img@user/img)
[04:56:12] *** Quits: nexus (~nexus@92-249-150-216.static.digikabel.hu) (Ping timeout: 240 seconds)
[04:58:01] *** Joins: nexus (~nexus@178-164-188-40.pool.digikabel.hu)
[05:01:27] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[05:01:58] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[05:06:28] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:07:39] <Henson> Axman6: yeah, my initial question was if it was possible for lens to do it (I'm using the optics package).
[05:08:05] <Henson> ski: partsOf will do the trick
[05:08:12] <Henson> let's see if I can make lambdabot do this for me
[05:08:47] <Henson> > set (partsOf $ traversed % _2) ["x","y","z"] [(1,"a"),(2,"b"),(3,"c")]
[05:08:48] <lambdabot>  error:
[05:08:48] <lambdabot>      • Couldn't match type ‘Ratio
[05:08:48] <lambdabot>                               ((a0 -> f1 b0) -> f0 a0 -> f1 (f0 b0))’
[05:09:09] <Henson> darnit.  anyway, this works for me
[05:09:11] <Henson> set (partsOf $ traversed % _2) ["x","y","z"] [(1,"a"),(2,"b"),(3,"c")]
[05:09:30] <Henson> and that's all the proof I need to know that I'll be able to make it work with what I'm actually trying to do
[05:09:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:09:44] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:10:47] <Henson> oh, you know what, maybe Lambdabot didn't like the (%).  Optics uses (%) instead of (.) for Lens composition
[05:12:48] <Axman6> @quote partsOf
[05:12:48] <lambdabot> No quotes match. My brain just exploded
[05:12:53] <Axman6> :(
[05:13:05] <Axman6> I should really record the partsOf template party trick
[05:13:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:14:04] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:14:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:15:43] <Axman6> % (Just "Hello",", ", ["World!"," "],("How", True, " are ", Left "you?")) & partsOf template %~ (reverse @Char)
[05:15:43] <yahb> Axman6: (Just "?uoy ","er",["a woH ","!"],("dlr",True,"oW ,o",Left "lleH"))
[05:15:49] <Axman6> % (Just "Hello",", ", ["World!"," "],("How", True, " are ", Left "you?")) & partsOf template %~ (reverse @String)
[05:15:49] <yahb> Axman6: (Just "you?"," are ",["How"," "],("World!",True,", ",Left "Hello"))
[05:18:57] *** Joins: Akiva (~Akiva@user/Akiva)
[05:19:00] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[05:20:25] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 256 seconds)
[05:22:48] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:33:20] *** Quits: md5 (~md5@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[05:35:33] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[05:36:37] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[05:44:49] *** Joins: jakalx (~jakalx@base.jakalx.net)
[05:45:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:46:30] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[05:47:16] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:47:48] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[05:48:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[05:52:17] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[05:57:26] *** Joins: metaverse (~metaverse@94.13.111.159)
[05:57:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[06:08:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:08:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[06:10:51] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[06:14:15] *** Quits: ubert (~Thunderbi@p200300ecdf19b70a55005d108b4dd460.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:14:33] *** Joins: ubert (~Thunderbi@p200300ecdf19b79d7171724430720c97.dip0.t-ipconnect.de)
[06:17:48] *** Joins: InstX1 (~Liam@2600:1006:b007:b588:74a6:a66a:efe9:7159)
[06:20:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[06:21:30] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[06:25:58] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:1cdf:18dd:42bc:97c4)
[06:26:04] *** InstX1_ is now known as Inst
[06:27:17] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[06:29:06] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:29:17] *** Quits: InstX1 (~Liam@2600:1006:b007:b588:74a6:a66a:efe9:7159) (Ping timeout: 240 seconds)
[06:30:30] *** [itchyjunk] is now known as Guest1869
[06:30:30] *** [_] is now known as [itchyjunk]
[06:32:37] *** Quits: Guest1869 (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:38:24] *** Joins: mbuf (~Shakthi@110.225.253.73)
[06:40:54] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 272 seconds)
[06:52:05] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[06:59:19] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:59:19] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:59:19] *** finn_elija is now known as FinnElija
[07:00:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:04:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:06:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:12:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:12:39] *** Quits: nexus (~nexus@178-164-188-40.pool.digikabel.hu) (Ping timeout: 252 seconds)
[07:12:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:14:12] *** Joins: nexus (~nexus@85-238-93-61.pool.digikabel.hu)
[07:18:52] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[07:20:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[07:20:46] *** Quits: jao (~jao@45.134.142.199) (Ping timeout: 260 seconds)
[07:21:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:21:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:21:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:21:34] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:21:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:21:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:22:53] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:24:17] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[07:28:49] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:30:55] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[07:30:55] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:32:23] *** Quits: jrm (~jrm@156.34.173.250) (Quit: ciao)
[07:32:42] *** Joins: jrm (~jrm@156.34.173.250)
[07:32:47] *** Joins: Guest9165 (~Guest91@198.13.48.162)
[07:37:33] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[07:37:34] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:38:40] <Guest9165> hi, how to `nftMint :: TokenName -> TxOutRef -> PlutusScript PlutusScriptV1` ( source : https://github.com/jfischoff/plutus-nft/blob/main/src/Cardano/Plutus/Nft.hs). Without 'PlutusScriptV1' it is ok. But this additional 'PlutusScriptV1' puzzle me.
[07:43:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:44:47] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:46:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:47:24] *** Joins: zebrag (~chris@user/zebrag)
[07:47:45] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 256 seconds)
[07:48:33] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[07:48:46] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[07:48:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[07:52:20] <dsal> Guest9165: It's not likely many people here know those APIs or what's confusing to you out of context.
[07:52:31] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:55:06] <Guest9165> It is just about function declare syntax, how to read that declare. I'm not ask what the API does. In my mind, a function syntax `nftMint :: TokenName -> TxOutRef -> PlutusScript ` is understandable.
[07:55:41] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[07:56:03] <Guest9165> but as to `nftMint :: TokenName -> TxOutRef -> PlutusScript PlutusScriptV1`, what is the return value type ?
[07:56:04] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:56:26] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[07:56:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:57:00] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[07:58:13] <dsal> The return type is `PlutusScript PlutusScriptV1`
[08:01:14] <dsal> It's hard to know more about this particular thing without knowing what a `PlutusScript` is, but it's presumably kinded `* -> *` like Maybe.
[08:01:16] <dsal> :t listToMaybe
[08:01:17] <lambdabot> [a] -> Maybe a
[08:03:08] <Guest9165> Thanks.  It soundable if 'PlutusScript' is akind to Maybe.
[08:04:51] <dsal> I assume it's meant to be used as some kind of monad.
[08:06:14] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:09:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:11:25] <jackdk> `PlutusScript` is probably indexed by the language version; I suppose certain constructs are only allowed in certain versions
[08:14:55] *** Joins: zebrag (~chris@user/zebrag)
[08:16:51] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[08:17:33] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[08:18:23] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[08:19:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[08:19:26] *** Andrew is now known as LibreBot
[08:19:36] *** LibreBot is now known as Guest286
[08:20:01] *** Quits: Guest286 (Andrew@user/AndrewYu) (Changing host)
[08:20:01] *** Joins: Guest286 (Andrew@user/AndrewYu/bot/LibreBot)
[08:20:07] *** Guest286 is now known as LibreBot
[08:21:11] *** Joins: stefan-_ (~cri@42dots.de)
[08:21:23] *** LibreBot is now known as Andrew
[08:21:43] *** Quits: Andrew (Andrew@user/AndrewYu/bot/LibreBot) (Changing host)
[08:21:43] *** Joins: Andrew (Andrew@user/AndrewYu)
[08:22:00] *** Joins: k8yun (~k8yun@user/k8yun)
[08:22:50] *** Joins: Guest3568 (~tom@218.89.242.114)
[08:25:23] *** Quits: Andrew (Andrew@user/AndrewYu) (Changing host)
[08:25:23] *** Joins: Andrew (Andrew@user/AndrewYu/bot/LibreBot)
[08:25:33] <Guest3568> Is haskell-platform enough to leran haskell?
[08:25:54] *** Quits: Andrew (Andrew@user/AndrewYu/bot/LibreBot) (Changing host)
[08:25:54] *** Joins: Andrew (Andrew@user/AndrewYu)
[08:26:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:26:42] <jackdk> it is, but that's not really used any more. ghcup is the recommended way to get haskll, across the big 3 operating systems: Linux, Mac, Windows
[08:27:43] *** Quits: Guest3568 (~tom@218.89.242.114) (Quit: WeeChat 2.8)
[08:30:22] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:33:35] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:34:15] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[08:34:46] <Andrew> I don't get it- why does 100/3 when represented in floats don't go off to infinity
[08:34:53] <Andrew> go off to infinity = have infinite digits
[08:35:15] <dsal> Depends on the types.  Floats don't have infinite precision.
[08:35:25] <Andrew> well, of course you can use fractions
[08:35:40] <Andrew> but in a lazy language why not have it infinite? 
[08:36:04] <ski> > showCReal 496 (100/3 :: CReal)
[08:36:06] <lambdabot>  "33.333333333333333333333333333333333333333333333333333333333333333333333333...
[08:38:22] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:39:52] <ski> `Float' and `Double' are supposed to follow the IEEE 854 "Standard for Radix-Independent Floating-Point Arithmetic"
[08:41:28] * ski . o O ( "What Every Programmer Should Know About Floating-Point Arithmetic" at <http://floating-point-gui.de/> and "What Every Computer Scientist Should Know About Floating-Point Arithmetic" by David Goldberg in 1991 at <https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html>,<https://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.102.244> ; <https://en.wikipedia.org/wiki/IEEE_854> )
[08:42:48] <ski> > let nan = 0/0 in nan == nan  -- unfortunately specified (at least for signalling NANs) in the standard
[08:42:49] <lambdabot>  False
[08:42:53] <jackdk> Andrew: have you seen `Data.Ratio`?
[08:43:08] <Andrew> i have
[08:43:13] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[08:43:18] <Andrew> i just think that should be default
[08:45:03] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 250 seconds)
[08:49:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:50:05] <nshepperd2> Data.Ratio is not a useful default
[08:51:30] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:55:06] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[08:56:43] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[08:57:31] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:57:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:59:10] *** Joins: Axma96263 (~Axman6@user/axman6)
[09:00:40] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 250 seconds)
[09:01:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[09:01:27] *** Joins: jakalx (~jakalx@base.jakalx.net)
[09:03:04] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[09:04:50] *** Quits: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:05:09] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[09:05:15] *** Joins: modnar (~modnar@shell.sonic.net)
[09:22:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:23:26] *** Quits: nexus (~nexus@85-238-93-61.pool.digikabel.hu) (Ping timeout: 250 seconds)
[09:23:52] *** Quits: Guest9165 (~Guest91@198.13.48.162) (Quit: Client closed)
[09:24:39] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 256 seconds)
[09:24:39] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[09:25:23] *** Joins: nexus (~nexus@92-249-141-141.pool.digikabel.hu)
[09:25:47] *** Joins: finsternis (~X@23.226.237.192)
[09:26:00] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[09:26:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[09:29:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:32:30] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[09:33:38] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[09:35:19] *** Joins: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[09:36:15] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:37:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92) (Ping timeout: 240 seconds)
[09:50:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:51:50] <Maxdamantus> Andrew: if you're making use of laziness, you'll end up with things that you can't determine the true value of.
[09:52:08] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Ping timeout: 252 seconds)
[09:52:15] <Andrew> Maxdamantus: The point is the nice feeling of mathematical purity.
[09:52:37] <Maxdamantus> Andrew: eg, in your 100/3 example, you won't be able to tell that it's actually 100/3, because all you can ever see is that it's "33.33333333something"
[09:52:47] <Andrew> Maxdamantus: I know
[09:52:48] <Maxdamantus> and then if you multiply it by 3, you get 99.9999999999something
[09:53:25] <Maxdamantus> Okay, well to a lot of people, that's not useful.
[09:53:43] <Maxdamantus> If you divide by 3 then multiply 3, you should get the same answer. That's what you get with rationals.
[09:55:37] <Maxdamantus> Indefinite precision of fractional values in general is not useful either, since you often do want to turn numbers into approximations for practical reasons.
[09:57:39] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[09:57:46] <Maxdamantus> eg, if you're modelling a game where friction is causing your character to lose 10% of their speed per frame, you don't want a number that uses 10,000 digits after 10,000 frames (which might take say 100 seconds).
[09:58:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[09:59:18] <Maxdamantus> You need to pick an appropriate number representation for the scenario.
[10:00:55] <Maxdamantus> Also, using representations with points (eg, "decimal") is often not suitable for representing fractions, because you can easily create numbers with very large periods, eg, 1/1234567 has a period of something like 830.
[10:01:06] <Maxdamantus> (in decimal)
[10:01:43] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[10:02:19] *** Joins: vglfr (~vglfr@88.155.79.156)
[10:02:27] <Maxdamantus> actually, it has a period of 34,020.
[10:03:06] <Maxdamantus> > showCReal 1000 (1/1234567 :: CReal)
[10:03:07] <lambdabot>  "0.0000008100005913004316493151040000259200189216138127780833280008294406054...
[10:03:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[10:03:57] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[10:04:13] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[10:05:39] <Maxdamantus> I was probably thinking of 1/12345, which has a period of 822.
[10:06:28] *** Joins: coot (~coot@213.134.190.95)
[10:10:02] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[10:10:14] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 250 seconds)
[10:11:28] *** Quits: vglfr (~vglfr@88.155.79.156) (Read error: Connection reset by peer)
[10:12:30] *** Joins: vglfr (~vglfr@88.155.79.156)
[10:16:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[10:16:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[10:16:45] *** finn_elija is now known as FinnElija
[10:21:18] *** Quits: vglfr (~vglfr@88.155.79.156) (Read error: Connection reset by peer)
[10:22:14] *** Joins: vglfr (~vglfr@88.155.79.156)
[10:26:37] *** Quits: vglfr (~vglfr@88.155.79.156) (Read error: Connection reset by peer)
[10:27:20] *** Joins: vglfr (~vglfr@88.155.79.156)
[10:27:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[10:28:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:29:09] *** Joins: notzmv (~zmv@user/notzmv)
[10:29:21] *** Joins: raym (~raym@user/raym)
[10:33:47] *** Quits: namkeleser (~namkelese@125.7.37.86) (Ping timeout: 256 seconds)
[10:34:08] *** Joins: aeka (~aeka@2606:6080:1001:12:257a:8b87:f80d:7579)
[10:36:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[10:36:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[10:36:58] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:d42f:99b7:4e95:b08d)
[10:40:17] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:1cdf:18dd:42bc:97c4) (Ping timeout: 240 seconds)
[10:40:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:41:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:44:04] *** Joins: acidjnk (~acidjnk@p200300d0c7049f97891f007ae5e331f4.dip0.t-ipconnect.de)
[10:50:00] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:50:01] *** Joins: Pickchea (~private@user/pickchea)
[10:54:15] *** Joins: hsw (~hsw@112-104-141-52.adsl.dynamic.seed.net.tw)
[10:55:50] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:57:21] *** Joins: mmhat (~mmh@55d4baf8.access.ecotel.net)
[11:05:21] *** Joins: cfricke (~cfricke@user/cfricke)
[11:05:31] *** Quits: vglfr (~vglfr@88.155.79.156) (Ping timeout: 256 seconds)
[11:16:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[11:19:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:21:23] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:26:11] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:27:08] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[11:31:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 252 seconds)
[11:31:55] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:34:17] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[11:35:01] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[11:35:16] *** Joins: michalz (~michalz@185.246.204.55)
[11:37:01] *** Joins: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com)
[11:38:09] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:41:35] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[11:41:48] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:43:26] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[11:43:55] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[11:44:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:44:26] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:45:27] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[11:46:38] *** Joins: dextaa_ (~dextaa@user/dextaa)
[11:49:42] *** Joins: alp (~alp@user/alp)
[11:53:12] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[12:02:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:09:24] *** Quits: nexus (~nexus@92-249-141-141.pool.digikabel.hu) (Ping timeout: 250 seconds)
[12:09:38] *** Joins: kuribas (~user@188.189.143.32)
[12:10:10] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[12:10:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[12:11:08] *** Joins: nexus (~nexus@92-249-185-194.pool.digikabel.hu)
[12:11:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[12:11:30] *** Joins: xkuru (~xkuru@user/xkuru)
[12:13:24] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:14:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[12:15:38] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:6cd7:9cb3:8e61:d67f)
[12:15:53] *** Quits: toulene (~toulene@user/toulene) (Remote host closed the connection)
[12:17:55] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[12:18:57] *** Joins: chele (~chele@user/chele)
[12:19:44] *** Joins: fendor (~fendor@91.141.70.76.wireless.dyn.drei.com)
[12:21:15] *** Joins: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl)
[12:21:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:22:59] *** Quits: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl) (Client Quit)
[12:23:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl)
[12:25:37] *** Quits: kuribas (~user@188.189.143.32) (Ping timeout: 240 seconds)
[12:27:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[12:35:43] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[12:37:00] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[12:40:19] *** Joins: x_kuru (xkuru@user/xkuru)
[12:44:07] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[12:49:44] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:51:49] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[12:51:50] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:52:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[12:56:22] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4)
[13:02:22] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 260 seconds)
[13:04:01] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:05:15] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:07:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:09:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:10:09] *** Joins: bahamas (~lucian@86.120.77.115)
[13:12:46] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[13:12:52] *** Joins: Axman6 (~Axman6@user/axman6)
[13:15:16] *** Quits: Axma96263 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[13:18:54] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Remote host closed the connection)
[13:19:26] *** Quits: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:20:53] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[13:22:38] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:23:10] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[13:28:05] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:28:51] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 252 seconds)
[13:29:35] *** Joins: bahamas (~lucian@86.120.77.115)
[13:31:27] *** Joins: __monty__ (~toonn@user/toonn)
[13:33:03] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[13:36:07] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:37:06] *** Quits: gentauro (~gentauro@user/gentauro) (Ping timeout: 252 seconds)
[13:37:07] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:31df:b3e1:641b:a10f)
[13:43:52] *** Joins: gentauro (~gentauro@user/gentauro)
[13:49:42] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:51:13] *** Quits: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com) (Quit: leaving)
[13:59:40] *** Joins: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com)
[14:02:40] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[14:03:09] *** Joins: MasseR46 (~MasseR@51.15.143.128)
[14:06:32] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 240 seconds)
[14:12:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:14:38] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[14:14:39] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[14:19:31] *** Quits: nexus (~nexus@92-249-185-194.pool.digikabel.hu) (Ping timeout: 245 seconds)
[14:20:04] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[14:20:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:21:15] *** Joins: nexus (~nexus@80-95-69-200.pool.digikabel.hu)
[14:24:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[14:37:16] *** Joins: razetime (~quassel@117.254.34.2)
[14:41:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:43:49] *** Quits: fockerized (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[14:49:10] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:52:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:53:32] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:54:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:55:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[14:57:11] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Read error: Connection reset by peer)
[14:57:32] *** Quits: acidjnk (~acidjnk@p200300d0c7049f97891f007ae5e331f4.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:03:39] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[15:05:26] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:07:15] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 250 seconds)
[15:13:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 245 seconds)
[15:15:38] *** Quits: fendor (~fendor@91.141.70.76.wireless.dyn.drei.com) (Remote host closed the connection)
[15:17:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:19:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:19:58] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[15:21:32] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:22:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:24:50] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:26:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[15:31:48] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:31df:b3e1:641b:a10f) (Remote host closed the connection)
[15:32:37] *** Quits: the_proffesor (~theproffe@c-24-9-30-127.hsd1.co.comcast.net) (Remote host closed the connection)
[15:32:54] *** Joins: the_proffesor (~theproffe@2601:282:847f:8010::7f59)
[15:38:38] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[15:39:45] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[15:50:25] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:50:58] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[15:55:32] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[15:55:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:01:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[16:09:29] *** Joins: x_kuru (xkuru@user/xkuru)
[16:13:13] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[16:14:12] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[16:15:36] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[16:15:52] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[16:16:19] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:19:00] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[16:31:20] *** Joins: crazazy (~user@130.89.171.62)
[16:32:30] *** Joins: bahamas (~lucian@84.232.140.158)
[16:33:04] *** Joins: Midjak (~Midjak@82.66.147.146)
[16:36:08] *** Joins: x_kuru (xkuru@user/xkuru)
[16:36:28] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:39:24] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[16:41:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[16:45:08] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:47:16] *** Joins: Sgeo (~Sgeo@user/sgeo)
[16:47:30] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[16:53:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:54:07] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[16:54:32] *** Quits: nexus (~nexus@80-95-69-200.pool.digikabel.hu) (Ping timeout: 240 seconds)
[16:55:42] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[16:56:42] *** Joins: nexus (~nexus@92-249-179-83.pool.digikabel.hu)
[16:58:03] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:58:35] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[17:01:08] *** Joins: son0p (~ff@181.136.122.143)
[17:02:06] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 268 seconds)
[17:03:55] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:09:30] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 268 seconds)
[17:11:43] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:13:02] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[17:17:15] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[17:18:21] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[17:19:16] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[17:19:38] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:20:10] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:20:51] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[17:23:57] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[17:24:14] *** Joins: dextaa_ (~dextaa@user/dextaa)
[17:27:06] *** Joins: bahamas (~lucian@84.232.140.158)
[17:28:32] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[17:28:43] *** Joins: img (~img@user/img)
[17:30:05] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[17:31:18] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:36:36] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 245 seconds)
[17:36:37] *** Quits: aeka (~aeka@2606:6080:1001:12:257a:8b87:f80d:7579) (Ping timeout: 240 seconds)
[17:37:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[17:39:16] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:44:12] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[17:46:32] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:48:32] *** Quits: razetime (~quassel@117.254.34.2) (Ping timeout: 240 seconds)
[17:51:48] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[17:53:49] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[17:55:32] *** Quits: bah (~bah@l1.tel) (Quit: Reconnecting)
[17:55:40] *** Joins: bah (~bah@l1.tel)
[17:56:25] *** alMalsamo is now known as lumberjack123
[17:56:33] *** Joins: Guest78 (~Guest78@200116b84657210029ba51991cbefa0b.dip.versatel-1u1.de)
[18:00:19] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[18:02:32] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:02:42] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:03:24] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[18:04:56] *** Quits: phma (phma@2001:5b0:211b:c418:9495:8cbf:af11:60bb) (Read error: Connection reset by peer)
[18:06:06] *** Joins: phma (phma@2001:5b0:210f:7688:30ad:6c5c:35e4:9da)
[18:06:47] *** Joins: jinsun__ (~jinsun@user/jinsun)
[18:07:57] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:09:26] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 260 seconds)
[18:13:50] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 250 seconds)
[18:14:31] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[18:16:07] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:16:36] *** Quits: Guest78 (~Guest78@200116b84657210029ba51991cbefa0b.dip.versatel-1u1.de) (Quit: Client closed)
[18:18:03] *** Quits: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de) (Quit: xff0x)
[18:18:16] *** Joins: jinsun (~jinsun@user/jinsun)
[18:20:37] *** Quits: jinsun__ (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[18:21:22] *** Joins: razetime (~quassel@117.254.35.116)
[18:23:10] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:23:44] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:25:18] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[18:26:52] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:27:57] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:28:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[18:32:48] *** Joins: aeka (~aeka@user/hiruji)
[18:33:00] *** Quits: aeka (~aeka@user/hiruji) (Remote host closed the connection)
[18:33:18] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[18:33:19] *** Joins: aeka (~aeka@user/hiruji)
[18:33:32] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[18:33:43] *** Joins: nunggu (~q@user/nunggu)
[18:33:46] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[18:34:16] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:34:27] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:35:30] *** Joins: unit73e (~ecouto@2001:818:e8dd:7c00:c536:427e:7cd6:2df4)
[18:35:55] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:35:56] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[18:36:01] *** Quits: razetime (~quassel@117.254.35.116) (Ping timeout: 256 seconds)
[18:37:09] *** Joins: Guest|7 (~Guest|7@tmo-100-54.customers.d1-online.com)
[18:37:34] <Guest|7> how do i use poweshell for downloading haskell?
[18:41:14] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[18:41:28] <geekosaur> see https://www.haskell.org/ghcup/
[18:41:57] <geekosaur> I suggest copy-paste; the command they show for windows is a bit hairy
[18:43:15] <maerwald> Guest|7: click on the copy button, open a powershell via start menu, right click into the powershell window
[18:43:53] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:43:57] <maerwald> here's a video: https://www.youtube.com/watch?v=bB4fmQiUYPw
[18:45:39] *** Joins: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de)
[18:49:37] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[18:50:32] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[18:51:32] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:51:45] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[18:51:52] *** Joins: hololeap (~hololeap@user/hololeap)
[18:54:35] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[18:55:21] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:56:13] *** Joins: tungki (~tungki@subs20-114-142-172-16.three.co.id)
[18:57:10] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 250 seconds)
[18:57:12] <Guest|7> @
[18:57:13] <Guest|7> maerwald thank you reaaly much
[18:59:08] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[19:00:58] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[19:01:12] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:02:57] *** Quits: int-e (~noone@int-e.eu) (Remote host closed the connection)
[19:04:21] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[19:05:16] *** Joins: int-e (~noone@int-e.eu)
[19:05:52] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[19:06:20] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[19:06:20] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[19:06:20] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[19:07:06] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[19:09:35] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:11:13] *** Joins: razetime (~quassel@117.254.34.2)
[19:12:36] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[19:12:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:15:16] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[19:15:17] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[19:17:06] *** Quits: nexus (~nexus@92-249-179-83.pool.digikabel.hu) (Ping timeout: 250 seconds)
[19:18:58] *** Joins: nexus (~nexus@87-97-25-224.pool.digikabel.hu)
[19:20:41] *** Joins: bahamas (~lucian@86.120.77.115)
[19:24:28] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 250 seconds)
[19:24:45] *** Joins: pooryori1k (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:25:24] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[19:26:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:29:39] *** Quits: dcoutts__ (~duncan@host86-144-78-249.range86-144.btcentralplus.com) (Ping timeout: 252 seconds)
[19:32:42] *** Joins: ph88 (~ph88@89-220-184-245.cable.dynamic.v4.ziggo.nl)
[19:34:35] *** Quits: Guest|7 (~Guest|7@tmo-100-54.customers.d1-online.com) (Ping timeout: 252 seconds)
[19:35:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:37:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[19:40:03] *** Quits: tungki (~tungki@subs20-114-142-172-16.three.co.id) (Ping timeout: 256 seconds)
[19:44:21] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:44:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[19:47:23] *** Quits: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com) (Quit: ccntrq)
[19:50:54] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 250 seconds)
[19:55:53] *** shapr` is now known as shapr
[20:01:15] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[20:02:10] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:6cd7:9cb3:8e61:d67f) (Quit: WeeChat 2.8)
[20:03:02] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Ping timeout: 240 seconds)
[20:03:51] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:05:02] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 240 seconds)
[20:05:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:05:35] *** Joins: marcia (~marcia@2600:6c5e:4c3f:394d:864a:fcf0:558:be67)
[20:06:02] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[20:07:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:11:27] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[20:14:00] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:14:23] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:14:31] *** Joins: zebrag (~chris@user/zebrag)
[20:20:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[20:21:41] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4)
[20:24:28] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[20:24:33] *** Parts: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318) ()
[20:24:42] *** Quits: joo-__ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[20:24:45] *** Joins: SignalGarden (~ash@user/SignalWalker)
[20:29:41] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[20:39:31] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 245 seconds)
[20:40:18] *** Joins: SignalGarden (~ash@user/SignalWalker)
[20:40:32] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[20:41:44] *** Quits: marcia (~marcia@2600:6c5e:4c3f:394d:864a:fcf0:558:be67) (Read error: Connection reset by peer)
[20:42:12] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[20:42:41] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[20:42:54] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[20:45:01] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 240 seconds)
[20:48:37] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[20:49:09] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:50:52] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[20:51:12] *** Joins: agumonkey (~user@88.163.231.79)
[20:53:21] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:55:12] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 268 seconds)
[20:55:35] *** Joins: bahamas (~lucian@84.232.140.158)
[20:56:12] *** Quits: razetime (~quassel@117.254.34.2) (Ping timeout: 240 seconds)
[20:56:53] *** Joins: econo (uid147250@user/econo)
[20:57:13] *** Joins: tungki (~tungki@subs30-116-206-14-34.three.co.id)
[21:00:21] *** Quits: ski (~ski@remote12.chalmers.se) (Remote host closed the connection)
[21:00:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:01:19] *** Joins: Everything (~Everythin@37.115.210.35)
[21:02:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:04:27] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 268 seconds)
[21:04:34] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[21:06:47] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[21:10:45] *** Quits: mbuf (~Shakthi@110.225.253.73) (Quit: Leaving)
[21:10:58] *** Quits: crazazy (~user@130.89.171.62) (Ping timeout: 260 seconds)
[21:12:02] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[21:23:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:24:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[21:24:23] *** Joins: SignalGarden (~ash@user/SignalWalker)
[21:24:59] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[21:25:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:26:52] *** Quits: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:27:54] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[21:28:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:28:50] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 250 seconds)
[21:30:43] *** Joins: SignalGarden (~ash@user/SignalWalker)
[21:31:07] *** Quits: tungki (~tungki@subs30-116-206-14-34.three.co.id) (Ping timeout: 256 seconds)
[21:31:26] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 250 seconds)
[21:31:32] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[21:31:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:33:25] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[21:33:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:38:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:38:37] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[21:40:00] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[21:40:42] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[21:40:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:41:19] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:42:26] *** Quits: SignalGarden (~ash@user/SignalWalker) (Read error: Connection reset by peer)
[21:42:52] *** Joins: Akiva (~Akiva@user/Akiva)
[21:43:33] *** Joins: jao (~jao@45.134.142.225)
[21:43:39] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[21:43:48] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[21:46:50] *** Joins: dcoutts__ (~duncan@host86-167-206-34.range86-167.btcentralplus.com)
[21:47:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8)
[21:47:31] *** Joins: SignalGarden (~ash@user/SignalWalker)
[21:49:17] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[21:50:10] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[21:51:55] *** Joins: joo-_ (~joo-_@87-49-44-159-mobile.dk.customer.tdc.net)
[21:51:55] *** Quits: joo-_ (~joo-_@87-49-44-159-mobile.dk.customer.tdc.net) (Changing host)
[21:51:55] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[21:52:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:55:10] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:56:23] *** Joins: unyu (~pyon@user/pyon)
[22:00:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:00:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:00:16] *** Joins: wroathe (~wroathe@user/wroathe)
[22:00:35] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[22:01:46] *** Joins: bahamas (~lucian@84.232.140.158)
[22:03:45] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[22:05:47] *** Joins: crazazy (~user@130.89.171.62)
[22:05:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[22:06:24] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[22:06:31] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:10:21] *** Joins: jinsun__ (~jinsun@user/jinsun)
[22:14:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:14:32] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[22:14:56] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[22:16:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:16:49] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[22:16:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:17:48] *** Joins: justAstache (~justache@user/justache)
[22:17:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:18:26] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[22:21:49] *** Quits: nexus (~nexus@87-97-25-224.pool.digikabel.hu) (Ping timeout: 240 seconds)
[22:23:51] *** Joins: nexus (~nexus@87-97-13-18.pool.digikabel.hu)
[22:28:20] *** Joins: Guest|7 (~Guest|7@tmo-100-62.customers.d1-online.com)
[22:28:52] <Guest|7> how can i transform prelude> to ghci> ?
[22:29:27] *** Quits: Guest|7 (~Guest|7@tmo-100-62.customers.d1-online.com) (Client Quit)
[22:29:41] *** Joins: Guest|7 (~Guest|7@tmo-100-62.customers.d1-online.com)
[22:29:49] <Guest|7> how can i ransform prelude> to ghci> ?
[22:29:54] <geekosaur> :set prompt ghci
[22:30:04] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:30:35] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:31:10] <geekosaur> you can also put that in ~/.ghci (linux) or C:/Documents and Settings/user/Application Data/ghc/ghci.conf (windows)
[22:31:13] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[22:31:47] <Guest|7> thank you
[22:34:26] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[22:34:35] *** Joins: goner (~tw@user/goner)
[22:34:57] *** Joins: bahamas (~lucian@84.232.140.158)
[22:36:38] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[22:39:11] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[22:40:30] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[22:43:53] *** Joins: fockerized (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[22:44:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[22:45:17] *** Quits: goner (~tw@user/goner) (Quit: WeeChat 3.4.1)
[22:46:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:47:16] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.168) (Ping timeout: 250 seconds)
[22:48:37] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 240 seconds)
[22:48:45] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 256 seconds)
[22:48:54] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[22:49:38] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[22:50:35] *** Joins: Pickchea (~private@user/pickchea)
[22:52:44] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:53:17] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:53:21] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[22:55:14] *** Quits: Guest|7 (~Guest|7@tmo-100-62.customers.d1-online.com) (Quit: Connection closed)
[22:55:40] *** Joins: k8yun (~k8yun@user/k8yun)
[22:57:15] <Zemyla> Okay, so Context is an indexed Comonad, but it's also an indexed Monad in the opposite direction.
[22:57:26] <Zemyla> :t \(Context f (Context g a)) -> Context (f . g) a
[22:57:27] <lambdabot> Context (Context a b1 b2) b2 t -> Context a b1 t
[22:57:34] <Zemyla> :t Context id
[22:57:35] <lambdabot> a -> Context a t t
[23:00:46] *** Joins: fef (~thedawn@user/thedawn)
[23:02:16] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[23:03:14] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:03:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:03:33] *** Parts: eriol (~eriol@user/eriol) (If you know neither the enemy nor yourself, you will succumb in every battle.)
[23:03:49] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 256 seconds)
[23:07:30] <dminuoso> maerwald: By the way https://www.openssl.org/news/secadv/20220315.txt 
[23:07:35] <dminuoso> OpenSSL strikes again.
[23:08:34] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[23:09:00] *** Joins: yuvii (~yuvrajnay@129-2-181-237.wireless.umd.edu)
[23:09:15] *** Quits: yuvii (~yuvrajnay@129-2-181-237.wireless.umd.edu) (Client Quit)
[23:09:57] * tomsmeding upgrades my machines
[23:10:45] *** Quits: mmhat (~mmh@55d4baf8.access.ecotel.net) (Ping timeout: 252 seconds)
[23:11:20] *** Joins: yuvi (~yuvrajnay@129-2-181-237.wireless.umd.edu)
[23:11:45] *** Quits: yuvi (~yuvrajnay@129-2-181-237.wireless.umd.edu) (Client Quit)
[23:12:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8) (Remote host closed the connection)
[23:15:04] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[23:15:10] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[23:17:59] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[23:18:16] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[23:19:27] <Zemyla> :t let { mjoin :: Magma () i j (Magma u j k a) -> Magma u i k a; mjoin (Magma _ a) = a; mjoin (MagmaPure t) = MagmaPure t; mjoin (MagmaFmap f m) = MagmaFmap f (mjoin m); mjoin (MagmaAp mf ma) = MagmaAp (mjoin mf) (mjoin ma) } in mjoin
[23:19:28] <lambdabot> Magma () i j (Magma u j k a) -> Magma u i k a
[23:20:22] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[23:22:18] *** Joins: bahamas (~lucian@84.232.140.158)
[23:23:41] <maerwald[m]> dminuoso: looks just like DoS?
[23:23:53] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[23:24:24] <dminuoso> maerwald[m]: Yeah.
[23:24:29] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[23:24:30] *** Joins: mmhat (~mmh@55d4baf8.access.ecotel.net)
[23:25:16] <dminuoso> stunnel users are particularly affected I guess
[23:25:42] <dminuoso> Im not quite sure how often an attacker has easy control over presented certificates
[23:25:47] <dminuoso> Other than stunnel
[23:26:25] <dminuoso> Prometheus users I guess if they properly secure their exporters. :)
[23:26:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[23:28:20] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[23:28:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:29:43] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:31:22] *** Joins: Guest|15 (~Guest|15@24.225.237.73)
[23:31:53] *** Quits: Guest|15 (~Guest|15@24.225.237.73) (Client Quit)
[23:31:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[23:32:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:33:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:33:38] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 250 seconds)
[23:34:48] *** Lord_of_Life_ is now known as Lord_of_Life
[23:35:09] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[23:35:13] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:35:32] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[23:35:50] *** Joins: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[23:36:30] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:36:49] *** Joins: timCF (~timCF@m91-129-108-222.cust.tele2.ee)
[23:38:57] <timCF> Hello! Is there any way to find the module where orphan instance is implemented? I do have a problem with incorrect `instance PersistFieldSql Integer` which is coming from *some* dependency. There is no such instance in Persistent itself, and I want to find incorect instance and fix it.
[23:40:17] <monochrom> The :info command can tell you which module defines an instance.
[23:40:32] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[23:40:57] <timCF> monochrom: in ghci?
[23:40:58] <monochrom> This of course predicates on a successful buiid/load, so you may have to comment out one conflicting instance temporarily.
[23:41:01] <monochrom> Yeah.
[23:41:02] <geekosaur> otherwise I could imagine a script which went through dependencies' archives looking for the definition of the instance dictionary, but it'd be pretty gnarly
[23:41:20] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[23:41:51] <monochrom> You can either ":info TheClass" or ":info TheType". Do expect lengthy outputs that you have to fish through.
[23:42:54] <timCF> monochrom: geekosaur: thanks a lot, I'll try it! I think you just saved me a day or two
[23:44:23] <geekosaur> monochrom's is much easier, and I'd have to look up how you convert a class+instance to a z-encoded instance dictionary symbol
[23:44:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[23:45:06] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[23:45:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:45:22] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:45:35] *** Joins: Midjak (~Midjak@82.66.147.146)
[23:45:45] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[23:46:27] *** Joins: Pacoco (Pacoco@191.176.33.103)
[23:46:30] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[23:46:37] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[23:48:28] *** Joins: notzmv (~zmv@user/notzmv)
[23:49:16] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[23:50:58] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 250 seconds)
[23:53:00] *** Joins: kenran (~kenran@200116b82b1f7700d4eceb26990aed28.dip.versatel-1u1.de)
[23:54:32] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 240 seconds)
[23:57:14] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[23:57:42] *** Joins: pavonia (~user@user/siracusa)
[23:58:02] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
