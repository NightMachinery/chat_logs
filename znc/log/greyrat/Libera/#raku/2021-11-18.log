[00:05:13] <lizmat> I seem to have read that MacOS needs some extra care with regards to non-local native binaries
[00:05:21] <[Coke]> I used to have a shortcut for dumping out the link info on a binary... where did I put that...
[00:05:46] <lizmat> also, I'd check the system log if that has anything about moarvm
[00:06:48] <[Coke]> try otool -L <path to nqp> ?
[00:08:07] <[Coke]> here I get https://gist.github.com/coke/41a4407bb4e97cfcbd9581da9ba622a8
[00:09:41] <zjmarlow> my output is just /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)
[00:11:27] <zjmarlow> no relevant information in Crash Reports, Log Reports, system.log
[00:12:10] <MasterDuke> anything change if you compile moarvm with --static?
[00:17:38] *** Quits: colemanx (~coleman@2605:a601:5529:1e00:2027:42e9:342d:ce87) (Quit: Leaving)
[00:18:00] <zjmarlow> no, it is still looking for (and can't find) nqp.moarvm
[00:23:38] <zjmarlow> okay, an entry in Crash Reports for nqp: Exception Not: EXC_CORPSE_NOTIFY.  Termination Reason: CODESIGNING 2.  I was able to work around that by mving nqp instead of just doing a cp.
[00:23:45] <zjmarlow> Exception Note*
[00:28:49] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[00:35:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[00:45:34] <[Coke]> good find.
[00:52:02] *** Joins: tejr (~tejr@user/tejr)
[00:58:56] *** Quits: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com) (Quit: Ping timeout (120 seconds))
[01:02:21] *** Joins: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com)
[01:04:01] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:08:20] *** Quits: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com) (Quit: Ping timeout (120 seconds))
[01:15:41] *** Joins: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com)
[01:15:45] *** Quits: sm2 (~sm1@2601:44:8701:9420::76d) (Ping timeout: 265 seconds)
[01:18:54] *** Quits: [Coke] (~coke@172.58.238.187) (Ping timeout: 256 seconds)
[01:20:40] *** Joins: [Coke] (~coke@172.58.238.187)
[01:41:24] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:48:26] *** Joins: patrickb (~quassel@55d4530d.access.ecotel.net)
[02:03:06] *** Quits: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com) (Quit: Ping timeout (120 seconds))
[02:06:50] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[02:16:53] <discord-raku-bot> <Nemokosch#9980> I don't know whether this is a weird thing to say
[02:17:07] <discord-raku-bot> <Nemokosch#9980> but I definitely love to use Raku as a kind of shell xD
[02:18:19] <discord-raku-bot> <Nemokosch#9980> Python or JS already feel like a breath of fresh air after POSIX shell variants
[02:19:06] <discord-raku-bot> <Nemokosch#9980> but in Raku it's really a no-brainer to get a better `cut` and stuff like this
[02:19:43] <discord-raku-bot> <Nemokosch#9980> and the interaction with underlying shells is so fluent...
[02:21:13] <discord-raku-bot> <Nemokosch#9980> there is no "check for binary file" utility? no worries, I can just call the pretty good `file` program and extract something from the returned string
[02:22:49] *** Joins: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com)
[02:27:02] <moon-child> @Nemokosch#9980 what constitutes a 'binary file'?  You can read the bytes and check if any of them is ≥0x80
[02:27:11] <moon-child> (or perhaps 7f)
[02:32:36] <discord-raku-bot> <Nemokosch#9980> It's hard to tell but that's surely too strict, non-ascii chars are a thing
[02:34:53] <discord-raku-bot> <Nemokosch#9980> It would be costly to get false positives for every German comment in source files and man docs 😅
[02:35:02] <japhb> A reasonable heuristic for determining text v. binary is kinda messy.  You have to consider whether there are nulls or control bytes, whether it can be decoded as utf-8, etc.
[02:35:14] <japhb> perl6
[02:35:17] <japhb> Gah
[02:35:42] <japhb> perl5's heuristic is reasonable at matching human expectation, but makes me wince.
[02:35:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:35:50] <japhb> Probably why we didn't adopt it.
[02:45:02] <discord-raku-bot> <Nemokosch#9980> Anyways, it seems good enough to just take the judgement of `file`
[02:46:18] <discord-raku-bot> <Nemokosch#9980> qqx{file --mime-encoding $_} ~~ /binary\n/
[02:46:28] <discord-raku-bot> <Nemokosch#9980> Or sth like this
[02:46:51] <discord-raku-bot> <Nemokosch#9980> qqx{file --mime-encoding $_} ~~ /binary\n$/
[02:48:42] <patrickb> Is it guaranteed that all whenevers in a react block are set up before the first fires?
[02:50:27] <japhb> patrickb: It is guaranteed that the top level of the react block is executed before the reacting starts.  But whenevers can be added at run time, from within other whenevers, for instance.
[02:50:29] <lizmat> I think it is, if you understand that all the whenevers are just syntactic sugar for a bunch of code blocks being passed to a routine
[02:50:44] *** Quits: zjmarlow (~zjmarlow@071-084-181-214.res.spectrum.com) (Ping timeout: 256 seconds)
[02:51:05] <lizmat> japhb: I didn't know that...  so... patrickb  I guess YMMV
[02:51:38] <patrickb> hm. I want to be sure that events fired during the execution of one event block are guaranteed to be seen by the other block.
[02:52:33] <japhb> Well, the whenevers within a *particular* react block are guaranteed to be mutually exclusive.  But not, IIUC, between react blocks.
[02:53:17] <japhb> And certainly, when you start a new task for the react, you have no idea whether that new task or your current task executes first; if you need it to happen in a certain order, you need to write an interlock.
[02:53:26] <patrickb> Could `whenever anyof(Promise.keep, $some-supply) { ... }` do that?
[02:53:53] <lizmat> well, that just returns another Promise, no ?
[02:55:29] <patrickb> Lets add some context: https://paste.sr.ht/~patrickb/9eb21e6d2cd428de58b594ee60e069ab1300e61f
[02:55:52] <patrickb> I try implementing remote window handling in cro http2
[02:56:27] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[02:56:47] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:56:50] <patrickb> Task is: Check if there is enough room left in curent window and if yes (the fast path) atomically decrement the window sizes.
[02:57:00] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[02:57:36] <patrickb> If not, wait for an event telling me the window sizes have been bumped and then check again.
[02:58:41] <japhb> (BTW, side note on that paste:  If you've already typed an attribute, you don't have to repeat yourself to initialize it.  You can do: `has Supplier $.stream-reset .= new;` ... or even `has Supplier:D $.stream-reset .= new;` if you want to guarantee that you never have an uninitialized Supplier.)
[02:59:04] <patrickb> Raciness spoils the fast path, when a bump happens between the fast path check and before the tap is set up. Then I possibly wait endlessly.
[02:59:39] <patrickb> japhb: Those lines were existing Cro code. Want to stick to the convention.
[03:04:48] <japhb> When using atomicint, you should use atomic fetch (prefix atom) as well as atomic math.
[03:06:22] <japhb> But again, that's a side note.
[03:06:54] <patrickb> Without atomic I'm at least guaranteed to either read the old or new value, right? If yes, I'm fine.
[03:11:05] <japhb> patrickb: Not necessarily, IIUC. I believe atomicint is the right size so you *can* use atomic primitives on it, but if you don't, you could get e.g. split reads.
[03:11:21] <japhb> (But I'm not an expert in portability of atomicity conventions.)
[03:11:48] <japhb> Why are you reacting to a 'Promise.kept'?  That's going to be instantly true.
[03:11:55] <patrickb> split read means completely bogus value?
[03:12:11] <moon-child> I don't know of any remotely new hardware where you'll get split reads on something that size.  That said it would be nice to have first-class support for relaxed ordering
[03:12:22] <japhb> patrickb: Upper 32 bits and lower 32 bits in separate reads.
[03:12:48] <japhb> moon-child: Like I said, I'm no expert, just following docs.
[03:13:45] <japhb> (To my comment above: Promise.kept is a shorthand for creating a new Promise that has *already* had .keep called on it.) 
[03:14:14] <patrickb> I'm unsure it works, but the hope is, that this will be instantly true, run the code, if success be done. *But*, if, while doing the check, an event on the $remote-window-change occurred, I'm guaranteed I will not miss it.
[03:16:46] <patrickb> That's the thing I'm stuggeling with. How can I have the fast path (usually there will be enough room in the window), but also be sure I will not have missed any concurrent window size increases.
[03:16:48] <japhb> Hmmm, looking at that code more, I'm not sure I've ever tried to tap a Supplier directly (rather than a Supplier.Supply)
[03:17:32] <patrickb> I think you're right about that, I need to get a supply first.
[03:24:08] <patrickb> https://paste.sr.ht/~patrickb/2193bb0eab81e7f0a449552fc247523941e3566e <- That's the code I started with, before I noticed the raceiness. It's probably more obvious which problem I try to solve.
[03:27:34] <patrickb> https://paste.sr.ht/~patrickb/88628f6bb305f368f8170c2a3daa032940964b39 <- even clearer
[03:32:14] <moon-child> hmm, why can't you atomic-fetch, atomic-assign, or cas non-ints?
[03:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:33:49] <patrickb> moon-child: The atomic ops are directly wired to a hardware functionality of the CPU, and that requires ints to work.
[03:34:23] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:34:35] <moon-child> patrickb: you can atomically store, load, or cas any word.  The CPU doesn't care if that word represents a pointer or an integer at the language level
[03:35:10] <ugexe> yeah a MWSR using atomic int or cas was my initial thought
[03:36:39] <patrickb> moon-child: What other native word size things do you have in mind that atomic ops would be useful on?
[03:37:50] <moon-child> patrickb: raku objects have identity; and they are boxed, so they are represented by a pointer, that is a word
[03:39:44] <patrickb> What semantic should modifying an object pointer in Raku have?
[03:42:16] <moon-child> same as assignment...
[03:42:34] <ugexe> https://github.com/Raku/roast/blob/dffc2a4cec4a1b91a14289a88cead3ceecd5f5b4/S17-lowlevel/cas.t#L22-L24
[03:43:33] <moon-child> ah, that works!  Docs are out of date
[03:44:54] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[03:48:05] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 264 seconds)
[03:53:52] <ugexe> https://github.com/jnthn/p6-concurrent-stack/blob/master/lib/Concurrent/Stack.pm6 is also a good example
[04:02:45] <patrickb> I'm off to bed. Thanks so far for everyone having a look. I'll backlog tomorrow, so please write, should you have another idea / comment.
[04:03:52] <moon-child> night!
[04:04:02] *** Quits: patrickb (~quassel@55d4530d.access.ecotel.net) (Quit: Quit.)
[04:10:39] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[04:10:54] *** Joins: tejr (~tejr@user/tejr)
[04:45:42] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[04:45:57] *** Joins: Colt (~Colt@user/colt)
[04:46:00] <moon-child> m: sub f (--> Int) {}; say f
[04:46:01] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Nil␤»
[04:46:20] <moon-child> why?
[04:54:56] *** Joins: frost (~frost@user/frost)
[04:59:23] <[Coke]> you didn't return anything, so Nil?
[04:59:36] <[Coke]> m: sub f() {} ; say f
[04:59:36] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Nil␤»
[05:00:03] <moon-child> but I specified that the result should be an Int.  So I would expect either an error or an Int type object
[05:00:41] <[Coke]> Yes. Nil is special.
[05:00:58] <[Coke]> m: sub f(-->Int) {"hi"} ; say f
[05:00:58] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Type check failed for return value; expected Int but got Str ("hi")␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[05:01:26] <[Coke]> https://docs.raku.org/type/Nil
[05:01:37] <[Coke]> "The value Nil may be used to fill a spot where a value would normally go, and in so doing, explicitly indicate that no value is present."
[05:02:26] <[Coke]> the first few paragraphs cover your question, I think.
[05:02:43] <[Coke]> esp: "Along with Failure, Nil and its subclasses may always be returned from a routine even when the routine specifies a particular return type. "
[05:05:10] <moon-child> ahh, ok!
[05:13:37] <[Coke]> m: Nil.is.a.special.value.say
[05:13:37] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Nil␤»
[05:43:42] <lucs> This looks a bit complicated, can it be simplified?:
[05:44:00] <lucs> m: my $t = DateTime.now; my $s = $t.second; note $t.posix + ($s - $s.truncate)
[05:44:01] <camelia> rakudo-moar b994c6bbb: OUTPUT: «1637201640.9526284␤»
[05:51:49] <moon-child> hmm, I could have sworn there was a function called 'frac' or some such to replace $s - $s.truncate, but apparently not
[05:54:57] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:54:57] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:57:25] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:02:41] <lucs> Oh, rereading the DateTime doc page, there is an Instant method that does it right off the bat
[06:02:44] <lucs> m: note DateTime.now.Instant;
[06:02:45] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Instant:1637202801.88565274␤»
[06:03:03] <lucs> *phew*
[06:06:45] <lucs> m: note DateTime.now.Instant.Num
[06:06:45] <camelia> rakudo-moar b994c6bbb: OUTPUT: «1637203042.7485209␤»
[06:09:05] <moon-child> m: say now.Num
[06:09:05] <camelia> rakudo-moar b994c6bbb: OUTPUT: «1637203182.772122␤»
[06:15:07] <lucs> Fair enough :)
[06:16:00] <moon-child> :)
[06:17:06] <lucs> I love this language.
[06:57:07] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:03:39] *** Joins: bruceAxtens (~bruceAxte@60.231.231.174)
[07:13:22] <bruceAxtens> > 'ACTU'.split("").Array.map(-> $v { $v.ord }) gives me (Nil 65 67 84 85 Nil)
[07:13:44] <bruceAxtens> Where are the Nil values coming from and how do I not get them
[07:15:42] *** Joins: RavingCodRoller (~RavingCod@60.231.231.174)
[07:17:51] *** Quits: bruceAxtens (~bruceAxte@60.231.231.174) (Quit: Connection closed)
[07:32:51] <kjp> There is "nothing" before the "A", so the string is split there, giving the first Nil, and similarly at the end.
[07:33:44] <kjp> Generally in raku, if you want to specify what you want to keep, then use comb rather than split, so something like 'ACTU'.comb('.') would do.
[07:34:13] <kjp> m: 'ACTU'.comb('.')
[07:34:13] <camelia> rakudo-moar b994c6bbb: ( no output )
[07:34:32] <Xliff> m: 'ACTU'.comb('.').gist.say
[07:34:33] <camelia> rakudo-moar b994c6bbb: OUTPUT: «()␤»
[07:34:42] <kjp> m: 'ACTU'.comb('.').say
[07:34:42] <camelia> rakudo-moar b994c6bbb: OUTPUT: «()␤»
[07:34:44] <Xliff> m: 'ACTU'.comb(/./).gist.say
[07:34:45] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(A C T U)␤»
[07:34:57] <kjp> m: 'ACTU'.comb(/./).say
[07:34:58] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(A C T U)␤»
[07:59:11] <elcaro> the `/./` is not necessary if you just want chars
[07:59:21] <elcaro> m: say 'ACTU'.comb
[07:59:22] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(A C T U)␤»
[07:59:53] <elcaro> m: say 'ACTU'.comb».ord
[07:59:54] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(65 67 84 85)␤»
[08:00:27] <elcaro> m: say 'ACTU'.ords  # or just this if you want ords
[08:00:27] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(65 67 84 85)␤»
[08:06:25] *** Quits: RavingCodRoller (~RavingCod@60.231.231.174) (Read error: Connection reset by peer)
[08:38:40] <Xliff> Anyone interesetd in TUS? 
[08:38:42] <Xliff> https://tus.io/protocols/resumable-upload.html
[08:45:01] *** Joins: RavingCodRoller (~RavingCod@60.231.231.174)
[09:03:43] *** Quits: RavingCodRoller (~RavingCod@60.231.231.174) (Read error: Connection reset by peer)
[09:12:59] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 264 seconds)
[09:13:17] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 265 seconds)
[09:22:02] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[09:26:25] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[09:32:45] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:34:06] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:34:22] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:58:45] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[09:58:50] *** Joins: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[10:53:21] *** Joins: parv (~quass@user/parv)
[10:57:11] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:58:08] *** Joins: seednode (~seednode@user/seednode)
[11:02:35] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.3)
[11:10:34] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:15:14] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 260 seconds)
[11:15:50] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[11:34:35] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[12:14:20] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:35:08] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[12:38:48] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[12:52:16] *** Parts: parv (~quass@user/parv) ()
[13:02:53] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[13:02:58] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[13:03:01] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[13:03:07] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[13:03:08] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:03:21] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:05:31] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Read error: Connection reset by peer)
[13:25:12] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[13:40:42] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:17:00] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[14:19:33] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Remote host closed the connection)
[14:20:00] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[14:23:48] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Remote host closed the connection)
[14:43:40] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[14:51:34] <tbrowder> m: my $doy=132;my $y=2021;my $t=Date.new(:year($y).later(:days($doy-1);say $t.day-of-year
[14:51:34] <camelia> rakudo-moar b994c6bbb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $t in declaration to initialize itself␤at <tmp>:1␤------> 3.new(:year($y).later(:days($doy-1);say $7⏏5t.day-of-year␤    expecting any of:␤        argument list␤      …»
[14:54:12] <tbrowder> m: my $d=25;my $y=2021;my $t = Date.new(:year($y)).later(:days($d-1));say $t.day-of-year
[14:54:12] <camelia> rakudo-moar b994c6bbb: OUTPUT: «25␤»
[14:56:36] <tbrowder> .tell lizmat i'm not sure Date.new from year, year-day is justifiable ^^^
[14:56:37] <tellable6> tbrowder, I'll pass your message to lizmat
[15:15:00] <lizmat> tbrowder: yes, I was aware of that, and it's even simpler (code wise)
[15:15:01] <tellable6> 2021-11-18T11:26:37Z #raku <tbrowder> lizmat i'm not sure Date.new from year, year-day is justifiable ^^^
[15:15:13] <lizmat> m: dd Date.new(:year(2021)) - 1 + 45   # the 45th day of the year 2021
[15:15:13] <camelia> rakudo-moar b994c6bbb: OUTPUT: «Date.new(2021,2,14)␤»
[15:21:12] *** Joins: hi (~hi@62.20.62.208)
[15:21:35] *** Quits: hi (~hi@62.20.62.208) (Client Quit)
[15:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:33:05] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:38:34] <lizmat> m: sub yearday($year, $day) { Date.new($year - 1, 12,31) + $day }    # tbrowder probably the most efficient
[15:38:34] <camelia> rakudo-moar b994c6bbb: ( no output )
[15:42:18] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:43:33] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[15:47:49] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:29:39] <lizmat> meh, still 18 submissions to go for the Advent Calendar: https://github.com/Raku/advent/blob/master/raku-advent-2021/authors.md
[16:47:49] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:47:49] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:49:41] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[16:50:22] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:55:37] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[17:00:49] <lizmat> PSA: https://logs.liz.nl now running on refactored IRC::Log and many other improvements, using less CPU and less memory
[17:02:56] <lizmat> now on to using Cro 0.8.7  :-)
[17:13:08] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:18:21] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[17:19:41] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 250 seconds)
[17:21:37] <tib> The ephemeral miniconf is going LIVE NOW: https://us02web.zoom.us/j/81869065466?pwd=bzVFTVg1TWxBN0VOTFUwRmdPaTFuZz09
[17:22:46] *** Joins: MoC (~moc@user/moc)
[17:24:44] <MasterDuke> oh, i thought i would be able to attend, but turns out i have a bunch of stuff already scheduled. will the presentations be recorded?
[17:46:46] <tib> JJ Merelo speaking right now
[17:46:56] <tib> MasterDuke yes but not all
[17:47:39] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[17:50:42] <discord-raku-bot> <Nemokosch#9980> is JJ Merelo Spanish?
[17:51:52] <MasterDuke> yes
[17:53:29] <discord-raku-bot> <Nemokosch#9980> Nice 😄
[18:01:41] <[Coke]> m: dd "ABCD".split('', :skip-empty)
[18:01:42] <camelia> rakudo-moar b994c6bbb: OUTPUT: «("A", "B", "C", "D").Seq␤»
[18:02:02] <[Coke]> .comb is usually better for this use case, but you can use split.
[18:24:33] *** Joins: ProperN[out] (~holyShizn@2600:1700:eb30:a2c0::48)
[18:24:39] <discord-raku-bot> <RaycatWhoDat#0001> When making a grammar, what is the correct way to look for delimited block if the delimiters are on separate lines?
[18:27:37] *** Quits: ProperN[out] (~holyShizn@2600:1700:eb30:a2c0::48) (Changing host)
[18:27:37] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[18:27:53] *** ProperN[out] is now known as ProperNoun
[18:36:46] *** Joins: jess (~jess@libera/staff/jess)
[18:48:40] <tbrowder> lizmat: thnx, i didn't know Date could be incremented like that. i think i was confusing incrementing DateTime by duration of seconds. yr method is very handy.
[18:55:22] *** Joins: sm2 (~sm1@2601:44:8701:9420::76d)
[19:06:41] *** Joins: patrickb (~quassel@55d4511d.access.ecotel.net)
[19:09:16] <tib> (I will run a very small Raku quiz after jjatria QAs at the ephemeral mininconf)
[19:23:45] *** gordonfish- is now known as gordonfish
[19:25:26] <tib> (sjn won)
[19:42:55] <El_Che> sjn, damn that guy, he's just too nice ;)
[19:44:17] <sjn> pfft
[19:44:59] <sjn> I won because Kahoot is a made by a Norwegian country, so I get a "home advantage" :D
[19:45:14] <sjn> s/country/company/
[19:45:37] <El_Che> you were in kahoot with them!
[19:45:42] <El_Che> s
[19:45:43] <sjn> exactly! :-D
[19:49:33] *** Joins: suman (~suman@27.34.50.95)
[19:49:43] <suman> say $_ if $_~~ /regex/  for "file".IO.lines gives the line that match the regex. 
[19:49:55] <suman> How to get the line immediately after the match?
[19:54:06] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (K-Lined)
[19:54:11] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (K-Lined)
[19:54:15] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (K-Lined)
[19:54:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (K-Lined)
[19:54:22] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (K-Lined)
[20:05:17] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 246 seconds)
[20:06:13] * sjn reads https://certitude.consulting/blog/en/invisible-backdoor/
[20:06:30] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[20:06:42] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 260 seconds)
[20:06:51] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 244 seconds)
[20:06:52] <sjn> Would it be sensible that the parser warns if it detects invisible/nonprintable characters in the code?
[20:06:53] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[20:06:53] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:07:05] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[20:07:10] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[20:07:30] *** Joins: bdju (~bard@user/bdju)
[20:07:37] <sjn> (maybe this should be in #raku-dev)
[20:07:38] *** Quits: sm2 (~sm1@2601:44:8701:9420::76d) (Quit: WeeChat 3.3)
[20:07:41] *** Joins: chronon (~chronon@user/chronon)
[20:09:01] *** Joins: sm1 (~sm1@2601:44:8701:9420::76d)
[20:09:01] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Read error: Connection reset by peer)
[20:09:33] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[20:09:39] *** Quits: ecocode__ (sid500572@lymington.irccloud.com) (Ping timeout: 265 seconds)
[20:09:54] *** Quits: leont (sid489095@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:09:55] *** Quits: skaji (sid178483@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:09:56] *** Quits: SmokeMachine (sid19088@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:09:56] *** Quits: tbrowder (sid168924@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:10:00] *** Quits: mjgardner (sid182628@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: kawaii_ (sid345572@hampstead.irccloud.com) (Write error: Connection reset by peer)
[20:10:04] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:11:45] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[20:11:46] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[20:12:00] *** Joins: ecocode__ (sid500572@lymington.irccloud.com)
[20:12:05] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 264 seconds)
[20:12:06] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[20:12:30] *** Joins: mjgardner (sid182628@ilkley.irccloud.com)
[20:12:38] *** Joins: SmokeMachine (sid19088@tinside.irccloud.com)
[20:12:42] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[20:13:25] *** Joins: kawaii_ (sid345572@hampstead.irccloud.com)
[20:14:35] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[20:14:45] *** Joins: skaji (sid178483@tinside.irccloud.com)
[20:15:10] *** Joins: tbrowder (sid168924@lymington.irccloud.com)
[20:19:56] *** Quits: suman (~suman@27.34.50.95) (Quit: Connection closed)
[20:20:21] *** Joins: suman (~suman@27.34.50.95)
[20:29:38] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[20:31:01] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Client limit exceeded: 20000)
[20:36:18] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[20:37:39] *** Joins: tejr (~tejr@user/tejr)
[20:44:16] *** Quits: sm1 (~sm1@2601:44:8701:9420::76d) (Ping timeout: 260 seconds)
[21:02:10] <El_Che> weekly: https://github.com/dha https://twitter.com/GinaRSnape/status/1460828469101740033 both raku and perl community passed away
[21:02:11] <notable6> El_Che, Noted! (weekly)
[21:02:12] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[21:02:12] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[21:09:24] *** Quits: suman (~suman@27.34.50.95) (Quit: Connection closed)
[21:14:13] <discord-raku-bot> <Nemokosch#9980> rip
[21:16:13] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[21:17:03] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Client Quit)
[21:17:31] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[21:19:19] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[21:19:25] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Client Quit)
[21:19:37] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[21:23:04] *** Quits: patrickb (~quassel@55d4511d.access.ecotel.net) (Ping timeout: 256 seconds)
[21:33:07] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:34:13] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:50:49] *** Joins: patrickb (~quassel@55d4511d.access.ecotel.net)
[22:11:48] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:36:28] *** Joins: ajr (~andrew@47.151.137.150)
[23:08:58] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:53:28] *** Joins: sm1 (~sm1@2601:44:8701:9420::76d)
