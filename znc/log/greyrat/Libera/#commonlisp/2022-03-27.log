[00:01:28] <boigahs> Ok, good to know
[00:03:57] <CodeBitCookie[m]> Hello Everyone
[00:03:59] <CodeBitCookie[m]>  * Hello Everyone@
[00:04:02] <CodeBitCookie[m]>  * Hello Everyone!
[00:06:05] <CodeBitCookie[m]> Shinmera: Wow, nice to see you. I really like your work and have been keeping an eye on alloy for quite a bit now.
[00:06:12] <CodeBitCookie[m]> Other than that.
[00:06:57] <CodeBitCookie[m]> I was trying to generate CFFI bindings with C2FFi and CFFI-LIBFFI
[00:07:06] <CodeBitCookie[m]> for Pango
[00:10:48] *** Quits: Mrtn[m] (~mrtnm]@2001:470:69fc:105::1f44) (Quit: Reconnecting)
[00:11:06] *** Joins: Mrtn[m] (~mrtnm]@2001:470:69fc:105::1f44)
[00:16:13] *** Quits: dra (~dra@2a04:4540:6422:4f00:6838:c833:a209:64c4) (Quit: Leaving)
[00:16:51] <Shinmera> I don't need eyes! I need hands!
[00:16:58] <Shinmera> Hands to write the code I don't have time for
[00:18:14] <Shinmera> and to squash the bugs I leave in my wake
[00:32:34] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:34:17] *** Quits: amb007 (~a_bakic@113.247.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[00:39:22] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[00:41:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:42:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:42:48] *** Joins: amb007 (~a_bakic@240.106.204.77.rev.sfr.net)
[00:43:49] *** Joins: lisp123 (~lisp123@143.238.164.103)
[00:45:46] *** Joins: simendsjo (~user@84.211.91.241)
[00:48:31] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 260 seconds)
[00:56:20] *** Quits: amb007 (~a_bakic@240.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:57:38] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:05:16] *** Quits: random-nick (~random-ni@87.116.167.125) (Remote host closed the connection)
[01:05:19] <CodeBitCookie[m]> Well, I would be honored to work although, I know too little about Common Lisp, I only started in August Last year.
[01:05:31] <CodeBitCookie[m]> * Shinmera: Well, I
[01:05:57] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[01:06:14] <CodeBitCookie[m]> Also, currently, how many people are you working with. Since you often start massive undertakings.
[01:06:25] <CodeBitCookie[m]> Well atleast they are massive to me.
[01:06:37] <pjb> CodeBitCookie[m]: Practice makes perfect.
[01:06:49] <CodeBitCookie[m]> True.
[01:07:02] <CodeBitCookie[m]> <CodeBitCookie[m]> "I was trying to generate CFFI..." <- but pjb do you know ^?
[01:07:46] <pjb> I've used swig to generate cffi, but more often, I just write it by hand.
[01:08:06] <pjb> I know no cffi generator doing a perfect job (notably because of C).
[01:09:04] <Shinmera> CodeBitCookie[m]: Not sure what you mean by "working with". Rarely some others contribute, and there's projects of others I use. But I don't have any other programmers on staff at Shirakumo.
[01:09:58] <CodeBitCookie[m]> pjb: I mean, Pango is a pretty big library, how would I go about typing all of that out?
[01:10:35] <CodeBitCookie[m]> Shinmera: Well Shinmera, If you ever need some beginner to do some work for you, I would be ready to help.
[01:10:59] <CodeBitCookie[m]> Since I am also working on a really big project.
[01:13:09] <Shinmera> Well, there's tons of projects that have outstanding issues on the bug trackers. And there's always use for more tests and more documentation.
[01:13:41] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:13:45] <pjb> CodeBitCookie[m]: you may start with a cffi generator, but you will most probably have to patch the result manually.
[01:14:27] <CodeBitCookie[m]> pjb: Do you recommend that or to start from scratch?
[01:15:31] <pjb> CodeBitCookie[m]: well, if the API is big, it's easier to generate it.
[01:15:49] <pjb> I'd recommend to use libraries with small API :-)
[01:16:11] <CodeBitCookie[m]> pjb: pjb: How would I do that with pango?
[01:16:45] <pjb> Read the documentation of the tool you choose, use the command with the right options.
[01:19:57] *** Joins: akoana (~ah@user/akoana)
[01:33:53] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:34:53] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4.1)
[01:35:10] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:35:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[01:38:51] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[01:45:26] *** Quits: wacki (~wacki@87.123.143.38) (Quit: Leaving.)
[01:55:56] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:58:58] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:16:10] *** Joins: lisp123 (~lisp123@143.238.164.103)
[02:26:11] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[02:26:44] *** Joins: lisp123 (~lisp123@143.238.164.103)
[02:31:04] <drakonis> https://news.ycombinator.com/item?id=30811592 kandria was mentioned in the comments
[02:31:26] <drakonis> positively, even.
[02:32:08] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 272 seconds)
[02:35:10] *** Joins: kevingal (~quassel@80.233.47.223)
[02:35:37] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[02:37:35] <Shinmera> and it invited the typical hackernews reply goober.
[02:42:31] <drakonis> yes.
[02:42:33] <drakonis> sadly.
[02:43:07] *** Joins: random-nick (~random-ni@87.116.167.125)
[02:47:32] *** Quits: Inline (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de) (Quit: Leaving)
[02:52:06] *** Joins: Inline (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de)
[02:53:07] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[03:08:52] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 272 seconds)
[03:10:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[03:14:00] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 252 seconds)
[03:14:21] *** Joins: Inline__ (~Inline@p4fedbe8f.dip0.t-ipconnect.de)
[03:15:05] *** Quits: Inline (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:24:36] *** Quits: kevingal (~quassel@80.233.47.223) (Ping timeout: 240 seconds)
[03:24:53] *** Joins: lisp123 (~lisp123@143.238.164.103)
[03:27:39] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 260 seconds)
[03:34:18] *** Joins: rgherdt_ (~rgherdt@port-92-195-125-72.dynamic.as20676.net)
[03:37:15] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 256 seconds)
[03:44:36] *** Joins: livoreno (~livoreno@user/notzmv)
[03:50:47] *** Quits: rgherdt_ (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Remote host closed the connection)
[03:53:00] *** Quits: Guest745 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[04:00:09] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[04:06:11] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[04:06:15] *** Quits: Posterdati (~posterdat@user/Posterdati) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:16:55] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[04:18:08] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[04:19:42] *** Joins: Posterdati (~posterdat@user/Posterdati)
[04:21:41] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:34:49] *** Joins: lisp123 (~lisp123@143.238.164.103)
[04:37:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[04:39:35] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[04:43:07] *** Joins: livoreno (~livoreno@user/notzmv)
[04:44:26] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:46:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:52:37] *** Joins: Oddity (~Oddity@user/oddity)
[05:05:42] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:07:24] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Read error: Connection reset by peer)
[05:07:33] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:08:17] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[05:08:42] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:22:39] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:34:49] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[05:35:18] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[05:43:37] *** Joins: s-liao (~s-liao@101.86.164.158)
[05:58:37] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Quit: Leaving)
[05:58:56] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:59:50] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Client Quit)
[06:00:06] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[06:02:32] *** Joins: lisp123 (~lisp123@143.238.164.103)
[06:03:10] *** Joins: rustacean (~quassel@117.254.34.143)
[06:03:29] *** Quits: rustacean (~quassel@117.254.34.143) (Client Quit)
[06:03:43] *** Joins: razetime (~quassel@117.254.34.143)
[06:27:48] *** Joins: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de)
[06:29:58] *** Joins: unixlisp (~unixlisp@111.37.114.195)
[06:30:35] *** Quits: Inline__ (~Inline@p4fedbe8f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:44:44] *** Parts: unixlisp (~unixlisp@111.37.114.195) ()
[06:53:12] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[06:56:12] *** Quits: razetime (~quassel@117.254.34.143) (Ping timeout: 240 seconds)
[06:56:56] *** Joins: razetime (~quassel@117.254.34.170)
[07:12:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[07:15:48] *** Quits: phantomics (~phantomic@71-218-229-123.hlrn.qwest.net) (Ping timeout: 240 seconds)
[07:44:01] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[07:49:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[07:51:40] *** Joins: aeth (~aeth@user/aeth)
[07:53:57] *** Joins: semz_ (~semz@user/semz)
[07:54:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:56:55] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:20:35] *** Joins: lisp123 (~lisp123@143.238.164.103)
[08:25:17] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 240 seconds)
[08:30:31] <beach> Good morning everyone!
[08:31:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[08:32:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:34:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[08:35:26] *** Joins: lisp123 (~lisp123@143.238.164.103)
[08:36:33] *** Joins: aeth (~aeth@user/aeth)
[08:48:59] <rawley> Good morning :)
[08:49:51] <beach> rawley: Are you new here?  I don't recognize your nick.
[08:51:38] <rawley> Yeah, just joined a few days ago
[08:51:57] <beach> Great!  Welcome!
[08:52:23] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[08:52:45] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:53:07] <rawley> Thanks! I'm mostly a Clojure dev but I really like CL as well, hoping I pick up a bit from hanging out in here.
[08:53:59] <beach> I am sure you will.
[09:00:22] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[09:01:09] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:03:46] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[09:05:39] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:15:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:22:51] <lisp123> The best message one can get: "When you're reading this message, Hunchentoot has been properly installed."
[09:24:26] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 272 seconds)
[09:25:58] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:29:29] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[09:34:57] *** Joins: lisp123 (~lisp123@143.238.164.103)
[09:40:03] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 260 seconds)
[09:40:35] *** Joins: lisp123 (~lisp123@143.238.164.103)
[09:48:49] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:02:39] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[10:03:30] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:05:28] *** Joins: Everything (~Everythin@37.115.210.35)
[10:12:46] *** Joins: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:15:44] <hashfunc1880> is there a way to test if a given symbol is part of a certain class?
[10:16:16] <beach> Er, what?
[10:16:28] <beach> Symbols are not "part of" classes.
[10:17:23] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[10:18:15] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:18:16] <hashfunc1880> beach: for example:
[10:18:24] <hashfunc1880> given (DEFCLASS A () ((VAR :ACCESSOR VAR)))
[10:18:38] <hashfunc1880> (SYMBOL-FUNCTION 'VAR) => #<STANDARD-GENERIC-FUNCTION TOP::VAR (1)>
[10:19:00] <hashfunc1880> is there a way to find out that VAR is associated with class A?
[10:21:24] <beach> The symbol is not "part of" or "associated with" the class.  The symbol names a generic function that has a method that specializes to the class.  And, yes, there are ways to find that out.  Some of that might require the MOP.
[10:22:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[10:25:31] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[10:31:11] *** Joins: lisp123 (~lisp123@143.238.164.103)
[10:34:54] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[10:35:28] <beach> So you need to find out whether the symbol names a generic function, or whether (SETF <that-symbol>) names one.  Then you need to find out whether that generic function has a method that specializes to the class.  It is not clear what you want, so the details will vary.  For example does (defmethod VAR2 (a b (c A) d) ...) count?
[10:36:03] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 260 seconds)
[10:37:21] <beach> So I guess you can use FBOUNDP first.
[10:37:27] <beach> clhs fboundp
[10:37:28] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_fbound.htm
[10:37:50] <beach> Then FDEFINITION to get to the definition.
[10:37:57] <beach> clhs fdefinition
[10:37:57] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_fdefin.htm
[10:38:13] <beach> Then TYPEP to figure out whether the definition is a generic function.
[10:38:27] <beach> Then GENERIC-FUNCTION-METHODS to get to the list of methods.
[10:38:35] <beach> mop generic-function-methods
[10:38:35] <specbot> http://metamodular.com/CLOS-MOP/generic-function-methods.html
[10:39:19] <beach> Then METHOD-SPECIALIZERS to get to the list of specializers for each method
[10:39:24] <beach> mop method-specializers
[10:39:24] <specbot> http://metamodular.com/CLOS-MOP/method-specializers.html
[10:40:26] <beach> Then FIND-CLASS to get to the class metaobject from the class name.
[10:40:41] <beach> Then EQ to check whether one of the specializers is that class.
[10:43:07] *** Joins: lisp123 (~lisp123@143.238.164.103)
[10:47:45] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 252 seconds)
[10:48:45] <beach> hashfunc1880: Does that make sense to you?
[10:48:48] <hashfunc1880> beach: ok thanks. i just added (EQ (TYPE-OF (SYMBOL-FUNCTION VAR)) 'STANDARD-GENERIC-FUNCTION). but that is turning out to be too loose of an approach. ideally, i guess i just want if the symbol is either a 'STANDARD-GENERIC-FUNCTION (like a member function) or if it's the name of a class itself.
[10:48:55] *** Joins: lisp123 (~lisp123@143.238.164.103)
[10:49:06] <hashfunc1880> beach: yeah, some of it does, i'll have to read more into it
[10:49:15] <hashfunc1880> *most of it does i think
[10:51:23] <beach> Maybe if you tell us what you are trying to do, it would be easier to give advice, because you are mixing up several things.
[10:52:07] <beach> First of all, functions can be named (SETF <symbol>) so symbols are not enough to find out whether there is (say) a slot writer.
[10:53:19] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[10:53:35] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[10:53:39] <beach> Second, a symbol "is" not a standard generic function.  It can name one, but it isn't one.  And generic functions don't necessarily have names in the global environment, so there could be a generic function with a specilizer that you can't find with FDEFINITION (or SYMBOL-FUNCTION if you insist on using only symbols).
[10:53:54] <beach> Third, there is no such thing as a "member function" in Common Lisp.
[10:54:23] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:54:30] <beach> A slot reader or a slot writer is just a method on a generic function, and that method happens to specialize to the class with the slot.
[10:55:05] <beach> Fourth, TYPE-OF is not a good plan.  Use TYPEP instead.
[10:57:47] <hashfunc1880> beach: ok, yeah i'm going to change it to typep in this case. i think i'll just have to stick with just checking if the symbol names a standard-generic-function for now.
[10:58:03] <hashfunc1880> i'm also unable to use the function GENERIC-FUNCTION-METHODS
[10:58:44] <beach> It is not in the standard, as I told you.  It is in the mop.
[10:58:45] <hashfunc1880> like my environment says that GENERIC-FUNCTION-METHODS is undefined
[10:58:50] <hashfunc1880> oh i see
[10:58:58] *** Joins: X-Scale` (~ARM@80.199.137.78.rev.vodafone.pt)
[11:00:23] *** Quits: X-Scale (~ARM@46.50.6.46) (Ping timeout: 256 seconds)
[11:00:23] *** X-Scale` is now known as X-Scale
[11:02:56] <rotateq> hashfunc1880: Which implementation do you use? SBCL?
[11:03:24] <beach> It is best to use the closer-mop library.
[11:04:54] *** Joins: lisp123 (~lisp123@143.238.164.103)
[11:05:13] <rotateq> Yes for most nowadays used implementations. :)
[11:06:40] <rotateq> Ah it has even a file for the Mezzano operating system.
[11:11:02] <beach> You could also use this one perhaps:
[11:11:03] <beach> mop s-d-g-f
[11:11:03] <specbot> specializer-direct-generic-functions: http://metamodular.com/CLOS-MOP/specializer-direct-generic-functions.html
[11:11:07] <lisp123> whats the best logo these days
[11:11:09] <lisp123> for lisp
[11:11:29] <beach> The lizard, definitely.
[11:11:51] <lisp123> https://www.flaticon.com/free-icon/lisp_919849 this one?
[11:12:11] <lisp123> (or variations of it)
[11:12:39] <beach> Yeah.
[11:12:53] <lisp123> I'm partial to that as well
[11:13:08] <rotateq> The green multiple eyed alien is cute, but more unofficial maybe.
[11:13:11] <beach> It was made by a real artist, and that person explicitly allowed us to use it freely.  I forget the details.
[11:13:42] <rotateq> Oh cool.
[11:13:46] <lisp123> Nice
[11:14:19] <hashfunc1880> rotateq: i use sbcl
[11:14:28] <beach> rotateq: If you target only young nerds who are into sci-fi, then you can use that one.  I personally think it is silly.
[11:15:14] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[11:15:16] <rotateq> hashfunc1880: Okay so without a doubt you can use closer-mop there too like many other people. :)
[11:15:18] <hashfunc1880> ah sbcl itself has alot of the mop functions it seems
[11:15:34] <lisp123> I like its catchphrase "Made with secret alien technology" or something like that, but the 5 eyes is a lil bit off putting to me
[11:16:20] *** Joins: jeosol (~jeosol@user/jeosol)
[11:16:31] <rotateq> beach: Ah no problem.
[11:17:09] <lisp123> https://groups.google.com/g/comp.lang.lisp/c/dOS2dMSSTHg/m/9vvnfwFUOY0J -> thread on the lizard (nothing special, just in case someone wants to kill time reading the past)
[11:17:36] <rotateq> hashfunc1880: closer-mop is a portable system that calls the implementation specific things, like with CFFI for the foreign function interface capabilities
[11:18:00] <rotateq> lisp123: Just five? I thought nine.
[11:18:56] <lisp123> rotateq: looks like it depends on the version, i can see the 9 one now as well
[11:19:10] <rotateq> maybe the point of view :)
[11:36:34] <hashfunc1880> rotateq: ok thanks
[11:39:42] <rotateq> So it gives you to write portable code too.
[11:40:50] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Remote host closed the connection)
[11:41:00] *** Quits: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[11:41:15] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:57:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:57:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[12:02:08] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 272 seconds)
[12:08:12] *** Joins: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net)
[12:12:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[12:13:47] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[12:36:55] *** Joins: nature (~nature@mail.blazebone.com)
[12:37:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:39:36] *** Joins: Josh_2 (~user@197.184.162.216)
[12:39:54] <Josh_2> Hey
[12:40:13] <Josh_2> How do I write a (deftype <name> () `(satisfies <pred>)) in a defmacro?
[12:40:59] <Josh_2> <pred> is generated by arguments passed to defmacro, I can get (satisfies <pred>) or `(satisfies ,<pred>) but not `(satisfies <pred>) :(
[12:41:13] <aeth> you can use ' instead of ` in the deftype body
[12:41:40] <Josh_2> ah
[12:41:44] <Josh_2> I didnt know that, thanks
[12:41:51] <aeth> np
[12:41:59] <aeth> it's only ` by convention because sometimes you have to do something like this: (deftype <name> (x) `(simple-array 'double-float (,x)))
[12:42:07] <aeth> and it looks better if you always use the `
[12:42:08] *** semz_ is now known as semz
[12:42:25] <aeth> but in a macro, nobody will see it
[12:42:33] <Josh_2> Okay sweet, thanks for the info
[12:44:25] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[12:45:15] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[13:05:25] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[13:06:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[13:14:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[13:15:16] *** Quits: nature (~nature@mail.blazebone.com) (Remote host closed the connection)
[13:15:20] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[13:20:25] *** Joins: admich (~user@ip-159-80.sn-213-198.clouditalia.com)
[13:30:06] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: You have been kicked for being idle)
[13:31:27] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[13:32:22] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[13:40:55] *** Joins: shka (~herr@109.231.3.55)
[13:42:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Remote host closed the connection)
[13:43:01] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[13:54:25] *** Joins: lisp123 (~lisp123@139.168.166.203)
[13:56:56] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[13:57:22] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[14:07:22] *** Joins: pve (~pve@176-93-33-143.bb.dnainternet.fi)
[14:17:12] *** Joins: lisp123_ (~lisp123@45.86.202.13)
[14:17:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[14:17:47] *** Quits: lisp123 (~lisp123@139.168.166.203) (Read error: Connection reset by peer)
[14:18:12] *** Joins: lisp123 (~lisp123@139.168.166.203)
[14:22:15] *** Quits: lisp123_ (~lisp123@45.86.202.13) (Ping timeout: 252 seconds)
[14:35:12] *** Joins: nature (~nature@mail.blazebone.com)
[14:43:54] *** Joins: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it)
[14:46:39] *** Joins: rustacean (~quassel@117.254.34.170)
[14:46:48] *** Quits: razetime (~quassel@117.254.34.170) (Ping timeout: 272 seconds)
[14:50:01] *** Quits: lisp123 (~lisp123@139.168.166.203) (Remote host closed the connection)
[14:50:51] *** Joins: prokhor__ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[14:51:21] <prokhor__> hi all
[14:51:28] <prokhor__> Question: I am trying to get some old SW running.
[14:51:28] <prokhor__> It defines a homedir:
[14:51:28] <prokhor__> (defparameter *mysys-home* (make-pathname :directory
[14:51:28] <prokhor__>                                           (pathname-directory (or *load-pathname* (user-homedir-pathname)))))
[14:51:28] <prokhor__> then it defines some logical host:
[14:51:29] <prokhor__> (setf (logical-pathname-translations "MYSYS")
[14:51:31] <prokhor__>       (list (list "**;*.*"
[14:51:33] <prokhor__> 		          (merge-pathnames "**/*.*" *mysys-home*))))
[14:51:35] <prokhor__> when i use (translate-logical-pathname "mysys:test.lisp") it works fine...
[14:51:37] <prokhor__> unfortunately, that old code uses e.g. (load "mysys:test"),
[14:51:39] <prokhor__> when I try sth like: (translate-logical-pathname "MYSYS:A;B;C.D")
[14:51:41] <prokhor__> it always complains:
[14:51:45] <prokhor__> *** - TRANSLATE-PATHNAME: replacement pieces ((:DIRECTORY "a" "b") "c" "d" NIL) do not fit into
[14:51:47] <prokhor__>       #P"/home/prokhor/**/*.*"
[14:51:49] <prokhor__> how can i get (load "mysys:test") to work for /home/user/test.lisp ?
[14:52:11] <prokhor__> i am talking about clisp -sry, forgot to mention
[14:55:00] *** Joins: lisp123 (~lisp123@139.168.166.203)
[14:59:37] *** Quits: lisp123 (~lisp123@139.168.166.203) (Ping timeout: 240 seconds)
[15:14:29] *** Joins: dra (~dra@2a04:4540:6410:c100:4cc4:f220:91bd:91f9)
[15:23:25] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[15:35:25] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:37:06] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:38:21] *** Quits: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1) (Remote host closed the connection)
[15:41:57] <pjb> prokhor__: you need an entry for "**;*"
[15:44:10] <cage> Hi! can i build and executable with ASDF passing the build-path to asdf:make as: (asdf:make :foo :build-pathname "../foo")?
[15:54:43] *** Joins: treflip (~user@user/treflip)
[15:58:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:03:39] *** Quits: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Ping timeout: 260 seconds)
[16:06:04] *** Joins: wacki (~wacki@87.123.139.86)
[16:06:39] *** Joins: random-nick (~random-ni@87.116.176.196)
[16:10:25] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[16:10:43] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[16:24:27] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:35:51] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[16:36:12] *** Joins: amb007 (~a_bakic@240.106.204.77.rev.sfr.net)
[16:43:51] *** Joins: dlowe (~dlowe@user/dlowe)
[16:53:25] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[16:54:15] *** rustacean is now known as razetime
[16:55:07] *** Quits: razetime (~quassel@117.254.34.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:55:22] *** Joins: razetime (~quassel@117.254.34.170)
[17:08:31] *** Quits: amb007 (~a_bakic@240.106.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[17:10:57] *** Joins: amb007 (~a_bakic@43.145.204.77.rev.sfr.net)
[17:19:59] *** Quits: razetime (~quassel@117.254.34.170) (Read error: Connection reset by peer)
[17:24:35] *** Quits: amb007 (~a_bakic@43.145.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[17:25:09] *** Joins: amb007 (~a_bakic@132.145.204.77.rev.sfr.net)
[17:27:22] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[17:35:55] *** Joins: razetime (~quassel@117.254.34.170)
[17:46:10] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:50:31] *** Quits: amb007 (~a_bakic@132.145.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[17:50:56] *** Joins: amb007 (~a_bakic@198.147.204.77.rev.sfr.net)
[17:59:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:06:20] *** Joins: Bike (~Bike@71.69.170.70)
[18:16:21] *** Joins: igemnace (~ian@user/igemnace)
[18:19:14] *** Joins: kevingal (~quassel@80.233.47.223)
[18:26:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[18:28:33] *** Joins: aeth (~aeth@user/aeth)
[18:39:08] *** Joins: phantomics (~phantomic@71-218-229-123.hlrn.qwest.net)
[18:39:24] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:39:24] *** Quits: amb007 (~a_bakic@198.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[18:40:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:43:25] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:51:40] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:53:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[18:56:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:05:24] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[19:09:35] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:17:36] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 252 seconds)
[19:19:36] *** Joins: psf (~pi@206.55.172.18)
[19:28:23] *** Quits: kevingal (~quassel@80.233.47.223) (Ping timeout: 250 seconds)
[19:44:09] *** Joins: domovod (~domovod@176.196.122.197)
[20:03:19] *** Joins: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1)
[20:08:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:12:25] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[20:13:50] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[20:15:14] *** Joins: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[20:20:34] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:27:47] *** Joins: kevingal (~quassel@80.233.39.223)
[20:34:47] *** Quits: wacki (~wacki@87.123.139.86) (Remote host closed the connection)
[20:38:13] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:42:37] *** Joins: lisp123 (~lisp123@139.168.166.203)
[20:44:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:45:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:46:11] *** Joins: wacki (~wacki@87.123.139.86)
[20:47:01] *** Quits: lisp123 (~lisp123@139.168.166.203) (Ping timeout: 245 seconds)
[20:48:47] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[20:48:54] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[20:49:41] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:52:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:54:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:09:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[21:09:38] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[21:11:24] *** Joins: aeth (~aeth@user/aeth)
[21:19:50] *** Quits: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de) (Quit: Leaving)
[21:20:52] *** Joins: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de)
[21:21:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[21:22:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:24:38] *** Quits: kevingal (~quassel@80.233.39.223) (Ping timeout: 252 seconds)
[21:32:19] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[21:33:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:46:21] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[21:46:32] *** Quits: razetime (~quassel@117.254.34.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:55:19] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:58:55] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:59:28] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[22:11:33] *** Quits: parjanya (~esb@2804:14c:1ad:9351:da4f:f2c4:abd6:1e10) (Ping timeout: 268 seconds)
[22:13:49] *** Quits: rain3 (~rain3___@2a02:2f09:d10e:8f00:b6a6:e366:58c5:59f1) (Ping timeout: 240 seconds)
[22:16:25] *** Joins: treflip (~user@user/treflip)
[22:17:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:19:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:25:44] *** Joins: Guest98 (~Guest98@82.212.116.123)
[22:28:51] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:28:51] <Guest98> Hi everyone, is there a way for me to turn a lambda list that a function returns into a function object that I can call in another function ? :)
[22:32:27] <Bike> what about the code? a function has code, not just a lambda list.
[22:33:22] <Guest98> if my function returns a lambda list, how can I call it as a function
[22:33:59] <beach> Do you mean "lambda expression" rather than "lambda list"?
[22:34:18] <rotateq> Yes I wondered what could be meant by that.
[22:34:19] <Guest98> I guess, I was told it was a lambda list elsewhere, I can show you the error code but where should I post it ?
[22:34:21] <beach> (funcall (compile nil <lambda-expression>) ...)
[22:34:43] <beach> Guest98: The lambda list is just the list of parameters.
[22:34:51] <beach> You can't call a list of parameters.
[22:34:56] <Guest98> OH not thats not what I want
[22:34:59] <Guest98> its an actual lambda expression
[22:35:19] <Guest98> let me try this compile function
[22:35:20] <beach> Then compile it and call the result.
[22:37:00] <beach> Don't hesitate to have a look in the glossary for "lambda list" and "lambda expression".
[22:37:18] <Guest98> Will do
[22:38:00] <Guest98> Seems like it worked but its telling me I have a compilation error, Ill try for a while and get back to you guys if I get stuck again, thanks  :)
[22:38:07] <Guest98> By glossary you mean the cliki ?
[22:38:30] <rotateq> No the hyperspec.
[22:38:52] <Guest98> oooh the CLHS okay thanks
[22:38:58] <rotateq> So the official ANSI specification for Common Lisp.
[22:39:20] <rotateq> http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_l.htm
[22:41:26] <Guest98> yep, I see now, thanks
[22:41:46] <rotateq> good :)
[22:41:53] <Guest98> Its working now btw, thanks everyone
[22:47:04] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:50:23] <rotateq> You mean really working or that it doesn't give warnings or signal errors anymore? :)
[22:50:36] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[22:53:55] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[23:04:32] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[23:04:58] *** Joins: simendsjo (~user@84.211.91.241)
[23:05:09] *** Quits: jack_rabbit (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 256 seconds)
[23:08:24] *** Joins: jack_rabbit (~knusbaum@89.187.180.40)
[23:10:08] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 268 seconds)
[23:14:39] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:29:15] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[23:30:00] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[23:47:55] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Ping timeout: 240 seconds)
[23:48:26] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
