[00:13:12] <wz1000> sooch: there is no logic for indexing right now. What are you doing?
[00:17:41] <eddiemundo> jneira: thanks
[00:17:41] <eddiemundo> yeah there is a new hash for the dependency in the global store, but the `.hie` files are still not in that directory.
[00:17:41] <eddiemundo> Oh so you're saying that as long as the user doesn't mess with their hiefiles directory in the local project then all is good.
[00:20:11] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:31:34] <sooch> @wz1000 ghcide hiedb index path/to/hie/files? that should end up in the same db or am I misinterpreting
[00:31:40] <sooch> as using HLS
[00:31:55] <wz1000> sooch: you should run ghcide from the root directory of your project, the one with the hie.yaml file
[00:32:08] <sooch> correct yes
[01:03:07] <eddiemundo> i figured out at least in my case why a lot of external dependencies weren't giving `.hie` files. i was using a nix flake that installs all the dependencies it reads in the cabal file into a nix store and adds them to the ghc's `package.conf`
[01:04:09] <eddiemundo> i was using a modified version of https://github.com/srid/haskell-template/blob/master/flake.nix
[01:05:19] <eddiemundo> so i guess as a lesson i should just use a barebones nix flake that only gives ghc cabal-install for a dev environment instead of using `pkgs.haskellPackages.developPackage`
[01:07:23] <sooch> if it makes you feel any better I can no longer find the text package on my machine and can't recompile it :)
[01:09:15] <eddiemundo> haha that does not make me feel better cause i'd like you to be able to compile things...
[01:11:17] <eddiemundo> how did that even happen. are you using cabal, cabal and nix, or stack ?
[01:12:59] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:18:42] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:21:41] <jneira[m]> call me old-fashioned but i dont like hashes
[01:21:51] <jneira[m]> they are opaque
[01:25:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:25:54] <eddiemundo> what about unison? whatever hash stuff they got going on there seems like it would make life a lot easier
[01:26:08] <jneira[m]> although they are (almost) perfect to transmit equality, you dont know how the equality was computed gazing at the hash, it is lost, so i would talk about `hash blindness` like we have `boolean blindness`
[01:28:12] <eddiemundo> i guess they hash values individually and that is maybe fine enough that if something changes you mostly know what has changed
[01:28:41] <eddiemundo> but hashing directories is much coarser
[01:29:31] <jneira[m]> well if you have some of the context you can pull the thread
[01:30:07] <jneira[m]> but names, although they are very bad at equality, carry infinite more info
[01:30:55] <eddiemundo> i was talking about https://www.unisonweb.org/ btw which according to their pitch says "We simplify codebase management â€” Unison has no builds, no dependency conflicts, and renaming things is trivial."
[01:31:10] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:32:06] <jneira[m]> so `haskell/text-1.3.5/Data.Text.pack`vs `91b2f2a307ba971ebdb8f44f46992028eca362f0`
[01:32:28] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:32:30] <jneira[m]> you need unison to know the hash points to that function
[01:32:57] <eddiemundo> ah i see so adding metadata to the hashes?
[01:33:27] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[01:33:41] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:33:53] <jneira[m]> i read the unison thing but i dont remember how exactly does it
[01:34:01] <jneira[m]> dhall also has something similar
[01:35:17] <eddiemundo> well yeah i mean i definitely like names over random symbols too if they did the same thing
[01:37:09] <eddiemundo> it just seems like names have trouble guaranteeing 2 things are the same
[01:37:42] <jneira[m]> yah
[01:37:56] <eddiemundo> so i guess having both makes the most sense, a name and hashes, but don't we do that already?
[01:37:56] <jneira[m]> but compute equality is not easy
[01:38:30] <jneira[m]> cabal tries hard to do it with caching deps and it somewhat works
[01:38:45] <jneira[m]> but it recompiles a lot when it could not do it
[01:38:58] <jneira[m]> and worse sometimes it does not recompile when it must do it
[01:38:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:39:43] <jneira[m]> jneira[m]: so you pull the hard work to the tool computing hashes instead the client trying to disambiaguate things
[01:40:26] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:40:43] <eddiemundo> oh ok so you're saying you'd rather have the choice yourself how to define what is new and not, rather than have a tool that should work in all instances but doesn't
[01:40:44] <jneira[m]> s/pull/push/
[01:42:01] <jneira[m]> idk, equality is one the damn root problem of computing
[01:43:16] <jneira[m]> i did my 2 cents, cabal will log how computes the packagehasheswith `-v3` and will tell you wehere is the file used as base to compute it
[01:43:36] <jneira[m]> s/i did my 2 cents, cabal will log how computes the packagehasheswith `-v3` and will tell you wehere is the file used as base to compute it/i did my 2 cents, cabal will log how computes the package hashes with `-v3` and will tell you where is the file used as base to compute it/
[01:43:42] <jneira[m]> in the next release
[01:44:04] <eddiemundo> nice
[01:44:20] <eddiemundo> i feel like i dont have enough experience to comment on the pain of determining equality
[01:44:27] <jneira[m]> so you will not have to go to the source code to know it :-P 
[01:48:01] <eddiemundo> oh so basically you're saying hashes sucked because i had no idea where my packages where coming from?
[01:48:25] <eddiemundo> haha i thought you were talking about some homotopy type theory equality thing and was getting scared
[02:04:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[05:57:03] <sooch> @wz1000 just fyi, when getHieDbLoc is used, it takes the path no matter if it's absolute or relative. In the case of indexing, the default path turns out to be relative (in fact it's the literal '.') which doesn't hash(?) to the same as the project's root. Hence the different indexes mentioned earlier
[07:00:22] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[07:01:49] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[07:49:24] *** shapr` is now known as shapr
[08:47:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[10:10:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[13:03:40] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:04:53] <wz1000> sooch: oh no, sounds like its bitrotted. Fixes would be appreciated
[13:06:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[13:16:01] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:18:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[13:25:49] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:35:44] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[13:36:01] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:36:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[13:36:29] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:46:33] *** Joins: arrowd (~arr@2.94.236.140)
[14:02:51] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[15:14:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 268 seconds)
[17:16:49] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[18:58:24] *** Quits: arrowd (~arr@2.94.236.140) ()
[19:01:44] *** Joins: arrowd (~arr@2.94.236.140)
[19:19:17] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[19:20:42] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[19:25:09] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[21:24:45] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[21:25:00] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[21:47:58] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[22:51:43] *** Joins: kremovtort (~kremovtor@broadband-77-37-212-157.ip.moscow.rt.ru)
[23:19:45] *** Quits: arrowd (~arr@2.94.236.140) ()
[23:35:17] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:56] *** Joins: juhp (~juhp@128.106.188.82)
