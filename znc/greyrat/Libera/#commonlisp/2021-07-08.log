[00:02:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[00:03:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:03:43] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:03:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[00:04:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:12:21] *** Quits: attila_lendvai (~alendvai@1F2E5E48.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[00:13:01] *** Joins: attila_lendvai (~alendvai@1F2E5E48.dsl.pool.telekom.hu)
[00:17:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:21:28] *** Joins: srhm (~ascii@user/srhm)
[00:30:34] <pve> Hey, are the internals of asdf documented somewhere? Or perhaps a tutorial on how to extend it?
[00:37:10] *** Joins: learning-cl (~learning-@2a00:23c8:5a01:7101:8186:8c57:99a3:ac51)
[00:38:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:39:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:40:03] <pranavats> pve: There is a manual. How do you want to extend it?
[00:40:53] <pranavats> There are packages which extend it, such as literate-lisp which also document the extensions. You can take a look at those too.
[00:42:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:42:18] <pve> pranavats: I'm trying to make this work properly: https://github.com/pve1/alphabetical-asdf/blob/main/alphabetical-asdf.lisp
[00:42:31] <pve> it's related to something I asked yesterday
[00:44:34] <pve> I *can* load systems with it, but I need to make it behave like ":serial t" when modifying files
[00:44:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:45:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:46:54] *** Quits: wheelsucker (~user@2600:8801:8c11:4c00::707) (Remote host closed the connection)
[00:46:57] <pranavats> I see.
[00:47:40] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 246 seconds)
[00:49:50] <etimmons> pve: asdf handles :serial t by remembering the previous component and adding it to the :depends-on list for the component currently being processed
[00:50:59] <pve> etimmons: hmm right, I would have expected (make-instance 'module ... :serial t) to work but apparently it doesn't
[00:53:05] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:53:56] <etimmons> yeah, it'd be great if that could work!
[00:54:03] <etimmons> But system parsing is currently a bit of a nightmare
[00:56:08] <pve> etimmons: I had a look at your extension, it looks like it could improve on package-inferred-systems
[00:56:15] <etimmons> You may have luck extending `asdf::compute-component-children` to define your implicit components and then call-next-method
[00:56:28] *** Joins: akoana (~ah@user/akoana)
[00:57:04] <etimmons> Just be warned that's not exported yet. We're planning to export it in ASDF 3.4.0, so it may change before then, but I doubt it
[00:57:23] <etimmons> (and it's only available in 3.3.5)
[00:57:58] <etimmons> Thanks! That's the primary motivation behind it.
[00:58:10] <pve> etimmons: ok, I'm at 3.3.3 currently
[01:00:49] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[01:02:26] *** Quits: IAmRasputin (~ryan.gann@50-207-73-195-static.hfc.comcastbusiness.net) (Ping timeout: 252 seconds)
[01:02:47] *** Joins: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de)
[01:03:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:06:18] *** Parts: learning-cl (~learning-@2a00:23c8:5a01:7101:8186:8c57:99a3:ac51) ()
[01:13:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:19:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:29:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:38:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:54:08] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:02:07] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[02:06:58] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[02:07:41] *** Quits: attila_lendvai (~alendvai@1F2E5E48.dsl.pool.telekom.hu) (Ping timeout: 256 seconds)
[02:12:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:21:32] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[02:23:14] *** Joins: notzmv (~zmv@user/notzmv)
[02:34:58] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[02:38:29] <pve> etimmons: I got the serial thing to work, happy now :)
[02:38:58] *** Joins: selwyn (~selwyn@user/selwyn)
[02:40:22] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[02:45:05] *** Quits: frgo (~frgo@p200300deef27d700d8a3c101e0d6db59.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:45:32] *** Joins: frgo (~frgo@p200300deef27d700fdc26e1516588b5b.dip0.t-ipconnect.de)
[02:48:32] *** Joins: aeth (~aeth@user/aeth)
[03:07:13] *** Quits: pve (~pve@37-33-117-98.bb.dnainternet.fi) (Quit: leaving)
[03:07:46] *** Quits: rgherdt (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:08:55] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[03:13:22] *** Quits: Guest9407 (~tux0r@rosaelefanten.org) (Read error: Connection reset by peer)
[03:13:33] *** Joins: tux0r (~tux0r@rosaelefanten.org)
[03:16:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[03:31:28] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 246 seconds)
[03:32:09] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:32:32] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[03:38:17] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[03:56:58] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:59:56] *** Joins: aeth (~aeth@user/aeth)
[04:13:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[04:49:55] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[04:50:33] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 265 seconds)
[04:50:46] *** Joins: trufas (~trufas@177.240.218.218)
[05:03:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[05:06:49] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[05:11:42] *** Joins: cjb (~cjb@user/cjb)
[05:14:58] *** Joins: derelict (~derelict@user/derelict)
[05:22:29] <Xach> etimmons: do you make uiop releases?
[05:27:55] *** Quits: srhm (~ascii@user/srhm) (Remote host closed the connection)
[05:28:58] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[05:29:00] <etimmons> Xach: No, Robert makes the releases. I've just been helping out with the development a lot recently
[05:36:25] <Xach> Ok
[05:36:48] <Xach> I don't think the latest uiop release works with the latest sbcl for many projects
[05:37:13] <Xach> Maybe this is peculiar to my loading setup
[05:37:27] <Xach> (where a new uiop might be loaded in an old asdf? possibly?)
[05:37:42] <etimmons> That's concerning. Do you have a log?
[05:41:17] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:41:18] <Xach> http://report.quicklisp.org/2021-07-07/failure-report/arrival.html#arrival - this is representative of a number of failures that all seem to fail in fare-utils
[05:41:30] <Xach> http://report.quicklisp.org/2021-07-07/failure-report.html has more, though not exclusive to that issue
[05:42:30] <Xach> failures started happening on july 3
[05:45:08] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:46:06] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:53:23] <etimmons> Huh. It kinda looks like it's using the `uiop:define-package` macro from uiop 3.3.5, but using the function `uiop:ensure-package` (which it expands to) from a previous uiop.
[05:53:34] <etimmons> Not sure how off the top of my head how that can happen...
[05:54:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[05:55:59] <Xach> well, i load asdf 3.3.1 explicitly, because that's what comes with sbcl. but i also download UIOP as a project as well.
[05:58:01] * Xach scratches chin
[05:58:03] <etimmons> Ah.. I have a theory. Do you reuse the fasl cache between builds of different systems?
[05:58:39] <etimmons> I think some system A that depends on fare-utils also declares an explicit dependency on uiop
[05:59:12] <etimmons> So when A was built, that latest uiop was loaded and the fasls for fare-utils include the 3.3.5 define-package expansion
[05:59:40] <Xach> ah, yes, i do reuse it, that seems like a plausible explanation!
[05:59:51] <Xach> and accounts for the fasl-time nature of the failure
[06:00:02] * Xach wonders now how to escape from this problem
[06:00:13] <etimmons> but fare-utils has no explicit dep on uiop and the chain starting from arrival doesn't have an explicit uiop dependncy or asdf schedules it after loading fare-utils
[06:02:50] <etimmons> yeah, that's tricky... uiop is such a useful library, but it's special relationship with asdf can be a pain point
[06:03:33] <etimmons> If you could convince everyone that uses uiop to explicitly declare it as a dep that'd solve it.
[06:03:42] <Xach> Ha! ha! ha!
[06:03:53] <etimmons> =P
[06:04:06] <etimmons> Yeah, I know, definitely not happening
[06:05:01] <etimmons> I wonder what a world would look like where ASDF had a private copy UIOP with different package names.
[06:05:13] <etimmons> and UIOP was still distributed as a separate product
[06:05:22] <etimmons> *system
[06:05:52] <etimmons> you just would have to explicitly declare it instead of assuming asdf would magically load it for you
[06:06:57] <Xach> I think UIOP does more than it needs to to support ASDF - some of it could be add-ons to ASDF, and some of it could be completely separated.
[06:07:28] <Xach> I remember thinking Quicklisp would be sooooo popular I could "fix" stuff in CL because it would be loaded all the time. I'm glad I didn't try doing that.
[06:11:35] *** Joins: notzmv (~zmv@user/notzmv)
[06:14:12] <Xach> etimmons: thanks so much for the troubleshooting. great insight.
[06:16:55] <etimmons> No worries!
[06:17:20] <etimmons> As an only occasional user of Quicklisp, I too am glad you decided against that!
[06:17:42] <etimmons> Dealing with uiop's specialness is already difficult
[06:24:18] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[06:34:15] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[06:35:47] *** Joins: prxq (~quassel@x4dbe047f.dyn.telefonica.de)
[06:36:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 252 seconds)
[06:37:33] *** Quits: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de) (Ping timeout: 258 seconds)
[06:37:46] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 240 seconds)
[06:37:51] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[06:38:22] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 246 seconds)
[06:38:34] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[06:38:52] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[06:39:29] *** Quits: prxq_ (~quassel@dynamic-077-012-054-177.77.12.pool.telefonica.de) (Ping timeout: 252 seconds)
[06:54:28] *** Quits: Fare (~fare@2601:184:4a7f:995c:81a7:1577:8fa7:da46) (Ping timeout: 246 seconds)
[07:15:11] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[07:29:26] <Josh_2> So I just made a list in a defparameter with '((nil nil nil) (nil nil nil) (nil nil nil)) then used (setf (elt (first <my list>) 0) <my val>) and it changed the val of pos 0 in all the lists, whats up with that? Doesn't do it when I use (list ..)
[07:30:25] <beach> Good morning everyone!
[07:30:48] <beach> Josh_2: The compiler coerced all the lists.  They are literals so you are not allowed to modify them.
[07:31:08] <Josh_2> because I used quote?
[07:31:15] <beach> Yes.
[07:31:19] *** Quits: barthandelous (~cbrzezins@2600:1007:b010:5838:b9a1:463:635b:925c) (Quit: barthandelous)
[07:31:22] <Josh_2> Alrighty, thanks
[07:31:28] <beach> s/coerce/coalesce/
[07:32:25] * beach should not speak until after his morning coffee.
[07:35:05] <beach> To elaborate, QUOTE creates a "literal object", and the consequences are undefined if literal objects are modified.
[07:37:55] *** Joins: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net)
[07:38:39] <Josh_2> Makes sense
[07:38:46] <Josh_2> Never thought I'd crash emacs using format of all things
[07:39:45] <Josh_2> I am trying to iterate over a list, if the list item is nil then output a space, otherwise output the item
[07:43:31] <aeth> did you generate a very long line or something?
[07:43:53] <aeth> whatever emacs uses internally for text isn't good with long lines... I haven't gotten crashes, but I have had it hang which is basically like crashing it
[07:44:25] <beach> GNU Emacs is not too bad.  You should have seen Multics Emacs with long lines.
[07:46:16] <Josh_2> I used ~#[ .. ] within a ~{ ~} and I guess it wasn't consuming the argument as it just kept outputting to stdout
[07:59:15] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:07:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[08:10:39] <Josh_2> A lot harder than I thought it would be to conditionally display an element (format t "~{~:[ ~;~:*~A~]~^| ~}~%" row))
[08:11:17] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[08:11:32] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[08:11:53] <Josh_2> now if an element within ROW is non nil it is displayed, otherwise a space is displayed
[08:20:47] *** Parts: Josh_2 (~user@37.25.47.130) (ERC (IRC client for Emacs 27.1))
[08:29:44] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[08:48:17] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[09:11:04] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[09:12:51] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[09:26:18] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[09:35:43] *** Joins: karlosz (~karlosz@router.cloyne.org)
[09:47:35] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:48:19] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[09:49:52] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[09:51:18] <susam> Good morning, everyone!
[09:59:19] <beach> Hello susam.
[09:59:35] <susam> Hello beach!
[10:08:00] *** Joins: notzmv (~zmv@user/notzmv)
[10:12:34] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[10:13:48] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[10:16:00] <susam> Most of the time I realize that my erroneous code is running in an infinite loop only when the computer's fan goes berserk. I don't realize it in SLIME REPL because the REPL prompt always returns successfully without any output. Do you have another way to realize that your code is running in an infinite loop?
[10:16:33] <susam> It takes a while to realize that no output + fan noise => infinite loop. It feels disorienting until that realization.
[10:17:54] <beach> You must be running the code in a separate thread if you get the prompt back.  The solution, then, is to run it in the same thread as the REPL.
[10:17:56] <mfiano> I have stats for cpu and memory utilization visible at all times (on the bottom of my screen, and I'm trained to keep a constant eye on them)
[10:18:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[10:19:22] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:20:33] <susam> beach: I am not doing threads. For example, here is a simple test case to reproduce what I see. Type (loop) in a code buffer. Then C-c C-c to compile it. SLIME-REPL shows "; processing (LOOP)" with the "CL-USER>" prompt below it.
[10:21:04] <mfiano> SLIME has both a repl thread and a compilation thread
[10:21:07] <mfiano> (among others)
[10:21:10] <susam> Now it isn't a new "CL-USER>" prompt. It is the old prompt itself pushed below the "; processing (LOOP)" line.
[10:23:20] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[10:23:31] <susam> So the visual feedback for infinite loop is indistinguishable from that due to correct code.
[10:24:10] <susam> mfiano: Okay. Thanks for the tip. I will set up my environment to show CPU and memory usage too.
[10:24:59] <pillton> susam: Does it happen with (loop (sleep 1) (print "here"))?
[10:25:31] <mfiano> When you C-c C-c, it is compiled on a background thread with results sent to the repl thread.
[10:27:04] <susam> pillton: It happens with your loop too but the "here" output gives a visual feedback that I am in an infinite loop, so no disorientation there. This is what the REPL looks like then: https://plaster.tymoon.eu/view/2543
[10:27:33] <susam> mfiano: Thanks. That makes sense. So that is consistent with what beach said too. The code is compiled in a background thread.
[10:27:33] <mfiano> This is important to realize, because if you have a continuous render/event loop or some such, you will need a thread-safe queue to process class redefinitions.
[10:27:54] <mfiano> or any generic function redefinitions i suppose
[10:28:09] <pillton> susam: I don't understand. C-c C-c compiles the "current toplevel form". It doesn't evaluate it.
[10:28:17] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:29:03] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:31:24] <pillton> susam: Oh wait it does.
[10:31:29] <susam> pillton: What happens if you C-c C-c this in your Lisp buffer: (dotimes (n 10) (print n)). Does it not end up printing 0 1 2 ... 10 in your REPL?
[10:31:39] <susam> pillton: Okay, we are on the same page then.
[10:31:57] <pillton> I got confused by the documentation for C-c C-c.
[10:32:29] <pillton> M-x slime-list-threads RET shows the threads that are running.
[10:32:47] <pillton> If you see a "worker" thread then you know something is running.
[10:33:55] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:34:04] <susam> pillton: Yes, that was a disconcerting for me too when I began learning CL with SLIME. But gradually got used to it. For example, C-c C-c is mapped to slime-compile-defun but it can compile any top-level form.
[10:34:21] <susam> To be fair to the doc, it does spell it out clearly. "The code for the region is executed after compilation. In principle, the command writes the region to a file, compiles that file, and loads the resulting code."
[10:34:34] *** Quits: frgo (~frgo@p200300deef27d700fdc26e1516588b5b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:35:01] <susam> pillton: Thanks for the slime-list-threads. Very useful.
[10:35:22] <susam> I now realize I should ask more of these questions in this channel. Lot to learn. I have been coding like a caveman for so long.
[10:35:50] <pillton> C-h k C-c C-c doesn't say anything about execution.
[10:36:17] <pillton> C-h f slime-compile-defun RET is easier.
[10:37:31] <susam> Interesting, it indeed does not. It probably should, otherwise the behaviour can be confusing. I quoted the documentation from here: https://common-lisp.net/project/slime/doc/html/Compilation.html
[10:51:10] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[10:52:44] *** Joins: shka (~herr@109.231.62.239)
[10:56:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:56:32] *** Joins: amb007 (~a_bakic@249.244.204.77.rev.sfr.net)
[10:58:03] *** Joins: dsk (~dsk@user/dsk)
[11:00:10] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 246 seconds)
[11:00:40] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 272 seconds)
[11:00:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:01:19] *** Joins: scymtym_ (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[11:04:20] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[11:04:29] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[11:11:40] *** Joins: unyu (~pyon@user/pyon)
[11:11:40] *** unyu is now known as isekaijin
[11:12:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[11:16:46] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[11:24:09] *** Joins: treflip (~user@95.79.32.99)
[11:39:18] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[11:39:40] *** Quits: scymtym_ (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Quit: ERC (IRC client for Emacs 28.0.50))
[11:50:59] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[11:52:30] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[11:55:08] *** Quits: amb007 (~a_bakic@249.244.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[11:56:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:56:21] *** Joins: rgherdt (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de)
[11:59:56] *** Joins: makomo (~makomo@user/makomo)
[12:01:19] *** Joins: pve (~pve@176-93-7-215.bb.dnainternet.fi)
[12:04:57] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 258 seconds)
[12:05:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:14:04] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:16:01] <sm2n> mfiano, do you have any examples of that (event loop class redefinitions with a threadsafe queue)?
[12:17:13] <mfiano> That is pretty domain-specific code...I have a few private examples, but spread out across a large project, so not worth sharing
[12:17:34] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[12:18:11] *** Joins: makomo (~makomo@user/makomo)
[12:19:08] <sm2n> hmm alright, it was worth a shot
[12:19:39] <sm2n> could you at least outline how it should work? I didn't know you could queue class redefinitions up
[12:22:30] <sm2n> I'm assuming you specialize MAKE-INSTANCES-OBSOLETE?
[12:22:34] <sm2n> (just looking through the spec)
[12:23:07] <mfiano> Well the issue is, that there is a bit of implementation-specific behavior regarding when and how the generic accessors of a defclass should be recompiled, and since SLIME compiles on a dedicated compilation thread and not your application thread, there could be a slight instance in which the slots are non-existant, or no applicable methods exist. If you require live-redefining classes (or your
[12:23:09] <mfiano> users do), a solution would be to write a macro that expands into a thunk which calls defclass, and call that function in your main thread as you pop items off of your locking queue.
[12:23:27] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[12:23:44] <mfiano> I do this in my game engine. At worst though, if you don't do any of this, you'll just be presented with the debugger for a single frame, in which you can hit the continue restart.
[12:23:58] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[12:24:38] <sm2n> ah, the thunk thing makes sense
[12:24:38] <sm2n> thanks!
[12:24:40] <sm2n> "When the class C is redefined, changes are propagated to its instances and to instances of any of its subclasses. Updating such an instance occurs at an implementation-dependent time, but no later than the next time a slot of that instance is read or written. "
[12:24:42] <sm2n> from the spec seems to indicate you can't do it by messing with the internals
[12:25:53] <mfiano> I think the underlying problem is that when you recompile a defclass, the methods for the generic function accessors are removed, and then re-added.
[12:25:56] <mfiano> And this is not atomic
[12:26:02] <sm2n> which makes sense, since otherwise classes would be inconsistent
[12:26:02] <mfiano> I could be wrong though.
[12:30:13] *** Joins: selwyn (~selwyn@user/selwyn)
[12:31:04] <mfiano> It's a rare bug to encounter, you'd have to be calling a slot accessor fast enough, or lucky enough to hit it at the exact moment during the redefinition between method removal and addition.
[12:31:22] <mfiano> and when you do encounter it, it's non-fatal, as you can just issue the continue restart.
[12:31:37] <mfiano> But annoying and common enough in a game engine that it was worth solving.
[12:36:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:38:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:15] <sm2n> makes sense
[12:47:45] *** Joins: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de)
[12:47:46] *** Quits: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:48:15] *** Joins: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de)
[12:48:16] *** Quits: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:48:25] *** Joins: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de)
[12:49:18] *** Quits: frgo (~frgo@p200300deef181d00dc0a8c5da6e5e719.dip0.t-ipconnect.de) (Client Quit)
[12:53:53] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[12:55:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[12:56:32] <phadthai> multithreaded lisp largely chose what is protected by locks or not and it's also a performance tradeoff, I suspect the above is related and needs an explicit lock
[12:57:01] <phadthai> although I only have minimal context from the above
[12:58:52] <phadthai> and concurrency was not part of the standard; I think that the only fairly agreed thing is that dynamically scoped variables can be used as thread-specific contexts
[13:08:59] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:38] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:890b:5442:7b7f:bd93)
[13:24:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:25:18] *** Joins: amb007 (~a_bakic@243.146.204.77.rev.sfr.net)
[13:27:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 246 seconds)
[13:30:08] *** Quits: amb007 (~a_bakic@243.146.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[13:30:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:31:59] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[13:32:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:32:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:42:15] *** Joins: dsk (~dsk@user/dsk)
[13:46:28] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[13:58:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:01:47] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[14:11:35] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 252 seconds)
[14:20:45] *** Joins: selwyn (~selwyn@user/selwyn)
[14:22:55] *** Joins: lonzo (~lonzo@user/lonzo)
[14:33:19] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:36:33] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:36:54] *** Quits: lonzo (~lonzo@user/lonzo) (Quit: Leaving)
[14:38:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:39:27] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:41:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[14:43:02] *** Joins: Alfr (~Alfr@user/alfr)
[14:44:05] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[14:44:40] *** Joins: amb007 (~a_bakic@119.36.22.93.rev.sfr.net)
[14:50:11] *** Quits: amb007 (~a_bakic@119.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:50:47] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:53:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:53:41] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:59:25] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:10:30] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:13:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[15:19:14] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:28:11] *** Joins: random-nick (~random-ni@87.116.179.235)
[15:38:08] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[15:41:55] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[15:47:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[15:51:56] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:890b:5442:7b7f:bd93) (Remote host closed the connection)
[15:52:42] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[15:52:56] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[15:56:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:00:43] *** Joins: rt (~robin@user/terpri)
[16:01:54] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[16:14:00] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[16:14:12] *** Joins: sander (~sander@user/sander)
[16:24:57] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[16:25:29] *** Joins: attila_lendvai (~alendvai@1f2e5ec7.dsl.pool.telekom.hu)
[16:27:28] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:28:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:29:22] *** Quits: attila_lendvai (~alendvai@1f2e5ec7.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[16:29:58] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.unconfigured.pool.telekom.hu)
[16:36:40] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[16:37:40] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 265 seconds)
[16:38:59] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:39:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:45:53] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:46:03] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:48:36] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[16:49:19] *** Quits: luis (~luis@lisp/luis) (Quit: The Lounge - https://thelounge.chat)
[16:59:12] *** Joins: luis (~luis@lisp/luis)
[16:59:12] *** ChanServ sets mode: +o luis
[17:19:40] *** Quits: jason_m (~user@c-73-72-28-91.hsd1.il.comcast.net) (Remote host closed the connection)
[17:22:10] *** Joins: Bike (~Glossina@71.69.170.70)
[17:22:10] *** ChanServ sets mode: +o Bike
[17:23:06] *** rt is now known as robin
[17:24:44] <jmercouris> (defparameter xyz (lambda () (print "tomatoes are great")))
[17:24:47] <jmercouris> (funcall xyz)
[17:24:55] <jmercouris> (write-to-string xyz)
[17:25:02] <jmercouris> obviously I cannot store XYZ like that
[17:25:22] <jmercouris> is there a way to actually obtain `(lambda () (print "tomatoes are great"))` from xyz?
[17:26:15] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[17:26:36] *** Joins: dsk (~dsk@user/dsk)
[17:26:56] *** Joins: yitzi (~yitzi@2607:fb90:126a:cd24:fa80:f143:7565:1900)
[17:27:11] <jmercouris> I'm pretty sure there is not
[17:27:17] <jmercouris> and it is implementation specific, I just want to verify
[17:29:05] <edgar-rft> there's FDEFINITION, but it's not guarantteed to return human-readable Lisp code
[17:29:10] <pve> jmercouris: function-lambda-expression
[17:29:44] <jmercouris> ah, function-lambda-expression, right
[17:30:18] <jmercouris> b
[17:30:21] <jmercouris> sorry, typo
[17:30:22] *** Quits: prxq (~quassel@x4dbe047f.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:31:29] <Bike> in general the source of a function still isn't going to be enough to serialize it, e.g. for closures
[17:32:24] <jmercouris> 1
[17:32:25] <jmercouris> yes
[17:32:29] <pranavats> function-lambda-expression can return nil as well.
[17:33:23] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[17:38:25] <beach> Luckily.  Or else we would not have any commercial Common Lisp vendors.
[17:43:45] <polygon-op> being able to see the source code of the commercial system doesn't mean that it could be copied (that would depend on the license)
[17:43:59] <polygon-op> wasn't a lot of genera source code navigable in the system?
[17:44:07] <beach> Fair enough.
[17:49:24] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[17:55:46] <jmercouris> is there a way to see who has a reference to something preventing it from being GC'd?
[17:56:17] <beach> That would be something very similar to a GC.
[17:56:22] <jmercouris> we are having this problem: https://github.com/atlas-engineer/nyxt/pull/1606
[17:58:19] <beach> If you track everything, you are pretty much preventing it from being garbage collected, unless you use weak references.
[17:58:28] <Bike> i think sbcl has a thing for this, let me check
[17:59:08] <jmercouris> beach: that is true
[17:59:32] <Bike> sbcl.org is down again... man...
[17:59:41] <polygon-op> alohomora
[17:59:42] <jmercouris> hm, sourceforge right?
[18:00:11] <jmercouris> yeah, it is down for me as well
[18:00:57] <Bike> what the thing i'm recalling does is give you a path from roots to a given object. since the object you're looking for is already alive for some reason, you're not making it any more impossible to collect
[18:02:21] <Bike> here we go, sb-ext:search-roots
[18:02:35] <Bike> "Find roots keeping the targets of [a weak pointer] alive"
[18:04:39] <Bike> sounds useful for finding leaks, but i've never used it myself
[18:05:23] *** Joins: srhm (~ascii@user/srhm)
[18:05:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:06:16] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 272 seconds)
[18:09:02] <jmercouris> AHA!
[18:09:05] <jmercouris> Thank you bicycle
[18:09:52] <_death> (setf (gethash path *data-paths*) path) <- the hash table is weak only on keys.. if the value is path, then it defeats the purpose
[18:11:45] *** Quits: yitzi (~yitzi@2607:fb90:126a:cd24:fa80:f143:7565:1900) (Quit: Leaving)
[18:15:38] *** Joins: ray (~ray@user/re)
[18:26:02] *** Joins: MrVulcan (~MrVulcan@101.175.88.138)
[18:33:50] *** Quits: kami_ (~user@user/kami/x-1692339) (Ping timeout: 252 seconds)
[18:34:08] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[18:38:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[18:40:44] *** Joins: aeth (~aeth@user/aeth)
[18:49:20] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:55:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:00:29] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 268 seconds)
[19:04:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:06:43] *** Joins: rogersm (~rogersm@92.59.121.109)
[19:08:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[19:17:46] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[19:19:18] *** Joins: derelict (~derelict@user/derelict)
[19:20:44] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Quit: No Ping reply in 180 seconds.)
[19:21:58] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[19:24:27] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[19:26:50] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 252 seconds)
[19:28:01] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:28:21] *** Joins: srhm (~ascii@user/srhm)
[19:29:40] *** Joins: montxero (95a78142@ircip1.mibbit.com)
[19:35:21] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[19:35:45] *** Joins: sp41 (~spal@64.253.214.14)
[19:35:53] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[19:36:02] *** Joins: ray (~ray@user/re)
[19:36:18] *** Joins: srhm (~ascii@user/srhm)
[19:41:02] *** Quits: rgherdt (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[19:41:41] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[19:42:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:42:31] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[19:43:05] *** Joins: Josh_2 (~user@37.25.47.130)
[19:43:14] *** Quits: MrVulcan (~MrVulcan@101.175.88.138) (Ping timeout: 252 seconds)
[19:43:30] <Josh_2> Afternoon
[19:45:02] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[19:46:13] <jmercouris> Good afternoon Josh the 2nd
[19:46:45] *** Joins: selwyn (~selwyn@user/selwyn)
[19:53:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:14:24] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:42:49] *** Joins: cammie (~cammie@2001:470:69fc:105::b993)
[20:45:41] <Josh_2> Hey
[20:46:34] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:50:28] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:50:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:51:34] *** Quits: Seok__ (~Seok@49.2.56.251) (Ping timeout: 272 seconds)
[20:52:29] *** Joins: seok (~Seok@49.2.56.251)
[20:54:32] *** Joins: cuz (~user@38.140.58.234)
[20:55:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[20:55:38] *** Joins: amb007 (~a_bakic@119.36.22.93.rev.sfr.net)
[20:58:01] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[20:58:35] *** Joins: cuz (~user@38.140.58.234)
[21:06:12] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:07:49] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[21:11:56] *** Joins: seok- (~Seok@49.2.56.251)
[21:14:10] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[21:14:10] *** Quits: amb007 (~a_bakic@119.36.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[21:14:22] *** Quits: seok (~Seok@49.2.56.251) (Ping timeout: 272 seconds)
[21:14:35] *** Joins: amb007 (~a_bakic@91.199.204.77.rev.sfr.net)
[21:14:50] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[21:14:56] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[21:31:06] *** Quits: seok- (~Seok@49.2.56.251) (Read error: Connection reset by peer)
[21:36:22] <dieggsy> is there a way to copy values from one existing array to another?
[21:36:54] <dieggsy> like assigning all values of one array from another. short of looping
[21:37:21] <Josh_2> copy-seq?
[21:37:38] <_death> replace
[21:38:24] <Bike> you can also use setf subseq, which is basically replace
[21:40:05] <Josh_2> you could also use make-array with :initial-contents
[21:41:53] <dieggsy> huh, replace works it seems. neat
[21:52:19] <cammie> There's also map-into for when you need to apply some function too.
[21:54:33] <cammie> Unless i'm mistaken, (replace s1 s2) is like (map-into s1 #'identity s2)
[21:54:54] <Bike> that's roughly correct. might be some weirdness about fill pointers in some crap
[21:54:59] <Bike> or some*
[21:55:17] <Bike> and replace also lets you specify subsequences to work on
[21:57:08] <cammie> And there may also be some weirdness when s1 is EQ to s2
[21:59:20] <jcowan> Indeed, in mainframe days (when clanking iron dinosaurs ruled the Earth), most customers got source under NDA, because they expected to customize it.
[22:00:38] *** Quits: amb007 (~a_bakic@91.199.204.77.rev.sfr.net) (Ping timeout: 255 seconds)
[22:01:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:06:29] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 255 seconds)
[22:07:04] <Bike> replace behaves normally if the source and destination are the same sequence, though not if array displacement causes sharing
[22:07:15] <Bike> with map-into it doesn't matter of course
[22:14:42] <dieggsy> ah wait it looks like replace doesnt work for 2d arrays?
[22:14:55] <Bike> yeah, it only works on sequences.
[22:15:18] <dieggsy> hmm. is there a simple equivalent for 2d?
[22:15:29] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[22:15:47] <jcowan> surely CL has a proper array module in Quicklisp
[22:16:10] <dieggsy> assuming standard though :)
[22:16:22] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.unconfigured.pool.telekom.hu) (Ping timeout: 246 seconds)
[22:16:31] <Bike> there's no general array copy in the standard, i don't think
[22:16:44] <Bike> there are some array libraries, but i've never personally needed them, so i can't tell you much there
[22:17:56] <aeth> most array libraries are going to be restricted to popular uses of arrays, such as FFI and/or graphics/lin-algebra
[22:18:05] <aeth> specific is going to mean faster, but less general
[22:18:28] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[22:19:59] <jcowan> My first attempt to define an array library for Scheme (with arrays implemented on top of vectors, which are primitive) followed CL closely.
[22:20:28] <_death> if it's a single row or so, you could use displaced arrays.. Lisp Machine Lisp also had conformal arrays
[22:20:54] <jcowan> Then along came Brad Lucier, a *real* array user, who said "No, no, that's all wrong!" and designed a really compelling library, with things like read-only arrays, a bunch of composable affine transfomers (a long chain runs just as fast as a single transformerP, lazy mapping, etc. etc.
[22:21:52] <jcowan> you can also provide an arbitrary getter (and optionally a setter) and get an array defined by them plus the shape, so it can do anything you want.
[22:21:52] <dieggsy> jcowan heck yeah i love his array library, i posted it to chicken. unfortunately i haven't schemed in a couple months cause my job is taking all of my brain energy
[22:22:21] <jcowan> dieggsy: "Never let your sense of morals prevent you from doing what is right!"
[22:23:16] <dieggsy>  not sure I follow heh
[22:23:38] <_death> http://turtleware.eu/posts/Conformal-array-displacement.html
[22:24:07] <Josh_2> Does the :type key in defclass mean that every time I set the value of that slot it gets type checked again?
[22:25:59] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:29:46] <shka> Josh_2: it is not guaranteed to be type checked at all!
[22:29:51] <Josh_2> I was thinking that
[22:30:00] <Josh_2> Pretty sure the type is just for the programmer
[22:30:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:30:06] <Josh_2> meh whatever
[22:30:10] <shka> and for the compiler, at times
[22:30:29] <shka> what i do is to set BEFORE method with check-type
[22:32:26] *** Quits: ray (~ray@user/re) (Ping timeout: 265 seconds)
[22:32:53] <shka> i am a broken record at this point... but check-type is your friend ;-)
[22:33:19] *** Joins: ray (~ray@user/re)
[22:33:21] <Josh_2> yes
[22:35:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:36:51] *** Joins: cuz (~user@38.140.58.234)
[22:38:43] <Josh_2> Can I specialize no-applicable-method for a setf?
[22:39:39] <Bike> sure.
[22:39:53] <Bike> assuming you mean, for a generic function named (setf something)
[22:40:23] *** Joins: notzmv (~zmv@user/notzmv)
[22:40:58] <shka> but arguably, you should reconsider doing this
[22:41:16] <shka> honestly, you can do almost anything in CLOS
[22:41:24] <shka> does not mean that you should
[22:41:53] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 256 seconds)
[22:43:30] <Josh_2> Bike: yes thats what I mean
[22:57:58] *** Joins: cuz (~user@38.140.58.234)
[22:58:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[23:01:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:03:54] *** Quits: montxero (95a78142@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[23:23:17] *** Joins: dsk (~dsk@user/dsk)
[23:27:38] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 252 seconds)
[23:45:14] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[23:49:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[23:51:50] <Josh_2> Okay before I make an issue on github I was wondering if anyone could spot the problem I am having with postmodern
[23:53:06] <Josh_2> here is my code https://plaster.tymoon.eu/view/2544#2544 basically when I run (find-user ...) in my repl I get a user returned, however when it is being called from a http request find-user is completely stalling, I tried pomo:query with the :dao key and it happens, but when I remove the :dao key I get a response
[23:54:35] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:54:49] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:56:27] <Josh_2> If I just use a toplevel connection with postmodern the call to (find-user ..) gets completely stuck and I have to restart my image
[23:58:31] <Josh_2> but find-user works perfectly with the exact same arguments when called in my repl :(
[23:59:02] <shka> i use postmodern exclusively with with-connection
