[00:02:40] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[00:08:57] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[00:22:56] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[00:35:52] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[00:36:00] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[00:36:20] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[00:38:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:40:16] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:51] *** Quits: aliosablack (~chomwitt@athedsl-351887.home.otenet.gr) (Ping timeout: 265 seconds)
[00:48:41] *** Quits: shariashaman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[00:50:22] *** Joins: shariashaman (~Rheanna@218.78.77.129)
[00:51:41] *** Quits: Elzington (~Elzington@89.38.227.231) (Quit: Leaving)
[01:07:10] *** Joins: zro (~zro@user/zro)
[01:08:27] *** Joins: jan_Elon (~elon@user/elon-satoshi/x-4242282)
[01:12:38] *** Quits: zro (~zro@user/zro) (Ping timeout: 252 seconds)
[01:24:25] *** Quits: synaps3 (~void@user/synaps3) (Read error: Connection reset by peer)
[01:26:33] *** Quits: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru) (Read error: Connection reset by peer)
[01:38:51] *** Quits: shariashaman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[01:39:02] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[01:40:19] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[01:44:49] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 265 seconds)
[02:05:14] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[02:14:23] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:23:29] *** Quits: terminaldweller (~devi@ip137.ip-145-239-165.eu) (Ping timeout: 265 seconds)
[02:25:40] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Remote host closed the connection)
[02:26:17] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3)
[02:28:42] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[02:28:51] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[02:30:40] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[02:30:49] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[02:31:50] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Ping timeout: 260 seconds)
[02:32:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[02:33:51] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[02:33:54] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[02:36:10] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Ping timeout: 252 seconds)
[02:37:45] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[02:41:35] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[02:50:33] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[02:52:05] *** Joins: Wulf (~Wulf@user/wulf)
[02:59:26] *** Joins: nanook (~nanook@137.184.134.238)
[03:02:29] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 246 seconds)
[03:11:32] *** Quits: piku (~piku@47.202.122.99) (Quit: Leaving)
[03:16:50] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3)
[03:19:16] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Remote host closed the connection)
[03:20:14] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[03:33:26] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Ping timeout: 260 seconds)
[03:42:50] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:45:32] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:46:38] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[03:54:46] *** Quits: jan_Elon (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 252 seconds)
[04:08:43] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[04:08:49] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[04:09:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[04:11:18] *** Joins: jan_Elon (~elon@user/elon-satoshi/x-4242282)
[04:11:33] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[04:13:28] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[04:31:32] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[04:37:40] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 252 seconds)
[04:44:20] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[04:45:27] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[04:58:36] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[05:01:19] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[05:04:53] *** Quits: fltrz (~fltrz@94.105.111.180.dyn.edpnet.net) (Ping timeout: 264 seconds)
[05:08:33] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[05:20:56] *** Joins: fltrz (~fltrz@109.236.138.219)
[05:27:39] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3)
[05:31:54] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:33:16] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Ping timeout: 252 seconds)
[05:34:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:44:18] *** Joins: Everything (~Everythin@37.115.210.35)
[05:49:10] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[05:50:44] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[06:05:12] *** Joins: river (~river@tilde.team/user/river)
[06:05:18] *** Quits: riv (~river@tilde.team/user/river) (Remote host closed the connection)
[06:09:20] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[06:09:41] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[06:15:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:16:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:20:23] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[06:20:42] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[06:25:42] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[06:30:07] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[06:31:51] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[06:43:49] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[06:47:32] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[06:59:28] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[07:04:32] *** Quits: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net) ()
[07:20:43] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:28:41] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[07:30:41] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[07:31:11] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[07:32:23] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[07:46:45] *** Joins: as2334 (~as2334@host211.181-14-153.telecom.net.ar)
[07:57:00] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3)
[08:04:34] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Ping timeout: 260 seconds)
[08:05:12] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[08:19:17] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[08:19:17] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[08:21:18] *** Joins: shariashaman (~Rheanna@218.78.77.129)
[08:27:48] <snappy> what are people's thoughts on TLAs being able to track users on TOR? I have a friend who believes this is the case
[08:29:23] <snappy> My understanding is they need to exploit external factors such as TOR users using javascript and poison services to reveal your identity.
[08:40:54] *** Joins: lampilelo (~user@user/lampilelo)
[08:46:32] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 246 seconds)
[08:49:57] *** Joins: aliosablack (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374)
[08:55:38] *** Quits: aliosablack (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374) (Quit: Leaving)
[08:55:53] *** Joins: aliosablack (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374)
[08:56:22] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[08:56:38] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[08:56:47] *** Quits: aliosablack (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374) (Client Quit)
[09:19:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:21:39] *** Joins: chomwitt (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374)
[09:23:07] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:38:08] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:40:43] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:43:25] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:44:48] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[09:45:44] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[10:08:26] *** Joins: vernaz (~vernaz@148.63.127.167)
[10:17:37] *** Quits: chomwitt (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[10:20:40] <as2334> snappy tor is rather flawed and its authors admit it.
[10:21:36] <snappy> sure, but its security is not completely violated
[10:21:53] <as2334> snappy https://www.freehaven.net/anonbib/
[10:22:14] <as2334> there are more than a few papers discussing attacks against tor
[10:22:24] <as2334> few papers +there
[10:22:43] <as2334> for instance "Users Get Routed: Traffic Correlation on Tor by Realistic Adversaries" 
[10:23:43] <as2334> "Website Fingerprinting at Internet Scale" 
[10:26:28] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[10:27:52] *** Parts: lampilelo (~user@user/lampilelo) (ERC (IRC client for Emacs 27.2))
[10:29:13] <as2334> snappy, also the idea that the US governmetn is going to sabotage its own criminal surveillance programs is a bit naive.
[10:29:57] <as2334> so, it's not really suprprising that tor doesn't protect people from the governmetn that created and funds tor
[10:33:38] *** Quits: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[10:34:19] *** Joins: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[10:39:04] *** Joins: chomwitt (~chomwitt@2a02:587:dc0a:5800:12c3:7bff:fe6d:d374)
[10:43:58] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Ping timeout: 252 seconds)
[10:48:42] *** Quits: shariashaman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[10:50:41] *** Quits: jan_Elon (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 252 seconds)
[10:51:03] *** Joins: shariashaman (~Rheanna@101.91.180.110)
[10:57:26] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[11:08:20] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[11:13:34] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[11:18:27] *** Joins: frost (~frost@59.71.244.36)
[11:20:24] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[11:24:16] *** Quits: as2334 (~as2334@host211.181-14-153.telecom.net.ar) (Remote host closed the connection)
[11:35:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:43] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:37:07] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[11:38:41] *** Quits: shariashaman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:01] *** Joins: shariashaman (~Rheanna@218.78.77.129)
[11:48:19] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:48:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:49:53] *** Joins: X-Scale` (~ARM@31.22.200.105)
[11:50:26] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[11:51:19] *** Joins: vernaz (~vernaz@148.63.127.167)
[11:51:34] *** X-Scale` is now known as X-Scale
[11:52:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:56:14] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 265 seconds)
[11:58:16] *** Joins: vernaz (~vernaz@148.63.127.167)
[12:21:45] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[12:28:51] *** Quits: shariashaman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[12:30:34] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[12:34:13] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:34:32] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[12:36:43] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:37:02] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[13:11:13] *** Joins: experience (~experienc@lfbn-dij-1-741-181.w90-100.abo.wanadoo.fr)
[13:13:09] <experience> Hi everyone, I don't have a cryptography background but I'm trying to figure out whether a particular cryptographic scheme is implementable practically. It's called Witness Encryption. Here's the seminal paper on the topic: https://eprint.iacr.org/2013/258.pdf which seems to say it couldn't be practically implemented yet, and here are two papers
[13:13:09] <experience> published 2 years later that seem to hint at practical implementations: https://eprint.iacr.org/2013/258.pdf and https://eprint.iacr.org/2015/1073.pdf
[13:13:26] <experience> Would anyone be available to help me navigate this and figure out whether I could use it for a particular application I have in mind?
[13:18:04] <maroon> i dont have an answer, but i assume youve seen this? https://crypto.stackexchange.com/questions/26405/what-is-witness-encryption
[13:19:57] <maroon> so your goal is to prevent decryption until a magic time in the future?
[13:25:14] <experience> @maroon I've seen this post yes unfortunately it doesn't seem to provide a clear answer as to whether what I'd like to do (which I'll detail below) is currently feasible
[13:25:14] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 252 seconds)
[13:25:55] <experience> Assume there is an open-source, public/private key based peer-to-peer game where players are identified by their public keys. These players can own items, are able to prove that their public keys are in ownership of that item by crafting a special kind of cryptographic proof of ownership with their public key. This world contains some treasures
[13:25:56] <experience> which are present in the game files as witness encrypted files. No one except the creator of the game knows what they contain, and a "treasure key" object is needed to open them. In this context, what I would like to do is make it so that only players who can prove that they own the "treasure key" would be able to decipher the treasure. In
[13:25:56] <experience> particular, in my case, the content of the treasure would be a simple string of characters, with the deciphered text being a couple of kB at most.
[13:27:45] <experience> So I'm not looking for the extreme version of NP-complete version of witness encryption where someone might encrypt a message that can only be decrypted by people who hold the solution to an arbitrary abstract problem like tdescribed in these lecture notes: https://people.eecs.berkeley.edu/~sanjamg/classes/cs276-fall14/scribe/lec18.pdf, the problem
[13:27:46] <experience> would just be "prove that you own a certain item"
[13:28:21] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[13:28:52] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[13:29:05] <maroon> how about proving you own a private key by being able to use it to sign things which everyone can verify using the matching public key
[13:30:11] <experience> well the idea is that there is an encrypted file somewhere that anyone could decrypt as long as they can prove ownership of some item whose metadata is completely public 
[13:31:04] <experience> so I believe you can't use any traditional encryption, because you don't know in advance who will "own" that item, it could owned by any key pair in the future and even switch hands
[13:31:45] <yawkat> if your author knows the witness too, you could just encrypt the message with some symmetric key derived from it.
[13:32:15] <experience> hmmm, could you elaborate on that?
[13:32:43] <maroon> how does it switch hands? player A takes away from player B, or the game-master does it?
[13:33:22] <experience> the "treasure key" is an in game item that may be exchanged between players yes 
[13:33:49] <experience> think of it a bit like a peer to peer cash system conceptually, except you replace the cash with in game items
[13:33:57] <yawkat> im not sure witness encryption is actually what you want, from your description.
[13:34:32] <experience> in such peer to peer cash systems, peers are able to cryptographically prove that they own a certain amount of cash and transfer it, just like in my game idea they would be able to cryptographically prove ownership of a certain item and transfer it
[13:35:18] <experience> and the idea is that there would be a cipher going around (outside of that system, availble on torrents or whatever) that can only be decrypted by people who can prove ownership of that iteam
[13:35:24] <experience> hope that makes it clearer
[13:35:52] <maroon> have a game oracle that everyone can read, but only the current owner can write to it in order to transfer it to someone else
[13:36:10] <yawkat> experience: and how would you implement that with witness encryption?
[13:36:31] <maroon> you need a way to prevent double-sell
[13:36:32] <iz> experience: the problem is, how do you prevent users from sharing thier witness info?
[13:37:08] <iz> experience: let's say as a player, i get the best magic sword or whatever.. super hard to get..  and i just post my witness code on a forum somewhere
[13:37:22] <iz> so anyone else can just use the code to start w/ those "best" items
[13:37:50] <yawkat> and if you transfer the sword, whats stopping the seller from keeping a copy of the witness
[13:38:02] <iz> yeah, basically what maroon said right before i started typing
[13:41:04] <maroon> with a game oracle tracking ownershipo, someone posting the code on a forum would be donating it to the 1st person who claims it as their own
[13:41:48] <yawkat> how does that work? how do users need the cooperation of the oracle to use their witness to decrypt?
[13:41:56] <iz> but if that's how it works, it's a long way around to just do the same thing as having a non-crypto server that issues items like normal
[13:42:08] <maroon> or, have the oracle ignore ownership by someone who didn't acquire it through the oracle
[13:42:47] <iz> it would be like a game where instead of just being given items in game, you need to download torrents outside of the game and import them
[13:42:51] <maroon> maybe he's trying to have a distributed game that's not controlled by a game-master
[13:43:03] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Ping timeout: 265 seconds)
[13:43:13] <iz> well, he would be re-adding in a game-master w/ that game oracle
[13:45:36] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[13:50:29] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca)
[14:05:17] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 265 seconds)
[14:08:18] *** Joins: andreasbuhr (~quassel@p549db43d.dip0.t-ipconnect.de)
[14:08:18] *** Quits: andreasbuhr (~quassel@p549db43d.dip0.t-ipconnect.de) (Client Quit)
[14:08:42] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[14:10:28] *** Joins: shariashaman (~Rheanna@218.78.77.129)
[14:19:04] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca) (Ping timeout: 252 seconds)
[14:20:47] *** Joins: llorllale (~llorllale@97.108.193.189)
[14:28:53] <experience> Sorry I was away for a bit 
[14:30:04] <experience> @maroon Indeed I'd like to have a fully distributed setup with no game master, also note that the game is an example to illustrate the cryptographic scheme I have in mind I think it's a good basis to have the conversation going 
[14:35:13] <experience> @yawkat "whats stopping the seller from keeping a copy of the witness" once a particular key has decrypted the ciphertext by proving ownership of the item that allows it, they obviously know the content of the file forever, but maybe the file can also be decrypted by proving ownership of another item. The idea is just that I want to make decryption
[14:35:13] <experience> of a ciphertext conditional on owning an item that may switch hands, from there, there may or may not be useful applications
[14:38:54] <yawkat> So why not just make it symmetric encryption
[14:39:11] <yawkat> The key can change hands, everyone who has it can decrypt, done
[14:40:40] <experience> if everything was distributed / peer to peer, the key would just be public and anyone could inspect the distributed database to get that key and decrypt the file 
[14:40:56] <experience> oops didn't mean to tag this person sorry, it just did automatically
[14:41:40] *** Quits: duck[m] (~duck@2001:470:69fc:105::ca77) (Quit: Reconnecting)
[14:41:53] *** Joins: duck[m] (~duck@2001:470:69fc:105::ca77)
[14:42:19] <yawkat> Sounds fixable. Make the users enchange the symmetric key using asymmetric crypto
[14:43:22] <experience> I'll have to look into that
[14:44:13] <experience> still interested to know if either of these two last papers describe a practical witness encryption scheme though, even independent of this conversation this scheme seems pretty awesome, so if you have some insight on said papers, let me know :] 
[14:50:47] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[14:58:37] *** Joins: lxlldr (~I@a89-152-175-20.cpe.netcabo.pt)
[14:58:45] *** Quits: shariashaman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[15:00:01] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[15:04:07] *** Quits: yggdrasil (~yggdrasil@67-0-12-61.albq.qwest.net) (Ping timeout: 252 seconds)
[15:05:32] *** Joins: yggdrasil (~yggdrasil@67-0-90-160.albq.qwest.net)
[15:07:31] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[15:09:36] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[15:10:47] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[15:16:13] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:17:26] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[15:30:31] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[15:35:22] *** Joins: andreasbuhr (~quassel@p549db43d.dip0.t-ipconnect.de)
[15:35:22] *** Quits: andreasbuhr (~quassel@p549db43d.dip0.t-ipconnect.de) (Client Quit)
[15:54:12] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[15:54:57] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[15:57:11] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:01:03] *** Joins: dez (uid92154@user/dez)
[16:05:31] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[16:21:35] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[16:22:01] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[16:28:20] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3)
[16:32:13] *** Quits: lxlldr (~I@a89-152-175-20.cpe.netcabo.pt) (Ping timeout: 265 seconds)
[16:34:56] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[16:36:06] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[16:39:07] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[16:39:07] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:42:08] *** Quits: llorllale (~llorllale@97.108.193.189) (Ping timeout: 252 seconds)
[16:43:31] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[16:43:34] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[16:43:45] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e9f3:aca7:2a37:98e3) (Quit: Leaving...)
[16:45:04] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[16:45:13] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[16:45:35] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[16:46:06] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[16:48:41] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[16:49:03] *** Joins: jan_Elon (~elon@user/elon-satoshi/x-4242282)
[16:49:51] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[16:55:54] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 265 seconds)
[17:06:58] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[17:08:52] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[17:11:39] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[17:12:25] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:18:21] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[17:21:11] *** Joins: Gravis (~gravis@user/gravis)
[17:28:53] <Alipha> Run the game on a blockchain?
[17:29:34] <int-e> ...I was interested for 5 words of that sentence... what a letdown
[17:30:05] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[17:31:12] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[17:32:38] *** Joins: shitfister (~sid83813@188.165.238.76)
[17:35:03] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[17:35:51] <experience> @alipha That doesn't work specifically because a blockchain is a public ledger. So players wouldn't be able to exchange a "treasure key" item that would content the necessary information to decrypt a cipher, because then that information would be publicly available for anyone to see.
[17:36:40] <int-e> so do DH-over-<censored>
[17:37:17] <Alipha> The public ledger could just be used for tracking who currently has the item, but the treasure key would be exchanged out of band?
[17:43:08] <experience> @Alipha Well if you'd like we can keep using your blockchain example. Indeed the blockchain is an example of a peer-to-peer system where I could keep track of who owns the item (the treasure key that is needed to decrypt the file). It also allows one to prove that they are the owner of an item on that public ledger. Now the problem is, how could we
[17:43:09] <experience> make it so that only someone who can produce such proof could decrypt an out of band text file?
[17:43:18] <experience> It seems to me that this problem is solved by Witness Encryption
[17:43:40] <experience> at least theoretically, and the question is, is there a practical algorithm for it yet
[17:44:00] <shitfister> no cryptocurrency talk in #crypto 
[17:44:10] <shitfister> take it to ##altcoins please guys
[17:45:43] <experience> @shitfister This is not cryptocurrency talk, scroll up the conversation 
[17:45:49] <experience> This is specifically about witness encryption
[17:45:54] <experience> https://eprint.iacr.org/2013/258.pdf
[17:45:59] <experience> I do not wish to discuss cryptocurrencies 
[17:46:34] <yawkat> again, i dont see how witness encryption can be used, here
[17:47:34] <yawkat> what is the statement for encryption? what is the witness for decryption?
[17:49:06] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:49:16] <experience> @yawkat Using vocabulary from this abstract: https://eprint.iacr.org/2015/1073.pdf, "problem" here would be "provide a proof that you own a certain item", and the "solution" would be the proof 
[17:49:38] <yawkat> "provide a proof that you own a certain item" does not seem like an NP statement
[17:51:04] <int-e> . o O ( I own the Brooklyn Bridge, here's my NFT. Don't tell me that John Cleese already did that, he's a fraud. )
[17:52:40] <experience> @yawkat I believe that NP Witness Encryption is just the holy grail that these researchers are working towards, but one could imagine WE encoded with any statement 
[17:53:08] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[17:53:09] <experience> anyway I tried contacting the authors of these papers, will update here if I find out more about this scheme and whether it's applicable here
[17:53:25] <yawkat> you want witness encryption for languages *outside* NP?
[17:53:27] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[17:53:50] <experience> this is what the latest I linked seem to hint at 
[17:53:58] <experience> latest paper*
[17:54:05] <yawkat> languages outside NP are actually a myth made up by Big Complexity
[17:54:32] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[17:54:45] <yawkat> experience: no, the paper is *subsets* of NP.
[17:54:58] <iz> made up by Big Oh
[17:55:02] <yawkat> if your problem isnt in NP, that paper won't help
[17:55:21] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[17:55:22] <yawkat> iz: fuck, thats much better than my joke.
[17:55:50] <iz> yours was good too though and parallels what it's trying to lampoon more clearly
[17:56:30] <experience> Right. I have no idea whether my problem can be formulated in NP, I figured it might, otherwise I have no idea how to do this. Thanks for all the insight!
[17:56:36] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[17:58:28] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685) (Remote host closed the connection)
[17:59:43] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[18:02:54] *** Quits: experience (~experienc@lfbn-dij-1-741-181.w90-100.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:04:31] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Ping timeout: 252 seconds)
[18:05:27] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[18:07:04] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[18:09:24] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[18:09:43] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[18:11:50] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:15] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:13:57] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[18:14:28] *** Quits: aczid (~aczid@tuig.nikhef.nl) (Ping timeout: 252 seconds)
[18:14:59] *** Joins: aczid (~aczid@tuig.nikhef.nl)
[18:15:49] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[18:18:47] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[18:21:01] *** Joins: shariashaman (~Rheanna@101.91.232.94)
[18:22:41] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:22:55] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[18:27:39] *** Joins: rtypo (~alex@user/rtypo)
[18:33:43] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 252 seconds)
[18:33:43] *** Quits: aizen (sid462968@id-462968.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[18:33:43] *** Quits: beard (sid110468@user/beard) (Ping timeout: 252 seconds)
[18:33:47] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 245 seconds)
[18:33:54] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[18:34:12] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (Ping timeout: 245 seconds)
[18:34:17] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[18:34:18] *** Quits: mats1 (sid23029@id-23029.tinside.irccloud.com) (Ping timeout: 268 seconds)
[18:34:31] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[18:34:35] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[18:34:56] *** Joins: beard (sid110468@user/beard)
[18:35:06] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[18:35:14] *** Joins: mats1 (sid23029@id-23029.tinside.irccloud.com)
[18:35:18] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[18:35:31] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[18:35:38] *** Joins: pdg (sid395042@id-395042.lymington.irccloud.com)
[18:36:30] *** Joins: bw (sid2730@user/betawaffle)
[18:36:31] *** Joins: aizen (sid462968@id-462968.ilkley.irccloud.com)
[18:42:43] *** Quits: jan_Elon (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 265 seconds)
[19:04:58] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[19:08:42] *** Quits: shariashaman (~Rheanna@101.91.232.94) (Remote host closed the connection)
[19:09:56] *** Joins: tsircon (~tsircon@host-87-16-107-81.retail.telecomitalia.it)
[19:10:01] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[19:10:05] <tsircon> hi
[19:10:31] *** Joins: vernaz (~vernaz@148.63.127.167)
[19:14:11] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[19:15:02] <tsircon> is there a schema to search for a p in a list of P's having the Hash(p+s) and s ?
[19:15:02] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 252 seconds)
[19:15:55] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[19:16:05] <ms7821> if hash is a strong crytographic one, that would be bad
[19:16:37] <iz> can't you just try to hash each p+s?
[19:16:42] <tsircon> the p is shared between the 2 ends, the problem is that the p cannot be sent in plaintext
[19:16:55] <tsircon> s is unique per p, so hard to do for each p's
[19:16:59] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[19:17:12] <iz> but you have the s of each p?
[19:17:26] <tsircon> s is shared between the 2 ends, yes
[19:17:30] <maroon> if length of p >= hash's underlying block length, then for sha1 and sha2 it simplifies to hash(s) with different initial constant and altered padding
[19:17:37] <ms7821> I think this is an XY problem again
[19:17:55] <ms7821> are you trying to share a secret over an insecure medium, or agree on a shared value?
[19:18:10] <tsircon> agree on a shared value, without sharing it in plaintext
[19:18:35] <ms7821> DHKE is probably your friend then, rather than inventing a hash-based scheme
[19:18:57] <tsircon> uhm..
[19:19:18] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[19:19:39] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[19:19:52] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[19:20:35] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685) (Ping timeout: 250 seconds)
[19:20:50] <Alipha> (diffie hellman key exchange)
[19:21:11] <tsircon> I have a list of strings, those strings are known by both ends, end X at some point sends those strings to Y end, the Y (that has more strings than X ) needs to check what are the strings sent my X, the constraint is that X cannot share the strings directly
[19:21:34] <ms7821> oh is this an authentication system of some sort?
[19:21:40] <tsircon> s/my/by/
[19:21:46] <tsircon> no, it is not
[19:22:05] <maroon> do you need to defend against adversary altering the strings or the verification?
[19:22:38] <tsircon> there are non-tech reason that X cannot send the strings in plaintext :D
[19:22:44] <maroon> or just ensure the string is received, and is not received garbled
[19:23:13] <tsircon> X needs to tell Y what strings it has, without telling what strings it has
[19:23:41] <maroon> like cheating at playing cards?
[19:24:02] <tsircon> yeah, sort of
[19:25:36] <maroon> so you'd send sha1(jack of diamonds etc) and the receiver needs to brute-force test the hashes of all 52*51*50*49*48 possible hands?
[19:25:40] <tsircon> it is a good metaphor, I didn't think about that 
[19:25:40] <ms7821> this sounds like maybe private set intersection of some sort. Is either side more trusted than the other?
[19:26:08] <int-e> Is this https://en.wikipedia.org/wiki/Zero-knowledge_password_proof territory?
[19:26:21] <tsircon> maroon, an easy way is to use a static salt for each string, but it makes the salt guess easy to break
[19:26:39] <int-e> private set intersection... makes sense
[19:26:49] <Alipha> Can the one end just encrypt its list with the other end's public key?
[19:27:12] <ms7821> tsircon, we really need to know the constraints, because right now there's a bunch of things that might suffice but it's hard to tell
[19:27:14] <int-e> presumably you don't want to divulge the secrets to parties that don't have it
[19:27:35] <int-e> tsircon: you don't happen to be the same user as 'experience' earlier, do you
[19:27:39] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[19:27:40] <tsircon> ms7821, the only constraint is to not send the strings from X to Y in cleartext
[19:27:47] <ms7821> tsircon, so just use TLS?
[19:28:01] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[19:28:07] <parazyd> tsircon: ZK proofs
[19:28:09] <tsircon> cleartext not in terms of transport
[19:28:26] <ms7821> OK, so by cleartext, you mean X cannot let Y know the full values of the strings?
[19:28:35] <tsircon> int-e, they are 2 different ends, they just trust each other, but 2 different entities
[19:28:37] <ms7821> so really this is some form of ZK protocol
[19:29:12] <iz> man, i miss when directTV was hackable
[19:29:13] <tsircon> it looks like, I need to read more about that
[19:29:18] <ms7821> if they trust each other, why is TLS not enough?
[19:29:21] <maroon> so if Y sends hash(what i have), then X compares that against hash(what i have too)
[19:29:56] <tsircon> ms7821, the constraint is not tech, both side know the plaintext' strings, but X cannot send them not hashed or encrypted
[19:30:19] <int-e> if both sides know the strings then what is there to do for the protocol
[19:30:30] <tsircon> maroon, yes, but if a leak happen on one of the side, the strings are easy to crack with hash only (without salt)
[19:30:31] <ms7821> it really sounds like a false constraint to me
[19:31:14] <maroon> so both sides trust each other, but you must prevent Eavesdropper from seeing the verify?
[19:31:22] <int-e> How deep in the Y are we on the XY problem spectrum :P
[19:31:39] <tsircon> int-e, because Y receives strings from more ends, so they just need to associate the strings received from X to X
[19:31:53] <int-e> tsircon: so you don't know what an XY problem is.
[19:32:02] <tsircon> nope, reading about that :D
[19:32:37] <maroon> then X sends hash(sender pubkey)|hash-of-string
[19:32:51] <tsircon> int-e, oh lol
[19:33:50] <tsircon> maroon, how Y can match this with the cleartext string?
[19:34:33] <maroon> i thought you said X and Y were just wanting to verify that they had the same thing, not trying to determine the unknown string the other side has
[19:35:16] <tsircon> what I need is that Y can verify if string is in its list
[19:35:18] <ms7821> are you also trying to prevent X from maliciosuly guessing full strings?
[19:35:37] <maroon> the hash(sender pubkey) identifiers that this is X1 and not X2, and they calc hash(strings i got from x) to see if that matches the hash-of-string sent by X
[19:35:39] <tsircon> let me rephrase from beginning
[19:35:59] <maroon> so X is a trustworthy cheater
[19:37:00] *** Joins: dumptrucktaco (~dumptruck@pool-108-28-60-86.washdc.fios.verizon.net)
[19:37:05] *** Parts: dumptrucktaco (~dumptruck@pool-108-28-60-86.washdc.fios.verizon.net) ()
[19:37:24] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:37:31] <tsircon> I have X end that has a list of strings P, X cannot store those strings in cleartext. now, X sends to Y end the hash of those strings. Y on its end has X's strings and much more. Y needs to verify if the strings sent by X are in the Y database
[19:38:03] <ms7821> ahh so Y is much more trusted than X, who is potentially malicious?
[19:38:35] <ms7821> does X have a similar concern about Y? Could it share its strings with the wrong person?
[19:38:38] <tsircon> the threat can be, a leak on X side
[19:39:19] <tsircon> X shares the hash of strings with the owner of the string itself, so no big concern there
[19:40:01] <maroon> so X has a group of 100 employees, and Y needs to confirm that all of X's 100 people are in Y's database of 1 million names?
[19:40:22] <tsircon> yes, without sharing the employees names/id
[19:40:25] <ms7821> how do the strings get to Y? Are they sent separately by the owners, or does Y issue them in the first place?
[19:40:58] <tsircon> they are sent in batch, not at same time, because today X can have 100 employees, but tomorrow 110 and so on
[19:41:25] <ms7821> sorry, that doesn't make sense. How does Y get them in the first place?
[19:41:41] <tsircon> form different sources, not involved into that
[19:42:17] <tsircon> Y just needs to verify that the string is in its db, not insert if it is not
[19:42:18] <ms7821> well you have to be prepared that this might not be possible to reason about cryptographically then
[19:42:59] <ms7821> if the strings are just values created by someone else, what's stopping them being one character long, and therefore trivially guessable by X?
[19:43:51] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[19:43:53] <tsircon> what about that? https://en.wikipedia.org/wiki/Private_set_intersection
[19:44:35] <ms7821> based on what you've said so far, that would be overkill
[19:45:05] <tsircon> yes, but what are the alternatives?
[19:45:06] <ms7821> also you said it's hard for Y to generate the full strings?
[19:45:13] <tsircon> well, this is my real question :D
[19:45:40] <tsircon> Y already has the full string, but it needs to find for it based on what X sent
[19:45:57] <ms7821> if Y has a list of full strings, it can perform the same hash function as X in advance, and just compare the hashes
[19:46:00] <maroon> looks like that webpage is talking about verifying 1 item is in database, rather than pick-any-100 is in database of 1 million
[19:46:16] <tsircon> ms7821, this works without a salt or with a static salt, right?
[19:46:40] <ms7821> it wouldn't make a difference
[19:46:45] <maroon> if there needs to be a brute force of picklist vs database, it cuts way down on testing if the sender must sort the 100 employees alphabetically before hashing it
[19:46:53] <tsircon> with a salt per string, how Y can find for it?
[19:47:24] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[19:47:28] <ms7821> why would Y need to find anything? It's got the full string
[19:47:45] *** Joins: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr)
[19:47:55] <tsircon> because Y needs to know if the string is on X side too
[19:48:08] <maroon> most zero knowledge proof just has X and Y verifying they both have the same 1-thing
[19:48:10] <tsircon> which holds only a subset fof Y strings
[19:48:26] <ms7821> you've lost me again, sorry
[19:49:29] <ms7821> X has a list of secret strings from its owner. Y has a list of secret strings from all owners. X sends Y the hashes of its secret strings, Y compares those hashes with the hashes for all secret strings
[19:49:41] <ms7821> where does a salt come in, and why would Y need to know anything more from X?
[19:50:37] *** Joins: vernaz (~vernaz@148.63.127.167)
[19:50:38] <maroon> use shamir secret sharing, where Y sets up a requirement of having N shares out of 1 million possible shares, then X sends the password for what they have - if any of X's employees is not in Y's database, then there is not sufficient shares to pass Y's test
[19:50:49] <tsircon> the salt comes in if the strings on X are leaked
[19:51:17] <ms7821> if X's strings are leaked, it's game over I'm afraid
[19:51:31] <tsircon> not if they are hashed/encrypted
[19:51:41] <tsircon> it is like a pwd
[19:51:58] <ms7821> if they're encrypted, how does X decrypt them>
[19:52:22] <ms7821> if they're hashed, how does Y distinguish X sending them from malicious fake X sending them?
[19:52:24] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:52:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:53:02] <tsircon> X to Y communication is trusted
[19:53:41] <ms7821> well this is what makes me think you don't even need to hash them
[19:54:02] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[19:54:10] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685) (Remote host closed the connection)
[19:54:17] <tsircon> this is there the constrain comes in, I cannot send plaintext strings, but only hashed/encrypted
[19:54:17] <ms7821> but let's assume they're like passwords and viewing the secret strings themselves might reveal other personal information
[19:54:33] <ms7821> if X to Y communication is trusted, why are you worried about anyone else getting the hashes?
[19:54:39] <ms7821> nobody else will be able to pretend to be X
[19:54:43] *** Quits: VzxPLnHqr (VzxPLnHqr@gateway/vpn/protonvpn/vzxplnhqr) (Remote host closed the connection)
[19:54:58] <tsircon> in case X env is compromised, or X db that contains those strings is leaked, etc
[19:55:07] <tsircon> so X needs to keep those strings encypted/hashed
[19:57:58] <ms7821> I think that's asking the impossible
[19:58:43] <ms7821> you can store the values encrypted in a DB, but at some point X needs to send *something* to Y, and if X is compromised, how would you distinguish a trustworthy request from an untrustworthy one?
[19:58:43] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[20:01:16] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[20:04:10] <maroon> i guess shamir secret sharing wont work if X can't create the voting shares for its list of strings, without knowning all strings in Y database
[20:07:03] *** Quits: g00fy7 (~g00fy@user/g00fy) (Read error: Connection reset by peer)
[20:07:32] *** Joins: g00fy7 (~g00fy@user/g00fy)
[20:09:05] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[20:11:13] *** Joins: szarka (~szarka@2001-48F8-9004-E05-4025-B9C7-87F1-A45-dynamic.midco.net)
[20:13:59] <Alipha> Can X contain encrypted values which were encrypted using Y's public key?
[20:15:30] *** Quits: tsircon (~tsircon@host-87-16-107-81.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[20:28:26] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[20:28:30] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[20:42:06] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685) (Remote host closed the connection)
[20:51:46] *** Joins: as2334 (~as2334@host211.181-14-153.telecom.net.ar)
[20:54:27] *** Joins: aleck (~aleck@user/aleck)
[20:56:14] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 252 seconds)
[20:57:34] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 265 seconds)
[21:00:23] *** Quits: Hash (~weechat@thestonedapes.com) (Quit: WeeChat 3.2.1)
[21:00:50] *** Joins: Hash (~weechat@thestonedapes.com)
[21:06:09] *** A_Dragon is now known as Exceedingly_Gay
[21:16:14] *** Exceedingly_Gay is now known as A_Dragon
[21:22:36] *** Joins: frigor (~osi@130.204.22.31)
[21:30:21] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[21:31:13] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[21:38:40] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[21:41:43] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[21:50:35] *** Quits: as2334 (~as2334@host211.181-14-153.telecom.net.ar) (Ping timeout: 260 seconds)
[21:51:39] *** Joins: as2334 (~as2334@host211.181-14-153.telecom.net.ar)
[21:52:27] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Ping timeout: 276 seconds)
[22:02:07] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[22:06:01] *** Joins: Moonlight (~Moonlight@64.253.17.178)
[22:10:21] *** Quits: dynemeloun (~dynemelou@93-93-35-197.cust.mitranet.cz) (Quit: The Lounge - https://thelounge.chat)
[22:22:05] *** Quits: as2334 (~as2334@host211.181-14-153.telecom.net.ar) (Ping timeout: 260 seconds)
[22:31:39] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[22:40:14] *** Joins: cwebber (~user@user/cwebber)
[22:45:21] *** Quits: Gravis (~gravis@user/gravis) (Ping timeout: 265 seconds)
[22:49:53] *** Quits: Moonlight (~Moonlight@64.253.17.178) (Ping timeout: 250 seconds)
[22:50:22] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:54:51] *** Quits: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685) (Remote host closed the connection)
[23:07:13] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[23:14:50] *** Quits: semisimple (~semisimpl@ipbcc062ec.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[23:17:21] *** Joins: semisimple (~semisimpl@188.192.98.236)
[23:18:53] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Remote host closed the connection)
[23:21:31] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[23:21:32] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[23:23:43] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[23:26:20] *** Joins: zro (~zro@user/zro)
[23:30:23] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[23:30:40] *** Quits: zro (~zro@user/zro) (Ping timeout: 252 seconds)
[23:33:15] *** Joins: RickSanchez (~RickSanch@2607:fb90:88aa:789:e4da:c84:4e84:685)
[23:35:08] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[23:54:57] *** Joins: lxlldr (~I@87.196.81.132)
[23:58:43] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
