[00:19:04] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:883:2395:bb9b:14c6)
[00:46:58] *** childlikempress is now known as moon-child
[01:05:19] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[01:08:55] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[01:17:01] *** Joins: notzmv (~zmv@user/notzmv)
[01:24:05] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 252 seconds)
[01:39:03] <gilberth> Hugh? char *privileged_hosts[] = {"mit-tweety-pie", "mit-daffy-duck"};
[01:39:36] <gilberth> And: * 4/29/85 Cory Myers allow logins without passwords from privileged hosts
[01:40:09] <edgar-rft> are you talking to Hugh Hefner?
[01:50:42] <gilberth> I doubt it.
[01:51:08] <gilberth> I wonder if those hosts actually existed.
[01:59:17] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[02:00:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:01:05] *** Joins: notzmv (~zmv@user/notzmv)
[02:23:35] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[02:25:01] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:883:2395:bb9b:14c6) (Remote host closed the connection)
[02:25:14] *** Joins: sm2n (~sm2n@user/sm2n)
[02:35:37] *** Joins: Jacobis9000 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com)
[02:36:40] <Jacobis9000> Hi!
[02:39:56] <dave0> maw
[02:41:13] <Jacobis9000> hey dave0
[02:41:27] <Jacobis9000> I slept all evening, from 5pm to 9.30pm
[02:42:38] <dave0> that's a nap!
[02:43:24] <Jacobis9000> Major nap!
[02:43:33] <Jacobis9000> I had weird vivid dreams too
[02:43:56] <Jacobis9000> I think I have been doing too much studying
[02:44:27] <Jacobis9000> Because work this week was training every day too, 9.30am to 4.30pm of training every day, and then I was coming home and studying
[02:44:34] <Jacobis9000> I think I have exhausted myself
[02:45:14] <gilberth> You learn sth new each day. I didn't know that there is a <string_s_.h> it appears like BSD string functions hide there.
[02:46:05] <gilberth> Jacobis9000: Then take a break. May I offer you some coffee?
[02:46:27] <Jacobis9000> How kind, thank you very much :D
[02:46:31] * Jacobis9000 sips coffee
[02:46:57] <gilberth> I haven't even fired up the coffee maker and attempted to draw a lambda into the foam.
[02:47:07] <Jacobis9000> The chap lecturing us in work was so wise, knwoledgeable and experienced. He has invited me to visit his farm in the Forest of Dean.
[02:47:21] <Jacobis9000> Ah uh
[02:47:34] <Jacobis9000> I like to sip imaginary coffee? :|
[02:47:49] <gilberth> I have real coffee :-p
[02:48:07] <dave0> i have instant which is part-way between those
[02:49:03] <Jacobis9000> Nothing wrong with instant coffee in my opinion, although I do prefer ground coffee in a caffetiere
[02:49:07] <gilberth> And I struggle with C code from '84 as it says.
[02:49:31] <gilberth> It's definitely easier to run Lisp code from '84.
[02:50:19] * hayley straight up lies now.
[02:50:39] <gilberth> Pity lies.
[02:50:45] <hayley> "Could you point to a non-JVM GC that doesn't STW to collect the minor generation?" "I cannot, hence why I'm writing one." "that certainly seems like a thorn in the side of the 'GC > ARC for low latency' argument."
[02:51:34] <pl> umm... what about unbounded release issue of RC?
[02:52:06] <hayley> Still, the guy doesn't know what he wants. "But for the 100th percentile latency it seems that you are practically still O(heap)." "Same goes for RC with unbounded release time." "Yeah, but in practise that doesn't happen."
[02:52:24] <gilberth> pl: That doesn't count in their argument.
[02:52:49] <Jacobis9000> Is John McCarthy still alive?
[02:52:56] <pl> I think for Metronome unless you really blow through ridiculous amount of small objects to scan you never get over, by default, 30ms?
[02:53:19] <hayley> The C4 paper mentions the lossage induced by STW compacting the nursery. But I guess, with thread-local nurseries, I indeed am not doing global minor collections.
[02:53:53] <gilberth> Jacobis9000: I don't know, do you have a complaint to file?
[02:54:10] <hayley> pl: I mentioned the metronome, saying that it is hard real-time unless you completely screw up allocation rates, but apparently that's not good enough. I don't know how you say _anything_ is hard realtime if you can't say something about allocation patterns.
[02:54:12] <Jacobis9000> No I am reading his home page from 2001
[02:55:50] <Jacobis9000> It is sad social media has subsumed the practice of people making their own homepages
[02:56:20] <hayley> I mean, having arbitrary allocation means you're doing arbitrary work, and so you can't really say anything about the latency of everything else.
[02:57:08] <pl> I mean, there's a reason why object pools are the standard approach in realtime coding with safety
[03:00:03] <hayley> Apparently this magically is solved with ARC. (Not.)
[03:00:57] <gilberth> Jacobis9000: Indeed. As with no standard messagener protocol. Imagine email had been invented these days, you would need an ACME app for sending someone on ACME an email and a FUBAR app to send someone on FUBU and a ... You get the idea.
[03:01:13] <gilberth> The internet is broken.
[03:01:24] <Jacobis9000> Internet 2.0 sux delux
[03:01:32] <gilberth> Same with UUCP.
[03:01:36] <moon-child> really, malloc is not _hard_ real-time.  If you are hard real-time you are doing no dynamic allocation and managing everything yourself
[03:01:50] <gilberth> NNTP, rather. Sorry.
[03:02:01] <moon-child> you are also not dividing.  Or touching anything outside of cache
[03:02:12] <moon-child> otherwise--you have room to breath
[03:02:39] <gilberth> Well, dividing still gives you a fixed worst case. Unlike malloc(3).
[03:03:23] <Jacobis9000> well I'm off to bed
[03:03:24] <moon-child> gilberth: there was a constant-time malloc devised.  But I expect it is probably rather slow, and nobody uses it
[03:03:27] <gilberth> And often you cannot cope with an out of memory error in a sensible way. And malloc(3) suffers from internal fragmentation.
[03:03:30] <Jacobis9000> I am still exhausted despite my four hour nap
[03:03:33] <moon-child> yes, and yes
[03:03:44] <gilberth> Jacobis9000: Take care!
[03:03:49] <Jacobis9000> Good night :)
[03:03:51] *** Quits: Jacobis9000 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com) (Quit: leaving)
[03:05:13] <gilberth> And don't forget the stack. You also want to avoid unbound recursion and make sure that you don't catch a stack overflow. I used static analysis on the assembler output of the compiler to determine the worst case stack size of each process.
[03:07:02] <gilberth> So yes, hard real time is quite different.
[03:07:10] <moon-child> indeed
[03:08:12] <hayley> Another minor complaint about the SICL memory layout is that you can't put a mark bit somewhere handy (e.g. on a JVM you have an object header word at [RAX - 8] or so). You have to compute the index of a bit/bytemap last time I checked. But apparently it's better for cache, idk. 
[03:08:51] <gilberth> This is what I don't get with hayley's friends. It's not that they face a robot arm smashing with full force into something because of a missed dead line.
[03:09:22] <hayley> Eh, HÃ¶lzle's generational GC write barrier used a card map, which is basically the same but with a larger shift (map 256 byte cards to a byte, rather than 8 byte words). 
[03:10:48] <moon-child> hmm.  Bitmap is nice, but seems moderately annoying when allocating larger objects
[03:11:00] <moon-child> so you pay for that cache with extra branches
[03:15:27] <hayley> gilberth: Generally they tend to be game developers who think that SBCL is the only thing stopping them from producing a multi-million dollar game, or in this case, someone who wants to avoid pauses while having a bajillion objects in heap.
[03:17:16] <hayley> Speaking of SBCL, they removed DEFCAS and DEFINE-CAS-EXPANDER.
[03:25:05] <gilberth> When I decouple the rendering from the game logic, I won't have a problem, assuming you want to sustain 60FPS. OTOH that is 16ms per frame, which is plenty of time. And: Would a missed frame every now and then even be noticed? I doubt that and nobody would die from that.
[03:26:01] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[03:26:09] <moon-child> indeed
[03:26:17] <gilberth> I don't. I often use 60FPS animations for debugging e.g. ellipse rendering or polygon clipping with my CLIM and CCL. I never notice any stalls. /me shrugs.
[03:26:26] <moon-child> people say 'stutter is terrible user experience'.  I say 'you are missing frames anyway due to os jitter'.  I do not get any responses!
[03:26:47] <gilberth> And my polygon clipper conses like hell. One test was a ~3k point polygon.
[03:27:20] <pjb> It's really killing me, how they can bring gold ingots in movies. 100 kg or 200 kg at a time!
[03:27:29] <gilberth> I would animate it rotating and to spot glitches.
[03:29:06] <gilberth> hayley, moon-child: But be young people not knowing what paging feels like :-)
[03:29:14] <gilberth> * Must
[03:29:40] <pjb> gilberth: this can be re-activated.  boot linux with mem=32MB ;-)
[03:30:19] <gilberth> pjb: Yes, and I still have real spinning platters which make noise. :-)
[03:30:28] <hayley> Oh, I also mentioned OS jitter and paging when saying that the 100th percentile was basically out of your control, and they said I could assume everything else wasn't a problem. Now, how the fuck do I measure that?
[03:36:49] <mfiano> hi gilberth 
[03:37:35] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[03:37:49] <Qwnavery> morning
[03:38:05] <gilberth> mfiano: Hi there! /me waves
[03:38:12] <mfiano> Do you have any resources or starting points for learning how to implement a computer in software? You got my interested yesterday. My only experience is in writing (part of) a 6502 emulator, and i didn't even get to the fun part of writing test programs because i left off verifying the opcodes.
[03:39:09] <Qwnavery> ^ this
[03:39:57] <gilberth> mfiano: There is nothing special about it. It could be as easy as: http://clim.rocks/gilbert/b32p/sim.c
[03:40:13] <mfiano> I have trouble reading C
[03:40:57] <gilberth> Then do it in CL.
[03:41:00] <hayley> https://www.youtube.com/watch?v=Ou4u4kOatck
[03:41:15] <mfiano> Do what? I don't even know where to begin.
[03:41:35] <gilberth> I get that you want to emulate some CPU, right?
[03:41:53] <mfiano> and other hardware, and software to run on it
[03:42:05] * hayley thinks
[03:42:17] <gilberth> mfiano: Ok. But you perhaps want to start with the CPU.
[03:42:24] <pl> so long as you don't go for high performance single-threaded implementation might be enough
[03:42:34] <hayley> I know how to do a CPU. Fetch instruction, dispatch, execute, repeat. The specification should describe dispatching and executing.
[03:42:45] <pl> (also, when emulating historical hardware, beware making stuff too fast)
[03:42:47] <gilberth> Then as my simulator just have a memory mapped tty for character input and output to get started.
[03:43:49] <hayley> The VM we got for university is flaming garbage. The condition register isn't set properly, so if you do an "unconditional" branch before reading registers, it will never be taken.
[03:43:56] <gilberth> mfiano: You need to first decide what you want to emulate. Some real existing machine? A toy CPU? An existing CPU with some toy HW.
[03:43:58] <hayley> *set properly on boot
[03:44:41] <hayley> "I don't care about Formal Verification (Correct code won't sell Support Contracts)."
[03:45:33] <Alfr> hayley, RDTSC on x86? On anything recent its rate of increment is constant.
[03:45:35] <mfiano> i do have a cpu already
[03:45:45] <mfiano> but i probably want a more practical cpu :)
[03:45:49] <dave0> corewars is interesting
[03:45:59] <dave0> it's a toy cpu
[03:46:10] <gilberth> mfiano: dave0 had some fun with my design.
[03:46:29] <dave0> yes gilberth's cpu is cool
[03:46:36] <gilberth> mfiano: Have you some ISA I could look at?
[03:46:54] <mfiano> What is ISA?
[03:47:02] <pl> Instgruction Set Architecture
[03:47:06] <gilberth> dave0: Still need to actually build it. I need my time to get more healthy again.
[03:47:48] <mfiano> I mean I implemented a cpu and memory and bus for 6502, but i am not sure it would be useful to continue with that if only to learn.
[03:47:50] <pl> mfiano: RISC-V for example is an ISA - at its core it doesn't describe anything other than CPU and the instructions it accepts
[03:47:58] <mfiano> i do not know of any other cpu i would want to implement
[03:48:10] <pl> 6502 was pretty prolific series
[03:48:25] <gilberth> This is my ISA: <http://clim.rocks/gilbert/b32p/isa0.html>
[03:48:51] <mfiano> i could post the CL code if you want
[03:49:10] <gilberth> So you already could run 6502 code?
[03:49:15] <dave0> https://news.ycombinator.com/item?id=28707939
[03:49:20] <GreaseMonkey> [13:14:41] <hayley> "I don't care about Formal Verification (Correct code won't sell Support Contracts)." <-- "would you like me to relay that to your customers?"
[03:49:35] <GreaseMonkey> "i'm sure your customers would love to hear that tjey"
[03:49:38] <dave0> someone made a C64 compatible computer
[03:49:45] <GreaseMonkey> that they're getting a terrible quality product
[03:49:54] <mfiano> Sort of. I started working on a renderer for the disassembler to test the state at each tick
[03:50:08] <mfiano> i got into the weeds with gamedev again writing a renderer :)
[03:50:12] * gilberth was raised with 8080.
[03:50:13] <dave0> GreaseMonkey: people bought msdos for a long time :-(
[03:50:16] <mfiano> I dont know how well it works yet
[03:50:51] <gilberth> mfiano: But it executes programs just fine already?
[03:50:58] <mfiano> I don't know.
[03:51:06] <gilberth> Ooops.
[03:51:46] <gilberth> mfiano: So where are you stuck?
[03:51:49] <dave0> mfiano: https://www.corewars.org/
[03:52:43] <GreaseMonkey> at least nowadays we have FreeDOS if you need DOS
[03:52:54] <mfiano> I just stopped working on it, because in order for me to see if it runs programs correctly, I would like a visualization of the state of the registers and memory with at each tick, and to be able to manually advance cycles with keyboard
[03:53:02] <gilberth> MS released the DOS source code.
[03:53:12] <mfiano> and it was the backend rendering code that i sort of got side tracked in
[03:53:31] <GreaseMonkey> how far back, and did they finally replace the "you can't actually use this code in any way shape or form lol" licence?
[03:53:42] <gilberth> mfiano: How about an old school single-step?
[03:53:50] <mfiano> i dont know what that is
[03:54:00] <gilberth> Give me a minute.
[03:54:04] <gilberth> I'll show you.
[03:54:20] <GreaseMonkey> oh right i did recall correctly that they actually genuinely open-sourced 1.25 + 2.0
[03:55:18] <hayley> GreaseMonkey: No, someone else said that. I do throw some code under formal verification tools if I still can't believe it works.
[03:55:42] <GreaseMonkey> hayley: you do not strike me as the sort of person who would ever let such a thing leave their mouths outside of quotation marks
[03:55:47] <GreaseMonkey> erm, that particular quote that is
[03:56:04] <gilberth> mfiano: Like this <https://termbin.com/wajo7>
[03:56:25] <gilberth> Each line one instructions with the register contents and the disassembly.
[03:57:20] <mfiano> are A, BC, DE, and HL general purpose registers?
[03:57:25] <gilberth> Have a command line to step one instruction, alter registers, skip over subroutine calls, set breakpoints etc. old school.
[03:57:34] <hayley> On 8080/Z80? Yes.
[03:57:39] <gilberth> mfinao: Yes. THat's an Z80.
[03:57:45] <hayley> Z80 gives you AF', BC', DE', HL' for some reason.
[03:57:48] <mfiano> SP and PC and stack pointer and program counter i'm guessing
[03:57:50] <gilberth> Z and V are flags.
[03:57:58] <gilberth> mfiano: Yes.
[03:58:04] <mfiano> ok so just a tad more advanced than 6502 it seems
[03:58:38] <hayley> https://en.wikipedia.org/wiki/Zilog_Z80#/media/File:Zilog_Z-80_Microprocessor_ad_May_1976.jpg Wonder how they got "up to 5 times faster than the 8080A".
[03:58:54] <gilberth> Perhaps, I just wanted to show you what I mean by an old school debugger.
[03:59:21] <mfiano> I don't know how an old school debugger behaves
[03:59:30] <mfiano> i dont know how a non CL debugger behaves :)
[03:59:30] <GreaseMonkey> Z80 may be more advanced but the 6502 is faster
[03:59:31] <gilberth> Like this. :-)
[04:00:03] <mfiano> a picture doesn't exactly tell me about the semantics
[04:00:05] <gilberth> GreaseMonkey: Sure for toy things. /me won't start that old war.
[04:00:14] <mfiano> or the interface
[04:00:32] <mfiano> that's sort of why i was asking "where do i start?" originally
[04:00:44] <gilberth> mfiano: The interface is line oriented. It would spit out one of those lines you see with the current state and wait for a command.
[04:01:17] <gilberth> A command could be: Step one single instruction, step a handful, set a break point, run until a certain address or breakpoint etc.
[04:01:36] <mfiano> ok but i would also want to see the page of memory too
[04:01:53] <gilberth> Then have a memory dump command.
[04:02:16] <gilberth> Get DOS and start DEBUG :-)
[04:03:03] <mfiano> No offense, but I would kind of want a resource to guide me through the most basic of things until I know enough to know how to search the rest on my own.
[04:03:46] <gilberth> Well, I have no pointer for you for some doc about such an old school debugger or sth. Sorry.
[04:03:46] <mfiano> I mean in the 70's/80's, i didn't own a computer so i never got to experience how people learned old-school hardware hacking back then
[04:04:06] <mfiano> all i was told, was read the manual, which helps, but is not very useful as a beginner.
[04:04:09] <gilberth> I would start with just displaying the state of the CPU, one line per instruction.
[04:04:41] <gilberth> mfiano: You're using CL for this?
[04:04:54] <mfiano> Yes, I do not use other languages.
[04:05:25] <gilberth> Then you could just use the REPL for commands. Start with a single step and a memory hex dump.
[04:06:12] <mfiano> Ok I'll think about getting back into that project later. Thanks
[04:06:13] <gilberth> This should get you an idea what the CPU is doing.
[04:06:32] <mfiano> I have no idea how to debug my cpu even if i had a debugger
[04:06:38] <mfiano> but i'll think of something
[04:07:36] <gilberth> hayley: That is a pissing contest. The Z80 has block move instructions the 8080 doesn't.
[04:08:09] <hayley> The ARM now has a memcpy instruction.
[04:08:10] <gilberth> mfiano: Well, just look if the CPU is doing what it should. :-)
[04:08:34] <hayley> And x86-64 now has LDB in one instruction.
[04:08:41] <mfiano> heh
[04:09:09] <pl> hayley: well, technically x86 had memcpy for ages
[04:09:11] <gilberth> mfiano: Perhaps you find 6502 test suites. I know there are some for the Z80.
[04:09:35] <pl> hayley: except some of the uses it was supposed for turned out to be... too fast
[04:09:47] <hayley> pl: I know SSE4.2(?) has string search, but memcpy is new.
[04:09:57] * gilberth mumbles REP
[04:10:06] <pl> REP prefix combined with certain instructions, iirc
[04:10:13] <gilberth> Yep.
[04:10:23] <mfiano> tbf i didn't implement the 6502 per-se
[04:11:07] <pl> I don't remember the exact registers as you were supposed to set, but one set the source, the other count, and then you had memcpy/string search/port read/port write
[04:11:14] <gilberth> mfiano: ok. This is why I asked whether you want to emulate sth existing or just sth fun.
[04:11:25] <Alfr> gilberth, one of my favorites: Why does y=x*x and later followed by sqrt(y-x*x) set trigger a floating point exception that the operand is negative?
[04:11:38] <gilberth> pl: Yes, you had and still have.
[04:11:39] <mfiano> I implemented the 6502 variant found in the NES, which lacks BCD and has some other differences with the MOS chip
[04:11:41] <hayley> REP MOVS?
[04:12:11] <gilberth> hayley: Too long ago, I don't remember exactly.
[04:12:39] <pl> hayley: yes. For some time they fell out of favour, but around nehalem they got sped up and now are I think the fastest way to MOV on intel
[04:13:11] <gilberth> Alfr: I don't know. Tell me.
[04:13:52] <mfiano> the ricoh 2a03 was more like an asic apparently
[04:13:57] <gilberth> With the advent of being RISC internally those CISC instructions weren't any faster anymore.
[04:13:58] <mfiano> which is what i implemented
[04:14:15] * hayley keeps reading and finds someone who found AVX instructions to be 20x faster than naÃ¯ve C. Did they use -O3? That should be trivial to vectorise.
[04:14:17] <pl> gilberth: with exception of K5 they aren't really RISC internally
[04:15:14] <pl> it's mostly a persistent meme /due to AMD K5/ and some misunderstanding in I believe descriptions used around intel P6
[04:15:15] <Alfr> gilberth, y gets spilled to some memory location, and in the process gets rounded down.
[04:15:16] <gilberth> Hmm? Nah, they are all RISCy now internally.
[04:15:26] <pl> gilberth: not under any RISC definition
[04:15:53] <gilberth> Not ISA-wise. But the whole super-scalar thing is the same.
[04:16:08] <pl> gilberth: having a wide microcode and non-register access disqualifies them from the term 
[04:16:18] <pl> super-scalar has nothing to do with CISC vs RISC
[04:16:55] <pl> P6 had, iirc, 143 bit long microinstructions FFS
[04:17:10] <gilberth> This is why I said "ISA-wise". With RISC I meant what happens after the instruction is decoded, which of course is technically not correct.
[04:17:34] <pl> gilberth: what happens after decoding is classic CISC
[04:17:48] <pl> that's the point of microcoded design
[04:18:02] <gilberth> This surprises me.
[04:18:41] <pl> gilberth: depending on how you define RISC, it's about small amount of instructions, NON-microcoded design, or purely load-store arch
[04:18:52] <pl> generally pushing towards 1 instruction per cycle
[04:19:09] <pl> which arguably super-scalar pipelined designs reached with complex CISC instruction sets
[04:19:45] <gilberth> Sure. I already clarified what I meant by RISCy. Of course the ISA is still the olde CISC ISA.
[04:19:52] <pl> gilberth: if treated existence of microinstructions as "RISC-like", then Symbolics 3600 was RISC-y inside
[04:20:01] <pl> gilberth: the thing is, there's nothing RISC-y about the internals
[04:20:16] <pl> except K5
[04:20:26] <gilberth> Transmeta
[04:20:53] <pl> gilberth: that's closer, but it was essentially a VLIW cpu running an emulator
[04:21:09] <pl> RISC-y VLIW from what I heard, but nobody was given access to that layer
[04:21:13] <gilberth> And yes, the Symbolics is a RISC CPU emulating the Lisp LAP. This is why that design is so boring.
[04:21:48] <pl> gilberth: 3600 microcode includes bitbanging the hard drive and 16 job OS
[04:22:01] <pl> and it's very memory-memory design
[04:22:23] <dave0> on x86... rep movs is memcpy, rep cmps is memcmp, rep scas is memchr, rep stos is memset
[04:22:26] <pl> largest instruction set bordering on CISC among RISCs was afaik PA-RISC, though POWER is getting there
[04:22:50] <gilberth> Yep. The CADR is more boring even as the CPU doesn't really have support for tagging, it's all microcode doing that.
[04:23:00] <pl> gilberth: so is 3600
[04:23:09] <pl> that's generally the case with microcoded designs
[04:23:13] <pl> they are all like that
[04:23:25] <pl> 8086, 286, 386, P6 etc.
[04:23:36] <pl> it was K5 that was the weirdo
[04:23:39] <gilberth> The 3600 is an enhanced design putting more work into hardware. And spending an IFU. Or was that later?
[04:24:03] <pl> can you expand IFU? it's late and something doesn't open the right box in memory
[04:24:14] <gilberth> Instruction fetch unit.
[04:24:21] <pl> ahhh, that was prefetcher, iirc
[04:24:26] <gilberth> Yes.
[04:25:58] <gilberth> Anyhow the CADR is quite some inspiration for me. It shows the power of Lisp as they did so much with so little resources.
[04:28:16] <gilberth> But so is the XEROX, but Smalltalk is too idealistic for my taste.
[04:28:30] <mfiano> check out "8088 Corruption" sometime :)
[04:28:59] <gilberth> Corruption? What kind of corruption? Bugs?
[04:29:28] <mfiano> Full motion video hack on a 1981 ibm PC
[04:29:40] <mfiano> _That_ is doing a lot with little resources :)
[04:29:57] <gilberth> Ah. A demo! Is that one of those 64kB demos?
[04:30:16] <mfiano> By one of the demoscene guys at the time. This is more practical i think
[04:30:24] <White_Flame> is that one of the CGA composite ones?
[04:30:55] <mfiano> yes
[04:31:17] * gilberth learned C on an IBM XT.
[04:31:24] * gilberth watches YT
[04:31:27] <mfiano> The author gave a nice talk/demo of it, and mocks the other attempts of the time :)
[04:31:49] <mfiano> https://www.youtube.com/watch?v=L6CkYou6hYU
[04:32:43] <gilberth> Is that a text mode hack?
[04:35:45] <mfiano> i mean there were just 2 text modes, so yeah
[04:35:56] <mfiano> well with CGA
[04:37:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:37:40] <gilberth> You could hack the CRTC to use what is technically text mode as a low res graphics mode.
[04:37:52] <White_Flame> looks like the stock font
[04:38:08] <gilberth> I wonder how the video is encoded.
[04:39:10] <gilberth> I mean it must be small yet cheap to turn into what to alter on the screen.
[04:39:37] <White_Flame> I haven't gotten that far, but I would suspect uncompressed would work
[04:40:02] <White_Flame> there's a lot of this sort of stuff that has been done and is still worked on today on the c64, especially since you can have custom fonts
[04:40:39] <gilberth> Hmm. 40x25 plus color bits = 2,000 bytes per frame. 640k approx 320 frames.
[04:42:07] <gilberth> There must be compression. Perhaps something simple as a stream of (offset, byte) as not all bytes change all the time. With some RLE or so.
[04:43:59] <White_Flame> yep, at 20mins, it's just plain copy from harddisk
[04:45:10] <gilberth> White_Flame: The hard disk had no DMA, so it would be tight.
[04:45:44] <gilberth> Ironically the floppy disk was DMA-capable.
[04:46:23] <hayley> "Pick two numbers to multiply, and don't pick 6 and 9" "9 and 6"
[04:46:39] <mfiano> pretty sure this supports up to 60hz without a problem
[04:46:47] <mfiano> its been a while since i watched it
[04:46:59] <gilberth> hayley: What is it about you and 69?
[04:47:14] <White_Flame> yeah, at 26min he plays a 60fps video, and that needs to buffer as it can't keep up
[04:47:21] <hayley> "68" "What's funny about 68? The guy just likes https://www.youtube.com/watch?v=Ou4u4kOatck"
[04:47:54] <mfiano> oh yeah it did
[04:48:46] <gilberth> White_Flame: I am watching the presentation at <https://www.youtube.com/watch?v=L6CkYou6hYU> and it says 30fps. And using a sound blaster, which is cheating.
[04:48:55] <White_Flame> heh
[04:49:09] <White_Flame> right, the sb offloads the CPU from banging the beeper
[04:49:18] <gilberth> There was no sound blaster in '81.
[04:50:32] <mfiano> where does it say sb?
[04:51:13] <gilberth> At 3:12
[04:54:55] <hayley> Yay, I wrote a O(lb(n)) multiplication routine with my macro assembler.
[04:55:19] <mfiano> Ah yeah. Well it was the first PC so wouldn't say it's cheating
[04:55:34] <hayley> It's still a bit stupid and stashes R7, even though I don't use it and I don't call other procedures.
[04:55:48] <waleee> lb? log base 2?
[04:55:51] <gilberth> Interesting he talks about the brain. voice at 16kHz sampling 1-bit could be understood but 1kHz sampling and 16-bit wouldn't.
[04:56:00] <hayley> waleee: Yes.
[04:56:09] <mfiano> ah yeah the frequency vs amplitude
[04:56:54] <gilberth> mfiano: The sound blaster was not available in '81, but in '89. So it's not an '81 machine.
[04:58:17] <mfiano> Sure, it was upgraded to allow for more than a beep
[04:58:48] <White_Flame> you can do digi sound on the beeper, though
[04:58:54] <White_Flame> but it would have taken like all the cpu
[04:58:58] <mfiano> Right
[04:58:59] <gilberth> You could do more than a beep with the speaker.
[04:59:36] <mfiano> Right, but the interrupts from the sb was used to drive the code so it stayed in sync
[04:59:48] <mfiano> Try doing that with just a cpu too
[05:00:23] <mfiano> Maybe without sound and all original hardware it could have ran 60hz without buffering.
[05:00:24] <gilberth> Use the 8042, then.
[05:01:06] <mfiano> Sure, that's the solution to every problem today even: buy better hardware
[05:01:18] <mfiano> What I found cool about this project was it was designed around the hardware
[05:01:23] <gilberth> Or route the vsync to your RTS line on the UART. :-)
[05:01:48] <gilberth> mfiano: Yes, with '89 hardware.
[05:02:12] <mfiano> Yep.
[05:02:18] <mfiano> but mostly 81
[05:04:32] <gilberth> There is REP MOVSW :-) It could sustain 160kB/s to the CGA.
[05:05:07] <gilberth> mfiano: Still cheating in my book, when I could add any hardware to help me.
[05:05:15] <mfiano> "Big deal, my 8-bit C64/Atari/Speccy can do more with less: Digitized audio aside, yes, they can, because they have much more flexible graphics hardware. Even the simple act of being able to redefine the character font in text mode gives them much higher graphics capabilities than what we had to work with. The true hack of 8088 Corruption isn't the playback software, but rather the video
[05:05:17] <mfiano> conversion to make the most of CGA, which was very fixed and limited (can't change the font, can't change colors, etc.)."
[05:05:32] <mfiano> THis is what I took away from it, the encoding process
[05:05:34] <mfiano> not the playback
[05:06:21] <White_Flame> yeah, and he basically said as much
[05:06:39] * gilberth is still watching the presentation.
[05:06:54] <White_Flame> on the c64 side, there's all sorts of intense algorithmic analysis to try to eke out more quality from generating better charsets
[05:07:29] <White_Flame> using some pretty intense math to isolate necessary details that multiple frames use
[05:08:02] <White_Flame> but because I/O sucks so badly on the 64, it basically has to load & play what fits in 64kB which is even more constraining
[05:08:46] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[05:08:51] <mfiano> I see
[05:08:51] <White_Flame> however, there's a new loader now that does 50x speed purely in software, so who knows, there might be streaming video at some point, although the typical floppy still is only ~140kB
[05:11:10] <mfiano> I really enjoy reading about the graphics hacks people did for old school machines. game developers sometimes even used undocumented opcodes because undefined behavior was fine on fixed hardware
[05:11:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:11:48] <White_Flame> yep, the 6502 had a lot of those, and then the c64 had illegal/undefined modes both on the sound & video chips
[05:12:08] <mfiano> which one had HCF :)
[05:12:15] <White_Flame> those with simpler non-custom chips tended to have fewer hacks
[05:12:24] <White_Flame> oh, halt & catch fire? ;)
[05:12:28] <mfiano> yeah :)
[05:12:54] <White_Flame> the closest thing I can think of was the PET, which theoretically might damage the CRT if the chip is set to the wrong stuff, but I'm not sure that was ever proven
[05:13:03] <gilberth> He needed seconds per frame when encoding the video on a current machine. :)
[05:13:52] <White_Flame> https://en.wikipedia.org/wiki/Killer_poke
[05:14:14] <mfiano> 320x200 @ 30hz (and 2 videos at 60hz) a long time ago (the talk was given in 2012, i forget when this was implemented)
[05:14:40] <mfiano> ah 2004
[05:16:23] <gilberth> The Matrix scene at around 17:54 looks pretty convincing. What a damn good encoder.
[05:17:23] * gilberth is impressed.
[05:20:05] <gilberth> And indeed the data comes from the HDD.
[05:26:16] <White_Flame> I thought the matrix scene was worst in terms of video quality, as most tiles didn't have character detail but opted just for a checkerboard
[05:26:29] <White_Flame> but the motion and audio certainly makes it recognizable
[05:27:13] <mfiano> gilberth: port it to CADR ;)
[05:32:58] <gilberth> mfiano: May I plug in a sound blaster?
[05:33:50] <mfiano> Sure :)
[05:34:00] <gilberth> And the CADR only has bitmap displays, no text mode.
[05:35:37] <gilberth> May I craft microcode?
[05:36:10] <mfiano> Is CADR an emulator to run LM microcode, or was it a real computer?
[05:37:32] <gilberth> The CADR was a real machine. The second Lisp machine, thus called the CADR.
[05:39:00] <gilberth> I could certainly do 30fps at 768x896
[05:39:37] <gilberth> On 200ns cycle time, which would be the speed of the original machine. Brad's emulator runs way faster.
[05:40:23] <pl> gilberth: there was PCM audio on CADR, iirc
[05:41:00] <gilberth> pl: Really? Then I need to emulate that too.
[05:41:49] <gilberth> Anyhow, I have no idea how fast the disks were.
[05:42:47] <hayley> gilberth: w.r.t read barriers using MMU traps, I read the Immix paper again and it seems they compact like 30% of the heap in a compacting run. So there might still be a lot of trapping.
[05:43:10] <hayley> But, assuming there is locality of reference, we could schedule pages which trap to be scanned faster.
[05:44:31] <hayley> Or I guess there could be more frequent compacting passes which compact less at a time. But it doesn't avoid compacting that well.
[05:45:56] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[05:46:45] <hayley> It might be nice to use larger regions or collections of regions (like 2MB large) so that we use larger pages and avoid some TLB blowout, but then deciding what needs compacting would be less precise.
[05:49:05] <gilberth> I guess you will still win on the TLB.
[06:01:37] <hayley> If we have only a 64kB region that we protect, surely that ends up using multiple entries. Or not?
[06:02:05] <hayley> Well, the pages in the 2MB around that region are going to be affected most.
[06:03:32] *** Joins: semz (~none@user/semz)
[06:44:47] <gilberth> This is driving me crazy. This chaos net stuff works a little with Linux, but not with macOS.
[06:46:17] <gilberth> Are unix domain sockets different with BSD?
[06:50:01] <gilberth> There is sth going on with the routing daemon. The CADR emulator chaos part complains about malformed packets and reconnected to the daemon all the time.
[06:51:37] <gilberth> And when this happens the FILE server complains, that it got its own packet back. Dunno if that is suppose to happen, I guess not.
[06:55:57] <Qwnavery> gilberth: what website would you like me to link for the time being?
[06:58:46] <hayley> https://arxiv.org/abs/2109.13498 Machine learning for super-optimization.
[07:04:10] <gilberth> Qwnavery: I have not decided yet. Sorry.
[07:04:49] <Qwnavery> gilberth: just temporarily, when you have a main site up I can change it
[07:08:54] <gilberth> Then, take https://lispcafe.org/cadr/ -- that would be convenient for me to re-route if needed.
[07:16:48] <gilberth> I put links to my videos up.
[07:17:04] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:17:36] <gilberth> I am too lazy for an OBJECT element.
[07:18:17] <dave0> super-optimization is like    mov rbx,rax  sar rbx,63  xor rax,rbx  add rax,rbx   it's micro-optimization which is meh
[07:19:40] <gilberth> I wonder what took them so long to apply machine learning to the task.
[07:20:14] <gilberth> However when I learn machine learning, I want to try to apply it to theorem proving, which is somewhat related.
[07:21:08] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Quit: I'll be back.)
[07:29:26] <gilberth> And perhaps to trading, but that won't be any new idea.
[07:30:37] *** Joins: semz (~none@user/semz)
[07:54:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:55:15] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:24:40] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[08:52:49] <hayley> https://www.youtube.com/watch?v=X8mLqNR0wDE
[09:32:38] <mfiano> Here we go again
[09:33:11] <mfiano> My patience was up after a total of 30 seconds. I tagged White_Flame in...
[09:33:26] <White_Flame> heh
[09:34:15] *** Joins: raeda__ (~raeda@72.49.219.33)
[09:35:02] *** Joins: lucerne9 (~lucerne@ip202.ip-51-178-215.eu)
[09:44:18] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[09:44:19] *** Quits: raeda_ (~raeda@72.49.219.33) (*.net *.split)
[09:44:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:44:20] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[09:44:20] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:44:20] *** lucerne9 is now known as lucerne
[09:45:24] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[09:46:10] *** Joins: minion (~minion@common-lisp.net)
[09:46:27] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[10:04:17] *** Joins: shka (~herr@109.231.6.176)
[10:28:26] *** Joins: cranium (~cranium@user/cranium)
[10:39:50] * hayley tries to describe the "colour" feature in a dataset of cars.
[10:40:18] <hayley> "A poorly defined, and seldom shared, interpretation of the wavelengths of light that the paint of the car reflects."
[10:41:01] <mfiano> That gives a whole new meaning to bikeshedding
[10:44:58] * hayley now tries to make Jupyter left-align the cells in a Markdown table. Not happening.
[10:47:11] *** Joins: slyrus__ (~slyrus@192-184-223-165.static.sonic.net)
[10:47:26] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[10:49:12] *** Joins: taeaad_ (~taeaad@user/taeaad)
[10:50:45] *** Joins: manicennui_ (uid349235@id-349235.tinside.irccloud.com)
[10:51:12] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Ping timeout: 252 seconds)
[10:51:12] *** manicennui_ is now known as manicennui
[10:52:15] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[10:52:41] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Remote host closed the connection)
[10:52:59] *** childlikempress is now known as moon-child
[10:54:06] <edgar-rft> I want colors for my cdrs.
[10:57:02] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[10:57:03] <ck_> test test .. client says "Lag: 200".
[10:59:59] <moon-child> (3car 0. 4cdr0)
[11:00:02] <moon-child> edgar-rft: ^^ like that?
[11:03:55] <edgar-rft> moon-child: that looks exactly what hayley described :-)
[11:04:08] <edgar-rft> ck_: computer says "no".
[11:04:13] <hayley> https://www.youtube.com/watch?v=DySNnz5N9WA
[11:04:43] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 252 seconds)
[11:09:35] <pjb> //clear
[11:09:55] <hayley> No, it says green, not clear.
[11:24:06] <hayley> Whoever implemented the reversed function for Python really fucked up, because they didn't implement the method for len. And we know that len(reversed(blah)) == len(blah).
[11:32:51] <mfiano> I would argue they screwed up before that by not choosing a verb
[11:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:39] <moon-child> hayley: what do you mean by 'the method for len'?
[11:36:24] <hayley> Whatever magic method is used. Maybe __len__ or something.
[11:36:56] <moon-child> oic
[11:37:25] <moon-child> maybe reversed is supposed to produce a lazy sequence, and if you apply it to another lazy sequence, it waits until you try to pull the first item before interpreting the whole other sequence?
[11:37:36] <hayley> IMO it should fall through to the generator that is being reversed. Then, if it has a length, it will work. Else, you get the same error.
[11:37:37] <moon-child> (but surely they could just check initially if the sequence is lazy??)
[11:37:48] <moon-child> yea
[11:38:32] <moon-child> (the method/function dichotomy is something I dislike about a lot of languages.  Even raku, which has multi dispatch, gets it wrong)
[11:38:35] <hayley> ...and given the sequential nature of generators, I don't see the point of being lazy unless the result is completely dead.
[11:39:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:45:41] *** Quits: phantomics (~phantomic@71-33-148-118.hlrn.qwest.net) (Ping timeout: 250 seconds)
[11:46:28] <edgar-rft> The REVERSE function in Lisp is misfunctional, too, because (reverse 12) doesn't return 21 :-)
[11:47:32] <pjb> (read-from-string(reverse(prin1-to-string 12))) #| --> 21 ; 2 |# 
[11:48:25] <moon-child> apl: |.&.":
[11:48:28] <moon-child> err, j
[11:48:35] <moon-child> 'under' is a really elegant combinator
[11:53:38] <pjb> edgar-rft: ((0 2) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (11 10) (13 4) (21 19) (22 10) (23 7) (31 28) (33 10) (42 19) (43 13) (44 10) (46 7) (53 16) (55 10) (62 28) (63 19) (66 10) (73 22) (77 10) (83 25) (84 19) (86 13) (88 10) (93 28) (99 10))
[11:53:58] <moon-child> ?
[11:53:59] <Qwnavery> cons -_-
[11:54:33] <edgar-rft> Lisp needs an obfuscated-math library
[11:55:50] <pjb> (loop for n below 100 for r = (reverse (prin1-to-string n)) for b = (loop for b from 2 to 36 when (string= r (format nil "~VR" b n)) do (return b)) when b  collect (list n b (format nil "~D ~VR" n b n)))
[11:55:58] <pjb> 73 in base 22 is 37 ;-)
[11:55:59] *** Joins: ck_ (~ck@plskthx.org)
[11:56:21] <pjb> 21 in base 19 is 12
[11:57:20] <edgar-rft> Qwnavery: try (defun -_- () 'zzz) to compute the result of (-_-)
[11:57:47] *** Joins: selwyn (~selwyn@user/selwyn)
[11:59:41] <ck_> pjb: but I thought 21 in base 19 is 39
[12:00:19] <pjb> (format nil "~19R" 21) #| --> "12" |#    
[12:00:32] <pjb> 39(19) = (+ (* 3 19) 9) #| --> 66 |# 
[12:01:07] <pjb> 21(19) = (+ (* 2 19) 1) #| --> 39 |# 
[12:01:57] <pjb> ck_: I meant : 21(ten), in base 19 is 12(nineteen).
[12:03:53] <Qwnavery> hayley: lmao Gladys resigned
[12:04:50] <Qwnavery> edgar-rft: (defun -o- () '*yawn*)
[12:06:38] <ck_> pjb: I know, it was supposed to be a joke along the lines of "punctuation saves lives", but with aprentheses this time
[12:10:55] *** Quits: jurov (~jurov@rev-81-92-255-38.radiolan.sk) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: OlCe (~user@lfbn-nic-1-565-28.w90-118.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:12:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 252 seconds)
[12:13:01] *** Quits: shka (~herr@109.231.6.176) (Remote host closed the connection)
[12:13:25] *** Joins: shka (~herr@109.231.6.176)
[12:13:28] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[12:13:54] *** Joins: trn (jhj@sourcehut/user/trn)
[12:43:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:43:27] *** Joins: OlCe (~user@lfbn-nic-1-565-28.w90-118.abo.wanadoo.fr)
[12:44:04] <hayley> https://www.youtube.com/watch?v=R-ZdCS0dpus
[12:44:39] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 252 seconds)
[12:44:49] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Ping timeout: 252 seconds)
[12:44:59] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[12:58:56] *** Joins: ck_ (~ck@plskthx.org)
[13:05:09] *** Joins: selwyn (~selwyn@user/selwyn)
[13:07:29] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a063:3fb9:6ba2:bece)
[13:11:24] <Qwnavery> I'm not getting any help from #css :| would anyone here happen to know how @font-face works?
[13:13:03] <hayley> You want to provide a custom font?
[13:13:22] <hayley> Look at l.10 through 18 of https://applied-langua.ge/ I guess
[13:15:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:19:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:19:35] <Qwnavery> hayley: I'm confused, where's 1.10 through 18?
[13:20:19] <hayley> The source for the page.
[13:20:49] <hayley> Lines 10 through 18 define the Computer Modern Typewriter variable width font from a file.
[13:21:37] <cranium> lol that page owns.
[13:22:15] <moon-child> webgl metafont renderer when
[13:23:15] <Qwnavery> ._. exactly what I'm doing but it's not f*cking working.
[13:23:25] <Qwnavery> www.lambdaspace.xyz
[13:23:52] <Qwnavery> Is it apache?
[13:25:20] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:25:57] *** Joins: APic (apic@apic.name)
[13:31:29] <Qwnavery> oml
[13:40:45] <Qwnavery> I can't.
[13:40:50] <Qwnavery> Good night all.
[13:41:36] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:05:48] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[14:24:41] *** Joins: notzmv (~zmv@user/notzmv)
[14:33:39] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[15:10:07] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[15:10:32] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[15:14:25] *** Joins: Jacobis9000 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com)
[15:17:31] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[15:18:42] *** Joins: selwyn (~selwyn@user/selwyn)
[15:20:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:30:53] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[15:31:17] *** Joins: Mandus (~aasmundo@85.112.154.250)
[15:50:46] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[16:02:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:26:19] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:28:11] *** Joins: selwyn (~selwyn@user/selwyn)
[16:42:35] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[16:44:35] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[16:48:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[16:48:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:50:40] <hayley> cranium: Having made the page, I am biased but I agree.
[16:53:50] * hayley watched a Coffee Compiler Club meeting recording on stack allocation.
[16:54:03] <hayley> They had to GC the stack infrequently. Go figure.
[16:58:23] <hayley> If that is the case, and IIRC Click's notes said "eh, we won't get it on the call stack because it's too messy" then thread local nurseries should be pretty close in "power".
[17:09:42] <Alfr> Good morning!
[17:11:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[17:11:24] *** Joins: Mandus (~aasmundo@85.112.154.250)
[17:11:30] <selwyn> hi
[17:11:55] <hayley> Hello Alfr.
[17:47:55] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[17:49:55] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:01:14] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[18:01:38] *** Joins: Mandus (~aasmundo@85.112.154.250)
[18:04:16] <dave0> nite all
[18:04:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:05:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:06:51] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a063:3fb9:6ba2:bece) (Remote host closed the connection)
[18:13:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:13:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:23:07] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[18:25:40] *** Joins: Mandus (~aasmundo@85.112.154.250)
[18:34:11] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[18:36:00] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:37:06] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Client Quit)
[18:42:05] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:52:13] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:32:28] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[19:45:32] *** Joins: Catie (~user@24.19.51.175)
[20:02:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:11:10] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:33:01] *** Quits: Jacobis9000 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com) (Ping timeout: 252 seconds)
[20:45:25] <gilberth> Good morning #lispcafe!
[20:50:50] <gilberth> Hmm, in a network protocol you would expect not getting your packets back, right?
[20:51:32] <kakuhen> i would expect perfection and do things to pretend they are perfect
[20:55:18] <gilberth> Nah, those chaos packets have a source host address and a dest host address and both the FILE server and the CADR at times get what they send to the other back from the router, while it doesn't reach the destination.
[20:56:29] <gilberth> So, I would expect the router being defect or sth. But perhaps these are some kind of ping packets or sth. I need to dig the Chaosnet protocol further.
[20:57:01] <gilberth> But even then I won't expect to get it returned as is.
[20:57:34] <gilberth> And this router here is artificial as Chaosnet is supposed to work on a shared medium.
[20:58:14] <gilberth> Though there could be bridges between subnets, but both the FILE server and the CADR sit on the same subnet.
[21:00:13] <gilberth> I mean, those packet won't even make the Chaosnet board generate an interrupt because the board is supposed to know its own host address and not bother with packets not for that host.
[21:01:55] <gilberth> So maybe I find where this artifical Choas router does it routing, it must be confused.
[21:02:38] <gilberth> Would have been way nicer when this were written in Lisp.
[21:07:16] <gilberth> It's a bit confusing as two layers use the same address space. I believe those bridges are also host. But again, there are no bridges here.
[21:10:08] <gilberth> Was the PDP-11 little or big endian?
[21:11:44] <pl> Neither 
[21:12:25] <shka> vax was little, dont know about the pdp
[21:14:58] <gilberth> ok, thanks.
[21:15:27] <gilberth> The Choas memo however says that the PDP-10 is BE while the PDP-11 would be LE. Hmm.
[21:18:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:23:35] *** Joins: makomo (~makomo@user/makomo)
[21:26:37] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[21:26:46] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[21:27:04] *** Joins: makomo (~makomo@user/makomo)
[21:32:12] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[21:35:33] <pl> PDP-11 was LE in small sizes and took a page out of wurst parts of German for larger numbers, coining PDP-endian 
[21:37:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[21:45:16] <gilberth> I see.
[22:07:38] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[22:07:42] *** Quits: X-Scale (~ARM@46.50.4.85) (Ping timeout: 265 seconds)
[22:08:00] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:08:08] <copec> Ya'll have a sync of bitsavers.org, right?
[22:09:12] *** X-Scale` is now known as X-Scale
[22:19:27] <pl> gilberth: I think the few constructs that were double words on pdp-11 had something like 2-1-4-3 layout of bytes
[22:32:18] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[22:33:38] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:33:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[22:35:51] *** Joins: aeth (~aeth@user/aeth)
[22:50:30] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:20:45] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[23:30:19] <gilberth> pl: You mentioned that already. Anyhow this is a red herring here.
[23:39:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
