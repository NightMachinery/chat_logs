[00:00:02] <teut> dude so is any dynamically typed
[00:00:09] <puff> jokoon: I'd like some of the brain cells back that I lost to javascript, ack i the day.
[00:00:25] <bjs> n00b101: trio is a library that can take a bunch of these functions (`async def` functions) and interleave them
[00:00:28] <grym> jokoon: it is a very tongue in cheek talk, fwiw
[00:00:29] <bjs> teut: do you mean typing.Any ?
[00:00:44] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[00:00:50] <jokoon> grym, opinions are important
[00:00:56] <teut> for jokoon
[00:01:12] <puff> Good afternoon, trying to sort out some UDP broadcast issues.  It seems like I get different behaviors on different networks that require changing the string I use as the broadcast address.
[00:01:33] *** Leonarbro__ is now known as Leonarbro
[00:01:53] *** Quits: Obo (~roberto@h-46-59-103-134.A498.priv.bahnhof.se) (Quit: WeeChat 2.8)
[00:03:00] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[00:03:09] <puff> I've seen bind("", portnum), bind("<broadcast>", portnum), and bind("192.168.n.255") in docs..
[00:03:17] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:03:24] <puff> And it seems some work on some networks and from some machines, others don't.
[00:03:42] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[00:04:12] <bjs> teut: pretty much every programming language is horrendous
[00:04:17] <bjs> and filled with complexity and history and mistakes
[00:04:24] <supakeen> The bind shouldn't matter as long as you set SO_BROADCAST?
[00:04:33] <n00b101> tunixman: hey https://pypi.org/project/async-timeout/ <-- this can help here https://bpa.st/LC2Q
[00:04:41] <supakeen> Just the port number is what matters, the address will only select the interface.
[00:04:47] <puff> supakeen: On the sender or receiver?
[00:04:51] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[00:05:16] <bjs> n00b101: the code as you've written in, that particular hello() function? then no, you'd have to re-write the code to be able to do what you want
[00:05:28] <puff> supakeen: They're both definitely using the same port.
[00:05:55] <teut> ya , bjs that's true it's an iterative procedure to get the best and we can only get better
[00:06:08] <tunixman> t n00b101 yeah, exactly.
[00:06:20] <n00b101> bjs: how can i use it?
[00:06:27] <n00b101> in my program
[00:06:28] <teut> but recently I m hating the dicts, since spelling mistakes are taking a lot of debugging time of mine
[00:06:50] <puff> supakeen: And yeah, I'm setting SO_BROADCAST on both machines: self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
[00:06:53] <bjs> n00b101: I just said, *your* program you cannot
[00:06:57] <bjs> you'd have to re-write it to be different
[00:07:29] <bjs> n00b101: here's a concrete example of using trio as was habnabit_'s suggestion https://bpa.st/KY6A
[00:07:30] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:08:01] *** Joins: squirrel (~sq@user/squirrel)
[00:08:04] *** Joins: Elodin (~weechat@user/elodin)
[00:08:24] <bjs> teut: use classes?
[00:08:30] <supakeen> Since you're calling bind I'm assuming you're copy/pasting receiver code.
[00:08:46] <bjs> teut: i basically try to use whatever features of a language help my IDE autocomplete
[00:08:50] <grym> ^^^
[00:09:10] <grym> my allergy to stringly-typed data made the switch to attrs one of the most instantaneous i've had
[00:09:12] <ssbr> classes and static type checkers and language servers, hey
[00:09:14] <grym> "oh god i can stop? great!"
[00:09:19] <teut> ya I need to change my ide, I understand that
[00:09:19] *** Quits: Smyger (~Smyger@ip2-200.brfjupiter.se) (Quit: Leaving)
[00:09:25] <bjs> teut: what ide do you use?
[00:09:33] <teut> I cant stick with vscode for entire life
[00:09:40] <bjs> i use vscode, it's great
[00:09:43] <bjs> it works for almost every language i use
[00:09:46] <grym> teut: it's a perfectly reasonable tool!
[00:09:47] <ssbr> teut: vscode will work fine with this, it just needs a language server for python
[00:10:01] <supakeen> puff, I have to go but it's likely either that you're sending or receiving on different interfaces, tcpdump might help here (looking at the actual packets) or that you have multiple listeners on that port.
[00:10:10] <ssbr> teut: or some other thing that can analyze code and generate autocomplete I guess, idk how this worlks
[00:10:11] <teut> ya , but it's refactoring isnt that good
[00:10:13] <bjs> i can't recall, isn't there a microsoft python extension that works well
[00:10:23] <ssbr> teut: who needs an IDE to do refactorings
[00:10:29] <bjs> teut: automated facility for refactoring isn't a big thing i need in an IDE
[00:10:30] <grym> bjs: yep
[00:10:31] <ssbr> use regexps and/or http://refex.rtfd.io
[00:10:54] <teut> ya, but atleast something if can take care of the strings, then it's good
[00:10:59] *** Parts: jokoon (~eio@2a01:e0a:542:e160:fe:d5d9:e3f2:dcc3) (Leaving)
[00:11:08] <puff> supakeen: Thanks.
[00:11:14] <grym> ssbr: oh hey, you got it out!
[00:11:18] *** squirrel is now known as sqrrl
[00:11:19] <teut> bjs , sometimes it 's good
[00:11:21] <ssbr> grym: I got it out ages ago haha
[00:11:25] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[00:11:35] <ssbr> grym: but I didn't broadcast it because I then went on 3mo vacation and stopped working on it for a while
[00:11:36] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[00:11:37] <ssbr> ah well
[00:11:38] <teut> all duplicate code gets collected in a go
[00:11:40] <grym> ssbr: the last i saw in scrollback it was out then in , so i'm glad it's out again
[00:11:56] <ssbr> grym: oh yes I accidentally leaked a thing briefly. that's fixed. >:)
[00:12:06] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Remote host closed the connection)
[00:12:12] <n00b101> bjs:
[00:12:17] <bjs> n00b101:
[00:12:18] <n00b101> tunixman:
[00:12:20] <The-Compiler> ssbr: refex sounds interesting, makes me wonder how it compares to https://semgrep.dev/
[00:12:23] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[00:12:24] <n00b101> https://imgur.com/KqOQ62U.png
[00:12:28] <tunixman> tunixman:
[00:12:30] <bjs> n00b101: you know you can put our nicks on the same line you put the message :)
[00:12:32] <n00b101> have a look at his
[00:12:34] <n00b101> this
[00:12:36] <n00b101> https://imgur.com/KqOQ62U.png
[00:12:44] <bjs> n00b101: okay,  i've looked at it.
[00:12:47] <ssbr> The-Compiler: it does replacements, semgrep doesn't; semgrep has a "repeat" rule, refex has that on the todo list
[00:12:51] <n00b101> what do you think about how that sleep() worked?
[00:13:15] <ssbr> The-Compiler: I actually feel like refex would be a good language-specific backend for semgrep, if semgrep is architected that way, but it probably isn't and instead tries to build language-agnostic ASTs by hand
[00:13:18] <tunixman> oooh arduino code is it?
[00:13:18] <grym> i recently figured out how to turn my editor into a ripgrep-driven search and replace minigame
[00:13:33] <grym> this has been more happy than i'm comfortable admitting, perhaps
[00:13:44] <The-Compiler> ssbr: it does replacements, https://semgrep.dev/docs/writing-rules/rule-syntax/#fix
[00:13:58] *** Quits: kevr (~kevr@user/kevr) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:14:04] <ssbr> The-Compiler: either that's new or I missed it when I saw semgrep
[00:14:24] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:14:57] *** Joins: kevr (~kevr@user/kevr)
[00:14:57] <tunixman> n00b101: that's going to have quite a bit of jitter, but it may not be a big deal. Also, depending on interrupt control, it might keep anything else on the CPU from running. There might be hardware timers on the board that can drive the pwm so you don't have to...
[00:14:57] <ssbr> The-Compiler: the syntax is nearly identical, so you should be able to use either one given the same pattern as long as it doesn't use glob-repetition
[00:15:06] *** Quits: mborus (~mborus@2001:16b8:6f2d:1d00:1ab:56a5:6b25:51f7) (Quit: Client closed)
[00:15:06] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 272 seconds)
[00:15:10] <ssbr> The-Compiler: the only advantage refex has, then, would be the custom matchers
[00:15:17] <ssbr> which, to be fair, are hella useful :)
[00:15:50] *** Quits: greedom (~greedom@2001:16b8:3270:7600:7db0:305d:1b9e:ff6f) (Remote host closed the connection)
[00:16:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[00:16:15] *** Joins: greedom (~greedom@2001:16b8:3270:7600:7db0:305d:1b9e:ff6f)
[00:16:40] <ssbr> (I think most of the matchers at work use them, because you end up wanting to drop down there a lot.)
[00:16:46] *** Quits: ham5urg (~ham5urg@p5ddfdd3d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:16:58] *** Quits: greedom (~greedom@2001:16b8:3270:7600:7db0:305d:1b9e:ff6f) (Client Quit)
[00:17:32] *** Joins: ham5urg (~ham5urg@p5ddfdd3d.dip0.t-ipconnect.de)
[00:17:44] *** Quits: biozz (~biozz@static.211.203.216.95.clients.your-server.de) (Remote host closed the connection)
[00:18:08] *** Joins: greedom (~greedom@2001:16b8:3270:7600:7db0:305d:1b9e:ff6f)
[00:18:19] *** Joins: biozz (~biozz@static.211.203.216.95.clients.your-server.de)
[00:19:49] <n00b101> tunixman:  did you see the previous function only ran 2 seconds and waited for 2 seconds then ran next?.. it is doing exactly the same..
[00:20:02] <ssbr> The-Compiler: I'll be happy to talk more about refex in an 45min or so, but I have to run before the office closes for lunch. Definitely you should take a look and let me know if there's obvious holes / FRs!
[00:20:04] <n00b101> then how does our case need async stuff?
[00:20:15] <bjs> n00b101: what do you want this code to do instead?
[00:20:24] <bjs> n00b101: i'm not really sure what i was supposed to see in the image
[00:20:25] *** Joins: fanta (~fanta@pd9eed5c2.dip0.t-ipconnect.de)
[00:20:40] *** Quits: fanta (~fanta@pd9eed5c2.dip0.t-ipconnect.de) (Client Quit)
[00:20:50] <The-Compiler> ssbr: to be fair I haven't actually used semgrep in production so far either :)
[00:21:01] <The-Compiler> ssbr: enjoy lunch!
[00:21:38] *** Joins: fanta (~fanta@pd9eed5c2.dip0.t-ipconnect.de)
[00:21:53] *** Joins: Pickchea (~private@user/pickchea)
[00:23:03] <tunixman> t n00b101 Yeah, I think that's what the code will do... It just goes from top to bottom. There aren't any asyncs or conditionals, so it's not going to change directions or skip or anything.
[00:23:14] <jabberwock> Is there anything I should not look into while studying OpenCV+python? Like having the first result be to outdated docs that I won't know about for hours
[00:23:23] <jabberwock> I just want to recognize my cat and open its kitty door
[00:24:03] *** Quits: Tat (~Tat@137-025-218-069.res.spectrum.com) (Ping timeout: 244 seconds)
[00:24:06] *** Joins: Koffa (jkohvakk@user/koffa)
[00:24:34] <NoImNotNineVolt> okay, so, i have a bunch of dicts that look like {"expression": ".foo", "operation": "==", "value": "5"} and {"expression": ".foo", "operation": "!=", "value": "5"}, etc.
[00:24:51] *** Quits: ssbr (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[00:25:17] <jabberwock> omg that looks like a recipe for RCE
[00:25:23] <NoImNotNineVolt> how would i determine... i dunno how to even ask this... how would i determine the combined coverage of the input space given a set of such objects?
[00:25:29] <NoImNotNineVolt> jabberwock: it is
[00:25:43] <jabberwock> libfuzzer
[00:25:54] <jabberwock> well, there may be a more defined approach. Like for testing sketchy regex
[00:26:11] *** Joins: clueful (~Guest39@184.102.206.193)
[00:26:17] <NoImNotNineVolt> i guess fuzzing is one way.
[00:26:19] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[00:26:25] <NoImNotNineVolt> i was hoping for some kind of logic engine or something :P
[00:26:25] <jabberwock> are you on linux or?
[00:26:39] <jabberwock> that's over my head, but unless someone else has something to add
[00:26:40] <NoImNotNineVolt> technically on aws lambda, but that's "linux enough"
[00:26:43] <ammar2> NoImNotNineVolt: how expressive is your language?
[00:26:58] <NoImNotNineVolt> ammar2: not very. very few operators.
[00:26:58] <clueful> is it possible to have a package that is say clueful and another one that is clueful.stuff and them to be independent in terms of importing
[00:27:22] <jabberwock> NoImNotNineVolt: yes probably linux for lambda+python
[00:27:23] <jabberwock> https://defparam.medium.com/finding-issues-in-regular-expression-logic-using-differential-fuzzing-30d78d4cb1d5
[00:27:31] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:27:32] <jabberwock> That may be tailored using a corpus
[00:27:36] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[00:27:38] *** Joins: salpynx (~salpynx@121.73.84.248)
[00:27:57] <jabberwock> regardless, I'd want this done at some point to make sure all my happy paths lead their merry ways
[00:28:08] <jabberwock> +seed corpus
[00:28:13] <NoImNotNineVolt> fuzzing may be good enough. thanks for the recommendation.
[00:28:18] <jabberwock> 👍
[00:28:24] <NoImNotNineVolt> but i'd still lean towards provable correctness if possible :P
[00:28:27] *** Joins: SebastianM (~seba@user/sebastianm)
[00:28:36] <jabberwock> the fuzzer puts the burden of proof on you
[00:28:49] <ammar2> NoImNotNineVolt: for fuzzing this you might want to look at the hypothesis library
[00:28:59] <jabberwock> I get this is sort of side-channel help, but that's all I got
[00:29:05] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[00:29:05] <NoImNotNineVolt> i'll take it :P
[00:29:08] <jabberwock> ammar2: this uses that
[00:29:18] <jabberwock> actually, no. but yes that's a good recommendation as well
[00:29:21] <ammar2> jabberwock: "this"?
[00:29:31] <jabberwock> .t https://defparam.medium.com/finding-issues-in-regular-expression-logic-using-differential-fuzzing-30d78d4cb1d5
[00:29:34] <ammar2> aah
[00:29:38] <jabberwock> that's a good article on getting up to speed
[00:29:46] <NoImNotNineVolt> in this context, coverage != code coverage
[00:29:56] <NoImNotNineVolt> coverage == input space coverage
[00:30:02] <jabberwock> I saw what you did :D
[00:30:24] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[00:30:36] <ammar2> NoImNotNineVolt: yeah hypothesis has stuff for helping generate an arbitrarily complex expression
[00:30:39] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:30:42] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[00:30:44] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[00:30:51] <NoImNotNineVolt> i think i've used hypothesis before.
[00:31:23] <jabberwock> I just learned of it yesterday when running `make test` for the weechat matrix plugin
[00:32:01] <NoImNotNineVolt> i think another team i work alongside uses it in their tests.
[00:32:02] *** Joins: chance (~chance@50.47.109.175)
[00:32:03] <jabberwock> ... which won't connect
[00:32:20] <jabberwock> NoImNotNineVolt: service team?
[00:32:48] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[00:33:07] <NoImNotNineVolt> just another dev team. i think they're doing integrations work also.
[00:33:08] * jabberwock thinks they are talking to some EC2 Amazonian
[00:33:11] <NoImNotNineVolt> nah
[00:33:27] * NoImNotNineVolt works for a cybersecurity mssp
[00:33:27] <jabberwock> kk :D
[00:33:29] *** m0nkey_ is now known as DavieDavieDave
[00:33:34] <NoImNotNineVolt> integrations galore :'(
[00:33:37] * jabberwock works for AWS cyber security lol
[00:33:47] <jabberwock> sounds intriguing!
[00:34:29] *** DavieDavieDave is now known as m0nkey_
[00:34:43] <NoImNotNineVolt> i need a new job. i stayed here for so long because i really only spend like 5 hours a week doing actual work.
[00:34:46] *** Joins: vdotcodes (~textual@ool-44c1f7a5.dyn.optonline.net)
[00:34:52] *** Quits: farcas (~farcas@2a02:2f09:5014:7100:9f12:487b:9c49:161a) (Quit: Konversation terminated!)
[00:34:59] <jabberwock> I mean this is not my work account but you're welcome to reach out
[00:35:09] <jabberwock> didn't actually mean to involve work here tbh
[00:35:11] <NoImNotNineVolt> but the last year has actually seen me working 40+ hour weeks. managing people. building integrations. this is beneath me :P
[00:35:16] <jabberwock> you were just speaking my lingo lol
[00:35:30] <NoImNotNineVolt> and learning aws. that's the final straw for me :P
[00:35:35] <jabberwock> okay, if managing people is your thing and 40+ hours aren't then I can't recommend many places
[00:35:54] <jabberwock> but we can take this elsewhere if you're interested. I don't want to pollute #python
[00:35:55] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:36:02] <NoImNotNineVolt> indeed, /me shuts up :P
[00:36:09] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:36:19] *** Joins: Pickchea (~private@user/pickchea)
[00:36:49] *** Joins: ElisaElectron (~elisa_ele@2a01:cb1d:88f0:c600:6b9d:2248:effd:485b)
[00:37:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:38:37] *** Quits: Brocker (~Libera@vmi552115.contaboserver.net) (Changing host)
[00:38:37] *** Joins: Brocker (~Libera@user/brocker)
[00:39:25] *** Joins: kosh (~kosh@user/kosh)
[00:40:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:41:06] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 244 seconds)
[00:44:58] <iphone> NoImNotNineVolt: have you heard the good news
[00:45:08] *** Quits: Haxxa (~Haxxa@122.199.47.41) (Quit: Haxxa flies away.)
[00:45:16] *** Joins: aslicedbanjo (~aslicedba@host86-150-115-52.range86-150.btcentralplus.com)
[00:45:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[00:45:45] *** Quits: bidouille (~user_name@trois.potager.org) (Ping timeout: 268 seconds)
[00:46:52] <NoImNotNineVolt> iphone: about your snake?
[00:47:36] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 268 seconds)
[00:48:08] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[00:48:39] *** Joins: Haxxa (~Haxxa@122.199.47.41)
[00:49:40] <iphone> yeah. Its shedding and I'm struggling to locate cheap feeders
[00:49:55] *** Joins: ssbr (~ssbr@2620:15c:10f:203:644:3df4:ca7c:7577)
[00:50:46] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 252 seconds)
[00:51:06] *** iphone is now known as beer
[00:51:22] *** beer is now known as iphone
[00:52:05] *** Quits: justinf210 (~justinf21@140.sub-97-43-192.myvzw.com) (Ping timeout: 272 seconds)
[00:52:25] *** Quits: ano (~weechat@user/ano) (Ping timeout: 252 seconds)
[00:52:35] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[00:52:41] *** Quits: adium (adium@user/adium) (Quit: Stable ZNC by ##bnc4you)
[00:52:47] *** Joins: biozz_ (~biozz@178.57.22.163)
[00:52:58] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[00:53:09] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[00:53:29] <The-Compiler> iphone: by now you're probably aware this isn't the right channel for this, yeah?
[00:53:38] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:53:42] <drew> length = int(bfile.read(3).hex(), 16)
[00:53:44] *** Joins: ano (~weechat@user/ano)
[00:53:53] *** Joins: SebastianM (~seba@user/sebastianm)
[00:53:54] <drew> is this just reading a value, converting it to hex, then converting it back to an int?
[00:53:59] <habnabit_> drew, yes
[00:53:59] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:54:09] <habnabit_> drew, better: int.from_bytes(bfile.read(3), 'big')
[00:54:11] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[00:54:23] <drew> k, must have been late when I wrote this lol
[00:54:23] <habnabit_> iphone, last warning
[00:54:29] <iphone> The-Compiler: I am well-aware. But I like to think its funny
[00:54:29] <mawk> I've got this terrifying message when matplotlib is trying to open its window: « qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "" even though it was found. »
[00:54:37] <iphone> I enjoy python
[00:54:39] <mawk> but I run KDE so I'm pretty sure there are qt libs and so on
[00:54:44] <habnabit_> iphone, ok. then please stop
[00:54:46] *** Joins: Elodin (~weechat@user/elodin)
[00:54:58] *** Joins: MintyPhoenix (~MintyPhoe@c-73-143-208-196.hsd1.ct.comcast.net)
[00:55:15] <The-Compiler> iphone: it sure was, but it's getting old quick, and we prefer to keep this channel focused on the programming language - offtopic is okay sometimes, but it shouldn't be a distraction
[00:55:26] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[00:55:42] <The-Compiler> mawk: if you "export QT_DEBUG_PLUGINS=1" you should see more terrifying output, can you pastebin that?
[00:55:53] *** Quits: biozz (~biozz@static.211.203.216.95.clients.your-server.de) (Ping timeout: 272 seconds)
[00:56:23] *** Quits: geli (~gelignite@55d45e3f.access.ecotel.net) (Quit: Stay safe!)
[00:56:32] <iphone> The-Compiler: "we". No, you mean "I"
[00:56:36] <ente_> iphone: I hope your snake is well but is it even a python?
[00:56:46] <habnabit_> ente_, please don't encourage them
[00:56:49] <iphone> ente_: the snake was a figment of my imagination all along
[00:57:11] <bjs> iphone: do you want to talk about Python the programming language?
[00:57:11] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[00:57:45] <mawk> The-Compiler: https://paste.debian.net/hidden/8981b059/
[00:57:49] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:57:53] <The-Compiler> iphone: I mean "we" as in "the ops of #python"
[00:57:57] <teut> is it this https://www.qt.io/  qt or some python lib that matplotlib is written nin The-Compiler?
[00:58:00] <teut> in*
[00:58:02] *** Joins: zsignal (~zsignal@84.203.8.218)
[00:58:05] <iphone> sure. I enjoy writing list comprehensions. So much better than hasing out a for loop in 3-4 lines. saves lots of space. I also love scoping being controlled by whitespace. genius.
[00:58:15] *** Quits: combinare (~Eric@129.146.172.252) (Quit: ZNC 1.8.2 - https://znc.in)
[00:58:17] <iphone> s/hasing/hashing
[00:58:17] <mawk> hmm seems like libxcb-util.so.1 is missing
[00:58:21] <The-Compiler> teut: it is the qt.io Qt indeed
[00:58:27] <The-Compiler> mawk: you're on Debian I'm assuming?
[00:58:27] <jabberwock> teut: you may want pyqt
[00:58:30] <mawk> yes The-Compiler
[00:58:34] *** Quits: justyb11 (~justyb@2601:483:500:3ea:290a:dd6f:71bb:1a39) (Quit: Leaving)
[00:58:42] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[00:58:44] <The-Compiler> mawk: https://bugreports.qt.io/browse/QTBUG-88688
[00:58:45] <jabberwock> the "official" Qt is 'spensive last I checked
[00:59:01] <The-Compiler> jabberwock: PyQt is just a wrapper around Qt, so that doesn't make much sense :)
[00:59:09] <mawk> so I have to get the new version of the lib from testing The-Compiler
[00:59:14] <mawk> perfect
[00:59:15] <jabberwock> i thought pyqt was like the "openjdk" of Qt
[00:59:19] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[00:59:20] <teut> no, I was just thinking how matplotlib shows something, in jupyter or in python console
[00:59:24] <The-Compiler> jabberwock: but you can use both PyQt and Qt under the GPL
[00:59:34] <jabberwock> The-Compiler: also, I'm not the snake fellow. please don't vent your frustrations on me
[00:59:37] <teut> I have already used PyQt and kivy
[00:59:49] <teut> but I couldnt relate
[00:59:53] <jabberwock> hmm
[00:59:55] <The-Compiler> jabberwock: most of Qt is available under LGPL even, but PyQt isn't
[01:00:11] <The-Compiler> jabberwock: how am I venting frustrations? Sorry if I came across that way, but I'm genuinely confused now
[01:00:11] <teut> PyQt is just the binding right?
[01:00:14] <The-Compiler> teut: yep
[01:00:27] <teut> so matplotlib is written in c?
[01:00:28] <InPhase> jabberwock: pyside2 is the library for Qt under the LGPL.
[01:00:31] <jabberwock> qt.io doesn't have any obvious callouts for me other than "this costs money"
[01:00:37] <jabberwock> oh, pyside! Thank you - my mistake
[01:00:44] *** Quits: ham5urg (~ham5urg@p5ddfdd3d.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[01:00:56] <teut> the matplotlib peeps on Gitter said me I only require python to contribute
[01:01:04] <teut> require to know*
[01:01:14] <jabberwock> The-Compiler: "doesn't make much sense <SMILEY>" comes across as sarcastic and condescending, and given the other crap happening in the channel I just didn't want to be confused
[01:01:26] <jabberwock> +with anyone else
[01:01:33] <bjs> teut: i guess it depends what part you want to contribute to
[01:01:43] <bjs> matplotlib is fairly highlevel
[01:02:02] <The-Compiler> mawk: I would be carful with that, other parts on your system probably still depend on the old version
[01:02:04] *** Joins: fluxburger (~pernett@wsip-174-79-226-242.lv.lv.cox.net)
[01:02:11] <teut> is jupyter using pyqt too?
[01:02:18] <The-Compiler> mawk: but you can probably just extract that file from the testing package and have both side by side
[01:02:26] <The-Compiler> jabberwock: apologies then, that certainly wasn't the intention
[01:02:31] <jabberwock> No worries <3
[01:02:32] <iphone> god I just want some pulled pork
[01:02:51] <teut> it doesnt look like to me, what I can imagine is it saves the  png and  imports it to an  <img src=>  tag
[01:03:06] <The-Compiler> iphone: it still seems like you're not really interested in productive discussions about Python, yes?
[01:03:18] <mawk> yeah the version is part of the package name The-Compiler , so they will be installed side by side
[01:03:24] <The-Compiler> mawk: ah, nice
[01:03:25] <mawk> it shouldn't break anything
[01:03:29] <grym> and matplotlib is itself the base substrate upon which much else is built
[01:03:29] <jabberwock> teut: depending on how fancy the graph is.. I feel that you could use image src="data:..."
[01:03:37] <jabberwock> if that even matters
[01:03:39] <habnabit_> iphone, i think you've been looking for #python-offtopic
[01:03:47] <mawk> thanks The-Compiler
[01:03:50] <teut> oh the base64 string right
[01:04:11] *** Techcable_ is now known as Techcable
[01:04:12] <jabberwock> yeah. not sure about the constraints on length, but it probably gets pretty ugly for view-source people
[01:04:18] *** Joins: wac (~wac@2601:600:8281:4200:4d7f:bf79:97e5:5a4d)
[01:04:23] <The-Compiler> jabberwock: the commercial part is indeed a pain for qt.io :-/ https://www.qt.io/licensing/open-source-lgpl-obligations is pretty hidden - but there's also https://qt-project.org/ instead.
[01:04:30] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[01:04:36] <jabberwock> thank you! That's super helpful
[01:04:53] <jabberwock> I was using pyside6 I believe
[01:05:10] <teut> so what is the ancestor of matplotlib?
[01:05:16] <habnabit_> matlab
[01:05:27] <teut> no not like that
[01:05:43] <habnabit_> then what
[01:05:53] <jabberwock> that man's father is my father's son...
[01:06:00] <The-Compiler> jabberwock: yeah, PySide2/PyQt5 and PySide6/PyQt6 are pretty much exchangeable - both are Python wrappers from Qt, PyQt being GPL, much older (i.e. more mature) and from a third-party (Riverbank Computing); and PySide being LGPL and by the Qt Company
[01:06:08] <teut> like seaborn and other similar lib are just some  functions which run matplotlib functions
[01:06:13] <The-Compiler> err, s/from Qt/for Qt/
[01:06:43] <jabberwock> 👍
[01:06:59] *** Quits: wac (~wac@2601:600:8281:4200:4d7f:bf79:97e5:5a4d) (Changing host)
[01:06:59] *** Joins: wac (~wac@user/wac)
[01:07:01] <jabberwock> teut: https://github.com/matplotlib/matplotlib seems built from the ground up mostly
[01:07:42] <teut> https://github.com/matplotlib/matplotlib/tree/master/src   any tips on where to start reading the source code from?
[01:08:00] <teut> I write the first file  main.py
[01:08:03] <jabberwock> maybe ctypes
[01:08:08] *** Joins: pnoud (~pnoud@user/pnoud)
[01:08:14] *** Joins: adium (adium@user/adium)
[01:08:21] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:08:32] <jabberwock> what I think you're asking for... I don't think there is a "oh, just go here" link for it
[01:08:34] <teut> hmm , that's  for running c code
[01:08:36] <iphone> oh joy, I get to use PyGitHub to automate master -> main branch renames. How splendid. I'm getting paid to do this too! My Oh My I Sure Do Love Python! <3
[01:08:38] *** Quits: biozz_ (~biozz@178.57.22.163) (Remote host closed the connection)
[01:08:53] <teut> ya , I just needed the  first file that is run
[01:09:00] <jabberwock> yes, matplotlib appears to generate C bindings which later get called by python/ctypes from the python code
[01:09:03] <jabberwock> it's pretty low level
[01:09:29] *** Quits: aslicedbanjo (~aslicedba@host86-150-115-52.range86-150.btcentralplus.com) (Quit: Leaving.)
[01:09:33] <drew> this is proving to be difficult to google: how do I convert a string into its utf-8 hex? so "ID3" should be 49 44 33
[01:09:35] *** Quits: alissa (~ryan@hashbang/bdfl) (Quit: WeeChat 2.9 <:3)~)
[01:10:03] <The-Compiler> drew: "ID3".encode("utf-8").hex(" ")
[01:10:05] <supakeen> teut, you start by reading `setup.py` this leads you to `setupext.py` specifically line 357 of that file.
[01:10:37] *** Joins: daddy (~ryan@hashbang/bdfl)
[01:10:48] <drew> perfect, thank you The-Compiler
[01:11:21] <ssbr> TIL hex takes an argument!
[01:11:22] <teut> nice idea supakeen  , I remember I put the entrypoint for  my code there so they must have too
[01:11:33] <supakeen> Libraries don't have entrypoints.
[01:12:14] <The-Compiler> ssbr: great to make things readable
[01:12:24] <supakeen> If you want the non-C++ bits you look at the `lib/` subdirectory instead of the `src/` subdirectory.
[01:12:39] <supakeen> But since they have to list their installation in `setup.py` you can find all of that from there.
[01:13:03] <teut> https://github.com/matplotlib/matplotlib/blob/master/setup.py#L284  true this is diffent than what I wrote
[01:13:19] <supakeen> I'd assume so, since you didn't write matplotlib.
[01:13:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[01:14:58] *** Quits: MintyPhoenix (~MintyPhoe@c-73-143-208-196.hsd1.ct.comcast.net) (Quit: Leaving)
[01:15:06] <teut> ya, I mean my setupfile looks a whole different
[01:15:21] <teut> Libraries don't have entrypoints.  this I couldnt understand
[01:15:33] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[01:15:54] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[01:16:04] *** Quits: AlwaysLivid (~AlwaysLiv@user/panos) (Remote host closed the connection)
[01:16:05] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[01:16:19] *** Quits: BillyZane2 (~BillyZane@193.160.245.142) (Remote host closed the connection)
[01:16:53] <bjs> teut: an "entry point" is the thing that starts running. Like a script or a "main" function or something.
[01:17:06] <bjs> you don't "run" libraries really
[01:17:31] <teut> I actually tried to publish my codde to pypi and that worked if I remember correctly
[01:17:42] <teut> so how is it not a library
[01:17:47] *** Joins: BillyZane2 (~BillyZane@193.160.245.142)
[01:17:51] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:17:54] <teut> I published on that   pypi testing
[01:18:02] <teut> I forgot the exact name
[01:18:23] <bjs> teut: i'm not sure what you mean, sorry
[01:18:59] <chance> being on pypi isn't what makes it a library. a library is code you import and use in other code, as opposed to a program or script, which is code you execute
[01:19:23] <teut> https://github.com/XtremeGood/MailerKivy/blob/master/setup.py
[01:19:31] <teut> this is my setuptools file
[01:19:47] <jabberwock> teut: a shared library gets linked to and addressed at run time where the function call is replaced with the address to the function in the .so
[01:19:54] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 240 seconds)
[01:20:29] <teut> " linked to and addressed at "?
[01:20:48] <teut> looks likes something to do with linking
[01:20:54] <jabberwock> it does :)
[01:20:59] *** Joins: bidouille (~user_name@trois.potager.org)
[01:21:01] <teut> the linker?
[01:21:07] <teut> you mean like a dll?
[01:21:09] <jabberwock> whatever the OS uses. In linux, ldd
[01:21:10] <bjs> teut: okay when a human says "library" they usually mean "something that has a bunch of functions and stuff you can import"
[01:21:12] <jabberwock> yes or that
[01:21:36] <teut> oh ok , I have heard of that stuff
[01:21:45] <jabberwock> teut: if a shared library had a main() function then the program would not compile properly.. assuming it also has a main() function
[01:21:49] <bjs> teut: there are many ways to actually make a library (technically),  but usually when a human says "library" they do not mean something you can run
[01:21:53] <teut> uncle bob keeps on shared it , that package like a component
[01:21:59] <tk> Is there a function in the standard library f(a, b): which returns a function g(*args, **kwargs) which is equivalent to a(b(*args, **kwargs) ?
[01:22:00] <bjs> teut: so I wouldn't call your program a "library" really, since it's a program you run
[01:22:02] * jabberwock feels trolled
[01:22:15] <teut> saying that*
[01:22:28] <bjs> tk: no
[01:22:43] *** Joins: combinare (~Eric@129.146.172.252)
[01:22:45] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[01:22:48] * tk runs /usr/lib/ld-linux.so.2
[01:22:51] <bjs> tk: but it's not hard to write one if you need it a lot
[01:23:08] <tk> I know there's a technical term for this, what is it?
[01:23:13] *** Quits: greedom (~greedom@2001:16b8:3270:7600:7db0:305d:1b9e:ff6f) (Remote host closed the connection)
[01:23:16] <jabberwock> tk: buffoonery
[01:23:18] <bjs> tk: function composition
[01:23:20] <tk> thanks
[01:23:24] <jabberwock> of buffoonery
[01:23:58] <tk> it seems like an entirely normal thing to want, not buffoonery at all
[01:24:07] <tk> just functional programming
[01:24:13] <grym> something in functools, surely
[01:24:16] *** Quits: flyback (~flyback@2601:540:8201:1e60:1c6e:c54e:4028:6d44) (Quit: Leaving)
[01:24:23] <iphone> lamba functions are fuckin wicked sick yooo
[01:24:43] <iphone> who needs to bind a name to a function when you can just skip that whaaaaaa
[01:25:07] <grym> ohai /ignore
[01:25:44] <jabberwock> it's hard to ignore apple output
[01:26:21] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[01:26:49] *** Quits: Mathisen (mathisen@about/windows/mathisen) (Changing host)
[01:26:49] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[01:27:06] <chance> tk: it can definitely be done in functools, cuz i've used pseudo-introspection to cache signatures and import dynamically, but i can't offer snippets because your much simpler use case is much simpler
[01:27:19] <mcint> is there an easy why to jump-to-definition/import repeatably, without manually searching sys.path each time?  has someone automated the search?
[01:27:29] <jabberwock> The-Compiler: https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code
[01:27:32] <jabberwock> to store somewhere
[01:28:03] <jabberwock> that was ridiculously complex. I feel that the LGPL should have terms against making itself so esoteric
[01:28:09] <chance> mcint: the undesirable but truthful answer, i think, is that the proverbial Everybody has settled on an editor, or extension for their editor, that can do it
[01:28:15] <bjs> chance: tk: i mean it's just `def compose(a, b): def g(*args, **kwargs): return a(b(*args, **kwargs)); return g`
[01:28:26] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 268 seconds)
[01:28:33] <chance> jabberwock: the applicability of the linking exception to interpreted languages is unclear and afaik nobody's been sued over it yet soooo =P
[01:28:40] <tk> I was hoping to make it work for an arbitrary number of functions
[01:28:41] <chance> i just avoid it so as not to become the test case
[01:28:49] <The-Compiler> jabberwock: or qt.io > Download > Go open source and download the installer; or "Source Code" and you'll get there too
[01:28:51] <bjs> chance: tk: i suspect the reason `functools` does not include this is because it'd be hard to attach a good signature to the object
[01:28:52] <jabberwock> chance: I don't speak your language :(
[01:28:58] <bjs> tk: well it's not hard to do that either
[01:29:19] <The-Compiler> jabberwock: but yeah, the website being 99% about the commercial stuff is something many people don't agree with
[01:29:21] <chance> jabberwock: the part of the LGPL that makes it okay to use the code as a library without GPLing it, the way it's written, really only applies to compiled languages like C
[01:29:27] <jabberwock> The-Compiler: that's way too many clicks to be accepted by modern UX let alone "how do I know I want to use this when I can't find it?"
[01:29:33] <jabberwock> just let me have my moment
[01:29:38] <The-Compiler> jabberwock: I don't disagree :)
[01:29:46] <iphone> jabberwock: totally on point
[01:30:02] *** Joins: flyback (~flyback@2601:540:8201:1e60:c56c:ec62:6f56:9a57)
[01:30:12] *** Joins: jftsang (~jftsang@87.114.69.72)
[01:30:33] <jabberwock> chance: you lawyer.
[01:30:37] <chance> jabberwock: this is especially frustrating to me because if a lib is licensed LGPL, the author 100% definitely *intends* for the exception to apply. that's always true because there is literally no other reason to pick the LGPL over the GPL. but people don't *know* it doesn't apply to python
[01:30:56] <jabberwock> yeah, it's totally abusing the original intention IMO
[01:30:59] <chance> so they just merrily keep releasing libs LGPL and making them unavailable to permissive projects (and proprietary ones but i am less worried about that)
[01:31:01] <jabberwock> but that's like a side rant
[01:31:26] <chance> it is, i just find it mildly important to warn python devs whenever i see them talking about importing an LGPL lib that they are now in a legal grey area and probably on the wrong edge
[01:31:28] <The-Compiler> jabberwock: I can see how The Qt Company wants to drive commercial sales and have some 350 people to pay, but yeah, the longer I follow Qt the more it drives away from the whole open source thing
[01:31:44] <The-Compiler> jabberwock: also see https://www.qt.io/blog/qt-offering-changes-2020
[01:31:53] *** Quits: flyback (~flyback@2601:540:8201:1e60:c56c:ec62:6f56:9a57) (Read error: Connection reset by peer)
[01:31:57] <jabberwock> I just don't like GTK/+
[01:32:09] <The-Compiler> yeah, Qt is still an excellent choice IMHO
[01:32:12] <habnabit_> chance, the same people allege that dynamic linking provides the same loophole. i don't buy it
[01:32:14] *** Joins: flyback (~flyback@2601:540:8201:1e60:c56c:ec62:6f56:9a57)
[01:32:24] <iphone> honestly, just use SDL2
[01:32:38] *** Quits: flyback (~flyback@2601:540:8201:1e60:c56c:ec62:6f56:9a57) (Read error: Connection reset by peer)
[01:32:44] <habnabit_> chance, but sure i'll acknowledge the precedent is weak
[01:32:53] *** Joins: flyback (~flyback@2601:540:8201:1e60:c56c:ec62:6f56:9a57)
[01:32:54] *** Joins: justinf210 (~justinf21@63.sub-97-44-0.myvzw.com)
[01:32:57] <kosh> my understand it that is has never been tested in court and nobody has even tried to threaten over it
[01:33:06] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[01:33:22] <jabberwock> people settle because society puts enough pressure on them without having to chase a ghost like that
[01:33:23] <kosh> and considering that python devs do release libraries under lgpl their intention is quite clear on what they intent it to mean
[01:33:25] * jabberwock ducks out
[01:33:28] *** Quits: fanta (~fanta@pd9eed5c2.dip0.t-ipconnect.de) (Quit: Client closed)
[01:33:54] <kosh> jabberwock, other gpl stuff has been settled but I don't even know of threats for lgpl used in this way
[01:34:39] <jabberwock> kosh: the known IT industry would collapse under that requirement
[01:34:59] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:35:19] <jabberwock> Disney comes to mind
[01:35:21] <jabberwock> ahem.
[01:35:50] * jabberwock awaits the Truly Nolen hearse
[01:35:53] *** Joins: diek (~derrick@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[01:36:10] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[01:36:17] <kosh> jabberwock, under what requirement?
[01:36:22] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[01:36:34] <jabberwock> I guess my perspective is that if the company "can" afford to pay for Qt, they will because they'll face litigation if not for their own moral compass
[01:36:57] *** Joins: masterkorp1 (~masterkor@user/masterkorp)
[01:37:13] *** Quits: masterkorp (~masterkor@user/masterkorp) (Read error: Connection reset by peer)
[01:37:13] *** masterkorp1 is now known as masterkorp
[01:37:21] *** Joins: kesara (~kesara@2404:440c:17e5:c300:d830:8803:935a:2952)
[01:37:27] <jabberwock> kosh: I may have misread what you typed. I was thinking that the idea of "really" going after people that abuse licenses would probably bring down a lot of big companies and force them to pay or comply
[01:37:52] *** Joins: KindOne (~KindOne@user/kindone)
[01:37:54] <iphone> I just pretend licenses don't exist.
[01:37:58] <mcint> (how) can i use subprocess with interactive shell utils?
[01:38:00] <kosh> jabberwock, there are lots of developers that have made libraries under the lgpl and some of them are designed for python
[01:38:06] <iphone> unless its strictly commercial and I have to register
[01:38:06] <jabberwock> mcint: shell=True
[01:38:15] <kosh> jabberwock, if you used them from python I don't think there is any real risk of being sued for it
[01:38:29] <The-Compiler> jabberwock: I'm assuming mcint means something that reads input from the user, not a shell as in bash
[01:38:35] <kosh> jabberwock, and the intention is if you just use the library that is fine, if you modify the library you have to release the changes
[01:38:42] <jabberwock> oh.. yes true
[01:38:53] <kosh> and they would consider importing to just be like linking
[01:39:03] *** Joins: kjjaeger (~kjjaeger@149.164.7.210)
[01:39:04] <The-Compiler> mcint: there's subprocess.Popen.communicate, but https://pexpect.readthedocs.io/ might be a better tool for the job
[01:39:13] <jabberwock> kosh: I've gotta be careful about what I say
[01:39:13] *** Quits: st4nd (~st4nd@user/st4nd) (Read error: Connection reset by peer)
[01:39:31] <mcint> pexpect and just bidir-proxy the input/output, The-Compiler ?
[01:39:40] <The-Compiler> mcint: what's your goal?
[01:39:41] *** Joins: JordiGH (~jordi@user/jordigh)
[01:39:47] *** Quits: erry (~erry@errietta.me) (Quit: WeeChat 2.5)
[01:39:51] *** Joins: biozz (~biozz@178.57.22.163)
[01:39:54] *** Parts: JordiGH (~jordi@user/jordigh) (Leaving)
[01:40:10] <tk> bjs: I've produced this: http://ix.io/3q46
[01:40:26] <mcint> allow user to use less, but when they quit less, return to my program
[01:40:27] <jabberwock> kosh: I'm also speaking out of my butt since I haven't read the LGPL etc. in years
[01:40:36] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:40:45] <The-Compiler> mcint: I think you should be able to just run it via subprocess.run then?
[01:41:01] *** Joins: erry (~erry@errietta.me)
[01:41:27] <The-Compiler> mcint: e.g. subprocess.run(['less', '/usr/share/dict/words'])
[01:41:34] <mcint> The-Compiler: yuup, thanks. my skimming of subprocess was super-ineffective
[01:41:41] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[01:41:46] <jabberwock> kosh: but on your last point, I think its a little tricky when releasing the changes means exposing information that could be abused
[01:41:53] <The-Compiler> mcint: as long as you don't explicitly capture the input/output, they'll just be passed through
[01:42:29] <tk> In fact, someone should tell me if there's a cleaner way to do this: http://ix.io/3q46
[01:42:33] <mcint> sensible!  well, hopefully I have something fun to report back with soon
[01:42:37] <The-Compiler> mcint: might want to add check=True though, if you want an exception if less fails
[01:43:48] <jabberwock> tk: is there room for a decorator somewhere?
[01:43:51] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Quit: bye)
[01:44:02] *** Joins: nshire (~nshire@47.146.41.184)
[01:44:04] <tk> jabberwock: how should I know? Decorate what?
[01:44:18] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 240 seconds)
[01:44:25] <jabberwock> I dunno, not a python guru. If your goal is readability then that's not it lol
[01:44:27] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[01:44:40] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[01:44:41] *** Joins: bilegeek (~bilegeek@2600:1008:b041:5047:48ad:ae3d:d2ea:7d42)
[01:44:50] <jabberwock> I mean.. what is 2? or 1?
[01:44:57] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[01:45:11] <tk> I mean, this is a tiny function of 6 lines, if you can't read it immediately it shouldn't take too long to understand it. I think the 1 and 2 are pretty understandable all things considered.
[01:45:16] *** Joins: milosz__ (~milosz@user/milosz)
[01:45:25] <bjs> tk: `def compose(*funcs): def g(*args, **kwargs): r = funcs[-1](*args, **kwargs); for f in funcs[-1::-1]: r = f(r); return r; return g`  or something
[01:45:30] <chance> kosh: this was my initial point. the intention of the LGPL is clear and unambiguous, and it's invariably true that python devs who release python code under that license are unaware. this is exactly why nobody's been sued (yet, anyway.) but if/when someone DOES get sued, the outcome will boil down to whether the letter or the spirit of a licensing
[01:45:31] <chance> agreement is enforceable, at which point i'm sure not a lawyer but lawyers don't seem to like those odds.
[01:45:41] *** Quits: milosz_ (~milosz@user/milosz) (Read error: Connection reset by peer)
[01:45:43] *** Quits: Mrokii (mrokii@gateway/vpn/airvpn/mrokii) (Ping timeout: 272 seconds)
[01:46:01] *** Quits: nshire (~nshire@47.146.41.184) (Changing host)
[01:46:01] *** Joins: nshire (~nshire@user/nshire)
[01:46:02] *** Quits: PonyBlocks (ponyblocks@user/ponyblocks) (Read error: Connection reset by peer)
[01:46:08] *** Joins: Vonter (~Vonter@user/vonter)
[01:46:10] <tk> bjs: but that does the for loop every time you call the composed function, I would rather it get done once ahead of time
[01:46:17] * SnoopJ is skeptical about the claims about imports constituting derivative works
[01:46:17] <tk> bjs: I plan on calling the composed functions quite a few times
[01:46:20] <bjs> tk: how do you do it "ahead of time" ?
[01:46:43] *** Parts: kesara (~kesara@2404:440c:17e5:c300:d830:8803:935a:2952) ()
[01:46:43] <tk> hmm, good question
[01:46:48] <jabberwock> SnoopJ: wait until someone makes glibc commercial
[01:46:49] <tk> this also does it at runtime
[01:47:09] <SnoopJ> jabberwock, the license doesn't stop them from selling it
[01:47:23] <tk> bjs: I'll just stick to doing it by hand. I only need it twice so far.
[01:47:41] <jabberwock> SnoopJ: I jest, but that idea isn't too far fetched
[01:47:43] <grym> SnoopJ: yeah, but blender sure believes that they are
[01:47:57] <SnoopJ> jabberwock, my point is that `import somelib` is not unambiguously using the so-and-so licensed `somelib`
[01:48:09] <jabberwock> ah.. yes
[01:48:10] <tk> the alternative solution is to write something which emits python bytecode :D
[01:48:15] *** Joins: ksr (~kesara@2404:440c:17e5:c300:d830:8803:935a:2952)
[01:48:16] *** Quits: justinf210 (~justinf21@63.sub-97-44-0.myvzw.com) (Ping timeout: 244 seconds)
[01:48:19] <SnoopJ> GNU makes a very strong statement about this, but...why should we take their claim at face value?
[01:48:23] <grym> you can find out! just sue someone, and pay lots of money, and wait to see what the jury says
[01:48:26] <grym> then you'll know
[01:48:36] <greyblue9> clearly not
[01:49:06] *** Joins: biozz (~biozz@178.57.22.163)
[01:49:15] <mcint> i can't write a try: except ...: in a 1-liner, can i?
[01:49:42] <tunixman> I think if you throw in a ; you can...
[01:50:00] <jabberwock> not here
[01:50:05] <bjs> mcint: no
[01:50:37] <mcint> ...or write a context manager that would allow me to?
[01:50:40] <jabberwock>     try: raise Exception and except: print('hai')
[01:50:42] <jabberwock>                              ^
[01:50:46] <jabberwock> oops, with ; as well
[01:50:53] *** Quits: vdotcodes (~textual@ool-44c1f7a5.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:51:06] <chance> def try_except(_try, _except):
[01:51:40] <tunixman> yeah, it doesn't work...
[01:52:01] <tunixman> what about {}
[01:52:03] * tunixman ducks
[01:52:04] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[01:52:29] <SnoopJ> SyntaxError: not a chance
[01:52:49] *** Joins: selimcan (~selimcan@138.199.36.156)
[01:52:58] *** Joins: dkmueller (~dkmueller@2a01:c23:c070:3a00:1107:6617:739e:3380)
[01:53:16] <tk> bjs: I think I'll stick with your version, I think it should perform the same, if this causes some massive bottleneck I'll revise it in the future, for the time being it cleans the code up a bit
[01:53:19] <tk> bjs: thanks
[01:54:12] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 268 seconds)
[01:54:29] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[01:55:09] <chance> tk: bjs: fwiw the main reason i suggested functools is because its introspection capabilities allow you to (silently or not) parse out invalid kwargs, as well as detecting overstuffed calls
[01:55:23] *** Joins: dcompoze (~dcompoze@5E98D6D9.static.tld.pl)
[01:55:31] <chance> but this might be overkill for you, especially if the composer itself will only be called with exception handling
[01:55:39] *** Quits: selimcan (~selimcan@138.199.36.156) (Client Quit)
[01:55:45] <chance> i was trying to abstract out whole modules =P
[01:55:54] <tk> hmm
[01:55:58] <tk> I will investigate later
[01:56:16] <tk> here I'm just trying to avoid having to write outbox.send(irctokens.build(...))
[01:56:35] <tk> and stream.send_all(irctokens.build(...))
[01:56:49] <chance> needed another builtin in addition to functools, iirc. been a while. but it wasn't hard to find. something about `signature`
[01:57:17] <SnoopJ> likely `inspect`
[01:57:24] <chance> yep ty that's it
[01:57:36] *** Quits: teut (~teut@182.69.85.39) (Quit: Connection closed)
[01:57:46] <SnoopJ> most introspection stuff of this sort lives there
[01:58:51] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:59:13] <tunixman> You just need to create a PR for 3.x https://github.com/eshirazi/python-with-braces
[01:59:18] <chance> one module each direction, as i recall. i'll look for these bits. it was some *insane* code.
[01:59:30] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 240 seconds)
[01:59:37] *** Quits: olasd (~olasd@softwareheritage/olasd) (Quit: freenode2)
[01:59:48] <SnoopJ> metaprogramming and insanity are fast friends
[01:59:49] *** Joins: olasd (~olasd@softwareheritage/olasd)
[02:00:16] <tk> metaprogramming is the best kind of programming
[02:00:18] *** Quits: BernieMont (~Bernard@4.59.197.170) (Quit: Leaving)
[02:00:24] <jabberwock> bai bai freenode, if anyone was curious
[02:00:38] <puff> Hm, okay so the answer to my udp broadcast problem was to check "ifconfig -a" output and get the proper UDP broadcast address from there.  Question is, how do I do this programmatically in the future?
[02:00:58] <chance> feh. the only copy i've got is insta-self-doxx, which i'll probably do on this network anyway, but this is day 2 ;)  owell.
[02:01:25] <tunixman> puff: https://pypi.org/project/netifaces/ might help
[02:01:36] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[02:02:35] <puff> tunixman: Thanks.
[02:03:16] <bjs> tk: bottleneck?
[02:03:37] <tk> bjs: I'm calling the composed functions in a few places
[02:03:51] <bjs> tk: but what part do you think could be improved?
[02:03:53] <bjs> in my function
[02:03:58] *** Praise- is now known as Praise
[02:04:05] <tk> the looping part
[02:04:12] <bjs> tk: to do what?
[02:04:14] <bjs> instead
[02:04:28] <tk> just directly call the next function rather than iterating over a list
[02:04:41] <tk> I think I'm imagining inefficiencies anyway
[02:04:44] <bjs> tk: it's basically the same isn't it?
[02:04:51] <bjs> if there's any inefficiency that is not it
[02:04:56] <tk> well, I imagine fetching from a list is less direct
[02:05:43] <tk> foo(bar(baz('abc'))) in my mind should be faster than l = [foo, bar, baz] l[1](l[2](l[3])))
[02:06:02] <tk> especially with branches in between
[02:06:22] <bjs> tk: it's barely worth mentioning
[02:06:23] <tk> but at the end of the day, I don't exactly know how it's all implemented under the hood.
[02:06:26] <bjs> compared to like, the function call.
[02:07:22] *** Joins: biozz (~biozz@178.57.22.163)
[02:07:29] *** Quits: diek (~derrick@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Remote host closed the connection)
[02:07:58] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[02:08:02] *** Joins: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[02:09:27] *** Joins: Fiji (~Fiji@user/fiji)
[02:11:55] <SnoopJ> tk, if you don't have the profiling data in-hand, you are by definition imagining them. That doesn't mean you're wrong, but "measure it" is always good advice.
[02:12:05] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 268 seconds)
[02:12:18] *** Quits: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Ping timeout: 240 seconds)
[02:12:20] <tk> it's fine, I doubt this will become a problem until using python for this purpose becomes a problem
[02:12:38] *** Joins: ham5urg (~ham5urg@p5ddfdd3d.dip0.t-ipconnect.de)
[02:14:03] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[02:14:58] *** Joins: Celeo (~Celeo@2603-8001-3301-2e00-c88b-d215-4d9e-4b97.res6.spectrum.com)
[02:15:02] <SnoopJ> the bytecode generated for the latter is just under twice the amount, and is a superset of the bytecode for the former. The generated stuff (LOAD_NAME, LOAD_CONST, BINARY_SUBSCR) should be relatively fast, but it would be surprising if it weren't slower because it's doing strictly more work
[02:15:54] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 264 seconds)
[02:16:18] *** Quits: YoungPotato (~user@155.98.225.28) (Quit: ERC (IRC client for Emacs 27.2))
[02:16:27] *** Joins: biozz (~biozz@178.57.22.163)
[02:16:42] <SnoopJ> (in CPython, anyway)
[02:17:23] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Remote host closed the connection)
[02:17:37] *** Joins: southey (~foxtrot@user/foxtrot)
[02:17:40] <bjs> SnoopJ: i think you're a little over-eager with the dis output :P
[02:17:47] <SnoopJ> bjs, in what way
[02:18:12] <bjs> SnoopJ: I mean, the dis output tells you it looks at the list, the index and subscripts it
[02:18:21] <bjs> it doesn't really give you any insight :)
[02:18:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:19:06] <SnoopJ> not useful insight, anyway
[02:20:34] *** Quits: disi (~disi@107-131-127-0.lightspeed.sntcca.sbcglobal.net) (Quit: Client closed)
[02:21:23] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 272 seconds)
[02:21:56] *** Joins: leoziri (~igloo@host81-159-129-48.range81-159.btcentralplus.com)
[02:21:59] *** Quits: leoziri (~igloo@host81-159-129-48.range81-159.btcentralplus.com) (Excess Flood)
[02:22:14] <xaltsc> Hey, does anyone know of good resources on type hints in Python, or should I just go through the PEPs ?
[02:22:27] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[02:22:42] *** Joins: Ivyy (~Ivyy@2001:a61:1374:1501:1d80:27fb:78e3:b367)
[02:22:44] *** Joins: audiocat (~audio@2603-8081-1800-0062-4de8-ec55-6e80-3226.res6.spectrum.com)
[02:23:03] *** Joins: vrt3 (~vrt3@d54C5733D.access.telenet.be)
[02:24:26] *** Joins: majors (~majors@user/majors)
[02:24:51] *** Quits: Akuli (~Akuli@82-203-164-49.bb.dnainternet.fi) (Quit: Leaving)
[02:25:28] *** Joins: candy (~tvrtko@93-138-19-175.adsl.net.t-com.hr)
[02:26:02] <ChrisWarrick> xaltsc: syntax-wise, the `typing` module docs should be more-or-less enough
[02:26:09] <ChrisWarrick> xaltsc: usage-wise, read the mypy docs
[02:26:31] <xaltsc> what do you mean, usage-wise ?
[02:26:32] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Client Quit)
[02:26:44] <bjs> xaltsc: as in,  what the different things mean and how to use them
[02:26:49] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[02:27:16] <bjs> the `typing` docs are usually okay,  but the documentation for your particular type checker should have a good amount of info too
[02:27:45] <xaltsc> type hints in python are widely different than general types, say, in haskell ?
[02:27:54] *** Joins: p-i- (~Ohmu@node-owh.pool-118-173.dynamic.totinternet.net)
[02:28:03] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:28:05] *** Quits: ksr (~kesara@2404:440c:17e5:c300:d830:8803:935a:2952) (Quit: ksr)
[02:28:09] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 272 seconds)
[02:28:23] <graingert> xaltsc: have a go in mypy-play.net
[02:28:33] <xaltsc> I think I don't get how the whole type-cheking works in python at all
[02:28:48] *** Joins: pnoud (~pnoud@user/pnoud)
[02:29:09] <bjs> xaltsc: I mean it works the same way it does in any language;  you annotate values with some type information and the type checker reads the code and looks at the annotations and then works out whether any of the "actual" types disagree with your annotations
[02:29:42] <bjs> of course each type system comes with its own nuances and stuff
[02:29:44] *** Joins: lpapp_ (~lpapp@84.71.27.252)
[02:29:47] *** Parts: lpapp_ (~lpapp@84.71.27.252) ()
[02:29:51] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[02:30:07] *** Quits: p-i-_ (~Ohmu@node-ofl.pool-101-109.dynamic.totinternet.net) (Ping timeout: 244 seconds)
[02:30:50] <xaltsc> the thing being that the type-checker is separate from python itself and I have a variety of options for it ?
[02:30:56] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:30:58] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:31:06] <bjs> xaltsc: well, the type checker is really always a separate thing
[02:31:09] *** Joins: Adoi (~Adoi@user/adoi)
[02:31:17] <bjs> sometimes that fact is just hidden from you
[02:31:30] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 240 seconds)
[02:31:44] <bjs> xaltsc: but yes, for Python it's a very separate tool you run yourself
[02:31:50] <xaltsc> I meant, ghc is often pretty obnoxious about wrong types :D
[02:32:09] <xaltsc> Besides from mypy, what are the options then ?
[02:32:18] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[02:32:39] <bjs> xaltsc: well ghc runs the typechecker for you, basically.
[02:32:49] <bjs> I mean Haskell actually uses the types it infers quite a bit, so you cannot turn it off completely
[02:32:57] <bjs> xaltsc: there's pytype (google's one)
[02:33:04] *** Quits: |7| (~kvirc@user/seachdamh) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[02:33:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[02:33:54] <The-Compiler> xaltsc, bjs: there's also something from Microsoft and from Facebook - but pretty much all projects I've seen use mypy
[02:33:54] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) ()
[02:34:19] <bjs> yeah pyright and... I forget the other
[02:34:55] <The-Compiler> pyre
[02:34:56] <bjs> pyre!
[02:34:57] <bjs> yes
[02:35:06] <emerent> I've used pyright before, it has disagreed in some cases with mypy
[02:35:12] <bjs> I had to do some googling
[02:35:15] <emerent> satisfying two type checkers with sometimes conflicting expectations
[02:35:17] <emerent> is not nice
[02:35:21] <xaltsc> pyre read as it were French means "worst"...
[02:35:26] <The-Compiler> I think Pylance in VS Code uses pyright
[02:35:29] <bjs> emerent: I think they all have different sets what they allow
[02:35:40] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:35:52] <emerent> right, which is why I always go for just mypy as the default
[02:35:56] <mayhew> it's amazing how having so *too* much support can turn into a problem in some ways :)
[02:36:17] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[02:36:32] <xaltsc> So basically, what you all are saying is that I should just go with mypy and ignore the rest, right ?
[02:36:39] <emerent> mayhew: the issue is more one of lack of standardization
[02:37:06] <The-Compiler> emerent: is it really? There are lots of PEPs on the topic
[02:37:28] <mayhew> xaltsc: I think it depends on what you want to prioritize. mypy is a good solid base, but if you want amazing editor integration, that could lead you down another path.
[02:38:13] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:38:26] <emerent> The-Compiler: I don't know if this is still the case, but pyright used to deliberately not support `# type: ignore` comments
[02:38:31] <emerent> which was a break from the standard
[02:38:31] <xaltsc> mayhew: I use vim and have only used a LSP for just a few days, so idc about that :D thanks
[02:38:51] <mayhew> emerent: it supports those comments now
[02:39:00] <emerent> and I think mypy later introduced finer grained ignore comments that ignore only a specific error
[02:39:23] *** Joins: ksr (~KSR@124.197.12.15)
[02:39:28] <emerent> which was not standardized I think? Maybe it is now, but to standardize that you need to also standardize the types and names of errors
[02:40:10] <emerent> mayhew: right, I remember even commenting in a pyright issue advocating for the support
[02:40:46] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 244 seconds)
[02:41:00] <emerent> almost immediately after they were supported, mypy came out with their fine grained ignore comments
[02:41:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:41:18] <emerent> which pyright didn't support of course and I don't know how they could have
[02:41:24] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[02:42:04] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[02:42:49] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.1)
[02:44:43] *** Joins: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[02:45:43] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-5175-ae24-0d35-32ee.res6.spectrum.com)
[02:45:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[02:46:29] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[02:46:45] <rannnn8888> Hey i can move the first item in list to last ? maybe pop ?
[02:47:21] <bjs> rannnn8888: yes L.append(L.pop(0)) for example,  but it's not a very efficient operation
[02:47:38] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:48:01] <yitz> Why would you want to do that and what are you trying to do?
[02:48:16] <graingert> rannnn8888: You can rotate a deque very quickly
[02:48:44] <graingert> rannnn8888: https://docs.python.org/3/library/collections.html#collections.deque.rotate
[02:48:58] <mayhew> couldn't you also assign some temp variables and directly assign into [0] and [-1]?
[02:49:03] *** Quits: jftsang (~jftsang@87.114.69.72) (Quit: Client closed)
[02:49:24] <bjs> mayhew: you can't *just* assign to [0]
[02:50:16] <bjs> I guess you interpreted it as a swap:  [0,1,2,3,4] => [4,1,2,3,0]  whereas I think grym and I interpreted it as a rotate: [0,1,2,3,4] => [1,2,3,4,0]
[02:50:25] <bjs> graingert and I* sorry
[02:51:39] <graingert> rannnn8888: do you want a swap or a rotate?
[02:52:14] *** Joins: timthelion (~timothy@185.91.169.13)
[02:52:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:52:50] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Quit: bye)
[02:52:52] <rannnn8888> bjs Thanks for exactly what I wanted graingert Thanks
[02:54:57] <rockSTONE> anyone have a favourite config-to-dict validation library? i know there's like a billion of them
[02:55:28] <ammar2> what's a config-to-dict validation library?
[02:55:33] *** Joins: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net)
[02:56:07] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[02:56:45] <vrt3> ammar2: I'm guessing something that reads some kind of configuration file, validates it against some kind of schema, and returns the configuration as a dict.
[02:56:49] *** Quits: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net) (Quit: Leaving)
[02:57:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:57:11] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Quit: Leaving)
[02:57:31] <graingert> rockSTONE: https://pydantic-docs.helpmanual.io/usage/settings/
[02:58:28] <rockSTONE> graingert: yeah i've heard about pydantic in passing a few times but never really looked, thanks
[02:59:48] <rockSTONE> looks perfect for my use case actually
[03:00:55] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 244 seconds)
[03:02:48] *** Quits: Nact (~l@host-85-27-123-155.dynamic.voo.be) (Read error: Connection reset by peer)
[03:03:53] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[03:05:13] *** Quits: lightdot (~weechat@user/lightdot) (Quit: Gone parachuting!)
[03:05:40] *** Joins: lightdot (~weechat@user/lightdot)
[03:08:08] *** Quits: redkrieg (~redkrieg@user/redkrieg) (Quit: leaving)
[03:09:10] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:09:54] *** Quits: ffledgling (~textual@2620:10d:c090:500::6:2115) (Ping timeout: 240 seconds)
[03:10:18] *** Quits: ssbr (~ssbr@2620:15c:10f:203:644:3df4:ca7c:7577) (Ping timeout: 240 seconds)
[03:11:18] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[03:11:19] *** Joins: ssbr (~ssbr@2620:15c:10f:203:987:dba7:7456:702a)
[03:11:44] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[03:11:46] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[03:11:49] *** Quits: ssbr (~ssbr@2620:15c:10f:203:987:dba7:7456:702a) (Client Quit)
[03:12:15] *** Joins: redkrieg (~redkrieg@user/redkrieg)
[03:12:16] *** Joins: ssbr (~ssbr@2620:15c:10f:203:987:dba7:7456:702a)
[03:12:19] *** Joins: somlis (~somlis@user/somlis)
[03:12:20] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:12:27] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[03:12:40] *** Quits: kjjaeger (~kjjaeger@149.164.7.210) (Quit: Client closed)
[03:13:07] *** Joins: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com)
[03:16:38] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[03:17:20] *** Joins: thib (~thib@wikimedia/Thibaut120094)
[03:17:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[03:17:39] *** Joins: zigo (~quassel@shade.infomaniak.ch)
[03:18:08] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-5175-ae24-0d35-32ee.res6.spectrum.com) (Quit: Client closed)
[03:18:41] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 244 seconds)
[03:19:56] *** Quits: lightdot (~weechat@user/lightdot) (Quit: Gone parachuting!)
[03:21:10] *** Quits: shadoozo (~shadoozo@user/shadoozo) (Quit: ZNC - https://znc.in)
[03:22:11] <vrt3> Does anyone know what happened to effbot.org? It had quite a lot of good docs, but now it only says "effbot.org on hiatus  effbot.org is taking a break. We’ll be back, in some form or another."
[03:22:40] *** Joins: shadoozo (~shadoozo@user/shadoozo)
[03:23:30] <SnoopJ> vrt3, no, but the wayback machine has pretty good records
[03:23:38] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[03:24:25] <vrt3> Down to at the moment, at least for me ...
[03:24:34] <vrt3> https://web.archive.org/web/20200315142708/http://effbot.org/ says Temporarily Offline
[03:24:50] *** Joins: avatar (~avatar@178.239.167.166)
[03:25:39] <SnoopJ> well, when the power outage is over, anyway :)
[03:26:24] <graingert> vrt3: It's ineffable
[03:26:49] * SnoopJ mirrored a copy of the "Call By Object" article on that site, but nothing else
[03:27:33] *** Quits: Ivyy (~Ivyy@2001:a61:1374:1501:1d80:27fb:78e3:b367) (Remote host closed the connection)
[03:27:34] <vrt3> It's been 8 hours now according to their tweet. Hope they manage to get power back.
[03:28:57] <avatar> how many users do we usually see here?
[03:29:50] *** Quits: clueful (~Guest39@184.102.206.193) (Quit: Client closed)
[03:30:05] *** Joins: derelict (~derelict@user/derelict)
[03:30:08] *** Quits: bilegeek (~bilegeek@2600:1008:b041:5047:48ad:ae3d:d2ea:7d42) (Quit: Leaving)
[03:31:41] *** Quits: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Ping timeout: 272 seconds)
[03:32:09] *** Joins: wons (wons@user/wons)
[03:32:27] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[03:33:10] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Quit: Ping timeout (120 seconds))
[03:33:24] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[03:33:45] <altendky> i'm used to 1800'ish in #python from the past few years
[03:33:53] <rannnn8888> hey i have script write to db and add triger when have update its move its to new table,its ok if i llistem like this from other script him ? https://dpaste.org/t45S
[03:35:22] <rannnn8888> I do not want to use an external DB
[03:35:23] <SnoopJ> ~1000 is pretty typical here in recent memory; I'm sure there will be a small uptick given the events of the last ~48 hours
[03:35:51] <avatar> yea i'm only returning to IRC after a hiatus of what.. 10 years :)
[03:35:51] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Quit: Leaving, bye!)
[03:35:54] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[03:36:02] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[03:36:05] <avatar> and i don't have my popcorn handy
[03:36:17] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[03:36:19] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:36:20] <rannnn8888> bjs i know you good in this :D
[03:36:25] <SnoopJ> at any rate, there's usually someone around :)
[03:36:35] *** Joins: nvz (~user@nvz.farted.online)
[03:36:43] <avatar> always good, SnoopJ
[03:36:54] <avatar> i'm in the NL
[03:37:04] <avatar> timezones has always been an issue for me lately
[03:37:39] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[03:37:53] *** Joins: kjjaeger (~kjjaeger@149.164.7.210)
[03:39:06] *** Quits: smqra (~rooba@208.110.85.44) (Quit: WeeChat 1.9.1)
[03:39:40] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 272 seconds)
[03:40:20] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:40:43] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[03:42:06] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[03:43:14] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[03:43:56] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[03:44:15] *** Joins: jazzy (~jaziz@2600:380:4547:d128:8473:ff3e:752d:860f)
[03:44:26] *** Quits: dkmueller (~dkmueller@2a01:c23:c070:3a00:1107:6617:739e:3380) (Quit: WeeChat 3.1)
[03:44:35] *** Quits: wons (wons@user/wons) (Quit: WeeChat 3.2)
[03:45:12] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[03:45:22] *** Quits: qlixed_again (~qlixed@152.170.44.143) (Ping timeout: 272 seconds)
[03:45:33] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[03:45:42] *** Joins: armandokeller (~armandoke@200.159.170.169)
[03:46:05] *** Quits: ZedHedTed (~ZedHedTed@pool-98-118-47-241.bstnma.fios.verizon.net) (Quit: reconfig)
[03:46:23] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:46:59] *** Joins: chance (~chance@50.47.109.175)
[03:47:01] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[03:47:48] *** Quits: ratelius (ratelius@gateway/vpn/protonvpn/ratelius) (Ping timeout: 268 seconds)
[03:48:00] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[03:48:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:49:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 244 seconds)
[03:49:16] <p-i-> https://bpa.st/4WAA <-- is there any way to pretty print this variable?
[03:49:29] <p-i-> pprint gives the top box
[03:49:30] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:49:30] *** Wulf4 is now known as Wulf
[03:50:12] <p-i-> I guess it doesn't know how to handle AttributeDict
[03:50:23] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Quit: bye)
[03:50:35] *** Quits: zeenk (~zeenk@188.26.30.39) (Quit: Konversation terminated!)
[03:50:58] <avatar> import pprint?
[03:52:18] *** Joins: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[03:52:31] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Quit: Leaving.)
[03:52:33] <armandokeller> p-i- have you tried icecream (https://github.com/gruns/icecream) ?
[03:53:13] <maxtim> how can I change logging level after setting logging.basicConfig(level=logging.INFO) ?
[03:53:50] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[03:54:45] *** Quits: eat-oats (~adam@cpc96300-lewi18-2-0-cust378.2-4.cable.virginm.net) (Quit: Lost terminal)
[03:54:54] <SnoopJ> maxtim, call setLevel() on the relevant Logger (you probably want to use the getLogger() helper to retrieve that)
[03:55:10] *** Joins: somlis (~somlis@user/somlis)
[03:56:24] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 244 seconds)
[03:56:37] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[03:56:43] *** Quits: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr) (Ping timeout: 244 seconds)
[03:57:01] <maxtim> ... SnoopJ I might not be using logging properly.... I have logging.basicConfig(filename=myfile, level.logging.INFO, format=[...], datefmt=[...]) but it isn't assigned to a var
[03:57:38] <maxtim> I'll refer to the docs...
[03:58:20] <SnoopJ> maxtim, what you're using isn't improper, but basicConfig() is as the name suggests pretty basic. What you're configuring with those calls is the root logger (what you get when just calling getLogger())
[03:58:41] <SnoopJ> The docs are quite good though :)
[03:58:55] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[03:59:10] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[03:59:51] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:00:02] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[04:00:20] *** Quits: mike (~mike@45.126.44.146) (Quit: WeeChat 1.9.1)
[04:00:59] *** Quits: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com) (Read error: Connection reset by peer)
[04:01:14] *** Quits: kjjaeger (~kjjaeger@149.164.7.210) (Quit: Client closed)
[04:02:29] *** Joins: wyclif (~wyclif@user/wyclif)
[04:02:34] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:04:56] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[04:05:24] *** Joins: Fiji (~Fiji@user/fiji)
[04:05:33] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[04:06:01] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[04:07:32] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[04:08:13] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[04:09:43] *** Joins: Cleverness (~clevernes@pool-100-2-45-18.nycmny.fios.verizon.net)
[04:11:34] *** Joins: corgipop (~corgipop@c-73-77-7-194.hsd1.tx.comcast.net)
[04:11:58] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[04:12:57] *** Quits: candy (~tvrtko@93-138-19-175.adsl.net.t-com.hr) (Ping timeout: 268 seconds)
[04:14:28] *** Joins: jiffe (~jiffe@mail.nsab.us)
[04:14:39] *** Joins: candy (~tvrtko@93-138-114-158.adsl.net.t-com.hr)
[04:15:06] *** Parts: sjj (~sjj@netiez.com) (WeeChat 3.1)
[04:16:00] *** Quits: narigama (~narigama@2a01:4b00:8716:600:6891:1193:26a9:1430) (Read error: Connection reset by peer)
[04:17:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:19:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2-dev)
[04:21:27] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[04:22:44] *** Joins: akk (~akk@174-28-98-240.albq.qwest.net)
[04:22:57] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[04:22:58] *** Quits: Fiji (~Fiji@user/fiji) (Remote host closed the connection)
[04:23:21] *** Joins: Fiji (~Fiji@user/fiji)
[04:25:41] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[04:26:26] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[04:29:15] *** Joins: LiftLeft (~LiftLeft@154.21.114.243)
[04:29:38] *** Joins: pnoud (~pnoud@user/pnoud)
[04:29:50] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[04:30:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[04:30:51] *** Joins: ffledgling (~textual@2620:10d:c090:400::5:e865)
[04:31:27] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[04:31:50] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[04:32:00] *** Joins: Naan (~naan@user/naan)
[04:32:42] *** Quits: slav0nic_ (slav0nic@python.su) (Ping timeout: 240 seconds)
[04:33:15] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.1)
[04:34:22] *** Joins: jkl (~jkl1337@2600:1700:2420:6d10::3f1)
[04:35:10] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[04:35:30] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[04:35:33] <p-i-> armandokeller: Starred, Thankyou!
[04:38:20] *** Quits: vrt3 (~vrt3@d54C5733D.access.telenet.be) (Quit: Leaving)
[04:38:57] <sgt_chuckles> i have a fastapi project on git with a docker setup, is there anywhere I can easily host it via a database running on aws?
[04:39:34] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[04:39:46] *** Joins: faassen_ (~faassen@94-214-16-249.cable.dynamic.v4.ziggo.nl)
[04:39:55] *** faassen_ is now known as faassen
[04:41:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:42:18] *** Quits: Celeo (~Celeo@2603-8001-3301-2e00-c88b-d215-4d9e-4b97.res6.spectrum.com) (Quit: Leaving)
[04:42:52] *** Joins: heco (~redrum@user/redrum88)
[04:43:12] <akk> I'm having a problem where urllib.request.urlopen is failing if the URL includes a nonascii character.
[04:43:30] <akk> Here's the traceback, and the couple of lines that led to it: https://bpa.st/C7GA
[04:43:50] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:44:10] <akk> If I run it interactively in the python console, it's fine, but when run from a web server it fails -- apparently apache's locale is ascii, or something.
[04:44:15] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:44:16] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 272 seconds)
[04:45:05] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:45:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[04:46:37] *** Quits: nyah_ (~nyah@90.221.186.180) (Quit: leaving)
[04:46:48] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 272 seconds)
[04:47:23] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[04:49:43] *** Joins: nyah (~nyah@90.221.186.180)
[04:49:52] *** BillyZane2 is now known as BillyZane
[04:49:54] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 240 seconds)
[04:51:54] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[04:51:54] *** Quits: timthelion (~timothy@185.91.169.13) (Ping timeout: 240 seconds)
[04:52:27] *** Joins: tkj1028 (~tkj@user/tkj1028)
[04:52:57] *** JerryXiao is now known as j
[04:52:59] *** j is now known as Guest9005
[04:53:26] *** Guest9005 is now known as JerryXiao
[04:55:13] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[04:57:58] *** Quits: corgipop (~corgipop@c-73-77-7-194.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[04:59:42] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[05:00:07] *** Joins: timsavage (~SledgY@193-119-115-73.tpgi.com.au)
[05:00:17] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:00:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[05:00:56] *** Joins: Overflwn (~Overflwn@185.254.75.30)
[05:01:47] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:02:26] *** Joins: vicfred (~vicfred@user/vicfred)
[05:02:38] *** Joins: sudomannn (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[05:04:12] *** Quits: Overflwn (~Overflwn@185.254.75.30) (Client Quit)
[05:04:14] *** southey is now known as foxtrot
[05:04:25] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[05:04:26] *** Joins: daveo (~user@99.196.100.165)
[05:04:45] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:05:03] *** Joins: Overflwn (~Overflwn@185.254.75.30)
[05:05:38] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[05:06:05] *** Joins: wyclif (~wyclif@user/wyclif)
[05:06:18] *** Quits: sudomann (~sudomann@86.106.143.154) (Ping timeout: 264 seconds)
[05:08:51] *** Joins: diek (~diek@187.36.4.113)
[05:09:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[05:09:14] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[05:10:31] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: Changing server...)
[05:10:34] *** Joins: qzd (uid237765@id-237765.tooting.irccloud.com)
[05:10:52] <maxtim> SnoopJ, sweet! After prying into the docs and playing a toy, I was worried I'd have to rewrite every instance of logging.info() to, for instance, mylogger.info(). But that is not the case. Yo, this loggin system is slick
[05:11:06] *** Quits: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca) (Ping timeout: 264 seconds)
[05:12:59] *** Joins: JavaBean (~JavaBean@user/javabean)
[05:13:23] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 244 seconds)
[05:17:14] *** Joins: bigRoo (~user@131.236.54.84)
[05:18:40] *** Joins: ATAD_ (ATAD@user/atad)
[05:19:56] *** Joins: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com)
[05:21:58] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:22:06] *** Parts: ATAD_ (ATAD@user/atad) ()
[05:24:26] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[05:24:48] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 272 seconds)
[05:25:29] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[05:25:59] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:d648:1b69:add9:923) (Remote host closed the connection)
[05:26:01] <SnoopJ> maxtim, does it make a little more sense on the other side? :)
[05:26:36] *** Quits: dcompoze (~dcompoze@5E98D6D9.static.tld.pl) (Quit: WeeChat 3.2)
[05:27:20] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[05:29:01] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[05:29:42] *** Quits: ssbr (~ssbr@2620:15c:10f:203:987:dba7:7456:702a) (Remote host closed the connection)
[05:30:07] *** Joins: ssbr (~ssbr@2620:15c:10f:203:4d66:cd57:9f0a:1698)
[05:30:29] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:44] <maxtim> it actually makes a lot more sense now. when you import a custom py, you can set that logger up and have a more comprehensive log file. helps greatly with debugging
[05:31:01] *** Joins: biozz (~biozz@178.57.22.163)
[05:31:17] *** Joins: Fiji_ (~Fiji@user/fiji)
[05:33:25] *** Joins: paperManu (~paperManu@138.197.128.151)
[05:34:55] *** Joins: vlm (~vlm@user/vlm)
[05:34:58] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[05:35:06] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 240 seconds)
[05:36:05] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:36:12] *** Quits: Joel (~jjshoe@user/joel) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[05:38:29] <betelgeuse> is there an equivalent to `var = (this if condition else that)` in python?
[05:38:52] <altendky> that, parentheses are not required
[05:39:50] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:39:59] <betelgeuse> parantheses was the issue, thanks! altendky
[05:40:05] *** Joins: biozz (~biozz@178.57.22.163)
[05:40:15] <altendky> should still be valid with them
[05:40:42] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 240 seconds)
[05:42:38] <SnoopJ> maxtim, you can have the best of both works with logging.conf too :)
[05:43:09] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 244 seconds)
[05:43:22] <SnoopJ> although you can get very far with some light boilerplate directly in your modules (mostly `logger = logging.getLogger(__name__)`)
[05:44:29] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 272 seconds)
[05:44:42] *** Quits: biozz (~biozz@178.57.22.163) (Ping timeout: 264 seconds)
[05:44:50] <maxtim> SnoopJ, yeah I was looking at that. I was also eyeing the smtp handler. That would literally eliminate an entire module i've written.
[05:44:50] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[05:46:11] *** Joins: Joel (~jjshoe@user/joel)
[05:46:20] *** Joins: pnoud (~pnoud@user/pnoud)
[05:46:24] *** Joins: Midnite (~human@user/midnightlantern)
[05:47:02] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[05:47:49] *** Joins: DDR (~DDR@2604:3d08:4c7e:8600:899d:7922:1b3d:4bf)
[05:50:18] *** Quits: tkj1028 (~tkj@user/tkj1028) (Ping timeout: 240 seconds)
[05:52:43] *** Joins: ice99 (~ice9@kernelone.com)
[05:53:19] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-2d68-4d9a-7fbc-11de.res6.spectrum.com) (Read error: Connection reset by peer)
[05:54:07] *** Quits: DDR (~DDR@2604:3d08:4c7e:8600:899d:7922:1b3d:4bf) (Quit: DDR is not Dance Dance Revolution)
[05:54:56] *** Joins: tkj1028 (~tkj@user/tkj1028)
[05:57:34] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:59:51] *** Joins: jmcantrell (~weechat@86.106.143.201)
[06:00:17] *** Quits: jmcantrell (~weechat@86.106.143.201) (Client Quit)
[06:00:42] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:01:53] *** Joins: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca)
[06:01:54] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:02:56] *** Joins: c10l (~c10l@89.34.167.207)
[06:03:17] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[06:03:23] *** Quits: doko (~doko@2a02:8106:1a:7600:9e46:fb2:ebcb:17a6) (Remote host closed the connection)
[06:03:54] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Ping timeout: 265 seconds)
[06:04:16] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[06:05:38] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:07:03] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[06:07:21] *** Joins: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au)
[06:07:29] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[06:08:12] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[06:10:24] *** Quits: KevinX (~KevinX@94.140.8.65) (Ping timeout: 272 seconds)
[06:10:42] *** Quits: p-i- (~Ohmu@node-owh.pool-118-173.dynamic.totinternet.net) (Read error: Connection reset by peer)
[06:10:54] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Remote host closed the connection)
[06:11:12] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[06:11:13] *** Joins: p-i- (~Ohmu@node-owh.pool-118-173.dynamic.totinternet.net)
[06:12:01] *** Joins: KevinX (~KevinX@89.38.227.102)
[06:12:49] *** Parts: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca) (WeeChat 3.1)
[06:13:42] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:13:59] *** Quits: ice99 (~ice9@kernelone.com) (Changing host)
[06:13:59] *** Joins: ice99 (~ice9@user/ice9)
[06:15:04] *** Joins: orrery (~aza@2600:6c50:407f:5100:918:ca45:21c4:5ca3)
[06:15:54] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[06:16:13] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 244 seconds)
[06:17:06] *** Joins: Jonno_FTW (~come@api.carswap.me)
[06:17:54] *** Quits: ssbr (~ssbr@2620:15c:10f:203:4d66:cd57:9f0a:1698) (Ping timeout: 240 seconds)
[06:18:43] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 240 seconds)
[06:18:45] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[06:21:26] *** nvz is now known as enveezee
[06:22:12] *** Joins: jmcantrell (~weechat@86.106.143.201)
[06:22:29] *** enveezee is now known as BoydW
[06:22:36] *** Quits: orrery (~aza@2600:6c50:407f:5100:918:ca45:21c4:5ca3) (Quit: Leaving)
[06:22:37] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[06:22:48] *** BoydW is now known as MaloneS
[06:23:04] *** MaloneS is now known as nvz
[06:23:08] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[06:27:50] *** Parts: jepler (~jepler@2001:470:69fc:105::70f) ()
[06:28:47] *** Joins: easior (~easior@61.155.142.70)
[06:29:04] *** Joins: viktorivan (~ivan@187.223.103.108)
[06:29:56] *** Joins: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[06:30:05] *** Quits: mkellis (~Calibellu@68.235.43.85) (Quit: Textual IRC Client: www.textualapp.com)
[06:30:34] *** Joins: mkellis (~Calibellu@2607:9000:0:60::a01e)
[06:30:36] *** Quits: samhain (~samhain@user/samhain) (Quit: ZNC - https://znc.in)
[06:30:55] *** Joins: orrery (~orrery@2600:6c50:407f:5100:918:ca45:21c4:5ca3)
[06:31:29] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[06:31:33] *** Quits: cmayo (~cmayo@cpe-158-222-151-98.nyc.res.rr.com) (Quit: bye)
[06:31:45] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[06:32:31] *** Joins: ______GOD______ (~GOD@189.174.198.176)
[06:32:36] *** Joins: samhain (~samhain@user/samhain)
[06:33:52] *** Quits: daveo (~user@99.196.100.165) (Ping timeout: 265 seconds)
[06:34:10] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 268 seconds)
[06:35:15] *** Quits: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Quit: Gotta Go -- Peas)
[06:35:27] *** Joins: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au)
[06:35:43] *** Quits: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Remote host closed the connection)
[06:36:02] *** Joins: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[06:36:08] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[06:36:36] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[06:37:26] *** Joins: qlixed (~qlixed@host60.181-13-74.telecom.net.ar)
[06:37:30] *** Quits: jmcantrell (~weechat@86.106.143.201) (Quit: WeeChat 3.2)
[06:37:41] *** Quits: qlixed (~qlixed@host60.181-13-74.telecom.net.ar) (Remote host closed the connection)
[06:38:16] *** Joins: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[06:38:25] *** Joins: ranosd (~Guest666@c-73-60-161-147.hsd1.ma.comcast.net)
[06:39:36] *** Joins: easior (~easior@61.155.142.67)
[06:39:39] *** Joins: Vision (~Vision@047-034-097-066.res.spectrum.com)
[06:39:53] *** Roey is now known as RuthsturbatorGB
[06:41:32] *** Quits: indigochill (~indigo@dsl-hkibng32-54f84d-66.dhcp.inet.fi) (Ping timeout: 244 seconds)
[06:41:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:41:53] *** Joins: easior_ (~easior@61.155.142.67)
[06:41:59] *** Quits: nshire (~nshire@user/nshire) (Remote host closed the connection)
[06:45:16] *** Quits: easior (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[06:46:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:47:30] *** yolo_ is now known as yolo
[06:47:51] <esaym153> is there any built in methods for doing a binary search on a sorted list?
[06:47:51] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:48:07] <Peng_> bisect module?
[06:48:22] *** Joins: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a)
[06:48:55] *** Quits: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Remote host closed the connection)
[06:49:06] <grym> yup
[06:49:58] *** Joins: acegallagher (~Ace@71-211-253-134.hlrn.qwest.net)
[06:50:47] <acegallagher> I have an odd thing I'd like to do very efficiently. I have arrays of data (I'm using pandas for simple storage but am happy use numpy for efficiency of specific calculations)
[06:51:47] <acegallagher> and in that data is occasionally large sequences of zeros that are bad data
[06:52:08] <acegallagher> how can I efficiently slice for sequential zeros over some len threshold
[06:52:21] *** Joins: easior__ (~easior@61.155.142.70)
[06:52:40] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 268 seconds)
[06:52:49] *** Quits: mkellis (~Calibellu@2607:9000:0:60::a01e) (Quit: Textual IRC Client: www.textualapp.com)
[06:54:36] <grym> acegallagher: https://stackoverflow.com/a/7353335  looks promising
[06:54:39] *** Quits: tkj1028 (~tkj@user/tkj1028) (Ping timeout: 244 seconds)
[06:55:26] <grym> not quite right, but it's where i'd start
[06:55:53] *** Joins: chance (~chance@50.47.109.175)
[06:55:58] *** Quits: samhain (~samhain@user/samhain) (Quit: ZNC - https://znc.in)
[06:56:00] *** Quits: mesa (~mesaboogi@user/mesaboogie) (Ping timeout: 272 seconds)
[06:56:06] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 264 seconds)
[06:56:23] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[06:56:35] *** pizza is now known as pizzaiolo
[06:57:31] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[06:57:51] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[06:58:07] *** Joins: samhain (~samhain@user/samhain)
[06:59:25] *** Joins: easior_ (~easior@61.155.142.73)
[06:59:29] *** Joins: tkj1028 (~tkj@user/tkj1028)
[06:59:48] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[06:59:53] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:59:53] *** FinnElija is now known as Guest7201
[06:59:53] *** Quits: Guest7201 (~finn_elij@user/finn-elija/x-0085643) (Killed (silver.libera.chat (Nickname regained by services)))
[06:59:53] *** finn_elija is now known as FinnElija
[07:00:33] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:01:07] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:01:42] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[07:02:24] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 244 seconds)
[07:02:32] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[07:05:08] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[07:05:19] *** Joins: easior__ (~easior@61.155.142.73)
[07:05:37] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[07:07:20] *** pizzaiolo is now known as pizza
[07:08:00] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[07:08:17] *** Quits: sadg (~odd@45.83.220.210) (Ping timeout: 272 seconds)
[07:08:25] *** Quits: akk (~akk@174-28-98-240.albq.qwest.net) (Quit: +++)
[07:08:31] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:08:42] *** Quits: easior_ (~easior@61.155.142.73) (Ping timeout: 268 seconds)
[07:09:56] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[07:10:05] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (Quit: Konversation terminated!)
[07:10:36] *** Joins: ranosd2 (~ranosd@c-73-60-161-147.hsd1.ma.comcast.net)
[07:10:41] *** Joins: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com)
[07:11:47] *** Quits: viktorivan (~ivan@187.223.103.108) (Ping timeout: 268 seconds)
[07:12:04] *** Parts: ranosd (~Guest666@c-73-60-161-147.hsd1.ma.comcast.net) ()
[07:12:34] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[07:12:34] *** Joins: easior (~easior@61.155.142.73)
[07:12:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[07:13:30] *** Quits: asix (~Anders@user/asix) (Ping timeout: 264 seconds)
[07:13:41] *** Quits: ranosd2 (~ranosd@c-73-60-161-147.hsd1.ma.comcast.net) (Quit: Leaving)
[07:14:25] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[07:15:29] *** Quits: easior__ (~easior@61.155.142.73) (Ping timeout: 268 seconds)
[07:18:00] *** Joins: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[07:19:33] *** Quits: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Remote host closed the connection)
[07:20:11] *** Joins: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6)
[07:20:37] *** Quits: Midnite (~human@user/midnightlantern) (Quit: Midnite)
[07:23:03] *** Joins: justyb11 (~justyb@2601:483:500:3ea:f6be:3dd8:f1b2:573a)
[07:23:58] *** Joins: sadg (~odd@45.83.220.210)
[07:24:21] *** Joins: wei2912 (~wei2912@112.199.250.21)
[07:24:24] *** Joins: Midnite (~human@user/midnightlantern)
[07:24:54] *** Quits: diek (~diek@2804:14d:7681:82bd:8d78:c935:2339:f9a6) (Ping timeout: 264 seconds)
[07:24:56] *** Joins: SebastianM (~seba@user/sebastianm)
[07:24:59] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:25:04] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[07:25:59] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 268 seconds)
[07:26:47] *** Joins: asix (~Anders@user/asix)
[07:27:04] <Midnite> is there a way to print a single key (not value) from a dictionary, without iterating over the entire dictionary?
[07:27:50] *** Quits: dalan (~dalan@110-175-186-185.tpgi.com.au) (Quit: dalan)
[07:27:55] <FunkyBob> next(mydict.keys()) ?
[07:28:14] *** Joins: dalan (~dalan@110-175-186-185.tpgi.com.au)
[07:28:32] <Midnite> I just want to print the ith key, like I can print the ith item in a list
[07:29:21] <armandokeller> Midnite, the dict.keys() return a list of keys
[07:29:40] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[07:29:43] <Peng> not quite a list
[07:29:44] <armandokeller> you can print my_dict.keys()[2]
[07:29:53] <FunkyBob> a "set-like" object, according to the help
[07:30:02] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[07:30:05] <Peng> Midnite: Maybe you need a different data structure?
[07:30:12] <SnoopJ> armandokeller, no you can't, the result of keys() isn't subscriptable (it's a view)
[07:30:55] <FunkyBob> list(dict.keys())[n]  ... keys is now stable, isn't it?  until the dict is mutated, that is
[07:31:10] <Midnite> Peng: maybe
[07:32:08] <SnoopJ> since 3.7 keys are in insertion order
[07:32:23] <SnoopJ> (but if you care you should probably be using collections.OrderedDict)
[07:32:52] *** Quits: robyndrake (robyndrake@user/robyndrake) (Quit: WeeChat 2.9)
[07:32:59] <chance> or don't support 3.6 and tell people you're beta testing EOL
[07:33:48] <armandokeller> you're right. the FunckyBob solution will work.
[07:35:22] *** Joins: jmcantrell (~weechat@86.106.143.201)
[07:35:32] *** Joins: robyndrake (robyndrake@user/robyndrake)
[07:35:47] <Midnite> now I'm trying to figure out the syntax for the following: if function() returns anything but False: do_something()
[07:37:59] *** Joins: superboot (agentgasma@user/superboot)
[07:38:25] *** Quits: jmcantrell (~weechat@86.106.143.201) (Quit: WeeChat 3.2)
[07:40:15] *** Quits: qzd (uid237765@id-237765.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[07:41:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:41:46] <Midnite> aha! !-
[07:41:49] <Midnite> != *
[07:42:15] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[07:44:16] *** Joins: Fiji- (~Fiji@user/fiji)
[07:44:48] *** Joins: easior_ (~easior@61.155.142.67)
[07:45:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[07:46:55] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 272 seconds)
[07:47:30] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[07:47:49] *** Joins: yolk (~yolk@127.201.160.108.in-addr.arpa)
[07:47:53] *** Quits: robyndrake (robyndrake@user/robyndrake) (Quit: WeeChat 2.9)
[07:47:54] *** Quits: easior (~easior@61.155.142.73) (Ping timeout: 240 seconds)
[07:48:01] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:48:51] *** Joins: easior__ (~easior@61.155.142.70)
[07:49:10] *** Quits: yolk (~yolk@127.201.160.108.in-addr.arpa) (Remote host closed the connection)
[07:51:00] *** Joins: easior (~easior@61.155.142.67)
[07:51:41] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[07:52:27] <rannnn8888> hey how i can get culmns from sqlite in list ?
[07:52:37] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 272 seconds)
[07:52:37] *** Quits: xikkub (me@user/xikkub) (Quit: .)
[07:53:04] *** Joins: xikkub (me@user/xikkub)
[07:53:06] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 240 seconds)
[07:55:16] <rannnn8888> slove conn.row_factory = lambda cursor, row: row[0]
[07:57:02] *** Joins: smqra (~rooba@208.110.85.44)
[07:57:08] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:3910:5452:9409:1286)
[07:57:14] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:3910:5452:9409:1286) (Client Quit)
[07:57:25] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[07:57:50] *** Joins: Berg (~chatzilla@user/berg)
[07:58:02] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:3910:5452:9409:1286)
[07:58:04] <Berg> hay there every genius
[07:58:09] *** Joins: robyndrake (robyndrake@user/robyndrake)
[07:58:31] <Berg> im trying to get my bot to auterise sasl to libera any help please?
[07:58:32] *** Joins: yolk (~yolk@127.201.160.108.in-addr.arpa)
[07:58:38] <Berg> authorise
[07:59:04] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:59:29] <Berg> have the lib pysasl install but i dont know  how to use it
[08:00:43] *** Quits: yolk (~yolk@127.201.160.108.in-addr.arpa) (Client Quit)
[08:00:50] *** Joins: Vonter (~Vonter@user/vonter)
[08:01:18] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[08:03:36] *** Quits: tkj1028 (~tkj@user/tkj1028) (Ping timeout: 268 seconds)
[08:04:03] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:04:04] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[08:04:13] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:05:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[08:05:17] *** Lord_of_Life_ is now known as Lord_of_Life
[08:06:14] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[08:06:50] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[08:06:56] *** Quits: zsignal (~zsignal@84.203.8.218) (Ping timeout: 272 seconds)
[08:09:17] *** Quits: robyndrake (robyndrake@user/robyndrake) (Quit: WeeChat 2.9)
[08:10:42] *** Joins: summersault (~summersau@179.221.251.16)
[08:10:50] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[08:12:07] *** Joins: derelict (~derelict@user/derelict)
[08:13:55] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Leaving)
[08:13:58] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:ec01:6800:6b6:8f4a)
[08:15:15] *** Joins: robyndrake (robyndrake@user/robyndrake)
[08:16:00] *** Quits: nawcom (~nawcom@bulldadachat.com) (Quit: bye)
[08:17:20] *** Joins: nawcom (~nawcom@bulldadachat.com)
[08:19:04] *** Joins: easior_ (~easior@61.155.142.67)
[08:19:23] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:20:14] *** Quits: superboot (agentgasma@user/superboot) (Ping timeout: 268 seconds)
[08:21:59] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[08:22:08] *** Quits: easior (~easior@61.155.142.67) (Ping timeout: 272 seconds)
[08:24:34] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:26:23] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:27:19] *** Joins: easior__ (~easior@61.155.142.73)
[08:27:24] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Quit: dtg01100)
[08:27:39] <rannnn8888> hey maybe you know why when i use update in multitherd its start slow and then faster ?
[08:27:54] <rannnn8888> update in sqlite* i mean
[08:27:59] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[08:28:15] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[08:29:16] *** Joins: plancksconstant (~plancksco@103.98.128.96)
[08:30:08] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[08:30:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[08:30:54] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 264 seconds)
[08:31:28] *** Quits: montybanksnyc (~montybank@2601:86:600:a2a:ec01:6800:6b6:8f4a) (Read error: Connection reset by peer)
[08:31:29] *** Joins: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de)
[08:31:30] *** Quits: armandokeller (~armandoke@200.159.170.169) (Quit: Client closed)
[08:31:42] *** Quits: plancksconstant (~plancksco@103.98.128.96) (Client Quit)
[08:31:54] *** Joins: pnoud (~pnoud@user/pnoud)
[08:32:07] *** Joins: iflema (~ian@user/iflema)
[08:32:10] *** Joins: ratelius (ratelius@gateway/vpn/protonvpn/ratelius)
[08:32:12] *** Joins: saagaar (~saagaar@2400:1a00:bd11:651e:398b:cd11:5fc5:9cd6)
[08:33:49] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[08:33:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:09] *** Quits: easior__ (~easior@61.155.142.73) (Quit: Leaving)
[08:36:36] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:54] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[08:36:57] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[08:37:55] *** Quits: vicfred (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[08:38:07] *** Joins: vicfred (~vicfred@user/vicfred)
[08:41:12] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:43:40] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Ping timeout: 244 seconds)
[08:43:40] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[08:44:17] *** jdmark2 is now known as jdmark
[08:44:18] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:44:21] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[08:44:36] *** Joins: jdmark (~jdmark@67.8.137.130)
[08:46:20] *** Quits: Milos (~Milos@user/milos) (Remote host closed the connection)
[08:46:44] *** Joins: Milos (~Milos@user/milos)
[08:48:22] *** Joins: armandokeller (~armandoke@200.159.170.169)
[08:48:44] *** Quits: ST47 (~ST47@user/st47) (Ping timeout: 268 seconds)
[08:49:02] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:50:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:52:02] *** Joins: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net)
[08:52:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:54:00] *** Quits: sudomannn (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 244 seconds)
[08:54:29] *** Quits: c4017 (~c4017@S010664777dab66f3.vf.shawcable.net) (Ping timeout: 252 seconds)
[08:56:09] *** Joins: cjb (~cjb@user/cjb)
[08:58:07] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:00:47] *** Joins: biozz (~biozz@178.57.22.163)
[09:01:55] *** Quits: timsavage (~SledgY@193-119-115-73.tpgi.com.au) (Quit: Client closed)
[09:02:08] *** Joins: timsavage (~tims@193-119-115-73.tpgi.com.au)
[09:02:29] *** Joins: ST47 (~ST47@user/st47)
[09:02:44] *** Joins: pnoud (~pnoud@user/pnoud)
[09:02:50] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:a14e:485f:1f02:7215)
[09:03:18] *** Quits: emerent (~quassel@p200300cd5703bb49ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[09:04:06] *** Joins: emerent (~quassel@p200300cd5703bb9dba27ebfffed28a59.dip0.t-ipconnect.de)
[09:04:42] *** Quits: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net) (Ping timeout: 240 seconds)
[09:05:16] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[09:05:51] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[09:06:01] *** Joins: c4017 (~c4017@S010664777dab66f3.vf.shawcable.net)
[09:06:49] *** Quits: BillyZane (~BillyZane@193.160.245.142) (Remote host closed the connection)
[09:07:22] *** Joins: BillyZane (~BillyZane@193.160.245.142)
[09:08:19] *** Quits: BillyZane (~BillyZane@193.160.245.142) (Read error: Connection reset by peer)
[09:08:28] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[09:09:06] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:09:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[09:09:44] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[09:13:07] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 244 seconds)
[09:13:26] *** Quits: ska (~ska@cpe-173-174-111-177.austin.res.rr.com) (Ping timeout: 272 seconds)
[09:13:53] *** Quits: Fiji- (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[09:13:56] *** Quits: biozz (~biozz@178.57.22.163) (Remote host closed the connection)
[09:14:12] *** Joins: biozz (~biozz@178.57.22.163)
[09:14:54] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[09:15:11] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Remote host closed the connection)
[09:15:38] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:16:32] *** Quits: areicogi (~koning@c-24-5-121-76.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[09:17:25] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[09:18:48] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:22:05] *** Joins: pnoud (~pnoud@user/pnoud)
[09:22:30] *** Quits: Midnite (~human@user/midnightlantern) (Ping timeout: 264 seconds)
[09:24:48] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Quit: Lost terminal)
[09:25:54] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[09:26:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[09:27:11] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[09:28:06] *** Quits: Cleverness (~clevernes@pool-100-2-45-18.nycmny.fios.verizon.net) (Quit: Leaving)
[09:29:06] <c4017> Is there something like a dict that allows be to access by value as well as by key?
[09:30:58] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:54] *** Joins: R24 (~R24@160.202.157.16)
[09:33:54] *** Quits: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au) (Ping timeout: 240 seconds)
[09:34:56] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Read error: Connection reset by peer)
[09:34:58] *** Joins: TheRAt (~TheRAt@user/therat)
[09:35:30] *** Quits: fluxburger (~pernett@wsip-174-79-226-242.lv.lv.cox.net) (Read error: Connection reset by peer)
[09:36:39] *** Quits: ______GOD______ (~GOD@189.174.198.176) (Quit: Turning off a portion of this simulation.)
[09:37:21] *** Quits: TheRAt (~TheRAt@user/therat) (Quit: :))
[09:38:06] *** Joins: TheRAt (~TheRAt@user/therat)
[09:38:34] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[09:38:40] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:40:01] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[09:40:44] <armandokeller> c4017 no, you need to create some like that (but makes no sense, because you will need unique values)
[09:41:20] <armandokeller> But you can look for the key that contains the value that you're looking for
[09:41:31] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[09:41:53] <c4017> thats what I'm doing now, and it's ok since I'm only dealing with small dicts
[09:42:10] <c4017> My values are always unique, which is why I wondered if it's possiblw
[09:42:12] *** Parts: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) ()
[09:42:53] *** Quits: LiftLeft (~LiftLeft@154.21.114.243) (Ping timeout: 268 seconds)
[09:43:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[09:43:22] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[09:44:29] *** Joins: rk04 (~rk04@user/rajk)
[09:44:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:45:21] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[09:45:25] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:45:32] *** Joins: blue_penquin[m] (~bluepenqu@2001:470:69fc:105::829)
[09:45:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:46:21] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:47:01] <llua> what is expected to be returned when you look something up by value?
[09:47:08] <c4017> the key
[09:47:49] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[09:47:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:48:29] *** Quits: Codaraxis (~Codaraxis@s13490149139.blix.com) (Read error: Connection reset by peer)
[09:49:35] *** Joins: pizdets (~pizdets@183.182.115.196)
[09:51:31] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[09:52:36] <armandokeller> c4017, something like that: https://bpa.st/B7UQ
[09:53:18] *** Joins: canopus (~user@116.68.98.40)
[09:55:40] <c4017> armandokeller, yes, and that's more or less what I have right now. But it's O(n) to search by value that way. I was wondering if there's something that will use a hash lookup in both directions. I admit it's kind of an obscure thing
[09:55:43] *** Quits: R24 (~R24@160.202.157.16) (Quit: Client closed)
[09:56:29] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[09:56:41] *** Joins: paganplatypus (~paganplat@180.sub-174-202-70.myvzw.com)
[09:56:48] *** Joins: diadatp (~diadatp@user/diadatp)
[09:57:40] *** Parts: blue_penquin[m] (~bluepenqu@2001:470:69fc:105::829) ()
[09:58:35] *** Quits: anp (~anp@user/anp) (Ping timeout: 244 seconds)
[09:59:27] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:00:24] <Berg> gone
[10:00:29] *** Parts: Berg (~chatzilla@user/berg) ()
[10:02:07] *** Joins: ionface (~ionface@user/ionface)
[10:02:09] <armandokeller> c4017, I don't think that you could use the hash table in both directions (it was not designed to do that). I like the Raymond Hettinger speech about modern dictionaries in python at pycon.
[10:02:10] *** Quits: montybanksnyc (~montybank@2601:86:600:a2a:a14e:485f:1f02:7215) (Read error: Connection reset by peer)
[10:04:21] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:04:27] *** Quits: rk04 (~rk04@user/rajk) (Quit: rk04)
[10:06:22] *** Joins: dvx (~dvx@185.63.97.64)
[10:08:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[10:09:10] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[10:09:16] *** Quits: saagaar (~saagaar@2400:1a00:bd11:651e:398b:cd11:5fc5:9cd6) (Ping timeout: 250 seconds)
[10:13:26] *** Quits: armandokeller (~armandoke@200.159.170.169) (Quit: Client closed)
[10:16:41] *** Joins: wyclif (~wyclif@user/wyclif)
[10:17:45] *** Joins: SebastianM (~Sebastian@user/sebastianm)
[10:18:15] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[10:21:28] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:23:06] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 264 seconds)
[10:23:30] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[10:23:32] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[10:24:28] *** Joins: cydork (~vihang@223.226.37.205)
[10:26:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[10:26:26] *** Quits: cydork (~vihang@223.226.37.205) (Changing host)
[10:26:26] *** Joins: cydork (~vihang@user/cydork)
[10:26:48] *** Quits: ionface (~ionface@user/ionface) (Remote host closed the connection)
[10:28:57] *** Joins: Samian (~Samian@2620:10d:c090:400::5:6df2)
[10:29:00] <Samian> hi
[10:29:21] <Samian> I ran conda install anaconda and the terminal seems to be stalled at   - defaults/linux-64::anaconda==5.3.0=py37_0
[10:29:26] <Samian> I do see the wheel moving
[10:29:37] <Samian> - \ | / - | thing
[10:29:57] <Samian> is it really stalled?
[10:30:04] <Samian> I've been waiting for like 20 minutes now
[10:30:42] *** Joins: ionface (~ionface@user/ionface)
[10:32:20] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:32:42] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 240 seconds)
[10:34:30] *** Quits: timsavage (~tims@193-119-115-73.tpgi.com.au) (Ping timeout: 272 seconds)
[10:37:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[10:37:45] *** Quits: azidhaka (~azidhaka@gateway.videnov.bg) (Quit: Leaving)
[10:37:54] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 240 seconds)
[10:37:57] *** Joins: azidhaka (~azidhaka@gateway.videnov.bg)
[10:39:17] *** Joins: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b)
[10:39:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:39:26] *** Joins: timsavage (~tims@27-33-31-71.tpgi.com.au)
[10:39:37] *** Joins: gusto (~Augustus@109.255.100.54)
[10:41:32] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[10:43:12] *** Joins: mexen (uid495612@user/mexen)
[10:46:46] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:23] *** Joins: seednode (~seednode@user/seednode)
[10:47:33] <raek> you can look at the process tree using "htop" (press F5) and chech if subprocesses gets started and finishes
[10:48:00] <Samian> I killed the process
[10:48:12] <Samian> I *hate* setting up new environments
[10:48:15] *** Joins: et_ (~et@user/et)
[10:48:32] *** menace is now known as Deknos
[10:48:35] <Samian> packages, dependencies, stackoverflow articles with everyone suggesting all different things
[10:48:38] <Samian> it's an effing mess!
[10:48:50] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[10:49:36] *** Quits: et (~et@user/et) (Ping timeout: 268 seconds)
[10:49:36] *** et_ is now known as et
[10:50:06] *** Quits: KindOne (~KindOne@user/kindone) (Ping timeout: 268 seconds)
[10:51:20] *** Quits: tijuco (~tijuco@user/tijuco) (Ping timeout: 268 seconds)
[10:51:42] *** Joins: tijuco (~tijuco@user/tijuco)
[10:52:23] *** Quits: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b) (Remote host closed the connection)
[10:54:02] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[10:54:22] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:57:07] *** Joins: telboon (~telboon@user/telboon)
[10:57:45] *** Joins: KindOne (~KindOne@user/kindone)
[10:57:51] *** Joins: kosh (~kosh@user/kosh)
[11:00:57] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[11:01:40] *** Joins: rendar (~rendar@user/rendar)
[11:03:33] *** Joins: pnoud (~pnoud@user/pnoud)
[11:04:00] *** Joins: chha (~c@user/chha)
[11:04:45] *** Quits: steam (~steam@user/steam) (Quit: Closing)
[11:05:16] *** Joins: steam (~steam@user/steam)
[11:06:18] *** Joins: gareppa (~gareppa@user/gareppa)
[11:06:51] *** Quits: KindOne (~KindOne@user/kindone) (Ping timeout: 272 seconds)
[11:06:59] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[11:09:59] *** Quits: steam (~steam@user/steam) (Client Quit)
[11:10:25] *** Joins: steam (~steam@user/steam)
[11:10:33] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[11:11:33] *** Joins: nanocoaster (~nanocoast@p200300e127264d00f99888eaee926bf0.dip0.t-ipconnect.de)
[11:12:04] *** Joins: node1 (~node1@user/node1)
[11:12:55] *** Joins: wattux (~wattux@212.51.23.106)
[11:13:00] *** Joins: sathyabhat (~sathyabha@188.25.147.213)
[11:13:08] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 272 seconds)
[11:13:28] *** Quits: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[11:14:19] *** Quits: et (~et@user/et) (Remote host closed the connection)
[11:14:53] <wattux> hey there! Are there opinions on using a context manager with a walrus operator to indicate that the variable is only required in that specific scope? For example: https://bpa.st/NSLA
[11:15:53] *** Joins: chele (~chele@user/chele)
[11:16:06] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-75b5-effb-8a85-a266.res6.spectrum.com) (Quit: jarthur)
[11:17:29] <c4017> Isn't the normal way 'with parse_url(link) as url:
[11:17:29] <c4017> '? Seems to accomplish the same thing
[11:17:47] <deniska> they do a different thing actually
[11:18:10] <wattux> didn't thought about the "as" syntax.. but they should do the same, no?
[11:18:35] <FunkyBob> deniska: am curious how they're different... is it that the assignment perists in scope after the with?
[11:18:39] *** Joins: et (~et@user/et)
[11:18:54] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:19:06] *** Joins: bbock (~bbock@p200300c98f178500d94696639bdd95bb.dip0.t-ipconnect.de)
[11:19:40] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[11:19:57] <wattux> at least pycharms syntax highlighting tells me, that both approaches will keep the `url` even after the with-statement
[11:20:15] <deniska> No, when you use `with foo as bar`, bar is assigned to foo.__enter__()
[11:20:34] <FunkyBob> ah, yes
[11:20:38] <deniska> it's just that a lot of context managers return self
[11:21:13] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:21:21] <wattux> the return value of foo.__enter__() will be on the left-hand of walrus operator as well as assigned to the name after `as`. Is there a difference?
[11:22:35] <wattux> though the `as` one does look cleaner than the walrus ^^
[11:22:36] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 244 seconds)
[11:22:36] <FunkyBob> wattux: I think what deniska is saying is foo will be assigned by walrus... but foo.__enter__() will be assigned via 'as'
[11:22:52] <wattux> uuuh, I see
[11:23:16] <deniska> and the whole thing will fail unless url is a context manager
[11:23:16] *** Quits: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net) (Ping timeout: 272 seconds)
[11:23:43] *** Joins: drn (~drn@94.240.197.246)
[11:23:51] <deniska> and `with` statement doesn't create a scope anyway
[11:23:56] *** Joins: ssbr (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net)
[11:23:58] *** Joins: KindOne (kindone@user/kindone)
[11:24:18] <FunkyBob> https://dpaste.org/aaBG
[11:24:24] *** Parts: etienneme (~etienne@176-149-215-214.abo.bbox.fr) ()
[11:24:32] *** Quits: ST47 (~ST47@user/st47) (Ping timeout: 272 seconds)
[11:24:42] *** Quits: drn (~drn@94.240.197.246) (Client Quit)
[11:24:51] <FunkyBob> this does open avenues to devious new mechanisms, though :P
[11:24:59] <wattux> you're right, both approaches fail, as url is not a context manager.
[11:25:11] <wattux> devious indeed :D
[11:25:33] <FunkyBob> for instance, a ByteIO ... so you write to it, and hold onto the resulting (closed) object after... [ok, not devious, kinda handy in fact]
[11:25:35] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[11:25:56] <wattux> you tried!
[11:26:17] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:26:25] <FunkyBob> oh, curiuos
[11:26:33] <FunkyBob> can't getvalue on a closed StringIO
[11:27:12] <wattux> but you could pass it over, if one want's to read from it again. I can imagine such use cases
[11:27:50] *** Joins: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr)
[11:28:35] *** Joins: manti7 (~manti7@176.10.104.94)
[11:29:48] *** Joins: etienneme (~etienne@176-149-215-214.abo.bbox.fr)
[11:30:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[11:31:25] *** Joins: alguien (~alguien@user/alguien)
[11:31:30] *** Joins: zeenk (~zeenk@188.26.30.39)
[11:32:14] *** Joins: Guddu (~Guddu@117.222.85.233)
[11:32:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[11:33:08] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[11:33:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:34:29] *** Quits: {HD} (~{HD}@102.165.16.22) (Ping timeout: 244 seconds)
[11:38:12] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[11:38:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 244 seconds)
[11:38:18] *** Quits: {4144} (~{4144}@46.56.79.82) (Ping timeout: 252 seconds)
[11:38:58] *** Joins: feriman (~feriman@188.163.113.127)
[11:40:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:40:43] *** Joins: {HD} (~{HD}@191.96.185.171)
[11:41:59] *** Joins: aw1 (~aw1@203.171.246.186)
[11:45:06] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 240 seconds)
[11:46:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:47:17] *** Joins: Laibsch (~leggewie@2a01:c22:bc28:eb00:f2de:f1ff:fed0:6548)
[11:48:23] *** Joins: {4144} (~{4144}@46.56.70.183)
[11:48:39] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 272 seconds)
[11:48:43] <graingert> wattux: you can use a decorator instead
[11:48:59] *** Joins: cliluw (~cliluw@47.147.80.149)
[11:49:11] <graingert> @inject_cm(cmgr)
[11:49:11] <graingert> def foo(url): ...
[11:50:41] <graingert> FunkyBob: NamedTemporyFile and pytest.raises both make sense after the with block
[11:51:00] <graingert> Also mock.patch(t) as m: ...
[11:51:08] <wattux> graingert `@contextmanager` from `contextlib`? I have a hard time imagine what you're proposing.. though, as deniska pointed out, it's rather pointless to continue thinking about the approach. as the idea was to (visually) bind a variable on a specific scope. but by far not all types support being __enter__'ed so  yeah :/
[11:51:12] <graingert> assert m.mock_calls == [
[11:51:30] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[11:52:03] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[11:52:43] *** Joins: Hackerpcs (~user@user/hackerpcs)
[11:53:37] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[11:53:38] *** Joins: pankajs (~pankajs@117.192.147.183)
[11:53:57] *** Joins: Schnouki (~schnouki@user/schnouki)
[11:54:44] <wattux> ah, now I get the idea of `@inject_cm()` .. but it would make the code more noisy in my eyes
[11:55:14] <graingert> wattux: There's `url:Final = ...`
[11:55:23] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[11:55:44] <graingert> That does a different thing but under mypy protects it from reassignment
[11:57:50] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[11:58:42] *** Joins: jmcantrell (~weechat@86.106.143.100)
[11:59:31] <graingert> But it's a str so there's not much danger in it leaking to the rest of your code
[11:59:53] <graingert> What does the rest of your py file look like?
[12:00:24] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 268 seconds)
[12:01:04] *** Quits: pankajs (~pankajs@117.192.147.183) (Ping timeout: 250 seconds)
[12:01:24] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[12:01:26] <wattux> graingert Does not matter :)  I had an idea, thought being super clever, and (as it often does) it turned out, I am not :D
[12:01:46] *** Joins: CombatVet (~c4@user/combatvet)
[12:02:46] *** Joins: pnoud (~pnoud@user/pnoud)
[12:03:00] *** Joins: anandprabhu (~anandprab@87.201.97.214)
[12:04:22] *** Quits: kickingvegas (~cchoi@c-24-130-175-68.hsd1.ca.comcast.net) (Quit: leaving)
[12:04:53] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[12:05:01] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[12:05:37] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[12:05:45] *** Joins: __that__ (~Guest93@195.59.168.125)
[12:05:50] <__that__> Morning all
[12:06:27] *** Joins: Isthmusi (~Isthmus@user/isveni)
[12:06:54] *** Jigsy` is now known as Jigsy
[12:09:18] *** Quits: BlessJah (~BlessJah@user/blessjah) (Ping timeout: 244 seconds)
[12:09:42] <__that__> My App A is calling a library B that is logging the errors  through log.error. However we ought to contextualise those errors for our own debugging purposes by providing some context to it. Is there anyway to ensure from within my app code that when logger.error is called in B, some  extra info is as well printed? So from we would 'monkeypatch' the
[12:09:42] <__that__> logger or similar. I believe this may be a common case that others faced and that there may be a 'canonical' way of doing it
[12:10:35] *** Quits: TheRAt (~TheRAt@user/therat) (Read error: Connection reset by peer)
[12:10:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[12:10:50] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[12:10:58] *** Joins: crippa (~crippa@160.62.4.101)
[12:11:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:11:31] *** Quits: SebastianM (~Sebastian@user/sebastianm) (Quit: SebastianM)
[12:11:32] <crippa> hi. I'm struggling to understand how to overlay transparent images to my video stream using opencv.. anybody that can help?
[12:11:34] *** Joins: Trashlord (~trash@user/trashlord)
[12:12:43] *** Jigsy` is now known as Jigsy
[12:13:26] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Ping timeout: 244 seconds)
[12:13:42] <__that__> so in a way I would like to provide an extra context to the logging capabilities of a library we are using
[12:14:23] <wattux> @__
[12:14:41] <wattux> __that__ do you want a traceback for the errors or what exactly are you looking for?
[12:14:49] *** Joins: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net)
[12:15:18] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 244 seconds)
[12:15:57] *** Joins: TheRAt (~TheRAt@user/therat)
[12:16:19] <__that__> wattux, not. The library is logging something like "Unable to optimise". I would like something like "Asset x: Unable to optimise". So I wondered if there is away to 'overwrite' with the library is logging
[12:17:24] <__that__> I can obviously log before calling the library and provide that context by saying 'trying to optimise Asset x' but I wondered if what I propose is possible
[12:17:26] *** Joins: KindOne (kindone@user/kindone)
[12:18:26] <wattux> hm.. you could write a custom handler / maybe even formatter and register it https://docs.python.org/3/library/logging.html#logging.Logger but i'm not sure if the context you will get there (via arguments) will suffice in your use case
[12:19:48] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[12:20:17] <wattux> Wrong section ^^  https://docs.python.org/3/library/logging.html#logging.Handler
[12:20:21] <__that__> so yeah somehow I want the library to inherit a contextual information.
[12:21:04] *** Joins: BlessJah (~BlessJah@user/blessjah)
[12:21:20] <wattux> if a custom handler wont help, you could still fork the library, and add your extended logging calls :D  but the idea has its disadvantages for sure
[12:28:24] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: node-irc says goodbye)
[12:29:12] *** Joins: iflema (~ian@user/iflema)
[12:29:23] *** Quits: KevinX (~KevinX@89.38.227.102) (Ping timeout: 268 seconds)
[12:29:46] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 272 seconds)
[12:30:18] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:cce0:3948:a26d:5f4d) (Ping timeout: 240 seconds)
[12:30:51] *** Joins: KevinX (~KevinX@37.120.157.198)
[12:30:58] *** Joins: shad (~shad@user/shad)
[12:32:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[12:33:08] *** Quits: paganplatypus (~paganplat@180.sub-174-202-70.myvzw.com) (Ping timeout: 250 seconds)
[12:33:49] *** Joins: death916_lap (~Death916@user/death916)
[12:35:06] *** Quits: biozz (~biozz@178.57.22.163) (Quit: Leaving...)
[12:37:01] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[12:37:22] *** Quits: dnode (~dnode@user/dnode) (Quit: bye)
[12:37:45] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:50] *** Joins: dnode (~dnode@user/dnode)
[12:37:52] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[12:37:55] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[12:39:29] *** Quits: oz4ga (~tim@93.90.4.233) (Quit: ZNC 1.8.2 - https://znc.in)
[12:39:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:41:03] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[12:41:10] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:41:50] *** Quits: kixx (~kixx@user/kixx) (Ping timeout: 268 seconds)
[12:41:54] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 240 seconds)
[12:42:04] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:45:05] *** Joins: JavaBean (~JavaBean@user/javabean)
[12:45:54] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Ping timeout: 240 seconds)
[12:46:25] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:47:04] <varaindemian> I have this script - https://github.com/di/screenshare. How can I integrate it in flask?
[12:47:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 244 seconds)
[12:47:34] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[12:47:56] *** Joins: litharge (litharge@libera/bot/litharge)
[12:48:29] *** ChanServ sets mode: +o litharge
[12:49:27] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:51:02] *** Quits: cjb (~cjb@user/cjb) ()
[12:51:23] *** Joins: slav0nic (slav0nic@python.su)
[12:53:40] *** Quits: avatar (~avatar@178.239.167.166) ()
[12:54:43] <IHasFinger> hi all
[12:55:58] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[12:56:00] <varaindemian> anyone?
[12:56:22] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[12:57:05] <wattux> varaindemian in the repo you've linked, you already called pyscreenshot from within a flask view. I guess, that did not work? are you running inside a docker container? is there a display server available? are there errors logged?
[12:57:06] *** Joins: pnoud (~pnoud@user/pnoud)
[12:57:22] *** Quits: azidhaka (~azidhaka@gateway.videnov.bg) (Quit: Leaving)
[12:57:46] <varaindemian> wattux: thanks for your feedback! Yes, running inside a docker container
[12:58:44] <wattux> varaindemian righty right. Do you see errors, when calling the view?
[12:59:13] *** Joins: wakeup (~wakeup@user/wakeup)
[12:59:28] <wattux> IHasFinger sup \o
[13:00:27] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 244 seconds)
[13:00:35] *** Joins: oz4ga (~tim@93.90.4.233)
[13:01:27] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Ping timeout: 268 seconds)
[13:01:39] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:01:41] <IHasFinger> Hi everyone I have a issue which seems to only happen on linux server. https://bpa.st/J22Q  method set_next_ad the issue is that in the loop it should call set_next_ad to get the ad info for each iteration. Each iteration should get 1 ads at a time but for some reason the ads info is the same.
[13:01:47] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Quit: Leaving)
[13:02:15] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Read error: Connection reset by peer)
[13:02:17] <IHasFinger> when running it on my windows pc the ad is different for each iteration which is correct but on the linux server it is the same
[13:02:22] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[13:03:06] *** Quits: jkl (~jkl1337@2600:1700:2420:6d10::3f1) (Ping timeout: 240 seconds)
[13:03:55] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[13:04:32] <varaindemian> wattux: now that you mentioned that I really have to try it :D
[13:04:45] <varaindemian> I was not aware of that part
[13:06:00] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[13:08:42] *** Joins: yogoyo (~weechat@p200300def74a01385e2bb5230726217c.dip0.t-ipconnect.de)
[13:09:06] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 240 seconds)
[13:10:16] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[13:10:20] <varaindemian> ImportError: No module named flask
[13:10:35] *** Joins: JavaBean (~JavaBean@user/javabean)
[13:10:42] <varaindemian> already installed flask with " pip3 install flask"
[13:11:06] <wattux> varaindemian Do you have dockerfile you could share?
[13:12:04] <varaindemian> wattux: Thanks again for your help. I got back to basics following this tutorial: https://flask-httpauth.readthedocs.io/en/latest/ I am trying to run the first snippet
[13:12:20] *** Quits: Allegretto (~allegrett@84-236-53-138.pool.digikabel.hu) (Ping timeout: 244 seconds)
[13:12:35] <varaindemian> wattux I try to run it locally now
[13:12:57] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[13:13:09] *** Joins: zinc (~zinc@163.ip-51-254-203.eu)
[13:13:09] <wattux> varaindemian keep in mind that running `pip install <package>` wont affect whatever is happening inside your docker container
[13:13:16] <wattux> *running locally
[13:14:12] <varaindemian> wattux yeah, I am trying to make first that snippet of code run on my machine and then move back to my initial problem
[13:14:18] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[13:14:23] *** Joins: mesaboogie (~mesaboogi@user/mesaboogie)
[13:14:40] <varaindemian> wattux trying pip install flask -> Requirement already satisfied: flask in ./.local/lib/python3.8/site-packages (2.0.1)
[13:15:31] *** Joins: Sorcery (~stefan@2a02-a455-3349-1-ef7e-ae0a-14f5-9280.fixed6.kpn.net)
[13:16:14] <Sorcery> If I instantiate many dataclass objects (that have a bunch of methods to manipulate their data), will python duplicate those methods in memory leading to a lot of overhead?
[13:16:15] <varaindemian> any idea why I still get this error after installing flask -> ImportError: No module named flask
[13:16:21] <varaindemian> wattux ^
[13:16:52] *** Quits: ham5urg (~ham5urg@p5ddfdd3d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:16:59] <wattux> varaindemian I guess you ran the pip-install locally, not inside the docker container. again, a dockerfile would help debugging your problem
[13:17:27] <varaindemian> wattux I am trying to run the first snippet of code from here https://flask-httpauth.readthedocs.io/en/latest/
[13:17:36] <varaindemian> no Docker
[13:18:17] <Sorcery> capital F
[13:18:27] <Sorcery> oh never mind
[13:18:32] <raek> varaindemian: what command do you use to run flask?
[13:18:49] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:19:01] <raek> are you sure that you use the same python in the pip command in the flask command?
[13:19:20] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Ping timeout: 268 seconds)
[13:19:24] <raek> pip and python go together, and pip3 and python3 go together...
[13:20:44] <varaindemian> raek: yep, I was running it with python 2 :D
[13:20:55] *** Quits: drew (~drew@user/drew) (Ping timeout: 244 seconds)
[13:21:15] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (Quit:  )
[13:21:28] <Sorcery> *picard facepalm meme*
[13:21:40] *** Joins: Luyin (~daisy@user/luyin)
[13:22:37] <varaindemian> sorry for this useless spam
[13:23:01] <raek> Sorcery: the methods live in the class, not the instances. so they are shared between all the instances. is that what you wanted to know?
[13:23:10] *** Joins: MC_Raw (uid504644@id-504644.charlton.irccloud.com)
[13:23:55] <raek> varaindemian: have you tried running something like this? python -c "import flask"
[13:24:08] *** Joins: pnoud (~pnoud@user/pnoud)
[13:24:18] *** Joins: zinc (~zinc@163.ip-51-254-203.eu)
[13:24:28] <raek> (where "python" is python/python2/python3 or whichever binary you used)
[13:24:45] <varaindemian> Now I am able to succesfully run that app. Thank you guys!
[13:24:45] <Luyin> hey, I have a question regarding good development practices. I have a method to which I want to pass a zip file containing a couple wav files and one text file. I want to write methods to filter the audios from the text. now I'm using filetype (pypi pkg) to identify the audios via mime type, and now somebody suggested to me that checking whether the txt is actually a txt. I'm just wondering a bit
[13:24:47] <Luyin> because I feel the method should only read some stuff from the text and return it; isn't it a bit overengineered to add validation that it's actually a text file to that method? isnt it something I should leave to the user of the method to check before they it?
[13:24:52] <varaindemian> raek what is the -c param?
[13:25:00] *** Joins: Allegretto (~allegrett@85-238-67-31.pool.digikabel.hu)
[13:25:35] <raek> varaindemian: python reads the program from the -c argument instead from the terminal or a file
[13:25:50] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[13:26:26] <raek> so the same as starting python and then typing "import flask" in the python prompt
[13:27:06] *** Quits: death916_lap (~Death916@user/death916) (Ping timeout: 240 seconds)
[13:27:56] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[13:28:27] *** Joins: upsala (~zcb@185.213.155.160)
[13:28:31] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7)
[13:28:38] <wattux> Luyin kinda depends on the scenarios where your program is running. but i'd say, thats too much overhead. if people pass a file with .txt thats not really a .txt (suffix is just naming. it is merely a hint about the actual file type), it's mostly their problem. you could make sure that it crashes with a explanatory message, so users get whats wrong
[13:29:00] *** Quits: shan (shan@user/shan) (Quit: https://shantaram.xyz)
[13:29:10] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[13:29:12] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[13:30:03] <Sorcery> raek: Yes thanks! Even for non static methods then?
[13:33:01] <raek> Sorcery: yes. everything you set in the class block (method definitions, class constants, etc) lives in the class. the instance only contains the things you assign as attributes to self in methods
[13:33:24] <Luyin> wattux: I was thinking about adding a decorator that makes the validation checsk
[13:33:51] *** Joins: kixx (~kixx@user/kixx)
[13:34:32] <wattux> Luyin how would it look like? try/except with re-raising the caught exception and printing / logging something like "maybe the file type is wrong?" before?
[13:34:44] <iomari891> greetings, How can I retrive how many characters and rows my screen has?
[13:35:16] <raek> Sorcery: you can check this for yourself: x = MyClass(); print(x.__dict__); print(x.__class__.__dict__)
[13:36:17] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:36:56] *** Joins: death916_lap (~Death916@user/death916)
[13:36:57] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:37:49] <Luyin> wattux: hmm, maybe a decorator is not the best idea. rather a open_zip_with_my_format() which contains a validation as a first step and raises an exception immediately if something is off
[13:37:57] <Luyin> and does the actual file handling after that
[13:38:22] *** Joins: death916_lap (~Death916@user/death916)
[13:38:24] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:38:27] *** qwedfg_ is now known as qwedfg
[13:38:45] *** Joins: iflema (~ian@user/iflema)
[13:38:59] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:39:31] *** Joins: death916_lap (~Death916@user/death916)
[13:39:32] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:40:56] *** Joins: death916_lap (~Death916@user/death916)
[13:40:57] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:41:35] <Sorcery> raek: interesting, thanks!
[13:42:03] *** Joins: death916_lap (~Death916@user/death916)
[13:42:04] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:42:06] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:42:27] *** Joins: death916_lap (~Death916@user/death916)
[13:42:27] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:42:54] *** Joins: death916_lap (~Death916@user/death916)
[13:42:55] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:42:56] *** Joins: SebastianM (~seba@user/sebastianm)
[13:43:24] *** Joins: Deepfriedice (~Deepfried@60-241-43-208.static.tpgi.com.au)
[13:44:01] *** Joins: death916_lap (~Death916@user/death916)
[13:44:02] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[13:45:00] *** Joins: pnoud (~pnoud@user/pnoud)
[13:47:44] <Luyin> I think I'll concentrate on the actual function and add the checks later. not forgot but making the code work has higher prio.
[13:48:06] <wattux> Luyin sounds very reasonable
[13:48:16] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[13:49:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[13:50:10] *** Quits: asix (~Anders@user/asix) (Ping timeout: 268 seconds)
[13:50:42] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 240 seconds)
[13:51:01] *** Quits: ludo (ludo@2a01:7e00::f03c:91ff:fee3:ac9f) (Changing host)
[13:51:01] *** Joins: ludo (ludo@user/ludo)
[13:52:20] *** Joins: doko (~doko@2a02:8106:1a:7600:d5a1:fabb:735b:2e1d)
[13:52:42] *** Quits: audiocat (~audio@2603-8081-1800-0062-4de8-ec55-6e80-3226.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:52:48] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[13:52:59] *** Joins: death916_lap (~Death916@user/death916)
[13:57:17] *** Joins: fentanyl (~exit-host@slave.sapi01.de)
[13:57:27] *** Joins: ethoxy (~0xe3b7@echelon.lucif3r.ru)
[13:57:36] *** Quits: randall (~randall@user/randall) (Quit: leaving)
[13:57:52] *** Joins: randall (~randall@user/randall)
[13:57:55] <ethoxy> What does the prefix 'L' of large number in Python?
[13:58:13] <bjs> ethoxy: you mean suffix?  and nothing
[13:58:41] <ethoxy> Oh, I'm sorry suffix. My bad.
[13:58:47] <bjs> ethoxy: a prefix L is just a variable name:  L12301230123  is just a variable called "L12301230123"
[13:59:00] <ethoxy> No, suffix, I mean.
[13:59:20] <wattux> https://stackoverflow.com/a/11764774/2547281 for a more detailed explanation
[14:00:02] *** Quits: __that__ (~Guest93@195.59.168.125) (Quit: Client closed)
[14:00:09] <ethoxy> Ah, I see. Makes sense. Thanks for that link.
[14:00:10] *** Joins: bjelleklang (~c@user/chha)
[14:00:16] *** Joins: Gudddu (~Guddu@117.222.80.236)
[14:00:39] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[14:00:42] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 240 seconds)
[14:00:44] <bjs> ethoxy: the L suffix didn't do anything and was removed in Python 3.0
[14:01:37] *** Quits: zesty (~djkoolmat@2001:470:69fc:105::2b2c) (Quit: Bridge terminating on SIGTERM)
[14:01:37] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Bridge terminating on SIGTERM)
[14:01:37] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[14:01:37] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Bridge terminating on SIGTERM)
[14:01:38] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[14:01:38] *** Quits: Kamui (~kamui-ren@2001:470:69fc:105::f74) (Quit: Bridge terminating on SIGTERM)
[14:01:40] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (Quit: Bridge terminating on SIGTERM)
[14:01:42] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: Bridge terminating on SIGTERM)
[14:01:42] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Quit: Bridge terminating on SIGTERM)
[14:01:45] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:a0e9:5ac8:9436:b228)
[14:01:45] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Quit: Bridge terminating on SIGTERM)
[14:02:26] *** Joins: shad (~shad@user/shad)
[14:02:44] *** Joins: mambang (~mambang@user/mambang)
[14:03:06] *** Quits: chha (~c@user/chha) (Ping timeout: 240 seconds)
[14:03:28] <bjs> ethoxy: if you can,  I'd stop using Python 2, it's quite old now :)
[14:03:29] *** Joins: asix (~Anders@user/asix)
[14:03:36] *** Quits: Sorcery (~stefan@2a02-a455-3349-1-ef7e-ae0a-14f5-9280.fixed6.kpn.net) (Quit: Konversation terminated!)
[14:03:44] *** Quits: Guddu (~Guddu@117.222.85.233) (Ping timeout: 268 seconds)
[14:03:52] *** Quits: mambang (~mambang@user/mambang) (Client Quit)
[14:03:57] <ethoxy> Yeah, my system's `python` points to python 2.7 version.
[14:04:08] <bjs> ethoxy: that's not uncommon,  you do not have to use the system's `python`
[14:04:28] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[14:04:32] <ethoxy> Yeah, I'll explicltly mention 3.
[14:04:34] <bjs> I always just install a new version of python alongside and don't ever touch the system's `python`
[14:04:55] <kosh> yeah leave the system python alone
[14:05:06] <bjs> ethoxy: have you seen https://github.com/pyenv/pyenv ? it's some shell scripts which can install Python versions and setup your terminal to use them
[14:05:42] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 264 seconds)
[14:06:04] <ethoxy> I've used pyenv in the past. Like, it's been more than 4 years last time I've really used python. These days I'm only using python's interpreter to do quick-and-dirty calculations :)
[14:06:30] <ethoxy> I'll look at Pyenv.
[14:06:39] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[14:06:55] <bjs> ethoxy: it's probably worth running pyenv and doing something like `pyenv install 3.9.5; pyenv global 3.9.5`
[14:07:14] <ethoxy> Yeah, that looks neat.
[14:07:46] <no_gravity> Why do I see a mix of "a=x" and "a = x" on docs.python.org? Are there cases where the convention is to not use whitespace?
[14:07:50] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[14:08:00] <no_gravity> Example: pp = pprint.PrettyPrinter(indent=4)
[14:08:02] <bjs> no_gravity: it depends on the context
[14:08:11] <bjs> no_gravity: see PEP 484 for the usual style recommendations
[14:08:21] <bjs> no_gravity: but yeah, the convention is whitespace around variable assignments.
[14:08:35] *** Joins: tims (~tims@193-119-75-93.tpgi.com.au)
[14:08:41] <bjs> but not around keyword arguments
[14:09:10] *** Quits: timsavage (~tims@27-33-31-71.tpgi.com.au) (Ping timeout: 244 seconds)
[14:09:14] <no_gravity> bjs: PEP 484 seems to be about Type Hints.
[14:09:21] <bjs> oops hahaha
[14:09:22] <bjs> PEP 8 obviously
[14:09:35] *** Joins: meatballs (~owentanti@2001:470:69fc:105::633)
[14:09:39] *** Quits: feriman (~feriman@188.163.113.127) (Quit: WeeChat 3.1)
[14:09:43] <bjs> no_gravity: https://www.python.org/dev/peps/pep-0008/
[14:09:44] <Yhg1s> no_gravity: 'x = 1' and 'f(x=1)' are different constructs with different semantics entirely, so there's different styles for them.
[14:09:44] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[14:09:44] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[14:09:44] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[14:09:44] *** Joins: bgardner (~bgardner@2001:470:69fc:105::8a8)
[14:09:44] *** Joins: codemouse92__ (~codemouse@user/codemouse92)
[14:09:44] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[14:09:45] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[14:09:55] *** Joins: feriman (~feriman@188.163.113.127)
[14:09:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[14:09:55] <flower_> Here is a first python tool I made. If someone wants to review it a bit. I'm now using print a lot, but that should probably raising exceptions with logging messages? When do you use what? I want to display the error messages also to console.
[14:09:59] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[14:10:00] <flower_> http://paste.debian.net/1201394/
[14:10:36] <no_gravity> bjs: I see.
[14:10:38] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[14:10:38] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[14:10:38] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[14:10:38] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[14:10:45] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[14:10:52] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[14:14:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:15:12] *** Joins: shan (shan@user/shan)
[14:15:32] <no_gravity> I have a list like ['1,2','a,b'] and want to turn it into a list of lists like [['1','1'],['a','b']]. What is an elegant way to do that?
[14:15:53] <no_gravity> Aka apply split on every entry in the list.
[14:17:05] <bjs> no_gravity: `new_list = [s.split(",") for s in old_list]`
[14:17:15] <no_gravity> bjs: No way to reuse the old list?
[14:17:31] <bjs> no_gravity: "reuse" ?
[14:17:33] <bjs> I mean you can overwrite it:
[14:17:37] <bjs> no_gravity: `old_list[:] = new_list`
[14:18:05] <no_gravity> bjs: In PHP it would be: for (&$x in $old_list) &$x=explode(',')
[14:18:29] <no_gravity> & meaning "use a reference, not a copy"
[14:18:31] <bjs> no_gravity: maybe you're looking for `for i, s in enumerate(old_list): old_list[i] = s.split(",")`
[14:18:33] <Yhg1s> flower_: you should realise that DeprecationWarnings are filtered by default, and aren't just about python3. (Especially considering you're already using Python 3.) The effect of your line 24 is that you won't even see DeprecationWarnings if you explicitly ask for them, which is going to make it harder to future-proof your code.
[14:18:42] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 272 seconds)
[14:19:13] *** Joins: aslicedbanjo (~aslicedba@host86-150-115-37.range86-150.btcentralplus.com)
[14:19:13] <no_gravity> bjs: No way to do "for x in" so that x is a reference rather than a copy?
[14:19:16] <Yhg1s> flower_: you seem to be mixing f-strings and %-formatting. I would highly recommend using str.format() for when f-strings can't be used, although many, if not all, of those %-formatting operations can just be f-strings.
[14:19:26] <bjs> no_gravity: there is no copying here
[14:19:52] <no_gravity> bjs: Then why doesn't this work: for s in l: s=s.split(',')
[14:19:57] <flower_> Yhg1s, thx. Yes, but I don't think those DeprecationWarnings are in my code, I think it's from a module I imported
[14:20:12] <bjs> no_gravity: it's just binding a new value to `s`
[14:20:26] <no_gravity> bjs: Exactly. Is it possible to bind the same value?
[14:20:30] <flower_> Yhg1s, thx Will look into those strings and str.format()
[14:20:35] <Yhg1s> flower_: also, "message '%s'" % (path,) (or f"message '{path}'") is better written as "message %r" % (path,) (or f"message {path!r}") -- that will call repr() on the path, which takes care of escaping thigns like quotes for you.
[14:20:44] <bjs> no_gravity: well, yes `s = s` binds the same value but that's almost certainly not what you meant
[14:21:08] <Yhg1s> flower_: they're still going to break your code if they aren't fixed, so you really want a way to *not* ignore them. Like I said, if you run the code they're disabled by default anyway.
[14:21:34] <no_gravity> bjs: So there are no references in Python? No way to make a=1;b=referenceTo(a);b=7;print(a); // prints 7
[14:21:36] <Yhg1s> no_gravity: you may want to spend some time with bit.ly/pynames1
[14:21:47] <Yhg1s> no_gravity: assignment doesn't follow references, no. It rebinds names.
[14:21:49] <raek> no_gravity: "s" is the loop variable. it is not some kind of reference into an entry in a list.
[14:21:51] <flower_> Yhg1s, disabled by default? I get the message when I don't ignore them.
[14:21:57] <flower_> *messages
[14:22:00] <no_gravity> raek: Exactly.
[14:22:00] <Yhg1s> flower_: how are you running your code?
[14:22:13] <flower_> Yhg1s, python myscript.py
[14:22:25] <flower_> Yhg1s, for now
[14:22:28] <raek> well, it is name for the object in the list, but
[14:22:38] <Yhg1s> flower_: and do you have a PYTHONWARNINGS environment variable set?
[14:22:47] <raek> it's not like a pointer or reference in C/C++
[14:22:50] <bjs> no_gravity: I think you just have a misunderstanding of how Python's variables work.  `for s in l: ...` isn't doing any copying, and `s` you can think of as a reference to the string.  But you cannot update the contents at that location (since strings are immutable) and you don't get any kind of reference to an "entry" in the list
[14:23:09] <flower_> Yhg1s, I don't think so, not that I know
[14:24:02] <raek> no_gravity: nedbat has explained these concepts beautifylly: https://nedbatchelder.com/text/names1.html
[14:24:25] <no_gravity> bjs: So this is not possible in Python? https://3v4l.org/nn4Y2
[14:24:34] <bjs> no_gravity: but `for i, x in enumerate(old_list): ...` lets you get that entry with old_list[i].    You want it to be spelled the same way as in PHP but PHP and Python are different languages
[14:24:37] <Yhg1s> flower_: can you show the output you get from the deprecations?
[14:24:51] <bjs> no_gravity: I just gave you the code to do in-place updates: `for i, s in enumarate(old_list): old_list[i] = s.split(",")`
[14:24:57] <flower_> Yhg1s, sure, one moment
[14:25:15] <no_gravity> bjs: That approach is using an index in the loop. The PHP code is much shorter.
[14:25:27] <bjs> no_gravity: okay well you don't want the feature then, you just want to be spelled like it is in PHP
[14:25:29] <no_gravity> bjs: References make a lot of code shorter.
[14:25:32] <bjs> but PHP and Python are different languages, sorry
[14:25:34] <raek> no_gravity: the "&" part is not possible, but there are other short ways of accomplishing the same result
[14:25:45] <Yhg1s> no_gravity: you should really spend time with bit.ly/pynames1.
[14:25:47] <no_gravity> raek: What is an equally short way in Python?
[14:25:49] <bjs> no_gravity: Python has references too,  `s` is a reference, `i` is a reference, `old_list` is a reference.
[14:26:45] <flower_> Yhg1s, http://paste.debian.net/1201396/
[14:26:46] *** Joins: uKi` (~vicorp@180.249.83.84)
[14:26:47] <raek> well, I think bjs' approach was pretty short: s = [a.split(",") for a in s]
[14:28:18] <bjs> no_gravity: I mean `for i, e in enumerate(a): a[i] = e.split(",")` is like a few characters longer than the PHP version.  You're literally arguing over 3-4 characters as being "shorter"
[14:28:20] *** Quits: Gudddu (~Guddu@117.222.80.236) (Quit: Leaving)
[14:28:23] *** Joins: egon_ (~egon@user/egon)
[14:28:31] <bjs> it's barely even worth the effort of arguing and certainly nobody will want to change Python to make this pattern 4 characters shorter
[14:28:44] <bjs> or whatever
[14:29:13] <no_gravity> raek: Not sure what you mean by "a" and "s" in your code? Can you try it here? https://www.online-python.com/p7VFwcRmI5
[14:29:20] <Yhg1s> flower_: oh, that's very interesting. The warning is coming from something that shouldn't be raising that warning. It's probably a bug in an extension module you're using, that's the only way I can imagine this happening.
[14:29:28] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[14:29:35] <Yhg1s> no_gravity: 's' is your list. 'a' is a loop variable.
[14:29:59] <no_gravity> bjs: Not sure I would call it "arguing". I am mainly working on understanding Python. Mainly in comparison to PHP which is my main language.
[14:30:08] <flower_> Yhg1s, hm
[14:30:23] <Yhg1s> flower_: it's rather worrying to be honest, I'm not even sure how this is possible.
[14:30:25] <bjs> no_gravity: then watch/read that link that Yhg1s gave you.  It is a good introduction to how Python's names work
[14:30:38] *** Joins: frostschutz (~frostschu@2a01:c23:7c64:6000:a5bb:997b:9a36:d875)
[14:30:42] *** egon_ is now known as egon
[14:30:43] <no_gravity> Yhg1s: Ok, but that does not work: https://www.online-python.com/p7VFwcRmI5
[14:30:53] *** uKi` is now known as KocHi
[14:30:59] <Yhg1s> no_gravity: that site doesn't work for me, sorry.
[14:31:05] <no_gravity> Yhg1s: Why not?
[14:31:06] *** Quits: KocHi (~vicorp@180.249.83.84) (Quit: Wᴷaͦlͨkᴴeͥr)
[14:31:20] <Yhg1s> no_gravity: no idea, too much magic crap, I guess. Just copy-paste what you're seeing.
[14:31:28] <bjs> no_gravity: why doesn't it work?   the code looks fine to me.
[14:31:30] <flower_> Yhg1s, http://das.nasophon.de/pyliblo/
[14:31:38] <no_gravity> bjs: Well, try it.
[14:31:49] <bjs> no_gravity: Well, why don't you tell me what you wanted it to do instead?
[14:31:51] <bjs> because I can clearly see what it does
[14:31:53] <flower_> Yhg1s, https://pypi.org/project/pyliblo/
[14:32:15] <nedbat> no_gravity: maybe we don't understand what the PHP was doing: doesn't it give you an array of two elements, each of which is an array of two elements?
[14:32:17] <no_gravity> bjs: Oh damn, you are right!
[14:32:25] <Yhg1s> flower_: I'm not going to dig through all its code trying to figure out how it's producing a warning that's attributed to the wrong line of code.
[14:32:34] <no_gravity> nedbat: Yes, https://www.online-python.com/p7VFwcRmI5 DOES the right thing! My mistake!
[14:32:34] <bjs> no_gravity: we can take this conversation as an assumption that I know Python much better than you, and can see very clearly what this code does,  so you should explain why it doesn't do what you *Want*
[14:32:35] <bjs> okay
[14:32:40] <bjs> well there you go then
[14:32:50] <flower_> Yhg1s, too bad! ;)
[14:33:17] <Yhg1s> flower_: you'll just have to keep supressing it I guess :)
[14:33:34] <flower_> Yhg1s, no worries, that's the plan ;)
[14:33:40] <no_gravity> I have to say that even though `l = [a.split(",") for a in l]` is shorter, I find it very hard to read.
[14:33:50] <flower_> Yhg1s, might report it, but not sure how active the project is
[14:33:51] <rendar> "{:2f}".format(50.1) returns '50.100000' -- why? shouldn't that return a fixed precision of 2 places after the point?
[14:33:51] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[14:34:02] *** Joins: g0RT (~thodson@host86-139-210-36.range86-139.btcentralplus.com)
[14:34:02] <Yhg1s> flower_: by the way, you don't need the 'global' statement on lines 100 and 108. You only need it on line 92. You only need 'global x' if you want to *assign* to a global variable 'x' in the function.
[14:34:10] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[14:34:14] <bjs> rendar: did you mean .2f not 2f
[14:34:32] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[14:34:33] <rendar> oh, sorry, right
[14:34:33] <bjs> no_gravity: I find your PHP code hard to read
[14:34:39] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[14:34:44] <bjs> no_gravity: I think it's just a matter of what you're used to working with, not anything intrinsic
[14:34:52] <no_gravity> bjs: Maybe
[14:34:55] <nedbat> no_gravity: more practice with python will make it easier
[14:34:55] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[14:34:57] *** Joins: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f)
[14:34:58] <BEC001AF[m]> no_gravity: I think it's a matter of getting used to it, for me for (&$x in $old_list) &$x=explode(',') is probably equally hard to read, because it's been ages since I've used that language
[14:35:03] <flower_> Yhg1s, thx
[14:35:21] *** Joins: Masklin_Gurder (~joel@93.182.183.85)
[14:36:11] <Yhg1s> flower_: you usually want to use os.environ['NSM_URL'] instead of os.getenv('NSM_URL'), and lower-cased variable names (like in 'right_nsmd_running') instead of all-caps, for things that aren't constants.
[14:36:46] <Yhg1s> flower_: all of that's mostly just details, though. I don't see anything in the code I would worry about.
[14:37:08] *** Parts: Luyin (~daisy@user/luyin) (bye bye)
[14:37:11] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:37:18] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[14:38:09] <flower_> Yhg1s, a environment variable is with caps right? and URL is a constant isn't it?
[14:38:45] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[14:39:15] *** Quits: Masklin_Gurder (~joel@93.182.183.85) (Client Quit)
[14:39:31] *** Joins: Masklin_Gurder (~joel@93.182.183.85)
[14:40:32] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[14:40:32] <Yhg1s> flower_: those were two separate comments. Use os.environ instead of os.getenv, and use lower-cased variable names (not environment variables, Python variables)
[14:41:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:41:20] <flower_> Yhg1s, but you use caps for constants in python right?
[14:41:55] <Yhg1s> flower_: yes. NSM_PIDS and AMOUNT_NSMD_PIDS aren't constants, though. they're local variables in right_nsmd_running
[14:42:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:42:51] <flower_> Yhg1s, hm... then my understanding of a constant isn't right maybe.
[14:42:56] <rendar> formatting an integer with "f" format, specifying a precision, it will affect all the figures *after* the point, but with the "g" formatting, precision number will include also the figures BEFORE the point, how is that possible?!
[14:43:14] *** Joins: thiras (~thiras@user/thiras)
[14:43:27] <Yhg1s> flower_: let's say it's something that doesn't change *throughout the program*. Local variables like NSM_PIDS change each time you call the function.
[14:43:39] *** Joins: id (jeda@hellomouse/dev/cryb.jeda)
[14:44:22] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[14:45:02] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[14:45:40] *** Quits: g0RT (~thodson@host86-139-210-36.range86-139.btcentralplus.com) (Ping timeout: 268 seconds)
[14:46:08] *** Joins: uKi` (~kochi@user/uki/x-9954492)
[14:46:14] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi)
[14:47:18] <bjs> rendar: well it's possible because that's how it was written :)
[14:47:49] <bjs> rendar: https://docs.python.org/3/library/string.html#formatstrings  "General format. For a given precision p >= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation"  so if it renders it in scientific format  X.YZe+whatever then the precision is the number of digits there
[14:48:00] *** Joins: Adoi (~Adoi@user/adoi)
[14:48:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:48:09] <nedbat> flower_: are you thinking of the Javascript "const"?
[14:48:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:09] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[14:51:53] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 272 seconds)
[14:51:54] *** Quits: death916_lap (~Death916@user/death916) (Remote host closed the connection)
[14:51:57] <bjs> rendar: so 123 as .3g will be 123, but as .2g will be 1.2e2, and 0.0000123 as .2g will be 1.2e-5
[14:52:31] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:53:13] *** Joins: torandu (~sean@94.7.66.19)
[14:54:04] *** Joins: teut (~teut@182.69.85.39)
[14:55:09] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[14:55:15] <teut> Uploaded file: https://uploads.kiwiirc.com/files/ae8e8b3d9080957bade635f1242989e7/pasted.txt
[14:55:53] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:55:55] *** Joins: death916_lap (~Death916@user/death916)
[14:55:57] *** Joins: egon (~egon@user/egon)
[14:56:57] <teut> I have this view in django and the user will  get to this view, now  it's a paginated view and  while the user is flipping between the pages the state of the CheckboxData will be changed by the view
[14:56:58] *** Joins: cation21 (cation@user/cation)
[14:57:18] *** Quits: cation (cation@user/cation) (Ping timeout: 264 seconds)
[14:57:28] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[14:57:40] <teut> the requirement is such that if the user changes to some other view than the state of CheckboxData should reset to what it is now
[14:58:22] <teut> the obvious solution that looks is to in each other view I need to reset the state of this view
[14:58:32] <teut> but that is highly impractical
[14:58:51] *** Quits: shad (~shad@user/shad) (Ping timeout: 272 seconds)
[14:59:04] <teut> any  approach to deal with the problem?
[14:59:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:59:47] *** Joins: Keij0 (~Keij0@user/keij0)
[14:59:58] *** Quits: torandu (~sean@94.7.66.19) (Ping timeout: 268 seconds)
[15:00:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:27] <jinsun> I am trying to initialize ested dataclasses from json data, is there any cleaner way than what I am trying now https://bpa.st/3X6A
[15:00:30] <teut> each time a user  navigates between pages the   class instance is  made
[15:00:33] *** cation21 is now known as cation
[15:00:40] <jinsun> *nested
[15:00:57] *** Joins: eberna (uid504658@id-504658.charlton.irccloud.com)
[15:01:36] *** Joins: shad (~shad@user/shad)
[15:02:01] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:02:25] *** Joins: jpic_ (~jpic@82.142.9.26)
[15:02:26] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Ping timeout: 268 seconds)
[15:02:58] <Keij0> Hi, I'm using aiohttp to write a rest api that manages some processes and I use asyncio.subprocess.create_subprocess_exec to launch them within a method associated with a request, I then loop over its output to find if they launched properly and I wanted to log all the output
[15:03:02] <Keij0> but idk how to do that
[15:04:18] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 268 seconds)
[15:04:43] <rendar> Keij0: why do you use subprocesses if you're using asyncio?
[15:04:47] *** Quits: jmcantrell (~weechat@86.106.143.100) (Ping timeout: 268 seconds)
[15:04:59] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 272 seconds)
[15:05:09] <Keij0> asyncio has its own subprocess module so I use that
[15:05:11] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[15:05:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:05:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:06:01] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 268 seconds)
[15:06:17] *** Joins: torandu (~sean@94.7.66.19)
[15:06:17] *** Quits: torandu (~sean@94.7.66.19) (Client Quit)
[15:07:27] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Quit: Ping timeout (120 seconds))
[15:07:31] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 272 seconds)
[15:07:32] *** Joins: OPK (~OPK@user/opk)
[15:07:55] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[15:08:22] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.1)
[15:08:30] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[15:10:51] *** Joins: SebastianM (~seba@user/sebastianm)
[15:12:02] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[15:13:38] *** Joins: egon (~egon@user/egon)
[15:13:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:14:21] *** Quits: egon (~egon@user/egon) (Client Quit)
[15:14:51] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[15:14:58] *** Joins: egon (~egon@user/egon)
[15:15:07] *** Quits: anandprabhu (~anandprab@87.201.97.214) (Quit: Leaving)
[15:15:10] <flower_> Yhg1s, the program runs once. So that variable doesn't change during one program run.
[15:15:36] <flower_> Yhg1s, so I thought it was a constant
[15:15:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:16:51] *** Joins: manti7 (~manti7@176.10.104.94)
[15:17:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:18:14] *** Quits: mesaboogie (~mesaboogi@user/mesaboogie) (Quit: leaving)
[15:19:07] *** Quits: node1 (~node1@user/node1) (Ping timeout: 272 seconds)
[15:19:32] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[15:22:03] *** Quits: gusto (~Augustus@109.255.100.54) (Ping timeout: 268 seconds)
[15:23:39] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[15:25:07] <Keij0> rendar: the function looks something like this to maybe help picture it better https://bpa.st/2SIQ
[15:25:25] *** Joins: Bardon (~Bardon@user/Bardon)
[15:26:53] <raek> jinsun: have you checked out Pydantic? it specifically aims to solve that problem
[15:27:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:28:35] <Adoi> hello, my solution here is rejected as wrong, but I cant figure where it is wrong; https://www.pastebin.cz/raw/F98DaPU
[15:28:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:29:01] *** Joins: badsektor (~badsektor@user/badsektor)
[15:29:40] <bjs> Adoi: well does  your code output the same thing?
[15:30:04] <Adoi> the only thing I suspect is that the question wants that  the values should be separated by a single space. and the error message shows the desired output with columns closer to each other than mine
[15:30:05] *** Joins: gusto (~Augustus@109.255.100.54)
[15:30:12] <Adoi> bjs, yes, it outputs the same
[15:30:25] <bjs> Adoi: with the same case and whitespace?
[15:30:51] <Adoi> but when I put the columns closer, the multi-digit numbers slide the others in the same line sideways
[15:31:11] <bjs> Adoi: what exactly "rejected" this code?
[15:31:25] <Adoi> bjs, I am not sure about the whitespace, nor about the case, if you mean the hex letters..I thought perhaps the latter would be trivial
[15:31:47] <Adoi> bjs, I dont know what the rejection is for. it just shows my and their outputs
[15:31:53] <bjs> Adoi: but what is "it" ?
[15:32:04] <bjs> and who do you mean by "their"
[15:32:33] <Adoi> bjs, like this; https://www.pastebin.cz/raw/B1YueoS
[15:32:39] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 268 seconds)
[15:32:47] <rendar> Keij0: i see, @routes.post('/some/route') is something from some framework?
[15:32:57] <bjs> Adoi: but like,  are you doing some exercise on a website? are you submiting things to a human to mark?
[15:33:06] <bjs> all the talks of "it" and "they" and "their"
[15:33:06] <jinsun> raek: I've heard of it, never really tried it out, I can try that, thanks
[15:33:26] *** Quits: shad (~shad@user/shad) (Ping timeout: 272 seconds)
[15:33:32] <Adoi> bjs, the former, a website
[15:33:36] <bjs> Adoi: well that output makes it clear why it got rejected, your output and their sample output isn't the same
[15:33:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:34:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:34:23] <Adoi> yes, but as I said, if I bring the columns closer, the numbers with more than one digits slide to the left and move the whole line outward
[15:34:34] <Adoi> then they are no more aligned
[15:34:39] *** Joins: andreas303 (~andreas@gateway/tor-sasl/andreas303)
[15:34:45] <bjs> Adoi: maybe you're supposed to align based on how many digits there are
[15:34:59] *** Quits: andreas303 (~andreas@gateway/tor-sasl/andreas303) (Client Quit)
[15:35:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[15:35:26] *** Joins: andreas303 (~andreas@gateway/tor-sasl/andreas303)
[15:35:39] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[15:36:02] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[15:36:14] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 268 seconds)
[15:37:12] <Adoi> bjs, hmm, let me try to do that
[15:37:14] <bjs> Adoi: btw  print(''.join(line_new))  why not just print(line_new) ?
[15:37:27] *** Joins: the_rat (~ratto@emily.sorcio.org)
[15:37:40] <Adoi> bjs, I, too, noticed they were the same :)
[15:38:04] *** Joins: manti7 (~manti7@176.10.104.94)
[15:38:11] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:38:29] <alguien> quick question: do function definitions have to precede their usage in python?
[15:38:48] <bjs> alguien: the `def` has to be executed before you can use it, but that doesn't mean it has to be "above" it in the code
[15:39:56] <Keij0> rendar: from aiohttp
[15:40:30] <alguien> bjs, so in a .py, if I just have a def and a call, they would have to be in that order?
[15:40:50] <Keij0> maybe I could somehow move that process launch into another method and just signal to the let's call it "mother" method if it finds the desired thing in stdout while dumping every line in that loop
[15:40:57] <bjs> alguien: the order they happen to appear in the text doesn't matter, what matters is the order that Python executes them
[15:40:59] <Keij0> just idk how to do it properly that's why I'm asking
[15:41:10] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[15:41:16] <alguien> bjs, but wouldn't it execute them in the order in which they appear?
[15:41:28] *** Joins: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net)
[15:41:31] <bjs> alguien: well no, functions get executed when you call them :)
[15:41:54] <alguien> mate come on
[15:41:58] *** Joins: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl)
[15:42:29] <alguien> is "def executed" before "being used" as you put it?
[15:42:34] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:42:37] <bjs> alguien: https://bpa.st/O5FA
[15:42:53] <alguien> ok, thanks
[15:42:58] <bjs> alguien: saying "come on" isn't going to help, it doesn't matter if the def is "above" the call or not, it matters whether it got executed earlier
[15:43:21] <alguien> it matters if it is above in the AST
[15:43:25] <bjs> njo
[15:43:36] <raek> jinsun: more specifically, the nesting part is a goal of pydantic. it also handles situations when all the inputs are strings (eg. web requests or config files). in your case the data already has some structure. if you find some toher solution I'm also interested
[15:43:38] <bjs> alguien: look at my second file, the `def baz` is below, but the code is fine.
[15:43:48] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[15:44:00] <alguien> bjs, in your second example def baz is above baz() in the AST
[15:44:27] *** Joins: __that__ (~Guest25@195.59.168.125)
[15:44:33] <bjs> alguien: I don't know what you mean, you can put the whole `def bar` below the `def baz` and it's also file
[15:44:34] <bjs> fine*
[15:44:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:44:58] <bjs> what's important is whether Python executes the `baz()` call or the `def baz` definition first.  It has to execute the `def baz` declaration before you can call it like `baz()`
[15:45:13] <alguien> AST as in abstract syntax tree. defs are at one level, and baz() and skip are in the level below
[15:45:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:45:40] <bjs> alguien: Python does not work that, it does not scan the AST looking for functions
[15:45:44] <alguien> but on the same level, it does matter which one is first (above in the source code) it seems from your first example
[15:45:50] *** Joins: pnoud (~pnoud@user/pnoud)
[15:46:21] <bjs> Python executes code starting at the top of the file. When it reaches a `def` it adds the function to the scope, when it reaches a call it jumps to the function The `def` has to be executed before you can call it.
[15:47:23] *** Joins: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de)
[15:47:59] <bjs> alguien: you can think of a `def foo ...` like an assignment, `foo = <make a function>`. You can't use a variable before you assign to it.
[15:48:30] <alguien> yes, but from your second example it seems clear it doesn't reach baz() before def baz(), meaning it does do a breadth-first "scan"
[15:48:50] <bjs> alguien: when Python comes to execute a function, there is no "scanning" of the AST involved
[15:49:00] <alguien> yeah, I didn't suggest that
[15:49:03] <bjs> all that matters is which lines have been executed already up to this point,  and what variables are in scope
[15:49:27] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:49:34] <rendar> Keij0: i see, unfortunately i'm too lame to help you on that :(
[15:50:21] *** Joins: egon (~egon@user/egon)
[15:51:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[15:51:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:51:21] <alguien> bjs, ah, this does _not_ work: https://bpa.st/4SIQ
[15:51:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:51:39] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[15:51:43] <bjs> alguien: no it does not, because the baz() call will happen before the `def baz` line is reached
[15:51:48] <alguien> yep
[15:52:00] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[15:52:03] <alguien> got it now (thumbs up)
[15:52:08] <bjs> Okay, good :)
[15:52:40] *** Joins: doev (~doev@p549d796e.dip0.t-ipconnect.de)
[15:53:05] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[15:55:17] <jwhisnant> help
[15:56:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[15:56:41] *** Quits: andreas303 (~andreas@gateway/tor-sasl/andreas303) (Remote host closed the connection)
[15:56:58] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:57:10] *** Quits: yogoyo (~weechat@p200300def74a01385e2bb5230726217c.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[15:57:11] *** Joins: andreas303 (~andreas@gateway/tor-sasl/andreas303)
[15:57:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:15] <doev> (19|20).{8} <- this is a pattern for a date type, but I can't construct any valid value. What is the problem with '2021010101'?
[15:57:28] *** Joins: egon (~egon@user/egon)
[15:57:31] <doev> Reason: Invalid datetime string '2001010101' for <class 'elementpath.datatypes.datetime.Date10'>
[15:57:59] <Keij0> rendar: no problem, maybe someone else could help tho :D
[15:58:05] <rendar> :)
[15:58:11] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Ping timeout: 272 seconds)
[15:58:33] *** Quits: __that__ (~Guest25@195.59.168.125) (Quit: Client closed)
[15:58:34] <jwhisnant> (good day all, for want of a forward slash the ...)
[15:58:37] *** Joins: ochronus (~ochronus@user/ochronus)
[15:58:42] <doev> when I am right, than '2001010101' matches the pattern, but it is no date10-type. But Why?
[15:59:34] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[16:00:04] *** Joins: Andalu30 (~juan.arte@85.137.21.37.dyn.user.ono.com)
[16:02:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:03:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:03:02] <crippa> hi. I'm struggling to understand how to overlay transparent images to my video stream using opencv.. anybody that can help? Transparent layer is showing as black :(  Here's my code: https://stackoverflow.com/questions/67998609/overlaying-transparent-image-to-video-stream-opencv
[16:03:59] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:04:12] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:04:53] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[16:05:00] *** Joins: egon (~egon@user/egon)
[16:06:23] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[16:06:44] <doev> crippa, maybe cause there is no alpha channel? output= output[:,:,:3]
[16:06:56] *** Joins: y04nn (~y04nn@81.17.24.204)
[16:07:27] <doev> without alpha channel, you can only do blending, I think.
[16:08:02] <crippa> mmm...
[16:08:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:08:37] <crippa> let me trya [:,:,:,:]
[16:08:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:09:10] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:09:24] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[16:10:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi)
[16:10:35] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:10:48] <crippa> "too many indices for array" is the complaint.. I guess I need to return 3
[16:11:49] *** Joins: vsantana (~vsantana@fttx-17713614824.usr.predialnet.com.br)
[16:13:16] <doev> I don't know opencv very much, but you need 4-channels rgba for a transparent image. Without, you can define a color that is used as mask.
[16:15:27] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[16:15:50] *** Ulti_ is now known as Ulti
[16:17:14] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[16:17:43] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[16:18:10] *** Quits: diadatp (~diadatp@user/diadatp) (Ping timeout: 268 seconds)
[16:18:15] *** Joins: zaquest (~notzaques@5.128.210.178)
[16:21:03] *** Joins: gareppa (~gareppa@user/gareppa)
[16:23:11] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: node-irc says goodbye)
[16:23:36] *** Affliction is now known as NotAffliction
[16:23:41] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[16:23:50] *** Quits: y04nn (~y04nn@81.17.24.204) (Ping timeout: 252 seconds)
[16:23:53] *** NotAffliction is now known as Affliction
[16:24:13] *** Affliction is now known as AnotherNotAfflic
[16:24:25] *** AnotherNotAfflic is now known as Affliction
[16:25:10] <k0fein> crippa: video format from your video stream must support rgba too. If not, you have to first convert the rgb (or other colorspace) frames to rgba and only after that you can blend it with PNG. Colorspace must be same for both frames.
[16:25:20] *** niko is now known as o
[16:25:32] <flower_> should one use print to display a message to the user and use logging only for the developer(s)?
[16:26:52] *** Joins: nyah (~nyah@90.221.186.180)
[16:27:02] *** Joins: brownan (~brownan@136.56.137.143)
[16:30:22] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[16:31:12] <flower_> https://docs.python.org/3/howto/logging.html
[16:31:13] <flower_> hm
[16:31:18] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[16:31:31] *** Joins: zeden (~zeden@user/zeden)
[16:31:57] *** Joins: Julian (~tos9@151.66.53.132)
[16:32:04] *** Quits: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[16:32:21] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[16:32:58] *** Quits: neibo (~neibo@143.red-88-5-146.dynamicip.rima-tde.net) (Ping timeout: 272 seconds)
[16:33:00] <Julian> Anyone know the right incantation to get PyInstaller to use setuptools install_requires for finding dependencies rather than magic import detection
[16:33:03] *** Joins: sigint (sigint@user/sigint)
[16:33:16] *** Joins: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net)
[16:34:47] <sigint> Hi, is the multiprocessing Queue compatible with multiprocessing "spawn" context? It should be right? But each time a child process tries to put something in the queue, the child just dies without explanation
[16:34:58] *** Joins: unyu (~pyon@user/pyon)
[16:35:58] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:19] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:48] *** Quits: kofuyu (~kofuyu@user/kofuyu) (Quit: The Lounge - https://thelounge.chat)
[16:38:02] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[16:41:12] <sigint> Here is some minimal code to reproduce the issue: https://bpa.st/H4YQ
[16:42:45] *** Joins: solarjoe4 (~solarjoe4@p57ab27a3.dip0.t-ipconnect.de)
[16:42:53] *** Joins: masoudd (~masoudd@user/masoudd)
[16:43:00] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[16:43:08] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[16:43:27] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[16:43:52] *** Joins: dulanic (~dulanic@47.187.147.69)
[16:44:45] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Client Quit)
[16:45:25] <solarjoe4> I have a class SomeClass which has an assignment like self.Library in its __init__. But when I try to access Library later it is not there. Instead it has been bound to SomeClass._SomeClass__Library. What do I have to google for to learn what happens here? :)
[16:46:28] <Yhg1s> solarjoe4: was it actually self.Library, or was it self.__library?
[16:47:50] *** Joins: SebastianM (~seba@user/sebastianm)
[16:48:01] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[16:51:19] *** Joins: OverflwnRE (~Overflwn@2a02:8070:c3b7:5b00::ea80)
[16:51:23] <solarjoe4> Yhg1s, you are right, it was __library
[16:52:21] *** Joins: patchie (~sdf@136.228.211.49)
[16:52:37] <Yhg1s> solarjoe4: see 'private name mangling' in https://docs.python.org/3/reference/expressions.html#atom-identifiers
[16:53:23] *** Joins: gareppa (~gareppa@user/gareppa)
[16:53:36] <solarjoe4> Yhg1s, ok, thanks a lot
[16:53:51] <patchie> I am trying to run the official python docker container. When i run my code, i get the following error, how can i resolve it? https://bpa.st/33KA
[16:53:56] *** Quits: Overflwn (~Overflwn@185.254.75.30) (Ping timeout: 268 seconds)
[16:54:12] *** Joins: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net)
[16:54:47] <Yhg1s> patchie: it looks like your code is trying to access video or display services that aren't available in this docker container of yours.
[16:55:07] <patchie> yeah, so how do i fix that? should be possible, right?
[16:55:38] *** OverflwnRE is now known as Overflwn
[16:55:39] <Yhg1s> patchie: I don't know what you need, or why you think it should be possible.
[16:56:52] <sigint> patchie, one common technique is to mount /dev from your host to /dev in the container, this way the container has access to all devices your host has
[16:57:12] *** Quits: Andalu30 (~juan.arte@85.137.21.37.dyn.user.ono.com) (Read error: Connection reset by peer)
[16:57:28] <sigint> you may need to make it a privileged container as well
[16:57:42] <patchie> sigint: will this also work if my host os is running Win10?
[16:58:04] <sigint> this I don't know
[17:01:08] <fruitypunk> hmm I don't know either, but the /dev mount trick is not going to fly on win10
[17:01:17] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:02:03] <fruitypunk> I ended up creating a linux virtualbox vm and inside there run my docker deamon
[17:02:13] <patchie> even if i install something like Xming?
[17:02:29] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[17:02:32] <patchie> hehe :P run a vm in a vm...:P bah
[17:02:42] <fruitypunk> mew ^.^
[17:02:49] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:02:57] <fruitypunk> Xming should work
[17:03:03] *** Joins: easior_ (~easior@61.155.142.67)
[17:03:22] <patchie> ok, so how can i do the mount stuff?
[17:03:35] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[17:03:48] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 268 seconds)
[17:03:51] <crippa> k0fein I think I am doing that in my code
[17:04:11] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:04:38] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 272 seconds)
[17:05:52] *** Joins: y04nn (~y04nn@81.17.24.204)
[17:05:58] *** Joins: shad (~shad@user/shad)
[17:06:22] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[17:06:22] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[17:06:45] *** Joins: aklis (~aklis@user/aklis)
[17:06:53] *** Quits: death916_lap (~Death916@user/death916) (Ping timeout: 268 seconds)
[17:07:04] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:07:37] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[17:08:44] <sigint> I'm getting crazy, multiprocessing Queue works with spawn in MacOS but not in Linux! Both run Python 3.9
[17:10:24] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[17:10:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:10:39] <varaindemian> can I make a split either after ('&') OR after ('.txt')? As in .split('&', 'txt')?
[17:10:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:11:58] <k0fein> crippa: sure, just checking, because somtimes the problem is not the code itself but the fact you missed something.
[17:13:15] *** Joins: entuland (~entuland@user/entuland)
[17:13:30] *** Quits: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr) (Ping timeout: 240 seconds)
[17:14:13] <varaindemian> anyone?
[17:14:26] <bjs> varaindemian: re.split
[17:14:37] *** Joins: Julian (~tos9@151.66.53.132)
[17:15:54] <varaindemian> bjs hm?
[17:15:56] *** Joins: magla (~gelignite@55d48585.access.ecotel.net)
[17:16:19] <bjs> varaindemian: it's the answer to your question, yes you can do that split using the re.split function.
[17:16:19] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:16:43] *** jor_ is now known as jor
[17:17:10] <varaindemian> bjs so that can split either after ";" or "?" depending on what it finds? and can I make it stop at the first occurance?
[17:17:49] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[17:17:54] <bjs> varaindemian: https://docs.python.org/3/library/stdtypes.html#str.split  i suggest reading the docs for the function,  then if you still have questions i can answer
[17:18:14] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[17:18:15] <bjs> Oops
[17:18:23] <bjs> varaindemian: https://docs.python.org/3/library/re.html#re.split I mean :
[17:19:03] *** Joins: dulanic (~dulanic@47.187.147.69)
[17:19:11] <rockSTONE> d'oh, no vscode (ie pyright/pylance) type hinting and autocompletion for pydantic models :(
[17:19:57] *** Joins: neibo (~neibo@191.red-83-61-70.dynamicip.rima-tde.net)
[17:20:27] *** Quits: Einstein (~einstein@108.5.219.168) (Ping timeout: 268 seconds)
[17:20:45] *** Quits: dulanic (~dulanic@47.187.147.69) (Client Quit)
[17:21:04] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 268 seconds)
[17:21:24] *** Joins: dulanic (~dulanic@47.187.147.69)
[17:22:00] <varaindemian> bjs can I do something like re.split('1', my_text)[1].split('2', my_text)[0]?
[17:22:20] <bjs> varaindemian: to do wha?
[17:22:30] <sigint> I've found my problem, multiprocessing.Queue uses the global mp context NOT the one passed explicitly like in my example. So on Linux the Queue is by default made to work with fork and on MacOS with spawn.
[17:22:46] <varaindemian> bjs tryying to get only a junk of the text
[17:22:57] <nedbat> varaindemian: can we take a step back? What string do you have, and what string do you want?
[17:23:35] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[17:24:19] *** Joins: easior (~easior@61.155.142.73)
[17:24:33] <varaindemian> nedbat my string may contain '1' OR '2' somewhere in it and then '3' OR '4' -> "sadkjas kjdsakmd 1 damdkasmknn 3 nasdkn"
[17:24:48] <varaindemian> and I want what is between 1 and 3 in my example
[17:24:59] <varaindemian> but it can also be 2 or 4 or any other combination
[17:25:22] <varaindemian> nedbat does that make sense?
[17:25:46] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:3910:5452:9409:1286) (Quit: -a- Connection Timed Out)
[17:25:51] <nedbat> varaindemian: i'm not sure why people change the data from the actual situation, but:  m = re.search(r"[12](.*)[34]", the_string); if m: print(m[1])
[17:25:53] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[17:26:14] <nedbat> varaindemian: except you said ".txt" before, so just replacing 3 with .txt won't work
[17:27:01] <teut> shouldnt it be .*?
[17:27:15] *** Joins: easior_ (~easior@61.155.142.73)
[17:27:16] *** Joins: jw_ (~njw@58.182.164.99)
[17:27:16] <nedbat> teut: could be
[17:28:00] *** Quits: doev (~doev@p549d796e.dip0.t-ipconnect.de) (Quit: Client closed)
[17:28:11] *** Joins: ironm (~devops@2a02:1205:34f8:5120:5604:a6ff:fe8a:d50d)
[17:29:41] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi)
[17:30:23] *** Quits: easior (~easior@61.155.142.73) (Ping timeout: 252 seconds)
[17:30:32] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:30:53] *** Joins: heco (~redrum@user/redrum88)
[17:31:20] <teut> it's always safe to  put the ?  , usually we dont need greedy
[17:31:29] *** Quits: y04nn (~y04nn@81.17.24.204) (Ping timeout: 252 seconds)
[17:32:11] <bjs> teut: "always safe"?  I mean *? and * mean different things,  sometimes you want one and sometimes you want the other
[17:32:34] <teut> i mean usually we require  the non greedy, isnt it?
[17:32:48] <bjs> teut: "usually" is a strong word,  it's hard to know which is best here
[17:33:11] *** Quits: andreas303 (~andreas@gateway/tor-sasl/andreas303) (Quit: andreas303)
[17:33:11] <teut> ok
[17:33:38] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[17:33:39] <patchie> sigint: how do i do the common technique you where talking about? mount /dev to /dev in container
[17:33:57] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[17:33:59] *** Joins: Lint01 (~fddkjf@178.49.152.151)
[17:34:03] *** Parts: Lint01 (~fddkjf@178.49.152.151) ()
[17:34:32] *** Joins: cosmicennui (~cosmicenn@c-73-34-75-186.hsd1.co.comcast.net)
[17:35:06] *** Joins: fkdj (~fkdj@178.49.152.151)
[17:35:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:35:31] <sigint> patchie, '-m /dev:/dev --privileged" but this is not related to Python, so you should probably check #docker
[17:35:43] <fkdj> is there a module for searching sqlite bases with python?
[17:35:48] <teut> is python's IndexError  also segmentation fault?
[17:35:51] <patchie> sigint: good point :P thanks
[17:35:58] <teut> result of*
[17:36:18] *** Joins: ellipsis753 (~shanee@193.138.218.216)
[17:38:12] <bjs> teut: no
[17:38:16] <teut> ok
[17:38:33] <ellipsis753> Hi. Could a networking guru please explain TIME_WAIT to me? I setup a TCP connection from localhost to localhost and then have the client socket.close() the connection. However, when looking at the connection with netstat, it seems to go directly from "established" to no longer being on the list. Why aren't I seeing TIME_WAIT first?
[17:38:39] <bjs> teut: a segfault means the program tried to access memory it wasn't allowed,  if that happens the program will just crash.
[17:39:15] *** Quits: mspe (~user@tilde.team/user/mspe) (Quit: WeeChat 2.8)
[17:39:30] <teut> 3:08  https://www.coursera.org/lecture/troubleshooting-debugging-techniques/accessing-invalid-memory-wf7f1
[17:39:46] <teut> she says too many items on a list
[17:40:18] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Quit: bye)
[17:40:26] <bjs> teut: well she probably doesn't mean Python and IndexError
[17:40:28] <bjs> or she is just wrong
[17:40:40] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[17:40:40] <teut> but she was using python
[17:40:41] *** Joins: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net)
[17:40:48] <teut> lol dumb google guys
[17:40:52] *** Joins: mspe (~user@tilde.team/user/mspe)
[17:40:54] <bjs> teut: if you see an IndexError there is no segfault
[17:40:55] <teut> or gals whatever
[17:41:15] <teut> I dont know, the procedure is you search the cache
[17:41:24] <teut> if you dont find it you look the ram
[17:41:25] <Yhg1s> ellipsis753: as far as I know you should be seeing them.
[17:41:26] <bjs> teut: what don't you know?
[17:41:38] <bjs> teut: no, if Python throws an IndexError at you I can say with 100% confidence there was no segfault before then :)
[17:42:34] <bjs> teut: when you go `some_list[505]` Python will check *if* 505 is in range, and if not it will raise an IndexError. It never actually tried to access the memory there.
[17:42:40] *** Quits: Celelibi (celelibi@user/celelibi) (Read error: Connection reset by peer)
[17:42:42] *** Joins: easior__ (~easior@61.155.142.67)
[17:42:56] <wallace_mu200> is it good habbit to do lazily instantiate instance variable from other class inside current __init__ method? i.e.  set self.instance_variable in __init__ to None, then instantiate it in the called method
[17:43:08] <teut> well , their is nothing such as indexing if we talk about c
[17:43:11] <teut> there*
[17:43:27] <bjs> wallace_mu200: it's fairly common,  whether it's "good habit" depends very much on the exact circumstances.
[17:43:35] <bjs> teut: I'm not sure what you mean, an IndexError is a Python thing, not a C thing
[17:44:30] <wallace_mu200> bjs:  i see, i usually instantiate directly inside __init__ if i found the constructor from other class that I want to instantiate is not that heavy
[17:44:38] <teut> but a list is   an Array of pointers in c
[17:44:49] <teut> well , their is nothing such as indexing if we talk about c   <    delete plz
[17:44:51] <wallace_mu200> bjs: it will save me some effort to check if it's None when I need to call it anywhere else
[17:45:05] <wallace_mu200> inside the class of course
[17:45:10] <bjs> teut: yes, one way to implement a Python list is to store a C array underneath yes
[17:45:30] <teut> so you just try if you get indexerror there , then you get indexerror here
[17:45:38] <bjs> teut: ?
[17:45:53] <bjs> teut: IndexError's don't exist in C, that's the name of a Python thing
[17:45:58] *** Joins: mesaboogie (~mesaboogi@user/mesaboogie)
[17:46:21] *** Quits: easior_ (~easior@61.155.142.73) (Ping timeout: 268 seconds)
[17:46:30] <bjs> wallace_mu200: yes, it's more common to just put things in __init__.  But why "heavy" ?
[17:46:40] *** Joins: pnoud (~pnoud@user/pnoud)
[17:46:47] <bjs> wallace_mu200: usually __init__ is just assigning some variables, it's uncommon to do any real "work" there.
[17:47:07] *** Quits: cosmicennui (~cosmicenn@c-73-34-75-186.hsd1.co.comcast.net) (Quit: WeeChat 2.8)
[17:47:22] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[17:47:26] *** Joins: node1 (~node1@user/node1)
[17:47:35] <wallace_mu200> yeah, i know, sometime the constructor is doing some for loop thing ( not from our own code, maybe from other team's code), it's not needed when instantiated it but only needed when actually need to call a cetain method
[17:47:42] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[17:47:46] *** Joins: d3sync (~d3sync@46.246.128.223.dsl.dyn.forthnet.gr)
[17:47:51] <teut> ** stack smashing detected ***: terminated
[17:47:57] <teut> ok I got this
[17:48:01] *** Joins: cosmicennui (~cosmicenn@c-73-34-75-186.hsd1.co.comcast.net)
[17:48:07] <bjs> teut: you "got this" ?
[17:48:12] *** Quits: ellipsis753 (~shanee@193.138.218.216) (Ping timeout: 268 seconds)
[17:48:15] <bjs> teut: what are you doing?
[17:48:17] <teut> Uploaded file: https://uploads.kiwiirc.com/files/945a530a27667c0cbe3375031a06abbf/pasted.txt
[17:48:35] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[17:48:42] <bjs> teut: you are not allowed to access elements out of range of the array in C,  yes.
[17:48:43] *** Joins: zebrag (~chris@user/zebrag)
[17:48:55] <bjs> Python let's you _try_, but it has a check. That's why you see IndexError in Python
[17:48:55] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[17:48:58] <masterkorp> Hello, do you guys now any good e-commerce cms written in Python ?
[17:49:18] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:49:18] <teut> yes, I know you store the length along with the PyObject
[17:49:21] *** Joins: Celelibi (celelibi@user/celelibi)
[17:49:32] *** Joins: rsx (~dummy@ppp-188-174-130-150.dynamic.mnet-online.de)
[17:49:53] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:50:58] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Client Quit)
[17:51:04] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:51:17] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[17:51:19] <teut> I got same thing in c++ too, I have forgotten all c , c++
[17:51:20] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[17:51:25] *** Joins: Naan (~Naan@user/naan)
[17:51:34] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[17:51:48] *** Joins: cliluw (~cliluw@47.147.80.149)
[17:51:49] *** Joins: cheater (~Username@user/cheater)
[17:51:54] *** Joins: dulanic (~dulanic@47.187.147.69)
[17:51:54] *** Quits: dulanic (~dulanic@47.187.147.69) (Client Quit)
[17:51:54] <teut> masterkorp  I think django-cms is there
[17:52:12] *** Joins: dulanic (~dulanic@47.187.147.69)
[17:52:30] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[17:52:30] *** Quits: mesaboogie (~mesaboogi@user/mesaboogie) (Ping timeout: 264 seconds)
[17:52:50] *** km_ is now known as km
[17:52:50] <bjs> teut: okay but,  so in Python when you go `x = [1,2,3]` you're _allowed_ to say `x[72]`. Python will check the length, and if it's out-of-bounds it'll create an IndexError object instead and hand it to you.  At no point will Python actually try and read memory it's not allowed to, so there'll be no segfault
[17:53:16] <bjs> teut: indeed if CPython is written correctly (*and you're not doing anything weird with extensions/ctypes) then you shouldn't ever be able to get a Python program to segfault.
[17:53:29] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[17:53:30] *** Quits: cydork (~vihang@user/cydork) (Ping timeout: 240 seconds)
[17:53:32] <masterkorp> teut do you think it has a module for e-commerce ?
[17:53:32] *** Joins: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net)
[17:54:02] <bjs> teut: C works differently, in C if you have an array you're just *not allowed* to try read out-of-bounds.  There's no check to see if you are, you just aren't allowed.  If you *do*, then your program _might_ read memory it's not allowed (and segfault), or it might not.
[17:54:09] <teut> understood bjs
[17:54:21] <teut> masterkorp  , can you check it?
[17:54:27] <teut> there were few others too
[17:54:34] <teut> I forgot there names
[17:54:39] <teut> their *
[17:54:46] <masterkorp> Yeah I am checking it, just asking if anyone has any personal experience with it
[17:54:48] *** Quits: salpynx (~salpynx@121.73.84.248) (Quit: Connection closed)
[17:54:52] <masterkorp> Another that comes to mind its Plone
[17:55:08] <masterkorp> But I only used that a long time ago
[17:55:21] *** Quits: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net) (Quit: Client closed)
[17:55:22] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[17:55:50] <teut> well bjs, but I thought that static checking would prevent me from running the code
[17:55:54] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[17:56:10] <teut> and that raises the exceptions in c /c++
[17:56:16] <bjs> teut: in C? no you cannot statically check that kind of thing.  You just aren't allowed to do it in your program.
[17:56:34] <tims> teut: Your C code will always crash, you are declaring an array of 10 items but your loop is trying to index 11 items.
[17:56:39] <teut> is c and c++ different in these error handing terms?
[17:56:46] <teut> are*
[17:56:56] <bjs> teut: C doesn't have exceptions. If you have an array, you can access values in the array and get them back.  There are no bounds checking, you're just not even allowed to try access elements out-of-bounds
[17:57:00] <bjs> teut: C and C++ are very diffferent languages.
[17:57:30] <tims> bjs: You are allowed to, that's literally the problem!
[17:57:43] <teut> I just know only one difference , printf, scanf  vs   cout , cin '=D
[17:58:08] <bjs> teut: in C when you say `int arr[10]` or whatever, you're saying "Please give me an array with 10 slots, and I promise to not try access any elements outside of those 10 slots, and I understand you will not check for me".  If you *do* try,  C won't check and your program can do anything.  This is terrible and is why Python has exceptions :)
[17:58:10] *** tims is now known as timsavage
[17:58:34] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 244 seconds)
[17:58:39] <teut> yes tims is right bjs, I remember you need to check   for \0  in strings
[17:58:48] *** Joins: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net)
[17:58:55] *** Joins: sixrobin (~jrobin@189.146.237.171)
[17:59:11] *** Joins: cheater (~Username@user/cheater)
[17:59:11] <NoImNotNineVolt> it's not clear why it's terrible.
[17:59:16] *** Parts: ironm (~devops@2a02:1205:34f8:5120:5604:a6ff:fe8a:d50d) (Leaving)
[17:59:21] <timsavage> teut: Don't fall into that trap, not _all_ strings end with a \0
[17:59:34] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[17:59:35] <NoImNotNineVolt> what if you don't access any elements outside of those 10 slots, and you don't want to deal with performance penalties of bounds checking?
[17:59:41] *** Joins: jw_ (~njw@58.182.164.99)
[17:59:42] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Read error: Connection reset by peer)
[17:59:47] <bjs> NoImNotNineVolt: well UB is just not a nice interface for a programmer, but yes it exists to allow optimizations like that
[18:00:26] <NoImNotNineVolt> different strokes for different folks :P
[18:00:39] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:01:13] *** Joins: c10l (~c10l@89.34.167.207)
[18:01:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:01:26] <teut> ok , I will check more on that timsavage
[18:01:49] <timsavage> Many bugs (and major security screwups) have been caused by assuming strings end with a \0.
[18:02:24] <teut> can you link some resource for examples?
[18:02:27] <bjs> and very many are caused by various use-after-free and index-out-of-bounds errors, and they should be impossible in Python :)
[18:02:34] <timsavage> Or better if you want performance and safety, try Rust
[18:02:41] <bjs> if you program in C,  you have to be very careful
[18:03:00] <[O-O]> i hear c is dangerous
[18:03:00] <NoImNotNineVolt> it's generally a good idea to be very careful when you program in any language.
[18:03:04] <Yhg1s> NoImNotNineVolt: it's terrible because in practice, everyone gets it wrong every now and then.
[18:03:11] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[18:03:13] <[O-O]> so im scared of using it
[18:03:15] <bjs> everyone gets it wrong all of the time :P
[18:03:29] <NoImNotNineVolt> time to abandon cpython i guess
[18:03:30] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[18:03:49] <NoImNotNineVolt> and whatever os you use, etc
[18:03:57] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[18:04:28] <bjs> nobody is using C because they love the design of UB
[18:04:38] <teut> UB?
[18:04:44] <supakeen> Undefined behaviour.
[18:04:45] <bjs> people "put up with it" because of the trade-offs
[18:04:51] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 268 seconds)
[18:04:52] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[18:05:00] *** Joins: pete443 (~pete@user/pete443)
[18:05:07] <supakeen> Some language specifications say 'if you do this what happens is left up to the computer/compiler/implementation/etc"
[18:05:16] *** sixrobin is now known as jlang
[18:05:17] <supakeen> For example overflowing a signed integer.
[18:05:17] <bjs> well the gcc devs might like UB, it makes their job easier :)
[18:05:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[18:05:35] *** Quits: aklis (~aklis@user/aklis) (Ping timeout: 268 seconds)
[18:05:44] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[18:05:44] <teut> you mean there is some exception that c will raise?
[18:05:50] <NoImNotNineVolt> ha
[18:05:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[18:05:52] <teut> called Undefined Behaviour
[18:05:55] <bjs> teut: no, there are no exceptions in C.
[18:06:03] <teut> yes
[18:06:21] <bjs> teut: no,  there are things in C you are just not allowed to do (like accessing memory you're not allowed). But C doesn't check and tell you if you do.
[18:06:31] <bjs> If you do, anything can happen because you promised you wouldn't.
[18:06:54] <NoImNotNineVolt> so, this isn't unique to software development.
[18:06:57] <teut> can I corrupt my windows by that?
[18:07:05] <bjs> CPython is very carefully written to never do any of these things,  so it should never access bad memory, and that's why CPython doesn't ever segfault
[18:07:15] <teut> that will be pretty dangerous if I did that
[18:07:15] <bjs> teut: if you are the one writing windows then yes
[18:07:17] <NoImNotNineVolt> if you're building a bridge, and you build it wrong, the bridge doesn't tell you that, and you're not physically prevented from building it wrong. the bridge just collapses.
[18:07:21] *** Quits: patchie (~sdf@136.228.211.49) (Ping timeout: 244 seconds)
[18:07:30] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5d6a97-202.dhcp.inet.fi)
[18:07:31] <bjs> teut: but presumably you don't have the Windows code to mess with to cause it to do something bad :)
[18:07:33] <NoImNotNineVolt> and yet people build bridges. by being careful. and it's fine.
[18:07:46] <teut> thats propitiatory
[18:07:47] <NoImNotNineVolt> in other engineering disciplines, that's how it is. you engineer things. carefully.
[18:07:48] *** Quits: jlang (~jrobin@189.146.237.171) (Changing host)
[18:07:48] *** Joins: jlang (~jrobin@user/jlang)
[18:07:50] <supakeen> NoImNotNineVolt, bridge building goes wrong regularly as well even when we initially though we did everything right.
[18:07:53] <NoImNotNineVolt> but in software engineering, lol.
[18:07:57] <timsavage> bjs: Maybe change not allowed, for not advised to. In C it's perfectly valid to access any memory
[18:08:00] <bjs> NoImNotNineVolt: no but we don't build bridges using the same outdated dangerous technology of 100 years ago :)
[18:08:01] <NoImNotNineVolt> supakeen: galloping gertie!
[18:08:06] <supakeen> Which makes the analogy maybe even better :)
[18:08:13] <grym> bjs: no, there's just Tom who refuses to work with wood, and ...
[18:08:15] <grym> (where's that rant)
[18:08:27] <grym> ah, https://www.stilldrinking.org/programming-sucks
[18:08:32] <NoImNotNineVolt> bjs: advancements in bridge-building technology have not come in the form of materials that tell you when you're using them wrong, or materials that prevent you from using them wrong.
[18:08:41] <bjs> timsavage: no you cannot e.g. just forge points and use them in C.
[18:08:42] <teut> if I can write bytes anywhere with c , then why cant I just corrupt my running edition of wnindows?
[18:08:43] *** Quits: Deepfriedice (~Deepfried@60-241-43-208.static.tpgi.com.au) (Quit: Leaving)
[18:08:45] *** Quits: jlang (~jrobin@user/jlang) (Quit: WeeChat 3.1)
[18:08:59] <teut> it looks possible if I see from high level
[18:09:01] *** Quits: magla (~gelignite@55d48585.access.ecotel.net) (Quit: Stay safe!)
[18:09:01] <supakeen> teut, because the kernel would need a bug as well to let you write somewhere that could break your system.
[18:09:17] <timsavage> bjs: You are confusing C with the OS. If I'm on a microcontroller I can point at any memory address I want
[18:09:22] <bjs> NoImNotNineVolt: I mean absolutely they have?  modern construction is full of safety checks and harnesses and equipment to monitor and protect the structure
[18:09:34] *** Joins: shad (~shad@user/shad)
[18:09:36] <NoImNotNineVolt> ultimately, the root of the problem is that developers are terrible. two competing solutions: nerf languages to protect developers from themselves, or, raise the bar for developers.
[18:09:41] <bjs> timsavage: I am not confusing C with the OS, you are
[18:09:50] *** Quits: jw_ (~njw@58.182.164.99) (Read error: Connection reset by peer)
[18:09:57] <supakeen> I think we have a few decades of C under our belt and it hasn't really proven that 'good developers' do it any better.
[18:09:59] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi)
[18:10:04] <supakeen> And I say this as a full time C developer so eh.
[18:10:13] <bjs> C is very clear about its object model and where memory comes from and when you're allowed to access them
[18:10:17] <NoImNotNineVolt> bjs: and DO178 software development is also full of safety checks and etc etc.
[18:10:19] <supakeen> We're still always walking on a knife edge or constantly building our own safety mechanisms.
[18:10:40] <bjs> NoImNotNineVolt: indeed it is,  and lots of qualification
[18:10:59] <supakeen> Even things with huge safety procedures go wrong (see: rocketry and medical equipment).
[18:11:10] <teut> " would need a bug as well "?
[18:11:11] <NoImNotNineVolt> that's my point. there's a way to "solve" the problem at least two ways. having the language hold your hand isn't the only way.
[18:11:29] <NoImNotNineVolt> supakeen: it's not like the universe of python code is without issue.
[18:11:39] <supakeen> It's not but it's a different class of issue all together.
[18:11:46] <timsavage> bjs: I can assign a void* any memory address I want an access it, C won't prevent me at all
[18:11:51] <NoImNotNineVolt> "developers are terrible" is a pretty broad class :P
[18:11:55] <bjs> timsavage: that is 100% UB
[18:12:06] <teut> I mean , like if in the c code that I posted, if that 11th memory location was the windows software
[18:12:13] <supakeen> It usually does not mean your 16-bit unsigned is suddenly interpreted as a 32-bit signed value that throws your steering 180 degrees the other way.
[18:12:27] <teut> mabye overwriting could change the color of the taskbar
[18:12:31] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5d6a97-202.dhcp.inet.fi) (Ping timeout: 244 seconds)
[18:12:35] <teut> some effect i want to see
[18:12:42] <teut> observable*
[18:12:51] <NoImNotNineVolt> teut: blame protected mode
[18:13:05] *** Joins: ska (~ska@cpe-173-174-111-177.austin.res.rr.com)
[18:13:08] *** Joins: DammitJim (~DammitJim@224.sub-72-107-71.myvzw.com)
[18:13:10] <teut> whats that?
[18:13:30] *** Quits: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net) (Ping timeout: 240 seconds)
[18:13:33] <teut> ok its googleable
[18:13:39] <bjs> NoImNotNineVolt: ideally we'd discard UB and have static checks that catch everything.
[18:13:41] <supakeen> And in the meantime we already have so, so many circumventions, protections, and stopgaps for these sorts of bugs that you can definitely not reason about what happens when you do have an oob.
[18:13:44] <DammitJim> hi! I need to create dynamic forms... anything you guys suggest for a project like this?
[18:13:46] <bjs> We're not there yet,  but UB is terrible for safety
[18:14:02] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[18:14:05] <NoImNotNineVolt> bjs: developers can implement any checks they desire in c, no? :P
[18:14:23] <NoImNotNineVolt> but static checks aren't always sufficient.
[18:14:24] <bjs> NoImNotNineVolt: no
[18:14:27] <timsavage> teut: You can't access memory outside the range that your program has been assigned by the OS (unless you are on a microcontroller in which case, the 11th item will be whatever happens to be in that memory location)
[18:14:40] <supakeen> NoImNotNineVolt, how do you check if your integer got promoted to a different type and do you? :)
[18:14:43] <teut> ok so the os protects the windows os
[18:14:46] *** Quits: pete443 (~pete@user/pete443) (Quit: ZNC 1.8.2 - https://znc.in)
[18:14:55] <bjs> NoImNotNineVolt: sufficiently good static checks are sufficient :)
[18:15:08] <NoImNotNineVolt> timsavage: x86 can operate without entering protected mode too, but in practice this doesn't happen :P
[18:15:10] <teut> but can I by mistake then crash my firefox while running some c code?
[18:15:11] <bjs> NoImNotNineVolt: and there are always fun examples where the compiler throws away checks reasoning that they're unncessary :P
[18:15:18] <timsavage> NoImNotNineVolt: Yes
[18:15:18] *** Joins: jlang_ (~jrobin@user/jlang)
[18:15:22] *** jlang_ is now known as jlang
[18:15:36] <bjs> I for one am quite happy that for 99.9999% of programs that exist, something like Python is perfectly adequate and not having UB is a good thing.
[18:16:09] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[18:16:24] <supakeen> teut, if the kernel does a good job then you can't write to the address space of another userland program from the other.
[18:16:26] *** Joins: node1 (~node1@user/node1)
[18:16:32] *** Joins: pete443 (~pete443@user/pete443)
[18:16:36] <supakeen> Exceptions apply but they'd be things you do on purpose before running the process.
[18:16:52] <supakeen> An overflow will generally not lead to code execution in another space.
[18:17:08] <supakeen> Though it might be misappropriated and lead to execution in kernel space and from there all bets are off.
[18:17:09] <teut> windows 10 is good I believe so that overwriting must be an issie of the past
[18:17:11] *** Joins: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net)
[18:17:20] <teut> , so that*
[18:17:31] <timsavage> teut: If you want to know how that works look up Gary Explains videos on Context Switching and writing a small Multitasking OS
[18:17:33] <supakeen> teut, this is why there's of course never any critical code execution bugs on Windows.
[18:17:45] <teut> have seen that already timsavage
[18:17:53] <supakeen> (that's a huge pinch of sarcasm)
[18:18:18] *** Quits: KevinX (~KevinX@37.120.157.198) (Ping timeout: 240 seconds)
[18:18:46] <bjs> timsavage: tbh `length_10_array[11]` in C is very unlikely to try actually access index #11 at runtime. What's far more likely to happen is that the compiler will just see that, and throw away that branch entirely and then simplify from there
[18:18:51] <teut> there are bugs but windows shows alerts to hide them
[18:18:57] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[18:18:59] <bjs> and so you get much more bizarre behaviour than you though
[18:19:39] <supakeen> You get a volatile and you get a volatile.
[18:19:54] <bjs> :D
[18:21:08] <timsavage> bjs: Would depend on the compiler, some might pickup the for loop range being out, but from experience that would likely just segfault.
[18:21:14] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[18:21:19] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[18:21:38] <supakeen> It depends on the compiler, its settings, the settings of the operating system, and the underlying hardware or maybe all at once.
[18:21:46] <timsavage> yep
[18:21:47] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:c47b:ba3d:d2be:1da8)
[18:21:53] <supakeen> Perhaps demon will fly out of your nose :)
[18:22:02] <teut>  its so much difficult to setup c and more tough to setup assembly dev env
[18:22:07] *** Joins: ice9 (~ice9@user/ice9)
[18:22:08] <supakeen> (the compiler is allowed to do that too)
[18:22:11] <teut> there are so many choices
[18:22:44] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Ping timeout: 268 seconds)
[18:22:50] <supakeen> Yes, the more abstractions you strip away the more different ways there are to do things.
[18:22:55] *** Joins: SebastianM (~seba@user/sebastianm)
[18:22:55] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:23:00] <fkdj> is there a module for searching sqlite bases with python?
[18:23:26] <teut> fkdj pysqlchemy i guess
[18:23:51] <supakeen> fkdj, sqlite is built into (most) Python installations, or do you want to do something else than just query it?
[18:24:16] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[18:24:24] <teut> thanks for the info
[18:24:47] <fkdj> i want something that takes a query string and does the necessary queries
[18:25:04] *** Quits: cosmicennui (~cosmicenn@c-73-34-75-186.hsd1.co.comcast.net) (Quit: WeeChat 2.8)
[18:25:34] <supakeen> Well, that sounds like you 'just' want the built-in sqlite module you can perform queries with that.
[18:26:07] *** Quits: easior__ (~easior@61.155.142.67) (Read error: Connection timed out)
[18:26:08] <Adoi> hello again :) how can I do string formatting such that the replacement fields are assigned variable values instead of constant ones? for ex. in the first example here; https://www.pastebin.cz/raw/5hhPKSH,  I would like that "%d hours" will receive the values that are output by a for loop.
[18:26:30] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[18:26:42] <timsavage> fkdj: the module is `sqlite3` btw, docs are on python.org
[18:26:53] <Adoi> would it be possible, like in the second example, to define this variable field within formatting=
[18:26:55] <Adoi> ?
[18:27:07] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[18:27:16] <bjs> Adoi: with %-formatting?  no.  why not just use {} formatting everywhere
[18:27:47] *** Joins: jrjsmrtn (~jrjsmrtn@2a02:a03f:c0b5:0:85e9:f356:f744:704c)
[18:27:47] <bjs> Adoi: oh wait, maybe i misunderstood
[18:28:01] <bjs> Adoi: what do you mean "recieve the vlaues output by a for loop"?  I thought that's what your second example was doing
[18:28:01] <supakeen> I don't quite get what you mean by the loop, you'd put the `print(...)` in the loop.
[18:28:52] *** Quits: jrjsmrtn (~jrjsmrtn@2a02:a03f:c0b5:0:85e9:f356:f744:704c) (Client Quit)
[18:30:20] *** Quits: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a) (Quit: Leaving)
[18:31:47] <Adoi> bjs, I tried to replicate it in my problem, but didnt work with the alignment field '{:>w}" when I changed it into '{:>#{type}}'.format(...type='w')'
[18:31:59] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 268 seconds)
[18:32:15] *** Joins: Julian (~tos9@151.66.53.132)
[18:32:25] <Adoi> w gets variable values from the for loop
[18:32:31] *** Joins: _jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[18:32:48] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[18:32:53] <bjs> Adoi: why is 'w' in a string?
[18:33:02] <alguien> Hey, isn't this superfluous due to the line before? https://github.com/slackapi/python-slack-sdk/blob/main/slack_sdk/web/slack_response.py#L143-L144
[18:33:11] <bjs> Adoi: "{:>w}" isn't a valid format string
[18:33:12] *** Quits: kixx (~kixx@user/kixx) (Read error: Connection reset by peer)
[18:33:26] <Adoi> oh no, it was mistyped here, it is just 'type = w'
[18:33:28] <alguien> *due to the default {} passed to get
[18:33:29] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[18:33:41] <Adoi> bjs, oh no, it was mistyped here, it is just 'type = w'
[18:33:45] *** Joins: kixx (~kixx@user/kixx)
[18:33:53] <bjs> Adoi: okay well now i'm just confused,  can you show the actual loop/format/print code and what it does
[18:34:06] *** Joins: aklis (~aklis@user/aklis)
[18:34:08] <Adoi> ok
[18:34:09] *** Quits: Henry151 (~bishop@user/henry151) (Quit: leaving)
[18:34:34] *** Quits: d3vyL (~d3vyL@host-87-6-168-26.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[18:34:37] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:36:05] *** Quits: bjelleklang (~c@user/chha) (Ping timeout: 272 seconds)
[18:36:36] *** Joins: armandokeller (~armandoke@200.159.170.169)
[18:36:43] *** Quits: bbock (~bbock@p200300c98f178500d94696639bdd95bb.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[18:36:51] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:37:54] *** Joins: obiwahn (~heini@obiwahn.org)
[18:38:06] *** Quits: timsavage (~tims@193-119-75-93.tpgi.com.au) (Quit: WeeChat 2.8)
[18:38:40] *** Quits: zeenk (~zeenk@188.26.30.39) (Quit: Konversation terminated!)
[18:38:52] <obiwahn> Hi, how do I best publish tests along with a package or as extra package? Could you provide me with an example?
[18:39:47] *** Joins: Henry151 (~bishop@user/henry151)
[18:39:49] *** Joins: timsavage (~tims@193-119-75-93.tpgi.com.au)
[18:39:53] *** sgn- is now known as sgn
[18:40:33] <Adoi> bjs, this is it; https://www.pastebin.cz/raw/yvS9TpY
[18:40:36] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[18:41:07] <Adoi> I need to assign "w" in place of the numbers in this line; '        line_new = '{:>2} {:>2} {:>2} {:>5}'.format(line[0], oct2[1], hex2[1], bin2[1])   '
[18:41:41] <grym> (does infobob know about non-.com pastesbin?)
[18:41:47] *** Joins: Henry151 (~bishop@user/henry151)
[18:41:54] <bjs> Adoi: so {:>{w}}  in the format, then w=digits(...) in the format() call
[18:42:28] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[18:42:54] *** Joins: Pickchea (~private@user/pickchea)
[18:43:48] <DammitJim> Do you guys have any suggestions on what framework I can use to develop dynamic forms?
[18:44:21] <obiwahn> vue
[18:44:24] *** Quits: CombatVet (~c4@user/combatvet) (Quit: suck it)
[18:44:34] * DammitJim looks up vue
[18:45:00] *** Joins: CombatVet (~c4@user/combatvet)
[18:45:04] <Adoi> bjs, it reurns "ValueError: Unknown format code 'w' for object of type 'str'
[18:45:12] <Adoi> returns*
[18:47:33] *** Joins: heco_ (~redrum@user/redrum88)
[18:48:08] *** Quits: alguien (~alguien@user/alguien) (Remote host closed the connection)
[18:48:29] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[18:48:32] *** Joins: alguien (~alguien@user/alguien)
[18:49:02] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0b0-228.dhcp.inet.fi) (Quit: Leaving)
[18:50:33] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[18:51:04] *** Quits: justyb11 (~justyb@2601:483:500:3ea:f6be:3dd8:f1b2:573a) (Quit: Leaving)
[18:51:14] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 252 seconds)
[18:52:07] *** Joins: superboot (agentgasma@user/superboot)
[18:52:49] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 244 seconds)
[18:53:34] *** Quits: heco_ (~redrum@user/redrum88) (Ping timeout: 268 seconds)
[18:53:46] <bjs> Adoi: it sounds like things are in strings
[18:53:59] <bjs> Adoi: can you show the actual code you're doing with the error?
[18:54:15] *** Joins: heco (~redrum@user/redrum88)
[18:54:18] <DammitJim> obiwahn, what does vue add to the forms?
[18:54:18] *** Joins: st4nd (~st4nd@user/st4nd)
[18:54:21] *** Joins: haul0 (~chase@2600:1700:b6a0:8f7f:3003:9ceb:a9f5:2f6d)
[18:55:24] *** Quits: haul0 (~chase@2600:1700:b6a0:8f7f:3003:9ceb:a9f5:2f6d) (Client Quit)
[18:55:27] *** Joins: doev (~doev@p549d796e.dip0.t-ipconnect.de)
[18:56:16] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[18:56:57] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[18:58:10] <Adoi> bjs, here it is; https://www.pastebin.cz/raw/NPMHnmK     I obviously couldnt figure how to apply string formatting in this case, so it is just one of my multiple trials...
[18:59:01] <obiwahn> Sorry for teasing you. When thinking about form I thought you are talking about forms in a browser. Obviously javascript came to my mind:)
[18:59:24] <bjs> Adoi: {w} not w
[18:59:31] <obiwahn> DammitJim: What kind of form do you want to create?
[18:59:53] <nedbat> obiwahn: a question for you is: why do you want to publish tests?
[19:00:47] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:00:55] *** Quits: solarjoe4 (~solarjoe4@p57ab27a3.dip0.t-ipconnect.de) (Quit: Leaving)
[19:01:45] <nedbat> obiwahn: for example, my philosophy is that tests are for developers of the project, and they use git clone to get everything
[19:01:51] <obiwahn> nedbat: we have a rest-proxy client lib. It was tested in a separate docker container. Now somebody decided that the published app should be pulled into a different container to be tested there.
[19:02:18] <Adoi> bjs, you mean {:>{w}} instead of {:>w} ?
[19:02:23] <bjs> Adoi: yep
[19:02:35] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:02:55] <obiwahn> It is not my idea and why would I publish before testing... But it is too warm to fight about that.
[19:02:58] <tumbleweed> in Debian as a downstream of many python libraries, it's nice to get tests with the library, so we can run them at build time, and whenever any of their dependencies change. So I've often asked projects to include tests in their source distribution
[19:03:13] <tumbleweed> but these days, it's usually easier to just grab the source from github, when you want the tests
[19:03:25] <obiwahn> and it costs me karma points that i need to spend on important things.
[19:04:10] <nedbat> obiwahn: you could just include the tests as another package in your distribution, or make it an "extra"
[19:04:27] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Client Quit)
[19:04:29] *** Joins: alguien (~alguien@user/alguien)
[19:04:47] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 268 seconds)
[19:05:06] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (Ping timeout: 264 seconds)
[19:05:25] <Adoi> bjs, this time the other error appears; https://www.pastebin.cz/raw/FeShdcF
[19:05:50] <grym> tumbleweed: yeah, "clone me if you want to test me" is pretty normal
[19:05:59] <bjs> Adoi: you mean w=w not type=w
[19:06:07] <nedbat> tumbleweed: because of guidance from debian packagers, the coverage.py source dist includes every file you would get if you cloned from git.
[19:06:25] <nedbat> tumbleweed: but the tests are not installed
[19:06:43] <obiwahn> Do you maybe have an example, I have not much clue about setuptools and it costs so much time to compare understand what is well made. I would just trust you on that as I try to point people to reasonable CMake if they have a question.
[19:06:58] <tumbleweed> nedbat: yeah, that was what I'd ask for
[19:07:58] *** Joins: Einstei__ (~einstein@108.5.219.168)
[19:09:43] <Adoi> bjs, this time it works without error, the output is there, but just not aligned as it has to be :) apparently I need to review what I have done :)
[19:10:11] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:10:19] <Adoi> thank you very much, bjs
[19:10:23] *** Joins: furrykef (~furrykef@ip68-229-199-254.ok.ok.cox.net)
[19:10:37] <nedbat> obiwahn: i'm sorry, i'm having a hard time finding info about extras, perhaps it doesn't work the way I thought?
[19:10:39] <bjs> Adoi: in the example you showed it looked like every number had the same width
[19:10:41] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[19:10:42] <bjs> Adoi: as a hint
[19:10:45] *** timsavage is now known as tims
[19:11:09] *** Joins: jrjsmrtn (~jrjsmrtn@2a02:a03f:c0b5:0:85e9:f356:f744:704c)
[19:11:15] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:11:40] *** Parts: furrykef (~furrykef@ip68-229-199-254.ok.ok.cox.net) (Leaving)
[19:11:52] <Adoi> bjs, oh i see where I went wrong :)
[19:12:08] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[19:12:11] <nedbat> obiwahn: you can just add your tests as an installed package so they are always installed, if that is what people want
[19:12:17] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[19:12:22] *** Quits: jrjsmrtn (~jrjsmrtn@2a02:a03f:c0b5:0:85e9:f356:f744:704c) (Client Quit)
[19:12:44] <nedbat> obiwahn: btw, you can build the distribution and test it in a new environment before you publish the distribution
[19:13:47] *** Joins: timkofu (~timkofu@user/timkofu)
[19:14:10] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[19:14:11] *** Joins: browniebroke (uid501792@id-501792.tinside.irccloud.com)
[19:16:32] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[19:16:50] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (Remote host closed the connection)
[19:17:09] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[19:17:37] *** Quits: jlang (~jrobin@user/jlang) (Quit: WeeChat 3.1)
[19:17:56] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[19:18:20] *** Quits: hackerman (~hackerman@cpe-174-109-34-83.nc.res.rr.com) (Quit: The Lounge - https://thelounge.chat)
[19:18:24] *** Joins: jlang_ (~jlang@user/jlang)
[19:18:24] *** jlang_ is now known as jlang
[19:18:44] *** Joins: Sadale (~Sadale@user/sadale)
[19:20:20] *** Joins: y04nn (~y04nn@81.17.24.204)
[19:20:45] *** Joins: Blankspace (~abcd@user/blankspace)
[19:21:10] *** Joins: ExeciN (~ExeciN@user/nicexe)
[19:21:23] *** Quits: Henry151 (~bishop@user/henry151) (Quit: leaving)
[19:22:19] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 252 seconds)
[19:22:50] *** Joins: Henry151 (~bishop@user/henry151)
[19:23:13] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[19:23:19] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:23:23] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:23:32] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:23:56] <obiwahn> Ah I'll find out:) Now I have committed more too it than I ever wanted. A new guy was given the task to move the test - which is probably wrong :) I just need to talk with the other and ensure that the tests stays where they are, when we want the release the package. It should bet tested against a stable version of the proxy. And we must be able to use the same tests in a different context, when we
[19:23:58] <obiwahn> want to release a new version of the proxy :-) The new guy and I are a bit confused because at least 3 docker containers and even more repos are involved. Now I guess I am aware of the intention of the person who set the task. Thanks for your advice!
[19:24:57] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Client Quit)
[19:25:48] *** Joins: Henry151 (~bishop@user/henry151)
[19:27:06] *** Quits: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[19:28:59] *** Quits: tims (~tims@193-119-75-93.tpgi.com.au) (Ping timeout: 244 seconds)
[19:28:59] *** Quits: superboot (agentgasma@user/superboot) (Remote host closed the connection)
[19:29:06] *** Quits: st4nd (~st4nd@user/st4nd) (Ping timeout: 264 seconds)
[19:29:08] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:29:21] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[19:29:32] *** Joins: Henry151 (~bishop@user/henry151)
[19:29:44] *** Joins: easior__ (~easior@61.155.142.70)
[19:29:51] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:30:40] *** Joins: yannick_ (~yannick@user/rhax)
[19:30:52] *** Quits: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[19:31:03] *** Quits: yannick_ (~yannick@user/rhax) (Client Quit)
[19:31:06] *** Quits: Laibsch (~leggewie@2a01:c22:bc28:eb00:f2de:f1ff:fed0:6548) (Ping timeout: 240 seconds)
[19:31:07] *** Joins: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net)
[19:31:44] *** Joins: rhax (~yannick@user/rhax)
[19:32:17] *** Joins: ntdll_ (~ntdll@user/ntdll)
[19:32:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:33:24] *** Joins: Henry151 (~bishop@user/henry151)
[19:33:52] *** Joins: superboot (~agentgasm@user/superboot)
[19:35:41] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: why did you ban me)
[19:35:47] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 252 seconds)
[19:37:17] *** Joins: maroloccio (~marolocci@200.243.99.194)
[19:38:18] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:38:57] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[19:39:54] *** Quits: jazzy (~jaziz@2600:380:4547:d128:8473:ff3e:752d:860f) (Ping timeout: 264 seconds)
[19:40:00] *** Joins: egon (~egon@user/egon)
[19:40:11] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Client closed)
[19:40:24] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:40:27] *** Quits: budo (~budo@c-24-62-207-85.hsd1.ma.comcast.net) (Quit: Leaving)
[19:40:29] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[19:40:42] *** Joins: Laibsch (~leggewie@dynamic-093-133-134-196.93.133.pool.telefonica.de)
[19:41:17] *** Joins: srhm (~ascii@user/srhm)
[19:42:01] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:42:12] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[19:42:20] *** Joins: shad (~shad@user/shad)
[19:42:48] *** Quits: hedy (hedy@user/hedy) (Changing host)
[19:42:48] *** Joins: hedy (hedy@tilde.team/user/hedy)
[19:44:47] *** Joins: toropisco (~toropisco@user/toropisco)
[19:44:52] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[19:45:37] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:46:46] *** Quits: julia (~quassel@user/julia) (Ping timeout: 272 seconds)
[19:47:33] *** Joins: pnoud (~pnoud@user/pnoud)
[19:47:39] *** Joins: godlike (~godlike@user/godlike)
[19:48:41] *** Quits: ExeciN (~ExeciN@user/nicexe) (Quit: Client closed)
[19:49:17] *** Joins: Fiji- (~Fiji@user/fiji)
[19:49:29] *** Joins: maroloccio (~marolocci@200.243.99.194)
[19:49:38] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[19:51:16] *** Joins: TML-prv (~joey@user/tml)
[19:51:37] *** Quits: DammitJim (~DammitJim@224.sub-72-107-71.myvzw.com) (Read error: Connection reset by peer)
[19:51:48] *** Joins: upsala (~zcb@185.213.155.160)
[19:52:46] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[19:52:49] *** Joins: LiftLeft (~LiftLeft@154.21.114.153)
[19:53:59] *** Joins: yogoyo (~weechat@p200300def74a01987d3d4b26ad48933f.dip0.t-ipconnect.de)
[19:54:32] *** Quits: pete443 (~pete443@user/pete443) (Quit: Leaving)
[19:54:40] *** Joins: Naan (~Naan@user/naan)
[19:54:52] *** Joins: unitedbypaste (~unitedbyp@198-74-4-196.fttp.usinternet.com)
[19:56:18] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 240 seconds)
[19:56:18] *** Quits: timkofu (~timkofu@user/timkofu) (Read error: Connection reset by peer)
[19:56:35] *** Quits: unitedbypaste (~unitedbyp@198-74-4-196.fttp.usinternet.com) (Quit: leaving)
[19:56:40] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[19:57:07] *** Joins: thiras (~thiras@user/thiras)
[19:57:17] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:59:24] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[19:59:59] *** Quits: kixx (~kixx@user/kixx) (Ping timeout: 244 seconds)
[20:00:05] *** Quits: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:00:07] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[20:00:19] *** Quits: egon (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:01:02] *** Joins: derelict (~derelict@user/derelict)
[20:01:28] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:02:26] *** Joins: darksun (~darksun@user/darksun)
[20:02:55] *** Quits: yogoyo (~weechat@p200300def74a01987d3d4b26ad48933f.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[20:03:04] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[20:03:40] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[20:04:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:04:43] <alguien> I don't suppose I could pull off replacing the system lib with a local one without modifying import statements?
[20:05:15] *** Joins: julia (~quassel@user/julia)
[20:05:58] <grym> alguien: which lib?
[20:06:44] *** Joins: pete443 (~pete@user/pete443)
[20:06:45] <alguien> python-slack-sdk, nothing nefarious, just a hotfix
[20:06:52] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[20:08:20] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[20:08:48] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[20:09:19] *** Joins: anp (~anp@user/anp)
[20:09:44] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[20:09:48] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 244 seconds)
[20:10:58] *** Quits: TML (~TML-prv@user/tml) (Remote host closed the connection)
[20:11:09] <grym> alguien: i don't think you'd have any problems installing that in a venv; you should be fine
[20:11:27] <SnoopJ> alguien, if a module is not currently loaded, Python will search for it in the locations given in sys.path in that order. So you could install your hotfix somewhere with higher priority (often $HOME/.local/lib/pythonX.Y/site-packages)
[20:11:29] <SnoopJ> Or yes, use a venv
[20:11:35] *** Joins: yogoyo (~weechat@p200300def74a01987d3d4b26ad48933f.dip0.t-ipconnect.de)
[20:11:55] *** Joins: kosh (~kosh@user/kosh)
[20:12:19] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[20:12:45] *** TML-prv is now known as TML
[20:13:11] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[20:13:27] <alguien> grym, SnoopJ I'd prefer to bundle it with the program
[20:13:40] <gitesh> do you understand what is a callback function?
[20:13:42] *** Joins: feriman (~feriman@188.163.113.127)
[20:13:53] <alguien> sure, why?
[20:14:19] <gitesh> i want to know
[20:14:36] <alguien> you want to know if i know this or you want to know what it is?
[20:14:49] <gitesh> i want to know what it is
[20:15:10] <bjs> gitesh: it's a function you can call later to do thing
[20:15:12] <bjs> things*
[20:15:18] <alguien> it's just a function whose purpose is to be called back from wherever you pass it into
[20:15:24] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:16:31] <gitesh> what pass it into?
[20:16:38] <gitesh> bjs: that was easy to understand
[20:16:42] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[20:16:56] <bjs> gitesh: you pass it to another function/class/program to use later
[20:17:13] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[20:17:57] <gitesh> but i didn't pass it into any where
[20:18:02] *** Joins: raukadah (~raukadah@110.44.96.144)
[20:18:11] <bjs> gitesh: what is "it"? :)
[20:18:21] <gitesh> callback function
[20:18:22] <alguien> gitesh, especially functions that execute in another thread, they'll return immediately and you'll have no way to use their result. unless - you pass them a function to call with the result. then you can say what to do with the result in that function you passed in
[20:18:37] *** Joins: |7| (~kvirc@user/seachdamh)
[20:18:43] <bjs> gitesh: you said "I didn't pass it into any where",  that sounds like you have some particular code you're looking at?
[20:19:26] <gitesh> no i don't have code really i am just trying to understand theory so that i can apply it practically later
[20:19:29] <SnoopJ> alguien, that would have been good to know with the original question. I think it's possible, a .pth might be the best option (documented here: https://docs.python.org/3/library/site.html#module-site)
[20:19:35] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:19:41] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Read error: Connection reset by peer)
[20:19:51] <bjs> gitesh: then you do pass it somewhere,  that's the point of a callback
[20:19:54] <bjs> you give it to someone else
[20:20:18] <alguien> SnoopJ, will look into thanks
[20:20:25] <gitesh> oh i see
[20:20:38] <alguien> python docs used to be prettier with that greenish blue
[20:20:55] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[20:21:31] <gitesh> here is code - self.spin = Spinbox(mighty, values=(1, 2, 4, 42, 100), width=5, bd=9, command=self._spin) # using range
[20:21:54] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 264 seconds)
[20:22:22] <gitesh> so here I'm passign this _spin function to this widget called Spinbox , that's the point of a callback
[20:22:32] *** Quits: |7| (~kvirc@user/seachdamh) (Read error: Connection reset by peer)
[20:23:00] *** Joins: |7| (~kvirc@user/seachdamh)
[20:23:14] <gitesh> so while I will run my GUI and i do something with this spinbox , oh it works!
[20:24:05] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[20:24:11] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[20:24:33] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[20:25:09] *** Joins: huria4 (~huria4@c-24-30-27-91.hsd1.ga.comcast.net)
[20:25:22] <huria4> How do I get python to prefer packages from pip over the system installed packages from the debian repos?
[20:25:42] <LuxuryMode> Why is it that even when annotating a method with `@staticmethod` it can still be referenced with `self.my_static_method`? In other languages this can't be done and would have to referenced statically as `MyClass.my_static_method` so I always found it confusing. And, is this the right way to call a static method from within the class?
[20:25:45] <BtbN> huria4, use a venv.
[20:26:01] <BtbN> Don't ever install stuff via pip without a venv, unless you know for sure what you're doing.
[20:26:04] *** Joins: ionface (~ionface@user/ionface)
[20:26:40] <huria4> Nobody told me about this venv stuff. Pip3 has been installing my packages into .local in my user directory.
[20:26:46] *** Quits: doev (~doev@p549d796e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:27:24] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:27:31] <LuxuryMode> Whaddya mean no one told you? BTjust told you.
[20:27:39] <LuxuryMode> BtbN just*
[20:27:41] <gitesh> can you guys explain me how does GUI programming works?
[20:27:54] <gitesh> I mean how GUI works?
[20:28:06] <LuxuryMode> Way too general of a question
[20:28:12] <fkdj> that depends on the toolkit
[20:28:13] <gitesh> and how is it different than the normal programming we do
[20:28:22] <LuxuryMode> Going to need to ask something more specific. Do you mean what are the options for GUI programming in Python?
[20:28:23] <huria4> gitesh, Do you prefer GTK3 or Qt5?
[20:28:36] <gitesh> i am here having tkinter using tkinter
[20:29:06] <gitesh> and tkinter uses ttk for widgets
[20:29:09] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[20:29:12] *** Joins: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b)
[20:29:15] <gitesh> i mean i am using ttk for widgets
[20:29:59] <gitesh> so while I'm having a GUI program built up and then i run the program then the program keeps running forever?
[20:30:22] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:30:43] *** Joins: qlixed (~qlixed@host60.181-13-74.telecom.net.ar)
[20:31:00] <grym> alguien: "bundle in" makes me think of tools like zipapp or shiv
[20:31:16] <TML> LuxuryMode: I don't generally find myself using static methods at all, but I'm confused why you'd call a static method from within the class. You can't access any instance data from the static method.
[20:31:16] *** Quits: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b) (Remote host closed the connection)
[20:32:01] *** Joins: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b)
[20:32:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:33:07] *** Quits: nanocoaster (~nanocoast@p200300e127264d00f99888eaee926bf0.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:33:20] <LuxuryMode> What would you do instead? Just define the method outside of the class? Seems to me calling a static method from within a class is a legitimate thing. Sometimes you want to expose a method to outside which doesn't necessitate an instance so you make it static and then you need to use it in the very class itself. Think a helper which makes sense for use in this class, but also has generally usefulness elsewhere.
[20:33:36] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[20:33:48] <LuxuryMode> Calling it within the class it's defined in isn't special at all. Same thing as calling it from outside the class.
[20:33:54] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 264 seconds)
[20:34:05] *** Quits: IHasFinger (~JJ_@2a02:c7f:fc54:ba00:d4db:ea08:dafd:12e7) (Ping timeout: 244 seconds)
[20:35:35] *** Quits: huria4 (~huria4@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[20:35:44] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[20:36:01] *** Quits: ffledgling (~textual@2620:10d:c090:400::5:e865) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:36:24] <TML> LuxuryMode: I would generally make something like that a module-level function instead of a staticmethod
[20:36:29] *** Joins: ffledgling (~textual@2620:10d:c090:400::5:e865)
[20:37:14] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[20:37:21] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[20:37:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:38:24] <LuxuryMode> hmm ok
[20:39:05] <jinsun> LuxuryMode: usually you make a @classmethod if you don't need an instance, but still need to refer to the class itself, but those can be called from instances too
[20:39:33] <LuxuryMode> yeah that makes sense. Quoting from SO "If your method needs access to an instance, make it a regular method. If it needs access to the class, make it a classmethod. If it doesn't need access to the class or the instance, make it a function."
[20:40:10] <TML> That's a great quote - never heard it before, but it pretty much sums up my own internal take
[20:42:04] <TML> LuxuryMode: Maybe you just need to become more familiar/comfortable with modules. They're a great part of Python and one people coming from languages like Java and C++ often seem to overlook, trying to wedge everything into classes.
[20:42:43] *** Joins: viktorivan (~ivan@2806:101e:7:b2aa:8c27:79fd:f26e:8c05)
[20:42:52] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Client closed)
[20:43:14] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Quit: Leaving)
[20:43:35] *** Joins: radu2422 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[20:43:39] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[20:44:08] <LuxuryMode> Yeah, could be
[20:44:14] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[20:44:25] *** Quits: Fiji- (~Fiji@user/fiji) (Ping timeout: 244 seconds)
[20:44:25] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[20:44:28] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:44:33] *** Joins: skapata (~Skapata@user/skapata)
[20:44:44] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Quit: Client closed)
[20:44:45] <acegallagher> odd python question. how come my imported libraries aren't available when using the debugger?
[20:44:54] <acegallagher> i.e. if my code has "import numpy as np" at the top
[20:45:06] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[20:45:12] <acegallagher> and I'm in the debugger, why can't I call "np.some_func_im_trying_to_debug()"
[20:45:15] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Client Quit)
[20:45:17] <acegallagher> without importing numpy again?
[20:45:25] <acegallagher> and ... of course... is there a way to change that
[20:45:52] *** Quits: raukadah (~raukadah@110.44.96.144) (Quit: Leaving)
[20:45:52] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[20:45:54] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:45:59] *** Quits: yogoyo (~weechat@p200300def74a01987d3d4b26ad48933f.dip0.t-ipconnect.de) (Changing host)
[20:45:59] *** Joins: yogoyo (~weechat@user/yogoyo)
[20:46:08] *** Joins: cidtest (~cidtest@89.238.185.221)
[20:46:33] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:46:37] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Client Quit)
[20:46:42] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:47:19] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:47:24] *** Joins: Akuli (~Akuli@82-203-166-235.bb.dnainternet.fi)
[20:47:28] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:47:38] *** Joins: fofoni (~fofoni@user/fofoni)
[20:48:18] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:49:13] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[20:50:44] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:50:53] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:51:23] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:51:28] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 268 seconds)
[20:51:31] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[20:52:17] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[20:53:30] *** Joins: Celeo (~Celeo@2603-8001-3301-2e00-8c77-d35a-f4b2-66eb.res6.spectrum.com)
[20:53:53] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 252 seconds)
[20:55:40] *** Quits: Laibsch (~leggewie@dynamic-093-133-134-196.93.133.pool.telefonica.de) (Ping timeout: 268 seconds)
[20:55:47] *** Joins: GadgetNerd (~GadgetNer@136.244.21.145)
[20:56:55] *** Joins: badsektor (~badsektor@user/badsektor)
[20:57:24] *** Joins: alphacath (~alpha@host-79-36-63-89.retail.telecomitalia.it)
[20:58:18] *** Joins: maroloccio (~marolocci@200.243.99.194)
[20:58:21] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[20:59:03] *** Quits: alphacath (~alpha@host-79-36-63-89.retail.telecomitalia.it) (Remote host closed the connection)
[20:59:24] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 244 seconds)
[20:59:28] *** Joins: MrAwesomeRox (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[20:59:51] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 272 seconds)
[21:00:11] *** Quits: vsantana (~vsantana@fttx-17713614824.usr.predialnet.com.br) (Quit: Leaving)
[21:00:40] *** Quits: MrAwesomeRox (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Client Quit)
[21:01:43] *** Joins: MrAwesomeRox (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[21:01:50] *** Quits: gusto (~Augustus@109.255.100.54) (Ping timeout: 268 seconds)
[21:04:12] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:04:33] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Quit: Leaving)
[21:04:50] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[21:05:19] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[21:06:28] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Client closed)
[21:06:38] *** Quits: MrAwesomeRox (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Quit: Leaving)
[21:06:39] *** Joins: Payam (~Payam@138.106.57.131)
[21:07:22] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Client Quit)
[21:07:28] <Payam> hi dear friends, I use this code to substitude some string : https://bpa.st/TDQA but in the resulting  text the `")` missing. what am I doing wrong?
[21:07:34] <fkdj> i want something to parse the search query and searching in the a database
[21:07:37] *** Joins: dakh7_ (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[21:07:41] *** Quits: |7| (~kvirc@user/seachdamh) (Read error: Connection reset by peer)
[21:08:07] *** Quits: kmh_ (~kmh@p200300df5f1f6100ddb09957c69dbac2.dip0.t-ipconnect.de) (Quit: Leaving)
[21:08:10] *** Joins: saagaar (~saagaar@2400:1a00:bd11:4ed7:f573:73c9:a8c3:e284)
[21:08:36] *** Joins: |7| (~kvirc@user/seachdamh)
[21:08:42] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[21:08:42] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 244 seconds)
[21:08:59] *** Joins: Betal (~Beta@user/betal)
[21:09:11] <TML> fkdj: What is "the a database"?
[21:09:20] *** Joins: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com)
[21:09:26] <fkdj> a sqlite db
[21:10:11] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:10:23] *** Joins: Laibsch (~leggewie@ip-109-40-0-69.web.vodafone.de)
[21:10:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:11:07] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[21:11:42] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 268 seconds)
[21:11:49] <TML> fkdj: I'm afraid that I am unable to decipher any meaningful question from those sentence fragments.
[21:12:05] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[21:12:52] <fkdj> i like a module that can parse search queries and apply them to a sqlite db
[21:13:17] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:13:33] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[21:13:47] *** Joins: Intruder777 (~Intruder7@ppp-109-104-160-59.wildpark.net)
[21:14:25] <TML> Payam: The close parenthesis is in group 3
[21:14:34] *** Joins: cliluw (~cliluw@47.147.80.149)
[21:14:58] *** Joins: kmh (~kmh@p200300df5f1f61005730715439573d24.dip0.t-ipconnect.de)
[21:14:59] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:15:24] *** Quits: Laibsch (~leggewie@ip-109-40-0-69.web.vodafone.de) (Ping timeout: 268 seconds)
[21:15:31] <Payam> yes. I missed a \3
[21:15:31] *** Quits: viktorivan (~ivan@2806:101e:7:b2aa:8c27:79fd:f26e:8c05) (Remote host closed the connection)
[21:16:04] <TML> Payam: Also, you regex appears to be needlessly complex
[21:16:26] <Payam> Why?
[21:16:30] *** Quits: shad (~shad@user/shad) (Ping timeout: 264 seconds)
[21:16:44] <TML> r'(.*?\[~v).*?(]@irc/).*?(".*)'
[21:16:50] *** Joins: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:17:06] *** Parts: Intruder777 (~Intruder7@ppp-109-104-160-59.wildpark.net) ()
[21:17:06] <Payam> \]?
[21:17:11] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[21:17:15] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[21:17:21] <TML> You don't need to escape a bare ]
[21:18:06] <Payam> what does ? mean?
[21:18:14] <TML> non-greedy match
[21:18:23] *** Joins: ddavis (~user@143.244.170.159)
[21:18:31] *** Quits: jwhisnant (~jwhisnant@jwhisnant.powered.by.lunarbnc.net) (Changing host)
[21:18:31] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[21:19:43] *** Quits: jlang (~jlang@user/jlang) (Ping timeout: 268 seconds)
[21:20:00] <Payam> TML what does that mean?
[21:20:04] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 244 seconds)
[21:20:31] <SnoopJ> "zero or one of [preceding thing]"
[21:20:54] <SnoopJ> r"ab?c" matches "abc" and "ac" but not "abbc"
[21:20:57] *** Quits: crippa (~crippa@160.62.4.101) (Ping timeout: 268 seconds)
[21:21:15] <SnoopJ> ...but you were asking about .*? nevermind me
[21:21:21] <Payam> yes
[21:21:30] <TML> Well, when it's after a quantifier, it alters the greediness of the quantifier
[21:21:40] *** dlam1 is now known as dlam
[21:22:00] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[21:22:35] *** Quits: aslicedbanjo (~aslicedba@host86-150-115-37.range86-150.btcentralplus.com) (Quit: Leaving.)
[21:22:45] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[21:22:48] <m_tadeu> hi....how can I see (I need to log) exception that happen inside a context manager? I'm using 'with self.mutext: <my code that might raise>'
[21:22:59] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:23:01] *** Joins: theninth (~nine@78-73-215-169-no505.tbcn.telia.com)
[21:23:11] <TML> so in 'a.*c' the '.*' matches 'bcd' in the string 'abcdc', while 'a.*?c' only matches 'b' in the same string
[21:23:16] <bjs> m_tadeu: do you mean, you are *writing* the context manager and want to see
[21:23:25] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[21:23:28] <bjs> or that you want to intercept the exception before it reaches the context manager?
[21:23:58] *** Joins: Ogmios (~Ogmios@104-176-153-167.lightspeed.tukrga.sbcglobal.net)
[21:24:01] <m_tadeu> bjs: I'm not writing it...I'm using the from the Lock() object
[21:24:38] <bjs> m_tadeu: the Lock object's ctx manager shouldn't be hiding any exceptions, if there's an exception in the body it should just get propagated up like usual
[21:24:44] <Payam> TML how about in `abbbbcd` wil it match `bbbb`?
[21:24:46] <bjs> m_tadeu: but you can put a `try` inside the `with` if you really want to see
[21:24:52] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:24:55] *** Joins: Obo (~roberto@h-46-59-103-134.A498.priv.bahnhof.se)
[21:25:18] <m_tadeu> oh I though it would hide them to be processed inside the __exit__()
[21:25:25] <m_tadeu> well ok then....thanks
[21:25:40] <bjs> m_tadeu: well context managers *can* hide them
[21:26:12] <theninth> quit
[21:26:16] *** Quits: theninth (~nine@78-73-215-169-no505.tbcn.telia.com) (Quit: WeeChat 3.0.1)
[21:26:16] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 244 seconds)
[21:26:23] <bjs> but Lock shouldn't.
[21:27:00] <m_tadeu> sweet :) thanks
[21:27:55] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[21:28:37] *** Quits: radu2422 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[21:29:40] *** Quits: canopus (~user@116.68.98.40) (Quit: ERC (IRC client for Emacs 27.2))
[21:30:01] *** Joins: radu2422 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[21:31:08] *** Joins: jlang (~jlang@user/jlang)
[21:31:35] <TML> Payam: in "abbbcd" both expressions match the exact same thing
[21:32:07] *** Joins: theninth (~theninth@78-73-215-169-no505.tbcn.telia.com)
[21:32:52] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:33:17] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 268 seconds)
[21:34:11] <fkdj> how can I make a search query into something useful?
[21:34:17] <fkdj> with python
[21:34:35] <TML> fkdj: What is "a search query" in this context?
[21:34:45] *** Joins: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85)
[21:35:14] *** Joins: gusto (~Augustus@109.255.100.54)
[21:35:23] <fkdj> string containing keywords and search operators
[21:35:46] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[21:36:03] *** Joins: magla (~gelignite@55d48585.access.ecotel.net)
[21:37:04] *** Joins: ionface (~ionface@user/ionface)
[21:37:08] <TML> fkdj: Unfortunately, I am not aware of any pre-written library that will allow you to become Google with no effort on your part.
[21:37:26] *** Quits: gusto (~Augustus@109.255.100.54) (Client Quit)
[21:37:37] *** Quits: ripdog (~quassel@user/ripdog) (Quit: ripdog)
[21:37:50] *** Joins: ripdog (~quassel@user/ripdog)
[21:39:11] *** Quits: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85) (Ping timeout: 244 seconds)
[21:39:38] <bjs> fkdj: write a function that sends it to Google and return the "did you mean?" part of the result
[21:39:38] *** Quits: ffledgling (~textual@2620:10d:c090:400::5:e865) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:39:39] <bjs> :)
[21:39:59] <SnoopJ> fkdj, the first step will be to parse the string into those components. Once you have those, there are a few strategies for performing a search. It would help to have a more complete description of what you're doing here.
[21:40:17] *** Quits: greedom (~greedom@2001:16b8:2ed9:4f00:9414:9435:17d6:8c9b) (Remote host closed the connection)
[21:41:20] <TML> SnoopJ: I believe, from strining context across several fragments, that fkdj is looking for something that will turn NLP or possibly boolean search terms into SQL
[21:41:41] *** Quits: theninth (~theninth@78-73-215-169-no505.tbcn.telia.com) (Quit: WeeChat 3.0.1)
[21:42:08] *** Joins: audiocat (~audio@2603-8081-1800-0062-7a28-0488-1f6b-ed4c.res6.spectrum.com)
[21:42:27] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:43:35] <jwhisnant> TML: requests.get('https://google.com', params={}) :)
[21:43:45] <TML> jwhisnant: heh
[21:44:26] <SnoopJ> TML, I prefer not to guess where asking for clarification will do, but YMMV
[21:44:33] <tunixman> It's not directly python, but can definitely be called from Python: https://www.compose.com/articles/indexing-for-full-text-search-in-postgresql/
[21:44:37] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 272 seconds)
[21:45:14] <NoImNotNineVolt> elasticsearch or lucene might be a better fit than postgres
[21:45:18] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:45:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[21:45:26] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[21:45:27] <tunixman> Yeah, that's true.
[21:45:29] *** Joins: jkl (~jkl@12.216.111.80)
[21:45:39] *** Parts: Pajus (~Pajus@user/pajus) ()
[21:46:21] <NoImNotNineVolt> elasticsearch supports querystring query syntax, which is similar to google's query syntax
[21:46:52] *** Joins: upsala (~zcb@185.213.155.160)
[21:47:02] *** Joins: Pedaleando (~Admin@ip188-178-64-186.ct.co.cr)
[21:47:03] <NoImNotNineVolt> it's also highly configurable as far as how strings are tokenized, etc.
[21:47:21] <fkdj> it has to work with python and sqlite (without fts)
[21:47:36] <NoImNotNineVolt> elasticsearch can be indexed in and queried from python
[21:47:44] <NoImNotNineVolt> it's not clear how sqlite would apply
[21:47:47] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[21:47:48] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[21:47:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:47:57] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:48:09] *** Joins: mickey (~user@user/mickey)
[21:48:18] <tunixman> As it turns out https://www.sqlitetutorial.net/sqlite-full-text-search/
[21:48:23] *** Joins: pnoud (~pnoud@user/pnoud)
[21:48:36] *** Quits: saagaar (~saagaar@2400:1a00:bd11:4ed7:f573:73c9:a8c3:e284) (Quit: Client closed)
[21:48:59] *** Quits: Obo (~roberto@h-46-59-103-134.A498.priv.bahnhof.se) (Quit: WeeChat 2.8)
[21:49:06] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 240 seconds)
[21:49:24] <NoImNotNineVolt> indeed, that may be sufficient.
[21:50:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[21:50:05] <NoImNotNineVolt> but elasticsearch can index/search using an n-gram tokenizer, can do ascii folding, etc etc.
[21:50:17] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:50:29] *** Joins: monowire (~mono@gateway/tor-sasl/monowire)
[21:50:34] <NoImNotNineVolt> but fkdj didn't say they need any of that, so your suggestion is probably better :P
[21:50:52] <tunixman> I think postgres uses ngrams also, also inverted indexes, etc.
[21:50:57] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[21:51:14] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:51:17] *** Quits: monowire (~mono@gateway/tor-sasl/monowire) (Client Quit)
[21:51:38] <tunixman> sqlite has a trigram tokenizer at least https://www.sqlite.org/fts5.html
[21:51:48] <tunixman> it's experimental though, but still, it's trigrams.
[21:52:05] <SnoopJ> They've now told us that they don't want to use FTS (for whatever reason), if not what they *are* doing
[21:52:18] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:52:34] <fkdj> a search is conducted in a sqlite database with text fields and no fts index
[21:52:43] <tunixman> ah. I guess '%'.join(terms) might work then, of course.
[21:53:02] <tunixman> add the '%'s on the outside too.
[21:53:05] *** Quits: jlang (~jlang@user/jlang) (Quit: WeeChat 3.1)
[21:53:19] *** d3fn is now known as defn
[21:53:33] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[21:53:38] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[21:53:51] <tunixman> Oh if this is for homework that's probably what they're looking for, can you use like/ilike and wildcards.
[21:54:00] *** Quits: cellofellow (~user@166.70.50.58) (Remote host closed the connection)
[21:54:10] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 244 seconds)
[21:54:43] *** Joins: ionface (~ionface@user/ionface)
[21:56:03] *** Joins: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85)
[21:56:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[21:56:31] <fkdj> you will need multiple queries for multiple tokens, and I'd like automatize that
[21:56:35] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[21:56:54] *** Joins: chance (~chance@50.47.109.175)
[21:57:46] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:58:41] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[21:59:05] *** Joins: superboot (~agentgasm@user/superboot)
[21:59:11] <tunixman> Yeah, something like 'where' + field + 'ilike %' + '%'.join(queries) + '%' might be a good start.
[21:59:27] <tunixman> it's not going to be fast on larger data, but it's something.
[22:01:05] *** Quits: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85) (Ping timeout: 272 seconds)
[22:01:05] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 272 seconds)
[22:01:19] <fkdj> it obviously won't work, as the terms can be in any order
[22:02:11] *** Quits: GadgetNerd (~GadgetNer@136.244.21.145) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:02:29] <SnoopJ> they did say "start"
[22:02:41] <fkdj> plus, sqlite cannot do regex searches and there are no provisions for word boundaries
[22:02:48] <SnoopJ> few things to worry about here which are probably going to amount to building your own version of FTS
[22:02:53] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[22:02:53] <SnoopJ> (but slower)
[22:03:03] *** Joins: GadgetNerd (~GadgetNer@136.244.21.145)
[22:03:04] <deniska> (you can add additional functions to sqlite on the fly)
[22:03:47] <TML> fkdj: It seems unlikely to me that you are going to find anything pre-built that is going to solve this problem for you. Since you have to do some engineering anyway, it might be a good time to revisit the requirements and see about adding FTS support.
[22:04:03] <fkdj> i wonder how fast python functions would be;
[22:04:33] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[22:05:12] <fkdj> fun fact: sqlite cannot even do case-insensitive search without an external function
[22:05:50] *** Joins: Julian (~tos9@151.66.53.132)
[22:06:06] <fkdj> (unless you have a custom built one with ICU module)
[22:06:46] <TML> fkdj: Well, that's patently false
[22:07:12] *** Joins: patchie (~sdf@136.228.208.131)
[22:07:42] *** Quits: _0x5fc3 (~0x5fc3@user/0x5fc3/x-5271152) (Changing host)
[22:07:42] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[22:09:01] *** Joins: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85)
[22:09:12] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Remote host closed the connection)
[22:09:23] *** Quits: erica (~erica@user/erica) (Read error: Connection reset by peer)
[22:09:29] *** Joins: erica (~erica@user/erica)
[22:10:11] *** Joins: Fiji- (~Fiji@user/fiji)
[22:10:15] *** Joins: ruru4143 (~quassel@vmi444754.contaboserver.net)
[22:11:07] *** Joins: ras_manny (~ras_manny@196.24.141.56)
[22:11:32] <fkdj> just tested - still true in 3.8.7/sqlite 3.33
[22:12:33] <TML> create table foo(bar varchar(255)); insert into foo(bar) values("TEST"); select * from foo where bar like 'test';
[22:12:46] <TML> works perfectly fine OOTB
[22:12:58] <TML> SQLite version 3.34.0 2020-12-01 16:14:00
[22:13:15] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[22:13:54] *** Joins: DaNeenjah (~jake@adsl-74-230-10-74.hsv.bellsouth.net)
[22:14:42] <TML> https://www.sqlite.org/lang_expr.html - "The LIKE operator does a pattern matching comparison…Any other character matches itself or its lower/upper case equivalent (i.e. case-insensitive matching)."
[22:15:11] *** Quits: DaNeenjah (~jake@adsl-74-230-10-74.hsv.bellsouth.net) (Client Quit)
[22:15:28] *** Joins: DaNeenjah (~jake@adsl-74-230-10-74.hsv.bellsouth.net)
[22:15:52] <fkdj> now read that paragraph in its entirety
[22:16:01] *** Joins: Pickchea (~private@user/pickchea)
[22:16:31] <TML> You don't need the ICU extension to do case-insensitive matching of the ASCII characters
[22:17:24] *** Joins: Auron (Auron956@user/auron)
[22:18:18] *** Quits: teut (~teut@182.69.85.39) (Ping timeout: 268 seconds)
[22:18:29] *** Quits: rendar (~rendar@user/rendar) ()
[22:18:44] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[22:19:08] *** Quits: Fiji- (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[22:19:15] *** Quits: Julian (~tos9@151.66.53.132) (Quit: leaving)
[22:19:18] *** Joins: dulanic (~dulanic@47.187.147.69)
[22:19:24] *** Joins: darksun (~darksun@user/darksun)
[22:19:30] <fkdj> separating ascii characters from the others doesn't make any sense, so it is safe to say sqlite cannot do case insensitive matching
[22:19:33] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[22:21:03] <grym> both sides just need to specify their domains
[22:21:29] *** Joins: ffledgling (~textual@2620:10d:c090:400::5:e865)
[22:22:01] <nedbat> fkdj: i'm not sure why you say sqlite can't do case insensitive matching? See COLLATE NOCASE here: https://www.sqlite.org/datatype3.html
[22:22:35] <nedbat> fkdj: oh, i guess you meant you need to consider non-ascii also?
[22:22:54] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[22:22:55] * SnoopJ still isn't clear on the task
[22:23:12] <nedbat> fkdj: sqlite is extendible in various ways if that is what you need.
[22:23:30] <TML> fkdj: Well, clearly, we'll just have to agree to disagree on that particular point, as having non-ASCII characters in my database doesn't make sense, so to each his own, I suppose :)
[22:23:36] *** Quits: marduk (~marduk@216.243.54.166) (Remote host closed the connection)
[22:24:00] *** Joins: mekhami (~lawrence@135.84.115.18)
[22:24:18] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 264 seconds)
[22:24:32] <fkdj> it's 2021 and if you still operate in 1967 categories like ascii, you are clearly doing smth wrong
[22:24:49] <sco1> lol what
[22:24:50] <nedbat> fkdj: you seem to have a bit of an sharp edge in this conversation
[22:25:12] <TML> fkdj: *shrug* To each his own
[22:25:53] <nedbat> fkdj: we'd be glad to talk to you, but you seem condescending and maybe even angry, i'm not sure about what.
[22:26:02] <KirkMcDonald> I think it would make perfect sense for sqlite to have some proper Unicode case folding support.
[22:26:19] <TML> KirkMcDonald: It can, you just have to build it with ICU
[22:26:21] <nedbat> it would make sense for sqlite to have that, yes
[22:26:25] <KirkMcDonald> Oh, well, then okay.
[22:26:46] <TML> because it makes no sense for SQLite to re-implement ICU
[22:26:48] <TML> :)
[22:26:56] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[22:26:56] <nedbat> it's even available on pypi: https://pypi.org/project/sqlite_ucf
[22:27:06] *** Joins: ZenixOwler (~networker@118.69.128.37)
[22:27:20] <fkdj> interesting
[22:27:36] <KirkMcDonald> I'm actually surprised that this would require a third-party addition, and not just building the underlying sqlite library in this way.
[22:28:15] <nedbat> and it's a couple of lines to add a regex function to sqlite
[22:28:20] <ZenixOwler> question, i am not part of the group who developed the Python language tho but i am a bit curious about it in some aspects, such as iirc, Python also converts to bytecodes which base on the similar mechanism of Java but why doesn't Python also add in the error-checking at compile-time but only check at runtime ?
[22:28:26] <fkdj>  connection.create_function('LOWER', 1, lambda x: x.lower())
[22:28:26] *** Quits: ripdog (~quassel@user/ripdog) (Quit: ripdog)
[22:28:27] <fkdj>  :PPP
[22:28:37] *** Joins: marduk (~marduk@216.243.54.166)
[22:28:39] <nedbat> fkdj: there you go. problem solved
[22:28:55] <nedbat> ZenixOwler: Python's bytecode is different than Java's.
[22:29:13] <TML> *shrug* All of unicode, its normal forms, its encoding types - given SQLite's goal of staying ridiculously lean by default, it doesn't seem that surprising to me that they don't bundle all of that for the default case.
[22:29:33] <ZenixOwler> nedbat: yea obviously since it's two languages, but can't python developers also add in error-checking at compile-time ? or is there any python interpreter that can do that beside the standard cython ?
[22:29:42] <ZenixOwler> this is also a bit historical question tho
[22:29:44] <nedbat> fkdj: connection.create_function("REGEX", 2, lambda text, pattern: re.search(text, pattern) is not None)
[22:29:48] <ZenixOwler> i am wondering why the developers of Python didn't consider so
[22:29:59] <nedbat> ZenixOwler: what kind of error checking do you mean?
[22:30:37] <ZenixOwler> nedbat: well, like Java, it checks my codes at both compile time and during runtime as well to seek for errors
[22:30:39] <ZenixOwler> iirc
[22:30:47] <nedbat> ZenixOwler: do you mean type checking?
[22:31:06] *** Joins: ripdog (~quassel@user/ripdog)
[22:31:19] *** Quits: rhax (~yannick@user/rhax) (Remote host closed the connection)
[22:31:20] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[22:31:28] <TML> ZenixOwler: What are you considering "compile time" for your Python code? It generally doesn't have a distinct "compile" phase the way Java does.
[22:31:34] <deniska> ZenixOwler: python has a quite different model compared to java when it comes to resolving names, that it makes it hard to implement more of compile time checks
[22:31:42] *** Joins: rhax (~yannick@user/rhax)
[22:32:31] <KirkMcDonald> ZenixOwler: Python is dynamically typed, for one. There is information about types that Python simply does not have until runtime.
[22:32:50] <KirkMcDonald> ZenixOwler: Though these days there are add-on tools which can perform type checking.
[22:32:57] <KirkMcDonald> If the code is annotated with types.
[22:33:02] <SnoopJ> TML, why do you say that? CPython most certainly does have a compile phase.
[22:33:02] <ZenixOwler> nedbat: yea, something like that
[22:33:06] <gitesh> So event loop is operating system's work?
[22:33:18] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 264 seconds)
[22:33:29] <gitesh> Or job
[22:33:32] <bjs> gitesh: an "event loop" is just a loop that handles some events
[22:33:33] <KirkMcDonald> ZenixOwler: That said, there *are* things which will fail at compile-time, though these are mostly in the category of syntax errors.
[22:33:34] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[22:33:35] <ZenixOwler> TML: well, with nowdays python, i think it still convert to bytecodes behind the scenes tho, which is where i used the "compile" for
[22:33:48] <bjs> gitesh: that could describe so very many things in programming,  and could be something done by lots of different things
[22:34:02] <fkdj> if you making a game, you provide your own loop
[22:34:23] <ZenixOwler> KirkMcDonald: yea, i mean every existing language i came across does Syntax checking though
[22:34:27] <deniska> Like, heck, you can monkeypatch builtins :P
[22:34:40] <ZenixOwler> KirkMcDonald: so that sounds normal, unless you know a lang which doesn't check that
[22:34:49] <KirkMcDonald> bash, maybe.
[22:34:51] <TML> SnoopJ: In the same sense as Java, where you ship bytecode objects around to different OSes and CPU architectures and the runtime will interpret them without recompilation?
[22:35:03] <TML> I guess I just didn't know that it could do that
[22:35:11] <nedbat> ZenixOwler: Python also tells you about syntax errors
[22:35:20] <SnoopJ> TML, the virtual machine is...virtual.
[22:35:27] <ZenixOwler> KirkMcDonald: well, it's a command language so... doesn't,... counted ?
[22:35:54] <ZenixOwler> nedbat: yea but if i undeclare something and later on at line 40 or whatever try to print that out, Python won't notify me unless i hit that line
[22:36:41] <nedbat> ZenixOwler: what does "undeclare" mean?
[22:36:56] <ZenixOwler> nedbat: basically just starting in with a print(i) and i didn't even declare i
[22:37:09] *** Quits: cidtest (~cidtest@89.238.185.221) (Quit: WeeChat 3.1)
[22:37:33] <KirkMcDonald> Variable declarations in Python work very differently from other languages.
[22:37:36] <nedbat> ZenixOwler: right, because i could be available from a context that the compile doesn't know about.
[22:37:39] <deniska> ZenixOwler: maybe someone, somewhere, did `import builtins` and then `builtins.i = "Hello"`
[22:37:42] <nedbat> *compiler
[22:38:19] <ZenixOwler> KirkMcDonald: yea i can tell, i am just wondering if there is any *historical* reasons why python developers chose to make that so differently
[22:38:19] <nedbat> ZenixOwler: python does checks at compile time, but not as many as Java does. it was a design decisiion for Python to be more dynamic.
[22:39:00] <deniska> ZenixOwler: (and java is younger than python, so if anything, it's java which chose to be different from python, not the other way around :P )
[22:39:04] <KirkMcDonald> ZenixOwler: The module-level namespace is a dict. Its contents are only known at runtime.
[22:39:10] *** Joins: SebastianM (~seba@user/sebastianm)
[22:39:43] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[22:39:53] <ZenixOwler> deniska: oh... thought it was older XD
[22:39:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:40:18] <bjs> ZenixOwler: they're about the same "age"
[22:40:21] <deniska> it's a fairly common misconception due to the fact that java was used in education prior to python :)
[22:40:37] <deniska> and java also looks less hip, so must be older
[22:40:40] *** Quits: audiocat (~audio@2603-8081-1800-0062-7a28-0488-1f6b-ed4c.res6.spectrum.com) (Ping timeout: 244 seconds)
[22:40:49] <KirkMcDonald> Python is about a year and a half older, but Java matured faster.
[22:40:53] <bjs> ZenixOwler: the authors of both languages did think about all of these things,  but decided to make different decisions and have a different language.
[22:40:58] <bjs> which is fine
[22:41:07] <nedbat> ZenixOwler: Python: 1991; java: 1995
[22:41:10] *** Quits: Einstei__ (~einstein@108.5.219.168) (Remote host closed the connection)
[22:41:25] <nedbat> it helped that Java was from Sun, but Python was just some scruffy Dutch dude
[22:41:34] <KirkMcDonald> (I'm counting from when development started, I guess.)
[22:41:51] <ZenixOwler> nedbat: Sun ?
[22:41:51] <nedbat> it doesn't matter which is older, the first one doesn't get to decide how later ones work anyway
[22:42:02] <nedbat> ZenixOwler: Sun Microsystems produced Java
[22:42:05] <ChrisWarrick> (may it rest in peace)
[22:42:07] <ZenixOwler> oh, ok got it
[22:42:16] <grym> ChrisWarrick: as long as it keeps resting :)
[22:42:23] *** Quits: armandokeller (~armandoke@200.159.170.169) (Quit: Client closed)
[22:42:34] <iphone> anyone else want a ribeye? I'm going to thaw one out for myself
[22:42:39] <ChrisWarrick> grym: the world would have been much better with sun than it is after the or*cle acquisition
[22:42:44] <ZenixOwler> deniska: yea, also due to the fact that Java provides extra-syntax compared to Python XD
[22:42:47] <grym> ChrisWarrick: ok, point
[22:42:50] <nedbat> iphone: please keep the noise down.
[22:43:02] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[22:43:29] <int0x1C8> *turns volume to 11* REEEEEEEEE
[22:43:34] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:43:43] <iphone> int0x1C8 got my back
[22:43:55] *** Joins: khile (cacambo@triton.blinkenshell.org)
[22:43:55] * iphone chest bumps int0x1C8
[22:44:04] *** ChanServ sets mode: +o nedbat
[22:44:14] <nedbat> iphone: please keep the noise down.
[22:44:22] *** Quits: fannagoganna (~tanim@c-98-37-1-250.hsd1.ca.comcast.net) (Quit: leaving)
[22:44:40] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[22:44:48] <int0x1C8> uh oh, just joking, sorry
[22:45:18] *** Quits: fkdj (~fkdj@178.49.152.151) (Quit: Client closed)
[22:46:18] *** Quits: cruzr (~cruzr@2604:4300:a:16b::6) (Remote host closed the connection)
[22:46:44] *** ChanServ sets mode: -o nedbat
[22:46:46] *** Joins: cruzr (~cruzr@2604:4300:a:16b::6)
[22:46:47] *** Joins: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[22:46:53] <nedbat> int0x1C8: it's ok :)
[22:47:49] *** Joins: teut (~teut@182.69.85.39)
[22:47:52] *** Joins: fkdj (~fkdj@178.49.152.151)
[22:48:01] *** Quits: Laibsch (~leggewie@2a01:c22:bc28:eb00:9ccc:80be:231a:4a85) (Ping timeout: 268 seconds)
[22:48:31] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[22:49:32] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[22:49:56] *** Quits: Samian (~Samian@2620:10d:c090:400::5:6df2) (Ping timeout: 252 seconds)
[22:50:19] *** Quits: patchie (~sdf@136.228.208.131) (Remote host closed the connection)
[22:50:25] <iphone> well certainly java was the more popular platform, so it would be more accurate to say that python chose to be different than java. Python has come a looong way in terms of features and syntax
[22:50:27] <Yhg1s> Some news that might interest people: https://pyfound.blogspot.com/2021/06/update-on-python-software-foundation.html
[22:51:22] <raek> ZenixOwler: to me it sounds like you are under the impression that if a language has a compilation step, then there exists an obvious way add lots of static checks
[22:51:35] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:51:42] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[22:51:56] <SnoopJ> Yhg1s, I should hope so!
[22:52:07] <ZenixOwler> raek: nya, it's just when something new is created, usually the developers have to consider lots of things on the previous creation to make it, i am just wondering those
[22:52:20] <int0x1C8> I just hate all the dumb boilerplate required in java and C#
[22:52:40] <grym> int0x1C8: C# seems to be getting more pythonic every release
[22:52:46] <grym> so i guess eric agrees with you :D
[22:52:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 268 seconds)
[22:52:57] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Updating details, brb)
[22:53:02] <grym> (lippert; i don't mean to be all first-name-droppy, don't know the guy at all)
[22:53:07] <int0x1C8> yeah I'm liking it, C# is getting less painful
[22:53:32] <grym> much
[22:53:32] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Remote host closed the connection)
[22:54:37] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 244 seconds)
[22:54:38] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[22:54:47] *** Joins: dme86 (~dan@user/dan86)
[22:56:39] <Yhg1s> SnoopJ: well, it's easy to overestimate how much people actually care about the PSF's ongoings :)
[22:56:40] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[22:57:16] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[22:57:27] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[22:57:35] <SnoopJ> Yhg1s, to wit: I confess I had no idea who Ewa was until PyCon. But it was very clear how much her work meant to people, and the foundation is certainly something special :)
[22:58:04] *** Joins: patchie (~sdf@136.228.209.39)
[22:59:22] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[22:59:36] *** Quits: Barones (~Barones@2804:48dc:8500:0:23:c8ea:df2b:e5e6) (Remote host closed the connection)
[22:59:37] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[22:59:44] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[22:59:56] *** Joins: maroloccio (~marolocci@200.243.99.194)
[23:00:37] *** Quits: ZenixOwler (~networker@118.69.128.37) (Ping timeout: 272 seconds)
[23:02:11] *** Joins: Ivyy (~Ivyy@2001:a62:41d:fa01:b6b3:aa7c:7e25:abb1)
[23:03:11] *** Joins: bluesmonk (uid318026@id-318026.brockwell.irccloud.com)
[23:04:55] *** Joins: Laibsch (~leggewie@2a01:c22:b487:5b00:f277:e31c:10f1:a045)
[23:05:13] *** Joins: Barones (~Barones@2804:48dc:8500:0:6861:5616:aec5:ddb0)
[23:05:53] *** Joins: daniel2 (daniel@user/daniel2)
[23:05:57] *** Quits: radu2422 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: Ping timeout (120 seconds))
[23:06:25] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:06:37] *** Joins: radu2422 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[23:07:21] *** Quits: patchie (~sdf@136.228.209.39) (Remote host closed the connection)
[23:07:52] *** Quits: fkdj (~fkdj@178.49.152.151) (Quit: Client closed)
[23:08:52] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[23:10:12] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Client closed)
[23:10:44] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:10:47] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[23:11:27] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[23:11:57] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[23:12:55] *** Quits: rsx (~dummy@ppp-188-174-130-150.dynamic.mnet-online.de) (Quit: rsx)
[23:13:10] <boxelephant> lippert isn't at microsoft anymore, works at Facebook now
[23:13:11] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 268 seconds)
[23:13:21] *** Joins: iomari891 (~iomari891@197.210.77.213)
[23:14:48] <grym> boxelephant: i'm trying to find the current LDT member list now :P
[23:15:54] *** Joins: LucaTM (~LucaTM@user/lucatm)
[23:16:01] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Ping timeout: 272 seconds)
[23:17:02] <grym> either way i remember being very impressed with roslyn at the time, and i know lippert was a big part of that
[23:17:33] <boxelephant> yeah i was always impressed by his blog and his writing on design of c#
[23:17:53] *** Joins: atomroflor (~atomroflo@53-13-142-46.pool.kielnet.net)
[23:18:02] <grym> 'wizards and warriors' has lessons i use every day, yeah
[23:18:12] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[23:18:16] <grym> in python, even! he says in a desparate attempt to remain on topic
[23:18:42] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:20:59] <deniska> Previous time I wrote C# was 5 years ago but it was for Windows CE, so naturally it was a 9 years old version at that point (so, 14 years old from now)
[23:21:17] <deniska> it had linq \o/
[23:21:20] <taeaad> grym: You seem compliant today.
[23:22:11] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Quit: Client closed)
[23:22:16] *** Joins: KindOne (kindone@user/kindone)
[23:22:40] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[23:23:22] <taeaad> LOL, scruffy dutch dude. What is Larry Wall then?
[23:23:40] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[23:23:54] *** Joins: aporetic (~aporetic@2a01:4b00:89aa:ca00:9d15:12f7:c3b9:8425)
[23:24:05] <KirkMcDonald> taeaad: Scruffy American dude?
[23:24:17] <taeaad> KirkMcDonald: Hmm. Simpler than I thought.
[23:24:40] <taeaad> But you could have said "patchy".
[23:25:03] <KirkMcDonald> Hah.
[23:25:20] <gitesh> What's interactive?
[23:25:27] <gitesh> Interactive means what?
[23:25:42] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[23:25:52] <Yhg1s> gitesh: in what context?
[23:26:09] <gitesh> GUI programming
[23:26:10] *** Joins: audiocat (~audio@2603-8081-1800-0062-c443-e187-bd3c-8096.res6.spectrum.com)
[23:26:10] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[23:26:17] <KirkMcDonald> Generally it means that you give input to the program and it responds, and this is done repeatedly.
[23:26:26] <Yhg1s> gitesh: it usually means you can interact directly. you can change something and see the result.
[23:26:36] <KirkMcDonald> GUI programs tend to be interactive almost by definition.
[23:26:52] <taeaad> The uninteractive shell would be interesting, though. Maybe it would reach the frontpage of news.ycombinator.com.
[23:26:55] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[23:27:04] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[23:27:16] *** Quits: aporetic (~aporetic@2a01:4b00:89aa:ca00:9d15:12f7:c3b9:8425) (Quit: Client closed)
[23:27:21] <grym> taeaad: err?
[23:27:36] <KirkMcDonald> The alternative to an interactive program would be one where e.g. you give input as command-line arguments and then it just runs.
[23:28:29] <KirkMcDonald> `cat foo` is not interactive. `less foo` is.
[23:30:30] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Client Quit)
[23:31:02] <taeaad> grym: Oh no, just the "no name dropping" comment.
[23:31:15] <taeaad> Due diligence.
[23:31:17] <grym> taeaad: didn't want seem more than i am
[23:31:29] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[23:32:43] <taeaad> I still find it strange that good programmers work at Facebook. It's such a terrible company. But hey, there aren't problems laying around everywhere that spit out money when you solve them.
[23:33:00] <taeaad> I also dislike Microsoft. Maybe I am screwed.
[23:33:36] *** Joins: vrt3 (~vrt3@d54C5733D.access.telenet.be)
[23:34:15] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[23:34:37] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[23:35:40] *** Joins: travaldo (~travaldo@159.203.88.148)
[23:35:44] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:35:55] <p-i-> I have one thread populating a dict-of-lists VERY frequently, and another trying to acccess it. The accessing one is stalling.
[23:35:58] <p-i-> How to solve?
[23:36:07] <p-i-> I tried using a multiprocessing.Lock
[23:36:07] <taeaad> I think there should be the League of Homeless Hackers that get paid a grant in exchange for being channel admins on Libera and other such places.
[23:36:14] *** Joins: otto (~otto@109.255.216.213)
[23:36:49] <bjs> p-i-: if it's threads you want a threading.Lock not a multiprocessing.Lock anyway
[23:37:07] <p-i-> Thanks bjs!
[23:37:15] <bjs> p-i-: what do you mean by stalling anyway?
[23:37:26] *** Quits: otto (~otto@109.255.216.213) (Client Quit)
[23:37:31] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Read error: No route to host)
[23:37:55] *** Joins: maxz (~user@fsf/member/maxz)
[23:39:51] *** Joins: P1RATEZ (piratez@user/p1ratez)
[23:41:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:42:04] *** Joins: scadman (~scadman@cpc145252-maid8-2-0-cust473.20-1.cable.virginm.net)
[23:42:19] *** Joins: otto (~otto@109.255.216.213)
[23:45:15] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[23:46:17] *** Quits: maxz (~user@fsf/member/maxz) (Ping timeout: 244 seconds)
[23:46:33] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[23:46:36] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[23:46:48] *** Quits: rhax (~yannick@user/rhax) (Ping timeout: 244 seconds)
[23:46:49] *** Joins: chance (~chance@50.47.109.175)
[23:47:05] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Quit: The Lounge - https://thelounge.chat)
[23:47:07] *** Joins: rhax (~yannick@user/rhax)
[23:47:22] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[23:47:24] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[23:48:13] *** Joins: SebastianM (~seba@user/sebastianm)
[23:49:13] *** Joins: pnoud (~pnoud@user/pnoud)
[23:49:23] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[23:50:49] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:51:26] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Client Quit)
[23:51:40] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[23:51:54] *** Quits: audiocat (~audio@2603-8081-1800-0062-c443-e187-bd3c-8096.res6.spectrum.com) (Ping timeout: 264 seconds)
[23:53:13] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[23:53:23] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[23:53:31] *** Quits: Laibsch (~leggewie@2a01:c22:b487:5b00:f277:e31c:10f1:a045) (Ping timeout: 244 seconds)
[23:53:58] <xaltsc> Hey, I'm trying to add type hints to an existing codebase and I'm checking them with mypy, however, the cli usage of mypy puzzles me. I'm adding incrementally type hints to files and trying to check them by specifying the corresponding file OR module to mypy, but mypy seem to check (almost) everything.
[23:54:17] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[23:54:17] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Client Quit)
[23:54:30] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[23:54:35] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[23:54:44] *** Joins: Laibsch (~leggewie@dynamic-093-131-166-036.93.131.pool.telefonica.de)
[23:55:18] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Read error: Connection reset by peer)
[23:55:22] <xaltsc> The behaviour also changes depending on wheter I've enabled the venv or not
[23:58:12] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[23:59:16] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:59:44] <theseb> anyone ever had trouble installing virtualenv on ubuntu 20.04?  I'm having version issues with python-pip-whl
[23:59:57] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[23:59:59] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
