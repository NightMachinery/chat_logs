[00:00:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:00:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:00:47] *** Joins: wroathe (~wroathe@user/wroathe)
[00:02:50] *** Joins: AsenMx (~AsenMx@user/asenmx)
[00:07:49] *** Quits: coodre (~user@105.154.232.88) (Ping timeout: 256 seconds)
[00:10:10] *** Quits: rgrinberg (~textual@187.223.78.219) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:23] *** Quits: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717) (Remote host closed the connection)
[00:13:31] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[00:14:02] *** Joins: Gom189 (~christian@p5de4564b.dip0.t-ipconnect.de)
[00:14:45] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:15:18] *** Quits: Gom189 (~christian@p5de4564b.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[00:15:42] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[00:24:41] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Read error: Connection reset by peer)
[00:25:28] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:26:09] *** Joins: rgrinberg (~textual@187.223.78.219)
[00:27:07] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:27:33] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[00:28:13] *** Quits: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com) (Ping timeout: 256 seconds)
[00:28:40] *** Joins: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com)
[00:31:25] *** Joins: donutfarian (~donutfari@2601:140:9180:5e40:f2fc:59a5:f993:732c)
[00:32:37] *** Quits: rahl (~rahl@102.114.71.28) (Ping timeout: 240 seconds)
[00:34:45] *** Joins: rahl (~rahl@102.114.80.148)
[00:34:47] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[00:36:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:36:20] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:36:31] <joomla5> ``` int a(){ int a = 0; return a; } ``` is this legal use? I assume it is since `int a` is in a new scope and overwrite the `a()` function name. side effect would be a() can't be called recursively anymore?
[00:36:57] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4247:1136:32e9:54c2) (Ping timeout: 240 seconds)
[00:37:17] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:38:27] <fizzie> Yes. (The usual word is "shadow" or "hide" rather than "overwrite" though.)
[00:41:09] <joomla5> i see
[00:41:20] <fizzie> Obligatory standards ref, C11 6.2.1p4: "Within the inner scope, the identifier designates the entity declared in the inner scope; the entity declared in the outer scope is /hidden/ (and not visible) within the inner scope."
[00:44:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:47:02] *** Joins: Teckla_ (~Teckla@user/teckla)
[00:47:38] *** Quits: Teckla (~Teckla@user/teckla) (Ping timeout: 268 seconds)
[00:49:14] * pragma- squints at "hidden (and not visible)"
[00:49:20] *** Quits: alch (~alch@151.68.124.189) (Quit: leaving)
[00:49:36] * pragma- considers writing things like "hot (and not cold)" or "hard (and not soft)" from now on.
[00:49:47] *** Quits: rgrinberg (~textual@187.223.78.219) (Read error: Connection reset by peer)
[00:50:58] *** Joins: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net)
[00:50:59] *** Quits: Teckla_ (~Teckla@user/teckla) (Client Quit)
[00:51:18] *** Joins: Teckla (~Teckla@user/teckla)
[00:51:19] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[00:51:39] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[00:55:01] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[00:55:33] *** Joins: tejr (~tejr@user/tejr)
[00:56:39] <floatcomplex> for indoor or outdoor use only
[00:57:07] <pragma-> so you can't have part of it inside and part of it outside
[00:58:13] <floatcomplex> that's christmas wrecked then
[01:01:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:02:21] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:04:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[01:07:56] *** Quits: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net) (Quit: Client closed)
[01:08:43] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:09:23] *** Joins: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net)
[01:10:43] *** Quits: donutfarian (~donutfari@2601:140:9180:5e40:f2fc:59a5:f993:732c) (Quit: Leaving)
[01:12:44] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[01:13:27] *** immibis_ is now known as immibis
[01:13:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:393a:ffee:2e04:d088)
[01:17:44] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:18:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:18:28] *** Quits: zer0bitz (~zer0bitz@196.244.192.54) (Ping timeout: 268 seconds)
[01:18:51] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[01:19:04] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[01:22:24] *** Quits: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net) (Quit: Client closed)
[01:24:55] *** Joins: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net)
[01:30:25] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:33:25] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[01:33:43] *** Joins: moog (~moog@107.126.53.93)
[01:36:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:36:59] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:37:09] *** Joins: shivesh (~shivesh@user/shivesh)
[01:38:27] *** Joins: bdax (~tom@5.67.43.228)
[01:38:43] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[01:39:11] *** Joins: Cyp (~cyp@213.237.85.9)
[01:39:52] <bdax> what reference do you lot use for c99? A lot of the ones I've been using (man pages, cplusplus.com, etc) have a lot of c++ info mixed in
[01:40:24] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Read error: Connection reset by peer)
[01:40:27] <apotheon> bdax: the last draft of the standard before the ratified version that costs money
[01:40:30] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 265 seconds)
[01:40:31] *** Joins: Rounin (~david@84.212.130.215)
[01:40:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:41:07] <bdax> :| that's pretty hipster, I'm looking for something free and concise
[01:41:18] <bdax> oh 'before it cost money'
[01:41:21] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:41:25] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[01:41:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:41:29] <bdax> is that online?
[01:42:22] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[01:43:12] <bdax> cppreference.com looks alright, even though it's primarily c++
[01:43:27] <pnbeast> bdax, have you looked at the /topic?
[01:43:48] <bdax> ah no, didn't notice that, thanks
[01:44:23] <vdamewood> bdax: I've heard that cplusplus.com has problems with factual errors.
[01:45:57] <floatcomplex> c++ and c have practically unrelated type systems at this point, i would not learn how c functions work by looking at a c++ aligned reference for them even if it were correct
[01:46:04] <bdax> yeah that's why I ask really, I've been coming across a few of those
[01:46:37] *** Quits: mahmutov (~mahmutov@5.176.63.70) (Ping timeout: 240 seconds)
[01:46:45] <floatcomplex> google n2731.pdf
[01:47:03] <fizzie> cppreference.com's C reference isn't IME in any way "C++-aligned".
[01:47:31] <floatcomplex> fizzie: ?
[01:47:58] <floatcomplex> oh i see what you're referring to
[01:48:23] <fizzie> (cplusplus.com is a very different matter though.)
[01:49:26] <fizzie> I do mostly just refer to the standard's drafts, but the times I've looked at cppreference.com's C subsection I've not come across any mistakes. And it's got a pretty nice presentation.
[01:50:27] <floatcomplex> is n1548 the final c11 draft? n2731 is in my muscle memory but the c11 draft is not, for some reason
[01:50:42] <fizzie> N1570, I think.
[01:51:10] <floatcomplex> glad i asked. first google result is n1548 ffs
[01:51:21] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:52:52] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:15] <fizzie> There's also a weird thing that the C18 draft (says N2176 on the page headers) disappeared from the open-std.org website at some point. It used to be on there, called "c17_updated_proposed_fdis.pdf", but at some point when it became final, they got rid of it.
[01:53:31] *** Quits: magla (~gelignite@55d48f64.access.ecotel.net) (Quit: Stay safe!)
[01:55:43] *** Quits: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net) (Quit: Client closed)
[01:56:48] *** Joins: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net)
[01:57:28] <pragma-> ,c11
[01:57:28] <candide> C1X/C11 draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf - C1X Charter: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf - C1X Overview: http://en.wikipedia.org/wiki/C1X - Changes from C99: http://en.wikipedia.org/wiki/C1X#Changes_from_C99 - C Overview: http://en.wikipedia.org/wiki/C_programming - HTML draft: http://port70.net/~nsz/c/c11/n1570.html
[01:59:31] <floatcomplex> link buffer overflow
[01:59:51] *** Quits: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net) (Client Quit)
[02:04:17] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[02:13:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[02:16:43] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[02:25:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:28:35] *** Joins: u0_a3912 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[02:29:23] *** Joins: Betal (~Betal@user/betal)
[02:31:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:32:13] *** Quits: u0_a3911 (~u0_a391@2600:380:5822:b031:de78:595:82e8:a8) (Ping timeout: 240 seconds)
[02:32:19] *** Quits: imp (~imp@192-141-191-232.alternativaip.net.br) (Quit: imp)
[02:32:44] *** Quits: pizdets_ (~pizdets@183.182.110.125) (Ping timeout: 250 seconds)
[02:33:21] *** Joins: constxd (~brad@142.134.38.68)
[02:33:53] *** Joins: pizdets (~pizdets@183.182.111.87)
[02:35:47] *** Quits: bdax (~tom@5.67.43.228) (Remote host closed the connection)
[02:36:10] *** Joins: bdax (~tom@5.67.43.228)
[02:36:46] *** Joins: vysn (~vysn@user/vysn)
[02:37:04] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[02:37:17] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[02:39:45] *** Joins: johnnyreb (~tth@user/johnnyreb)
[02:45:39] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:47:48] *** Quits: paulo (paulo@user/paulo/x-9032687) (Quit: ZNC 1.8.2 - https://znc.in)
[02:52:13] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:53:22] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[02:54:02] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[02:57:06] *** Joins: mikess (~sam@user/mikess)
[02:58:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-54-251.cspire.com)
[03:00:27] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:02:24] <nomagno> Does casting an unsigned int to an unsigned char keep the least significant part, or does it have some other behaviour?
[03:03:33] <nomagno> So, is (char)11010110 11111111 = 11111111
[03:03:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:04:31] <caze> nomagno: It repeatedly subtracts UCHAR_MAX until the value is in range.
[03:04:40] <nomagno> (In binary, for clarity)
[03:04:51] <caze> nomagno: Binary makes it less clear.
[03:05:07] <cousteau> UCHAR_MAX+1
[03:05:18] <nomagno> caze: That's dumb, but I guess I'll have to do an AND to strip off the higher bits first
[03:05:41] <cousteau> nomagno: yeah, it wraps modulo UCHAR_MAX+1
[03:06:12] <cousteau> also, it doesn't actually "repeatedly subtract UCHAR_MAX+1", but the effect is as if that had been done
[03:06:40] <caze> It is literally described as repeatedly subtracting.
[03:06:42] <cousteau> the result is the same as doing 11010110 11111111 % 1 00000000
[03:07:02] <cousteau> caze: yeah, I was just clarifying that the processor won't actually do that
[03:07:43] *** Joins: johnnyreb (~tth@user/johnnyreb)
[03:08:01] *** Joins: paulo (paulo@user/paulo/x-9032687)
[03:08:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:08:20] <cousteau> if UCHAR_MAX in binary is all ones (which I think the standard mandates), then (unsigned char)x will give you x & UCHAR_MAX
[03:08:34] <fizzie> The `(char)` in the latter part of the question is confusingly not a cast to `unsigned char` though.
[03:08:36] <cousteau> i.e., x % (UCHAR_MAX+1)
[03:09:07] <cousteau> ...yeah also keep in mind that char may not be the same as unsigned char
[03:09:32] <cousteau> and if it's signed, well, I think the standard only says that the conversion "is implementation-defined" if it doesn't fit in the range
[03:10:08] <nomagno> Fair, I'll just use uint8_t and uint16_t and do an AND to strip off the higher bits off the uint16_t
[03:10:51] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[03:10:59] <cousteau> the conversion should have the same effect as the AND though
[03:11:19] <caze> nomagno: You could do the same with unsigned int.
[03:11:25] <cousteau> but it doesn't hurt to be explicit, specially since the compiler will probably do the sane thing anyway
[03:13:04] <nomagno> case: eh, I care about the sizes in this case but I know
[03:13:05] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:13:27] <fizzie> It kind of was said already, but just to rephrase it one more time; "repeatedly adding or subtracting one more than the maximum value that can be represented in the new type" is the standard's representation-agnostic way of describing the effect of the conversion on the mathematical value of the expression. For a conversion from an unsigned type to another smaller unsigned type, that's equivalent to
[03:13:29] <fizzie> keeping the least significant bits.
[03:14:00] <cousteau> at least if the unsigned type's max is all bits set to one
[03:14:12] <fizzie> It has to be.
[03:14:17] <cousteau> which is guaranteed for unsigneed char, but not sure for other types
[03:14:23] <cousteau> there could be trap representations
[03:14:34] <fizzie> Not in a way that would affect that.
[03:14:47] <cousteau> and padding bits maybe
[03:14:48] <cousteau> no?
[03:15:03] <fizzie> The maximum value for an unsigned type is the value that has all the value bits set to one.
[03:15:22] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 260 seconds)
[03:15:23] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:16:23] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[03:16:26] <fizzie> C11 6.2.6.2p1: "For unsigned integer types other than `unsigned char`, the bits of the object representation shall be divided into -- value bits and padding bits --. If there are N value bits, each bit shall represent a different power of 2 between 1 and 2^{N-1}, so that objects of that type shall be capable of representing values from 0 to 2^N-1 using a pure binary representation; --"
[03:17:17] <fizzie> It's quite clear that the value range of any unsigned type is from 0 to 2^N-1 for some integer N, and therefore "one more than the maximum value that can be represented" is exactly 2^N, and repeatedly adding/subtracting it will keep the N least significant bits unchanged.
[03:17:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:19:13] <fizzie> N might not be sizeof (type) * CHAR_BIT because of the padding bits, and some specific values for the padding bits might be trap representations (a parity bit always keeps being brought up), but that doesn't change the fact the value range is still some power of 2 in size.
[03:19:17] <cousteau> fizzie: yep, just found that.  My bad.
[03:20:02] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-030.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[03:20:26] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-030.client.tudelft.eduvpn.nl)
[03:21:31] <fizzie> I really need to do some sort of a patch to either my PDF viewer or the PDF to make that C23 draft TOC start working again. :/
[03:22:32] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[03:23:07] *** Joins: johnnyreb (~tth@user/johnnyreb)
[03:24:28] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:25:14] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[03:25:45] <floatcomplex> if you get on the committee just to get them to fix their pdf can you also vote no on defer
[03:27:04] <fizzie> Not going to try, but also feeling kind of hopeful it just won't be ready for C23 anyway.
[03:27:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:28:03] <fizzie> There was a comment from the Editor somewhere saying if people _want_ defer in C23, someone should go write a high-quality compiler implementation soon, which on its own didn't sound all that likely to happen.
[03:28:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Client Quit)
[03:29:32] <fizzie> Re the TOC, for me it just shows þÿ (latin small letter thorn, latin small letter y with diaeresis), and I'm entirely convinced that's because those letters are U+00FE and U+00FF respectively, and U+FEFF is the dedicated Unicode byte-order mark character, so it's some sort of an attempt to indicate it'd in UTF-16 (or maybe just UCS-2?) that my PDF reader's just interpreting as ISO-8859-1.
[03:29:34] <caze> What's defer?
[03:30:01] <fizzie> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2589.pdf I think.
[03:30:28] <fizzie> Although for that comment about getting a quality implementation, I may be mixing up defer and the closures, both of which I'm counting under "fancy" features.
[03:31:17] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[03:32:04] *** Quits: black_13 (~jjosb@cpe-173-174-194-178.satx.res.rr.com) (Quit: Leaving)
[03:32:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:33:07] *** Quits: Akuli (~Akuli@87-94-109-68.bb.dnainternet.fi) (Quit: Akuli)
[03:33:20] *** Joins: johnnyreb (~tth@user/johnnyreb)
[03:33:32] *** Joins: oafish (~oafish@2a05:f480:2000:1325::)
[03:34:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:35:33] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[03:35:50] *** Joins: diiirt (~diiirt@user/diiirt)
[03:36:03] *** Quits: travankor (travankor@user/travankor) (Remote host closed the connection)
[03:36:25] *** Joins: Wulf (~Wulf@user/wulf)
[03:38:22] <cousteau> fizzie: oh wow, still the þÿ issue?
[03:38:52] <cousteau> I reemmber some browsers would just show the titles with þÿ at the beginning, other PDF viewers would only show the þÿ and no title at all
[03:39:05] <cousteau> ...why don't they just use LaTeX or Word or something?
[03:39:22] <fizzie> I believe they do use LaTeX now.
[03:39:48] <cousteau> why don't they use it right?
[03:39:59] <fizzie> Because computers are hard, I imagine.
[03:40:30] * Feuermagier pets candide 
[03:40:36] * candide bats its eyes at F​euermagier
[03:40:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[03:41:00] <fizzie> Anyway, now that I was sufficiently annoyed to complain, I also did figure out how to fix it. :)
[03:41:20] <fizzie> In case it's useful for anyone else: pdftk c2x-n2731-orig.pdf dump_data output n2731-info.txt; sed -i -e 's|&#254;&#255;||' n2731-info.txt; pdftk c2x-n2731-orig.pdf update_info n2731-info.txt output c2x-n2731.pdf
[03:41:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:41:40] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-030.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[03:43:04] <floatcomplex> the non-compiler-based "reference" impl of defer i saw was pure madness
[03:43:16] <floatcomplex> but the proposed language feature itself is madness
[03:43:54] <Teckla> floatcomplex: Why is it madness?
[03:44:29] <floatcomplex> if it's sufficiently distinct from gcc attribute cleanup for the latter to be considered not a sufficient precedent for it, then it should either be reworked so it is, or punted another decade
[03:44:47] <floatcomplex> or vetoed with prejudice
[03:45:45] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[03:46:03] *** Joins: ns12 (~ns12@user/ns12)
[03:46:30] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:48:19] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[03:48:28] <floatcomplex> wtf happened to the standard codifying existing extensions in widespread use
[03:48:45] <floatcomplex> how did this much effort go into documenting defer when it was not that
[03:48:57] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 240 seconds)
[03:51:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:57:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[03:58:50] *** Quits: acerbic (~acerbic@cs-xdata-50-86-54-251.cspire.com) (Read error: Connection reset by peer)
[04:02:56] *** Joins: reset (~reset@user/reset)
[04:03:06] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:08:41] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[04:09:26] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:10:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[04:11:17] <floatcomplex> i must stop this language feature from coming...but how?
[04:11:38] <pony> you could fork C /s
[04:12:34] <jjido> Why the hate for defer?
[04:12:49] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[04:13:12] <nomagno> You can't fork C, because the C devs weren't as nice as the Ada devs, and you can't even redistribute the C standard
[04:13:36] <nomagno> The US gov actually stamped ada with a reasonable-ish permissive license
[04:15:28] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[04:19:28] <floatcomplex> jjido: some of my most frustrating moments debugging other people's c++ code have been in trying to figure our where and/or whether a destructor was being called, ie when the compiler was inserting invisible calls to a method, and which of those invisible calls was being hit, in what sequence with other code. i would rather c not have the same problem
[04:20:20] <jjido> invisible calls? Er is that what defer gives us?
[04:20:31] *** Joins: acerbic (~acerbic@cs-xdata-50-86-54-251.cspire.com)
[04:20:53] <floatcomplex> one of the best reasons to write important code in c is because a large portion of the people who know c can debug a large portion of written c. introducing language features such as defer is directly contrary to that property of the language
[04:22:21] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[04:22:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:24:26] <jjido> defer free(p); // if that's the syntax the call is rather explicit
[04:24:45] *** Quits: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:25:07] <floatcomplex> where it happens is not
[04:25:24] <floatcomplex> specifically, where in relation to what other code
[04:25:41] <floatcomplex> at runtime
[04:28:27] <pragma-> i haven't read anything about C's defer but i would expect it to be block scoped
[04:29:21] <pnbeast> nomagno, I've been trying to fork C for 17 years and the lawyers just keeping tying me up in court.  It's horrible.
[04:32:23] <floatcomplex> not sure how you define "fork c" other than do your own implementation of c, or start with an existing impl, and add whatever extensions you want
[04:33:01] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:33:01] *** Quits: acerbic (~acerbic@cs-xdata-50-86-54-251.cspire.com) (Read error: Connection reset by peer)
[04:33:39] <floatcomplex> frankly i think the people on the part of the dunning kruger curve where they think writing their own programming language is a good idea, should instead do this
[04:34:23] *** Joins: Wulf (~Wulf@user/wulf)
[04:34:52] <nomagno> floatcomplex: For starters, being able to modify the text of the standard.
[04:34:58] <nomagno> That's what I would call a "fork"
[04:35:05] <jjido> ++
[04:35:07] <floatcomplex> why do you want to do that?
[04:35:37] <nomagno> For use in documentation, or to make my own dialect of C standardized
[04:35:56] <nomagno> Ada allows you to do whatever the heck you want with its text as long as you VERY CLEARLY mark modifications
[04:37:00] <pnbeast> nomagno, perhaps it's just me, but "my own" != "standardized", pretty much by definition.  If you said "documented", maybe.  In the end, *your* C will not be standardized, at least not for years and years, even if the standard C goes off the rails.
[04:37:55] <nomagno> pnbeast: You can modify the text of the standard to detail your version of C. I see no issue with it
[04:37:57] <floatcomplex> just document it as being "n1570 with the following listed modifications"
[04:38:21] <nomagno> floatcomplex: A patchfile sounds better than that honestly
[04:38:25] <pnbeast> nomagno, great, then we agree.
[04:38:44] <figrita> i need a way to make a continuous (looping) RGB color ramp that takes a single parameter
[04:39:27] <nomagno> figrita: Do you have the driver for the lamp already?
[04:39:33] <nomagno> That's harder than the actual loop
[04:40:28] <figrita> im modifying a tint parameter, not making a physical thing
[04:40:38] <figrita> http://applied-r.com/color-ramp-functions/
[04:41:57] *** Quits: bdax (~tom@5.67.43.228) (Ping timeout: 240 seconds)
[04:44:47] <jjido> I found this: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2542.pdf
[04:47:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:47:46] <figrita> I'm gonna use this HSV to RGB function from https://lodev.org/cgtutor/color.html and just (frame % 255) for the hue
[04:47:48] <candide> Title of figrita's link: Light and Color
[04:50:34] <DarkUranium> You mean frame & 255?
[04:53:07] *** Joins: bdax (~tom@5.67.43.228)
[04:55:33] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[04:55:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[04:56:11] *** Joins: teepee (~teepee@openscad/teepee)
[04:56:49] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:59:45] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:02:53] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:04:28] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:04:31] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:07:16] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community: https://indiedevs.net/)
[05:08:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[05:09:48] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[05:14:45] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:15:26] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[05:17:09] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[05:17:53] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[05:17:58] *** Joins: cpuid (~cpuid@co5.at)
[05:17:58] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[05:17:58] *** Joins: cpuid (~cpuid@user/cpuid)
[05:18:34] *** Quits: Guest6406 (~somewhere@122-199-43-68.ip4.superloop.com) (Ping timeout: 260 seconds)
[05:18:37] *** Quits: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com) (Ping timeout: 240 seconds)
[05:19:07] *** Joins: Matheo_bis (~matheo@user/matheo-bis/x-4309430)
[05:19:20] *** Joins: horribleprogram (~user@user/horribleprogram)
[05:19:35] <horribleprogram> never thought I'd need to ask a question herte ever again
[05:20:13] <horribleprogram> I've moved on to C++, and noticed that my code is much more type-safe, and at least as fast
[05:20:46] <horribleprogram> anyways
[05:21:07] <horribleprogram> I'm wondering if there's a way to initialize a struct by memory alone
[05:21:45] *** Quits: bdax (~tom@5.67.43.228) (Quit: bdax)
[05:21:45] <horribleprogram> typedef struct { ..... } MyStruct; MyStruct x = (MyStruct) ...
[05:21:59] <horribleprogram> so let's say ur reading a file
[05:22:03] *** Quits: Matheo_bis (~matheo@user/matheo-bis/x-4309430) (Client Quit)
[05:22:11] <horribleprogram> uk the first sizeof(MyStruct) bytes are a struct.
[05:22:16] <horribleprogram> Elf files have this... for ex
[05:22:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:22:38] <horribleprogram> where the first 64 bytes or 52 bytes, depending on 64-bit or 32-bit ELF, are the Elf64_Ehdr struct
[05:22:53] <ioxzev1z> ...
[05:22:57] <horribleprogram> ioxzev1z: wat
[05:23:03] <nomagno> That's ABI-dependent
[05:23:14] <horribleprogram> ffs
[05:23:16] <nomagno> You should be able to... Well not "safely", but reliably do that
[05:23:17] <horribleprogram> my example
[05:23:20] <horribleprogram> was an example
[05:23:21] *** Joins: Haxxa (~Haxxa@122-199-29-168.ip4.superloop.com)
[05:23:32] <ioxzev1z> ,c++ horribleprogram 
[05:23:32] <candide> horribleprogram: If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[05:23:37] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[05:23:37] <horribleprogram> dude
[05:23:53] <horribleprogram> just pretend I'm writing C
[05:23:58] <horribleprogram> for the sake of my question
[05:23:58] <ioxzev1z> no u
[05:24:03] <horribleprogram> listen
[05:24:06] <horribleprogram> how would I ask it
[05:24:08] <horribleprogram> cast it
[05:24:13] <horribleprogram> would it be pointer?
[05:24:17] <ioxzev1z> static_cast
[05:24:17] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[05:24:22] <horribleprogram> lol
[05:24:38] <horribleprogram> i'm stuck in C land for this ex
[05:24:42] <nomagno> horribleprogram: you can use fread() to read bytes, and (MyStruct)arr to cast it
[05:24:48] <horribleprogram> I see
[05:24:49] <ioxzev1z> MyStruct x = static_cast<MyStruct> () or whatever the syntax is
[05:24:56] *** Joins: morte_ (~user@190.104.116.153)
[05:24:59] <nomagno> That's not C
[05:25:00] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[05:25:06] <ioxzev1z> nomagno, he's writing C++
[05:25:08] <horribleprogram> what if the array is on the heap
[05:25:16] <horribleprogram> so u have access to it by a pointer
[05:25:25] <horribleprogram> would (MyStruct*)arr be equivalent?
[05:25:32] <horribleprogram> if arr is a pointer to MyStruct
[05:25:33] <horribleprogram> for ex
[05:25:36] <ioxzev1z> ,c++ horribleprogram 
[05:25:36] <candide> horribleprogram: If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[05:25:42] <horribleprogram> ffs
[05:25:44] *** Joins: etolier (~somewhere@202-63-77-120.ip4.superloop.com)
[05:25:49] <horribleprogram> how is that C++ quesiton
[05:25:55] <ioxzev1z> bru u askin wrong channel
[05:25:58] <horribleprogram> I even worded it "heap" instead of "free store"
[05:26:04] <ioxzev1z> Read the first line of that above
[05:26:08] *** etolier is now known as Guest3589
[05:26:24] <horribleprogram> ioxzev1z: u don't like me cuz I'm a C++ coder
[05:26:27] <horribleprogram> that's what this is
[05:26:33] <ioxzev1z> naw braw, just giving you some advice
[05:26:36] <horribleprogram> ik
[05:26:41] <horribleprogram> but still u clearly don't like me
[05:26:41] <nomagno> horrible: if the array is on the heap, and you're sure it is a VLA or whatever, you probably want to memcpy it to a static size array then cast it
[05:26:54] <horribleprogram> nomagno: i see
[05:27:22] <ioxzev1z> can't you pass an array to std::vector or something to make a copy?
[05:27:31] <horribleprogram> yeah copy ctor
[05:27:34] <horribleprogram> I got this
[05:27:35] <ioxzev1z> Right, so do that
[05:27:39] <horribleprogram> ty
[05:27:39] *** Joins: morte_ (~user@190.104.116.153)
[05:27:43] <horribleprogram> ioxzev1z: ty :P
[05:27:47] <horribleprogram> nomagno: ty :P
[05:27:50] <ioxzev1z> And that is clearly not C
[05:28:02] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[05:28:06] <horribleprogram> i never said C++
[05:28:09] <ioxzev1z> Yes you did
[05:28:11] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[05:28:15] <horribleprogram> I was saying if u wanted to implement ur own function
[05:28:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[05:28:26] <horribleprogram> in an event handling scenario
[05:28:34] <horribleprogram> such that u'd use it instead of memcpy
[05:28:42] <horribleprogram> that would automatically copy
[05:28:57] <ioxzev1z> Just because they share the letter C doesn't mean that C and C++ are the same. They went separate ways a long time ago
[05:29:04] <horribleprogram> says u
[05:29:09] <ioxzev1z> All of my wat
[05:29:09] <horribleprogram> my C++ code is better than any C code
[05:29:49] <horribleprogram> template metaprogramming is better than #define
[05:30:06] <horribleprogram> or at least... as efficient
[05:30:14] <ioxzev1z> ...
[05:30:20] <horribleprogram> the only thing not as efficient is virtual dispatching
[05:30:25] <nomagno> horribleprogram: Any two turing machines are equivalents and blah blah, summary: stop complaining and get coding!
[05:30:39] <horribleprogram> I'm not complaining he has some sort of C++ hate
[05:30:43] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[05:30:43] <ioxzev1z> The logical jump from C is to Rust, not C++
[05:30:51] <ioxzev1z> Also I don't hate C++
[05:30:53] *** Joins: morte_ (~user@190.104.116.153)
[05:30:53] <horribleprogram> shoulda went there to ask questions, they are much smarter than all of u anyways
[05:30:58] <ioxzev1z> ...
[05:31:02] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[05:31:05] <nomagno> ioxzev1z: Don't make me open Pandora's box with rust
[05:31:18] <ioxzev1z> But muh safe code
[05:31:20] <horribleprogram> Rust is for losers
[05:31:24] <horribleprogram> C++20 introduced concepts
[05:31:34] *** Joins: morte_ (~user@190.104.116.153)
[05:31:34] <horribleprogram> it's fine
[05:31:39] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[05:31:40] <nomagno> Anyhow I hate C++, but not with enough or a burning passion to protest other people using it.
[05:32:07] <horribleprogram> nomagno: yeah well I hate Rust with enough of a burning passion to protect other people using it
[05:32:14] <horribleprogram> just scared tbh
[05:32:22] <horribleprogram> I don't want all my studying of C++ to go down the tubes
[05:32:31] <horribleprogram> cuz people transition over to Rust :'(
[05:32:38] <ioxzev1z> horribleprogram, not sure how much advice you should give considering that you don't even realize that you're using a different language to C but came here to ask questions
[05:32:41] <horribleprogram> I'm scared... which makes me angry... which makes me hateful
[05:32:48] <nomagno> Some people seem to be quite happying writing 6502 assembly to this day
[05:32:53] <nomagno> So I wouldn't worry about thay
[05:32:57] <horribleprogram> ioxzev1z: dude if u want to fight me 1v1 in chess.com or w/e just tell me
[05:32:58] <nomagno> s/thay/that/
[05:33:03] <ioxzev1z> L O L
[05:33:05] <horribleprogram> but I'm done with u
[05:33:09] <ioxzev1z> Virtual fisticuffs
[05:33:16] <horribleprogram> sure name a time and place
[05:33:28] <horribleprogram> 1v1 me dust 2
[05:33:34] <horribleprogram> :P
[05:33:59] <nomagno> Final destination no items fox ditto?
[05:34:25] <horribleprogram> ew no
[05:34:39] <horribleprogram> the original
[05:34:44] <horribleprogram> super smash bros
[05:35:10] <horribleprogram> Fox is OP in the oirignal too
[05:35:13] <horribleprogram> with those long ass lazers
[05:35:36] <horribleprogram> 1v1 me in Robbing Tom Nook... quickest one to make him pay up $10,000 bells
[05:35:42] <nomagno> SM64 sux, fox 1v1 final destination no items in melee
[05:35:48] <horribleprogram> for all the slavery tasks he made us do
[05:36:03] <horribleprogram> bro I beat the 2 hands with peach
[05:36:07] <horribleprogram> in Melee
[05:36:10] <nomagno> Anyhow I gotta go port a C compiler to my C VM for my custom CPU
[05:36:18] <horribleprogram> yeah w/e get lost
[05:36:25] <nomagno> bye!
[05:36:30] <horribleprogram> merry christmas btw
[05:36:33] <horribleprogram> ty
[05:36:40] <horribleprogram> take care my friend
[05:36:52] <nomagno> Merry chistmass... Wait it's December 26th here!
[05:37:09] <horribleprogram> that's my bday
[05:37:11] <horribleprogram> :P
[05:37:18] <horribleprogram> it's my bday where u are
[05:37:19] <horribleprogram> :)
[05:37:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:41:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:42:09] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 256 seconds)
[05:44:06] *** Joins: constxd (~brad@142.134.38.68)
[05:45:08] *** Joins: newpy (~newpy@206.168.231.90)
[05:46:09] <newpy> I have a makefile with HEADERS= $(wildcard kernel/*.h drivers/*.h)
[05:46:17] <horribleprogram> go on
[05:46:30] <newpy> and a target %.o : %.c ${HEADERS}
[05:46:49] <newpy> gcc ... -c $< -o $@
[05:47:07] <newpy> I thought that would make it so I don't have to manually #include headers in the .c files?
[05:47:38] <ioxzev1z> ...
[05:47:40] <horribleprogram> are u absolutely nuts? 
[05:47:54] <constxd> based
[05:47:56] <ioxzev1z> newpy, that... that's not correct
[05:48:16] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:48:50] <newpy> ioxzev1z, can you explain what ${HEADERS} does?
[05:49:15] <horribleprogram> it's a variable expansion
[05:49:17] <fizzie> All that does is tell Make any `foo.o` file must be recompiled if any of those header files change.
[05:49:28] <newpy> oh I see
[05:49:48] <ioxzev1z> Not sure why manually including headers is a problem
[05:49:59] <ioxzev1z> Usually when you write your .c you only include what that .c needs
[05:51:05] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[05:51:07] <constxd> this is what you need king
[05:51:09] <fizzie> (The command line in the rule doesn't include the headers -- $< is only the first prerequisite, not all of them -- so it can't really affect how the compilation goes, just what Make will or won't do.)
[05:52:05] <newpy> well let's say I have a file ./drivers/screen.c and I want to include ./kernel/low_level.h
[05:52:22] <newpy> I quickly did #include "../kernel/low_level.h" but I know that's bad form
[05:52:35] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[05:52:42] <newpy> is the only other way to edit env path?
[05:52:54] <horribleprogram> are u from python?
[05:53:01] *** Joins: kish` (~sid742412@user/aqua)
[05:53:06] <horribleprogram> just out of curiosity it's not a idss
[05:53:07] <horribleprogram> diss*
[05:53:08] <newpy> yes hence the name
[05:53:30] <horribleprogram> ahh
[05:53:55] <horribleprogram> kk so Python does these sort of relative module imports and it's actually a good way to structure certain packages
[05:54:17] <ioxzev1z> newpy, have you considered using SCons by any chance?
[05:54:21] <ioxzev1z> Make is a dinosaur
[05:54:24] *** Joins: johnnyreb (~tth@user/johnnyreb)
[05:54:26] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[05:54:36] <horribleprogram> this is because Python uses the actual file's directory to make certain relative module imports
[05:54:37] <newpy> ioxzev1z, my class will probably use make so I will stick with that for now
[05:54:44] <ioxzev1z> Ok
[05:55:21] <newpy> horribleprogram, yes I was actually surprised it worked in C
[05:55:23] *** Quits: gce108_ (~gce@64-250-5-223.gvec.net) (Quit: Leaving)
[05:55:41] <horribleprogram> no it works don't get me wrong
[05:55:43] <fizzie> It's kind of up to you how to organize your build. But a reasonably common convention is to use include paths relative to a project root of some sorts (so you'd do `#include "kernel/low_level.h"`) and have your build system pass in a -I option naming that root directory. Unless you want to start being more explicit about dependencies between subcomponents of the project.
[05:55:52] <horribleprogram> but u usually just add certain paths to the "system include path"
[05:56:04] <horribleprogram> ^ what fizzie said
[05:56:28] *** Joins: gce108 (~gce@user/gce108)
[05:56:41] <fizzie> (At which point you might compile things into separate libraries, and have their "public" includes be in a separate directory that gets added to the include path only when needed.)
[05:56:48] <ioxzev1z> newpy, could have src/ for .c, src/hdr/ for .h, so you can then #include "hdr/foo.h", or "hdr/kernel/low_level.h", etc
[05:57:02] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 240 seconds)
[05:57:13] <ioxzev1z> Can also s/hdr/include/ on the above or something
[05:58:33] <newpy> can I do "-I ." to use the directory I run make from?
[05:58:48] <fizzie> If that's the directory you also run the compiler in.
[05:59:00] <fizzie> (As in, you don't do recursive invocation of `make` for subdirectories or anything.)
[05:59:15] <constxd> %.o: %.c ${HEADERS}
[05:59:28] <constxd>         cat $^ | gcc -c -xc -
[05:59:47] <newpy> lol
[05:59:50] <constxd>         cat $^ | gcc -o $@ -c -xc -
[05:59:54] <constxd> fixed it
[06:00:03] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[06:00:06] <fizzie> If you _really_ wanted to do something like that, I'd hope you'd build a command line with `-include` rather than use a cat.
[06:00:16] *** Joins: tm512 (~tm512@50.53.132.213)
[06:00:20] *** Quits: tm512 (~tm512@50.53.132.213) (Changing host)
[06:00:20] *** Joins: tm512 (~tm512@user/tm512)
[06:00:23] <ioxzev1z> A cat
[06:00:31] <pragma-> Ah, a dog person.
[06:00:34] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[06:00:51] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 256 seconds)
[06:02:16] <fizzie> (The `-include /file/` option for GCC means: "Process /file/ as if `#include "file"` appeared as the first line of the primary source file [except searched for in the current working directory]." But it'd be a pretty unconventional thing to do to have Make force-feed include files into a program.)
[06:03:00] <newpy> I had another question actually, if some one could help me understand this link.ld for ld -T https://github.com/ajaysa/MyOS_Blundell/blob/master/link.ld
[06:04:21] <ioxzev1z> Own OS? Remember writing that kind of project years ago
[06:04:25] <ioxzev1z> Thems is some good learning
[06:04:32] <newpy> yea just skimming the boot section
[06:04:37] <newpy> going to use grub afterwards
[06:04:38] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[06:06:14] <fizzie> As far as linker scripts go, that looks about as simple as it can possibly get.
[06:09:22] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[06:09:43] *** Joins: goddard (~goddard@user/goddard)
[06:12:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[06:12:45] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:13:32] <newpy> fizzie, well I believe there is a kernel_entry.o and kernel.o, I'm curious how it knows to put kernel_entry.o at 0x1000 and not kernel.o
[06:13:42] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:13:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:14:36] <fizzie> Perhaps it simply takes care of passing the input files to the linker in the right order.
[06:14:53] <newpy> ah yes it does, I wasn't sure if that's how it worked
[06:14:54] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Read error: Connection reset by peer)
[06:15:56] <fizzie> Yeah, `*(.text)` means roughly "all .text sections from input files that have not been allocated anywhere yet, in the order they appear in the input files".
[06:16:11] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[06:17:31] <fizzie> (Though it's not uncommon to use a different section name to specify the code that needs to go in first, so that you don't _have_ to be that careful about input file order.)
[06:21:07] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:22:20] <newpy> gotta go, I'll be back later
[06:22:22] <newpy> ty for the help
[06:22:27] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[06:23:31] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[06:23:59] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:25:05] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:30:03] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Quit: Bye, bye)
[06:34:17] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:36:00] *** Joins: johnnyreb (~tth@user/johnnyreb)
[06:38:57] *** Quits: AmR (~AmREiSa@156.199.236.68) (Ping timeout: 240 seconds)
[06:39:23] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[06:39:53] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:40:26] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:43:28] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:50:16] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[06:51:03] *** Joins: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net)
[06:52:17] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:07] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[06:54:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:56:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:04:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:05:10] *** Quits: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:05:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[07:09:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:14:17] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[07:29:59] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:32:46] *** Joins: Colt_ (~Colt@user/colt)
[07:34:39] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:35:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:35:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:35:39] *** Joins: wroathe (~wroathe@user/wroathe)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:43:57] *** Joins: u0_a3913 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:44:27] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[07:45:56] *** Quits: u0_a3912 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 252 seconds)
[07:58:56] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:59:06] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[08:02:56] *** Joins: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:09:10] *** Joins: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net)
[08:09:40] *** Quits: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:14:36] *** Joins: KevChang (~kev@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:15:07] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[08:21:49] *** KevChang is now known as KevChang2020
[08:26:43] *** Quits: KevChang2020 (~kev@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:28:26] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[08:28:32] *** Joins: frost (~frost@user/frost)
[08:32:56] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:33:32] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[08:35:30] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Quit: Leaving)
[08:46:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:59:02] *** Quits: piku (~piku@47.202.113.8) (Quit: Leaving)
[09:07:14] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:08:33] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au)
[09:09:07] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[09:09:30] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au)
[09:10:41] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[09:14:04] *** Joins: kdc (~kdc@196.211.197.159)
[09:19:37] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:22:56] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:23:02] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:23:35] *** Quits: Kerr (~Kerr@c-73-254-199-158.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:27:38] *** Quits: Haxxa (~Haxxa@122-199-29-168.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:29:16] *** Joins: Haxxa (~Haxxa@122-199-29-168.ip4.superloop.com)
[09:31:07] *** Joins: Kerr (~Kerr@166.205.87.81)
[09:31:20] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:39:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:39:15] *** Joins: j-james (~apropos@24.48.222.83)
[09:40:47] *** Joins: rgrinberg (~textual@177.246.221.189)
[09:45:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:45:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:45:07] *** Joins: wroathe (~wroathe@user/wroathe)
[09:47:05] *** Quits: Kerr (~Kerr@166.205.87.81) (Quit: Client closed)
[09:49:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:50:57] *** Quits: horribleprogram (~user@user/horribleprogram) (Ping timeout: 240 seconds)
[09:51:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:52:30] *** Joins: Kerr (~Kerr@166.205.87.81)
[09:53:20] *** Joins: vysn (~vysn@user/vysn)
[09:59:01] *** Quits: Kerr (~Kerr@166.205.87.81) (Quit: Client closed)
[10:02:17] *** Joins: Kerr (~Kerr@166.205.87.81)
[10:02:25] *** Quits: Kerr (~Kerr@166.205.87.81) (Client Quit)
[10:02:38] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 268 seconds)
[10:08:29] *** Joins: manjaroi3 (~manjaro-i@112.169.116.78)
[10:09:35] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[10:10:52] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[10:11:51] *** Joins: horribleprogram (~user@user/horribleprogram)
[10:11:57] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[10:14:41] *** Colt_ is now known as Colt
[10:16:29] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[10:16:46] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Ping timeout: 260 seconds)
[10:17:42] *** Quits: horribleprogram (~user@user/horribleprogram) (Ping timeout: 260 seconds)
[10:18:36] *** Joins: horribleprogram (~user@user/horribleprogram)
[10:23:29] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[10:23:45] *** Joins: horribleprogram (~user@user/horribleprogram)
[10:32:56] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[10:36:31] *** Joins: Akiva (~Akiva@user/Akiva)
[10:40:32] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[10:43:15] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Client Quit)
[10:43:35] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[10:46:56] *** Quits: rgrinberg (~textual@177.246.221.189) (Read error: Connection reset by peer)
[10:48:36] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[10:50:14] *** Joins: freep (~freepppp@77.49.184.64.dsl.dyn.forthnet.gr)
[10:58:17] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 240 seconds)
[11:04:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b9a7:a535:b350:2b5f) (Quit: Quit)
[11:11:00] *** Quits: critr (~critr@user/critr) (Remote host closed the connection)
[11:14:41] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[11:14:56] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[11:15:27] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[11:19:56] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[11:19:59] *** Quits: yo__ (~0xfe0@49.36.186.18) (Read error: Connection reset by peer)
[11:27:06] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[11:29:51] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[11:31:32] <tdmm> Is it possible to use atomic_fetch_sub with memory_order_acquire for loading and memory_order_relaxed for storing?
[11:31:55] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[11:34:03] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 256 seconds)
[11:40:35] <caze> http://www.righto.com/2021/12/reverse-engineering-tiny-1980s-chip.html
[11:42:13] *** Quits: manjaroi3 (~manjaro-i@112.169.116.78) (Ping timeout: 240 seconds)
[11:54:27] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[11:56:44] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:03:26] *** Joins: meator (~meator@user/meator)
[12:11:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:13:01] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:13:33] <nitrix> tdmm, Do you have other threads to worry about for the store?
[12:18:30] <tdmm> nitrix: yes, but they dont depend upon other writes by the current thread (so 'release' doesn't seem necessary)
[12:21:05] *** Joins: travankor (travankor@user/travankor)
[12:21:48] *** Quits: travankor (travankor@user/travankor) (Remote host closed the connection)
[12:22:10] *** Joins: travankor (travankor@user/travankor)
[12:25:48] <nitrix> If your operation was broken down into a fetch and a store perhaps, but the current atomic_fetch_sub classifies as read-modify-write and you wont be able to articulate what you want for both the load and store together. That's because the two memory orders that are capable of controlling both load and store are memory_order_acq_rel and memory_order_seq_cst, both insisting on acquire/release for read-modify-write operations.
[12:26:38] <nitrix> Of course you can tweak just the load, or just the store, but then you still get one incorrectly defaulting to memory_order_seq_cst, aka acquire/release.
[12:26:45] <nitrix> Oh wait, that's the solution.
[12:27:49] <tdmm> nitrix: so if I specify memory_order_acquire, memory_order_consume, or memory_order_release, the unspecified load or store will be memory_order_seq_cst?
[12:28:34] <nitrix> I would need to verify that before I say something stupid.
[12:29:23] <tdmm> Because I couldn't find any info on the defaults (at least anywhere obvious) on cppreference.com
[12:29:49] *** Joins: Rounin (~david@84.212.130.215)
[12:30:18] <nitrix> I think you'd want to just control the store part as relaxed, leaving the load to its default and therefore acquiring, but it's still a mystery to me if that's even possible with an operation like atomic_fetch_sub that classifies as read-modify-write.
[12:30:55] <meator> Hello. Could you recommend some library providing balanced binary search trees?
[12:33:23] <tdmm> nitrix: Ideally, yes, but I'm pretty sure using memory_order_relaxed would result in both load and store becoming relaxed.
[12:33:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:33:49] <nitrix> tdmm, Yep, that one does.
[12:35:00] <tdmm> On x86_64, atomic_fetch_add_explicit with memory_order_acquire simply seems to compile down to `lock xadd`, which makes sense but is hard to pin down in terms of memory ordering.  I'm pretty sure seq_cst would result in fences, so I guess it's effectively acq_rel?
[12:35:25] <john99> umm, someone know with flag i need for enable C17  in CMAKE?
[12:35:28] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:35:31] *** Quits: j-james (~apropos@24.48.222.83) (Quit: leaving)
[12:35:34] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[12:35:41] <john99> i only find references to CXX
[12:36:12] <tdmm> john99: https://cmake.org/cmake/help/latest/prop_tgt/C_STANDARD.html
[12:36:40] <john99> arget "tests" requires the language dialect "C17" (with compiler   extensions), but CMake does not know the compile flags to use to enable it.
[12:37:00] <john99> ufff
[12:37:11] <john99> i wrote CMAKE_C_STANDART
[12:37:15] <john99> okay, thanks
[12:37:18] <tdmm> np
[12:37:38] <john99> :)
[12:41:34] <nitrix> tdmm, Gosh, I have even more questions now after reading the standard. I think my understanding has too many holes to be useful with that one.
[12:42:45] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:43:51] <tdmm> nitrix: For context, I'm implementing a custom single-producer single-consumer thread-safe message queue.  The implementation basically uses two semaphores and it's beautifully symmetric.
[12:44:33] <tdmm> (importantly, the queue buffer allocation can be dynamically changed -- otherwise only one semaphore would be needed)
[12:46:47] <nitrix> Where does the increment come in?
[12:47:22] <tdmm> The increment of ... what?  The semaphores?
[12:47:24] <nitrix> And why does it needs to be atomic and/or synchrhonized?
[12:47:30] <tdmm> Thread safety
[12:47:50] <tdmm> It's intended to be used across threads as a lightweight communication primitive
[12:48:23] <tdmm> One semaphore counts the number of unread, ready messages; the other counts the number of free slots in the queue buffer
[12:48:31] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Ping timeout: 268 seconds)
[12:49:21] <tdmm> Both read (pop) and write (push) operations decrement one semaphore, do stuff, then increment the other.
[12:50:19] <nitrix> I feel like a ring buffer would've been better. The read pointer chases the write pointer, if they're the same, the channel is empty (or full, but that's an easy edge case).
[12:50:28] <tdmm> ... that's still happening
[12:50:46] <tdmm> except that both sides keep the pointers to themselves
[12:50:50] <nitrix> Only the producer touches the write pointer, only the consumer touches the read pointer. No count to maintain.
[12:51:30] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[12:51:33] <tdmm> some more context: I'm trying to make an OS which possibly has no virtual memory
[12:51:43] <tdmm> which means that any respectable allocation is broken up into blocks
[12:51:49] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[12:51:59] <tdmm> so the queue buffer is really a circular linked list of these blocks
[12:52:15] <tdmm> which is why simple pointers don't work as easily as one would hope
[12:52:37] <nitrix> Ah, fun.
[12:52:54] <tdmm> Using pointers also doesn't let you limit the memory each side can use
[12:53:06] <tdmm> at any moment, the producer could completely fill up the buffer before the reader can do anything
[12:53:33] <tdmm> which makes it very hard to do allocation management across the blocks
[12:53:53] <nitrix> Well that scenario can happen regardless of how your implementation works.
[12:54:12] <tdmm> using the semaphore pairs, the consumer can 'steal' message space from the producer to prevent them from accessing it
[12:54:32] *** Joins: mahmutov (~mahmutov@37.155.83.34)
[12:54:33] <tdmm> the consumer is then guaranteed that the producer won't go past the limit
[12:54:44] <tdmm> which allows you to do things like insert new blocks into the queue buffer
[12:55:04] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[12:55:16] <tdmm> vice-versa: the consumer needs to be sure that queue memory won't be deallocated under it
[12:55:23] <nitrix> Yeah, the semaphore is important.
[12:55:44] <tdmm> a ring buffer would be far simpler but is unfortunately not doable
[12:55:52] <tdmm> (well, pointer-oriented implementation thereof)
[12:56:23] <nitrix> That'll take time to get to the bottom of. I'll just wish you luck and head to bed :P
[12:56:40] <tdmm> thank you very much and good night ;)
[12:56:51] *** Quits: carlavilla (~carlavill@188.26.219.124) (Remote host closed the connection)
[12:58:18] *** Joins: mrig (~mrig@user/mrig)
[12:59:18] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Read error: Connection reset by peer)
[13:00:19] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[13:02:25] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:03:17] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[13:03:38] *** Joins: goddard (~goddard@user/goddard)
[13:06:38] *** Joins: aradesh (~aradesh@user/aradesh)
[13:08:12] *** Joins: jiehuan (~jiehuan@39.188.241.69)
[13:08:41] *** Quits: jiehuan (~jiehuan@39.188.241.69) (Remote host closed the connection)
[13:08:59] *** Joins: jiehuan (~jiehuan@39.188.241.69)
[13:11:04] *** Quits: jiehuan (~jiehuan@39.188.241.69) (Client Quit)
[13:15:13] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:15:37] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:17:44] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:17:57] *** Joins: cousteau (~cousteau@user/cousteau)
[13:18:41] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[13:32:18] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[13:34:08] *** Joins: strajder (~strajder@user/strajder)
[13:38:08] *** Joins: badsektor (~badsektor@user/badsektor)
[13:42:41] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[13:43:03] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Quit: Leaving)
[13:43:04] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[13:43:38] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[13:43:51] *** Joins: mrig (~mrig@user/mrig)
[13:49:34] *** Joins: reset (~reset@user/reset)
[13:52:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:53:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:56:02] *** Lord_of_Life_ is now known as Lord_of_Life
[13:59:27] *** Joins: fe23 (~fe23@2409:8a34:468:10c0:bdb5:e1d1:bcfc:5b3e)
[13:59:32] *** Joins: zer0bitz (~zer0bitz@196.244.192.59)
[14:03:51] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:04:37] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d)
[14:08:11] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:12:58] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[14:13:18] *** Joins: badsektor (~badsektor@user/badsektor)
[14:16:07] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[14:18:02] *** Quits: badsektor (~badsektor@user/badsektor) (Ping timeout: 260 seconds)
[14:19:12] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:20:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:21:57] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:22:08] *** Joins: pulse (~pulse@user/pulse)
[14:22:31] <john99> Its bad practice use error_t for indicate the return are errors flags?
[14:22:54] <john99> i saw that in some videos and seem okay, but error_t is already defind
[14:30:12] *** Joins: carlavilla (~carlavill@2a0c:5a84:340b:7600:221:6bff:fe3b:cee4)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:00] *** Joins: csrf (~csrf@user/csrf)
[14:34:30] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[14:36:47] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.56)
[14:37:31] *** Joins: mrig (~mrig@user/mrig)
[14:37:42] <cousteau> john99: _t types/identifiers are reserved in POSIX, so defining custom types that end in _t might result in a conflict because the type already existed.  Personally I'd just return an int
[14:37:58] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:38:48] <cousteau> (not like it's incorrect as far as C is concerned; only as far as POSIX is concerned.  But in your case that type is already defined.)
[14:39:08] <john99> yup, seem too convenient
[14:39:17] *** Quits: zer0bitz (~zer0bitz@196.244.192.59) (Ping timeout: 240 seconds)
[14:39:18] <cousteau> https://code.woboq.org/userspace/glibc/bits/types/error_t.h.html  typedef int error_t;
[14:39:20] <candide> Title of cousteau's link: error_t.h source code [glibc/bits/types/error_t.h] - Woboq Code Browser
[14:39:27] *** Quits: fstd (~fstd@xdsl-84-44-230-164.nc.de) (Read error: Connection reset by peer)
[14:39:40] *** Joins: fstd (~fstd@xdsl-84-44-230-164.nc.de)
[14:39:57] <john99> i understand, its reserved but in the end is simply a int
[14:40:21] <john99> i have to search another word for "falg for error"
[14:40:24] <john99> flag*
[14:40:43] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1)
[14:40:55] *** Joins: yo (~0xfe0@49.36.186.18)
[14:41:50] <cousteau> a flag is usually a bit or set of bits within an integer used to indicate some property; you can combine multiple flags into the same integer
[14:43:18] <cousteau> for example, a file may be readable, writable, and/or executable, so maybe a system defines the flag READABLE as 4, WRITABLE as 2, and EXECUTABLE as 1, and you can combine them to indicate all the properties the file has (e.g. READABLE|WRITABLE would be 6, which indicates that the file is both readable AND writable)
[14:44:17] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.56) (Ping timeout: 240 seconds)
[14:44:18] <cousteau> i.e., bit 2 of the number would indicate whether or not the file is readable, bit 1 whether or not it's writable, and bit 0 whether or not it's executable
[14:44:53] *** Quits: fstd (~fstd@xdsl-84-44-230-164.nc.de) (Read error: Connection reset by peer)
[14:45:04] <cousteau> then again, for errors you'd usually return an error code rather than a flag (or set of flags)
[14:45:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:45:59] *** Joins: fstd (~fstd@xdsl-84-44-230-164.nc.de)
[14:47:03] <cousteau> like "0 means the result is OK, 1 means the object couldn't be found, 2 means that the result was out of range, 3 means that malloc() returned NULL (you ran out of memory), and 4 means that the user has spilled their coffee over their laptop"
[14:47:05] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Remote host closed the connection)
[14:47:05] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:48:01] <cousteau> there are no flags involved there because each code has a unique meaning; you don't combine multiple codes to get a combined messaage
[14:48:43] *** Quits: earnestly (~earnest@user/earnestly) (Quit: WeeChat 3.3)
[14:49:57] *** Joins: earnestly (~earnest@user/earnestly)
[14:50:56] <cousteau> you could call it `retcode` or `retcode_t`... or simply use an int and document that it's a return code; there's no real benefit in creating new types just because
[14:52:29] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[14:52:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[14:54:01] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[14:54:07] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d) (Quit: Konversation terminated!)
[14:54:31] <john99> well, its more readable error_t thatn int
[14:54:39] <john99> but yes, not great benefit
[14:56:34] <cousteau> returning an error code as an int is a common convention, though
[14:56:52] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.59)
[14:58:16] <cousteau> and it doesn't make much sense to create a new type for every meaning of a value (typedef double length; typedef double weight; typedef double speed...), unless you plan to change the type in the future without having to modify all the code using it
[14:59:00] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[14:59:55] <cousteau> (plus, typedef doesn't create a new type, just an alias for a type; error_t and int are still going to be totally interchangeable and the compiler is not going to warn you because you used an int when an error_t was expected or something like that)
[15:00:29] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1) (Ping timeout: 268 seconds)
[15:02:55] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.59) (Read error: Connection reset by peer)
[15:05:45] *** Joins: wikan (~wikan@2a02:a31d:8541:e100:213:2ff:fed3:8291)
[15:06:00] <wikan> hi
[15:06:41] <wikan> i wonder if it is hard to write program that runs oher program and catches fopen calls
[15:07:25] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[15:07:50] <cousteau> maybe asking the OS
[15:07:55] <dave0> i have an example program that catches malloc/free you could probably use it for fopen
[15:08:05] <wikan> i just need to redirect some static build paths to my own locations
[15:08:18] <wikan> dave0 great, can you share?
[15:08:28] <cousteau> there might be a way to ask the OS to monitor the calls to fopen made by another program (or any other interaction with the file system)
[15:08:53] <cousteau> I think that's the kind of thing gdb does.  As for how "hard" or "easy" it is, no idea.
[15:09:28] <cousteau> wikan: do you want it to run a separate program, or just a function written in C?
[15:09:35] <wikan> i know debuggers provides their own implementations of standard library functions and rewrites symbols for ld
[15:10:03] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[15:10:03] <wikan> well I use several programs that read config files and not allows to provide custom path
[15:10:21] <dave0> https://paste.c-net.org/PreventGaggle
[15:10:37] <dave0> wikan: it relys on a shared library.. static linking probably wont work
[15:10:46] <wikan> so I don't want to modify all apps - i just want to write source:destination config and run another program then replace source path to destination path.
[15:11:17] <wikan> dave0, but do i need to recompile program?
[15:11:28] <dave0> wikan: yeah :-/
[15:11:39] <wikan> well i know how to do it ;)
[15:11:41] <dave0> well, relink it
[15:11:50] <dave0> so you need object files
[15:11:51] <wikan> i do not want to recompile anything
[15:11:51] <dave0> :-(
[15:11:52] <cousteau> wikan: maybe replace the files directly?
[15:12:25] <cousteau> or maybe use chroot or something like that to create a "fake" filesystem (I think that's what chroot does but honestly I have no idea)
[15:13:31] <wikan> chroot will not work good, replacing files is bad idea because program may need to write something (1), and there may be more than one instance (2)
[15:14:07] <wikan> i thought about my own fuse, but still, some apps sucks
[15:18:43] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[15:19:05] *** Joins: kish` (~sid742412@user/aqua)
[15:30:32] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[15:30:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[15:30:48] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:30:52] *** Joins: Satin (uid193953@user/Seten)
[15:33:26] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[15:33:26] <clarity> would overlayfs work?
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:35] <wikan> if you ask me, nope
[15:38:16] *** Joins: maty (~maty@181.98.49.251)
[15:38:58] *** Quits: rahl (~rahl@102.114.80.148) (Quit: leaving)
[15:39:37] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[15:40:17] *** Joins: rahl (~rahl@102.114.80.148)
[15:41:24] *** Quits: novns (~novns@user/novns) (Remote host closed the connection)
[15:42:59] *** Joins: novns (~novns@user/novns)
[15:43:25] *** Joins: AmR (~AmREiSa@156.199.236.68)
[15:45:52] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[15:51:37] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:52:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:52:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:53:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:53:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:55:20] *** maty is now known as Maty
[15:56:40] *** Joins: aerysh_ (~aerysh@94.198.43.101)
[16:01:31] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:01:52] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:02:21] *** Joins: szutt (~szutt@116.37.2.145)
[16:02:38] *** Quits: fe23 (~fe23@2409:8a34:468:10c0:bdb5:e1d1:bcfc:5b3e) (Quit: fe23)
[16:04:55] *** Joins: meator (~meator@user/meator)
[16:06:38] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:359a:fe01:ab2d:3f72)
[16:06:38] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:359a:fe01:ab2d:3f72) (Changing host)
[16:06:38] *** Joins: skapata (~Skapata@user/skapata)
[16:11:46] *** Quits: wikan (~wikan@2a02:a31d:8541:e100:213:2ff:fed3:8291) (Quit: Client closed)
[16:11:46] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[16:14:12] *** Joins: lleo (~lleo@89-200-0-48.mobile.kpn.net)
[16:18:56] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[16:18:59] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[16:19:07] *** Quits: aerysh_ (~aerysh@94.198.43.101) (Quit: Konversation terminated!)
[16:19:21] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:5b::a08d)
[16:20:47] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[16:20:47] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[16:21:35] *** Joins: kdc (~kdc@196.211.197.159)
[16:22:28] *** Joins: ppt (~yulung@118-232-53-143.dynamic.kbronet.com.tw)
[16:26:58] *** Joins: aighearach_ (~paris@c-71-63-160-210.hsd1.or.comcast.net)
[16:27:26] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[16:28:59] *** Quits: aighearach (~paris@user/aighearach) (Ping timeout: 252 seconds)
[16:33:23] *** Joins: meator (~meator@user/meator)
[16:36:36] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-75.cspire.com)
[16:37:54] *** Joins: stonkey (~stonkey@user/stonkey)
[16:40:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:40:17] *** Quits: Guest3589 (~somewhere@202-63-77-120.ip4.superloop.com) (Ping timeout: 240 seconds)
[16:40:23] *** Quits: Haxxa (~Haxxa@122-199-29-168.ip4.superloop.com) (Ping timeout: 268 seconds)
[16:40:56] *** Joins: critr (~critr@user/critr)
[16:41:56] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:43:36] *** Joins: reezoh (~reezoh@173.168.223.85)
[16:43:37] *** Quits: neunon (~neunon@user/neunon) (Quit: ZNC 1.8.2 - https://znc.in)
[16:43:40] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:44:35] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:45:16] *** Joins: etolier (~somewhere@202-63-76-134.ip4.superloop.com)
[16:45:40] *** etolier is now known as Guest1145
[16:45:43] *** Joins: neunon (~neunon@user/neunon)
[16:46:43] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[16:50:36] *** Quits: ppt (~yulung@118-232-53-143.dynamic.kbronet.com.tw) (Ping timeout: 240 seconds)
[16:57:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:57:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:57:28] *** Joins: wroathe (~wroathe@user/wroathe)
[16:57:53] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[17:01:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:01:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[17:02:16] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:07:10] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[17:12:24] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[17:12:37] *** Quits: lleo (~lleo@89-200-0-48.mobile.kpn.net) (Quit: beforge.net)
[17:12:42] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[17:12:47] <dan_pena> hello guys
[17:18:01] *** Quits: mahmutov (~mahmutov@37.155.83.34) (Ping timeout: 256 seconds)
[17:18:01] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-75.cspire.com) (Read error: Connection reset by peer)
[17:18:10] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:22:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[17:23:44] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:24:07] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:24:15] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:24:50] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[17:24:56] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:26:38] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 268 seconds)
[17:27:28] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:30:44] *** Joins: badsektor (~badsektor@user/badsektor)
[17:31:32] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 240 seconds)
[17:31:57] *** Joins: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch)
[17:32:09] *** Joins: nyah (~nyah@94.6.71.219)
[17:32:21] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[17:35:02] *** Quits: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch) (Client Quit)
[17:36:00] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[17:36:37] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[17:37:51] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[17:39:09] *** Joins: kayprish (~kayprish@188.120.102.122)
[17:39:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.13)
[17:43:54] *** Joins: ethrl (~ethereal@user/doforlove33)
[17:46:05] *** Joins: seninha (~seninha@user/seninha)
[17:49:29] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-197.cspire.com)
[17:50:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[17:56:15] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-197.cspire.com) (Read error: Connection reset by peer)
[17:57:16] *** Joins: pulse (~pulse@user/pulse)
[17:58:04] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:00:12] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[18:01:15] <trinity> does anyone know how to get motif apps compiling in C? i installed x11/motif on pkgsrc but -lmotif with -L/usr/pkg/lib gives me an ld error finding the library
[18:02:00] *** Joins: shivesh (~shivesh@user/shivesh)
[18:02:25] <trinity> er, wait, no, sorry. I misremembered. I got it working by linking the proper X11 libraries. i'm getting X Error of failed request:  BadWindow (invalid Window parameter)
[18:03:28] <trinity> embarrassing to ask about the wrong error. anyway; this error does occur even for supposedly known good example code
[18:03:46] <badsektor> https://adventofcode.com/2021/day/5  <-- in this puzzle do we just get an int array[1000][1000] and work on it?
[18:03:46] <candide> Title of badsektor's link: Day 5 - Advent of Code 2021
[18:06:17] *** Quits: kayprish (~kayprish@188.120.102.122) (Read error: Connection reset by peer)
[18:11:00] <Xgc> trinity: Hard to tell without more detail.  It sounds like a failed runtime request, which could be due to almost anything.  Many of these apps are likely to be rather old and could be incompatible with existing X server implementations... or it could be just some simple configuration issue.
[18:12:02] <trinity> hmm. is there any other easy X widgets kit to dip one's feet into gui programming? 
[18:13:35] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[18:16:11] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:84eb:b2e:7b61:4002)
[18:16:59] <AmR> Hi did C have any lib like boost But not gtk ?
[18:21:14] <Learath2> not really, klib has a couple things and there is qlibc, nothing as comprehensive as glib
[18:21:43] <NRK[m]> badsektor: should work, i think 
[18:23:09] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[18:25:30] *** Joins: WAR10CK (~WAR10CK@14.223.182.168)
[18:25:58] *** Joins: pert (~pert@fsf/member/pert)
[18:29:08] <badsektor> NRK[m], i there a smarter way instead of using a 1MB of an array?
[18:29:39] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:32:09] <Learath2> You can trade off performance for space and keep it as an array of pipes and check for intersections as you insert
[18:32:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:33:56] <badsektor> pipes you say
[18:34:43] <Learath2> pipes, lines, whatever :P
[18:34:48] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[18:37:22] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:37:36] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:40:52] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[18:41:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:43:43] *** Quits: X-Scale (~ARM@31.22.201.155) (Ping timeout: 265 seconds)
[18:43:43] *** X-Scale` is now known as X-Scale
[18:44:58] *** Joins: Akuli (~Akuli@82-203-167-27.bb.dnainternet.fi)
[18:45:17] <badsektor> Learath2, i thought you meant unix pipes
[18:46:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:46:54] *** Joins: Colt (~Colt@user/colt)
[18:48:55] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:49:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:50:10] <badsektor> i was thinking one can use ideone.com as an online ide so i typed out a solution to an adventofcode puzzle for an hour, and then i clicked "compile"..... and it turned to default page with no trace of my work, all gone
[18:50:15] <badsektor> probably session expired
[18:50:19] *** Joins: Colt (~Colt@user/colt)
[18:50:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:52:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:52:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:52:24] <pragma-> lol
[18:52:50] <pragma-> that's terrible
[18:53:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:54:21] *** Joins: Betal (~Betal@user/betal)
[18:55:54] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[18:56:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:56:30] *** Joins: Colt (~Colt@user/colt)
[18:59:28] *** Joins: mahmutov (~mahmutov@37.155.83.34)
[19:01:55] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[19:02:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:02:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:02:07] *** Joins: wroathe (~wroathe@user/wroathe)
[19:03:07] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[19:03:33] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:03:57] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:04:26] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[19:05:06] *** Joins: Colt (~Colt@user/colt)
[19:05:49] *** Joins: terminalpusher (~terminalp@2a01:586:921e:1:7349:e941:b6ca:1cd5)
[19:05:56] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[19:06:44] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:10:20] *** Joins: seninha (~seninha@user/seninha)
[19:14:21] *** Joins: gproto23_ (~gproto23@user/gproto23)
[19:15:00] *** Joins: MoixIdSARS (~MoixIdSAR@82-65-165-243.subs.proxad.net)
[19:15:48] *** Quits: critr (~critr@user/critr) (Remote host closed the connection)
[19:16:11] *** Joins: g2anj (~v@58.228.230.4)
[19:16:35] *** Quits: gproto23_ (~gproto23@user/gproto23) (Client Quit)
[19:16:37] *** Parts: MoixIdSARS (~MoixIdSAR@82-65-165-243.subs.proxad.net) ()
[19:16:44] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[19:17:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: restarting client)
[19:17:10] *** Joins: critr (~critr@user/critr)
[19:17:50] *** Quits: mahmutov (~mahmutov@37.155.83.34) (Ping timeout: 252 seconds)
[19:18:25] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:18:56] *** Joins: bindu (~bindu@user/bindu)
[19:20:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:20:53] *** Joins: cousteau (~cousteau@user/cousteau)
[19:21:07] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:21:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[19:22:34] *** Quits: ethrl (~ethereal@user/doforlove33) (Ping timeout: 268 seconds)
[19:23:40] *** Joins: Everything (~Everythin@37.115.210.35)
[19:24:17] *** Joins: ethrl (~ethereal@user/doforlove33)
[19:24:20] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[19:28:00] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:ec3a:2574:2f9:e2db)
[19:29:35] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[19:29:50] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[19:30:24] *** Joins: mikess (~sam@user/mikess)
[19:34:26] *** Joins: Hercules (~Hercules@user/hercules)
[19:38:59] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[19:41:29] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 252 seconds)
[19:41:48] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[19:46:07] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[19:50:19] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:5b::a08d) (Ping timeout: 268 seconds)
[19:50:41] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[19:53:33] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:56:28] *** Joins: Hercules` (~Hercules@user/hercules)
[19:59:02] *** Quits: Hercules (~Hercules@user/hercules) (Ping timeout: 240 seconds)
[19:59:29] *** Quits: Hercules` (~Hercules@user/hercules) (Client Quit)
[20:00:24] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[20:00:49] *** Joins: zer0bitz_ (~zer0bitz@185.112.82.230)
[20:03:50] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 260 seconds)
[20:05:23] *** Joins: u0_a3914 (~u0_a391@2600:380:5a31:cdb7:81c5:17bc:6035:ee91)
[20:07:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:08:10] *** Joins: cousteau (~cousteau@user/cousteau)
[20:09:26] *** Quits: u0_a3913 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 268 seconds)
[20:12:55] *** Joins: plastico (~plastico@neomutt/plastico)
[20:14:57] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:15:55] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[20:16:11] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[20:19:04] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[20:20:03] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[20:20:07] *** Joins: cousteau_ (~cousteau@user/cousteau)
[20:20:26] *** cousteau_ is now known as cousteau
[20:23:37] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:27:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.13) (Ping timeout: 240 seconds)
[20:28:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[20:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:32:50] *** Joins: monkey_ (~user@190.104.116.153)
[20:34:38] *** Quits: ethrl (~ethereal@user/doforlove33) (Ping timeout: 260 seconds)
[20:35:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:35:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:35:14] *** Joins: wroathe (~wroathe@user/wroathe)
[20:38:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b0df:3a77:10f5:563e)
[20:40:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:43:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:47:36] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[20:53:16] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 245 seconds)
[20:53:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[20:54:07] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:55:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:58:10] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:01:01] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[21:02:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[21:05:03] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[21:06:43] <nomagno> `result = val1 + val2; space->cf = ((result < val1) || (result < val2)) ? 1 : 0;`
[21:07:24] <nomagno> Where ALL variables involved are unsigned, any idea why this would be always evaluating to 0 even when there IS overflow?
[21:10:37] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[21:11:53] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:17:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:18:12] <fizzie> ,cc unsigned val1 = UINT_MAX - 10, val2 = 20; unsigned result = val1 + val2; printf("%d", (result < val1) || (result < val2)); // it doesn't, though
[21:18:15] <candide> fizzie: 1
[21:18:37] <fizzie> (The result of || is already 0 or 1, there's no need to do `x ? 1 : 0` on it.)
[21:19:22] <nomagno> For whatever reason it's not working.
[21:19:29] <nomagno> I might have another issue somewhere
[21:19:39] <nomagno> But I severely doubt it
[21:21:26] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:23:26] *** Joins: yomon (~yomon@79.115.213.171)
[21:24:59] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 250 seconds)
[21:25:16] <fizzie> Well, it demonstrably yielded a 1 up there, so I think more context is needed. (Incidentally, either one of those <s would be sufficient on its own.)
[21:27:59] <trinity>  < is evaluated before || so you don't need to do (a < b) || (c < d). just a < b || c < d
[21:28:17] *** Quits: zer0bitz_ (~zer0bitz@185.112.82.230) (Ping timeout: 240 seconds)
[21:28:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.56)
[21:30:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[21:30:47] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: leaving)
[21:32:10] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:32:17] <nomagno> could this be related to the fact this is within a case label in a switch statement?
[21:32:38] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:33:12] <nomagno> OH FFS
[21:33:41] *** Joins: Bova (~Bova@185.24.53.163)
[21:34:00] <nomagno> Issue is result() is an unsigned int, and I need it to be an unsigned char or uint8_t for overflow to work as expected
[21:38:40] *** Joins: monkey_ (~user@190.104.116.153)
[21:38:45] <nomagno> It it safe to cast a pointer to unsigned char, to a pointer to unsigned int?
[21:39:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:41:32] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[21:41:57] *** Quits: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 268 seconds)
[21:45:03] *** Quits: u0_a3914 (~u0_a391@2600:380:5a31:cdb7:81c5:17bc:6035:ee91) (Quit: WeeChat 3.0.1)
[21:45:38] *** Joins: pulse (~pulse@user/pulse)
[21:47:20] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[21:47:21] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[21:47:21] *** Joins: [\\] (~nirnam@gateway/tor-sasl/nirnam)
[21:48:02] <nomagno> Fixed!
[21:49:26] <bdax> apologies for the silly question, but when using numeric functions in C99, is it true that we have to test for errors afterwards with both errno and fetestexcept? I'm wondering if I'm reading c++ info or something as it seems odd that c doesn't just use errno
[21:49:38] <bdax> (e.g. sqrt)
[21:50:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[21:53:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:53:21] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:53:39] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[21:54:02] *** Quits: yomon (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[21:54:35] <ioxzev1z> nomagno, you mean cast and assign? I doub't a pointer will fit into char, but afaiu you can cast pointers however you want 
[21:55:26] <ioxzev1z> ,cc unsigned char c = 10; unsigned int *i = (unsigned int *) c;
[21:55:28] <candide> ioxzev1z: [warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]] no output: c = 10 '\n'; i = 0xa
[21:55:38] <ioxzev1z> ,cc unsigned char c = 10; unsigned int *i = (unsigned int *) &c;
[21:55:40] <candide> ioxzev1z: no output: i = 0x7fffffffe297; c = 10 '\n'
[21:56:11] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Ping timeout: 250 seconds)
[22:01:54] *** Joins: yomon (~yomon@79.115.213.171)
[22:02:01] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[22:02:18] *** Parts: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net) ()
[22:02:25] *** Quits: Bova (~Bova@185.24.53.163) (Quit: Leaving)
[22:02:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:03:23] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:03:37] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[22:03:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:05:19] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[22:06:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:06:15] *** Joins: Kit (~u0_a391@2600:380:5a31:cdb7:81c5:17bc:6035:ee91)
[22:06:36] *** Parts: [\\] (~nirnam@gateway/tor-sasl/nirnam) ()
[22:09:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[22:09:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[22:10:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:11:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:14:58] *** Quits: terminalpusher (~terminalp@2a01:586:921e:1:7349:e941:b6ca:1cd5) (Remote host closed the connection)
[22:15:01] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 240 seconds)
[22:16:28] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[22:17:55] *** Joins: segnior (segnior@user/segnior)
[22:18:34] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:21:09] *** Joins: wroathe (~wroathe@user/wroathe)
[22:21:41] *** Joins: ferdna (~ferdna@user/ferdna)
[22:27:02] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-51.cspire.com)
[22:32:47] *** Joins: magla (~gelignite@55d4171c.access.ecotel.net)
[22:33:42] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[22:34:10] *** Joins: stonkey (~stonkey@user/stonkey)
[22:35:50] *** Quits: Maty (~maty@181.98.49.251) (Ping timeout: 252 seconds)
[22:37:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[22:39:21] *** Joins: rsjw (~rsjw@user/rsjw)
[22:41:26] *** Joins: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[22:42:02] <retro> can you use a #define to resize an array where you normally shouldn't be able to
[22:42:30] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:42:36] <pragma-> retro: how would that be implemented?
[22:42:37] <retro> by doing #undef SIZE        #define SIZE 2
[22:42:43] <pragma-> lol
[22:43:07] <retro> I really dont want to use malloc/realloc
[22:43:56] <retro> how many chars STDIN is read is what the new size is
[22:44:30] <retro> if STDIN is equal to some static string it gets stored in a file
[22:44:41] <retro> so im making a basic parser
[22:44:53] <retro> if you can even call it that
[22:45:06] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:20] <nitrix> That's what variables are for, they vary.
[22:45:26] <rsjw> the preprocessor is just a search and replace mechanism. if you can't do it without the preprocessor, you can't do it with it
[22:45:47] <retro> static arrays are not resizable mormally
[22:45:50] *** Quits: WAR10CK (~WAR10CK@14.223.182.168) (Quit: Leaving)
[22:45:51] <pragma-> the length of the array will permanently be thr value of SIZE at the point where the array is declared
[22:46:12] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 240 seconds)
[22:46:18] <nitrix> Arrays are never resizable, period. You have to allocate or re-allocate a larger array.
[22:47:10] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:06] <retro> I cant just make a buffer that  is too big
[22:48:15] <retro> so that everything happnes to fit in it
[22:49:21] <retro> 1. its wasteful, 2. it will cause errors when comparing strings, 3, what if there is 2 space seperated short tokens that fit in one buffer when I want to have them as two buffers
[22:50:20] <nitrix> If a large enough static object doesn't work then you have to use an allocated object.
[22:50:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:53:00] *** Joins: Valeria (~Valeria@user/valeria)
[22:53:35] <retro> I dont know why I cant use a loop to read a string but char by char
[22:54:06] <retro> and compare the string each iteration to see if it matches a list of static string literals
[22:54:33] <retro> if it does not then do #undef SIZE #define SIZE 2
[22:54:39] <retro> then 3 then 4 etc
[22:55:16] <retro> the loop does getchar
[22:55:19] <nitrix> The string read via STDIN presumably is compared to another string. Where is the other string located?
[22:56:02] *** Quits: Kit (~u0_a391@2600:380:5a31:cdb7:81c5:17bc:6035:ee91) (Ping timeout: 260 seconds)
[22:56:13] <retro> its just  a bunch of static strings  either #define "matchingstring1" or char[] = "matchingstring1";
[22:56:31] <retro> ok  I meant char via STDIN
[22:56:33] <retro> not string
[22:57:09] <retro> I forgot its char by char, been a while since I last tried this project
[22:57:11] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:58:19] <nitrix> It's do-able if you implement some kind of resumable matching mechanism against a lookup table.
[22:59:04] <retro> yes
[22:59:24] <retro> but I got stuck when checking the strings and couldnt figure out why
[22:59:31] <retro> they never seemed to match
[22:59:45] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b0df:3a77:10f5:563e) (Quit: Quit)
[22:59:51] <retro> because I didnt know getchar actually adds a whilespace char on
[22:59:54] <nitrix> Probably the resumable part.
[23:02:01] *** Joins: Burgundy (~yomon@79.115.213.171)
[23:02:40] <nitrix> We've diverted quite a bit from the original question. Maybe you want to rephrase a newer one so I can be more helpful.
[23:02:47] *** Quits: yomon (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[23:04:15] <retro> im writing some code now
[23:08:16] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[23:09:08] <retro> https://onlinegdb.com/Vi6hk0o1g
[23:09:22] <retro> k im stuck
[23:09:49] *** Joins: Bova (~Bova@185.24.53.163)
[23:10:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[23:10:19] <retro> the array is zero length in the first iteration because it avoids a big problem  then it is resized to 1
[23:10:47] *** Quits: Bova (~Bova@185.24.53.163) (Client Quit)
[23:10:47] <retro> but I cant just compare token to MATCH
[23:11:18] <retro> oh wait it should be  if (token != MATCH)
[23:11:52] <pony> are you comparing strings with == and != ?
[23:12:23] <nitrix> retro, When do you think the #undef and #define are performed?
[23:13:12] <nitrix> pony, Individual characters in a loop, it's not that kind of issue.
[23:13:28] <rsjw> retro: after the preprocessor is done, but before the compiler is run, here is what your code looks like: https://onlinegdb.com/8wbdmYfWs
[23:13:52] *** Joins: PEAKTOP (~PEAKTOP@user/peaktop)
[23:14:28] <retro> so any way to fix it :)  ?
[23:14:43] *** Joins: Kit (~u0_a391@2600:380:8d42:7999:7a1b:c9b0:8489:2438)
[23:14:50] <nitrix> Start by listening to what we're saying, the solution was mentioned first thing earlier.
[23:15:12] <retro> that solution is to use malloc/realloc
[23:15:13] <rsjw> sorry... https://onlinegdb.com/RA2JrLD5e
[23:15:42] <nitrix> Perhaps. But the size should at least be a variable if it's going to dynamically change at runtime.
[23:15:55] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:16:01] <retro> but you said its possible to do it this way
[23:16:12] <rsjw> retro: the preprocessor doesn't work at runtime. if you want the size of your data to change, you need to use malloc/realloc or similar
[23:16:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1145:9ae9:835c:2c31)
[23:16:14] <retro> ugh
[23:16:41] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[23:16:58] *** tyle is now known as leonardus
[23:17:59] <nitrix> Resumable matching of a lookup table. You wont achieve that in 20 lines or, to be honest, at all with your current understanding of C.
[23:19:41] <nitrix> It's one thing to want your code to be performant, it's another to be able to keep your high standards without having the necessary baggage to pull it off.
[23:20:59] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:ec3a:2574:2f9:e2db) (Quit: Textual IRC Client: www.textualapp.com)
[23:21:37] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[23:22:47] <nitrix> You're doing stream processing, parsing, matching, a state machine, yet you're confused about the roles of preprocessor tokens and variables. You can still learn a whole lot about these things, but you'll have to compromise somewhere until you know what you're doing.
[23:26:38] *** Quits: Valeria (~Valeria@user/valeria) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:30:34] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[23:32:03] <pragma-> he doesn't seem to understand how variables work either. he thought the way to tell his program that he is passing two arguments to main() was by putting `argc = 2` at the top of main().  
[23:32:36] <sham1> That'd be neat, but no
[23:33:22] <pragma-> he's just making blind guesses at and assumptions about C's semantica :/
[23:34:14] *** Joins: Valeria (~Valeria@user/valeria)
[23:34:16] <pragma-> semantics. tablet keyboard.
[23:34:48] <sham1> Works as a faux greek way of saying it
[23:35:33] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[23:35:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:36:37] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 240 seconds)
[23:37:59] *** Quits: kristian84 (~asdf@ti0037a400-4119.bb.online.no) (Ping timeout: 252 seconds)
[23:38:18] <nitrix> pragma-, Tell me you're still in bed without telling me.
[23:38:29] *** Joins: kristian84 (~asdf@ti0037a400-4119.bb.online.no)
[23:38:30] <nitrix> Holidays are great.
[23:40:21] *** Quits: Kit (~u0_a391@2600:380:8d42:7999:7a1b:c9b0:8489:2438) (Ping timeout: 268 seconds)
[23:40:27] <pragma-> retro: learning C without a C book is not going to go very well. C is not mistake-friendly. It *will* accept many categories of broken code without complaint. Things may seem to work at first glance but will acutally contain bugs not obvious to beginners who are unaware of how C really works.
[23:41:58] <pragma-> fortunately there are C books available for free on the internet, legally and otherwise.
[23:42:21] <pragma-> nitrix: bathtub actually!
[23:42:42] <nitrix> Even comfier.
[23:43:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:46:28] <trinity> retro: like others have said, man 3 realloc
[23:47:37] <trinity> (C library manpages are package man-pages in void repo and probably other systems' repositories but that's just a guess. you can also Bing:"man 3 realloc" and usually that works)
[23:48:21] <nitrix> Or directly from the standard, it's easily readable as well.
[23:48:24] <nitrix> ,c11 7.22.3.5
[23:48:26] <candide> http://www.iso-9899.info/n1570.html#7.22.3.5 [The realloc function] 1 #include <stdlib.h> void *realloc(void *ptr, size_t size); Description 2 The realloc function deallocates the old object pointed to by ptr and returns a pointer to a new object that has the size specified by size. The contents of the new object shall be the same as that of the old object prior to deallocation, up to the lesser of the ne... <truncated; https://0x0.st/oreI.txt>
[23:48:49] <trinity> i like to do char *str; size_t str_s; where str is a string and str_s is the size of the string
[23:49:00] <trinity> ^^ reading the standard is very good as well
[23:52:00] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:52:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:52:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:52:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:54:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:54:25] <trinity> reading the wiki. Beej's guide to C is full of mistakes? I learned out of it (and then never touched it since 2017 when I got a copy of K&R)
[23:57:05] *** Joins: Kit (~u0_a391@2600:380:8d42:7999:7a1b:c9b0:8489:2438)
[23:57:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:57:51] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:59:21] <retro> programming is not for me
[23:59:31] <retro> but I really want to make an idea
