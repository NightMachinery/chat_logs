[00:00:50] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:04:48] *** Joins: EtherNet (~ethernet@user/ethernet)
[00:05:19] *** Joins: Torr (~Torr@user/torr)
[00:05:53] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:06:56] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[00:07:08] *** Joins: Torr (~Torr@user/torr)
[00:07:32] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 240 seconds)
[00:07:53] *** Joins: lureevar (~lureevar@2804:d45:4749:9a00:fa00:878:a99f:267a)
[00:08:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:08:36] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[00:10:47] *** Joins: Torr (~Torr@user/torr)
[00:15:08] <simpl_e> PaulePanter: if the return value of your func has a limited range, maybe you can encode the returned value so that with a simple bit mask, you can validate if any of the conditions is satisfied.
[00:15:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[00:20:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[00:20:45] *** Quits: luckyxxl (~luckyxxl@185.209.196.135) (Quit: bye)
[00:21:21] *** Joins: Guest8 (~Guest8@54f72d83.static.cust.trined.nl)
[00:23:00] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:23:24] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[00:24:17] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (Read error: Connection reset by peer)
[00:24:45] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[00:25:24] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[00:25:24] *** X-Scale` is now known as X-Scale
[00:25:32] *** Quits: trumae (~trumae@177.185.113.185) (Ping timeout: 250 seconds)
[00:31:19] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[00:31:48] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[00:32:09] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 256 seconds)
[00:32:30] <PaulePanter> simpl_e: No, it’s https://elixir.bootlin.com/linux/latest/source/drivers/gpu/drm/amd/display/modules/hdcp/hdcp.h#L221
[00:32:32] *** Joins: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr)
[00:32:33] <candide> Title of PaulePanter's link: hdcp.h - drivers/gpu/drm/amd/display/modules/hdcp/hdcp.h - Linux source code (v5.16.15) - Bootlin
[00:32:53] <PaulePanter> enum mod_hdcp_hdcp2_state_id { […], HDCP2_STATE_END = H2_A9_VALIDATE_STREAM_READY, };
[00:32:56] <PaulePanter> enum mod_hdcp_hdcp2_dp_state_id { HDCP2_DP_STATE_START = HDCP2_STATE_END, … };
[00:33:12] *** Quits: kleiner (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:34:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:39:42] *** Parts: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr) ()
[00:39:42] *** Joins: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr)
[00:39:48] *** Joins: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72)
[00:41:47] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[00:42:00] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 250 seconds)
[00:42:48] *** Joins: nq (~nq@2a02:2f08:e015:a900:ce88:51fe:c7ec:5ed9)
[00:43:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[00:43:12] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:43:24] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:43:42] *** Joins: pulse (~pulse@user/pulse)
[00:45:18] *** Quits: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72) (Read error: Connection reset by peer)
[00:45:53] *** Joins: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72)
[00:47:32] *** Quits: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:1c54:444a:a40b:a91e) (Ping timeout: 240 seconds)
[00:49:06] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 245 seconds)
[00:49:18] *** Quits: Thedarkb1 (~Thedarkb@92.40.196.2.threembb.co.uk) (Ping timeout: 260 seconds)
[00:49:30] *** Joins: Satin (uid193953@user/Seten)
[00:51:58] *** Joins: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl)
[00:54:24] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:55:01] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:55:21] *** Quits: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 245 seconds)
[00:56:57] *** Quits: pragmalin (~pragmalin@user/pragmalin) (Quit: Leaving)
[00:58:09] *** Quits: Torr (~Torr@user/torr) ()
[00:58:47] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[00:58:56] *** Quits: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72) (Read error: Connection reset by peer)
[01:00:11] *** Joins: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72)
[01:01:42] *** Quits: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72) (Read error: Connection reset by peer)
[01:01:49] *** Joins: trumae (~trumae@170.231.88.63)
[01:03:14] *** Joins: Torr (~Torr@user/torr)
[01:03:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:05:48] *** Quits: trumae (~trumae@170.231.88.63) (Ping timeout: 240 seconds)
[01:06:16] *** Joins: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72)
[01:07:47] *** Quits: trumae (~trumae@2804:18:4028:68d3:1:0:c707:ec72) (Read error: Connection reset by peer)
[01:09:05] *** Joins: codethulu (~codethulu@cpe-173-174-108-148.austin.res.rr.com)
[01:09:05] *** Joins: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:ecc7:fdb2:bf0e:3249)
[01:09:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:09:59] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:10:02] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:10:41] *** Parts: FLHerne (flh@flherne.uk) (Leaving)
[01:10:56] *** Quits: alch (~alch@151.18.231.152) (Read error: Connection reset by peer)
[01:12:10] *** Quits: codethulu (~codethulu@cpe-173-174-108-148.austin.res.rr.com) (Client Quit)
[01:12:59] *** Joins: trumae (~trumae@177.185.113.185)
[01:14:41] *** Joins: alch (~alch@151.36.242.117)
[01:21:17] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[01:22:19] *** Quits: Guest8537 (~Guest@host52.181-14-185.telecom.net.ar) (Remote host closed the connection)
[01:24:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[01:26:40] *** Quits: azed (~azed@197.23.130.142) (Read error: Connection reset by peer)
[01:27:18] *** Quits: Msandoy_ (~Msandoy@telia-59089f-40.connect.netcom.no) (Read error: Connection reset by peer)
[01:31:09] *** Joins: Enitin (~Enitin@82.180.145.225)
[01:32:40] *** Joins: X-Scale` (~ARM@92.250.103.201)
[01:34:17] *** Quits: trumae (~trumae@177.185.113.185) (Ping timeout: 240 seconds)
[01:35:03] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[01:35:14] *** X-Scale` is now known as X-Scale
[01:38:02] *** Quits: Enitin (~Enitin@82.180.145.225) (Ping timeout: 240 seconds)
[01:41:48] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:43:24] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[01:43:37] *** Joins: trumae (~trumae@170.231.88.62)
[01:44:30] *** Quits: lureevar (~lureevar@2804:d45:4749:9a00:fa00:878:a99f:267a) (Quit: lureevar)
[01:50:21] *** Quits: foul_owl (~kerry@23.82.193.87) (Ping timeout: 256 seconds)
[01:51:08] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:51:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[01:52:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[01:56:15] *** Joins: Enitin (~Enitin@82.180.145.228)
[01:57:23] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:57:33] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:59:59] *** Quits: nexus (~nexus@94-21-55-122.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:00:56] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (Quit: The Lounge - https://thelounge.chat)
[02:01:18] *** Joins: nexus (~nexus@178-164-235-232.pool.digikabel.hu)
[02:02:00] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:02:05] *** Joins: TVH7677 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[02:03:54] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 268 seconds)
[02:05:06] *** Joins: foul_owl (~kerry@174-21-69-110.tukw.qwest.net)
[02:05:24] *** Joins: Thedarkb (~Thedarkb@92.40.196.3.threembb.co.uk)
[02:06:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[02:06:47] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:15:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[02:17:03] *** Joins: seninha (~chatzilla@user/seninha)
[02:18:59] *** Quits: Akuli (~Akuli@82-203-162-72.bb.dnainternet.fi) (Quit: Akuli)
[02:20:36] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:25:36] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[02:26:05] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[02:32:12] *** Quits: pizdets (~pizdets@183.182.110.159) (Ping timeout: 240 seconds)
[02:33:22] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:40fd:1a9f:e098:5b8e)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.159)
[02:36:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:40fd:1a9f:e098:5b8e) (Ping timeout: 252 seconds)
[02:37:42] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[02:39:16] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:42:30] *** Joins: Guest8537 (~Guest@181.91.159.107)
[02:43:17] *** Joins: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au)
[02:48:27] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[02:49:17] *** Quits: Guest8 (~Guest8@54f72d83.static.cust.trined.nl) (Ping timeout: 256 seconds)
[02:57:10] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-004.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[03:01:11] *** Quits: foul_owl (~kerry@174-21-69-110.tukw.qwest.net) (Ping timeout: 256 seconds)
[03:07:26] *** Joins: rjz4 (~rjz4@212.252.119.143)
[03:07:32] <rjz4> hi everyon
[03:07:46] *** Quits: rjz4 (~rjz4@212.252.119.143) (Client Quit)
[03:13:46] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:15:48] *** Joins: foul_owl (~kerry@23.82.193.89)
[03:16:59] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:18:37] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:19:37] *** Joins: Ox000 (~jy@74.215.11.197)
[03:19:51] *** Quits: Ox000 (~jy@74.215.11.197) (Quit: leaving)
[03:20:09] *** Joins: Ox000 (~jy@74.215.11.197)
[03:20:26] *** Quits: dasrael (~rabbit@user/dasrael) (Quit: And away we go!)
[03:20:28] *** Joins: ferdna (~ferdna@user/ferdna)
[03:21:08] *** Quits: Ox000 (~jy@74.215.11.197) (Client Quit)
[03:21:25] *** Joins: Ox000 (~jy@74.215.11.197)
[03:22:31] *** Joins: dasrael (~rabbit@user/dasrael)
[03:23:36] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:24:32] *** Quits: vitimiti (~Celtor@2a01:4c8:1400:1025:e4a1:ec73:47b6:38c7) (Ping timeout: 240 seconds)
[03:26:32] <pragma-> bye environ
[03:27:00] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:27:02] *** Joins: noarb (~noarb@user/noarb)
[03:27:03] <SamuelMarks> hi
[03:27:06] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:40fd:1a9f:e098:5b8e) (Quit: Quit)
[03:27:44] <SamuelMarks> Why would `getaddrinfo` return -1 with https://github.com/offscale/cauthflow/blob/b9d41ca/cauthflow/cauthflow_server.c#L138-L145 on Linux (but work on macOS and Windows)?
[03:28:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:29:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:29:32] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[03:30:16] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[03:30:34] <pragma-> I do not like how they put defines in the middle of a statement
[03:30:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:30:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:30:36] *** Joins: wroathe (~wroathe@user/wroathe)
[03:30:43] *** Quits: Ox000 (~jy@74.215.11.197) (Quit: leaving)
[03:31:03] *** Joins: Ox000 (~jy@74.215.11.197)
[03:31:32] <no-n> gross
[03:31:55] <pragma-> smh, 3 different identifiers to test for windows
[03:32:51] <pragma-> NOWINBASEINTERLOCK
[03:33:05] <pragma-> I read this in at least 3 different ways before concluding it must be no-win-base-interlock
[03:33:14] <pragma-> but I'm not 100% sure
[03:34:32] * pragma- stares at lines 183 through 194
[03:34:40] <pragma-> https://github.com/offscale/cauthflow/blob/b9d41ca/cauthflow/cauthflow_server.c#L183-L194
[03:37:06] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[03:37:22] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[03:38:32] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[03:38:39] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[03:41:29] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[03:44:14] <owensjrw> What am I doing wrong with strtok? If I use "water" as input I get "water\nwater" as output with the price of two waters. https://pastebin.com/mVQcJdyx
[03:46:10] *** Quits: trumae (~trumae@170.231.88.62) (Ping timeout: 250 seconds)
[03:49:00] *** Quits: nexus (~nexus@178-164-235-232.pool.digikabel.hu) (Ping timeout: 240 seconds)
[03:51:00] *** Joins: nexus (~nexus@217-197-189-23.pool.digikabel.hu)
[03:51:03] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[03:53:17] *** Quits: mahmutov_ (~mahmutov@5.176.61.7) (Ping timeout: 240 seconds)
[03:53:32] *** Quits: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr) (Remote host closed the connection)
[03:55:25] <caze> owensjrw: You have both item and item_order.
[03:57:26] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[03:58:41] <owensjrw> Isn't item_order the token where item is tokenized at?
[03:59:26] <owensjrw> Let me try that again isn't item_order the location where item is tokenized at?
[03:59:54] <caze> owensjrw: Only for the call on line 25.
[04:00:59] <caze> owensjrw: On line 29, you continue to use strtok in a loop, but you're no longer storing its return in item_order. You're using item instead.
[04:02:11] <owensjrw> when i change 29 to item_order = strtok(NULL, delim) i get a segfault
[04:02:12] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[04:05:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:40fd:1a9f:e098:5b8e)
[04:09:41] *** Joins: hanzo (uid532183@user/hanzo)
[04:09:55] <caze> owensjrw: Because you're doing printf("%s\n", item_order);
[04:13:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[04:14:36] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 252 seconds)
[04:17:10] <owensjrw> got it my call to subtot was after strtok and you were right I need 29 to be to item_order. Thank you.
[04:20:02] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:23:37] *** Quits: egm (~egm@user/egm) (Ping timeout: 240 seconds)
[04:29:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:31:48] *** Joins: Wulf (~Wulf@user/wulf)
[04:44:36] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[04:50:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[04:51:57] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[04:52:46] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[04:55:02] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[04:55:34] *** Joins: rackj (~rackj@c-73-193-19-25.hsd1.wa.comcast.net)
[04:55:49] *** Joins: llh (~UPP@user/llh)
[04:56:31] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:56:57] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:00:19] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:00:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:40fd:1a9f:e098:5b8e) (Quit: Quit)
[05:02:25] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[05:02:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:04:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:05:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:05:31] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:06:35] *** Quits: oriba (~oriba@dynamic-089-014-158-213.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:13:00] *** Quits: alch (~alch@151.36.242.117) (Ping timeout: 240 seconds)
[05:14:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[05:15:00] *** Joins: alch (~alch@151.34.245.93)
[05:17:22] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4.1)
[05:17:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:18:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:19:37] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[05:21:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:23:44] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[05:24:42] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[05:25:08] *** Joins: Rynn (~rynn@216.30.158.198)
[05:25:18] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[05:27:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[05:29:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[05:29:10] *** Quits: Rynn (~rynn@216.30.158.198) (Client Quit)
[05:31:06] *** Joins: Rynn (~rynn@216.30.158.198)
[05:35:06] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:37:06] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 252 seconds)
[05:38:58] *** Joins: zer0x_ (~zer0x@1.55.210.57)
[05:40:22] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[05:40:23] *** Joins: vysn (~vysn@user/vysn)
[05:41:04] *** Quits: rackj (~rackj@c-73-193-19-25.hsd1.wa.comcast.net) (Quit: Client closed)
[05:49:35] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[05:49:54] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[05:53:03] *** Quits: meandrain (~meandrain@2a02:2f0e:f70f:6e00:4045:d48f:1f91:ed31) (Ping timeout: 252 seconds)
[05:55:32] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[05:56:22] *** Joins: jkotra (~jkotra@122.169.141.242)
[05:56:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:58:32] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 240 seconds)
[05:58:32] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[06:00:15] *** Quits: nexus (~nexus@217-197-189-23.pool.digikabel.hu) (Ping timeout: 256 seconds)
[06:00:51] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[06:02:06] *** Joins: nexus (~nexus@78-131-74-115.pool.digikabel.hu)
[06:06:56] *** Joins: Inline__ (~Inline@p200300cd473cb900eebf25766a02ea81.dip0.t-ipconnect.de)
[06:07:14] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:07:29] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[06:07:53] *** jmpeax is now known as Guest156
[06:08:32] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[06:09:02] *** Quits: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:11:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[06:12:32] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[06:14:05] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:14:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:16:22] *** Joins: geli (~gelignite@55d44736.access.ecotel.net)
[06:17:50] *** Quits: moog__ (~moog@98.97.82.161) (Ping timeout: 250 seconds)
[06:18:09] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 256 seconds)
[06:19:14] *** Quits: magla (~gelignite@d536146e.access.ecotel.net) (Ping timeout: 260 seconds)
[06:19:42] *** Quits: Kerr (~quassel@2601:602:ce80:df10::b76e) (Quit: No Ping reply in 180 seconds.)
[06:20:55] *** Joins: Kerr (~quassel@2601:602:ce80:df10::d1e)
[06:22:56] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:28:51] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:31:00] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[06:32:37] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:34:01] *** Joins: fe23 (~fe23@2409:8a34:466:6010:8c37:a855:a5ef:15ca)
[06:34:02] *** Quits: banc (~banc@217.138.195.27) (Ping timeout: 240 seconds)
[06:42:16] *** Quits: Guest8537 (~Guest@181.91.159.107) (Read error: Connection reset by peer)
[06:44:15] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:45:57] *** Quits: geli (~gelignite@55d44736.access.ecotel.net) (Quit: Stay safe!)
[06:49:19] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[06:56:23] *** Joins: banc (~banc@217.138.195.27)
[06:57:20] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[06:57:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 256 seconds)
[07:04:45] *** Joins: Batzy (~quassel@user/batzy)
[07:05:08] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[07:05:33] <Batzy> if I'm storing a bit array in an int (call it A) and i want to add 3 to this bit array, would (A << 2) + 3 work?
[07:06:03] <Batzy> so let's say my current array is 1111 would this turn the array into 111100 and then 111110?
[07:06:13] <Batzy> err not array, it's all in an int
[07:06:54] <Batzy> or would that yield 111103
[07:08:18] <sonny> Why not A+3?
[07:11:04] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:11:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:12:31] <Batzy> because that would modify the 1111
[07:12:44] <Batzy> so im story it as an array of 2 bit ints
[07:13:06] <Batzy> so the first 11 is a 3 and the
[07:13:10] <Batzy> second 11 is also a 3
[07:13:16] <Batzy> oops i mean adding a 2 my bad
[07:13:29] <Batzy> anyways if i want to add 2 to this "array" then i will right shift it by 2 bits and at 10
[07:13:32] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:13:32] <Batzy> add*
[07:13:39] <Batzy> sonny: you see what i mean?
[07:14:42] <sonny> 1111 + 10?
[07:15:03] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Ping timeout: 256 seconds)
[07:16:17] *** Joins: HP_3 (~HP@49.205.97.197)
[07:17:15] <fizzie> ,cc -w int a = 15; printf("%08b %08b", a, (a << 2) | 2); // or + instead of | if you like
[07:17:17] <candide> fizzie: 00001111 00111110
[07:17:56] <Batzy> sonny: i want the result to be 111110
[07:18:12] <Batzy> so i guess you mean (A << 2) + 10
[07:18:35] <Batzy> im just going to try it in a repl
[07:18:56] *** Quits: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[07:19:01] <sonny> no I was just thinking adding two will leave a 1 in the lsb
[07:19:27] <sonny> (I didn't get the question)
[07:21:37] <Batzy> sonny: okay so <<2 + 3 did NOT work
[07:21:37] <Batzy> lol
[07:22:11] <Batzy> or wait what am i doing hm
[07:22:13] <sonny> Can you reiterate what you want to do?
[07:23:27] <Batzy> sonny: so imagine an array of ints 0, 1, 2, 3 but not using an array to store it
[07:23:35] <Batzy> instead, i am storing it in an int where every 2 bits is a number
[07:24:08] <sonny> ok, sounds good
[07:24:24] <Batzy> yeah so i think appending to the array like (A << 2) + 3 actually works fine
[07:24:35] <Batzy> and to access it i do like (A & 3)
[07:24:38] <Batzy> yeah it seems fine
[07:24:43] <Batzy> repl is working just fine
[07:24:53] <sonny> appending? wouldn't you want an index operator?
[07:25:06] <sonny> also stdint types makes more sense than int
[07:25:25] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[07:25:48] <Batzy> sonny: im actually using a 128 bit int :>
[07:25:49] <sonny> can't really index unless you know int/2
[07:25:53] <sonny> ok
[07:26:05] <sonny> so, a struct?
[07:26:21] <sonny> oh sorry
[07:26:21] <Batzy> sonny: i mean i can get a value by doing (A >> (multiple of 2)) & 3
[07:26:40] <sonny> bit not byte
[07:27:01] <Batzy> yes bit
[07:27:03] <sonny> yeah that looks correct
[07:27:08] <Batzy> ty
[07:30:33] *** Joins: derelict_ (~derelict@user/derelict)
[07:30:57] *** Quits: derelict (derelict@user/derelict) (Ping timeout: 240 seconds)
[07:32:00] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[07:32:11] *** Joins: trumae (~trumae@170.231.88.62)
[07:34:02] *** derelict_ is now known as derelict
[07:37:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[07:39:18] *** Joins: piku (~piku@47-202-113-8.tamp.fl.frontiernet.net)
[07:42:57] *** Quits: piku (~piku@47-202-113-8.tamp.fl.frontiernet.net) (Client Quit)
[07:43:18] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[07:45:22] *** Quits: trumae (~trumae@170.231.88.62) (Ping timeout: 250 seconds)
[07:51:02] *** Joins: trumae (~trumae@170.231.88.62)
[07:53:05] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:56:11] *** Joins: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au)
[07:56:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[07:57:55] *** Joins: HP55555 (~HP51248@49.205.97.197)
[07:59:28] <pragma-> `cc` in candide now defaults to c2x
[07:59:44] * pragma- also made sure to #include all standard headers
[08:00:06] *** Quits: HP_3 (~HP@49.205.97.197) (Ping timeout: 250 seconds)
[08:00:32] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 250 seconds)
[08:04:02] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[08:04:34] <pragma-> ,cc BOOL_WIDTH
[08:04:37] <candide> pragma-: no output: BOOL_WIDTH = 1
[08:04:51] <pragma-> I don't know why that makes me snort every time.
[08:05:03] <no-n> %b is C2x?
[08:05:08] * pragma- needs to read the rationale for BOOL_WIDTH to save his nose
[08:05:26] <pragma-> %b is a candide extension, but I think it's also in C2X as well, maybe?
[08:05:37] <pragma-> I think fizzie added the -w to hide the "candide extension" warning
[08:05:38] <no-n> ahh
[08:05:53] <pragma-> ,cc s/-w//
[08:05:54] <candide> pragma-: No substitutions made.
[08:06:00] <pragma-> oh wait, I did a ,cc recently since fizzie's
[08:06:05] <pragma-> ,cc undo
[08:06:05] <candide> pragma-: No output.
[08:06:08] <pragma-> hm
[08:06:19] <pragma-> ,cc int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:06:20] <candide> pragma-: 00001111 00111110
[08:06:33] <pragma-> no warning in C2X mode, neat.
[08:06:39] <no-n> :}
[08:06:43] <pragma-> hey fizzie, there's no warning any more!
[08:07:26] <pragma-> ,cc -std=c11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:07:28] <candide> pragma-: 00001111 00111110
[08:07:30] <pragma-> Hrm.
[08:07:39] <pragma-> What in tarnation.
[08:07:48] <pragma-> ,cc -lang=c11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:07:49] <candide> pragma-: [warning: ISO C17 does not support the '%b' gnu_printf format [-Wformat=]  warning: ISO C17 does not support the '%b' gnu_printf format [-Wformat=]] 00001111 00111110
[08:07:54] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 250 seconds)
[08:08:03] <pragma-> ISO C17, wtf
[08:08:11] <pragma-> ,cc -lang=c11 -info
[08:08:12] <candide> pragma-: c11 cmdline: gcc -gdwarf-2 -g3 prog.c -Wextra -Wall -Wno-unused -pedantic -Wfloat-equal -Wshadow -std=c11 -lm -Wfatal-errors -fsanitize=alignment,undefined -fsanitize-address-use-after-scope -fno-omit-frame-pointer -o prog
[08:08:19] * pragma- stares at `-std=c11`
[08:08:22] <pragma-> gcc, wyd?
[08:08:38] <pragma-> I knew it was a bad idea to upgrade gcc.
[08:09:45] <pragma-> gnu_printf
[08:10:11] <pragma-> tHe gNu_PrInTf FoRmAt
[08:10:41] <pragma-> I distinctly remember typing printf(), not gnu_printf().
[08:11:02] <pragma-> well, pasting.
[08:12:48] <pragma-> Oh!
[08:13:12] <pragma-> setting a compiler flag with `cc` will remove the default flags, including -Wall
[08:13:26] <pragma-> ,cc -Wall -std=c11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:13:28] <candide> pragma-: 00001111 00111110
[08:13:35] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[08:13:35] <pragma-> ,cc -W -Wall -std=c11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:13:37] <candide> pragma-: [warning: unused parameter 'argc' [-Wunused-parameter]  warning: unused parameter 'argv' [-Wunused-parameter]] 00001111 00111110
[08:13:50] <pragma-> wtf.
[08:13:56] <pragma-> ,cc -Wformat -std=c11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:13:57] <candide> pragma-: 00001111 00111110
[08:14:05] <pragma-> wtfff.
[08:14:31] <pragma-> ,cc -Wformat -std=gnu11 int a = 15; printf("%08b %08b", a, (a << 2) | 2);
[08:14:33] <candide> pragma-: 00001111 00111110
[08:14:54] <pragma-> I guess %b is not a warning any more?
[08:15:46] <pragma-> ,clang printf("%b", 52);
[08:15:48] <candide> pragma-: [note: %b is a c﻿andide extension] 110100
[08:15:54] <pragma-> well, something still works around here!
[08:16:33] <pragma-> wait a minute
[08:16:34] *** Quits: nexus (~nexus@78-131-74-115.pool.digikabel.hu) (Ping timeout: 250 seconds)
[08:16:38] <pragma-> clang is in c2x mode too now
[08:16:41] <pragma-> ,clang -info
[08:16:41] <candide> pragma-: clang cmdline: clang -gdwarf-2 -g3 prog.c -Wextra -Wall -Wno-unused -Wno-unused-parameter -pedantic -Wfloat-equal -Wshadow -std=c11 -lm -Wfatal-errors -fsanitize=integer,undefined,alignment -fsanitize-address-use-after-scope -fno-omit-frame-pointer -o prog
[08:16:50] <pragma-> huh, I guess not.
[08:17:25] *** Joins: malloy (~jimery@120.235.172.170)
[08:17:36] <pragma-> Okay, now it is.
[08:18:16] *** Joins: nexus (~nexus@fibhost-66-208-144.fibernet.hu)
[08:21:28] <wroathe> pragma-: Talking to yourself again, huh?
[08:21:41] <pragma-> I am my greatest fan.
[08:21:52] <wroathe> Agreed
[08:22:42] <wroathe> glib is reminding me why I hate typedef
[08:23:21] <wroathe> PSA: typedef is for kitten killers. Next time you think about using typedef consider that.
[08:24:24] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Remote host closed the connection)
[08:25:53] *** Quits: trumae (~trumae@170.231.88.62) (Ping timeout: 256 seconds)
[08:28:04] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[08:34:15] *** Quits: princessalicorn (~princess@user/princessalicorn) (Ping timeout: 268 seconds)
[08:37:47] *** Quits: zer0x_ (~zer0x@1.55.210.57) (Ping timeout: 256 seconds)
[08:38:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:46:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:47:40] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[08:50:26] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:52:37] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[08:53:49] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[08:53:49] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[08:53:49] *** Joins: Teukka (~teukka@user/Teukka)
[08:54:39] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:58:36] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Quit: Leaving.)
[08:59:12] *** Joins: ztx (~ztx@user/ztx)
[09:04:05] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[09:07:17] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[09:07:42] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 250 seconds)
[09:08:48] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[09:09:52] *** Joins: zer0x_ (~zer0x@1.55.210.57)
[09:13:29] *** Quits: alch (~alch@151.34.245.93) (Ping timeout: 256 seconds)
[09:14:37] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 256 seconds)
[09:15:20] *** Joins: alch (~alch@151.18.230.29)
[09:18:29] *** phaise is now known as phaisedArray
[09:20:17] *** Quits: Kerr (~quassel@2601:602:ce80:df10::d1e) (Ping timeout: 240 seconds)
[09:22:03] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[09:26:40] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[09:26:54] *** Joins: frost (~frost@user/frost)
[09:32:41] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:39:44] <greeter> why is typedef so bad?
[09:42:14] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4.1)
[09:42:55] <fossforus> makes me open cscope
[09:43:38] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:44:12] <dave0> greeter: it's not too bad if you don't use it too much.. i use typedef if it saves a lot of typing
[09:44:27] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:44:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:44:55] <fossforus> makes code look a bit nicer at the expense of making it less readable due to constantly needing to cross-reference what mystery object the programmer decided needed to be abstracted
[09:45:20] <dave0> greeter: and it is the best if you want to use function pointers... it makes the syntax much more readable
[09:47:35] <greeter> i haven't used function pointers yet, but i am playing around with a lot of structs and pointers to those structs, so i've used typedef to simplify declaring and defining new structs
[09:48:07] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[09:48:52] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[09:49:16] <dave0> greeter: one general piece of advice is don't typedef pointers, just typedef the struct or simple type
[09:50:21] <dave0> greeter: so    struct person { char name[20]; int age; };    typedef struct person someone;   someone *greeter = malloc(sizeof(someone));
[09:50:47] <dave0> leaving the * you can easily see that you are malloc'ing a pointer to `someone`
[09:51:25] <greeter> yeah, i've only been typedefing the structs. the pointers have (mostly) been within the structs themselves. it hadn't occurred to me to use malloc at all for them
[09:51:31] *** Joins: bindu (~bindu@user/bindu)
[09:53:20] <fossforus> I personally like using struct namespace as a sort of long name/comment, to each there own though
[09:54:04] <fossforus> s/(the)re/\1ir/
[09:55:25] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:59:31] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:02:15] <nitrix> I find typedef is most useful for aliasing integer types and best used in the platform's system headers.
[10:03:13] <cryptonector> > makes me open cscope
[10:04:07] <cryptonector> I run cscope all the time, and I set $CSCOPE_EDITOR to a script that opens $EDITOR in a new tmux window, so for me there's no "makes me open cscope" -- I'm in cscope all the time!
[10:04:15] <nitrix> For users, either the type should be opaque (in which case in incomplete struct pointer works just fine) or should be public, in which case you end up accessing the fields and are continually reminded that it's a struct and not some sort of handle.leveraged is superseeded
[10:04:35] <nitrix> s/leveraged is superseeded//
[10:04:36] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[10:04:40] <cryptonector> I prefer typedefs -- I don't want to know the details of the type, whether it's a pointer or to what, not if it's opaque anyways
[10:04:56] <nitrix> That's where you're confused. You end up having to know anyway.
[10:05:11] <cryptonector> not really -- it's just an immediate value
[10:05:18] <cryptonector> I pass it around
[10:05:21] <nitrix> That's not what an immediate value is.
[10:05:31] <caze> cryptonector: Do you ever add 1 to it?
[10:05:34] <nitrix> C also doesn't have them.
[10:05:34] <cryptonector> no, I know, i mean, values of the type
[10:05:46] <nitrix> Types don't have values. Values have types.
[10:05:46] <cryptonector> caze: no, i do what the API lets me do
[10:06:42] <cryptonector> for example, in GSS-API, types like gss_cred_id_t and gss_ctx_id_t can be integral (like file descriptors, say) or pointers, and RFC 2744 doesn't specify which (in practice they're always pointers to incomplete structs)
[10:07:03] <cryptonector> there's no question of "adding 1 to" a gss_cred_id_t value
[10:07:09] <cryptonector> it's just not interesting
[10:07:10] <nitrix> I would strongly recommend against _t suffix.
[10:07:15] <cryptonector> just like with file descriptors
[10:07:19] *** Quits: nexus (~nexus@fibhost-66-208-144.fibernet.hu) (Ping timeout: 256 seconds)
[10:07:28] <cryptonector> nitrix: I'm aware, but the authors of that API did that in 192
[10:07:30] <cryptonector> 1992*
[10:07:48] <cryptonector> I'm aware POSIX reserves *_t for itself
[10:07:54] <nitrix> I'm mentioning it because you brought it up as an example of what you seemed to recommend.
[10:08:06] <cryptonector> I'm recommending typedefs
[10:08:16] <cryptonector> I'm not recommending a particular naming convention
[10:08:19] <nitrix> typedefs don't make types opaque.
[10:08:22] <cryptonector> GSS was an example
[10:08:54] *** Joins: nexus (~nexus@94-21-174-73.pool.digikabel.hu)
[10:09:19] <cryptonector> well, if I'm working with values of typedef'ed types, and I'm using them only as arguments to / outputs of functions, then I don't need to care if they're pointer types, integral, floating point types -- I don't need to know
[10:09:51] <cryptonector> in that sense, a typedef'ed type is opaque, though, of course, unless it's a pointer to an incomplete struct, it's not truly opaque
[10:10:50] <cryptonector> but I really don't need to care if a "handle" to some thing is file descriptor like or pointer like or even a struct passed by value
[10:10:56] *** Joins: angelacrust (~angelacru@223.233.69.74)
[10:11:18] <caze> cryptonector: It depends on the design of the API.
[10:11:20] <cryptonector> e.g., internally in jq values are two-word structs passed by value all over the place
[10:12:08] <cryptonector> caze: well, yes, and I've given you two examples where you don't need to know the details of the type in order to use the API
[10:12:11] <angelacrust> hello, do you think this program (https://bpa.st/3TBQ) is less efficient than this one (https://bpa.st/LRSA)? And, which one should I use?
[10:12:17] <cryptonector> and _that_ makes for good API design
[10:12:37] <nitrix> What happens when the handle is copied and you end up with two objects sharing ownership of other objects because there are pointers inside of the struct that was typedef-ed?
[10:12:56] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) ()
[10:13:31] <Maxdamantus> jq values are always moved or copied.
[10:13:34] <nitrix> Or maybe worse, trashing the cache because the struct is multiple kilobytes large and should've been passed by pointer?
[10:13:44] <cryptonector> nitrix: well, in libjq-using programs you're supposed to use jv_copy() -- C is a poor language, and you don't get to make the details of copying an automatic part of the type, but you can expect someone who wants to use jv_array_append() to know about jv_copy()
[10:14:07] <cryptonector> nitrix: right, so don't design APIs like that
[10:14:22] <cryptonector> instead, do what libjq or what GSS-API or any number of others do
[10:14:26] <Maxdamantus> jq values referring to extra data have ref counters.
[10:14:29] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[10:14:30] <cryptonector> it's not hard, really
[10:14:44] <cryptonector> Maxdamantus knows
[10:15:10] <caze> cryptonector: Rugtm
[10:15:13] <cryptonector> this idea that typedefs are bad is just nonsense
[10:15:15] <Maxdamantus> (and operations like `jv_array_append` will likely check to see if it's got the only reference and just return the same thing opportunistically after modifying it)
[10:15:26] <cryptonector> caze: what's that mean?
[10:15:32] *** Joins: nicbk (~nicbk@user/nicbk)
[10:15:36] <caze> cryptonector: Right, you're taking the discussion from "don't typedef pointers" to "complex API design".
[10:15:52] <Maxdamantus> imo it would still be nicer if it had `struct jv` rather than `jv`
[10:16:03] <cryptonector> don't say "don't typedef pointers" -- that's just bad advice
[10:16:29] <cryptonector> Maxdamantus: yeah?  why?  what do you care what the insides of `jv` are?
[10:16:33] <dave0> i said that and it's good advice, approved of by #c
[10:16:50] <caze> cryptonector: Somebody who has just used typedef for the first time is not asking about designing APIs like you are talking about.
[10:17:07] <Maxdamantus> cryptonector: I don't have to care what's inside any struct.
[10:17:08] <cryptonector> I mean, yes, it's interesting to know how it works, but, if you're just using libjq, it's just as well that you don't know if it's a struct or not
[10:17:14] <caze> cryptonector: The advice is in the context of someone who has just used typedef for the first time.
[10:17:25] <cryptonector> dave0: well, _I_ am here in #c and I am telling you it's bad advice
[10:17:32] <nitrix> The "don't typedef pointers" refers to the mistake Windows decided to go for with their Hungarian notation, e.g. `typedef int *INTP;`.
[10:18:07] <cryptonector> caze: I guess if they're utter beginners then the right advice is "go learn a better language than C"
[10:18:12] <caze> cryptonector: You are completely ignoring the context.
[10:18:23] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[10:18:27] <cryptonector> and if they're not beginners then typedef is not something to ward them off of
[10:18:40] <cryptonector> nitrix: well THAT I agree with
[10:18:46] <caze> cryptonector: Sure, but maybe if you're triggered by a line that someone wrote, maybe read a few lines of backlog before commenting.
[10:19:16] <fossforus> I swear every time I join this channel I get brain damage
[10:19:17] <nitrix> Where the knowledge that you're working with a pointer is lost within the type, and you have code that seemingly dereferences things that aren't pointers until you look closer. Sometimes fun bugs with double indirections too, when you're lucky that it works and goes unnoticed.
[10:19:18] <cryptonector> caze: I came in to note that using cscope can be a way of life
[10:19:40] <nitrix> cryptonector, What did you think people meant when they said "don't typedef pointers"?
[10:20:45] <cryptonector> nitrix: I took it literally, not as in "don't typedef pointers to integral types"
[10:20:52] <cryptonector> the latter I fully agree with
[10:20:56] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 268 seconds)
[10:21:20] <cryptonector> if you're supposed to understand the type being pointed to, then don't typedef pointers to it
[10:21:27] <caze> cryptonector: > i haven't used function pointers yet, but i am playing around with a lot of structs and pointers to those structs, so i've used typedef to simplify declaring and defining new structs
[10:21:39] <cryptonector> if you're not (it's opaque, for some value of opaque), then do
[10:21:59] <cryptonector> caze: I didn't write that
[10:22:03] <caze> cryptonector: Does that sound like someone who would be designing APIs like gss?
[10:22:32] <caze> cryptonector: That was the person to whom the advice "don't typedef pointers" was given.
[10:22:39] <cryptonector> maybe, but I've certainly typedef'ed function pointers, because writing out function pointer types all the type is a PITA
[10:22:53] <nitrix> cryptonector, It's a quote of someone that wrote that, it's not necessarily your quote. Tune down the defensive mode...
[10:23:15] <nitrix> No one is attacking anynore.
[10:23:16] <cryptonector> ah, I see, I misread that
[10:23:54] <cryptonector> anyways, I've seen this "don't typedef pointers" from others, not just here, and it grates, it really does
[10:24:11] <cryptonector> I think it's a mistake, and if you're dealing with beginners, well, sure
[10:24:36] <cryptonector> but better to phrase it like "don't think about typedefs for now, it's too soon"
[10:24:54] <nitrix> I disagree. You shouldn't typedef pointer types.
[10:24:59] <cryptonector> because then 10 years later that person will be repeating nonsense like that like it's a really important rule, and it's not
[10:25:19] <dave0> the beginner specifically asked about typedef
[10:25:24] <cryptonector> as an API designer, I don't want you to know the nature of my API's types -- all you'll get is a typedef
[10:25:39] <nitrix> It's obfuscating a core mechanism of the language. A lot of C revolves around pointers and operations with pointers.
[10:25:59] <cryptonector> nitrix: that's... what people do... all the time in C++ and Rust -- it's a feature
[10:25:59] <nitrix> You're not doing yourself any favor by hiding it.
[10:26:24] <cryptonector> on the contrary, I am, because I give myself freedom to change it later
[10:26:49] <nitrix> You won't be able to change it to anything else without refactoring the code.
[10:27:00] <cryptonector> today my foo_typedef is an int, and tomorrow it's a struct containing an int, or whatever has the same size
[10:27:10] <nitrix> It doesn't give you the malleability you think it does. There's a layer of indirection that cannot disappear.
[10:27:16] <nitrix> The -> wont magically become .
[10:27:43] <cryptonector> right, but if it's a pointer to an incomplete struct you can't use -> anyways
[10:27:52] <cryptonector> so there's no question of -> becoming .
[10:28:07] <cryptonector> design APIs well and stop worrying about it
[10:28:16] <cryptonector> it's that simple
[10:28:26] <caze> cryptonector: Nobody is saying that you can't build an API where every single operation on data is performed using API functions.
[10:28:26] <dave0> really it's a style thing, and there are arguments both ways
[10:28:29] <nitrix> The incomplete struct is your abstraction. Making the pointer implicit serves no purpose.
[10:28:44] <cryptonector> and, yes, at some point a beginner has to meet APIs and start appreciating good ones and grumbling about bad ones
[10:29:09] <cryptonector> nitrix: it saves typing, for one!
[10:29:28] <cryptonector> `foo_type x;` vs `struct foo *x;`
[10:29:47] <dave0> typedef struct foo Foo;
[10:29:59] <caze> cryptonector: But beginners need to know that if you have: typedef int number; number x = 0; x++; then later on you change the typedef to a pointer, then that's a problem.
[10:30:17] <cryptonector> dave0: sure, though I still need to know that `*` is part of the bloody type name
[10:30:28] *** Joins: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl)
[10:30:34] <nitrix> It's part of the type, it's not part of the type _name_.
[10:30:45] <cryptonector> caze: beginners don't need to think about that
[10:31:02] <caze> cryptonector: Yes they do, if they're using typdef.
[10:31:17] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[10:31:31] <nitrix> cryptonector, Given the definition `int *a, b, c[3];`, what do you think the type of `b` is?
[10:31:41] <cryptonector> nitrix: I have to type `Foo *`, so it's kinda part of the name (yes, there can be infinite whitespace between the typedef name and the `*`)
[10:31:57] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[10:32:07] <cryptonector> nitrix: yes, I'm aware of this, thanks
[10:32:34] <cryptonector> and yet I still think of the `*` as part of the type's name -- the syntax doesn't make it not so
[10:32:51] <caze> Are... you sure you know C?
[10:33:08] <dave0> compare: struct foo { .something. }; struct foo *p = malloc(sizeof(struct foo)); typedef struct foo Foo; Foo *p = malloc(sizeof(Foo)); typedef struct foo *FooP; FooP p = malloc(sizeof(*p));
[10:33:38] <dave0> FooP p   is "different" and could confuse anyone
[10:33:39] <fossforus> when the int main(int *const restrict argc, char *const restrict *const restrict argv)
[10:33:55] <cryptonector> dave0: no, if the struct is incomplete then you can't know its size
[10:33:57] *** Quits: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 256 seconds)
[10:34:03] <fossforus> wait argc isn't pointer
[10:34:05] <cryptonector> so you need to write an API
[10:34:13] <fossforus> see what this chat did to me
[10:34:20] <cryptonector> lol fossforus
[10:34:31] *** Quits: nexus (~nexus@94-21-174-73.pool.digikabel.hu) (Ping timeout: 256 seconds)
[10:34:39] <nitrix> fossforus, That would be non-conforming. See C11 5.1.2.2.1p1.
[10:34:54] <dave0> cryptonector: the point is the code for the typedef'd pointer is surprising
[10:34:59] <caze> I suspect you've been using too many APIs that insulate you from the actual language, that you don't know the actual language.
[10:35:07] <cryptonector> dave0: it would be this: typedef struct foo *Foo; Foo p = make_a_foo(...);
[10:35:23] <cryptonector> caze: you suspect wrong
[10:35:53] <nitrix> cryptonector, What are the types of 0, '0' and "0"?
[10:36:01] <dave0> cryptonector: you've hidden malloc behind make_a_foo ... now the surprising code has just moved
[10:36:11] *** Joins: nexus (~nexus@87-97-82-188.pool.digikabel.hu)
[10:36:27] <cryptonector> nitrix: 0 is some integral, and so is '0' (char specifically), while "0" is a const char *
[10:36:40] <cryptonector> yes, 0 can be a pointer too
[10:37:07] <cryptonector> dave0: yes, the "surprising code" has moved out of the consciousness of the _user_
[10:37:14] <cryptonector> isn't that a good thing?
[10:37:18] <caze> cryptonector: All wrong.
[10:37:25] <nitrix> cryptonector, `integer` isn't _a_ type, '0' isn't a `char` and "0" isn't a `const char *` either. Try again.
[10:37:31] *** Quits: nq (~nq@2a02:2f08:e015:a900:ce88:51fe:c7ec:5ed9) (Quit: Leaving)
[10:37:38] <cryptonector> "0" is an array of two char, that decays to a pointer
[10:37:58] <nitrix> What's the type for that? For an array of two char?
[10:38:11] <fossforus> nitrix: just tested it, it does get caught by -Wpedantic -std=c17 in clang for me
[10:38:21] <cryptonector> fossforus: what gets caught?
[10:38:38] <fossforus> pointer qualifiers
[10:38:39] <nitrix> The non-conforming main prototype they posted.
[10:38:52] <cryptonector> fossforus: can you be more specific?
[10:39:40] <fossforus> const or restrict qualifiers on argv's pointers violates Wpedantic in C11+
[10:39:48] <fossforus> interesting const on the type does not
[10:40:12] <caze> 0 has type int, the fact that it can be converted to a pointer value is irrelevant. Just like: float f = 3.14; int i = f; The fact that f can be converted to an int value is irrelevant to f being a float.
[10:40:38] <cryptonector> ah, you think sometimes a user would want to restrict pointer arguments to a function where the pointer types are provided by your API?
[10:40:58] <fossforus> nah I'm just messing around
[10:41:07] <cryptonector> caze: true, yes, and 0L would be long, and 0UL would be unsigned long
[10:41:21] <nitrix> cryptonector, What are the types of 0, '0' and "0"?
[10:41:33] <fossforus> that being said the fact it was added to the standard probably means someone was doing something weird :-D
[10:42:25] <cryptonector> fossforus: what, restrict?  it's about an optimization
[10:43:12] <caze> cryptonector: Same reasoning applies to arrays. Just because an array value is often coverted to a value of type pointer to the array's first element, does not change the fact that the object the value was obtained from has its own type that doesn't change because of the value conversion.
[10:43:44] <cryptonector> caze: yes, true, you can assign "0" to a char[] type
[10:43:56] <caze> cryptonector: You can't assign arrays in C.
[10:43:57] <nitrix> You cannot, actually.
[10:44:20] *** Quits: metaverse (~metaverse@94.13.111.159) (Ping timeout: 250 seconds)
[10:44:59] *** Joins: zmt01 (~zmt00@user/zmt00)
[10:45:31] <cryptonector> `char a[2] = { '0', 0 };`
[10:45:33] <cryptonector> works
[10:45:37] <nitrix> You're confusing initialization with assignment.
[10:46:00] <nitrix> The `=` there isn't an assignment.
[10:46:03] <cryptonector> yes, you're right about that
[10:46:31] <nitrix> I know I am. You didn't seem to know though.
[10:47:05] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.137)
[10:47:10] <cryptonector> no, I did, but you're right that I mixed assignment and initialization
[10:47:48] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:47:54] <nitrix> Yes, it's why I pointed it out to you.
[10:48:03] <cryptonector> yes, and I appreciate that
[10:48:19] <cryptonector> being the hour that it is, however, I must to sleep
[10:48:34] *** Joins: metaversum (~metaverse@94.13.111.159)
[10:53:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:55:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:55:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:55:03] *** Joins: wroathe (~wroathe@user/wroathe)
[10:55:25] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:56:08] *** Joins: fluter (~fluter@user/fluter)
[10:56:20] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[10:56:35] <angelacrust> oh, this is the copy of the question I asked earlier:
[10:56:35] <angelacrust> hello, do you think this program (https://bpa.st/3TBQ) is less efficient than this one (https://bpa.st/LRSA)? And, which one should I use?
[10:57:09] *** Joins: trumae (~trumae@170.231.88.62)
[10:59:22] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:01:53] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[11:05:46] <Bou> I'd say it is less wrong than the second one
[11:06:18] <fossforus> I wouldn't be surprised if these compiled out to the same thing under gcc or clang
[11:06:53] <dave0> angelacrust: i can't really follow LRSA .. 3TBQ looks alright
[11:07:10] <Bou> fossforus: if gcc "optimizes" out fclose calls it's time for a new compiler
[11:07:21] <angelacrust> hm
[11:07:49] <angelacrust> I thought that using multiple file handlers would slow down the program
[11:08:22] <Bou> nah it costs nothing to keep them open... until you run out of file handlers, that is
[11:08:40] <dave0> angelacrust: fopen/fclose does have a cost
[11:08:51] <Bou> (well, it does cost a bit of memory, but the main issue is all those files that stay open)
[11:09:00] <dave0> angelacrust: but we're talking about microseconds
[11:09:19] <angelacrust> yeah
[11:09:24] <dave0> in 3TBQ there are only ever 2 files opened... `file` and `output`
[11:09:49] <nitrix> angelacrust, sizeof yields the size of its operand, in bytes. So your sizeof (BYTE) is necessarily 1.
[11:10:43] <dave0> angelacrust: i prefer 3TBQ
[11:10:54] <angelacrust> nitrix,  I used `sizeof(BYTE)` because I thought it looked fancy lol
[11:10:56] <angelacrust> Got it
[11:11:08] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:11:20] <nitrix> Assuming BYTE is a typedef of char, but still applicable even if it was uint8_t as its existence guarantees CHAR_BIT being 8.
[11:12:20] <angelacrust> Yep, it's a typedef to `uint8_t`
[11:12:36] <nitrix> I prefer 3TBQ as well. It's easier to follow what happens to the file handles.
[11:13:09] <angelacrust> But it's going to be less efficient than LRSA right?
[11:13:26] *** Joins: crankslider (~slidercra@user/slidercrank)
[11:13:29] <dave0> angelacrust: probably but we're talking microseconds
[11:13:33] <Bou> I'm curious about the logic of this program though: you read one file, 512 bytes at a time, if the block matches a JPEG header you write it to a new file
[11:13:53] <angelacrust> That's correct, Bou
[11:14:02] *** Quits: z4r4 (~z4r4@37.120.205.214) (Ping timeout: 240 seconds)
[11:14:16] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:14:32] *** Joins: aradesh (~aradesh@user/aradesh)
[11:15:09] <dave0> angelacrust: optimization is enormously popular, but being easy to read and understand can't be underestimated!
[11:15:48] <dave0> the second one introduces some complex state and it appears to be buggy
[11:16:23] <dave0> (it fopen's output many times but only fclose's output once)
[11:16:50] <angelacrust> dave0 true words  :)
[11:17:18] *** Joins: adip (~adip@dev188.neoplus.adsl.tpnet.pl)
[11:17:24] <dave0> :-)
[11:17:51] <angelacrust> I have to find a way to close those files now
[11:18:19] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 250 seconds)
[11:19:13] <fossforus> yeah I was confused where the missing fclose calls went
[11:20:21] <fossforus> Bou: :)
[11:20:28] <jamesmartinez> dave0: maw
[11:20:36] <dave0> maw jamesmartinez
[11:22:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:25:19] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[11:25:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:27:17] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.137) (Ping timeout: 240 seconds)
[11:27:37] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Remote host closed the connection)
[11:28:20] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[11:28:27] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[11:29:33] *** Joins: dudek (~dudek@185.150.236.127)
[11:29:56] *** Joins: gnoo (gnoo@user/gnoo)
[11:33:11] *** Joins: ntfls^ (~ntfls@50-243-220-243-static.hfc.comcastbusiness.net)
[11:34:57] *** Quits: trumae (~trumae@170.231.88.62) (Ping timeout: 240 seconds)
[11:35:32] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[11:36:39] <Bou> angelacrust: but once the first chunk has been found, total_files will be nonzero, so any further blocks will all end up in the same file
[11:36:47] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 268 seconds)
[11:37:51] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 245 seconds)
[11:37:56] <angelacrust> Bou Yeah, so I'll then be reading the data of the JPEG file. (i.e, the actual image)
[11:38:59] <Bou> no, this will merely collect all the JPEG *headers* into a single file
[11:39:26] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:41:44] <angelacrust> It's also collecting the image data though
[11:41:57] <angelacrust> I've recovered 50 JPEGs from my memory card
[11:42:03] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[11:42:08] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:44:49] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[11:46:20] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:47:03] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:47:24] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[11:48:45] *** Joins: jkotra (~jkotra@122.169.141.242)
[11:48:51] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[11:49:07] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[11:53:41] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:54:01] <Bou> ah I understand better now, the LRSA version tries to prevent the same file from being closed/opened for each block
[11:55:03] <Bou> you're writing megabytes of data, calling fopen/fclose for each 512 byte chunk, yeah that could be slow
[11:57:26] <angelacrust> yeah
[11:57:49] <Bou> how about `if (output) fclose(output)` before the fopen call on line 20? that will keep completed files from being kept open forever
[11:58:01] <angelacrust> wow
[11:58:13] <angelacrust> let me implement that line real quick
[12:00:05] <angelacrust> that works
[12:00:12] <angelacrust> :]
[12:02:17] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 240 seconds)
[12:05:28] *** Joins: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net)
[12:05:40] *** Quits: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net) (Remote host closed the connection)
[12:05:41] *** Joins: nishant (~Nishant@49.37.242.151)
[12:05:41] <Bou> one problem: if there's a text file or any other file on that memory card it will simply get added to the last JPEG file you encountered
[12:07:28] *** Quits: sebbu (~sebbu@user/sebbu) (Quit: reboot)
[12:09:06] <angelacrust> yep, the memory chunk I'm processing rn only has JPEG values in it
[12:09:19] <angelacrust> but how will I encounter that problem?
[12:13:22] <Bou> just like that "FF D8" tells you where the JPEG starts, there's also a marker that tells you where it ends, you could scan for that
[12:14:14] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[12:14:55] *** Joins: mahmutov_ (~mahmutov@37.155.47.251)
[12:16:34] *** Joins: jkotra (~jkotra@122.169.141.242)
[12:19:37] <angelacrust> the start of a JPEG usually demarks the end of another
[12:19:46] *** Quits: jkotra (~jkotra@122.169.141.242) (Client Quit)
[12:20:05] *** Joins: jkotra (~jkotra@122.169.141.242)
[12:22:40] <greeter> this has me stumped. i have a function that accepts a pointer to a structure. i pass such a pointer to it at one point with &player, which is a global variable. but when i try to check if &player was passed, it always evaluates false. this is how i'm trying to check: if (where == &player)
[12:26:30] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-015.client.tudelft.eduvpn.nl)
[12:27:48] *** Quits: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au) (Remote host closed the connection)
[12:28:04] *** Joins: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au)
[12:28:46] *** Joins: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt)
[12:29:21] <Bou> what's the type of "where", of "player", and of your function?
[12:29:27] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Client Quit)
[12:29:39] <dave0> ,cc int player; int nope; void foo(int *where) { if(where == &player) { puts("jolly good show "); } else { puts("dag-nab-it "); } } int main(void) { foo(&player); foo(&nope); }
[12:29:41] <candide> dave0: jolly good show  dag-nab-it
[12:29:47] *** Joins: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt)
[12:30:07] *** Quits: angelacrust (~angelacru@223.233.69.74) (Quit: Client closed)
[12:30:10] <greeter> player is a struct object, where where is a pointer to struct object
[12:30:28] <greeter> the function is void
[12:31:09] *** Joins: j0be (~j0be@user/j0be)
[12:31:12] <dave0> greeter: if you substitute `int` for `struct object` in my code, it will still work
[12:31:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[12:32:11] <greeter> alright let me take a close look at that
[12:33:37] <Batzy> https://bpa.st/IT3A anyone know why line 10 is printing "2" instead of "3"?
[12:33:59] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:34:51] *** Quits: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[12:34:59] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au)
[12:35:31] <dave0> Batzy: line 22 the 1110 is in decimal, line 9 the 0b11 is in binary
[12:35:40] <Batzy> so
[12:35:45] <Batzy> i could've just written & 3
[12:35:46] <Batzy> same output
[12:35:57] <dave0> well lets see what 1110 decimal is in binary
[12:36:02] <dave0> ,cc printf("%x ", 1110);
[12:36:03] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[12:36:05] <candide> dave0: 456
[12:36:28] <Batzy> dave0: im pretending these are bits in binary
[12:36:39] <Batzy> the second cout correctly prints "2" actually
[12:36:40] <dave0> so it's    0b010001010110    and that >>2&3 equals 1
[12:36:51] <Batzy> like the lower 2 bits are always correct
[12:36:54] <Batzy> but the upper 2 are not
[12:37:39] <dave0> does line 22   int128 a = 0b1110;   give you the right answer?
[12:37:58] <Batzy> yeah actually all lower bits
[12:38:00] <Batzy> work fine
[12:38:03] <Batzy> dave0: let me explain
[12:38:28] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[12:38:45] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[12:38:48] <Batzy> a is going to be an integer with just 0's and 1's. Every 2 positions of a I will pretend are 0-3 value (since i need 2 bits to represent those)
[12:38:56] <Batzy> so im reading a, two positions at a time
[12:39:36] <Batzy> if i change 111011 it's printing 2 0 3. the lower 2 bits there are 11 which is 3
[12:39:41] <greeter> thank you for your help again dave0 and Bou. no idea why i couldn't get it to work before and it's working now. finally fixed an irksome bug though :-)
[12:39:51] <Batzy> then 10 should be 2 but it isnt
[12:39:58] <Batzy> and the top 2 bits, 11, should be 3
[12:41:00] <Bou> with 0b1110 I get "3 2" as expected
[12:41:20] <Batzy> im going to be given an int is the only problem
[12:41:36] <Bou> aha, then you need to convert that yourself
[12:42:21] <Batzy> is that hard
[12:44:02] *** Joins: vitimiti (~Celtor@2a01:4c8:1400:1025:f530:a06:7fe4:9d2c)
[12:44:31] <Batzy> ok let me experiment
[12:44:31] <Batzy> ty
[12:44:38] <dave0> Batzy: so you are converting between decimal and binary, 2 digits at a time?
[12:44:49] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:45:24] <Bou> converting decimal 10101 to binary 10101 shouldn't be too hard, it's just... unusual
[12:48:11] <Batzy> nvm it works
[12:48:13] <Batzy> i got it
[12:48:41] *** Joins: namkeleser (~namkelese@101.175.155.55)
[12:49:07] <Batzy> i lied about it being decimal 10101 or whatever
[12:49:10] <Batzy> apparently
[12:50:05] <greeter> "use paint" "You spend your coin" have to admit that i/o made me laugh. not quite what i intended XD
[12:51:52] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[12:55:02] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[12:56:57] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:58:32] *** Quits: ntfls^ (~ntfls@50-243-220-243-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[12:59:35] *** Quits: nexus (~nexus@87-97-82-188.pool.digikabel.hu) (Ping timeout: 256 seconds)
[13:01:26] *** Joins: nexus (~nexus@87-97-88-232.pool.digikabel.hu)
[13:05:38] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[13:05:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:06:29] *** Quits: mahmutov_ (~mahmutov@37.155.47.251) (Quit: WeeChat 3.1)
[13:10:55] *** Quits: alch (~alch@151.18.230.29) (Read error: Connection reset by peer)
[13:12:44] *** Joins: dsrt^ (~dsrt@50-243-220-243-static.hfc.comcastbusiness.net)
[13:13:10] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:7a79:39cf:e237:692c)
[13:14:39] *** Joins: alch (~alch@mi-18-35-12.service.infuturo.it)
[13:17:41] *** Joins: mahmutov (~mahmutov@37.155.47.251)
[13:19:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:21:06] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.137)
[13:21:37] *** Quits: mixfix41 (~sdenynine@user/mixfix41) (Ping timeout: 240 seconds)
[13:25:58] *** Quits: HP55555 (~HP51248@49.205.97.197) (Ping timeout: 250 seconds)
[13:28:08] *** con3_ is now known as con3
[13:31:45] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:33:59] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:37:40] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Quit: butterflies in 1024 bits mobius trumpets)
[13:39:17] *** Joins: magla (~gelignite@55d44736.access.ecotel.net)
[13:40:30] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:45:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:46:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:49:21] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[13:49:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[13:54:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:55:08] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[13:57:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[13:58:44] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:59:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:00:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:02:19] *** Quits: namkeleser (~namkelese@101.175.155.55) (Quit: Client closed)
[14:04:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:07:26] *** Joins: plastico (~plastico@neomutt/plastico)
[14:10:04] *** Quits: phaisedArray (~phaise@gateway/tor-sasl/phaise) (Quit: phaisedArray)
[14:10:50] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[14:10:53] *** phaise is now known as phaisedArray
[14:13:32] *** Joins: egm (~egm@user/egm)
[14:15:41] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:17:23] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 252 seconds)
[14:21:39] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:22:02] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[14:22:03] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:27:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[14:27:52] *** Joins: Atque (~Atque@user/atque)
[14:27:53] *** Joins: CaCode (~CaCode@user/cacode)
[14:31:55] *** Joins: sebbu (~sebbu@user/sebbu)
[14:32:38] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[14:33:30] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:46] *** Quits: Jong (~Jong@2620:10d:c090:400::5:74b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:33:55] *** Joins: ymwm (~yingmanwu@240e:37a:40c9:3700:11e1:e123:e29:2f69)
[14:34:02] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:11] *** Joins: csrf (~csrf@user/csrf)
[14:34:24] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:34:51] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:35:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[14:36:59] *** Joins: malloy (~jimery@120.235.172.170)
[14:37:15] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[14:37:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[14:40:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:41:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:45:40] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[14:47:48] *** Joins: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr)
[14:49:59] *** Joins: Atque (~Atque@user/atque)
[14:54:43] <cassepipe> Hi ! I can't understand the message from the address sanitizer. It says I am freeing an address that was not malloced but shows where it was previously allocated. The alloc happens in the parent process and the free in the child process but twkm told me here that it should not be a problem. I am a bit confused : https://imgur.com/a/I556KVY
[14:56:47] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:57:04] <cassepipe> And I know it is not a false positive because linux tells me : free(): invalid pointer
[14:59:40] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[14:59:58] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:01:25] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[15:02:03] *** Joins: vitimiti_ (~Celtor@2a01:4c8:1400:1025:7fcc:dd4b:c072:8355)
[15:04:05] *** Quits: yggdrasil (~yggdrasil@67-0-78-217.albq.qwest.net) (Ping timeout: 250 seconds)
[15:04:18] *** Joins: cp_rox (~cp_rox@eduroam-external-69.leeds.ac.uk)
[15:04:44] *** Joins: jancoow (~jancoow@user/jancoow)
[15:05:56] *** Joins: lole[m]1 (~lolecfxre@2001:470:69fc:105::1:dffe)
[15:06:03] *** Joins: yggdrasil (~yggdrasil@75-161-7-249.albq.qwest.net)
[15:06:17] *** Quits: vitimiti (~Celtor@2a01:4c8:1400:1025:f530:a06:7fe4:9d2c) (Ping timeout: 256 seconds)
[15:07:16] *** Joins: icy_troubles (~icy_troub@2605:8d80:646:2208:d354:8f74:371b:2a96)
[15:08:00] *** Quits: icy_troubles (~icy_troub@2605:8d80:646:2208:d354:8f74:371b:2a96) (Read error: Connection reset by peer)
[15:10:20] *** Joins: CaCode (~CaCode@user/cacode)
[15:12:17] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 240 seconds)
[15:12:23] *** Joins: namkeleser (~namkelese@101.175.155.55)
[15:12:27] *** Quits: CaCode (~CaCode@user/cacode) (Max SendQ exceeded)
[15:12:46] *** Joins: CaCode (~CaCode@user/cacode)
[15:13:53] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:19:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:20:32] *** Quits: mahmutov (~mahmutov@37.155.47.251) (Ping timeout: 240 seconds)
[15:22:24] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:7a79:39cf:e237:692c) (Quit: Leaving)
[15:26:01] *** Quits: cp_rox (~cp_rox@eduroam-external-69.leeds.ac.uk) (Quit: Client closed)
[15:26:44] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[15:26:56] *** Joins: Atque (~Atque@user/atque)
[15:26:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:27:20] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[15:29:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:31:32] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:32:27] *** Joins: not_a_robot06 (~hashim@188.211.162.182)
[15:33:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:34:23] *** Quits: nexus (~nexus@87-97-88-232.pool.digikabel.hu) (Ping timeout: 252 seconds)
[15:35:51] *** Joins: nexus (~nexus@77-234-80-249.pool.digikabel.hu)
[15:39:28] <NRK> cassepipe: consider using a paste service instead of screenshots. https://dpaste.com
[15:39:47] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[15:40:08] *** Joins: tusko (~yeurt@user/tusko)
[15:40:31] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[15:41:20] <Xgc> cassepipe: You should be able to provide a complete test case which produces the behavior, if your assumption about your use of fork/free is correct.
[15:41:25] <Inline__> cassepipe: https://stackoverflow.com/questions/23440132/fork-after-malloc-in-parent-does-the-child-process-need-to-free-it
[15:42:45] <cassepipe> It turns out I did not read the error message correctly, what is says is that it is *in* a region that was previously allocated. Sorry about that.
[15:43:06] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:43:13] <cassepipe> NRK: I thought for a simple error message with colored output it would make sens to use an image
[15:43:21] <Xgc> cassepipe: Right. So your parent process probably freed it before the fork.
[15:44:19] <cassepipe> More like the pointer was allocated but then the pointer value was changed in the meantime and so it's not freeable anymore
[15:44:20] *** Joins: eddybilley (~freddieti@2a02-a440-c664-1-cc8d-c436-dd4c-6477.fixed6.kpn.net)
[15:44:26] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[15:44:47] <cassepipe> The subprocess needs that memory so no
[15:44:47] *** Joins: bindu (~bindu@user/bindu)
[15:45:06] <Xgc> cassepipe: Nah. valgrind would not know that and you would not have a reference to the original memory if the pointer were changed.
[15:45:14] <cassepipe> Inline__: Yes, I had read that thanks
[15:45:17] <Inline__> ok
[15:45:19] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[15:45:40] *** Inline__ is now known as Inline
[15:45:49] <cassepipe> Xgc: It's not valgrind it's the address sanitizer in gcc
[15:46:09] <Xgc> cassepipe: The message, if accurate, is saying the address "was" allocated, but is not longer allocated.
[15:46:54] <Xgc> cassepipe: It's not about changing the address.  The parent likely freed the memory before the fork, or the child freed it already, which you didn't notice.
[15:47:08] <cassepipe> Xgc: But I found the error, and it was that, I  malloced a pointer and used a pointer for iteration and assigned it after instead of before starting iteration
[15:47:50] <Xgc> cassepipe: Well, you can certainly have a pointer into some memory, but is not referring to the beginning, which would be an error.
[15:48:06] <cassepipe> Xgc: And it says the pointer is inside a region that was allocated so it makes sense
[15:48:10] <Xgc> That's a slightly different kind of error.
[15:48:14] <cassepipe> Xgc: Yes exactly
[15:48:26] *** Joins: raym (~raym@user/raym)
[15:48:37] <cassepipe> Even the OS was not happy about it :)
[15:48:43] <Xgc> and all this has nothing to do with parent/child processes.
[15:49:05] <cassepipe> Xgc: Indeed, nothing to do with that.
[15:49:28] <cassepipe> Xgc: Problem was located between the chair and computer :)
[15:49:41] <cassepipe> (as genereally is)
[15:49:42] <Xgc> We all have lots of those.
[15:50:06] *** Joins: Rounin (~david@84.212.130.215)
[15:52:34] *** Joins: bladerunner1 (~bladerunn@103.167.123.127)
[15:53:51] <bladerunner1> so I saw a code that does something like this: str_buffer = str_variable + strlen(str_variable);
[15:54:00] <bladerunner1> what does that exactly do?
[15:54:32] *** Joins: icy_troubles (~icy_troub@2605:8d80:649:dd89:aff2:827d:59f3:aaee)
[15:54:54] <bladerunner1> if strlen returns an integer, how can it be added with strings?
[15:54:56] *** Quits: icy_troubles (~icy_troub@2605:8d80:649:dd89:aff2:827d:59f3:aaee) (Read error: Connection reset by peer)
[15:55:15] <Xgc> bladerunner1: Points to a position in str_variable that is at the '\0' string terminator.
[15:55:40] <Xgc> bladerunner1: Pointer arithmetic allows: address + integer
[15:55:57] <dave0> bladerunner1: points to the end of the string
[15:56:23] <dave0> bladerunner1: youcould think of it as   str_buffer = &str_variable[strlen(str_variable)];
[15:56:46] <Xgc> bladerunner1: Typically, they will be appending and just need a pointer to the next char in the string (the current terminator in this case).
[15:57:57] *** Joins: HP55555 (~HP51248@49.205.97.197)
[15:58:45] <Xgc> *next char in the array
[15:59:45] <not_a_robot06> Hey guys, I'm learning C and I'm trying to make a palindrome checker, but using pointers instead of array subscripting. Here's my solution: https://clbin.com/0NCcu ... but it doesn't seem to want to play nicely whenever the input has symbols or spaces... any clues?
[16:00:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:02:47] <Xgc> not_a_robot06: Is there are reason you didn't just use fgets to read your line of input?
[16:04:18] <not_a_robot06> Xgc: the book I'm learning from (C Programming, A Modern Approach, 2nd Edition) hasn't taught me that yet.
[16:04:30] <Xgc> not_a_robot06: Try to avoid unnecessary logic if you're just asking about a palindrome check.  Just remove the reading part entirely.
[16:05:06] <Xgc> not_a_robot06: So just enter your data via literals instead.  Keep it very simple.
[16:05:36] *** Joins: lureevar (~lureevar@2804:18:481d:6287:274:abff:9ae0:d2f6)
[16:05:41] <Xgc> not_a_robot06: char inputData[] = "this is not a palindrome";  // But I'm try a test.
[16:06:10] <Xgc> Always reduce the test to the most trivial case.
[16:06:36] <not_a_robot06> but I need it to handle user input
[16:06:57] <not_a_robot06> I'm confused, what would using literals do?
[16:07:01] <Xgc> not_a_robot06: Not yet.  You asked about palindrome.  If you want to know about user input, ask that separately.
[16:07:12] <not_a_robot06> oh ok
[16:07:32] <Xgc> not_a_robot06: You avoid all the mistakes in just trying to read the input, which is likely where some of the problems exist.
[16:08:26] <not_a_robot06> I think I know for sure that the problem is in reading the input, since it seems to do weird stuff with symbols and spaces
[16:08:28] <Xgc> Divide and conquer.
[16:08:34] <not_a_robot06> i think i should phrase my question differently
[16:08:49] <Xgc> Right.  Focus in on the real problem.  Remove all the rest.
[16:08:58] <not_a_robot06> The loop at line 35 doesn't seem to be working, for whatever reason
[16:09:20] *** Joins: icy_troubles (~icy_troub@2605:8d80:643:4205:b5f0:f2ee:d4bd:2d03)
[16:09:20] <Xgc> not_a_robot06: Write a program / test case that includes just that part.
[16:09:46] *** Quits: icy_troubles (~icy_troub@2605:8d80:643:4205:b5f0:f2ee:d4bd:2d03) (Read error: Connection reset by peer)
[16:09:47] <not_a_robot06> alr I'll do that now
[16:10:04] <bladerunner1> alright so this is how I get it (about the variables), the addition simply moves the pointer to point at the end of the string
[16:10:14] <Xgc> These are techniques you're learn are most important.
[16:10:19] <Xgc> you'll
[16:10:30] <cassepipe> bladerunner1: This is exact
[16:10:43] <cassepipe> bladerunner1: This is called pointer arithmetic
[16:11:10] <bladerunner1> yeah I think I didn't pay enuf attention to it when I was learning that lol
[16:11:14] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 252 seconds)
[16:11:40] <cassepipe> What is called a string in C is just a chunk of memory which by convention, ends with '\0'
[16:11:42] <Xgc> bladerunner1: It didn't move the pointer. You have two pointers. A second pointer was calculated.  The first did not change.
[16:12:25] <bladerunner1> yeah sorry, I phrased it wrong
[16:12:35] <cassepipe> Xgc: Oh I missed the formulation. You are thorough.
[16:14:17] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[16:14:54] *** Joins: malloy (~jimery@120.235.172.170)
[16:15:43] <cassepipe> bladerunner1: So when somebthing handles you a string in C, it actually handles you a address with the promise that it points to a chunk of memory you have access to and that in that chunk there will a \0 that will mark the end of the data you want, probably at the end of the chunk if the allocation was done precisely.
[16:15:48] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[16:16:20] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[16:16:32] *** Quits: HP55555 (~HP51248@49.205.97.197) (Ping timeout: 240 seconds)
[16:19:00] *** Joins: mahmutov (~mahmutov@37.155.47.251)
[16:19:00] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[16:20:08] *** Joins: m4v (~znc@ubuntu/member/m4v)
[16:20:24] <bladerunner1> yeah, I understood what a pointer is, but then there are parts which are again confusing, like hacky pointers
[16:20:52] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[16:20:57] <bladerunner1> oh it's not a actual thing
[16:21:06] <dave0> bladerunner1: hacky pointers are playing with fire
[16:21:16] <bladerunner1> huh what
[16:21:27] <dave0> try to be very conservative when using pointers
[16:21:51] <bladerunner1> hmm
[16:21:57] <dave0> there are many rules and dire consequenses
[16:22:02] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[16:22:49] *** Joins: kts (~kts@103.73.237.62)
[16:22:59] *** Joins: Rynn (~rynn@216.30.158.198)
[16:23:30] <bladerunner1> it took me 3 days to learn python, and here am I after months still tryna understand C
[16:26:02] <not_a_robot06> Xgc: I made a simple test case... and it prints the exact same output for both the normal array and the reversed array; but still tells me they're not the same. Here's the test: https://clbin.com/xt9eT
[16:26:34] <sham1> cassepipe: not just by convention, but by definition
[16:27:14] <cassepipe> sham1: Right.
[16:28:03] <not_a_robot06> Xgc: I also made a slight modification to the original to tell me when it encounters a non-alphabet char, and it seems that isalpha is working perfectly fine, so i have no idea where the problem lies now... since when sentences are inputed, the message array and reverse array both have either a space or a random letter or two in them for no reason, so I don't think it's the palindrome_check function.
[16:28:05] <not_a_robot06> Here's the modification: https://clbin.com/ClfTI
[16:28:28] *** Joins: soul-d (~uknown@user/soul-d)
[16:28:29] <cassepipe> bladerunner1: Started with the 5 first lessons of this : https://www.youtube.com/watch?v=YoXxevp1WRQ&list=PLhQjrBD2T382_R182iC2gNZI9HzWFMC_8
[16:28:30] <candide> Title of cassepipe's link: CS50 2020 - Lecture 0 - Scratch - YouTube
[16:28:41] <Xgc> not_a_robot06: Not much of a simplification.  You could have done much better.
[16:29:11] <not_a_robot06> Xgc: wdym
[16:29:12] *** Joins: pulse (~pulse@user/pulse)
[16:29:18] <not_a_robot06> I was trying to simulate user input
[16:29:22] <cassepipe> bladerunner1: I like the from scratch approach and it tells you about the memory layout of a program, stack and memory
[16:29:50] <bladerunner1> cassepipe, thank you. I'll watch all of it
[16:29:54] <not_a_robot06> at this point, I'm almost certain the problem *is* in handling user input.
[16:30:01] <Xgc> not_a_robot06: I suggested you completely remove user input.  Just pass strings to the check function to see whether correct data would result in the proper result.
[16:30:02] <cassepipe> bladerunner1: This was also quite useful : https://alumni.cs.ucr.edu/~pdiloren/C++_Pointers/
[16:30:20] <not_a_robot06> since the reversed array is reversed as expected, but the actual message is sorta screwed up
[16:30:23] <Xgc> not_a_robot06: Strip that entirely from your program.
[16:30:23] *** Quits: dudek (~dudek@185.150.236.127) (Quit: Leaving)
[16:30:37] <not_a_robot06> Xgc: alr, whatever you say
[16:30:50] <not_a_robot06> I'll just pass two arrays to palindrome_check, and see what happens
[16:31:05] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[16:31:21] <Xgc> not_a_robot06: In main... { palindrome_check("abccba", "abccba"); }   If you think you have a reverse issue, test that and only that function.
[16:31:46] <sham1> This is why one writes unit tests
[16:31:47] <cassepipe> bladerunner1: C seems quirky but you'll get used to it, after one year or so :) You just have to practice, stumble over something, come ask here, confront compiler errors, it will sink in
[16:31:51] *** Joins: yagamisato (~SingSong@user/yagamisato)
[16:32:04] <sham1> ,justtry
[16:32:33] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[16:32:55] <cassepipe> bladerunner1: Most here will recommend the K&R book
[16:32:56] *** Joins: HP55555 (~HP51248@49.205.97.197)
[16:33:15] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[16:33:18] <bladerunner1> :) Ok I'll take look into that too
[16:33:30] <sham1> Err, I can't remember what the factoid is called. Anyway, C is not really a language where one can just try things until they work, because of the amount of undefined and implementation-defined behavior and other weirdness
[16:33:37] <clarity> ,tias
[16:33:37] <candide> "Try It And See" may work in other languages, but not in C due to the nature of undefined behavior/unportable code. Such coding-by-experimentation often leads to situations such as "But it worked fine earlier!" and/or "But it worked on my machine!". https://ramblings.implicit.net/c/2014/04/20/c-is-not-a-try-it-and-see-language.html
[16:33:59] *** Quits: namkeleser (~namkelese@101.175.155.55) (Quit: Client closed)
[16:34:12] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:34:22] <sham1> A program can appear to work on one machine. Even on a single OS or architecture, but it can break somewhere else
[16:34:25] <cassepipe> bladerunner1: Trying to implement basic functions of the libc is considered a good exercise for starters
[16:35:07] *** Joins: Msandoy_ (~Msandoy@telia-590849-163.connect.netcom.no)
[16:35:18] <cassepipe> bladerunner1: And you may want head over to codewars if you wanna make silly but helpful exercises
[16:36:11] <Xgc> The pair of: 1) primitive and 2) difficult (near impossible) to know if you used the language properly...   are not a good combination.
[16:36:48] <bladerunner1> sure, well I'm late for work XD gtg. thanks guys
[16:36:51] *** Quits: bladerunner1 (~bladerunn@103.167.123.127) (Quit: WeeChat 3.4.1)
[16:37:27] <sham1> This stuff shouldn't be taken as discouragement, but as setting an expectation
[16:37:29] <Xgc> People think about (1) and conclude (I love it) and not much about (2)... which, over time, can lead to the opposite conclusion.
[16:37:48] <Xgc> It's a challenge.
[16:38:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:38:52] *** Quits: lureevar (~lureevar@2804:18:481d:6287:274:abff:9ae0:d2f6) (Quit: lureevar)
[16:39:16] <Xgc> If you're in the "Love it" stage, you're probably early in the learning process (the first 10 / 15 years).
[16:39:23] <dave0> heh
[16:41:38] *** Joins: tm512` (~tm512@50.53.132.213)
[16:41:49] *** Quits: tm512` (~tm512@50.53.132.213) (Changing host)
[16:41:49] *** Joins: tm512` (~tm512@user/tm512)
[16:42:10] <not_a_robot06> Xgc: well, now I've kind of given up on making fill_arrays filter user input, and just made palindrome_check ignore non-alphabetical characters, but I gtg rn so I'll continue working on it later.
[16:42:15] <not_a_robot06> thanks for the help tho
[16:42:25] *** Quits: not_a_robot06 (~hashim@188.211.162.182) (Quit: WeeChat 3.2.1)
[16:42:28] *** Joins: shivesh (~shivesh@user/shivesh)
[16:43:25] <dave0> the first 10 / 15 years is the honeymoon stage ;-)
[16:43:42] *** Quits: kts (~kts@103.73.237.62) (Ping timeout: 252 seconds)
[16:43:48] *** Quits: tm512 (~tm512@user/tm512) (Ping timeout: 240 seconds)
[16:45:44] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[16:48:03] *** Joins: AS9125C (~u0_a432@120.29.76.245)
[16:48:10] <AS9125C> hi
[16:48:38] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[16:50:14] *** Joins: pulse (~pulse@user/pulse)
[16:51:15] *** Quits: AS9125C (~u0_a432@120.29.76.245) (Quit: leaving)
[16:51:48] *** Quits: HP55555 (~HP51248@49.205.97.197) (Ping timeout: 250 seconds)
[16:53:07] *** Quits: egm (~egm@user/egm) (Read error: Connection reset by peer)
[16:54:37] *** Joins: whitecrow (~whitecrow@79.127.81.89)
[16:55:07] *** grumble is now known as rawr
[16:55:27] <Akawama[m]> for(int a = 0; a < 3; ++a) { printf("%d ", a); } Shouldn't this print just '1, 2' instead of '0, 1, 2', since increment happens before printf executes?
[16:55:37] *** Joins: vysn (~vysn@user/vysn)
[16:56:50] <Xgc> Akawama[m]: The increment happens at the end of the first pass.
[16:57:00] <dave0> Akawama[m]: for(a; b; c) { d; }    is like     a; while(b) { d; c; }
[16:57:37] <dave0> Akawama[m]: break and continue work a little different but the idea is the same
[16:58:01] <whitecrow> I'm in a strange situation and I can not understand the situation. If argc is equal to 3 and optind is equal to 1 therefore argc - optind should be equal to 2 but it return 1 !!!!!!!!!!!! https://postimg.cc/cKKsNB03
[16:58:53] <Akawama[m]> So is there no difference between for( ; ; ++a) and for(; ; a++) in terms of result?
[16:59:05] <Xgc> Correct.
[16:59:19] <Akawama[m]> Got it, thanks guys.
[16:59:34] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[16:59:38] <Xgc> whitecrow: Try printing the intermediate results after each statement.
[16:59:59] <whitecrow> Xgc, check link, i debug it using gdb
[17:00:21] <Xgc> whitecrow: What does line 95 do?
[17:00:32] <dave0> whitecrow: i = argc - optind; i = argc - i;    doing some substitution  i = argc - (argc - optind);  which is   i = optind;
[17:01:09] <Xgc> whitecrow: You're just not following closely enough.  You're missing a step.
[17:01:11] <dave0> whitecrow: where did you find this code?
[17:01:15] <whitecrow> dave0, yes i know but it drive me craze, and i decide to write it line by line
[17:01:37] <whitecrow> dave0, i didn't find i try to write some thing
[17:01:49] <sham1> Also, why is there a cast to int from argc and optind
[17:01:51] <sham1> They're always int
[17:02:32] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.137) (Ping timeout: 240 seconds)
[17:02:51] <Xgc> whitecrow: 3 - 1 == 2,  3 - 2 == 1
[17:03:09] <whitecrow> sham1, i know, as i said, I checked for anything that might have generated an error
[17:04:13] <whitecrow> Xgc, i didn't get it, did you confirm ?
[17:04:43] <Xgc> whitecrow: The result is correct.  You're just missing that i is being changed to 2 and then subtracted from argc.
[17:05:00] *** Joins: Rynn (~rynn@216.30.158.198)
[17:05:56] <whitecrow> Xgc, no wait a minute, considered line 95 only. that line should result 2, but it result 1
[17:06:06] <Xgc> whitecrow: It does not.
[17:06:31] <Xgc> whitecrow: Post the test case.  I can only go by your initial assumptions, which might be wrong.
[17:06:39] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[17:06:46] <whitecrow> let me change the code and take screen shot
[17:07:08] <Xgc> whitecrow: No screenshot.  A test case is text and compilable.
[17:07:29] *** Quits: magla (~gelignite@55d44736.access.ecotel.net) (Quit: Stay safe!)
[17:07:39] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:07:40] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[17:07:53] <sham1> Screenshotting code is a cardinal mistake
[17:09:12] <phaisedArray> What you don't want to get out your OCR parsers to help this guy?
[17:09:16] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[17:10:30] *** Joins: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net)
[17:10:32] <sham1> Not particularly
[17:11:22] *** Quits: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net) (Remote host closed the connection)
[17:13:02] *** Quits: alch (~alch@mi-18-35-12.service.infuturo.it) (Ping timeout: 240 seconds)
[17:13:03] <whitecrow> Xgc, https://postimg.cc/xXdQvDpY
[17:13:18] <whitecrow> https://postimg.cc/wyDYq6M5
[17:13:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:14:24] *** Joins: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net)
[17:14:57] *** Joins: alch (~alch@mi-18-57-235.service.infuturo.it)
[17:14:59] <Xgc> whitecrow: Please follow the entire conversation.
[17:15:45] <Xgc> whitecrow: That output is entirely unhelpful.
[17:15:54] <whitecrow> hahaha
[17:15:56] <whitecrow> lol
[17:16:31] *** Quits: whitecrow (~whitecrow@79.127.81.89) (Quit: Leaving)
[17:16:42] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e51b:ac6b:af96:5d6c) (Ping timeout: 252 seconds)
[17:17:11] *** Quits: m25n (~m25n@h66-222-117-47.mdsnwi.tisp.static.tds.net) (Remote host closed the connection)
[17:17:45] <Xgc> Probably some gdb mistakes in this as well.  It's useless.
[17:19:44] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:20:59] *** Joins: MrBenC (Ben@mrbenc.net)
[17:20:59] *** Quits: MrC (Ben@mrbenc.net) (Killed (lithium.libera.chat (Nickname regained by services)))
[17:20:59] *** MrBenC is now known as MrC
[17:21:40] *** Joins: strajder (~strajder@user/strajder)
[17:21:41] *** Joins: FluffyMask (~masque@user/fluffymask)
[17:27:17] *** Quits: ymwm (~yingmanwu@240e:37a:40c9:3700:11e1:e123:e29:2f69) (Ping timeout: 240 seconds)
[17:29:03] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:156d:4cd3:81cf:f50c)
[17:32:07] *** Joins: Gladius (~Gladius@2601:245:4580:ac50:af08:1f1a:3441:5f3b)
[17:32:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:32:45] *** Joins: pert (~pert@fsf/member/pert)
[17:35:19] *** Quits: Gladius (~Gladius@2601:245:4580:ac50:af08:1f1a:3441:5f3b) (Quit: Leaving)
[17:35:27] *** Joins: Guest8 (~Guest8@54f72d83.static.cust.trined.nl)
[17:35:56] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:36:07] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[17:36:26] *** Joins: kts (~kts@103.73.237.62)
[17:38:58] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[17:39:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[17:40:17] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:40:26] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[17:40:46] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 250 seconds)
[17:46:45] *** Quits: Guest8 (~Guest8@54f72d83.static.cust.trined.nl) (Quit: Client closed)
[17:48:44] *** Quits: Msandoy_ (~Msandoy@telia-590849-163.connect.netcom.no) (Remote host closed the connection)
[17:51:21] *** Joins: moog (~moog@107.126.53.83)
[17:51:34] *** Joins: Msandoy (~Msandoy@telia-590832-38.connect.netcom.no)
[17:52:27] *** Joins: Torr (~Torr@user/torr)
[17:53:18] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[17:53:55] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[17:54:21] *** Quits: dsrt^ (~dsrt@50-243-220-243-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:55:47] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Quit: The Lounge - https://thelounge.chat)
[17:56:42] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[17:57:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[17:57:42] *** Joins: meator (~meator@user/meator)
[17:58:30] *** Joins: nisa (~quassel@nbg1.tuxifan.net)
[17:59:00] <nisa> Hey, what's the trick to write a byte to the leftmost side of a word?
[17:59:28] <nisa> `((word & ~0xff) | data)` <- turns out this thing actually gives me the rightmost side
[17:59:57] <ioxzev1z> Shift to the left, & the byte
[18:00:11] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:00:45] <nisa> Can you give me an example? I am always really confused about these shifting and anding operators ^^
[18:00:51] <ioxzev1z> actually nvm just & 0xFF000000
[18:01:06] <ioxzev1z> 0xFF turns to 0x000000FF
[18:01:26] <nisa> `((word & ~0x000000FF) | data)`?
[18:02:12] <nisa> My word is a 64bit word tho so it'd be 0x00000000000000FF right?
[18:02:28] <ioxzev1z> That's the right side, no?
[18:02:38] <nisa> Oh true
[18:02:39] <ioxzev1z> Your original 0xFF becomes 0x000000FF
[18:02:44] <nisa> Lol oops
[18:02:46] <nisa> Hold on
[18:02:49] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:02:57] <nisa> `((word & ~0xFF00000000000000) | data)`!
[18:03:11] <fizzie> data → (data << 56)
[18:03:43] <fizzie> Assuming `data` is just the byte. And depending on the type, might need converting first.
[18:03:57] <nisa> `data` is a uint8_t
[18:04:09] <nisa> What does that "→" mean?
[18:04:11] <fizzie> Then it definitely needs converting first.
[18:04:28] <fizzie> Means, replace `data` with `(data << 56)`, except with that conversion too.
[18:04:39] <nisa> Conversion to a word?
[18:05:09] <fizzie> To anything that's wide enough you can shift it all the way to the left. But the type of `word` would be the natural choice.
[18:05:25] *** Joins: princessalicorn (~princess@c-73-255-162-200.hsd1.fl.comcast.net)
[18:05:58] <nisa> Alright.
[18:06:11] <dave0> it could be a function
[18:06:31] <nisa> static_cast<unsigned long>(data) this I would say
[18:06:42] <dave0> how do you feel about uint64_t vs unsigned long long ?
[18:06:50] <fizzie> You'd say that if you were on #c++.
[18:07:05] <nisa> Well, the API returns a unsigned long so I just deal with it I guess
[18:07:12] <fizzie> On this channel, you'd say `(unsigned long) data`.
[18:07:43] <fizzie> ,cc unsigned long word = 0x0102030405060708; uint8_t data = 0xff; word = (word & ~0xff00000000000000) | ((unsigned long) data << 56); printf("%016lx", word); return 0; // for example
[18:07:43] <nisa> fizzie: yeah, I am actually programming in C++ but I joined the C channel since I know that people here usually have further low level knowledge ;-D
[18:07:45] <candide> fizzie: ff02030405060708
[18:08:06] <nisa> Thanks a lot tho
[18:08:24] <nisa> And to extrace the byte I would do `word & 0xFF00000000000000`, right?
[18:08:33] <nisa> *extract
[18:08:50] <fizzie> If you want it as a byte, `(word >> 56)` would be sufficient.
[18:08:57] <nisa> Oh okay
[18:09:03] <nisa> Yeah makes sense
[18:09:23] <nisa> Okay let's give this a try!
[18:10:01] <fizzie> (`word & 0xff00000000000000` would give you 0xde00000000000000 out of 0xdeadbeeff00dd00d, so it does "extract" the byte, but maybe not in the way you want.)
[18:10:06] <Bou> ,cc uint8_t data = 0x12; uint32_t word = 0x345678; word |= data << (8 * sizeof word - 8); printf("%x", word); // doesn't it promote automatically?
[18:10:08] <candide> Bou: 12345678
[18:10:32] <fizzie> Bou: It promotes to `int`, which usually isn't good enough for 64 bits.
[18:11:16] <fizzie> ,cc uint8_t data = 0x12; uint64_t word = 0x345678; word |= data << (8 * sizeof word - 8); printf("%"PRIx64, word); // as seen here
[18:11:18] <candide> fizzie: [warning: left shift count >= width of type [-Wshift-count-overflow]]  runtime error: shift exponent 56 is too large for 32-bit type 'int'  12345678
[18:11:29] <dave0> ,cc uint64_t pokebyte(uint64_t word, uint64_t byte) { uint64_t mask = 0xff00000000000000; return (word & ~mask) | (byte << 56 & mask); } printf("%lx ", pokebyte(0x0102030405060708, 0xff));
[18:11:31] <candide> dave0: ff02030405060708
[18:11:49] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[18:11:50] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:12:20] <dave0> no casts
[18:12:56] <fizzie> Come on, do the PRIx64 thing if you're using uint64_t. ;)
[18:13:17] <nisa> [39421.199853] kwin_wayland[1244]: segfault at 35806e0 ip 00000000035806e0 sp 00007fff46c0dbb8 error 15
[18:13:17] <nisa> Uh oh, it crashed kwin when I executed it? Huh. Weird.
[18:13:24] <fizzie> ,works
[18:13:24] <candide> It works it works! Omg omg omg! I mean it compiles. Now what's a segfault?
[18:13:48] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-015.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[18:13:53] <dave0> i refused to learn %zu so there no chance i'll learn PRI something
[18:14:44] <nisa> Just from the mathematical side, does this make sense? Ignore the C++ casts and think of them as C casts lol
[18:14:44] <nisa> https://www.toptal.com/developers/hastebin/gakuripopu.cpp
[18:14:45] <candide> Title of nisa's link: Hastebin: Send and Save Text or Code Snippets for Free | Toptal®
[18:15:09] *** Quits: princessalicorn (~princess@c-73-255-162-200.hsd1.fl.comcast.net) (Changing host)
[18:15:09] *** Joins: princessalicorn (~princess@user/princessalicorn)
[18:16:47] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[18:18:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:20:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:20:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:20:30] *** Joins: wroathe (~wroathe@user/wroathe)
[18:20:32] *** Quits: kts (~kts@103.73.237.62) (Ping timeout: 240 seconds)
[18:21:53] <fizzie> If I interpret that right, you're assuming a big-endian representation for words, which is... kind of unlikely.
[18:22:28] <nisa> fizzie: yeah I just noticed lol, program just crashed at illegal instruction
[18:22:34] <nisa> How would I invert that?
[18:22:59] *** Joins: korg815 (~korg815@user/korg815)
[18:23:10] <fizzie> If you just want to change the byte at the given address (and are okay with assuming little-endian), just go with your original version that writes to the "right side" of the word.
[18:23:44] <nisa> Which is incorrect too. I need it to write to the left side.
[18:23:48] <fizzie> No, you don't.
[18:23:56] <fizzie> You need to write it at the given *address*, presumably.
[18:24:14] <fizzie> On a little-endian system, the lowest-addressed byte is the least-significant one (i.e., the "right side").
[18:24:14] <nisa> Which I am not allowed to because... ptrace
[18:24:32] <nisa> Huh...
[18:25:04] <fizzie> Yes, but the point is, if you read the word 0x0102030405060708 from address X, that meant the byte 0x08 was at address X, 0x07 at address X+1, and so on.
[18:25:13] <fizzie> So just go with that `word = read(addr); word &= ~0xfful; word |= data; write(addr, word);` or equivalent.
[18:25:57] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:26:41] <nisa> Maybe I should Just go for another method of accessing memory
[18:26:51] <fizzie> Alternatively, if you want to make it endian-agnostic, you can go with: `word = read(addr); *(unsigned char *) &word = data; write(addr, word);`.
[18:27:18] <nisa> Makes sense.
[18:29:55] <nisa> Ohhh yeahhh that's a great solution actually
[18:30:04] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[18:30:48] <nisa> So now I am doing: unsigned long word = readWord(addr); return *(uint8_t*)(&word);
[18:30:55] <nisa> for reading
[18:31:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:31:30] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[18:33:13] <nisa> Okay nice so now I have ruled out my readByte/writeByte as causes...
[18:33:18] <nisa> Since it's still crashing lol
[18:34:28] <nisa> Why can't everything simply be big endian :-((((
[18:34:56] *** Quits: nexus (~nexus@77-234-80-249.pool.digikabel.hu) (Ping timeout: 245 seconds)
[18:35:07] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Remote host closed the connection)
[18:35:14] *** Joins: Hexmind_ (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[18:35:24] *** Joins: Inline__ (~Inline@p200300cd473cb900eebf25766a02ea81.dip0.t-ipconnect.de)
[18:35:29] *** Quits: Inline (~Inline@p200300cd473cb900eebf25766a02ea81.dip0.t-ipconnect.de) (Killed (zirconium.libera.chat (Nickname regained by services)))
[18:35:29] *** Inline__ is now known as Inline
[18:35:41] *** Joins: alex_ (~alex11@user/alex11)
[18:35:46] <sham1> Little endian has certain advantages
[18:35:48] *** Joins: tnahsin (~Nishant@49.37.242.151)
[18:35:58] <nisa> Which ones?
[18:36:19] *** Quits: tnahsin (~Nishant@49.37.242.151) (Read error: Connection reset by peer)
[18:36:24] <sham1> Well for example, it's quite easy to go from a wider type to a narrower type
[18:36:40] *** Joins: minto (~mintograd@47.201.5.61)
[18:36:41] *** Joins: nexus (~nexus@92-249-179-42.pool.digikabel.hu)
[18:36:45] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[18:36:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-855f-50e7-28b4-6a40.res6.spectrum.com)
[18:36:50] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[18:37:03] <nisa> Oh yeah true
[18:37:18] *** Joins: AlanRoxdale (~ARoxdale@93.107.214.80)
[18:37:25] *** Joins: jfsimon1981_b (~jfsimon19@38.60.6.84.rev.sfr.net)
[18:37:27] *** Joins: Doraemon (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de)
[18:37:30] *** Joins: krok (~k@fork.wtf)
[18:37:32] *** Joins: Torr (~Torr@user/torr)
[18:37:34] *** Quits: nishant (~Nishant@49.37.242.151) (Read error: Connection reset by peer)
[18:37:34] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 240 seconds)
[18:38:03] *** Joins: seninha (~chatzilla@user/seninha)
[18:38:09] *** Joins: pr-asadi_ (~pr-asadi@2602:fccf:1:1150::)
[18:38:09] *** Joins: FragByte_ (~christian@user/fragbyte)
[18:38:15] *** Joins: nun- (~nun@178.115.236.156.static.drei.at)
[18:38:27] *** Joins: amorel__ (~amorel@mx.mompl.net)
[18:38:32] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[18:38:33] <dave0> big endian also has advantages.. humans write numbers in big endian
[18:38:36] *** Joins: Nadalle (~elladan@user/elladan)
[18:38:37] *** Joins: unlink_ (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[18:38:51] *** Joins: princess (~princess@c-73-255-162-200.hsd1.fl.comcast.net)
[18:38:56] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[18:39:06] <sham1> For example uint16_t *narrow = (uint16_t *)wide; can be a no-op, because the address to the lowest 16 bytes of a 32 bit word is the same as the address of the 32 bit word
[18:39:13] <nisa> Yeah
[18:39:28] <nisa> Now my code is cleaner but still not working D:
[18:39:52] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[18:39:52] <sham1> dave0: indeed. If only we had these things that could take the numbers and such humans understand and make them into something the machine understands
[18:40:00] *** Joins: dakship- (~dakship@2400:8904::f03c:92ff:feee:b97d)
[18:40:05] *** Joins: anshupatia_ (uid29854@id-29854.helmsley.irccloud.com)
[18:40:05] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[18:40:12] *** Joins: Dreamwea- (~Dreamweav@37.48.111.199)
[18:40:16] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[18:40:21] <nisa> Writing a debugger is really really annoying specially if you are new to that topic. My breakpoints DO work but... Only most of the time, not always.
[18:40:23] *** Joins: p_____ (~dyeplexer@user/dyeplexer)
[18:40:39] *** jmpeax is now known as Guest9419
[18:40:40] <sham1> Something that can turn high-level human concepts into low level machine concepts
[18:40:52] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[18:41:04] *** Quits: noteness (~noteness@user/noteness) (Remote host closed the connection)
[18:41:15] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[18:41:24] *** Joins: noteness (~noteness@user/noteness)
[18:41:25] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[18:41:51] *** Quits: p_____ (~dyeplexer@user/dyeplexer) (Client Quit)
[18:42:04] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: k (~k@fork.wtf) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: mintograde (~mintograd@47.201.5.61) (Remote host closed the connection)
[18:42:05] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: Ap3 (~ape@kanonenjagd.panzer.ninja) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: amorel_ (~amorel@mx.mompl.net) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: princessalicorn (~princess@user/princessalicorn) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: jfsimon1981 (~jfsimon19@38.60.6.84.rev.sfr.net) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: NeoCron (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: andi_ (~andi@user/andi/x-3467420) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: dakship_ (~dakship@172-105-52-34.ip.linodeusercontent.com) (Read error: Connection reset by peer)
[18:42:05] *** Quits: Guest156 (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: novns (~novns@user/novns) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: metaversum (~metaverse@94.13.111.159) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: DreamweaverN (~Dreamweav@2001:1af8:4700:b0d0:a800::) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: tempora (~tempus@user/tempora) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (Ping timeout: 240 seconds)
[18:42:06] *** Nadalle is now known as Elladan
[18:42:06] *** FragByte_ is now known as FragByte
[18:42:07] *** Joins: novns (~novns@user/novns)
[18:42:07] <rustytaco> sham1: you mean like an abycus?
[18:42:08] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:42:09] <rustytaco> wtf
[18:42:15] *** scoobydoob is now known as scoobydoo
[18:42:18] *** Joins: andi_ (~andi@2a01:4f8:c0c:a014::2)
[18:42:18] *** Quits: andi_ (~andi@2a01:4f8:c0c:a014::2) (Changing host)
[18:42:18] *** Joins: andi_ (~andi@user/andi/x-3467420)
[18:42:19] *** Joins: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da)
[18:42:21] *** Joins: tempora (~tempus@user/tempora)
[18:42:33] *** Joins: Torr (~Torr@user/torr)
[18:42:33] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (Remote host closed the connection)
[18:42:37] *** Joins: Giovanni (~Giovanni@45.128.199.65)
[18:42:43] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[18:42:53] *** Joins: metaversum (~metaverse@94.13.111.159)
[18:43:02] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Ping timeout: 240 seconds)
[18:43:21] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[18:43:28] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[18:43:44] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:43:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:43:53] *** Joins: epony (epony@user/epony)
[18:45:34] *** Joins: metaverse_ (~metaverse@94.13.111.159)
[18:46:13] *** Quits: AlanRoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[18:46:24] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (Excess Flood)
[18:46:24] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[18:46:32] *** Quits: epony (epony@user/epony) (Excess Flood)
[18:46:34] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[18:47:33] *** Joins: epony (epony@user/epony)
[18:48:19] *** Quits: metaversum (~metaverse@94.13.111.159) (Ping timeout: 240 seconds)
[18:48:32] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 240 seconds)
[18:49:00] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[18:49:21] <ioxzev1z> nisa, did you paste code?
[18:49:32] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[18:49:48] *** Joins: Torr (~Torr@user/torr)
[18:49:49] *** Quits: epony (epony@user/epony) (Excess Flood)
[18:49:50] <nisa> I would now know how to make a simple enough code sample
[18:49:53] <nisa> But actually, hold on
[18:51:40] *** Joins: epony (epony@user/epony)
[18:52:28] *** Joins: kurahaupo (~kurahaupo@pa49-197-88-190.pa.qld.optusnet.com.au)
[18:53:20] *** Joins: Red_ (~Red@41.92-221-233.customer.lyse.net)
[18:53:46] *** Joins: saribro (~swinnenb@user/swinnenb)
[18:53:49] *** Joins: muffin_storm_ (~muffin_st@50-233-189-146-static.hfc.comcastbusiness.net)
[18:53:49] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[18:53:57] *** Joins: yetoo_ (~yetoo@user/yetoo)
[18:53:59] *** Joins: cassepipe_ (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr)
[18:54:07] *** Joins: unlink__ (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[18:54:08] *** Joins: metaversum (~metaverse@94.13.111.159)
[18:54:26] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[18:54:31] *** Joins: moog_ (~moog@107.126.53.83)
[18:54:31] *** Quits: yetoo (~yetoo@user/yetoo) (Remote host closed the connection)
[18:54:31] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[18:54:32] *** Quits: moog (~moog@107.126.53.83) (Read error: Connection reset by peer)
[18:54:33] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:54:36] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[18:54:36] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[18:54:44] *** Joins: j0be_ (~j0be@user/j0be)
[18:54:46] *** Quits: unlink_ (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[18:54:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection reset by peer)
[18:54:49] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[18:54:49] *** Quits: zer0x_ (~zer0x@1.55.210.57) (Read error: Connection reset by peer)
[18:54:50] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:54:50] *** scoobydoob is now known as scoobydoo
[18:54:52] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 250 seconds)
[18:54:52] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Ping timeout: 250 seconds)
[18:54:52] *** Quits: z14 (~alzee@user/alzee) (Ping timeout: 250 seconds)
[18:55:00] *** Quits: noonien (~noonien@user/noonien) (Quit: Ping timeout (120 seconds))
[18:55:07] *** Joins: zer0x_ (~zer0x@1.55.210.57)
[18:55:12] *** Joins: z14 (~alzee@user/alzee)
[18:55:20] *** Joins: noonien (~noonien@user/noonien)
[18:55:24] *** Joins: soul-bw (~uknown@2a02-a456-85ad-1-1c8c-2920-4400-907a.fixed6.kpn.net)
[18:55:46] *** Joins: gce108 (~gce@user/gce108)
[18:56:13] *** Joins: elastic_dog (~elastic_d@ary77.neoplus.adsl.tpnet.pl)
[18:56:19] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[18:56:23] *** Joins: bayleaf_ (~bayleaf@192.249.60.20)
[18:56:27] *** Joins: adip_ (~adip@dev188.neoplus.adsl.tpnet.pl)
[18:56:34] *** Joins: tetravus1 (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[18:56:40] *** Quits: kurfen (~kurfen@176.119.195.8) (Ping timeout: 250 seconds)
[18:56:41] *** Quits: nun- (~nun@178.115.236.156.static.drei.at) (Ping timeout: 250 seconds)
[18:56:41] *** Quits: j0be (~j0be@user/j0be) (Ping timeout: 250 seconds)
[18:56:41] *** Quits: adip (~adip@dev188.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[18:56:42] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 250 seconds)
[18:56:43] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[18:56:43] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 250 seconds)
[18:56:43] *** Quits: bayleaf (~bayleaf@192.249.60.20) (Ping timeout: 250 seconds)
[18:56:43] *** Quits: metaverse_ (~metaverse@94.13.111.159) (Ping timeout: 250 seconds)
[18:56:43] *** Quits: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:56:58] <nisa> https://bpa.st/53QQ ioxzev1z
[18:57:07] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Killed (NickServ (GHOST command used by Red_)))
[18:57:09] *** Joins: kurfen (~kurfen@176.119.195.8)
[18:57:09] *** Red_ is now known as Red
[18:57:14] *** Joins: sivoais_ (~zaki@199.19.225.239)
[18:57:15] *** Joins: phryk (~totallyno@user/phryk)
[18:57:26] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[18:57:37] *** Quits: Luke (~ldm@hacksoc/alumni/ldm) (Ping timeout: 250 seconds)
[18:57:37] *** Quits: sivoais (~zaki@199.19.225.239) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: muffin_storm (~muffin_st@user/muffin-storm/x-3740471) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: silly (silly@user/silly) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: soul-d (~uknown@user/soul-d) (Ping timeout: 250 seconds)
[18:57:41] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[18:57:54] *** Quits: llh (~UPP@user/llh) (Ping timeout: 250 seconds)
[18:57:54] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 250 seconds)
[18:57:54] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) (Ping timeout: 250 seconds)
[18:58:03] *** Joins: immibis (~hexchat@62.156.144.218)
[18:58:17] *** Joins: ns128 (~ns12@user/ns12)
[18:58:19] *** Joins: silly (silly@2a01:7e01::f03c:92ff:fee3:9dde)
[18:58:19] *** Quits: silly (silly@2a01:7e01::f03c:92ff:fee3:9dde) (Changing host)
[18:58:19] *** Joins: silly (silly@user/silly)
[18:58:20] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[18:58:24] *** Joins: BtbN_ (btbn@ffmpeg/developer/btbn)
[18:58:35] *** Joins: jrm2 (~jrm@156.34.173.250)
[18:58:37] *** Joins: llh (~UPP@user/llh)
[18:59:08] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[18:59:23] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:59:24] *** Joins: Luke (~ldm@hacksoc/alumni/ldm)
[18:59:37] *** Joins: zhiayang_ (~zhiayang@user/zhiayang)
[18:59:40] *** Joins: triv_ (wx37d3v3nl@morgulis.trivcraft.com)
[18:59:45] *** Joins: Teukka` (~teukka@84-216-41-232.customers.ownit.se)
[18:59:51] *** Joins: eau_ (~chat@user/eau)
[18:59:55] *** Joins: synapt (NBishop@o.apocaleaps.com)
[18:59:57] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[18:59:58] *** Joins: madder_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[19:00:10] *** Joins: beencubed_ (~beencubed@209.131.238.248)
[19:00:18] *** Joins: SoniEx2 (~quassel@autistic.space)
[19:00:19] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Read error: Connection reset by peer)
[19:00:19] *** Quits: Teukka (~teukka@user/Teukka) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: ncrowl (~ncrowl@94-255-226-47.cust.bredband2.com) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: Soni (~quassel@autistic.space) (Remote host closed the connection)
[19:00:19] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[19:00:19] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: qorg11 (~lain@user/qorg) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: jrm (~jrm@156.34.173.250) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: Xeha (~Xeha@user/Xeha) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: sunyour (~sunyour@129.226.182.99) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: triv (e655av59ft@morgulis.trivcraft.com) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: nate (NBishop@o.apocaleaps.com) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: eau (~chat@user/eau) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 250 seconds)
[19:00:21] *** BtbN_ is now known as BtbN
[19:00:21] *** zhiayang_ is now known as zhiayang
[19:00:22] *** jrm2 is now known as jrm
[19:00:22] *** ns128 is now known as ns12
[19:00:24] *** Joins: edro (~edr@enlo.co)
[19:00:24] *** Quits: edro (~edr@enlo.co) (Changing host)
[19:00:24] *** Joins: edro (~edr@user/edr)
[19:00:30] *** Joins: kst (~krjst@2604:a880:800:c1::16b:8001)
[19:00:34] *** Joins: ncrowl (~ncrowl@94-255-226-47.cust.bredband2.com)
[19:00:42] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[19:00:47] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[19:00:49] <ioxzev1z> nisa, that is C++
[19:00:51] <ioxzev1z> ,c++
[19:00:51] <candide> If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[19:00:57] *** synapt is now known as nate
[19:00:58] *** Joins: qorg11 (~lain@user/qorg)
[19:01:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[19:01:28] <nisa> ioxzev1z: I am aware, but I am asking here since my code is mostly C anyways and I know that people here usually have much deeper knowledge that the C++ people ;-)
[19:01:53] *** Joins: Xeha (~Xeha@user/Xeha)
[19:02:05] <nisa> Ofc I am compiling my stuff in a C++ compiler and with static_cast instead of C style casts and stuff like that.
[19:03:41] *** Joins: kts (~kts@103.73.237.62)
[19:05:35] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:06:41] *** Quits: ncrowl (~ncrowl@94-255-226-47.cust.bredband2.com) (Ping timeout: 252 seconds)
[19:07:09] *** Teukka` is now known as Teukka
[19:07:10] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[19:07:10] *** Joins: Teukka (~teukka@user/Teukka)
[19:08:16] *** Joins: ncrowl (~ncrowl@31-208-119-24.cust.bredband2.com)
[19:09:32] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[19:09:50] <nisa> Actually yes I am going to ask in a C++ channel
[19:09:54] <nisa> Thanks anyways
[19:10:09] *** Joins: kts_ (~kts@103.73.237.62)
[19:10:12] *** Quits: kts_ (~kts@103.73.237.62) (Client Quit)
[19:10:12] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-855f-50e7-28b4-6a40.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:10:43] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:11:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[19:12:12] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-855f-50e7-28b4-6a40.res6.spectrum.com)
[19:12:27] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:14:23] *** Joins: argonautx (~argonautx@i5E86725A.versanet.de)
[19:15:29] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[19:16:09] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[19:16:59] *** Joins: tafa (~tafa@user/tafa)
[19:17:11] *** Hexmind_ is now known as Hexmind
[19:17:57] *** Joins: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37)
[19:18:41] *** Joins: not_a_robot06 (~hashim@188.211.162.182)
[19:21:22] *** Quits: princess (~princess@c-73-255-162-200.hsd1.fl.comcast.net) (Quit: Konversation terminated!)
[19:21:39] *** Joins: princess (~princess@c-73-255-162-200.hsd1.fl.comcast.net)
[19:22:22] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[19:22:46] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[19:23:57] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 240 seconds)
[19:25:32] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:25:42] *** Joins: Enitin (~Enitin@82.180.145.226)
[19:26:34] *** Joins: kts (~kts@103.73.237.62)
[19:29:25] <Xgc> nisa: It's a bit of a mistake.  There's really no such thing as "mostly C with a C++ compiler".  It's like a little pregnant.  It's one or the other.
[19:33:05] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[19:33:21] *** Joins: oriba (~oriba@dynamic-077-183-072-090.77.183.pool.telefonica.de)
[19:33:52] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:35:21] *** Quits: vitimiti_ (~Celtor@2a01:4c8:1400:1025:7fcc:dd4b:c072:8355) (Ping timeout: 250 seconds)
[19:35:58] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[19:37:00] *** Quits: zer0x_ (~zer0x@1.55.210.57) (Ping timeout: 240 seconds)
[19:38:35] *** Quits: ncrowl (~ncrowl@31-208-119-24.cust.bredband2.com) (Ping timeout: 252 seconds)
[19:38:36] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 252 seconds)
[19:39:23] *** Joins: vitimiti (~Celtor@2a01:4c8:1400:1025:8cee:6169:6f09:bbe)
[19:40:21] *** Joins: ncrowl (~ncrowl@31-208-119-38.cust.bredband2.com)
[19:40:26] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-855f-50e7-28b4-6a40.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:46:09] *** Joins: trumae (~trumae@177.185.113.185)
[19:46:33] *** Joins: karakedi (~eAC53C340@user/karakedi)
[19:47:17] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 250 seconds)
[19:49:27] *** Joins: gdd (~gdd@129.199.146.230)
[19:51:29] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[19:51:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:52:10] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[19:53:38] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: See you later)
[19:54:42] *** Joins: Enitin (~Enitin@82.180.145.228)
[19:55:02] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[19:56:52] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[19:59:10] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 260 seconds)
[20:01:48] *** Joins: z4r4 (~z4r4@89.36.78.214)
[20:02:11] *** Joins: Enitin (~Enitin@82.180.145.228)
[20:04:40] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[20:05:02] *** Quits: Ox000 (~jy@74.215.11.197) (Remote host closed the connection)
[20:07:13] <not_a_robot06> Xgc: came back, looked at my code with a fresh set of eyes, and realised that i was incrementing the pointer regardless of whether something was getting stored there or not, meaning that undefined chars where placed there instead. I had the logic right in my head, but the code didn't reflect that :/. Here's the modified version: https://clbin.com/UrHyj
[20:07:32] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:07:57] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[20:08:02] *** Quits: ncrowl (~ncrowl@31-208-119-38.cust.bredband2.com) (Ping timeout: 260 seconds)
[20:09:23] *** Joins: ncrowl (~ncrowl@31-208-119-44.cust.bredband2.com)
[20:09:40] <ioxzev1z> Are [u]intX_T typedefs or defines?
[20:09:44] <ioxzev1z> uh, _t
[20:09:59] *** Quits: not_a_robot06 (~hashim@188.211.162.182) (Quit: WeeChat 3.2.1)
[20:10:36] *** Quits: eddybilley (~freddieti@2a02-a440-c664-1-cc8d-c436-dd4c-6477.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:13:52] *** Quits: luvings (~nortoh@user/nortoh) (Quit: this is not importent)
[20:15:33] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[20:15:33] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[20:15:34] *** Joins: nortoh (~nortoh@user/nortoh)
[20:17:13] *** Joins: missogra (~missogra@p200300d09725448d1b7d4ba1f9f09406.dip0.t-ipconnect.de)
[20:18:35] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.205)
[20:18:52] *** Joins: magla (~gelignite@55d44736.access.ecotel.net)
[20:19:00] *** Parts: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr) ()
[20:19:00] *** Joins: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr)
[20:20:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-855f-50e7-28b4-6a40.res6.spectrum.com)
[20:21:25] *** Quits: alex_ (~alex11@user/alex11) (Quit: Leaving)
[20:22:29] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[20:24:16] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:24:22] *** Parts: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr) ()
[20:24:22] *** Joins: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr)
[20:24:45] *** Quits: trumae (~trumae@177.185.113.185) (Ping timeout: 256 seconds)
[20:25:31] *** Quits: agrosant (~agrosant@79.103.63.74.dsl.dyn.forthnet.gr) (K-Lined)
[20:26:57] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[20:28:43] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 256 seconds)
[20:31:12] *** Joins: cincoswim (~cincoswim@cm-72-241-33-17.buckeyecom.net)
[20:31:53] <cassepipe_> Do you see anything wrong with this basic deinit linked list function : https://dpaste.com/42574FJVA
[20:32:14] <cassepipe_> Cause although it is being executed, it is not working
[20:32:30] *** Joins: plastico (~plastico@neomutt/plastico)
[20:32:40] <cassepipe_> I have checked in the debugger that the list size is correct
[20:33:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[20:35:58] *** Joins: sebbu (~sebbu@user/sebbu)
[20:38:41] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[20:38:51] *** rawr is now known as grumble
[20:39:01] <cassepipe_> chair computer pb sorry
[20:39:12] <cassepipe_> But talking helped
[20:39:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:40:48] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[20:41:11] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.205) (Ping timeout: 256 seconds)
[20:43:07] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Ping timeout: 256 seconds)
[20:44:50] *** Quits: fe23 (~fe23@2409:8a34:466:6010:8c37:a855:a5ef:15ca) (Quit: fe23)
[20:46:58] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a5a2:71c4:6a24:11d0)
[20:46:58] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a5a2:71c4:6a24:11d0) (Changing host)
[20:46:58] *** Joins: skapata (~Skapata@user/skapata)
[20:48:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d8b3:10ce:39eb:f812)
[20:49:54] *** Joins: korg815 (~korg815@user/korg815)
[20:50:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[20:51:00] *** Joins: lureevar (~lureevar@200.139.84.46.dynamic.dialup.gvt.net.br)
[20:52:25] *** Joins: epony (epony@user/epony)
[20:53:46] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 260 seconds)
[20:54:38] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[20:55:34] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:55:45] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:55:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:59:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:59:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:59:14] *** Joins: wroathe (~wroathe@user/wroathe)
[20:59:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:06:25] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[21:08:50] *** Joins: strajder (~strajder@user/strajder)
[21:11:27] *** Joins: EdFletcher (~PKD@user/edfletcher)
[21:11:27] *** Quits: alch (~alch@mi-18-57-235.service.infuturo.it) (Read error: Connection reset by peer)
[21:11:28] *** soul-bw is now known as soul-d
[21:12:12] *** Quits: soul-d (~uknown@2a02-a456-85ad-1-1c8c-2920-4400-907a.fixed6.kpn.net) (Quit: Leaving)
[21:12:31] *** Quits: ornxka (~ornxka@user/ornxka) (Quit: WeeChat 3.4)
[21:13:00] *** Joins: soul-d (~uknown@user/soul-d)
[21:13:03] *** Joins: minto_ (~mintograd@47.201.5.61)
[21:13:53] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[21:14:32] *** Joins: mxbl1 (~mxbl@2a02:8108:98c0:20da:b8cb:b887:77dc:2104)
[21:15:23] *** Joins: alch (~alch@to-18-70-122.service.infuturo.it)
[21:15:33] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[21:16:07] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 250 seconds)
[21:19:43] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Ping timeout: 256 seconds)
[21:23:58] *** tm512` is now known as tm512
[21:25:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[21:26:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d8b3:10ce:39eb:f812) (Ping timeout: 268 seconds)
[21:27:20] *** Quits: unlink__ (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:29:15] *** Joins: nq (~nq@2a02:2f08:e015:a900:7e72:2af9:f526:1e8f)
[21:29:19] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[21:32:22] *** Joins: nicbk (~nicbk@user/nicbk)
[21:32:47] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:33:05] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[21:33:29] *** Joins: Akiva (~Akiva@user/Akiva)
[21:34:45] *** Joins: Waynes (~Waynes@user/waynes)
[21:35:03] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[21:37:53] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[21:38:24] *** ChanServ sets mode: +o candide
[21:38:24] *** candide sets mode: -b $a:not_not
[21:39:49] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[21:39:57] *** Joins: trumae (~trumae@170.231.88.62)
[21:40:07] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[21:40:12] *** Quits: jkotra (~jkotra@122.169.141.242) (Ping timeout: 240 seconds)
[21:40:13] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:40:51] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:44:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:46:59] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[21:47:53] *** Joins: Brewster (~Brewster@user/brewster)
[21:47:54] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[21:48:51] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[21:49:11] *** Quits: trumae (~trumae@170.231.88.62) (Ping timeout: 256 seconds)
[21:49:49] *** Quits: nexus (~nexus@92-249-179-42.pool.digikabel.hu) (Ping timeout: 240 seconds)
[21:49:51] *** Joins: trumae (~trumae@177.185.113.185)
[21:51:45] *** Joins: nexus (~nexus@84-236-55-39.pool.digikabel.hu)
[21:56:04] *** Joins: pulse (~pulse@user/pulse)
[21:56:28] *** Joins: mxbl2 (~mxbl@2a02:8108:98c0:20da:215:afff:feb4:b39d)
[21:56:33] *** Quits: mxbl1 (~mxbl@2a02:8108:98c0:20da:b8cb:b887:77dc:2104) (Ping timeout: 256 seconds)
[21:57:16] *** Parts: mxbl2 (~mxbl@2a02:8108:98c0:20da:215:afff:feb4:b39d) ()
[22:00:58] *** zmt01 is now known as zmt00
[22:01:23] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[22:03:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[22:04:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:06:33] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[22:09:29] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[22:09:54] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[22:10:20] *** Quits: Doraemon (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de) (Quit: Leaving)
[22:12:09] *** Quits: fowl (~fowlmouth@user/fowl) (Quit: cya pals)
[22:14:03] *** Joins: fowl (~fowlmouth@user/fowl)
[22:14:08] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[22:15:23] *** Quits: fowl (~fowlmouth@user/fowl) (Client Quit)
[22:16:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[22:17:02] *** Joins: fowl (~fowlmouth@user/fowl)
[22:18:22] *** Joins: Akuli (~Akuli@87-94-109-68.bb.dnainternet.fi)
[22:18:51] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Remote host closed the connection)
[22:19:00] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[22:19:39] *** Joins: justAstache (~justache@user/justache)
[22:20:20] *** Joins: jkotra (~jkotra@122.169.141.242)
[22:20:57] *** Quits: missogra (~missogra@p200300d09725448d1b7d4ba1f9f09406.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:23:40] *** Joins: mxbl1 (~mxbl@2a02:8108:98c0:20da:54cd:2890:daf:8018)
[22:24:13] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[22:24:21] *** Joins: Enitin (~Enitin@5.180.62.230)
[22:24:24] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[22:25:30] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[22:25:41] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[22:27:50] *** Joins: ornxka (~ornxka@user/ornxka)
[22:28:17] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[22:28:19] *** Joins: Klinda (~superleag@user/klinda)
[22:31:29] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:31:33] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[22:31:56] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[22:32:37] *** Quits: trumae (~trumae@177.185.113.185) (Ping timeout: 240 seconds)
[22:32:37] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:38] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[22:33:01] *** Joins: trumae (~trumae@170.231.88.62)
[22:33:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d8b3:10ce:39eb:f812)
[22:34:04] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[22:36:30] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:38:18] *** Quits: Enitin (~Enitin@5.180.62.230) (Ping timeout: 260 seconds)
[22:39:18] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:40:27] *** Joins: Enitin (~Enitin@5.180.62.230)
[22:43:57] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[22:45:03] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:35] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 252 seconds)
[22:47:16] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[22:49:01] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[22:54:00] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[22:59:11] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[22:59:46] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 260 seconds)
[23:00:52] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) ()
[23:04:29] *** Joins: seninha (~chatzilla@user/seninha)
[23:06:09] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: Lost terminal)
[23:06:25] *** Quits: mxbl1 (~mxbl@2a02:8108:98c0:20da:54cd:2890:daf:8018) (Quit: WeeChat 3.3)
[23:07:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[23:08:12] *** Quits: nahcetan (~nate@98.45.167.61) (Quit: WeeChat 2.9)
[23:14:08] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[23:15:11] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[23:17:36] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[23:17:43] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Client Quit)
[23:18:03] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[23:21:28] *** Joins: Ox000 (~jy@74.215.11.197)
[23:22:46] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:22:59] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[23:26:02] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:26:47] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:27:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:27:50] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[23:28:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:30:56] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:33:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:34:52] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[23:34:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:34:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:34:56] *** Joins: wroathe (~wroathe@user/wroathe)
[23:36:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[23:36:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:36:39] *** Joins: csrf (~csrf@user/csrf)
[23:37:31] *** Lord_of_Life_ is now known as Lord_of_Life
[23:37:46] *** Joins: serbest (~serbest@user/serbest)
[23:38:27] *** candide sets mode: -o candide
[23:38:47] *** Quits: serbest (~serbest@user/serbest) (Client Quit)
[23:39:10] *** Joins: serbest (~serbest@user/serbest)
[23:45:17] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[23:45:33] *** Joins: RETRO (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[23:46:53] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:47:30] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[23:50:30] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[23:54:38] *** Quits: nate (NBishop@o.apocaleaps.com) (Killed (osmium.libera.chat (Nickname regained by services)))
[23:54:49] *** Joins: synapt (NBishop@o.apocaleaps.com)
[23:54:56] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 268 seconds)
