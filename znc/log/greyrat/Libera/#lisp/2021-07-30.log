[00:02:55] *** Quits: aidenw (~Aiden@156.57.146.89) (Remote host closed the connection)
[00:03:48] *** Quits: miasuji (~miasuji@75-166-103-152.hlrn.qwest.net) (Client Quit)
[00:03:50] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:05:59] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 258 seconds)
[00:09:15] *** Joins: dsk (~dsk@user/dsk)
[00:13:14] *** Joins: zacts (~zacts@user/zacts)
[00:14:04] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 256 seconds)
[00:18:47] *** Quits: voidengineer (~ultrables@186.11.99.94) (Quit: Leaving)
[00:26:57] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:28:36] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[00:29:36] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[00:33:54] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 240 seconds)
[00:34:29] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 268 seconds)
[00:35:03] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:35:10] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[00:40:32] <sm2n> mariari, racket can get away with what it does because it does not support interactive development
[00:41:29] <sm2n> CL packages really aren't similar to racket's modules at all
[00:42:08] <sm2n> as far as I can tell, it is an open problem how to do interactive development while also having a somewhat strict/rigourous module system
[00:42:17] <sm2n> see racket's "the top level is hopeless"
[00:45:00] <pjb> interactive is necessarily messy. So don't count on strict/rigorous, if you want to make it usable.  Deal with it!
[00:45:56] <pjb> that said, nothing prevents the tool to record and analyse the interactive session, and to save some mathematically strict and rigorous definition that when loaded will restitute a sufficiently similar state.
[00:45:59] <dash[m]> I think it'd be possible to accommodate both styles in the same system
[00:46:23] <dash[m]> but yes historically interactive convenience has been at odds with reproducibility
[00:46:32] <pjb> Definitely.
[00:46:48] <pjb> interactively you can add dependency cycles at will.
[00:47:35] <sm2n> right, but no one appears to have done it yet
[00:57:22] <jcowan> Medley writes to files which are the 1SOT, but also maintains a snapshot image
[00:58:32] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 268 seconds)
[01:03:36] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[01:03:52] <moon-child> so the snapshot is, what, a cache to improve startup times?
[01:07:58] <sm2n> jcowan, does medley not have a repl you can execute stuff at?
[01:10:01] <sm2n> mariari, to be more specific, probably the biggest issue/difference is that CL packages are not really all that fundamental. They really are basically just sets of symbols, with some facilities for inheritance and so on. But they are basically entirely orthogonal to CL's evaluation/execution strategy
[01:10:23] <sm2n> on the other hand, racket's module system is deeply tied up with it's (phased) evaluation strategy
[01:11:09] <sm2n> modules can even be instantiated multiple times, as needed, to satisfy hygiene requirements
[01:11:36] *** Quits: Guest9 (~Guest9@103.240.170.208) (Quit: Connection closed)
[01:11:40] <sm2n> there's a lot of things tangled up there, and it's actually quite interesting
[01:12:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[01:13:22] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[01:14:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:15:53] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 250 seconds)
[01:17:37] <jcowan> sm2n: Two of them, one for Interlisp and one for Common Lisp.  The two languages interoperate nicely, but are in different packages
[01:18:39] <jcowan> IMO Racket's hyperexplicit naming is overkill
[01:18:48] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[01:19:17] <jcowan> (meaning that different names can mean completely different things at differentt levels of the syntactic ttower)
[01:19:55] <dash[m]> well, it fits their goals, but they're kind of unusual ones
[01:20:44] <jcowan> yes
[01:21:10] <jcowan> IMO R6RS implicit naming is FTW; explicit naming is nothing but an annoyance
[01:22:58] *** Joins: Zipheir (~wcm@98.4.178.27)
[01:24:21] *** Joins: Avichi (~Avichi@i186060.upc-i.chello.nl)
[01:24:44] *** Quits: christophergray (~christoph@190.148.52.48) (Ping timeout: 265 seconds)
[01:26:24] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[01:31:03] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:32:03] <mariari> sm2n: yes, modules are also something important to program around. Having a good culture around qualified imports can make names shorter (see the Module.t convention in ocaml), and more consistent .
[01:32:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:32:42] <mariari> sm2n: you can do interactive development quite well with a rigourus module system, I don't see why it would prevent that
[01:32:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:33:23] <dash[m]> mariari: smalltalk/lisp ideas of "interactive development" tend to be a bit more aggressive than others
[01:33:47] <mariari> if we treat modules as just another term in the language, then really it's not much of a difference, the main thing to look out for are that modules tend be more early binding rather than late, however for using them in big applications, if you update a value in it it should still propagate
[01:34:26] <[itchyjunk]> :<
[01:34:38] <mariari> dash[m]: yes I'm accounting for that, I don't see what you lose really, as you can still update it live and change out values fine
[01:34:54] <mariari> you can even do interesting things like mention how agressive you want to inline at a module level and across module boundaries
[01:37:07] <dash[m]> yeah, that's the main thing I mean, is that one of the major benefits of modules is early binding
[01:38:52] <mariari> Yes, the late vs early binding in the case of modules vs objects tends to be more about how subtyping treats the value and how new instances work. Which I'd argue is orthogonal to late vs early binding in asking about a particular definition from the image
[01:40:08] <[itchyjunk]> quick question, how did i load my functions in a file into  sbcl?
[01:40:30] <[itchyjunk]> i start sbcl then i do `something filename.lisp`
[01:40:35] <[itchyjunk]> i forget the something part
[01:41:00] <mariari> maybe you are looking for (load "filename.lisp")?
[01:41:31] <[itchyjunk]> ohhhhhh i need the ( ) too dohhhhhh
[01:41:41] <mariari> well if you are inside the sbcl repl already
[01:42:10] <mariari> you could also do sbcl --load file.lisp
[01:42:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:45:31] <[itchyjunk]> ah sweet. the code works it seems, just prints things twice. need to debug that
[01:46:14] <[itchyjunk]> since i have you here already, how do i do nothing `if (true) (do stuff) (do nothing)`
[01:46:21] <[itchyjunk]> i figured out the (do stuff) part
[01:46:40] <mariari> (when foo then-1 then-2)
[01:46:41] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[01:46:47] <mariari> this is a macro over
[01:46:55] <mariari> (if foo (progn then-1 then-2) nil)
[01:47:32] *** Joins: amb007 (~a_bakic@76.144.204.77.rev.sfr.net)
[01:47:32] *** Quits: amb007 (~a_bakic@76.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:47:52] <[itchyjunk]> (if (true) (stuff) (nil)) ?
[01:47:57] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:48:04] <mariari> nil is not a function
[01:48:06] <jcowan> In Medley, you can register a defined name (function, variable, etc.) and associate with a file, and that fact is persisted.  Any change to the definition is propagated to the file.
[01:48:15] <[itchyjunk]> right :s
[01:48:24] <mariari> jcowan: xerox-lisp medley?
[01:48:29] <jcowan> yes
[01:48:36] <jcowan> interlisp.org
[01:49:03] <jcowan> Interlisp is the language (and CL is the other language): Medley is the implementation
[01:49:15] <mariari> that's neat, I've seen in factor when I've deleted something from a file and reload that, it's gone from the image, which I found interesting (it did tree shaking of the image for you... only had it do it when I evaled the entire buffer and not single defns)
[01:49:51] <mariari> there is a lot of neat things you can do with images and re-definitions, in terms of touching back of files
[01:51:32] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 256 seconds)
[01:56:24] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:08:18] *** Quits: dhil (~dhil@195.213.192.47) (Ping timeout: 240 seconds)
[02:09:00] *** Quits: Avichi (~Avichi@i186060.upc-i.chello.nl) (Quit: Client closed)
[02:11:01] <sm2n> I will have to check out Medley
[02:12:18] <sm2n> I'm not saying interactive development with modules is not possible, I'm just saying it's a relatively unexplored space of language design
[02:12:32] <sm2n> personally I think it's possible, desirable, and interesting
[02:13:29] <sm2n> the racket developers bumped into some of these issues with keeping modules consistent with global state and such, and appear to have given up
[02:15:53] <mariari> sm2n: well hasn't racket always not been image based? At least from everything I've seen they never tried? I think it might have been explored in the past in some SML derivatives, but I have to investigate that more (the ZINC paper suggests that some SML's may have been image based?)
[02:17:44] <sm2n> no, racket switched maybe ~15 years(?) ago
[02:18:32] <mariari> really?
[02:18:45] <mariari> Was modules their main issue with maintaining an image?
[02:21:19] <sm2n> if I recall correctly, yes
[02:21:35] <sm2n> let me pull up a source so I'm not misremembering
[02:21:44] <mariari> if you have a link that'd be great
[02:22:01] <mariari> just seems odd that that feature would be such a blocker
[02:22:07] <mariari> I can imagine tracking opens would be the hardest part
[02:22:24] <mariari> at least that's what I've faced in trying to get such a system
[02:22:57] <mariari> namely local opens if you have modules being first class, top level opens can be tracked through other means easily enough
[02:24:24] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[02:25:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:28:23] <sm2n> oh, I got the timeline mixed up
[02:28:41] <sm2n> they switched very early on
[02:29:04] <sm2n> though I'm not sure for how long the immutable top level has been around, which is probably more important
[02:29:09] <sm2n> see https://blog.racket-lang.org/2009/03/the-drscheme-repl-isnt-the-one-in-emacs.html
[02:29:14] <sm2n> and https://gist.github.com/samth/3083053
[02:29:40] <mariari> huh thanks
[02:30:00] <sm2n> the problem appears to be tied up specifically with how racket's macro system and modules system interact
[02:30:24] <mariari> hygeine interacts with this? 
[02:30:39] <mariari> as hygiene talks about the environment?
[02:32:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[02:32:36] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:34:12] <mariari> I remember a post by oleg talking about how Scheme style define is inconsistent
[02:36:10] <sm2n> apparently, I don't understand all the details. But the basic idea is that racket is all about building towers of syntactic abstraction, i.e macros that write macros, and so a question is how to deal with scoping at macroexpansion time for compilation. Racket has a phased system here, where each layer of macros has it's own evaluation "phase", and hence has its own module imports and such. This module system design appears to have made it difficult to support 
[02:36:11] <sm2n> programming at the top level.
[02:36:25] <sm2n> here's the paper describing the original design: https://www.cs.utah.edu/plt/publications/macromod.pdf
[02:37:17] <jcowan> There's a Racket/R6RS saying: "The top level is broken."
[02:37:35] <sm2n> anyway module systems seem to be one of the hairiest areas of programming language design
[02:38:09] <mariari> There are some good theory around it, but yeah. For type systems modules require quite a bit of work
[02:38:11] <jcowan> SML modules are supposed to be The Best, though they don't deal with macros.  Not thatt I understand them.
[02:38:17] <sm2n> jcowan, I believe it's usually s/broken/hopeless/
[02:38:21] <jcowan> yes
[02:38:25] <mariari> they aren't the best jcowan they are the best of more mainstream languages!
[02:38:33] <mariari> SML and OCaml have modules as second class citizens
[02:38:49] <mariari> with dependent types or the approach 1ML takes (or even fx91!) you can get them to be first class
[02:38:52] <sm2n> yeah, and there's apparently recent work in implementing modules using dependent types
[02:38:55] <jcowan> So does Scheme (excluding Racket)
[02:39:43] <mariari> there is quite a bit of that, the ML type system is too limiting, with a better type system a lot of work has been fertile ground for research
[02:39:52] <mariari> like region based memory management
[02:40:31] <sm2n> iirc moscow ML had regions and then found out they weren't as good as normal GC and ended up throwing it out
[02:40:45] <mariari> ML-kit still uses them but yeah
[02:41:03] <mariari> part of the issue is the ML type system isn't good enough to track them properly, it's why effect languages typically have them (see F*)
[02:41:04] <sm2n> I wasn't aware of FX-91, this looks interesting
[02:41:14] <mariari> yeah, FX-87 and 91 are interesting
[02:41:17] <sm2n> didn't know there were languages with effect systems in the 90s
[02:41:18] <mariari> first algebraic effect languages
[02:41:40] <mariari> in the 90's I think there were a few more I'd have to see the timeline of languages again
[02:41:49] <sm2n> I've used F*, it's nice to offload proof burdens to a solver
[02:42:04] <sm2n> not sure how I feel about refinement types in general though
[02:42:16] <mariari> I enjoy them myself, makes dependnetly typed proofs easier to write
[02:43:43] <sm2n> right, apparently they are strictly less expressive than dependent types
[02:43:57] <mariari> well F* is dependently typed!
[02:44:06] <mariari> you can view it as a sigma on unit
[02:44:17] <mariari> it's a specific pattern basically
[02:45:03] <mariari> dependently typed language in general can express refinements, it's just a matter of how natural is it, and what makes it easy to support. Those are the hard issues as far as I can tel
[02:46:05] <sm2n> ah I found the thing I read recently
[02:46:12] <sm2n> https://www.tweag.io/blog/2021-02-05-refinement-types/
[02:46:26] <sm2n> automatic translation of refinement types into dependent pairs
[02:46:34] <mariari> liquid haskell is a mess
[02:47:04] <sm2n> don't think I've actually seen anyone use it
[02:47:25] <mariari> Tried it, it is rather spurious and seems to neglect lexical binding
[02:47:27] <mariari> which is quite sad
[02:47:32] <mariari> it's just not in a ready state for serious use
[02:48:59] <sm2n> I see
[02:57:30] <sm2n> mariari, what did you mean by scheme-style design is inconsistent?
[03:00:16] *** Joins: paravida (~myChateau@user/paravida)
[03:00:42] <mariari> I believe this is the link http://okmij.org/ftp/Scheme/macros.html#syntax-rule-dark-corner
[03:03:58] <sm2n> interesting
[03:23:18] *** Joins: cjb (~cjb@user/cjb)
[03:30:48] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[03:32:14] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[03:36:58] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Ping timeout: 240 seconds)
[03:39:51] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[03:44:02] *** Joins: yottabyte (uid195082@id-195082.tooting.irccloud.com)
[03:45:25] <yottabyte> how can I use dolist to return early? apparently I can use return according to these docs: http://www.lispworks.com/documentation/HyperSpec/Body/m_dolist.htm, but they don't provide an example
[03:45:43] <yottabyte> I find the hyper spec docs really hard to follow/read...
[03:46:47] <moon-child> (dolist (x '(1 3 2)) (if (>= x 2) (return (* 2 x)))) #| --> 6 |#
[03:47:19] <moon-child> s/if/when/
[03:47:22] <moon-child> however you might find 'loop' clearer if you have complex conditions
[03:50:39] <moon-child> yottabyte: in particular, the body of 'dolist' is implicitly enclosed in a block named nil.  return-from will exit the lexically closest block of the given name, yielding whatever value(s) you provide, and return is the same except that it assumed that the name is nil.  So this is nothing really special about dolist, except that dolist happens to enclose its body in a block
[03:51:46] <moon-child> yottabyte: another thing, you may find people more responsive in #commonlisp 
[03:52:10] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 240 seconds)
[03:53:04] <yottabyte> good to know, thank you
[03:53:23] <yottabyte> I've never really used return before
[03:53:35] <moon-child> (although, we are presently arguing about arcana there, so despite admonitions to the contrary, perhaps not right at the moment)
[03:54:21] <yottabyte> not familiar with arcana haha
[03:54:30] <yottabyte> reading this http://www.lispworks.com/documentation/HyperSpec/Body/s_block.htm#block was insightful
[03:54:44] <yottabyte> I didn't even know what an implicit block named nil really meant until I read that
[03:54:47] <yottabyte> a lot to learn...
[03:55:07] <yottabyte> are the lipspworks hyper spec the go-to docs?
[03:56:14] <moon-child> pretty much, yeah
[03:56:26] <moon-child> arcana just means 'that which is arcane'
[03:58:51] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 276 seconds)
[04:04:58] *** Parts: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) ()
[04:07:17] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[04:17:56] *** Parts: miniluv (~user@192.173.32.241) (ERC (IRC client for Emacs 27.2))
[04:24:04] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[04:25:50] <cmsimon> re.
[04:28:57] <moon-child> re. re.
[04:30:54] *** Quits: galex-713 (gal@portable.galex-713.eu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:31:15] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[04:32:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[04:32:45] <cmsimon> moon': hej. how're ye?
[04:34:01] <moon-child> not bad, you?
[04:36:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:37:28] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:39:22] *** Quits: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) (Ping timeout: 240 seconds)
[04:41:40] *** Joins: monkey_ (~user@190.104.116.134)
[04:47:59] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:48:42] *** Joins: galex-713 (gal@portable.galex-713.eu)
[04:51:19] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[04:55:07] *** Joins: zacts (~zacts@user/zacts)
[04:55:33] *** Joins: zacts40 (~zacts@user/zacts)
[04:56:03] *** Joins: zacts47 (~zacts@user/zacts)
[04:56:10] *** Quits: zacts47 (~zacts@user/zacts) (Write error: Broken pipe)
[04:59:49] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:00:10] *** Quits: zacts40 (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:08:51] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[05:12:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:15:29] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[05:18:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 258 seconds)
[05:24:26] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[05:27:15] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[05:28:03] *** Joins: ukari (~ukari@user/ukari)
[05:33:10] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[05:35:42] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 276 seconds)
[05:36:02] *** Joins: Qwnavery (~Qwnavery@1.128.104.7)
[05:37:39] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[05:39:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 276 seconds)
[05:40:58] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Ping timeout: 240 seconds)
[05:45:39] *** Quits: rixard (~rixard@h-158-174-122-239.A357.priv.bahnhof.se) (Quit: Leaving...)
[05:48:18] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 240 seconds)
[06:02:39] *** Quits: Qwnavery (~Qwnavery@1.128.104.7) (Ping timeout: 265 seconds)
[06:07:00] *** Quits: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) (Ping timeout: 265 seconds)
[06:07:07] *** Quits: engblom (~foo@62-121-47-42.static.lounea.fi) (Quit: Lost terminal)
[06:13:36] *** Quits: mathrick (~mathrick@67.148.61.162) (Read error: Connection reset by peer)
[06:13:43] *** Joins: mathrick_ (~mathrick@67.148.61.162)
[06:15:44] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[06:19:36] *** Joins: zacts (~zacts@user/zacts)
[06:22:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[06:24:48] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[06:26:00] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:26:11] <pjb>  yottabyte: the hyperspec is a transcription of the ANSI standard for CL (which hasn't changed since it was finished in 1994).
[06:26:23] <pjb> yottabyte: this is the reference.
[06:26:37] <pjb> yottabyte: for tutorials have a look at http://cliki.net/Online+Tutorial
[06:26:56] <pjb> yottabyte: and for books at http://cliki.net/Lisp+Books
[06:27:27] *** Joins: zacts (~zacts@user/zacts)
[06:27:39] *** Quits: zacts (~zacts@user/zacts) (Write error: Broken pipe)
[06:28:52] *** Quits: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) (Ping timeout: 245 seconds)
[06:33:00] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 252 seconds)
[06:33:30] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 240 seconds)
[06:36:00] *** Joins: laman (laman@2600:3c02::f03c:92ff:fe3e:c08d)
[06:37:43] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[06:41:28] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[06:42:15] *** Joins: zacts (~zacts@user/zacts)
[06:42:38] *** Quits: yottabyte (uid195082@id-195082.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[06:44:56] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[06:46:33] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 276 seconds)
[07:07:41] *** Joins: prxq_ (~quassel@x4db6a48f.dyn.telefonica.de)
[07:11:46] *** Quits: prxq (~quassel@x4db512e7.dyn.telefonica.de) (Ping timeout: 265 seconds)
[07:17:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[07:20:30] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:20:49] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[07:21:58] <nirnam> alot of thing still be written in C89, I guess you can consider CL standard fairly modern
[07:27:07] <aeth> note that CL didn't stop evolving just because the standard is set in stone
[07:29:09] *** Joins: zacts (~zacts@user/zacts)
[07:29:09] <aeth> Unicode as the default char-code/code-char, UTF8 as the default format for reading/writing files/etc. (although something like UTF32 might be the actual internal string format), metaobject protocol, bordeaux-threads, cffi, gray streams, extensible sequences, package local nicknames, etc.
[07:29:31] <aeth> Most of the latter stuff have trivial wrapper libraries or are the names of such libraries (e.g. closer-mop for the MOP)
[07:30:35] *** Joins: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de)
[07:33:09] <aeth> https://portability.cl/
[07:33:38] <aeth> That's most of them, but note that it doesn't include unicode because there is no such library for that, unfortunately.
[07:35:40] *** Quits: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[07:41:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:45:03] *** Quits: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) (Ping timeout: 276 seconds)
[07:50:04] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:53:39] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[08:00:35] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[08:02:02] *** Joins: oxum (~oxum@106.203.221.241)
[08:05:19] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[08:05:26] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[08:08:19] *** Quits: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) (Ping timeout: 265 seconds)
[08:10:14] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[08:14:27] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:18:24] *** Joins: oxum (~oxum@106.203.221.241)
[08:22:11] *** Joins: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon)
[08:27:46] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 258 seconds)
[08:48:27] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:53:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[08:58:48] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:59:03] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[09:14:00] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[09:21:20] *** Quits: waaron (~aaron@194.110.112.10) (Quit: WeeChat 3.0.1)
[09:30:34] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[09:31:25] *** Quits: cjb (~cjb@user/cjb) (Read error: Connection reset by peer)
[09:40:55] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[09:42:03] *** Joins: ukari (~ukari@user/ukari)
[09:42:31] *** Joins: selwyn (~selwyn@user/selwyn)
[09:43:50] *** Parts: cmsimon (cmsimon@gateway/vpn/protonvpn/cmsimon) ()
[09:47:02] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[10:17:18] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:21:38] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:34:16] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[10:37:53] *** Joins: shka (~herr@109.231.62.239)
[10:44:27] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[10:44:43] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[10:50:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:51:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:51:59] *** Lord_of_Life_ is now known as Lord_of_Life
[11:01:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[11:02:06] *** Quits: letto (~letto@188.27.118.171) (Quit: Konversation terminated!)
[11:02:29] *** Joins: amb007 (~a_bakic@108.144.204.77.rev.sfr.net)
[11:02:52] *** Joins: letto (~letto@188.27.118.171)
[11:06:54] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[11:11:36] *** Joins: rain3 (~rain3___@79.115.250.43)
[11:13:28] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:25:15] *** Quits: amb007 (~a_bakic@108.144.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[11:25:33] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[11:35:27] *** Joins: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi)
[11:35:43] *** Quits: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi) (Remote host closed the connection)
[11:36:05] *** Joins: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi)
[11:43:47] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Remote host closed the connection)
[11:47:53] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[11:52:25] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[11:56:10] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Read error: Connection reset by peer)
[11:56:12] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:56:31] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[11:56:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:58:22] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[12:02:53] *** Quits: eschaton (~eschaton@li541-49.members.linode.com) (Quit: ZNC 1.8.x-git-16-0982d826 - https://znc.in)
[12:03:17] *** Joins: eschaton (~eschaton@li541-49.members.linode.com)
[12:10:52] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[12:15:06] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[12:22:14] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:23:24] *** Joins: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de)
[12:27:54] *** Quits: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:34:52] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:35:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:36:00] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:00] *** Quits: prxq_ (~quassel@x4db6a48f.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:38:17] *** Joins: ytc (~ytc@user/ytc)
[12:38:57] *** Joins: prxq (~quassel@x4db6a48f.dyn.telefonica.de)
[12:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[12:39:40] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 272 seconds)
[12:40:05] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[12:40:26] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[12:42:43] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 250 seconds)
[12:46:53] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:47:03] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[12:47:03] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:47:10] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[12:47:20] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:47:45] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[12:49:24] *** Joins: lisp123__ (~lisp123@45.130.83.181)
[12:52:19] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Read error: Connection reset by peer)
[12:53:08] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[13:00:56] *** Quits: lisp123__ (~lisp123@45.130.83.181) (Remote host closed the connection)
[13:01:43] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:03:47] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[13:03:47] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[13:04:05] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:05:40] *** Joins: lisp123__ (~lisp123@45.130.83.181)
[13:10:18] *** Quits: lisp123__ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[13:10:27] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[13:13:02] *** Quits: nirnam (~nirnam@1.46.6.121) (Ping timeout: 245 seconds)
[13:14:09] *** Joins: nirnam (~nirnam@1.46.6.121)
[13:14:58] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[13:43:42] *** Joins: Avichi (~Avichi@i186060.upc-i.chello.nl)
[13:50:33] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[13:57:34] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[14:01:46] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[14:04:55] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:05:07] *** Quits: ytc (~ytc@user/ytc) (Ping timeout: 245 seconds)
[14:05:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:18:26] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[14:22:12] *** Joins: frgo (~frgo@p200300deef181d0054bb4d3d4cc00379.dip0.t-ipconnect.de)
[14:22:14] *** Quits: frgo (~frgo@p200300deef181d0054bb4d3d4cc00379.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:22:42] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Remote host closed the connection)
[14:22:44] *** Joins: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de)
[14:24:13] *** Joins: zacts (~zacts@user/zacts)
[14:25:43] *** Joins: dhil (~dhil@195.213.192.47)
[14:31:10] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:5:7c36:6d3c:3648)
[14:34:21] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[14:35:07] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:39:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[14:39:32] *** Joins: selwyn (~selwyn@user/selwyn)
[14:42:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:53:30] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:53:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:54:46] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[14:55:31] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[14:55:40] *** Joins: random-nick (~random-ni@87.116.182.181)
[14:58:04] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:58:11] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 265 seconds)
[14:59:38] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 265 seconds)
[15:16:07] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:16:58] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[15:16:58] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:17:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:18:51] *** Joins: Choobs (~Choobs@cpc1-grth13-2-0-cust49.16-4.cable.virginm.net)
[15:20:14] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 258 seconds)
[15:20:14] *** Quits: Choobs (~Choobs@cpc1-grth13-2-0-cust49.16-4.cable.virginm.net) (Client Quit)
[15:21:32] *** Joins: tfeb (~tfb@109.249.185.24)
[15:22:16] *** Quits: tfeb (~tfb@109.249.185.24) (Client Quit)
[15:25:05] *** Quits: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:25:32] *** Joins: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de)
[15:31:25] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[15:34:19] *** Quits: mattil (~mattilinn@87-92-232-85.rev.dnainternet.fi) (Quit: Leaving)
[15:36:50] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Read error: Connection reset by peer)
[15:42:58] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[15:47:24] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 252 seconds)
[15:48:49] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[15:53:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:01:06] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:06:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:08:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:17:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 276 seconds)
[16:26:02] *** Joins: gareppa (~gareppa@user/gareppa)
[16:26:30] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[16:30:01] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:30:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[16:30:58] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[16:35:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[16:36:13] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:38:54] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[16:48:12] *** Joins: yoonkn (~user@175.197.208.79)
[17:08:57] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[17:13:54] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[17:23:50] *** Quits: rain3 (~rain3___@79.115.250.43) (Quit: Leaving)
[17:24:39] *** Joins: selwyn (~selwyn@user/selwyn)
[17:25:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:37:34] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[17:38:05] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[17:38:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 276 seconds)
[17:42:22] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[17:45:09] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:48:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:52:40] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 265 seconds)
[17:54:25] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[17:55:06] *** Joins: tephra_ (~tephra@pagefault.se)
[17:55:28] *** Joins: oxum (~oxum@106.203.221.241)
[17:55:36] *** Joins: Svjatoslav_ (~Svjatosla@62-210-108-187.rev.poneytelecom.eu)
[17:56:19] *** Joins: Cathrinus (~meow@vyos/developer/Lulu)
[17:57:12] *** Joins: eco_ (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[17:57:16] *** Joins: phadthai_ (mmondor@ginseng.pulsar-zone.net)
[18:00:58] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 268 seconds)
[18:01:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:02:37] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 245 seconds)
[18:03:12] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[18:04:08] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[18:04:09] *** Quits: tephra (~tephra@pagefault.se) (*.net *.split)
[18:04:09] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[18:04:09] *** Quits: phadthai (mmondor@user/phadthai) (*.net *.split)
[18:04:09] *** Quits: Svjatoslav (~Svjatosla@62-210-108-187.rev.poneytelecom.eu) (*.net *.split)
[18:07:39] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 252 seconds)
[18:09:46] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[18:10:45] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:12:52] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Client Quit)
[18:13:09] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[18:15:07] *** Joins: zos (~user@ool-457a8044.dyn.optonline.net)
[18:17:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:28] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[18:17:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:21:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:25:57] *** Joins: zacts (~zacts@user/zacts)
[19:01:13] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:02:22] *** Joins: oxum (~oxum@106.203.221.241)
[19:07:33] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 276 seconds)
[19:12:41] *** Joins: Guest9 (~Guest9@43.241.144.27)
[19:13:27] *** Quits: eta (~eta@chat.i.eta.st) (Ping timeout: 245 seconds)
[19:14:36] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:24:32] *** Joins: zacts (~zacts@user/zacts)
[19:24:55] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Quit: Using Circe, the loveliest of all IRC clients)
[19:30:14] *** Quits: zos (~user@ool-457a8044.dyn.optonline.net) (Remote host closed the connection)
[19:36:37] *** Joins: oxum (~oxum@106.203.221.241)
[19:38:18] *** Quits: Guest9 (~Guest9@43.241.144.27) (Ping timeout: 240 seconds)
[19:38:18] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:39:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:39:40] *** Joins: eta (~eta@chat.i.eta.st)
[19:41:42] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 252 seconds)
[19:41:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:41:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:46:58] *** Joins: Guest9 (~Guest9@43.241.144.27)
[19:49:44] *** Joins: noona (~noona@194.36.25.36)
[19:50:08] *** Parts: manicennui (uid349235@id-349235.tinside.irccloud.com) ()
[19:57:23] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[19:58:54] *** Joins: selwyn (~selwyn@user/selwyn)
[20:00:44] *** Quits: noona (~noona@194.36.25.36) (Quit: noona)
[20:10:49] *** Joins: rixard (~rixard@h-158-174-122-239.A357.priv.bahnhof.se)
[20:28:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:31:21] *** Joins: aeth_ (~aeth@user/aeth)
[20:31:27] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:31:32] *** aeth_ is now known as aeth
[20:39:31] *** Joins: livoreno (~livoreno@user/notzmv)
[20:41:45] *** mathrick_ is now known as mathrick
[20:43:47] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[20:49:56] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:53:45] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Quit: WeeChat 3.2)
[20:53:59] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[21:00:18] *** Joins: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi)
[21:01:13] *** Quits: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi) (Remote host closed the connection)
[21:01:36] *** Joins: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi)
[21:02:42] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 240 seconds)
[21:05:25] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[21:05:57] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[21:06:26] *** Joins: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de)
[21:11:08] *** Joins: optimist (~optimist@27.57.66.27)
[21:16:44] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:17:11] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[21:19:47] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90eb:f1b3:8100:6ed8)
[21:19:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90eb:f1b3:8100:6ed8) (Changing host)
[21:19:47] *** Joins: skapata (~Skapata@user/skapata)
[21:19:49] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:20:18] *** Joins: srhm (~ascii@user/srhm)
[21:20:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:31:43] *** Quits: Avichi (~Avichi@i186060.upc-i.chello.nl) (Ping timeout: 246 seconds)
[21:33:44] *** Joins: dsk (~dsk@user/dsk)
[21:35:51] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:36:17] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[21:41:21] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:41:31] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[21:44:41] *** Joins: aeth_ (~aeth@user/aeth)
[21:44:46] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:44:49] *** aeth_ is now known as aeth
[21:49:32] *** Joins: [deleted] (~livoreno@user/notzmv)
[21:49:58] *** Quits: optimist (~optimist@27.57.66.27) (Remote host closed the connection)
[21:50:30] *** Joins: optimist (~optimist@27.57.66.27)
[21:52:37] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[21:54:48] *** Quits: optimist (~optimist@27.57.66.27) (Ping timeout: 252 seconds)
[22:06:28] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[22:07:04] *** Joins: amb007 (~a_bakic@168.244.204.77.rev.sfr.net)
[22:08:28] *** Joins: optimist (~optimist@27.57.66.27)
[22:10:03] *** Joins: pjb` (~pjb@2a01cb040b1ae100445395ee53681b27.ipv6.abo.wanadoo.fr)
[22:10:10] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[22:15:06] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:16:12] *** Joins: flynn (~mcbloch@user/flynn)
[22:16:33] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:16:52] *** Joins: livoreno (~livoreno@user/notzmv)
[22:19:16] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[22:30:39] *** Quits: optimist (~optimist@27.57.66.27) (Remote host closed the connection)
[22:31:22] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Ping timeout: 245 seconds)
[22:35:47] *** Joins: optimist (~optimist@27.57.66.27)
[22:38:37] *** Joins: tfeb (~tfb@109.249.185.24)
[22:40:45] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 276 seconds)
[22:43:08] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[22:44:55] *** Quits: amb007 (~a_bakic@168.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:45:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[22:46:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:49:02] *** Quits: tfeb (~tfb@109.249.185.24) (Quit: died)
[22:52:00] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 252 seconds)
[22:52:40] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[22:56:13] *** Quits: optimist (~optimist@27.57.66.27) (Quit: Leaving...)
[22:58:22] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:7f3a:926a:5be5:7f19)
[23:03:42] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 256 seconds)
[23:03:49] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[23:04:35] *** Quits: johnjay (~pi@38.120.10.99) (Quit: WeeChat 2.3)
[23:05:01] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:05:39] *** Joins: johnjay (~pi@38.120.10.99)
[23:07:54] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 240 seconds)
[23:13:01] *** Quits: mattil (~mattilinn@87-92-0-72.bb.dnainternet.fi) (Quit: Leaving)
[23:13:37] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 268 seconds)
[23:17:52] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:17:52] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[23:17:57] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[23:19:03] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:19:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Killed (NickServ (GHOST command used by Inline_)))
[23:20:05] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[23:21:09] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[23:21:48] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[23:22:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[23:22:47] *** Quits: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de) (Ping timeout: 265 seconds)
[23:23:20] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:24:57] *** Quits: Guest9 (~Guest9@43.241.144.27) (Quit: Connection closed)
[23:26:15] *** Joins: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de)
[23:26:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[23:27:01] *** Joins: Inline (~Inline@aftr-37-201-241-161.unity-media.net)
[23:27:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:28:12] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 276 seconds)
[23:30:33] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[23:38:20] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 272 seconds)
[23:38:59] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[23:39:00] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[23:43:22] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 256 seconds)
[23:50:33] <kagevf> TIL about JSCL
[23:50:43] <kagevf> from that portability link
[23:50:48] <dash[m]> is that like JCL
