[00:01:25] <linext_> i'm working my way towards solving this problem: https://www.hackerrank.com/challenges/abstract-classes-polymorphism/
[00:02:25] *** Quits: dgcampea (~dgc@user/dgcampea) (Remote host closed the connection)
[00:02:39] <linext_> https://i.ibb.co/hVncNdX/Abstract-Classes-Polymorphism-Hacker-Rank.png
[00:02:39] *** Joins: dgcampea (~dgc@user/dgcampea)
[00:27:17] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[00:33:53] *** Quits: magla (~gelignite@d536591f.access.ecotel.net) (Quit: Stay safe!)
[00:37:34] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326)
[00:40:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5c5f:ad85:d2cd:496f) (Ping timeout: 240 seconds)
[00:43:48] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 240 seconds)
[00:54:44] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Quit: Leaving)
[00:58:15] *** Inline__ is now known as Inline
[01:24:25] *** Quits: kariosfox (~kariosfox@176.221.122.80) (Remote host closed the connection)
[01:24:49] *** Joins: kariosfox (~kariosfox@176.221.122.80)
[01:25:55] *** Quits: kariosfox (~kariosfox@176.221.122.80) (Remote host closed the connection)
[02:42:54] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[02:43:15] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[02:48:43] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:21:22] *** Joins: ymwm (~yingmanwu@110.85.123.64)
[03:29:27] *** Quits: Tazy (~Tazmainia@2001:1c02:170d:2600:7c05:7994:1a84:23ff) (Read error: Connection reset by peer)
[04:13:32] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:24:21] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[04:40:23] *** Quits: linext_ (~linext@pool-173-63-46-155.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[04:57:54] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:57:30] *** Joins: ferdna (~ferdna@user/ferdna)
[06:10:24] *** Joins: Inline__ (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de)
[06:12:57] *** Quits: Inline (~Inline@p200300cd470cd6007b9a329b320e25d9.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:19:19] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[07:20:10] *** Joins: noarb (~noarb@user/noarb)
[07:21:06] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[07:24:16] *** Joins: noarb (~noarb@user/noarb)
[07:37:33] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[07:52:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:05:33] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[09:38:22] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[09:39:55] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:47:03] *** Joins: ymwm_ (~yingmanwu@110.85.123.64)
[10:49:54] *** Quits: ymwm (~yingmanwu@110.85.123.64) (Ping timeout: 252 seconds)
[11:11:21] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[11:23:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:26:49] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:52:54] *** Joins: osfe_ (~lemaire@nanpc540.in2p3.fr)
[12:23:35] *** Joins: Tazy (~Tazmainia@2001:1c02:170d:2600:c56a:adee:92e6:239a)
[12:28:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:31:56] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:35:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[12:36:07] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:36:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[12:55:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:14:25] *** Joins: DSpider (~DSpider@82.79.237.68)
[13:55:04] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[14:29:25] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:32:02] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:33:00] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[14:36:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:24:50] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:03:51] *** Joins: AmR (~AmREiSa@156.207.194.71)
[16:25:05] *** Joins: Firecatmon (~firecatmo@pa49-186-28-200.pa.vic.optusnet.com.au)
[16:35:21] *** Joins: Hercules (~Hercules@user/hercules)
[16:36:03] *** Quits: Hercules (~Hercules@user/hercules) (Remote host closed the connection)
[16:37:05] *** Joins: ymwm__ (~yingmanwu@27.153.166.146)
[16:39:42] *** Quits: ymwm_ (~yingmanwu@110.85.123.64) (Ping timeout: 252 seconds)
[17:19:34] *** Joins: darkbit (~db@136.158.8.67)
[17:35:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:36:49] *** Joins: nq (~nq@2a02:2f08:e015:a900:cafd:3575:1a3d:974)
[17:36:53] <nq> hi all
[17:37:02] *** Quits: ymwm__ (~yingmanwu@27.153.166.146) (Ping timeout: 240 seconds)
[17:38:07] <nq> I got a little question I was pondering on and couldn't find a proper answer to; if a member function is specified as = 0 (pure virtual), does also specifying it with virtual change anything ? it doesn't seem to be necessary, in the sense that with or without the "virtual" specifier, the compiler doesn't complain anyhow
[17:38:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:42:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:58:26] <Alipha> geordi: class Foo { void bar() = 0; };
[17:58:26] <geordi> error: initializer specified for non-virtual method 'void Foo::bar()'
[17:58:35] <Alipha> nq: like this? ^
[17:58:57] <Alipha> Looks like the compiler complained
[18:10:32] *** Quits: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net) (Remote host closed the connection)
[18:12:02] <nq> weird
[18:12:04] *** Joins: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net)
[18:12:07] <nq> don't know what I did then
[18:12:38] <nq> well, thanks anyway :)
[18:13:06] <nq> on another note
[18:13:32] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[18:13:55] <nq> I would like to make a Graph class which, based on a non-type template parameter (an enum for SinglyLinked and DoublyLinked)
[18:14:24] <nq> and I would like that the member attributes to depend on whether the template parameter is SinglyLinked or Doublylinked
[18:15:41] <nq> does C++ have some mechanism for ~ "conditional member attributes" ?
[18:16:06] <nq> I have seen that I can do something like this inside constexpr functions, using if constexpr (<expr>) {}
[18:16:19] <nq> so what is the analogy for a struct ?
[18:20:17] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:20:42] <Alipha> nq: nope. You'd have to partially specialize your Graph class, or more likely, partially specialize whatever Node class you have
[18:24:02] *** Inline__ is now known as Inline
[18:24:07] <nq> is inheriting from std::conditional_t< expr, T_true, T_false> also a form of this "partial specialization" ?
[18:24:22] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[18:26:27] <nq> I ended up doing something like conditional_t<expr1, T1, conditional<expr2, T2, conditional<expr3, T3, an_empty_struct>>> in order to essentially a nested application of the ternary operator ()?():(), since that is what std::conditional seems to do, except it does so for type inheritance
[18:32:03] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:35:45] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[18:38:37] <Alipha> nq: yes, that works
[18:40:43] <nq> why does the std::optional<T> not have the T value directly in the struct, but instead in an inner struct ? I read somewhere (either some code comments or a forum, or both) that it has to do with the initializer list syntax; does this also happen with std::vector<T> then ?
[18:45:34] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[18:50:58] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:51:52] <Alipha> nq: std::optional stores the T value in a std::aligned_storage object, since it has to placement new the T into the storage space in order to control T's lifetime.
[18:53:14] <Alipha> A std::vector doesn't store any T values in itself--it has a T* to point to the T array
[18:56:56] <nq> this suggests that vector does not "control T's lifetime"
[18:57:29] *** Joins: FuzzyBottom_ (~FuzzyBott@d207-6-38-95.bchsia.telus.net)
[18:57:30] *** Quits: FuzzyBottom_ (~FuzzyBott@d207-6-38-95.bchsia.telus.net) (Client Quit)
[18:57:54] <nq> but isn't the vector<T> "object on the stack" essentially have the information needed to manage the heap-allocated T* ? in that sense, doesn't vector "own" T* ?
[18:58:54] *** Quits: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net) (Ping timeout: 250 seconds)
[19:00:49] *** Joins: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net)
[19:01:36] <Alipha> nq: vector does control the T objects lifetimes. Yes, vector has a T* and owns the objects pointed to by it
[19:02:23] <cbreak> nq: all c++ containers own their contents, in various ways
[19:02:45] <cbreak> with various constraints on what they can own
[19:03:33] <nq> what does that mean, "various ways to own the content" and "various constraints" ?
[19:05:32] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:35:04] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[19:35:27] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[19:37:17] *** Quits: osfe_ (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 240 seconds)
[19:44:19] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[20:44:51] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[20:46:47] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[20:50:12] <cbreak> nq: std::vector has contiguous storage of objects
[20:50:21] <cbreak> std::deque has blocked storage of objects
[20:50:31] <cbreak> std::list has a linked list structure of single objects
[20:50:42] <cbreak> they all own objects
[20:50:54] *** Joins: linext (~linext@pool-173-63-46-155.nwrknj.fios.verizon.net)
[20:51:51] <cbreak> the constraints differ, because of this
[20:52:08] <cbreak> for example, vector requires movable / copyable, deque doesn't. map doesn't.
[20:52:35] <cbreak> but there are constraints for < for keys, while unordered map requires hashable and == for keys
[20:52:40] <cbreak> and so on
[21:00:34] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[21:04:55] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[21:06:00] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:34:33] <Raziel> speaking of constraints... is it possible to make a concept to constrain a template only to containers that have a .clear function, or that have .begin and .end? 
[21:35:01] <Raziel> or any other method to constrain based on things like that, I guess
[21:39:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:43:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[22:08:45] *** Joins: gehn (~gehn@user/gehn)
[22:14:45] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 256 seconds)
[22:26:16] *** Quits: DSpider (~DSpider@82.79.237.68) (Quit: Leaving)
[22:31:46] <Alipha> Raziel: yes, that's basic concept usage
[22:55:51] *** Joins: magla (~gelignite@d5362120.access.ecotel.net)
[23:23:50] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[23:35:13] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:40:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:42:32] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:44:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[23:47:08] *** Joins: gehn (~gehn@user/gehn)
