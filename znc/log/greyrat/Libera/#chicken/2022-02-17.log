[00:04:10] <ASau> Corbin: Alright, I have recalled one really unusual thing that you want to implement to beat AWK for sure.
[00:04:43] <fantazo> zilti[m]: Linux is the future (tm)
[00:05:50] <ASau> Corbin: It is RS support. You can use it for quick and dirty extraction of data off web pages in the style of parsing HTML with regular expressions.
[00:08:24] <ASau> Corbin: There're other (rather rare) cases, when this feature is useful. Yet if you have full-blown programming language already, AWK is not needed even then.
[00:19:05] <ASau> zilti[m]: It turns out that answering question about favourite build tool is not easy!
[00:22:20] <zilti[m]> Well that was pretty much the answer I expected ^^
[00:22:31] <ASau> zilti[m]: After another iteration of thinking about related problems, I have to admit that I have feeling that we need to stop current attempts and accept it that we need full-blown coordination language for that.
[00:24:09] <ASau> Perhaps this is the reason why the most successful recent attempts are essentially libraries of general-purpose languages like Groovy, Python and so on.
[00:24:16] <zilti[m]> I think one of the mistakes so far is/was that everyone who created a build system focused on, well, compiling/packing up a bunch of files depending on a bunch of env vars. But that's not what's actually needed.
[00:25:26] <zilti[m]> You gotta solve deployment, that implies solving dependency management in itself in a more general manner
[00:27:35] <ASau> Even if you consider Maven, it is something that tries to do coordination by either pushing what is more complicated either to plugins or doing "programming-by-file-system-structure" that somewhat reminds of LabView, PureData and such.
[00:29:11] <ASau> (That's why I don't like Maven: if you need anything slightly non-trivial, you need to dive really deep.)
[00:30:31] <ASau> zilti[m]: sure, coordination.
[00:32:55] <ASau> zilti[m]: Another thing that is quite convoluted today is the management of separately compiled units.
[00:33:12] <ASau> Whether you call them artifacts, eggs, gems or just packages, you can have quite complicated setup for various reasons, and a number of tools fail to handle it.
[00:35:14] <jcowan> ASau: "Yet if you have [C] already, [non-C] is not needed even then."
[00:37:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:37:25] <ASau> jcowan: There is a bias that I come from the time when we didn't have easy way to install something like Python.
[00:37:35] *** Joins: amk (~amk@109.255.169.126)
[00:37:37] <ASau> AWK was there, and Python wasn't.
[00:37:57] <ASau> This is fundamentally different today.
[00:38:43] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:53] *** Joins: amk (~amk@109.255.169.126)
[00:40:57] <ASau> Previously, it was important to know AWK, because it was installed approximately everywhere by default. (Lets' not discuss broken systems like SCO UNIX or Solaris, alright?)
[00:41:51] <ASau> Today you just don't need to learn such restricted tools like AWK.
[00:42:41] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:46:24] <ASau> jcowan: BTW, if modern C++ compiler is considered available everywhere, its only inconvenience compared to AWK is requirement of AOT compilation. :)
[00:47:10] <zilti[m]> The only redeeming quality of C/C++ compilers is that they can also compile C
[00:48:25] <jcowan> ASau: Yes, no, I don't think so.  Writing code in C++ has essentially higher programmer-cost.
[00:49:54] <jcowan> Or if you don't think so, s/C++/assembly
[00:50:06] <ASau> jcowan: alright, considering problems that inexperienced programmer can trip over.
[00:51:17] <ASau> In general, C++ with STL and no inheritance and templatology games is a lot easier to deal with in practice.
[00:52:21] <ASau> At the very least you won't have to implement trivial data structures like dynamic vectors or linked lists.
[00:52:55] *** Joins: amk (~amk@109.255.169.126)
[00:55:00] <ASau> jcowan: It turns out that the latter may be really big problem, I have seen it in practice how a person spent several weeks implementing something like that instead of doing productive work.
[00:55:21] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:55:31] *** Joins: amk (~amk@109.255.169.126)
[00:57:13] <ASau> (Perhaps it could be better to implement the whole thing in Python and let it chew as slowly as it wishes.)
[01:00:26] <fantazo> ASau: well, today sometimes one need to still learn AWK, because of restricted company rules ...
[01:01:35] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:03:10] <ASau> fantazo: I can imagine such an edge case, but I doubt that it is really that serious. Python or/and Perl are installed almost universally these days. (Except on smaller embedded systems, but you really don't want awk there either.)
[01:04:19] <ASau> fantazo: if you want a case of funky restrictions, we have one where all scripts are forbidden, yet because essential software is in Java, invoking JVM is not.
[01:06:09] <fantazo> ASau: sure, I just wanted to construct an argument, which I once had experienced myself.
[01:07:59] *** Joins: amk (~amk@109.255.169.126)
[01:11:20] <ASau> fantazo: Oh, constructing edge case is easy: "You may use only NetBSD base system." There! No Python, no Perl, no Scheme, only awk and barebone Lua.
[01:12:01] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Remote host closed the connection)
[01:14:35] <fantazo> ASau: Lua?! What new fangled luxury!
[01:17:53] <ASau> Yeah, one embedded developer has managed to push it in at some point.
[01:18:29] <ASau> But only in restricted form, and I don't know if it is still there since we left.
[01:20:43] <ASau> fantazo: In any case, I _hope_ that such edge cases will happen rarer over time, since such restrictions are just stupid and nothing else.
[01:21:29] <fantazo> ASau: yeah, they are. but the stupidity of humanity is endless.
[01:24:05] <ASau> I just hope that those "system administrators" will just accept that, e.g. Python, just has to be installed and in functional state.
[01:24:52] <ASau> (And those who deal with NT, learn anything about code signing at last!)
[01:27:02] <ASau> Alright, enough autotoll for today. I have already spent much more than I intended to.
[01:37:12] <jcowan> (Limiting the list of programming languages you can use at a given organization is not irrational)
[02:02:46] <ASau> jcowan: it is not limiting list of programming languages, it is about forbidding scripts.
[02:03:40] <ASau> jcowan: In NT there exist proper ways to forbid users executing their scripts.
[02:05:31] <wasamasa> the above sentence is funnier if you interpret NT as new testament
[02:05:45] <wasamasa> vandusen: "You shall not execute your scripts"
[02:05:49] <vandusen> wasamasa: I could take some, go out, and CAUSE PROBLEMS!
[02:06:07] <ASau> vandusen: thou shall not
[02:06:09] <vandusen> ASau: "All up ons" is slang that means "around here or whatever"!, just FYI!
[02:08:52] <siiky> vandusen: whoa there, next thing we know you're out and about rioting
[02:08:54] <vandusen> siiky: Okay!  Stop imagining because it turns out she totally had sisters!
[02:19:51] <Bunny351> now you have riled up vandusen completely!
[02:22:04] <Zipheir> "Scripts"?
[02:22:26] <Zipheir> "For most people, scripting is like obscenity: I can't define it, but I know it when I see it." --Larry Wall
[02:23:11] <Zipheir> Unless it's just "some text file with a shebang at the top" in this context.
[02:23:59] <Corbin> Yep, "script" is pejorative.
[02:24:46] <Zipheir> "Ada Lovelace probably would have said 'a script is what you give the actors, a program is what you give the audience'." --also Larry Wall
[02:25:54] <Zipheir> (Sorry, Larry is a source of many gems on the topic.  vide https://www.perl.com/pub/2007/12/06/soto-11.html/)
[02:27:09] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 256 seconds)
[02:27:35] <ASau> Bunny351: got prepared already?
[03:05:31] *** Quits: jcroisant (sid137329@user/jcroisant) (Read error: Connection reset by peer)
[03:05:40] *** Joins: jcroisant (sid137329@user/jcroisant)
[03:18:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:53:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:53:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:06:32] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[04:39:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4)
[04:39:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4) (Changing host)
[04:39:43] *** Joins: skapata (~Skapata@user/skapata)
[05:05:27] *** Joins: s-liao69 (~s-liao@101.86.96.21)
[05:06:40] *** Quits: s-liao69 (~s-liao@101.86.96.21) (Client Quit)
[05:07:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:13:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:44:13] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[05:53:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:07:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:58:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:59:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[07:08:49] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Read error: Connection reset by peer)
[07:09:19] *** Joins: keyehzh (~keyehzh@user/keyehzh)
[07:12:03] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Remote host closed the connection)
[07:16:27] *** Quits: sts-q (~sts-q@212.53.219.239) (Ping timeout: 252 seconds)
[07:17:05] *** Joins: sts-q (~sts-q@212.53.219.200)
[09:52:44] <sjamaan> siiky: Not sure
[09:52:50] <sjamaan> Did you figure it out yet?
[10:02:56] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[10:09:14] <vandusen> [eggs repo (r41118, by mario)] eggref/5/awful-salmonella-tar: release not for version 0.0.4
[10:09:35] <mario-goulart> s/not/note/
[10:10:08] <vandusen> [eggs] awful-salmonella-tar version 0.0.4 (for CHICKEN 4) has been released
[10:11:24] <vandusen> [eggs] awful-salmonella-tar version 0.0.4 (for CHICKEN 5) has been released
[10:16:23] <Zipheir> Beware the awful salmonella tarpit...
[10:34:48] <vandusen> [eggs repo (r41119, by sjamaan)] Small change in how CVEs should be requested; now we go through oss-security
[11:04:05] <vandusen> SPAM! SPAM! SPAM! by freee
[11:08:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:21:34] *** Joins: rgherdt (~rgherdt@83.236.18.121)
[11:25:33] <fantazo> SPAM
[11:26:55] <ASau> Zipheir: BTW, what I forgot is that AWK is good example of abstraction leak.
[11:29:19] <ASau> Zipheir: it makes you believe that you work with arrays and even multidimensional arrays,
[11:29:23] <ASau> Zipheir: but what it actually gives you is one hash table where keys are composed by serializing numbers to strings and concatenating them with separator something like chr(4) or so.
[11:31:05] <vandusen> SPAM! SPAM! SPAM! by freee
[11:43:40] *** Joins: crumpo (~crumpo@user/crumpo)
[12:06:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:32:26] *** Joins: klovett_ (~klovett@107.127.17.177)
[12:35:57] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[13:12:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:42:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:58:12] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 272 seconds)
[13:58:47] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[14:11:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:22:12] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 240 seconds)
[14:23:26] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[14:23:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:43:20] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 272 seconds)
[15:54:12] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[16:18:10] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 272 seconds)
[16:18:33] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[16:21:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:47:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2)
[16:47:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2) (Changing host)
[16:47:18] *** Joins: skapata (~Skapata@user/skapata)
[17:02:05] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 256 seconds)
[17:02:21] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[17:16:27] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (Remote host closed the connection)
[17:16:51] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[18:14:32] *** Joins: keyehzh (~keyehzh@user/keyehzh)
[18:35:30] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[20:28:07] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[20:28:49] <Zipheir> ASau: Good point.
[20:33:36] <Zipheir> I would add that Lua continued and amplified that leak ("everything is a table").
[20:55:01] *** Quits: ecloud (~quassel@192.89.120.58) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:55:42] *** Joins: ecloud (~quassel@192.89.120.58)
[22:13:27] *** Quits: chicken_m (~chickenru@2604:3d08:5684:3000::5fab) (Quit: Konversation terminated!)
[22:19:54] *** Joins: chicken_m (~chickenru@2604:3d08:5684:3000::5fab)
[23:08:05] <jcowan> Lua tables whose keys are positive integers actually are arrays in the standard implementation.
[23:08:58] <jcowan> Zipheir, ASau: ^^
[23:09:52] <Zipheir> Thanks, I misremembered.
[23:16:11] <Bunny351> jcowan: only unless you explicitly set a value to "undefined"
[23:16:39] <Bunny351> then that array element, including the index vanishes, which is a total trainwreck
[23:22:35] <jcowan> If you are using the table as an array, that just means no values can be undefined.  Since undefined is not actually useful for anything *except* general hash tables, that's not really a problem.
[23:23:21] <Bunny351> sorry, "not actually useful" lines of argument don't work with me. it can happen by accident, for example.
[23:23:49] <Bunny351> it simply is the point where the "look, we boiled it all down to a single type" idea breaks down.
[23:23:53] <Bunny351> it's a design mistake.
[23:24:49] <Bunny351> the implementation details leak through to the outside. arrays should be arrays and tables should be tables, it is very simple, many languages get this right.
[23:25:36] <Bunny351> JS and clojure repeat the mistake by making to much use of hash-maps as a universal record structure, btw.
[23:26:45] <Bunny351> then exactly that happens, what the static typing hardliners always complained about: the dyn. typed languages are "unityped" (which is factual nonsense, but becomes true when we try to make things too generic)
[23:33:16] <jcowan> Dynamic languages *are* unityped, by which is meant that they have only one static type, Any.
[23:34:35] <fantazo> go, fist fight!
[23:34:53] <Bunny351> jcowan: sorry, that's nonsense.
[23:34:58] <jcowan> The trouble is that people who think in static types mean something complementely different by "type".  A dynamic type is the type of an *object*, whereas a static type is the type of an *expression*
[23:35:14] <Bunny351> Java is untyped, if you will, as you have only objects and native types
[23:36:03] <Bunny351> unityped, I mean
[23:36:30] <jcowan> Java is full of static types; it also has dynamic types.
[23:37:04] <Bunny351> the only difference between static and dynamic types is the latent type info in the latter. and even staticalliy typed languages have typechecks, for GC and for (say) exceptions (see ocaml)
[23:39:34] <Bunny351> in java, all introspection on value types requires wrapping into some sort of object, so you have static types for primitive numbers and arrays, but that's it.
[23:40:14] *** Quits: crumpo (~crumpo@user/crumpo) (Ping timeout: 272 seconds)
[23:44:01] <Bunny351> but the real uglyness is that you have effectively two parallel type systems: one static, at compile-time and one dynamic at run-time, possibly with different constraints and semantics
