[00:00:00] <SAL9000> > people promptly bypass it with "uncheck"
[00:00:13] <SAL9000> * cries in C++ *
[00:01:12] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Quit: WeeChat 3.3)
[00:01:56] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[00:02:25] <hayley> At least I got to someone with my stupid principles.
[00:03:35] <hayley> w.r.t "It is a developer issue": "because the C language does not provide for these checks to be automatically generated, programmers often leave them out. Furthermore, the code is "more elegant" when the checks are suppressed. This is a good example of a variation on Whorf's hypothesis, which states that language affects thinking; in the case of programming, the language used does affect the quality of the code produced."
[00:04:09] * White_Flame gives a big Amen to that
[00:05:12] <hayley> Ideally, a given sort of bug should be impossible, or the programmer should know immediately that they will need to check for it.
[00:05:35] <White_Flame> or you have to "do something special" in order to work around the normal safe stuff
[00:05:54] <SAL9000> tbh "crashes on overflow" is already a step up from "silent undefined behaviour" (which is usually twos complement... but not always)
[00:07:22] <SAL9000> reminds me of telling certain users of [proprietary language] to stop trying to bypass the builtin GC... no, you can't malloc() yourself a buffer to allocate in "so that it goes faster", that will end in fire.
[00:07:58] <hayley> Same difference, if seeing some construct (e.g. (optimize (safety 0)) or unsafe {}) indicates that things can go wrong.
[00:08:25] <SAL9000> at least the (optimize ...) version has global overrides in most Lisps, iirc?
[00:08:37] <SAL9000> there was something about declaim and minimum optimize values
[00:08:53] <hayley> SBCL at least has a "compiler policy", right.
[00:09:59] <SAL9000> malloc() in question didn't even require unsafe(), but the way they wanted to use it would have resulted in uncontrolled pointers to GC objects -> undefined behaviour at some point in the future
[00:10:11] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[00:10:29] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Quit: Time for bed...)
[00:10:46] <SAL9000> given that the GC in question is a copying collector... well.
[00:21:32] <pjb>  /clear
[00:50:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:03:25] *** Quits: scymtym (~user@2001:638:504:20e6:d2b:67db:8460:2e05) (Ping timeout: 250 seconds)
[01:06:01] <pl> I found a song about software development O_O
[01:06:03] <pl> https://www.youtube.com/watch?v=fhQrFBQV7tk
[01:06:03] -ixelp- St. Elmo's Fire 05 - Threes, Rev. 1.1 [HQ] - YouTube
[01:16:54] <hayley> https://www.reddit.com/r/Common_Lisp/comments/s02yhz/stas_has_alienated_longtime_asdf_maintainer/hsfecun/ lolwat
[01:16:55] -ixelp- Stas has alienated long-time ASDF maintainer Robert Goldman : Common_Lisp
[01:17:03] <hayley> "I couldn't care less about edicl since I find every single CL library he wrote to be shit (my standards are high)." Is this gilberth?
[01:20:37] <shka> downvoted
[01:24:05] <shka> "I'll take 1 stassats holding down the fort over 10 rpgs/fares/phoebes.."
[01:24:14] <shka> lol
[01:40:13] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f43d:bda7:b2e4:74b8)
[01:44:13] * hayley blows the stack with a compiler macro. Well.
[01:44:32] <hayley> I returned the same form, so the compiler shouldn't process it again. Right?
[01:45:53] <hayley> Nope, it wraps it in LET cause of the ONCE-ONLY form. Whoops.
[01:49:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:50:33] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[02:04:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:16:29] <drakonis> huh, the thread op is robert goldman's daughter
[02:17:13] <drakonis> talk about family business eh :V?
[02:17:43] <hayley> idk if they use the word daughter.
[02:18:23] <drakonis> well i dont know
[02:18:43] <drakonis> so i'll retract the usage
[02:18:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:19:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:19:47] <dave0> maw
[02:20:21] <drakonis> bork
[02:21:23] <dave0> swedish chef!
[02:21:28] <hayley> https://blog.sigplan.org/2022/01/13/provably-space-efficient-parallel-functional-programming/ More thread local heaps.
[02:21:29] -ixelp- Provably Space-Efficient Parallel Functional Programming | SIGPLAN Blog
[02:34:06] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[02:44:37] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f43d:bda7:b2e4:74b8) (Ping timeout: 240 seconds)
[03:08:37] <gilberth> hayley: No, that is not me. I don't use this s-word.
[03:09:48] <gilberth> Note to myself: Run your damn test suite more often.
[03:09:57] <hayley> "<gilberth> hayley: If you're unlucky this would make applied-langua.ge rank shit."
[03:10:19] <gilberth> I face regression in both passed test and performance. I'll have a happy hunt.
[03:10:30] <hayley> Note to myself: Make a test suite.
[03:10:52] <gilberth> hayley: You got me. Did you use grep to find that quote?
[03:11:04] <hayley> Probably should also test :START and :END some more, though I don't expect to have any bugs surrounding those.
[03:11:11] <hayley> gilberth: Yes.
[03:11:43] <gilberth> .oO(Ah! That is her application of fast grepping.)
[03:12:09] <gilberth> hayley: Curious, how many other quotes using the s-word do you find?
[03:13:21] <hayley> At least one? /me using Matrix's grep, which is the slowest grep ever created.
[03:14:36] <gilberth> hayley: One of how many messages I wrote?
[03:14:49] <hayley> Not counting.
[03:16:08] <gilberth> Well, it's very rare I use that word. I also don't in German.
[03:21:24] <lagash> use ripgrep :)
[03:23:31] <moon-child> gilberth: I get 22 from you
[03:24:12] <gilberth> I really wonder if people want and prefer the RE "foo|foobar" applied to "foobar" only match the "foo" part. Or in more general terms, that r|s matches a string different from s|r. Or if they just accept that defect.
[03:24:39] <gilberth> moon-child: Interesting. I should watch my language then.
[03:24:45] <moon-child> apparently 0.14% of your messages are shitty
[03:25:01] <gilberth> That surprises me.
[03:26:14] * hayley expects to have about 50% shitty comments
[03:26:15] <moon-child> yes, it does seem like a lot.  But I rank at 0.45%, and hayley is up at 1.7% soo
[03:26:24] <hayley> Close enough.
[03:27:50] <gilberth> Ok. I feel some relief then.
[03:29:23] <hayley> lagash: I thought we were talking about fast grepping.
[03:30:11] <hayley> Well, now pretty much everything signals a compile-time warning (or style-warning for stuff that will never match). So gilberth can be happy.
[03:51:27] <gilberth> Interesting. My s-word ratio hasn't changed over the past 20 years.
[03:53:48] * hayley watches her language - she watches all the times she says shit and other words.
[03:55:51] <gilberth> My f-word usage is 0.02%, And 2/3 of that is a quote.
[03:56:15] <hayley> https://youtu.be/rXOzV1o0uhM?t=194
[03:56:16] -ixelp- Bart's Factory - YouTube
[03:56:50] <gilberth> .oO(I could set up a ranking site. Hmm.)
[04:07:02] <dave0> hayley: you don't own a factory!
[04:07:25] <dave0> oh that's the frank grimes episode
[04:12:09] *** Joins: semz (~semz@user/semz)
[04:44:34] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net)
[04:44:36] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net)
[04:44:36] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net) (Client Quit)
[04:53:24] *** Joins: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net)
[04:56:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:05:12] * gilberth wants compiler macros for all functions accepting :START and :END to also recognize a SUBSEQ arg.
[05:06:23] <gilberth> But this is hairy, because return values also must be tweaked as this changes what a returned index is relative to. Also having both a SUBSEQ and :START/:END present makes things more interesting.
[05:08:32] <gilberth> And getting the evaluation order right is interesting also.
[05:10:10] <moon-child> so, what, you want (f (subseq x y)) -> (f x :start y)?  That seems not really interesting
[05:10:32] <moon-child> when compared with contextual (let ((z (subseq x y))) (f z)) which you can't do with a compiler macro
[05:11:03] <gilberth> Yes, just a compiler macro would be suffice for my purposes.
[05:11:20] <moon-child> why do you want it?  Is it so cumbersome to write :start?
[05:12:06] <gilberth> And I really, really want that (FIND-SYMBOL (SUBSEQ X S E)) does not cons. Different story, but related.
[05:13:18] <moon-child> sounds like what you actually want is for displaced arrays to be fast
[05:14:25] <gilberth> moon-child: With my scanner generator / RE matcher, you could refer the match or submatches by $$ or $<n>. That are symbol macros expanding to (SUBSEQ internal-buffer internal-start-n internal-end-n). So to parse an integer later you can say (PARSE-INTEGER $$) in a rule's body.
[05:15:12] <gilberth> To do that non-consing, it would be: (PARSE-INTEGER (BUFFER $$) :START (START $$) :END (END $$)) -- Cumbersome.
[05:16:14] <moon-child> yep, sounds like you want displaced arrays
[05:16:41] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f43d:bda7:b2e4:74b8)
[05:18:00] <gilberth> Or for the rgb example. E.g. ("rgb(([0-9]+),([0-9]+),([0-9])+" (return (make-rgb (parse-integer $1) (parse-integer $2) (parse-integer $3)) and the long-winded (MAKE-RGB (PARSE-INTEGER (BUFFER $1) :START (START $1) :END (END $1)) (PARSE-INTEGER (BUFFER $2) :START (START $2) :END (END $2)) (PARSE-INTEGER (BUFFER $3) :START (START $3) :END (END $3)))
[05:18:42] <gilberth> moon-child: To craft a displaced array, I need to cons too. And they often are not handled well.
[05:19:01] <gilberth> And no: I will not use DYNAMIC-EXTENT. No way!
[05:19:10] * hayley lazily allocates gilberth
[05:19:38] <gilberth> hayley: How would lazy allocation help here?
[05:19:50] <hayley> The displaced array can be lazily allocated.
[05:20:14] <moon-child> gilberth: yes.  Hence 'what you actually want is for displaced arrays to be fast'
[05:20:21] <gilberth> And? I still need to cons it to pass it to PARSE-INTEGER or to whomever I want to pass it to.
[05:20:44] <gilberth> moon-child: Even if they would be fast, I would still cons.
[05:20:46] <moon-child> (also: I bet you could infer the displaced array has dynamic extent and stack-allocate it)
[05:20:52] <moon-child> (then, no cons)
[05:21:34] <hayley> https://www.youtube.com/watch?v=ns-fw7a16Gw
[05:21:35] -ixelp- jean-jacques burnel - Freddie Laker - YouTube
[05:21:46] <gilberth> moon-child: I can't. The compiler could with a whole program analysis. Breaks often. And a mere call to ERROR in PARSE-INTEGER could spoil that.
[05:22:08] <gilberth> It doesn't even work with closures.
[05:22:40] * moon-child wants stack-based allocation
[05:22:43] * hayley passes a write barrier to gilberth
[05:22:58] <moon-child> hahaha
[05:23:04] <gilberth> I want whole program analysis.
[05:23:12] <hayley> Take the damn write barrier.
[05:23:39] <moon-child> gilberth: I want debugging.  I want to be able to step into a function, grab the parameter, and shove it wherever I like.  Hence: stack-based allocation
[05:24:07] <moon-child> hayley: your write barrier is not hardware-accelerated
[05:24:16] <hayley> So?
[05:24:20] <gilberth> moon-child: A simple compiler macro would be suffice here for me. And before I'm dead.
[05:24:31] <hayley> Hardware accelerated write barriers are meh. Read barriers are more important to accelerate.
[05:25:02] <moon-child> sure
[05:25:06] <gilberth> Yes, writes are seldom enough.
[05:25:15] * hayley starts editing pictures from https://hypnogram.xyz/ to make an album cover.
[05:25:21] <moon-child> but, I mean, can't beat free
[05:26:40] <gilberth> HW acceleration does not imply that you don't need to do that work anyway. There is little to gain. We don't have those micro-coded machines of the 80s anymore.
[05:26:48] * hayley then feeds the AI-generated images into AI upscaler.
[05:27:20] <hayley> Ouch, the website I usually used now sticks a watermark on.
[05:27:22] <White_Flame> machine code is our microcode now :-P
[05:27:34] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[05:27:36] <gilberth> White_Flame: Indeed.
[05:28:06] <moon-child> gilberth: there is not really work involved with the write barrier.  It's just a couple of range checks
[05:28:39] <moon-child> (which is also why hayley says it is not so important to accelerate.  But still: it would be free)
[05:28:48] <gilberth> Still work.
[05:29:43] <moon-child> sure.  And it is more work to add numbers than to OR them, but the computer takes the same amount of time to do them
[05:30:19] <hayley> https://users.cecs.anu.edu.au/~steveb/pubs/papers/wb-ismm-2004.pdf
[05:30:26] <gilberth> The question is by when you need to know the result of the write barrier check. Or what you really could do in parallel to it and what not and needs to wait/stall.
[05:30:42] <White_Flame> I guess you could dynamic-extent your subseq if it's not too big
[05:30:43] <hayley> Apparently you can get a read barrier of sorts for just 1% overhead on PowerPC.
[05:31:11] <White_Flame> (oh I guess moon-child already mentioned that)
[05:31:40] <moon-child> gilberth: your CPU does all sorts of things in parallel with divides and memory fetches, both of which have the potential to fault
[05:31:59] <gilberth> White_Flame: I my case, I can't. It should be ok to pass that $$ of mine up or stash it. The burden should not be on the programmer to evacuate, if needed.
[05:32:47] <gilberth> moon-child: Sure. I am just saying that it is not as easy as it may appear at a first glance.
[05:36:47] <White_Flame> looking at the ivory, it had array registers holding all the pointer magic for traversing or individually aref'ing an array
[05:37:25] <White_Flame> it really seems that something like this might be in order, to take a setup expense to establish boundaries, walk displacements, etc so that the inner loop can be fast, instead of pushing all that onto each individual aref
[05:38:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:38:20] <White_Flame> I do a lot of that in my more complex 6502 code, take a bunch of setup and do span clipping etc, so that my inner loop has far fewer checks
[05:39:40] <White_Flame> the one case I can see that failing, though, is if you have a resizable array and another thread resizes it after your assumptions have been made
[05:39:50] <moon-child> White_Flame: the main problem is that array displacements can be chained
[05:40:12] <White_Flame> moon-child: I don't see how that makes much of a difference.  the displacements would be resolved once during setup
[05:40:21] <hayley> The trick is to define array resizes as causing write conflicts with everything.
[05:40:22] <White_Flame> not at every aref
[05:40:37] <moon-child> oh, hm
[05:40:42] <hayley> Then your assumptions are okay to make, as you have caused a data race.
[05:40:43] <moon-child> that could work
[05:45:53] <hayley> Oh, gees, editing these is hard. I asked for a picture of a doomsday prepper, as well as another of a time explosion (both relating to two tracks on the album). Got a picture of a guy outside an outline of a tent and some junk, and a picture of an hourglass exploding, with a beautiful cloud over it. But I can't seem to put both into one frame.
[05:50:26] * hayley uploaded an image: (192KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/jFyFgKWeNhGAVyZMOhQmuhMC/mfds2.jpeg >
[05:50:26] * hayley uploaded an image: (194KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/hwbboOIzVndhBZIXtowaPNRq/mfds.jpeg >
[05:51:02] <hayley> Could do without the JPEG artifacts, sadly.
[05:53:53] <hayley> .oO(Way my brother handles his laptop bag, I swear he's trying to break the laptop.)
[05:56:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:58:04] <gilberth> moon-child: BTW even if displaced arrays would be fast, it won't do, as the buffer of mine is a buffer which may be overwritten, so a displaced array to it won't do good.
[05:58:44] <moon-child> .oO(copy-on-write?)
[06:00:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:00:24] <gilberth> Still I would keep a pointer to say 8kB, when I only need a handful chars in it. And copy-on-write still allocates, for it to work you'd need a second address.
[06:03:04] <hayley> I think I got it, I put the exploding hourglass behind the house.
[06:03:06] <moon-child> sba.  write barrier.  T_T
[06:28:31] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f43d:bda7:b2e4:74b8) (Remote host closed the connection)
[06:33:24] <gilberth> White_Flame: For your 6502 AREF can't you use self-modifying code? Like just-in-time-inlining?
[06:33:54] <White_Flame> sometimes.  for smaller lengths it's faster to use zp indirection
[06:34:34] <drakonis> lol r7rs-large is looking to be as huge as ansi cl, if not bigger.
[06:34:45] <White_Flame> but the biggest thing is to do the pointer following, start/end checking, compute the stride, etc outside the loop
[06:34:52] <moon-child> drakonis: indeed.  Still no clos though
[06:35:03] <drakonis> there's a bunch of schemes that have clos though
[06:35:11] <drakonis> or something close to it
[06:35:15] <White_Flame> sos?
[06:35:21] <gilberth> White_Flame: Yes, my idea was to put those constants right into the code.
[06:35:34] <drakonis> guile, gauche, stklos, chicken
[06:36:11] <drakonis> there's even restarts in the slate now
[06:36:36] <drakonis> scheme is getting greenspun'd
[06:36:42] <drakonis> :v
[06:37:08] <drakonis> there is a srfi that adds objects
[06:37:40] <drakonis> https://srfi.schemers.org/srfi-222/
[06:37:40] -ixelp- Compound Objects
[06:37:51] <gilberth> White_Flame: I once experimented with an AREF cache for CLISP's BC interpreter. Each AREF instruction would have a cache of the pointer to add the offset to, a shift for the offset, a mask on the offset yielding a shift for the value gotten and an pattern to be IORed in for tagging. Turned out to be fast, as "Look ma, no branches."
[06:38:44] <moon-child> 'clisp [...] fast'
[06:39:34] * moon-child spots a monitor with a refresh rate of '60 khz'.  Big if true
[06:39:52] <gilberth> CLISP's BC interpreter is over-engineered. But I guess as with the CADR space was an issue. I mean, run Common Lisp with just 1MB RAM in your machine.
[06:41:04] <drakonis> moon-child: i hope it doesnt take forever to reach release
[06:42:55] <drakonis> its satisfying to see something like this
[06:43:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:43:06] <gilberth> In contrast to the footprint of CMUCL which likes to inline about everything. The numbers, I remember for the late 90s was: CLISP 1.4MB, ACL: 4.3MB, CMUCL: ~20MB. And surprise: ACL is fast too, despite not inlining all sorts of functions.
[06:44:15] <moon-child> iirc allegro does multiple entry points
[06:44:22] <moon-child> I am sad no one else does that
[06:44:28] <gilberth> [Remember that CLISP was initially developed on an Atari ST.]
[06:44:34] <gilberth> moon-child: Yep.
[06:44:54] <hayley> SBCL disassembly sometimes mentions XEPs (extended(?) entry points), but idk where they are used.
[06:45:55] <gilberth> I never understood CMUCL's calling convention. Does SBCL finally managed to use RET even?
[06:46:32] <hayley> IIRC yes.
[06:46:48] <hayley> Kinda important when you have CALL/RET prediction.
[06:46:59] <gilberth> Indeed.
[06:47:19] * moon-child wants separate call/data stacks
[06:47:21] <moon-child> no-fuss RET
[06:47:36] <gilberth> This is one of those things that changed in the last decades. Didn't matter for an 80386.
[06:48:01] <hayley> Also see https://github.com/robert-strandh/SICL/blob/master/Code/Compiler/MIR-to-LIR/enter-return.lisp which is no fun.
[06:48:02] -ixelp- SICL/enter-return.lisp at master · robert-strandh/SICL · GitHub
[06:50:07] <moon-child> w/ separate call/data stack, can just have push rbp / pop rbp;ret.  No magic
[06:51:16] <hayley> https://git.bsd.gay/closos/closos the most gay OS on git.bsd.gay
[06:51:17] -ixelp- closos/closos: A very gay operating system written in, but especially inspired by Common Lisp and its interactive enviro [...]
[06:51:47] <gilberth> moon-child: How about the caller parses the arguments?
[06:52:24] <moon-child> gilberth: you mean like caller stack-cleanup?
[06:52:28] <hayley> .oO(What if we were both girls and we exchanged objects 👉️😳👈️)
[06:53:27] <moon-child> lol
[06:54:54] <gilberth> moon-child: I don't care who cleans the stack up.
[06:55:30] <ck_> I won't do it, do your own cleaning. Morning.
[06:55:53] <hayley> One thing about OO and generic functions or messages, when you have a distributed object system (wherein objects live on a given computer, but cross-computer references can be made), it is trivial to tell which server handles the message.
[06:56:16] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net) (Quit: Leaving)
[06:56:23] <hayley> Not so much for generic functions. What happens if I do (print <object on computer A> <stream on computer B>)? Which one handles the GF?
[06:56:46] <hayley> Maybe the trick is that you eventually will hit a case where SLOT-VALUE or similar only applies to one machine.
[06:57:09] <White_Flame> if you have that level of interaction, does it matter where it runs?
[06:57:25] <moon-child> it comes down to your consistency model, no?  Presumably 'live on' means 'can be mutated by', right?
[06:57:31] <hayley> It has to run somewhere, I guess.
[06:57:47] <hayley> Right, the actual object is stored on one machine, and all others just have "proxy" objects.
[06:57:54] <gilberth> hayley: How does subject-oriented programming solve that? On this level that is only an syntactic or modularity issue. The work would be the same. As White_Flame said.
[06:58:49] <hayley> gilberth: When a machine encounters <proxy> foo: <blah>, then it looks up the machine which has the proxied object, and forwards the message. Then #foo: runs on that machine.
[06:59:25] <gilberth> And? You could do that with generic functions, too.
[06:59:49] <moon-child> (f x y) <-- do you run this on x's machine, or y'x?
[06:59:51] <moon-child> y's
[07:00:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:01:33] <gilberth> moon-child: First, x.f(y) or f(x,y) to me is a pure syntactic issue. And you said (+ x y) and not (funcall^Wsend x '+ y). So when you want to make the first argument govern where that is executed, you can do so with generic functions as well.
[07:02:13] <moon-child> sure.  But then you have message-passing with a 'generics' coat of paint
[07:02:34] <hayley> To an extent, though, we don't have a model of "X runs F" in any case. So maybe we just end up firing off SLOT-VALUE-USING-CLASS to remote machines.
[07:02:47] <moon-child> why choose the first argument?  (print obj stream) is really sending obj to stream, not the other way around
[07:03:05] <gilberth> Yes, and I despite the "message passing" idea.
[07:03:17] <hayley> Nonetheless, having inbuilt distribution would be a fun party trick for CLOSOS.
[07:03:29] <moon-child> well, network packets are messages.  So you can not get away from it w/network
[07:03:59] <moon-child> hayley: I am wary of mechanisms which attempt to treat such 'proxy' objects as though they were real objects in generalised context
[07:04:31] <hayley> For this trick to work, we'd have to replicate generic functions, and invalidate upon redefinition, still.
[07:04:36] <gilberth> moon-child: That is arbitrary. That is the my whole point. Why would in (+ x y) one of those numbers be an object and the other just some vanilla argument? Makes no sense.
[07:05:58] <gilberth> And PRINT is a good example, as you may want to specialize it on both sides. There is already e.g. the argument precedence order. Why not having the same for guessing on which machine to do the work?
[07:06:11] <hayley> moon-child: ):
[07:07:04] <moon-child> sorry.  I expect CAR to be constant time (modulo barriers, which amortize).  If I am in a context where it is not, I want that to be explicit
[07:08:26] <hayley> Right, you have to be careful what to replicate, and what to proxy. MOESI when
[07:08:29] <gilberth> By default CLOS has an argument precedence order from left to right. It is custom to have what would be a "message receiver" as the first argument. So doing the same for a distributed system would work well and lead to few surprises. Programmers already order their parameters that way. And when that doesn't fit: Offer an analog to argument precedence order.
[07:09:44] * hayley uploaded an image: (85KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/puRnGUmxBIfaosReVBrnDcYN/trans-ingalls.png >
[07:09:56] <hayley> Me when r/transprogrammer is full of r/unixporn material and someone hiring for Microsoft
[07:10:59] <moon-child> fwiw I was thinking of something similar a while ago.  All objects are networked.  There is no webpage, only an object from another computer which has limited capabilities wrt this one.  Gave up the idea
[07:11:18] <hayley> 🤔
[07:11:47] <hayley> moon-child: There was this replicated object system at ELS, but I don't think they're going to get it ready for real use.
[07:12:17] <moon-child> very compelling.  But on some level you have to care what sort of object you're dealing with.  And: I want hardware as a strong trust boundary, which means you _especially_ have to care what sort of object you're dealing with
[07:12:24] <moon-child> hayley: didn't you talk about a replicated object system at ELS?
[07:12:38] <hayley> That's the joke.
[07:13:26] <gilberth> Well, in the extreme case we would all share one single universal address space.
[07:13:51] <hayley> Been there, done that/
[07:13:59] * hayley (NETFARM-CLIENT:SAVE-OBJECT gilberth)
[07:14:07] <gilberth> I would be happy if that would work within a LAN and I would be able to move processes freely around machines. Or rather have them moved.
[07:14:37] <moon-child> move is one thing.  It means: it used to be in one place, now it is no longer there
[07:14:37] * hayley sees a "BEACH" sign and writes "Good morning everyone!"
[07:14:51] <moon-child> so you do not have to worry about consistency modeling
[07:15:14] * moon-child imagines that it is always morning at the beach
[07:15:38] <hayley> Well, I can tell the purpoted use of git.bsd.gay is having head-hurts over distribution, because they are doing it in C. "What if we have an ARM machine and a x86-64 machine, and either has different layout?"
[07:16:08] <moon-child> https://learnbchs.org/
[07:16:10] -ixelp- BCHS: BSD, C, httpd, SQLite
[07:16:31] <hayley> HuPaPoNG - Hunchentoot, Parenscript, Postmodern, NGINX
[07:17:16] <gilberth> What is nginx doing there?
[07:17:18] <moon-child> I used woo and did my own abstractions atop that
[07:17:33] <moon-child> still waiting for somebody to port bearssl or mbedtls or some such to lisp so we can have ssl without cutting corners
[07:17:38] <hayley> gilberth: Handles the easy cases for requests, cause Hunchentoot is slower.
[07:17:58] <moon-child> no dynamic stuff (who needs that?) :)
[07:17:59] <gilberth> hayley: Does it surprise me that Hunchentoot is slow?
[07:18:11] <hayley> CHOP: CLOSOS, Hunchentoot, one-more-re-nightmare (why not?), Parenscript
[07:18:58] <moon-child> must we speak http in the first place?  And javascript too, no less
[07:19:08] <gilberth> Are you planing to use grep instead of SQL or an in-memory DB?
[07:19:35] <hayley> NCONC: Netfarm, CLOSOS, one-more-re-nightmare, NVMe drive, Compressor (the GC)
[07:19:57] <gilberth> More greping? What for?
[07:20:10] <moon-child> so we can find out when gilberth says 'shit'
[07:20:32] <hayley> So that I can parse HTML.
[07:20:49] <moon-child> lol
[07:20:57] <drakonis> that sounds nightmarish
[07:21:04] <gilberth> moon-child: I hope your pattern is precise enough to not be triggered by that suggestion of yours.
[07:21:19] <hayley> BTW I can get 100Mb/s download and upload from university Wi-Fi, somewhere in the middle of the city.
[07:22:06] <moon-child> gilberth: first: it is.  But second: no reason you cannot combine the two.  (filter (lambda (x) (and (equalp (sender x) "gilberth") (match "shit" (content x) :insensitive)))
[07:22:17] <drakonis> using schemes is tempting me again
[07:22:23] <moon-child> )
[07:22:25] <drakonis> because ergonomics is still valuable
[07:22:47] * hayley wonders where the ergonomics in Scheme are.
[07:23:19] <drakonis> scheme plus all of the rnrs and srfis
[07:24:00] *** gilberth is now known as nocturnal-one
[07:24:25] <nocturnal-one> Can you catch me now saying shitty things?
[07:24:33] <moon-child> your REALNAME is still gilberth
[07:24:42] <moon-child> and your ip has not changed
[07:24:43] <nocturnal-one> Shit.
[07:24:47] <drakonis> ayyyy
[07:24:51] *** nocturnal-one is now known as gilberth
[07:24:58] <drakonis> hayley: ports be good shit
[07:25:26] <drakonis> also procedure declarations are... neat?
[07:25:47] <hayley> Talk to the (make-broadcast-stream)
[07:26:11] <moon-child> procedure declarations?  (define (f x y))?  I can not stand that.  It is like c's 'declaration mirrors use'; elegant in principle, obfsucatory and useless in practice
[07:26:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:26:52] <drakonis> you can also do (define f (x y))
[07:26:55] <drakonis> both ways are allowed
[07:27:12] <drakonis> or use a lambda instead of (x y)
[07:27:25] <drakonis> its very flexible i suppose
[07:27:36] <gilberth> The (define (f x y) ...) syntax is the only thing I like about Scheme.
[07:27:42] <drakonis> i really like that
[07:27:50] <moon-child> it doesn't seem particularly more flexible than (defparameter)/(setf symbol-function)
[07:27:50] <drakonis> also lisp-1 is actually very nice and i'm missing that
[07:28:05] <drakonis> its less steps
[07:28:11] * gilberth hates Lisp-1
[07:28:42] <moon-child> drakonis: nice reader macro.  [f x y] -> (funcall f x y)
[07:28:47] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net)
[07:28:48] <drakonis> lol
[07:28:55] <gilberth> As in (defun foo (x list) (list x (blah list))) ;Oops.
[07:28:56] <drakonis> i think i've seen one that does exactly that
[07:29:10] <drakonis> i'm confusing lisp-1 with 2
[07:29:12] <drakonis> hold on
[07:29:35] <drakonis> no, scheme is 1
[07:29:54] <gilberth> One of the reasons Schemers don't like dirty macros.
[07:29:54] <moon-child> gilberth: (flet ((funcall (x) (1+ x))) (macro-that-expands-to-funcall)) ;oops
[07:30:05] <moon-child> well, CL is locked.  But you get the point
[07:30:16] <drakonis> you can still use unhygienic macros i suppose
[07:30:27] <drakonis> there are implementations that provide the ability to do so
[07:30:29] <gilberth> moon-child: That is discouraged. I don't remember if that would even be UB.
[07:30:42] <drakonis> also tco is required...
[07:30:44] <drakonis> its good shit, really.
[07:30:52] <drakonis> continuations are also nice
[07:31:01] <moon-child> gilberth: for the specific case of something in CL, yes.  But imagine an ordinary function, which a macro wants to expand to a call to
[07:31:33] * gilberth adds a tally mark to drakonis' row.
[07:31:45] <drakonis> what are you tallying here?
[07:32:00] <gilberth> moon-child: We have packages. Don't mess with my package.
[07:32:42] <gilberth> drakonis: s-word usage. moon-child posted a statistic.
[07:32:51] <drakonis> ah yes.
[07:32:54] <moon-child> gilberth: I am not so disciplined.  Make a large package.  Oops
[07:33:22] <hayley> s-word? statistic?
[07:33:28] <gilberth> moon-child: Ok, then.
[07:33:29] <drakonis> the shit word
[07:33:32] <drakonis> tally another one.
[07:33:47] <gilberth> hayley: You are in lead by a far margin. Forgot?
[07:34:12] * hayley uploaded an image: (37KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wmVsAJbrmtipmnbkPUThvOBh/Screenshot_2022-01-14_15-13-18.png >
[07:34:15] * hayley replies to comments on ancient Scratch games
[07:37:01] <drakonis> but really, the things i cant say i like about cl, so far, is also declaring arguments
[07:37:24] <drakonis> in scheme, its a cleaner way
[07:40:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:41:07] <drakonis> in a procedure that is
[07:48:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:58:57] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net)
[08:02:11] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1013-static.midco.net) (Ping timeout: 252 seconds)
[08:10:49] *** Joins: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net)
[08:12:34] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[08:13:05] *** Joins: gko (~user@user/gko)
[08:13:11] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net) (Ping timeout: 252 seconds)
[08:26:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247) (Ping timeout: 250 seconds)
[08:30:11] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:39:29] <gilberth> Here you go: <http://clim.rocks/gilbert/lispcafe-tally.html> We a have a surprising winner in the category "rate".
[08:39:29] -ixelp- Lisp Cafe Tally Count
[08:40:02] <drakonis> lol oops
[08:40:12] <drakonis> i have far less messages than hayley, that's so unfair.
[08:40:42] <gilberth> That is why I prepared two tables. Otherwise: Just talk more.
[08:41:55] <hayley> Fa fa fa fa, fa fa fa fa, fa fuuuuck.
[08:42:36] * gilberth write types "fu+ck".
[08:43:25] <hayley> gg ez no re
[08:43:46] <dave0> insert <swear>
[08:44:44] <moon-child> do we count censors?
[08:44:47] <moon-child> f*ck
[08:44:51] <gilberth> hayley: You begged for it: <http://clim.rocks/gilbert/lispcafe-tally-f.html>
[08:44:51] -ixelp- Lisp Cafe Tally Count
[08:47:03] <gilberth> drakonis: You took the lead in the F class. Congrats!
[08:47:47] <gilberth> moon-child: I don't.
[08:56:26] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[09:01:29] <drakonis> oh no.
[09:42:06] * gilberth .oO(Is everyone afraid now to say something for there is a tally count?)
[09:43:38] <dave0> potty
[09:46:39] <drakonis> potty...
[09:46:42] <drakonis> well
[09:46:58] <drakonis> what's up with cl users not liking scheme?
[09:47:24] <hayley> I'm still first in fuck counts!
[09:49:08] <drakonis> fuck!
[09:49:36] <moon-child> hayley: you player you
[09:51:59] <moon-child> (fun fact: an australian study surveyed men and woman, asking them how many sexual partners they had had.  The men gave an answer that was, on average, >2x that that the women gave.  Mathematically, assuming an equal number of men and woman, the only possible explanation is that most men are gay)
[09:52:36] <dave0> i don't like that study
[09:52:44] <dave0> :-)
[09:53:21] <dave0> i hope the real reason is that men a dirty liars
[09:53:55] <moon-child> dave0: statistically, you are gay and lying about it
[09:54:15] <dave0> haha
[10:05:25] <gilberth> Why would the men need to be the liars? Could as well be the women lying.
[10:06:00] <gilberth> Actually I assume both do. No news.
[10:06:41] <White_Flame> hmm, I don't think that math is sound
[10:06:48] <White_Flame> assume 1000 men, 1000 women
[10:07:16] <White_Flame> every man sleeps with 1 unique woman, + 1 permiscuous woman
[10:07:32] <White_Flame> 999 of the women sleep with 1 man, and the permiscuous woman slept with 1000
[10:07:49] <White_Flame> the average man did 2 women, the average woman did like 1.001 men
[10:08:52] <White_Flame> wait, or does that still come out to 2x?  should ahve actually done the numbers :)
[10:09:09] <White_Flame> yeah, nevermind, brainfarted that :)
[10:09:12] <moon-child> :)
[10:14:15] <gilberth> Role models are at play here. Somewhat related: A women would throw an eye on a man, but would ensure that the man will not notice.
[10:14:41] <moon-child> 'throw an eye'?
[10:15:03] <gilberth> Look at you, wanting that you approach her, showing interest.
[10:15:31] <gilberth> Women will make very sure, that you won't notice and then ask themselfs why it is only the "wrong" men approaching her.
[10:16:07] <moon-child> you generalize
[10:16:15] <moon-child> I try to avoid doing that
[10:16:21] <gilberth> Yes, I do.
[10:16:28] <moon-child> not because it is untrue, but because I do not want to make assumptions about individuals I encounter
[10:16:38] <hayley> https://www.businessinsider.com/how-a-10-year-old-girl-could-retire-at-15-2022-1
[10:16:38] -ixelp- A 10-Year-Old Girl May Retire at 15 As a Multimillionaire
[10:16:57] <hayley> Boring, I started Nettle at 16 and co-founded applied-langua.ge at 18
[10:17:07] <hayley> This gal probably hasn't written shit all for theory
[10:17:29] <gilberth> Well, it helps to understand how humans think in general.
[10:17:52] <dave0> grumpy cat was a multimillionaire
[10:18:21] <moon-child> 'Dear Sir, You Have Built a Compiler'  and?  What of it?
[10:18:29] <hayley> n.b. the "help" in "With the help of her mother" is usually the interesting part.
[10:18:36] <hayley> moon-child: Yeah, I do that all the time. So?
[10:18:49] <moon-child> hayley: apparently, we are not supposed to build compilers
[10:18:58] <hayley> moon-child: Boring.
[10:20:04] <drakonis> https://dev.to/xba/data-oriented-programming-is-dope-ma2 lol woops
[10:20:05] -ixelp- Data-Oriented Programming is dope - DEV Community
[10:20:08] <hayley> .oO(Sell the compiler to AMD for that computer and orange juice. Note that the 10yo girl also does not have a spiffy computer, nor any orange juice)
[10:20:10] <drakonis> thanks clojure???
[10:21:05] <hayley> "def is_member(user_management_data: T, user_id) -> bool" What the fuck is that type variable even going to mean? I can provide any ol' data? (Answer: FUCK NO!)
[10:22:59] <hayley> (For the unaware: one uses a type variable basically to claim that they don't care about the type of some value. Yet there are a lot of dictionary lookups here, which do care for types.)
[10:23:45] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:23:59] <gilberth> hayley tries to work his way up the charts in class F while drakonis is 0.79% ahead. Could hayley ever catch up?
[10:24:33] <gilberth> .oO(Should I count shouting with extra points?)
[10:25:35] <hayley> Also note that that the OO solution uses mixins(?) to represent "book item" and "block member" rights, and even instantiates "VIP", "librarian" and "super member" roles, whereas the other uses slots and doesn't represent _any_ roles.
[10:25:44] <hayley> Who would have thunk that making a simpler model makes for simpler code!?
[10:38:49] <dave0> i made a + instead of a - and instead of printing 16 characters it printed 65520 characters (and pretty much dumped the whole address space to the screen)
[10:46:43] <moon-child> 65520 ≡ -16 (mod 65536)?
[10:50:30] <dave0> yep yep
[10:51:20] <dave0> i messed up the loop.. instead of counting down it counted up, so it had to go all the way to 65536 to wrap around to 0
[10:51:32] <dave0> fortunately the termination worked!
[10:52:00] <dave0> the check for the loop termination, that is
[10:55:01] <dave0> i'm code golfing my forth interpeter in a bootblock ... it's currently at 450 bytes
[10:55:06] <dave0> take that, sectorLISP !
[11:02:11] <moon-child> dave0: I bet you have i/o tho
[11:02:13] <moon-child> and mutation
[11:02:26] <moon-child> more functionality in less space? ¯\_(ツ)_/¯ :)
[11:03:27] <dave0> it has getchar and putchar
[11:03:52] <dave0> and it's slow :-p
[11:04:09] <dave0> but damn! it's small!
[11:04:47] <dave0> i'm running it in dosbox
[11:05:45] <gilberth> B32 port, when?
[11:05:52] <dave0> gilberth: lol
[11:06:13] <dave0> i got distracted :-p
[11:06:19] <gilberth> Well, putchar and getchar are trivial. :-)
[11:06:53] <dave0> i have built enough infrastructure to print a line of text
[11:07:33] <hayley> My whole LC3 in LC3 fit in like 512W from memory.
[11:07:44] <hayley> And I had to hand-code shifting right with a loop.
[11:08:06] <dave0> nice :-)
[11:08:33] <dave0> i remember the shift function
[11:08:39] * gilberth would just JIT.
[11:09:11] <hayley> We JIT regular expressions, not metacircular hardware VMs.
[11:09:52] <gilberth> You do, hayley. I don't JIT.
[11:10:16] <hayley> I don't really JIT; I haven't written a baseline interpreter to figure out what to JIT from. 
[11:10:34] <hayley> Though it'd be cool. Identify the hot parts of the RE, and hopefully you'll save a lot of time not compiling the cold parts.
[11:10:36] <moon-child> would actually be a nice test.  See if you can get the same steady-state performance through n nested vms of different languages
[11:10:43] <gilberth> Isn't the derivative the interpreter?
[11:10:48] <hayley> s/RE/DFA/ - I'll still generate that eagerly.
[11:10:58] <hayley> Yes, but I would need SIMILAR at least to identify loops.
[11:11:27] <gilberth> You never tried to build that DFA on-demand and lazy?
[11:11:46] <hayley> ...and recall that people want compilers for different things. If I have the full DFA, which is basically just the "front-end", I can give pretty cool linting results.
[11:11:49] <hayley> I haven't, no.
[11:12:03] <hayley> Even though linear tags should make it slightly more bearable than doing it naively.
[11:12:57] <gilberth> It's not that bad as there are usually few candidates for REDUCIBLE to check.
[11:14:36] <hayley> Sure, but it's the difference between identifying a loop or not.
[11:14:55] <hayley> And again I can usually handle making a DFA, it's just the Lisp code generator that is painfully slow.
[11:15:31] <gilberth> First, my compiler is faster and second, I don't care.
[11:15:50] <hayley> Lucky you.
[11:15:57] <gilberth> It compiles faster than I type, that is suffice.
[11:16:57] * hayley realised she played two synth parts very slightly out of time with each other, so proceeds to copy and paste a bit of one, lining up the saw wave with itself.
[11:22:06] <hayley> Didn't Thompson JIT them too?
[11:23:21] <gilberth> What is your definition of JIT? When I say (COMPILE NIL '(LAMBDA ...)) is that JIT?
[11:23:57] <hayley> In the case of Thompson, you said IIRC that he produced machine code incrementally?
[11:24:26] <gilberth> I said it would be incrementally?
[11:24:48] <hayley> Hm, doesn't look like it.
[11:25:00] <hayley> "and λ is the null regular expression." What?
[11:25:10] <gilberth> Common.
[11:25:34] <gilberth> hayley: just read that paper.
[11:25:48] <hayley> "Code compiled for a** will go into a loop due to the closure operator on an operand containing the null regular expression" lol
[11:26:32] <hayley> But indeed it generates all the machine code in one go. Oh well.
[11:26:33] <gilberth> Yep, many RE engines choke on that and therefore a** is UB with POSIX.
[11:27:30] <gilberth> It would be fun to figure out how much of that compiler survived in UNIX.
[11:28:35] <hayley> gilberth: Well, compiling a full RE at runtime is one sort of JIT. Finding the hot paths in the DFA is more like a tracing JIT to me.
[11:28:53] <gilberth> Out of curiosity I read the various UNIX sources from time to time and contemplate to write a K&R and earlier C compiler of sorts.
[11:29:05] * moon-child puzzles through pulseaudio code.  Unix has no graphs, and so (per greenspun) everybody must reimplement them
[11:29:45] <hayley> Hm, though I wouldn't be recording traces per se. More like doing a breadth-first walk, accumulating sufficiently common paths. 
[11:29:53] <gilberth> As we noticed recently, you can't even compile early GCC sources.
[11:34:59] <gilberth> UNIX on the PDP-7 must have been fun. It had directories but no pathnames. That is: No separator "/" or otherwise in what is passed as a filename to the system. But it had a three argument ln(1), the first naming a directory. No path separators allowed there too. And thus also no "/foo" to refer to a root directory. All names where reltaive to the cwd. And no, ch[dir] didn't allow a "/" there. But ch[dir] took multiple arguments.
[11:35:28] <gilberth> Can you figure out how to work with that? Another note: There was no mkdir either.
[11:37:49] <gilberth> The more important question is: Why would somebody come up with that? Must have been pretty awkward to work with.
[11:46:36] <moon-child> waiiiiit
[11:49:48] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Read error: Connection reset by peer)
[11:49:59] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[12:09:20] <dave0> gilberth: my favorite unix quote: Unix went from being the worst operating system available, to the best operating system available, without getting appreciably better.
[12:13:18] <gilberth> dave0: Yep.
[12:14:53] <gilberth> In PDP-7 UNIX there was no fork(2) initially. A user would have just one process. The shell would overwrite itself with the command you wanted to invoke and then exit() would load the shell again. Not much different to CP/M.
[12:15:46] <gilberth> Later versions of CP/M called MP/M even provided support for multi-tasking.
[12:24:20] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[12:29:36] <GreaseMonkey> huh, that reminds me, perhaps i should learn how to program stuff using an overlay system
[12:31:11] <gilberth> An overlay system? Like with those olde memory starved machines?
[12:32:53] <gilberth> Be lucky, that you don't have to.
[12:35:03] *** Joins: Alfr (~Alfr@user/alfr)
[12:42:39] *** Joins: semz_ (~semz@user/semz)
[12:43:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:53:14] <hayley> https://twitter.com/stanbreadless/status/1481917532579811328 lol
[12:53:24] <hayley> "While I agree that Solidity might not be the best programming language out there, the early days of any technology are full of zero-day exploits. The community gains experience and provides tooling to avoid the mistakes of the past"
[12:53:31] <hayley> The tooling should be a better language.
[12:59:29] <semz_> "The only alternative is to create an AI/static analyzer which can foresee all the potential calls/interactions with the contract, which is very hard imo."
[13:00:15] <semz_> quoted mostly for the AI wtf but how hard would it really be to exhaustively test contracts? isn't the input space rather small?
[13:00:27] *** semz_ is now known as semz
[13:02:43] *** Joins: shka (~herr@109.231.0.226)
[13:05:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:23:28] <hayley> My only theory is that languages should be designed to avoid dumb bugs, and this doesn't require much static analysis.
[13:23:44] <hayley> We make bugs hard to introduce, rather than weeding them out.
[13:27:43] <dave0> i missed a comma and had the system (well, my forth bootblock :-) crash
[13:28:58] <dave0> it is not forgiving, especially of human error
[13:30:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:56:32] *** Joins: lispy (~lispy4@84.69.59.93)
[13:59:34] *** Joins: pjb (~pjb@user/pjb)
[14:15:43] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[14:17:36] <hayley> Someone suggested I should grab logs and figure out at what times I swear the most. Mostly to see if it coincides with any classes.
[14:22:52] *** Joins: kevingal (~quassel@149.157.111.113)
[14:23:08] <hayley> gilberth: Can I borrow your logs? idk how to pull out everything from Matrix.
[14:23:51] <dave0> maybe you just had a bad day?
[14:24:06] <hayley> That describes every day at university.
[14:31:15] *** Quits: kevingal (~quassel@149.157.111.113) (Ping timeout: 256 seconds)
[14:31:22] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:34:30] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[14:55:43] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[15:04:37] <Gnuxie> scared to say anything now there is ranking 
[15:05:18] <Gnuxie> of the most proficient bullshitter (me)
[15:05:38] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 250 seconds)
[15:05:48] *** Joins: kevingal (~quassel@2001:770:c0:401:c8b5:3649:797d:f4ed)
[15:07:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:13:54] <ck_> what unit do you measure bullshit-ability in?
[15:23:00] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:24:00] * hayley uploaded an image: (32KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/hbcbYxdXTpippgeMHjMHDmMx/Screenshot_2022-01-14_23-03-01.png >
[15:24:04] <hayley> Here are my shit + fuck counts per day.
[15:25:46] <dave0> deci-bulls!
[15:25:50] <dave0> haaaa!
[15:27:12] <semz> Does that mean the bullshit scale is logarithmic?
[15:44:01] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[15:54:39] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:10:29] <Gnuxie> would make sense 
[16:55:00] <Gnuxie> selwyn: say something in #symbolics2 please 
[16:56:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:09:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:16:19] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:19:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:20:46] *** Quits: kevingal (~quassel@2001:770:c0:401:c8b5:3649:797d:f4ed) (Ping timeout: 245 seconds)
[17:28:50] <epony> same thing can be said about LISP  <dave0> gilberth: my favorite unix quote: Unix went from being the worst operating system available, to the best operating system available, without getting appreciably better.
[17:29:43] <epony> only it's not an operating system, but a relatively unreliable programming methodology and language family
[17:34:47] *** Joins: kevingal (~quassel@2001:770:c0:401:c8b5:3649:797d:f4ed)
[17:47:41] <mfiano> What is the legality of copying retro computer color palettes into rgb s-expressions and naming the file like zx-spectrum.lisp ?
[17:58:57] <shka> mfiano: well, i don't think it is illegal
[17:59:19] <mfiano> I would assume it depends on the corp
[17:59:24] <shka> but i am no expert
[17:59:44] <semz> Is something as small as a retro computer pallette even copyrightable
[17:59:57] <mfiano> Pantone for example, is intentionally vague and says it is not permitted to copy names, values, etc
[18:01:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[18:01:45] <mfiano> Well it's not exactly about copyright as much as trademark I would think
[18:01:58] <mfiano> Apple II is a trademark
[18:11:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:32:27] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[19:16:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a)
[19:17:53] *** Quits: semz (~semz@user/semz) (Remote host closed the connection)
[19:24:48] *** Joins: semz (~semz@user/semz)
[19:52:27] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:08:31] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:09:07] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:12:31] *** Joins: notzmv (~zmv@user/notzmv)
[20:30:51] *** Joins: Catie (~user@user/catie)
[20:53:13] *** Joins: domovod (~domovod@176.196.122.197)
[21:16:17] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[21:16:17] *** ChanServ sets mode: +o MichaelRaskin
[21:21:15] *** Joins: dra (~dra@2a04:4540:6409:9600:3465:7864:114:561c)
[21:21:17] <dra> Hello!
[21:21:56] <dra> Apparently using a debugger requires justification nowadays: http://blog.pnkfx.org/blog/2022/01/10/why-i-use-a-debugger/
[21:21:57] -ixelp- Why I use a debugger - The {pnk}f(eli)x Blog
[21:22:00] <dra> Sad world.
[21:25:02] <moon-child> mfiano: https://graphicdesign.stackexchange.com/questions/43290/copyright-of-a-set-of-colors
[21:25:03] -ixelp- Copyright of a set of colors? - Graphic Design Stack Exchange
[21:54:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[21:55:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:47:43] *** Quits: kevingal (~quassel@2001:770:c0:401:c8b5:3649:797d:f4ed) (Remote host closed the connection)
[23:00:05] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:02:57] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[23:38:03] <gilberth> dra: Curious, I always felt like I would need to justify for not using a debugger.
[23:41:28] <semz> I could see a "REAL programmers don't need a debugger" angle, but that doesn't really fit with the Rust crowd.
[23:42:57] <gilberth> Well, I just don't find them useful. Although I use TRACE once in a while, but that could also be regarded as debugging with PRINT.
[23:43:15] <shka> TDD overdoes?
[23:43:30] <gilberth> TDD?
[23:43:48] <shka> test driven dev
[23:43:57] <shka> i wonder how debuggers went out of fashion
[23:44:41] <gilberth> shka: Nope.
[23:46:59] <gilberth> Though I work interactively and peek and poke around with the REPL. Usually I develop in small steps and test often. Hmm, was this what you meant by TDD? As opposed to write test cases along with the code?
[23:47:24] <shka> gilberth: if you are in lisp repl, it is like you would be in a rust debugger
[23:47:27] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[23:47:43] <gilberth> shka: Ah, ok.
[23:47:58] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:50:06] <moon-child> I think tdd is when you start by writing a test suite, and then write code that passes that test suite
[23:51:14] <moon-child> shka: so you can not single-step, reverse step, place breakpoints and watchpoints in your rust debugger?
[23:51:30] <gilberth> Which I find not particular useful. When I can think of a corner case to test for, I won't miss it in my code. When I can't think of it, I won't have a test for that to begin with.
[23:52:42] <gilberth> Tests are however great for noticing regression.
[23:53:24] <moon-child> to play devil's advocate, when you develop a system interactively, you may be discouraged from implementing some feature when it is more tedious to implement.  Whereas when you start by specifying the behaviour, you will be less likely to think of such things.  I do not think this is a solid argument
[23:56:44] <gilberth> I would bring a counter argument. When as with batch development, it's tedious to interactively try some corner cases or odd input, you don't. It makes a difference if I could alter a function at a keystroke while the application is running and try some perhaps odd interaction. In contrast to waiting perhaps minutes for a recompile, launch the app again, and then maneuver the application state to the state you want to test with.
[23:57:23] <moon-child> that's not a counter argument, it's a strawman :P
[23:57:31] <moon-child> (but, mine was a strawman too, so)
[23:59:19] <gilberth> Well, I could try an interaction with a Lisp application in seconds and fix bugs I may find in seconds. Instead of a couple minutes. And: How do you write test suites for interactive applications?
[23:59:59] <moon-child> that is hard.  Some people screenscrape output and check if any pixels have changed
