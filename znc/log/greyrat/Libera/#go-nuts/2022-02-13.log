[00:00:14] <b0nn> or for Pascal for that matter :-)
[00:00:32] <b0nn> Rust is doing badly there too
[00:00:34] <seebs> interesting that for energy and time, racket gets its own slot between the low numbers and the high numbers
[00:01:19] <seebs> > The top 5 languages, also presented in Table 4, which
[00:01:19] <seebs> needed the least amount of memory space (on average) to exe-
[00:01:19] <seebs> cute the solutions were: Pascal (66Mb), Go (69Mb), C (77Mb),
[00:01:19] <seebs> Fortran (82Mb), and C++ (88Mb);
[00:01:21] <seebs> what the heck
[00:02:05] <girafe> https://www.twitch.tv/lovebytedemoparty
[00:03:54] <b0nn> dammit, I saw a Racket joke about ( and { the other day, but cannot find it again
[00:05:28] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[00:05:48] *** Joins: independent56 (~independe@2.26.38.138)
[00:07:32] <b0nn> https://twitter.com/yoo_hoo_yoo/status/1491587482890080257
[00:09:10] *** Joins: bluedust (~bluedust@185.248.85.42)
[00:12:40] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:12:40] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:12:40] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:13:30] *** Joins: norn (~norn@193.239.186.139)
[00:14:03] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[00:16:34] <seebs> nice
[00:17:46] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:18:32] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:18:32] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:18:32] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:22:44] *** Joins: bluedust_ (~bluedust@59.89.219.44)
[00:26:50] *** Quits: bluedust (~bluedust@185.248.85.42) (Ping timeout: 256 seconds)
[00:28:54] *** Joins: adtac (~adtac@192.159.181.180)
[00:29:11] <pyzozord> ah I remember one concept I didn't quite get
[00:29:38] <pyzozord> the zero values, can someone explain zero values to me from a perspective of a c programmer?
[00:30:08] <seebs> everything is initialized as though via memset(obj, '\0', sizeof(obj))
[00:30:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:30:18] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[00:30:19] *** Quits: nornweave (~nornweave@h-213-136-39-104.A165.priv.bahnhof.se) (Ping timeout: 256 seconds)
[00:30:32] <seebs> this isn't *exactly* right in C terms, because some things might conceivably use a different representation, if they wanted to.
[00:31:05] <seebs> but it's just "everything has a default value which is roughly a zero of its type". For numbers, it's just 0. For strings, it's "", for slices, it's a nil slice which has no data storage, 0 length, 0 capacity, and so on.
[00:31:27] <seebs> as it happens on current implementations and hardware i think that's always equivalent to "all bits zero".
[00:32:01] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[00:32:07] *** Joins: fikran (~fikran@user/fikran)
[00:32:15] <seebs> basically, it's very similar to the initialization you get in C if something has static storage duration.
[00:32:37] <seebs> it's just that, in go, that's done for everything when it's created rather than only statics.
[00:33:25] <pyzozord> thanks
[00:33:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[00:34:03] <pyzozord> that means that there is no "no value" value in go, right?
[00:34:14] <adtac> in what hardware would it not be all zeros?
[00:34:20] <b0nn> pointers can be nil
[00:34:36] <pyzozord> but only pointers can be nil, right?
[00:34:52] <b0nn> yes
[00:34:54] <foobaz> slices can also be nil
[00:35:39] <demsh> and channels, maps, interfaces
[00:36:06] <foobaz> for many types (pointers, slices, maps, channels), the zero value is the no value type, for other types (int, float) the zero value is a valid value
[00:36:56] <foobaz> this way you don't have to pay a performance/memory cost for a "no value" value if you don't need one
[00:37:41] <b0nn> there's a "no value" instance in every runtime that all things with no value can point to (eg. struct{}{})
[00:38:12] <b0nn> no value and nil might be two different things
[00:39:35] <foobaz> of course the CPU itself does not have a "no value" value, such things are artificial abstractions
[00:40:18] <foobaz> one reason go does not have nullable types is a desire to accurately represent what is happening on a hardware level
[00:42:00] <b0nn> This is the "no value" value https://github.com/golang/go/blob/master/src/runtime/malloc.go#L845
[00:43:58] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:43:58] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:43:58] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:44:26] <pyzozord> oh btw can you remind me how do I allocate memory in go?
[00:44:52] <b0nn> You declare a variable and let Go do the job
[00:45:15] <pyzozord> right I know it will "escape" it etc
[00:45:23] <pyzozord> but there was also some explicit way I forget
[00:45:26] <b0nn> Unless you want to do all of the memory management yourself, in which case look at jemalloc
[00:45:55] <b0nn> https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
[00:46:32] <pyzozord> I dont think it was jemalloc, if I remember correctly it was in the go tour, but i can't find it
[00:46:38] <b0nn> But, Go is a Garbage Collected language, the stuff allocated to the heap goes into, oh hang I forget the name, maps of something..
[00:47:41] *** Joins: ricci (~ricci@31.187.110.131)
[00:53:29] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[00:53:46] <fizzie> There's a built-in function called `new`, if that's what you're looking for.
[00:53:51] <fizzie> (And `make` as well, of course.)
[00:55:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-84f2-b625-d358-b449.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:59:21] <fizzie> Not that you see `new` all that much, since if you want to "allocate" a struct or an array, `new(T)` is pretty much the same as `&T{}` except the latter of course also lets you initialize fields.
[01:02:45] <pyzozord> oh it might have been new
[01:03:00] <pyzozord> and make
[01:03:01] <pyzozord> thanks
[01:03:16] <pyzozord> i did go make make but it didn't show anything
[01:03:25] <pyzozord> *go doc
[01:03:35] <pyzozord> I see now it's under go doc builtin.make
[01:04:41] *** Parts: Nigthknight (~Nigthknig@user/nigthknight) ()
[01:04:48] <fizzie> Yeah, likewise `builtin.new`. They're not *really* in a package called that, it's just a place for the documentation of the predeclared identifiers.
[01:07:26] *** Quits: flughafen (~flughafen@p57969074.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[01:09:43] *** Quits: adtac (~adtac@192.159.181.180) (Quit: Client closed)
[01:15:43] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[01:17:49] *** Quits: ert (~ert@2001:4b99:1:1:216:3eff:fee5:446f) (Quit: out)
[01:17:50] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[01:19:18] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[01:26:32] *** Quits: norn (~norn@193.239.186.139) (Quit: Leaving)
[01:34:21] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[01:34:21] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[01:39:37] *** Joins: Guest31 (~Guest31@149.224.94.139.dynamic-pppoe.dt.ipv4.wtnet.de)
[01:40:44] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:42:23] *** Joins: glider (~glider@user/glider)
[01:46:33] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[01:46:38] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[01:48:15] <arkurious> Where can I find information on what packages/programs use a specific go package?
[01:49:13] <ikke> pkg.go.dev
[01:49:57] <KirkMcDonald> Yeah, look it up on there, and there's an "imported by" link.
[01:55:49] *** Joins: holgersson (~quassel@user/holgersson)
[02:02:09] <arkurious> Thank you.
[02:07:37] *** Quits: Guest31 (~Guest31@149.224.94.139.dynamic-pppoe.dt.ipv4.wtnet.de) (Quit: Client closed)
[02:10:37] *** Quits: cocomo (~cocomo@103.255.6.248) (Ping timeout: 240 seconds)
[02:10:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-84f2-b625-d358-b449.res6.spectrum.com)
[02:11:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:12:34] *** Joins: cocomo (~cocomo@103.255.7.57)
[02:15:53] *** Joins: todo75 (~todo75@user/todo75)
[02:17:23] *** Quits: todo75 (~todo75@user/todo75) (Client Quit)
[02:20:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-84f2-b625-d358-b449.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:22:41] *** Quits: bluedust_ (~bluedust@59.89.219.44) (Remote host closed the connection)
[02:23:52] *** Joins: bluedust (~bluedust@59.89.219.44)
[02:39:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:40:19] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-84f2-b625-d358-b449.res6.spectrum.com)
[02:41:28] *** Joins: fikran (~fikran@user/fikran)
[02:42:14] *** Joins: Torr (~Torr@user/torr)
[02:43:06] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Remote host closed the connection)
[02:44:02] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: quick everyone out of the universe)
[02:54:07] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[02:54:31] *** Joins: independent56 (~independe@2.26.38.138)
[02:59:08] *** Joins: schaeffer (~schaeffer@user/schaeffer)
[03:02:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[03:11:57] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[03:12:46] *** Quits: bluedust (~bluedust@59.89.219.44) (Remote host closed the connection)
[03:13:35] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[03:15:31] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[03:17:38] *** Joins: BUSY (~BUSY@user/busy)
[03:20:16] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[03:20:45] *** Joins: off^ (~off@50.235.176.163)
[03:22:10] *** Quits: independent56 (~independe@2.26.38.138) (Ping timeout: 272 seconds)
[03:24:06] *** Joins: rcernin (~rcernin@124.190.132.36)
[03:25:33] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:29:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-84f2-b625-d358-b449.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:30:18] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Remote host closed the connection)
[03:30:33] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:36:48] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:55:23] *** Joins: yoonkn (~user@175.197.208.79)
[04:07:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:26:33] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7d17-545b-7137-6b60.res6.spectrum.com)
[04:41:11] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:48] *** Joins: crashrep (~crashrep@user/crashrep)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:40] *** Joins: fikran_ (~fikran@user/fikran)
[04:49:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:49:32] *** fikran_ is now known as fikran
[04:49:49] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:55:16] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:00:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[05:00:57] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:07:18] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 272 seconds)
[05:21:29] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[05:22:20] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[05:39:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:39:34] *** Joins: califax- (~califax@user/califx)
[05:42:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:42:15] *** califax- is now known as califax
[05:42:27] *** Joins: fikran (~fikran@user/fikran)
[05:46:26] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[05:56:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:56:28] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Max SendQ exceeded)
[05:57:00] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:58:32] *** Joins: rcernin (~rcernin@124.190.132.36)
[06:07:09] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[06:13:08] *** Joins: cskr (~cskr@49.207.213.182)
[06:15:31] *** Joins: rcernin (~rcernin@124.190.132.36)
[06:17:43] *** Joins: dozn (uid249292@user/dozn)
[06:20:46] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[06:26:50] *** Quits: cskr (~cskr@49.207.213.182) (Quit: Leaving)
[06:43:11] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8)
[06:47:43] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8) (Ping timeout: 256 seconds)
[06:50:02] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8)
[06:56:13] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8) (Ping timeout: 240 seconds)
[07:01:42] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[07:04:02] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:05:57] *** Joins: marius_m (~marius_m@84.211.92.9)
[07:07:50] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[07:07:56] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8)
[07:14:36] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 272 seconds)
[07:24:41] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[07:41:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7d17-545b-7137-6b60.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:45:20] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:45:41] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:46:32] *** Joins: nitrix (~nitrix@user/nitrix)
[07:51:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[07:55:16] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:00:07] *** Joins: off^ (~off@50.235.176.163)
[08:09:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8) (Ping timeout: 240 seconds)
[08:20:34] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[08:25:06] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8)
[08:37:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:38:23] *** Joins: Atque (~Atque@user/atque)
[08:39:25] *** Joins: mybbgirl (~mybbgirl@188.25.57.254)
[08:40:51] *** Quits: cocomo (~cocomo@103.255.7.57) (Remote host closed the connection)
[08:41:08] *** Joins: off^ (~off@50.235.176.163)
[08:43:28] *** Quits: mybbgirl (~mybbgirl@188.25.57.254) (K-Lined)
[08:56:47] <Church> So rather dumb recursion question, I have a snippet here that should be taking in a slice and recursively appending to it before eventually returning the slice when it can no longer recuse. Am I missing a base case or something? I'm noticing that the slice retuned has a length of 20 which is the size of the "comments" slice upon the end of the first iteration, however if I plop a print statement
[08:56:48] <Church> into my conditional to check the size of the commentsList slice I see it steadily increasing. Is it perhaps a scoping issue maybe? https://paste.rs/DFJ
[09:05:40] <b0nn> It's hard to debug because reddit client and stuff, but .. why recursion https://go.dev/play/p/93VMvHvYdwy
[09:06:06] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c73:3837:d514:4fe8) (Quit: WeeChat 3.4)
[09:06:30] *** Joins: rcernin (~rcernin@124.190.132.36)
[09:07:05] <foobaz> Church: i think it's because changes to commentList inside inner recursion calls don't get communicated back to outer recursion calls
[09:07:37] <foobaz> try making it a pointer-to-slice, commentList *[]*reddit.Comment and see if that fixes it
[09:08:44] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[09:12:08] <foobaz> this kind of thing happens because slices are a combination of value type and reference type, the index and length into the backing array are passed on the stack and thus local to a scope, but the backing array and the array contents are on the heap and shared
[09:13:04] <b0nn> uhhhh, but the pointer to the backing array is also passed with the length and capacity
[09:13:55] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Ping timeout: 256 seconds)
[09:16:05] <foobaz> yes, but that can change when you append, and when it does, the change only affects the local slice
[09:16:17] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[09:16:58] <b0nn> right, that's making a bit of a hash of things
[09:17:07] <b0nn> I mean, the pointer is passed about
[09:17:38] <b0nn> and a (copy) of a slice can end up with a different pointer
[09:17:48] <b0nn> and that's likely what's happeneing
[09:17:54] *** Joins: rvalue (~rvalue@user/rvalue)
[09:18:01] <b0nn> just - that's not exactly how you were explaining it
[09:19:56] <foobaz> hopefully my suggestion still correct, about using a pointer-to-slice argument type
[09:22:00] <b0nn> heh
[09:22:39] <b0nn> I am having to hand create a swagger file, and the object being returned is currently 1500 lines
[09:26:43] <foobaz> gross
[09:27:23] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[09:27:34] <foobaz> sounds like my own experience with mysql tables where people keep deciding to add just one more column for their use case over many years, until the table is enormous
[09:27:36] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:28:39] <Church> Hmm, so updated the function to use a pointer to a slice, still seeing it return a len of 20. https://paste.rs/sT9
[09:31:34] <seebs> yes
[09:31:44] <seebs> because you're modifying a local pointer, rather than writing through the pointer to what it pointed at
[09:32:00] <seebs> the usual idiom for things like this isn't that you use a pointer, it's that you return the possibly-modified slice, and use it like append
[09:35:58] <Church> Hmm perhaps I'm not understanding something then, I thought that's what I was doing originally. Is there an example of this I could see to rectify this then?
[09:37:44] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[09:38:13] <foobaz> instead of commentList = &commentListTemp, you need *commentList = commentListTemp
[09:38:23] <foobaz> very subtle
[09:39:22] <Church> Okay huh yeah, so that did works seebs... which thinking on it more now and seeing failing output makes some sense... sigh
[09:39:47] <Church> foobaz: Good to know, I'll try that out as well so I can wrap my head around the pointer ferrying more
[09:44:43] *** Joins: rcernin (~rcernin@124.190.132.36)
[09:45:33] <Church> Cool thank you very much for the help folks heh.
[09:45:43] <Church> Now it looks nice and clean and actually works heh
[09:51:48] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[10:01:13] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[10:07:20] *** Joins: rcernin (~rcernin@124.190.132.36)
[10:28:52] *** Joins: off^ (~off@50.235.176.163)
[10:29:40] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[10:32:17] *** Quits: normen (~normen@p200300d717235c00cd0323c49423e0ab.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:47:01] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0)
[10:49:36] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[10:50:10] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[10:51:18] *** Joins: flughafen (~flughafen@p2e55d71b.dip0.t-ipconnect.de)
[10:51:25] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0) (Ping timeout: 240 seconds)
[11:00:00] *** Joins: normen (~normen@p200300d717235c00cd0323c49423e0ab.dip0.t-ipconnect.de)
[11:01:02] *** Joins: fdan (~fdan@103.215.168.1)
[11:01:19] *** Joins: jpw (~jpw@user/jpw)
[11:05:21] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0)
[11:09:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0) (Ping timeout: 240 seconds)
[11:16:01] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0)
[11:18:58] *** Joins: fef (~thedawn@user/thedawn)
[11:30:54] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3d72:a508:6b63:50f0) (Quit: WeeChat 3.4)
[11:33:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:36:42] *** Quits: Batzy (~quassel@user/batzy) (Read error: Connection reset by peer)
[11:39:31] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[11:44:02] *** Joins: independent56 (~independe@2.26.38.138)
[11:44:35] *** Joins: Batzy (~quassel@user/batzy)
[11:45:36] *** Joins: fef (~thedawn@user/thedawn)
[11:52:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:52:56] *** Joins: mrig (~mrig@user/mrig)
[11:53:46] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[11:59:24] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[12:01:40] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:02:00] *** Joins: cim (~cim@205.185.117.110)
[12:02:38] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[12:03:18] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:04:05] *** Joins: fef (~thedawn@user/thedawn)
[12:05:28] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[12:26:45] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:27:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Client Quit)
[12:27:11] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:33:10] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[12:35:10] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[12:40:59] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[12:45:01] *** Joins: larsm (~larsm@2606:54c0:1e40:138::47:2f1)
[12:45:31] *** Quits: znpy (~znpy@user/znpy) (Ping timeout: 250 seconds)
[12:53:22] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[12:53:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:54:02] <mikoto-chan> https://dpaste.com/44Y5V7FR5
[12:54:14] <mikoto-chan> why is Go complaining about unexpected EOF?
[12:55:53] *** Joins: rendar (~rendar@user/rendar)
[12:58:13] <ikke> on line 4 you have {{with .Post.ID}} without {{end}}
[12:59:31] <mikoto-chan> thanks c:
[13:01:28] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[13:07:15] *** Joins: xsteadfastx (~marv@94.31.99.245)
[13:12:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092) (Read error: Connection reset by peer)
[13:13:45] *** Joins: znpy (~znpy@user/znpy)
[13:14:11] *** Joins: masoudd (~masoudd@user/masoudd)
[13:17:35] *** Joins: inr_ (~a@c-5817e555.040-159-73746f16.bbcust.telenor.se)
[13:20:45] *** Joins: elgraz (~elgraz@151.65.18.229)
[13:24:07] *** Parts: flughafen (~flughafen@p2e55d71b.dip0.t-ipconnect.de) (WeeChat 2.8)
[13:26:12] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753)
[13:30:32] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[13:30:35] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Read error: Connection reset by peer)
[13:32:54] *** Quits: larsm (~larsm@2606:54c0:1e40:138::47:2f1) (Remote host closed the connection)
[13:33:14] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[13:33:15] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[13:33:15] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[13:35:04] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:35:33] *** Joins: kcrk (~kcrk@user/kcrk)
[13:38:33] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[13:40:27] *** Joins: larsm (~larsm@2606:54c0:1e20:138::47:34e)
[13:41:10] *** Joins: jespada (~jespada@87.74.36.188)
[13:41:49] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:50:03] *** Quits: larsm (~larsm@2606:54c0:1e20:138::47:34e) (Remote host closed the connection)
[14:06:06] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:327)
[14:08:45] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:327) (Remote host closed the connection)
[14:16:51] *** Joins: ricci (~ricci@31.187.110.131)
[14:20:22] *** Joins: haliucinas (~haliucina@5.20.153.21)
[14:23:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[14:23:57] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:351)
[14:24:51] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:351) (Remote host closed the connection)
[14:26:27] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:27:16] *** Joins: mickey8 (~user@user/mickey)
[14:29:42] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:354)
[14:30:51] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:354) (Remote host closed the connection)
[14:31:06] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[14:41:40] *** Joins: bluedust (~bluedust@59.89.210.247)
[14:47:13] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:374)
[14:56:13] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[14:58:08] *** Joins: independent56 (~independe@2.26.38.138)
[15:07:20] *** Joins: bancharo (~bancharo@103.10.31.37)
[15:10:12] *** Quits: bancharo (~bancharo@103.10.31.37) (Changing host)
[15:10:12] *** Joins: bancharo (~bancharo@user/bancharo)
[15:14:42] *** Joins: noop14 (~noop14@l208005.ppp.asahi-net.or.jp)
[15:14:54] *** Joins: fef (~thedawn@user/thedawn)
[15:15:32] *** Quits: noop14 (~noop14@l208005.ppp.asahi-net.or.jp) (Client Quit)
[15:16:13] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[15:17:40] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:18:04] *** Joins: rcernin (~rcernin@124.190.132.36)
[15:26:24] *** Quits: bluedust (~bluedust@59.89.210.247) (Remote host closed the connection)
[15:43:09] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:374) (Remote host closed the connection)
[15:43:52] *** Quits: bancharo (~bancharo@user/bancharo) (Quit: The Lounge - https://thelounge.chat)
[15:46:38] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[15:47:05] *** Joins: rcernin (~rcernin@124.190.132.36)
[15:50:43] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[15:51:11] *** Joins: independent56 (~independe@2.26.38.138)
[15:53:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:54:58] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[15:55:38] *** Joins: rcernin (~rcernin@124.190.132.36)
[16:03:31] *** Joins: arkurious (~arkurious@user/arkurious)
[16:03:31] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[16:18:39] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[16:19:24] *** Quits: Cyrus (~Cyrus@144.202.93.237) (Ping timeout: 256 seconds)
[16:31:50] *** Joins: Cyrus (~Cyrus@144.202.93.237)
[16:33:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[16:35:09] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:39:56] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[16:46:56] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[16:55:39] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[16:57:26] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[16:59:57] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:00:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:09:37] *** Joins: bluedust_ (~bluedust@59.89.210.247)
[17:23:03] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:30:58] *** Quits: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[17:31:29] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[17:33:40] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[17:33:40] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[17:33:40] *** Joins: tane (~tane@user/tane)
[17:34:25] *** Joins: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de)
[17:35:53] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:38:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:51:25] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[17:57:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:15:58] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:19:30] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:21:37] *** Quits: normen (~normen@p200300d717235c00cd0323c49423e0ab.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:23:28] *** Joins: goldfish (~goldfish@user/goldfish)
[18:24:19] *** Joins: nopzen (~nopzen@188-177-32-107-dynamic.dk.customer.tdc.net)
[18:24:56] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:26:02] *** Joins: someone235 (uid419897@id-419897.ilkley.irccloud.com)
[18:27:10] *** Joins: mrig (~mrig@user/mrig)
[18:30:02] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[18:34:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:34:56] *** Quits: nopzen (~nopzen@188-177-32-107-dynamic.dk.customer.tdc.net) (Quit: WeeChat 2.8)
[18:39:39] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[18:50:19] *** Joins: normen (~normen@p200300d717235c00b05bd584a5866fd3.dip0.t-ipconnect.de)
[19:13:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:30:05] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: You have been kicked for being idle)
[19:31:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[19:34:12] *** Joins: shka (~herr@109.231.0.226)
[19:35:39] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Remote host closed the connection)
[19:42:32] *** Joins: xsteadfastx (~marv@94.31.99.245)
[19:44:39] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[19:45:26] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[19:46:43] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[19:50:10] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[19:52:16] *** Joins: ovelny (~ovelny@user/ovelny)
[19:56:21] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[19:57:00] *** fling is now known as contractor
[20:00:44] *** contractor is now known as fling
[20:03:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[20:04:33] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[20:07:40] *** Joins: mrig (~mrig@user/mrig)
[20:08:35] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[20:11:10] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Ping timeout: 256 seconds)
[20:11:40] *** Joins: crashrep (~crashrep@user/crashrep)
[20:15:19] *** Quits: elgraz (~elgraz@151.65.18.229) (Remote host closed the connection)
[20:16:08] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[20:16:35] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[20:16:51] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[20:17:28] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[20:17:44] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[20:26:19] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:31:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d)
[20:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753) (Ping timeout: 256 seconds)
[20:37:02] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[20:40:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[20:52:40] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[20:55:35] *** Joins: k8yun (~k8yun@user/k8yun)
[20:57:00] *** Joins: bluedust (~bluedust@89.238.143.234)
[20:58:36] *** Joins: lilgopher_ (~textual@207.98.176.66)
[21:00:13] *** Quits: bluedust_ (~bluedust@59.89.210.247) (Ping timeout: 256 seconds)
[21:08:37] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[21:10:09] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[21:10:57] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[21:13:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:15:12] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[21:19:57] *** Joins: bluedust_ (~bluedust@59.89.210.247)
[21:23:27] *** Quits: bluedust (~bluedust@89.238.143.234) (Ping timeout: 256 seconds)
[21:37:02] *** Joins: Torr (~Torr@user/torr)
[21:39:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:42:21] *** Joins: Memory (~user_name@user/memory)
[21:46:56] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[21:55:42] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[21:58:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[22:01:26] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d) (Read error: Connection reset by peer)
[22:02:25] *** Joins: jespada (~jespada@87.74.36.188)
[22:03:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:15:26] *** Joins: tbalthazar (~tb@188.95.55.61)
[22:19:22] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[22:35:30] *** Joins: jpw (~jpw@user/jpw)
[22:38:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:53:09] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[22:53:18] *** Joins: Atque_ (~Atque@user/atque)
[22:54:55] *** Quits: Atque_ (~Atque@user/atque) (Remote host closed the connection)
[22:55:10] *** Joins: xsteadfastx (~marv@94.31.99.245)
[22:56:10] *** Joins: Atque (~Atque@user/atque)
[22:58:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[23:00:24] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:01:19] *** Joins: Atque (~Atque@user/atque)
[23:03:26] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[23:03:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325)
[23:13:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[23:13:48] <A_Dragon> the best way to compare two functions (ie, a and b are the same function) is to compare their pointers right? (writing tests for some methods that work with map[string]someFunc)
[23:13:53] <seebs> no
[23:13:56] <A_Dragon> no?
[23:14:01] <seebs> the best way to compare two functions is You Can't, Ever
[23:14:02] <A_Dragon> whats the correct way? :D
[23:14:05] <A_Dragon> lol
[23:14:16] *** Quits: tbalthazar (~tb@188.95.55.61) (Quit: WeeChat 3.4)
[23:14:17] <seebs> specifically, by design, you can't compare functions to anything but nil
[23:14:31] <seebs> this is also why funcs can't be map keys
[23:14:36] <A_Dragon> I (currently) compare their fps as strings
[23:15:03] <A_Dragon> but yeah I know *why*, I was wondering if there was a better way. I just want to verify code is spitting out things in the right order and for that I need multiple different funcs
[23:15:10] <A_Dragon> I dont intend using this at runtime, that'd be silly
[23:16:06] <A_Dragon> but then my next question is, is there something I *should* do instead?
[23:17:54] <seebs> i think there is not a good way, because the underlying thing isn't *supposed* to be possible and it's welcome to break at any time.
[23:18:08] <A_Dragon> mmm
[23:18:10] <seebs> i think you'd have to look at a higher level at what you want it to do
[23:18:21] <seebs> like, "different funcs" doesn't necessarily help you any.
[23:18:41] <seebs> and "same funcs" doesn't necessarily mean they're not functionally different.
[23:18:47] <seebs> because function pointers are more complex than just code pointers.
[23:18:58] <seebs> like, say you have an object x, and you do "fn := x.method"
[23:19:03] <seebs> the thing you get back is *magic*
[23:19:05] <A_Dragon> oh yes *that* I understand, they're a lot more than just pointers to jmp to
[23:19:08] <b0nn> if deadlock { fmt.Println("woops")}
[23:20:01] <A_Dragon> the test wants to compare something Ive honestly already got a test for, so I could just not do this -- its ordering a collection of pointers to be called as callbacks; the only reason I want the test to compare the functions directly is to check that the ordering is correct
[23:20:15] <A_Dragon> but I also have code that tests the more internal stuff to generate the order, so I could just drop the test
[23:20:17] <b0nn> If you could formally verify your concurrent application then that'd be a massive help for deadlock detection
[23:20:49] <ikke> b0nn: isn't that solving the halting problem?
[23:21:22] <b0nn> I think so =)
[23:21:32] <A_Dragon> well solving the halting problem for *one* program is somewhat easy >.>
[23:24:30] <b0nn> seebs: what do you know about optimising compilers, and metric shipping (as in JIT internals)?
[23:25:12] <seebs> not a lot
[23:25:30] <b0nn> dammit, you're the channel's SME in that direction!
[23:25:40] <seebs> like i haven't got a clue what a "metrip shipping" is
[23:25:55] <seebs> er metric
[23:26:03] <seebs> i know a little about optimizing compilers, virtually nothing about JIT
[23:26:41] <b0nn> oh, that's me - a JIT is gathering metrics to analyse so that it can buind better code, but the question is about having the optimising compiler external, therefore those metrics would have to be shipped
[23:26:52] <b0nn> build*
[23:27:14] <seebs> oh, that's interesting. so, like, basically profile-guided optimization
[23:27:23] <seebs> but on the fly
[23:27:37] <seebs> so what i know is that i bet someone's tried to do this but i don't know who or how far they've gotten
[23:27:45] <b0nn> yeah - because in this brave, shiny, new world of serverless, the application runtimes are too short for a JIT
[23:27:57] *** Joins: jackneill (~jackneill@20014C4E181F1B00EA222C385662FB28.dsl.pool.telekom.hu)
[23:28:14] <b0nn> So, Python, Java, etc, don't optimise their code, it's always the cold slow version
[23:28:36] <ikke> pypy?
[23:29:33] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:29:49] <b0nn> Is JIT just "turn this func into machine code" or is it "change this because the load it is experincing is better suited to X"
[23:30:17] <b0nn> I thought the latter
[23:30:21] <b0nn> but I could be wrong
[23:30:40] *** Joins: Atque (~Atque@user/atque)
[23:31:04] <ikke> what would X represent here?
[23:31:40] <b0nn> I am thinking optimised code
[23:31:51] <b0nn> maybe fewer branches?
[23:31:58] <ikke> what I understood is the former
[23:32:04] <b0nn> oh, ok
[23:32:28] <b0nn> then just using a previously optimised builder is best
[23:32:29] <ikke> hot code paths that get compiled to machine code
[23:33:13] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[23:33:29] <ikke> for what I know, cpython does not do JIT
[23:33:34] <ikke> only pypy
[23:44:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325) (Read error: Connection reset by peer)
[23:47:03] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:50:21] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[23:50:35] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
