[00:07:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:16:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:21:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[00:27:03] *** Quits: sts-q (~sts-q@212.53.219.218) (Remote host closed the connection)
[00:32:17] *** Joins: sts-q (~sts-q@212.53.219.218)
[00:34:25] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:45:58] *** Quits: sts-q (~sts-q@212.53.219.218) (Remote host closed the connection)
[01:07:06] *** Joins: sts-q (~sts-q@212.53.219.218)
[01:20:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:31:31] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:681b:2c33:76fc:2835) (Ping timeout: 250 seconds)
[01:35:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:43:46] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[01:45:55] <seok> how can I retrieve a list of slots for a defined class ?
[01:58:44] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Quit: WeeChat 3.4)
[02:04:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:18:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:23:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[02:40:09] <EdLangley[m]> You can use the mop via closer-mop like: (closer-mop:class-direct-slots (find-class 'the-class))
[02:40:42] <EdLangley[m]> But, this might not be what you're asking for: do you want to know the values of the slots in a specific instance or something else?
[02:41:07] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:41:20] <seok> uh, I want to make a class system that interacts with the database
[02:41:52] <seok> I want to write a helper function to convert clos classes to json and reverse
[02:43:04] <seok> is there a documentation for closer-mop
[02:43:35] <EdLangley[m]> It's designed as a compatibility layer for the MOP
[02:43:49] <EdLangley[m]> So, the specification parts of AMOP are its documentation
[02:44:25] <seok> https://en.wikipedia.org/wiki/The_Art_of_the_Metaobject_Protocol this right ?
[02:45:15] <EdLangley[m]> Yeah
[02:45:33] <EdLangley[m]> The specification bits are here: http://metamodular.com/CLOS-MOP/table-of-contents.html
[02:46:09] <seok> should I be purchasing this book or is there somewhere I can read it online ?
[02:46:17] <seok> I'm looking for it at the moment
[02:47:12] <EdLangley[m]> It depends what you need, chapters 5+6 are the specification of the MOP, and those are available at the metamodular link I just sent.
[02:48:47] *** Joins: epony (epony@user/epony)
[02:51:40] <EdLangley[m]> But this is how you'd get the slots in a sort of simple way: https://fwoar.co/pastebin/e68983ac72636717a89e181e340686e00e7b855d.lisp.html
[02:52:00] <EdLangley[m]> It'd probably be a better idea to use readers if they were defined, etc.
[02:52:37] <EdLangley[m]> But, also, I think this is generally a bad idea: it's better for your database to define a serialization protocol and then implement that protocol for each class.
[02:54:28] <seok> hmm
[02:56:01] <seok> Yeah actually the helper function will be used for serialization of each class
[02:56:36] <seok> I'll be copying whole list of slots to json for a number of classes so I thought I'll write it once and reuse it
[02:59:17] <EdLangley[m]> So, rather than serializing slots, do something like take a list of name/function pairs and then serialize the class by calling the functions on it.
[03:01:22] <seok> is there a function to retrieve the accessors for all slots in the class ?
[03:02:43] <EdLangley[m]> Something like this: https://fwoar.co/pastebin/69769ac9f818013887f3dea760dbb764ee81f597.lisp.html
[03:03:35] <EdLangley[m]> Slots are sort of an implementation detail
[03:03:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:04:25] <seok> the point of the helper function is that I don't want to reiterate the accessors in the class definitions
[03:04:48] <seok> what if there are 50 classes
[03:05:29] *** Joins: aeth (~aeth@user/aeth)
[03:07:05] <seok> Instead of writing 50 methods to serialize them I just want to write one
[03:07:53] <EdLangley[m]> Well, you can look at chapter 6 of AMOP to see if thereâ€™s a helpful function for that
[03:08:23] <EdLangley[m]> In the section on slot definition metaobjects.
[03:09:15] <seok> Yeah thanks I'm reading through it : )
[03:09:46] <seok> I think your first example will do but I'll take a look to see if theres anything better
[03:27:39] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:27:41] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[03:28:40] *** Joins: Bike (~Bike@71.69.170.70)
[03:54:07] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:20:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:24:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:59:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:32:54] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[05:48:43] *** Joins: occ (~occ@user/occ)
[06:21:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:26:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[06:35:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[06:43:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[06:50:31] *** Quits: derelict (~derelict@user/derelict) (Quit: bye)
[06:50:51] *** Joins: derelict (derelict@user/derelict)
[06:55:09] *** Joins: metamyth (~metamyth@2601:1c0:5903:ee30:b955:6112:b6db:3f9a)
[06:59:31] *** Quits: tewi (~tewi@apn-95-41-96-149.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[07:01:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:02:57] *** Quits: sts-q (~sts-q@212.53.219.218) (Ping timeout: 240 seconds)
[07:04:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:05:40] *** Joins: aeth (~aeth@user/aeth)
[07:08:13] *** Quits: silasfox (~sbv@p4fe8dcc5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:10:07] *** Joins: silasfox (~sbv@p200300cec74956004d537916b4bfd31c.dip0.t-ipconnect.de)
[07:29:46] *** Quits: metamyth (~metamyth@2601:1c0:5903:ee30:b955:6112:b6db:3f9a) (Quit: Client closed)
[07:31:00] <beach> Good morning everyone! 
[08:15:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:48:05] *** Joins: Oladon (~olad@98.43.81.226)
[08:51:35] *** jfh is now known as kagevf
[09:11:52] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:45:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:52:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:00:49] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[10:24:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[11:06:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:36:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:55:50] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:30fc:7acd:1f91:844b)
[11:59:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:03:33] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[12:03:54] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[12:42:34] *** Joins: lisp123_ (~lisp123@45.86.203.185)
[12:45:02] *** Joins: shka (~herr@109.231.0.226)
[12:45:52] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:b5bf:8685:d5d5:da42)
[12:45:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:01:31] *** Quits: lisp123_ (~lisp123@45.86.203.185) (Remote host closed the connection)
[13:02:05] *** Joins: lisp123 (~lisp123@45.86.203.185)
[13:06:29] *** Quits: lisp123 (~lisp123@45.86.203.185) (Ping timeout: 256 seconds)
[13:08:45] *** Joins: tewi (~tewi@apn-95-40-111-40.dynamic.gprs.plus.pl)
[13:16:07] *** Quits: dre (~dre@2001:8003:c932:c301:a9ae:c59a:a85f:47a7) (Ping timeout: 256 seconds)
[13:30:38] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[14:02:31] *** Joins: lisp123 (~lisp123@45.86.203.185)
[14:07:41] *** Quits: lisp123 (~lisp123@45.86.203.185) (Ping timeout: 250 seconds)
[14:18:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:26:19] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:40:46] *** Joins: lisp123 (~lisp123@45.86.203.185)
[14:56:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[14:57:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:21:21] *** Quits: silasfox (~sbv@p200300cec74956004d537916b4bfd31c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:30:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[15:31:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:49:19] *** Joins: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de)
[16:04:17] *** Quits: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:22:26] *** Joins: Bike (~Bike@71.69.170.70)
[16:22:41] <lisp123> I have the following problem
[16:23:27] <lisp123> I want to write a function FIND-CHARACTER-IN-LINE which does what it says, but within it I want to funcall either next-character or previous-character based on what is supplied to the function
[16:23:52] <lisp123> So that FIND-NEXT-CHARACTER-IN-LINE could be written as (FIND-CHARACTER-IN-LINE #'next-character ...)
[16:24:25] <lisp123> Is writing FIND-CHARACTER-IN-LINE as a macro the best way or will an inline function also inline funcalls?
[16:25:34] <lisp123> Also, to complicate matters, FIND-CHARACTER-IN-LINE is a recursive function
[16:25:47] <lisp123> and I recall recursive macros are not straightforward
[16:26:20] <beach> Why do you even contemplate making it a macro?
[16:26:34] <lisp123> To avoid funcalling
[16:26:39] <bremner> As an outsider, I would question such micro-optimization
[16:26:44] <beach> Me too.
[16:26:44] <bremner> benchmark first?
[16:26:46] <Bike> in general, you shouldn't write something as a macro as an attempt increasing performance
[16:27:13] <Bike> if the arguments are to be evaluated normally, it's a function
[16:28:11] <lisp123> Well basically I was writing functions (defun find-next-characteer ...) (defun find-prev-character ...) and then some variants and then decided now is time to consolidate them
[16:29:09] <lisp123> funcall is the easier way, but just wanted to learn :) My latest idea is to do (defmacro find-character-in-line ... `(defun ,find-character-name ...)) where the macro can write the function forms to avoid the issue of recursive macros
[16:31:28] <lisp123> So I guess my question is, will inlining functions inline funcalls? And is this something compilers are smart enough to do?
[16:37:37] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[16:37:50] <White_Flame> only if it can statically resolve which function the funcall is calling
[16:38:13] <White_Flame> (funcall #'foo 1 2 3) => (foo 1 2 3) => inline expansion
[16:39:24] <lisp123> White_Flame: Thanks!
[16:41:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:44:12] <lisp123> It got too complicated, I decided to keep the four individual versions of the function
[16:45:22] <lisp123> They were so close in nature, but the minor changes made it too complex to parse a more abstract version - whereas the individual ones are much easier to read
[16:46:52] *** Joins: sts-q (~sts-q@212.53.219.188)
[16:51:23] *** Quits: sts-q (~sts-q@212.53.219.188) (Remote host closed the connection)
[16:55:12] *** Joins: sts-q (~sts-q@212.53.219.188)
[17:23:25] *** Quits: sts-q (~sts-q@212.53.219.188) (Ping timeout: 256 seconds)
[17:40:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:58:27] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:00:24] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Bad user info)
[18:32:23] *** Joins: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de)
[18:49:25] *** Joins: Bike (~Bike@71.69.170.70)
[18:54:23] *** Quits: lisp123 (~lisp123@45.86.203.185) (Remote host closed the connection)
[18:54:55] *** Joins: lisp123 (~lisp123@45.86.203.185)
[18:59:19] *** Quits: lisp123 (~lisp123@45.86.203.185) (Ping timeout: 250 seconds)
[19:35:47] *** Quits: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:42:35] *** Quits: speskk (~speskk@user/speskk) (Ping timeout: 256 seconds)
[19:46:55] *** Joins: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de)
[19:55:22] *** Joins: lisp123 (~lisp123@45.86.203.185)
[20:00:51] *** Quits: lisp123 (~lisp123@45.86.203.185) (Ping timeout: 250 seconds)
[20:15:09] *** Quits: silasfox (~sbv@p200300cec74956008da9d16e0acf2973.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[20:15:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:16:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:20:41] *** Joins: lisp123 (~lisp123@45.86.203.185)
[20:28:40] *** Quits: lisp123 (~lisp123@45.86.203.185) (Quit: Leaving...)
[20:57:20] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:30fc:7acd:1f91:844b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:03:27] *** Joins: dra (~dra@2a04:4540:6411:e900:7815:ce5f:337c:547c)
[21:07:54] *** Joins: lisp123 (~lisp123@45.86.203.185)
[21:08:44] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[21:12:55] *** Quits: lisp123 (~lisp123@45.86.203.185) (Ping timeout: 256 seconds)
[23:03:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:06:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:13:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:26:27] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:35:29] *** Joins: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com)
