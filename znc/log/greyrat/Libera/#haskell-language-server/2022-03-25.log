[00:10:10] <fendor[m]> Good point, we should say they are settings, so new settings 
[00:19:19] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[00:19:40] <shapr> Is there some way to get hls to also run cabal tests?
[00:19:49] <shapr> I'm gonna guess no, but it's worth asking.
[00:27:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[00:27:42] <drsooch[m]> Not that Iâ€™m aware of
[00:30:53] <shapr> yeah, didn't think so
[00:32:28] *** Quits: arrowd (~arr@78.107.6.128) ()
[00:52:09] *** Joins: hololeap (~hololeap@user/hololeap)
[05:56:36] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Quit: argh)
[12:08:20] *** Joins: fendor (~fendor@178.115.44.78.wireless.dyn.drei.com)
[13:16:37] * fendor[m] uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/TbzSmwWvyswTYGJxrKAIOiqD/image.png >
[13:16:38] <fendor[m]> manageHLS has a null field in VSCode: 
[13:16:44] <fendor[m]> we probably don't want that
[13:31:39] <fendor[m]> Ok, we do need something like null, because otherwise we can't tell it is the first time the extension was launched
[13:46:29] <michaelpj> You could call the option "Ask on startup"?
[13:48:34] <maerwald> fendor[m]: null is ok.
[13:49:29] <fendor[m]> Ask on startup sounds good to me too, since we can add some documentation to that value. `null` has no comment
[13:49:48] <maerwald> why should it have a comment?
[13:50:17] <maerwald> there are only two options to managing HLS
[13:51:16] <fendor[m]> yeah, but there are three and I did not immediately figure out what the third value is or why it is there. I thought, as you can tell, that this is a bug
[13:53:05] <maerwald> null/undefined expresses the concept of "not set", just like an empty string in other options
[13:55:11] <maerwald> and it can be extended to boolean and other options as well
[13:55:34] <maerwald> so it seems to be the most general way to achieve it
[13:58:19] <maerwald> ideally, you wouldn't be able to select it in the GUI settings, but I consider that an issue of VSCode
[14:01:34] <fendor[m]> yeah, I agree, if it wasn't visible in vscode gui, then would be the perfect value
[14:03:10] <maerwald> I haven't tested what happens if you omit `default` altogether
[14:05:52] <maerwald> it's not much different
[14:06:10] <maerwald> https://imgur.com/qBt4GjW.png
[14:10:42] <maerwald> I think "ask on start" might be more confusing, because to me it would mean it would ask me on *every* start
[14:13:46] <maerwald> but I don't have a strong opinion
[14:16:49] <michaelpj> well, a simple behaviour would be to indeed always ask on start if the option is set to "ask on start", and then have the asking dialog set a different option. That has (IMO) a very clear and explicable behaviour, whereas "null" could mean anything
[14:17:13] <michaelpj> as a user, if I see "null" in a UI I assume it's a bug
[14:21:37] <maerwald> that only works for enum options, btw
[14:24:10] <maerwald> a different strategy could be to create an empty file after first initializisation in the storage dir, but that won't translate well if you use settings  sync plugins, for example
[14:25:13] <michaelpj> option: "Run first-time setup wizard: T/F (default T)"?
[14:25:58] <maerwald> selecting that would be odd though, because it does nothing other than setting the option you're looking at 
[14:26:19] <michaelpj> er, sorry, should have been "Run first-time setupt wizard on startup"
[14:27:01] <maerwald> so instead of setting the option right there, you set the wizard, restart vscode and then select between the two options you could have selected in the first place :D
[14:27:17] <michaelpj> well, there might be other first-time setup stuff to do in future
[14:27:44] <michaelpj> or maybe it actually does something more substantial, like looks to see if you have a system ghcup and advises you what to set
[14:27:45] <maerwald> I'm not sure... if so, I'd rather make them dependent on the setting they correspond to
[14:28:17] <maerwald> e.g. I'd probably like to set installGHC to null, then ask the user if they want that
[14:28:29] <maerwald> because it's a rather intrusive setting
[14:28:55] <maerwald> michaelpj: we decided against interactive wizard
[14:28:56] <michaelpj> I reiterate that as a user I really don't want to see null in my options
[14:28:59] <michaelpj> really really
[14:29:26] <michaelpj> a modal dialog box that asks the user what setting they want is, IMO, still a very simple wizard
[14:29:27] <michaelpj> anyway
[14:29:34] <maerwald> michaelpj: https://i.imgur.com/qBt4GjW.png <- is this any better?
[14:29:38] <michaelpj> I mostly like this because it's fully explicit and independent of the other settings
[14:29:53] <michaelpj> maerwald: no, that's even worse
[14:29:59] <michaelpj> I would also assume that was a bug
[14:30:03] <maerwald> that's what you have for other string settings as well
[14:30:05] <maerwald> they start empty
[14:30:16] <michaelpj> but it's not a string setting
[14:30:18] <maerwald> hmm
[14:30:18] <michaelpj> it's an enum
[14:30:28] <michaelpj> so I would expect all the options to be, you know, enumerated with explanations
[14:31:23] <michaelpj> the problem is that you're trying to include an option in there that is is of the wrong kind: the other options are "ways of managing HLS", this option is "some meta-level thing about asking the user to pick settings". Which is why I suggested making it its own thing
[14:31:33] <maerwald> I guess "ask on start" as a proper option (as in: not defaulting to PATH if the user clicks away  the dialog) seems like the best alternative
[14:32:51] <maerwald> someone will be confused either way
[14:33:06] <fendor[m]> splitting into multiple options seems also like a good idea to me
[14:33:16] <maerwald> how?
[14:35:09] <maerwald> btw, haskell.plugin.tactics.config.hole_severity also has `null` as default, but with a description
[14:35:23] <fendor[m]> boolean toggle, has wizard been run before? If yes, show the wizward
[14:35:46] <maerwald> fendor[m]: uhm
[14:35:53] <fendor[m]> manageHLS is only GHCup | PATH, and the initial value doesn't matter for the wizard toggle
[14:36:03] <maerwald> there really is no wizard, though
[14:36:13] <maerwald> I would find that hella confusing
[14:37:23] <maerwald> this really seems something to be fixed in VSCode extension API
[14:38:45] <fendor[m]> of course there is no real wizard, however, a toggle for explicitly stating the user should be asked for their preference on startup makes a lot of sense to me
[14:39:02] <maerwald> fendor[m]: would any user ever manually change this setting?
[14:39:12] <maerwald> if no, then I'd argue it doesn't belong into settings
[14:39:29] <fendor[m]> it has a comment, so users know what it entails
[14:39:42] <maerwald> but they would never change it
[14:39:48] <maerwald> it's an implementation detail
[14:39:54] <fendor[m]> probably not, but we need to store that info
[14:40:10] <maerwald> right, that's why I thought about "hidden" settings
[14:40:15] <maerwald> but it seems that doesn't exist
[14:40:39] <fendor[m]> yeah, that would be probably the best option
[14:40:59] <fendor[m]> but I think it is still better than `null`
[14:43:17] <maerwald> omg, the issue tracker of vscode is...
[14:43:21] <maerwald> BLOATED
[14:46:05] <fendor[m]> yeah and no answers usually ðŸ˜€ just issue closed
[14:50:01] <michaelpj> I feel like I've even seen applications with a similar "run first-time setup" option like that. As a user it seemed perfectly comprehensible to me, since it very clearly says what it does. I probably wouldn't set it, but I can imagine times when I would (if the first-time setup does a lot, and I think I've screwed up my settings)
[14:54:30] <maerwald> https://github.com/microsoft/vscode/issues/146044
[14:55:49] <maerwald> I see
[14:59:15] <fendor[m]> yeah, if we extend the startup questionairre, we have everything important in place
[15:04:42] <fendor[m]> so, I am in favour of a toggle option for the first startup
[16:19:05] <wz1000> fendor[m], maerwald: I'm not sure requiring GHCup to be installed for the extension to work is the best move from a PR perspective, weren't we going to install a local copy of GHCup in a previous iteration?
[16:19:41] <maerwald> wz1000: we've discarded that idea
[16:20:00] <maerwald> because installing ghcup correctly without user-interaction is hard, especially on windows
[16:20:19] <wz1000> can we do it for non-windows platforms?
[16:20:42] <maerwald> I'd rather not, because it involves setting PATH correctly, understanding what ghcup is etc.
[16:20:47] <maerwald> the installation process walks the user through it
[16:21:10] <wz1000> I mean a minimal local copy of vscode that lives in the extension storage
[16:21:29] <wz1000> There was something like that in the first couple of iterations IIRC?
[16:21:36] <maerwald> yes and we've discarded it too
[16:21:37] <wz1000> s/vscode/ghcup
[16:21:48] <maerwald> it's confusing
[16:22:04] <maerwald> and the user won't be able to interact with ghc/ghci outside of vscode
[16:22:19] <maerwald> so requiring a proper installation of ghcup is the easiest way
[16:22:21] <wz1000> hmm
[16:23:21] <maerwald> the alternative is to re-implement the bootstrap script in vscode... I'm not too eager about that
[16:24:00] <wz1000> can we somehow launch a vscode terminal session and start an installation of ghcup through that?
[16:24:24] <maerwald> no idea
[16:24:58] <maerwald> on windows you'd have to start a full interactive powershell
[16:25:46] <wz1000> is that more involved than running powershell.exe in a terminal?
[16:26:39] <maerwald> I don't know and I don't have a clear picture how you'd do all that from within the extension
[16:27:01] <wz1000> I see
[16:27:45] <maerwald> doing that non-interactively is not the problem, interactively, I don't know
[16:28:00] <wz1000> If we link against GHCup in HLS wrapper, would we still need a installation process?
[16:28:29] <maerwald> no, but tons of new code
[16:28:55] <maerwald> and it will make it more difficult to ship ghcup updates
[16:29:51] <maerwald> and on windows, yes, you still need an installation process
[16:29:55] <maerwald> due to msys2
[16:30:35] <maerwald> ghcup doesn't install msys2, the boostrap script does
[16:31:49] <wz1000> yeah, that sounds complicated
[16:32:56] <maerwald> installing msys2 isn't hard, but *managing* is impossible, so I moved that dirt into the powershell script
[16:34:25] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/433c73b23c159a3e7fe44deb95ce865e2c8666e7/scripts/bootstrap/bootstrap-haskell.ps1#L385-470
[16:35:41] <maerwald> 1. curl, 2. run .exe, 3. initializing bash, 4. running pacman 4 times
[16:36:18] <maerwald> also not too eager re-implementing parts of that in vscode
[16:50:42] <mpickering> I don't have ghcup installed and I use the vscode extension
[16:50:49] <mpickering> please don't make it a dependency
[16:51:09] <maerwald> it is not
[16:57:15] <fendor[m]> mpickering, it is only a dependency if you want VSCode to manage your HLS installations (e.g. automatically install it), which you probably don't use?
[16:57:32] <mpickering> no I don't use that
[16:57:49] <mpickering> thanks for thinking of me xx
[17:26:29] <fendor[m]> of course ðŸ™‚
[17:53:59] <michaelpj> yeah, I don't think the "just let me tell you where the damn binary is" workflow is in any danger
[17:55:30] <maerwald> it is in fact the default
[17:55:50] <maerwald> (when you ignore the HLS popup asking you what to do)
[18:36:59] *** Joins: komikat[m] (~komikatma@2001:470:69fc:105::1:c71e)
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:01:06] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:15:02] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[19:16:29] *** Joins: hololeap (~hololeap@user/hololeap)
[20:13:20] <maralorn> Since hls 1.6 I am experiencing that when I have two open files in vscode changes in one file donâ€˜t propagate to the other file without restarting hls. e.g. adding a missing instance wonâ€˜t let the error disappear in files which require the instance.
[20:13:58] <maralorn> Retriggering a type check in that file by introducing and removing a syntax error also wonâ€˜t help.
[20:15:53] <fendor[m]> 0.o maralorn, you don't happen to use stack, right?
[20:16:02] <maralorn> Nope
[20:16:39] <fendor[m]> what cradle type is it?
[20:17:03] * maralorn uploaded an image: (3KiB) < https://libera.ems.host/_matrix/media/r0/download/maralorn.de/FVqRnndDuxuLeyjjYHfArCKu/image.png >
[20:17:15] <maralorn> Thatâ€™s the whole file.
[20:21:26] <maralorn> I think I have a fairly basic setup.
[20:24:36] <maralorn> fendor: When I have a look at the log it feels like hls is actually building every file with an own cradle?
[20:24:53] <fendor[m]> yeah that would be bad
[20:25:24] <maralorn> https://termbin.com/yyso
[20:25:55] <maralorn> I am not sure if I read this correctly but the log is subjectively longer than before.
[20:26:06] <maralorn> But I am also not super certain when this broke.
[20:26:45] <maralorn> Still it feels like itâ€™s using cabal to build all dependencies of every file.
[20:30:23] <fendor[m]> > Making new HscEnv[nix-output-monitor-1.1.3.0-inplace,....]
[20:30:23] <fendor[m]> yeah, that's terrible
[20:38:02] <fendor[m]> maralorn, I checked out nix-output-monitor, but can't reproduce the issue..
[20:38:54] <fendor[m]> can you try to obtain the same logs in debug mode?
[20:42:55] <maralorn> fendor[m]: Uh, how annoying. How did you install hls?
[20:43:26] <fendor[m]> I think I built some HEAD version, but I don't think I recall any bug fixes to the session-loader
[20:43:33] <fendor[m]> via ghcup
[20:44:01] <maralorn> Well it might just be, that itâ€™s an issue introduced in nixpkgs.
[20:44:11] <maralorn> i.e. the wrong hie-bios version or something?
[20:44:30] <fendor[m]> hie-bios also didn't have any recent bugs
[20:44:40] <fendor[m]> unless you are using the latest version?
[20:44:57] <maralorn> https://termbin.com/zvbc
[20:45:16] <fendor[m]> awesome, thanks!
[20:45:50] <fendor[m]> ok, main difference is, I am using ghc 8.10.7
[20:46:33] <maralorn> Well, the first log was with 8.10.7.
[20:46:42] <maralorn> I tried the newer ghc for comparision now.
[20:46:50] <maralorn> Symptomatic seems to be the same.
[20:47:03] <maralorn> I think we are using hie-bios 0.9.1
[20:47:11] <maralorn> from stackage LTS 19.
[20:48:03] <maralorn> fendor: Huh, thatâ€™s the newest hie-bios.
[20:48:04] <maralorn> Bad idea?
[20:48:22] <fendor[m]> in theory not, I think I am using that version as well...
[20:48:44] <fendor[m]> but the latest version hasn't been released with an HLS version, so some bugs might have slipped through
[20:48:58] <fendor[m]> * HLS version yet, so
[20:49:11] <maralorn> I can override with an older version and see if that fixes it.
[20:49:13] <maralorn> Can you recommend a version?^^
[20:49:27] <fendor[m]> I don't think the version is to blame
[20:49:38] <maralorn> Okay
[20:49:43] <fendor[m]> you can see the modules are included but HLS doesn't cache it properly
[20:49:57] <fendor[m]> included in the output from hie-bios, I mean
[20:50:19] <maralorn> Gotta go now, sorry. I can debug with anything you give me later.
[20:51:16] <fendor[m]> I unfortunately don't have much right now ðŸ˜€ the options are completely identical...
[20:51:23] <fendor[m]> Ill check out the hls version myself
[20:51:37] <fendor[m]> (like, the nix hls version)
[20:58:21] <fendor[m]> ok, I can't seem to launch nix-shell in nix-output-monitor, so slightly tricky to install the nix HLS version ðŸ˜€ 
[21:08:16] <michaelpj> https://github.blog/2022-03-16-save-time-partial-re-runs-github-actions/
[21:08:18] <michaelpj> game changer for HLS
[21:08:26] <michaelpj> we have a lot of slow jobs
[21:08:44] <maerwald> should just use gitlab
[21:08:53] <maerwald> where the actual releases are built
[21:13:18] <michaelpj> should just use gitlab for building the releases, where we do everything else :p
[21:13:23] <michaelpj> s/gitlab/github lol
[21:16:23] <maerwald> michaelpj: how are you going to build M1 releases on github?
[21:17:11] <michaelpj> M1 users can use `ghcup compile` :) do we even need binary releases with your recent changes to the extension?
[21:17:24] <maerwald> yes
[21:18:07] <maerwald> I think gitlab is the correct choice, because it means we can be in lock-step with whatever architectures GHC  supports
[21:18:15] <maerwald> instead of hoping github will support them
[21:53:00] *** Joins: fendor_ (~fendor@91.141.68.132.wireless.dyn.drei.com)
[21:55:39] *** Quits: fendor (~fendor@178.115.44.78.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[21:56:42] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[22:07:25] <maerwald> fendor[m]: https://github.com/haskell/haskell-language-server/pull/2800
[22:15:09] <maerwald> I see PRs not go across hie-bios, HLS and cabal...
[22:15:16] <maerwald> s/not/now/
[22:15:34] <maerwald> API wars
[22:18:55] <maerwald> fendor[m]: and here's an interesting answer https://github.com/microsoft/vscode/issues/146044#issuecomment-1079254141
[22:57:41] <maerwald> Indeed, that works
