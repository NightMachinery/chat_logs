[00:08:10] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[00:09:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:11e6:1e31:8844:c85f)
[00:10:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[00:11:11] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[00:11:13] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:11:21] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[00:14:45] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[00:17:29] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[00:21:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8275:c2bd:871b:678c) (Ping timeout: 252 seconds)
[00:23:19] *** Joins: returnTRUE (~irc@189.41.191.71)
[00:24:55] *** Quits: rendar (~rendar@user/rendar) (Quit: twomoon for d4h w1n.)
[00:25:21] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[00:26:35] *** Joins: mtt (~mtt@3e6bd1ca.rev.stofanet.dk)
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:30:20] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:32:40] <RandomReader> I mean, the available constructors are the ones visible, so if there's only one constructor template that accepts individual arguments, that's the one that is used
[00:33:05] <RandomReader> multiple individual arguments are not the same as one argument that can be initialized with a list
[00:33:13] <RandomReader> if the underlying question is "how can
[00:34:15] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[00:34:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:34:33] <RandomReader> if the underlying question is "how can I transparently mimic all base constructors", the answer is you can't, since otherwise they wouldn't be independent constructors :P
[00:36:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[00:37:47] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:39:46] <RandomReader> "using" will just pull the base constructors into scope, but you can still hide them with your own overrides if desired, so that wouldn't be a reason to avoid it
[00:39:52] *** Quits: SorinK (~SK@79.117.172.15) (Remote host closed the connection)
[00:39:54] <RandomReader> er, "own overloads"
[00:40:31] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[00:40:36] <RandomReader> however public inheritance of a container is generally not recommended, since the outcomes can be really surprising
[00:41:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[00:41:56] <RandomReader> the usual recommendations are to either inherit it privately and explicitly expose the members you want, or create an entirely new wrapper that simply has the container as a member
[00:44:10] *** Quits: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr) (Quit: leaving)
[00:51:25] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:52:32] *** Joins: rgrinberg (~textual@201.182.226.118)
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:53:54] *** Quits: returnTRUE (~irc@189.41.191.71) (Ping timeout: 260 seconds)
[00:54:58] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[01:01:25] *** Quits: mattf (~mattf@li908-138.members.linode.com) (*.net *.split)
[01:01:25] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[01:01:25] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:25] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: blueminder_ (sid143388@tinside.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: useful_idiot (~useful_id@154.3.40.151) (*.net *.split)
[01:01:26] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[01:01:26] *** Quits: j0bk_ (~j0bk@190.19.139.160) (*.net *.split)
[01:01:26] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[01:01:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:01:26] *** Quits: Brewster (~Brewster@185.145.156.241) (*.net *.split)
[01:01:26] *** Quits: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[01:01:26] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:01:26] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[01:01:26] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:01:26] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[01:01:26] *** Quits: pervaya (~pervaya@ip250.ip-51-83-183.eu) (*.net *.split)
[01:01:26] *** Quits: ollien (~ollien@ollien.com) (*.net *.split)
[01:01:26] *** Quits: notEVIL (~notevil@user/notevil) (*.net *.split)
[01:01:26] *** Quits: malinus (~malinus@172.245.158.16) (*.net *.split)
[01:01:26] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (*.net *.split)
[01:01:26] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[01:01:26] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[01:01:26] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[01:01:26] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[01:01:26] *** Quits: akacrs (k7f@user/akacrs) (*.net *.split)
[01:01:26] *** Quits: mertsas (~martin@ti0185q160-2775.bb.online.no) (*.net *.split)
[01:01:26] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[01:01:26] *** Quits: a5m (nop@asm.dj) (*.net *.split)
[01:01:26] *** Quits: Xark (~Xark@47.156.11.28) (*.net *.split)
[01:01:26] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[01:01:41] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[01:01:44] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[01:01:50] *** Joins: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net)
[01:01:52] *** Joins: blueminder_ (sid143388@id-143388.tinside.irccloud.com)
[01:01:54] *** Joins: notevil (~notevil@user/notevil)
[01:02:04] *** Joins: mabi (~m42e@pb42.de)
[01:02:11] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[01:02:12] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[01:02:16] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:02:16] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:02:20] *** Joins: j0bk (~j0bk@190.19.139.160)
[01:02:27] *** Joins: bjs (sid190364@id-190364.helmsley.irccloud.com)
[01:02:31] *** Quits: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net) (Changing host)
[01:02:31] *** Joins: Alipha (~AliphaX@user/alipha)
[01:02:32] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:02:37] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[01:02:42] *** Quits: bjs (sid190364@id-190364.helmsley.irccloud.com) (Changing host)
[01:02:42] *** Joins: bjs (sid190364@user/bjs)
[01:02:52] *** Joins: computerquip (sid423484@id-423484.lymington.irccloud.com)
[01:03:00] *** Quits: computerquip (sid423484@id-423484.lymington.irccloud.com) (Changing host)
[01:03:00] *** Joins: computerquip (sid423484@user/computerquip)
[01:03:06] *** Joins: Byteflux (~byte@byteflux.net)
[01:03:20] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[01:03:25] *** Joins: ollien (~ollien@ollien.com)
[01:03:27] *** Joins: Oxyd (~oxyd@user/oxyd)
[01:03:29] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[01:03:30] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:03:30] *** Joins: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[01:03:32] *** Joins: Cyp (~cyp@213.237.87.7)
[01:03:32] *** Joins: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c)
[01:03:33] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:03:40] *** Joins: Xark (~Xark@47.156.11.28)
[01:03:45] *** Joins: webstrand (~webstrand@user/webstrand)
[01:03:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:05:44] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[01:06:37] *** Joins: a5m (nop@asm.dj)
[01:06:44] *** Joins: mertsas (~martin@ti0185q160-2775.bb.online.no)
[01:06:47] *** Joins: akacrs (k7f@user/akacrs)
[01:08:42] *** Joins: malinus (~malinus@172.245.158.16)
[01:09:48] *** Joins: Cahaan_ (~Cahaan@user/cahaan)
[01:11:03] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:13:52] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 265 seconds)
[01:16:19] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:21:54] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[01:21:56] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[01:22:33] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[01:22:44] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:24:59] *** Joins: Brewster (~Brewster@185.145.156.241)
[01:30:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[01:34:24] *** Joins: reumeth (~reumeth@user/reumeth)
[01:36:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:04] *** ChanServ sets mode: +v npaperbot
[01:38:05] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 260 seconds)
[01:40:51] *** Joins: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de)
[01:46:12] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:52:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:59:45] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:02:45] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[02:04:12] *** vinleod is now known as vdamewood
[02:06:56] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[02:07:06] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:09:15] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:19:28] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:20:27] *** Quits: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:24:30] *** Joins: emerent_ (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de)
[02:24:30] *** emerent is now known as Guest7256
[02:24:30] *** emerent_ is now known as emerent
[02:24:34] *** Quits: Guest7256 (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:25:56] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 245 seconds)
[02:26:03] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[02:26:49] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[02:29:12] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:30:51] *** Joins: horseface (~horseface@user/horseface)
[02:32:50] *** Quits: pizdets (~pizdets@183.182.115.246) (Ping timeout: 260 seconds)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.206)
[02:38:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:40:40] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 244 seconds)
[02:45:41] *** Joins: horseface (~horseface@user/horseface)
[02:45:55] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 252 seconds)
[02:48:16] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[02:48:35] *** Joins: ravan (~ravan@user/ravan)
[02:53:48] *** Joins: nshire (~Neal@user/nshire)
[02:59:39] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[03:01:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[03:05:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:06:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:09:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:11e6:1e31:8844:c85f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:10:20] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[03:13:10] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 260 seconds)
[03:17:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:18:32] *** Joins: plastico (~plastico@neomutt/plastico)
[03:19:03] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:21:09] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[03:24:39] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:31:41] *** Joins: nshire_ (~Neal@47.150.248.17)
[03:32:20] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:35:29] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 258 seconds)
[03:37:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[03:37:48] *** Joins: chenqisu12 (~peiycae@183.217.203.91)
[03:44:06] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:45:54] *** Joins: ferdna (~ferdna@user/ferdna)
[03:46:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:50:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[03:50:57] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[03:53:47] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:e9cf:d82f:5daa:fcc1) (Ping timeout: 264 seconds)
[03:54:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[03:55:32] *** Joins: chozorho (~chozorho@2601:146:300:c30::2f9d)
[04:06:21] *** Quits: Player001 (~Player001@user/player001) (Quit: Quitting)
[04:09:52] *** Joins: proller (~p@80.240.216.69)
[04:10:29] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: what if I am turning narcissist? pretentious, asocial, inpromptu squabbles, easily become childishness from the slightest emotional distress.. i feel like I've only truly grown up on the outside, and it's painful to remain this way, but it's far from the)
[04:14:09] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:5872:8a70:85c4:9bd4)
[04:18:41] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:23:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[04:30:32] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Remote host closed the connection)
[04:33:02] *** Joins: Player001 (~Player001@user/player001)
[04:38:50] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[04:39:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:39:29] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[04:45:52] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[04:50:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 252 seconds)
[04:59:20] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[05:02:45] *** Joins: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it)
[05:05:10] *** Quits: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:09:12] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:09:36] <lmat> I have a struct B { }; struct C : public B { }; struct A { friend B; };  In this case, C member functions cannot access private members of A, right?
[05:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[05:15:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:18:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:21:51] <RandomReader> right, friendship is not transitive
[05:23:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:28:44] <lmat> RandomReader: Thank you!
[05:32:09] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[05:36:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:06] *** ChanServ sets mode: +v npaperbot
[05:42:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:43:14] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[05:44:15] *** Joins: causative (~halberd@user/causative)
[05:45:49] <chozorho> wait, so the code inside struct B can access A's private variables, but the code in struct C cannot?
[05:48:53] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:30] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:50:06] *** Quits: blueminder_ (sid143388@id-143388.tinside.irccloud.com) (Ping timeout: 245 seconds)
[05:50:27] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:31] <RandomReader> yes
[05:50:50] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[05:51:09] *** Joins: bjs (sid190364@user/bjs)
[05:51:43] *** Joins: blueminder_ (sid143388@tinside.irccloud.com)
[05:51:50] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[05:52:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[05:53:06] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[05:53:14] *** Joins: psb (sid500598@user/psb)
[05:53:16] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[05:53:20] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[05:53:36] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:53:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:58:49] <RandomReader> https://godbolt.org/z/ccn44r31n
[05:58:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:00:14] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:e869:f825:7a69:95be) (Quit: ZNC 1.8.2 - https://znc.in)
[06:00:27] *** Joins: Albright (~Albright@149.28.13.173)
[06:01:32] *** Quits: psb (sid500598@user/psb) (Ping timeout: 258 seconds)
[06:01:55] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:18] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:02:41] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:41] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:56] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[06:03:02] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[06:03:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[06:03:18] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[06:03:38] *** Joins: computerquip (sid423484@user/computerquip)
[06:04:11] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:04:13] *** Joins: psb (sid500598@user/psb)
[06:08:22] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:09:06] *** Joins: nostar (~nostar@45.14.195.89)
[06:13:37] *** Quits: nshire_ (~Neal@47.150.248.17) (Quit: Leaving)
[06:13:52] *** Joins: nshire (~Neal@user/nshire)
[06:14:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 258 seconds)
[06:28:57] *** Inst_ is now known as Inst
[06:33:07] *** Quits: nostar (~nostar@45.14.195.89) (Quit: Leaving)
[06:33:50] *** Joins: nostar (~nostar@68.51.221.108)
[06:44:21] *** Joins: kts (~kts@103.73.237.77)
[06:49:30] *** Joins: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net)
[06:54:12] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:58:04] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:01:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:12:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:12:22] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c940:d9e6:ed26:306c)
[07:16:00] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[07:17:00] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c940:d9e6:ed26:306c) (Ping timeout: 260 seconds)
[07:22:10] *** Joins: damicesello (~cesello@host-188-13-240-8.business.telecomitalia.it)
[07:22:10] *** Quits: cesello (~cesello@user/cesello) (Read error: Connection reset by peer)
[07:22:36] *** Quits: kts (~kts@103.73.237.77) (Ping timeout: 250 seconds)
[07:22:58] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:25:52] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 258 seconds)
[07:26:18] *** Joins: alkino (~quassel@user/alkino)
[07:27:19] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:28:15] *** Joins: llh (~llh@user/llh)
[07:32:06] *** Joins: pike (~yuval@176.231.160.23)
[07:34:30] *** Joins: nshire_ (~Neal@47.150.248.17)
[07:34:55] *** Joins: kts (~kts@103.73.237.38)
[07:36:15] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 260 seconds)
[07:44:16] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[07:49:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[07:50:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:57:42] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:00:23] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:14:32] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[08:15:41] *** Joins: Sadale (~Sadale@user/sadale)
[08:16:24] *** Joins: yeirr (~yeirr@user/yeirr)
[08:37:33] *** sn0wdrone is now known as snowdrone
[08:38:08] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[08:39:50] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[08:42:07] *** Quits: Leone (~Leo@216.154.21.17) (Read error: Connection reset by peer)
[08:44:41] *** presonic is now known as highrate
[08:47:15] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[08:51:16] *** Joins: daswf852 (~daswf852@user/daswf852)
[08:51:30] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:58:13] *** Joins: segnior (segnior@user/segnior)
[08:58:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:59:13] *** Joins: ambasta (~ambasta@89.46.62.147)
[08:59:53] <ambasta> how do I find the semiregular type a sentinel is for?
[09:01:33] <ambasta> i.e. template <std::input_iterator IterT, std::sentinel_for<IterT> SentinelT> auto fn(IterT iter, SentinelT sentinel) -> decltype(make_my_custom_sentinel(std::iter_value_t<IterT>, SentinelT::S)) {...}
[09:01:46] <ambasta> How can I find S here?
[09:06:16] <ambasta> If I understand correctly, SentinelT::S == decltype(sentinel) ?
[09:11:55] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 260 seconds)
[09:12:18] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:13:34] <ambasta> nm
[09:18:08] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:24:34] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[09:24:53] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[09:26:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[09:27:46] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 258 seconds)
[09:34:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:34:20] <RandomReader> not really clear what you're asking about, but the sentinel_for concept is just checking the relationship between SentinelT and IterT
[09:34:40] <RandomReader> SentinelT::S isn't a thing in general, it'd be something that function made up
[09:35:19] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:36:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:07] *** ChanServ sets mode: +v npaperbot
[09:41:12] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (Read error: Connection reset by peer)
[09:42:15] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
[09:43:08] *** Joins: rendar (~rendar@user/rendar)
[09:44:08] *** Joins: reumeth (~reumeth@user/reumeth)
[09:47:08] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:47:13] *** Quits: chozorho (~chozorho@2601:146:300:c30::2f9d) (Ping timeout: 252 seconds)
[09:47:46] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[09:50:19] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:52:56] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[09:56:31] *** Joins: yeirr (~yeirr@user/yeirr)
[10:00:29] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[10:00:53] *** Joins: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872)
[10:00:57] *** Parts: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) ()
[10:04:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:07:15] *** Joins: teepee (~teepee@openscad/teepee)
[10:14:06] *** Quits: nshire_ (~Neal@47.150.248.17) (Quit: Leaving)
[10:14:21] *** Joins: nshire (~Neal@user/nshire)
[10:17:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:19:22] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:20:10] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:22:03] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[10:23:35] *** Quits: letto (~letto@86.120.85.133) (Remote host closed the connection)
[10:24:23] *** Joins: letto (~letto@86.120.85.133)
[10:25:06] *** Quits: letto (~letto@86.120.85.133) (Client Quit)
[10:25:35] *** Joins: letto (~letto@86.120.85.133)
[10:31:47] *** Joins: toverna (~uni@95-30-2-84.broadband.corbina.ru)
[10:36:21] *** Quits: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872) (Ping timeout: 245 seconds)
[10:39:51] *** Quits: toverna (~uni@95-30-2-84.broadband.corbina.ru) (Quit: Konversation terminated!)
[10:40:01] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[10:43:44] *** Joins: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de)
[10:43:47] *** Quits: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de) (Client Quit)
[10:44:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[10:47:15] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:47:34] *** Quits: kts (~kts@103.73.237.38) (Ping timeout: 250 seconds)
[10:59:11] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[11:04:11] *** Joins: NEYi (~NEYi@109.251.216.38)
[11:05:57] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Ping timeout: 265 seconds)
[11:09:56] *** Joins: src (~src@user/src)
[11:10:22] *** Quits: letto (~letto@86.120.85.133) (Ping timeout: 260 seconds)
[11:10:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[11:13:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:19:48] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[11:31:52] *** Joins: robod34 (Username@79.113.195.239)
[11:35:12] *** Quits: Pajus (~Pajus@user/pajus) (Quit: leaving)
[11:35:44] *** Joins: Pajus (~Pajus@user/pajus)
[11:40:43] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[11:41:51] *** Quits: Pajus (~Pajus@user/pajus) (Quit: leaving)
[11:42:04] *** Joins: Pajus (~Pajus@user/pajus)
[12:02:29] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:03:49] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[12:06:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[12:08:17] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:08:33] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:ee96:9a6a:8120:6888)
[12:09:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[12:16:07] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[12:17:18] *** Joins: snehal (~snehal@106.78.37.81)
[12:17:46] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[12:17:47] *** Parts: snehal (~snehal@106.78.37.81) (Leaving)
[12:17:56] *** Joins: snehal (~snehal@106.78.37.81)
[12:19:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:23:44] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[12:24:59] *** Quits: snehal (~snehal@106.78.37.81) (Quit: Leaving)
[12:25:21] *** Joins: snehal (~snehal@106.78.37.81)
[12:25:38] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[12:26:24] *** Quits: snehal (~snehal@106.78.37.81) (Client Quit)
[12:26:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:26:54] *** Joins: snehal (~snehal@106.78.37.81)
[12:27:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[12:28:03] <ambasta> RandomReader: Yeah, I misunderstood what sentinel_for did..
[12:28:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:28:38] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 244 seconds)
[12:29:15] <ambasta> Also, why is the concept not satisfied here? https://wandbox.org/permlink/2BmkFTskHEvQceWI
[12:29:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:12] *** Joins: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de)
[12:30:32] *** Joins: fengdaolong (~fengdaolo@183.94.82.158)
[12:31:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:31:43] *** Joins: eka (~eka@user/eka)
[12:33:11] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[12:36:44] *** Joins: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872)
[12:39:05] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Remote host closed the connection)
[12:39:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:42:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:44:39] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[12:44:52] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 252 seconds)
[12:46:02] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:ee96:9a6a:8120:6888) (Quit: Leaving)
[12:47:12] *** Quits: snehal (~snehal@106.78.37.81) (Quit: Leaving)
[12:47:53] *** Joins: snehal (~snehal@106.78.37.81)
[12:48:03] *** Quits: snehal (~snehal@106.78.37.81) (Remote host closed the connection)
[12:48:18] *** Joins: snehal (~snehal@106.78.37.81)
[12:48:35] *** Quits: snehal (~snehal@106.78.37.81) (Remote host closed the connection)
[12:52:55] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[13:15:25] *** Quits: Pajus (~Pajus@user/pajus) (Quit: leaving)
[13:15:56] *** Joins: letto (~letto@86.120.85.133)
[13:18:59] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:19:55] *** Joins: Pajus (~Pajus@user/pajus)
[13:26:00] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:26:27] *** Quits: Pajus (~Pajus@user/pajus) (Quit: Lost terminal)
[13:26:53] *** Joins: Pajus (~Pajus@user/pajus)
[13:27:44] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[13:28:12] *** Quits: Pajus (~Pajus@user/pajus) (Client Quit)
[13:29:31] *** Quits: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[13:29:57] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:31:18] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:32:44] *** Joins: chris64 (~chris@user/chris64)
[13:34:07] *** Joins: Pajus (~Pajus@user/pajus)
[13:35:37] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[13:35:37] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[13:36:04] *** Joins: kts (~kts@103.73.237.76)
[13:36:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:05] *** ChanServ sets mode: +v npaperbot
[13:45:06] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 245 seconds)
[13:45:14] *** Joins: [R] (~rs@genoce.org)
[13:46:40] *** Joins: robert_ (~hellspawn@47.203.169.95)
[13:52:05] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f413:894:cbd8:9458)
[13:58:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:59:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:59:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[14:03:49] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[14:08:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:14:07] *** Quits: osse (~osse@zsh/user/osse) (Ping timeout: 265 seconds)
[14:15:28] *** Quits: reumeth (~reumeth@user/reumeth) (Quit: reumeth)
[14:21:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[14:21:52] *** Joins: yeirr (~yeirr@user/yeirr)
[14:22:55] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: kernel)
[14:23:02] *** Quits: kts (~kts@103.73.237.76) (Remote host closed the connection)
[14:23:29] *** Joins: kts (~kts@103.73.237.76)
[14:23:48] *** Joins: pulse (~pulse@user/pulse)
[14:24:29] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[14:25:20] *** Quits: chenqisu12 (~peiycae@183.217.203.91) (Quit: Leaving)
[14:25:56] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[14:28:09] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:30:38] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[14:31:24] *** Joins: plastico (~plastico@neomutt/plastico)
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:43:57] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:44:06] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:44:08] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Quit: leaving)
[14:44:18] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[14:46:08] <rond_> Is there something like: "get all classes that extend this given class"? (usecase: I'm writing a test, I have several classes that extend a given abstract glass, all of them have a similar, one-parameter constructor. I'd like to have something like: `for (cls: classesThatExtrend(MyAbstract) {auto cls(myParam); assert(cls.value == XYZ)`
[14:47:57] <PJBoy> no
[14:48:56] <rond_> is it possible to store a static vector of extending classes in my MST class and manually append new ones whenever I implement them? (that's not ideal, but...)
[14:49:20] <PJBoy> it's not possible to store arbitrary types as values at runtime
[14:49:26] <PJBoy> well
[14:49:32] <PJBoy> I guess there's type_info objects
[14:50:12] <PJBoy> or if you're seriously willing to list them all, you can make a std::tuple<Derived1, Derived2, etc>
[14:50:22] <PJBoy> and do some annoying metaprogramming stuff with it
[14:51:14] <rond_> I like the idea of having a test like "`for (cls: classesThatExtrend(MyAbstract) {auto cls(myParam); assert(cls.value == XYZ)`" and just extending abstract class static vector of deriving classes  (like is an exeggaration, but...)
[14:51:18] <rond_> will this allow me to do so?
[14:52:24] <PJBoy> not via friendly syntax like that
[14:53:21] <rond_> that's unfortunate :(
[14:53:39] <rond_> and surprising; I'm almost sure I've done something similar in other languages
[14:54:03] <PJBoy> it would look more like, suppose `using Deriveds = std::tuple<Derived1, Derived2, etc>; std::apply([](auto derived) { static_assert(decltype(derived)::val == XYZ); }, Derived());`
[14:54:36] <PJBoy> but I mean
[14:54:44] <PJBoy> you really shouldn't care about derived classes like that
[14:55:34] <rond_> well, I'll try to do some research and I'll probably come back with the question; I thought it'll be an obvious one-liner, I need to think it through then
[14:56:27] <PJBoy> there's a fairly unfriendly CRTP solution too
[14:56:27] *** Quits: Degats (~Degats@2a02:c7d:5bf6:1300:c550:f671:6b68:d399) (Quit: ZNC - http://znc.in)
[14:57:34] *** Joins: proller (~p@80.240.216.69)
[14:57:48] <rond_> let me come back later on to this problem, okay? It turned out it's not an obvious thing and I wouldn't like to focus on it at the moment. Sorry
[15:02:20] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:03:11] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 258 seconds)
[15:14:02] *** Parts: ambasta (~ambasta@89.46.62.147) (Leave.)
[15:16:28] <anyone> Curious if a parameter pack could be used
[15:17:30] <PJBoy> oh I actually screwed up the apply
[15:17:36] <PJBoy> it was supposed to take an auto...
[15:17:50] <PJBoy> and do a fold expression && for the static_assert
[15:21:31] <anyone> https://wandbox.org/permlink/3VXCcaBNqofQb5cz
[15:21:38] <chris64> maybe boost.hana can help you out with heterogeneous containers
[15:23:25] <rond_> anyone looks nice!
[15:23:34] <anyone> I know I do
[15:23:59] <rond_> :))
[15:28:14] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:28:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882)
[15:28:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882) (Changing host)
[15:28:20] *** Joins: skapata (~Skapata@user/skapata)
[15:28:41] *** Quits: eka (~eka@user/eka) (Quit: Leaving)
[15:30:08] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[15:36:12] *** Joins: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de)
[15:39:12] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:47:46] <anyone> And now the pinnacle, replacing the recursion with a foldexpr. I'd love to pastebin, but it seems wandbox exhibits UB on it  o_O
[15:47:55] <anyone> (program just runs endlessy on wandbox)
[15:48:54] <anyone> guess I broke wandbox (won't run hello world either now).
[15:49:11] *** Quits: Dizident1 (~aresg@modemcable105.134-19-135.mc.videotron.ca) (Quit: WeeChat 3.2)
[15:49:16] <anyone> https://godbolt.org/z/rxbrfefrh
[15:49:37] *** Quits: fengdaolong (~fengdaolo@183.94.82.158) (Ping timeout: 244 seconds)
[15:49:38] *** Joins: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca)
[15:51:55] *** Joins: fengdaolong (~fengdaolo@183.94.82.158)
[15:57:23] *** Quits: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872) (Ping timeout: 264 seconds)
[15:59:33] *** Joins: yeirr (~yeirr@user/yeirr)
[16:02:02] <PJBoy> that's not a fold expression
[16:02:09] <PJBoy> that's normal pack expansion
[16:02:37] *** Joins: LNokto (~LNokto@user/lnokto)
[16:03:16] <PJBoy> fold expression would be https://godbolt.org/z/8djPMr19E
[16:07:12] *** Quits: rahl (~rahl@102.114.190.3) (Ping timeout: 258 seconds)
[16:07:15] *** Quits: fengdaolong (~fengdaolo@183.94.82.158) (Ping timeout: 260 seconds)
[16:08:55] *** Joins: rahl (~rahl@102.114.161.137)
[16:09:14] *** Joins: fengdaolong (~fengdaolo@183.93.99.16)
[16:09:32] <anyone> I was so close
[16:11:40] *** Joins: paul_ (~paul@2.24.23.175)
[16:13:34] *** Joins: kts_ (~kts@103.73.237.167)
[16:14:55] *** Quits: kts_ (~kts@103.73.237.167) (Client Quit)
[16:15:16] *** Joins: kts_ (~kts@103.73.237.167)
[16:15:56] *** paul_ is now known as lovelace
[16:16:02] *** Quits: kts (~kts@103.73.237.76) (Ping timeout: 250 seconds)
[16:16:45] *** Quits: kts_ (~kts@103.73.237.167) (Client Quit)
[16:17:05] *** Joins: kts (~kts@103.73.237.167)
[16:20:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:20:53] *** Quits: kts (~kts@103.73.237.167) (Client Quit)
[16:21:34] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 265 seconds)
[16:23:35] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:25:27] *** Joins: kts (~kts@103.73.237.167)
[16:27:39] *** Joins: LNokto (~LNokto@user/lnokto)
[16:28:00] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:29:04] *** Quits: lovelace (~paul@2.24.23.175) (Quit: Konversation terminated!)
[16:30:36] *** Joins: lovelace (~paul@2.24.23.175)
[16:30:58] *** Quits: fengdaolong (~fengdaolo@183.93.99.16) (Ping timeout: 260 seconds)
[16:32:07] *** Joins: wolfman2000 (~wolfman20@2600:1700:3211:4140:7cbb:e0ef:fef8:5d5f)
[16:32:54] *** Joins: fengdaolong (~fengdaolo@183.93.98.155)
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:36:10] *** Quits: lovelace (~paul@2.24.23.175) (Quit: Konversation terminated!)
[16:37:14] *** Joins: lovelace (~paul@2.24.23.175)
[16:38:12] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:38:33] *** Quits: lovelace (~paul@2.24.23.175) (Client Quit)
[16:39:10] *** Joins: lovelace (~paul@2.24.23.175)
[16:39:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 245 seconds)
[16:42:17] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:43:30] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[16:43:43] *** Joins: Atque (~Atque@user/atque)
[16:43:47] *** Joins: LNokto (~LNokto@user/lnokto)
[16:48:09] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 265 seconds)
[16:49:52] *** Joins: LNokto (~LNokto@user/lnokto)
[16:50:13] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[16:51:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:53:25] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Remote host closed the connection)
[16:54:41] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[16:56:08] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[16:57:45] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[16:57:50] <CarloWood> From third party code:
[16:57:54] <CarloWood>     throw std::runtime_error(std::string("Could not open \"" + filename + "\" file!").c_str());
[16:58:00] <CarloWood> Is that not UB?
[16:58:04] *** Joins: LNokto (~LNokto@user/lnokto)
[16:59:02] <CarloWood> Ie, the string that c_str() points to gets freed when the temporary std::string is destructed; doesn't that happen before the thrown object is caught and used?
[16:59:36] *** Joins: sn0wdrone (~snowdrone@user/snowdrone)
[17:01:44] <cbreak> CarloWood: it's not ub, just dumb.
[17:01:57] <cbreak> runtime_error has a std::string inside
[17:01:58] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Ping timeout: 250 seconds)
[17:02:01] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 258 seconds)
[17:02:37] <cbreak> it'll copy the string.
[17:03:13] <cbreak> the whole std::string(...).c_str() part is pointless
[17:03:33] <cbreak> since the parameter is already a std::string, presumably, and runtime_error has a constructor for those
[17:03:48] <InPhase> CarloWood: runtime_error gives a specific guarantee that the contents of what() are valid until the exception object is destroyed, and not the caller.  Which of course means a copy happens.
[17:04:22] <InPhase> CarloWood: All custom exceptions need to provide the same guarantee to avoid shooting users in the foot.
[17:04:23] *** Quits: kts (~kts@103.73.237.167) (Quit: Konversation terminated!)
[17:05:06] <PJBoy> isn't that a basic requirement of any object that contains a string and provides an accessor to it?
[17:06:14] <InPhase> PJBoy: It's a basic requirement of the usage of any object that this be done, but it doesn't have to be the class providing that guarantee.
[17:06:35] <InPhase> e.g., string_view
[17:06:37] *** Joins: kts (~kts@103.73.237.240)
[17:06:54] <PJBoy> any object that owns a string then
[17:06:58] <InPhase> Try not to throw string_view as an exception.
[17:07:49] <cbreak> exceptions do own their what string
[17:08:07] <cbreak> either directly, or as a side effect
[17:08:11] <InPhase> { string s = "what?"; throw string_view(s); }
[17:08:11] <geordi> terminated by exception of type basic_string_view<char, char_traits<char> >
[17:08:16] <cbreak> (for example, by just using some static string)
[17:08:25] <InPhase> UB and extra stupid all in one.
[17:08:33] <PJBoy> that string_view is valid
[17:08:43] <PJBoy> the string literal has static storage
[17:08:56] <PJBoy> oh wait
[17:09:00] <InPhase> :)
[17:09:03] <PJBoy> I completely missed the bit where you wrote `string`
[17:09:39] <LiaoTao> Does anyone know where in the standard this is all worded?
[17:09:46] <PJBoy> which thing?
[17:10:16] <LiaoTao> The guarantee that e.g. the constructor for std::runtime_error which takes a const char* must keep a copy of it
[17:10:31] <LiaoTao> I mean it makes sense, but I'd still like to see it in black and white
[17:11:01] <LiaoTao> s/copy of it/copy of the string pointed to by it/
[17:11:15] <cbreak> LiaoTao: you can read cppreference for a human readable variant
[17:11:24] <cbreak> or the draft on various locations
[17:11:30] <cbreak> or pay for the standard from ansi or iso
[17:11:55] <LiaoTao> cbreak, Right, so it's in the standard, but that's what not what I was asking about. I asked "Where in the standard?"
[17:12:56] <PJBoy> http://eel.is/c++draft/exception#6 I guess
[17:13:11] <PJBoy> as well as point (2) that refers to that remark
[17:13:30] <LiaoTao> PJBoy, Thanks
[17:13:57] <cbreak> http://eel.is/c++draft/support.exception#exception-6
[17:14:02] <cbreak> ...
[17:19:39] *** Joins: lucido (~lucido@p548819c0.dip0.t-ipconnect.de)
[17:19:57] *** Quits: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[17:20:10] <lucido> Hi. How can I replace the following type  with something that C++20 knows?
[17:20:12] <lucido> typedef std::binder1st<
[17:20:12] <lucido>             std::mem_fun1_t<void, Segment, StraightConstraint*>
[17:20:12] <lucido>             > TransferStraightConstraint;
[17:20:36] <PJBoy> careful with those multiline pastes
[17:20:46] <cbreak> lucido: std::function<...>
[17:21:06] <cbreak> or use auto, if you can initialize directly
[17:21:52] <cbreak> bind result types are not really meant for user consumption imo
[17:22:41] <lucido> I'm trying to port the adaptagrams library to work with ++20
[17:26:02] <PJBoy> man binder1st and mem_fun1_t
[17:26:26] <PJBoy> that's beyond old school
[17:29:33] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[17:29:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:33:31] <lucido> ok, so here mem_fun1_t is binary function object with result type void, first argument is a pointer to Segment while the second argument is a pointer to StraightConstraint which in ++20 can be witten as std::function<void(Segment*, StraightConstraint*), rihgt?>
[17:35:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:35:49] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[17:36:15] <PJBoy> something like that, yeah
[17:36:27] <PJBoy> and you bind the first argument
[17:36:33] <InPhase> lucido: Can you use a lambda in that context?
[17:36:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:36:59] <PJBoy> so I'd image your type alias should be a `std::function<void(StraightConstraint*)>`
[17:37:06] *** Joins: sa02irc_ (~mbax@155-079-043-212.ip-addr.inexio.net)
[17:37:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:09] *** ChanServ sets mode: +v npaperbot
[17:37:21] <lucido> PJBoy, that simple?
[17:37:33] <PJBoy> probably
[17:37:36] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 244 seconds)
[17:37:38] <PJBoy> it does depend on exactly what you're doing
[17:37:55] <lucido> InPhase, I'm working with preexisting code, but yes I could
[17:38:49] <InPhase> lucido: The modern stdlib recommendation is a lambda either to a template parameter instead of a named type, or to a std::function of the bound structure if you need to store it.
[17:38:59] <PJBoy> but that std::function can be assigned a lambda such as `[&p_segment](StraightConstraint* p) { p_segment->method(p); }`
[17:39:32] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:39:35] <InPhase> lucido: Or you can whip up a custom function object or custom class of some sort if these things are not ideal.
[17:43:20] *** Joins: Atque (~Atque@user/atque)
[17:43:33] *** Joins: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com)
[17:44:10] *** Joins: SorinK (~SK@86.127.15.118)
[17:45:09] <yates> why is my build not finding <filesystem>? http://paste.debian.net/1216486/
[17:46:47] <lucido> yates, library file not in include path maybe?
[17:46:50] <yates> this is under lubuntu 18.04LTS - is a package required for this library?
[17:47:42] <yates> yes, of course it isn't. but why not? this should be provided under the "system" folders somewhere, right?
[17:47:51] <PJBoy> what's your GCC version?
[17:48:14] <yates> http://paste.debian.net/1216487/
[17:48:34] <lucido> yates, https://stackoverflow.com/questions/45867379/why-does-gcc-not-seem-to-have-the-filesystem-standard-library
[17:48:57] <PJBoy> gcc 7.5
[17:49:24] <PJBoy> > GNU implementation prior to 9.1 requires linking with -lstdc++fs
[17:49:54] <PJBoy> but yeah, as that SO points out, they hadn't implemented filesystem until GCC 8
[17:50:36] <yates> i see. thanks people.
[17:54:52] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[18:00:27] *** Joins: chozorho (~chozorho@2601:146:300:c30::778)
[18:04:40] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[18:10:06] *** Joins: kts_ (~kts@103.73.237.174)
[18:12:10] *** Quits: kts (~kts@103.73.237.240) (Ping timeout: 250 seconds)
[18:12:35] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[18:12:44] *** Quits: sa02irc_ (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 244 seconds)
[18:12:59] <lucido> I'm having trouble understanding the whole mem_fun bind concept. If I want to port "bind2nd(mem_fun(&Edge::getTopologyConstraints),&ts)" (context: https://pastebin.com/SvGzhBay) to ++20 then can I use the lambda "[](Edge* e) {return e->getTopologyConstraints(ts)}" ?
[18:13:50] *** Quits: mtt (~mtt@3e6bd1ca.rev.stofanet.dk) (Read error: Connection reset by peer)
[18:15:37] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 258 seconds)
[18:16:02] *** Joins: LNokto (~LNokto@user/lnokto)
[18:16:59] <PJBoy> your lambda needs to capture ts
[18:17:05] <PJBoy> but yes
[18:17:42] <lucido> right, I think it is [&ts](Edge* e) { return e->getTopologyConstraints(&ts); }
[18:17:58] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[18:17:59] <PJBoy> if the ts you're referring to outlives the lambda, yeah
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:18:34] *** Joins: sedeki (~textual@user/sedeki)
[18:19:39] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:27:16] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:33:41] *** Joins: Leone (~Leo@216.154.21.17)
[18:33:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:34:50] *** Joins: src_ (~src@user/src)
[18:38:55] *** Quits: src (~src@user/src) (Ping timeout: 260 seconds)
[18:39:15] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:40:22] *** Joins: Optimus (~risto@87.227.237.59)
[18:43:39] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[18:43:58] *** Joins: src (~src@user/src)
[18:46:09] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[18:47:31] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:01] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[18:52:02] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:55:59] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[18:56:08] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 244 seconds)
[18:56:18] *** Joins: LNokto (~LNokto@user/lnokto)
[18:58:28] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:59:43] <Alipha> [ts] would instead copy ts into the lambda. Which is appropriate, it's hard to say
[19:00:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:02:13] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Quit: Leaving)
[19:02:18] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:05:26] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 260 seconds)
[19:06:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[19:07:51] *** Joins: LNokto (~LNokto@user/lnokto)
[19:08:31] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 244 seconds)
[19:11:32] *** Joins: ferdna (~ferdna@user/ferdna)
[19:15:15] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:16:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034)
[19:18:19] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:21:09] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:24:59] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[19:25:30] *** Quits: wwilly (~wwilly@217.140.106.13) (Ping timeout: 260 seconds)
[19:26:19] *** Joins: wwilly (~wwilly@217.140.106.13)
[19:26:38] *** Joins: LNokto (~LNokto@user/lnokto)
[19:28:07] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Remote host closed the connection)
[19:28:07] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[19:29:23] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[19:29:46] *** Joins: LNokto (~LNokto@user/lnokto)
[19:30:57] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:32:21] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:36:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:39:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285)
[19:40:11] *** Joins: daswf852 (~daswf852@user/daswf852)
[19:44:17] *** Joins: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de)
[19:45:23] *** Quits: robert_ (~hellspawn@47.203.169.95) (Ping timeout: 264 seconds)
[19:48:45] *** Quits: Awoobis (A_D@libera/staff/dragon) (Killed (Awoobis (Botnets are not permitted on libera.chat)))
[19:48:57] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[19:50:28] *** A_Dragon is now known as Awoobis
[19:51:16] *** Joins: pulse (~pulse@user/pulse)
[19:52:57] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:54:32] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[19:56:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 258 seconds)
[19:59:38] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Quit: RabidToaster)
[19:59:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:01:02] *** Quits: UmarJ (~username@user/umarj) (Quit: UmarJ)
[20:04:56] *** Joins: UmarJ (~username@user/umarj)
[20:09:02] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[20:09:11] *** Quits: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:09:16] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[20:10:12] *** Joins: LNokto (~LNokto@user/lnokto)
[20:13:06] *** Joins: damiano (~cesello@host-188-13-240-8.business.telecomitalia.it)
[20:13:08] *** Quits: damicesello (~cesello@host-188-13-240-8.business.telecomitalia.it) (Read error: Connection reset by peer)
[20:16:17] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96)
[20:16:17] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96) (Changing host)
[20:16:17] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:18:02] *** nuala2 is now known as nuala
[20:22:01] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:25:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:29:01] *** Quits: emerent (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:29:40] *** Joins: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de)
[20:30:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:30:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[20:30:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:37:20] *** sn0wdrone is now known as snowdrone
[20:39:08] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:45:34] *** Quits: fengdaolong (~fengdaolo@183.93.98.155) (Ping timeout: 252 seconds)
[20:45:40] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[20:46:15] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[20:46:40] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 260 seconds)
[20:46:45] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96)
[20:46:45] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96) (Changing host)
[20:46:45] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:52:02] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:54:22] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[20:57:29] *** Joins: slidercrank (~slidercra@user/slidercrank)
[21:04:20] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[21:04:40] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 258 seconds)
[21:04:51] *** Joins: plastico (~plastico@neomutt/plastico)
[21:05:10] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:06:20] *** Quits: AmR (~AmREiSa@156.199.106.121) (Read error: Connection reset by peer)
[21:08:37] *** Joins: AmR (~AmREiSa@156.199.106.121)
[21:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:10:27] *** Joins: Brainium (~brainium@user/brainium)
[21:11:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:18:23] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Ping timeout: 264 seconds)
[21:23:23] *** Quits: lucido (~lucido@p548819c0.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[21:24:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[21:25:03] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[21:29:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[21:30:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:30:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:14] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[21:31:34] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[21:31:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:34:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:34:09] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[21:35:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:36:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:08] *** ChanServ sets mode: +v npaperbot
[21:41:40] *** Quits: chozorho (~chozorho@2601:146:300:c30::778) (Ping timeout: 252 seconds)
[21:42:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:42:26] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[21:42:34] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600)
[21:42:34] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600) (Changing host)
[21:42:34] *** Joins: skapate (~Skapata@user/skapata)
[21:42:59] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 264 seconds)
[21:45:40] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[21:48:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:51:24] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[21:59:08] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[22:01:28] <CarloWood> I want an operator<<(std::ostream&, T const&) such that if T is in namespace vk and vk::to_string(T) exists, it should write the result of that to the ostream. But if another operator<< already exist, that should be used.
[22:02:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:49] <cbreak> CarloWood: define that then
[22:02:57] <cbreak> make it a function template in that namespace
[22:03:40] <cbreak> and do some SFINAE trickery to hide that overload if to_string doesn't exist
[22:04:16] *** Quits: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034) (Ping timeout: 245 seconds)
[22:07:33] <CarloWood> wandbox is dead it seems.
[22:09:13] <cbreak> CarloWood: https://godbolt.org/z/7vehnczsG
[22:09:56] <cbreak> this could be done more elegant with newer c++ versions I think
[22:10:17] <cbreak> I wrote it in c++11
[22:10:44] <CarloWood> I was writing it in C++20, but you beat me :/
[22:10:57] <cbreak> https://en.cppreference.com/w/cpp/language/constraints
[22:11:21] <CarloWood> This is what I had at the moment you pasted that: https://bpa.st/KJXQ
[22:12:06] <cbreak> similar idea
[22:12:10] <cbreak> you just lack the concept
[22:16:37] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:20:30] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[22:21:47] <CarloWood> This seems to work... https://godbolt.org/z/T4Tz41zoo
[22:23:13] <CarloWood> cbreak: would you say that the concept should be put in namespace vk?
[22:24:08] <cbreak> yes
[22:26:16] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[22:26:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:41:16] *** Joins: jkaye (~jkaye@2601:281:8300:7530:5bae:6a75:284d:ff5)
[22:45:59] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:51:12] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 244 seconds)
[22:51:44] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[22:51:44] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:53:58] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:55:21] *** Joins: LNokto (~LNokto@user/lnokto)
[22:57:12] *** Joins: ferdna (~ferdna@user/ferdna)
[22:59:06] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[22:59:31] *** Joins: LNokto (~LNokto@user/lnokto)
[23:08:42] *** Joins: lucido (~lucido@p548819c0.dip0.t-ipconnect.de)
[23:09:19] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[23:09:58] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[23:21:36] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:22:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[23:24:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:24:41] *** Gustavo6046_ is now known as Gustavo6046
[23:25:19] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[23:26:39] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Remote host closed the connection)
[23:29:44] <Brewster> Hey I'm getting an odd error that google really isn't helping me with. "Fatal error: glibc detected an invalid stdio handle". It happens on the curl_easy_perform line and I'm not sure what to do. https://pastebin.com/kpUXnUxq
[23:29:53] <Brewster> Sorry for not using wandbox. Everything works just fine without the curl stuff so I was hoping someone could just point out if I was doing something wonky.
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:35:27] <RandomReader> don't cross-post, this belongs in -general
[23:38:01] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 265 seconds)
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:49:07] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[23:51:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:52:27] <anyone> K::operator=(K &&other) { swap(*this, other); other.clear(); } -- I figure something like that might not work, given swap() may be using op= itself..
[23:53:50] <anyone> I have to type it out, don't I
[23:53:55] <RandomReader> to me that doesn't even make sense, but here's an older discussion on it: http://scottmeyers.blogspot.com/2014/06/the-drawbacks-of-implementing-move.html
[23:55:49] <RandomReader> (what I mean by "doesn't make sense" is that these are distinct operators because they do distinct things, so the idea of implementing one in terms of another is fundamentally nonsense .. which means doing it successfully requires being clever in some way, and that usually leads to poor outcomes)
[23:55:56] <anyone> ah, I see my thought error. (Based upon Myers's post, if I were to use swap, I'd have to swap individual members instead of the entire class - of course)
