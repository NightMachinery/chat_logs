[00:23:05] <FromDiscord> <pmunch> Not as far as I know, no‚Üµ(@auxym)
[00:23:26] <FromDiscord> <pmunch> But it supports raw X11, so that's nice
[00:30:00] <FromDiscord> <hmmm> I have a plan to solve all our GUI problems
[00:31:37] <FromDiscord> <hmmm> we invite Araq to discord main for christmas celebrations, we let him drink a couple of heavy beers and then when he is weak we ask him if he codes a GUI for us üòè
[00:33:27] <FromDiscord> <evoalg> In reply to @retkid "is there a prexisting": not something like this? https://play.nim-lang.org/#ix=3J4o
[00:33:53] <FromDiscord> <retkid> i wrote the function
[00:33:58] <FromDiscord> <retkid> but now i dont need the function
[00:34:03] <FromDiscord> <retkid> so im upset i spent time writing
[00:34:03] <FromDiscord> <evoalg> lol
[00:34:04] <FromDiscord> <retkid> (edit) "so im upset i spent time writing ... " 03added "it"
[00:34:56] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[01:22:03] <FromDiscord> <retkid> In reply to @evoalg "not something like this?": ok i needed it again and you are a sugar god thank you
[01:22:09] <FromDiscord> <retkid> i should really learn the functional stuff there
[01:27:18] <FromDiscord> <Forest> What's a good library for Nim that has support for UDP and TCP sockets at the same time? I'd also wanna be able to use it asynchronously if possible
[01:27:49] <FromDiscord> <Forest> I'd preferably want a simple API to do it too
[01:28:04] <FromDiscord> <Forest> If this is too much to ask just lmk and maybe suggest anything else? Thanks in advance aha
[01:28:10] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/asyncnet.html ?
[01:29:04] <FromDiscord> <Forest> Oh i didn't realize nim had an async net module, i thought it was only synchronous lol, thanks
[01:29:25] <FromDiscord> <Elegantbeef> No problem
[01:32:21] <NimEventer> New post on r/nim by richardd08: Which dataframe library to use?, see https://reddit.com/r/nim/comments/rlpcdp/which_dataframe_library_to_use/
[01:48:56] <FromDiscord> <Sabena Sema> does the stdlib expose alloca?
[01:49:59] <FromDiscord> <treeform> Hey, I finished a library to parse csv files and would like for some one to proof-read my readme: https://github.com/treeform/tabby and maybe get your other thoughts?
[01:51:14] <FromDiscord> <Sabena Sema> why must  the `ParseContext` be a ref-object?
[01:51:27] <FromDiscord> <treeform> In reply to @tbrekalo "I've got a question": You can try my csv lib: https://github.com/treeform/tabby
[01:51:54] <FromDiscord> <treeform> In reply to @Sabena Sema "why must  the": because it contains .data which is a big string
[01:52:04] <FromDiscord> <Sabena Sema> so?
[01:52:23] <FromDiscord> <treeform> if you pass a object with a big string it will get copied
[01:52:28] <FromDiscord> <treeform> making stuff really slow
[01:54:32] <FromDiscord> <treeform> I usually find ref objects to be faster, except in special cases.
[01:54:54] <FromDiscord> <Sabena Sema> but writing `ref object` prevents me from using it with value semantics. Idk, I generally think `ref object` is a mistake unless the object uses inheritance
[01:55:18] <FromDiscord> <treeform> Really I usually think object is a mistake? as I just see slowness.
[01:55:18] <FromDiscord> <Sabena Sema> like passing a value object to a function by both direct value and var won't copy it
[01:55:26] <FromDiscord> <Sabena Sema> it's only on assignments
[01:55:46] <FromDiscord> <treeform> Some times it will copy the object when passed by direct value
[01:56:06] <FromDiscord> <treeform> you need to do the {.bycopy.} or {.byref.} thing if you want to be sure
[01:56:08] <FromDiscord> <Sabena Sema> well, it _definately_ won't copy that string
[01:56:27] <FromDiscord> <Sabena Sema> and generally it'll only actually copy it if that would be faster
[01:56:39] <FromDiscord> <treeform> I disagree
[01:57:25] <FromDiscord> <treeform> object are generally slower because they love to copy things in surprising ways.
[01:57:51] <FromDiscord> <treeform> with reg object I am guaranteed to only copy a pointer
[01:57:56] <FromDiscord> <treeform> (edit) "reg" => "ref"
[01:58:39] <FromDiscord> <Sabena Sema> so, mark it bycopy
[01:58:41] <FromDiscord> <Sabena Sema> (edit) "bycopy" => "byref"
[01:58:53] <FromDiscord> <hmmm> treeformy can tabby handle the case of a csv with unspecified number of columns
[01:59:11] <FromDiscord> <hmmm> I mean different csv can have different col
[01:59:25] <FromDiscord> <treeform> In reply to @hmmm "treeformy can tabby handle": What do you mean? I think no.
[01:59:38] <FromDiscord> <treeform> Because you can't have a nim object with unspecified number of columns.
[01:59:42] <FromDiscord> <Sabena Sema> that way you always get the pointer but don't generate garbage each time you use the type completely inside one stack frame
[01:59:45] <FromDiscord> <hmmm> csv a has 3 columns and csv b has 5 columns
[02:00:44] <FromDiscord> <treeform> In reply to @Sabena Sema "that way you always": It's a single object, what garbage, 1 thing? Its with object you get copying in your stack frame for no reason.
[02:01:08] <FromDiscord> <treeform> In reply to @hmmm "csv a has 3": What are the fields of csv a and csv b?
[02:01:24] <FromDiscord> <treeform> (edit) "fields" => "columns"
[02:02:17] <FromDiscord> <Sabena Sema> it's not so bad for ParseContext but for like a container (like the ones in bitty) if you use them in a loop it can generate really quite a decent amount of garbage that needs to get cleaned up
[02:02:28] <FromDiscord> <hmmm> csv b has 1 date and 1 text col more than csv a that had id date and text
[02:03:44] <FromDiscord> <Sabena Sema> esp considering that ParseContext has so many other allocations hanging off anyways
[02:03:51] <FromDiscord> <hmmm> I mean I might create 2 objects but I wanted to know for the general case, but indeed we can't have objects with unspecified fields
[02:03:56] <FromDiscord> <treeform> In reply to @hmmm "csv b has 1": You would create an row that has all fields, then it will read the header and populate only the fields you have.
[02:04:05] <FromDiscord> <treeform> (edit) "have." => "have in the csv."
[02:05:37] <FromDiscord> <hmmm> well generally this case is better served with seqs that can grow and normal csv parsers that consume and produce seqs of seqs
[02:05:37] <FromDiscord> <treeform> In reply to @Sabena Sema "it's not so bad": So this is about bitty not tabby? Can write a benchmark where non ref bitty is faster than ref bitty?
[02:05:49] <FromDiscord> <Sabena Sema> yeah, I think I'll have to do that
[02:05:55] <FromDiscord> <Sabena Sema> it's about both
[02:06:06] <FromDiscord> <treeform> bitty is much simpler to benchmark though
[02:06:12] <FromDiscord> <Sabena Sema> yes
[02:06:22] <FromDiscord> <hmmm> anyway is there a reson because or std csvparse doesn't come equipped with facilities to write the csv back to file?
[02:06:38] <FromDiscord> <hmmm> reason
[02:06:45] <FromDiscord> <hmmm> our
[02:07:03] <FromDiscord> <hmmm> jeesus my english please put me down with a desert eagle .50
[02:09:25] <FromDiscord> <Sabena Sema> For bitty I also kinda want the copying semantics that value types have, but perhaps that's just because I'm used to C and C++
[02:10:26] <FromDiscord> <treeform> In reply to @hmmm "csv b has 1": Some thing like this: https://gist.github.com/treeform/fe05e8ffb24a22a7a3ca92c804521cfd
[02:11:23] <FromDiscord> <hmmm> woa it can?
[02:11:34] <FromDiscord> <treeform> In reply to @Sabena Sema "yeah, I think I'll": I am simple ... show me the numbers?
[02:11:47] <FromDiscord> <hmmm> wait the first csv has 5 column all of the a + date and text more
[02:12:03] <FromDiscord> <treeform> what 5 columns?
[02:12:06] <FromDiscord> <hmmm> hehe\
[02:12:37] <FromDiscord> <hmmm> yes sorry I can't explain myself in english today apparently üò¶
[02:13:06] <FromDiscord> <hmmm> csv a is id date text and csb is id date text date text
[02:13:11] <FromDiscord> <Sabena Sema> In reply to @treeform "I am simple ...": yes, reasonable. I'll write a benchmark when I have time
[02:13:50] <FromDiscord> <treeform> In reply to @hmmm "wait the first csv": 5 columns: https://gist.github.com/treeform/fe05e8ffb24a22a7a3ca92c804521cfd
[02:14:16] <FromDiscord> <treeform> So csv b uses duplicate names?
[02:14:22] <FromDiscord> <treeform> ok
[02:14:25] <FromDiscord> <hmmm> this is pretty cool
[02:17:12] <FromDiscord> <treeform> Here is with duplicate names: https://gist.github.com/treeform/fe05e8ffb24a22a7a3ca92c804521cfd
[02:17:19] <FromDiscord> <treeform> @hmmm is this what you mean?
[02:17:43] <FromDiscord> <Sabena Sema> The other thing that types like BitArray2D do is generally use more cache, in a loop using BitArray2D you're going to load in the cache line containing the BitArray2D, then go and load the cache line containing `bits`, which is pretty likely to be a different cache line. I'll try and write a benchmark showing this, but it might look a bit contrived since I'll need to do "stuff" that evicts those lines later in the loop
[02:18:23] <FromDiscord> <hmmm> In reply to @treeform "<@!887269570765791243> is this what": yea, and if I pass the smaller csv it will work the same even without the missing fields right?
[02:18:39] <FromDiscord> <treeform> In reply to @Sabena Sema "The other thing that": We use 1d bit array in box, but again we only have 1 bit array for the duration of the whole program. So heap garbage is not an issue.
[02:18:46] <FromDiscord> <treeform> (edit) "box," => "boxy,"
[02:18:58] <FromDiscord> <treeform> In reply to @hmmm "yea, and if I": yes
[02:19:04] <FromDiscord> <Sabena Sema> yeah, if there's only one in the whole program it's fine
[02:19:30] <FromDiscord> <hmmm> In reply to @treeform "yes": üí™
[02:19:56] <FromDiscord> <Sabena Sema> but in a loop it's not, obviously in a simple loop you can just move the BitArray up before the loop starts, and replace it's content each iteration, but if the usage is in a function that gets called from somewhere in the loop things get more annoying
[02:20:39] <FromDiscord> <treeform> In reply to @hmmm "üí™": See here: https://gist.github.com/treeform/fe05e8ffb24a22a7a3ca92c804521cfd
[02:21:54] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:22:02] <FromDiscord> <hmmm> 1 object 2 csvs, looks gud, I'll install tabby and tell you if it works for me in this form
[02:22:22] <FromDiscord> <Sabena Sema> this is a bigger problem for like, vector/linalg libraries (and I see vmath does indeed use value types)
[02:22:31] <FromDiscord> <Sabena Sema> but still, I'll write a benchmark later
[02:22:37] <FromDiscord> <Sabena Sema> it'll be fun
[02:22:37] <FromDiscord> <hmmm> oh noes it's not on nimble üò¶
[02:25:41] <FromDiscord> <treeform> i'll add it to nimble soon
[02:25:48] <FromDiscord> <hmmm> üëç
[02:27:11] <FromDiscord> <treeform> In reply to @Sabena Sema "this is a bigger": there are cases were objects make sense, like vmath is a prefect example.
[02:28:18] <FromDiscord> <treeform> But like here for example: https://github.com/nim-lang/Nim/blob/devel/lib/pure/parsesql.nim#L43
[02:28:31] <FromDiscord> <treeform> I made everything run like 5x faster by switch to a ref object for token.
[02:29:19] <FromDiscord> <Sabena Sema> my kinda general problem with `ref object` is that unlike with normal object semantics I can't decide if I want reference or value semantics, if I want value I'm just outta luck and need to modify the source code
[02:29:21] <FromDiscord> <treeform> because plain object creates so many memory allocations.
[02:29:41] <FromDiscord> <treeform> In reply to @Sabena Sema "my kinda general problem": yeah but usually is a ref for a reason
[02:29:46] <FromDiscord> <treeform> because plain object is too slow
[02:30:19] <FromDiscord> <Sabena Sema> where were the copies in parsesql actually coming from?
[02:30:51] <FromDiscord> <treeform> i don't remember its been like a year ago
[02:30:58] <FromDiscord> <treeform> I have sense have written my own SQL parser.
[02:35:53] <FromDiscord> <TurtleP> Hm.. what is the best way to compare two file `stat` modification times? I have the code in place, but unlike python, I can't do `first.st_mtime > second.st_mtime` since there's both seconds and nanoseconds in `Time` objects
[02:37:30] <FromDiscord> <Elegantbeef> Do you know there is `getLastModificationTime` in os?
[02:37:57] <FromDiscord> <TurtleP> oh, there is?
[02:38:00] <FromDiscord> <Elegantbeef> With it you could do `first < second`
[02:38:11] <FromDiscord> <TurtleP> huh, ok, awesome
[02:38:20] <FromDiscord> <Elegantbeef> Or i guess `first > second`
[02:38:37] <FromDiscord> <Elegantbeef> Just `import std/[os, times]` and you're golden üôÇ
[02:38:51] <FromDiscord> <TurtleP> hmm this still returns a `Time` object
[02:39:03] <FromDiscord> <TurtleP>  https://media.discordapp.net/attachments/371759389889003532/922989069372370994/unknown.png
[02:39:11] <FromDiscord> <Elegantbeef> what is `second` in your example?
[02:39:22] <FromDiscord> <TurtleP> they are both the last modification times for files
[02:39:37] <FromDiscord> <Elegantbeef> Dont you want to see if one was modified more recently?
[02:39:48] <FromDiscord> <TurtleP> yes
[02:40:02] <FromDiscord> <Elegantbeef> So then use that for both and then `first > second` will work
[02:40:13] <FromDiscord> <Elegantbeef> There is a `>` operator for that
[02:40:13] <FromDiscord> <TurtleP>  https://media.discordapp.net/attachments/371759389889003532/922989362306752592/unknown.png
[02:40:29] <FromDiscord> <Elegantbeef> Do you have `times` imported?
[02:40:36] <FromDiscord> <TurtleP> hm, no
[02:40:44] <FromDiscord> <Elegantbeef> import it
[02:40:46] <FromDiscord> <TurtleP> ah that fixes it
[02:40:48] <FromDiscord> <Solitude> In reply to @treeform "I made everything run": im sure you could achieve the same speedup with {.byref.}, without changing copying semantics
[02:40:51] <FromDiscord> <TurtleP> kind of weird, but alright
[02:40:59] <FromDiscord> <Elegantbeef> Nim doesnt bring in all procedures with types since they're all freestanding
[02:41:08] <FromDiscord> <Elegantbeef> There is no way to say "Wherever you go you want this"
[02:41:39] <FromDiscord> <Elegantbeef> There is an RFC for "type bound operations" if i recall correctly, but it is what it is presently
[02:42:03] <FromDiscord> <Elegantbeef> I'm sure sabena will give a long winded reason why they should exist üòõ
[02:42:23] <FromDiscord> <Sabena Sema> In reply to @Solitude "im sure you could": I bet the problem was not actually in parameter passing, since var paramters are always byref and default "no address" parameters should not be copying the inner string no matter what
[02:42:26] <FromDiscord> <Sabena Sema> if they are it's kinda a bug
[02:42:28] <FromDiscord> <demotomohiro> There is `fileNewer` proc in os module.‚Üµhttps://nim-lang.org/docs/os.html#fileNewer%2Cstring%2Cstring
[02:42:42] <FromDiscord> <Elegantbeef> Ah there you go dont even need times
[02:42:55] <FromDiscord> <Elegantbeef> Thanks demo for making me redundant
[02:46:22] <FromDiscord> <demotomohiro> Elegantbeef, you teached important Nim features!
[02:47:49] <FromDiscord> <Solitude> In reply to @Sabena Sema "I bet the problem": no, the problem is that small objects containing strings that dont qualify for implicit reference passing are copied fully, including new string allocation
[02:49:41] <FromDiscord> <Sabena Sema> that seems like a bug to me
[02:50:26] <FromDiscord> <Solitude> maybe, i bet araq would say that its by design
[02:51:04] <FromDiscord> <Sabena Sema> I mean it might make the internals simpler, since assignment and the parameter copy would be the same
[02:51:51] <FromDiscord> <Sabena Sema> oh
[02:52:35] <FromDiscord> <Sabena Sema> no
[02:52:40] <FromDiscord> <Sabena Sema> all the subobjects also have no address
[02:52:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:53:10] <FromDiscord> <Sabena Sema> so you can't mutate the inner strings or take their address
[02:53:14] *** Joins: Colt (~Colt@user/colt)
[02:53:16] <FromDiscord> <Sabena Sema> so why copy them ever?
[02:53:37] <FromDiscord> <Solitude> you should ask that in #internals
[02:55:08] <FromDiscord> <TurtleP> ah thank you both @demotomohiro and @ElegantBeef!
[02:57:35] <FromDiscord> <TryAngle> the std/xmltree module causes huge bloat of whitespaces... is there a way to stip them away?
[02:57:43] <FromDiscord> <TryAngle> (edit) "causes" => "has a"
[02:59:24] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:59:50] *** Joins: Colt (~Colt@user/colt)
[03:12:38] <FromDiscord> <treeform> In reply to @Solitude "im sure you could": Do you have benchmarks to prove that?
[03:14:10] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J4Q
[03:14:29] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3J4Q" => "https://paste.rs/PoY"
[03:24:37] *** Quits: lumo_e (~enrico@93-40-14-151.ip36.fastwebnet.it) (Ping timeout: 240 seconds)
[03:31:55] <FromDiscord> <Forest> Is it possible to use asynchronous code and multiprocessing at once? Would it be better to stick to one or would utilising both be a good idea? I'm working on a (small) implementation of an MC server that should be as fast as possible
[03:35:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[03:58:00] <FromDiscord> <Elegantbeef> You can use async with multithreading though it might make it more annoying to debug
[04:12:35] <FromDiscord> <IsaacPaul> damn std/wrapnils is .... meh
[04:13:25] <FromDiscord> <Elegantbeef> What's meh about it?
[04:14:02] <FromDiscord> <Forest> Ah okay, thanks!
[04:18:44] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3J53
[04:19:54] <FromDiscord> <Elegantbeef> I mean the default should be an optional
[04:20:08] <FromDiscord> <Elegantbeef> But i dont really see the issue with the syntax
[04:20:32] <FromDiscord> <Elegantbeef> I also dont use references much so i'm the wrong person üòÄ
[04:22:20] <FromDiscord> <IsaacPaul> from the docs it seems like its not an optional unless assigned to one.. I would rather it just not work lmbo
[04:22:45] <FromDiscord> <Elegantbeef> I more mean "It should've been default to begin with"
[04:22:59] <FromDiscord> <Elegantbeef> there is the `??` variant which returns an optional
[04:24:54] <FromDiscord> <IsaacPaul> yea that variant for my use case.. still not happy with syntax lol like I said meh
[04:25:00] <FromDiscord> <IsaacPaul> works
[04:26:45] <FromDiscord> <Elegantbeef> Suppose it could be done using `[?]` since we cannot do prefix üòÄ
[04:26:59] <FromDiscord> <Elegantbeef> Postifx i mean
[04:29:33] <FromDiscord> <Elegantbeef> Perhaps not
[04:30:50] <FromDiscord> <IsaacPaul> hmm it doesn't seem to work for optionally calling functions. Perhaps I'm just misinterpreting it's usecase
[04:36:28] <FromDiscord> <Elegantbeef> `??` returns an optional over the entire tree so if any is nil it returns none else true
[04:37:20] <FromDiscord> <Elegantbeef> I'm abusing unicode to achieve the funny impl https://play.nim-lang.org/#ix=3J5c
[04:43:20] <FromDiscord> <IsaacPaul> hmm
[04:43:40] <FromDiscord> <IsaacPaul> This basically tells me I know nothing about macros lol
[04:44:27] <FromDiscord> <Elegantbeef> Lol
[04:44:37] <FromDiscord> <Elegantbeef> There isnt any reason to use a macro here
[04:45:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J5d
[04:45:17] <FromDiscord> <Elegantbeef> Anyway it's a silly toy really, i was just wanting to see if there was a way to get `[?]` to work
[04:45:35] <FromDiscord> <Elegantbeef> But since `?` is an operator you cannot use it inside `[]` or have a type named it
[04:46:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J5e
[04:47:39] <FromDiscord> <IsaacPaul> honestly if I can get `a.child?.child?.child` to work or `a.child?.childProc()` I'd be happy
[04:48:16] <FromDiscord> <Elegantbeef> Nim doesnt have postfix operators so sadly that cannot
[04:48:25] <FromDiscord> <Elegantbeef> Which is why `?` is prefix
[04:49:37] <FromDiscord> <Elegantbeef> The only postfix operators in nim are `[]``{}` and `` and the last can only be used in exporting
[04:50:18] <FromDiscord> <IsaacPaul> ah so that's why your stuff works
[04:50:40] <FromDiscord> <Elegantbeef> Yep
[04:52:42] <FromDiscord> <Elegantbeef> Oh actually
[04:56:48] <FromDiscord> <Elegantbeef> Thought maybe `?.` might be usable as you want but i think not
[04:59:04] <FromDiscord> <IsaacPaul> I'm playing around with your example.. just to see
[04:59:27] <FromDiscord> <Elegantbeef> It's very much a toy so there be dragons üòõ
[05:05:00] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:20:48] <FromDiscord> <Elegantbeef> So it seems that type of syntax is possible https://play.nim-lang.org/#ix=3J5o so if you want to make wrap nils like the others it's possible it seems
[05:35:27] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3J5s
[05:35:44] <FromDiscord> <TurtleP> (edit) "https://play.nim-lang.org/#ix=3J5s" => "https://play.nim-lang.org/#ix=3J5t"
[05:36:01] <FromDiscord> <TurtleP> (edit) "https://play.nim-lang.org/#ix=3J5t" => "https://play.nim-lang.org/#ix=3J5u"
[05:45:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:29:29] <FromDiscord> <Leonardo da Vinci> Hello!!
[06:32:02] <FromDiscord> <Elegantbeef> Hello
[06:33:22] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Hello": Are you human?
[06:34:25] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3J5z
[06:34:36] <FromDiscord> <Elegantbeef> I'm only human on days that end with Y
[06:35:22] <FromDiscord> <Elegantbeef> try `[modify.addr]`
[06:36:05] <FromDiscord> <Elegantbeef> What's the entire error?
[06:36:08] <FromDiscord> <that_dude> same error
[06:36:23] <FromDiscord> <Elegantbeef> Oh did you not `import std/tables`?
[06:36:49] <FromDiscord> <Elegantbeef> If the module calling this doesnt have `tables` imported it'll error
[06:36:59] <FromDiscord> <that_dude> I do have tables imported
[06:37:08] <FromDiscord> <Elegantbeef> Full error then
[06:37:10] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3J5A
[06:37:15] <FromDiscord> <Elegantbeef> Yea it's a tables import issue
[06:37:28] <FromDiscord> <Elegantbeef> inside this module do you have `std/tables` imported?
[06:37:31] <FromDiscord> <that_dude> Yeah
[06:37:31] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:37:39] <FromDiscord> <Elegantbeef> The one calling or the one with the macro?
[06:37:48] <FromDiscord> <that_dude> The one with the macro
[06:37:58] <FromDiscord> <Elegantbeef> do `export tables` in that module
[06:38:15] <FromDiscord> <that_dude> where should I put it?
[06:38:31] <FromDiscord> <Elegantbeef> Anywhere after you import tables
[06:38:31] <FromDiscord> <that_dude> right under the import?
[06:38:39] <FromDiscord> <Elegantbeef> That's preferable
[06:39:06] <FromDiscord> <Elegantbeef> The issue is that you dont have `[]` in the module that imports this so it doesnt know how to do `table[key]`
[06:39:27] <FromDiscord> <that_dude> I think I understand
[06:39:47] <FromDiscord> <that_dude> could this also have been fixed if I imported tables in the other module?
[06:39:52] <FromDiscord> <Elegantbeef> Yes
[06:40:00] <FromDiscord> <Elegantbeef> Afterall that's what you're doing
[06:41:24] *** Joins: stosby (~sicrs@118.99.110.156)
[06:41:25] <FromDiscord> <that_dude> Cool.
[06:41:28] <FromDiscord> <that_dude> Will prob be back
[06:41:37] <FromDiscord> <Elegantbeef> This is the second import issue today
[06:41:49] <FromDiscord> <Elegantbeef> Seems to be common recently
[06:42:38] <FromDiscord> <that_dude> Well from what I could understand, the error said that the method to get the value doesn't exist, but I had already done the correct import
[06:43:15] *** Quits: stosby (~sicrs@118.99.110.156) (Read error: Connection reset by peer)
[06:43:20] <FromDiscord> <that_dude> I'm assuming it's because its a macro specific thing that tried to put code that required tables in the file that doesn't have them
[06:43:20] <FromDiscord> <Elegantbeef> The issue is cause of where the code is emitted
[06:43:39] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "I'm only human on": I don't understand Mr bot
[06:43:46] <FromDiscord> <Elegantbeef> I'm not a robot
[06:43:53] <FromDiscord> <Elegantbeef> I'm a human using the matrix bridge
[06:44:02] <FromDiscord> <impbox [ftsf]> that's just what a robot would say
[06:44:14] <FromDiscord> <that_dude> He's a robot, but a damn good one
[06:44:17] <FromDiscord> <Elegantbeef> Impbox more like shitbox amirite!
[06:44:24] <FromDiscord> <impbox [ftsf]> better than human
[06:44:39] <FromDiscord> <impbox [ftsf]> rude bot!
[06:44:48] <FromDiscord> <Elegantbeef> Bad bot bad?
[06:44:54] <FromDiscord> <Rika> unplug him!
[06:46:09] <FromDiscord> <Elegantbeef> I have internal batteries something about mitochondria being the powerhouse of the cell
[06:46:37] <FromDiscord> <Rika> remove his mitochondria!
[06:47:10] <FromDiscord> <Elegantbeef> We're going to be here for a while
[06:47:45] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J5D
[06:48:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J5E
[06:48:33] <FromDiscord> <Elegantbeef> Though that allocates so not ideal
[06:48:55] <FromDiscord> <Rika> i mean its the smae
[06:48:56] <FromDiscord> <Rika> same
[06:49:13] <FromDiscord> <Rika> its close enough i mean
[06:49:28] <FromDiscord> <Elegantbeef> Yea if you care about allocations then you'll need your own
[06:49:29] <FromDiscord> <TryAngle> does it also allocates in use with arrays?
[06:49:30] <FromDiscord> <Rika> if you want an iterator beef is probably typing one up rioght now
[06:49:39] <FromDiscord> <Elegantbeef> Lol
[06:49:45] <FromDiscord> <Elegantbeef> I could be but i wasnt at the moment
[06:49:49] <FromDiscord> <Elegantbeef> So many libraries offer it i reason
[06:49:54] <FromDiscord> <Rika> never know with you you code monkey
[06:50:01] <FromDiscord> <Rika> smh
[06:50:36] <FromDiscord> <Elegantbeef> Yea i do write a lot of stupid code
[06:50:41] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J5F
[06:50:43] <FromDiscord> <Elegantbeef> And then there's the code i share here
[06:50:45] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Yea i do write": don't we all üòî
[06:51:05] <FromDiscord> <Elegantbeef> Ugh i'm trying herbsluftwm now and oh boy is it an experience
[06:51:05] <FromDiscord> <Rika> yeah given that attitude
[06:51:14] <FromDiscord> <Rika> you're trying what
[06:51:31] <FromDiscord> <Elegantbeef> A dynamic tiling window manager üòõ
[06:51:32] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Ugh i'm trying herbsluftwm": oh, what is it like, I want to switch to that exact wm when I finally build my new pc next month
[06:51:40] <FromDiscord> <TryAngle> heard only good things
[06:51:47] <FromDiscord> <Elegantbeef> It's pretty nifty so far i like some of the things it has
[06:51:57] <FromDiscord> <Elegantbeef> I3wm always pissed me off with it's static tiling
[06:52:03] <FromDiscord> <TryAngle> I had bspwm before but had some issues
[06:52:17] <FromDiscord> <Elegantbeef> Bspwm takes too much setup from my brief toying
[06:52:27] <FromDiscord> <Rika> me, still using a floater:
[06:52:27] <FromDiscord> <Elegantbeef> Also following in pmunch's path using xlunch a s my launcher
[06:52:39] <FromDiscord> <Elegantbeef> Herbs has some cool floating functionality
[06:52:50] <FromDiscord> <Rika> ~~though to be fair i am blind as fuck so i need to make everything fullscreen~~
[06:52:53] <FromDiscord> <TryAngle> I saw a lot of herbstluft on r/unixporn
[06:52:55] <FromDiscord> <Elegantbeef> You can move floating windows to corners with the keyboard and grow them out
[06:53:14] <FromDiscord> <Rika> im not good at sizing things with a keyboard, best i can do is just swapping things
[06:53:31] <FromDiscord> <Rika> i really rather the precision of a mouse when i resize things
[06:54:54] <FromDiscord> <Elegantbeef> Ah i dont often float but when i do i want it out of my way
[06:55:25] <FromDiscord> <Rosen> herbstluftwm is so cool!
[06:55:38] <FromDiscord> <Rosen> The built in hooks shit was fun to use to build a custom bar using lemonbar
[06:56:35] <FromDiscord> <Elegantbeef> I still need to theme mine and setup a better status bar, but this is what i'm talking about rika https://streamable.com/wanhge
[06:57:01] <FromDiscord> <TryAngle> In reply to @Elegantbeef "I still need to": do u use a compositor too?
[06:57:04] <FromDiscord> <Rika> oh interesting, logarithmic sizing
[06:57:15] <FromDiscord> <Elegantbeef> Using picom yes
[06:57:20] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:57:30] <FromDiscord> <Elegantbeef> I like my transparent windows
[06:57:35] <FromDiscord> <TryAngle> nvidia gpu?
[06:57:41] <FromDiscord> <Elegantbeef> Amd
[06:57:45] <FromDiscord> <TryAngle> ah I see
[06:58:12] <FromDiscord> <Elegantbeef> There are some weird things like the way tags work
[06:58:22] <FromDiscord> <Elegantbeef> I havent figured out how to open a window where my mouse is
[06:58:34] <FromDiscord> <Elegantbeef> On an empty tag i should say
[07:03:05] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J5H
[07:03:30] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3J5H" => "https://play.nim-lang.org/#ix=3J5I"
[07:03:35] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3J5I" => "https://play.nim-lang.org/#ix=3J5J"
[07:09:57] <FromDiscord> <TryAngle> nvm fixed it forgot a decimal point...
[07:10:38] <FromDiscord> <TryAngle> wait it doesn't fix it ü§î
[07:10:54] <FromDiscord> <Rika> i'd love to switch but i like fancy animations so xd dont think im moving away from kde any time soon
[07:11:03] <FromDiscord> <Rika> what issue are we talking about
[07:11:59] <FromDiscord> <TryAngle> I deleted bc I thought I fixed it but I didn't lol
[07:13:03] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/y6B
[07:13:25] <FromDiscord> <Rika> `for (neuronWeights, neuronBias) in zip(weights, biases):`
[07:13:27] <FromDiscord> <Rika> how about now
[07:13:32] <FromDiscord> <Rika> same with the other zip
[07:13:48] <FromDiscord> <Elegantbeef> just do `zip(weight, biases).pairs`
[07:14:30] <FromDiscord> <TryAngle> ah I see thanks u two both ways work üëç
[07:17:02] <FromDiscord> <Elegantbeef> Actually pairs might not work
[07:17:13] <FromDiscord> <Elegantbeef> Since that's what it implicitly called
[07:17:41] <FromDiscord> <TryAngle> how do I run a nim project in release?‚Üµ`nimble run -release`‚Üµ?
[07:17:55] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Since that's what it": it gave no syntax error highlight at least
[07:17:55] <FromDiscord> <Rika> i dont know how nimble run works
[07:18:01] <FromDiscord> <Rika> try -d:release nonetheless
[07:18:26] <FromDiscord> <Rika> In reply to @TryAngle "it gave no syntax": well because its a logic error, which isnt usually caught üòõ
[07:18:32] <FromDiscord> <TryAngle> how do I know if it works ?xd‚Üµuse a when one time?
[07:18:43] <FromDiscord> <Rika> In reply to @TryAngle "how do I know": it should say that its a release build
[07:19:09] <FromDiscord> <TryAngle>  https://media.discordapp.net/attachments/371759389889003532/923059556593053756/unknown.png
[07:19:19] <FromDiscord> <Rika> i dont know
[07:19:23] <FromDiscord> <Rika> i dont build with nimble
[07:20:45] <FromDiscord> <TryAngle> ü§î
[07:21:22] <FromDiscord> <Elegantbeef> `nimble run` makes a release
[07:22:03] <FromDiscord> <TryAngle> ah wow didn't expect that bc compile time is so fast o_O
[07:22:43] <FromDiscord> <Elegantbeef> Well if you want the full compile time do `nimble run -f`
[07:22:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:23:25] <FromDiscord> <Rika> would be funny if its still considered fast to them
[07:24:07] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Well if you want": that didnt' do anything o.o
[07:26:45] <FromDiscord> <Elegantbeef> Should've force a recompilation, so maybe nimble doesnt take all commands
[07:33:05] <FromDiscord> <TryAngle> well its a small programm and I'm used to rust
[07:33:12] <FromDiscord> <TryAngle> (edit) "well its a small programm and I'm used to rust ... " 03added "compile times"
[07:49:27] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:52:16] <FromDiscord> <Roundlay> Trying to write a wrapper for some stuff in a TypeScript API. Anyone know of any examples demonstrating how to do this? Specifically wrapping classes?
[07:54:44] <FromDiscord> <TryAngle> In reply to @Roundlay "Trying to write a": https://github.com/saem/vscode-nim/tree/main/src/platform‚Üµnot sure if this applies to your case but the vscode-nim plugin from saem wrapped parts of vscode api
[07:56:46] <FromDiscord> <Roundlay> In reply to @TryAngle "https://github.com/saem/vscode-nim/tree/main/src/pl": Thank you very much
[07:56:48] <FromDiscord> <Roundlay> Looks good
[07:59:49] <FromDiscord> <TryAngle> how do I export a module that the module has to be called explicitly?
[08:00:15] <FromDiscord> <Elegantbeef> Uhh what?
[08:00:24] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J5N
[08:00:38] <FromDiscord> <TryAngle> because if I export A, I export all contents of A
[08:00:50] <FromDiscord> <Elegantbeef> You can export selective parts
[08:03:12] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3J5O
[08:03:24] <FromDiscord> <TryAngle> something like that
[08:03:44] <FromDiscord> <TryAngle> so I can ignore module3 in some parts, but import it in other modules for example
[08:04:10] <FromDiscord> <Elegantbeef> make library import all modules then just make the user do `library/[module1, module2]` for selective
[08:04:47] <FromDiscord> <TryAngle> ah so if I don't export I can still import?
[08:06:32] <FromDiscord> <TryAngle> hmm doesn't work ü§î
[08:06:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J5P
[08:07:05] <FromDiscord> <Elegantbeef> Then for importing selectively you just do `import library/[module1, module2]`
[08:08:23] <FromDiscord> <Elegantbeef> Hopefully i understood the question
[08:10:22] <FromDiscord> <Elegantbeef> Or are you after forcing namespaces?
[08:12:23] <FromDiscord> <Elegantbeef> You cannot fake import paths so you just need the package structure to match your import want, hopefully i dont drone on about non-issues üòÄ
[08:13:33] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Or are you after": kinda
[08:13:47] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Then for importing selectively": hmmm I still get file not found error ü§î
[08:15:01] <FromDiscord> <Elegantbeef> Is this on a repo?
[08:16:14] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Is this on a": not yet but I can quickly make it one
[08:16:39] <FromDiscord> <Elegantbeef> Also what type of API are you after when using this, cause i'm lost
[08:29:27] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Also what type of": well basically I want to make a personal science library where I can implement things I learned in university or that interest me personally so I can reuse them  etc.‚ÜµFor example when I add an alignment algorithm under the module library/bio, I'd like to import it via library/bio‚Üµbecause in that library I also implement concepts and procs for abstract algebra under library/algebra which
[08:31:29] <FromDiscord> <Elegantbeef> I feel like that's what the `from X import Y` is for
[08:31:44] <FromDiscord> <Elegantbeef> Export everything you want and if you want selective imports, import selectively
[08:31:54] <FromDiscord> <Elegantbeef> Or you can make a file that only exports what you want as an intermediate
[08:32:08] <FromDiscord> <TryAngle> but wouldn't that require me to import every type and function that one algorithm under bio uses?
[08:32:17] <FromDiscord> <TryAngle> (edit) "uses?" => "uses manually?"
[08:32:37] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Or you can make": that sounds good
[08:33:14] <FromDiscord> <TryAngle> In reply to @Elegantbeef "What i'd suggest is": but the weird thing is, I tried that here but I get an error that library/module1 does not exist
[08:33:24] <FromDiscord> <TryAngle> does it not work for tests?
[08:33:58] <FromDiscord> <Elegantbeef> It's hard to say what's wrong
[08:34:15] <FromDiscord> <Elegantbeef> I can only imagine your package isnt installed or your tests dont move to that path
[08:35:19] <FromDiscord> <TryAngle> hmmm I try from other nimble project then
[08:35:28] <FromDiscord> <TryAngle> (edit) "hmmm I try ... from" 03added "that"
[08:35:35] <FromDiscord> <TryAngle> (edit) "hmmm I try that from other nimble project then ... " 03added "instead of the tests folder"
[08:36:11] <FromDiscord> <TryAngle> but hahha anaother thing I don't know and couldn't find ü•≤ ‚Üµwhat would  be the way to import a local nimble project into another nimble project?
[08:36:14] <FromDiscord> <Elegantbeef> does your test folder have a `config.nims`?
[08:37:03] <FromDiscord> <TryAngle> In reply to @Elegantbeef "does your test folder": ....
[08:37:04] <FromDiscord> <Elegantbeef> I generally just do `nimble develop` in the nimble library I want then just use it as it's there
[08:37:04] <FromDiscord> <TryAngle> ...
[08:37:06] <FromDiscord> <TryAngle> ....
[08:37:08] <FromDiscord> <TryAngle> that was the issue
[08:37:12] <FromDiscord> <TryAngle> the config.nims
[08:37:14] <FromDiscord> <TryAngle> XD
[08:37:41] <FromDiscord> <TryAngle> so it was correct all along üòÖ
[08:37:42] <FromDiscord> <Elegantbeef> `nimble develop` symlinks a package in your installed packages to that folder
[08:37:46] <FromDiscord> <Elegantbeef> Indeed
[08:41:29] <FromDiscord> <TryAngle> thanks for helping me once again üëç
[08:41:37] <FromDiscord> <Elegantbeef> No problem
[08:58:59] <FromDiscord> <Sabena Sema> why is there no anon inline object defn syntax (like for tuples)
[08:59:06] <FromDiscord> <Sabena Sema> does having that break something?
[08:59:30] <FromDiscord> <Elegantbeef> You can define them in any scope so it's not a big deal
[08:59:33] <FromDiscord> <Elegantbeef> Or atleast most scopes
[08:59:42] <FromDiscord> <IsaacPaul> In reply to @Elegantbeef "It's very much a": I got something semi-semi-working https://play.nim-lang.org/#ix=3J5Z though garbage collection crashes on the cpp backend.. I would work on it more but I gotta sleep. ‚úåÔ∏è
[08:59:44] <FromDiscord> <Sabena Sema> well, they need a name
[09:00:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J60
[09:00:23] <FromDiscord> <Sabena Sema> and you cant define them inside another object defn, or as a return type
[09:00:48] <FromDiscord> <Sabena Sema> ofc since they dint structurally convert doing them as a return type would be‚Ä¶ not so useful
[09:00:55] <FromDiscord> <Sabena Sema> (edit) "dint" => "dont"
[09:01:51] <FromDiscord> <Elegantbeef> Leorize's union does anonymous objects similar to this so if interested could look there
[09:02:27] <FromDiscord> <Sabena Sema> link?
[09:04:03] <FromDiscord> <Elegantbeef> https://github.com/alaviss/union
[09:04:28] <FromDiscord> <Elegantbeef> It uses a template/macro to generate and reference the type
[09:08:05] <FromDiscord> <ajusa> anyone here used https://github.com/jart/cosmopolitan/?
[09:08:46] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3J62
[09:13:00] <FromDiscord> <Elegantbeef> @IsaacPaul\: dont forget to pass the node to `error` to be even more helpful https://play.nim-lang.org/#ix=3J64
[09:15:03] <FromDiscord> <IsaacPaul> Ah I didn‚Äôt know that
[09:16:26] <FromDiscord> <Elegantbeef> It gives the lineinfo of the nimnode to things like nimcheck
[09:16:27] <FromDiscord> <Elegantbeef> So it's great for things like codelens with vscode
[09:20:43] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[09:24:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[09:30:25] <NimEventer> New Nimble package! mcu_utils - Utilities and simple helpers for programming with Nim on embedded MCU devices, see https://github.com/EmbeddedNim/mcu_utils
[09:37:18] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3J69
[09:37:25] <FromDiscord> <that_dude> (edit) "https://play.nim-lang.org/#ix=3J69" => "https://play.nim-lang.org/#ix=3J6a"
[09:37:32] <FromDiscord> <that_dude> (edit) 
[09:37:41] <FromDiscord> <Elegantbeef> `pointer` is a typeless pointer
[09:37:50] <FromDiscord> <Elegantbeef> You need to decay that pointer for that array
[09:38:12] <FromDiscord> <that_dude> How would I do that?
[09:38:21] <FromDiscord> <Rika> Cast
[09:38:22] <FromDiscord> <Sabena Sema> you can cast it
[09:38:32] <FromDiscord> <that_dude> but to what? just pointer?
[09:38:36] <FromDiscord> <Sabena Sema> yeah
[09:38:55] <FromDiscord> <that_dude> something like `cast[pointer](var)`
[09:38:57] <FromDiscord> <that_dude> (edit) "`cast[pointer](var)`" => "`cast[pointer](var)`?"
[09:39:13] <FromDiscord> <Sabena Sema> yep
[09:39:19] <FromDiscord> <that_dude> Cool
[09:39:19] <FromDiscord> <Sabena Sema> `ptr` alone is a typeclass!
[09:39:29] <FromDiscord> <Sabena Sema> kinda confusing, indeed
[09:41:03] <FromDiscord> <Elegantbeef> You an just do `pointer yourPtrT`
[09:41:23] <FromDiscord> <Sabena Sema> as a dot style cast?
[09:41:38] <FromDiscord> <Elegantbeef> Yes
[09:41:40] <FromDiscord> <Sabena Sema> is that more restrictive
[09:41:45] <FromDiscord> <Elegantbeef> Cleaner
[09:41:54] <FromDiscord> <Sabena Sema> definitely
[09:44:24] <FromDiscord> <that_dude> Why (ast wise) is there a distinction between call, command, infix, and the sort?
[09:44:44] <FromDiscord> <that_dude> Just curious
[09:45:00] <FromDiscord> <that_dude> They seem to be formatted and behave the same
[09:47:09] <FromDiscord> <Rika> Same semantics different syntax
[09:47:19] <FromDiscord> <Rika> Abstract syntax tree
[09:48:02] <FromDiscord> <Elegantbeef> The difference is mostly just at a parser level
[09:48:10] <FromDiscord> <that_dude> I guess, but I though it goes user code -> ast -> compiler. And the compiler doesn't really need to make a distinction if they behave the same
[09:48:34] <FromDiscord> <that_dude> I guess it doesn't matter as long as it works
[09:48:52] <FromDiscord> <Elegantbeef> it's like expressions vs statements
[09:49:31] <FromDiscord> <Sabena Sema> yeah, and when codegen happens I'm sure each node calls the same codegen function
[09:49:43] <FromDiscord> <Sabena Sema> (edit) "calls" => "causes" | "causesthe same codegen function ... " 03added "to be called"
[09:49:49] <FromDiscord> <Elegantbeef> I can confirm
[09:50:45] <FromDiscord> <Sabena Sema> there are some differences between the syntaxes too, you can overload `.`
[09:51:02] <FromDiscord> <Sabena Sema> and do dirty, dirty syntax dependent things with trmacros
[09:51:19] <FromDiscord> <Elegantbeef> Hey dont call it dirty!
[09:51:29] <FromDiscord> <Sabena Sema> they are useful
[09:53:23] <FromDiscord> <Sabena Sema> Plutonium is useful too, but I don't wanna handle it day-to-day
[09:53:38] <FromDiscord> <Elegantbeef> Let's be honest no one is really using TRM
[09:53:41] <FromDiscord> <Elegantbeef> As cool as they're
[09:54:11] <FromDiscord> <Sabena Sema> They are just soooo dangerous
[09:54:33] <FromDiscord> <Sabena Sema> and a good indication a feature might best live in the compiler itself üòÑ
[09:54:34] <FromDiscord> <that_dude> Lol "With great power comes great responibility"
[09:54:37] <FromDiscord> <Elegantbeef> And they're going to get ripped out in Nim2.0 apparently
[09:55:11] <FromDiscord> <that_dude> (edit) "responibility"" => "responsibility""
[10:04:30] <FromDiscord> <that_dude> What are the benefits to using `func` instead of `proc`? I get it's more limited by marking it with no side effects ie can't access variables outside of the parameters, but what does it gain in exchange for this?
[10:05:00] <FromDiscord> <Elegantbeef> Having an easier tested api, that you know doesnt rely on external data
[10:05:26] <FromDiscord> <Sabena Sema> in theory better optimization
[10:05:34] <FromDiscord> <Sabena Sema> but ... in theory
[10:05:59] <FromDiscord> <Sabena Sema> it'll cause a compile error if any of the called functions change to start messing with external data
[10:06:27] <FromDiscord> <that_dude> So to simplify procs to make them easier to think about/test. But not much else is gained right?
[10:07:03] <FromDiscord> <that_dude> fair enough
[10:10:18] <FromDiscord> <Elegantbeef> It's more "pure" and as the name implies functional
[10:13:39] <FromDiscord> <Yardanico> https://forums.swift.org/t/a-roadmap-for-improving-swift-performance-predictability-arc-improvements-and-ownership-control/54206 a lot of similar stuff to Nim :)
[10:14:19] <FromDiscord> <Yardanico> they changed to lexical lifetimes, added `move`, `consuming` for me looks like `sink`
[10:16:15] <FromDiscord> <Yardanico> and more stuff
[10:24:59] <FromDiscord> <impbox [ftsf]> In reply to @that_dude "So to simplify procs": nice thing about funcs is that you can be sure that caching the input->output is safe
[10:25:24] <FromDiscord> <impbox [ftsf]> same inputs will always give the same outputs
[10:25:49] <FromDiscord> <that_dude> I see
[10:26:14] <FromDiscord> <Yardanico> unless you have `var T` arguments in your func, but they're explicit so it's easy to see them
[10:26:33] <FromDiscord> <Yardanico> or some types that are `ref object`, but with `strictFuncs` nim also checks for deep immutability with refs
[10:27:08] <FromDiscord> <impbox [ftsf]> hmm yeah I guess that's not true for a ref type where what the object the ref points to might have changed between calls
[10:27:44] <FromDiscord> <Elegantbeef> Eh it's true with strict funcs
[10:28:09] <FromDiscord> <Elegantbeef> Cannot mutate any part of a reference that is passed in as immutable when strict funcs is on
[10:28:54] <FromDiscord> <impbox [ftsf]> no but it might have been mutated between calls
[10:29:24] <FromDiscord> <Elegantbeef> How does that change anything
[10:31:20] <FromDiscord> <Yardanico> In reply to @impbox "no but it might": that's not the point of funcs :)
[10:31:36] <FromDiscord> <Yardanico> and it doesn't really apply to refs, it applies to everything
[10:31:53] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3J6g
[10:31:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J6h
[10:32:08] <FromDiscord> <Elegantbeef> The thing about function is they're pure, the same input data, gives you the same output data
[10:32:36] <FromDiscord> <Elegantbeef> The fact they dont give the same values doesnt matter, it's like having a mathematical formula and applying it to random numbers
[10:32:53] <FromDiscord> <Elegantbeef> The output will be different but if you pass the same number you'll always get the same output
[10:46:09] <FromDiscord> <KatrinaKitten> What's the best way to track down potential memory leaks? `valgrind` reports my unit tests leaking about 4kb, but it's hard to tell where from.
[10:47:06] <FromDiscord> <Elegantbeef> You did compile with `-d:useMalloc` right?
[10:47:21] <FromDiscord> <Elegantbeef> Or are you doing manual memory management
[10:47:33] <FromDiscord> <Elegantbeef> Guess eitherway using malloc helps
[10:48:10] <FromDiscord> <KatrinaKitten> `nim c -d:release -d:useMalloc --opt:speed tests/test.nim`
[10:48:17] <FromDiscord> <KatrinaKitten> Same leak reported with or without `useMalloc`
[10:48:45] <FromDiscord> <Elegantbeef> pass `--debugger:native` aswell
[10:49:14] <FromDiscord> <sigmasd> nimsuggest 1.6.2 `nimsuggest --autobind --address:localhost` fails with `Additional info: Name does not resolve [OSError]` it works after removing `--address:localhost`nimsuggest 1.4.8 the same line used to workIs this a known issue?
[10:49:17] <FromDiscord> <Elegantbeef> That will hopefully give atleast some line information
[10:51:05] <FromDiscord> <Elegantbeef> Wonder if there was a change in a library which broke localhost, does "127.0.0.1" work in it's stead?
[10:51:09] <FromDiscord> <Elegantbeef> Guess i could test üòÄ
[10:51:55] <FromDiscord> <Elegantbeef> Hmm mine doesnt error
[10:52:10] <FromDiscord> <Elegantbeef> What OS are you on and are you sure your `nimsuggest -v` is 1.6.2?
[10:55:46] <FromDiscord> <Elegantbeef> Just noticed my nimsuggest is built in danger so probably just ignores that error
[10:56:56] <FromDiscord> <Elegantbeef> Actually that's an `OsError` not a defect, maybe i'll be a smart person one day
[10:57:05] <FromDiscord> <Elegantbeef> Anywho cannot reproduce here
[11:00:06] <FromDiscord> <Solitude> In reply to @Sabena Sema "so why copy them": they dont, i made a mistake in a benchmark
[11:00:28] <FromDiscord> <Sabena Sema> phew
[11:00:30] <FromDiscord> <Sabena Sema> saved
[11:00:38] <FromDiscord> <Sabena Sema> I'll still make the full benchmark at some point
[11:01:05] <FromDiscord> <Sabena Sema> good opertunity to learn how to gather that kind of benchmark data on non-intel systems (where vtune doesn't really work)
[11:02:56] <FromDiscord> <sigmasd> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: arch linux, and yes I'm sure about the version, I noticied this when the vim extension stopped working
[11:03:26] <FromDiscord> <Sabena Sema> I'd bet money something changed in your sd-resolved conf
[11:03:43] <FromDiscord> <Sabena Sema> there's several places where localhost can get turned into your actual IP
[11:03:57] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3J6r
[11:04:31] <FromDiscord> <KatrinaKitten> There are also a few from `unittest` that don't even show my library in the trace.
[11:04:32] <FromDiscord> <Sabena Sema> top level compiled regex?
[11:04:52] <FromDiscord> <Sabena Sema> in general I'm not sure if nim bothers freeing top level allocations when NimMain exits
[11:05:00] <FromDiscord> <Sabena Sema> I think there's an option to tell it to make valgrind happy
[11:05:02] <FromDiscord> <Sabena Sema> one sec
[11:05:32] <FromDiscord> <Sabena Sema> (you generally don't want to free memory right before exiting, it's much more efficient to just let the OS deal with it
[11:05:34] <FromDiscord> <Sabena Sema> (edit) "it" => "it)"
[11:05:51] <FromDiscord> <Elegantbeef> Time to use the better pure Nim regex üòõ
[11:05:54] <FromDiscord> <sigmasd> Just to explain more, the arch linux package manager uses nim-sugesst 1.4.8 so I had no issue, but then I noticed that nim-doc doesn't play well with this structure (it looks for in-existant files under /usr/doc (its a known issue)) so I removed that nim installation,  and installed thorough choosenim which makes nim-docs work now, but it uses this recent version of nimsuggest which has this issue
[11:06:20] <FromDiscord> <Elegantbeef> I oddly cannot reproduce it, does the 1.4.8 through choosenim work?
[11:06:32] <FromDiscord> <sigmasd> also if I strace it, it errors right after reading /etc/resolv.conf
[11:06:54] <FromDiscord> <sigmasd> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: I'll check that
[11:07:58] <FromDiscord> <Sabena Sema> https://github.com/nim-lang/Nim/issues/3063
[11:08:10] <FromDiscord> <Solitude> In reply to @treeform "Do you have benchmarks": benchmarks i did prove that small objects dont have a meaningful impact even when passed by copy, and passing by reference or using reference type doesnt bring meaningful speedup. and that would make sense.
[11:08:47] <FromDiscord> <Sabena Sema> it is easy to accidentally get copies in like, actual assignment statements
[11:09:02] <FromDiscord> <Sabena Sema> but the semantics are wildly different between ref assignment and value assignment
[11:09:40] <FromDiscord> <Sabena Sema> `ref object` is just my little hobby horse, I need one in each language I learn üòÑ
[11:09:44] <FromDiscord> <sigmasd> Same error with 1.4.8 via choosenim
[11:10:07] <FromDiscord> <sigmasd> Well if its not reproducible its not a big deal I guess, since it works after removing those arguments
[11:10:32] <FromDiscord> <Sabena Sema> I bet your dns config is kinda broken in any case
[11:10:41] <FromDiscord> <Sabena Sema> localhost really should resolve
[11:11:01] <FromDiscord> <sigmasd> Ah wait 1.4.8 shows the error if installed via choosenim
[11:11:07] <FromDiscord> <sigmasd> but if installed via arch it works
[11:11:10] <FromDiscord> <Sabena Sema> what does `getent hosts localhosts` print
[11:11:20] <FromDiscord> <sigmasd> so its not about the version ,, more about where its installed from
[11:11:29] <FromDiscord> <Sabena Sema> that's extremely odd
[11:11:42] <FromDiscord> <Sabena Sema> unless there's a bunch of patching going on
[11:11:44] <FromDiscord> <sigmasd> getent hosts localhosts -\> print nothing
[11:12:07] <FromDiscord> <sigmasd> getent hosts localhost -\> print \:\:1 localhost
[11:12:15] <FromDiscord> <Sabena Sema> sorry: `getent hosts localhost`
[11:12:19] <FromDiscord> <Sabena Sema> no s on the end
[11:12:42] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 260 seconds)
[11:13:02] <FromDiscord> <Sabena Sema> also what does `ls -l /etc/resolv.conf` print
[11:14:22] <FromDiscord> <Sabena Sema> and what's the hosts line in /etc/nsswitch.conf
[11:14:29] <FromDiscord> <sigmasd> .rw-r--r-- 45 root 22 Sep 16\:59 /etc/resolv.conf
[11:14:37] <FromDiscord> <sigmasd> hosts\: wins
[11:14:39] <FromDiscord> <Sabena Sema> it should be something like `files myhostname resolve [!UNAVAIL=return] dns`
[11:14:53] <FromDiscord> <Sabena Sema> that's ... pretty broken
[11:14:58] <FromDiscord> <sigmasd> the arch pkg have some patches https://github.com/archlinux/svntogit-community/blob/packages/nim/trunk/PKGBUILD maybe one of them is relevant
[11:15:14] <FromDiscord> <Sabena Sema> in that configuration `gethostbyname` will _never_ make dns lookups
[11:16:15] <FromDiscord> <Sabena Sema> I see no patches there
[11:16:23] <FromDiscord> <Sabena Sema> but ... fix you're resolver config
[11:17:20] <FromDiscord> <sigmasd> Doesnt explain why it works with everything else and with nim when installed through arch
[11:17:41] <FromDiscord> <sigmasd> But thanks I see your points tough I'll search a bit more
[11:17:50] <FromDiscord> <Elegantbeef> Ponders if the installed arch nim has some elevation
[11:17:53] <FromDiscord> <Sabena Sema> run a trace to see how the working one is resolving the name
[11:18:20] <FromDiscord> <Sabena Sema> also check if it's linked to some bizarre c library or something
[11:18:31] <FromDiscord> <Sabena Sema> that means that nss config isn't used
[11:18:46] <FromDiscord> <Sabena Sema> frankly I'm surprised much more isn't broken
[11:19:11] <FromDiscord> <Sabena Sema> do you have the dns resolver running on 127.0.0.53?
[11:19:20] <FromDiscord> <Sabena Sema> what is the actual content of `/etc/resolv.conf`
[11:20:14] <FromDiscord> <valerga> arch's nim is outdated
[11:20:27] <FromDiscord> <Elegantbeef> That's established üòõ
[11:20:34] <FromDiscord> <Elegantbeef> It's outdated pretty much everywhere
[11:20:54] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3J6t
[11:20:56] <FromDiscord> <Sabena Sema> ugh
[11:21:00] <FromDiscord> <Sabena Sema> cursed
[11:21:16] <FromDiscord> <Sabena Sema> not as cursed as that nss config though
[11:21:27] <FromDiscord> <Elegantbeef> Nim on ubuntu's repo is 1.4.6, damn really outdated
[11:21:51] <FromDiscord> <valerga> is there any disadvantage on just using choosenim?
[11:21:58] <FromDiscord> <Sabena Sema> not really
[11:22:05] <FromDiscord> <Sabena Sema> but it's nice to have distro packages
[11:22:14] <FromDiscord> <Sabena Sema> it's just they are not that maintained=
[11:22:15] <FromDiscord> <Sabena Sema> (edit) "maintained=" => "maintained"
[11:22:52] <FromDiscord> <Elegantbeef> The annoying part about using your system package manager is that you dont always want to run a set version
[11:22:56] <FromDiscord> <sigmasd> I was surpirsed its outdated on arch, they should just keep it on the aur if its not getting their attention
[11:23:21] <FromDiscord> <Sabena Sema> well, you should mark it as outdated and help get it updated
[11:23:27] <FromDiscord> <Sabena Sema> I should do the same for fedora's package
[11:23:28] <FromDiscord> <Sabena Sema> I won't
[11:23:31] <FromDiscord> <Sabena Sema> but I _should_
[11:24:02] <FromDiscord> <sigmasd> Its  already marked
[11:26:10] <FromDiscord> <valerga> the guy who maintains it on arch maintains like 150 other packages so...
[11:27:20] <FromDiscord> <Sabena Sema> package maintainers do tend to be overworked
[11:27:31] <FromDiscord> <Sabena Sema> and nim stuff tends to be leaves with few downstream dependents
[11:27:42] <FromDiscord> <Sabena Sema> the solution is to write more linux userspace in nim
[11:27:51] <FromDiscord> <sigmasd> The problem with this is the information doesn't get through, with arch you really assume that if its an official pkg its updated, when I install through pacman It would be great if a flagged pkg appears as flagged outdated at least
[11:27:55] <FromDiscord> <Sabena Sema> and to maintain more nim packages
[11:29:33] <FromDiscord> <Leonardo da Vinci> hello
[11:29:40] <FromDiscord> <Elegantbeef> Hello again
[11:29:45] <FromDiscord> <Leonardo da Vinci> In reply to @valerga "the guy who maintains": what is the best distro?
[11:30:12] *** Joins: PMunch (~PMunch@user/pmunch)
[11:31:38] <FromDiscord> <Leonardo da Vinci> for gaming
[11:31:59] <FromDiscord> <valerga> I don't have trouble recommending linux mint
[11:32:18] <FromDiscord> <Leonardo da Vinci> i use mx, but it doesn't do well with gaming
[11:32:24] <FromDiscord> <Leonardo da Vinci> (edit) "mx," => "mx linux,"
[11:34:12] <FromDiscord> <Michal58> When defining generics, how can I make `MyCollection[N]` behave the same as `MyCollection[range[0..<N]]` as it is with arrays?
[11:34:37] <FromDiscord> <Anis Taluqdar> Windows üòÖ‚Üµ(@Leonardo da Vinci)
[11:34:53] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "Windows üòÖ (<@873527032645042266>)": I am not installing that again, never
[11:35:42] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "Windows üòÖ (<@873527032645042266>)": My religion forbids the installation of windows
[11:35:45] <FromDiscord> <Anis Taluqdar> What makes you hate that? üòÜ. I need to use it because not all software is present in Linux.‚Üµ(@Leonardo da Vinci)
[11:36:07] <FromDiscord> <Anis Taluqdar> üòÖüòÖüòÖ amazing‚Üµ(@Leonardo da Vinci)
[11:36:19] <FromDiscord> <sigmasd> Ok I fixed the issue I had a weird /etc/hosts  file, I restored it to normal and now it works
[11:37:17] <FromDiscord> <sigmasd> Thanks for your help
[11:37:43] <FromDiscord> <sigmasd> This is just a symptom of an old arch installation, I just need to install fedora oneday
[11:38:32] <FromDiscord> <sigmasd> Not arch issue , but Its that I changed a lot of stuff over the time and I keep hitting issues where I forgot what I did xD
[11:40:53] <FromDiscord> <Elegantbeef> Yay we helped! (Mostly sabena) üòõ
[11:41:03] <FromDiscord> <sigmasd> thanks!
[11:42:06] <PMunch> @Leonardo_da_Vinci, I use Arch and Manjaro. Both seem to work fine for gaming
[11:42:19] <PMunch> With Steam and Proton most stuff "just works" nowadays
[11:42:58] <FromDiscord> <Elegantbeef> Oh hay pmunch just the man i want to talk to üòÄ
[11:43:11] <PMunch> Uh oh
[11:43:16] <PMunch> What have I done this time
[11:43:17] <FromDiscord> <Elegantbeef> Is there any utillity in xlunch to rebuild the `dsv`?!
[11:43:37] <FromDiscord> <Elegantbeef> I didnt see how to rebuild it so i cloned the repo again and ran `make test`
[11:44:16] <PMunch> Ah yes
[11:44:25] <PMunch> There is the genentries script
[11:44:39] <PMunch> Another thing I've been meaning to rewrite in Nim actually
[11:45:07] <FromDiscord> <Elegantbeef> Ah i moved to herbsluftwm to try something new today so though "why not try that utillity pmunch is using"
[11:45:15] <PMunch> I don't think the original maintainer would approve of a Nim solution, he tries to keep it super minimal, but I could distribute that separately
[11:45:22] <FromDiscord> <Leonardo da Vinci> In reply to @PMunch "@Leonardo_da_Vinci, I use Arch": Cool, gotta get Manjaro then
[11:45:28] <FromDiscord> <Elegantbeef> RRIN üòõ
[11:45:34] <PMunch> @Elegantbeef, cool!
[11:45:36] <PMunch> RRIN?
[11:45:41] <FromDiscord> <Elegantbeef> RIIN\
[11:46:02] <FromDiscord> <Elegantbeef> Rewrite it in Nim üòõ
[11:46:05] <PMunch> Let me know if you run into any issues or have any questions, I think I've modified almost every single line of that project over the years :P
[11:46:07] <FromDiscord> <Leonardo da Vinci> In reply to @PMunch "With Steam and Proton": is wine good there?
[11:46:09] <PMunch> Aha :P
[11:46:24] <FromDiscord> <Leonardo da Vinci> i can't make anything work in MX Linux
[11:46:29] <FromDiscord> <Elegantbeef> Proton and lutris make life so simple that most games do work like pmunch said
[11:46:31] <PMunch> @Leonardo_da_Vinci, haven't had any Manjaro/Arch specific complaints about it at least
[11:46:38] <FromDiscord> <Elegantbeef> I'm on an ubuntu derived and it works well
[11:46:52] <PMunch> And since it's bleeding edge that means you don't get a year old Wine version you have to replace anyways :P
[11:46:52] <FromDiscord> <sigmasd> Would someone review my first nim try https://github.com/sigmaSd/nimcolor/blob/master/src/color.nim  I just want to know if this is idiomatic  that I didn't miss anything obvious
[11:47:32] <PMunch> @Elegantbeef, I did consider rewriting xlunch in Nim. It's quite a simple program, but the C code is a horrible mess :P
[11:47:34] <FromDiscord> <Leonardo da Vinci> In reply to @PMunch "And since it's bleeding": Sounds really cool
[11:47:40] <FromDiscord> <Elegantbeef> Anyway to make the first entry the selected one like if i type "stea" and steam is the first i want enter to select it
[11:47:51] <PMunch> It is shadow-selected
[11:48:03] <PMunch> So if you just hit enter it will open the first thing
[11:48:11] <FromDiscord> <Michal58> In reply to @Michal58 "When defining generics, how": Anynone knows?
[11:48:18] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3J6A
[11:48:29] <FromDiscord> <Elegantbeef> `for x in A..C`?
[11:49:08] <PMunch> @Michal58, I believe arrays have defined a [] operator that takes a HSlice
[11:49:09] <FromDiscord> <Solitude> In reply to @Michal58 "Anynone knows?": can you give a bit more context?
[11:49:26] <FromDiscord> <Elegantbeef> Enum's are an ordinal so work as a Range
[11:49:29] <PMunch> Along with the one that takes an integer index
[11:49:31] <FromDiscord> <Elegantbeef> You can also do `for x in MyEnum`
[11:49:31] <FromDiscord> <Elegantbeef> Atleast iirc
[11:51:20] <FromDiscord> <sigmasd> Nice! but it gives intergers, I think I saw a method that convert those to the enum varaint name
[11:51:50] <FromDiscord> <Elegantbeef> Ew, but it'd be `for x in MyEnum.low.ord .. MyEnum.high.ord`
[11:51:59] <FromDiscord> <Elegantbeef> I dont know if there is a sugar for it
[11:52:02] <FromDiscord> <Elegantbeef> You can always make one
[11:52:42] <FromDiscord> <Michal58> In reply to @PMunch "<@431798919719288832>, I believe arrays": this is not at all about the indeces, it is about the type itself
[11:53:22] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3J6C
[11:53:28] <PMunch> Oh you want to be able to define it like arrays with the array[5..10, int] thing?
[11:53:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/nj4
[11:54:37] <FromDiscord> <Elegantbeef> Probably should be `typedesc[enum and Ordinal]`
[11:55:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J6E
[11:56:12] <FromDiscord> <Elegantbeef> I'm very dumb today
[11:57:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3J6F here is a proper solution, and i'll quite spammin
[11:57:50] <PMunch> @Michal58, not quite sure TBH
[11:58:11] <FromDiscord> <Elegantbeef> So the want is to have an integer and a range?
[11:58:22] <FromDiscord> <sigmasd> xD  I actually want the result to be A,B,C R,Z,W
[11:58:24] <FromDiscord> <Michal58> In reply to @PMunch "Oh you want to": Is `array[3,int]` some special syntax that is not possible to achieve with user defined types?
[11:58:37] <FromDiscord> <Elegantbeef> So then just `for x in MyEnum` ?
[11:58:49] <FromDiscord> <sigmasd> it also returns intergers
[11:58:58] <FromDiscord> <Elegantbeef> I dont follow
[11:59:25] <FromDiscord> <Elegantbeef> Does it return `(0, A)`?
[11:59:48] <FromDiscord> <sigmasd> type MyEnum = enum A,B,C‚Üµfor x in MyEnum\:‚Üµ echo $x # returns 1,2,3 instead of A,B,C
[11:59:55] <PMunch> @Michal58, I mean it's defined as Magic: https://nim-lang.org/docs/system.html#array
[12:00:11] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3J6G
[12:00:12] <FromDiscord> <Elegantbeef> No it doesnt
[12:00:30] <FromDiscord> <sigmasd> hmm, let me check again
[12:00:30] <FromDiscord> <Elegantbeef> Michal are you after a range or a int as the base value?
[12:00:45] <FromDiscord> <Elegantbeef> I'll assume range for now
[12:01:53] <FromDiscord> <Michal58> @ElegantBeef  wdym
[12:02:17] <FromDiscord> <Elegantbeef> What do you want the typedef to be?
[12:02:44] <FromDiscord> <Michal58> I want a type that can be parametrized with an integer value rather than with a type
[12:02:57] <FromDiscord> <Michal58> just like arrays are
[12:03:02] <FromDiscord> <Elegantbeef> `type A[T static: int]`
[12:03:15] <FromDiscord> <Elegantbeef> Jesus i cannot type
[12:03:22] <FromDiscord> <Elegantbeef> `type A[T: static[int]]`
[12:03:30] <FromDiscord> <Elegantbeef> There you go
[12:04:10] <FromDiscord> <sigmasd> Oh my bad I overrided `$`
[12:04:26] <FromDiscord> <Elegantbeef> makes sense i was going to suggest to check that
[12:05:11] <FromDiscord> <sigmasd> Is there a way to access the original version, I kind of want the override, but I can do without it
[12:05:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J6H
[12:05:45] <FromDiscord> <apahl> In reply to @IsaacPaul "damn std/wrapnils is ....": Did you have a look at https://github.com/status-im/questionable ?
[12:05:48] <FromDiscord> <Elegantbeef> It's ugly but it's how explicit calls work
[12:06:20] <FromDiscord> <Elegantbeef> Isnt that a package for options and not nils?
[12:06:57] <FromDiscord> <Elegantbeef> They're after getting nicer nil checked statements/calls
[12:07:03] <FromDiscord> <sigmasd> it outputs M Y E N U M
[12:07:24] <FromDiscord> <Elegantbeef> What?
[12:07:54] <FromDiscord> <Rika> Your terminal is broken then
[12:08:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3J6J
[12:08:09] <FromDiscord> <sigmasd> https://play.nim-lang.org/#ix=3J6K
[12:08:30] <FromDiscord> <Elegantbeef> Well yea
[12:08:34] <FromDiscord> <sigmasd> Ah you mean like that xD
[12:08:37] <FromDiscord> <Elegantbeef> you're iterating over a string
[12:09:56] <FromDiscord> <Michal58> In reply to @Elegantbeef "There you go": Thanks. Can we make it support both range and int as in arrays?
[12:10:08] <FromDiscord> <Elegantbeef> I'm on it
[12:13:25] <FromDiscord> <Elegantbeef> Ugh cannot use `..`
[12:13:28] <FromDiscord> <Elegantbeef> Even with my bodge
[12:13:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3J6L
[12:15:51] *** Joins: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de)
[12:15:51] *** Quits: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de) (Changing host)
[12:15:51] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:17:40] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3J6M
[12:17:46] <FromDiscord> <Michal58> I was able to create this workaround
[12:19:32] <FromDiscord> <Michal58> I don't understand your code
[12:19:49] <FromDiscord> <sigmasd> sent a code paste, see https://paste.rs/MAy
[12:20:16] <FromDiscord> <Elegantbeef> What dont you understand I'm more than happy to explain
[12:20:22] <FromDiscord> <Elegantbeef> The `: typdesc` was me being dumb
[12:20:42] <FromDiscord> <Elegantbeef> All the usages of `typedesc` was me being in the writing code zone and not thinking zone
[12:21:04] <FromDiscord> <Elegantbeef> Wait nvm i use them as parameters
[12:21:04] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3J6O
[12:21:17] <FromDiscord> <Elegantbeef> Think it's a bug with slices
[12:23:30] <FromDiscord> <Michal58> In reply to @Elegantbeef "What dont you understand": What does it mean when the body is `discard`?
[12:23:41] <FromDiscord> <Elegantbeef> It's a  no op
[12:23:51] <FromDiscord> <Elegantbeef> It's just an empty proc that doesnt do anything but return the default value
[12:24:12] <FromDiscord> <Elegantbeef> `discard` is nim's `pass` if you're a python user
[12:24:22] <FromDiscord> <Michal58> oh I dumb
[12:24:52] <FromDiscord> <Michal58> Ik discard but didn't realise the point is to return default value
[12:25:40] <FromDiscord> <Elegantbeef> Yea solitude it just seems static objects field's arent accessible
[12:25:47] <FromDiscord> <Elegantbeef> So i guess we've found me something to work on
[12:25:52] <FromDiscord> <Elegantbeef> Cheers üôÇ
[12:25:57] <FromDiscord> <Solitude> mmmmm ,cringe
[12:27:42] <FromDiscord> <Michal58> In reply to @Elegantbeef "What dont you understand": Also, how does the return type depend on the arguments? That feels like magic
[12:28:09] <FromDiscord> <Elegantbeef> The arguments are static so they can be used
[12:28:33] <FromDiscord> <Elegantbeef> `typedesc` is a static and has to be known at compile time as is a `range` and `static Natural`
[12:28:51] <FromDiscord> <Elegantbeef> hey fixing that bug will be nice‚Üµ(@Solitude)
[12:29:07] <FromDiscord> <Elegantbeef> The question is will I be able to fix it or is it a fucky thing
[12:33:39] <FromDiscord> <Elegantbeef> Ah i see the isssue
[12:33:45] <FromDiscord> <Michal58> Thank you so much @ElegantBeef !
[12:33:45] <FromDiscord> <Elegantbeef> It's the same thing as arrays
[12:33:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[12:35:42] <PMunch> This HTMX stuff is really neat
[12:36:34] <FromDiscord> <Elegantbeef> Ugh this bug will probably be another one that haunts me
[12:38:12] *** Joins: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de)
[12:38:12] *** Quits: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de) (Changing host)
[12:38:12] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:45:57] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "I'm on an ubuntu": which one? Mint?
[12:46:13] <FromDiscord> <Elegantbeef> Regolith
[12:47:48] <FromDiscord> <Leonardo da Vinci> @ElegantBeef I will install Mint and Manjaro‚ÜµUbuntu-derived and arch-derived. that should cover almost everything?
[12:47:53] <FromDiscord> <Michal58> Is there a proc for inserting into a sorted seq or should I just do `insert` with `algorithm.binarySearch`?
[12:48:06] <FromDiscord> <Elegantbeef> Why do you need more than one distro
[12:48:23] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Why do you need": Because sometimes some program doesn't exist in one distro
[12:49:01] <FromDiscord> <Elegantbeef> Probably the best michal
[12:49:32] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Probably the best michal": what is a michal?
[12:51:37] <FromDiscord> <Rika> In reply to @Michal58 "Is there a proc": This person is called Michal
[12:52:26] <FromDiscord> <Sabena Sema> In reply to @Leonardo da Vinci "Because sometimes some program": have you seen mkosi? Its handy for this kinda stuff
[12:55:34] <FromDiscord> <Leonardo da Vinci> In reply to @Sabena Sema "have you seen mkosi?": i don't know what is mkosi
[12:55:56] <FromDiscord> <Sabena Sema> https://github.com/systemd/mkosi
[12:55:57] <PMunch> @Michal58, `for i in 0..mySeq.high: if mySeq[i] > x: mySeq.insert(x, i); break`
[12:56:26] <FromDiscord> <Michal58> In reply to @PMunch "<@431798919719288832>, `for i in": Oof that is not very efficient
[12:56:48] <FromDiscord> <Michal58> (edit) "efficient" => "efficient‚ÜµI think I'll use the binarysearch üòâ"
[12:57:00] <PMunch> Well it's O(n)
[12:57:18] <FromDiscord> <Sabena Sema> itll setup a linux distro, install the packages, and do final ‚Äúinitial setup‚Äù stuff into an image of various sorts (even just a directory)‚Üµ‚Üµyou can then use systemd-nspawn to enter the image (or even boot it for real/kexec into it)
[12:57:30] <PMunch> Binary search would work as well, but you'd have to tweak it to find essentially two spots (one below and one above yours)
[12:58:10] <FromDiscord> <Elegantbeef> To add to that pmunch you can sample the middle and the start/end and cut the search to `O(n/2)`
[12:58:28] <FromDiscord> <Michal58> In reply to @PMunch "Binary search would work": Binary search returns an index at which the searched value should be present
[12:58:39] <FromDiscord> <Leonardo da Vinci> In reply to @Sabena Sema "itll setup a linux": Its a linux installer?
[12:58:44] <FromDiscord> <Sabena Sema> yeah sorta
[12:58:49] <FromDiscord> <Michal58> I mean it still is O(n) because of the insert op
[12:58:51] <FromDiscord> <Sabena Sema> but for every distro
[12:58:59] <FromDiscord> <valerga> no need to do fancy stuff when most stuff is on flatpak now anyway
[12:59:07] <FromDiscord> <valerga> like steam and lutris
[12:59:15] <FromDiscord> <Michal58> (edit) "In reply to @PMunch "Binary search would work": Binary search returns an index at which the searched value should be present ... " 03added "no tweaking needed"
[12:59:25] <FromDiscord> <Sabena Sema> using flatpak to setup libs for testing is extremely annoying
[12:59:26] <PMunch> @Michal58, oh right, I'm being dumb. The binary search would give you the position it's supposed to be in :P
[12:59:46] <FromDiscord> <Sabena Sema> flatpak is only really for applications
[12:59:55] <FromDiscord> <valerga> ah yeah, we were talking about linux for gaming earlier
[13:00:04] <FromDiscord> <Sabena Sema> ah, yeah
[13:00:09] <FromDiscord> <Sabena Sema> I use the steam flatpak
[13:00:14] <FromDiscord> <Sabena Sema> in fedora
[13:00:17] <FromDiscord> <Sabena Sema> works wellp
[13:00:42] <FromDiscord> <Michal58> In reply to @PMunch "<@431798919719288832>, oh right, I'm": Hmm, except `algorithm.binarySearch` doesn't... it just returns -1 if it is not present :/
[13:00:47] <FromDiscord> <Sabena Sema> I only really play factorio on my laptop tho
[13:00:58] <FromDiscord> <Michal58> I'll just write my own version than
[13:01:06] <FromDiscord> <Michal58> (edit) "than" => "then"
[13:01:34] <PMunch> @Michal58, well that's a bummer. I guess for a typical search that is what you'd expect though..
[13:01:58] <PMunch> You can probably just copy the one from algorithm and then remove the last little check
[13:02:12] <FromDiscord> <Michal58> In reply to @PMunch "<@431798919719288832>, well that's a": I mean binarySearch is often use exactly for finding the position to insert in so both versions are useful
[13:02:26] <PMunch> I'm guessing it just has something like `if data[i] == x: i else: -1` at the end
[13:02:55] <PMunch> Too bad we don't have a generic version of ropes (https://nim-lang.org/docs/ropes.html)
[13:03:04] <PMunch> That would make your insert O(1) as well
[13:03:12] <FromDiscord> <Sabena Sema> btrees
[13:03:17] <FromDiscord> <Sabena Sema> always btrees
[13:03:22] <FromDiscord> <Sabena Sema> as far as the eye can see
[13:03:53] <FromDiscord> <Michal58> In reply to @PMunch "I'm guessing it just": it does
[13:04:17] <PMunch> Problem is that a tree structure can totally wreck your cache-efficiency..
[13:05:14] <FromDiscord> <Leonardo da Vinci> @Sabena Sema thanks for telling me, i will try it
[13:07:14] *** Joins: mahlon (~mahlon@martini.nu)
[13:07:14] <PMunch> If you want efficiency I guess you could keep a long seq as the backing memory. Then have a btree with indices. To begin with the seq will be sorted and the only index would be to the start. Then if you insert in the middle you simply split the seq into three, left part, right part, and new part. The original halves stay put in memory, while the new part is added at the end. The indices b-tree will point you to where you need to go to find your element
[13:07:25] <PMunch> Should be fairly efficient
[13:07:32] <FromDiscord> <Elegantbeef> Tiime to just use a linked list üòõ
[13:07:52] <FromDiscord> <Leonardo da Vinci> I am learning C
[13:07:56] <FromDiscord> <Leonardo da Vinci> Because i hate OOP
[13:08:14] <FromDiscord> <Elegantbeef> Nim exists
[13:08:19] <PMunch> @Elegantbeef, same problem as a b-tree, and you don't get the sorted benefit :P
[13:08:24] <FromDiscord> <Leonardo da Vinci> Nim is not OOP
[13:08:29] <PMunch> Exactly
[13:08:36] <FromDiscord> <Leonardo da Vinci> Based language xd
[13:08:53] <FromDiscord> <Leonardo da Vinci> In reply to @PMunch "Exactly": wait, can i use the word based here?
[13:09:17] <PMunch> I mean you can, I have no idea what you mean by it, but you're free to use whatever words you like
[13:09:36] <PMunch> It does xorxz communications a bit though
[13:09:37] <FromDiscord> <Elegantbeef> Welcome to boomerhood pmunch
[13:09:45] <FromDiscord> <Leonardo da Vinci> In reply to @PMunch "I mean you can,": Do you know another procedural language?
[13:09:52] <FromDiscord> <Elegantbeef> Odin, Zig
[13:09:53] <PMunch> @Elegantbeef :D I've been here a while :P
[13:10:02] <PMunch> C
[13:10:08] <FromDiscord> <Elegantbeef> Pascal, Oberon, Modula, Ada ...
[13:10:23] <FromDiscord> <Leonardo da Vinci> With cute Syntaxis?
[13:10:26] <PMunch> JavaScript is also procedural isn't it?
[13:10:40] <FromDiscord> <Elegantbeef> nah it's protypal or something like that
[13:10:48] <FromDiscord> <Elegantbeef> It's a weird OOP/functional mix
[13:10:49] <FromDiscord> <Leonardo da Vinci> (edit) "Syntaxis?" => "syntaxis?"
[13:11:13] <FromDiscord> <Elegantbeef> I'm going to bash my head into a wall since this bug is the same as the array one i've ran into before just in the `set` version
[13:11:22] <FromDiscord> <Elegantbeef> I mean `range` version
[13:11:22] <FromDiscord> <KatrinaKitten> Prototypal yes. Think functional imitating OOP, despite syntactically trying to appear the other way around.
[13:11:36] <FromDiscord> <Leonardo da Vinci> I found Nim because i wanted a compiled language with a syntax clean just like Python
[13:11:57] <PMunch> @Leonardo_da_Vinci, so why are you looking for something else then?
[13:12:04] <PMunch> Sounds like you've found the perfect match
[13:12:25] <FromDiscord> <Leonardo da Vinci> Because i want to find the best
[13:12:34] <FromDiscord> <Leonardo da Vinci> before marrying a language
[13:12:40] <FromDiscord> <KatrinaKitten> Though technically most OOP is also procedural anyway, as is functional... but that gets into the fact that the opposite of procedural is actually declarative, not OOP or functional or what have you.
[13:13:21] <FromDiscord> <Leonardo da Vinci> In reply to @Leonardo da Vinci "I found Nim because": and it compiles to C!!!!
[13:13:30] <FromDiscord> <Elegantbeef> Look at the language nerd
[13:14:31] <FromDiscord> <Leonardo da Vinci> I hate OOP, i was helping a friend, and they teach that in college
[13:14:40] <FromDiscord> <Leonardo da Vinci> ü§Æ
[13:14:57] <FromDiscord> <qb> How would I `scanf`  the license (MIT) out of `  license:     MIT` ? My results always require some temp variable since `$`  also matches and gets grouped
[13:14:59] <FromDiscord> <KatrinaKitten> Language geek, tyvm /j
[13:15:04] <FromDiscord> <Leonardo da Vinci> I used C++.
[13:15:08] <FromDiscord> <Leonardo da Vinci> Python
[13:15:27] <FromDiscord> <Leonardo da Vinci> I am learning now C, and learning to use the SDL graphics library
[13:15:56] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "Language geek, tyvm /j": what is tyvm/j?
[13:16:24] <FromDiscord> <Leonardo da Vinci> btw, are you a vtuber? @KatrinaKitten
[13:16:29] <FromDiscord> <Anis Taluqdar> If you know c++ what is the benefits of learning c over it?‚Üµ(@Leonardo da Vinci)
[13:17:07] <FromDiscord> <KatrinaKitten> In reply to @Leonardo da Vinci "what is tyvm/j?": Tyvm is thank you very much, and /j is a tone marker (short for "joking) https://tonetags.carrd.co
[13:17:08] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "If you know c++": I like C
[13:17:20] <FromDiscord> <KatrinaKitten> (edit) ""joking)" => ""joking")"
[13:18:03] <FromDiscord> <KatrinaKitten> In reply to @Leonardo da Vinci "btw, are you a": I suppose technically, I use a Vtuber avatar on some of my streams, but I don't do it seriously or as a job.
[13:18:05] <FromDiscord> <qb> In reply to @qb "How would I `scanf`": nvm, `$slicense:$s$w$.`
[13:18:17] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "I suppose technically, I": I see
[13:18:31] <FromDiscord> <Leonardo da Vinci> I C
[13:19:04] <FromDiscord> <Anis Taluqdar> Why u like c over c++?‚Üµ(@Leonardo da Vinci)
[13:20:23] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "Why u like c": Good question
[13:22:06] <PMunch> One thing I was concerned about for the HTMX based playground was to keep support for the JSON interface (that e.g. NimBot uses), but this seems to work fine http://ix.io/3J70/nim
[13:22:40] <PMunch> Then I just have hx-headers defined on the <html> element in my index file to set the accept type to HTML and voila
[13:22:42] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "Why u like c": I just like writting code in a procedural style, write once, debug less
[13:27:37] <PMunch> Hmm, the only tone marker I've ever seen before is /s. Didn't know it was actually part of a system
[13:29:09] <FromDiscord> <Elegantbeef> Nice i have a possible fix for that `range` bug
[13:31:23] <FromDiscord> <KatrinaKitten> @Pmunch /s is definitely the most well known, but a few others such as /j are fairly well used; that site documents a lot I've never seen in practice. It's a bigger thing in neurodivergency-heavy communities, among others.
[13:32:43] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "@Pmunch /s is definitely": Why are they used?
[13:33:18] <FromDiscord> <Elegantbeef> Poe's law
[13:33:48] <FromDiscord> <Schelz> Can somebody provide me a documentation of how to wrap up some module for nim ?
[13:33:58] <FromDiscord> <Schelz> (edit) 04removed "a"
[13:34:26] <FromDiscord> <KatrinaKitten> In reply to @Leonardo da Vinci "Why are they used?": A huge portion of face to face communication is nonverbal, things like expressions and tone of voice, but you don't get that with text. Tone tags can help more clearly indicate your intended tone, so you don't come across as angry or upset unintentionally, for example.
[13:34:38] <PMunch> @Leonardo_da_Vinci, sarcasm. You typically see it a lot on Reddit
[13:34:43] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "A huge portion of": Sounds good to me
[13:34:47] <FromDiscord> <Elegantbeef> What do you mean "wrap up"‚Üµ(@Schelz)
[13:35:07] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "A huge portion of": I have autism, but i trained myself a lot to detect stuff
[13:35:12] <FromDiscord> <Schelz> How to use cpp or C code in nim
[13:35:23] <FromDiscord> <Elegantbeef> For some reason i'm viewed as a jaded asshole, i just dont get it üòõ‚Üµ(@KatrinaKitten)
[13:35:38] <FromDiscord> <Solitude> In reply to @KatrinaKitten "A huge portion of": why are there no tags if i want to come across as angry or upset?
[13:36:42] <FromDiscord> <Elegantbeef> Throw a few cunts in there it'll get the message across ya dumb cunt üòâ
[13:36:50] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "For some reason i'm": Some people are todo sensitive
[13:37:07] <FromDiscord> <Leonardo da Vinci> (edit) "todo" => "too"
[13:37:10] <FromDiscord> <amadan> In reply to @Elegantbeef "Throw a few cunts": Might confuse Australians though wouldn't it?
[13:37:17] <FromDiscord> <Solitude> In reply to @Elegantbeef "Throw a few cunts": okay /mad
[13:37:23] <FromDiscord> <Elegantbeef> I dont speak boomerang sorry
[13:37:42] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Throw a few cunts": Okay /laughing
[13:39:14] <FromDiscord> <KatrinaKitten> In reply to @Solitude "why are there no": Honest answer, probably because they're primarily used to defuse situations that could otherwise cause a misunderstanding and spiral, as opposed to ensuring a situation does spiral. It's easy enough to communicate that you're ticked off with other methods, but sometimes subtler things like sarcasm or a light hearted jab can fly under the radar, which is why the system was originally create
[13:39:32] <FromDiscord> <Elegantbeef> That's one long way of writing "poes law" üòõ
[13:39:39] <FromDiscord> <KatrinaKitten> Yeah, basically lol
[13:39:55] <FromDiscord> <KatrinaKitten> But most people probably aren't familiar with that either, so
[13:40:37] <FromDiscord> <Elegantbeef> Get learneded
[13:40:45] <FromDiscord> <Leonardo da Vinci> In reply to @KatrinaKitten "Honest answer, probably because": Okay /confused
[13:41:14] <FromDiscord> <KatrinaKitten> TLDR they're shorthand for "I'm not mad, I'm just <insert intended tone>"
[13:41:34] <FromDiscord> <Leonardo da Vinci> I am installing manjaro now /anxious
[13:41:44] <FromDiscord> <Elegantbeef> We're really going long down this path of one `/j`
[13:41:52] <FromDiscord> <Elegantbeef> I personally just use `/j` to sign off
[13:42:17] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "We're really going long": Join us!!! /join the trend
[13:48:16] <FromDiscord> <Anis Taluqdar> Yeah, I was used to it. It's best. But I need to leave for windows üò≠üò≠‚Üµ(@Leonardo da Vinci)
[13:49:06] <FromDiscord> <Elegantbeef> Sucks to suck
[13:49:37] <FromDiscord> <Anis Taluqdar> Maybe suck to sucks üòÖ
[13:57:25] <PMunch> Hmm, I have this weird long-standing issue with one of my Nim script where it compiles fine but just doesn't work in release mode. Works fine in debug though
[13:59:19] <FromDiscord> <Elegantbeef> Do we guess the issue or is it sharable?
[14:00:04] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[14:00:32] <PMunch> Haha, give me a sec
[14:01:29] <PMunch> This is the script: http://ix.io/3J7m/nim
[14:02:01] <FromDiscord> <Elegantbeef> Uploaded with raw new lines?
[14:02:02] <PMunch> But by itself it isn't very useful as it calls out to some external scripts
[14:02:23] <PMunch> Just remove the /nim from the URL
[14:02:33] <PMunch> Sometimes ix messes up when it tries to syntax highlight..
[14:03:00] <FromDiscord> <Elegantbeef> Well there's your problem 300 indent levels üòõ
[14:03:34] <PMunch> It's just a hacky little script :P
[14:04:15] <PMunch> The problem is with the nimSHA2 library that libkeepass uses
[14:04:31] <PMunch> Or nimAES, I don't remember
[14:04:43] <PMunch> It fails to decrypt when it's compiled in release mode
[14:04:50] <FromDiscord> <Elegantbeef> Odd
[14:05:06] <FromDiscord> <Elegantbeef> Well i cant look into it right now i need to sleep
[14:05:27] <FromDiscord> <Elegantbeef> If i remember i might take a look at it and see if there's an issue, but i probably cant be arsed üòõ
[14:10:56] <PMunch> Lazy sod
[14:11:16] <PMunch> :P
[14:15:14] <FromDiscord> <Leonardo da Vinci> In reply to @Anis Taluqdar "Yeah, I was used": I installed Ubuntu once, and it did broke somehow, i prefer just work, stable distros
[14:16:40] <PMunch> I used to use Ubuntu
[14:17:01] <PMunch> But I always ended up breaking it when I tried to install a newer package than what it offered for some task
[14:17:29] <PMunch> So then I switched to Manjaro (because it had an i3 community flavour at the time) and I haven't reinstalled that machine since
[14:19:11] <FromDiscord> <valerga> last ubuntu i had was a kde neon transformed to kubuntu transformed to tiling wm setup
[14:19:17] <FromDiscord> <valerga> it worked for a few years
[14:19:44] <FromDiscord> <valerga> suddenly some weird audio problem and I kinda blame the proprietary programs I ran
[14:20:24] <PMunch> I had Xubuntu transformed to i3
[14:20:33] <FromDiscord> <Leonardo da Vinci> What is i3?
[14:20:40] <PMunch> Tiling window manager
[14:21:04] <FromDiscord> <Leonardo da Vinci> does mandado break easily?
[14:21:18] <PMunch> But Manjaro i3 flavour just had a bunch of nice little scripts that made the i3 integration smoother
[14:21:22] <FromDiscord> <Leonardo da Vinci> (edit) "mandado" => "manjaro"
[14:21:49] <PMunch> Well, it is a bleeding edge distro. But it is a month behind Arch I believe. So the worst errors should be weeded out
[14:22:19] <PMunch> I have broken it a couple times, but nothing I wasn't able to fix
[14:22:41] <PMunch> And the community used to be super helpful back when I first got into it, but I haven't been in there for ages
[14:22:52] <PMunch> Also helps that you can use the Arch wiki more or less directly
[14:25:49] <FromDiscord> <Leonardo da Vinci> Ubuntu got broken in 1 day
[14:26:48] <FromDiscord> <Moregon> manjaro breaks very easily, I thought Ubuntu was supposed to be more of a just work distro too
[14:27:01] <FromDiscord> <Leonardo da Vinci> In reply to @Moregon "manjaro breaks very easily,": Noooo
[14:27:18] <FromDiscord> <Moregon> You should avoid manjaro over all else imo
[14:27:37] <FromDiscord> <Leonardo da Vinci> I just installed manjaro
[14:27:48] <FromDiscord> <Moregon> rip
[14:27:55] <FromDiscord> <Leonardo da Vinci> i amor gonna try, and if it breaks, i will delete it just like ubuntu
[14:28:13] <FromDiscord> <Moregon> ok
[14:28:33] <FromDiscord> <Leonardo da Vinci> (edit) "amor" => "am" | "try," => "try it" | "breaks," => "breaks"
[14:29:33] <FromDiscord> <Moregon> If it breaks I was happy with openSUSE tumbleweed when I used it for a bit and Fedora is pretty good just works distro I think
[14:30:22] <FromDiscord> <Leonardo da Vinci> In reply to @Moregon "ok": What do you recommend me for a gaming, just works?
[14:33:33] <FromDiscord> <Clonkk> Pop OS! is prob. best distro for gaming
[14:35:16] <FromDiscord> <hmmm> oh dear I just realized I have two procs: datecheck and checkdate that do the same thing: call parse from datetime lol. The first works on seq[T] and the second on string. Any chance I can compact those ugly ducklings in a beautiful flamethrower err swan
[14:35:48] <FromDiscord> <Leonardo da Vinci> In reply to @Clonkk "Pop OS! is prob.": Can i use it with XFCE?
[14:41:43] <FromDiscord> <Rika> In reply to @Leonardo da Vinci "Can i use it": Likely not
[14:41:58] <FromDiscord> <Rika> In reply to @hmmm "oh dear I just": Rename them to the same thing
[14:42:06] <FromDiscord> <Rika> Overloading, baby
[14:42:10] <FromDiscord> <hmmm> wut
[14:42:11] <FromDiscord> <hmmm> it works?
[14:42:30] <FromDiscord> <hmmm> this might be the coolest thing I learned today rika san
[14:43:04] <FromDiscord> <Rika> I mean if the types are different then it should work
[14:43:13] <FromDiscord> <hmmm> I'll let you know
[14:45:03] <FromDiscord> <enthus1ast> check is one of the worst proc names btw üòâ
[14:45:10] <FromDiscord> <hmmm> nu!
[14:45:37] <FromDiscord> <hmmm> I find it beautiful and my little brain can find ease in the simple concept of checking
[14:45:39] <FromDiscord> <enthus1ast> Why not parseDatetime ?
[14:45:51] <FromDiscord> <hmmm> it's ugly as sin enthy
[14:46:14] <FromDiscord> <enthus1ast> Then overload it for a string and a seq
[14:49:09] <FromDiscord> <enthus1ast> I mean, what does it "check"? It does not even return bool, it is clearly a parseDatetime, and if it would return a bool it must be named isDatetime.
[14:49:38] <FromDiscord> <enthus1ast> My bank would prolly have a check function
[14:49:40] <FromDiscord> <hmmm> nunu both are checkers and return bool
[14:53:23] <FromDiscord> <enthus1ast> Ahh now i get you\:‚Üµ"checkers[note 1] (American English) is a group of strategy board games for two players"
[14:53:55] <FromDiscord> <hmmm> hey do not make fun of my ugly ducklings ü§®
[14:57:09] <FromDiscord> <hmmm> is there something I should know about 'things' inside bigger "things". Like in "this is a 'thing', bro"
[14:57:28] <FromDiscord> <hmmm> I have the feeling I should escape the little guys
[14:57:32] <FromDiscord> <hmmm> but maybe they work
[14:58:27] <FromDiscord> <Anis Taluqdar> üôÑüôÑ
[15:02:54] <FromDiscord> <Rika> In reply to @enthus1ast "My bank would prolly": No your bank would have a cheque function üòâ
[15:03:15] <FromDiscord> <enthus1ast> i've learned english very late
[15:03:36] <FromDiscord> <enthus1ast> or never actually ;)
[15:05:49] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[15:13:26] <FromDiscord> <Rika> No it‚Äôs a joke, cheque is British and check is American
[15:18:46] <FromDiscord> <hmmm> yay overloading work'd
[15:19:06] <FromDiscord> <hmmm> now I must choose what I like more between datecheck and checkdate üò¶
[15:24:58] <FromDiscord> <sigmasd> Anyone uses nvim with nim? I'm using https://github.com/alaviss/nim.nvim and I'm currently mainly missing auto completion
[15:25:17] <FromDiscord> <sigmasd> Anyone uses nvim +coc with nim? I'm using https://github.com/alaviss/nim.nvim and I'm currently mainly missing auto completion
[15:25:30] <FromDiscord> <Rika> You need an autocomplete engine
[15:25:43] <FromDiscord> <Rika> You also then need to register such plugin with the engine
[15:25:53] <FromDiscord> <Rika> There is instructions on the read me of that plugin
[15:26:31] <FromDiscord> <sigmasd> I'm using coc and the one recommended on the extension page (prabirshrestha/asyncomplete.vim) conflicts with it apparently
[15:42:49] *** Joins: arkurious (~arkurious@user/arkurious)
[16:06:32] *** Joins: rockcavera (~rc@192.12.112.193)
[16:06:33] *** Quits: rockcavera (~rc@192.12.112.193) (Changing host)
[16:06:33] *** Joins: rockcavera (~rc@user/rockcavera)
[16:07:28] <FromDiscord> <Rika> Yes because those are two autocomplete engines
[16:33:27] *** Joins: sagax (~sagax_nb@user/sagax)
[16:42:16] <FromDiscord> <keks> Hi all! I'm new to NIM and still figuring things out. I'm trying to apply a map() function to an iterator, but it seems it only works with sequences. Is it intentional? I expect that map() should work on all kinds of iterables, i.e. not only on the sequences.
[16:49:22] <FromDiscord> <IsaacPaul> In reply to @apahl "Did you have a": Thanks will definitely take a look. Seems like what I‚Äôm looking for
[17:05:41] <qwr> keks: there is mapIt macro that is often better choice to use
[17:08:57] <qwr> keks: thought there is also map definition for iterators
[17:12:04] <qwr> hm i'm wrong, the simple map don't work, but mapIt works
[17:30:06] <FromDiscord> <keks> In reply to @qwr "hm i'm wrong, the": Thank you! Though mapIt doesn't seem to work either "echo "0101001110".items.mapIt(parseInt($it))"
[17:31:18] <FromDiscord> <Solitude> omit `items`
[17:31:29] <FromDiscord> <keks> I found that there is an "iterutils" package that seems to provide map/reduce/filter for iterators, but it is really weird that it wouldn't work on iterators.
[17:31:39] <FromDiscord> <keks> (edit) "iterators." => "iterators in the standard library."
[17:32:25] <FromDiscord> <keks> In reply to @Solitude "omit `items`": Brilliant, thanks a ton!
[17:33:10] <FromDiscord> <keks> Though this separation between sequences and iterators is weird. In Python or D algorithms from the standard library work on both arrays and iterators/ranges.
[17:33:28] <FromDiscord> <Rika> nim iterators are inlined
[17:33:32] <FromDiscord> <Solitude> yeah, everything sucks
[17:33:42] <FromDiscord> <Rika> though i assume
[17:33:48] <FromDiscord> <Rika> whoops, i hit enter by accidenta
[17:33:49] <FromDiscord> <Rika> (edit) "accidenta" => "accident"
[17:34:53] <FromDiscord> <Rika> it being inlined means there isnt something to pass into a function
[17:35:29] <FromDiscord> <Rika> i guess there could be an automatic inline->closure to "ensure" first class iterators without losing too much performance? but yeah, closure iterators are apparently much slower
[17:35:34] <FromDiscord> <Rika> too much slower to be a default
[17:37:36] <FromDiscord> <keks> It's been a while since I looked at ranges in D, but I'm sure they are equally well optimised.
[17:39:19] <FromDiscord> <keks> but ranges in D are quite a bit different to the yield-based iterators in Nim..
[17:39:34] <FromDiscord> <Rika> well i'd like to know
[17:44:36] <qwr> some languages like haskell can optimise normal function usage by inlining pretty much away, but it means more work for the compiler (and the pure no-sideeffects language also helps)
[17:45:35] <FromDiscord> <ajusa> man why are linking issues impossible to debug
[17:45:39] <FromDiscord> <Rika> nim kinda does that too for regular functions but iterators are just by default always inlined
[17:45:57] <FromDiscord> <Rika> there isnt any real special sauce thats used to make it fast in a smarter way
[17:46:25] <FromDiscord> <retkid> how do i know when something is a good candidate for async and not threads
[17:46:26] <FromDiscord> <Rika> i guess its kinda sad but i can imagine it being one hell of a task to do
[17:46:44] <FromDiscord> <Rika> In reply to @retkid "how do i know": when your bottleneck is networking or reading files or so
[17:46:48] <FromDiscord> <retkid> my program currently maxes out each thread its on doing all its math
[17:46:48] <qwr> and python is just slow :)
[17:47:01] <FromDiscord> <retkid> so i assume
[17:47:04] <FromDiscord> <Rika> In reply to @retkid "my program currently maxes": then thats not an async task
[17:47:04] <FromDiscord> <retkid> threading is applicable
[17:47:08] <FromDiscord> <Rika> keep on using threads
[17:47:09] <FromDiscord> <Rika> yes
[17:47:18] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:47:23] <FromDiscord> <retkid> well, im not using threads lol, i meant any thread it randomly spawns upon
[17:47:24] <FromDiscord> <Rika> you need more threads it feels like lol
[17:47:29] <FromDiscord> <Rika> wdym?
[17:47:44] <FromDiscord> <retkid> whenever a thread is allocated to the process it goes from 0.7% to 100
[17:48:11] <FromDiscord> <Rika> idk then lol
[17:48:14] <FromDiscord> <retkid> also my memory goes from 4 gb to 8 gb then it just dies L
[17:48:16] <FromDiscord> <retkid> (edit) "L" => ":("
[17:48:25] <FromDiscord> <Rika> youre prolly doing something wrong? idk
[17:48:26] <FromDiscord> <enthus1ast> sounds like a bug \:)
[17:48:27] <FromDiscord> <keks> In reply to @Rika "nim *kinda* does that": well, chaining map/filter on the iterators could be unrolled into a big for loop, no?
[17:48:36] <FromDiscord> <Rika> In reply to @keks "well, chaining map/filter on": i know
[17:48:38] <FromDiscord> <retkid> no im not its just bad memory managment
[17:48:41] <FromDiscord> <Rika> and thats exactly what zerofunctional does
[17:48:42] <FromDiscord> <retkid> (edit) "managment" => "management"
[17:48:48] <FromDiscord> <Rika> but i dont know why its not like that from the getgo
[17:49:40] <FromDiscord> <retkid> now that i think about it, maybe this is wrong?
[17:49:50] <FromDiscord> <retkid> ah im not deallocing it
[17:50:17] <FromDiscord> <Rika> lol
[17:50:58] <FromDiscord> <retkid> nah that doesn't solve anything, the tables are just super big
[17:51:32] <FromDiscord> <Rika> so you just literally dont have enough memory to do the task
[17:51:41] <FromDiscord> <retkid> likely
[17:51:51] <FromDiscord> <retkid> are orderedtable less efficient than just tables?
[17:52:00] <FromDiscord> <Rika> no
[17:52:03] <FromDiscord> <Rika> well
[17:52:07] <FromDiscord> <Rika> i didnt check
[17:52:19] <FromDiscord> <Rika> it probably is by a small bit? but afaik the representations seem the same...
[17:53:28] <FromDiscord> <retkid> they're much smaller
[17:54:03] <FromDiscord> <retkid> by maybe 30%
[17:54:39] <FromDiscord> <retkid> at least for my tables of 2073600 entries
[17:54:46] <FromDiscord> <retkid> (edit) "2073600" => "2073600+"
[17:55:29] <FromDiscord> <retkid> hmmm
[17:55:37] <FromDiscord> <retkid> each one should be 5 mbs doing the math
[17:55:42] <FromDiscord> <retkid> maybe I should just use a sequence
[17:56:09] <FromDiscord> <retkid> (edit) "math" => "math, here they're like 500 mb"
[18:03:42] <FromDiscord> <enthus1ast> Do you need the table for your calculation?
[18:04:01] <FromDiscord> <retkid> i need it to organize the data but after that I can just use a sequence
[18:04:18] <FromDiscord> <enthus1ast> If no then just don't store it in memory but dump it to your mass storage
[18:04:55] <FromDiscord> <retkid> yea thats the next step of optimization but im concerned for some weird race condition if i thread it
[18:04:58] <FromDiscord> <retkid> if that makes sesne
[18:09:29] <FromDiscord> <retkid> alright so i've got near the 5 mb goal by storing everything as joined
[18:09:34] <FromDiscord> <retkid> (edit) "joined" => "strings"
[18:09:39] <FromDiscord> <retkid> tables => seq => string
[18:18:33] <FromDiscord> <ajusa> Currently getting a `/usr/bin/ld.bfd: errno: TLS reference in /usr/lib64/libm-2.34.a(w_pow.o) mismatches non-TLS reference in /home/ajusa/.cache/nim/main_r/stdlib_io.nim.c.o` with cosmonim, anyone here understand linkers?
[18:49:09] <FromDiscord> <Smarc> Hey guys, I have a confusing little issue with https://github.com/Smarcy/nim_chess especially with 'nimble test'.‚ÜµIf I run 'nimble test' as it is right now, it works fine and every test is green. But if I insert 'b.draw' above L461 in 'test_move.nim' it draw the board correct and the tests are still green. If I insert 'b.draw' right after L461 the test crashes. I just don't understand how this behaviour is able to happen. Would really app
[19:31:56] <FromDiscord> <Smarc> Nobody any clue? Or should I provide any more information? :(
[19:34:14] <FromDiscord> <qb> Is there no `readAll`  for `osproc`?
[19:35:54] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[19:39:30] <Amun-Ra> Smarc: that test case is kinda largish
[19:47:28] <nrds> <06Prestige99> qb what are you trying to do?
[19:50:51] <FromDiscord> <IsaacPaul> In reply to @Smarc "Nobody any clue? Or": Do you really need to draw during a test? If I had to _guess_ it maybe because of echo. I'm not sure how tests are run.. if they are ran in parallel then accessing a single resource (echo) from multiple places definitely will cause issues. ‚Üµ‚ÜµPerhaps an out of bounds error or accessing a nil somewhere? xD
[19:51:14] <FromDiscord> <IsaacPaul> Comment pieces out of draw until it starts working
[19:51:27] <FromDiscord> <IsaacPaul> (edit) "pieces" => "lines"
[19:51:53] <FromDiscord> <IsaacPaul> Comment lines
[20:06:22] *** Joins: xet7 (~xet7@user/xet7)
[20:14:51] <FromDiscord> <lytedev> am I dumb or is there no `parseInt` for `int64`?
[20:16:15] <FromDiscord> <Solitude> "1".parseInt.int64
[20:16:48] <FromDiscord> <lytedev> would that not fail for >32bit int strings?
[20:17:28] <FromDiscord> <Solitude> !eval echo "9223372036854775807".parseInt
[20:17:31] <NimBot> Compile failed: /usercode/in.nim(1, 27) Error: undeclared field: 'parseInt' for type system.string [type declared in /playground/nim/lib/system.nim(34, 3)]
[20:17:47] <FromDiscord> <Solitude> !eval import strutils; echo "9223372036854775807".parseInt
[20:17:51] <NimBot> 9223372036854775807
[20:18:51] <FromDiscord> <lytedev> Ah so int _is_ an int64 on 64-bit platforms, then? I should certainly have expected that I suppose. Thank you!
[20:19:05] <FromDiscord> <lytedev> Presumably, that would fail on 32-bit platforms, though, no?
[20:19:15] <FromDiscord> <Solitude> probably
[20:19:27] <FromDiscord> <lytedev> üëç thank you
[20:21:21] <Amun-Ra> there's parseBiggestInt
[20:21:26] <FromDiscord> <Saptak> sent a code paste, see https://play.nim-lang.org/#ix=3J9r
[20:21:36] <FromDiscord> <Saptak> sent a code paste, see https://play.nim-lang.org/#ix=3J9s
[20:22:02] <FromDiscord> <Solitude> !eval var name:int
[20:22:05] <NimBot> Compile failed: /usercode/in.nim(1, 10) Error: invalid token:  (\29)
[20:22:23] <FromDiscord> <demotomohiro> In reply to @Saptak "is this valid?": What do you want to do with that code?
[20:22:35] <FromDiscord> <Saptak> In reply to @demotomohiro "What do you want": i need a pointer
[20:22:52] <FromDiscord> <demotomohiro> You need to write `var name: ptr int`.
[20:22:55] <FromDiscord> <lytedev> `Pint`?
[20:23:14] <FromDiscord> <Saptak> In reply to @demotomohiro "You need to write": ok
[20:23:43] <FromDiscord> <Solitude> In reply to @Saptak "i need a pointer": https://nim-lang.github.io/Nim/tut1.html#advanced-types-reference-and-pointer-types
[20:24:08] <FromDiscord> <Saptak> thanks
[20:27:04] <FromDiscord> <qb> In reply to @nrds "<Prestige> qb what are": I just want a the whole output of a process as one string instead of a seq[string]
[20:32:43] <FromDiscord> <qb> `outputStream.readAll()`  did it
[20:36:33] <FromDiscord> <demotomohiro> There is asynchronous version of osproc.
[20:36:34] <FromDiscord> <demotomohiro> https://github.com/cheatfate/asynctools
[20:36:57] <FromDiscord> <demotomohiro> But I never used it.
[20:51:02] *** Parts: freevryheid (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (WeeChat 3.4)
[21:57:57] *** tinytoast is now known as tinytim
[22:14:24] *** Joins: ldlework (~hexeme@user/hexeme)
[22:15:31] <ldlework> I just had a silly idea to pass along; People painstakingly clean-room reverse engineered the Ocarina of Time 64 source-code to C. It would be funny to strip down the C source to what's minimally required to compile a valid ROM. Then port it to Nim to set the stage for Nim N64 homebrew scene. ^_^
[22:23:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:24:26] *** Joins: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de)
[22:24:26] *** Quits: neurocyte0132889 (~neurocyte@IP-045014189127.dynamic.medianet-world.de) (Changing host)
[22:24:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:24:55] *** Quits: rb (~augh@theguntretort.com) (Read error: Connection reset by peer)
[22:25:06] *** Joins: rwb (~augh@theguntretort.com)
[22:25:47] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[22:27:00] *** rwb is now known as rb
[23:15:21] <perro> it's not a bad idea
[23:15:34] <perro> kind of a very specialized mini console
[23:15:43] <perro> retro*
[23:16:00] *** tinytim is now known as typnoking
[23:34:33] <GreaseMonkey> a minimal ROM typically starts with a blob to talk to the given 3rd-party lockout chip or something like that, and then it jumps to the actual program which can be as simple as setting up the video mode then memcpy()ing to the framebuffer
[23:35:27] <GreaseMonkey> RSP is completely optional here although i do believe the blob copies at least part of itself to RSP RAM in order to initialise the 4 or 8 MB of RDRAM
[23:36:53] <GreaseMonkey> erm did i say memcpy() i meant to say memset() to force it to... some colour
[23:37:14] <GreaseMonkey> but memcpy() can work too if you don't count data as being part of the "minimal" part ;)
[23:38:48] <GreaseMonkey> anyway, long story short: there is no point in stripping down some C code to a minimal base when one can instead start from nothing and put whatever one needs to into the thing, and as an added bonus, this has already been done in assembly plenty of times
[23:40:43] <GreaseMonkey> oh and if anyone's tempted to say "what about the gigaleak? would that help?": the N64 scene has had "interestingly-obtained" documentation from back when the N64 was still seeing new games coming out (and yet N64 emulators are still beyond complete embarassment)
[23:42:39] <GreaseMonkey> but those docs were leaked out of SGI, so that ends up covering the RDP (the GPU) and the RSP (the secondary CPU, or as emulators treat it, the GPU), but not the PIF interface (so you still need unofficial docs for how to interface e.g. controllers and their paks and possibly also the save memory inside of the cartridge), and not the RDRAM interface
[23:43:11] <FromDiscord> <retkid> is there anyway to use del but have t be a specific value
[23:43:29] *** Joins: vicfred (~vicfred@user/vicfred)
[23:43:30] <FromDiscord> <retkid> ive found a time in my life where i need to remove values from a sequence but keep it the same length
[23:43:45] <GreaseMonkey> the lack of RDRAM controller docs is evident in one of the actually good but still not fast enough emulators, where it spoofs the behaviour to get the boot ROM to finish, and then depending on the lockout chip used it dumps the RAM size into a given location in RAM
[23:46:21] *** Joins: SebastianM (~seba@user/sebastianm)
