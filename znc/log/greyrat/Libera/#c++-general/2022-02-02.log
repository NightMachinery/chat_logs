[00:00:54] *** Joins: skapata (~Skapata@user/skapata)
[00:01:29] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[00:02:19] *** Quits: Leone (~Leo@216.154.23.229) (Read error: Connection reset by peer)
[00:05:13] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[00:12:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:16:14] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[00:16:58] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:18:18] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:20:10] <LordKalma> !rq
[00:20:10] <nolyc> LordKalma: <anyone> a testcase with a trainer but with no pokemon ain't no good testcase :>
[00:22:37] *** Joins: Kerr (~quassel@2601:602:ce00:287:a475:390:15af:b6e3)
[00:22:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:26:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:29:42] *** Quits: Kerr (~quassel@2601:602:ce00:287:a475:390:15af:b6e3) (Remote host closed the connection)
[00:33:44] *** Quits: andreasbuhr (~quassel@p549db65a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:34:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:42] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:35:14] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 268 seconds)
[00:37:15] *** Joins: xkuru (~xkuru@user/xkuru)
[00:37:28] *** Quits: magla (~gelignite@55d4daf5.access.ecotel.net) (Read error: Connection reset by peer)
[00:37:30] *** Joins: geli (~gelignite@55d4daf5.access.ecotel.net)
[00:37:39] <LordKalma>  /r/programmershumor taking a dab at c++ developers
[00:42:40] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:43:31] <sbrothy> whats that mean? R the language or R the reddit thingy?
[00:43:46] <Shell> reddit
[00:43:52] <LordKalma> https://www.reddit.com/r/ProgrammerHumor/comments/shvbi0/hating_rust_since_day_2147483648/
[00:43:57] <LordKalma> here's your answer
[00:44:39] <sbrothy> slow net here.. sec...
[00:44:54] * sbrothy claps slowly
[00:45:25] <sbrothy> ive never really used reddit
[00:45:42] <sbrothy> the site insist that i install an app on my phone and i hate apps
[00:45:52] <sbrothy> im a dinosaur
[00:46:20] *** Quits: geli (~gelignite@55d4daf5.access.ecotel.net) (Quit: Stay safe!)
[00:47:25] <sbrothy> you heard about "sealioning"?
[00:47:28] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[00:48:09] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[00:48:26] <sbrothy> im hopelessly behind i know: https://en.wikipedia.org/wiki/Sealioning
[00:50:31] <sbrothy> the things that ppl come up with
[00:51:30] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:a8cc:e12f:bc5e:d889)
[00:51:30] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:a8cc:e12f:bc5e:d889) (Changing host)
[00:51:30] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:51:42] <sbrothy> ive never understood the "langauge A is better than language B" discussions
[00:51:55] <LordKalma> it's just banter :)
[00:52:01] <sbrothy> whatever works
[00:52:04] <sbrothy> yeah :)
[00:52:24] <sbrothy> im sure fortune has a ton
[00:53:10] <sbrothy> <markm> c++: the power, elegance and simplicity of a hand grenade
[00:53:16] <sbrothy> -- fortune
[00:53:44] <LordKalma> more like C++: the power, elegance and simplicity of bronze-age tooling
[00:53:58] <sbrothy> heh. thats legacy for ya
[00:54:13] <sbrothy> thats how it feels being a dinosaur :)
[00:54:49] *** Joins: seninha (~seninha@user/seninha)
[00:57:29] <rpav> i dunno, bronze age tools were probably less-powerful and more-elegant/simple weren't tehy
[00:57:57] <rpav> i would think more like "the power, elegance, and simplicity of a rube goldberg machine"
[00:58:05] <rpav> though not quite that bad
[00:58:29] <sbrothy> well the longer you back the more control you have. like java--C-->asm
[00:58:43] <rpav> java -----------------------------> C -> asm
[00:58:45] <LordKalma> I just want to get shit done
[00:58:56] <sbrothy> exactly. so who cares what language it is?
[00:58:57] <rpav> LordKalma: yeah i hear that .. no perfect tool though
[00:59:04] <sbrothy> (as long as it isnt perl) :)
[00:59:08] <sbrothy> jj
[00:59:15] <rpav> C++ gives you a lot you don't get elsewhere
[00:59:26] <LordKalma> pain, mostly
[00:59:40] <rpav> sbrothy: yeah i will not do perl, i avoid even having to use perl things, despite my standards having been lowered by other things
[01:00:15] <sbrothy> i used to use it for small scripts, using active perl on windows. thers a tool which will make you perl file an executable.
[01:00:16] <LordKalma> building qt fucking requires perl for the config script
[01:00:21] <rpav> D:
[01:00:22] <sbrothy> was black magic to people
[01:00:27] <LordKalma> also, fuck perl
[01:00:34] <LordKalma> the only perl I use is a custom latexmk script
[01:00:37] <sbrothy> yeh. talk about ugly
[01:00:38] <sbrothy> :)
[01:00:42] <rpav> i think i have clocc somewhere
[01:00:45] <LordKalma> and holy shit how hard it was getting simple crap done
[01:00:56] <LordKalma> I do out-of-source builds with latex, not a common thing
[01:01:01] <sbrothy> perl is fire and forget
[01:01:09] <LordKalma> and adjusting the script to do so was too much effort
[01:01:18] <sbrothy> never go back to a perl script :)
[01:02:08] <rpav> this is why node wins the day .. tons of modules like perl, but relatively sane language you can write maintainable code in
[01:02:15] <rpav> or TS if you're OCD
[01:02:17] <sbrothy> its like the higher level a language gets the more sloppy the coders get
[01:02:33] <sbrothy> garbage collecters and what have you
[01:02:44] <sbrothy> heresy :)
[01:02:45] <LordKalma> https://gist.github.com/ruilvo/5816cc4b555d81b1dea83c9c0e2534da
[01:02:47] <rpav> nah .. but higher level language is lower barrier to get things done, so undisciplined n00bs write useful things
[01:02:49] <LordKalma> the script is just this
[01:02:53] <LordKalma> and I have no idea what it does
[01:02:57] <LordKalma> magic, for all I care
[01:03:02] <sbrothy> yeah. im all tongue in cheek
[01:03:12] <sbrothy> what gets the job done
[01:03:25] <sbrothy> as long as im not the one maintining or refactoring it
[01:03:47] <sbrothy> often its easier to start from scratch
[01:03:54] <rpav> LordKalma: that's surprisingly readable :o
[01:03:56] <sbrothy> than to get into the head of the creator
[01:04:21] <TinoDidriksen> Perl is fine so long as you're not dealing with multi-dimensional data.
[01:04:23] *** Joins: Kerr (~quassel@2601:602:ce00:287:ab06:3e9c:5e54:e8d)
[01:04:25] <sbrothy> ive seen wose
[01:04:32] <rpav> vastly worse
[01:04:35] <rpav> i've written vastly worse
[01:04:57] <sbrothy> "ther's more than one way to do it"
[01:05:08] <rpav> "none of them good"
[01:05:11] <sbrothy> haha
[01:06:57] <rpav> C++ you can do things sortof right, if you take the time to make the tools you need
[01:08:02] <johnny> so perl...
[01:08:40] <johnny> rpav, i'm surprised you mentioned node over python there tho
[01:08:58] <rpav> oh, right, python .. "one wrong way to do it"
[01:09:13] <johnny> i *mostly* prefer js/ts to python myself,even if python is a lot better.. just because it seems easier to play fuctionally
[01:09:22] <rpav> python is annoyingly lacking in expression compared to most other things
[01:09:39] <LordKalma> python is my workhorse at work
[01:09:47] <LordKalma> numpy and stuff carry me all day
[01:09:54] <LordKalma> notebooks are amazing
[01:10:09] <rpav> JS has sortof the right mix of stuff to get the job done without being too obnoxious about any of it, but you're not going to write UE6 in it
[01:10:20] <rpav> yeah python suppots bignum doesn't it?
[01:10:21] <johnny> it's wild that one single library really has been the base for an entire field
[01:10:27] <LordKalma> JS has those hilarious rules nobody gets
[01:10:35] <LordKalma> but I've been enjoying the language
[01:10:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[01:10:46] <LordKalma> really like the lambda syntax :p
[01:10:51] <johnny> lol
[01:10:57] <LordKalma> () => :D everything inline
[01:11:18] <rpav> JS is better since ES6 about most things .. python with a good API isn't bad though despite my dislike for the whitespace thing
[01:11:28] <LordKalma> myArray.map((element) => {/* 50 lines function */});
[01:11:28] <rpav> like houdini's python api is the best i've ever used
[01:11:33] <imMute> LordKalma: C# has that too and I love it.   the lambda expression stuff added recently to C# is also neat
[01:11:43] <johnny> LordKalma, you just don't have to do that :)
[01:11:45] <sbrothy> yeah lambdas are ok. i have a fetish for std::stringstream too
[01:11:56] <rpav> LordKalma: yeah unfortunately JS makes it a bit easy to be lax, but it's also easy to split out that kind of thing into at least a local
[01:11:59] <LordKalma> johnny, I said I like it :)
[01:12:07] <rpav> but i split out lambdas into locals in C++
[01:12:21] <rpav> auto doThing = [&](..) { ... }; // super useful especially when prototyping
[01:12:25] <LordKalma> I also write lambdas inline using <algorithm>s
[01:13:01] <LordKalma> can't be bothered
[01:13:19] <LordKalma> imMute, I want to like C# but C# doesn't want me to like it :(
[01:13:34] <rpav> i'd try C# but like rust it does nothing for any problem i have
[01:13:50] <rpav> it's probably fine, i can read any sample i've seen
[01:13:57] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1df9:ed4:9e55:fcaf)
[01:14:01] <LordKalma> C# is the right abstraction level for application programming imho
[01:14:09] <johnny> If i wrote games that weren't super crazy then I would have learned C#
[01:14:16] <johnny> XNA gave us lots of good games
[01:14:23] <johnny> super portable
[01:14:38] <imMute> LordKalma: same.  I really like parts of C# and really hate other parts.  s/C#/C++/ and it's still true lol
[01:14:38] <rpav> yeah and like, monogame has a very solid lineup, it's clearly no joke
[01:14:41] <johnny> also a fair numver go linux apps were in C#
[01:14:43] <rpav> or unity i guess
[01:15:01] <johnny> number of* ... like banshee . that was a good linux app at the time
[01:15:08] <LordKalma> C# on cross platform is quite recent, the ecosystem isn't yet up for it
[01:15:16] <LordKalma> and ALL THE GUI FRAMEWORKS USE FLUENT DESIGN
[01:15:17] <LordKalma> FFS
[01:15:22] <LordKalma> JUST GIVE ME REGULAR UIs
[01:15:26] <johnny> LordKalma, we had a ton of pretty ok C# apps using gtk# for awhile!
[01:15:29] <LordKalma> with dense, keyboard and mouse APIs
[01:15:37] <johnny> but then novell broke apart and that was the end of that!
[01:15:56] <johnny> they all died within a year
[01:16:26] <rpav> LordKalma: which one is fluent again?
[01:16:30] <LordKalma> windows 10
[01:16:35] <rpav> 🤔
[01:17:08] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:17:10] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d44d:e9a:465c:99de) (Ping timeout: 268 seconds)
[01:17:28] <rpav> i dunno, i won't be happy until i as a user can build new UIs for my computers' functionality without having to write much if any code
[01:17:51] <rpav> and i as a developer can write new functionality and get some basic UI without having to make it manually
[01:18:11] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:18:16] <johnny> so you're into no code and low code as people are calling it these days?
[01:18:31] <LordKalma> https://avaloniaui.net/ I want to like this, but it's a bit frustrating in my experience
[01:18:40] <rpav> johnny: only if it comes to games
[01:18:45] <johnny> at least people were doing interesting things with nodered for home automation anyways
[01:18:50] <rpav> as a dev, i'm into total separation of UI and functionality
[01:19:04] <johnny> i just leave all that non web gui stuff to you folks..
[01:19:05] <LordKalma> MVVM? :D
[01:19:08] <johnny> keep up the good work is what i say
[01:19:12] <LordKalma> or Flux
[01:19:19] <johnny> it's web only for me
[01:19:21] <rpav> i should be able to as a user build new UIs that provide interactive views of my data and solve the problems i need; as a dev i shouldn't have to write boilerplate
[01:19:29] <johnny> hypercard?
[01:19:44] <LordKalma> that0s all nice rpav for data-centric applications
[01:19:50] <johnny> why hasn't somebody rebuilt hypercard yet?
[01:19:50] <LordKalma> not every application is a "todo list" app
[01:20:15] <rpav> LordKalma: no but very many deal with some rearrangement and editing of data .. basically anything on the web, and that's a _lot_ of things
[01:20:37] <rpav> a big exception is games, which require the graphics tightened up in level 3
[01:21:07] <LordKalma> yeah, I'm interested in SDR/DSP, and I never really understood how you'd do MVVM-like designs with it
[01:21:09] <rpav> _also_ this isn't to say you _don't_ need specialized components for some views of things
[01:21:15] <LordKalma> the visualization and the data are so specific and bound
[01:21:16] <johnny> making games sure seems difficult..
[01:21:22] <LordKalma> and it's mostly about controls, not visualization
[01:22:08] <rpav> like you want some audio analysis software, going to need specialized visualizers and stuff .. building specific but independent UI components that provide specialized views isn't contrary to this idea, it's 90% of the idea
[01:22:30] <rpav> like a text entry field is still a specialized view of text
[01:22:52] <LordKalma> maybe
[01:23:04] <LordKalma> there's the big thing that I don't know shit
[01:23:07] <LordKalma> I can't design applications :)
[01:23:10] <rpav> the other part is just that once you have a lot of those, you can kinda use them as building blocks if they're properly composable
[01:23:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:23:52] <rpav> LordKalma: you can, it's just a matter of slowly putting the parts togethe
[01:24:01] <LordKalma> yah
[01:24:05] <rpav> my problem _is apps_, though
[01:24:39] <rpav> like you write some tiny function that does the thing you want, it's like 20 lines, it works, then you write 100 lines of command line parsing, 500 lines of file read/write, 5000 lines of gui, etc
[01:25:07] <LordKalma> writing GUI is amazingly boilerplaty
[01:25:09] <rpav> you should be able to write your 20 lines and get some basically-usable gui to call it
[01:25:26] <LordKalma> having to write GUI behaviour and logic is so boring and annoying
[01:25:39] <rpav> not have to specifically write data saving and loading if it's built on mostly existing things
[01:26:07] <rpav> yeah especially with "modern" frameworks
[01:26:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:32:40] <cbreak> LordKalma: depends on what your UI interfaces with
[01:33:45] *** Joins: badone (~badone@209.132.189.152)
[01:35:50] <LordKalma> humans, mostly
[01:36:05] <LordKalma> maybe a cat, in case it runs over the keyboard?
[01:36:35] <Alipha> i once had a cat execute a sql statement which inserted a bunch of duplicate records into my test database
[01:37:20] <LordKalma> cat "INSERT records" > mariadb -e // ?
[01:37:24] <LordKalma> ( I don't speak unix)
[01:40:10] <cbreak> games are different from 3d modeling software, which are different from 3d raytracing software. User interface wise. I don't think GUI is neccessarily boilerplaty
[01:40:23] <cbreak> it's annoying to write though.
[01:40:46] <cbreak> because a good UI has to be usable by users. And users are an incomprehensible mess.
[01:41:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:59] *** ChanServ sets mode: +v npaperbot
[01:45:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:45:51] <rpav> gui is very boilerplatey
[01:46:20] <rpav> _certain views_ on data (e.g., a 3d viewport in a modeler) require specific code, obviously, but every non-composite view on data does
[01:47:01] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:2deb:4e50:c1b8:266c) (Quit: Client closed)
[01:47:09] <rpav> this is basically like "scalar vs struct" .. imagine having to write specific code for every struct that manually placed values in a blob of memory bytes you malloc'd, instead of simply saying `struct { ... };`
[01:48:11] <rpav> that's what writing 95% of gui is like; even if you get to reuse the functionality _of_ the components, you very often have to do a lot of manual management of them, evne building relatively simple forms
[01:49:14] <cbreak> for form-style GUIs there are other languages than C++
[01:49:29] <rpav> it doesn't matter, they all work pretty similarly
[01:49:45] <cbreak> so you don't have to write the glue code for every single thing
[01:49:53] <rpav> i didn't claim you did
[01:49:56] <cbreak> (or at least not as much)
[01:51:12] <rpav> it's just crazy that even the most modern, well-developed UI stuff even on the web, which is basically where-the-money-is, hasn't gone far beyond
[01:52:03] <rpav> or mobile which is usually some craptastic hybrid
[01:53:16] <cbreak> web ui is painful
[01:53:26] <cbreak> I much prefer writing Qt GUIs in C++ directly even...
[01:53:33] <cbreak> and that is not fun.
[01:54:02] <rpav> it's a lot less painful these days, but the document model and CSS is still horrific
[01:54:22] <rpav> what's even worse is all the kids who grew up with CSS and think that's just perfectly fine, the way things ought to be
[01:55:45] <cbreak> react. oh my god how spaghetti that thing is...
[01:55:56] <cbreak> it's probably better for someone that knows how it works... but... honestly
[01:56:11] <cbreak> I grew up with CSS.
[01:56:35] <rpav> react is definitely not the best example
[01:56:54] <cbreak> I wrote a java script solar system simulator that proved (empirically) why the 3 body problem is so hard in javascript, with moving divs, 20 years ago.
[01:57:05] <cbreak> but still... modern webdev is not my thing.
[01:57:10] <rpav> it's not the good modern lightweight component stuff that's basically builtin to the standard
[01:57:52] <rpav> like, it has a lot of issues, and a lot of them still revolve around the DOM, but it's _actually_ sortof a step in a right-ish direction, which is more than i can say for most other UI stuff
[02:01:01] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:02:35] *** Joins: markong (~kvirc@213.146.188.203)
[02:03:11] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:84f2:50c1:8e6c:8c39)
[02:03:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:04:45] *** Tobbi__ is now known as Tobbi
[02:06:30] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:09:44] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:7690:918e:23c0:bdae)
[02:23:09] *** Quits: jsbach (~jsbach@2a01:c22:a866:e900:9133:b6ff:33a0:ceec) (Ping timeout: 268 seconds)
[02:23:50] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:23:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:27:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:31:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1df9:ed4:9e55:fcaf) (Ping timeout: 250 seconds)
[02:32:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5a5:64d4:ee9a:11a1)
[02:33:21] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 250 seconds)
[02:35:14] *** Joins: jsbach (~jsbach@2a01:c22:a866:e900:185f:a8c8:2ed6:b9dd)
[02:36:13] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:683d) (Quit: Leaving)
[02:38:22] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 250 seconds)
[02:40:38] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[02:51:23] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[02:52:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:54:07] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:f02b:1d66:81c4:7595)
[02:54:37] *** Joins: ferdna (~ferdna@user/ferdna)
[02:55:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:02:17] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:03:20] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:03:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:05:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[03:06:16] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:06:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:24:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:27:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[03:31:25] *** Joins: Azem (~haise01@user/haise01)
[03:32:00] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:35:34] *** Quits: jsbach (~jsbach@2a01:c22:a866:e900:185f:a8c8:2ed6:b9dd) (Ping timeout: 250 seconds)
[03:45:12] <ezzieyguywuf> if I have a `struct Outer { int counter; struct Inner { void someFunc()}; };`, does `someFunc` have access to `counter`?
[03:45:44] <hnOsmium0001[m]> ezzieyguywuf: yes
[03:45:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5a5:64d4:ee9a:11a1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:47:39] <ezzieyguywuf> oh cool!
[03:48:26] <hnOsmium0001[m]> though not the other way around, i.e. things in Outer can't access private members of Inner
[03:49:03] <ezzieyguywuf> that makes sense
[03:49:18] <ezzieyguywuf> so `void someFunc(){ ++counter;}` should work?
[03:49:21] <ezzieyguywuf> I'm seeing a linter error
[03:49:38] <ezzieyguywuf> "use of non-static data member"
[03:49:50] <hnOsmium0001[m]> ezzieyguywuf: note that Inner doesn't implicitly store a reference to some Outer object unlike java (IIRC)
[03:50:13] <hnOsmium0001[m]> so you'll have to write something like `struct Inner { Outer* self; Inner(Outer& o) : self(&o) {} };`
[03:50:34] <hnOsmium0001[m]> and then `void someFunc() { ++self->counter; }`
[03:52:54] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[04:11:06] *** Joins: dfkfs (~dfkfs@178.49.152.42)
[04:13:13] *** Quits: MatSharrow (~matthew@36.115.9.51.dyn.plus.net) (Ping timeout: 256 seconds)
[04:17:47] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 250 seconds)
[04:19:46] *** Quits: dfkfs (~dfkfs@178.49.152.42) (Quit: Client closed)
[04:24:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:25:14] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 252 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:28:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:32:41] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:32:58] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Read error: Connection reset by peer)
[04:36:02] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:7690:918e:23c0:bdae) (Remote host closed the connection)
[04:39:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:53:08] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 250 seconds)
[04:53:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:00:42] *** Joins: Xardas (~Xardas@2a02:3032:8:5e64:d47c:132e:2146:cf02)
[05:01:31] *** Quits: Xardas (~Xardas@2a02:3032:8:5e64:d47c:132e:2146:cf02) (Client Quit)
[05:02:24] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[05:05:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:09:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:10:21] *** Joins: Xardas (~Xardas@2a02:3032:8:5e64:d47c:132e:2146:cf02)
[05:17:16] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:25:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:28:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:32:47] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:35:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:41:07] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:41:25] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[05:41:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:02] *** ChanServ sets mode: +v npaperbot
[05:42:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:85ab:562:f728:2658) (Quit: Quit)
[05:42:59] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[05:45:49] *** Joins: adder` (~adder@user/adder)
[05:58:34] *** Quits: proller (~p@2a02:6b8:b081:a404::1:13) (Ping timeout: 250 seconds)
[06:01:40] <yolo> for c++ exception to work with c apis, is it fair to say i should avoid C-style: `if(shm_get-failed){perror("shm_get"); return -1}`, instead : `if(shm_get-failed){ perror("shm_get"); throw something`, i.e. replace exit(1)/return with throw?
[06:02:52] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[06:02:59] <yolo> the CPL has chapter 13 on exception for its 4ed, while 3ed it has a length appendix E for exceptions, it's unclear which one is preferred
[06:03:29] *** Quits: Xardas (~Xardas@2a02:3032:8:5e64:d47c:132e:2146:cf02) (Quit: Client closed)
[06:06:20] *** Joins: jancoow (~jancoow@user/jancoow)
[06:11:17] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:16:58] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:23:39] *** Quits: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8) (Ping timeout: 268 seconds)
[06:24:18] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 260 seconds)
[06:25:59] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:29:20] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:34:02] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46)
[06:34:58] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 250 seconds)
[06:35:03] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[06:36:54] <Hello71> well what does "work with" mean
[06:37:22] <Hello71> you can throw exceptions if you want, and you can return error codes if you want. c++ doesn't require either, and standard c++ apis use both
[06:37:27] <yolo> c++ calls posix shm_get calls , i.e. c++ mixes with c
[06:38:28] <yolo> i read that in c++ you should avoid exit(1) and use exception instead, to give your program a way to RAII at least
[06:39:04] <Hello71> return calls destructors just the same as exceptions
[06:39:14] <yolo> so yes i can return error-code as C does, but it made code very verbose
[06:39:39] <Hello71> there are benefits and drawbacks to using exceptions
[06:39:43] <yolo> plus the exit()/abort voids all your c++ RAII/dtor potentially
[06:40:03] <johnny> one could also use a Result type
[06:40:37] <johnny> i'd definitely prefer that over regular C style error codes
[06:40:52] <yolo> Hello71: yes return is fine, but exit()/abort() is not, normally in C when you have an errno, you exit(1)
[06:42:06] <yolo> johnny: never used Return type, what is it? exceptions does increase the binary size, but not that much, also I'm not doing real-time system which does not like exceptions
[06:42:12] <Hello71> calling exit and abort is highly discouraged in library code in both c and c++
[06:42:33] <norias> Hello71: why?
[06:43:08] <Hello71> well the problem is clear, the application has no chance to clean up (except by global destructors/atexit)
[06:43:14] <norias> oh right
[06:43:17] <yolo> johnny: 'return type' you mean std::pair(result,errorcode)?, that's better than C's single value return, but still i have to check every function
[06:43:34] <Alipha> yolo: a Result type is an object that can either hold a "value" or an "error".
[06:44:26] *** Joins: smeso (~smeso@user/smeso)
[06:44:41] <yolo> google directs me to: https://github.com/bitwizeshift/result
[06:44:48] <Hello71> like std::variant, but normally implemented more efficiently
[06:46:14] <johnny> std::expected-lite is one implementation of the proposed paper for a stdlib version called std::expected
[06:46:22] *** Joins: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328)
[06:46:23] <johnny> i have no idea of the status of that paper tho
[06:46:31] <Alipha> yolo: go ahead and use exceptions. For errors which are not "exceptional", some people say you should use return codes (or Result or std::variant or such), but if you prefer exceptions for all types of errors, that seems completely fine
[06:47:13] <rpav> the only real case to avoid exceptions is if you care about performance in a tight loop
[06:47:24] <johnny> or you're doing embedded..
[06:47:33] <rpav> i.e. probably don't use them for flow control in this case
[06:47:40] <johnny> i can't use exceptions for my mcu project
[06:47:51] <rpav> if you can't use excpetions you're not using C++
[06:47:59] <yolo> https://www.cppstories.com/2021/sphero-cpp-return/ recommends std::optional for result type
[06:48:02] <johnny> well that'sjust ho all the embedded C++ thingies are
[06:48:30] <rpav> though to be fair plenty of compilers don't implement all the things, but exceptions are a pretty big thing vs like, codecvt or pmr
[06:48:34] <johnny> yolo, that doensn't even mention std::expected-lite or any of the other implementations
[06:48:53] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[06:49:08] <johnny> yolo, basically don't follow the advice of that column if it doesn't mention the non stdlib alternatives and you can use the alternatives
[06:49:25] * rpav still wants return-break-value
[06:50:00] <yolo> Alipha: thanks, it's indeed important to realize exceptions !== error-return fully and they're differently
[06:50:19] * yolo can never type 
[06:50:45] <johnny> it'd be fine if tht article MENTIONED and discarded those alternatives, but it says "there are others, but we're only talking about these" which really seems to say "we only care about what's in the stdlib"
[06:54:38] <smallville7123> i hate edge cases ;-;
[06:56:01] <kalven> what about corner cases?
[06:56:08] <rpav> but not vertex or face cases?
[06:59:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:59:47] <smallville7123> i hate complicated edge cases ;-;
[07:01:47] *** Joins: adeliktas78 (~adeliktas@i59F5F5AE.versanet.de)
[07:02:15] <yolo> johnny: another side is that, for a 'default' error handling you have to compare like 5 or 6 options in c++ and in the end everyone pick one he/she favors
[07:02:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:03:44] <yolo> coreguidelines does not 'recommend' one yet, other than 'here is what you should do exception'
[07:03:47] *** Quits: adeliktas (~adeliktas@i59F52538.versanet.de) (Ping timeout: 256 seconds)
[07:03:47] *** adeliktas78 is now known as adeliktas
[07:03:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:06:15] <yolo> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-errors
[07:06:42] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:44] *** Joins: malloy (~jimery@120.235.172.169)
[07:09:30] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:10:01] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:12:24] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:15:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:16:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:18:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:20:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:26:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22)
[07:26:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:30:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:30:31] *** Quits: malloy (~jimery@120.235.172.169) (Read error: Connection reset by peer)
[07:36:05] *** Joins: malloy (~jimery@120.235.172.169)
[07:42:48] <johnny> yolo, i'd say most people recommend exceptions for C++ because the stdlib throws them!
[07:43:27] <johnny> so whether it's "recommended" or not .. you don't really have a choice but to deal with exceptions if you use the stdlib
[07:43:42] <johnny> that is why everybody here just says use exceptions!
[07:44:12] <johnny> although google's own style guide recommends against exceptions where feasible..
[07:44:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:44:47] <kalven> because of legacy reasons
[08:02:12] *** Joins: callq (~callq@2409:4062:2e9e:2081:73:e6d7:2365:394e)
[08:06:54] <ezzieyguywuf> hnOsmium0001[m]: thanks for the tip
[08:11:20] <Alipha> I think it's ville who doesn't like exceptions because they're hidden program flows, which is a valid complaint
[08:18:11] <MaddHatter> hidden program flow is like the whole point. Otherwise it's visible program flow and you have to wait through if (success) { do more stuff } else { deal with it } all over the place and it's that much harder to read
[08:18:20] <MaddHatter> ^wade through
[08:18:58] <MaddHatter> to the point I'd say that the tedium of _constantly_ checking errors leads to poorer error handling in general
[08:20:04] <kalven> that seems like a misunderstanding of what they mean
[08:22:39] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[08:23:10] <Alipha> ville mostly just wants an indication that a function can throw an exception, I believe. Something like: `x = try foo();` or `x = foo()?;` or something
[08:23:31] <Alipha> I probably should stop speaking for ville though :-)
[08:23:34] <MaddHatter> try foo()... or what?
[08:24:57] <Alipha> `try foo()` is simply a visual indicator that foo() may throw. It has no semantic behavior
[08:25:37] <MaddHatter> exception specifications were supposed to do that, I thought
[08:26:58] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:27:16] <Alipha> Which having to go to the function declaration to see if a function throws isn't very conductive to understanding the program flow of a segment of code you're trying to understand
[08:28:10] <MaddHatter> your IDE probably shows it to you, and it's certainly better than having to pore over the function's source
[08:28:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:30:29] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:41:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:41:47] <ville> MaddHatter: that's just lack of your imagination if you think syntactically the only other option is if-else if-else chains.
[08:45:33] <ville> Alipha: the complaint is two-part: 0) function's signature has no evidence, so trying to use a function i don't know completely offers no support and thus it wastes my time to find out if something can fail 1) function's usage has no evidence, so trying to read code now has the same problem
[08:46:48] <ville> Alipha: and since there is no language support for keeping documentation upto date the only practical problem then often is that you go read the source code and you have to do it for the whole call tree
[08:48:15] <ville> now exceptions are superior in one aspect, as far as the syntax involved in c++ goes anyway: they have evidence when the error channel of a function is taken when the current scope throws one because they use a special keyword to do so
[08:49:13] <ville> you can very quickly search for all error cases in a function. well if it doesn't ever call anything else, because then complainst 0) and 1) kick in
[08:49:18] *** Quits: emerent (~quassel@p200300cd57044339ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:49:44] *** Joins: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de)
[08:50:37] <kalven> exceptionistas will just say that you should simply expect that anything can throw
[08:51:00] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[08:51:48] <MaddHatter> that's not really fair though. If you don't know what can be thrown, then all you can really do is pass it on or give up, which isn't really useful
[08:52:40] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Client Quit)
[08:53:36] <MaddHatter> ville: not always if/else, but other options are just as bad to read. Or maybe I am just unimaginitive, in which case do you have any examples of what you'd call easy-to-read, clean error handling without exceptions?
[08:55:03] *** Quits: Tokamak_ (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:55:46] <yolo> somehow golang and c-linux-kernel can do large project fine without exceptions though
[08:56:23] <MaddHatter> other languages seem to have realized this is a pain point and addressed it through the language design
[08:57:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:57:48] <kalven> the error handling in go was of course a very concious decision
[09:06:23] *** Quits: chozorho (~chozorho@2601:146:300:c30::e75e) (Ping timeout: 250 seconds)
[09:07:25] *** Joins: chozorho (~chozorho@2601:146:300:c30::ce9e)
[09:08:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[09:08:12] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (*.net *.split)
[09:08:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[09:08:12] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[09:08:12] *** Quits: badone (~badone@209.132.189.152) (*.net *.split)
[09:08:12] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[09:08:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[09:08:12] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[09:08:12] *** Quits: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu) (*.net *.split)
[09:08:12] *** Quits: ville (~ville@user/ville) (*.net *.split)
[09:08:12] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[09:08:12] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (*.net *.split)
[09:08:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:08:12] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[09:08:12] *** Quits: Donno (~donno@58.84.206.182) (*.net *.split)
[09:08:12] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[09:08:12] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (*.net *.split)
[09:08:12] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[09:08:12] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (*.net *.split)
[09:08:13] *** Quits: jns (~x@user/jns) (*.net *.split)
[09:08:13] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[09:08:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[09:08:13] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[09:08:13] *** Quits: HvszrStykp (~X@81.171.62.84) (*.net *.split)
[09:08:13] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[09:08:13] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[09:08:13] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:08:13] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[09:08:13] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[09:08:13] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[09:08:13] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[09:08:13] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (*.net *.split)
[09:08:13] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[09:08:13] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (*.net *.split)
[09:08:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:08:13] *** Quits: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[09:08:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (*.net *.split)
[09:08:13] *** Quits: adeliktas (~adeliktas@i59F5F5AE.versanet.de) (*.net *.split)
[09:08:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (*.net *.split)
[09:08:13] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[09:08:14] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:84f2:50c1:8e6c:8c39) (*.net *.split)
[09:08:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[09:08:14] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[09:08:14] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[09:08:14] *** Quits: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (*.net *.split)
[09:08:14] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[09:08:14] *** Quits: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net) (*.net *.split)
[09:08:14] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[09:08:14] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:08:14] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (*.net *.split)
[09:08:14] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[09:08:14] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (*.net *.split)
[09:08:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:08:14] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[09:08:14] *** Quits: mIGu (mig21@user/naur) (*.net *.split)
[09:08:14] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:08:14] *** Quits: naur (naur@user/naur) (*.net *.split)
[09:08:14] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[09:08:14] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[09:08:14] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[09:08:14] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[09:08:14] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[09:08:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[09:08:15] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[09:08:15] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[09:08:15] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:15] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:15] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[09:08:15] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[09:08:15] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[09:08:15] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (*.net *.split)
[09:08:15] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[09:08:15] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: phoenix (phoenix@user/phoenix) (*.net *.split)
[09:08:15] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[09:08:15] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[09:08:15] *** Quits: psb___ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[09:08:16] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[09:08:16] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[09:08:16] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (*.net *.split)
[09:08:16] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[09:08:16] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[09:08:16] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:08:16] *** Quits: nshire_ (~nshire@47.146.41.156) (*.net *.split)
[09:08:16] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[09:08:16] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (*.net *.split)
[09:08:16] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[09:08:16] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[09:08:16] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[09:08:16] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[09:08:16] *** Quits: Dru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca) (*.net *.split)
[09:08:16] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[09:08:16] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[09:08:16] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[09:08:16] *** Quits: Raziel (~Raziel@user/raziel) (*.net *.split)
[09:08:16] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[09:08:16] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[09:08:16] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[09:08:16] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[09:08:16] *** Quits: nelubit (~nelubit@user/nelubit) (*.net *.split)
[09:08:16] *** Quits: sonic (~sonic@user/sonic) (*.net *.split)
[09:08:16] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[09:08:16] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[09:08:16] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[09:08:16] *** Quits: eck (~root@user/eck) (*.net *.split)
[09:08:16] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[09:08:17] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[09:08:17] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[09:08:17] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:08:17] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[09:08:17] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[09:08:17] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[09:08:17] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[09:08:17] *** Quits: WeblordPepe (~pepe@104.248.83.14) (*.net *.split)
[09:08:17] *** Quits: malloy (~jimery@120.235.172.169) (*.net *.split)
[09:11:51] *** Quits: smeso (~smeso@user/smeso) (Ping timeout: 256 seconds)
[09:12:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:12:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 250 seconds)
[09:13:03] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:18:05] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:21:14] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:21:14] *** Joins: cncr04s (~cncr04s@afxr.net)
[09:21:14] *** Joins: m42e (~m42e@pb42.de)
[09:21:14] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[09:21:14] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:21:14] *** Joins: nshire_ (~nshire@47.146.41.156)
[09:21:14] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:21:14] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[09:21:14] *** Joins: noarb (~noarb@user/noarb)
[09:21:14] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[09:21:14] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[09:21:14] *** Joins: Dru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca)
[09:21:14] *** Joins: causative (~halberd@user/causative)
[09:21:14] *** Joins: Cienisty (Cienisty@user/cienisty)
[09:21:14] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[09:21:14] *** Joins: Raziel (~Raziel@user/raziel)
[09:21:14] *** Joins: syrius (syrius@titan.stormtek.net)
[09:21:14] *** Joins: deepy (deepy@user/deepy)
[09:21:14] *** Joins: obiwahn (~heini@user/obiwahn)
[09:21:14] *** Joins: geordi (~geordi@tinodidriksen.com)
[09:21:14] *** Joins: nelubit (~nelubit@user/nelubit)
[09:21:14] *** Joins: sonic (~sonic@user/sonic)
[09:21:14] *** Joins: Cyp (~cyp@213.237.88.120)
[09:21:14] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[09:21:14] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[09:21:14] *** Joins: eck (~root@user/eck)
[09:21:14] *** Joins: ivan (~ivan@user/ivan)
[09:21:14] *** Joins: minto (~mintograd@47.201.5.61)
[09:21:14] *** Joins: elemongw (~elemongw@20.107.36.50)
[09:21:14] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:21:14] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[09:21:14] *** erbium.libera.chat sets mode: +v geordi
[09:22:45] *** Joins: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de)
[09:22:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:22:45] *** Joins: adeliktas (~adeliktas@i59F5F5AE.versanet.de)
[09:22:45] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[09:22:45] *** Joins: jancoow (~jancoow@user/jancoow)
[09:22:45] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:84f2:50c1:8e6c:8c39)
[09:22:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:22:45] *** Joins: miklcct (~quassel@vps.miklcct.com)
[09:22:45] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[09:22:45] *** Joins: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[09:22:45] *** Joins: Furai (~Furai@furai.pl)
[09:22:45] *** Joins: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net)
[09:22:45] *** Joins: buhman (sid411355@user/buhman)
[09:22:45] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[09:22:45] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[09:22:45] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:22:45] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[09:22:45] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[09:22:45] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[09:22:45] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[09:22:45] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[09:22:45] *** Joins: mIGu (mig21@user/naur)
[09:22:45] *** Joins: edr (~edr@user/edr)
[09:22:45] *** Joins: naur (naur@user/naur)
[09:22:45] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[09:22:45] *** Joins: AssKoala (~asskoala@user/asskoala)
[09:22:45] *** Joins: fluter (~fluter@user/fluter)
[09:22:45] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[09:22:45] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[09:22:45] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:22:45] *** Joins: unyu (~pyon@user/pyon)
[09:22:45] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[09:22:45] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[09:22:45] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[09:22:45] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[09:22:45] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[09:22:45] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[09:22:45] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[09:22:45] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[09:22:45] *** Joins: FLHerne (flh@flherne.uk)
[09:22:45] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:45] *** Joins: phoenix (phoenix@user/phoenix)
[09:22:45] *** Joins: RandomReader (~RandomRea@user/randomreader)
[09:22:45] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[09:22:45] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[09:22:45] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[09:22:45] *** erbium.libera.chat sets mode: +v nolyc
[09:22:45] *** Joins: rb (~augh@theguntretort.com)
[09:22:45] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[09:23:35] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[09:23:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:23:35] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[09:23:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:23:35] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[09:23:35] *** Joins: badone (~badone@209.132.189.152)
[09:23:35] *** Joins: KombuchaKip (~kip@192.252.230.5)
[09:23:35] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[09:23:35] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[09:23:35] *** Joins: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu)
[09:23:35] *** Joins: ville (~ville@user/ville)
[09:23:35] *** Joins: Khoyo (~khoyo@user/khoyo)
[09:23:35] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[09:23:35] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:23:35] *** Joins: cursey (~cursey@user/cursey)
[09:23:35] *** Joins: Donno (~donno@58.84.206.182)
[09:23:35] *** Joins: foul_owl (~kerry@94.140.8.107)
[09:23:35] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[09:23:35] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[09:23:35] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[09:23:35] *** Joins: jns (~x@user/jns)
[09:23:35] *** Joins: purplex (~purplex@user/purplex)
[09:23:35] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:23:35] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[09:23:35] *** Joins: HvszrStykp (~X@81.171.62.84)
[09:23:35] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[09:23:35] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[09:23:35] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:23:35] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:23:35] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[09:23:35] *** Joins: NOTevil (~notevil@user/notevil)
[09:23:35] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[09:23:35] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[09:23:35] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[09:23:35] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[09:23:35] *** Joins: flynn (~mcbloch@user/flynn)
[09:23:35] *** erbium.libera.chat sets mode: +v npaperbot
[09:24:22] *** Quits: ville (~ville@user/ville) (Quit: ville)
[09:24:39] *** Joins: ville (~ville@user/ville)
[09:24:51] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[09:24:51] *** Joins: bjs (sid190364@user/bjs)
[09:24:51] *** Joins: jessicara (~shirogits@user/jessicara)
[09:25:24] *** Joins: malloy (~jimery@120.235.172.169)
[09:25:52] *** Quits: chozorho (~chozorho@2601:146:300:c30::ce9e) (Quit: WeeChat 3.0)
[09:26:19] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[09:27:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:27:43] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[09:28:00] <Alipha> Result types
[09:29:25] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[09:29:34] <MaddHatter> the key to result/option working is the cultural expectation that anything can accept an error/none and will handle it sanely
[09:29:35] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:30:00] <MaddHatter> then you can chain calls together without worrying about a segfault (or whatever equivalent failing)
[09:30:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:30:58] *** Joins: ville (~ville@user/ville)
[09:31:14] <ville> well this is functioning swimmingly...
[09:31:37] <MaddHatter> I'm on molybdenum and seem to be doing okay
[09:31:47] <ville> MaddHatter: not sure what was the last message you saw from me
[09:32:05] <MaddHatter> if all you want is to abort on using an return value ... <- that one
[09:32:17] <ville> ok that's all of it then
[09:33:07] <MaddHatter> that statement-exprs thing looks a little scary. In the sense that the doc has a lot of "this use case is a problem and so is that one" (but other than that, it's great! /s)
[09:33:57] <MaddHatter> I try not to use compiler-specific -isms generally, too
[09:36:16] <ville> umm, it spends majority of highlighting the problems with macros?
[09:38:49] <MaddHatter> maxint is the one using statement-exprs, and it's the one that they say will not produce the correct results
[09:38:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:39:16] <smallville7123> one good thing about the macro pre-processor is it can expose private members in certain cases such as when being built with googletest
[09:39:56] <smallville7123> which probably cannot be done in a language that does not have a macro preprocessor
[09:40:07] <MaddHatter> when I need to do that, I usually just make a child class that has an accessor or makes the thing I want public
[09:40:09] <smallville7123> at least easily
[09:40:51] <smallville7123> MaddHatter: then users could use this child class in non-test builds
[09:41:09] <MaddHatter> I generally create those classes in the place they're used and don't export them
[09:41:11] <ville> MaddHatter: if you are talking about shadwoing then that's just how c++ works
[09:41:19] <ville> shadowing
[09:41:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:00] *** ChanServ sets mode: +v npaperbot
[09:42:36] <smallville7123> granted users can also intentionally misuse the test-build
[09:42:37] <MaddHatter> anyway, I gotta run.
[09:42:38] * MaddHatter ->
[09:42:49] <ville> https://bloglitb.blogspot.com/2011/12/access-to-private-members-safer.html
[09:43:00] <MaddHatter> Users can always #define private public. Yes, I've seen that before.
[09:43:09] <ville> hhe
[09:43:11] <ville> heh
[09:43:22] <ville> give it a read then
[09:44:25] <smallville7123> haha
[09:44:52] <smallville7123> i just assumed public and private to be reserved keywords
[09:45:02] <ville> they are
[09:45:12] <smallville7123> oh
[09:45:53] <smallville7123> "16:13:00 MaddHatter: Users can always #define private public. Yes, I've seen that before." how does this work if private is a reserved preprocessor keyword?
[09:46:07] <smallville7123> (eg you cannot define it)
[09:46:12] <ville> preprocessor doesn't care about it
[09:46:31] <smallville7123> oh
[09:46:33] <ville> it's the compiler that cares about it which enforces the access rules
[09:46:46] <smallville7123> wonder what happens if you do that to std classes
[09:47:01] <smallville7123> like before including anything from std
[09:47:02] <ville> it's undefined of course
[09:47:21] <smallville7123> would probably break things lol
[09:47:39] <ville> i would expect things to mostly just work
[09:48:22] <smallville7123> at least things that expect symbol names to contain "private" in them and not finding them cus they are replaced with "public", if any
[09:48:24] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:48:46] <smallville7123> idk lol
[09:49:09] <smallville7123> anyway
[09:49:41] * smallville7123 resorts to input logging on all function rules cus i dont have any kind of tracing function
[09:55:30] <smallville7123> grrrrrr something is not being backtracked correctly but i have no idea what ;-;
[09:56:14] <smallville7123> https://gist.github.com/mgood7123/c0a830bcec23fd86e4c9e15a952589ef
[09:56:39] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[09:57:51] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[10:12:51] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:13:56] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 252 seconds)
[10:15:23] *** Quits: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[10:15:49] *** Joins: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[10:27:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:29:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:29:54] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c48:6127:4105:3f28)
[10:31:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 250 seconds)
[10:31:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:35:02] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:84f2:50c1:8e6c:8c39) (Ping timeout: 250 seconds)
[10:35:46] *** Joins: noStory (~noStory@106.198.157.137)
[10:42:40] *** Emet-Selch is now known as Azem
[10:53:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:00:50] *** Quits: malloy (~jimery@120.235.172.169) (Quit: WeeChat 3.0)
[11:03:28] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[11:07:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[11:11:06] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[11:13:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:14:46] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[11:15:06] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9151:64f9:5c4c:ad39)
[11:16:03] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[11:16:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c48:6127:4105:3f28) (Ping timeout: 250 seconds)
[11:18:30] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[11:19:04] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Client Quit)
[11:20:19] *** Joins: noarb (~noarb@user/noarb)
[11:23:33] <LordKalma> !fact
[11:23:34] <nolyc> LordKalma: The members of pool_options comprise a set of constructor options for pool resources.
[11:26:19] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:26:46] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[11:28:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:29:05] *** Joins: letto (~letto@86.120.81.105)
[11:30:42] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:32:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:32:21] *** Joins: MatSharrow (~matthew@36.115.9.51.dyn.plus.net)
[11:37:00] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:46:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:47:41] <LordKalma> ah for fucks sake
[11:47:50] <LordKalma> trying to access a website "only chrome and safari"
[11:47:59] * LordKalma installs user agent faker
[11:48:05] <LordKalma> mfw website works fine
[11:55:50] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:04:33] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[12:07:11] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6198)
[12:07:44] *** Joins: sigma_ (~sigma@86.57.83.87)
[12:09:08] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:32] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5326)))
[12:09:33] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:12:38] *** Joins: jsbach (~jsbach@2a01:c22:ac94:e600:8c24:670a:4809:c05f)
[12:12:51] *** Quits: jsbach (~jsbach@2a01:c22:ac94:e600:8c24:670a:4809:c05f) (Remote host closed the connection)
[12:13:27] <sigma_> hi, i have a value in function. function act like loop, if my function is loop (1) can i get value in loop(0). i want previous value? the value is enum but they are not sort and can jump number. actually i need stack function, stack can help?
[12:15:03] *** Joins: jsbach (~jsbach@2a01:c22:ac94:e600:c1ff:2a19:8f1c:b013)
[12:18:31] <TinoDidriksen> So, you have a recursive function and want the values from the caller? Pass them in.
[12:19:17] <sigma_> yes
[12:20:09] <LordKalma>  void recursive_with_first_value(T input, std::optional<T> first_value = std::nullopt); ?
[12:20:55] <LordKalma> perhaps an overload set would be better :)
[12:21:18] <sigma_> LordKalma: what is that?
[12:21:55] <LordKalma> void recursive(T value, T initial_value); void recursive(T value){resursive(value, value);} // I think you can do this
[12:23:16] <sigma_> LordKalma: this pointer for last function?
[12:25:32] <LordKalma> sigma_, https://godbolt.org/z/9rn187Mr4
[12:28:24] <LordKalma> does that help?
[12:28:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:29:14] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:29:30] *** Joins: xkuru (~xkuru@user/xkuru)
[12:29:57] <sigma_> <LordKalma>: you just send online compiler?
[12:30:17] <LordKalma> yes
[12:30:32] <sigma_> so, you want example?
[12:30:54] <LordKalma> no, I send you an implementation of what TinoDidriksen said, more or less
[12:32:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:36:11] <sigma_> oh man i'm confused, i think better put value in int but i get a warn (Value stored to 'per_call' is never read), i think because type of int x= enum y;
[12:37:16] *** Joins: robod34 (~Username@79.113.227.62)
[12:38:34] *** Joins: andreasbuhr (~quassel@p549db637.dip0.t-ipconnect.de)
[12:38:52] <smallville7123> backtracking is difficult ;-;
[12:52:01] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[12:58:47] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[12:59:11] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[13:04:11] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[13:05:48] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[13:06:11] *** Joins: kevr (~kevr@user/kevr)
[13:10:41] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:03] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[13:18:13] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[13:22:33] <ville> smallville7123: or perhaps the choices you've made about the data structures earlier makes it difficult to implement or difficult to debug
[13:29:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:33:08] *** Quits: d12fk (~heiko@exit0.net) (Remote host closed the connection)
[13:33:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[13:33:20] *** Joins: d12fk (~heiko@exit0.net)
[13:33:58] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[13:34:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:41:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:01] *** ChanServ sets mode: +v npaperbot
[13:43:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[13:49:00] <smallville7123> ville: all my tests confirm correct backtracking except for this specific case
[13:50:31] <smallville7123> how can i make this easier to debug? https://gist.github.com/mgood7123/11380c829432d96c0d76d65ee8b59c83
[13:51:21] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[13:56:02] <ville> by writing the parser directly, not using some sort of parser combinators, is usually a good step towards that goal
[13:58:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:59:20] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[13:59:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (platinum.libera.chat (Nickname regained by services)))
[13:59:55] *** vinleod is now known as vdamewood
[14:00:43] *** Joins: paul424 (~tom@ip-5-172-236-248.multi.internet.cyfrowypolsat.pl)
[14:08:09] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[14:08:49] *** Joins: rhermes (~rhermes@user/rhermes)
[14:10:49] <cbreak> writing a parser by hand is usually a good step to the goal if your goal is to introduce security holes :P
[14:11:17] <rhermes> Hey! I'm pretty new to C++ and I have a question about error handling. I'm coming from go and rust where return values are used for error handling, as opposed to exceptions. I'm trying to adopt best practices in C++, and so I'm using exceptions for exceptional behavior, like out of memory and so forth. But I don't really know how to handle more
[14:11:18] <rhermes> "unexceptional errors". A concrete example is something that is reading the output of a encoding process, where one response to a request to get the encoded data is EAGAIN, aka that you need to put more data into the encoder, before you can read any out. What is the best practice for expressing this in C++?
[14:11:57] <rhermes> In Rust there is Result, which is what I would have used, but I don't know with C++. My best current idea is to use an enum, but it seems like it would cause an explosion in the number of enums
[14:12:01] *** Joins: seninha (~seninha@user/seninha)
[14:12:44] <cbreak> enums don't fit the problem
[14:13:12] <cbreak> if you use exceptions, the semantic is "I expect this function to work, and if it works, it returns a return value. If it fails, I get an exception"
[14:13:30] <cbreak> the idea with exceptions is to let them propagate until they are handled somewhere up the call stack
[14:14:14] <cbreak> the semantic with return values is "I expect this function to ALWAYS work (return a value), but it could return success or failure"
[14:14:37] <cbreak> exceptions are for indicating a failure to complete
[14:14:42] *** Quits: Kerr (~quassel@2601:602:ce00:287:ab06:3e9c:5e54:e8d) (Ping timeout: 260 seconds)
[14:15:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:15:03] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:c168:f030:8a99:cf3d)
[14:15:03] <cbreak> for your example, this is clearly not exceptional
[14:15:54] <cbreak> but maybe designing this as callback (pulling the data in) instead of call (pushing the data in) would be better.
[14:16:36] <cbreak> nevertheless, if you want to go the return value route, you could do it C style and use enums to indicate one out of a set of discrete possible values
[14:16:56] <Haohmaru> void func1(const void* data) ... void func2(void* const data) ... func2 takes read-only data, correct?
[14:16:57] <cbreak> or you could return some variant
[14:17:29] <rhermes> In this case I'm writing data to the encoder, then looping through reading out data until there is nothing more and then repeating
[14:17:33] <cbreak> or you could have a stateful object that you can push data into, and get data out again, with state query functions
[14:18:10] <cbreak> Haohmaru: they're the same function
[14:18:16] <cbreak> well, other than the name...
[14:18:29] <cbreak> that const is meaningless
[14:18:51] <cbreak> top level const in function signature arguments doesn't influence the signature
[14:19:19] <Haohmaru> so then.. how do you indicate that a function takes a pointer to read-only data?
[14:19:22] <cbreak> Haohmaru: void * const is a const pointer to something. this is different from void const *, which is a pointer to something const.
[14:19:30] *** Joins: evocatus (~evocatus@109.229.144.249)
[14:19:43] <Haohmaru> so (const void* data) ?
[14:19:43] <cbreak> but really... why void?
[14:19:49] <Haohmaru> for example
[14:19:55] <Haohmaru> uint8_t
[14:19:56] <cbreak> why not char const * or uint8_t const *
[14:20:03] <cbreak> or maybe even std::byte const *?
[14:20:14] <Haohmaru> you know why not std::byte
[14:20:16] <Haohmaru> >:/
[14:20:19] <cbreak> I've never used it
[14:20:25] <cbreak> I'm stuck in c++14 / 17 land
[14:20:52] <Haohmaru> so const void* data is "pointer to read-only"
[14:21:05] <cbreak> if you're a left-qualifier, sure
[14:21:30] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:c168:f030:8a99:cf3d) (Quit: No Ping reply in 180 seconds.)
[14:21:30] <Haohmaru> i mean, i know (void const* data) is equivalent
[14:21:38] <cbreak> Haohmaru: but how would you use that pointer?
[14:21:43] <cbreak> not directly, for sure
[14:21:54] <Haohmaru> read the bytes from it..
[14:21:56] <cbreak> you'd cast it. And if you use C casts, the const can vanish by accident :/
[14:22:08] <Haohmaru> nah, i use reinterpret_cast
[14:22:11] <cbreak> good
[14:22:43] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:9768:c1e0:b1b8:bd8f)
[14:24:13] <PJBoy> man clang's on 15 now
[14:24:42] <PJBoy> and it's still not doing great with C++20
[14:26:47] <Haohmaru> are you telling me clang will soon have a driving license in the US?
[14:26:51] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[14:28:09] <PJBoy> they'd be eligible for a provisional license in the UK
[14:29:45] <ville> cbreak: nonsense
[14:29:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:30:54] <ville> rhermes: you may write your own result-like if that tickles your fancy
[14:32:09] <rhermes> I don't want to be writing rust in c++, I would rather learn what c++ prefers. Here I like the idea of a state machine, as it would be a better representation of what I'm doing, but in the general case, I'm unsure of how to solve these things
[14:32:48] <rhermes> Like the encoder can also return EOF, meaning that it's been closed, and that no more data will arrive. This is handled by the state machine suggestion, but it's an example of a "normal" event, and I don't feel exceptions matchj
[14:33:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:34:00] <Haohmaru> cbreak ah, right.. i use void* because i may sometimes toss a structure
[14:34:05] <Haohmaru> or $whatever
[14:36:11] <ville> rhermes: there is no "what c++ prefers". write it the way you want. you'll get as many opinions as you ask programmers
[14:40:12] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[14:41:47] *** Quits: Khoyo (~khoyo@user/khoyo) (Read error: Connection reset by peer)
[14:43:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (Ping timeout: 245 seconds)
[14:43:59] *** Joins: Khoyo (~khoyo@user/khoyo)
[14:47:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:54:55] <PJBoy> could design in such a way that non-exceptional errors never occur
[14:56:02] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[14:56:15] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[14:58:05] *** Quits: evocatus (~evocatus@109.229.144.249) (Ping timeout: 256 seconds)
[15:01:30] <Haohmaru> !fact
[15:01:32] <nolyc> Haohmaru: The inline keyword has no effect on the linkage of a function.
[15:06:49] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[15:13:30] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 260 seconds)
[15:21:03] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[15:26:10] *** Joins: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no)
[15:26:49] *** Quits: paul424 (~tom@ip-5-172-236-248.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:28:45] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[15:29:27] *** Quits: Fairy (~Fairy@2001:464a:4992:0:a98e:f0a9:78ea:918e) (Ping timeout: 250 seconds)
[15:30:16] *** Joins: peter29 (~peter@197.210.8.97)
[15:30:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:33:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[15:42:14] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[15:45:04] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:45:50] *** Joins: Simplar (~quassel@188.163.93.241)
[15:46:49] *** Joins: markong (~kvirc@213.146.188.203)
[15:53:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:00:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:01:59] <very_sneaky> are there any tools to restructure a project
[16:02:05] *** Quits: peter29 (~peter@197.210.8.97) (Ping timeout: 252 seconds)
[16:02:07] <PJBoy> rm -rf
[16:02:26] <very_sneaky> :(
[16:03:26] <very_sneaky> i've realised that our current build system generator places build recipes side by side for different targets which makes it difficult to replace with cmake without manually coding everything
[16:04:11] *** Joins: Leone (~Leo@108.175.224.215)
[16:09:35] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[16:10:39] *** Joins: proller (~p@2a02:6b8:0:40c:9494:ffd5:adb0:ed85)
[16:12:51] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:13:46] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:15:49] *** Joins: evocatus (~evocatus@109.229.144.249)
[16:16:04] *** Quits: evocatus (~evocatus@109.229.144.249) (Remote host closed the connection)
[16:22:39] *** Quits: rhermes (~rhermes@user/rhermes) (Quit: Client closed)
[16:25:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[16:28:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[16:30:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:34:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:38:19] *** Quits: proller (~p@2a02:6b8:0:40c:9494:ffd5:adb0:ed85) (Remote host closed the connection)
[16:40:07] *** Joins: seninha (~seninha@user/seninha)
[16:40:34] *** Joins: proller (~p@2a02:6b8:0:40c:c7ce:9c88:c175:ebe8)
[16:44:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:45:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:49:05] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[16:50:14] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:56:52] *** Joins: gehn (~gehn@user/gehn)
[16:56:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:59:41] <rpav> "side by side"?
[17:14:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[17:21:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:23:59] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:31:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:31:56] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:32:34] <Haohmaru> !fact
[17:32:35] <nolyc> Haohmaru: overloading of the assignment operator has no effect on initialization.
[17:33:35] <noStory> what is all that
[17:33:39] *** Joins: pulse (~pulse@user/pulse)
[17:33:48] <Haohmaru> a fact
[17:35:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:35:05] *** Joins: Uswald (~leandre@2a01cb040075f90061f6d68a0f1678fa.ipv6.abo.wanadoo.fr)
[17:35:05] *** Quits: Uswald (~leandre@2a01cb040075f90061f6d68a0f1678fa.ipv6.abo.wanadoo.fr) (Changing host)
[17:35:05] *** Joins: Uswald (~leandre@user/Uswald)
[17:35:30] <rpav> it's annoying you can't declare structs in a function prototype
[17:37:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:39:16] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[17:39:16] <LordKalma> because that extra line is horrible
[17:41:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:54] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[17:42:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:01] *** ChanServ sets mode: +v npaperbot
[17:47:57] <rpav> yeah it's probably fine .. it's sortof ugly in any case bth
[17:48:34] <noStory> C++ iS uGLy . PrOGrAMMiNg iS UgLY
[17:48:48] <rpav> neither is the case in general
[17:49:15] <LordKalma> c++ isn't particularly ugly, albeit somewhat verbose
[17:49:23] <LordKalma> and cryptic if you TMP hard enough
[17:49:29] <LordKalma> it's just primitive
[17:49:53] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 252 seconds)
[17:50:02] <noStory> GWBASIC was ncie
[17:53:25] <noStory> what is a "type-in program https://en.wikipedia.org/wiki/Type-in_program " in that BoOk https://en.wikipedia.org/wiki/BASIC_Computer_Games
[17:54:37] *** Joins: noarb (~noarb@user/noarb)
[17:56:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:58:38] *** Quits: foul_owl (~kerry@94.140.8.107) (Read error: Connection reset by peer)
[17:58:57] *** Quits: andreasbuhr (~quassel@p549db637.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:59:40] <gehn> IMO C++ is extremely ugly when people don't write `using` statements such that the code ends up with :: everywhere, such an eyesore
[17:59:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:00:18] <gehn> but it doesn't have to be that way, because using statements. but it does have to be that way because modules aren't really prime time yet and global header pollution
[18:00:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Ping timeout: 256 seconds)
[18:00:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[18:01:19] <rpav> std::
[18:01:28] <norias> gehn: i don't like 'using'
[18:01:51] <norias> i like to know where stuff lives
[18:02:30] *** Joins: kurfen (~kurfen@213.152.188.7)
[18:02:47] <noStory> never played with c/c++ since windows 7+ stopped running Borland Turbo C and DoSBoX or VM were needed
[18:02:50] <rpav> i definitely don't use it for `std::` things, but i do use it for templatey things (e.g. `<T> using foo_t = foo<T>::type`)
[18:03:18] <gehn> norias, if you do explicit using statements I don't see the problem
[18:03:24] <rpav> `namespace X = ReallyLongName;` is useful for some things, e.g. `using fs = std::filesystem;`
[18:03:27] <gehn> `using std::foo`
[18:03:37] <gehn> then you know where foo comes from
[18:03:38] <rpav> gehn: it's just sortof unnecessary and you get used to it
[18:03:57] <rpav> the main thing is copying that into every file (or worse, function/class/etc) sucks
[18:04:04] <rpav> and having it in some header is worse
[18:04:08] <gehn> speak for yourself, I still think it's an eyesore to write out the full :: every time and I've been at this C++ thing for like, decades
[18:04:16] <rpav> ¯\_(ツ)_/¯ opinions
[18:04:57] <gehn> yes well I addressed the header thing already
[18:04:59] <rpav> (and you're not the only one who's "been at this" for a bit heh)
[18:05:03] <gehn> modules aim to fix many of these things
[18:05:33] <rpav> how do modules fix it
[18:05:40] <gehn> the "write into every file" is like, a laughable specious argument
[18:05:53] <gehn> how are you avoiding that by writing std:: for like 1000x more places in every file?
[18:05:57] <rpav> it isn't, if you want to use it in every file, but you don't want it in a header
[18:06:00] <gehn> like that's the opposite to me, by definition
[18:06:15] <gehn> yeah I know it's not good in headers, but headers suck and modules will h elp
[18:06:34] <gehn> that headers suck doesn't change the issue with writing std:: everywhere
[18:06:44] <rpav> typing std:: always works; making sure to copy a block of using into every file or function is more work to avoid a few std::
[18:07:16] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[18:07:16] <gehn> yes I understand your point, but A) it's not an issue for me in practice and B) readability matters orders of magnitudes more than the editing time
[18:07:22] <PJBoy> std:: qualification is good
[18:07:23] <gehn> code will be read many more times than it is originally written
[18:07:31] <rpav> i don't find std:: impedes readability
[18:07:34] <PJBoy> it lets you instantly identify where the utility comes from
[18:07:39] <gehn> rpav, I very much do
[18:07:42] <PJBoy> and definitely helps readability
[18:07:43] <gehn> but you know, as you said, opinions
[18:07:55] <PJBoy> it also means you don't need to consider ADL
[18:07:59] <PJBoy> which I don't like doing
[18:08:27] <rpav> and if you always avoid typing std::, you will definitely not learn to read it
[18:08:42] <gehn> it's not about learning, I know what it means
[18:08:43] <rpav> really i rarely even have to type types at all
[18:08:47] <gehn> it's about ergonomics and eye strain
[18:09:10] <PJBoy> ergonomics eh?
[18:09:14] <gehn> but you know, again, opinions, people are free to choose to write `using` or not
[18:09:17] <rpav> it _is_ about learning; it's about training your brain to recognize the shape of `std::X` and not be bothered by having the `std::` part impede reading
[18:09:18] <PJBoy> that argument means you type more than you think
[18:09:20] <PJBoy> :p
[18:09:36] <gehn> rpav, nope
[18:09:45] <gehn> it's about eye strain, not about "training my brain to recognize X"
[18:10:04] <gehn> it's extra noise, pollution if you will
[18:10:16] <PJBoy> nah it's good
[18:10:21] <gehn> for you maybe
[18:10:23] <gehn> not for me
[18:10:23] <PJBoy> idk what `find` does
[18:10:28] <PJBoy> but I know what `std::find` does
[18:10:34] <rpav> i also have non-std finds
[18:10:38] <gehn> PJBoy, then just "train your brain" like rpav has
[18:10:54] <PJBoy> nah I'd have to know the codebase in question to know what `find` does
[18:10:59] <PJBoy> nothing I can do about that
[18:11:03] <gehn> I mean sure, if you have potential conflicts there's little other alternative
[18:11:05] <PJBoy> `std::find` always means the same thing
[18:11:13] <gehn> PJBoy, ez, just train your brain for that codebase
[18:11:19] <PJBoy> it's a great visual indicator
[18:11:22] <gehn> read the code, you'll see `using std::find`, ez
[18:11:25] <rpav> not using the namespace removes context; i'm not sure you comprehend what "learning" entails in this case
[18:11:33] <PJBoy> seeing `using std::find;` is only part of the story
[18:11:39] <PJBoy> I still have to consider ADL
[18:11:51] <PJBoy> usually `using` statements are used in conjunction with ADL
[18:11:57] <PJBoy> so it's not just me being annoying
[18:12:08] <rpav> seeing `using std::find` and a list of other `using` in every function takes a lot of extra space; alternatively you _don't_ see it in every function and have to search for it or hover the `find`
[18:12:23] <gehn> there's no changing the objective fact that it adds eye strain, you can provide all the hand wavy arguments you want, and sure in cases of name conflicts there's little other alternative
[18:12:39] <PJBoy> it's an objective fact that lacking std:: increases eye strain
[18:12:43] <rpav> it's not an "objective fact," it's merely your lack of C++ reading comprehension
[18:12:47] <gehn> PJBoy, false
[18:12:51] <PJBoy> `std::` is a great visual indication
[18:12:53] <gehn> rpav, also false
[18:13:00] <gehn> and now you're just being insulting
[18:13:32] <gehn> my C++ reading comprehension is fine in this regard, I have to deal with this regularly, which is part of why I know A) my reading comprehension is fine B) it's not about reading comprehension C) it's about eye strain
[18:13:43] <gehn> I guess you all are probably lucky (and or young?) enough for this to not be an issue for you
[18:13:56] <PJBoy> I agree that reading comprehension can be argued either way
[18:14:06] <PJBoy> I would go on to say that eye strain can be argued either way
[18:14:15] <PJBoy> nothing objective about our arguments
[18:14:17] <rpav> 1) many many people write and read C++ with std:: without issue 2) you have admitted you have a problem reading it 3) ∴ you have C++ reading comprehension problems; this seems to be _fact_
[18:14:39] <rpav> my guess is if you read and wrote it for awhile, you would not
[18:14:39] <gehn> rpav, no I have admitted it causes undue eye strain, not that I have reading comprehension issues as you claim
[18:14:59] <gehn> rpav, did you not see the part where I literally just said I have to read this kind of code *all the time*
[18:15:11] <gehn> like fuck bruh, maybe you need to check *your* reading comprehension mr kettle
[18:15:27] <rpav> <rpav> i don't find std:: impedes readability <gehn> rpav, I very much do
[18:15:37] <gehn> readability != comprehension
[18:15:44] <gehn> ergonomics affect readability
[18:15:48] *** Joins: foul_owl (~kerry@94.140.8.105)
[18:16:01] <gehn> choice of color scheme affects readability, font size affects readability
[18:16:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[18:18:26] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:18:44] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[18:20:37] <rpav> so i started experimenting with this little structured-data-readline thing and i think it's simple enough we probably could have always had it .. need to write a C++ version then i sortof want to write a 6502 version
[18:21:16] <rpav> it sucks C++ doesn't have a builtin "value stack" data structure
[18:21:41] <cbreak> std::stack?
[18:21:58] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[18:22:05] <rpav> no that's <T>
[18:22:17] <cbreak> (no idea why they default to deque instead of vector for internal container)
[18:22:20] <PJBoy> std::stack<std::any>
[18:22:26] <rpav> i want a value_stack that properly alignment-extends and pushes any value type
[18:22:30] <PJBoy> probably because of vector<bool>
[18:22:34] <LordKalma> haha was just thinking of that, PJBoy
[18:22:37] <PJBoy> hahaha
[18:22:41] <cbreak> hmm...
[18:22:46] <rpav> not any :p
[18:22:59] <PJBoy> what kind of generic storage if not std::any?
[18:23:11] <cbreak> rpav: so... you want to assemble something like a "struct" on the fly?
[18:23:26] <rpav> it doesn't need to manage destruction
[18:23:49] <PJBoy> std::stack<void*>??
[18:23:52] <cbreak> does it need to be type aware?
[18:24:00] <rpav> mostly i just want to push a bunch of values into a place and be able to manage them manually, but properly-aligned
[18:24:02] <cbreak> so like a multivariant?
[18:24:31] <rpav> `double* ptr0 = vs.push(1.0); int* ptr1 = vs.push(1); ...`
[18:24:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:24:56] <cbreak> should be fairly easy to create.
[18:25:00] <PJBoy> looks like it would need to handle its lifetime then
[18:25:04] <rpav> kinda, dealing with alignment is the big pita iirc
[18:25:07] <PJBoy> including destruction
[18:25:12] <cbreak> depending on how much bookkeeping / type awareness you want
[18:25:14] <PJBoy> unless we're talking only trivial types
[18:25:21] <cbreak> alignment is easy
[18:25:30] <cbreak> you could do the math yourself, if you don't want to use std::align
[18:25:45] <cbreak> but I'd use std::align
[18:25:52] <rpav> PJBoy: actually a sortof out-of-line variant would possibly be nice here since _some_ sort of type tracking is likely to be useful
[18:26:10] <PJBoy> like a variant of all notable trivial types?
[18:26:16] <rpav> no
[18:26:20] <noStory> anybody know about GATE exams in India  country ?
[18:26:22] <cbreak> a multivariant :)
[18:26:27] <PJBoy> what's multivariant?
[18:26:31] <cbreak> a container that can contain multiple values
[18:26:42] <rpav> and how does that differ from a variant :p
[18:26:45] <LordKalma> so... vector<variant> ?
[18:26:46] <PJBoy> so a container<variant<Ts...>>?
[18:26:50] <cbreak> a variant can only contain a single value
[18:26:58] <rpav> err
[18:27:01] <PJBoy> oh
[18:27:10] <PJBoy> would it be at most one of each variant type?
[18:27:12] <rpav> how does that differ from what LordKalma said
[18:27:19] <rpav> or a tuple
[18:27:22] <PJBoy> like tuple<optional<T>...>?
[18:27:36] <cbreak> PJBoy: if you optimize that a bit, you'll probably end up storing the objects and the type tags separately
[18:27:38] <LordKalma> what's the point of wrapping a variant that holds multiple values in a container then?
[18:27:45] <cbreak> to reduce the overhead
[18:27:46] <rpav> what i'm thinking is more a vector of variant type IDs and a stack of values
[18:27:50] <cbreak> and have contiguous data
[18:27:59] <PJBoy> hmm
[18:28:00] <LordKalma> cbreak, so... an intrusive container of variant?
[18:28:06] <PJBoy> ok I think I see where you're coming from
[18:28:07] <cbreak> LordKalma: not exactly
[18:28:07] <ashafq> I have a question about virtual desctructor
[18:28:09] <rpav> (since the alignment of type IDs is necessarily going to mess with the alignment of stack values)
[18:28:18] <rpav> cbreak: yeah
[18:28:20] <PJBoy> ashafq, go on
[18:28:21] <LordKalma> ashafq, don't ask to ask, ask
[18:28:25] <cbreak> a container that can store multiple values, like a vector, but of different types
[18:28:43] <ashafq> Do I have to define them in order to delete std::vector<> member variables?
[18:28:49] <cbreak> ashafq: no
[18:28:55] <PJBoy> so an optimisation of `container<variant<T...>>`
[18:29:09] <rpav> cbreak: i would say "and that must be basically a stack," except i guess it doesn't _have_ to be
[18:29:12] <LordKalma> ashafq, that's about destructors in general
[18:29:18] <rpav> "multivariant" is a terrible name though
[18:29:24] <cbreak> rpav: I like it...
[18:29:32] <cbreak> rpav: you can call it vectorvariant
[18:29:36] <cbreak> or variantvector
[18:29:37] <rpav> well, it's terrible, so it's perfect for C++ ;)
[18:29:37] <LordKalma> virtual destructors is something you should declare if you're making a base class to allow children class to properly cleanup if they ought to
[18:29:48] <rpav> cbreak: is this your name or something standard-ish?
[18:29:56] <cbreak> my name.
[18:29:59] <rpav> i.e. if i search for it will i find implementations or random other things
[18:30:00] <rpav> ok ;/
[18:30:09] <rpav> do you know of any given implementations of such
[18:30:21] <LordKalma> other than that, think of it like this, if you don't have to all a function or delete to get rid of a resource on a local variaable for example, destructors are the same
[18:30:27] <cbreak> I don't remember anything. Maybe boost has it.
[18:30:30] <ashafq> Well, suppose I have a class A, which inherits from class Base. and A may have vectors and stuff... do I have to at least have a virtual ~Base(); written in the interface?
[18:30:32] <LordKalma> think class objects as another scope
[18:30:45] <LordKalma> yes
[18:30:49] <LordKalma> that would be nice of you to do
[18:30:56] <PJBoy> ashafq, are we talking `struct Base {}; struct Derived : Base { vector<T> v; }; void f(Base* p) { delete p; }`?
[18:31:01] <cbreak> ashafq: virtual destructors are ONLY needed if you want to polymorphically delete objects
[18:31:12] <ville> ashafq: you define a dtor virtual if you ever delete through a pointer to that type. that's what the language needs. some people adopt other defaults, such as making any base class have a virtual dtor
[18:31:16] <cbreak> destructors in general are needed if your object "owns"
[18:31:36] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:31:46] <LordKalma> honestly, "making any base class have a virtual dtor" is a decent default imho
[18:31:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:32:02] <rpav> destructprs
[18:32:05] <PJBoy> that would be my beginner advice at least
[18:32:06] <ashafq> Thanks, I find destructors with virtual really confusing. Thanks for clearing that up.
[18:32:17] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[18:32:35] <LordKalma> when you write a Derived class 3 months from now and you forgot you didn't have a virtual ~Base you'll have subtle bugs and take a week to figure out why
[18:32:43] <ville> ashafq: ok that was poorly written, if you ever delete through that base class type
[18:32:46] <cbreak> LordKalma: depends
[18:32:52] <LordKalma> of course it depends haha
[18:33:10] <PJBoy> the other sensible default you could always recommend is giving base classes protected dtors
[18:33:15] <cbreak> I would only recommend virtual destructors if a class hierarchy is intended for polymorphic use
[18:33:27] <PJBoy> although it's less generally applicable
[18:33:42] <LordKalma> PJBoy, what's the effect of that one?
[18:33:47] <LordKalma> can't destroy via pointer to base?
[18:33:49] <PJBoy> yeah
[18:33:57] <PJBoy> stops the bugs if you were to ever write them
[18:34:05] <cbreak> LordKalma: it also means base objects can't live alone
[18:34:16] <LordKalma> so the options are "always allow it, or never allow it"
[18:34:18] <cbreak> which might be bad
[18:34:19] <PJBoy> and provides the guarantee that you never use the base class for destruction polymorphically
[18:34:21] <LordKalma> neither of which is the language default hahaha
[18:34:24] <rpav> it also stops you being able to actually use the class, which makes it incredibly helpful
[18:34:29] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca)
[18:34:34] <ville> cbreak: you can still store the objects separately, but have virtual functions that implement the polymorphic functionality, so no need to delete an object through a base* raises
[18:34:43] <rpav> { C c; } class C { protected: ~C() = default; };
[18:34:44] <geordi> error: 'constexpr C::~C()' is protected within this context
[18:34:44] <cbreak> ville: yes.
[18:34:55] <cbreak> ville: for example... via std::shared_ptr :D
[18:35:08] <cbreak> that's why I said "polymorphic destruction" at the start
[18:35:20] <ville> not sure what shared_ptr has to do with it
[18:35:28] <cbreak> but as a simplified rule, general polymorphic usage might be too
[18:35:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[18:35:37] <LordKalma> well, you can't then stop a base classe from being used non-polymorphically AND have it be polymorphic deletion safe?
[18:35:51] <cbreak> ville: it remembers the true type for destruction purposes
[18:35:52] <rpav> `final` .. err wait ;)
[18:36:01] <ashafq> OK, the base class does not have anything to delete. But the derived class may have something. So do I just declare and not define `virtual ~Base();`?
[18:36:18] <rpav> ashafq: `virtual Base() = default;`
[18:36:20] <cbreak> ashafq: you can default it
[18:36:20] <LordKalma> ashafq, you have to define, otherwise it's a compile-time error. Just = default it
[18:36:25] <rpav> err ~Base
[18:36:40] <ashafq> ok, sounds good 😊
[18:37:07] <PJBoy> LordKalma, protected virtual dtor
[18:37:09] <rpav> if you have some _very_ specific use case, you can get away with doing something else, but in that case you should already know your specific use case and _why_ you can get away with it, and what to do / how to do it
[18:37:21] <rpav> thus the only sensible default recommendation is `virtual ~Base() = default;`
[18:37:23] <PJBoy> oh wait nvm
[18:37:32] <LordKalma> haha
[18:37:33] <PJBoy> but public virtual dtor + make it an abstract base class
[18:37:49] <PJBoy> or protected ctor
[18:37:59] <PJBoy> protected ctor works right?
[18:38:05] <LordKalma> probably?
[18:38:08] <LordKalma> can't see why not
[18:38:12] <rpav> protected ctor would be a lot more common .. that (still?) works right?
[18:38:40] <PJBoy> { Derived d; } struct Base { virtual ~Base() = default; protected: Base() = default; }; struct Derived : Base {};
[18:38:41] <geordi>  
[18:38:43] <PJBoy> yeah we good
[18:39:12] <LordKalma> well, if we're talking about polymorphic usage, we expect some `virtual foo = 0;` anyway
[18:39:15] <PJBoy> you know how sometimes base classes have protected things that the derived class can't access
[18:39:17] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e)
[18:39:18] <rpav> it should still even work if you `using Base::Base;` in Derived's public
[18:39:20] <PJBoy> I worry about that sometimes
[18:39:46] <rpav> protected/private inheritance is weird
[18:39:54] <PJBoy> yeah I agree with that last point, LordKalma
[18:40:02] <LordKalma> "base classes have protected things that the derived class can't access" wdym?
[18:40:17] <PJBoy> lets see if I can come up with an example
[18:42:29] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 256 seconds)
[18:42:41] *** Joins: Khoyo_ (~khoyo@user/khoyo)
[18:43:46] <noStory> understand nothing. choosing new thing to do
[18:44:21] <PJBoy> https://wandbox.org/permlink/AtYvKJT5yCb9067t
[18:44:56] <PJBoy> could probably simplify
[18:45:19] <PJBoy> {} struct B { protected: int x{}; }; struct D : B { void f(B& b) { SHOW(b.x); } };
[18:45:19] <geordi> error: 'int B::x' is protected within this context
[18:45:25] <rpav> that seems like regular "you can't access protected members"
[18:45:40] <PJBoy> well sometimes you can
[18:45:51] <PJBoy> {} struct B { protected: int x{}; }; struct D : B { void f(B&) { SHOW(x); } };
[18:45:52] <geordi>  
[18:46:12] <PJBoy> and it's clear from that example that you can't access protected variables other than via this
[18:46:24] <PJBoy> but that's not something I would normally expect
[18:46:31] <LordKalma> hum, it kinda makes sense
[18:46:49] <PJBoy> you can access them if they're protected in D, just not in B
[18:47:00] <noStory> old borland turbo c++ is better . bye
[18:47:05] <LordKalma> hahaha dumb language rules
[18:47:35] <rpav> yeah .. usually for Factory<X> you'd friend it if necessary
[18:47:35] <PJBoy> yeah I think that one's questionable
[18:48:02] <rpav> probably one of the very early/original cases for friend, besides printing things
[18:48:14] <LordKalma> so you can access protected members of your own class as parameters, but not of base as parameters
[18:48:23] <PJBoy> yeah
[18:48:37] <PJBoy> you can create a private getter in D and use that instead
[18:48:47] <PJBoy> the fact that private getters have a use-case is terrible
[18:48:52] <rpav> wait what
[18:49:01] <rpav> i thought all private members were only this-accessible
[18:49:10] <LordKalma> rpav, we're talking protected
[18:49:15] <PJBoy> that would be bad for operator= if true
[18:49:17] <rpav> right but for the private getter
[18:49:33] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:49:37] <LordKalma> PJBoy, how would a private getter of D would get you a protected member of B by param?
[18:49:46] <PJBoy> :/
[18:49:57] <PJBoy> nvm
[18:50:20] <LordKalma> don't you lie to me!
[18:50:27] <PJBoy> I was wrong :(
[18:50:33] <PJBoy> which I'm happy about
[18:50:37] <PJBoy> screw private getters
[18:50:40] <rpav> yeah that would be a weird inconsistency
[18:50:52] <rpav> not that i think having a weird inconsistency would surprise me
[18:51:17] <LordKalma> PJBoy, well, maybe you could have a B* member of D
[18:51:27] <PJBoy> blurgh
[18:51:30] <LordKalma> and then when you get B as a param, set the B* memeber
[18:51:32] <LordKalma> use a getter
[18:51:33] <LordKalma> :p
[18:51:35] <rpav> `friend class CardFactory<T>;`
[18:51:36] <LordKalma> done, worked around it
[18:51:58] <rpav> _or_, make a specific friended / referential accessor _class_ and pass that ;)
[18:53:07] <PJBoy> {} struct B { protected: int x{}; }; struct D : B { B* this2; void f(B& b) { this2 = &b; SHOW(this2->x); } };
[18:53:07] <geordi> error: 'int B::x' is protected within this context
[18:53:12] <PJBoy> fortunately that doesn't work either
[18:53:32] <PJBoy> so can't access protected variables from parameters, nor member variables
[18:53:46] <PJBoy> only from this
[18:53:57] <LordKalma> from this what?
[18:54:04] <PJBoy> >:(
[18:54:14] <LordKalma> hahahah trying to make a joke
[18:54:15] <LordKalma> didn't go well
[18:54:27] <PJBoy> yeah I got that
[18:54:50] <PJBoy> I wonder if the `this auto self` version can access protected members via self
[18:55:27] <PJBoy> would be pretty crappy if it couldn't
[18:55:42] <rpav> what's that
[18:55:51] <PJBoy> that's from the deducing this proposal
[18:56:00] <LordKalma> npaperbot, search deducing this
[18:56:00] <npaperbot> P0847R7: [Core] Deducing this <https://wg21.link/p0847r7> (by Barry Revzin, Gašper Ažman, Sy Brand, Ben Deane) (2021-07-14) (Related: https://wg21.link/p0847r7/github)
[18:56:00] <npaperbot> Also: P0847R6, P0847R5, P0847R4, P0847R2, P0847R1, P0847R0, D0847R3
[18:56:10] <PJBoy> so you can write your member functions with a template parameter for this
[18:56:18] <LordKalma> rpav, basically people realized passing this by reference sometimes is dumb
[18:56:29] <PJBoy> use-case being things like `operator[]` where you have const and non-const overloads
[18:56:39] <rpav> LordKalma: reference?!
[18:56:42] <PJBoy> or `str()` where you have lvalue and rvalue reference overloads
[18:56:43] <rpav> oooh
[18:56:55] <PJBoy> also you can by this by value, yeah
[18:56:56] <rpav> i think i vaguely recall this now
[18:57:02] <PJBoy> although that's not too exciting IMO
[18:57:13] <rpav> should really just have had `constish` ;)
[18:57:28] <PJBoy> also lambdas get to refer to themselves
[18:57:33] <PJBoy> so you can have your recursive lambdas
[18:58:05] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 252 seconds)
[18:58:20] <rpav> i'm not sure reading this how much it actually saves over the const_cast variation
[18:59:02] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:59:28] <PJBoy> if cppreference ever loads, I'll show you their example
[18:59:54] <PJBoy> https://en.cppreference.com/w/cpp/language/operators#Array_subscript_operator
[19:00:06] <rpav> presumably you can `void foo(this Self&& self) const(self) { ... }`
[19:00:06] <noStory> By
[19:00:08] *** Parts: noStory (~noStory@106.198.157.137) ()
[19:00:21] <rpav> ah not even necessary
[19:01:02] <rpav> why was it not possible for the const-ness of `this` to differ again
[19:01:13] <rpav> i.e. so const(this) actually works
[19:01:16] <PJBoy> because member functios aren't templates
[19:01:27] <rpav> oh right i guess
[19:01:42] <PJBoy> and member function templates can't make `this` a template parameter
[19:01:45] <PJBoy> but now they can
[19:02:13] <rpav> well, i mean if you had `void foo() const(this) { .. }` and it did what you wanted, it would still sortof have to be a template i think
[19:02:24] <PJBoy> unfortunately (to me), the operator[] in that page doesn't get to name its return type anymore
[19:02:28] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:03:07] <rpav> couldn't you if you really wanted via ->
[19:03:16] <PJBoy> I was just wondering that
[19:03:26] <PJBoy> without being able to test it out, idk
[19:03:30] <rpav> yea
[19:04:02] <PJBoy> but that's where I like the old system
[19:04:21] <PJBoy> where you call some template function that does all the generic work
[19:04:29] <PJBoy> and you have your non template overloads as per usual
[19:04:43] <PJBoy> but boilerplate is boilerplate so idk
[19:04:56] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:07:45] <rpav> with version control, committing more means making it easier to back out 🤔
[19:08:36] <LordKalma> I had some college colleagues that used git(hub) as a "put here completed stuff"
[19:08:39] <LordKalma> no commits of WIPs
[19:08:56] <LordKalma> and where I work people don't know git is a thing. Only github
[19:09:02] <LordKalma> all have github desktop installed
[19:10:07] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[19:11:36] <rpav> sad, but otoh it could be worse .. they could be dumping it on some MS Sharepoint thing you can only access with a proprietary client
[19:11:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca)
[19:11:57] <rpav> there has been some progress since the 00s; though to be fair there had been a bit of backsliding before that
[19:12:08] <LordKalma> gahaha we all have office 365 provided by the university the lab is associated with
[19:12:16] <LordKalma> so yes, we all have OneDrive for business
[19:12:19] <LordKalma> (aka sharepoint)
[19:12:23] <LordKalma> but it gets worse
[19:12:41] <norias> git is too complicated. stick with cvs.
[19:12:42] <rpav> even onedrive is web-accessible now isn't it, but .. still ew ;)
[19:13:02] <LordKalma> the university uses office 365, which works okay, BUT our labs uses self hosted exchange
[19:13:08] <LordKalma> like an old-ass version of it
[19:13:16] <LordKalma> and the IT team is full of fuckwits
[19:13:21] <LordKalma> so no IMAP/SMTP option
[19:13:30] <LordKalma> it's either webmain, or outlook
[19:13:41] <LordKalma> if you want thunderbird... there are paid extensions, or gtfo
[19:13:52] <rpav> cvs? sccs or gtfo
[19:13:56] <LordKalma> http://davmail.sourceforge.net/
[19:13:58] <LordKalma> I use this
[19:14:08] <LordKalma> as a bridge between thunderbird and exchange
[19:14:13] <cbreak> LordKalma: configure relay?
[19:14:22] <LordKalma> cbreak, wdym?
[19:14:36] <norias> rpav: ouch.
[19:14:39] <cbreak> make the junk e-mail address relay all e-mails to a proper server
[19:14:46] <rpav> exchange still being a thing ;/ though mostly i use gmail so maybe not the biggest improvement
[19:14:57] <LordKalma> cbreak, davmail works fine
[19:15:09] <cbreak> rpav: gmail at least supports imap to some degree
[19:15:12] <LordKalma> I have to -send- with the business email simetimes :)
[19:15:15] <LordKalma> so does office 365
[19:15:16] <cbreak> enough to kind of work in thunderbird
[19:15:25] <rpav> cbreak: true .. and has better spam filtering even still
[19:15:29] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:15:52] <rpav> i just hate the internet n00bs won with non-threaded email
[19:16:01] <rpav> f'n top-posters
[19:16:47] <LordKalma> my IT team are fuckwits pt2: port 465 is blocked on our firewall for some reason
[19:16:52] <LordKalma> so I can't smtp with gmail
[19:17:03] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[19:17:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:17:54] <rpav> no alternate port? bounce maybe?
[19:18:02] <LordKalma> I just connect to my personal VPS haha
[19:18:06] <LordKalma> *VPN
[19:18:10] <LordKalma> (which is on my VPS)
[19:18:11] <rpav> TLS is 587
[19:18:23] <LordKalma> that, it's that one I think, 587, sorry
[19:18:40] <LordKalma> regardless, whichever thunderbird decided to configure is the one not working
[19:18:42] <rpav> probably both blocked if one is .. why
[19:18:51] <LordKalma> nope, just the one
[19:19:17] <LordKalma> rpav, you can't SMTP with TLS but you can telnet
[19:19:20] <LordKalma> port 23 is just free :)
[19:19:28] <LordKalma> it's where I put my VPN haha
[19:22:12] <LordKalma> you know, it's very funny because at some point they decided to extend our ip range on the LAN and only have part of it on the DHCP server
[19:22:20] <LordKalma> lab equipment is supposed to have a fixed ip
[19:22:22] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[19:22:29] <LordKalma> I needed to remote into an old ass equipment and it wasn't working
[19:22:43] <LordKalma> I was told "we lost the password to the switch it's connected to and we don't want to reset it"
[19:23:02] <LordKalma> this is the BS i have to deal with
[19:23:50] <rpav> school IT ;/
[19:23:53] <pulse> what's the convention for including a huge library in your repo
[19:24:03] <rpav> pulse: including how
[19:24:09] <pulse> idk, bundling with the repo i suppose
[19:24:17] <rpav> submodule probably
[19:24:22] <pulse> err
[19:24:27] <rpav> basically the tool for the job
[19:24:28] *** Joins: lxsameer (lxsameer@user/lxsameer)
[19:24:31] <pulse> i should mention, the convention on windows *
[19:24:33] <LordKalma> rpav, the uni's IT is pretty good. our lab is technically independent and has its own team. THOSE are absolutely incompetent
[19:24:38] <rpav> OH
[19:24:39] <LordKalma> pulse, well, it depends
[19:24:49] <rpav> you mean bundling the _binary_ .. ship the dll in the .exe dir or set PATH
[19:24:59] <pulse> no i mean bundling the whole thing so i can build it
[19:25:02] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 252 seconds)
[19:25:12] <rpav> then submodule? :P
[19:25:12] <LordKalma> for example, with Qt, you jusdt "depend" on it, with cmake or qmake, and have the fellow devs install it
[19:25:17] <LordKalma> same with boost
[19:25:17] <pulse> i was thinking just bundling the zip and then adding build instructions that say "unpack that zip yo"
[19:25:34] <pulse> because the unpacked and built library is like 100s of megs
[19:25:36] <pulse> the zip is 15mb
[19:25:36] <rpav> like, if you have a bunch of 3rd party deps, `$srcroot/external/<deps-as-submodules>`
[19:25:55] <LordKalma> go to download it and add -D BOOST_PATH="c:\path\to\boost" to cmake or whatever
[19:26:06] <LordKalma> ooor use conan/vcpkg, and force your users into it haha
[19:26:07] <pulse> i wanna use vs on windows
[19:26:16] <rpav> maybe make a git lfs or similar repo if you have binary blobs
[19:26:16] <ville> system. packaging
[19:26:17] <LordKalma> then vcpkg might be an option
[19:26:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[19:26:28] <LordKalma> vcpkg is pretty well integrated into vs
[19:26:30] <pulse> basically the build instructions would be 1) unpack the bundled zip 2) build the appropriate lib version in VS 3) build the project
[19:26:33] <LordKalma> PJBoy, can explain more
[19:26:35] <rpav> that way you can still maintain it as a single checkout and include bins etc
[19:26:42] <PJBoy> what's this
[19:26:47] <PJBoy> oh vcpkg
[19:26:51] <PJBoy> fuck vcpkg
[19:27:01] <pulse> vcpkg is in itself a dep
[19:27:01] <PJBoy> when it works it's pretty convenient
[19:27:03] <ville> pulse: if you are bundling the zip then why doesn't your build unzip it?
[19:27:10] <LordKalma> still salty they didn't fix gtkmm for you, PJBoy?
[19:27:15] <PJBoy> you just install something and then you can include its headers and you're all set
[19:27:18] <pulse> ville, well, you have to build the right config yourself
[19:27:20] <pulse> in VS
[19:27:23] <PJBoy> when it doesn't work, it's stupid bullshit
[19:27:31] <LordKalma> pulse, that's why vcpkg is a good idea
[19:27:33] <PJBoy> and libraries you use can break overnight
[19:27:33] <LordKalma> ignore PJBoy
[19:27:35] <PJBoy> so fuck vcpkg
[19:27:42] <pulse> hmm
[19:27:43] <LordKalma> vcpkg will make you the right config
[19:27:43] <PJBoy> nah don't use vcpkg
[19:27:45] <gehn> too many outdated or unmaintained packages on vcpkg in my experience
[19:27:50] <gehn> use conan
[19:27:53] <PJBoy> your dependencies will break overnight
[19:27:53] <ville> pulse: surely doesn't need to be VS the gui, just cl.exe... ?
[19:27:54] <LordKalma> I too prefer conan
[19:28:02] <norias> yes, conan!
[19:28:05] <LordKalma> but conan is going trough puberty and it sucks
[19:28:06] <norias> Crush your enemies!
[19:28:15] <norias> See them driven before you.
[19:28:21] <PJBoy> vcpkg is good for spinning up quick code examples or short term projects
[19:28:25] <pulse> ville, perhaps, but things may change over time. new vs version could come out, etc etc
[19:28:31] <gehn> eh, conan is coming out the other side of that puberty as we speak though
[19:28:32] <PJBoy> but would always avoid using it for long term projects or anything serious
[19:28:36] <pulse> i'm just pondering if my approach is too unorthodox or not
[19:28:40] <pulse> for linux builds this isn't a problem
[19:28:45] <gehn> a few years ago that was more true, but conan is pretty good these days
[19:28:56] <gehn> would be nice if more packages were on there, but there's actually still a ton
[19:29:47] <gehn> depending on how handy you are with e.g. python/ruby/bash/powershell, and depending on how motivated you are, doing your own lib builds isn't too bad
[19:30:07] <gehn> I would use conan but, corporate firewall BS
[19:30:43] <LordKalma> gehn, conan 2.0 is still couple months away, there are breaking changes every week, the dev team thinks you should document everything before release, not as you make the features, so I don't even know what the guidelines are anymore to the new features, the VS 2022 extension is pending, AND I don't even imagine the hell that is going to be updating CCI to 2.0
[19:30:49] *** Quits: AmR (~AmREiSa@156.207.136.200) (Read error: Connection reset by peer)
[19:31:06] <pulse> ok just tell me if you would understand this or not https://github.com/pulzed/KiwiEd/blob/main/BUILDING.md
[19:31:12] *** Joins: AmR (~AmREiSa@156.207.136.200)
[19:31:20] <LordKalma> so no, conan is still very much pre-pubescent
[19:31:58] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[19:32:10] <rpav> if only spack targeted windows
[19:32:15] <TinoDidriksen> Don't do custom builds. Use a build system and package manager. Shipping VS solutions? So last century.
[19:32:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:32:30] <pulse> well i sure as fuck won't use cmake on windows
[19:32:34] <gehn> pre? nah, pubescent maybe
[19:32:40] <pulse> i'll probably have to use it for other systems though
[19:32:42] <LordKalma> TinoDidriksen, well, since the subject is wxWidgets, last century is the motto
[19:32:44] <rpav> not using cmake is the source of many problems
[19:32:44] * LordKalma ducks
[19:32:47] <TinoDidriksen> Why not? CMake works great.
[19:32:50] <LordKalma> Haohmaru rages :D
[19:32:59] <pulse> VS works great too
[19:33:03] <gehn> pulse, hmm? what? why, windows is like, one of the major reasons to use CMake
[19:33:05] <rpav> VS works great with cmake
[19:33:06] <LordKalma> CMake under VS works amazingly good
[19:33:12] <rpav> open -> CMakeLists.txt -> go
[19:33:22] <gehn> well, specifically needing to do cross platform where you need to build for both windows and one or more *nix like systems
[19:33:30] <TinoDidriksen> VS solutions can't be built with MinGW.
[19:33:36] <norias> but what about cmake's "no standard way of finding modules" on windows?
[19:33:40] <pulse> right, i don't want to build with mingw on windows
[19:33:41] <gehn> can confirm, VS works well with cmake
[19:33:45] <gehn> norias, it has a standard way
[19:33:52] <norias> gehn: which is?
[19:33:58] <LordKalma> norias, lean how to pass arguments to cmake
[19:34:00] <LordKalma> and it's easy
[19:34:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:34:19] <norias> so I have to know where dependencies are in the filesystem?
[19:34:20] <TinoDidriksen> It's not about what you want to build with. If you want others to build, you should do it in a cross-platform/toolset manner. Otherwise, just don't have build instructions and say it's a private project.
[19:34:22] <gehn> it depends on the find module mostly
[19:34:26] <LordKalma> norias, yes
[19:34:27] <rpav> norias: that's more a windows-specific problem regardless .. you're going to have to point things at places, pointing cmake at them isn't particularly hard
[19:34:28] <norias> which i don't have to do on linux
[19:34:30] <LordKalma> but that's windows for you
[19:34:35] <LordKalma> even on VS you do that
[19:34:41] <gehn> boost will find itself on windows if, for example you use the boost MSI installers and accept the default location of C:\local
[19:34:43] <LordKalma> every VS solution has hardcoded paths
[19:34:44] <rpav> ^
[19:34:45] <LordKalma> usually relative
[19:35:00] <gehn> OpenSSL will find itself if you built and installed it with CMake, again using default options, which puts it in C:\Program Files
[19:35:03] <pulse> yeah i hate that so much LordKalma, lol
[19:35:07] <rpav> thus have some kind of `deps/` subpath with submodules; things like Qt though are always going to want to be like `C:\Qt`
[19:35:07] <pulse> that's why i want to bundle the deps
[19:35:17] <Haohmaru> LordKalma que?
[19:35:22] <Haohmaru> are you badmouthing wx?
[19:35:26] <LordKalma> -DCMAKE_PREFIX_PATH:STRING=c:\path\to\qt5   and then find_package(Qt6 REQUIRED) will just work :D
[19:35:31] <pulse> basically when i use another windows system, i want to be able to get a build going in 30 seconds
[19:35:31] <gehn> or of course, if you build boost yourself, just put it in the same place that the installer would, again the CMake find module will find it automagically
[19:35:44] <LordKalma> -DCMAKE_PREFIX_PATH:STRING=c:\path\to\qt6   and then find_package(Qt6 REQUIRED) will just work :D *
[19:35:46] <gehn> but really, IMO, you shouldn't be relying on any of this. not on Windows, not on Linux.
[19:35:48] <rpav> conan can sortof help with deps but i'm not sure its help provides more than it costs
[19:35:49] <TinoDidriksen> CMake + vcpkg lets you build projects as easily as on Linux.
[19:35:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:35:52] <gehn> use CMAKE_PREFIX_PATH
[19:36:21] <norias> TinoDidriksen: thanks. I hadn't heard of vcpkg
[19:36:26] <LordKalma> yes, cmake_prefix_path is the stuff
[19:36:37] <LordKalma> norias, vcpkg is weak conan .p
[19:36:41] <pulse> i don't trust vcpkg
[19:36:50] <pulse> it's yet another dep
[19:36:52] <LordKalma> hahah (actually more packages, but i just hate you write recipes in cmake haha)
[19:36:55] <pulse> which i have to rely upon
[19:36:56] <norias> LordKalma: *shurgs* something is better than nothing
[19:37:10] <pulse> i'll have cmake for linux builds, possibly mac
[19:37:17] <norias> I was trying to move some OpenGL stuff I did to windows
[19:37:19] <pulse> on windows i don't see a reason to not just include the vs solution
[19:37:22] <norias> and cmake was just hell
[19:37:22] <LordKalma> pulse, with conan and cmake and cmake_find_package (or CMakeDeps in conan 2.) you can make conan optional :p
[19:37:22] <TinoDidriksen> You don't have to rely on vcpkg - that doesn't go into your CMakeLists.txt.
[19:37:30] <pulse> hmm
[19:37:32] <LordKalma> yeah, same with vcpkg
[19:37:39] <TinoDidriksen> It's just that your CMake build will pick up and use vcpkg deps.
[19:37:50] <rpav> LordKalma: i just figured out why everything is shit
[19:37:59] <LordKalma> everything is always shit
[19:38:06] <rpav> something crappy is better than nothing; nothing is better than the best thing; therefore something crappy is better than the best thing
[19:38:19] * rpav runs
[19:38:19] <LordKalma> !grab rpav
[19:38:20] <nolyc> LordKalma: The operation succeeded.
[19:38:22] <LordKalma> can't argue with that
[19:40:19] <PJBoy> wow great quote
[19:40:33] <rpav> it probably got me running
[19:40:33] <LordKalma> I grabbed the "/me runs", didn't I?
[19:40:53] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca)
[19:41:08] <Haohmaru> !rq rpav
[19:41:10] <nolyc> Haohmaru: <CodePoint> { vector<bool> v{false}; cout << (v[0] = !v[0])<< v[0]; }
[19:41:22] <Haohmaru> what was the syntax
[19:41:23] <LordKalma> Haohmaru, !rq <nick> isn't working since we moved to libera
[19:41:28] *** Joins: ivii (~ivan@user/ivii)
[19:41:49] <rpav> oh good i was still staring at it D: though i shouldn't have been, since my nick ought to have been highlighted if it was a substring!
[19:41:50] <pulse> wxwidgets docs literally suggest against cmake on windows and mac
[19:41:53] <PJBoy> !QuoteGrabs say 63
[19:41:53] <nolyc> PJBoy: * rpav runs
[19:41:55] <PJBoy> confirmed
[19:41:57] <pulse> "On Windows it is recommended to use Visual Studio and on macOS Xcode is recommended."
[19:42:10] <pulse> for linux they suggest cmake
[19:42:14] <LordKalma> to build it, no?
[19:42:17] <pulse> yeah
[19:42:20] <LordKalma> so?
[19:42:23] <pulse> but i can extend that philosophy to my project at large
[19:42:24] <pulse> lol
[19:42:33] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:42:33] <rpav> whoever wrote that is incredibly silly
[19:42:38] <pulse> why?
[19:42:49] <pulse> how hard is it to open a solution and click "build"
[19:42:54] <pulse> and then you get exact binaries you need
[19:42:57] <pulse> for your exact thing
[19:42:57] <LordKalma> hahaah really hard
[19:42:59] <LordKalma> want an example?
[19:43:15] <rpav> easily can be harder than opening CMakeLists.txt and hitting "build"
[19:43:15] <pulse> i hate setting up C++ projects
[19:43:20] <LordKalma> a friend of mine made a library for some piece of hardware, not important
[19:43:29] <LordKalma> but he decided to ship a VS solution for windows
[19:43:31] <pulse> rpav, and how do i automate that with so it builds with VS?
[19:43:36] <PJBoy> visual studio requires adding a couple steps on top of opening CMakeLists.txt
[19:43:46] <rpav> pulse: visual studio natively supports cmake now, and has for a number of years
[19:43:49] <LordKalma> I had to git reset, git pull, open solution, edit all library paths, build
[19:43:57] <PJBoy> you need to make your release and 64-bit configurations
[19:44:00] <rpav> https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-170
[19:44:02] <LordKalma> to use pthread4win and libusb
[19:44:11] <rpav> ^
[19:44:19] <pulse> rpav, and how does that help me when i need a x64/release build done in VS
[19:44:25] <LordKalma> and git reset is really the annowying thing
[19:44:30] <LordKalma> you have to edit them over and over again
[19:44:36] <rpav> VS sln/prj are sortof a hodgepodge where CMake at least _can_ be, but has a lot of best-practices
[19:44:41] <PJBoy> if vcpkg worked consistently, then vcxproject + list of packages would be the top tier distribution
[19:44:54] <pulse> i am honestly so fucking confused rn
[19:45:06] <LordKalma> yes, I can accept solutions if used with vcpkg
[19:45:09] <LordKalma> but I still prefer cmake :p
[19:45:19] <rpav> pulse: you open a project, click the cmakelists.txt, and it opesn as a project; VS will run cmake, you can configure the arch etc you want in the cmake panel, and it will run cmake to build
[19:45:19] <PJBoy> cmake is pretty top tier
[19:45:32] <LordKalma> pulse, tldr: we dont' agree with you, but everything sucks
[19:45:41] <PJBoy> what I'd want for windows ideally is probably conan + cmake + bat file
[19:45:55] <LordKalma> duh, man what?
[19:45:55] <pulse> rpav, do you know of any projects that do this so i can clone this from them
[19:45:57] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:45:59] <LordKalma> why do you want a bat file for?!
[19:46:08] <LordKalma> write a conanfile.py instead of a conanfile.txt, dummy
[19:46:10] <rpav> pulse: pick a cmake project :p
[19:46:10] <PJBoy> conan and cmake both require arguments on windows
[19:46:16] <pulse> i understand cmake on linux. on windows i find it extremely confusing
[19:46:23] <PJBoy> so the bat file makes it a one-click job
[19:46:28] <LordKalma> write a conanfile.py instead of a conanfile.txt, PJBoy :p
[19:46:42] <PJBoy> also VS + cmake doesn't prepare the release + 64 bit configs for you
[19:46:45] <PJBoy> so that's kinda annoying
[19:46:51] <pulse> right, i mean
[19:46:55] <pulse> my approach is literally clicking 2 buttons
[19:46:56] <PJBoy> they're easy to set up and all
[19:46:58] <pulse> how is cmake easier?
[19:47:02] <pulse> on windows, anyway
[19:47:03] <pulse> i get it on linux
[19:47:09] <LordKalma> pulse, well, it's two clicks for you
[19:47:12] <PJBoy> conan + cmake would make dependency handling easier
[19:47:18] <LordKalma> it's many clicks for users that will have to change their library paths
[19:47:20] <pulse> LordKalma, that's why i include the build instructions
[19:47:22] <rpav> pulse: if you get a VS splash screen that's like "Get Started" .. click "continue without code" at the bottom then File -> Open -> CMake
[19:47:23] <PJBoy> installing libraries and manually hooking them up in VS is a ballache
[19:47:27] <pulse> LordKalma, no, they won't, that's why i bundle the 3rd party lib
[19:47:36] <rpav> pulse: in the future projects you opened like that will be in the recent projects list like any other
[19:47:45] <LordKalma> bundling the 3rd party lib is BS :D
[19:47:47] <pulse> rpav, ok but i want to automate building of a 3rd party dep
[19:47:50] <TinoDidriksen> Do NOT bundle libraries.
[19:47:52] <pulse> does cmake allow that?
[19:47:56] <pulse> TinoDidriksen, why not??
[19:47:57] <rpav> pulse: so you make it a subdir in cmake
[19:48:05] <LordKalma> pulse, yes
[19:48:16] <LordKalma> external_content_add or fetch_content ;)
[19:48:24] <LordKalma> depending on whether you know how to make superbuilds or not :p
[19:48:33] <PJBoy> bundling libraries is the windows way
[19:48:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca)
[19:48:38] <rpav> or if the dependency isn't cmake, you can make cmake run the appropriate thing, though often it's easy to add a CMakeLists.txt with a few lines and avoid their build stuff entirely
[19:48:44] <pulse> bundling the lib: i have 0 problems when building my thing on another system. not bundling the lib: i have to spend 10-20 minutes setting up the env
[19:49:02] <pulse> also bundling the lib: the version is exactly what the program needs
[19:49:08] <rpav> if it's a .dll and .h you can make an import lib with a few lines, or just target_include_directories / target_link_libraries
[19:49:15] <TinoDidriksen> If you want to bundle the whole environment, use Docker. Do not have bundles in your source repo.
[19:49:28] <pulse> again adding more 3rd party deps
[19:49:38] * pulse throws monitor out of the window
[19:49:56] <rpav> pulse: submodule :P
[19:50:04] <LordKalma> yes, that's why you use cmake, and have the *option* for vcpkg/conan, by inclyuding basic config files, like conanfile.txt, that users can use IF they want to
[19:50:14] <LordKalma> and yes, they'll have long arguments in their cmake calls
[19:50:18] <LordKalma> though shit, that's windows
[19:50:22] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:50:35] <rpav> submodules are exactly the useful thing, because for any given checkout the submodule can correspond exactly to the version of the dep requierd to build
[19:50:37] <TinoDidriksen> Those 3rd party deps is how we get unified setups. Before those deps, everyone and their dog had their own build system and ancient bundled versions. Don't regress to that.
[19:50:48] <LordKalma> in fact, if you use Qt Creator to build with cmake, it has automatic conan/vcpkg handling which is SO FUCKING GOOD
[19:51:16] <pulse> TinoDidriksen, but it's literally easier for _me_
[19:51:29] <pulse> if i do it my way, then i can clone the repo on _any_ windows machine and get the build going in a minute
[19:51:31] <TinoDidriksen> And as I said, easier for you is not important enough.
[19:51:35] <pulse> if i do it your way, i need to spend extra time
[19:51:43] <pulse> how is easier for me not important
[19:51:50] <TinoDidriksen> Then make it a private repo.
[19:52:04] <pulse> then what's the point of open sourcing it lol
[19:52:15] <TinoDidriksen> If you want others to use it, make it easy to use in a cross-platform/toolset manner.
[19:52:19] <pulse> it is easy
[19:52:21] <rpav> pulse: there's also https://github.com/cpm-cmake/CPM.cmake which will automatically fetch deps etc using various methods with some simple configuration, and does not require additional tools beyond cmake
[19:52:23] <LordKalma> being serious about open source is being serious about other people building it
[19:52:25] <pulse> i added build instructions, there's 3 steps
[19:52:31] <pulse> just because it's unorthodox i should be shamed away into a corner? :p
[19:52:35] <LordKalma> yes
[19:52:37] <rpav> it requires no extra interaction or calls
[19:52:54] <LordKalma> rpav, half of CPM "packages" are a wrapped fetch_content
[19:53:07] <pulse> LordKalma, a lot of open source projects both bundle 3rd party deps _and_ provide VS solutions
[19:53:14] <rpav> (by users i mean; you of course have to do a bit of CPM integration, but it's reasonably easy and still requires nothing beyond cmake)
[19:53:28] <rpav> LordKalma: well right, but considerably easier frontend
[19:53:45] <rpav> LordKalma: and easier to reuse / share / etc
[19:54:09] <rpav> like it _does_ the infrastructure things for you, like determining where to check out, if you have it, etc
[19:54:18] <LordKalma> of course
[19:54:52] <pulse> maybe i'll just close source it and provide builds only
[19:54:56] * pulse shrugs
[19:55:10] <LordKalma> we're not the open source police
[19:55:11] <LordKalma> you do you
[19:55:18] <rpav> you can, but having your build system set up properly even for _yourself_ is extremely useful
[19:55:21] <LordKalma> we're just saying how we think it's saner for the community at large
[19:55:32] <rpav> maintaining 3 different IDE build configurations is a pain in the ass
[19:55:51] <rpav> not to mention if you have multiple boxes you work on, transferring configuration etc is still a thing
[19:55:51] <pulse> idk about other IDEs but from my experience, once you set up a VS project it tends to work forever
[19:56:00] <pulse> apart from version upgrades which also usually just work
[19:56:28] <hnOsmium0001[m]> not to mention debugging your broken .vcxproj and autotool setups (cough cough libstudxml)
[19:56:35] <rpav> maybe for simple projects that never change much and get built/dev'd on one box
[19:56:48] <pulse> no, complex projects tend to work great with VS too
[19:56:50] <pulse> i worked on several
[19:56:59] <hnOsmium0001[m]> you know how much of a pain in the ass it is when people hardcode shared vs static library into their buildsystem?
[19:57:00] <pulse> the build env was a pain to set up but once you did, it worked
[19:57:28] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:57:30] <TinoDidriksen> And with CMake + vcpkg, getting that setup on multiple machines is easy.
[19:57:56] <PJBoy> no props to vcpkg
[19:58:37] <PJBoy> oh hey, they merged std::ranges::views::zip_transform
[19:58:59] <kalven> *sigh*
[19:59:01] <kalven> unzips
[19:59:09] <PJBoy> bahaha
[19:59:20] <PJBoy> stands a pretty good chance of being the most complex cppreference page in the near future
[19:59:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:59:47] <pulse> so you are all telling me that if you saw this https://github.com/pulzed/KiwiEd/blob/main/BUILDING.md
[20:00:00] <pulse> you wouldn't understand it, and you would go into a full blown panic where you'd be searching for CMakeLists.txt
[20:00:08] <pulse> and then call the special task force on me
[20:00:18] <rpav> manually unpacking deps, ew
[20:00:36] <pulse> that's just because unpacked it's 100s of megs
[20:00:39] <rpav> if i can't pull a repo and build it and have it find and configure everything, it's broken
[20:00:48] <pulse> you don't have to configure anything though
[20:00:53] <pulse> you unpack, you build and that's it
[20:00:59] <pulse> the instructions couldn't be clearer
[20:01:05] <kalven> pulse: that's fine.. if anyone feels strongly about it they can contribute
[20:01:05] <rpav> they're 3 steps not 1
[20:01:17] <pulse> rpav, 3 simple steps. nothing complex about it
[20:01:27] <pulse> kalven, yeah, i suppose people can just contribute and add the cmake crap
[20:01:32] <pulse> if they desire it so badly
[20:01:34] <pulse> good point
[20:02:23] <rpav> this assumes anyone uses it and cares enough to contribute, seeing how it requires VS etc to build
[20:02:34] <pulse> eh
[20:02:43] <pulse> you know what, i'll just write code. fuck this build nonsense
[20:02:46] <rpav> i would see "no cmakelists" -> hard pass
[20:02:50] <pulse> good
[20:02:53] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:03:13] <kalven> you don't have to bend over backwards to attract everyone
[20:03:19] <pulse> exactly
[20:03:29] <PJBoy> given a choice between those simple instructions and a cmake file
[20:03:34] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Client Quit)
[20:03:37] <PJBoy> I would probably lean towards the former
[20:03:49] <PJBoy> I've had a lot of experience with broken cmake files
[20:03:49] <pulse> good xD
[20:03:51] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:04:05] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[20:04:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:04:27] <pulse> i just want something that builds and that doesn't waste my time configuring 3 billion fucking stupid programs and dealing with the nonsense they bring to the table
[20:04:31] <kalven> the most important part of open source is actually making the source open
[20:04:46] <pulse> kalven++
[20:05:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d)
[20:05:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d) (Changing host)
[20:05:04] *** Joins: skapata (~Skapata@user/skapata)
[20:05:23] <PJBoy> but kalven was already IRC_MAX
[20:05:37] <PJBoy> you've just triggered UB
[20:05:41] <pulse> damn
[20:05:47] <pulse> kalven = IRC_MAX
[20:06:03] <LordKalma> so that means kalven++ is IRC_MIN?
[20:06:09] <PJBoy> nah UB
[20:06:12] <hnOsmium0001[m]> to be fair, it is a lot easier to get a MSBuild system working, even if it makes you unpack and build deps manually
[20:06:33] <PJBoy> if it were UIRC_MAX, then it would go to UIRC_MIN
[20:06:39] <hnOsmium0001[m]> because nobody seems to bother using the fragile parts of MSBuild
[20:07:04] <hnOsmium0001[m]> that's not very nice of you to assume kalven is signed
[20:07:27] <PJBoy> well he's pretty efficient, and he can be negative sometimes
[20:07:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:08:35] <hnOsmium0001[m]> !grab PJBoy
[20:08:35] <nolyc> hnOsmium0001[m]: The operation succeeded.
[20:09:02] <hnOsmium0001[m]> quotesoutofcontext.jpg
[20:09:20] <LordKalma> like "the nazis were right"?
[20:09:35] <kalven> grab bait
[20:10:47] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca)
[20:11:20] <pulse> i bundled deps for this project as well https://github.com/pulzed/Lime
[20:11:25] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[20:11:34] <pulse> on windows, i open the solution and click "build" and it just works, regardless of what system i'm on
[20:11:50] <pulse> on linux, i install smfl and type `make` and it just builds
[20:12:02] <pulse> i see no downside to this approach
[20:12:22] <pulse> maybe it scales poorly, idk. if i had 100s of deps it probably would need a different approach
[20:13:04] <rpav> manual dep management is a pain
[20:13:20] <rpav> but really, use whatever til it becomes painful enough you need something else
[20:13:31] <pulse> yeah i can agree with that last statement
[20:13:45] <pulse> it's not like you can't just reconfigure your build system at any point
[20:13:57] <rpav> at some point though there doesn't seem to be a lto of reason to start with "thing that will be painful quickly" and one jumps right to "properly manage multiplatform builds/deps"
[20:14:29] <rpav> pulse: not only that it may be helpful to see exactly how/what/where becomes painful, because it can explain why <other thign X> does what it does
[20:15:33] <rpav> hell i moved _to_ and then _away from_ conan at some point; that was pretty painful both ways, but it paid to see what i needed and what i didn't
[20:16:13] *** Quits: callq (~callq@2409:4062:2e9e:2081:73:e6d7:2365:394e) (Quit: callq)
[20:17:40] <pulse> yeah i think i'll work with my approach for now and then if at some point the project gets super large i'll just do whatever the hell others are doing
[20:21:41] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:23:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca) (Ping timeout: 245 seconds)
[20:30:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:31:06] <pulse> yeah this is so much easier https://github.com/audacity/audacity/blob/master/BUILDING.md#building-on-windows
[20:31:16] * pulse shakes head
[20:31:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca)
[20:32:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:36:05] <rpav> not the best instructions
[20:36:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:36:37] <pulse> i literally got a headache reading this
[20:36:40] <pulse> but i can see the sense in it
[20:37:05] <rpav> plus like it clearly overexplains things like "how to open a project" or "click build!"
[20:37:22] <rpav> or recommends using cmake-gui at all ;P
[20:37:52] <pulse> it depends on conan, python, fucking cmake gui, and VS
[20:38:17] <rpav> the real cmake-specific steps here in a modern VS would be 1. after you clone the repo, "File -> Open -> CMake" in visual studio 2. Configure any necessary paths in the CMake pane 3. Build
[20:38:42] <LordKalma> cmake-gui is bundled with windows cmake, VS is a compiler
[20:38:43] <rpav> oh it uses conan too? eugh .. that's an unnecessary headache
[20:38:46] <pulse> i don't like that step 2 at all
[20:38:53] <LordKalma> only conan/python is a trye dependency there
[20:39:01] <rpav> pulse: well, windows sucks; no argument there
[20:39:02] <pulse> i could just say "set up wxwidgets in c:\wx" then
[20:39:04] <pulse> it's easier
[20:39:08] <pulse> actually i might just do that
[20:39:18] <pulse> hmm
[20:39:19] <LordKalma> doesn't audacity have some BS spyware now'
[20:39:22] <LordKalma> I read something about that
[20:39:34] <LordKalma> pulse, yeah, telling your users to install something where you want
[20:39:38] <LordKalma> sure
[20:39:38] <rpav> like you could be explicit about packages in the instructions but the fact, in windows, you _need_ instructions at all, is a very universally-windows and windows-centric problem
[20:39:56] <pulse> yeah i mean i typically bundle libs but wx is gargantuan
[20:40:05] <pulse> after building the directory size is almost 2gb
[20:40:14] <rpav> like assuming you're not using mingw64 or something in which case it works more like real OS's
[20:40:23] *** Joins: AmR (~AmREiSa@156.207.136.200)
[20:40:27] <LordKalma> rpav, msys2 has pacman
[20:40:27] <pulse> i probably should just set up env vars like us windows devs like
[20:40:29] <LordKalma> which is cool
[20:40:32] <rpav> LordKalma: yeah that
[20:40:32] <pulse> and a .bat to start up VS
[20:40:34] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:40:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:40:37] <pulse> that's what we did at my first job, LOL
[20:40:47] <pulse> "don't run VS manually, use this .bat to set up env vars"
[20:40:53] <pulse> totally sane and normal
[20:41:07] <rpav> yeah i extracted the .bat into a bash script at some point so i could run msbuild shit from git bash
[20:41:18] <rpav> vs/msbuild/etc suck ;/
[20:41:31] <pulse> you can set env vars as macros in the .vcproj too
[20:41:35] <pulse> but that's somehow even more obtuse
[20:41:46] <pulse> idk why they don't add it in the damn project property pages
[20:42:51] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Ping timeout: 245 seconds)
[20:43:06] <pulse> yeah i think i might do that approach
[20:43:12] <pulse> then i don't have to bundle anything
[20:43:34] <pulse> for linux i'll just set up a simple make/cmake build
[20:43:42] <pulse> should work
[20:45:03] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:46:49] <gehn> to be fair, there's now a powershell module you can load via DLL instead of running the .bat
[20:47:20] <gehn> but it's the same unfortunate premise of needing to do some extra stuff to get a dev terminal as opposed to a normal one
[20:47:36] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:47:41] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[20:48:08] <AmR> I try get all partitions list and it DeviceNumber, https://pastebin.com/yiGHmfxi I know the code is very bad But I try working with winapi, Any help ?
[20:49:25] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[20:49:44] <AmR> > My output > Device type: 7 number: 1 partition: 4 partition mask: D: >         Device type: 2 number: 0 partition: 4294967295 partition mask: E: >         Device type: 7 number: 0 partition: 1 partition mask: F: And It's not OK, It's very bad :(
[20:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca)
[20:54:43] *** Quits: adder` (~adder@user/adder) (Read error: Connection reset by peer)
[20:55:26] <rpav> hmm, you can't do `for(auto&& : ...) { ... }`
[20:56:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:56:12] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[20:56:22] *** Joins: adder` (~adder@user/adder)
[20:57:28] <rpav> i suppose you ought to just be able to `for(range-statement) { ... }`
[20:57:46] <rpav> (er -expression probably)
[20:59:38] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:02:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:03:19] <PJBoy> that would be quite a thing to allow
[21:03:54] <rpav> it would be pretty limited use, really only sanely for repeat(N) where you don't care about the index
[21:04:13] <rpav> less sanely for implicit-mutating-iteration
[21:06:02] <AmR> I try that only I don't know How I can get partition index from windows :( And Some more info
[21:08:39] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca)
[21:09:19] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[21:09:35] <PJBoy> man you have a really widespread set of problems
[21:09:44] <PJBoy> it's like you're 7 different people
[21:09:58] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:10:14] <rpav> maybe all using the same irc window!
[21:11:21] <AmR> That about me ?
[21:11:57] <rpav> i think so, but it wasn't my impression .. you seem to be doing windows system .. stuff?
[21:12:07] <AmR> How I can be like 7 different people ?
[21:12:23] <AmR> Yes It's WinAPI
[21:12:24] <rpav> be like 8 different people, but then skip the last one
[21:12:43] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:14:39] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:14:50] <AmR> I think I fix line 11 like this " BOOL b = ( driveMask & ( 1 - ( 1 + i ) ) ); " But I don't think this is good too
[21:15:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:18:01] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[21:18:38] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:18:57] <PJBoy> that + is definitely supposed to be a <<
[21:19:05] <PJBoy> but no, even then
[21:19:20] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[21:20:00] <PJBoy> bad
[21:24:22] *** Joins: Simplar (~Simplar@188.163.93.241)
[21:26:16] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca)
[21:27:55] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[21:27:58] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Write error: Broken pipe)
[21:29:10] <great_taste> is it possible to use an if constexpr as an ifdef to conditionally specify the type of a member variable?
[21:30:14] <PJBoy> no
[21:30:28] <PJBoy> but you can use std::conditional_t
[21:30:32] <cbreak> great_taste: there are meta programming ways for this
[21:30:35] <great_taste> e.g. template<typename T> class C { if constexpr(std::is_empty_v<T>) { using storage_type = std::vector<int>; } else { using storage_type = std::vector<std::pair<int, T>>; } ... };
[21:30:44] <PJBoy> actually a lambda could potentially work
[21:31:25] <cbreak> great_taste: the old-school way would be to make a storage_type<X>::type meta-function
[21:32:18] <cbreak> basically, a struct with a specialization for true type
[21:32:24] <cbreak> and one for false type
[21:32:56] <PJBoy> << TYPE<decltype(S<int>::var)>, TYPE<decltype(S<void>::var)>; template<typename T> struct S { using var_t = decltype([]{ if constexpr (is_same_v<T, int>) return int{}; else return float{}; }()); var_t var; };
[21:32:57] <geordi> int, float
[21:33:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:33:04] <PJBoy> less old school method ^
[21:33:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:33:19] <PJBoy> not necessarily better
[21:33:46] <ville> PJBoy: what have we learned about shoving template crap to one line on irc?
[21:34:15] <PJBoy> it wasn't that bad until I finished writing it :(
[21:34:27] <kalven> story of your life?
[21:34:38] <PJBoy> sheesh
[21:34:42] <kalven> sorry!
[21:34:45] <PJBoy> :D
[21:34:54] <great_taste> PJBoy wow
[21:35:27] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[21:35:32] <great_taste> nice trick, thanks
[21:36:38] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 260 seconds)
[21:36:54] <kalven> but for case, use std::conditional_t
[21:37:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:37:39] <AmR> What I try to do to know hard disk number that have partition like C: and so on, By other or  \\.\PhysicalDrive0 have C: D: etc ....
[21:37:41] <cbreak> old school way, before std::conditional_t: template<typename T, bool b> struct container_type; template struct container_type<T, true> { using type = std::vector<int>; };template<typename T> struct container_type<T, false> { using type = std::vector<std::pair<T,int>>; };
[21:37:51] *** Quits: sigma_ (~sigma@86.57.83.87) (Quit: Konversation terminated!)
[21:37:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:38:06] <cbreak> AmR: windows :(
[21:39:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:39:46] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca)
[21:40:52] <great_taste> kalven oh std::conditional_t is the right choice
[21:41:51] <great_taste> std::conditional_t actually does what cbreak described, but in a reusable way
[21:41:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:03] *** ChanServ sets mode: +v npaperbot
[21:42:03] <cbreak> yes.
[21:42:04] <kalven> indeed
[21:43:25] *** Quits: proller (~p@2a02:6b8:0:40c:c7ce:9c88:c175:ebe8) (Ping timeout: 240 seconds)
[21:44:57] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[21:45:17] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:46:39] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:57:59] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:05:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:05:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:06:01] *** Joins: magla (~gelignite@55d436fa.access.ecotel.net)
[22:15:58] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[22:17:15] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:19:27] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:9768:c1e0:b1b8:bd8f) (Remote host closed the connection)
[22:19:45] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c)
[22:19:56] *** Quits: jsbach (~jsbach@2a01:c22:ac94:e600:c1ff:2a19:8f1c:b013) (Ping timeout: 252 seconds)
[22:22:21] <ashafq> Has anyone tried to install Windows in A:\?
[22:28:56] *** Joins: tom_ (~tom@ip-5-172-238-151.multi.internet.cyfrowypolsat.pl)
[22:30:29] <LordKalma> you don't control that
[22:31:50] *** Tobbi__ is now known as Tobbi
[22:33:26] <rpav> better question; can you use windows without drive letters _at all_
[22:33:27] <pulse> yeah i don't think that works
[22:33:32] <LordKalma> no
[22:33:33] <pulse> rpav, no
[22:33:42] *** tom_ is now known as paul424
[22:33:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:34:01] <rpav> sortof rhetorical but yeah
[22:34:23] <AmR> ashafq: Win what ver ?
[22:34:23] <rpav> it ought to be able, but so much stuff just can't deal
[22:36:42] <ashafq> AmR: 11+?
[22:37:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:38:02] <Alipha> AmR: `BOOL b = ( driveMask & ( 1 + i ) );` is most likely supposed to be `BOOL b = ( driveMask & ( 1 << i ) );`
[22:38:49] *** Quits: paul424 (~tom@ip-5-172-238-151.multi.internet.cyfrowypolsat.pl) (Quit: GG)
[22:39:49] <AmR> I don't think MS give that option at all this days, And what did mean by " can you use windows without drive letters _at all_ " without C: ? or what ?
[22:39:53] *** Joins: paul424 (~tom@ip-5-172-238-151.multi.internet.cyfrowypolsat.pl)
[22:40:22] <AmR> Alipha: Thanks I fix that, That confirm from You.
[22:40:26] <rpav> AmR: basically yes
[22:41:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:41:19] <Alipha> Using network booting?
[22:41:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:41:51] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[22:41:57] <LordKalma> even if you network boot, Windows will mount itself on C: I think
[22:42:10] <LordKalma> but now that you think of it, I think the recovery shell mounts on X:
[22:42:11] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 256 seconds)
[22:42:26] <LordKalma> anyway, A: and B: are supposed to be the floppy drives hahah
[22:42:51] <rpav> imagine installing windows without a floppy drive
[22:43:15] <ezzieyguywuf> let's say I have `class SomeInterface() { virtual void doSomething() = 0};` and `class SomeImplementation : public SomeInterface { ... }`, isn't there a way to define `SomeInterface` such that I can actually "do something" regardless of which concrete implementation is being used? i.e. `void foo(SomeInterface* intf) { intf.doSomething() }`, I'd want to define in `SomeIntereface::doSomething()`
[22:43:17] <LordKalma> we have USB floppy drive readers at work
[22:43:21] <ezzieyguywuf> something like `std::cout << "Hello, this is a log \n"`
[22:43:24] <LordKalma> we depend on them for some old gear
[22:43:33] <rpav> LordKalma: hah nice
[22:43:37] <ezzieyguywuf> I _thought_ I had used CRTP for this in the past, but that seems sort of overkill
[22:44:01] <rpav> presumably you can still buy blank floppies
[22:44:15] <rpav> so many things use adapted SD readers or similar
[22:44:27] <ezzieyguywuf> ahhh, maybe `class SomeInterface() {void doSomething() { doLog(); doSomethingImpl() } protected: virtual void doSomethingImpl() = 0};`
[22:44:33] <LordKalma> sometimes you can get buttloads of them for free from office cleanups
[22:44:47] <rpav> free floppies can be dubious quality
[22:44:50] <LordKalma> ezzieyguywuf, not really understanding what you want
[22:45:37] <rpav> ezzieyguywuf: that's probably your best bet
[22:46:09] <AmR> ashafq: Windows mast be use drive like C: for geting working even when it's work like live Cd or "setup fix" like command console
[22:47:14] <ezzieyguywuf> LordKalma: yea sorry, I did a bad job explaining it. I think rpav gets it though :-P
[22:47:48] <rpav> you could rely on the subclass calling the superclass impl but that's sortof a crapshoot and error-prone
[22:48:11] <LordKalma> CRTP comes to mind, but you can't use that as an interface
[22:48:25] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-414b-3d39-bc9b-3dcb.res6.spectrum.com)
[22:51:25] <ezzieyguywuf> rpav: yea I was wanting to avoid that
[22:51:27] <rpav> you could probably crtp-inject some things if you needed
[22:51:57] <rpav> non-template Base class, CRTP intermediary, specific-impl subclass the CRTP
[22:52:00] <ezzieyguywuf> I think splitting it up between `doSomething` which is concretely defined in the parent class, and `doSomethingImpl` which is pure virtual and defined in the child class, is probably what I was looking for
[22:52:15] <rpav> the intermediary could implement virtuals _and_ know about the subclass
[22:52:17] <LordKalma> yes, you can always add a layer of indirection haha
[22:52:46] <rpav> a very useful setup actually
[22:53:27] *** Joins: proller (~p@2a02:6b8:b081:8807::1:10)
[22:53:28] <rpav> bah what's a good terminal library for c++, is ncurses still the only real bet
[22:53:54] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:53:56] <pulse> ♪ make your own ♪
[22:54:04] <rpav> hell no
[22:54:10] <pulse> ♪ noooot invented {here} ♪
[22:54:20] <LordKalma> https://github.com/a-n-t-h-o-n-y/TermOx ?
[22:54:33] <rpav> even termlib is probably sufficient, i only care about a few basic ops
[22:55:17] <rpav> LordKalma: crazy .. a bit overkill for what i was thinking but maybe has the low-level stuff
[22:55:22] <rpav> another one awesome-cpp didn't have, too
[22:59:45] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Ping timeout: 256 seconds)
[23:00:00] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[23:01:36] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:01:58] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[23:09:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[23:09:32] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[23:09:37] <ezzieyguywuf> rpav: I've had my eye ot ftxui for a while but haven't used it yet
[23:10:42] <rpav> ezzieyguywuf: that one looked kinda crazy too
[23:10:56] <rpav> i just want basic cursor control, colors, and erase/scroll stuff
[23:11:32] <ezzieyguywuf> yea well, in that case rolling your own is probs easient
[23:11:38] <ezzieyguywuf> just ascii escape sequences for nix
[23:11:54] <rpav> nah if nothing else termlib or termcap or whatever
[23:12:24] <AmR> But How I can get DeviceType string ? And How I can get drive later ?
[23:12:30] <rpav> or ncurses, but while i don't mind the API, it has some annoying issues
[23:13:46] *** Quits: paul424 (~tom@ip-5-172-238-151.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:14:38] <pulse> "In computer programming, "NIH syndrome" refers to the belief that in-house developments are inherently better suited, more secure, more controlled, quicker to develop, and incur lower overall cost (including maintenance cost) than using existing implementations"
[23:14:57] <pulse> "belief" sheesh
[23:15:01] <pulse> it's the trueth
[23:15:06] <rpav> not even slightly
[23:15:20] <pulse> imagine how much pain you save in the long run
[23:15:29] <rpav> this is why i only try to implement things that don't really exist, or exist so poorly as to not be useful, but you have to watch with the latter you dont' just blindly label everything "bad"
[23:15:42] <pulse> nah i'm a huge believer in NIH
[23:15:55] <rpav> then you haven't written or worked wtih much software
[23:16:01] <pulse> lol
[23:16:12] <pulse> you know some of the largest corps do NIH, right?
[23:16:18] <pulse> like, say, you know, fucking google
[23:16:24] <pulse> has google not worked or written much software too?
[23:16:26] <rpav> because there comes a point when you have when you start feeling the pain of having to maintain all the things you wrote, rather than capitalize on the effort of others
[23:16:39] <pulse> still less effort than maintaining other people's crap
[23:16:41] <rpav> pulse: that doesn't mean many of their things don't suck
[23:16:54] <pulse> and making sure the orchestration of your system doesn't break when one bad actor does something at random
[23:16:58] <pulse> the appeal of NIH is you control it all
[23:17:08] <pulse> rpav, no, but it completely invalidates your argument
[23:17:21] <rpav> also, google has a zillion fucking dollars and can hire the industry best, and thus have the man-hours to actually write it all, and do it well; this does not apply to one person, or a small team, or even a reasonably large team
[23:17:23] <pulse> i'm not dogmatic about NIH, but i can totally see the appeal
[23:17:24] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[23:17:33] <pulse> why wouldn't it apply to a small startup too?
[23:17:37] <pulse> i can totally see it
[23:17:43] <rpav> becuase a small startup's time is at an extreme premium
[23:17:49] <rpav> if you have to ask this you haven't tried
[23:17:59] <pulse> yeah, and NIH has the potential to save massive amounts of time in the future
[23:18:08] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[23:18:31] <rpav> it's the problem people get into with games too .. why not write my own engine?! my giant application-programmer brain is surely smarter than those lizard-brain game developers, and i will come up with a brilliant engine that will make theirs pale in comparison!
[23:18:40] <pulse> i'm not saying it's a good strategy to use blindly
[23:18:47] <rpav> it's never a good strategy to use at all
[23:18:49] <pulse> i think you should write your own engine though. makes your game more unique
[23:18:53] <pulse> disagreed
[23:19:00] <pulse> it's definitely a good strategy in certain cases
[23:19:09] <rpav> mostly because there are _already_ enough times you _will_ have to write new things, you don't have time for reinvention, poorly
[23:19:27] <pulse> but you have time to deal with messy updates that come with relying on 3rd party?
[23:19:29] <rpav> it's probable we agree in principle, but label it differently
[23:19:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:20:12] <rpav> e.g. if you find some tool basically useless, and you're familiar enough with the field to _know_ it's useless, and _why_, and have the expertise to write the thing you need, then (assuming you're not still strapped for time), you probably can save time by making a new better thing
[23:20:54] <pulse> it doesn't even have to be better, it just has to be controlled by you. that's the whole idea
[23:20:55] <rpav> mostly "NIH" applies to things reinvented poorly by people _out_ of their field, because they don't understand the thing in question
[23:21:00] <pulse> but it's not always the right strategy
[23:21:02] <pulse> it depends on various things
[23:21:13] <pulse> i think NIH gets a bad rap because it's misused often
[23:21:20] <pulse> but i definitely think it's a valid strategy for running a business
[23:21:22] <rpav> pulse: that's not really useful because not a lot needs controlled by you .. maybe on the micro scale, sure, write some utility classes and stuff, but
[23:21:43] <pulse> do you know how many problems are caused in the real world by relying on 3rd party software
[23:21:43] <rpav> even "write my own json parser#@!" is silly, because it's solved way better than you could do it in any reasonable time, and requires no "control"
[23:22:21] <rpav> 3rd party is always a balance between "how well it works for this" and "saves the time of doing it"
[23:22:38] <pulse> yeah, saves time now. wastes an enormous amount of time later when shit hits the fan
[23:22:51] <rpav> not really .. make better choices on what you use :p
[23:23:03] <pulse> that's one strategy
[23:23:18] <kalven> pulse: google uses a lot of open source libs as well as a ton of internal libs. The advantage of NIH there is that you can make things that meshes together better with what you ahve
[23:23:48] <kalven> C++ libs are often afraid to be to opinionated.. There are less issues like that with NIH
[23:23:49] <pulse> i have a buddy who works at google and he said the majority of it is internal in-house stuff
[23:24:01] <pulse> but sure they also depend on 3rd party a lot
[23:24:06] <pulse> you can't really escape it fully anyway
[23:24:10] <LordKalma> https://killedbygoogle.com/
[23:24:22] <pulse> yeah there are issues with NIH, it's just... i wish it wasn't always seen as a meme
[23:24:48] <kalven> I mean.. people NIH for a lot of different reasons
[23:24:53] <kalven> some good, some perhaps not so good
[23:25:07] <pulse> yeah. you can't really generalize it
[23:26:26] <MaddHatter> I always thought of NIH as a syndrome, evident only when looking at numerous examples taken together, of a strong bias against existing solutions
[23:26:34] <rpav> it's only a meme when you NIH for vague and unjustified reasons like "control" without very specific actual necessity
[23:26:37] <pulse> i think NIH gets hate because historically, almost everything was NIH
[23:26:48] <pulse> and now people frown at it because they don't want compatibility issues anymore
[23:26:51] <pulse> or something
[23:26:57] <yolo> class X { public: int flag{0}; ...} , use this flag to record ctor errors, then before I use this class's objects I will always check the flag for error handling, will this be enough to deal "ctor can not return error thus you have to do exception handling in c++"?
[23:27:12] <rpav> NIH also only applies when there is a choice of something that exists, and doing it yourself; first invention is not "NIH"
[23:27:36] <MaddHatter> yolo: You're adding 4 bytes to every object ever constructed just to track a one-time is-it-valid flag?
[23:27:42] <yolo> s/deal/deal with/
[23:28:09] <yolo> MaddHatter: for non-exception mode, yes I'm ok to pay for that 4 byte price
[23:28:10] <rpav> yolo: maybe but you could also factory it or something and return an optional<T>
[23:28:31] <rpav> probably there's a better way to solve whatever you're trying to do though, if you have some more detail
[23:30:26] <yolo> rpav: trying to have a good boilerplate 'strategy' for error handling, my code does not have many so I'm trying to add that
[23:30:51] <yolo> so far after some study i want to opt for non-exception, thus want to deal with some ctor
[23:31:00] <rpav> yeah don't do that
[23:31:36] <rpav> throw exceptions if you really have errors
[23:31:46] <rpav> explicit error checking is bad in any case
[23:31:48] <pulse> decent article https://www.joelonsoftware.com/2001/10/14/in-defense-of-not-invented-here-syndrome/
[23:32:02] <pulse> "If it’s a core business function — do it yourself, no matter what."
[23:32:04] <pulse> i can agree with that
[23:32:28] <pulse> not a totally dogmatic approach
[23:33:11] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:33:28] <rpav> maybe
[23:33:52] <rpav> i think that would depend on exactly how you split "core business function"
[23:34:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:34:44] <rpav> also a lot of this is like, anecdotal / subject to survivor bias
[23:34:52] <rpav> and probably cherry picked to shit
[23:35:06] <pulse> it's not good to be dogmatic either way
[23:35:16] <PJBoy> if you want a job done right
[23:35:16] <pulse> but 99% of devs will tell you "avoid NIH" and i find that silly
[23:35:23] <pulse> NIH is how you get good devs, after all
[23:35:42] <pulse> you don't get better wheels any other way than reinventing them
[23:35:58] <rpav> if a thing is what your core business is _literally_ doing, if you're not doing it yourself, is it really your core business.. but that only applies pretty narrowly
[23:36:49] <rpav> but if you're a window maker, you don't actually make glass, you don't make the tools that cut the glass, you don't make the trucks that carry the glass, etc
[23:37:06] <pulse> it's also a matter of having tight control over your system. maintaining a system when you have full control over it and it's designed and maintained competently, is a breeze
[23:37:18] <Shell> you may be surprised at how many companies build and sell ffmpeg wrappers, have no idea how video works, and present to their customers as if they are video experts. :)
[23:37:29] <pulse> contrast that picture to some scenario where you depend on N 3rd party solutions and they constantly break and every day is a new shit show
[23:37:30] <yolo> github/stackoverflow are there to fix NIH with copy&paste
[23:37:33] <pulse> and this is what actually does happen
[23:37:38] <rpav> even amazon was a trillion-dollar business before they got into shipping (successfully, over a wide area)
[23:37:40] <pulse> Shell, lol
[23:37:43] <yolo> and they're hugely popular, so no worries
[23:37:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[23:38:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:38:31] <pulse> i mean what do you think the reason is for every large company's website being written ground up
[23:38:36] <pulse> you don't see microsoft using wordpress for their pages
[23:38:38] <pulse> i wonder why
[23:38:59] <pulse> it's one example of NIH that everyone just ignores because it's too obvious
[23:39:26] <pulse> imagine if you were adobe and you had to rely on some crappy wordpress plugin
[23:39:34] <pulse> it's an extremely stupid situation
[23:39:39] <pulse> no one in their right mind would do that
[23:39:46] <pulse> so why is it different with libs
[23:39:58] <pulse> idk, i just see the appeal. i know it's not always practical
[23:40:05] <rpav> pointing at MS and being liek "look! they're MS and _they_ do NIH! let's do that!" is incredibly laughable for so many reasons
[23:40:16] <pulse> maybe, but it demonstrates a point
[23:40:23] <rpav> most of them being microsoft _doesn't_ do NIH so much as they're like "hey that looks good, let's buy the people who are doing it"
[23:40:25] <rpav> it does not
[23:40:25] <pulse> you won't see MS using 3rd party crap often
[23:40:38] <rpav> that's because they buy the 3rd party crap and slap their own label on it
[23:40:42] <pulse> heh, is it still NIH if you just buy the 3rd party
[23:40:42] <pulse> lol
[23:40:43] <rpav> pick basically anything they do
[23:40:49] <pulse> a sort of reverse-NIH
[23:40:56] <MaddHatter> if the libraries you depend on break every week and that's causing a problem for you, the problem is in your dependency management and not testing/locking versions
[23:40:58] <pulse> ok, i guess you have a point there. lol
[23:41:18] <pulse> MaddHatter, the probability that this will happen approaches 1 with literally everything, though
[23:41:26] <pulse> even in-house software
[23:41:35] <MaddHatter> pulse: sure, which is why nobody should be without tests
[23:41:39] <pulse> but with in-house at least you control it
[23:41:47] <pulse> tests are leaky too
[23:41:51] <pulse> you can't test everything
[23:41:53] <pulse> shit will break
[23:41:55] <pulse> it always does
[23:41:56] <rpav> excel is possibly the one thing they originally developed
[23:41:59] <pulse> with NIH, it breaks less. simple as that
[23:42:23] <rpav> again, if you think that, you haven't had to maintain enough of your own software :p
[23:42:33] <MaddHatter> if you're using open-source components, "control" is always just a fork away. If you're relying on a third party without source access, then yeah, that can be an issue and I wouldn't trust my "core business" to that model.
[23:43:00] <pulse> yeah, a fork and 3000 hours of work
[23:43:12] <rpav> as opposed to 30k hours of your own work
[23:43:24] <MaddHatter> sure, but you've saved yourself the 3000 hours of work by doing "require X" instead of writing X
[23:43:40] <pulse> yeah but maybe that won't break in the future, and since it's part of your system you don't have to make it generic
[23:43:46] <pulse> which is another point i'd like to make about NIH
[23:43:55] <pulse> 3rd party has to be generic and cater to everyone
[23:44:02] <pulse> NIH solutions don't
[23:44:09] <pulse> the benefit should be pretty obvious
[23:44:13] <rpav> err
[23:44:18] <MaddHatter> I'm skeptical of this claim that an in-house thing will break less than an external thing. I don't think that's worked out in practice in my experience at least.
[23:44:44] <pulse> MaddHatter, well, it's not a general fact of things. i assume a level of competence when i make those claims :p
[23:44:55] <pulse> if and only if you design your system competently, then you _may_ benefit from NIH
[23:45:05] <rpav> or "doesn't have to be generic," as if 3rd party things are all "generic" or that "has functionality to support more situations and is battle-tested" is somehow worse than "hack i did in a couple hours that sortof halfassed supports this one thing"
[23:45:07] <pulse> if you design it crappy, then you invalidate the whole point
[23:45:09] <MaddHatter> Even without the competance issue, external things see a lot more testing by virtue of other people using them, and catch (and fix) errors that way
[23:46:12] <pulse> yeah, that's a good argument MaddHatter
[23:46:16] *** Joins: jsbach (~jsbach@2a01:c22:a545:5400:3af3:abff:fe57:23d5)
[23:46:24] <pulse> but the tradeoff is much wider context
[23:46:29] <rpav> it's not a tradeofff
[23:46:30] <pulse> which invites potentially more bugs into the system
[23:46:38] <pulse> rpav, there's always a tradeoff
[23:47:11] <rpav> most of the time you _don't know_ all the things you need, when you need some-functiuonality-X, and even if you don't understand all the bits to _start_ with, you will most likely benefit from experienced, polished work from other devs vs hacking some crap yourself
[23:47:21] <pulse> perhaps
[23:47:27] <pulse> i'd say in most cases what you say is true, rpav
[23:47:40] <pulse> but i wonder if you can see the benefits of a startup choosing to go at least partially NIH
[23:48:30] <rpav> i don't at all disagree there are giant holes and not every problem has a good solution; for some things that are very important to your project, _for which you have expertise_, and a strong handle on the things which you need to make them happen, making your own tool is often good
[23:48:53] <pulse> for games specifically, i think NIH actually has the potential to make them more unique and less generic
[23:48:54] <MaddHatter> I think startups are probably the extreme example where they shouldn't roll their own. More than anything, what's critical to a startup is to get off the runway and into the air flying and they have precious little time to accomplish that. Every hour saved is worth it, even if it costs 10 hours down the road later.
[23:48:58] <rpav> those kinds of things come up often enough you're lucky you have time enough to do a few
[23:49:00] <pulse> which can potentially boost your sales through the sky
[23:49:20] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 250 seconds)
[23:49:39] <rpav> MaddHatter: yeah absolutely .. you need to maximize get-your-product-done and minimize wasted time, which is very literally wasted money for a startup
[23:50:03] <rpav> at some point in the future if it becomes profitable to switch some 3rd party thing to your own, hey
[23:50:16] <pulse> another point. some 3rd party stuff requires subscription, and startups commonly spend a fortune in the long run
[23:50:22] <pulse> with in-house stuff, you save all that money
[23:50:28] <pulse> you spend more for dev, sure, but then the product is yours
[23:50:46] <rpav> not really
[23:50:49] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Ping timeout: 250 seconds)
[23:51:11] <rpav> heads are not free; more often they spend a fortune maintaining some thing thye could have made a deal on or just profited from using
[23:51:42] <pulse> in-house also allows the potential for your software to become better than the 3rd party competitor, which you can benefit from too
[23:51:52] <pulse> the whole point i'm trying to make is that NIH shouldn't be necessarily viewed as a meme
[23:52:03] <pulse> it should be considered, at the very least
[23:52:07] <rpav> e.g. Squaresoft spent fucktons of time and money building Luminance; they _had experienced_ devs and a big team etc
[23:52:23] <rpav> and FF7 Remake used UE4 because Luminance was such a stunning success
[23:52:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:52:46] <rpav> EA spent fucktons of time and money building Frostbite; yadda yadda ME5 on UE5
[23:53:35] <rpav> it's hard to beat a 3rd party product that gets like 100k hours of dev a month even with a large experienced team
[23:53:37] <pulse> i think going NIH with something of the scale of UE4 is a bit silly indeed
[23:55:24] <pulse> my future business model is creating retro-styled games for modern platforms
[23:55:29] <pulse> and i totally intend to write my own ecosystem for it
[23:56:14] <pulse> for games specifically i believe it's a good idea because it gives your games a unique flavor
[23:56:39] <pulse> which can give them a certain charm that you wouldnt' get if you just used some generic engine
[23:57:20] <pulse> not that i'm invalidating other approaches
[23:57:35] <pulse> i just think the approach i'm going for is valid too
[23:58:10] <MaddHatter> If you can get the right people, maybe? I come back to that the first anything you design is going to suck. That's just the nature of learning and becoming an expert. Can you afford to iterate your invention until it doesn't suck anymore?
[23:58:27] <pulse> already been doing it for a decade, so yeah
[23:58:56] *** Quits: proller (~p@2a02:6b8:b081:8807::1:10) (Ping timeout: 252 seconds)
[23:59:37] <rpav> right now what i'd like to NIH is a good alternative to http://www.styluslabs.com/ Write .. which is the niftiest and most responsive app of its kind i can find, but its handling of stylus tool transitions drives me nuts
[23:59:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:59:58] <pulse> interesting
