[00:35:16] <siiky> if I use set-read-syntax! in some module to define custom reader syntax, and someone imports the module in a program, will the syntax be available to the whole program, or only to the module that imported it?
[00:37:04] <siiky> I was thinking of a usecase to learn a bit about some of the reader syntax capabilities, and came up with  #!sql"path/to/file.sql"  to read the SQL file into a string (not very imaginative but it's neat)
[00:39:00] <siiky> and it's a bit wonky... #!sql42 will fail, for obvious reasons; #!sql() will fail because I make sure the next thing is a string; and #!sql will silently eat the next Scheme token as if it was the intended target
[00:39:31] <siiky> though on the bright side  #!sql "path/to/file.sql"  will also work because whitespace is skipped
[00:40:59] <siiky> #,(sql "path/to/file.sql") is "safer" to use (harder to get wrong), but needs more typing...
[00:41:42] <klovett> siiky: read-syntax effects whole program
[00:43:12] <siiky> thanks, that's good to know!
[00:43:15] <klovett> siiky: the read-syntax would be #!s... since it triggers on a char
[00:43:58] <siiky> what do you mean?
[00:44:00] <klovett> oops, #s, #! is a read-mark
[00:44:16] <siiky> (I got it working btw :p)
[00:45:28] <siiky> is there a way to inspect the (current-read-table) ?
[00:46:17] <klovett> no defined api afaik
[00:47:25] <siiky> klovett: ah maybe I used the wrong terminology? I used set-read-syntax! with a symbol, so I defined a read-mark
[00:50:27] <klovett> still read-syntax. #! is used as in #!optional, which are "marks".
[00:50:58] <siiky> interesting, looks like neither set-read-syntax! nor set-sharp-read-syntax! are used internally, so #!eof, #!optional, #!key are special cases?
[00:51:35] <klovett> last para of http://wiki.call-cc.org/man/5/Module%20(chicken%20read-syntax)#set-read-syntax talks about that
[00:53:08] <siiky> interesting
[01:00:04] <siiky> is there a way to make the reader syntax available only for the compilation phase? for example by calling set-read-syntax! with #f after a certain time
[01:00:34] <siiky> automatically, that is
[01:04:12] <siiky> ah now I understand what the description of copy-read-table means
[01:05:54] <klovett> to make a module available at compile time use the csc option -X (-extend)
[01:07:35] <klovett> so csc -X srfi-19-literals foo.scm would allow #@1-1-22 in source
[01:08:49] <siiky> ooh really neat!
[01:19:23] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[03:08:12] *** Quits: crumpo (~crumpo@user/crumpo) (Quit: Buh bye)
[05:30:05] *** Joins: klovett_ (~klovett@107.116.92.97)
[05:33:17] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[05:54:17] *** Quits: klovett_ (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[06:07:48] *** Quits: florz (nobody@rain.florz.de) (Ping timeout: 240 seconds)
[06:17:46] *** Joins: florz (nobody@rain.florz.de)
[06:28:02] *** Joins: klovett (~klovett@107.116.92.97)
[06:29:51] *** Joins: irontom (~user@38.81.106.9)
[07:18:58] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzz…)
[07:23:13] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: bokbok, banterpixra
[07:26:55] <irontom> I'm finishing up the last chapter of "The Little Schemer" where you build an interpreter. In the examples there are functions that return a type, like *const or *quote. However, when I write a function that returns something like *const or *quote, I get an "unbound variable" error. Are the types called something else or represented differently in Chicken scheme? 
[08:04:48] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[08:06:47] *** Joins: irontom (~user@38.81.106.9)
[08:18:52] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: bokbok, banterpixra
[08:26:43] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:57:24] *** Quits: ecloud (~quassel@192.89.120.58) (Ping timeout: 272 seconds)
[11:11:01] *** Joins: ecloud (~quassel@192.89.120.58)
[11:16:30] *** Joins: crumpo (~crumpo@user/crumpo)
[11:33:19] *** Joins: s-liao (~s-liao@101.86.164.158)
[11:46:23] *** Joins: ublx (~ublx@user/ublx)
[12:00:13] *** Joins: s-liao2 (~s-liao@101.86.164.158)
[12:00:54] <sjamaan> irontom: On page 185 (4th edition) there's a question which tells you to write the definition of *cond.  Perhaps you missed that (or you haven't reached it yet)
[12:02:11] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[12:22:25] <nmeum> is it possible to somehow export chicken type aliases (i.e. as created with define-type) in a chicken module? If if I try using the export keyword I get "Warning: Cannot export `regex' because it is a type abbreviation.".
[12:24:34] <sjamaan> No, you can only export identifiers
[12:26:49] <s-liao2> What is the reason for you to export the type in a chicken module?
[12:27:57] <nmeum> I am writing a library/egg and I would like to allow users of that library to re-use my defined type aliases instead of requiring them to duplicate those in their own code
[12:34:17] <s-liao2> What I understood is that export functions in chicken egg most like an interface. module and module or apps interfere by the interface.
[12:36:43] <jcroisant> nmeum: I would like that too. There is a feature request for it < https://bugs.call-cc.org/ticket/1796 > but I don't think there are plans to add it yet
[12:38:16] <s-liao2> What I mean is that let users to communicate  with the interface to know the defined type in your module.
[12:41:55] <jcroisant> s-liao2: What nmeum is talking about are type aliases created with define-type, which can be used in type declarations. See https://wiki.call-cc.org/man/5/Types
[12:51:56] <Bunny351> the simplests way is to provide them as an include-file, even though it is not very elegant. but type-aliases live in a different namespace and modules are not aware of them
[13:10:39] <s-liao2> Yes. That is a good idea. But the user most like would not know the type and data structure of the internal module better. Just the input and the output. The way chicken define-type sound like globally, not in the module type.
[13:13:36] <s-liao2> But if users can not understand interface like such status. We have enum type interface ,and can be readable.
[13:31:09] *** Quits: s-liao2 (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[13:46:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:50:52] *** Quits: idstam_ (~idstam@194.103.157.17) (Quit: WeeChat 3.3)
[13:53:32] *** Joins: idstam (~Thunderbi@194.103.157.17)
[13:55:31] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[14:03:41] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:04:45] *** idstam is now known as idstam_
[14:05:34] *** idstam_ is now known as idstam
[14:11:30] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[14:11:54] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:20:27] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[14:25:05] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:39:03] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:40:14] <Bunny351> does anyone know of a simple, portable z80 assembler?
[15:08:18] <curium> intarweb line 166, shouldn't that be (set! h ...)? remove-headers! is a nop
[15:36:04] *** Joins: andyjpb (~andyjpb@user/andyjpb)
[16:25:57] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:28:07] <nmeum> I am using chicken with custom CHICKEN_INSTALL_REPOSITORY/CHICKEN_REPOSITORY_PATH paths to allow me to install eggs as an unprivileged user. however, for eggs with program components this doesn't seem to work as chicken-install always attempts to install those to /usr/bin. is it possible to change that somehow or, at least, to prevent these components from being installed in the first place?
[16:36:25] <crumpo> I hit this same problem a while ago; IIRC there isn't (yet) an option to change the location for those :(
[16:41:14] <nmeum> setting DESTDIR kind of works as a workaround I suppose
[16:56:59] <crumpo> Is that done at compile time?
[16:58:37] *** Joins: klovett (~klovett@107.116.92.97)
[16:59:32] <nmeum> no, it's an environment variable
[17:01:19] <crumpo> Oh, excellent
[17:01:23] <crumpo> I didn't know about this one, thanks
[17:02:17] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[17:02:37] <crumpo> Is there some documentation you can point me to for that?
[17:58:04] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[17:58:25] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[18:35:49] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f011:5c41:91d3:3525)
[18:35:49] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f011:5c41:91d3:3525) (Changing host)
[18:35:49] *** Joins: skapata (~Skapata@user/skapata)
[18:49:24] <vandusen> SPAM! SPAM! SPAM! by freee
[19:03:59] <nmeum> crumpo: I just looked at the source code
[19:05:08] <nmeum> https://code.call-cc.org/cgi-bin/gitweb.cgi?p=chicken-core.git;a=blob;f=egg-compile.scm;h=12a7bfa8cc8ef11c8aa10022a9fbf2700198538c;hb=HEAD#l1042
[19:05:20] <crumpo> Ah, thanks nmeum :)
[19:06:32] <nmeum> so you would do `DESTDIR=/some/directory chicken-install <blaba>` this will install all files relative to DESTDIR which is probably not what you want but I just copied the one binary manually to my ~/bin afterwards
[19:07:12] <crumpo> I think that's exactly what I was after actually. I'll have to check it out later
[19:15:35] *** Joins: kmroz (~mrozitron@2a01:112f:73f:4d00:78ef:a463:4afe:ce6e)
[19:50:51] *** Quits: crumpo (~crumpo@user/crumpo) (Remote host closed the connection)
[19:54:27] *** Joins: crumpo (~crumpo@user/crumpo)
[20:05:02] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzz…)
[20:19:13] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[20:20:01] *** Joins: nmeum (~nmeum@barium.8pit.net)
[20:28:36] *** Joins: klovett (~klovett@107.116.92.97)
[20:32:38] <vandusen> [eggs repo (r41209, by mario)] release/5/egg-locations: add posix-regex (by Soren Tempel)
[20:55:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[21:00:13] *** Joins: crumpy (~crumpo@user/crumpo)
[21:02:33] *** Quits: crumpo (~crumpo@user/crumpo) (Ping timeout: 256 seconds)
[21:11:54] <vandusen> [eggs] posix-regex version 0.1.0 (for CHICKEN 5) has been released
[21:43:18] *** Quits: andyjpb (~andyjpb@user/andyjpb) (Ping timeout: 252 seconds)
[22:05:32] *** Joins: klovett_ (~klovett@107.116.92.97)
[22:05:59] *** Quits: crumpy (~crumpo@user/crumpo) (Remote host closed the connection)
[22:09:00] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[22:52:28] *** Quits: klovett_ (~klovett@107.116.92.97) (Quit: ZZZzzz…)
[23:48:54] <vandusen> [eggs repo (r41210, by nmeum)] Initial posix-regex documentation
[23:58:35] *** Joins: klovett (~klovett@107.116.92.97)
