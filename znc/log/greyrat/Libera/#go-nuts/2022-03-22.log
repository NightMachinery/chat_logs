[01:00:26] *** Joins: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a)
[01:00:35] <NoOova> I'm expecting that "y" variable should contain type "Stringer" and value "nil", while it contains type "nil".
[01:02:09] <j416> you haven't instantiated anything; those are both just interfaces
[01:02:12] *** Quits: qilx (~quassel@62.201.21.8) (Quit: No Ping reply in 180 seconds.)
[01:02:40] <notevil> x %T is also nil
[01:02:46] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:03:09] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[01:03:14] <j416> https://go.dev/play/p/LZkXXTHDRc5
[01:03:38] *** Joins: qilx (~quassel@62.201.21.8)
[01:04:42] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 252 seconds)
[01:05:18] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:05:49] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:05:58] <NoOova> notevil: Hm, you right. I was wrong because GoLand's debugger shown different to me. https://pasteboard.co/TyTuOwRUGHjC.png
[01:06:41] *** Joins: lime008 (~lime@dsl-hkibng42-5673c2-250.dhcp.inet.fi)
[01:07:06] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:07:19] <NoOova> Black magic. Then, if type stored in interface variable X is also nil, how delve or GoLand knows original type...
[01:07:40] *** Joins: wyre (~wyre@user/wyre)
[01:09:07] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[01:09:31] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 245 seconds)
[01:10:06] <j416> NoOova: I _think_ fmt.Stringer there is the "static type"
[01:10:23] <j416> which is different from the dynamic type
[01:11:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:11:38] *** Parts: lime008 (~lime@dsl-hkibng42-5673c2-250.dhcp.inet.fi) ()
[01:12:28] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[01:14:11] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[01:15:03] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Quit: Leaving)
[01:20:44] <fizzie> NoOova: `y` variable can't contain type "Stringer", because a Stringer is an interface type too.
[01:22:32] <fizzie> `x` is a variable of interface type, and its initialized to have nil both as its type and value; when that's assigned to `y`, the type remains nil.
[01:23:28] <fizzie> If you make `x` of some non-interface type, like bytes.Buffer, the output will be that type: https://go.dev/play/p/VN2Zbyd5iwW
[01:23:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:24:13] *** Quits: Kreton (~Kreton@143.2.138.88.rev.sfr.net) (Quit: Kreton)
[01:26:44] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[01:27:05] <NoOova> fizzie: but `var x fmt.Stringer` declares variable as an `interface with type fmt.Stringer`. Looks like i'm misunderstanding something fundamental.
[01:27:47] <fizzie> Perhaps the distinction between the static type and the dynamic type of interface variables.
[01:28:43] <fizzie> https://go.dev/ref/spec#Variables "The static type (or just type) of a variable is the type given in its declaration [or similar]. Variables of interface type also have a distinct dynamic type, which is the (non-interface) type of the value assigned to the variable at run time --"
[01:30:36] <fizzie> The latter is what's unset for both x and y in your example. The former is `fmt.Stringer` for x and `interface{}` for y, explicitly from the declarations.
[01:31:00] <b0nn> So, the dynamic type is the concrete type that implements the interface, and is being used at the time
[01:31:09] <FiskFan1999> as far as i can tell, the interface type can be thought of as being a lower level than the struct type
[01:32:32] <fizzie> If you passed &x and &y to fmt "%T" format, instead of x and y, it would print "*fmt.Stringer" and "*interface {}" respectively: https://go.dev/play/p/umqx52aIkBm -- not sure if that'll make it easier or harder to understand.
[01:33:52] <NoOova> Possibly i understand. So if i have `var x fmt.Stringer` declaration, then x has static type `fmt.Stringer` while dynamic type of interface value stored in x is `nil`?
[01:33:55] *** Quits: treeford (~charleste@user/treeford) (Quit: WeeChat 3.3)
[01:35:02] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:35:55] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: uosvuoweuowuq3buvoq2)
[01:36:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 252 seconds)
[01:38:08] <NoOova> And GoLand's debugger somehow shows me static type of variable, while reflect.TypeOf(x) works with dynamic types.
[01:38:24] <FiskFan1999> interesting, what fizzie said about the type of &y applies even if you apply a dynamically typed value to the variable
[01:38:51] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[01:40:22] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[01:41:39] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:58] <fizzie> `reflect.TypeOf` is a "regular" function, which just takes an `interface{}` as the parameter, so the reflect.TypeOf(x) call does the same sort of thing as `var y interface{} = x` -- just gives it a nil interface{}, and there's no way it could tell that it came from a fmt.Stringer-typed variable originally.
[01:47:00] <ikke> Just used the new workspace to work on a project + dependency at the same time
[01:47:24] <ikke> god work init && go work edit -use . && go work edit -use ../path/to/other/module
[01:48:02] <b0nn> typo is delicious
[01:48:10] <ikke> lol
[01:48:23] <NoOova> fizzie, and when instead of passing `x` we will pass `&x` we will preserve static type information. Thank you!
[01:48:38] <ikke> pyzozord: can really recommend it if you want to work with multiple modules locally at the same time
[01:50:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:57:24] <pyzozord> ikke: recommend what?
[01:57:51] <ikke> workspaces
[01:58:01] <ikke> instead of using go mod edit -replace
[01:58:04] *** Joins: irontom (~user@2607:fcd0:aa80:1304::b42e)
[01:59:01] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 240 seconds)
[02:04:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:04:47] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0) (Quit: WeeChat 3.3)
[02:05:05] <pyzozord> oh ok, thanks good to keep that in mind, maybe I'll add that at work
[02:05:28] *** Quits: cfjk (~cfjk@user/cfjk) (Quit: The Lounge - https://thelounge.chat)
[02:05:35] <pyzozord> would be nice because now I need to manually -replace each time because one of the projects generates a lot of go code including go.mod
[02:06:26] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0)
[02:06:30] <ikke> yes, workspaces are meant to prevent exactly that
[02:06:46] *** Joins: cfjk (~cfjk@user/cfjk)
[02:06:50] <ikke> it create a dedicated go.work file which contains that info
[02:06:59] <ikke> so you do not have to touch go.mod for just local stuff
[02:08:28] <ikke> pyzozord: https://go.dev/doc/tutorial/workspaces
[02:12:03] <NoOova> fizzie, in addition to you possibly i found why `var y any = x` just gives a nil interface. Laws of reflection page has such phrase: `One important detail is that the pair inside an interface variable always has the form (value, concrete type) and cannot have the form (value, interface type). Interfaces do not hold interface values.` If x has
[02:12:03] <NoOova> interface value with nil, then we can't take interface type to new interface value, it is restricted.
[02:17:32] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[02:19:15] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:26:23] *** Joins: jadlers (~jadlers@c83-250-40-235.bredband.tele2.se)
[02:27:58] *** Quits: destroycomputers (~destroyco@5.188.41.98) (Ping timeout: 268 seconds)
[02:28:04] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:34:52] *** Joins: mud (~mud@user/kadoban)
[02:48:40] *** Quits: dfch (~dfch@user/dfch) (Quit: bye)
[02:50:10] *** Quits: optic__ (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[02:50:41] *** Joins: dfch (~dfch@user/dfch)
[02:50:57] *** Joins: Atque (~Atque@user/atque)
[02:51:15] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[02:52:20] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[02:53:24] *** Joins: teasea (~teasea@user/teasea)
[02:56:34] *** Joins: moog__ (~moog@98.97.82.161)
[02:57:45] *** sharktamer is now known as surskit
[02:57:50] *** Joins: et_ (~et@user/et)
[02:58:02] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[02:58:19] *** et_ is now known as et
[02:59:00] *** Quits: moog_ (~moog@107.126.53.83) (Ping timeout: 240 seconds)
[03:05:01] <bomb> so, what's the final verdict on JetBrains GoLand IDE vs text editors?
[03:07:01] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:07:58] *** Quits: adip (~adip@aeja124.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[03:08:49] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[03:09:23] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:12:16] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[03:12:31] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[03:13:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:14:24] *** Joins: lechner (~lechner@debian/lechner)
[03:15:28] <ikke> bomb: use what you're most comfortable with
[03:17:11] <bomb> ikke which one I'm most comfortable with?
[03:17:34] <ikke> How should I know :)
[03:17:57] <bomb> I don't know either :P
[03:18:26] <bomb> coding Java in NetBeans in the last 8 years
[03:19:11] <ikke> So you are already quite familiar with jetbrains products
[03:19:21] <ikke> oh, netbeans
[03:19:26] <ikke> that's something else
[03:20:11] <bomb> yeah. I did use PyCharm back in 2013, but I disabled auto-completion and such
[03:20:23] <bomb> so maybe I'm just better off with any text editor when coding Go?
[03:22:27] <b0nn> https://go.dev/doc/editors and https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins
[03:23:13] <bomb> what is Neovim? is it like vim with GUI, like gvim?
[03:23:51] <b0nn> So, if you click the link you wil be taken to https://neovim.io/
[03:24:08] <ikke> bomb: it's a fork of vim
[03:24:41] <bomb> ikke ah, thanks
[03:26:30] *** Quits: nekron_ (~nekron@noordsee.de) (Quit: ZNC 1.8.2 - https://znc.in)
[03:27:08] *** Quits: irontom (~user@2607:fcd0:aa80:1304::b42e) (Ping timeout: 252 seconds)
[03:27:45] *** Joins: nekron (~nekron@noordsee.de)
[03:27:50] *** Joins: crashrep (~crashrep@user/crashrep)
[03:29:59] <b0nn> OMFG https://revel.github.io/manual/debug.html#debug_using_gdb
[03:30:17] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[03:30:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:34:04] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[03:35:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:36:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:37:02] <FiskFan1999> i use neovim for golang and have no complaints except that sometimes gomft takes a really long time for large files
[03:39:47] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:39:59] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:40:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:41:00] <bomb> hmm
[03:45:41] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[03:47:59] <buu> That's weird
[03:49:35] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Ping timeout: 240 seconds)
[03:49:45] *** Joins: irontom (~user@69.174.103.168)
[03:54:11] <b0nn> the gofmt being slow is weird?
[03:55:58] * b0nn was thinking the culprit was more likely gopls
[04:02:10] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:02:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:08:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:11:09] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:11:37] *** Joins: hub (~hub@user/hub)
[04:12:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:21:14] *** Quits: jackneillll (~jackneill@20014C4E18121E00EF2AA9E9EDC033A1.dsl.pool.telekom.hu) (Ping timeout: 260 seconds)
[04:21:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:21:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:29:06] *** Joins: jackneill (~jackneill@20014C4E180B5F005FCFAD750DF54DBD.dsl.pool.telekom.hu)
[04:29:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:33:33] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[04:33:44] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:35:48] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 240 seconds)
[04:36:07] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[04:37:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:50:04] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[04:53:15] *** Joins: lureevar (~lureevar@2804:d45:477e:f300:9067:d28f:c8b4:79db)
[04:54:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[04:54:49] *** Quits: lureevar (~lureevar@2804:d45:477e:f300:9067:d28f:c8b4:79db) (Client Quit)
[04:54:50] *** Quits: comrad (~quassel@holarse/comrad) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[04:55:56] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[04:56:11] *** Joins: crashrep (~crashrep@user/crashrep)
[04:56:48] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:58:01] *** Joins: comrad (~quassel@holarse/comrad)
[05:01:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:05:40] *** Joins: crashrep (~crashrep@user/crashrep)
[05:05:58] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:09:50] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Quit: leaving)
[05:09:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:10:25] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Leaving)
[05:10:54] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[05:13:20] *** Joins: crashrep (~crashrep@user/crashrep)
[05:16:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:21:14] *** Quits: NoOova (~NoOova@46.46.149.93) (Quit: Client closed)
[05:22:35] *** Joins: irontom (~user@69.174.103.168)
[05:26:44] *** Quits: moog__ (~moog@98.97.82.161) (Remote host closed the connection)
[05:26:58] *** Joins: moog (~moog@98.97.82.161)
[05:28:21] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:29:19] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[05:29:57] *** Quits: X-Scale (~ARM@46.50.5.55) (Ping timeout: 256 seconds)
[05:29:57] *** X-Scale` is now known as X-Scale
[05:30:12] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[05:31:26] *** Quits: moog (~moog@98.97.82.161) (Ping timeout: 252 seconds)
[05:31:30] *** Joins: moog_ (~moog@98.97.82.161)
[05:31:39] *** Joins: admin123 (~harrymore@37.120.216.194)
[05:33:06] *** Joins: moog__ (~moog@107.126.53.83)
[05:33:24] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0) (Ping timeout: 240 seconds)
[05:36:11] *** Quits: moog_ (~moog@98.97.82.161) (Ping timeout: 256 seconds)
[05:37:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[05:41:26] *** Quits: Techcable (~Techcable@168.235.93.147) (Changing host)
[05:41:26] *** Joins: Techcable (~Techcable@user/Techcable)
[05:41:41] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[05:42:02] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[05:44:48] *** Joins: X-Scale` (~ARM@89.214.146.25)
[05:45:34] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:45:41] *** Joins: Ullarah (~ullarah@user/ullarah)
[05:45:50] *** X-Scale` is now known as X-Scale
[05:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[05:47:19] <Ullarah> Hello! I'm wondering if anybody could help with the following error I am receiving with Go 1.16?  //go:build comment without // +build comment
[05:47:30] <Ullarah> The project builds fine on Go 1.17 and 1.18.
[05:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:48:55] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:49:33] *** Joins: moog_ (~moog@98.97.82.161)
[05:51:57] *** Quits: moog__ (~moog@107.126.53.83) (Ping timeout: 250 seconds)
[05:52:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:52:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:54:32] <fizzie> The new `//go:build` build constraint syntax was added in 1.17. For 1.16-compatible code, you'd need to have both the `//go:build ...` lines *and* the equivalent old-style `// +build ...` lines.
[05:54:58] <fizzie> https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md has a bunch of detail.
[05:55:33] <fizzie> (Possibly some other less drafty link could be better, but that's the one I had handy.)
[06:02:34] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[06:06:13] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[06:07:08] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[06:08:37] *** Joins: rednul_ (~rednul@098-127-226-233.biz.spectrum.com)
[06:16:49] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[06:19:28] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:a992:a734:d5e:8b54) (Remote host closed the connection)
[06:22:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[06:23:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:23:48] *** Quits: bomb (~bomb@user/bomb) (Quit: ‎)
[06:30:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:34:04] *** Quits: irontom (~user@69.174.103.168) (Remote host closed the connection)
[06:36:06] *** Quits: ek0 (~vincent@user/ek0) (Ping timeout: 260 seconds)
[06:36:29] *** Joins: shtirlic (~shtirlic@184.22.157.24)
[06:37:18] *** Quits: shtirlic_ (~shtirlic@49.229.173.68) (Read error: Connection reset by peer)
[06:46:17] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a0a:2006:8ca0:c18b:ba93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:51:52] *** Joins: shtirlic_ (~shtirlic@49.229.173.68)
[06:55:02] *** Quits: shtirlic (~shtirlic@184.22.157.24) (Ping timeout: 240 seconds)
[06:56:05] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[07:01:53] *** Joins: shtirlic (~shtirlic@184.22.157.24)
[07:02:02] *** Quits: shtirlic (~shtirlic@184.22.157.24) (Remote host closed the connection)
[07:03:01] *** Joins: ek0 (~vincent@2a01cb0003457d005bff511cba75fdd2.ipv6.abo.wanadoo.fr)
[07:04:01] *** Joins: blacked (~blacked@user/blacked)
[07:05:43] *** Quits: shtirlic_ (~shtirlic@49.229.173.68) (Ping timeout: 256 seconds)
[07:07:24] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[07:08:57] *** Joins: andlabs (~andlabs@2607:fb90:f806:aec8:98f9:7deb:2c05:2a0f)
[07:12:57] *** Quits: andlabs (~andlabs@2607:fb90:f806:aec8:98f9:7deb:2c05:2a0f) (Ping timeout: 240 seconds)
[07:13:29] *** Joins: andlabs (~andlabs@2605:ef80:8096:9592:10c4:b659:4194:a7f8)
[07:16:27] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[07:21:59] *** Joins: mud (~mud@user/kadoban)
[07:31:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:36:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:40:30] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:40:50] *** Joins: glats_ (~glats@45.77.73.141)
[07:40:51] *** Joins: ramrunne1 (~dsp@78.141.218.152)
[07:40:52] *** Joins: SmokedCheese_ (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef)
[07:40:52] *** Joins: harley_l (~quassel@64.225.54.254)
[07:40:53] *** Joins: Dieterbe_ (~Dieterbe@user/dieterbe)
[07:40:53] *** Joins: reenix- (~reenix@due1.pagendarm.eu)
[07:40:57] *** Joins: Schoentoon_ (~Schoentoo@2a01:4f8:171:20d2::1)
[07:40:57] *** Joins: lll (~o@user/offon)
[07:40:59] *** Joins: aml_ (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[07:40:59] *** Joins: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[07:41:01] *** Joins: jolan (~jolan@ec2.jolan.org)
[07:41:02] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[07:41:05] *** Quits: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[07:41:05] *** Joins: kshockey (~kyshoc@user/kyshoc)
[07:41:05] *** Joins: dante4431 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[07:41:10] *** Joins: scjosh9 (~scjosh@206.189.79.69)
[07:41:10] *** Joins: earthbre- (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[07:41:11] *** Joins: franitor (~frank@user/franitor)
[07:41:12] *** Joins: newton_ (james@user/newton)
[07:41:14] *** Joins: csmarchbanks_ (~csmarchba@prometheus/team/csmarchbanks)
[07:41:15] *** Joins: burakcan- (~burakcank@has.arrived.and.is.ready-to.party)
[07:41:16] *** Joins: henko_ (~henko@62-178-187-35.cable.dynamic.surfer.at)
[07:41:29] *** Quits: henko (~henko@62-178-187-35.cable.dynamic.surfer.at) (*.net *.split)
[07:41:29] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[07:41:29] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[07:41:29] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[07:41:29] *** Quits: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (*.net *.split)
[07:41:29] *** Quits: whoami (~whoami@d118-75-54-10.try.wideopenwest.com) (*.net *.split)
[07:41:29] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (*.net *.split)
[07:41:29] *** Quits: newton (james@user/newton) (*.net *.split)
[07:41:29] *** Quits: Schoentoon (~Schoentoo@2a01:4f8:171:20d2::1) (*.net *.split)
[07:41:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[07:41:29] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[07:41:29] *** Quits: SmokedCheese (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef) (*.net *.split)
[07:41:29] *** Quits: ramrunner (~dsp@78.141.218.152) (*.net *.split)
[07:41:29] *** Quits: franitor_ (~frank@user/franitor) (*.net *.split)
[07:41:29] *** Quits: jolan_ (~jolan@ec2.jolan.org) (*.net *.split)
[07:41:29] *** Quits: glats (~glats@45.77.73.141) (*.net *.split)
[07:41:29] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[07:41:29] *** Quits: _\_ (~o@user/offon) (*.net *.split)
[07:41:29] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[07:41:29] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (*.net *.split)
[07:41:29] *** Quits: Dieterbe (~Dieterbe@user/dieterbe) (*.net *.split)
[07:41:29] *** Quits: losinggeneration (~quassel@64.225.54.254) (*.net *.split)
[07:41:29] *** SmokedCheese_ is now known as SmokedCheese
[07:41:29] *** scjosh9 is now known as scjosh
[07:41:29] *** Schoentoon_ is now known as Schoentoon
[07:41:30] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[07:41:44] *** lll is now known as _\_
[07:42:24] *** burakcan- is now known as burakcank
[07:49:33] *** Joins: irontom (~user@69.174.103.168)
[07:57:03] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 256 seconds)
[08:04:32] *** Joins: destroycomputers (~destroyco@5.188.41.98)
[08:06:32] *** Quits: andlabs (~andlabs@2605:ef80:8096:9592:10c4:b659:4194:a7f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:06:59] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:07:25] *** Quits: Techcable (~Techcable@user/Techcable) (Ping timeout: 240 seconds)
[08:11:27] *** Joins: zanshin (~zanshin@user/zanshin)
[08:18:50] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:22:45] *** Quits: admin123 (~harrymore@37.120.216.194) (Ping timeout: 250 seconds)
[08:26:13] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[08:31:17] *** newton_ is now known as newton
[08:33:18] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[08:38:13] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[08:38:21] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[08:41:49] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-8902-68c6-ecc8-5f4e.inf6.spectrum.com) (Ping timeout: 256 seconds)
[08:48:35] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:52:25] *** Joins: shtirlic (~shtirlic@49.229.173.68)
[08:52:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:55:30] *** Quits: stuart (~stuart@55d47aec.access.ecotel.net) (Ping timeout: 252 seconds)
[08:55:38] *** Joins: stuart (~stuart@55d47aec.access.ecotel.net)
[08:55:39] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 256 seconds)
[08:56:03] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[08:56:58] *** Joins: moto (~moto@user/moto)
[08:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[09:07:39] *** Joins: dansan (~daniel@75.81.148.51)
[09:08:17] *** Quits: Guest3081 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[09:09:21] *** Joins: Techcable (~Techcable@user/Techcable)
[09:10:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:15:02] *** Quits: stuart (~stuart@55d47aec.access.ecotel.net) (Ping timeout: 240 seconds)
[09:16:54] *** Joins: stuart (~stuart@55d4cd18.access.ecotel.net)
[09:17:23] *** Joins: lindsay (~lindsay@user/LindsayZhou)
[09:20:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[09:22:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:24:17] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:25:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:26:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[09:30:55] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[09:33:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:37:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:38:17] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[09:38:59] *** Joins: rogersm (~rogersm@90.166.180.250)
[09:43:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 268 seconds)
[09:48:58] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:54:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:54:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[09:55:00] *** Joins: Guest3081 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[09:55:32] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[09:57:15] *** buu_ is now known as buu
[09:58:21] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[09:59:07] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[10:07:26] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 245 seconds)
[10:08:47] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[10:08:53] *** Joins: sagax (~sagax_nb@user/sagax)
[10:08:58] *** Joins: moog (~moog@98.97.82.161)
[10:09:11] *** Quits: AriESQ (~user@user/AriESQ) (Ping timeout: 252 seconds)
[10:10:51] *** Quits: moog_ (~moog@98.97.82.161) (Ping timeout: 252 seconds)
[10:12:40] *** Joins: rcernin (~rcernin@101.189.129.123)
[10:13:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 256 seconds)
[10:14:59] *** Joins: toulene (~toulene@user/toulene)
[10:17:09] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[10:20:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:23:51] *** Quits: shtirlic (~shtirlic@49.229.173.68) (Read error: Connection reset by peer)
[10:24:27] *** Quits: R2robot_ (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:30:18] *** Joins: R2robot (~R2robot@user/r2robot)
[10:34:16] *** Joins: han-solo (~han-solo@user/han-solo)
[10:36:32] *** Joins: ekathva (~ekathva@2001:999:50:7590:b428:f6a6:94c7:d128)
[10:40:49] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 256 seconds)
[10:41:05] *** Joins: habamax (~habamax@user/habamax)
[10:46:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:49:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[10:50:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[10:51:49] *** Quits: moog (~moog@98.97.82.161) (Ping timeout: 256 seconds)
[10:52:41] *** Joins: moog (~moog@98.97.82.161)
[10:52:51] *** Joins: NoOova (~NoOova@46.46.149.93)
[10:54:30] <NoOova> Folks, will next versions of go support parametrized methods (not by method's type perameters, but by methods itselfs)?
[10:56:38] *** Joins: moog_ (~moog@98.97.82.161)
[10:58:13] *** Quits: moog (~moog@98.97.82.161) (Ping timeout: 240 seconds)
[10:58:40] *** Quits: moog_ (~moog@98.97.82.161) (Read error: Connection reset by peer)
[10:59:30] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:59:53] *** Joins: califax (~califax@user/califx)
[11:02:24] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[11:04:37] *** Joins: Techcable (~Techcable@user/Techcable)
[11:08:08] *** Quits: ekathva (~ekathva@2001:999:50:7590:b428:f6a6:94c7:d128) (Remote host closed the connection)
[11:08:26] *** Joins: ekathva (~ekathva@2001:999:50:7590:3e0c:28bd:f451:9781)
[11:12:05] <Cork> is it possible to get a unique string from a context, or will one have got generate one and store it?
[11:13:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2034:c204:70d1:cb4e) (Ping timeout: 256 seconds)
[11:16:30] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:17:09] *** Quits: ishan (~ishan@2400:8904::f03c:91ff:fe9e:a26f) (Quit: Peace.)
[11:17:13] <bpalmer> Cork: the standard context is an interface with  4 methods, none of which produce a unique string from scratch. See https://pkg.go.dev/context#Context
[11:17:25] *** Joins: ishan (~ishan@2400:8904::f03c:91ff:fe9e:a26f)
[11:17:54] <Cork> bpalmer: ya, so i take it there isn't anything else internally one can use? :D
[11:18:03] <bpalmer> Cork: you can use context.WithValue to get a context that lets you look up a value that you store with it.
[11:18:14] * Cork nods
[11:18:18] <Cork> thx for confirming
[11:18:23] <bpalmer> why do you want the context to provide a random string?
[11:18:40] <Cork> i need to send a request over an api backwards
[11:18:52] <Cork> and need a way to identify where it came from
[11:18:54] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:23:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[11:26:47] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:27:00] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (Ping timeout: 240 seconds)
[11:27:56] *** Joins: Batzy (~quassel@user/batzy)
[11:29:56] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[11:33:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:33:38] <blacked> :b
[11:33:51] <blacked> bpalmer on #emacs also :*
[11:34:04] <blacked> what config are you using for golang?
[11:36:44] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[11:38:17] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:39:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:41:10] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[11:42:46] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[11:42:59] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[11:46:30] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[11:50:45] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:54:11] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[12:01:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:03:09] *** Joins: R2robot (~R2robot@user/r2robot)
[12:06:08] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Remote host closed the connection)
[12:06:37] *** Quits: NoOova (~NoOova@46.46.149.93) (Ping timeout: 256 seconds)
[12:08:51] *** Joins: adip (~adip@dia124.neoplus.adsl.tpnet.pl)
[12:09:37] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:10:01] *** Quits: blacked (~blacked@user/blacked) (Ping timeout: 256 seconds)
[12:10:06] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[12:10:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:11:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:14:25] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[12:17:53] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:19:28] *** Joins: shka (~herr@109.231.3.55)
[12:23:57] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[12:24:25] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[12:24:40] *** Joins: NoOova (~NoOova@185.155.17.119)
[12:26:47] *** imm__ is now known as imm_
[12:27:02] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 240 seconds)
[12:28:01] *** Joins: fef (~thedawn@user/thedawn)
[12:28:24] *** Joins: NoOova50 (~NoOova@46.46.149.93)
[12:31:27] *** Joins: xsteadfastx (~marv@94.31.99.245)
[12:31:33] *** Quits: NoOova (~NoOova@185.155.17.119) (Ping timeout: 256 seconds)
[12:32:10] <J`> what is the best way to download a file to a string in go?
[12:32:22] <J`> like python would be: mystring = urllib2.urlopen("http://example.com/text.txt")
[12:33:47] <Cork> J`: https://pkg.go.dev/net/http second example
[12:33:55] <Cork> just do string(body) after
[12:34:21] <J`> exactly what i needed
[12:34:23] <J`> thanks!
[12:38:38] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[12:38:45] *** Joins: joeyzheng5403_ (~kerwin@124.126.18.162)
[12:43:13] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[12:43:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:43:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:44:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[12:50:15] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[12:52:18] *** Joins: ekathva_ (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f)
[12:54:44] *** Quits: ekathva (~ekathva@2001:999:50:7590:3e0c:28bd:f451:9781) (Ping timeout: 252 seconds)
[13:02:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:03:22] *** Quits: NoOova50 (~NoOova@46.46.149.93) (Quit: Client closed)
[13:03:39] *** Joins: NoOova (~NoOova@46.46.149.93)
[13:06:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:12:44] *** Joins: moog (~moog@98.97.82.161)
[13:12:45] *** Joins: rendar (~rendar@user/rendar)
[13:14:44] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[13:17:12] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[13:21:25] *** Quits: adip (~adip@dia124.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[13:23:07] *** Joins: adip (~adip@did158.neoplus.adsl.tpnet.pl)
[13:27:13] <pyzozord> I need to make something that can parse "variable < 10" and similar "matching" expressions, any suggestions?
[13:27:20] <pyzozord> I need the easiest simplest thing possibl
[13:29:53] <Cork> simplest is prob to just use regexp
[13:30:03] <Cork> depending on how flexible it needs to be
[13:31:03] <ikke> https://github.com/Knetic/govaluate?
[13:33:05] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 256 seconds)
[13:33:53] *** Quits: NoOova (~NoOova@46.46.149.93) (Ping timeout: 256 seconds)
[13:34:00] <pyzozord> oh nice, this goevaluate looks sweet
[13:34:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:34:40] <pyzozord> regex is not enough I need things like greater then / less then
[13:35:39] <ikke> Just a bit of Google fu
[13:37:25] <pyzozord> ikke: what do you mean?
[13:37:40] <pyzozord> btw are ther other things like goevaluate so I can compare them?
[13:39:02] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[13:39:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:39:49] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:40:04] *** Quits: Ugrastil277 (~Ugrastil@89.40.112.204) (Quit: Ping timeout (120 seconds))
[13:40:22] *** Joins: Ugrastil277 (~Ugrastil@89.40.112.204)
[13:42:05] <ikke> I just googled for that library
[13:43:19] <pyzozord> I see, what keywords did you use?
[13:43:33] <pyzozord> btw I forget, is it possible to append to a map?
[13:43:35] <ikke> golang evaluate expression
[13:43:44] <ikke> pyzozord: a map is key-valyue
[13:43:57] <bookworm> and yes, it dynamically resizes
[13:44:06] <pyzozord> I see in the goevaluate example arameters := make(map[string]interface{}, 8)
[13:44:23] <pyzozord> so I thought "oh this mape has just size of 8" and then "oh what if I need more dynamically"
[13:44:50] <bookworm> that's a hint to the compiler as to how large it should be at the beginning, not that you can't add more
[13:45:14] <pyzozord> i see, so what is 8 in this case? 8 bytes?
[13:45:23] <ikke> it avoids having to reallocate constantly when you initially add lots of keys
[13:56:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:00:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:05:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[14:10:06] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:27:13] *** Quits: llorllale (~llorllale@198.98.119.85) (Quit: WeeChat 3.4)
[14:29:09] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:30:13] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[14:32:01] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Ping timeout: 256 seconds)
[14:35:34] *** Quits: halden_ (~halden@lden.im) (Quit: Bye)
[14:37:43] *** Joins: halden (~halden@lden.im)
[14:45:20] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[14:46:39] *** Joins: toulene (~toulene@user/toulene)
[14:46:47] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:55:51] *** Quits: anessen97 (~Anessen97@host-79-54-218-122.retail.telecomitalia.it) (Quit: The Lounge - https://thelounge.chat)
[14:56:13] *** Quits: avoozl2 (~avoozl@escaflowne.hro.nl) (Ping timeout: 250 seconds)
[14:59:56] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[15:01:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:02:50] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:03:53] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[15:04:51] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[15:04:55] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[15:06:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:06:16] *** Joins: toulene (~toulene@user/toulene)
[15:08:42] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Remote host closed the connection)
[15:09:05] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[15:11:41] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[15:12:46] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[15:15:24] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:23:44] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[15:31:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:37:40] *** Quits: pztrn15 (~pztrn1@aurora.pztrn.name) (Quit: Ping timeout (120 seconds))
[15:37:59] *** Joins: pztrn15 (~pztrn1@aurora.pztrn.name)
[15:42:46] *** Joins: xse_ (~xse@user/xse)
[15:43:37] *** Quits: xse (~xse@user/xse) (Ping timeout: 240 seconds)
[15:43:37] *** xse_ is now known as xse
[15:44:22] <since_> hi
[15:44:47] <since_> i want to print an audio file to stdout to be piped into a player
[15:45:27] <since_> in c i would use printf("%c", x[i]);
[15:45:49] <since_> how would i do this in go?
[15:48:46] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:49:35] <bookworm> just write to the file pointer
[15:49:45] <since_> yes
[15:49:58] <since_> os.Stdout.Write([]byte{x[i]}) seems to work
[15:50:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:50:41] <fizzie> (Are you *sure* you want to write one byte at a time? The presence of `[i]` there makes it sound like there's more bytes to write than just one.)
[15:51:12] <since_> assuming C "%c" works the same as Go "%c" cost me an hour debugging :D
[15:51:40] <fizzie> FWIW, `printf("%c", x[i]);` is pretty weird even in C, as opposed to just `putchar(x[i]);`.
[15:51:56] <since_> fizzie: i have a slice but i need to iterate over it anyways to convert the []float64 to []byte, so i think its fine printing byte per byte
[15:54:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[15:55:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:55:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[15:55:29] <fizzie> There's no C stdio-style automatic buffering of `os.Stdout`, so you might still want to do somewhat bigger chunks.
[15:55:51] <fizzie> Not that audio inherently needs that much throughput, but anyway.
[15:59:13] *** Quits: llorllale (~llorllale@198.98.119.85) (Quit: WeeChat 3.4.1)
[15:59:26] <pyzozord> when I retur errors like fmt.Errorf() how can I later tell which error was that, do I need to parse string?
[16:00:28] <since_> pyzozord: you can wrap errors https://go.dev/blog/go1.13-errors
[16:00:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:01:41] <since_> fizzie: good to know, thanks
[16:01:48] <bookworm> and you can just make that error a variable and export it, equality works as expected
[16:02:04] <bookworm> (or errors.As/Is)
[16:02:04] <pyzozord> before wrapping I think there was some simple way
[16:02:12] <pyzozord> wrapping is for nested errors
[16:02:18] <bookworm> yes
[16:02:52] <pyzozord> I'm not sure I understand make error a variable and export it
[16:03:41] *** Quits: d42 (~root@user/d42) (Ping timeout: 245 seconds)
[16:03:42] <fizzie> `var ErrBadWhatever = errors.New("bad whatever")` at package level.
[16:03:48] <fizzie> Assumes the string is constant, of course.
[16:04:37] <pyzozord> oh I see
[16:04:49] <pyzozord> and Error has only one method Error()
[16:04:54] <pyzozord> which returns string
[16:04:59] <pyzozord> so this is essentially a string
[16:05:04] <pyzozord> then why not use const instead of var
[16:05:15] <bookworm> because you can't
[16:05:20] <fizzie> Because it wouldn't be of type `error`.
[16:05:47] <bookworm> error is an interface
[16:05:57] <bookworm> which you've just described above
[16:07:11] <pyzozord> I mean why not const myerr = errors.New("my error")
[16:07:26] <fizzie> Because you can't. Constants can't have interface types.
[16:07:33] <pyzozord> right I remember that
[16:08:23] <fizzie> You *could* do something like https://go.dev/play/p/Yh6oASfZ9-o if you really wanted it to be a `const`, but people generally don't.
[16:10:02] <pyzozord> got it
[16:11:00] *** Quits: redquasar (~redquasar@user/redquasar) (Quit: redquasar.xyz)
[16:11:29] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[16:19:20] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[16:23:03] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[16:23:03] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[16:23:03] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[16:23:21] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:23:49] *** Joins: d42 (~root@user/d42)
[16:23:53] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[16:25:11] *** Quits: joeyzheng5403_ (~kerwin@124.126.18.162) (Remote host closed the connection)
[16:27:05] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[16:27:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[16:28:09] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[16:28:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:31:18] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:32:03] *** Joins: toulene (~toulene@user/toulene)
[16:33:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:33:24] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[16:36:01] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0)
[16:38:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:38:37] *** Quits: d42 (~root@user/d42) (Ping timeout: 256 seconds)
[16:39:04] *** Joins: redquasar (~redquasar@user/redquasar)
[16:40:28] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:42:41] *** Joins: blacked (~blacked@user/blacked)
[16:44:37] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 240 seconds)
[16:45:11] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[16:51:19] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[16:52:17] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[16:54:05] *** Joins: d42 (~root@user/d42)
[16:54:20] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[16:55:22] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[16:58:03] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:01:46] *** Parts: glats_ (~glats@45.77.73.141) ()
[17:03:43] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[17:04:08] *** Joins: glats (~glats@45.77.73.141)
[17:09:26] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) ()
[17:15:46] *** Joins: bomb (~bomb@user/bomb)
[17:20:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:77fe:55bd:621e:2223)
[17:26:02] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Read error: Connection reset by peer)
[17:27:06] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[17:42:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[17:44:25] *** Joins: toulene (~toulene@user/toulene)
[17:44:37] <pyzozord> is there a way to receive what a goroutine returns?
[17:44:48] <pyzozord> not with channels, with normal function stuff
[17:45:17] *** Quits: hegemoOn (~netmonk@195-154-92-20.rev.poneytelecom.eu) (Quit: WeeChat 2.8)
[17:48:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:53:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[17:57:05] <fizzie> No, but wouldn't blocking until it returns kind of defeat the purpose of spinning off a separate goroutine?
[17:58:10] <pyzozord> in this case I think the goroutine is used as a panic catch mechanism
[17:58:49] <ikke> a goroutine has no return value
[18:01:01] <fizzie> You shouldn't need a separate goroutine for catching a panic (where that's appropriate); that should just be a matter of defer + recover.
[18:03:25] <pyzozord> interesting, maybe they didn't know about it
[18:03:48] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:11:25] <knusbaum> How does a goroutine function as a panic handler? You still need the dever/recover setup.
[18:12:26] <pyzozord> it has a recover
[18:12:55] <pyzozord> i think maybe it's invoked as a goroutine because they thought it would separate it more just in case
[18:13:18] <pyzozord> or maybe there is some other reason
[18:13:42] <pyzozord> but it's literally a goroutine invoked right single time and below it's receiving channels
[18:14:03] <knusbaum> I've seen people use inline functions before to isolate panicy code with a panic handler, but a goroutine won't help.
[18:14:15] <knusbaum> And inline functions can return values.
[18:16:02] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[18:16:21] <fizzie> Channels, plural? If it's literally something like `ch := make(chan Foo); go func() { /* panic-handling */ ch <- thing() }(); x := <-ch` then, yes, that goroutine would seem to be unnecessary. But maybe it's something more complicated than that.
[18:17:03] <knusbaum> If you have any code you are able to share we could say more.
[18:17:05] <tuskkk____> Hello, quick question, wondering if using `select` would be a better choice here, https://go.dev/play/p/87-CKOfyqC2
[18:17:32] <tuskkk____> Does the above code do the same job?
[18:18:02] <knusbaum> tuskkk___ I would use for url := range ch
[18:18:41] <knusbaum> There's no reason to select unless you have multiple channels or need a default action when no values are available.
[18:19:59] <knusbaum> Oh wait, scratch the for loop. I missed the len(urls) conditional. Still, I don't see a use for select.
[18:20:02] *** Joins: shtirlic (~shtirlic@49.229.160.198)
[18:20:07] <pyzozord> fizzie: channels plural, and yes the code look pretty much like in your example, except it has defer recover inside
[18:20:22] <tuskkk____> ok, cool, thanks
[18:21:00] <tuskkk____> What about cancelling the context though?
[18:21:16] <tuskkk____> line #14
[18:21:45] <tuskkk____> can I just break instead?
[18:21:57] *** Joins: vaaqif (~vaaqif_3@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[18:22:16] *** Quits: vaaqif (~vaaqif_3@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[18:22:28] <pyzozord> this is the code https://bpa.st/WLWA
[18:22:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:22:45] <knusbaum> tuskkk, Well there's no context.Context in the code you posted so it's hard to say, but in general, cancelling a context is NOT equivalent to just breaking/returning.
[18:22:50] *** Joins: blackwood821 (~blackwood@user/blackwood821)
[18:23:26] <fizzie> pyzozord: Well, it's got that timeout, that's what it "needs" a separate goroutine for perhaps.
[18:23:27] <knusbaum> pyzozord, looks like they use the goroutine to implement a timeout.
[18:23:52] <tuskkk____> knusbaum: this is above that part, https://go.dev/play/p/mgBdGfiVnRU
[18:23:55] <pyzozord> i see, thanks
[18:24:01] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[18:24:51] <blackwood821> Hi, I'm new to go and am wondering how to got about making a change to a dependency locally without having to fork the dependency repo on github. Can I just modify the dependency source that got downloaded to ./vendor/...?
[18:25:40] <knusbaum> tuskkk, Since there's a defer cancel() at the top of the function, calling cancel before returning is redundant.
[18:26:00] *** Joins: shtirlic_ (~shtirlic@49.229.160.198)
[18:26:12] *** Joins: lureevar (~lureevar@2804:214:8187:6589:f128:9d6b:be01:83b5)
[18:27:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[18:27:51] *** Joins: han-solo (~han-solo@178.248.114.109)
[18:27:52] <knusbaum> But putting a break there will change the flow since the loop will break instead of the function returning an error.
[18:28:07] *** Quits: shtirlic (~shtirlic@49.229.160.198) (Ping timeout: 268 seconds)
[18:28:13] <tuskkk____> knusbaum: should I use break to get out of the loop then?
[18:28:26] <fizzie> blackwood821: If you *are* using vendoring, yes, modifying the code in ./vendor/... would be effective (when building in the context where . is the main module). Other than that, there's `replace example.com/some/dependency => ../path/to/local/copy` directive you can stick in go.mod, or the new Go 1.18 multi-module workspaces: https://go.dev/doc/tutorial/workspaces
[18:29:27] <blackwood821> fizzie: Awesome, thanks. I'll try out those options
[18:29:48] <knusbaum> tuskkk, What are you trying to accomplish? Why do you want to break rather than returning as the code does now?
[18:30:40] *** Joins: pyrate (AAAAAAAAAA@gateway/vpn/protonvpn/pyrate)
[18:33:46] <tuskkk____> knusbaum: validate a bunch of images, if there are more than 5 errors, abort
[18:34:55] <knusbaum> Does the existing return not work for that?
[18:35:16] <tuskkk____> I think it does
[18:35:26] <knusbaum> No need to break then
[18:35:34] <tuskkk____> cool, thanks
[18:39:05] <pyzozord> given a module with ./go.mod ./a/foo.go with package foo and ./b/bar.go with package bar can ./b/bar.go import foo?
[18:40:39] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[18:40:49] <pyzozord> ah i have a import cycle I guess that's why I have "no required module provides package"
[18:41:13] <pyzozord> what's the best way to deal with that?
[18:41:28] *** Joins: lureevar_ (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74)
[18:41:58] <ikke> redesign things so you don't get cyclic dependencies
[18:42:16] <ikke> but, if there is one, I think go would be pretty clear about it
[18:42:34] <pyzozord> it wasn't
[18:42:44] <pyzozord> at least not in the vs code in that file I was in
[18:42:49] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:42:58] <pyzozord> it just said that "no required module provides package"
[18:43:09] <pyzozord> but that's not true because this package is provided
[18:44:00] <pyzozord> ah go run tells it
[18:44:05] <pyzozord> but vscode doesnt
[18:44:47] <knusbaum> I always tend to run the Go tools rather than any 3rd party thing, especially if I am encountering errors.
[18:45:13] <knusbaum> Thankfully Go error messages tend to be quite good.
[18:45:23] *** Quits: lureevar (~lureevar@2804:214:8187:6589:f128:9d6b:be01:83b5) (Ping timeout: 268 seconds)
[18:45:23] *** lureevar_ is now known as lureevar
[18:49:18] *** Quits: han-solo (~han-solo@178.248.114.109) (Quit: leaving)
[18:50:15] *** Joins: han-solo (~han-solo@user/han-solo)
[18:51:43] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[18:51:48] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 240 seconds)
[18:52:52] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:53:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:54:15] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[18:54:52] *** Joins: arkurious (~arkurious@user/arkurious)
[18:58:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:58:49] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:00:55] *** Joins: lechner (~lechner@debian/lechner)
[19:03:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[19:06:01] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:09:49] <bomb> RIP Go... https://mail.openjdk.java.net/pipermail/jdk-dev/2022-March/006458.html
[19:09:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[19:10:38] <knusbaum> bomb, ?
[19:12:03] <bomb> hmm, hold on. this release still doesn't include Project Loom
[19:12:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:12:32] <bomb> which is going to seamlessly replace the Threads in Java with coroutines
[19:13:08] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:14:53] <zap> ahoy! I tried to code up a channel that always returns false until you write to other channel, after that it supposed to only return false. A swith sort of.
[19:15:00] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[19:15:08] <zap> I ended up with this https://play.golang.com/p/rEh6i4Veov6
[19:16:16] <zap> but strangely I sometimes recieve true after I "make a swich"
[19:16:47] * zap mixed up true an false in the problem description
[19:17:06] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:17:56] <zap> Can't wrap my head arround why it happens
[19:18:55] *** Quits: lureevar (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74) (Quit: lureevar)
[19:19:41] *** Joins: lureevar (~lureevar@152-238-250-137.user.veloxzone.com.br)
[19:22:18] <knusbaum> Trying to capture state like this with a channel is likely to have race conditions.
[19:23:05] <zap> Also anyone has an idea whether it even possible with a single channel.  So you will always read false untill it was written into once, then you will only return true
[19:23:40] <knusbaum> Are you just playing with channels? If not it may be better to capture mutable state like this with a lock.
[19:24:35] <bookworm> is this a proxy or do you actually want to do this with booleans? If so just close the channel, that will happily return the default value
[19:24:58] <bookworm> that's doing it flipped though, meaning you return true until you close it, then false
[19:25:09] <zap> knusbaum: just playing
[19:25:49] <zap> bookworm: ah didn't think of closing
[19:26:18] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:26:37] <knusbaum> Cool, yeah in that case closing is the best bet.
[19:26:59] <zap> thanks!
[19:27:26] *** Joins: andlabs (~andlabs@2605:ef80:8089:2005:38a6:1598:1ff6:9682)
[19:29:42] <knusbaum> My guess is that the weird output from yours is because you have 2 goroutines doing the check. It's possible that one retrieves a false value but doesn't print it until after the other routine has already printed true.
[19:30:59] *** Joins: AriESQ (~user@user/AriESQ)
[19:31:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:31:30] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: The Lounge - https://thelounge.chat)
[19:31:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:31:59] <knusbaum> You can see that pretty clearly if you print which goroutine is sending the check: https://play.golang.com/p/txpGvpcfj93
[19:32:01] <pyzozord> is there some way in go to tell all interfaces that some type implements
[19:32:05] *** Joins: tebruno992 (~tebruno99@user/tebruno99)
[19:32:16] <pyzozord> i mean doesn't have to be in code, some tool would be engough
[19:32:28] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:32:37] <bookworm> goimplements
[19:32:39] <knusbaum> pyzozord, All interfaces? No. You would have to have a starting interface that you want to check against.
[19:32:40] <bookworm> literally
[19:32:46] <knusbaum> starting *set* of interfaces I mean.
[19:33:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[19:34:45] <pyzozord> "goimplements"?
[19:35:19] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:35:31] <bookworm> ah, that is actually a vim-go thing and not a tool
[19:36:01] <bookworm> but yes, misread your question and _knusbaum is right
[19:36:11] *** Joins: treeford (~charleste@user/treeford)
[19:36:34] <bookworm> considering that the set of possible interfaces is infinite, you have to ask for a specific interface set that you are interested in
[19:36:43] <knusbaum> ^
[19:37:09] <knusbaum> You could limit that set to something big like "all interface types in this set of modules", but you need to start somewhere.
[19:37:24] *** Joins: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de)
[19:38:38] <pyzozord> yeah sorry I though it was obvious, I mean all intefaces in this project (including everything from goroot)
[19:39:17] <knusbaum> Consider that anonymous interfaces are a thing: https://go.dev/play/p/S4OBe6Ty2uP
[19:39:40] <knusbaum> pyzozord, That's totally possible, although I'm not aware of a tool that does it.
[19:39:45] *** Quits: lureevar (~lureevar@152-238-250-137.user.veloxzone.com.br) (Quit: lureevar)
[19:39:53] <zap> knusbaum: I deliberately made two goroutines to check result to see what happens.  My guess was that if it works as expected then there will be no "false true false" output. But yeah I didn't about the fact that printing is done with a delay
[19:39:55] <pyzozord> yes ideally these too
[19:40:33] <knusbaum> Anonymous interfaces would be harder but you could still do it.
[19:41:38] <knusbaum> zap, Yeah, that'll be a problem with any solution to this where retrieving a value and printing that value are not synchronized across goroutines.
[19:47:01] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[19:47:14] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[19:47:56] *** Joins: pinky_ (pinky@minime.fef.net)
[19:48:22] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[19:48:32] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[19:49:46] *** pinky_ is now known as p1nky
[19:49:53] <p1nky> Invalid map key type: comparison operators == and != must be fully defined for the key type
[19:50:19] <p1nky> could methods just be defined on a type alias to a []struct{} ?
[19:50:33] <p1nky> so that the slice can be used as a map key
[19:50:45] <treeford> has anyone had good experience with a go logging library? I know go tends to be light on libraries but something that would allow me to set logging levels and define output would save me some time :)
[19:50:55] <p1nky> i like zap
[19:50:59] <knusbaum> p1nky, You can't define operators on types.
[19:51:12] <p1nky> ah just methods?
[19:51:19] <knusbaum> Yes.
[19:51:23] <p1nky> i thought maybe operators were implemented by calling methods or something
[19:51:40] <pyzozord> is there some way to make a checksum out of a struct?
[19:51:49] <p1nky> ok thanks :( i guess i'll sort it and make a string to be map key
[19:51:59] <treeford> thanks p1nky i'll check that out
[19:52:06] <p1nky> np
[19:52:08] <pyzozord> I mean som fairly generic way so I can pass any struct
[19:52:46] <p1nky> zap is a little bit crazy though .. but its basic usage is pretty simple .. only when you're really in its internals, wanting some format on stdout and another format to a file, which is rotated (rotation which zap doesn't do) .. etc
[19:52:57] <p1nky> i think theres also go-logr or something like that which is popular, kube uses that i think?
[19:52:57] <A_Dragon> zap is like way overkill
[19:53:05] <A_Dragon> there are a few
[19:53:09] <A_Dragon> I implemented my own once
[19:53:20] <A_Dragon> I still wholly disagree with the lack of levels in the stdlib
[19:53:23] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[19:53:23] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[19:53:23] *** Joins: tane (~tane@user/tane)
[19:53:26] <A_Dragon> pyzozord: why do you want that?
[19:53:32] <A_Dragon> ie, what do you want to do
[19:53:50] <treeford> yea it would be nice to have that kind of thing built in
[19:54:06] <knusbaum> pyzozord, You could use reflection to do something like that, similar to how json and other encoders do it, but you'll only have access to exported fields.
[19:55:57] *** Quits: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de) (Quit: Client closed)
[19:56:53] <pyzozord> so I have Route structs, and one of the field is Matcher which is also a struct with few things like path or arguments etc. I want to group all routes that have identical matcher
[19:57:03] <pyzozord> but not the same matcher. it's not a pointer
[19:57:22] * zap just realized that people are talking about a library
[19:57:45] <treeford> :')
[19:58:00] <ikke> :D
[19:58:07] <A_Dragon> pyzozord: how about a string
[19:58:11] <A_Dragon> that identifies a matcher.
[19:58:16] * zap before that it was like.. woo strange chat this is
[19:58:17] <bpalmer> pyzozord: if you have a type Matcher struct {...} with no pointers in it, you can just compare it against other Matchers
[19:58:52] <pyzozord> hmm good call maybe I can just compare them
[19:58:52] <A_Dragon> oh yeah thats also a point
[19:58:58] <bpalmer> you also could just somewhat trivially add a func (m Matcher) checksum() int64 { ... }  which has access to all fields, exported or not
[19:59:07] <pyzozord> ok lets assume I have no pointrs and I can compare two matchers. How would I group structs based on matcher?
[19:59:36] <A_Dragon> why do you want to
[19:59:43] <bpalmer> pyzozord: like in source code? Just first run your program printing out the index and checksum, then sort the output, then go wild with cut and paste.
[19:59:48] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:00:07] *** Joins: bindu (~bindu@user/bindu)
[20:00:16] <pyzozord> no no, the routes and matchers are program input given as json, later parsed into the structs
[20:00:17] <p1nky> 15:23 < A_Dragon> I still wholly disagree with the lack of levels in the stdlib
[20:00:19] <p1nky> yes
[20:00:49] <bpalmer> pyzozord: what does it mean to group things, then?
[20:00:54] <knusbaum> pyzozord, Why are you "grouping" them? How do you plan on accessing them?
[20:01:13] <pyzozord> I need to know which one of the routes have identical matches because I need to create another http handler for them
[20:01:24] *** Joins: pepee (~pepee@user/pepee)
[20:01:28] <pyzozord> normally route will generate a handler and that handler will be added to http server
[20:01:48] <pyzozord> but when multiple routes have the same matcher I want to run each route in sequence until one of them responds
[20:02:05] <knusbaum> pyzozord, If you go with the checksum() method, you can have a map[checksum][]*Matcher that points to all matchers. Then you can look up to see if another Matcher exists with the same checksum.
[20:02:05] <pyzozord> implement a kind of fallthrough for the routes that have identical matchers
[20:02:21] <bpalmer> why not just always assume that there are multiple routes for the same matcher, and sometimes have a loop that only walks over a single route?
[20:02:33] <knusbaum> ^
[20:02:37] <pyzozord> knusbaum: yes that's what I wanted except I don't want to write a checksum function that's aware of the fields of matcher
[20:02:54] <knusbaum> Why not? That would be very flexible and easily maintainable.
[20:03:05] <knusbaum> Your code won't suddenly break if something changes.
[20:03:07] <A_Dragon> knusbaum: that sounds like pointers with extra steps
[20:03:40] <bpalmer> you could also use go generate to maintain the checksum function, but seems like overkill.
[20:03:47] <pyzozord> because the matcher object is quite complex, so the checksum function would be easily 30 or more lines
[20:04:17] <knusbaum> pyzozord, If you are just running them in sequence, why not just loop over *ALL* matchers and run ones that match until one returns. I think this is what bpalmer is suggesting.
[20:04:30] <knusbaum> Why do you need to know if more Matchers exist?
[20:04:42] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:04:58] <pyzozord> knusbaum: I think you are not getting it
[20:05:03] <knusbaum> Maybe not.
[20:05:21] <pyzozord> there can be routes that have different matchers, I cannot run handlers from one route on another route
[20:05:21] <knusbaum> Maybe you can provide some pseudocode
[20:05:35] <pyzozord> no that would be way to complex
[20:06:03] <A_Dragon> I think you're already going way complex
[20:07:13] <pyzozord> the code is what it is, I just need to figure out a way to run multiple routes in sequence if they have the same matcher, and stop as soon as one of them sends some response
[20:07:26] <knusbaum> pyzozord, Right. Don't run the ones that don't match. Isn't the matcher's job to say whether it matches a Route or not?
[20:08:24] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[20:08:24] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[20:08:24] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:08:47] <knusbaum> for _, m := range matchers { if m.Matches(route) { if response := m.Run(); response != nil { return response } } }
[20:09:13] <knusbaum> routes that don't match don't run. All routes that match run in order until one returns something.
[20:09:33] <pyzozord> I'm not sure if can just do that, we are using https://github.com/gorilla/mux
[20:10:19] <pyzozord> that's why I thought I'd group the routes and for the "multi-routes" I'll create an extra handler where I can do the for range like you suggested
[20:11:02] *** Joins: Compy (~compy@user/compy)
[20:11:03] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[20:11:35] <knusbaum> If you're doing your own custom routing logic, why try and cram it into another routing system?
[20:12:05] <pyzozord> again, not my choice, I just need to figure out the most elegant way with least amount of code changes
[20:12:10] <knusbaum> Just write a handler. mux is compatible with handlers
[20:12:48] <knusbaum> Without seeing actual code that's the best advice I have. Otherwise I may end up steering you wrong.
[20:12:54] <pyzozord> if i write just one handler and then loop through everything there is literally no point for the gorilla mux to be there in the first place
[20:13:10] <knusbaum> I agree, but you said that was a requirement.
[20:13:29] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:13:30] <pyzozord> knusbaum: no worries about steering wrong, I need ideas, I'll filter through them later
[20:15:13] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[20:15:21] <pyzozord> ok so no way to just create a checksum out of a chunk of memory occupied by a struct?
[20:15:56] <knusbaum> Sure. You can try reflection like I mentioned. unsafe may be an option, but that's probably not a good idea.
[20:16:30] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[20:16:30] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[20:16:30] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:16:45] <pyzozord> oh wait https://blog.8bitzen.com/posts/22-08-2019-how-to-hash-a-struct-in-go/
[20:16:48] <Tv_> pyzozord: memory layout isn't really guaranteed, maybe you want to hash a serialization of it?
[20:17:13] <A_Dragon> there are zero promises of memory layout
[20:17:24] <Tv_> (there's plenty of places that rely on the memory layout, but those rules only work for carefully-written structs)
[20:17:25] <pyzozord> hmm how reliable is the solution from that link? is fmt.Sprintf("%v", o) going to print all struct fields always?
[20:17:30] <A_Dragon> swapping field order can make large changes the the size of the struct, and so on
[20:17:31] <Tv_> pyzozord: lol no
[20:17:42] <A_Dragon> you could hash %v, I wouldnt though
[20:17:43] *** Quits: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[20:18:02] <Tv_> pyzozord: type T struct { t *T }; t := &{}; t.t = t
[20:18:05] <A_Dragon> this sounds like you're way overcomplicating things
[20:18:12] <A_Dragon> Tv_: [...] "D
[20:18:14] <A_Dragon> s/"/:
[20:18:18] <A_Dragon> or does it just spin
[20:18:20] <A_Dragon> I dont remember
[20:18:32] <Tv_> pyzozord: you want something like encoding/json or https://github.com/tinylib/msgp
[20:18:38] <Tv_> A_Dragon: pointers are printed as pointers
[20:18:42] <A_Dragon> oh yes
[20:18:57] <pyzozord> these objects are constructed from json
[20:19:06] <A_Dragon> json will happily make pointers
[20:19:24] <A_Dragon> besides if they're large objects or contain large strings, hashing them will take time
[20:19:29] <A_Dragon> how about an ID.
[20:19:31] <Tv_> fwiw typo: type T struct { t *T }; t := &T{}; t.t = t
[20:20:17] <Tv_> pyzozord: apologies if you explained things just before i joined. what problem is being solved here? generally you only ever want to hash/sign/etc bytes, not data structures
[20:20:36] <A_Dragon> ~eval type T struct { t *T }; t := &T{}; t.t = t; fmt.Printf("%v", t)
[20:20:41] <A_Dragon> bah
[20:20:44] <A_Dragon> its probably broken
[20:20:45] <A_Dragon> oh well
[20:20:47] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[20:20:53] <knusbaum> Why do you want to avoid writing a Hash() or Checksum() method on the Router{} ?
[20:21:13] <A_Dragon> knusbaum: because its a solution looking for a problem
[20:21:21] <A_Dragon> and because its not "oh just hash it"
[20:21:25] *** Quits: andlabs (~andlabs@2605:ef80:8089:2005:38a6:1598:1ff6:9682) (Ping timeout: 240 seconds)
[20:21:53] <pyzozord> Tv_: long story short I gor Routes and they have Matchers, I need to group routes that have the same matchers
[20:22:19] <Tv_> pyzozord: what exactly is a Matcher
[20:22:40] <knusbaum> A_Dragon, not sure what you mean.
[20:22:46] <Tv_> is it `type Router struct { Matcher *Matcher; ... }`?
[20:22:48] <pyzozord> path, prefix, arguments, headers. Things that decide whether this route should be run for this request
[20:23:02] <A_Dragon> does mux not have a middleware thing for this?
[20:23:12] <pyzozord> it does and we use it
[20:24:01] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[20:24:23] <knusbaum> but...
[20:25:01] *** Quits: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Ping timeout: 240 seconds)
[20:25:14] <pyzozord> i suspect you are not understanding the problem
[20:25:48] <pyzozord> oh maybe this will help
[20:26:14] <pyzozord> json has routes and matchers, this gets parsed and gorilla mux is used to define things, including the matchers stuff
[20:26:35] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[20:26:52] <pyzozord> however now I want to have multiple routes that have identical matchers and i want to run them in sequence until one of those routes sends some response
[20:27:02] *** Quits: shtirlic_ (~shtirlic@49.229.160.198) (Read error: Connection reset by peer)
[20:27:21] <pyzozord> gorilla mux stops on the first match https://github.com/gorilla/mux/blob/91708ff8e35bafc8612f690a25f5dd0be6f16864/mux.go#L147
[20:27:58] <pyzozord> so during json parsing I need to collect all routes that have the identicall matchers, and create a new handler for all of them
[20:28:12] <pyzozord> does that make it clearer?
[20:28:17] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:28:36] <A_Dragon> so reimplement the http.Handler that it implements?
[20:28:48] <A_Dragon> or embed it and change a single method?
[20:29:27] <pyzozord> sorry not following the last two sentences
[20:31:22] *** Joins: noonien (~noonien@user/noonien)
[20:31:22] <A_Dragon> https://github.com/gorilla/mux/blob/91708ff8e35bafc8612f690a25f5dd0be6f16864/mux.go#L31
[20:32:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:33:08] <pyzozord> can you rephrase?
[20:35:25] <A_Dragon> assuming you're using the Router as an http.Handler; you can embed http.Handler in your own struct, overwrite the method you want to with an exact copy except for your changes, and done
[20:38:42] <Tv_> pyzozord: what does the data type for matcher that you decode from json look like
[20:40:11] <pyzozord> a bit like { "path": "/hello/{arg1}", arguments: [{ "name": "arg1", "type": "number", "from": "path" }] } except more fields
[20:41:28] <pyzozord> and Router looks like { "matcher": { *example from above* }, "handlers": [{"type": "foo", name: "bar"}] }
[20:41:59] <Tv_> slice -> you're going to need to serialize it somehow to use it as a map key. easy & lazy way out is just to re-encode to json.
[20:42:45] <pyzozord> s/Router/Route/
[20:42:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[20:43:02] <pyzozord> yeah I am thinking about rencoding to json and using that as map key
[20:43:20] *** Joins: Atque (~Atque@user/atque)
[20:44:07] <pyzozord> unless, maybe there is some way for me to just reimplement this function somehow? https://github.com/gorilla/mux/blob/91708ff8e35bafc8612f690a25f5dd0be6f16864/mux.go#L138
[20:44:42] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:45:05] <pyzozord> with some interface magic?
[20:45:19] <A_Dragon> I...
[20:45:24] <A_Dragon> suggested doing that
[20:45:26] <A_Dragon> above.
[20:45:39] <pyzozord> yes yes that's what I'm thinking about
[20:45:43] <pyzozord> but I don't know how I could do that
[20:45:48] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[20:45:57] <pyzozord> but A_Dragon yes that's your idea thanks
[20:46:05] <A_Dragon> Look into struct embedding, perhaps read the go tour
[20:46:18] <pyzozord> I read the go tour like three times already
[20:46:36] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[20:46:36] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[20:46:36] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:47:03] <pyzozord> I don't want to embad, I'd need to create proxy functions for everything
[20:47:59] <siXy> No you wouldn't. That's not how embedding works.
[20:48:57] <mort> Is it well-defined in Go to call a method on a nil pointer? I.e could I have a `func (x *foo) DoStuff() { if (x == nil) { return } }`?
[20:48:59] <pyzozord> ok I don't think embeding was part of the Tour
[20:49:12] <mort> not asking whether it's good practice or not, it seems to obviously not be, just asking if it's allowed by the language
[20:49:53] <bpalmer> mort: yes, that's fine.
[20:49:57] <A_Dragon> mort: think of `func (x *foo) Stuff(a int, b string)` as being very similar to `func Stuff(x *foo, a int, b string)`
[20:50:07] <mort> alright, neat
[20:50:24] <bpalmer> mort: you do have to make sure it's a typed nil, so it knows which method set to look at.
[20:50:27] <mort> that's what I was guessing, exactly because of what A_Dragon is saying, but I'm mainly a C++ programmer so I see UB behind every corner
[20:50:32] <A_Dragon> it'd explode if x is used and is nil, of course, but nothing stops you from calling functions on a nil *foo
[20:50:32] <siXy> pyzozord: https://go.dev/play/p/8E5l5509Qnh
[20:50:43] <pyzozord> I essentially need to fool this line into calling my Match https://github.com/gorilla/mux/blob/91708ff8e35bafc8612f690a25f5dd0be6f16864/mux.go#L198
[20:50:59] <A_Dragon> mort: you can actually call methods like that TheType.Method(theInstance, the, args)
[20:51:12] <A_Dragon> pyzozord: Read up on struct embedding.
[20:51:28] <pyzozord> siXy: wait what, how does that work
[20:51:40] <siXy> pyzozord: Like you've been told, read up on struct embedding.
[20:51:40] <A_Dragon> it uses struct embedding
[20:51:43] <ikke> mort: https://go.dev/play/p/yv2JdJpLMGq
[20:52:01] <pyzozord> A_Dragon: no need to be snarky
[20:52:18] <A_Dragon> I uh, wasnt? sorry if you read it that way.
[20:52:25] <mort> ikke: thing is, I could make the exact same program in C++ and it'd have the exact same output but it'd be secretly not a valid C++ program and could cause security issues if I compiled it with a different compiler
[20:52:32] <A_Dragon> I can be snarky, but it'd not help
[20:52:56] <A_Dragon> mort: this is defined in the go standard
[20:53:00] <A_Dragon> would you like a link?
[20:53:06] <pyzozord> I didn't know about struct embeding, I'm quite sure it's not part of the go Tour (or maybe I'm forgetting?)
[20:53:09] <mort> nah, I trust that it's OK according to the go standard
[20:53:17] <pyzozord> I'm excited to learn about it now
[20:53:17] *** Joins: Guest94 (~Guest94@43.228.192.115)
[20:53:31] <ikke> Does go have undefined behavior?
[20:54:16] <siXy> No. It has some implementation defined behaviour that you should not rely on, but nothing like C's UB where it's allowed to do litertally anything including eat your dog.
[20:54:24] *** Quits: Guest94 (~Guest94@43.228.192.115) (Client Quit)
[20:54:37] <ikke> Yeah, that's what I thought
[20:54:43] <A_Dragon> hmm, perhaps not
[20:54:52] <A_Dragon> ikke: a good example is the map iter order thing
[20:55:33] <siXy> pyzozord: For future reference, if you don't know about something that's fine, but if a bunch of people suggest doing X as a solution to your problem, you should go read up on X, or ask more about it, rather than just ignore and/or assume that it won't help.
[20:55:34] <ikke> That's on purpose random so that you do not rely on any order, right?
[20:55:44] <A_Dragon> mhmm
[20:55:50] <siXy> A_Dragon: Right, but that's implementation defined, not undefined.
[20:55:52] <A_Dragon> (which I also dislike but details)
[20:56:10] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[20:56:20] <A_Dragon> siXy: are slice headers defined anywhere? I dont thiiink they are?
[20:56:29] <pyzozord> siXy: I don't think I ignored it intentionally I rather did not understand it
[20:56:34] <pyzozord> or missunderstood it
[20:57:47] <A_Dragon> thats okay, happens sometimes
[20:57:48] <siXy> Again, implementation defined. UB in language design means that it's totally allowed for your code to panic, write 3TB of junk data to /dev/shm or just do nothing and carry on. That's very different from things like slice header format which may possibly change, or map iteration order, etc.
[20:58:06] <A_Dragon> yeah I cant think of any specific UB in go
[20:58:14] <A_Dragon> maybe something with overflows
[20:58:28] <siXy> Far as I'm aware there's intentionally no UB in go whatsoever. Let me see if I can find a source for that.
[20:58:37] <knusbaum> Overflows are well-defined
[20:58:37] <A_Dragon> not a bad idea imo
[20:59:03] <knusbaum> Yeah, all errors are well-defined in Go. They don't like the idea of UB, which I agree with.
[20:59:23] <ikke> And I'm very happy about
[20:59:27] <siXy> Oh! I'm wrong - there is one case of UB, which is race conditions. See Ian's reply to https://groups.google.com/g/golang-nuts/c/MB1QmhDd_Rk
[20:59:29] <knusbaum> I don't think they even have implementation-defined behavior, but I'm not sure about that one.
[20:59:34] <knusbaum> I'll have to look that up.
[21:00:04] <siXy> knusbaum: There's plenty of implementation-defined behaviour. Map iteration random algo is one good example.
[21:00:18] <knusbaum> hmmm, interesting.
[21:01:04] <siXy> Ian's reply also calls out float64 to uint8 conversion as another implementation defined behaviour
[21:01:20] <ikke> I can imagine it would be very difficult to reason about the system state in the case of race conditions
[21:01:50] <A_Dragon> I'd assume race conditions are considered extraordinary
[21:01:57] * A_Dragon shrugs Im half asleep today
[21:02:00] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[21:02:07] <siXy> Depends whose code you're reading :)
[21:02:15] <A_Dragon> lol
[21:02:23] <A_Dragon> Ive written some racy code where I just didnt care it was racy
[21:02:27] <A_Dragon> sometimes it just... doesnt matter
[21:02:51] <siXy> *nod* same, though reading that post I'm wondering if I was wrong to assume that it doesn't matter.
[21:03:07] <A_Dragon> which? the race conditions blog post?
[21:03:11] <knusbaum> I would think it's data races specifically that are undefined.
[21:03:14] <knusbaum> Rather than logical races
[21:03:24] <pyzozord> embedding is amazing
[21:03:27] <knusbaum> Data races usually matter
[21:03:29] <A_Dragon> true races are bugs, and may or may not cause problems
[21:03:35] <A_Dragon> they USUALLY are a problem
[21:03:37] <knusbaum> right.
[21:03:43] <A_Dragon> whether or not you;ve noticed what they're breaking
[21:03:48] <pyzozord> I double checked I don't think it's in the go tour
[21:03:50] <siXy> A_Dragon: No, Ian's reply to https://groups.google.com/g/golang-nuts/c/MB1QmhDd_Rk where he states that race conditions are UB, and that "impossible" states are allowed.
[21:03:59] <A_Dragon> pyzozord: yeah; sorry
[21:04:14] <siXy> pyzozord: They are in effective go though, which you should also read.
[21:04:26] <A_Dragon> is the float64/int one still a thing? :D
[21:05:33] *** Joins: uuidNuniq (~weechat@222.67.5.151)
[21:05:52] <uuidNuniq> is this official golang on irc?
[21:06:14] <seebs> "official" is not well-defined. this is the main go IRC discussion
[21:06:18] <pyzozord> siXy: just red through that. Yes I was planning to get to effective go after finishing GOPL
[21:06:26] <uuidNuniq> !topic
[21:07:31] <pyzozord> from https://go.dev/doc/effective_go#embedding it's not clear do I need to use * to declare embedding?
[21:07:38] <ikke> No
[21:07:38] <seebs> no
[21:07:58] <ikke> Just an anonymous struct type
[21:08:07] <seebs> the asterisks there are because `*bufio.Reader` is an implementation of `io.Reader`
[21:08:07] <pyzozord> so what does the * do? Does it make all the fields from the inner struct pointers?
[21:08:42] <siXy> I feel like if you read the text around it you'll find out ;)
[21:08:58] <pyzozord> I just read the whole thing
[21:09:21] <pyzozord> granted I have low comprehension
[21:10:11] <knusbaum> Yes, the * makes the members pointers.
[21:10:19] <knusbaum> It's just part of the type name
[21:10:51] <pyzozord> thanks
[21:10:58] <knusbaum> Same exact thing as when the member has a name, just no name.
[21:11:23] <ikke> pyzozord: "The embedded elements are pointers to structs and of course must be initialized to point to valid structs before they can be used."
[21:11:54] <pyzozord> ikke: that is talking about the previos example with normal composition
[21:13:00] <ikke> No
[21:13:11] <ikke>  *Reader  // *bufio.Reader
[21:13:16] <ikke>  *Writer  // *bufio.Writer
[21:13:49] <pyzozord> oh right
[21:14:00] <pyzozord> See? low comprehension. Sorry about that
[21:14:10] <dale> Not being able to use byte slices as map keys is a bit annoying.  I guess I'll convert the byte slice to a string so I can use it as a map key?
[21:14:43] <ikke> I think that's because a byte slice is mutable
[21:15:03] <pyzozord> anyway, thanks everyone, I think that will solve my problem very elegantly
[21:15:16] <pyzozord> and I learned something super important
[21:15:56] <dale> I guess that is at least one of the reasons.  I came across a fairly old bug report requesting the ability to define how arbitrary types should be hashed, but it was closed years ago with a comment saying that it might be more feasible if/when generics are introduced. :)
[21:16:39] <A_Dragon> if you really need it
[21:16:46] <A_Dragon> really, *really*
[21:16:50] <A_Dragon> use *[]byte
[21:16:52] <A_Dragon> but also
[21:16:54] <A_Dragon> dont do that please
[21:17:54] <siXy> pyzozord: Instead of quickly skimming things and then making us repeat it all to you, can you try re-reading carefully until "low comprehension" stops being an excuse. Because it's not a valid excuse now.
[21:18:02] <dale> A_Dragon: I actually think that wouldn't work here, if I understand how that works.  I'm going to have two separate slices that will both be pointing to two separate backing arrays that may have the same content.
[21:18:24] <dale> A_Dragon: But that's fairly amusing and I hadn't even considered it, so in any case I appreciate you broadening my thinking. :)
[21:18:43] <pyzozord> siXy: it would take about 5 times longer than for a person with normal comprehension
[21:18:59] <A_Dragon> dale: *[]byte will work fine; its a pointer to the slice (which itself contains a pointer to the data and so on), so you can modify the slice all you want without making the pointer change
[21:19:14] <pyzozord> siXy: theoretically I don't need any help at all, given enough time I can do everything myself. Support channels exist to make things easier
[21:19:17] <A_Dragon> as opposed to []byte directly, whose internal pointer can and will change if you append() it etc
[21:20:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:20:39] <pyzozord> siXy: besides it is not an excuse, I am both diagnoses with dyslexia and neurodegenerative disease that makes it harder to learn after a full day of programming
[21:20:43] <ikke> You basically use a pointer as an identity
[21:21:52] <pyzozord> siXy: let alone I don't have any education so I am not as experienced a reader and learner as most people
[21:23:09] <pyzozord> siXy: so calling it an excuse is a bit hurtful
[21:24:37] <dale> I think I'm not expressing myself properly.  Let's say, for example, I'm setting keys in the map based on byte slices retrieved from a file, and I then need to look up things in the map based on byte slices I'm reading from the network.
[21:25:11] <siXy> I'm just warning you that you'll find people get tired of reading the docs to you very quickly, and may become less willing to help you over time. If you take the time to read the documentation slowly and carefully, and maybe several times over if you don't get it right away, more people will be more willing to help you when you're *really* stuck.
[21:25:33] <dale> Unless I really misunderstand things, the byte slices coming from each source will be unique slice objects with their own unique memory addresses.
[21:26:24] <pyzozord> siXy: I can ask less questions, i just thought it was a fun conversation
[21:26:35] <ikke> You can change the contents of this byte slice, so it's not a good identity
[21:26:49] <dale> ikke: Sure, I understand that's one reason it's not possible.
[21:27:15] <dale> Personally I might put that into the category of "do stupid things, win stupid prizes" but that's just one person's opinion, clearly.
[21:28:21] <ikke> dale: but I think your understanding is correct
[21:28:40] <ikke> these would be different slices
[21:30:53] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[21:31:30] <dale> Good, thanks for clarifying
[21:31:47] <siXy> dale: FWIW, string([]byte) is a memalloc + memmove, so not horribly expensive for small strings
[21:32:02] *** Joins: Epithium (~Epithium@2603-6080-3203-8d68-b162-a173-f12a-3a04.res6.spectrum.com)
[21:33:29] <dale> siXy: Does "memalloc" refer to something different than the typically (relatively) expensive operation of allocating memory?  Is that a term of art with specific meaning in Go?
[21:34:57] <siXy> dale: That actually depends if the result escapes. If it doesn't escape, it doesn't need the memalloc, at least in current implementation: https://github.com/golang/go/blob/6f327f7b889b81549d551ce6963067267578bd70/src/runtime/string.go#L75
[21:36:52] *** Quits: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[21:37:00] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:38:02] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[21:38:02] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[21:38:02] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:38:38] <dale> siXy: Wow, I think that is exactly what I was hoping for.  I was about to dream up (emphasis on dream, not implement) a really bad API like []byte.Freeze() string that makes the byte slice unusable and essentially transfers its backing byte array to the string.  Thank you.
[21:39:29] <dale> Avoiding allocation here was probably gilding the lily more than a bit, anyway.  A sort of exercise in learning Go.  (I'm here from Python because Python is too slow for my current task.)
[21:46:16] <siXy> I'd also point out that it's important not to over focus on avoiding allocations. Allocations can, in some situations, be problematic for performance-critical code but they're only one bit of a very large puzzle, and I very often see code that's overly fixated on minimising allocations to the point it's actually really slow for other reasons (e.g. excessive indirection).
[21:49:42] *** veegee_ is now known as veegee
[21:50:35] <dale> siXy: Point well taken, will you be here in a couple hours when I'll inevitably be confessing to have fallen into exactly that trap?
[21:51:06] <dale> :)
[21:52:19] <pyzozord> dale: regarding performance you might be also interested in https://www.hackernewspapers.com/2019/429-what-every-programmer-should-know-about-memory/
[21:52:37] <pyzozord> I guess this is the latest pdf https://people.freebsd.org/~lstewart/articles/cpumemory.pdf
[21:53:45] *** Quits: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a) (Ping timeout: 252 seconds)
[21:53:49] <pyzozord> especially chapter 3 CPU Caches
[21:53:56] *** Joins: c10l5 (~c10l@user/c10l)
[21:54:04] <siXy> perhaps :) I have meetings for a while now, but IRC is happily an sync communication tool! However go has some good built-in benchmarking (https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go is old but still good) and I'd encourage doing real-world testing to validate what you're doing in the places that it matters
[21:54:16] <siXy> an async*
[21:54:25] <dale> siXy: Thanks again
[21:54:29] <siXy> welcome
[21:57:37] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 250 seconds)
[21:57:37] *** c10l5 is now known as c10l
[21:59:28] *** Quits: treeford (~charleste@user/treeford) (Remote host closed the connection)
[21:59:53] *** Joins: treeford (~charleste@user/treeford)
[22:00:43] *** Quits: ekathva_ (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f) (Remote host closed the connection)
[22:06:40] *** Joins: ekathva (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f)
[22:10:00] *** Joins: saml (~saml@216.158.139.120)
[22:11:11] *** Joins: shtirlic (~shtirlic@49.229.160.198)
[22:14:10] *** Quits: scjosh (~scjosh@206.189.79.69) (Quit: The Lounge - https://thelounge.chat)
[22:18:18] *** Joins: scjosh (~scjosh@206.189.79.69)
[22:19:44] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:19:57] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:24:06] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[22:28:17] *** Quits: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Ping timeout: 240 seconds)
[22:31:59] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:32:01] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:32:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:32:22] *** Joins: bindu (~bindu@user/bindu)
[22:34:12] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[22:34:25] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:36:44] *** Quits: saml (~saml@216.158.139.120) (Remote host closed the connection)
[22:39:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:39:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:42:43] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[22:42:43] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[22:42:43] *** Joins: tane (~tane@user/tane)
[22:42:49] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:43:41] *** Joins: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de)
[22:43:41] *** Quits: neurocyte0917090 (~neurocyte@IP-045014191158.dynamic.medianet-world.de) (Changing host)
[22:43:41] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:44:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:46:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:47:06] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 252 seconds)
[22:48:05] *** Quits: shtirlic (~shtirlic@49.229.160.198) (Read error: Connection reset by peer)
[22:48:15] *** Joins: cyrus_mc_ (~cyrus_mc_@45.62.180.58)
[22:49:09] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:49:19] *** Joins: shtirlic (~shtirlic@49.229.160.198)
[22:49:36] *** Joins: Guest25 (~Guest25@138.199.58.71)
[22:50:03] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:53:49] *** Quits: shtirlic (~shtirlic@49.229.160.198) (Ping timeout: 240 seconds)
[22:57:47] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[22:59:42] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[23:00:14] *** Joins: rvalue (~rvalue@user/rvalue)
[23:02:25] *** Quits: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net) (Ping timeout: 250 seconds)
[23:04:19] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:08:10] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[23:11:37] *** Joins: vaaqif (~vaaqif@cpc151159-smal19-2-0-cust83.19-1.cable.virginm.net)
[23:14:23] <pyzozord> I don't understand why this is an error https://bpa.st/R2ZA do init() functions run even before module level variables exist?
[23:14:31] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[23:15:05] <pyzozord> I understand that that := declares local cwd, but I though that := would define only one new variable: err
[23:16:01] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[23:16:14] <siXy> pyzozord: cwd is shadowed. You instead want var err error; cwd, err = os.GetCwd()
[23:17:21] *** Quits: d42 (~root@user/d42) (Ping timeout: 250 seconds)
[23:19:56] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:21:29] *** Joins: justOkay (~justache@user/justache)
[23:21:34] *** Joins: admin123 (~harrymore@ool-18b9adbf.dyn.optonline.net)
[23:22:36] *** Joins: BrunoFontes (~bruno@2a02:c207:2026:6264::1)
[23:24:14] <pyzozord> why is cwd shadowed instead of being redeclared https://go.dev/ref/spec#Short_variable_declarations "Redeclaration does not introduce a new variable; it just assigns a new value to the original"
[23:25:04] <pyzozord> is it because redeclaration only works within the same block and cwd is in a different block?
[23:25:13] <seebs> redeclaration *in a new scope* does not exist
[23:25:34] <seebs> redeclaration happens only when you have a := that's introducing at least one new name but reusing a name which already exists in the current scope
[23:26:11] <pyzozord> I thought cwd does exist in the function scope already since it is in the package scope
[23:26:50] <pyzozord> but the spec says that it needs to be actually declared within the same scope, not just be reachable "may redeclare variables provided they were originally declared earlier"
[23:28:08] <seebs> an outer scope being accessible isn't the same thing as "exists in this scope"
[23:28:27] <seebs> this scope is only the stuff actually declared-in-this-scope, not the things declared at outer scopes
[23:31:24] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:31:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:33:52] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[23:36:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:36:59] <pyzozord> I see, thanks. Do people commonly say "exist in this scope" when they mean "declared in this scope" in go?
[23:41:02] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:41:56] *** Joins: d42 (~root@user/d42)
[23:42:05] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:44:16] <seebs> yes
[23:44:23] <seebs> because being accessible isn't the same as existing
[23:44:43] <seebs> a package level variable doesn't exist inside a function, it's just accessible from inside the function
[23:45:34] <mikoto-chan> I want to return expired rows from my sqlite3 database but go's (*sql.DB).Query() doesn't seem to be happy when I provide nil as the only interface (I don't need any placeholders), any idea how to fix this? do I pass an empty interface?
[23:45:36] <mikoto-chan> https://dpaste.com/C8R2BZEWW
[23:45:41] <mikoto-chan> ^ cide
[23:45:44] <mikoto-chan> ^ code
[23:56:10] <novns> mikoto-chan, why do you pass nil there at all?
[23:56:25] <novns> if your query has no arguments, just don't pass anything
[23:57:03] <novns> like m.DB.Query(query).Scan(...
[23:59:46] <dale> Oof, go.godbolt.org is great, but "Intel asm syntax" is checked in its settings and I just figured out the output is definitely not Intel syntax.  ("MOVQ" should have tipped me off, granted, since I believe that'd be "MOV RAX" or whatever.)
