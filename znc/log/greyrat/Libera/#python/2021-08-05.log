[00:00:17] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[00:03:19] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[00:04:00] *** Quits: ramblebamble (~ramblebam@37.120.209.205) (Quit: WeeChat 3.2)
[00:04:37] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:04:51] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[00:06:00] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[00:08:36] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[00:08:55] <tannerstirrat> first question: does `assert` call `__bool__` on `thing` when you `assert thing`?
[00:09:15] *** Joins: dcaro_ (~dcaro@user/dcaro)
[00:09:16] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:09:22] *** Joins: hyper_dave (~hyper_dav@197.156.107.21)
[00:09:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[00:10:15] *** Joins: reumeth (~reumeth@user/reumeth)
[00:11:41] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:11:46] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 256 seconds)
[00:11:46] *** dcaro_ is now known as dcaro
[00:12:09] *** Quits: irrgit (~irrgit@192.241.175.183) (Quit: Leaving)
[00:12:17] <deniska> tannerstirrat: https://bpa.st/YKRA quick test suggests it does
[00:12:23] *** Joins: irrgit (~irrgit@192.241.175.183)
[00:12:46] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[00:13:10] <tannerstirrat> makes sense
[00:13:24] <tannerstirrat> next question: does `thing is None` also call `__bool__`?
[00:13:41] <bjs> tannerstirrat: no
[00:13:41] <deniska> no
[00:13:48] <tannerstirrat> okay, that makes sense
[00:14:26] *** Joins: V1mV1m (~VimVim@85.191.6.5)
[00:14:46] <tannerstirrat> thank you!
[00:15:21] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Quit: ubert)
[00:18:02] *** Quits: VimVim (~VimVim@87.104.100.82) (Ping timeout: 272 seconds)
[00:18:16] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 258 seconds)
[00:18:34] <nedbat> pathlib has no equivalent for os.walk?
[00:19:30] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:19:32] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:19:43] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[00:19:52] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[00:20:01] <KirkMcDonald> nedbat: p.glob("**/*")
[00:20:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[00:20:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[00:20:16] <nedbat> KirkMcDonald: i just typed something like that :)
[00:20:34] *** Joins: notepad (~notepad@129.159.46.243)
[00:20:57] <SnoopJ> it always feels wrong
[00:21:13] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:21:36] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[00:21:49] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:21:55] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[00:22:39] <jinsun> or path.rglob("*")
[00:23:51] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Client Quit)
[00:23:54] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[00:23:58] *** Joins: P1ro_ (~quassel@user/p1ro)
[00:24:25] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:26:19] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 258 seconds)
[00:27:55] <yolk> I just wanted to announce that I published a package to PyPi for the first time. ðŸŽ‰ðŸ¥³ I've pushed to corporate package indexes like artifactory, gitlab, and nexus before, but this is the first time I've pushed to pypi publicly. The library is niche and likely only useful to me. Im really thankful that the python packaging tutorial is current and I learned a bunch of new things for modern python packaging ðŸ˜Ž http://packaging.python.or
[00:29:37] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[00:30:04] *** Joins: c10l (~c10l@89.34.167.207)
[00:30:05] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[00:30:59] *** Joins: SilverFox (~SilverFox@64.223.223.162)
[00:31:48] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:32:41] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[00:33:12] *** Joins: c10l (~c10l@89.34.167.207)
[00:33:29] <SilverFox> graingert, hey again~ Last week do you remember talking about the anyio task groups and everything?
[00:33:37] <SilverFox> I forget what conclusion we came to if anything :/
[00:33:44] *** Joins: jay-m126_ (~jay-m@129.0.205.217)
[00:33:52] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[00:35:08] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[00:36:13] <nedbat> yolk: congrats :)
[00:36:14] *** Joins: banshi (~tcst@85.115.248.75)
[00:36:18] <banshi> hello all
[00:38:01] <yolk> nedbat: ty :)
[00:38:51] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[00:38:51] <noarb-> when using shinx to build both html/man pages, can the same conf.py be used for both? If so, how do you separate the source directories of the html and manpage rst files? The only promising argument is https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-man_pages startdocname. Or, should multiple source directories with multiple conf.py be maintained?
[00:40:19] *** Joins: JordiGH (~jordi@user/jordigh)
[00:40:22] <JordiGH> This is pretty unimportant, but how can I arrange these conditionals so I don't have to write the same else clause twice? http://paste.debian.net/1206591/
[00:41:35] *** Joins: Auron (Auron956@user/auron)
[00:41:36] <banshi> guys, I need your help. I've tried to simplify this script: https://github.com/Magoninho/3D-projection-tutorial/blob/main/projection.py   And I did it. Result is here: https://paste.ubuntu.com/p/S7TWy5JJPs/    In result I rid of of math library, but code is still working properly.
[00:41:53] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 250 seconds)
[00:41:54] <nedbat> jinsun: thanks
[00:42:48] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Ping timeout: 258 seconds)
[00:43:01] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:43:17] <banshi> Then I've tried to rewrite that code in C - https://paste.ubuntu.com/p/kXpRzYgrMf/    Almost same algorithm, but... it doesn't work properly if you rotate cube in all 3 axis, but it works if you rotate only in 2 (x and y, or x and z, or y and x, or y and z)
[00:43:34] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[00:43:38] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:44:01] <ammar2> JordiGH: is this part of a bigger function?
[00:44:18] <JordiGH> ammar2: I don't see the relevance of this question.
[00:44:31] <JordiGH> Yes. Does that matter?
[00:44:39] <ammar2> you can restructure with early returns if you extract out this part into a helper
[00:44:52] <ammar2> and that would get rid of the redundant else clauses
[00:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:46:16] <JordiGH> ammar2: Oh, I see what you mean, okay. I kind of do need to do that.
[00:47:48] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[00:47:50] <nedbat> ammar2: some people have been scarred by bad irc behavior, so we have to clarify our questions I guess :)
[00:48:35] <ammar2> nedbat: to be fair I probably should have led with the helper function bit ;)
[00:49:24] *** Joins: c10l (~c10l@89.34.167.207)
[00:51:15] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[00:52:18] *** Quits: henistein (~henistein@2001:8a0:c1b3:6b01:2c0c:a643:93bf:b054) (Quit: Client closed)
[00:53:49] *** Joins: cellofellow (~user@166.70.50.58)
[00:55:01] <cellofellow> is it possible to shim Python 3.7 `breakpoint()` into 3.6?
[00:55:22] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[00:56:45] *** Quits: reumeth (~reumeth@user/reumeth) (Remote host closed the connection)
[00:56:49] <graingert> SilverFox: I always talk about task groups
[00:57:08] <nedbat> cellofellow: it doesn't do that much, so i guess so?
[00:57:14] *** Joins: reumeth (~reumeth@user/reumeth)
[00:58:03] <cellofellow> hmm, seems like I can `import builtins` and stuff a breakpoint function onto that.
[00:58:08] <nedbat> cellofellow: looks to me like it's just:   def breakpoint(): sys.breakpointhook()
[00:58:24] <nedbat> cellofellow: looks to me like it's just:   def breakpoint(*args, **kwargs): sys.breakpointhook(*args, **kwargs)
[00:58:47] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[00:58:48] * cellofellow tries it
[00:58:52] <nedbat> though I wonder now what the point is?Why not just assign to builtins.breakpoint
[00:59:17] <SnoopJ> I have a big annoying dependency (it's torch) in my pyproject.toml, and I'd like to install it as a separate step in Docker before I install my application's wheel. Is there a better way to do this than extracting the requirement from pyproject.toml myself?
[00:59:31] <SnoopJ> (or maybe from the .whl?)
[00:59:57] <cellofellow> I'm just adding some remote-debugging tools a webapp and it's 3.6 but I'd miss `brreakpoint()` so I thought maybe I could stuff it in when enabled.
[01:02:23] <nedbat> cellofellow: when i said "what's the point" i didn't mean what you were doing. I meant the point of breakpoint in the first place, since it just calls another function.
[01:02:59] *** Joins: matsaman (~matsaman@user/matsaman)
[01:03:01] <jinsun> nedbat: isn't sys.breakpointhook also 3.7+
[01:03:02] <cellofellow> oh I know that nedbat; I was just elaborating on my usecase anyway.
[01:03:10] <nedbat> jinsun: yes
[01:03:36] <jinsun> so for 3.6 that def won't work
[01:04:11] <nedbat> jinsun: right, the shim would have to call pdb.set_trace or whatever
[01:04:29] <cellofellow> yep
[01:04:49] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[01:05:27] *** Quits: magla (~gelignite@55d4f84b.access.ecotel.net) (Quit: Stay safe!)
[01:05:35] *** Joins: d00gy (~d00gy@user/d00gy)
[01:05:36] *** Joins: ThePendulum (~znc@2a03:b0c0:0:1010::1a8:1)
[01:05:41] *** Parts: ThePendulum (~znc@2a03:b0c0:0:1010::1a8:1) ()
[01:06:58] *** Joins: audiocat (~audio@2603-8081-1800-00ad-b6c7-a95d-47d6-54c5.res6.spectrum.com)
[01:08:58] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 240 seconds)
[01:09:38] *** Quits: Tas-sos (~Tas-sos@78-154-35.adsl.cyta.gr) (Ping timeout: 258 seconds)
[01:10:01] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[01:10:04] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:10:34] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:10:50] *** Joins: fortuno51_ (~fortuno51@37.120.156.254)
[01:12:16] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[01:12:42] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Ping timeout: 258 seconds)
[01:14:14] *** Quits: SilverFox (~SilverFox@64.223.223.162) (Remote host closed the connection)
[01:14:37] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 258 seconds)
[01:14:41] <Gudddu> Can a python script be installed as a RHEL service?
[01:14:57] <matsaman> course
[01:15:28] <mefistofeles> yes
[01:16:12] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:16:27] *** Joins: emika7 (~emika@185.207.249.185)
[01:17:46] *** Quits: emika (~emika@83.136.182.192) (Ping timeout: 268 seconds)
[01:17:46] *** emika7 is now known as emika
[01:18:10] *** Joins: LucaTM (~LucaTM@user/lucatm)
[01:18:50] *** Quits: {HD} (~{HD}@191.96.185.181) (Ping timeout: 272 seconds)
[01:18:55] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:19:22] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:23:29] *** Joins: junktext (~junktext@109.201.152.167)
[01:23:55] *** Quits: junktext (~junktext@109.201.152.167) (Client Quit)
[01:24:47] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[01:25:47] *** Joins: dcaro_ (~dcaro@user/dcaro)
[01:25:49] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[01:27:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:27:39] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[01:27:44] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[01:27:51] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 276 seconds)
[01:27:51] *** dcaro_ is now known as dcaro
[01:28:14] <SnoopJ> I ended up with this for my question about installing a wheel's deps: `python3 -m pip install $(unzip -p dist/anvil*.whl "anvil*/METADATA" | grep "Requires-Dist" | cut -d':' -f2 | tr -d [:blank:])`
[01:30:04] *** Quits: banshi (~tcst@85.115.248.75) (Quit: leaving)
[01:31:17] *** Quits: jay-m126_ (~jay-m@129.0.205.217) (Ping timeout: 250 seconds)
[01:32:09] *** Quits: dld (~davidlowr@73.61.8.224) (Ping timeout: 250 seconds)
[01:32:09] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[01:32:38] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 258 seconds)
[01:33:24] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[01:33:26] <matsaman> should work for a few months at least before pypa breaks it =)
[01:34:04] *** Joins: dld (~davidlowr@73.61.8.45)
[01:34:05] <phy1729> fwiw awk -F ': ' '$1 == "Requires-Dist" { print $2 }'  can replace the grep+cut+tr
[01:34:39] <matsaman> think I prefer the former =D
[01:34:40] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[01:35:06] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 240 seconds)
[01:35:19] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[01:35:23] *** Joins: stdout (~speff@216.163.21.11)
[01:36:00] <SnoopJ> matsaman, if you know of another way to do it, please suggest it.
[01:36:50] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:37:29] *** Joins: guntbert (~yesitsme@user/guntbert)
[01:37:37] *** Quits: guntbert (~yesitsme@user/guntbert) (Remote host closed the connection)
[01:37:42] *** Joins: thiras (~thiras@user/thiras)
[01:37:52] <matsaman> there's probably another way, but I think your way is good
[01:38:02] <matsaman> I just get tired of pypa breaking things constantly
[01:38:11] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[01:38:12] *** Quits: hyper_dave (~hyper_dav@197.156.107.21) (Read error: No route to host)
[01:39:01] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 246 seconds)
[01:42:02] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[01:43:49] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Remote host closed the connection)
[01:45:26] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Ping timeout: 272 seconds)
[01:45:47] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[01:45:59] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[01:46:01] *** Quits: neltraus (~neltraus@supernova.neltraus.de) (Quit: Zzzzzz...)
[01:46:02] *** Quits: canton7 (canton7@about/csharp/canton7) (Remote host closed the connection)
[01:46:06] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[01:46:09] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (Remote host closed the connection)
[01:46:15] *** Joins: neltraus (~neltraus@supernova.neltraus.de)
[01:46:21] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[01:46:22] *** Joins: canton7 (canton7@about/csharp/canton7)
[01:46:26] *** Joins: guntbert (~yesitsme@user/guntbert)
[01:46:58] <SnoopJ> I guess I could use poetry inside the container, but it's annoying enough outside of it :/
[01:47:37] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[01:47:53] <mefistofeles> SnoopJ: don't do that!
[01:47:54] <mefistofeles> :P
[01:48:10] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (Ping timeout: 240 seconds)
[01:48:34] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[01:48:44] *** Quits: guntbert (~yesitsme@user/guntbert) (Client Quit)
[01:49:00] <SnoopJ> mefistofeles, which "that" ? The incantation above, or poetry-in-container?
[01:49:28] *** Joins: banshi (~tcst@85.115.248.75)
[01:49:45] <mefistofeles> SnoopJ: oh... good question, both seem bad :P
[01:49:49] <mefistofeles> now I don't have better ideas
[01:50:17] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[01:50:28] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[01:50:36] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[01:51:22] <SnoopJ> the cantrip is awful, yea
[01:51:22] *** Joins: ice9 (~ice9@user/ice9)
[01:52:31] <banshi> hehe, I did it!
[01:53:32] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 268 seconds)
[01:54:52] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[01:55:47] *** Joins: guntbert (~yesitsme@user/guntbert)
[01:56:16] *** Joins: {HD} (~{HD}@102.165.16.192)
[01:56:21] *** Quits: banshi (~tcst@85.115.248.75) (Quit: leaving)
[01:56:50] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 272 seconds)
[01:58:53] *** Quits: guntbert (~yesitsme@user/guntbert) (Client Quit)
[02:01:01] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[02:02:46] *** Joins: qlixed (~qlixed@152.170.36.244)
[02:03:32] *** Quits: stdout (~speff@216.163.21.11) (Quit: Leaving)
[02:05:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[02:05:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:06:23] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 250 seconds)
[02:07:52] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:08:17] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 258 seconds)
[02:09:20] *** Joins: guntbert (~yesitsme@user/guntbert)
[02:09:53] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[02:11:20] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[02:12:25] *** Joins: P1ro (~quassel@user/p1ro)
[02:13:20] *** Quits: jelmer (~jelmer@user/jelmer) (Remote host closed the connection)
[02:14:23] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:14:27] *** Quits: P1ro_ (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[02:17:45] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 252 seconds)
[02:18:33] *** Joins: jelmer (~jelmer@user/jelmer)
[02:18:56] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[02:21:19] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Ping timeout: 258 seconds)
[02:21:39] <disi> anyone know of a good way to install `[build-system]` requirements (a la `pip install -r`)?
[02:23:05] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[02:23:25] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[02:23:37] *** Quits: matkor (~matkor@91.198.89.207) (Ping timeout: 258 seconds)
[02:24:40] <nedbat> disi: what do you mean by `[build-system]` ?
[02:24:48] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-b0eb-14a2-3229-7a8f.res6.spectrum.com)
[02:26:10] <disi> nedbat: i want to install the requirements from pyproject.toml into my venv
[02:26:22] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:26:33] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-9410-1ec0-4d93-e07a.res6.spectrum.com) (Ping timeout: 252 seconds)
[02:26:38] <nedbat> disi: sorry, i don't know
[02:26:39] <disi> https://github.com/pypa/pip/issues/8049 still open... doens't look like pypa/build has this yet either :/
[02:26:41] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Ping timeout: 258 seconds)
[02:28:37] <graingert> disi: you should be able to use the build public api to extract the deps
[02:28:44] <graingert> disi: try in discord though
[02:28:45] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[02:29:08] *** Quits: fortuno51_ (~fortuno51@37.120.156.254) (Ping timeout: 272 seconds)
[02:29:25] *** Quits: Pandadub (~Barones@2804:48dc:8500:0:1823:4510:65ba:133b) (Quit: Leaving)
[02:30:23] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:34:18] *** Joins: Fiji (~Fiji@user/fiji)
[02:35:15] *** Joins: rany_ (~rany@user/rany)
[02:37:02] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[02:38:16] *** Quits: SuperLag (~akulbe@user/superlag) (Remote host closed the connection)
[02:38:32] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[02:40:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[02:40:08] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:40:14] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:40:23] *** Quits: Akuli (~Akuli@82-203-167-113.bb.dnainternet.fi) (Quit: Leaving)
[02:43:15] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:43:59] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[02:44:40] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[02:44:45] *** Joins: SuperLag (~akulbe@user/superlag)
[02:48:18] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[02:48:31] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:49:40] *** Joins: qk1z (~qk1z@110-175-249-154.tpgi.com.au)
[02:50:03] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[02:53:54] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Ping timeout: 258 seconds)
[02:54:02] <auk> anyone familiar with python development in docker?
[02:54:19] <auk> like setting up a Dockerfile for a python app
[02:54:28] <auk> i'm getting a failed build
[02:54:31] <nedbat> auk: it works better here to ask your question directly. People don't often volunteer as experts, and sometimes non-experts can help.
[02:54:37] *** Joins: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net)
[02:55:13] <auk> nedbat, thanks
[02:55:29] <auk> RUN pip install "poetry==$POETRY_VERSION"
[02:55:38] <auk> ^ i'm getting a failed build on that step in the Dockerfile
[02:55:50] <auk> not sure why
[02:56:22] *** Quits: m_tadeu (~quassel@bl23-211-151.dsl.telepac.pt) (Read error: No route to host)
[02:57:17] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:58:51] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[02:59:49] <FunkyBob> auk: any particular details on _how_ it fails? how the failure presents?
[02:59:53] <FunkyBob> is there an error message?
[02:59:54] <auk> container_linux.go:380: starting container process caused: error adding seccomp filter rule for syscall bdflush: permission denied
[02:59:55] *** Joins: rany (~rany@user/rany)
[03:00:20] <auk> FunkyBob, there's the error message^ (most recent one at least; i've gotten several different errors at the same step, as i've been tweaking things)
[03:00:25] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:00:49] <auk> first error msg mentioned cgroup, this one does as well.
[03:01:37] <auk> but i think i solved the cgroup problem (switched from vagrant+docker/moby-engine to vagrant+podman; podman supports cgroup v2...)
[03:02:00] <FunkyBob> oh, is this docker on macos or something?
[03:02:12] <auk> docker on fedora
[03:02:30] <auk> well, podman on fedora now. CLI replacement for docker
[03:02:57] <auk> it's erroring out at the first RUN line in my Dockerfile
[03:03:02] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 245 seconds)
[03:03:45] *** Joins: schumaml2 (~schumaml@dslb-188-104-174-006.188.104.pools.vodafone-ip.de)
[03:03:59] <FunkyBob> ok... I've never used vagrant
[03:04:06] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:04:17] <auk> hmm, i just added `RUN ls` before `RUN pip install poetry`... it errors out on `RUN ls` now
[03:04:51] <auk> so i thikn it's erroring out at the first instance of RUN... guess it's probably not an issue with my Dockerfile then?
[03:05:45] *** Quits: schumaml1 (~schumaml@dslb-092-074-008-068.092.074.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:06:27] <cluelessperson> auk, you using docker?
[03:06:35] <cluelessperson> auk, I'm very familiar.
[03:06:56] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[03:06:57] *** Joins: P1ro_ (~quassel@user/p1ro)
[03:07:56] <auk> cluelessperson, kind of. i'm using  Dockerfile but with podman-docker
[03:08:05] *** Quits: jelmer (~jelmer@user/jelmer) (Ping timeout: 258 seconds)
[03:08:05] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 258 seconds)
[03:09:00] <auk> podman backend / drop-in replacement for docker. (docker was erroring out i think because it (docker 19, not 20) doesn't support cgroup v2 on fedora 33)
[03:09:06] *** Joins: jelmer (~jelmer@user/jelmer)
[03:09:37] <FunkyBob> what does vagrant provide in this situation?
[03:09:44] <cluelessperson> a virtual machine
[03:09:57] *** Quits: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[03:10:14] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:10:33] <FunkyBob> so you're not running fedora, you're running docker-in-fedora-in-vm-on-----something?
[03:10:37] *** Quits: jelmer (~jelmer@user/jelmer) (Read error: Connection reset by peer)
[03:10:39] <auk> FunkyBob, an alternative to docker-compose lol
[03:10:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:10:56] <auk> cluelessperson, actually i'm using --provider=docker so no vm
[03:11:25] <auk> FunkyBob, i'm running Qubes OS (xen), with a fedora vm, with vagrant+podman-docker running in there
[03:11:37] <FunkyBob> ah, so it's vagrant wrapping podman wrapping the docker engine...
[03:11:54] <FunkyBob> yikes
[03:11:58] <auk> FunkyBob, yes -- altho not the docker engine itself. and alternative implementation
[03:12:02] <auk> an*
[03:12:26] <FunkyBob> so... this is sounding less and less like a docker question by the minute :P
[03:12:47] <auk> for my purposese, i'm using the vagrant layer because writing a Vagrantfile seems easier than writing a docker-compose.yaml
[03:12:51] <auk> :/
[03:13:03] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:13:03] *** Joins: cjb (~cjb@user/cjb)
[03:13:03] <FunkyBob> "I've got 7 abstractions between me and something that kinda smells like docker if you stand upwind... and it's not working" :/
[03:13:04] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[03:13:11] <auk> FunkyBob, lmao yep
[03:13:16] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:13:42] <matsaman> why stop at one shiny fad when you can use them all
[03:13:53] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Client Quit)
[03:13:57] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:14:06] <auk> i mean i was trying actual upstream docker before but it errored out so i switched to podman-docker
[03:14:08] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:14:22] <allegary> so are you using vagrant's shell provisioning here?
[03:14:48] <auk> i'm fine to switch tech, i just want the simplest solution that will get me a somewhat-contained dev environment that has py2 and py3 side-by-side
[03:14:58] *** Joins: jelmer (~jelmer@user/jelmer)
[03:15:35] <auk> i was doing dev before on just vm+poetryenv, but that was fedora31. fedora33 doesn't provide py2
[03:15:48] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[03:15:57] *** Joins: rany_ (~rany@user/rany)
[03:16:04] <auk> allegary, i don't think so. my vagrantfile is extremely simple
[03:16:13] <allegary> can pyenv provide the additional versions for you instead?
[03:16:24] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[03:16:50] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:17:02] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:17:03] <auk> allegary, i need py2 and py3 accessible from the same environment (side-by-side).... because my python script (py3) has a py2 dependency
[03:17:04] <allegary> if you were otherwise happy with poetry
[03:17:20] <auk> i plan to port the py2 dep to py3 eventually but that's a whole deal
[03:17:42] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[03:18:06] <auk> allegary, i was researching how to make it work with subprocess invoking 'conda run py2wrapperscript.py...' but it seems very breakable
[03:18:10] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[03:18:13] <auk> anyway
[03:18:53] <auk> it'd also be nice if i end up with a non-pet environment, so i can get it workign again later without spending 3 days on it
[03:19:38] <allegary> well, it certainly makes sense to be able to provision whatever you need in a simple fashion
[03:20:00] <auk> hence desire to use docker/podman/lxc... planned to run debian 10 inside the container, so i can apt install py2 and py3 side-by-side
[03:20:28] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[03:20:35] *** Quits: hsv (~unknown@user/hsv) (Remote host closed the connection)
[03:20:54] <allegary> so many solutions...
[03:21:52] <cluelessperson> auk,   long story short, for your development environment, I suggest just directly using docker,  or pyenv to manage multiple python versions.
[03:22:15] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[03:22:21] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[03:22:40] <allegary> others might be able to comment on whether pyenv is a viable option as I haven't gotten around to using it quite yet - I assume that it would give you python versions side by side enough for your purposes
[03:23:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[03:23:37] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:24:14] <allegary> I can only imagine it must be quite a loosely coupled dependency
[03:24:19] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[03:24:30] <disi> graingert: TIL pypa has a discord! ty
[03:25:22] *** Joins: hsv (~unknown@user/hsv)
[03:25:25] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Ping timeout: 268 seconds)
[03:25:43] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[03:26:48] <auk> allegary, yeah many solutions and not a one that 'just works'
[03:27:03] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[03:27:16] <auk> my impression is pyenv won't do the job, but i'll look into it again
[03:27:16] *** Joins: mkv (~znc@ubuntu/member/m4v)
[03:27:27] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[03:27:46] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[03:27:46] *** mkv is now known as m4v
[03:27:47] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[03:28:00] <auk> cluelessperson, maybe i'll try writing a docker-compose.yaml and see if i can get that to load
[03:28:35] <cluelessperson> auk, it won't.
[03:29:19] <auk> cluelessperson, i mean i'll see if i can get it to load using at least one of these tools (including vanilla upstream docker)
[03:31:22] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[03:31:39] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:32:36] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[03:32:42] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:32:51] *** Quits: tannerstirrat (~tannersti@c-76-25-57-28.hsd1.co.comcast.net) (Quit: WeeChat 3.2)
[03:32:56] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:33:27] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[03:35:24] *** Joins: dre|dinner (~dre@2001:8003:c932:c301:ceba:8234:4850:924e)
[03:36:21] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:36:55] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:37:12] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:e809:16a6:2cf5:a7a7) (Ping timeout: 276 seconds)
[03:37:31] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:37:40] *** nemosaltat is now known as samstevenm
[03:38:16] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[03:38:39] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[03:38:53] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 244 seconds)
[03:39:22] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[03:39:27] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:3d76:93d9:47bd:e2c2)
[03:39:42] *** Quits: samstevenm (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:40:41] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:41:39] *** nemosaltat is now known as samstevenm
[03:42:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:42:37] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (Remote host closed the connection)
[03:43:14] *** Quits: samstevenm (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Client Quit)
[03:43:21] *** Quits: moto (~moto@user/moto) (Ping timeout: 258 seconds)
[03:43:26] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:44:25] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Client Quit)
[03:44:36] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:44:44] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[03:45:03] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:45:26] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:45:57] *** Quits: P1RATEZ (~piratez@user/p1ratez) (Remote host closed the connection)
[03:47:40] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[03:48:53] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:49:17] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 245 seconds)
[03:49:29] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 258 seconds)
[03:49:36] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[03:50:36] *** dre|dinner is now known as dre
[03:52:33] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Ping timeout: 268 seconds)
[03:52:33] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[03:52:43] *** Joins: tims (~tims@61.69.131.46)
[03:53:01] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Quit: `kill -9 -1`)
[03:53:07] *** Joins: c10l (~c10l@89.34.167.207)
[03:53:10] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[03:54:27] *** Joins: lf94 (~lf94@2604:a880:cad:d0::cd6:8001)
[03:54:39] <lf94> Is there no way to return multiple values but across multiple lines?
[03:54:53] <lf94> x, y, z = func_returning_multiple_values()
[03:54:59] *** Joins: moto (~moto@user/moto)
[03:54:59] <lf94> I want x y and z to be on their own lines
[03:55:08] <lf94> (Because x y and z are actually very long names.)
[03:56:07] *** Quits: qlixed (~qlixed@152.170.36.244) (Quit: That's all folks!!)
[03:56:53] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[03:58:00] *** nemosaltat is now known as samstevenm
[03:58:20] <auk> lf94, i think maybe you can do (x, y, z) = f()
[03:58:34] <lf94> I tried :/
[03:58:37] <auk> with () surrounding the var names i think it will let you separate ines
[03:58:40] <auk> oh ;(
[03:58:42] <auk> :(
[03:58:53] <auk> seems to work in the python shell
[03:59:23] <auk> lf94, you could always store it in a tuple and unpack it in a second steo
[03:59:24] <auk> step
[03:59:30] *** Quits: samstevenm (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[03:59:40] <lf94> Yeah maybe that'd work
[04:01:07] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:01:52] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[04:02:34] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[04:04:58] <BinarySavior> is pypi requests the go-to for basic GET requests?
[04:05:23] *** Joins: schumaml3 (~schumaml@dslb-188-104-164-207.188.104.pools.vodafone-ip.de)
[04:05:29] <GinFuyou> you mean "requests" lib?
[04:05:37] <BinarySavior> yes GinFuyou
[04:05:55] <GinFuyou> Yes, it was pretty fine to work with for me
[04:06:06] <BinarySavior> cool ty
[04:06:21] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[04:06:35] <nemosaltat> There are also a handful of online utilities that convert curl to python rquests
[04:07:18] *** Quits: schumaml2 (~schumaml@dslb-188-104-174-006.188.104.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[04:07:25] <nemosaltat> Iâ€™ve found that useful for testing, especially since Iâ€™m more familiar with cURL
[04:09:15] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:11:28] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:12:42] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[04:12:42] *** Wulf4 is now known as Wulf
[04:12:44] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:3d76:93d9:47bd:e2c2) (Read error: Connection reset by peer)
[04:14:33] *** hexeme is now known as ldlework
[04:14:47] *** Joins: qlixed (~qlixed@181.44.129.13)
[04:15:32] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[04:20:30] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[04:22:25] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[04:23:05] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[04:24:41] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[04:27:06] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[04:27:32] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[04:28:31] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:29:13] *** Joins: moto (~moto@user/moto)
[04:33:08] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[04:33:11] *** Quits: {HD} (~{HD}@102.165.16.192) (Ping timeout: 258 seconds)
[04:33:16] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[04:36:24] *** Quits: Masklin_Gurder (~joel@93.182.183.85) (Ping timeout: 256 seconds)
[04:36:34] *** Quits: d3sync (~d3sync@77.49.118.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[04:36:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:38:00] <optimant> love the requests lib. extremely easy to get right.
[04:39:14] *** Joins: d3sync (~d3sync@194.219.251.225)
[04:39:19] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 258 seconds)
[04:40:25] *** Joins: {HD} (~{HD}@102.165.16.121)
[04:40:28] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[04:40:49] *** Joins: lethu (~lethu@196.117.151.28)
[04:41:26] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[04:43:59] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:44:00] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[04:44:36] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[04:47:47] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:48:47] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[04:48:52] *** Quits: {HD} (~{HD}@102.165.16.121) (Ping timeout: 256 seconds)
[04:49:59] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[04:52:51] *** Leonarbro_ is now known as Leonarbro
[04:54:44] *** Joins: daddy (~ryan@hashbang/bdfl)
[04:55:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:55:40] <FunkyBob> optimant: yes, it has much "it just works" about it
[04:57:22] *** Joins: {HD} (~{HD}@37.19.197.241)
[05:00:20] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:02:41] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2987:cd73:626e:4325)
[05:02:56] <stewie925> good evening guys
[05:03:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[05:03:56] <stewie925> Im sorry it may not be related to python, but here's my question....
[05:04:14] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Ping timeout: 258 seconds)
[05:04:22] <stewie925> Im using Mac terminal and I am trying to install aws for my aws online training
[05:04:59] <stewie925> pip3 install awscli --upgrade
[05:05:23] <stewie925> oh let me put it in bpaste - brb
[05:07:43] <FunkyBob> is it having dependency conflicts?
[05:07:53] <FunkyBob> aws libs are shocking for that, i find
[05:09:49] <stewie925> HI FunkyBob
[05:10:12] <stewie925> FunkyBob - when packages get installed - do they go to /usr/local/bin or somewhere?
[05:10:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:12:54] <stewie925> here is the question - https://bpa.st/C6JQ
[05:13:33] *** Joins: Memory (~Wei@143.198.78.64)
[05:14:20] *** Joins: Cienisty2 (Cienisty@user/cienisty)
[05:14:20] *** Cienisty is now known as Guest2971
[05:14:20] *** Quits: Guest2971 (Cienisty@user/cienisty) (Killed (lead.libera.chat (Nickname regained by services)))
[05:14:20] *** Cienisty2 is now known as Cienisty
[05:14:51] *** Quits: blackop (~ocloud@user/blackop) (Ping timeout: 252 seconds)
[05:15:15] *** Joins: blackop (~ocloud@user/blackop)
[05:15:28] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[05:15:45] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[05:17:04] *** Joins: Atque (~Atque@user/atque)
[05:18:03] *** Joins: Thermoriax (Thermoriax@user/thermoriax)
[05:19:50] <nedbat> stewie925: what does this show?  echo $PATH
[05:22:15] <stewie925> HI nedbat:  it shows "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
[05:22:19] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[05:22:24] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Remote host closed the connection)
[05:22:31] *** Joins: Psi-Jack (psi-jack@user/psi-jack)
[05:22:39] <stewie925> I guess I have to add my Python3.8 path to it?
[05:23:01] <nedbat> stewie925: i'm not sure what the usual advice is, but you have to add $HOME/.local/bin to your path
[05:23:20] <nedbat> stewie925: because you installed with --user.    or use a virtualenv to avoid this problem.
[05:24:23] <stewie925> nedbat, let me try uninstalling it and just run "pip3 install awscli --upgrade" (wthout the --user) and see where it goes, that alright?
[05:24:35] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:24:40] *** Quits: lethu (~lethu@196.117.151.28) (Quit: Quit())
[05:25:31] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:25:41] <nedbat> stewie925: how do you feel about virtualenvs?
[05:26:10] <stewie925> oh, I guess i can use virtualenvs too :)
[05:26:29] <stewie925> but...
[05:26:58] <stewie925> if i STAy on the course now, you mentioned I have to add $HOME/.local/bin to my path, right?
[05:27:08] *** Parts: Psi-Jack (psi-jack@user/psi-jack) (Textual IRC Client: www.textualapp.com)
[05:27:28] *** Joins: baecedar (~baecedar@host-87-26-118-205.business.telecomitalia.it)
[05:27:37] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[05:27:53] <stewie925> nedbat: according to the aws documentation - https://docs.aws.amazon.com/cli/latest/userguide/install-macos.html#awscli-install-osx-path
[05:27:56] <KombuchaKip> Sometimes I upload more than one development release a day. My Python setuptools package version is 0.3.dev20210804.1, where I incremement the last number on a day like today if I want another release. Twine chokes on it according to PEP 440 (versioning) when I try to upload. How can I sanitize my version string to achieve what I am trying to do with major, minor, development release date, and an epoch number that increments on the same
[05:27:57] <KombuchaKip> day?
[05:28:03] *** Joins: Psi-Jack (psi-jack@user/psi-jack)
[05:28:05] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[05:28:38] <nedbat> stewie925: they also mention adding .local to your path
[05:29:45] <stewie925> oh, this line
[05:29:46] <stewie925> export PATH=~/.local/bin:$PATH
[05:29:58] <stewie925> but put it in my zshrc
[05:30:08] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:30:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:02] <SnoopJ> KombuchaKip, have you tried .postN at the end instead of .N?
[05:31:31] <KombuchaKip> SnoopJ: As in 0.3.dev20210804.post1? Let me give that a try.
[05:31:42] <SnoopJ> KombuchaKip, yea, that is I think how PEP 440 spells this
[05:31:58] *** Joins: jazzy3 (~jaziz@2600:380:8600:750f:a0eb:13de:7970:4f87)
[05:31:59] *** Parts: Psi-Jack (psi-jack@user/psi-jack) (Textual IRC Client: www.textualapp.com)
[05:32:28] *** Joins: rany (~rany@user/rany)
[05:32:42] <KombuchaKip> SnoopJ: Thanks. Let me give it a try.
[05:32:48] *** Joins: Psi-Jack (psi-jack@user/psi-jack)
[05:32:56] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: Client closed)
[05:34:17] *** Joins: vlm (~vlm@user/vlm)
[05:34:31] *** Quits: afidegnum (~user@102.176.94.157) (Ping timeout: 258 seconds)
[05:34:32] *** Joins: y1n (~y1n@84-115-64-147.wifi.dynamic.surfer.at)
[05:36:10] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[05:37:12] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 245 seconds)
[05:37:36] *** Quits: LiftLeft (~LiftLeft@191.96.150.113) (Ping timeout: 256 seconds)
[05:38:38] *** Parts: Psi-Jack (psi-jack@user/psi-jack) (Leaving)
[05:39:15] <baecedar> hi guys, can someone take a look at this: https://bpa.st/OVIA and tell me why do I get UnboundLocalError: local variable 'a_function2' referenced before assignment?
[05:40:46] <dre> baecedar, because you reference before assignment.. on line 4 change a_fucntion2 to self.a_function2
[05:41:02] *** Joins: califax- (~califax@user/califx)
[05:41:23] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[05:41:50] <dre> baecedar, also, on the topic, you should never really have if statements in a Test. look at things like pytest.mark.parametrize or etc. or simply just refactor your tests.
[05:41:50] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:42:13] <stewie925> hi nedbat:  thanks for your help!  stackoverflow suggested to run this command 'sudo pip install awscli --force-reinstall --upgrade' -  and now aws and awscli are now installed in /usr/local/bin
[05:42:16] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:42:57] *** Joins: emika9 (~emika@212.102.45.118)
[05:43:27] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[05:43:27] *** brabrax_ is now known as brabrax
[05:43:43] <KombuchaKip> SnoopJ: Seems to work.
[05:43:55] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:43:56] *** califax- is now known as califax
[05:44:26] *** Joins: rany_ (~rany@user/rany)
[05:44:53] *** Joins: rounda (~Guest19@c-73-242-143-254.hsd1.nm.comcast.net)
[05:45:05] <stewie925> it worked - but then I saw a comment that says "never" to use sudo with "pip install"... sigh
[05:45:28] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[05:45:39] <KombuchaKip> SnoopJ: Thanks again.
[05:45:39] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[05:45:51] <baecedar> dre, well yes, but a_fucntion2 is not part of the class
[05:46:06] *** Quits: emika (~emika@185.207.249.185) (Ping timeout: 272 seconds)
[05:46:06] *** emika9 is now known as emika
[05:46:26] <KombuchaKip> SnoopJ: Correction. It actually doesn't: /usr/lib/python3/dist-packages/setuptools/dist.py:475: UserWarning: The version specified ('0.3.dev20210804.post1') is an invalid
[05:47:33] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:48:17] <nedbat> stewie925: virtualenvs are good
[05:48:19] <dre> baecedar, general tip is that it looks really bad. can you post the actual code you're working on?
[05:48:56] <dre> stewie925, yes, generally never use sudo with pip. didn't you read the news: https://www.theregister.com/2021/08/02/in_brief_security/
[05:49:17] <stewie925> nedbat:  ok, I will try out the venv route -  thanks
[05:49:46] <rounda> hello, need some help with etree.ElementTree. I cannot add text to a subelement, even though I can pull that text from a json file using the correct identifier https://bpa.st/F5BA
[05:50:10] *** Joins: matsaman (~matsaman@user/matsaman)
[05:53:06] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[05:53:48] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:53:49] <rounda> I've also tried just calling the method directly instead of assigning it to a variable, still the same error
[05:53:57] <stewie925> its been a long day, thanks again, good night!
[05:54:39] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:a452:b856:6408:4425) (Read error: Connection reset by peer)
[05:55:37] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2987:cd73:626e:4325) (Quit: stewie925)
[05:57:49] <SnoopJ> KombuchaKip, oh, it's because .dev is coming before .post. Has to be the other way around if you give both.
[05:58:27] <KombuchaKip> SnoopJ: Hmm, so 0.3.post20210804.dev1 ? That looks weird though.
[05:59:11] <SnoopJ> KombuchaKip, I meant 0.3.post1.dev20210804 but both are valid I think. I don't know why it's sorted this way, but yea, kinda weird I guess.
[05:59:17] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:01:56] <SnoopJ> KombuchaKip, perhaps 0.3.dev20210804+1 ?
[06:03:34] *** Joins: bigRoo (~user@131.236.55.20)
[06:04:00] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[06:04:03] <KombuchaKip> SnoopJ: Yeah, I think that will work.
[06:04:41] <SnoopJ> KombuchaKip, you're allowed alpha there, too, so you could do +rev1 or +post1 or whatever you'd like, as long as it's stable
[06:05:01] * KombuchaKip nods
[06:07:02] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[06:07:09] <KombuchaKip> SnoopJ: I don't know if any of these releases are "stable". lol.
[06:07:13] <baecedar> dre, I can't argue that. It's part of larger code, I tried to summarize it here: https://bpa.st/AYZA
[06:08:49] *** Joins: SteelGreyhound (~SteelGrey@176.248.140.52)
[06:11:30] <auk> cluelessperson, so i got the Dockerfile to build using vanilla docker
[06:14:16] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[06:15:35] <rounda> *oof* variable issue
[06:16:18] <rounda> time for a break
[06:18:43] <KombuchaKip> SnoopJ: Ugh. Almost. I get to the upload and the REST endpoint Twine's talking to chokes with: '0.3.dev20210804+1' is an invalid value for Version. Error: Can't use PEP 440 local versions. See https://packaging.python.org/specifications/core-metadata for more information.
[06:18:44] *** Joins: pizdets (~pizdets@183.182.111.75)
[06:18:44] <dre> baecedar, you need to write the summary better, but anyway it just looks like a scope issue
[06:19:25] <dre> Bardon, just refactor and use return values like a normal person :P or literally share your code as is.
[06:19:43] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-b0eb-14a2-3229-7a8f.res6.spectrum.com) (Quit: jarthur_)
[06:20:23] <baecedar> dre, I tried to use global but it doesn't work
[06:20:40] *** Quits: yogoyo (~paddy@user/yogoyo) (Ping timeout: 256 seconds)
[06:21:20] <Lando-SpacePimp> wwwwwwwwww
[06:21:21] <dre> you're accessing a function from within another function. why not pass that function as an argument, and then return the result?
[06:21:22] *** Quits: y1n (~y1n@84-115-64-147.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[06:22:32] *** Joins: yogoyo (~paddy@user/yogoyo)
[06:23:13] <SnoopJ> KombuchaKip, oh, darn.
[06:23:31] <KombuchaKip> SnoopJ: Really obnoxious. I know.
[06:23:39] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b0eb-14a2-3229-7a8f.res6.spectrum.com)
[06:23:58] <SnoopJ> KombuchaKip, when I said "stable" I meant that the local segment is used for lex comparison, so you wouldn't want to change it between local versions of the same public version. But I guess it's irrelevant if you can't put them up at all :(
[06:24:29] <KombuchaKip> SnoopJ: Right. Yeah, I can't upload it.
[06:24:48] <SnoopJ> KombuchaKip, is adding a dedicated leading field for this increment out of the question?
[06:25:00] <SnoopJ> i.e. 0.3.x.dev20210804
[06:26:07] <KombuchaKip> SnoopJ: It's not out of the question, it just looks ugly. I mean it would be fine if the 0 (patch) just stayed 0 for the time being and wasn't a same day release epoch.
[06:26:20] *** Quits: JoeH_ (uid113241@id-113241.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[06:27:31] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[06:28:00] <baecedar> dre, just tried now: NameError: free variable '(the argument that is passed to the function)' referenced before assignment in enclosing scope
[06:28:33] <baecedar> that variable is the result of another previous function and so on..
[06:28:34] *** Quits: V1mV1m (~VimVim@85.191.6.5) (Ping timeout: 258 seconds)
[06:30:40] *** Joins: aifa[m] (~aifamatri@2001:470:69fc:105::d06e)
[06:30:46] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:30:57] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 245 seconds)
[06:34:03] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[06:34:31] *** Joins: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at)
[06:35:17] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Client Quit)
[06:35:37] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[06:37:46] *** Quits: rounda (~Guest19@c-73-242-143-254.hsd1.nm.comcast.net) (Quit: Client closed)
[06:37:46] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 258 seconds)
[06:39:56] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[06:40:43] <dre> baecedar, if you look at the original summary you gave me. it doesn't make sense. you're testing "if 1 > 0:" and "while functionName is True" == both of these will ALWAYS be true.
[06:41:13] <dre> I can't even make a simple proof of concept because i still don't know what you're doing
[06:41:25] <dre> either share the code or make a proof of concept that someone can run
[06:43:27] <baecedar> dre, sorry about that I didn't realize 1 > 0 lol..
[06:43:39] <dre> that's not the only issue
[06:44:18] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[06:44:31] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:46:12] <baecedar> dre, https://bpa.st/GHOQ, lines 214, 226, 241
[06:48:06] <dre> baecedar, and terrainflattening referenced before assignment?
[06:48:16] <baecedar> yes
[06:48:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:48:34] *** FinnElija is now known as Guest7218
[06:48:34] *** Quits: Guest7218 (~finn_elij@user/finn-elija/x-0085643) (Killed (erbium.libera.chat (Nickname regained by services)))
[06:48:34] *** finn_elija is now known as FinnElija
[06:49:59] *** Quits: bigRoo (~user@131.236.55.20) (Remote host closed the connection)
[06:50:42] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 272 seconds)
[06:53:30] *** Joins: LiftLeft (~LiftLeft@191.96.150.150)
[06:54:23] <dre> baecedar, remove the del statements
[06:54:49] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[06:55:05] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[06:55:49] <dre> you del terrainflattening, I could only imagine that you're deleting it on one loop iteration, then trying to access it again on another.
[06:56:15] <baecedar> dre, yes it works
[06:56:28] <dre> that being said, you should really try and break this up to more readable chunks so you can spot errors and make sure you're doing /what you think you're doing/
[06:57:11] <dre> while function() is True: function(); break; <-- what is this trying to do. for instance.
[06:57:40] <dre> if you want to just keep running it until it's false. you can just do "while function(): pass"
[06:59:10] <auk> any recommended way to update poetry pre-commit hooks? i have a .git/hooks/pre-commit which is referencing python3.7 (old/not installed here)
[06:59:42] <baecedar> dre, thanks for patience. I thought that del is deleting just the instance inside the clause, not also the above
[07:01:08] <baecedar> yes, about the while clause thats what I thought I do with break..
[07:02:48] <dre> baecedar, any time you have "function()" with the brackets, you are calling that function. thus you run this function twice, and then break out of the loop.
[07:03:59] <baecedar> I see, thank you for explaining these. I really appreciate it
[07:04:01] *** Joins: gggp_ (~gggp@60.10.194.46)
[07:04:18] <gggp_> is ast generated from grammar rules
[07:04:23] *** gggp_ is now known as gggp
[07:07:08] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[07:07:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:07:22] <SnoopJ> gggp, an AST is generated by a parser. Some parsers (like Python's) are described by grammars
[07:07:38] <gggp> parser or lexer?
[07:07:40] *** Quits: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289) (Ping timeout: 258 seconds)
[07:07:55] *** Joins: Guest17 (~Guest17@pool-100-7-38-116.rcmdva.fios.verizon.net)
[07:08:41] <baecedar> dre, again thanks for your help, time and patience. Learned something today. Thank you!
[07:10:13] <SnoopJ> gggp, a lexer converts a stream of characters into a sequence of tokens. They often come in pairs, the lexer turns input files into tokens, the parser turns tokens into syntax trees
[07:11:55] *** Joins: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289)
[07:12:21] <gggp> gotcha
[07:12:48] <Guest17> How would I limit the number of words per line in a text file?
[07:12:57] <Guest17> https://stackoverflow.com/questions/23687791/how-to-limit-the-number-of-characters-per-line-without-affecting-a-word
[07:13:09] <Guest17> That shows characters but I think words would be better
[07:13:59] <auk> apparently got what i needed using `poetry run pre-commit install`
[07:14:40] <Guest17> i guess padriac's answer would work?
[07:14:57] <gggp> SnoopJ, is yacc a parser
[07:15:50] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:17:12] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 245 seconds)
[07:17:38] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 258 seconds)
[07:19:24] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[07:20:14] <SnoopJ> gggp, yacc is a "parser generator," a program that eats grammars and spits out programs that parse them (i.e. parsers).
[07:20:59] *** Joins: dangrenier83 (~user@user/dangrenier83)
[07:21:21] *** Joins: MercilessDeth (~brad@136.49.61.2)
[07:21:54] *** Quits: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[07:23:19] *** Quits: dangrenier83 (~user@user/dangrenier83) (Quit: Leaving)
[07:24:50] *** Joins: dangrenier83 (~user@user/dangrenier83)
[07:25:45] <sybariten> hey hey
[07:27:04] <sybariten> I'm wondering how to concatenate something together. At the moment i'm refering to an object like this   routines.emission_1990.items()    however, the 1990 could be any of three different years, and they come from user input. So if 1990 is stored in the variable "year", how would i construct the same kind of reference ?
[07:27:05] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:27:57] <twomoon>  hello sybariten
[07:28:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[07:28:50] <sybariten> hey twomoon
[07:29:36] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[07:29:51] <Repiphany> routines.__getattribute__(f'year_{year}').items()
[07:30:21] <Repiphany> or getattr(routines, ...)
[07:30:58] <SnoopJ> `getattr(routines, f"year_{year}")` is a less magical spelling that doesn't worry too much about the implementation
[07:31:35] <SnoopJ> and a bonus! you can pass a default/sentinel value
[07:31:48] <sybariten> hm, i need to use getattr? I don't quite understand this
[07:32:07] <SnoopJ> sybariten, which part is confusing?
[07:32:27] <twomoon> heh i don't get it either
[07:32:35] <sybariten> well
[07:33:22] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Remote host closed the connection)
[07:33:27] <sybariten> in my naive thinking i thought i could almost do something like routines.emission_+years+.items()  but i understand that that might do nothing
[07:33:39] <gggp> SnoopJ, yet another compiler compiler , yacc ?
[07:34:00] <sybariten> But what is getattr, really?
[07:34:07] <Repiphany> Needing to access class attributes with arbitrary strings often might suggest you should actually be using a dict instead
[07:34:08] <twomoon> yes gggp that is what it's stands for
[07:34:33] <SnoopJ> sybariten, `getattr(obj, name)` is equivalent to `obj.name`, but you don't have to know exactly what name is when you write that code.
[07:34:37] *** Joins: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at)
[07:34:40] <gggp> compiler compiler is meta compiler
[07:34:50] <gggp> :)
[07:34:51] <SnoopJ> gggp, that is what the initialism stands for, yes.
[07:35:10] <sybariten> SnoopJ: aha, and i need to use backticks?
[07:35:19] <SnoopJ> sybariten, no, why do you think backticks are involved?
[07:35:36] <SnoopJ> oh, I used them. That's just to indicate which parts of my messages contain source code.
[07:35:49] <sybariten> SnoopJ: in my IRC client i see backticks in your suggestion there
[07:35:58] <SnoopJ> see above.
[07:36:13] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[07:36:57] <SnoopJ> sybariten, https://bpa.st/N6IQ
[07:37:25] <sybariten> oh, are we object orienting now
[07:37:51] <SnoopJ> routines couldn't possibly be not-an-object, all values in Python are objects
[07:38:04] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[07:38:44] <sybariten> aha ok. I wonder if i'm overcomplicating this thing that i'm doing. Thank you anyhow SnoopJ ! and Repiphany
[07:39:19] <SnoopJ> sybariten, tl;dr you do val = getattr(foo, bar) and you get the same thing as val = foo.bar
[07:39:23] <twomoon> what does it mean for an integer to be an object?
[07:39:31] <twomoon> does it mean it has attributes?
[07:39:47] <SnoopJ> twomoon, in Python, a particularly notable property is that it has no maximum size.
[07:40:04] <twomoon> oh so an integer in python is different from one in C
[07:40:08] <SnoopJ> Very, yes.
[07:40:34] <twomoon> so when everything is an object it means what more generally?
[07:40:52] <twomoon> like there is an expansive memory framework behind each thing?
[07:41:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[07:41:54] <SnoopJ> twomoon, how things look in memory is the runtime's problem. Python as a language unto itself has no such concept.
[07:42:19] <SnoopJ> Another way to say the same thing: you don't get any guarantees about how things are laid out in memory.
[07:42:40] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:42:47] <SnoopJ> At least not from the language. Each interpreter might offer its own guarantees, and they could all be valid Python implementations.
[07:42:58] <twomoon> is that what the most general meaning of "everything is an object" is?
[07:43:02] <sybariten> wait, i still don't get it
[07:43:19] <SnoopJ> twomoon, no
[07:44:04] <SnoopJ> twomoon, everything in the type system is connected to one common base, if you want to think about it in abstract terms.
[07:44:22] <twomoon> to me an object is something more than just bare memory. an object is something that has class functions attached to it that may let you do interesting things
[07:44:22] <SnoopJ> sybariten, which part is confusing to you?
[07:45:07] <Repiphany> int objects do have class functions fwiw
[07:45:22] <twomoon> ok, having one common base. i can see how that fits with "everything is an object"
[07:45:33] <sybariten> three big dictionaries are called either emission_1990 or emission_1995 or emission_1999 . If i have asked the user for input of a year and i'm storing this in "theYear", how do i refer to for instance emission_1990.items() ?
[07:45:36] <SnoopJ> They're basically the same statements
[07:45:37] <Repiphany> They're not particularly interesting for most purposes
[07:46:05] <SnoopJ> sybariten, dictionaries? That doesn't sound like what you were asking about before. You should show us some source code.
[07:46:14] <sybariten> hmmm ok
[07:46:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:46:30] *** Joins: srhm (~ascii@user/srhm)
[07:47:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[07:47:53] <Repiphany> sybariten: It would seem like you could instead have `big_dictionaries = {'emission_1990': { ... }, 'emission_1995': { ... }, ... }`
[07:48:06] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[07:48:20] <SnoopJ> yea, a dictionary-of-dictionaries might be a better fit for what you're doing, depending on what it looks like.
[07:49:05] <SnoopJ> twomoon, https://docs.python.org/3/glossary.html#term-object
[07:51:27] <sybariten> BBL people, gonna watch _skateboarding_ live on TV for the first time in my life ..... thanks so far
[07:52:42] <twomoon> well, an integer in C has state and defined behavior.
[07:52:50] <twomoon> maybe the value isn't the state though
[07:53:24] <twomoon> i think what i said earlier about having a more expansive memory framework behind it is what makes something an object
[07:53:57] <SnoopJ> twomoon, what is the behavior?
[07:53:57] <twomoon> i think that's  good general definition without delving into a discussion about object orientedness
[07:54:20] <SnoopJ> You can take any definition you like. If you take that one, you will be very confused when talking to people who think you mean Python's definition.
[07:54:37] <twomoon> the behavior of an integer in C is that it's defined by a certain number of bits and will overflow if you are not careful and don't understand it
[07:54:51] <Repiphany> `n = int('10011101011', base = 2); print(n, n.bit_length())`
[07:55:06] <twomoon> ok snoopj, i don't think i quite get it yet. that's ok
[07:55:09] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[07:55:30] <SnoopJ> twomoon, hmm, does that mean that every object in C is an integer? I believe that describes many of its types.
[07:55:42] <SnoopJ> every value*
[07:55:50] <twomoon> no, it does not
[07:56:09] <twomoon> can objects exist in non-OO languages?
[07:56:31] <twomoon> if the answer is no, then i can't say anything in C is an object
[07:56:38] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[07:56:44] <SnoopJ> I don't know, your definitions are entirely unfamiliar to me.
[07:57:41] <twomoon> i think the answer is probably no
[07:58:41] <twomoon> i think that if something is to be an object, it 1) has to exist within the framework of an object-oriented language and 2) has to have some extra sauce like no maximum value + class functions that can do some cool things
[07:58:53] <twomoon> but, i don't really know
[07:59:17] <Repiphany> "cool things" seems like an arbitrary thing to include in a definition like that
[08:00:21] <Repiphany> You can subclass int and do things with it just like any other class
[08:00:25] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[08:00:42] <Repiphany> bool is a subclass of int
[08:00:53] <twomoon> btw, i don't have any definitions. i'm asking. i'm not proposing definitions. i'm theorizing what is the right way to think about it. i'm not insisting
[08:01:20] <twomoon> hypothesizing is probably a better word
[08:01:32] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[08:01:40] <twomoon> good to know Repiphany
[08:01:45] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[08:01:55] <SnoopJ> If you decide you want to know the definitions as Python has them, the glossary is frequently helpful.
[08:01:56] <Repiphany> True + True == 2 because addition isn't defined on bools but it resolves to how ints are added
[08:02:00] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Client Quit)
[08:02:40] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[08:02:49] <twomoon> sir, i'm trying to think in more general terms than what python's glossary has to offer
[08:03:04] <SnoopJ> And the rest of the official documentation, of course. Objects are discussed in great detail in Section 3 of the Language Reference: https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
[08:03:25] <twomoon> i'm interested in what it means to you when ppl say "everything is an obj in python"
[08:03:39] <twomoon> in the broadest sense
[08:03:42] <SnoopJ> It means the things in that documentation, mostly.
[08:03:43] <twomoon> but anyways i kind of have a picture now
[08:03:44] *** Quits: Gudddu (~Guddu@67.73.235.228) (Read error: Connection reset by peer)
[08:04:18] <SnoopJ> I don't know if it has any more profound meaning to me than "if nothing else, I know every value is an instance of the type `object`"
[08:04:40] <twomoon> ok, what does having "defined behavior" mean to you? because that to me is a vague statement. lots of things have well defined behavior
[08:04:51] <twomoon> lots of statements in the docs are vague
[08:05:20] <twomoon> ok thanks SnoopJ , that is a solid general statement to make about the matter
[08:05:23] <SnoopJ> twomoon, there are a lot of behaviors described on that page.
[08:05:40] <twomoon> but does an integer in C not have defined behavior?
[08:05:57] <SnoopJ> This is why I asked you what said behavior is
[08:06:06] <twomoon> i wouldn't know though
[08:06:13] <Repiphany> The way that a lot of builtin functions work is by calling the corresponding class method of an object
[08:06:24] <SnoopJ> twomoon, I would say they don't have behavior.
[08:06:25] <twomoon> i'm just trying to point out that the def is vague because it applies to even things in non-OO languages
[08:06:32] <Repiphany> str(a) => a.__str__(), or len(a) => a.__len__()
[08:06:42] <twomoon> ok, i see
[08:06:57] <SnoopJ> twomoon, you seem to be switching between "pointing out" and inquiry, I'm having trouble keeping track.
[08:06:57] <Repiphany> If you try to call len(10) you'll get an error because __len__ isn't defined for ints
[08:07:20] *** Quits: sreve (~quassel@p4ff44f8b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[08:07:22] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:07:32] <twomoon> it's all inquiry. it's that you flipped the script on me by expecting me to know C and then i tried to show that i didn't know C but you still took it as "he knows C"
[08:07:51] <Repiphany> but you could conceive of an object that has all the properties of int plus some appropriate definition of length
[08:07:59] <twomoon> i don't know C and i don't even know how to think about C
[08:08:06] <SnoopJ> twomoon, you seem to be handling my side of the argument well, I'll leave you to both of them.
[08:08:13] <twomoon> ok thanks
[08:08:20] <twomoon> well you got me to understand things a bit better i guess
[08:08:35] <twomoon> this is good stuff , thanks Repiphany
[08:08:58] <Repiphany> Look at dir(int) and all of the functions that are associated with it
[08:09:40] <Repiphany> Those are what defines what even happens when you do something like `4 + 5 * 10`
[08:10:13] <twomoon> yeah i see ....there are a lot of attributes in there
[08:11:48] <twomoon> the way i think of it now is that when you have values that aren't objects, like in C (altho i'm not too familiar with it), the behavior is well-defined but if you don't completely understand the behavior you can get into trouble quickly
[08:12:04] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[08:12:19] <SnoopJ> It is well-defined in Python, too.
[08:12:20] <twomoon> but the well-defined behavior of values-as-objects have more built-in protection for people who may not fully understand everything
[08:12:39] <twomoon> it's well-defined in a way so as to protect the user more than in other langauges
[08:12:44] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[08:13:21] <Repiphany> I don't think python has the concept of undefined behaviour where literally anything could happen
[08:13:26] *** Quits: cbasah (~armycook2@202.185.71.229) (Remote host closed the connection)
[08:13:59] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Ping timeout: 258 seconds)
[08:14:26] <twomoon> my take on C is that there isn't undefined behavior if you one understands everything about how the system works
[08:14:36] <twomoon> but that having a full understanding can be quite difficult at times
[08:15:19] <SnoopJ> twomoon, not everything about how the system works is actually defined. That is what undefined behavior means.
[08:15:35] <SnoopJ> (and why it's bad; when you hit UB, the compiler can do _literally anything_ and not violate the specification)
[08:15:52] <twomoon> oh so things aren't that clearly defined
[08:16:15] <twomoon> what's UB? upper bound?
[08:16:22] <SnoopJ> undefined behavior
[08:16:51] <twomoon> oh right
[08:17:04] <twomoon> well now i sort of understand the essence of C better
[08:19:30] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a)
[08:19:53] *** Quits: kolcon (~kolcon@v.kolouch.org) (Read error: No route to host)
[08:20:00] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:20:12] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:20:19] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[08:20:24] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:20:42] *** Joins: rany (~rany@user/rany)
[08:21:47] *** Quits: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[08:23:30] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 240 seconds)
[08:27:03] *** Quits: baecedar (~baecedar@host-87-26-118-205.business.telecomitalia.it) (Quit: Client closed)
[08:27:13] *** Joins: tijuco (~tijuco@user/tijuco)
[08:27:28] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[08:27:34] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[08:29:42] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a) (Quit: Leaving)
[08:30:12] *** Joins: rany_ (~rany@user/rany)
[08:31:14] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a)
[08:32:18] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[08:33:43] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:34:24] *** Joins: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at)
[08:35:12] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:02] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Ping timeout: 252 seconds)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:36:36] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:37:07] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:37:57] *** Joins: pan (~quassel@pankid.club)
[08:40:37] *** Quits: alxndr_ (~alexander@ybti.net) (Remote host closed the connection)
[08:40:58] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 240 seconds)
[08:42:05] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:42:31] *** Joins: alxndr (~alexander@ybti.net)
[08:43:20] *** Joins: matsaman (~matsaman@user/matsaman)
[08:48:20] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:50:03] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a) (Quit: Leaving)
[08:52:00] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[08:52:50] *** Joins: astrocat (~astrocat@112.134.11.28)
[08:56:11] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:57:27] *** Quits: Peng (~mnordhoff@fin.mattnordhoff.net) (Quit: This is on purpose!)
[08:57:39] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[08:58:33] *** Joins: djapo (~archangel@user/djapo)
[08:59:13] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6) (Ping timeout: 258 seconds)
[09:03:30] *** Quits: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net) (Ping timeout: 276 seconds)
[09:05:31] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[09:08:21] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[09:09:39] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[09:09:58] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:10:20] *** Joins: srhm (~ascii@user/srhm)
[09:10:24] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6)
[09:10:46] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:11:34] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[09:14:42] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6) (Ping timeout: 240 seconds)
[09:15:04] <dre> how do i get groups from a regex match in python?
[09:15:22] <dre> like "from:(\d{4}-\d{2}-\d{2})\sto:(\d{4}-\d{2}-\d{2})" - i want to just get two groups
[09:16:01] <TML> match.groups()
[09:16:08] <dale> I'm curious on #python's opinion on how common it is for a base class to define a __new__ method that chooses which subclass instance to instantiate based on the constructor args?  I have done this almost never, but maybe I'm out of the loop.
[09:17:07] <FunkyBob> dale: I find factory classmethods a cleaner and more sane approach
[09:17:19] <FunkyBob> and __new__ for when you don't have a choice
[09:17:33] <dale> Now that you mention it, I use __new__ pretty seldom, period.
[09:17:47] <TML> dre: re.match('"from:(\d{4}-\d{2}-\d{2})\sto:(\d{4}-\d{2}-\d{2})"', '"from:2021-08-04 to:2021-08-05"').groups()
[09:18:03] <dale> When I define __new__ at all, it's usually on a metaclass, which is usually pretty rarefied territory to begin with.
[09:19:21] <dre> TML, cheers. I thought it might've been something like that but i forgot about the groups() - is it something like how the first group is the whole string or something?
[09:21:19] <dre> read the docs
[09:21:20] <dre> cheers.
[09:22:11] <TML> dre: No, that would be match.string
[09:22:21] *** Quits: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[09:22:59] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 258 seconds)
[09:25:47] *** Quits: llua (~llua@zsh/developer/llua) (Quit: <Rudolph> shell code is what greycat reads to kids when he tucks them in)
[09:25:57] *** Joins: reumeth (~reumeth@user/reumeth)
[09:26:22] *** Joins: justyb11 (~justyb@2601:483:500:3ea:4dc4:f6e0:8f19:7ed8)
[09:26:25] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6)
[09:29:10] *** Quits: dangrenier83 (~user@user/dangrenier83) (Quit: Leaving)
[09:29:34] *** Joins: gtristan (~tristan@110.11.238.160)
[09:30:26] <SnoopJ> dale, __new__ is very high-magic
[09:30:30] <gtristan> Hi... is there a handy way to check if an absolute path (i.e. os.path.abspath() was used) is a child of another absolute path ?
[09:30:41] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:30:42] <yuesbeez> Is it possible to use asyncio to iterate through a list and start multiple threads to process chunks of the list? Any guidance on how to do this if possible would be great
[09:31:02] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6) (Ping timeout: 258 seconds)
[09:31:11] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:31:12] <gtristan> E.g., I would like to know if "/foo/bar" is a file that would be inside "/foo", but also know if "/foo/bar/baz" is inside "/foo"
[09:31:54] *** Joins: llua (~llua@zsh/developer/llua)
[09:32:02] *** Quits: rwb (~augh@theguntretort.com) (Remote host closed the connection)
[09:32:09] <gtristan> Maybe the best would be to use pathlib and split the absolute paths into "parts", and check that the leading list components are a match ?
[09:32:10] <SnoopJ> gtristan, if you're using pathlib.Path, you can resolve both and see if the .parts of the shorter one is a subsequence of the longer one.
[09:32:29] *** Joins: rwb (~augh@theguntretort.com)
[09:32:37] <gtristan> SnoopJ, right :)
[09:32:49] <bookworm> not that this is actually a question you can answer... bind mounts exist
[09:33:02] <SnoopJ> graingert, I could've sworn that I solved this recently but I can't see to find the sample in my playground :(
[09:33:10] <bookworm> so folders can be the same having a completely different path
[09:33:55] <gtristan> bookworm, I suppose I would prefer realpath over abspath then ? or does this only cover symlinks, does abspath also cover symlinks ?
[09:34:00] <SnoopJ> graingert, ah, not quite the same problem, but this is the code I was thinking of: https://bpa.st/54QQ
[09:34:09] <gtristan> I'm happy to only handle symlinks for this use case
[09:34:16] *** Joins: derelict (~derelict@user/derelict)
[09:34:26] <bookworm> gtristan: let's backtrack... why do you want to do this? Please don't say security
[09:34:52] <gtristan> (i.e. I expect these files to be part of a logical "project" and I don't expect them to be distributed across filesystems)
[09:35:07] *** Joins: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at)
[09:35:15] <SnoopJ> ideally you let `pathlib` worry about how to talk to `os`, imo
[09:35:17] <gtristan> bookworm, Only to detect cyclic references of yaml files which can refer to eachother
[09:37:20] <bookworm> so https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.is_relative_to then?
[09:37:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:37:58] <SnoopJ> bookworm, neither of /foo/ or /foo/bar/ is relative, but one is still contained within the other.
[09:38:33] <bookworm> SnoopJ: it's the exact case as the example code in the linked docs no?
[09:38:53] <SnoopJ> hmm
[09:39:18] <gtristan> The manhandling of the `parts` list seems good, just havent worked much with pathlib... so if I use a concrete path `Path` object and instantiate it... will that create a parts that is a canonical path all by itself ?
[09:39:30] <bookworm> no
[09:39:39] <bookworm> but you can make it absolute
[09:39:53] <gtristan> ah, resolve()
[09:39:57] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[09:40:06] <bookworm> and as you aren't talking security and the worst a user can do is shoot yourself in the foot you should be fine
[09:40:16] <dale> SnoopJ: OK, so far all responses are in agreement, then. :)
[09:40:47] *** Joins: dvx (~dvx@185.63.97.64)
[09:40:48] <SnoopJ> graingert, I think you want is_relative_to() as they say, I misunderstood what it does.
[09:41:37] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:42:02] <gtristan> SnoopJ, is that for me ?
[09:42:08] <SnoopJ> gtristan, yes, sorry.
[09:42:22] <gtristan> The example in the docs seem to indicate that would work yeah
[09:42:54] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:43:27] <bookworm> (assuming you first resolve it, not sure what it does for relative paths)
[09:43:43] <SnoopJ> it would give a false positive for this task: `Path("/foo/bar/../..").is_relative_to("/foo/bar")` is True
[09:44:01] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ad61:9037:70aa:50c7)
[09:44:15] <SnoopJ> it may do exactly the subsequence thing :)
[09:44:42] <bookworm> SnoopJ: resolve it...
[09:44:47] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:44:58] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[09:45:04] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:45:06] <SnoopJ> bookworm, right, you can just avoid the case where it's wrong with a resolve()
[09:45:30] *** Joins: eyepeetee (~aa@user/eyepeetee)
[09:46:16] <eyepeetee> hi, how can i store a function in a variable if i only know the name of the function?
[09:46:30] <SnoopJ> eyepeetee, `newname = myfunc`
[09:46:34] *** Parts: Guest17 (~Guest17@pool-100-7-38-116.rcmdva.fios.verizon.net) ()
[09:46:49] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Client Quit)
[09:46:59] <eyepeetee> SnoopJ: i mean i only have the function name stored in a variable, so for example
[09:47:03] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 276 seconds)
[09:47:12] <eyepeetee> i have a module: example_module
[09:47:28] <eyepeetee> import example_module as em
[09:47:35] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:47:37] <eyepeetee> and if i do dir(em) i can get the list of function names
[09:47:57] <eyepeetee> but i want to, from those function names, store those functions in a dict
[09:48:04] <eyepeetee> is that possible?
[09:48:17] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ad61:9037:70aa:50c7) (Ping timeout: 258 seconds)
[09:49:18] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 272 seconds)
[09:49:24] <gtristan> Yup, thanks... Path.resolve() + Path.is_relative_to() does this nicely
[09:49:30] <gtristan> tests pass :)
[09:49:40] <dale> eyepeetee: If you have a module em and a name of a function in that module, you can just getattr(em, the_func_name_variable) to get the function.
[09:49:52] <eyepeetee> thank you very much dale
[09:50:09] <dale> eyepeetee: em.__dict__ is the module's dict, so you should be able to do em.__dict__[the_func_name_variable] as well.
[09:50:13] <SnoopJ> you can use inspect.getmembers() with a suitable predicate for what you want. the lazy spelling is `inspect.getmembers(mymod, predicate=callable)`
[09:50:24] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[09:50:31] <dale> eyepeetee: That might break with C modules, I don't remember.
[09:51:04] <eyepeetee> omg, dale, that is amazing
[09:51:06] <dale> eyepeetee: You can also do my_module_dict = {name: getattr(em, name) for name in dir(em)} to make your own dict of name -> object in the module, I guess.  Not sure why I'd do that, but there it is.
[09:51:09] <SnoopJ> that gets anything that is callable, though, so it includes classes etc. I can never remember exactly the spelling for "a function and only a function"
[09:51:29] <jinsun> inspect.isfunction ?
[09:51:31] <eyepeetee> SnoopJ: i was attempting to do it with inspect before i asked but hadn't quite figured it out yet D
[09:51:32] <SnoopJ> oh right, inspect can do it too
[09:51:43] <SnoopJ> yea, `inspect.getmembers(mymod, predicate=inspect.isfunction)` will do it
[09:52:19] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[09:52:27] <gcbirzan> that isn't just for functions, though
[09:52:38] <gcbirzan> actually, won't that be true for methods too?
[09:52:40] *** Joins: et (~et@user/et)
[09:52:42] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 240 seconds)
[09:52:46] <eyepeetee> dale: in regards to reasong why anybody would manipulate it around like this, i think it just makes development more fluid to have so many options between data structures and relations and so on
[09:53:09] <eyepeetee> right now i am just trying to automate documentation for some libraries i've put together though
[09:53:19] <SnoopJ> gcbirzan, it's True on the class, False on the instance
[09:53:21] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[09:53:26] *** Joins: iflema (~ian@user/iflema)
[09:53:45] <dale> eyepeetee: I purposely didn't ask why you'd want to do this. ;)
[09:54:15] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[09:54:24] <eyepeetee> :) love u guys
[09:54:32] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[09:54:54] <dale> eyepeetee: Documentation generation is one of the (probably few) good reasons for doing this IMHO.
[09:55:15] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:55:51] <SnoopJ> Preferably in a dedicated tool whose maintenance is someone else's problem
[09:57:26] <dale> I was going to say, maybe just use Sphinx like everyone else.  Or maybe Epydoc is still maintained.
[10:00:06] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ad61:9037:70aa:50c7)
[10:00:29] *** Quits: japh (~scp1@user/japh) (Ping timeout: 258 seconds)
[10:01:47] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[10:01:57] *** Quits: y1n (~y1n@84-115-64-64.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[10:06:59] *** Joins: upsala (~zcb@185.213.155.160)
[10:10:25] *** Joins: debayer (~ins0mni4c@2603-8000-cf00-0010-edbe-2a5a-b353-8e2e.res6.spectrum.com)
[10:12:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[10:12:36] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[10:12:44] *** Quits: emika (~emika@212.102.45.118) (Ping timeout: 272 seconds)
[10:12:50] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:13:00] *** Joins: srhm (~ascii@user/srhm)
[10:13:39] *** Joins: emika (~emika@83.136.182.189)
[10:19:49] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[10:21:44] <graingert> SnoopJ: Eh?
[10:22:15] <SnoopJ> graingert, wrong nick
[10:22:25] *** Joins: haroon (~haroon@gw.wmd.de)
[10:24:04] *** Joins: sandeepk (~sandeepk@223.130.30.29)
[10:27:08] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[10:27:33] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:28:12] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[10:30:08] *** Joins: jdmark (~jdmark@67.8.137.130)
[10:33:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[10:33:50] *** Joins: srhm (~ascii@user/srhm)
[10:34:11] *** Joins: cation (cation@user/cation)
[10:35:05] *** Joins: ihristov (~ihristov@78.130.205.229)
[10:35:39] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[10:36:07] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[10:40:11] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[10:42:33] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:42:41] *** Joins: Quaking (~Quaking@c-98-223-238-153.hsd1.in.comcast.net)
[10:42:43] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[10:44:48] *** Quits: zamba (~marius@5.226.162.54) (Read error: Connection reset by peer)
[10:45:52] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[10:46:25] *** Joins: seednode (~seednode@user/seednode)
[10:46:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:49:14] *** Quits: Quaking (~Quaking@c-98-223-238-153.hsd1.in.comcast.net) (Ping timeout: 258 seconds)
[10:52:57] *** Joins: Tas-sos (~Tas-sos@78-22-148.adsl.cyta.gr)
[10:53:00] *** Quits: Tas-sos (~Tas-sos@78-22-148.adsl.cyta.gr) (Client Quit)
[10:54:34] *** Joins: gusto (~Augustus@109.255.100.54)
[10:54:37] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 250 seconds)
[10:55:04] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:55:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[10:56:19] *** Lord_of_Life_ is now known as Lord_of_Life
[10:56:32] *** jazzy3 is now known as jazy
[10:56:35] *** jazy is now known as jazzy
[10:58:52] *** Joins: emerent_ (~quassel@p200300cd57058c69ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:58:52] *** Quits: emerent (~quassel@p200300cd57058c27ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (mercury.libera.chat (Nickname regained by services)))
[10:58:52] *** emerent_ is now known as emerent
[10:59:35] *** Quits: audiocat (~audio@2603-8081-1800-00ad-b6c7-a95d-47d6-54c5.res6.spectrum.com) (Ping timeout: 258 seconds)
[11:00:17] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[11:03:53] *** Quits: poorboy (~poorboy@104.131.46.87) (Read error: Connection reset by peer)
[11:04:28] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:06:02] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[11:06:06] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:06:40] *** Joins: VaniaPy (~VaniaPy@46.12.81.49.dsl.dyn.forthnet.gr)
[11:07:02] *** Parts: VaniaPy (~VaniaPy@46.12.81.49.dsl.dyn.forthnet.gr) ()
[11:07:21] *** Joins: rendar (~rendar@user/rendar)
[11:08:00] *** Joins: manti7 (~manti7@176.10.104.94)
[11:08:29] *** Joins: poorboy (~poorboy@104.131.46.87)
[11:10:46] <cluelessperson> hi
[11:13:03] *** Joins: lethu (~lethu@196.117.151.28)
[11:13:33] *** Joins: palasso (~palasso@user/palasso)
[11:13:48] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[11:15:36] *** Joins: bigRoo (~user@1.145.115.232)
[11:16:39] *** Quits: lethu (~lethu@196.117.151.28) (Client Quit)
[11:16:45] *** Joins: zamba (~marius@5.226.162.54)
[11:17:10] *** Joins: audiocat (~audio@2603-8081-1800-00ad-1637-b246-ee07-adc7.res6.spectrum.com)
[11:18:53] *** Quits: LiftLeft (~LiftLeft@191.96.150.150) (Ping timeout: 250 seconds)
[11:21:21] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ad61:9037:70aa:50c7) (Quit: WeeChat 3.2)
[11:27:11] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[11:29:23] *** Joins: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de)
[11:30:15] *** Quits: audiocat (~audio@2603-8081-1800-00ad-1637-b246-ee07-adc7.res6.spectrum.com) (Ping timeout: 258 seconds)
[11:30:38] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[11:30:57] *** Joins: chele (~chele@user/chele)
[11:31:19] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:33:52] *** Quits: bigRoo (~user@1.145.115.232) (Remote host closed the connection)
[11:35:13] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[11:36:04] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[11:36:21] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[11:38:46] *** Joins: GOD (~mad@user/god)
[11:40:46] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:42:48] *** Joins: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks)
[11:44:52] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[11:45:27] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:46:13] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[11:47:44] *** Joins: ironsoba (~z@user/ironsoba)
[11:48:28] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Remote host closed the connection)
[11:50:34] *** Quits: eyepeetee (~aa@user/eyepeetee) (Ping timeout: 258 seconds)
[11:54:16] *** Quits: P1ro_ (~quassel@user/p1ro) (Quit: No Ping reply in 180 seconds.)
[11:55:51] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[11:56:58] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[11:57:19] *** Joins: gstaniak (~gstaniak@2.31.125.88)
[12:00:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:43] *** Joins: kosh (~kosh@user/kosh)
[12:00:54] *** Joins: sri19 (~Srain@59-121-210-87.ftth.glasoperator.nl)
[12:01:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[12:01:16] *** Joins: P1ro (~quassel@user/p1ro)
[12:02:28] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[12:02:46] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[12:02:50] *** Joins: srhm (~ascii@user/srhm)
[12:03:10] *** Joins: spithash (~spithash@user/spithash)
[12:04:01] *** Joins: frost (~frost@59.71.241.179)
[12:05:47] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[12:06:19] *** Quits: sri19 (~Srain@59-121-210-87.ftth.glasoperator.nl) (Remote host closed the connection)
[12:06:21] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[12:11:35] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[12:13:11] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[12:13:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:14:08] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:14:21] *** Quits: debayer (~ins0mni4c@2603-8000-cf00-0010-edbe-2a5a-b353-8e2e.res6.spectrum.com) (Quit: Client closed)
[12:14:30] *** Joins: haroon (~haroon@gw.wmd.de)
[12:18:56] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[12:19:05] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:20:03] *** Joins: sri19 (~quassel@59-121-210-87.ftth.glasoperator.nl)
[12:21:01] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[12:21:06] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:21:41] *** Joins: upsala (~zcb@185.213.155.160)
[12:22:47] *** Quits: sri19 (~quassel@59-121-210-87.ftth.glasoperator.nl) (Client Quit)
[12:23:03] *** Joins: sri19 (~quassel@59-121-210-87.ftth.glasoperator.nl)
[12:23:03] *** Quits: sri19 (~quassel@59-121-210-87.ftth.glasoperator.nl) (Client Quit)
[12:23:28] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[12:23:50] *** Joins: srhm (~ascii@user/srhm)
[12:25:06] *** Joins: sri19 (uid477846@id-477846.charlton.irccloud.com)
[12:26:34] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[12:30:17] *** Joins: shad (~shad@user/shad)
[12:31:46] *** Quits: gstaniak (~gstaniak@2.31.125.88) (Ping timeout: 240 seconds)
[12:35:53] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-193d-7426-34d7-d076.res6.spectrum.com)
[12:36:23] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:08] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[12:38:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:34] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[12:40:55] <xrogaan> So, I typically use `x = a if a else b`. Today I read some old code I wrote and noticed that I used `x = a or b`. Maybe I was tired when I wrote that, however my question is: since when can we use the `or` keyword that way?
[12:41:26] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:41:33] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 258 seconds)
[12:41:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[12:42:39] <Repiphany> Think it's been that way since python2 days at least
[12:42:56] <xrogaan> Why didn't I picked that up earlier?
[12:43:07] *** Quits: ihristov (~ihristov@78.130.205.229) (Quit: Connection closed)
[12:43:08] <Repiphany> Mostly you don't notice it because you mainly only care about the boolean value of the expression
[12:44:01] <Repiphany> `x = 5 and False and 3` is also similar but decidedly less useful
[12:44:11] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[12:44:17] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[12:44:40] *** Joins: srhm (~ascii@user/srhm)
[12:44:41] <Repiphany> Stops on the first falsey value or returns the last if there is none
[12:46:55] *** Joins: ice9 (~ice9@user/ice9)
[12:47:25] <xrogaan> I mean, I just properly realized now that the `a or b` works as well as the inline if
[12:48:27] <Repiphany> Yes, `if` is only needed for more complicated conditions
[12:50:41] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:54:40] *** Quits: securethemews (~securethe@2a00:23c4:1e9b:2f00::1) (Quit: Leaving)
[12:56:19] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[12:56:37] <gitesh> How is control passed to a function if a function is an object?
[12:57:02] <Repiphany> control what
[12:57:14] <gitesh> Flow of control
[12:57:15] <xrogaan> everything is an object
[12:58:08] <xrogaan> functions are objects of type "function".
[12:58:25] *** Quits: dre (~dre@2001:8003:c932:c301:ceba:8234:4850:924e) (Ping timeout: 258 seconds)
[12:58:45] <KirkMcDonald> gitesh: To call a function is an operator applied to an object.
[12:58:45] <Julian> gitesh: what contradiction is there in functions being objects?
[12:58:46] <gitesh> It's weird it's value is code
[12:59:04] <Julian> gitesh: you're mixing mental models
[12:59:34] <Repiphany> If you call a function, the code following it won't run until that function finishes running its code and returns something
[12:59:36] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[12:59:43] <whatsupdoc> Hi, can someone explain what this code does?        out = (out << 1)^(n & 1)
[12:59:52] <Julian> gitesh: ultimately "control" boils down to "executing some instructions". functions are python objects with data that produces those instructions, and calling them is implemented by executing those instructions
[12:59:57] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[13:00:09] <whatsupdoc> out<<1 shifts all the bits in out by 1?
[13:00:22] <Luyin> whatsupdoc: whatever that's supposed to do, it's the most unreadable thing in python I've ever seen XD
[13:00:28] <KirkMcDonald> whatsupdoc: Shifts to the left, yes.
[13:00:44] *** Joins: afidegnum (~user@102.176.94.157)
[13:01:06] <whatsupdoc> is & = and gate?
[13:01:20] <xrogaan> whatsupdoc: https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types
[13:01:26] <KirkMcDonald> whatsupdoc: And then `n & 1` masks out the bottom bit of n, and that gets XORed with the bottom bit of `out << 1`, which we know will be zero.
[13:02:12] <whatsupdoc> isn't n & 1 the same thing as n?
[13:02:19] <KirkMcDonald> No.
[13:02:20] <whatsupdoc> so what's the point of & 1?
[13:02:26] <afidegnum> how do i either by loop or mapping fill in the contents of object `a` into `cypher` object? a consists of dynamic fields https://dpaste.org/Zadt
[13:02:26] <gitesh> Julian: why did they do that that way?
[13:02:36] <whatsupdoc> if you and anything with 1, you get itself, don't you?
[13:02:51] <KirkMcDonald> whatsupdoc: `n & 1` is either going to be 0 or 1, depending on whether n is odd or even.
[13:02:57] <Julian> gitesh: As opposed to what other way?
[13:03:01] <KirkMcDonald> Rather, even or odd.
[13:03:30] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[13:03:58] <gitesh> Julian: why did they stored instructions as data within function object?
[13:03:59] <Repiphany> `for i in range(20): print(f'{i:b} -> {(i << 1)^(i & 1):b}')`
[13:04:14] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[13:04:37] <Julian> gitesh: Because that's how you implement a programming language :)
[13:04:48] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:04:57] <gitesh> Julian: did function got it's own frame because it's an object?
[13:05:08] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:05:09] <KirkMcDonald> gitesh: Strictly speaking, the instructions are data within a code object, and the function object refers to a code object.
[13:05:19] <Julian> gitesh: functions have their own frame on the stack yes, but not *because* they're objects
[13:05:30] *** Joins: srhm (~ascii@user/srhm)
[13:05:33] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:54] <Julian> gitesh: are you familiar with another language you're comparing to?
[13:06:04] <KirkMcDonald> (Because multiple function objects can refer to the same code object.)
[13:06:37] <gitesh> Julian: no
[13:06:40] <afidegnum> any insight ?
[13:06:59] <KirkMcDonald> gitesh: I'd say most languages have some analogous notion.
[13:07:02] *** Quits: astrocat (~astrocat@112.134.11.28) (Remote host closed the connection)
[13:07:08] <Julian> gitesh: all languages (and all callables within them) essentially work this way -- though "instructions" may mean "bytecode" on a VM, or machine-native code in a fully compiled language
[13:07:18] <whatsupdoc> why does n & 1 return if it's even or odd?
[13:07:23] *** Joins: astrocat (~astrocat@112.134.11.28)
[13:07:31] <rendar> what about logging with asyncio? :(
[13:07:33] <KirkMcDonald> whatsupdoc: It's masking out the bottom bit.
[13:08:26] <Widdershins> <gitesh> why did they stored instructions as data within function object? -- how else would you propose a computer store its instructions, if not as data
[13:08:41] <KirkMcDonald> In a sense that's what a computer *is*.
[13:08:57] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[13:08:58] <Widdershins> if instructions weren't data we couldn't make new programs
[13:09:03] <whatsupdoc> if n= 13, then in binary 11001 & 00001 = 00001?
[13:09:16] <whatsupdoc> 1101 lol
[13:09:18] <Widdershins> whatsupdoc: yes
[13:09:23] <whatsupdoc> but point remains
[13:09:24] <whatsupdoc> ok
[13:09:27] <whatsupdoc> thanks
[13:09:29] <whatsupdoc> got it
[13:10:04] <gitesh> Instructions are data means whta
[13:10:15] <Widdershins> whatsupdoc: because "even or odd" means "is a multiple of 2 or not", and binary is base 2 so any bit above the least significant bit is a multiple of 2 and can be ignored
[13:10:17] <gitesh> How does that is similar to 1
[13:10:18] <Repiphany> https://en.wikipedia.org/wiki/Von_Neumann_architecture
[13:10:33] <gitesh> Here 1 is data
[13:10:34] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[13:10:36] <Widdershins> gitesh: how else would you store instructions?
[13:10:48] *** Joins: Payam (~Payam@138.106.57.131)
[13:11:16] <Widdershins> gitesh: think of an example of some way you could store instructions. writing them down in a list on paper or whatever. doesn't it always boil down to data?
[13:11:19] <gitesh> Yes eventually we are storing program
[13:11:27] <KirkMcDonald> gitesh: When you write Python code, you are making a file, yes? Which is just some data.
[13:11:30] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[13:11:46] <KirkMcDonald> gitesh: The Python interpreter takes that data, and transforms it into some other data.
[13:12:02] <KirkMcDonald> gitesh: And then it runs that data.
[13:12:30] <Widdershins> computers look at instructions written down as data and, for each instruction, take the associated action, interpreting the instructions as written
[13:12:56] <Widdershins> this means you don't need to include every program already on the silicon chip, you can put them in later
[13:13:12] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 256 seconds)
[13:13:30] <Widdershins> "data" isn't just numbers, you can think of it as "anything you can write down"
[13:13:49] <KirkMcDonald> (I mean for a digital computer it *is* just numbers.)
[13:14:08] <gitesh> When I search for defination of data in Google it says facts or statistics
[13:14:15] *** Quits: pizdets (~pizdets@183.182.111.75) (Ping timeout: 245 seconds)
[13:14:16] <gitesh> Reference
[13:14:18] <Widdershins> yes but you can think of it as something more sophisticated, the point being that you can always conveniently turn that other thing back into numbers
[13:14:56] <Payam> hi guys, I am trying to write a setup.py . I have specified the packages in line 9 of setup. But I have a main.py under src/ next to osim_package that should be run. How do I specify that?
[13:15:03] <Payam> hi guys, I am trying to write a setup.py . I have specified the packages in line 9 of setup. But I have a main.py under src/ next to osim_package that should be run. How do I specify that? https://bpa.st/DQFQ
[13:15:33] *** Joins: magla (~gelignite@55d4e731.access.ecotel.net)
[13:15:45] <Widdershins> Payam: the thing that should be run for a package is usually called __main__.py
[13:15:48] <gitesh> So my point of view is calling a function puts it's data in silicon chip to execute
[13:16:06] <Repiphany> gitesh: You seem to be in this weird mindspace of wanting to understand both the high-level and low-level aspects of computing with the same ideas but also using contractictory non-computing ideas
[13:16:35] <gitesh> I had this confusion for months
[13:16:47] <Widdershins> gitesh: that definition of "data" is more for science and research. in programming we use "data" in the sense of information theory, which doesn't necessarily represent true facts or anything inherently useful
[13:16:51] <Payam> Yes. I only am incharge of packaging it. It should be possible to call whatever the function/file is. The problem is that the main file is outside the package.
[13:16:56] <Widdershins> it's just some amount of numbers
[13:17:17] <Widdershins> or something that can be represented as numbers
[13:17:24] <Widdershins> which, it turns out, is almost everything
[13:17:52] <KirkMcDonald> gitesh: To simpilfy somewhat, ultimately your CPU has what's called an "instruction pointer," which is a register that contains a memory address, which points to a place in memory where a program lives.
[13:18:08] <KirkMcDonald> gitesh: And it executes that program.
[13:19:07] <Repiphany> Maybe you should have a go at understanding very basic assembly language to get an appreciation for why higher level languages are useful in the first place
[13:19:15] <KirkMcDonald> In the case of Python, the picture is made a little more complicated by the fact that CPython is a virtual machine, so what the CPU is actually running is the Python interpreter, and then the interpreter is basically pretending to be another computer, that is executing your Python code.
[13:19:34] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[13:20:01] <KirkMcDonald> I am also glossing over... many things.
[13:20:51] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[13:21:59] <Payam> Widdershins Any ideas?
[13:22:16] <Widdershins> Payam: can you not add it as another package, or move the file
[13:22:50] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[13:23:14] <Payam> Widdershins that would mean changing the whole structure
[13:23:28] <Widdershins> Payam: sounds like that might be a good thing
[13:23:57] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[13:24:17] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[13:25:46] *** Joins: Pickchea (~private@user/pickchea)
[13:27:06] *** Joins: chaosite (~chaosite@user/chaosite)
[13:27:10] *** Quits: voltron (~voltrin_@ip5f5993ed.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[13:28:36] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:f1a2:602:bcca:9a9f)
[13:30:47] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[13:30:53] *** jmcantre1 is now known as jmcantrell
[13:31:09] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[13:32:14] *** Quits: p-i-__ (~Ohmu@2403:6200:8870:a614:4c0:8620:185a:dbe1) (Ping timeout: 272 seconds)
[13:32:47] *** Quits: dld (~davidlowr@73.61.8.45) (Ping timeout: 250 seconds)
[13:33:06] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[13:33:27] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[13:33:39] *** Quits: qk1z (~qk1z@110-175-249-154.tpgi.com.au) (Ping timeout: 250 seconds)
[13:34:35] *** Joins: dld (~davidlowr@73.61.8.112)
[13:36:52] <gitesh> Why or how function as a first class object is useful?
[13:37:50] <supakeen> What did you come up with yourself?
[13:37:56] *** Joins: entuland (~entuland@user/entuland)
[13:38:34] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[13:39:20] *** Quits: jazzy (~jaziz@2600:380:8600:750f:a0eb:13de:7970:4f87) (Read error: Connection reset by peer)
[13:39:26] <gitesh> To store it to execute it later
[13:40:01] *** Quits: Payam (~Payam@138.106.57.131) (Ping timeout: 246 seconds)
[13:40:52] <supakeen> Sounds like a good enough answer then.
[13:41:36] *** Joins: VimVim (~VimVim@85.191.51.93)
[13:42:03] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[13:47:26] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:48:00] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[13:49:53] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[13:50:45] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[13:50:48] <no_gravity> This survey says Python developers are half as experienced as PHP developers but paid 50% more: https://insights.stackoverflow.com/survey/2021#salary-and-experience-by-language
[13:51:26] *** Joins: qk1z (~qk1z@110-175-249-154.tpgi.com.au)
[13:52:17] <supakeen> That's how markets work, yes.
[13:52:34] *** Quits: rwb (~augh@theguntretort.com) (Ping timeout: 240 seconds)
[13:53:04] <gtristan> Bwaaaahahaha crap
[13:53:08] *** Joins: thiras (~thiras@user/thiras)
[13:53:21] <gtristan> Path.is_relative_to() is since 3.9 !
[13:53:29] <gtristan> funny
[13:53:33] <no_gravity> Flask is ahead of Django in usage?
[13:53:35] <supakeen> That sounds pretty new :>
[13:54:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:54:29] <Julian> no_gravity: where does it say that
[13:54:48] <no_gravity> Julian: CTRL+f django
[13:55:16] <Julian> no_gravity: I meant your Python vs PHP comparison
[13:55:26] <no_gravity> Julian: CTRL+f php
[13:56:07] <Julian> no_gravity: I know how to find things on the page :) -- it doesn't say what you said.
[13:56:23] <no_gravity> Julian: Can you see the chart with experience vs pay?
[13:56:41] <Julian> no_gravity: Yes, that chart says Python developers (on average) are within a year of PHP developers
[13:57:26] <Julian> (Which I assume is because the average is weighted down by a large number of new Python users and small number of PHP users more than anything else)
[13:57:37] <Julian> But it certainly doesn't say Python developers are half as experienced.
[13:57:55] <no_gravity> Julian: Ha! I read the "9" on the x-axis as "6".
[13:58:46] *** Joins: Vonter (~Vonter@user/vonter)
[13:59:04] <no_gravity> I wonder where those $41K/Year PHP developers with 10 years of experience are. I would like to hire some.
[13:59:16] *** Joins: mike18 (~geri@216.200.232.252)
[13:59:20] <mike18> hi is that true? Although Flask has a built-in web server, as we all know, it's not suitable for production and needs to be put behind a real web server able to communicate with Flask through a WSGI protocol
[13:59:29] <mike18> do you suggest an alternative?
[13:59:34] <mike18> for prod?
[13:59:41] <Julian> mike18: gunicorn, uwsgi, twisted
[13:59:51] <mike18> i liked to simplicity of flask
[14:00:00] <mike18> whats the most used @Julian?
[14:00:04] <Julian> and yes certainly that's true (in fact I still maintain it's not suitable for development purposes either given how easy the others are to use)
[14:00:13] <Julian> mike18: they are all widely used.
[14:00:23] <mike18> and they are as simple as flask ?
[14:00:30] <mike18> to write code for?
[14:00:31] *** Joins: greyhash (~greyhash@2601:2c6:c100:1f00::b0a5)
[14:00:45] <Julian> mike18: I think you may be confusing your web framework with your web server
[14:00:54] <mike18> yeah maybe
[14:00:56] <Julian> mike18: You still write flask code. Flask is your web framework.
[14:01:15] <mike18> i have a little server which takes get request and runs some code than returns logs back to user in the request
[14:02:16] *** Joins: chris_99 (uid26561@id-26561.tooting.irccloud.com)
[14:03:05] <Julian> I don't know a good tutorial off-hand, someone else may.
[14:03:13] <Julian> But you should have a flask app which contains your logic
[14:03:21] *** Joins: securethemews (~securethe@2a00:23c4:1e9b:2f00::1)
[14:03:25] <Julian> Then a web server -- gunicorn, uwsgi, twisted, as I say they're all commonly used
[14:03:26] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[14:03:38] <Julian> And then of course a letsencrypt integration for HTTPS.
[14:04:07] <Julian> Some tutorial will show you how to do all of those, if someone chimes in they may suggest something -- otherwise you can likely look for tutorials that show how to use gunicorn + flask
[14:04:23] <gitesh> Thank you guys thanks for answering
[14:05:08] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[14:08:12] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:08:48] <mike18> Julian: what about: from gevent.pywsgi import WSGIServer  ?
[14:08:54] <Widdershins> gitesh: being able to store references to functions to use later, conditionally, is very useful. because they are data already it's easy to make them first-class objects
[14:09:08] <mike18> @Julian https://ideone.com/nYjw7c
[14:09:48] <gitesh> Widdershins: which references?
[14:09:54] <Julian> mike18: I would not generally recommend folks use gevent personally.
[14:10:00] <Julian> But others have different opinions.
[14:10:04] <mike18> ok
[14:10:28] *** Joins: rwb (~augh@theguntretort.com)
[14:10:29] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 250 seconds)
[14:12:20] <gitesh> Widdershins: got it
[14:13:17] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[14:13:35] <mike18> @Julian i read that i need to run: gunicorn --bind 0.0.0.0:5000 wsgi:app  ?
[14:13:40] *** Joins: srhm (~ascii@user/srhm)
[14:14:07] *** Quits: reumeth (~reumeth@user/reumeth) (Quit: reumeth)
[14:14:09] <mike18> i currently have a flag for my app to start or not start the webserver... how to incorporate?
[14:14:15] <mike18> with gunicorn?
[14:16:19] *** Joins: dre (~dre@2001:8003:c932:c301:d99a:7bc6:6e11:ccd2)
[14:16:25] *** Joins: solsTiCe (~solsTiCe@156.146.63.148)
[14:16:56] <solsTiCe> hi. what is !r in a string format for ? thanks
[14:17:36] *** Joins: darksun (~darksun@user/darksun)
[14:17:47] <mike18> @Julian do you know what i mean?
[14:18:50] <kieto> graingert: coming back to what we discussed yesterday about global state in a client library that needs to setup the config from envvars, I've drafted this proposal in order to check which methods need the setup step before running https://bpa.st/VELQ
[14:18:55] *** Quits: dre (~dre@2001:8003:c932:c301:d99a:7bc6:6e11:ccd2) (Remote host closed the connection)
[14:19:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a)
[14:20:02] <graingert> ??? Sorry I've got no context on this
[14:21:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:21:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[14:22:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:22:27] <graingert> kieto: https://python-dependency-injector.ets-labs.org/introduction/di_in_python.html does this help?
[14:23:41] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 244 seconds)
[14:23:42] *** Quits: VimVim (~VimVim@85.191.51.93) (Quit: Leaving)
[14:24:49] <kieto> graingert: exactly, dependency injection is what I want to achieve to write better tests. For context, you pasted this for me yesterday https://bpa.st/ZVDA
[14:24:50] <Widdershins> solsTiCe: r means repr(), s means str(), a means ascii(). the default is usually like str
[14:25:08] <solsTiCe> ok
[14:25:20] <solsTiCe> Widdershins: thanks
[14:26:27] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:26:58] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[14:27:02] <graingert> kieto: that doesn't look like my coding style
[14:27:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:27:25] <kieto> graingert: ouch, sorry! I confused you with altendky :P
[14:27:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:28:05] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[14:28:17] *** Joins: evilissimo (~vfeenstr@redhat/evilissimo)
[14:29:23] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:30:07] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[14:30:09] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:13] *** Quits: mike18 (~geri@216.200.232.252) (Read error: Connection reset by peer)
[14:32:20] *** Quits: gtristan (~tristan@110.11.238.160) (Ping timeout: 258 seconds)
[14:32:29] *** Joins: matkor (~matkor@91.198.89.207)
[14:32:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:33:08] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:33:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:35:06] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:35:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[14:36:19] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:38:09] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:38:19] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:39:13] *** Quits: securethemews (~securethe@2a00:23c4:1e9b:2f00::1) (Quit: Leaving)
[14:39:37] *** Quits: emika (~emika@83.136.182.189) (Ping timeout: 258 seconds)
[14:39:45] *** Joins: emika7 (~emika@212.102.45.115)
[14:40:27] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[14:40:34] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 240 seconds)
[14:40:49] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[14:42:07] *** carbolymer_ is now known as carbolymer
[14:42:41] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[14:43:00] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[14:44:00] *** Joins: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com)
[14:44:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:45:16] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a) (Quit: Leaving)
[14:45:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:44] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4815:d4d0:9e37:3955)
[14:53:43] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[14:54:11] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:54:40] *** Quits: Doffi (~doffi@91.132.197.188) (Read error: Connection reset by peer)
[14:55:03] *** Joins: Doffi (~doffi@91.132.197.188)
[14:55:06] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[14:55:39] *** caveman is now known as testtesttest
[14:55:40] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:55:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:55:56] *** testtesttest is now known as caveman
[14:56:54] *** Joins: debayer (~debayer@2603-8000-cf00-0010-edbe-2a5a-b353-8e2e.res6.spectrum.com)
[14:57:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:59:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a)
[15:02:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:03:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:03:56] *** Joins: jazzy (~jaziz@2600:380:8600:750f:893b:e73a:55b2:fe00)
[15:04:32] *** Quits: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[15:05:50] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:08:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:08:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:09:17] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:09:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 245 seconds)
[15:12:06] *** Joins: reset (~reset@user/reset)
[15:14:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:15:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:18:06] *** Joins: chaosite (~chaosite@user/chaosite)
[15:18:10] *** Joins: mike18 (~geri@216.200.232.252)
[15:18:38] <mike18> hi - can i pass a dockerfile an argument to select between 2 apps to run? CMD [ "python", "app.py" ] vs CMD [ "python", "app2.py" ]
[15:18:45] <mike18> or is that a bad idea?
[15:18:47] *** Joins: Deneb (~johnch@93.125.7.51.dyn.plus.net)
[15:19:09] *** Joins: y1n (~y1n@84-115-64-201.wifi.dynamic.surfer.at)
[15:19:21] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[15:20:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:20:45] *** Joins: zweimer (~Fragr@2a02:908:d20:26e0:dc2f:593e:97d1:3a20)
[15:20:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:10] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[15:24:18] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[15:25:35] <zweimer> Hi. I am building a small gui with pyqt5 and would like to be able to draw on a particular region. I thought of using a QPixmap, assign it to a QLabel and use this as my canvas: https://bpa.st/ZMCA
[15:26:47] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[15:27:09] <zweimer> It does not work when I try to draw something on self.generic_label or self.canvas. How do I do it correctly? With qp = QPainter(self) I am allowed to draw everywhere on my window. Even on top of user inputs and buttons.
[15:27:10] *** Joins: srhm (~ascii@user/srhm)
[15:28:35] *** Joins: geli (~gelignite@55d4244c.access.ecotel.net)
[15:29:30] <todda7> what's wrong? http://ix.io/3v3F/python
[15:30:12] *** Scotteh_ is now known as Scotteh
[15:30:51] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Ping timeout: 244 seconds)
[15:31:03] <Yhg1s> todda7: you left out the traceback, so it's very difficult to tell.
[15:31:16] <todda7> Yhg1s: There isn't any useful traceback!
[15:31:19] <todda7> that's the problem
[15:31:22] *** Quits: magla (~gelignite@55d4e731.access.ecotel.net) (Ping timeout: 245 seconds)
[15:31:46] <todda7> The traceback just points to the class name:     class ExpiringQueue(multiprocessing.Queue):
[15:31:58] <Yhg1s> todda7: are you *only* getting line 27 as output?
[15:32:31] <Yhg1s> todda7: okay, that *is* useful. Please include the traceback next time. multiprocessing.Queue is not a class.
[15:32:55] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:33:04] <todda7> full paste https://pastebin.com/1HChVQcw
[15:33:27] *** Joins: mickey (~user@user/mickey)
[15:33:32] <Yhg1s> todda7: as you can see on line 81, multiprocessing.Queue is not a class, so you can't subclass it.
[15:33:48] *** Joins: emper0r (~emper0r@93-62-144-68.ip22.fastwebnet.it)
[15:33:52] *** Joins: chaosite (~chaosite@user/chaosite)
[15:33:55] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[15:35:45] <emper0r> hi.. i'm using centos 8.. and by default the python3 version is 3.6.8.... with epel repo I installed python38 package, how can i choos python3.8 by default on command python3 to not use python3.6 ?.. exist some command to choose what python use ?
[15:36:52] <emper0r> something like... python-config use python3.8    or python-config use python3.6 ... exist something like that ?
[15:36:54] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:36:56] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:747f:9b1c:263e:f50a) (Quit: Leaving)
[15:37:18] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[15:37:29] <Repiphany> pyenv
[15:37:33] <Yhg1s> emper0r: not in Python, no. There may be a CentOS way to do it, but I wouldn't rely on it. I recommend creating virtualenvs and using those, instead.
[15:38:14] <emper0r> i use virtualenv to create different ansible version.. but for ansible 4 i need to use 3.8
[15:38:32] *** Joins: kmh (~kmh@p200300df5f07d8002475c02177381b69.dip0.t-ipconnect.de)
[15:38:32] <Yhg1s> emper0r: yes. Create a virtualenv with 3.8, and it will use 3.8. Then use that python with ansible 4.
[15:38:34] <emper0r> on my requieremt i add python38 as rpm and ok but need to use then
[15:38:39] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[15:38:43] <emper0r> hm
[15:39:02] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 258 seconds)
[15:39:48] <emper0r> let me ask different way.. so how can i choose the python installed using virtualenv ?
[15:39:56] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:40:07] <Repiphany> python3.8 -m venv blahblah
[15:40:12] <emper0r> mm
[15:40:17] <Yhg1s> emper0r: you run 'python3.8 -m venv', or 'virtualenv -p python3.8'
[15:40:21] *** Joins: chaosite (~chaosite@user/chaosite)
[15:41:11] <emper0r> ok.. need to adjust my ansible-playbook to use this
[15:44:05] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[15:44:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 245 seconds)
[15:45:30] <rendar> `a = (,)` is invalid syntax, but i thought it was an empty tuple -- how come?
[15:45:56] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[15:46:20] <Yhg1s> rendar: I don't know why you thought it was the empty tuple. () is the empty tuple.
[15:46:23] <nedbat> rendar: you can have an extra trailing comma, but you cannot have an extra leading comma.
[15:46:36] <rendar> nedbat: yeah makes sense, thanks
[15:46:51] <rendar> Yhg1s: well, i thought that `()` could confuse with parentheses
[15:46:59] <Yhg1s> rendar: what do you mean?
[15:47:21] <rendar> Yhg1s: in C/C++ you can have (((((((e=i)))))));
[15:47:30] <nedbat> rendar: you can in Python also
[15:47:45] <Yhg1s> rendar: in Python you can have ((((((())))))).
[15:48:06] <rendar> nedbat: exactly, so i thought better specify something like `,` to make people understand this is an empty tuple and not some random parentheses
[15:48:20] <debayer> rendar you can also just do `a = tuple()`
[15:48:37] <Yhg1s> rendar: () can only be a tuple.
[15:48:59] <nedbat> rendar: the parens do confuse people, but the grammar isn't ambiguous
[15:49:04] <Repiphany> Tuples with single elements are where you need the trailing comma
[15:49:20] <rendar> debayer: right, nice idea, thanks
[15:49:33] <debayer> `x = 5,` will gives you `(5,)`
[15:49:38] <rendar> Yhg1s, nedbat: ok i see
[15:50:11] <rendar> now let's speak about a much more heavier problem: logging into an asyncio application :(
[15:50:22] <debayer> haha. logging in?
[15:50:43] <rendar> nope, python logging system
[15:50:50] <bjs> rendar: what about ti
[15:50:51] <bjs> it*
[15:50:57] <rendar> if it writes into files, it will block the asyncio loop
[15:51:14] <bjs> rendar: yes, is that really a problem?
[15:51:36] <rendar> bjs: yes, if the log file is into a NFS file system with a very high latency
[15:51:38] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[15:51:41] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 258 seconds)
[15:51:50] <Yhg1s> rendar: the only way to do asynchronous writes is to do the writes in a separate thread.
[15:51:57] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[15:51:59] <rendar> Yhg1s: i know
[15:52:00] <debayer> theres tons of ways around this
[15:52:08] <bjs> rendar: make a thread that does the logging and submit jobs to it then
[15:52:21] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 276 seconds)
[15:52:21] <rendar> Yhg1s: problem is that i have old bunch of code with they own logging calls, and that code must be run inside asyncio loop
[15:52:33] <rendar> hence, i have to modify A LOT of code to overcome this
[15:52:51] <bjs> rendar: well yes if you want to change the code to now be async you need to change the code to do it :)
[15:53:01] <rendar> :|
[15:53:10] <bjs> I mean most async programs just don't have asynchronous logging
[15:53:35] <rendar> wouldn't be useful to make python logging module do that into the background, so you don't have to change all the code? also because this is a library, that may be imported in asyncio code OR may be not!
[15:53:45] <debayer> rendar: i have used `loguru` with several projects and in addition to being a fantastic logging lib overall, you can also just pass `enqueue=True` to the logger init and get what you want
[15:53:48] <Yhg1s> rendar: you can certainly write a logging module that does this, sure.
[15:54:05] <debayer> plenty of logging libs for python do this
[15:54:09] <rendar> debayer: thanks, but does that library follow python logging system?
[15:54:18] <Yhg1s> changing the stdlib logging, not so much. *Adding* to it is fine, but this new asynchronous interface that starts threads in the background should exist as a separate third-party module first, to show it works reasonably well.
[15:54:40] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 268 seconds)
[15:54:59] <bjs> You almost certainly want the logger API to be `await log(...)`
[15:55:02] <Yhg1s> rendar: as for 'maybe asyncio, maybe not', you can't sensibly have code that is used asynchronously or synchronously. It's one or the other.
[15:55:09] *** Quits: emper0r (~emper0r@93-62-144-68.ip22.fastwebnet.it) (Quit: leaving)
[15:55:15] <bjs> so you'd need to use a library designed for the purpose
[15:55:22] <Yhg1s> (Also, as a long-time NFS user, logging to NFS is a _really_ bad idea. Log to syslog on a master server instead.)
[15:55:24] <debayer> rendar if you want it to, yes. it is compatible with standard logging and you can set it up as an actual logging.Logger handler
[15:55:29] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[15:55:32] <rendar> Yhg1s: *my* code yes, but not library old code
[15:55:43] <Yhg1s> rendar: I'm not sure what that is in response to.
[15:55:50] <rendar> Yhg1s: if i have an old library, very big, with a bunch of logging calls, i can't change everything!
[15:55:53] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[15:56:12] *** Joins: chaosite (~chaosite@user/chaosite)
[15:56:34] <Yhg1s> rendar: I don't know why not, but even so: that doesn' tmean you can just magically make it work. You *cannot turn it into asynchronous code* without changing it.
[15:56:36] <bjs> rendar: if you have an old library that wasn't designed for `async` and now you want to go back and make *everything* (even the simple logs) async then you're going to have to do a lot of rewriting or refactoring
[15:57:00] <rendar> ok
[15:57:03] *** Quits: astrocat (~astrocat@112.134.11.28) (Ping timeout: 258 seconds)
[15:57:07] <Yhg1s> You can, however, make the logging calls defer the actual writing until later, instead.
[15:57:12] <bjs> Maybe you can make a hacky drop-in replacement for `logging` that just throws the logs out to another thread and doesn't wait but really this is not a good API for logging
[15:57:15] <Yhg1s> so that your synchronous code stays synchronous.
[15:57:19] <rendar> i can run the entire library functions into a separate thread
[15:58:39] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[15:59:23] *** Joins: ornxka (~ornxka@user/ornxka)
[16:00:17] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:f1a2:602:bcca:9a9f) (Remote host closed the connection)
[16:00:34] <ornxka> x = map(blah); print(set(x)); print(set(x) - set(y)); print(set(x)) <- the second print(set(x)) prints an empty set????
[16:00:52] <bjs> ornxka: map returns an iterator that you consumed on the first print
[16:00:52] <debayer> rendar: loguru has the ability to intercept calls to the standard logger and do what you wish. and/or propagate your loguru config down to the other loggers
[16:00:53] *** Joins: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th)
[16:01:27] <ornxka> oh so i only get to use the return of map once..
[16:01:55] <bjs> ornxka: yes, you can obviously go `s = set(x)` then use `s` multiple times.
[16:02:11] <bjs> (or just make a set directly, instead of `x = map(f, xs); s = set(x)` just go `s = {f(x) for x in xs}`)
[16:02:16] <ornxka> now i see, thank you
[16:02:23] <ornxka> yeah i went with x = set(map...
[16:02:49] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[16:03:02] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Ping timeout: 245 seconds)
[16:03:12] <Yhg1s> ornxka: a much better solution would be a set comprehension, really.
[16:03:41] *** Joins: yte3 (~0@151.15.180.83)
[16:03:49] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[16:04:43] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[16:06:15] *** Joins: chaosite (~chaosite@user/chaosite)
[16:07:06] *** Quits: y1n (~y1n@84-115-64-201.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[16:07:19] <yte3> a running threading.Thread cannot be stopped, and a .terminate()d multiprocessing.Process won't terminate cleanly ("exit handlers and finally clauses, etc., will not be executed"). is there a way to stop a task (thread/process) cleanly without cooperation from the task itself?
[16:08:19] <yte3> CTRL+C stops an interpreter more or less cleanly (injects KeyboardInterrupt, executes the finally clauses and the exit handlers)
[16:08:19] <bjs> yte3: no,  a thread just cannot be stopped at all (without outright killing everything) and a process is totally independent and isolated and all you can do is ask it to do things (or have the OS kill it)
[16:08:30] <yte3> but terminating with SIGINT is not cross-platform, no?
[16:10:09] <yte3> and actually, Process.terminate() and Process.kill() hide the detail that a signal is being sent (only on Unix I guess)
[16:10:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 268 seconds)
[16:10:43] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Quit: Leaving)
[16:11:05] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[16:11:47] <yte3> maybe using os.kill() instead of Process.terminate()?
[16:12:05] <Yhg1s> yte3: os.kill is what Process.terminate() uses when signals are available.
[16:12:28] <yte3> https://docs.python.org/3/library/os.html#os.kill claims that also Windows is supported, but with some remarks...
[16:12:37] *** Joins: dhrv (~dhrv@user/dhrv)
[16:12:53] <yte3> not clear if signal.CTRL_C_EVENT can work in any condition
[16:13:27] *** Joins: kpcyrd (~kpcyrd@archlinux/trusteduser/kpcyrd)
[16:13:50] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[16:14:06] <Yhg1s> multiprocessing uses TerminateProcess on Windows.
[16:15:04] <kpcyrd> hi! is there a way to get the internal hashes used by python dicts? I'm wondering if there are security implications at runtime for hash DoS when setting PYTHONHASHSEED=0 during .pyc build :)
[16:15:25] <kpcyrd> I would assume that's only the case for dicts that are "loaded" from .pyc somehow instead of being created at runtime
[16:15:31] *** Joins: cdown (~cdown@89.32.122.5)
[16:15:43] <kpcyrd> but I'm having a hard time actually testing this assumption :)
[16:15:50] *** Quits: sandeepk (~sandeepk@223.130.30.29) (Ping timeout: 258 seconds)
[16:17:02] <Yhg1s> kpcyrd: hash() is the 'internal hash'.
[16:17:13] <yte3> Yhg1s: it seems SIGINT won't execute the finally handler either: https://pastebin.com/tKU7fZBk
[16:17:51] *** Quits: greyhash (~greyhash@2601:2c6:c100:1f00::b0a5) (Quit: WeeChat 3.2)
[16:18:13] <Yhg1s> the only way PYTHONHASHSEED=0 during .pyc generation can be a DoS is if the source is unsafe input, in which case there are easier ways to create problems. PYTHONHASHSEED is a mitigation for when you take untrusted strings and put them in a dict, which you wouldn't put in source.
[16:18:34] <Yhg1s> yte3: on Windows, or a system with signals?
[16:18:57] *** Joins: chaosite (~chaosite@user/chaosite)
[16:19:04] <yte3> Yhg1s: Unix here (macOS). On windows it should use CTRL_C_EVENT but I cannot test.
[16:19:53] <kpcyrd> Yhg1s: can you define "the source"? I'm not sure if you mean "user input that you're eventually going to put into the dict at runtime" or "the source code that you're building the .pyc files from"
[16:19:57] <Yhg1s> yte3: on non-Windows, you need to register a signal handler to handle SIGINT gracefully (for example, by raising an exception). The default handler just terminates the process. On Windows, I don't think you can catch CTRL_C_EVENT and raise an exception.
[16:20:09] <Yhg1s> kpcyrd: the latter. The source you're compiling into bytecode.
[16:20:19] <yte3> ah no, the finally clause gets executed with SIGINT
[16:20:23] <yte3> sorry, I was wrong
[16:20:26] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[16:20:34] <Yhg1s> kpcyrd: the bytecode isn't affected by PYTHONHASHSEED, just the order of items in the marshalled dictionaries.
[16:20:54] *** Joins: y1n (~y1n@84-115-64-114.wifi.dynamic.surfer.at)
[16:21:19] <kpcyrd> Yhg1s: when the marshalled dictionary is unmarshalled, does this also "reset" the hash seed that was used at build?
[16:21:21] <yte3> Yhg1s: isn't the default CTRL+C behavior to inject a KeyboardInterrupt exception in the main thread?
[16:21:43] <Yhg1s> yte3: yes, I confused SIGINT with SIGTERM.
[16:21:51] <Yhg1s> kpcyrd: let's say yes.
[16:21:55] <yte3> Yhg1s: by the way, killing with signal.SIGINT executes the finally clause in the child interpreter
[16:22:18] <yte3> I hope CTRL_C_EVENT behaves the same
[16:22:36] <Yhg1s> yte3: Process.terminate() sends SIGTERM, not SIGINT.
[16:22:57] *** Joins: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com)
[16:23:02] <yte3> Yhg1s: correct. but I will use os.kill(p.pid, SIGINT) instead of p.terminate()
[16:23:26] <yte3> or os.kill(p.pid, CTRL_C_EVENT) on Windows
[16:23:28] *** Joins: Tera (~Tera@h-85-24-240-165.A218.priv.bahnhof.se)
[16:24:17] *** Joins: sandeepk (~sandeepk@223.130.30.29)
[16:24:17] <yte3> I wonder why the multiprocessing.Process interface doesn't have a portable method for this
[16:24:43] <kpcyrd> Yhg1s: do you have any pointers in case I want to look further into how the unmarshall for python dictionaries works? Is this using pickle or something else?
[16:24:49] <yte3> it is quite awkward that I have to do platform specific things for such an high-level operation
[16:25:38] <Helle> yte3: because process managment is a mess on Windows and to a degree MacOS X
[16:25:56] <Yhg1s> kpcyrd: it's using the marshal module. It's just creating a new dict, taking the keys and values from the marshalled data.
[16:26:08] <Helle> I've written ridiculously complex code to deal with processes on Windows as it has a very different view on processes
[16:26:13] *** Joins: jellyknight (~gelignite@55d4d9f5.access.ecotel.net)
[16:26:13] <yte3> Helle: ok. probably I should test my code on the three platform before speaking :)
[16:26:19] <yte3> *platforms
[16:26:20] <Yhg1s> yte3: because multiprocessing isn't that good, and it's very difficult to get the details right, and probably the semantics are too different on the different platforms.
[16:26:38] <Helle> yte3: most likely you won't hit MacOS X differences, but it does differ from regular unix-alikes in a few things
[16:26:55] <yte3> Helle: is it code you can share?
[16:27:47] <Helle> yte3: the code I wrote ? not really, plus it is lower level then Python, it just ran into the same issues that introduces the differences in how multiprocessing works
[16:28:05] *** Quits: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com) (Remote host closed the connection)
[16:28:34] *** Quits: geli (~gelignite@55d4244c.access.ecotel.net) (Ping timeout: 240 seconds)
[16:28:50] <kpcyrd> Yhg1s: thank you, may I quote your messages? :)
[16:29:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:30:07] <Yhg1s> kpcyrd: in what?
[16:31:10] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Ping timeout: 246 seconds)
[16:31:24] *** jazzy is now known as chouxmaker
[16:31:30] *** chouxmaker is now known as jazzy
[16:31:33] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[16:31:52] *** Joins: shad (~shad@user/shad)
[16:32:14] *** Joins: Pickchea (~private@user/pickchea)
[16:32:27] <kpcyrd> Yhg1s: there are some people currently looking into this at Arch Linux :)
[16:33:21] <Yhg1s> they should probably look at the implementation instead of trusting a rando on IRC then :) Say, Python/marshal.c
[16:33:25] <Yhg1s> but sure.
[16:33:59] <kpcyrd> there are some concerns about introducing security issues when setting `PYTHONHASHSEED=0` globally for all builds and I'm trying to figure out if that's the case
[16:34:04] <kpcyrd> Yhg1s: cool will do, thanks :)
[16:34:29] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:35] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[16:38:36] *** Quits: solsTiCe (~solsTiCe@156.146.63.148) (Quit: Leaving)
[16:38:55] <graingert> anyone know if I can use https://github.com/systemd/python-systemd/ to interact with systemd-resolved to get a list of DNS servers?
[16:38:55] <graingert> currently I'm looking at parsing subprocess.run(["systemd-resolved", "--status"], capture_output=True, text=True, encoding="ascii")
[16:43:29] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:45:00] <aplainzetakind> I have containerized (docker) project. Is there a way to make flake8 take into account the imports/dependencies when invoked from outside the container (short of setting up another virtualenv to match)?
[16:45:54] *** Joins: Blankspace (~abcd@user/blankspace)
[16:46:58] <aplainzetakind> Or does flake8 not check for nonexistent modules or such by default?
[16:49:33] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:51:06] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[16:53:00] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[16:53:52] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[16:53:58] <graingert> aplainzetakind: flake8 just looks at the current file
[16:54:09] <graingert> aplainzetakind: unless you have a plugin that looks elsewhere
[16:54:31] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[16:56:24] *** Joins: erica (~erica@user/erica)
[16:57:14] *** Quits: jellyknight (~gelignite@55d4d9f5.access.ecotel.net) (Ping timeout: 258 seconds)
[16:57:36] *** Joins: magla (~gelignite@55d4e9d2.access.ecotel.net)
[16:57:48] <dhrv> can anyone provide old chat logs?
[16:58:06] <Yhg1s> is there something specific you're looking for, or do you want all kinds of old logs?
[16:58:34] <aplainzetakind> graingert: Alright, thanks.
[16:58:42] <dhrv> umm, there was bpa.st link ...
[16:58:59] <Yhg1s> dhrv: how long ago? they expire, you konw.
[16:59:33] <dhrv> it was of Monday, same time
[16:59:41] <dhrv> I guess, it was set to a week
[17:00:03] <Yhg1s> dhrv: was it pasted by you, or by someone else?
[17:00:20] <dhrv> it was pasted by jochum
[17:00:41] <jabberwock> I'm just starting with pytest and so far no tutorial mentions passing the proper path to find the source code. I can pass `PYTHON3_PATH=src pytest` and while that seems to make the import work, the class isn't found in the test case
[17:00:46] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[17:00:52] <dhrv> I guess, I need a bouncer now
[17:01:21] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:01:28] <jabberwock> dhrv: Are you from India? Just curious
[17:01:30] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:b1b9:741a:6177:9da4)
[17:01:31] <Yhg1s> dhrv: I see you giving jochum a bpa.st link, but not jochum giving one.
[17:01:39] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[17:02:02] *** Joins: cdown_ (~cdown@163.114.131.1)
[17:02:33] <Yhg1s> jabberwock: can you show the source layout, how you're running the test and the output you get?
[17:02:44] <dhrv> umm, i guess it would then a personal message
[17:03:18] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 258 seconds)
[17:03:59] *** Joins: michelem (~Adium@51.154.167.11)
[17:04:43] *** Quits: dhrv (~dhrv@user/dhrv) (Remote host closed the connection)
[17:04:46] <jabberwock> Yhg1s: I have root [src/fapple.py, testing/test_fapple.py]. I just set the python path in the test file via sys.path.insert(). The import seems to work but then fapple.FApple() is not found
[17:04:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:04:50] <michelem> Hello everyone! Anybody using gRPC with python? I was looking how/if it's possible to maintain a session-state between different calls for the same client.
[17:04:54] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 258 seconds)
[17:05:00] <Yhg1s> jabberwock: don't mess with sys.path.
[17:05:12] <jabberwock> Yhg1s: You're not offering me an alternative <3
[17:05:30] <altendky> kieto: i'm not sure what makes something 'dependency injection' vs. 'passing a thing the objects it needs', but your link https://bpa.st/VELQ could work.  is there some reason not to pass the setup through `.__init__()`?  sometimes there is, i don't know in your case.
[17:05:54] *** Joins: dhrv (~dhrv@user/dhrv)
[17:06:07] <Yhg1s> jabberwock: I can offer you quite a few, just like tutorials on the subject :) You ahven't mentioned how you run the test, so I would have to cover quite a few options. tox (or nox) are the usual choices. Also, make 'testing' a package.
[17:06:32] <Yhg1s> jabberwock: but if the import works, the problem isn't that it isn't finding a module by that name. You would have to find out what module it's finding and why it doesn't contain the class you expect.
[17:07:00] <jabberwock> Yhg1s: I thought that the FS setup I posted above was the right one. I'm not certain
[17:07:22] <jabberwock> I also thought that pytest included the folder it's running from by default. I'm just noobish and I Feel that the docs are missing the most important element
[17:07:31] <jabberwock> The examples use system libraries that are always on the path
[17:07:35] *** Quits: dhrv (~dhrv@user/dhrv) (Remote host closed the connection)
[17:07:45] *** Quits: y1n (~y1n@84-115-64-114.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[17:07:45] <Yhg1s> jabberwock: from that description it's hard to tell what's what. Do you have a setup.py file, or pyproject.toml, or setup.cfg? testing/__init__.py? How are you running pytest?
[17:08:18] <jabberwock> This is a super simple script. It's located in src/. Then the test script is in testing/. I'm running pytest from the root under both src and testing
[17:08:25] <Yhg1s> jabberwock: bit.ly/pypackages and bit.ly/pypackaging have advice on how to lay these things out.
[17:08:25] <jabberwock> I don't know about this setup.cfg, toml files, etc
[17:08:34] <jabberwock> I do have __init__.py in both src and testing (empty file)
[17:08:36] <Yhg1s> jabberwock: okay, so does testing/__init__.py exist?
[17:08:38] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:08:40] <jabberwock> yes
[17:08:41] <Yhg1s> jabberwock: remove the one from src.
[17:09:26] *** Joins: gggp (~gggp@114.245.119.213)
[17:09:28] <jabberwock> Done
[17:09:39] <Yhg1s> jabberwock: I don't know if pytest automatically picks up the 'src' directory when you use that particular layout. It's better suited for when you have an installable package (which means pyproject.toml or setup.py or setup.cfg describing them)
[17:10:02] <jabberwock> Can I learn about that later? I'm wanting to do TDD early
[17:10:29] <jabberwock> This is seriously a really simple script that gets icloud caldav/carddav urls
[17:11:07] <jabberwock> Having unit tests for this is probably overkill but I'd like to learn
[17:11:11] *** Joins: CHamburr (~chamburr@user/chamburr)
[17:11:11] <Yhg1s> jabberwock: again, I don't know if pytest supports the src layout like that. However, the easy fix would be to move the module from the 'src' directory to the same directory as 'testing'. (See https://docs.pytest.org/en/6.2.x/goodpractices.html#tests-outside-application-code)
[17:12:00] <jabberwock> Ah - I see. So 'src' should be 'fapple' since the source file is fapple.py I'm guessing
[17:12:16] <jabberwock> Also, I didn't know that pytest neeced a setup.py. Thank you for that link
[17:12:23] <Yhg1s> jabberwock: no, if you rename 'src' to 'fapple', the module would be 'fapple.fapple'.
[17:12:27] <jabberwock> Dr. Brave Search is giving me results that don't include that
[17:12:30] <Yhg1s> pytest doesn't *need* a setup.py file.
[17:12:44] <kpcyrd> Yhg1s: I went down the rabbit hole of how hash() works and ran into Objects/memoryobject.c and Objects/bytesobject.c, is this like a low level building-block, like every python object using one of those two?
[17:13:01] <Yhg1s> kpcyrd: in no way, shape or form, no. I'm not sure how you ended up there.
[17:13:47] <kpcyrd> followed usage of _Py_HashBytes and a mention of tp_hash :)
[17:13:54] *** Joins: mike18 (~geri@216.200.232.252)
[17:14:21] *** Parts: CHamburr (~chamburr@user/chamburr) (Textual IRC Client: www.textualapp.com)
[17:14:25] <Yhg1s> kpcyrd: bytes are hashable. they're not the only thing that's hashable. other things, like strings, have separate tp_hash implementations.
[17:14:32] <jabberwock> Yhg1s: by following the rabbit :)
[17:15:15] <kpcyrd> Yhg1s: ok, looks like I missed something then, thanks for the pointer :)
[17:15:24] <jabberwock> Yhg1s: I was being cheeky when I said you didn't provide me any alternatives. Hope I didn't upset you. If so, sorry.
[17:16:12] *** Quits: qk1z (~qk1z@110-175-249-154.tpgi.com.au) (Ping timeout: 276 seconds)
[17:16:31] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[17:17:17] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[17:17:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[17:18:07] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[17:19:36] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[17:20:13] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:20:20] *** Joins: y1n (~y1n@84-115-64-114.wifi.dynamic.surfer.at)
[17:22:06] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Quit: Konversation terminated!)
[17:25:17] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:26:44] *** Joins: Adoi (~Adoi@user/adoi)
[17:27:48] *** Quits: michelem (~Adium@51.154.167.11) (Read error: Connection reset by peer)
[17:28:26] <mike18> hi what does the ~ mean here? pip install flask~=2.0.1
[17:28:28] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[17:28:52] <Yhg1s> mike18: https://www.python.org/dev/peps/pep-0440/#compatible-release
[17:29:12] <mike18> complatible release...
[17:29:19] <mike18> means only that version works?
[17:29:30] <Yhg1s> mike18: did you read the description?
[17:30:32] <mike18> A compatible release clause consists of the compatible release operator ~= and a version identifier. It matches any candidate version that is expected to be compatible with the specified version.
[17:30:39] <Adoi> hello, for line 5 here https://bpa.st/NTBA I get 'TypeError: can only concatenate str (not "Category") to str'...there are dozens of online posts about this error, but all those I have viewed show solutions on how to concatanate them, whereas I want 'amount' to be added to 'sum'...what am I doing wrong here? In other cases summation used to work.
[17:31:04] <Adoi> sorry I pasted the wrong type error
[17:31:11] <Adoi> 'TypeError: can only concatenate str (not "float") to str'
[17:31:12] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[17:31:18] <Yhg1s> Adoi: line 6 turns 'sum' into a string. Why are you turning it into a string there?
[17:31:26] *** Joins: thiras (~thiras@user/thiras)
[17:31:45] <Adoi> Yhg1s, because if I dont, I get an error in line 7
[17:31:47] <supakeen> (probably because of line 7 giving the 'reverse' error) :)
[17:31:50] <Adoi> they dont concatanate
[17:32:00] <Adoi> yes, supakeen
[17:32:08] <graingert> here's the answer to my earlier question about reading dns from python https://www.irccloud.com/pastebin/gCyRvDBi/resolved_dns.py
[17:32:20] <supakeen> Adoi: You can turn 'sum' into a string on line 7 by doing `print("Total " + str(sum))` or `print(f"Total {sum}")` instead.
[17:32:35] <Yhg1s> Adoi: so do it before line 7 (or use string formatting). Don't do it while you still need 'sum' to be a float.
[17:32:51] * supakeen rent weg
[17:33:19] <Adoi> supakeen, yes, but how does it help me solve the above problem is line 5
[17:33:24] <Adoi> with line 5
[17:33:30] <Yhg1s> Adoi: you need to remove line 6.
[17:33:37] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1006)
[17:33:38] <supakeen> Adoi: As Yhg1s says, you do that instead of str()'ing earlier :)
[17:33:43] <Yhg1s> The problem with line 5 is that you turned 'sum' into a string.
[17:34:14] *** Quits: Blankspace (~abcd@user/blankspace) (Remote host closed the connection)
[17:34:20] <Adoi> I dont understand. sum is given as float. when does it become a string?
[17:34:34] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[17:34:44] <Adoi> why is it not an addition operation on line 5?
[17:34:46] <Yhg1s> Adoi: line 6.
[17:34:55] <supakeen> When you do `sum = str(sum)` you turn it into a string.
[17:35:27] <Adoi> yes, I am aware of it, I did it to make it work in line 7
[17:35:34] <Yhg1s> Adoi: ... yes. As supakeen said.
[17:35:48] <Yhg1s> Adoi: you need to turn it into a string *after the loop*. After you need it to be a float.
[17:36:00] <Adoi> I will change line 7 as supakken said, and check again
[17:36:12] <Yhg1s> Don't forget to delete line 6.
[17:36:49] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:38:32] *** Quits: alexyov (~alexyov@84.22.6.244) (Read error: Connection reset by peer)
[17:38:38] *** Joins: alexyov8 (~alexyov@79.124.0.2)
[17:38:59] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:39:09] *** Joins: Payam (~Payam@138.106.57.131)
[17:39:36] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 276 seconds)
[17:39:42] <Payam> hi
[17:39:50] <Payam> How do I set a directory as a package?
[17:40:25] <Yhg1s> Payam: what do you mean by 'set it as a package'?
[17:40:27] <Payam> I have a src/package folder and inside the package I have the source code. so when importing files I want to be able to do from package import ...
[17:40:30] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 272 seconds)
[17:40:38] <Yhg1s> Payam: give it an __init__.py file.
[17:40:50] <Payam> there is one
[17:40:58] *** Joins: Doffi (~doffi@91.132.197.188)
[17:40:59] <Yhg1s> Then it is a package.
[17:41:31] <Payam> there is folders inside package/ and they have their own __init__
[17:41:32] <Payam> but
[17:41:43] <Yhg1s> Does package itself have an __init__.py file?
[17:41:58] <Payam> When running a file in side package/ it says can not find module called osim_pkg
[17:42:04] <Yhg1s> Don't run a file inside package.
[17:42:26] <Yhg1s> When running files directly, they don't know they're supposed to be in a package. Put scripts outside the package, or use setuptools entry_points instead.
[17:43:12] <Payam> I have a setup.py and has a entry_point = ['blabla=package.file.main']
[17:43:23] <Payam> so how I run the file and from where?
[17:43:42] <Yhg1s> Payam: after you install the package, there'll be a 'blablah' script in the 'bin' directory. You can run that.
[17:43:55] <Yhg1s> Or, you can run 'python -m package.file'
[17:44:18] *** Joins: eriluc (~eriluc@178.97.132.77.rev.sfr.net)
[17:44:26] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[17:46:06] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[17:46:10] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[17:46:35] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:46:56] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:49:51] *** Joins: nyah (~nyah@90.221.186.180)
[17:49:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:50:42] *** Quits: alexyov8 (~alexyov@79.124.0.2) (Quit: alexyov8)
[17:51:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:52:06] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[17:53:20] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[17:54:21] *** Joins: alexyov8 (~alexyov@79.124.0.2)
[17:54:21] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[17:54:31] *** Quits: debayer (~debayer@2603-8000-cf00-0010-edbe-2a5a-b353-8e2e.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[17:54:41] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[17:54:55] <Adoi> thank you, I solved the above problem but now something happened to the rest of the code after that.
[17:54:57] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[17:56:11] *** Joins: shad (~shad@user/shad)
[17:56:17] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[17:59:24] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[18:00:06] *** Joins: digilink (~digilink@user/digilink)
[18:00:22] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[18:00:37] *** Joins: rapha (~jrs@user/rapha)
[18:00:40] <rapha> hi all
[18:00:40] *** Joins: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net)
[18:00:45] *** Joins: digilink (~digilink@user/digilink)
[18:00:47] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[18:00:54] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[18:01:21] *** Joins: digilink (~digilink@user/digilink)
[18:01:38] *** Quits: jpic_ (~jpic@82.142.19.50) (Ping timeout: 258 seconds)
[18:01:41] <rapha> when defining a function via exec(f"def {funcname}: print(\"hellow\")", {}), how do you give it a decorator?
[18:01:47] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[18:01:57] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[18:02:13] *** Joins: eramirez (~eramirez@49.149.137.68)
[18:02:23] <rapha> (i did try to prepend "@mydeco\n" to the first argument to exec(); unfortunately the decorator is out of scope there)
[18:02:38] *** Joins: digilink (~digilink@user/digilink)
[18:02:39] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[18:03:52] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[18:03:56] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:b1b9:741a:6177:9da4) (Ping timeout: 258 seconds)
[18:04:45] *** Joins: P1ro_ (~quassel@user/p1ro)
[18:05:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:06:37] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 258 seconds)
[18:07:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:07:13] <Yhg1s> rapha: '@mydeco; def foo(): ...' is syntactic sugar for 'def foo(): ...;; foo = mydeco(foo)'.
[18:07:18] *** Quits: y1n (~y1n@84-115-64-114.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[18:07:24] <Yhg1s> rapha: so you can take the function you created and call the decorator manually.
[18:07:36] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[18:07:40] <Yhg1s> rapha: alternatively, make the decorator in scope by including it in the dict you pass to exc.
[18:07:43] <Yhg1s> eh, exec.
[18:07:46] *** Joins: wakeup (~wakeup@user/wakeup)
[18:08:04] <wakeup> p in ls calls "==" for each element in ls, right?
[18:08:22] <wakeup> i.e. it does not call "is"
[18:08:33] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[18:08:36] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:08:56] *** Joins: Fiji (~Fiji@user/fiji)
[18:10:05] <jinsun> if I remember right, it tries `is` first, and if that gives false then it does ==, (and maybe that is cpython implementation detail)
[18:10:15] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:10:30] <Yhg1s> wakeup: it calls both.
[18:11:07] *** Joins: geli (~gelignite@55d40e37.access.ecotel.net)
[18:11:44] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[18:12:14] *** Joins: darksun (~darksun@user/darksun)
[18:12:22] *** Quits: magla (~gelignite@55d4e9d2.access.ecotel.net) (Ping timeout: 258 seconds)
[18:12:35] <jinsun> example math.nan in [math.nan], gives True, because the `is` succeeds
[18:14:09] <rendar> why it tries both?!
[18:14:11] *** Joins: palasso_ (~palasso@user/palasso)
[18:14:25] <bjs> rendar: because `is` is very fast and for almost all objects `x == x`
[18:14:58] <jinsun> and even if x != x you probably want x in [x] to be True
[18:15:01] <Yhg1s> 'is' is basically free.
[18:15:17] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[18:15:48] <bjs> rendar: obviously if `is` fails, it tries ==
[18:16:23] <deniska> TIL if you create asyncio.Queue() outside of running loop, you get a really non-obvious error message when you try to .get() from the queue
[18:16:58] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 258 seconds)
[18:17:29] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 250 seconds)
[18:17:40] *** Quits: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com) (Ping timeout: 258 seconds)
[18:18:24] *** Joins: Guddu (~Guddu@67.73.237.27)
[18:18:59] <rendar> uhm, i see, why `is` is so fast? because it checks id() ?
[18:19:27] <bjs> rendar: well `is` is an identity check, `x is y` asks "are x and y the same object". Most implementations just need to do a very simple pointer equality check
[18:19:39] *** Joins: zeden (~zeden@user/zeden)
[18:19:42] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 252 seconds)
[18:19:57] <Yhg1s> rendar: because it's comparing two pointers that are already in memory (or would need to be in memory to perform ==)
[18:20:26] *** Joins: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at)
[18:20:33] <wakeup> I just want to know the semantics of in
[18:20:37] <bjs> additionally it's not just that `is` is so fast, but that `==` can be so _slow_, basically arbitrarily slow
[18:20:48] <wakeup> if is returns false, it calls ==
[18:20:49] <wakeup> why?
[18:20:53] <wakeup> wtf
[18:21:12] <bjs> wakeup: roughly you want `in` to be like `x in ys == any(x == y for y in ys)` but `==` is slow
[18:21:17] <hodapp> bjs: hm, so there is effectively only one 'None' for instance?
[18:21:19] <Yhg1s> wakeup: because two objects may still be equal even if they aren't the same object.
[18:21:33] <hodapp> hence 'is None' being common
[18:21:42] <bjs> hodapp: yes there is only 1 None object
[18:21:43] <Yhg1s> hodapp: None is a singleton, yes.
[18:22:22] <rendar> right
[18:22:33] <rendar> and `is` operator cannot be overloaded by classes
[18:22:40] *** Quits: eriluc (~eriluc@178.97.132.77.rev.sfr.net) (Quit: Connection closed)
[18:23:02] <hodapp> "What's up with None, am I right? How many are there? Is it one or is it none? So it's none? But it's one?" -Jerry Seinfeld
[18:23:06] <wakeup> I know I know that two objects may be equal even if they are not the same object
[18:23:07] * hodapp dodges tomatoes, runs away
[18:23:20] <wakeup> please, don't describe me the basics of programming and abstraction
[18:23:24] <wakeup> I was just wondering
[18:23:33] <wakeup> what are the semantics of "in"
[18:23:38] <wakeup> and apparently the semantics is "=="
[18:23:40] <wakeup> not "is"
[18:23:43] <wakeup> that's what I wanted to know
[18:23:50] *** Joins: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com)
[18:23:55] <wakeup> it call "is" only for efficiency
[18:24:08] <bjs> wakeup: for efficiency but Python lets types override ==
[18:24:16] <wakeup> yea
[18:24:29] <bjs> so types can do bad things (e.g. make == non-reflexive) which breaks this "optimization"
[18:24:33] <jinsun> wakeup: but "is" can be different than ==, see the math.nan example above
[18:24:39] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[18:24:45] <bjs> wakeup: so the "real" semantics is roughly `x in ys == any((x is y) or (x == y) for y in ys)`
[18:24:49] <wakeup> I know that is can be different than ===
[18:25:05] <wakeup> but "in" has the semantics of who calls ==
[18:25:06] <bjs> wakeup: (for a list ys)
[18:25:11] <wakeup> that's what I wanted to know (second time I say this)
[18:25:13] <bjs> wakeup: `in` has the semantics like I just said
[18:25:19] <bjs> (for lists)
[18:25:42] <wakeup> if x is y, then x == y
[18:25:49] <wakeup> so x is y is not necessary there
[18:25:51] <bjs> wakeup: for *most* objects that is true
[18:26:01] <bjs> wakeup: but like I said, Python lets types do whatever they want for ==
[18:26:14] <bjs> wakeup: additionally, == is a big complicated operation
[18:26:18] <bjs> whereas `is` is a very quick operation
[18:26:47] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 245 seconds)
[18:26:49] <bjs> wakeup: if `x is y` then Python won't check `x == y` and will just say `True` to the `in` check
[18:27:14] <wakeup> yes, I know that....
[18:27:16] *** Quits: GOD (~mad@user/god) (Quit: flying away from here)
[18:27:44] <bjs> wakeup: okay what part are you still unsure about
[18:28:39] *** Joins: JoeH_ (uid113241@id-113241.highgate.irccloud.com)
[18:30:27] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:30:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[18:30:39] <jinsun> also I said it might be implementation detail, but it cannot be I think?, otherwise (x in [x] == True) will become implementation detail, which doesn't seem right
[18:30:43] *** Joins: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net)
[18:31:43] *** Quits: zweimer (~Fragr@2a02:908:d20:26e0:dc2f:593e:97d1:3a20) (Quit: Client closed)
[18:31:44] <wakeup> nothing
[18:31:48] <wakeup> no part
[18:32:00] <bjs> wakeup: okay :)
[18:32:36] <afidegnum> how do i strip anything in my string  containing \n and \t ? `{ 'text': '\n\t\t\t'}`
[18:33:42] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:33:52] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[18:34:06] <bjs> afidegnum: what do you want the result to be? That looks like a dictionary not a string
[18:35:27] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[18:35:40] <afidegnum> yes, inside the dictionary, but i can isolate and place it back into the dictionary,
[18:36:06] <bjs> afidegnum: so which part of this task are you struggling with?
[18:36:07] <afidegnum> the result should be a normal text devoid of \n and \t s
[18:36:27] *** Joins: twobitsprite (~isaac.fre@107.13.51.62)
[18:36:29] <bjs> afidegnum: can't you just loop over the dict and replace each item with a version without \n or \t
[18:36:41] <bjs> e.g. by replacing those characters
[18:37:00] *** Joins: darksun (~darksun@user/darksun)
[18:37:07] *** Joins: Elvanor (~elvanor@95.165.131.184)
[18:37:07] *** Joins: zrsm (~mrrobot@static-47-206-93-60.tamp.fl.frontiernet.net)
[18:37:19] <afidegnum> hmm...
[18:37:42] <zrsm> Hello, I have a filter setup to get some values, and I wanted to skip any values that are empty, what is the best approach for this.
[18:37:53] <Elvanor> Hello, is it possible to modify log format for a one time call? Something like logger.info(msg, format="one time format")
[18:38:07] <zrsm> mdc_key = list(filter(lambda v: searchMDC in v["Name"], datadict)) -- sometimes has empty values, and I need to skip those empty values.
[18:39:35] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[18:39:51] <bjs> zrsm: and an `and` clause to your filter, `lambda v: v["Name"] != "" and ...`
[18:40:01] <bjs> if that's what you meant?
[18:40:24] <zrsm> yes
[18:40:37] <zrsm> just needs to skip over any empty values.
[18:41:02] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[18:41:07] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[18:41:07] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[18:42:16] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[18:42:21] <jabberwock> Q: If I do `password = [password]` to make it a mutable object, what happens to the contents of the left value?
[18:42:30] *** Joins: P1ro (~quassel@user/p1ro)
[18:42:39] *** Quits: moto (~moto@user/moto) (Ping timeout: 276 seconds)
[18:43:07] <bjs> jabberwock: what "left" value?
[18:43:08] <jwhisnant_> afidegnum: if you control the data when building the dictionary, best to fix it there ...
[18:43:27] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[18:43:38] <Elvanor> maybe this is the best solution: https://docs.python.org/3/howto/logging-cookbook.html#using-a-context-manager-for-selective-logging ?
[18:43:57] *** Joins: P1ro__ (~quassel@user/p1ro)
[18:43:58] <jabberwock> bjs: password
[18:44:06] <bjs> jabberwock: in `x = y` the left-hand side "x" is just a name. This assignment doesn't touch/affect objects at all, it doesn't change their values or anything like that. it 'simply' gives the value on the right-hand side a new name ("x")
[18:44:10] *** Joins: moto (~moto@user/moto)
[18:44:34] <jabberwock> bjs: The pass-by-value thing is confusing me. I was looking here: https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference
[18:44:37] <bjs> jabberwock: so... nothing happened to the original `password` object.  The name "password" simply now refers to a list that contains the value that was "password" at the time
[18:44:59] <jabberwock> bjs: What happens to the string data that was there before the assignment?
[18:45:24] <bjs> jabberwock: nothing, an assignment to a name like that doesn't look at the objects at all, let alone do anything to them
[18:45:40] <bjs> jabberwock: Python doesn't have pass-by-value;  some say it has "Pass-by-reference" which is closer to the truth but not entirely. See bit.ly/pynames1 for a nice explanation of what Python names are really doing
[18:45:48] <hodapp> is it something of a special case that if I've a one-argument function, I can pass a generator expression in without needing separate parentheses?
[18:45:54] <jabberwock> bjs: How would I ensure that the original data of password is gone?
[18:45:57] <bjs> hodapp: yes
[18:46:10] <bjs> jabberwock: you can't, and indeed your `password = [password]` line doesn't do that... because it's still there, inside the list.
[18:46:12] <jabberwock> Gone as in not in memory as its plain-text original value
[18:46:16] <hodapp> alrighty. I saw someone use that form and was puzzled
[18:46:36] <bjs> hodapp: specifically if the only argument in a function call is a generator expression/comprehension, you are allowed to drop the redundant brackets
[18:46:45] <rapha> Yhg1s: thank you!
[18:46:55] <jabberwock> bjs: Does python have an allocator that can keep something from swapping and also zero it out when its in a certain state? (such as mystring = None) or w/e
[18:47:00] *** Quits: P1ro_ (~quassel@user/p1ro) (Ping timeout: 272 seconds)
[18:47:12] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[18:47:22] <bjs> jabberwock: no,  "swapping" is an OS feature (So you need to use something like mlock to stop that) and zeroing is not something Python supports
[18:47:45] <jabberwock> bjs: I'm understanding that python can store sensitive data in memory and there's not much I can do about it
[18:48:04] <bjs> jabberwock: well, once you've stored it there's not a lot you can do
[18:48:11] <jabberwock> I can overwrite it
[18:48:17] <bjs> jabberwock: not strings
[18:48:41] <jabberwock> I think we're caught up in pedantics
[18:48:43] <bjs> jabberwock: now if you have something like a bytearray or some manually allocated thing you can zero itself
[18:48:46] <altendky> given something like `["abc", "def"]`, how would i write code that concludes that `typing.List[str]` is a better fit than `typing.Sequence[str]`?  `isinstance()` and `issubclass()` both seem to yield the same results, which is understandable.
[18:48:54] <bjs> jabberwock: very much not if you're talking security
[18:49:10] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[18:49:11] <bjs> jabberwock: if I go `pw = "my super secret password"` there is nothing I can do to remove this from memory
[18:49:17] <jabberwock> bjs: I want to ensure that data is overwritten as soon as I have an encrypted version
[18:49:19] <bjs> not reliably, and not without possibly breaking Python
[18:49:34] <jabberwock> hmm. That makes sense
[18:50:00] <jabberwock> bjs: Wondering now what getpass() does. I may just need to rely on that and have it called each time
[18:51:01] <bjs> jabberwock: it creates a string and returns it.
[18:51:08] *** Joins: chaosite (~chaosite@user/chaosite)
[18:51:30] <jabberwock> then that string it creates stays in memory
[18:51:53] <bjs> jabberwock: well, there's no guaranteed way of removing it from memory is more the point
[18:52:04] <bjs> and certainly no way to zero that memory at a certain point
[18:53:15] <bjs> you can ask the OS not to swap it out (e.g. with mlock),  but typically if something manages to compromise a Python program any value that the Python program has seen before *might* still be around and accessible
[18:53:34] <gggp> private key signature is just hash from that key ?
[18:54:10] <bjs> gggp: maybe you should read a book on cryptography
[18:54:10] <jabberwock> bjs: Not the python program necessarily. This could be a django server behind some httpd vulnerable to heartbleed
[18:54:48] <Luyin> I can't ask pydocstyle to ignore an error for a certain file, line or block, like with pylint, can I?
[18:55:14] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[18:55:41] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[18:56:23] <sybariten> hey hey
[18:56:27] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[18:56:35] *** Quits: cellofellow (~user@166.70.50.58) (Remote host closed the connection)
[18:56:42] <gggp> what is pkcs#1
[18:56:48] *** Joins: kosh (~kosh@user/kosh)
[18:56:53] <sybariten> so i made this little sorting function, for a dictionary. It looks like this  https://bpa.st/FJSQ   and it seems to work
[18:57:00] <bjs> gggp: maybe you should still go read that book on crypto?  these aren't Python questions
[18:57:21] <altendky> ah, `typing.List[str].__origin__`.  now to look for a proper accessor for that dunder.
[18:57:48] <sybariten> However in my code there, its hardcoded to work agains one of the dictionaries. Given that i have three rather similar dictionaries, with similar names.... how could i take user input or something, and make the function work against either of these dicitonaries?
[18:59:00] <bjs> sybariten: have printSortedList take the dictionary as an input?
[18:59:08] <bjs> as an argument that is
[18:59:14] <altendky> grr, only 3.7+
[19:02:02] *** Joins: Fiji (~Fiji@user/fiji)
[19:02:12] <sybariten> bjs: yes but the problem is that i'm using it in what i call a composite manner... hehe. Cause i'm writing sorted(numbers_1990.items() an optimally i would like the user to only enter "1990" as input
[19:03:04] <bjs> sybariten: I mean if it was `def printSortedList(the_dict, year, ...)` then you can have `sorted(the_dict.items(), ...)` then you can ask the user. `if input(...) == "1990": printSortedList(numbers_1990)` etc
[19:03:20] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[19:03:30] * Luyin cringes at camel case function
[19:03:36] *** Joins: jrjsmrtn_ (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[19:04:12] <zrsm> bjs: its easier to put my function in try/except block
[19:04:48] <bjs> zrsm: I don't really see how try/except relates to your skipping empty values, but you should do whatever is easiest
[19:05:22] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:05:26] <zrsm> bjs, because I receive an IndexError exception so in the except block I can just `pass` over the values instead of trying to check the filter for empty value.
[19:05:31] <sybariten> bjs: ah okay, so an if-thing elsewhere. Good idea thanks
[19:05:32] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be) (Ping timeout: 245 seconds)
[19:05:35] <zrsm> either way. works.
[19:05:36] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[19:05:37] <zrsm> :thumbsup: lol
[19:06:01] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[19:06:04] *** Joins: emika (~emika@83.136.182.81)
[19:06:24] <bjs> sybariten: I mean you *could* put it inside the `def`  I guess
[19:06:51] <bjs> sybariten: it just felt natural to put the choice between the options at the same level as the options themselves
[19:06:58] *** Joins: chaosite (~chaosite@user/chaosite)
[19:07:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:07:20] <sybariten> bjs: yeah .... in one way i would like to make it generalized though (for any number). Then i cant have that kind of if-part . OTOH i will only have three dictionaries, so...
[19:07:28] <bjs> sybariten: well you can make another dict
[19:07:42] <bjs> like `years = {"1990": numbers_1990, ...}`
[19:07:45] *** Quits: emika7 (~emika@212.102.45.115) (Ping timeout: 250 seconds)
[19:08:00] *** Quits: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[19:08:03] <sybariten> Hmmm okay
[19:08:45] *** Joins: darksun (~darksun@user/darksun)
[19:10:22] <kieto> altendky: yes, that's what I'm doing now, passing the setup inside `.__init__()`, much easier :)
[19:11:25] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[19:11:54] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 276 seconds)
[19:14:52] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 272 seconds)
[19:15:43] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[19:16:23] *** Quits: afidegnum (~user@102.176.94.157) (Ping timeout: 258 seconds)
[19:16:40] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[19:16:47] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[19:17:17] *** Quits: P1ro__ (~quassel@user/p1ro) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:17:49] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:17:51] *** Joins: P1ro (~quassel@user/p1ro)
[19:19:25] *** Joins: pacbard (~pacbard@user/pacbard)
[19:19:26] *** Joins: Cyp_ (~cyp@192038128058.mbb.telenor.dk)
[19:19:51] *** Quits: Cyp (~cyp@192038128058.mbb.telenor.dk) (Read error: Connection reset by peer)
[19:20:12] *** Joins: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at)
[19:20:52] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:21:50] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 272 seconds)
[19:22:31] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[19:22:38] *** Joins: Abrax- (~Abrax@user/abrax)
[19:22:45] <sybariten> ok so i have this file  https://bpa.st/HIWQ    why can i do python3 numbers_test.py and that works, but not this : python3 ; import numbers_test ; numbers_test.printSortedList(numbers_1990, 3)    ----   NameError: name 'numbers_1990' is not defined    what am i missing here?
[19:22:48] *** Joins: chaosite (~chaosite@user/chaosite)
[19:23:30] *** Joins: jpic (~jpic@82.142.19.50)
[19:24:09] <nedbat> sybariten: "import numbers_test" just defines the name numbers_test in your program.  this will work:  `import numbers_test ; numbers_test.printSortedList(numbers_test.numbers_1990, 3) `
[19:24:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:24:38] *** Quits: ubert (~Thunderbi@91.141.45.149.wireless.dyn.drei.com) (Quit: ubert)
[19:24:49] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[19:24:51] <sybariten> gaaah the extra "filename" there ofcourse.....   thanks!
[19:25:11] <sybariten> Whats the technical term? Its the module i'm importing but in namespace terms this is probably something else
[19:25:24] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: Ø§Ù„Ù„Ù‡ ÙŠÙ‡Ø¯ÙŠÙƒÙ…)
[19:25:32] *** Joins: waynew (~wayne@user/waynew)
[19:25:48] <sybariten> numbers_1990 is not seen as something global, so i need to add numbers_test before it
[19:25:54] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 258 seconds)
[19:27:14] <nedbat> sybariten: it is a module
[19:27:32] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[19:27:54] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a614:35a5:dd73:dde0:23c1)
[19:31:09] *** Quits: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th) (Ping timeout: 250 seconds)
[19:33:05] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:33:17] *** Quits: LifeOnMars (~Stick326@140.82.44.94) (Ping timeout: 252 seconds)
[19:33:26] *** Joins: dgdg (~dg_dg@84.252.92.8)
[19:36:24] *** Quits: dg_dg (~dg_dg@cm-171-101-74-239.revip11.asianet.co.th) (Ping timeout: 272 seconds)
[19:37:58] *** Joins: darksun (~darksun@user/darksun)
[19:38:39] *** Joins: chaosite (~chaosite@user/chaosite)
[19:40:31] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[19:40:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[19:41:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:41:09] *** Quits: sandeepk (~sandeepk@223.130.30.29) (Ping timeout: 276 seconds)
[19:41:12] *** Joins: Adoi (~Adoi@user/adoi)
[19:41:40] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.1 Beta Build (2021/08/05 UTC) 64 Bit)
[19:41:54] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:41:56] *** Joins: Fiji (~Fiji@user/fiji)
[19:42:16] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:43:02] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 245 seconds)
[19:43:27] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 268 seconds)
[19:45:24] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[19:49:35] *** Joins: Cyp (~cyp@192038129091.mbb.telenor.dk)
[19:49:39] *** Joins: darksun (~darksun@user/darksun)
[19:50:13] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[19:50:30] *** Quits: Cyp_ (~cyp@192038128058.mbb.telenor.dk) (Ping timeout: 258 seconds)
[19:50:36] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:51:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:51:25] *** Joins: Pickchea (~private@user/pickchea)
[19:54:04] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[19:54:32] *** Joins: chaosite (~chaosite@user/chaosite)
[19:54:34] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[19:54:54] <jabberwock> bjs: I want to confirm. Unlike C where I can overwrite a string by writing bytes at its address - python doesn't offer this?
[19:55:17] <gcbirzan> strings are immutable in python
[19:55:33] <nedbat> jabberwock: you can't change the bytes in a string
[19:55:47] <Wooble> weeelll....
[19:56:02] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 272 seconds)
[19:56:10] <jabberwock> crap. I can't use python for this then
[19:56:12] *** Joins: thiras (~thiras@user/thiras)
[19:56:12] <jabberwock> ty
[19:56:19] <nedbat> jabberwock: for what?
[19:56:33] <jabberwock> Storing a password
[19:56:42] *** Joins: jmft2 (~JMFT@82.3.54.26)
[19:56:43] <jabberwock> I need to be able to zero it out in memory
[19:57:10] <Wooble> what if your evil genius attacker steals it from the memory of your C program before you encrypt it?
[19:57:11] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:57:11] <gcbirzan> use a list
[19:57:22] <gcbirzan> there, problem solved.
[19:57:33] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:57:43] *** Joins: Snyp (~rksht@49.207.216.218)
[19:57:49] <Wooble> if your threat model is "attacker has full access to RAM" you lost *way* before the password was input.
[19:58:08] <Yhg1s> if you actually need to overwrite the memory (which is, in a matter of fact, not much of a safeguard against the data leaking out, because of caches and what not), store it in an array.array.
[19:58:42] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 240 seconds)
[19:58:56] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Ping timeout: 258 seconds)
[19:59:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:59:42] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[19:59:50] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[19:59:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[20:00:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:00:44] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:b1b9:741a:6177:9da4)
[20:01:28] *** Quits: Fiji (~Fiji@user/fiji) (Remote host closed the connection)
[20:01:52] *** Joins: Fiji (~Fiji@user/fiji)
[20:02:03] *** Joins: akaWolf (~akaWolf@akawolf.org)
[20:02:37] *** Quits: zrsm (~mrrobot@static-47-206-93-60.tamp.fl.frontiernet.net) (Ping timeout: 245 seconds)
[20:03:16] *** Joins: edr (~edr@user/edr)
[20:05:50] <kosh> a list is pyobject*, if you really need to store something in a block of memory that you can zero out use an array
[20:05:51] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:b1b9:741a:6177:9da4) (Ping timeout: 252 seconds)
[20:06:14] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:07:22] *** Quits: jazzy (~jaziz@2600:380:8600:750f:893b:e73a:55b2:fe00) (Ping timeout: 258 seconds)
[20:07:54] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[20:08:04] *** Quits: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[20:08:28] <nedbat> though if you use a list of characters, then the password isn't contiguous in memory anyway, and you don't need to zero it.
[20:08:44] <nedbat> the challenge would be using the password without ever making a contiguous string of it.
[20:08:46] <jabberwock> Wooble: That's not an uncommon threat model. Going back to Heartbleed
[20:09:01] <jabberwock> And it doesn't take an evil genius to run the POC
[20:09:26] <jabberwock> I get the desire to say "well if you need THAT then shiiiit" . It's just not a complex idea to me
[20:10:22] *** Joins: chaosite (~chaosite@user/chaosite)
[20:10:49] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[20:11:02] *** Quits: Deneb (~johnch@93.125.7.51.dyn.plus.net) (Quit: Leaving)
[20:11:35] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 258 seconds)
[20:11:38] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:11:57] *** Joins: twobitsp1ite (~twobitspr@107.13.51.62)
[20:12:05] *** Joins: srhm (~ascii@user/srhm)
[20:13:37] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[20:13:53] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[20:14:11] <twobitsp1ite> when using celery with flask, which "side" needs the custom ContextTask, the flask app side, or the worker side, or both? I'm asking because I'm looking to factor out the worker stuff to a separate container, but it won't have access to the flask app
[20:14:20] *** Quits: twobitsprite (~isaac.fre@107.13.51.62) (Quit: leaving)
[20:14:31] *** twobitsp1ite is now known as twobitsprite
[20:14:32] <nedbat> jabberwock: i think you can do this with Python, but differently than you would with C
[20:14:56] * jabberwock nods
[20:14:58] <jabberwock> hmm
[20:15:02] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[20:15:23] <nedbat> jabberwock: it depends a lot on what you will do with the password
[20:15:28] *** Joins: shad (~shad@user/shad)
[20:15:41] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[20:15:42] <jabberwock> nedbat: Encrypt it and zero out the original. It's a chicken&egg thing though
[20:15:45] *** Quits: Ares000 (~Ares3@37.228.196.119) (Ping timeout: 252 seconds)
[20:16:00] <jabberwock> I was using getpass which returns a string. Evidently I can't zero out that string
[20:16:20] <jabberwock> I could do mylist[0] = getpass(). I'm not sure if getpass is copying that data elsewhere though
[20:16:34] <Yhg1s> yes. several times, probably.
[20:16:52] <nedbat> jabberwock: it's possible you can't realistically do this with python.
[20:17:07] <twobitsprite> jabberwock: I missed the original question, but sounds like you're worried about the password being stored in memory or something?
[20:17:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[20:17:23] <graingert> twobitsprite: neither
[20:17:33] <graingert> twobitsprite: also try #celery :D
[20:17:44] <bjs> jabberwock: it's also unclear whether zeroing your *own* allocated memory really saves you from heartbleed at all
[20:17:48] <graingert> twobitsprite: the ContextTask is so you can access stuff like flask.g
[20:17:56] <graingert> from your celery task
[20:18:15] <jabberwock> twobitsprite: Yes. :)
[20:18:16] <graingert> but if you're running it in a whole new service then you shouldn't have access to the app context
[20:18:41] <jabberwock> bjs: That depends on how much the data gets copied and/or swapped
[20:18:58] <graingert> jabberwock: there's almost nothing you can do it about it
[20:19:01] <jabberwock> and that isn't real clear to me with python (or other OOP languages)
[20:19:07] <twobitsprite> graingert: so, just forget about the ContextTask stuff altogether and manually pass request/context stuff in to the tasks?
[20:19:09] <graingert> jabberwock: people can grab the data from the stack frame
[20:19:17] <kosh> if you need this level of security I would have thought you would need c,c++, rust etc type of language and use microchip security features
[20:19:24] <graingert> twobitsprite: you can't pass the whole request - I think it's got a socket in it
[20:19:25] <jabberwock> graingert: So my intent is to keep it in memory as little time as possible
[20:19:30] <graingert> twobitsprite: pass the bits you need
[20:19:32] <bjs> jabberwock: swapping (as in virtual memory swapping) is basically irrelevant and any SSL/TLS library is certainly going to copy the data because it needs to do computation on it
[20:19:39] <kosh> and probably a phd in security so you can do it correctly, and a few postdocs also
[20:19:41] <graingert> jabberwock: what's the password for?
[20:19:46] <twobitsprite> graingert: well, yeah, that's what I meant
[20:19:47] <jabberwock> graingert: icloud
[20:19:49] <supakeen> kosh: and still fail :)
[20:20:02] <kosh> supakeen, but at least have a higher chance of success
[20:20:13] <graingert> jabberwock: use a short term icloud oauth2 token
[20:20:28] <jabberwock> kosh: I think you're not seeing the potential risk. I'll go back to the heartbleed vuln and DJango. A web app take a password and maybe doesn't use it again.. but that password could be in plain text in memory indefinitely
[20:20:29] <kosh> supakeen, I would put the odds of someone properly securing a password in python by rolling their own security as pretty much 0%
[20:20:37] <graingert> jabberwock: it's better to invalidate the credential than erase it
[20:20:56] *** Joins: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at)
[20:20:59] <jabberwock> ok that's not going to work. Unless apple offers oauth
[20:21:01] *** Joins: audiocat (~audio@2603-8081-1800-00ad-6b17-27f9-85ac-99ed.res6.spectrum.com)
[20:21:08] <jabberwock> which that would be cool
[20:21:10] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:21:15] <twobitsprite> jabberwock: I think you're way over-thinking the importance of zeroing memory. it's always going to have to exist in memory at least temporarily while you work with it
[20:21:38] <jabberwock> twobitsprite: I'm not. I'm trying to prevent it from existing indefinitely in its canonical form
[20:21:58] <kosh> jabberwock, that is why you also have things like one time use codes on the page, you require reauth if the remote ip changes and all the other standard stuff that is already built in
[20:22:04] <bjs> jabberwock: and heartbleed leaks *that* buffered data (that e.g. OpenSSL wrote) not *your* allocated memory. If I recall correctly the biggest concern with heartbleed was not the leaking of plaintext passwords but of the encryption keys themselves
[20:22:10] *** Quits: jpic (~jpic@82.142.19.50) (Ping timeout: 256 seconds)
[20:22:10] <bjs> from e.g. OpenSSL's own memory
[20:22:52] <jabberwock> jesus. I'm asking a really simple thing and I have to tip-toe around my terms because those are getting dug into as some kind of anchor to invalidate my need to zero out shit
[20:22:57] <jabberwock> I'm just going to figure it out
[20:22:58] <bjs> Like if you are vulnerable to heartbleed, attacker getting a plaintext password is like, not even on the radar
[20:23:06] <bjs> jabberwock: I mean I already gave you an answer a while ago
[20:23:12] <kosh> jabberwock, it was already suggested you use array.array and zero it out
[20:23:21] <graingert> twobitsprite: thanks for the re-ask btw
[20:23:40] <twobitsprite> jabberwock: better to just fix the vuln than worry about whether or not you're storing things in memory. you'll always have something private in memory, like a shared secret, etc
[20:23:40] <bjs> jabberwock: That you cannot make prior-existing strings go away or zero them out and Yhg1s suggested you can use array.array if you want to zero some memory (although I would say there are huge caveats to that)
[20:23:44] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[20:23:46] <bjs> but none of these protect you from heartbleed
[20:23:50] <kosh> jabberwock, I just don't think you are actually going to create any security and you will just believe you are
[20:23:51] <jabberwock> bout future vulns?
[20:24:05] <jabberwock> lol why are you folks so against the idea of implementing some kind of sodium_alloc() etc in python?
[20:24:09] <jabberwock> Why am I having to justify this?
[20:24:26] <jabberwock> **what bout
[20:24:28] <graingert> jabberwock: apple does indeed provide tokens https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens
[20:24:28] <jabberwock> omg.
[20:24:34] <bjs> jabberwock: well that's a good question
[20:24:34] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:fe08:7f96:5202:3854)
[20:24:46] <twobitsprite> jabberwock: you don't have to justify it, go ahead and do it if you want, I'm just saying it sounds excessive to me *shrug*
[20:24:49] <graingert> there's a whole refresh_token process
[20:24:58] <bjs> jabberwock: Python is not like C, you don't get allocated chunks of memory or anything like that to work with.  And lots of operations construct new objects from old ones and lots of intermediate state can hang about
[20:25:17] <jabberwock> twobitsprite: It may be excessive. It's still an interesting topic to me
[20:25:18] <bjs> e.g. even if you use array.array (so you can zero it after) if you made a string from those values that string would persist
[20:25:28] <bjs> so you need to do a lot more than "just" zero some memory
[20:25:40] <jabberwock> bjs: right. I understand that
[20:25:45] <chris_99> https://en.wikipedia.org/wiki/TRESOR sounds kind of interesting, but it sounds like it has issues (storing key on the cpu rather than ram)
[20:25:49] <kosh>  jabberwock you where told how to do it multiple times using array.array, I just don't think it would actually work and I know from experience that security is really hard and I am not remotely qualified to try and make secure software
[20:25:53] <jabberwock> And I wanted to confirm that a while ago but the topic sort of ignited again
[20:26:00] <graingert> jabberwock: where is this icloud app running? on a console script on your desktop?
[20:26:07] <bjs> jabberwock: as for whether this protects you from future vulnerabilities that's also an interesting question.  It might.  It's very unlikely to protect you from heartbleed-like (aka, bugs in the libraries) problems
[20:26:08] <kosh> jabberwock, and I have seen how often stuff written using some of the most secure techniques in the world continues to fail
[20:26:12] *** Joins: chaosite (~chaosite@user/chaosite)
[20:26:12] <jabberwock> kosh: Being told how to do something that won't work isn't being told how to do something
[20:26:20] <graingert> jabberwock: you'd make it open or print an oauth URL
[20:26:21] <jabberwock> seriously can I not have 6 people pinging me about the same shit?
[20:26:35] <kosh> jabberwock, I also said that if you want to do something like this you probably need to use c,c++, rust etc
[20:26:38] <jabberwock> I'm gonna go punch a dolphinl, brb
[20:26:42] <jabberwock> (not really)
[20:26:45] *** Joins: oz4ga (~tim@93.90.4.233)
[20:26:47] <bjs> jabberwock: ... you pinged me to ask about it
[20:26:56] <jabberwock> bjs: Yes I did :)
[20:27:02] <jabberwock> The topic exploded again
[20:27:06] <graingert> imagine having 7 engineers working on your problem simultaneously  :D
[20:27:16] <jabberwock> I appreciate the help. Dont' get me wrong
[20:28:00] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Read error: Connection reset by peer)
[20:28:19] <jabberwock> It's just a lot of pollution when I have to explain the "why". I try not to answer questions by questioning the need unless its obvious the person has no idea why they're dong XYZ. I know why I'm doing it. I understand from people here that this thing isn't simple in python
[20:28:25] <jabberwock> or any language that does copies
[20:28:25] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[20:28:35] *** Joins: maxpowa (~maxpowa@107.150.39.146)
[20:28:51] <bjs> The sad truth is that there's little defence against a defective library (e.g. bugs in OpenSSL)
[20:29:05] <bjs> :(
[20:29:35] <jabberwock> Yeah. Honestly this was an idea that turned into a a small obsession
[20:29:43] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[20:29:46] <kosh> even if openssl was written in rust and used every security feature we have some of the exploits STILL would have happened
[20:29:50] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[20:30:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[20:30:53] <graingert> kosh: Mostly timing attacks
[20:31:04] <jabberwock> kosh: I think this problem is a bit systemic in languages that make copies of things. I don't know if Rust is excluded from that
[20:31:09] <jabberwock> Rust does have a nice Zeroize() lib
[20:31:30] <bjs> jabberwock: I think heartbleed was just a red herring.  There can be good reasons to zero memory.  Python doesn't give you a way to zero arbitrary objects (although you can make array.array's or memoryviews to underlying mapped memory).  Even if it did, lots of operations produce *new* objects which *Would* persist even after a zero.
[20:31:44] <bjs> So it's not a trivial thing (although it is do-able to write code that does it) to do this in Python.
[20:31:56] <bjs> [although I don't think I know any code that does it]
[20:32:00] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:32:18] <jabberwock> bjs: yeah it's getting quantum wacky the more I think on it
[20:32:27] <graingert> kosh: I think theorem provers can fix timing attacks in general because you stipulate the number of operations in advance because there's no loops. Then you pad all your branches with the spare number of ops
[20:32:53] <bjs> jabberwock: I assume rust would have the same problem. With Copy and Clone traits all some code has to do is accidentally copy or explicitly clone and then you have to do all the work there too;  it spirals out of control real fast
[20:33:13] <bjs> perhaps it's worth it perhaps it's not
[20:33:13] <kosh> jabberwock, that is why I thought you would need c,c++ and use processor specific features like zen2 and 8000 series plus I think have some kind of secure enclave instructions
[20:33:21] <graingert> But then there's power consumption attacks so you have to use two CPUs and have one randomly picked to compute the opposite operation
[20:33:51] <graingert> Best to just epoxy the lot and bury it in the garden
[20:33:58] <jabberwock> lol
[20:34:20] <jabberwock> kosh: That's an interesting idea. For e.g. making C bindings to sodium_alloc
[20:34:30] <comrumino> I feel like listing all known resources is a cwe. https://github.com/tomerfiliba-org/rpyc/pull/452 ... Anyone want to help me determine whether or not it is?
[20:34:38] <jabberwock> but I don't know if the whole object-copy thing will obviate the security
[20:34:56] <jabberwock> comrumino: information disclosure
[20:35:01] <comrumino> Of course, I could make that feature configurable. But, I would like to have a default secure
[20:35:19] <jabberwock> So CWE-200 to... 220 maybe
[20:35:34] <jabberwock> n/m. what am I thinking: https://cwe.mitre.org/data/definitions/200.html
[20:35:35] <kosh> jabberwock, IIRC that is part of the reason for why windows 11 has the cpu cutoffs that it does, nothing to do with running it, all the stuff is about security
[20:35:39] <graingert> comrumino: What's a cwe
[20:35:56] <jabberwock> common weakness enumeration
[20:36:02] <comrumino> graingert, ^
[20:36:05] <jabberwock> clients like those numbers in their reports
[20:36:18] <bjs> graingert: families of cves
[20:36:39] *** Quits: Cyp (~cyp@192038129091.mbb.telenor.dk) (Read error: Connection reset by peer)
[20:36:45] <graingert> jabberwock: also you can buy a trusted platform thing to manage your signed credentials
[20:36:55] <graingert> Then you never have the password in memory
[20:36:57] <comrumino> jabberwock, thanks. I was think 200 at first but I talked myself out of it without going through the extended description of "different expectations"
[20:37:01] *** Joins: Cyp (~cyp@192038129091.mbb.telenor.dk)
[20:37:29] <jabberwock> comrumino: I dont' see anything that looks like data I shouldn't be seeing
[20:37:33] <comrumino> then I went down the rabbit whole of their visualization graphs and trying to find something to open them with---inkscape was the best choice
[20:38:31] <comrumino> jabberwock, the cwe stems from someone on linkedin that was a researcher---he found a url by linkedin that listed their path hierarchy.
[20:38:42] <jabberwock> comrumino: object proxies scare me :/
[20:38:55] * jabberwock got RCE on 2000+ machines over JRMI
[20:39:11] <jabberwock> ohhh I see
[20:39:15] <jabberwock> yep that'd be a cwe
[20:39:22] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:39:33] <comrumino> analogously, the url paths are services here.
[20:39:50] <jabberwock> I'd put that as a 2nd finding and make the severity higher
[20:39:51] <comrumino> hence, it should be configurable based on developer preference
[20:40:08] <jabberwock> sorry, off topicness
[20:40:46] <comrumino> jabberwock, not entirely off topic of object proxies https://github.com/tomerfiliba-org/rpyc/security/advisories/GHSA-pj4g-4488-wmxm
[20:41:26] <comrumino> but yes, it leaves a lot to the developer. my last gig we used RPyC but only supported/used serializable objects.
[20:41:36] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[20:42:03] *** Joins: chaosite (~chaosite@user/chaosite)
[20:42:18] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Quit: Leaving)
[20:42:22] <jabberwock> that's a scary cve
[20:42:27] <jabberwock> but common to object proxies
[20:42:27] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[20:42:57] <comrumino> yup. That cve was left from the previous maintainer when I took over the project lol.
[20:43:11] <comrumino> gave me my first cve though :)
[20:43:22] <jabberwock> here was my java exploit: https://gist.github.com/jabberwock/9438d98b0ad86eca26c82b1e64ed4aae
[20:43:34] <jabberwock> wel thank gods for you :D
[20:43:40] <jabberwock> glad it's getting addressed!
[20:43:53] <Adoi> hi everyone
[20:44:13] *** Joins: female_student_4 (~female_st@5.151.94.114)
[20:45:07] <jabberwock> backing up though - thank you all for your input. I don't mean to come off crass as I get overwhelmed easily
[20:45:13] *** Joins: MaximB (~MaximB@87.68.164.32)
[20:45:26] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[20:45:46] *** Quits: audiocat (~audio@2603-8081-1800-00ad-6b17-27f9-85ac-99ed.res6.spectrum.com) (Ping timeout: 240 seconds)
[20:46:32] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[20:47:17] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:50:18] *** Joins: upsala (~zcb@185.213.155.160)
[20:50:26] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[20:50:27] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:50:36] <Adoi> is 'def __str__(self)' a way to print an object method_
[20:50:37] <Adoi> ?
[20:50:50] <Adoi> or attribute
[20:50:58] <comrumino> magic attribute
[20:51:09] <supakeen> No, it's a "magical", "dunder", method that says how the object should be treated if it were to be asked to be a string.
[20:51:25] <graingert> Adoi: No you'd use print(object.method)
[20:51:59] <Adoi> I tried print as well, but I dont get the right output.
[20:52:23] <bjs> Adoi: what do you mean by "print an object method"
[20:52:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:52:34] <comrumino> Adoi, https://docs.python.org/3/reference/datamodel.html#object.__str__
[20:52:51] <bjs> Adoi: print(x) will call x.__repr__()  and then print that out.  __repr__ is usually the thing you want to implement on a class to change how it prints to the user.
[20:52:53] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[20:52:55] <yuesbeez> Is it possible to use asyncio to iterate through a list and start multiple threads to process chunks of the list?
[20:53:03] <Adoi> maybe better if I paste the code in question
[20:53:20] <graingert> yuesbeez: yes you might like aiometer and anyio.to_thread.run_sync
[20:53:22] <bjs> yuesbeez: asyncio doesn't use threads, but you can ask asyncio to run things in a ThreadPoolExecutor
[20:53:29] *** Joins: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net)
[20:53:40] <bjs> yuesbeez: with asyncio's run_in_executor function
[20:53:52] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:55:41] *** Joins: LiftLeft (~LiftLeft@191.96.227.138)
[20:56:12] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[20:56:50] *** Quits: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 272 seconds)
[20:57:12] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:3d57:8dcb:d415:6f52)
[20:57:13] *** Joins: sharperguy__ (~sharpergu@2001:16b8:5cd4:c00:90a:543f:b6df:be7f)
[20:57:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[20:57:54] *** Joins: chaosite (~chaosite@user/chaosite)
[20:57:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:58:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[21:00:38] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[21:01:15] *** Quits: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net) (Read error: Connection reset by peer)
[21:01:59] *** Joins: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net)
[21:02:10] <Adoi> this is the code: https://bpa.st/CHPQ. I added a loop and a print command in the get_balance function, and I got the output for 'Food' but the output for 'Clothing' returned 'None'
[21:02:34] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[21:04:00] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[21:04:14] <bjs> Adoi: __str__ should *return* a string, not print one.
[21:04:42] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:04:49] <bjs> Adoi: as for t he loop and print in get_balance I don't quite follow. I don't see a print in get_balance
[21:04:55] <Adoi> bjs, I tried both, dozens of times
[21:04:55] <bjs> unless you mean the str() was the print, but if so see above
[21:05:10] <bjs> Adoi: what was wrong when it returned a string?
[21:05:14] <Adoi> bjs, I can paste that one, too
[21:05:18] <bjs> Adoi: sure
[21:05:48] *** Joins: ckdcreation (~ckdCreati@147.55.133.140)
[21:06:10] <Adoi> posting in a minute
[21:07:38] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[21:08:15] *** Quits: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[21:09:05] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[21:09:44] *** Quits: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net) (Remote host closed the connection)
[21:11:51] *** Joins: damonlynch (~ngaio@c-98-32-237-193.hsd1.in.comcast.net)
[21:13:44] *** Joins: chaosite (~chaosite@user/chaosite)
[21:13:51] <yuesbeez> aiometer and anyio.to_thread.run_sync looks like a great options that will make it easier to do this. Anyone have opinions on which is better?
[21:14:35] <graingert> yuesbeez: You use them both together
[21:15:42] *** Joins: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net)
[21:17:17] *** Quits: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net) (Remote host closed the connection)
[21:18:04] <Adoi> bjs, when I alter get_balance function as in here; https://bpa.st/RRIA, I get the output that I added to the end of the paste
[21:18:32] <Adoi> bjs, sorry, this is the py output: https://bpa.st/7XNA
[21:18:44] <bjs> Adoi: I don't even see a __str__ here
[21:19:00] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[21:19:04] *** Quits: female_student_4 (~female_st@5.151.94.114) (Quit: Client closed)
[21:19:23] <Adoi> bjs, yes, in the second code I dont have it
[21:19:38] <bjs> Adoi: if you want to change what print(x) shows then you need to define __str__ or __repr__
[21:19:42] <bjs> on the class
[21:19:57] <Adoi> as I said, I added print and return to get_balance function and I get at least one of the expected prints
[21:20:11] <Adoi> only for 'print(food)', that is
[21:20:51] <bjs> Adoi: no, __str__ shouldn't print
[21:20:55] <bjs> Adoi: it should `return` the string
[21:20:58] *** Quits: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com) (Ping timeout: 258 seconds)
[21:21:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 256 seconds)
[21:21:15] <bjs> Adoi: print(x) does print(x.__str__())  (roughly) and so __str__ should `return` a string for it to print.
[21:21:22] *** Joins: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at)
[21:21:31] <bjs> Adoi: in your previous paste `get_balance` didn't have print in it
[21:22:12] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:24:02] *** Quits: Cyp (~cyp@192038129091.mbb.telenor.dk) (Read error: Connection reset by peer)
[21:24:21] <damonlynch> does anyone know of a platform independent way to show files in the system file manager? If not, I'll create a module for it and put it on pypi
[21:24:27] *** Joins: Cyp (~cyp@192038129091.mbb.telenor.dk)
[21:25:26] <phy1729> What if there is no file manager?
[21:25:31] <graingert> damonlynch: I think there's one...
[21:25:35] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[21:25:37] <graingert> damonlynch: it works with snaps too
[21:26:10] <damonlynch> graingert, my google fu failed me. Any clues as to the package name?
[21:26:42] *** Joins: female_student_4 (~female_st@2a01:388:475:150::1:d0)
[21:27:19] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:27:29] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 258 seconds)
[21:27:34] <damonlynch> phy1729, the main problem I've encountered is that the default file manager can be set wrongly
[21:27:41] <graingert> damonlynch: Hmmmmm maybe I was miss remembering
[21:27:46] <graingert> https://github.com/flatpak/xdg-desktop-portal is all I can find
[21:28:54] <damonlynch> the other problem is telling the file manager which files to highlight on the specified path -- there is no standard for this
[21:29:28] *** Joins: Pickchea (~private@user/pickchea)
[21:29:28] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[21:29:31] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 268 seconds)
[21:29:36] *** Joins: chaosite (~chaosite@user/chaosite)
[21:29:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:54] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[21:30:10] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 240 seconds)
[21:31:10] *** Joins: djapo (~archangel@user/djapo)
[21:31:42] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[21:31:53] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:32:15] *** Joins: jpic (~jpic@82.142.19.50)
[21:32:34] <graingert> damonlynch: https://flatpak.github.io/xdg-desktop-portal/portal-docs.html#gdbus-org.freedesktop.portal.FileChooser gives you a list of globs to choose what to highlight
[21:32:55] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 250 seconds)
[21:34:04] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:34:15] *** Quits: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net) (Quit: Client closed)
[21:34:43] <graingert> You can pass arbitrary onformation with https://flatpak.github.io/xdg-desktop-portal/portal-docs.html#gdbus-method-org-freedesktop-portal-OpenURI.OpenDirectory
[21:34:54] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 276 seconds)
[21:35:24] <Adoi> bjs, I insert "return" and I get 'almost' the correct output. except the first 'None' line, and the items shown in lists instead of row by row
[21:35:26] <Adoi> https://bpa.st/2DIQ
[21:35:44] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:35:56] *** Joins: matsaman (~matsaman@user/matsaman)
[21:36:09] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:36:35] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:36:51] *** Joins: waynew (~wayne@user/waynew)
[21:37:04] *** Quits: Snyp (~rksht@49.207.216.218) (Quit: WeeChat 3.2)
[21:37:27] <bjs> Adoi: your __str__ still seems wrong, you cannot `return` inside a `for` like that, since the return cancels the for and the future lines don't get reached
[21:37:35] <bjs> Adoi: where is the first None coming from?
[21:37:57] *** Joins: cgw (~cgw@168.91.232.154)
[21:38:13] *** Joins: Akuli (~Akuli@87-94-109-12.bb.dnainternet.fi)
[21:38:14] *** Joins: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com)
[21:39:19] *** Joins: xkuru (~xkuru@user/xkuru)
[21:39:33] <u4t> also self.ledger is a list, and your __str__ just returns it
[21:39:52] <u4t> instead of processing individual items
[21:40:29] <bjs> Adoi: maybe your __str__ should take self.ledger and make a big string with all the lines in it and return it
[21:40:43] <u4t> there's some weird stuff going on in this code
[21:41:10] <u4t> for i in range(0, len(self.ledger)): if i > 0: ...
[21:41:48] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 272 seconds)
[21:42:05] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[21:42:18] <cgw> I've got a Python extension module that is implemented in Fortran.  It links at run-time to "libgfortran.so" on Linux and "libgfortran.dll" on Windows.  I am able to import the Python module as "M",  then using "ctypes.cdll.LoadLibrary(M.__file__)"  I am able to get a handle to it and call some functions.
[21:42:41] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:43:29] <u4t> pretty clear that Adoi is quite new to python
[21:43:37] <cgw> Now, on Linux I am able to "see" the functions in the dependent libs = libgfortran.so.  I can do, for example, "L._gfortran_set_fpe" (which I need to call)
[21:43:43] *** Joins: mattil (~mattilinn@87-92-27-109.bb.dnainternet.fi)
[21:43:49] <u4t> looks a little like javascript logic
[21:44:17] <cgw> however, on Windows, I cannot "see" the functions in libgfortran.dll ... only the functions in my top-level module.  Something about the difference between run-time linkage on Windows and Linux.  Anyone know about this?
[21:44:41] <Adoi> u4t, yes, i tried print with " sep='\n' " to turn list items into rows, but then I got a farther output than the current one
[21:44:47] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:45:11] <Adoi> bjs, I have been digging to find out where the first None comes from, to no avail
[21:45:15] *** Joins: ozoned (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[21:45:15] <Adoi> avail
[21:45:27] *** Joins: chaosite (~chaosite@user/chaosite)
[21:45:35] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Read error: Connection reset by peer)
[21:45:58] *** Joins: audiocat (~audio@2603-8081-1800-00ad-14af-78d0-99a4-deb0.res6.spectrum.com)
[21:46:11] <bjs> Adoi: well is it coming from print(food) or print(clothing) ?
[21:46:11] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[21:46:12] <u4t> Adoi: well, it's output, so it has to be a print()
[21:46:37] <Adoi> bjs, it doesnt seem to come from neither, as both food and clothing are printed as lists
[21:46:46] <bjs> Adoi: so it must be print(food.get_balance())
[21:46:51] <bjs> what does get_balance return?
[21:46:51] <bjs>  
[21:46:55] <bjs> oh it doesn't.
[21:46:57] <u4t> lines 90, 99 and 100 are your prints
[21:47:06] <u4t> yah what bjs said
[21:47:14] <Adoi> bjs, print(food) is a given of the problem, I cant change it
[21:47:31] <bjs> Adoi: no, `print(food.get_balance())`  <- this line. This is the one that is printing None.
[21:47:35] <bjs> because get_balance doesn't return anything
[21:47:37] <Adoi> ah
[21:48:23] <Adoi> bjs, but without that line i still get that 'None'
[21:48:38] <bjs> Adoi: you do?
[21:48:42] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:49:08] <Adoi> yes, this code still returns None; https://bpa.st/ZBLA
[21:49:16] <u4t> as for __str__, you're on the right track with "\n"
[21:49:17] <bjs> I mean I'm not saying I don't believe you but that line definitely prints None in the code you showed, so if you remove it then that None must disappear
[21:49:18] *** Abrax- is now known as Abrax
[21:49:29] <bjs> Adoi: what is this code? What changed?
[21:49:58] <Adoi> bjs, in the last code I sent, there are no print or return command in get_balance function
[21:50:05] <Adoi> commands
[21:50:06] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[21:50:13] <bjs> Adoi: no but you `print(food.get_balance())`
[21:50:40] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 272 seconds)
[21:50:40] <bjs> this line prints whatever get_balance returned, which was nothing (None) because get_balance doesn't have a `return`. That print() is what gave you None
[21:50:58] <u4t> line 90 on https://bpa.st/2DIQ is where your "None" is coming from
[21:51:05] <Adoi> oh, sorry, that is contained in the input command
[21:51:13] <u4t> yah
[21:51:26] <u4t> so get_balance() is missing a return value
[21:51:32] <Adoi> sorry, I totally overlooked that part
[21:51:38] *** Quits: audiocat (~audio@2603-8081-1800-00ad-14af-78d0-99a4-deb0.res6.spectrum.com) (Ping timeout: 258 seconds)
[21:51:50] <Adoi> yes indeed
[21:51:52] <u4t> Adoi: don't apologise. you're learning :)
[21:52:23] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:35a5:dd73:dde0:23c1) (Remote host closed the connection)
[21:52:30] <Adoi> no, I mean I got fixed to my own lines :)
[21:52:35] *** Joins: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net)
[21:53:03] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:b502:92f2:8a9b:7f4c)
[21:53:45] <u4t> i'm guessing check_funds() is going to need some work too
[21:53:59] *** Quits: ozoned (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Remote host closed the connection)
[21:54:29] <Adoi> when I added 'return Total' to the end of get_balance function it is solved, I suppose. Now there is 'Total 973.96' in place of 'None'
[21:55:09] <u4t> yup
[21:57:00] <u4t> it's interesting that the example output doesn't show a line for that get_balance() call though (:
[21:58:18] <Adoi> u4t, yes, they didnt add that one
[21:58:21] <u4t> one tip: at the moment, the check_funds() method is not getting called
[21:58:58] <u4t> you reference it in withdraw() and transfer(), but it doesn't get run. you're missing something there
[21:59:21] *** Joins: Naan (~Naan@user/naan)
[21:59:22] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Remote host closed the connection)
[21:59:34] *** Quits: summersault (~summersau@177.19.240.91) (Remote host closed the connection)
[21:59:51] <Adoi> u4t, 'if self.check_funds:' is checking whether check_funds is True, right?
[22:00:05] *** Quits: NakedKing (~NakedKing@user/nakedking) (Quit: Leaving)
[22:00:14] <u4t> sort of
[22:00:27] *** Quits: rendar (~rendar@user/rendar) ()
[22:00:42] <u4t> it's checking the reference named "check_funds"
[22:01:17] *** Joins: chaosite (~chaosite@user/chaosite)
[22:01:30] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 240 seconds)
[22:01:33] <Adoi> then check_funds is True if the the balance is larger than the amount intended to be withdrawn
[22:01:42] <gitesh> what should be first argument to sorted function?
[22:01:52] <bjs> gitesh: do the docs not tell you?
[22:01:58] <u4t> gitesh: an iterable
[22:02:03] <gitesh> okay
[22:02:21] <u4t> Adoi: that's not quite what your code is doing
[22:03:25] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[22:03:29] <u4t> trying to think of a simple way to explain this
[22:03:31] <Adoi> and there, I first used 'return True / False' instead of using '==' lines, but then I suspected it would cancel the following part
[22:04:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 276 seconds)
[22:04:28] <u4t> how do you run a method?
[22:04:38] <u4t> (or function)
[22:04:44] <bjs> Adoi: I think returning is the right thing to do
[22:04:47] <gitesh> where are python docs here ----------> https://docs.python.org/3/
[22:04:51] <gitesh> which link ?
[22:04:55] *** Joins: digilink (~digilink@user/digilink)
[22:05:11] <Yhg1s> gitesh: that entire site is python docs.
[22:05:23] *** Joins: NakedKing (~NakedKing@user/nakedking)
[22:05:37] <SnoopJ> gitesh, is there something in particular you want documentation for?
[22:05:39] <bjs> gitesh: that is the docs, what did you want to find in it?
[22:05:40] <u4t> gitesh: you can also do "help(sorted)" in your python interpreter
[22:05:49] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[22:05:57] <SnoopJ> u4t, perhaps regrettably, the stuff on docs.python.org is often more complete
[22:06:05] <u4t> yes, it is
[22:06:06] <Adoi> bjs, I replaced both '==' lines in get_balance with 'return True' and 'return False', it gives the same outpu
[22:06:08] <Adoi> output
[22:06:21] <gitesh> what i was thinking that i wanted to read docs , not *tutorial*
[22:06:24] <bjs> gitesh: if you're looking for the docs for sorted, then it'll be under the "Library Reference", then it's a built-in function so it's under "Built-in Functions", then you can click the sorted() link to see its docs
[22:06:32] <u4t> Adoi: that's because check_funds() isn't getting run at the moment
[22:06:39] <Yhg1s> gitesh: fortunately docs.python.org has much more than just the tutorial.
[22:06:47] <bjs> gitesh: the link you gave isn't the tutorial, there is a lot more there than just the first link on the page
[22:07:06] *** Joins: Masklin (~joel@89-233-200-127.cust.bredband2.com)
[22:07:44] *** Quits: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[22:08:16] <gitesh> ok ok thanks
[22:08:18] <gitesh> got it
[22:08:23] <u4t> if self.check_funds:   # you're missing something here. at the moment, it's testing to see if the function itself is "truish", not the return value of the function
[22:08:30] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Ping timeout: 252 seconds)
[22:08:49] * u4t mumbles something about ducktyping and everything being an object (:
[22:09:21] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 276 seconds)
[22:10:07] *** Parts: cgw (~cgw@168.91.232.154) ()
[22:10:08] <SnoopJ> `if obj:` and `if bool(obj):` are semantically equivalent, the former is just a little shorter
[22:10:20] <SnoopJ> (and occasionally surprising)
[22:10:46] *** Joins: djapo (~archangel@user/djapo)
[22:11:48] <u4t> maybe i should just say experiment with the interactive python (:
[22:12:41] <u4t> print(type(food.check_funds))
[22:12:49] <u4t> something like that
[22:13:23] <u4t> trying not to get too complicated in explaining
[22:13:54] *** Quits: gggp (~gggp@114.245.119.213) (Ping timeout: 276 seconds)
[22:15:15] <Adoi> on the other hand, it seems I am just one step close to the right output. where I can transform list items into rows...but I get one error after another when I play around with the code. for ex, I added a huge amount to be withdrawn in order to verify whether check_funds really works..then i got a first-ever error; that I had to turn 'amount' argument into string in order to run 'amount[0:6]'..so I did that; https://bpa.st/QIRA
[22:15:55] <bjs> Adoi: why are you doing amount[0:6] ?
[22:16:00] *** Joins: wallace_mu200 (~wallace_m@pool-173-66-6-41.washdc.fios.verizon.net)
[22:16:01] <Adoi> and it gives the same output for the moment...but when I debug it, it will give thousand errors, I guess..since the following line (line 11) still assumes a floating number
[22:16:04] <bjs> that seems like a weird operation
[22:16:15] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[22:16:32] <Adoi> bjs, the amount argument must comprise max. 7 characters
[22:16:33] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 258 seconds)
[22:16:37] <Adoi> in the output
[22:17:07] *** Joins: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net)
[22:17:07] *** Joins: chaosite (~chaosite@user/chaosite)
[22:17:09] <Adoi> that is given in the question, sorry, I havent provided that part of the question
[22:17:18] <bjs> Adoi: so (a) why are you doing this with strings? Surely "max 7 characters" means "less than 10000000" which is a numeric property and (b) surely the correct answer is to give an error not to just silently cut out some of the numbers
[22:17:42] <bjs> Adoi: if i asked my bank to send $123.45 I'd expect them to either send it or not, not to go "oh we sent $12 instead"
[22:17:46] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:f8bb:ce51:4b48:3fbe)
[22:17:51] <bjs> :)
[22:18:38] *** Joins: entuland_ (~entuland@user/entuland)
[22:19:04] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[22:19:20] *** Joins: c10l (~c10l@89.34.167.207)
[22:19:39] <u4t> one thing to note is that the input being given is numeric, not strings
[22:20:00] *** Joins: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at)
[22:20:06] <Adoi> bjs, max 7 characters need not necessarily be less than 10000000, as all numbers are rounded of two to decimals
[22:20:09] <u4t> so converting the ints and floats to strings and back seems ... wasteful
[22:20:16] *** Joins: JordiGH (~jordi@user/jordigh)
[22:20:26] <bjs> Adoi: "max N characters" is a weird thing to say for a float/number
[22:20:30] <Adoi> so maybe the integer part being less than 100000
[22:20:39] <JordiGH> It feels like pytest is taking a long time to run. It seems to spend a lot of time collecting items, I think.
[22:20:41] *** Quits: waynew (~wayne@user/waynew) (Quit: returning later)
[22:20:45] <u4t> just because the output has to be 7 characters wide, doesn't mean the input has to be 7 characters wide
[22:20:54] <JordiGH> It sits there for like 15 seconds to get ready to run 8 small tests.
[22:20:57] <Adoi> u4t, sure
[22:21:00] <JordiGH> Those 15 seconds are eating away at my soul, man.
[22:21:05] <JordiGH> How do I find out what it's doing for so long?
[22:21:22] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[22:22:38] <u4t> bjs: doing it "properly" would mean a complete rewrite (:
[22:22:53] <twomoon> I now understand better what it means for C to have undefined behavior after reading more on the subject
[22:23:10] *** Joins: zweimer (~Fragr@2a02:908:d20:26e0:dc3b:a6c:a6e4:1757)
[22:23:18] <bjs> twomoon: it means that if your program does anything undefined, the entire program can do anything
[22:23:22] <Adoi> since these not-yet-that-much-apparent flaws do not hinder the output to be halfway correct, maybe I can first try to sort out the list items if that is possible?
[22:23:35] <Adoi> I mean trying to output them as rows
[22:23:40] <jinsun> JordiGH: you can run pytest --collect-only to see how much time it takes to collect tests
[22:24:02] <zweimer> I created a GUI with pyqt5 and would like to do an animated drawing (which should change every 0.5 seconds). Is there something like a game loop in pyqt5 to handle and schedule the animation?
[22:24:17] <Adoi> because the other way I dont seem to get out of it :)
[22:24:32] <JordiGH> jinsun:
[22:24:33] <JordiGH> real	0m18.287s
[22:24:41] <JordiGH> Gah, that's a long time to collect.
[22:24:41] <u4t> Adoi:  ok, so what are you trying with your __str__ function?
[22:24:56] <JordiGH> How do I tell it exactly where stuff is? Or how do I figure out what it's trying to collect?
[22:25:00] <JordiGH> This is cramping my style, man.
[22:25:06] <bjs> Adoi: if I'm honest I think your code tries to do too much as strings rather than just sticking with numbers and printing fancy later. But sure,  if you have a go and show us your latest attempts we can h elp
[22:25:15] <u4t> ^
[22:26:11] <u4t> (i'd probably have done the ledger as a list of tuples, or even have a class for a ledger row. and use generators for stuff :P)
[22:26:22] *** Quits: Elvanor (~elvanor@95.165.131.184) (Quit: Konversation terminated!)
[22:26:38] <Adoi> I had a first contact with generators, but no real practice yet
[22:26:53] <Adoi> I mean, didnt wrestle with any problem containing them
[22:27:09] <Adoi> like I do now with classes :)
[22:27:41] <jinsun> JordiGH: it will import all files in its search path that start with test_ or end with _test to find tests in them, if there are too many such files and some of them take long time to run then collection will be slow
[22:27:57] <JordiGH> Okay, so let's fix that search path...
[22:28:02] <jinsun> JordiGH: https://docs.pytest.org/en/6.2.x/example/pythoncollection.html
[22:29:13] <JordiGH> jinsun: Yeah, I don't see where in this page I can see "this is how to tell exactly what to collect".
[22:29:43] <JordiGH> I can see what it collects but I want to see where it's searching that is taking 18 seconds.
[22:32:34] <JordiGH> Oh god is it looking through the node_modules mess?
[22:32:38] <jinsun> this is what is does by default if you don't configure https://docs.pytest.org/en/6.2.x/goodpractices.html#test-discovery
[22:32:46] <jinsun> *it does
[22:32:58] *** Joins: chaosite (~chaosite@user/chaosite)
[22:33:29] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:33:35] *** Quits: zweimer (~Fragr@2a02:908:d20:26e0:dc3b:a6c:a6e4:1757) (Quit: Client closed)
[22:33:35] *** Joins: waynew (~waynew@user/waynew)
[22:36:25] *** Joins: Leo (leo@the.c0ffee.shop)
[22:36:38] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:36:40] <nedbat> JordiGH: looks like norecursedirs could be useful: https://stackoverflow.com/a/62473900/14343
[22:37:07] <JordiGH> nedbat: I think I have that one and somehow adding more stuff to it made it slower??
[22:37:38] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[22:37:52] <nedbat> JordiGH: the default already avoids node_modules: https://docs.pytest.org/en/6.2.x/reference.html#confval-norecursedirs
[22:37:58] *** Quits: NakedKing (~NakedKing@user/nakedking) (Quit: Leaving)
[22:39:21] <JordiGH> I'm so tempted to just debug pytest to see where it's looking for 18 seconds.
[22:39:36] <JordiGH> Setting testpaths to the three directories that have the tests it discovers cuts down my test time to 2 seconds.
[22:39:42] <JordiGH> Including running the tests.
[22:39:54] *** Joins: agrius (~somersgre@c-73-224-209-213.hsd1.fl.comcast.net)
[22:39:59] *** Joins: Payam (~Payam@c-39bfe255.01-402-73746f25.bbcust.telenor.se)
[22:40:31] <waynew> You might try launching pytest via I think it's python -v -m pytest ... which will give you very very verbose output :P
[22:40:39] <waynew> can also strace
[22:41:23] <JordiGH> strace it is
[22:41:28] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 258 seconds)
[22:41:37] <waynew> strace is my friend <3
[22:41:54] <JordiGH> Alright, that makes it clear. It's looking through the react build.
[22:42:02] <JordiGH> But I have "react" in my norecursedirs.
[22:42:20] <JordiGH> Hm, needs more globs?
[22:42:25] <Payam> JordiGH, I know you from somewhere. Where have I talked to you?
[22:42:37] *** Quits: female_student_4 (~female_st@2a01:388:475:150::1:d0) (Quit: Client closed)
[22:42:37] <JordiGH> idk, I'm all over the internet
[22:42:46] <Payam> C#?
[22:42:58] <Payam> #programming?
[22:43:25] *** Joins: NakedKing (~NakedKing@user/nakedking)
[22:43:38] <JordiGH> C++ maybe?
[22:44:04] *** Quits: sri19 (uid477846@id-477846.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:44:11] *** Quits: waynew (~waynew@user/waynew) (Read error: Connection reset by peer)
[22:44:24] *** Joins: waynew (~waynew@user/waynew)
[22:45:02] *** Parts: Imbapokah (~pavel@88.201.129.183) ()
[22:45:23] <JordiGH> Oh, looks like we had the wrong syntax for norecursedirs
[22:45:38] <JordiGH> We had norecursedirs='.*', 'react'
[22:45:46] <JordiGH> It's supposed to be norecursedirs=.* react
[22:48:46] <agrius> Anyone, I install Jupyter NB via pip and run in browser or vscode. A guy in my school says installing ipykernal lets you skip installing Jupyter at all? Benefit?
[22:48:50] *** Joins: chaosite (~chaosite@user/chaosite)
[22:49:17] <Payam> JordiGH, maybe. I was there for a couple of years ago
[22:49:39] <SnoopJ> agrius, Jupyter is an interface, ipykernel is the thing in the background that it talks to. If you want to use it from the browser, you need both.
[22:49:57] <SnoopJ> installing Jupyter gives you both though, so if you want Jupyter, you usually just install that
[22:50:38] <agrius> But he's saying he runs in vscode and doesnt need the "MASSIVE" Jupyter install. His word.
[22:51:03] *** Joins: yogoyo (~paddy@user/yogoyo)
[22:52:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:52:44] <jinsun> if you will only use vscode and not the browser interface then you can get away with installing just ipykernel and not jupyter notebook and save some disk space I guess
[22:53:18] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[22:53:21] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[22:53:35] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[22:53:53] <SnoopJ> all of the jupyter stuff you get when you install jupyterlab is about 20 MB. If you care about 20 MB, I guess you might want to avoid installing it.
[22:54:03] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[22:54:07] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[22:54:20] <yogoyo> use the nano editor like me
[22:54:42] <agrius> Ha! I knew it.  I scanned my drive and only found about 20Mb. Thank you.
[22:54:42] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[22:55:11] <SnoopJ> agrius, jupyterlab is really good imo, but I understand why some people prefer to use something else. Sounds like your friend might just be picky :)
[22:55:27] <agrius> I started using Qute browser for fun.  Its tiny. But I will check out nano thank you!
[22:56:07] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[22:56:33] <agrius> SnooJ, I was feeling he was being a bully but picky is a nicer way to consider it. Thank you. :)
[22:56:56] <agrius> Oops. Sorry SnoopJ
[22:57:13] *** entuland_ is now known as entuland
[22:58:43] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 258 seconds)
[22:58:51] <yogoyo> why is gitesh accepted here and i am not. this is tough stuff
[22:59:43] *** Quits: nbin (~nbin@user/nbin) (Quit: ZNC - https://znc.in)
[23:00:04] *** Joins: Fiji (~Fiji@user/fiji)
[23:00:12] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:02:27] <gitesh> yogoyo: what do you want
[23:02:28] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[23:02:28] *** Joins: visl_ (visl@user/visl)
[23:03:15] <kosh> SnoopJ, while jupyter lab is nice I still prefer vscode
[23:03:16] <nedbat> yogoyo: what do you mean, not accepted?
[23:03:31] <SnoopJ> kosh, like I said, I can see the appeal
[23:04:22] *** Quits: waynew (~waynew@user/waynew) (Read error: Connection reset by peer)
[23:04:34] *** Joins: waynew (~waynew@user/waynew)
[23:04:41] *** Joins: chaosite (~chaosite@user/chaosite)
[23:04:49] <Adoi> bjs, u4t, finally this gives the output the way examples shows; https://bpa.st/7YRA
[23:06:30] *** Quits: visl (visl@user/visl) (Ping timeout: 256 seconds)
[23:07:04] *** Joins: mike18_ (~geri@217-149-162-237.nat.highway.telekom.at)
[23:07:46] *** Quits: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[23:08:26] <meejah> is there a way to tell "coverage run" to delete all old files? (e.g. instead of "coverage combine ; rm .coverage" every time?)
[23:08:51] <nedbat> meejah: "coverage erase" will remove the data files
[23:09:10] <meejah> nedbat: thanks
[23:09:27] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[23:09:59] <NoImNotNineVolt> where does pkg_resources come from? trying to figure out what version i'm on.
[23:10:08] *** Joins: node1 (~node1@user/node1)
[23:10:26] <NoImNotNineVolt> packaging==21.0, is that it?
[23:10:27] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 276 seconds)
[23:11:04] *** Joins: noneco (~noneco@dslb-188-096-064-125.188.096.pools.vodafone-ip.de)
[23:11:36] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[23:12:09] <mike18_> hi - can someone tell me whats wrong in using gunicorn? https://ideone.com/6f8qD2
[23:12:17] *** Quits: ckdcreation (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[23:12:25] <mike18_> im not sure about the dockerfile: "serverApp:app"
[23:12:56] *** Quits: optimant (~prime@user/optimant) (Quit: Quitting)
[23:13:05] *** Joins: optimant (quasselcor@user/optimant)
[23:14:44] <NoImNotNineVolt> there's an exec in python3.7/site-packages/pkg_resources/__init__.py:1448 that $employer's static analysis team is flagging as exploitable because it "could lead to a command injection". but this exec is located in a function called run_script, so, um, i'm not sure if these people are actually reading the things they analyze...
[23:15:41] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[23:16:01] *** Joins: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com)
[23:16:04] *** Quits: waynew (~waynew@user/waynew) (Read error: Connection reset by peer)
[23:17:08] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (Client Quit)
[23:17:09] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[23:17:39] *** Quits: Cyp (~cyp@192038129091.mbb.telenor.dk) (Read error: Connection reset by peer)
[23:18:00] *** Joins: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com)
[23:18:03] *** Joins: Cyp (~cyp@192038129091.mbb.telenor.dk)
[23:19:03] *** Joins: Auron (~Auron956@user/auron)
[23:19:45] <nedbat> NoImNotNineVolt: yeah, that's a bogus alert.
[23:20:31] *** Joins: chaosite (~chaosite@user/chaosite)
[23:20:38] *** Joins: y1n (~y1n@84-115-64-241.wifi.dynamic.surfer.at)
[23:20:47] *** Joins: rany (~rany@user/rany)
[23:21:32] <jinsun> NoImNotNineVolt: it comes from setuptools
[23:21:34] <NoImNotNineVolt> they marked the other ~100 as false positives. just two that they flagged as legit, and this was one. the other was also bogus imho, already wrote up my objection.
[23:21:45] <NoImNotNineVolt> jinsun: but then pip freeze doesn't show setuptools either!
[23:22:27] <NoImNotNineVolt> did setuptools get subsumed into python itself?
[23:22:39] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:23:54] <damonlynch> If anyone is interested in a platform independent way for a Python script to open the system file manager and optionally select files to highlight in it, please join me at https://github.com/damonlynch/showinfilemanager
[23:25:04] <damonlynch> I would appreciate help in best practices to make the module useful to other developers. I've never uploaded anything to PyPi before, but I do have a lot of experience with my own Python application (Rapid Photo Downloader)
[23:25:10] <bjs> NoImNotNineVolt: surprised they don't just flag "python" for being exploitable because it's a programming language :P
[23:25:10] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[23:25:32] <bjs> Adoi: is that good or bad?  I'm not sure if you are asking for follow-up help there
[23:30:42] *** Quits: emika (~emika@83.136.182.81) (Ping timeout: 240 seconds)
[23:30:45] <mike18_> hi - can someone tell me whats wrong in using gunicorn? https://ideone.com/6f8qD2  ... im not sure about the dockerfile: "serverApp:app"
[23:31:25] <jinsun> NoImNotNineVolt: no setuptools is technically separate package, but it is included with the installer (on windows) and also through ensurepip I think, probably because pip still depends on it
[23:31:30] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[23:32:00] *** Joins: emika (~emika@83.136.182.119)
[23:32:20] *** Joins: goldfish (~goldfish@user/goldfish)
[23:32:27] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 258 seconds)
[23:34:41] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:36:23] *** Joins: chaosite (~chaosite@user/chaosite)
[23:39:05] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[23:39:46] *** Quits: chris_99 (uid26561@id-26561.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:09] <NoImNotNineVolt> jinsun: i'm on ubuntu and/or suse and/or amazon linux.
[23:40:30] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[23:40:31] *** Quits: hsv (~unknown@user/hsv) (Ping timeout: 258 seconds)
[23:40:31] *** Joins: goldfish_ (~goldfish@user/goldfish)
[23:40:39] <NoImNotNineVolt> no ensurepip in `pip freeze` either :P
[23:40:53] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[23:40:56] <NoImNotNineVolt> what's the normal way of determining your setuptools version in py3?
[23:41:12] *** Joins: Betal (~Beta@user/betal)
[23:42:10] *** Joins: ckdcreation (~ckdCreati@147.55.133.132)
[23:42:30] *** Joins: hsv (~unknown@user/hsv)
[23:42:39] <jinsun> NoImNotNineVolt: ensurepip is standard library, for setuptools try pip show setuptools
[23:44:19] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[23:44:45] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[23:45:29] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[23:45:41] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[23:45:43] <ChrisWarrick> (debian/ubuntu does not care about "standard library".)
[23:45:46] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[23:47:24] <jinsun> ah yes, but ensurepip was a sidetrack anyway
[23:47:25] *** Quits: Payam (~Payam@c-39bfe255.01-402-73746f25.bbcust.telenor.se) (Quit: Leaving)
[23:47:57] *** Joins: chaosite (~chaosite@user/chaosite)
[23:48:33] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[23:49:49] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:50:22] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 272 seconds)
[23:50:49] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[23:50:52] *** Joins: varaindemian_ (uid73404@id-73404.charlton.irccloud.com)
[23:51:32] *** varaindemian_ is now known as varaindemian
[23:51:44] <NoImNotNineVolt> jinsun: thanks, didn't know 'pip show'!
[23:55:16] *** Joins: greedom (~greedom@2001:16b8:2ea3:f600:f0c7:9aa0:b86a:baef)
[23:55:57] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:c9e:1cfa:7bc2:1ccc) (Quit: Textual IRC Client: www.textualapp.com)
[23:55:59] *** visl_ is now known as visl
[23:56:44] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:57:01] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:7563:2a86:83d4:d48d) (Quit: Leaving)
[23:59:14] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[23:59:46] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 240 seconds)
