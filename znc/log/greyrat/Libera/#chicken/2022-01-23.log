[00:26:57] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 240 seconds)
[01:37:40] *** Joins: alexshendi (~alexshend@pd9f15a7d.dip0.t-ipconnect.de)
[01:44:15] *** Quits: alexshendi (~alexshend@pd9f15a7d.dip0.t-ipconnect.de) (Quit: leaving)
[01:56:18] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[02:01:46] <ZombieChicken> Hello. Is there a way to load code into a running REPL via pipe/socket?
[02:03:31] <wasamasa> did you try nrepl?
[02:04:41] <ZombieChicken> I'll look at that. Thanks
[02:58:55] *** Joins: johnjaye (~pi@173.209.65.233)
[03:15:31] *** Joins: monkey_ (~user@190.104.116.153)
[04:30:08] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:47:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:17:40] *** Joins: klovett_ (~klovett@166.205.90.179)
[06:19:16] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[06:34:18] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[08:09:02] *** Quits: klovett_ (~klovett@166.205.90.179) (Quit: ZZZzzz…)
[09:04:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:45:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:47:33] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[10:10:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:11:10] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[10:28:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:06:59] <johnjaye> what is this scheme2c system i see in my raspi repo? its' not in debian packages and is r4rs
[11:07:04] <johnjaye> sometime of predecessor of chicken?
[12:18:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:18:37] *** Quits: ecloud (~quassel@192.89.120.58) (Ping timeout: 240 seconds)
[12:29:19] *** Joins: ecloud (~quassel@192.89.120.58)
[12:29:26] <vandusen> SPAM! SPAM! SPAM! by freee
[13:37:03] <nmeum> is there any specific reason why csc passes -Wl,-rpath=$(LIBDIR) unconditionally by default? shouldn't LIBDIR be part of the default rpath on Linux anyhow?
[14:02:44] <vandusen> SPAM! SPAM! SPAM! by freeee
[14:08:16] *** Joins: tasuki (~tasuki@user-5-173-139-101.play-internet.pl)
[14:11:16] <wasamasa> johnjaye: it's a scheme->C compiler by DEC
[14:11:25] <wasamasa> johnjaye: old as the hills
[14:11:41] <wasamasa> johnjaye: the "Don't fidget with widgets" paper uses it
[14:11:55] <johnjaye> i wonder how it got into the raspi repo
[14:12:04] <johnjaye> it came with a copy of the r4rs standard
[14:12:07] <wasamasa> ezd is the software used in that paper
[14:12:15] <wasamasa> there's a mostly complete CHICKEN port of it
[14:12:42] <johnjaye> i see
[14:13:35] <johnjaye> > The best way to improve many programs is not to replace text interfaces based on command line flags with graphical buttons, but to provide programs with a simple way to draw pictures.
[14:13:43] <wasamasa> it's a pretty cool paper
[14:14:38] <johnjaye> i wouldn't have guessed based on the description
[14:14:47] <johnjaye> it sounds like it's saying to draw buttons in ms paint
[14:15:10] <wasamasa> making a GUI toolkit that's not a complete pain to use is quite the challenge and this appears to be one
[14:15:21] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[14:16:19] <tasuki> hi, newbie here... how do I explore the chicken stdlib? I've got `csi` set up with readline... how can I view the function definitions? eg typing `car` shows me `#<procedure (scheme#car x)>` which... I don't find all that helpful?
[14:16:52] <wasamasa> you need to browse the sourcecode for that
[14:16:58] <wasamasa> which is kind of hard to read
[14:19:20] <wasamasa> https://code.call-cc.org/gitweb/?p=chicken-core.git;a=blob;f=c-platform.scm;h=6bb57ab4e5b0da7d41e5faf815c5168a887a8b26;hb=HEAD#l422
[14:19:39] <johnjaye> ah is it like geogebra where you draw a line or circle then you can click on it and edit its properties? that would be amazing
[14:20:02] <wasamasa> https://code.call-cc.org/gitweb/?p=chicken-core.git;a=blob;f=runtime.c;h=c83049138ab2cb76a9149a0ee36f9a5de25be9c5;hb=HEAD#l5506
[14:20:57] <tasuki> wasamasa thank you! but this is probably a different version of chicken-core than ubuntu provides? I feel like in a minefield...
[14:21:13] <wasamasa> then you'll have to download a copy of that and look at it yourself :P
[14:21:15] <tasuki> I get that I can go and find the precise tag, look at that, but gee so much work?
[14:21:23] <wasamasa> yes
[14:21:23] <johnjaye> that's the definition of car? o_o
[14:21:32] <wasamasa> yeah, currently looking for C_u_i_car
[14:21:37] <wasamasa> which is probably the unsafe version
[14:22:31] <tasuki> another thing, say you didn't know that `string-intersperse` required `(import (chicken string))` (I sure didn't!) ... how would you go about finding out?
[14:22:37] <wasamasa> https://code.call-cc.org/gitweb/?p=chicken-core.git;a=blob;f=chicken.h;h=9274606a64220d483dc4808cf08356d9d8895993;hb=HEAD#l1362
[14:22:46] <wasamasa> you can use chicken-doc for that
[14:22:50] <wasamasa> or api.call-cc.org
[14:23:20] <johnjaye> #define C_u_i_car(x)                    (*C_CHECKp(x,C_pairp(C_VAL1(x)),&C_block_item(C_VAL1(x), 0)))
[14:23:26] <wasamasa> welcome to C
[14:24:23] <johnjaye> complementary pointers and widechar handling functions available at the snack bar
[14:24:49] <wasamasa> lol, don't get me started on localization in C
[14:26:08] <fantazo> wasamasa: welcome to C when schemers write it.
[14:27:58] <wasamasa> I don't think that's a fair characterization
[14:28:35] <Bunny351> tasuki: api.call-cc.org is the easiest way, there is also a chicken-doc egg that lets you search the API locally
[14:28:53] <johnjaye> well it's funny you bring it up wasa because i was actually wondering which scheme implementation is the best to study
[14:29:02] <johnjaye> e.g. chicken chez racket guile
[14:29:03] <wasamasa> for example if I look at ruby's implementation of array access, lol
[14:29:06] <wasamasa> highly optimized shit
[14:29:12] <wasamasa> loads of complicated defines
[14:29:17] <Bunny351> mmeum: that way one can install chicken anywhere without regarding the default rpath
[14:29:28] <wasamasa> it's something that comes with real-world implementations, as opposed to educational ones
[14:29:48] <tasuki> Bunny351 and wasamasa, thank you both, api.call-cc.org has different versions than I do, trying to figure out the chicken-doc egg :)
[14:29:56] <johnjaye> i guess api.call-cc.org doesn't show c functions?
[14:29:58] <wasamasa> are you on C4?
[14:30:13] <wasamasa> https://api.call-cc.org/4/doc/
[14:30:53] <johnjaye> wasamasa: that reminds me one time I looked at the code of some c library, musl or something. looked at a simple function like memcpy and it had like 3 different #ifdef cases
[14:31:08] <wasamasa> musl is pretty readable overall
[14:31:09] <johnjaye> all based around copying the bytes as fast as possible on certain machines i guess
[14:31:10] <wasamasa> try glibc
[14:31:16] <tasuki> I'm on 5.1, while the website is 5.3
[14:31:19] <wasamasa> there's like seven levels of indirection
[14:31:26] <Bunny351> musl is a breeze compared to glibc
[14:31:30] <johnjaye> oh it was newlib actually
[14:31:37] <wasamasa> and GNU projects use code generation
[14:31:41] <wasamasa> you cannot just read the sources, no
[14:31:48] <johnjaye> yes. very true!
[14:31:50] <wasamasa> you need to execute commands to generate the missing sources
[14:31:55] <wasamasa> newlib is also ok
[14:32:07] <wasamasa> they love using tiny source files for some reason, but that's the only annoyance
[14:32:12] <wasamasa> it makes porting easier I guess
[14:32:13] <johnjaye> there's something satisfying about freebsd where i can just go to /usr/src and read whatever i want
[14:33:41] <johnjaye> and there won't be 7 levels of indirection as you say
[14:34:11] <wasamasa> ok, anyone wants to see the ruby equivalent of setting an array slot?
[14:34:26] <wasamasa> as for which scheme implementations are easy to study, hm
[14:34:30] <wasamasa> chibi seems fine
[14:34:37] <wasamasa> I've heard of scheme48
[14:34:52] <wasamasa> if you don't care about it being a scheme, Nils Holm is good at writing tiny code
[14:36:44] <johnjaye> why in chicken is everything prefaced with C
[14:36:59] <johnjaye> C_SLOT_LOCATIVE, C_CHAR_LOCATIVE, etc
[14:37:11] <wasamasa> it could be an abbreviation for an animal
[14:37:43] <wasamasa> there's a few ballsy prefixing conventions I've seen
[14:37:44] <fantazo> wasamasa: or chocolate, of course!
[14:38:16] <wasamasa> like SCM_
[14:38:27] <johnjaye> Nils Holm does have book about scheme apparently. Scheme 9 from Empty Space lol
[14:38:34] <wasamasa> yes
[14:38:45] <wasamasa> but he has a lot more books about tiny lisps powerful enough to run classics
[14:39:00] <johnjaye> i guess nobody dares to use SCHEME_ as a prefix
[14:39:01] <wasamasa> like the n-queens problem or a source code formatter for its own language
[14:39:35] <johnjaye> > Lightweight Compiler Techniques (1996)
[14:39:42] <fantazo> johnjaye: that would be too hard to write. you know you need to write really terse, to be considered a programmer.
[14:40:32] <wasamasa> I opened a random file in my copy of scheme48 and found this: https://github.com/rmloveland/scheme48-0.53/blob/master/c/external.c#L14-L17
[14:40:45] <wasamasa> it's very relatable
[14:43:17] <wasamasa> you should grab your own copy though from https://www.s48.org/
[14:48:06] <johnjaye> i did see scheme48 in the repo list as well
[14:48:09] <johnjaye> but not familiar with it
[14:52:44] <johnjaye> trying a test compile right now
[14:52:48] <johnjaye> -D__COMPILING_SCHEME48_ITSELF__
[14:53:03] <johnjaye> macro definitions like this concern me
[14:56:25] <johnjaye> ah it successfully compiled. very fast too
[14:56:35] <johnjaye> although it calls the binary 'go' for some weird reason
[14:57:23] *** Quits: tasuki (~tasuki@user-5-173-139-101.play-internet.pl) (Ping timeout: 256 seconds)
[15:19:10] <wasamasa> it has an explanation for that
[15:19:15] <wasamasa> seems to be a win32 thing
[15:23:07] <wasamasa> https://www.s48.org/cgi-bin/hgwebdir.cgi/s48/file/tip/c/win32/scheme48arch.h#l7
[15:30:24] <johnjaye> your search and recover skills are impressive
[15:30:47] <johnjaye> without find or grep i'm clueless
[15:52:32] <Bunny351> ugh, declspec...
[16:13:31] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 256 seconds)
[17:05:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:19:54] *** Joins: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch)
[17:20:23] <v_m_v> Hello there. Have anyone tried to run Chicken on Onion MISP boards? :)
[17:28:49] *** Quits: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch) (Remote host closed the connection)
[17:53:18] *** Joins: klovett (~klovett@166.205.90.179)
[18:18:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc)
[18:18:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc) (Changing host)
[18:18:20] *** Joins: skapata (~Skapata@user/skapata)
[19:02:07] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[19:39:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:42:34] *** Joins: ublx (~ublx@user/ublx)
[20:30:17] <vandusen> [eggs repo (r41039, by kon)] hash unused comment
[20:31:32] <vandusen> [eggs repo (r41040, by kon)] C5 uses import
[20:51:56] *** Joins: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch)
[21:04:48] <mario-goulart> Bunny351, wasamasa: what would be a good german adjective for "misplaced" (context: a letter is not at the right place in a word).  Would versetzt work?
[21:14:29] <florz> mario-goulart: vertauscht/verschoben/an der falschen Stelle, depending on context
[21:17:45] <mario-goulart> Thanks, florz.  I think "an der falschen Stelle" would be the perfect one, but it's too long. :-)
[21:19:46] <mario-goulart> Does missplaziert even exist?
[21:21:41] <florz> nah, fehlplatziert might be the word that you are looking for, but that doesn't really work for that context
[21:22:24] <florz> potentially, if it needs to be short, you could go with something like "die Buchstaben sind durcheinander"
[21:24:18] <mario-goulart> The exact context is: I made a clone of wordle for the terminal, and I have a legend of colors.  One of the colors indicates that a letter is at the wrong position in the word.
[21:26:45] <florz> my guess is that the context of "we are talking about letters in the word" can be assumed without spelling it out? then I'd probably just label that "falsche Position"?
[21:28:50] <mario-goulart> Here's the thing in in English: http://parenteses.org/mario/misc/wordle.png
[21:29:30] <mario-goulart> I need a word for "misplaced" in German, ideally it should fit that tiny space (the blue area).
[21:29:46] <Bunny351> fehlplatziert ist doch in Ordnung!
[21:33:08] <mario-goulart> Does http://parenteses.org/mario/misc/wordle-de.png look acceptable?
[21:34:09] <florz> s/abwesend/fehlt/
[21:35:00] <florz> "fehlplatziert" doesn't feel idiomatically right, but certainly is unambiguous, and I wouldn't know anything better, really, so ...
[21:35:49] <mario-goulart> Thanks, florz 
[21:36:19] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 256 seconds)
[21:36:31] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[21:37:37] <mario-goulart> So now it's [fehlt] [fehlplaziert] [korrekt]
[21:46:49] *** Joins: shawnw (~shawn_w@152.44.212.188)
[22:01:44] *** Joins: shawn (~shawn_w@152.44.212.188)
[22:04:39] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 256 seconds)
[22:20:21] *** Quits: fancycade (~fancycade@2600:1700:eec0:8e80:8639:beff:fe6a:1bb3) (Ping timeout: 245 seconds)
[22:32:16] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[22:34:44] *** Quits: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch) (Remote host closed the connection)
[22:46:27] *** Joins: m455 (~m455@user/m455)
[22:53:23] *** Joins: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch)
[23:14:17] <v_m_v> Hello there. Something has happend with chicken website. I am trying to use search there and I am getting "500" :(
[23:15:30] <mario-goulart> v_m_v: which website?
[23:15:55] <mario-goulart> v_m_v: could you paste the URL which is giving you error 500?
[23:16:02] <v_m_v> wiki.call-cc.org
[23:16:12] <v_m_v> http://wiki.call-cc.org/search?text=async&ident=
[23:19:46] <mario-goulart> v_m_v: thanks for reporting that.  I think it should be fixed now.
[23:20:24] <v_m_v> Yes :) What have happend ?
[23:21:42] <v_m_v> It is so good to come back here. I wish that other communities were as good as this one. Ehhh
[23:23:10] <mario-goulart> The shitty search engine we use broke again.
[23:23:49] <v_m_v> Can we write one in chicken? :D
[23:24:02] <mario-goulart> Define "we". :-)
[23:24:21] <v_m_v> "you" guys :D I am still learning :D
[23:26:34] <v_m_v> BTW I am (mostly) Rust developer. You know Rust..."the most secure programming language in the world". The funny part is that I have a way better feeling of security in anything lisp/scheme based ..then in Rust.
[23:27:32] <mario-goulart> Regarding writing a search engine in CHICKEN, it is certainly possible, but probably quite some work.
[23:29:41] <v_m_v> There is a lib for sqlite .... and there is https://www.sqlite.org/fts5.html. So maybe it would not be that hard.
[23:30:12] <Bunny351> mario-goulart: it's not _that_ hard, I think.
[23:30:42] <Bunny351> I have one that I use for PDFs, documents, etc.
[23:31:07] <mario-goulart> Oh, is it chicken-installable?
[23:31:21] <Bunny351> does stemming, very fast search, slow indexing (but ok for wiki pages)
[23:31:28] <Bunny351> it is not written in scheme, I'm afraid
[23:32:06] <Bunny351> We can talk about this, once I have some other things out of the way, ok?
[23:32:23] <mario-goulart> Sure.  That would be great.
[23:33:47] <Bunny351> only depends on gdbm, snowball (the stemmer) and rc(1)
[23:33:56] <Bunny351> (oh, and FLENG...)
[23:35:15] <Bunny351> but porting it to Scheme shouldn't be too hard
[23:37:09] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[23:38:01] <mario-goulart> But if is already done in FLENG, we can just use it, no?
[23:38:29] <mario-goulart> I assume it has no dependencies.
[23:42:45] <Bunny351> no, it doesn't. but it would need locking. it also stores the files separately, so it might need some changes
[23:52:08] *** Quits: v_m_v (~vm_v@adsl-84-226-66-30.adslplus.ch) (Remote host closed the connection)
[23:54:17] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 240 seconds)
[23:56:32] *** Joins: johnjaye (~pi@173.209.65.233)
