[05:25:05] <Bike> Which you can do either by adding a slot to your direct slot definition class, or by specializing one of the instance initialization methods - so basically the same as for any old class
[05:25:23] <Bike> Next, the system will compute an effective slot definition - this is the definition incorporating inherited information
[05:25:47] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[05:26:17] <Bike> For that to work with your new information, you will have to define a method on compute-effective-slot-definition that figures out how to merge the information from all of the direct slot definitions, and puts that in the effective slot object
[05:27:00] <Bike> and that should be about it
[05:27:37] <Bike> I linked it the other day, but you can see an example of this in cl-jupyter, which adds a :trait keyword
[05:27:41] <Bike> https://github.com/yitzchak/common-lisp-jupyter/blob/master/src/widgets/traits.lisp
[05:28:07] <Bike> you can see the slot definition classes that are defined, as well as methods on effective-slot-definition-class, compute-effective-slot-definition, and direct-slot-definition-class
[05:30:12] *** Joins: etiago (~etiago@user/etiago)
[05:31:31] <Josh_2> Okay I'll try that out
[05:40:02] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:40:22] *** Joins: [deleted] (~livoreno@user/notzmv)
[05:40:39] *** Quits: random-nick (~random-ni@87.116.183.72) (Ping timeout: 265 seconds)
[05:41:19] <Josh_2> Do I need both a direct and effective version of my slot?
[05:42:04] <Bike> Probably. Do you understand the difference?
[05:42:27] <Josh_2> No not really
[05:42:43] <kakuhen> Is there a nice way to uninstall packages from quicklisp?
[05:43:00] <kakuhen> I did the mistake of trying out qtools on a Mac and pulled in two dozen dependencies that I don't use or need
[05:44:57] <_death> there is ql:uninstall
[05:45:11] <Bike> Josh_2: Say you have (defclass foop () ((%bar :initarg :bar :type integer))) (defclass fooc (foop) ((%bar :type fixnum)))
[05:45:29] <Bike> Josh_2: there's a direct slot for the %bar in foop, and a different direct slot for the %bar in fooc
[05:45:41] <_death> kakuhen: though I tend to just delete the directories
[05:45:58] <Bike> Josh_2: Then, an effective slot for fooc has the information from both - initarg :bar, type fixnum
[05:46:08] <kakuhen> _death: hmm this doesnt seem to follow dependencies, but I guess that's fine
[05:47:56] <kakuhen> _death: after you delete the folders, is there any additional steps you do?
[05:48:09] <kakuhen> e.g. deleting downloaded archives and the text files?
[05:48:09] *** Quits: eddof13 (~textual@187.246.227.157) (Quit: Textual IRC Client: www.textualapp.com)
[05:49:02] <Josh_2> Bike: right so it inherits keyword values from its superclass
[05:49:27] <Bike> The inheritance can get complicated if there are multiple superclasses, or depending on the information
[05:49:40] <Bike> ::clhs 7.5.3
[05:49:42] <Colleen> Clhs: section 7.5.3 http://www.lispworks.com/documentation/HyperSpec/Body/07_ec.htm
[05:49:47] <Josh_2> So if I want subclasses of classes defined with my superclass then I need an effective slot as well as a direct slot
[05:50:01] <_death> kakuhen: nope.. looking at the uninstall code it does delete some text files and the local archive, but I never did that
[05:50:07] <Bike> An effective slot is computed whether there are superclasses or not
[05:50:16] <Bike> The effective slot is what's actually passed to slot-value-using-class, etc
[05:51:04] <Josh_2> Well I dont think I will have to specialize slot-value-using-class
[05:51:46] <Bike> No, I'm just saying you need an effective slot anyway
[05:51:51] <Josh_2> oh
[05:51:58] <Josh_2> so I do need both?
[05:52:02] <Bike> Probably
[05:52:14] <Bike> effective slots are what's returned by class-slots, for example
[05:52:24] <kakuhen> _death: I see. Thanks for helping me
[05:52:25] <Bike> i don't know the nature of your customization
[06:00:24] <Josh_2> Okay, I am getting an error saying there is no application method for generic function sb-mop:slot-definition-allocation when called with <my direct slot>
[06:00:24] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:00:32] <Josh_2> applicable*
[06:00:37] *** Joins: [deleted] (~livoreno@user/notzmv)
[06:00:54] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:01:14] *** Joins: [deleted] (~livoreno@user/notzmv)
[06:03:35] <Josh_2> However I do not see any explicit specializing of this method in your code Bike
[06:07:55] <Bike> does your slot definition class inherit from the standard classes?
[06:09:05] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:12:16] <Josh_2> Opps missed the standard at the start of standard-direct .. etc
[06:12:26] <Josh_2> And it worked!
[06:21:52] *** X-Scale` is now known as X-Scale
[06:33:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[06:34:13] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:39:08] <Josh_2> Thanks for your help Bike! I'm sure I'll be asking for more help tomorrow xD
[06:40:41] <Bike> i am happy to be of assistance
[06:41:16] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:42:07] *** Joins: prxq_ (~quassel@x4db6e134.dyn.telefonica.de)
[06:42:16] *** Quits: prxq (~quassel@x4db91f0f.dyn.telefonica.de) (Ping timeout: 268 seconds)
[06:53:56] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[07:06:42] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 244 seconds)
[07:08:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[07:09:27] *** Quits: mortemeur (~mortemeur@pool-173-76-99-163.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[07:09:41] *** Joins: mortemeur (~mortemeur@pool-173-76-99-163.bstnma.fios.verizon.net)
[07:10:21] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[07:23:50] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[07:24:09] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[07:31:33] *** Joins: dsk (~dsk@user/dsk)
[07:34:48] <beach> Good morning everyone!
[07:38:38] <kakuhen> Good evening
[07:48:30] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[07:52:21] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:53:44] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[07:54:00] *** Parts: bpanthi977 (~Thunderbi@103.152.144.53) ()
[07:54:08] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[07:59:06] <phantomics> Morning beach
[08:03:30] <rdrg109> Good evening
[08:05:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 264 seconds)
[08:06:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:08:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[08:08:43] *** Lord_of_Life_ is now known as Lord_of_Life
[08:10:07] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:13:23] *** Joins: srhm (~ascii@user/srhm)
[08:15:39] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:22:54] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[08:27:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:31:13] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Write error: Connection reset by peer)
[08:35:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[08:35:44] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[08:35:56] <raeda> Hi beach
[08:44:33] <beach> raeda: Did you find a Common Lisp system to contribute to?  Or a separate project to work on?
[08:45:27] <raeda> I wanted to contribute to ABCL, but life's been getting in the way :(
[08:45:49] <beach> Ah, yes, that tends to happen sometimes.
[08:47:16] <raeda> Instead of retrofitting ABCL with new JVM features, it might be easier to make a JVM backend for SICL though
[08:48:00] <beach> That's an interest[09:18:11] <mayureshkathe> beach: true that, our mechanical engineers at l&t used to rip out their hair at times while sharing AutoLisp code.
[09:18:18] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:19:31] <beach> mayureshkathe: Several projects I have known in the past chose C++ "because the compiler is known to generate fast code", but then to keep sane, the developers introduce smart pointers and reference counters, thereby slowing down the code by a factor 10 or so compared to the equivalent Common Lisp code.
[09:19:44] <mayureshkathe> another off-topic question; if my aim is to work with common lisp just as a hobby, would it make sense to migrate to LispWork from SBCL under Windows?
[09:20:03] <beach> mayureshkathe: But they still think their system is as fast as it can be, because, after all, the C++ compiler is known to generate fast code, right?
[09:20:05] <susam> Sounds totally on topic to me :)
[09:20:36] <mayureshkathe> susam: :)
[09:21:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[09:21:39] <mayureshkathe> i am really uncomfortable with emacs.
[09:22:08] <mayureshkathe> probably because i'm so used to regular code editors like visual studio.
[09:22:23] <mayureshkathe> though visual studio is an 'ide'.
[09:26:31] *** Quits: zacts (~zak@user/zacts) (Quit: gtg)
[09:27:30] <mayureshkathe> is cmucl dying out, i don't even see a package under ubuntu.
[09:27:42] <mayureshkathe> though freebsd only has cmucl and not sbcl.
[09:28:08] <moon-child> ? there's sbcl on freebsd
[09:28:33] <mayureshkathe> moon-child: in the ports and packages!
[09:28:56] <mayureshkathe> wasn't there the last time i checked 2 years back.
[09:29:24] <moon-child> https://www.freshports.org/lang/sbcl
[09:29:48] <moon-child> seems to have ben around since 2011
[09:30:14] <mayureshkathe> actually since 2003. see "port-added" section.
[09:30:29] <mayureshkathe> golly, how could i've missed it?
[09:31:32] <mayureshkathe> okay, in the meanwhile, i took a decision, i'm sticking with ubuntu + sbcl + emacs + slime
[09:31:56] <mayureshkathe> i just remembered that i have a "happy hacking keyboard" stashed away.
[09:32:19] <mayureshkathe> the control key is in the right location for use with emacs.
[09:33:01] <susam> mayureshkathe: I switched to Emacs after 18 years of Vim. I like it. It is just took a while to become comfortable with it.
[09:33:25] <edgar-rft> mayureshkathe: Ubuntu is based on Debian packages and if I remember right then CMUCL was dropped from Debian because it can't be automatically built by C-style autotools. Raymond Toy complained about this some time ago.
[09:33:51] <moon-child> I remain halfway between emacs and vim.  And started working on my own texteditor so we'll see what happens
[09:33:54] <mayureshkathe> susam: right, i figured that too, also that 'hhk' would help a lot.
[09:34:01] <susam> The main reason I switched was because I was using Emacs + SLIME for Lisp already which gradually kept exposing me to Emacs' other features. Over time I realized that I could be equally productive with Emacs if I were to use it fulltime.
[09:34:10] <moon-child> edgar-rft: doesn't debian ship a lot of non-autotools-based packages, though?
[09:35:02] <mayureshkathe> edgar-rft: does that mean sbcl can be built with c-style autotools?
[09:36:14] <edgar-rft> One of the main reasons why SBCL was forked from CMUCL is because the CMUCL build process needs to be hand-tuned and is a bit whacky.
[09:36:37] <mayureshkathe> ah, okay.
[09:36:52] <mayureshkathe> also heard that they did a lot of clean-up under sbcl!
[09:37:33] <edgar-rft> yes, lots of the hand-tuned CMUCL assembly code was rewritten in C
[09:38:02] <jackdaniel> beach: speaking of c++: this language is less than the sum of its parts (i.e there are numerous sensible parts of c++ but put together they don't really play)
[09:38:08] <loke[m]> beach: at the same time Fortran is shaking its head, looking from the side.
[09:38:17] <mayureshkathe> ah, now i understand why cmucl was so much faster that c
[09:39:20] <edgar-rft> mayureshkathe: CMUCL is probably faster in some aspects but SBCL is *much* easier to maintain
[09:39:41] <beach> Heh!
[09:43:41] <mayureshkathe> beach: there was a numerical processing system written in cmucl which was way faster than all those written in c.
[09:44:50] <mayureshkathe> okay, time for me to go. nice chatting-up with you folks. catch up tomorrow.
[09:44:51] <moon-child> I find it doubtful you can do numerical processing way faster than any existing solution; the bottleneck is generally memory bandwidth, and when it's not it's usually the hardware's numerical capacity
[09:45:03] <mayureshkathe> bye
[09:45:21] <mayureshkathe> moon-child: check out unum-3 and posits
[09:45:24] *** Quits: mayureshkathe (~mayuresh@182.58.219.175) (Quit: Leaving)
[09:49:26] <edgar-rft> CMUCL definitely is a great piece of work but the practical problem is that with today's multi-core and multi-level-cache CPUs mainaining *fast* assembly code is a real challenge. The low-level hardware has become a lot more complex than it was at the times when CMUCL had started.
[09:50:12] <moon-child> I don't know as it's more challenging per se, but the performance characteristics have definitely changed
[09:50:34] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[09:53:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:54:05] <raeda> What are people's opinions on Lem? I'm not an Emacs power user so the two are pretty much the same for me
[09:55:27] *** Joins: ibinderwolf (~irc@81.161.232.13)
[10:12:32] <coat> What does Lem stand for? Lisp Editor Macros?
[10:15:11] <flip214> I only know Stanislaw Lem
[10:15:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[10:16:27] *** Joins: killsushi (~killsushi@user/killsushi)
[10:17:23] <beach>  
[10:17:23] <beach> raeda: It looks like a pretty traditional Emacs clone to me, except that it is written in Common Lisp, of course.
[10:17:30] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[10:18:10] <beach> raeda: The result of that is that it will inevitably be missing lots of Emacs features, while not providing a substantial improvement to editing Common Lisp code.
[10:18:12] <flip214> so like Hemlock
[10:18:30] <raeda> coat: not sure what it stands for, but it's an editor written in CL https://github.com/lem-project/lem
[10:18:31] <beach> raeda: I haven't used it myself, though.  Just looked at the cde.
[10:18:35] <beach> code.
[10:19:24] <beach> raeda: On the other hand, we are working (very slowly) on an editor that we hope will provide a much better experience with editing Common Lisp code, namely Second Climacs.
[10:19:31] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[10:20:05] <beach> Again, even when configured to look like Emacs, it will obviously lack tons of features of Emacs, but at least it will have the advantage over Emacs for editing Common Lisp code.
[10:20:07] <coat> does Lem support CL as a configuration language? the readme does not say a lot about the kind of things curious folks would like to know.
[10:20:52] <coat> one thing I like about Emacs is that it is first and foremost an Emacs Lisp interpreter and Emacs, the editor, the UI, etc. are coded in that Emacs Lisp interpreter. so Emacs Lisp interpreter starts first and executes the editor.
[10:20:58] <beach> coat: Since the entire thing is written in Common Lisp, it would be surprising if you couldn't modify it in arbitrary ways.
[10:21:02] <coat> does Lem have a similar design?
[10:21:29] <coat> beach: ok
[10:21:33] <beach> Lem uses existing Common Lisp implementations.
[10:22:12] <beach> Which is a better design in my opinion than Emacs Lisp.  Though things were different when Emacs was written, so this is not an accusation of bad design.
[10:23:39] <beach> I frequently quote (from memory) my email to RMS when he announced GNU Emacs.  I wrote something like "I think it would be much better to first write a real Lisp system, and then write Emacs in it" (as I had experience from with Multics Emacs), to which RMS answered "Sounds good.  Let me know when you have implemented it".
[10:25:07] <White_Flame> are you going to mail him again when SICL is done?
[10:25:19] <beach> I might :)
[10:25:31] <beach> He doesn't like Common Lisp, though.
[10:29:26] <beach> I am not sure he remembers that I was the author of that mail, but I have met RMS a few times much later, and he was in fact an invited guest of our department for I think two weeks at some point.
[10:30:41] <White_Flame> if you still have that email, you could just construct a quoted reply
[10:30:56] <beach> I may actually have it somewhere.
[10:35:12] *** Quits: cjb (~cjb@user/cjb) ()
[10:37:23] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[10:37:48] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[10:46:39] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[10:46:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:52:39] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[10:52:54] *** Joins: amb007 (~a_bakic@214.105.204.77.rev.sfr.net)
[10:54:50] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:54:55] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[11:00:03] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:00:49] *** Joins: leeb_ (~leeb@KD111239153068.au-net.ne.jp)
[11:04:00] *** Quits: leeb (~leeb@KD111239153143.au-net.ne.jp) (Ping timeout: 265 seconds)
[11:07:19] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[11:08:45] *** Joins: ibinderwolf__ (~irc@81.161.232.13)
[11:10:26] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 258 seconds)
[11:12:13] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[11:25:59] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[11:27:16] *** Joins: mayureshkathe (~mayuresh@182.58.204.157)
[11:27:40] <mayureshkathe> hello, again. :)
[11:29:38] <beach> Welcome back.
[11:43:56] *** Quits: amb007 (~a_bakic@214.105.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[11:44:10] <mayureshkathe> :)
[11:44:18] <mayureshkathe> beach: you're still awake?
[11:44:53] *** Joins: amb007 (~a_bakic@41.196.204.77.rev.sfr.net)
[11:46:25] <beach> mayureshkathe: My day has just begun.
[11:46:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[11:46:59] <mayureshkathe> beach: where are you at?
[11:47:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[11:47:21] <beach> Bordeaux.
[11:47:56] <mayureshkathe> that's France, right?
[11:47:58] <beach> Colleen: time in Bordeaux
[11:47:59] <Colleen> The time in Bordeaux is 2021.06.23 09:17:59.
[11:48:09] <beach> Yes, that's France.
[11:48:38] <mayureshkathe> I'm in the land of snake charmers. ;)
[11:49:15] <beach> Hmm.  Does it have a different name, too?
[11:49:23] *** Quits: amb007 (~a_bakic@41.196.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[11:49:33] *** Joins: amb007 (~a_bakic@52.38.22.93.rev.sfr.net)
[11:49:41] <mayureshkathe> The land of the seven rivers.
[11:49:49] <mayureshkathe> a.k.a. India.
[11:49:50] <mayureshkathe> :)
[11:49:59] <beach> I see.
[11:50:52] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:50:53] *** Quits: amb007 (~a_bakic@52.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:52:05] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:55:10] <edgar-rft> In IRC, France and India are just around the corner :-)
[11:55:20] <mayureshkathe> :D
[11:55:33] <mayureshkathe> where are you at edgar-rft?
[11:56:11] <edgar-rft> South-West Germany, I can walk to France with my own feet :-)
[11:56:22] <mayureshkathe> :D
[11:57:48] <edgar-rft> but Bordeaux is a little bit too far for my feet
[12:00:50] *** Joins: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt)
[12:01:24] *** Joins: zacts (~zak@user/zacts)
[12:05:49] *** Quits: zacts (~zak@user/zacts) (Client Quit)
[12:10:14] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:11:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:15:51] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:5c21:d9e:6214:c9bb)
[12:15:51] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:5c21:d9e:6214:c9bb) (Changing host)
[12:15:51] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:20:49] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:21:34] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:23:49] <kakuhen> so i decided to look into libfixposix a bit more and now i have ruled out using io-lib for anything
[12:24:19] <kakuhen> did the mistake of testing libfixposix on mac os, and caused an annoying error that had to make me reinstall my os
[12:25:09] <kakuhen> earlier today i also tried out qtools, and that also failed, though in a considerably more graceful manner than the io-lib stuff.
[12:27:15] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Read error: Connection reset by peer)
[12:27:32] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[12:28:13] <beach> kakuhen: I strongly recommend you work in/on software using only Common Lisp.
[12:28:37] <kakuhen> well I was looking at my options for GUI toolkits in common lisp, just out of curiosity
[12:28:50] <kakuhen> Yes, yes, I'm aware McCLIM exists, but I don't quite like the appearence
[12:28:50] <beach> I strongly recommend McCLIM for that.
[12:28:54] <kakuhen> heheh
[12:29:26] <beach> Then work on changing the appearance (but that is also being worked on) rather than taking on a huge foreign library will all the work that implies.
[12:29:27] <kakuhen> A lot of alternatives to McCLIM I found ends up using FFI voodoo to get the job done, except for Ltk
[12:29:47] <kakuhen> Ltk is very interesting because your lisp image just talks to the tcl interpreter, so there's no random ffi issues to worry about there
[12:29:52] <kakuhen> but it's also less "potent" than McCLIM.
[12:31:14] <beach> McCLIM is being actively worked on, and it is getting better by the day.  If more people put in a small amount of work (like another "look"), then others will benefit as well, and we will have a truly great GUI library.
[12:31:43] <kakuhen> maybe I'll give mcclim a shot
[12:31:56] <kakuhen> anyway, CAPI from LispWorks looks very interesting, though I'm not sure if I want to spend $1,500 just to mess around with it :x
[12:32:26] <beach> Good.  Also the #clim IRC channel is very active and help is given when people have questions.
[12:32:55] <mayureshkathe> beach: is the clim channel on this network?
[12:33:00] <beach> Yes.
[12:33:45] <beach> jackdaniel is the main maintainer, but several other people are working on it too.
[12:41:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:42:00] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[12:46:59] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[12:47:50] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[12:51:13] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[12:55:45] <mayureshkathe> okay, i gotta go have lunch.
[12:55:55] <mayureshkathe> see you guys in a bit.
[12:55:58] *** Quits: mayureshkathe (~mayuresh@182.58.204.157) (Quit: Leaving)
[13:03:30] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[13:16:18] *** Joins: ibinderwolf (~irc@81.161.232.13)
[13:17:22] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[13:18:10] *** Quits: ibinderwolf__ (~irc@81.161.232.13) (Ping timeout: 268 seconds)
[13:21:15] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 268 seconds)
[13:25:58] *** Joins: tfb (~tfb@88.98.95.237)
[13:26:29] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[13:28:43] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Pi[13:43:06] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[13:50:47] <kakuhen> are heap images architecture-dependent or just the lisp kernel?
[13:51:13] <phoe> they are
[13:51:35] <phoe> a x86_64 image usually will not contain functions with arm assembly
[13:51:53] <phoe> since, uhhhh, it kind of misses the point?
[13:52:06] <kakuhen> ok i suspected as much, but now how does one introduce a common lisp implementation on another architecture? assuming the lisp kernel can be built for it and it works.
[13:52:18] <phoe> cross compilation, as always
[13:52:18] *** Joins: shka (~herr@109.231.62.239)
[13:52:45] <kakuhen> that's where i get confused
[13:52:46] <phoe> or you bootstrap ECL there and use it to load the SBCL compiler that then compiles a SBCL heap image
[13:53:01] <kakuhen> ok i guess some CLs are easier to bootstrap than others hehe
[13:53:15] <phoe> ECL is compilable with just a C compiler, so bootstrapping is relatively easy
[13:53:29] <phoe> as for cross compilation, I don't know why there is an issue understanding it
[13:53:30] <kakuhen> I was wondering theoretically, say CCL has a lisp kernel for freebsd-arm64 (they don't, but suppose one could be made)
[13:53:41] <kakuhen> then is there some built-in function to cross-compile here?
[13:53:52] <kakuhen> i would assume using the arm lisp kernel is necessary to create the heap image
[13:53:58] <phoe> no, why?
[13:54:09] <phoe> the image is just a big heap of bytes produced by the compiler
[13:54:12] <kakuhen> i guess i dont understand the bootstrapping process, yet
[13:54:26] <phoe> if you tell the compiler to produce a heap of bytes made by the arm backend, you'll get an arm image
[13:54:45] <phoe> the compiler doesn't care, it just turns Lisp code into bytes
[13:55:42] <kakuhen> ok I think I understand it now
[13:55:44] <phoe> and the compiler knows how to make arm64 code no matter which architecture it is running on - it's just a program like everything else
[13:56:10] <kakuhen> yeah I just didn't understand the role of the lisp kernel in introducing a cl implementation to another arch
[13:56:21] <phoe> when you tell a compiler that's running on an amd64 machine to pop out an bit of arm assembly it's not like the FBI is gonna want to know your location
[13:56:37] <phoe> a kernel is the part that interfaces with the OS and performs garbage collection, in most cases
[13:56:40] <kakuhen> right
[13:56:50] <phoe> it is also there to load the lisp image into memory and unpack it and jump to it
[14:02:32] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:510e:d4f0:a295:1bdb)
[14:03:18] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[14:04:13] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[14:08:15] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[14:09:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:09:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:35:38] *** Joins: ibinderwolf (~irc@81.161.232.13)
[14:38:36] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[14:49:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:49:52] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[14:50:01] *** Joins: amb007 (~a_bakic@36.38.22.93.rev.sfr.net)
[14:52:51] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[14:53:06] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[14:53:44] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[14:57:30] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[14:58:24] <flip214> hmmm, ,@ (MAPCAR #'QUOTE forms)   doesn't work....   How would a macro quote a list of forms, individually?
[14:58:40] <phoe> QUOTE is not a function
[14:59:05] <phoe> ,@(loop for form in forms collect `',form) maybe?
[14:59:40] <phoe> or could you provide some example input data and output form?
[15:04:06] *** Quits: frgo (~frgo@p200300deef27d[15:53:25] <jmercouris> (defmacro salmon (tomato) (list ,tomato)) -> ILLEGAL
[15:53:55] <jmercouris> (defmacro salmon (tomato) `(,tomato)) -> NOT ILLEGAL
[15:54:28] <jmercouris> I seem to recall phoe teaching me something about not needing to use backticks at all in a defmacro
[15:54:31] <jackdaniel> backquote is a syntactic sugar for the reader, it is not specified as a lisp form (unlike quote which is specified as a lisp form - also it is not a mere syntactic sugar)
[15:54:39] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:54:57] <jmercouris> there was some article or something showing how macro functions are just regular functions
[15:55:02] <jmercouris> it was a good article, I just can't remember it
[15:55:29] <jmercouris> so what exactly is a backtick then?
[15:55:40] <jmercouris> what does the reader do when it encounters it?
[15:55:54] <jackdaniel> http://l1sp.org/search?q=%60
[15:55:59] <jackdaniel> second entry
[15:56:25] <jmercouris> I see
[15:56:28] <jmercouris> so it is a reader macro?
[15:56:54] <jackdaniel> it is explained in the second entry at http://l1sp.org/search?q=%60
[15:57:39] <jmercouris> yes, I just read it
[15:57:42] <jmercouris> doesn't really tell me what it is
[15:57:58] *** Joins: knobo (~knobo@ti0021q161-1057.bb.online.no)
[15:58:08] <jmercouris> just says what it does
[15:58:12] <jmercouris> it doesn't specify how this mechanism works
[15:58:25] <phoe> jmercouris: read the sources of fare-quasiquote
[15:58:33] <jmercouris> phoe: OK!
[15:59:14] <jackdaniel> you may notice, that this section is part of 2.4 standard macro characters
[15:59:22] <jackdaniel> as of how it is imlemented - it is implementation dependent
[16:00:01] <jackdaniel> i.e cltl2 appendix suggests an implementation based on a special form but that's not always the case
[16:00:24] <jackdaniel> reader may simply imlpement semantics described in /the second entry of http://l1sp.org/search?q=%60/ and get over with it
[16:00:48] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:03:09] <jackdaniel> as of fare-quasiquote it takes one interpretation of the backquote specification (following cltl2 appendix that is /not/ part of the standard) and claims that it is the only correct interpretation
[16:04:02] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806) (Ping timeout: 244 seconds)
[16:07:40] <jmercouris> I see; thanks
[16:23:05] *** Joins: rgherdt (~rgherdt@ip5f5af414.dynamic.kabel-deutschland.de)
[16:27:44] *** Joins: ibinderwolf (~irc@81.161.232.13)
[16:29:09] *** Joins: ibinderwolf__ (~irc@81.161.232.13)
[16:30:40] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 252 seconds)
[16:32:40] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[16:41:01] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[16:42:49] *** Quits: knobo (~knobo@ti0021q161-1057.bb.online.no) (Quit: Client closed)
[16:42:56] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:46:51] *** Joins: Guest6382 (~Guest63@5.30.23.247)
[16:50:19] <Guest6382> Saw some mention of LEM in the log - is it an acceptable solution for day to day coding?
[16:50:28] <Guest6382> e.g. does it have paredit / slime working nicely
[16:50:37] <phoe> it does not need slime
[16:50:50] <phoe> you don't need to connect to the CL image if you are the CL image
[16:51:01] <Guest6382> oh ok
[16:51:24] <Guest6382> does it have paredit?
[16:52:42] <phoe> I don't know, never used it
[16:52:58] <Guest6382> cool thanks
[16:53:48] <Guest6382> I can see the benefit - I'm starting to explore building apps in Emacs directly, but having a CL base is better than Emacs to some degree (although you can run CL code directly from Emacs)
[17:09:29] *** Joins: ibinderwolf (~irc@81.161.232.13)
[17:12:17] *** Quits: ibinderwolf__ (~irc@81.161.232.13) (Ping timeout: 258 seconds)
[17:13:42] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[17:14:08] *** Joins: Bike (~Glossina@71.69.170.70)
[17:14:08] *** ChanServ sets mode: +o Bike
[17:16:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Quit: Quit)
[17:16:50] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[17:21:32] *** Joins: patience_ (~patience@203.129.29.40)
[17:22:32] *** Quits: rgherdt (~rgherdt@ip5f5af414.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:25:40] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 252 seconds)
[17:27:40] *** Joins: aeth (~Michael@user/aeth)
[17:29:04] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[17:31:23] *** Joins: Oddity (Oddity@S01065c76952069d4.no.shawcable.net)
[17:32:18] *** Joins: ibinderwolf__ (~irc@81.161.232.13)
[17:32:36] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[17:35:08] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 250 seconds)
[17:36:01] *** Joins: ibinderwolf (~irc@81.161.232.13)
[17:39:02] *** Quits: ibinderwolf__ (~irc@81.161.232.13) (Ping timeout: 250 seconds)
[17:44:02] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:44:20] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:45:38] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (Ping timeout: 258 seconds)
[17:48:23] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[17:54:21] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[18:07:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:08:33] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[18:10:51] *** Joins: ibinderwolf__ (~irc@81.161.232.13)
[18:11:45] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[18:12:01] *** Joins: sp41 (~spal@70.241.120.35)
[18:13:48] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 250 seconds)
[18:14:32] <pjb> flip214: (mapcar (lambda (form) (list 'quote form)) list-of-forms)
[18:15:31] *** Joins: IAmRasputin (~ryan.gann@50-207-73-195-static.hfc.comcastbusiness.net)
[18:15:46] <beach> As I recall, Maclisp had a function KWOTE that wrapped an object in (QUOTE ...).
[18:16:03] <coat> phoe: read that you don't use Paredit. how do you manipulate the s-expressions? Say you type (concatenate 'string a b) and then you realize that you want to create a (let ...) expression and put the (concatenate ...) inside (let ...). how do you do that easily?
[18:16:33] <beach> coat: C-M-b
[18:17:30] <beach> C-M-b (let ... C-M-f )
[18:20:19] *** Joins: ibinderwolf (~irc@81.161.232.13)
[18:21:51] <coat> beach: yes, that works. thanks. I guess I am so used to paredit that human beings have been writing code without paredit too.
[18:22:02] <coat> beach: do you use paredit or any other s-exp manipulation plugin?
[18:22:19] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:23:12] *** Quits: ibinderwolf__ (~irc@81.161.232.13) (Ping timeout: 258 seconds)
[18:24:21] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:25:04] <pjb> coat: even in c-mode sometimes!
[18:26:09] <coat> err... my last message is screwed up. I meant, I am so used to paredit that I forgot human beings have been writing code without paredit too.
[18:26:21] <coat> pjb: how does c-mode help in editing s-exp?
[18:26:24] <beach> coat: I use only the existing Emacs S-expression functions.  There are quite a few of those as you can see.
[18:27:02] <pjb> coat: not at all. But paredit can also help editing c-code; at least c-expressions.
[18:27:50] <coat> beach: so long time Lisp programmers like you, how did you avoid using Paredit? almost any Emacs + SLIME tutorial I pick recommends paredit. Even Portacle comes with Paredit enabled. how did you never feel tempted to use Paredit?
[18:28:09] <beach> I tried it, and found it very confusing.
[18:28:27] <coat> beach: was it that you began doing Lisp when Paredit was not popular yet? or you began doing Lisp your own way and never bothered with Paredit because vanilla Emacs itself was sufficient?
[18:28:44] *** Quits: remexre (~nathan@user/remexre) (Read error: Connection reset by peer)
[18:29:01] <coat> beach: okay. makes sense. I found it confusing too. to be honest, I don't use much of paredit anyway. slurp and barf are the only two things I use
[18:29:38] <beach> But yes, I used Lisp long before paredit existed.
[18:29:45] <coat> okay
[18:29:49] <phoe> coat: I use smartparens
[18:30:01] <phoe> "never used it" - oops, I meant LEM
[18:30:02] <coat> I still forget though which key is barf and which one is slurp
[18:30:18] <phoe> I use smartparens heavily, along with rainbow-delimiters
[18:30:35] <coat> phoe: okay. I misunderstood that you never used paredit. have you used paredit? do you like smartparens more?
[18:32:28] *** Joins: attila_lendvai (~alendvai@catv-213-222-140-172.catv.broadband.hu)
[18:32:29] *** Joins: remexre (~nathan@user/remexre)
[18:33:19] <susam> coat: I have a little mnemonic to remember slurp and barf. C-) is slurp because ) is nice and round like a belly. Thus C-) makes the parentheses grow outwards and consume the next s-exp and put it inside the belly. Nom! Nom! C-} is curly and ugly and barfs out s-exps from its belly.
[18:33:50] <susam> coat: of course, that is how I started when I used to get confused. Now it is all muscle memory, so I don't really need the mnemonic anymore.
[18:34:10] <phoe> well
[18:34:16] <phoe> to be honest, I never used paredit either
[18:34:17] *** babylon is now known as mariari
[18:35:40] <coat> susam: nice one! i don't think I will forget C-) for slurp anymore! :)
[18:35:55] <splittist> phoe: how much customization do you (have to) do to smartparens?
[18:36:23] <coat> phoe: do you customize rainbow-delimiters colors? the default ones all look very faded and very similar to each other? do you change its colors so that they become more visibile and easy to pair up?
[18:41:37] <phoe> splittist: only colors
[18:41:42] <phoe> coat: yes, one second...
[18:42:16] <phoe> https://cdn.discordapp.com/attachments/214454452067893250/857261729779679232/Zrzut_ekranu_z_2021-06-23_16-11-54.png
[18:42:54] <phoe> zenburn + the following colors, #f99 #ff9 #9f9 #9ff #69f #f9f
[18:43:37] <coat> phoe: looks nice. I should also customzie to put bright colors like this. why do you have two consecutive parens inside (cond ...) colored the same? There are two consecutive parens both colored green. Did you decide that? or is rainbow doing that?
[18:44:44] <phoe> the second one is cyan
[18:45:25] <splittist> phoe: thanks.
[18:46:05] <phoe> splittist: oh wait
[18:46:10] <phoe> you meant smartparens, not rainbow-parens
[18:46:23] <phoe> I use spacemacs which bundles them by default; I don't know how much it customizes
[18:50:19] <coat> Is this the code to customize rainbow-delimiters: (set-face-foreground 'rainbow-delimiters-depth-1-face "#f99") ? Seems to work but want to be sure.
[18:53:21] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Quit: Leaving)
[18:53:41] <phoe> coat: in spacemacs it is https://plaster.tymoon.eu/view/2511#2511
[18:53:49] <phoe> if it works in plain emacs then it works
[18:54:32] <coat> phoe: thanks again!
[18:54:53] <patience_> A strange thing that I expected to work, but then didn't was using a symbol generated by gensym in a macrolet that was nested in a macro: https://pastebin.com/5j961anx
[18:55:42] *** Joins: mister_m (~user@c-73-209-97-9.hsd1.il.comcast.net)
[18:59:58] <beach> patience_: That happens when you try to use a variable at compile time, but its lexical binding is available only later, at run time.
[19:02:16] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[19:02:51] <patience_> That is so very hard to wrap my head around.
[19:05:05] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[19:05:33] <pjb> patience_: in your case you want to use ,',sym  This is a comon pattern in double backquote expressions.
[19:06:46] <beach> pjb: Ah thanks, I was just about to try to figure out what was meant.
[19:08:56] <patience_> pjb: Ah thanks. That makes sense. I see what is happening now.
[19:11:57] <pjb> you may rewrite the defmacro without backquote to better see it.  https://termbin.com/imjg
[19:12:28] <pjb> as you can see, you need to wrap sym in a (list 'quote sym)   this is waht ,',sym does when you use backquotes.
[19:15:45] <patience_> I can see that I was trying to use an unquoted symbol in my macrolet, which means that it was trying to use the value bound to the symbol. Is definitely a tricky thing to hold in the head haha
[19:16:23] <patience_> Thanks for the indepth explanation
[19:20:03] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[19:44:09] *** Quits: Guest6382 (~Guest63@5.30.23.247) (Quit: Connection closed)
[19:49:21] *** Quits: ibinderwolf (~irc@81.161.232.13) (Read error: Connection reset by peer)
[19:58:00] *** Joins: srhm (~ascii@user/srhm)
[20:00:59] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[20:19:21] *** Joins: Josh_2 (~user@37.25.47.130)
[20:20:04] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[20:24:15] *** Joins: aeth_ (~Michael@user/aeth)
[20:24:44] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:24:47] *** aeth_ is now known as aeth
[20:26:26] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[20:27:34] *** Joins: Josh_2 (~user@37.25.47.130)
[20:27:36] *** Joins: amb007 (~a_bakic@189.150.22.93.rev.sfr.net)
[20:28:44] <Josh_2> Hey hey
[20:31:12] *** Joins: aeth_ (~Michael@user/aeth)
[20:31:59] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:32:04] *** aeth_ is now known as aeth
[20:42:20] *** Quits: amb007 (~a_bakic@189.150.22.93.rev.sfr.net) (Ping timeout: 250 seconds)
[20:42:44] *** Joins: amb007 (~a_bakic@22.104.204.77.rev.sfr.net)
[20:52:28] *** Quits: Posterdati (~posterdat@host-79-12-208-242.retail.telecomitalia.it) (Remote host closed the connection)
[21:00:45] *** Joins: Posterdati (~posterdat@host-79-12-208-242.retail.telecomitalia.it)
[21:03:17] *** Joins: derelict (~derelict@user/derelict)
[21:04:52] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:15:41] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[21:17:30] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:26:03] *** Quits: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt) (Ping timeout: 258 seconds)
[21:26:29] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:28:23] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[21:28:34] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[21:29:05] *** Quits: amb007 (~a_bakic@22.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:29:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:33:32] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[21:33:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:36:30] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[21:38:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:39:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:46:24] *** Joins: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt)
[21:51:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 258 seconds)
[22:02:07] <bpanthi977> patience_: (setf ,',sym ,y) try this
[22:02:18] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[22:06:58] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[22:07:09] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[22:17:40] *** Joins: Guest63 (~Guest63@5.30.23.247)
[22:22:09] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[22:24:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[22:27:06] *** Quits: Guest63 (~Guest63@5.30.23.247) (Quit: Ping timeout (120 seconds))
[22:30:15] *** Joins: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de)
[22:54:23] *** Joins: Guest63 (~Guest63@5.30.23.247)
[23:19:20] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[23:19:39] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[23:20:07] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:25:35] *** Quits: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[23:31:02] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[23:32:10] *** Quits: Guest63 (~Guest63@5.30.23.247) (Ping timeout: 258 seconds)
[23:53:57] *** Joins: Steeve (~steve@user/steeve)
