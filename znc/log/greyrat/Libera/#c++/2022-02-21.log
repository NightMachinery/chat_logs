[00:00:11] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:b40c:806a:27ba:87ae)
[00:00:12] *** Quits: bebyx (~Thunderbi@user/bebyx) (Read error: Connection reset by peer)
[00:00:22] *** Joins: bebyx1 (~Thunderbi@user/bebyx)
[00:02:41] *** bebyx1 is now known as bebyx
[00:09:59] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[00:11:24] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:15:11] *** Joins: reticuli (~reticuli@user/reticuli)
[00:17:47] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:19:09] <Alipha> pa: correct. If iter is l.end(), then *iter is an invalid element and is UB. *(iter - 1) is *l.begin(). However, the confusing part is that iter.base() == l.begin()
[00:19:20] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:b40c:806a:27ba:87ae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:20:15] *** Quits: henbruas (~henbruas@ti0003a400-2412.bb.online.no) (Ping timeout: 252 seconds)
[00:21:48] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:22:00] *** Joins: henbruas (~henbruas@ti0003a400-2412.bb.online.no)
[00:22:30] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[00:24:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:28:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[00:32:51] *** majors_ is now known as majors
[00:33:05] *** Joins: ivan_wagner (~ivan_wagn@185.213.152.175)
[00:33:33] *** Joins: Rynn (~rynn@216.30.158.198)
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:37:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:37:35] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:37:56] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[00:40:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:42:23] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:42:24] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[00:44:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:47:35] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:50:11] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[00:50:32] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[00:53:00] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:58:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:00:23] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[01:01:54] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[01:03:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[01:05:11] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[01:08:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:11:47] *** Quits: sigma__ (~sigma@86.57.90.219) (Quit: Konversation terminated!)
[01:12:40] <ville> CarloWood: static_assert?
[01:13:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:13:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[01:15:04] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[01:15:15] *** Joins: sigma_ (~sigma@164.215.201.51)
[01:16:01] <jcowan> Is there anythigg like a rationale document for C++20 features, especially std::format?
[01:17:24] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[01:18:07] *** Joins: badone (~badone@209.132.189.152)
[01:19:01] <ville> the proposals?
[01:20:42] *** Quits: magla (~gelignite@55d46ecf.access.ecotel.net) (Quit: Stay safe!)
[01:21:46] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r7.html
[01:22:06] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: Textual IRC Client: www.textualapp.com)
[01:23:55] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html is the latest revision?
[01:24:04] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:25:20] *** Joins: ejjfunky0 (~ejjfunky2@125.164.18.221)
[01:25:21] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:30:06] *** Quits: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[01:31:08] <pa> can a static variable be std::atomic ?
[01:32:00] *** Joins: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd)
[01:32:28] <anyone> the two are orthogonal
[01:36:44] *** Quits: sigma_ (~sigma@164.215.201.51) (Quit: Konversation terminated!)
[01:38:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:39:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d1e0:a278:ec0d:b0b1) (Ping timeout: 240 seconds)
[01:40:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d1e0:a278:ec0d:b0b1)
[01:41:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:41:57] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[01:42:14] *** Joins: sigma_ (~sigma@164.215.201.51)
[01:42:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:55] *** ChanServ sets mode: +v npaperbot
[01:44:36] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[01:45:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:48:42] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[01:50:21] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:50:24] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:53:30] *** Joins: teut (~teut@122.161.83.81)
[01:53:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[01:54:45] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[01:55:25] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[01:59:07] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Read error: Connection reset by peer)
[01:59:28] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:00:10] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[02:00:39] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[02:00:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382) (Read error: Connection reset by peer)
[02:07:10] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:07:12] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[02:08:28] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[02:08:50] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:10:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[02:12:44] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[02:13:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:14:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:17:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:17:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:19:42] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Read error: Connection reset by peer)
[02:20:00] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:26:20] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5322)))
[02:26:21] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[02:28:18] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[02:28:40] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:32:11] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.110.129) (Ping timeout: 250 seconds)
[02:33:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:33:33] *** Joins: teepee (~teepee@openscad/teepee)
[02:33:49] *** Joins: pizdets (~pizdets@183.182.114.226)
[02:35:57] <Alipha> (so, yes, it can)
[02:38:19] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[02:38:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:39:05] *** Quits: cosimone (~user@93-34-133-75.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:39:06] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:41:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:42:03] *** Joins: darkexceedplatim (~darkexcee@180.254.75.104)
[02:42:36] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d1e0:a278:ec0d:b0b1) (Ping timeout: 240 seconds)
[02:42:45] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:45:56] *** Quits: darkexceedplatim (~darkexcee@180.254.75.104) (Quit: Leaving)
[02:46:33] *** Joins: fawwaz (~fawwaz___@180.254.75.104)
[02:48:01] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[02:48:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:78cf:6f3f:4205:5ab9)
[02:49:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:49:46] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[02:51:53] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[02:52:21] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:53:39] *** Quits: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:53:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:53:48] *** Joins: anthony_ (~anthony@75.177.246.244)
[02:54:24] *** Joins: N4buc0- (~N4buc0@189.26.49.16.dynamic.adsl.gvt.net.br)
[02:54:49] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:7576:b860:c17f:3363:8fd9) (Remote host closed the connection)
[02:57:05] *** Quits: bobb_ (~bobb_@dslb-088-066-130-106.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:58:56] *** Quits: ivan_wagner (~ivan_wagn@185.213.152.175) (Quit: Leaving)
[03:00:14] *** Joins: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au)
[03:00:52] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[03:03:52] *** Joins: pulse (~pulse@user/pulse)
[03:04:45] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[03:05:07] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[03:07:22] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[03:07:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Read error: Connection reset by peer)
[03:11:24] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[03:18:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:05] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[03:19:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:21:36] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:22:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:22:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:23:08] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:24:23] *** Quits: anthony_ (~anthony@75.177.246.244) (Quit: anthony_)
[03:26:16] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[03:26:47] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Read error: Connection reset by peer)
[03:28:15] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:30:12] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:30:19] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:43] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:56] *** Quits: Cahaan (~Cahaan@user/cahaan) (Read error: Connection reset by peer)
[03:33:18] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:36:10] *** Joins: Cahaan (~Cahaan@user/cahaan)
[03:38:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[03:38:58] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[03:39:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:41:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:42:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:44:06] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[03:46:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[03:48:39] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[03:54:37] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:54:58] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[03:56:38] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[03:57:14] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[03:57:44] *** Quits: fawwaz (~fawwaz___@180.254.75.104) (Read error: Connection reset by peer)
[04:07:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:14:14] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Read error: Connection reset by peer)
[04:15:00] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[04:15:34] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[04:18:21] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Quit: WeeChat 2.3)
[04:18:26] *** Joins: Soni (~quassel@autistic.space)
[04:22:17] *** Joins: pulse (~pulse@user/pulse)
[04:26:49] *** Quits: TomyLobo (~TomyLobo@p200300e80f00670088f74dbf21741073.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:28:32] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:30:11] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:33:12] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[04:33:42] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:22] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[04:37:37] *** Quits: jsbach (~jsbach@2a01:c23:6025:2d00:256b:a810:99a0:449b) (Ping timeout: 240 seconds)
[04:38:25] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[04:39:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:40:12] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[04:41:15] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[04:43:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:46:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 250 seconds)
[04:51:19] *** Joins: arch-angel (~quassel@user/arch-angel)
[04:52:16] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:78cf:6f3f:4205:5ab9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:55:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:57:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:58:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:02:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:10:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:13:15] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[05:15:12] *** Joins: kevr (~kevr@user/kevr)
[05:16:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:18:30] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[05:18:54] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[05:19:35] <mmlj4> recommended tutorial for learning C++? thanks
[05:21:24] <RandomReader> !basics
[05:21:25] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[05:21:40] <RandomReader> the stackoverflow link in particular has recommended books
[05:32:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:32:44] *** Joins: pulse (~pulse@user/pulse)
[05:33:41] *** Joins: zer0x (~zer0x@42.118.38.224)
[05:34:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:36:37] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[05:40:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:42:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:42:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:57] *** ChanServ sets mode: +v npaperbot
[05:43:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:43:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:44:49] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:51:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:54:15] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:55:11] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[05:57:30] *** Joins: cheater (~Username@user/cheater)
[06:02:50] *** Parts: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Leaving)
[06:03:00] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:03:15] *** Joins: ferdna (~ferdna@user/ferdna)
[06:07:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:08:37] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66003cbb37a2ac971c28.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[06:10:06] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[06:11:07] *** Joins: llh (~UPP@user/llh)
[06:12:52] *** Quits: N4buc0- (~N4buc0@189.26.49.16.dynamic.adsl.gvt.net.br) (Ping timeout: 272 seconds)
[06:14:00] *** Joins: madder_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[06:14:08] *** Quits: madder_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Remote host closed the connection)
[06:15:21] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Read error: Connection reset by peer)
[06:19:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:26:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:27:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:33:45] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:35:47] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:35:58] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[06:40:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:42:17] *** Joins: kevr` (~kevr@user/kevr)
[06:42:55] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[06:43:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:47:00] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 240 seconds)
[06:56:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:58:52] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[06:59:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:00:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:07:25] *** Joins: Azem (~haise01@user/haise01)
[07:11:08] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 272 seconds)
[07:17:48] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:23:04] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[07:24:45] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[07:25:52] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:27:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:28:01] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:33:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 272 seconds)
[07:37:21] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:37:48] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Ping timeout: 240 seconds)
[07:41:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:42:12] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[07:44:09] *** Quits: sreve (~quassel@p54a706a2.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:44:12] *** Joins: sreve_ (~quassel@p549d70f4.dip0.t-ipconnect.de)
[07:44:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:45:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:45:51] *** Quits: reticuli (~reticuli@user/reticuli) (Ping timeout: 256 seconds)
[07:46:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:47:08] *** Henry_The_Longsh is now known as HenryTheLongshot
[07:48:43] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[07:50:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:52:02] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:57:04] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:eda2:a54:6f7f:845e)
[07:58:08] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:2d9f:62ac:51ed:8124:6356:5f87)
[08:07:56] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:15:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[08:20:12] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[08:28:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[08:30:16] *** Joins: toastloop (~toastloop@user/toastloop)
[08:36:40] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[08:41:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:45:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:45:40] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[08:45:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:46:44] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:47:17] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:2d9f:62ac:51ed:8124:6356:5f87) (Remote host closed the connection)
[08:47:31] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:2d9f:62ac:cce6:e70c:10f2:6576)
[08:51:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:52:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[08:52:34] *** Quits: zer0x (~zer0x@42.118.38.224) (Ping timeout: 250 seconds)
[08:56:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:59:33] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[09:00:32] *** Joins: Burgundy (~NA@86.121.143.206)
[09:14:56] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:26:37] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 240 seconds)
[09:26:56] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:29:15] *** Joins: Cahaan (~Cahaan@user/cahaan)
[09:29:21] *** Quits: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:32:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[09:40:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:42:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:42:16] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[09:42:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:55] *** ChanServ sets mode: +v npaperbot
[09:45:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:45:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:46:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[09:48:18] *** Joins: malloy (~jimery@116.30.220.175)
[09:50:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:53:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/02/20 UTC) 64 Bit)
[09:53:25] *** Joins: Tempesta (~Tempesta@user/tempesta)
[10:01:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:03:29] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[10:03:45] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:09:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[10:09:48] *** Quits: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com) (Remote host closed the connection)
[10:12:48] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:13:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:23:51] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:27:06] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[10:30:32] <AliceMeows> Is there any technical reason why overloading classes/struct cannot be supported?
[10:31:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:33:17] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:34:17] *** Joins: zer0x (~zer0x@42.118.38.224)
[10:36:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:36:28] <TinoDidriksen> Sounds like just using auto and factory functions.
[10:38:05] <AliceMeows> I know it can be worked around but I'm curious if there is any technical limitation to disallowing it
[10:38:29] <fluter> what is overloading classes/struct/
[10:38:30] <fluter> ?
[10:38:38] <fluter> multiple classes with the same name?
[10:38:52] <AliceMeows> Yes
[10:39:36] <fluter> why is that possible or needed? it is redifinition error right?
[10:39:55] <AliceMeows> Yes it is not allowed
[10:40:19] <AliceMeows> https://godbolt.org/z/serYb1GKo
[10:40:22] *** gentooclimax is now known as climax
[10:40:58] <AliceMeows> This could be simulated with specialization
[10:41:44] <ville> heh
[10:42:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:42:35] <AliceMeows> Like so https://godbolt.org/z/jn14W3rqv
[10:43:12] <ville> i don't get your question. so you're talking about syntax?
[10:43:45] <AliceMeows> I'm asking why the commented out code cannot actually be made legal
[10:44:03] <ville> it could* be. why bother?
[10:44:38] <ville> what would it bring, other than a syntax change, to over what there already is?
[10:44:49] <AliceMeows> I suppose you're right
[10:44:55] <AliceMeows> That is what I wanted to know , thanks
[10:45:40] <ville> *) it's impossible to make quick accurate statements about what is and isn't possible to change about c++'s syntax and still be able to parse it
[10:45:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:46:13] *** Joins: jsbach (~jsbach@2a01:c22:ad5b:3300:3988:6864:2fb1:fbc9)
[10:47:16] *** Joins: NiD27 (~nid27@49.205.150.78)
[10:47:47] <ville> i do lean towards that the template syntax, with its preamble and rather loud syntax, was a design mistake from the beginning
[10:47:58] *** climax is now known as gentooclimax
[10:50:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:50:35] <AliceMeows> If I were to guess I'd say it was most likely because it probably were seen as something impossible to do same as many other things which were added to c++11 and onwards
[10:50:52] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:53:05] <TinoDidriksen> "The choice of the brackets <...> for the template parameter was made because, even though parentheses would have been easier to parse, they are overused in C++ and brackets are (empirically) more pleasant for a human reader." - https://belaycpp.com/2021/10/01/history-of-c-templates-from-c-style-macros-to-concepts/
[10:53:11] <ville> when templates were introduced people leaned towards on the loud syntax for one reason: it was new and unfamiliar to everyone.
[10:54:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[10:54:23] <ville> they could have chosen a more succinct syntax at the time, but the normal human reaction is to put blinking warning lights around things that are new and unfamiliar
[10:54:57] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[10:55:08] <ville> so here we are some 30 years later and still screwed
[10:55:10] <TinoDidriksen> At least they're walking some of it back with auto.
[10:55:20] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:55:21] <ville> yes
[10:58:05] <ville> i don't really care what flavour of braces it is, and in some ways i prefer that it's a "distinct" kind. one of the worst parts about lisp-likes is that they just have the fucking one kind
[10:58:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:58:45] <AliceMeows> It has its advantages but its also a disadvantage at same time
[10:59:09] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[11:00:04] <ville> worst? perhaps bit hyperbole there. anyways
[11:02:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc05:c100:25e7:ad04)
[11:03:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:04:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:05:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[11:09:17] *** Quits: pizdets (~pizdets@183.182.114.226) (Ping timeout: 240 seconds)
[11:10:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:12:01] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:12:49] *** Joins: pizdets (~pizdets@183.182.115.230)
[11:13:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:14:00] *** Quits: pizzapants184 (~zachary@umc-178145.dhcp.missouri.edu) (Quit: Leaving.)
[11:18:13] *** Joins: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu)
[11:18:50] *** Joins: adlternative (~adl@111.2.144.92)
[11:19:46] *** Joins: rendar (~rendar@user/rendar)
[11:25:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.123)
[11:26:39] <the_lanetly_052> Hi how can I decay const char* to pass std::span?
[11:27:39] <the_lanetly_052> I do want to have span with char* - char* x = static_cast<char *>(malloc(n)); std::span a{x};
[11:28:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:29:04] <TinoDidriksen> Why malloc? Why not std::string or vector<char> as owner?
[11:29:47] <the_lanetly_052> I use 3rd party library and it returns buffer with malloc();
[11:29:48] <TinoDidriksen> As for span, you need to provide the length, so span(x,n)
[11:29:59] <the_lanetly_052> what about gsl::span?
[11:31:50] <TinoDidriksen> I think that's the same. You need to know the length.
[11:32:57] <TinoDidriksen> Generally you need to know the start and stop for all range-based algorithms and containers.
[11:33:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:35:25] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:36:09] <the_lanetly_052> yes it works thank you
[11:40:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:43:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:46:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:46:36] *** Joins: MatSharrow (~matthew@11.20.9.51.dyn.plus.net)
[11:47:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[11:49:04] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:50:04] <AliceMeows> I thought new T[N](x) is illegal?
[11:52:22] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:2d9f:62ac:cce6:e70c:10f2:6576) (Quit: Leaving)
[11:54:21] <ville> it's 17?
[11:54:32] <AliceMeows> 20
[11:54:36] <AliceMeows> Unless if something changed
[11:55:11] <AliceMeows> clang refused to compile it while gcc and msvc accepted it
[11:55:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:55:45] <ville> ah could be 20, yeah it's a recent change
[11:56:00] <AliceMeows> That explains why clang is refusing to compile it
[11:57:22] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[12:04:53] <AliceMeows> I couldn't find the paper for this and I think its a bug in both gcc and msvc because (1) seem to behave as if it was {1}
[12:05:02] <AliceMeows> were*
[12:06:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.123) (Ping timeout: 256 seconds)
[12:06:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[12:16:10] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[12:17:35] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:19] *** Joins: toastloop (~toastloop@user/toastloop)
[12:26:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:28:36] <fluter> hi, how can i make a vector with reserved space, without an additional function call?
[12:28:54] <Eelis> can't be done
[12:28:54] <fluter> because i wanna do it just in the initializer list of constructor, how cani achieve this?
[12:29:00] <fluter> Eelis: why not?
[12:29:07] <Eelis> because there's no ctor that does that
[12:29:30] <fluter> Eelis: std::vector<int> v(5); this size() == 5, i wanna size() == 0, but reserve(5);
[12:29:38] <fluter> hmmm
[12:29:47] <Eelis> you can write   : v([]{ vector<T> x; x.reserve(23); return x; }())  in your ctor-initializer
[12:29:59] <fluter> hmm
[12:30:06] <fluter> but it's an additional copy!
[12:30:20] <Eelis> no, a move
[12:30:26] <Eelis> moving a vector is very cheap (if it's not optimized away entirely)
[12:31:16] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:31:27] <fluter> what if I'm on c++98?
[12:31:39] <Eelis> then you should reconsider your life choices
[12:31:47] <fluter> lol
[12:31:49] <fluter> okk
[12:32:56] <mitch0> :)
[12:33:29] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:33:29] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:34:15] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:48a:97a2:2688:cf67:8ffb:99a3)
[12:36:15] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[12:39:26] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:eda2:a54:6f7f:845e) (Quit: Leaving)
[12:40:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:40:46] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:41:12] *** Joins: rajkosto (~rajkosto@178.220.66.235)
[12:41:42] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[12:43:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:43:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:46:50] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:46:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:47:00] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Ping timeout: 250 seconds)
[12:47:17] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Ping timeout: 240 seconds)
[12:48:31] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[12:48:41] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Ping timeout: 245 seconds)
[12:48:59] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[12:49:43] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[12:59:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[13:02:12] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:02:35] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[13:05:56] *** Quits: adlternative (~adl@111.2.144.92) (Quit: Konversation terminated!)
[13:06:34] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[13:07:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:07:22] *** Parts: toastloop (~toastloop@user/toastloop) (Leaving)
[13:07:31] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:10:36] *** Joins: rcoote (~rcoote@2a02:908:690:a140:7f7a:fd11:d1e1:ad15)
[13:11:47] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:33] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[13:12:44] *** Joins: Markow (~Markow@176.122.215.103)
[13:14:36] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[13:18:46] *** Quits: sigma_ (~sigma@164.215.201.51) (Quit: Konversation terminated!)
[13:24:12] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:24:56] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[13:25:59] *** Joins: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl)
[13:29:57] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Ping timeout: 240 seconds)
[13:33:24] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:48a:97a2:2688:cf67:8ffb:99a3) (Ping timeout: 240 seconds)
[13:35:06] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:eda2:a54:6f7f:845e)
[13:35:20] *** Quits: rajkosto (~rajkosto@178.220.66.235) (Read error: Connection reset by peer)
[13:36:35] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[13:39:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:42:04] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:48a:97a2:f634:f7b9:7d93:3a47)
[13:42:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:58] *** ChanServ sets mode: +v npaperbot
[13:44:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:46:03] *** Joins: teut (~teut@122.161.83.81)
[13:46:51] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:47:22] *** Joins: nostoi (~nostoi@172.red-88-19-234.staticip.rima-tde.net)
[13:47:23] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[13:47:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[13:50:32] *** Quits: nostoi (~nostoi@172.red-88-19-234.staticip.rima-tde.net) (Client Quit)
[13:50:54] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[13:51:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[13:51:29] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:53:37] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:54:13] *** Joins: Burgundy (~NA@86.121.143.206)
[13:56:14] *** Quits: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:56:52] *** Joins: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de)
[14:05:15] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[14:05:36] <pa> is it correct to erase vector elements while iterating, like this? http://paste.debian.net/hidden/dc7c4362/
[14:06:29] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:09:06] <fiesh> pa: the good way to write your code would be vec.erase(std::remove_if(vec.begin(), vec.end(), [id](auto const & e) { return e.id == id; }), vec.end());
[14:09:59] <pa> fiesh: you mean the modern C++ way? <g>
[14:10:22] <anyone> we mean the way with the least O(x) complexity
[14:10:53] <pa> anyone: and is there O(x) complexity difference between fiesh code and my code?
[14:11:00] <fiesh> yes
[14:12:06] <pa> because it does binary search? what if the type of id doesn't have an operator <= ?
[14:12:20] <anyone> one (and each) call of vec.erase(i) is O(n). Do that for every i, and you have O(n^2).
[14:12:23] <fiesh> no, because you possibly move every element in every iteration
[14:12:46] <pa> i do erase(); break;
[14:12:48] <fiesh> and id just needs an operator==, no idea where you get <= from
[14:13:08] <anyone> so it only removes on element, oh well
[14:13:26] <pa> umh..
[14:13:34] <pa> good poing
[14:13:35] <pa> t
[14:13:39] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[14:15:47] <pa> thanks
[14:16:42] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:16:54] *** Joins: zachel (~zachel@user/zachel)
[14:20:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[14:22:12] *** Joins: heineken (~i.am@user/heineken)
[14:25:08] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[14:25:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[14:30:10] *** Joins: Cienisty (Cienisty@user/cienisty)
[14:30:16] *** Quits: NiD27 (~nid27@49.205.150.78) (Remote host closed the connection)
[14:32:26] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:32:47] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:08] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:36:17] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:48a:97a2:f634:f7b9:7d93:3a47) (Ping timeout: 240 seconds)
[14:37:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:38:37] *** Joins: AmR (~AmREiSa@156.199.67.136)
[14:44:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:46:10] *** Joins: cursey (~cursey@user/cursey)
[14:46:41] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:48:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:51:14] *** Quits: rcoote (~rcoote@2a02:908:690:a140:7f7a:fd11:d1e1:ad15) (Quit: Konversation terminated!)
[14:53:15] *** Joins: proller (~p@2a02:6b8:0:40c:e354:206b:1d2f:beea)
[14:54:12] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[14:55:42] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[14:57:30] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942)
[14:58:23] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[15:00:45] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[15:01:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:02:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:03:16] <AliceMeows> When utilizing sfinae is there a preferred 'flavor' to do it? such as using type = decltype(get_type<T>); vs template specialization with duck typing?
[15:04:15] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Read error: Connection reset by peer)
[15:04:58] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:07:07] <AliceMeows> It should be using type = decltype(get_type<T>());
[15:07:49] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[15:08:41] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 272 seconds)
[15:10:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:32] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[15:11:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[15:14:30] <ville> sticking sfinae in different positions, template preamble, return type, default argument, certainly affects the cost
[15:16:58] <AliceMeows> That is a good point
[15:17:50] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 250 seconds)
[15:18:35] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:20:18] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:57c1:cd36:9604:9a6)
[15:21:06] <PJBoy> the cost of what?
[15:21:18] <PJBoy> or was that sarcastic?
[15:21:20] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[15:21:21] <AliceMeows> compile time I'd assume
[15:21:48] *** Joins: zachel (~zachel@user/zachel)
[15:21:51] <PJBoy> that's news to me if true
[15:22:33] <PJBoy> not that I think the opposite is true, but I never heard of that before
[15:27:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:28:52] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:31:43] *** Joins: Atque (~Atque@user/atque)
[15:32:25] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[15:33:57] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[15:34:53] <ville> yeah compile time cost
[15:35:00] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[15:35:15] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[15:36:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246)
[15:36:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246) (Changing host)
[15:36:18] *** Joins: skapata (~Skapata@user/skapata)
[15:39:13] <ville> well can't locate it now, and don't remember the outcome, but it was on gcc bugzilla
[15:39:21] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:39:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:40:04] *** Quits: jsbach (~jsbach@2a01:c22:ad5b:3300:3988:6864:2fb1:fbc9) (Remote host closed the connection)
[15:41:44] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[15:42:24] *** Joins: jsbach (~jsbach@2a01:c22:ad5b:3300:4d02:2c71:33f7:3a7b)
[15:43:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32)
[15:45:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:46:29] *** Joins: rvalue (~rvalue@user/rvalue)
[15:48:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:52:54] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[15:53:14] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[15:55:22] *** Joins: frost (~frost@user/frost)
[15:55:57] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:57c1:cd36:9604:9a6) (Remote host closed the connection)
[15:56:11] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:ebfa:d49b:f8d6:e25d)
[15:59:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[16:01:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:03:08] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 272 seconds)
[16:03:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:11:28] *** Joins: sebbu (~sebbu@user/sebbu)
[16:12:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:12:34] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[16:14:31] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:16:38] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:ebfa:d49b:f8d6:e25d) (Quit: Leaving)
[16:18:20] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[16:25:17] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Ping timeout: 240 seconds)
[16:31:07] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:8621:64c0:88f3:f1bb)
[16:31:46] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:40:52] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:45:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:48:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:55:31] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[16:55:59] *** Quits: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi) (Quit: reboot for update)
[16:57:10] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[16:58:17] *** Quits: MatSharrow (~matthew@11.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[17:00:14] *** Joins: MatSharrow (~matthew@11.20.9.51.dyn.plus.net)
[17:01:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[17:02:22] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:03:17] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:06:53] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[17:07:45] *** Joins: Rynn (rynn@gateway/vpn/protonvpn/rynn)
[17:08:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[17:08:37] *** Quits: MatSharrow (~matthew@11.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[17:09:46] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:10:05] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:eda2:a54:6f7f:845e) (Quit: Leaving)
[17:10:57] *** Joins: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi)
[17:12:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:12:58] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:8621:64c0:88f3:f1bb) (Quit: Leaving)
[17:13:55] <CarloWood> Hmmpf.  Why can't I do:
[17:14:33] <CarloWood> {} namespace glsl { enum class Type { bool, int, float, double }; }
[17:14:33] <geordi> error: expected identifier before 'bool'
[17:14:45] <anyone> because it's a reserved keyword
[17:15:00] <CarloWood> It shouldn't be.  Type::bool is perfectly clear.
[17:15:30] <anyone> { enum class T { if, }; }
[17:15:30] <geordi> error: expected identifier before 'if'
[17:15:32] <anyone> same reason
[17:15:35] <PJBoy> more annoying for me is
[17:15:37] <PJBoy> {} enum struct E { and, or, xor };
[17:15:37] <geordi> error: expected identifier before 'and' token
[17:15:49] <PJBoy> which works by default on some compilers
[17:16:03] <CarloWood> I think there are compiler options to turn that off maybe?
[17:25:41] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[17:25:48] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:27:43] *** Joins: angelacrust (~angelacru@182.68.142.100)
[17:30:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:31:03] <AliceMeows> Now I finally have fixed inout_ptr/out_ptr
[17:31:20] <AliceMeows> I shouldn't have to specify the type when using custom types
[17:33:48] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[17:35:28] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[17:35:51] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[17:42:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:58] *** ChanServ sets mode: +v npaperbot
[17:46:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:49:12] <AliceMeows> https://godbolt.org/z/dYMW4a5WY
[17:49:47] <AliceMeows> With my changes f(std::out_ptr(p)); would be legal and f(std::out_ptr<T>(p)); would be still allowed
[17:50:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:53:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[17:55:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:58:36] *** Quits: zer0x (~zer0x@42.118.38.224) (Ping timeout: 240 seconds)
[17:58:40] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[17:59:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[17:59:19] <AliceMeows> https://godbolt.org/z/WKM3cfs71 here is a better link with some comments and junk removed
[18:00:39] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[18:01:08] <AliceMeows> I highly doubt anyone would object such changes and prefer to pass the type when using custom types with smart pointers
[18:01:25] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:02:02] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[18:04:14] <anyone> I don't object
[18:05:17] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942) (Quit: Leaving)
[18:06:01] <AliceMeows> To me it seem stupid to bother with SmartPtr::pointer over element_type alone as it somewhat defeats the purpose inout_ptr/out_ptr
[18:06:49] <AliceMeows> If anyone wishes badly enough to have unique_ptr fully manage their custom type then they might as well write std::unique_ptr<MyCustomType, deleter>
[18:07:56] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:08:17] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Remote host closed the connection)
[18:08:45] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:11:44] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[18:13:56] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:15:16] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[18:20:47] *** Joins: pulse (~pulse@user/pulse)
[18:23:00] *** Quits: proller (~p@2a02:6b8:0:40c:e354:206b:1d2f:beea) (Ping timeout: 240 seconds)
[18:24:56] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:7576:82c8:2f17:d2c6:9d7a)
[18:34:01] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:34:54] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:7d10:d675:b742:6f04)
[18:36:15] *** Joins: proller (~p@2a02:6b8:0:40c:6697:86eb:bf8a:e77e)
[18:39:06] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942)
[18:41:34] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:7d10:d675:b742:6f04) (Quit: Leaving)
[18:41:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:46:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:46:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:46:43] <Alipha> fluter: if you're on c++98, then you don't have lambdas
[18:47:39] *** Quits: angelacrust (~angelacru@182.68.142.100) (Quit: Client closed)
[18:49:25] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:52:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:54:02] <Alipha> AliceMeows: regarding your "best sfinae way" question, can you pastebin more complete examples? Because I'm not sure what `using type = decltype(get_type<T>());` is referring to
[18:54:49] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[18:54:49] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Write error: Broken pipe)
[18:54:49] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[18:54:49] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[18:54:49] *** Quits: bindu (~bindu@user/bindu) (Write error: Connection reset by peer)
[18:55:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:55:10] *** Joins: spithash (~spithash@user/spithash)
[18:55:11] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:55:15] *** Joins: bindu (~bindu@user/bindu)
[18:55:21] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:56:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:56:45] <Alipha> AliceMeows: regarding new T[N](x), c++20 made it so you can use () instead of {} for aggregate initialization in most contexts, but clang hasn't implemented it yet
[18:59:52] <AliceMeows> Oh really? I couldn't find anything on it
[19:01:28] <AliceMeows> Alipha: https://godbolt.org/z/1bTaKMzs8 something like this
[19:01:47] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:02:01] *** Joins: bindu (~bindu@user/bindu)
[19:02:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:02:20] <PJBoy> it gets a passing mention in https://en.cppreference.com/w/cpp/language/aggregate_initialization "or direct initialization"
[19:02:54] <PJBoy> and some more wording in https://en.cppreference.com/w/cpp/language/direct_initialization
[19:03:28] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:05:05] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:10:04] *** Quits: arch-angel (~quassel@user/arch-angel) (Ping timeout: 250 seconds)
[19:10:42] <PJBoy> (paper is P0960)
[19:13:03] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[19:19:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:20:18] *** Joins: martiert (~martiert@ti0185q160-2775.bb.online.no)
[19:23:41] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[19:26:21] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:26:46] *** Joins: xkuru (~xkuru@user/xkuru)
[19:27:50] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:27:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:28:44] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9)
[19:28:52] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[19:30:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:30:15] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[19:31:09] <Alipha> AliceMeows: https://godbolt.org/z/djxhKGzqb
[19:31:47] <AliceMeows> I know about it, my question was which one was preferred that is all
[19:33:13] *** Joins: spithash (~spithash@user/spithash)
[19:34:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:34:52] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Quit: Leaving.)
[19:35:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:37:03] <Alipha> AliceMeows: personally, i'm not a fan of declaring functions that aren't actually defined anywhere (i'd look at that and wonder where the definition is and spend time trying to find it). so, while it's more typing, i'd rather create "traits" structs and do `using type = typename traits_struct<T>::type;`
[19:37:57] <AliceMeows> Its more for implementation detail really not something for someone to actively use
[19:41:13] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:41:50] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Remote host closed the connection)
[19:41:50] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Remote host closed the connection)
[19:41:51] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Remote host closed the connection)
[19:42:17] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[19:42:30] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[19:42:32] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[19:42:38] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[19:44:02] <AliceMeows> Luckily I was already using specialization so I'll stick to it
[19:44:06] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[19:46:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:47:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:47:58] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 272 seconds)
[19:48:38] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[19:49:24] *** Joins: Miyu (~hackkitte@94.31.104.136)
[19:49:27] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Client Quit)
[19:49:48] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 240 seconds)
[19:49:52] *** Miyu is now known as hackkitten
[19:51:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:51:09] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[19:52:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:53:39] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:55:53] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[19:56:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[20:00:31] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[20:02:23] <acidtonic> Quick question, I have uint8_t[4] (32 bytes), is it safe to interpret 2 buckets as 1 16-bit int as long as I keep it contiguous? Is a static cast good enough for that or do I need something like reinterpret? I'd also like to provide a single 32-bit getter-setter too and wondering if perhaps a union is what I want?
[20:03:13] <acidtonic> Just worried about signed/unsigned and if crossing the byteboundry like that is okay as long as I'm enforcing bounds
[20:03:52] *** Joins: aLeSD (~aLeSD@139.47.41.16)
[20:03:53] <BtbN> The only safe way to do that is to pair it with a uint16_t[2] in a union.
[20:04:02] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942) (Ping timeout: 240 seconds)
[20:04:19] <BtbN> Doing wild casts violates strict aliasing and will break for very confusing and non obvious reasons.
[20:04:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[20:04:49] <acidtonic> BtbN, that was my concern, also I should add this code will run both big/little endian
[20:06:12] *** Quits: aLeSD (~aLeSD@139.47.41.16) (Client Quit)
[20:07:00] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Quit: leaving)
[20:09:06] <Alipha> BtbN: using a union for that is actually UB in C++. accessing the inactive member of a union is UB
[20:09:11] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:09:40] <BtbN> Guess you're out of luck then. Need to do it mathematically.
[20:10:02] <acidtonic> Alipha, I'm open to correct methods here, was using something similar to std::bitset
[20:10:34] <Alipha> acidtonic: as BtbN said, do it mathematically. specifically, you can use these functions: https://github.com/alipha/cpp/blob/master/endian/endian.hpp#L116-L148
[20:10:49] <BtbN> Or write a C file that does it and include it in your project.
[20:11:04] <BtbN> If you need this to be performant, that's probably the best bet
[20:11:09] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:11:15] <Alipha> the C file would then still need to worry about endianness
[20:11:40] <Alipha> also, as noted at the top of my file there: "gcc 8.1 and clang 9.0.0 and above optimize these to nops or bswaps with -O2."
[20:12:52] <Alipha> acidtonic: https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html
[20:13:21] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[20:13:32] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[20:15:15] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[20:16:12] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[20:21:14] *** LordKalma_ is now known as LordKalma
[20:22:33] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:26:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[20:27:13] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:7576:82c8:2f17:d2c6:9d7a) (Remote host closed the connection)
[20:27:26] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:7576:82c8:2f17:d2c6:9d7a)
[20:28:11] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Remote host closed the connection)
[20:28:11] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Remote host closed the connection)
[20:28:17] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Remote host closed the connection)
[20:29:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:31:02] *** Quits: sreve_ (~quassel@p549d70f4.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[20:31:16] *** Joins: sreve (~quassel@p549d70f4.dip0.t-ipconnect.de)
[20:33:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[20:33:49] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:34:15] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[20:34:15] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[20:34:37] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[20:34:52] *** Joins: bindu (~bindu@user/bindu)
[20:35:29] *** Joins: phoenix (phoenix@user/phoenix)
[20:38:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[20:39:21] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:44:41] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:45:03] *** Joins: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469)
[20:45:12] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:46:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875)
[20:46:24] *** Joins: teut (~teut@122.161.83.81)
[20:47:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:50:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32) (Ping timeout: 256 seconds)
[20:51:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:51:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:53:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:54:20] *** Joins: nehsou^ (~nehsou@50.233.120.162)
[20:57:13] *** Quits: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469) (Quit: Leaving)
[21:07:30] *** Joins: Markow (~Markow@176.122.215.103)
[21:09:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[21:16:51] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[21:21:55] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[21:21:58] *** Joins: spithash_ (~spithash@user/spithash)
[21:24:36] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:25:16] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:7576:82c8:2f17:d2c6:9d7a) (Remote host closed the connection)
[21:25:24] *** Joins: N4buc0- (~N4buc0@189.26.49.16.dynamic.adsl.gvt.net.br)
[21:28:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[21:29:46] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942)
[21:29:47] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:30:32] *** Quits: proller (~p@2a02:6b8:0:40c:6697:86eb:bf8a:e77e) (Ping timeout: 240 seconds)
[21:31:33] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942) (Client Quit)
[21:38:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:39:26] *** Joins: Betal (~Betal@user/betal)
[21:39:49] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:42:45] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:42:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:57] *** ChanServ sets mode: +v npaperbot
[21:46:13] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846)
[21:47:04] <rpnx> Quick question, does std::launder only apply to the element directly pointed to by p or by reachable objects from the result of pointer arithmetic on the result?
[21:47:15] <rpnx> I.e., given foo* ptr
[21:47:41] <rpnx> Is there a difference between std::launder(ptr)[4] and *std::launder(ptr+4)
[21:48:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:48:56] <rpnx> Cppreference seems to suggest that only *std::launder(ptr+4) would be defined but I'm not sure if I'm reading it right
[21:50:57] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[21:51:42] *** Parts: wielding (~wielding@user/wielding) ()
[21:52:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:55:05] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:58:04] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[22:04:16] *** Quits: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:07:25] *** Joins: CaCode (~CaCode@user/cacode)
[22:08:19] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[22:08:57] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[22:09:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:15:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:17:26] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942)
[22:17:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:18:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:18:08] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[22:18:37] *** Quits: furrymcgee (~devuan@cgn-89-1-211-93.nc.de) (Ping timeout: 240 seconds)
[22:18:59] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846) (Quit: This computer has gone to sleep)
[22:19:01] *** Joins: furrymcgee (~devuan@cgn-213-196-210-217.nc.de)
[22:19:09] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[22:19:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:21:07] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Client Quit)
[22:21:28] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846)
[22:22:28] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b516:4eef:796d:4942) (Quit: Leaving)
[22:23:02] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:23:37] *** Quits: furrymcgee (~devuan@cgn-213-196-210-217.nc.de) (Ping timeout: 240 seconds)
[22:23:46] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846) (Client Quit)
[22:23:51] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:e00b:cb48:98a7:f7f9)
[22:24:02] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:24:04] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[22:24:35] *** Joins: furrymcgee (~devuan@cgn-213-196-210-179.nc.de)
[22:24:56] *** Quits: talisein (~talisein@user/talisein) (Quit: WeeChat 3.5-dev)
[22:25:00] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc05:c100:25e7:ad04) (Ping timeout: 240 seconds)
[22:26:13] *** Joins: proller (~p@80.240.216.69)
[22:26:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:27:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:28:57] *** Joins: talisein (~talisein@user/talisein)
[22:31:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[22:31:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:36:39] *** Soni is now known as GD-IRC
[22:37:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:38:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:39:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:40:14] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:40:35] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[22:40:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:40:57] *** Joins: proller (~p@2a02:6b8:b081:b40d::1:18)
[22:41:26] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:41:58] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:42:11] *** Joins: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de)
[22:42:47] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:42:57] <ville> no one knows what std::launder() is supposed to do exactly
[22:43:14] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:43:22] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:43:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:44:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:45:36] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:46:06] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:46:55] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:47:16] <AliceMeows> I hope you're joking
[22:47:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:47:25] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[22:47:35] <Alipha> it's not far from the truth
[22:48:31] <Alipha> i just go ahead and use std::launder whenever i use reinterpret_cast or placement-new. seems to be the safest ;-)
[22:48:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:48:51] <Alipha> !grab ville
[22:48:52] <nolyc> Alipha: The operation succeeded.
[22:49:54] *** Joins: Shell (~shell@user/shell)
[22:52:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[22:53:32] *** Joins: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[22:55:59] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[22:56:00] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 252 seconds)
[22:58:49] *** Tobbi__ is now known as Tobbi
[22:59:36] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:01:39] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[23:03:51] <ville> AliceMeows: i wish that was the case
[23:04:03] *** Joins: Tangent-Man (~Tang3nt-M@31.132.2.72)
[23:06:40] <ville> i am sure there are some committee people who know what it does. probably those who've implemented it for a compiler
[23:07:56] <ville> as far as getting the word out about how to use it correctly the comittee has done a terrible job. you could argue it's not their job and its sufficient the information is in the standard in some form
[23:07:56] <AliceMeows> All msvc does is return __builtin_launder(_Ptr);
[23:08:02] <AliceMeows> God know what it actually does
[23:08:16] <mitch0> it launders!
[23:08:26] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[23:08:51] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[23:12:37] *** Quits: reset (~reset@user/reset) (Quit: reset)
[23:12:38] <RandomReader> it's just an optimization barrier for alias analysis
[23:12:52] <ville> that pretty much explains nothing
[23:13:42] <ville> it would be a good interview question: "do you know how to use std::launder() and what it does?", if someone claims yes you can dismiss them straight up for being dishonest
[23:13:50] <AliceMeows> LOL
[23:14:01] <Alipha> i always think of "money laundering" when i hear the word "launder", but it seems the intended meaning was to be related to clothes laundering. as in, it is expected that the pointer points to a specific object, and so you need to clean the pointer so that the compiler knows it may point to a new object.. or something
[23:14:09] <RandomReader> well, the precondition is that you know what the aliasing rules are
[23:14:13] <Alipha> !grab ville
[23:14:14] <nolyc> Alipha: The operation succeeded.
[23:14:18] <Alipha> i'll just grab everything ville says
[23:14:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:15:32] <RandomReader> but in general, if you have a T1*, and the rules say that T2* cannot be safely used to access the value there because that would violate strict aliasing, and you've managed to actually create a T2* there despite that, then you need std::launder to get the T2*
[23:15:47] <RandomReader> sorry, "managed to create a T2 object there"
[23:16:15] *** Joins: Guest1419 (~martiert@ti0185q160-2775.bb.online.no)
[23:16:19] <AliceMeows> Seem like some sort of hackery for me, I really don't understand what it actually solves
[23:16:21] <RandomReader> otherwise the compiler is free to follow the rules and assume your T2* is baloney
[23:16:43] *** Quits: Guest1419 (~martiert@ti0185q160-2775.bb.online.no) (Client Quit)
[23:16:44] <AliceMeows> So its some sort of anti optimization thing?
[23:16:58] <RandomReader> that's probably the simplest way to look at it, yes
[23:17:00] *** Joins: martin1 (~martiert@ti0185q160-2775.bb.online.no)
[23:17:15] <RandomReader> it lets you override strict aliasing in a way that the compiler understands
[23:17:26] <RandomReader> and strict aliasing mostly shows up in optimization
[23:18:14] *** Quits: martin1 (~martiert@ti0185q160-2775.bb.online.no) (Client Quit)
[23:18:27] <RandomReader> T1 is const, compiler's probably not going to re-read what's actually stored there, even if T2 is the same type and you've used placement-new somewhere else to reuse the storage .. use std::launder, it will
[23:18:33] <RandomReader> that kind of thing
[23:18:42] *** Joins: Guest8579 (~martiert@ti0185q160-2775.bb.online.no)
[23:18:42] *** Joins: reset (~reset@user/reset)
[23:19:08] *** Guest8579 is now known as martiert
[23:19:39] <ville> RandomReader: again still lacks any meaningful substance that helps people to understand how to use it correctly
[23:19:59] <Alipha> void foo(int *x, float *y) { *y += *x; return *x; } // normally, the compiler can assume that it can use the original *x value it already fetched in the return statement, since `*y += *x;` cannot modify *x, since y cannot point to *x because *y and *x are different types. however, if you use reinterpret_cast or such to make y point to *x, then you need to tell the compiler that it can't assume that y and x point
[23:20:01] <Alipha> to different objects
[23:20:02] <RandomReader> the precondition is that you understand the aliasing rules .. which you repeatedly reject on principle :P
[23:20:42] <CarloWood> What is the fastest way to find all positions in a (large) string that match one of a list of fixed substrings?
[23:20:44] <Alipha> so presumably `return *std::launder(x);` would be used
[23:20:58] <ville> RandomReader: err?
[23:21:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[23:22:24] <Alipha> CarloWood: building a trie for the large string may be faster than simply doing std::find in a loop
[23:23:05] <CarloWood> I wasn't thinking about doing std::find in a loop :P
[23:23:13] *** Joins: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[23:23:39] <CarloWood> I suppose that running over the whole input string once is a given.
[23:23:39] <ville> CarloWood: "the fastest" is a hell of a quantifier
[23:23:57] <Alipha> CarloWood: std::find in a loop could be the fastest solution, depending upon how large the substring list is
[23:24:14] <Alipha> and how large the "large string" is
[23:24:19] <Alipha> and a bunch of other factors
[23:25:37] *** Quits: Tangent-Man (~Tang3nt-M@31.132.2.72) (Ping timeout: 240 seconds)
[23:26:08] <AliceMeows> The last time I've tried I ended up cause cache misses on the cpu which resulted in horrible performance
[23:26:11] <kalven> you can build a dfa with all search strings
[23:26:55] <AliceMeows> Ironically simple std::find in a loop will most likely be the fastest solution
[23:27:15] <Alipha> CarloWood: https://stackoverflow.com/a/3183711 also provides some alternatives
[23:27:22] <AliceMeows> Unless if sorting of any sort is involved
[23:27:47] <CarloWood> Hmm
[23:27:51] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 245 seconds)
[23:28:23] <ville> CarloWood: presumably "the fastest" would involve simd and threading. probably neither you'll get out of a standard library implementation in a good way
[23:28:24] <kalven> there are regex libs thar support these kinds of queries (running a bunch of queries at once on an input).. re2 and hyperscan support it
[23:29:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[23:29:18] <AliceMeows> In my case since no sorting was applied or applicable loop with std::find was the best way to do it
[23:29:23] <Alipha> CarloWood: many solutions involve dynamic memory allocation, whereas std::find does not. dynamic allocation is expensive
[23:31:40] <ville> CarloWood: even what kind of data it is can affect your "the fastest" solution. something that does well on english text might not do so well with others
[23:31:51] *** Joins: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7)
[23:31:53] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:32:13] <ville> Alipha: how did you determine that it was "the best"?
[23:32:18] <ville> err AliceMeows
[23:32:41] <AliceMeows> It was for some pattern matching of data, I couldn't just sort it
[23:32:46] <AliceMeows> Think yara if you're familiar with that
[23:33:30] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 260 seconds)
[23:33:47] <ville> can't say i am. just curious of your confident claim about "the best"
[23:34:05] <AliceMeows> It was the fastest in my case
[23:34:33] <ville> ...out of what? you tried your hand at writing a simd version and so on?
[23:35:09] <AliceMeows> Oh I meant as in principle of utilizing said method instead of using a different algorithm
[23:39:00] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[23:41:28] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[23:42:44] *** Quits: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7) ()
[23:42:59] *** Joins: Asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7)
[23:43:09] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[23:43:17] *** Asszi is now known as asszi
[23:43:25] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[23:43:55] <AliceMeows> There is no doubt that simd version would've outperformed simple std::find in a loop
[23:44:30] <ville> in general you'll find that things like alphabet size, needle size and haystack size will affect how different algorithms perform
[23:45:01] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[23:46:48] <acidtonic> Alipha, Do you have signed versions of the functions you pointed me to here? (https://github.com/alipha/cpp/blob/master/endian/endian.hpp)
[23:47:18] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Client Quit)
[23:48:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:49:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:49:48] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:50:02] <Alipha> acidtonic: eh, no, i should probably write some. but all they would do is call the corresponding unsigned version and cast. e.g., cast int16_t to/from uint16_t.
[23:52:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:52:47] <acidtonic> Alipha, I was going to do that but figured I'd ask first rather than risk making a stupid mistake
[23:53:04] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
[23:54:18] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[23:54:35] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 240 seconds)
[23:55:41] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:56:11] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:56:20] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:57:18] *** Joins: Shell (~shell@user/shell)
[23:57:40] <ville> https://arxiv.org/pdf/1012.2547v1.pdf here's a paper that goes through the bother of testing different algorithms with different parameters. if nothing else it's just good evidence that "the fastest" is really something that can be answered very easily
[23:57:52] <ville> err can't
