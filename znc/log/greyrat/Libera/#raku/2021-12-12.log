[00:06:37] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[00:06:41] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[00:10:52] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[00:11:19] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[00:15:29] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[00:15:37] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[00:19:48] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[00:19:56] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[00:23:28] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[00:23:50] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[01:00:18] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[01:03:28] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[01:10:13] *** Joins: Guest66 (~Guest66@2605:a601:ad6b:2900:d6:5a4a:b8d8:7081)
[01:10:52] *** Quits: Guest66 (~Guest66@2605:a601:ad6b:2900:d6:5a4a:b8d8:7081) (Client Quit)
[01:11:57] *** Joins: tejr (~tejr@user/tejr)
[01:16:40] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:28:45] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 252 seconds)
[01:37:23] *** Joins: jjido (~Denis@90.213.58.125)
[01:57:11] *** Joins: monkey_ (~user@190.104.116.153)
[02:15:28] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:50:28] *** Quits: patrickb (~quassel@55d45722.access.ecotel.net) (Quit: Quit.)
[03:00:57] *** Quits: wanko (~wanko@51.15.4.226) (Quit: leaving)
[03:11:48] *** Joins: HrBollermann (~HrBollerm@dslb-092-076-011-135.092.076.pools.vodafone-ip.de)
[03:12:05] <HrBollermann> yo
[03:14:24] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[03:14:51] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:32:42] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:33:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:48:02] *** Quits: lichtkind (~lichtkind@p200300d0a722722d491c41ff6bff10f8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:23:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:36:10] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[04:39:49] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[04:47:20] *** Quits: monkey_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[04:47:54] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[04:47:55] *** Joins: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:48:13] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 252 seconds)
[04:48:34] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:48:35] *** Joins: Geth__ (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[04:49:12] *** Joins: monkey_ (~user@190.104.116.153)
[04:49:25] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[04:49:38] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 260 seconds)
[04:49:39] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[05:58:15] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 252 seconds)
[06:08:13] *** Joins: monkey_ (~user@190.104.116.153)
[06:19:02] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[06:22:40] *** Joins: monkey_ (~user@190.104.116.153)
[06:43:11] *** Quits: HrBollermann (~HrBollerm@dslb-092-076-011-135.092.076.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[07:27:14] <[Coke]> yo
[07:43:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:43:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:43:46] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:45:57] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[08:45:58] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:45:58] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:45:58] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:45:58] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:46:31] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:46:43] *** Joins: frost (~frost@user/frost)
[08:47:09] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:47:25] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:47:37] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:47:43] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[08:47:46] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:48:02] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:48:09] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:48:37] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:48:59] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:49:01] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[08:51:49] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:52:16] *** Joins: tejr (~tejr@user/tejr)
[09:46:13] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:47:01] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[10:34:21] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:44:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:44:44] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:45:01] *** Joins: frost (~frost@user/frost)
[10:47:25] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[10:47:35] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:48:31] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:56:19] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:57:13] *** Joins: seednode (~seednode@user/seednode)
[11:08:02] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:35:06] <El_Che> ma
[11:47:54] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[12:12:52] *** Joins: patrickb (~quassel@55d4401f.access.ecotel.net)
[12:28:54] *** Joins: jjido (~Denis@90.213.58.125)
[12:53:19] *** Joins: lichtkind (~lichtkind@p200300d0a722725c491c41ff6bff10f8.dip0.t-ipconnect.de)
[12:59:23] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:17:49] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:18:01] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:21:22] *** Joins: jjido (~Denis@90.213.58.125)
[13:35:54] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:41:39] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:41:39] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:41:39] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:39] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:39] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:39] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:39] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:39] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[14:41:40] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[14:41:40] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[14:41:40] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[14:42:05] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[14:42:23] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[14:42:52] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[14:43:33] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[14:43:40] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[14:43:47] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[14:44:11] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[14:51:33] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[15:18:19] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[15:32:41] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[15:32:58] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:34:48] <whatnext> Hello all :)  quick (quite basic) question: say I have a method I want to `wrap`, I can do `&mymethod.wrap({ ... })` - but how do I write this if `mymethod` is stored in `$variable` ?
[15:37:06] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:42:05] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[15:43:49] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[15:44:32] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[15:46:12] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); bar
[15:46:13] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag', 'VAR'?␤␤»
[15:46:28] <El_Che> it works here :)
[15:46:59] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); bar()
[15:46:59] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bar used at line 1. Did you mean 'VAR', 'bag'?␤␤»
[15:48:36] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); $bar()
[15:48:36] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «FOO␤»
[15:48:39] <El_Che> \o/
[15:52:25] <whatnext> hm ok thanks El_Che - but how about if I don't want to write `my $bar = sub { ... }` but instead refer to an existing method
[15:53:02] <whatnext> I mean the name of the method is stored in the variable, rather than the method itself
[15:53:54] <whatnext> this is really a question about how to write `&{$method}` (except this doesn't work)
[15:55:23] *** Quits: lichtkind (~lichtkind@p200300d0a722725c491c41ff6bff10f8.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:56:05] <whatnext> any ideas? :)
[15:59:11] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[15:59:25] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[16:00:34] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Quit: Client closed)
[16:00:51] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[16:05:38] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Ping timeout: 256 seconds)
[16:09:40] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[16:11:02] <El_Che> m: sub foo() {say "FOO"}; sub bar () {print "BAR"; foo()}; &<bar>.wrap(&foo); bar()
[16:11:02] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «BARFOO␤»
[16:12:06] <whatnext> ah wow brilliant... angle brackets eh? :)
[16:12:14] <whatnext> thanks!
[16:14:20] <whatnext> wait... isn't `&<bar>` same as `&bar` ie a literal?
[16:14:34] <El_Che> it's quoted
[16:18:09] <El_Che> m: sub foo() {say "FOO"}; sub bar () {print "BAR"}; my $baz = &bar; $baz.wrap(&foo); bar()
[16:18:09] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «FOO␤»
[16:18:48] <El_Che> lizmat is the one liner wizzard :)
[16:25:11] <whatnext> m: sub foo(){ say "hello" }; my $bar = 'foo'; my $baz = &$bar; $baz.wrap({ say "bye"; callsame }); foo();
[16:25:11] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «No such method 'wrap' for invocant of type 'Str'.  Did you mean any of␤these: 'Map', 'Rat', 'WHAT', 'grep', 'map'?␤  in block <unit> at <tmp> line 1␤␤»
[16:25:44] <whatnext> it's the `$baz = &$bar` part that I can't work out
[16:26:32] <El_Che> one layer of indirection too many :)
[16:30:21] <El_Che> I personally tend to use a dispatch table for that kind of stuff:
[16:30:25] <El_Che> m: sub foo(){ say "hello" }; my %dtable = 'foo' => &foo; my $baz = 'foo'; %dtable{$baz}.wrap({say "bye"; callsame }); foo();
[16:30:25] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «bye␤hello␤»
[16:32:52] <whatnext> that still involves writing the method as a literal though. Thanks for your help anyway El_Che :)
[16:33:47] <El_Che> one can try
[16:33:52] <El_Che> wait for the wizzard
[16:33:53] <El_Che> s
[16:34:53] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:42:42] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Quit: Client closed)
[16:43:37] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[16:44:54] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[16:44:54] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[16:56:31] *** Joins: monkey_ (~user@190.104.116.153)
[17:16:31] *** Joins: jjido (~Denis@90.213.58.125)
[17:21:34] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[17:42:03] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:44:19] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[17:47:56] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[18:40:23] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Quit: Client closed)
[18:40:28] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[18:40:41] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[18:41:49] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Client Quit)
[18:42:02] *** Joins: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu)
[18:44:10] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[18:44:53] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[18:49:06] *** Quits: riffraff (~riffraff@92-249-182-110.pool.digikabel.hu) (Quit: Client closed)
[18:51:38] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[19:37:52] <discord-raku-bot> <Anton Antonov#7232> Is there are a "standard" name for the last evaluated result in REPL? (Something like `_` in Python or `%` in Mathematica.)
[19:40:14] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:42:34] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[20:02:50] *** Joins: jjido (~Denis@90.213.58.125)
[20:03:13] <tbrowder> g'day, rakuuns
[20:04:22] <tbrowder> how do i programmatically check for an installed 'fez'?
[20:04:48] <tbrowder> i've tried 'try require fez'
[20:05:09] <tbrowder> and 'try require Fez'
[20:05:44] <El_Che> discord-raku-bot: Anton Antonov#7232: not that I know off, it's called a sink context in raku
[20:06:09] <El_Che> https://docs.raku.org/language/contexts#Sink
[20:13:29] <tbrowder> never mind, just found solution in docs i think (as i eat humble pie once more)...
[20:29:24] <discord-raku-bot> <Anton Antonov#7232> El_Che, Thank you!
[20:33:08] <tbrowder> back again, it didn't work as expected. the library's name is 'fez' and provides several modules named Fez::*.
[20:40:34] <tbrowder> bummer, fumble fingers again...disregard all above...
[20:51:06] <tbrowder> ok, success. i tested for: try require ::("Fez::CLI"); die if ::("Fez::CLI") ~~ Failure;
[20:52:03] <tbrowder> whew!
[21:02:50] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:02:50] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:04:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:18:20] *** Joins: marcbr (~marcbr@2804:14c:5784:8213:cdf6:5198:e24:d43)
[21:18:43] *** Joins: bars0 (~bars0@c195-36.icpnet.pl)
[21:19:04] *** Quits: bars0 (~bars0@c195-36.icpnet.pl) (Client Quit)
[21:22:29] <marcbr> Hi Raku developers . At first, I would like to congratulate for the great work. I would like to know what are advantages of Raku over Python mainly if Raku has GIL like python. Do you think that Rku could have a good numerical library as numpy for scientific application such as AI/ML?
[21:22:30] <marcbr> I main job is work with ML/DL in python. I would like to see more Raku in the area. What d  you think? It is work while?
[21:27:42] <codesections> Huh, another day, another Raku Advent calendar post on the hacker news front page.  Congrats, pheix!
[21:32:52] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:33:32] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:36:15] <El_Che> (s)he left :)
[22:00:45] <discord-raku-bot> <Anton Antonov#7232> I have a list of arrays, say, `$dfGrouped` and join them into one array with ` $dfGrouped.reduce( -> $x, $y { [|$x, |$y] } )`. Is there are shorter, more elegant way of doing that?
[22:02:14] *** Quits: marcbr (~marcbr@2804:14c:5784:8213:cdf6:5198:e24:d43) (Quit: Client closed)
[22:05:09] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[22:05:53] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 252 seconds)
[22:10:22] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:11:43] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[22:13:02] <codesections> [$dfGrouped.flat]
[22:26:05] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[22:27:50] <ggoebel> marcbr: raku does not have a GIL like python. It has parallelism, concurrency, and asynchrony baked in. https://www.youtube.com/watch?v=JpqnNCx7wVY
[22:27:52] <tellable6> ggoebel, I'll pass your message to marcbr
[22:30:10] *** Joins: abraxxa-home (~alex@smtp.hartmaier.priv.at)
[22:33:09] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[22:33:45] <tbrowder> marcbr: but there is a thread on per6users about getting some raku ppl together to work on something similar
[22:33:47] <tellable6> tbrowder, I'll pass your message to marcbr
[22:36:31] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[22:38:48] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:42:37] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[23:01:20] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:35:19] <discord-raku-bot> <Anton Antonov#7232> codesections Thank you!
[23:41:31] <discord-raku-bot> <Anton Antonov#7232> codesections -- `[$dfGrouped.flat]` actually, this does not work for me.
[23:50:12] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
