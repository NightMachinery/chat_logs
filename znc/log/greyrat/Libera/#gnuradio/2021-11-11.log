[00:20:28] <blue94[m]> Okay, so... Im wondering how are the messages in gr fabricated?
[00:20:38] <blue94[m]> I tried copying it byte for byte and does not seem to work ><
[00:23:44] <blue94[m]> Actually hold on a second..
[00:26:37] * blue94[m] uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/034f7788b840c565131ad0eb5823abc972d07f8c/image.png >
[00:26:38] <blue94[m]> This works
[00:26:39] <blue94[m]> But I feel evil
[00:27:24] <blue94[m]> And I predict the first two bytes actually specify the type of.
[00:31:22] *** Quits: bandnyquist (~Rheanna@218.78.53.13) (Remote host closed the connection)
[00:32:15] *** Joins: bandnyquist (~Rheanna@218.78.79.129)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:58:09] <patchvonbraun[m]> GR uses PMTs for messages.  https://wiki.gnuradio.org/index.php/Polymorphic_Types_(PMTs)
[00:58:48] <patchvonbraun[m]> implementation is in gnuradio-runtime/lib/pmt
[01:13:24] *** Quits: Guest85 (~Guest85@172.58.84.170) (Quit: Client closed)
[01:15:58] *** Joins: Guest85 (~Guest85@172.58.84.170)
[01:16:32] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 246 seconds)
[01:17:45] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[01:21:15] *** Quits: bandnyquist (~Rheanna@218.78.79.129) (Remote host closed the connection)
[01:22:59] *** Joins: bandnyquist (~Rheanna@218.78.53.13)
[01:38:47] <luisherasme[m]> Hiiii
[01:38:50] <luisherasme[m]> <patchvonbraun[m]> "GR uses PMTs for messages..." <- I have a problem with this 
[01:38:58] <luisherasme[m]> https://dsp.stackexchange.com/questions/79066/send-real-and-complex-signal-from-python-to-gnu-radio-zmq-python-sub-gnu-rad
[01:39:16] <luisherasme[m]> I want to send a real signal from python to gnuradio 
[01:39:28] <luisherasme[m]> Using zmq
[01:40:27] <patchvonbraun[m]> I've never used ZMQ, so, I dunno.  
[01:40:41] <patchvonbraun[m]> Hell, I use messages only rarely.
[01:42:20] <luisherasme[m]> 😞
[01:44:18] <patchvonbraun[m]> There may be others who've used it for sample-flow outside of GR.
[01:44:46] <patchvonbraun[m]> One of the problems is that GR has had (and still has) SEVERAL different message-like mechanisms, for various purposes, and it's easy to confuse them.  
[01:46:25] <blue94[m]> Really?
[01:46:38] <blue94[m]> Thats not great
[01:47:06] <patchvonbraun[m]> Really.  There are "tags", there are "messages".  There's the ZMQ support, and the XMLRPC support.
[01:47:29] <blue94[m]> <patchvonbraun[m]> "GR uses PMTs for messages..." <- This doc really is unintelligible. All I wanna know is how to generate message as array of bytes
[01:47:36] <Yamakaja[m]> To be fair, tags and messages are completely different concepts and serve different purposes :P
[01:48:48] <blue94[m]> But I already figured it out by catching messages and reverse engineering it ><
[01:48:58] <Yamakaja[m]> Try the pmt::serialize / deserialize functions
[01:49:05] <patchvonbraun[m]> blue94: You're wanting to generate compatible protocol elements from within another language.  Which means you're going to have to understand how the language it was written in does things.  That would be true whether this was Gnu Radio or something else.  The "I just want to understand how it lays out the bytes" translates to "READ THE SOURCE CODE".  
[01:49:29] <Yamakaja[m]> And yeah, no point in reverse engineering open source software, is there?
[01:49:34] <blue94[m]> patchvonbraun[m]: Im too dumb for that, my background is in chemistry.
[01:49:36] <blue94[m]> Have to hack it
[01:50:08] <patchvonbraun[m]> It's not like PMTs are an Internet Standard Protocol, so expecting an internal detailed "implementation walk-through" in API documentation isn't going to happen.
[01:50:16] <patchvonbraun[m]> Use The Source Luke
[01:51:06] <miek> luisherasme: just drop the pmt part - https://i.imgur.com/reK7qvp.png
[01:52:39] <patchvonbraun[m]> Yeah, GENERALLY messages are intended for communications between blocks that don't involve necessarily samples, but rather things like parameter updates, bits and pieces of demodulated packets, etc, etc.
[01:53:23] <blue94[m]> patchvonbraun[m]: except this bad boy
[01:53:23] <patchvonbraun[m]> So if you're sending sample stream into/out-of Gnu Radio flow, you don't need the PMT stuff at all as far as I know.  
[01:53:24] * blue94[m] uploaded an image: (2KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/9c9ceaa6581e61728b7e1bc6a759d9171b5a7daf/image.png >
[01:53:47] <luisherasme[m]> miek: ?
[01:54:06] <patchvonbraun[m]> Right.  ZMQ can be used BOTH for message type things and sample-type things.
[01:55:08] <patchvonbraun[m]> So, there's a SUB MESSAGE Source and a SUB source--one enters "stuff" into the GR *message* sub-system, the other the *sample-stream* sub-system.
[01:55:21] <patchvonbraun[m]> I've never really used them, but I understand the distinction.
[01:57:18] <blue94[m]> I could really use topics stuff in the ZMQ
[01:57:40] <blue94[m]> But I can hack it by opening a different port for different variables, heh.
[01:58:09] <patchvonbraun[m]> If the only thing you're doing is updating variables/block parameters, you could also use XMLRPC
[02:01:06] <blue94[m]> patchvonbraun[m]: I also wanna render beautiful plots in my winforms
[02:01:21] <blue94[m]> preferably realtime
[02:03:18] <patchvonbraun[m]> ZMQ for sample-like stuff, XMLRPC for parameter setting?
[02:03:41] <blue94[m]> Sounds like the way it should be
[02:05:25] *** Quits: Guest85 (~Guest85@172.58.84.170) (Quit: Client closed)
[02:07:19] <blue94[m]> but the ZMQ stuff is simply amazing
[02:07:21] <blue94[m]> what a time to be alive
[02:08:45] <luisherasme[m]> Hi blue94 are you sending data to GNU radio from an external program? 
[02:09:17] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:09:29] <blue94[m]> luisherasme[m]: yes
[02:09:40] <blue94[m]> From winforms
[02:09:56] <luisherasme[m]> I'm trying to do the same thing 
[02:10:02] <blue94[m]> Awesome
[02:10:03] <luisherasme[m]> But with python 
[02:11:04] <luisherasme[m]> Did you manage to do it?
[02:11:13] *** Quits: bandnyquist (~Rheanna@218.78.53.13) (Remote host closed the connection)
[02:11:44] <blue94[m]> luisherasme[m]: yes
[02:12:14] <blue94[m]> What kind of message do you wanna send?
[02:12:26] <luisherasme[m]> A real signal 
[02:14:22] *** Joins: bandnyquist (~Rheanna@218.78.104.50)
[02:14:28] <blue94[m]> So you dont wanna send a message but a signal?
[02:14:35] <blue94[m]> I mean stream*?
[02:17:57] <luisherasme[m]> An array of floats 
[02:18:28] <blue94[m]> yeah pretty sure its a stream
[02:21:10] <luisherasme[m]> Yes
[02:30:10] <blue94[m]> luisherasme: this works for me
[02:30:20] * blue94[m] uploaded an image: (36KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/d5090106b8ceaf423c3a1b7aa8ca8fd41bedfdfa/image.png >
[02:30:35] * blue94[m] uploaded an image: (24KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/ffd0fe7344702c2cfc22ccfdd0833c8f1ca2ab9e/image.png >
[02:30:56] * blue94[m] uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/0d465365dcf0cd29126b0373ee43f7a5dffe6e3c/image.png >
[02:31:10] * blue94[m] uploaded an image: (7KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/b925e21a3ea1be054117daeb9d77b2e39447545c/image.png >
[02:31:17] <blue94[m]> simple
[02:31:32] <blue94[m]> make array of flaots, iterate each float and convert it to byte array and send frame
[02:31:44] <blue94[m]> this is automatically picked up by subscriber
[02:31:53] <blue94[m]> Amazing stuff <3
[02:32:21] <luisherasme[m]> Why don't you have a time plot?
[02:32:27] <blue94[m]> Now if you know how to do the oposite: pick up audio from float stream and turn it into sound at runtime you can teach me
[02:33:12] <blue94[m]> Not that I'd need it, but would be nice to know how the signal processing works
[02:33:16] <luisherasme[m]> blue94[m]: I don't know, sorry
[02:33:37] <blue94[m]> Okay
[02:33:46] <blue94[m]> Hopefully my method helps :)
[02:33:50] <blue94[m]> Should be the same in python
[02:42:23] *** Joins: baronsaturday[m] (~baronsatu@2001:470:69fc:105::1:3148)
[03:01:23] *** Quits: bandnyquist (~Rheanna@218.78.104.50) (Remote host closed the connection)
[03:02:39] *** Joins: bandnyquist (~Rheanna@218.78.105.67)
[03:09:10] <flash[m]> in another life, we just did `cat sound.wav > /dev/audio` ... wouldn't your float stream be similar?
[03:10:35] <flash[m]> BTW, I would NOT use ZMQ PUB/SUB for control type messages. Given the way ZMQ works under the covers, subscribers can easily miss some number of messages that are published
[03:11:10] <flash[m]> xmlrpc is python-centric (is there a C++ binding?) but is definitely a good choice for C2 stuff
[03:21:49] <flash[m]> there IS a C++ binding!
[03:49:39] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:49:59] <patchvonbraun[m]> flash: Yeah, I think it was in C++ first, and the Python bindings came later.
[03:51:32] *** Quits: bandnyquist (~Rheanna@218.78.105.67) (Remote host closed the connection)
[03:52:34] *** Joins: bandnyquist (~Rheanna@218.78.94.61)
[03:54:14] *** Quits: Crofton (sid401373@lymington.irccloud.com) (Ping timeout: 260 seconds)
[03:57:33] *** Quits: flynn378 (sid63564@id-63564.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:34] *** Quits: esden (sid32455@id-32455.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:35] *** Quits: benreynwar (sid299523@id-299523.lymington.irccloud.com) (Read error: No route to host)
[04:14:03] *** Joins: esden (sid32455@hampstead.irccloud.com)
[04:15:00] <patchvonbraun[m]> blue94: What do you mean by take a float stream and turn it into sound?
[04:15:04] <patchvonbraun[m]> You mean demodulate?
[04:15:44] <blue94[m]> patchvonbraun[m]: I am so new to this I dont know how to turn my stream of floats into sound played
[04:16:05] <blue94[m]> Like the audio sink, but by hand
[04:16:32] <patchvonbraun[m]> YOu mean like a .wav file?
[04:16:50] <patchvonbraun[m]> Or manually reproducing what Gnu Radio does with the audio sink?
[04:16:59] <blue94[m]> patchvonbraun[m]: yes
[04:18:05] <patchvonbraun[m]> Oh.  That wanders into the "swamp" that is the Linux sound subsystem.  There are several different sound APIs.  And delightfully enough, several different "wrappers" that make one sound system sorta-kinda "look" like the other.
[04:18:41] <patchvonbraun[m]> You probably want to look into the pulseaudio API.
[04:19:00] <patchvonbraun[m]> Or, at command-line level, things like sox, arecord, aplay, etc.
[04:20:01] <blue94[m]> yep, I thought digital sound stuff will not be trivial
[04:20:16] <patchvonbraun[m]> The problem historically has been that the way they "fixed" breakage in a given sound subsystem and API was to completely re-architect it.  Find deficiencies, rinse, repeat.  Which is why there are so damned many sound APIs in Linux, and when you jam them all together with wrappers and what-not the end result is a hideous, barely-usable mess.  It could have been different.   
[04:20:21] *** Quits: esden (sid32455@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[04:20:59] <patchvonbraun[m]> I think the Gnu Radio audio sink/source try to figure out which is the "dominant" sound system on your machine, and use that.
[04:22:06] <blue94[m]> Aint gonna be easy, seems like most people play sound from filestream, already .wav and the likes.
[04:22:58] <patchvonbraun[m]> Lots of Gnu Radio apps play sound directly using the audio sink.  
[04:23:25] <blue94[m]> yesh, I dont need to play any sounds... Im just curious :) 
[04:24:05] *** Joins: esden (sid32455@hampstead.irccloud.com)
[04:24:34] *** Joins: flynn378 (sid63564@ilkley.irccloud.com)
[04:25:25] <jholtom> patchvonbraun[m]: yeah, its a real mess now that pipewire has come on the scene and tried to subsume and connect *ALL THE THINGS*
[04:25:59] <patchvonbraun[m]> jholtom: Dear sweet Cthulu
[04:27:08] <patchvonbraun[m]> The zeal with with many CS grad students invent new languages that "will fix everything" also seems to apply to Linux audio....
[04:28:06] <jholtom> patchvonbraun[m]: this time they also decided to bring video into the mix lol
[04:28:11] <jholtom> its really something tbh
[04:28:29] <muaddib[m]> <blue94[m]> "yesh, I dont need to play any..." <- Being curious about GNURadio is good! Audio is a great way to verify your fundamental assumptions as it’s low sample rate and kinda fool proof as to whether or not your dsp is doing what you think it should.  
[04:29:03] <Hash[m]> Also low cost to transmit and receive :)
[04:29:21] <blue94[m]> gnuradio is so fun I cant sleep at night
[04:29:21] <blue94[m]> ;/
[04:30:31] <muaddib[m]> <patchvonbraun[m]> "The problem historically has..." <- I’ve been through this recently with some different applications. One app supports ALSA but not pulse, the other app is the other way around, so then you try to run ALSA through pulse, ugh. Such a headache. 
[04:31:34] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[04:33:04] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[04:33:23] *** Joins: arch3r (~ben@185.66.194.79)
[04:34:01] <patchvonbraun[m]> The nice thing about standards....there are so many from which to choose....
[04:34:40] *** Joins: benreynwar (sid299523@lymington.irccloud.com)
[04:35:48] <muaddib[m]> And get people to agree on. Look at 3GPP!
[04:37:15] <patchvonbraun[m]> I was peripherally involved with 3GPP many many years ago.
[04:38:49] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[04:39:08] *** Joins: arch3r (~ben@185.66.194.79)
[04:40:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:41:14] *** Quits: bandnyquist (~Rheanna@218.78.94.61) (Remote host closed the connection)
[04:41:35] <patchvonbraun[m]> "please lookat this very specific aspect of our security documentation".  Yeah, OK.  Doesn't seem so horrible, but, you know, I haven't looked at the entire system.  They then crowed about how "IETF Security Expert Says our Shit Doesn't Stink".  So, I declined future invitations to help them.
[04:41:43] *** Joins: Crofton (sid401373@lymington.irccloud.com)
[04:42:23] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Read error: Connection reset by peer)
[04:42:58] <muaddib[m]> blue94: if you’re interested in xmlrpc I recently merged some examples into GNURadio that show you the basic usage. 
[04:42:58] <muaddib[m]> https://github.com/gnuradio/gnuradio/tree/maint-3.9/gr-blocks/examples/xmlrpc
[04:43:38] <blue94[m]> > <@muaddib:gnuradio.org> blue94: if you’re interested in xmlrpc I recently merged some examples into GNURadio that show you the basic usage. 
[04:43:38] <blue94[m]> > 
[04:43:38] <blue94[m]> > https://github.com/gnuradio/gnuradio/tree/maint-3.9/gr-blocks/examples/xmlrpc
[04:43:38] <blue94[m]> Thanks! I'm actually on the fence between using wpf and winforms
[04:44:19] <muaddib[m]> patchvonbraun[m]: Haha, why would you look at a WHOLE system when investigating aspects of security?!
[04:44:38] <muaddib[m]> * > <@patchvonbraun:gnuradio.org> "please lookat this very specific aspect of our security documentation".  Yeah, OK.  Doesn't seem so horrible, but, you know, I haven't looked at the entire system.  They then crowed about how "IETF Security Expert Says our Shit Doesn't Stink".  So, I declined future invitations to help them.
[04:44:38] <muaddib[m]> Haha, why would you look at a WHOLE system when investigating aspects of security?! :)
[04:45:18] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[04:45:20] <patchvonbraun[m]> muaddib: My fellow security people were all like "I can't believe you said that shit was OK!".  I had to explain that I had beeen duped.  
[04:47:10] <muaddib[m]> patchvonbraun[m]: Ugh. I think they finally got some of the security in critical planes worked out. I’m saying that at a very general level, but there’s still so much interoperability it gets murky there. 
[04:47:33] <patchvonbraun[m]> Same thing happened inside Nortel once. "Please take a look at our cunning security mechanism".  "Your security mechanism is shit, and it relies on the client side 'playing nice'.  If it were strictly up to me, I'd not approve this, but since I'm not officially in the approvals chain for this, I can't stop you."  That turned into "Marcus says it's awesome".
[04:48:54] <patchvonbraun[m]> People, as it turns out, suck.
[04:49:19] <muaddib[m]> Hahaha, I’m so sorry that happened to you.
[04:50:02] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:50:41] <muaddib[m]> But you made the original GNURadio build script which helped the community almost as much as the introduction of the AD9361
[04:51:01] <muaddib[m]> * But you made the original GNURadio build script which helped the community almost as much as the introduction of the AD9361
[04:51:01] <muaddib[m]> If I may be so bold…
[04:51:10] <patchvonbraun[m]> muaddib: Thanks.
[04:51:38] <patchvonbraun[m]> The world has very much moved-on from build-gnuradio, but I'm happy to have been, in some sense, the match that lit the fire.
[04:53:19] <muaddib[m]> It was the preferred method for many of us for a LONG time.
[04:54:51] <patchvonbraun[m]> Yup.  I was happy when other folks picked up that torch, and distros started to package GR+friends.  Meant I could focus on other things.  
[04:55:47] <patchvonbraun[m]> For over a decade, I was the "lone voice" in using GR for small-scale radio astronomy.  Now, there are quite a few who have decided I wasn't nuts :)
[04:57:00] <patchvonbraun[m]> Even with "build-gnuradio" for my "customers", it was very often a struggle.
[04:57:42] <Hash[m]> What did/do they use in lieu of GR?
[04:58:08] <patchvonbraun[m]> Hash: Well, don't forget, radio has existed long before computers and SDR :)
[04:58:31] <Hash[m]> I see, SDR vs other methods
[04:58:49] <patchvonbraun[m]> My very first SDR-type foray into applying it to radio astronomy didn't use GR.
[04:59:31] <patchvonbraun[m]> See (if you can find it) my 2004 paper "New Directions in Amateur-SETI Receiver Design."
[05:01:17] <patchvonbraun[m]> Small-scale and amateur radio astronomy has a history going back as far as radio astronomy itself, which is 1940s era.  The availability of surplus WWII and Korean-war era radar sets allowed certain amateurs (particularly in the UK) to turn their thoughts to radio astronomy.
[05:02:00] <patchvonbraun[m]> Of course the radio astronomy "big boys" have been using DSP/Digital techniques since the late 1970s.  It took quite a while for the small-scale/amateur crowd to catch up.
[05:02:32] <patchvonbraun[m]> Don't foget.  SDR == DSP on a regular computer
[05:03:01] <patchvonbraun[m]> I worked for a company that was doing DSP-based modems in the early 1980s.
[05:03:57] <Hash[m]> What kind of modems?
[05:04:30] <patchvonbraun[m]> All kinds.   Not a lot of dial-up modems.  Mostly specialized long-haul dedicated-circuit type modems.  
[05:05:06] <patchvonbraun[m]> A lot of X.25 muxes as wel
[05:05:22] <patchvonbraun[m]> Remember there were globe-spanning data networks before the Internet :)
[05:07:40] <muaddib[m]> I’ve been having a lot of “fun” with GNURadio and APRS. Really trying to understand the interworkings of ax.25/kiss
[05:07:57] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[05:08:27] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[05:08:43] <patchvonbraun[m]> I haven't touched anything AX.25ish in probably 20 years.
[05:09:12] <patchvonbraun[m]> But I did help put Ottawa's first wireless internet "service" in the air in the 1980s.
[05:10:13] <patchvonbraun[m]> But 56kbps p-csma should be enough for anyone, right? :)
[05:11:50] <patchvonbraun[m]> KISS was a thing that allowed you to make a TNC (terminal node controller) really "dumb", so that you could shift many of the AX.25 network smarts into your host PC.
[05:12:05] *** Quits: goldrak (~goldrak@80-239-140-67.teliacarrier-cust.com) (Ping timeout: 246 seconds)
[05:12:15] <Hash[m]> <patchvonbraun[m]> "See (if you can find it) my 2004..." <- Found the abstract on setileague.org but can’t get the actual paper there that I can see 
[05:13:01] <patchvonbraun[m]> Hash: Unfortunately, I don't have it myself anymore.
[05:13:15] <Hash[m]> $15 and they’ll mail me a CD :)
[05:14:12] <patchvonbraun[m]> We turned all our TAPR TNC2s into "KISS" machines, and ran Phil Karn's NOS on our PCs instead.
[05:14:35] <Hash[m]> But “Testing the SETI-Hacker Hypothesis” looks like my evenings reading material!
[05:15:18] <patchvonbraun[m]> I had a lot of run writing that paper..
[05:15:59] <muaddib[m]> patchvonbraun[m]: that's kinda been my take. the OTA vs. network aspects are where i'm focusing. trying to effectively clone my DT878's APRS transceiver. there's plenty of stuff out there that does this. Another dude trying to learn ALL the steps....
[05:16:53] <patchvonbraun[m]> NOS was super groovy at the time.  an IP and AX.25 stack
[05:17:34] <patchvonbraun[m]> NOS actually ended up being used inside several commercial products, including the company I worked for at the time.  Phil did OK on commercial licensing.
[05:18:29] <patchvonbraun[m]> Phil and I are still friends all these years later.
[05:19:21] *** Joins: bandnyquist (~Rheanna@218.78.104.50)
[05:19:23] <patchvonbraun[m]> He's a frighteningly smart man, and we almost lost him a few years back.  
[05:31:16] *** Quits: bandnyquist (~Rheanna@218.78.104.50) (Remote host closed the connection)
[05:33:22] *** Joins: bandnyquist (~Rheanna@101.91.232.166)
[05:39:41] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[05:40:08] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[05:50:37] <muaddib[m]> <patchvonbraun[m]> "He's a frighteningly smart man..." <- Glad he’s not gone. I was wondering if he was “frighteningly smart”
[05:52:39] <patchvonbraun[m]> He had mantle-cell lymphoma. The survival stats are dismal.  He agreed to a highly-experimental, and potentially-fatal treatment.  Pulled through.  Retired from Qualcomm.  Helps highschool kids launch HABs these days.
[05:53:06] <muaddib[m]> Wow
[05:57:17] <Hash[m]> Some amateur radio guys from KC capture LMS-6 radiosonde’s and are reverse engineering them and writing new firmware, they document it on my wiki.
[05:57:20] <Hash[m]> https://wiki.recessim.com/view/LMS-6_Radiosonde
[05:59:00] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[05:59:11] <patchvonbraun[m]> Hash: Noyce
[05:59:19] *** Joins: arch3r (~ben@185.66.194.79)
[06:01:21] *** Joins: linext_ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[06:04:53] *** Quits: linext__ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Ping timeout: 264 seconds)
[06:09:21] <Hash[m]> That track them via the online service that shows the weather patterns, then use Yagi’s and drones for the last bit
[06:09:29] <Hash[m]> s/That/They/
[06:21:24] *** Quits: bandnyquist (~Rheanna@101.91.232.166) (Remote host closed the connection)
[06:24:00] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[06:31:33] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[06:31:54] *** Joins: arch3r (~ben@185.66.194.79)
[06:51:08] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:53:18] *** Joins: DiffieHellman_ (~Username@user/curve25519chacha)
[06:53:51] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Ping timeout: 276 seconds)
[07:12:03] *** Quits: bandnyquist (~Rheanna@218.78.99.237) (Remote host closed the connection)
[07:16:18] *** Quits: techwolf12 (~techwolf1@chix-ch.rev.red-panda.be) (Quit: Ping timeout (120 seconds))
[07:16:29] *** Joins: techwolf12 (~techwolf1@chix-ch.rev.red-panda.be)
[07:18:04] *** Joins: bandnyquist (~Rheanna@218.78.105.67)
[07:33:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[08:01:32] *** Quits: bandnyquist (~Rheanna@218.78.105.67) (Remote host closed the connection)
[08:03:26] *** DiffieHellman_ is now known as Tejs
[08:05:35] *** Tejs is now known as DiffieHellman
[08:30:13] *** DiffieHellman is now known as tman
[08:36:32] *** Quits: Malvolio (~Malvolio@user/malvolio) (Quit: ~thrive and prosper~)
[08:38:40] *** tman is now known as DiffieHellman
[08:46:11] *** Quits: miaoski (~miaoski@2001-b011-0001-8ea5-d08b-6f35-eef9-939d.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[08:49:39] *** Joins: Malvolio (~Malvolio@user/malvolio)
[08:58:15] *** Quits: ecs (ecs@user/ecs) (Ping timeout: 268 seconds)
[08:59:46] *** Joins: miaoski (~miaoski@2001-b011-0001-6a07-6887-e41f-50cd-b79e.dynamic-ip6.hinet.net)
[09:00:12] *** Joins: ecs (ecs@user/ecs)
[09:00:32] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[09:30:59] *** Joins: linext__ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[09:33:25] *** Quits: linext_ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[09:41:40] *** Quits: bandnyquist (~Rheanna@218.78.99.237) (Remote host closed the connection)
[09:42:58] *** Joins: bandnyquist (~Rheanna@101.91.232.166)
[10:23:02] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:31:28] *** Quits: bandnyquist (~Rheanna@101.91.232.166) (Remote host closed the connection)
[10:33:47] *** Joins: bandnyquist (~Rheanna@218.78.94.61)
[11:21:20] *** Quits: bandnyquist (~Rheanna@218.78.94.61) (Remote host closed the connection)
[11:21:42] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[11:23:09] *** Joins: bandnyquist (~Rheanna@61.171.69.141)
[11:25:36] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:546c:d795:8d5c:5516)
[11:30:37] *** Quits: ecs (ecs@user/ecs) (Read error: Connection reset by peer)
[11:30:44] *** Joins: ecs (ecs@user/ecs)
[12:11:31] *** Quits: bandnyquist (~Rheanna@61.171.69.141) (Remote host closed the connection)
[12:12:57] *** Joins: bandnyquist (~Rheanna@101.91.232.166)
[12:13:32] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[12:18:59] *** Quits: monowar (~Thunderbi@FL1-118-109-45-169.fko.mesh.ad.jp) (Quit: monowar)
[12:22:19] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[12:37:57] *** Quits: benreynwar (sid299523@lymington.irccloud.com) (Read error: Connection reset by peer)
[12:38:05] *** Joins: benreynwar (sid299523@id-299523.lymington.irccloud.com)
[12:47:02] *** Joins: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz)
[12:50:05] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[12:50:18] *** Joins: arch3r (~ben@185.66.194.79)
[13:18:08] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[13:18:54] <jemius> .
[13:23:20] <muaddib[m]> Can anyone suggest why the CMA equalizer block would have a 2x scaling difference over the Linear Equalizer block using a CMA equalizer object?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d661ad1d34a95ba07bceaf1ea9b84c6992e153bd)
[13:51:22] *** Quits: bandnyquist (~Rheanna@101.91.232.166) (Remote host closed the connection)
[13:52:59] *** Joins: bandnyquist (~Rheanna@61.171.38.68)
[13:59:05] *** Quits: arch3r (~ben@185.66.194.79) (Quit: bye)
[13:59:21] *** Joins: arch3r (~ben@185.66.194.79)
[14:35:58] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[14:38:43] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[14:41:22] *** Quits: bandnyquist (~Rheanna@61.171.38.68) (Remote host closed the connection)
[14:43:36] *** Joins: bandnyquist (~Rheanna@218.78.104.50)
[14:44:15] *** guerby_ is now known as guerby
[15:31:18] *** Quits: bandnyquist (~Rheanna@218.78.104.50) (Remote host closed the connection)
[15:33:32] *** Joins: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net)
[15:34:22] *** Joins: bandnyquist (~Rheanna@218.78.109.69)
[16:08:01] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[16:08:07] *** Quits: mallkrampus (~mallkramp@172.93.207.85) (Ping timeout: 256 seconds)
[16:08:14] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Client Quit)
[16:08:22] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[16:19:47] *** Joins: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:d592:e62e:b2ce:4a1b)
[16:19:59] *** Quits: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:d592:e62e:b2ce:4a1b) (Remote host closed the connection)
[16:21:20] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[16:21:22] *** Quits: bandnyquist (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:23:46] *** Joins: bandnyquist (~Rheanna@218.78.67.149)
[16:24:31] <jemius> Is there a pre-defined type for the grc-yaml to pass a list of lists?
[16:51:05] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 264 seconds)
[17:02:59] <willcode4[m]> jemius: Pass to what?
[17:03:25] <jemius> willcode4[m], To the constructor of an OOT
[17:03:59] <jemius> There are types such as real_vector
[17:04:21] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[17:05:02] <willcode4[m]> Arbitrary types won't work with C++. But, you can pass something that looks like a vector and your code knows is really NxM.
[17:05:40] <jemius> We are not talking about arbitrary types. I need to pass a list of float vectors. [[1.0, 2.4], [3.7, 4.4]]
[17:06:03] <jemius> I could pass it as a string and parse it myself. But I was hoping there were a better solution
[17:07:38] <willcode4[m]> Take a look at the code for Vector Source. Pass in `[1.0, 2.4, 3.7, 4.4]` and also have a parameter that says vector size is 2.
[17:10:32] *** Quits: benreynwar (sid299523@id-299523.lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:11:01] *** Quits: flynn378 (sid63564@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:24] <jemius> willcode4[m], is it the vlen-parameter you're talking about?
[17:11:24] *** Quits: bandnyquist (~Rheanna@218.78.67.149) (Remote host closed the connection)
[17:11:32] *** Quits: Crofton (sid401373@lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:11:53] *** Quits: esden (sid32455@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[17:12:40] <willcode4[m]> For Vector Source it is. You can make a similar parameter that has whatever effect you're looking for. Or maybe vlen is what you're looking for.
[17:12:59] *** Joins: esden (sid32455@hampstead.irccloud.com)
[17:13:08] *** Joins: flynn378 (sid63564@5.254.36.60)
[17:13:11] *** Joins: benreynwar (sid299523@2a03:5180:f:2::4:9203)
[17:13:38] <jemius> willcode4[m], sounds as if you parse it yourself then, basically. What I need is to parse an arbitrary number of touples [a1, a2, b1, b2...] so I guess I could use a normal vector. That's not as pretty, though
[17:13:53] <Yamakaja[m]> <willcode4[m]> "Arbitrary types won't work..." <- `void *` would like to have a word 😂
[17:13:55] *** Joins: bandnyquist (~Rheanna@218.78.53.13)
[17:13:57] *** Joins: Crofton (sid401373@lymington.irccloud.com)
[17:16:18] *** Joins: yesno_ (~yesno@109.98.151.179)
[17:19:42] *** Quits: yesno (~yesno@109.98.151.179) (Ping timeout: 260 seconds)
[17:35:14] <funkylab[m]> <Yamakaja[m]> "`void *` would like to have a..." <- C++ and `void*` aren't really the best friends (says the guy using GNU Radio, which hands around all its payload data as `void*`)
[17:35:26] <funkylab[m]> <jemius> "Is there a pre-defined type..." <- yesno. 
[17:36:21] <funkylab[m]> so, I guess this is for usage (of a C++ block) in a python flow graph (e.g. for some top_block.py) 
[17:36:49] <funkylab[m]> pybind11 can and will wrap `std::vector<integral_type>` pretty successfully from/to numpy
[17:36:55] <funkylab[m]> / plain python lists
[17:38:11] <funkylab[m]> and it does, if I remember correctly, also work for `vector<vector<float>>` and such
[17:38:34] <funkylab[m]> so, on the Python/C++ boundary, no additional friction
[17:38:53] <funkylab[m]> thing is you ask for a type for a property field, in GRC
[17:40:19] <funkylab[m]> that type info is mostly used for validation. If you can do without, just don't specify a type, I think that works
[17:46:43] *** Quits: esden (sid32455@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:47:11] *** Quits: Crofton (sid401373@lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:47:11] *** Quits: flynn378 (sid63564@5.254.36.60) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: benreynwar (sid299523@2a03:5180:f:2::4:9203) (Ping timeout: 264 seconds)
[17:52:10] *** Joins: Crofton (sid401373@lymington.irccloud.com)
[17:52:24] *** Joins: notadog (~notadog@152.96.24.233)
[17:53:17] *** Joins: benreynwar (sid299523@lymington.irccloud.com)
[17:53:22] *** Joins: flynn378 (sid63564@ilkley.irccloud.com)
[17:53:33] <notadog> hi, is there a way to remotely set variables used in a flow graph using zmq blocks?
[17:55:10] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 260 seconds)
[18:01:22] *** Quits: bandnyquist (~Rheanna@218.78.53.13) (Remote host closed the connection)
[18:01:36] *** Joins: esden (sid32455@hampstead.irccloud.com)
[18:03:57] <JoshMorman[m]> <funkylab[m]> "and it does, if I remember..." <- being able to wrap vector<vector<float>> was one of the issues I always ran into with swig, but pybind11 seems to have no issue with
[18:04:20] *** Joins: bandnyquist (~Rheanna@61.171.21.169)
[18:05:34] <funkylab[m]> <notadog> "hi, is there a way to remotely..." <- don't think so, directly. Truth be told, I can see that being useful for a few display things! But: if this is about changing anything about the signal processing done, you should probably not try to take the detour through python variables. 
[18:05:38] <funkylab[m]> so, what's the use case here?
[18:06:29] <notadog> I'd like to control the parameters of the RX chain from another computer
[18:08:17] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[18:08:49] <notadog> funkylab[m], what is exactly the problem of  using python variables / what would be a better way?
[18:09:46] <funkylab[m]> mostly the hard-to-really-define lifetime, GNU Radio multithreading vs Python GIL problems
[18:10:09] <funkylab[m]> plus this whole crossing-from-C++-land into the Python interpreter
[18:10:14] <funkylab[m]> (which really makes this hard)
[18:10:50] <funkylab[m]> (the other way round is easy, C++ having its own state wrapped to python, but modifying Python interpeter state from N concurrent threads – not easy to do safely)
[18:11:28] <funkylab[m]> better way: I'll probably say something like using GNU Radio's message passing to cause whatever you want to cause .)
[18:11:30] <funkylab[m]> s/./:/
[18:11:31] <notadog> Ah I see
[18:11:59] <notadog> Is there a wiki page on  message passing?
[18:12:14] <notadog> nvm
[18:12:46] <funkylab[m]> If you tell us what you want to effect, we might be able to point you in directions
[18:13:31] <funkylab[m]> if you want to manipulate your own blocks, you'd need to add a message handler to them
[18:14:17] <notadog> umm, so for example to change the loop bw of a costas loop
[18:15:25] <funkylab[m]> cool!
[18:15:42] <jemius> If you've got an OOT with several self-defined blocks, how can you instantiate one of those block-classes from within your another block? When my class is called ` class afb_impl : public afb`, the compiler complains about mymodule::afb_impl not specifying a type
[18:17:18] <JoshMorman[m]> you shouldn't call the _impl classes but instead the `make` function of the base class which serves as a factory for the implementation
[18:18:40] <funkylab[m]> notadog: yeah, so I've just checked: the costas_loop_cc doesn't have a bandwidth setter (so, you could also not set it using a variable at runtime!) 
[18:18:59] <funkylab[m]> but it does have the option to incorporate an SNR estimate that you can feed it via message
[18:19:42] <jemius> JoshMorman[m], so far I don't want to call make, but instead prepare a new class containing instances of the other class. So I guess I need to define that as a smart-pointer?
[18:21:13] <notadog> funkylab[m] where can I see which attributes can be accessed by the message system?
[18:21:57] <funkylab[m]> jemius: hm, instantiating blocks from within other blocks: you're writing a hier_block? (else, that design pattern sounds complicated / dangerous in terms of terminability due to circular dependencies)
[18:22:33] <funkylab[m]> notadog: sadly, only by scanning the source code for `message_port_register_in` 
[18:23:02] <funkylab[m]> within GRC, such blocks (if their YAML wrapper is complete) get a message port (grey)
[18:23:23] <jemius> funkylab[m], It is not necessarily a hierarchical block. Let's say my other block is a filter, and I need several of those filters in my new block
[18:23:37] <miek> the costas loop bw can be changed at runtime, the impl is in blocks::control_loop
[18:24:15] <funkylab[m]> jemius: that's what I question: Why would you need instances of filter blocks in another block? or is this about the filter classes (which aren't blocks)
[18:24:31] <muaddib[m]> notadog: have you looked at xmlrpc?
[18:24:32] <funkylab[m]> miek: ah, true
[18:24:47] <jemius> funkylab[m], it's about the class. I need the methods, the functionality which is implemented there
[18:25:00] <funkylab[m]> then you don't need an instance, right?
[18:25:45] <jemius> funkylab[m], I'm not exactly a C++ genius.. I would have thought I need an instance of the class, yes, because the class body stores the state. On this state the methods operate
[18:26:16] <funkylab[m]> to me this sounds like a design problem: you should probably separate the block class from the "not necessarily a block" functionality. you could use the "not a block" class as a parent class for the block class
[18:26:41] <funkylab[m]> or really have an instance
[18:27:32] <notadog> funkylab[m], oh, that is unfortunate. But in principle if I find the right message ports, then I could control the setting  from a remote pc with a ZMQ SUB message source, right?
[18:27:48] <JoshMorman[m]> jemius: Take a look at the in-tree filter blocks.  They separate out non-block objects into a kernel namespace, and these can be easily used as general c++ objects through the rest of the codebase
[18:27:53] <funkylab[m]> jemius:  `filter_block<type,type,type>` is such a thing: it relies on a `filter<type,type,type>` internally, but you can use the `filter<type,type,type>` without the block
[18:28:02] <funkylab[m]> heh, two engineers one thought!
[18:28:16] <funkylab[m]> notadog: exactly!
[18:28:19] <muaddib[m]> Three! 
[18:28:19] <muaddib[m]> Sorry anytime I hear “change variables from another <flowgraph, external program computer, spaceship, etc>” I always think XMLRPC
[18:28:42] <muaddib[m]> * external program, computer,
[18:28:58] <funkylab[m]> muaddib: that is a sensible association, it's just that variables can be a bit hazardous, and I personally had forgotten about our XMLRPC :D
[18:29:13] <muaddib[m]> Noooooo!
[18:29:31] <muaddib[m]> I just had my first pull request approved and it was fixing XMLRPC!
[18:29:46] <jemius> funkylab[m], yes, I have used thos filter-kernels before. I'd need to redesign my foo to much that. I assume the block-class then only takes care about dealing with forecast and those gr-void-vectors for IO
[18:30:27] <muaddib[m]> funkylab[m]: We have examples in 3.9 and main 
[18:30:59] <funkylab[m]> :D my brain is holey
[18:31:08] <funkylab[m]> jemius: pretty much, yes.
[18:32:22] <funkylab[m]> `fir_filter_blk_impl.cc` is relatively short
[18:33:38] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:33:57] <jemius> yeah, so is my free-time if I continue progressing at that speed ^^
[18:41:12] <muaddib[m]> funkylab: don’t know if you saw, but I left a post on the chat early this morning asking you to offer some “professorial pwnage”.
[18:41:59] <muaddib[m]> Trying to understand why I’m seeing differences across similar CMA implementations in GR
[18:45:01] <notadog> Another question: I am learning about pilot symbols for channel estimation and would like to have a custom frame for my packets to do that. What would be a quick way to implement a custom framer?
[18:51:22] *** Quits: bandnyquist (~Rheanna@61.171.21.169) (Remote host closed the connection)
[18:53:21] *** Joins: bandnyquist (~Rheanna@218.78.105.67)
[19:02:38] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:546c:d795:8d5c:5516) (Quit: uros)
[19:02:52] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:546c:d795:8d5c:5516)
[19:11:33] *** Joins: amlangford[m] (~amlangfor@2001:470:69fc:105::ffeb)
[19:11:33] <amlangford[m]> Reaching out for some help with assessing the performance of a GNU based QPSK over the air modem: Looking for some metrics such as SNR/EVM/BER out of the RX modem... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e827b61fa3ef9fde67b5abad375b3a5578df0f53)
[19:13:51] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 245 seconds)
[19:14:21] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[19:20:45] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[19:30:08] *** Quits: benoit[m]1 (~benoitgnu@2001:470:69fc:105::e73b) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: Lori[m] (~ljakabmat@2001:470:69fc:105::1406) (Quit: You have been kicked for being idle)
[19:32:29] *** Quits: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 264 seconds)
[19:34:01] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 250 seconds)
[19:34:40] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[19:41:29] *** Quits: bandnyquist (~Rheanna@218.78.105.67) (Remote host closed the connection)
[19:43:16] <muaddib[m]> amlangford: does the BER measurement you get running the “in the box” examples work for your purposes, but you just want to extend that functionality to work across separate flowgraphs/machines?
[19:44:04] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[19:51:41] <amlangford[m]> <muaddib[m]> "amlangford: does the BER..." <- I havent actually managed to find an example that uses the BER block. If you can point an example out to me that would be helpful. But in answer to your question, yes, I need to extend the measurement to work across a remote link (physically separated TX & RX) ... Im looking to extract figures to quantify the improvement of one type of antenna against another, for the same channel and modem
[19:54:18] <muaddib[m]> amlangford[m]: OK. If you have something that works for you in the box, work systematically and just try to extend that to give you similar output across physically separated machines. Start there, then work on the type of plot you want. They’re two separate problems.
[19:57:14] <muaddib[m]> For extending across 2 machines:
[19:57:14] <muaddib[m]> If they are able to be connected via an IP network you can use ZMQ to send your input stream on the first machine as a reference to the second machine. Accept the input on the second machine with ZMQ and apply some delay (probably with a GUI Range to fine tune it and that should give you the same effect as your original. I believe those examples use the delay to line up the bitstreams if I remember correctly. 
[19:57:58] <muaddib[m]> s/If they are able to be connected via an IP network you can use ZMQ to send your input stream on the first machine as a reference to the second machine. Accept the input on the second machine with ZMQ and apply some delay (probably with a GUI Range to fine tune it and that should give you the same effect as your original. I believe those examples use the delay to line up the bitstreams if I remember correctly./If they are able to be
[19:57:58] <muaddib[m]> connected via an IP network you can use ZMQ to send your input stream on the first machine as a reference to the second machine. Accept the input on the second machine with ZMQ and apply some delay to the second machines bitstream (probably with a GUI Range) to fine tune it and line things up. That should give you the same effect as your original. I believe those examples use the delay to line up the bitstreams if I remember correctly. /
[19:58:04] <muaddib[m]> s/If they are able to be connected via an IP network you can use ZMQ to send your input stream on the first machine as a reference to the second machine. Accept the input on the second machine with ZMQ and apply some delay (probably with a GUI Range to fine tune it and that should give you the same effect as your original. I believe those examples use the delay to line up the bitstreams if I remember correctly./If they are able to be
[19:58:04] <muaddib[m]> connected via an IP network you can use ZMQ to send your input stream on the first machine as a reference to the second machine. Accept the input on the second machine with ZMQ and apply some delay to the second machines bitstream (probably with a GUI Range) to fine tune it and line things up. That should give you the same effect as your original example. I believe those examples use the delay to line up the bitstreams if I remember
[19:58:04] <muaddib[m]> correctly. /
[19:58:35] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 264 seconds)
[19:58:55] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:546c:d795:8d5c:5516) (Quit: uros)
[19:59:50] <amlangford[m]> unfortunately the end points are separated by a significant distance (20km+) so an IP network as a "back-channel" wouldn't be feasible. 
[20:01:13] <muaddib[m]> That may be true in your case but not at all true as a general statement.
[20:04:51] <muaddib[m]> I guess I’m confused because you said as a part of your validation you need a copy of your input stream as a reference, so there needs to be a second, stable channel to get that information back to your input stream to the second box
[20:06:01] <muaddib[m]> You can pick up a pair of 900mhz point to point ubiquity wifi links for cheap. They work great and are rock solid.
[20:08:21] <amlangford[m]> <muaddib[m]> "That may be true in your case..." <- yes, agreed. The message is a simple ASCII file so I can have a copy of it at the demodulator to use as a reference. I can probably use that along with a delay as the second input to the BER block. But it would be useful if I could see an example of using the BER block in GNU radio; As yet I havent managed to find one 
[20:10:58] *** Joins: mallkrampus (~mallkramp@172.93.177.93)
[20:25:32] <muaddib[m]> Ok. I don’t use that block. Can’t remember if I’ve ever used it before actually. Have you looked in the source tree under gr-digital for examples?
[20:31:22] *** Quits: bandnyquist (~Rheanna@218.78.99.237) (Remote host closed the connection)
[20:33:00] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[20:42:06] *** Joins: foz (mt@gateway/vpn/protonvpn/deliriousgeorge)
[20:48:04] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[20:51:58] *** Quits: notadog (~notadog@152.96.24.233) (Quit: Client closed)
[20:56:29] *** Joins: jemius (~imperator@2001:16b8:2d43:c500:d9ee:e831:d2f:a332)
[21:04:31] *** Joins: notadog (~notadog@152.96.24.233)
[21:21:22] *** Quits: bandnyquist (~Rheanna@218.78.99.237) (Remote host closed the connection)
[21:24:03] *** Joins: bandnyquist (~Rheanna@218.78.53.13)
[21:26:41] *** Quits: mallkrampus (~mallkramp@172.93.177.93) (Ping timeout: 250 seconds)
[21:39:14] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[21:40:22] *** Joins: mallkrampus (~mallkramp@172.93.177.92)
[21:44:33] *** Joins: deliriousGeorge (mt@gateway/vpn/protonvpn/deliriousgeorge)
[21:45:14] *** Quits: foz (mt@gateway/vpn/protonvpn/deliriousgeorge) (Ping timeout: 260 seconds)
[21:50:05] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[21:50:52] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[21:51:59] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[21:56:14] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 246 seconds)
[22:11:17] *** Quits: bandnyquist (~Rheanna@218.78.53.13) (Remote host closed the connection)
[22:13:18] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[22:17:43] *** deliriousGeorge is now known as foz
[22:27:15] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[22:29:10] *** Quits: notadog (~notadog@152.96.24.233) (Quit: Client closed)
[22:36:48] *** Quits: yesno_ (~yesno@109.98.151.179) (Quit: Leaving)
[22:56:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:01:20] *** Quits: bandnyquist (~Rheanna@218.78.99.237) (Remote host closed the connection)
[23:04:06] *** Joins: bandnyquist (~Rheanna@218.78.67.149)
[23:18:45] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[23:27:18] *** Joins: vladis[m] (~vladisgnu@2001:470:69fc:105::1:3213)
[23:29:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:31:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:31:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:32:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:44:37] *** Quits: jemius (~imperator@2001:16b8:2d43:c500:d9ee:e831:d2f:a332) (Quit: Leaving)
[23:45:12] <vladis[m]> Hello everyone! I use radioconda(win 10) and i want install gr-dsd packet. Are there any tutorials? https://wiki.gnuradio.org/index.php/CondaInstall studied but not clear how "Building OOT modules to use with conda-installed GNU Radio" .
[23:51:18] *** Quits: bandnyquist (~Rheanna@218.78.67.149) (Remote host closed the connection)
[23:52:47] *** Joins: bandnyquist (~Rheanna@218.78.99.237)
[23:53:35] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[23:53:53] <vladis[m]> And yet, how can you switch between RX/TX?  (in the current program, USRP B200) Thanks! 
