[00:00:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:01:21] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:543e:ff2f:c02f:e622)
[00:02:00] *** Joins: wyclif (~wyclif@user/wyclif)
[00:03:17] <deniska> JayDoubleu: https://httpbin.org/ this one is a pretty useful resource
[00:04:28] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Remote host closed the connection)
[00:05:07] *** Joins: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at)
[00:06:56] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[00:06:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:08:30] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:955c:2cac:3bce:ab9b) (Read error: Connection reset by peer)
[00:08:38] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[00:10:04] *** Quits: chance (~chance@user/chance) (Quit: Client closed)
[00:15:08] <raek> p-i-: if it had been 'foo' -> '"foo"', then I'd suggest json.loads. if you are putting these values into a data class, then I recommend looking to pydantic
[00:15:14] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[00:18:40] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[00:18:43] *** Joins: wyclif (~wyclif@user/wyclif)
[00:19:04] *** Joins: ano (~weechat@user/ano)
[00:19:36] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[00:19:58] *** Joins: ano (~weechat@user/ano)
[00:20:52] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[00:21:13] *** Joins: ano (~weechat@user/ano)
[00:22:39] <Neoon> premium
[00:22:42] <Neoon> threadception does work
[00:22:49] <Neoon> running threads in threads
[00:23:02] <Neoon> best invention in humankind
[00:23:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:25:14] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[00:26:10] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:1192:32f0:b4c4:fcde) (Read error: Connection reset by peer)
[00:26:38] *** Joins: hanaan (~naan@user/naan)
[00:26:54] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[00:27:24] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:3520:312c:2826:5947)
[00:27:45] <Jin^eLD> habnabit_: is .cdef() supposed to pick up types from further includes? I am again not getting anywhere, still trying to expose can_frame via cffi https://paste.ee/p/w57sh
[00:29:19] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[00:29:46] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:5931:ed4d:e7a9:efaf) (Ping timeout: 240 seconds)
[00:30:36] <Jin^eLD> the error goes away if I manually add typedefs for those things in the .cdef()
[00:30:42] *** Joins: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr)
[00:31:32] *** Joins: jocke-l (jocke-l@a.x0.is)
[00:32:22] *** Joins: Cheaterman (~Cheaterma@82-65-202-73.subs.proxad.net)
[00:32:33] *** Quits: a7rs (~a7rs@86.10.115.139) (Quit: WeeChat 3.2)
[00:33:03] <Cheaterman> Yayyyy just as I remember. Hello everyone :-) happy to be here
[00:33:19] <grym> Cheaterman: same bat time, different bat channel
[00:33:42] <Cheaterman> Sounds accurate :-D same batcave dwellers too, which is what matters
[00:34:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[00:34:29] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:34:39] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Quit: WeeChat 2.8)
[00:34:50] *** Joins: wyclif (~wyclif@user/wyclif)
[00:35:36] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[00:36:00] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[00:36:03] *** Joins: northernsage (~northerns@187.107.158.146)
[00:36:38] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[00:38:14] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[00:38:22] <grym> a different, and better, class of idiot.
[00:38:23] <grym> :)
[00:38:27] <grym> speaking for myself, anyway
[00:38:34] *** Joins: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at)
[00:38:47] <Cheaterman> :-D hahahahaha
[00:39:22] <Cheaterman> I'm still the same idiot, but I like to think I become better everyday. Whether it's about being an idiot or a decent human being is still up for debate... :-D
[00:39:40] *** Quits: magla (~gelignite@55d4860d.access.ecotel.net) (Quit: Stay safe!)
[00:39:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:40:25] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 246 seconds)
[00:40:25] <grym> they're unrelated
[00:40:28] <Cheaterman> For one, I was preaching "ultimate" decoupling until not long ago ; today, I discovered a case where decoupling literally has the opposite effect of what it should - turned the whole thing into an unmaintainable piece of spaghetti code
[00:40:32] <Cheaterman> grym: fair indeed
[00:40:35] *** Quits: krz3si (~szara@2a02:a31c:853b:b780:df0:1631:dcb9:4e4f) (Read error: Connection reset by peer)
[00:40:38] <grym> didn't you pay attention in D&D class? INT and WIS are separate dice rolls!
[00:41:18] <Cheaterman> HAHAHA fair indeed!!! That part does apply to life too... especially here, we've seen so many intelligent idiots and sometimes we see wise dumbos too
[00:41:30] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[00:41:59] <Cheaterman> (How to be a wise dumbo: 1°) realize you're a dumbo. 2°) ???? 3°) profit)
[00:42:07] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[00:42:38] <Cheaterman> Oh, but in your wise words (referring to https://imgur.com/gallery/dzbQCj4 ) - "wisdom is knowing whichever state you're currently in, it will only take so long until you're in the other"
[00:42:41] <grym> the trick is not making the same mistake over and over
[00:42:51] <grym> oh, yes.  that's on my wall
[00:42:56] <Cheaterman> hahahahahahaha
[00:43:02] *** Joins: zebrag (~chris@user/zebrag)
[00:43:36] <SnoopJ> INT is knowing that collections.named_tuple exists. WIS is knowing not to use collections.named_tuple unless you specifically want a tuple (with sprinkles).
[00:43:37] <Cheaterman> I honestly love this macro, as well as the Dijkstra quote about "strictly limited size of [the] skull"
[00:44:01] <Cheaterman> SnoopJ: That sounds extremely accurate too :-)
[00:44:10] <grym> They presented him the words: "And this, too, shall pass away." How much it expresses! How chastening in the hour of pride! -- how consoling in the depths of affliction! "And this, too, shall pass away." And yet let us hope it is not quite true.
[00:44:31] *** Parts: intrac (~intracube@user/intracube) (Konversation terminated!)
[00:44:38] <Cheaterman> grym: Hehe, I first learned about this quote from Tom Scott, and I friggin loved it
[00:44:44] <Cheaterman> So much wisdom in so few words
[00:45:08] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:14] *** Joins: txtsd (~txtsd@user/txtsd)
[00:45:29] <Cheaterman> THen again, look at us - more than two decades on a network, and this too has passed :-)
[00:45:40] <Cheaterman> (seemingly for the better, so can't complain really)
[00:45:41] *** Joins: audiocat (~audio@2603-8081-1800-6a65-b3c0-70ee-cb55-0b14.res6.spectrum.com)
[00:45:52] <SnoopJ> IRC is dead, long live IRC!
[00:45:59] <Cheaterman> Something like that, exactly!!!
[00:46:46] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[00:47:26] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[00:49:27] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[00:49:55] *** Joins: northernsage (~northerns@187.107.158.146)
[00:50:25] *** Joins: wyclif (~wyclif@user/wyclif)
[00:50:28] *** mpmc is now known as MagicConch
[00:50:54] *** MagicConch is now known as mpmc
[00:52:33] *** Joins: bailsman (~Mm1@xls01.freecult.org)
[00:52:51] <bailsman> Can I safely put millions of items in a set?
[00:53:04] <bailsman> How can I figure out what the limit is for when data structures stop working as well?
[00:53:14] <bjs> bailsman: how do you define "as well"
[00:53:30] <bailsman> become slow
[00:53:36] <bailsman> or worse, incorrect
[00:53:46] <bjs> bailsman: a set has ~O(1) insertion and membership checks, and ~O(n) iteration
[00:53:52] <bjs> bailsman: there is no size at which a set will become incorrect
[00:53:53] <InPhase> bailsman: Incorrect, never, until you run out of memory.  Slower is gradual with size.
[00:54:10] <SnoopJ> bailsman, set.update() is about as efficient as it can be for this task
[00:54:24] <bailsman> Insert/find/delete stay O(1) regardless of how many millions of items I put in?
[00:54:26] <bjs> bailsman: if you put twice as many things in a set, it takes twice as long to loop over but it doesn't affect how long it takes to insert, remove or check membership of a value.
[00:54:27] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:28] <SnoopJ> bailsman, yes
[00:54:32] <bjs> bailsman: yes that's what O(1) means.
[00:54:44] <bailsman> That sounds like pure magic to me
[00:54:45] <SnoopJ> yea, big-oh notation is an "asymptotic" limit
[00:55:00] <SnoopJ> bailsman, it's taking advantage of a Bloom filter, but that's pretty close to magic :)
[00:55:07] <bailsman> I wonder how it works. I can imagine some hash function but at some point you would have collisions, no?
[00:55:09] <InPhase> bailsman: O(1) is the theoretical specification, from algorithmic complexity.  In practical terms it will slow down because of cache issues.
[00:55:10] <bjs> bailsman: it's "amortized" O(1) which means it averages O(1)
[00:55:45] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:5931:ed4d:e7a9:efaf)
[00:55:47] <SnoopJ> or hrm, no, I'm misremembering the Bloom bits from unicode. They aren't part of set()
[00:56:04] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[00:56:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:57:03] *** A_Dragon is now known as RemoteHost
[00:57:24] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[00:57:57] <bjs> bailsman: yes it's a hash set. You can find really bad examples that give something that looks more like ~O(n) behaviour but they don't occur in the real world
[00:58:58] <SnoopJ> or at least, you'd have to go out of your way to get those kinds of collisions
[00:59:43] *** RemoteHost is now known as A_Dragon
[00:59:49] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:00:00] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Client Quit)
[01:00:20] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:00:26] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[01:00:43] <Cheaterman> bailsman: FWIW, it _is_ pure magic :-)
[01:00:46] <SnoopJ> some discussion of hashing perf/security here: https://www.python.org/dev/peps/pep-0456/#performance
[01:00:53] <bjs> It's very much not magic :)
[01:01:40] <Cheaterman> Potato potato :-) my point is mostly about it totally can look impossible until you know how it's done, but that doesn't prevent you from using it! Isn't abstraction beautiful <3
[01:02:17] *** Joins: Cyp_ (~cyp@192038128058.mbb.telenor.dk)
[01:03:46] *** Joins: hmw[at] (~hmw@public.metalab.wien.funkfeuer.at)
[01:03:49] *** Joins: azazello (~azazello@109.75.158.195)
[01:04:11] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[01:04:32] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[01:04:39] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:05:07] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[01:05:53] *** Joins: RougeR (~rougex250@user/rouger)
[01:06:24] *** Quits: Cyp (~cyp@213.237.82.162) (Ping timeout: 272 seconds)
[01:06:26] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Client Quit)
[01:06:39] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[01:07:03] <dav1d> bailsman, there are multiple ways to deal with colissions, e.g. you could have a linked list as a bucket (not just a single element), or you could keep hashing until you find an empty bucket, some strategies are more efficient than others and sometimes a lookup does take longer than another, but others already explained the O notation
[01:07:06] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) (Ping timeout: 252 seconds)
[01:07:29] <RougeR> if you style/indent your brackets like this...https://dpaste.org/gMMa
[01:07:32] <RougeR> i will hunt you down
[01:07:45] <RougeR> and i will turn off your default PEP-8 formatting
[01:07:55] <RougeR> auto-formatting*
[01:08:13] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[01:08:32] <RougeR> the only acceptable way (for anyone sane)
[01:08:32] <RougeR> https://dpaste.org/EDX5
[01:08:45] *** Joins: DaNeenjah (~jake@70.sub-72-106-108.myvzw.com)
[01:09:02] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[01:09:28] *** Quits: pneff (~pneff@2a02:168:fedc:0:61b4:dc27:7da2:cc21) (Ping timeout: 246 seconds)
[01:09:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:10:02] *** Parts: bpalmer (~user@user/bpalmer) (ERC (IRC client for Emacs 27.2))
[01:10:05] <Cheaterman> agreed
[01:10:08] <Cheaterman> for better or worse
[01:10:09] <ChrisWarrick> or just use black and stop wasting time thinking about formatting
[01:10:13] <Cheaterman> also that
[01:10:30] <SnoopJ> black +1
[01:10:41] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:10:43] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:05] <RougeR> Cheaterman, thank god
[01:11:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:11:21] <RougeR> also ive heard of black, but reading now
[01:11:38] *** Joins: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at)
[01:11:46] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 240 seconds)
[01:11:51] *** Quits: con3 (~con3@41.71.16.55) (Read error: Connection reset by peer)
[01:11:56] <RougeR> id go with black...if i agree with its style
[01:12:00] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[01:12:13] <SnoopJ> removing the programmer's opinions from the problem is black's main feature
[01:12:24] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[01:12:41] <RougeR> but i like my opinions, they are better than other developers or the linters! /s
[01:12:41] <ChrisWarrick> you might not always agree with black, but as SnoopJ said, it’s much better than fighting over minutiae
[01:12:46] <SnoopJ> (so that a collection of programmers cannot bicker over which color to paint a bikeshed which does not exist)
[01:12:49] <RougeR> yeah i can see your reasoning
[01:12:53] <Cheaterman> RougeR: noooo
[01:13:00] <Cheaterman> exactly as mentioned earlier
[01:13:03] <RougeR>  Cheaterman [/s]
[01:13:08] <Cheaterman> the whole point is that you don't have to agree
[01:13:29] *** Joins: Celeo (~Celeo@user/celeo)
[01:13:36] <Cheaterman> it's most effective when you just don't worry about it. if you start worrying and (for example...) commit the cardinal sin of forking it to change it for your own taste, then you defeat the purpose
[01:13:44] <Cheaterman> worst would be if your variant gets adopted equally as black
[01:13:46] <SnoopJ> you can always re-format to your own taste while you're developing/reading
[01:14:11] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[01:14:27] <Cheaterman> ↑ that. I usually will - the commas/brackets would look like you put them RougeR, but Black will change them when I commit
[01:14:30] <leonardo> i can say that once i started using black i felt a sense of relief
[01:14:33] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[01:14:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:15:06] <grym> recently i learned about darker https://github.com/akaihola/darker
[01:15:09] <RougeR> Cheaterman, so i could "unlint" it locally
[01:15:16] <grym> which applies black only to lines you've already touched this commit
[01:15:18] <Cheaterman> exactly, by hand, and temporarily
[01:15:23] <SnoopJ> RougeR, yes. If you use git, this is called a "smudge" filter
[01:15:39] *** Parts: streety (~streety@li761-24.members.linode.com) ()
[01:15:45] <Cheaterman> grym: gradual adoption?
[01:15:48] <grym> Cheaterman: yep
[01:15:52] <Cheaterman> neat indeed
[01:15:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[01:15:55] <bss> yes, the major negative feature of black, IMO, is its militant application to lines that 1) you didn't touch and 2) were already valid PEP8, just not the way black would do it
[01:15:55] <ChrisWarrick> grym: which is a great way to make a mess out of your git history
[01:15:56] *** Quits: rber (~raphael@user/rber) (Remote host closed the connection)
[01:15:59] <Cheaterman> also darker than black is a GREAT anime
[01:16:04] <Cheaterman> and I don't say that often about anime :-)
[01:16:19] <habnabit_> Jin^eLD, i believe you can `typedef ... canid_t;`
[01:16:22] *** Joins: rber (~raphael@user/rber)
[01:16:24] <ChrisWarrick> bss: just do it once, tell git to ignore the commit while blaming, and call it a day
[01:16:28] <RougeR> idk...
[01:16:30] <habnabit_> Jin^eLD, which makes it 'some integer idk'
[01:16:35] <grym> ChrisWarrick: i agree that getting everyone on board with a big push commit and then adding that commit to a blame filter is nicer
[01:16:38] <RougeR> how do black/pep-8 fit together
[01:16:48] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[01:16:48] <grym> black is pep8 compliant
[01:16:51] <Cheaterman> chris's approach is how I did it so far and it worked for me
[01:17:00] <Cheaterman> but I could see why gradual adoption matters for some projects
[01:17:05] <Cheaterman> monorepo for example
[01:17:07] <RougeR> yeah i dislike a lot of PEP-8
[01:17:20] <grym> you get used to it
[01:17:23] <RougeR> i mean not lots, but i feel it is inflexible
[01:17:31] <ChrisWarrick> RougeR: inflexible?
[01:17:38] <Cheaterman> I generally like PEP8, and the parts that I didn't like, I generally learned to not only cope but appreciate their value
[01:17:55] <Cheaterman> besides, PEP8 is only a set of guidelines
[01:17:59] <RougeR> ChrisWarrick, multiple imports on one line for standard lib
[01:18:00] <Cheaterman> you're free to have your own company style guide
[01:18:02] <SnoopJ> bss, re: (1), I mostly run it with pre-commit, so it only applies to whatever I've staged. Not sure what the best way to mask-ignore entire files/packages is
[01:18:11] <Cheaterman> RougeR: what? I don't think s
[01:18:13] <Cheaterman> so
[01:18:13] <RougeR> two spaces between short functions in the same file
[01:18:25] <Cheaterman> yes, two spaces are fine to me
[01:18:33] <RougeR> they are fine for anything over 2-3 lines
[01:18:35] <Cheaterman> make them methods if you want only one space
[01:18:37] <SnoopJ> probably --exclude or the equivalent in pyproject.toml, the latter of which would be really nice in complicated projects
[01:18:48] <SnoopJ> (there's always the nuclear option of `# fmt:off` though)
[01:19:10] <ChrisWarrick> RougeR: 22:47:59 <RougeR> ChrisWarrick, multiple imports on one line for standard lib  ← is that actually in pep8?
[01:19:23] <Cheaterman> SnoopJ: that nucular option means touching the files, which is nono for monorepos obviously, so I guess there's a --exclude yeah (I don't see why there wouldn't - everything has it)
[01:19:23] <RougeR> as in pep-8  wont allow that
[01:19:28] <bss> part of it is I can't be bothered to solve 1 when I'm already side-eyeing point 2, because my PEP-8 preference disagrees with black so I'm constantly bickering with it
[01:19:34] <RougeR> if im importing logging, json, os, sys
[01:19:39] <bss> and especially solve 1 for a crew of junior developers
[01:19:39] <RougeR> and its a 10 line file
[01:19:43] <RougeR> let me one line the import
[01:19:45] <SnoopJ> Cheaterman, monorepo has always struck me as signing up for as much headache as possible anyway
[01:19:53] <SnoopJ> particularly when paired with VCSes that do it poorly
[01:20:01] *** Joins: Juggernaut (~Juggernau@cpe-67-253-33-23.maine.res.rr.com)
[01:20:04] *** Joins: ExTRaTeRrEsTRe (~extra@177.228.176.127)
[01:20:06] <SnoopJ> (not that this stops anyone)
[01:20:26] <Cheaterman> SnoopJ: People that have good reasons seem to appreciate its value... it's probably better than git submodules or actual vendoring, so there's that
[01:20:38] <bss> but I also see myself as Chaotic Good, so really overall black solves a problem I don't have
[01:20:45] <Cheaterman> I'm personally not a fan, if you couldn't tell - but I can appreciate the arguments for people in favor of them
[01:20:57] *** Joins: todda7 (~torstein@ppp141237025126.access.hol.gr)
[01:20:59] <SnoopJ> Cheaterman, dunno, I mostly hear about it at BigCo™ and they certainly don't appear to make decisions based on reason
[01:21:02] <bss> my mantra is more: does flake8 complain? no? you're good
[01:21:18] <Cheaterman> SnoopJ: that is fair... I've been witness to the braindead lack of decisioning on their part lately
[01:21:37] <Cheaterman> bss: pylint tho
[01:21:38] <SnoopJ> I mostly use `# fmt:off` in my editor snippets to tell black "no, really, leave this alone" when I'm editing something that will still pass through it.
[01:21:44] <RougeR> ive actually been looking at monorepos
[01:21:47] <SnoopJ> But since adopting pre-commit I have very little of this
[01:22:00] <bss> pylint is too nitpicky for my blood
[01:22:01] <SnoopJ> because I don't stage that stuff anyway
[01:22:11] <RougeR> I am starting to amass a lot of internal python tooling i want to version control
[01:22:18] <RougeR> and a lot of the tools are not that big
[01:22:40] <RougeR> i could see a mono-repo being useful for collections of some of these tools
[01:22:58] *** Joins: jpe__ (~sharpergu@2001:16b8:5ca9:cc00:5e81:4ba6:2b99:b833)
[01:23:21] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[01:23:32] <bss> if another dev is also running pylint I won't stop them, because IIRC it doesn't conflict with flake8, or at least how our projects configure flake8. ditto for black, really, if they can avoid the "reformat all the things" trample-commits
[01:23:38] *** jpe__ is now known as sharperguy
[01:23:48] *** Quits: sharperguy (~sharpergu@2001:16b8:5ca9:cc00:5e81:4ba6:2b99:b833) (Client Quit)
[01:25:46] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[01:25:53] <RougeR> this is my pylint ignore list
[01:25:54] <RougeR> https://dpaste.org/s8Ry
[01:26:22] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:27] <RougeR> i probably have a few in there i dont need
[01:26:28] <Cheaterman> ↑ that seems to be a popular approach. just force it to shut up on things you don't care about
[01:26:55] <SnoopJ> hmm, maybe I misrepresented how it works with pre-commit, you'll still have black running over the whole (staged) file
[01:27:15] <RougeR> with those in place, pylint never screams at me when i dont want it to
[01:27:30] <Cheaterman> (and you're happy that it does when it does)
[01:27:38] <Cheaterman> (most importantly IMHO)
[01:28:34] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[01:28:50] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[01:28:58] <RougeR> indeed
[01:29:00] <Jin^eLD> habnabit_: oooh, got that, so ... works everywhere, not just for struct members
[01:29:18] <Jin^eLD> thanks!
[01:29:25] <RougeR> Cheaterman, honestly most of the things PEP-8 complains about or i dont like, i will refactor away 9/10 times
[01:29:28] *** Joins: cheater (~Username@user/cheater)
[01:29:51] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:29:57] <Cheaterman> That's the thing too - while you don't agree with PEP8 directly, you'll still come to the same conclusion in the end
[01:30:00] <RougeR> what i dislike is auto-save formatters where people dont think if it could be rewritten to avoid the ugly syntax
[01:30:07] <SnoopJ> no real software solution for strong preferences
[01:30:07] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[01:30:14] <SnoopJ> (aside from "I wrote my own")
[01:30:26] *** Joins: r3m (~launch@user/r3m)
[01:30:29] <Cheaterman> (or just "my ego shall dissolve in the Borg hive, let's Black")
[01:30:30] <RougeR> I come from ruby...and things are a little more loose n fast over there
[01:30:35] <RougeR> we still have rubocop though
[01:31:01] <RougeR> i was suprised at some of the rubocop rules pep-8 doesnt have
[01:31:07] <Cheaterman> (and I don't mean that as a bad thing - if you become one with the hive, you can read code produced by the hive faster)
[01:31:13] <RougeR> i.e empty lines between early returns or exception raising
[01:31:21] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[01:31:28] <RougeR> Cheaterman, hehe i might get there one day
[01:31:34] <Cheaterman> (if you care about your typing speed, you most certainly do care about your reading speed even more)
[01:31:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:31:40] <RougeR> I just hate ugly code
[01:31:41] <RougeR> so much
[01:31:46] <RougeR> it physically pains me
[01:31:48] <Cheaterman> You and I both, pal
[01:31:56] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[01:32:01] <RougeR> aye...and pep-8 can be ugly
[01:32:02] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.102)
[01:32:08] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[01:32:10] *** Joins: km_ (~km@static.55.93.181.135.clients.your-server.de)
[01:32:13] *** Quits: txtsd (~txtsd@user/txtsd) (Read error: Connection reset by peer)
[01:32:14] <Cheaterman> what's fun in my situation is that I often get to see some - my associate is also my trainee, and he still has a bunch to learn
[01:32:14] *** Quits: dalan (~dalan@110-175-157-170.tpgi.com.au) (Quit: Ping timeout (120 seconds))
[01:32:20] <Cheaterman> and somehow refuses to join here :-/
[01:32:33] *** Joins: dalan (~dalan@110-175-157-170.tpgi.com.au)
[01:32:35] <p-i-> raek: +1 pydantic, thanks!
[01:32:39] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 256 seconds)
[01:32:48] <Cheaterman> PEP8 doesn't make ugly or beautiful code IMHO, it's more of an architectural thing
[01:32:49] <RougeR> Ahh my old boss absolutely fekin rake me over the coals for ugly/bad code
[01:32:53] <Cheaterman> I can read Borg code just fine
[01:32:58] <RougeR> destroyed my confidence...but improved my code
[01:33:08] <Cheaterman> but Borg code can be ugly if they architecture it terribly
[01:33:26] *** Quits: nepeat (~nepeat@79.110.170.62) (Quit: ZNC 1.8.2 - https://znc.in)
[01:33:33] *** Joins: shabius_ (~shabius@45.15.19.196)
[01:33:36] <RougeR> Im currently taking a java dev under my wing as he learns python
[01:33:41] <Cheaterman> RougeR: I'm much nicer than that, and at least I got some useful things into him
[01:33:44] <RougeR> he has some interesting insights which helps
[01:33:50] <qunzhong_luxian> I think things like PEP8 are generally nice just to prevent bikeshedding, at least somewhat, by having a language standard for code style.
[01:33:52] <Cheaterman> ordering imports, ordering properties from most to least specific
[01:33:52] <RougeR> but he has some ugly and weird syntax too
[01:33:54] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 240 seconds)
[01:33:57] <Cheaterman> makes the thing faster to read
[01:33:58] *** Quits: todda7 (~torstein@ppp141237025126.access.hol.gr) (Ping timeout: 246 seconds)
[01:34:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[01:34:21] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1002) (Ping timeout: 256 seconds)
[01:34:27] <RougeR> Cheaterman, yeah im very conflicted on my time as a jr dev
[01:34:27] <Cheaterman> qunzhong_luxian: agreed, Black being the ultimate bikeshedding-nuke
[01:34:31] <RougeR> but overall im better for it
[01:34:41] <RougeR> PRs would be multi-week minefields
[01:34:52] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:34:52] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Read error: Connection reset by peer)
[01:34:52] <RougeR> Cheaterman, ahhh yesh ordering imports..
[01:34:56] <altendky> Cheaterman: just look out for those trailing commas manipulating it...
[01:35:00] <RougeR> another thing i strong disagree with Pep-8 on
[01:35:00] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[01:35:06] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:35:16] <qunzhong_luxian> I do appreciate how truly opinionated black is. I don't use it, but I respect it.
[01:35:17] <Cheaterman> altendky: hehehe, yeah, been there done that
[01:35:18] <RougeR> id much rather group my imports by how they are related than alphebetically
[01:35:19] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[01:35:19] <grym> black . && isort --profile black .  lgtm ship it
[01:35:32] <altendky> i had a library (qtpy) that i used `ignore_missing_imports = True` for since it didn't export types.  i am replacing that with a library (qts) that does have hints.  but, i would like to deal with all the new mypy errors separately from the library swap.  is there a mypy config option for "pretend this library doesn't have hints and that that is ok"?
[01:35:48] <Cheaterman> RougeR: it's equally random, and if you want that grouping, you have packages
[01:35:50] *** Joins: lmmx (~louis@host-80-47-117-118.as13285.net)
[01:35:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:35:57] <RougeR> Cheaterman, is it?
[01:36:00] <Cheaterman> it is
[01:36:01] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[01:36:05] <RougeR> testing libraries grouped together makes sense to me
[01:36:20] <Cheaterman> well that's why they're in a package?
[01:36:24] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:36:25] <RougeR> they are not always
[01:36:29] <Cheaterman> you can make them always
[01:36:31] <RougeR> import faker
[01:36:33] <RougeR> import pytest
[01:36:33] <Cheaterman> it's up to you ultimately
[01:36:37] <RougeR> not
[01:36:40] <RougeR> import faker
[01:36:40] <Cheaterman> from testing_libs import faker, pytest
[01:36:43] <Cheaterman> it's up to you...
[01:36:47] *** Quits: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[01:36:47] <altendky> i can't imagine that there are many groups that we would all universally agree on
[01:36:50] <RougeR> Cheaterman, hmmm
[01:36:55] <RougeR> that is a good idea tbh
[01:37:01] <RougeR> i dont use that approach often
[01:37:05] <Cheaterman> IKR, that's why I'm suggesting it. But usually you won't need to
[01:37:08] <RougeR> i will try that out going forward
[01:37:18] <Cheaterman> makes the thing easier to mock too
[01:37:25] <Cheaterman> monkey patching the module
[01:37:26] <altendky> that does force them all imported as a group.  you have to break the pattern to only import one of them
[01:37:28] <RougeR> yeah i like it, i get to put the middle finger up to Pep-8 and still keep compliant
[01:37:35] <Cheaterman> you got it
[01:37:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 240 seconds)
[01:37:54] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[01:38:06] *** Joins: wyclif (~wyclif@user/wyclif)
[01:38:20] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[01:38:21] *** Joins: txtsd (~txtsd@user/txtsd)
[01:38:32] <SnoopJ> altendky, I don't see anything that seems very applicable in the --help, but maybe you could filter out the relevant failures after the fact? I'm guessing not because you probably have it in CI that makes this complicated to do.
[01:38:34] *** Joins: y1n (~y1n@84-115-64-22.wifi.dynamic.surfer.at)
[01:38:36] <RougeR> i might show my imports for  a file
[01:38:58] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:39:26] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[01:39:49] <SnoopJ> altendky, oh, you want to pretend it *doesn't* have hints, nevermind me...
[01:39:52] <Cheaterman> altendky: I think there is such option, and in fact I think it's mostly about filtering out the warnings, mypy will assume Any for everything by default
[01:40:11] *** Joins: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:40:12] <Cheaterman> Oh.
[01:40:17] <Cheaterman> I might have misunderstood too
[01:40:46] <Cheaterman> Dunno if you could locally shadow the .pyi maybe... ?
[01:40:57] <Cheaterman> bit of black magic, but isn't that always the case with your questions :-)
[01:41:21] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:41:27] <nubonix> [sorry for the long message] hey, ive got a pyqt5 thread question. So im trying to create threads with a loop, except it seems when im creating batches of two threads, they keep intersecting each other when i create them, creating a kind of toggle effect and this isnt what im after, so was looking for some help as i dont know what to do about this
[01:41:27] <nubonix> # x, y are rows, columns in a table
[01:41:27] <nubonix> # each (row, column) value needs to be a thread as I have two threads per (row, column) value and I can toggle between them
[01:41:27] <nubonix> https://bpa.st/QUSA
[01:41:27] <nubonix> block == (row, column)
[01:41:28] <nubonix> Within each block, I have video feedback from another computer [im watching two programs remotely], but with the code above, the video keeps toggling between the first thread and the second. It only acknowledges the last thread [i can only see video from both programs on the last block [of threads]] and it can be controlled via any of the blocks [not sure why as im creating a QPushButton for each loop iteration, that is assigned to
[01:41:28] <nubonix> the block](edited)
[01:41:40] <Cheaterman> nubonix: that's a long message indeed
[01:41:45] <Cheaterman> looked like spam for a second :D
[01:41:46] <altendky> i feel like this came up in #twisted-dev at one point maybe...  and i looked for awhile and kind of came up with an answer, maybe...  hmm
[01:41:56] <Cheaterman> altendky: do share, so we can comment
[01:42:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:42:25] <altendky> if i figure it out, sure :[
[01:42:28] <hodapp> anyone have a clue of some things that behave something like Apache Spark (particularly with respect to a computational graph for data processing over which it can do things like parallelize), but in Python and without requiring the massive freight train that is Apache Spark?
[01:42:28] <RougeR> see im looking at my imports now Cheaterman
[01:42:31] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:42:34] *** Joins: congratulated (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:42:47] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[01:42:54] <RougeR> and i actually do agree with blank lines between different types of imports (project/package etc)
[01:42:55] *** Joins: cuz (~user@38.140.58.234)
[01:42:55] <hodapp> I looked at joblib and it seems that despite what https://joblib.readthedocs.io/en/latest/why.html says it doesn't do anything close to that 'pipeline' functionality
[01:43:01] <RougeR> if there are a sufficient number of imports
[01:43:11] <Cheaterman> hehehe
[01:43:19] <SnoopJ> hodapp, can you tell us some more about what you're doing? If it's using the scipy stack, dask might be a good fit..
[01:43:22] <RougeR> if its over 10 lines of imports yeah split em up with blank lines
[01:43:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[01:43:28] <RougeR> under 10 lines...not worth it imo
[01:43:42] <Cheaterman> special cases aren't special enough... you know the drill
[01:43:49] *** Joins: hendursa1 (~weechat@user/hendursaga)
[01:44:36] <hodapp> SnoopJ: at a high level, dealing with pipelines of data transformation & inference in machine learning
[01:44:51] <RougeR> Cheaterman, black :(
[01:44:57] <jinsun> altendky: follow_imports="skip" maybe https://mypy.readthedocs.io/en/stable/config_file.html#confval-follow_imports
[01:44:57] <RougeR> here you go
[01:45:02] <RougeR> do your worst Cheaterman
[01:45:02] <Cheaterman> RougeR: yup ;)
[01:45:05] <RougeR> sanitized from work
[01:45:06] <RougeR> https://dpaste.org/ewjr
[01:45:26] <altendky> jinsun: that at least sounds familiar, let me read, thanks
[01:45:32] <grym> hodapp: joblib is thin spackle over multiprocessing, which is less than ideal
[01:45:39] <Cheaterman> first line is a big no-no, and second line is very meh
[01:45:44] <Cheaterman> other than that it's OK
[01:45:46] *** Joins: eldenring0 (uid506233@id-506233.tooting.irccloud.com)
[01:46:00] *** Joins: cursey (uid186300@id-186300.charlton.irccloud.com)
[01:46:01] <RougeR> Cheaterman, the first line im pretty stuck on lol
[01:46:02] <hodapp> grym: I was rather misled by the "a pipeline topology can be inspected to deduce which operations can be run in parallel" at their 'Why joblib' page
[01:46:03] <Cheaterman> you'll see datetime.datetime in my code
[01:46:05] <RougeR> the second not as much
[01:46:06] <hodapp> since joblib doesn't actually do that
[01:46:18] *** Quits: y1n (~y1n@84-115-64-22.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[01:46:23] <grym> hodapp: yeah not even close
[01:46:25] <RougeR> what about from datetime import datetime
[01:46:27] <SnoopJ> hodapp, what's the level of granularity you're interested in for parallelization?
[01:46:41] <Cheaterman> (my own style guide says I generally import only top level packages from stdlib, but there's a few exceptions like dataclasses)
[01:46:51] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ohuwuteu)
[01:47:09] <Cheaterman> (datetime isn't one of the exceptions yet, that might change though)
[01:47:28] <hodapp> SnoopJ: likely fairly coarse (at the level of large functions), but it it understands heavily data-parallel things too, that could be handy
[01:48:15] <Cheaterman> (my own style guide used to dictate writing polyglot code, so it's not like it has all the answers... do what works for you and your team and organization)
[01:48:15] <SnoopJ> hodapp, okay, and what kind of hardware are you parallelizing across? A single machine, a few, many?
[01:48:15] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[01:48:30] *** Joins: northernsage (~northerns@187.107.158.146)
[01:48:57] <RougeR> Cheaterman, but date_time = datetime.datetime.strptime(date_time_string, '%Y-%m-%d %H:%M')
[01:49:03] <hodapp> more likely processes within a single machine, but distributed across a few machines on a network would probably be put to use too
[01:49:06] <RougeR> makes me want to call the samaritans
[01:49:07] <SnoopJ> that last is very good advice: guidance that is absent from the context to which it applies is ~worthless
[01:49:54] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:49:59] <hodapp> I see Dask says something about task graphs, that's promising...
[01:50:10] <Cheaterman> RougeR: the variable names make me cry, other than that it's fine
[01:50:19] <altendky> jinsun: welp, that got rid of most of them, so thanks.  we'll see what's going on with the stuff that's left.
[01:50:27] <RougeR> Cheaterman, yeah i just grabbed it from SO as an example i was looking at
[01:50:37] <Cheaterman> start_date = datetime.datetime.fromisoformat(data['start_date'])
[01:50:43] <RougeR> nononono
[01:50:54] <RougeR> Cheaterman, have you ever used our lord and saviour ruby?
[01:50:58] <Cheaterman> ofc not
[01:51:08] <RougeR> missing out ;)
[01:51:09] <Cheaterman> I have software to ship
[01:51:12] <RougeR> hehe
[01:51:24] *** Quits: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de) (Remote host closed the connection)
[01:51:37] <RougeR> Its a crying shame ruby got pigeon holed into shitty rails
[01:51:46] <RougeR> i love ruby, its a beautiful language with some flaws
[01:51:52] <RougeR> easily the nicest syntax out there
[01:51:55] <Cheaterman> everyone says that, to the point I'd tend to agree, from mere anecdotes
[01:52:04] <Cheaterman> altho TBF, gitlab uses rails, and it's not half bad
[01:52:27] <RougeR> rails is very magical convention over configuration
[01:52:28] <Cheaterman> anyway, not super topical
[01:52:31] <RougeR> yeah
[01:52:32] <hodapp> the IT people at my job run two gitlab instances, and disagree >_>
[01:52:35] <SnoopJ> hodapp, dask is definitely heavy on "make array stuff go fast" but it does have this more general category as its second enumerated use-case. Luigi is a pretty common framework that focuses on this use-case (i.e. the notion of "tasks" and combinations thereof)
[01:52:38] <Cheaterman> we have #python-offtopic though RougeR
[01:52:42] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:52:43] <RougeR> Cheaterman, ahh good point
[01:52:48] <RougeR> will auto-joinon that
[01:52:52] <RougeR> i forgot about ity
[01:52:57] <hodapp> SnoopJ: what more general category?
[01:52:59] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[01:53:03] <Cheaterman> hodapp: shame on them, I run three and it's fine :-D
[01:53:33] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:36] <SnoopJ> hodapp, #2 here: https://stories.dask.org/en/latest/#overview
[01:53:49] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[01:54:22] <SnoopJ> hodapp, the other frameworks enumerated there (Luigi, Airflow, Celery) are also probably worth looking at too
[01:54:23] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:543e:ff2f:c02f:e622) (Quit: Leaving)
[01:54:39] *** Joins: y1n (~y1n@84-115-64-22.wifi.dynamic.surfer.at)
[01:54:46] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7)
[01:55:03] <hodapp> we use arrays and array-flavored things heavily enough that Dask looks appealing for being oriented around that
[01:55:40] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:543e:ff2f:c02f:e622)
[01:55:58] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[01:57:48] <SnoopJ> we're working on a 'pipeline' at work that sounds very similar to what you're asking about, and yea, we're sometimes gazing in that direction
[01:57:54] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[01:58:33] *** Joins: pgib (~textual@173.38.117.92)
[01:59:12] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[01:59:12] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[01:59:27] *** Quits: pgib (~textual@173.38.117.92) (Client Quit)
[01:59:36] *** Quits: y1n (~y1n@84-115-64-22.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[01:59:58] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[02:00:09] *** Joins: y1n (~y1n@84-115-65-185.wifi.dynamic.surfer.at)
[02:00:12] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[02:00:27] <hodapp> but, Luigi and Airflow look promising too
[02:00:34] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[02:00:34] *** Quits: audiocat (~audio@2603-8081-1800-6a65-b3c0-70ee-cb55-0b14.res6.spectrum.com) (Ping timeout: 246 seconds)
[02:00:38] *** Quits: joo-_ (~joo@87-49-45-207-mobile.dk.customer.tdc.net) (Read error: Connection reset by peer)
[02:00:38] <SnoopJ> yea, Luigi seems very well liked
[02:00:43] *** Quits: diverdude (~undodre@176-21-102-230-cable.dk.customer.tdc.net) (Remote host closed the connection)
[02:00:58] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[02:01:37] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[02:02:55] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:04:01] *** Quits: Barones (~Barones@2804:48dc:8500:0:f163:84c5:2547:bf02) (Quit: Leaving)
[02:04:01] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[02:04:22] *** Joins: northernsage (~northerns@187.107.158.146)
[02:04:37] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[02:05:03] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:09:06] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[02:09:22] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:09:48] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:12:12] *** Joins: ice9 (~ice9@user/ice9)
[02:13:22] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:13:23] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 252 seconds)
[02:15:06] *** Quits: frostschutz (~frostschu@2a01:c22:d5d0:4500:9326:61e9:7a16:f6c5) (Remote host closed the connection)
[02:15:41] *** Quits: y1n (~y1n@84-115-65-185.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[02:15:55] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:16:47] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 252 seconds)
[02:17:20] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:f984:20da:67a5:99d7) (Quit: Client closed)
[02:20:34] *** Quits: upsala1 (~zcb@185.213.155.160) (Ping timeout: 240 seconds)
[02:24:10] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:24:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 246 seconds)
[02:24:55] <Gurkenglas> Given a plot in my head, how should I find a library/function that'll let me get it onto the screen?
[02:25:59] *** Joins: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de)
[02:25:59] *** Quits: p-i- (~Ohmu@node-m9t.pool-118-173.dynamic.totinternet.net) (Read error: Connection reset by peer)
[02:26:27] *** Quits: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de) (Remote host closed the connection)
[02:27:01] *** Joins: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de)
[02:27:10] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 246 seconds)
[02:27:19] *** Joins: p-i- (~Ohmu@node-1139.pool-118-173.dynamic.totinternet.net)
[02:27:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:28:05] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[02:28:24] <fructose> Gurkenglas: Why not look through a few plotting libraries and see if they offer what you want?
[02:28:58] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[02:29:24] <SnoopJ> Gurkenglas, matplotlib's documentation is pretty good, particularly the galleries
[02:29:50] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[02:30:16] *** Joins: pnoud (~pnoud@user/pnoud)
[02:30:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:32:12] *** Joins: kmh (~kmh@p200300df5f2f120075f9d28b18545808.dip0.t-ipconnect.de)
[02:32:23] <Jin^eLD> habnabit_: does not really work that way, if I set typedef ... canid_t; it will say "TypeError: struct can_frame: field 'can_frame.can_id' is of an opaque type (not declared in cdef())"
[02:33:11] <Jin^eLD> so I guess I have to copy all definitions into cdef()
[02:33:17] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[02:33:21] <habnabit_> Jin^eLD, oh maybe it's `int...`? there's one way for totally opaque types (what i said before) and one for integer types
[02:33:29] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[02:33:46] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 240 seconds)
[02:33:48] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:34:11] <Jin^eLD> let me google on opaque types and cffi
[02:34:27] <habnabit_> Jin^eLD, opaque types are ones you normally only have as a pointer-to
[02:34:49] <habnabit_> Jin^eLD, `int...` https://cffi.readthedocs.io/en/latest/cdef.html#letting-the-c-compiler-fill-the-gaps
[02:34:53] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[02:35:11] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[02:35:29] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[02:35:32] <Jin^eLD> ah, so literally hinting an int and it will figure out which one, I missed that I guess
[02:35:38] *** Quits: RougeR (~rougex250@user/rouger) (Remote host closed the connection)
[02:35:47] <lmmx> my local reproduction environment (github.com/nektos/act) of a Python test env isn't working, can't work out why :(
[02:36:13] <lmmx> it says it can't find a file at `/usr/share/miniconda` but I can see it exists
[02:36:17] <Jin^eLD> habnabit_: yep that works, thank you!
[02:36:22] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[02:36:23] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[02:38:15] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[02:38:33] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[02:39:04] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:5931:ed4d:e7a9:efaf) (Ping timeout: 246 seconds)
[02:39:48] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:40:27] *** Joins: shabius (~shabius@45.15.19.196)
[02:41:18] *** Quits: powerjungle_ (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: ZNC - https://znc.in)
[02:42:10] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 240 seconds)
[02:43:15] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:43:18] *** Quits: shabius_ (~shabius@45.15.19.196) (Ping timeout: 272 seconds)
[02:44:08] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:44:31] *** Joins: djapo (~archangel@user/djapo)
[02:44:35] <Jin^eLD> habnabit_: hmm, how to handle a case like this: I could define #define CAN_MAX_DLEN 8 as #define CAN_MAX_DLEN ... to make sure the value gets picked up from linux/can.h, but this would work, but further down inside the cdef() it fails due to this line: __u8 data[CAN_MAX_DLEN];
[02:45:07] <Jin^eLD> ok heh, just trial and error data[...] seems to compile
[02:45:52] <habnabit_> Jin^eLD, problem solved?
[02:46:08] <Jin^eLD> yes
[02:46:24] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[02:46:50] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:48:11] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:49:06] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:5931:ed4d:e7a9:efaf)
[02:49:13] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 246 seconds)
[02:49:42] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[02:50:12] *** Joins: rockSTONE (sid315855@id-315855.brockwell.irccloud.com)
[02:50:26] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 258 seconds)
[02:50:36] <rockSTONE> anyone have a favourite asyncio redis-based task queue lib ?
[02:50:44] <rockSTONE> lib/service/project
[02:51:08] *** Quits: dalan (~dalan@110-175-157-170.tpgi.com.au) (Quit: dalan)
[02:51:31] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[02:51:36] *** Joins: dalan6 (~dalan@110-175-157-170.tpgi.com.au)
[02:52:22] *** Joins: audiocat (~audio@2603-8081-1800-6a65-6958-6c6d-d850-5f1b.res6.spectrum.com)
[02:52:34] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:52:52] *** Joins: OPK (~OPK@user/opk)
[02:53:16] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:53:32] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:54:02] *** Joins: HoaxKey (~HoaxKey@85.255.236.198)
[02:54:41] <HoaxKey> I'm about to flip my bloody desk.
[02:54:57] <lmmx> whats up HoaxKey :(
[02:55:02] <HoaxKey> MacOS, using a venv in Pycharm, Python3.7. ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1056)
[02:55:33] <HoaxKey> I've readmaybe 20 stack overflow answer and done god knows what to try and fix this
[02:55:44] <HoaxKey> all to no avail.
[02:56:11] <HoaxKey> please somebody, either kill me, or help me.
[02:57:29] <HoaxKey> This was supposed to be a 20 minute adventure, now it's almost midnight.
[02:57:37] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 246 seconds)
[02:57:57] *** Joins: wolfshappen (~waff@irc.furworks.de)
[02:57:58] <lmmx> it do be like that sometimes unfortunately
[02:58:19] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 246 seconds)
[02:58:26] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:58:30] <HoaxKey> aye it do, but this is the first time in a while.
[02:58:42] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[02:59:10] <lmmx> this error is coming from your text editor?
[02:59:31] <SnoopJ> HoaxKey, this code works with the interpreter that created the venv, but not the venv itself?
[03:00:12] <HoaxKey> SnoopJ: its not exactly clear to me the interpreter that created the venv
[03:00:29] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[03:00:34] <SnoopJ> HoaxKey, okay, well zoom out and tell us the story, but starting from the beginning of the movie, not the middle :)
[03:01:29] <Gustavo6046> Do any of you use PyInvoke, or some task system like that, and does it really help?
[21:04:11] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[21:04:50] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[21:05:23] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:06:04] *** Server sets mode: +Ccnrtf #python-unregistered
[21:07:04] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[21:07:28] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[21:07:51] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:08:10] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[21:09:39] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[21:09:49] *** Quits: nathanjell (~Nathan@64.141.52.164) (Quit: Leaving)
[21:10:08] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:10:44] *** Joins: ras_manny (~ras_manny@196.24.136.255)
[21:13:32] *** Joins: wyclif (~wyclif@user/wyclif)
[21:14:05] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[21:15:48] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:17:23] *** Quits: ras_manny (~ras_manny@196.24.136.255) (Ping timeout: 252 seconds)
[21:17:45] *** Joins: ferz (~ferz@146-241-194-39.dyn.eolo.it)
[21:18:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:19:10] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[21:20:09] <no_gravity> Looking into Python dependency management. Many devs use Poetry and other tools to manage dependencies because pip freeze does not mark which dependencies are transitive. I wonder if there is an easy fix for that.
[21:20:54] <matsaman> no_gravity: yes, using two files instead of one with pip
[21:21:09] <matsaman> one for direct deps, and one for all deps with frozen versions
[21:21:44] <matsaman> the author of pipenv even blogged about it, and said it was great and no other tools are required ... and then made pipenv anyway 'cause he was bored I guess
[21:22:01] *** Quits: m4r35n357 (~ian@host-92-13-130-45.as13285.net) (Quit: Ex-Chat)
[21:22:08] <no_gravity> matsaman: Ok. So first you write your requirements.txt manually. Then you do "pip install -r requirements.txt". What is the next step? How do you create the second file?
[21:22:37] <matsaman> pip freeze > freeze.txt
[21:22:59] <matsaman> then anybody can do pip install -r freeze.txt or -r requirements.txt if they want
[21:23:10] <matsaman> probably better ways to name those, but you get the idea
[21:23:53] <no_gravity> matsaman: Ok and then you use the freeze.txt to install your application unless you change the requirements.txt in which case you do "pip install -r requirements.txt; pip freeze > freeze.txt" again?
[21:24:09] <matsaman> yup
[21:24:17] <matsaman> pretty simple, no?
[21:24:25] <no_gravity> matsaman: Sounds very logical. Why does anybody use poetry instead?
[21:24:32] <ammar2> because this is a pain to do lol
[21:24:44] <matsaman> probably requirements.txt and requirements-frozen.txt would be better names, given that '-r' is tied to this 'requirements' name and might confuse people
[21:24:54] <matsaman> no_gravity: because people like complicating their lives
[21:25:04] <matsaman> and as just explained, because pip's terminology _sucks_
[21:25:11] <ammar2> poetry does more than just handle pinned dependencies
[21:25:12] <no_gravity> matsaman: Yes, I would also use "requirements.txt" and "requirements-frozen.txt".
[21:25:17] <matsaman> people think -r can only be used with a file literally named 'requirements.txt', etc.
[21:25:35] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:25:44] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[21:25:48] <matsaman> anybody who can't get this concept, though, IMO, is not going to do better with any other approach
[21:25:53] <matsaman> they're just going to be lost forever =/
[21:26:03] <matsaman> all the other approaches use two files
[21:26:13] <matsaman> they also replace pip for some reason, too, though
[21:26:28] <matsaman> there are security arguments one could make
[21:26:40] <matsaman> pip-tools tries to profit off that, even, IIRC
[21:26:55] <ammar2> is that the one with the paid security advisories
[21:26:59] <thm> of course requirements can be noted in the requires key of the metadata section in setup.cfg...
[21:27:04] <matsaman> or, well safety does, but I think pip-tools uses that, I forget
[21:27:19] <matsaman> ammar2: if you want the better advisories, they have unexplained free ones, IIRC
[21:27:20] <ammar2> pypa actually made an open source version of that recently https://github.com/pypa/advisory-db
[21:27:25] *** Joins: LiftLeft (~LiftLeft@154.21.28.219)
[21:27:26] <matsaman> takes a life time to evaluate, even though it's just querying a text file
[21:27:40] <matsaman> pypa can't make up their minds about anything
[21:28:01] <matsaman> great example of how things run by committee can really be a PITA
[21:28:06] <SnoopJ> matsaman, is it that they can't make up their minds, or that you disagree with their decisions? It can't be both.
[21:28:17] <matsaman> still, I'd rather use plain pip with two files than some alternative of the hour ... still with two files
[21:28:24] <matsaman> SnoopJ: of course it can be both
[21:28:35] <SnoopJ> matsaman, correction: it cannot be both if these are rational objections.
[21:29:02] <matsaman> if you say so Snoop
[21:30:18] * SnoopJ files under "bellyache"
[21:30:19] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[21:30:33] <ammar2> but yeah it's sort of a mischaracterization to just be like, "oh you can do pinned dependencies with two files and pip so poetry is unnecessary complicated"
[21:30:36] <ammar2> when it does so much more
[21:30:51] *** Joins: northernsage (~northerns@187.107.158.146)
[21:31:27] <matsaman> ammar2: not when it's literally the only thing someone just asked for a solution to, though
[21:31:30] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[21:31:39] <matsaman> I did already say at least one other thing non-pip solutions provide
[21:31:39] <ammar2> that's just like, your opinion
[21:31:46] <matsaman> of course, what else could it possibly be
[21:31:50] <SnoopJ> indeed
[21:31:56] <ammar2> I like that poetry can one-command install dependencies and upload packages to pypi for me
[21:32:10] <matsaman> that does sound useful
[21:32:13] <jabberwock> who maintains those packages?
[21:32:20] <jabberwock> and their security
[21:32:21] <matsaman> if slightly out of scope of what most people use pip for
[21:32:25] *** Joins: wyclif (~wyclif@user/wyclif)
[21:32:39] <ammar2> yeah, you need pip+other tools for that
[21:32:45] <ammar2> whereas poetry is just like a one-stop shop for it
[21:32:52] <ammar2> jabberwock: which packages?
[21:32:57] <no_gravity> matsaman: One issue with the "pip -r requirements.txt; pip freeze > requirements-frozen.txt" approach to update the dependencies is that it probably does not delete dependencies that are no longer needed.
[21:33:05] <ammar2> the advisory-db anyone can send a pull request to
[21:33:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:33:31] <jabberwock> ammar2: For example, if I put in some sneaky code to phone home to a botnet... who might find that in a reasonable time?
[21:33:45] <jabberwock> This has happened and it's a concern
[21:33:47] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[21:33:48] <matsaman> no_gravity: it is a shame something like pip uninstall -y $(pip freeze) is apparently the simplest way to get around that
[21:34:13] <matsaman> pip is very rudimentary, to be sure
[21:34:26] <no_gravity> matsaman: What does that command do?
[21:34:42] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[21:34:42] <ammar2> jabberwock: there's some mitigation strategies, like don't be a guinea pig and use the latest version
[21:34:45] <matsaman> no_gravity: uninstalls everything* (*in normal circumstances)
[21:34:53] <SnoopJ> no_gravity, it uninstalls the packages returned by freeze which is ~everything
[21:34:59] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[21:35:16] <no_gravity> matsaman: I see.
[21:35:39] <matsaman> pip install -U pip; pip uninstall -y $(pip freeze); pip install -U setuptools pip; pip install -r requirements.txt is what I usually do
[21:36:05] <no_gravity> matsaman: What does "pip install -U pip" do?
[21:36:10] <matsaman> although we have some stupid egg lines in our req that have to be specially accounted for
[21:36:11] <SnoopJ> upgrades pip
[21:36:22] <matsaman> so that it will stop whining
[21:36:22] <jabberwock> ammar2: that's not a mitigation strategy. It involves common sense with human interaction
[21:36:34] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 240 seconds)
[21:36:44] <no_gravity> matsaman: I get this: no such option: -U
[21:36:48] <jabberwock> Also, any version could be infected if not checked. The latest versions wouldn't be the only candidates
[21:37:01] <matsaman> no_gravity: oh? Entirely possible they changed it, pypa are flighty
[21:37:12] <jabberwock> I mean.. "Don't do that" is always a mitigation strategy if doing something causes harm
[21:37:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[21:37:28] <SnoopJ> -U is still present in pip
[21:37:42] <matsaman> no_gravity: still in the docs: https://pip.pypa.io/en/stable/cli/pip_install/#install-requirement
[21:37:47] <SnoopJ> no_gravity, are you sure you did `pip install -U ...` and not `pip -U ...` ?
[21:38:04] <no_gravity> SnoopJ: Ah! I only did "pip -U"
[21:38:32] <SnoopJ> no_gravity, the option only makes sense for the install command
[21:38:35] <matsaman> I mean, -U pip probably isn't needed at the beginning there, might be a relic of the manual process I used to do
[21:38:36] <no_gravity> Yeah
[21:38:43] <no_gravity> matsaman: What is "pip install -U setuptools pip" ?
[21:38:49] <matsaman> I just hate seeing pip's stupid version lecture
[21:39:04] <SnoopJ> relatable
[21:39:09] <matsaman> no_gravity: it fixes setuptools & pip after the mass uninstall
[21:39:10] *** Quits: besnard (~schangg@2a01cb080746b7008639c0fffe0203dd.ipv6.abo.wanadoo.fr) (Quit: WeeChat 2.3)
[21:39:19] <no_gravity> matsaman: They are broken afterwards?
[21:39:25] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[21:39:34] <SnoopJ> no_gravity, the uninstall they are recommending is about as destructive as it can be
[21:39:34] <matsaman> I forget if I would categorize them as broken
[21:40:01] <matsaman> if you compare pip freeze from a fresh venv and from a uninstall -y $(pip freeze) one, they don't match without doing that afterward, IIRC
[21:40:16] <no_gravity> matsaman: By the way, why is "setuptools" coming into play here?
[21:40:16] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 268 seconds)
[21:41:02] <matsaman> no_gravity: it just comes with a default venv, IIRC
[21:41:20] <no_gravity> matsaman: I see. I don't use venv. I use docker containers.
[21:41:25] * matsaman shrugs
[21:41:29] <SnoopJ> matsaman, what is a "default venv"
[21:41:40] <matsaman> SnoopJ: a venv you just created
[21:42:25] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[21:43:29] <SnoopJ> not sure to what you are referring
[21:43:30] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[21:43:43] *** Joins: northernsage (~northerns@187.107.158.146)
[21:43:44] <matsaman> a venv just created by virtualenv of python -m venv
[21:43:52] <matsaman> by virtualenv or*
[21:44:18] <mefistofeles> both works in py3... https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/
[21:44:25] *** Joins: jaggz (~jaggz@user/jaggz)
[21:44:34] <matsaman> yerp
[21:44:35] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[21:45:04] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:f4cd:9e96:796:bd49) (Quit: WeeChat 3.2)
[21:45:34] <SnoopJ> matsaman, and you're saying setuptools creates a venv as a matter of course?
[21:45:59] <matsaman> I'm saying setuptools apparently comes with a venv
[21:46:11] <matsaman> as reported by pip list, &c
[21:46:38] <SnoopJ> ? pip list has nothing to do with venvs, it lists packages.
[21:46:59] <SnoopJ> well, not _nothing_, it's aware of them for --local
[21:47:33] <SnoopJ> not really familiar with setuptools's guts though; where does this venv live?
[21:47:57] *** Joins: Naan (~naan@user/naan)
[21:47:59] *** Joins: bambams (~bambams@S0106a84e3f66f543.su.shawcable.net)
[21:48:08] <matsaman> ...
[21:48:11] *** Joins: jdmark (~jdmark@67.8.137.130)
[21:48:15] <thm> if you create a venv with --without-pip, there's no setuptools in it, not even pip, as the name of the switch suggests ...
[21:48:26] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[21:48:27] <matsaman> do you still want me to respond to that even though you just backed out of it, or?
[21:48:48] <SnoopJ> matsaman, I would like to know where this venv lives
[21:48:49] <matsaman> thm: neat
[21:49:03] <SnoopJ> (because it's new to me and I'm curious about it)
[21:49:25] <thm> a venv lives exactly there where you created it.
[21:49:27] <matsaman> wherever your 'virtualenv' or 'python -m venv' specifies
[21:49:31] <matsaman> yes, what thm said
[21:49:35] <matsaman> although I'm guessing you knew that
[21:50:00] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (Remote host closed the connection)
[21:51:07] *** Joins: wyclif (~wyclif@user/wyclif)
[21:51:07] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[21:51:27] *** Joins: northernsage (~northerns@187.107.158.146)
[21:51:49] *** Quits: rendar (~rendar@user/rendar) ()
[21:51:54] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[21:52:14] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:52:19] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 246 seconds)
[21:52:26] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[21:52:33] *** Quits: jjasghar (~quassel@cpe-70-112-74-178.austin.res.rr.com) (Changing host)
[21:52:33] *** Joins: jjasghar (~quassel@user/jjasghar)
[21:53:08] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:53:12] *** Joins: brabrax (~brabrax@user/brabrax)
[21:53:44] <SnoopJ> if I understand right, *I* did not create anything, setuptools did
[21:54:46] <matsaman> so, someone creates a venv with some command
[21:55:03] <matsaman> and when activated that venv shows a particular output from commands like pip list, by default
[21:55:04] *** Joins: sebastianos (~sebastian@user/sebastianos)
[21:55:05] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8922:75:3a92:e0b2)
[21:55:07] <SnoopJ> this is what I'm responding to: 13:15 <matsaman> I'm saying setuptools apparently comes with a venv
[21:55:25] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[21:55:26] <SnoopJ> I want to know more about this venv, namely where it is located when it arrives on my machine
[21:55:36] <matsaman> how is "I did not create anything, setuptools did" a response to that?
[21:55:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:56:06] <SnoopJ> matsaman, it is meant as an invitation to correcting my understanding if it is not correct
[21:56:11] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[21:56:41] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Quit: Leaving...)
[21:57:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:57:20] <SnoopJ> do I have it backwards, are you saying that setuptools gets *put into* a created venv?
[21:57:22] <matsaman> I feel like you already know how an end user creates a venv
[21:58:05] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[21:58:10] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 268 seconds)
[21:58:20] * SnoopJ shrugs
[21:58:58] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 240 seconds)
[21:59:15] <thm> a venv is a virtual environment, and packages (like pip, setuptools, or any other package) can be installed (in)to it
[22:00:03] <kushal> someone we will get PEP582 done and this trouble will be gone.
[22:00:03] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[22:00:05] <SnoopJ> thm, I think what they mean is that venvs get some baseline packages (like setuptools) installed into them at creation
[22:00:14] *** Joins: northernsage (~northerns@187.107.158.146)
[22:00:22] <thm> yes, unless explicitly disabled
[22:00:23] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8922:75:3a92:e0b2) (Quit: Leaving)
[22:00:53] <SnoopJ> thm, my curiosity here is what they mean, not the fact of what the tool does
[22:01:09] <thm> in fact I think they got it backwards
[22:01:37] <thm> er, not they, you
[22:01:39] *** Joins: OverCoder (~OverCoder@user/overcoder)
[22:02:10] <SnoopJ> thm, I can really only guess, considering the bother some clarifying questions created
[22:02:18] *** Quits: veek (~veek@117.192.16.23) (Quit: Leaving)
[22:02:39] <thm> "x comes with y" can be misunderstood. is x caused by y or vice-versa?
[22:03:24] *** Joins: Gerula (~Gerula@user/gerula)
[22:03:24] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[22:03:43] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::29) (Quit: WeeChat 3.0.1)
[22:05:29] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:06:36] *** Joins: akaWolf (~akaWolf@akawolf.org)
[22:06:36] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[22:06:55] *** Joins: northernsage (~northerns@187.107.158.146)
[22:09:39] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8922:75:3a92:e0b2)
[22:09:54] *** Joins: wyclif (~wyclif@user/wyclif)
[22:10:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:10:44] *** Joins: y1n (~y1n@84-115-64-62.wifi.dynamic.surfer.at)
[22:12:16] *** Quits: RedAero (~RedAero@20014C4E1C87B500495DB5D36089E514.unconfigured.pool.telekom.hu) (Quit: Client closed)
[22:12:26] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[22:13:25] *** Joins: forthewin (~forthewin@cpe-76-90-174-71.socal.res.rr.com)
[22:13:25] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[22:13:40] *** Joins: northernsage (~northerns@187.107.158.146)
[22:14:42] *** Quits: Barones (~Barones@2804:48dc:8500:0:3100:1852:23b9:80b6) (Remote host closed the connection)
[22:14:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[22:14:56] *** Joins: alcume (~alcume@35.16.60.213.dynamic.reverse-mundo-r.com)
[22:16:25] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[22:17:20] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[22:17:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:18:51] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:19:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:19:31] <fbiagent> anyone here briefcase know how to get it to use my requirements.txt?
[22:19:31] *** Quits: iphone (~iphone@user/iphone) (Quit: WeeChat 3.0.1)
[22:20:02] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[22:20:05] *** Joins: Auron (Auron956@user/auron)
[22:20:10] *** Joins: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net)
[22:20:33] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:20:43] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:21:19] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:24:23] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Remote host closed the connection)
[22:25:42] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:26:21] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:54c5:21b4:baf6:9786)
[22:26:32] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:54c5:21b4:baf6:9786) (Remote host closed the connection)
[22:27:53] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[22:29:39] *** Joins: wyclif (~wyclif@user/wyclif)
[22:29:44] *** Joins: Gerula_ (~Gerula@user/gerula)
[22:29:44] *** Gerula is now known as Guest9877
[22:29:44] *** Gerula_ is now known as Gerula
[22:30:35] <fbiagent> oof... a briefcase package is 250M on linux
[22:31:29] *** Quits: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[22:32:11] *** Quits: therealjumbo (~zignegoj@mail.hedonline.com) (Ping timeout: 252 seconds)
[22:33:26] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[22:33:26] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[22:33:41] *** Joins: northernsage (~northerns@187.107.158.146)
[22:33:50] *** Quits: Guest9877 (~Gerula@user/gerula) (Ping timeout: 252 seconds)
[22:33:54] *** Joins: oz4ga (~tim@93.90.4.233)
[22:34:10] *** Joins: therealjumbo (~zignegoj@mail.hedonline.com)
[22:34:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:35:45] <SnoopJ> fbiagent, sounds about right for vendoring a runtime and dependencies
[22:36:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:37:08] *** Quits: northernsage (~northerns@187.107.158.146) (Client Quit)
[22:37:28] *** Joins: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se)
[22:37:58] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[22:38:32] *** Joins: lucifer (sid308373@id-308373.brockwell.irccloud.com)
[22:38:35] *** Quits: k4rt0ff3lch33t4h (~k4rt0ff3l@92-249-146-27.pool.digikabel.hu) (Remote host closed the connection)
[22:38:38] *** Joins: pnoud (~pnoud@user/pnoud)
[22:38:39] *** Parts: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se) ()
[22:38:39] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:40:06] *** Quits: y04nn (~y04nn@91.193.4.106) (Ping timeout: 268 seconds)
[22:40:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:42:46] *** Joins: entuland_ (~entuland@user/entuland)
[22:43:22] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[22:43:28] <lucifer> hi all! is i am only ever going to iterate over a defaultdict using `for k, v in d.items()`. is there any reason to use a defaultdict? i am trying to understand defaultdict is being used here. https://bpa.st/5PQA
[22:44:20] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Quit: Konversation terminated!)
[22:44:28] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 246 seconds)
[22:45:31] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 246 seconds)
[22:46:23] <bjs> lucifer: I can't see why the author used defaultdict here
[22:46:34] <bjs> perhaps they do something with it later?
[22:46:42] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:47:39] *** Quits: f8e4_ (~user@159.89.21.45) (Quit: WeeChat 3.1)
[22:47:53] <lucifer> bjs: i checked, after this code `matrix` is no longer used.
[22:47:54] *** Joins: great_taste (~great_tas@190.32.235.15)
[22:48:03] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:48:11] <great_taste> how to calculate a quaternion from an axis and an angle in python?
[22:48:22] <BrenBarn> or maybe they had used it for some other reason, then changed the code so they didn't need it anymore but still left  it
[22:48:24] <BrenBarn> that's fairly common
[22:48:32] *** Quits: y1n (~y1n@84-115-64-62.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[22:48:41] *** Joins: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at)
[22:48:56] <lucifer> yeah, that'd makes sense. wanted to make sure i wasn't missing something.
[22:49:06] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[22:49:07] <lucifer> thanks bjs and BrenBarn!
[22:49:13] *** Joins: wyclif (~wyclif@user/wyclif)
[22:49:57] *** Joins: bambams_ (~bambams@S0106a84e3f66f543.su.shawcable.net)
[22:50:48] <SnoopJ> great_taste, the computations to go between Euler angles and quats isn't different in Python than it would be in other languages. If you have lots of them, you probably want something backed by numpy. This library looks good and provides from_euler_angles(): https://quaternion.readthedocs.io/en/latest/
[22:51:22] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:51:23] <great_taste> I just wanna do one calculation in the repl
[22:51:39] <great_taste> I thought I'd be able to out of the box
[22:51:43] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:51:51] <SnoopJ> Python doesn't have quaternions in its data model, no
[22:52:11] <habnabit_> now _that's_ a niche request
[22:52:33] <SnoopJ> great_taste, you could follow this for whatever your data look like: https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Euler_angles_to_quaternion_conversion
[22:52:42] *** Joins: y04nn (~y04nn@91.193.4.106)
[22:53:22] <great_taste> I am doing it by hand already :)
[22:53:34] *** Quits: bambams (~bambams@S0106a84e3f66f543.su.shawcable.net) (Ping timeout: 246 seconds)
[22:53:40] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[22:53:40] <SnoopJ> well, it's either by-hand or using a suitable library
[22:53:46] *** Joins: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage)
[22:53:58] *** Joins: kosh (~kosh@user/kosh)
[22:54:03] *** Quits: kosh (~kosh@user/kosh) (Client Quit)
[22:54:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:54:59] <fbiagent> SnoopJ, yeah sucks
[22:55:17] *** Quits: anas (~anas@196.235.5.143) (Ping timeout: 252 seconds)
[22:55:21] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:55:23] <SnoopJ> fbiagent, if your target environment will already have a Python interpreter installed, you might look at shiv
[22:55:38] *** Joins: Gerula_ (~Gerula@user/gerula)
[22:55:38] *** Quits: Gerula (~Gerula@user/gerula) (Killed (mercury.libera.chat (Nickname regained by services)))
[22:55:38] *** Gerula_ is now known as Gerula
[22:55:54] <SnoopJ> or maybe there's a way to prune parts of the stdlib you aren't using out of beeware's packaging (I can't find anything about this in their docs)
[22:56:02] <SnoopJ> err, briefcase*
[22:56:51] <fbiagent> SnoopJ, unfortunately can't depend on Python being available. I'm currently looking at compiling with nukita
[22:58:26] <SnoopJ> fbiagent, PyInstaller is an option as well if you haven't looked at it, although there's only so much you can do when the runtime has to be vendored, aside from pruning any parts of it that aren't used but get packaged anyway
[22:58:58] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[22:59:13] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[22:59:14] <fbiagent> SnoopJ, yes that's on the list
[23:00:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:00:57] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:01:26] <fbiagent> so much developer porn with nuitka
[23:01:34] <fbiagent> PASS 1, PASS 2
[23:01:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:01:51] *** Joins: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net)
[23:02:03] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[23:02:15] *** Joins: anas (~anas@196.235.5.143)
[23:02:16] *** Parts: lucifer (sid308373@id-308373.brockwell.irccloud.com) ()
[23:02:31] <Tritium> Briefcase is "the stupidest thing that can possibly work" by their own admission, which does make it fairly bulletproof at the cost of packaging the kitchen sink
[23:02:53] <SnoopJ> Tritium, is it strictly non-granular, then?
[23:02:57] *** Quits: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net) (Client Quit)
[23:03:04] <SnoopJ> for stdlib I mean
[23:03:14] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[23:03:40] <Tritium> yup
[23:03:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:03:49] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[23:03:51] <fbiagent> Tritium, yeah I can see it being useful for internal tools
[23:03:59] <fbiagent> but not for distributing externally
[23:04:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:04:30] <SnoopJ> fbiagent, in light of the above, PyInstaller may give you a smaller distributable then. I think it only packages what's used
[23:04:44] *** Quits: ferz (~ferz@146-241-194-39.dyn.eolo.it) (Ping timeout: 252 seconds)
[23:04:53] <fbiagent> SnoopJ, yep will let you know when I hit it in the list
[23:05:01] <SnoopJ> fbiagent, it is substantially simpler than nuitka, say
[23:05:11] *** Joins: henistein (~henistein@2001:8a0:c1b3:6b01:3cd5:c779:a093:a73a)
[23:05:37] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[23:06:02] *** Quits: ikus060 (~ikus060@96.127.228.230) (Quit: Leaving)
[23:06:03] <grym> i have tried, and i have never gotten nuitka to work for me
[23:06:51] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-f3-42b3-24b0-e633.fixed6.kpn.net)
[23:07:00] *** Joins: wyclif (~wyclif@user/wyclif)
[23:07:19] <fbiagent> SnoopJ, nuitka is currently at 50M compared to about 20M for a pure C++ app, so not terrible
[23:07:25] <fbiagent> about to try pyinstaller
[23:07:38] <Tritium> pyinstaller has issues with how it tries to be clever IF you also attempt to be clever with imports - if you use a plugin system for example, pyinstaller is a massive headache
[23:07:41] <SnoopJ> fbiagent, it will probably do much better because it does as much throwing-out of the Python side of things as it can.
[23:08:04] <SnoopJ> Any time I've been tempted by it, I usually just wonder why I don't do that up front
[23:08:12] *** Parts: aminvakil (~aminvakil@2a01:4f8:120:336b:4::1) (The Lounge - https://thelounge.chat)
[23:09:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:10:07] *** Quits: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at) (Remote host closed the connection)
[23:10:30] *** Joins: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at)
[23:11:26] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:11:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[23:13:32] *** Quits: y04nn (~y04nn@91.193.4.106) (Ping timeout: 252 seconds)
[23:14:09] *** Quits: raub (~Raub_Voge@cpe-107-15-44-154.nc.res.rr.com) (Ping timeout: 265 seconds)
[23:14:18] *** Joins: f8e4 (~user@159.89.21.45)
[23:14:41] *** Joins: ferz (~ferz@146-241-215-252.dyn.eolo.it)
[23:15:05] <fbiagent> SnoopJ, nuitka wins, 50M vs 135M for pyinstaller
[23:15:12] * SnoopJ nods
[23:15:23] <fbiagent> any other packaging to recommend?
[23:15:44] <fbiagent> btw the above numbers are zipped directories
[23:15:47] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[23:16:10] *** Joins: ntdll (~ntdll@user/ntdll)
[23:16:16] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[23:16:27] <SnoopJ> fbiagent, is 50 MB prohibitively large?
[23:16:41] <fbiagent> fbiagent, not prohibitively but comparing to ~20M right now
[23:16:42] <no_gravity> Is this the best way to get the list of values of two dicts? the_values = list(dict_a.values()) + list(dict_b.values())
[23:16:44] <fbiagent> for the C++ version
[23:16:48] <Tritium> make sure you fully test that nuitka build
[23:17:13] <fbiagent> ah, no I'm wrong. it's 40M for the C++ version, so in the ballpark
[23:17:23] <SnoopJ> Interesting that Nuitka gets that close
[23:17:23] <fbiagent> Tritium, oh god no, testing... Anything to look out for in particular?
[23:17:26] *** Joins: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net)
[23:17:29] <SnoopJ> "everything"
[23:17:35] <fbiagent> lol
[23:17:42] <Tritium> pretty much
[23:17:44] <SnoopJ> Serious answer really
[23:17:57] <SnoopJ> Nuitka is a big enough bazooka that I'd be tempted to say just ship your C++ app
[23:18:13] <SnoopJ> don't have a ton of experience with it, but it's a very challenging task
[23:18:16] *** Joins: y04nn (~y04nn@91.193.4.106)
[23:18:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:19:08] *** Quits: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net) (Remote host closed the connection)
[23:19:32] *** Joins: bambams__ (~bambams@S0106a84e3f66f543.su.shawcable.net)
[23:20:13] *** Gerula is now known as Guest4880
[23:20:13] *** Joins: Gerula_ (~Gerula@user/gerula)
[23:20:13] *** Quits: Guest4880 (~Gerula@user/gerula) (Killed (sodium.libera.chat (Nickname regained by services)))
[23:20:14] *** Gerula_ is now known as Gerula
[23:21:24] *** Quits: bambams_ (~bambams@S0106a84e3f66f543.su.shawcable.net) (Ping timeout: 268 seconds)
[23:23:37] *** Joins: raub (~Raub_Voge@cpe-107-15-44-154.nc.res.rr.com)
[23:25:05] *** Joins: wyclif (~wyclif@user/wyclif)
[23:25:57] *** Joins: yetitwo (~tannersti@c-76-25-59-209.hsd1.co.comcast.net)
[23:26:44] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[23:26:54] <yetitwo> are there circumstances under which a an aiohttp.ClientSession can become unset (i.e. a reference to one becomes None)?
[23:27:16] <habnabit_> yetitwo, that isn't generally possible in python, no
[23:27:21] <habnabit_> yetitwo, something reassigned it
[23:27:23] <yetitwo> okay, that's what i figured
[23:27:55] <yetitwo> i'm in a codebase with lots of... layers... and trying to figure out why an object's _session property is becoming None
[23:28:13] <yetitwo> i'm really hoping this isn't a threading/singleton/whatever sort of issue
[23:28:18] *** Joins: dump (~dump@2a02:8109:a380:1830:9065:e273:6b93:dfa5)
[23:28:20] <yetitwo> but here we are
[23:28:24] <habnabit_> yetitwo, make a @property.setter and set a breakpoint or do a print
[23:28:24] <yetitwo> thank you habnabit_
[23:28:41] <SnoopJ> agreed, hack your way in there to see who's setting it
[23:28:42] <yetitwo> oh that's a good call
[23:28:44] <yetitwo> thank you!
[23:28:55] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:29:16] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 246 seconds)
[23:29:18] *** Parts: dump (~dump@2a02:8109:a380:1830:9065:e273:6b93:dfa5) ()
[23:29:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:30:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[23:31:20] <no_gravity> In a module, how do you define that the modul "x" should be set here? def f(x): global x; x=x
[23:31:46] <bjs> no_gravity: In Python you cannot have the same name refer to two different variables in the same scope
[23:32:04] <bjs> no_gravity: in a function "x" is either local, or it is global, you cannot mix or switch from one to the other.
[23:32:05] <no_gravity> bjs: Nothing like "my_goddam_scope.x=x"?
[23:32:15] <bjs> no_gravity: yes you can set the_module.x = x
[23:32:27] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:32:27] <no_gravity> bjs: What is "the_module"?
[23:32:41] <bjs> no_gravity: whatever module you want to set the global on
[23:32:48] <no_gravity> bjs: Well, the module I am in :)
[23:33:03] <habnabit_> sounds like it should be a class with self
[23:33:17] <no_gravity> habnabit_: Nah
[23:33:26] <bjs> no_gravity: then you can import the module you are in and assign the x attribute
[23:33:40] <habnabit_> you already have an implicit self; make a more testable explicit self
[23:33:40] <no_gravity> bjs: :/
[23:33:42] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[23:33:45] <bjs> no_gravity: why :/ ?
[23:33:47] <nedbat> no_gravity: you could also just not call the parameter "x":   def f(xxx): global x; x = xxx
[23:33:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:33:59] <bjs> Yeah you can just rename the local
[23:34:07] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:34:09] <habnabit_> self.x = x
[23:34:12] <no_gravity> nedbat, bjs: No, that would make the function header ugly.
[23:34:30] <habnabit_> sounds like my solution is the best one so far
[23:34:34] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-51f6-604d-705f-f753.res6.spectrum.com)
[23:34:46] <nedbat> no_gravity: why not just change the caller then?  instead of mod.f(12), use:  mod.x = 12
[23:35:08] <nedbat> no_gravity: or change the name of the global:  def f(x): global _x; _x = x
[23:35:21] <no_gravity> nedbat: The caller already gives the module some other variables. mod.f(a,u,x)
[23:35:30] <no_gravity> nedbat: So it would be nice if everything stayed in one call.
[23:35:42] <nedbat> no_gravity: does the caller know about these globals?
[23:36:10] <no_gravity> nedbat: Well, it does stuff like mod.f(x = 'Berlin')
[23:36:20] <no_gravity> nedbat: And 'x' is a descriptive variable.
[23:36:29] <nedbat> no_gravity: right, that's the parameter.  Does it know about the global?  Call the global _x
[23:37:03] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[23:37:40] <no_gravity> nedbat: Say "x" is "city". If I name it "_city" then everytime I read the code I will think "Why on earth is it 'country', 'region' and 'language' but '_city' and not 'city'???"
[23:37:56] *** Joins: neilthereildeil (~neilthere@70.21.11.5)
[23:38:03] <neilthereildeil> hey all
[23:38:07] <nedbat> no_gravity: yes, some aspect of your aesthetics is going to have to change here.
[23:38:24] <no_gravity> nedbat: I find it hard to accept that there is no way to refer to the module scope.
[23:38:41] <thm> maybe the global city has some special purpose and thus can be named accordingly?
[23:38:43] <neilthereildeil> when using a large multiprocessing working pool, is it a good idea to build a loop that just spawns all the worker processes so they are ready for work?
[23:38:44] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[23:38:45] <nedbat> no_gravity: there are really ugly ways to do it:     globals()["x"] = x
[23:38:55] <no_gravity> nedbat: That's the best so far!
[23:39:04] <bjs> neilthereildeil: isn't that the job of the pool?  to spawn the workers for you
[23:39:27] <habnabit_> i fear anyone familiar with python will have to interact with this code someday
[23:39:30] <neilthereildeil> like, for 184 multiprocesses, should i call apply_async 184 times, or should i call apply_async when i need it?
[23:39:43] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:39:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:40:01] <neilthereildeil> this way i can incur the cost of starting 184 child processes at application start
[23:40:05] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::29)
[23:40:12] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[23:40:14] <bjs> neilthereildeil: the Pool does not start 1 process for each input task, it's a pool
[23:40:23] <bjs> it has a pool of processes it distributes the work to over a period of time
[23:40:45] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[23:41:35] <neilthereildeil> bjs: ok i see multiprocessing.Pool() is the one that creates all the child processes, not apply_async
[23:41:57] *** Joins: wyclif (~wyclif@user/wyclif)
[23:42:28] <bjs> neilthereildeil: yes, Pool contains a pool of processes and has a queue of work to perform.  The pool slowly hands out the work from the queue to each process. apply_async just adds the work to the queue
[23:43:17] <neilthereildeil> but i have logic so that each child blocks waiting for a work item from the parent process. wouldnt it be higher performance if i call apply_async to make 184 children reach the blocking call waiting for the work items from the parent?
[23:43:22] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[23:43:49] <nedbat> no_gravity: i know you sometimes chafe at Python conventions, but it might be worthwhile to get more into the Python mindset.
[23:44:09] <bjs> neilthereildeil: isn't the whole point of a Pool to do that "waiting for work from the parent" stuff for you?
[23:44:09] <no_gravity> nedbat: How would that apply here?
[23:44:38] <nedbat> no_gravity: well, why are there globals in the module in the first place?  That seems like it could become a problem.
[23:44:50] <bjs> no_gravity: probably by using a class instead of some global variables, or just re-naming variables. It's highly unusual to find locals with the same name as globals where the body is trying to use both, because of exactly this behaviour
[23:45:00] <no_gravity> nedbat: No, because the module holds application wide settings.
[23:45:22] <nedbat> no_gravity: that would make it hard to write unit tests, no?  Test isolation would be hard.
[23:45:32] <no_gravity> nedbat: How so?
[23:45:41] <thm> you could put the application wide settings in a 'settings' dict.
[23:45:45] <nedbat> no_gravity: test 23's global values will be visible in test 24.
[23:46:54] <no_gravity> nedbat: Depends on how you set up the tests I would say. Why would variables survive between tests?
[23:47:19] <bjs> no_gravity: why wouldn't they survive? They're global variables.
[23:47:21] <neilthereildeil> bjs: thers a problem. apply_async does not block if there are no idle processes in the pool. it just take the argument and i guess queues it up (consuming some memory for each queued item) for the next available work process. this will not work if my enqueue rate is faster than my dequeue rate. eventually the marginal memory used for each
[23:47:22] <neilthereildeil> overflowed queued object will cause the machine to run out of memory.
[23:47:25] <bjs> You'd have to do work on the next test to clean them away again
[23:47:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[23:47:38] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::29) (Quit: WeeChat 3.0.1)
[23:47:43] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[23:48:04] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:48:13] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:48:22] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:48:31] <nedbat> no_gravity: globals are global, right? Are we talking about the same thing?
[23:48:31] <no_gravity> bjs: Because when I test something I make sure I start from a fresh state. Whatever side effects test 23 has should not have an effect on test 24. That is something the *test* has to make sure.
[23:48:35] *** Joins: rany (~rany@user/rany)
[23:48:48] <nedbat> no_gravity: so your tests have to reset the globals? That sounds error-prone.
[23:48:56] <neilthereildeil> bjs: i wrote a program which has a pool of 3 multiprocesses, and infinitely calls apply_async. i eventually ran out of memory. If i could get apply_async to block when there are no idle multiprocess children, my design would be a lot simpler
[23:49:05] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:49:08] <bjs> no_gravity: okay but this is just annoying to deal with in practice,  I'm with nedbat here that removing the global can make it eaiser, but yeah it's a choice
[23:49:27] *** Joins: Elzington (~Elzington@static-198-54-128-100.cust.tzulo.com)
[23:49:31] <no_gravity> nedbat: The way I write tests (never wrote python tests) is that I start with a fresh process for each test. So nothing can survive between tests.
[23:49:34] <bjs> neilthereildeil: I mean you can do things in batches: queue 1,000 jobs and wait for them to finish then send the next 1,000 etc
[23:49:47] <nedbat> no_gravity: a process per test is a lot of overhead.
[23:49:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[23:50:08] <nedbat> no_gravity: this could be an opportunity to explore a different way to approach these problems.
[23:50:38] *** Gustavo6046_ is now known as Gustavo6046
[23:50:40] <no_gravity> nedbat: I mostly prefer even more costly end-2-end tests. I make use of integration tests way more than unit tests.
[23:51:02] <neilthereildeil> bjs: that would be very wasteful. at some point, i would have 999 idle processes while the last process is running
[23:51:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[23:51:17] <bjs> neilthereildeil: again apply_async *does not start processes*
[23:51:22] *** Quits: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[23:51:44] <nedbat> no_gravity: so to test your web framework's url router you spin up a new process and use an e2e test?
[23:52:05] <no_gravity> nedbat: In case of a web app, I do that, yes.
[23:52:19] <nedbat> no_gravity: how long do your tests take?
[23:52:20] *** Joins: y1n (~y1n@84-115-64-162.wifi.dynamic.surfer.at)
[23:52:32] <no_gravity> nedbat: let me try one and measure the time ...
[23:52:34] <nedbat> no_gravity: again, this could be a chance to try a different approach.
[23:52:47] *** Joins: LeoTal (~LeoTal@86.170.86.79.rev.sfr.net)
[23:52:50] <bjs> no_gravity: you should be very careful because it means your tests will fail to spot cases that have bad global state hanging around between the tests.  Your tests may work just because you restart the process each time
[23:52:53] <bjs> but the actual code would fail...
[23:53:15] <bjs> It's good to have a healthy mix of different types of tests
[23:53:40] <no_gravity> bjs: Just FYI: I have been doing this for many years now. It's not like I wrote my first test last week and hope all goes well.
[23:53:58] *** Joins: orbatos_ (~orbatos@user/orbatos)
[23:54:03] <bjs> I never said otherwise
[23:54:04] <habnabit_> (i think that's _why_ your approach is so baffling)
[23:54:14] *** Joins: azazello (~azazello@109.75.158.195)
[23:54:19] *** Quits: orbatos__ (~orbatos@user/orbatos) (Read error: Connection reset by peer)
[23:54:41] <no_gravity> bjs: Your "you should be very careful" sounded a bit like that.
[23:55:01] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[23:55:02] <bjs> no_gravity: are you saying you should _not_ be careful with this approach you're taking?
[23:55:57] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[23:56:06] *** Joins: computeiro (~Wender@189.37.65.2)
[23:56:54] <no_gravity> nedbat: I timed a testrun now and it was abou 40 tests per second. Including roundtrip to the local apache for each test.
[23:57:10] <habnabit_> dang that's slow
[23:57:18] <bjs> habnabit_: depends on what the test is doing :)
[23:57:30] *** Quits: computeiro (~Wender@189.37.65.2) (Client Quit)
[23:57:43] <LeoTal> Hi all. I have a function that (among other things) takes a callable argument and calls it. I want a test for that call. I'd expect syntax along the lines of `f = spy(); my_function_under_test(f); assert f.calls == [something]`. Instead, all the examples I can find involve monkeypatching something inside the code under test, which would be more complex than handrolling my own spy. What am I missing?
[23:57:45] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:47] <nedbat> no_gravity: on a separate thread, what has interested you in doing this in Python?
[23:57:59] <no_gravity> nedbat: Doing what in Python?
[23:58:07] <nedbat> no_gravity: building a new framework
[23:58:14] <bjs> LeoTal: unittest.mock is where I'd startr
[23:58:15] <bjs> start*
[23:58:24] <habnabit_> LeoTal, what you're looking for is usually called a mock, and it doesn't require patching
[23:58:30] <no_gravity> nedbat: I just needed stuff that was not there.
[23:58:33] *** Joins: Gerula_ (~Gerula@user/gerula)
[23:58:33] *** Quits: Gerula (~Gerula@user/gerula) (Killed (zirconium.libera.chat (Nickname regained by services)))
[23:58:33] *** Gerula_ is now known as Gerula
[23:58:42] <nedbat> no_gravity: but why in Python at all?
[23:59:01] *** Quits: Gerula (~Gerula@user/gerula) (Remote host closed the connection)
[23:59:06] <no_gravity> nedbat: Python has the huge advantage over PHP that it has an import system.
[23:59:11] <habnabit_> LeoTal, but, are you sure that the behavior you're testing is just 'function is called'? usually there's some other degree of behavior to test also
[23:59:18] <nedbat> no_gravity: (and now I'm curious what was missing? Did you consider existing web frameworks?)
[23:59:21] <habnabit_> LeoTal, (which is why mocks are so useless)
[23:59:23] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:59:24] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:59:40] <no_gravity> nedbat: I have not written a web framework yet.
[23:59:44] <no_gravity> nedbat: For Python.
[23:59:52] <no_gravity> nedbat: The test run was for a PHP application.
