[01:01:11] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[01:01:17] *** Quits: arrowd (~arr@78.107.6.128) ()
[01:02:38] *** Joins: hololeap (~hololeap@user/hololeap)
[01:31:13] <maerwald> fendor[m]: can we start releasing the extension?
[01:31:57] <fendor[m]> maerwald, #558 needs to be merged, right?
[01:32:15] <maerwald> yeah
[01:32:59] <fendor[m]> Also, I thought the intention of https://github.com/haskell/vscode-haskell/issues/559 might have been to maybe get this resolved now? Or do you prefer to wait for actual feature request?
[01:34:02] <maerwald> no, this is not a release blocker
[01:35:32] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[01:35:46] <fendor[m]> ok, I haven't followed to closely your discussion with zubin, was the outcome that the behavioural change is sensible? (As an additional data point, I asked another haskeller what they thought about they changed and they liked it)
[01:36:07] <maerwald> I don't know 
[01:38:23] <fendor[m]> wz1000, after reading the reasoning for the ghcup dependency in the VSCode extension, do you still think this is unwise?
[01:39:14] <wz1000> No, I think it is OK given the constraints we have
[01:40:12] <wz1000> as long as the requirement is made clear in the extension
[01:41:08] <fendor[m]> yeah, the README needs to make this clear
[01:41:34] <wz1000> I mean more when users upgrade, but that too
[01:42:58] <maerwald> fendor[m]: the popup makes this clear
[01:43:50] <fendor[m]> wz1000: This is going to be the release announcement: https://hackmd.io/@H5m3j9VQRsiiBdVxBmOCiA/S11w7XqG5/edit I hope that will answer most questions
[01:45:36] <wz1000> what is the replacement for `updateBehavior`?
[01:45:53] <maerwald> using PATH
[01:47:05] <wz1000> So with the GHCup option it will always auto-update?
[01:47:11] <fendor[m]> yeah
[01:47:23] <wz1000> that doesn't sound good
[01:47:33] <maerwald> updateBehavior has shitty semantics
[01:47:42] <maerwald> if you want to handle versions, use PATH
[01:47:45] <fendor[m]> why not? Who wants only one HLS version and not newer versions anymore?
[01:47:55] <maerwald> and the code was severly confusing
[01:48:02] <wz1000> If the user has a working installation, we don't want to force them to update to a broken version
[01:48:11] <maerwald> why would we ship a broken HLS?
[01:48:17] <wz1000> it happens
[01:48:20] <fendor[m]> tbf, it happens ðŸ˜›
[01:48:32] <maerwald> they can easily work around that
[01:48:39] <wz1000> particulary in more uncommon cases
[01:49:23] <fendor[m]> however, I don't believe that devs that let ghcup manage it automatically, will hold back with an update
[01:49:24] <wz1000> I will be using my own HLS installation, but I really don't think people recieve this well
[01:49:48] <wz1000> Can't GHCup install many versions of HLS?
[01:49:56] <maerwald> sure
[01:49:58] <fendor[m]> yep
[01:50:16] <maerwald> but again: that is a poor setting
[01:50:22] <wz1000> so perhaps we can have an option to choose the HLS version?
[01:50:26] <sm> fendor: if you want to mention stack using ghcup ghc (useful on mac m1 currently) it could be "If you are primarily using stack, you may want to set "haskell.installGHC": false and let stack manage GHC as it normally does; or, set "system-ghc:true\ninstall-ghc:false" in ~/.stack/config.yaml to make stack use ghcup-managed GHCs." 
[01:50:28] <maerwald> if you want to force a particular HLS, you already have 2 options
[01:50:33] <maerwald> 1. serverExecutablePath and 2. PATH
[01:51:11] <maerwald> sm: system-ghc picks whatever GHC is in path, it performs no version checks whatsoever
[01:51:28] <wz1000> but you already have a working HLS installation and an update breaks it someday and it is difficult to roll back, people are going to be angry
[01:51:40] <maerwald> wz1000: it is not difficult to roll back
[01:51:41] <fendor[m]> sm, I feel like this is a bit too much for release announcements. However, it definitely can have its place in the README
[01:51:46] <maerwald> you set haskell.serverExecutablePath
[01:51:57] <sm> maerwald: ok, I think they have a feature for that, but life has been good here since I followed this advice from you
[01:52:09] <sm> fendor: cool
[01:52:21] <wz1000> you have to figure out how to install HLS rather than having the extension automatically manage it for as it would have been doing previously
[01:52:23] <fendor[m]> rolling back was impossible in the previous version
[01:53:11] <maerwald> wz1000: uhm, HLS will already be installed if you want to roll back
[01:53:36] <maerwald> if an update breaks your project, the the old version *IS* installed
[01:53:52] <wz1000> fendor[m], maerwald: are updates opt in? i.e. before downloading any updates do you get a choice?
[01:54:09] <maerwald> no, if you want updates to be opt-in, use ghcup manually
[01:54:27] <wz1000> I don't think that is good behaviour
[01:54:36] <maerwald> I think it is
[01:54:44] <fendor[m]> If you updated by accident in the previous extension version, you had no way of rolling back. The only way would have been, deleting the binary, then turning off the automatic update, and then relaunching
[01:55:14] <fendor[m]> we have at least one precedent: rust-analyser auto-downloads itself and updates automatically as well
[01:55:21] <maerwald> it really *is* trivial to roll back, it is trivial to manage HLS manually as well
[01:55:22] <wz1000> were updates opt in the previous version or did it just start downloading them?
[01:56:01] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[01:56:17] <sm> when you find HLS has stopped working due to an update, what's the UX for rolling it back ?
[01:56:26] <maerwald> what you're asking is basically an interactive UI to ghcup... that already exists: `ghcup tui`
[01:56:51] <maerwald> you could re-implement that in VSCode, but I find that excessive
[01:56:51] <wz1000> maerwald: What I'm asking is for a popup before the extension starts downloading or installing anything new
[01:56:58] <fendor[m]> wz1000, maybe there is a setting, but since I never dabble in the settings unless I have a reason, it was an automatic update
[01:57:25] *** Joins: hololeap (~hololeap@user/hololeap)
[01:57:27] <fendor[m]> sm, in the extension, none so far (like, not now, not before).
[01:57:55] <wz1000> ok, if the previous version worked like this then perhaps it is OK for this release, but I still think that we should ask for consent before downloading anything onto the users machine
[01:58:20] <maerwald> we do, at the start, but we don't on every single download
[01:58:39] <fendor[m]> Well, we are kind of asking by asking whether they want us to manage stuff. And once they opt-in, we install
[01:58:49] <fendor[m]> and I believe that is the correct default for most users in this case
[01:58:57] <maerwald> What you're asking is a third mode of operation
[01:59:17] <maerwald> And I think that is not a very interesting use case, because you can just handle it manually then
[01:59:19] <sm> I tend to agree re prompting before upgrade, especially since these aren't signed/third-party-audited binaries (AFAIK)
[01:59:25] <maerwald> via `ghcup tui` and PATH
[01:59:37] <maerwald> they are
[01:59:40] <maerwald> gpg signed
[02:00:13] <wz1000> I think it is reasonable to have HLS managed by the extension and still expect that any updates would only happen with explicit consent
[02:00:21] <fendor[m]> I think they previously were not signed? So, this is a clear improvement as well
[02:00:22] <sm> not using platform's native security system, then
[02:00:45] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:01:46] <fendor[m]> Then you would be prompted with up to 5 prompts on first startup, where the average user is like "I have no idea why I would need that"
[02:02:01] <maerwald> yeah, I think that's simply bad UI
[02:02:28] <maerwald> either you want it automatically handled or you don't
[02:02:29] <fendor[m]> To be clear, I believe the concerns are totally valid, and we are mainly trying to strike a good balance here
[02:02:37] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[02:03:04] <maerwald> yes, we could add a third interactive mode, but that's not much different from simply using `ghcup tui`
[02:03:06] <sm> what's the problem with asking for confirmation before an upgrade maerwald ? too much hassle for experienced users ?
[02:03:16] <wz1000> I think it would be very nice to have a prompt saying "Do you want to update? Yes, No, Yes and don't ask again"
[02:03:24] <sm> right
[02:03:46] <fendor[m]> sm, plethora of options and death by configuration ðŸ˜€ 
[02:03:58] <sm> ok, but please don't force me to install a silent backdoor into my machine to use HLS :)
[02:04:09] <fendor[m]> that's my concern at least
[02:04:33] * sm already has too many of those :/
[02:04:34] <fendor[m]> we don't, you can do everything by yourself ðŸ˜€ but if you trust us to download HLS automatically...
[02:04:58] <wz1000> I think this is very reasonable to add and goes a long way to improve user relations
[02:06:51] <maerwald> that feature was the most messy part of the code
[02:07:06] <maerwald> because clearly, no one really understood the semantics
[02:09:18] <wz1000> the point is that even though you could handle it manually, you use the extension because it provides a good experience of automatically managing it until it automatically breaks at some point with no user input or fault of your own, and then if you want to get it back to a working state you have to learn mess with configuration and ghcup which is significant step up in complexity
[02:09:34] <wz1000> which tends to make people angry
[02:09:46] <maerwald> wz1000: I disagree that it's a significant step up in complexity
[02:10:02] <maerwald> I've never had a user report that ghcup is too complicated
[02:10:21] <wz1000> And even though it would ideal to make downgrading easy, even asking them to mess with GHCup to downgrade is OK as long as the update is explicit and made with user consent
[02:10:46] <wz1000> because users expect that things might break when they click the update button
[02:11:04] <wz1000> which is much better than it just magically breaking on you some day
[02:11:28] <sm> agreed
[02:11:50] <wz1000> I'm not saying ghcup is complicated, I'm saying its a step up if all your prior experience is "install the extension for the vscode marketplace"
[02:12:25] <maerwald> I don't see that this is good UI. The user *doesn't know* if an upgrade will break their workflow before they execute it
[02:12:34] <fendor[m]> When a new HLS release comes out and the user is asked whether they want to update... what are they supposed to do? Start googling about recent issues? They will update without hesitation, and if the release is borked, they can't roll back either way.
[02:12:35] <maerwald> so most users will click "yes"
[02:12:37] <maerwald> then stuff breaks
[02:12:46] <maerwald> and then the "updateBehavior" setting is not what they're actually after
[02:13:12] <wz1000> maerwald: if you are using the IDE for serious work, you might want to defer the update if things are currently working
[02:13:17] <sm> it's still better when a user was notified and acted from choice. silent auto-update should be opt in. 
[02:13:38] <fendor[m]> I see that the causality might be helpful, but if the breakage is subtle enough, they will probably not understand that either
[02:14:27] <maerwald> wz1000: imo, those users should use the PATH setting, because they clearly have a need to control their toolchain
[02:14:54] <fendor[m]> Additionally, it is not silent. VSCode will report that HLS is being installed, so users notice it
[02:15:02] <wz1000> maerwald: we need to make the default path a reasonable option for everyone who is not working on HLS directly
[02:15:14] <maerwald> wz1000: the default is PATH
[02:15:27] <maerwald> ghcup is not the default
[02:15:54] <wz1000> yes, but we have all this logic so that people can use it, it is a bit strange to say that any serious user should not be using this feature
[02:16:08] <wz1000> especially given that it is the path of least resistance
[02:16:48] <drsooch[m]> Iâ€™ve been half following along, is it possible to add a config item to pin an HLS version?
[02:17:00] <maerwald> drsooch[m]: haskell.serverExecutablePath
[02:17:07] * sm is a technical user capable of messing with PATH and terminals but much much happier to stay in VSC and clicky click 
[02:17:07] <drsooch[m]> Without that part
[02:17:42] <maerwald> drsooch[m]: ?
[02:18:05] <drsooch[m]> I use vscode occasionally mostly for making lame gifs, I wouldnâ€™t know where to look for the path to an hls executable
[02:18:24] <drsooch[m]> (Outside of my own builds)
[02:19:58] <wz1000> fendor[m]: my main objection isn't causality but consent - you might not want to update HLS if you are currently in the middle of serious work
[02:20:56] <maerwald> wz1000: well, your current HLS version may not support the GHC version the project uses
[02:21:03] <fendor[m]> wz1000, do you know anyone who used such a workflow? Disable automatic update behaviour, but enabled it once they wanted to update HLS?
[02:21:07] <wz1000> IMO it is not reasonable to expect that serious users avoid automatic HLS management by the extension and only have that feature for new users
[02:21:09] <maerwald> now you need another popup explaining the user that
[02:21:26] <maerwald> then what about downgrades?
[02:21:32] <wz1000> maerwald: don't we have a message for HLS verison XXX doesn't support GHC version YYY
[02:21:42] <maerwald> it really is not clear semantics
[02:21:56] <maerwald> the only clear thing you can come up with is "ask before every download"
[02:21:57] <wz1000> maerwald: downgrades would be good to have, but all I'm asking for is consent before downloading anything
[02:22:12] <wz1000> yes, I think that is enough to satisfy me
[02:22:20] <maerwald> and then by not agreeing to the download, your toolchain might be broken as well
[02:22:24] <fendor[m]> did the extension install older HLS versions as a fallback? 
[02:22:29] <fendor[m]> wz1000: That I am vetoing ðŸ˜€ 
[02:23:09] <maerwald> I think what you're describing actually is not about downloads, but about *freezing* a toolchain configuration
[02:23:21] <wz1000> maerwald: how will the toolchain be broken if everything was working previously?
[02:23:23] <sm> there are a few different issues being discussed, but wz1000 is absolutely right about needing to be able to pin your tools when needed. This is standard behaviour and shouldn't be controversial
[02:23:38] <maerwald> freezing toolchain configuration could be implemented rather easily and has much clearer semantics
[02:23:48] <maerwald> asking before every download is not, imo
[02:24:13] *** Quits: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:24:16] <maerwald> wz1000: well, because you have more than one project?
[02:24:23] <sm> maerwald, we have been talking about asking with an option to turn off the asking
[02:24:26] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:24:26] <maerwald> see, you're thinking project-specific
[02:24:35] <maerwald> so it is about freezing toolchain config for a particular project
[02:24:44] <maerwald> that's a different use case
[02:25:22] <wz1000> maerwald: all I'm asking for is a prompt before downloads, if anything else goes wrong then thats on the user
[02:25:53] <maerwald> and I don't think that's the actual use case you want to solve
[02:26:20] <wz1000> fendor[m], maerwald: I think I've made my opinions and thoughts clear, but ultimately you guys are driving the new release. I don't use this feature anyway
[02:27:23] <fendor[m]> wz1000, and I appreciate your input and opinions, thank you for discussing this in so much detail with us!
[02:27:45] <maerwald> on the implementation side: asking before every download is *not* trivial to implement with the current code
[02:28:11] <maerwald> we install the entire toolchain with one command atm
[02:29:12] <fendor[m]> Implementation details should not matter (they obviously sometimes do)
[02:29:25] <maerwald> freezing a toolchain config would instead work rather well and could be saved as project-specific setting
[02:30:24] <fendor[m]> I also like the idea quite a lot.
[02:31:03] <maerwald> so to update, you'd simply delete that config and restart vscode
[02:31:13] <maerwald> then if you figure out the update broke stuff, you copy back your old config
[02:31:17] <maerwald> instead of being lost
[02:31:43] <fendor[m]> sm, do you have an extension in mind that asks you confirmation before updates? (I like to take other successful extensions as a role model)
[02:32:00] <drsooch[m]> I guess that was my earlier comment, would it be possible to select the HLS version in a config item I.e. [latest, 1.6.1, 1.6.0 â€¦]
[02:32:18] <maerwald> pretty sure node extensions just install whatever is in package-lock.json, which basically is frozen toolchain config
[02:33:04] <fendor[m]> drsooch, not easily, the extension comes with the auto-feature to download older HLS versions  if your ghc version isn't supported by the latest HLS. How would this feature interact?
[02:33:07] <maerwald> drsooch[m]: not at the moment, but it would be easy to implement and have simple semantics
[02:33:28] <fendor[m]> really? I do not straight away see the simple semantics
[02:33:34] <sm> fendor: I'm speaking of software generally, I don't know how other VSC extensions handle it
[02:33:59] <sm> but consider any desktop app, they will give you the option to turn off auto updates or to prompt for them 
[02:34:01] <fendor[m]> unless it is a project specific option
[02:34:05] <maerwald> fendor[m]: yes
[02:34:20] <maerwald> sm: nix does not ask you whether you want to update :p
[02:34:28] <maerwald> nor does cabal or stack
[02:34:32] <maerwald> you feed it configuration
[02:34:44] <maerwald> stack lts resolver, freeze files, etc.
[02:35:21] <maerwald> I think that solves more use cases without being annoying with excessive popups
[02:35:23] <fendor[m]> sm, true, but nowadays, software is often written differently. On windows, firefox/chrome auto-update. As I said, popular extensions auto-update (such as clangd, cpptools, rust-analyzer)
[02:35:25] <sm> maerwald: you're missing the point, these things update when you take some action - not silently in the middle of critical client projects
[02:35:46] *** shapr` is now known as shapr
[02:37:05] <sm> fendor: things auto-update, but they give you the option to stop or prompt. Even firefox and hopefully chrome. If not, well it's google and a web browser, so people put up with it. Random dev tools shouldn't follow bad practice
[02:37:47] <wz1000> fendor[m], maerwald: https://github.com/clangd/vscode-clangd/blob/master/src/install.ts#L99
[02:38:05] <wz1000> this is exactly what I'm asking for
[02:39:49] <maerwald> wz1000: so... that extension will disable updatecheck *globally* then if you click "Don't ask again"
[02:39:58] <maerwald> for all your projects
[02:40:06] <wz1000> yes
[02:40:13] <maerwald> that is confusing
[02:41:01] <maerwald> for a browser, that would make sense
[02:41:08] <maerwald> I don't need different versions per tab
[02:41:27] <maerwald> for a dev tool, I very much might
[02:41:51] <sm> do you want to have to tell it not to auto-update in every new project ? certainly not
[02:42:10] <maerwald> sm: you could have another button
[02:42:18] <wz1000> you usally need different builds (i.e. for different GHCs) for each project, but you probably want the same HLS version across
[02:42:39] <maerwald> wz1000: not sure, because you already need downgrades for some GHC versions
[02:43:14] <wz1000> I'm OK we just error out saying "HLS version {currentVersion} doesn't support GHC XXX"
[02:45:17] * sm understands agreeing on the desired UX is one thing, and what can be affordably implemented today might be another. Thanks a lot for the work, afk a bit
[02:46:31] <maerwald> Well, clearly this discussion should have happened before. Because part of the reason to rewrite this was to change the UX.
[02:47:43] <sm> sounds like a software project. These things are never understood until delivery day.  :)
[02:47:45] <maerwald> I suggest to postpone the release then, until someone figures out what UX we want
[02:47:53] <fendor[m]> tbh, the ux was imperfect before as well, the move to ghcup is imo orthogonal to a lot of these UX questions
[02:48:33] <fendor[m]> Although we will probably have skewed data points, it might be worth the effort to try ask the community
[02:48:53] <maerwald> Yeah. I don't think I want to be involved in that :p
[02:48:57] <drsooch[m]> You should hire someone to run a focus group
[02:51:44] <fendor[m]> lÃ¶l.
[02:51:58] <sm> how about shipping an alpha ("beta" if you like) for testing. This is a big change, and a perfect 2.0.0 on first try is a lot to ask
[02:52:38] <fendor[m]> ah, hm that's a great idea and vscode even supports this since last year
[02:54:21] *** Quits: fendor (~fendor@91.141.65.26.wireless.dyn.drei.com) (Remote host closed the connection)
[03:01:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[03:01:49] <maerwald> https://github.com/haskell/vscode-haskell/issues/561
[03:03:22] *** Joins: hololeap (~hololeap@user/hololeap)
[03:03:37] <wz1000> maerwald: how about an `--offline-mode` option to ghcup such that it doesn't check for updates and errors out if the required things don't already exist?
[03:03:52] <maerwald> that already exists
[03:04:24] <maerwald> in ghcup, not in the extensio
[03:04:29] <wz1000> so can't we implement this feature using that?
[03:06:52] <wz1000> maerwald: also simply removing the `--install` options depending on the prompt response could work?
[03:06:55] <maerwald> why you don't like toolchain configuration? I think this has much clearer semantics, e.g.: {"haskell.toolchain": [{"tool": "hls", "ver": "1.6.1.0"}, {"tool": "ghc", "ver": "project-ghc"}, {"tool": "cabal", "ver": "latest"}]}
[03:07:01] <maerwald> "latest" would imply updates
[03:07:10] <maerwald> "1.6.1.0" means no update
[03:07:32] <maerwald> "project-ghc" means "let hls wrapper figure it out"
[03:08:15] <wz1000> I think its not a bad feature in general, but a step up in complexity. Also another configuration file in addition to hie.yaml, cabal.project, .cabal, stack.yaml, package.yaml etc etc
[03:08:16] <maerwald> that way users don't have to understand ghcup and yet it integrates perfectly
[03:08:26] <maerwald> no
[03:08:30] <maerwald> this is vscode config
[03:09:00] <wz1000> sure, doesn't sound like a bad idea
[03:09:14] <maerwald> that way you can already control update-behavior
[03:09:17] <maerwald> and you can roll back
[03:09:22] <maerwald> and freeze your toolchain
[03:09:38] <maerwald> without popups!
[03:10:32] <wz1000> sure. But I think it would still be a good idea to have a popup before updating
[03:11:07] <maerwald> the main reason I stopped using VSCode are *popups*
[03:11:41] <wz1000> I'm looking at the code now and it doesn't seem like it would be that hard to check if an update would be triggered (latest hls version doesn't match latest installed hls version, both of which we know IIUC in `getLatestProjectHLS`)
[03:12:16] <wz1000> And depending on the prompt response, insert or remove the `--install` flag when running ghcup
[03:12:42] <maerwald> then that invocation would simply fail
[03:13:12] <wz1000> not if you set the hls version argument to the one that is already installed?
[03:13:38] <maerwald> wz1000: but is the one that is already installed the one that was used *earlier*?
[03:13:49] <maerwald> it might not
[03:14:21] <maerwald> this is why I think semantics are not clear and it might not have the desired effect
[03:14:44] <wz1000> ok, you are more familiar with the subtleties and I like your latest proposal
[03:15:19] <maerwald> the point is this: 1. project A requires GHC 8.10.4, so we need HLS 1.4.0... 2. project B requires GHC 8.10.7 and will install HLS 1.6.1.0
[03:17:10] <maerwald> now you update GHC in project A and will get HLS 1.6.1.0
[03:17:14] <maerwald> and boom
[03:17:36] <wz1000> I don't see the problem
[03:17:55] <maerwald> you're not guarding the user from broken configurations by introducing "don't download" popups
[03:19:08] <wz1000> OK, but that is slightly orthogonal since the user actually made a relevant action to trigger this (perhaps unintended consequences), but this is opposed to it magically breaking with no user involvement
[03:19:39] <wz1000> But your idea is good, I would personally be satisfied with it
[03:27:23] <maerwald> is there an easy way to check whether the HLS configuration works? Afais `hls-wrapper typecheck` is not reliable, because it checks random other files in the project dir
[03:28:11] <wz1000> you can give it a path to a specific file?
[03:29:02] <maerwald> So... I think, if we want to be able to deny updates, we also want to save the previous toolchain state, instead of assuming "latest installed" = "previous project state"
[03:30:11] <maerwald> so instead of focussing on downloads, we would focus on toolchain configuration changes
[04:11:00] <maerwald> https://github.com/haskell/vscode-haskell/issues/561#issuecomment-1079793763
[09:46:34] *** Joins: sloorush (~sloorush@136.233.9.99)
[09:56:55] *** Quits: sloorush (~sloorush@136.233.9.99) (Ping timeout: 256 seconds)
[17:51:46] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:53:14] *** Joins: hololeap (~hololeap@user/hololeap)
[20:25:55] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:58:54] *** Joins: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:99fe:b93d:6b72:b64d)
[21:19:03] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[21:36:38] *** Quits: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:99fe:b93d:6b72:b64d) (Remote host closed the connection)
[21:39:44] *** Joins: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:8c5b:2b7f:be5:e39e)
[21:57:12] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (Quit: Lost terminal)
[22:30:50] *** Joins: OliverMa_ (~OliverMad@94.11.40.90)
[22:34:22] *** Quits: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:8c5b:2b7f:be5:e39e) (Ping timeout: 268 seconds)
[22:59:51] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:30:07] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[23:32:06] *** Quits: OliverMa_ (~OliverMad@94.11.40.90) (Remote host closed the connection)
[23:32:41] *** Joins: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:f18a:7a77:2959:74f3)
[23:36:38] *** Quits: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:f18a:7a77:2959:74f3) (Remote host closed the connection)
[23:36:54] *** Joins: OliverMadine (~OliverMad@2a02:c7e:1e82:b300:f18a:7a77:2959:74f3)
[23:45:04] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:46:26] *** Joins: hololeap (~hololeap@user/hololeap)
