[00:05:50] <FromDiscord> <demotomohiro> If your procedure returns modifable `object` type, return type need to be `var PrefsNode`.
[00:06:29] *** Joins: mahlon (~mahlon@martini.nu)
[00:09:02] <FromDiscord> <TryAngle> Hello, I'm back with an odd question üòÖ‚ÜµI would like to replace colors in an image. May you guys give me a  direction of how to do this in Nim?
[00:11:08] <FromDiscord> <TryAngle> I have a template image with a set of colors and I basically want to create variances of that image with different color sets.‚ÜµIn Java I have Buffered Image I could use for this. What would be the nim equivalent?
[00:13:49] <FromDiscord> <demotomohiro> https://github.com/xflywind/awesome-nim#image
[00:18:23] <FromDiscord> <TryAngle> Omg been so long I forgot about this page. Thank you
[00:26:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[00:34:07] <FromDiscord> <Waldecir Santos> I'm playing with list comprehensions bit I'm getting this error `Error: expression '"first_name"' is of type 'string' and has to be used (or discarded)`  code: https://play.nim-lang.org/#ix=3QWQ
[00:36:34] <FromDiscord> <Elegantbeef> I think the issue is that fieldpairs is an unrolled for loop, and as such doesnt yield like collect expects
[00:36:48] <FromDiscord> <TryAngle> You are returning something in your for loop
[00:37:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QWS
[00:37:14] <FromDiscord> <Elegantbeef> That's how collect is used tryangle üòõ
[00:37:56] <FromDiscord> <Waldecir Santos> ohh so `fieldPairs` is a macro, is that what you mean ?
[00:38:05] <FromDiscord> <Elegantbeef> Well it's magic
[00:38:19] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3QWT
[00:38:20] <FromDiscord> <Elegantbeef> Works fine
[00:38:55] <FromDiscord> <Waldecir Santos> Sure I can do that, but that is not "List Comprehensions" right ?
[00:39:01] <FromDiscord> <Waldecir Santos> https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers#list-comprehensions
[00:39:13] <FromDiscord> <Waldecir Santos> I was trying to replicate this ‚òùÔ∏è
[00:39:14] <FromDiscord> <Elegantbeef> I mean who cares what it's called
[00:39:18] <FromDiscord> <Elegantbeef> It solves your problem
[00:39:44] <FromDiscord> <Waldecir Santos> Right ? I agree but the error message dosen't help much lol
[00:40:08] <FromDiscord> <Waldecir Santos> At least not for me as new to nim run.....
[00:40:17] <FromDiscord> <Elegantbeef> Well it's a macro, so it's expanded, kinda hard to get a good error message there in that case
[00:40:26] <FromDiscord> <Waldecir Santos> True
[00:40:50] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3QWU
[00:40:53] <FromDiscord> <Elegantbeef> Here is the collect way then
[00:41:20] <FromDiscord> <Waldecir Santos> https://tenor.com/view/perfection-perfect-flawless-ultimate-spotless-gif-13993155
[00:41:38] <FromDiscord> <Waldecir Santos> Thank you Elegantbeef !
[00:44:57] <FromDiscord> <Elegantbeef> `fieldpairs` and `fields` rely on loop unrolling to function due to what they do
[00:45:24] <FromDiscord> <Elegantbeef> They can yield heterogeneous types so magic is involved
[00:45:37] <FromDiscord> <Elegantbeef> Dont know if there are any more
[01:00:46] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[01:02:13] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[01:04:24] <FromDiscord> <Patitotective> In reply to @demotomohiro "If your procedure returns": ü§Ø
[01:04:28] <FromDiscord> <Patitotective> thanks ‚ù§Ô∏è
[01:04:31] <FromDiscord> <Patitotective> üôÉ
[01:11:32] *** Joins: ltriant (~ltriant@118.102.122.246)
[01:23:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[01:26:16] <FromDiscord> <Waldecir Santos> So if I need a "dict/map" of string/[any type] is that possible with Nim?
[01:29:34] <FromDiscord> <Waldecir Santos> Maybe with typeinfo `var beatles = initTable[string, Any]()`?
[01:29:59] *** Quits: shalokshalom (~quassel@2a02:1748:dd5e:7f60:b5dc:871:61:d7) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:30:58] <FromDiscord> <Waldecir Santos> I remember this one too https://github.com/nim-appkit/values but seems "staled"
[01:34:45] <FromDiscord> <Elegantbeef> Nim doesnt have dynamic typing so you'd need to make an object variant something like the `JsonNode`
[01:35:15] <FromDiscord> <demotomohiro> Why do you need  such a type?
[01:36:11] <FromDiscord> <Waldecir Santos> I'm playing with the idea of making a "django like" ORM and I need this for storing the filters/where clause.
[01:37:54] <FromDiscord> <Elegantbeef> Then you could have a `Table[string, RootObj]` or `RootRef`
[01:37:58] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QX7
[01:39:39] <FromDiscord> <Waldecir Santos> Got it, yeah I think norm does something similar to this.
[01:40:51] <FromDiscord> <Waldecir Santos> They encapsulate `DbValue`
[02:13:26] <FromDiscord> <ynfle> Beef, out of curiousity, shouldn't this work https://play.nim-lang.org/#ix=3QXe?
[02:13:28] <FromDiscord> <ynfle> (edit) "https://play.nim-lang.org/#ix=3QXe?" => "https://play.nim-lang.org/#ix=3QXe ?"
[02:17:02] <nrds> <06Prestige99> Anyone know why c bindings to a typedef struct would cause an Illegal storage access error on the first component, as a float?
[02:18:16] <FromDiscord> <ynfle> In reply to @nrds "<Prestige> Anyone know why": Are you accessing it in nim?
[02:18:33] <nrds> <06Prestige99> Yeah
[02:19:21] <nrds> <06Prestige99> There's a wrapper for the sdl_gpu library, and if I try accessing the x component of the Camera type, there's an illegal storage access error. But I can access variables delcared later in the type
[02:19:46] <nrds> <06Prestige99> https://i.imgur.com/4n89HbW.png
[02:21:42] <nrds> <06Prestige99> Hm it's actually specifically the y component, the x does not crash it
[02:24:42] <nrds> <06Prestige99> It seems like zoomX and zoomX actually move the camera like x and y should. y, z, and angle, all crash the program if you try changing their values
[02:29:06] <FromDiscord> <ynfle> How is it initialized?
[02:29:09] <FromDiscord> <ynfle> In the nim code?
[02:29:10] <nrds> <06Prestige99> aha I found the problem finally
[02:29:22] <FromDiscord> <ynfle> Nice
[02:29:24] <FromDiscord> <ynfle> What is it?
[02:29:27] <nrds> <06Prestige99> Bindings were missing a property in the struct that owned the camera
[02:29:34] <nrds> <06Prestige99> so everything was off ab it
[02:29:36] <nrds> <06Prestige99> a bit*
[02:36:03] <FromDiscord> <ynfle> Ah
[02:42:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:09:25] <FromDiscord> <sOkam!> When you create a binding to from some C code to Nim with futhark/c2nim/etc:‚Üµ- What happens to static functions that are not declared in any header file,‚Üµ... but are used by other functions that are declared? ü§î
[03:16:45] <FromDiscord> <Elegantbeef> @ynfle\: https://play.nim-lang.org/#ix=3QXg
[03:30:18] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:34:26] <FromDiscord> <abdu> sent a code paste, see https://play.nim-lang.org/#ix=3QXp
[03:38:33] <FromDiscord> <ynfle> In reply to @Elegantbeef "<@767093711112241162>\: https://play.nim-lang.org/#": Rookie mistake. I don't hinki've ever used inheritance in nim
[03:38:44] <FromDiscord> <ynfle> (edit) "hinki've" => "think I've"
[03:43:17] <FromDiscord> <Elegantbeef> Nim doesnt have goto
[03:43:17] <FromDiscord> <Elegantbeef> There are while loops, named blocks, and for loops, goto is generaly unneeded
[03:43:34] <NimEventer> New thread by Mardiyah: Performing goto in Nim , see https://forum.nim-lang.org/t/8963
[03:44:32] <FromDiscord> <ynfle> What is with peple quickly posting the same question on mutiple platform?
[03:45:11] <FromDiscord> <huantian> it's actually just this one person
[03:45:34] <FromDiscord> <huantian> at least I think it is
[03:45:45] <FromDiscord> <Elegantbeef> Cause fuck me i guess
[03:46:14] <FromDiscord> <Elegantbeef> It's this person a lot
[03:46:18] <FromDiscord> <Elegantbeef> They go here SO and the forum
[03:46:27] <FromDiscord> <Elegantbeef> They get their answer here but dont trust me i guess
[03:47:44] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:47:45] <nrds> <06Prestige99> Lol
[03:48:36] <FromDiscord> <Elegantbeef> And if you ping them they dont come back
[03:49:48] <FromDiscord> <creikey> In reply to @Elegantbeef "Cause fuck me i": I gotta say you're in like the top 3 people for answering technical questions I've ever seen over the internet
[03:49:56] <FromDiscord> <creikey> It's kinda nuts
[03:49:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 256 seconds)
[03:50:46] <FromDiscord> <Elegantbeef> Hey i'm kinda nuts!
[03:51:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:53:02] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[03:53:40] <FromDiscord> <ynfle> In reply to @Elegantbeef "Hey i'm kinda nuts!": Canadian
[03:53:55] <FromDiscord> <Elegantbeef> No i'm very Canadian
[03:57:41] <FromDiscord> <ynfle> I hear man
[03:58:21] <FromDiscord> <Elegantbeef> You hear man
[03:59:50] <FromDiscord> <ynfle> Does being very Canadian make one kinda nuts?
[04:00:26] <FromDiscord> <Elegantbeef> Perhaps
[04:16:52] <FromDiscord> <Patitotective> In reply to @Elegantbeef "They get their answer": i confirm lmao
[04:57:23] <FromDiscord> <Elegantbeef> @Patitotective\: why no trust me
[04:59:01] <FromDiscord> <Patitotective> In reply to @Elegantbeef "<@762008715162419261>\: why no trust": you pay more attention to the answers in the forum than here in discord, then when you understand the answer in the forum you reread your message and realize you were right
[04:59:45] <FromDiscord> <Patitotective> also you should have a role like _trust me_
[05:00:04] <FromDiscord> <Patitotective> like veteran and active members should have it
[05:00:12] <FromDiscord> <Patitotective> (edit) "and" => "and"
[05:07:28] <FromDiscord> <huantian> you should have to take a quiz on nim to get the role üòõ
[05:08:38] <FromDiscord> <ynfle> In reply to @huantian "you should have to": Fix 10 compiler bugs
[05:10:30] <FromDiscord> <Elegantbeef> have i even fixed 10 bugs?!
[05:11:58] <FromDiscord> <huantian> we could also have a role for introducing 10 compiler bugs
[05:12:18] <FromDiscord> <ynfle> In reply to @Elegantbeef "have i even fixed": Yup https://github.com/nim-lang/Nim/commits?author=beef331
[05:15:55] <FromDiscord> <Elegantbeef> damn thats more than i remember
[05:18:32] <FromDiscord> <Patitotective> for contributions too
[05:19:02] <FromDiscord> <ynfle> I counted more than 10 bug fixes
[05:19:06] <FromDiscord> <abdu> In reply to @Elegantbeef "There are while loops,": how to do symbol named block: then
[05:19:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QXK
[05:19:36] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3QXL
[05:19:51] <FromDiscord> <Elegantbeef> Gotos just introduce bad flow control, that's hard to reason
[05:20:10] <FromDiscord> <Elegantbeef> procedures and templates are just nicer to reason
[05:21:38] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[05:22:45] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[05:28:09] <FromDiscord> <demotomohiro> Nim has block statement with name and you can exit the block with `break <block name>`.‚Üµhttps://nim-lang.org/docs/manual.html#statements-and-expressions-block-statement
[05:32:06] <FromDiscord> <demotomohiro> Long time ago, people wrote code with many goto and that result in hard to read code. People called it spageti code. Then C and other programming language introduced structual programming so that people can write code without using goto.
[06:25:17] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[06:46:18] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:43] <FromDiscord> <sOkam!> In reply to @sOkam! "When you create a": Any pointers on to what to read or test to understand this?
[06:47:39] <FromDiscord> <Elegantbeef> what's a C static function?
[06:50:25] <FromDiscord> <sOkam!> In reply to @Elegantbeef "what's a C static": afaik (unless I misunderstood), static is a function that can only be used in the same file that is declared. something like cpp private (ish)‚Üµso they don't need to appear in header files, since they are only called in functions lower in the same file where they are defined/declared
[06:52:06] <FromDiscord> <Elegantbeef> So then that answers your question no?
[06:52:39] <FromDiscord> <sOkam!> In reply to @Elegantbeef "So then that answers": If it does, I don't know how it works
[06:53:05] <FromDiscord> <sOkam!> They don't appear in headers, but... what happens to them when the project is binded?
[06:54:00] <FromDiscord> <Elegantbeef> Eh i dont know C enough, but I'd reason that static functions arent a concern to Nim, i could be wrong
[06:54:17] <FromDiscord> <Elegantbeef> You cannot make code that calls a static function if you expose code enough
[06:54:21] <FromDiscord> <sOkam!> I guess the misunderstanding comes from not knowing how the C code is actually accessed in a binding
[06:54:25] <FromDiscord> <Elegantbeef> expose code properly\
[06:56:33] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Eh i dont know": They might not be, I just don't know. Asking just to understand how they work ü§∑‚Äç‚ôÇÔ∏è
[07:02:38] <FromDiscord> <Elegantbeef> Well you have your `extern`'d procedures you call
[07:07:18] <FromDiscord> <sOkam!> sent a long message, see http://ix.io/3QXZ
[07:07:22] <FromDiscord> <demotomohiro> static functions or variables in C is only used in the .c file it declared and other .c file or Nim doesnt need to care.
[07:08:58] <FromDiscord> <Elegantbeef> Well they just limit you to calling the procedure from it's object file
[07:08:59] <FromDiscord> <Elegantbeef> So when talking about libraries they're 100% useless
[07:09:00] <FromDiscord> <Elegantbeef> It's more for writing pure C afaict
[07:09:01] <FromDiscord> <demotomohiro> Binding only need to declare C functions Nim directly uses.
[07:09:45] <FromDiscord> <sOkam!> how does the compiler then know how to compile the C code that's not binded?
[07:10:19] <FromDiscord> <sOkam!> as you can see, i understand nothing about compilers üë∂
[07:10:35] <FromDiscord> <sOkam!> (edit) "how does the ... compiler" 03added "Nim"
[07:13:22] <FromDiscord> <Elegantbeef> When does Nim compiler C code that's not binded?
[07:14:00] <FromDiscord> <Elegantbeef> the way you use C is either with a `compile` statement in code, as an external library or with `{.emit.}`, static only matters in the first and last cases
[07:14:04] <FromDiscord> <demotomohiro> Header file or bindings just tells compiler that there are C functions in other .c code. You need to compile and link the .c file containing the C functions you use. Linker takes all compiled .c file (.o or .obj files) and links function calls and called functions in different file.
[07:15:08] <FromDiscord> <Elegantbeef> Headers are just for exposed code afterall, and since statics are unexposable.... there is no reason to care about static functions
[07:15:24] <FromDiscord> <sOkam!> I see
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:56:08] <nrds> <06Prestige99> Is it possible to have a proc `foo+=` that works without having do to `foo+=`(someValue) to invoke it?
[07:57:28] <FromDiscord> <Elegantbeef> What do you mean? `+=` that doesnt need `foo`
[07:58:09] <nrds> <06Prestige99> like I want to be able to do myThing.foo += 5
[07:58:31] <nrds> <06Prestige99> where `foo+=` is a proc
[07:58:32] <FromDiscord> <Elegantbeef> and `foo` doesnt exist?
[07:58:38] <nrds> <06Prestige99> Yeah
[07:59:08] <FromDiscord> <Elegantbeef> Uhh aside from making `foo` a macro i dont think so
[07:59:18] <nrds> <06Prestige99> hm okay
[07:59:37] <FromDiscord> <Elegantbeef> What're you trying to do overall if I may know?
[08:01:08] <nrds> <06Prestige99> I have a Camera that has two separate variables for zoom, zoomX and zoomY - I want to be able to just do camera.zoom += 1.4 or whatever
[08:01:21] <nrds> <06Prestige99> but I have to do `zoom+=`(camera, 1.4)
[08:01:49] <FromDiscord> <Elegantbeef> `camera.zoomIn(1.4)` üòõ
[08:01:58] <nrds> <06Prestige99> meh
[08:02:33] <nrds> <06Prestige99> Just annoying because I prefer operator overloading, but it only sort of works
[08:05:23] <FromDiscord> <Elegantbeef> Well you could do `camera.zoom =  Zoom 1.4` where ` = Zoom` is an additive operation
[08:05:31] <FromDiscord> <Elegantbeef> But yea not that nice
[08:08:19] <NimEventer> New post on r/nim by truggyguhh: NimSkull - A reimagining of Nim, see https://reddit.com/r/nim/comments/t36zqe/nimskull_a_reimagining_of_nim/
[08:09:47] <FromDiscord> <retkid> alright just to make sure i got this
[08:09:57] <FromDiscord> <retkid> there is no sane way use nimpy
[08:10:02] <FromDiscord> <retkid> (edit) "there is no sane way use nimpy ... " 03added "for local files"
[08:11:18] <FromDiscord> <Elegantbeef> No clue
[08:12:06] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/947715260641603664/unknown.png
[08:12:14] <FromDiscord> <retkid> because while this certainly is code
[08:12:29] <madprops> so nimskull is nim with a code of conduct lmao
[08:13:01] <FromDiscord> <Elegantbeef> And progressing to an actual spec
[08:14:07] <FromDiscord> <retkid> is nimskull kinda like common-lisp to lisp?
[08:14:09] <FromDiscord> <retkid> what is this
[08:14:28] <FromDiscord> <retkid> yea seems like it
[08:15:05] <FromDiscord> <retkid> >     standard library, package management, and more had an acceptable trajectory.‚Üµjeez, cat claws
[08:15:44] <FromDiscord> <retkid> i wonder if this will go anywhere.
[08:16:14] <FromDiscord> <Elegantbeef> No clue
[08:17:06] <FromDiscord> <retkid> There is no specifics here.
[08:17:30] <FromDiscord> <retkid> we believe that an element of the vision was lost.‚ÜµWhat was lost? Where? When? What wen't wrong?
[08:18:08] <FromDiscord> <Elegantbeef> The language has a bunch of cruft and the compiler is full of tech debt is what they'd probably say
[08:18:30] <FromDiscord> <Elegantbeef> Dont know why it's suddenly getting talked about more, it's a few members working on a fork attempting to make the compiler 'better'
[08:19:10] <FromDiscord> <retkid> its a small community, word echoes
[08:20:30] <FromDiscord> <retkid> O'
[08:21:01] <FromDiscord> <retkid> I'm quite confident this will go nowhere seeing as how they have no solid design goals apart from disliking the higher-up maintainers of nim
[08:21:50] <FromDiscord> <Elegantbeef> You say that like they dont have a plan
[08:22:22] <FromDiscord> <retkid> they have a plan but in order to complete a giant undertaking you need a lot of ambition and good reasons
[08:23:26] <FromDiscord> <Rika> In reply to @retkid "I'm quite confident this": ...have you read the thing
[08:23:29] <FromDiscord> <Bloss> I don't get it, are they making changes that wouldn't be accepted in Nim?
[08:23:57] <FromDiscord> <Elegantbeef> "Establish a spec" is their prime directive
[08:24:08] <FromDiscord> <retkid> In reply to @Rika "...have you read the": I literally just read the entire documentation on their wip spec and the only things mentioned are different ways of submitting code and refactoring in the compiler
[08:24:26] <FromDiscord> <Rika> im not sure what you expected then, do you think nim has those?
[08:24:35] <FromDiscord> <Bloss> Nim getting "cancelled" would not be nice for me
[08:24:54] <FromDiscord> <Bloss> The first thing I thought of is the CoffeeScript forks
[08:25:00] <FromDiscord> <Rika> In reply to @blans "Nim getting "cancelled" would": doubt it would happen
[08:25:00] <FromDiscord> <retkid> In reply to @Rika "im not sure what": No, it doesn't but, you can change that without making a separate language
[08:25:03] <FromDiscord> <Rika> its already a fracture
[08:25:10] <FromDiscord> <retkid> In reply to @blans "The first thing I": those exist?
[08:25:16] <FromDiscord> <Rika> In reply to @retkid "No, it doesn't but,": do you think they havent tried
[08:25:39] <FromDiscord> <Rika> of course no one wants to make this fork happen
[08:25:47] <FromDiscord> <Bloss> Did they propose changes and they were rejected?
[08:26:13] <FromDiscord> <retkid> In reply to @Rika "its already a fracture": seems less like a fracture and more like a splinter
[08:26:15] <FromDiscord> <Bloss> CoffeeScript had like 10 forks all going in different directions and the language died hard
[08:26:26] <FromDiscord> <retkid> ah so thats how it died?
[08:26:28] <FromDiscord> <Rika> In reply to @retkid "seems less like a": i dont care what you call it, it is whatever you want to call it
[08:26:31] <FromDiscord> <Elegantbeef> And they think they have good reasons, so i dont see the issue üòõ
[08:27:01] <FromDiscord> <Rika> im not sure why you're bashing it that hard in the first place
[08:27:31] <FromDiscord> <Bloss> I'm just not seeing the conflict of interesst
[08:27:33] <FromDiscord> <retkid> it seems pretty melodramatic to me
[08:27:41] <FromDiscord> <Elegantbeef> Yes they are making possible breaking changes
[08:27:48] <FromDiscord> <Elegantbeef> It will be it's own language eventually, but takes time to make things
[08:28:17] <FromDiscord> <retkid> ~~Nim with brackets would be neat ~~
[08:28:23] <FromDiscord> <Rika> In reply to @retkid "it seems pretty melodramatic": im not sure if you've even seen what's happened then
[08:28:32] <FromDiscord> <Rika> In reply to @blans "I'm just not seeing": perhaps you have not been here for long enough
[08:28:33] <nrds> <06Prestige99> I agree about brackets tbh
[08:28:36] <FromDiscord> <ElegantBeef> Matrix bridge is having a time
[08:28:41] <FromDiscord> <Elegantbeef> Uhoh matrix slow down again
[08:29:06] <FromDiscord> <sOkam!> as long as you don't force the use of brackets
[08:29:08] <FromDiscord> <retkid> I want the option to have brackets. I like the languages that can do both
[08:29:10] <FromDiscord> <sOkam!> because that'
[08:29:15] <FromDiscord> <Rika> In reply to @retkid "I want the option": it existed before
[08:29:21] <FromDiscord> <ElegantBeef> Languages that do both are more tedious to maintain
[08:29:25] <FromDiscord> <Rika> removed because no one maintained/wanted to maintain it
[08:29:30] <FromDiscord> <Bloss> Scala
[08:29:43] <FromDiscord> <Rika> In reply to @blans "Scala": that does not change what beef stated
[08:29:48] <FromDiscord> <Rika> it is still more tedious to maintain
[08:29:49] <FromDiscord> <retkid> In reply to @Rika "im not sure if": I haven't where can i find the dramaposting
[08:29:59] <FromDiscord> <retkid> is it on the forum in december?
[08:30:02] <FromDiscord> <Rika> In reply to @retkid "I haven't where can": a lot of it is in issues and the older logs here
[08:30:08] <FromDiscord> <sOkam!> (edit) "that'" => "that's one of the biggest selling points of nim for me, that you are not forced to use them and make your code hard to read (its harder for me, for whatever reason, and thats a big one in my opinion)"
[08:30:14] <FromDiscord> <Rika> the forum is relatively new i believe
[08:30:27] <FromDiscord> <Rika> i mean the drama there is kinda new somewhat
[08:30:35] <FromDiscord> <Bloss> One thing I will say is the Nim dev team should be bigger
[08:31:12] <FromDiscord> <ElegantBeef> We all agree there should be hundreds of core devs, would make it so less tech debt exists
[08:31:14] <FromDiscord> <retkid> that is easier said then done?
[08:31:24] <FromDiscord> <Rika> of course
[08:31:45] <FromDiscord> <Bloss> I mean these guys are already kind of showing they have what it takes
[08:31:49] <FromDiscord> <retkid> we could all be core devs but how much of us actually wanna sit down and comb through the code beyond solving unexpected outputs in a module
[08:32:00] <FromDiscord> <ElegantBeef> I dont mind
[08:32:02] <FromDiscord> <Rika> In reply to @blans "I mean these guys": now how many people are working on scala
[08:32:07] <FromDiscord> <ElegantBeef> Compiler dev is fun!
[08:32:27] <FromDiscord> <Rika> i prolly wouldnt mind if i wanted to program recently but i dont
[08:33:01] <FromDiscord> <retkid> For me, I dont ever not want to code, sometimes I dont wanna think
[08:33:02] <FromDiscord> <retkid> lmao
[08:33:25] <FromDiscord> <retkid> In reply to @retkid "For me, I dont": English 100
[08:33:29] <FromDiscord> <Rika> half of me wants to code the other half wishes i could do things twice as fast
[08:33:42] <FromDiscord> <Rika> double negative
[08:33:45] <FromDiscord> <retkid> yea
[08:33:47] <FromDiscord> <Rika> do you want to code or not
[08:33:54] <FromDiscord> <retkid> im upset at my double negative
[08:33:56] <FromDiscord> <ElegantBeef> Eitherway I dont see the point of judging whether nimskull devs work on it, if it succeeds will be down to them
[08:34:03] <FromDiscord> <retkid> but I've decided not to edit here because of the IRC users
[08:34:22] <FromDiscord> <Bloss> I would really like it if there was a convergence because I don't think Nim would survive a fracture
[08:34:54] <FromDiscord> <retkid> Well, on the other hand, where do we go if Nim dies? Theres no language quite like it
[08:34:57] <FromDiscord> <retkid> Rust? eh
[08:35:05] <FromDiscord> <Rika> In reply to @blans "I would really like": that would need agreement between the 2nd and 1st team
[08:35:05] <FromDiscord> <ElegantBeef> How does Nim die?
[08:35:11] <FromDiscord> <retkid> In reply to @ElegantBeef "How does Nim die?": It doesn't
[08:35:12] <FromDiscord> <Rika> feel  free to try to mediate it
[08:35:23] <FromDiscord> <Bloss> No libraries
[08:35:24] <FromDiscord> <Rika> In reply to @retkid "Rust? eh": ada :OMEGALUL:
[08:35:27] <FromDiscord> <ElegantBeef> It's an OSS langauge it cannot die, people still write pascal
[08:35:38] <FromDiscord> <ElegantBeef> "No libraries" how does that happen, does C also die?
[08:35:55] <FromDiscord> <Bloss> Like part of using Nim now is investing in the fact that it will be better later
[08:36:05] <FromDiscord> <retkid> In reply to @blans "No libraries": We've dealt with that for 10 years, why do you think every library is written by @treeform
[08:36:27] <FromDiscord> <Bloss> If that goes away and also nothing is getting updated the reason to use it diminishes
[08:36:31] <FromDiscord> <Bloss> If not it just gets worse to use
[08:36:52] <FromDiscord> <Bloss> C might not get updates but compilers constantly do
[08:37:03] <FromDiscord> <ElegantBeef> How does it get worst to use?
[08:37:17] <FromDiscord> <Bloss> I mean it feels worse
[08:37:24] <FromDiscord> <retkid> If nim dies I will do all my programming in J
[08:37:56] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/947721764232888350/sl14.png
[08:37:58] <FromDiscord> <Rika> if nim dies i will program in apl
[08:38:09] <FromDiscord> <ElegantBeef> If Nim dies, i'll still write Nim
[08:38:18] <FromDiscord> <Bloss> Perl kinda died
[08:38:27] <FromDiscord> <Rika> not really
[08:38:37] <FromDiscord> <Bloss> Just a little bit maybe
[08:38:37] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[08:38:56] <FromDiscord> <Bloss> It's used less now and that's not necessarily because there's better alternatives
[08:39:14] <FromDiscord> <ElegantBeef> To me the simple fact is languages dont just up and die
[08:39:30] <FromDiscord> <sOkam!> In reply to @ElegantBeef "If Nim dies, i'll": +100
[08:39:40] <FromDiscord> <retkid> whats that one language that completely fractured and died
[08:39:40] <FromDiscord> <ElegantBeef> There are dialects of even relatively unpopular languages that people still write today
[08:39:44] <FromDiscord> <retkid> its like perl but not
[08:39:50] <FromDiscord> <Rika> python /s
[08:39:59] <FromDiscord> <ElegantBeef> In reply to @Rika "python /s": We could only hope
[08:40:01] <FromDiscord> <retkid> it has like 9 version and one of them has a butterfly
[08:40:01] <FromDiscord> <Rika> crystal?
[08:40:04] <FromDiscord> <Rika> oh raku
[08:40:07] <FromDiscord> <retkid> RAKU
[08:40:16] <FromDiscord> <Rika> the fucking butterfly man
[08:40:18] <FromDiscord> <Bloss> I just want Nim with Java ecosystem
[08:40:36] <FromDiscord> <retkid> > Nim‚Üµwith‚Üµ> Java
[08:40:39] <FromDiscord> <retkid> ??????
[08:40:41] <FromDiscord> <ElegantBeef> <https://github.com/search?q=language%3Araku> ded language
[08:40:45] <FromDiscord> <Rika> go write a jvm backend then üòõ
[08:41:05] <FromDiscord> <retkid> I've done Nim - Java interop but it didn't work for some reason
[08:41:07] <FromDiscord> <ElegantBeef> Or just write kotlin and cry
[08:41:14] <FromDiscord> <Rika> coat lean
[08:41:14] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:41:23] <FromDiscord> <retkid> In reply to @retkid "I've done Nim -": nobody here could figure it out
[08:41:28] <FromDiscord> <retkid> and I couldn't either
[08:41:28] <FromDiscord> <ElegantBeef> JNI is hell that's why
[08:41:30] <FromDiscord> <retkid> some weird segfault
[08:41:49] <FromDiscord> <retkid> In reply to @ElegantBeef "JNI is hell that's": lol I just wanted the nim sever to run separately from JNI and get around that hell
[08:41:55] <FromDiscord> <retkid> but it couldn't even do that
[08:42:10] <FromDiscord> <ElegantBeef> It should work so i blame you
[08:42:25] <FromDiscord> <retkid> it was going to just do complex math on nim and send it back
[08:42:35] <FromDiscord> <retkid> so it wouldn't hold up the game
[08:42:53] <FromDiscord> <Rika> no one with the nim jvm backend?
[08:42:55] <FromDiscord> <retkid> now you guys wanna see something cool
[08:42:58] <FromDiscord> <retkid> https://github.com/carp-lang/Carp
[08:43:16] <FromDiscord> <Rika> i dont give a carp bro wtf
[08:43:17] <FromDiscord> <ElegantBeef> YALD
[08:43:34] <FromDiscord> <retkid> carp is a lisp with no gc
[08:43:37] <FromDiscord> <ElegantBeef> Yet Another Lisp Dialect
[08:43:38] <FromDiscord> <retkid> lisp system lang
[08:44:03] <FromDiscord> <retkid> https://github.com/pperle/yald
[08:44:09] <FromDiscord> <Bloss> I don't think you can add new backends without forking
[08:44:23] <FromDiscord> <ElegantBeef> You can add new backend if you make a PR probably
[08:44:31] <FromDiscord> <retkid> In reply to @blans "I don't think you": ofc, you gotta merge it upstream
[08:44:34] <FromDiscord> <ElegantBeef> But a Java backend would be tremendously hard
[08:44:47] <FromDiscord> <Rika> its a jvm backend not a java backend
[08:44:52] <FromDiscord> <Rika> subtle difference
[08:44:58] <FromDiscord> <retkid> its a backend that runs on jvm
[08:44:58] <FromDiscord> <ElegantBeef> I suppose
[08:45:06] <FromDiscord> <retkid> which probably isn't as hard
[08:45:18] <FromDiscord> <Rika> still hard tho
[08:45:19] <FromDiscord> <retkid> but is almost certainly very annoying
[08:45:22] <FromDiscord> <ElegantBeef> We'd finally be able to run Nim on 8000trillion devices
[08:45:23] <FromDiscord> <Rika> not as hard as a java backend
[08:45:32] <FromDiscord> <Bloss> It's not like JS because you need a class file for each type
[08:45:47] <FromDiscord> <retkid> uh
[08:45:47] <FromDiscord> <Rika> idk how the jvm works so yes ill agree
[08:45:49] <FromDiscord> <ElegantBeef> Well there's also the issue that Nim has user defined object  and java doesnt
[08:45:54] <FromDiscord> <Rika> erlang vm backend when
[08:46:05] <FromDiscord> <Rika> im sorry these are some cursed suggestions
[08:46:07] <FromDiscord> <retkid> In reply to @Rika "idk how the jvm": in the .jar every class is a separate file and they reference each other
[08:46:24] <FromDiscord> <retkid> jvm is a mes
[08:46:26] <FromDiscord> <retkid> (edit) "mes" => "mess"
[08:46:28] <FromDiscord> <retkid> but its fine
[08:46:44] <FromDiscord> <Rika> nah its coarse
[08:47:00] <FromDiscord> <ElegantBeef> Rika going for the low brow jokes today
[08:47:06] <FromDiscord> <retkid> jvm is a perforated coarse language
[08:47:18] <FromDiscord> <retkid> not a lang, dont care
[08:47:25] <FromDiscord> <retkid> i need to focus on rewriting this code
[08:49:33] <FromDiscord> <lantos> rika is on like 24/7
[08:49:42] *** Joins: vicfred (~vicfred@user/vicfred)
[08:49:43] <FromDiscord> <ElegantBeef> Yea dont look at me
[08:49:49] <FromDiscord> <lantos> haha
[08:50:41] <FromDiscord> <lantos> actually is a GLM
[08:51:32] <FromDiscord> <ElegantBeef> "glm"
[08:51:36] <FromDiscord> <ElegantBeef> The fuck is a GLM
[08:51:50] <FromDiscord> <huantian> Good Luck Mate
[08:51:52] <FromDiscord> <lantos> general language model
[08:52:31] <FromDiscord> <Rika> me and beef are one and the same project, just differing models
[08:52:37] <FromDiscord> <Rika> thats also why we're online at different times
[08:52:47] <FromDiscord> <lantos> training off each other?
[08:53:27] <FromDiscord> <Rika> of course
[08:53:29] <FromDiscord> <Rika> of coarse
[08:53:49] <FromDiscord> <haxscramper> In reply to @retkid "There is no specifics": Specifics would look like a blame game, so we decided to keep it a bit more ambiguous instead of dumping page-long lost complaints and nitpicking on everything we don't like
[08:54:16] <FromDiscord> <haxscramper> (edit) "lost" => "list"
[08:55:04] <FromDiscord> <huantian> Oh huh nimskull reddit post
[08:55:19] <FromDiscord> <huantian> Anything new for the project or just getting the word out
[08:55:30] <FromDiscord> <ElegantBeef> Someone farming internet points
[08:55:34] <FromDiscord> <Bloss> Ambiguity just makes it incomprehensible though
[08:55:45] <FromDiscord> <huantian> In reply to @ElegantBeef "Someone farming internet points": Ah I see
[08:55:49] <FromDiscord> <Bloss> But it looks like you guys didn't want it to be seen
[08:56:03] <FromDiscord> <haxscramper> In reply to @blans "Ambiguity just makes it": There is a very unambiguous plan and list of issues that we made that we need to solve
[08:56:13] <FromDiscord> <lantos> elegantly starting beef
[08:56:18] <FromDiscord> <huantian> Also it seems as if Beef has leveled up to human status and is no longer a bot
[08:56:25] <FromDiscord> <retkid> In reply to @haxscramper "Specifics would look like": yes but if you actually gave me the end user idea changes wouldn't that help me want to support you more?
[08:56:30] <FromDiscord> <Elegantbeef> Is matrix still slow, this is test
[08:56:36] <FromDiscord> <Elegantbeef> Ah i can return to bot
[08:56:51] <FromDiscord> <lantos> pass me the butter
[08:57:09] <FromDiscord> <Elegantbeef> get your own fucking butter you lazy asshole
[08:57:14] <FromDiscord> <retkid> In reply to @lantos "pass me the butter": https://tenor.com/view/rick-and-morty-rick-morty-breakfast-robot-gif-5161060
[08:57:29] <FromDiscord> <Rika> haha butt
[08:57:34] <FromDiscord> <Bloss> I like issues being solved but not knowing why there's a fracture just leaves a bitter taste
[08:57:50] <FromDiscord> <haxscramper> In reply to @retkid "yes but if you": "end user idea" is a a"near-term development" roadmap as well as progress roadmap
[08:58:50] <FromDiscord> <lantos> elegant beef is a helpful agent that can elegantly formulate arguments and ideas. Occasionally starts beef out of no where but does so elegantly.‚Üµ‚Üµhuman: pass me the butter
[08:59:07] <FromDiscord> <Bloss> I guess knowing why would also leave a bitter taste but it sucks regardless
[08:59:21] <FromDiscord> <Bloss> I don't think it's you guys' fault
[08:59:51] <FromDiscord> <haxscramper> In reply to @blans "I like issues being": Ok, the fracture is here because we learned the hard way mainline does not care about refactoring the compiler, having a proper specification, providing quality error message, focusing on tooling (yeah, IC for nimsuggest and then there are ~30 commits for half a year from Araq), documentation generator is also broken, compiler codebase is absolutely undocumented
[09:00:08] <FromDiscord> <retkid> In reply to @haxscramper ""end user idea" is": Yes but almost none of those are language philosophy changes that cant be merged with the current idea of nim.
[09:00:24] <FromDiscord> <retkid> apart from the compiler section
[09:00:38] <FromDiscord> <haxscramper> The state of error messages from Araq is "I don't care", and recently "ok I give up and accept I don't like rust error style, PRs are welcome"
[09:01:09] <FromDiscord> <retkid> Then PR it, I too hate the giant meaningless error messages for when my types are slightly wrong
[09:01:22] <FromDiscord> <retkid> but, it doesn't seem like it cant be merged
[09:01:57] <FromDiscord> <retkid> maybe im ignorant, who knows
[09:03:29] <FromDiscord> <haxscramper> Ok, but there is a minor detail - "then PR It" is a half year worth of work, and around 20k+ lines added, and touches every single part of compiler
[09:03:46] <FromDiscord> <haxscramper> And also requires changing testament, because right now we don't test data
[09:03:55] <FromDiscord> <haxscramper> Right now we test pretty printed garbage
[09:04:10] <FromDiscord> <haxscramper> So any improvements to errors would require people to change dozens of tests
[09:05:15] <FromDiscord> <retkid> if ocaml can get multi threading, anything can happen
[09:05:40] <FromDiscord> <Rika> delegated to nim 2.0 kinda thing prolly
[09:05:52] <FromDiscord> <Rika> i can imagine nimskull somewhat merging with nim 2.0 if ever
[09:07:00] <FromDiscord> <Rika> its not gonna be nice, nim shouldnt have done the "every breaking change is on the next major version and who knows then that comes out" kinda deal
[09:07:09] <FromDiscord> <Rika> leads to pythonesque scenarios
[09:07:25] <FromDiscord> <huantian> I mean id love nimskull to be merged but I mean at a certain point Id just like it done somewhere
[09:08:44] <FromDiscord> <retkid> In reply to @Rika "its not gonna be": its called the python 3 technique and has NEVER gone wrong EVER
[09:09:01] <FromDiscord> <Rika> In reply to @Rika "leads to pythonesque scenarios": see
[09:09:23] <FromDiscord> <retkid> i read that and I thought i had something to do with fire
[09:09:28] <FromDiscord> <retkid> python became pyro
[09:09:30] <FromDiscord> <Rika> pythonembre
[09:09:31] <FromDiscord> <Rika> (edit) "pythonembre" => "pythonember"
[09:09:39] <FromDiscord> <retkid> Yea honestly
[09:09:45] <FromDiscord> <huantian> Also id be fine with more breaking changes but maybe that‚Äôs cus I dont have much Nim to maintain rn
[09:09:46] <FromDiscord> <lantos> pyroember
[09:09:52] <FromDiscord> <retkid> kinda not looking forward for 2.0 because It'll be really overwhelming
[09:10:05] <FromDiscord> <retkid> I'd rather not have all the changes dumped upon me
[09:10:12] <FromDiscord> <Rika> of course
[09:10:22] <FromDiscord> <Rika> a lot of change is overwhelming
[09:15:10] <FromDiscord> <haxscramper> 2.0 changes are not that drastic
[09:15:39] <FromDiscord> <haxscramper> I don't really know where people get that idea about nim 2.0 breaking everything there is to break
[09:15:46] <FromDiscord> <haxscramper> It just cleans up the stdlib
[09:16:02] <FromDiscord> <haxscramper> And sorts out experimental features
[09:16:13] <FromDiscord> <haxscramper> Like making case macros non experimental
[09:16:23] <FromDiscord> <haxscramper> Which I think is absolutely stupid but whatever
[09:23:29] <nrds> <06Prestige99> Why do you think that?
[09:29:43] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[09:29:56] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[09:31:17] <FromDiscord> <haxscramper> Case macros?
[09:31:54] <FromDiscord> <haxscramper> Or things I said about 2.0 changes in general
[09:33:56] <nrds> <06Prestige99> Case macros
[09:34:46] <FromDiscord> <haxscramper> I think case macros are useless because they don't provide any additional benefits to code readability or compactness over an existing macro solutions, but they overload sematics of basic language constructs
[09:35:07] <FromDiscord> <haxscramper> You can do everything using regular macro
[09:35:18] <FromDiscord> <haxscramper> Including using "of" for branches
[09:36:07] <FromDiscord> <haxscramper> Case macros don't work properly in generics, or at least I couldn't make them work as I want to for pattern matching
[09:39:35] <FromDiscord> <haxscramper> Also you can't have more than one case macro for the same type, at least not without hacks with overloads and distinct
[09:41:06] <FromDiscord> <luphoria> is nim like ada?
[09:41:29] <FromDiscord> <Elegantbeef> They have similar origins and type systems
[09:41:41] <FromDiscord> <Elegantbeef> Both are inspired by wirth languages
[09:42:08] <FromDiscord> <luphoria> ada ü•∞
[09:42:42] <FromDiscord> <luphoria> I have heard nothing negative about nim. planning on learning it
[09:42:56] <FromDiscord> <Elegantbeef> I say similar origins based off their inspiration, not history üôÇ
[09:43:08] <FromDiscord> <Bloss> In reply to @haxscramper "I think case macros": I thought the point of case statements is that they are optimized versions of if/elif ==, and case macros allow you to extend this optimization to other types
[09:43:16] <FromDiscord> <Elegantbeef> They're both very pascally
[09:43:20] <FromDiscord> <luphoria> oh, yea. ada and nim are gonna be very historically different
[09:43:41] <FromDiscord> <luphoria> does nim have endif?
[09:43:49] <FromDiscord> <Elegantbeef> No it uses significant white space
[09:44:05] <FromDiscord> <luphoria> ack hmm
[09:44:17] <FromDiscord> <Bloss> The only problem with Nim's syntax I have is the Pascal style declarations
[09:44:35] <FromDiscord> <Bloss> They are not very flexible
[09:44:41] <FromDiscord> <Elegantbeef> Eh i find them fine
[09:45:14] <FromDiscord> <Elegantbeef> What's your issue with them?
[09:45:41] <FromDiscord> <Bloss> For example, you have to indent after `object`, you can't use `;` inside objects for multiple fields on a single line
[09:46:09] <FromDiscord> <Elegantbeef> Sure why would you want to have multiple definitions on a single line if they dont share types
[09:46:30] <FromDiscord> <Elegantbeef> I mean i'd agree that semicolon should work, but it's also "Why"
[09:46:52] <FromDiscord> <Bloss> It just hinders the flow of writing
[09:47:07] <FromDiscord> <Elegantbeef> I dont agree, but it's subjective
[09:47:12] <FromDiscord> <Bloss> It's different from all the other Nim syntax so you have to enter this mode
[09:47:33] <FromDiscord> <Elegantbeef> It's identical to how i write code everywhere else, 1 statement per line
[09:48:13] <FromDiscord> <Elegantbeef> But anywho i do agree `;` should probably work in typedefs
[09:48:23] <FromDiscord> <Elegantbeef> Not that i'd ever use it or like to see it
[09:48:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/FBG
[09:52:33] <FromDiscord> <retkid> https://github.com/yglukhov/nimpy/tree/master/tests
[09:52:36] <FromDiscord> <retkid> these tests dont work for me
[09:52:41] <FromDiscord> <retkid> anyone else?
[09:52:51] <FromDiscord> <Rika> It should work, I agree
[09:53:18] <FromDiscord> <retkid> the better joke is "what would work, for you"
[09:53:29] <FromDiscord> <Elegantbeef> They have a CI so probably should wok yes
[09:53:34] <FromDiscord> <Elegantbeef> Work even
[09:54:58] <FromDiscord> <Rika> Sorry my brain lagged I mean the semicolon thing should work
[09:55:19] <FromDiscord> <retkid> i just wanna figure import local python files without putting them into my pylib or putting some disgusting code in there
[09:55:56] <FromDiscord> <Elegantbeef> Use memfiles to that load your python modules so then you can import them
[09:56:04] <FromDiscord> <Elegantbeef> Afaict nimpy uses paths to load files
[09:58:01] <FromDiscord> <Elegantbeef> Running tests i get `Unexpected error encountered: <type 'exceptions.ImportError'>: No module named numpy`
[09:58:11] <FromDiscord> <retkid> yea
[09:58:13] <FromDiscord> <Elegantbeef> Probably due to my python setup
[09:58:20] <FromDiscord> <retkid> is numpy installed
[09:58:23] <FromDiscord> <retkid> ü§î
[09:59:05] <FromDiscord> <Elegantbeef> My system `python` is 2.7 but my system `pip` is for python 3
[09:59:09] <FromDiscord> <Elegantbeef> So hell yea i fucking love python
[09:59:12] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[09:59:21] <FromDiscord> <retkid> say what you want nimble never did this shit
[09:59:45] <FromDiscord> <retkid> y'know, javas package manager never gave me problems
[09:59:56] <FromDiscord> <retkid> cant have problems if you dont have one >:)
[10:00:57] <FromDiscord> <Elegantbeef> Yea seems i cant get pip for python 2
[10:01:54] <FromDiscord> <Elegantbeef> So 10/10 language
[10:02:00] <FromDiscord> <retkid> but why are you using python 2
[10:02:10] <FromDiscord> <Elegantbeef> Cause i dont fucking use python
[10:02:14] <FromDiscord> <Elegantbeef> It's what my system installed
[10:02:26] <FromDiscord> <retkid> i use python because the selenium binding sucks
[10:02:33] <FromDiscord> <retkid> and interop with nim is easier in py then JS
[10:10:22] <FromDiscord> <congusbongus> That‚Äôs the distros fault‚ÜµIirc newest Ubuntu‚Äôs finally default to Python 3
[10:10:41] <FromDiscord> <Elegantbeef> It's called satire
[10:10:51] <FromDiscord> <retkid> i installed arch today
[10:10:55] <FromDiscord> <retkid> it came without python
[10:28:37] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 240 seconds)
[10:51:03] <FromDiscord> <haxscramper> In reply to @blans "I thought the point": No, the point of case statement macros is that you can write a macro that replaces "case" implementation
[10:51:19] <FromDiscord> <haxscramper> it does not provide any optimizations unless you implement them yourselves
[10:51:39] <FromDiscord> <haxscramper> pattern matching from fusion does not have any optimizations unless someone adds them
[10:52:27] <FromDiscord> <dangbinghoo> hi, pro, what's the `fromJsonHook`  prototype for type of `array of char`  looks like?  ex. if my input param type is `array[10, char],  array[20, char]`
[10:52:52] <FromDiscord> <Elegantbeef> `openArray[char]`?
[10:56:36] <FromDiscord> <Bloss> In reply to @haxscramper "it does not provide": Yes, my idea was that they are made for user optimizations over certain types
[10:56:55] <FromDiscord> <Bloss> Since the manual underlines that you are supposed to overload it
[10:56:59] <FromDiscord> <Bloss> With types
[10:57:54] <FromDiscord> <Bloss> In reply to @dangbinghoo "hi, pro, what's the": Not sure how `fromJsonHook` works but maybe you can make it generic like `proc fromJsonHook[I](input: array[I, char])`
[10:58:52] <FromDiscord> <Bloss> In reply to @haxscramper "No, the point of": I don't get why the manual would specifically point out that you can overload it with types if this is the case
[10:59:56] <FromDiscord> <dangbinghoo> yeah,  I'm converting  a json-str to jsonNode and then convert a JString to  C land cstring,  currently, `fromJson` in  jsonutils is dealing this : `of JString: a = b.str` which is giving a GCed string memory to cstring, it's wrong.
[11:01:04] <FromDiscord> <dangbinghoo> so, I'm think that, I can convert `Jstring` to C land's  something like   `uchar cstr[16]`
[11:01:57] <FromDiscord> <dangbinghoo> In reply to @blans "Not sure how `fromJsonHook`": hi, so, the I need to be predictable in compile-time?
[11:02:09] <FromDiscord> <dangbinghoo> (edit) "I" => "`I`"
[11:02:23] <FromDiscord> <Elegantbeef> Of course it does
[11:02:37] <FromDiscord> <Elegantbeef> That C array is static sized
[11:03:05] <FromDiscord> <dangbinghoo> ok, I will try it, thanks!
[11:03:18] <FromDiscord> <Elegantbeef> The openarray should also work though
[11:04:28] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "The openarray should also": OK
[11:04:50] <FromDiscord> <Bloss> I guess you could just make your own macro instead of overriding `case` but if you think of `case` like an operator then it's like operator overloading
[11:06:09] *** Joins: mahlon (~mahlon@martini.nu)
[11:06:55] <FromDiscord> <haxscramper> I wouldn't be especially thrilled to overload + into a macro that has completely different semantics
[11:07:08] <FromDiscord> <haxscramper> From regular addition
[11:08:01] <FromDiscord> <Bloss> I guess but in practice you can make it predictable
[11:08:18] <FromDiscord> <Bloss> It's obviously not a super crucial feature
[11:08:43] <FromDiscord> <haxscramper> Or just use a different name for things that function completely differently
[11:09:06] <FromDiscord> <haxscramper> Regular case is an O(1) operation on ordinal values and strings
[11:09:31] <FromDiscord> <haxscramper> Pattern matching case is an O(n) for any structured value and has a complex DSL
[11:09:39] <FromDiscord> <Bloss> Yeah I assumed the macro is supposed to also generate an O(1) operation for custom types
[11:10:34] <FromDiscord> <Bloss> Like I assumed that was the purpose, so you can optimize if/elif == structures for your own custom types
[11:10:44] <FromDiscord> <Bloss> The same way Nim does for numbers and strings
[11:10:56] <FromDiscord> <Bloss> It just happens that the only thing that can do that is macros
[11:11:03] <FromDiscord> <haxscramper> String uses strcmp inside
[11:11:22] <FromDiscord> <haxscramper> The manual says hashing but I've never actually seen it
[11:11:38] <FromDiscord> <haxscramper> Maybe this was changed since then
[11:12:38] <FromDiscord> <Bloss> I don't see how the feature could be compatible with pattern matching at all
[11:12:53] <FromDiscord> <Bloss> But I guess I still wouldn't miss it if it wasn't in the language
[11:13:27] <FromDiscord> <Bloss> I mean pattern matching also includes regular assignment
[11:13:29] <FromDiscord> <haxscramper> I can add trillion layers of compiles() checks and use hashing
[11:13:37] <FromDiscord> <Bloss> Like with `let`
[11:14:37] <FromDiscord> <Bloss> Do you plan on adding pattern matching to NimSkull?
[11:17:57] *** Joins: PMunch (~PMunch@user/pmunch)
[11:21:22] <FromDiscord> <haxscramper> Eventually yes
[11:21:26] <FromDiscord> <haxscramper> I hop
[11:21:29] <FromDiscord> <haxscramper> Hope
[11:21:41] <FromDiscord> <haxscramper> Also Result/Either and more functional stuff
[11:21:57] <FromDiscord> <haxscramper> Leorize's union
[11:22:04] <FromDiscord> <haxscramper> But for now that's not a priority
[11:23:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[11:28:08] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QYv
[11:28:18] <FromDiscord> <retkid> that
[11:28:21] <FromDiscord> <retkid> certainly is code
[11:28:38] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3QYw
[11:28:58] <FromDiscord> <Elegantbeef> Always passes by copy in procedure calls
[11:29:01] <PMunch> It forces it to be passed by copy
[11:29:02] <FromDiscord> <dangbinghoo> compiles this shows that:  my `fromJsonHook` was not be called?
[11:29:37] <FromDiscord> <retkid> In reply to @Elegantbeef "Always passes by copy": so it never passes by reference and stops side affects?
[11:29:41] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QYx
[11:29:52] <FromDiscord> <retkid> In reply to @dangbinghoo "this is coverted from": that explains why it looks very weird
[11:30:11] <FromDiscord> <Elegantbeef> Nim has `var` references for mutabillity so it's unrelated to side effects
[11:30:24] <FromDiscord> <Elegantbeef> It's about overriding optimizations and ensuring you get a copy
[11:30:32] <FromDiscord> <retkid> hrrr
[11:30:33] <FromDiscord> <retkid> ok
[11:31:45] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QYB
[11:32:57] <FromDiscord> <dangbinghoo> it seems my `fromJsonHook` were not be picked when compiling. I got `Error: unhandled exception: a.len == b.len failed: (10, 0, "array[0..9, char]") [ValueError]`
[11:33:36] <FromDiscord> <Elegantbeef> It's not due to using a generic
[11:34:15] <FromDiscord> <Elegantbeef> That's not it
[11:34:39] <FromDiscord> <Elegantbeef> \I take it back perhaps it is
[11:35:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QYE
[11:36:10] <FromDiscord> <Elegantbeef> Thought that might be for the string, now that i think about  it
[11:36:30] <FromDiscord> <Elegantbeef> Ah nvm that's a `cstring`
[11:38:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QYF
[11:41:43] <FromDiscord> <Elegantbeef> `nimble install fusion`
[11:41:43] <FromDiscord> <fbpyr> for doing a fetch in js-frontend I found https://nim-lang.github.io/fusion/src/fusion/js/jsxmlhttprequest (hoping this is module to use for this use-case(?)), but when I try to import `import src/fusion/js/jsxmlhttprequest` I get `Error: cannot open file: src/fusion/js/jsxmlhttprequest` from the compiler.‚Üµon attempt to nimble `install ` I get \`Error\: Package not found.\`\`‚Üµwhat would be the canonical way to use this package?
[11:42:14] <FromDiscord> <fbpyr> ahh thank you!!
[11:42:14] <FromDiscord> <Elegantbeef> no problem
[11:42:36] <FromDiscord> <Elegantbeef> There is also https://nim-lang.org/docs/jsfetch.html
[11:43:27] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QYI
[11:44:58] <FromDiscord> <fbpyr> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\:  thank you, for the pointer, jsfetch I tried before but got errors on `Error: undeclared identifier: 'await'` so I though I might try another route.. ü§î
[11:45:20] <FromDiscord> <Elegantbeef> did you `import std/[jsfetch, jsasync]`?
[11:45:31] <FromDiscord> <Elegantbeef> sorry `asyncjs`
[11:46:25] <FromDiscord> <fbpyr> sent a code paste, see https://play.nim-lang.org/#ix=3QYJ
[11:47:06] <FromDiscord> <Elegantbeef> I just compiled the example fine
[11:47:31] <FromDiscord> <fbpyr> ah? ok - then I need to retry.. thx!
[11:48:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[11:50:44] <FromDiscord> <fbpyr> sent a code paste, see https://paste.rs/YMU
[11:55:11] <FromDiscord> <retkid> I haven't done much async in nim, only in python and js
[11:55:42] <FromDiscord> <retkid> whats the best way to request like 20 things then wait for them all to finish
[11:56:14] <FromDiscord> <retkid> my idea was to make an async proc, have it append its output to a seq and wait for the seq to be the expected size
[11:56:47] <FromDiscord> <Elegantbeef> Yea await isnt inside asyncjs, so no fucking clue where `await` on the js async comes from
[11:56:53] <FromDiscord> <Rika> Sequence of futures, use the ‚Äúall‚Äù from async futures
[11:57:27] <FromDiscord> <krautbyte> Yo so what does this language do?
[11:57:37] <FromDiscord> <retkid> In reply to @krautbyte "Yo so what does": nim?
[11:57:45] <FromDiscord> <krautbyte> Yeah
[11:57:45] <FromDiscord> <Rika> Pretty much anything
[11:57:49] <FromDiscord> <retkid> Nim does math
[11:57:56] <FromDiscord> <retkid> its run on a computer
[11:57:59] <FromDiscord> <retkid> it does computations
[11:58:06] <FromDiscord> <retkid> these computations can do almost anything
[11:58:09] <FromDiscord> <krautbyte> Great, the next JS clone? Or is there some advances to it?
[11:58:18] <FromDiscord> <Rika> BRB making a mechanical machine that can run Nim code
[11:58:28] <FromDiscord> <retkid> In reply to @Rika "BRB making a mechanical": already been done
[11:58:41] <FromDiscord> <Elegantbeef> Well it's JS backend is one part of it
[11:58:42] <FromDiscord> <Rika> Which is
[11:58:45] <FromDiscord> <retkid> In reply to @krautbyte "Great, the next JS": well, its completely nothing at all like JS whatsoever but y'know
[11:58:51] <FromDiscord> <retkid> In reply to @Rika "Which is": a cpu
[11:58:51] <FromDiscord> <Elegantbeef> Nim compiles to C/C++/JS
[11:59:27] <FromDiscord> <Elegantbeef> Ironically how the fuck does one use `asyncjs`
[11:59:37] <FromDiscord> <Elegantbeef> Unironically\
[11:59:45] <FromDiscord> <retkid> you dont
[11:59:46] <FromDiscord> <fbpyr> yep, me and my ide are puzzled as well.. ü§î
[11:59:56] <FromDiscord> <Elegantbeef> Await isnt even inside of that module
[12:00:01] <FromDiscord> <Elegantbeef> Where the hell does one get `await` for js
[12:00:12] <FromDiscord> <mronetwo> sent a code paste, see https://play.nim-lang.org/#ix=3QYN
[12:00:20] <FromDiscord> <fbpyr> and await is used there a couple of times..
[12:00:21] <FromDiscord> <Elegantbeef> `let a = ["one", "two"]`
[12:00:31] <FromDiscord> <retkid> In reply to @mronetwo "Quick question, hope it's": let a = @["one, "two"]
[12:00:34] <FromDiscord> <Elegantbeef> There is not reverse inference in Nim
[12:00:38] <FromDiscord> <retkid> elegant beef types faster than me
[12:00:38] <FromDiscord> <retkid> :(
[12:00:43] <FromDiscord> <mronetwo> In reply to @retkid "let a = @["one,": that's a seq right?
[12:00:44] <FromDiscord> <Elegantbeef> And more correctly
[12:00:49] <FromDiscord> <retkid> yes but you dont need it
[12:01:00] <FromDiscord> <retkid> listen to beef
[12:01:03] <FromDiscord> <Elegantbeef> Use my code and be merry
[12:01:08] <FromDiscord> <retkid> ^
[12:01:22] <FromDiscord> <retkid> my code is pretty uh, cool
[12:01:23] <FromDiscord> <retkid> right beef
[12:01:35] <FromDiscord> <Elegantbeef> "wrong" is what i'd say
[12:01:40] <FromDiscord> <Elegantbeef> Hurts me on so many levels
[12:01:55] <FromDiscord> <Rika> @@@@@@@@@@@@@@@
[12:01:58] <FromDiscord> <retkid> @@@@@@@@
[12:02:00] <FromDiscord> <Rika> Does this hurt you more
[12:02:07] <FromDiscord> <Elegantbeef> Yes
[12:02:11] <FromDiscord> <Rika> Good
[12:02:26] <FromDiscord> <retkid> what about this
[12:02:32] <FromDiscord> <Elegantbeef> @juan_carlos\:  I think you'd know, where the hell is js's `await` written?
[12:02:40] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3QYP
[12:03:01] <FromDiscord> <Elegantbeef> Oh god i'm dumb
[12:03:01] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3QYP" => "https://play.nim-lang.org/#ix=3QYQ"
[12:03:02] <FromDiscord> <Elegantbeef> I figured it out
[12:03:09] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3QYQ" => "https://play.nim-lang.org/#ix=3QYP"
[12:03:20] <FromDiscord> <Rika> You need a type somewhere
[12:03:20] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3QYR
[12:03:27] <FromDiscord> <retkid> In reply to @Rika "Can‚Äôt work": I've accepted this but the idea is what must hurt him
[12:03:32] <FromDiscord> <Elegantbeef> [fbpyr](https://matrix.to/#/@fbpyr:tchncs.de)\: the JS async method is done using async procedures, so to await the procedure needs to be marked `async`
[12:03:41] <FromDiscord> <Rika> In reply to @retkid "I've accepted this but": It is the same with just [] actually
[12:04:18] <FromDiscord> <mronetwo> ok thanks guys
[12:04:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/gZE
[12:04:55] <FromDiscord> <Elegantbeef> The async macro does what's required for async js, i was missing this forever ago and just figured it out
[12:05:21] <FromDiscord> <fbpyr> ahaa! thank you [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org) üôÇ will try..
[12:05:34] <FromDiscord> <Elegantbeef> Please for the love of all things good and holy someone make a PR that adds that little nifty information to `asyncjs`
[12:05:42] <FromDiscord> <retkid> ~~is cookies Cookie or Cookies
[12:05:51] <FromDiscord> <mronetwo> sent a code paste, see https://play.nim-lang.org/#ix=3QYS
[12:05:55] <FromDiscord> <retkid> uh
[12:06:17] <FromDiscord> <Elegantbeef> No there is not anyway to keep the type but omit count, Nim doesnt do reverse inference like i said
[12:06:18] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3QYT
[12:06:22] <FromDiscord> <retkid> let me make sure that works
[12:06:53] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3QYT" => "https://play.nim-lang.org/#ix=3QYU"
[12:06:55] <FromDiscord> <retkid> its var
[12:07:18] <FromDiscord> <mronetwo> got you, thanks
[12:07:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QYV
[12:08:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/R3f
[12:08:38] <FromDiscord> <Elegantbeef> Which emits an array of `(string , string)`
[12:09:46] <FromDiscord> <mronetwo> nice, thanks again üôÇ
[12:24:25] <FromDiscord> <fbpyr> sent a code paste, see https://paste.rs/Pmk
[12:24:52] <FromDiscord> <Rika> No that means that the window on load is a sync proc
[12:24:55] <FromDiscord> <Rika> And not async
[12:25:20] <FromDiscord> <fbpyr> ah ok, await the window.onload then?
[12:25:39] <FromDiscord> <Elegantbeef> No type safety is winning here
[12:26:26] <Amun-Ra> what am I doing wrong in that generic `init2` declaration? https://play.nim-lang.org/#ix=3QUG
[12:26:38] <FromDiscord> <Elegantbeef> You basically need to call `doFetch` sync instead of async
[12:26:45] <FromDiscord> <fbpyr> ah ok, awaiting would not make sense because it is sync, sry that took a bit..
[12:28:40] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3QZ1 amun here's a "workaround"
[12:29:02] <FromDiscord> <Elegantbeef> You then can do `typeof(t).T`
[12:29:16] <FromDiscord> <Elegantbeef> Also are you looking at versioning Nim types using an enum and migrating between them?
[12:29:24] <FromDiscord> <fbpyr> but then the `fetch` does not work anymore?
[12:29:39] <FromDiscord> <Elegantbeef> What i'm saying is fetch needs to be sync
[12:29:56] <FromDiscord> <fbpyr> ah I see. and it is not. hmm..
[12:30:52] <FromDiscord> <Elegantbeef> I do not know how to sync wait for a procedure in js
[12:31:08] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QZ6
[12:31:10] <FromDiscord> <fbpyr> so is then there a way to do `window.onload` in async instead?
[12:31:18] <FromDiscord> <Elegantbeef> Nope
[12:31:19] <Amun-Ra> Elegantbeef: nice, thank you; I'm writing wrappers for gtk2 and gtk3 libraries
[12:31:30] <FromDiscord> <fbpyr> hmm.. bummer.
[12:31:44] <FromDiscord> <Elegantbeef> The solution is to waitfor the `fetch` proc
[12:31:55] <FromDiscord> <dangbinghoo> (edit) "https://play.nim-lang.org/#ix=3QZ6" => "https://paste.rs/otU"
[12:32:10] <FromDiscord> <fbpyr> I see.
[12:32:57] <FromDiscord> <Elegantbeef> Dont know if we can just cast the proc
[12:33:04] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[12:33:18] <FromDiscord> <fbpyr> hmm `Error: undeclared identifier: 'waitFor'`
[12:33:21] <FromDiscord> <Elegantbeef> `window.onload = cast[proc(e: Event){.closure.}](on_load)` may work
[12:33:22] <FromDiscord> <dangbinghoo> sent a code paste, see https://paste.rs/9tt
[12:33:28] <FromDiscord> <fbpyr> ah ok it was not meant literally.. üôÇ
[12:34:15] <FromDiscord> <fbpyr> unfortunately that gives `Error: expression cannot be cast to proc (e: Event){.closure.}`
[12:35:07] <FromDiscord> <fbpyr> is there some executor to which I would need to pass the async aparatus?
[12:35:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3QZ7
[12:35:50] <FromDiscord> <Elegantbeef> There you go dangbinghoo
[12:36:35] <FromDiscord> <Elegantbeef> shit that should be `0..model.high`
[12:38:00] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QZ8
[12:38:13] <FromDiscord> <Elegantbeef> It does not
[12:39:03] <FromDiscord> <Elegantbeef> i suppose you might be able to do `cast[array[10, char]]("abc\0")`
[12:39:31] <FromDiscord> <dangbinghoo> ok, thanks
[12:40:05] <FromDiscord> <Elegantbeef> I dont think having onload call a async procedure makes sense fbpyr, but no clue. Hopefully someone with a brain with the JS backend pops on
[12:42:13] <FromDiscord> <fbpyr> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\:  thank you! I will try to see, if I can get it to run without the on\_load..
[12:43:15] <FromDiscord> <fbpyr> if I compile it without it, currently the not called procs get optimized/compiled out though..
[12:43:26] <FromDiscord> <dangbinghoo> And, bother you again:
[12:43:31] <FromDiscord> <fbpyr> I feel I got closer though..
[12:43:39] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QZa
[12:44:02] <FromDiscord> <Elegantbeef> `cast[string](a)` is 100% wrong
[12:44:19] <FromDiscord> <dangbinghoo> `toJsonHook `  not be called
[12:46:25] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "`cast[string](a)` is 100% wrong": hmm, not find a way to do this.
[12:46:44] <FromDiscord> <Elegantbeef> The issue is the `var openArray[char]` it is not immutable
[12:47:05] <FromDiscord> <Elegantbeef> Well Nim strings are not arrays, they're heap allocated so casting `array` to `string` is 100% wrong
[12:48:04] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "The issue is the": so, need to new a string, and copy array element each one to string's data ?
[12:56:11] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3QZd
[13:00:20] <FromDiscord> <Elegantbeef> Whoops i left sugar in
[13:00:56] <FromDiscord> <dangbinghoo> does `proc add(x: var string; y: openArray[char]) ` in `std/strbasics` make help for convert "array[N, char]" to a string?
[13:01:29] <FromDiscord> <Elegantbeef> It's what i implemented basically
[13:01:30] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[13:01:44] <FromDiscord> <fbpyr> sent a code paste, see https://play.nim-lang.org/#ix=3QZf
[13:01:48] <FromDiscord> <Elegantbeef> thought it's probably not `\0` aware
[13:02:00] *** Joins: shalokshalom (~quassel@2a02:1748:dd5e:7f60:b5dc:871:61:d7)
[13:02:24] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "thought it's probably not": yes,  thanks for you help.
[13:03:08] <FromDiscord> <Elegantbeef> No problem
[13:24:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[14:19:52] <NimEventer> New thread by Mardiyah: Need variable to be constant on runtime without initialization at declaring, see https://forum.nim-lang.org/t/8964
[14:23:17] <FromDiscord> <Rika> how would that work...
[14:29:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:32:56] <FromDiscord> <demotomohiro> Just use if expression to initialize let variable
[14:35:23] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[14:44:57] <FromDiscord> <ajusa> In reply to @NimEventer "New thread by Mardiyah:": Potentially the global pragma? This guy has some strange questions though
[14:51:29] <FromDiscord> <enthus1ast> ah i misread
[14:51:40] <FromDiscord> <ajusa> Nah your answer makes sense to me
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:08:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[16:22:40] <PMunch> @ajusa, pretty sure it's a language barrier thing
[16:28:16] <FromDiscord> <ajusa> In reply to @PMunch "<@102899813149855744>, pretty sure it's": I don't think the phrasing is all that strange, more of the content? Language barriers can be weird though
[16:29:32] <PMunch> The content?
[16:30:00] <PMunch> I guess it's a bit odd to wonder how to assign let statements to variables if you didn't know that was a possible feature
[16:30:49] <PMunch> What I find interesting though is that except for the goto question all their questions can be answered super easily
[16:30:59] <PMunch> Just goes to show how flexible Nim is I guess :)
[16:31:39] <FromDiscord> <retkid> Code as data without compiler magic when üòî
[16:32:06] <PMunch> Sometime back in the 70's I think
[16:32:07] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:32:23] <PMunch> Well, I guess it depends on your definition of compiler magic :P
[16:32:28] <PMunch> What're you trying to do?
[16:32:33] <FromDiscord> <retkid> I mean In nim
[16:32:44] <FromDiscord> <retkid> I mean literally {.magic.}
[16:33:35] <FromDiscord> <retkid> In reply to @PMunch "Sometime back in the": I feel like most questions can be answered with this
[16:34:13] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[16:34:38] <PMunch> Aah right, I mean some of the {.magic.} stuff could probably be implemented as macros
[16:36:15] <FromDiscord> <retkid> I've never programmed with it myself
[16:36:28] <FromDiscord> <retkid> i just see it in verbose compiler code and it confuses me
[16:40:22] <FromDiscord> <ynfle> In reply to @retkid "i just see it": `{.magic.}` means "the logic is implmented in the compiler directly"
[16:53:33] <FromDiscord> <demotomohiro> `+`, `-` and `` operators for int or float are procedures with `{.magic.}`
[16:58:04] <FromDiscord> <ynfle> In reply to @demotomohiro "`+`, `-` and `*`": Yup, that means they can't be passed as a proc value to map, for example,
[16:58:07] <FromDiscord> <ynfle> (edit) "example," => "example"
[17:09:13] <FromDiscord> <retkid> pargma to copy a var on all threads
[17:09:26] <FromDiscord> <retkid> 8pragma
[17:09:28] <FromDiscord> <retkid> pragma
[17:09:45] <FromDiscord> <retkid> {.threadvar.}]
[17:11:08] <PMunch> Huh?
[17:11:15] <FromDiscord> <Rika> ?
[17:12:09] <FromDiscord> <fbpyr> is there such thing in nim like gopackr in go? meaning\: ‚Üµthe executable can "carry" additional compressed files (e.g.  dll) with it and unpack+use them when being run?
[17:12:42] <FromDiscord> <fbpyr> ^^ this would be in the context of a win pc
[17:13:23] <PMunch> @fbpyr, you can `readfile` during compilation and then just write them out on runtime
[17:16:54] <PMunch> There might be a library for it, but I'm not 100% sure
[17:21:42] <FromDiscord> <enthus1ast> [fbpyr](https://matrix.to/#/@fbpyr:tchncs.de)\: just use a const variable
[17:21:52] <FromDiscord> <enthus1ast> and staticRead
[17:22:36] <FromDiscord> <enthus1ast> but if you'r application depend on the dll, and you've used the default nim ffi, then it will not work.
[17:22:53] <FromDiscord> <enthus1ast> it will check and load the dll before your application code
[17:23:22] <FromDiscord> <retkid> so i have a sequence of  futures
[17:23:30] <FromDiscord> <retkid> how do i await for all of them then get their value?
[17:24:15] <FromDiscord> <retkid> well more how do i wait for all of them, don't you just do .read() to get the enclosed var
[17:24:45] <PMunch> You can use this: https://nim-lang.org/docs/asyncfutures.html#all%2Cvarargs%5BFuture%5BT%5D%5D
[17:24:58] <PMunch> To create one new future that will complete once all the futures are completed
[17:25:39] <FromDiscord> <retkid> so my out array should be a future itself?
[17:25:57] <FromDiscord> <retkid> Future[seq[Future[seq[string]]]
[17:26:11] <FromDiscord> <retkid> (edit) "Future[seq[Future[seq[string]]]" => "Future[seq[Future[seq[string]]]]"
[17:26:32] <FromDiscord> <ynfle> No. Futue[seq[seq[string]]] I think
[17:27:12] <FromDiscord> <retkid> then... how do i add to it if its a... future?
[17:28:00] <FromDiscord> <ynfle> ?
[17:28:07] <FromDiscord> <ynfle> Concrete code is easier to talk about
[17:28:44] <FromDiscord> <retkid> if my output array is a future
[17:28:54] <FromDiscord> <retkid> then how do i add the future to it that i have to wait upon
[17:29:32] <FromDiscord> <retkid> sent a code paste, see https://paste.rs/lN9
[17:29:44] <FromDiscord> <retkid> uh i dont know how i forgot you use # and not //
[17:29:47] <FromDiscord> <retkid> but its there now
[17:29:51] <FromDiscord> <ynfle> x.add await futureine
[17:29:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:30:07] <FromDiscord> <ynfle> (edit) "futureine" => "futureint"
[17:30:45] <FromDiscord> <retkid> yea this aint workin in my code or in my brain
[17:30:50] <FromDiscord> <retkid> this is why I dont usually do async
[17:32:18] <FromDiscord> <retkid> in fact i dare say it makes no sense at all.
[17:32:32] <FromDiscord> <retkid> why is there no example.
[17:32:58] <FromDiscord> <ynfle> Provide for us to help you with
[17:33:04] <FromDiscord> <ynfle> (edit) "Provide ... for" 03added "code"
[17:33:15] <FromDiscord> <ynfle> Concrete code is easier to talk about
[17:33:41] <PMunch> @retkid, basically if you have an array of ten futures you want to await you should be able to do `await all(myFutures)`
[17:34:09] <FromDiscord> <retkid> that makes much more sense
[17:34:11] <PMunch> If the futures there are Future[string] the result of that call will be seq[string]
[17:35:43] <FromDiscord> <retkid> how can i use await outside of an async function because this is a tad bit confusing
[17:38:19] <FromDiscord> <ynfle> In reply to @retkid "how can i use": awaitfor
[17:38:25] <FromDiscord> <ynfle> (edit) "awaitfor" => "`awaitFor`"
[17:38:40] <PMunch> waitFor*
[17:40:32] <PMunch> You can't use await outside an async procedure, because it would try to return the control flow (this is what await does, returns control flow to the caller on the promise that it will get it back once the thing it's waiting for is done). `waitFor` on the other hand doesn't return the control but rather just loops the async dispatcher until the thing it is waiting for is complete
[17:41:10] <FromDiscord> <retkid> honestly my least favorite part of nim is the async and thread implementation and having to write abstract classes for basic things
[17:42:10] <FromDiscord> <retkid> it often seems overly complicated and infuriating and needlessly so.
[17:42:12] <FromDiscord> <retkid> but what do i know
[17:43:37] <FromDiscord> <ynfle> Which language do you understand async in?
[17:43:58] <FromDiscord> <retkid> JS's promises are a bit better
[17:44:00] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3R07
[17:44:22] <FromDiscord> <retkid> Kotlin's stuff is pretty ok iirc
[17:44:40] <FromDiscord> <ynfle> sent a code paste, see https://paste.rs/Ogx
[17:45:04] <FromDiscord> <retkid> yes but don't you ever look at this stuff
[17:45:06] <FromDiscord> <retkid> and go
[17:45:19] <FromDiscord> <fbpyr> thank you [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz)  - exactly, the idea was if I could ship it with a dll that it could run.. ü§î
[17:45:22] <FromDiscord> <retkid> "surely there is a better way" https://media.discordapp.net/attachments/371759389889003532/947859527313788998/unknown.png
[17:45:35] <FromDiscord> <retkid> then having to write out stuff like seq[Future[string]]
[17:45:48] <FromDiscord> <enthus1ast> i would just put everything in a folder and zip it
[17:45:52] <FromDiscord> <enthus1ast> OR use nsis
[17:46:13] <FromDiscord> <fbpyr> nsis? ok will look up - thx!
[17:46:14] <FromDiscord> <enthus1ast> OR create a wrapper that just dumps the files and call you'r real executable
[17:46:27] <FromDiscord> <fbpyr> ahh right - I could layer it..
[17:46:28] <FromDiscord> <enthus1ast> best imho is zip or nsis
[17:46:40] <FromDiscord> <auxym> In reply to @PMunch "Sometime back in the": well, the original lisp is from 1958, apparently üòõ
[17:51:23] <FromDiscord> <retkid> either way
[17:51:29] <FromDiscord> <retkid> async was not the right solution i should have threaded it
[17:51:54] <FromDiscord> <ynfle> sent a code paste, see https://paste.rs/U0u
[17:52:03] <FromDiscord> <ynfle> But that wasn't what you asked.
[17:53:07] <FromDiscord> <ynfle> Nim's async works like this. If you want to make a proc async, you wrap the return value in future signifying that you it has to be `await`ed. Then, anytime you want to convert from a `Future` to a "real" value you use await or all
[17:59:06] <FromDiscord> <retkid> yea I know how it works
[17:59:20] <FromDiscord> <retkid> it just isn't a good system
[17:59:34] <PMunch> What are you actually trying to do?
[18:00:16] <FromDiscord> <ynfle> I find it easier to use than javascript's
[18:00:26] *** Joins: arkurious (~arkurious@user/arkurious)
[18:05:30] <PMunch> @retkid ^
[18:06:08] <FromDiscord> <retkid> In reply to @PMunch "What are you actually": I'm just upset from my general usage of it over time rather than this one occurrence which is rather simple
[18:07:22] <PMunch> It's a pretty decent system if you know how to use it
[18:07:33] <PMunch> But if not it's a bit counter-intuitive
[18:14:09] <FromDiscord> <dom96> you could probably write a JS promises emulation on top of Nim's futures fairly easily
[18:14:15] <FromDiscord> <dom96> if you prefer that then just do it üôÇ
[18:16:55] <FromDiscord> <0ffh> I'd like to try and create bindings for https://github.com/Nelarius/imnodes‚ÜµHow do I best learn to make bindings for a C++ library, and what tool (if any) would I want to use?‚ÜµIn case it makes a difference, I don't mind to compile to C++ instead of C.
[18:18:22] <FromDiscord> <retkid> In reply to @dom96 "you could probably write": I don't like JS's systems either
[18:18:34] <FromDiscord> <retkid> I just find them less annoying
[18:18:56] <FromDiscord> <retkid> I could probably think of something I like but then i gotta try and implement it then it'll be months and I'll cry
[18:20:01] <FromDiscord> <ynfle> In reply to @retkid "I could probably think": Just get Beef to write a macro for you
[18:27:38] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:28:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[18:41:56] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.4)
[18:42:29] <FromDiscord> <ajusa> In reply to @ynfle "Just get Beef to": This is the way
[18:44:29] <FromDiscord> <ynfle> There should be a Macro Engineer for Beef
[18:46:16] <FromDiscord> <ynfle> (edit) "There should be a Macro Engineer ... for" 03added "title"
[18:46:22] <FromDiscord> <ynfle> In reply to @ynfle "There should be a": title
[18:46:26] <FromDiscord> <ynfle> (edit) 04removed "title"
[18:48:01] *** Joins: anddam (~anddam@user/anddam)
[19:01:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[19:02:20] <FromDiscord> <Schelz> anyone have tried to make in nim custom push message to home assistant ?
[19:02:26] <FromDiscord> <Schelz> (edit) "to" => "for"
[19:03:07] <FromDiscord> <Schelz> (edit) 04removed "have"
[19:12:33] <FromDiscord> <federico3> @Schelz\: huh?
[19:15:03] <FromDiscord> <Schelz> Like ask google home assistant a question and he respond with a message from nim webhook.
[19:15:27] <FromDiscord> <Schelz> lol this is a hard concept to explain
[19:19:22] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:35:24] <FromDiscord> <blabla3131> hey
[19:35:43] <FromDiscord> <blabla3131> who can help me about compress dir to zip or rar
[19:44:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[19:47:40] <FromDiscord> <Sense> So I want to encrypt a link, after this link will be encrypted at some point the link will be decrypted and my software will send a request to the server, how do I do something like that?
[19:48:59] <FromDiscord> <retkid> Is there a rhythm detection library
[19:49:13] <FromDiscord> <retkid> Like anyway to detect music in a video
[19:49:43] <FromDiscord> <retkid> Actually I‚Äôll just write more python it‚Äôs fine
[19:58:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:01:27] <FromDiscord> <ynfle> In reply to @Sense "So I want to": What do you mean by "encypt a link"
[20:01:42] <FromDiscord> <ynfle> In reply to @blabla3131 "who can help me": Specifically those formats or just in general
[20:02:37] <FromDiscord> <ynfle> In reply to @blabla3131 "who can help me": https://github.com/guzba/zippy
[20:03:39] <FromDiscord> <retkid> alright
[20:03:41] <FromDiscord> <retkid> im tired enough
[20:03:48] <FromDiscord> <retkid> i bet i can write a beat detection library
[20:04:14] <NimEventer> New question by itil memek cantik: Nim is to assign variable in or beside other expression once, see https://stackoverflow.com/questions/71298160/nim-is-to-assign-variable-in-or-beside-other-expression-once
[20:04:21] <FromDiscord> <retkid> i just need to do trig
[20:04:24] <FromDiscord> <retkid> oh god i need to do trig
[20:15:56] <nrds> <06Prestige99> trig is fun
[20:23:26] <FromDiscord> <auxym> In reply to @ynfle "https://github.com/guzba/zippy": I had a look and I don't think create zip files is supported by zippy
[20:30:52] <FromDiscord> <Anuke> I'm running into a strange compiler error related to large staticRead inputs: https://play.nim-lang.org/#ix=3R14‚Üµ‚ÜµDocumentation reads: "The maximum file size limit that staticRead and slurp can read is near or equal to the free memory of the device you are using to compile.", while the file is 1GB, and my device has far more free memory than that.
[20:36:34] <FromDiscord> <Anuke> Now, I realize that embedding 1GB files in executables is ridiculous, but this was an experiment to see how and when static resources are actually loaded into RAM
[20:52:40] <FromDiscord> <blabla3131> any format is okay which works on Windows and can send over httpclient‚Üµ(@ynfle)
[20:58:22] <FromDiscord> <retkid> was collect changed recently
[20:58:25] <FromDiscord> <retkid> i cant get it to work at all
[20:58:47] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3R1c
[20:59:11] <FromDiscord> <auxym> i stand corrected, ty
[20:59:32] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3R1d
[20:59:47] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3R1d" => "https://play.nim-lang.org/#ix=3R1e"
[20:59:52] <FromDiscord> <retkid> no long works?
[21:00:02] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3R1f
[21:00:20] <FromDiscord> <ynfle> In reply to @retkid "no long works?": https://play.nim-lang.org/#ix=3R1g
[21:00:29] <FromDiscord> <retkid> does not compile for me...
[21:00:31] <FromDiscord> <retkid> is the aur outdated
[21:00:34] <FromDiscord> <retkid> oh god the aurs outdated
[21:01:23] <FromDiscord> <Sense> In reply to @ynfle "What do you mean": Whatever, now. I figured out everything.
[21:04:03] <FromDiscord> <ynfle> In reply to @retkid "oh god the aurs": Choosenim is better
[21:04:48] <FromDiscord> <retkid> In reply to @ynfle "Choosenim is better": yea already done
[21:04:51] <FromDiscord> <retkid> i forgot about that
[21:05:14] <FromDiscord> <ynfle> In reply to @auxym "i stand corrected, ty": Never mind, not sure how to do it actually
[21:24:49] <FromDiscord> <Sense> So I want to send a request with `auth` header in puppy (https://github.com/treeform/puppy)‚ÜµIt sends a `get` request to the Discord's api `https://discordapp.com/api/v6/users/@me`
[21:25:10] <FromDiscord> <Sense> How it will look in the code?
[21:28:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[21:42:32] <FromDiscord> <retkid> I've learned a few things in the last hour
[21:43:06] <FromDiscord> <retkid> 1. encodings are stupid complex and sparsely documented‚Üµ2. holy shit the math needed for this takes so much spacd
[21:46:31] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[21:47:01] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[21:55:14] <FromDiscord> <Waldecir Santos> Is it possible to use `case of` on generics so I have different code paths depending on the type ? I did `case T: of....` but I've got ` Error: selector must be of an ordinal type, float or string` maybe I should use typeof(T)  ?
[21:57:42] <FromDiscord> <haxscramper> no, and pattern matching does not work for that either
[21:58:23] <FromDiscord> <haxscramper> https://github.com/nim-lang/fusion/pull/33#issuecomment-716140197
[22:00:27] <FromDiscord> <Waldecir Santos> Hmm that is sad, I'm working a generic-proc that needs to do different processing depending on the generic type
[22:00:38] <FromDiscord> <konsumlamm> as the error message says, you can't use a type in a case-of
[22:00:45] <FromDiscord> <konsumlamm> you'll need to use `when` instead
[22:00:58] <FromDiscord> <Waldecir Santos> OH ü§¶‚Äç‚ôÇÔ∏è
[22:01:17] <FromDiscord> <Waldecir Santos> Let me try, thank you
[22:02:59] *** Quits: cyraxjoe (~joe@2806:109f:13:9477:6543:9d3d:80ab:e839) (Quit: No Ping reply in 180 seconds.)
[22:04:14] *** Joins: cyraxjoe (~joe@2806:109f:13:9477::2000)
[22:04:43] <FromDiscord> <Waldecir Santos> It worked:
[22:04:56] <FromDiscord> <Waldecir Santos> sent a code paste, see https://play.nim-lang.org/#ix=3R1w
[22:05:04] <FromDiscord> <Waldecir Santos> (edit) 
[22:05:11] <FromDiscord> <Waldecir Santos> Thank you @haxscramper @konsumlamm
[22:07:21] <FromDiscord> <haxscramper> https://play.nim-lang.org/#ix=2Vj2
[22:08:31] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3R1x
[22:08:47] <FromDiscord> <haxscramper> `static:` is not necessary, but that is an old code
[22:09:12] <FromDiscord> <Waldecir Santos> Do I need `typecase` macro for this to work ?
[22:09:14] <FromDiscord> <haxscramper> `$typeof(entry)` should be `"tjsonTag2 does not support conversion for type" & $T`
[22:09:23] <FromDiscord> <haxscramper> In reply to @Waldecir Santos "Do I need `typecase`": yes,
[22:09:37] <FromDiscord> <haxscramper> I would still use `when` thoug
[22:09:43] <FromDiscord> <Waldecir Santos> What is the diference between both versions ?
[22:10:10] <FromDiscord> <haxscramper> `when` is more explicit
[22:10:15] <FromDiscord> <Waldecir Santos> I love seeing different approaches so keep them coming
[22:10:19] <FromDiscord> <haxscramper> I don't like voodoo magic in my generic code
[22:10:28] <FromDiscord> <Waldecir Santos> Yeah, I agree
[22:10:50] <FromDiscord> <haxscramper> In reply to @Waldecir Santos "What is the diference": or you meant `typeof`?
[22:11:32] <FromDiscord> <Waldecir Santos> I mean the diference between my example and what you posted, why would one use `typecase`
[22:12:32] <FromDiscord> <haxscramper> because `typecase` is a macro that makes the code work
[22:12:52] <FromDiscord> <haxscramper> using `of`
[22:13:13] <FromDiscord> <haxscramper> that's the whole point, I linked it because you originally tried doing it with `case of`
[22:13:39] <FromDiscord> <Waldecir Santos> Oh I see, got it.
[22:15:49] *** Parts: anddam (~anddam@user/anddam) (WeeChat 3.4)
[22:15:53] *** Joins: anddam (~anddam@user/anddam)
[22:37:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[22:45:48] *** Quits: mjsir911 (~bnc@user/mjsir911) (Quit: Goodbye, World!)
[22:46:16] <NimEventer> New thread by DMisener: How to correctly augment async future data, see https://forum.nim-lang.org/t/8965
[22:46:20] *** Joins: mjsir911 (~bnc@user/mjsir911)
[22:49:53] <FromDiscord> <michaelb> sent a code paste, see https://play.nim-lang.org/#ix=3R1L
[22:53:22] <FromDiscord> <Phil> sent a long message, see http://ix.io/3R1N
[22:53:25] *** Quits: mjsir911 (~bnc@user/mjsir911) (Remote host closed the connection)
[22:54:24] *** Joins: mjsir911 (~bnc@user/mjsir911)
[22:55:55] <FromDiscord> <Phil> I could imagine an entire generic module full of generic procs that can be imported by specific modules and use some consts that provide types to... why didn't I do that one sooner
[22:55:56] <FromDiscord> <Phil> Hmmmmm
[23:01:03] <FromDiscord> <Phil> It feels like the kind of thing that could very quickly get very messy though, particularly in nim
[23:09:02] <FromDiscord> <Elegantbeef> You might be able to use a template with all the procedures declared inside, thought it didnt work overly well when i tried it
[23:12:26] <FromDiscord> <Phil> I'm doing a little experiment that is (for my tastes) way too reminiscent of inheritance sortof.‚ÜµAn "abstractModule" with a bunch of public generic procs that uses other procs declared via "mixin" that your importer module then has to define. What I fear though is that this type of pattern might be impossible to debug
[23:12:50] <FromDiscord> <Elegantbeef> You say that like that's not how generics are supposed t obe used
[23:13:08] <FromDiscord> <Elegantbeef> Use concepts to constrain the generics and you're golden
[23:13:30] <FromDiscord> <Elegantbeef> You get a public facing checklist that you can easily say "Hey anything needs to match X type"
[23:14:43] <FromDiscord> <Phil> Hmmm I may not understand mixin though it seems, not the way I want anyway
[23:14:48] <FromDiscord> <Phil> One sec, drawio diagram coming up
[23:15:05] <FromDiscord> <Elegantbeef> Minus the concepts this is how `tables` `jsonutils` and anything else that allows user defined overrides work
[23:18:33] <FromDiscord> <Phil>  https://media.discordapp.net/attachments/371759389889003532/947943375749910619/abstractModule.png
[23:20:33] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3R1S
[23:22:13] <FromDiscord> <Phil> I had believed that "getCircumference" could stay private because "getDoubleCircumference" is moved into the context of "circle.nim" when it's being imported
[23:22:38] <FromDiscord> <Elegantbeef> `obj.getCircumferanc` vs `getCircumferance(ob)`
[23:22:50] <FromDiscord> <Phil> wait, the latter works?
[23:22:51] <FromDiscord> <Phil> one sec
[23:23:19] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3R1T
[23:24:52] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3R1U
[23:27:29] <FromDiscord> <Phil> In reply to @TurtleP "Hey, I'm trying to": You get invalid storage access where? On "os.isValidFilename"?
[23:27:45] <FromDiscord> <Elegantbeef> Yes
[23:27:46] <FromDiscord> <demotomohiro> @TurtleP Maybe you are returning empty string?
[23:30:06] <FromDiscord> <demotomohiro> @TurtleP casting `set[char]` to `string` seems dangrous.
[23:31:00] <FromDiscord> <Elegantbeef> instantiation happens at the callsite, so you need to call it inside circle if you dont want to expose the `getCircumfurance`
[23:31:17] <FromDiscord> <Elegantbeef> Also you could consider trying https://github.com/beef331/traitor although it's heavily untested and just for fun mostly üôÇ
[23:32:08] <FromDiscord> <Phil> In reply to @Elegantbeef "instantiation happens at the": Hmm so the "helper" methods of the module have to be public
[23:32:23] <FromDiscord> <Phil> Since an "abstract" module such as abstractShape shouldn't have to import the individual modules that spawn from it
[23:32:53] <FromDiscord> <Elegantbeef> or they can be called internally
[23:32:53] <FromDiscord> <TurtleP> In reply to @Isofruit "You get invalid storage": I believe when I call the replace, name is a valid string
[23:33:00] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[23:33:20] <FromDiscord> <TurtleP> the documentation specified I could strip out these invalid chars, so that's what I'm trying to do
[23:33:28] <FromDiscord> <Phil> In reply to @Elegantbeef "or they can be": How do you mean?
[23:33:41] <FromDiscord> <Elegantbeef> `discard typeof getDoublCirc(obj)` as a top level statement in the `circle` module might make it work
[23:35:15] <FromDiscord> <Phil> Hmmm it works as a bottom level statement if it's an actual proc instantiation
[23:35:46] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/QJr
[23:36:30] <FromDiscord> <demotomohiro> @TurtleP `cast[string](invalid)` can cause error.
[23:36:45] <FromDiscord> <TurtleP> right, but then how am I supposed to strip these chars?
[23:40:22] <FromDiscord> <demotomohiro> @TurtleP Find each invalid char with https://nim-lang.org/docs/strutils.html#find%2Cstring%2Cset%5Bchar%5D%2CNatural%2Cint and delete it.
[23:40:23] <FromDiscord> <Phil> ... can I alias "discard" ?
[23:41:19] <FromDiscord> <Phil> Turns out I can't, I am now sad, I'd have loved to rename that to "instantiate" or something and then use that at the end of modules
[23:44:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:47:44] <FromDiscord> <Elegantbeef> That's a top level statement‚Üµ(@Phil)
[23:48:41] <FromDiscord> <Phil> In reply to @Elegantbeef "That's a top level": Ohh, top as in "not indented and thus executed upon startup" ?
[23:49:16] <FromDiscord> <Phil> ... maybe implementing a spring service fumbled my brain again today, my mind went to top as in top-of-the-file
[23:51:40] <FromDiscord> <vlkrs> I‚Äôm getting a test failure when running stdlib/tsharedlist.nim with 1.6.4 ‚Ä¶ is that test known to break?
