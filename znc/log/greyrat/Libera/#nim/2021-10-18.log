[00:11:21] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 245 seconds)
[00:43:20] *** Joins: neurocyte0132889 (~neurocyte@212.232.92.249)
[00:43:20] *** Quits: neurocyte0132889 (~neurocyte@212.232.92.249) (Changing host)
[00:43:20] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:48:20] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: @geekrelief we've now got state reload capabilities for exported global symbols!(Needs latest Nim commit though) https://streamable.com/9zr8w4
[00:49:18] <FromDiscord> <geekrelief> In reply to @Elegantbeef "<@309937753699778561>\: <@109484839480107008> we've": whoa! sweet!
[00:49:51] <FromDiscord> <Elegantbeef> uses `loadState` and `saveState` from `nimscripter`
[00:50:05] <FromDiscord> <Elegantbeef> Soon enough i'll have to document/test all this stuff
[00:53:33] <FromDiscord> <geekrelief> is it correct to pass a `{.cdecl.}` proc to C via a pointer parameter?
[00:54:49] <FromDiscord> <Elegantbeef> Possibly, dont recall how cdecl gens code
[00:55:43] <FromDiscord> <geekrelief> On another note, anyone know how to resolve a `too many initializers` error from generated C?  I'm creating an array of structs and passing it into a C function via (myarray[0].unsafeAddr).
[00:56:12] <FromDiscord> <geekrelief> The weird part is each struct looks like it's code gen'ed correctly
[00:58:47] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C4F
[00:59:42] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C4G
[01:01:57] <FromDiscord> <geekrelief> The weird part is this error only appears when I define this variable: `let p: pointer = truthCreateTypes` where `trutCreateTypes` is a `{.cdecl.}` proc I pass to C.
[01:02:38] <FromDiscord> <geekrelief> this is so weird
[01:03:32] <FromDiscord> <impbox [ftsf]> In reply to @Elegantbeef "<@309937753699778561>\: <@109484839480107008> we've": Exciting!!
[01:04:31] <FromDiscord> <geekrelief> oh crap.. it' must be a template!
[01:05:06] <FromDiscord> <geekrelief> nvm
[01:05:39] <FromDiscord> <geekrelief> time to take a break I guess..
[01:08:35] *** Joins: mahlon (~mahlon@martini.nu)
[01:09:08] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[01:09:46] *** Joins: neurocyte0132889 (~neurocyte@212.232.92.249)
[01:09:46] *** Quits: neurocyte0132889 (~neurocyte@212.232.92.249) (Changing host)
[01:09:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[01:17:06] *** Quits: max22- (~maxime@2a01cb0883359800952563b5640f70e9.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:34:08] <nrds> <06Prestige99> I'm storing a ref object with a pointer, and trying to bring it back later for modification. But I think the object might not be the same? https://play.nim-lang.org/#ix=3C4P as an example
[01:34:30] <nrds> <06Prestige99> @Elegantbeef I think this may be the problem with the code I've been sharing with you ^ (in part)
[01:38:16] <FromDiscord> <geekrelief> lol, nimterop wasn't able to convert `tm_the_truth_property_definition_t` properly because there's a union in the struct.
[01:40:59] <FromDiscord> <Elegantbeef> No prestige the issue with that code is you're doing stuff wrong
[01:41:25] <nrds> <06Prestige99> Yeah that's what I mean, it seems I can do the above
[01:41:28] <nrds> <06Prestige99> cant*
[01:41:47] <FromDiscord> <Elegantbeef> Well of course not `foo.addr` != `cast[ptr Foo](foo)`
[01:42:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C4Q
[01:42:33] <FromDiscord> <Elegantbeef> Like look at https://play.nim-lang.org/#ix=3C4R
[01:43:08] <nrds> <06Prestige99> oh so addr is a pointer to a ref? 🤔
[01:43:16] <FromDiscord> <Elegantbeef> Well yea
[01:43:26] <FromDiscord> <Elegantbeef> you're getting the address of the variable
[01:43:37] <FromDiscord> <Elegantbeef> Which is a pointer
[01:43:41] <FromDiscord> <Elegantbeef> It's the same with pointers
[01:44:01] <nrds> <06Prestige99> hm I always thought refs were essentially pointers
[01:44:12] <FromDiscord> <Elegantbeef> They are
[01:44:13] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C4S
[01:44:15] <FromDiscord> <Elegantbeef> They behave identically in this case
[01:44:35] <FromDiscord> <Elegantbeef> `addr` of a variable returns the address of that variable regardless if it's a pointer or not
[01:44:51] <FromDiscord> <Elegantbeef> It does not return the address of where it points at
[01:46:01] <nrds> <06Prestige99> Alright, so this might get me closer..
[01:46:28] <FromDiscord> <Elegantbeef> Hopefully that explanation makes sense 😀
[01:46:40] <nrds> <06Prestige99> so if you look here https://git.einheit.tech/EinheitTechnologies/shade/src/branch/example/platformer/src/shadepkg/game/physicsbody.nim#L73 `userData` is a `pointer`
[01:46:54] <nrds> <06Prestige99> then it's being used here https://git.einheit.tech/EinheitTechnologies/shade/src/branch/example/platformer/src/shadepkg/game/physicsbody.nim#L106
[01:47:24] <nrds> <06Prestige99> but I believe I should be saying cast[ptr PhysicsBody](body.userData)
[01:47:40] <FromDiscord> <Elegantbeef> Indeed
[01:47:43] <nrds> <06Prestige99> but I still get an illegal storage access error in that case. Unless ptr != pointer
[01:47:56] <FromDiscord> <Elegantbeef> pointer is a `void`
[01:48:03] <FromDiscord> <Elegantbeef> well physicsbody is a ref object no?
[01:48:09] <nrds> <06Prestige99> Yes it is
[01:49:56] <FromDiscord> <Elegantbeef> so you should be doing `physicsBody.body.userData = cast[pointer](physicsBody)` ?
[01:51:23] <nrds> <06Prestige99> oh wow I think that worked (at least it didn't crash)
[01:51:44] <nrds> <06Prestige99> Thanks; this whole thing is a bit confusing, need to read about refs..
[01:52:13] <FromDiscord> <Elegantbeef> Refs are just pointers which are managed by the GC
[01:52:24] <nrds> <06Prestige99> ah, alright cool. Thanks!
[01:54:28] <FromDiscord> <Elegantbeef> Of course casting to ptr is unsafe and can result in bad behaviour if you dont manage the C side code
[01:54:37] <FromDiscord> <Elegantbeef> But we have destructors now, so use those where applicable
[01:54:50] <nrds> <06Prestige99> only available with arc/orc yeah?
[01:55:07] <FromDiscord> <Elegantbeef> They work everywhere but work better with rcs
[01:55:21] <FromDiscord> <Elegantbeef> with refc you dont have them deterministically so they behave oddly
[01:55:27] <nrds> <06Prestige99> Been stuck on this for days, thanks for helping :)
[01:55:40] <FromDiscord> <Elegantbeef> No problem
[02:13:39] *** Joins: rockcavera (~rc@192.12.112.238)
[02:13:39] *** Quits: rockcavera (~rc@192.12.112.238) (Changing host)
[02:13:39] *** Joins: rockcavera (~rc@user/rockcavera)
[02:17:04] *** Joins: User11 (~kaliyuga@2601:601:200:5b30::1634)
[02:58:34] <FromDiscord> <KimJongUnstoppable> Does anyone know if there's a way to specify a specific virtual offset when loading a DLL with loadLib and/or trying to call the process with symAddr?
[03:27:11] <FromDiscord> <Elegantbeef> @KimJongUnstoppable\: is the offset just offset from the symaddr pointer?
[03:30:09] <FromDiscord> <KimJongUnstoppable> yes
[03:30:31] <FromDiscord> <KimJongUnstoppable> I need to load DLL+offset to be able to call the procedure by name, otherwise it never finds the procedure.
[03:30:55] <FromDiscord> <KimJongUnstoppable> I imagine based on the way you asked that, I can just add the offset to the pointer, and if that's the case I'm going to feel pretty dumb
[03:31:01] <FromDiscord> <Elegantbeef> Yep
[03:31:05] <FromDiscord> <KimJongUnstoppable> sigh
[03:31:51] <FromDiscord> <Elegantbeef> `cast[ptr UncheckedArray[proc(){.nimcall.}]](yourSymAddr)[offset]` 😀
[03:31:56] <FromDiscord> <KimJongUnstoppable> wait, actually, the offset would be where I'd call the symaddr from - the dll has a virtual function table and that's preventing me from calling the function by name
[03:32:05] <FromDiscord> <KimJongUnstoppable> bless you
[03:32:13] <FromDiscord> <KimJongUnstoppable> I've been trying to figure this out for like an hour or more
[03:32:40] <FromDiscord> <Elegantbeef> That assumes you have the address to the first proc, and it's sequential, if either of those arent true uhhh, keep searching 😛
[03:33:48] <FromDiscord> <KimJongUnstoppable> I'm pretty sure I can figure out the address for the first procedure, and I'm 99% sure they're sequential - I guess I'll find out shortly lol
[03:37:21] <FromDiscord> <KimJongUnstoppable> is there any way to enumerate through the procedures in a DLL? or am I stuck using like OleView or IDA for that
[03:40:07] <FromDiscord> <Elegantbeef> I think that'd require doing stuff like dumpbin might work, dont think there is a standard way of doing "What does this Dll exposes"
[03:47:36] <FromDiscord> <KimJongUnstoppable> OleView is telling me the virtual function table that has the procedure I want is at the entry point of the dll + 0x7360. but the issue I'm having a hard time wrapping my brain around is how to load the DLL at that offset instead of the entry point, so that I can call the procedure by name. I'm not even sure that can be done now that I've typed it out
[03:48:52] <FromDiscord> <Elegantbeef> I really should say much on how to do this but i atleast know a bodge solution
[03:49:14] <FromDiscord> <Elegantbeef> given that you know the entry point from `loadLib` you can just offset it by `7360` and assign that to variable afaict
[03:49:19] <FromDiscord> <impbox [ftsf]> bodgebeef
[03:49:28] <FromDiscord> <KimJongUnstoppable> bodge solution > no solution
[03:49:30] <FromDiscord> <KimJongUnstoppable> fwiw
[03:50:24] <FromDiscord> <impbox [ftsf]> @ElegantBeef are your latest changes to nimscripter in bigrewrite?
[03:50:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C5l
[03:50:35] <FromDiscord> <Elegantbeef> Yep
[03:52:10] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3C5m
[03:52:12] <FromDiscord> <impbox [ftsf]> getting this when trying to build for emscripten
[03:52:29] <FromDiscord> <impbox [ftsf]> with latest Nim + nimscripter
[03:52:52] <FromDiscord> <impbox [ftsf]> maybe you had to make changes to the nicoscripter side?
[03:54:14] <FromDiscord> <Elegantbeef> Nah i messed up the `exportTo` for some things
[03:54:14] <FromDiscord> <Elegantbeef> What're you exporting?
[03:54:24] <FromDiscord> <impbox [ftsf]> nico
[03:54:45] <FromDiscord> <Elegantbeef> I mean what's your `exportTo` have in it for functions/symbols
[03:56:17] <FromDiscord> <impbox [ftsf]> should be the same as what I sent you before, https://github.com/ftsf/nico/blob/nicoscripter/examples/nicoscripter/src/main.nim
[03:57:54] <FromDiscord> <Elegantbeef> Hmm you sure you're on most recent commit?
[03:58:27] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[03:58:42] <FromDiscord> <impbox [ftsf]> your latest commit Added setGlobalValue
[03:59:18] <FromDiscord> <impbox [ftsf]> maybe i'm messed up somewhere >_>
[04:00:24] <FromDiscord> <impbox [ftsf]> ahh using that version of main.nim I'm getting issues with loadScript
[04:00:37] <FromDiscord> <Elegantbeef> Which is to be expected with my changes
[04:00:43] <FromDiscord> <impbox [ftsf]> NimScriptFile/Path
[04:00:44] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C5r should work
[04:00:48] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[04:01:17] <FromDiscord> <Elegantbeef> I really didnt like the optional `isFile`. Felt bad/error prone
[04:02:29] <FromDiscord> <Elegantbeef> There is presently a slight issue with closed/open syms that overlap
[04:02:47] <FromDiscord> <Elegantbeef> So overloads somewhat are issue causing
[04:02:57] <FromDiscord> <impbox [ftsf]> woo, compiling now \o/
[04:06:38] <FromDiscord> <Elegantbeef> Does it work?!
[04:08:09] <FromDiscord> <Varriount> @Araq Have you seen this "nogil" fork of Python[0]? Its design document[1] is quite interesting. It mentions some very creative mechanisms for dealing with threading in a reference-counting context.
[04:08:21] <FromDiscord> <Varriount> Biased reference counting in particular looks like it could apply to Nim.
[04:08:31] <FromDiscord> <Varriount> [0] https://github.com/colesbury/nogil
[04:08:38] <FromDiscord> <Varriount> [1] https://docs.google.com/document/d/18CXhDb1ygxg-YXNBJNzfzZsDFosB5e6BfnXLlejd9l0
[04:14:08] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5t
[04:16:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C5v
[04:16:54] <FromDiscord> <impbox [ftsf]> @ElegantBeef woo got it working in browser, super cool \o/
[04:17:47] <FromDiscord> <impbox [ftsf]> now I can make an interactive web based tutorial
[04:18:03] <FromDiscord> <Elegantbeef> Nice!
[04:18:17] <User11> KimJongUnstoppable, I dont know if this'd help but I'm looking at the same problem also. I dont have 
[04:18:17] <User11> a working solution for this but the theory is that the dll needs to dynamically recompute the fixed addresses
[04:18:17] <User11> when it is loaded to a new process with a different base address from it's prefer base address. The procedure 
[04:18:17] <User11> then is to looping through the dll's relocation descriptors and resolve the symbol's addresses with pointer maths.
[04:18:56] <FromDiscord> <Elegantbeef> `saveState`/`loadState` only work with the most recent nim commit(which didnt get backported) so if you want that functionality do build with that version of Nim
[04:19:44] <FromDiscord> <Elegantbeef> The way it's presently done is so https://play.nim-lang.org/#ix=3C5w
[04:22:43] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5x
[04:23:02] <FromDiscord> <deech> Is there a flag to keep compile time code from doing IO/making syscalls etc?
[04:27:18] <FromDiscord> <Elegantbeef> I know the VM can be sandboxed but dont recall how
[04:31:14] <FromDiscord> <Elegantbeef> Seems what i recall is https://github.com/nim-lang/Nim/pull/16943
[04:33:40] <FromDiscord> <Elegantbeef> @geekrelief\: odd considering https://play.nim-lang.org/#ix=3C5B works
[04:33:59] <FromDiscord> <geekrelief> In reply to @geekrelief "If I have a": yeah it is odd
[04:34:18] <FromDiscord> <geekrelief> I'm looking at the C I'm maybe I'm missing something
[04:34:30] <FromDiscord> <geekrelief> (edit) 04removed "I'm"
[04:35:03] <FromDiscord> <geekrelief> nim isn't complaining it's msvc
[04:35:20] <FromDiscord> <Elegantbeef> Yea i know
[04:35:34] <FromDiscord> <Elegantbeef> Well didnt know it was msvc, but knew it was the C compiler
[04:38:57] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5C
[04:39:43] <FromDiscord> <Elegantbeef> I dont think that's a pointer proc
[04:46:28] <FromDiscord> <Elegantbeef> Here we go https://play.nim-lang.org/#ix=3C5D
[04:46:28] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[04:47:03] <FromDiscord> <Elegantbeef> dont worry about `noConv` was just a test
[04:47:11] <FromDiscord> <Elegantbeef> But here is a pointer proc https://play.nim-lang.org/#ix=3C5F
[04:48:01] <FromDiscord> <geekrelief> hmm
[04:48:41] <FromDiscord> <geekrelief> weird I already have the importc on the nim side
[04:48:57] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5G
[04:49:11] <FromDiscord> <Elegantbeef> The issue is it's not a pointer proc
[04:49:31] <FromDiscord> <geekrelief> ah
[04:49:42] <FromDiscord> <Elegantbeef> i'm probably wrong but you cannot have a variable of a non pointer proc in C
[04:49:44] <FromDiscord> <geekrelief> hmm so the headers neard to be changed
[04:49:49] <FromDiscord> <geekrelief> (edit) "neard" => "need"
[04:50:44] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5H
[04:51:19] <FromDiscord> <geekrelief> I guess I can only use this for casting purposes.
[04:51:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C5I
[04:52:58] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[04:53:06] <FromDiscord> <Elegantbeef> Ask TM if that definition makes any sense, i'm not a C programmer, i'm barely a Nim programmer 😛
[04:53:31] <FromDiscord> <geekrelief> hehe https://cplayground.com/?p=seahorse-gerbil-dog
[04:53:43] <FromDiscord> <geekrelief> yeah my C is pretty rusty
[04:54:46] <FromDiscord> <geekrelief> seems like that's illegal C, I guess I'll stick to casting the proc
[04:56:05] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3C5K
[04:56:16] <FromDiscord> <Elegantbeef> My C is completely unknown since i havent actually ever learned it
[04:56:34] <FromDiscord> <geekrelief> well I learned it.. about 30 years ago??
[04:56:43] <FromDiscord> <Elegantbeef> You can make a converter if you want to live dangerously 😛
[04:57:19] <FromDiscord> <geekrelief> would I have to create a converter for each function type?
[04:57:20] <FromDiscord> <Elegantbeef> Alternatively just have an overload that takes a proc that matches
[04:58:08] <FromDiscord> <geekrelief> ah.. nevermind. This is good enough. 🙂
[04:58:23] <FromDiscord> <geekrelief> thx beef!
[04:58:36] <FromDiscord> <Elegantbeef> No problem
[05:06:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:48:42] <FromDiscord> <exelotl> lol I hit a mysterious VM crash this evening. Updated to 1.6 RC3 and it went away :D
[05:49:04] <FromDiscord> <Elegantbeef> Interesting
[05:50:54] <FromDiscord> <exelotl> Sadly I'm still stuck with --os:standalone --gc:none because simply having malloc present causes me to run out of RAM 🙃
[05:51:20] <FromDiscord> <Elegantbeef> Shame
[05:51:45] <FromDiscord> <Rika> what are you programming
[05:52:07] <FromDiscord> <exelotl> The game boy advance, as usual x)
[05:52:14] <FromDiscord> <Rika> ah i forgot
[05:55:41] <FromDiscord> <exelotl> The trouble with --os:standalone now is that exceptions don't work at compile time anymore. Fortunately the only thing that this broke for me was a few strformat calls in macros, which I could replace with old-style `%` string interpolation
[05:58:25] <FromDiscord> <Rika> why wouldnt exceptions work on compile time?
[05:58:30] <FromDiscord> <Rika> why would anything change on compile time
[05:59:19] <FromDiscord> <Elegantbeef> I could see exceptions being disabled with `--gc:none`
[05:59:51] <FromDiscord> <Elegantbeef> Could be a mistake that they're disabled at CT aswell
[06:00:48] <FromDiscord> <Rika> this sounds like the CT issue triggered by -d:danger
[06:01:17] <FromDiscord> <exelotl> Here's the issue I raised for it: https://github.com/nim-lang/Nim/issues/18322
[06:51:36] <nrds> <06Prestige99> Along the same lines as earlier, why does this not work/how could it be done? https://play.nim-lang.org/#ix=3C62 
[06:54:14] <FromDiscord> <Elegantbeef> Generally for stuff like this you supply a len/pointer to first element
[06:55:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C64
[06:55:34] <nrds> <06Prestige99> oh you gave it the addr of the first element, alright. Curious why that'd be different than the addr of the seq
[06:55:56] <FromDiscord> <Elegantbeef> Well cause a seq has a ptr to data on the heap
[06:56:04] <FromDiscord> <Elegantbeef> Or might be a pointer to data on the heap
[06:56:07] <nrds> <06Prestige99> aha
[06:56:56] <FromDiscord> <Rika> address of array is the actual data because all metadata on it is compile time
[06:56:56] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C66 for a working version you supplied https://play.nim-lang.org/#ix=3C66
[06:57:04] <FromDiscord> <Elegantbeef> Jeez overly zealous here
[06:57:12] <FromDiscord> <Rika> address of seq is complicated because of size+capacity metadata
[06:58:14] <FromDiscord> <Elegantbeef> The reason what you did didnt work is you were mutating a copy of the seq cause `var a = someSeq` copies
[06:58:40] <FromDiscord> <Elegantbeef> So if you do `var foo = cast[ptr seq[float](data)` you'd have the same behaviour
[06:58:40] <nrds> <06Prestige99> Thanks for the info
[07:03:04] <FromDiscord> <Elegantbeef> All i can say is pointers are fun and Nim's one of the better ways to learn of this fun imo 🙂
[07:05:13] <FromDiscord> <Rika> They’re easier to understand due to the non overlapping syntax for dereferencing and pointer types xd
[07:05:45] <FromDiscord> <Elegantbeef> There's also no ambiguity between collections and pointers to a single value
[07:09:12] <FromDiscord> <impbox [ftsf]> aye, that's really annoying in C
[07:09:50] <FromDiscord> <Elegantbeef> Yep so annoying that even Zig afaik doesnt have it
[07:15:31] <FromDiscord> <Rika> Lol
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:45:31] *** Quits: mahlon (~mahlon@martini.nu) (Remote host closed the connection)
[07:45:43] *** Joins: mahlon (~mahlon@martini.nu)
[07:48:34] <madprops> apparently openbsd packages the nim compiler
[07:49:55] <madprops> version 1.2.0
[08:00:37] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[08:00:37] *** Quits: syl (~z@user/syl) (*.net *.split)
[08:00:46] *** Joins: oprypin (~irc@pryp.in)
[08:08:58] *** Joins: syl (~z@user/syl)
[08:47:28] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:02:34] *** Quits: User11 (~kaliyuga@2601:601:200:5b30::1634) (Remote host closed the connection)
[09:11:30] <FromDiscord> <codic> yeah Zig has `T` for single item pointer, `[]T` for multi-item pointer, `[]T` for multi-item pointer + length
[09:11:53] <FromDiscord> <codic> much clearer than just one conflated type, even if it is at machine level the same, then why have types at all by that reasoning?
[09:44:24] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[10:04:47] <FromDiscord> <j-james> so a couple of questions about templates
[10:04:57] <FromDiscord> <Elegantbeef> A couple of answers
[10:05:44] <FromDiscord> <j-james> they describe themselves as simple substitution mechanisms, but you still need to provide them with arguments?
[10:05:55] <FromDiscord> <j-james> sent a code paste, see https://play.nim-lang.org/#ix=3C6q
[10:06:17] <FromDiscord> <j-james> where the arguments are lifted from the source implementation of echo
[10:06:18] <FromDiscord> <Elegantbeef> You dont need to
[10:06:33] <FromDiscord> <j-james> oh? 👀
[10:07:10] <FromDiscord> <haxscramper> varargs[string, $]
[10:07:38] <FromDiscord> <Elegantbeef> A template replaces the call site with the body, there is no requirement of parameters
[10:08:07] <FromDiscord> <Elegantbeef> They're hygienic/typesafe by default though, you cannot do `template someThing(a: int) = discard; someThing(32f)`
[10:08:35] <FromDiscord> <Elegantbeef> Hygenic refers to the fact variables declared inside them by default cannot be referenced
[10:08:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[10:09:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:13:00] <FromDiscord> <j-james> alright, so replacing `typed` with `string` now works, but its output is framed in quotes and braces
[10:13:45] <FromDiscord> <Elegantbeef> You're passing an array to echo
[10:14:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C6u
[10:15:53] <FromDiscord> <Elegantbeef> inside the template the varargs is an array of strings, what unpackvarargs does is add that to an `echo()` so it gets the nodes held internally
[10:16:33] <FromDiscord> <Elegantbeef> Inside templates/macros varargs are a bracket expression of the values they hold
[10:17:01] <FromDiscord> <j-james> ah
[10:17:02] <FromDiscord> <j-james> thank you
[10:19:04] <FromDiscord> <j-james> so on a similar note how would templates for something that doesn't classically have parameters but still has arguments work?
[10:19:16] <FromDiscord> <j-james> like making an alias to `proc`, or defining a `loop` keyword
[10:19:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C6w
[10:20:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3C6x
[10:20:41] <FromDiscord> <Elegantbeef> Notice in the proc example there is nothing special around `name`
[10:20:58] <FromDiscord> <Elegantbeef> In a template if any identifier matches a parameter name it's replaced by it
[10:30:03] <FromDiscord> <Araq> @Varriount I'm familiar with "biased RC" and "deferred RC" techniques but I'm sold on Isolated[T] + gc:orc for Nim
[10:31:01] <FromDiscord> <j-james> @ElegantBeef alright, do you know what's wrong in this example? https://play.nim-lang.org/#ix=3C6z
[10:31:58] <FromDiscord> <j-james> based on your example i'd expect i'd have to add parameters for the proc's parameters and return type but it seems a couple things are wrong
[10:33:10] <FromDiscord> <Elegantbeef> Yea templates dont work like this
[10:36:57] <FromDiscord> <Elegantbeef> Templates are callable code substitution, they're not magic
[10:39:21] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3C6H this is pretty much the extent of what you can do with templates + proc definitions afaik
[10:43:46] <PMunch> Unfortunately macro/template invocation isn't flexible enough to get exactly that syntax
[10:44:41] <FromDiscord> <Elegantbeef> you can get that with macro wrapper but it's silly to do 😀
[10:45:10] <PMunch> You can't really, at least without some syntax rewrites
[10:45:21] <FromDiscord> <Elegantbeef> "with a macro wrapper"
[10:46:18] <FromDiscord> <Elegantbeef> Ah i take it back
[10:46:24] <FromDiscord> <Elegantbeef> I'm a liar and a fool
[10:49:59] <FromDiscord> <j-james> ok, that makes sense
[10:50:31] <FromDiscord> <j-james> so templates and macros work within the language but are way more flexible about what kind of data they can take and use
[10:51:21] <FromDiscord> <j-james> i suppose if i really want to do that an external preprocessor would work, but that indeed would be a silly thing to do
[10:51:33] <FromDiscord> <j-james> thanks a bunch for the explanations
[10:51:43] <FromDiscord> <Elegantbeef> Eh nim has string templates so you can just replace `proc` with `function`
[10:51:47] <FromDiscord> <Elegantbeef> Not that it makes any sense to do
[10:55:32] <FromDiscord> <Elegantbeef> Here's the silliest approximation you'll get https://play.nim-lang.org/#ix=3C6I
[10:56:14] <FromDiscord> <Elegantbeef> The parser/lexer really dont like when they're attempted to be abused so silly stuff like this works, but again why would you want to
[11:30:36] <PMunch> j-james, yes templates and macros work within the language. The Nim parser first parses everything, so code still needs to be sytactically correct (although Nim has a pretty flexible syntax so this is less of a problem than you might think). They then do substitutions and manipulations respectively to this parsed syntax (they are parsed into a tree structure called the Abstract Syntax Tree). Then this structure is returned and put into the 
[11:30:36] <PMunch> original syntax tree before the whole tree gets compiled down into C code by the compiler. So what you return from your macro or template needs to not only be syntactically correct, but also semantically correct.
[11:32:55] *** Joins: tinytoast (~squeek@user/tinystoat)
[11:33:03] *** Joins: pch_ (~pch@66.49.131.33)
[11:33:19] *** Quits: tinystoat (~squeek@user/tinystoat) (Read error: Connection reset by peer)
[11:33:26] *** Quits: notchris (sid181145@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: LyndsySimon (sid34452@lymington.irccloud.com) (Ping timeout: 245 seconds)
[11:33:49] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[11:33:50] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[11:33:51] *** Quits: euantorano (sid180289@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[11:34:14] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[11:35:00] <FromDiscord> <Rika> PMunch do I need to attribute you if I look at your keyboard firmware code and take inspiration from it? Licenses are difficult to understand
[11:35:31] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 245 seconds)
[11:37:24] <PMunch> @Rika, well I haven't really added a license to Badger. But I typically license my stuff with MIT, so you don't need to attribute me. But I always appreciate a shoutout :)
[11:37:51] <FromDiscord> <Rika> Well if I do take a good amount of inspiration I shall
[11:37:55] <PMunch> What're you working on?
[11:38:09] <FromDiscord> <Rika> The same thing but there’s some stuff that I want to add
[11:38:31] <FromDiscord> <Rika> And it’s not just an easy “fork your fw and add what I want”
[11:39:34] <PMunch> Cool, what are you adding?
[11:40:25] <FromDiscord> <Rika> A screen and a UI for it xd
[11:40:35] <PMunch> I mean most of the work in Badger was just getting everything to work on the controller without any libraries and creating a simple layout DSL
[11:40:39] <FromDiscord> <Rika> I don’t think it’s trivial to add
[11:40:47] <PMunch> Hmm, depends
[11:40:58] <PMunch> If it's an i2c screen it should be pretty simple
[11:41:01] <FromDiscord> <Rika> Also different MCU, using an ST one in my case
[11:41:06] <PMunch> And what do you mean UI?
[11:41:09] <FromDiscord> <Rika> The screen part is trivial
[11:41:13] <PMunch> ST?
[11:41:35] <FromDiscord> <Rika> Well, configuration of the board without reflashing or even using the computer could be possible
[11:41:41] <Amun-Ra> STMiroelectronics
[11:41:48] <FromDiscord> <Rika> It’s a gimmick sure but that’s what makes it fun
[11:41:59] <PMunch> Aah I see
[11:42:19] <FromDiscord> <Rika> And people love fun semi functional gimmicks
[11:42:32] <PMunch> Shouldn't be too hard, just need to create the layout arrays dynamically instead of statically compiled into the program
[11:42:43] <PMunch> And then have some interface to change them
[11:42:51] <FromDiscord> <Rika> Yeah I have an idea for such
[11:43:21] <FromDiscord> <Rika> The interface part I don’t know how intensive that would be on a processor but the one I’m using is kinda overkill for a regular keyboard so I’m assuming it’s enough
[11:43:50] <PMunch> You'd be surprised with how much headroom you have once you've removed all the overhead :P
[11:44:13] <FromDiscord> <Rika> Kinda also wanna put an Easter egg, like Vim embedded into the UI lol
[11:44:20] <FromDiscord> <Rika> Sounds fun
[11:44:32] <FromDiscord> <Rika> What overhead does QMK have actually
[11:45:32] <PMunch> No idea, haven't dived too deep into the codebase
[11:46:00] <PMunch> Part of the reason I wrote Badger was because QMK is such a massive code base and it's hard to get into
[11:47:16] <FromDiscord> <Rika> I’m probably gonna need to rely on a HAL as well like the MK fws because I want to be at least competitive…
[11:47:53] <PMunch> HAL?
[11:48:02] <FromDiscord> <Rika> Hardware abstraction layer
[11:48:10] <FromDiscord> <Rika> Makes it easier to support many MCUs
[11:48:20] <FromDiscord> <Rika> Of course has a cost
[11:48:26] <FromDiscord> <Rika> As with all abstractions
[11:50:41] <PMunch> Ah I see
[11:51:11] <PMunch> I want to make something completely compile-time based for that in Nim
[11:51:21] <PMunch> The Badger libraries is a start to that
[11:51:46] <FromDiscord> <Rika> Yeah a HAL on compile time would be nice
[12:05:02] <PMunch> You can see how I do it for I2C in the Badger library
[12:05:25] <PMunch> Basically using the type system for what it's worth
[12:06:29] <FromDiscord> <Rika> How do you test your fw by the way
[12:06:42] <FromDiscord> <Rika> I don’t have a keyboard or the screen to test
[12:07:34] <PMunch> I upload it to my keyboard and test it there
[12:08:01] <PMunch> I guess you could see if there is a simulator for your chip
[12:08:25] <FromDiscord> <Rika> Oh I have the chip
[12:08:43] <FromDiscord> <Rika> Just not as a keyboard (nor do I have buttons to use to simulate)
[12:08:57] <PMunch> Hmm, then it might be a bit tough
[12:09:03] <PMunch> I mean you could touch wires
[12:09:24] <PMunch> For a single button
[12:09:33] <PMunch> But it's kinda hard to test layouts and such
[12:09:48] <PMunch> Well, I guess you could have a bunch of wires and connect the right ones for your key..
[12:10:44] <FromDiscord> <Rika> Hmm
[12:52:23] <FromDiscord> <Rika> I’ll be honest your code looks very messy
[12:56:20] <PMunch> The badger code?
[12:56:44] <FromDiscord> <Rika> Yes
[12:57:05] <FromDiscord> <Rika> Less messy more convoluted I guess
[12:57:12] <PMunch> Hmm, what parts seem messy?
[12:57:47] <FromDiscord> <Rika> What is this MCP file thing doing
[12:57:56] <PMunch> Ah, that is the port expander
[12:58:05] <FromDiscord> <Rika> Ah, okay
[12:58:08] <PMunch> It's an I2C device
[12:58:16] <FromDiscord> <Rika> This is a split keyboard right
[12:58:23] <PMunch> Yes
[12:58:28] <PMunch> Each half has a port expander
[12:58:29] <FromDiscord> <Rika> I see that’s why that’s there
[12:58:34] <FromDiscord> <Rika> This will be useful
[12:58:39] <PMunch> And the chip is completely separate from the rest of the board
[12:59:03] <PMunch> You can see how I use them here: https://github.com/PMunch/badger/blob/final/badger.nim#L4-L14
[12:59:06] <FromDiscord> <Rika> Yes I had plans on using one too
[13:00:15] <FromDiscord> <Rika> What’s the difference between the master and final branches?
[13:00:41] <FromDiscord> <Smarc> Why is this not working, since Pawn etc. are inheriting from the Piece type, shouldn't a seq[Piece] be able to carry all of the sub-types? Coming from Java :s https://media.discordapp.net/attachments/371759389889003532/899590296646582302/Screenshot_20211016_145604.png
[13:02:26] <PMunch> @Rika, master is up to date with the last video I made on it
[13:02:29] <FromDiscord> <Smarc> Why is this not working? Since Pawn and all other types are inheriting from the Piece type, should a seq[seq[Piece]] be able to carry seq[Pawn], seq[Knight] etc? Coming from Java. https://media.discordapp.net/attachments/371759389889003532/899590748440264704/Screenshot_20211016_145604.png
[13:02:42] <FromDiscord> <Rika> Master says 6 months ago versus final 4 months ago
[13:02:53] <PMunch> Final is the version I cleanup up off-camera where everything works and has a layout I can actually use
[13:03:05] <FromDiscord> <Rika> In reply to @Smarc "Why is this not": Full error needed
[13:03:15] <FromDiscord> <Rika> Okay
[13:03:16] <PMunch> I plan to do a video where I go through the changes and then make master into final
[13:03:21] <FromDiscord> <Rika> Okay
[13:03:41] <PMunch> But suddenly life happened and I haven't streamed anything for apparently 6 months..
[13:03:46] <FromDiscord> <Rika> I still need to think of how to split the workload between the screen handling code and the polling…
[13:04:13] <FromDiscord> <Rika> Though given that I need to buy the hardware first
[13:05:16] <FromDiscord> <Smarc> In reply to @Rika "Full error needed": Error: type mismatch: got <seq[seq[Piece]], seq[Pawn]>
[13:05:42] <PMunch> Emphasis on the "Full" part
[13:06:21] <FromDiscord> <Smarc> sent a code paste, see https://play.nim-lang.org/#ix=3C72
[13:07:53] <PMunch> Yeah, first argument is a seq[seq[Piece]]
[13:07:59] <PMunch> So T is seq[Piece]
[13:08:44] <FromDiscord> <Smarc> So shouldnt a seq[seq[Piece]] be able to carry seq[Pawn], seq[Knight] etc.?
[13:08:46] <PMunch> But the second argument is not openArray[T] (which would be seq[seq[Pawn]])
[13:08:54] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[13:08:54] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[13:08:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:09:11] <PMunch> Oh wait, oops
[13:09:24] <PMunch> Sorry I read that error wrang
[13:10:29] <FromDiscord> <Smarc> No worries, I think I just have a little comprehension issue here :)
[13:13:32] <FromDiscord> <Rika> The issue is inheritance doesn’t work through a generic I believe
[13:14:03] <PMunch> Yeah seems like it's something like that..
[13:14:08] <FromDiscord> <Rika> You can add a Pawn to a seq[Piece] but not a seq[Pawn] to a seq[seq[Piece]]
[13:14:51] <PMunch> Typically you'd use variance objects for this in Nim
[13:16:07] <FromDiscord> <Smarc> hm okay, so if I unwrap the seq[Pawn] and add every element singlehanded into a seq[Piece] it should work like this?
[13:16:21] <FromDiscord> <Rika> Think so
[13:17:00] <FromDiscord> <Smarc> Yep, seems to work. Alright, you learn something new every day, thank you guys once more!
[13:23:10] <PMunch> You can always cast the sequence: https://play.nim-lang.org/#ix=3C78
[13:23:44] <PMunch> Since these are ref objects they are stored as pointers, so a seq[Piece] and a seq[Pawn] should be identical in memory.
[13:25:06] <FromDiscord> <Smarc> Ah, was trying to cast it beforehand but failed, I think this way it is even more convenient
[13:25:26] <PMunch> You can of course also put that logic in a template
[13:26:05] <FromDiscord> <Smarc> Do you mind giving me a mini-example of that as well? I am not familiar with nim templates yet
[13:26:44] <PMunch> https://play.nim-lang.org/#ix=3C79
[13:27:03] <PMunch> I mean that could also just be a procedure
[13:27:09] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[13:27:16] <PMunch> It will 99% sure be inlined by the compiler anyways
[13:27:54] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[13:27:54] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[13:27:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:30:25] *** Joins: arkurious (~arkurious@user/arkurious)
[13:34:58] <FromDiscord> <Smarc> Thanks a lot!
[13:44:55] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[13:45:43] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[13:45:43] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[13:45:43] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:51:44] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 258 seconds)
[13:55:56] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[13:55:56] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[13:55:56] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:11:39] <FromDiscord> <Hamid Bluri> hey, can i pass data to a channel from multiple threads?
[14:14:22] <FromDiscord> <Hamid Bluri> i mean can it cause any problems? or i should  use separated channels?
[14:14:50] <FromDiscord> <Rika> Behaviour is undocumented for such case, expect issues
[14:14:55] <FromDiscord> <Rika> Afaik
[14:15:22] <FromDiscord> <Rika> There’s a third party package that implements MCMP queues I believe
[14:15:46] <FromDiscord> <Hamid Bluri> `loony` ?
[14:15:53] <FromDiscord> <Rika> I think so yes
[14:16:05] <FromDiscord> <Rika> May be what you want though what you described is MCSP
[14:16:11] <FromDiscord> <Rika> Wrong order
[14:16:15] <FromDiscord> <Rika> SCMP
[14:16:28] <FromDiscord> <Hamid Bluri> thank u
[14:17:23] <FromDiscord> <Hamid Bluri> SCMP: A Single-Chip Message-Passing Parallel ?
[14:17:28] <FromDiscord> <Hamid Bluri> (edit) 04removed "A"
[14:18:04] <FromDiscord> <Rika> Oops sorry might have misunderstood what MCMP meant
[14:18:18] <FromDiscord> <Rika> But I meant single consumer multi producer
[14:18:24] <FromDiscord> <Rika> My bad
[14:18:27] <FromDiscord> <Hamid Bluri> ok 👍
[14:18:27] <FromDiscord> <Rika> I don’t do threading
[14:18:28] <PMunch> Single Consumer Multiple Producer*
[14:18:48] <FromDiscord> <Hamid Bluri> blame google not me 😄
[14:18:57] <PMunch> Nah you were right @Rika
[14:19:05] <FromDiscord> <Rika> Okay
[14:19:22] <PMunch> @Hamid Bluri just wondered what that was short for and googled, got the first thing which is a different thing
[14:20:55] <FromDiscord> <Rika> Okay
[14:21:12] <FromDiscord> <Hamid Bluri> did you google it ? ↵SCMP =>for me=> South China Morning Post↵scmp in computer => A Single-Chip Message-Passing Parallel Computer
[14:21:18] <FromDiscord> <Rika> Lol
[14:22:10] <PMunch> MCMP is Multiple Consumer, Multiple Producer which is the more common acronym. @Rika just rewrote it to be what you're trying to do
[14:22:37] <PMunch> I mean MCMP is also Munich Center for Mathematical Philosophy
[14:22:46] <PMunch> But that is obviously not what were talking about
[14:23:43] <PMunch> If you Google MCMP queue you get related results
[14:25:59] <FromDiscord> <Hamid Bluri> my every day programming in Nim is a new journey : D
[14:26:59] <FromDiscord> <Hamid Bluri> im really happy that i found out Nim
[14:28:02] <PMunch> It's a great language :)
[14:29:04] <FromDiscord> <Rika> There are still some things I wish were in Nim but sooner or later they’ll be in I hope
[14:29:28] <FromDiscord> <Rika> Nothing comes closer to ideal than Nim, for me
[14:29:40] <PMunch> Ditto
[14:29:44] <PMunch> Is it perfect? No
[14:29:49] <PMunch> But it's the closest thing I've found
[14:29:58] <FromDiscord> <Hamid Bluri> yeah : D
[14:40:56] <PMunch> Hmm, how can I get the inode number of a file in Nim?
[14:42:26] <FromDiscord> <Rika> Stat?
[14:42:37] <FromDiscord> <Rika> Under posix
[14:42:55] <FromDiscord> <Rika> I think that’s wrong
[14:42:59] <FromDiscord> <Rika> I forgot already asked
[14:43:04] <FromDiscord> <Rika> (edit) 04removed "asked"
[14:43:12] <FromDiscord> <Rika> My keyboard spat out an extra word for some reason
[14:44:15] <FromDiscord> <Rika> No I’m right I believe
[14:45:25] <FromDiscord> <Rika> Stat, then st_ino
[14:45:57] <FromDiscord> <Rika> PMunch “Stat, then st_ino”
[14:46:33] <PMunch> Aha, st_ino seems like the right thing
[14:47:09] <FromDiscord> <Rika> Referenced from https://man7.org/linux/man-pages/man7/inode.7.html
[15:10:27] <FromDiscord> <NullCode1337> hi
[15:10:32] <FromDiscord> <Rika> Hello
[15:10:36] <FromDiscord> <NullCode1337> so yeah my account is disabled
[15:10:40] <FromDiscord> <NullCode1337> alt time
[15:10:55] <FromDiscord> <NullCode1337> don't tell discord
[15:11:07] <FromDiscord> <NullCode1337> I'd hate it if this gets disabled too
[15:11:16] <PMunch> What'd you do to get your account disabled?
[15:11:25] <FromDiscord> <Rika> He hacked discord
[15:12:13] <FromDiscord> <NullCode1337> In reply to @PMunch "What'd you do to": got into their internal servers and gave myself 99 years of nitro
[15:12:22] <FromDiscord> <NullCode1337> just kidding its because of my github
[15:12:56] <PMunch> Because of your GitHub?
[15:13:22] <FromDiscord> <Rika> The malware repositories I assume
[15:14:36] <PMunch> But why would Discord ban someone for what they do on another platform?
[15:15:59] <FromDiscord> <NullCode1337> the repos are related to discord
[15:16:02] <FromDiscord> <NullCode1337> not in a good way
[15:16:37] <PMunch> Ahh, I see
[15:19:52] <FromDiscord> <Rika> Why did you link your account again
[15:19:54] <FromDiscord> <Rika> On your alt
[15:20:04] <FromDiscord> <Rika> If they banned you for your GitHub account
[15:21:48] <FromDiscord> <NullCode1337> i did?
[15:21:49] <FromDiscord> <NullCode1337> FUCK
[15:22:36] <PMunch> Haha!
[15:22:48] <FromDiscord> <NullCode1337> done
[15:22:52] <FromDiscord> <NullCode1337> removed
[15:23:06] <PMunch> *Swing!* *thump* that's the ban-hammer coming down on you
[15:23:44] <FromDiscord> <NullCode1337> lmfao
[15:30:35] <FromDiscord> <tandy> `seq[(string, string)]` can you index a seq like this by content?
[15:30:42] <FromDiscord> <tandy> im using this seq to store http headers
[15:30:55] <FromDiscord> <tandy> i need to get the `x-ratelimit-reset` header value
[15:31:41] <FromDiscord> <Rika> Just use a table
[15:32:55] <FromDiscord> <tandy> are tables imutable
[15:33:03] <FromDiscord> <Rika> They can be
[15:33:22] <FromDiscord> <tandy> i dont want imutable, thats cool then
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:48:00] *** Joins: rockcavera (~rc@192.12.113.192)
[15:48:00] *** Quits: rockcavera (~rc@192.12.113.192) (Changing host)
[15:48:00] *** Joins: rockcavera (~rc@user/rockcavera)
[15:55:16] <FromDiscord> <Fancy> I can't compile nim to es6?
[16:01:21] <FromDiscord> <Rika> no
[16:01:37] <FromDiscord> <Rika> afaik only target is es3
[16:05:59] <FromDiscord> <Fancy> Damn is there any workaround for it?
[16:08:26] <FromDiscord> <Fancy> I am guessing I won't be able to use any es6 modules then
[16:09:24] <FromDiscord> <Rika> you can write es6 in the file, its just that code will compile into es3 (you can use emit to insert js code)
[16:09:32] <FromDiscord> <Rika> or exportc
[16:10:21] <FromDiscord> <rxx> @tandy#0000 @tandy#0000 @tandy#0000 wtf
[16:11:14] <FromDiscord> <Rika> ?
[16:13:35] <FromDiscord> <Fancy> In reply to @Rika "you can write es6": Do you mean in a separate file?
[16:14:06] <FromDiscord> <Rika> wdym? i dont get what you mean
[16:14:25] <FromDiscord> <Rika> nim code compiled to js will compile to es3, but you can do `{.emit: "js code here".}` to insert js code
[16:15:08] <FromDiscord> <tandy> wat↵(@rxx)
[16:15:22] <FromDiscord> <Fancy> Ahhh sorry I think I misread/misunderstood before
[16:15:48] <FromDiscord> <rxx> @tandy#0000 wtf is happening what bot are you who are you
[16:15:53] <FromDiscord> <Fancy> That is a handy feature
[16:16:32] <FromDiscord> <Rika> he;s on matrix, not a bot
[16:16:39] <FromDiscord> <Rika> another chat protocol
[16:16:42] <FromDiscord> <tandy> lol
[16:16:43] <FromDiscord> <haxscramper> People are blown away by bridgfe
[16:17:13] <FromDiscord> <tandy> i am a sentient noob nim programer bot
[16:17:13] <FromDiscord> <Rika> lol
[16:17:28] <FromDiscord> <Rika> pro gamer
[16:17:41] <FromDiscord> <tandy> lol↵(@Rika)
[16:17:53] <FromDiscord> <rxx> ?ban @tandy#0000
[16:17:55] <FromDiscord> <Fancy> So what I understand is that I can use emit to insert es6 within the file
[16:18:03] <FromDiscord> <Fancy> Correct?
[16:18:04] <FromDiscord> <Rika> yes
[16:18:05] <FromDiscord> <Rika> yes
[16:18:10] <FromDiscord> <Fancy> Ok great
[16:18:16] <FromDiscord> <Rika> i can say yes one more time if you want
[16:18:23] <FromDiscord> <Rika> 😛
[16:18:26] <FromDiscord> <Fancy> Hahahahaha
[16:18:29] <FromDiscord> <Fancy> yes
[16:18:32] <FromDiscord> <Fancy> Xd
[16:18:37] <FromDiscord> <Fancy> (edit) "Xd" => "XD"
[16:19:05] <FromDiscord> <tandy> how do you get nimble install `requires` ? ive done a `nimble install -d -Y` but ci stil says deps arent there
[16:19:10] <FromDiscord> <tandy> jsony specificaly..
[16:19:32] <FromDiscord> <tandy> which is on nimble packages so not sure why it wouldnt work
[16:20:18] <PMunch> Hmm, do you have jsony in your requires?
[16:21:48] <PMunch> And @rxx, why would we ban a user who's on a different network using the official bridges?
[16:22:02] <FromDiscord> <Rika> i think theyre joking
[16:24:07] <PMunch> Not the first time someone suggest kicking the noisy "bot" :P
[16:24:34] <PMunch> Or be astounded by how clever our bots are when they get their questions answered :P
[16:32:15] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:34:43] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[17:10:58] <FromDiscord> <tandy> yep↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:11:35] <FromDiscord> <tandy> oh i didnt have it formated correctly, it needed to be `requires "jsony"`
[17:11:47] <PMunch> Yup, what did you have?
[17:12:14] <PMunch> Hmm, Yardanico would it be possible for the bot to do replies better?
[17:12:37] <PMunch> By the way, got Sciter to work?
[17:14:10] <FromDiscord> <tandy> `requires jsony` lol↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:18:08] <PMunch> Aha :P
[17:18:21] <PMunch> And that didn't throw an error?
[17:19:39] *** Joins: Guest84 (~Guest84@116.75.100.55)
[17:21:24] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[17:25:01] *** Quits: Guest84 (~Guest84@116.75.100.55) (Quit: Client closed)
[17:25:02] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[17:25:41] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[17:25:41] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[17:25:41] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:26:52] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[17:27:24] *** Joins: neurocyte0132889 (~neurocyte@46.243.83.114)
[17:27:24] *** Quits: neurocyte0132889 (~neurocyte@46.243.83.114) (Changing host)
[17:27:24] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:31:07] <FromDiscord> <tandy> nop, should i report a bug?↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:33:47] <PMunch> Hmm, mine throws an error? http://ix.io/3C8i
[17:34:06] <PMunch> Old Nimble version? Or do you import jsony into your .nimble file or declare it as an identifier anywhere?
[17:35:46] <FromDiscord> <no name fits> sent a code paste, see https://play.nim-lang.org/#ix=3C8j
[17:36:23] <FromDiscord> <no name fits> And the order of the lines is random
[17:36:31] <PMunch> performant: switch, readable: depends, maintainable: depends
[17:36:41] <PMunch> How many different keys do you have?
[17:37:20] <FromDiscord> <no name fits> It's different from file to file, and the amount of keys might increase, which is why I thought of a table
[17:37:39] <FromDiscord> <no name fits> Like the one I'm processing right now just has two, but another one has five and so on
[17:38:16] <FromDiscord> <Rika> are they well defined
[17:38:20] <FromDiscord> <no name fits> And I thought about running them through a generic proc, but sometimes the value is a string, or a list of strings or something else
[17:38:21] <PMunch> Well for a switch you need to implement the logic in a way that it's all known on compile-time
[17:38:34] <FromDiscord> <Rika> as in can you distinguish which value needs which proc without runtime reading
[17:38:35] <FromDiscord> <no name fits> Yes, they're all predefined
[17:38:35] <PMunch> For a Table you could theoretically have them get registered on runtime
[17:38:38] <FromDiscord> <Rika> okay
[17:38:45] <FromDiscord> <no name fits> I can distinguish at build time
[17:38:46] <FromDiscord> <Rika> then a switch is prolly best
[17:38:51] <FromDiscord> <no name fits> Alright
[17:38:56] <FromDiscord> <no name fits> Thanks for the input
[17:39:08] <FromDiscord> <Rika> you can always easily swap if it gets unwieldy
[17:39:17] <PMunch> But maybe but the switch in a proc or template so you just do key.callProc() or something similar
[17:39:24] <FromDiscord> <no name fits> right, I was just thinking of a giant switch case at the end of it
[17:39:48] <FromDiscord> <no name fits> Do you have an example of that PMunch? I haven't used templates yet
[17:40:17] <PMunch> Just go for a proc then :P
[17:40:24] <FromDiscord> <no name fits> alright 🙂
[17:40:27] <FromDiscord> <no name fits> thanks again guys
[17:40:33] <PMunch> No problem :)
[17:46:48] <FromDiscord> <tandy> nop↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:47:02] <FromDiscord> <tandy> also i update nim with choosenim before running that
[18:13:00] <FromDiscord> <gerwy> Yooo↵fricking nimble page for Qt Creator
[18:13:00] <FromDiscord> <gerwy> https://doc.qt.io/qtcreator/creator-project-nimble.html
[18:13:28] <FromDiscord> <gerwy> It's that easy to use Qt with Nim
[18:13:30] <FromDiscord> <gerwy> (edit) "Nim" => "Nim?"
[18:16:43] <ehmry> how did that happen?
[18:17:17] <nrds> <06Prestige99> wow that's cool
[18:18:59] <FromDiscord> <haxscramper> No, we only have qml wrappers for now↵(@gerwy)
[18:19:17] <FromDiscord> <gerwy> Yeah i used that qml wrapper
[18:19:18] <FromDiscord> <haxscramper> It has been this way for the last five years IIRC, someone just wrote a Nim plugin for qt creator↵(<@709044657232936960_ehmry=5b=49=52=43=5d>)
[18:19:31] <FromDiscord> <gerwy> really struggled to get it to work but it does
[18:36:32] <FromDiscord> <qb> @lmariscal any plans to add glut to nimgl?
[18:37:59] <NimEventer> New Nimble package! nimfunge98 - A Funge-98 interpreter written in nim, see https://git.adyxax.org/adyxax/nimfunge98
[18:39:47] <FromDiscord> <Rika> oh my GOD NO
[18:40:38] <FromDiscord> <demotomohiro> If I remember correctly, GLUT is not maintained for long time and deprecated.↵glfw is actively maintained.
[18:50:35] <FromDiscord> <qb> Mkay, I'm still using glut to render fonts using `glutBitmapCharacter`
[18:51:04] <FromDiscord> <qb> (edit) "using" => "with"
[18:51:53] <FromDiscord> <Jonah> `quit(message)` prints to stderr instead of stdout like `echo` does unless you're in nimscript. the docs say↵> A shorthand for `echo(errormsg); quit(errorcode)`.↵is this intentional? seems like it should use stdout on success error code and stderr for anything else
[18:52:09] <FromDiscord> <Jonah> (edit) "error" => "exit"
[18:52:32] <FromDiscord> <lmariscal> Yeah, I feel like glwf already covers most of the important stuff, font rendering being the only one left out
[18:53:45] <FromDiscord> <lmariscal> I don't really see the merit in supporting glut, with it being heavily outdated
[18:57:46] <FromDiscord> <demotomohiro> How about to render text to memory and upload it to texture using  boxy or pixie?↵https://github.com/treeform/boxy
[18:59:41] <FromDiscord> <soupayan> Hi Members, I am a new joinee... I am learning nim and feels great.. Can anyone let me know if there is anything that nim can't do but rust can?
[19:02:52] <FromDiscord> <soupayan> also any good books I can follow or the nim website is enough?
[19:04:47] <FromDiscord> <Rika> `Can anyone let me know if there is anything that nim can't do but rust can`
[19:04:49] <FromDiscord> <Rika> you tell me
[19:04:50] <FromDiscord> <Rika> i dont know
[19:05:10] <FromDiscord> <Rika> rust can make you cry idk
[19:06:18] <FromDiscord> <demotomohiro> Nim can do what C can do. So what is rust can do but C cannot?
[19:07:58] <FromDiscord> <demotomohiro> I have learned Nim mostly with Nim manual and std library reference.↵https://nim-lang.org/docs/manual.html
[19:10:06] <FromDiscord> <soupayan> In reply to @Rika "rust can make you": touche to that..
[19:18:11] <FromDiscord> <tandy> has anyone written a jsony dumphook for renaming a field?
[19:21:18] <FromDiscord> <soupayan> sent a code paste, see https://play.nim-lang.org/#ix=3C94
[19:22:27] <Amun-Ra> rust can and will compile anything very slow, nim can't do that
[19:23:19] <Amun-Ra> soupayan: you can pass single argument without parentheses, 5.findMax 6 would work
[19:23:53] <FromDiscord> <soupayan> yes it did, but why not like echo specially when the docs say so
[19:24:37] <Amun-Ra> proc echo(x: varargs[typed, `$`]) {...}
[19:24:44] <Amun-Ra> varargs
[19:24:50] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/manual.html#procedures-command-invocation-syntax↵Please read this
[19:26:02] <FromDiscord> <demotomohiro> > This command invocation syntax also works for expressions, but then only a single argument may follow.
[19:28:29] <FromDiscord> <jfmonty2> Is it possible to apply the noInit pragma to just one field of an object? Or can it only be applied to a whole variable at once?
[19:31:06] <FromDiscord> <soupayan> In reply to @demotomohiro "https://nim-lang.org/docs/manual.html#procedures-co": ok.. so in this case it is parsed as echo(findMax(5),6) and thus the error
[19:37:05] <FromDiscord> <Rika> Amun-Ra nim compilation can be slow depending on if you're torturing the VM with insane macros
[19:40:15] <FromDiscord> <demotomohiro> In reply to @soupayan "ok.. so in this": yes
[19:44:22] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3C9c
[19:48:20] <FromDiscord> <jfmonty2> Right, that was what I was running into. But I didn't know if there was a different way to specify it that I was just missing.
[19:48:44] <FromDiscord> <jfmonty2> like `foo = Foo() {.noInit: Foo.x.}` or something
[20:01:14] <FromDiscord> <Rika> not possible afaik
[20:01:24] <FromDiscord> <Rika> i dont know of any plans either
[20:02:13] <FromDiscord> <jfmonty2> ok, fair enough. It's an edge case anyway, I guess I'll just have to make the whole thing uninitialized and then selectively initialize some fields but not others.
[20:02:37] <FromDiscord> <demotomohiro> As Nim initialize object types with memset C function, applying noinit pragma only to specific field might not be efficient.
[20:03:04] <FromDiscord> <jfmonty2> ah, that was my concern. Well, I guess I'll have to see.
[20:03:51] *** Joins: rockcavera (~rc@192.12.113.192)
[20:03:51] *** Quits: rockcavera (~rc@192.12.113.192) (Changing host)
[20:03:51] *** Joins: rockcavera (~rc@user/rockcavera)
[20:07:11] <FromDiscord> <jfmonty2> Yeah, seems to slow it down by a few percent, oh well
[20:47:24] <FromDiscord> <juan_carlos> In reply to @haxscramper "No, we only have": I have a Qt wrapper, just need help to finish it...
[20:47:34] <FromDiscord> <exelotl> interesting bug... 🤔
[20:47:36] <FromDiscord> <exelotl> https://play.nim-lang.org/#ix=3C9m
[20:48:11] <PMunch> @soupayan, Nim can compile to JS as well. Not sure if Rust can do that. Basically Nim targets C and JS, which mean you can run natively pretty much everywhere.
[20:48:20] <FromDiscord> <exelotl> if you move the {.compile.} block up top, the error goes away
[20:48:51] <PMunch> @exelotl, and what's the error?
[20:49:59] <FromDiscord> <exelotl> Error: Invalid node for enum type `nnkPragmaExpr`!
[20:50:06] <FromDiscord> <exelotl> in the call to parseEnum
[20:50:44] <FromDiscord> <exelotl> seems that the pragmas somehow got attached to the enum's AST nodes when they weren't supposed to
[20:52:25] <FromDiscord> <exelotl> seems to be a regression introduced in Nim 1.4
[20:52:26] <PMunch> Huh, that's odd
[21:06:30] <FromDiscord> <juan_carlos> If someone interested, ping me.
[22:25:22] <nixfreak_nim[m]> !help
[22:25:34] <nixfreak_nim[m]> !pkcs
[22:27:14] <nixfreak_nim[m]> !package pkcs
[22:30:22] <FromDiscord> <Rika> ?
[22:30:31] <FromDiscord> <Rika> there is no package searcher here
[22:30:43] <FromDiscord> <Rika> use nimble.directory or github or something
[22:34:46] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:35:49] *** Joins: xet7 (~xet7@user/xet7)
[23:11:03] *** Joins: lenis0012 (~lenis0012@88.202.167.177)
[23:13:58] *** Joins: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se)
[23:14:45] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 265 seconds)
[23:51:57] <nixfreak_nim[m]> I did and found bearSSL 
[23:52:20] <nixfreak_nim[m]> just no documentation so I need to look at source code and bearSSL API I guess 
