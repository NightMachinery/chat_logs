[00:02:02] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:23:57] <ilmu> does anyone know this paper that shows that a lisp-3 can be made equivalent to lisp-n?
[00:24:30] <ilmu> I heard a reference to it in a youtube video from some conference talk and thought it would be easy to find but now I can't even remember what youtube video it was
[00:30:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:30:06] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[00:32:39] <rotateq> i just know lisp-1, 1.5 and 2
[00:32:50] <rotateq> but even don't know how those types differ
[00:46:52] <pjb> rotateq: Please read: http://www.nhplace.com/kent/Papers/Technical-Issues.html
[00:46:59] <pjb> ilmu: ^ too
[00:47:49] <pjb> ilmu: how did you find com.informatimago.clext.pipe and com.informatimago.clext.queue ?
[00:57:33] <rotateq> Master Pitman again :)
[00:59:27] <rotateq> I wonder how he spends his days now.
[01:02:50] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[01:07:05] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:08:12] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[01:08:19] <rotateq> sorry i had to restart
[01:32:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:28:40] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[02:29:34] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) ()
[02:30:04] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[02:30:53] <alcaeus> Hello! Is anyone home?
[02:34:49] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (ERC (IRC client for Emacs 27.2))
[02:39:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:40:00] <rotateq> hmpf
[02:40:12] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[02:40:18] *** Joins: dra (~dra@2a04:4540:6420:3a00:b16a:478f:ee9c:ecfa)
[02:43:44] *** Joins: dre_ (~dre@2001:8003:c932:c301:d3de:95f8:8fd3:f662)
[03:07:26] *** Quits: dre_ (~dre@2001:8003:c932:c301:d3de:95f8:8fd3:f662) (Ping timeout: 245 seconds)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:42] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:44:57] *** Joins: dra_ (~dra@2a04:4540:6407:f800:b16a:478f:ee9c:ecfa)
[03:47:17] *** Quits: dra (~dra@2a04:4540:6420:3a00:b16a:478f:ee9c:ecfa) (Ping timeout: 240 seconds)
[04:14:12] *** Joins: dre_ (~dre@2001:8003:c932:c301:4b55:68b7:565f:5e8e)
[04:19:58] <ilmu> pjb I will try them and let you know (if that is what you mean?) but I also found out that I can use croatoan instead of cl-charms and postpone this multithread side-quest until I have a small MVP
[04:43:16] <ilmu> hmm the paper was interesting pjb but there is a more recent result that shows how to build an infinite tower of metainterpreters or whatever they call them if you have three namespaces (or so I was told in that youtube video) and I can't find it.
[04:43:59] <ilmu> I want to see if the idea is similar to 3sat being np complete while 2sat is nlogspace complete
[04:52:01] *** Quits: dra_ (~dra@2a04:4540:6407:f800:b16a:478f:ee9c:ecfa) (Remote host closed the connection)
[04:58:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:58:43] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[04:59:45] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:21:26] *** Quits: dre_ (~dre@2001:8003:c932:c301:4b55:68b7:565f:5e8e) (Ping timeout: 268 seconds)
[05:22:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:22:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:29:23] *** Joins: dre_ (~dre@2001:8003:c932:c301:4ac5:c2f4:60c3:ddf6)
[05:50:39] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[06:33:35] *** Quits: dre_ (~dre@2001:8003:c932:c301:4ac5:c2f4:60c3:ddf6) (Ping timeout: 268 seconds)
[06:41:08] *** Joins: dre_ (~dre@2001:8003:c932:c301:5789:64a6:ecde:50e0)
[06:49:37] *** Quits: sts-q (~sts-q@91.200.108.139) (Ping timeout: 240 seconds)
[06:54:45] *** Joins: sts-q (~sts-q@212.53.219.165)
[07:10:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:15:00] *** Quits: dre_ (~dre@2001:8003:c932:c301:5789:64a6:ecde:50e0) (Remote host closed the connection)
[07:30:16] <beach> Good morning everyone! 
[07:52:32] *** Joins: ilmu1 (~ilmu@176.76.240.80)
[07:55:17] *** Quits: ilmu (~ilmu@176.76.243.206) (Ping timeout: 240 seconds)
[08:08:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:44:18] *** Joins: Oladon (~olad@98.43.81.226)
[09:03:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:08:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:13:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:47:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[09:48:54] *** Joins: aeth (~aeth@user/aeth)
[10:15:53] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[10:16:30] *** Joins: Jing (~hedgehog@125.105.141.97)
[10:32:32] *** Joins: treflip (~user@user/treflip)
[10:33:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:37:39] *** Quits: dave-from-the-k (~user@80.227.170.170) (Remote host closed the connection)
[11:19:51] <lisp123> Good morning Beach!
[11:33:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:47:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:52:44] *** Joins: shka (~herr@109.231.0.226)
[12:06:10] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:13:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:24:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:06:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:17:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[14:23:48] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:26:03] *** Joins: jujumambo (~user@95.79.32.99)
[14:26:11] *** Quits: jujumambo (~user@95.79.32.99) (Remote host closed the connection)
[15:18:57] *** Joins: neceve (~quassel@2.26.93.228)
[15:30:48] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:10:29] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[16:11:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:55:30] *** Joins: nexeq-pc (~nexeq-pc@user/nexeq)
[17:13:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:23:57] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[17:24:22] *** Joins: nexeq (~nexeq@user/nexeq)
[18:11:44] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[18:11:59] <nij-> I'm looping over a higher-dimensional domain.. like this https://bpa.st/YI2A
[18:12:16] <nij-> Is there anyway to optimize the code? It gets too nested and the width of code is very long.
[18:12:36] <nij-> By the way (loop for a .. for b.. for c.. ) doesn't work.
[18:14:31] <beach> Of course. 
[18:14:41] <beach> The standard way is to break things up into functions.
[18:15:15] <beach> (loop for a below rank always (f a))
[18:15:48] <beach> (defun f (a) (loop for b below rank always (g a b)))
[18:16:06] <beach> (defun g (a b) (loop for c below rank always (h a b c)))
[18:16:07] <beach> etc.
[18:16:55] <beach> By the way, the choice of the identifier RANK is a bit strange.  
[18:16:56] <beach> And (= 0 ...) is better expressed as (zerop ...)
[18:17:20] <nij-> I like the last point.
[18:17:26] <beach> There is a general rule in programming that one should choose the most specific construct that will have the desired effect.
[18:18:02] <beach> "rank" is a term in Common Lisp and it means the number of dimensions in an array.
[18:18:18] <nij-> Oh no. I rebound that as a local var.
[18:18:31] <beach> So?
[18:18:40] <nij-> Maybe I should use another name.
[18:19:23] <beach> Unless you have very good reasons (like a library that calls it rank and that is not a Common Lisp library), it is best to use words according to the meaning in the language you use.
[18:19:42] <nij-> Yes.
[18:19:54] <beach> I mean (defun (f standard-generic-function) (+ standard-generic-function 3)) doesn't look good.
[18:20:10] <nij-> I'm still looking for a better way. Let me reduce it to this question:
[18:20:35] <nij-> How to use loop to quickly construct the list ((0 0 0) (0 0 1) (0 0 2) (0 1 0) ... (2 2 2))?
[18:20:50] <nij-> (so the length is 3^9)
[18:21:22] <beach> Why would you do that if the technique I just told you works without actually constructing the lists?
[18:22:09] <beach> ... and I fixed your code width too.
[18:22:23] <nij-> Because if one day I have not only (a b c d x) to loop over, but rather (a b c d e .. z).. then I have to write 25 auxiliary functions.
[18:22:42] <beach> So now you changed the requirements.  Brilliant!
[18:23:17] <beach> Then write a macro to generate the entire thing instead.  No lists, and no auxiliary functions. 
[18:23:17] *** Joins: vegai (vegai@kapsi.fi)
[18:23:37] <vegai> hey. How should I typically restart a sly when I managed to kill my sbcl process
[18:23:59] <beach> Same way you start it the first time?
[18:24:13] <vegai> C-c C-z tells me "No current SLY connection." and M-x sly-restart-inferior-lisp does nothing
[18:24:27] <nij-> M-x sly
[18:24:28] <vegai> that way (opening a .lisp file) doesn't seem to do anything
[18:24:43] <vegai> nij-: ah, right. Thanks!
[18:24:53] <beach> Isn't that what I just said?
[18:24:58] <vegai> beach: no
[18:25:20] <beach> How do you start it the first time then?
[18:25:30] <nij-> vegai I'm also curious
[18:25:31] <vegai> by opening a .lisp file
[18:25:51] <nij-> Oh.
[18:25:57] *** Joins: treflip (~user@user/treflip)
[18:26:08] <vegai> I'm on doom emacs, perhaps it set something up for me
[18:26:11] <beach> And that gives you the REPL?  That's news to me.
[18:26:15] <nij-> However, notice that `M-x sly` might not connect the file to the now newly opened sbcl.
[18:26:40] <nij-> beach yeah there are packages that help us do that
[18:26:42] <vegai> yeah, seems so
[18:26:51] <beach> I see.
[18:26:56] <nij-> Open a .lisp file => connect to sly automatically.
[18:27:09] <nij-> So we can evaluate in that buffer without going to the repl.
[18:28:00] <vegai> well, ok, I guess I was lying a bit. I need to do C-c C-z to actually get the repl
[18:28:06] <vegai> but it's on the background already at that point
[18:30:14] <beach> nij-: So anyway, generate the entire thing using a macro.
[18:31:24] <ilmu1> nij- you could write so many different solutions for this "generating every word from alphabet X of length y" (example you gave was {0,1,2} and 3
[18:32:00] <ilmu1> you can write something like a cartesian product and use recru
[18:32:16] <ilmu1> recursion or you can do nested for loops like you were doing 
[18:32:26] *** ilmu1 is now known as ilmu
[18:36:27] <ilmu> (defun recursive-cart-prod (depth alphabet) (if (zerop depth) '() (dotimes (i (length alphabet)) (cons (nth i alphabet) (recursive-cart-prod (- depth 1) alphabet)))) ;; I just wrote this into weechat so it probably has syntax errors but this is a rough solution
[18:37:25] <ilmu> no probably I didn't think it through well enough and it needs a flatten somewhere since it creates a tree with width (length alphabet) at each level
[18:38:08] <nij-> Oh sure. Using this I don't even need to generate {0,1,2}^9.
[18:38:15] <nij-> I can do this.
[18:38:38] <ilmu> yeah it has a bug.. missing a thing that collects the branches into a single structure at each level
[18:38:49] <nij-> I guess there should be a loop construct similar to something like
[18:38:53] <ilmu> and probably more but you get it
[18:39:02] <nij-> (loop for a in list for b in list .. for z in list.. do stuff.)
[18:39:23] <nij-> But this "multiple for" form does not do what I want.
[18:40:10] <ilmu> build tree with recursion --> flatten it
[18:41:12] <nij-> There is a nice nested-loop macro in https://lispcookbook.github.io/cl-cookbook/arrays.html
[18:42:33] <ilmu> aha nice, I've never used multi-dim arrays (or arrays much, I'm a total newb).
[18:42:56] <ilmu> ok I have used the datastructure ofc but not much in common lisp, so far everything is just list and cons and car and cdr
[18:43:15] <nij-> I wonder why loop doesn't have this built in:
[18:43:17] <ilmu> I want to start using methods and CLOS though since I feel like I often want to model things like that rather than feel stuck i na scheme
[18:43:20] <nij-> (loop (a b c d) ...)
[18:43:31] <ilmu> I never use loop I think it's confusing.
[18:43:46] <ilmu> too much dsl
[18:45:02] <nij-> I am getting used to it slowly..
[18:45:08] <nij-> Sometimes it lets you write clean code.
[18:46:07] <rotateq> you would also need (and want) real combinatorial algorithms for such things above
[18:46:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:46:49] <ilmu> what is a "real combinatorial algorithm" something like making a permutation by growing a heap?
[18:48:10] <rotateq> no such algorithms that Knuth gives in TAoCP
[18:48:36] <rotateq> "and with just one simple thought you can be more efficient about 1 million times in some cases"
[18:48:52] *** Joins: aeth (~aeth@user/aeth)
[18:48:56] <ilmu> I'm asking cause I'm taking combinatorics this semester and while I can relate it in many ways to computers the teachers are mathematicians not lispers
[18:49:06] <ilmu> the weeks we spend on catalan numbers were fun
[18:50:59] <nij-> What interests me the most in combinatorics: generating function, mobius inversion (Rota's philosophy), incidence hopf algebra, and something new that's called a hopf monoid.
[18:52:09] <ilmu> I really like the Lah numbers and the stirling numbers and the correspondence between the rising and falling factorials vs the normal polynomial base
[18:52:30] <ilmu> also the relation between the exponential and ordinary generating functions and how it relatest to relation between lists and sets
[18:52:50] <nij-> Yeah it's very nice.
[18:52:58] <nij-> Tried Knuth's concrete mathematics?
[18:53:25] <nij-> You'll get blown away in chapter 5 and 6.
[18:53:38] <nij-> It links to some bigger themes called hypergeometric functions.
[18:53:58] <nij-> IMO Zeilberger's "A=B" will be a good book after reading Knuth's CM.
[18:54:03] <ilmu> I almost believe lisp works so good because it kinda embodies the list<->set correspondence because you make sets using binary trees
[18:54:38] <ilmu> cool I'll put this rec in some text file and see if I stumble on it
[18:55:02] <ilmu> right now I'm in a deep hole of sth else xD
[18:55:11] <nij-> XD
[18:55:30] <nij-> I am trained as a mathematician, so I studied these much later in my career.
[18:55:47] <nij-> I first took complex analysis and studied a proof of the prime number theorem using it.
[18:56:04] <nij-> Years after that I notice most of the magic are "just combinatorial".
[18:56:17] <ilmu> I'm doing a MS in math but my extracurriculars have been very CS focused since I was a teenager (altho less doing than reading) but my BS was also math
[18:57:02] <ilmu> for me this (enumerative) combinatorics class has mostly been eye opening w.r.t. how type theory is awesome (principle incl/excl etc.)
[18:57:38] <ilmu> it's basically a class on encodings
[18:57:40] <nij-> Yeah. Most good math courses are eye opening to me.
[18:57:58] <ilmu> yeah iztru
[18:58:06] <nij-> data, transformation, proof
[18:58:26] <ilmu> data, predicate, procedure
[18:58:58] <nij-> good to talk to you. gotta go
[18:59:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[18:59:05] <ilmu> (y)
[19:29:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:40:30] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[19:40:30] *** Quits: nexeq-pc (~nexeq-pc@user/nexeq) (Read error: Connection reset by peer)
[19:40:44] *** Joins: nexeq (~nexeq@user/nexeq)
[19:46:13] *** Joins: nexeq-pc (~nexeq-pc@user/nexeq)
[19:52:36] *** Joins: ilmu1 (~ilmu@176.76.243.22)
[19:55:17] *** Quits: ilmu (~ilmu@176.76.240.80) (Ping timeout: 240 seconds)
[19:58:20] *** Joins: dra (~dra@2a04:4540:6407:f800:ddd1:8fac:a809:c56e)
[19:59:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[20:01:11] *** Joins: aeth (~aeth@user/aeth)
[20:27:39] *** Quits: nexeq-pc (~nexeq-pc@user/nexeq) (Quit: leaving)
[20:27:43] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[20:29:33] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[20:30:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:40:49] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[20:41:59] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[20:42:53] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[20:43:19] *** Joins: neceve (~quassel@2.26.93.228)
[20:43:30] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[20:43:59] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:04:41] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Quit: Leaving)
[21:05:10] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:06:50] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[21:07:17] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:08:36] *** Quits: dra (~dra@2a04:4540:6407:f800:ddd1:8fac:a809:c56e) (Quit: Leaving)
[21:08:44] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[21:09:09] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:10:44] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[21:11:21] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:13:14] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[21:13:44] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:15:14] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[21:24:39] *** Joins: nexeq-pc (~nexeq@user/nexeq)
[21:25:54] *** Quits: nexeq-pc (~nexeq@user/nexeq) (Remote host closed the connection)
[21:26:20] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[21:48:22] *** Joins: dra (~dra@2a04:4540:6407:f800:2d34:8e98:9953:8f90)
[21:56:39] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[22:05:53] *** Quits: Jing (~hedgehog@125.105.141.97) (Ping timeout: 256 seconds)
[22:54:10] *** Joins: ilmu2 (~ilmu@176.76.241.166)
[22:55:07] *** Quits: ilmu1 (~ilmu@176.76.243.22) (Ping timeout: 250 seconds)
[23:25:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:27:44] *** Joins: aeth (~aeth@user/aeth)
