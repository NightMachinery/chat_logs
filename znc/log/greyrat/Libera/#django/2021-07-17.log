[00:02:22] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-026.46.114.pool.telefonica.de)
[00:05:46] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[00:07:11] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:14:46] *** Quits: clawh (~clawh@185.244.214.60) (Quit: Leaving)
[00:14:46] <tone0> szunami #django-dev
[00:15:07] *** Joins: clawh (~clawh@185.244.214.60)
[00:15:23] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[00:15:38] *** Joins: clawh (~clawh@185.244.214.60)
[00:16:00] *** Joins: qwfz (~clawh@185.244.214.60)
[00:16:11] *** Quits: qwfz (~clawh@185.244.214.60) (Remote host closed the connection)
[00:18:05] *** Joins: Crassus (~Crassus@user/crassus)
[00:20:02] *** Quits: Snaffu (Snaffu@gateway/vpn/protonvpn/snaffu) (Quit: leaving)
[00:20:29] *** Joins: thiras (~thiras@user/thiras)
[00:20:35] *** Quits: clawh (~clawh@185.244.214.60) (Ping timeout: 255 seconds)
[00:22:49] <szunami> thanks tone0
[00:24:00] *** Joins: thiras_ (~thiras@user/thiras)
[00:24:53] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:26:42] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[00:28:31] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 258 seconds)
[00:33:06] *** Joins: serghei1 (~serghei@user/serghei)
[00:38:22] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 268 seconds)
[00:48:50] <wallbroken> {% if shoe|getUserState:user  == "Ordered" or shoe|getUserState:user  == "Delivered" %}
[00:48:55] <wallbroken> what wrong in this OR ?
[00:49:14] <wallbroken> its the right way to do it?
[01:13:43] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[01:14:55] <fakegermano> some refs to help you
[01:14:58] <fakegermano> https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#complex-expressions
[01:16:42] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[01:16:49] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[01:16:54] <fakegermano> a better way to do this you are doing is to encapsulate that "shoe|getUserState:user" in a {% with <> as state %} and then do the {% if state == A or state == B %} for example
[01:19:16] <fakegermano> or even implement a template filter that just returns the correct boolean (like "shoe|isUserStateOk:user") for example
[01:19:21] <fakegermano> there are many ways to do this
[01:22:34] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 258 seconds)
[01:32:40] *** Joins: molyvius (~molyvius@user/molyvius)
[01:37:55] <wallbroken>  queryset = self.request.user.delivered_items.exclude(pk__in=self.request.user.terminated_items.values_list('pk'))
[01:38:09] <wallbroken> what if i want to add also ordered_items.exclude?
[01:40:54] *** chowmein__ is now known as chowmeined
[01:45:03] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-026.46.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[01:45:50] *** Joins: Thanattt (~Thanatos@102.89.2.158)
[01:46:11] <fakegermano> queryset.union(self.request.user.ordered_items.exclude(<...>))
[01:48:13] *** Quits: fakegermano (~user@2804:431:e7cd:c7c3:e7ed:cff9:4074:d12d) (Remote host closed the connection)
[01:48:27] *** Joins: serghei1 (~serghei@user/serghei)
[01:48:36] *** Joins: strudl (~strudl@user/strudl)
[01:48:36] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[01:48:51] *** Quits: ThanatosJ (~Thanatos@197.210.55.212) (Read error: Connection reset by peer)
[01:49:09] *** Joins: strudl (~strudl@user/strudl)
[01:49:25] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[01:54:38] *** Quits: molyvius (~molyvius@user/molyvius) (Ping timeout: 255 seconds)
[01:55:11] *** Joins: ThanatosJ (~Thanatos@102.89.2.32)
[01:55:38] *** Quits: szunami (~szunami@69.5.120.124) (Quit: Client closed)
[01:55:55] *** Quits: Thanattt (~Thanatos@102.89.2.158) (Ping timeout: 258 seconds)
[02:01:36] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:03:44] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[02:06:39] *** Joins: fakegermano-m (~at@2804:431:e7cd:c7c3:c00d:eb91:2bf2:7ffa)
[02:08:04] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:11:53] <wallbroken> fakegermano-m: is not working
[02:12:41] <wallbroken> oh ok
[02:12:43] <wallbroken> now works
[02:12:44] <wallbroken> thanks
[02:12:54] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:14:02] <fakegermano-m> np
[02:14:24] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:20:20] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 265 seconds)
[02:21:55] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:24:09] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 255 seconds)
[02:26:01] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:27:33] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[02:30:22] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:37:50] *** Quits: unixbeard (~ironbeard@neuro.mancer.org) (Quit: .)
[02:37:57] <glik22> where is a good place to put code that should only execute once when the server is started? AppConfig.ready() won't work for me because i need to interact with manager methods.
[02:38:08] *** Quits: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[02:38:55] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[02:42:14] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:44:59] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 258 seconds)
[02:45:01] <FunkyBob> glik22: why does that make .ready bad?
[02:45:03] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 268 seconds)
[02:45:11] <FunkyBob> all y our models should be ready by then
[02:47:28] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:49:44] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[02:51:32] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[02:51:58] *** Joins: Thanattt (~Thanatos@102.89.2.204)
[02:53:25] *** Quits: ThanatosJ (~Thanatos@102.89.2.32) (Ping timeout: 268 seconds)
[02:53:30] <Steve-Dusty> is there a good updated blog/guide that can teach me how to deploy django app to production?
[02:54:31] *** Joins: maks25 (~maks25@ip-199-66-114-46.fibre.fibrestream.ca)
[02:54:45] <b-rex> https://docs.djangoproject.com/en/3.2/howto/deployment/
[02:54:52] <b-rex> blogs are shit
[02:54:59] <b-rex> use real docs
[02:56:26] <Steve-Dusty> https://dpaste.org/2y80
[02:57:02] <GinFuyou> I prefer django-classy-settings
[02:57:18] <Steve-Dusty> Can I configure database like this for PostgreSQL in Heroku?
[02:57:28] <Steve-Dusty> It kept telling me to install dj-database-url
[02:57:55] <Steve-Dusty> and when I run it again it still kept telling me to run
[02:58:34] *** Quits: Thanattt (~Thanatos@102.89.2.204) (Read error: Connection reset by peer)
[02:58:38] <wallbroken> https://dpaste.org/VFq0#L19
[02:58:41] <wallbroken> i have a problem
[02:58:56] <wallbroken> this view is used both by admin and normal users
[02:59:09] <wallbroken> but when is used by admin, "message" context must not be passed
[02:59:21] <wallbroken> because admin doesn't need to send message on "submit" button
[02:59:45] <wallbroken> so, is there a way to tell the view: if the request is from an admin, ignore "message" ?
[03:00:32] <wallbroken> this is the traceback: https://dpaste.org/GXn4
[03:00:36] <wallbroken> thank yuu
[03:02:02] <djacobs> hylje, thats covered. i'm mounting a SAN-hosted nfs share towards the kubernetes cluster.
[03:03:00] <djacobs> i'm also thinking to put 2 containers inside one deployment (one for db, one for django) for which i have to create one external endpoint
[03:03:58] *** Joins: ThanatosJ (~Thanatos@197.210.79.172)
[03:08:23] <Steve-Dusty> How do you guys deploy your Django apps to heroku?
[03:08:35] <Steve-Dusty> im really stucc
[03:09:00] <Steve-Dusty> I migrated it on the heroku server but it still application error. I checked the logs and it said "App crashed"
[03:11:11] <Steve-Dusty> the heroku documentation is everywhere
[03:12:23] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Remote host closed the connection)
[03:13:14] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[03:13:59] <wallbroken> ok, i solved on my way
[03:14:42] <wallbroken> you experienced that fixing something you'll broke something else?
[03:14:54] <FunkyBob> yes, it's why we have regression tests
[03:16:44] <wallbroken> and you have the ability to think in your mind "if i apply this fix, i'll broke that in some other part" ?
[03:16:54] <wallbroken> or is impossible to get that before?
[03:20:18] *** Quits: ThanatosJ (~Thanatos@197.210.79.172) (Ping timeout: 252 seconds)
[03:21:59] *** Joins: Thanatos (~Thanatos@197.210.79.250)
[03:22:19] <glik22> FunkyBob: AppConfig.ready() will not work because i need to call model methods and the docs state you should not do that in AppConfig.ready()
[03:22:50] *** Quits: Thanatos (~Thanatos@197.210.79.250) (Read error: Connection reset by peer)
[03:23:11] <FunkyBob> link?
[03:23:11] *** Joins: Thanatos (~Thanatos@197.210.79.250)
[03:23:59] <FunkyBob> ah, found it
[03:24:20] <FunkyBob> yeah, because it happens for any manage command
[03:24:35] <FunkyBob> glik22: so what actions do you need to happen, and under what conditions?
[03:25:57] <FunkyBob> glik22: if it's only on server start, have you considered wsgi.py / asgi.py ?  you will need to special case runserver though
[03:25:58] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[03:27:02] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[03:27:42] <glik22> FunkyBob: i have models contain hostnames etc in fields. when starting my app i need to ping those hostnames to see if they are online. so i iterate through all instances and call instance.ping()
[03:29:30] <glik22> i suppose it could be a management command when i'm starting my application
[03:32:13] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 246 seconds)
[03:43:32] *** Quits: Thanatos (~Thanatos@197.210.79.250) (Ping timeout: 255 seconds)
[03:49:34] *** Joins: Thanatos (~Thanatos@197.210.79.172)
[03:53:40] *** Quits: lxsameer (~lxsameer@109.255.73.218) (Ping timeout: 252 seconds)
[03:55:16] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user/shoes/forms.py#L58
[03:55:39] <wallbroken> do you think here there is something wich sets ordered_ or delivered_ to null for an user?
[03:55:50] <wallbroken> because i get an unexpected behaviour
[03:56:05] <wallbroken> and i'm trying to investigate what is it
[03:57:30] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:06:04] *** Joins: ThanatosJ (~Thanatos@192.145.124.124)
[04:09:48] *** Quits: Thanatos (~Thanatos@197.210.79.172) (Ping timeout: 252 seconds)
[04:14:49] <wallbroken> queryset = self.request.user.delivered_items.exclude(pk__in=self.request.user.terminated_items.values_list('pk'))
[04:15:00] <wallbroken> could anybody explain to me what this line does?
[04:15:37] <wallbroken> it means that include in the queryset all the delivered_items which are not terminated
[04:15:40] <wallbroken> right?
[04:16:57] <fakegermano-m> it filters out all of a user's delivered items that are not in the terminated items list, supposing they share the same model
[04:17:56] <wallbroken> yes
[04:17:58] <wallbroken> thanks
[04:25:08] *** Quits: djacobs (~IceChat95@109.133.171.241) (Quit: IceChat - Keeping PC's cool since 2000)
[04:33:49] *** Quits: thiras_ (~thiras@user/thiras) (Quit: Leaving)
[04:34:10] *** Joins: thiras (~thiras@user/thiras)
[04:38:41] *** Joins: Crassus (~Crassus@user/crassus)
[04:39:02] *** Joins: Thanattt (~Thanatos@197.210.47.227)
[04:42:55] *** Quits: ThanatosJ (~Thanatos@192.145.124.124) (Ping timeout: 265 seconds)
[04:49:57] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:57:50] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[05:02:06] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 255 seconds)
[05:03:58] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[05:07:16] *** Joins: Thanatos (~Thanatos@197.210.47.227)
[05:10:57] *** Quits: Thanattt (~Thanatos@197.210.47.227) (Ping timeout: 265 seconds)
[05:11:29] *** Joins: Crassus (~Crassus@user/crassus)
[05:17:12] *** Joins: ThanatosJ (~Thanatos@197.210.47.227)
[05:20:31] *** Joins: Thanattt (~Thanatos@197.210.47.227)
[05:20:43] *** Quits: Thanatos (~Thanatos@197.210.47.227) (Ping timeout: 246 seconds)
[05:22:43] *** Joins: Thanatos (~Thanatos@197.210.47.227)
[05:23:10] *** Quits: ThanatosJ (~Thanatos@197.210.47.227) (Ping timeout: 246 seconds)
[05:25:41] *** Quits: Thanattt (~Thanatos@197.210.47.227) (Ping timeout: 255 seconds)
[05:33:42] *** Joins: ThanatosJ (~Thanatos@197.210.47.227)
[05:36:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:37:03] *** Quits: Thanatos (~Thanatos@197.210.47.227) (Ping timeout: 265 seconds)
[05:40:06] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:44:48] *** Joins: Thanatos (~Thanatos@197.210.47.227)
[05:47:33] *** Quits: ThanatosJ (~Thanatos@197.210.47.227) (Ping timeout: 255 seconds)
[05:48:22] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 246 seconds)
[05:49:54] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[05:51:33] *** Joins: ThanatosJ (~Thanatos@197.210.47.227)
[05:53:12] *** Quits: Thanatos (~Thanatos@197.210.47.227) (Ping timeout: 258 seconds)
[05:56:56] *** Joins: Thanatos (~Thanatos@197.210.47.227)
[05:58:10] *** Quits: ThanatosJ (~Thanatos@197.210.47.227) (Ping timeout: 246 seconds)
[06:03:22] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
[06:08:35] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[06:17:07] *** Joins: serghei1 (~serghei@user/serghei)
[06:21:31] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 265 seconds)
[06:25:47] *** Joins: ThanatosJ (~Thanatos@197.210.47.227)
[06:28:03] *** Quits: Thanatos (~Thanatos@197.210.47.227) (Ping timeout: 255 seconds)
[06:33:06] *** Quits: ThanatosJ (~Thanatos@197.210.47.227) (Read error: Connection reset by peer)
[06:37:38] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[06:59:45] *** Joins: djapo (~archangel@user/djapo)
[07:08:04] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[07:24:48] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[08:10:04] *** Quits: fakegermano-m (~at@2804:431:e7cd:c7c3:c00d:eb91:2bf2:7ffa) (Read error: Connection reset by peer)
[08:38:48] *** Quits: maks25 (~maks25@ip-199-66-114-46.fibre.fibrestream.ca) (Quit: Leaving...)
[08:46:14] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:13:18] *** Quits: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[09:14:59] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[09:21:20] *** Joins: Crassus (~Crassus@user/crassus)
[09:30:45] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 255 seconds)
[09:33:40] *** Joins: xkuru (~xkuru@user/xkuru)
[09:34:06] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[09:37:36] *** Joins: sandeepk (~sandeepk@223.130.30.197)
[09:37:39] *** Joins: xkuru (~xkuru@user/xkuru)
[09:39:22] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[09:40:12] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[09:45:17] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[09:45:17] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
[09:45:53] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[09:45:55] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:50:17] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 268 seconds)
[09:51:51] *** Joins: doev (~doev@p54a70a0d.dip0.t-ipconnect.de)
[09:57:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:46:40] *** Joins: slav0nic (slav0nic@python.su)
[10:49:39] *** Quits: serghei (~egrep@user/serghei) (Quit: serghei)
[10:56:27] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-010.46.114.pool.telefonica.de)
[11:01:59] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:10:44] *** Joins: djapo (~archangel@user/djapo)
[11:20:52] *** Quits: doev (~doev@p54a70a0d.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[11:36:06] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[11:41:00] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 265 seconds)
[11:42:00] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[11:46:18] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 252 seconds)
[12:01:42] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[12:15:02] *** Joins: lxsameer (~lxsameer@109.255.73.218)
[12:15:04] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[12:15:22] *** Joins: serghei1 (~serghei@user/serghei)
[12:19:36] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 258 seconds)
[12:20:08] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[12:44:51] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[12:49:49] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[12:51:35] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[12:52:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:59:02] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[13:17:05] *** gcbirzan_ is now known as gcbirzan
[13:29:49] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-010.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[13:30:12] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[13:30:18] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[13:31:48] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:34:39] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 255 seconds)
[13:39:46] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[13:49:30] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[13:51:26] <wallbroken> queryset.union(Shoe.objects.filter(delivered_user__in = User.objects.all()).distinct())
[13:51:33] <wallbroken> is this the right syntax?
[13:55:42] *** Joins: Rikem (~mike@user/rikem)
[13:57:39] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[14:15:04] *** Joins: zibby15 (~androirc@user/zibby15)
[14:15:38] *** Joins: eldar (~eldar@92.242.59.6)
[14:17:57] *** Joins: serghei1 (~serghei@user/serghei)
[14:19:27] <eldar> Guys, hello! Little question: When test database is created, can I populate it before tests begin? I have a problem that in my business logic requests to database are used and this happens before any setUp in TestCases.
[14:20:19] <eldar> And this requests fails cause there is not data in DB yet
[14:22:51] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 268 seconds)
[14:23:30] <eldar> Are the alive?(
[14:23:36] <eldar> there
[14:31:42] *** Joins: shangxiao (~davids@101.181.108.207)
[14:40:20] <GinFuyou> eldar, if it's used on project init, you probably want that data in all cases (not only tests)?
[14:41:34] <eldar> <GinFuyou>, yes
[14:41:49] <GinFuyou> Then you probably want data migrations
[14:42:15] <GinFuyou> https://docs.djangoproject.com/en/3.2/topics/migrations/#data-migrations
[14:42:40] <eldar> ok, thank you!
[14:43:01] <GinFuyou> Otherwise I guess have to use fixtures
[14:43:21] <GinFuyou> But data migrations are recommended when possible
[14:47:24] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[14:56:22] <dodo> eldar: your business logic runs before test classes are set up? that doesn't sound right
[14:58:22] <eldar> My views which import files with business logic are executed before tests
[15:00:17] <eldar> GinFuyou, is it normal practice to load fixtures inside data migration?
[15:01:21] <eldar> like 'os.system("manage.py loaddata titles.json")'
[15:02:58] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Read error: Connection reset by peer)
[15:04:49] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[15:06:48] <GinFuyou> eldar, no, you use either. fixtures are not very recommended, they may have some complications, consider it a fallback option
[15:07:27] <eldar> ok! thank you again
[15:08:21] <GinFuyou> well, if you have database operations on import time this is not right, yeah
[15:18:36] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[15:20:43] <eldar> GinFuyou, I have view.py. There I have subclass of generics.RetrieveUpdateAPIView from Django Rest Framework. In views.py I import permissions.py. Permissions.py has code like 'Status.objects.get(code=...)'
[15:21:14] <GinFuyou> Yeah, you want to fix it
[15:21:16] <eldar> Django executes code of permissions.py and raise exception 'DOES NOT EXIST'
[15:21:47] <GinFuyou> You won't be able to deploy it otherwise I think
[15:21:57] <eldar> how? I need this code in permissions
[15:22:39] <GinFuyou> have to make sure it's executed at some later point
[15:22:39] <eldar> It is so simple problem, It seems that there are simple solutions for that
[15:23:17] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 255 seconds)
[15:23:34] <GinFuyou> simple solution is to just avoid it. Why do you need it like that?
[15:23:39] <FunkyBob> something something AppConfig.ready something
[15:23:49] <GinFuyou> yeah, possibly
[15:24:01] <wallbroken> FunkyBob: can you confirm this syntax is correct please?
[15:24:02] <wallbroken> queryset.union(Shoe.objects.filter(delivered_user__in = User.objects.all()).distinct())
[15:24:49] <eldar> you suggest place this code in ready() of AppConfig?
[15:24:54] <eldar> of this app
[15:25:22] <eldar> the logic of lookup 'Status.objects.get(code=...)'
[15:25:26] <GinFuyou> We don't know what you need it for exactly
[15:26:08] <eldar> I will do snippet
[15:27:29] <GinFuyou> Problem is that when you will start deploying the project it will blow up at migrate step iirc, and you will be in a deadlock
[15:28:30] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 255 seconds)
[15:28:30] <eldar> https://dpaste.org/gWOf
[15:29:35] <eldar> Yep, it is problem that when I 'manage.py migrate', exception is raised too cause django executes this code before migration.
[15:30:22] <GinFuyou> well, this case can be solved in other ways
[15:30:51] <GinFuyou> e.g. putting this function call in init perhaps
[15:31:25] <GinFuyou> or has_permission method directly
[15:31:43] <eldar> init of events package (app) ?
[15:31:58] <GinFuyou> of permission class
[15:32:14] <GinFuyou> class attribute will be evaluated on import
[15:32:30] <GinFuyou> init will only run when you make instance
[15:33:10] <GinFuyou> making attribute lazy is another option I guess
[15:34:24] <eldar> May be create class GetStatus and make lookup in init
[15:35:11] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[15:35:18] <eldar> what attribute to make lazy?
[15:35:43] <eldar> 'approved_status' ?
[15:35:45] <GinFuyou> that's not the point. Function code won't run also unless function is called. Question is when code is run
[15:35:59] <GinFuyou> yes
[15:36:35] *** Quits: zibby15 (~androirc@user/zibby15) (Quit: leaving.)
[15:38:19] <eldar> https://dpaste.org/rsuk
[15:38:23] <eldar> I mean sth like that
[15:38:35] <eldar> It seems to work...
[15:39:01] <eldar> and then it will be used like 'GetStatus().status'
[15:39:37] <GinFuyou> it same as doing get_status() now, you are missing the point
[15:40:41] <eldar> ah, I agree, sorry
[15:40:46] <GinFuyou> putting call into class method works if that class method will be called later (when project is fully configured) vs at module import time
[15:40:55] <eldar> django must evaluate the attribute anyway
[15:41:27] <eldar> so
[15:42:07] <eldar> may be I will use just classmethod get_status()
[15:42:27] <eldar> the body of function will no be executed before I want
[15:42:51] <GinFuyou> could just move call to has_permission
[15:42:51] <eldar> and I will use self.get_status() in has_permission()
[15:43:02] <GinFuyou> or that
[15:43:03] <eldar> ok, understood
[15:43:32] <eldar> Thank you very much
[15:44:06] <eldar> One more question
[15:44:55] <eldar> ah, sorry, without one more))
[16:24:02] *** Joins: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl)
[16:32:03] *** Joins: thiras (~thiras@user/thiras)
[16:53:06] *** Quits: eldar (~eldar@92.242.59.6) (Quit: Leaving)
[17:06:58] *** Joins: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net)
[17:06:59] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[17:11:32] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 252 seconds)
[17:12:06] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[17:15:10] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[17:19:55] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[17:22:00] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[17:43:24] *** Joins: molyvius (~molyvius@user/molyvius)
[17:44:54] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:34e8:d560:f9f:5c42) (Quit: Leaving)
[17:46:26] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[17:46:59] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:703d:a760:f1e7:a405)
[17:50:42] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 255 seconds)
[18:03:24] *** Quits: molyvius (~molyvius@user/molyvius) (Remote host closed the connection)
[18:03:46] *** Joins: molyvius (~molyvius@user/molyvius)
[18:07:00] <cusco> hello
[18:07:11] *** Quits: sandeepk (~sandeepk@223.130.30.197) (Ping timeout: 265 seconds)
[18:07:37] <cusco> what is the common way to pass a python dict from view to template as javascript?
[18:08:20] <cusco> my current issue now is that I have my_dict = {'key1': 'some string', 'key2': ['a', 'list']}
[18:08:28] <GinFuyou> encode it as json?
[18:08:59] <GinFuyou> iirc there also a template filter of some sort
[18:09:34] <cusco> I was thinking in doing the for loop in django template.. and calling a js function for each key and value
[18:10:04] <GinFuyou> eeeh, sounds messy
[18:10:11] <cusco> hmm ok
[18:10:25] <GinFuyou> well, should work if you prefer it that way
[18:11:00] <cusco> my issue now is 'some string' is not encapsulated with ''
[18:11:16] <cusco> or if I set it, then ['a', 'list'] also becomes encapsulated
[18:11:29] <cusco> I will see about setting a js var with json instead
[18:12:11] <Harlin> cusco, you could build it as html server side and pass it over the wire.
[18:13:20] <Harlin> but generally you'll iterate over sub lists and print out each element ... you'll just have to come up with a way to do it for your structure.
[18:13:50] *** Quits: molyvius (~molyvius@user/molyvius) (Ping timeout: 255 seconds)
[18:29:31] *** Quits: killjoy (~nameless@user/killjoy) (Ping timeout: 268 seconds)
[18:41:10] *** Joins: sandeepk (~sandeepk@223.130.30.197)
[18:46:49] *** Quits: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl) (Ping timeout: 265 seconds)
[18:46:56] *** Joins: dez (uid92154@user/dez)
[18:51:27] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Ping timeout: 255 seconds)
[18:57:24] *** Joins: molyvius (~molyvius@user/molyvius)
[19:08:22] *** Quits: molyvius (~molyvius@user/molyvius) (Ping timeout: 268 seconds)
[19:43:03] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[19:43:31] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 268 seconds)
[19:44:08] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Ping timeout: 268 seconds)
[19:45:01] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[19:45:59] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 268 seconds)
[19:45:59] *** Quits: shodan45 (~quassel@107.161.22.155) (Ping timeout: 268 seconds)
[19:45:59] *** Quits: jbeimler (~quassel@user/jbeimler) (Ping timeout: 268 seconds)
[19:46:07] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[19:47:39] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[19:49:24] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[19:51:23] *** Joins: shodan45 (~quassel@107.161.22.155)
[19:52:41] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[19:53:00] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[19:54:00] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 255 seconds)
[19:54:58] *** Quits: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net) (Ping timeout: 265 seconds)
[19:58:50] *** Joins: ST47 (~ST47@wikimedia/st47)
[20:12:41] *** Joins: chiz (~alkjkljkl@cpe-184-153-212-20.twcny.res.rr.com)
[20:13:58] *** Joins: molyvius (~molyvius@user/molyvius)
[20:18:51] <chiz> Hey all.  I'm trying to use the latest version of django-auditlog. It is working on a direct save of a model, but if that model has a many to many I can't get it working.  I'm not sure if I'm properly implementing the piece of code that is for many to many relationships.  I uploaded a basic example of what I'm attemping to do/log.  There is another issue where it's not logging the actor, but I'd like to get it logging any changes to t
[20:18:51] <chiz> he Account model, including if someone edits a Loan.  https://dpaste.org/xyP2
[20:20:17] *** Joins: IceMichael (~IceMichae@x59cc87c1.dyn.telefonica.de)
[20:22:17] *** Joins: killjoy (~nameless@user/killjoy)
[20:28:53] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:35:19] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[20:35:45] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[20:46:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:04:47] <chiz> understanding it more now. I guess it was all designed wrong to use through in this case.
[21:20:58] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[21:27:42] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[21:37:56] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[21:42:38] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 255 seconds)
[21:56:06] *** Quits: IceMichael (~IceMichae@x59cc87c1.dyn.telefonica.de) (Ping timeout: 268 seconds)
[21:58:13] *** Joins: serghei (~egrep@user/serghei)
[22:06:02] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[22:13:14] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Ping timeout: 255 seconds)
[22:14:26] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[22:20:14] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[22:20:33] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[22:23:38] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[22:41:10] *** Quits: serghei (~egrep@user/serghei) (Quit: serghei)
[22:49:08] *** Quits: chiz (~alkjkljkl@cpe-184-153-212-20.twcny.res.rr.com) (Ping timeout: 268 seconds)
[22:56:22] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[23:02:30] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[23:05:00] *** Joins: serghei (~egrep@user/serghei)
[23:14:07] *** Quits: shangxiao (~davids@101.181.108.207) (Quit: WeeChat 3.2)
[23:26:04] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[23:31:04] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Ping timeout: 268 seconds)
[23:38:27] *** Joins: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[23:38:28] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 268 seconds)
[23:38:30] <Steve-Dusty> Hello
[23:38:46] <Steve-Dusty> My app in repo is 50% JS because of the collectstatic admin.py file
[23:38:55] <Steve-Dusty> what do I do?
[23:38:58] <Steve-Dusty> do I not commit that?
[23:40:16] *** Quits: sandeepk (~sandeepk@223.130.30.197) (Quit: Leaving)
[23:40:32] <GinFuyou> didn't make any sense to me? what collectstatic has to do with admin? What's wrong if you need a lot of JS code?
[23:40:59] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[23:46:15] <Steve-Dusty> GinFuyou a lot of other repositories don't have a staticfiles directory
[23:46:26] <Steve-Dusty> and their Django project isn't 2.4% Python
[23:47:40] <GinFuyou> you probably put static root dir into your project? Don't do that or at least git ignore
[23:48:11] <GinFuyou> You commit only static dirs, like <app>/static/ and those you added to static dirs yourself
[23:48:20] <GinFuyou> STATIC_ROOT should be local
[23:48:35] <Steve-Dusty> the repository is here: https://github.com/Steve-Dusty/django-todo
[23:49:19] <Steve-Dusty> https://github.com/wsvincent/djangoforbeginners/tree/master/ch16-deployment this guy have a staticfiles dir too..
[23:49:23] <Steve-Dusty> I followed his book
[23:50:02] <GinFuyou> yes, https://github.com/Steve-Dusty/django-todo/blob/main/todolist/settings.py#L127 it's your static root
[23:51:04] <Steve-Dusty> Is my repository good? Or is it messed up
[23:51:28] <GinFuyou> Personally I decouple static root from project completely. e.g. /srv/www/project_name/static
[23:51:54] <GinFuyou> or at least gitignore it
[23:54:38] <Steve-Dusty> so I can just delete it?
[23:54:53] <Steve-Dusty> I don't understand. If instagram was made in Django, why doesn't instagram.com/admin work?
[23:55:30] <apollo13> open up your urls.py and write admin2/ instead of admin/
[23:55:39] <apollo13> or just delete the line and admin will no longer work
[23:56:17] <Steve-Dusty> so instagram doesn't use admin.py?
[23:56:36] <Steve-Dusty> https://ibb.co/wMH4fcJ
[23:56:36] <Steve-Dusty> btw can someone explain this
[23:56:45] <apollo13> admin.py has nothing to do with the URL structure
[23:56:58] <apollo13> you can choose to simply not expose the admin at all…
[23:57:15] <Steve-Dusty> okay
[23:57:20] <Steve-Dusty> okay
[23:57:42] <apollo13> you need to put your ~/.local/bin into your $PATH otherwise nothing installed via pip will work
[23:57:52] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[23:58:29] <Steve-Dusty> by the way if we're just going to gitignore STATICFILES dir why do we even need collectstatic. collectstatic is for production and your production server reads off your Github if you're cloning it.
[23:58:37] <Steve-Dusty> but you're gitignoring it..
[23:58:55] <Steve-Dusty> then what's the point of collectstatic be for production if we're not going to put it for production
[23:59:31] <apollo13> depends, collectstatic doesn't neccessarily have to put stuff into a folder, it can also upload to s3 etc
[23:59:48] <apollo13> also part of your productoin deployment is usually to run collectstatic so you get the files for serving ;)
[23:59:56] <GinFuyou> not STATICFILES, STATIC_ROOT!
