[00:08:55] *** Joins: Brainium (~brainium@user/brainium)
[00:11:11] *** Tobbi__ is now known as Tobbi
[00:12:01] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:15:14] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[00:15:19] *** Parts: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3) (Leaving)
[00:18:07] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 250 seconds)
[00:19:25] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:20:43] *** Joins: CaCode (~CaCode@user/cacode)
[00:21:15] *** Joins: smach (~savio@177.12.48.108)
[00:22:21] *** Quits: smach (~savio@177.12.48.108) (Remote host closed the connection)
[00:23:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:24:42] *** Quits: supernova (~quassel@2405:9800:ba11:6207:3f7c:e6d9:860d:2551) (Ping timeout: 260 seconds)
[00:27:40] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[00:29:22] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 260 seconds)
[00:30:12] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:32:28] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:32:49] *** Quits: smartin (~Thunderbi@88.135.18.171) (Remote host closed the connection)
[00:33:07] *** Joins: smartin (~Thunderbi@88.135.18.171)
[00:36:01] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:41:22] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:43:04] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[00:45:50] *** AbleBacon_ is now known as AbleBacon
[00:48:37] *** Joins: badone (~badone@209.132.189.136)
[00:48:49] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:49:12] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:51:36] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:53:16] *** Joins: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net)
[00:54:36] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2)
[01:02:36] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[01:10:18] <norias> oh man
[01:10:30] <norias> I originally learned C++98 and I'm trying to get caught up to C++20
[01:10:49] <norias> back then I prefered C over C++ because I felt like there were so many keywords ...
[01:13:10] *** Joins: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144)
[01:14:05] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:17:20] *** Quits: magla (~gelignite@55d4a165.access.ecotel.net) (Quit: Stay safe!)
[01:18:12] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[01:18:34] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87)
[01:18:34] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87) (Changing host)
[01:18:34] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:22:41] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[01:23:11] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[01:25:03] <jaakkos> norias: if you can invest the time in it, I'm sure you will enjoy it, the new standards offer quite many features to make your life easier
[01:26:32] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:29:14] <anyone> C++98 just did not have enough benefits over C to be considered viable by some people; that massively changed with C++11 no doubt
[01:30:50] <norias> jaakkos: i'm not doubting it. I'm just saying - it looks huge.
[01:30:57] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[01:31:10] <norias> anyone: I always felt it was good for projects bigger than anything I was doing
[01:32:36] *** Joins: husixu (~husixu@137.132.119.2)
[01:33:18] <norias> without knowing what i'm talking about
[01:33:27] <norias> reading about modules in C++20 makes me wonder
[01:33:40] <norias> if it won't make it easier to interface with other languages
[01:34:30] <ville> not sure how that would work out
[01:34:53] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 252 seconds)
[01:35:28] <norias> it just seems, intuitively, that there's a more 1:1 correlation
[01:35:41] <norias> for using stuff written in a C++20 module somewhere else
[01:35:47] *** Quits: husixu (~husixu@137.132.119.2) (Remote host closed the connection)
[01:36:56] *** Joins: husixu (~husixu@137.132.119.2)
[01:36:58] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[01:37:40] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:37:47] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[01:38:49] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:39:15] <ville> i don't see how. it's still c++
[01:39:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:34] *** ChanServ sets mode: +v npaperbot
[01:41:03] <ville> why would sticking the module keyword somewhere change anything in that regard
[01:45:27] *** Joins: seninha (~seninha@user/seninha)
[01:47:57] *** Joins: tmm88 (~tmm88@user/tmm88)
[01:48:54] *** Joins: GNUmoon2 (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:49:16] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[01:49:46] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[01:53:14] <RandomReader> !basics
[01:53:15] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[01:53:44] <RandomReader> norias - the stackoverflow link has a couple books that are about catching up, and particularly for C++11 you can find a bunch of video and blog material floating around
[01:53:49] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:54:07] <RandomReader> might help with accelerated focus, particularly on the big new concepts
[01:54:24] <RandomReader> in terms of just changes, wikipedia is actually pretty decent for the individual versions
[01:56:10] <Alipha> norias: if you do actually have a very solid c++98 basis, A Tour of C++ may work. Or Effective Modern C++. Otherwise, I'd suggest one of the beginner books
[02:04:26] *** Quits: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net) (Quit: Lost terminal)
[02:05:19] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 252 seconds)
[02:05:41] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:05:45] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[02:11:30] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[02:15:41] *** Quits: proller (~p@2a02:6b8:b081:1214::1:2) (Ping timeout: 268 seconds)
[02:16:27] *** Joins: OnTheVerge (~OnTheVerg@user/OnTheVerge)
[02:16:48] <OnTheVerge> Hi there!
[02:16:59] <OnTheVerge> IRC seems to be rather inactive
[02:19:12] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[02:19:39] *** Joins: robert_ (~hellspawn@47.203.169.95)
[02:19:43] *** Quits: robert_ (~hellspawn@47.203.169.95) (Client Quit)
[02:26:30] *** Quits: OnTheVerge (~OnTheVerg@user/OnTheVerge) (Quit: Leaving)
[02:26:46] <mib> ville: re. "copying an allocator"; AFAIU in standard speak an allocator is stateless. So a "copy" here means it's an instance of the allocator of the same type. Not a copy of the memory allocated by it.
[02:27:51] *** Joins: proller (~p@80.240.216.69)
[02:29:26] *** Quits: husixu (~husixu@137.132.119.2) (Quit: Leaving)
[02:29:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[02:32:49] <ville> mib: yeah, i read up on them again after i started wondering. haven't used them in decade+ and for a reason. such a mess
[02:33:45] *** Joins: pizdets_ (~pizdets@183.182.111.164)
[02:34:10] *** Quits: pizdets (~pizdets@183.182.110.248) (Ping timeout: 268 seconds)
[02:35:16] *** Joins: KhazAkar (~KhazAkar@178.43.196.230.ipv4.supernova.orange.pl)
[02:35:53] *** Quits: KhazAkar (~KhazAkar@178.43.196.230.ipv4.supernova.orange.pl) (Remote host closed the connection)
[02:38:27] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:51:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:51:57] *** Joins: seninha (~seninha@user/seninha)
[02:54:31] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 268 seconds)
[02:55:12] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Remote host closed the connection)
[02:55:31] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[02:55:50] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[02:56:31] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 250 seconds)
[03:02:15] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:04:57] *** Joins: proller (~p@80.240.216.69)
[03:06:37] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:19:25] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:22:51] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:23:47] *** Joins: maxxe (~maxxe@user/maxxe)
[03:25:56] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[03:25:59] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[03:27:22] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[03:29:13] <maxxe> maybe a bit off topic but does anyone know of a good library for handling json? sending an object over sockets for example a std::vector I thought of json first. better alternatives?
[03:29:45] *** Joins: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[03:30:10] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:22] <RandomReader> !general
[03:30:24] <nolyc> #C++-general for algorithms, libraries, practices, projects, tools etc.
[03:30:35] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:33:17] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[03:34:07] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[03:36:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:37:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:41:09] *** Joins: sturmmann (~sturmmann@user/sturmmann)
[03:47:34] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:49:11] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[03:49:48] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:50:45] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:50:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae)
[03:50:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae) (Changing host)
[03:50:54] *** Joins: skapata (~Skapata@user/skapata)
[03:51:00] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:51:56] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:56:02] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:04:00] *** Quits: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:06:03] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[04:07:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:54] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:11:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:22:50] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[04:22:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:25:54] *** Joins: slidercrank (~slidercra@user/slidercrank)
[04:31:25] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Ping timeout: 250 seconds)
[04:31:32] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[04:33:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:52] *** Joins: smach (~savio@177.12.48.108)
[04:35:26] *** Quits: smach (~savio@177.12.48.108) (Client Quit)
[04:42:23] *** Quits: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[04:46:31] *** Joins: seninha (~seninha@user/seninha)
[04:46:51] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[04:47:30] *** Joins: fluter- (~fluter@user/fluter)
[04:48:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 260 seconds)
[04:49:31] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 245 seconds)
[04:58:23] *** Joins: frost (~frost@user/frost)
[05:04:22] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:38d0:a1a2:5189:934b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:06:12] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[05:09:40] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:15:59] *** Joins: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144)
[05:18:54] *** Quits: Pook (~Pook@2001:8a0:f996:1400:9050:6222:2b58:2d8b) (Quit: Leaving)
[05:27:29] <sam113101> how is static_cast different than a normal (such as in C) cast?
[05:28:42] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660050f36c7348367737.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[05:29:42] <RandomReader> the named casts are more specific, so they communicate intent better
[05:30:03] *** Norkle is now known as sickjoke
[05:30:24] <RandomReader> https://en.cppreference.com/w/cpp/language/explicit_cast has details, explanation 1 covers what the C-style cast does (which makes it difficult to read in practice), and there are links to the more specific ones at the bottom of the page
[05:30:42] <NyB> isn't the type checking also stronger, instead of the compiler just shoving a square peg into a round hole?
[05:30:49] *** sickjoke is now known as NOrkle
[05:30:57] *** NOrkle is now known as Norkle
[05:31:26] <RandomReader> it's sort of a side effect of making them more specific, static_cast is generally safer due to that
[05:31:30] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:31:47] <RandomReader> reinterpret_cast being the opposite
[05:32:42] <NyB> yup, reinterpret cast is kinda scary...
[05:34:06] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[05:35:49] <RandomReader> in terms of usage, static_cast would be the most common, dynamic_cast probably as a fairly distant second .. const_cast and reinterpret_cast would be relatively rare, and red flags (in the sense of highlighting something subtle/dangerous)
[05:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:35] *** ChanServ sets mode: +v npaperbot
[05:41:18] *** Quits: dongcarl (~dongcarl@70.107.207.192) (Quit: The Lounge - https://thelounge.chat)
[05:41:57] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:42:19] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[05:46:22] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:46:42] *** Quits: sturmmann (~sturmmann@user/sturmmann) (Ping timeout: 276 seconds)
[05:50:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:51:38] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[05:51:48] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:52:31] *** Quits: dongcarl (~dongcarl@70.107.207.192) (Quit: The Lounge - https://thelounge.chat)
[05:53:01] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[05:53:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[05:53:48] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[05:55:52] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[06:06:55] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:07:30] *** Quits: GNUmoon2 (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[06:10:01] *** Joins: andreasbuhr_ (~quassel@p549db835.dip0.t-ipconnect.de)
[06:10:02] *** Quits: andreasbuhr (~quassel@p548dd563.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:13:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[06:14:43] <Alipha> !give sam113101 c-style cast
[06:14:44] <nolyc> sam113101: The semantics for a cast-expression (aka a 'C-Style Cast') are defined as the first of these that succeeds: const_cast, static_cast, static_cast followed by const_cast, reinterpret_cast, reinterpret_cast followed by const_cast.  See 5.4 [expr.cast] for more details.
[06:15:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:17:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:17:51] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:19:49] *** Joins: GNUmoon2 (~GNUmoon@gateway/tor-sasl/gnumoon)
[06:21:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:36:35] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:40:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:43:34] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4)
[06:51:47] *** Joins: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net)
[06:52:34] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:58:39] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4) (Ping timeout: 252 seconds)
[07:01:02] *** Joins: nostar (~nostar@68.51.221.108)
[07:10:30] *** Joins: seninha (~seninha@user/seninha)
[07:11:31] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 250 seconds)
[07:13:21] <smallville7123> how can i emulate this in a PEG parser?
[07:13:22] <smallville7123> When the preprocessor expands a macro name, the macroâ€™s expansion replaces the macro invocation, then the expansion is examined for more macros to expand
[07:17:51] *** Quits: ProperN[out] (~holyShizn@user/propernoun) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:18:11] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[07:22:06] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Client Quit)
[07:22:26] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[07:23:14] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:26:32] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:28ca:c225:1872:f47e)
[07:33:41] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:35:59] *** Joins: wolf2k_huh (~wolfman20@2600:1700:3211:4140:708c:ae1f:583:78c9)
[07:39:21] *** Quits: wolf2k_ouch (~wolfman20@2600:1700:3211:4140:59b5:7e2c:8b16:87b2) (Ping timeout: 252 seconds)
[07:45:38] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[07:47:38] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:54:06] *** Quits: GNUmoon2 (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[07:54:36] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:28ca:c225:1872:f47e) (Quit: Leaving)
[08:03:44] *** Joins: CaCode (~CaCode@user/cacode)
[08:06:35] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:12:12] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:12:45] *** Joins: siwica``` (~user@p200300f61707ea0042d11fe39cc3c4a5.dip0.t-ipconnect.de)
[08:13:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:14:21] *** Quits: siwica`` (~user@p200300f6171fdc005c21ce988404f96a.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:15:25] *** Joins: malloy (~jimery@116.30.222.36)
[08:20:41] *** Joins: Quacc (~youbuntoe@user/quacc)
[08:22:13] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:28ca:c225:1872:f47e)
[08:23:14] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[08:26:17] *** Quits: rahl (~rahl@102.114.15.234) (Ping timeout: 252 seconds)
[08:26:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:28:15] *** Joins: rahl (~rahl@102.114.118.218)
[08:32:37] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[08:33:31] *** Joins: AmR (~AmREiSa@156.207.199.106)
[08:38:08] *** Joins: Quacc (~youbuntoe@user/quacc)
[08:42:48] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[08:44:44] *** Joins: malloy (~jimery@116.30.222.36)
[08:46:22] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:49:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[08:51:15] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.3)
[08:52:14] *** Joins: Quacc (~youbuntoe@user/quacc)
[08:52:29] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[09:02:52] *** Joins: szutt (~szutt@116.37.2.145)
[09:04:52] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.3)
[09:06:09] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c1b:bf57:442d:a12f)
[09:06:40] <smallvil_> how do i go about implementing https://gcc.gnu.org/onlinedocs/gcc-11.2.0/cpp/Self-Referential-Macros.html#Self-Referential-Macros in a recursive macro-expansion function ?
[09:06:58] <smallvil_> would something like this work assuming a vector of strings?       v.do_not_expand.insert(id); Result r = parse_macro(true, macro.c_str(), v); v.do_not_expand.erase(id);
[09:07:22] *** Quits: rahl (~rahl@102.114.118.218) (Ping timeout: 260 seconds)
[09:11:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c1b:bf57:442d:a12f) (Ping timeout: 260 seconds)
[09:11:25] <kalven> :~)
[09:11:29] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (Quit: ZNC 1.8.2 - https://znc.in)
[09:12:19] *** Joins: Khoyo (~khoyo@user/khoyo)
[09:16:22] <smallvil_> error: no matching member function for call to 'erase'    :(
[09:17:58] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[09:19:47] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:38:28] <kalven> maybe you want a set
[09:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:33] *** ChanServ sets mode: +v npaperbot
[09:43:56] *** Joins: Quacc (~youbuntoe@user/quacc)
[09:44:16] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[09:44:21] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:52:48] *** Joins: Quacc (~youbuntoe@user/quacc)
[09:57:51] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.3)
[10:02:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:13:52] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[10:16:52] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[10:19:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:19:29] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[10:20:28] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:27:09] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[10:29:39] *** Joins: callq (~callq@2409:4062:231c:7ae8:3d73:6aac:1dda:a7de)
[10:31:49] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[10:32:08] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.162)
[10:33:09] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[10:41:27] *** Quits: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:47:08] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 256 seconds)
[10:50:08] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:52:35] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 252 seconds)
[10:52:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:53:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:53:16] *** Joins: aniketgm (~Aniket@49.36.107.79)
[10:54:21] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[11:01:42] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[11:03:53] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:07:15] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 268 seconds)
[11:08:27] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[11:09:16] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[11:11:23] *** Joins: malloy (~jimery@116.30.222.36)
[11:18:39] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:19:51] *** Joins: rgrinberg (~textual@187.223.209.106)
[11:21:33] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[11:21:51] <pingpongball> lets rewrite c++ in rust?
[11:21:53] <pingpongball> :)
[11:22:24] <TinoDidriksen> Take that to #C++-social
[11:23:29] <pingpongball> :)
[11:23:52] *** Joins: rahl (~rahl@102.114.128.177)
[11:33:51] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[11:34:05] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:39:28] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:40:29] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:43:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:44:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:44:58] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[11:46:27] *** Joins: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net)
[11:47:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[11:48:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:51:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:54:11] *** Joins: stonkey (~stonkey@user/stonkey)
[12:02:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071)
[12:02:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071) (Changing host)
[12:02:16] *** Joins: skapata (~Skapata@user/skapata)
[12:04:13] *** Joins: rendar (~rendar@user/rendar)
[12:07:32] *** Joins: limubs (~limubs@cgn-89-0-49-196.nc.de)
[12:07:38] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:09:03] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[12:09:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:10:41] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:28ca:c225:1872:f47e) (Quit: Leaving)
[12:15:06] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[12:15:24] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Killed (NickServ (GHOST command used by lh_ideapad_)))
[12:15:28] *** lh_ideapad_ is now known as lh_ideapad
[12:20:30] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:20:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:26:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[12:30:08] *** Quits: JoeyLong[m] (~tezzy26ma@2001:470:69fc:105::1:3333) (Quit: You have been kicked for being idle)
[12:35:28] *** Joins: adeliktas (~adeliktas@2001:16b8:22c1:c800:fc6c:f5c3:4e96:ccc3)
[12:39:15] *** Parts: adeliktas (~adeliktas@2001:16b8:22c1:c800:fc6c:f5c3:4e96:ccc3) ()
[12:39:23] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:39:45] *** Quits: Flannel (~flannel@user/flannel) (Ping timeout: 268 seconds)
[12:44:24] *** Joins: logann2019 (~logann201@185.red-88-21-139.staticip.rima-tde.net)
[12:46:41] *** Joins: robod34 (Username@79.113.195.239)
[12:49:45] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:50:12] *** Joins: aniketgm (~Aniket@49.36.107.79)
[12:52:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:53:44] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:55:03] *** Joins: xkuru (~xkuru@user/xkuru)
[12:58:48] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:02:51] *** Quits: anzu (~anzu@melkki.cs.helsinki.fi) (Ping timeout: 245 seconds)
[13:07:50] *** Joins: anzu (~anzu@melkki.cs.helsinki.fi)
[13:08:47] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[13:14:28] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[13:15:38] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:e72a:114:f72:6a3)
[13:21:00] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[13:22:38] *** Joins: aniketgm (~Aniket@49.36.107.79)
[13:27:23] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:8c12:d3c6:769f:dd13)
[13:27:23] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:8c12:d3c6:769f:dd13) (Changing host)
[13:27:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[13:33:09] *** Joins: plastico (~plastico@neomutt/plastico)
[13:35:07] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:34] *** ChanServ sets mode: +v npaperbot
[13:39:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:40:23] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:40:58] *** Joins: furrymcgee (~devuan@cgn-89-1-209-93.nc.de)
[13:41:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:41:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:42:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:56:23] *** Joins: ko (~i.am@user/marlboro)
[13:56:24] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Ping timeout: 256 seconds)
[13:58:40] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:01:09] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[14:01:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:09:09] *** Joins: Hercules (~Hercules@user/hercules)
[14:11:47] *** Quits: Hercules (~Hercules@user/hercules) (Client Quit)
[14:13:09] *** Quits: callq (~callq@2409:4062:231c:7ae8:3d73:6aac:1dda:a7de) (Ping timeout: 250 seconds)
[14:14:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:14:52] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[14:16:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:17:02] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:19:04] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Ping timeout: 256 seconds)
[14:22:20] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[14:22:28] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:28:58] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:e72a:114:f72:6a3) (Quit: Leaving)
[14:32:45] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:12] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:ccf4:63ad:cad7:4144)
[14:42:49] *** Joins: seninha (~seninha@user/seninha)
[14:43:16] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[14:43:34] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:43:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[14:43:49] *** Quits: pypy (~pypy@2400:8904::f03c:92ff:fed7:3f64) (Ping timeout: 240 seconds)
[14:46:04] *** Joins: cursey (~cursey@user/cursey)
[14:49:46] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:55:28] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[14:58:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[15:01:25] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:05:05] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:05:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:14:22] *** Joins: Blast (~Blast@185.244.23.153)
[15:15:43] *** Quits: Blast (~Blast@185.244.23.153) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[15:21:11] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 250 seconds)
[15:27:45] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[15:30:30] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:37:49] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[15:38:28] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[15:38:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:04] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[15:40:17] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[15:41:09] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:41:39] *** Joins: vin (~vin@user/crash)
[15:42:49] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:43:46] *** Joins: Burgundy (~yomon@79.115.213.171)
[15:46:51] *** Joins: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl)
[15:47:13] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[15:49:32] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[15:50:12] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[15:51:08] *** Joins: pulse (~pulse@user/pulse)
[15:56:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:57:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:11:11] *** Quits: beagles (~beagles@142.162.188.116) (Ping timeout: 256 seconds)
[16:13:07] *** Joins: beagles (~beagles@142.162.188.116)
[16:14:49] *** Joins: proller (~p@2a02:6b8:0:40c:440:1ebd:fa63:be89)
[16:18:04] <aniketgm> with so many here. it's awefully quiet around here.
[16:18:30] <TinoDidriksen> That's because this is the strict topic channel. #C++-social , #C++-general and #C++-basic are more lively.
[16:19:01] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:22:31] <aniketgm> hmm.. I checked out those too. I's say slightly more chats than this. but still not so much c/c++ talk.
[16:23:19] <TinoDidriksen> #C++-social is anything-goes. #C++-general still requires that it pertains to C++, just not only Standard C++. #C++-basic is for learners.
[16:28:57] *** Quits: beagles (~beagles@142.162.188.116) (Remote host closed the connection)
[16:29:30] *** Joins: xiongxin (~Thunderbi@119.123.100.218)
[16:30:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection timed out)
[16:31:03] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:31:13] *** Joins: beagles (~beagles@142.162.188.116)
[16:32:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:01] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[16:37:31] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:38:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:39:49] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[16:43:14] *** Joins: useretail (~useretail@185.132.19.151)
[16:43:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[16:45:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:45:07] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[16:48:55] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:52:00] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[16:53:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:40] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:ccf4:63ad:cad7:4144) (Quit: Leaving)
[16:55:51] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:57:17] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:00:24] *** Joins: seninha (~seninha@user/seninha)
[17:06:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:06:33] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[17:11:56] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[17:21:55] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:22:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:27:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:28:20] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[17:31:41] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:33:15] *** Joins: Colt (~Colt@user/colt)
[17:33:16] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 268 seconds)
[17:34:35] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[17:36:32] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Ping timeout (120 seconds))
[17:36:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[17:36:46] *** Joins: szutt (~szutt@116.37.2.145)
[17:37:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:37:30] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:39:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:35] *** ChanServ sets mode: +v npaperbot
[17:39:40] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[17:40:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:40:19] *** Quits: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 252 seconds)
[17:42:21] <pa> what happens to a std::list variable after it gets moved? it ends up empty?
[17:42:27] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[17:42:50] <pa> like std::list<int> foo; ...; auto bar = std::move(foo);
[17:44:33] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[17:46:30] <PJBoy> something like that
[17:46:40] <PJBoy> it's unspecified
[17:46:44] <apollo13> I realize that GCC throws a warning here and breaks down nicely https://wandbox.org/permlink/7s2F9IbsWaHB7XQO -- but clang compiles this just fine (and apparently safely). I understand that there is not so much as a wrong and right here, but which behavior do you think is more expected?
[17:46:46] <aniketgm> pa: the ownership shifts. so yes.
[17:47:24] <apollo13> to make matters worse for GCC if I reduce the string to half the length it always returns it properly, so I am wondering what else is at play here
[17:47:25] <pa> thanks, so i don't have to reset it, i assume
[17:47:37] <PJBoy> you should
[17:49:03] <PJBoy> but there are varying levels of pedantry and good practice to apply here
[17:50:47] <PJBoy> unlike vector, I haven't seen anyone argue that lists are empty after move
[17:50:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:50:57] <PJBoy> so I personally wouldn't rely on it
[17:51:16] <PJBoy> but even vector isn't specified to be empty after move
[17:53:15] <pa> wasnt the move operator supposed to leave the moved-from variable in a consistent state?
[17:53:30] <PJBoy> in a valid state, yeah
[17:56:18] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:57:14] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:59:15] <PJBoy> > This check corresponds to the CERT C++ Coding Standard recommendation DCL21-CPP. Overloaded postfix increment and decrement operators should return a const object
[17:59:17] <PJBoy> ewwwww
[17:59:43] <PJBoy> how the hell do you leave that check enabled, LordKalma?
[17:59:44] <aniketgm> huh ?!
[17:59:51] <LordKalma> whaaat?
[18:00:00] <LordKalma> ahhh
[18:00:05] <PJBoy> that's the cert-dcl21-cpp check
[18:00:07] <LordKalma> I never encountered it probably
[18:00:44] <PJBoy> it also says
[18:00:46] <PJBoy> >all of the CERT recommendations have been removed from public view, and so their justification for the behavior of this check requires an account on their wiki to view
[18:00:58] <LordKalma> I had quite a few more disabled before, that's a new project and I "restarted" my file because I forgot why I disabled most of the old stuff
[18:01:03] <LordKalma> PJBoy, also, check channel name
[18:01:25] <PJBoy> whooooops
[18:01:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:01:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:03:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:07:48] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Remote host closed the connection)
[18:10:09] *** Joins: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce)
[18:10:36] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[18:11:25] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[18:12:56] *** Joins: Enitin (~Enitin@82.102.22.85)
[18:14:55] <Alipha> pa: the standard simply states that moved-from containers are in a "valid but unspecified state", so you technically should .clear() afterwards
[18:15:25] *** Quits: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[18:16:17] <pa> ah i get it, so potentially a moved-from list could just be what it was before (so a copy)
[18:16:42] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:22:23] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:24:26] *** Quits: xiongxin (~Thunderbi@119.123.100.218) (Remote host closed the connection)
[18:25:08] <Alipha> PJBoy: shouldn't the complexity requirements be "constant" for #2, unless the allocators don't propogate (in which case, linear)? Is that a typo in cppreference? https://en.cppreference.com/w/cpp/container/list/operator%3D
[18:26:47] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[18:26:52] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:28:27] <PJBoy> better check the spec
[18:31:23] <Alipha> pa: nah, complexity requirements (which I assume is supposed to be "constant", not "linear") for the move constructor and move operator= would mean copying/moving individual elements is not a valid implementation. There's not really a logical option other than making the moved-from list empty. But the standard only requires "unspecified but valid state", so to be completely safe, we can't assume that's "empty"
[18:32:39] <pa> Alipha: but doesn't a std::list contain pointers?
[18:33:00] <pa> or, i thought it's a linked list, but i might be wrong
[18:34:02] <PJBoy> list<int> could just copy the root node
[18:34:11] <Alipha> pa: it is a linked list
[18:34:26] <pa> PJBoy: yea that's what i meant
[18:34:41] <PJBoy> but like list<string> wouldn't be able to
[18:34:58] <PJBoy> so you'd consider expecting std::list to leave its moved from object empty
[18:35:13] <PJBoy> if sanity can be expected from stdlib implementations
[18:35:13] <Alipha> PJBoy: and have a separate member variable to indicate that the moved-from list doesn't own the elements?
[18:35:25] <PJBoy> could do actually
[18:35:38] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 265 seconds)
[18:35:42] <PJBoy> although idk
[18:36:10] <PJBoy> the list dtor spec might throw a spanner in that idea's works
[18:36:33] <PJBoy> but for trivial types, destruction is a no-op
[18:36:49] <PJBoy> so I see no reason for list<int>'s move ctor to clear the source list
[18:37:33] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:38:35] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[18:40:30] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 268 seconds)
[18:42:21] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[18:43:46] *** Joins: chippy (~chippy@61.136.91.249)
[18:51:16] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[18:55:17] *** Joins: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[18:57:01] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 240 seconds)
[18:58:02] <furrymcgee> implementations could swap source and dest list
[18:58:26] *** Quits: millido (~millido@84.210.150.128) (Read error: Connection reset by peer)
[18:58:32] <urdh> huh
[18:58:33] <urdh> https://www.reddit.com/r/cpp/comments/rfhx7t/destructor_called_twice_on_the_same_object_with/?utm_source=share&utm_medium=web2x&context=3
[18:58:50] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 265 seconds)
[19:05:17] *** Quits: chippy (~chippy@61.136.91.249) (Quit: Leaving)
[19:08:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[19:09:26] <Alipha> urdh: can you add: A(const A&) { constructions++; }
[19:10:16] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:10:46] <urdh> Alipha: not my code, just thought it was interesting
[19:11:08] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[19:12:25] <urdh> doesn't seem to make much of a difference, though
[19:16:53] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 268 seconds)
[19:21:16] *** Joins: Atque (~Atque@user/atque)
[19:22:52] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:22:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:26:02] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:29:24] *** Joins: river (~My_user_n@tilde.team/user/river)
[19:29:50] <river> the first thing I do when I work on a C++ codebase is change all methods to public
[19:31:50] <InPhase> river: Okay.  Well stop doing that.  :)
[19:32:00] <river> no im evil >:)
[19:32:59] <InPhase> Encapsulation is actually an important part of OOP architecture.  It allows you to design classes which provide strong guarantees of behavior under external usage, which reduces the scope of possible bugs and constrains where you need to look for certain types of problems.
[19:33:41] <InPhase> Making everything public increases the amount of spaghetti you have to deal with and check for.
[19:34:13] <GyrosGeier> T &operator=(T const &lhs, T &rhs)
[19:34:13] <GyrosGeier> { return rhs = lhs;
[19:34:13] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[19:34:39] <GyrosGeier> argh
[19:34:56] <GyrosGeier> that's only half the evil code
[19:35:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:35:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:36:23] <urdh> too bad operator= can't be a non-member
[19:36:54] <river> in theory a good design with encapsulation is possible
[19:37:03] <river> but in practice i gotta get stuff done and i need to call THAT function
[19:37:05] <river> and its private
[19:37:51] <urdh> you're the type of programmer that produces spaghetti, then
[19:37:52] <anyone> imagine the turmoil of a freestanding  void operator=(int, MyType &);
[19:37:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:38:25] <urdh> "better make this thing mutable global state so I can change it whenever I feel like I need to"
[19:38:27] <anyone> To have MyType::operator int()  is probably sufficient for that case
[19:39:26] <river> spaghetti is subjective, maybe people are just used to everything being made out of duplo blocks instead of lego
[19:41:03] <PJBoy> because duplo and lego are in any way fundamentally different?
[19:41:08] <PJBoy> I don't understand the analogy
[19:41:13] <urdh> yeah me neither
[19:43:53] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Ping timeout: 252 seconds)
[19:44:07] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[19:49:43] *** Quits: furrymcgee (~devuan@cgn-89-1-209-93.nc.de) (Quit: leaving)
[19:52:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:53:11] *** Joins: stonkey (~stonkey@user/stonkey)
[19:53:29] <river> duplo is bigger
[19:54:12] <imMute> river: that's literally the only difference. it's otherwise functionally the same as lego
[20:01:31] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:14:42] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:16:47] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[20:19:37] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:21:21] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[20:23:53] *** Joins: netpipe (~netpipe@user/netpipe)
[20:23:54] *** Quits: proller (~p@2a02:6b8:0:40c:440:1ebd:fa63:be89) (Ping timeout: 265 seconds)
[20:25:27] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[20:25:48] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[20:25:59] <Alipha> urdh: yeah, putting a cout in the destructor definitely indicates this is NOT correct behavior: https://wandbox.org/permlink/ahFZeXiVnmAUITfI
[20:26:26] <Alipha> under no circumstance should the same object be destroyed twice
[20:28:20] *** Quits: netpipe (~netpipe@user/netpipe) (Client Quit)
[20:28:42] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[20:32:51] <PJBoy> I agree with that conclusion
[20:33:25] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[20:33:37] <PJBoy> but I wouldn't like to cite the standard on that one
[20:39:57] *** Joins: sedeki (~textual@user/sedeki)
[20:40:07] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:41:43] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[20:42:05] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:42:12] *** Joins: proller (~p@2a02:6b8:0:40c:df9a:5d06:33ea:266f)
[20:45:16] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[20:46:18] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[20:47:41] *** Quits: proller (~p@2a02:6b8:0:40c:df9a:5d06:33ea:266f) (Ping timeout: 252 seconds)
[20:52:09] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[20:52:56] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[20:54:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:54:45] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[20:54:57] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:56:14] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:57:58] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[20:58:19] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.162) (Ping timeout: 250 seconds)
[20:58:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[20:59:12] *** Joins: Betal (~Betal@user/betal)
[21:00:27] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[21:00:29] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 250 seconds)
[21:01:01] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:02:40] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[21:03:32] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[21:05:07] *** Joins: proller (~p@2a02:6b8:0:40c:4654:87f9:4630:168e)
[21:12:37] *** Joins: millido (~millido@84.210.150.128)
[21:13:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:13:27] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[21:15:54] *** Parts: aniketgm (~Aniket@49.36.107.79) ()
[21:15:59] *** Joins: aniketgm (~Aniket@49.36.107.79)
[21:18:04] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[21:23:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c9b:338b:bb4b:5779)
[21:25:58] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:26:55] *** Quits: limubs (~limubs@cgn-89-0-49-196.nc.de) (Ping timeout: 252 seconds)
[21:31:26] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:32:50] <RandomReader> apollo13 - gcc is warning about a situation that is UB, if that's the question .. the code is incorrect regardless of what appears to happen
[21:35:21] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:39:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:35] *** ChanServ sets mode: +v npaperbot
[21:40:31] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[21:44:02] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:46:44] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[21:47:30] *** Joins: nvmd (~nvmd@user/nvmd)
[21:47:56] *** Joins: Guest26 (~Guest26@191.19.68.12)
[21:48:26] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[21:48:26] <Guest26> Hello
[21:54:12] *** Joins: xkuru (~xkuru@user/xkuru)
[21:55:12] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[21:55:19] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[21:59:22] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[21:59:26] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[22:02:11] <Alipha> Guest26: hi
[22:04:13] <Alipha> ... we should have a bot that detects messages like that and then respond appropriately ;-)
[22:05:25] *** Quits: proller (~p@2a02:6b8:0:40c:4654:87f9:4630:168e) (Ping timeout: 252 seconds)
[22:05:34] <aniketgm> !hello
[22:05:35] <nolyc> howdy!
[22:05:55] <aniketgm> !greet Guest26
[22:05:56] <nolyc> aniketgm: Error: "greet" is not a valid command.
[22:06:06] <aniketgm> !hello Guest26
[22:06:06] <nolyc> aniketgm: Error: "hello" is not a valid command.
[22:06:36] <aniketgm> ok
[22:06:38] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:06:57] <Alipha> !hi
[22:06:58] <nolyc> Hi and welcome to #C++! This channel is for the discussion of standard C++. For algorithms, libraries, platforms and tools, go to #C++-general. Beginner questions might get more appropriate responses in #C++-basic.
[22:07:09] *** Joins: magla (~gelignite@55d43df6.access.ecotel.net)
[22:12:49] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:3b12:6706:4ee5:604d)
[22:14:26] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[22:19:05] *** SuperNintendoSUX is now known as BucetaRosa
[22:24:32] *** Joins: Guest52 (~Guest52@191.19.68.12)
[22:24:41] <Guest26> Hello
[22:25:08] <Guest52> Someone here is a bot?
[22:25:37] <imMute> there's a factoid bot here called dpkg
[22:27:16] <Guest52> hmm i dont think soo....
[22:27:45] <Guest52> maybe u are a bot
[22:30:31] *** Quits: Guest26 (~Guest26@191.19.68.12) (Quit: Client closed)
[22:30:33] *** Quits: Guest52 (~Guest52@191.19.68.12) (Quit: Client closed)
[22:31:03] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:31:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:33:15] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[22:36:59] *** Joins: Pook (~Pook@2001:8a0:f996:1400:40d6:8818:5c54:e122)
[22:37:37] *** Joins: r-g (~r-g@163.172.58.132)
[22:40:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce) (Ping timeout: 250 seconds)
[22:43:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:770c:7340:e88b:8722)
[22:47:08] <apollo13> RandomReader: ok thanks; I guess I do not fully understand the error message. I mean I know that the initializer_list is just a small proxy around T[]; but I thought the assignment would just copy the data over -- where exactly does undefined come in?
[22:48:35] <RandomReader> initializer_list doesn't own any data, it's a view type like string_view
[22:48:56] <RandomReader> only the compiler can create the actual storage, which is a const T[] underneath .. it then creates an initializer list that is looking at it
[22:49:05] <RandomReader> so the lifetime is effectively tied to the context where the braces are
[22:50:13] <RandomReader> in general, initializer_list should only be used in temporary contexts like function params, it's not meant for more common variable use
[22:52:47] <RandomReader> put another way, if there's going to be an initializer_list created, it happens "{right here}" .. you can hold *that* initializer_list in a variable and it will last as long as the variable does, but anything beyond that (like assigning it to a different initializer_list) will not go as expected, because only that first original one matches the lifetime
[22:52:48] <apollo13> RandomReader: I see, yeah we only ran into this by accident because someone typed "auto var = {a,b,c}" instead of "vector<T> var{a,b,c};"
[22:53:29] <RandomReader> (the underlying rule being that the compiler's created storage is required to live with the original initializer_list)
[22:53:46] <RandomReader> ah, gotcha
[22:53:54] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:54:11] <apollo13> I guess the part that I do not understand if I do "var = {a}" here, why it doesn't even life for the time of the assignment
[22:54:27] <apollo13> on the other hand some_func({a}) would be valid I guess?
[22:54:29] <RandomReader> I'd probably tackle that one by seeing if there's a lint rule you can apply, I'd expect e.g. clang-tidy to be able to complain about bare initializer_lists for auto like that
[22:54:52] <RandomReader> it does live for the duration of the assignment, it just dies at the end of that line
[22:55:17] <RandomReader> sort of like   foo = string().c_str()
[22:55:58] <apollo13> that one I understand
[22:56:24] <apollo13> I guess I just don't see the temporary objects involved there clearly yet for initializer_list, anyways thank you for your help I'll go and RTFM a bit
[22:56:32] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66006dab7ab0a7593362.ipv6.abo.wanadoo.fr)
[22:56:34] <RandomReader> yeah it's a special rule set
[22:57:12] <RandomReader> for "{init}" the compiler creates const T[] and then creates an initializer_list that refers to it, and that auto-created initializer_list is the only one the lifetime is tied to
[22:57:24] <RandomReader> as-if it were a const T& lifetime extension
[22:57:45] <RandomReader> in the assignment, it just ends up as a temporary on the right-hand side, so the lifetime ends there
[22:58:06] <apollo13> the lifetime of the inner T[]?
[22:58:13] <RandomReader> the T[] is external
[22:58:38] <RandomReader> just some compiler-invented magic
[22:58:59] <RandomReader> not being stored inside is sort of the issue here, since that means it doesn't follow along to be copied or anything
[23:00:27] <apollo13> yeah my naive understanding was that assignment here would basically iterate over the array and copy the contents over
[23:00:59] <RandomReader> initializer_list itself basically just has a { const T*, size_t } inside
[23:01:24] <RandomReader> (or equivalent)
[23:05:57] <apollo13> RandomReader: Oh I think I slowly begin to understand. Because initializer_list has no assignment operator that assignment will just copy the pointer over which of course breaks if the array is temporary
[23:06:17] *** Parts: bpalmer (~user@user/bpalmer) (ERC (IRC client for Emacs 27.2))
[23:06:39] <RandomReader> right
[23:07:17] <apollo13> any reason why initializer_list doesn't implement a sensible assignment operator? Because it is just not ment to be used in such a way?
[23:07:26] <RandomReader> https://en.cppreference.com/w/cpp/utility/initializer_list tries to describe it too, if it helps
[23:07:38] <RandomReader> yeah it's just not intended for this kind of use
[23:07:55] <apollo13> actually your { const T*, size_t } comment and looking at the source made most sense to me :)
[23:08:13] <RandomReader> its purpose is just to be a value representing a view of an array, so you can have a function(initializer_list<T> args)
[23:08:33] <apollo13> wouldn't it make sense then to actually implement an assignment operator but error/panic -- see like easy to run into UB here
[23:08:34] <RandomReader> combined with compiler support to store those args at the call site, with no other allocation needed
[23:08:45] <apollo13> on the other hand string().c_str() is just as easy to run into
[23:08:56] <RandomReader> assignment itself isn't a problem though, as long as the lifetimes are ok
[23:09:23] <RandomReader> e.g. that function(args) can do whatever it wants to transport that around internally, assign to other initializer_lists, etc .. as long as it finishes before it returns
[23:10:00] <apollo13> oh right that is also why auto vec2 = {valueLongString}; vec = vec2 did work -- because the lifetime was okay now because vec2 lives longer than vec
[23:10:00] <RandomReader> so it could be that was just considered useful flexibility, no reason to overly restrict it .. but I don't know for certain, I haven't looked for any of the original discussions about this
[23:10:18] <apollo13> and as such the pointer to T* will be valid as long as vec2 lives
[23:10:19] <RandomReader> right
[23:10:57] <apollo13> thank you for your patience -- I am not very fast with such concepts; but it is clear now
[23:11:08] <apollo13> gotta look for clang-tidy rules now
[23:11:17] <apollo13> would be nice if I could catch that
[23:11:30] <RandomReader> no worries, initializer_list is a bit unique
[23:15:41] <RandomReader> hmm, I thought something had a lint rule for this, but I'm not finding it offhand either
[23:16:00] <RandomReader> maybe ask that particular question in #c++-general, see if they know
[23:17:24] <BucetaRosa> << {1,2,3}
[23:17:24] <geordi> error: expected primary-expression before '{' token
[23:18:05] <RandomReader> it's specific to auto
[23:18:29] <RandomReader> { auto foo = {1,2,3}; cout << foo; }
[23:18:29] <geordi> {1, 2, 3}
[23:18:51] <RandomReader> in other contexts it's just a braced-init-list and won't necessarily become a std::initializer_list
[23:19:53] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[23:24:49] <BucetaRosa> :)
[23:25:23] *** Joins: jdj (~jd@162.243.188.133)
[23:35:48] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[23:36:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:39:58] *** Quits: jdj (~jd@162.243.188.133) (Remote host closed the connection)
[23:40:55] *** Joins: badone (~badone@209.132.189.136)
[23:43:42] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[23:44:08] *** Joins: Cyp (~cyp@213.237.85.9)
[23:44:25] *** Joins: seninha (~seninha@user/seninha)
[23:45:16] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[23:48:14] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Client Quit)
[23:50:34] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[23:55:05] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[23:57:56] *** Joins: proller (~p@80.240.216.69)
