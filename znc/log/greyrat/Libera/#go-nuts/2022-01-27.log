[00:01:01] *** Joins: easbarba (~user@2804:1b2:81:9dbd:11f6:c867:c4b4:8ad3)
[00:03:09] <siXy> jayalane: I'd say that's a solid maybe, depending on the backtrace. If it was a zipbomb, then nah, if it was an invalid zipfile then maybe but probably not, if it was a valid but unusual file that got mishandled, definitely.
[00:03:19] <b0nn> If you file an issue, attaching the stack trace, and  asking the same question, you will get the actual answer, and not an opinion
[00:03:44] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[00:05:20] <jayalane> it was invalid but panic seems excessive - other malformed zip files just get the returning with an error.  I'll file then, thanks.  I didn't initially because the form wants to recreate with newest release and a bunch of data I can't get unless I craft a jar to trigger it, which I don't think is worthwhile as the bug is pretty obvious.
[00:07:53] <b0nn> There have been "This C causes a panic" bugs filed before - which were promptly closed with "A C bug isn't a Go bug" - so I'd recommend wording it as "Not sure if this is a bug, offer this as a trail in case it is"
[00:10:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[00:11:37] <jayalane> There was no C it was the archive/zip/reader.go; one function assumed a name from the directory had length > 0
[00:11:43] <jayalane> https://github.com/golang/go/blob/go1.17.2/src/archive/zip/reader.go#L800
[00:15:59] <ikke> So the zip had a entry where the name is length 0?
[00:16:08] <jayalane> I guess it was an entry named just "/"
[00:18:34] <siXy> It'd need to be an empty string, otherwise the check on L800 would have worked. You may as well file an issue, but that's 100% invalid zip format.
[00:22:32] *** Joins: walkr (~walkr@a94-132-18-230.cpe.netcabo.pt)
[00:22:34] *** Quits: walkr (~walkr@a94-132-18-230.cpe.netcabo.pt) (Client Quit)
[00:22:50] *** Quits: dr0n (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[00:24:09] *** Joins: dr0n (~nabromov@176.26.119.61)
[00:25:22] *** Joins: xavpaice (~quassel@43.249.199.14)
[00:27:26] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[00:28:24] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Quit: boof)
[00:28:57] *** Joins: boof (~rickybob@35.143.255.39)
[00:30:55] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[00:31:04] <jayalane> Oh cool, it already fixed.  https://github.com/golang/go/commit/b212ba68296b503b395e7d1838ca72a19030a6bf
[00:32:17] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[00:33:49] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[00:33:53] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[00:33:53] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Client limit exceeded: 20000)
[00:41:07] *** Joins: shtirlic_ (~shtirlic@95-55-121-107.dynamic.avangarddsl.ru)
[00:41:55] *** Joins: treble54 (~Guest62@c-73-122-151-186.hsd1.ga.comcast.net)
[00:42:13] <jayalane> I think it had a "/" and the toValidName stripped it out; the fix was to check toValidName for the name being "" and just continuing on in that case. Arguably, should have errored out as now  you have stuff in the file that go can't see.
[00:42:13] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[00:44:02] *** Quits: shtirlic (~shtirlic@95-55-121-107.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[00:48:58] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[00:51:28] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[00:58:25] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:59:10] *** Quits: Latrina (~Latrina@user/latrina) (Quit: Powered by AlpineLinux under the supervision of Docker.)
[01:00:06] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[01:00:06] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[01:00:06] *** Joins: Latrina (~Latrina@user/latrina)
[01:02:54] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[01:03:14] *** Quits: LiftLeft (~LiftLeft@fixed-138-186-31-170.totalplay.net) (Ping timeout: 250 seconds)
[01:04:25] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:05:27] *** Joins: foobaz (~oofabz@199.58.97.156)
[01:06:51] *** Joins: Batzy (~quassel@user/batzy)
[01:08:02] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:13:42] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[01:13:59] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[01:18:00] *** Joins: holgersson (~quassel@user/holgersson)
[01:21:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:21:37] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Ping timeout: 250 seconds)
[01:22:47] *** Joins: lechner (~lechner@debian/lechner)
[01:28:59] *** Joins: ska (~ska@user/ska)
[01:30:52] <ska> I want to have a service that scans files and searches for select day and puts that data into a Struct. I also want to include a REST type of service which can provide that data. How can I share the Stucture between the 2 services, assuming they live in the same package file.?
[01:32:58] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:33:12] *** Joins: mickey8 (~user@user/mickey)
[01:34:06] <b0nn> If they live int the same package the type is viewable by both
[01:34:44] <ska> I want to mutate an instance of the struct in service1 and read that data in service2...
[01:34:53] <b0nn> iff they live in different packages the options are: duplicate, or share (in a horrible 3rd package named "nobody owns me, so we fight when there are changes"
[01:37:09] *** Quits: xzr (xzar@shell.troopers.fi) (Ping timeout: 265 seconds)
[01:38:07] <ska> I suppose I can make service1 and service1 methods on the same struct?
[01:40:16] <b0nn> So, I have a bit of a bugbear with the problem you are facing, and that is the (shared?) type couples the two services
[01:40:48] <ska> Yes, but service2 only reads that data.. read-only.
[01:41:06] <b0nn> ...
[01:51:56] *** dgl is now known as dg
[01:55:54] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Client limit exceeded: 20000)
[01:56:57] *** Joins: OneLap (OneLap@108.173.211.175)
[02:02:02] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:13:09] *** Joins: arcatech (~arcatech@user/arcatech)
[02:13:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:15:23] *** Quits: arcatech (~arcatech@user/arcatech) (Read error: Connection reset by peer)
[02:16:12] *** Joins: arcatech (~arcatech@user/arcatech)
[02:18:19] *** Joins: rcernin (~rcernin@101.189.141.138)
[02:20:17] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[02:27:46] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:29:20] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[02:33:43] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:36:58] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:39:55] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:43:49] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:43:54] *** Joins: Maxattax97 (~max@2603:300f:b9f:2000::b278)
[02:45:33] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:49:25] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:54:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[02:54:33] *** Quits: ultsllt (~ultsllt@50.231.5.242) (Remote host closed the connection)
[02:54:34] *** Quits: smach (~savio@177.12.44.211) (Read error: Connection reset by peer)
[02:54:36] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:44] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[02:55:19] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:56:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:56:53] *** Joins: jimeh (jimeh@matrix.bah.io)
[02:57:21] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:57:45] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:58:05] *** Joins: bruno1 (~bruno@187.115.253.43)
[02:59:37] *** Quits: Maxattax97 (~max@2603:300f:b9f:2000::b278) (Remote host closed the connection)
[03:02:56] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[03:03:22] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:05:31] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[03:05:49] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:15:46] *** Joins: Sqaure (~a@user/square)
[03:15:59] *** Quits: treble54 (~Guest62@c-73-122-151-186.hsd1.ga.comcast.net) (Quit: Client closed)
[03:16:45] <Sqaure> Any know if there is any workaround regarding building golang in userspace? https://github.com/golang/go/issues/42525
[03:16:45] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[03:18:02] <Sqaure> Ive tried both go1.16.13 and go1.15.2
[03:18:27] <Sqaure> ...stops me from building docker through nix
[03:19:53] *** Quits: morgabra (sid500580@user/morgabra) (Quit: Connection closed for inactivity)
[03:23:37] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[03:25:53] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[03:28:53] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[03:29:49] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[03:34:20] *** Joins: souvik (~souvik@103.82.81.39)
[03:34:38] *** Quits: Latrina (~Latrina@user/latrina) (Quit: Powered by AlpineLinux under the supervision of Docker.)
[03:35:33] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[03:35:33] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[03:35:33] *** Joins: Latrina (~Latrina@user/latrina)
[03:35:44] *** Joins: yoonkn (~user@175.197.208.79)
[03:36:30] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:37:07] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:37:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[03:37:34] *** Joins: Torr (~Torr@user/torr)
[03:38:37] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 240 seconds)
[03:41:24] *** Quits: itsalexjones_ (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:45:20] *** Quits: Latrina (~Latrina@user/latrina) (Quit: Powered by AlpineLinux under the supervision of Docker.)
[03:46:10] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 250 seconds)
[03:46:14] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[03:46:14] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[03:46:14] *** Joins: Latrina (~Latrina@user/latrina)
[03:50:53] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[03:53:54] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[03:55:29] *** Quits: Latrina (~Latrina@user/latrina) (Quit: Powered by AlpineLinux under the supervision of Docker.)
[03:56:24] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[03:56:24] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[03:56:24] *** Joins: Latrina (~Latrina@user/latrina)
[04:01:17] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 240 seconds)
[04:09:17] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[04:15:33] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[04:25:58] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:26:50] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[04:27:33] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[04:29:45] *** Joins: jimeh (jimeh@matrix.bah.io)
[04:36:41] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:37:39] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:38:41] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[04:42:55] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:44:57] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:00] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:53:41] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:00:18] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:05:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: your partner prefers dildos)
[05:05:35] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:11:37] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:14:12] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[05:15:50] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[05:19:02] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:26:10] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:31:08] *** Joins: shtirlic (~shtirlic@178.69.58.193)
[05:31:39] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:33:38] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:34:30] *** Quits: shtirlic_ (~shtirlic@95-55-121-107.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[05:37:58] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 250 seconds)
[05:38:28] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:42:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:46:00] *** Quits: lilgopher (~textual@2601:241:8000:38f0:19e4:7178:7a1:26c0) (Quit: Textual IRC Client: www.textualapp.com)
[05:46:12] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[05:46:50] *** Joins: lilgopher (~textual@2601:241:8000:38f0:c97d:6008:8225:7dd2)
[05:48:37] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 240 seconds)
[06:02:38] *** Joins: fdan (~fdan@2600:6000:ff7e:f6d5::97b)
[06:04:09] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:05:37] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 240 seconds)
[06:11:50] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:12:17] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 240 seconds)
[06:14:33] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:16:44] *** Quits: notepad7 (~notepad@129.159.46.243) (Quit: The Lounge - https://thelounge.chat)
[06:16:45] *** Quits: llorllale (~llorllale@198.98.119.85) (Quit: WeeChat 3.4)
[06:17:28] *** Joins: notepad7 (~notepad@129.159.46.243)
[06:17:49] *** Quits: notepad7 (~notepad@129.159.46.243) (Client Quit)
[06:18:52] *** Quits: fdan (~fdan@2600:6000:ff7e:f6d5::97b) (Quit: Client closed)
[06:19:21] *** Joins: notepad7 (~notepad@129.159.46.243)
[06:19:37] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[06:19:50] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 268 seconds)
[06:19:53] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:20:40] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[06:20:54] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:21:02] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[06:23:48] *** Joins: califax- (~califax@user/califx)
[06:24:28] *** Joins: llorllale (~llorllale@198.98.119.85)
[06:25:57] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 240 seconds)
[06:26:05] *** Quits: lilgopher (~textual@2601:241:8000:38f0:c97d:6008:8225:7dd2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:28:06] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:28:06] *** califax- is now known as califax
[06:28:16] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:29:26] *** Joins: Atque (~Atque@user/atque)
[06:33:25] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 256 seconds)
[06:33:35] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:33:52] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[06:34:39] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:40:11] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 268 seconds)
[06:41:37] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[06:42:01] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:43:39] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:44:16] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 250 seconds)
[06:46:33] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[06:46:37] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 240 seconds)
[06:46:39] *** Quits: andlabs (~andlabs@ool-457dd512.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:46:45] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[06:48:19] *** Joins: tesuji_ (~quassel@2a02:908:180:9500:a0da:e697:f0fa:d750)
[06:48:22] *** Joins: bruno1 (~bruno@187.115.253.43)
[06:50:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[06:51:38] *** Quits: tesuji (~quassel@2a02:908:180:9500:ccb5:e540:a362:3cbf) (Ping timeout: 250 seconds)
[06:52:11] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[06:52:51] *** Quits: DogHackit (~doghackit@c-76-27-57-63.hsd1.ut.comcast.net) (Quit: WeeChat 3.4)
[06:53:49] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 256 seconds)
[06:55:46] *** Joins: bruno1 (~bruno@187.115.253.43)
[07:00:37] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 256 seconds)
[07:02:07] *** Joins: bruno1 (~bruno@187.115.253.43)
[07:02:17] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 240 seconds)
[07:02:59] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[07:07:56] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 268 seconds)
[07:09:31] *** Joins: bruno1 (~bruno@187.115.253.43)
[07:14:02] *** Quits: bruno1 (~bruno@187.115.253.43) (Ping timeout: 240 seconds)
[07:15:17] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (Ping timeout: 240 seconds)
[07:17:02] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 240 seconds)
[07:18:54] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[07:22:01] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[07:23:51] *** Joins: easbarba` (~user@177.43.146.7.dynamic.adsl.gvt.net.br)
[07:25:49] *** Quits: easbarba (~user@2804:1b2:81:9dbd:11f6:c867:c4b4:8ad3) (Ping timeout: 268 seconds)
[07:28:08] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[07:28:37] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:30:16] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:34:33] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[07:43:33] <sdfgsdfg> hi
[07:43:48] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[07:43:48] <sdfgsdfg> can go be used like py
[07:43:54] <sdfgsdfg> is go > py ?
[07:43:54] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:44:46] *** Parts: easbarba` (~user@177.43.146.7.dynamic.adsl.gvt.net.br) ()
[07:48:01] <sdfgsdfg> no ? ok
[07:48:12] <cim> do not pass go
[07:48:15] <cim> do not collect $200
[07:53:19] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[07:56:11] *** Joins: Atque (~Atque@user/atque)
[07:59:54] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[08:04:16] *** Joins: walterwhip (~www@user/walterwhip)
[08:16:57] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:36:34] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[08:41:40] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 268 seconds)
[08:43:19] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:45:17] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[08:45:19] *** Quits: deckard (~deckard@user/deckard) (Quit: see ya l8r)
[08:45:38] *** Joins: deckard (~deckard@user/deckard)
[08:50:14] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[08:51:33] *** Joins: walterwhip (~www@user/walterwhip)
[08:52:36] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[08:56:09] *** Joins: walterwhip (~www@user/walterwhip)
[08:58:13] *** Quits: walterwhip (~www@user/walterwhip) (Max SendQ exceeded)
[09:09:17] *** Joins: bluedust (~bluedust@103.161.144.140)
[09:11:31] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[09:12:02] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[09:16:43] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:18:32] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[09:19:32] *** Joins: bluedust (~bluedust@103.161.144.140)
[09:33:35] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[09:36:18] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 250 seconds)
[09:37:38] *** Joins: fdan (~fdan@103.215.168.1)
[10:04:40] *** Joins: R2robot (~R2robot@user/r2robot)
[10:08:41] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[10:09:44] *** Joins: R2robot_ (~R2robot@user/r2robot)
[10:10:04] *** Quits: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:12:19] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[10:14:16] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[10:15:27] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[10:21:15] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[10:22:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:27:10] *** Joins: jessequinn (~jessequin@177.73.136.29)
[10:29:13] *** Joins: xsteadfastx (~marv@94.31.99.245)
[10:29:25] <jessequinn> Hi, i am having issues getting client side mTLS working in GO. I keep getting `remote error: tls: unknown certificate authority"`. I verified via openssl that the module matches between the client cert and private key. I also verified the CA and client crt. The modulus' match and the verify of the client cert to the CA returned OK. Any ideas what could be the problem?
[10:29:25] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[10:29:32] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[10:29:39] *** Joins: wielding (~wielding@user/wielding)
[10:30:01] <jessequinn> I am using x509.SystemCertPool() and appending the CA cert to it.
[10:30:47] *** Joins: r0lh (~r0lh@ipbcc22b08.dynamic.kabel-deutschland.de)
[10:31:20] <jessequinn> https://go.dev/play/p/uPRmF4lhWhC you can see the function
[10:31:57] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 240 seconds)
[10:33:12] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Client limit exceeded: 20000)
[10:33:37] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[10:45:04] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: your partner prefers dildos)
[10:45:34] *** Joins: kai1 (~kai@x50d24799.cust.hiper.dk)
[10:46:42] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[10:46:44] *** Quits: eau (~chat@user/eau) (Ping timeout: 256 seconds)
[10:46:46] *** Joins: justGhost3 (~justache@user/justache)
[10:47:18] *** Quits: justGhost (~justache@user/justache) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 256 seconds)
[10:47:18] *** kai1 is now known as kai
[10:47:18] *** justGhost3 is now known as justGhost
[10:51:16] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 250 seconds)
[10:51:49] *** Joins: eau (~chat@user/eau)
[10:52:28] *** Joins: edr (~edr@enlo.co)
[10:52:28] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:52:28] *** Joins: edr (~edr@user/edr)
[10:53:48] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[10:56:26] *** Joins: bluedust (~bluedust@103.161.144.140)
[10:56:53] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[10:57:38] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[10:58:57] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[10:59:56] *** Joins: rcernin (~rcernin@101.189.141.138)
[11:04:27] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[11:06:04] *** Joins: benji (~benji@user/benji)
[11:06:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:06:36] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Read error: Connection reset by peer)
[11:06:55] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[11:09:07] *** Joins: fef (~thedawn@user/thedawn)
[11:13:42] *** Joins: rendar (~rendar@user/rendar)
[11:14:17] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:19:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[11:21:50] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[11:24:43] *** Joins: shka (~herr@109.231.0.226)
[11:26:11] *** Quits: jessequinn (~jessequin@177.73.136.29) (Quit: Leaving...)
[11:26:26] *** Joins: Guest40 (~Guest40@2600:1700:232b:6110:cd42:fda4:c13c:27c)
[11:29:52] <b0nn> Oh, they left
[11:29:53] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[11:30:18] <b0nn> they're using http.NewRequest for mutual TLS, so the remote isn't going to be asked for a certificate
[11:30:24] *** imm__ is now known as imm_
[11:32:21] *** Quits: r0lh (~r0lh@ipbcc22b08.dynamic.kabel-deutschland.de) (Quit: Client closed)
[11:34:11] *** Joins: absc (~absc@81.31.144.28)
[11:34:17] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 240 seconds)
[11:42:03] *** Quits: Guest40 (~Guest40@2600:1700:232b:6110:cd42:fda4:c13c:27c) (Ping timeout: 256 seconds)
[11:46:43] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[11:48:05] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[11:48:25] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[11:49:48] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[11:50:10] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[11:50:11] *** Quits: adip (~adip@deo188.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:52:15] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[11:55:45] *** Joins: pagnol (~user@014198154145.ctinets.com)
[11:58:27] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:59:14] <pagnol> Does anyone know if there's a way to make this compile? https://pastebin.com/8nY7p7Vn
[11:59:27] <pagnol> Compiler output is at the bottom
[12:01:37] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[12:14:47] *** Joins: adip (~adip@deo188.neoplus.adsl.tpnet.pl)
[12:14:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:22:52] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[12:24:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[12:26:12] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:26:15] *** Joins: rcernin (~rcernin@101.189.141.138)
[12:28:42] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Quit: Leaving)
[12:30:10] *** Quits: rcernin (~rcernin@101.189.141.138) (Client Quit)
[12:31:07] *** Joins: rcernin (~rcernin@101.189.141.138)
[12:32:51] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:34:49] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[12:40:36] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc)
[12:43:08] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[12:45:15] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d168:b787:96fa:e3fc) (Ping timeout: 268 seconds)
[12:45:36] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:45:50] *** Joins: chripell (~chripell@147.80.76.34.bc.googleusercontent.com)
[12:46:36] *** Quits: chripell (~chripell@147.80.76.34.bc.googleusercontent.com) (Client Quit)
[12:57:08] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:57:50] *** Joins: mickey89 (~user@user/mickey)
[12:59:11] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[12:59:12] *** mickey89 is now known as mickey8
[13:04:34] *** Joins: go (~puck@undernet.hu)
[13:06:19] *** Joins: khanred (~khanred@user/khanred)
[13:08:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:09:41] *** Joins: leonarth (~leonarth@user/leonarth)
[13:14:04] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[13:17:15] *** Quits: khanred (~khanred@user/khanred) (Quit: Leaving)
[13:21:55] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[13:26:41] *** Joins: flughafen (~flughafen@p5de8e515.dip0.t-ipconnect.de)
[13:26:45] *** Joins: fef (~thedawn@user/thedawn)
[13:26:52] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[13:30:12] <flughafen> I'm trying to get a package to build for ubuntu, https://bpa.st/2KOA  <- not a go guy,
[13:33:53] *** Joins: fef (~thedawn@user/thedawn)
[13:34:45] *** Joins: xzr (xzar@shell.troopers.fi)
[13:35:09] *** xzr is now known as Guest9046
[13:35:21] <albertito> flughafen: the config.JoinDir thing is prometheus-specific, maybe there's a mismatch between the version of the exporter you're building, and the prometheus common libraries
[13:36:12] <albertito> flughafen: maybe Ubuntu has an irc channel specifically for packaging go things where they can help you more? I know Debian has one, but no idea about Ubuntu
[13:37:19] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[13:37:26] <flughafen> Let me check something.
[13:37:44] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[13:37:50] <fizzie> And for the latter two errors, maybe a Go version that's too old too. `tls.CipherSuites()` was added in 1.14.
[13:38:30] <albertito> flughafen: look at the code, it should be easy to follow even if you don't know a lot of Go. That "config.JoinDir" is undefined. The "config" comes from somewhere, could be a variable but at least snooping around github, it seems to be a package, "github.com/prometheus/common/config"
[13:39:10] <flughafen> albertito: https://bpa.st/4JBA  <- whole output but we can see what versions were used
[13:41:32] <flughafen> [   18s]  golang-github-prometheus-common-dev depends on golang-github-mwitkow-go-conntrack-dev; however:
[13:57:51] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:59:14] <flughafen> oh fizzie thanks.
[14:01:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[14:03:31] *** Joins: quosa (~quosa@82-181-4-77.bb.dnainternet.fi)
[14:04:48] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 268 seconds)
[14:06:16] *** Joins: rcernin (~rcernin@101.189.141.138)
[14:06:30] *** Joins: Shimmy4 (~Shimmy@user/shimmy)
[14:06:33] *** Quits: rvt (~rvt@librecad/rvt) (Ping timeout: 256 seconds)
[14:06:35] *** Joins: iivvoo1 (~l@m3r.nl)
[14:07:18] *** Joins: jlindgren_ (~jlindgren@user/jlindgren)
[14:07:33] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[14:07:41] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (Ping timeout: 256 seconds)
[14:07:41] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: jlindgren (~jlindgren@user/jlindgren) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: crudo (~crudo@livredigital.com) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: ska (~ska@user/ska) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: jsanford_ (~jsanford@lax.froop.com) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: Shimmy (~Shimmy@user/shimmy) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: jhchabran_ (~jhchabran@user/jhchabran) (Ping timeout: 256 seconds)
[14:08:15] *** Shimmy4 is now known as Shimmy
[14:08:15] *** Quits: iivvoo (~l@m3r.nl) (Ping timeout: 256 seconds)
[14:08:15] *** iivvoo1 is now known as iivvoo
[14:08:23] *** Joins: jsanford (~jsanford@lax.froop.com)
[14:08:24] *** Quits: jsanford (~jsanford@lax.froop.com) (Changing host)
[14:08:24] *** Joins: jsanford (~jsanford@user/jsanford)
[14:08:34] *** R2robot_ is now known as R2robot
[14:08:44] *** Joins: rvt (~rvt@librecad/rvt)
[14:09:28] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[14:09:34] *** Joins: danderson (~dave@tailscale/danderson)
[14:09:34] *** ChanServ sets mode: +v danderson
[14:09:58] *** Joins: jjhoo (~jahakala@user/jjhoo)
[14:13:06] *** Joins: shtirlic_ (~shtirlic@178.69.58.193)
[14:17:08] *** Quits: shtirlic (~shtirlic@178.69.58.193) (Ping timeout: 268 seconds)
[14:18:59] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 268 seconds)
[14:21:20] *** Joins: crudo (~crudo@livredigital.com)
[14:21:33] *** Joins: ska (~ska@user/ska)
[14:28:02] *** Joins: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi)
[14:31:24] *** Quits: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi) (Quit: leaving)
[14:33:48] *** Joins: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi)
[14:34:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:37:14] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694)
[14:38:56] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:39:05] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[14:43:23] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[14:44:07] *** Quits: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi) (Quit: leaving)
[14:45:59] <j416> pagnol: link expired
[14:51:52] <flughafen> fizzie: it's weird the package didn't require go1.17 or greater
[14:52:17] *** Joins: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi)
[14:52:24] *** Joins: fef (~thedawn@user/thedawn)
[14:59:15] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[14:59:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[15:00:00] <pagnol> j416: https://pastebin.com/SHDftiig
[15:00:02] <pagnol> thanks
[15:00:14] *** Quits: quosa (~quosa@82-181-4-77.bb.dnainternet.fi) (Quit: Client closed)
[15:00:16] <pagnol> for the heads-up
[15:02:46] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 268 seconds)
[15:11:13] *** Joins: bluedust (~bluedust@103.161.144.140)
[15:12:39] *** Quits: quosa_ (~jussiku@82-181-4-77.bb.dnainternet.fi) (Quit: leaving)
[15:12:56] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[15:22:56] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[15:23:19] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[15:27:22] *** Joins: purpleidea (~james@user/purpleidea)
[15:27:48] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[15:29:05] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[15:30:12] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[15:32:44] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-c0d6-67c5-a330-5c81.ip6.gigabit.dk)
[15:38:00] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:38:47] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:39:02] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[15:41:17] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[15:41:31] *** Quits: purpleidea (~james@user/purpleidea) (Remote host closed the connection)
[15:50:44] *** Joins: fef (~thedawn@user/thedawn)
[15:51:43] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962)
[15:53:15] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[15:53:31] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[15:55:26] *** Joins: purpleidea (~james@user/purpleidea)
[15:55:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:57:58] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962) (Ping timeout: 260 seconds)
[16:02:57] *** Joins: Atque (~Atque@user/atque)
[16:08:32] *** Joins: bluedust (~bluedust@103.161.144.140)
[16:16:45] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[16:23:07] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[16:27:12] *** Quits: jespada (~jespada@87.74.36.188) (Quit: Textual IRC Client: www.textualapp.com)
[16:37:27] *** Joins: souvik (~souvik@103.82.81.39)
[16:37:28] *** Joins: henry40408 (~henry4040@175.181.155.165)
[16:38:42] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:39:17] *** Quits: henry40408 (~henry4040@175.181.155.165) (Client Quit)
[16:40:30] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:41:50] *** Joins: mickey8 (~user@user/mickey)
[16:44:07] *** Joins: henry40408 (~henry4040@175.181.155.165)
[16:45:16] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[16:46:11] *** Joins: mickey8 (~user@user/mickey)
[16:47:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:48:35] *** Quits: henry40408 (~henry4040@175.181.155.165) (Read error: Connection reset by peer)
[16:49:06] *** Joins: henry40408 (~henry4040@175.181.155.165)
[16:53:01] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[16:53:17] *** Joins: mickey8 (~user@user/mickey)
[16:53:56] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962)
[16:59:57] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962) (Ping timeout: 240 seconds)
[17:00:30] <chilversc> has anyone got a simple way to workaround the "declared but not used" warning when you're debugging something and you just want to comment out a few lines?
[17:01:12] <chilversc> it's rather annoying having to re-write half the function, only to then have to change it back later when you're uncommenting the code
[17:02:59] <siXy> chilversc: _ = myvar
[17:03:16] *** Quits: bluedust (~bluedust@103.161.144.140) (Read error: Connection reset by peer)
[17:03:20] <chilversc> ah, so just throw that at the end of the function to squash the complaints?
[17:03:51] *** Joins: bluedust (~bluedust@103.161.144.140)
[17:03:51] <chilversc> thanks
[17:04:59] <bookworm> newer gopls releases even have a code action for that
[17:05:11] <bookworm> so it's a quick affair
[17:05:25] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[17:05:50] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[17:08:32] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[17:08:51] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:09:33] *** Joins: elgraz (~elgraz@151.65.7.178)
[17:10:42] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[17:10:56] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[17:11:36] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 245 seconds)
[17:13:27] *** Joins: bluedust (~bluedust@103.161.144.140)
[17:23:41] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:24:49] *** Joins: astonex (~astonex@14.52.76.151)
[17:28:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:31:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:33:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:33:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:34:43] *** Joins: henry40408 (~henry4040@175.181.155.165)
[17:35:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:36:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:37:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:38:14] <chilversc> with delve, is there a command to go back a statement?
[17:38:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:39:06] *** Joins: pepee (~pepee@user/pepee)
[17:39:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:41:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:41:14] <chilversc> ah, looks like the delve commands are not available from within a vscode debug session
[17:42:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:42:41] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[17:43:14] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[17:43:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:44:13] *** jlindgren_ is now known as jlindgren
[17:44:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:45:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:47:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:48:19] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[17:48:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:49:46] *** Guest9046 is now known as xzr
[17:49:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:50:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:51:36] *** Joins: fef (~thedawn@user/thedawn)
[17:52:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:53:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:55:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:55:43] <flughafen> OH
[17:56:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:56:34] *** Quits: mncheckm (~mncheck@193.224.205.254) (Quit: Leaving)
[17:57:38] *** Joins: BrunoFontes (~bruno@187.115.253.43)
[17:57:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:58:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:00:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:01:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:01:42] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[18:02:08] <flughafen> I misread that. But that project has go 1.14
[18:02:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:04:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:05:04] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:05:17] *** Joins: bluedust (~bluedust@103.161.144.140)
[18:05:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:06:05] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[18:06:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:08:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:09:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:10:06] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:10:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:10:40] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 250 seconds)
[18:11:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:13:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:14:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:14:53] *** Quits: astonex (~astonex@14.52.76.151) (Read error: Connection reset by peer)
[18:14:58] *** Joins: arkurious (~arkurious@user/arkurious)
[18:15:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:17:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:18:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:20:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:21:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:21:33] *** Quits: iryith1 (~iryith3@207.81-166-89.customer.lyse.net) (Quit: Leaving)
[18:22:06] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[18:22:06] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[18:22:06] *** Joins: iryith (~iryith3@user/iryith)
[18:22:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:24:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:25:50] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[18:27:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:27:21] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[18:28:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:28:18] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[18:29:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:30:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:32:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:33:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:34:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:35:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:37:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:37:59] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 268 seconds)
[18:38:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:39:07] <fizzie> Well, your full output said "golang-1.13-src-1.13.8-1ubuntu1", which isn't a big enough number.
[18:39:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:41:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:41:44] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[18:42:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:43:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:44:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:45:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:46:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:46:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:47:22] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Remote host closed the connection)
[18:47:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:48:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:49:06] *** Joins: edrocks (~Ed@user/edrocks)
[18:49:47] *** Joins: souvik_ (~souvik@103.82.81.39)
[18:50:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:51:24] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 250 seconds)
[18:51:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:52:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:53:57] *** Joins: Atque (~Atque@user/atque)
[18:54:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:55:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:56:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:58:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:59:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:00:48] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[19:00:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:01:26] *** Quits: souvik_ (~souvik@103.82.81.39) (Ping timeout: 252 seconds)
[19:02:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:02:41] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[19:02:51] <flughafen> oh
[19:02:54] <flughafen> reallky
[19:02:57] <flughafen> that's bad
[19:03:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:04:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:05:24] *** Joins: souvik (~souvik@103.82.81.39)
[19:06:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:07:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:08:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:09:05] *** Joins: mncheck (~mncheck@193.224.205.254)
[19:10:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:10:42] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:11:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:12:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:12:53] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[19:12:55] <flughafen> we have go1.14 in that repo, i wonder why it's using 1.13
[19:14:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:14:56] *** Parts: OneLap (OneLap@108.173.211.175) ()
[19:15:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:15:57] <flughafen> fizzie: albertito    Build-Depends: debhelper-compat (= 13), golang-any
[19:16:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:17:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:18:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:18:37] <fizzie> If I remember the Debian/Ubuntu Go packaging, there's a single designated version that's "the" Go version for a release, and while other versions may exist, they're not in the default path or anything.
[19:19:17] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 240 seconds)
[19:20:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:21:03] <flughafen> I work on a product called suse manager at suse, and am updating a package. we support officialy ubuntu/debian clients too
[19:21:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:21:31] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:21:37] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 240 seconds)
[19:21:45] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:22:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:23:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:24:27] <flughafen> hum, that was weird.  it was adding golang-1.14 but there was 1.13 stuff
[19:25:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:26:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:28:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:02] <fizzie> If it helps, `golang-any` just picks between either `golang-go` or `gccgo-go`. And the `golang-go` package depends on a single specific version, e.g., on Ubuntu 20.04 LTS it's still 1.13.
[19:29:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:29:58] *** Quits: AsenMx (~asen@user/asenmx) (Ping timeout: 250 seconds)
[19:30:07] *** Quits: MarkWatson[m] (~markwatso@2001:470:69fc:105::1:5be8) (Quit: You have been kicked for being idle)
[19:31:24] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:31:57] <flughafen> I removed golang-any and put golang-1.14 but
[19:32:03] <flughafen> it complained about something else
[19:32:46] <flughafen> : Unmet build dependencies: golang-any
[19:33:00] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[19:33:04] <flughafen> fizzie: pkg-checkbuilddeps: error: Unmet build dependencies: golang-any
[19:34:32] <flughafen> OH sorry for spam
[19:34:52] *** Joins: ldiamond (~ldiamond@user/ldiamond)
[19:35:35] <ldiamond> Is there really no way to do something like `v, ok := myslice[5]` in Go? You have to `if len(myslice) ... { ... }`?
[19:36:22] <since_> ldiamond: yes, like in every good language
[19:36:41] <since_> you can use maps if you use it for binning of sparse data
[19:36:55] *** Quits: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Ping timeout: 256 seconds)
[19:37:11] <since_> map[int]datatype
[19:37:13] <ldiamond> since_: I wouldn't qualify that as "good".
[19:38:38] <flughafen> albertito: what was that debian-go channnel
[19:39:10] <since_> well a slice does not just save something, it has a known structure that can be exploited by the programmer to make fast software.
[19:39:14] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[19:39:56] <ldiamond> since_: That's completely irrelevant to the syntax used to get that information.
[19:40:39] <ldiamond> `v, ok := myslice[5]` can compile to the exact same machine code.
[19:41:42] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[19:42:36] <since_> and then you have to check ok with an if so you do not use the invalid v accidentally
[19:42:39] <siXy> ldiamond: for better or worse, go requires the programmer to be specific, and type out what's really happening. The problem with your proposed syntax is that it suggests the check is atomic with the fetch, which wouldn't actually be the case.
[19:44:25] <ldiamond> since_: Agreed that's bad, but that's the pattern used everywhere with `x, err := something()`. Also a bad design imo.
[19:47:24] *** Joins: AsenMx (~asen@user/asenmx)
[19:49:22] <since_> And is it "ok" to access sliced elements that are out of range but within capacity? Then you need two ok variables v, ok1, ok2 := a[1:5]. And then i want to do b := a[i] + a[i+1] and this wont work in one line as it returns multiple elements.
[19:50:12] <fizzie> Presumably the second output would only be when it's in the `v, ok := s[i]` form, like maps.
[19:50:45] <fizzie> I mean, you can do `m[i] + m[i+1]` just fine even though `v, ok := m[i]` is an option.
[19:51:18] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[19:51:51] <siXy> since_: You'll get a runtime panic if you access an element that's out of range, regardless of capacity.
[19:53:25] <since_> siXy: not always, as i can "regrow" sliced slices
[19:53:56] <since_> a := make([]int, 0, 10); b := a[:3]
[19:54:19] <fizzie> I don't know if it was even a part of the proposal to allow slice expressions to have an additional `ok` value.
[19:54:31] <since_> b := a[:cap(a)]
[19:55:10] <siXy> since_: in that case it wouldn't be out of range, though ;)
[19:55:17] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[19:56:02] *** Joins: bsund (~bsund@user/bsund)
[19:56:07] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[19:56:17] <since_> but if i do a[5] in this case i get a panic. But none if i do a[3:6]
[19:56:36] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[19:56:46] *** Joins: souvik_ (~souvik@103.82.81.39)
[19:57:48] <siXy> since_: because only the first case is actually accessing an element of a slice, the second isn't doing that. There's a slicetricks web page out there that might help understand this better.
[19:57:53] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 250 seconds)
[19:58:54] <fizzie> I don't think there would be anything particularly illogical about supporting `v, ok := s[i]` syntax for slices. Apparently it just hasn't been considered necessary. And it's not, in the sense that you *can* still easily do the equivalent test even without; something that's not the case for maps and type assertions.
[19:59:19] *** Joins: GoodCodeGuy (~goodcodeg@cpe-74-71-28-57.nyc.res.rr.com)
[20:00:16] <fizzie> Discussed before in: https://groups.google.com/g/Golang-dev/c/bUYwtDJnwIA "Has anyone ever proposed a language change for slice access to have the option of double-return values, somewhat like map access?"
[20:00:27] <ldiamond> maps could have been done like `if mymap.has("idx") { ... }`
[20:01:00] <ldiamond> `v, ok := ...` is cleaner, not the best but still cleaner.
[20:02:07] <siXy> fizzie: I think the fact that it's not atomic isn't ideal, though. I know it's not for maps either, but maps have all these "not threadsafe" instructions around them
[20:02:19] *** Quits: GoodCodeGuy (~goodcodeg@cpe-74-71-28-57.nyc.res.rr.com) (Remote host closed the connection)
[20:04:12] *** Joins: bluedust (~bluedust@103.161.144.140)
[20:05:09] <ldiamond> "The argument against this is that it's possible to write the two-result function yourself in ordinary Go" - This is such a bad argument. Why not stick to assembly then?
[20:06:32] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[20:10:32] <fizzie> I don't follow that at all. The argument is, you can write a Go function that allows you to *get* approximately the same syntax -- `if v, ok := slices.Index(s, i); ok { ... }` and so on -- so there's no need to introduce a language extension for it. "Why not stick to assembly" seems entirely unrelated to that.
[20:11:53] <ldiamond> The idea of programming languages is to provide abstractions and avoid having to re-implement things over and over.
[20:11:56] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:12:04] <ldiamond> You can also implement a map in go, it's still provided.
[20:13:01] <ldiamond> You can implement any program in assembly, but all the work you'd normaly have to do is abstracted into a higher level language now.
[20:18:12] <fizzie> Fair enough. But it's also not like you'd need to make every possible abstraction be part of the language, if only for the reason to make the language specification finite. And Go tends towards the minimalist end of that scale. No exceptions, for a long time no generics, and so on.
[20:18:57] <ldiamond> You don't have to. A better argument would be: "We didn't deem that feature necessary when compared to X, Y, Z which had higher priority".
[20:19:38] <ldiamond> But for language consistency, given this exists for maps, it seems obvious to me that slices could get the same treatment.
[20:19:44] <flughafen> fizzie: i'm going to adding the go1.15
[20:19:51] *** Joins: cobber (~protorom@213.240.182.77)
[20:20:43] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[20:22:15] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:24:27] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:25:11] *** Quits: Latrina (~Latrina@user/latrina) (Quit: Powered by AlpineLinux under the supervision of Docker.)
[20:26:07] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[20:26:07] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[20:26:07] *** Joins: Latrina (~Latrina@user/latrina)
[20:29:05] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:33:10] *** Joins: cobber_ (~protorom@213.240.182.38)
[20:33:46] *** Quits: cobber (~protorom@213.240.182.77) (Ping timeout: 260 seconds)
[20:33:46] *** cobber_ is now known as cobber
[20:40:03] <ska> If I have a question about code design: https://go.dev/play/p/FmEbPw1vGKR . Should my services be implented on the struct?
[20:42:12] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[20:43:44] *** Joins: yamchah2_ (~yamchah2@user/yamchah2)
[20:43:45] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[20:44:24] *** Joins: krackout (~krackout@194.219.131.3)
[20:44:40] *** Parts: krackout (~krackout@194.219.131.3) ()
[20:46:15] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 268 seconds)
[20:46:15] *** yamchah2_ is now known as yamchah2
[20:50:34] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Ping timeout: 268 seconds)
[20:54:11] <KirkMcDonald> ska: Methods on the `data` type could make sense. Especially if you end up needing to add a mutex for these operations.
[20:54:40] *** Joins: Guest40 (~Guest40@2600:1700:232b:6110:a82b:5185:f6da:d4b4)
[20:58:29] <ska> For something this simple, I wanted to avoid having to deal with temp storage like Redis for example. Are you aware of any examples of the former idea, even in pseudo-code?
[21:03:51] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:06:08] *** Quits: Guest40 (~Guest40@2600:1700:232b:6110:a82b:5185:f6da:d4b4) (Quit: Client closed)
[21:09:34] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:09:38] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 250 seconds)
[21:10:45] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[21:11:52] *** Joins: ItsNotGoodName00 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[21:13:07] <tuskkk____> Hello, in the middle of a crossroad here, would appreciate some thoughts. I am scoping out a technical document where we are building a task schedular, now I want this to be in go to process custom tasks which can be distributed, scaled up, down etc, also want to leverage a container orchestration platform like k8s to do this. Not sure how to decouple these two things...
[21:13:17] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:13:18] *** ItsNotGoodName00 is now known as ItsNotGoodName0
[21:14:40] *** Joins: fef (~thedawn@user/thedawn)
[21:15:16] <tuskkk____> what comes to my mind is the traditional master slave approach. Keep the master configured and always present, slaves can be replicated based on cpu usage within k8s, pick up a task from the master db
[21:21:26] *** Quits: jackneillll (~jackneill@20014C4E1818D5008BE3BE1928B6DAEE.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[21:23:23] <seebs> https://christine.website/blog/make-microservices-cluster-2022-01-27
[21:29:10] <tuskkk____> hahaha ok
[21:32:56] <albertito> tuskkk____: the funny page does have a lot of good points, first one being "do you really need the horizontal scaling?"
[21:33:06] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:33:37] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:2891:6bd5:ed2a:ab88)
[21:34:24] <albertito> tuskkk____: if the answer is yes: where your service runs (k8s, dedicated machines, etc) is often not that critical to the design of the service itself, and how components interact with each other
[21:35:05] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Remote host closed the connection)
[21:35:49] *** Joins: xsteadfastx (~marv@94.31.99.245)
[21:38:16] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[21:38:19] <albertito> tuskkk____: I would start with: how much load you are expected to handle and how much reliability you need for the foreseeable future, and design for that. Two servers (one active, one passive) can go a _very_ _very_ long way, and simplify a lot of things
[21:38:20] <tuskkk____> yes, I have thought over it, and I need it in this case. I agree with your point, however there are times where we can use something from the container orchestration tool as an advantage right, so just want to cover that
[21:39:08] *** Joins: yamchah2_ (~yamchah2@user/yamchah2)
[21:39:11] <albertito> tuskkk____: for the container thingy, I guess the main points for me are: how quickly you can add and remove tasks, how they find each other, and how the clients find them
[21:39:36] <albertito> tuskkk____: (also I think that's all generic, nothing Go-specific about it)
[21:41:12] <siXy> You may well find that someone has already written a task scheduler that fulfulls your needs. Task schedulers are like the second thing everyone writes after an IRC bot.
[21:41:13] <tuskkk____> in terms of reliability, I don't need a hot replica, this thing can have a downtime if things really go wrong, business critical problems arise when the downtime is more than 60-120 minutes for this specific thing I am after
[21:41:27] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 250 seconds)
[21:41:27] *** yamchah2_ is now known as yamchah2
[21:41:59] <tuskkk____> I did find a list - https://github.com/avelino/awesome-go#job-scheduler
[21:42:08] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[21:42:18] <tuskkk____> nothing quite matches what I am after, or will have to modify one of them quite a lot
[21:42:28] *** Joins: fdan (~fdan@2600:6000:ff7e:f6d5::97b)
[21:43:36] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 268 seconds)
[21:45:29] *** Joins: crashrep (~crashrep@user/crashrep)
[21:45:53] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:49:28] *** Joins: mnx|aw (~nabromov@92.40.255.112.threembb.co.uk)
[21:50:00] *** Quits: mnx|aw (~nabromov@92.40.255.112.threembb.co.uk) (Remote host closed the connection)
[21:50:35] *** Quits: dr0n (~nabromov@176.26.119.61) (Killed (NickServ (GHOST command used by nabromov!~nabromov@92.40.255.112.threembb.co.uk)))
[21:50:46] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[21:50:59] *** Joins: nabromov (~nabromov@176.26.119.61)
[22:07:41] *** Joins: rummplel24 (~rummplel2@84.247.59.36)
[22:07:51] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[22:09:50] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:fcf9:7779:33f5:462c:7dec) (Quit: WeeChat 3.3)
[22:10:46] *** Joins: jjido (~Denis@94.0.244.224)
[22:11:16] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[22:11:29] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[22:12:17] <rummplel24> Is casting types from a custom type to their underlying built-in type a costly operation?
[22:13:01] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[22:13:24] <dostoyevsky2> rummplel24: I think it still uses reflection to detect if casting is possible
[22:13:53] *** Quits: fdan (~fdan@2600:6000:ff7e:f6d5::97b) (Ping timeout: 256 seconds)
[22:15:18] <siXy> rummplel24: Go does not actually have casting. What do you really mean?
[22:15:20] <siXy> dostoyevsky2: No.
[22:16:43] <rummplel24> I use custom types to improve readability (e.g. "type Temperature float64") by giving meaning to values passed around. At some point I have to do calculation with those values and end up "casting" a lot, e.g. "result := float64(x) * float64(y) + float64(z)"
[22:17:02] <rummplel24> I hope this explains my issue better. I feel like I am not using the language the right way
[22:17:09] *** Joins: nabromov1 (~nabromov@92.40.255.112.threembb.co.uk)
[22:17:15] *** Quits: nabromov1 (~nabromov@92.40.255.112.threembb.co.uk) (Client Quit)
[22:17:18] *** Joins: tofran (~tofran@37.189.158.134)
[22:18:01] <fizzie> It's called a "conversion" rather than a cast, is all.
[22:18:21] *** Joins: fps (~fps@vmd80943.contaboserver.net)
[22:18:45] <siXy> rummplel24: In that case Temperature is identical to float64, so there's no operation required - you can freely convert between them.
[22:19:04] <rummplel24> I see, thank you.
[22:19:10] <fizzie> (And you don't *always* need to convert to do math; only if you have some actually typed `float64` values you want to mix in with them.)
[22:19:15] <fps> hi, is there a package that helps in destructuring ipv6 packets? like if i easily want to get to the payload without bitfiddling it all myself?
[22:19:27] <siXy> fps: see gopacket
[22:19:43] <fps> siXy: ty
[22:19:51] <siXy> https://pkg.go.dev/github.com/google/gopacket?utm_source=godoc for full link
[22:20:00] <fps> cool, thanks again!
[22:20:15] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[22:20:27] <rummplel24> fizzie: do I understand right, that maths with a bunch of custom types based float64 doesn't require conversion?
[22:20:42] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 250 seconds)
[22:21:04] <siXy> rummplel24: https://go.dev/ref/spec#Properties_of_types_and_values would be worth a read - it explains the rules around type conversion and identity
[22:21:19] <rummplel24> siXy thanks!
[22:23:10] <fizzie> rummplel24: Yes, it doesn't; and you can also mix untyped constants with them as well: https://go.dev/play/p/hT44dei-4ST
[22:23:40] <fizzie> What you can't do (without an explicit conversion) is to apply operators to mixed operands (`Temperature` and `float64`, say).
[22:23:43] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:23:49] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 240 seconds)
[22:24:11] <rummplel24> thank you very much, fizzie
[22:25:11] <siXy> time.Second is the one that always annoys me about the operators on mixed type names
[22:26:14] *** Joins: Batzy (~quassel@user/batzy)
[22:27:49] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[22:29:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:30:51] *** Joins: goldfish (~goldfish@user/goldfish)
[22:31:27] *** Quits: rummplel24 (~rummplel2@84.247.59.36) (Ping timeout: 256 seconds)
[22:31:53] *** Joins: Nigthknight (~Nigthknig@user/nigthknight)
[22:34:28] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:34:38] <dostoyevsky2> https://go.dev/play/p/L5pX_8d9bWX <- When I embed a struct I lose the ability to set its fields in a struct literal?  > cannot use promoted field Common.port in struct literal of type WS
[22:34:59] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:35:01] *** Joins: fdan (~fdan@2600:6000:ff7e:f6d5::97b)
[22:35:13] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[22:35:44] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[22:37:42] <fizzie> dostoyevsky2: It's just more verbose: https://go.dev/play/p/Cmsboju4of2
[22:38:13] <fizzie> Because `port` isn't *really* a field of `WS`. You'll have to set the value of the embedded struct instead.
[22:38:39] <dostoyevsky2> fizzie: ah, ok, thanks!!
[22:40:41] <gl> oh, one can have an `anonymous' field in a struct, in golang;  nice  (disclaimer:  I just started looking at this language, don't bash me.  thanks)
[22:41:44] <gl> fizzie: golang.org aside, is there a good documentation/resource link about this langage?  ala iso-9899.info/wiki/Books for c
[22:41:48] <gl> language*
[22:48:02] <fizzie> "The" book would probably be https://www.gopl.io/ which as far as I've heard (though I've only skimmed it) is still pretty much relevant, with the exception of chapter 10 ("Packages and the Go Tool") which is pre-modules and therefore obsolete.
[22:49:03] <gl> ok, I received it a few days ago;  thanks
[22:49:27] <fizzie> And on golang.org aka go.dev, there's a bunch of different things: the tour, the "How to Write Go Code" article, the spec, and https://go.dev/doc/effective_go roughly in order of perusal. Maybe swapping the last two.
[22:49:39] <fizzie> (I don't know how good any other books are.)
[22:50:00] *** Joins: optic__ (~rickybob@gateway/vpn/pia/rickybob)
[22:50:27] <chilversc> how do I use errors.Is based on type only?
[22:50:57] <ikke> It can't. You need to pass an instance
[22:51:15] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[22:51:32] *** Quits: Nigthknight (~Nigthknig@user/nigthknight) (Ping timeout: 240 seconds)
[22:51:32] <chilversc> I tried; errors.Is(err, &net.OpError{}) but that just returns false
[22:52:02] <fizzie> Matching by type is not really what errors.Is does.
[22:52:59] <chilversc> how do I detect if I have an OpError then?
[22:53:19] *** Joins: Nigthknight (~Nigthknig@user/nigthknight)
[22:53:26] <fizzie> You could be looking for `errors.As(err, &net.OpError{})`. You don't get to access the resulting value that way, but maybe you only care about the type.
[22:53:54] *** Quits: boof (~rickybob@35.143.255.39) (Ping timeout: 268 seconds)
[22:54:41] <chilversc> I tried that, but it just panics with *target must be interface or implement error
[22:55:07] <fizzie> It shouldn't. `*net.OpError` *does* implement error.
[22:55:32] <fizzie> Oh, right. *target. Yeah, I guess it would, in retrospect.
[22:56:15] <fizzie> The standard way of using errors.As would be `var opErr *net.OpError; if errors.As(err, &opErr) { ... }` which *would* work, but is more verbose.
[22:56:57] *** Quits: fdan (~fdan@2600:6000:ff7e:f6d5::97b) (Ping timeout: 256 seconds)
[22:57:09] <chilversc> ah, it needs a pointer to a pointer
[22:57:32] <fizzie> Well, it needs a pointer to a type that implements `error`, and in this case the type that implements `error` is `*net.OpError`, a pointer type.
[22:57:50] <chilversc> pitty the go type system can't handle this, as passing in an incorrect type should really be a compile error
[22:58:46] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:00:27] <A_Dragon> wait
[23:00:28] <fizzie> Yeah. I suspect with 1.18 generics it could actually be expressed, but I'm not sure it'd be compatible to retrofit old packages to benefit from that.
[23:00:36] <A_Dragon> pointers to interfaces get weird
[23:00:43] <A_Dragon> oh and you have
[23:00:46] <A_Dragon> thats funky
[23:01:19] <fizzie> `func As[E error](err error, as *E) bool { ... }` specifically.
[23:04:50] <fizzie> Yeah, that would appear to work: https://go.dev/play/p/MtcqjWnZSPV?v=gotip
[23:05:28] <chilversc> that's nice, I've not really looked at the new generics yet
[23:08:48] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 250 seconds)
[23:08:51] <fizzie> Although it's not quite the same, because it's also allowed to pass a pointer to any interface type to errors.As, to extract the first error value of the chain that implements said interface. I... don't know if you can write a constraint that says "a concrete type that implements error, or any interface type". Probably not.
[23:09:18] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[23:11:54] <lungaro_> anyone aware of a "mock" http server? like a real http server, but I want to fake responses on urls
[23:12:21] <chilversc> lungaro_: https://pkg.go.dev/net/http/httptest
[23:12:40] <lungaro_> well i want to run the daemon and not use it in test, but that's kinda what I want
[23:13:24] <chilversc> ah, then you can just make use of https://pkg.go.dev/net/http directly if you want to just create a simple API server
[23:13:46] <lungaro_> yeah, i can't even think of the tool anymore, but there is public sites that mock http responses
[23:14:09] <chilversc> yup, things like postman offer that as a service
[23:14:25] <chilversc> it really depends on how dynamic you want the responses to be
[23:15:30] <lungaro_> cool
[23:24:08] *** Joins: neurocyte0917090 (~neurocyte@IP-195080053136.dynamic.medianet-world.de)
[23:24:08] *** Quits: neurocyte0917090 (~neurocyte@IP-195080053136.dynamic.medianet-world.de) (Changing host)
[23:24:08] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:24:24] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Ping timeout: 250 seconds)
[23:25:40] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[23:30:16] *** Quits: jjido (~Denis@94.0.244.224) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:35:56] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[23:36:30] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[23:37:36] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:38:00] *** Joins: Batzy (~quassel@user/batzy)
[23:39:11] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:39:28] *** Joins: bluedust (~bluedust@103.161.144.140)
[23:43:37] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[23:44:17] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[23:48:07] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[23:51:24] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[23:55:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[23:55:29] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[23:55:37] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 240 seconds)
[23:56:29] *** Joins: eyJhb (~eyJhb@user/eyjhb)
