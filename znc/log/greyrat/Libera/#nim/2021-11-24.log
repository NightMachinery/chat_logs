[00:00:28] <FromDiscord> <Elegantbeef> You really need to learn how to elaborate
[00:00:35] <FromDiscord> <hmmm> yea!
[00:00:41] <FromDiscord> <Elegantbeef> Is this code posted anywhere?
[00:00:53] <FromDiscord> <hmmm> well my vocabulary is limited by my rudimentary cs skills lol
[00:01:12] <FromDiscord> <Elegantbeef> I'm legitmately just asking "What are your current procedure signatures, give me all of them!"
[00:01:55] <FromDiscord> <hmmm> oh
[00:01:59] <FromDiscord> <hmmm> that is simple
[00:03:13] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3FUI
[00:03:19] <FromDiscord> <hmmm> 😅
[00:03:43] <nixfreaknim[m]> ok so pubDate is an RSSItems object and that is a seq 
[00:04:16] <nixfreaknim[m]> so echo feed.items["pubDate"] 
[00:04:25] <nixfreaknim[m]> but doesn't work 
[00:07:21] <FromDiscord> <Elegantbeef> Ok so they have the same signatures
[00:09:47] <nixfreaknim[m]> cho feed.items[2]
[00:09:47] <nixfreaknim[m]> (title: "Happy New Year 2012!", link: "http://www.xssed.com/news/129/Happy_New_Year_2012/", description: "Wishing you a very healthy, happy and prosperous new year!", author: "", category: @[], comments: "", enclosure: (url: "", length: "", enclosureType: ""), guid: "", pubDate: "Sun, 01 Jan 2012 19:19:09 +0100", sourceUrl: "", sourceText: "")
[00:10:34] <nixfreaknim[m]> How can I just parse out just a  specific child ?   
[00:10:37] <FromDiscord> <hmmm> well my initial thought was: there should exist something like var x = $name[push()], but looking at the examples maybe it's not that easy nor needed so probably people do it in a much simpler way
[00:10:55] <FromDiscord> <Elegantbeef> Items is a seq
[00:11:04] <FromDiscord> <Elegantbeef> so you need to get the element you want and access the `.pubdate`
[00:12:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FUK
[00:13:13] <FromDiscord> <Elegantbeef> It's a `seq` nix so you can just do `yourRssData.items[yourInterestedIndex]`
[00:13:31] <FromDiscord> <Elegantbeef> I think i provided something that should work for you hmmm
[00:14:34] <nixfreaknim[m]> yep I did a typeof on it 
[00:14:50] <FromDiscord> <hmmm> oh 😅  I think I recognize std/tables in there. The rest I will need to take time study it
[00:15:33] <FromDiscord> <hmmm> ty beefy sorry for the long winded request :nim1:  I'll get to you when / if I get what it does lol
[00:16:44] <FromDiscord> <gibson> sent a code paste, see https://play.nim-lang.org/#ix=3FUM
[00:16:55] <FromDiscord> <gibson> (edit) 
[00:21:04] <FromDiscord> <Elegantbeef> Seems it's a bug with how parameters are evaluated before tuple accessors are expanded
[00:22:31] <FromDiscord> <firasuke> Hey there
[00:23:18] <FromDiscord> <firasuke> I'm very impressed with Nim, especially with how easy it is to bootstrap, and it not having a dependency on LLVM is a big plus imho
[00:25:26] <FromDiscord> <Elegantbeef> Actually this is just an array issue, it sems without reference to generics on declaration
[00:26:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FUR
[00:26:49] <FromDiscord> <Elegantbeef> It's silly but the `template` is delayed untill the instantiation of the generic
[00:26:54] <FromDiscord> <Elegantbeef> Hello fira
[00:27:08] <FromDiscord> <firasuke> Yo
[00:27:46] <FromDiscord> <gibson> @ElegantBeef Ah, right, template resolution is later. Thanks - that's the "not a bug" insight I was looking for! This is the kind of advanced nim that trips me up.
[00:27:59] <FromDiscord> <Elegantbeef> Well i'd say it's a bug
[00:28:16] <FromDiscord> <Elegantbeef> But it's just due to the array semming at declaration instead of instantiation
[00:28:27] <nixfreaknim[m]> How would I break this down even further cho feed.items[0..<1]
[00:28:27] <nixfreaknim[m]> @[(title: "Another Ebay permanent XSS", link: "http://www.xssed.com/news/131/Another_Ebay_permanent_XSS/", description: "The Indian security researcher&nbsp;Shubham Upadhyay aka Cyb3R_Shubh4M, sent us a new permanent XSS affecting the products listings on Ebay.com", author: "", category: @[], comments: "", enclosure: (url: "", length: "", enclosureType: ""), guid: "", pubDate: "Tue, 13 Nov 2012 19:25:59 +0100", sourceUrl: "", sourceText:
[00:28:27] <nixfreaknim[m]> "")]
[00:28:51] <FromDiscord> <Elegantbeef> I mean what are you after?
[00:28:59] <nixfreaknim[m]> pubDate 
[00:29:07] <FromDiscord> <Elegantbeef> `.pubDate`
[00:29:27] <FromDiscord> <Elegantbeef> `echo feed.items[0].pubDate`
[00:29:40] <FromDiscord> <Elegantbeef> It's just a sequence of `RSSItems`
[00:30:07] <nixfreaknim[m]> damn I thought I tried that already 
[00:30:16] <nixfreaknim[m]> thank you 
[00:30:57] <FromDiscord> <Elegantbeef> I will say gibson it's a sucky bug but alteast the work around isnt too ergonomically ugly
[00:31:39] <FromDiscord> <Elegantbeef> I do wonder if it's as simple as not semming arrays 😀
[00:31:54] <FromDiscord> <gibson> Yeah, true! What is "semming"? Is that the semantic pass or something? I've never heard that before.
[00:32:16] <FromDiscord> <Elegantbeef> yep
[00:32:29] <FromDiscord> <Elegantbeef> Semantic analysis
[00:32:33] <FromDiscord> <Elegantbeef> I toy with the compiler a bit, so i play pretend compiler dev
[00:33:06] <FromDiscord> <gibson> :p
[00:33:45] <FromDiscord> <firasuke> Is koch still used to bootstrap Nim?
[00:33:52] <FromDiscord> <Elegantbeef> Yes
[00:34:19] <FromDiscord> <firasuke> Nice, I've read the bootstrap script and it's very straightforward
[00:34:35] <FromDiscord> <Elegantbeef> I like that even i havent done that 😛
[00:34:39] <FromDiscord> <firasuke> I wonder how compatible Nim is with a gcc/musl toolchain
[00:35:01] <FromDiscord> <firasuke> In reply to @Elegantbeef "I like that even": Yeah well, I'd rather do that than bootstrap LLVM 😂
[00:35:14] <FromDiscord> <Elegantbeef> Gcc is the default compiler, and some people have compiled with musl
[00:35:21] <FromDiscord> <firasuke> In reply to @Elegantbeef "Gcc is the default": Epic news
[00:35:55] <FromDiscord> <firasuke> I'm actually working on a linux distribution built from scratch that's based on musl libc and toybox
[00:36:21] <FromDiscord> <firasuke> I actually wrote the package manager in shell, then I switched to Rust.
[00:36:44] <FromDiscord> <firasuke> Well bootstrapping Rust isn't the prettiest thing lol
[00:36:55] <FromDiscord> <firasuke> so I'm thinking of at least trying Nim and see how it goes
[00:36:56] <FromDiscord> <Elegantbeef> It's fine if you have 10 hours 😛
[00:37:13] <FromDiscord> <firasuke> In reply to @Elegantbeef "It's fine if you": for bootstrapping Nim or Rust lol
[00:37:19] <FromDiscord> <Elegantbeef> Rust
[00:37:23] <FromDiscord> <firasuke> makes sense xD
[00:37:39] <FromDiscord> <firasuke> This is the toolchain I'm using
[00:37:42] <FromDiscord> <firasuke> https://github.com/firasuke/mussel
[00:37:49] <FromDiscord> <Elegantbeef> Though i guess if you were to build the compiler from scratch it'd take some time to bootstrap aswell
[00:37:55] <FromDiscord> <Elegantbeef> The C compiler that is
[00:39:18] <FromDiscord> <firasuke> hmm can you link the latest/newest documentation for bootstrapping Rust
[00:39:29] <FromDiscord> <firasuke> the one I have says that the repo is archived or something
[00:40:22] <FromDiscord> <firasuke> (edit) "Rust" => "Nim"
[00:40:31] <FromDiscord> <firasuke> In reply to @firasuke "hmm can you link": Nim lol
[00:41:13] <FromDiscord> <firasuke> In reply to @Elegantbeef "Though i guess if": You mean Nim's compiler? can we estimate build times in comparison to gcc? equal or less?
[00:42:13] <FromDiscord> <Yardanico> In reply to @firasuke "You mean Nim's compiler?": Nim takes much less to compile than GCC or other C compilers of course, the main reason being that Nim complies to C itself (by default)
[00:42:24] <FromDiscord> <Yardanico> So it reuses existing stuff
[00:42:47] <FromDiscord> <firasuke> Awesome
[00:42:50] <FromDiscord> <Elegantbeef> Nim's compiler takes like 2 minutes on my xeon1231v3 to compile
[00:43:01] <FromDiscord> <firasuke> Superb
[00:43:02] <FromDiscord> <Yardanico> In reply to @firasuke "hmm can you link": Check https://github.com/nim-lang/Nim/blob/devel/build_all.sh and https://github.com/nim-lang/Nim/blob/devel/ci/funs.sh
[00:43:13] <FromDiscord> <firasuke> Awesome, thanks
[00:43:14] <FromDiscord> <Elegantbeef> But i was saying if you were going to compile the entire C and Nim compiler it'd take longer
[00:43:50] <FromDiscord> <firasuke> In reply to @Elegantbeef "But i was saying": Yes for sure, my custom toolchain requires 18 to 20 minute to build a musl/gcc cross-compilation toolchain  using a single-pass build for GCC
[00:43:58] <FromDiscord> <firasuke> so it's very much acceptable
[00:44:20] <FromDiscord> <firasuke> So Nim taking a couple of minutes is most certainly nothing
[00:44:48] <FromDiscord> <Yardanico> It's basically compiling Nim compiler out of precompiled C sources (the csources_v1), and then the actual bootstrapping happens with koch - it builds the compiler a few times and compares the binaries to ensure that the bootstrapping is working
[00:45:37] <FromDiscord> <firasuke> In reply to @Yardanico "It's basically compiling Nim": kinda like GCC bootstrap options, and how it can build itself 3 times or so each time with the resulting compiler and apply some optimizations on the resulting build of itself like LTO and the like, understandable
[00:45:50] <FromDiscord> <firasuke> all in all it's still so much less than cloning LLVM's tree and bootstrapping it lol
[00:47:16] <FromDiscord> <jfmonty2> Is there a way to pass a code block to a macro in a single line? Obviously you can with expressions, like a proc call or a boolean compare or whatever, but I can't get it to work for e.g.  `mymacro(let x = 3)` or `mymacro: let x = 3`
[00:49:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FUX
[00:49:54] <FromDiscord> <Elegantbeef> or `myMacro((let x = 3))`
[00:50:14] <FromDiscord> <firasuke> @Yardanico what about this?↵https://github.com/nim-lang/csources/blob/master/build.sh
[00:50:45] <FromDiscord> <Yardanico> In reply to @firasuke "<@!177365113899057152> what about this?": This is the old csources repo
[00:50:51] <FromDiscord> <Yardanico> Check csources_v1 one
[00:51:10] <FromDiscord> <firasuke> oh, is that a branch or another repo?
[00:51:17] <FromDiscord> <Yardanico> Another repo
[00:51:29] <FromDiscord> <jfmonty2> @ElegantBeef thanks! didn't know that wrapping in parens would have that effect
[00:51:52] <FromDiscord> <Yardanico> And also, this is just for the initial bootstrapping, even with csources_v1 it bootstraps Nim 1.0 which is then used to compile the newest compiler (Nim 1.6 at the moment if you checkout a stable branch)
[00:52:10] <FromDiscord> <firasuke> Epic
[00:52:14] <FromDiscord> <firasuke> I love how Nim is LLVM-free lol
[00:52:17] <FromDiscord> <Elegantbeef> Yea you can abuse `()` for manything it lets you right many programs single lined
[00:52:37] <FromDiscord> <Elegantbeef> Dont say that too loudly some dislike that it's not using llvm 😛
[00:52:45] <FromDiscord> <firasuke> Will their be a gcc frontend for nim?
[00:52:57] <FromDiscord> <Yardanico> In reply to @jfmonty2 "<@!145405730571288577> thanks! didn't know": This feature is called "statement list expression" btw
[00:53:01] <FromDiscord> <Yardanico> You can find it in the manual
[00:53:02] <FromDiscord> <firasuke> (edit) "gcc" => "Nim" | "nim?" => "GCC?"
[00:53:31] <FromDiscord> <Elegantbeef> write many programs\ jeez where is rika to bitch and moan at my spelling
[00:53:34] <FromDiscord> <jfmonty2> thanks, I was looking in the docs but I couldn't find a full list of AST node types with explanations anywhere
[00:54:19] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#the-ast-in-nim explains them a bit, but i generally just write what i want in a `dumpTree` block and use that
[00:54:26] <FromDiscord> <Yardanico> In reply to @firasuke "Will their be a": Don't think so, currently C backend is pretty stable and allows for painless C interop
[00:54:34] <FromDiscord> <Sevos> hello y'all
[00:54:41] <FromDiscord> <Yardanico> Nim also has C++, Objective C and JS backends
[00:54:41] <FromDiscord> <Elegantbeef> Hello
[00:54:48] <FromDiscord> <Elegantbeef> So many new people
[00:54:51] <FromDiscord> <firasuke> In reply to @Yardanico "Don't think so, currently": which is perfect, just inquiring, thanks
[00:55:15] <FromDiscord> <Elegantbeef> There is also the `nlvm` compiler which as the name implies uses `llvm`
[00:55:16] <FromDiscord> <jfmonty2> dumpTree works if you have syntax and you want the node names, but my issue was I didn't know what syntax would produce the effect I was looking for
[00:55:29] <FromDiscord> <Sevos> so Nim combines the ease of Python with the efficiency of C/Rust?
[00:55:36] <FromDiscord> <Sevos> i discovered this language just now
[00:55:42] <FromDiscord> <Elegantbeef> Yea that's just the case of "learn the AST" 😀
[00:55:53] <FromDiscord> <Elegantbeef> It's fast with an expressive syntax
[00:56:04] <FromDiscord> <Elegantbeef> So if that's how you describe that, then yess
[00:56:20] <FromDiscord> <Sevos> by expressive you mean you don't have to code a lot of extra stuff in order to achieve something?
[00:56:27] <FromDiscord> <jfmonty2> I wouldn't say Nim is _quite_ as easy as python, coming from python myself, although it's certainly much easier than other compiled/static typed languages I've tried
[00:56:31] <FromDiscord> <Elegantbeef> Easy to read and write
[00:56:52] <FromDiscord> <Sevos> > Support for various backends: it compiles to C, C++ or JavaScript so that Nim can be used for all backend and frontend needs.↵interesting - how does that work?
[00:57:15] <FromDiscord> <Elegantbeef> The compiler takes the code and outputs files that work with the given backends
[00:57:16] <FromDiscord> <Sevos> it "rewrites" the entire code to something C/C++/JS-like?
[00:57:28] <FromDiscord> <Sevos> nice lol
[00:57:34] <FromDiscord> <Yardanico> In reply to @Sevos "it "rewrites" the entire": Yeah, although since it's a compiler the term is "compiles" :)
[00:57:34] <FromDiscord> <Sevos> didn't even know that's possible
[00:57:43] <FromDiscord> <firasuke> In reply to @jfmonty2 "I wouldn't say Nim": It certainly is easier than Rust, C and C++ for example.
[00:57:43] <FromDiscord> <Yardanico> It doesn't use advanced features of C++ or JS
[00:57:46] <FromDiscord> <Elegantbeef> there are multiple stages to the compiler, Lexer/Parser -\> Semantic Analysis -\> code generation
[00:57:50] <FromDiscord> <Yardanico> It just treats them as simple backends
[00:58:10] <FromDiscord> <Elegantbeef> code generation is a sort of pluggable system where you get the AST and emit the files required for the language
[00:58:11] <FromDiscord> <jfmonty2> In reply to @firasuke "It certainly is easier": Rust is exactly what I was thinking of. I love the idea of the language but boy is it a pain to get started in
[00:58:39] <FromDiscord> <firasuke> In reply to @jfmonty2 "Rust is exactly what": Same, I won't stop using Rust, but having Nim as an asset is super powerful as well.
[00:58:55] <FromDiscord> <Elegantbeef> AST being the abstract syntax tree, which is just the code as reasoned/parsed data
[00:59:17] <FromDiscord> <Recruit_main707> In reply to @jfmonty2 "I wouldn't say Nim": i started coding in python and had a hard time switching to other langs because everything was a magic box for me that just worked, im glad i went to a lower level, it made things easier to understand
[00:59:30] <FromDiscord> <Elegantbeef> When notnil and views become stable there will be no reason to use Rust! 😛
[00:59:42] <FromDiscord> <jfmonty2> Agreed, just figuring out the stack/heap distinction was a huge jump in my understanding as well (which is not a distinction that you can really make in pythong)
[00:59:44] <FromDiscord> <jfmonty2> (edit) "pythong)" => "python)"
[01:00:25] <FromDiscord> <Sevos> @ElegantBeef you're the creator of this language? asking because you're "a bot"
[01:00:33] <FromDiscord> <Elegantbeef> I came from C# and picking up Nim helped a lot with fundamentals and increased my code quality
[01:00:37] <FromDiscord> <Sevos> i assume you did this in order to effectively avoid DM's / friend invites etc?
[01:00:46] <FromDiscord> <Sevos> In reply to @Elegantbeef "I came from C#": OK, that answered my question ahaha
[01:00:48] <FromDiscord> <IsaacPaul> He is an advanced AI programmed in nim
[01:00:49] <FromDiscord> <Elegantbeef> Nah i've contributed a bit, but i'm just on matrix
[01:00:54] <FromDiscord> <IsaacPaul> exactly
[01:00:56] <FromDiscord> <jfmonty2> ah matrix, I was wondering which bridge it is
[01:01:07] <FromDiscord> <jfmonty2> Do you run your own bridge? Is that how you have a distinct user?
[01:01:19] <FromDiscord> <Yardanico> In reply to @jfmonty2 "Do you run your": No, these are discord webhooks
[01:01:21] <FromDiscord> <Elegantbeef> Nah the matrix bridge is just smart
[01:01:26] <FromDiscord> <jfmonty2> huh nice
[01:01:29] <FromDiscord> <jfmonty2> Didn't realize it had come that far
[01:01:42] <FromDiscord> <Elegantbeef> The Discord -\> matrix side even shows discord users typing
[01:01:47] <FromDiscord> <Yardanico> For matrix we use t2bot.io
[01:01:51] <FromDiscord> <jfmonty2> I have a matrix homeserver but rarely use it because I'm too lazy to set up all the bridges to make it useful 😛
[01:01:55] <FromDiscord> <Elegantbeef> Some nice QoL features with it
[01:02:00] <FromDiscord> <Yardanico> For IRC it's my own bridge :P
[01:02:12] <FromDiscord> <Yardanico> In reply to @Elegantbeef "Some nice QoL features": Sadly no proper discord pings or edit support :(
[01:02:17] <FromDiscord> <Sevos> funny that i'm in here
[01:02:18] <FromDiscord> <Elegantbeef> cmon monty use matrix, it's cooler! 😛
[01:02:20] <FromDiscord> <Sevos> i have never programmed in my life
[01:02:23] <FromDiscord> <Sevos> cuz me too dumb for that 😛
[01:02:31] <FromDiscord> <jfmonty2> always time to learn!
[01:02:35] <FromDiscord> <Sevos> nah, i'm dumb
[01:02:39] <FromDiscord> <Sevos> i even suck at maths
[01:02:44] <FromDiscord> <Elegantbeef> So what
[01:02:50] <FromDiscord> <Sevos> but hey!
[01:02:52] <FromDiscord> <jfmonty2> don't need maths, all the hard problems have been solved already by other people
[01:02:53] <FromDiscord> <Sevos> i can print hello world
[01:03:01] <FromDiscord> <jfmonty2> You can have a lot of fun (and do a lot of useful stuff) just wiring together other people's code
[01:03:03] <FromDiscord> <Sevos> 😎
[01:03:03] <FromDiscord> <Sevos> sent a code paste, see https://play.nim-lang.org/#ix=E4Z
[01:03:09] <FromDiscord> <jfmonty2> tbh that's ~90% of programming nowadays
[01:03:14] <FromDiscord> <Elegantbeef> Not how we do it here, going to get a f-
[01:03:31] <FromDiscord> <Sevos> sent a code paste, see https://play.nim-lang.org/#ix=1X8p
[01:03:33] <FromDiscord> <Sevos> happier now? :uwu:
[01:03:49] <FromDiscord> <Sevos> In reply to @jfmonty2 "tbh that's ~90% of": lmao
[01:04:07] <FromDiscord> <Elegantbeef> How dare you imply that all i've done is glue code together... Quickly deletes my game framework that glues opengl/sdl/assimp together
[01:04:25] <FromDiscord> <jfmonty2> 👀
[01:04:33] <FromDiscord> <jfmonty2> hey I'm not throwing shade, I work in devops primarily
[01:04:38] <FromDiscord> <jfmonty2> basically the definition of gluing stuff together
[01:05:30] <FromDiscord> <Sevos> actually guys
[01:05:44] <FromDiscord> <Sevos> due to tomorrow i have to memorize 10 formulas
[01:05:49] <FromDiscord> <Sevos> any tips how to learn it quickly?
[01:05:58] <FromDiscord> <Elegantbeef> Tomorrow is a bad day
[01:06:04] <FromDiscord> <Sevos> i agree
[01:06:45] <FromDiscord> <IsaacPaul> -b (+ or -) radical b squared - 4ac all divided by 2a
[01:06:50] <FromDiscord> <IsaacPaul> just remember that in sing-song format
[01:07:12] <FromDiscord> <Sevos> xd
[01:07:16] <FromDiscord> <IsaacPaul> then you have the quadratic formula
[01:07:17] <FromDiscord> <Sevos> it's not maths but thanks Isaac ❤️
[01:07:26] <FromDiscord> <Sevos> from now on you're my bestie
[01:07:27] <FromDiscord> <Sevos> i'm gonna stalk you
[01:07:42] <FromDiscord> <Sevos> friend invite sent. i'll harrass you as much as possible 😎
[01:08:51] <FromDiscord> <Yardanico> I hate to be that guy but we have #offtopic :)
[01:08:51] <FromDiscord> <Elegantbeef> Eh monty has moved to the matrix!
[01:09:11] <FromDiscord> <jfmonty2> still syncing history but we'll see
[01:09:43] <FromDiscord> <jfmonty2> Once threading support finishes landing in Matrix I might take another stab at moving to it more fully
[01:09:59] <FromDiscord> <Sevos> he rejecteed me 😦
[01:10:16] <FromDiscord> <Sevos> In reply to @Yardanico "I hate to be": sure
[01:11:22] <FromDiscord> <Sevos> In reply to @Elegantbeef "there are multiple stages": does that work the other way around?
[01:11:30] <FromDiscord> <Sevos> e. g. importing Python modules
[01:11:42] <FromDiscord> <Yardanico> In reply to @Sevos "e. g. importing Python": not sure what you mean
[01:11:52] <FromDiscord> <Sevos> Python has a lot of libraries that can be used
[01:12:01] <FromDiscord> <Sevos> alone this fact makes programming much easier i guess
[01:12:02] <FromDiscord> <Yardanico> For importing python modules we have nimpy which uses CPython's C FFI
[01:12:42] <FromDiscord> <Sevos> nice lol
[01:13:03] <FromDiscord> <Sevos> ah
[01:13:07] <FromDiscord> <Elegantbeef> Yea monty, i only want 2 things really a functioning Nim sdk(it's started) and a channelled voip 😛
[01:13:27] <FromDiscord> <jfmonty2> Interesting, who's working on the nim sdk? I might have to take a look
[01:14:00] <FromDiscord> <Elegantbeef> https://github.com/dylhack/matrix-nim-sdk is where it's at and it of course has a matrix room
[01:14:22] <FromDiscord> <Elegantbeef> I have thought about properly contributing, but I need to read/look into how the API should be done
[01:14:50] <FromDiscord> <jfmonty2> Yeah, think I'd have to try writing a bot in it or something before I'd feel ready to contribute
[01:14:53] <FromDiscord> <Elegantbeef> Presently my contribution is just adding a macro that removes redundant procs due to using a generic for async
[01:15:19] <FromDiscord> <jfmonty2> That's another thing, I haven't really messed with async in nim at all
[01:15:20] <FromDiscord> <Sevos> @ElegantBeef how did you learn programming?
[01:15:42] <FromDiscord> <Elegantbeef> Primarily through trying to make games using the Unity engine
[01:15:47] <FromDiscord> <Sevos> oof
[01:18:16] <FromDiscord> <Elegantbeef> I dont get what's oof worthy there, and i never will
[02:03:28] <FromDiscord> <lenis> ^
[02:04:02] <FromDiscord> <lenis> I learned it through Minecraft. and now I work for the largest commercial bank in my country
[02:37:42] <FromDiscord> <treeform> In reply to @@droptweetrxd_twitter-5a0487c2d7 "hi.  does someone": Also globby is not that great. We ended up not using it that much.
[02:39:04] <FromDiscord> <evoalg> @treeform I use your `print` all the time and I want it in std libs or even in system! 🙂
[02:40:49] <FromDiscord> <Elegantbeef> This is why stdlib distributions are a good idea
[02:41:52] <FromDiscord> <Elegantbeef> But alas, guess you can always just always import the file in your nimcfg
[02:44:38] <FromDiscord> <Elegantbeef> For instance you can add `--import:"print"` to `.config/nim/nim.cfg` then you dont need to import `print` any more
[02:45:07] <FromDiscord> <Elegantbeef> The downside is it's global so if you release a library and use print i'll complain on the user side if you forget to add it as a dep
[02:45:09] <FromDiscord> <evoalg> I have to print out vars so much while I'm debugging etc and so when I do `print a, b, myseq` I get this printed out `a=4 b="foo bar" myseq=@[1, 2, 3]` (and in pretty colors) and it's so helpful and saves typing, speeds up debugging (for me)
[02:45:46] <FromDiscord> <Elegantbeef> otherwise you can put a `config.nims` with `--import:"print"` in your local file
[02:45:56] <FromDiscord> <Elegantbeef> Depends what you're doing/wanting, just something to consider
[02:46:11] <FromDiscord> <evoalg> interesting - thanks!
[02:46:59] <FromDiscord> <evoalg> does the .nims have the same format as nim.cfg?
[02:47:31] <FromDiscord> <Elegantbeef> `.nims` is a nimscript file, it has to be parseable nim, but there is a template/macro for `--import:"print"` syntax
[02:47:50] <FromDiscord> <Elegantbeef> comiically that's just `--(import, "print")` 😛
[02:48:42] <FromDiscord> <Elegantbeef> You dont have to do the latter it's just how it expands, the `--a:b` works fine
[02:49:12] <FromDiscord> <evoalg> so I could put `--import:"print"` in either config.nims or nim.cfg? I don't really now what nimscript is for?
[02:49:21] <FromDiscord> <Elegantbeef> Yes
[02:49:44] <FromDiscord> <Elegantbeef> Nimscript is just a scriptable subset of Nim, so it can be used for manythings, configuration, program scripting... whatever you use a scripting language fo
[02:50:03] <FromDiscord> <Elegantbeef> For instance this is nimscript in use with my interop https://streamable.com/9zr8w4
[02:50:44] <FromDiscord> <Elegantbeef> In this case of course nimscript is being used to call functions and set values for the compiler before it's fully invoked
[02:51:02] <FromDiscord> <evoalg> is that updating live like being interpreted?
[02:51:11] <FromDiscord> <Elegantbeef> It is being interpreted
[02:51:16] <FromDiscord> <Elegantbeef> Since it's nimscript
[02:51:27] <FromDiscord> <Elegantbeef> Nimscript is also what is used for macros/compile time evaluation
[02:51:34] <FromDiscord> <Elegantbeef> So this links back to `static` 😛
[02:51:53] <FromDiscord> <evoalg> hehe true. I didn't know Nim had an interpreter
[02:52:17] <FromDiscord> <Elegantbeef> It does and it's pretty nifty
[02:52:36] <FromDiscord> <evoalg> it's not a repl though right?
[02:52:50] <FromDiscord> <Elegantbeef> Nope, it's a VM
[02:53:02] <FromDiscord> <Elegantbeef> it takes Nim code converts it to op codes and then runs it
[02:53:15] <FromDiscord> <Elegantbeef> So it can be used like a REPL but not explicitly one
[02:53:23] <FromDiscord> <Elegantbeef> `nim secret` is the repl usage of it
[02:53:37] <FromDiscord> <Elegantbeef> Though if you want a repl i'd still say inim is the best, it's not instant but pretty fast
[02:54:32] <FromDiscord> <evoalg> yea inim is just a bit annoying that it's slow, so I end up not using it much
[02:55:07] <FromDiscord> <Elegantbeef> Yea i prefer a proper editor anyway so i just do that whole `nvim /tmp/someFile.nim`
[02:55:17] <FromDiscord> <Elegantbeef> it's functionally the same to me
[02:56:02] <FromDiscord> <Elegantbeef> Though i also use nim-playground so i guess i'm dishonest
[02:56:03] <FromDiscord> <evoalg> is nimscript a strict subset of Nim?
[02:56:08] <FromDiscord> <Elegantbeef> Yep
[02:56:18] <FromDiscord> <Elegantbeef> Some things are unimplemented or invalid
[02:56:29] <FromDiscord> <Elegantbeef> C interop for one, some type casting is aswell
[02:56:53] <FromDiscord> <evoalg> does nimscript work in playground?
[02:57:03] <FromDiscord> <Elegantbeef> Nah
[02:57:17] <FromDiscord> <Elegantbeef> Well yes the compile time/macros work, but you cant write nimscript
[02:57:25] <FromDiscord> <Elegantbeef> It always compiles
[02:58:05] <FromDiscord> <evoalg> can you give me a really simple example of a nimscript file and how I would run it?
[02:58:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FVp
[02:59:22] <FromDiscord> <evoalg> oooo thank you!
[02:59:32] <FromDiscord> <enthus1ast> but when you want to embed nimscript into your application you could use nimscripter
[02:59:42] <FromDiscord> <enthus1ast> or use the compilerapi directly
[02:59:52] <FromDiscord> <Elegantbeef> Lol i dont even have to whore my own libraries anymore
[03:00:07] <FromDiscord> <enthus1ast> ;)
[03:01:02] *** Quits: pch (~pch@66.49.131.33) (Quit: Leaving)
[03:01:06] <FromDiscord> <evoalg> it's pretty darn fast
[03:01:30] <FromDiscord> <Elegantbeef> Just think the startup time can be made faster with a minor change to the compiler 😛
[03:03:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FVr
[03:03:16] <FromDiscord> <Elegantbeef> All documented here https://nim-lang.org/docs/nims.html and https://nim-lang.org/docs/nimscript.html
[03:03:53] <FromDiscord> <evoalg> do you use it much yourself?
[03:04:12] <FromDiscord> <Elegantbeef> not as an external scripting language, i do have plans for it as an embedded one
[03:04:26] <FromDiscord> <Elegantbeef> I dont need scripting languages much
[03:04:48] *** Joins: src_ (~src@user/src)
[03:04:55] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[03:05:13] <FromDiscord> <Elegantbeef> Like i plan on removing the Toml config and replacing it with nimscript for my WM, but that involves me working on it again, couldnt ever get the gnome password guard to properly unlock for me
[03:05:53] <FromDiscord> <evoalg> wow
[03:06:56] <FromDiscord> <evoalg> why do you do test files in `/tmp/someFile.nim` (and playground) and not nimscript (eg `/tmp/someFile.nims`) if it's faster?
[03:07:15] <FromDiscord> <Elegantbeef> Cause it's not noticeably faster
[03:07:50] <FromDiscord> <Elegantbeef> Compiling a small program takes all but a second on my machine, booting up the vm takes probably 100ms
[03:07:51] *** Quits: src (~src@user/src) (Ping timeout: 245 seconds)
[03:08:15] <FromDiscord> <Elegantbeef> One thing i did want to do is make a REPL for macros
[03:09:19] <FromDiscord> <Elegantbeef> A small program that takes a nimscript file you write macros in and output the AST in a nice graphic, something like a projective editor just no dragging/dropping
[03:09:44] <FromDiscord> <evoalg> ahhhh nice
[03:10:25] <FromDiscord> <evoalg> You're so smart, it makes me appreciate how you come down to my level to explain things in a way I can understand
[03:10:41] <FromDiscord> <Elegantbeef> It's funny you say that cause i dont feel that smart 😛
[03:11:53] <nixfreaknim[m]> Elegantbeef how can I loop through all the pubDates , do I have to know the ending range?
[03:12:19] <FromDiscord> <Elegantbeef> `for x in rssData.items: echo x.pubDate`
[03:12:44] <FromDiscord> <Elegantbeef> Damn it evo now i really want to make that silly tool, shame on you
[03:13:30] <nixfreaknim[m]> Thanks
[03:14:39] <FromDiscord> <evoalg> lol
[03:15:04] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[03:15:14] *** Joins: src (~src@user/src)
[03:15:15] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[03:16:18] <FromDiscord> <Elegantbeef> [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz)\: also have you used nimscripter any?
[03:19:00] *** Joins: pch (~pch@66.49.131.33)
[03:21:08] <FromDiscord> <evoalg> when I try and run the nimscript example `nim e eg2.nims` it fails with a ValueError ... I tried `nim e eg2.nims 5` too but still no good
[03:21:37] <FromDiscord> <Elegantbeef> I set it up for the shebang so the`paramStr` should be like 4 or 5
[03:22:57] <FromDiscord> <evoalg> `nim e eg2.nims 5 5 5 5 5 5` didn't work either ... I don't know how to run it 😉
[03:24:41] <FromDiscord> <evoalg> Oh I reread what you said ... it's working now!
[03:25:06] <FromDiscord> <evoalg> I had to use `paramStr(3)`
[03:37:07] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[03:41:28] <FromDiscord> <ynfle (ynfle)> Is there a way to get a `var` version of a base type (for a `distinct`)?
[03:41:58] <FromDiscord> <ynfle (ynfle)> Or, how can I `{.borrow.}` `mitems` where it's generic? It doesn't seem to be working
[03:42:27] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 264 seconds)
[03:46:44] *** Joins: pch (~pch@66.49.131.33)
[03:47:13] <FromDiscord> <Elegantbeef> You can do `thing.base[: type].mitems`
[03:47:30] <FromDiscord> <Elegantbeef> Atleast assuming you're using a version of Nim with my fixes implemented
[03:47:34] <FromDiscord> <Elegantbeef> Might require devel
[03:48:43] <FromDiscord> <Elegantbeef> Generic distincts borrowing generic ops isnt presently supported and it's a bit confusing what it should mean
[04:01:52] <FromDiscord> <evoalg> Has anyone tried Julia (programming language)? I'm interested to know why people chose to use Nim instead. Julia is like python in that it's high-level and interpreted, but runs at near C speed. I'm thinking it has it's place but it may be too specialized, whereas Nim can be used for loads of different things. I suspect that Nim has smaller executables etc too.
[04:02:21] <FromDiscord> <Elegantbeef> I've briefly looked into it, it's use of multiple dispatch is a bit scary to me
[04:04:06] <FromDiscord> <evoalg> if it's scary for you then I'd be petrified
[04:05:03] <FromDiscord> <Elegantbeef> Eh it's more for data scientists
[04:05:46] <FromDiscord> <impbox [ftsf]> multi dispatch is cool though?
[04:06:07] <FromDiscord> <Elegantbeef> I mean it's confusing to reason about
[04:07:41] <FromDiscord> <Elegantbeef> Nim does have it though it's deprecated behind a flag
[04:08:20] <FromDiscord> <impbox [ftsf]> yeah i used to use it a bunch
[04:08:38] <FromDiscord> <impbox [ftsf]> nice for interactions between different types
[04:08:42] <FromDiscord> <Elegantbeef> I pretty much never touch the OOP stuff in Nim so havent ever really felt the need for it
[04:09:58] <FromDiscord> <jfmonty2> tbh the more I've used OOP patterns the more I tend to dislike them
[04:10:18] <FromDiscord> <jfmonty2> personal taste, but composition \> inheritance as far as I'm concerned, because it's more explicit
[04:11:10] <FromDiscord> <jfmonty2> having worked with one or two massively overly-abstracted codebases (cough Magento) I can say with absolute certainly that trying to chase a method call up through 6 levels of `AbstractBaseRouteHandlerGeneratorFactory` classes is Not Fun
[04:11:25] <FromDiscord> <impbox [ftsf]> magento makes me so upset
[04:11:33] <FromDiscord> <impbox [ftsf]> i used to have to work with it at previous job
[04:11:35] <FromDiscord> <impbox [ftsf]> D: D: D:
[04:11:35] <FromDiscord> <jfmonty2> it's just a big ball of cancer
[04:11:55] <FromDiscord> <jfmonty2> to add insult to injury I was the one who made the call to use it in the first place \:(
[04:11:59] <FromDiscord> <jfmonty2> I have learned my lesson
[04:12:17] <FromDiscord> <impbox [ftsf]> i don't mind light usage of classes/objects, but deep stuff like that is terrible
[04:12:37] <FromDiscord> <jfmonty2> yeah classes can be great, as long as you basically just use them as "state containers" so to speak
[04:12:50] <FromDiscord> <jfmonty2> i.e. some state, some functions that manipulate the state, and bob's yer uncle
[04:13:11] <FromDiscord> <impbox [ftsf]> when I worked with magento we solved problems by just avoiding it and talking to the DB directly
[04:13:27] <FromDiscord> <jfmonty2> That's very amusing because I've wound up with pretty much the exact same solution
[04:13:35] <FromDiscord> <impbox [ftsf]> which magento didn't like, but at least we could follow the code and it was fast
[04:14:02] <FromDiscord> <jfmonty2> e.g. our warehouse management software is bad at keeping Magento's inventory levels in sync, so I've had to write a nightly sync task that keeps them up to date, and at some point recently the Magento API just broke
[04:14:07] <FromDiscord> <jfmonty2> like it was responding 200, but no updates were happening
[04:14:10] <FromDiscord> <jfmonty2> so now I just talk to the DB directly
[04:14:14] <FromDiscord> <jfmonty2> as you said
[04:18:21] <FromDiscord> <impbox [ftsf]> we made a lot of money "fixing" magento performance for customers just by putting lots of caches in front of it
[04:18:39] <FromDiscord> <jfmonty2> yeah I love how that's always the solution
[04:18:48] <FromDiscord> <jfmonty2> like how they built support for Varnish because they couldn't do it fast enough themselves
[04:19:40] <FromDiscord> <jfmonty2> tbh I don't even blame PHP for the most part, I mean it doesn't help but I've seen fast sites written in PHP
[04:19:53] <FromDiscord> <jfmonty2> but Magento did it to themselves with shitty design choices
[04:20:06] <FromDiscord> <impbox [ftsf]> and made it worse with every release
[04:20:11] <FromDiscord> <jfmonty2> oh yes
[04:20:26] <FromDiscord> <jfmonty2> last time I tried to update it, I discovered that Elasticache is now a hard requirement (???)
[04:21:49] <FromDiscord> <jfmonty2> and I've lost count of the garbage 3rd-party extensions that are now bundled-by-default because somebody paid them money, and in some cases can't even be disabled because basic functionality now depends on them
[04:27:00] <FromDiscord> <impbox [ftsf]> yup, oh well, good incentive to get away from it
[04:27:16] <FromDiscord> <jfmonty2> some day I'll just write my own
[04:27:45] <FromDiscord> <jfmonty2> maybe in Nim! if I can convince my manager
[04:36:41] <FromDiscord> <ynfle (ynfle)> @beef I don't get this syntax `thing.base[: type].mitems`
[04:37:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FVF
[04:38:05] <FromDiscord> <Elegantbeef> `[: type]` is just a solution for generics + method call syntax
[04:38:15] <FromDiscord> <Elegantbeef> you can of course do `seq[int](myDist).mitems`
[04:40:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FVG
[04:40:44] <FromDiscord> <Elegantbeef> Ideally someone fixes borrowing generic symbols, but presently i think they only work for procs
[04:50:18] <FromDiscord> <demotomohiro> Nim needs `[:type]` syntax because Nim use`[]` for both generic parameter and array/seq element access?
[04:50:57] <FromDiscord> <Elegantbeef> Yes it needs it to know whether it's `[](a.b)` or `b[](a)`
[04:51:53] <FromDiscord> <ynfle (ynfle)> Thanks. For some reason that didn't work for me
[04:52:04] <FromDiscord> <Elegantbeef> It doesnt or didnt?
[04:52:31] <FromDiscord> <ynfle (ynfle)> It does now, but what I tried to do, didn't work
[04:55:49] <FromDiscord> <ynfle (ynfle)> nvm, I think it's because I forgot the `var` in the proc definition
[04:55:53] <FromDiscord> <ynfle (ynfle)> Don't need it anyway
[05:06:18] <FromDiscord> <demotomohiro> There are not many charactors that can be used like parenthesis in ascii code and some programming language reuse same charactor for different thing. C++ uses '>' for compare,  bit shift and template parameter and `vector<vector<int>>` caused problem.↵If Nim could use unicode parenthesis like 【】 or「」 and didn't  reuse them for different things, Nim would not need to create a inconsistent `[:type]` syntax.
[05:06:46] <FromDiscord> <Elegantbeef> Sure but that's also a very annoying thing to write on the standard US keyboard
[05:07:06] <FromDiscord> <Elegantbeef> The `[: T]` is a nice solution to the problem imo
[05:12:41] <FromDiscord> <Elegantbeef> Well the proof of concept macro REPL has started 😀
[05:19:22] <FromDiscord> <demotomohiro> I thought always use `[:T]` for every generic parameters would be consistent coding rule but Nim says `var x: seq[:int]` is invalid indentation.
[05:20:15] <FromDiscord> <Elegantbeef> Well it's an escape hatch for `[]`
[05:21:30] <FromDiscord> <Elegantbeef> I think it's fine to not allow `seq[: T]` since it's odd and bad style in this case
[05:21:43] <FromDiscord> <Elegantbeef> There is no ambiguity to solve there
[05:26:08] <FromDiscord> <demotomohiro> But there are 2 different ways to specify generic parameters and I have to choose right one o n the right place is inconsistent and not simple.
[05:28:53] <FromDiscord> <demotomohiro> I can use one syntax to specify generic parameter in anywhere would be nice.
[05:34:38] <FromDiscord> <Elegantbeef> Well suggest a way of doing it that isnt hideous or confusing 😛
[05:41:54] <FromDiscord> <demotomohiro> How about to `[.T.]` syntax? It use '.' like pragma. AFAIF, Nim never use '.' for suffix nor prefix. I don't think it looks so odd.
[05:43:03] <FromDiscord> <demotomohiro> AFAIK, Nim never use '.' for suffix nor prefix.
[05:45:26] <FromDiscord> <Elegantbeef> I feel like making generics always `[.T.]` falls under hideous
[05:45:32] <FromDiscord> <Elegantbeef> Pragmas are already hideous
[05:49:27] <FromDiscord> <demotomohiro> That idea was already suggested in 2015: https://github.com/nim-lang/Nim/issues/3502
[05:52:33] <FromDiscord> <cpunion (Li Jie)> sent a code paste, see https://paste.rs/7E0
[05:57:43] <FromDiscord> <demotomohiro> This idea looks best but he changed mind: https://github.com/nim-lang/Nim/issues/3502#issuecomment-152781004
[06:11:59] *** Quits: src (~src@user/src) (Quit: Leaving)
[06:54:52] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:14:52] <FromDiscord> <Rika> pragmas do not look hideous to me lol
[07:22:12] <FromDiscord> <hyu1996> what is this https://media.discordapp.net/attachments/371759389889003532/912913462856941609/unknown.png
[07:23:42] <FromDiscord> <hyu1996> garbled code?
[07:34:18] <FromDiscord> <Rika> broken linK?
[07:34:20] <FromDiscord> <Rika> dunno
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:44] *** Joins: ox (~oz@crystal/user/oz)
[07:42:29] *** ox is now known as oz
[08:21:42] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:53:05] *** Quits: elph (uid286227@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:43:00] <FromDiscord> <claude> pragmas don't look bad, it's just that the symbol characters around them are distracting from the usually ~4 letter words inside them that are important, just curlies would have the same problem
[09:47:24] <FromDiscord> <claude> they're still better than things like java annotations imo
[09:48:32] <FromDiscord> <claude> though that might be because they come after the declaration, which i think is pretty uncommon
[10:59:25] <FromDiscord> <𝙧𝙚𝙢> is there a more idiomatic way of doing this loopign structure in nim
[10:59:33] <FromDiscord> <𝙧𝙚𝙢> the while(1) i mean
[10:59:34] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FWz
[11:00:39] <FromDiscord> <Elegantbeef> `while true`
[11:00:56] <FromDiscord> <haxscramper> idiomatic nim would probably use less continue/returns, but that's up to you
[11:01:05] <FromDiscord> <haxscramper> "structured control flow"
[11:01:07] <FromDiscord> <𝙧𝙚𝙢> well i need to build up a ast
[11:01:12] <FromDiscord> <𝙧𝙚𝙢> so idk if i have a choice
[11:02:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FWA
[11:02:24] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWB
[11:02:28] <FromDiscord> <Elegantbeef> and even then the `return n ` is questionable
[11:02:32] <FromDiscord> <Elegantbeef> There we go
[11:03:22] <FromDiscord> <haxscramper> (edit) "https://play.nim-lang.org/#ix=3FWB" => "https://play.nim-lang.org/#ix=3FWC"
[11:04:17] <FromDiscord> <𝙧𝙚𝙢> slight issue my lexer has the tokens emitted for `1 + 2` as `[tkInt, tkPlus, tkInt]` - there is no `Add` token
[11:04:36] <FromDiscord> <haxscramper> Ins't `Plus` == `Add`?
[11:04:53] <FromDiscord> <𝙧𝙚𝙢> wait
[11:04:53] <FromDiscord> <𝙧𝙚𝙢> yeah
[11:05:44] <FromDiscord> <𝙧𝙚𝙢> wait howd you do `new` in nim
[11:05:58] <FromDiscord> <𝙧𝙚𝙢> i have a `Node(kind: thing, ...)` struct
[11:06:29] <FromDiscord> <haxscramper> you can do func newTree(kind: NodeKind, subnodes: varargs[Node]): Node
[11:06:31] <FromDiscord> <𝙧𝙚𝙢> this basically
[11:06:33] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FWE
[11:06:38] <FromDiscord> <haxscramper> first of,
[11:06:44] <FromDiscord> <𝙧𝙚𝙢> hm?
[11:10:53] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWF
[11:11:03] <FromDiscord> <𝙧𝙚𝙢> no nim uses nnk
[11:11:22] <FromDiscord> <haxscramper> I have a compiler fatigue then, it uses `nk`
[11:11:35] <FromDiscord> <𝙧𝙚𝙢> good idea changing it tho
[11:11:47] <FromDiscord> <𝙧𝙚𝙢> so can u give an example of how i can implement subnodes
[11:14:16] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWH
[11:14:24] <FromDiscord> <haxscramper> The proc above is a constructor
[11:14:50] <FromDiscord> <Elegantbeef> There are some sexy nodes 😛
[11:15:00] <FromDiscord> <haxscramper> And you don't have the `Add/Plus/Minus` nodes for expressios, you have `Infix[Ident("+"), <some-node>, <some-node>]`
[11:15:13] <FromDiscord> <𝙧𝙚𝙢> this is mildly confusing, could u give an example of using it for an add node and string node?
[11:15:24] <FromDiscord> <haxscramper> Same for `Call[Ident("+"), <arg-1>, <arg-2>]`
[11:15:34] <FromDiscord> <𝙧𝙚𝙢> In reply to @𝙧𝙚𝙢 "this is mildly confusing,": ^
[11:15:57] <FromDiscord> <haxscramper> `func newXxxNode(strVal: string): XXXNode = XXXNode(kind: xxxStr, strVal: strVal)`
[11:16:02] <FromDiscord> <haxscramper> Like this?
[11:16:10] <FromDiscord> <𝙧𝙚𝙢> i mean the whole thing
[11:16:16] <FromDiscord> <𝙧𝙚𝙢> i dotn really understand the code
[11:17:37] <FromDiscord> <𝙧𝙚𝙢> In reply to @haxscramper "Same for `Call[Ident("+"), <arg-1>,": especially this part
[11:18:16] <FromDiscord> <𝙧𝙚𝙢> @haxscramper
[11:18:27] <FromDiscord> <𝙧𝙚𝙢> could u epxlain it please
[11:18:30] <FromDiscord> <haxscramper> yes, give be a second to write an example
[11:18:35] <FromDiscord> <𝙧𝙚𝙢> okay
[11:25:47] *** Joins: PMunch (~PMunch@user/pmunch)
[11:27:57] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWK
[11:28:28] <FromDiscord> <Elegantbeef> Damn hax you went all out
[11:28:32] <FromDiscord> <Elegantbeef> +1 to you
[11:29:07] <FromDiscord> <haxscramper> etc
[11:29:10] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWL
[11:29:26] <FromDiscord> <𝙧𝙚𝙢> is this some cursed nim java hybrid 🤔
[11:29:36] <FromDiscord> <haxscramper> I suppose `Token` is a current token that you edit somewhere else, so you can have a
[11:29:39] <FromDiscord> <𝙧𝙚𝙢> tysm tho this makes much more sense
[11:29:55] <FromDiscord> <𝙧𝙚𝙢> `token` is just `parser.peek`
[11:30:02] <FromDiscord> <haxscramper> `func newIdent(token: TokenType): XXXNode = newXXXIndet(token.strVal)`
[11:30:03] <FromDiscord> <𝙧𝙚𝙢> just returns the `n`th token
[11:30:50] <FromDiscord> <haxscramper> also look at the `lispRepr` - you can see the utility of the single `subnodes` field
[11:31:12] <FromDiscord> <haxscramper> imagine you had to write something like that with separate fields for all the nodes and then repeatedly edit it each time you add a new tree kind
[11:31:13] <FromDiscord> <𝙧𝙚𝙢> is this a builtin function were overriding or?
[11:31:35] <FromDiscord> <haxscramper> no, it is just a common convention
[11:31:51] <FromDiscord> <𝙧𝙚𝙢> ah
[11:32:05] <FromDiscord> <𝙧𝙚𝙢> also only other thing is im struggling to see where subnodes is being populated
[11:32:59] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/inH
[11:33:01] <FromDiscord> <haxscramper> but none of them are "built-in"
[11:33:28] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWP
[11:33:34] <FromDiscord> <haxscramper> `@` converts `varargs` tot he `seq[Node]`
[11:33:40] <FromDiscord> <𝙧𝙚𝙢> ohh i see
[11:35:18] <FromDiscord> <𝙧𝙚𝙢> so Infix is used instead of Add/Sub/Mul/Div?
[11:35:18] *** Joins: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[11:35:47] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (Ping timeout: 264 seconds)
[11:36:17] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (Ping timeout: 250 seconds)
[11:36:23] *** Quits: joshbaptiste (~josh@192.210.151.34) (Ping timeout: 264 seconds)
[11:36:32] <FromDiscord> <haxscramper> Yes. You can use dumpTree from std/macros and see how nim parses this
[11:36:44] <FromDiscord> <𝙧𝙚𝙢> ahh ok
[11:36:53] <FromDiscord> <𝙧𝙚𝙢> also off topic but whats a better way to structure this
[11:36:53] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3FWS
[11:36:55] <FromDiscord> <𝙧𝙚𝙢> spam incoming
[11:37:12] <FromDiscord> <𝙧𝙚𝙢> this is very ugly code
[11:37:12] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FWT
[11:37:20] <FromDiscord> <𝙧𝙚𝙢> however its just a list of tokens
[11:37:26] <FromDiscord> <𝙧𝙚𝙢> so idk if i can use the same as the AST
[11:37:57] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[11:38:09] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[11:38:54] <FromDiscord> <𝙧𝙚𝙢> i just dont want this to be this ugly if its possible
[11:39:21] <FromDiscord> <𝙧𝙚𝙢> its less than it was before a day or two ago but still a lot of ugliness
[11:41:42] <FromDiscord> <𝙧𝙚𝙢> and how would i better name them than tk
[11:41:42] <FromDiscord> <haxscramper> Tokens are most ok I guess, but it of course depends on crazy you want to go
[11:42:01] <FromDiscord> <haxscramper> In reply to @𝙧𝙚𝙢 "and how would i": ctk ? Just first letter of the language
[11:42:06] <FromDiscord> <haxscramper> qtk
[11:42:14] <FromDiscord> <haxscramper> Well, you get the idea
[11:42:17] <FromDiscord> <𝙧𝙚𝙢> i see
[11:42:59] <FromDiscord> <haxscramper> I mean there is not a lot of space for maneuvering anyway, it is a token kind, so you would probably end up with tk somewhere
[11:43:42] <FromDiscord> <𝙧𝙚𝙢> yeah
[11:47:08] <FromDiscord> <𝙧𝙚𝙢> also whats func vs proc
[11:49:40] <FromDiscord> <Elegantbeef> `func` is pure in that it cannot have side effects
[11:49:58] <FromDiscord> <Elegantbeef> so you can only mutate state of things passed in as `var`
[11:50:24] <FromDiscord> <𝙧𝙚𝙢> i see
[11:54:21] <FromDiscord> <haxscramper> for that to be true enable `{.experimental: "strictFuncs".}`, otherwise you can also mutate `ref`, which is most likely not what you want if you use `func`
[11:58:12] <FromDiscord> <evoalg> I just found out that `.add` not like python's `.append` in that it seems to do this conversion ... https://play.nim-lang.org/#ix=3FX0
[12:01:41] <FromDiscord> <Elegantbeef> It doesnt get converted there is a `seq.add(seq)`
[12:01:51] <FromDiscord> <Elegantbeef> Procedures can overload!
[12:02:01] <FromDiscord> <evoalg> ahhhh
[12:02:11] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/912983926916661288/image.png
[12:02:23] <FromDiscord> <Elegantbeef> Dont know if they're contigious in the docs
[12:02:50] <FromDiscord> <𝙧𝙚𝙢> In reply to @haxscramper "your code here would": btw i tried to implement this and it doesnt work
[12:03:02] <FromDiscord> <𝙧𝙚𝙢> `    of rtkPlus: node = newRuneNode(rnInfix, newRuneIdent(token.strVal), node, parseFactor)↵`
[12:03:30] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FX1
[12:03:43] <FromDiscord> <haxscramper> `parseFactor()`
[12:03:50] <FromDiscord> <haxscramper> you passed a proc, not proc's resultt
[12:03:58] <FromDiscord> <𝙧𝙚𝙢> still not working
[12:04:03] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:04:12] <FromDiscord> <𝙧𝙚𝙢> you never defined a newXXXnode that takes this params
[12:04:23] <FromDiscord> <𝙧𝙚𝙢> unless u meant newTree?
[12:04:33] <FromDiscord> <haxscramper> yes, new tree
[12:04:52] <FromDiscord> <haxscramper> well, it is a pseudocode anywya
[12:05:09] <FromDiscord> <haxscramper> yes, I messed up names
[12:05:14] *** Joins: xet7 (~xet7@user/xet7)
[12:05:20] <FromDiscord> <𝙧𝙚𝙢> yeah just confused me a bit lol
[12:15:45] <FromDiscord> <𝙧𝙚𝙢> @haxscramper seeing as u have knowledge w/ parsing i assume, could u help me w/ why my parseFactor function just recurses forever?
[12:15:55] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FX3
[12:15:56] <FromDiscord> <𝙧𝙚𝙢> this is all the relavent code
[12:16:06] <FromDiscord> <𝙧𝙚𝙢> im testing it w/ expression `2  4`
[12:17:22] <FromDiscord> <haxscramper> You call parse factor immediately in the parse factor, it is not possible to parse infix expressions using simple recursive descent parser
[12:17:39] <FromDiscord> <𝙧𝙚𝙢> so what should i do then
[12:18:02] <FromDiscord> <haxscramper> You need to use a Pratt parser, or precedence climbing algorithm, or shunting-yard, IIRC those are the alternatives
[12:18:21] <FromDiscord> <𝙧𝙚𝙢> brb killing myself
[12:18:25] <FromDiscord> <𝙧𝙚𝙢> this sounds way harder
[12:19:55] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/4b3672348cef91bb8e9441d29c127e73be5d4b69/testing/nim/wip1/shunting_yard_parser.nim
[12:20:13] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing-impls/parsing/pratt.nim
[12:20:31] <FromDiscord> <haxscramper> those won't compile beacuse I already broke all dependencies twice
[12:21:12] <FromDiscord> <haxscramper> but it worked at some point at least
[12:21:51] <FromDiscord> <𝙧𝙚𝙢> looks complex and confusing
[12:25:13] <FromDiscord> <𝙧𝙚𝙢> @haxscramper so hwo do i convert my code to shunting yard or do i only do it for my factor and term parsing functions?
[12:25:31] <FromDiscord> <haxscramper> only for expression parsers
[12:26:10] <FromDiscord> <𝙧𝙚𝙢> how do i create a stack in nim
[12:26:17] <FromDiscord> <𝙧𝙚𝙢> is there a data type
[12:26:58] <FromDiscord> <that_dude> I want to confirm my email for the forums, but nothing was sent to me? How do I confirm it?
[12:27:22] <FromDiscord> <haxscramper> `seq.add`, `seq.pop`↵(@𝙧𝙚𝙢)
[12:27:30] <FromDiscord> <haxscramper> ping @dom96↵(@that_dude)
[12:28:13] <FromDiscord> <𝙧𝙚𝙢> ok thanks
[12:28:16] <FromDiscord> <that_dude> Well @dom96 If you're awake, how would I go about it? (sorry for ping)
[12:32:01] <FromDiscord> <𝙧𝙚𝙢> sent a code paste, see https://play.nim-lang.org/#ix=3FX8
[12:33:45] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[12:33:45] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[12:33:45] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:35:26] <FromDiscord> <𝙧𝙚𝙢> @haxscramper any idea because if i just remove the return it will break the entire RD parser
[12:36:20] <FromDiscord> <𝙧𝙚𝙢> but i need to push it to the operand stack which im not sure how to do both
[12:36:24] <FromDiscord> <haxscramper> I recommend you to read about the algorithm first, because it is not exactly a trivial hack-in, and it is better to understand what is going on
[12:36:24] <FromDiscord> <𝙧𝙚𝙢> without breaking the entire thing
[12:36:52] <FromDiscord> <𝙧𝙚𝙢> i have a wikipedia article up
[12:37:00] <FromDiscord> <𝙧𝙚𝙢> im just wondering how the fuck do i get this to not break
[12:37:35] <FromDiscord> <haxscramper> I never actually wrote a proper parser for whole expressions, I just had this for some calculator thing
[12:37:53] <FromDiscord> <𝙧𝙚𝙢> ok well how would i get this working though
[12:38:21] <FromDiscord> <haxscramper> https://gist.github.com/haxscramper/3562fa8fee4726d7a30a013a37977df6#examples there are quite a few implementations that you can look at
[12:39:57] <FromDiscord> <𝙧𝙚𝙢> https://github.com/nc-x/crafty/blob/master/src/craftypkg/parser.nim↵↵this is just using RD lol
[12:51:11] *** Joins: advesperacit (~advespera@2.58.46.238)
[12:54:46] *** Joins: Guest3758 (~Guest37@188.64.206.96)
[12:56:17] <Guest3758> Hello. New to nim. I'm trying to create a template/macro that will print an expression then evaluate it. Something like: demo 1+1 => echo "1+1", 1+1
[12:57:07] <Guest3758> I can't splice the expression inside the string. I've tried:
[12:57:08] <Guest3758> macro demo(expr) = quote("@") do: echo "@expr = ", @expr
[12:57:18] <Guest3758> but it doesn't work. What do I miss?
[12:58:26] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3FXe here you go
[12:58:40] <FromDiscord> <Elegantbeef> Oh i misread what you wanted but close enough 😀
[12:59:16] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3FXf for that proper thing
[12:59:30] <FromDiscord> <Elegantbeef> My assumption is that it was printing `@expr = 1+ 1` ?
[13:00:16] <FromDiscord> <Elegantbeef> If so that's cause you should do before `let strExpr = expr.repr` `echo @strExpr, " = ", @expr`
[13:01:14] <Guest3758> Thanks!
[13:01:15] <Guest3758> template demo(expr) = echo astToStr(expr), " = ", `expr`
[13:01:18] <Guest3758> Is what I waned
[13:01:23] <Guest3758> *wanted
[13:01:37] <FromDiscord> <Elegantbeef> For stuff like this templates are more suited anyway
[13:01:51] <FromDiscord> <Elegantbeef> templates for copy pastes, macros for introspection required logic
[13:07:33] <FromDiscord> <𝙧𝙚𝙢> this algorithm is insanely complex
[13:12:14] *** Joins: fputs0 (~fputs@67.59.83.166)
[13:14:06] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 245 seconds)
[13:14:06] *** fputs0 is now known as fputs
[13:21:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[13:22:45] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[13:22:45] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[13:22:45] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:27:50] <PMunch> @Guest3758, just in case you want a ready made solution: https://nim-lang.org/docs/sugar.html#dump.m%2Cuntyped
[13:32:10] *** Quits: Guest3758 (~Guest37@188.64.206.96) (Ping timeout: 256 seconds)
[13:33:54] <FromDiscord> <hyu1996> https://play.nim-lang.org/#ix=3FXm   how to make it work
[13:35:10] <FromDiscord> <Elegantbeef> i assume someone realized it was just `.subobj` away 😀
[13:42:47] <FromDiscord> <hyu1996> sorry for my mistake
[13:43:30] <FromDiscord> <hyu1996> typo
[13:43:42] <FromDiscord> <Elegantbeef> Dont apologize, you did nothing wrong!
[13:44:12] <FromDiscord> <Rika> Unlike you beef you do everything wrong
[13:44:17] <FromDiscord> <Rika> Smh
[13:44:24] <FromDiscord> <Elegantbeef> Indeed
[13:49:45] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 250 seconds)
[13:50:01] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[14:04:46] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FXr
[14:05:49] <FromDiscord> <enthus1ast> `var flagsArr = [0x01'u8, 0x20'u8]`
[14:05:51] <FromDiscord> <enthus1ast> ...
[14:06:00] <FromDiscord> <enthus1ast> thanks guys and gals \:)
[14:06:41] <FromDiscord> <Elegantbeef> is the `...` you solving it?
[14:06:45] <FromDiscord> <enthus1ast> yes
[14:06:57] <FromDiscord> <Elegantbeef> Second one of these, rubber ducking is fun!
[14:07:41] <FromDiscord> <enthus1ast> thats why adding types to vars is a good thing, would have catched it immediately
[14:08:01] <FromDiscord> <tandy> i think i just found a unittest bug
[14:08:05] <FromDiscord> <Rika> I’m assuming the array was of 64 but numbers
[14:08:08] <FromDiscord> <Rika> Bit
[14:08:11] <FromDiscord> <enthus1ast> yes
[14:08:16] <FromDiscord> <Rika> Lol
[14:08:44] <FromDiscord> <tandy> aparently having 13 checks in a suite is too many?
[14:09:12] <FromDiscord> <Rika> Too many how?
[14:09:17] <FromDiscord> <Rika> What issue did you run into
[14:10:59] <FromDiscord> <tandy> i have a suite with 13 tests, each has a check
[14:11:35] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FXt
[14:11:51] <FromDiscord> <tandy> but if i comment out hte check it runs
[14:12:22] <FromDiscord> <enthus1ast> so can you comment ANY one of your tests, or just the last one?
[14:12:52] <FromDiscord> <enthus1ast> `Error: generic instantiation too nested` imho indicates that the compiler tries to unwrap a generic call
[14:13:05] <FromDiscord> <enthus1ast> recursively until it fails
[14:13:36] <FromDiscord> <tandy> hm actualy using a new suite didnt help
[14:13:58] <FromDiscord> <tandy> any `check`
[14:14:16] <FromDiscord> <tandy> oh wait no
[14:14:17] <FromDiscord> <tandy> not any check
[14:14:33] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FXv
[14:14:40] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FXw
[14:14:42] <FromDiscord> <tandy> just checks that look like these
[14:19:30] <FromDiscord> <hmmm> hoy beauties! if I have an enum directions north south west, can I add east at runtime?
[14:19:47] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FXy
[14:20:34] <FromDiscord> <tandy> il try
[14:21:00] <FromDiscord> <enthus1ast> @hmmm\: no
[14:21:15] <FromDiscord> <hmmm> 😓
[14:21:46] <FromDiscord> <tandy> this worked
[14:21:49] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FXA
[14:22:09] <FromDiscord> <enthus1ast> yeah strange
[14:22:34] <FromDiscord> <enthus1ast> might actually be a bug in unittest
[14:23:53] <FromDiscord> <enthus1ast> @hmmm\: when you'r goal is to add another value to an enum
[14:24:03] <FromDiscord> <tandy> hmm how can i find if ther is an existing issue..
[14:25:21] <FromDiscord> <enthus1ast> @hmmm\: i mean, what could be potentially be the goal here? Adding an enum at runtime makes no sense (or i can't imagine one to be honest)
[14:26:58] <FromDiscord> <hmmm> actually I think I don't really need to use an enum (well except for the fact I need to rewrite the entire app lol), I need to use some kind of data structure that allows the user to add new options to it
[14:27:23] <FromDiscord> <enthus1ast> while running?
[14:27:27] <FromDiscord> <hmmm> yep
[14:27:41] <FromDiscord> <enthus1ast> yeah then better use a seq, or table, or hashset
[14:28:19] <FromDiscord> <hmmm> hm yea but the enum was comfy because it kinda restricted the flow of it
[14:28:28] <FromDiscord> <hmmm> maybe I'll just hack a seq
[14:28:34] <FromDiscord> <tandy> and i dont really know how to make an MWE,
[14:28:46] <FromDiscord> <enthus1ast> MWE?
[14:29:05] <FromDiscord> <tandy> minmum working example
[14:29:20] <FromDiscord> <tandy> i wrote this but it works..
[14:29:21] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FXD
[14:31:53] <FromDiscord> <enthus1ast> maybe rip everything out of board that does not get touched by getPlayerMoves(board.human)
[15:01:31] <PMunch> When I do `createShared` and `freeShared`, can I but a GC'ed element like a string into that object?
[15:01:49] <PMunch> The data might be used and freed by a different thread than the one which allocated it
[15:04:37] <FromDiscord> <Rika> Not sure how that would fuck with the reference counting
[15:04:46] <FromDiscord> <KittyBorgX> heyy, im new here!
[15:04:50] <PMunch> Yeah that's what I'm afraid of
[15:05:03] <PMunch> I do use ORC by the way
[15:05:08] <PMunch> Welcome @KittyBorgX!
[15:05:10] <FromDiscord> <Rika> Hello
[15:10:31] <FromDiscord> <KittyBorgX> In reply to @PMunch "Welcome <@786599434960109568>!": Thankss!!
[15:10:48] <FromDiscord> <impbox [ftsf]> Welcome!!
[15:11:20] <FromDiscord> <KittyBorgX> ty!!
[15:11:44] <FromDiscord> <KittyBorgX> i want to learn and start using nim for daily basis and for my compiler development!
[15:12:01] <FromDiscord> <KittyBorgX> are there any good resources like yt vids or ebooks?
[15:12:02] <PMunch> Sounds like a good fit!
[15:12:31] <PMunch> This is a good place to start: https://nim-lang.org/documentation.html
[15:12:43] <FromDiscord> <KittyBorgX> In reply to @PMunch "This is a good": Thanks!!
[15:12:44] <FromDiscord> <enthus1ast> Hi @KittyBorgX
[15:12:48] <FromDiscord> <KittyBorgX> hey1
[15:13:35] <FromDiscord> <KittyBorgX> i started my journey in nim cuz i find it to be the perfect place between js / cpp / python and rust
[15:13:45] <FromDiscord> <KittyBorgX> all the features in one language hehe
[15:14:09] <PMunch> Sounds familiar :P
[15:15:06] <FromDiscord> <impbox [ftsf]> I think a good way to get familiar with nim is to port something you've written in another language to it
[15:15:30] <FromDiscord> <impbox [ftsf]> It's good to have a goal
[15:15:48] <FromDiscord> <impbox [ftsf]> Other than just "i want to learn nim"
[15:16:56] <PMunch> Or just some small project that you want to make
[15:18:48] <PMunch> Ugh, this is why I wish the new ARC/ORC stuff was documented better..
[15:19:35] <PMunch> Araq, ARC/ORC should really be documented better, specifically I want to know how it works across threads
[15:22:18] <FromDiscord> <haxscramper> what specific points are missing from the docs
[15:22:51] <FromDiscord> <KittyBorgX> In reply to @impbox "I think a good": yeah! i was finding a language to port my compiler written in rust cuz rust is a pain to work with and i stumbled upon nim!
[15:23:00] <PMunch> @haxscramper, I just struggle with figuring out what I can and can't do when it comes to threads
[15:23:05] <FromDiscord> <haxscramper> I don't know anything about arc-threading interaction, but surely your frustration is not just general "bad docs", you have some specific pain points
[15:23:21] <FromDiscord> <KittyBorgX> does nim have an init tool, like `cargo new --bin myproject` ?
[15:23:28] <FromDiscord> <haxscramper> `nimble init`
[15:24:07] <PMunch> This time I interact with a C library which can hold a reference for me and give it back to me when I get called later (which might not occur on the same thread). I use createShared for this, which works fine, but can I put GC'ed memory in that object?
[15:24:41] <FromDiscord> <KittyBorgX> In reply to @haxscramper "`nimble init`": thanks! i wasnt aware of `nimble`  being there, i was aware only of the `nim` command!
[15:25:41] <PMunch> Last time I was wondering if I could "steal" GCed memory from a thread. If one thread has allocated memory and put it in e.g. an array. Then another thread who knows where in memory this array lies, copies out the reference to this object and removes it from the array (either protected by a lock or with an atomic operation).
[15:26:08] <PMunch> Would that work? Or does the thread have to do something in order to move memory from one thread to another
[15:26:38] <PMunch> Just general things which I feel like I would be able to reason about if I had a document that shed some more light on the details of how ARC/ORC works
[15:27:00] <PMunch> @KittyBorgX, nimble is the most common package manager/build tool for Nim
[15:27:47] <FromDiscord> <KittyBorgX> In reply to @PMunch "<@786599434960109568>, nimble is the": ah, thanks for letting me know!
[15:32:48] <FromDiscord> <Yardanico> In reply to @PMunch "This time I interact": I think so, as long as you GC_ref it
[15:34:31] *** Joins: xet7_ (~xet7@user/xet7)
[15:34:39] <PMunch> That's my whole problem, I can't "think" I know what I'm doing, I need to "know" what will and won't work
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:46] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 260 seconds)
[15:54:27] <FromDiscord> <hmmm> this is hell my desktop pc has 4 spaces for tab and my laptop has 2 spaces and all my files are fucky aaaaaa
[15:55:01] <FromDiscord> <hmmm> 😒
[15:56:00] <PMunch> glhf
[15:57:59] <FromDiscord> <tandy> where is your compiler project?↵(@KittyBorgX)
[16:01:33] <FromDiscord> <xflywind> In reply to @PMunch "<@608382355454951435>, I just struggle": IMO, when it comes to threads with ARC, better to treat it as C++. Use smart pointers + ARC and don't use ref. Alternative way is using `std/isolated` which only works for acyclic refs.
[16:02:15] <FromDiscord> <xflywind> (edit) "refs." => "refs atm."
[16:03:07] <PMunch> That requires that I'm comfortable with how you would do it in C++, which I'm not
[16:03:17] <PMunch> I would do it the C way if I had to handle this in C++
[16:17:40] <FromDiscord> <tandy> https://github.com/nim-lang/Nim/issues/19189
[16:18:04] <arkanoid> Is there a nim lib for network (graph) analysis? Like networkx for python
[16:18:08] <FromDiscord> <tandy> worlds biggest mwe
[16:18:11] <arkanoid> Or a wrapper
[16:18:19] <FromDiscord> <haxscramper> no and no
[16:18:32] <arkanoid> K thanks
[16:22:39] <arkanoid> If the world picked nim instead of python for science, now we would have a cure for cancer, avoided covid, and turned nuclear research into proper energy production.
[16:23:53] <FromDiscord> <Rika> Time for you to port it xd
[16:26:52] <FromDiscord> <haxscramper> Maybe at some point hcparse will work just the way i want it it work
[16:26:52] <FromDiscord> <haxscramper> right now it just 1v1 with me against whole cxx ecosystem
[16:27:10] <FromDiscord> <haxscramper> and then I will port everything there is to port
[16:27:57] <FromDiscord> <Yardanico> In reply to @arkanoid "Or a wrapper": you can use nimpy to interact with python modules
[16:28:14] <FromDiscord> <Yardanico> but the performance will actually be a bit worse than if you were to call it from python itself because of the FFI
[16:28:24] <FromDiscord> <Yardanico> of course if you have some heavy calculations that don't need networkx you can do them in the nim side
[16:29:13] <arkanoid> Sure, I got the proprotype working in python, and hell yeah it works but can't cope with the large amout of data in time. Networkx is a pure python lib
[16:29:24] <FromDiscord> <Yardanico> well, then using nimpy won't help
[16:29:31] <FromDiscord> <Yardanico> you can try alternative python implementations like PyPy
[16:29:39] <FromDiscord> <Yardanico> PyPy is mostly compatible with CPython and has a JIT
[16:34:55] <arkanoid> I could try, yeah
[16:38:50] <arkanoid> Pypy is not compatible with the modules I need. Best bet to split which code to jit or not. Numba joins the party
[16:38:57] <FromDiscord> <Yardanico> which ones?
[16:38:59] <FromDiscord> <Yardanico> just curious
[16:39:10] <FromDiscord> <Yardanico> afaik PyPy has compat with almost all python modules out there nowadays
[16:39:27] <FromDiscord> <Yardanico> and I guess it's a discussion better suited for #nim-offtopic :)
[16:45:33] *** Joins: rockcavera (~rc@192.12.114.192)
[16:45:34] *** Quits: rockcavera (~rc@192.12.114.192) (Changing host)
[16:45:34] *** Joins: rockcavera (~rc@user/rockcavera)
[16:45:35] <FromDiscord> <tandy> So true↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[16:45:56] <FromDiscord> <tandy> il pray↵(@haxscramper)
[17:11:37] <arkanoid> Yardanico: http://packages.pypy.org/##pandas
[17:11:53] <FromDiscord> <Yardanico> it does work though, this is an outdated list kind of
[17:12:24] <arkanoid> well, pip installing now from scratch (not using conda, but binary from official page)
[17:12:31] <arkanoid> btw, sorry, I'm offtopic
[17:12:49] <FromDiscord> <Yardanico> yeah we have #nim-offtopic for that
[17:17:54] *** Quits: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[17:18:05] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[17:20:32] <PMunch> @arkanoid, in general if no-one is talking on-topic then straying off-topic in this channel is fine
[17:21:48] <arkanoid> yeah but talking about something that duck types in official nim channel makes me feel guilty
[17:27:25] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:06:25] *** Joins: src (~src@user/src)
[18:26:21] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FYV
[18:26:34] <FromDiscord> <lenis> because, if I move useName to another file the type inference doesnt work, but the code still runs
[18:27:29] <FromDiscord> <enthus1ast> template useName(name\: string) = ....
[18:27:47] <FromDiscord> <lenis> yes ok, but then you have to pass it in no?
[18:27:54] <FromDiscord> <enthus1ast> yes
[18:28:05] <FromDiscord> <lenis> thats not as nice from a DSL perspective
[18:32:59] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FZb
[18:33:05] <FromDiscord> <lenis> I tried to look through the manual but couldnt find anything
[18:34:49] <FromDiscord> <IsaacPaul> 🙃
[18:34:56] <PMunch> Hmm, I'm wondering if I should just write documentation on ARC and make up the details I'm unsure about. Then PR that to the repository and see if I can get people to elaborate on this stuff that way :P
[18:35:08] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3FZd
[18:35:50] <FromDiscord> <lenis> yeah i get that works, but then you have to pass around the context
[18:36:03] <FromDiscord> <IsaacPaul> so you want a global context..
[18:36:24] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FZe
[18:36:31] <FromDiscord> <lenis> onClick needs to know what it's being attached to
[18:36:32] <nrds> <06Prestige99> I like that approach PMunch lol
[18:36:46] <FromDiscord> <lenis> but having to pass around context makes the DSL much less intuitive
[18:37:11] <FromDiscord> <IsaacPaul> Oh I see what you're doing.. hmm yea idk
[18:37:12] <PMunch> I mean I've been waiting for this documentation ever since ARC was announced..
[18:37:33] *** Joins: pro (~pro@user/pro)
[18:39:05] <FromDiscord> <enthus1ast> @lenis\: maybe you can use the with macro https://nim-lang.org/docs/with.html
[18:39:24] <FromDiscord> <enthus1ast> or do it kinda like it
[18:40:25] <FromDiscord> <lenis> hmm yes that might work
[18:42:17] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FZf
[18:42:17] <FromDiscord> <lenis> something like that?
[18:46:09] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FZi
[18:46:13] <FromDiscord> <enthus1ast> imho stuff\: string must then be a callback type,
[18:47:31] <FromDiscord> <enthus1ast> but it also works with a template
[18:48:02] <FromDiscord> <enthus1ast> https://play.nim-lang.org/#ix=3FZn
[18:48:33] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[18:51:31] <nrds> <06Prestige99> PMunch: fwiw I don't know anything about arc/orc and just use the default gc. So any additional documentation is welcome on my end :P
[18:52:44] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[18:53:02] <FromDiscord> <enthus1ast> but i guess he's not aktively working on this any more, but you might read into the stuff he did
[18:53:04] <FromDiscord> <enthus1ast> https://github.com/PMunch/genui
[18:54:55] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FZp
[18:54:56] <FromDiscord> <lenis> In reply to @enthus1ast "https://github.com/PMunch/genui": Ill look at it
[18:56:12] <FromDiscord> <IsaacPaul> In reply to @PMunch "I mean I've been": What kind of questions do you have? isn't it just non-atomic ref bumps. When a reference gets copied +1 when it is erased -1 ? on 0 it goes bye bye
[18:57:40] <FromDiscord> <Yardanico> In reply to @IsaacPaul "What kind of questions": there are also destructors, cursors (copy elision), different hooks :)
[18:57:44] <FromDiscord> <Yardanico> https://nim-lang.org/docs/destructors.html
[18:59:57] <FromDiscord> <IsaacPaul> ah neat
[19:00:28] <NimEventer> New thread by Jackpboy: Implementing a GC allocated seq replacement without magic, see https://forum.nim-lang.org/t/8651
[19:05:43] <FromDiscord> <lumi> sent a code paste, see https://play.nim-lang.org/#ix=3FZt
[19:06:23] <FromDiscord> <enthus1ast> then you must traverse the ast, and generate code accordingly
[19:06:23] <FromDiscord> <enthus1ast> but there might be other options, i think writing such a macro is not trivial
[19:06:27] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FZu
[19:06:31] <FromDiscord> <Yardanico> In reply to @lumi "Hello, I'm new to": you can't capture mutable `Foo` in your `Bar` object
[19:06:37] <FromDiscord> <Yardanico> well, you can, but only with view types and those are highly experimental
[19:06:45] <FromDiscord> <Yardanico> because that requires lifetime tracking and stuff
[19:07:30] <FromDiscord> <Kermithos> is there any way to limit how many threads can be created and let new threads wait until the running ones are finished?
[19:08:04] <FromDiscord> <Kermithos> I tried this code: https://github.com/nim-lang/Nim/issues/19166↵↵but I got a Segmentation fault
[19:08:46] <FromDiscord> <lumi> @Yardanico makes more sense, thank you 😄 That compiler error wasn't very clear
[19:09:00] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FZv
[19:11:25] <FromDiscord> <lumi> `ref` would imply an indirection wouldn't it?
[19:11:44] <FromDiscord> <IsaacPaul> In reply to @Kermithos "I tried this code:": It seems like they're not using a lock around echo? which might be causing their problem. ↵↵The first example here uses a lock: https://nim-lang.org/docs/threads.html
[19:11:47] <FromDiscord> <Yardanico> In reply to @lumi "`ref` would imply an": but `var` would be unsafe without proper lifetime tracking if you think about it
[19:11:51] <FromDiscord> <Yardanico> so yes, just use `ref` for now
[19:12:04] <FromDiscord> <Yardanico> you might experiment with view types but they're still in development
[19:12:29] <FromDiscord> <lumi> I'll stick with the regular features for now 😄
[19:12:55] <FromDiscord> <lumi> (edit) "😄" => ":D"
[19:14:31] <FromDiscord> <Kermithos> In reply to @IsaacPaul "It seems like they're": already tried removing all echos, still crashing
[19:16:17] <FromDiscord> <Kermithos> sent a code paste, see https://play.nim-lang.org/#ix=3FZz
[19:22:17] <FromDiscord> <IsaacPaul> I tried it with several different compile settings it that works for me.. what version of nim are you using?↵↵Honestly, instead of dealing threads I would use a preexisting scheduler. https://nim-lang.org/docs/asyncdispatch.html perhaps? I'm _assuming_ it uses a thread pool lol.
[19:23:16] <FromDiscord> <IsaacPaul> (edit) "I tried it with several different compile settings ... it" 03added "and" | 04removed "that"
[19:23:45] <FromDiscord> <Yardanico> no
[19:23:52] <FromDiscord> <IsaacPaul> damn I'm always wrong xD
[19:24:17] <FromDiscord> <Yardanico> you can use it with threads, but you'll have to manually start dispatcher in each thread
[19:24:22] <FromDiscord> <Yardanico> and distribute tasks between threads
[19:27:09] <FromDiscord> <Kermithos> In reply to @IsaacPaul "I tried it with": afaik this issue only occurs on linux
[19:28:01] <FromDiscord> <IsaacPaul> yea the last suggestion I have is to just try it with the latest version 🤷‍♂️
[19:28:39] <FromDiscord> <Kermithos> In reply to @IsaacPaul "yea the last suggestion": yea, already tried a bunch of compiler versions and options
[19:30:11] <FromDiscord> <IsaacPaul> yea the issue on github is also a linux with nim 1.6.0 . Looks like a bug.
[19:38:20] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[19:46:03] <FromDiscord> <tandy> is there a datatype like `seq` but for storing distinct `(int, int)`s?
[19:47:25] <FromDiscord> <Yardanico> just store (int, int) in a seq?
[19:47:33] <FromDiscord> <Yardanico> not sure i understand the question
[19:47:54] <FromDiscord> <tandy> sorry i guess i mean unique values
[19:48:27] <FromDiscord> <IsaacPaul> you mean like a set
[19:49:03] <FromDiscord> <IsaacPaul> https://nim-lang.org/docs/sets.html
[19:50:06] <FromDiscord> <tandy> can u add items to a set ?
[19:51:44] <FromDiscord> <Yardanico> yes
[19:53:03] <FromDiscord> <tandy> hmmokay il try a set then
[20:11:17] <FromDiscord> <lantos> hey do you have to escape echo? like can echo be escaped by some random ascii/characters
[20:14:57] <FromDiscord> <Yardanico> In reply to @lantos "hey do you have": what do you mean?>
[20:15:46] <FromDiscord> <Yardanico> if you want to escape a quote inside a string, use the backslash
[20:15:49] <FromDiscord> <lantos> haha it sounds dumb but like do you need to sanitize stdout?
[20:16:21] <FromDiscord> <Yardanico> ??
[20:18:40] <FromDiscord> <lantos> sent a long message, see http://ix.io/3FZQ
[20:19:16] <FromDiscord> <Yardanico> it depends on your environment, but this is not a concert for nim
[20:19:23] <FromDiscord> <Yardanico> it's a concern for whatever environment you have
[20:19:33] <FromDiscord> <Yardanico> maybe it can treat stdout output in some specific way
[20:19:36] <FromDiscord> <Yardanico> but generally no
[20:20:16] <FromDiscord> <lantos> mmm, would be the environment but maybe a nim bundle that covers win/lin/mac
[20:20:25] <FromDiscord> <Yardanico> ???
[20:23:16] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 245 seconds)
[20:24:48] <FromDiscord> <lantos> I'll google more, from your response probably not 😅
[20:25:09] <FromDiscord> <IsaacPaul> It's always safe to sanitize and limit user input
[20:26:51] <FromDiscord> <IsaacPaul> echo will do exactly as it's told. I'm _assuming_ there is some sort of buffer limit which probably cuts off text if exceeded.
[20:28:14] <FromDiscord> <Rika> that would be dependent on the environment again, not on nim
[20:30:05] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:30:44] <FromDiscord> <lantos> mmm from looking on SO, I think the most that one could do is spam/use annoying ascii
[20:31:57] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[20:31:58] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[20:31:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:33:19] <FromDiscord> <Rika> the question doesnt really make sense
[20:33:28] <FromDiscord> <Rika> why are you worried about echo and escape sequences?
[20:33:47] <FromDiscord> <Rika> the worst thing some attacker can do is mess with your terminal or logging systems
[20:34:26] <FromDiscord> <lantos> In reply to @Rika "the worst thing some": mmm, I'm worried about the environment really.↵But this is mainly what I am seeing.↵There is no chance for execution but just someone using annoying input
[20:34:49] <FromDiscord> <Rika> as long as you're not piping output into an interpreter
[20:36:16] <FromDiscord> <lantos> sent a code paste, see https://play.nim-lang.org/#ix=3FZT
[20:36:29] <FromDiscord> <lantos> and fill the terminal with annoying chards
[20:36:31] <FromDiscord> <lantos> (edit) "chards" => "chars"
[20:36:47] <FromDiscord> <Rika> or completely fuck with it yes
[20:36:51] <FromDiscord> <lantos> (edit) "chars" => "chars, unless you had something parsing checking the stdout"
[20:37:01] <FromDiscord> <lantos> huh how so?
[20:37:21] <FromDiscord> <Rika> cursor movement escape sequences
[20:37:26] <FromDiscord> <lantos> its not like they could send escape seqs
[20:37:29] <FromDiscord> <lantos> oh hahaha
[20:37:32] <FromDiscord> <Rika> an attacker might possibly edit "older" lines
[20:37:39] <FromDiscord> <lantos> yeah that is what I was trying to understand
[20:37:40] <FromDiscord> <Rika> are you sure?
[20:37:56] <FromDiscord> <lantos> how would you avoid this?
[20:38:06] <FromDiscord> <Rika> sanitise?
[20:38:11] <FromDiscord> <lantos> yeah
[20:38:48] *** Joins: dv^_^2 (~dv@eclipse.oxfordfun.com)
[20:38:51] <FromDiscord> <Rika> sanitise, or output to file (files do not execute escape sequences)
[20:39:00] *** Joins: euantorano_ (sid180289@id-180289.helmsley.irccloud.com)
[20:39:07] <FromDiscord> <Rika> idk how to disable terminal escape sequences
[20:39:19] *** Joins: flynn6 (~mcbloch@user/flynn)
[20:39:32] <FromDiscord> <Rika> https://stackoverflow.com/questions/14693701/how-can-i-remove-the-ansi-escape-sequences-from-a-string-in-python
[20:39:37] <FromDiscord> <Rika> not nim but related nonetheless
[20:40:55] *** Joins: advesperacit_ (~advespera@2.58.46.238)
[20:40:56] *** Joins: rp1 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[20:45:50] *** Quits: advesperacit_ (~advespera@2.58.46.238) (Quit: advesperacit_)
[20:46:41] <FromDiscord> <lantos> yeah okay found something that puts the cursor back and overrides text
[20:46:43] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (*.net *.split)
[20:46:43] *** Quits: advesperacit (~advespera@2.58.46.238) (*.net *.split)
[20:46:43] *** Quits: oz (~oz@crystal/user/oz) (*.net *.split)
[20:46:44] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[20:46:44] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[20:46:45] *** Quits: euantorano (sid180289@helmsley.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[20:46:45] *** dv^_^2 is now known as dv^_^
[20:46:45] *** euantorano_ is now known as euantorano
[20:46:45] *** flynn6 is now known as flynn
[20:46:54] <FromDiscord> <lantos> feel like that one could be abused hard
[20:47:23] <FromDiscord> <Yardanico> how?
[20:47:57] <FromDiscord> <lantos> logging? like if you were logging the output then a user could set the cursor back and then write over text
[20:48:04] <FromDiscord> <lantos> oh do you mean the example?
[20:48:11] <FromDiscord> <Yardanico> In reply to @lantos "logging? like if you": no that won't work
[20:48:16] <FromDiscord> <Yardanico> if you do "logging" you do it to somewhere
[20:48:17] <FromDiscord> <Yardanico> a file or something
[20:48:21] <FromDiscord> <Yardanico> and you can't overwrite text with that
[20:48:24] <FromDiscord> <lantos> sent a code paste, see https://play.nim-lang.org/#ix=3G05
[20:48:24] <FromDiscord> <Yardanico> in a file
[20:51:20] *** Joins: arkurious (~arkurious@user/arkurious)
[20:52:55] *** Joins: oz (~oz@crystal/user/oz)
[20:53:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:56:46] <FromDiscord> <Rika> In reply to @Rika "sanitise, or output to": yeah
[20:57:58] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[20:57:59] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[20:57:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:05:15] *** Joins: lumo_e (~enrico@151.29.48.90)
[21:29:10] <FromDiscord> <lantos> yeah okay, just tried with the logger, if you filelogger yeah it is clear but consolelogger does it which makes sense.↵Thanks 🙂
[21:41:45] *** xet7_ is now known as xet7
[21:42:11] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[21:42:28] <FromDiscord> <lantos> https://nim-lang.org/docs/strutils.html#escape%2Cstring%2Cstring%2Cstring
[21:43:57] *** Joins: Colt (~Colt@user/colt)
[22:06:38] *** Joins: xet7 (~xet7@user/xet7)
[22:26:36] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[22:27:14] *** Joins: Colt (~Colt@user/colt)
[22:31:51] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:32:20] *** Joins: Colt (~Colt@user/colt)
[22:33:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:33:29] *** Joins: Colt1 (~Colt@user/colt)
[22:33:42] *** Quits: Colt1 (~Colt@user/colt) (Remote host closed the connection)
[22:36:37] *** Joins: Colt (~Colt@user/colt)
[22:40:30] <FromDiscord> <hmmm> hmmm
[22:40:41] <FromDiscord> <hmmm> my entire program is a side effect
[22:40:49] <FromDiscord> <hmmm> should I be worried 🧐
[22:43:45] <FromDiscord> <IsaacPaul> yea probably
[22:44:03] <FromDiscord> <hmmm> 😨
[22:45:03] <FromDiscord> <hmmm> still it's kind of elegant in a weird carcrash kind of way
[22:45:10] <FromDiscord> <hmmm> I'm proud of my little monster
[22:53:13] <FromDiscord> <dabmlfz> sent a long message, see http://ix.io/3G0z
[22:54:42] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[23:10:19] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3G0D
[23:16:42] <FromDiscord> <IsaacPaul> If your project is not a library/package you could just change the values in nim manually 😛 https://github.com/nim-lang/Nim/blob/0d0c249074d6a1041de16108dc247396efef5513/compiler/extccomp.nim#L251↵↵Or via patchfile? (Don't quote me on this)
[23:17:36] <FromDiscord> <dabmlfz> that doesn't work sadly. I could also change the values in nim but that's even less elegant than the workaround above XD
[23:17:43] <FromDiscord> <dabmlfz> I'll check that issue out, thanks
[23:48:07] *** Joins: terminalpusher (~terminalp@2a01:586:8c54:1:d213:ff6:6367:dec1)
[23:59:30] *** Joins: proaxis (~proaxis@199.79.168.163)
