[00:00:02] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[00:01:49] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[00:03:30] *** Quits: eck0 (~Android@071-008-102-118.res.spectrum.com) (Ping timeout: 240 seconds)
[00:05:32] *** Quits: src (~src@user/src) (Quit: leaving)
[00:07:02] *** Joins: src (~src@user/src)
[00:08:05] <beeza> I want to add tests here: https://github.com/C2FO/vfs/blob/master/backend/gs/fileSystem.go
[00:08:37] <beeza> but it uses: storage.Client (https://pkg.go.dev/cloud.google.com/go/storage#Client)
[00:08:44] <beeza> this is not an interface
[00:08:57] <beeza> Is there some way to generate mocks for structs?
[00:08:57] *** Parts: lstep (~lstep@user/lstep) (WeeChat 2.8)
[00:09:19] *** Quits: src (~src@user/src) (Client Quit)
[00:09:23] *** Joins: daveed (~ride@user/daveed)
[00:10:41] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[00:11:44] *** Quits: eck0__ (~Android@mobile-166-173-62-118.mycingular.net) (Read error: Connection reset by peer)
[00:12:09] <beeza> ah, https://pkg.go.dev/github.com/googleapis/google-cloud-go-testing/storage/stiface
[00:13:14] *** Joins: src (~src@user/src)
[00:17:57] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[00:27:14] <beeza> sucks
[00:27:17] <beeza> a lot
[00:28:14] *** Quits: src (~src@user/src) (Quit: leaving)
[00:30:49] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[00:31:35] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:14] *** Joins: andlabs (~andlabs@68.237.68.71)
[00:40:03] *** Joins: dmathieu (~textual@pop.92-184-110-240.mobile.abo.orange.fr)
[00:43:30] *** Joins: mickey (~user@user/mickey)
[00:44:57] <beeza> should I rewrite the code to use this instead?
[00:45:57] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 272 seconds)
[00:46:26] *** Quits: dmathieu (~textual@pop.92-184-110-240.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[00:48:44] *** Joins: daveed (~ride@user/daveed)
[00:52:55] <beeza> ugh and the bloody interfaces have private methods
[00:57:21] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[00:57:34] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:57] <b0nn> beeza: You *might* be able to use a fake
[00:58:02] *** Joins: tardisx_ (~tardisx@astra.hawkins.id.au)
[00:58:07] <beeza> what does that mean?
[00:58:40] <b0nn> hang on let me unpick it a bit
[00:59:24] <b0nn> just, normally, if I have stuff I cannot mock (eg std lib stuffs) I fake it by having a package level : var randInt = rand.Int
[00:59:51] <b0nn> That way when I test I can (in the same package) randInt = myFakeRandInt()
[01:00:19] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 264 seconds)
[01:00:33] *** Joins: sh1bumi (~shibumi@archlinux/trusteduser/shibumi)
[01:01:47] <b0nn> huh storage.Client /is/ an interface and all its methods are exported https://github.com/C2FO/vfs/blob/5e1e0a5f9306aee98418caf30c47f721d81ec46d/backend/azure/client.go#L20
[01:02:06] *** Joins: daveed (~ride@user/daveed)
[01:02:17] *** Joins: acidfu- (~nicolasbo@96.125.207.152)
[01:02:30] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26) (Quit: Leaving)
[01:02:59] <beeza> that is for azure
[01:03:01] <beeza> not gcs
[01:05:05] *** Quits: shibumi (~shibumi@archlinux/trusteduser/shibumi) (*.net *.split)
[01:05:05] *** Quits: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107) (*.net *.split)
[01:05:37] *** Quits: scwizard (~scwizard@98.156.26.234) (Quit: Client closed)
[01:06:00] <b0nn> Oh, I see https://github.com/googleapis/google-cloud-go/blob/storage/v1.15.0/storage/storage.go
[01:06:02] *** Quits: jhchabran (~jhchabran@user/jhchabran) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:06] <b0nn> Yeah - go with fakes
[01:08:46] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[01:08:57] <beeza> I'm going with stifaces, it works
[01:09:00] *** Joins: Giedrius__ (~giedrius@78-58-156-248.static.zebra.lt)
[01:09:12] <beeza> i will use that and https://github.com/fsouza/fake-gcs-server
[01:10:03] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:10:43] *** Quits: esro (~esro@91.231.45.1) (Quit: Leaving)
[01:11:24] *** Joins: Giedrius_ (~giedrius@5.133.65.65)
[01:11:27] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[01:12:14] *** Joins: noxim (~noxim@user/noxim)
[01:13:08] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:14:42] *** Quits: Giedrius__ (~giedrius@78-58-156-248.static.zebra.lt) (Ping timeout: 268 seconds)
[01:14:49] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[01:15:36] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[01:16:22] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:18:34] *** Quits: icholy (~icholy@68.71.18.45) (Quit: leaving)
[01:20:11] *** Joins: NoName_ (~NoName@8.20.127.93)
[01:21:54] *** Quits: s-video (~s-video@2601:196:4b00:e70:dd6f:9c91:78a4:eedb) (Ping timeout: 264 seconds)
[01:22:27] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:22:39] *** Joins: hexfive (~eric@50.35.83.177)
[01:23:38] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[01:23:45] *** Joins: andlabs (~andlabs@68.237.68.71)
[01:25:50] <lungaro_> man, is it me or does pkg.go.dev suck compared to the old godoc.org ?
[01:26:03] <lungaro_> trying to browse the function list in this little tiny sidebar is annoying
[01:26:18] <lungaro_> also annoying having to expand all these little things
[01:26:50] *** Quits: andlabs (~andlabs@68.237.68.71) (Read error: Connection reset by peer)
[01:27:21] *** Joins: andlabs (~andlabs@68.237.68.71)
[01:27:46] <fizzie>  There's still a non-sidebar inline index as well, at least for this package I'm looking at (`fmt`). So it's more an additional option rather than a replacement.
[01:28:33] <fizzie> (It also auto-expands the sidebar when I open a function from the non-sidebar index.)
[01:29:34] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 244 seconds)
[01:30:06] *** Joins: winircuser-337 (~winircuse@170.250.221.149)
[01:30:32] <b0nn> Not go related, but I know a few people will appreciate the sentiment https://twitter.com/terrajobst/status/1405245617710927873
[01:31:53] *** Quits: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129) (Remote host closed the connection)
[01:33:10] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[01:33:38] *** Joins: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129)
[01:33:40] *** Joins: noxim (~noxim@user/noxim)
[01:33:41] *** Quits: Snyp (~rksht@49.207.192.68) (Quit: WeeChat 3.1)
[01:36:23] *** Quits: komish (~quassel@47-184-205-144.dlls.tx.frontiernet.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:36:39] *** Quits: winircuser-337 (~winircuse@170.250.221.149) (Read error: Connection reset by peer)
[01:37:15] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 272 seconds)
[01:39:00] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - http://znc.in)
[01:42:54] *** Joins: kiril (~kiril@85.91.153.163)
[01:44:22] *** Joins: s-video (~s-video@2601:196:4b00:e70:e946:222e:b249:9e5f)
[01:45:12] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:46:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:48:05] *** Joins: scwizard (~scwizard@98.156.26.234)
[01:48:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[01:48:23] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[01:49:38] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[01:52:17] *** Quits: scwizard (~scwizard@98.156.26.234) (Client Quit)
[01:53:12] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[01:53:39] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:58:15] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[02:03:14] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:04:53] <lungaro_> what really get my goat, some adhoc programming logic mixed in... "yeah, that's you github actions"
[02:05:04] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:15:45] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[02:19:20] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[02:19:20] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[02:22:21] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:26:55] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 244 seconds)
[02:28:31] *** Quits: jespada (~jespada@90.254.247.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:24] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[02:32:49] <Torr> Is there any alternative to Sqlite?
[02:33:40] <Torr> By alternative I mean a self-sufficient and tiny storage utility.
[02:34:39] *** Quits: dr0n (~nabromov@217.138.202.100) (Quit: WeeChat 2.8)
[02:36:02] *** Joins: jespada (~jespada@90.254.247.46)
[02:38:06] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:38:23] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[02:38:49] *** Joins: kulak (~kulak@user/kulak)
[02:40:21] *** Quits: znpy (~znpy@user/znpy) (Ping timeout: 244 seconds)
[02:40:55] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 268 seconds)
[02:42:47] *** Joins: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[02:42:47] *** Quits: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[02:42:47] *** Joins: alienwarlock (~warl@user/warl)
[02:43:46] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[02:44:07] *** Joins: c10l (~c10l@89.34.167.207)
[02:50:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:52:52] <b0nn> Torr: What's the reason for wanting an alternative?
[02:53:22] <b0nn> I mean SQLite has a lot of mindshare in that space, but there are alternatives available (according to my google search at least)
[02:59:33] <jjhoo> SQL or key-value storage?
[03:00:02] *** Quits: Giedrius_ (~giedrius@5.133.65.65) (Ping timeout: 268 seconds)
[03:00:46] *** Joins: Giedrius (~giedrius@78-58-156-248.static.zebra.lt)
[03:00:47] <Torr> b0nn: For example?
[03:00:59] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:01:01] <Torr> jjhoo: Any
[03:01:21] <b0nn> https://www.google.com/search?channel=fs&client=ubuntu&q=sqlite+alternatives
[03:05:35] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[03:06:59] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[03:07:16] <fizzie> There's the whole category of things like LMDB, of course.
[03:09:41] <Torr> fizzie: That's really cool.
[03:10:21] <Torr> But it's not exactly what I'm after. When I said self-sufficient I meant something which is not dependent on a secondary tool to be managed.
[03:10:54] <b0nn> Torr: You need to expand on your requirements quite a bit for people to be able to help you
[03:11:09] <b0nn> The field you're asking about is quite expansive
[03:11:33] <b0nn> er, s/expand your requirements/explain your requirements/
[03:13:21] <b0nn> for example, what do you mean by "secondary tool to be managed" - ALL databases are secondary tools with management facilities
[03:13:48] <b0nn> An interpretation might be that you want a library that you include into your code
[03:18:36] <Torr> b0nn: I'm after something which needs not to be embedded to work, but is not as big as Postgre.
[03:19:08] <Torr> Take Sqlite for example, you can use its own shell to manipulate the data.
[03:20:30] <Torr> That's what I meant by not needing a secondary tool.
[03:23:48] *** Joins: SincereFox (uid337158@user/sincerefox)
[03:24:15] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[03:24:52] <impermanence> any goose users here?
[03:26:31] <impermanence> I have a db using goose for migrations and a while back a migration was skipped; turns out this migration is needed; we don't do goose down; not sure what to do.
[03:28:52] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:29:55] <b0nn> This in prod?
[03:30:07] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[03:30:18] <b0nn> I mean, the /right/ thing to do is to create a new migration that puts your DB into the required state
[03:31:14] <b0nn> But, if you're faffing about in dev or staging, then look at the tables Goose uses to manage the migrations (that is, there's a table/field that goose keeps that tells it what migrations were applied)
[03:31:53] *** Quits: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:32:16] <impermanence> b0nn: thanks. and what would I gain by knowing which migrations were applied?
[03:32:22] *** Joins: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net)
[03:32:30] <impermanence> I know which migrations were *not* applied :-|
[03:32:37] <b0nn> Do you know *why*
[03:32:58] <impermanence> yes
[03:33:03] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:33:17] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:33:21] <impermanence> b0nn: but how does that solve the issue of "we don't goose down so how do we get this migration in there?"
[03:33:30] <impermanence> goose is skipping it because of timestamp stuff
[03:33:30] <b0nn> FTR I /used/ to faff about in those tables to get googse on track
[03:33:40] <impermanence> yeah that's cool
[03:33:44] <impermanence> fine w/ faffing
[03:33:45] <b0nn> Actually, I don't have patience for this
[03:34:05] <impermanence> b0nn: for what? me or faffing?
[03:35:48] *** Joins: basque (~kvirc@user/basque)
[03:37:58] <impermanence> I'll read up on it some.
[03:43:35] <b0nn> impermanence: sorry, it's not you; I'm a lot frazzled atm (4 back to back meetings/interviews today starting in about 30 mins, and just refactoring some code and got a recruiter hanranguing me to sign up for my backup job
[03:44:08] <b0nn> Oh, and I just had to fetch my laundry from the communal laundrette
[03:50:29] <impermanence> b0nn: ha.  nw :-)
[03:50:58] <impermanence> I'm frazzled too.  My db is quite weak.  And I know virtually nothing of goose.  I think the faffing about route is the route to go.
[03:51:07] <impermanence> either that or just drop/create the whole dang thing again :-(
[04:07:15] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 268 seconds)
[04:07:21] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[04:07:54] *** Quits: Giedrius (~giedrius@78-58-156-248.static.zebra.lt) (Ping timeout: 240 seconds)
[04:08:42] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[04:11:23] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:47] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[04:19:52] *** Quits: basque (~kvirc@user/basque) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:20:19] *** Quits: s-video (~s-video@2601:196:4b00:e70:e946:222e:b249:9e5f) (Ping timeout: 268 seconds)
[04:22:27] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[04:27:30] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[04:37:11] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[04:38:33] *** Quits: siika (~siika@58.246.101.34) (Remote host closed the connection)
[04:39:02] *** Joins: siika (~siika@139.226.50.41)
[04:42:55] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[04:43:10] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:13] *** Quits: kayprish (~kayprish@46.240.143.86) (Remote host closed the connection)
[04:46:57] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[04:47:33] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:59] *** Joins: trufas (~trufas@177.240.218.218)
[04:55:43] *** Joins: daveed (~ride@user/daveed)
[04:56:18] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:08:58] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:10:09] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[05:11:57] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:12:38] *** Quits: dza (~dza@user/dza) (Ping timeout: 252 seconds)
[05:12:42] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 240 seconds)
[05:17:21] *** Joins: dza (~dza@user/dza)
[05:19:24] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 268 seconds)
[05:23:53] *** Joins: Torr (~Torr@user/torr)
[05:28:24] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[05:28:36] *** Joins: r[]n|n (~r]n|n@c-71-205-73-92.hsd1.co.comcast.net)
[05:28:55] *** Quits: r[]n|n (~r]n|n@c-71-205-73-92.hsd1.co.comcast.net) (Client Quit)
[05:38:34] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[05:38:45] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[05:39:55] *** Joins: oxum (~oxum@122.172.237.95)
[05:40:39] *** Quits: oxum (~oxum@122.172.237.95) (Remote host closed the connection)
[05:42:13] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[05:49:29] *** Joins: oxum (~oxum@122.172.237.95)
[05:51:40] *** Quits: n3tgh0st (~n3t@209-112-185-154-radius.dynamic.acsalaska.net) (Read error: Connection reset by peer)
[06:00:27] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[06:00:46] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:01:08] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:02:49] *** Joins: andlabs (~andlabs@68.237.68.71)
[06:02:49] *** Joins: c10l (~c10l@89.34.167.207)
[06:03:52] *** Quits: daved (~daved@162.67.197.35.bc.googleusercontent.com) (Quit: So long, and thanks for all the fish.)
[06:04:32] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[06:06:05] *** Joins: pots (~pots@20.51.220.66)
[06:09:16] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[06:10:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:25:00] *** Quits: chuckx (~chuckx@user/chuckx) (Read error: Connection reset by peer)
[06:25:33] *** Joins: chuckx (~chuckx@77.81.142.11)
[06:25:47] *** Quits: bill (~quassel@mail.classdesign.com) (Quit: No Ping reply in 180 seconds.)
[06:26:00] *** Joins: g4wjs (~quassel@mail.classdesign.com)
[06:29:08] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[06:30:49] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[06:32:06] <Skyz> Go is growing
[06:35:15] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[06:36:09] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:42] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 264 seconds)
[06:39:52] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[06:40:48] *** Quits: oxum (~oxum@122.172.237.95) (Remote host closed the connection)
[06:42:23] *** Parts: jsanford_ (~jsanford@lax.froop.com) ()
[06:42:49] *** Joins: oxum (~oxum@122.172.237.95)
[06:43:13] *** Joins: chuckx (~chuckx@77.81.142.11)
[06:45:42] *** Joins: jsanford (~jsanford@user/jsanford)
[06:48:21] *** Quits: oxum (~oxum@122.172.237.95) (Ping timeout: 244 seconds)
[06:53:23] *** Joins: oxum (~oxum@122.172.237.95)
[06:55:44] *** Joins: burningserenity (~burningse@102.129.153.84)
[06:56:59] *** Joins: siika_ (~siika@139.226.50.41)
[06:57:27] *** Quits: siika (~siika@139.226.50.41) (Ping timeout: 268 seconds)
[06:59:25] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[07:13:32] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[07:25:59] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[07:26:02] *** Quits: siika_ (~siika@139.226.50.41) (Read error: Connection reset by peer)
[07:26:32] *** Joins: siika_ (~siika@58.246.101.34)
[07:27:23] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[07:27:31] *** Joins: mud (~mud@user/kadoban)
[07:27:54] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 264 seconds)
[07:28:05] *** Quits: oxum (~oxum@122.172.237.95) (Remote host closed the connection)
[07:28:43] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[07:30:39] *** Joins: oxum (~oxum@122.172.237.95)
[07:35:22] *** Quits: oxum (~oxum@122.172.237.95) (Ping timeout: 244 seconds)
[07:36:44] *** Quits: dhollinger (~dhollinge@ip68-13-48-63.om.om.cox.net) (Ping timeout: 252 seconds)
[07:44:56] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 268 seconds)
[07:59:02] *** Joins: siika__ (~siika@58.246.101.34)
[07:59:17] *** Quits: siika_ (~siika@58.246.101.34) (Ping timeout: 252 seconds)
[08:00:10] *** Quits: schmillin (~schmillin@user/schmillin) (Ping timeout: 244 seconds)
[08:02:28] *** Quits: NoName_ (~NoName@8.20.127.93) (Quit: https://www.endfgm.eu/what-can-you-do/donate/)
[08:05:10] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[08:07:23] *** Joins: snappy (~snappy@user/snappy)
[08:12:04] <snappy> I have a http handler that queries a database for a list of items. The list in the database doesn't get updated often, so I want to build a small cache for it. I have a package itemcache that contains a global variable ItemList which is a slice containing the items, and then there's an Update() function which actully goes to the db, fetches the data, prepares the slice, then reassigns ItemList
[08:12:05] <snappy> (i.e. ItemList = newItemList). I'm wondering do I need to have r/w locks for accessing the ItemList? My hunch is that Update will swap the list atomically in that there won't be accesses to ItemList in an indeterminate state.
[08:18:32] <jemaclus> I don't know if it's atomic, but I don't see how a lock would hurt.
[08:24:41] <bpalmer> assignment is not ever guaranteed to be atomic in the go memory model, so you have to introduce some mechanism, I believe.
[08:25:00] <bpalmer> whether that be a simple rwlock or wandering into the dangerous world of sync/atomic (perhaps SwapPointer)
[08:28:35] <bpalmer> (in particular, "writes of values larger than a single machine word behave as multiple machine-word-sized operations in an unspecified order", so if slice assignment happens to be more than a machine word, which might be 32-bits, then ...)
[08:29:44] *** Joins: Snyp (~rksht@49.207.192.68)
[08:33:44] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[08:33:58] <bpalmer> actually, just take a look at the example in sync for a ReadMostly datastructure
[08:35:29] *** Joins: schmillin (~schmillin@2a0d:5600:24:aae::b10d)
[08:38:20] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 252 seconds)
[08:40:29] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 244 seconds)
[08:44:19] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[08:45:24] *** Joins: chuckx (~chuckx@77.81.142.11)
[08:46:25] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[08:51:22] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Quit: Leaving)
[08:58:53] *** Joins: SebastianM (~seba@user/sebastianm)
[08:59:00] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[09:05:05] *** Joins: chuckx (~chuckx@77.81.142.11)
[09:07:07] *** Quits: recursion (uid504862@id-504862.charlton.irccloud.com) (Changing host)
[09:07:07] *** Joins: recursion (uid504862@user/recursion)
[09:09:33] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[09:10:24] *** Joins: trollixx (sid289131@id-289131.highgate.irccloud.com)
[09:13:32] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[09:15:07] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:15:13] *** Joins: src (~src@user/src)
[09:19:00] *** Joins: andlabs (~andlabs@68.237.68.71)
[09:21:24] *** Quits: treethought_ (treethou@138.68.49.251) (Remote host closed the connection)
[09:22:23] *** Quits: src (~src@user/src) (Quit: leaving)
[09:23:13] *** Joins: treethought (treethou@138.68.49.251)
[09:23:18] *** Joins: src (~src@user/src)
[09:25:46] *** Joins: chuckx (~chuckx@77.81.142.11)
[09:29:21] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[09:29:57] *** Joins: chuckx (~chuckx@77.81.142.11)
[09:30:26] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[09:47:59] *** Joins: chuckx (~chuckx@77.81.142.11)
[09:54:27] *** Quits: dumbgoy (dumbgoy@d118-75-118-127.clv.wideopenwest.com) (Remote host closed the connection)
[09:54:27] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[09:58:17] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:59:48] *** Joins: andlabs (~andlabs@68.237.68.71)
[10:00:44] *** Joins: kwong (~kwong@user/kwong)
[10:01:08] *** Parts: kwong (~kwong@user/kwong) (Closing Window)
[10:03:02] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[10:03:55] *** Quits: xy (~icy@user/icy) (Ping timeout: 272 seconds)
[10:03:56] *** Joins: treethought (treethou@138.68.49.251)
[10:06:47] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[10:06:54] *** Joins: absc (~absc@37.163.9.150)
[10:07:38] *** Joins: treethought (treethou@138.68.49.251)
[10:10:37] *** Joins: chuckx (~chuckx@77.81.142.11)
[10:14:23] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:14:23] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[10:14:26] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[10:15:10] <A_Dragon> so TIL [0]string{} isn't a compiletime error
[10:15:12] <A_Dragon> thats kinda silly
[10:17:06] *** Parts: blabber (~blabber@user/blabber) (WeeChat 3.1)
[10:19:07] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 268 seconds)
[10:20:04] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[10:20:57] *** Joins: Vukan (~drazen@46.235.100.65)
[10:21:13] *** Quits: LiftLeft (~LiftLeft@154.21.114.153) (Ping timeout: 244 seconds)
[10:24:12] *** Quits: src (~src@user/src) (Quit: leaving)
[10:24:55] *** Joins: icy (~icy@user/icy)
[10:25:31] *** Quits: icy (~icy@user/icy) (Remote host closed the connection)
[10:25:53] <pepee> A_Dragon, maybe report it as a bug?
[10:26:04] <A_Dragon> eh its not a bug per-se
[10:26:36] <A_Dragon> its perfectly valid, could use it as a sentinel or as a starting point for a slice that you really want to be small until it has to be bigger
[10:26:56] <pepee> I guess, but still, maybe it could be considered a bug in some contexts, I dunno
[10:27:28] <A_Dragon> I could argue that the compiler shouldnt actually initialise it to anything, or alloc it at all (it does seem to)
[10:27:55] *** Joins: Guest21 (~Guest21@2600:1700:1930:16af:8d0e:ccac:1190:371)
[10:28:11] <A_Dragon> oh nevermind
[10:28:15] <A_Dragon> unsafe.Sizeof says its 0
[10:28:16] <bpalmer> it has to allocate something, because it has to track its length somewhere.
[10:28:41] <A_Dragon> I'd expect that it has a SliceHeader
[10:28:46] <A_Dragon> which is uh, three int64s?
[10:28:53] <A_Dragon> size, capacity, pointer to data?
[10:29:22] <A_Dragon> godoc says uintptr + int + int
[10:29:40] <A_Dragon> but sizeof does explicitly say its 0
[10:30:12] <A_Dragon> ohwait thats a slice header not an array
[10:30:16] <bpalmer> I guess it could keep a singleton around for just that type, so that reflect can do its magic when handed a value of that.
[10:30:29] <A_Dragon> arrays might just be flat and monitored by the compiler, as it can do bounds checking at compiletime
[10:30:47] *** Quits: Guest21 (~Guest21@2600:1700:1930:16af:8d0e:ccac:1190:371) (Client Quit)
[10:31:18] <A_Dragon> fmt.Printf("%#v, %p, %d\n", x, unsafe.Pointer(&x), unsafe.Sizeof(x)) returns [0]string{}, 0x579400, 0
[10:31:25] <bpalmer> it has to be prepared for reflect.TypeOf([0]string{}).Len()
[10:31:31] <A_Dragon> yeah
[10:31:57] <A_Dragon> lets see what godbolt says
[10:32:29] *** Quits: absc (~absc@37.163.9.150) (Quit: Leaving.)
[10:32:35] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Quit: UAAARRR!)
[10:32:47] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 268 seconds)
[10:33:41] *** Joins: chuckx (~chuckx@77.81.142.11)
[10:37:08] <A_Dragon> yep no idea
[10:37:20] <A_Dragon> its either entirely compiled out or seems to take up zero space
[10:39:33] *** Joins: src (~src@user/src)
[10:40:01] <pepee> what happens if you use it? try fmt.Println(a[0])
[10:40:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 244 seconds)
[10:41:28] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[10:42:17] *** Joins: chuckx (~chuckx@77.81.142.11)
[10:42:51] <nevivurn> out of bounds, I assume, since 0 >= len(a)
[10:42:51] *** Quits: chuckx (~chuckx@77.81.142.11) (Read error: Connection reset by peer)
[10:44:28] <A_Dragon> pepee: runtime OOB
[10:44:59] <pepee> yeah, but the funny thing for me is that it won't print the other stuff I wrote in the program
[10:45:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[10:46:02] *** Joins: jcajka_ (~jcajka@static-84-42-180-92.net.upcbroadband.cz)
[10:46:53] *** Joins: shka (~herr@109.231.62.239)
[10:48:24] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[10:51:55] <pepee> wait, nvm, you are right, it won't even compile
[10:51:56] <nevivurn> A_Dragon: since it's an array and a compile constant index, it's a compile-time error, no?
[10:52:02] <nevivurn> not runtime
[10:53:00] <nevivurn> https://golang.org/ref/spec#Index_expressions "a constant index must be in range"
[10:53:27] <A_Dragon> oh yes is derp
[10:53:41] <A_Dragon> ./test.go:9:23: invalid array index 0 (out of bounds for 0-element array)
[10:56:28] *** Joins: fef (~thedawn@user/thedawn)
[10:57:03] *** Joins: paul (~paul@p4febfdb2.dip0.t-ipconnect.de)
[10:57:18] *** Quits: Vukan (~drazen@46.235.100.65) (Ping timeout: 264 seconds)
[10:58:59] *** Joins: chuckx (~chuckx@77.81.142.11)
[11:00:04] *** Quits: chuckx (~chuckx@77.81.142.11) (Client Quit)
[11:00:15] *** Joins: chuckx (~chuckx@77.81.142.11)
[11:04:32] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[11:05:57] *** Quits: chuckx (~chuckx@77.81.142.11) (Changing host)
[11:05:57] *** Joins: chuckx (~chuckx@user/chuckx)
[11:07:17] *** Joins: sadg (~odd@45.83.220.210)
[11:07:30] *** Joins: ijlx (~ijlx@dsl-50-5-224-196.fuse.net)
[11:08:00] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[11:11:53] *** Quits: chuckx (~chuckx@user/chuckx) (Quit: WeeChat 2.3)
[11:12:00] *** Joins: chuckx (~chuckx@77.81.142.11)
[11:12:08] *** Quits: chuckx (~chuckx@77.81.142.11) (Client Quit)
[11:12:18] *** Joins: chuckx (~chuckx@77.81.142.11)
[11:12:55] *** Quits: Snyp (~rksht@49.207.192.68) (Quit: WeeChat 3.1)
[11:15:29] *** Quits: chuckx (~chuckx@77.81.142.11) (Client Quit)
[11:16:06] *** Joins: chrysanthematic (~chrysanth@82.2.21.4)
[11:21:18] *** Joins: Vukan (~drazen@46.235.100.65)
[11:22:07] *** Joins: mrig (~mrig@user/mrig)
[11:22:52] *** Joins: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr)
[11:25:01] *** Quits: ijlx (~ijlx@dsl-50-5-224-196.fuse.net) (Quit: Client closed)
[11:26:46] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[11:27:40] *** Joins: absc (~absc@37.160.179.102)
[11:35:58] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[11:36:02] <snappy> can you type assert an anonymous struct that crosses package boundaries?
[11:37:05] *** Quits: chrysanthematic (~chrysanth@82.2.21.4) (Quit: chrysanthematic)
[11:39:57] <bookworm> why do you want to do that?
[11:42:00] *** Joins: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net)
[11:43:31] *** Quits: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net) (Client Quit)
[11:44:03] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:44:56] *** Quits: paul (~paul@p4febfdb2.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:45:27] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[11:45:43] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:45:50] *** Joins: cim8 (~cim@205.185.117.110)
[11:47:18] *** Quits: l2dy (~l2dy@user/l2dy) (Ping timeout: 272 seconds)
[11:47:21] *** Joins: l2dy_ (~l2dy@user/l2dy)
[11:48:34] *** Quits: cim (~cim@205.185.117.110) (Ping timeout: 272 seconds)
[11:48:34] *** cim8 is now known as cim
[11:50:07] *** Quits: schmillin (~schmillin@2a0d:5600:24:aae::b10d) (Quit: Leaving)
[11:51:48] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:53:17] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:54:30] <nevivurn> snappy: what do you mean? can you show some code of what you're trying to do?
[11:59:45] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[12:00:16] *** Joins: SebastianM (~seba@user/sebastianm)
[12:02:59] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 272 seconds)
[12:07:44] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[12:09:42] *** Joins: w0x12ef_ (~w0x12ef@111.63.14.116)
[12:12:56] *** Joins: paul (~paul@p4febfdb2.dip0.t-ipconnect.de)
[12:13:18] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Ping timeout: 268 seconds)
[12:15:47] <mrig> Good morning, has go been picked up as a training language by any educational establishments as yet?
[12:16:53] <mrig> Seems to me to be the case that it really does install good coding habits; Some perhaps, that even the top level C++ coders dont seem to get the hang of.
[12:17:24] <mrig> Am pondering cyclical dependencies when I say that.
[12:21:13] <b0nn> https://github.com/golang/go/wiki/Courses
[12:21:32] <rk4> go is more of a trade skill imho
[12:21:42] <mrig> Sane use of make things like that; Using go is driving home some fundamentals that current widespread coding practices would force be ignored in other circumstances, for 'speed' of development.
[12:22:23] <rk4> we might say moreso of erlang, or haskell, or rust
[12:22:29] <rk4> by we i mean me (:
[12:22:45] *** Joins: w0x12ef__ (~w0x12ef@36.112.134.194)
[12:22:59] <mrig> oh cool, it is being used in some :)
[12:23:32] <mrig> haskell seems to force 'abstraction' before reality somehow.
[12:23:36] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[12:23:59] <mrig> not that I've learned any as yet, just getting the feel for it still
[12:26:02] *** Quits: w0x12ef_ (~w0x12ef@111.63.14.116) (Ping timeout: 252 seconds)
[12:27:46] *** Quits: w0x12ef__ (~w0x12ef@36.112.134.194) (Read error: Connection reset by peer)
[12:28:20] *** Joins: Giedrius (~giedrius@5.133.65.65)
[12:28:45] <mrig> Though it is a very interesting comparison to Go I find.
[12:29:20] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 268 seconds)
[12:30:16] *** Joins: Jad (~Nashmi@user/jad)
[12:31:35] <src> b0nn: awesome link btw thanks for sharing
[12:33:38] *** Joins: fef (~thedawn@user/thedawn)
[12:39:04] *** Joins: Xjs (~jannis@user/xjs)
[12:40:48] *** Joins: daved (~daved@162.67.197.35.bc.googleusercontent.com)
[12:46:23] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[12:49:19] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Quit: ZNC - https://znc.in)
[12:49:34] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[12:49:36] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[12:50:52] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:51:46] *** sshow is now known as sshow_
[12:51:55] *** sshow_ is now known as sshow
[12:53:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[12:55:03] *** Joins: frost (~frost@59.71.241.190)
[13:02:28] *** Quits: siXy (~jfindley@centos/ops/sixy) (Quit: leaving)
[13:03:52] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 268 seconds)
[13:04:23] *** Joins: siXy (~jfindley@centos/ops/sixy)
[13:08:08] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[13:13:13] *** Joins: arinov (~arinov@212.156.215.30)
[13:18:06] *** Joins: znpy (~znpy@user/znpy)
[13:23:31] *** Joins: Xjs (~jannis@user/xjs)
[13:26:51] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:28:50] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[13:28:57] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[13:29:24] *** sh1bumi is now known as shibumi
[13:33:26] *** Joins: Guest99 (~Guest99@114.23.160.104)
[13:34:48] *** Joins: Xjs (~jannis@user/xjs)
[13:34:55] *** Quits: Guest99 (~Guest99@114.23.160.104) (Client Quit)
[13:39:31] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[13:41:50] *** Herby_ is now known as Herby
[13:42:46] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[13:47:42] *** Quits: sadg (~odd@45.83.220.210) (Ping timeout: 264 seconds)
[13:49:05] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[13:50:41] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[13:52:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:52:44] <beeza> hi, is there some way to prevent construction of a struct without use of it's constructor?
[13:52:53] <beeza> like without use of New?
[13:54:22] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[13:55:06] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 240 seconds)
[13:56:08] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[13:56:22] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:56:43] <KirkMcDonald> beeza: Don't export it, I suppose.
[13:58:14] <b0nn> yeah, the only way I know of is to not export the type, but that can make it a bit awkward to work with
[13:58:26] *** Quits: Vukan (~drazen@46.235.100.65) (Ping timeout: 252 seconds)
[13:58:38] <b0nn> src: it was just something google threw at me
[14:00:30] *** Joins: fbrx (~fbrx@user/fbrx)
[14:04:29] *** Quits: Ohlov38951749035 (~Ohlov3@host-091-097-117-147.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[14:05:10] *** Joins: khyr0n_ (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[14:05:23] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Read error: Connection reset by peer)
[14:14:15] *** Joins: ding (~ding@2001:19f0:5:14c2:5400:2ff:fee0:a42c)
[14:18:19] *** Joins: fef (~thedawn@user/thedawn)
[14:22:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[14:22:56] *** Joins: CookE[] (~thedawn@user/thedawn)
[14:23:07] <ac5tin> if i want to write a method for a struct is it better to use  func(x *MyStruct) or func(x MyStruct)
[14:23:25] *** Quits: kodah (~kodah@user/kodah) (Quit: kodah)
[14:23:32] <ac5tin> seem to behave the same
[14:23:53] <siXy> usually the former, as it avoids copying the struct, which often produces undesirable outcomes, but sometimes you explicitly want the copy.
[14:24:04] *** Joins: kodah (~kodah@user/kodah)
[14:24:09] <siXy> so "it depends, but default to the former" would be my general advice.
[14:24:33] <ac5tin> siXy: oh ok cool, ill stick with func(x *MyStruct) then
[14:25:58] *** Joins: egon_ (~egon@user/egon)
[14:26:24] *** Quits: egon_ (~egon@user/egon) (Client Quit)
[14:26:26] *** Quits: kodah (~kodah@user/kodah) (Client Quit)
[14:26:57] *** Joins: kodah (~kodah@user/kodah)
[14:28:09] *** Joins: kayprish (~kayprish@46.240.143.86)
[14:28:37] *** Quits: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:29:07] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:29:26] *** Quits: kayprish (~kayprish@46.240.143.86) (Remote host closed the connection)
[14:34:48] <ac5tin> when deiciding where to place your structs is it generally better to put it a seperate package so u import it using structs.Mystruct cuz it prevents circular import
[14:35:08] *** Joins: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr)
[14:36:03] *** Joins: egon_ (~egon@user/egon)
[14:37:23] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[14:37:37] <siXy> packages are generally done along functional boundaries, and where they make sense as a self-contained and re-usable library of code. You might be better served by splitting your package into multiple files within the same package if it's getting a bit unweildy
[14:38:11] *** Joins: Xjs (~jannis@user/xjs)
[14:39:18] <ac5tin> i have a struct.go inside my package, so like :  mypackage/struct.go   and i put functions in other files like mypackage/myfunc.go
[14:39:31] *** Quits: egon_ (~egon@user/egon) (Client Quit)
[14:40:16] <siXy> you wouldn't normally do that, no. It's generally fairly annoying to have to switch files when trying to understand what's happening, and you typically need to see both the struct definition and how it's used.
[14:41:39] <ac5tin> so u saying im splitting a bit too much
[14:43:16] <ac5tin> i guess put related functions in the same file under their package should be ok
[14:43:22] <siXy> yes, and also on the wrong bounds. If you split, each file should contain a coherent set of related structs, and the functions they primarily relate to. E.g. in a package that manages database access for an application, you might have one file with the structs and methods that deal with the connection and session handling, and another file with the structs and methods dealing with transations
[14:44:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[14:44:38] <ac5tin> siXy: for db i just have 1 file for structs and then another file for functions , but i think yours probably easier to read
[14:45:25] <ac5tin> but what if i have lots of functions that might reuse the same struct,  i guess those can be in a separate struct.go ? or i should still avoid that
[14:46:02] <ac5tin> i always wanna separate functions and structs and put structs in their own file but you're right, probably harder to read and not good practise
[14:46:16] <siXy> that would be a signal that you're splitting too much, and all of that should be in one file.
[14:47:37] *** Quits: noteness (noteness@user/noteness) (Quit: Ping Timeout: 419 seconds)
[14:48:41] <siXy> it's much easier to read code in one file 200 lines long than it is to read that same code split out into 10 files 20 lines long. And the only objective here is readability.
[14:49:04] *** Joins: masoudd (~masoudd@user/masoudd)
[14:49:30] <ac5tin> but what about structs that probably will be access or imported by multiple different packges
[14:50:19] *** Joins: noteness (noteness@user/noteness)
[14:52:08] *** Joins: egon_ (~egon@user/egon)
[14:53:12] *** Quits: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:53:43] <siXy> imports are done at the package level, this is not python. There's no reason to split into a different file based on that.
[14:57:56] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[15:01:13] <ac5tin> oh i mean putting a struct that wil be access by multiple packages in its own package
[15:01:54] <ac5tin> say for example MyStruct gets accessed by multiple packages, it makes sense to put it in a structs package so u can import it via  structs.Mystruct right?
[15:07:36] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[15:09:57] <siXy> No. You shouldn't have a "structs" package. Read what I said about the purpose of packages, above.
[15:13:30] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[15:14:07] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:15:14] *** Joins: egon_ (~egon@user/egon)
[15:15:23] *** Quits: absc (~absc@37.160.179.102) (Remote host closed the connection)
[15:17:00] *** Joins: links (~links@114.23.160.104)
[15:17:21] <ac5tin> i dunno if it's cuz of the way i structured my code back then but i ran into circular import issues once the code gets a bit bigger
[15:18:11] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Ping timeout: 252 seconds)
[15:18:33] <ac5tin> which is why im asking if what im doing is anti practise and should structure my stuff a bit better
[15:19:09] *** Joins: oxum (~oxum@122.172.237.95)
[15:20:05] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[15:20:43] <soren> What is supposed to happen with a go thread that's waiting to write to a channel, but there's no receiver?
[15:20:51] <soren> I.e. the receiver has been garbage collected.
[15:21:19] <nevivurn> soren: it blocks forever
[15:21:39] <soren> Hm. Ok.
[15:21:42] <nevivurn> I assume you're talking about a goroutine. It doesn't block the thread forever.
[15:21:54] <soren> Sorry, yes. Goroutine.
[15:22:06] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:23:28] *** Quits: oxum (~oxum@122.172.237.95) (Ping timeout: 244 seconds)
[15:23:56] <siXy> ac5tin: having problems with circular imports, along with the other things you've said, suggests that you're far too keen to split things out into different packages. You generally want fewer packages not more. Look at the size of packages in the stdlib - they're typically fairly large and cover a decent swathe of related functionality.
[15:25:06] <siXy> soren: ^ is true if it's an unbuffered channel, or if it's a buffered channel that's full. But if the channel is buffered and has capacity, you can still write into it even if your reader has gone away.
[15:26:09] <ac5tin> siXy: alright thx, i think i need to rethink about how i structure my code
[15:26:17] <soren> I want to pass a range of IP's to a consumer who in turn will check if it's available. E.g. in Python, I'd return a generator. I was trying to do something similar in Go, but ending up with blocked go routines seems unwise. This could happen thousands of times in the process's lifetime.
[15:26:44] <soren> What would be an idiomatic way to do this in Go?
[15:27:39] *** Joins: fef (~thedawn@user/thedawn)
[15:28:17] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:28:39] *** Joins: fef (~thedawn@user/thedawn)
[15:28:46] <siXy> soren: is this to be an asynchronous process from the callers perspective?
[15:28:51] <mrig> ac5tin: This is a nice article on structuring gocode https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1
[15:29:16] <soren> siXy: Nah.
[15:29:40] <soren> siXy: But the ip ranges could be huge. ipv6 is a pretty big namespace.
[15:30:01] *** Quits: CookE[] (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[15:30:16] <siXy> soren: What's wrong with a simple CheckIP([]net.IP) then?
[15:30:46] <soren> siXy: What do you mean?
[15:30:48] <mrig> ac5tin: I have found the lectures by 'Uncle Bob' on SOLID principles particularly useful for understanding interfaces and inversion of control. This is a different level of abstraction from structs and perhaps something to consider also.
[15:31:17] *** Joins: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr)
[15:31:27] <siXy> soren: if it's not going to happen in the background, why do you need the channel in the first place? Why can't you just pass a slice of IPs to your checking function?
[15:31:46] <snappy> Sorry I was asking earlier, is it possible to do a type assertion on an anonymous struct? Here is an example https://play.golang.org/p/LAWvw4elajv -- I don't know why the type assertion fails, because the type assertion is to an identical type, which should succeed according to the go language reference.
[15:32:14] <soren> siXy: As I said, ipv6 is a pretty big namespace. Those slices could have octillions of elements.
[15:33:21] <soren> siXy: Configuration specifies a range of IP's. I need to find a free one from that range, so that I can assign it to a virtual machine.
[15:33:59] <siXy> soren: that doesn't explain why you think a channel would be better than a slice
[15:34:20] <soren> siXy: Ok, perhaps I'm missing.
[15:34:35] <aigoo> Why not a start address and an end address if it's a range?
[15:34:46] <siXy> snappy: because type assertions assert that it IS that type, whereas in this case you have a different type (although a type that's convertible into the type you ask for)
[15:34:47] <soren> That's what I have.
[15:34:52] <soren> And I need to find a free one in that range.
[15:35:23] *** Joins: egon_ (~egon@user/egon)
[15:36:01] <siXy> soren: And my question is why can't you have CheckIP([]net.IP{start, end})
[15:36:06] <siXy> No need for channels
[15:36:17] <siXy> or FindIP, if you prefer
[15:36:39] <snappy> siXy: it says identical types, which they are pointers with identical base types and the base types are slices with identical element types
[15:37:13] <aigoo> Finding a "free" one is almost impossible unless you have some way to guarantee it's not going to be taken from the moment you request it to the moment it becomes "used". Like a mutatable variable that needs a mutex.
[15:37:14] *** Quits: egon_ (~egon@user/egon) (Client Quit)
[15:37:18] <siXy> snappy: Your two raw types are different - they have identical definitons, but they have different scopes, and thus are different. You can _convert_ a to b, but cannot assert that a is b.
[15:37:28] <aigoo> Create a monitor that manages free IPs and request an IP from the monitor.
[15:37:43] <soren> siXy: I was hoping to have my IPRange type encapsulate the "iterate through a range" logic.
[15:38:08] <soren> I guess I can in a function that checks availability.
[15:38:46] <siXy> soren: yeah, go doesn't really work quite like that. Although beware of aigoo's point - there are obvious race conditions here.
[15:38:58] *** Joins: arcatech (~arcatech@user/arcatech)
[15:39:05] <snappy> i'm reading the go lang reference on type assertions, and it doesn't really explain how they're different types
[15:39:20] <soren> That's just not how it works. The component that handles configuration is separate from the component that actually knows what's in use.
[15:39:47] <snappy> More precisely, if T is not an interface type, x.(T) asserts that the dynamic type of x is <identical> to the type T. -- then if you click on what identical means, it lists a bunch of cases and going through those it seems like my types are identical
[15:40:33] <soren> And the latter doesn't actually *know*. It doesn't have a list or anything. But it can look up if a given IP is in use. And I need to pick an available IP from a range that could potentially have many more IP's than is feasible to pass around as a slice.
[15:40:36] <siXy> snappy: well, it's not a thing that generally comes up because people typically don't DO this ;) scope is a component of a type specification, but that's not explicitly called out every time the spec mentions the word type.
[15:41:53] *** Quits: links (~links@114.23.160.104) (Quit: Leaving)
[15:41:56] <siXy> soren: Your IP object can be a start/end pair, a cidr address block, whatever you want. that bit doesn't really matter. The point is that there's no need to deal with channels and goroutines if you don't want this to happen asynchronously.
[15:42:44] <soren> siXy: I'm not married to the idea of channels and goroutines. I was just hoping for a mechanism similar to Python generators.
[15:42:59] *** Quits: frost (~frost@59.71.241.190) (Quit: Connection closed)
[15:43:00] <soren> siXy: So something that acts mostly like a slice, but doesn't need to be allocated.
[15:43:39] <soren> siXy: And my first instinct was a channel.
[15:44:23] *** Joins: Xjs (~jannis@user/xjs)
[15:44:31] <soren> siXy: But adding a func (i *IPRange) FindAvailableIP(func IsAvailable(net.IP) bool) net.IP {}   sort of thing should do the trick, too.
[15:44:42] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[15:44:47] <snappy> yeah i honestly don't understand
[15:46:13] <siXy> soren: yeah that's much more reasonable. Although that construction makes the most sense if there's multiple ways you might pass in to determine if an IP is available.
[15:46:16] *** Joins: links (~links@114.23.160.104)
[15:46:46] <soren> siXy: Ok... What else would you suggest?
[15:48:20] <siXy> soren: FindAvailableIP(start, end net.IP) (net.IP, error) is what I'd go for if there's only one way of determining if an IP's available
[15:49:27] <siXy> If you want it to be pluggable, then yours is totally fine though.
[15:49:47] <soren> Cool.
[15:50:58] *** Joins: mickey6 (~user@user/mickey)
[15:51:23] <siXy> snappy: perhaps it'll help if I modify your example a little. https://play.golang.org/p/rf4YQ8Wmq3A - try running that, and it'll tell you what I was saying - the types come from different scopes, so are in fact different, even though the rest of the signature is the same.
[15:52:14] <siXy> snappy: However the real answer is honestly "Don't do this". Declaring the same type multiple times in different places is basically never what you want to do.
[15:52:47] <snappy> ah that's much clearer
[15:53:29] *** Quits: links (~links@114.23.160.104) (Quit: Leaving)
[15:53:46] *** Joins: links (~links@114.23.160.104)
[15:54:20] <snappy> well it kind of sucks because i just need to use this type as a throwaway/auxillary type in a function, so i have no need to export/define it in an outer scope, but when it comes to testing i have to mock the WriteData() method -- and well now i need to expose the type because of this scope issue
[15:54:40] <snappy> it's kind of ugly exposing the type just for testing in my opinion
[15:54:51] <siXy> You don't need to expose the type for testing.
[15:55:04] <siXy> Your test is in the same package, so doesn't need your types to be exported.
[15:55:15] <siXy> (or at least: it should be)
[15:55:19] *** Quits: mickey (~user@user/mickey) (Ping timeout: 252 seconds)
[15:55:35] <snappy> i had them as separate packages, i guess merging into same package is a compromise
[15:55:41] *** Joins: mickey (~user@user/mickey)
[15:56:09] <siXy> yeah unit tests should be in the same package as the code they're testing.
[15:56:12] <snappy> i normally use the export_test.go trick when i need to bridge the two packages
[15:56:23] <snappy> i strongly disagree with that
[15:56:38] <snappy> most if not all of the go stdlib uses separate packages when testing
[15:56:52] <siXy> well, you're welcome to disagree, but what you're doing there goes against the entire go ecosystem and wouldn't pass code review basically anywhere.
[15:57:05] <snappy> except in the go stdlib
[15:57:05] *** chilvers1 is now known as chilversc
[15:57:41] <snappy> which is probably the hardest to pass in terms of code review and central to the go ecosystems
[15:58:04] *** Quits: mickey6 (~user@user/mickey) (Ping timeout: 252 seconds)
[15:58:56] <snappy> but anyways... thanks for taking the time to explain this
[15:59:02] <siXy> integration tests belong in a different package (often foo_test), but not unit tests.
[15:59:10] *** Quits: dmathieu (~textual@pop.92-184-110-242.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:59:13] <siXy> that's the difference you're missing, I think
[15:59:49] <siXy> the stdlib has lots of integration tests, for good reasons, and those cannot live in the same package, as it's important that they *cannot* access anything private. But for unit tests it's wrong.
[16:00:39] <siXy> And mocking is a unit test thing, not an integration test thing.
[16:03:41] <snappy> Yet some tests do access private parts using the export_test.go idiom
[16:03:59] *** Quits: links (~links@114.23.160.104) (Quit: Leaving)
[16:05:26] <snappy> anwyay i heed what you're saying
[16:12:02] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 244 seconds)
[16:12:18] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[16:12:58] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[16:13:11] *** Quits: burningserenity (~burningse@102.129.153.84) (Ping timeout: 252 seconds)
[16:17:49] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:20:41] *** Joins: w0x12ef (~w0x12ef@111.63.14.116)
[16:21:14] *** Joins: Vukan (~drazen@46.235.100.65)
[16:22:17] *** Joins: yoonkn (~user@175.197.208.79)
[16:27:19] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[16:28:36] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:36:01] *** Quits: mickey (~user@user/mickey) (Ping timeout: 252 seconds)
[16:36:47] <beeza> so I am still on this, want to add test: https://github.com/C2FO/vfs/blob/master/backend/gs/fileSystem.go
[16:36:50] *** Joins: absc (~absc@37.162.40.39)
[16:38:09] <beeza> One option is to use http mocks, one option is to use http mock
[16:38:58] *** Quits: Vukan (~drazen@46.235.100.65) (Ping timeout: 268 seconds)
[16:39:05] <beeza> and other is replay
[16:43:50] *** Joins: Xjs (~jannis@user/xjs)
[16:46:16] *** Joins: w0x12ef_ (~w0x12ef@106.37.74.209)
[16:46:17] *** Joins: SebastianM (~seba@user/sebastianm)
[16:46:19] *** Joins: impermanence (~impermane@72-50-218-169.fttp.usinternet.com)
[16:46:45] *** Quits: absc (~absc@37.162.40.39) (Read error: Connection reset by peer)
[16:46:59] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[16:47:04] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[16:47:35] *** Joins: absc (~absc@37.162.40.39)
[16:49:29] *** Quits: w0x12ef (~w0x12ef@111.63.14.116) (Ping timeout: 252 seconds)
[16:51:46] *** Joins: yangby (~secret@115.199.97.206)
[16:51:48] *** Joins: Snyp (~rksht@49.207.192.68)
[16:52:59] *** Joins: dmathieu (~textual@pop.92-184-110-47.mobile.abo.orange.fr)
[16:56:20] *** Joins: jannis (~jannis@user/xjs)
[16:56:47] <beeza> not sure which to do
[16:56:55] <beeza> Maybe I should start with replay
[16:58:15] *** Joins: w0x12ef__ (~w0x12ef@111.63.14.116)
[16:59:23] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 272 seconds)
[17:01:47] *** Quits: w0x12ef_ (~w0x12ef@106.37.74.209) (Ping timeout: 268 seconds)
[17:02:20] *** Joins: Xjs (~jannis@user/xjs)
[17:03:00] *** Quits: jannis (~jannis@user/xjs) (Read error: Connection reset by peer)
[17:05:33] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[17:06:01] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:06:15] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:09:18] *** Quits: dmathieu (~textual@pop.92-184-110-47.mobile.abo.orange.fr) (Ping timeout: 264 seconds)
[17:11:41] *** dan- is now known as can-
[17:12:51] *** Joins: l2dy (~l2dy@user/l2dy)
[17:13:56] *** Joins: shka (~herr@109.231.62.239)
[17:14:35] *** Quits: l2dy_ (~l2dy@user/l2dy) (Ping timeout: 272 seconds)
[17:15:08] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:15:44] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Client Quit)
[17:16:51] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:18:05] *** can- is now known as dan-
[17:24:08] *** Quits: w0x12ef__ (~w0x12ef@111.63.14.116) (Ping timeout: 252 seconds)
[17:29:42] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[17:33:24] <mrig> Is there a way to print out a rune as its character representation in delve?
[17:35:53] <mrig> well this is an xy question, I am trying to understand why my code does not swap out the characters when a rune slice is an odd number of runes in length and am using delve to investigate why this might be. Here is my code : https://play.golang.org/p/DZGRwVAt7HR
[17:36:31] <mrig> In passing am trying so see if it is possible to display runes as their glyphs in delve.
[17:37:20] <mrig> In the example the 2 is move to the end of the string in only the first case; Why is this so?
[17:37:54] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:38:24] *** Quits: qilx (~quassel@62.201.21.8) (Read error: Connection reset by peer)
[17:39:33] <fizzie> I mean, I'm not sure how useful it is to try to analyze the behavior of sort when you have a blatantly incorrect Less operation that considers all runes equal.
[17:40:13] <fizzie> sort.Sort isn't stable (unlike sort.Stable), so any order out of the call is a valid one.
[17:41:55] <fizzie> (And I don't even know what's up with that swap.)
[17:41:58] <mrig> I am answering question 7.10 in gopl, I had not thought to consider using sort.stable; But am still none the wiser as to why or how to understand what is happening here.
[17:42:07] <mrig> the swap is perfectly fine.
[17:42:28] <mrig> standard palindrome stuff, so far as I am aware.
[17:44:31] *** Joins: dmathieu (~textual@pop.92-184-110-36.mobile.abo.orange.fr)
[17:45:41] *** Joins: siika_ (~siika@139.226.50.205)
[17:46:02] <mrig> This version has the question : https://play.golang.org/p/bs5bYW39m_x
[17:46:53] <mrig> true that I've not really understood what is being suggested by last sentence of the question; I can take things rather literally at time.
[17:46:55] *** Quits: siika__ (~siika@58.246.101.34) (Ping timeout: 268 seconds)
[17:47:15] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[17:47:29] <fizzie> Okay, I guess if your Less returns the constant `true`, it's true that Swap can't possibly be inconsistent with it, but I really don't understand why you'd expect a call to sort.Sort do any specific operation on your []rune, given those definitions of Less and Swap.
[17:47:47] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 252 seconds)
[17:49:32] <mrig> Why not, it does in the first instance, but not the second; This is what is a little puzzling.
[17:49:34] <mrig> ?
[17:50:10] <fizzie> Because the operation that sort.Sort does is defined in terms of the order implied by Less, and that implementation of Less implies no particular order.
[17:50:26] <fizzie> The way I read that question is, your implementation of `func IsPalindrome(s sort.Interface) bool` is not expected to call sort.Sort or any other function in the sort package; the point is to illustrate that other things can make use of the same interface.
[17:50:34] *** Joins: Xjs (~jannis@user/xjs)
[17:51:44] *** Quits: dmathieu (~textual@pop.92-184-110-36.mobile.abo.orange.fr) (Ping timeout: 268 seconds)
[17:52:18] *** Joins: hntrmrrs (uid49@id-49.highgate.irccloud.com)
[17:52:35] <fizzie> In other words, https://play.golang.org/p/QCFz42Iz205 is what I'd've expected as the answer (sorry if it's a "spoiler").
[17:52:47] *** Joins: mickey (~user@user/mickey)
[17:55:56] <mrig> I think I've just seen the error of my interpretation that I can get an answer by using the code in the last sentence without calling sort; I imagine this is what you've linked, thank you, I will have a crack at this and then take a look.
[17:56:04] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (Quit: WeeChat 2.8)
[17:56:37] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[17:57:06] *** Joins: icy (~icy@user/icy)
[17:58:54] *** Quits: jcajka_ (~jcajka@static-84-42-180-92.net.upcbroadband.cz) (Quit: Leaving)
[18:00:36] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:00:58] *** Joins: c10l (~c10l@89.34.167.207)
[18:01:19] *** Quits: impermanence (~impermane@72-50-218-169.fttp.usinternet.com) (Quit: leaving)
[18:01:35] *** Joins: Torr (~Torr@user/torr)
[18:07:10] *** Joins: X-Scale` (~ARM@24.117.108.93.rev.vodafone.pt)
[18:07:11] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[18:07:32] *** Joins: LiftLeft (~LiftLeft@154.21.28.215)
[18:07:41] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[18:08:06] *** Quits: src (~src@user/src) (Quit: leaving)
[18:08:23] *** Quits: X-Scale (~ARM@83.223.233.159) (Ping timeout: 268 seconds)
[18:08:40] <mrig> Thank you fizzie, I had the same but forgot to reset the Sort function; Nothing that a little peek did not solve.
[18:09:47] *** Joins: src (~src@user/src)
[18:15:49] *** Joins: YZuHoJfvtIiE (~YZuHoJfvt@88.155.57.123)
[18:15:49] *** Quits: YZuHoJfvtIiE (~YZuHoJfvt@88.155.57.123) (Client Quit)
[18:16:26] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[18:20:33] *** Joins: Advant (Advant@user/advant)
[18:22:28] <Advant> I'm and trying to use net/http/cookieJar, but when ever I reference the type Jar, I'm getting a compile error that "underfined: Jar".  The type is Jar, so I don't understand why it isn't resolving
[18:23:27] <siXy> Advant: suggest showing what you're doing on play.golang.org
[18:25:22] *** Joins: dmathieu (~textual@pop.92-184-110-134.mobile.abo.orange.fr)
[18:27:49] <Advant> siXy:  https://play.golang.org/p/ElC8ezNDuOh   this won't compile, and not sure why
[18:29:59] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[18:30:02] <siXy> Advant: needs to be *cookiejar.Jar
[18:30:23] <Advant> doh, thanks
[18:32:01] <fizzie> var binks cookiejar.Jar  // sorry, couldn't help it
[18:32:20] <fizzie> (Forgot the *. :/)
[18:32:46] *** Joins: ecfUzOohvNxo (~ecfUzOohv@88.155.57.123)
[18:32:46] *** Quits: ecfUzOohvNxo (~ecfUzOohv@88.155.57.123) (Client Quit)
[18:33:00] *** Joins: fputs (~evan@67.59.83.166)
[18:33:36] *** Quits: dmathieu (~textual@pop.92-184-110-134.mobile.abo.orange.fr) (Ping timeout: 244 seconds)
[18:34:07] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[18:34:20] *** Joins: TCZFxlAVYRLr (~TCZFxlAVY@88.155.57.123)
[18:34:20] *** Quits: TCZFxlAVYRLr (~TCZFxlAVY@88.155.57.123) (Client Quit)
[18:34:26] *** Joins: masoudd (~masoudd@user/masoudd)
[18:36:30] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[18:36:50] *** Joins: kghjePPcArtl (~kghjePPcA@88.155.57.123)
[18:36:50] *** Quits: kghjePPcArtl (~kghjePPcA@88.155.57.123) (Client Quit)
[18:38:01] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[18:38:06] *** Quits: menace (~someone@user/menace) (Ping timeout: 268 seconds)
[18:42:35] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[18:42:54] *** Joins: masoudd (~masoudd@user/masoudd)
[18:45:43] *** Joins: arcatech (~arcatech@user/arcatech)
[18:47:29] *** Joins: anorain (~user@178.46.76.95)
[18:48:17] *** Joins: g2anj (~v@221.142.186.101)
[18:48:22] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[18:48:44] *** Joins: Vukan (~drazen@46.235.100.65)
[18:49:42] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:51:02] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 252 seconds)
[18:52:20] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:52:42] *** Joins: Garb0 (~Garb0@user/garb0)
[18:55:32] *** Joins: arinov_ (~arinov@31.142.92.143)
[18:56:20] *** Joins: andlabs (~andlabs@172.58.235.176)
[18:58:24] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 244 seconds)
[18:58:31] *** Joins: andlabs_ (~andlabs@2607:fb90:f80c:a459:4492:3108:ae95:39a7)
[18:58:37] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[19:01:22] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[19:01:34] *** Joins: masoudd (~masoudd@user/masoudd)
[19:01:43] *** Joins: andlabs__ (~andlabs@172.58.235.95)
[19:02:06] *** Quits: andlabs (~andlabs@172.58.235.176) (Ping timeout: 264 seconds)
[19:02:51] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[19:04:30] *** Quits: andlabs_ (~andlabs@2607:fb90:f80c:a459:4492:3108:ae95:39a7) (Ping timeout: 264 seconds)
[19:05:12] *** Joins: andlabs (~andlabs@2607:fb90:f805:9035:edcf:3a48:bdbe:a722)
[19:07:45] *** Joins: andlabs_ (~andlabs@172.58.238.239)
[19:08:42] *** Quits: andlabs__ (~andlabs@172.58.235.95) (Ping timeout: 264 seconds)
[19:09:24] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[19:09:39] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[19:09:42] *** Joins: andlabs__ (~andlabs@2607:fb90:f805:8077:8cd0:940e:c189:9e2d)
[19:09:46] *** Quits: fputs (~evan@67.59.83.166) (Quit: WeeChat 3.1)
[19:09:54] *** Quits: andlabs (~andlabs@2607:fb90:f805:9035:edcf:3a48:bdbe:a722) (Ping timeout: 240 seconds)
[19:12:52] *** Quits: andlabs_ (~andlabs@172.58.238.239) (Ping timeout: 244 seconds)
[19:18:50] *** Joins: fm (~fm@user/fm)
[19:23:31] *** Joins: fputs (~evan@67.59.83.166)
[19:24:51] *** Joins: Xjs (~jannis@user/xjs)
[19:25:10] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Ping timeout: 250 seconds)
[19:25:58] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[19:27:30] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[19:32:56] *** Joins: gregf (~gregf@user/gregf)
[19:36:34] *** Quits: Vukan (~drazen@46.235.100.65) (Ping timeout: 268 seconds)
[19:40:10] *** Joins: andlabs (~andlabs@172.58.238.146)
[19:41:54] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[19:42:30] *** Joins: andlabs_ (~andlabs@2607:fb90:f806:7ae4:657b:ec2b:838:9202)
[19:43:06] *** Quits: andlabs__ (~andlabs@2607:fb90:f805:8077:8cd0:940e:c189:9e2d) (Ping timeout: 240 seconds)
[19:44:25] *** Joins: andlabs__ (~andlabs@172.58.235.193)
[19:44:29] *** Joins: noxim (~noxim@user/noxim)
[19:45:49] *** Quits: andlabs (~andlabs@172.58.238.146) (Ping timeout: 268 seconds)
[19:46:54] *** Joins: andlabs (~andlabs@2607:fb90:f800:53d9:3457:a3fc:cca3:8443)
[19:47:38] *** Joins: fef (~thedawn@user/thedawn)
[19:48:29] *** Quits: andlabs_ (~andlabs@2607:fb90:f806:7ae4:657b:ec2b:838:9202) (Ping timeout: 272 seconds)
[19:48:40] *** Parts: anorain (~user@178.46.76.95) ()
[19:49:11] *** Joins: andlabs_ (~andlabs@172.58.235.186)
[19:50:22] *** Joins: w0x12ef__ (~w0x12ef@60.10.194.47)
[19:50:45] *** Quits: andlabs__ (~andlabs@172.58.235.193) (Ping timeout: 268 seconds)
[19:51:20] *** w0x12ef__ is now known as w0x12ef
[19:52:06] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[19:52:43] *** Quits: andlabs (~andlabs@2607:fb90:f800:53d9:3457:a3fc:cca3:8443) (Ping timeout: 268 seconds)
[19:53:15] *** imm__ is now known as imm_
[19:53:27] *** Joins: andlabs (~andlabs@2607:fb90:f80d:e30b:3515:c95:a5ff:8631)
[19:53:48] *** Joins: w0x12ef_ (~w0x12ef@124.126.15.211)
[19:54:58] *** Quits: w0x12ef_ (~w0x12ef@124.126.15.211) (Remote host closed the connection)
[19:55:22] *** Joins: w0x12ef_ (~w0x12ef@106.37.74.209)
[19:55:38] *** Quits: w0x12ef_ (~w0x12ef@106.37.74.209) (Client Quit)
[19:56:03] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[19:56:06] *** Quits: absc (~absc@37.162.40.39) (Quit: Leaving.)
[19:56:29] *** Joins: andlabs__ (~andlabs@172.58.235.169)
[19:56:46] *** Quits: andlabs__ (~andlabs@172.58.235.169) (Client Quit)
[19:57:02] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Ping timeout: 268 seconds)
[19:57:02] *** Quits: andlabs_ (~andlabs@172.58.235.186) (Ping timeout: 268 seconds)
[19:59:42] *** Quits: andlabs (~andlabs@2607:fb90:f80d:e30b:3515:c95:a5ff:8631) (Ping timeout: 264 seconds)
[20:00:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[20:01:36] <src> given a method: (r *sometype) run(c chan []CustomMessageType)
[20:01:49] <src> and in that method: somevar := c
[20:01:49] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:01:53] <src> what does that do?
[20:01:55] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[20:03:04] *** Joins: treethought (treethou@138.68.49.251)
[20:03:18] <src> does it read from the channel? or is somevar now of type chan []CustomMessageType but zero value? or is somevar now a pointer to the same channel?
[20:05:33] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[20:07:25] <fizzie> It has that type, and refers to the same channel; you could arguably call it a "pointer" semantically, but that might be a little confusing word to use, because you can (though I imagine you hardly ever do) have an *actual* pointer to a channel too.
[20:07:57] *** Joins: arcatech (~arcatech@user/arcatech)
[20:07:58] <fizzie> (It doesn't read from the channel -- that would be `somevar := <-c` instead.)
[20:09:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[20:09:08] *** Quits: Snyp (~rksht@49.207.192.68) (Ping timeout: 252 seconds)
[20:09:20] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[20:10:18] *** Joins: treethought (treethou@138.68.49.251)
[20:10:19] <fizzie> As you can see in https://play.golang.org/p/8ZIGJW7MvZ- you can use `ch` and `ch2` interchangeably.
[20:13:01] <src> https://play.golang.org/ this is the test case I came up with
[20:13:05] <src> confused me even more
[20:13:08] <src> will look at yours
[20:13:15] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:13:46] *** Quits: Ergo^ (~ergo@91.238.59.144) (Client Quit)
[20:14:19] *** Quits: fputs (~evan@67.59.83.166) (Quit: WeeChat 3.1)
[20:14:38] <sztanpet> you didnt actually share anything
[20:15:08] *** Joins: KettleMan (~kttl_crn@208.75.113.3)
[20:15:39] <src> oops https://play.golang.org/p/j5a_M1A6vIJ
[20:15:55] <src> fizzie: k, your code makes things clear, thanks
[20:17:23] <src> k, my test case is stupid...
[20:19:43] <src> k, this is more accurate but same result https://play.golang.org/p/IdNv44PKubE
[20:20:28] *** Quits: fbrx (~fbrx@user/fbrx) (Ping timeout: 268 seconds)
[20:21:58] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[20:22:30] *** Joins: dmathieu (~textual@pop.92-184-110-134.mobile.abo.orange.fr)
[20:22:55] *** Joins: treethought (treethou@138.68.49.251)
[20:27:07] *** Quits: MD87 (chris@user/md87) (Quit: Bye!)
[20:30:03] *** Joins: MD87 (~MD87@user/md87)
[20:33:52] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[20:34:45] *** Joins: treethought (treethou@138.68.49.251)
[20:35:02] *** Joins: alienwarlock (~warl@2601:647:5e80:45bc:7c3e:20ad:36c:f74e)
[20:35:02] *** Quits: alienwarlock (~warl@2601:647:5e80:45bc:7c3e:20ad:36c:f74e) (Changing host)
[20:35:02] *** Joins: alienwarlock (~warl@user/warl)
[20:37:24] *** Quits: a1paca_ (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[20:38:13] *** Joins: a1paca (~a1paca@user/a1paca)
[20:40:46] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[20:41:01] *** Joins: jinie (~jimmy@188.114.173.37)
[20:41:14] *** Joins: fputs (~evan@67.59.83.166)
[20:45:06] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:d9fd:580a:1517:5e5c)
[20:48:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:51:04] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:53:06] *** Joins: esro (~esro@91.231.45.1)
[20:55:25] *** Joins: jkl (~jkl@12.216.111.80)
[20:58:02] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[20:58:34] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[20:58:44] *** Joins: arcanez (~arcanez@warpedreality.org)
[21:06:09] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[21:06:23] *** Joins: arcanez (~arcanez@warpedreality.org)
[21:06:25] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[21:06:38] *** Joins: arcanez (~arcanez@warpedreality.org)
[21:06:43] *** Quits: dmathieu (~textual@pop.92-184-110-134.mobile.abo.orange.fr) (Ping timeout: 268 seconds)
[21:10:29] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:12:46] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[21:13:59] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[21:14:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:16:38] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:16:42] *** Joins: dmathieu (~textual@pop.92-184-110-210.mobile.abo.orange.fr)
[21:21:21] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[21:23:04] *** Quits: jinie (~jimmy@188.114.173.37) (Ping timeout: 244 seconds)
[21:23:55] *** Joins: goldfish (~goldfish@user/goldfish)
[21:30:37] *** Joins: pepee (~user@user/pepee)
[21:31:33] *** Joins: ewintr (~ewintr@89.205.137.177)
[21:34:12] *** Joins: daveed (~ride@user/daveed)
[21:38:10] *** Quits: acidfu- (~nicolasbo@96.125.207.152) (Ping timeout: 268 seconds)
[21:43:07] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[21:44:15] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 244 seconds)
[21:47:45] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[21:49:27] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 272 seconds)
[21:53:43] <kyshoc> hey folks, I ran into some unexpected behavior when copying structs from a map into an array (as pointers). Example is here, I have a couple of questions inline: https://play.golang.org/p/sxDwHyambjr
[21:55:19] *** X-Scale` is now known as X-Scale
[21:57:56] *** Joins: seebs (~seebs@24.196.59.174)
[21:58:11] *** Joins: agrawal-d (~agrawal-d@2405:201:300e:9a5d:ed27:6f50:16bc:674f)
[21:59:50] *** Quits: agrawal-d (~agrawal-d@2405:201:300e:9a5d:ed27:6f50:16bc:674f) (Quit: Client closed)
[22:01:27] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[22:04:23] <mrig> kyshoc: when you have a value that is made inside of a range statement like that, it is a pointer that points to some memory that is reused each iteration, as such you need to generate another instance inside the statement so as not to have all the references pointing to the same object; That is why you are getting the same reference in the slice.
[22:04:25] <mrig> https://play.golang.org/p/v1YppVBSxFW
[22:05:51] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:06:08] <sztanpet> kyshoc https://golang.org/doc/faq#closures_and_goroutines
[22:07:09] *** Joins: kulak (~kulak@user/kulak)
[22:08:17] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:08:32] <kyshoc> mrig: thanks! wasn't aware that range makes that optimization of reusing a single location in memory, but makes sense now that you call it out
[22:09:29] *** Joins: kulak (~kulak@user/kulak)
[22:11:25] *** Quits: dmathieu (~textual@pop.92-184-110-210.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:52] <mrig> yes it is pretty logical once the penny drops, I think that your first observation works when you use references rather than structs in the map is because then inside the range the memory is storing a reference each time and it is that reference that is then put into the slice and not the actual struct; I'm not clear on this though, that is a best guess.
[22:17:23] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:18:09] *** Joins: kulak (~kulak@user/kulak)
[22:19:37] *** Quits: sgen (~sgen@142.186.76.30) (Remote host closed the connection)
[22:20:52] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:21:22] *** Joins: kulak (~kulak@user/kulak)
[22:23:57] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:24:38] *** Joins: kulak (~kulak@user/kulak)
[22:25:45] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (Quit: Quit)
[22:25:59] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[22:28:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:28:19] *** Joins: dr0n (~nabromov@217.138.202.100)
[22:28:44] *** Joins: fef (~thedawn@user/thedawn)
[22:30:19] *** Quits: ewintr (~ewintr@89.205.137.177) (Quit: IRC for Sailfish 0.9)
[22:30:35] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Quit: Leaving)
[22:30:46] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[22:32:17] *** Joins: gggp (~textual@36.112.135.215)
[22:33:34] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:33:53] *** Joins: kulak (~kulak@user/kulak)
[22:35:06] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 264 seconds)
[22:35:30] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 240 seconds)
[22:41:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:42:49] *** Joins: Vukan (~drazen@46.235.100.65)
[22:45:09] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Remote host closed the connection)
[22:46:33] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[22:47:15] *** Joins: kulak (~kulak@user/kulak)
[22:53:25] *** Quits: Vukan (~drazen@46.235.100.65) (Ping timeout: 272 seconds)
[22:56:21] *** Quits: gggp (~textual@36.112.135.215) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:57:06] *** Parts: KettleMan (~kttl_crn@208.75.113.3) ()
[23:01:30] <dr0n> Hello all, is this a valid syntax:
[23:01:39] <dr0n>  if len(str) == 0 && strings.HasPrefix(str, "0") {
[23:01:41] <dr0n>   return false
[23:02:04] <dr0n> if the len of the string is just one symbol (1) and it begins with 0 - then return false
[23:02:11] <dr0n> thank you in advance, and sorry for the basic question.
[23:02:52] <src> dr0n: len(str) is the length of the string, it has to be 0, ""
[23:03:05] <pztrn> you need || I think
[23:03:33] <dr0n> sorry, maybe I need to be more clear what I am trying to achieve
[23:03:42] <dr0n> I have a test case, which might return a 0 in the string
[23:03:57] <dr0n> so if the lenght of that string only contains 0; i need to return false
[23:03:57] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:04:07] <dr0n> sorry if I wasn't clearer with my ask
[23:04:14] <morgan> can't you just compare the string to "0" then
[23:04:33] <dr0n> pztrn:  if I do || - this will mean 'or' i need AND
[23:04:38] <dr0n> which I think it's &&
[23:04:46] <src> if str == "0" {} ?
[23:04:52] <pztrn> then your statement makes no sense at all
[23:04:54] <fizzie> The length of a string that contains just "0" is 1, not 0.
[23:05:11] <ikke> If the lenth is 0, it cannot have a prefix
[23:05:12] <dr0n>         if len(str) == 1 && strings.HasPrefix(str, "0") {
[23:05:14] <dr0n>                 return false
[23:05:16] <dr0n>         }
[23:05:19] <dr0n> so, I think that should do?
[23:05:36] <fizzie> You could do that, but as others have suggested that's just a more complicated way of writing `if str == "0" { ... }`.
[23:05:39] <ikke> dr0n: Any reason you are explicitly testing for the length?
[23:06:15] <dr0n> ikke: this is what it came to my mind
[23:06:24] <src> dr0n: https://play.golang.org/p/QpRj7TVcny8
[23:06:28] <ikke> dr0n: look at what fizzie suggested
[23:06:46] <dr0n> no particular reason; maybe.. i thought about the lenght because I have a test script that runs multiple samples against my code
[23:07:06] <dr0n> and it broke when it was running against a single character which was zero
[23:07:10] <ikke> If you are checking for a prefix, you do not check the length
[23:07:27] <ikke> if the length matters, and is equal to the prefix you are testing, you can just compare
[23:07:49] <src> that's what she said
[23:07:52] <src> sorry...
[23:07:55] <dr0n> ikke:  how would you describe an if statement, which only matches anything that starts with zero, and it's only character long?
[23:08:06] <ikke> `if str == "0" { ... }`.
[23:08:09] <dr0n> src:  just checking it
[23:08:11] <ikke> like fizzie suggested
[23:08:20] <morgan> but "anything that starts with 0 and is only one character long" can only be the string "0"
[23:08:44] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[23:09:41] *** Joins: SincereFox (uid337158@user/sincerefox)
[23:09:43] <dr0n> morgan:  I believe so
[23:09:56] <dr0n> got you guys!
[23:10:00] <dr0n> thank you
[23:10:10] <ikke> it's a fact
[23:10:30] <ikke> There cannot be any other value that matches those condtions
[23:14:04] <src> I'm having trouble fully getting this and it's hard to formulate it as a short question https://play.golang.org/p/PEzqviO5HTu I get that case toEarth1 <- buffered won't happen it toEarth1 is made to be nil, but what happens if bufferd is an empty slice and I try to put it into the channel?
[23:14:12] <src> I suspect it's guarding against deadlock?
[23:15:00] <A_Dragon> I think that just explodes with a runtime panic if you send to toearth1
[23:16:21] <seebs> why? a nil slice is valid
[23:16:25] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[23:16:54] <src> program seems to work if I comment out the nil assignement in case of len(buffer) == 0
[23:16:57] <seebs> so what's happening is, in the inner loop, if you have a non-nil buffer, it will send things to the toEarth1 channel.
[23:17:28] <seebs> if you don't, we set toEarth1 to nil, and a write to a nil channel can't happen, so that side of the select can't happen, so it will just wait until a message comes in.
[23:17:53] <seebs> the idea is, we want to either append messages to our buffer (if sending is delayed), or send the buffer, but there's no point in sending an empty buffer.
[23:18:33] <seebs> if you comment that out, you'll probably send a lot of empty buffers, which are probably ignored but also probably costing a lot of CPU time
[23:18:44] <ikke> what is the reasoning behind toEarth1 := toEarth
[23:19:06] <src> as to not disturb toEarth I guess
[23:19:10] <ikke> right
[23:19:59] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:20:11] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:20:43] <src> I finished this programming book and had no huge problems, and now I am having so much trouble understanding the suggested solution to the last task... wonder if it's meant to be confusing or I am just *self-censored*
[23:21:07] <src> seebs: thanks I will go through your explanation very carefully now
[23:21:40] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[23:23:45] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[23:24:23] <A_Dragon> seebs: toearth is a channel
[23:24:50] <A_Dragon> ohwait does select just not write to nil channels?
[23:24:54] <seebs> right
[23:25:07] <A_Dragon> I thought i'd try and explode violently
[23:25:11] <seebs> so if you try to put an empty slice in a channel, that's fine, and if you try to write to a nil channel nothing happens
[23:25:32] *** Joins: jkl (~jkl@12.216.111.80)
[23:25:45] <A_Dragon> oh I must have forgotten that semantic I thought nil channel writes paniced
[23:25:47] <src> a nil channel though is different from the zero value of a channel then?
[23:26:48] <seebs> no
[23:26:52] <A_Dragon> oh it doesn't just ignore it it just hangs, cool okay
[23:26:53] <A_Dragon> TIL
[23:26:55] <seebs> that's the zero value of a channel
[23:27:07] <A_Dragon> and because select it can hang forever
[23:27:10] <seebs> nil is the zero value of every nil-capable type
[23:27:42] <src> k... map, channel, interface, slice, pointer, function
[23:28:01] <fizzie> A nil channel is different from a closed channel, though, even though both are in some sense "special" channels.
[23:28:42] <fizzie> ("A send on a closed channel proceeds by causing a run-time panic. A send on a nil channel blocks forever. -- Receiving from a nil channel blocks forever. A receive operation on a closed channel can always proceed immediately, yielding the element type's zero value after any previously sent values have been received.")
[23:28:54] <fizzie> So if you thought a write caused a panic, you probably were thinking of a closed channel.
[23:30:03] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Quit: Gateway shutdown)
[23:30:13] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[23:30:57] <fizzie> Or possibly a nil map, since assignment to an element of a nil map panics too. :)
[23:32:38] *** Quits: zutt (~zutt@user/zutt) (Quit: nein)
[23:33:16] *** Quits: acid (~acid@user/acid) (Ping timeout: 244 seconds)
[23:33:37] *** Joins: acid (~acid@user/acid)
[23:34:04] <src> I finally get it
[23:34:08] *** Quits: cultpony (~cultpony@user/cultpony) (Quit: ZNC 1.8.2 - https://znc.in)
[23:34:20] *** Joins: cultpony (~cultpony@user/cultpony)
[23:35:42] *** Joins: SebastianM (~seba@user/sebastianm)
[23:37:27] *** Joins: zutt (~zutt@user/zutt)
[23:39:03] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:39:54] *** Quits: arinov_ (~arinov@31.142.92.143) (Ping timeout: 264 seconds)
[23:40:46] *** Quits: zutt (~zutt@user/zutt) (Client Quit)
[23:41:02] *** Quits: gregf (~gregf@user/gregf) (Quit: WeeChat 3.1)
[23:41:21] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:41:28] *** Joins: mickey8 (~user@user/mickey)
[23:41:32] *** Quits: acid (~acid@user/acid) (Ping timeout: 244 seconds)
[23:42:08] *** Joins: acid (~acid@user/acid)
[23:43:59] *** Quits: m-kad (~quassel@2a02:c207:2043:4525::1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:45:10] *** Joins: jinie (~jimmy@188.114.173.37)
[23:46:38] *** Joins: zutt (~zutt@user/zutt)
[23:47:10] *** Joins: chrysanthematic (~chrysanth@109.70.150.245)
[23:48:15] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 244 seconds)
[23:49:21] *** Joins: m-kad (~quassel@2a02:c207:2043:4525::1)
[23:49:39] *** Joins: burningserenity (~burningse@102.129.153.36)
[23:53:23] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[23:55:51] *** Joins: Ohlov38951749035 (~Ohlov3@dyndsl-085-016-109-147.ewe-ip-backbone.de)
[23:57:15] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[23:59:28] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
