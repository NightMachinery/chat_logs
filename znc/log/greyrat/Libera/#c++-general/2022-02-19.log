[00:00:04] *** Joins: Guest7463 (~Guest@host210.181-14-186.telecom.net.ar)
[00:02:28] *** Joins: teepee (~teepee@openscad/teepee)
[00:06:55] *** Joins: causative (~halberd@user/causative)
[00:13:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:16:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:23:44] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:35de:ef41:b031:b2ea)
[00:23:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:35de:ef41:b031:b2ea) (Changing host)
[00:23:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:27:48] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[00:30:16] *** Quits: magla (~gelignite@55d44f7e.access.ecotel.net) (Quit: Stay safe!)
[00:30:22] *** Joins: Simplar_ (~Simplar@188.163.93.241)
[00:31:55] *** Quits: Simplar (~Simplar@188.163.93.241) (Ping timeout: 256 seconds)
[00:33:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:33:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:36:37] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[00:36:41] *** Quits: Simplar_ (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[00:39:55] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a181:b2e9:7b96:4a6e)
[00:44:57] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[00:51:30] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[00:51:46] *** Joins: noarb- (~noarb@user/noarb)
[00:52:19] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[00:59:29] *** Joins: noarb (~noarb@user/noarb)
[01:00:52] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 272 seconds)
[01:02:29] *** Joins: chris64 (~chris@user/chris64)
[01:04:09] <evangeline> MaddHatter, thank you, I've only seen your response now. So basically a class instance can be made constexpr if all of the inputs passed to contructor as well as all members variables of a class are constexpr ?
[01:07:09] *** Joins: markong (~kvirc@213.146.188.203)
[01:07:10] <yolo> just learnt if you have lots of small heap memories, and you need exit the process, one option for efficiency is that you don't free them, just exit directly and let the OS collect them. I was not aware of that linux is itself a heap garbage-collector and is quite efficient?
[01:08:01] <yolo> where is the said memleak then? i always thought if you don't delete|free you leak memory
[01:08:20] <xkoncek> it is more complicated
[01:08:39] <xkoncek> when a c++ program shuts down, it recursively calls all destructors
[01:09:12] *** Parts: xisop (~xisop@bnull.net) ()
[01:09:25] <xkoncek> this may mean that the program recursively traverses all you objects and the data structures their own in a well-specified destruction order
[01:09:50] <Guest7463> what about the... manual deletion?
[01:09:53] <xkoncek> if all your program does, is allocate memory, then linux will collect it faster
[01:10:20] *** ik is now known as kleiner
[01:10:25] *** kleiner is now known as ik
[01:10:31] <xkoncek> but your objects's destructors can also close sockets, or do more complicated operations
[01:11:10] <xkoncek> i am not aware of situations where i would be concerned about the speed of program shutdown
[01:11:11] <Guest7463> ah, built destructors, good
[01:11:56] <xkoncek> for example, shared_ptrs will definitely be correctly destroyed slower than if linux were just to reap the memory
[01:12:12] <ville> yolo: all modern systems reclaim memory, and other resources, when a process exits
[01:12:53] <xkoncek> open files may not be flushed (but i have not encountered this in practice)
[01:12:55] <ville> yolo: but yes technically it's a leak and tooling will report it as such by default
[01:14:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:14:24] <xkoncek> anyway, the c++ standard specifies the exact order of destruction of object that has to be followed, this is why it would be slower
[01:14:36] <Guest7463> btw, the "don't use too much C++ pointers because it is dangerous" is a lie, right?
[01:14:49] <xkoncek> it depends on context
[01:14:53] <ville> what are "c++ pointers"?
[01:15:00] <xkoncek> c++ can be used in too many very different ways
[01:15:06] <LordKalma> this book says "1024-point DFTs can now be performed in a few seconds on home computers". I think they are wrong by couple orders of magnitude haha
[01:15:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[01:15:29] <Guest7463> it is supposed that a good developer knows how to manage pointers; simple. I never understood that affirmation.
[01:16:05] <xkoncek> pointers are just fine if you know that references / smart pointers will not do what you want
[01:16:34] <yolo> i saw one scenario to just exit|abort|terminate: high performance servers that holds lots of small caches in heap|disk need a fast reboot
[01:16:48] <xkoncek> pointers are especially useful when accessing arrays, where you just use native C syntax
[01:16:54] <Guest7463> ville: in comparison to, in example, Java, which doesn't have real pointers and has garbage collector
[01:17:04] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a181:b2e9:7b96:4a6e) (Read error: Connection reset by peer)
[01:17:22] <yolo> c++ has the known "lots of dtors need to run at closing time" thing but in practice it might be rare
[01:17:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:18:07] <xkoncek> java runs in a very different run time than c++
[01:18:16] <xkoncek> *runtime environment
[01:18:56] <Guest7463> pointers are used on lists too
[01:19:29] <Guest7463> and on passing values by reference (modifiable)
[01:19:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:19:48] <yolo> raw pointer that is
[01:20:05] <ville> Guest7463: well... not much can be said about that as it's rather unspecific. as with anything don't overuse it and don't force its use into situations where it doesn't fit
[01:20:18] <Guest7463> normal pointer; I guess Java invented the non-normal pointer
[01:21:14] <Guest7463> at the time Java became famous, C/C++ was being attacked by saying those things
[01:21:21] <ville> Guest7463: the only thing that is pass-by-reference is references in c++. pointers are pass-by-value. it's just happens that it's the pointer that gets copied
[01:21:21] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:50] <Guest7463> (they were always silly argumemts for me, as well as I don't like Java)
[01:22:16] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[01:23:43] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:25:59] <Guest7463> when you pass by refernce you need a pointer to receive it, iirc
[01:26:14] <Guest7463> sorry, I am a bit forgotten
[01:36:49] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[01:36:53] <relipse> Hi
[01:37:03] *** Joins: peoliye (~peoliye@205.251.233.52)
[01:37:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:37:18] <relipse> Can I share a game I coded in c++
[01:38:54] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[01:40:35] <Alipha> Guest7463: void foo(int &x); // pass by reference. No pointers here.
[01:41:20] <Guest7463> and when you receive it?
[01:41:30] <ville> receive?
[01:41:35] <Guest7463> the other part
[01:42:31] <pulse> relipse, try #gamedev and #indiedevs
[01:42:35] <Guest7463> pass/send --> receive
[01:42:37] <Alipha> geordi: void foo(int &x) { x = 3; } int main() { int b = 2; foo(b); cout << b; } // Guest7463
[01:42:38] <geordi> 3
[01:42:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:49] *** ChanServ sets mode: +v npaperbot
[01:43:48] <Guest7463> hmm... what you have into brackets is not a pointer by definition?
[01:43:58] <Guest7463> "int &x"
[01:44:06] <Alipha> Guest7463: it's a reference
[01:44:29] <Alipha> "int *x" would be a pointer
[01:45:13] <Alipha> geordi: void foo(int *x) { *x = 3; } int main() { int b = 2; foo(&b); cout << b; } // Guest7463, with pointers
[01:45:14] <geordi> 3
[01:45:24] *** Joins: proller (~p@2a02:6b8:b081:8802::1:12)
[01:47:27] <Alipha> Guest7463: regarding your comment about c++ pointers being dangerous, in order of preference, you should use: objects, references, non-owning raw pointers, std::unique_ptr, std::shared_ptr, other 3rd party smart pointers classes, and finally, owning raw pointers.
[01:50:25] * Guest7463 is thinking about the first example still and trying to remeber/ellaborate :)
[01:50:34] <Guest7463> remember*
[01:51:13] <rpav> pointers are sharp; bourbon
[01:52:52] <Guest7463> at start, I think I mixed "foo (a)" with "foo (&a)" and passing by reference...
[01:52:57] *** Quits: Tokamak (~Tokamak@172.58.191.81) (Ping timeout: 256 seconds)
[01:53:08] <Guest7463> :)
[01:53:59] <Guest7463> becasue if I pass by using "foo (&a)" I do need a poibter to receive it
[01:54:05] <Guest7463> ponter
[01:54:09] <Guest7463> pointer
[01:54:11] <Alipha> yes
[01:55:00] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[01:55:20] <Alipha> some people--notably, C programmers--call `foo(&a)` "passing by reference", but considering C++ has an actual reference type, calling it "pass by reference" is confusing. i'd use the term "pass by pointer"
[01:55:57] <Alipha> C doesn't have references, so calling a function that accepts a pointer "pass by reference" makes sense there, but not in c++
[01:56:20] <Guest7463> are "non-owning raw pointers" considered smart pointers?
[01:56:57] <Guest7463> (smart pointers are still new for me)
[01:58:07] <Alipha> no. and by "non-owning raw pointer", i mean, for example, `int *x`, where x only needs access to the int that it points to and that x is not responsible for deleting the int. if you have to do `delete x;` then that would be an "owning raw pointer", because x "owns" the object/memory and is responsible for deleting it
[01:58:39] <Alipha> ideally, you should never have to use delete or delete[] in your code
[01:59:22] <Guest7463> by "C++ has an actual reference type" you mean just the "pass by reference" C++ method?
[01:59:42] <Guest7463> or process, to not use "method" term
[02:00:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:02:08] <Guest7463> ah, then if I use "new" for example, it becomes a "owning raw pointer"?
[02:03:58] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[02:04:54] <Guest7463> then, I guess you all recommend the use of smart pointers to manage lists in example?
[02:05:40] <Guest7463> I guess I am not used to (have no learnt) it
[02:05:49] <Guest7463> but thanks
[02:10:36] <Alipha> Guest7463: int& can exist outside of function parameters.
[02:10:52] <Alipha> geordi: int main() { int x = 5; int &r = x; r = 3; cout << x; }
[02:10:52] <geordi> 3
[02:11:44] <Alipha> Guest7463: if you use new, yes, it's an owning raw pointer (unless you then put that pointer in a smart pointer)
[02:12:18] <Alipha> to manage a list, use std::list :-) or, preferably, std::vector or something else, because std::list is awful :-)
[02:13:32] <Guest7463> (checking for the "standard" version on the other room, is it C++20 the one recomedable?)
[02:13:43] <Guest7463> recommendable*
[02:14:27] <johnny> it really depends on your environment and whether your intended targets support it
[02:14:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:15:45] <Guest7463> because std::list when was first used approx.?
[02:16:10] <kalven> 24 yearsago
[02:17:17] <Guest7463> that last example is interesting: you are using the commands like a function (passing by reference)
[02:17:26] <Guest7463> assigning in this case
[02:17:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:18:08] <Guest7463> but what version?
[02:18:19] <Guest7463> that is a lot of time haha
[02:18:36] <kalven> c++98
[02:18:49] <Guest7463> I was not taught that in university :)
[02:19:44] <Friithian> unsurprising
[02:19:59] <Guest7463> excuse me but it sounds weird at start, my universty is supposed to be good; maybe thay just taught the "standard" (for that time)
[02:21:03] <Guest7463> I repeat, and excuse me, afaik and understand, the use of (normal) pointers is nothing bad (at least at start)
[02:21:48] <Guest7463> I am supposed to be a normal (good) developer to be able to handle them! (unless we are talking of "agile" developing?)
[02:21:54] <Friithian> normal points isn't bad, *owning* raw pointers can be (and normally is) bad
[02:22:09] <Friithian> pointers* aren't
[02:22:10] <kalven> Guest7463: what do you mean with "supposed to" ?
[02:22:56] <Guest7463> I am supposed to know when to delete them
[02:23:28] <kalven> okay, but you now that programmers don't always write correct code, right?
[02:23:32] <Guest7463> "supposed" because I was taught to always delete them
[02:24:00] <Friithian> the problem is, say you have all the code to make and delete, what happens when there's an exception? Does your delete still get called?
[02:24:02] <Guest7463> (also university doens't teach everything)
[02:24:32] *** Quits: proller (~p@2a02:6b8:b081:8802::1:12) (Remote host closed the connection)
[02:24:36] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[02:24:42] <kalven> universities seem to, by and large, be pretty bad at teaching c++
[02:24:42] <Guest7463> (but market/enteprises/technology also make tendencies not always good)
[02:24:49] <Guest7463> enterprises*
[02:25:31] <Friithian> my prof gives us a tools library who's header has ``using namespace std''
[02:26:19] <Guest7463> Friithian: "exception" as in Java?
[02:26:39] <Guest7463> (java is really ugly)
[02:26:45] <MaddHatter> I think a lot of universities don't teach C++, per se. They teach computer science and various fundamentals using c++ as a vehicle, and so time spent on the language itself is a distraction from the primary goal
[02:27:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:27:49] <kalven> Guest7463: anyway, don't be annoyed that your university didn't teach you these things.. The question of what a programmer is "supposed" to be able to handle is a different one.
[02:28:05] <Guest7463> kalven: yes, errors happens; in the other side I fear that by using automated tools (like smart poniters) it becomes less efficient (just a comment from a non-experienced user with them)
[02:28:44] <kalven> Guest7463: okay, suppose it makes the program 1% slower - is that acceptable?
[02:29:30] <MaddHatter> these days you're probably going to talk to a hard drive or a server. Either of those things is hundreds of times longer than the difference between a smart pointer and whatever the alternative would be. Those kinds of distinctions aren't going to matter.
[02:31:11] <Guest7463> do some of you support Java [anyhow]?
[02:31:34] <Guest7463> becasue it has the "good" virtual machine :)
[02:31:58] <Guest7463> (it is somewhat a similar discussion)
[02:32:35] <kalven> java has nothing to do with this. not sure why you keep bringing it up
[02:33:50] <Guest7463> because Java has lots of automated tools and furthermore it has the virtual machine which also "makes it cheaper" to avoid compiling
[02:34:21] <Guest7463> it is the discussion performance vs compatibility (or vs speed of programming)
[02:34:52] <Guest7463> and C/C++ is supposed to be the best on performance
[02:35:04] <kalven> a lot of "supposed to" with you
[02:35:05] <Guest7463> going to embed systems even
[02:35:13] <Guest7463> hehe
[02:35:32] <Guest7463> when u has embed systems you need the best speed possible
[02:35:53] <Guest7463> C/C++ is just great:)
[02:35:55] <kalven> but my question - suppose using these tools lower your performance by 1% - is that acceptable?
[02:37:16] <Guest7463> also, consider the size of your code, the hardware running it... all are variables about performance
[02:37:31] <Friithian> *mumbles about !rule 1*
[02:37:34] <Guest7463> you sad 1%; I don't think it is always that
[02:37:39] <Guest7463> said
[02:37:46] <Alipha> !rule1
[02:37:47] <nolyc> Alipha: Error: "rule1" is not a valid command.
[02:37:49] <Alipha> !rule 1
[02:37:50] <nolyc> Make things work. Profile. Make things fast. In this order.
[02:38:02] <kalven> Guest7463: it's a hypothetical, what's your answer?
[02:38:56] <Guest7463> (the quality, ofc, of your code, too)
[02:40:13] <Guest7463> excuse me, I don' understand the rule and your question
[02:40:40] <Guest7463> and why I can't say "it is suppsed to"! :)
[02:40:42] <kalven> I'm asking you if you think it's ever worth giving up speed for safety
[02:41:09] <Guest7463> ah, good
[02:41:56] <Guest7463> maybe we are trying to make assumptions without proofs
[02:42:21] <Guest7463> before smart pointers the systems were considerably more unsafe than nowadays?
[02:42:36] <TinoDidriksen> Yes
[02:42:53] <Guest7463> or all is not based on code quality anyway?
[02:42:53] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:43:39] <Guest7463> TinoDidriksen: what are the studies that prove that? it is not the opposite way? I have doubts
[02:45:31] <xkoncek> deboonker
[02:45:40] <kalven> Guest7463: the solution you are talking about is basically "don't write bugs, dummy" and it has shown to not work
[02:45:43] <kalven> we all write bugs
[02:46:01] *** Joins: ferdna (~ferdna@user/ferdna)
[02:46:05] <Friithian> if you think you don't write bugs you're the most likely to write bad buhgs
[02:48:31] <Guest7463> apart, "unsafe" about what? about security issues (like stealing info from memory) or about systems breaking?
[02:49:14] <Guest7463> or, in opposition, it is not making code come down on quality?
[02:49:27] <Friithian> smart pointers are exception safe
[02:49:42] <Guest7463> we know universities are suffering attacks to make them less and less effective
[02:50:31] <Guest7463> now mine (and a lot I guess) is teaching python... a script language
[02:50:36] *** Quits: jsbach (~jsbach@2a01:c22:349e:1800:2c43:5ba2:d3cf:5429) (Ping timeout: 252 seconds)
[02:52:20] <Guest7463> talking of the "rule 1", where does it come from?
[02:53:35] <Guest7463> Friithian: well, I give smart pointers "the benefit of the doubt" since I have not studied them stilll (if I need to); just giving my opiinion in general
[02:53:59] <Friithian> if you don't understand them, you should do that before creating an opinion about them
[02:54:37] <Guest7463> in te other hand C/C++ is used a lot still nowadays, specially in the free/libre world
[02:55:27] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:55:31] <Guest7463> I am deffending my place first :)
[02:55:35] <Alipha> the fact that you keep calling it "C/C++" is indication that you don't know C++. C++, and today's best practices, have diverged a lot from C and C++ is not simply "C with classes"
[02:55:36] <TinoDidriksen> Guest7463, https://dl.acm.org/doi/10.1145/3126905 + https://dl.acm.org/doi/10.1145/3340571 exist at least. I don't off hand know of any formal studies that specifically compare C++-without-smarts to C++-with-smarts, but there's lots of user feedback on that topic around the web, and 95% of it in favour of smart pointers.
[02:55:52] <Guest7463> I didn't accept the idea that "pointers are dangerous" when it appeared
[02:56:03] <Friithian> raw, owning pointers are dangerous
[02:56:06] <TinoDidriksen> Non-owning pointers are fine.
[02:56:24] <Guest7463> the original ones are the raw ones
[02:56:28] <TinoDidriksen> Having a T* is fine, so long as the T is owned by a container or smart pointer.
[02:56:45] <Alipha> (though that T* can still become invalid...)
[02:56:51] <TinoDidriksen> Basically, if you have "delete" in your code, your code is probably bad.
[02:57:00] <Friithian> ^
[02:57:16] <kalven> Guest7463: you can use "difficult" or "error prone" if those terms feel better
[02:57:54] <xkoncek> one thing about unique_ptr, it only allows you to have forwad declared classes if you also explicitly specify the Deleter
[02:58:19] <Alipha> Guest7463: "Make things work. Profile. Make things fast. In this order." comes from the saying that "90% of execution time is spent in 10% of the code." And so, it's a waste of your time, and is compromising the safety and correctness of your program, to be worrying about making that non-critical 90% of the code fast. instead, code your program in the safest, easiest way, and then profile your code to
[02:58:20] <Alipha> determine which parts are actually worth optimizing
[02:58:52] <TinoDidriksen> And given that we can almost entirely eliminate memory issues with smart pointers, that frees up programmer time to spend on all the other safety issues. There's plenty to keep an eye out for, so we should use any and all tools to reduce the mental overhead.
[02:59:01] <Alipha> !give xkoncek spimpl
[02:59:02] <nolyc> xkoncek: spimpl is a utility class to slightly simplify writing a PIMPL pattern: https://github.com/oliora/samples For further explanation, see: http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html
[02:59:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Ping timeout: 240 seconds)
[03:00:27] <Guest7463> "profile" as in "label it"?
[03:00:36] <Friithian> that acronym never fails to make me laugh lol
[03:00:57] <TinoDidriksen> Oh dear...ok, if you don't even know what profiling is, any comments you have on pointer safety is just out the window.
[03:02:11] <Alipha> Guest7463: "profile" is short for "create a performance profile". That is, determine which parts of your code are used most often and take the most time.
[03:02:22] <TinoDidriksen> Especially if you say you care about performance. Profiling is absolutely key to any performance optimization.
[03:03:02] <Alipha> Guest7463: there are tools which will analyze what functions are called most often and how long they take when you perform a test run. these tools are called "profilers"
[03:03:22] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[03:03:23] <Guest7463> if it is something really worth it, all day one learns something :)
[03:03:58] <Guest7463> I have areas to study/improve, yes, tho I have lot of experience also, I think
[03:04:29] *** Joins: ivii (~ivan@user/ivii)
[03:04:34] <Guest7463> maybe more on computing in general than on programming tho
[03:04:37] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[03:05:09] <TinoDidriksen> Maybe you're not native English? What do you use to figure out your code's call graph and to determine runtime hotspots?
[03:05:52] <kalven> hotspot eh, I think this TinoDidriksen guy is a java goon
[03:06:10] <Guest7463> I am from Argentina, then I speak Castillian/Spanish
[03:06:31] <Alipha> Guest7463: also, c++ has exceptions. not just java.
[03:06:58] <Guest7463> we have good computing market, let's say: systems, etc. somewhat like India (I mean human resources, knowledge)
[03:07:44] <Guest7463> no, I am not experieced on performance tests
[03:07:58] <Guest7463> as in using tools like those
[03:08:03] <TinoDidriksen> Then any opinions you have on pointer performance are null and void.
[03:08:17] <Guest7463> just general knowledge about C is fast
[03:08:26] <Guest7463> I worked at university
[03:08:51] <Friithian> TinoDidriksen: there's a joke to be made out of ``are null and void'' but my mind cannot figure it out so just take it as I made a joke from that
[03:08:58] <TinoDidriksen> Academic code is trash, and I know this because I also work at a university.
[03:09:15] <Guest7463> I say "C/C++" because when you write OOP you use both paradigms: structured and OOP
[03:09:44] <Guest7463> C compared to Java and such
[03:09:48] <kalven> thus encompassing all two known paradigms
[03:10:11] <Alipha> C++ is a multi-paradigm language. it allows for OOP, but a lot of the people here don't really write much OOP in C++
[03:10:35] <Guest7463> Alipha: exceptions... good
[03:11:20] *** Joins: gehn1 (~gehn@user/gehn)
[03:11:58] <Alipha> many people here probably do imperative programming in c++, and only use classes and structs for data organization and RAII
[03:12:12] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:12:24] <Alipha> !raii
[03:12:25] <nolyc> Resource Acquisition Is Initialization: a bad name for the idea of acquiring resources in constructors (generally) and having destructors make sure they're released. Failure to acquire any resources is signaled by throwing an exception. It's better referred to as Scope-Bound Resource Management. http://www.hackcraft.net/raii/
[03:12:26] <Guest7463> universities are "supposed to" be the best level :) but I am criticizing them too, yes
[03:12:26] <TinoDidriksen> Guest7463, point being, you don't KNOW what you're talking about. You haven't measured it or looked at profiling output or anything. You have a gut feeling based on outdated academics. We are, like it or not, vastly more experienced, and we say from a position of experience and authority that smart pointers and other safer constructs are not slower, and in fact are often faster because
[03:12:26] <TinoDidriksen> the optimizer can assume better paths.
[03:13:12] <Guest7463> at the end, who does make the universities possible? we, the people, not politicians
[03:13:19] <Friithian> what?
[03:13:21] <TinoDidriksen> ...what?
[03:14:07] *** Quits: gehn1 (~gehn@user/gehn) (Client Quit)
[03:14:30] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 272 seconds)
[03:14:33] <Guest7463> pft I guess you all are (supposedly) very expert on this right?
[03:14:43] <Guest7463> (no joke)
[03:14:46] <kalven> not Friithian
[03:14:47] <Friithian> I sure ain't an expert
[03:15:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:15:06] <Guest7463> I like being here
[03:15:55] <TinoDidriksen> It's not even about being an expert. If you're an academic, then you should never argue from a point of ignorance. If you don't have numbers to back up your claim, you don't have a claim.
[03:16:39] <Guest7463> well, I asked for proofs
[03:16:49] *** Quits: NOTevil (~notevil@user/notevil) (Ping timeout: 256 seconds)
[03:17:11] <Guest7463> but, let's let this here, I will re-read all, was very interesting, and maybe we continue later, thanks for all :)
[03:18:01] <Alipha> a university's goal isn't to teach you specific programming languages. it's to teach you programming concepts. and so, c++ is taught as a mechanism to teach students about low level things like pointers. which unfortunately means students don't often learn the most modern c++ practices because that's not the focus
[03:18:32] <Guest7463> I clarify more just that, TinoDidriksen: science gives proofs; I was not giving arguments but asking for proofs
[03:18:48] <Guest7463> I don't have to give the proofs but you all
[03:18:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:18:54] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[03:19:06] <Friithian> what?
[03:19:20] <Guest7463> if you all decide to use smart pointers, give the studies, the proofs
[03:19:45] <TinoDidriksen> That's a little like going to a fire station and demanding proof their fire trucks work. We can, but it takes time and effort to write up the tests.
[03:19:57] <Guest7463> no, just links
[03:20:07] <Friithian> I can give you a zelda
[03:20:14] <Guest7463> but maybe you posted some, I don't remember, then i need re-reading
[03:20:35] <Alipha> Guest7463: TinoDidriksen posted https://dl.acm.org/doi/10.1145/3126905 + https://dl.acm.org/doi/10.1145/3340571
[03:20:45] <Guest7463> ok ok
[03:20:48] <Alipha> Friithian: hey, listen!
[03:21:34] <Friithian> I'm always listening, watching, observing
[03:22:09] <Alipha> Friithian: Ocarina of Time?
[03:22:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:22:23] <Friithian> I've never actually played legend of zelda :P
[03:22:27] <Friithian> not my type of game
[03:22:30] <Alipha> sigh
[03:23:22] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[03:23:52] <TinoDidriksen> Guest7463, found an actual C++ study: http://real.mtak.hu/66602/1/606.2017.12.3.14.pdf - at level -O3, unique_ptr is slightly faster than raw pointers, which is as expected.
[03:24:08] <TinoDidriksen> It's not a great study, but it is a formal paper.
[03:25:03] <Guest7463> TinoDidriksen: thanks!
[03:25:28] *** Joins: teepee_ (~teepee@openscad/teepee)
[03:25:35] <great_taste> if you had a std::vector<A> and a std::set<A>, how would you do a for loop over both? As if they were concatenated and iterated over. Make a lambda and write one  for loop for each that invoke said lambda?
[03:25:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[03:25:36] *** teepee_ is now known as teepee
[03:27:30] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:28:18] *** Quits: DSpider (~DSpider@82.79.237.62) (Quit: Leaving)
[03:28:47] <kalven> TinoDidriksen: faster? why's that expected?
[03:30:31] <TinoDidriksen> Optimizer has more information to work with, but those are some awful testcases.
[03:30:32] <Alipha> great_taste: i would try to instead write your code as: for(auto &&value : my_vector) { do_something(value); } for(auto &&value : my_set) { do_something(value); }
[03:30:53] <kalven> I don't see how that is the case, and yeah those testcases are pretty corny
[03:31:13] <great_taste> Alipha yes, where do_something is a lambda defined right above
[03:31:40] <Alipha> great_taste: oh, i misread what you said. so, "yes" :-)
[03:32:06] *** Quits: Guest7463 (~Guest@host210.181-14-186.telecom.net.ar) (Remote host closed the connection)
[03:32:19] <great_taste> it's annoying that my for loop body needs a `break` statement... so the function will have to return a boolean etc...
[03:32:25] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[03:32:34] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[03:32:46] *** Joins: notevil (~notevil@user/notevil)
[03:32:52] *** Joins: beanzilla (beanzilla@user/beanzilla)
[03:34:09] <Alipha> great_taste: i mean, you could write a concat_range_iterator or something, but seems like a lot of unnecessary work
[03:34:28] <great_taste> would be nice if we could write `for (auto &&value : [my_vector, my_set, my_unordered_set]) { ... }` :)
[03:34:49] <Alipha> (or just wait for me to write it because you've slightly piqued my interest)
[03:34:58] <great_taste> please don't :)
[03:35:28] <great_taste> it's gonna be ugly
[03:36:41] <TinoDidriksen> Seems like something ranges should be able to do.
[03:37:04] <kalven> I don't think Alipha can do it
[03:37:53] <Alipha> kalven: now you're just goading me to do it
[03:40:38] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[03:40:52] <kalven> range-v3 has views::concat
[03:40:56] <yolo> in libstdc++ std::memcpy was enforcing unsigned char? c does not care char or unsigned char
[03:42:52] <yolo> actually, libc|musl also force it to unsigned char: https://github.com/esmil/musl/blob/master/src/string/memcpy.c
[03:45:22] <TinoDidriksen> The C Standard says of the memory functions: "For all functions in this subclause, each character shall be interpreted as if it had the type unsigned char"
[03:50:54] <AmR> Any one Can help me with cmake override find_package ?
[03:55:23] *** Joins: skapata (~Skapata@user/skapata)
[03:56:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:13:24] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:15:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:19:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:23:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:32:32] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:6dd8:7cde:f63:8efb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:13] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:30c6:5266:d9db:c38f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:54:23] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:59:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:02:30] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[05:14:17] <AmR> How I can enable debug in cmake ?
[05:16:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:19:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:23:01] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[05:37:11] <pizzapants184> `cmake -DCMAKE_BUILD_TYPE=Debug` i believe
[05:40:03] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6)
[05:42:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:49] *** ChanServ sets mode: +v npaperbot
[05:47:32] <pizzapants184> Oh, if you meant debugging a CMakeLists.txt file itself, then i'm not sure. I think you can override a find_package by putting a Find<packagename>.cmake in a folder and doing `cmake -DCMAKE_MODULE_PATH=/path/to/that/folder`
[05:50:38] *** Joins: noarb- (~noarb@user/noarb)
[05:50:57] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 272 seconds)
[05:51:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:56:16] <AmR> pizzapants184: I meant debugging a CMakeLists.txt file itself.
[05:56:27] <AmR> pizzapants184: Thanks for info.
[05:57:50] <AmR> pizzapants184: How I can test if I'm in linux or mingw or gnu or gcc I try That by " if( ${MINGW} OR ${CMAKE_SYSTEM_NAME} MATCHES Linux OR ${CMAKE_CXX_COMPILER_ID} MATCHES "GNU" ) " But I got error.
[06:01:47] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[06:07:07] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:16:18] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:16:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:20:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:34:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Ping timeout: 240 seconds)
[06:41:27] <AmR> I need some help with build error https://pastebin.com/bV4dbPXx
[06:47:50] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:50:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:00:19] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:06:05] *** Joins: adeliktas5 (~adeliktas@i59F52980.versanet.de)
[07:07:16] *** Joins: Azem (~haise01@user/haise01)
[07:07:48] *** Quits: adeliktas (~adeliktas@i59F52D25.versanet.de) (Ping timeout: 240 seconds)
[07:07:48] *** adeliktas5 is now known as adeliktas
[07:10:35] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:17:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:17:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:20:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:21:53] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Read error: Connection reset by peer)
[07:24:50] <imMute> AmR: "recompile with -fPIC"
[07:25:26] <AmR> What is that ?
[07:26:09] <imMute>  a compiler flag
[07:26:21] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[07:44:41] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:45:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[07:45:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[07:45:18] *** ChanServ sets mode: +v npaperbot
[08:02:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[08:06:12] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:06:14] *** Joins: unyu (~pyon@user/pyon)
[08:15:38] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:17:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:21:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:34:25] <ent58> I know how to do this the straightforward way, but...using standard containers, would the best route to enforcing a memory layout be to use an allocator, or is there a better method?
[08:37:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:38:52] <ent58> An example: forcing an unordered_map to rest itself and its elements in a contiguous memory region
[08:39:19] <Alipha> ent58: that's what you'd do
[08:39:42] <ent58> hmm, okay
[08:42:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b9:86dd:d058:200e)
[08:46:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b9:86dd:d058:200e) (Ping timeout: 240 seconds)
[08:58:48] *** Quits: AmR (~AmREiSa@156.199.14.65) (Quit: Konversation terminated!)
[09:01:00] *** Quits: ville (~ville@user/ville) (Quit: ville)
[09:07:57] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:16:27] *** Quits: peoliye (~peoliye@205.251.233.52) (Quit: Client closed)
[09:18:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:21:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:27:09] *** Joins: ville (~ville@user/ville)
[09:34:19] *** Joins: immibis (~hexchat@dynamic-089-204-138-049.89.204.138.pool.telefonica.de)
[09:35:39] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-049.89.204.138.pool.telefonica.de) (Ping timeout: 256 seconds)
[09:36:46] *** Joins: k8yun (~k8yun@user/k8yun)
[09:40:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:42:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:49] *** ChanServ sets mode: +v npaperbot
[09:50:34] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:01:09] *** Quits: immibis (~hexchat@dynamic-089-204-138-049.89.204.138.pool.telefonica.de) (Ping timeout: 256 seconds)
[10:03:48] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[10:05:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[10:06:20] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:08:07] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[10:18:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:22:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:28:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[10:39:15] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:42:10] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:667f)
[10:46:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:46:37] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (Read error: Connection reset by peer)
[10:49:47] *** Joins: paul424 (~tom@ip-5-172-235-34.multi.internet.cyfrowypolsat.pl)
[10:55:01] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[10:58:43] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[11:19:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:22:08] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:22:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:24:41] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:f058:960c:b5ef:b751) (Remote host closed the connection)
[11:25:16] *** Joins: p-i- (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th)
[11:31:03] *** Joins: proller (~p@2a02:6b8:b081:21::1:27)
[11:42:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f19a:61a1:bb24:ded2)
[11:53:12] *** Quits: letto2 (~letto@188.26.152.131) (Ping timeout: 272 seconds)
[11:59:10] *** Joins: KillAnimals (~anon@199-7-159-79.eng.wind.ca)
[12:14:09] *** Joins: robod34 (Username@79.113.243.73)
[12:14:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:19:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:21:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:23:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:36:52] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:44:26] *** Quits: paul424 (~tom@ip-5-172-235-34.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[12:44:49] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:45:22] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:52:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Quit: Quit)
[12:53:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[13:01:49] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[13:09:01] *** Joins: immibis (~hexchat@62.156.144.218)
[13:11:48] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:20:02] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:22:30] *** Quits: KillAnimals (~anon@199-7-159-79.eng.wind.ca) (Ping timeout: 272 seconds)
[13:23:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:32:54] *** Joins: ville (~ville@user/ville)
[13:37:02] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:40:04] <antto> !fact
[13:40:05] <nolyc> antto: The template parameter T of enable_shared_from_this may be an incomplete type.
[13:42:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:50] *** ChanServ sets mode: +v npaperbot
[13:47:39] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[13:50:56] <LordKalma> "may"
[13:50:57] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 240 seconds)
[13:51:02] <LordKalma> it really ought to :D
[13:51:05] *** RandomRead3r is now known as RandomReader
[14:05:32] <LordKalma> functions can't be template parameters, can they?
[14:05:52] <LordKalma> like "implementation as template parameter"
[14:12:11] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:13:57] <ville> a function type or a pointer-to-function may be used as a template argument
[14:14:31] <ville> couldn't quite parse what you tried to ask for
[14:15:17] <ville> std::function would be an example that uses a function type
[14:16:59] <ville> and:    template<auto pf> struct aa {};    might be an example of a pointer-to-function one. well it'll take just about any value as argument
[14:18:19] <LordKalma> thanks :)
[14:20:31] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:20:48] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:23:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:24:25] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:49:45] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[14:50:40] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d62:2925:5b99:4618)
[14:50:40] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d62:2925:5b99:4618) (Changing host)
[14:50:40] *** Joins: skapata (~Skapata@user/skapata)
[14:50:59] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[14:52:10] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[15:11:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:14:36] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Ping timeout: 240 seconds)
[15:21:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:22:54] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[15:24:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[15:24:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:26:30] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:28:14] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[15:40:49] *** Joins: markong (~kvirc@213.146.188.203)
[15:41:37] *** Joins: txtsd (~txtsd@user/txtsd)
[15:43:54] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[15:44:19] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[15:44:44] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[15:45:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[15:55:39] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:21:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:21:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:25:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:31:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Ping timeout: 240 seconds)
[16:33:41] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[16:36:56] *** Joins: MatSharrow (~matthew@40.102.9.51.dyn.plus.net)
[16:50:50] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[16:53:34] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:54:44] <LordKalma> this weekend my project is writing a basic fft
[16:59:33] <joel135> sounds like fun
[17:03:44] <LordKalma>  CMake 91.5%
[17:03:44] <LordKalma> C++ 6.2%
[17:03:59] <LordKalma> hahah projects are hilarious in their beginning
[17:08:15] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 240 seconds)
[17:09:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[17:09:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:10:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[17:12:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:14:40] <xkoncek> Alipha doesn't libsobium allow longer keys than 32-bytes?
[17:16:37] *** Joins: NovumDXW (~NovumDXW@2409:8a28:361c:d160:6499:aaab:329a:e347)
[17:17:15] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:69b2:1da5:3a92:e9c6)
[17:17:15] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:69b2:1da5:3a92:e9c6) (Changing host)
[17:17:15] *** Joins: skapata (~Skapata@user/skapata)
[17:19:33] *** Joins: filename (~kilitary@185.193.143.131)
[17:20:03] <PJBoy> strong symmetric encryption algorithms stop at 256 bit keys
[17:20:24] <PJBoy> namely AES, but I think libsodium uses salsa20
[17:21:05] <xkoncek> for symmetric, they have AES or ChaCha20-Poly1305
[17:21:25] <xkoncek> but i actually meant the asymmetric one
[17:22:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:22:46] <PJBoy> so they're using X25519 for that
[17:22:56] <PJBoy> 256 bit key size, yeah
[17:23:16] <PJBoy> that's the power of elliptic curves
[17:24:09] <xkoncek> i don't really know, is 256-bit public key enough for long-term usage?
[17:24:49] <PJBoy> it's the only supported size by that algo, so you'd hope it's good
[17:25:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:25:36] <PJBoy> also yeah, 256 bit is a lot for non RSA
[17:25:43] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:26:08] <xkoncek> ok, whenever i look back at openssl, i am glad libsodium exists
[17:27:54] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th)
[17:30:16] <PJBoy> I've never used libsodium, but yeah it looks good
[17:30:32] <PJBoy> not sure if I like how they name things, but makes some sense
[17:31:39] *** Quits: p-i- (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[17:32:17] *** Joins: plastico (~plastico@neomutt/plastico)
[17:37:37] *** Joins: pulse (~pulse@user/pulse)
[17:42:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:51] *** ChanServ sets mode: +v npaperbot
[17:45:44] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:52:23] *** Joins: jokoon (~eio@2a01:e0a:542:e160:59b6:7418:ae44:5513)
[17:56:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:58:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[17:59:23] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[18:09:57] <LordKalma> I love random claims on books
[18:09:58] <LordKalma> Note that the fast way to compute mod( j, N ) in the C programming language, for N a power of two, is with bit-wise AND: “j&(N-1)”. This is faster than “j%N”, and it works for positive or negative j, while the latter does not.
[18:12:31] <LordKalma> https://godbolt.org/z/6ME9e36ha
[18:12:32] <LordKalma> interesting
[18:12:41] <PJBoy> that bit about negative numbers is true
[18:13:36] <PJBoy> why did you do bitwise and twice in the unsigned case?
[18:14:52] <LordKalma> ah fuck, because I copy pasted
[18:15:08] <LordKalma> https://godbolt.org/z/5asqPKnj4
[18:15:28] <PJBoy> this is probably more fair https://godbolt.org/z/ndxM4bnW4
[18:15:42] <PJBoy> since we're talking about power of 2 mods
[18:16:06] <LordKalma> fair enougj
[18:21:10] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 250 seconds)
[18:22:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:26:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:26:31] *** Quits: NovumDXW (~NovumDXW@2409:8a28:361c:d160:6499:aaab:329a:e347) (Read error: Connection reset by peer)
[18:26:47] *** Joins: Youmu (uid129469@user/condy)
[18:27:05] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:27:11] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[18:27:31] *** Joins: AmR (~AmREiSa@156.199.14.65)
[18:31:59] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:1c7d:c11b:e4be:7014)
[18:33:00] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[18:33:34] <AmR> Any one working with imgui ?
[18:34:34] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[18:34:59] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:39:08] *** Joins: andreasbuhr (~quassel@p549db736.dip0.t-ipconnect.de)
[18:40:10] <pulse> i'm working with wx
[18:40:57] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[18:43:45] *** Joins: pulse (~pulse@user/pulse)
[18:48:18] <Alipha> xkoncek: indeed, 256-bit EC keys is large enough. No one uses anything larger.
[18:49:26] <Alipha> PJBoy: secret_box, box, and sealed_box are rather unhelpful names, indeed
[18:53:29] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[18:54:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:56:50] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:57:06] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[18:57:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:57:29] *** Joins: xkuru (~xkuru@user/xkuru)
[19:08:45] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Remote host closed the connection)
[19:09:21] *** Joins: p-i- (~Ohmu@183.89.29.122)
[19:12:32] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:15:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:18:55] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[19:19:22] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:20:13] <xkoncek> Alipha it was just that i remember that when i was setting up personal RSA keys, the processs took at least some time (or even when generating some keys with openssl), the libsodium functions return in time not noticeable by human
[19:23:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:23:56] <Alipha> xkoncek: that's also a huge advantage of EC crypto: generating a private key just involves getting 256 bits of random data and then flipping a few bits. It doesn't involve the lengthy process of finding primes
[19:24:26] <xkoncek> too bad i don't know much about elliptic curves
[19:24:43] <xkoncek> we had a course about all the algebra and primes and similar
[19:25:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Ping timeout: 252 seconds)
[19:26:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:31:13] *** Quits: MatSharrow (~matthew@40.102.9.51.dyn.plus.net) (Ping timeout: 256 seconds)
[19:35:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:36:12] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[19:38:25] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[19:44:34] <evangeline> What is the difference between using this as a class member "int x{}" vs "int x{0}" - how should we initialize class variables, what is the preferred way?
[19:45:06] <PJBoy> no difference
[19:47:25] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:1c7d:c11b:e4be:7014) (Ping timeout: 256 seconds)
[19:49:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:49:38] <evangeline> PJBoy, so it's always initialized to 0?
[19:50:41] <evangeline> PJBoy, https://godbolt.org/z/Px78W1Mcd (this is your example from yesterday, thank you for it). I have a question: why can I pass in std::wstring in C++20, but not in C++17, where I need std::wstring_view?
[19:50:43] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:51:04] <PJBoy> string wasn't made constexpr'able until C++20
[19:51:13] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:51:19] <PJBoy> due to having to do memory allocation and whatnot
[19:51:35] <PJBoy> also yeah at zero
[19:51:37] <Alipha> evangeline: primitives are initialized to 0 if you use {} to initialize it
[19:51:38] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:52:12] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:52:38] <evangeline> WHat if I use a struct { int x; void* y; wchar_t z[10]; } and use {} to initialize it, x=0, y=nullptr and z[0] = '\0' ?
[19:53:09] <evangeline> PJBoy, ah so both std::string and std::wstring can be constexprable only in C++20, thanks
[19:54:42] <evangeline> Alipha, I guess the pointers are all nullptr when using {}, but what about the wchar_t array
[19:54:44] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[19:55:53] <Alipha> evangeline: yes, though all elements of z are set to '\0'
[19:56:32] <evangeline> Alipha, yeah that's exactly what I require, so I don't need to do memset (as in C)
[19:59:37] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:01:09] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:4423:d57:eac1:cd32)
[20:01:38] <evangeline> Alipha, and this initialization is true from C++11 (including) onwards?
[20:02:36] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[20:03:14] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[20:05:18] <Alipha> evangeline: yes. Probably true in c++98 too
[20:05:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:05:29] <evangeline> Thank you
[20:07:37] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:4423:d57:eac1:cd32) (Ping timeout: 240 seconds)
[20:14:06] <norias> Alipha: i want to generally thank you.
[20:14:17] <norias> You are so helpful and knowledgeable in this channel
[20:16:07] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[20:20:26] <Alipha> Thanks. What people don't know, is that all my answers are actually subtly wrong ;-)
[20:23:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:24:17] <norias> haha
[20:25:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:27:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:30:09] *** Quits: jokoon (~eio@2a01:e0a:542:e160:59b6:7418:ae44:5513) (Quit: Leaving)
[20:30:17] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[20:31:28] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:f107:35d2:9019:655d)
[20:32:05] *** Joins: MatSharrow (~matthew@40.102.9.51.dyn.plus.net)
[20:33:13] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[20:35:04] *** Quits: p-i- (~Ohmu@183.89.29.122) (Ping timeout: 272 seconds)
[20:40:37] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 240 seconds)
[20:40:57] *** Quits: MatSharrow (~matthew@40.102.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[20:42:48] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:7f62:d43b:89a4:4059)
[20:43:54] *** Joins: Simplar (~Simplar@188.163.93.241)
[20:43:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:45:23] <niko3> and thats actually a good thing
[20:46:48] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[20:48:57] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:7f62:d43b:89a4:4059) (Ping timeout: 240 seconds)
[20:50:47] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6)
[20:50:53] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6) (Client Quit)
[20:59:02] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2cb1:46aa:f3c9:105d)
[20:59:02] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2cb1:46aa:f3c9:105d) (Changing host)
[20:59:02] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:04:59] *** Joins: MatSharrow (~matthew@40.102.9.51.dyn.plus.net)
[21:05:01] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:05:23] *** Joins: letto2 (~letto@188.26.152.131)
[21:11:13] *** Quits: MatSharrow (~matthew@40.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[21:13:24] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:15:33] *** Joins: lxsameer (lxsameer@user/lxsameer)
[21:15:49] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[21:18:42] *** Joins: filename (~kilitary@185.193.143.131)
[21:21:49] <hnOsmium0001[m]> can settings between visual studio versions (particularly 2019 and 2022) be separate? currently when I touch anything in Text Editor, they get syncrhonized to the other install which is not something I want
[21:22:20] <hnOsmium0001[m]> I have already disabled Synchronize Across Devices in Environment > Accounts in both instances
[21:22:43] <hnOsmium0001[m]> searching google for "visual studio separate settings multiple install" shows nothing relevant
[21:23:08] <pulse> i think you'd need separate accounts
[21:23:16] <pulse> although idk maybe there's a way to ignore account settings
[21:23:17] <cbreak> hnOsmium0001[m]: I'm not a windows user, but ... doesn't that thing support multiple users?
[21:24:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:24:11] <hnOsmium0001[m]> cbreak: pulse apparently multi account is a thing, but I really don't want to register a separate account just for this...
[21:24:20] <hnOsmium0001[m]> noted for last resort however
[21:24:25] <cbreak> register?
[21:24:30] <cbreak> aren't those local to your machine?
[21:24:39] <hnOsmium0001[m]> are you not talking about the MS account login thing?
[21:24:45] <hnOsmium0001[m]> or are you talking about Windows users
[21:24:52] <cbreak> windows users.
[21:25:07] <cbreak> I didn't know you needed a microsoft account to use visual studio
[21:25:14] <cbreak> (I use visual studio code, which doesn't)
[21:26:13] <hnOsmium0001[m]> actually maybe I can just log off, I was logged IIRC because during the first install it asked for it, and I didn't think too much
[21:27:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:27:57] <hnOsmium0001[m]> nope when I log off in 2019, 2022 gets logged off as well, and the settings still affect each other...
[21:28:17] <LordKalma> https://stackoverflow.com/questions/70227791/why-are-visual-studios-dark-mode-settings-shared-between-vs-versions
[21:28:22] <LordKalma> you're not the first one to complain :p
[21:28:49] <LordKalma> https://developercommunity.visualstudio.com/t/visual-studio-2022-setting-the-theme-in-2022-chang/1466144
[21:28:51] <LordKalma> https://developercommunity.visualstudio.com/t/settings-changes-in-vs2022-rc-change-vs2019/1553311
[21:29:17] *** Joins: jsbach_ (~jsbach@2a01:c22:35cd:1200:eb4:bcd3:8626:a5bc)
[21:29:21] <LordKalma> the latter seems to suggest disabling sync helped
[21:29:24] <LordKalma> maybe you need a reboot?
[21:29:40] <LordKalma> the second-to-last says "Fixed In: Visual Studio 2022 version 17.1 Preview 3"
[21:31:11] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 245 seconds)
[21:33:08] *** Quits: ville (~ville@user/ville) (Quit: ville)
[21:33:28] <hnOsmium0001[m]> I'll try updating the 2022 install
[21:34:31] *** Quits: jsbach_ (~jsbach@2a01:c22:35cd:1200:eb4:bcd3:8626:a5bc) (Ping timeout: 245 seconds)
[21:34:39] *** Joins: ville (~ville@user/ville)
[21:35:44] <LordKalma> if you can, and are up for it, use the preview edition
[21:35:53] <LordKalma> always getting the cool new stuff :)
[21:35:56] <LordKalma> (and it's pretty stable)
[21:42:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:51] *** ChanServ sets mode: +v npaperbot
[21:47:24] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[21:52:57] *** Joins: jsbach_ (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[21:57:41] *** Joins: causative_ (~halberd@user/causative)
[21:57:59] *** Quits: causative (~halberd@user/causative) (Ping timeout: 256 seconds)
[21:58:15] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:58:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[22:08:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:09:44] <pulse> knock knock
[22:11:11] <fiesh> who's there?
[22:11:17] <pulse> conversion from 'size_t' to 'unsigned integer', possible loss of data
[22:11:58] <fiesh> conversion from 'size_t' to 'unsigned integer', possible loss of data who?
[22:11:58] <Friithian> conversion from 'size_t' to 'unsigned integer', possible loss of data who
[22:12:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:13:31] <pulse> conversion from 'size_t' to 'unsigned integer', possible loss of data you can't ignore me forever
[22:15:14] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[22:15:21] <great_taste> the most annoying warnings...
[22:18:01] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:18:10] <LordKalma>  /Wall on msvc is *really* agressive
[22:18:44] <Friithian> solution: dont use msvc
[22:20:01] <LordKalma> no, I like C++20 features :p
[22:20:08] <LordKalma> dab on them haters
[22:20:14] <Friithian> is it worth selling your soul to MS?
[22:20:28] <LordKalma> hahaha it's a joke :p
[22:20:28] <PJBoy> that's a good warning
[22:20:38] <LordKalma> also, I do agree with PJBoy
[22:20:42] <PJBoy> there is a possible loss of data
[22:24:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:24:48] <great_taste> possible though unlikely xD
[22:25:24] <great_taste> it's a risk some of us are willing to take
[22:25:34] <great_taste> *many of us
[22:25:42] <LordKalma> that's what static_cast is for
[22:26:01] <LordKalma> no, it's not noise. it's expressiveness of programmer's intent.
[22:26:38] <Friithian> yeah shouldn't you explicitly cast something
[22:27:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:28:22] <great_taste> the warning is annoying, so is static_casting everything
[22:29:01] <Alipha> pulse: use size_t instead of unsigned int?
[22:29:06] <LordKalma>  /wd4542
[22:29:09] <LordKalma> not hard
[22:29:22] <pulse> Alipha, it's not my code :p
[22:29:31] <pulse> zlib uses that
[22:29:37] <LordKalma>  4244*
[22:30:29] <ville> fucking python
[22:30:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:30:52] <LordKalma> title of MY sex tape :p
[22:30:56] <Alipha> pulse: use unsigned int instead of size_t? :-)
[22:31:11] <ville> such fucking waste of time hunting down the type of everything to try to understand what's happening in a program
[22:31:22] *** Quits: phoenix (phoenix@user/phoenix) (Remote host closed the connection)
[22:32:07] <LordKalma> indeed
[22:32:53] <PJBoy> yeah
[22:34:48] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[22:48:41] *** Quits: proller (~p@2a02:6b8:b081:21::1:27) (Ping timeout: 245 seconds)
[23:03:48] *** Joins: proller (~p@80.240.216.69)
[23:05:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[23:05:15] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[23:09:18] *** Joins: paul424 (~tom@ip-5-172-234-213.multi.internet.cyfrowypolsat.pl)
[23:19:56] *** Joins: filename (~kilitary@185.193.143.131)
[23:25:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:28:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:40:33] *** Quits: beanzilla (beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[23:40:33] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[23:41:55] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[23:41:58] *** Joins: notevil (~notevil@user/notevil)
[23:42:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:47:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:51:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:53:14] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[23:54:03] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:1d79:7c54:c545:7cd5)
