[00:00:41] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 258 seconds)
[00:05:07] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:05:25] *** Joins: livoreno (~livoreno@user/notzmv)
[00:05:42] *** Quits: slant (~ssnatt@2806:103e:2:e58:a272:61a6:ddd8:f63) (Remote host closed the connection)
[00:05:59] *** Joins: slant (~ssnatt@2806:103e:2:e58:3aa1:ad31:5fe8:5882)
[00:10:24] *** Quits: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:11:59] *** Quits: slant (~ssnatt@2806:103e:2:e58:3aa1:ad31:5fe8:5882) (Remote host closed the connection)
[00:12:17] *** Joins: slant (~ssnatt@2806:103e:2:e58:752a:fc22:80d:5344)
[00:13:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:19:32] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[00:29:20] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[00:41:05] *** Quits: slant (~ssnatt@2806:103e:2:e58:752a:fc22:80d:5344) (Remote host closed the connection)
[00:41:21] *** Joins: slant (~ssnatt@2806:103e:2:e58:df1e:c057:c069:22cc)
[00:48:34] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[00:49:57] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[01:02:56] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 252 seconds)
[01:03:05] <Josh_2> How do I stop systemd restarting my program? Normally I deploy a webapp I would bring the hunchentoot thread to the foreground with join-thread, I tried dropping into the sbcl top level but its still restarting
[01:04:41] <phoe> https://unix.stackexchange.com/questions/289629/systemd-restart-always-is-not-honored or something?
[01:04:49] <phoe> Restart=never or something
[01:05:06] <Josh_2> Doesn't restart=always just restart the app when it crashes?
[01:05:35] <Josh_2> ah
[01:05:42] <Josh_2> restart=on-failure might do it
[01:06:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:09:17] <Josh_2> okay I dont think its systemd doing it
[01:09:29] <Josh_2> or it is
[01:10:21] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[01:11:21] *** Quits: slant (~ssnatt@2806:103e:2:e58:df1e:c057:c069:22cc) (Remote host closed the connection)
[01:11:37] *** Joins: slant (~ssnatt@2806:103e:2:e58:999d:a0a1:b984:8a28)
[01:12:49] <Josh_2> :( maybe I should just loop sleep a bunch of times. All my work is done on a background thread anyway
[01:12:54] *** Joins: scymtym (~user@ip6-2001-638-504-20d4-1000-0-0-c.VPN.Dyn.CIT-EC.NET)
[01:15:18] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Remote host closed the connection)
[01:19:17] <Josh_2> okay finally working.
[01:28:48] *** Joins: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86)
[01:30:59] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Remote host closed the connection)
[01:31:37] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[01:33:47] *** Quits: slant (~ssnatt@2806:103e:2:e58:999d:a0a1:b984:8a28) (Ping timeout: 268 seconds)
[01:38:52] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:40:02] *** Joins: lad (~lad@user/lad)
[01:43:49] *** Joins: gera (~gera@user/gera)
[01:51:37] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[01:56:12] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:01:25] *** Joins: nkatte (~nkatte@2804:14c:7980:8c9a::a542)
[02:01:29] *** Quits: nkatte (~nkatte@2804:14c:7980:8c9a::a542) (Remote host closed the connection)
[02:01:44] *** Joins: nkatte (~nkatte@2804:14c:7980:8c9a::a542)
[02:04:00] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 268 seconds)
[02:04:55] *** Joins: srhm (~ascii@user/srhm)
[02:09:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:12:58] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[02:15:43] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 268 seconds)
[02:15:50] *** Joins: derelict (~derelict@user/derelict)
[02:17:38] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[02:20:57] *** Joins: selwyn (~selwyn@user/selwyn)
[02:21:40] *** Joins: srhm (~ascii@user/srhm)
[02:21:54] *** Quits: gera (~gera@user/gera) (Quit: Quit)
[02:24:37] *** Quits: nkatte (~nkatte@2804:14c:7980:8c9a::a542) (Quit: nkatte)
[02:32:24] *** Quits: Danishman (~Allan@62-243-156-218-static.dk.customer.tdc.net) (Quit: Leaving)
[02:34:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[02:36:08] *** Joins: aeth (~aeth@user/aeth)
[02:36:42] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 268 seconds)
[02:38:32] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 268 seconds)
[02:41:10] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:57:09] *** Quits: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:57:36] *** Joins: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de)
[03:05:05] *** Quits: phantomics (~phantomic@71-218-246-207.hlrn.qwest.net) (Ping timeout: 265 seconds)
[03:06:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:11:57] *** Joins: srhm (~ascii@user/srhm)
[03:17:11] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[03:18:32] *** Joins: selwyn (~selwyn@user/selwyn)
[03:18:41] *** Joins: [deleted] (~livoreno@user/notzmv)
[03:22:38] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[03:27:55] *** Quits: lotuseater (~user@p200300e787025700b5e33b4e3d09511f.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:30:24] *** Quits: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86) (Quit: Leaving)
[03:32:22] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[03:33:08] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[03:34:35] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:36:13] *** Joins: dsk (~dsk@user/dsk)
[03:39:35] *** Quits: pve (~pve@87-93-164-120.bb.dnainternet.fi) (Quit: leaving)
[03:43:20] *** Joins: cjb (~cjb@user/cjb)
[03:51:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:edf7:146a:8396:f657) (Remote host closed the connection)
[04:08:30] *** Quits: scymtym (~user@ip6-2001-638-504-20d4-1000-0-0-c.VPN.Dyn.CIT-EC.NET) (Ping timeout: 250 seconds)
[04:09:05] *** Quits: lad (~lad@user/lad) (Ping timeout: 258 seconds)
[04:24:36] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[04:26:40] *** Joins: karlosz (~karlosz@router.cloyne.org)
[04:27:10] *** Joins: akoana (~ah@user/akoana)
[04:27:16] *** Quits: xantoz (~tewi_inab@c-e0bfe255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: pok (~pok@user/pok) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: gabc (~gabc@user/gabc) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 244 seconds)
[04:27:59] *** Joins: ck_ (~ck@plskthx.org)
[04:28:23] *** Joins: pok (~pok@castor.klingenberg.no)
[04:28:23] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[04:28:23] *** Joins: pok (~pok@user/pok)
[04:28:27] *** Joins: gabc (~gabc@user/gabc)
[04:28:48] *** Joins: xantoz (~tewi_inab@c-e0bfe255.013-124-73746f25.bbcust.telenor.se)
[04:31:01] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[04:33:14] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[04:34:33] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:37:36] *** Quits: random-nick (~random-ni@87.116.183.60) (Ping timeout: 272 seconds)
[04:38:59] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[04:41:40] *** Quits: gigamonk` (~user@135-180-44-14.fiber.dynamic.sonic.net) (Ping timeout: 258 seconds)
[04:42:40] *** Quits: killsushi (~killsushi@user/killsushi) (Ping timeout: 272 seconds)
[04:44:50] *** Quits: wheelsucker (~user@2600:8801:8c11:4c00::707) (Quit: ERC (IRC client for Emacs 27.2))
[04:52:39] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[04:57:01] *** Joins: wheelsucker (~user@2600:8801:8c11:4c00::707)
[05:09:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[05:16:07] *** Joins: energizer (~energizer@user/energizer)
[05:23:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[05:26:53] *** Joins: derelict (~derelict@user/derelict)
[05:28:49] <energizer> Hi I'm not a commonlisper but I have a question about how dispatch works, and hoping someone can answer or point me to the right documentation. In languages with traits/typeclasses, there is a question of which method to pick for (f x) when x has multiple traits that each implement f in a different way. For example, a ContiguousArray might have one method and a RowOrientedArray might have another. How do you pick which method? I'm asking here
[05:28:50] <energizer> specifically because I heard CLOS has some unique dispatch features.
[05:29:29] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:29:39] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:29:45] <White_Flame> methods are not on classes in CLOS
[05:29:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[05:30:04] <White_Flame> they dispatch based on any number of parameter classes
[05:30:34] <White_Flame> so you don't, for instance, have the issue of (collide <ball> <wall>) and have to mandate it exists one one or the other
[05:30:40] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[05:30:56] <White_Flame> the generic function just exists and dispatches on both parameters' types, in that case
[05:31:07] <White_Flame> erm, s/types/classes/, as that's important in CL
[05:31:11] <kakuhen> there are some edge cases where the multiple dispatch gives you problems, but I've only ran into it when I create a method that dispatches on subclasses of a specific class
[05:31:31] <kakuhen> like it'd call a method, but not the one you'd think -- there's a weird preference order that goes on
[05:31:48] <White_Flame> resolving which method to call is also completely overridable in CLOS, as is much of the object system itself
[05:32:05] <White_Flame> eg the actual method resolution algorithm itself
[05:32:58] <pjb> energizer: see compute-applicable-methods
[05:34:55] *** Parts: wheelsucker (~user@2600:8801:8c11:4c00::707) (ERC (IRC client for Emacs 27.2))
[05:46:04] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[05:47:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:50:02] *** Joins: karlosz (~karlosz@router.cloyne.org)
[06:00:48] <energizer> thanks, looking
[06:01:36] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:01:55] *** Joins: livoreno (~livoreno@user/notzmv)
[06:05:24] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[06:06:34] <energizer> man these docs are amazing
[06:11:14] <energizer> hmm i'm still missing something. I introduce a number type positive-number that implements (increment x) and another one even-number that also implements (increment x). then another type positive-even-number that's both positive-number and even-number. If I have a positive-even-number and call (increment x) on it, which implementation gets called -- positive-number's or even-number's?
[06:11:46] <energizer> er s/type/class i guess
[06:13:39] *** Joins: sm2n_ (~sm2n@user/sm2n)
[06:14:31] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[06:16:16] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 252 seconds)
[06:17:28] <moon-child> energizer: languages with typeclasses are statically typed; x will have a particular type, and that type will determine the method which is chosen.  This is completely unlike anything in cl
[06:18:54] <moon-child> so for instance, say you have typeclass String with a method add and a typeclass Int with method add.  Then you say something like:  frob :: String a => a -> a -> a;  frob x y = add x y
[06:19:37] <moon-child> that will use the method from the String typeclass because x and y have type String
[06:19:43] <moon-child> in a case when it's ambiguous, that's a compile error
[06:19:55] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[06:20:09] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[06:21:15] <energizer> so far so good
[06:21:55] *** Joins: dsk (~dsk@user/dsk)
[06:22:48] <moon-child> typeclasses generally do not inherit.  So your example with positive-even-number wouldn't be expressible
[06:24:46] <energizer> is there a similar ambiguity that could happen to a single-parameter function in cl?
[06:25:36] <energizer> for context, julia (dynamic, vaguely lispy) is trying to figure out a trait system but people are worried about how to handle the ambiguous cases for objects that have lots of traits
[06:25:45] <Josh_2> energizer: https://plaster.tymoon.eu/view/2525#2525
[06:26:07] <Josh_2> You might be interested in The Art of the Metaobject Protocol
[06:27:19] <energizer> * is the previous return value?
[06:27:27] <Josh_2> yes
[06:28:18] <energizer> ok so the answer here is that the order is determined lexically in the standard multiple-inheritance way
[06:28:40] <Josh_2> This is just the default behaviour, there is an example in AMOP that demonstrates how to change the inheritance to suit your needs
[06:29:31] <Josh_2> CLOS can be adjusted to suit the problem
[06:31:55] <energizer> thanks, i'll check that out
[06:32:44] <Josh_2> Julia should solve its problem by implementing a MOP :P
[06:33:16] <Josh_2> Then the programmers can decide how they wish to handle this problem on a case by case basis with the Julia devs providing some default behaviour
[06:33:46] <Josh_2> (or the julia programmers should just become CL devs ;) )
[06:34:13] *** Joins: wheelsucker (~user@2600:8801:8c11:4c00::707)
[06:38:13] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[06:38:26] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net)
[06:43:55] <Josh_2> huh for some reason my company mode has just stopped working in SLy
[06:46:55] *** Joins: prxq_ (~quassel@x4db46614.dyn.telefonica.de)
[06:47:07] <Josh_2> ah seems i have to hit tab now
[06:50:17] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:50:45] *** Quits: prxq (~quassel@dynamic-077-012-206-126.77.12.pool.telefonica.de) (Ping timeout: 268 seconds)
[06:55:03] *** Joins: killsushi (~killsushi@2607:fea8:3d40:767:85b5:8a20:d1dc:7eb1)
[06:55:03] *** Quits: killsushi (~killsushi@2607:fea8:3d40:767:85b5:8a20:d1dc:7eb1) (Changing host)
[06:55:03] *** Joins: killsushi (~killsushi@user/killsushi)
[07:08:34] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net) (Ping timeout: 246 seconds)
[07:31:14] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[07:31:30] *** Joins: karlosz (~karlosz@router.cloyne.org)
[07:31:46] <beach> Good morning everyone!
[07:38:20] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[07:50:30] *** Joins: Mrtn[m] (~mrtnmrtnm@2001:470:69fc:105::1f44)
[07:56:59] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[07:57:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[07:57:26] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:10:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:11:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:11:50] *** Lord_of_Life_ is now known as Lord_of_Life
[08:19:32] <Josh_2> Good morning beach
[08:25:44] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:28:39] *** Quits: cjb (~cjb@user/cjb) (Quit: brb)
[08:29:22] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[08:30:18] <Josh_2> my largest cl project is coming up on 11 thousand lines now :O
[08:31:12] <White_Flame> nice, you can get a LOT of functionality in that scope
[08:32:00] <Josh_2> I'd like to think I have used my lines wisely
[08:32:05] *** Joins: cjb (~cjb@user/cjb)
[08:32:44] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[08:32:56] *** Joins: karlosz (~karlosz@router.cloyne.org)
[08:33:22] <contrapunctus> Josh_2: that's cool, what does it do?
[08:33:41] <Josh_2> most of the code is a bot for the matrix protocol
[08:36:37] <Josh_2> I reckon most of the code in the bot is in the modules, not sure though, never counted
[08:47:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:48:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:49:46] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 268 seconds)
[09:01:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[09:14:20] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[09:20:26] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:22:29] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[09:22:47] *** Joins: livoreno (~livoreno@user/notzmv)
[09:35:18] *** markasoftware_ is now known as markasoftware
[09:39:21] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[09:39:32] <kakuhen> Is there a type associated to alists? I tried finding out by using type-of, and I am getting "CONS," which sounds a bit more general than alists to me.
[09:40:09] <beach> There is no separate type for alists.  You could create such a type, but it would have to involve SATISFIES.
[09:40:15] <beach> Why do you want a type for it?
[09:40:29] <kakuhen> because I have a class with a slot that I want exclusively for alists
[09:40:43] <beach> So don't put anything else in that slot.
[09:40:52] <mfiano> alexandria:alist
[09:41:53] <beach> I don't quite understand why so many people are so focused on declaring explicit type for things.
[09:42:10] <mfiano> Also note that TYPE-OF returns implementation-specific results.
[09:42:15] <beach> I mean, in some languages, you have to, but that's not the case for Common Lisp.
[09:43:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:43:49] <beach> kakuhen: Also, forcing an alist seems like committing to implementation details too early?  Are you sure you don't just want an instance of the dictionary abstract data type?
[09:44:06] <kakuhen> im very sure i want an alist yeah
[09:44:38] <kakuhen> regarding "declaring explicit type for things," I don't know why others want it, but I want it because I don't like silent failures when errorneous input is placed into a class' slot
[09:44:42] <kakuhen> i want it to fail miserably, and loudly at it
[09:44:54] <mfiano> beach: My guess would be either the anti-pattern that is optimizing everything, or the anti-pattern that is premature constraints
[09:44:58] *** Joins: pve (~pve@176-93-123-111.bb.dnainternet.fi)
[09:45:10] <beach> mfiano: Sounds plausible.
[09:45:55] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:45:59] <mfiano> Type checks on class slots are not mandated by the standard, and implementations that do so may change their semantics in the future
[09:46:25] <mfiano> Instead you want to make use of check-type and assert
[09:46:25] <beach> kakuhen: OK, so what happens when someone accesses this slot, gets an alist, and then does (setf (cdr alist) 234)?
[09:46:48] <beach> kakuhen: I mean, how are you planning to prevent that?
[09:47:11] <mfiano> Type checks belong on accessors, not slots, in my honest opinion.
[09:47:34] <kakuhen> well, with the implementations I've tried (sbcl, ccl, ecl), the type-checker is usually able to tell when you try setting a slot to something that violates the declared type of the slot
[09:47:35] <beach> mfiano: Yes, slots are usually implementation details anyway.
[09:47:52] <beach> kakuhen: But my example does not change the slot.
[09:47:58] <kakuhen> yeah I know
[09:48:05] <kakuhen> no idea what'd happen in the case of an alist, but ideally I'd want to be able to catch that
[09:48:14] <mfiano> kakuhen: Why write code whose semantics are subject to change across implementations, or even locally on the same implementation in the future?
[09:48:20] <beach> kakuhen: Then using types is not the right way.
[09:49:27] <kakuhen> i guess im worrying too much about intentionally wrong usage of functions im making
[09:49:31] <kakuhen> and classes
[09:49:55] <beach> kakuhen: The reason I asked about the dictionary abstract data type, because for stuff like that, it is best to define an abstract data type with accessors, and then those accessors would verify preconditions and such.
[09:50:20] <kakuhen> I see
[09:51:49] <beach> Types just represent a tiny subset of the kind of preconditions you can imagine, and that is because that's the kind of subset they force to be decidable in statically typed languages.
[10:10:00] *** Joins: derelict (~derelict@user/derelict)
[10:24:23] *** Quits: cjb (~cjb@user/cjb) (Quit: end of day)
[10:25:06] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:26:36] *** Quits: killsushi (~killsushi@user/killsushi) (Read error: Connection reset by peer)
[10:27:43] *** Joins: killsushi (~killsushi@user/killsushi)
[10:29:19] <flip214> pjb: ack, thanks for the confirmation!
[10:32:10] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 265 seconds)
[10:43:03] *** Joins: shka (~herr@109.231.62.239)
[10:49:04] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[10:59:50] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[11:05:20] *** prxq_ is now known as prxq
[11:14:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:14:38] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[11:16:07] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[11:16:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:26:31] <kakuhen> is there a function like POSITION but for arrays?
[11:30:34] <dsk> kakuhen: Yes. POSITION. :)
[11:30:38] <kakuhen> confusing
[11:30:50] <kakuhen> the hyperspec says the sequence must be "proper" i.e. vector or list only
[11:30:53] <dsk> Unless you mean multidimensional arrays?
[11:31:00] <kakuhen> Yeah. I am dealing with 2d array, not vector.
[11:31:35] <kakuhen> I haven't been able to find a built-in function for this, but if there isn't any, then it's fine
[11:31:40] <kakuhen> Just means I have a make a helper function
[11:31:53] <dsk> Ah, I see. Well, you could create a vector displaced to the 2d array, then.
[11:31:55] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:32:45] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[11:33:26] *** Quits: terpri (~terpri@user/terpri) (Remote host closed the connection)
[11:33:40] *** Joins: terpri (~terpri@user/terpri)
[11:37:06] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[11:39:57] *** Joins: seok (~Seok@49.2.163.56)
[11:44:44] *** Joins: treflip (~user@95.79.32.99)
[11:44:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[11:58:36] <coat> reading uiop source code: https://github.com/fare/asdf/blob/master/uiop/stream.lisp cannot find a consistent convention for docstring. some docstrings are declartive ("Calls FUNCTION with") but some are imperative ("Transform a portable ENCODING keyword"). is there any popular or preferred convention?
[11:58:59] <coat> any good CL project source code I can read to pick good style and convention?
[12:02:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[12:03:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[12:04:00] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[12:04:09] *** Joins: Tomte (~th@p200300db9f189400b9a216b454efd9d0.dip0.t-ipconnect.de)
[12:08:30] *** Joins: karlosz (~karlosz@router.cloyne.org)
[12:09:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:09:59] *** Quits: karlosz (~karlosz@router.cloyne.org) (Client Quit)
[12:10:02] <beach> coat: A function that deserves a documentation string is often part of a "protocol" which is generalization of an "interface".
[12:10:31] *** Joins: karlosz (~karlosz@router.cloyne.org)
[12:10:53] <beach> coat: Then, you need to document things like the preconditions, the postconditions, and the invariants that the function requires and provides.
[12:12:10] <coat> beach: is there a preferred grammar convention for such documentation, "Validate such and such thing" vs. "Validates such and such thing"?
[12:12:14] <beach> coat: And you need to document the return value(s) and how they are obtained based on the input values, and perhaps on some internal state of some object.  Finally, you need to document the way the function changes any such state.
[12:12:47] <beach> coat: I use (what used to be) the GNU convention which is to use the imperative form.
[12:13:02] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[12:13:02] <beach> But I have not seen any such convention written down.
[12:13:22] <coat> beach: thanks
[12:13:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[12:13:48] <coat> beach: what is the GNU convention? where did GNU use Lisp?
[12:13:57] <coat> Emacs? Emacs Lisp?
[12:14:09] <beach> Not specifically for Lisp.
[12:14:24] <beach> The GNU convention is, or used to be, to use the imperative form.
[12:14:40] <coat> okay
[12:14:50] <beach> "Givcen a 2-3-tree and an object, insert the object into the tree.  Return the modified tree."
[12:14:55] <beach> Stuff like that.
[12:14:56] <splittist> coat: I think that during development, consistency is the key thing (rather than the particular convention), as it will help you spot patterns and exceptions. When it comes to 'final' documentation for third-party consumers (which might be you in 6 months, of course), you should think from the 'outside in' (as beach describes) - starting with the overall picture and describing how the element fits into that.
[12:27:24] <coat> since COND can do everything IF can, do you use IF in practice? Or do you simply use COND, WHEN, UNLESS and never use IF?
[12:29:37] <beach> coat: Did I not tell you the general rule in programming to use the most precise construct that will do the trick?
[12:30:14] <beach> coat: If is used in a context where a value is needed, and it should have both a `then' branch and an `else' branch.
[12:30:47] <beach> WHEN and UNLESS are used in a context where there is only one branch, and where the value of the form is not needed.
[12:30:48] <coat> beach: Hard to decide which one is more precise between IF and COND since both can support then branch and an else branch.
[12:31:01] <coat> I know when to use WHEN and UNLESS. no confusion there.
[12:31:32] <coat> my confusion is with COND vs. IF. do not see why I should ever use IF if COND does it what it can.
[12:31:35] <beach> COND is used when you have more than two possible cases, or some people may use it to avoid a PROGN with the IF.
[12:32:16] <beach> Because CONS is more general, so by using IF when you can, you immediately tell the person reading your code that there are only two possible cases.
[12:32:38] <beach> That's the general rule I am referring to.
[12:32:56] <beach> er, COND, not CONS.
[12:33:06] <kakuhen> yeah, and IF will complain when you do not provide any code for the second case
[12:33:18] <kakuhen> because of what beach said
[12:33:22] <beach> Really?  It should not.
[12:33:28] <beach> Because the standard allows for that.
[12:33:35] <kakuhen> oh i guess my implementation does that then, but not all of them do
[12:33:49] <kakuhen> if you use IF like WHEN then it will throw a warning iirc
[12:34:38] <beach> And here is another general rule of programming: the set of idiomatic phrases of any programming language (or natural language for that matter) is a tiny subset of the set of grammatical phrases.  And you should always use only idiomatic phrases.
[12:34:50] <moon-child> it would be nice if it could do the opposite, too
[12:35:04] <moon-child> (issue a warning when 'when' is used in the manner of 'if')
[12:35:18] * splittist still thinks comprehensive COND-MY-IF, IF-MY-COND, WHEN-MY-IF etc functionality is desirable in an IDE
[12:35:24] <beach> kakuhen: Warnings are "signaled" and not "thrown" in Common Lisp.  The THROW function does something entirely different.
[12:35:25] <coat> yes, idioms are what I am trying to learn when I ask these questions
[12:35:33] <moon-child> beach: maybe not _always_, certainly most of the time
[12:36:32] <beach> I usually allow myself to make "pedagogical simplifications" in order to keep my utterances reasonably short.
[12:36:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:49] <coat> Is it just me or are the parentheses screwed up in this answer: https://stackoverflow.com/a/7867968 the answer writes: (cond ((x y) (t z))). should it not be (cond (x y) (t z))?
[12:37:04] <kakuhen> the answer is written correctly
[12:37:15] <kakuhen> cond takes in a list of lists
[12:37:21] <moon-child> beach: 'And you should use idiomatic phrases' is terser yet! :)
[12:37:26] <kakuhen> and each individual list contains a condition and then what to do when it holds
[12:37:34] <beach> moon-child: Point taken.
[12:38:23] <beach> coat: You are right.
[12:38:30] <beach> The parentheses are screwed up.
[12:38:47] <coat> kakuhen: if that answer is written correctly, why does this error out: (cond ((t "hello")))
[12:39:08] <beach> (cond (x y) (t z)) is right.
[12:39:15] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[12:39:17] <flip214> coat: is the condition X or (X Y), ie. a function call?
[12:39:17] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[12:39:24] *** Quits: Mrtn[m] (~mrtnmrtnm@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[12:39:30] <coat> kakuhen: should it not be: (cond (t "hello"))
[12:39:32] <coat> beach: thanks
[12:39:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:41] <beach> flip214: It is supposed to be the same as (if x y z).
[12:39:44] <flip214> the first one is more likely, as T has no function value (typically)
[12:39:55] <flip214> beach: ah, thanks.
[12:40:04] <jmercouris> beach: good morning!
[12:40:11] <kakuhen> coat: yeah I didn't see how x y z were being used
[12:40:12] <beach> Hello jmercouris.
[12:40:25] <kakuhen> most of the time I use COND in my code it ends up looking like the answer
[12:40:49] <jmercouris> you can also use MATCH from optima or trivia
[12:42:05] <kakuhen> coat: e.g. as follows:  (cond ((= 4 5) (format t "crazy~%") ('t (format t "sane~%"))))
[12:42:15] <beach> jmercouris: Sure, if you want to confuse newbies even more than they already are.
[12:42:21] <kakuhen> just imagine the newline characters are there
[12:42:37] <jmercouris> :-D
[12:42:55] <beach> kakuhen: What is that code supposed to mean?  It looks wrong in several ways.
[12:43:35] <kakuhen> missing parentheses now that i see it a second time
[12:43:40] <beach> kakuhen: Please make an attempt to get your code right, especially when you are answering requests for advice.
[12:43:53] <beach> kakuhen: And what on earth is 't?
[12:44:01] <kakuhen> true
[12:44:04] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[12:44:16] <kakuhen> In some codebases I see it written that way
[12:44:22] <jmercouris> Really?
[12:44:24] <jmercouris> which codebase?
[12:44:25] <moon-child> perhaps there should be a 'useless use of QUOTE' award, à la cat
[12:44:39] <jmercouris> let me know so I can avoid said codebase
[12:44:41] <moon-child> kakuhen: my, I have never seen that
[12:45:36] <beach> kakuhen: That is definitely not idiomatic.
[12:46:08] <beach> kakuhen: You should create an "issue" for that code.
[12:46:42] <moon-child> I wonder if it dates to some historic lisp dialect where t and nil were not self-evaluating?
[12:46:57] <beach> Possibly.
[12:47:37] <kakuhen> agh, i was searching in the textbook i saw this and now i can't find the example
[12:47:50] <kakuhen> beach: granted, the instances i saw this happen  were in emacs lisp, not common lisp
[12:47:58] <kakuhen> i have no idea how the conventions differ
[12:50:25] <susam> coat: That answer indeed has an error. I have gone ahead and fixed it and also included kakuhen's example to that answer for further clarity: https://stackoverflow.com/a/7867968/303363 .
[12:50:44] <kakuhen> the example i gave had unbalanced parens so i hope you fixed that
[12:50:53] <pjb> Well originally, 1 was used in cond, but in the first lisps, there was no characters, so strings were expanded to lists of symbols, and the symbol T was not NIL (which was 0), so (COND (T …)) would have worked as well as (COND (1 …)).
[12:51:08] <pjb> So I don't think T was ever not true.
[12:51:50] <kakuhen> once you fix my "example," it should be: (cond ((= 4 5) (format t "crazy~%")) (t (format t "sane~%")))
[12:52:47] <susam> kakuhen: Yes, fixed that. Tested it on REPL before adding it to the SO answer.
[12:56:28] *** Joins: selwyn (~selwyn@user/selwyn)
[12:58:38] <kakuhen> beach: OK I have found an instance of 't being used
[12:58:39] <kakuhen> https://i.imgur.com/VKXVeVu.png
[12:58:47] <kakuhen> believe it or not, this is not the first time I've seen this.
[12:59:00] <jmercouris> who said Paul Grahm is a good programmer?
[12:59:18] <pjb> kakuhen: but it's not useful.
[12:59:24] <kakuhen> irrelevant question; I'm simply denoting where I've seen this happen
[12:59:38] <jmercouris> the question is most relevant
[13:00:53] <kakuhen> sure, perhaps a "good programmer" would know better to not use 't, but the original question was where could I have possibly seen this
[13:01:11] <kakuhen> would know better and not use*
[13:02:26] <beach> kakuhen: Paul Graham is not known for respecting conventions.
[13:02:46] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[13:02:58] <kakuhen> "not known for respecting conventions" or "known for not respecting" conventions?
[13:03:08] <beach> Sorry, the latter.
[13:03:29] <kakuhen> ok that makes sense to me then
[13:04:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[13:11:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[13:25:07] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[13:25:11] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[13:25:21] *** Joins: dsk (~dsk@user/dsk)
[13:26:31] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[13:27:27] <dsk> I think the "point" of quoted T in that specific PG code was not assuming the existence of T and NIL in a toy interpreter. He doesn't do that in any of his book code.
[13:28:17] <beach> Makes sense.
[13:28:27] <moon-child> well, you have to assume the existence of NIL to at least some degree.  T less so.  But that does make sense
[13:34:33] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3926:1fd0:955c:64c4)
[13:45:37] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:50:12] <pjb> (defconstant else t)  (cond (foo bar) (else quux)) ; scheme like.
[13:51:32] <moon-child> pjb: afaik in scheme 'else' is special-cased by cond; you can't use it in any other context
[13:51:46] <moon-child> can't use it that way in any other context, I should say
[13:51:54] <beach> So like our OTHERWISE?
[13:53:03] <pjb> Yes, but otherwise is for case, not cond.
[13:53:10] <beach> Right.
[13:53:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:55:23] <splittist> That keeps tripping me up
[14:00:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:00:05] <dsk> OTHERWISE is necessary in CASE because you might want to check if the value of the test key is T.
[14:00:32] <dsk> Well, that's not exactly true, you can also use T, but that gets confusing.
[14:01:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:05:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:15:16] <mfiano> dsk: One can use ((t ...) ..) for that.
[14:16:42] <jackdaniel> moreover when you test for nil, you must ((nil) …)
[14:16:44] <dsk> mfiano: Right, but (case test-key ((t) ...) (t ...)) is visually confusing, as is (case test-key ((otherwise) ...) (otherwise ...))
[14:16:53] <jackdaniel> otherwise it will be treat as (() …) ,)
[14:16:55] <mfiano> (case t (b "B") ((a t) "A or T")) ; => "A or T"
[14:17:43] <mfiano> I don't see how it is confusing. It is very intuitive
[14:23:30] <dsk> Fair enough, carry on then.
[14:24:48] <mfiano> I could see how something like this might be confusing, which is probably why such a long word (that I never use) was chosen: (case 'otherwise ((otherwise) "otherwise") (otherwise "everything else"))
[14:24:48] <dsk> I suppose I'm just guessing at why OTHERWISE exists in the first place.
[14:39:02] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:41:48] *** Quits: xantoz (~tewi_inab@c-e0bfe255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[14:41:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:46:36] *** Joins: lotuseater (~user@p200300e787025700249b68ce60a870ab.dip0.t-ipconnect.de)
[14:49:38] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:f92:909b:2dfd:23e7)
[14:52:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[14:54:02] <jackdaniel> jmercouris: while I can't tell whether he is a good programmer, he is (was) certainly a good teacher of common lisp; his books are excellent learning material (even if opinionated)
[14:56:54] <mfiano> More opinionated than Hoyte? ;)
[14:56:58] <jackdaniel> nah
[14:57:02] *** Quits: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:57:31] *** Joins: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de)
[14:57:36] <jackdaniel> and I think that pcl is also opinionated (but more aligned with the prevailing cl style)
[14:58:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[14:58:22] <jackdaniel> (on the other hand, cl as a standard is fairly unopinionated)
[14:58:47] <jackdaniel> now put your favourite meaning to a vaglue word "opinion" and cheerfully agree ,-)
[14:58:50] <jackdaniel> vague*
[14:58:56] <mfiano> I opine that most Lispers are very opinionated.
[14:59:31] <jackdaniel> :)
[14:59:49] <edgar-rft> who wants to read a book from an author who has no opinion? :-)
[15:01:29] <jackdaniel> alright, I admit that this was not the best word to describe this particular quality of pg books ,) either way, my point is that I've found his CL books to be very good:)
[15:04:38] <edgar-rft> In my experience a good way to learn something is to work with people who see things different than yourself. Who is right we'll see in the end.
[15:15:25] <shka> hi all
[15:15:47] <shka> how do i obtain exit code from the uiop proccess-info?
[15:16:14] <shka> uh, sorry i am silly, there is wait-proccess
[15:28:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:33:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[15:41:51] *** Quits: Tomte (~th@p200300db9f189400b9a216b454efd9d0.dip0.t-ipconnect.de) (Quit: Leaving)
[15:44:15] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[15:48:12] *** Joins: selwyn (~selwyn@user/selwyn)
[15:55:49] *** Joins: lisp123 (~user@80.227.170.170)
[15:56:53] <lisp123> if I have (let ((values (fn-that-returns-values ...)))) where fn-that-returns-values returns via (values ...), will I lose the other values if I don't put in a multiple value bind?
[15:57:23] <lisp123> or can i keep returning (values ...) up a stack and only need multiple value bind to catch them when I need them?
[15:57:32] <lisp123> I assume the former, but its a bit annoying..
[15:59:24] <susam> lisp123: Definitely the former. The extra values would be lost without multiple-value-bind. It should be easy to test it out.
[15:59:40] <lisp123> susam: I suspected as much
[15:59:58] <lisp123> thanks
[16:01:31] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:01:34] <lisp123> I think I will try and write a macro that combines let and m-v-b
[16:02:13] <lisp123> e.g. (let* ((x 55)((y z) (values 32 49)))...) and it works
[16:02:17] <splittist> Why not? Everyone else has (:
[16:02:53] <lisp123> really? thats nice to hear
[16:03:19] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:05:12] <lisp123> I guess I could just use a structure
[16:05:42] <lisp123> maybe that's the canonical way and m-v-b should be relegated to only prototyping
[16:05:45] <phadthai> or a list, or vector, or clos type
[16:07:04] <lisp123> phadthai: I use list a lot but sometimes it has issues when you get to the last e-element and have nils
[16:07:08] <phadthai> I fould returning values useful for C FFI layers where return value as well as errno were useful
[16:07:25] <phadthai> a second value that is
[16:07:34] <lisp123> that makes sense
[16:07:53] <lisp123> so not a "main" value, but something that is useful from time to time
[16:09:12] <phadthai> so in a way it's similar to optional arguments, but optional additional return information
[16:09:47] <lisp123> makes sense
[16:12:18] <lisp123> and perhaps within a function, i.e. the values are not meant to be passed outside the funciton but only between parts of a function
[16:12:58] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[16:13:13] <phadthai> in the case of FFI it was a low-level layer, with higher level conditions able to use and present the extra information in a more lispy way
[16:13:22] *** Joins: selwyn (~selwyn@user/selwyn)
[16:18:31] <lisp123> good to know
[16:22:37] <yitzi> drmeister Bike: I've hit a wall on both Arch and Ubuntu during build. I am getting this https://plaster.tymoon.eu/view/2526#2526
[16:22:53] <yitzi> Sorry...wrong room
[16:24:12] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[16:40:24] *** Joins: derelict (~derelict@user/derelict)
[16:41:25] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 246 seconds)
[16:43:44] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[16:45:00] *** Quits: amk (~amk@176.61.106.150) (Remote host closed the connection)
[16:48:19] *** Joins: amk (~amk@176.61.106.150)
[16:49:18] <jmercouris> does anyone remember a "visual" scheme programming language?
[16:49:27] <jmercouris> wait a second, we have a log!
[16:51:36] <jmercouris> in case anyone is wondering: https://github.com/disconcision/fructure
[16:55:03] <contrapunctus> jmercouris: wow. That's fancy, thanks for sharing.
[16:55:08] *** Joins: makomo (~makomo@user/makomo)
[16:55:23] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[16:58:41] <jmercouris> it really makes you think how it could be
[16:59:22] *** Joins: Bike (~Glossina@71.69.170.70)
[16:59:22] *** ChanServ sets mode: +o Bike
[16:59:54] *** Quits: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[17:00:55] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[17:29:51] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[17:29:56] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[17:34:31] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:53:44] *** Joins: Equill (~Equill@1.red-83-37-200.dynamicip.rima-tde.net)
[17:57:29] *** Quits: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:58:00] *** Joins: frgo (~frgo@p200300deef27d700047bf6e529dfc11d.dip0.t-ipconnect.de)
[17:58:19] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[18:06:40] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Quit: Leaving)
[18:08:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:13:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[18:14:49] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[18:20:42] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:21:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:24:23] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[18:25:57] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[18:38:59] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[18:41:26] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[18:45:16] *** Joins: slant (~ssnatt@187.232.49.40)
[19:02:54] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[19:07:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:15:25] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 246 seconds)
[19:20:42] *** Quits: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[19:21:18] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[19:23:01] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[19:30:30] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[19:34:40] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[19:37:16] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[19:38:04] *** Joins: amb007 (~a_bakic@50.147.204.77.rev.sfr.net)
[19:40:08] <Josh_2> Helloo
[19:49:54] <beach> Hello Josh_2.
[19:59:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[20:01:52] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:01:52] <Josh_2> Hi beach how is your work coming along?
[20:02:34] <beach> Slow but steady progress, thank you.  Yours is going well apparently.
[20:04:48] <Josh_2> Yes its going well, been working non stop on it, my life cycle is currently eat sleep code workout xD
[20:05:27] <beach> Mine is close.  I add "spend time with my (admittedly small) family", and "go buy food".
[20:10:21] <coat> so do you both use CL for work too? what kind of job do I need to look for to be able to use CL for work?
[20:10:27] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[20:10:45] <Josh_2> I am trying to make my own work, could go wrong, could go well
[20:10:46] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[20:11:55] <beach> coat: I am a researcher, and I use Common Lisp both as a tool in my work and as the subject of my research.
[20:12:35] <beach> coat: My main project: https://github.com/robert-strandh/SICL
[20:12:47] <coat> beach: that is nice! do you also see your peers using CL as tool and as subject of research?
[20:13:00] <beach> A few.
[20:14:12] <beach> coat: my favorite coauthor for instance: https://dept-info.labri.fr/~idurand/
[20:15:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:15:43] <susam> beach: I like your website a lot. Bookmarking it. Many nice articles to read there.
[20:16:00] <beach> Thank you.
[20:19:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:19:24] *** Quits: amb007 (~a_bakic@50.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:20:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:24:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 246 seconds)
[20:25:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:25:45] *** Joins: pve_ (~pve@37-136-236-183.rev.dnainternet.fi)
[20:29:30] *** Quits: pve (~pve@176-93-123-111.bb.dnainternet.fi) (Ping timeout: 272 seconds)
[20:30:50] <flip214> Is there a library that returns 4KB for an input of 4096, and 10.4MB for 10600000, etc.?
[20:34:33] <shka> flip214: you wanna convert units?
[20:35:17] <flip214> shka: well, only nicely format sizes given in bytes to KB, MB, etc.
[20:38:57] <shka> i see
[20:39:02] *** Quits: raeda (~raeda@24.18.16.139) (Ping timeout: 252 seconds)
[20:39:16] <shka> well, if that's all you need, you may just roll your own
[20:39:17] <flip214> never mind, did a quick hack
[20:39:26] <shka> ok, great!
[20:39:55] <flip214> with <2000, I didn't want any decimal point (as there is none in integers!), but bigger things should have one, etc.
[20:41:44] *** Joins: tfb (~tfb@88.98.95.237)
[20:48:23] *** Joins: raeda (~raeda@24.18.16.139)
[20:52:40] *** Joins: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it)
[20:57:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[20:57:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:15:26] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[21:26:37] *** Joins: sm2n (~sm2n@user/sm2n)
[21:28:53] *** Quits: sm2n_ (~sm2n@user/sm2n) (Ping timeout: 268 seconds)
[21:32:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[21:33:02] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:33:55] *** Quits: Equill (~Equill@1.red-83-37-200.dynamicip.rima-tde.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[21:38:49] *** Quits: frgo (~frgo@p200300deef27d700047bf6e529dfc11d.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:38:52] *** Joins: frgo_ (~frgo@p200300deef27d700047bf6e529dfc11d.dip0.t-ipconnect.de)
[21:39:21] *** Joins: lad (~lad@user/lad)
[21:40:20] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[21:43:34] *** Joins: mojvei (~mojvei@user/mojvei)
[21:43:39] *** Joins: frgo (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[21:45:41] *** Joins: karlosz (~karlosz@router.cloyne.org)
[21:46:47] *** Quits: mojvei (~mojvei@user/mojvei) (Client Quit)
[21:46:52] *** Quits: frgo (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:47:08] *** Joins: mojvei (~mojvei@gateway.audioauthority.com)
[21:47:08] *** Quits: frgo_ (~frgo@p200300deef27d700047bf6e529dfc11d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:47:22] *** Joins: frgo (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[21:47:31] *** Quits: mojvei (~mojvei@gateway.audioauthority.com) (Client Quit)
[21:49:26] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:51:53] *** Joins: dlowe (~dlowe@user/dlowe)
[21:53:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[22:07:52] *** Quits: frgo (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:08:22] *** Joins: frgo (~frgo@p200300deef27d700d0643dcd3f2456be.dip0.t-ipconnect.de)
[22:09:26] <lisp123_> I read somewhere that flycheck provides on-the-fly syntax checking
[22:10:54] <lisp123_> something I should explore? TBH through formatting I don't really make much mistakes, the worse thing I do is accidentally having a function as a variable or vice versa (e.g. (+ 1 (+ 1 2)) vs (+ 1 + 1 2) (wrong
[22:13:03] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Quit: Leaving)
[22:15:20] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[22:18:03] <clos-encounters> while writing macros that expand into defmethod forms, I read in the hyperspec that method qalifiers can be any object. I was surprised because I'd enver seen qualifers as anything but keyword objects. How common is it to see non-keyword qualifiers, and does anyone know of code out there for parsing the cdr of a defmethod form?
[22:20:29] <Bike> using custom qualifiers at all is not common, but i've seen numbers once or twice, and i think there's an example with them in clhs or amop somewhere
[22:21:28] <Bike> for parsing defmethod, any implementation has code for it; for example here's sbcl's https://github.com/sbcl/sbcl/blob/master/src/pcl/boot.lisp#L2869-L2880
[22:21:54] <clos-encounters> super thanks
[22:21:59] <Bike> it's not that complicated, just that the first list you hit is the lambda list, and everything before that is a qualifier
[22:22:56] <clos-encounters> yeah makes sense. I see you've already been where my brain is now.
[22:23:16] *** Joins: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[22:26:18] *** Quits: frgo (~frgo@p200300deef27d700d0643dcd3f2456be.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:26:59] *** Joins: selwyn (~selwyn@user/selwyn)
[22:27:01] *** Quits: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:27:31] *** Joins: frgo (~frgo@p200300deef27d700a03c31f204677592.dip0.t-ipconnect.de)
[22:48:27] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[22:49:29] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:50:11] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[22:52:18] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:53:24] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:54:10] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:56:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[22:57:57] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:01:47] *** pve_ is now known as pve
[23:03:11] *** Quits: slant (~ssnatt@187.232.49.40) (Ping timeout: 256 seconds)
[23:16:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:19:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[23:23:51] *** Joins: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[23:26:42] *** Quits: frgo (~frgo@p200300deef27d700a03c31f204677592.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:27:53] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[23:28:29] *** Quits: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:28:59] *** Joins: frgo (~frgo@p200300deef27d70025d40f4c32a50ea1.dip0.t-ipconnect.de)
[23:31:17] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[23:32:19] *** Quits: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de) (Ping timeout: 246 seconds)
[23:34:25] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[23:34:26] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6BA0-dynamic.midco.net)
[23:46:11] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:46:56] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:47:05] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:47:18] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:48:32] <jcowan> I would probably write 't or 'nil to communicate the intention of using them as particular symbols.
[23:49:07] <jcowan> By the way, does the term "exception" actually have a technical meanimng in CL talk?
[23:52:14] <dlowe> It does not.
[23:52:43] *** Quits: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:52:52] *** Joins: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[23:53:54] <dlowe> You throw and catch tags in CL.  You can signal conditions.  If you say "throw exception" most people will know what you mean, but some will argue about it.
[23:54:08] <dlowe> So avoid it unless you like arguments.
[23:55:53] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:f92:909b:2dfd:23e7) (Ping timeout: 256 seconds)
[23:56:27] *** Quits: frgo (~frgo@p200300deef27d70025d40f4c32a50ea1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:56:52] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6BA0-dynamic.midco.net) (Quit: #commonlisp)
[23:57:44] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
