[00:04:04] <engblom> jackdaniel: Got it, it was in gethash that the arguments were in wrong order. Now it does not give any error message, but it also does not set the value
[00:04:56] <mfiano> Are both of these equivalent? https://plaster.tymoon.eu/view/2758#
[00:05:48] <jackdaniel> engblom: it does here. you need to be more specific
[00:05:53] <pjb> mfiano: try macroexpand.
[00:06:56] <mfiano> pjb: That is only going to leave me with the same question.
[00:07:01] <mfiano> I have already done that
[00:07:06] <pjb> so the answer is in cffi::notice-foreign-struct-definition
[00:07:55] <mfiano> I'm not asking if the expansion is the same.
[00:08:00] <mfiano> I'm asking if the semantics are
[00:08:07] <mfiano> Obvious the semantics are not
[00:08:11] <mfiano> err the expansion is not
[00:08:16] <pjb> the answer is probably in the documentations, but if not, in cffi::notice-foreign-struct-definition.
[00:08:28] <engblom> jackdaniel: So, I have a globally definied variable. It is a nested structure consisting of hash-tables and plists. I try to alter a value by giving the whole path given by the keys. When I run your function with value 5, it does not change the value to 5. It is still the old value when I check up the data structure.
[00:09:59] <pjb> engblom: http://groups.google.com/group/comp.lang.lisp/msg/1bab4b5bae1fdca3 http://groups.google.com/group/comp.lang.lisp/msg/190d771c0e033a1c
[00:10:51] <mfiano> Quick glance at the code suggests it keeps an accumulated offset
[00:11:02] <mfiano> I'll say 'yes', and move on
[00:18:10] <pjb> engblom: https://termbin.com/4mvq
[00:18:15] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:19:28] <jackdaniel> engblom: https://plaster.tymoon.eu/view/2758#2759 perhaps this
[00:19:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:20:11] * jackdaniel goes to bed, see you \o
[00:23:15] <engblom> jackdaniel: That one replaced the whole inner plist with the value
[00:24:12] <jackdaniel> perhaps you were short by one key?
[00:24:46] <jackdaniel> I think that you have enough material to experiment, let me know if you have succeeded (I'll read the logs tomorrow)
[00:26:16] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:26:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[00:26:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:29:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:30:35] <engblom> pjb, jackdaniel: thank you both. I have saved the code snippets you have created and I will test more tomorrow. It is very late here too, and my children wants to go to sleep so I need to quit here
[00:33:59] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 252 seconds)
[00:38:43] *** Quits: dra (~dra@2a04:4540:6406:7f00:e129:4a92:f9f4:8dd4) (Remote host closed the connection)
[00:50:59] *** Joins: cjb (~cjb@user/cjb)
[00:55:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:56:35] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:58:34] <mfiano> How can I allocate a foreign buffer of N bytes with CFFI, if I don't want to calculate it based on "count" of "type"?
[00:58:47] <mfiano> just an opaque region of memory
[01:01:29] <pjb> Use :char as type.
[01:01:43] <yitzi> use a type of '(unsidgned-byte 8)
[01:01:52] <pjb> this is not foreign.
[01:02:03] <yitzi> gotcha.
[01:02:54] <pjb> (cffi:FOREIGN-ALLOC :char :initial-element 0 :count 10)
[01:03:03] <pjb> or :uchar
[01:04:09] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[01:06:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:07:32] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:12:42] <mfiano> pjb: Thanks. I just wrote my first bit of cffi ever
[01:12:43] <mfiano> https://gist.github.com/mfiano/6242d8bb0bd4a2c4d2ae8f34e10ea1b6
[01:13:00] <mfiano> I am probably doing this very poorly, but it at least works
[01:15:22] <pjb> Seems ok.
[01:15:23] <mfiano> I was originally passing in the type to the macro and getting the foreign type size of that, but this can change dynamically, and that is a bad idea the syscall manual says, so the first syscall in the macro figures out the actual size of a buffer it will write to
[01:15:47] <pjb> Indeed. C API need to be like that.
[01:16:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:17:26] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 252 seconds)
[01:18:16] *** Joins: aeth (~aeth@user/aeth)
[01:18:40] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:4487:5a6:65b7:338f)
[01:24:43] <Guest74> are there any good macro tutorials out there?
[01:25:04] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[01:29:02] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[01:34:29] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 252 seconds)
[01:35:49] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:5c1:dc6b:2621:94)
[01:36:38] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[01:38:14] <frgo> Guest74: http://www.paulgraham.com/onlisp.html
[01:39:32] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:4487:5a6:65b7:338f) (Ping timeout: 240 seconds)
[01:48:25] *** Quits: op2 (~op2@user/op2) (Ping timeout: 252 seconds)
[01:50:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[01:51:54] <pdietz> My suggestion for macros is to not try to use quasi-quote to generate quasi-quote forms.Â  Put the guts off in a function somewhere.
[01:54:25] <Guest74> my problem was wanting to pass in a list as a symbol, process that list in a function, and splice it into the expansion.  Was, because dexador doesn't seem to work inside the macro with https, or without a port.
[01:56:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:56:53] <Guest74> and now it works.
[01:58:40] <Guest74> now back to wanting to pass in a special holding a list.
[01:58:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[02:01:34] *** Joins: mrcom__ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:02:43] *** Quits: mrcom_ (~mrcom@2600:1700:c630:a570:b408:bef8:4556:55db) (Ping timeout: 252 seconds)
[02:04:55] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[02:05:01] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[02:09:41] *** Quits: dre (~dre@2001:8003:c932:c301:4931:2ba9:a613:d21a) (Ping timeout: 252 seconds)
[02:11:12] *** Joins: notzmv (~zmv@user/notzmv)
[02:11:50] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[02:12:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:31:44] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3d1a:2054:daf4:e1d)
[02:35:02] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:5c1:dc6b:2621:94) (Ping timeout: 240 seconds)
[02:35:30] *** Joins: igemnace (~ian@user/igemnace)
[02:39:32] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[02:53:27] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 256 seconds)
[02:55:50] *** Quits: pve (~pve@213-216-233-31.bb.dnainternet.fi) (Quit: leaving)
[03:03:35] *** Quits: gaqwas (~john@dynamic-077-004-038-236.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:06:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:06:54] *** Joins: akoana (~ah@user/akoana)
[03:10:28] *** Quits: abrahms665920 (~abrahms66@163.116.138.113) (Ping timeout: 256 seconds)
[03:14:06] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3d1a:2054:daf4:e1d) (Ping timeout: 245 seconds)
[03:18:08] *** Joins: dre (~dre@60.229.45.121)
[03:27:50] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:30:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:31:23] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:32:07] *** Quits: zos (~zos@ool-457a8044.dyn.optonline.net) (Quit: Leaving)
[03:33:14] <Xach> pdietz: i tend to do that for the more complex macros - stitch together parts from separate functions that can be traced/tested independently during development. but for small things i often do it directly.
[03:33:20] * Xach is thrown off by the missing "f"
[03:36:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:48:35] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[04:04:17] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:06:39] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[04:07:00] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[04:16:33] *** Quits: yewscion (~yewscion@2604:ca00:158:43c::60:83b0) (Ping timeout: 252 seconds)
[04:17:39] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 252 seconds)
[04:26:47] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:00:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:00:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:08:02] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 240 seconds)
[05:11:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[05:12:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:14:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:15:08] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:40:21] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[05:48:06] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:58:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:00:47] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:03:15] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Client Quit)
[06:05:24] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:13:56] *** Joins: srhm (~srhm@user/srhm)
[06:14:38] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:32:31] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[06:38:28] <Guest74> How do you get emacs to change the indentation of a macro? I have this https://plaster.tymoon.eu/view/2760#2760 which looks really ugly in the editor because :headers gets indented only 2 spaces.
[06:51:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f767:b15a:e5b1:96f0) (Ping timeout: 268 seconds)
[06:52:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c)
[07:03:46] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[07:03:59] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:07:43] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:07:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:08:34] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:08:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[07:10:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[07:10:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:17:49] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:18:42] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:22:22] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[07:22:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:22:53] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[07:28:16] <dre> Guest74, use &rest or something along those lines
[07:30:37] <beach> Good morning everyone!
[07:30:58] <dre> Good morning!
[07:34:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:35:12] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[07:42:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:47:18] <Guest74> dre: I don't understand how that is going to change emacs indenting.
[07:49:36] <White_Flame> &rest, &body, and normal terms in the defmacro affect how its usage is indented
[07:49:50] <White_Flame> *in the defmacro's lambda list
[07:50:34] <Guest74> &rest doesn't affect it.  There's a &key in there.
[07:51:01] <beach> Guest74: 2 spaces is the usual indentation.
[07:51:53] <Guest74> for lambda lists?
[07:52:37] <beach> That doesn't look like a lambda list to me.
[07:53:22] <Guest74> it is all part of the macros lambda list
[07:53:51] <beach> I don't see a DEFMACRO in there.
[08:03:36] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:03:36] <beach> It would be highly unusual for a keyword such as :headers to be part of a lambda list.
[08:03:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:04:12] <beach> The only place where it would be allowed would be in a &KEY parameter to change the default keyword used in the argument.
[08:04:40] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:05:11] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:06:11] <beach> ... as in &KEY ((:HEADERS something-other-than-HEADERS))
[08:10:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:12:41] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:23:17] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[08:25:30] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:25:34] *** Joins: semz (~none@user/semz)
[08:28:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:32:07] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[08:41:55] <pillton> Is there a convention for naming "collection" operators where 1) a function is applied to each element of a collection and the results are ignored and 2) a new collection is created from the results of applying a function to each element of a collection?
[08:43:53] <beach> Both wold typically be prefixed with MAP-, but I don't know of any distinction between the two cases.
[08:45:31] <pillton> beach: Yes. MAP is an outlier as it is capable of (1) and (2).
[08:51:32] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 268 seconds)
[08:55:07] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[08:55:22] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[08:56:28] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[08:56:28] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[08:56:28] *** Quits: kdlv (~kdlv@user/kdlv) (*.net *.split)
[08:56:28] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[08:56:28] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[08:56:29] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[08:56:29] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[08:56:29] *** Quits: jurov (~jurov@rev-81-92-255-36.radiolan.sk) (*.net *.split)
[08:56:29] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[08:56:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (*.net *.split)
[08:56:29] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c) (*.net *.split)
[08:56:29] *** Quits: srhm (~srhm@user/srhm) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: dre (~dre@60.229.45.121) (*.net *.split)
[08:56:29] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[08:56:29] *** Quits: mrcom__ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[08:56:29] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[08:56:29] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[08:56:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[08:56:29] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[08:56:29] *** Quits: sander (~sander@user/sander) (*.net *.split)
[08:56:29] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[08:56:29] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[08:56:29] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[08:56:30] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[08:56:30] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[08:56:30] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[08:56:30] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[08:56:30] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[08:56:30] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[08:56:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[08:56:30] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[08:56:30] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[08:56:30] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[08:56:30] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[08:56:30] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[08:56:30] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[08:56:30] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[08:56:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[08:56:31] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[08:56:31] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[08:56:31] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[08:56:31] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[08:56:31] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[08:56:32] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[08:56:32] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[08:56:32] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[08:56:32] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[08:56:32] *** Quits: parjanya (~esb@2804:14c:1ad:8b70::1000) (*.net *.split)
[08:56:32] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[08:56:32] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[08:56:32] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[08:56:32] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[08:56:32] *** Quits: gko (~user@user/gko) (*.net *.split)
[08:56:32] *** Quits: gpiero (~quassel@camale.rm-rf.it) (*.net *.split)
[08:56:33] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (*.net *.split)
[08:56:33] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (*.net *.split)
[08:56:33] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[08:56:33] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: victor_ (sid208353@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: pl (sid98063@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: gendl (sid100083@hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[08:56:33] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[08:56:33] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[08:56:33] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[08:56:34] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[08:56:34] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[08:56:34] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[08:56:34] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[08:56:34] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[08:56:34] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[08:56:34] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[08:56:34] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[08:56:34] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[08:56:34] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[08:56:34] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[08:56:34] *** Quits: sp (~sp@user/susam) (*.net *.split)
[08:56:34] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[08:56:34] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[08:56:34] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[08:56:35] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[08:56:35] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[08:56:35] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[08:56:35] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[08:56:35] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (*.net *.split)
[08:56:35] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[08:56:35] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[08:56:35] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[08:56:35] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[08:56:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[08:56:36] *** Quits: Spawns_Carpeting (~weechat@user/spawns-carpeting/x-6969421) (*.net *.split)
[08:56:36] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[08:56:36] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[08:56:36] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[08:56:36] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[08:56:36] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[08:56:36] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[08:56:37] *** Quits: les (znc@user/les) (*.net *.split)
[08:56:37] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[08:56:37] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[08:56:37] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[08:56:37] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[08:56:37] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[08:56:37] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[08:56:37] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[08:56:38] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[08:56:38] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[08:56:38] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[08:56:38] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[08:56:38] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[08:56:38] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[08:56:38] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[08:56:38] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[08:56:38] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[08:56:39] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[08:56:39] *** Quits: _death (~death@adeht.org) (*.net *.split)
[08:56:39] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[08:56:39] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (*.net *.split)
[08:56:39] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[08:56:39] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[08:56:39] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[08:56:39] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[08:56:39] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[08:56:39] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[08:56:40] *** Quits: spec (~spec@user/spec) (*.net *.split)
[08:56:40] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[08:56:40] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[08:56:40] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[08:56:40] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (*.net *.split)
[08:56:40] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[08:56:40] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[08:56:40] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[08:56:40] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[08:56:40] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[08:56:40] *** Quits: dim (~dimlibera@212.85.154.83) (*.net *.split)
[08:56:40] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[08:56:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[08:56:40] *** Quits: s-liao (~s-liao@101.86.99.70) (*.net *.split)
[08:56:40] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (*.net *.split)
[08:56:40] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[08:56:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[08:56:41] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[08:58:13] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[08:58:13] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:58:13] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:58:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c)
[08:58:13] *** Joins: srhm (~srhm@user/srhm)
[08:58:13] *** Joins: Colt (~Colt@user/colt)
[08:58:13] *** Joins: dre (~dre@60.229.45.121)
[08:58:13] *** Joins: notzmv (~zmv@user/notzmv)
[08:58:13] *** Joins: mrcom__ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[08:58:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:58:13] *** Joins: Alfr (~Alfr@user/alfr)
[08:58:13] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[08:58:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:58:13] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[08:58:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:58:13] *** Joins: dstein64 (~dstein64@dannyadam.com)
[08:58:13] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:58:13] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[08:58:13] *** Joins: drakonis (drakonis@user/drakonis)
[08:58:13] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[08:58:13] *** Joins: etiago (~etiago@user/etiago)
[08:58:13] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[08:58:13] *** Joins: parjanya (~esb@2804:14c:1ad:8b70::1000)
[08:58:13] *** Joins: sander (~sander@user/sander)
[08:58:13] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[08:58:13] *** Joins: luis (~luis@lisp/luis)
[08:58:13] *** Joins: sterni (~lukas@user/sterni)
[08:58:13] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[08:58:13] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[08:58:13] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[08:58:13] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:58:13] *** Joins: remexre (~remexre@user/remexre)
[08:58:13] *** Joins: jgkamat (~jay@user/jay)
[08:58:13] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[08:58:13] *** Joins: hisacro (~OBSD@my.displ.nl)
[08:58:13] *** Joins: ns12 (~ns12@user/ns12)
[08:58:13] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:58:13] *** Joins: markasoftware (~quassel@107.161.26.124)
[08:58:13] *** Joins: danieli (~danieli@user/danieli)
[08:58:13] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[08:58:13] *** Joins: Krystof (~user@81.174.155.115)
[08:58:13] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[08:58:13] *** Joins: z3t0 (~z3t0@146.71.14.98)
[08:58:13] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[08:58:13] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[08:58:13] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[08:58:13] *** strontium.libera.chat sets mode: +o luis
[08:58:13] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[08:58:13] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[08:58:13] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[08:58:13] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[08:58:13] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[08:58:13] *** Joins: les (znc@user/les)
[08:58:13] *** Joins: even4void (even4void@came.here.for-some.fun)
[08:58:13] *** Joins: copec (~copec@schrodbox.unaen.org)
[08:58:13] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[08:58:13] *** Joins: lieven (~mal@ns2.wyrd.be)
[08:58:13] *** Joins: |3b| (bbb@user/3b/x-2324788)
[08:58:13] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[08:58:13] *** Joins: bldr (~bull@185.117.72.168)
[08:58:13] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[08:58:13] *** Joins: hubvu (sid495858@user/hubvu)
[08:58:13] *** Joins: kdlv (~kdlv@user/kdlv)
[08:58:13] *** Joins: nckx (~nckx@tobias.gr)
[08:58:13] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[08:58:13] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[08:58:13] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:13] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[08:58:13] *** Joins: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net)
[08:58:13] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[08:58:13] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:58:13] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[08:58:13] *** Joins: gko (~user@user/gko)
[08:58:13] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[08:58:13] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[08:58:13] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[08:58:13] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[08:58:13] *** Joins: _death (~death@adeht.org)
[08:58:13] *** Joins: spec (~spec@user/spec)
[08:58:13] *** Joins: borodust (~irc@user/borodust)
[08:58:13] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[08:58:13] *** Joins: Spawns_Carpeting (~weechat@user/spawns-carpeting/x-6969421)
[08:58:13] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[08:58:13] *** Joins: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[08:58:13] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[08:58:13] *** Joins: specbot (~specbot@common-lisp.net)
[08:58:13] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[08:58:13] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[08:58:13] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[08:58:13] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[08:58:13] *** Joins: hayley (~theemacss@user/hayley)
[08:58:13] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[08:58:13] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[08:58:13] *** Joins: pl (sid98063@helmsley.irccloud.com)
[08:58:13] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[08:58:13] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[08:58:13] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[08:58:13] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[08:58:13] *** Joins: hexology (~hexology@user/hexology)
[08:58:13] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[08:58:13] *** Joins: skyl4rk (~tlvb@user/tlvb)
[08:58:13] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[08:58:13] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[08:58:13] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[08:58:13] *** Joins: mzan (~quassel@mail.asterisell.com)
[08:58:13] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[08:58:13] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[08:58:13] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[08:58:13] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[08:58:13] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[08:58:13] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[08:58:13] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[08:58:13] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[08:58:13] *** Joins: sepanko (~sepanko@user/sepanko)
[08:58:13] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[08:58:13] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[08:58:13] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[08:58:13] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[08:58:13] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[08:58:13] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[08:58:13] *** Joins: sp (~sp@user/susam)
[08:58:13] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[08:58:13] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[08:58:13] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[08:58:13] *** Joins: flip214 (~marek@user/flip214)
[08:58:13] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[08:58:13] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[08:58:13] *** Joins: jurov (~jurov@rev-81-92-255-36.radiolan.sk)
[08:58:13] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[08:58:13] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[08:58:13] *** Joins: samebchase (~thelounge@51.15.68.182)
[08:58:13] *** Joins: phoe (~phoe@user/phoe)
[08:58:13] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[08:58:13] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[08:58:13] *** Joins: ck_ (~ck@plskthx.org)
[08:58:13] *** Joins: jfb4 (~jfb4@178.62.2.68)
[08:58:13] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[08:58:13] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[08:58:13] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[08:58:13] *** strontium.libera.chat sets mode: +oo pl fe[nl]ix
[08:58:13] *** Joins: Fade (fade@outrider.deepsky.com)
[08:58:13] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[08:58:13] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[08:58:13] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[08:58:13] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[08:58:13] *** Joins: Kabriel (~Kabriel@user/kabriel)
[08:58:13] *** Joins: lonjil (~quassel@user/lonjil)
[08:58:13] *** Joins: jemoka (~jemoka@user/jemoka)
[08:58:13] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[08:58:13] *** Joins: loke (~loke@junk.nocrew.org)
[08:58:13] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[08:58:13] *** Joins: gabc (~gabc@user/gabc)
[08:58:13] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[08:58:13] *** Joins: Xach (~xach@user/xach)
[08:58:13] *** Joins: opcode (~nathan@user/opcode)
[08:58:13] *** Joins: dim (~dimlibera@212.85.154.83)
[08:58:13] *** Joins: ChanServ (ChanServ@services.libera.chat)
[08:58:13] *** strontium.libera.chat sets mode: +oo Xach ChanServ
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Max SendQ exceeded)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:59:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:59:57] <jmercouris> best programming font for Lisp?
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:02:20] <akater[m]> pillton: It is customary to call (2) a âtransducerâ these days.
[09:04:37] <pillton> On the subject of implementing operator (2). Assuming the collection can be subclassed, what is the common way of instantiating the new collection such that subclasses have the ability to copy slots from the collection given to the map operator? I was thinking of using (make-instance (class-of collection) :copy-from collection).
[09:04:44] <pillton> akater[m]: Where is that used?
[09:06:08] <beach> pillton: That seems like a reasonable solution.
[09:07:33] *** Quits: _death (~death@adeht.org) (*.net *.split)
[09:07:33] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[09:07:33] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (*.net *.split)
[09:07:33] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[09:07:34] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[09:07:34] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[09:07:34] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:07:34] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[09:07:34] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[09:07:41] *** Joins: loke (~loke@junk.nocrew.org)
[09:07:42] *** Joins: Xach (~xach@66-63-89-59.static.suscom-maine.net)
[09:07:44] *** Joins: gabc (~gabc@user/gabc)
[09:07:58] *** Joins: adeht (~death@adeht.org)
[09:08:04] *** Joins: jemoka (~jemoka@user/jemoka)
[09:08:38] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[09:08:38] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[09:10:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:12:56] <akater[m]> pillton: The term is popularized by Clojure but technically it means something subtly different there.  In academic use, it's closer to (1) as is, iiuc.
[09:13:19] <pillton> akater[m]: Ok. Thanks.
[09:13:27] <pillton> beach: Thanks.
[09:14:23] *** Joins: spiaggia (~user@2a01:cb19:150:3400:449a:6ba8:e1b6:db10)
[09:15:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[09:15:43] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[09:15:49] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[09:20:28] *** Quits: spec (~spec@user/spec) (*.net *.split)
[09:20:28] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[09:20:28] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[09:20:28] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[09:20:28] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (*.net *.split)
[09:20:28] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[09:20:29] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[09:20:29] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[09:20:29] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[09:20:29] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[09:20:29] *** Quits: dim (~dimlibera@212.85.154.83) (*.net *.split)
[09:20:29] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[09:20:29] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[09:20:37] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:20:39] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[09:20:46] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[09:20:46] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[09:21:02] *** Joins: opcode (~nathan@2607:5300:60:f18::)
[09:21:18] *** Quits: opcode (~nathan@2607:5300:60:f18::) (Signing in (opcode))
[09:21:18] *** Joins: opcode (~nathan@user/opcode)
[09:21:24] *** Joins: specbot (~specbot@common-lisp.net)
[09:21:24] *** Joins: minion (~minion@common-lisp.net)
[09:21:28] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[09:21:37] *** Joins: spec (~spec@user/spec)
[09:22:36] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[09:22:46] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[09:27:32] *** Joins: sepanko (~sepanko@user/sepanko)
[09:37:45] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[09:37:55] <beach> pillton: The issue you just mentioned is the main reason I moved away from Keene-style constructors.  They hard-wire the class in the name of the constructor, so you can't do what you suggested with a variable class.  But I am now leaning toward an indirection like MAKE-<collection-name> but that has the same signature as MAKE-INSTANCE.  That way, I can trace and put additional methods on this function without disturbing make-inst
[09:45:13] <pillton> beach: Oh that is a good idea. I have been using MAKE-<protocol-name>-LIKE in some instances.
[09:45:20] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[09:45:30] <beach> Sure, that works too.
[09:48:41] *** Quits: spiaggia (~user@2a01:cb19:150:3400:449a:6ba8:e1b6:db10) (Ping timeout: 245 seconds)
[09:53:00] <hayley> The SICL hash tables have to be created with MAKE-HASH-TABLE, but that function additionally takes a :CLASS keyword argument.
[09:54:53] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[09:56:30] <beach> And it defaults to the value of a special variable, yes?
[09:57:14] <pillton> beach: I tend to like the Keene-style constructor as you can 1) easily see what arguments are needed to initialize the instance 2) you have the ability to specialize the instance according to the arguments given to the constructor and 3) you know what implementation/representation is needed for the use case.
[09:58:14] <hayley> beach: Yes, right.
[09:58:18] <beach> pillton: Yes, I know the advantages.  I just told you about the disadvantage that is sometimes unacceptable.
[09:58:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[09:59:18] <hayley> There is a constructor function with a similar signature for decentralise2 "passing" connections, but there is a default class rather than the value of a special variable.
[09:59:49] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[10:04:47] <pillton> beach: Ok. Sure. I was just saying why I still like them.
[10:05:15] <beach> Right.
[10:06:13] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:14:37] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[10:17:15] *** Joins: spiaggia (~user@2a01:cb19:150:3400:449a:6ba8:e1b6:db10)
[10:18:47] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:27:50] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:29:18] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[10:29:54] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[10:34:20] *** Joins: gaqwas (~john@dynamic-077-002-117-079.77.2.pool.telefonica.de)
[10:37:33] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[10:41:59] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:45:03] *** Joins: makomo (~makomo@user/makomo)
[10:48:00] <dre> <jmercouris> best programming font for Lisp? <-- Comic Mono
[10:48:06] <dre> lisp doesn't actually compile without it
[10:49:57] <hayley> Computer Modern Typewriter Text or go home
[10:52:06] <spiaggia> I sure hope we can use proportional fonts some day.
[10:52:30] <dre> what is it with people demanding proportional fonts in programming
[10:53:08] <spiaggia> It saves a lot of horizontal space, which is a precious resource as we all know
[10:53:29] <spiaggia> That's what's "with us".
[10:53:42] <dre> there's been a few conversations I've had now where people (often new to programming) demand a way to use a proportional fonts in XYZ.
[10:54:39] <spiaggia> I can assure you I am not in that category.  I started programming in 1975.
[10:57:01] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[10:57:23] <spiaggia> ... and I am not making any demands.  I am working to make it happen.
[10:57:47] <dre> alright but as long as this is your priority: http://comicneue.com/
[10:58:58] <hayley> I was tempted to use a LaTeX "pseudocode" package for my ELS paper, because it looked nicer. But then the paper wouldn't have much Lisp in it.
[10:59:46] <spiaggia> Speaking of which, when is the ELS deadline?
[10:59:48] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 268 seconds)
[11:00:07] <spiaggia> The submission deadline, I mean.
[11:00:10] <hayley> Good question.
[11:00:23] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[11:00:31] <spiaggia> Never mind.  I'll look it up.
[11:00:47] <hayley> Seems to be January 23.
[11:01:05] <spiaggia> Rapidly approaching.
[11:01:20] <dre> what is ELS?
[11:01:36] <hayley> Are you planning to submit any papers for ELS 2022?
[11:01:42] <spiaggia> Yes.
[11:01:58] <spiaggia> minion: Please tell dre about ELS.
[11:01:58] <minion> dre: look at ELS: 1st European Lisp Symposium (ELS'08) in Bordeaux, France, May 22-23, 2008 LaBRI, UniversitÃ© Bordeaux 1. http://prog.vub.ac.be/~pcostanza/els08/index.html
[11:02:09] <dre> neat
[11:02:23] <spiaggia> Hmm, needs to be updated.
[11:03:46] <flip214> minion: ELS22
[11:03:46] <minion> Sorry, I couldn't find anything in the database for ``ELS22''.
[11:03:54] <flip214> minion: ELS2022
[11:03:54] <minion> Sorry, I couldn't find anything in the database for ``ELS2022''.
[11:04:22] <spiaggia> flip214: You can use private messages with minion.
[11:04:53] <dre> is the source code for minion anywhere? I like it :)
[11:04:56] <semz> Is there a define-condition option that sets the function documentation of a slot reader? I can find one for the slot itself but that's not quite it. I guess I could do (setf (documentation 'foo 'function) "bar") at the toplevel.
[11:05:08] <dre> minion, who is your master
[11:05:08] <minion> chandler is my master
[11:07:22] <spiaggia> minion: Please tell dre about ELS.
[11:07:22] <minion> dre: ELS: European Lisp Symposium: https://www.european-lisp-symposium.org/
[11:07:32] <spiaggia> That's better.
[11:08:04] <spiaggia> minion: Thanks!
[11:08:04] <minion> np
[11:09:06] *** Joins: notzmv (~zmv@user/notzmv)
[11:13:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:14:35] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[11:15:32] *** Joins: treflip (~user@95.79.32.99)
[11:15:43] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:e0bf:8b82:612e:28df)
[11:16:30] <spiaggia> dre: I don't know where you are located, but ELS is definitely not reserved for Europeans.  We have regular visitors from the USA, Japan, and other exotic places.  So feel free to attend.
[11:16:59] <dre> thanks :) it looks very cool
[11:17:17] <hayley> To my knowledge, there is going to be an online part for ELS, so you can attend without travelling to Europe. Made it easy for me last year (living in Australia).
[11:17:20] *** Joins: lisp123w (~user@80.227.170.170)
[11:17:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[11:17:28] <dre> I'm finishing up work now but I'll look into it, and I'll check out some of the older postings
[11:17:29] <spiaggia> It is.  Before COVID we had around 90 participants every year
[11:17:32] <hayley> Of course I couldn't stay up for all of it, but I got about halfway through the day before bed.
[11:17:41] <dre> yeah I'm in the exotic Australian place as well
[11:18:21] <dre> suprised there didn't seem to be many "LISPERS IN SYDNEY" or whatever on meetup.com but oh well, I don't have much time for meetups anyway.
[11:19:11] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[11:19:15] <spiaggia> dre: When I spent one year in Auckland, I discovered that there were around 5 Lispers within a radius of a one-hour flight.  In Europe, there are hundreds.
[11:19:29] <dre> haha yes that sounds likely
[11:19:35] <spiaggia> Sorry, 3 hour fight I mean.
[11:19:41] <dre> a shame
[11:19:47] <spiaggia> Definitely.
[11:19:53] <dre> I'll have to go around door knocking, spreading the good word
[11:20:26] <dre> I'm enjoying what I've learned so far. I'm trying to smash out work so I can get back to my AoC puzzles
[11:21:45] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:22:50] *** Joins: amb007 (~a_bakic@0.150.22.93.rev.sfr.net)
[11:25:08] *** Joins: pve (~pve@37-136-9-121.rev.dnainternet.fi)
[11:36:37] *** Quits: gaqwas (~john@dynamic-077-002-117-079.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[11:41:04] *** Quits: spiaggia (~user@2a01:cb19:150:3400:449a:6ba8:e1b6:db10) (Quit: ERC (IRC client for Emacs 26.3))
[11:43:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:48:56] *** Joins: s-liao (~s-liao@101.86.99.70)
[11:53:08] *** Quits: s-liao (~s-liao@101.86.99.70) (Client Quit)
[11:55:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[12:01:35] *** Joins: VincentVega (~user@212.241.25.167)
[12:04:25] *** Quits: amb007 (~a_bakic@0.150.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[12:05:55] *** Joins: amb007 (~a_bakic@42.134.22.93.rev.sfr.net)
[12:06:59] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[12:10:37] *** Quits: amb007 (~a_bakic@42.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:10:59] *** Joins: amb007 (~a_bakic@42.134.22.93.rev.sfr.net)
[12:12:27] <VincentVega> spiaggia: re: "I sure hope we can use proportional fonts some day." variable-pitch-mode in emacs?
[12:12:27] *** Quits: amb007 (~a_bakic@42.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:13:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:15:00] <beach> VincentVega: The problem is indentation and spacing.  Already, Emacs is not good enough for that, and with proportional font, it would make a complete mess out of the code.
[12:16:23] <VincentVega> beach: yeah, true, I didn't think about that one
[12:21:48] <jackdaniel> yitzi makes an impressive work with pretty printer in sicl
[12:22:19] <jackdaniel> I saw a screenshot where a proportional font was used for loop and things were indented top notch
[12:22:27] <beach> Yes, and there might be some commonalities to identify between that code and Second Climacs.
[12:23:41] <jackdaniel> here it is: https://i.imgur.com/Wk2j0Uf.png
[12:29:23] *** Joins: pok (~pok@castor.klingenberg.no)
[12:29:24] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[12:29:24] *** Joins: pok (~pok@user/pok)
[12:36:44] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:38:22] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[12:45:33] <VincentVega> jackdaniel: neat, thanks for the link
[12:47:36] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:48:02] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[12:53:49] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[12:59:40] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[13:06:13] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[13:14:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:18:33] *** Joins: cranium (~cranium@user/cranium)
[13:19:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:31:29] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:33:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:38:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:38:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:38:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:39:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:39:53] *** Lord_of_Life_ is now known as Lord_of_Life
[13:41:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:41:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:42:32] *** Quits: dre (~dre@60.229.45.121) (Remote host closed the connection)
[13:45:29] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[13:58:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[14:10:41] <pjb> VincentVega: beach: it's not so bad: https://pasteboard.co/g0pQtigiY6CF.png  Indeed, :initial-element is not indented correctly, or loop  always is not aligned on for; but that remains usable.
[14:14:05] <hayley> https://youtu.be/xpAvcGcEc0k?t=231
[14:16:31] <beach> pjb: Interesting.
[14:28:16] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[14:31:06] <phadthai> hayley: https://external-preview.redd.it/1r-_iwjf1f24FdiMAQgYv4R693TYBLlToo5eXk25U8U.jpg?auto=webp&s=1ba0e182d9f79206e9d800860c75b78ac24f14d4
[14:36:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:38:41] *** Joins: igemnace (~ian@user/igemnace)
[14:40:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:45:16] *** Joins: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e)
[14:50:55] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:51:37] *** Joins: amb007 (~a_bakic@59.134.22.93.rev.sfr.net)
[14:58:57] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:00:26] *** Quits: amb007 (~a_bakic@59.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:00:43] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:03:00] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[15:03:00] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:04:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:14:10] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[15:16:06] *** Quits: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e) (Ping timeout: 265 seconds)
[15:24:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[15:25:09] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:33:19] *** Joins: dre (~dre@60.229.45.121)
[15:36:10] <rotateq> i should participate at ELS this year too
[15:36:29] <Shinmera> Agreed.
[15:38:27] <rotateq> and don't worry, it will just be possible for me online ^^
[15:40:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:46:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[15:47:03] *** Joins: yewscion (~yewscion@2604:ca00:15c:99c2::660:9ac6)
[16:05:37] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:e0bf:8b82:612e:28df) (Ping timeout: 250 seconds)
[16:08:59] *** Quits: yewscion (~yewscion@2604:ca00:15c:99c2::660:9ac6) (Ping timeout: 252 seconds)
[16:15:31] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:300e:71aa:46c5:14ce) (Quit: Konversation terminated!)
[16:20:37] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:e0bf:8b82:612e:28df)
[16:23:06] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[16:23:49] *** Joins: unyu (~pyon@user/pyon)
[16:25:51] *** Joins: random-nick (~random-ni@87.116.181.93)
[16:44:29] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[16:51:54] *** Joins: VincentV` (~user@212.241.25.167)
[16:52:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:53:53] *** Quits: VincentVega (~user@212.241.25.167) (Ping timeout: 256 seconds)
[17:04:36] *** Quits: Xach (~xach@66-63-89-59.static.suscom-maine.net) (Changing host)
[17:04:36] *** Joins: Xach (~xach@user/xach)
[17:04:36] *** ChanServ sets mode: +o Xach
[17:24:40] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[17:30:18] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:18] *** ChanServ sets mode: +o Bike
[17:35:53] *** Joins: Catie (~user@user/catie)
[17:41:30] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:42:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:46:09] *** Quits: VincentV` (~user@212.241.25.167) (Ping timeout: 252 seconds)
[17:47:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[17:49:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[17:49:58] *** Joins: aartaka (~aartaka@5.1.53.225)
[17:52:50] <pdietz> I keep telling myself I should send something to ELS, but then it gets close and I'm not ready.Â  Â Too distracted by other things.
[17:55:36] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[18:07:42] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:23:59] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:e0bf:8b82:612e:28df)
[18:25:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:27:45] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c4:b126:e0bf:8b82:612e:28df) (Ping timeout: 250 seconds)
[18:38:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:43:13] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[18:44:11] <_73> is there a convention for naming a special variable that is also a closure?
[18:44:49] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 252 seconds)
[18:47:55] <jackdaniel> I don't recall such convention
[18:49:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:50:07] <jdz> One parameter functions are sometimes called "thunks".
[18:50:08] <_73> In general do you reccomend trying to differentiate closure variables, or is it usually obvious?
[18:50:30] <Bike> this is actually the first time i've heard of the idea of trying to distinguish closure variables
[18:50:37] <semz> Wouldn't the name usually suggest that it is a function anyway?
[18:50:38] <Bike> they're just another kind of value
[18:50:41] <jdz> *One parameter _anonymous_ functions.
[18:50:57] <Bike> i thought a "thunk" was a no-parameter function
[18:51:02] * semz thought the same
[18:51:31] <jdz> Is this about variables bound to closures, or bindings captured by closures?
[18:52:04] <_73> jdz: variables bound to closures
[18:52:10] <jdz> Bike: You may be right, I've seen the name, but have no idea where the name comes from.
[18:52:11] <Bike> well if they're captured they're not special variables, so
[18:52:34] <Bike> jdz: goofy version of "think"
[18:52:43] <Bike> and algol
[18:53:18] <semz> You could go for names like *foo-conversion-function* instead of *foo-converter* to remove a bit of ambiguity, but honestly I don't think it's a big deal.
[18:53:24] <jackdaniel> and full story may be found here: https://en.wikipedia.org/wiki/Thunk
[18:54:26] <jackdaniel> also "hypot" is a binary function :)
[18:55:20] <jackdaniel> meh, nvm me
[18:55:27] <jackdaniel> that's just a name of awell defined function
[19:03:06] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:07:14] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:10:07] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:12:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:15:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:18:13] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:18:39] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:18:47] <yitzi> beach pjb jackdaniel: Here is part of the code that pjb showed pprint using Inravina/Incless. https://i.imgur.com/LmRQ9OC.png
[19:19:29] <yitzi> The algorithm has some problems with long lines sometimes.
[19:19:58] <yitzi> That is with a line length of 60em.
[19:24:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:25:02] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:25:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:35:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:35:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:38:14] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[19:39:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:43:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:44:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:44:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[19:46:36] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[19:50:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:52:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[19:52:23] *** Quits: utis (~utis@84.208.165.160) (Ping timeout: 256 seconds)
[19:52:36] *** Joins: utis (~utis@vpn-client453.uio.no)
[19:54:36] *** Joins: Devon7 (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[19:57:28] *** Devon7 is now known as Devon
[20:01:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:05:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:06:12] <Guest74> anybody know the rfc for when you make a 'web query',i.e. when you add a ?q=some-query-value to a web address?
[20:06:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[20:08:01] <Guest74> and maybe if I can get some help with this https://plaster.tymoon.eu/view/2763#2763 , i'm unfamiliar with variable capture.
[20:08:34] *** Lord_of_Life_ is now known as Lord_of_Life
[20:08:40] <Guest74> Ideally I'd like for people to be able to pass in a symbol holding a list for key-queries.
[20:10:26] <White_Flame> if that's indented properly, then your LET* body is empty, and the when/when/raw are outside your `(defun ...)
[20:10:49] <Guest74> no, i just noticed the stupid indentation.  It's more readable if you click raw.
[20:11:02] <White_Flame> ah, true
[20:12:00] <Guest74> I think I fixed it.  If edit keeps the same url.
[20:12:26] <Guest74> nope, now something else.  argh
[20:12:40] <White_Flame> https://datatracker.ietf.org/doc/html/rfc3986#section-3.4
[20:13:08] <Guest74> now, it's proper i think
[20:13:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:15:03] <Guest74> thanks for that.  I was hoping they'd mention usual queries, but it seems not.  Trying to make the IDENTIFIER deal with regular use cases, also need a more generic name for it.
[20:16:23] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:21:02] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:21:20] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:22:56] *** Joins: makomo (~makomo@user/makomo)
[20:23:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:23:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:26:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:27:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:28:47] <jeosol> I want to thank the sbcl dev and maintenance for their continuing work. Just migrated from 2.1.9 to 2.1.11, no issues to building software
[20:28:53] <jeosol> Good morning all!
[20:28:59] <yitzi> Its in the URI one rfc 3986
[20:29:15] <yitzi> Sorry...didn't see that someone else respond.
[20:30:15] <Guest74> yeah, I guess I'm looking more for usual queries to be able to handle them all as the required arg of the resulting function.
[20:31:08] <jeosol> is any one running containers on the cloud using SBCL, what cloud provider are you using and any recommendation. I am trying to demo something (not a full webapp) just run the docker containers and expose an api
[20:31:24] <beach> yitzi: I think yours is significantly better, mainly because of more basic indentation for nested forms.
[20:31:25] <jeosol> ** above, I wanted to say I use only SBCL
[20:31:43] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:33:05] <yitzi> Thanks beach. There still some  oddness going on with some the line lengths. I have some ideas percolating on that though.
[20:33:20] <White_Flame> Guest74: what do you mean by "usual queries"?
[20:33:41] <White_Flame> it's a custom field, afaik
[20:33:54] <Catie> pl
[20:34:00] <Catie> Sorry, wrong window
[20:34:04] <Guest74> well, it's seems q is the default for most.
[20:34:11] <beach> yitzi: I see.
[20:34:30] <Guest74> but some take latitude/longitude without a q.
[20:34:48] <White_Flame> Guest74: it all depends on what the server side handler expects
[20:34:54] <Guest74> I'm not familiar with more apis than just the weather/maps ones i've been lookin gat.
[20:35:07] <White_Flame> there aren't any "standard" keys in the k=v format, and apparently k=v format isn't even necessary
[20:35:31] <yitzi> beach: Plus implementing pprint-extended-loop and its use of logical blocks to contain loop phrases (which wasn't even possible in the XP algorithm) has opened up a lot of possibilities like enclosing key/value pairs in a plist in logical blocks.
[20:35:34] <Guest74> but there does seem to be a standard for q
[20:35:40] <White_Flame> but all webservers that I've seen do break it up into k/v pairs for you
[20:35:51] <White_Flame> I see no standard
[20:36:01] <White_Flame> there's some ad hoc use because it's a "query"
[20:36:22] <Guest74> there's always an initial query and then additional optional args.  The optional args are handled by key-queries.
[20:36:24] <beach> yitzi: Nice!
[20:36:25] <White_Flame> if there's just basically a single unnamed value they're sending, but apparently I haven't seen that as much as you have
[20:36:41] <White_Flame> no, it's just a list of k/v pairs
[20:36:49] <White_Flame> there's nothing special about the first one
[20:37:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:38:31] <yitzi> Guest74: RFC2616 maybe?
[20:38:46] <Guest74> what i have seen is the first value uauall being q=query.
[20:40:17] <Guest74> yitzi: doesn't seem to be.  I guess usual suspects would be somewhere else as rfcs seem to specify only the mechanism.
[20:41:59] <Guest74> If there isn't always a specific thing you're querying about then I guess I need the macro to deal with that and create a function with no required args.
[20:42:02] <White_Flame> there are no "usual suspects"
[20:42:09] <White_Flame> it's just a key/value list
[20:42:50] <Guest74> well, there are for a whole bunch of apis I have seen.  cause you usually have a specific query.
[20:43:16] <White_Flame> and that's API-specific
[20:43:59] <White_Flame> sure there are styles and whatnot, but there's nothing in the spec to my knowledge listing accepted/required/suggested/anything about the query field content literals
[20:44:50] <Guest74> well, like I said, they seem to only define mechanism.
[20:45:35] <Guest74> anyways, any help on variable capture or making it accept symbols for key-queries?
[20:46:49] <White_Flame> you posted your code, but didn't actually say what was breaking/errored/etc
[20:47:46] <Guest74> any help on variable capture or making it accept symbols for key-queries?
[20:48:00] <Bike> what do you mean by variable capture
[20:48:38] <White_Flame> key-queries is only passed into another function that you didn't post, so who knows what it's doing?
[20:48:44] <Guest74> I'm just using PG's terminology.  I really don't know much about macros.
[20:49:17] <White_Flame> what's breaking?
[20:49:37] <Bike> I don't know PG's terminology. What are you worried about exactly? If you mean using gensyms and stuff, yeah, needs a few changes
[20:49:53] <Guest74> probably that.
[20:49:55] <Bike> BASE, which is user-provided, is evaluated while a bunch of stuff is bound, so that stuff should be gensyms
[20:50:27] <Bike> ditto path
[20:51:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:51:16] <White_Flame> macros just generate source code.  What happens at runtime is separated from the compile-time execution environment of the defmacro body's evaluation
[20:51:20] <Guest74> so because they are used in function call if I'm understanding correctly?
[20:51:31] <White_Flame> and is only determined by that generated/returned source code
[20:56:39] <Guest74> White_Flame: you are not helping.
[20:57:00] <Bike> BASE and PATH are evaluated because they're obviously evaluated by the code the macro returns. in this case yes because they are arguments to function calls, but it's just the normal evaluation rules.
[20:57:31] <Bike> parse-fn and transform-fn are also evaluated
[20:57:31] <White_Flame> Guest74: sorry, but you haven't presented a problem
[20:57:47] <White_Flame> in terms of notions of "capture", there is no capture between the macro invocation and the runtime
[20:58:03] <White_Flame> the data item returned by the macro is used as the source code to compile the runtime code
[20:58:11] <Guest74> ok, i think that makes sense.
[20:58:12] <White_Flame> there is no capture or sharing at all with the defmacro body variables
[20:58:31] <White_Flame> those have executed and returned, exiting their scope
[21:00:07] <Guest74> to be able to pass in a symbol to key-queries, which needs to be operated on as a list, would I have to basically have a macro within a macro?
[21:01:31] <White_Flame> (defmacro foo (x) ...), if you call (foo bar), then X is bound to the symbol BAR
[21:01:41] <White_Flame> (inside the macroexpansion code)
[21:02:09] <White_Flame> and so (setf ,x 3) generates (setf bar 3), and (baz ',x) generates (baz 'bar)
[21:02:52] <White_Flame> depending on if BAR is a lexical symbol in the generated code that you want the code to evaluate, or quoted if you want the symbol to be passed as a symbol object
[21:04:17] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:06:51] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:07:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:11:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[21:11:38] <Guest74> are there any implementations that have a very limited amount of key args allowed?  The youtube api has tons of args.
[21:11:45] *** Joins: amb007 (~a_bakic@42.134.22.93.rev.sfr.net)
[21:11:52] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[21:16:23] *** Joins: ebrasca (~user@librepanther.com)
[21:17:00] <White_Flame> the spec sets the hard minimum at 50 total lambda parameters
[21:17:18] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:17:20] <White_Flame> call-arguments-limit & lambda-parameters-limit
[21:17:30] <White_Flame> (constant variables, not functions)
[21:21:01] *** Quits: amb007 (~a_bakic@42.134.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[21:21:13] <pdietz> I don't know of any implementation for which the limit is that small, but there may be one.
[21:21:26] *** Joins: amb007 (~a_bakic@183.150.22.93.rev.sfr.net)
[21:21:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:22:49] <Guest74> thanks.  I guess someone will let me know if they run into any problems
[21:24:21] <Guest74> still would like to figure out how, or if it's possible, to pass a symbol with the key-value pairs.  As a lot of apis seem to have overlapping pairs for different endpoitns.
[21:25:00] *** Joins: dvush (~dvush@185.205.44.230)
[21:25:47] <Catie> 6
[21:25:47] *** Quits: amb007 (~a_bakic@183.150.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:25:59] <Catie> Once again, I'm sorry
[21:26:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:26:15] *** Joins: amb007 (~a_bakic@55.39.22.93.rev.sfr.net)
[21:26:58] <rotateq> don't worry Catie :)
[21:28:00] <jackdaniel> pdietz: up until a few years ago ecl had a bug where it mishandled calls with more than 63 parameters (because everything above is passed in a stack frame as the "last" argument)
[21:29:19] <jackdaniel> the error was not hard to notice because it "ate" only one argument (off by one error) and because there are rarely functions with so many arguments
[21:29:40] <jackdaniel> some drei function in mcclim exposed this issue
[21:30:12] <jackdaniel> s/not hard to notice/hard to notice/
[21:32:18] <jackdaniel> afaik c89 has a minimum limit of 31 call arguments and c99 improves it to 127
[21:37:30] <rotateq> maybe even 31 would be enough in most cases
[21:37:53] <rotateq> the limit in GHC for tuple elements is around 63 iirc
[21:38:43] <Guest74> youtube's search has upto 31 args.
[21:39:01] <jackdaniel> with keywords number of call arguments doubles
[21:39:11] <rotateq> ah right
[21:40:04] <jcowan> jackdaniel: (apply f list) can easilly provoke such a failure
[21:40:20] <jcowan> where f is + or the like
[21:41:00] <jackdaniel> jcowan: after you knew about the issue you could reproduce it in many ways
[21:41:58] <jcowan> I mean that this particular way has in fact bitten me, adding up numbers
[21:42:09] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:42:33] <jcowan> you can replace it with reduce or fold, of course
[21:43:06] *** Quits: dvush (~dvush@185.205.44.230) (Quit: Client closed)
[21:46:04] <Guest74> so if I want to get only the id from a bunch of <tr id=blah> on a webpage, is that something I'd do with lquery?   Because I'd rather not have to type out all these args.
[21:48:19] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[21:49:18] *** Joins: Catie (~user@user/catie)
[21:50:01] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:e0bf:8b82:612e:28df) (Ping timeout: 265 seconds)
[21:51:09] *** Joins: robin (~robin@user/terpri)
[21:55:20] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 265 seconds)
[22:03:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:06:13] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 240 seconds)
[22:06:14] *** Quits: amb007 (~a_bakic@55.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:06:48] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:07:04] <jasom> Am I just failing at reading docs, or does neither the standard nor alexandria have a function for converting bit-vectors to integers?
[22:08:00] <Guest74> it doesn't seem like it.  we discussed this a few days ago.
[22:08:19] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[22:10:36] <Catie> It was pretty easy to get working though!
[22:12:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:13:15] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:e0bf:8b82:612e:28df)
[22:13:25] <jackdaniel>  a naive way of doing this would be to print the vector to string
[22:13:30] <jackdaniel> and then read to string with :start 2
[22:13:41] <jackdaniel> (and read-base 2)
[22:14:03] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[22:15:04] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[22:15:38] <Guest74> and make sure you've got the right bit first.
[22:15:41] <Catie> Or parse-integer with :radix 2
[22:16:57] <jackdaniel> right bit first? what do you mean?
[22:17:13] <Guest74> lsb msb
[22:17:13] <jackdaniel> good point with parse integer
[22:17:36] *** Joins: nature (~nature@45.32.235.173)
[22:17:47] <Guest74> this was a problem with the bit arrays given in AoC
[22:17:59] <jackdaniel> I see
[22:18:31] <White_Flame> (parse-integer (reverse (write-to-string #*....)) :radix 2 :junk-allowed t)
[22:19:12] <White_Flame> since the "*#" is now at the end
[22:19:20] <Bike> i'm pretty sure there isn't a function to convert bit vectors to integers, no
[22:19:27] *** ChanServ sets mode: -o Bike
[22:21:04] *** Quits: treflip (~user@95.79.32.99) (Quit: good night!)
[22:22:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:22:41] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[22:25:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:26:55] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:27:27] *** Joins: aeth (~aeth@user/aeth)
[22:31:04] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[22:31:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[22:37:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:40:14] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Remote host closed the connection)
[22:40:32] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[22:41:10] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:42:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:46:13] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:e0bf:8b82:612e:28df) (Ping timeout: 240 seconds)
[22:51:54] <yitzi> Doesn't bit-smasher do that?
[22:53:26] <rotateq> seems to be with bits->int
[22:54:48] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:54:50] <yitzi> Which boils down to this https://github.com/thephoeron/bit-smasher/blob/c2dcb3b5ec0e485484be681fe17c4e81e58790d9/src/arithmetic.lisp#L9
[23:01:26] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:03:32] *** Joins: tfeb (~tfb@88.98.95.237)
[23:04:53] <White_Flame> hmm, it does from-end, so assumes "big endian"
[23:05:14] <White_Flame> oh, it tracks PLACE separately, n/m
[23:05:26] <jackdaniel> can't we just reverse digits? #*10000 -> 16 -> 61 vola :)
[23:05:42] <White_Flame> that's what I did above ;)
[23:06:08] <jackdaniel> n ono, you've reversed the binary string, I've reversed the final result ;p
[23:20:18] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[23:20:45] <pjb> (reverse #*110001) #| --> #*100011 |#
[23:20:57] <Guest74> Shinmera: at https://shinmera.github.io/lquery/ after ADD-CLASS every SRC link points to the previous function. and NEXT-UNTIL has silings instead of siblings.
[23:21:55] <Shinmera> yeah the links can go out of date if the docs aren't regenerated with every change.
[23:22:24] <Guest74> I'm not understanding how to filter on something that (html) returns.
[23:22:51] <Guest74> i'd like to have to select only the 'th" that has "parameters" for the html.
[23:23:51] <pjb> You'd have to write a recursive function to walk the tree of HTML entities.
[23:23:56] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:25:01] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5bc:bec3:27a0:99fc)
[23:27:10] <Shinmera> (lquery:$ (initialize "<a>foo</a><a>bar</a>") "a" (contains "foo")) => #(#<..>)
[23:28:25] <Guest74> ah, it's case sensitive.  I wondered why it was returning an empty vector.
[23:31:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:31:28] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:32:41] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:32:52] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[23:33:13] <Guest74> ugh, still having problems.  I'd like to return all attributes "id" only from a "th" that contains "Parameters" but I'm obviously doing it wrong. (lquery:$ *doc* "th" (contains "Parameters") "tr" (attr "id"))
[23:38:27] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:39:05] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:52:30] *** Joins: gaqwas (~john@dynamic-077-002-117-079.77.2.pool.telefonica.de)
[23:54:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[23:54:14] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[23:56:02] *** Joins: aeth (~aeth@user/aeth)
