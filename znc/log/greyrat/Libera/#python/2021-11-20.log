[00:00:37] *** Joins: rany (~rany@user/rany)
[00:00:47] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[00:00:53] <jyg> In my entity manager I would do a an ldap search, it would bring back a native OpenLDAP structure (mostly arrays) which I would change to objects. The process would be informated by PHP annotations as to which attributes went with which member variables, and if they were single or multi-value (arrays)
[00:01:25] *** Joins: mimmy (~mimmy@146.70.75.190)
[00:01:58] <jyg> But, I'm starting to thikn that in python, I can take this similarly returned structure and instantiate an entity on the fly. I mean, I don't need getters and setters anymore, right?
[00:02:48] <nedbat> jyg: you don't need getters and setters, right
[00:03:02] <deniska> jyg: so, thinking in python would be like: "is there a library which handles ldap for me?" :)
[00:03:02] <jyg> So, unless I'm doing something specific to the nature of a specifc objectClass (e.g. a "person" objectClass in LDAP might be the backend of what is a logged in user profile in the software
[00:03:17] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[00:04:35] <arkanoid> df.loc[("mindex1","mindex2"), "col"] = series_with_same_len_as_filter does not seem to write to df, but I'm now receiving any "writing on copy" warning
[00:04:38] <jyg> deniska, there's ldap libraries and then there are ldap ORMs.  There are a couple of ORMs in python out there. None of them seem current enough and I want to do this exercise because 1) I need the experience to train my brain and 2) I do a LOT with LDAP and I am certain that no existing ORM is sufficient.
[00:04:45] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[00:08:06] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[00:08:40] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[00:09:02] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[00:09:57] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:12:06] *** Joins: mickey80 (~user@user/mickey)
[00:13:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:22] <BrenBarn> arkanoid, does the other series have the same index?
[00:14:39] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[00:14:53] *** Quits: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[00:15:31] <arkanoid> BrenBarn: nope. I have a series with anonymous index of len X and I want to apply to a df.loc query that also returns a df portion of size len X
[00:16:00] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[00:16:05] *** Joins: Sky_Net (~Sky_Net@2.92.127.203)
[00:16:51] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[00:18:22] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[00:19:53] <arkanoid> BrenBarn: solved with df.loc[....] = series.values
[00:20:10] <arkanoid> apparently if series does not have index seems to do what I need
[00:20:30] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:23:09] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[00:23:11] *** Quits: trashbird (~trashbird@user/trashbird) (Quit: what)
[00:23:30] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 268 seconds)
[00:23:31] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[00:25:58] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 268 seconds)
[00:26:33] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[00:26:51] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[00:27:11] *** Quits: todda7 (~torstein@31.4.137.82) (Ping timeout: 256 seconds)
[00:28:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[00:29:40] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 268 seconds)
[00:30:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:33:29] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[00:35:15] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[00:35:16] *** mickey80 is now known as mickey8
[00:38:19] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[00:38:23] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:39:12] *** Joins: trashbird (~trashbird@user/trashbird)
[00:40:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:44:16] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[00:44:45] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[00:48:38] *** Joins: mwilson_ (~mwilson@li159-72.members.linode.com)
[00:48:55] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (Read error: Connection reset by peer)
[00:49:01] *** mwilson_ is now known as mwilson
[00:49:38] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:eb17:11f:8d20:e9b7)
[00:51:30] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 260 seconds)
[00:54:05] *** Joins: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net)
[00:55:00] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[00:55:27] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[00:55:30] *** Joins: backthen (~backthen@c-76-103-177-91.hsd1.ca.comcast.net)
[00:57:25] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:58:13] *** Joins: iflema (~ian@user/iflema)
[00:58:54] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fdcb:79e0:754c:cdbd) (Ping timeout: 256 seconds)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:00:55] *** Joins: cyrus_mc (~cyrus_mc@45.62.180.58)
[01:01:11] <cyrus_mc> Updating a script from python2 to 3 and running into the following - https://pastebin.com/HjtQNKEf
[01:01:25] <cyrus_mc> TypeError: Object of type bytes is not JSON serializable - any help would be appreciated
[01:01:30] *** Quits: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[01:01:57] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[01:02:04] *** Joins: alex11 (~alex11@user/alex11)
[01:02:30] *** Quits: bxsx (~x@131.red-79-151-13.dynamicip.rima-tde.net) (Quit: leaving)
[01:03:00] <Swayze> have you tried appending .decode("utf-8")
[01:03:10] <Swayze> to gdecode("utf-8")
[01:03:10] <cyrus_mc> To which line?
[01:03:26] <Swayze> generate_vault_request(profile, vault_address)).decode("utf-8")
[01:03:27] *** Joins: Mindscape (~Lindis@user/lindis)
[01:03:43] *** Joins: Harlin (~DonQixote@75-163-138-123.clsp.qwest.net)
[01:04:08] <Swayze> sorry before the second )
[01:04:30] *** Quits: Bakunin (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[01:04:46] <cyrus_mc> So  print (json.dumps(generate_vault_request(profile, vault_address).decode("utf-8")))?
[01:05:04] <cyrus_mc> Get same error
[01:05:08] <Swayze> ok
[01:05:13] <tmart> Is there a way to create a list from the items of an async iterator? Trying this way: https://bpa.st/7IZA Line 14, but getting the error from the comment. (I could "async for" over it and build the list one-by-one with appends, but maybe I don't have to?)
[01:05:14] <Swayze> https://stackoverflow.com/questions/44682018/typeerror-object-of-type-bytes-is-not-json-serializable
[01:05:19] <Swayze> not sure if this may help you cyrus_mc
[01:05:26] <cyrus_mc> k. I will look
[01:06:14] <phy1729> b64encode returns bytes, you need to decode that into strings
[01:06:51] *** Quits: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[01:06:54] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 260 seconds)
[01:07:15] <cyrus_mc> phy1729, so lines like 'iam_request_url':         base64.b64encode(request.url)?
[01:07:19] <bpalmer> tmart: [i async for i in the_iterator()] ?
[01:07:36] <phy1729> cyrus_mc: yeah each of those needs a .decode('utf-8')
[01:07:49] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4)
[01:08:20] <tmart> That works, good idea, thanks @bpalmer
[01:09:25] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[01:09:39] <cyrus_mc> phy1729: so did 'iam_request_url':         base64.b64encode(request.url).decode('utf-8') and still get that error.
[01:09:43] *** Parts: bpalmer (~user@user/bpalmer) (ERC (IRC client for Emacs 27.2))
[01:09:59] <phy1729> and on the other two times there's b64encode?
[01:10:06] <cyrus_mc> Ya, same thing
[01:10:10] *** Mindscape is now known as Bakunin
[01:10:38] <cyrus_mc> The stack trace shows error on line 31 which is headers = json.dumps(headers_to_go_style(dict(request.headers)))
[01:11:40] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:11:50] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[01:12:13] *** Joins: kosh (~kosh@user/kosh)
[01:12:27] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Client Quit)
[01:13:26] <ChrisWarrick> cyrus_mc: print(headers_to_go_style(dict(request.headers)))?
[01:13:28] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[01:13:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[01:13:57] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:13:58] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[01:14:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[01:15:09] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[01:15:11] <cyrus_mc> When trying that I get TypeError: a bytes-like object is required, not 'str'
[01:15:36] *** Joins: pycurious (~Adium@user/pycurious)
[01:15:46] <ChrisWarrick> cyrus_mc: full traceback?
[01:15:54] *** Joins: fikran (~fikran@user/fikran)
[01:16:21] <cyrus_mc> https://pastebin.com/M04b2U2T
[01:17:05] <cyrus_mc> Taking out that previous suggestion
[01:18:08] <ChrisWarrick> cyrus_mc:  base64.b64encode(request.url.encode('utf-8')).decode('utf-8')
[01:18:26] <cyrus_mc> So adding the print like suggested got past that one error but now it is throwing the error shown. Let me try your latest suggestion
[01:19:11] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:19:56] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Remote host closed the connection)
[01:20:10] <ChrisWarrick> cyrus_mc: print won’t get you past errors
[01:20:11] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:20:20] <ChrisWarrick> cyrus_mc: I want to see the actual thing you’re encoding
[01:20:21] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:22:31] *** Joins: tracey (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[01:23:55] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[01:24:25] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[01:24:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:26:17] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Remote host closed the connection)
[01:26:43] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:30:06] *** Joins: criswell (~quassel@136.62.184.132)
[01:30:16] *** Joins: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net)
[01:30:51] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[01:31:22] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:32:11] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[01:32:21] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 256 seconds)
[01:33:09] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:33:21] *** Joins: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net)
[01:34:25] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 268 seconds)
[01:35:54] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 260 seconds)
[01:36:58] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[01:38:29] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:38:35] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 256 seconds)
[01:38:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:39:29] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:39:47] *** Joins: zoneu (~zoneu@user/zoneu)
[01:41:49] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:42:50] *** Quits: jyg (~jyg@23-119-125-152.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[01:43:07] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[01:44:32] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 240 seconds)
[01:44:35] *** Joins: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2087:7385:664a:83cd)
[01:44:40] <cyrus_mc> ChrisWarrick: https://pastebin.com/miQfnTWV - the line headers = json.dumps(headers_to_go_style(dict(request.headers))) is supposed to take all the headers returned in the request call and generate what is in the pastebin. That is then base64 encoded and the result returned when the script exits
[01:44:44] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[01:44:58] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:45:48] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[01:45:49] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:46:28] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:46:38] <cyrus_mc> So the code takes all the headers and creates a dict of them, then serializes to JSON and base64 encodes that result.
[01:46:54] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:47:36] <ChrisWarrick> cyrus_mc: print it with python 3
[01:47:50] <cyrus_mc> ? not sure what you mean
[01:48:34] *** Church is now known as Xf
[01:48:42] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:49:16] <ChrisWarrick> cyrus_mc: run your code with python 3, not python 2
[01:49:17] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:49:55] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 256 seconds)
[01:49:55] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[01:50:10] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:50:16] <cyrus_mc> I am running it with 3, hence the errors. With 2 it works (full disclosure I found this script on the internet about 2 years ago and it served my purposes).
[01:50:18] <whatsupdoc> anyone wanna debug something for me lol?
[01:50:18] *** Joins: djapo (~archangel@user/djapo)
[01:50:29] *** lukedashjr is now known as luke-jr
[01:50:55] <nedbat> whatsupdoc: if you link to the deets, you will get opinions
[01:51:27] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:51:46] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[01:51:59] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 264 seconds)
[01:52:27] <whatsupdoc> I tried solving a leetcode puzzle, then got stuck: https://leetcode.com/problems/course-schedule/
[01:52:48] <whatsupdoc> My attempt: https://bpa.st/6E7A
[01:52:59] *** Joins: fcjsx (~fcjsx@2800:a4:82f:a500:dfb2:411b:b44f:9c5)
[01:53:05] *** Joins: syrius (~syrius@titan.stormtek.net)
[01:53:15] <whatsupdoc> It works for 46/51 test cases. Fails on longer ones
[01:53:19] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[01:53:37] *** Quits: fcjsx (~fcjsx@2800:a4:82f:a500:dfb2:411b:b44f:9c5) (Client Quit)
[01:53:40] *** Quits: TracaChang (~QSDkl@gateway/tor-sasl/tracachang) (Quit: Leaving)
[01:54:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:55:01] <cyrus_mc> ChrisWarrick: printed out request.headers and compared python2 vs python3. I do notice that in 3 when printing that out I get something like: {'Content-Type': b'application/x-www-form-urlencoded; charset=utf-8', 'User-Agent': b'
[01:55:19] <cyrus_mc> The b in front of the value isn't present in python2 version
[01:56:05] <nedbat> cyrus_mc: str in py2 is the same as bytes in py3.  py3 prints them as b"..."
[01:56:24] <cyrus_mc> k. So that is to be expected then.
[01:56:42] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[01:56:43] *** Joins: betuxy (~betuxy@p579add6d.dip0.t-ipconnect.de)
[01:57:24] <betuxy> Hey guys im looking for a way to scan qr codes with a camera on python, can you recommend something?
[01:57:39] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:58:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:58:48] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[01:59:32] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Ping timeout: 256 seconds)
[01:59:42] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 268 seconds)
[02:00:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[02:00:23] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 264 seconds)
[02:01:05] *** Joins: e2m4n (~ezman@user/e2m4n)
[02:01:09] *** Joins: mickey8 (~user@user/mickey)
[02:01:32] *** Quits: defiant (~defiant@user/defiant) (Ping timeout: 265 seconds)
[02:01:45] *** Joins: mimmy (~mimmy@146.70.75.189)
[02:02:29] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Quit: Leaving)
[02:03:05] <cyrus_mc> ChrisWarrick: so starting to understand the code a bit better. The object request.headers is of type HeadersDict and the code is essentially trying to json.dump that and then b64encode it. It did this by first casting? (dict(request.headers)) the object to a dictionary and then called headers_to_go_style to return a new object which it then
[02:03:06] <cyrus_mc> attempts to serialize
[02:05:46] <whatsupdoc> How do you set a default value in a python dictionary?
[02:06:03] <FunkyBob> whatsupdoc: there's defaultdict
[02:06:13] <FunkyBob> or you can subclass ando verride __missing__
[02:06:23] <FunkyBob> these are for if you want the default to follow the dict
[02:06:37] <FunkyBob> if you just want a default for looking up a value,  use dict.get(key, default)
[02:07:09] <FunkyBob> https://docs.python.org/3/library/collections.html#collections.defaultdict
[02:08:12] <FunkyBob> https://docs.python.org/3/reference/datamodel.html?highlight=__missing__#object.__missing__
[02:08:19] <whatsupdoc> thanks
[02:08:37] <FunkyBob> https://docs.python.org/3/library/stdtypes.html?highlight=__missing__#dict.get
[02:08:44] <whatsupdoc> is there a one liner that converts a list of lists into a set?
[02:09:01] <grym> whatsupdoc: a set of what
[02:09:04] <sveinse> Is there a way to abort a call to await asyncio.to_thread()? I know its not possible to interrupt a thread, but is there a way to cancel the await?
[02:09:14] <grym> set(itertools.chain.from_iterable(thenestedlist)), maybe
[02:09:14] <FunkyBob> x = set(*list_o_lists) maybe?  assuming you want to merge all the lists
[02:09:16] <whatsupdoc>         num = set() for l in prerequisites: num = num.union(set(l))
[02:09:22] <FunkyBob> mmm
[02:09:35] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:09:47] <FunkyBob> i'm wrong, ignore me :)
[02:09:47] <whatsupdoc> a set of integers
[02:10:02] <FunkyBob> so you want to flatten the list'o'lists and make a set of it?
[02:11:10] <sveinse> I've made a task loop that listens to (blocking) keypress. If I cancel the task, it'll cancel not before the thread function has returned. https://bpa.st/F3OA
[02:11:26] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4) (Ping timeout: 256 seconds)
[02:11:33] <grym> set(itertools.chain.from_iterable([[1,2],[1],[3,4]])) == {1,2,3,4}
[02:11:37] <whatsupdoc> set([i for l in prerequisites for i in l])
[02:11:45] <whatsupdoc> I guess I can flatten it
[02:11:56] <sveinse> I don't care if the thread is becoming an orphan
[02:12:46] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Ping timeout: 260 seconds)
[02:13:13] <Jong> I'm trying to store a list of list of integers in a sqlite blob. I'm thinking to flatten it to a single list, and create an offsets array to store the starting index of each list.  Anyone have a better idea?
[02:13:26] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:13:54] <cyrus_mc> ChrisWarrick: been trying to re-work the code and have the following: headers = {k: v.encode('utf-8') for (k, v) in request.headers.items()} this results in 'bytes' object has no attribute 'encode'. That to mean points that the value is of types (hence the output above showing b when I printed the object) and why json.dumps fails with Object of
[02:13:55] <cyrus_mc> type bytes is not JSON serializable
[02:16:43] <nedbat> Jong: store it as json instead?
[02:17:56] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:18:04] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[02:18:09] <whatsupdoc> https://bpa.st/U54A
[02:18:53] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:19:10] *** Quits: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2087:7385:664a:83cd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:13] <whatsupdoc> (help)
[02:19:55] <ArtfulDodger> dav1d, I'm still trying to implement my own chess version. 1 Lock protect the master, 1 Lock the opponent, 1 event is emitted when the master has done to trigger the player, and 1 other event is emitted when the player has done. But it is buggy, at the second round players start too early :( http://paste.debian.net/1220127/
[02:22:06] *** Quits: betuxy (~betuxy@p579add6d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:23:05] <dav1d> ArtfulDodger, just glancing over it, you never clear the events, once set they stay set, so everytime you wait on them they instantly return
[02:23:38] *** Joins: todda7 (~torstein@31.4.137.82)
[02:23:39] *** Joins: humbertowoody (~humbertow@189.236.62.65)
[02:23:55] *** Quits: humberto1 (~humbertow@189.236.62.65) (Ping timeout: 256 seconds)
[02:24:12] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[02:24:22] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[02:24:49] *** Joins: Zaelus (~Zaelus@user/zaelus)
[02:25:03] *** Quits: Zaelus (~Zaelus@user/zaelus) (Read error: Connection reset by peer)
[02:25:21] *** Joins: Zaelus (~Zaelus@user/zaelus)
[02:25:35] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:26:23] <ArtfulDodger> yessss that was the issue, thank you dav1d o/
[02:26:35] <dav1d> nice!
[02:26:37] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:6187:6f9d:f9ea:793b) (Quit: Textual IRC Client: www.textualapp.com)
[02:26:51] *** Joins: pycurious (~Adium@user/pycurious)
[02:27:05] *** Joins: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43)
[02:27:09] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:32] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:27:53] <cyrus_mc> Got it. Half the values were strings and the other half were bytes. So had to convert based on the type.
[02:28:57] *** Quits: Siecje (~Siecje@216.154.14.35) (Remote host closed the connection)
[02:29:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:29:26] <nedbat> cyrus_mc: ideally, you wouldn't have to use isinstance or type()
[02:29:31] <ArtfulDodger> dav1d, I don't get, however, why the print line 64 is printed at t=0... shouldn't it be delayed by the await line 62?
[02:30:25] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[02:30:40] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:30:53] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:05] *** Quits: Sky_Net (~Sky_Net@2.92.127.203) (Read error: Connection reset by peer)
[02:31:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:31:55] *** Joins: nicode (~nic@2607:f2c0:94d3:a300:b6a2:b673:d91f:e7db)
[02:32:24] *** Joins: jcarl43 (~jcarl@node-1w7jr9pj6xbfpbvumr522w6fg.ipv6.telus.net)
[02:32:56] <dav1d> Can you repast the code on a different pastebin? I am on the phone now and that paste does not work on mobile at all
[02:33:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:33:26] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 265 seconds)
[02:33:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 268 seconds)
[02:33:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:34:12] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[02:34:42] <ArtfulDodger> dav1d, https://bpa.st/SX4Q line 66 is printed before 64 is over
[02:34:51] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[02:35:33] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:35:49] *** Joins: ano (~ano@user/ano)
[02:36:08] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:36:19] <dav1d> Nah that's correct, you're not waiting on anything in play(), you're creating tasks and saving them in a list, no waiting, the tasks start their work kinda like a thread
[02:36:34] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 260 seconds)
[02:37:03] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[02:37:31] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 256 seconds)
[02:37:41] <ArtfulDodger> dav1d, ah yes! Thank you :)
[02:37:58] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[02:37:59] *** lukedashjr is now known as luke-jr
[02:38:42] *** Joins: nyah (~nyah@94.6.71.219)
[02:39:23] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 264 seconds)
[02:39:50] *** Quits: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur) (Remote host closed the connection)
[02:40:09] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[02:40:32] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 240 seconds)
[02:41:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:41:06] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:41:23] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4)
[02:41:49] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:41:55] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[02:42:45] *** Quits: hemstock (~hemstock@194.59.250.234) ()
[02:43:59] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:eb17:11f:8d20:e9b7) (Quit: Konversation terminated!)
[02:44:41] *** Joins: pycurious (~Adium@user/pycurious)
[02:45:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 268 seconds)
[02:45:59] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:45:59] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[02:46:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:46:50] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[02:48:41] *** Joins: Andrynet (~Andrynet@186.46.204.193)
[02:48:51] *** Quits: parv (~quass@user/parv) (Quit: parv)
[02:49:21] *** Quits: cyrus_mc (~cyrus_mc@45.62.180.58) (Quit: Connection closed)
[02:49:56] *** Quits: Zaelus (~Zaelus@user/zaelus) (Quit: Leaving)
[02:51:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.37)
[02:51:49] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:52:33] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:53:09] <whatsupdoc> oh i see what's wrong with my code
[02:53:43] *** Joins: TuckerBrandy1997 (~TuckerBra@209.87.29.242)
[02:54:08] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[02:54:17] <TuckerBrandy1997> https://dpaste.org/CwNx I get an invalid syntax error for line 6 here
[02:54:39] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:54:45] <nedbat> TuckerBrandy1997: probably you aren't using Python 3.10
[02:55:05] <TuckerBrandy1997> oh um...
[02:55:19] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[02:56:25] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:58:04] *** Quits: TuckerBrandy1997 (~TuckerBra@209.87.29.242) (Client Quit)
[02:59:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[03:00:15] *** Joins: redrum88 (~redrum88@user/redrum88)
[03:02:32] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:3004:83bf:8b32:5e60) (Ping timeout: 240 seconds)
[03:03:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 264 seconds)
[03:04:33] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:05:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:06:04] *** Joins: inomoz (~inomoz@176.59.125.26)
[03:06:10] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:06:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:07:45] <p-i-_> How would I go about disk saving/loading a dict where each value is a pandas dataframe?
[03:07:50] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[03:08:18] *** Quits: Andrynet (~Andrynet@186.46.204.193) (Ping timeout: 260 seconds)
[03:10:23] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[03:11:47] *** Quits: magla (~gelignite@55d403ec.access.ecotel.net) (Quit: Stay safe!)
[03:12:07] *** Joins: \mSg (mSg@user/msg/x-0285936)
[03:12:27] *** Joins: xcm_ (~xcm@user/xcm)
[03:12:29] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[03:12:45] <BtbN> Don't you typically use hdf to save that stuff?
[03:12:45] *** Joins: JanC_ (~janc@user/janc)
[03:12:52] *** Quits: JanC (~janc@user/janc) (Killed (calcium.libera.chat (Nickname regained by services)))
[03:12:52] *** JanC_ is now known as JanC
[03:13:10] <bluss> hdf can store multiple dataframes in one file, each under a key, so it would work
[03:13:20] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[03:13:20] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[03:13:20] *** Quits: kmh (~kmh@2a00:6020:5004:6800:d071:7f46:ac12:b504) (Remote host closed the connection)
[03:13:37] *** Joins: Axy (~Axy@user/axy)
[03:13:54] <grym> p-i-_: df.to_json() ?
[03:14:24] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:15:06] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[03:15:30] *** Quits: Common (~Common@user/common) (Quit: Leaving)
[03:16:46] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:17:44] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Read error: Connection reset by peer)
[03:18:07] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:b07c:74ab:2cee:7b3b)
[03:18:16] *** Joins: humbertowoody (~humbertow@189.236.62.65)
[03:18:28] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[03:21:09] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 256 seconds)
[03:21:48] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:22:02] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:b07c:74ab:2cee:7b3b) (Ping timeout: 240 seconds)
[03:22:31] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:22:52] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[03:23:23] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:23:25] *** Quits: todda7 (~torstein@31.4.137.82) (Ping timeout: 256 seconds)
[03:23:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[03:23:59] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[03:24:11] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 268 seconds)
[03:25:14] *** Joins: fikran (~fikran@user/fikran)
[03:26:08] *** Joins: y1n (~y1n@178.115.56.234.wireless.dyn.drei.com)
[03:27:01] *** Joins: oz4ga (~tim@hator.sunsite.lv)
[03:28:39] *** Joins: Proxysna_ (~Proxysna@62.119.254.142)
[03:28:41] *** Joins: cation21 (cation@user/cation)
[03:28:42] *** Joins: Tashtari` (~tashtari@user/tashtari)
[03:28:44] *** Joins: user3456_ (user3456@user/user3456)
[03:29:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:29:35] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[03:29:35] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[03:29:35] *** Quits: Tashtari (~tashtari@user/tashtari) (Ping timeout: 265 seconds)
[03:29:35] *** Quits: user3456 (user3456@user/user3456) (Remote host closed the connection)
[03:29:41] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[03:29:46] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[03:29:48] *** user3456_ is now known as user3456
[03:29:59] *** Joins: c10l (~c10l@user/c10l)
[03:30:20] *** Quits: syllin (~syllin@user/syllin) (Quit: Ping timeout (120 seconds))
[03:30:40] *** Joins: syllin (~syllin@user/syllin)
[03:30:56] *** Joins: Macuser (~Macuser@2600:1003:b86d:3461:d83:c626:c2d0:9e6c)
[03:31:58] *** cation21 is now known as cation
[03:32:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[03:33:54] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:33:58] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:35:20] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[03:35:33] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[03:36:40] <p-i-_> tx
[03:37:56] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[03:38:25] *** Joins: driib3 (~driib@185.65.135.234)
[03:40:35] *** Quits: driib (~driib@185.65.135.232) (Ping timeout: 264 seconds)
[03:40:35] *** driib3 is now known as driib
[03:41:27] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[03:41:42] <whatsupdoc> I swear #python is anti-leetcode
[03:45:31] <bjs> whatsupdoc: anti-leetcode?
[03:45:52] *** Joins: dre (~dre@2001:8003:c932:c301:a745:514b:948f:a168)
[03:47:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[03:47:16] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:47:30] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[03:49:37] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[03:50:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:50:50] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[03:51:11] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[03:51:53] *** Joins: zeden (~zeden@user/zeden)
[03:51:58] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[03:52:17] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[03:54:16] *** Joins: Hackerpcs (~user@user/hackerpcs)
[03:54:23] <whatsupdoc> bjs: if you ask a question about leetcode, it won't be answered
[03:54:51] <bjs> whatsupdoc: hmm looking back at your question,  you are attributing the lack of response to the fact the code comes from a solution to a question on leetcode?
[03:55:13] <whatsupdoc> bjs: yes lol
[03:55:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:56:04] <whatsupdoc> bjs: took me like an hour lol, but i saw what i did wrong
[03:56:22] <bjs> whatsupdoc: Hmm,  I don't think that was the reason.  Asking a good question is hard because you have to get peoples attention while conveying what information/help you need so that those that can help will be caught by the question
[03:56:35] <bjs> whatsupdoc: I'm not going to say anything other than "<block of code> (help)" isn't even a question ;)
[03:56:59] <bjs> so it's very likely people didn't even see it was a leetcode question at all...
[03:57:06] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[03:57:28] <whatsupdoc> lol
[03:57:46] <bjs> whatsupdoc: I'm not sure what you're saying with that "lol"
[03:57:47] *** Quits: zoneu (~zoneu@user/zoneu) (Quit: zoneu)
[03:58:32] *** Quits: grimvar (~grimvar@i5C75F4F2.versanet.de) (Ping timeout: 240 seconds)
[03:59:08] <whatsupdoc> i found your "block of code (help)" summary of my request funny
[03:59:22] <bjs> whatsupdoc: it's not even a summary, it's basically verbatim isn't it
[03:59:24] <bjs> down to the parens :)
[03:59:44] <whatsupdoc> well, there were a few messages before that, but yea
[03:59:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[04:00:02] <bjs> Well you got answers to those, so I assumed you were talking about the bit you didn't get answers to :)
[04:00:05] <whatsupdoc> oh well, it's better when you figure it out on your own
[04:00:33] *** Joins: grimvar (~grimvar@i5C75F4BD.versanet.de)
[04:00:54] <bjs> whatsupdoc: maybe, it's good to get help when you're stuck though too
[04:01:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[04:01:39] <whatsupdoc> technically i could cheat and just read a solution, but i hate doing that
[04:02:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:06:16] *** Quits: seednode (~seednode@user/seednode) (Read error: Connection reset by peer)
[04:06:30] <bjs> whatsupdoc: well,  would you just be cheating yourself?
[04:07:07] <bjs> but if you're stuck,  seeing other solutions is not necessarily "cheating" (unless of course this is some kind of test...)
[04:07:42] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[04:07:49] *** Parts: akk (~akk@75.161.146.115) (+++)
[04:08:08] <whatsupdoc> i guess, but it's a lot less effort to just read a solution, understand how it works and memorize it
[04:08:27] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[04:08:34] *** Joins: seednode (~seednode@user/seednode)
[04:09:49] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 268 seconds)
[04:10:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:11:18] *** Quits: delvian (~delvian@41.13.246.212) (Ping timeout: 260 seconds)
[04:11:46] *** Joins: Wulf (~Wulf@user/wulf)
[04:11:47] *** Joins: neachdainn (~nate@50.224.226.50)
[04:12:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[04:12:29] *** Quits: Samian (~s@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[04:12:47] <neachdainn> Hey all. Is it possible for the contents of a function to significantly slow down the process of compiling bytecode other than just being long?
[04:13:35] *** Joins: fikran (~fikran@user/fikran)
[04:13:40] *** Quits: rammstein (~gnu@2400:8904::f03c:92ff:fe4b:7c0a) (Remote host closed the connection)
[04:13:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:15:13] *** Joins: noelleleigh (~noellelei@user/noelleleigh)
[04:15:44] <nedbat> neachdainn: no.  what's going on?
[04:17:09] <neachdainn> Nothing yet. I just have a program that compiles some bytecode that needs to run in a certain amount of time and I wanted to double check that limiting the size of the code should be a reasonable way to limit runtime.
[04:17:47] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 264 seconds)
[04:18:15] <neachdainn> That wasn't super clear on my part. The process of compiling the bytecode needs to run in a certain amount of time. The actual contents of the Python code doesn't matter for this.
[04:19:30] *** Quits: i-oliva (~i-oliva@cpc110783-lewi20-2-0-cust1164.2-4.cable.virginm.net) (Ping timeout: 256 seconds)
[04:19:37] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:20:05] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[04:20:11] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 264 seconds)
[04:22:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:22:21] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[04:22:54] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4) (Ping timeout: 256 seconds)
[04:22:54] *** Joins: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net)
[04:23:06] *** Joins: xsx (~x@131.red-79-151-13.dynamicip.rima-tde.net)
[04:23:09] *** Joins: OPK (~OPK@user/opk)
[04:24:05] *** Parts: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net) ()
[04:24:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[04:24:23] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[04:25:51] <nedbat> neachdainn: interesting. why does the bytecode have to compile in a certain time?
[04:27:09] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:81cc:b95b:a813:c466) (Remote host closed the connection)
[04:28:03] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[04:28:37] *** Quits: emf_ (~emf@2620:10d:c090:400::5:5ceb) (Quit: emf_)
[04:29:02] *** Joins: emf (~emf@2620:10d:c090:400::5:5ceb)
[04:29:33] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[04:29:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[04:30:35] *** Quits: jcarl43 (~jcarl@node-1w7jr9pj6xbfpbvumr522w6fg.ipv6.telus.net) (Quit: WeeChat 3.3)
[04:31:14] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[04:32:53] *** Quits: dude-x (~textual@72.76.74.165) (Read error: Connection reset by peer)
[04:33:09] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:33:26] <neachdainn> The short answer is that the I have a chunk of Python code that needs to be run at a regular interval, which means I need the GIL to not be held.
[04:34:35] <nedbat> neachdainn: wouldn't it only compile once?
[04:34:35] <neachdainn> If I can use the code length of an incoming function as a heuristic for whether or not I'm going to have GIL issues, then I can preemptively reject functions that may cause issues.
[04:34:57] <neachdainn> I have one function that must run at regular intervals and other functions happening around it.
[04:34:57] *** Joins: dude-x (~textual@72.76.74.165)
[04:35:15] <nedbat> neachdainn: the GIL will be released though.  why would compiling bytecode be a problem for the GIL?
[04:35:23] *** Quits: tracey (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:35:30] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4)
[04:35:38] *** Quits: jim (~jim@about/linux/staff/jim) (Quit: Leaving)
[04:35:44] <neachdainn> I'll type out the longer answer. Give me one second
[04:36:59] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[04:37:35] *** Quits: emf (~emf@2620:10d:c090:400::5:5ceb) (Ping timeout: 264 seconds)
[04:39:30] <neachdainn> I have a function `MyCriticalFunction` that must be run at a specific frequency. In between calls to `MyCriticalFunction`, other function calls can be happening. However, if those other functions run too long, I `PyErr_SetInterrupt` on them to abort them so that `MyCriticalFunction` runs on time. When one of those other functions come in, they need to be compiled which also acquires the GIL
[04:39:32] <neachdainn> (right?), so I am hoping to use the length of the code as a way to either reject certain incoming functions or otherwise schedule the compilation at a better time.
[04:40:04] <neachdainn> It's a bit of a mess and a language like Lua would probably be better in this space, but legacy stuff.
[04:40:12] <nedbat> neachdainn: these functions are being run just once? From changed source each time?
[04:40:38] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:40:52] <xsx> how to check if func argument is pulled from defaults or was really passed by caller?
[04:41:25] <nedbat> xsx: you can't tell the difference between def func(a=None) and func(None)
[04:41:32] <sveinse> neachdainn: How hard is your realtime system? What are the tolerances?
[04:41:32] <phantomotap> xsx: what are you trying to do?
[04:41:33] <neachdainn> They're run an arbitrary number of times (except for `MyCriticalFunction` which is repeatedly run forever) but the set of other functions is updating throughout the life of the program.
[04:41:36] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[04:41:39] <neachdainn> nedbat: ^
[04:42:01] *** Joins: jim (~jim@about/linux/staff/jim)
[04:42:44] <nedbat> neachdainn: you could do the compilation in a different process if you want. It just seems odd to focus on bytecode compilation time as a possible problem.  Have you seen it cause issues?
[04:42:56] <xsx> phantomotap: arguments tracking
[04:43:13] <xsx> nedbat: i guess i can get it from traceback..
[04:43:32] <nedbat> xsx: tracking how? tell us more.
[04:43:52] <phantomotap> xsx: i get that much, but... can you post a small example somewhere
[04:44:29] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-344b-a1a2-fb0d-5a70.res6.spectrum.com) (Read error: Connection reset by peer)
[04:45:16] <neachdainn> nedbat: Doing the compilation in a different process is a good idea. No issues yet, but `MyCriticalFunction` is running some realtime components on a robot and I'd rather not wait to see if it becomes an issue.
[04:45:46] <nedbat> neachdainn: this definitely calls for some empirical experiments
[04:46:29] <sveinse> I'm running a real-time audio system in python that certainly needs to be within some boundaries to not get glitching, and I haven't had any need to optimize python in any way to make it work. (Surprising so, I might ad)
[04:46:41] <xsx> i want to know if the exact argument was manually passed by caller, or a default value was used instead. i guess, i can get it from the stack, but looking for nicer way. i'm not really interested in the value of argument, only if one was passed or not
[04:47:14] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 260 seconds)
[04:47:20] *** Joins: f0fz (~f0fz@122.11.212.172)
[04:47:38] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 260 seconds)
[04:47:44] <nedbat> xsx: but why do you want to know? Maybe you should use a different default?
[04:47:49] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[04:47:55] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:48:03] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:48:18] <nedbat> xsx: definitely don't inspect the stack as a way to make production code work properly
[04:48:55] <neachdainn> nedbat: Probably. But the longer-term goal is to move to a language that's more suited for this kind of thing and, for the time being, rejecting new functions based on length is easy to implement and won't hurt (even if it ends up not helping).
[04:49:02] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[04:49:30] *** Joins: Abrax (~Abrax@user/abrax)
[04:49:56] <neachdainn> Basically just a `if(strlen(new_code) > SOME_LIMIT) return ErrCodeTooLong;` and then go about my day. Hahah
[04:51:20] <nedbat> neachdainn: why aren't you worried about the run-time of the code? Why only the time to compile?
[04:52:05] *** Quits: Macuser (~Macuser@2600:1003:b86d:3461:d83:c626:c2d0:9e6c) (Quit: Textual IRC Client: www.textualapp.com)
[04:53:02] <xsx> nedbat: maybe. if i will be able to track it, i will know it ;)
[04:53:27] <nedbat> xsx: i don't understand.  can you say more about why you want to know if the caller passed in the default value?
[04:53:38] <xsx> https://bpa.st/CLLQ here is an example, i would like to detect scenario like in line 5
[04:53:42] *** Joins: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[04:54:10] <nedbat> xsx: that's a toy example.  Can you give us the real scenario? Why is it bad to pass in the default?
[04:54:17] *** Joins: poiqwepoiqwe (uid525840@hampstead.irccloud.com)
[04:54:23] <neachdainn> I am worried about the runtime, but I use `PyErr_SetInterrupt` for that. It's not perfect but it should work well enough until I can switch to something like WASM or Lua
[04:54:23] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[04:54:50] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[04:56:00] <xsx> nedbat: this is for semi automated configurations, and i need to measure what configurations are chosen by AI on remote devices.
[04:56:16] *** Joins: todda7 (~torstein@31.4.137.31)
[04:56:47] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 264 seconds)
[04:56:47] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[04:58:06] *** Joins: pycurious (~Adium@user/pycurious)
[04:58:17] <nedbat> xsx: why not set the default to None?
[04:58:22] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[04:58:26] <xsx> nedbat: so, caller is AI, and I would like to see what (and how) it calls as args are settings, and if i don't distinct default from same-as-default, i will get wrong metrics
[04:58:32] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[04:59:36] <nedbat> xsx: if you use None as a default, you can set the value inside the function if None is the argument. then you can tell the difference between passed and defaulted.
[05:00:16] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:00:24] <phantomotap> ^- i was going to suggest something similar.
[05:01:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[05:02:11] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 264 seconds)
[05:03:15] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[05:04:08] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[05:04:37] <xsx> how would i know it? it can still be called as func(None), no?
[05:05:21] <nedbat> xsx: if you need to detect that too, then use:   SENTINEL = object();  def func(a=SENTINEL):
[05:05:27] <phantomotap> xsx: use a custom sentinel. eg a private instance of a private class.
[05:05:33] <nedbat> xsx: then no one can pass the default
[05:05:39] <phantomotap> or that.
[05:05:49] *** Joins: maximilian90 (~standard-@x590feea3.dyn.telefonica.de)
[05:05:51] <nedbat> phantomotap: i just be quiet and let you handle it :)
[05:05:54] <xsx> well, you know, actually, func(None) is forbidden by API :D
[05:06:08] <xsx> so, it can work!
[05:06:22] <xsx> i mean, the arg should be a str
[05:06:22] *** Quits: neachdainn (~nate@50.224.226.50) (Ping timeout: 260 seconds)
[05:06:39] <phantomotap> nedbat: please don't. we are both just trying to help figure this out. ^_^
[05:07:32] *** Joins: neachdainn (~nate@50.224.226.50)
[05:07:42] <xsx> nedbat: never thought to use object() as default, this looks cool :D
[05:08:21] <xsx> but None will be good enough here
[05:08:29] <xsx> thanks!
[05:09:48] <nedbat> phantomotap: glad to have the help
[05:10:34] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 260 seconds)
[05:11:11] <xsx> so, just for curiosity, why it's not possile to check caller params?
[05:12:35] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[05:13:12] <nedbat> xsx: because values don't track where they came from
[05:15:02] <xsx> nedbat: yeah, but Python is dynamic language, so i expected it's possible to check it
[05:15:49] <Repiphany> Something like `def func(**kwargs): if kwarg not in kwargs: # use default` but that hides the function signature
[05:16:18] <InPhase> neachdainn: You might want to investigate the multiprocessing library.  It's easier to supply guarantees, and then you won't have to do these architectural leaps to fight around what's happening in a single process.
[05:17:02] *** Quits: neachdainn (~nate@50.224.226.50) (Ping timeout: 268 seconds)
[05:17:22] <InPhase> Great timing guarantee there on the timeout.  :)
[05:17:32] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[05:18:20] <xsx> Repiphany: `def func(param=None): if param is None: param = 'default'` ...I would prefer to see `def func(param='default')` for readabiity ;)
[05:19:23] <Repiphany> Using **kwargs lets you know if something's explicitly passed in, I mean
[05:19:31] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[05:19:35] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[05:19:35] *** Quits: flokuehn (~flokuehn@87.123.247.94) (Ping timeout: 264 seconds)
[05:19:50] *** Joins: de-facto (~de-facto@user/de-facto)
[05:20:42] <xsx> Repiphany: right
[05:21:14] *** Joins: flokuehn (~flokuehn@87.123.247.43)
[05:21:14] <xsx> anyway, using None works great, thanks for help everyone!
[05:21:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[05:23:51] <phy1729> xsx: in that case it's safe, but for mutable objects like lists and dicts it isn't
[05:24:42] *** Quits: f0fz (~f0fz@122.11.212.172) (Remote host closed the connection)
[05:24:52] *** Joins: audiobirb (~audio@user/audio)
[05:24:58] *** Joins: f0fz (~f0fz@122.11.212.172)
[05:26:03] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[05:26:03] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[05:26:17] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:27:14] *** Quits: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43) (Read error: Connection reset by peer)
[05:27:52] *** Joins: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43)
[05:28:10] *** Quits: onichomp (~onichomp@2806:264:4404:8016:85bb:d6c8:6a2e:8f43) (Read error: Connection reset by peer)
[05:29:13] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 256 seconds)
[05:30:20] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:40] *** Joins: pycurious (~Adium@user/pycurious)
[05:31:13] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[05:31:19] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[05:32:22] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:41:36] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[05:41:41] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 256 seconds)
[05:42:01] *** rexbinary_ is now known as rexbinary
[05:42:08] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:42:19] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[05:44:04] *** Joins: Common (~Common@user/common)
[05:45:49] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[05:49:05] *** Joins: redgloboli_ (~redglobol@user/redgloboli)
[05:49:05] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 250 seconds)
[05:49:44] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[05:49:58] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[05:50:26] <Evolver> Is there a global lockfile-like package? There are several that offer a lockfile for a single system.
[05:50:45] <Evolver> but I want one that works over the internet for multiple systems
[05:51:46] <Evolver> In AWS, people sometimes use DynamoDb for this which would be overkill.
[05:53:02] *** Quits: nrg (~NRG@user/nrg) (Ping timeout: 260 seconds)
[05:53:55] *** Quits: xsx (~x@131.red-79-151-13.dynamicip.rima-tde.net) (Quit: leaving)
[05:54:16] <Evolver> I wish there were a free service that would offer a global lock with a timeout and a package for Python.
[05:54:54] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 260 seconds)
[05:54:55] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[05:56:09] *** Joins: nrg (~NRG@user/nrg)
[05:56:59] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[05:57:09] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[06:00:49] *** Quits: y1n (~y1n@178.115.56.234.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[06:02:53] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[06:04:31] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[06:05:29] *** Quits: maximilian90 (~standard-@x590feea3.dyn.telefonica.de) (Ping timeout: 256 seconds)
[06:06:25] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[06:08:12] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:09:29] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 265 seconds)
[06:09:29] *** brabrax_ is now known as brabrax
[06:10:28] *** Xf is now known as Church
[06:10:41] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:11:49] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[06:12:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:18:59] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 264 seconds)
[06:20:47] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 256 seconds)
[06:20:55] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[06:20:55] *** Quits: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484) (Quit: Konversation terminated!)
[06:20:56] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[06:21:04] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[06:21:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[06:21:11] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[06:21:11] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:ceac:2373:563e:bfbf)
[06:21:11] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:21:43] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[06:22:57] *** Joins: fikran (~fikran@user/fikran)
[06:23:32] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[06:25:55] *** Joins: f0fz (~f0fz@122.11.212.172)
[06:25:56] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[06:26:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:27:02] *** Quits: emerent (~quassel@p200300cd571f93e8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:30:25] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 256 seconds)
[06:30:35] *** Joins: emerent (~quassel@p200300cd574532b8ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:31:15] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:32:15] *** Joins: millido (~millido@84.210.150.128)
[06:32:20] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[06:32:20] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4) (Quit: Client closed)
[06:34:00] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[06:41:45] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[06:42:36] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[06:42:43] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[06:42:52] *** Quits: backthen (~backthen@c-76-103-177-91.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[06:43:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:43:59] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 268 seconds)
[06:45:03] *** Joins: f0fz (~f0fz@122.11.212.172)
[06:45:27] *** Joins: pycurious (~Adium@user/pycurious)
[06:45:43] *** Joins: cthulchu (~Cthulchu@217.76.202.68)
[06:47:04] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:49:44] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-6319-e33a-78ba-13a3-5b05-4fb6.rev.sfr.net) (Read error: Connection reset by peer)
[06:50:36] *** Joins: newpy (~newpy@206.168.231.90)
[06:51:28] <newpy> can anyone explain this pandas.mode() behavior? https://paste.ee/p/Dd0vT
[06:51:28] *** Joins: xinap39035 (~xinap3903@c-98-35-24-224.hsd1.ca.comcast.net)
[06:51:43] <newpy> I thought it df.mode(axis=1) would create a dataframe with a single column
[06:55:08] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[06:55:39] *** Joins: f0fz (~f0fz@122.11.212.172)
[06:56:45] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4)
[06:57:02] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[06:57:06] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[06:57:12] <newpy> oh I think it's when there is the same # of each value so there is no mode?
[06:58:55] *** Joins: f0fz (~f0fz@122.11.212.172)
[06:58:56] *** Parts: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (Textual IRC Client: www.textualapp.com)
[06:58:57] *** Joins: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net)
[06:59:48] *** Parts: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (Textual IRC Client: www.textualapp.com)
[06:59:54] *** Joins: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net)
[07:00:38] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[07:00:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:02:11] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:02:29] *** Quits: cthulchu (~Cthulchu@217.76.202.68) (Ping timeout: 268 seconds)
[07:03:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[07:04:40] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:05:02] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 240 seconds)
[07:05:07] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:06:15] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:06:19] *** Parts: xinap39035 (~xinap3903@c-98-35-24-224.hsd1.ca.comcast.net) (Leaving)
[07:06:35] *** Joins: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[07:06:49] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:07:12] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:08:33] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:09:24] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:10:31] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:11:08] *** Joins: zebrag (~chris@user/zebrag)
[07:11:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:11:13] *** Quits: sudomann (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[07:12:14] *** Quits: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[07:12:14] *** Joins: kostkon_ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[07:12:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[07:14:52] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[07:15:10] *** Quits: adeliktas (~adeliktas@2001:16b8:223d:bc00:494b:b8b9:b20f:75eb) (Ping timeout: 256 seconds)
[07:15:54] *** Joins: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[07:15:55] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[07:16:32] *** Quits: kostkon_ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[07:16:32] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[07:16:34] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 260 seconds)
[07:16:38] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[07:16:46] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:18:38] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:20:36] <SnoopJ> newpy, per the DataFrame.mode() doc: "The mode of a set of values is the value that appears most often. It can be multiple values."
[07:20:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 264 seconds)
[07:21:36] <SnoopJ> so 2009-12-07 is a row with a mode that is 3 values, the rest of the rows shown have a single-value mode. NaN accounts for the times when there are < 3 values in the mode for that row.
[07:22:36] <SnoopJ> in other words, -1.0, 0.0, and 1.0 all appear "the most times" in that row, so they're all "tied" for the mode.
[07:22:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:23:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:23:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Ping timeout: 264 seconds)
[07:24:04] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[07:24:58] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:25:28] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[07:27:52] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Remote host closed the connection)
[07:28:07] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[07:29:25] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:29:56] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:31:28] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[07:33:19] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:33:53] *** Joins: yeirr (~yeirr@user/yeirr)
[07:34:11] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:35:16] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:35:29] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:07] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:58] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:37:48] *** Joins: Maikel (~Maikel@130.61.63.136)
[07:38:20] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:38:56] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[07:40:04] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:40:32] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:41:20] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[07:42:42] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:42:48] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:43:56] *** Joins: sudomann (~sudomann@2601:543:100:2b70:ccbd:117f:1606:2594)
[07:44:25] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[07:44:25] *** jmiehe1 is now known as jmiehe
[07:45:23] *** Quits: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net) (Ping timeout: 264 seconds)
[07:45:57] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:45:59] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[07:46:34] *** Joins: Dotz0cat (~Dotz0cat@h203.195.186.173.dynamic.ip.windstream.net)
[07:46:38] <sudomann> WHat if we have package-a which depends on package-b and package-c, when package-b also depends on package-c?
[07:47:10] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:47:36] <sudomann> From the context of package-a, is it possible to import package-c without explicitely installing it?
[07:48:18] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 260 seconds)
[07:48:27] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:48:38] *** Joins: sudomann_ (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[07:49:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[07:49:48] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:50:03] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:50:25] <SnoopJ> sudomann, if package-a depends on package-b explicitly (and b on c explicitly), then installing package-a should install both packages -cb and -c
[07:50:29] <SnoopJ> -b and -c*
[07:50:58] *** Joins: f0fz (~f0fz@122.11.212.172)
[07:51:30] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:51:52] <sudomann> thanks!
[07:51:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[07:53:20] <sudomann> So i take it that its not considered bad practice to import (sub)dependencies that you expect to be installed alongside declared dependencies (such as in requirements.txt)
[07:53:30] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[07:55:06] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:79a3:2dd9:48bf:aba4) (Quit: Client closed)
[07:56:20] <SnoopJ> requirements.txt is a laundry list of what makes an environment, it doesn't have signifance to the packaging system per se. Packages with a pyproject.toml or setup.cfg/setup.py are able to be installed in a way that lets installers know about their dependencies
[07:56:47] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 264 seconds)
[07:56:47] *** Quits: sudomann_ (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[07:57:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 257 seconds)
[07:58:31] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[07:58:45] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[07:58:58] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Remote host closed the connection)
[07:59:43] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[08:00:07] *** Quits: Deep6 (~jhenkel@d154-5-179-234.bchsia.telus.net) (Remote host closed the connection)
[08:02:13] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[08:02:21] *** Joins: f0fz (~f0fz@122.11.212.172)
[08:04:29] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[08:06:10] *** Joins: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se)
[08:06:13] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:06:37] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[08:07:33] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[08:07:49] <incal> o/ so I have an instance, say a, that has a main_loop method, so I do a = A() and then a.main_loop(), but if I then want another instance b, how do I then arrange a little context switch in Python if you follow? TIA
[08:07:53] *** Quits: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[08:08:00] *** Joins: f0fz (~f0fz@122.11.212.172)
[08:08:11] *** Joins: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[08:08:15] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[08:09:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[08:10:05] <incal> (after a stuff) b = A(); b.main_loop() # as well
[08:10:17] <incal> w/o a monopolizing the CPU
[08:10:23] <incal> starve b
[08:10:23] <incal> ?
[08:12:19] <SnoopJ> incal, sounds like you want an async framework of some kind. There are a few options, for the stdlib flavor, see the asyncio docs: https://docs.python.org/3/library/asyncio.html
[08:13:44] <incal> simples please ... OK thanks
[08:13:47] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[08:14:31] *** Joins: f0fz (~f0fz@122.11.212.172)
[08:14:50] <esaym153> is the spread operator '**' invalid in python2? http://paste.debian.net/hidden/e189d639/
[08:15:16] <incal> https://www.geeksforgeeks.org/how-to-run-two-async-functions-forever-python/
[08:15:49] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 256 seconds)
[08:17:01] <SnoopJ> esaym153, no, but the syntax is exclusive to 3.5+ https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations
[08:17:38] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[08:17:51] <esaym153> SnoopJ: figured, was trying to shallow copy a dict while overwriting one of the keys. What is the python 2 way?
[08:17:53] *** Quits: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[08:18:12] *** Joins: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[08:18:18] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:19:14] <SnoopJ> esaym153, I think you want `shop = s.copy(); shop.update({"uni": ...})`
[08:19:17] <incal> loop = asyncio.get_event_loop(); asyncio.async(a.main_loop()); asyncio.async(b.main_loop()); loop.run_forever() # will this work?
[08:19:18] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:19:56] <esaym153> SnoopJ: sweet, thanks
[08:20:09] <SnoopJ> incal, nope, that's invalid syntax
[08:20:12] <SnoopJ> (try it and see)
[08:20:53] <SnoopJ> esaym153, if it's just a single key you could also do `shop["uni"] = ...` which avoids constructing the second dict and is a little less magical-looking too :)
[08:23:58] <incal> loop.run_until_complete(a.main_loop()) # ?
[08:24:11] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:25:07] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 268 seconds)
[08:27:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[08:29:45] *** Quits: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[08:29:59] *** Joins: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[08:30:29] <esaym153> SnoopJ: well was trying to not modify data passed into the function
[08:30:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:30:40] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[08:30:49] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Remote host closed the connection)
[08:30:51] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:30:52] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:31:06] *** Joins: pycurious (~Adium@user/pycurious)
[08:31:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[08:31:29] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:32:08] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[08:32:18] *** Joins: fikran (~fikran@user/fikran)
[08:32:24] <incal> task = asyncio.create_task
[08:32:30] <incal> that's it
[08:33:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[08:35:03] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[08:36:25] <incal> AMAZING!
[08:36:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:36:39] *** Joins: f0fz (~f0fz@122.11.212.172)
[08:36:39] <incal> thanks a lot :)
[08:37:35] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[08:38:27] *** Quits: f0fz (~f0fz@122.11.212.172) (Read error: Connection reset by peer)
[08:38:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:49:16] *** Quits: dude-x (~textual@72.76.74.165) (Read error: Connection reset by peer)
[08:49:57] *** Joins: dude-x (~textual@72.76.74.165)
[08:51:44] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:53:11] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 264 seconds)
[08:53:29] *** Quits: Jong (~Jong@2620:10d:c090:400::5:4527) (Ping timeout: 268 seconds)
[08:56:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:57:07] *** Joins: yeirr (~yeirr@user/yeirr)
[08:58:36] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[08:58:49] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (Remote host closed the connection)
[08:58:57] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:59:08] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[08:59:15] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[09:00:38] *** Quits: enrh (~enrh@user/enrh) (Ping timeout: 260 seconds)
[09:01:00] *** Joins: enrh (~enrh@user/enrh)
[09:01:59] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[09:02:18] *** Joins: acegallagher (~Ace@174-16-184-4.hlrn.qwest.net)
[09:02:31] <acegallagher> is there a version of multiprocessing.starmap that guarantees order?
[09:07:03] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[09:07:03] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[09:07:17] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:08:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[09:08:17] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 268 seconds)
[09:10:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:10:03] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[09:15:01] *** Joins: Vonter (~Vonter@user/vonter)
[09:15:40] *** Joins: f0fz (~f0fz@183.90.36.170)
[09:15:41] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 264 seconds)
[09:17:22] *** Joins: Telvana (~capo@user/telvana)
[09:17:26] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 260 seconds)
[09:18:09] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:19:27] *** Joins: Andrynet (~Andrynet@186.46.200.136)
[09:20:30] *** Joins: adeliktas (~adeliktas@2001:16b8:2276:3d00:494b:b8b9:b20f:75eb)
[09:20:38] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58001987dd991f8b1ba3.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[09:21:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:23:15] *** Quits: eyepeetee (~aa@user/eyepeetee) (Ping timeout: 256 seconds)
[09:23:28] *** Joins: Telvana2 (~capo@user/telvana)
[09:23:42] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[09:24:23] *** Quits: Andrynet (~Andrynet@186.46.200.136) (Ping timeout: 256 seconds)
[09:26:30] *** Joins: vakera_pingveno_ (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[09:26:36] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[09:26:46] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 260 seconds)
[09:28:34] *** Quits: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[09:30:03] *** Quits: Telvana2 (~capo@user/telvana) (Ping timeout: 256 seconds)
[09:30:49] *** Joins: bloody (~bloody@user/bloody)
[09:31:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[09:33:17] *** Joins: Telvana (~capo@user/telvana)
[09:34:13] <jinsun> acegallagher: where do you see that starmap doesn't preserve order?
[09:35:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:36:02] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[09:49:02] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:4cc6:ac62:ef59:75ef)
[09:49:03] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:4cc6:ac62:ef59:75ef) (Remote host closed the connection)
[09:50:04] *** Joins: tsaka__ (~torstein@31.4.159.24)
[09:50:13] *** Quits: todda7 (~torstein@31.4.137.31) (Ping timeout: 268 seconds)
[09:52:08] *** Joins: kdc (~kdc@196.211.197.159)
[09:52:54] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 260 seconds)
[09:57:00] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[09:58:55] *** Joins: Telvana (~capo@user/telvana)
[09:59:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[10:00:03] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[10:02:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[10:04:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:08:20] *** Quits: Roedy (Roedy@user/roedy) (Remote host closed the connection)
[10:10:54] *** Joins: mimmy (~mimmy@146.70.75.149)
[10:11:27] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:12:10] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[10:14:05] *** Joins: onichomp (~onichomp@2806:264:4404:8016:f45b:a0b3:7fa:36e7)
[10:14:52] *** Joins: f0fz (~f0fz@183.90.36.170)
[10:16:01] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:16:41] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 250 seconds)
[10:20:16] *** Joins: rany (~rany@user/rany)
[10:21:36] *** Quits: kostkon__ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Remote host closed the connection)
[10:21:43] *** Joins: kostkon_ (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[10:21:52] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:22:40] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:22:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:23:28] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[10:26:49] *** Joins: Pixi (~Pixi@user/pixi)
[10:27:51] *** Joins: f0fz (~f0fz@183.90.36.170)
[10:29:21] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[10:30:53] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:c9df:e56f:9fd5:3c6f)
[10:31:21] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[10:32:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:35:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[10:35:20] *** Joins: f0fz (~f0fz@183.90.36.170)
[10:35:22] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[10:35:47] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 256 seconds)
[10:36:38] *** Joins: nomic (~nomic@185.217.117.59)
[10:37:30] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:40:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:40:35] *** Joins: CoolerY (~CoolerX@user/coolerx)
[10:40:48] *** Joins: jay-m126 (~jay-m@129.0.204.221)
[10:41:39] *** Joins: fikran (~fikran@user/fikran)
[10:41:41] *** Joins: mei (~mei@user/mei)
[10:42:22] *** Joins: f0fz (~f0fz@183.90.36.170)
[10:44:06] *** Quits: poiqwepoiqwe (uid525840@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:44:29] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 268 seconds)
[10:46:38] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[10:47:58] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.3)
[10:51:28] *** Joins: jug (~jug@user/jug)
[10:51:53] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[10:56:15] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[10:57:26] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[10:57:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[10:57:40] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[10:59:46] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:00:20] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[11:00:39] *** Joins: seednode (~seednode@user/seednode)
[11:01:26] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:01:35] *** Joins: cthulchu (~Cthulchu@88.128.88.28)
[11:03:30] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[11:04:12] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[11:06:47] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[11:06:47] *** Joins: upsala (~zcb@185.213.155.232)
[11:10:43] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:11:29] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 256 seconds)
[11:14:17] *** Joins: defiant (~defiant@user/defiant)
[11:14:33] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[11:16:49] *** Joins: sazawal (~sazawal@223.190.87.36)
[11:16:59] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[11:17:18] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:18:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:19:17] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:21:07] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[11:21:25] <sazawal> Hi all. How do I integrate a python thread with an async thread? Or, how do I spawn and communicate with a thread from an async function?
[11:21:37] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[11:21:44] *** Joins: manti7 (~manti7@176.10.104.94)
[11:22:28] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[11:23:16] <rindolf> sazawal: use two queues?
[11:23:35] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[11:23:42] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[11:23:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[11:24:07] *** ChanServ sets mode: -o supakeen
[11:24:08] <sazawal> rindolf, Wouldn't that stall the async thread while I wait for the queue data from another thread?
[11:24:28] <rindolf> sazawal: you can poll
[11:24:48] <rindolf> poll / peek
[11:24:56] <sazawal> rindolf, Let me look
[11:25:17] *** Quits: p-i-_ (~Ohmu@223.206.150.183) (Remote host closed the connection)
[11:25:55] *** Joins: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th)
[11:26:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:26:53] *** Joins: f0fz (~f0fz@183.90.36.170)
[11:27:08] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[11:27:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:27:27] <sazawal> rindolf, Please tell me some keywords to search for, not getting enough results with poll/peek
[11:28:16] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[11:28:39] <supakeen> sazawal: It's an idiom but you have non-blocking methods to see if anything is in a queue.
[11:29:12] <sazawal> supakeen, I see
[11:29:55] <supakeen> e.g. get_nowait.
[11:30:11] <rindolf> supakeen: thanks
[11:31:30] <sazawal> supakeen, Right. And I guess I can use the standard python queues for it, async queues are not thread-safe I found out.
[11:32:38] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[11:33:01] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[11:33:37] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[11:34:46] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 265 seconds)
[11:36:03] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 265 seconds)
[11:37:32] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[11:38:12] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[11:38:50] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 260 seconds)
[11:40:23] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:43:42] *** Joins: tobybl (~tobybl@213.31.134.235)
[11:43:53] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 246 seconds)
[11:44:27] *** Joins: Colt (~Colt@user/colt)
[11:45:01] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[11:45:22] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 260 seconds)
[11:45:27] *** Joins: hudo__ (~hudo@62.68.19.39)
[11:47:26] *** Quits: Myst (~Myst@user/myst) (Quit: Bye!)
[11:47:43] *** Joins: OPK (~OPK@user/opk)
[11:47:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[11:49:51] *** Joins: Myst (~Myst@user/myst)
[11:50:44] *** Quits: f0fz (~f0fz@183.90.36.170) (Read error: Connection reset by peer)
[11:51:24] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[11:53:54] *** Joins: Maikel (~Maikel@130.61.63.136)
[11:56:41] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:00:34] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[12:00:42] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:02:28] *** Quits: zepolen (~zepolen@2a02:587:293f:b5fe:ceac:2373:563e:bfbf) (Remote host closed the connection)
[12:02:53] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484)
[12:03:03] *** Joins: f0fz (~f0fz@183.90.36.170)
[12:05:11] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:05:39] *** Joins: seednode (~seednode@user/seednode)
[12:08:43] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:16:53] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[12:18:20] *** Joins: mimmy (~mimmy@146.70.75.149)
[12:19:32] *** Quits: cthulchu (~Cthulchu@88.128.88.28) (Ping timeout: 240 seconds)
[12:19:54] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[12:21:00] *** Joins: comet23 (uid528026@user/comet23)
[12:21:09] <comet23> why can't python be the only programming language?
[12:21:22] *** Joins: rendar (~rendar@user/rendar)
[12:23:23] <BrenBarn> because the world is a harsh and unfair place
[12:23:46] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[12:23:53] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[12:25:40] <rindolf> comet23: https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#what-is-the-best-programming-language
[12:26:04] <comet23> well python is beginner friendly very versatile and extremely popular
[12:26:45] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:27:13] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:28:20] <rindolf> comet23: people make the same arguments for java, c++, and js
[12:28:23] *** Joins: delvian (~delvian@41.13.254.59)
[12:28:35] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[12:28:36] <comet23> people who program in c++ are masochists
[12:29:00] <comet23> i'm stretching it a bit here because that title should go to the folks who code in binary but still
[12:29:23] <rindolf> comet23: then i am a masochist
[12:30:03] <comet23> we need to have a word with the sadists who hired you rindolf
[12:30:22] <rindolf> comet23: i'm unemployed
[12:30:41] <comet23> oh
[12:30:45] <comet23> me too i guess
[12:32:42] *** Joins: rsx (~dummy@ppp-188-174-146-173.dynamic.mnet-online.de)
[12:33:04] <rindolf> comet23: ppl argue that there should be fewer linux distros, but they cannot stop others from creating new ones
[12:33:50] <comet23> there should definitely be way less linux distros
[12:33:54] <comet23> most of them are crap
[12:34:15] *** Quits: delvian (~delvian@41.13.254.59) (Ping timeout: 268 seconds)
[12:34:57] *** Joins: delvian (~delvian@41.13.254.94)
[12:35:11] <sazawal> Hi rindolf, just a question, what is the difference between, `if not queue.empty: queue.get()` and `if not queue.empty: queue.get_nowait()`. Because you always have to check if the queue is empty when using get_nowait() to avoid exceptions, I would well use get() inside the if statements and keep it unblocking.
[12:35:35] <sazawal> inside the if statement*
[12:35:45] <rindolf> comet23: and i have a friend who complained about that and is now trying to use openvms x86-64
[12:36:24] <rindolf> sazawal: use "try:"?
[12:37:00] <rindolf> sazawal: there can be a race condition
[12:38:49] <rindolf> comet23: https://en.wikipedia.org/wiki/Sturgeon's_law
[12:39:00] <sazawal> rindolf, Isn't using `try` and `if not queue.empty` equivalent in this particular case?
[12:39:07] *** Joins: kosh (~kosh@user/kosh)
[12:39:14] *** Joins: edocod (~edocod@user/edocod)
[12:39:15] <rindolf> sazawal: no
[12:40:04] <comet23> i can make my own os right now but it's going to be based on ubuntu with a few kernel breaking mods and full of security holes
[12:40:26] <sazawal> But queue.get_nowait() raises exceptions when the queue is empty if I am not wrong
[12:40:49] <comet23> it's a terrible idea but i will learn something from the project but it would be completely irresponsible for me to release it to the public because we don't want more garbage floating on the internet
[12:41:07] <rindolf> sazawal: there can be a https://en.wikipedia.org/wiki/Context_switch
[12:41:54] <rindolf> sazawal: so? use 'except:' to handle them
[12:42:12] *** Joins: fdan (~fdan@192.146.154.3)
[12:42:29] <fdan> what does serialization mean?
[12:43:44] <comet23> serialization means numbering things in order i think
[12:43:51] <comet23> someone correct me if i'm wrong please
[12:43:59] <sazawal> rindolf, Do you mean that queue could be non-empty from being empty until I reach from `if not queue.empty` statement to queue.get() statement?
[12:44:00] <fdan> why serialization and deserialization is needed
[12:45:10] <sazawal> rindolf, I understand the Context Switch a little, and I guess it must be used extensively in async and python's thread locks. How is it at work here?
[12:46:05] <rindolf> fdan: e.g: for transferring data over tcp
[12:46:30] *** Quits: jay-m126 (~jay-m@129.0.204.221) (Ping timeout: 260 seconds)
[12:46:33] <fdan> with tcp , all the packets are numbered right
[12:46:58] <rindolf> fdan: ignore what comet23 said
[12:47:01] <fdan> i mean all the packets have a sequence number right
[12:48:04] <rindolf> fdan: https://en.wikipedia.org/wiki/Serialization
[12:48:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:48:55] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[12:48:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[12:49:10] *** Joins: y1n (~y1n@77.119.162.160.wireless.dyn.drei.com)
[12:49:19] <fdan> why serialization is essential
[12:49:53] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[12:50:01] <comet23> yeah ignore what i said i have no idea what i'm doing i'm not a pro just a hobbyist trying to learn :D
[12:50:08] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[12:50:46] <rindolf> fdan: the wikip page answers that
[12:51:00] *** Joins: fikran (~fikran@user/fikran)
[12:51:52] <rindolf> <sazawal> rindolf, Do you mean that queue could be non-empty from being empty until I reach from `if not queue.empty` statement to queue.get() statement? ==> yes!
[12:52:02] <fdan>  For example, for maximal use of distribution, a computer running on a different hardware architecture should be able to reliably reconstruct a serialized data stream, regardless of endianness. This means that the simpler and faster procedure of directly copying the memory layout of the data structure cannot work reliably for all architectures.
[12:52:03] <fdan> Serializing the data structure in an architecture-independent format means preventing the problems of byte ordering, memory layout, or simply different ways of representing data structures in different programming languages.
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[12:52:30] <sazawal> rindolf, Thanks, makes sense now.
[12:52:44] *** Joins: Thanatos (~Thanatos@105.112.150.204)
[12:53:36] <rindolf> sazawal: you're welcome ; also see https://www.shlomifish.org/meta/how-to-help/
[12:55:53] <sazawal> Interesting!
[12:58:24] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[12:59:16] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:00:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:00:28] *** Joins: shawwwn (uid6132@helmsley.irccloud.com)
[13:01:02] *** Joins: mimmy (~mimmy@146.70.75.149)
[13:01:08] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:02:47] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 264 seconds)
[13:03:07] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:03:22] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[13:03:22] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[13:03:32] *** Joins: rany (~rany@user/rany)
[13:03:46] *** Joins: ano (~ano@user/ano)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:05:58] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:07:05] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 256 seconds)
[13:07:25] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 250 seconds)
[13:09:39] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[13:09:55] *** Parts: lxwulf (~lxwulf@user/lxwulf) ()
[13:11:32] *** Joins: TJ- (~root@about/linux/staff/tj-)
[13:14:56] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[13:17:18] *** Quits: f0fz (~f0fz@183.90.36.170) (Ping timeout: 260 seconds)
[13:17:40] *** Joins: f0fz (~f0fz@122.11.212.106)
[13:18:54] *** Joins: l4yer (~l4yer@195.181.170.210)
[13:18:59] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[13:22:10] *** Joins: JohnMC (~Guest94@151.77.229.107)
[13:22:15] <JohnMC> Hi guys
[13:22:20] <JohnMC> I'm stuck with a problem
[13:22:47] *** Joins: defn (~n0b0dy@user/defn)
[13:22:48] *** Joins: forgotmynick (uid24625@hampstead.irccloud.com)
[13:23:37] *** Joins: palasso (~palasso@user/palasso)
[13:29:48] *** Joins: xardas (~xardas@149.233.51.127)
[13:29:49] *** Quits: JohnMC (~Guest94@151.77.229.107) (Quit: Client closed)
[13:35:37] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:37:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:37:16] *** yotsuba-chan is now known as yotsuba
[13:37:26] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[13:37:28] *** Joins: jay-m126 (~jay-m@129.0.205.32)
[13:37:41] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (Quit: bye)
[13:38:20] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[13:39:47] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:40:19] *** Joins: ThanatosJ (~Thanatos@102.89.0.58)
[13:40:25] *** Quits: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484) (Quit: Konversation terminated!)
[13:40:40] *** Joins: zepolen (~zepolen@2a02:587:293f:b5fe:a9ae:7515:90f4:3484)
[13:41:48] *** Quits: Thanatos (~Thanatos@105.112.150.204) (Read error: Connection reset by peer)
[13:42:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:42:38] *** Joins: l4yer (~l4yer@195.181.170.210)
[13:43:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:46:03] *** Joins: noent (~quassel@squint.a-oben.org)
[13:46:29] *** Quits: jay-m126 (~jay-m@129.0.205.32) (Remote host closed the connection)
[13:48:44] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (Quit: bye)
[13:49:23] <noent> hey. I am trying to get into mypy and have a dict of strings and list of strings, so dict[str, Union[str, list[str])]. Now at some point I do file_path: Path = my_dict["path_str"] and mypy complains that the type is incorrect. (expected Union[str, PathLike[str]], got Union[str, List[str]]). The complaint makes total sense, but how do I tell it that it's ok and I took the value from the dict which I know is a str?
[13:49:33] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:49:36] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[13:50:06] *** Joins: ubert (~Thunderbi@p200300ecdf0ba279e6b318fffe838f33.dip0.t-ipconnect.de)
[13:51:07] <ChrisWarrick> noent: a pathlib.Path is not a str
[13:51:31] *** PJBoy is now known as Guest3495
[13:51:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:51:58] <ChrisWarrick> noent: if you make it a `file_path: str` and it still complains, then use typing.cast
[13:52:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 260 seconds)
[13:52:22] <noent> oh, I missed something. I am not doing file_path: Path = my_dict["path_str"], I am doing file_path: Path = Path(my_dict("path_str"])
[13:52:41] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:52:41] <ChrisWarrick> typing.cast then
[13:52:49] *** Joins: abip20 (~abdullah@103.66.177.186)
[13:53:16] <ChrisWarrick> also, the best modern-typed-python solution would be to use an attrs class, a dataclass, or maybe a TypedDict if you must
[13:53:27] *** Quits: ubert (~Thunderbi@p200300ecdf0ba279e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:54:26] <noent> it's a dict that is used in 1 place to gather items to pass to the next function
[13:54:48] <noent> so anything more than what I currently have would be overkill
[13:55:24] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[13:55:40] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[13:55:40] *** Quits: Guest3495 (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[13:56:50] <noent> thanks
[13:57:14] <ChrisWarrick> naming your things explicitly isn’t overkill
[14:00:12] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:00:13] <noent> I didn't say that, I meant creating extra classes to solve a typing problem generated by clumsy typing information
[14:00:31] <df_data> https://www.irccloud.com/pastebin/I5Fpw6Z3
[14:00:39] <df_data> Hi all,
[14:00:39] <df_data> I have something that sends a json file, is it possible to parse the json then dump it? Or will by parsing it I’ll lose it?
[14:00:50] <df_data> It sends a json ‘response’ 5 times but I can’t dump them all the same name, so was hoping to see what it was then save it and continue to the next one all in the one response
[14:01:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:02:20] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:02:52] <p-i-> https://bpa.st/TIVQ <-- I'm trying to serialize/deserialize a dict of STR:pd.DataFrame objects, but bumping into an error deserializing dates. What's my best play?
[14:03:31] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[14:04:50] *** Quits: y1n (~y1n@77.119.162.160.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[14:05:21] *** Joins: f0fz (~f0fz@122.11.212.106)
[14:05:23] <jinsun> p-i-: why are you using pd.date_range on the json? the reverse of df.to_json would be pd.read_json
[14:06:00] <jinsun> (except that some things that were originally objects will be strings when when read back)
[14:06:07] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[14:06:28] <p-i-> gee I meante to do pd.DataFrame but VSCode mis-autocompleted and I didn't notice.
[14:06:30] <p-i-> Thanks!
[14:08:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:09:19] *** Joins: tempate (~alpha@user/tempate)
[14:12:04] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.9)
[14:12:50] *** Quits: tsaka__ (~torstein@31.4.159.24) (Ping timeout: 260 seconds)
[14:15:05] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[14:16:20] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[14:17:32] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:21:32] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[14:24:01] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[14:24:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:25:14] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 244 seconds)
[14:25:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[14:25:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:29:10] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[14:32:24] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[14:32:46] *** Quits: nomic (~nomic@185.217.117.59) (Quit: Leaving)
[14:33:22] *** Joins: greedom (~greedom@x59cc9aee.dyn.telefonica.de)
[14:38:09] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[14:38:22] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[14:38:35] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[14:39:23] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[14:39:25] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[14:40:22] *** Quits: p-i- (~Ohmu@mx-ll-223.206.150-183.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[14:40:42] *** Joins: goldfish (~goldfish@user/goldfish)
[14:40:42] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[14:41:03] *** Joins: mimmy (~mimmy@146.70.75.148)
[14:41:25] *** Joins: f0fz (~f0fz@122.11.212.106)
[14:44:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:45:47] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[14:45:58] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[14:47:36] *** Joins: Warped (~Warped@user/warped)
[14:47:41] *** Joins: han-solo (~han-solo@user/han-solo)
[14:52:06] *** Quits: defn (~n0b0dy@user/defn) (Quit: ZNC 1.8.2 - https://znc.in)
[14:53:30] *** Joins: slav0nic (slav0nic@python.su)
[14:53:42] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[14:53:43] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[14:54:02] *** Quits: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur) (Remote host closed the connection)
[14:54:39] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[14:55:55] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[14:55:59] *** Joins: jmd (~user@de.cellform.com)
[14:57:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:58:04] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[14:58:05] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[14:58:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:00:02] *** Joins: c4017 (~c4017@S0106c0943583f893.vf.shawcable.net)
[15:00:21] *** Joins: fikran (~fikran@user/fikran)
[15:00:28] *** Joins: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:00:30] *** Quits: greedom (~greedom@x59cc9aee.dyn.telefonica.de) (Remote host closed the connection)
[15:00:59] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[15:02:03] *** Joins: greedom (~greedom@x59cc9aee.dyn.telefonica.de)
[15:05:02] *** Quits: causa-sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[15:06:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:06:34] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[15:06:59] *** Joins: tobybl (~tobybl@213.31.134.235)
[15:10:26] *** Quits: sale (~sale@ypocit.initech.link) (Quit: Changing server)
[15:10:42] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Remote host closed the connection)
[15:10:56] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[15:11:42] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[15:12:55] *** Joins: sale (~sale@ypocit.initech.link)
[15:17:25] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[15:19:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:22:25] *** Quits: urth (~urth@geertswei.nl) (Ping timeout: 265 seconds)
[15:22:26] *** Joins: reset (~reset@user/reset)
[15:23:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:24:31] *** Joins: urth (~urth@geertswei.nl)
[15:26:46] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:27:37] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[15:31:24] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[15:31:31] *** Joins: JimmyRustles (~Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net)
[15:31:31] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[15:31:33] <JimmyRustles> hi
[15:31:56] <JimmyRustles> if i've got an image in pygame, is there a way i can change it within the program, for example, replacing every (0,0,255) pixel in the image with a (255,0,0) pixel?
[15:33:27] *** Joins: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:07] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 256 seconds)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:48] *** skipper is now known as whatsupbot
[15:37:58] *** Parts: adhawkins (~adhawkins@user/adhawkins) (The Lounge - https://thelounge.chat)
[15:38:19] *** whatsupbot is now known as Chemical-X
[15:39:05] <marduk> Hey guys. So I have a (sub) package and in it's __init__.py I have `from .foo import foo`. That's all fine and dandy but in a test I'm trying to mock.patch("pkg.foo.bar"), "bar" being something in the pkg.foo module and from the foo module, but it stumbles on the "foo" in __init__.py. Any suggestions other than changing __init__.py to "from .foo
[15:39:06] <marduk> import foo as _foo"?
[15:41:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:41:46] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-631b-bbd8-78ba-13a3-5b05-4fb6.rev.sfr.net)
[15:42:30] *** Quits: forgotmynick (uid24625@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:42:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:43:04] *** Joins: Klinda (~superleag@user/klinda)
[15:46:08] <marduk> I could also rename foo.py to foo_type.py. I'm following the ariadne docs on modularizing my graphql schema which, arguably, I don't need to do https://ariadnegraphql.org/docs/modularization
[15:46:28] *** Joins: kib (~kib@user/kib)
[15:46:35] *** Parts: kib (~kib@user/kib) (WeeChat 3.3)
[15:48:12] *** Joins: mimmy (~mimmy@146.70.75.148)
[15:48:21] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[15:48:24] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[15:48:29] *** Joins: kosh (~kosh@user/kosh)
[15:50:12] *** Quits: onichomp (~onichomp@2806:264:4404:8016:f45b:a0b3:7fa:36e7) (Read error: Connection reset by peer)
[15:50:50] *** Joins: onichomp (~onichomp@2806:264:4404:8016:f45b:a0b3:7fa:36e7)
[15:51:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[15:52:19] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:52:28] <sveinse> Are there any ways to cancel the await (not the thread) immediately in `await asyncio.to_thread()` ? It is cancellable, but not until the thread has returned. It messes up my program exit
[15:52:33] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:53:08] <Wulf> sveinse: you cannot cancel threads. The thread needs to exit by itself. So find a way to notify the thread that it should go away.
[15:53:26] <jmd> How can I append bytes to a packed binary buffer?
[15:53:34] <Wulf> jmd: a what?!
[15:53:52] <sveinse> Wulf: I am not looking to cancel the tread, I'm looking to cancel the await that waiting on the thread
[15:54:03] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 268 seconds)
[15:54:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:54:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[15:54:56] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[15:55:27] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:55:48] <jmd> (A bytearray in this particular instance)
[15:56:13] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:56:13] <Wulf> jmd: ba.extend(b"foo")
[15:56:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:56:44] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[15:57:47] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[15:57:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[15:58:39] *** Joins: f0fz (~f0fz@122.11.212.106)
[15:58:49] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:58:54] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[15:58:55] *** Joins: y1n (~y1n@77.119.164.124.wireless.dyn.drei.com)
[15:59:06] *** Joins: goldfish (~goldfish@user/goldfish)
[15:59:20] <Wulf> sveinse: Maybe have a look at https://trio.readthedocs.io/en/stable/reference-core.html#trio.to_thread.run_sync
[16:00:29] <sveinse> Wulf: yeah, and anyio also have it. But I'd hope to stick with vanilla asyncio. If it isn't trivial with asyncio, I have consider one of them.
[16:00:50] <Wulf> sveinse: don't know, stopped using it because it's too complicated
[16:01:02] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[16:01:36] <sveinse> Wulf: you stick with trio?
[16:01:42] <Wulf> sveinse: yep
[16:02:01] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[16:02:47] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[16:02:51] *** Quits: capn (~capn@user/capn) (Ping timeout: 265 seconds)
[16:02:59] *** Joins: vimart (~vimart@62.60.61.86)
[16:04:18] *** Joins: humberto1 (~humbertow@189.236.62.65)
[16:04:52] <jmd> Wulf: Which part of that says how long the new array should be?
[16:05:01] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[16:05:09] *** Quits: humbertowoody (~humbertow@189.236.62.65) (Ping timeout: 268 seconds)
[16:05:19] <Wulf> jmd: len(ba) + len(b"foo")
[16:06:56] <sveinse> Wulf: Yeah, I don't find asyncio that complicated. trio and asyncio flavor things a little differently, but that's somewhat only semantics
[16:07:16] *** Joins: zoneu (~zoneu@user/zoneu)
[16:07:40] <sveinse> But then again, I've been raised with twisted, so I've done my "bootcamp" of learning async
[16:07:48] <dav1d> sveinse, asyncio.wait() with return_when=FIRST_COMPLETED or asyncio.wait_for()?
[16:08:13] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[16:08:51] <dav1d> sveinse, some_signal = asyncio.Event(); asyncion.wait([thread_handle, some_signal.wait()], return_when=FIRST_COMPLETED); some_signal.set() - something like that?
[16:08:53] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[16:09:06] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[16:09:50] <sveinse> dav1d: yeah, let me try if I can encapsulate the asyncio.to_thread() in a wait/wait_for.
[16:10:36] *** Quits: sazawal (~sazawal@223.190.87.36) (Quit: Leaving)
[16:11:48] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:12:26] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:13:07] <ArtfulDodger> Hello there! Shouldn't this be sufficient to display in stdout all logs emitted by classes pypot.dynamixel.io.DxlIO() ? https://bpa.st/SPWA Nothing is printed
[16:13:13] *** Joins: f0fz (~f0fz@122.11.212.106)
[16:13:21] <flower_> is subprocess.check_output() faster then .run() ?
[16:14:05] <sveinse> `await asyncio.wait(asyncio.to_thread(msvcrt.getch))` didn't work. It too locks until the thread returns.
[16:14:24] *** Joins: tempate (~alpha@user/tempate)
[16:14:39] <sveinse> So I'll need to use wait_for() and any program exit will be delayed until that timeout hits
[16:15:25] <dav1d> sveinse, what else did you expect? wait waits until everything completes, if you just pass in one task/coro it waits for that to finish, you need a second stop signal and set return_when
[16:15:33] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[16:16:48] <sveinse> dav1d: I had hoped the cancel of the await (not the thread) would be immediate. When asyncio exits it cancels every task, and it doesn't until the thread is completed.
[16:17:05] <marduk> flower_: check_output() merely calls run() with some args  filled in.
[16:17:08] *** Joins: Elodin (~weechat@user/elodin)
[16:17:16] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[16:17:48] *** Joins: f0fz (~f0fz@122.11.212.106)
[16:18:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:18:16] <flower_> marduk, so not faster?
[16:18:57] <dav1d> sveinse, I think I misunderstood, but you still need to do what Wulf said, you somehow need to cancel the thread for your program to exit or make a daemon thread
[16:20:08] <marduk> flower_: why would speed be an issue.  mainly what subprocess does is call exec on an external process. I'd think that the external process is the thing that's "fast" or "slow"
[16:21:08] <flower_> marduk, calling grep via bash is way faster then with python via subprocess in my experience
[16:21:10] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[16:22:19] <nedbat> flower_: you're saying that grep via subprocess is faster than just python? Can you show us the two implementations?
[16:22:41] <flower_> nedbat, no, I'm not saying that, read again
[16:22:55] <nedbat> flower_: can you word it again?  It was confusing
[16:23:12] <sveinse> dav1d: I understand that threads cannot be aborted, that's fine. In the main thread, it is awaiting some wait against the thread that doesn't block, otherwise the main eventloop would have stopped. And I don't see why that await cannot be cancelled. - Which would orphan the thread, but that's ok.
[16:23:27] <nedbat> flower_: you're saying calling grep with bash is faster than calling grep with python? did you try not using grep?
[16:23:31] <flower_> using grep in a bash script is way faster then using the same grep command with python and subprocess
[16:23:33] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[16:24:05] <nedbat> flower_: how many times are you invoking grep? once or many times?
[16:24:17] <flower_> that's not the point, I'm looking for a way to get subprocess as fast as possible
[16:24:40] *** Joins: f0fz (~f0fz@122.11.212.106)
[16:24:49] <flower_> is subprocess known to be slow?
[16:24:50] <marduk> flower_: are you in a bash prompt when you're running grep or are you e.g. 'bash -c grep...'?
[16:24:55] <dav1d> sveinse, sorry I guess I dont understand the issue
[16:24:57] <nedbat> flower_: the various subprocess styles all do the same thing at heart. i don't think any of them are faster than another.
[16:25:00] *** Joins: sudomann_ (~sudomann@c-98-219-165-55.hsd1.md.comcast.net)
[16:25:37] <flower_> nedbat, is subprocess considered to be slow or fast?
[16:25:57] <nedbat> flower_: starting another process, however you do it, has overhead. if you can avoid it you should.
[16:26:01] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[16:26:09] <nedbat> flower_: subprocess is not slower than other ways to start another process
[16:26:20] <flower_> nedbat, overhead?
[16:26:34] <nedbat> flower_: yes, starting a process is a big operation
[16:26:47] *** Joins: f0fz (~f0fz@122.11.212.106)
[16:26:50] <flower_> nedbat, hm
[16:27:09] <nedbat> flower_: i know you found bash to be faster at it. i'd be interested to see the comparison if you have it
[16:27:39] <rendar> flower_, can you share your py code?
[16:27:56] *** Parts: tempate (~alpha@user/tempate) ()
[16:28:20] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[16:28:23] <rendar> nedbat, but this is strange, because once you run something|grep, even in python those 2 processes should have stdout->stdin connected, and the flow should the same of bash, more or less
[16:28:29] <flower_> nedbat, I'm fairly new to python, I'm not sure if I'm the right person to track this down.
[16:28:49] <nedbat> flower_: it sounds like you had the code written two ways, and were comparing them.
[16:29:05] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[16:29:19] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[16:29:43] <rendar> flower_, if you show *how* you call grep with python subprocess it may help
[16:29:44] *** Joins: darksun (~darksun@user/darksun)
[16:30:46] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[16:30:50] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Remote host closed the connection)
[16:30:53] <nedbat> as an example: this in bash `grep foo *.txt` will be much faster than this in python: `for f in os.listdir("."): check_output(["grep", "foo", f])`
[16:31:00] <flower_> nedbat, http://paste.debian.net/1220170/
[16:31:26] *** Quits: sudomann_ (~sudomann@c-98-219-165-55.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[16:31:37] <nedbat> flower_: thanks, and how did you do that in bash?
[16:32:25] <sveinse> dav1d: https://bpa.st/5R6Q
[16:33:07] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[16:33:39] <flower_> nedbat, old code, I did some 'tests' to compare python with my existing bash script, and found no reason to switch to python for the task, because of the speed
[16:33:42] <flower_> nedbat, http://paste.debian.net/1220171/
[16:33:59] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:34:19] *** Joins: de-facto (~de-facto@user/de-facto)
[16:34:50] <nedbat> flower_: if you are calling this bash function many times, then i don't know why it would go faster than the Python version, though you could try shell=False in Python to avoid some of the overhead.
[16:35:27] <nedbat> (though that's the default, so i guess it wouldn't change anything)
[16:36:04] <flower_> nedbat, how much is the overhead which such simple commands?
[16:36:13] <han-solo> i can see, you're running grep multiple times in python, while only once in bash version
[16:36:17] <nedbat> flower_: i don't know quantitatively
[16:36:27] <flower_> nedbat, If I listen to you, you expect subprocess to be fast
[16:36:28] <nedbat> han-solo: i assume that bash function is called in a loop.  true, flower_?
[16:36:40] <han-solo> nedbat: ah, right
[16:36:51] <nedbat> flower_: i didn't say subprocess was fast. I said it's not slower than other ways to make processes.
[16:36:57] <rendar> it seems not
[16:37:03] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:37:16] <nedbat> flower_: in your bash example, how many times are you calling that function?
[16:38:10] <flower_> nedbat, that bash script read a file and checks for each entry if it can find it. But that are not more then 10
[16:38:47] <nedbat> flower_: and the python code is also doing not more than 10?
[16:39:47] <flower_> nedbat, no, I, but for each grep it might start a new process...(?).
[16:40:19] <nedbat> flower_: sorry, let's get a baseline understanding here.  how many times does bash run grep, and how many times does python run grep?
[16:40:22] <flower_> nedbat, no, that is the same list as the bash script
[16:40:29] <rendar> flower_, does this: put a `print("calling grep")` and `echo "calling grep"` before calling grep
[16:40:31] <nedbat> flower_: ok, so the same number of times.
[16:40:42] <flower_> nedbat, yes
[16:40:49] <nedbat> flower_: do you have the timings? How different are they?
[16:41:02] <nedbat> flower_: rendar's idea is a good one, to double-check that the code is working as you expect.
[16:41:34] *** Joins: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se)
[16:41:37] *** Parts: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se) ()
[16:42:19] *** Joins: sagax (~sagax_nb@user/sagax)
[16:42:54] <ArtfulDodger> Does any anone see why I'm not seeing the logs from pypot.dynamixel.io.DxlIO() with this logging_tree https://bpa.st/SPWA ?
[16:43:00] <rendar> flower_, client_binary=$(command -v "${client}")  what is this line doing?
[16:43:48] <han-solo> same thing `which <binary>` does
[16:44:08] <han-solo> just more portable
[16:44:48] <dav1d> sveinse, I see, I think this applies: https://stackoverflow.com/a/26414982/969534
[16:46:16] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:46:28] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[16:46:57] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[16:47:25] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:47:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:47:51] <sveinse> dav1d: I see the same thing with anyio despite the canellable=True flag to run_sync(), line 7. It doesn't continue the task group until the blocking sync call/thread completes.
[16:48:00] <sveinse> dav1d: https://bpa.st/GUHA
[16:48:33] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:48:56] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[16:49:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:50:23] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[16:51:04] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[16:51:44] <dav1d> sveinse, not sure what is happening, but I assume the event loop (or whatever the thread is attached to) waits for full completion of all tasks before finishing and the thread cannot be cancelled, that's why it doesnt exit
[16:52:00] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:52:23] <dav1d> I dont know if there is a way to force orphan the thread (sounds usually not what you want, a bunch of deadlocked orphan threads)
[16:54:48] <dav1d> sveinse, maybe you can hack your way there: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown run it on your own executor and "kill" that
[16:56:15] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[16:56:16] <sveinse> My ultimate objective is that I need to read the keyboard async on windows, however the eventloop on windows have to low-level methods for doing so. So I end up needing to run a blocking sync call in a thread to be able to read it. However, if that interacts poorly with async when handling exceptions and exits, I think I need to think a bit differently
[16:56:47] *** Quits: y1n (~y1n@77.119.164.124.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[16:58:51] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[16:59:08] *** Quits: barbarossa93 (~barbaross@c-73-39-107-44.hsd1.md.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[16:59:42] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[17:00:00] *** Joins: mickey8 (~user@user/mickey)
[17:02:11] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Remote host closed the connection)
[17:02:46] *** Joins: p-i- (~Ohmu@223.206.149.105)
[17:03:32] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[17:06:33] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[17:07:32] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[17:07:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[17:08:54] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[17:09:05] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[17:09:09] *** Joins: mickey8 (~user@user/mickey)
[17:09:42] *** Joins: fikran (~fikran@user/fikran)
[17:11:15] *** Joins: teut (~teut@182.68.64.194)
[17:11:23] <teut> https://bpa.st/XHJQ
[17:11:50] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[17:12:04] *** Joins: mickey8 (~user@user/mickey)
[17:13:14] *** Joins: aod (~a@190-203-246-213.dyn.dsl.cantv.net)
[17:14:00] *** Joins: xardas (~xardas@149.233.51.127)
[17:14:08] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[17:14:26] *** Quits: vakera_pingveno_ (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[17:14:50] <aod> Hi, guys What is up?
[17:15:07] <phy1729> teut: seems like you want splitlines() https://docs.python.org/3/library/stdtypes.html#str.splitlines
[17:15:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:15:20] <teut> sorry on call
[17:15:22] <nedbat> aod: just pythoning.  what's up with you?
[17:15:30] <bjs> teut: is there a question here? :)
[17:15:33] *** Parts: mickey8 (~user@user/mickey) ()
[17:15:43] <aod> guys are you making 7.5 $ (per hour)?
[17:15:55] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[17:15:57] <aod> nedbat are you?
[17:16:09] <nedbat> aod: no, but that seems off-topic?
[17:16:13] <aod> O.o?
[17:16:33] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[17:16:41] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[17:16:41] <aod> nedbat so your work with python is free.
[17:16:53] <aod> good i have a lot of work for you
[17:16:58] <bjs> aod: isn't $7.5 per hour very close to minimum wage?
[17:17:02] <aod> First
[17:17:16] <nedbat> aod: i don't know what you are asking.  can we stick to python topics?
[17:17:50] <aod> nedbat your price, hehe.
[17:18:02] <bjs> I'm making 0 at the moment,  it's a weekend :)
[17:18:18] <nedbat> aod: this isn't a good place to hire people.
[17:18:22] *** Quits: mei (~mei@user/mei) (Quit: mei)
[17:18:48] <aod> bjs it is not 7.5 $?
[17:19:07] <bjs> aod: I don't know what you're asking, or why you are asking it in #python
[17:19:08] <bjs> Sorry
[17:19:43] <aod> nedbat i will continue them, · First...
[17:20:00] <aod> nedbat w8 whut?
[17:20:01] *** Joins: mei (~mei@user/mei)
[17:21:24] <nedbat> aod: this is not a place to hire people. It's a place to get help with Python programs.
[17:21:36] <aod> so i can't pay anyone here for anything?
[17:21:42] <aod> sounds good but...
[17:21:45] <nedbat> aod: generally, no.
[17:22:14] *** Quits: zoneu (~zoneu@user/zoneu) (Remote host closed the connection)
[17:22:17] *** Quits: greedom (~greedom@x59cc9aee.dyn.telefonica.de) (Remote host closed the connection)
[17:22:40] <aod> hehe, well, good them '(^,-,^)'
[17:22:59] <df_data> Hi all, I’m trying to save a json based on the content inside but I know this isn’t right… can anyone assist https://dpaste.org/upQU#
[17:23:30] <teut> hi, just wanted to ask if there is a list comprehension way to do that , something cleaner just
[17:23:49] <teut> split a long string in chunks of 2000 characters
[17:23:58] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[17:24:03] <bookworm> itertools has a thing for that
[17:24:14] <bookworm> or at least a recipe on the doc page
[17:24:22] <bjs> teut: but your code mentioned "\n" ?  what role did newlines play
[17:24:38] <teut> ya  I m adding
[17:24:40] <bjs> (and it was i+1000 not i+2000 did you mean 2000 characters?)
[17:24:44] <bjs> teut: adding what?
[17:24:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:25:12] <teut> split at \n just before 1000th char
[17:25:27] <bjs> teut: what do you do wit hthe characters after the \n but before the 1000th char?
[17:26:02] <han-solo> df_data: yeah, that doesn't seem right. What do you want to do with the data you get from `request.json` ? and what is the content of that ? a sample should be fine too
[17:26:04] *** Joins: mimmy (~mimmy@146.70.75.149)
[17:26:10] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[17:26:55] <aod> nedbat bjs i was goin to pay to you $7.5 per 1 hour.
[17:27:02] <df_data> So I actually want to save the request.json but name the dump based on what’s inside. Does that make sense @han-solo ?
[17:27:09] <bjs> aod: why would either of us accept that?  it's a very low number from what I see
[17:27:17] <bjs> and like nedbat said, it's not the place to ask probably
[17:27:33] <aod> thanks
[17:27:48] <han-solo> df_data: Sure, only if the id in the json is `'publish'` ?
[17:27:57] <bjs> (and if you have a python question probably people here might be able to help anyway)
[17:28:33] <df_data> So my flask app listens for a POST from an app that sends this data then I save it. So this app sends data 5 times based on 5 different sets of data
[17:28:57] <teut> bjs, I need to send a big string to discord using discord.py
[17:29:07] <teut> but discord has a limit of 2000  characters
[17:29:25] <df_data> Correct @han-solo if publish is in the json save it as publish.json if the next one has 2022 save it as 2022 etc but I need the whole json it’s sending
[17:29:46] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 260 seconds)
[17:29:51] *** Joins: plastico (~plastico@neomutt/plastico)
[17:30:04] <han-solo> df_data: Okay
[17:30:14] <aod> bjs nedbat ok, i was tryng to trick you to tell me how much per hour charge me, for your python programming skills.
[17:30:15] <teut> so I want to send it in paragraphs , but not like break it at 2000th index
[17:30:43] <teut> rather break at \n  so that length is just less than 2000 characters
[17:30:59] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 264 seconds)
[17:31:02] <bjs> teut: okay and what if there are no newlines?
[17:31:03] <aod> bjs nedbat would you tell me anyways, because it is so fun?
[17:31:33] <teut> probably break at space. Actually I didnt think of it '=D
[17:31:56] <bjs> aod: I'm not American, don't get paid hourly, and it isn't relevant to Python.
[17:31:59] <bjs> teut: this is why I ask :)
[17:31:59] <aod> bjs nedbat or for the thing most motivate you in life?
[17:32:12] <aod> ok
[17:32:32] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[17:32:36] <xheimlich> so, uhhh
[17:32:47] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[17:32:51] <df_data> @han-solo: it’s wrong formatting but I’ve expanded on it a little if you understand what I’m trying to do? https://dpaste.org/ubZ3#
[17:33:04] <teut> ya , thats why I dont comment like old days now
[17:33:06] <df_data> Each JSON is a little different
[17:33:15] <xheimlich> let's say I have a class which has a method thismethod marked with a @property decorator; and another thatmethod that's not.
[17:33:16] <teut> I am wrong most of time
[17:33:40] <xheimlich> so I usually say "x = myclass.thismethod; y = myclass.thatmethod()"
[17:33:47] <xheimlich> now, if I want to use getattr
[17:34:04] <xheimlich> is it getattr(myclass,"thismethod") and "thatmethod" interchangeably?
[17:34:30] <nedbat> xheimlich: you can use getattr with both, but you need to call the result of "thatmethod"
[17:34:33] <teut> can something be done by  regex ?
[17:34:54] <bjs> teut: possibly, maybe the easiest is a little loop chunking up the words
[17:34:56] <han-solo> df_data: https://bpa.st/7E2Q
[17:34:57] <xheimlich> oh of course.
[17:35:03] <xheimlich> getattr then results in a callable.
[17:35:35] <bjs> xheimlich: getattr(x, "y") is the same as x.y  so whatever myclass.thatmethod returned is the same as getattr(myclass, "thatmethod")
[17:35:44] <bjs> xheimlich: (i assume by myclass you really meant an instance of the class though)
[17:35:45] <teut> ya I need to find index of \n  , if failed then " "
[17:35:55] <han-solo> df_data: er, i messed up the quoting. `pathlib.Path(f'data["ID"].json').write_text(data)`
[17:36:04] <xheimlich> I'm overusing @property a little, I guess.
[17:36:20] <xheimlich> Like I have an attribute defined at init time that s like "parts".
[17:37:00] *** Joins: nomic (~nomic@185.217.117.164)
[17:37:02] <han-solo> df_data: er, sorry, what is in data. a list of objects/dict ?
[17:37:04] <xheimlich> but sometimes I want to iterate over nonempty parts. so def nonempty_parts(self): return [part for part in self.parts if len(part)>0].
[17:37:14] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:37:30] <bjs> teut: what if there's a newline just after 2000 characters?  Is there something special about 2000 characters?
[17:37:36] <bjs> that number I mean
[17:37:41] <xheimlich> so nonempty_parts has more or less the same semantics as parts. It's weird to memorize htat one is callable and the other isn't.
[17:37:48] <aod> bjs i make $0.42 (per hour) '.-'
[17:38:08] <teut> TDD! TDD!
[17:38:09] <han-solo> df_data: could you bpaste a sample of the data from request.json and the output files you expect, so that i won't through you off with wrong things
[17:38:14] <teut> ok I ll do that
[17:38:16] <bjs> aod: do you want help with some Python things?
[17:38:23] <aod> lots
[17:38:25] <bjs> teut: do what?
[17:38:35] <teut> test driven dev?
[17:38:37] <aod> to get more money
[17:38:51] <bjs> teut: oh sure, I guess I'm doing TDD with you in a sense right now
[17:39:00] <teut> yes
[17:39:03] <bjs> teut: asking you what to do in different cases to try understand what is it you're trying to do :)
[17:39:06] <df_data> @han-solo: within the for loop? https://dpaste.org/ubZ3#
[17:39:34] <teut> ya I didnt thing of that but I was doing TDD probably I would have thought like this
[17:39:36] <bjs> teut: I guess my point is whether the 2000characters is some hard cutoff or you just want to break things up into "roughly" 2000 characters.  And how important newlines really are
[17:39:41] <han-solo> df_data: yes, what is in `request.json`, and what will be in the output file(s)
[17:39:51] <han-solo> that you will be expecting
[17:40:03] <bjs> teut: so having some examples of each case might be useful to you, so you get an idea of what different things do
[17:40:06] <teut> max you can send a paragraph of 2000 characters
[17:40:16] <bjs> aod: I'm not sure how you paying other people will help you get money but I wish you luck
[17:40:19] <bjs> teut: in discord.py you mean?
[17:40:23] <teut> yes
[17:40:37] <bjs> teut: oh it like doesn't *let* you send a message with 2001 characters?
[17:40:53] <teut> nope, its raises exception
[17:41:21] <teut> I will .strip() each paragh
[17:41:29] *** Joins: thevishy (~thevishy@2405:201:f005:c007:e1d9:1da9:c11d:bf92)
[17:41:31] <teut> paragraph*
[17:41:35] <aod> bjs do you mean by investing? thanks i will not say not to good look
[17:41:47] <df_data> @han-solo: thank you here is one of the json files they are all different tho so the for loop will be different each time https://dpaste.org/kkae
[17:42:15] <bjs> aod: programmers are expensive :)
[17:42:37] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:43:29] <bjs> teut: maybe what I would do is split the input text up into words and then collect up to 2000characters worth at a time or something
[17:44:04] <df_data> @han-solo:  ignore the else at the end but like this? https://dpaste.org/uvmp#
[17:44:06] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:44:31] <bjs> teut: there's no need to use indexing,  and I think trying to get chunks and _then_ split is a mistake.  If the string is small enough to work on the whole thing at once, just split it first and then loop over each word/whatever
[17:44:56] <teut> I used rindex, it would be faster
[17:45:26] <han-solo> df_data: i'm kinda confused, because in your code you are iterating the `data[1]`
[17:45:44] <bjs> teut: are you trying to do it correctly/nicely or as fast as possible?
[17:45:48] <han-solo> and you are `json.load(request.json)` which maybe an error
[17:46:04] <bjs> teut: if the string is small enough to load entirely into memory then just asking Python to do the split all at once might actually be faster
[17:46:11] <bjs> than constantly doing little indexes
[17:46:11] <han-solo> df_data: and i cannot seem to find any key "ID" in the data you gave
[17:46:15] <teut> fast and correct, I dont want crash
[17:46:17] <bjs> teut: (but I don't know for sure)
[17:46:32] *** Quits: vimart (~vimart@62.60.61.86) (Quit: WeeChat 2.8)
[17:47:24] <df_data> Sorry was parsing the json so get the value to name it as that. I’ll revisit sorry one second
[17:47:53] <teut> ya, let me see. Thanks for the error cases
[17:48:56] <han-solo> df_data: https://bpa.st/C6TQ # this is the data, what do you want to do with this ? as you can see there are no "ID", but an "id", also there is an "Id" nested inside params
[17:49:00] *** Joins: somlis (~somlis@user/somlis)
[17:49:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:49:40] <han-solo> df_data: `request.json` is also parsed and available to you as `dict` in this case
[17:50:11] <bjs> teut: if you want to do the rindexing approach (which may or may not be faster than just a split() or similar, you'll have to test) then you can make the coe nicer by hiding it behind a generator or something
[17:50:15] <aod> bye guys, good night.
[17:50:19] <han-solo> s/also/already/
[17:50:29] <df_data> Sorry working with a number of them, this one may be better @han-solo https://dpaste.org/gA2O#
[17:50:34] <teut> how will rindex be slower than split and join?
[17:50:37] <df_data> Each json is different :/
[17:50:40] *** Quits: aod (~a@190-203-246-213.dyn.dsl.cantv.net) (Quit: leaving)
[17:50:48] <bjs> teut: well you do it many times
[17:50:59] <han-solo> that is fine, just need a common thing that we can use to say as filename, right ?
[17:51:06] <teut> in split too I would need joining strings
[17:51:08] *** Joins: nyah (~nyah@94.6.71.219)
[17:51:28] <bjs> teut: yes but in split you ask Python to do it all at once,  I'm not sure why rindex would be fastger
[17:51:29] <bjs> faster*
[17:52:11] <teut> for(int i= length; s[i] != "\n" ; i--) ;  ??
[17:52:17] <teut> isnt rindex this?
[17:52:35] <teut> with safety nets and so on
[17:52:55] <teut> what can be faster than this
[17:53:23] <han-solo> df_data: Okay, so you want to save the json with 'TCode' value as filename ?
[17:53:54] <df_data> Yes
[17:54:10] <han-solo> the whole json ?
[17:54:15] <df_data> Yes
[17:54:23] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[17:54:39] <han-solo> but that will repeat the same json for all the 'TCode' inside, no ?
[17:54:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:55:11] *** Joins: jmew (~jme@host-78-147-68-149.as13285.net)
[17:55:15] <han-solo> say, i have 2 TCode, 'FRR' and 'JEO', and you want to save the same json as FRR.json and JEO.json ?
[17:55:24] <df_data> At the moment I’m saving it on date because I didn’t know this part. No it shouldn’t, this name should only appear once per json file.
[17:56:22] <df_data> No, I hopefully won’t have the same name twice.
[17:56:54] <df_data> So the TCode will be a unique value for each json if that makes sense?
[17:57:07] <bjs> teut: asking Python to do it, with a single split() call, all at once
[17:57:08] <bjs> (maybe)
[17:57:10] <df_data> That was just an example, poor one I do apologise
[17:57:52] <teut> split means what?  create two arrays and load them with data?
[17:57:56] <bjs> teut: instead of you doing lots of little rindexes one after the other with lots of little computations of indexes it *might* be faster just to say to Python "here's the whole string, go split it for me" because then Python can do it all at once without having to do all the intermediate computations and stuff
[17:57:58] <bjs> teut: like .split()
[17:58:04] <teut> I dont remember how to split in c
[17:58:11] <bjs> teut: we're in Python ?
[17:58:30] <teut> wait wait so you are sating to split at \n?
[17:58:39] <teut> and what about the 2000?
[17:58:49] <bjs> teut: or just at any whitespace/puncuation
[17:58:56] <teut> ya sure
[17:59:07] <bjs> teut: well you collect words together until you have ~2000 characters
[17:59:09] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[17:59:10] *** Joins: akk (~akk@75.161.146.115)
[17:59:20] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:59:45] <teut> if you see I used indexing too
[18:00:00] <teut> dont you think that will be faster?
[18:00:00] <bjs> teut: yes I saw... we just spent a lot of time talking about your indexing
[18:00:02] <bjs> and how you're doing it many times
[18:00:03] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 256 seconds)
[18:00:08] *** Joins: node1 (~node1@user/node1)
[18:00:19] <bjs> teut: no we literally like 2 seconds ago had a discussion about why I think it might not be faster
[18:00:21] <node1> Hello everyone.
[18:00:25] <teut> I still couldnt get it , but I still thinking
[18:00:31] <bjs> because it's just doing e.g. the same thing split() is but a little bit at a time
[18:00:33] <teut> will get back
[18:00:35] *** Joins: han-solo (~han-solo@user/han-solo)
[18:00:50] <node1> How to make this line shorter, in short pep8 standard
[18:00:52] <node1> "string": area.Boolean(required=True, description="Long strin very long string more then 78 character"),
[18:01:05] <bjs> teut: well what do you think Python's own .split() is doing?  It's basically doing the same thing, but because it's doing it all at once in C it's going to be faster.  But then you have to put it back together into a bigger string. So maybe it's not faster
[18:01:21] <bjs> node1: what does black do with it?
[18:01:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[18:01:59] <node1> black does not made it shoeter. I has been catched by pycodestyle.
[18:02:05] <node1> shorter*
[18:02:11] <han-solo> df_data: sorry, i got disconnected. Just to clarify, if you have TCode 'FRR', and also 'JEO', you want to save the file as 'FRR.json' since, you have check `ecode['TCode'] == 'FRR', right ?
[18:02:15] <teut> ya bjs I meant that only , that you will ve to join the strings
[18:02:16] <bjs> node1: is it just the string literal that's the problem?
[18:02:20] <node1> it has been catched*
[18:02:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:03:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:03:10] <bjs> node1: is there a way to put the string literal into a variable on a different line?  Or to split it up into different parts and combine them together? or split the string over many newlines (in the source)?
[18:03:11] <node1> no it's just parameter passed into the function area.Bollean
[18:03:38] *** Joins: korg815 (~korg815@user/korg815)
[18:03:47] <bjs> node1: if having one long string is the most readable, then PEP 8 would say to use that
[18:03:53] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[18:03:57] <bjs> than to try make it fit
[18:03:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1)
[18:04:05] <df_data> @han-solo: just FRR the next JSON file will be a different value and a different structure with that one FRR won’t be in it.
[18:04:34] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:04:36] <df_data> So ignore JEO
[18:04:39] <han-solo> df_data: https://bpa.st/2BLA
[18:05:59] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:06:30] <han-solo> although, i think i might have failed to understand the whole thing. Because with this current one, you'd have to change the constant from time to time, which may or may not be what you want
[18:06:56] <node1> Can we write that statement into this format https://bpa.st/4RTA
[18:07:15] *** Joins: darksun (~darksun@user/darksun)
[18:08:30] <bjs> node1: "can"?  I mean sure Python won't stop you?
[18:08:45] <df_data> Okay I’ll try that. That would be fine with about 5 jsons yeah? Thanks you @han-solo  I’ll report back, I’ve only worked out 2 of the 5 json responses structure but I can test with the 2 for now. Each time it updates it will write over the file that’s fine.
[18:08:52] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:09:24] <han-solo> you could add a timestamp to the filename
[18:09:31] <node1> bjs Just wanted to confirm that it's the right way to write a syntax
[18:09:41] *** Quits: jpodivin (~jpodivin@cgnat44-pool1-236-179.poda.cz) (Ping timeout: 256 seconds)
[18:09:47] <bjs> node1: what do you mean by right?
[18:10:11] <bjs> node1: yes Python lets you put things on multiple lines.  Have you tried running black on your code (even if you don't want to use black for everything, at least to see what it would do?)
[18:10:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:10:21] <node1> There should be no syntax error at the time of running the program.
[18:10:22] <df_data> @han-solo: is it suppose to be write_text(data) or write_text(data_log)? Data_log id assume?
[18:10:53] <bjs> node1: ... do you see a syntax error for something?
[18:10:58] <node1> yes
[18:11:03] <bjs> Your questions are a bit weird, as if you have some kind of error but aren't showing
[18:11:17] <bjs> node1: oh, maybe you should have just said.  Can you pastebin the code that has the syntax error?
[18:11:28] <han-solo> df_data: er sorry, yeah `jOCson.dumps(data_log)`
[18:11:35] <node1> okay wait
[18:11:42] <han-solo> json.dumps*
[18:11:46] <df_data> If I need to take updates into account, I could do a if the file exists do this.
[18:12:01] <df_data> I really appreciate this @han-solo
[18:12:11] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 268 seconds)
[18:12:22] <han-solo> no problem
[18:12:26] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[18:12:56] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:13:05] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 256 seconds)
[18:13:11] *** Joins: pycurious (~Adium@user/pycurious)
[18:13:23] <df_data> Okay it’s failing when it cannot read data[params][1] as that’s only in one of the json files.
[18:13:27] *** Joins: redrum88 (~redrum88@user/redrum88)
[18:13:33] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-8d2d-21f7-2722-a500.res6.spectrum.com)
[18:13:51] *** Joins: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5)
[18:13:58] <df_data> The next json is [params][2][1] for example.
[18:14:07] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:14:07] *** Quits: han-solo (~han-solo@user/han-solo) (Read error: Connection reset by peer)
[18:14:22] *** Joins: Thanattt (~Thanatos@105.112.150.204)
[18:14:24] *** Joins: Hackerpcs (~user@user/hackerpcs)
[18:15:14] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[18:15:20] <node1> When i checked using Pycodestyle it says  `E124 closing bracket does not match  visual indentaton`
[18:15:25] <bjs> node1: for example https://bpa.st/GZTQ
[18:15:38] *** Joins: han-solo (~han-solo@user/han-solo)
[18:15:42] <bjs> node1: well that's not a syntax error, isn't that the linter
[18:16:04] <bjs> node1: it's just saying the style checker thought your bracket was weird because it didn't line up with the opening bracket
[18:16:26] <node1> I'm sorry i don't know and understand about `linter`  why we need to use ?
[18:16:35] <bjs> node1: pycodestyle
[18:16:38] *** Joins: cheater (~Username@user/cheater)
[18:16:43] <han-solo> df_data: Okay, so there's no proper structure from which where we can access the param keys ?
[18:16:55] <bjs> node1: why are you running pycodestyle? I can't answer that question, you are the one running it not me :)
[18:17:39] <bjs> node1: but that message is coming from pycodestyle not Python itself.  It's just telling you that your code looks weird (not that it's necessarily *wrong*) because the closing paren isn't lined up with your opening paren
[18:17:57] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Remote host closed the connection)
[18:18:11] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 256 seconds)
[18:18:11] *** Quits: ThanatosJ (~Thanatos@102.89.0.58) (Ping timeout: 256 seconds)
[18:18:15] *** Joins: ednhmn (~ednhmn@200.173.186.161)
[18:18:19] <node1> I'm running pycodestyle because this is my requirement to make the code in this style.
[18:18:47] <node1> bjs So what is the solution for such problem?
[18:18:50] <trace987> I have issues that my python program does not work on any linux distribution. I tried to create an exe file out of it but executing it result into failing and abort
[18:18:54] <bjs> node1: did you see my bpaste?
[18:19:03] <node1> Yes i'm checking it
[18:19:19] <bjs> node1: well there is no "problem" (that you've said) other than that pycodestyle thought your code looks strange because the closing paren does not line up with the opening paren
[18:19:26] <df_data> Second json sample https://dpaste.org/cdsh attempted code https://dpaste.org/2ydA# @han-solo
[18:19:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[18:19:31] <bjs> node1: so the solution would be presumably to make the closing paren line up with the opening paren
[18:19:39] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:19:44] <node1> How ?
[18:19:51] <df_data> Maybe a try: could be used? @han-solo
[18:19:53] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 256 seconds)
[18:20:05] <bjs> node1: well by editing the code so that they line up?  I don't really know how to answer that question
[18:20:18] <node1> okay no problem.
[18:20:27] <bjs> node1: look at https://bpa.st/4RTA  line 7 the ) is slightly to the right of the ( on line 4
[18:20:32] *** Quits: pwug (~pwug@user/pwug) (Remote host closed the connection)
[18:21:00] <bjs> node1: well actually that paste isn't very good b ecause it doesn't actually have the final closing paren
[18:21:16] <bjs> but it's to the right of the "d" from description too so it doesn't line up
[18:21:18] <bjs> either way
[18:21:23] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Leaving)
[18:21:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:21:34] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:21:44] *** Joins: janemba (~janemba@94.204.254.193)
[18:22:24] *** Joins: mimmy (~mimmy@146.70.75.148)
[18:22:27] *** Quits: Thanattt (~Thanatos@105.112.150.204) (Quit: Leaving)
[18:23:14] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[18:23:34] *** Joins: vats (~vats@103.158.91.169)
[18:24:12] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:24:39] <han-solo> df_data: Sure, i mean, we could just iterate through all the dicts in `param` and see if any of the subelements is a list, and then check that ? but it would be better if you could have a proper structure
[18:24:59] *** Joins: pycurious (~Adium@user/pycurious)
[18:26:07] *** Quits: p-i- (~Ohmu@223.206.149.105) (Ping timeout: 256 seconds)
[18:26:40] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[18:27:10] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[18:28:01] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:29:32] *** Joins: xkuru (~xkuru@user/xkuru)
[18:29:47] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[18:30:16] <df_data> @han-solo: I don’t think I could as that second sample on is an in int
[18:30:40] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[18:32:55] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[18:33:41] <han-solo> https://bpa.st/Y3FQ # i will stop now, because i think i will be causing more trouble than fixing issues. Also untested code
[18:33:49] *** Joins: Klinda (~superleag@user/klinda)
[18:33:54] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:34:58] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-631b-bbd8-78ba-13a3-5b05-4fb6.rev.sfr.net) (Quit: Leaving)
[18:35:18] <df_data> @han-solo: I’ll need to have that of above the [params][1]
[18:35:33] <df_data> The if inco*
[18:35:57] <df_data> Ahh I see what your doing
[18:36:02] <node1> okay
[18:36:18] *** Quits: nomic (~nomic@185.217.117.164) (Quit: Leaving)
[18:36:26] <df_data> Yeah think it may fail as it cannot see past params sometimes
[18:37:29] *** Joins: dohtem (uid524096@user/dohtem)
[18:37:32] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:39:12] <node1> How about this https://bpa.st/UBZQ ?
[18:40:12] *** Joins: osxtra (~root@136.49.108.80)
[18:40:17] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:40:49] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:41:45] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[18:41:51] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[18:41:59] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[18:42:06] *** Joins: xkuru (~xkuru@user/xkuru)
[18:42:57] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:44:15] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[18:44:28] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[18:46:11] *** Joins: naranja (~orange@user/orangeboxcutter)
[18:46:23] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:46:30] *** Joins: pycurious (~Adium@user/pycurious)
[18:46:36] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[18:47:10] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[18:47:45] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[18:48:53] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:49:23] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[18:49:35] <bjs> node1: did you mean type(self) not self.__class_\
[18:49:48] <bjs> also you can split things over multiple lines if it would make it readable
[18:50:32] <bjs> also that like looks very strange and it’s hard to comment without seeing the real line
[18:50:33] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:51:35] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[18:52:19] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:f4a3:575c:c3bd:1db9)
[18:53:02] <transhumanist> is bpa.st/+python not working?
[18:53:10] <transhumanist> or is it just my machine
[18:53:19] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[18:53:44] <bjs> transhumanist: seems to be fine
[18:54:28] <transhumanist> I see when I click on the link above its appending control characters at the end
[18:54:37] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[18:54:57] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[18:55:12] <bjs> transhumanist: what do you mean?
[18:55:21] <bjs> what is appending control characters
[18:56:20] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:56:44] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[18:57:59] <df_data> @han-solo what can i doing wrong? https://bpa.st/R4PQ just trying with the first json atm
[18:58:04] <transhumanist> if i click that link at the top of the chat it opens it up  in the browser but appends  a few characters at the end (so page isnt found) doesnt really matter its an easy enough fix, could be my pidgin doing it
[18:58:14] *** Joins: f0fz (~f0fz@122.11.212.106)
[18:59:01] <bjs> transhumanist: well if the page isn’t found then it can’t be bpaste doing it, probably yes your client is?
[18:59:21] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[19:00:06] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[19:00:09] <transhumanist> no problem
[19:00:29] *** Joins: darksun (~darksun@user/darksun)
[19:00:44] <transhumanist> anyway here is my question , I am sure its easy I just dont know what to look for to find the answer  https://bpa.st/M5PQ thanks for the help its appreciated!
[19:01:16] <sveinse> haha, as I tried to work myself around this blocking synch call in a separate thread, using loopback UDP to transmit messages to the main asyncio thread, windows doesn't seem let two programs talk to each others over 127.0.0.1
[19:04:25] <bjs> transhumanist: variables don't know their name
[19:04:52] <bjs> transhumanist: maybe you want a dictionary. like `gases = { "CO2": CO2Mass, "H2": H2Mass, ...}`
[19:04:59] *** Joins: f0fz (~f0fz@122.11.212.106)
[19:05:06] <bjs> transhumanist: then you can go `for gas_name, mass in gases.item(): ...`
[19:05:13] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[19:05:13] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[19:06:45] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[19:07:20] *** Joins: f0fz (~f0fz@122.11.212.106)
[19:07:42] <transhumanist> ah ok
[19:07:54] <transhumanist> thats simple enough, I guess I made that complicated
[19:08:35] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[19:09:32] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c9df:e56f:9fd5:3c6f) (Ping timeout: 268 seconds)
[19:10:06] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:bd59:812f:c093:711a)
[19:10:27] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:11:06] <han-solo> df_data: wild guess since i can't see much of the traceback, line 7 is not needed, `request.json` is already parsed json data
[19:11:24] *** Joins: Ha-Jo (~Thunderbi@2a01:c22:8d86:3200:208:caff:fe86:5ace)
[19:11:54] <han-solo> `data_log` is a dict already
[19:12:02] <df_data> @han-solo: errors out on data = json.load(data_log)
[19:12:06] <han-solo> yes
[19:12:12] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-30a6-7d52-2aa5-6940.fixed6.kpn.net) (Remote host closed the connection)
[19:13:13] *** Joins: f0fz (~f0fz@122.11.212.106)
[19:13:27] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-4c36-2ae5-60f2-6776.fixed6.kpn.net)
[19:13:35] <df_data> Okay so do for ecode in data_log[‘params’] instead?
[19:13:49] <han-solo> yes
[19:13:56] <df_data> Okay thank you
[19:14:39] <sveinse> I'm starting to get convinced that there is no way to cancel anything waiting for a thread thats doing a blocked call except for it to return in async.
[19:14:43] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[19:15:45] *** Quits: vats (~vats@103.158.91.169) (Remote host closed the connection)
[19:15:58] *** Quits: f0fz (~f0fz@122.11.212.106) (Read error: Connection reset by peer)
[19:15:58] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:16:28] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.3)
[19:16:50] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[19:17:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[19:17:42] <foo> Git question: Curious, do any of you have aliases to delete a local feature branch and push a feature branch delete to origin? I think I might set that up for cleaning. Curious on any helper scripts here
[19:18:20] <sveinse> So how can one interrupt blocking calls like msvcrt.getch() or time.sleep() programmically?
[19:19:04] *** Joins: fikran (~fikran@user/fikran)
[19:19:15] <sveinse> foo: wrong channel? I usually do it by hand in the shell, not as python scripts
[19:19:43] <foo> sveinse: more of a git workflow question than a python script question, I'm familiar with how to create aliases. Probably overthinking it, will ust do an alias. Thanks
[19:21:13] *** Joins: Jong (~Jong@2620:10d:c090:400::5:ddb6)
[19:21:47] *** Joins: darksun (~darksun@user/darksun)
[19:23:21] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[19:25:33] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[19:26:02] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[19:26:14] *** Joins: pycurious (~Adium@user/pycurious)
[19:26:26] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:27:56] *** Quits: delvian (~delvian@41.13.254.94) (Quit: Leaving)
[19:27:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e120) (Ping timeout: 264 seconds)
[19:28:14] *** Joins: vats (~vats@103.158.91.169)
[19:28:35] <df_data> @han-solo i get     f.write(json.dumps(results.json).strip() + "\n")
[19:28:35] <df_data> AttributeError: 'str' object has no attribute 'json'
[19:29:45] <whatsupdoc> you merge branches that often?
[19:30:50] <han-solo> maybe you meant `request.json` ? anyway, you already have it in another name `data_log`
[19:30:52] <foo> whatsupdoc: if that was directed at me, it's clean up. I could manually type two commands or in 1 command delete local branch and delete from origin. Maybe we redefine what a feature branch is so I'm doing this for tiny little things... what's protocol around this I wonder?
[19:30:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[19:31:15] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[19:31:56] *** Joins: pycurious (~Adium@user/pycurious)
[19:32:32] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 240 seconds)
[19:32:46] <han-solo> df_data: so either use `f.write(json.dumps(request.json))` or `f.write(json.dumps(data_log)` or better `json.dump(data_log, f)`
[19:32:47] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[19:33:16] *** vinleod is now known as vdamewood
[19:33:38] *** Joins: Linux77 (~Linux7_7@186.233.179.193)
[19:34:08] <whatsupdoc> Idk i wouldn't mind typing out the command. It's like staging and commiting, repetitive as hell but i still do it
[19:34:43] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9)
[19:34:51] <foo> whatsupdoc: thanks for sharing, maybe I'll start down that path. :)
[19:35:16] <sveinse> asyncio.to_thread() and similar methods exists to interact with blocking sync code. But all of them creates havok at program exit, as its sits around for the blocking call to return. How can one get around that? Calling the same blocking call in a purely sync program lets one interrupt the program with keyboard interrupt
[19:35:18] <df_data> okay @han-solo so it only created results.json... skipped the others so found what matched but didnt save as inteneded.
[19:35:25] <han-solo> df_data: also, note you don't need to open the `results.json` file everytime, only inside teh `except` clause ?
[19:35:26] <df_data> intended*
[19:36:10] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[19:36:12] <han-solo> see, what's in the exception
[19:36:15] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[19:36:23] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[19:36:33] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:bd59:812f:c093:711a) (Ping timeout: 250 seconds)
[19:36:50] <df_data>         except:
[19:36:50] <df_data>             results = "results.json"
[19:36:50] <df_data>             f.write(json.dumps(data_log).strip() + "\n")
[19:37:20] *** Joins: rakoon (~rakoon@80-100-166-138.ip.xs4all.nl)
[19:37:21] <han-solo> no, the whole `with open...`
[19:37:21] <sveinse> df_data: please don't paste in the channel, use https://bpa.st/+python or something similar
[19:37:38] * han-solo went for dinner
[19:37:54] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[19:37:59] <grym> df_data: why do you insist on changing the stringified json that you write to a file while you're writing it
[19:38:09] <grym> df_data: it's just weird
[19:38:56] <bjs> sveinse: you can't really interrupt a blocking call in any nice way outside of just sending some kind of signal to the process e.g. with the signal module
[19:39:01] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:39:32] <sveinse> bjs: let me try to see how the thread responds to SIGINT
[19:40:35] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[19:40:46] <df_data> What do you mean @grym and @han-solo i think i had the code wrong one second.
[19:40:53] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[19:41:12] <grym> "f.write(json.dumps(data_log).strip() + "\n")" is just a weird thing to do
[19:41:23] <grym> and you've done it a few times now and it's consistently been a problem for you
[19:41:48] <grym> if you want to write jsonlines, use jsonlines to do it, not json
[19:41:55] *** Joins: luigibu (~luigibu@80.30.201.209)
[19:41:59] <sveinse> It is strange that we haven't seen more discussion about this thou. Calling out for a thread to do sync calls in async seems something one would need occationally, but that it creates shutdown problems was surprising. The main thread could simply exit the program without a care in the world for the state of the thread.
[19:42:52] <df_data> So its only saving one json now and its whatever matched FRR https://bpa.st/C54A
[19:43:23] <df_data> ahh yes @grym ill fix it up now
[19:43:57] <sveinse> I'm wodering if the same would happen in a purely sync program with two threads as well. Something I need to test. Likely I think.
[19:44:48] *** Quits: lastshell (~lastshell@user/lastshell) (Read error: Connection reset by peer)
[19:44:53] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[19:45:10] <grym> df_data: it's less about fixing and more about slowing down a litlte and really getting the ideas of what you want to do well-understood in your head instead of shotgunnign it
[19:45:20] <bjs> sveinse: I mean the shutdown problems aren't really caused by the async part
[19:45:30] <bjs> it's just ... sync things cause shutdown problems
[19:45:45] <bjs> (or specifically _threads_ do)
[19:46:00] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[19:46:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:46:15] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.130)
[19:46:36] <jim> hi...
[19:46:54] <deltab> "Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an Event."
[19:47:35] <jim> I'm trying to take a pygame.event.key value, which appears to be an integer, and convert it into a character for printing... can I do that in a formatted print?
[19:47:36] <sveinse> bjs: you're right, I get the same behavior in a threaded sync program too
[19:47:46] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.9) (Ping timeout: 265 seconds)
[19:47:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9) (Ping timeout: 268 seconds)
[19:47:59] <df_data> @han-solo if i dont have results.json how do i open the json??
[19:48:06] <bjs> sveinse: there is no "nice" way to ask a thread to stop,  really.  That's one of the benefits async programs have (a cancel())
[19:48:07] *** Joins: mat001_ (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[19:48:25] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[19:49:00] <df_data> never mind i understand now ive revisited your post
[19:49:12] <bjs> sveinse: you can send signals (e.g. with signal.pthread_kill) but this comes with added concerns (because who handles the signal depends on what the thread was doing at the time)  and you can try make the threads daemonic so they don't impede shutdown
[19:49:13] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9)
[19:49:24] <dav1d> sveinse, what you're looking for is daemon threads, when the main thread exits all daemon threads are just discarded in a very unclean manner, but they technically stop
[19:49:27] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Read error: Connection reset by peer)
[19:49:28] *** Joins: pycurious (~Adium@user/pycurious)
[19:49:58] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[19:49:59] <bjs> sveinse: neither solution is particularly nice as they are inconsistent and/or do not give the killed thread an opportunity to gracefully exit
[19:50:05] <sveinse> bjs: yes, I am aware that threads aren't interruptable, that's not the problem per se. Its their impediments on program shutdown which is tricky
[19:50:08] <deltab> jim: there's a '.unicode' attribute too, might be what you want
[19:50:14] *** Joins: RougeR (~rougex250@user/rouger)
[19:50:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:51:06] <sveinse> bjs: given that the threads function is to do something blocking in order to keep the main thread's async eventloop alive
[19:51:38] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[19:51:55] <bjs> sveinse: sure, like I said there are a couple of solutions but they're not necessarily nice solutions
[19:51:59] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[19:52:00] <deltab> jim: but it's better to use the pygame.TEXTINPUT event for that, .text attribute
[19:52:42] <df_data> Dont understand why im just getting results.json @han-solo https://bpa.st/WH2Q
[19:53:47] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[19:53:56] <RougeR> anyone implemented class based tasks with celery?
[19:54:13] <bjs> df_data: what do you mean "getting"?  also a bare `except:` like that will be hiding whatever is really happening to cause the exception
[19:54:52] <RougeR> its not supported out the box, was looking at trying to implement it with an abstract metaclass which decorates an "execute" function with the @task decorator
[19:54:56] *** Quits: ede (~ede@user/ede) (Remote host closed the connection)
[19:55:26] <df_data> @bjs so out of the 5 json requests not I only have one file created called results.json
[19:55:42] <df_data> And that is because it matches the if statement
[19:55:49] <deltab> df_data: this will fail with AttributeError:  (f'data_log["ECode"].json').write_text
[19:56:30] *** Joins: ede (~ede@user/ede)
[19:56:33] <bjs> df_data: this code only talks about results.json if there was an error (that's what try/except does)
[19:56:53] <bjs> df_data: I agree with deltab that line6 looks like it will always error.
[19:57:16] <deltab> that's a pretty complex line: I suggest splitting it up with some variables
[19:57:23] <bjs> df_data: are the brackets/parentheses in the right place on that line?
[19:57:44] <bjs> Yeah putting it on multiple lines might make it easier to read
[19:57:49] <sveinse> Yeah, afics there is no daemon option for asyncio.to_thread() so I'll have to do my own thread with threading.Thread() and then use janus as a multi-threaded queue that works both sync and async. That works
[19:58:09] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[19:58:43] *** Joins: y1n (~y1n@178.165.190.4.wireless.dyn.drei.com)
[19:59:00] *** Joins: crabhi (~crabhi@ip-62-245-78-32.net.upcbroadband.cz)
[19:59:16] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[20:00:19] <df_data> @bjs @han-solo https://bpa.st/WKFQ okay i fixed up the line @deltab pointed out is that better?
[20:00:46] <sveinse> Yet, a little puzzled that this isn't discussed more than it is. I'd expect users to needing to do blocking sync calls from async from time to time and they'd encounter this.
[20:00:48] <df_data> im obviously doing the try wrong
[20:00:58] <bjs> df_data: why do you have a try at all?
[20:01:09] <df_data> all i get now is results.json only 1 out of the 5 and its because it matches the value
[20:01:22] <bjs> df_data: try/except isn't about matching if, it's about catching errors
[20:01:33] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[20:01:53] <df_data> because the next json is a different structure so i need to go through each of the json's and save them if there is a certain value inside
[20:02:01] <df_data> just trying the one here
[20:02:22] <bjs> df_data: I still don't understand why you have try/except .  You say you only see results.json
[20:02:36] <bjs> df_data: your results.json line doesn't even have the write_text() part so I'm not sure how you see it at all :
[20:02:38] <jim> I'll explain my situation a little better in a bit
[20:02:45] *** Quits: ednhmn (~ednhmn@200.173.186.161) (Ping timeout: 265 seconds)
[20:02:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:05:03] *** Quits: vats (~vats@103.158.91.169) (Ping timeout: 268 seconds)
[20:05:49] *** Joins: martums (~martums@user/martums)
[20:05:53] *** Joins: pycurious (~Adium@user/pycurious)
[20:05:57] <deltab> df_data: I suspect you already had a results.json file
[20:06:07] <sveinse> Async aside, any suggestions on how one might add timeout to system calls like msvcrt.getch() ? Any other ways to read the keyboard in windows?
[20:06:24] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:06:31] <df_data> yes youre right @deltab and @bjs
[20:06:40] <df_data> i deleted it and nothing appears now
[20:07:44] *** Joins: weedmic (~weedmic@109-186-1-92.bb.netvision.net.il)
[20:07:47] *** Joins: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0)
[20:08:10] *** Quits: onichomp (~onichomp@2806:264:4404:8016:f45b:a0b3:7fa:36e7) (Read error: Connection reset by peer)
[20:08:48] *** Joins: onichomp (~onichomp@2806:264:4404:8016:f45b:a0b3:7fa:36e7)
[20:09:03] *** Joins: ubert (~Thunderbi@p200300ecdf0ba279387348ed975200f7.dip0.t-ipconnect.de)
[20:09:24] <df_data> now its back when i write.text etc
[20:10:09] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:10:20] *** Joins: greedom (~greedom@x59cc9aee.dyn.telefonica.de)
[20:10:23] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:10:25] *** Quits: crabhi (~crabhi@ip-62-245-78-32.net.upcbroadband.cz) (Quit: Leaving)
[20:10:52] <deltab> df_data: you're still suppressing the exception?
[20:11:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[20:11:26] <df_data> ?
[20:11:48] <deltab> the "except:" clause catches all exceptions
[20:12:01] <deltab> but you don't output any error message
[20:12:44] <deltab> an exception is being thrown but you don't know what it is
[20:12:46] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[20:13:21] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[20:13:24] *** Joins: fikran (~fikran@user/fikran)
[20:13:57] *** Joins: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz)
[20:14:28] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[20:14:54] <sveinse> wow, how much easier things are in linux where most fd's can be slept/select/polled on. And how stuck one might be when embarking on threads to interface blocking system calls in async
[20:15:17] <df_data> @deltab so what im trying to do is prase the json if the structure matches what im parsing save the json as the name else save it as results.json
[20:16:07] <mefistofeles> sveinse: fd's? What are those? Just out of curiosity
[20:16:21] <deltab> sveinse: one option is to create a pipe, have one thread write to it, and have the other end in select/poll
[20:16:49] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[20:16:51] <sveinse> mefistofeles: file descriptors. You interact with devices as files for the most part
[20:16:51] <df_data> otherwise if the json structure isnt right ill get TypeError: 'int' object is not iterable
[20:16:56] <mefistofeles> sveinse: ah ok
[20:16:58] <mefistofeles> yeah
[20:17:03] <df_data> as  their different structures
[20:17:56] *** Parts: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz) ()
[20:17:57] *** Joins: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz)
[20:18:00] <sveinse> deltab: are there pipes in windows? And does it work with the asyncio event loop?
[20:18:36] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 268 seconds)
[20:18:39] <deltab> oh, I don't know that much about Windows
[20:18:59] <df_data> How should i do it @deltab?
[20:19:20] <deltab> I think Windows has something called WaitForMultipleObjects
[20:19:26] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[20:19:41] <deltab> df_data: remove the try/except and see what the exception is
[20:20:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:21:14] <sveinse> deltab: yeah, this would be a breeze in linux/*nix systems...
[20:21:42] *** Quits: Ha-Jo (~Thunderbi@2a01:c22:8d86:3200:208:caff:fe86:5ace) (Quit: Ha-Jo)
[20:21:49] <df_data> https://bpa.st/7MZA
[20:21:56] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:22:09] <df_data> okay
[20:23:11] *** Quits: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz) (Quit: Leaving.)
[20:23:12] <df_data> @deltab without try     for ecode in data_log['params'][1]:
[20:23:12] <df_data> TypeError: 'int' object is not iterable
[20:23:31] *** Joins: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz)
[20:23:37] <bjs> df_data: so some of the data_log params look different/have different types?
[20:23:37] *** Parts: crabhi (~krab@ip-62-245-78-32.net.upcbroadband.cz) ()
[20:23:42] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[20:23:59] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:24:00] <deltab> okay, so check for that
[20:24:37] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:24:53] <df_data> @bjs yep thats what im trying to catch with the try exempt
[20:24:59] <deltab> is there a field that tells you the type?
[20:25:08] <df_data> so try's sees if something matches then saves the file as the name
[20:25:21] <df_data> not really no
[20:26:32] <deltab> the problem is that your except matches every exception, whether it's the TypeError from an int, an error from being unable to write the file, an uncovertable value, running out of memory, pressing ctrl-c, etc.
[20:27:28] <deltab> or mistyping something and getting a NameError or AttributeError
[20:28:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:28:45] <df_data> Same json 1. https://dpaste.org/kkae sample json 2 https://dpaste.org/cdsh
[20:28:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[20:29:39] <deltab> you can use something such as  isinstance(data_log['params'][1], list)  to make
[20:29:55] <deltab> to check whether it's a list
[20:30:46] *** Quits: rsx (~dummy@ppp-188-174-146-173.dynamic.mnet-online.de) (Quit: rsx)
[20:32:11] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 264 seconds)
[20:32:21] *** Joins: barbarossa93 (~barbaross@c-73-39-107-44.hsd1.md.comcast.net)
[20:32:56] <deltab> if you're using python 3.10, you can use the new match statement syntax
[20:33:04] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:33:16] <df_data> So if isinstance(data_log[‘params’][1], list) do the save iterate else if isinstance(data_log[‘params’][2], list) do the next iterate? @deltab
[20:34:13] *** lukedashjr is now known as luke-jr
[20:34:33] <deltab> yes
[20:34:44] *** Joins: powftw (uid448161@lymington.irccloud.com)
[20:35:26] <df_data> Thank you will try tomorrow
[20:35:30] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[20:35:38] <powftw> https://www.irccloud.com/pastebin/mU5WKWCf
[20:35:59] <powftw> Hi, please read this question?
[20:37:19] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:37:21] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[20:37:38] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:38:35] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[20:38:45] *** Joins: ErkiS (~opera@85.253.103.121.cable.starman.ee)
[20:38:47] <deltab> powftw: why are 'a'/'1' and 'b'/'2' treated differently?
[20:38:59] *** Joins: tsaka__ (~torstein@31.177.98.42)
[20:41:32] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[20:41:49] <powftw> It could be anything instead of a and 1. Only thing is to check whether the same is repeatin continually
[20:41:54] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[20:42:10] <bjs> powftw: where did the '1' go though? it vanished from the output list
[20:42:41] <ali1234> powftw: sounds like you want compression :)
[20:42:59] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:42:59] <ali1234> some variant of run length encoding
[20:43:41] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[20:43:41] <powftw> bjs: please read why just below that :)
[20:43:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:43:55] <ali1234> slightly more complex if you allow repeated strings rather than just individual values
[20:44:05] <bjs> powftw: i did read,  but it doesn't seem to explain?
[20:44:06] <powftw> ali1234: oh! Run len encoding can do it?
[20:44:21] <bjs> powftw: the '2' appears in the output but not the '1' ?
[20:44:37] <han-solo> what if `['a', '1', '_', 'a', '1', '_', ...]` ? # just asking
[20:44:43] <han-solo> `[f'{k[0]}-{len(list(grp))}' for k, grp in itertools.groupby(zip(*[iter(a)]*2))]`
[20:45:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:45:29] <nedbat> powftw: what output do you want for this list?  ['a' , '9' , 'a' , '9' , 'b', '2' , 'c' , '3' , 'c' , '3' ]
[20:45:44] <ali1234> powftw: do you specifically need the counts, or do you just want the data to be smaller? because lz77 is about the simplest way to deal with this, but it doesn't actually store counts
[20:46:13] *** Joins: betuxy (~betuxy@p579add6d.dip0.t-ipconnect.de)
[20:46:41] *** Quits: ubert (~Thunderbi@p200300ecdf0ba279387348ed975200f7.dip0.t-ipconnect.de) (Quit: ubert)
[20:47:00] <powftw> Guys, let me once again verify my intended output as bjs: adviced
[20:47:04] <ali1234> and han is asking if the repeated data units are always the same size?
[20:47:26] <han-solo> yes
[20:47:35] *** Quits: y1n (~y1n@178.165.190.4.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[20:47:42] <ali1234> if they are, then RLE works
[20:47:47] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:48:55] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9) (Ping timeout: 250 seconds)
[20:49:06] *** Quits: tsaka__ (~torstein@31.177.98.42) (Remote host closed the connection)
[20:50:15] <powftw> ` ['a' , '9' , 'a' , '9' , 'b', '2' , 'c' , '3' , 'c' , '3' ]` the expected output for this is `['a/9{2}',  'b', '2', 'c/3{2}']`
[20:50:51] <bjs> powftw: so a/9{2} means 'a', '9' repeated 2 times?
[20:50:53] <powftw> all I want to output is how many time the same pattern is repeating adjacency. Here, a and 9 are repeating 2 times
[20:51:07] <powftw> Same for c and 3 are repeating 2 times
[20:51:18] <nedbat> powftw: would it be ok to have 'b/2{1}' as an entry?
[20:51:24] <powftw> Just any meaningful way to say it's repeating N times
[20:51:36] <powftw> bjs: exactly
[20:51:58] <powftw> nedbat: Just any meaningful way to say it's repeating N times
[20:52:03] <OMGOMG> doesn't sound like a trivial task
[20:52:06] <OMGOMG> homework?
[20:52:10] <ali1234> it is if the unit length is fixed
[20:52:25] <ali1234> will the length of the repeated fragment always be 2?
[20:52:32] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[20:52:51] *** Joins: newpy (~newpy@206.168.231.90)
[20:53:00] <powftw> btw, it should be adjacency repeating. not repeating anywhere in the list as shown in above expected output. That's where I'm confused
[20:53:18] <powftw> It's easy if everything was lying adjacently
[20:53:26] *** Quits: thevishy (~thevishy@2405:201:f005:c007:e1d9:1da9:c11d:bf92) (Ping timeout: 256 seconds)
[20:53:35] <powftw> But it's like mentioned in above example list
[20:54:03] <powftw> ali1234: no, it could vary from 2-8 or 10
[20:54:22] <nedbat> powftw: could it be this?  ['a', 'a', '1', 'a', 'a', '1', 'b', '2'] ?
[20:54:39] <nedbat> powftw: can you tell us where this list comes from? That might clarify some things
[20:55:42] *** Quits: Valeria (~Valeria@user/valeria) (Ping timeout: 256 seconds)
[20:56:14] <powftw> nedbat: No, the array won't be like this (no adjacent characters, symbols, numbers)
[20:56:33] <powftw> There won't be 'a' and 'a' lying adjacent
[20:56:47] <ali1234> what about a b 1 a b 1
[20:56:50] <nedbat> powftw: what does this list represent? Where did it come from?
[20:56:55] <deltab> you could pair the items up:  [('a' , '9'), ('a' , '9'), ('b', '2'), ('c' , '3'), ('c' , '3')]
[20:57:08] <ali1234> yeah we are trying to determine if that is allowed ^
[20:57:11] <powftw> Or any adjacent values. We take a[0] and a[1] check whether it's same as a[2] and a[3]
[20:57:15] *** Joins: gitly (~gitly@148.252.128.134)
[20:57:33] <powftw> I could write a loop. But it's ineffective as it may throw index error many times
[20:58:22] <powftw> I'm sorry that I'm not explaining well. I'll rewrite my question again
[20:59:11] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[20:59:41] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:00:34] <cluelessperson> powftw,     counts = {};  for i in range(0, len(arr), 2):  k, v = arr[i: i+1];  name = f"{k}/{v}";  counts.setdefault(f"{k}/{v}", default=0) += 1
[21:01:16] <deltab> collections.Counter might be useful
[21:01:26] <powftw> https://www.irccloud.com/pastebin/dhkcuqVQ
[21:01:49] <powftw> Repeating N times can be shown in any meaningful way.
[21:02:40] <han-solo> but not always a pair ?
[21:02:58] <han-solo> the repeating patterns, that is
[21:03:03] <powftw> I'll I'm trying to do is, We take a[0] and a[1] check whether it's same as a[2] and a[3], if yes, we say a[0] and a[1] is repeating 2 times. And same goes with a[4] 5 and till end of the list
[21:03:35] <deltab> >>> collections.Counter(zip(a[::2], a[1::2]))
[21:03:35] <deltab> Counter({('c', '3'): 2, ('a', '1'): 2, ('b', '2'): 1})
[21:04:14] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[21:04:38] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[21:06:05] <powftw> deltab: I cannot understand how this is related to expected output 🤔
[21:06:47] *** Joins: darksun (~darksun@user/darksun)
[21:06:52] *** Quits: thurs8060142 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[21:07:13] <powftw> deltab: on which example list did you run your solution?
[21:07:17] <cluelessperson> powftw, off the top of my head, something like this:
[21:07:17] <cluelessperson> https://bpa.st/BUMQ
[21:07:27] <cluelessperson> deltab, cheater
[21:08:06] <cluelessperson> powftw, his code and my code have a section that handles counting,   printing expected output would be another section that I included.
[21:08:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[21:08:48] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 265 seconds)
[21:09:00] <cluelessperson> powftw, by definition, you cannot really know whether things are repeated until you've checked the entire array.   then you can present your findings however.
[21:09:09] <aphysically> jinsun: I wonder how much of the pyright early type binding (the '= [] thing') is built in to the design
[21:09:33] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:09:38] <aphysically> because even if it doesn't want to change for philosophical reasons, it can probably provide better hints for what kind of types you need to add to make it happy
[21:10:55] <aphysically> as in, if it detects your code is consistent with python-style binding, suggest the explicit type hint you need to add
[21:11:01] <aphysically> mypy-style binding I mean
[21:11:30] <powftw> cluelessperson: did you run your pastebin code?
[21:11:50] <powftw> `SyntaxError: 'function call' is an illegal expression for augmented assignment`
[21:12:16] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 268 seconds)
[21:12:45] <powftw> deltab: could you please say how did that Counter () help in this case? Or what should I put inside the counter ()
[21:13:17] <powftw> I don't understand a[::2] or a[1::2]
[21:13:24] *** Joins: darksun (~darksun@user/darksun)
[21:15:48] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.3)
[21:15:53] <cluelessperson> powftw, no, I typed it off the top of my head
[21:16:11] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:16:31] <powftw>  ITS NOT FIXED REPEATING FOR 2 TIMES. IT COULD REPEAT ALMOST 10 TIMES OR LESS
[21:16:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:17:10] <powftw> Ik it's confusing.
[21:17:23] <powftw> Is there any libraries for checking this?
[21:17:39] <powftw> Imagine writing a loop for checking it is pain and not efficient?
[21:17:51] <bjs> powftw: I think it's a little too niche for a library to do it,  unless it's doing something very specific
[21:18:15] <bjs> powftw: if it's always 2 elements repeating, it's slightly less painful to check
[21:18:24] *** Joins: d_rwin (~yashpal@106.211.159.97)
[21:18:28] <cluelessperson> powftw, I had two small errors: but it works for me: https://bpa.st/GKVA
[21:18:29] *** Joins: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl)
[21:18:35] <bjs> if it's fully general it gets quite tricky to do efficiently
[21:18:58] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:19:22] <powftw> I take a[0] and a[1] see if its repeating a[2] a[3] if yes also check and so on till the pattern repeat is done
[21:19:31] <powftw> It'd be pain
[21:19:47] <bjs> powftw: ah
[21:20:07] <powftw> If one comma comes in between, the pattern is no more repeating..
[21:20:09] <bjs> powftw: so if you always chunk up the input into pairs *first* it gets easier,  there are libraries that can help with that chunking and with the counting but the loop isn't that "painful"
[21:20:16] *** Quits: rya (~ry@user/rya) (Ping timeout: 268 seconds)
[21:20:46] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 260 seconds)
[21:21:30] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:21:39] *** Joins: pycurious (~Adium@user/pycurious)
[21:21:44] <sveinse> When using `with something() as s:`, what is the difference from doing the context initialization in something() vs in __enter__() a little bit later?
[21:22:02] *** Quits: weedmic (~weedmic@109-186-1-92.bb.netvision.net.il) (Quit: Konversation terminated!)
[21:22:05] <powftw> bjs: what's your idea of chunking this  ` ['a' , '9' , 'a' , '9' , 'b', '2' , 'c' , '3' , 'c' , '3', 'c' , '3' ]`
[21:22:32] <bjs> powftw: I mean to get pairs [("a", "9"), ("a", "9"), ("b", 2), ...] isn't too painful
[21:22:43] <bjs> and then to loop over those pairs and count up repeats is not too painful either
[21:22:48] <bjs> if it's always that shape.
[21:22:51] <cluelessperson> powftw,   Oh, so you mean like a compression algo?
[21:23:09] <cluelessperson> yeah, you don't want counts like I did
[21:23:19] <cluelessperson> You're writing a simple compression algo
[21:23:22] <bjs> powftw: if the shape can change or if it gets more complicated you are looking at a much more complicated algorithm (have you seen e.g. compression algorithms)
[21:23:41] <bjs> powftw: if it's always take pairs at a time, I think I'd do what I said
[21:23:44] <cluelessperson> powftw, What you do is you have two pointers,     left, and right
[21:23:47] <powftw> bjs: yes yes,. It can be pairs as well. MY AIM IS TO CHECK THAT THINGY IS REPEATING OVERTIME
[21:23:56] <bjs> powftw: why caps?
[21:24:03] <bjs> powftw: I'm not sure what you mean by "as well"
[21:24:11] <cluelessperson> rather, you don't even need that
[21:24:32] <cluelessperson> you just have a single pointer, iterate right until it's a different pair
[21:24:34] <cluelessperson> this is easy
[21:24:51] *** Joins: korg815 (~korg815@user/korg815)
[21:24:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com)
[21:25:12] <powftw> bjs: I'm sorry. You said If those are pairs, things are more easier. Yes, i can convert it to pairs and check as well. Then what approach to take?
[21:25:51] <bjs> powftw: I'm not sure what you mean by "approach", just loop over the pairs and count up repeats
[21:26:02] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[21:26:21] <bjs> The `itertools` library (or equivalent third-party libraries) might have some things that make it nicer,  but it's not too painful to do without either
[21:26:28] <bjs> or well shouldn't be
[21:26:40] *** Joins: tobybl (~tobybl@213.31.134.235)
[21:26:43] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:27:54] <InPhase> powftw: d = {};  for k in zip(a[::2], a[1::2]):    d[k] = d.get(k, 0)+1
[21:28:11] <InPhase> powftw: Where a is your initial list.
[21:28:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com) (Remote host closed the connection)
[21:28:48] <powftw> InPhase: wdym by ::2 and 1::2 ?🤔
[21:29:04] <powftw> bjs: your idea is good. I'm thinking
[21:29:11] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 264 seconds)
[21:29:35] <InPhase> powftw: Slicing syntax, [start:end:step], so [::2] is every even indexed element, [1::2] is every odd indexed element.
[21:30:23] <InPhase> powftw: And zip produces an iterable of tuples containing elements from each.  If you do:  list(zip(a[::2], a[1::2]))   then you will see what it creates
[21:30:33] <InPhase> If you do just a[::2] you will see just the letters.
[21:31:05] <powftw> InPhase: the pattern may repeat N times. Not evenly or odd always
[21:31:24] <InPhase> powftw: Explain with an example.
[21:31:30] <powftw>  ` ['a' , '9' , 'a' , '9' , 'b', '2' , 'c' , '3' , 'c' , '3', 'c' , '3' ]`
[21:31:34] <bjs> powftw: https://bpa.st/NR3Q
[21:31:43] <bjs> here's .. a way (not necessarily the nicest way)
[21:31:44] <InPhase> powftw: That's handled fine by what I did.
[21:31:58] *** Joins: teut (~teut@182.68.64.194)
[21:32:01] <InPhase> powftw: This is the output:  {('a', '9'): 2, ('b', '2'): 1, ('c', '3'): 3
[21:32:02] <InPhase> }
[21:32:53] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:33:51] <cluelessperson> powftw, in all serious, I have this
[21:33:52] <cluelessperson> https://bpa.st/YUCA
[21:34:37] <cluelessperson> arr = ['a', '1', 'a', '1', 'b', '2', 'c', '3', 'c', '3', 'a', '1']
[21:34:37] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:34:45] <cluelessperson> ['a and 1 repeated 2 times', 'b', '2', 'c and 3 repeated 2 times', 'a', '1']
[21:34:59] <cluelessperson> compresses repeats
[21:35:14] <powftw> InPhase: in bjs: code and cluelessperson: code, do you see any difference from yours in General?
[21:35:17] <InPhase> powftw: Do you want only adjacent repeats?
[21:35:37] <bjs> powftw: I don't know what you mean
[21:35:45] <cluelessperson> powftw, can you speak english?
[21:35:49] <cluelessperson> :P
[21:36:00] <bjs> powftw: in general all the solutions are going to be the same given what you've told us,  loop over each pair in order and count up the number of repeats
[21:36:37] <RougeR> hello
[21:36:43] <cluelessperson> bjs, it turns out they want compression of repeats, not counting totals. :D
[21:36:54] <powftw> Infact, what I really understood from bjs: is making those adjacent indexs as pairs and running itertools on it
[21:36:59] <bjs> cluelessperson: yes that was clear from the start
[21:37:02] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[21:37:10] <bjs> powftw: I mean i'm just using itertools to do the counting of repeats
[21:37:14] <bjs> you can do it manually too
[21:37:20] <InPhase> powftw: Can you manually report the solution you expect for this one?  ['a', '9', 'a', '9', 'b', '2', 'c', '3', 'c', '3', 'a', '9', 'a', '9', 'c', '3']
[21:38:14] <InPhase> powftw: Note that I've added a second grouping of 'a' and '9'.
[21:38:48] <cluelessperson> bjs, well I have adhd and can't be bothered to read.
[21:39:05] <powftw> InPhase: 'a' and '9' are repeating 2 times, 'b','2' then 'c' and '3' repeating 2 times then 'a' and '9' repeating 2 times finally 'c' '3' . Ends
[21:39:14] <han-solo> also `['a', 1, 1, 'a', 1, 1, 'a', 2, 'a', 2, 'c', 2]`
[21:39:24] <powftw> Any way to explain what I said above is fine
[21:39:28] <InPhase> powftw: The term you were looking for then is adjacent repeats.  This is a different sort of problem.
[21:40:44] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[21:40:52] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 265 seconds)
[21:41:08] <powftw> han-solo: 'a' and '1' then '1' and 'a' then '1' and '1' then 'a' and '2' repeating 2 times then 'c' '2'
[21:41:11] <powftw> Ends
[21:42:06] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[21:42:19] <powftw> InPhase: so, your solution won't work?
[21:42:59] *** Joins: rany (~rany@user/rany)
[21:43:18] *** Joins: pycurious (~Adium@user/pycurious)
[21:43:42] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[21:44:08] <han-solo> but that pattern 'a', 1, 1 repeated 2 times, no need to consider that, right ? this is just about how many times `a[i], a[i+1]`, i+=2 repeats ?
[21:45:07] <han-solo> and the expected output would be `['a/1-1', '1/a-1', '1/1-1', 'a/2-2', 'c/2-1']` ?
[21:45:58] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:47:07] *** SallyAhaj_ is now known as SallyAhaj
[21:48:42] *** Joins: BlueSky (~BlueSky@user/bluesky)
[21:48:49] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:49:13] <powftw> InPhase: your solution seems working
[21:49:32] <powftw> bjs: your code worked well too
[21:50:01] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[21:50:15] <powftw> han-solo: could you please see what InPhase: wrote. It's simple, only 2 lines.
[21:50:21] *** Joins: BlueSky (~BlueSky@user/bluesky)
[21:50:26] <han-solo> `[f'{k[0]}/{k[1]}-{len(list(grp))}' for k, grp in itertools.groupby(zip(*[iter(b)]*2))]`
[21:50:38] <powftw> Also, we could pair up adjacent values and check for adjacency with itertools
[21:51:31] *** Quits: BlueSky (~BlueSky@user/bluesky) (Read error: Connection reset by peer)
[21:51:53] *** Joins: BlueSky (~BlueSky@user/bluesky)
[21:51:57] *** Quits: BlueSky (~BlueSky@user/bluesky) (Client Quit)
[21:52:00] *** Joins: thevishy (~thevishy@2405:201:f005:c007:e1d9:1da9:c11d:bf92)
[21:52:32] <han-solo> yes, what confused me was
[21:52:34] <han-solo> 22:52 < ali1234> will the length of the repeated fragment always be 2?
[21:52:47] <han-solo> 22:54 < powftw> ali1234: no, it could vary from 2-8 or 10
[21:52:52] <InPhase> powftw: My solution above is not designed for adjacent repeats, it counts total repeats.
[21:52:54] <powftw> han-solo: where should we pass in the list in your code?
[21:53:03] <han-solo> b
[21:53:06] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:53:17] *** Joins: v- (~gary@user/ghost)
[21:53:35] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:53:46] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[21:53:54] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[21:54:51] <powftw> InPhase: your solution seem to be working
[21:54:57] <powftw> As expected..🤔
[21:55:03] <powftw> Idk about edge cases
[21:55:09] <InPhase> powftw: Reading the text of your description also mismatches with some of the things you said a bit.  I think you should prepare several more examples that are trickier and show the expected solutions.  This might also help you in understanding what you're actually looking for.  The fact that you like my solution now after it contradicts what you said you want makes me concerned you're not yet thinking
[21:55:15] <InPhase> about the edge cases.
[21:55:26] *** Quits: d_rwin (~yashpal@106.211.159.97) (Ping timeout: 268 seconds)
[21:55:45] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[21:55:54] <powftw> InPhase: I understand you
[21:55:55] <InPhase> powftw: You're looking for what is called "pathological input", or the cases that seem hardest to solve.
[21:56:42] <InPhase> powftw: If on the other hand you can change what you want so that my short solution is satisfactory, then great.  ;)
[21:58:50] <powftw> tbh, you guys are thinking far far beyond my thinking
[21:59:09] <powftw> Infact, for complex thinking has simple solutions
[21:59:23] <powftw> That's what bjs: shown me
[21:59:39] <powftw> InPhase: your solution is impressive as well
[22:00:16] <powftw> han-solo: yours is good 👍
[22:00:42] <powftw> I feel bit burnout reading all. Infact I'll surely send feedback once I solve my problem
[22:00:42] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[22:00:55] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:00:55] <powftw> I thank you all very much for your time
[22:01:25] <han-solo> i'm curious, is this some coding challenge or something ?
[22:01:59] <powftw> Not infact. This was something bothering me for long time
[22:02:09] <powftw> I had one situation for solving the ssme
[22:02:13] <han-solo> ah...
[22:02:59] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:03:14] <powftw> `[::2]` <-- all even indexes?
[22:03:35] <powftw> And `[1::2]` <-- all odd indexes?
[22:04:24] <han-solo> yes
[22:04:29] <bjs> powftw: yes, the syntax of slicing is some_list[start:stop:step]
[22:04:31] <aoei\Chickatrice> :O
[22:04:52] <bjs> powftw: so that says start from the beginning/index 1, stop at the end, every second element
[22:05:32] <powftw> Ahh I see
[22:08:36] <powftw> ` ['a' , '9' , 'a' , '9' , 'c' , '3' , 'c' , '3', 'c' , '3' ]` consider this list, how can I make a tuples with pair of 2. Expected `('a','9'),('a','9'),('c','3'),('c','3'),('c','3')`
[22:10:40] <han-solo> `list(zip(*[iter(that)]*2))`
[22:10:42] <powftw> My solution would be to take len(list) then take a[i] and a[i+1] and make it tuple. Then it goes.. but I'm always hitting index error.
[22:10:49] *** Joins: p-i-_ (~Ohmu@223.206.149.105)
[22:11:07] <powftw> Index out of range error
[22:11:20] <powftw> han-solo: thanks man
[22:12:07] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 265 seconds)
[22:12:24] *** Joins: capn (~capn@user/capn)
[22:12:33] <han-solo> a more readable way would be, `list(zip(that[::2], that[1::2]))` or `ithat = iter(that); list(zip(ithat, ithat))` # ?
[22:12:42] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[22:13:51] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Ping timeout: 250 seconds)
[22:14:50] *** fling is now known as ciphersalad
[22:15:04] <powftw> Thanks again
[22:15:36] *** ciphersalad is now known as fling
[22:15:47] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[22:16:09] <aphysically> han-solo: *.*
[22:16:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:19:15] <han-solo> ':)
[22:19:55] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[22:20:15] <aphysically> I wouldn't have thought of *2 to get two references to same iterator
[22:21:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:21:25] <han-solo> yeah, me neither, i saw someone shared that here some time ago, don't remember who that was
[22:21:55] <Lando-SpacePimp> han-solo, MY MAN!
[22:22:45] *** Joins: fikran (~fikran@user/fikran)
[22:23:18] *** Quits: jim (~jim@about/linux/staff/jim) (Quit: Leaving)
[22:23:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:24:24] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[22:25:43] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:25:58] <han-solo> :|
[22:26:16] <jinsun> aphysically: actually I can't really find any issue specifically discussing this behavior, there are some similar ones but not exactly about inferrign types from first append, maybe he can be convinced by showing rust and mypy as example
[22:28:22] <jinsun> aphysically: there is one thing that pyright does which is inferring the type of a heterogeneous list as list[Union[all the types]] instead of finding a common base class for all of them like mypy does,, maybe that will trip up if it tries to infer from append
[22:28:32] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 240 seconds)
[22:29:03] <jinsun> because it could just keep unioning all the types as it sees more appends
[22:29:41] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.130) (Remote host closed the connection)
[22:29:42] *** Joins: dtux (~dtux@2601:646:8f00:3f2:1f8d:523e:11a:1242)
[22:32:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 264 seconds)
[22:33:45] *** Quits: PointThink (~PointThin@acap87.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[22:34:17] *** Quits: rakoon (~rakoon@80-100-166-138.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:35:34] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:fc6f:7208:862e:2c8a)
[22:35:49] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[22:36:19] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[22:37:09] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[22:38:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[22:39:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:39:45] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[22:39:56] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:40:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:40:07] *** Joins: MikZyth (~MikZyth@host-212-158-66-217.spbmts.ru)
[22:40:48] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[22:42:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 250 seconds)
[22:43:49] *** Joins: y1n (~y1n@178.165.191.230.wireless.dyn.drei.com)
[22:44:11] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[22:44:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 240 seconds)
[22:44:34] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:45:04] *** Joins: Auron (~Auron956@user/auron)
[22:45:05] *** Quits: defb (~defb@user/defb) (Read error: Connection reset by peer)
[22:45:58] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:47:41] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[22:50:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:51:09] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[22:53:13] *** Joins: TJ- (~root@about/linux/staff/tj-)
[22:55:12] *** Joins: pycurious (~Adium@user/pycurious)
[22:55:42] *** Joins: pwug (~pwug@user/pwug)
[22:57:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:58:43] *** Joins: nomic (~nomic@185.217.117.164)
[22:59:04] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[22:59:07] *** Quits: jbe (~jbe@lysator/root/jbe) (Ping timeout: 250 seconds)
[22:59:38] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[23:00:26] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[23:00:31] *** Joins: demsh (vc1s7iguvr@hermod.demsh.org)
[23:01:00] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:01:02] *** Quits: dba (uid502594@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:01:25] *** Quits: greedom (~greedom@x59cc9aee.dyn.telefonica.de) (Remote host closed the connection)
[23:02:37] *** Joins: greedom (~greedom@x59cc9aee.dyn.telefonica.de)
[23:03:26] *** Quits: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (Quit: byyyyyyye)
[23:03:31] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[23:04:12] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:04:24] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[23:04:27] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Quit: Leaving)
[23:04:46] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:06:06] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[23:11:19] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[23:12:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:13:59] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[23:14:23] *** Joins: CoolerX (~CoolerX@user/coolerx)
[23:16:27] *** Quits: greedom (~greedom@x59cc9aee.dyn.telefonica.de) ()
[23:17:11] <ErkiS> so, I'm trying to generate API documentation for my project. and it looks like sphinx is the default tool for this. but why is it so.. tedious?
[23:17:11] <ErkiS> with doxygen, I can generate a single simple config file, tweak some flags, and I'm done. very nice documentation, automatically also including READMEs and CHANGELOGs etc.
[23:17:11] <ErkiS> with sphinx.. after a few hours of trying, I still can't produce a result that would match doxygen out-of-the-box.
[23:17:26] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:17:30] <ErkiS> anybody here using sphinx? do you go through this rigmarole for each project?
[23:17:52] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[23:17:59] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 250 seconds)
[23:18:04] *** Joins: vlado_ (~vladoski@2001:b07:add:d406:e114:b509:881e:f6f4)
[23:18:21] <noelleleigh> ErkiS: I have also never been able to get Sphinx to work in a satisfactory way
[23:18:41] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Ping timeout: 268 seconds)
[23:18:47] *** Joins: greedom (~greedom@x59cc9aee.dyn.telefonica.de)
[23:20:06] *** Joins: vit (~vit@chello085216193138.chello.sk)
[23:20:16] <nedbat> ErkiS: sphinx is designed to make hand-written docs with docstrings interpolated into them, rather than a giant pile of just api docs
[23:20:31] *** Quits: vladoski (~vladoski@2001:b07:add:d406:a82b:9ebd:d31d:c0d0) (Ping timeout: 268 seconds)
[23:21:22] *** Joins: pycurious (~Adium@user/pycurious)
[23:22:04] *** Joins: luigibu (~luigibu@80.30.201.209)
[23:22:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:23:19] <ErkiS> nedbat: well, that's the thing. I don't want to make hand-written docs. I want to make standard-looking docs that use the information that's already there in markdowns and source code. Simply packaging them together in a sensible way, like doxygen and javadoc manage to do very well.
[23:24:09] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[23:24:28] <nedbat> ErkiS: it seems like doxygen has some python support: https://www.doxygen.nl/manual/docblocks.html#pythonblocks
[23:24:36] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[23:25:40] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Quit: Leaving)
[23:27:32] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 240 seconds)
[23:27:44] <ErkiS> nedbat: yeah, I've been using doxygen so far because it just works. but now I've been thinking of putting docs online, and would like to provide a familiar-looking result. e.g. readthedocs uses sphinx.
[23:27:56] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[23:28:19] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[23:28:54] <meatballs> ErkiS:  Sphinx has an extension to generate docs from docstrings https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
[23:29:05] *** Joins: vladoski (~vladoski@2001:b07:add:d406:757f:c492:3802:37d)
[23:29:26] <meatballs> And there's a plugin for change logs https://pypi.org/project/sphinx-changelog/
[23:30:33] *** Quits: vlado_ (~vladoski@2001:b07:add:d406:e114:b509:881e:f6f4) (Ping timeout: 250 seconds)
[23:30:35] <ErkiS> meatballs: that's exactly my problem, that all this configuring and pluginating and generating .rst placeholders and whatnot - should not be needed
[23:30:46] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:31:35] <meatballs> Have you read the docs for autodoc? You just write ordinary docstrings
[23:31:50] <ErkiS> is there maybe some tool that could generate all the sensible boilerplate for sphinx?
[23:32:00] <ErkiS> meatballs: have you used sphinx for your projects?
[23:32:12] <meatballs> Yes. Often
[23:33:34] <ErkiS> so when you document a project, you provide all the sphinx boilerplate manually? writing the tocs, providing .rst hierarchy etc?
[23:34:08] <meatballs> An example: https://axelrod.readthedocs.io/en/stable/
[23:35:19] <meatballs> Tutorials and guides are hand written (obviously). Reference section uses autodoc from docstrings in the code
[23:35:54] <meatballs> Example code in the tutorials is tested as part of the sphinx build
[23:36:16] *** Joins: black_13 (~jjosb@209.33.247.203)
[23:36:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:37:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:37:45] <aphysically> jinsun: getting (far) too interested in the edge cases of rust typing has been a surprisingly good priming for rust
[23:37:56] <aphysically> s/rust typing/python typing/
[23:40:39] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:41:02] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 240 seconds)
[23:41:26] <aphysically> plus I probably don't even have to think about subtyping unless I'm doing something weird
[23:41:47] *** Joins: finsternis (~X@23.226.237.192)
[23:41:56] *** Quits: vladoski (~vladoski@2001:b07:add:d406:757f:c492:3802:37d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:42:03] <aphysically> where "thinking about subtyping" means actually reading type theory some afternoon to understand covariance/contravariance more intuitively
[23:42:56] *** Quits: doc (~doc@user/doc) (Quit: Things to do)
[23:43:27] *** Quits: p-i-_ (~Ohmu@223.206.149.105) (Remote host closed the connection)
[23:45:47] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[23:46:19] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Remote host closed the connection)
[23:46:23] *** Joins: jmd (~user@de.cellform.com)
[23:47:03] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[23:47:12] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[23:47:32] *** Quits: betuxy (~betuxy@p579add6d.dip0.t-ipconnect.de) (Quit: Connection closed)
[23:48:18] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[23:49:05] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[23:49:57] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:50:49] <transhumanist> what do I call the addressing the second member of an array as in            m in "CO2":CO2Mass        where I want to use the second member (CO2Mass) in a functin like gas_mass(CO2Mass)? I want to read up on this sort of thing so what would it be called so I can figure it out myself .. thanks in advance
[23:51:02] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[23:51:15] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[23:53:29] <BtbN> Does mocks assert_called_with() have a way to ignore all but one arg? I really only want to check if one particular argument had a specific value
[23:53:39] <bjs> transhumanist: do you mean a dictionary?  `for key, value in the_dict.items():`
[23:53:39] *** Quits: Jefren1 (~Jefren@70.35.66.187) (Ping timeout: 256 seconds)
[23:54:06] <bjs> transhumanist: (you can choose whatever names you want `for gas_name, mass in dict_of_gas_masses.items():` )
[23:54:36] *** Joins: Jefren1 (~Jefren@70.35.66.187)
[23:54:45] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 265 seconds)
[23:55:09] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[23:55:31] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:55:43] <marduk> BtbN: you can grab the call arguments out of .call_args and just check the argument that you want.
[23:56:05] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:56:26] <BtbN> Hm, I had hopes to avoid that. Since it's quite ugly.
[23:56:55] <BtbN> Like, it would end up as this: assert mock_client.build.call_args[1]["labels"] == {}
[23:57:02] <BtbN> which is not very "expressive"
[23:59:06] *** Joins: dohtem (uid524096@user/dohtem)
[23:59:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
