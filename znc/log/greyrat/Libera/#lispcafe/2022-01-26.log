[00:07:38] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[00:11:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:12:08] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[00:12:55] <vms14> btw if you want to try the apk
[00:12:58] <vms14> https://file.io/iX0omZaLSR23
[00:13:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:13:12] <vms14> it's just s7 scheme embedded in android
[00:13:27] <vms14> and evals whatever you put in the text field
[00:13:53] <vms14> now the goal is to let this scheme be able to add stuff on the view
[00:18:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:18:43] <vms14> lol sorry was a one time download link xD
[00:18:47] <vms14> https://easyupload.io/fu3xjg
[00:19:27] <vms14> you could run it in an emulator or whatever
[00:21:03] <hayley> https://videocardz.com/newz/amd-ryzen-9-6900hx-shows-up-on-geekbench-33-faster-than-5900hx nice
[00:21:04] -ixelp- AMD Ryzen 9 6900HX shows up on Geekbench, 33% faster than 5900HX - VideoCardz.com
[00:21:31] <drakonis> jfc
[00:21:41] <drakonis> wild.
[00:30:43] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[00:32:25] <gilberth> hayley: Faster in what? Compiling your preferred compiler?
[00:32:45] <hayley> gilberth: Must be.
[00:33:01] <hayley> .oO(Just get a 6900X CPU, it'll be funny.)
[00:34:09] <gilberth> How about a 6502?
[00:35:27] <hayley> Very funny.
[00:37:03] * hayley reads some more crap.
[00:37:18] <hayley> "A more exact definition of decentralization is needed. I propose the following: A system that gains resiliency through redundancy and provides autonomy for individuals to freely associate." Sure.
[00:37:19] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:37:29] <sm2n> where?
[00:37:46] <hayley> "But what if we don’t need to operate “at scale”? We can see this today with individuals and communities running their own servers to host things like Mastodon, a decentralized social network for micro blogging." Well, there's no redundancy there at all. That's like saying RAID 0 provides redundancy.
[00:38:11] <mfiano> I am pretty much against federation. I prefer real ee2e P2P
[00:38:16] <hayley> (Except, of course, one server failing is only mildly annoying, unless it happens to be yours. But you still have no redundancy.)
[00:38:23] <sm2n> hayley: don't the posts get replicated?
[00:38:38] <hayley> sm2n: https://polymerwitch.noblogs.org/post/2022/01/22/why-slavoj-zizek-and-moxie-marlinspike-are-both-wrong-about-autonomy/
[00:38:40] -ixelp- Why Slavoj Žižek and Moxie Marlinspike Are Both Wrong About Autonomy – Polymerwitch
[00:39:20] <hayley> sm2n: Yes, but they are not proper replicas (c.f. Netfarm, Ethereum, IPFS, etc). You cannot meaningfully interact with a post from a dead server. 
[00:40:27] <hayley> It's clear they did not read http://lettingthedaysgoby.altervista.org/federation-without-decentralisation/the-tape-is-a-circle.html where I argue that intentionally not "scaling" is about as bad as intentionally "scaling" in the centralised sense.
[00:40:27] -ixelp- The tape is a circle, but who really cares?
[00:41:01] <sm2n> hayley: right
[00:41:46] <hayley> You are wholly dependent on your server caching the post when its source was up, and then you only have a read-only replica, to be precise.
[00:42:48] <hayley> The whole FwD series is a refutation of the idea that federation "provides autonomy for individuals to freely associate".
[00:43:40] <sm2n> also, what is that article you linked even about? It talks about consumer capitalism being bad, but then basically says "well maybe replacing it isn't all that important actually"
[00:45:27] <hayley> Something about defining autonomy, and refuting excuses for centralisation. And then introducing excuses for federation
[00:47:06] <selwyn> zizek wrote a film review recently in which he confessed that he never watched the film
[00:47:16] <selwyn> and didn't need to in order to write the review
[00:47:44] <sm2n> hayley: eh, I didn't read it that way; At least, I don't think what they wrote is incompatible with what you are saying "federation not ideal"
[00:48:11] <sm2n> But this anti-scale fetishism is clearly a coping mechanism
[00:48:34] <hayley> "not ideal" is too weak, I'd say "contradictory to their definition of 'autonomy' or 'decentralisation'" 
[00:49:00] <sm2n> I read it as "federation is better than total centralization", which I think is true
[00:49:05] <sm2n> Yeah, I guess that's true
[00:50:03] <sm2n> if I was being charitable I guess I could say it's at least halfway there and they never specified how decentralized it is?
[00:50:17] <sm2n> but now I am just grasping for straws
[00:50:22] <sm2n> selwyn: link?
[00:51:51] <selwyn> https://www.spectator.co.uk/article/a-muddle-not-a-movie-slavoj-i-ek-reviews-matrix-resurrections
[00:52:13] <selwyn> don't like to link to the sp****tor but there it is
[00:53:39] <sm2n> "in spite of its occasional brilliance, the film is ultimately not worth seeing – which is why I also wrote this review without seeing it."
[00:53:40] <sm2n> hahahahaha
[00:53:59] <selwyn> yes lol
[00:54:30] <hayley> .oO( "First of all, here Hess puts “egoistic union” — because he needs to take it in precisely this way! — in place of Stirner’s “union of egoists.” His readers, [...] of course, immediately find it correct and beyond doubt that nothing but “egoistic unions” has ever existed. — But is a union in which most of those involved are hoodwinked about their most natural and obvious interests, a union of egoists? Have “egoists”
[00:54:30] <hayley> come together where one is the slave or serf of the other? There are, it’s true, egoists in such a society, and in this sense, it might in some aspects be called an “egoistic union”; but the slaves have not really sought this society from egoism, and are instead, in their egoistic hearts, against these lovely “unions,” as Hess calls them." )
[00:55:34] <shka> selwyn: sucks to be baltic state
[00:56:01] <selwyn> no power projection arrows for them
[00:56:04] <shka> because Russia has borders, but does not like idea of having borders
[00:56:37] <pl> shka: it doesn't help that the baltics were left with lack of certain essential military forces and depend on NATO to provide them
[00:56:59] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[00:57:03] <pl> for several years, Polish contingent was one of the few that was known to take the mission seriously, for example
[00:58:49] <shka> selwyn: believe it or not, but consider that every single neighbor of Russia has a problem with Russia 
[00:58:59] <shka> well, dunno about North Korea
[00:59:01] <selwyn> uh
[00:59:06] <selwyn> azerbaijan doesn't
[00:59:11] <shka> you sure?
[00:59:14] <selwyn> yes
[00:59:28] <selwyn> armenia doesn't (admittedly, it doesn't quite border it)
[00:59:35] <shka> https://eurasianet.org/azerbaijan-russia-relations-sour-over-karabakh-disagreements
[00:59:36] -ixelp- Azerbaijan-Russia relations sour over Karabakh disagreements | Eurasianet
[00:59:44] <selwyn> central asian countries more or less friendly
[00:59:56] <shka> like Kazakhstan? xD
[01:00:07] <selwyn> well, yeah
[01:00:17] <shka> that's interesting position to take :D
[01:00:17] <pl> Belarus doesn't have a problem with Russia
[01:00:19] <selwyn> if you invite russia into your country
[01:00:24] <pl> but they are close to being part of federation again
[01:00:24] <selwyn> it means you are friendly with russia
[01:00:41] <shka> pl: because there is no such thing as independent belarus anymore
[01:01:06] <shka> selwyn: to suppress your own citizens? :P 
[01:01:28] <selwyn> azerbaijan is one of the few countries to successfully play the game of being close to east and west, which is partly why they achieved a surprise victory in the recent karabag war
[01:01:44] <shka> the only countries that are on the friendly terms with Russia are in effect Russian puppet states
[01:02:14] <selwyn> i don't think so
[01:02:24] <selwyn> china, turkey, many other asian countries
[01:02:26] <shka> among the neighbors 
[01:02:57] <shka> turkey shares no land border, China holds massive army alongside Russian border
[01:03:24] <shka> Asian countries... well, you mean Afghanistan?
[01:03:26] <selwyn> russian troops actually patrol the turkish-armenian border, though this is besides the point
[01:03:44] <selwyn> i mean asian countries
[01:03:52] <shka> or perhaps Mongolia?
[01:03:54] <selwyn> vietnam, koreas (both of them)
[01:04:09] <shka> vietnam shares no border with Russia
[01:04:15] <pl> selwyn: if you think China is very friendly with Russia, I've got a bridge in Brooklyn to sell
[01:04:44] <selwyn> well, they are allies not friends
[01:04:47] <selwyn> countries don't have friends
[01:04:54] <shka> selwyn: not really allies
[01:05:03] <pl> selwyn: Russian foreign policy respects strength
[01:05:57] <pl> ever since Sino-Russian split, they had... issues, but they respect each other
[01:06:13] <pl> s/Sino-Russian/Sino-Soviet/
[01:06:31] <selwyn> i don't know how to answer these
[01:06:34] <pl> Vietnam is traditionally at least a little inclined to anyone who will help against China
[01:06:39] <selwyn> presumably you know russia doesn't occupy mongolia
[01:07:10] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[01:07:20] *** Joins: susam (~susam@user/susam)
[01:07:43] <shka> also, if Russia would attempt it's green man people bullshit in China (or China puppets) the outcome would be swift and crushing
[01:07:48] <waleee> selwyn: Turkey sells drones to Ukraine and Erdogan made statements in support of Ukraine
[01:07:54] * pl recently learnt that Cambodia apparently has a national day of remembrance in memory of Vietnamese soldiers helping against Khmer Rouge
[01:07:55] <selwyn> i think the china-russia relationship is durable, if only because of american blunders
[01:08:07] <selwyn> and it shows few cracks
[01:08:12] <selwyn> waleee: yes
[01:08:15] <pl> shka: you can't really do little green men BS against a strong state
[01:08:33] <pl> shka: had USA honoured Budapest Proclamation, iirc, it wouldn't have worked in Crimea either
[01:08:44] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[01:08:51] <pl> but USA never lifts a finger when it comes to their responsibilities, so...
[01:09:02] <selwyn> and still, the russian-turkish diplomatic and economic relationship is strong, with mutual understandings over sensitive issues
[01:09:21] <shka> I wonder if China would eventually take a page from the Russian playbook and start a little bit of hybrid bullshit in the Russian far east
[01:09:37] <waleee> selwyn: ... on opposite sides in Syria and Libya though
[01:10:07] <selwyn> yes
[01:10:18] <pl> shka: They used to in the past
[01:10:19] <selwyn> despite being on opposite sides, they are still friendly
[01:10:25] <pl> now they have economic reasons not to
[01:10:26] <selwyn> this is the point i am trying to make
[01:10:43] <waleee> well "friendly"
[01:11:12] <pl> selwyn: consider that their goals in Syria and Libya might be not that much in conflict
[01:11:21] <shka> selwyn: you missed the part when Turkey supported nation in the Russian sphere of influence?
[01:11:51] <selwyn> pl: i don't know about that
[01:11:53] <waleee> Georgia I assume
[01:12:03] <shka> waleee: mountain Karabah
[01:12:31] <selwyn> to the extent that turkey accepts russia's rules of the game in syria, it is because putin played the diplomatic game well
[01:12:46] <waleee> shka: ah, yeah, that too. But that served russian intrest to get Armenia into Moscows line
[01:12:49] <selwyn> shka: i am aware
[01:12:54] <shka> selwyn: anyway, the point is, supporting Russia is kinda like being pro-appeasement 
[01:13:14] <shka> which i've been told, is considered to be pretty bad thing to be in the UK
[01:13:35] <waleee> shka: I think they was more vocal about the Russian operations in South Ossetia and Abchazia (? freaking spelling)
[01:13:47] <waleee> s/was/were/
[01:14:06] <shka> waleee: my memory is not that great, sorry
[01:15:23] <waleee> shka: tldr, Georgia wanted Nato membership, Russia wasn't keen. Supported small separatist movements in said parts of Georgia. Turkey was upset
[01:15:39] <shka> also, it is funny how Russia proclaims that NATO encircles it, while all the countries attempting to join the alliance do so because of the very real Russian threat
[01:16:06] <shka> even Finland now
[01:16:09] <waleee> shka: https://en.wikipedia.org/wiki/Georgia_(country)#Russo%E2%80%93Georgian_War_and_since
[01:17:57] <shka> waleee: oh, i remember that war very well
[01:18:05] <shka> but not Turkey reaction
[01:18:36] <waleee> not extensively covered exactly
[01:18:53] <shka> very well covered in Poland
[01:19:16] <shka> and other neighbors of Russia if i would have to guess 
[01:19:53] <shka> then president of Poland said something to effect "First Georgia, then Ukraine... then who knows"
[01:20:47] <shka> and that was feeling shared among the general population
[01:23:10] <shka> so yeah, fuck Putin I say
[01:27:22] *** szos is now known as shozo
[01:28:18] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[01:32:17] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:41:42] *** Quits: dra (~dra@2a04:4540:6422:2c00:1c1a:dda9:f862:c077) (Remote host closed the connection)
[01:48:27] <hayley> https://twitter.com/RustDiscussions/status/1466044093641936901 🤔
[02:06:35] *** Joins: dra (~dra@2a04:4540:6422:2c00:a91f:8138:a9f8:59d2)
[02:06:41] <dra> Hello!
[02:13:40] <mon_aaraj> Hi
[02:40:00] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[02:44:00] *** Joins: pjb (~pjb@user/pjb)
[02:59:36] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:2c84:596b:76cb:6e53)
[03:00:55] *** Quits: dra (~dra@2a04:4540:6422:2c00:a91f:8138:a9f8:59d2) (Remote host closed the connection)
[03:24:45] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:2c84:596b:76cb:6e53) (Remote host closed the connection)
[03:27:20] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[03:28:01] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:29:11] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102C-static.midco.net)
[03:32:02] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1029-static.midco.net) (Ping timeout: 240 seconds)
[03:48:15] <moon-child> I always have fun figuring out how applications handle selection.  Xterm uses right-click to expand/contract the selection, depending on where you are wrt the centre of the selection, and behaves oddly wrt fast left-click
[03:50:05] <aeth> I use qterminal (from lxqt, the sequel to lxde but with qt)
[03:50:21] <aeth> because xterm is just too minimal for me so I just grab something from a minimalist DE
[03:50:27] <moon-child> xterm is minimal??
[03:50:30] <moon-child> xterm is extremely bloated
[04:01:17] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:01:33] <gilberth> moon-child: cut and paste with xterm is the native X11 way. And what is odd to select a word with double-click and a line with triple-click?
[04:03:45] <moon-child> that is not what is odd
[04:04:45] <moon-child> 1) Move mouse to upper-left corner of terminal; 2) click; 3) release; 4) move mouse to lower-right corner of terminal; 5) click
[04:04:55] <moon-child> 3-5 must happen quickly
[04:06:51] <moon-child> and another thing, obviously related:
[04:06:53] <gilberth> That's xterm confused about the double click.
[04:07:50] <moon-child> indeed
[04:07:59] <moon-child> double-click, keep mouse held down and move it around; selection will change by words.  Now quickly release and press it again, now when I move the mouse selection changes by lines.  Quickly release and press again, to switch to character selection.  Etc.
[04:08:03] <gilberth> Or it acts like a drag with a glitch.
[04:08:42] <gilberth> I see. I wonder if that is a bug or a feature.
[04:08:42] <Catie> Oh that last one's really handy
[04:09:26] <gilberth> Catie: Indeed, say you want to mark lines, triple-click and drag.
[04:09:47] <Catie> Yeah that's new to me, but I can see myself using it fairly often
[04:09:52] <gilberth> I never noticed.
[04:13:03] <gilberth> Good to know as I was about to implement cut and paste for CLIM. Again.
[04:13:53] <gilberth> Actually doing the cut and paste with X11 is no fun.
[04:14:10] <moon-child> will you also do shift-click and shift-arrowkeys to expand selection?
[04:14:24] <moon-child> ctrl+click+drag to add noncontiguous selections?
[04:15:01] <moon-child> (first is done by ff and chrome, latter two only on ff.  I have no idea what other graphical apps do, as I don't really use gui that aren't browsers)
[04:15:05] <gilberth> Well, since we have presentations, you would cut and yank with sh-mouse-{L,M,R} as I did for McCLIM.
[04:15:42] <hayley> I forgot about the issue of knowing how compressed a rack is. I have to know before I pull the class ID, unless I use full size IDs. Hm.
[04:16:07] <gilberth> Otherwise I'll mimic the X11 way. I decided against a bare drag then and do today. Too much pain to tell a click from a drag.
[04:16:16] <hayley> ARM is little ending, right?
[04:16:41] <gilberth> hayley: ARM is no-endian. Depends on the MCU.
[04:17:17] <hayley> I could allow for e.g. 2^16 unique layout IDs, then always perform a 16-bit load at the start of the rack. If uncompressed, there will be padding until a slot. Else, no padding. That way we maintain alignment.
[04:17:38] <gilberth> But those I have seen had the correct endianess. That is LE.
[04:17:56] <hayley> https://forums.raspberrypi.com/viewtopic.php?t=300140 "yes? Did it really need a thread about it?"
[04:17:57] -ixelp- RP2040 (Pico) is little endian - Raspberry Pi Forums
[04:20:19] <hayley> A nice hack for me then. You get to keep proper slot alignment and compression, while not having to care for size when you load the class number, which avoids the circular data dependency.
[04:20:29] <gilberth> moon-child: Shift + arrow will be hard. As I will offer cut and paste outside the main application's loop and inside the event loop.
[04:21:56] <hayley> So, 64 bit class + 64 bit slots, 32 bit class + slots, 16 bit class + slots and 16 bit class + 8 bit slots. 256 classes is too tight for me, unless we have a closed world and are in production.
[04:22:59] <hayley> https://old.reddit.com/r/AyyMD/comments/scmv4o/petition_to_add_manjaro_to_the_approved_gnulinux/ 🤔
[04:23:00] -ixelp- Petition to add Manjaro to the approved GNU/Linux distros list : AyyMD
[04:23:07] <gilberth> moon-child: double-click + drag also works in firefox.
[04:23:34] <gilberth> triple-click + drag does paragraphs.
[04:24:17] <drakonis> hayley: ayyyy
[04:25:47] <hayley> lmao
[04:27:53] <gilberth> Hmm. With macos you could mark a paragraph and then drag it to the desktop or into a folder -- you get an odd file then.
[04:32:20] <hayley> I remember dragging out shapes from Word onto the desktop. You'd get shape files.
[04:32:32] <gilberth> Anyhow, I want to figure out how to share the kill ring with Emacs.
[04:32:57] <hayley> And it somehow creeped me out in a way. Though I used the iBook from 5yo to 10yo.
[04:33:34] <gilberth> hayley: A shape file? Usually you can drag pictures, which is nice. And with Preview.app you could also drag pages around and rearrange them also into a new document.
[04:35:19] <hayley> Yeah.
[04:35:46] <hayley> Oh, /me also remembers having a limited QuickTime where you would have to pay to screen record and edit video.
[04:36:02] <gilberth> Heh.
[04:37:30] <gilberth> Anyhow I surpised quite a few people who send me some PDFs I was supposed to print out and fill out. Then but for my signature, used the annotation feature of Preview.app to put e.g. my address and other details into that form. They always went "Hugh?! How did you do that?"
[04:42:19] * hayley gets to help someone else who just had a breakup. They are much more reasonable about than her.
[04:42:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:43:29] <hayley> Mostly that their ex wasn't a bad person IMO. Whereas I can say a lot of bad things about mine.
[04:44:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:47:02] <epony> you'll like these:
[04:47:05] <epony> https://en.wikipedia.org/wiki/Magic_number_(programming)#Debug_values
[04:54:46] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[04:55:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:00:34] * hayley uploaded an image: (84KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/onMuRGZHfdWKrFSMyEbhMmsq/Screenshot%20from%202022-01-26%2012-30-22.png >
[05:07:37] * |3b| wonders if stacks can be considered automatic memory management for function arguments and returns
[05:08:35] <sm2n> |3b|: sure, why not
[05:08:36] <gilberth> Well, it's called 'auto' in C for a reason.
[05:08:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:08:59] <hayley> I suspect not. But most people who use RC avoid writing cycles, to avoid leaking, so avoiding writing non-LIFO code isn't far off.
[05:09:05] <gilberth> Like in foo () { auto int x; ... }
[05:10:20] * hayley decides to start work on the new long Symbolics/Self/Erlang-the-Movie YTP, but isn't sure how to start it.
[05:10:42] <hayley> The ending is going to be the "Randy organises a missile strike" clip, but idk how to start it.
[05:10:46] <sm2n> erlang the movie 2, but for advertising CLOSOS
[05:11:30] <epony> WTF is Ericsson for 50 USD.
[05:11:51] <epony> (depreciation)
[05:19:50] * hayley uploaded an image: (108KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CEbniROSQxerthLajHUYiZFq/sysbolocs.png >
[05:31:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:32:14] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[05:52:53] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Read error: Connection reset by peer)
[05:54:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:57:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:05:36] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[06:28:24] <neominimum> Am I right in thinking call stacks are used primarily to enable direct style programming? An elegant solution to orchestrating continuations in a way that doesn't require continuation passing style function arguments. Is a call stack frame just the intentional conflation of the notions: continuation and scope?
[06:28:51] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[06:38:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:41:46] * |3b| wonders where to file bugs like "your font designer is having a seizure, please seek medical attention for them" http://3bb.cc/tmp/holomdl2.png
[06:54:04] <mfiano> That is quite the continuity error, if those are normal vectors
[06:54:45] <|3b|> the white are normals, yeah
[06:55:19] <|3b|> and the grid is 1 pixel with the glyph rendered at ~40 pixels tall
[06:55:51] <|3b|> http://3bb.cc/tmp/holomdl1.png is full size
[06:56:49] <|3b|> so the problem isn't even so much continuity as wtf is all that noise doing there in the first place
[06:57:40] <|3b|> and more importantly, how do i fix it :/
[06:58:17] <mfiano> is the big glyph on the right superimposed over a rasterized vector?
[06:58:39] <|3b|> (without breaking plausible things like what you would get from just converting a curve to short linear segments)
[06:59:12] <|3b|> big one on right is rendered from the sdf, as are the small ones above
[06:59:26] <mfiano> What is that bit of purple in it then?
[07:00:21] * |3b| doesn't see any, unless you mean that blurry inner corner, which is just normal sdf problems
[07:00:41] <mfiano> zoom in on the circular area the middle finger makes
[07:00:49] <mfiano> the bottom right corner of that is purple-ish
[07:01:28] <|3b|> you are looking at 1.png?
[07:01:35] <mfiano> yeah
[07:03:17] * |3b| only sees blurry white, maybe difference in monitors or i'm just looking at wrong spot
[07:03:18] <mfiano> i guess it's not purple. just looks like non-pre-multiplied alpha blending artifact
[07:04:28] <mfiano> it's a pinkish grey yeah
[07:04:39] <mfiano> https://i.lisp.cl/xbOzMh.png
[07:05:50] <|3b|> yeah, reddish background, and no idea which interpretation of alpha i'm even expecting to have there, so hard to say what's right or wrong for blending :)
[07:05:59] <hayley> gilberth: I found a new Sysbollocks tape in the basement.
[07:06:02] * hayley uploaded a video: (15358KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VGxMrlbFeIXVJBIpIQuvogOs/sysbollocks-2.mp4 >
[07:06:17] <mfiano> i noticed that immediately. i blame my attention to detail slowing me and everyone else down
[07:06:40] <|3b|> nah, you just notice what you've been working on :)
[07:07:05] <mfiano> oh yeah i left you a comment in #bufferswap 
[07:07:19] <mfiano> i havent been coding today. just thinking about design
[07:07:25] * |3b| had no opinion and then forgot about it :p
[07:08:30] <mfiano> is your error just due to fp distribution?
[07:08:34] <mfiano> or precision
[07:08:46] <epony> https://www.youtube.com/watch?v=CbeFjEHE-XY "Frank Zappa - Does humor belongs in Music? (1984)" some forking concert
[07:08:46] -ixelp- Frank Zappa - Does humor belongs in Music? (1984) - YouTube
[07:09:21] <mfiano> i think it looks fine in big image on right, sans some sharp or blurry corners in other areas. that specific area though looks good at that large scale.
[07:09:25] <|3b|> hayley: factories a minute makes me think we need a symbollocs factory clicker game
[07:10:18] * hayley snaps circuit board
[07:10:20] <hayley> Factories!
[07:10:25] <|3b|> mfiano: the error is that if i try to generate an msdf out of that shape, trying to preserve those dozen or so sharp corners in that half pixel is going to make that entire section of the sdf pretty much noise
[07:10:51] <|3b|> the rendered glyphs are using normal sdf, which is why the corners are blurry
[07:11:09] <mfiano> hmm
[07:11:17] <mfiano> that explains that then
[07:12:00] <|3b|> and so (as in the msdf thesis) the shape needs to be cleaned up, but the paper doesn't cover stuff like that
[07:12:46] <mfiano> i'd imagine you could do an iterative smoothing process until it meets some threshold, taking the tagent of each point along the curve and comparing it with the next
[07:12:53] <mfiano> I have no idea though.
[07:13:19] <|3b|> yeah, hard part is picking something that doesn't also break some other glyph
[07:13:26] <mfiano> right
[07:14:40] <mfiano> When I tested sdf/psdf/msdf years ago i found tweaking parameters to make a font look good broke others, and sometimes msdf was not the best choice
[07:14:53] <mfiano> and so i pretty much deferred font rendering to you :)
[07:16:47] <|3b|> yeah, i'm still waiting on me for font rendering too :/
[07:19:05] * |3b| supposes i'll just add a special pass just to look for that specific sort of thing where there are a bunch of points in a small area like that
[07:19:32] <mfiano> you could smooth each glyph independently perhaps
[07:20:39] <|3b|> yeah, this cleanup stuff is operating on a single contour of a single glyph
[07:21:06] <mfiano> I mean, in theory it shouldn't be difficult to smooth at a large scale looking for large discontinuities.
[07:21:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[07:21:17] <mfiano> especially for fonts/emojis/glyphs
[07:21:32] <|3b|> in theory, i would also know what i'm doing :p
[07:21:42] <mfiano> Well that's always the fun part :)
[07:21:49] <|3b|> and have a reasonable shape manipulation library
[07:23:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:26:39] * |3b| apparently needs to get around to implementing panning and zoom for this viewer too
[07:45:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:48:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:15:35] *** Joins: semz_ (~semz@user/semz)
[08:18:20] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:30:32] *** semz_ is now known as semz
[09:02:21] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[09:23:32] <hayley> https://www.youtube.com/watch?v=pV95ZBD0tAU
[09:23:32] -ixelp- Simple Minds-Film Theme (Bagger's extended mix) - YouTube
[09:25:24] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:29:38] <hayley> https://wiki.xxiivv.com/site/lisp.html How many mistakes can you make on one page?
[09:29:38] -ixelp- XXIIVV — lisp
[09:31:00] * hayley may have extrapolated from the BYOL link. But the C page was more funny.
[09:31:10] <hayley> "One good reason to learn C, even if your programming needs are satisfied by a higher-level language, is that it can help you learn to think at hardware-architecture level." pffff
[09:32:03] <moon-child> think at hardware-architecture level?
[09:32:05] <moon-child> lol no vliw
[09:32:32] <hayley> TIL my hardware has register allocation (well, register renaming is a thing but sssh) and non-insane calling conventions.
[09:32:41] <hayley> https://wiki.xxiivv.com/site/ansi_c.html
[09:32:41] -ixelp- XXIIVV — ansi c
[09:33:03] <hayley> The data type section is basically wrong. char is always 0 to 255? Good luck with that.
[09:33:20] <moon-child> 'register renaming' yeah.  Instruction scheduling and reordering kinda analogous too
[09:33:31] <hayley> The "reserved words" list misses everything starting with "str" and "is" IIRC.
[09:33:45] <hayley> .oO(Hackjobs, hackjobs everywhere.)
[09:34:04] <moon-child> anything else like that?  I guess memory renamer is also kinda similar to reg converter
[09:35:08] <hayley> Some hardware combines read/write ops, right? Usually at a scale larger than what is allowed by the instruction set, so a compiler can't just do it.
[09:35:28] <hayley> At least IIRC two AVX512 writes could be used to make a cache line appear without reading it.
[09:42:08] <hayley> I think Boehm's paper on "threads can't be implemented as a library" exhibits some sort of speculative execution of sorts, which was obviously not thread-safe, but I can't imagine any compiler actually emitting it.
[09:50:20] <hayley> I should shut up and get back to VM designing. Or, ideally, writing some. But the implementation is somewhat harder than a 16-bit MIPS 1 wannabe. sigh
[09:50:38] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[09:53:47] <hayley> ...I also get to work out (multiple) inheritance semantics for this machine. AIUI all resends will be directed, so it is mostly not hard. Just a case of working out how to combine slot definitions.
[09:55:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[09:57:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:03:06] <moon-child> hayley: I can see it, actually, if trying to generate branchless code
[10:03:09] <moon-child> (re speculative)
[10:03:19] * hayley nods
[10:04:08] <hayley> Well e.g. CMOV has you run both branches, but it was something more like { global++; if (something) global--; } which is probably not going to be generated.
[10:05:35] <hayley> https://web.stanford.edu/class/cs240/readings/p261-boehm.pdf page...263? on the right. Though it's supposed to illustrate breaking sequential consistency by "circular justification" for writes IIRC.
[10:05:36] <moon-child> if your branchless code gets complex enough, you might need some scratch space
[10:05:51] <moon-child> and what better to use than the memory you're going to overwrite with the result anyway?
[10:06:23] <hayley> I can't imagine the scratch not being local somehow though. But, yeah, sure, why not.
[10:06:27] * hayley groans
[10:06:28] <moon-child> better example probably is  if (cond) x+=2; else x+=1.  Turn that into x++; x += cond
[10:06:54] <moon-child> see also thing from the google dude about spilling to allocated memory
[10:13:00] * mfiano groans louder, for other reasons
[10:13:18] <moon-child> ( ͡° ͜ʖ ͡°)
[10:14:08] <moon-child> (with apologies)
[10:14:26] <hayley> I need some sort of two-level map to be able to compute slots in the presence of private slots properly. Hm.
[10:15:14] <mfiano> me is toying with an allocation-free image library, allocating a view of a pixel (displaced array) per thread.
[10:16:15] <moon-child> no love for CONS?
[10:16:18] <mfiano> so far seems to work nice. no more need for color objects or integers. also CIE XYZ for the canonical format :)
[10:16:35] <moon-child> 'CIE XYZ for the canonical format'  haha nice
[10:16:44] <hayley> CONS should not CONS its arguments.
[10:17:34] <moon-child> I know there have been some attempts over recent years to make more 'perceptually accurate' coloure spaces.  But I am not a colour expert and so can not assess them
[10:18:13] <mfiano> no color space to date can represent the full range of human perception
[10:18:20] <mfiano> err
[10:18:24] <mfiano> no display device
[10:18:28] <moon-child> um
[10:18:31] <moon-child> well sure, duh
[10:18:46] <mfiano> So it doesn't matter much.
[10:19:04] <moon-child> well, I think the question is
[10:19:14] <hayley> .oO(Where is the stack allocation is an implementation issue gang, should I make r/henrygbakerjrmemes too)
[10:19:38] <mfiano> most color spaces are derived from XYZ though, so it makes for a perfect canonical form.
[10:19:40] <moon-child> how can we relate a difference between two colour values to a difference between the resulting perceived colours (given some display)
[10:20:27] <moon-child> hayley: henry baker should start a fan club
[10:20:29] <moon-child> guy steele too
[10:24:42] <mfiano> The OG Iron Man
[10:25:11] <hayley> https://www.youtube.com/watch?v=eZHDc3RmZgE
[10:25:11] -ixelp- Steel And You - YouTube
[10:25:50] <mfiano> I was honestly expecting Steely Dan and am somewhat dissatisfied.
[10:26:08] <hayley> David Ungar is the Steely Dan, not me.
[10:27:29] <|3b|> moon-child: how do you relate the difference between 1 color value to the difference between the resulting perceived colors when the 1 color is in different contexts
[10:28:39] <moon-child> hmm good point
[10:29:05] <moon-child> depends on surrounding colour.  Display technology.  Glossy/matte.  Ambient lighting.  Time of day.  Viewer's individual biology.  Mood.  Night vision
[10:29:47] <moon-child> lots of factors.  That's what controls are for!
[10:31:03] <|3b|> and that's before you even start trying to define "color value" :)
[10:31:56] <moon-child> what's the issue there?
[10:32:04] <moon-child> say, frequency x intensity x n
[10:32:34] <|3b|> how many frequencies?
[10:33:33] <moon-child> n frequencies.  Throw an fft at it and see what you get?
[10:33:39] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[10:34:25] <|3b|> ok, so you added the extra fun of having arbitrary numbers of distinct "color values" that would be perceived the same by a particular person :)
[10:34:45] <|3b|> (and probably close to the same by most people, for any set of such)
[10:34:58] <moon-child> sure.  You asked me how to define colour value, now how to represent a perceptual one
[10:35:36] <moon-child> 'perceived the same'  I mean, you always have that.  Can you tell the difference between ff00cd and ff00cc?  Is that a problem?
[10:35:56] <|3b|> right, i'm just saying that definition makes the original question of "color difference" <-> "perceptual difference"  even more complicated
[10:36:34] <moon-child> more complicated than what?
[10:37:14] <|3b|> no, i mean things that would have obviously different spectrograms but would stimulate the eyes identically
[10:37:14] <mfiano> 256 shades of magenta isn't that difficult to differentiate across a large surface/density
[10:38:01] <|3b|> but would look completely different if for example you reflected them off of some surface before hitting said eyes
[10:38:21] <mfiano> oh we are getting deep.
[10:38:32] <mfiano> think i'll sit this one out
[10:38:49] <moon-child> pbr go [p]brrrr
[10:39:21] <|3b|> and "more complicated" in the sense that it is M<->N instead of just the 1->N if you assume something simple like RGB
[10:40:00] <moon-child> 'completely different if for example you reflected them off of some surface before hitting said eyes'  meaning: perceptual colourspaces aren't universally applicable?  I agree
[10:40:58] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[10:41:17] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[10:41:55] * |3b| is mostly just being silly trying to avoid thinking about my code though :p
[10:42:19] <|3b|> can't decide if i want to rewrite a bunch of stuff, hack stuff, or just ignore it for a while longer and hope some better idea comes up
[10:42:51] <mfiano> hack it til you decide on the extremes?
[10:43:12] <moon-child> why hack when you have irc?
[10:44:22] <|3b|> hmm, vulkan 1.3 is out
[10:44:44] <mfiano> time to finish cl-vulkan 1.0
[10:45:08] * |3b| wishes i actually did enough (graphics) programming to actually be interested in that :/
[10:45:23] <moon-child> opengl 1.0: 5-loc triangle.  Vulkan 1.0: 1000-loc triangle.  Amazing how they managed to make it 200x better
[10:45:50] <moon-child> facetious ofc, but I could not get into vulkan solely because of its verbosity; still stuck on gl 4
[10:46:18] <humasect> isnt it because gl 1.0 is old 
[10:46:24] <humasect> like immediate mode
[10:46:32] <|3b|> if i ever get to vulkan, i'll probably still be drawing things with immediate mode :p
[10:46:44] <humasect> (which raylib now has to emulate, beautifully though)
[10:47:04] <humasect> immediate is much better for stuff like CAD, level editor, debug stuff
[10:47:11] <mfiano> immediate mode is great for experimenting
[10:47:11] <moon-child> humasect: yeah.  glbegin/glend.  I don't actually think this is a good idea
[10:47:38] <moon-child> gilberth help people are defending imui & I am tired
[10:47:42] <|3b|> actual code from window in front of me: (glim:with-draw (:lines :shader :line) (color 0.2 1 0.4 1) (vertex -1000 0) (vertex 1000 0)), core-profile GL apis :)
[10:47:44] <humasect> moon-child: not for modern supergraphics 3d game engine , but for things like UI and editing, its great
[10:48:45] <moon-child> humasect: I have largely lost interest in ui.  But if I had not, I would revisit my ui library and show how immediate-mode ui can be trivially implemented atop retained-mode ui
[10:49:14] <|3b|> begin/end part is bad, hide that behind a macro, rest of immediate mode is nice
[10:49:42] <moon-child> well, do you call glDrawArrays immediate mode?
[10:49:43] * |3b| is defending im /rendering/ not im UI
[10:49:58] <mfiano> Yeah I like my immediate mode renderer for experimenting
[10:50:12] <moon-child> it's not like you build up an entire scene graph and gl renders the whole thing at once
[10:50:30] <|3b|> that with-draws is part of something that fills up buffers for me
[10:50:57] <mfiano> sure beats all the buffer preparation, etc for a trivial vao rendering
[10:51:28] <moon-child> |3b|: ok, sure.  So it seems there are gradations.  Draw entire scene at once; draw object at once; draw triangle at once
[10:51:34] <moon-child> mfiano: can abstract over that too...
[10:51:38] * |3b| does want to write an immediate mode UI lib too though, but i don't think that should replace retained-mode UI, both are good, same way both are good for general rendering
[10:52:08] <|3b|> moon-child: my point is more about decoupling scene specification from rendering
[10:52:42] <mfiano> Virality doesn't even have scenes. You just stream in content whenever
[10:52:42] <moon-child> (let ((ball (make-ball))) (draw ball) (clear) (incf (x ball)) (draw ball))
[10:53:11] <moon-child> is that immediate mode or retained?  And does it specify a scene specification or not?  It seems to me the answer is: some of each
[10:53:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:53:19] <|3b|> right :)
[10:54:31] <humasect> ball ball ball ball ball
[10:54:51] <humasect> System.IO.Printer.PrintOut po = new System.Printer.Print.IO.PrinterOut()l
[10:55:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:56:08] <moon-child> in my ui library the widget interface was: draw, pref/min size given bounds
[10:56:15] <|3b|> my main point though, is that if you like the "5-loc triangle" stuff, and think things have gotten too complicated, spend some time wrapping the complicated behind something with the 5-loc api :)
[10:56:22] <moon-child> layout was just another widget
[10:56:45] <moon-child> I think that that is a sensible system that composes well, and that it doesn't make the sorts of assumptions you speak of
[10:57:35] <moon-child> complicated stuff aiui is about performance more than anything; specifying what goes where and is accessed when
[10:58:06] <mfiano> I don't see the point of vk for me as a single dev
[10:58:15] <mfiano> so would be a waste wrapping the complicated
[10:58:38] <mfiano> i spend most of my time being cpu bound due to GFs, or being unmodular due to structs
[10:58:54] <mfiano> never have i had to many tsate changes to hit any limit, or fill rate limited
[10:59:12] <|3b|> yeah, most of my interest would be from a few of the high-end features, along with having an excuse to drop old hardware :)
[10:59:17] *** Quits: vats (~vats@180.149.226.242) (Ping timeout: 240 seconds)
[10:59:32] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[10:59:34] <moon-child> haha
[11:00:09] <|3b|> fewer people complaining about "doesn't run on my ancient gl running in a vm on an emulated system in my browser" :p
[11:01:40] <hayley> Well, my idea for inheritance is basically exactly the same as using parent slots and objects in Self. So the slots due to superclasses are best modelled as slots in more objects. lol
[11:02:02] <humasect> https://moltengl.com/moltenvk/ 
[11:02:04] -ixelp- MoltenVK | Run Vulkan on iOS and OS X
[11:02:30] <|3b|> yeah, there are projects to run most 3d APIs on most other 3d APIs these days :)
[11:02:38] <|3b|> some more useful than others, of course
[11:02:40] <humasect> =)
[11:02:41] <moon-child> https://github.com/openglonmetal/MGL
[11:02:41] -ixelp- GitHub - openglonmetal/MGL: OpenGL 4.6 on Metal
[11:03:05] * |3b| thinks moltenvk is one of the better ones, along with some parts of angle
[11:03:08] <hayley> It can't just be a <name, class> pair because you might have e.g. A <: B, C and B <: D and C <: D; then making one's way through A -> C -> D -> some private slot should be different to A -> B -> D -> same private slot. lol
[11:03:34] <moon-child> 'diamond problem'?
[11:03:38] <hayley> Pros: look ma, no class precedence lists, private slots are really private Cons: I have no idea how to implement this without too many allocations
[11:04:05] <humasect> https://github.com/cpp3ds/gl3ds   - heh
[11:04:06] -ixelp- GitHub - cpp3ds/gl3ds: OpenGL implementation for Nintendo 3DS using ctrulib
[11:04:08] <hayley> I'd rather call it "private slot isolation"; two private slots from different classes of the same name should never collide.
[11:04:22] <humasect> |3b|: unfortunately those are paid/commercial 
[11:04:42] <hayley> The same should go for if some superclasses have the same superclass IMO; then A->C->D should have different slots to A->B->D.
[11:04:55] <moon-child> mgl is free
[11:04:58] <hayley> Or, at least, I can't think of a legitimate use for having A->C->D and A->B->D use the same storage.
[11:05:05] <humasect> imbuing privacy into a lisp system seems like ironic
[11:05:22] <moon-child> also: bgfx and sokol gfx, similar but layer their own gfx apis atop existing ones
[11:05:27] <hayley> Lisp was the first object capability language.[citation very much needed]
[11:05:44] <moon-child> um?
[11:05:49] <humasect> moon-child: nice. i like raylib so far, supplants SDL/glfw for me as well
[11:06:02] <humasect> (also can dump to the web, and many language bindings)
[11:06:02] <moon-child> sure.  raylib has a different role though
[11:06:03] <mfiano> Only one I heard of is https://github.com/bkaradzic/bgfx
[11:06:04] -ixelp- GitHub - bkaradzic/bgfx: Cross-platform, graphics API agnostic, "Bring Your Own Engine/Framework" style rendering librar [...]
[11:06:14] <humasect> hayley: oh? smalltalk? =P
[11:06:29] <moon-child> mfiano: https://github.com/floooh/sokol/ gfx lib
[11:06:30] -ixelp- GitHub - floooh/sokol: minimal cross-platform standalone C headers
[11:06:35] <humasect> moon-child: yeah, mostly just glue+convenience stuff. SDL/glfw+glu+glut+misc
[11:06:38] <hayley> No, the really first one was probably E. Then Newspeak.
[11:06:45] <humasect> ah yeah
[11:06:54] <moon-child> what about that one e precursor
[11:06:58] <|3b|> https://github.com/google/angle https://github.com/doitsujin/dxvk https://docs.mesa3d.org/drivers/zink.html 
[11:06:59] -ixelp- GitHub - google/angle: A conformant OpenGL ES implementation for Windows, Mac, Linux, iOS and Android.
[11:07:08] <hayley> But, given you can't forge pointers in safe CL code, pointer isolation is a valid sort of isolation.
[11:07:16] <mfiano> ES?
[11:07:27] <humasect> https://skia.org/   eh
[11:07:27] -ixelp- Skia
[11:07:58] <humasect> hayley: ah true. but why pointer, doing GC stuff?
[11:08:02] <moon-child> hayley: I think object capabilities imply some sort of actor calculus; i.e. I should be able to formally give you an object
[11:08:29] <hayley> humasect: Call it what you want, pointer/reference/object isolation, idk.
[11:08:48] <hayley> moon-child: I call you with the object. Congratulations, it's (partly) yours now!
[11:09:47] <moon-child> sure
[11:11:02] <moon-child> maybe I should say, then: it is not easy to enforce this sort of isolation
[11:11:17] <moon-child> you have to give up on special variables, for instance
[11:13:38] <hayley> It can be done in e.g. Newspeak, where you get to instantiate modules yourself, and thus control the "globalness" of "global" variables. The same could work for special variables.
[11:14:01] <moon-child> yes, fcge et al.  But then that is not cl
[11:14:31] <hayley> Didn't know if we were talking CL or not.
[11:14:55] <moon-child> ok
[11:14:59] <moon-child> I was responding to  'But, given you can't forge pointers in safe CL code, pointer isolation is a valid sort of isolation'
[11:15:28] <humasect> simula
[11:17:02] <hayley> Well, yeah, there is a lot of global state in CL.
[11:17:17] <hayley> You just have to...not do that.
[11:18:19] <humasect> why not? if ur the only dev, for eg. dwarf fortress probably has tons
[11:18:47] <moon-child> hayley: just don't write bugs!  It's that simple!
[11:20:04] <hayley> You can't forge pointers in CL, but you still hand out a lot by default.
[11:21:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[11:22:16] * |3b| is never the only dev, there is always me from 2 weeks ago, me from next month, etc always committing random incomprehensible stupid stuff :/
[11:23:11] <|3b|> (or worse, not committing it, and just leaving a bunch of half-finished stuff scattered all over my system)
[11:24:05] <moon-child> I try to leave stuff in branches, but still end up leaving it and never coming back to it
[11:27:35] <pl> mfiano: GLES started out as kinda cut down GL for embedded systems
[11:27:50] <mfiano> I know what it is.
[11:29:28] *** Joins: shka (~herr@109.231.0.226)
[11:35:31] <humasect> |3b|: hm that is true... i change a lot day by day in my interests and needs 
[11:36:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:40:39] <humasect> not many using structs in CL code in the wild eh? CLOS mostly 
[11:43:26] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[11:43:36] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[11:44:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[12:04:15] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[12:05:15] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:06:44] <qhong> moon-child: why you have to give up one special variable? a symbol is a capability
[12:06:53] <qhong> just need to ban `intern'
[12:07:07] <qhong> (replace-string "one" "on")
[12:09:37] <moon-child> sure.  But then, again, you have created a language which is not cl
[12:09:46] <moon-child> and: a symbol is a shitty capability
[12:10:23] <moon-child> and: intern is damn useful
[12:13:20] <qhong> moon-child: true. cl sucks.
[12:13:45] <moon-child> cl is a rather good implementation of cl
[12:13:54] <moon-child> how good you think the idea of cl is ...
[12:14:44] <qhong> moon-child: besides that, is intern useful in CL only because cl sucks?
[12:15:01] <qhong> because intern itself is blatant ambient authority 
[12:15:23] <qhong> if we acknowledge intern is useful in general we’re bowing down to ambient authority in general…
[12:16:24] <moon-child> I disagree.  But: I'm going to sleep now
[12:16:26] <moon-child> good night!
[12:43:04] <shka> and now arabs have taken over counter-strike 
[12:43:39] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[12:45:08] <hayley> Beats rash B nation?
[12:45:16] <hayley> https://old.reddit.com/r/LispMemes/comments/sd1ro5/sysbollocks_tape_2/
[12:45:17] -ixelp- Sysbollocks tape #2 : LispMemes
[12:47:06] <shka> hayley: yup, they've just spent 1 billion dollars on facit and ESL
[12:47:58] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[12:48:19] <selwyn> what
[12:48:24] <selwyn> is there money in counterstrike
[12:48:32] <shka> selwyn: sure it is 
[12:48:55] <shka> you have esport betting, you have tournament organizations 
[12:49:10] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[12:49:22] <hayley> selwyn: The hot dog stand company features in that tape too, idk what kind of crossover that is
[12:49:44] <shka> selwyn: CS is profitable esport, just not amazingly so 
[12:50:02] <selwyn> well a billion seems a lot then
[12:50:04] <shka> but unlike let's say LoL, it is not 100% controlled by a single company 
[12:50:54] <shka> and valve hates the concept of profit xD
[12:51:31] * shka looks at half life alyx
[12:51:31] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Client Quit)
[12:51:56] <selwyn> it was a good game
[12:52:09] <shka> it was also a very expensive game to make
[12:52:23] <selwyn> valve is surely profitable as a whole 
[12:52:38] <shka> that couldn't sell that many copies because playerbase with VR is not great
[12:52:57] <Duuqnd> Steam is the reason why Valve can do fun things once per decade
[12:53:08] <shka> oh, i don't doubt they are profitable, but i attribute that 100% to the steam
[12:53:31] <shka> because honestly, i really don't get them
[12:53:51] <selwyn> i don't think i would like to work under their horizontal structure
[12:53:53] <shka> make L4D3, it will bring in some cash, i pomise 
[12:54:06] <shka> but NO
[12:54:34] <hayley> HL3 when
[12:54:47] <shka> among everything that was possible to do, they picked one thing with the lowest chances to actually bring in profit
[12:54:47] <selwyn> hayley: nice
[12:55:08] <selwyn> oh sun is the hot dog stand company
[12:55:17] <shka> i guess still better then the artifact
[12:55:27] <selwyn> shka: hl: alyx was motivated by their grand ai strategy imo
[12:55:35] <shka> sure
[12:55:38] <selwyn> sorry, vr strategy
[12:55:44] <ck_> was about to ask
[12:55:58] <ck_> is there hat dlc for alyx already?
[12:56:03] <shka> meanwhile, MS spends 69 billions on another publisher 
[12:56:17] <pl> shka: considering how Valve works internally, Alyx is not so surprising
[12:56:23] <shka> soon, everything will be game pass exclusive 
[12:57:14] <selwyn> perhaps valve retains romantic notions of the story-driven fps?
[12:57:44] <shka> if they can function without sales on steam...
[12:57:57] <shka> and they can't
[12:58:06] <ck_> selwyn: but if that were true, wouldn't they be working on hl3 or similar?
[12:58:16] <hayley> selwyn: yes
[12:58:35] <selwyn> well, hl: alyx was in the half life family
[12:59:31] <pl> Steam rakes in enough money that everything else is a passion project
[12:59:52] <pl> ck_: at this point HL3 is pretty much guaranteed to never happen except by some sideways step (like Alyx)
[13:00:13] <ck_> pl: yes I think so too
[13:00:23] <shka> https://www.youtube.com/watch?v=vy3KBgT1dRw
[13:00:24] -ixelp- Half-Life 2 - Triage at Dawn (synthwave remix) - YouTube
[13:00:36] <Duuqnd> I wouldn't say there's no chance, I think the writers of Alyx said they wanted to do more Half-Life
[13:00:37] <hayley> I think HL3 would have to be perfect to work, so it'll never happen.
[13:00:46] <selwyn> hayley: yeah
[13:00:53] <shka> i think that Valve won't survive MS
[13:00:54] <selwyn> theres a part of me that respects valve for not rushing out any old shit
[13:01:10] <selwyn> as hl3
[13:01:16] <selwyn> would be easy for them
[13:01:19] <hayley> .oO(Well, the guns were meh in HL, but I don't care. Had fun in Postal 2 wherein the guns are worse.)
[13:01:26] <pl> I suspect Valve doesn't want to get into DNF category
[13:01:42] <Duuqnd> Postal 2 is made fun largely by its jankyness
[13:03:13] <shka> i personally don't care all that much for HL
[13:03:26] <shka> i am more into older generation of shooters
[13:03:43] <ck_> how much older? Isn't HL Game of the Year 1998?
[13:03:47] <shka> and i am spoiled now, with all those new retro-shooters 
[13:04:10] <selwyn> i cried when i finished hl: alyx
[13:04:16] <selwyn> it really means a lot to me
[13:04:20] <shka> ck_: yeah, but HL was the turning point for the FPS 
[13:04:25] * hayley goes up to Duuqnd with petition in hand
[13:04:31] <shka> and it has different kind of design
[13:04:46] <hayley> Sign my petition, dammit
[13:04:48] <ck_> so what do you mean? Quake?
[13:05:08] <shka> quake, build engine games, doom, heretic
[13:05:13] * Duuqnd nervously signs the petition
[13:05:31] <ck_> I think Quake II is not so dissimmilar to Half-Life in terms of the story linearity
[13:05:36] <ck_> s/story/level/
[13:05:51] <pl> shka: what do you think of Doom 2016?
[13:06:03] <pl> (and Doom Eternal?)
[13:06:16] <shka> pl: good games, not exactly retro stuff i crave 
[13:07:06] <shka> new doom games are just hallways connecting arenas where you fight monsters
[13:07:34] <shka> and monsters are great, arenas are well designed so it works really well
[13:08:21] <shka> but this is more true to the early 90s design https://www.youtube.com/watch?v=GEWGG5unpXo
[13:08:21] -ixelp- Ion Fury Gameplay (PC HD) [1080p60FPS] - YouTube
[13:08:52] <shka> also, it has sometimes arenas with a doom feel to it
[13:08:54] <shka> which is fun
[13:08:54] *** Joins: vats (~vats@180.149.226.242)
[13:09:28] <shka> also i love the soundtrack
[13:09:44] <shka> it is like taken from old time demo :D
[13:11:00] <shka> iirc it is actually even made with a tracker
[13:14:12] * hayley fails to figure out how to redefine COMPILE in ECL.
[13:14:26] <hayley> "Attempt to redefine function COMPILE in locked package." Can't find a "unlock this package" function anywhere.
[13:16:01] <shka> hayley: you can't
[13:16:41] *** Joins: OlCe (~user@amarseille-656-1-684-224.w90-8.abo.wanadoo.fr)
[13:18:13] <hayley> And it seems I need to boot an ECL for which I actually have sources. sigh
[13:18:29] <hayley> But IIRC one-more-re-nightmare on ECL performance went to shit, and I need to figure out why.
[13:20:16] <hayley> There's a restart instead, if you enter the DEFUN form in the REPL instead of C-c C-c.
[13:27:00] * hayley reads the generated C, and it is half-okay.
[13:29:31] <hayley> Well, it is not terrible on my laptop. Not very good, but not terrible.
[13:33:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:34:49] <hayley> Why does GCC generate CALLQ to just the next instruction? i.e. the bytes E8 00 00 00 00
[13:35:01] <selwyn> hayley: https://www.morrisseycentral.com/messagesfrommorrissey/open-letter-to-johnny-marr
[13:35:02] -ixelp- OPEN LETTER TO JOHNNY MARR. - MESSAGES FROM MORRISSEY - MORRISSEY CENTRAL
[13:35:29] <selwyn> the morrissey central committee speaks
[13:36:21] <hayley> https://www.youtube.com/watch?v=1dnCitAqPIM
[13:36:22] -ixelp- Frankly, Mr. Shankly (2017 Master) - YouTube
[13:38:04] <hayley> It seems that my results are biased cause the ECL compiler is damn slow (calling a C compiler, and all). Once I have code in the cache, then I get relatively bearable results (1.2ms/1e6 bytes for ab|ac).
[13:38:54] <hayley> Oh, my laptop takes 1.08ms with SWCL and the code already cached. So ECL's holding up fine.
[13:39:03] * hayley doesn't benchmark on her laptop - too many variables.
[13:41:16] <pl> Bad programming analogies gang - programming is like bungee jumping, where the actual act of writing a program is the jump itself
[13:41:16] <pl> Defensively working around unsafe language is like checking if you have the cord after jumping off
[13:42:42] <humasect>  hmm
[13:45:01] <hayley> I swear there was a quote like "using bounds checking in development, but not production, is like ..." and then I forget.
[13:45:34] <humasect> ".. like working on the body of the car and security features before the engine and chassis" ?
[13:45:38] <shka> pl: eh, honestly it is like that around every language
[13:46:01] <shka> just in varying degrees
[13:46:25] <hayley> I think it was like wearing armor only during military training, or something funnier.
[13:46:32] <humasect> =) 
[13:47:00] <shka> that's why I see C as a good pedagogical language to a degree
[13:47:26] <semz> not really the best comparison
[13:47:26] <selwyn> it is like brexit where you get fucked by the boring and tedious details after you already decided to do it
[13:47:32] <shka> because it teaches important lesson: EVERYTHING CAN GO WRONG, DON'T TRUST ANYTHING
[13:47:53] <humasect> C is the middle note =)
[13:48:41] <shka> also, java, with those error specifications is good lesson
[13:49:07] <shka> "almost everything can go wrong, but in controlled fashion"
[13:49:40] <humasect> also, wrong is also unintended. sometimes entropy and unexpected results are the goal 
[13:50:03] <humasect> (unintentional behavior, or undefined, is out of spec)
[13:51:06] <selwyn> i got invited to participate in a service that lets you do hpc with ci from github actions
[13:54:14] <hayley> Well, I remember Tony Hoare saying people told him not to allow them to disable bounds checking in a compiler, and I remember someone telling me that fuzz testing a program with bounds checking would suffice to find bugs, but nothing funny.
[13:58:56] <humasect> it is nice to have a type like "any number between 256 and 1024" which is either warned at or plainly errors if its constant literals, using type inference 
[13:59:24] <humasect> (cant be done at runtime with static types afaik)
[14:01:15] <hayley> Depends on your type system(tm).
[14:01:21] <hayley> But we have (INTEGER 256 1024) in Common Lisp.
[14:02:10] <humasect> yeah
[14:02:16] <hayley> "Using bounds checks in development but not in production is like never wearing a helmet again after you learnt how to balance on a bicycle." is mine now
[14:02:44] <humasect> ahh
[14:04:03] <hayley> That's how I've filled it now, idk if that is the proper quote. Probably not.
[14:04:41] <ck_> selwyn: that's neat, I always thought the whole setup process for when you use a new cluster is a bit more trouble than you'd like.
[14:04:44] <ck_> will you join
[14:05:00] <selwyn> no
[14:05:24] <selwyn> i have no further numerical code to run
[14:05:43] <selwyn> the hpc cluster is not very stable anyway, it has ridiculous filesystem issues
[14:07:26] <selwyn> my workflow is simply to start a lisp image running on a compute node, and use reverse tunnelling to allow me to connect to it using slime at home
[14:08:05] <ck_> so you're not parallelising across nodes?
[14:08:07] <selwyn> i don't know how introducing ci would be advantageous, seeing as how much of my development is in the repl anyway, and the code that starts the lisp image never changes
[14:08:18] <selwyn> ck_: not at the moment, i never really had to
[14:09:16] <selwyn> i would like to make a presentation some time about how to abuse the pbs queueing system to achieve this
[14:09:24] <selwyn> it really isn't built with interactivity in mind lol
[14:10:55] <selwyn> this way, i can connect to the image, start some simulations, see how they are doing
[14:11:20] <selwyn> return after lunch to see if any progress has been made, and maybe leave it running for another 24 hours if it looks promising
[14:12:07] <selwyn> the usual workflow for hpc is to not interact with the process while it is executing
[14:12:17] <selwyn> but you give up a lot of flexibility in doing this imo
[14:12:41] <selwyn> interactive development is just as useful for hpc as it is for the desktop/server
[14:12:43] <pl> shka: I think C doesn't teach that enough 
[14:12:50] <pl> Use assembly 
[14:13:10] <hayley> Use https://www.youtube.com/watch?v=tbHix56qfG8
[14:13:10] -ixelp- The Aircrash Bureau - YouTube
[14:13:30] <ck_> yeah that makes sense, but I've never had the opportunity to do that. It was usually a "submit code" [...] "receive results" loop, with no way to access the cluster directly
[14:13:40] <ck_> maybe in the next century
[14:14:00] *** Joins: kevingal (~quassel@149.157.101.196)
[14:14:03] <selwyn> it can certainly be achieved this century
[14:16:02] <selwyn> tbh i got at least a 3-10x speedup from moving from python to lisp just off of this
[14:16:23] <pl> There's stuff for interactive HPC, but it's apparently expensive and gatekept 
[14:16:24] <selwyn> waiting a whole day for results simply destroys your workflow
[14:16:49] <selwyn> pl: so the cluster eventually bought in interactive jupyter notebooks
[14:17:06] <pl> Also, my bungee jumping analogy happened due to people defending using C specifically 
[14:17:07] <selwyn> but you cannot leave them running after you close the browser
[14:17:24] <shka> ... would be easier with Lisp
[14:17:34] <pl> selwyn: I mostly encounter those in spark/ml contexts 
[14:17:38] <shka> CM was right all along
[14:17:43] <selwyn> yes, a lot of ml on this cluster
[14:17:51] <selwyn> cm?
[14:17:55] <pl> MPI stuff has extensive multinode debuggers available 
[14:17:58] <shka> connection machines
[14:18:14] <shka> the ultimate lisp machine 
[14:18:20] <contrapunctus> o/
[14:18:29] <pl> Except they were mostly used not in Lisp, and in batch mode
[14:18:45] <pl> So they are a good example of regression to mean 
[14:18:47] <selwyn> in practice, colleagues develop (somewhat painfully) on these notebooks, and when they want to run something serious they run the code non-interactively
[14:18:53] <shka> well, but lisp* was a thing
[14:19:21] <selwyn> i never used mpi or distribution across machines. briefly used lfarm
[14:19:37] <selwyn> i suspect mpi with lisp could have been painful
[14:20:09] <selwyn> oh, heisig maintains some bindings
[14:20:11] <shka> this is kinda fun https://github.com/LdBeth/star-lisp
[14:20:12] -ixelp- GitHub - LdBeth/star-lisp: A *LISP emulator
[14:20:26] <shka> if anybody bored, i recommend checking this out
[14:20:57] <contrapunctus> I can't seem to figure out how to use ESRAP to match any number of any characters until a " :" is encountered. /o\ (see https://scymtym.github.io/esrap/ )
[14:20:58] -ixelp- Esrap
[14:21:04] <shka> it is a concept that could be resurrected in my opinion
[14:21:27] <pl> selwyn: heisig did some "evil" stuff with MPI ;-)
[14:21:29] <selwyn> my most smug lisp weenie moment came from the guy sitting at the desk next to me insisting 'you can't develop interactively' while i did just that
[14:22:01] <contrapunctus> selwyn: what happens when you show them? 🤔️
[14:22:20] <shka> hayley: do modern *lisp
[14:22:25] <shka> in p2p
[14:22:28] <shka> :P
[14:22:34] <selwyn> contrapunctus: it makes a whoosh sound as it flies over their heads
[14:22:37] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 240 seconds)
[14:22:41] <selwyn> not intending to sound arrogant
[14:22:42] <contrapunctus> lol
[14:22:45] <selwyn> they just don't want to listen
[14:23:03] <selwyn> its python or bust for most people in my field
[14:23:15] *** Joins: kevingal (~quassel@2001:770:c0:401:857c:20f5:bf8b:7412)
[14:23:19] <shka> selwyn: which is weird given how inefficient python actually is
[14:23:27] <shka> even FFI stuff
[14:23:37] <hayley> shka: I think Cliff Click did that for a startup.
[14:23:38] * hayley isn't kidding
[14:23:44] <selwyn> shka: most scientists don't care about any of that boring computer stuff
[14:23:54] <shka> hayley: oh
[14:23:54] <hayley> https://mas.to/@nodefunallowed/107688381883300933 ← how 2 advertise CLOSOS
[14:23:54] -ixelp- Hayley Patton: "@haskal@cybre.space linux kernel patch which enfo…" - mas.to
[14:23:59] <humasect> selwyn: python =P
[14:24:00] <selwyn> just use the easy programming language (python)
[14:24:17] <humasect> oh, right, sorry
[14:24:34] <hayley> IIRC the story went like "I made a distributed key/value store with Paxos and shit, but no one wanted that, so then I made a parallelizing compiler and ran AI shit on the KV store, and people bought it up"
[14:24:46] <contrapunctus> Anyone have any idea about the ESRAP problem? 🤔️
[14:24:52] <selwyn> its a shame, because in the old days it seemed that physicists really treated computers as serious tools that they had to know stuff about
[14:25:02] <shka> contrapunctus: sorry, i don't use esrap
[14:25:07] <shka> or packrat 
[14:25:30] <scymtym> contrapunctus: (esrap:parse '(and (* (not " :")) " :") "foo :") ?
[14:25:47] <hayley> Numerical accuracy is still a problem, no?
[14:26:05] <selwyn> in physics?
[14:26:07] <scymtym> contrapunctus: depends on what you want to do
[14:26:12] <hayley> Because floats Work Like They Do, you have to diddle expressions to get the least incorrectly rounded values.
[14:26:45] <selwyn> hayley: yes but few know or care
[14:27:02] <shka> so it is just magic
[14:27:02] <selwyn> floating point education is not widespread i would say
[14:27:39] <selwyn> standards are possibly different in areas which are really serious about computation
[14:27:49] <selwyn> like what drmeister does, for example
[14:27:56] <pl> The problem with p2p lisp is that there's not enough support for copying code around 
[14:27:59] <contrapunctus> scymtym: oh hey :D trying write a parser for Org headings; e.g. selecting "a b c" and ":a:b:c:" from "a b c :a:b:c:"
[14:28:33] <selwyn> i've seen people evaluate polynomials the shit way, instead of using horner's method
[14:29:20] <ck_> oh yeah, the resistance to improvement on something other than what people are used to is weird
[14:29:44] <ck_> I probably do it myself. beach has a bunch of writing on this topic
[14:29:52] <selwyn> although i did have to write a lot of code that i wouldn't have had to had i stuck to python, still chalking up moving to lisp as a massive success
[14:30:19] * hayley taps http://metamodular.com/Essays/psychology.html
[14:30:29] <contrapunctus> scymtym: that might work, thanks. Never occurred to me I could use `not` like that 😅️
[14:30:29] <selwyn> hayley: yes.jpg
[14:30:33] <scymtym> contrapunctus: i see. probably something like (defrule tag (and (* (not #\:)) #\:)) and (defrule heading (and (* (not tag)) (? (and #\: (+ tag)))))
[14:30:33] <hayley> Or maybe it was http://metamodular.com/Psychology/shared-misery.html
[14:30:34] -ixelp- Shared misery
[14:31:13] <shka> pl: SICL can do that i think
[14:31:49] <scymtym> contrapunctus: "could" or "am forced to" depending on what you expect from a parser generator
[14:32:09] <hayley> Copying code? Not really.
[14:32:16] <contrapunctus> scymtym: xD
[14:33:44] <shka> hayley: you could shove ASTs around with checksum
[14:50:59] <hayley> https://fedi.absturztau.be/notice/AFnCZnGLcE4Wpdh5c0 "CLOSOS: Always program like you have 1TB of heap"
[14:51:00] -ixelp- fedi.absturztau.be
[14:51:21] <hayley> That is the domain name, yes, ixelp.
[14:52:01] <contrapunctus> "crash pigeon"? 🤔️
[15:04:58] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:16:58] <hayley> Is there agreed upon terminology on how to discuss the general design of process VMs? I mean, the SECD machine is fairly "mathematical" whereas LC-3 is probably not, as it pretends to be some awkward sort of physical machine.
[15:18:03] <hayley> The former is necessarily more abstract, as it manipulates some sort of data that is not a register set and array of words for memory, and instructions are often accessors for typed data.
[15:23:31] <pl> shka: SICL has some elements that make it easier, but there's none of the machinery available for example in JVM or .NET as standard 
[15:23:53] <shka> pl: yet
[15:24:37] <pl> shka: not sure if it's in scope. Required stuff can be quite limiting on implementations 
[15:25:09] <shka> i think that it is possible at least
[15:25:18] <shka> and ABCL also exists...
[15:27:25] <hayley> I just want 1 (one) factoring redundancy
[15:27:44] <hayley> Can't have shit in virtual machines
[15:28:42] <qhong> selwyn: All my physicist homies write FORTRAN :)
[15:28:58] <hayley> But I suspect there is a sort of "mechanical" simplicity vs "mathematical" simplicity. The former is basically what is convenient in C; shoving arrays and pointers obviously works. The latter only is sane if you have a high level language.
[15:29:29] <qhong> or impl vs interface simplicity
[15:30:33] <pl> shka: Java can do it because it was explicitly baked in from scratch that conforming *compiled code* should load on all JVMs
[15:31:02] <pl> CL compiled code is not portable between images, even if the images started from the same dump
[15:31:37] <pl> so best chance is having some preset first class environment in SICL used to generate "known" lexical environment for pure source code pushed around
[15:31:42] <hayley> shka wants to transport ASTs.
[15:31:57] <shka> yup
[15:31:59] <pl> which might mean you need to have *distributed dependency tracking*, too
[15:32:29] <humasect> need some *.clos files ala java
[15:32:33] <hayley> If arbitrary HIR wasn't unsafe to use, I would suggest transporting that, so you do not have to deal with possibly non deterministic transformations, like the details of closure conversion.
[15:32:41] <pl> might work if we do a leader election and all accepted source code must extend current chain head
[15:32:56] <hayley> pl: whens the ICO
[15:33:07] * pl drops a piano on hayley 
[15:33:26] * hayley dies
[15:33:45] <shka> pl: honestly this does not even sound that stupid :D
[15:33:55] <shka> heaven preserve me
[15:34:05] <hayley> OTOH I could believe that a shit C VM in C is shorter than a shit Lisp VM in Lisp. And...I can only say the former just has a lack of ambition, too.
[15:34:13] <pl> shka: the biggest issues are related to ensuring proper transformations
[15:34:22] <pl> keeping consistent causal chain is *easy*
[15:34:27] <hayley> The worse-is-better of platform design, I guess.
[15:34:55] <hayley> It is also hard to design an object platform, compared to a bit diddling platform.
[15:35:08] <pl> hayley: thanks to turing tarpit, we can compile all of them into OISC
[15:35:30] <hayley> Yes, doesn't really help though.
[15:35:31] <pl> and implementing OISC in C I think can be done in one, if fugly, line
[15:35:35] <shka> pl: well, this could work on small scale at least
[15:35:52] <hayley> You need to write the compiler then. And we still have to design the input language regardless.
[15:35:56] <shka> on controlled, but not strictly controlled nodes
[15:36:04] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[15:36:31] <pl> I'm now tempted to marry SICL with CORBA and Raft/Paxos thanks to you, you know
[15:36:38] <hayley> My input language is object-capability Lisp. Theirs is a shitty MIPS 1 wannabe. The latter is probably easier to convert to OISC.
[15:36:45] <humasect> noooo corba
[15:37:17] <hayley> We only need 1/3 to halt it.
[15:37:17] <hayley> shka: I say, if we consistently don't vote for pl, he won't get to lead such crap.
[15:37:36] <qhong> no need for compiler. Just write an interpreter and call `concat' your compiler
[15:37:59] <shka> hayley: i mean... i kinda like it
[15:38:14] <shka> and such system would be actually very valuable 
[15:38:30] <pl> humasect: why the noo? :P
[15:38:49] <shka> if you could get away with writing 100% with lisp, imagine how simple scaling everything would be
[15:38:54] <pl> some of the biggest annoyances are dead (there's standardized inter-orb protocol now)
[15:39:22] <humasect> pl: interface/idl files were neat idea, but with web/http apis, its hmm. mainly fit for C++ , almost too much detail
[15:40:02] <pl> humasect: Web APIs have IDLs too, now 
[15:40:21] <humasect> pl: ah, good =) i have feeling json fits in that way somwehere
[15:40:23] <pl> Turns out they are good idea 
[15:40:34] <shka> no shit
[15:40:43] *** Joins: pjb (~pjb@user/pjb)
[15:40:45] <pl> humasect: there's OpenAPI which uses JSON Schema among other things 
[15:40:50] <pl> There's grpc 
[15:41:26] <pl> That said, I do not want to link to webapi limitations for interactive distributed system 
[15:43:19] <shka> anyway, i think that *lisp inspired system would be actually pretty damn useful for some people, me included
[15:43:31] <shka> Galaxy Lisp
[15:43:32] <pl> *lisp would be more for a GPGPU 
[15:43:40] <shka> not only
[15:43:49] <pl> shka: have you used it? 
[15:43:57] <shka> just emulator, because, well...
[15:43:59] <pl> It's very GPGPU-ish 
[15:44:01] <shka> i don't own hardware :P
[15:45:27] <shka> pl: sure, it is tied to connection machine architecture, but i was referring more to the DSL approach
[15:45:56] <humasect> just like AI, still comes down to human choice and action
[15:46:26] <humasect> pl NSDistributedObjects was very neat, and then EO enterprise objects 
[15:46:56] <humasect> also https://www.blackholeinc.com/catalog/software/Software/NeXT/PortableDistributedObjects.shtml
[15:46:57] -ixelp- NeXT Products - Portable Distributed Objects (PDO)
[15:47:19] <shka> pl: i just consider this to be interesting problem space for experimentation 
[15:47:33] <shka> and actually good potential utility
[15:50:56] <hayley> Damn that costs $500 and Newspeak is $0
[15:54:46] <shka> hayley: https://old.reddit.com/r/MechanicalKeyboards/comments/scjxl9/little_crustacean_doing_his_part/
[15:54:47] -ixelp- Little crustacean doing his part! : MechanicalKeyboards
[15:55:53] <hayley> Average Rust machine keyboard vs Lisp machine keyboard
[15:58:59] <humasect> newspeak historical 
[16:00:45] *** Joins: clintm (~user@98.20.67.102)
[16:01:32] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:11:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:11:49] <pl> humasect: NSDistributedObjects worked for the same reason why FFI to obj-c works so well
[16:12:54] <humasect> ah yeah, true
[16:13:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:14:37] <contrapunctus> hayley: where Lisp alien cable lifter
[16:15:44] <humasect> https://www.geekalerts.com/u/toy-story-alien-usb-hub.jpg 
[16:28:19] <gilberth> It would be nice if ((lambda (&key x y &rest more) more) :x 10 :y 20 :z 30) => (:Z 30)
[16:29:04] <gilberth> And ((lambda (&key x &rest more) more) :x 1 :x 2) => NIL
[16:30:57] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:37:00] <gilberth> hayley: I own the same keyboard.
[16:50:57] *** Quits: vats (~vats@180.149.226.242) (Ping timeout: 240 seconds)
[16:51:12] <shka> pl: you ever worked on some p2p architecture?
[16:56:37] <pl> shka: a bit in university, and been looking into p2p "personal cloud" kind of setup
[16:57:08] <shka> i am personally interested in something that could store and munch data
[16:57:50] <shka> a little bit like hadoop, but perhaps better suited for stuff outside of data centers 
[17:03:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:07:44] <pl> JVM provides (used to?) a bunch of tools helping in that
[17:08:11] <pl> like JNDI, built in RMI/CORBA with code copying, etc.
[17:12:12] <pl> then you could have code "travel" around the system based on constraints
[17:12:18] <pl> a bit like tightly integrated k8s
[17:12:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[17:12:38] <shka> that's kinda awesome
[17:12:51] <shka> shame about jvm 
[17:13:01] <pl> k8s can't use such deep integration, so you have much coarse grained behaviours
[17:14:29] <pl> shka: it's a bit related to what I wanted to build with personal cloud
[17:15:02] <pl> a system where different parts of your personal computers could advertise bits of services and talk easily, with my system providing a communication substrate and such
[17:16:39] <pl> Telepathy Tunnels is a bit related
[17:16:54] <pl> but it's not like anyone builds on it since OLPC died
[17:17:17] <shka> oh, i remember telepathy
[17:17:51] <pl> tunnels were about dynamically setting up p2p XMPP connections
[17:18:05] <shka> not just xmpp iirc?
[17:18:24] <pl> *tunnels* were XMPP based, on top of a specific XMPP extension
[17:18:34] <shka> ok
[17:18:46] <shka> shame about telepathy 
[17:18:54] <shka> it was interesting framework
[17:18:59] <shka> very useful potentially
[17:26:33] <shka> also, kde telepathy used to be really nice alternative to pidgin
[17:30:35] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:42:59] <shka> https://www.thedailybeast.com/burkina-faso-president-ousted-after-refusing-to-pay-wagner-mercenaries?ref=home
[17:43:00] -ixelp- Burkina Faso President Ousted After Refusing to Pay Wagner Mercenaries
[17:43:05] <shka> Russia's special
[18:28:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:47:28] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[19:10:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:14:10] *** Joins: treflip (~user@user/treflip)
[19:19:10] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[19:27:50] *** Quits: kevingal (~quassel@2001:770:c0:401:857c:20f5:bf8b:7412) (Ping timeout: 250 seconds)
[19:35:59] *** Joins: kevingal (~quassel@149.157.101.196)
[19:43:52] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:46:57] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[20:04:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:21:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:22:54] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[20:24:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:28:27] <gilberth> Hugh? My program runs twice as fast in *inferior-lisp* than in *slime-repl* and I am not doing I/O to the swank stream.
[20:28:33] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[20:32:45] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[20:33:41] <shka> gilberth: maybe something related to slime IO itself
[20:33:50] *** Joins: kevingal (~quassel@2001:770:c0:401:2925:bac0:faad:c07c)
[20:34:21] <gilberth> shka: I am not doing I/O. At least not to SLIME.
[20:34:27] <shka> mmm
[20:34:37] <shka> trying to help but no idea, sorry
[20:35:46] <gilberth> Yes, I am completely puzzled. I mean it's the very same process. I run from *slime-repl* -> slow, I run from *inferior-lisp* -> not so slow.
[20:36:29] <ck_> it's all because you say "Hugh", and no Hugh is in here. Probably.
[20:36:47] <gilberth> One of CCL, Emacs, SLIME, or macos is playing tricks on me. Or I am doing sth silly.
[20:37:22] <ck_> is there some default declaims going on with the slime environment maybe?
[20:37:52] <gilberth> ck_: It's the very same process, the very same function.
[20:38:25] <semz> What does the program do?
[20:39:36] <ck_> looking forward to learning the solution to this mystery soon
[20:39:47] <gilberth> semz: Benchmarking my output records. But actual I/O is disabled. The benchmark does not talk to the outside. Besides it's run time, which is twice as long.
[20:40:34] <gilberth> So I could outrule some odd scheduling.
[20:41:22] *** Joins: jeosol (~jeosol@user/jeosol)
[20:41:43] <gilberth> ck_: I need coffee for that and a break. Perhaps some special variable has a different binding. You never know.
[20:41:58] *** Joins: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[20:42:13] <semz> Mysterious. My only guess would be that I/O is not completely disabled, stuff like that is a great way to blow an hour wondering whether you're going insane
[20:42:16] <ck_> probably, yeah. I was about to ask about the environment
[20:42:23] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:43:03] <ck_> I'm making another round trip to the office because I forgot my keys there.
[20:43:11] <ck_> so, if you need something forgotten, I'm your guy
[20:43:56] * gilberth verifies that it's the same process by saying (setq secret 42) in one repl and reading it in another :-)
[20:44:23] <gilberth> ck_: Bring me a clue, if you find one, please.
[20:45:39] <ck_> when you say "slow" and "not so slow", are you talking about perceived speed or the output of (time ..) ?
[20:46:20] <gilberth> Output of time. But I could use a stop-watch.
[20:47:24] <shka> gilberth: maybe something getting interpreted?
[20:48:22] <gilberth> Why should a function be interpreted depending on the thread it runs from? And besides CCL has no interpreter.
[20:49:04] <gilberth> ck_: My stop watch agrees.
[20:52:42] <ck_> then I suggest attaching a profiler and studying the output
[20:53:27] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[20:54:09] <ck_> bbl
[20:54:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:55:56] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[20:58:15] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Ping timeout: 256 seconds)
[21:00:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:01:34] <gilberth> lol. I narrowed it down to (format stream "~R~%" k), with stream being my CLIM stream which I bench. When I do (write-line "foo" stream) instead run times are the same. However when I say (format (make-broadcast-stream) "~R~%" k) the formally slower process is fast and the formally faster process is slow. I need to check printer control variables.
[21:02:43] <gilberth> lol and sorry. Turn *print-pretty* on to make it fast, turn it off to make it slow. Pretty printing is twice as fast.
[21:03:33] <gilberth> Which actually makes sense.
[21:06:50] <gilberth> And which puzzles me, I have it usually on.
[21:08:14] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[21:08:22] *** Quits: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[21:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:15:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:29:14] <Aurora_v_kosmose> pwnkit, yet another exploit that wouldn't work on CL
[21:29:41] <gilberth> How does it work?
[21:29:51] <Aurora_v_kosmose> gilberth: It relies on out of bounds reads & writes in C arrays.
[21:30:06] <gilberth> How boring.
[21:30:34] <Aurora_v_kosmose> Yup. But I find it interesting how such basic language flaws lead to serious problems when they happen in critical programs like polkit
[21:31:01] <Aurora_v_kosmose> It's almost as if security-critical programs shouldn't be written in dangerous insecure languages.
[21:31:06] <Aurora_v_kosmose> *dangerously
[21:31:29] <sham1> polkit is also needlessly complicated. Who thought it be a good idea to also use javascript as a part of the security framework
[21:31:41] <gilberth> I find integer overflows more interesting, because the savior Rust is vulnerable to that too.
[21:33:09] <gilberth> And what surprised me is the sheer number of security issues libpng has. I mean that image format is trivial, how could you have security flaws in there?
[21:34:59] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:35:14] <Aurora_v_kosmose> Yeah, multimedia libs in generally scare me because they're very often used on completely unverified input from untrusted sources.
[21:35:23] <Aurora_v_kosmose> Such as in browsers.
[21:35:33] <Aurora_v_kosmose> And yet they're implemented without any care in the world.
[21:35:40] <gilberth> Or messagers.
[21:35:57] <Aurora_v_kosmose> Yeah
[21:35:59] <sham1> libpng scares me because of the fact that it uses setjmp and longjmp
[21:36:00] <gilberth> I could text you a PNG.
[21:36:09] <sham1> Makes it very brittle to use
[21:36:32] <gilberth> Not in particular.
[21:37:07] <Aurora_v_kosmose> I'd rather have to wait a second more per image to render than have the possibility of my machines being shelled by some png.
[21:37:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:38:27] <gilberth> Anyhow, this image format is really trivial. So it surprises me even more.
[21:39:32] <sham1> Not trivial enough it turns out, since everyone uses a library
[21:40:06] <Aurora_v_kosmose> When you don't feel like messing with images, anything more complicated than XPM just becomes a chore.
[21:40:15] <gilberth> shma1: When I need a weekend to implement it, it's trivial.
[21:40:52] <sham1> Mayhaps, but it's still weird that browsers and such use an external library for it then
[21:40:57] <gilberth> More scary are bugs in text rendering. Wasn't there once a bug that allowed me to brick your phone by sending you a SMS?
[21:41:20] <Catie> effective. Power
[21:41:55] <gilberth> sham1: Well, PNG I do on my own. IIRC this even predates libpng. As well as GIF. But for jpeg I fork(2) to djpeg. Isn't any slower than using libjpeg.
[21:42:45] <gilberth> And when I fork(2) libjpeg could as well trip over itself, it won't trip over my program.
[21:49:54] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:53:19] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[22:01:53] <gilberth> Aurora_v_kosmose: Actually, I find XPM more complex than PNG.
[22:03:17] <gilberth> As there could be named colors, colours for different visuals, you need to parse C tokens, etc.
[22:05:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:06:19] <Aurora_v_kosmose> gilberth: It's no longer just arrays of plaintext tuples and an optional arary of alpha values?
[22:08:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:08:17] <gilberth> Aurora_v_kosmose: The XPM provides for more options, like e.g. colours for different visuals. And you could have the colour names from /etc/X11/rgb.txt in there. And parsing this subset of C isn't trivial either.
[22:09:02] <gilberth> It's a pain. There should be an xpm reader in McCLIM. But: Who uses XPM anymore?
[22:09:27] <Aurora_v_kosmose> gilberth: It's one of the least annoying ways of displaying images in Tk
[22:09:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[22:09:45] <Aurora_v_kosmose> Because Tk has abysmal image format support
[22:10:22] <sham1> Netpbm needs more love
[22:10:44] * gilberth loves netpbm always did.
[22:11:37] <gilberth> It's trivial to read and there are a gazillion converters, just spawn them on a pipe and be set. No need for FFI.
[22:26:35] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[22:36:05] <ck_> how can *print-pretty* be the problem when no I/O is done?
[22:36:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:39:31] <gilberth> ck_: Because it goes to my CLIM stream. I was testing the stream's performance. But I disabled all actual I/O, that is I didn't send anything to either the display server or to my internal event process. Just building the data structures.
[22:40:19] <ck_> feels like that would've been a useful detail to mention in the beginning
[22:40:25] <ck_> well, glad you figured it out
[22:41:07] <gilberth> Well, my point was that I wasn't talking to anybody else.
[22:41:41] <gilberth> In the sense, that they shouldn't be any scheduling happen of any kind.
[22:42:05] <gilberth> * there
[22:46:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:49:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:50:25] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[23:50:54] <nij-> Anyone interested in formalized mathematics? I remember there's one in common lisp that has been successful for a while..
[23:52:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
