[00:06:47] *** Joins: whynot (~whynot@88.155.19.9)
[00:10:37] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[00:10:37] *** Quits: logioniz (~logioniz@94.190.31.65) (Quit: Leaving)
[00:15:36] <xq> what makes "٦" different from "௰" so that the former matches \d but the latter does not?
[00:17:29] <xq> both seem to have a numeric value
[00:17:51] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[00:17:51] *** Joins: judabuda (kowbunga@user/judabuda)
[00:21:19] *** Joins: Couture (~Couture@pppoe247h3.ppp.kmv.ru)
[00:21:43] *** Couture is now known as Guest2386
[00:21:43] *** Guest2386 is now known as dimbag
[00:24:33] *** Quits: mattil (~mattil@87-92-63-124.bb.dnainternet.fi) (Quit: Leaving)
[00:27:28] <tirnanog> the latter is not in the decimal number category.
[00:29:45] <ilmari> xq: 19:57 < ilmari> \d matches decimal digits, not numbers
[00:29:50] <ilmari> xq: 20:00 < ilmari> specifically catgory => 'Nd', and with a decimal value
[00:30:00] <ilmari> Nd = Number, Decimal Digit
[00:30:22] <ilmari> No = Number, Other
[00:30:48] <ilmari> s/decimal value/digit value/
[00:31:16] <ilmari> it's \d for digit, not \n for number
[00:31:20] <xq> I see
[00:39:59] *** Joins: Adoi (~Adoi@user/adoi)
[01:00:54] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[01:09:40] *** Quits: subie (~subie@2601:4c0:4080:bc0:2563:6d5b:aeb9:18ef) (Ping timeout: 240 seconds)
[01:12:00] *** Joins: subie (~subie@2601:4c0:4080:bc0:2563:6d5b:aeb9:18ef)
[01:13:50] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 268 seconds)
[01:24:09] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[01:24:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:31:38] *** tejr_ is now known as tejr
[01:39:24] <dimbag> hi, does dbix::class has queue when sending request ? or I must use transaction for some requests ?
[01:40:41] <dimbag> by the way I am not going to execute many queries for one request.
[01:41:22] <lopid> it won't use a transaction unless you start one
[01:44:39] <dimbag> lopid, thank you for your info. I have an web API (mojolicious) that updated some files, is it possible to avoid the update in same time ?
[01:45:38] <lopid> that sounds way too vague, and i'm off to bed anyway, sorry
[01:46:06] <dimbag> lopid, ok sorry, have a good rest.
[01:46:15] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[01:47:06] <lopid> https://metacpan.org/dist/DBIx-Class/view/lib/DBIx/Class/Manual/Features.pod#Excellent-Transaction-Support might help
[01:47:06] <Paperbot> Link title(s): [ DBIx::Class::Manual::Features - A boatload of DBIx::Class features with links to respective docum... ]
[01:59:31] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 252 seconds)
[02:03:00] *** Joins: gryphn (~gryphon@143.244.48.4)
[02:11:05] *** Quits: whynot (~whynot@88.155.19.9) (Quit: leaving)
[02:11:53] * GumbyPAN CPAN Upload: Keyword-Declare-0.001018 by DCONWAY https://metacpan.org/release/DCONWAY/Keyword-Declare-0.001018
[02:15:01] *** Joins: anthk_ (~anthk_@92.176.105.30)
[02:15:44] *** Quits: anthk_ (~anthk_@92.176.105.30) (Client Quit)
[02:22:04] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[02:25:06] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[02:25:18] *** Joins: gloin (~gloin@user/gloin)
[02:30:22] *** kobaz_ is now known as Kobaz
[02:40:10] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[02:41:00] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[02:41:19] *** Quits: judabuda (kowbunga@user/judabuda) (Ping timeout: 258 seconds)
[03:15:04] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[03:26:43] *** Joins: norkle (~norkle@admin.nasa-g0v.com)
[03:28:12] *** Joins: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net)
[03:35:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[03:42:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:00:23] *** Joins: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net)
[04:12:12] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[04:14:16] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[04:18:07] <perlbot> Anonymous pasted a new file at https://l.perl.bot/p/g95w4c - dumpvar.pl with Object::Pad support
[04:23:52] *** Joins: YaoNai (~YaoNai@user/yaonai)
[04:27:05] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[04:28:10] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[04:32:58] *** Quits: Darkcoal (~user@130.164.128.242) (Quit: Darkcoal)
[04:35:19] *** Joins: anthk_ (~anthk_@92.176.105.30)
[04:42:03] *** Joins: pj (~pj@ghettoforge/pj)
[04:46:10] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[04:50:13] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[04:50:44] *** Joins: YaoNai (~YaoNai@user/yaonai)
[04:52:14] *** Quits: YaoNai (~YaoNai@user/yaonai) (Client Quit)
[05:09:01] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[05:12:04] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 250 seconds)
[05:17:29] *** Joins: anthk_ (~anthk_@92.176.105.30)
[05:19:05] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 248 seconds)
[05:21:40] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 240 seconds)
[05:27:13] * GumbyPAN CPAN Upload: Time-Zone-Olson-0.39 by DDICK https://metacpan.org/release/DDICK/Time-Zone-Olson-0.39
[05:32:15] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:34:19] *** Quits: gryphn (~gryphon@143.244.48.4) (Quit: kthxbye)
[05:37:05] <mst> I'd forgotten dumpvar existed
[05:37:21] *** Joins: Su-Shee (~Susanne@p4ffc7f8b.dip0.t-ipconnect.de)
[05:38:47] *** Quits: Su-Shee_ (~Susanne@p4ffc7b42.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:47:27] *** Joins: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net)
[05:50:59] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:01:33] <thowe> Am I somehow deficient because I don't see anything in React that I want to do and I prefer to stick with jQuery?
[06:05:28] <mst> thowe: react arguably only gets fun beyond a certain complexity threshold
[06:06:59] <mst> really depends what you're doing though
[06:07:59] <thowe> well, maybe it's because I'm just a web dev tourist...  I come in, trash the joint, and leave until next year.
[06:12:50] <mst> thowe: I really like the newish javascript style of having my state in one place, then a template that renders that state, and some magic that re-renders the template when the state changes
[06:13:13] <Grinnz> ^^
[06:13:20] <Grinnz> manual fuckery with jquery always ended in pain
[06:13:35] <mst> but if you're doing something simple enough that isn't happening
[06:13:38] <Grinnz> i use vue, but it gives you the same capability of just updating data structures and the page fixes itsefl
[06:13:44] <mst> it isn't necessarily bad
[06:14:02] <mst> Grinnz: right, I phrased that to include react and vue and assorted other things deliberately
[06:14:02] <thowe> Maybe I just don't have the patience to learn new things anymore...  I feel like its a gamble..  Time wasted if I don't like it.  I poked at React and I don't feel like I I have a firm grip on the wheel.
[06:14:44] <thowe> yeah, like Vue...  I sunk time into it and couldn't figure out how to make it do what I wanted.
[06:14:53] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:15:20] <thowe> Maybe I should have given it more time...
[06:17:47] <thowe> I'm thinking the answer here may be that I have indeed been deficient.
[06:19:15] <mst> thowe: right, so, here's a thing I did with react+mobx years back: http://hermit1.scsys.co.uk/~matthewt/reactitude
[06:19:45] <mst> this was to give me an overview on our RT data
[06:20:02] <mst> note, this is not an -easy- piece of code
[06:20:11] <mst> it's very definitely "mst writes lisp in javascript'
[06:20:33] *** dyCrazyEd is now known as CrazyEddy
[06:21:02] <mst> but being able to flip the display from "group by developer, sort by queue' to the converse was -really- handy as an overview
[06:21:30] <mst> and way less annoying than trying to cons it up from jquery would've been
[06:22:24] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:23:32] <thowe> I find I stop looking at something when it tells me I need a Node.js environment.
[06:24:09] <mst> thowe: you don't, react and mobx will work fine via unpkg
[06:25:00] <mst> *I* built a node environment for this, because while I was there I also took babel to pieces and became one of the extremely rare javascript developers who has a bable config they hand wrote and understand rather than having copy-pasted from somewhere
[06:27:37] <thowe> Maybe the thing with jQuery is I feel comfortable using it without "becoming a javascript developer"
[06:27:42] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:27:57] <thowe> I hadn't heard of babel before
[06:28:15] <mst> babel is basically a javascript build system thingy
[06:28:21] <mst> think of it as fatpacker with tentacles
[06:28:21] *** Joins: gggp_ (~gggp@li2010-23.members.linode.com)
[06:31:05] <mst> thowe: yeah, if you're working on something that's a web *site* rather than a web *app* then a lot of the newer tools aren't paying as much attention to you as one would like
[06:32:19] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Ping timeout: 252 seconds)
[06:34:30] <thowe> I think I just need to muddle through a bit more and stop being a little shit.  I miss my office.  Not having one is making me hate everything.
[06:35:34] <mst> thowe: also, this approach basically turns a lot of stuff inside out
[06:35:50] <mst> I -like- the result for a lot of stuff but it's quite a paradigm shift
[06:40:30] <thowe> I only pull my current paradigms out of the shed once is a while as it is, shifting them feels like time I don't have, but I'm just complaining about the inevitable, I guess.  I can change, if I have to, I guess...
[06:43:09] <thowe> Did I see you say something about breaking a hip recently?
[06:44:19] <mst> thowe: that was in 2013
[06:44:35] <mst> shit, no, 2012
[06:44:36] <mst> https://shadow.cat/blog/matt-s-trout/things-i-learned-in-hospital/
[06:44:37] <Paperbot> Link title(s): [ Things I Learned In Hospital ]
[06:45:50] <thowe> oh, good.  I mean, that it wasn't recent.
[06:48:03] <mst> thowe: that was the hell year, between my 29th and my 30th birthday my mother died, then I broke my hip, then my father died (two days before my 30th birthday)
[06:52:32] <thowe> when it rains...
[06:53:10] <mst> on the upside, I'd had a problem for a few years before that of my kneecap popping out sideways if I twisted my leg wrong
[06:53:13] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:53:23] <mst> because the first time it happened that detensioned a bunch of ligaments etc.
[06:53:48] <mst> the process of breaking the hip tore enough stuff that as it knitted back together it retensioned everything and my knee's been reliable since
[06:54:06] <mst> I would not -recommend- this as a way to fix that particular problem, but I can't say I'm complaining
[06:55:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:57:19] <thowe> Well, I'm glad to know you do not currently have a broken hip.
[06:58:02] <mst> they put one of these in and it healed fine: https://en.wikipedia.org/wiki/Dynamic_hip_screw
[06:58:03] <Paperbot> Link title(s): [ Dynamic hip screw - Wikipedia ]
[06:58:20] *** Joins: fstd_ (~fstd@xdsl-78-35-86-208.nc.de)
[06:58:37] <thowe> sweet zombie jesus
[07:00:31] <mst> meh, I'm now part titanium, my main view of this fact is "HOW COOL IS THAT"
[07:01:19] <mst> I already had tony stark level sluttery and alcohol consumption, after all
[07:02:13] <thowe> I have titanium bits, but they are...  smaller
[07:02:34] *** Quits: fstd (~fstd@xdsl-78-35-72-109.nc.de) (Ping timeout: 272 seconds)
[07:04:33] <mst> eh, it doesn't set off metal detectors, it's all good
[07:04:37] *** Joins: msk (~msk@49.207.192.153)
[07:15:58] <mst> thowe: the funny part was showing up to a check-in appointment and the junior doctor getting all sorts of paranoid cos I'd gone down to one crutch and was basically charging up staircases at my usual speed by that point
[07:16:20] <mst> "look, dude, your protocol was designed for 70 year olds, I am an outlier, it'll be ok"
[07:23:33] *** Joins: pucara (~i@181.94.142.178)
[07:24:34] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[07:31:13] <thowe> still sounds like a long painful ordeal.
[07:32:44] *** Quits: bmeneg (~bmeneg@2001:1284:f016:c77f:a0a2:51e8:3acb:a2a5) (Remote host closed the connection)
[07:40:06] <thowe> Anyone run OpenSuse?  I'm thinking about trying tumbleweed.
[07:50:21] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[07:53:10] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 240 seconds)
[07:54:27] <mst> thowe: you'd want kraih for that I suspect, given he maintains a bunch of the perl code that tests it :D
[07:56:24] <thowe> interesting
[07:58:26] <mst> thowe: the automated validation development for opensuse changes is built on https://github.com/os-autoinst/openQA/ which is basically a bigass Mojolicious + Minion system
[07:58:27] <Paperbot> Link title(s): [ GitHub - os-autoinst/openQA: openQA web-frontend, scheduler and tools. ]
[07:58:44] <mst> tis very cool
[07:59:01] *** Joins: pj (~pj@ghettoforge/pj)
[08:10:52] *** Joins: Martchus_ (~martchus@dynamic-077-007-059-046.77.7.pool.telefonica.de)
[08:11:22] *** Quits: Martchus (~martchus@2a01:c23:c0f7:7b00:d250:99ff:fe49:3cce) (Ping timeout: 258 seconds)
[08:24:31] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[08:36:37] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:48:14] <voegelas> i recently switched to fedora as tumbleweed wasn't as stable as expected. sometimes package updates aren't coordinated and things break.
[08:54:14] <thowe> well, I think for a desktop I would probably use Leap as going through the upgrade process wouldn't be so bad.  The prospect of doing that on my VM is making me say "meh" and moving back to OpenBSD.
[08:58:42] <voegelas> how can i make sure that a perl distribution isn't tested on windows by cpan testers? is there something that i can add to dist.ini? or the first test file? i've got a distribution that is of no use on windows. i'm fed up of crippling my tests because of windows.
[08:59:59] <Grinnz> voegelas: https://metacpan.org/pod/Dist::Zilla::Plugin::AssertOS
[08:59:59] <Paperbot> Link title(s): [ Dist::Zilla::Plugin::AssertOS - Require that our distribution is running on a particular OS - met... ]
[09:00:32] <shlomif> Grinnz++
[09:00:55] <Grinnz> os = -MSWin32
[09:00:56] <Grinnz> i believe
[09:01:49] <Grinnz> voegelas: also use it with bundle = 0, bundling is stupid
[09:02:08] <Grinnz> it was needed before configure_requires was supported by installers, a decade ago
[09:13:46] <voegelas> thanks a lot
[09:16:56] *** Quits: slopey (~slopey@user/slopey) (Quit: Leaving)
[09:20:02] <ether> that won't just prevent cpantesters from testing on that platform - that will prevent all installations there
[09:24:19] <Grinnz> yeah, if you want to prevent cpantesters you'd have to add a condition to each of your test files
[09:24:37] <Grinnz> or i guess you could add a condition with MakeMaker::Awesome with AUTOMATED_TESTING
[09:25:37] <voegelas> that's what i would like to avoid. i am going to remove or rewrite a test. i check whether external commands can be run and i decided to run "perl -v". one of the testers probably has got a perl.bat in the path that doesn't behave like perl. that could also happen on other systems. the test is too fragile.
[09:26:19] <Grinnz> try $^X instead of perl
[09:26:27] <Grinnz> that's the current interpreter
[09:26:46] <Grinnz> you can't guarantee a user will even have any perl in their path
[09:30:30] *** Quits: randir (~randir@95-25-151-74.broadband.corbina.ru) (Remote host closed the connection)
[09:32:28] *** Joins: gggp__ (~gggp@li2010-23.members.linode.com)
[09:35:40] *** Quits: gggp_ (~gggp@li2010-23.members.linode.com) (Ping timeout: 240 seconds)
[09:40:45] <voegelas> the tests check whether perl is available with can_run and then whether the output of "perl -v" can be captured. i will remove these tests, which will unfortunately lower the coverage rate. $^X is of no use here. in production my distribution won't run perl, but other external commands. it was a mistake to asume that "perl -v" would be available everywhere.
[09:43:13] <Grinnz> well, $^X -v will be available anywhere that can install cpan modules
[09:45:50] <ether> to just skip smokers: in your Makefile.PL  exit 0 if $ENV{AUTOMATED_TESTING};
[09:46:06] <ether> or maybe exit 0 if $ENV{AUTOMATED_TESTING} and $^O eq 'MSWin32';
[09:48:05] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[09:52:08] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:56:40] <voegelas> good idea. there are already tests that take more time and require a network connection and thus are only run when RELEASE_TESTING is set.
[09:57:49] <Grinnz> best practice is to put those in xt/release and let [RunExtraTests] run them during dzil release
[09:58:09] <Grinnz> no reason to ship release tests generally
[10:05:27] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[10:10:41] *** Joins: jplesnik (~jplesnik@83.240.61.208)
[10:11:40] *** Quits: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[10:14:54] <dimbag> Hi, I have a web API (mojolicious) that updated some files, is it possible to avoid the update in same time ?
[10:15:46] <shlomif> dimbag: hi
[10:16:07] <shlomif> dimbag: What do you mean ?
[10:17:27] <voegelas> Grinnz: hm, RELEASETESTING is set as a CI/CD variable on our local GitLab instance. i don't use Dist::Zilla when testing with GitLab and i would like to keep .gitlab-ci.yml simple. At GitLab.com RELEASETESTING is not set.
[10:18:14] <Grinnz> sure, CI is a reason to keep them in t/, though you can also just tell CI to run xt/release and xt/author
[10:19:51] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:20:31] <dimbag> shlomif, for example I have a file 'locations.txt', this file can be update by many users. i want to avoid the update of this file in same time. if user A and B update this file in 12:00:00:00 i do not want to have conflict
[10:24:18] <Grinnz> you can use flock, but it sounds more like you want a database
[10:24:26] <Grinnz> such as sqlite
[10:24:30] <shlomif> dimbag: use flock? file locking
[10:26:53] <dimbag> Grinnz, shlomif Thank you very much, i am going to test it and see
[10:28:06] <shlomif> dimbag: you're welcome ; also see Grinnz 
[10:29:21] <kiwiroy> ology: change the response_type parameter to form_post or query for your azure login
[10:29:56] <dimbag> Yeah, he suggest me to use database, i have already postgres, but sometimes I need to to change Asterisk config via AMI. I do not know 100% if AMI interface has lock file, I should search by my self
[10:30:26] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[10:42:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:51:04] *** Joins: randir (~randir@93.159.239.42)
[10:55:25] <shlomif> dimbag: postgres has transactions
[10:55:37] <shlomif> perlbot: ACID
[10:55:37] <perlbot> shlomif: No factoid found. Did you mean one of these: [ac] [ack] [.ag] [.aq] [.as] [as] [.az] [agi] [ahs] [apt]
[10:55:42] <Grinnz> just keep in mind flock only locks it from other processes that also use flock
[11:01:50] *** Joins: horsepatat (~horsepata@80.89.76.138)
[11:04:24] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:11:56] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:12:29] *** Joins: mattil (~mattil@airio.portalify.com)
[11:16:56] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 268 seconds)
[11:17:37] *** Joins: csrf (~csrf@user/csrf)
[11:19:52] <ology> kiwiroy: Yes. That was the answer long ago.
[11:21:17] *** Quits: fstd_ (~fstd@xdsl-78-35-86-208.nc.de) (Remote host closed the connection)
[11:21:28] *** Joins: fstd (~fstd@xdsl-78-35-86-208.nc.de)
[11:22:26] <kiwiroy> ology: sorry missed that. I’ve got a branch and draft PR on Mojolicious::Plugin::OAuth2 for openid connect if that’s how you’re azure logging in.
[11:27:24] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:31:52] * GumbyPAN CPAN Upload: CPANPLUS-Dist-Debora-0.003 by VOEGELAS https://metacpan.org/release/VOEGELAS/CPANPLUS-Dist-Debora-0.003
[11:37:32] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[11:37:32] *** Joins: judabuda (kowbunga@user/judabuda)
[11:37:33] *** Joins: mattil_ (~mattil@217.30.185.41)
[11:40:40] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 240 seconds)
[11:41:02] *** Joins: art1 (~romeyke@p200300ccdf059700fdb1d28c11a872bc.dip0.t-ipconnect.de)
[11:43:45] *** Quits: mattil_ (~mattil@217.30.185.41) (Remote host closed the connection)
[11:44:17] *** Joins: mattil (~mattil@airio.portalify.com)
[12:05:39] *** Joins: zakame (~zakame@user/zakame)
[12:05:40] *** Quits: amnesiac (~marco@2601:646:4104:29b0:4ed8:a7f1:23ef:9524) (Ping timeout: 240 seconds)
[12:16:57] * GumbyPAN CPAN Upload: Time-Zone-Olson-0.40 by DDICK https://metacpan.org/release/DDICK/Time-Zone-Olson-0.40
[12:25:32] <shlomif> Grinnz++
[12:26:42] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 250 seconds)
[12:27:22] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:31:42] <dimbag> do you suggest `'james' == $name` of `$name == 'james'` ? (I know there are same)
[12:34:11] *** Joins: Pali (~pali@user/pali)
[12:36:59] * GumbyPAN welcomes RICHARDSW - Richard S. Westmoreland to CPAN!
[12:38:04] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:40:37] <pj> dimbag: I prefer the second just because it reads better to me.
[12:40:45] <pj> but they are indeed the same.
[12:42:00] * GumbyPAN welcomes SSMN - Christian Segundo to CPAN!
[12:42:00] * GumbyPAN welcomes CLEMON - Combustible Lemon to CPAN!
[12:45:13] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 252 seconds)
[12:47:11] *** Joins: zakame (~zakame@user/zakame)
[12:50:14] *** Joins: nuclightq_ (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru)
[12:50:31] *** Quits: zakame (~zakame@user/zakame) (Client Quit)
[12:51:26] *** Quits: pizdets (~pizdets@183.182.111.5) (Quit: pizdets)
[12:51:34] *** Joins: fstd_ (~fstd@xdsl-87-78-42-230.nc.de)
[12:51:40] *** Quits: fstd (~fstd@xdsl-78-35-86-208.nc.de) (Ping timeout: 240 seconds)
[12:52:07] *** Joins: pizdets (~pizdets@183.182.111.5)
[12:52:10] *** Quits: nuclightq (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru) (Ping timeout: 272 seconds)
[13:14:34] *** Joins: txtsd (~txtsd@user/txtsd)
[13:21:23] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[13:23:59] <shlomif> pj: dimbag : s/==/eq/g
[13:24:21] <dimbag> shlomif, Thank you.
[13:24:47] <shlomif> dimbag: you're welcome 
[13:24:54] <shlomif> perlbot: eq
[13:24:54] <perlbot> shlomif: No factoid found. Did you mean one of these: [e] [ed] [ee] [ac] [as] [bc] [dj] [hs] [ic] [ik]
[13:25:04] <shlomif> perlbot: cmp
[13:25:04] <perlbot> shlomif: No factoid found. Did you mean one of these: [.cm] [cms] [.cn] [cnn] [bnf] [env] [inf] [smb] [unf] [chimp]
[13:25:26] <lopid> prefer the latter but years ago i heard that the former was slightly faster if you were into microoptimising
[13:26:02] <lopid> whichever rolls off the tongue is usually better
[13:27:00] <xq> $var == 0 is easier to read
[13:28:12] <xq> However 0 == $var is resistant to this typo: `if ($var = 0)`. Some people dislike this form though.
[13:28:33] <shlomif> dimbag: https://perldoc.pl/perlop#Relational-Operators
[13:28:34] <Paperbot> Link title(s): [ perlop - Perl operators and precedence - Perldoc Browser ]
[13:32:29] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:33:16] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[14:00:04] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[14:19:01] <LeoNerd> I was working on the code that implements number comparison literally yesterday, and I can't imagine any reason why it would be asymmetric
[14:19:05] <LeoNerd> The code itself is perfectly symmetric
[14:22:14] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:23:29] <shlomif> LeoNerd: software gremlins
[14:24:03] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:24:13] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[14:26:23] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[14:30:47] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:32:15] *** Joins: BAD (~mad@user/god)
[14:32:34] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:32:40] *** Quits: vague (~vague@irssi/staff/vague) (Read error: Connection reset by peer)
[14:32:55] *** Joins: vague (~vague@irssi/staff/vague)
[14:33:19] *** Joins: csrf (~csrf@user/csrf)
[14:34:20] *** BAD is now known as GOD
[14:38:05] <pj> gah, I've been dabbling in other languages too much when I don't recognize that one.
[14:45:58] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[14:49:24] *** Joins: furrymcgee (~devuan@31.179.186.66)
[14:49:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:51:14] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:52:23] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[14:57:55] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[15:09:11] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:10:31] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:11:22] *** Quits: norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[15:22:52] <simcop2387> LeoNerd: could be stupid cache locality tricks.  Those things are nightmares to optimize for/against.
[15:23:30] <simcop2387> I.e. one ordering generally helps the prefetcher on intel cpus (but doesn't matter on others)
[15:28:06] *** Joins: anthk_ (~anthk_@92.176.105.30)
[15:28:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[15:37:48] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:53:42] *** Quits: anthk_ (~anthk_@92.176.105.30) (Quit: nyaa~)
[15:55:52] <shlomif> pj: comparison is a hard problem. self-referencing data can make cpython3 throw an exception on 'x == y'
[16:04:41] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:05:35] *** Quits: pucara (~i@181.94.142.178) (Quit: Lost terminal)
[16:06:30] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:07:07] *** Joins: mattil (~mattil@airio.portalify.com)
[16:10:30] *** Quits: pizdets (~pizdets@183.182.111.5) (Ping timeout: 245 seconds)
[16:11:25] *** Joins: pizdets (~pizdets@183.182.114.103)
[16:18:45] <Altreus> hm I've got a script that finds tests based on changed modules so I can do prove $(the-script), but if it finds no tests it just runs everything
[16:18:53] <Altreus> should I error on no output? :/
[16:20:16] *** Quits: pizdets (~pizdets@183.182.114.103) (Ping timeout: 252 seconds)
[16:20:42] *** Joins: pizdets_ (~pizdets@183.182.114.198)
[16:22:00] <LeoNerd> /dev/null ?
[16:24:47] <lopid> check for the-script before running prove?
[16:26:22] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:29:40] *** Quits: pizdets_ (~pizdets@183.182.114.198) (Ping timeout: 245 seconds)
[16:30:10] *** Joins: pizdets (~pizdets@183.182.110.111)
[16:33:07] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[16:33:18] *** Joins: mattil (~mattil@airio.portalify.com)
[16:33:37] <shlomif> LeoNerd: /dev/null is webscale. it does sharding
[16:36:01] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200E0A21FD72306E05B.catv.pool.telekom.hu)
[16:37:08] *** Joins: Su-Shee_ (~Susanne@p4ff49846.dip0.t-ipconnect.de)
[16:38:33] *** Quits: Su-Shee (~Susanne@p4ffc7f8b.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[16:39:38] *** Quits: GOD (~mad@user/god) (Ping timeout: 252 seconds)
[16:44:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[16:46:04] *** Joins: BAD (~mad@102.89.2.14)
[16:46:04] *** Quits: BAD (~mad@102.89.2.14) (Client Quit)
[16:53:10] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net) (Quit: meow)
[16:54:31] <Altreus> I don't understand these answers
[16:54:47] <Altreus> if the script finds no tests it outputs nothing and so prove just runs everything in t
[16:54:50] <Altreus> instead of no things
[16:55:04] <LeoNerd> Yes. output "/dev/null"
[16:55:04] <Altreus> but I feel like "no tests" is not an error condition
[16:55:10] <Altreus> oh
[16:55:11] <LeoNerd> Then prove will run just /dev/null, which is an empty file
[16:55:28] <Altreus> Cannot detect source of '/dev/null'! at /usr/local/lib/perl5/site_perl/5.14.2/TAP/Parser/IteratorFactory.pm line 261.
[16:55:28] <ilmari> bCannot detect source of '/dev/null'! at /home/ilmari/perl5/perlbrew/perls/34.0/lib/5.34.0/TAP/Parser/IteratorFactory.pm line 256.
[16:55:29] <LeoNerd> Oh.. though it gets upset about empty files. Hrm
[16:55:34] <Altreus> welp
[16:55:50] <Altreus> at least that hasn't changed in 20 (10) versions
[16:55:50] <ilmari> yes, because it can't figure out what type of file it is, and how to run it
[16:56:34] <Altreus> an error doesn't prevent it anyway
[16:56:37] <Altreus> as in
[16:56:47] <Altreus> prove $(false) still runs t
[16:56:54] <haarg> the correct thing to do will be to not run prove
[16:57:24] <Altreus> Yeah, which breaks the unixy part of separate tools
[16:57:34] <Altreus> this script's only job is to find relevant tests
[16:57:46] <Altreus> whose job should it be to decide whether to run prove? :/
[16:57:47] <haarg> prove does not offer a way to run nothing
[16:58:03] <Altreus> the /dev/null error at least causes it to run nothing
[16:58:23] <Altreus> maybe I should output -
[16:58:36] <ilmari> that tries to run stdin
[16:58:55] *** Quits: jplesnik (~jplesnik@83.240.61.208) (Quit: Leaving)
[16:58:57] <Altreus> yeah, confuses the operator but doesn't do the *wrong* thing
[16:58:58] <ilmari> s/run/read the tests to run/
[16:59:00] <Altreus> you know, like grep
[16:59:02] <ilmari> but it hangs
[17:00:07] <Altreus> oh I like this --shuffle option, apropos of nothing
[17:02:01] <Altreus> I've used /dev/null and added a comment
[17:02:12] <Altreus> can get away with anything as long as you explain yourself
[17:03:10] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200E0A21FD72306E05B.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[17:03:10] *** Quits: horsepatat (~horsepata@80.89.76.138) (Ping timeout: 250 seconds)
[17:04:01] <haarg> prove -e echo '1..0 # SKIP no tests'
[17:06:00] <Altreus> Even if I can convince prove $(script) to interpret that correctly, it breaks script | prove -
[17:06:20] <Altreus> which is really a stand-in for script > file, and later cat file | prove
[17:06:23] <Altreus> -
[17:07:23] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[17:07:48] *** Joins: mattil (~mattil@airio.portalify.com)
[17:10:09] *** Joins: _73`` (~user@pool-96-252-123-136.bstnma.fios.verizon.net)
[17:11:40] *** Quits: _73` (~user@pool-96-252-123-136.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[17:11:50] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[17:12:12] <haarg> [ -s file ] && cat file | prove -
[17:12:27] <haarg> the real answer is still to not run prove
[17:13:59] *** Parts: jabberwok (~wlindley@75.105.20.104) ()
[17:14:26] *** Quits: _73`` (~user@pool-96-252-123-136.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[17:22:22] *** Joins: slu (uid501941@id-501941.brockwell.irccloud.com)
[17:24:28] *** Parts: art1 (~romeyke@p200300ccdf059700fdb1d28c11a872bc.dip0.t-ipconnect.de) ()
[17:25:13] *** Joins: bmeneg (~bmeneg@2001:1284:f016:c77f:a0a2:51e8:3acb:a2a5)
[17:37:48] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:38:16] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[17:38:45] *** Joins: mattil (~mattil@airio.portalify.com)
[17:38:54] *** Joins: _quadDamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[17:39:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[17:39:53] <Altreus> Indeed, but unfortunately that requires a certain amount of either awkwardness or clairvoyance
[17:41:37] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[17:41:53] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:42:05] <shlomif> Altreus: you can have a bash/zsh/etc. prove(){...} wrapper function
[17:42:42] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:43:20] *** Joins: mattil (~mattil@airio.portalify.com)
[17:47:42] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:49:04] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[17:52:34] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 250 seconds)
[17:54:22] <Altreus> yikes
[17:54:32] <Altreus> or I could output a filename that causes it to explode :P
[17:56:45] <shlomif> Altreus: i've done similar things. e.g: a reboot func when i use 'reboot' instead of 'rebuild'
[18:03:16] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:03:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[18:08:34] <Altreus> yeah but then everyone has to have it, and change the way they use prove just so they can occasionally use this script
[18:08:55] <Altreus> mind you, a wrapper that just refuses to run prove with no input would be fine
[18:15:03] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:15:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[18:17:31] <Altreus> but I can't work out how to do that
[18:20:29] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 258 seconds)
[18:22:39] *** Joins: mattil (~mattil@217.30.185.41)
[18:25:38] <haarg> [ "$#" == 0 ] && return 0
[18:27:25] *** Quits: mattil (~mattil@217.30.185.41) (Remote host closed the connection)
[18:29:18] <Altreus> Then you don't support flags
[18:31:17] <haarg> you've started by insisting you can't use the correct solution
[18:31:53] <Altreus> No, I've said I can't work out how to write it
[18:32:44] <Altreus> "It" being a function that behaves like prove, except does not run prove if no files are provided
[18:33:17] <haarg> you're going to have to reimplement prove's argument parsing
[18:33:33] <Altreus> That was my conclusion too
[18:34:12] <Altreus> This sounds like a much worse problem than simply not using the correct solution
[18:34:18] <Altreus> The cure is worse than the disease
[18:36:11] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:42:21] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:59:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:02:54] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[19:04:40] <gordonfish> Instead of [ "$#" == 0 ] && return 0, you could just loop through the args and see if there are any non-option args, and if so, run prove, and then return.
[19:06:46] *** Joins: randir (~randir@95-25-151-74.broadband.corbina.ru)
[19:15:45] *** Joins: gast0n (~g4570n@user/gast0n)
[19:24:57] <ology> kiwiroy: Can I peek at your Mojolicious::Plugin::OAuth2 branch? :)
[19:28:06] <ology> Aha https://github.com/kiwiroy/Mojolicious-Plugin-OAuth2
[19:28:08] <Paperbot> Link title(s): [ GitHub - kiwiroy/Mojolicious-Plugin-OAuth2: OAuth support for Mojolicious ]
[19:29:31] <ology> I mean https://github.com/kiwiroy/Mojolicious-Plugin-OAuth2/tree/openid-connect
[19:29:32] <Paperbot> Link title(s): [ GitHub - kiwiroy/Mojolicious-Plugin-OAuth2 at openid-connect ]
[19:33:48] <haarg> gordonfish: that doesn't work for options that take arguments
[19:37:51] *** Joins: thrig (~thrig@65.113.153.50)
[19:42:26] *** Joins: gryphn (~gryphon@143.244.48.4)
[19:46:37] <gordonfish> haarg: Hmm, good point. In that case, I'd use Class::Method::Modifiers around on App::Prove::process_args, and see if $self->{argv}->@* has any elements. If it doesn't, abort the script. Else fire off the prove script / $app->run line from prove script
[19:53:06] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[19:54:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[19:55:04] *** Joins: EvanCarroll (~ecarroll@151.250.218.197)
[19:55:09] <EvanCarroll> IT IS I, EVAN
[19:55:23] <EvanCarroll> IN ISTANBUL
[19:55:42] <tirnanog> lord of the internetz
[19:55:47] <LeoNerd> NOT CONSTANTINOPLE?
[19:56:24] <gryphn> That's nobody's business but the Turks.
[19:56:26] <EvanCarroll> FOR YOU, YES.
[19:56:44] <thrig> turks haven't been the same since they mechanized
[19:56:45] <EvanCarroll> gryphn: even old new york was new ambersterdamnster
[19:56:52] *** Quits: Bodger1234_ (sid503511@id-503511.highgate.irccloud.com) (Ping timeout: 256 seconds)
[19:57:10] *** Quits: rjbs (sid498898@2001:67c:2f08:1::7:9cd2) (Read error: Connection reset by peer)
[19:57:32] *** Quits: leont (sid489095@id-489095.highgate.irccloud.com) (Read error: Connection reset by peer)
[19:57:35] <gryphn> EvanCarroll: People just liked it better that way. Or so I've heard.
[19:58:00] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[20:01:20] *** Joins: Adoi (~Adoi@user/adoi)
[20:01:23] *** Joins: rjbs (sid498898@id-498898.highgate.irccloud.com)
[20:01:28] *** Joins: amnesiac (~marco@2601:646:4104:29b0:322e:932e:1dfd:d17d)
[20:01:37] *** Joins: leont (sid489095@id-489095.highgate.irccloud.com)
[20:03:16] *** Joins: Bodger1234_ (sid503511@highgate.irccloud.com)
[20:03:27] <thrig> let's see how much trouble I can get in with use Syntax::Keyword::Match qw[match :experimental(dispatch
[20:04:40] <LeoNerd> You probably want to suffix `)]` onto that ;)
[20:06:07] <gryphn> AI will fix it.
[20:06:27] *** Joins: Pixi (~Pixi@user/pixi)
[20:06:44] <thrig> coropilot, indeed
[20:07:09] <ilmari> copropilot
[20:07:30] <thrig> is there a lite version of that?
[20:07:42] <ilmari> that would be hard
[20:08:44] <thrig> I guess as long as you get enough minerals in your diet
[20:10:20] <EvanCarroll> rust be so pain pain pain pain pain JOYYYYYY
[20:11:11] <thrig> it's still uninstalled. have they fixed the compile times yet?
[20:11:55] <EvanCarroll> no, but that is like 0% of the problems with the lanuage.
[20:12:34] <thrig> funny way to round 100%
[20:14:03] <shlomif> EvanCarroll: HEYVAN! ;)
[20:14:42] <EvanCarroll> HALLO
[20:14:53] <shlomif> EvanCarroll: sup?
[20:16:01] <EvanCarroll> thrig: it has incremental compilation, compiling and linking my async/tokio server client project on my i7 laptop which is ~15k SLOC takes about 2 min from scratch, and FAR less than that to rebuild from cache
[20:16:52] <EvanCarroll> so I wouldn't compile in CGI, but it's not really a problem. Let's say 10 times slower than C...
[20:16:56] <EvanCarroll> Does that actually matter.
[20:17:32] <thrig> yes. SBCL compiles very quickly to wacky error messages. Rust compiled very slowly to wacky error messages. Rust got uninstalled.
[20:17:52] <EvanCarroll> k
[20:18:16] *** Joins: jess (~jess@libera/staff/jess)
[20:18:40] <EvanCarroll> The error messages on a rebuild from cache are so fast it takes <5 seconds from save, and usually less than 1 second.
[20:18:47] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[20:19:14] <EvanCarroll> Finished dev [unoptimized + debuginfo] target(s) in 0.58s
[20:19:16] <EvanCarroll> 0.58 seconds.
[20:22:10] *** Joins: morte_ (~user@190.104.116.134)
[20:22:48] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[20:26:53] *** Joins: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[20:27:57] *** Quits: Pixi (~Pixi@user/pixi) (Read error: Connection reset by peer)
[20:28:02] *** Joins: mattil (~mattil@87-92-48-40.bb.dnainternet.fi)
[20:28:23] *** Joins: Pixi (~Pixi@user/pixi)
[20:32:28] *** Quits: mattil (~mattil@87-92-48-40.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[20:38:38] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[20:42:26] *** Quits: slu (uid501941@id-501941.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[20:43:40] *** Quits: subie (~subie@2601:4c0:4080:bc0:2563:6d5b:aeb9:18ef) (Ping timeout: 240 seconds)
[20:44:15] *** Joins: laidback_01 (~laidback_@206.214.234.14)
[21:04:05] *** Joins: subie (~subie@2601:4c0:4080:bc0:901a:b44a:ae2b:ee45)
[21:04:41] *** Quits: k-man (~jason@user/k-man) (Ping timeout: 248 seconds)
[21:15:02] *** Joins: magla (~gelignite@55d4beb4.access.ecotel.net)
[21:19:42] *** Quits: gggp__ (~gggp@li2010-23.members.linode.com) (Ping timeout: 250 seconds)
[21:24:11] *** Joins: k-man (~jason@user/k-man)
[21:34:19] *** Joins: gggp__ (~gggp@li1772-101.members.linode.com)
[21:36:13] *** Joins: dwxreaper (~quinn@192.155.91.76)
[21:36:34] *** Joins: YaoNai (~YaoNai@user/yaonai)
[21:39:04] *** Quits: bmeneg (~bmeneg@2001:1284:f016:c77f:a0a2:51e8:3acb:a2a5) (Remote host closed the connection)
[21:42:46] <gordonfish> Altreus, haarg:
[21:42:49] <gordonfish> basheval: prove() { perl -MApp::Prove -e '$app=App::Prove->new; $app->process_args(@ARGV); die "No files" unless $app->{argv}->@* || grep { /^show/ && $app->{$_} } keys %$app; exit($app->run ? 0 : 1)' -- "$@"; };
[21:42:50] <perlbot> gordonfish: No output.
[21:42:58] <gordonfish> oops
[21:43:01] <gordonfish> basheval: prove() { perl -MApp::Prove -e '$app=App::Prove->new; $app->process_args(@ARGV); die "No files" unless $app->{argv}->@* || grep { /^show/ && $app->{$_} } keys %$app; exit($app->run ? 0 : 1)' -- "$@"; }; prove
[21:43:03] <perlbot> gordonfish: No files at -e line 1.␤[Exited 2]
[21:44:29] <gordonfish> Basically you want to replicate /usr/bin/prove, with that check added before the $app->run line.
[21:45:15] <gordonfish> basheval: prove() { perl -MApp::Prove -e 'BEGIN { pop @INC if $INC[-1] eq "." } $app=App::Prove->new; $app->process_args(@ARGV); die "No files" unless $app->{argv}->@* || grep { /^show/ && $app->{$_} } keys %$app; exit($app->run ? 0 : 1)' -- "$@"; }; prove
[21:45:17] <perlbot> gordonfish: No files at -e line 1.␤[Exited 2]
[21:49:48] *** Quits: smitop (~smitop@user/smitop) (Quit: Ping timeout (120 seconds))
[21:49:54] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Quit: Leaving)
[21:50:34] *** Joins: smitop (~smitop@user/smitop)
[21:50:56] <gordonfish> Another way is to use Class::Method::Modifiers, e.g., after App::Prove::process_args => sub { # do check here # } and then require the prove script.
[21:53:20] *** Quits: gggp__ (~gggp@li1772-101.members.linode.com) (Ping timeout: 268 seconds)
[21:55:05] *** Joins: proller (~p@2a02:6b8:0:40c:eeca:b13c:930:7733)
[22:00:52] *** Quits: proller (~p@2a02:6b8:0:40c:eeca:b13c:930:7733) (Ping timeout: 250 seconds)
[22:12:06] *** Joins: proller (~p@2a02:6b8:0:40c:5140:9e7a:c7db:860f)
[22:15:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 250 seconds)
[22:17:52] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[22:24:42] <Altreus> why did I not consider that prove was written in terms of a module!
[22:30:24] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:31:35] *** Joins: ugjka (~ugjka@ugjka.net)
[22:43:02] <ology> So I am back to "mojo-ifying" the LWP bits of this Azure AD auth code and am puzzling over changing POST(LOGIN_URL, Content => [ %$query_data ]) into $c->ua->post(LOGIN_URL, form => $query_data) but getting "Bad Request" - Any ideas?
[22:44:04] <ology> The HTTP::Request::Common docs about POST anf Content might say but I'm not understanding something maybe.
[22:44:16] <ology> *and
[22:44:46] <ilmari> does the body of the error response not contain any detials?
[22:45:03] <ology> Just Bad Request.
[22:45:18] <ology> Let me see if I am missing the details somehow...
[22:45:29] <thrig> can you log the outgoing stuff somewhere before it gets encrypterated
[22:45:38] <gordonfish> basheval: prove() { perl -MClass::Method::Modifiers=after -MApp::Prove -e 'after q{App::Prove::process_args} => sub { die "No files" unless $_[0]->{argv}->@* || grep { /^show/ && $_[0]->{$_} } keys $_[0]->%* }; require q{/usr/bin/prove};' -- "$@"; }; prove
[22:45:42] <perlbot> gordonfish: No files at -e line 1.␤Compilation failed in require at -e line 1.␤[Exited 2]
[22:45:44] <gordonfish> Altreus, haarg: ^
[22:46:53] *** Joins: logioniz (~logioniz@94.190.31.65)
[22:48:35] <gordonfish> basheval: prove() { perl -MClass::Method::Modifiers=after -MApp::Prove -e 'after q{App::Prove::process_args} => sub { warn "No files\n" and exit(255) unless $_[0]->{argv}->@* || grep { /^show/ && $_[0]->{$_} } keys $_[0]->%* }; require q{/usr/bin/prove};' -- "$@"; }; prove
[22:48:37] <perlbot> gordonfish: No files␤[Exited 255]
[22:48:38] <ology> ilmari: Aha yes. I forgot to just dump the result and sure enough, the content key has things about invalid_grant, etc. Thanks again!
[22:49:24] <gordonfish> I rather like this method as you don't need to duplicate the prove script which could potentially change with later versions.
[22:49:33] <ilmari> ology: yes, that's what I meant. content = body
[22:50:02] <gordonfish> (Could also do it with before q{App::Prove::run} too.)
[22:50:10] *** Quits: subie (~subie@2601:4c0:4080:bc0:901a:b44a:ae2b:ee45) (Ping timeout: 240 seconds)
[22:50:44] <ology> ilmari: yep :)
[22:50:52] <gordonfish> basheval: prove() { perl -MClass::Method::Modifiers=before -MApp::Prove -e 'before q{App::Prove::run} => sub { warn "No files\n" and exit(255) unless $_[0]->{argv}->@* || grep { /^show/ && $_[0]->{$_} } keys $_[0]->%* }; require q{/usr/bin/prove};' -- "$@"; }; prove
[22:50:53] <perlbot> gordonfish: No files␤[Exited 255]
[22:51:01] <gordonfish> basheval: prove() { perl -MClass::Method::Modifiers=before -MApp::Prove -e 'before q{App::Prove::run} => sub { warn "No files\n" and exit(255) unless $_[0]->{argv}->@* || grep { /^show/ && $_[0]->{$_} } keys $_[0]->%* }; require q{/usr/bin/prove};' -- "$@"; }; prove -V
[22:51:02] <perlbot> gordonfish: TAP::Harness v3.43 and Perl v5.35.3␤
[22:51:38] <ology> ilmari++ btw too
[22:52:36] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:52:51] *** Joins: subie (~subie@2601:4c0:4080:bc0:901a:b44a:ae2b:ee45)
[22:53:47] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:57:22] *** Quits: EvanCarroll (~ecarroll@151.250.218.197) (Ping timeout: 252 seconds)
[22:57:34] <Altreus> gordonfish: what's in the /^show/ keys?
[22:58:51] *** Joins: humky (~humky@user/humky)
[23:09:07] <genio> I won't put mst's vaguecat in $work Slack. I won't put mst's vaguecat in $work Slack.  I won't ... fuck it.
[23:12:07] *** Joins: akaWolf (~akaWolf@akawolf.org)
[23:14:50] <mst> genio++
[23:15:19] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[23:16:26] <mst> genio: in email threads at shadowcat, if somebody replies to a customer referring to their comment as a 'valued contribution', every SC staffer on cc knows exactly what they meant
[23:17:10] *** Joins: humky (~humky@user/humky)
[23:18:15] *** Quits: sverzel (~sverzel@2001:9b1:26fc:8d10:41bd:aae1:bcb7:16d) (Remote host closed the connection)
[23:18:23] <gordonfish> Altreus: It's so help/man/version works, otherwise it'd die due to the lack of files.
[23:18:49] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 252 seconds)
[23:20:49] <Altreus> ah gotcha
[23:21:04] <Altreus> wrapping a function definitely requires you to understand what it's going to have in it!
[23:22:43] <mst> ology: MOJO_USERAGENT_DEBUG may be your friend.
[23:24:42] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[23:25:21] <mst> Altreus: clearly you need to call your wrapper 'reprove'
[23:28:49] <gordonfish> basheval: prove() { perl -MClass::Method::Modifiers=before -MApp::Prove -e '$0=q{prove}; before q{App::Prove::run} => sub { warn "No files\n" and exit(255) unless $_[0]->{argv}->@* || grep { /^show/ && $_[0]->{$_} } keys $_[0]->%* }; require q{/usr/bin/prove};' -- "$@"; }; prove -h | head -1
[23:28:50] <perlbot> gordonfish: Usage:␤
[23:28:57] <Altreus> mst: the consequences for failure would have to be more severe
[23:29:20] <gordonfish> $0=q{prove}; needed so Pod::Usage::pod2usage doesn't have a cow because $0 is -e
[23:29:52] *** Joins: khosruw (~khosruw@45.137.151.75)
[23:30:03] <khosruw> hey guys
[23:30:15] <gordonfish> Altreus, haarg: ^
[23:30:29] <gordonfish> khosruw: Hello
[23:30:32] <khosruw> it's been a long while i wasn't here
[23:30:44] <Altreus> well you're home now, that's what counts
[23:31:08] <khosruw> and I know its so important for you
[23:31:12] <khosruw> so i'm here
[23:31:21] <khosruw> don't say anything and enjoy
[23:31:34] <khosruw> WTH is MOJO.JS?!
[23:31:35] <mst> Altreus: oh, also, if you're trying to build something complicated, why not use yath?
[23:31:45] <mst> khosruw: it's a port of the mojo stack to javascript, obviously
[23:32:27] <Altreus> mst: wth is that
[23:32:37] <Altreus> faint tinklings are tinkling
[23:32:53] <Altreus> probably something you mentioned years ago and I went, oh yeah good idea, and then didn't
[23:32:55] <khosruw> mst i know, but the original dev is bringing one of the best/best web framework of perl to js
[23:32:59] <mst> Altreus: it's the prove equivalent for Test2::Harness
[23:33:06] <mst> khosruw: you asked 'WTH'
[23:33:27] <khosruw> mst sorry, I should say WTF
[23:33:45] <Altreus> mst: oh, because I'm on 5.14 and Test2 is in some nebulous and optimistic future
[23:33:53] <mst> khosruw: I mean, do bear in mind that I'm substantially his fault
[23:34:45] <Altreus> oh, that same 5.14 means that gordonfish's prove wrapper doesn't work without modification
[23:34:51] * mst showed up to irc.perl.org #catalyst, somehow got his first patch submitted before actually writing any code that *used* the thing, and then somehow ended up running the project infrastructure ... and the IRC network
[23:34:55] <khosruw> first of all, I saw this: https://twitter.com/mojolicious_org/status/1426263140824752131 and I thought to myself: Does Perl have async/await?!
[23:34:56] <Paperbot> Mojolicious (@mojolicious_org) 7d ago: The Mojolicious 9.21 release brings support for top-level await (await without an async function). So you can now use promises without any `->then()` calls at all. https://github.com/mojolicious/mojo/compare/v9.20...v9.21#diff-bbd4b6a86bc65b6ac8e79e97afc61499158edb40f7bb404c70637b46d80a7ad2R2
[23:35:05] <khosruw> then saw the Mojo.JS :|
[23:35:08] <djerius> this? https://code.google.com/archive/p/mojo-js/
[23:35:09] <Paperbot> Link title(s): [ Google Code Archive - Long-term storage for Google Code Project Hosting. ]
[23:35:17] <mst> Altreus: what leads you to believe cpan doesn't work on 5.14 ?
[23:35:17] <khosruw> djerius yup
[23:35:45] <khosruw> it's a big mistake 
[23:35:46] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:35:55] <Altreus> mst: oh cpan works fine¹, but there's no point fixing a problem just for me when everyone uses the script
[23:35:58] <khosruw> and it's also bad for perl community
[23:36:07] <Altreus> ¹ except I installed Too Much into my local lib and broke the whole system
[23:36:07] *** Quits: jfoutaise (~jef@aputeaux-653-1-208-212.w92-132.abo.wanadoo.fr) (Read error: Connection reset by peer)
[23:36:26] <mst> khosruw: perl has had async/await for years.
[23:36:44] <djerius> is there a current repo?
[23:36:46] <khosruw> mst jesus, could you give me some docs to read it?
[23:37:13] <mst> khosruw: p3rl.org/Future::AsyncAwait - works perfectly with both IO::Async and Mojo and has done for ages
[23:37:19] *** Joins: diskin (~diskin@31.23.179.220)
[23:37:30] <djerius> nothing on Google Code is recent.  It got killed like all other Google projects.
[23:37:33] <mst> khosruw: Mojo::Base even has a -async_await option to integrate it officially
[23:37:38] <khosruw> mst and should I use it?
[23:37:49] <khosruw> in JS, yes we must use it
[23:37:58] <Grinnz> if you're on a new enough perl, and like the paradigm it allows, sure
[23:38:00] <mst> no, you'd don't have to in either language
[23:38:05] <mst> it's just generally a stupid idea not to
[23:38:13] <Grinnz> but you can keep using promises if you want
[23:38:46] <Altreus> gordonfish: works well after tweaks :)
[23:38:52] <djerius> i always get in trouble when I promise things, so I've stopped doing that.
[23:39:02] <mst> djerius: https://github.com/mojolicious/
[23:39:03] <Paperbot> Link title(s): [ Mojolicious · GitHub ]
[23:39:03] <Altreus> it's ok, you can .break them
[23:39:14] <mst> djerius: both mojo and mojo-js live there
[23:39:41] <djerius> mst: thanks.  never trust google to google
[23:39:47] <khosruw> so using promises and async/await s in perl is a stupid idea?
[23:39:51] <mst> khosruw: IO::Async::Loop was all promise based while the JS fools were still using callbacks, it just took me a few years to get kraih on board with doing it in mojo
[23:39:55] <Grinnz> khosruw: ?????
[23:40:09] <mst> khosruw: no, using mojo and *not* using async/await is a stupid idea.
[23:40:11] <Grinnz> khosruw: you need to throw away your jump-to-conclusions mat
[23:40:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[23:40:45] <mst> khosruw: when I said "it's a stupid idea not to", the word "not" actually did meaningfully affect the sentence :P
[23:41:02] <khosruw> mst yea, I'm a little confused!
[23:41:03] <Grinnz> promises and async/await are both mechanisms that prevent the callback hell problem to varying degrees
[23:41:05] <khosruw> sorry!
[23:41:20] <Grinnz> async/await lets you write nonblocking code in the middle of blocking code, nothing else (sanely) does that
[23:41:30] <Grinnz> that's the unique capability there
[23:41:32] <mst> khosruw: what I'm saying is
[23:41:48] <mst> khosruw: (1) "in JS, yes we must use it" was completely wrong
[23:42:08] <mst> khosruw: (2) using promises is good. using promises without async/await is possible. using promises with async/await is better.
[23:42:10] <Grinnz> a fully nonblocking program works perfectly fine with just promises, as long as you like writing ->then
[23:42:35] <khosruw> mst I got what you're saying
[23:42:58] <khosruw> Grinnz true :like
[23:43:09] <mst> khosruw: I figured it was worth being explicit after the amount of confusion :D
[23:43:58] <mst> Altreus: I mean, I don't see what's wrong with upgrading prove, but you do you
[23:44:58] <khosruw> https://metacpan.org/pod/Future::AsyncAwait
[23:44:58] <Paperbot> Link title(s): [ Future::AsyncAwait - deferred subroutine syntax for futures - metacpan.org ]
[23:45:03] <khosruw> wow, it's so cool
[23:45:17] <khosruw> even better than JS'!
[23:46:18] <khosruw> so how can I implement it with Mojo?
[23:46:57] <ether> async stuff is one place where tutorials are *really* helpful.. it's quite confusing
[23:47:15] <mst> most of my mojo files these days do:
[23:47:16] <mst> use Mojo::Base -base, -signatures, -async_await;
[23:47:30] *** Joins: bmeneg (~bmeneg@2001:1284:f016:c77f:a0a2:51e8:3acb:a2a5)
[23:48:29] <khosruw> i've seen lynda.com's one and it was a shid
[23:48:31] <khosruw> *shit
[23:51:44] <Altreus> mst: cos I want a solution that will work for everyone who uses the script, and I can't upgrade prove for everyone
[23:52:01] <khosruw> well, I figured out how to use async/awaits in perl, it's just like how we use it in JS
[23:52:37] <mst> Altreus: right, ok
[23:52:53] <mst> khosruw: well, yeah, everybody stole it from C# where it first appeared so it works basically the same way in every language
[23:53:15] <khosruw> mst I missed you!
[23:53:24] <khosruw> you're the man of perl!
[23:54:15] *** Quits: Manderson (~manderson@047-028-019-189.res.spectrum.com) (Read error: Connection reset by peer)
[23:55:41] <logioniz> Hello. Since you are discussing here about async/await, so I want to ask a question: Future::AsyncAwait is stackfull or stackless implementation? 
[23:56:11] <logioniz> What is pitfalls?
[23:56:13] <mst> logioniz: single frame
[23:56:19] <kraih> very soon people will hate async/await, because they will see an await every other line and have forgotten about how shitty code looked with callbacks
[23:56:35] <mst> kraih: making things better will do that
[23:57:08] <Altreus> the implication is that all code is fundamentally shit
[23:57:11] <mst> kraih: it was always funny noticing the arc of people getting more and more visibly annoyed about the things DBIx::Class *couldn't* do because they'd got so used to the things it *could* that they were taking that for granted
[23:57:13] <Altreus> I agree
[23:57:21] <xenu> come to think of it, why isn't "async" an sub attribute?
[23:57:23] <kraih> and then we'll see attempts to add new language features that make promise handling with await implicit somehow :)
[23:57:29] <khosruw> kraih better methods are welcomed
[23:57:53] <mst> xenu: because "lol attributes"
[23:58:21] <mst> xenu: you're welcome to try and implement it if you think leonerd was wrong to declare it impossible after a bunch of attempts :D
[23:58:26] <logioniz> mst: is not clear for me... what is "frame"?
[23:58:50] <kraih> using the same syntax for async/await as everyone else was the right call for UX
[23:59:06] <mst> logioniz: uh. you were talking about stacks. are you not aware of what a stack frame is?
[23:59:47] <mst> kraih: I'm experimenting with that in my xcl thing, though I've got a long way to go before I have an attempt anybody would want to play with
