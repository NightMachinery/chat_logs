[00:09:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[00:10:27] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:19:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:19:48] <White_Flame> you might not need it as a macro either :-P
[00:28:00] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:28:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:29:42] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[00:30:21] *** Joins: morganw (~user@80.225.24.132)
[00:30:57] <dbotton> it is actually not technically a macro and the quasiquote to  accessed  various attributes to be inserted in the code generated.
[00:31:26] <dbotton> https://www.irccloud.com/pastebin/LbmsIE1i/
[00:31:57] <dbotton> that is a control-info record
[00:32:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:33:48] <dbotton> Not sure why I was thinking to output text using a quasiquote - but mostly worked
[00:34:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:34:10] <dbotton> thanks all, that worked for me
[00:35:10] *** Joins: IPmonger (~IPmonger@172.58.203.86)
[00:35:24] *** Quits: IPmonger (~IPmonger@172.58.203.86) (Remote host closed the connection)
[00:45:02] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[00:45:26] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[00:46:21] *** Joins: Odin- (~odin@cybernetic.anarchism.is)
[00:48:22] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[00:53:40] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:54:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:57:45] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:11a4:6cdd:1796:d5ed) (Quit: Konversation terminated!)
[00:58:02] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:77ff:49ec:2b9c:10c4)
[00:59:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[01:10:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:10:46] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:20:44] <phoe> qhong: you are using sb-c:: stuff
[01:20:53] <phoe> that's deeply internal stuff you know
[01:21:39] *** Joins: blacked (~blacked@user/blacked)
[01:23:58] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:27:31] <phoe> also this isn't about macroexpanding, this is about supporting (CLTL2:DECLARATION-INFORMATION 'TYPE ENV) which is not mandatory
[01:28:37] <phoe> also, "(let ((x 1)) (declare (type fixnum x)) (vars-of-type fixnum))
[01:28:42] <phoe> (oops)
[01:28:53] <phoe> "sb-cltl2:macroexpand-all doesn't produce identical result as what real eval does" - what does "real eval" do?
[01:31:21] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:35:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:36:18] *** Joins: akoana (~ah@user/akoana)
[01:37:36] *** Joins: Brucio-61 (~Brucio-15@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:49:09] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[02:04:04] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[02:07:20] <moon-child> deeply internal?  It seems just normally internal to me
[02:07:58] <phoe> moon-child: (subseq (documentation (find-package :sb-c) 't) 0 7)
[02:20:51] *** Parts: blacked (~blacked@user/blacked) ()
[02:23:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:25:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[02:25:29] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:25:32] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[02:25:49] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:26:53] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:1d8d:6d27:28bf:5b00) (Remote host closed the connection)
[02:29:38] *** Joins: pillton (~user@203.220.145.101)
[02:31:36] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 272 seconds)
[02:38:06] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[02:52:43] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[02:54:18] <NotThatRPG> Say, random question: has anyone taken McCLIM and made a Unix (Linux and/or Mac OS) shell with a forms interface to commands?
[02:55:02] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 272 seconds)
[03:13:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:13:17] *** Quits: pve (~pve@37-136-233-147.rev.dnainternet.fi) (Quit: leaving)
[03:15:43] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[03:16:55] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:19:20] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:37:08] *** Joins: Guest7482 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:42:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:42:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:43:43] *** Quits: VincentVega (~user@212.97.4.209) (Ping timeout: 250 seconds)
[03:47:24] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[03:54:36] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 240 seconds)
[04:01:14] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:08:29] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:10:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:11:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:11:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Remote host closed the connection)
[04:12:10] *** Joins: mayuresh (~kathe@49.32.220.193)
[04:12:36] <mayuresh> good morning everyone. :)
[04:13:37] <mayuresh> i had asked this on the 'hug' mailing list, didn't get an appropriate response.
[04:14:13] <mayuresh> so asking here; is there any way to provide 'gnu' "readline" like functionlity using portable "common lisp"?
[04:15:22] <mayuresh> NotThatRPG: what do you mean by a "forms interface" to commands?
[04:19:46] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[04:20:17] <NotThatRPG> In CLIM, one can have widgets that pop up to prompt for the arguments to a command. Given the alphabet soup of arguments to shell programs, it would be great to have something like that.
[04:21:27] <NotThatRPG> One could take the information that is in bash completion to begin to populate such an interface.
[04:21:36] <Xach> mayuresh: no.
[04:21:58] <Xach> mayuresh: terminal interaction at that level is not specified in common lisp.
[04:22:43] <NotThatRPG> I guess one could use CLIM, which is sorta portable, but at the cost of giving you a whole new terminal!
[04:23:04] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 272 seconds)
[04:23:20] <NotThatRPG> And CLIM requires a bunch of extensions that are outside of ANSI CL.
[04:23:27] <mayuresh> Xach: Thanks! :)
[04:23:36] <random-nick> yeah, it's portable vs standard CL
[04:24:01] <_death> I remember https://github.com/jasom/clinenoise though I've not tried it
[04:24:07] <mayuresh> NotThatRPG: That sounds very much like what A/UX did with their "Commando" tool.
[04:25:16] <jasom> _death: it should work for any sufficiently VT-220 like terminal; the history feature isn't super well tested though
[04:25:53] <NotThatRPG> _death: I don't really know what clinenoise is because it's got no readme...
[04:26:16] <NotThatRPG> oh, I see -- it's in response to the readline question, not mine
[04:27:17] <jasom> NotThatRPG: what do you mean no readme, it's totally got one that says "This is the stub README.txt for the "clinenoise" project."
[04:28:04] <NotThatRPG> jasom: Fair.
[04:28:06] <NotThatRPG> !
[04:28:21] <NotThatRPG> Then I read the asd file
[04:28:49] <NotThatRPG> I was hoping someone would say "oh, yeah, I've been working on a McCLIM terminal," but  alas...
[04:29:35] <NotThatRPG> (Time for dinner, snow shoveling, and dog walking.  Goodnight!)
[04:29:41] *** NotThatRPG is now known as NotThatRPG_away
[04:30:21] <jasom> mayuresh: If https://github.com/jasom/clinenoise does what you want or is total garbage, let me know either way :)
[04:30:59] <_death> here mcclim often clears out stuff when it accepts in the interactor pane and I hover over it, so kinda hard to use
[04:31:07] * jasom wrote it about a decade ago when he couldn't find anything decent, so just wholesale transcribed a simple C library to CL
[04:32:38] <mayuresh> jasom: would you be okay with receiving an email from me regarding clinenoise?
[04:33:03] <jasom> mayuresh: sure
[04:33:13] <mayuresh> jasom: great.
[04:39:48] <mayuresh> jasom: check your email. the geocities.com one.
[04:47:06] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[04:47:46] <Guest7482> geocities?Â  Isn't there a blackhole there now?
[04:53:40] <mayuresh> Guest7482: jasom only has a geocities address mentioned?
[04:53:53] <mayuresh> I meant, mentioned.
[04:54:38] <mayuresh> off-topic: has anyone else here seen phoe's Common Lisp related artwork?
[04:55:02] <mayuresh> off-topic: it's enchantingly alluring. :)
[04:55:14] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[04:55:31] *** Joins: eugercek (~user@user/eugercek)
[04:57:14] <mayuresh> off-topic: https://twitter.com/phoekaligrafuje/status/1482707127231733766
[04:57:28] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[04:57:44] *** Joins: eugercek (~user@user/eugercek)
[04:59:29] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[05:07:24] *** Joins: Bike (~Bike@71.69.170.70)
[05:31:00] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[05:34:57] *** Joins: beach` (~user@2a01:cb19:150:3400:ecb4:332c:1f4a:5c3b)
[05:39:03] *** Quits: beach (~user@2a01:cb19:150:3400:8e1d:10b7:9cda:4c33) (Ping timeout: 252 seconds)
[05:41:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:42:14] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:44:08] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 272 seconds)
[05:50:57] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[05:51:59] *** Joins: derelict (derelict@user/derelict)
[06:05:54] *** Quits: mayuresh (~kathe@49.32.220.193) (Quit: Leaving)
[06:08:29] *** Joins: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397)
[06:09:25] <parjanya> good evening! what am I missing for this not to work? (let ((filling '(:hr))) (spinneret:with-html-string filling))
[06:13:22] *** Joins: mayuresh (~mayuresh@49.32.220.193)
[06:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:18:09] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:25:59] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[06:26:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:26:45] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[06:30:22] *** Joins: pjb (~pjb@user/pjb)
[06:30:32] *** Quits: mayuresh (~mayuresh@49.32.220.193) (Quit: mayuresh)
[06:32:39] *** Joins: mayuresh (~kathe@49.32.220.193)
[06:36:27] <mayuresh> parjanya: hello. :)
[06:37:18] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[06:37:53] <parjanya> namo namaH : o )
[06:40:06] <mayuresh> namovah. :)
[06:40:21] *** Joins: notzmv (~zmv@user/notzmv)
[06:49:22] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[06:49:25] *** Joins: Bike (~Bike@71.69.170.70)
[06:56:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:58:23] <mayuresh> I'm unable to figure out how to accomplish the instruction mentioned below;
[06:58:25] <mayuresh> Make sure the top-level directory can be found by ASDF.
[06:59:55] <mayuresh> beach: are you around here at the moment?
[07:00:24] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[07:02:58] <White_Flame> mayuresh: if you're using quicklisp, you can symlink from ~/quicklisp/local-projects/ to your project _directory_ and it'll pick it up through ASDF
[07:03:08] *** Joins: zachel (~zachel@user/zachel)
[07:03:25] <White_Flame> the oldskool way is (push #p"path/to/my.asd" *asdf:central-registry*)
[07:04:10] <White_Flame> the oldskool way is (push #p"path/to/my/project/" asdf:*central-registry*)
[07:04:42] <mayuresh> White_Flame: thanks.
[07:06:18] <mayuresh> White_Flame: should I be placing a symlink to my project directory within ~/quicklis/local-projects/ ?
[07:06:29] <White_Flame> yes, if you have quicklisp installed
[07:06:53] <White_Flame> and if you don't have QL installed, then you should install QL instead of doing it oldskool ;)
[07:07:14] <mayuresh> White_Flame: cool. thanks again. got it this time. :)
[07:07:29] <White_Flame> cool
[07:08:23] <mayuresh> White_Flame: I did as you'd instructed.
[07:08:43] <mayuresh> I'm following the "Quick start" section at https://github.com/robert-strandh/Second-Climacs
[07:08:43] <qhong> phoe: The third return value from sb-cltl2:variable-information also has missing type declaration. type declaration is one of the standard declaration specified in cltl2 environment
[07:09:48] <mayuresh> White_Flame: I reached step 4 and did it, but SBCL threw-up an error stating; "Package ASDF does not exist."
[07:11:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:11:19] <mayuresh> I googled but couldn't find a proper answer, or rather one I could understand.
[07:11:29] <mayuresh> How do I install ASDF?
[07:11:34] <mayuresh> I'm running SBCL.
[07:11:39] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:11:41] <qhong> phoe: inside a real eval, sb-cltl2:variable-information correctly return all available type declaration. Inside a sb-cltl2:macroexpand-all, this is not the case
[07:11:44] <mayuresh> And, have installed Quicklisp.
[07:12:08] <mayuresh> Is "beach" here at the moment?
[07:12:40] <mayuresh> beach: can you provide facility within "Second-Climacs" to be used at a terminal?
[07:14:06] <parjanya> mayuresh: how are you running it? how did you install it? if memory serves sbcl already ships with asdf, so you should be doing something quite heterodox to have that error
[07:14:40] <mayuresh> parjanya: as I'd mentioned, following; https://github.com/robert-strandh/Second-Climacs
[07:14:53] <mayuresh> the "Quick start" section there-in.
[07:15:22] <mayuresh> the 3rd step instructs to ensure the top-level directory can be found by ASDF.
[07:15:30] <parjanya> mayuresh: that doesnât tell me how you installed sbcl
[07:15:54] <mayuresh> parjanya: I installed SBCL via Ubunut's package manager "apt".
[07:16:18] <mayuresh> sudo apt install sbcl sbcl-source sbcl-doc
[07:17:09] <mayuresh> It is SBCL 2.0.1.debian
[07:17:17] <parjanya> mayuresh: right. and if you open any terminal and eval (find-package :asdf) ... what does it tell?
[07:17:40] <mayuresh> NIL
[07:17:56] <mayuresh> Does that mean ASDF isn't already installed?
[07:19:18] <etimmons> ASDF is not loaded automatically by SBCL. evaluate (require "asdf") first to load the version of ASDF that ships with SBCL.
[07:19:37] <parjanya> mayuresh: yes, it is. and if you eval (require :asdf), what does (find-package
[07:19:37] <parjanya>     :asdf) say?
[07:20:38] <mayuresh> Okay, after following etimmons and parjanya, it says "#<PACKAGE "ASDF/INTERFACE">"
[07:21:10] <parjanya> aha, so it was just this that was missing, you should add the (require :asdf) to your ~/.sbclrc
[07:22:17] <mayuresh> Roger that. Got it going. Even automatically on starting up SBCL.
[07:22:27] <mayuresh> Thanks parjanya and etimmons. :)
[07:23:15] <parjanya> etimmons: oops, I didnât see your message, sorry
[07:23:42] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[07:25:25] <mayuresh> Okay, now there's new error while following instruction 4 of "Quick start" at https://github.com/robert-strandh/Second-Climacs
[07:25:43] <mayuresh> Component :SECOND-CLIMACS-CLIM not found
[07:26:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:26:54] <parjanya> mayuresh: have you opened sbcl after cloning the repository? if not, try (asdf:compute-source-registry) to force asdf to find the packages again
[07:27:01] <mayuresh> That's what I get when I'm compiling the editor system by doing (asdf:load-system :second-climacs-clim)
[07:27:19] <parjanya> if it doesnât work you might have chosen a directory that asdf canât find
[07:27:45] *** beach` is now known as beach
[07:29:32] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[07:29:46] <mayuresh> Okay, I tried (asdf:compute-source-registry) and it says "debugger invoked on a TYPE-ERROR in thread ...".
[07:29:53] *** Joins: jeosol (~jeosol@user/jeosol)
[07:30:13] <beach> Good morning everyone!
[07:30:21] <mayuresh> beach: good morning. :)
[07:30:24] <parjanya> beach: morning!
[07:30:56] <mayuresh> beach: can you mould "second-climacs" to be usable without "clim"?
[07:31:24] <mayuresh> ofcourse, that would mean it can't be called "climacs". :)
[07:31:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:31:59] <beach> I made an attempt to make Second Climacs independent of the underlying GUI library.  Not sure how well I succeeded.
[07:32:24] <mayuresh> beach: can you make it "not use" a "GUI library"?
[07:32:33] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:32:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:33:05] <mayuresh> beach: are you still working on "Second-Climacs"?
[07:33:23] <beach> Slow down...
[07:33:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:34:03] <mayuresh> beach: okay. I'm gonna try again some months from now. :)
[07:34:04] <beach> I am still technically working on Second Climacs, but it is stalled because of my work on SICL.  scymtym has done some work, but we are both very busy.
[07:34:40] <mayuresh> okay.
[07:34:52] <beach> mayuresh: I am not interested in making Second Climacs an Emacs clone.  I want it to be an excellent editor for editing Common Lisp code.
[07:35:14] <beach> I think that requires a GUI library, and CLIM is a very good candidate.
[07:35:27] <mayuresh> beach: what led you to think I'm requesting that you make "Second-Climacs" an Emacs clone?
[07:35:38] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Quit: Leaving)
[07:35:45] <mayuresh> beach: Ah, okay, because I requested a GUI-less version!
[07:35:46] <beach> The fact that you want a terminal and not use a GUI library.
[07:36:29] <beach> A terminal is not the business of the editor, but it is for Emacs, because Unix can't really create a consistent set of tools with internal communication the way CLIM can with Common Lisp.
[07:36:29] *** Quits: Bike (~Bike@71.69.170.70) (Remote host closed the connection)
[07:36:47] <mayuresh> beach: getting it now.
[07:37:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[07:37:30] *** Joins: Bike (~Bike@71.69.170.70)
[07:37:32] <mayuresh> beach: can you and your collaborators try to get it to a running condition at least?
[07:37:33] <beach> So I see Second Climacs as a component of an IDE, probably around McCLIM.  A Unix terminal could be one component of such an IDE.
[07:38:17] * moon-child sincerely hopes no one spends energy on Yet Another Vt Implementation(tm)
[07:38:19] <mayuresh> beach: I failed for almost 3 days prior to requesting help with getting second-climacs to work at my system.
[07:38:48] <Guest7482> moonchild: are there any in lisp?
[07:39:16] <moon-child> not that I know of, but I stand by my statement
[07:39:20] <mayuresh> thanks to etimmons and parjanya, I got somewhat close, though not succeded yet.
[07:39:34] <beach> mayuresh: It really isn't usable at the moment.  And I am not working like that.  I still don't know how to compute correct indentation, so that's the main priority.  If you understand that my idea for Second Climacs is to be a Common Lisp editor, you will see that there is no point in working on other aspects until I have figured out indentation.
[07:41:02] *** Quits: frgo (~frgo@p548a3783.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:41:14] <mayuresh> beach: for indentation and paren balancing mechanism, consider employing https://shaunlebron.github.io/parinfer/
[07:41:36] <beach> I don't think you understand.
[07:41:45] <mayuresh> beach: okay. I'm all ears.
[07:41:48] <beach> Rather, I think you don't understand.
[07:42:49] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[07:43:04] <mayuresh> I understand that you want to have a Common Lisp focused/only editor component which would eventually be used by someone else to integrate with out McCLIM components to develop a Common Lisp IDE, right?
[07:43:11] <beach> Second Climacs is meant to be excellent for Common Lisp editing because it uses Eclector (which is a Common Lisp READer) to parse the buffer contents.  If I thought it would be enough to use existing techniques based on text, I would never have started the project.
[07:43:36] <parjanya> mayuresh: might I say respectfully, if you are having problems with asdf, you have more urgent problems than thinking about adjusting complex IDEs
[07:43:56] <mayuresh> parjanya: I agree wholeheartedly. :)
[07:44:54] <mayuresh> parjanya: just that I've already developed IDEs (PalmPilot development) before, but using C++ with Microsoft's Foundation Classes. :)
[07:45:11] <mayuresh> And yes, I don't know "anything" about Common Lisp. :)
[07:45:27] <mayuresh> I have only worked with AutoLISP.
[07:45:58] <mayuresh> And I got introduced to CS using Logo (thoroughly) which is a Lisp (though a lot of people tend to disagree).
[07:47:32] <beach> Not again!
[07:47:50] <parjanya> mayuresh: have you read Practical Common Lisp?
[07:48:18] <mayuresh> beach: I was just pulling your Dosa. :p
[07:48:21] <Guest7482> beach: if you tried to make it gui agnostic, do you have some sort of format for rich text that other gui environments could parse?
[07:48:55] <mayuresh> parjanya: Not yet. I'm working through Touretzky.
[07:51:36] <beach> Guest7482: What purpose would the rich text serve?  Again, the idea is to create something that is unbeatable for editing Common Lisp.  For that purpose, it takes Common Lisp source code and gives it to Eclector (which again is a Common Lisp READer).  It then transforms the text into some nested data structure.  Where would rich text fit in?
[07:51:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:52:44] <mayuresh> beach: I think Guest7482 is approaching it from the Microsoft environment side, where most code editors are actually "rich-text editors".
[07:53:11] <beach> I am sorry to hear that.
[07:53:51] <mayuresh> beach: both of my IDEs (for PalmPilot and Baan Tools development) extended the rich-text editor component provided with Microsoft's Foundation Classes included with Visual C++.
[07:55:31] <Guest7482> I don't know about microsoft.Â  I wondering about things like bold/italic/fonts etc.. Or if those are coupled directly with what's returned from eclector.
[07:56:08] <mayuresh> Guest7482: presentation is a different layer altogether. Isn't it?
[07:56:37] <Guest7482> it'd be a gui layer.
[07:57:05] <mayuresh> Guest7482: beach's work is "below" the GUI layer.
[07:57:49] <mayuresh> Guest7482: you could extend McCLIM to provide your visual elements as needed.
[07:57:54] <Guest7482> sigh, nevermind
[07:58:22] <Guest7482> In the future, please don't speak for others.
[07:58:34] <beach> I am not making myself clear here.  Font size, color, family etc. would be supplied by the module that analyzes the Common Lisp code, and these characteristics would be based on the role of the elements of the Common Lisp code, such as whether it is a lexical variable, a function name, a package name, etc.  But the result will then no longer be text, and instead consist of a tree of standard objects.
[07:58:51] <mayuresh> Guest7482: Sure, just tried to help you out of a ditch.
[07:59:27] <beach> mayuresh: CLIM already contains everything that is needed in terms of fonts.
[08:00:17] <mayuresh> beach: yes, I know. By extend, I meant, do whatever Guest7482 expects from "their" instance.
[08:00:50] <Guest7482> I obviously would not be using clim.Â  Please don't try to help.
[08:00:57] <mayuresh> I refered to Guest7482 as "their" because I don't know if you are he, she, or it.
[08:01:28] *** Parts: moon-child (~moon-chil@cardinal.elronnd.net) ()
[08:02:18] <beach> Guest7482: Why would you "obviously" not use CLIM?  I may have missed some context.
[08:02:35] <mayuresh> beach: I'm as confused about all this as you are.
[08:02:39] *** Joins: semz_ (~semz@user/semz)
[08:02:53] <mfiano> This conversation is hard to follow. I'm missing a lot of context. All I know is I admire beach's patience.
[08:03:27] <mayuresh> mfiano: I agree with you on this wholeheartedly. Along with beach's devotion to helping others see the light.
[08:03:46] <beach> mfiano: Thanks.  I am hanging in there only in order to correct any misconceptions about what I want for Second Climacs.
[08:04:54] <mfiano> Also, good morning.
[08:04:56] *** Quits: semz (~semz@user/semz) (Ping timeout: 245 seconds)
[08:07:02] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:07:42] <Guest7482> beach: if I were to use clim then I'd just use what you guys have written.Â  Anyways I can work with trees of objects just fine.
[08:08:22] <beach> OK.
[08:08:23] <Guest7482> it would have been less confusing without maya interpreting what everybody has said.
[08:08:59] <mayuresh> Guest7482: it would have been interesting if you'd been smarter to express yourself more sensibly.
[08:09:13] <beach> Chill out please.
[08:26:48] <parjanya> what am I missing for this not to work? (let ((filling '(:hr))) (spinneret:with-html-string filling))
[08:33:30] *** Quits: mayuresh (~kathe@49.32.220.193) (Quit: Leaving)
[08:40:51] <Josh_2> Good morning
[08:42:46] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:43:00] <masinter> what did I miss?
[08:43:28] <beach> masinter: How long have you been gone? :)
[08:43:53] <masinter> 30 years
[08:43:56] <beach> masinter: Can I assume you know about the channel logs?
[08:43:59] <beach> Heh.
[08:44:19] <masinter> I used to know more about common lisp than most people
[08:44:29] <beach> I am sure that's true.
[08:47:06] <masinter> i stopped following around '92. Now I can't make sense of most of the conversations here
[08:47:10] <White_Flame> I wonder if there are more people who know common lisp now than 30 years ago
[08:48:12] <beach> masinter: Feel free to ask questions if you want to brush up on your Common Lisp knowledge.
[08:49:17] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[08:52:43] <masinter> 30 years ago there were maybe 20 people in X3J13
[09:25:28] <Guest7482> Larry if it makes you feel any better I couldn't make sense of most of your works either :)
[09:25:34] <Guest7482> seriously though, nice work.
[09:29:22] <masinter> 30 years ago IRC was in doddardhood. Now I need to dust off irc client
[09:31:41] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:32:27] <masinter> i'm missing the protocol for discovering identities behind the idents
[09:32:35] *** Joins: Oladon (~olad@98.43.81.226)
[09:32:47] <masinter> nicknames
[09:33:45] <lisp123> i dont think there is any
[09:33:52] <Guest7482> 30 years ago learning irc was on my todo list.Â  Just started using it last year, so sorry can't help.
[09:33:56] <lisp123> its anonymous unless people are willing to share their info
[09:34:10] <masinter> Dotardhood
[09:34:11] <lisp123> Guest7482 - any relation to Guest74?
[09:34:34] <White_Flame> the servers also tend to mask IP addresses, depending on if/how you're registered
[09:34:46] <masinter> even lambdamoo was more advanced
[09:34:54] <Guest7482> lisp123: same relation you have to lisp123_
[09:35:14] <masinter> in W3C people used their real names
[09:35:36] <lisp123> Guest7482: Ah, got it :)
[09:36:50] <masinter> i lived in emacs then, so i used erc
[09:37:23] *** Quits: opcode (~opcode@user/opcode) (Quit: hopefully not k:lined)
[09:37:34] <Guest7482> I'm not even sure if things like whois and finger even exist anymore.
[09:38:02] <masinter> telnet isn't a thing any more
[09:38:17] <beach> masinter: ERC is still fine.
[09:38:38] <Guest7482> I think there's actually still quite a few bbs that transitioned to telnet.
[09:38:44] <White_Flame> masinter: oh it is, there are telnet BBSes, and it's still a debug facility for textual protocols :)
[09:40:03] <White_Flame> gopher even has had a bit of a resurgence, as people reject the corporatastic manipulation of the web
[09:40:25] <masinter> medley runs ssh when you (chat 'hostname) except (chat 'il:shell)
[09:40:40] <Guest7482> masinter: are you involved in the interlisp/medley resurgence?Â  I have to admit I haven't paid much attention.
[09:41:00] <Guest7482> ah, i guess that sort of answers that.
[09:42:23] <masinter> i hadn't thought about interlisp for 30 years either
[09:44:31] <Guest7482> is this a case of thinking you'll take a bit of time to help develop some tools that would make your work easier and finding out 3 decades have passed?
[09:45:51] <masinter> i'm interested in long-term archiving actually
[09:46:30] <masinter> how do you archive software for the long term
[09:47:26] <masinter> so a revival -- make it live again
[09:47:56] <Guest7482> does that not presuppose that the software of today will be of use to the problems of the future?
[09:49:23] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[09:49:53] <beach> Guest7482: Already, it would be an improvement to use software of yesterday for problems of today.  At least when it comes to things like operating systems.
[09:49:58] <masinter> https://smalltalkzoo.thechm.org/
[09:50:20] <Guest7482> though I think an unchanging standard such as common lisp at least provides a foundation for such endeavours.
[09:50:58] <masinter> SEDIT is written in mainly common lisp
[09:51:01] <Guest7482> beach: though it seems the younger generation has different problems that past does not seem to hold relevance to.
[09:52:01] <beach> Guest7482: There is some of that, sure.  But the younger generation must still struggle with the horrible interface that Unix imposed on us.
[09:52:49] <masinter> well,  think of this as "open data" for CS Research
[09:53:37] <Guest7482> masinter: I think i read the sedit code before and it was a bit 'archaic' for lack of a better word.
[09:54:29] <Guest7482> beach: i think that's why they have legions of code monkeys.Â  And there seems to be a terrible feedback loop between what the new generation wants and what programmers provide as an interface.
[09:55:00] <masinter> there's an export package for reformatting code so that it looks more like common lisp
[09:55:13] <beach> Guest7482: Sounds right.
[09:59:12] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:14:04] *** Joins: wacki (~wacki@87.122.91.154)
[10:16:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:17:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:18:46] <masinter> https://web.archive.org/web/20101130212753/http://top2bottom.net/venue_pricing.html
[10:20:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[10:23:03] *** Joins: shka (~herr@109.231.3.55)
[10:23:19] <Guest7482> archiving is easy. You just have to deal with the standard problems of the media surviving, having something to read it, and something to run it.
[10:23:58] <Guest7482> Making software alive, is another story.Â  How to build a community?Â  be the first to provide a solution to a problem?
[10:25:01] <masinter> We're working on lowering the cost of entry
[10:25:55] <masinter> https://online.interlisp.org
[10:26:37] <masinter> nothing to install
[10:27:11] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:27:43] <Guest7482> but will you get users by providing a web interface behind a registration?
[10:28:10] <Guest7482> more importantly, will you get maintainers and developers?
[10:29:23] <masinter> you dono't have to register -- it's if you want to keep runing later without losing state
[10:30:17] <masinter> there should be a guest login
[10:31:57] <Guest7482> yes, for someone to really use it they have to register.
[10:32:27] <masinter> or install it on their machine
[10:33:00] <Guest7482> When I read the manual, it seemed like a lot of things might be tied to it just being a 1bit display.Â  Is there plans to change that.
[10:33:22] *** Joins: sander (~sander@user/sander)
[10:33:32] <Guest7482> it's like black and white movies.Â  How many of the younger generation have the patience for that?
[10:34:47] <masinter> think vintage
[10:35:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:35:25] <masinter> vinyl records but digital amps
[10:36:29] <masinter> '57 Buick
[10:38:47] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:39:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:44:20] <jackdaniel> huh, I've dug from this longish backlog - last page or so is an offtopic ;)
[10:44:31] <jackdaniel> s/from/through/
[10:45:54] *** Joins: igemnace (~ian@user/igemnace)
[10:46:11] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:54:24] *** Joins: hashfunc170a (~user@162.254.115.155)
[10:55:38] <hashfunc170a> how can i splice a list without quasiquote?
[10:55:43] <hashfunc170a> e.g., ... ((1 2 3) (4 5 6)) => (1 2 3) (4 5 6)
[10:57:20] <jackdaniel> these are two values, do you mean to produce multiple values from a list?
[10:57:41] <beach> (apply #"values list)
[10:57:46] <jackdaniel> (values-list '((1 2 3) (4 5 6))) but I'm 80% you don't want that
[10:58:06] <jackdaniel> 80% convinced
[11:01:05] <beach> hashfunc170a: I think you are approaching Common Lisp in a strange way.  You are trying to write fairly sophisticated macros using the backquote facility, but you seem to be lacking in some basic understanding of the semantics of the language.
[11:01:20] <hashfunc170a> beach: ... (apply #'values list) ... works but doesn't work in my macro? is there a caveat to splicing lists within macros?
[11:02:01] <beach> hashfunc170a: Macros are no different from ordinary functions.  What works in an ordinary function works in a macro function as well.
[11:02:49] <beach> hashfunc170a: You can't have two separate objects like that in Common Lisp.  They are either bundled up in a list as you have, or they are multiple values.
[11:02:53] <hashfunc170a> beach: i totally understanding that i'm approaching it in a very unconventional way lol. but i'm trying to build a solid intuition around macros
[11:03:24] <beach> hashfunc170a: There is nothing to know that is separate about macros.  A macro is just a function that transforms code into other code.
[11:03:29] <jackdaniel> that way you'll confuse yourself instead of building any intuition, I'd put macros for later if I were you
[11:04:12] <beach> hashfunc170a: And the backquote facility can be used anywhere; not just in macros.
[11:05:49] <masinter> it's hard to write good macros without screwing up order of execution
[11:07:13] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:07:16] *** Quits: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397) (Ping timeout: 250 seconds)
[11:07:34] <hashfunc170a> beach: i understand what you're saying, and i understand that the backquote facility can be used anywhere. but what isn't intuitive to me is the evaluation of macros within macros within a quasiquoted form
[11:08:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:08:51] <beach> hashfunc170a: Macros aren't evaluated.  They can be defined or invoked.  Only forms are evaluated.
[11:09:58] <pjb> More exactly, they are self-evaluating, like most lisp objects: (eval (macro-function 'cond)) #| --> #<Compiled-function cond Macroexpander #x3000009610BF> |#
[11:10:38] <masinter> to get a good sense of macros, get rid of quasiquotes.   `(a b ,c) => (list 'a 'b c)
[11:11:06] <beach> masinter: That was suggested yesterday to hashfunc170a by (as I recall) moon-child.
[11:12:16] <pjb> hashfunc170a: or don't write your code in a macro, but in a normal function: (defun generate-my-code (name expression) `(block ,name ,expression))  then a macro calling your code-generating function (defmacro my-code (name expression) (generate-my-code name expression))
[11:12:44] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[11:15:03] <beach> hashfunc170a: Did you figure out the COND code I wrote yesterday?  If not, try just evaluating (eq *package* *standard-output*) and `(eq ,*package* ,*standard-output*) at the REPL.  As you can see, the first form evaluates to false (NIL) and the second one to true (something other than NIL).
[11:15:46] <phoe> qhong: one difference is that you need to provide a variable name for VARIABLE-INFORMATION, this is not the case for your old VARS-OF-TYPE macro
[11:16:02] <beach> hashfunc170a: So in your macro, your COND has a test that looks very much like the second of my two forms, and it is always true.
[11:17:29] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:17:56] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl)
[11:18:34] <phoe> qhong: but, yes, the macroexpansion does not show any TYPE declarations, which is weird
[11:19:14] <hashfunc170a> beach: i understand that macros aren't evaluated. but i also understand that (unquoted) forms can be evaluated within macros at compile-time. what i don't understand is how a macro with a ... &body ...  parameter can be defined without the use of quasiquote. & yes, that was my first exercise today, i fully understand the COND code, in that the template list generated evaluates to truthy in the cond, thus the "yes" gets printed.
[11:19:49] <phoe> hashfunc170a: a macro must return some Lisp code, which will most likely be a tree of conses
[11:20:09] <phoe> you can use cons- and list-making functions to create that tree, rather than quasiquote
[11:21:08] <s-liao> what is (loop :for (value . input) :in (run parser input)
[11:21:09] <s-liao> Â Â Â Â Â Â Â Â Â  :append (run (funcall function value) input))
[11:21:15] <phoe> s-liao:
[11:21:16] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[11:21:16] <phoe> clhs loop
[11:21:19] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[11:21:29] <phoe> http://www.lispworks.com/documentation/lw51/CLHS/Body/m_loop.htm
[11:21:37] <s-liao> okay
[11:21:48] <phoe> LOOP is an iteration facility in Common Lisp
[11:22:03] <phoe> see the relevant PCL chapter at https://gigamonkeys.com/book/loop-for-black-belts.html
[11:22:18] *** Joins: specbot (~specbot@common-lisp.net)
[11:22:18] *** Joins: minion (~minion@common-lisp.net)
[11:24:32] <s-liao> what :for :in :append
[11:24:43] <s-liao> in that sentence
[11:24:51] <s-liao> is it keywords?
[11:24:54] <phoe> these are loop keywords that describe what kind of iteration it should perform
[11:25:01] <phoe> see the relevant PCL chapter at https://gigamonkeys.com/book/loop-for-black-belts.html
[11:25:42] <phoe> it's pretty hard to explain all of LOOP via IRC, hence I'm linking you a book chapter
[11:25:46] <hashfunc170a> beach: "beach: i understand that macros aren't evaluated. but i also understand that (unquoted) forms can be evaluated within macros at compile-time." i'll backtrack on those statements. i understand that forms with the symbol 'macro as it's car are evaluated differently.
[11:26:05] <phoe> symbol 'macro as its car?
[11:26:24] <hashfunc170a> (list 'macro ...)
[11:26:31] <phoe> uh, no?
[11:26:54] <phoe> there is no symbol named MACRO in CL
[11:28:28] <White_Flame> technically, they're compiled differently, not evaluated differently
[11:28:40] <White_Flame> although both could be true
[11:28:59] <phoe> hashfunc170a: do you know how functions work? like, (lambda (x y) (list '+ x y))
[11:31:38] <beach> hashfunc170a: You can use APPEND to construct the code to return.  No need to use the backquote facility.
[11:33:33] <beach> hashfunc170a: See, that's what I meant before.  You lack a lot of basic knowledge, yet you are trying to do something fairly sophisticated, and the result is that you mix everything up and don't understand which part does what.
[11:35:49] <hashfunc170a> my bad. in emacs lisp that seems to be the way macros are implemented https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/byte-run.el#L275
[11:35:51] <hashfunc170a> beach: thanks
[11:37:05] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:37:10] <phoe> that's not the way CL macros are done
[11:37:57] *** Joins: amb007 (~a_bakic@58.37.22.93.rev.sfr.net)
[11:38:01] *** Joins: pve (~pve@87-93-197-117.bb.dnainternet.fi)
[11:40:33] <phoe> in CL, you grab a perfectly normal usual function, wrap it a little so it takes two arguments (the whole form and the environment object), and you (SETF MACRO-FUNCTION) it into place
[11:41:20] *** Quits: hashfunc170a (~user@162.254.115.155) (Ping timeout: 272 seconds)
[11:41:27] <phoe> that's some of the dirty technical details behind DEFMACRO
[11:45:30] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[11:48:00] <beach> dirty?
[11:49:56] <jackdaniel> very much so, I saw a stain on them :)
[11:50:56] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:51:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:54:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[11:55:38] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 260 seconds)
[11:56:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:56:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:02:58] *** Quits: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:03:36] *** Joins: silasfox (~sbv@p200300cec7163b00e8793794dfdea4fb.dip0.t-ipconnect.de)
[12:03:58] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[12:09:00] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[12:10:42] <s-liao> phoe: Thanks
[12:11:02] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:15:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:27:27] *** Joins: treflip (~user@user/treflip)
[12:29:33] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[12:42:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[13:03:37] *** Quits: pillton (~user@203.220.145.101) (Quit: ERC (IRC client for Emacs 27.2))
[13:09:53] <phoe> beach: "dirty" as in "not clean" - e.g. the transformation from the macro lambda list into (lambda (whole env) ...) is very much not a clean operation
[13:10:14] <phoe> or rather, s/dirty/ugly/
[13:10:17] <phoe> that would be even better
[13:16:34] *** Joins: parjanya (~esb@2804:14c:1ad:9351:9f3a:bb7b:e891:ebd6)
[13:28:15] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[13:35:07] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:39:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:48:16] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Ping timeout: 245 seconds)
[13:55:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[13:58:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:02:00] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[14:05:48] <pjb> phoe: it's standard macrology.
[14:07:13] <phoe> pjb: I know it's standard macrology, but it isn't "obvious" macrology
[14:08:01] <pjb> It's obvious when you write the compiler and call the macroexpander.
[14:08:18] <phoe> it's not obvious if you are learning lisp and want to learn how macros work
[14:08:40] <phoe> people who are learning lisp do not usually write lisp compilers at the same time
[14:14:26] <splittist> I'm not sure 'dirty', 'ugly' or 'unnatural' really add much. Except in a trite phrase like "dirty little secret" to imply this is some behind-the-scenes machinery
[14:15:50] <phoe> hmm
[14:15:52] <phoe> point taken
[14:17:10] <jackdaniel> a natural language is relative; a person who learns macros doesn't need to know about this implementation detail (even if it is part of the standard)
[14:17:48] <jackdaniel> when someone wants to understand how macros are implemented, then we could say that they peek behind the abstraction scenes, so they /get their hands dirty/
[14:19:34] <splittist> A marvelous metaphor bouillabaisse
[14:20:44] <jackdaniel> it's not me who came up with 'dirty little secrets' ,)
[14:22:38] <jackdaniel> for someone who knows the standard very well some things are obvious, while for other people they may be obscure
[14:26:33] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[14:28:00] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[14:31:37] *** Quits: [w] (~c@2601:8c1:80:70d0::35a2) (Ping timeout: 240 seconds)
[14:36:12] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[14:59:32] *** Joins: lisp123 (~lisp123@120.154.103.52)
[15:04:29] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[15:31:33] *** Joins: patrice (~patrice@user/patrice)
[15:43:52] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:50:14] *** Joins: eugercek (~user@user/eugercek)
[15:59:45] <scymtym> Guest7482: are you the author of the randr extension in clx?
[16:12:05] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[16:15:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:16:49] *** Joins: igemnace (~ian@user/igemnace)
[16:19:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:47:37] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[16:58:49] *** Joins: Bike (~Bike@71.69.170.70)
[17:06:54] *** Quits: jackdaniel (~jack@user/jackdaniel) (Remote host closed the connection)
[17:07:43] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:07:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Write error: Broken pipe)
[17:08:10] *** Joins: jackdaniel (~jack@user/jackdaniel)
[17:08:10] *** ChanServ sets mode: +o jackdaniel
[17:17:03] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[17:22:58] *** Joins: v88m (~Xiro@213.87.153.210)
[17:26:25] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[17:28:03] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b960:8330:724b:bd23)
[17:28:05] *** Joins: igemnace (~ian@user/igemnace)
[17:29:46] *** Quits: v88m (~Xiro@213.87.153.210) (Read error: Connection reset by peer)
[17:38:03] *** Joins: patrice (~patrice@user/patrice)
[17:41:41] *** Joins: v88m (~Xiro@213.87.153.210)
[17:50:37] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:50:56] *** Joins: Bike (~Glossina@71.69.170.70)
[17:51:27] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Remote host closed the connection)
[17:51:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:52:55] <Guest7482> scymtym: Yes, the partial one that is there.Â  I had the complete extension written but my hard drive crashed and I was becoming homeless and just uploaded what I could. So if there's problems just ask.
[17:55:14] <Guest7482> Also did the double buffer one, but I think the general consensus is not to use it, especially for gl as it uses up your stereo views.
[17:56:18] <Guest7482> and composite, which you can't really use without xfixes, which can't be used the way clx is written.
[17:57:37] <scymtym> Guest7482: thank you for the information. i'm experimenting with the events of the randr extension. i think RRNotify and its sub-events are not described correctly at the moment
[17:58:11] <Guest7482> possible. I can take a look.
[17:59:35] *** Quits: v88m (~Xiro@213.87.153.210) (Ping timeout: 256 seconds)
[17:59:40] <scymtym> thanks, i can probably figure it out though. would you look over a pull request?
[17:59:58] *** Joins: v88m (~Xiro@213.87.153.210)
[18:00:01] <Guest7482> anyone in particular?Â  though I guess I'll just check against the xml.Â  They do sneaky things like changing stuff in the xml and not updating the docs.
[18:01:58] <Guest7482> I could, but I don't really maintain that version and I have no write access to sharplispers.
[18:06:51] <Guest7482> also seems to be missing quite a few events.
[18:10:43] *** Joins: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:6873:2f55:6802:7717)
[18:17:29] <scymtym> the sharplispers version is maybe on randr 1.3 or so
[18:17:37] <scymtym> but those events would be good enough for me at the moment
[18:18:59] <Guest7482> ah, let me look at the repo, it's probably different from mine.
[18:20:34] *** Joins: rm34D (~user@host104-27.junet.se)
[18:20:42] *** Quits: silasfox (~sbv@p200300cec7163b00e8793794dfdea4fb.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[18:21:03] <beach> I would still love to see a new CLX-like library that is more CLOS-y and that uses the Xrender extension exclusively for drawing.
[18:21:41] <Guest7482> if it's one of the output events, i think the output requests were putting out the wrong information.
[18:22:16] <beach> Then, maybe this time it should be a more abstract library so that different types of display servers can be used.
[18:22:44] <Guest7482> beach: so would i!Â  Though not exclusively xrender.Â  Unfortunately there's quite a few things it is slower than software rendering.
[18:22:55] <beach> I see.
[18:25:58] <Guest7482> I was just thinking of having a vector drawing interface, despite the fun I had writing all the raster graphics stuff.
[18:27:09] <beach> I seem to recall that something like that has been worked on.
[18:27:16] <beach> Perhaps by me? :)
[18:27:24] * beach 's memory is crap.
[18:27:44] *** Quits: treflip (~user@user/treflip) (Quit: rebooting...)
[18:29:43] <Guest7482> I just use what frederic wrote, and built an interface on top of that to make easy rendering of svg paths.Â  I'm a little surprised, it's one of the few things I use someone elses library for.
[18:30:20] <Guest7482> Would love to see anything you've worked on.Â  I find seeing multiple implementations helps to develop a backend agnostic layer over it.
[18:30:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:30:55] <beach> I suspect I didn't get very far.  But let me have a quick check...
[18:33:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:33:56] <beach> Hah, there is even documentation: https://github.com/robert-strandh/Cloak perhaps mostly documentation in fact.
[18:35:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[18:36:15] <jackdaniel> beach: do you mean something like implementing CLIM medium protocol?
[18:36:17] <jackdaniel> i.e http://turtleware.eu/static/paste/669443a4-svg-backend.webm
[18:37:02] <Guest7482> scymtym: atom in :rr-output-property-change should probably be declared an atom and not card32, so break up that sequence, and state should be an enum not a boolean.
[18:37:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:37:54] <jackdaniel> em, did the video got cut in the middle?
[18:37:59] <jackdaniel> let me rerecord the svg part
[18:38:39] <beach> jackdaniel: maybe.  I haven't thought about things like this for a while.  I think I was aiming for something lower level than the CLIM protocols.
[18:38:50] <scymtym> Guest7482: i think all but the first event are wrong and should instead share a single event code with three different sub-codes. i will report further progress later
[18:38:52] *** Quits: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:6873:2f55:6802:7717) (Quit: Quit)
[18:39:29] <jackdaniel> http://turtleware.eu/static/paste/21dc1f70-svg-backend.webm < this has svg rendering
[18:39:52] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[18:39:54] *** Joins: pat (~patrice@2603:301c:604:2a00::861)
[18:40:15] <beach> Nice.
[18:40:24] <jackdaniel> thanks
[18:40:26] *** Quits: pat (~patrice@2603:301c:604:2a00::861) (Remote host closed the connection)
[18:40:52] <Guest7482> scymtym: that's how they changed it to in the xml, but it should have reported them normally to a non xcb client.
[18:40:54] *** Joins: pat (~patrice@2603:301c:604:2a00::861)
[18:41:33] *** Quits: pat (~patrice@2603:301c:604:2a00::861) (Client Quit)
[18:41:35] *** Joins: patrice (~patrice@user/patrice)
[18:42:05] <scymtym> Guest7482: i'm going by https://www.x.org/releases/X11R7.7/doc/randrproto/randrproto.txt which also has the sub-code structure, but i really have to go for now
[18:44:51] <jackdaniel> currently to implement a drawing backend without a concern for performance it is enough to define a port, a medium and a method for medium-draw-polygon* (along with relevant line styles, colors and such)
[18:46:39] <Guest7482> you guys really should factor that out.Â  Maybe then I wouldn't have written a surface and drawing protocol.
[18:47:56] <jackdaniel> protocols are out there, specified
[18:48:20] <Guest7482> that makes no difference.
[18:48:56] <jackdaniel> that's a shame ,)
[18:49:27] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:49:28] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[18:49:34] <Guest7482> it is, really wish you guys factored that out.
[18:50:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:52:08] * jackdaniel would rather see people adopting mcclim than maintaining himself small libraries he has no use for
[18:53:56] <Guest7482> perhaps there'd be more users if there were smaller pieces people could take advantage of without using the whole and that would consolidate effort in the community?
[18:55:03] <jackdaniel> I don't see how fragmentation fuels consolidation but mcclim is a free software, you can make a fork with things you like if you are willing to
[18:57:00] <Guest7482> it fuels consolidation of all the effort put into sub parts.Â  There are much more people working on graphics related things that have nothing to do with mcclim.
[19:01:30] *** Quits: rm34D (~user@host104-27.junet.se) (Ping timeout: 272 seconds)
[19:05:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:05:52] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:06:35] *** Joins: rm34D (~user@host104-27.junet.se)
[19:07:27] <NotThatRPG_away> I see both sides of this discussion. On the one hand, it would be nice if McCLIM could centralize community effort. On the other hand, the CLIM model of GUI is so unusual, with such a high learning curve, that it's a very big ask.  I should try it again, it's been years since I last tried.
[19:07:40] *** NotThatRPG_away is now known as NotThatRPG
[19:08:02] *** Joins: blacked (~blacked@user/blacked)
[19:08:11] <blacked> if lets say emacs was made in c+lua instead of  c+lisp, would it be still configurable?
[19:08:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:08:21] <jackdaniel> mcclim has many systems that may be used independent of gui.
[19:09:09] <jackdaniel> in the future I also want to make the lower level abstractions (known in genera as silica) as a framework to build your own toolkit (without clim "esoterics")
[19:10:04] <beach> NotThatRPG: I think that's merely a matter of how it is presented.  I believe if the documentation were structured to start with the low-level parts and to present the upper layers as convenience, then people could start using it the way they use traditional GUI toolkits.
[19:10:26] <beach> blacked: Not exactly a Common Lisp question.
[19:10:26] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[19:10:35] <random-nick> why is the CLIM model of GUI unusual? clim's model doesn't seem to be far from the event loop model used in modern GUIs
[19:10:38] <NotThatRPG> beach: That might well be. The CLIM spec is not at all a tutorial!  But I don't believe there is one?
[19:10:55] <jackdaniel> NotThatRPG: there is one in McCLIM manual
[19:11:04] <beach> NotThatRPG: There is stuff already in the McCLIM distribution, but I haven't looked at it lately.
[19:11:06] <jackdaniel> it doesn't cover everything, but it is a good start
[19:11:29] <NotThatRPG> What's the status of the emacs-style application stuff in McCLIM?
[19:11:37] <beach> random-nick: That's the lower level I was talking about.  But that's not how it is typically presented.
[19:11:49] <beach> ... pun not intended.
[19:12:20] <beach> NotThatRPG: ESA?  Still working but should be split up and restructured.
[19:12:38] <jackdaniel> random-nick: most toolkits rely on widgets+callbacks while clim defines a frame as a model and presentations and commands that have semantic meaning
[19:13:18] <NotThatRPG> The last time I tried McCLIM the graph layout stuff worked poorly, and argument parsing for complex arguments didn't work properly (trying to remember exactly what was wrong, but I think I had a command that required two arguments off the graphics, and it just didn't work at all).
[19:13:25] <NotThatRPG> But again, that was a LONG time ago.
[19:13:50] <beach> blacked: For an application to be highly scriptable, it needs a dynamic programming language.  I don't know Lua, so I can't say whether it would do the trick.  Some applications are written in a static programming language, and then scripting capabilities are added in the form of a dynamic language.
[19:14:10] <jackdaniel> either way, mcclim is useful for other things than writing applications - i.e you may use it to produce raster images, pdf and postscript documents etc
[19:14:14] <beach> blacked: But it is a much better idea to have the entire application written in one dynamic language.
[19:15:14] <blacked> i'm looking like i know elisp is not lisp or common lisp
[19:15:22] <blacked> but i heard this quote
[19:15:32] <blacked> Emacs Lisp is probably the most featureless language you can think of; it doesn't even do basic threading and the async stuff is a joke. All the major programming language modes are implemented as ad-hoc Elisp regexp parsers making bugs impossible to fix. Virtually _everything_ is implemented in Elisp, because the C code is a gigantic
[19:15:33] <blacked> unmaintainable mess. This means that all the pretty high-level stuff like Magit is shit slow. Good features take ages to propagate to upstream, whose reasons are often more political than technical.
[19:15:41] <blacked> `doesn't even do basic threading and the async stuff is a joke` , how is for common lisp?
[19:15:50] <phoe> CL has decent threading support
[19:16:16] * jackdaniel gets back to work
[19:16:20] <phoe> nothing truly good for asynchronous programming though, since it just doesn't fit the language model very well
[19:17:29] * jackdaniel hints at lparallel and lfarm
[19:19:26] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[19:19:42] <beach> blacked: It would have been better if Emacs were written in Common Lisp, as opposed to the way it is now written, but I understand Emacs Lisp is getting better and getting closer to Common Lisp in some respects.  Then, I don't much like how Lisp mode is implemented in Emacs, which is why I started Second Climacs.
[19:19:58] <blacked> yes there is one :)
[19:20:04] <blacked> but nobody use it :(
[19:20:19] <beach> Nobody uses what?
[19:20:28] <blacked> Climacs
[19:20:38] <beach> Hold on a sec...
[19:20:43] <blacked> beach can i use doom emacs in climacs?
[19:20:46] <jackdaniel> there is more than one - hemlock and climacs come to mind. hemlock if I understand correctly is used as an ide for ccl
[19:20:49] <_death> blacked: this quote is not up to date.. e.g., ELISP> (make-thread (lambda ())) => #<thread 0x565065b4e198>
[19:20:51] <_death>  
[19:20:57] <jackdaniel> (or the ide is build on top of hemlock)
[19:20:58] <NotThatRPG> blacked: elisp and emacs are a scandal for software engineering. Everything is done wrong according to SE dogma, but somehow it works better than most software that's done right.
[19:21:02] <random-nick> phoe: why doesn't it fit the language model?
[19:21:04] <NotThatRPG> FSVO "right"
[19:21:13] <beach> blacked: (First) Climacs is not that much better than Emacs, but I am talking about Second Climacs, which is not ready to use, which is why it is not used.
[19:21:55] <blacked> `talking about Second Climacs` oh ok , i'll move to it if it is ready, but what about my already configured config
[19:22:01] <Guest7482> notthatrpg: Which is why planning out software almost seems like a futile endeavour.Â  You never quite now why people will use things.
[19:22:13] <beach> blacked: It is not ready, as I said.
[19:22:36] <beach> blacked: And from your remarks, it sounds like you wouldn't want to be a user anyway.
[19:22:44] <NotThatRPG> Guest7482: Actually I was referring to things like namespacing, typing, heck, even lexical scope!
[19:23:05] <semz_> Was about to say, it's a bit weird to see "basic thread and async support" as a supposedly major shortcoming of elisp when there are so many much worse.
[19:23:11] <blacked> ummmm these language are slowly deteroiorating in the history, dont hate me but thats true.
[19:23:27] <blacked> people making lua, neovimÂ :( Â not common lisp based vim
[19:23:35] *** semz_ is now known as semz
[19:23:48] <beach> blacked: "these languages"?
[19:24:00] <_death> not sure what you're trying to get at, here in #commonlisp
[19:24:06] <jackdaniel> beach: I believe that you are being trolled by blacked
[19:24:08] <blacked> no no i'm not ranting
[19:24:26] <beach> jackdaniel: Yeah, possibly.
[19:24:32] <blacked> i'm covering my own conflicts of brain what would happen in future?
[19:24:53] *** Joins: treflip (~user@user/treflip)
[19:25:06] <phoe> random-nick: well, less of a language model issue, but I do not know if any CL implementation supports that out of the box; there is stuff like cl-async which requires foreign code and structuring your code around its async model
[19:25:31] <phoe> but yeah, elisp discussion would be more suited to #lisp
[19:26:22] <Guest7482> it's certainly been an issue when trying to deal with events/eventing.
[19:29:07] <random-nick> don't other async programming models have you also structure your code around the async model? from what I understand, async models are still callback-based, but now with async/await syntactic sugar instead of explicit callbacks/CPS, not unlike cl-cont/green-threads
[19:33:16] *** Joins: poldy (~dbane@user/poldy)
[19:33:28] <random-nick> but yes, in order to do these things in CL you either need to rely on an entire foreign async framework like cl-async does, or you have to manually build your own while interfacing with the OS directly which would probably require implementation-specific code in order to keep things compatible with the implementation's implementation of files and streams
[19:34:05] <random-nick> unless you write your own using gray streams, I guess
[19:35:07] <Guest7482> there seems to be some time penalties going with gray streams.
[19:36:12] <_death> there are much better ways to support parallelism and concurrency anyway.. Lisp has a long history with such ways
[19:36:30] <NotThatRPG> I wish that the concurrency stuff from portable allegroserve had caught on: they are more lispy than many of the alternatives.
[19:36:39] <phoe> _death: could you say a bit more? I'm curious
[19:38:33] <_death> phoe: just think about the actor model (scheme ;), connection machine (starlisp), qlisp, etc.
[19:38:48] <phoe> oh, you mean these! yes, I see
[19:40:48] <_death> the CSP book also used a Lisp-alike
[19:41:18] <random-nick> also, does async offer any advantages compared to a "lightweight" threading model?
[19:44:56] <NotThatRPG> _death: "CSP book" or did you mean "CPS book"?
[19:46:12] <random-nick> csp would be communicating sequential processes? what would be cps?
[19:46:28] <phoe> continuation passing style I guess
[19:46:52] <Guest7482> I'm just wondering how to deal with events across different lisp processes.Â  You wouldn't want your event processor to execute callbacks in it's own process.
[19:47:35] <random-nick> why would you have different lisp processes in the first place?
[19:47:53] *** Quits: rm34D (~user@host104-27.junet.se) (Ping timeout: 250 seconds)
[19:47:56] <_death> NotThatRPG: http://www.usingcsp.com/cspbook.pdf
[19:48:10] <jackdaniel> I think that the meaning is "thread", native threads are often called processes in lisp
[19:48:13] <Guest7482> safety. privileges. memory.
[19:48:41] <NotThatRPG> _death: Thanks! I was confused between Communicating Sequential Processes and Continuation-Passing Style!
[19:49:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:49:50] <random-nick> Guest7482: why do you need separate processes for safety? why do you need privileges at all? what do you mean by memory?
[19:50:03] <NotThatRPG> @jackdaniel: YOu meant this, right? https://mcclim.common-lisp.dev/static/manual/mcclim.html
[19:50:04] <jackdaniel> Guest7482: make a thread-safe event queue (i.e a mailbox) for each "consumer" and stick events there
[19:50:18] <jasom> Guest7482: yes, geocities e-mail addresses still work; I've been using mine since 1996 or so
[19:50:19] <jackdaniel> NotThatRPG: yes
[19:50:29] <NotThatRPG> @jackdaniel: Thanks!
[19:50:35] <jackdaniel> sure
[19:50:46] <Guest7482> you need privileges to read certain inputs.Â  You don't want to run out of memory.Â  you don't want people compiling binaries and having 20 different event processors running.
[19:51:09] <random-nick> jackdaniel: you'd need some IPC mechanism, presumably
[19:51:11] *** Quits: Volt_ (~Volt_@c-73-145-161-51.hsd1.mi.comcast.net) (Quit:  )
[19:52:22] <random-nick> would you not run out of memory faster if you have more processes?
[19:52:29] *** Quits: blacked (~blacked@user/blacked) (Killed (ozone (No Spam)))
[19:52:30] <jackdaniel> ah, then I misunderstood, I thought that we talk about threads
[19:52:48] <NotThatRPG> @jackdaniel: Is there any tutorial for ESA?
[19:52:59] <Guest7482> if an sbcl process runs out of memory, it only crashes itself.Â  Not the whole system.
[19:53:55] <jackdaniel> NotThatRPG: there is, but you need to build it yourself. it is in the directory Documentation/ESA
[19:53:59] <Guest7482> jd: I have thought of mailboxes for same process.Â  or maybe just client supplies a thread and just interrupt and insert callbacks.
[19:54:23] <jackdaniel> NotThatRPG: that said while I'm happy to help with any clim problems I don't know ESA itself so I won't be of much help
[19:55:07] <jackdaniel> NotThatRPG: http://turtleware.eu/static/paste/e5f6f40b-esa.pdf
[19:55:13] <NotThatRPG> @jackdaniel: Good advice. Probably I will stay away from that then.
[19:55:58] *** Quits: v88m (~Xiro@213.87.153.210) (Ping timeout: 272 seconds)
[19:56:01] <jackdaniel> I'm not saying that it is bad, I'm just not accustomed it - it is a bundled library so I don't feel compelled to work on it (especially that there are no bug reports)
[20:01:04] <Guest7482> I wonder if security even needs to be thought about? Maybe people don't mind being able to keylog all passwords on their system.
[20:03:17] <_death> as long as you use agpl license for your passwords, it's fine
[20:04:19] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[20:04:47] <Guest7482> just put it in the readme right? by use of this software you agree to licence all your passwords under the agpl?
[20:05:04] <Common-Lisp> I don't think that would work lol
[20:05:17] <Common-Lisp> What is the binary form of a password
[20:07:03] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:08:23] <_death> if you distribute an encrypted file, you must also distribute the password
[20:11:31] *** Joins: rm34D (~user@host104-27.junet.se)
[20:26:41] *** Quits: rm34D (~user@host104-27.junet.se) (Ping timeout: 256 seconds)
[20:30:07] *** Joins: pdo (~user@194.12.6.234)
[20:31:21] *** Joins: rm34D (~user@host104-27.junet.se)
[20:32:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[20:49:46] <Guest7482> is it just me, or does sbcl's loop not handle nested conditionals properly, especially with regards to pairing up :else clauses?
[20:50:23] <Bike> how so
[20:51:25] <Guest7482> I'm trying to come up with an example. It's even more confusing because emacs doesn't line up the clauses properly.Â  and :else will automatically indent to the outer if.
[20:51:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[20:54:29] *** Joins: lisp123 (~lisp123@120.154.103.52)
[20:55:07] <beach> Guest7482: You need to use the slime-indentation contribution for LOOP clauses to be indented correctly.
[20:55:46] <Guest7482> it's in my slime-contribs
[20:56:09] <beach> Ah, OK.  Strange that it doesn't work properly for you.
[20:58:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[21:00:01] <Guest7482> huh, my test works but my code which is the same thing with different functions doesn't.
[21:00:36] <Guest7482> still, doesn't change the bad indentation.Â  Wonder if order of slime-contribs matters at all?
[21:00:38] <jackdaniel> perhaps you try to capture a loop variable?
[21:05:15] <Guest7482> ah, my bad, function was not returning what I was expecting it to return, i.e. what it is specified to return.
[21:09:19] <Guest7482> still wondering why it's not indenting properly if slime-indentation is supposed to take care of that.
[21:14:54] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:18:26] *** Quits: amb007 (~a_bakic@58.37.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:30:35] *** Quits: rm34D (~user@host104-27.junet.se) (Ping timeout: 250 seconds)
[21:31:23] *** Joins: rm34D (~user@host104-27.junet.se)
[21:43:16] *** Quits: poldy (~dbane@user/poldy) (Ping timeout: 245 seconds)
[21:43:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:49:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[21:50:30] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[21:52:33] *** Joins: amb007 (~a_bakic@179.105.204.77.rev.sfr.net)
[21:52:36] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[21:55:44] *** Joins: v88m (~Xiro@213.87.153.210)
[21:57:09] *** Joins: jeosol (~jeosol@user/jeosol)
[22:00:04] *** Quits: parjanya (~esb@2804:14c:1ad:9351:9f3a:bb7b:e891:ebd6) (Remote host closed the connection)
[22:02:24] *** Quits: phantomics (~phantomic@71-33-156-71.hlrn.qwest.net) (Ping timeout: 256 seconds)
[22:02:25] *** Quits: amb007 (~a_bakic@179.105.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:03:10] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:06:15] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[22:17:05] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:17:49] *** Quits: wacki (~wacki@87.122.91.154) (Quit: Leaving.)
[22:21:40] *** Joins: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com)
[22:27:45] *** Parts: rm34D (~user@host104-27.junet.se) (ERC (IRC client for Emacs 27.2))
[22:38:16] <phoe> TIL that WITH-OPEN-FILE has fun behavior wrt non-local jumps
[22:38:21] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:39:31] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[22:40:11] <Bike> what behavior is that?
[22:43:42] *** Joins: morganw (~user@80.225.24.132)
[22:44:42] <phoe> if a new file is being written, and if control leaves the body via a non-local jump, then the file is not actually written
[22:48:02] <White_Flame> "If abort is true, an attempt is made to clean up any side effects of having created stream. If stream performs output to a file that was created when the stream was created, the file is deleted and any previously existing file is not superseded."
[22:48:32] <White_Flame> from CLOSE.  Looking at SBCL's with-open-file, the :abort field is only NIL if the body finished
[22:48:50] <White_Flame> on its exiting CLOSE call
[22:49:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:49:53] <White_Flame> oh, and this is documented on with-open-file as well, sorry
[22:52:01] *** Quits: jackdaniel (~jack@user/jackdaniel) (Remote host closed the connection)
[22:52:55] *** Joins: jackdaniel (~jack@turtleware.eu)
[22:55:57] *** Joins: wacki (~wacki@87.122.91.154)
[22:56:01] *** Quits: v88m (~Xiro@213.87.153.210) (Read error: Connection reset by peer)
[22:58:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:00:06] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[23:06:43] *** Joins: varjag (~user@scandic757.host.songnetworks.se)
[23:16:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:17:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:18:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[23:24:27] <Guest7482> how do you leave a message for someone?
[23:25:39] <Bike> ::notify guest7482 like so
[23:25:39] <Colleen> Bike: Got it. I'll let guest7482 know as soon as possible.
[23:25:50] <Guest7482> thanks bike:
[23:25:51] <Colleen> Guest7482: Bike said 11 seconds ago: like so
[23:29:39] <Guest7482> ::notify scymtym I've got to go now, but forgot to mention that to read those events properly you'd have to change the whole way extensions and events are declared, and how they are read.Â  The easy hacky solution would be to name the second event notify-union and then just get a sequence of card8's that you can assemble into the events depending
[23:29:39] <Colleen> Guest7482: Got it. I'll let scymtym know as soon as possible.
[23:29:40] <Guest7482> on the sub-code, since none of them really have the same order or size of slots.
[23:30:36] *** Quits: Guest7482 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:38:26] *** Joins: Catie (~user@user/catie)
[23:58:17] *** Joins: eugercek (~user@user/eugercek)
