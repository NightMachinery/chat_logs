[00:08:50] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[00:14:39] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[00:40:20] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[00:46:53] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:13:00] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[01:17:44] *** Joins: pjb (~pjb@user/pjb)
[01:44:13] *** Joins: mayureshkathe (~kathe@49.32.163.111)
[01:47:06] *** Parts: mayureshkathe (~kathe@49.32.163.111) ()
[01:59:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[02:22:28] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[02:40:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:12:05] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:12:33] *** Joins: Bike (~Bike@71.69.170.70)
[04:45:44] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[04:49:59] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:52:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[05:01:20] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:24:38] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[05:29:25] *** Joins: Bike (~Bike@71.69.170.70)
[05:35:00] <jealousmonk> Hi, I am having trouble understanding the role of eq. "Two objects are EQ if they are identical, unless they are numbers or characters". What exactly does it mean to be identical? Why the caveat about numbers or characters? What is special about numbers or characters?
[05:35:01] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[05:35:01] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[05:40:59] <Bike> numbers and characters are special in that it is convenient to let implementations make distinct versions of the same number more or less at will
[05:41:22] <Bike> for example, if you do (+ 1 most-positive-fixnum) twice, the implementation will probably cons up two different bignums to represent the same integer
[05:43:34] <Bike> i don't think "identical" is actually specifically defined in more detail, but one rule of thumb is that if (eq a b) is true, any mutation to a will be reflected in b as well. they have the same persistent identity
[05:46:37] <mfiano> jealousmonk: identical means that the objects being compared are the same; not just structurally, but actually are the same and live at the same memory address. EQ is the most specific comparator we have, and will return NIL if the objects are not exactly the same thing. Numbers (and characters which are basically numbers) should never be compared with EQ.
[05:48:06] *** Joins: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net)
[05:48:21] <mfiano> If you want to compare numbers use EQL, or better, =. But keep in mind the gotchas with floating point comparisons.
[05:52:33] <mfiano> jealousmonk: EQL is usually the default comparison operator for all the standard functions that take a TEST argument, because only certain things can always be considered EQ, such as characters. EQ is pretty free to return counter-intuitive results at the implementation's discretion. That said, EQL with floating point numbers is not very well defined, both mathematically, and as far as the
[05:52:35] <mfiano> standard describes.
[05:53:58] <mfiano> s/such as characters/such as symbols/
[05:54:04] <mfiano> big goof :)
[05:54:49] <jealousmonk> no problem haha :) thanks mfiano and Bike 
[05:59:23] <jealousmonk> So, in the context of EQ, identical means living at the same memory address? Why there is no mention of it in CLSH? http://www.lispworks.com/documentation/HyperSpec/Body/f_eq.htm
[06:00:06] <mfiano> Because the standard does not make any mention of how source code is to be compiled.
[06:00:11] <mfiano> Well, very little actually.
[06:00:37] <mfiano> It may even be interpreted
[06:01:35] <mfiano> EQ compares identical objects, and identical means "the same object"
[06:01:41] <mfiano> That is all you get from the standard
[06:02:20] <mfiano> Same should mean the same object. Not some copy of it that has the same bit representation, but actually the same.
[06:05:34] <jealousmonk> I see
[06:05:35] <mfiano> If you cloned yourself, you'd not be able to tell if they were the same person under EQ because they are different not in their structure but in their space.
[06:06:44] <jealousmonk> Good point haha
[06:08:13] <jealousmonk> So objects don't have a specific definition either?
[06:08:50] <mfiano> I'm not sure what you mean. In Common Lisp, everything is an object.
[06:10:25] <mfiano> clhs object
[06:10:38] <mfiano> well it's in the glossary
[06:11:03] <mfiano> every object in common lisp is an instance of some class. even classes themselves. That might make your head spin though.
[06:16:16] * jealousmonk scratches his head
[06:16:19] <jealousmonk> Hmm
[06:20:02] <lagash> mfiano: there is a "top-most" class though?
[06:20:18] <jealousmonk> I thought that to compare objects it would be necessary to know how they are represented
[06:21:16] <EdLangley[m]> jealousmonk: it depends on the sort of comparison
[06:21:18] <mfiano> minion: equal
[06:21:19] <minion> equal: identity, equality (eq, eql, equal, equalp) and copying are explained at http://www.nhplace.com/kent/PS/EQUAL.html and in http://home.pipeline.com/~hbaker1/ObjectIdentity.html
[06:21:25] <EdLangley[m]> EQ tests identity
[06:22:16] <EdLangley[m]> If an object is mutable, that means identity is preserved even if the physical representation changes.
[06:22:22] *** Joins: aeth_ (~aeth@user/aeth)
[06:23:35] <Bike> like, for example, "two" conses are eq if they originated from the same call to CONS, and otherwise they are not eq
[06:23:40] <Bike> so representation doesn't come into it
[06:25:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:26:56] *** aeth_ is now known as aeth
[06:27:10] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:56:42] <jealousmonk> Bike: "Two" conses from the same call to CONS? I'm not sure what this means. Can you provide some code to illustrate?
[06:57:35] <Bike> "two" is in scare quotes because they would in fact be the same cons
[06:57:50] <Bike> but like, (eq (cons 1 2) (cons 1 2)) would be false, because there are two distinct calls
[06:58:24] <jealousmonk> Ah!
[06:58:25] <Bike> (let ((x (cons 1 2))) (eq x x)) would be true
[06:58:40] <jealousmonk> I see
[06:59:47] <jealousmonk> mfiano: I will take a look at these links later, thanks
[07:00:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:00:38] <Bike> similarly two arrays are eq if they came from the same make-array, two symbols if they came from the same intern/make-symbol, etc
[07:00:50] <Bike> "two" and "two"* again
[07:02:27] *** Joins: aeth (~aeth@user/aeth)
[07:05:27] <jealousmonk> Makes sense
[07:12:42] <jealousmonk> "if you do (+ 1 most-positive-fixnum) twice, the implementation will probably cons up two different bignums to represent the same integer" what do you mean here when you say do that twice, can you give an example, Bike?
[07:14:51] <jealousmonk> "cons up" means create a new object?
[07:19:17] <Bike> yes, that is what "cons up" means, sorry.
[07:19:36] <Bike> i mean that (eq (+ 1 most-positive-fixnum) (+ 1 most-positive-fixnum)) might be true but might be false
[07:20:00] <Bike> the implementation is allowed to construct two separate (non-eq) objects representing the same integer
[07:21:25] <Bike> And also, (let ((x (+ 1 most-positive-fixnum))) (eq x x)) could be true or false
[07:22:07] <Bike> the implementation has this latitude due to the "unless they are numbers or characters" you noticed in the definition of eq
[07:30:51] <beach> Good morning everyone! 
[07:32:18] <jealousmonk> The eq example makes sense to me because by evaluating the two expressions you could create two new objects (who knows if both would be useful later on?) or just make a single one to be "efficient".
[07:33:04] <jealousmonk> Now the let example makes no sense to me.
[07:34:43] <jealousmonk> For me it would only be necessary to create an object when binding it to X.
[07:36:01] <beach> jealousmonk: That is true, but the standard still allows for the implementation to copy that object.  I don't know of an implementation that does that though. 
[07:37:02] <jealousmonk> Good morning, beach
[07:37:44] <jealousmonk> hmm, got it
[07:38:03] <Bike> by "the let example" you mean (let ((x (+ 1 most-positive-fixnum))) (eq x x))?
[07:38:10] <jealousmonk> yes
[07:38:19] <Bike> practically speaking, for that example pretty much every implementation will report true
[07:38:33] <Bike> the copying is more useful in other situations that may take a little more background to understand
[07:38:53] <Bike> primarily, it allows bignums to be stored into arrays without maintaining their identity
[07:39:00] <Bike> I don't know if you've used the arrays at all
[07:41:07] <jealousmonk> not yet, but no hurry :)
[07:41:39] <jealousmonk> with everyone's help today I was able to clarify a lot of things
[07:41:51] <jealousmonk> thanks
[07:55:03] <beach> mfiano: It is not true that everything is Common Lisp is an object. 
[07:55:19] <mfiano> I was using a pedagogical device
[07:55:29] <beach> OK, fair enough.
[07:55:38] <mfiano> Introducing little bits of knowledge at a time, even if false, is a good teaching strategy
[07:55:55] <beach> I agree.  Just checking.
[07:58:39] *** Joins: beach` (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)
[07:59:34] *** Quits: beach (~user@2a01:cb19:150:3400:31b6:1d0a:d09:5e43) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)))
[07:59:37] *** beach` is now known as beach
[08:16:36] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:19:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:30:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:35:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:47:26] *** Joins: Oladon (~olad@98.43.81.226)
[08:57:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:08:12] *** Quits: occ (~occ@user/occ) (*.net *.split)
[09:08:12] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[09:08:12] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[09:08:13] *** Quits: Oladon (~olad@98.43.81.226) (*.net *.split)
[09:08:14] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[09:08:14] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:08:14] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (*.net *.split)
[09:08:14] *** Quits: gko` (~user@user/gko) (*.net *.split)
[09:08:14] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (*.net *.split)
[09:08:15] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[09:08:15] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[09:08:15] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[09:08:15] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[09:08:15] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:08:15] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:08:15] *** Quits: ogamita`` (~t@hubble.informatimago.com) (*.net *.split)
[09:08:16] *** Quits: malaclyps (~mala@user/malaclyps) (*.net *.split)
[09:08:16] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (*.net *.split)
[09:08:16] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[09:08:16] *** Quits: nexeq (nexeq@user/nexeq) (*.net *.split)
[09:08:17] *** Quits: plexi (~orcabot@digital.sanctuary.org) (*.net *.split)
[09:08:17] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:21:14] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[09:21:14] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[09:21:14] *** Joins: nexeq (nexeq@user/nexeq)
[09:21:14] *** Joins: ns12 (~ns12@user/ns12)
[09:21:14] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[09:22:45] *** Joins: Oladon (~olad@98.43.81.226)
[09:22:45] *** Joins: Josh_2 (~user@37.25.47.130)
[09:22:45] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:45] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[09:22:45] *** Joins: gko` (~user@user/gko)
[09:22:45] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[09:22:45] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[09:22:45] *** Joins: opcode (~opcode@user/opcode)
[09:22:45] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:22:45] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:22:45] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:22:45] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:22:45] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[09:22:45] *** Joins: malaclyps (~mala@user/malaclyps)
[09:23:35] *** Joins: occ (~occ@user/occ)
[09:23:35] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[09:23:35] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[09:36:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:41:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:49:14] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:50:05] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: sleep)
[09:54:22] *** Joins: domovod (~domovod@176.196.122.197)
[10:12:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:15:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:20:26] *** Joins: tewi (~tewi@apn-95-41-105-74.dynamic.gprs.plus.pl)
[10:31:36] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 245 seconds)
[10:33:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[11:15:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:21:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[11:45:26] *** Quits: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[12:01:44] *** Joins: shka (~herr@109.231.0.226)
[13:17:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:22:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:37:08] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:49:31] *** Joins: treflip (~user@user/treflip)
[14:52:04] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[15:01:05] *** Joins: occ (~occ@user/occ)
[15:05:40] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[15:07:54] *** Joins: occ (~occ@user/occ)
[15:19:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:20:12] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:24:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:57:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:39:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[16:49:34] <rotateq> Would you say using PROG1 is still appropriate some times for reading intention?
[16:50:24] <Josh_2> prog1 is useful
[16:53:17] <rotateq> oki :)
[16:54:07] <rotateq> it's just i branched some code of an important lib i use and there can be made some syntactical imporovements ^^
[16:54:25] <rotateq> or like changing (= 0 x) to (zerop x)
[16:54:38] <Josh_2> Nice :) 
[16:54:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:55:13] <rotateq> Josh_2: but when looking at way older code, it seems people often liked to use PROG and other friends
[16:57:09] <beach> PROG1 is still very useful.
[16:58:43] <rotateq> Yes also it can help keeping track I would say.
[16:59:30] *** Joins: Bike (~Glossina@71.69.170.70)
[17:08:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:08:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:09:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:14:34] <pjb> i++ <=>  (prog1 i (incf i)) ; ++i <=> (incf i)
[17:17:31] <Josh_2> I find prog1/2 most useful in macros which wrap a body
[17:17:32] <rotateq> right this operator
[17:18:40] <rotateq> yes Josh_2. i have even now in this one long file here substitute aroung 10 those situations with (prog1 output ...)
[17:19:41] <rotateq> pjb: then good we have the other thing
[17:28:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:33:34] *** Joins: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de)
[17:33:53] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[18:05:06] *** Joins: jealousmonk (~user@user/jealousmonk)
[18:28:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:33:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:37:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:42:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[18:47:55] *** Quits: jealousmonk (~user@user/jealousmonk) (Read error: Connection reset by peer)
[18:48:16] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:07:32] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 240 seconds)
[19:11:07] *** Joins: neominimum (sid537410@user/neominimum)
[19:17:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:24:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:38:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:46:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:46:44] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[19:53:41] *** Joins: occ (~occ@user/occ)
[19:54:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:29:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:34:55] *** Joins: Oladon (~olad@98.43.81.226)
[20:43:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:09:49] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[21:11:30] *** Joins: domovod (~domovod@176.196.122.197)
[21:37:47] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[21:42:06] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:43:23] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:44:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:45:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Client Quit)
[21:45:55] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:59:37] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.3)
[22:00:15] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[22:22:15] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[22:22:28] *** Joins: jealousmonk (~user@user/jealousmonk)
[22:45:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:49:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:49:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:07] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:56:44] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:58:20] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[22:58:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:02:06] <jealousmonk> Suppose x is '(A B C). So (car x) returns a pointer to the symbol A. This makes me think that, I don't know, the memory address should be printed. Could I say that the PRINT part of the REPL automatically dereferences that memory address so the symbol A is printed?
[23:02:55] <Bike> you probably shouldn't be thinking in terms of pointers at all, but yes, something like that.
[23:03:48] <jealousmonk> Fine, thanks
[23:03:53] <Bike> what PRINT on a symbol will do is interrogate the symbol for its name and package, which will generally involve a memory load
[23:04:45] <Bike> if you're used to C, it would be something to the effect of symbol->name
[23:05:58] <jealousmonk> Cool
[23:15:14] *** Joins: santiagopim (~user@84.78.243.45)
[23:36:18] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:40:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:43:08] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:55:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
