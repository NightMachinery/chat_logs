[00:07:02] <hayley> Good morning everyone!
[00:07:29] <moon-child> good morning beach!
[00:14:25] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:19:27] <moon-child> haha, wow.  Apparently a:visited is an infoleak.  Never thought of that
[00:35:21] <lagash> moon-child: you mean like browsing history can deanonymize you?
[00:37:01] <moon-child> lagash: a:visited acts as a browsing history oracle to a malicious website that you visit
[00:39:38] <hayley> https://gbracha.blogspot.com/2011/01/maybe-monads-might-not-matter.html "By now you realize that if monads were a stock, I’d be shorting it."
[00:39:39] -ixelp- Room 101: Maybe Monads Might Not Matter
[00:45:48] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:31:10] <epony> "advocacy" is a mailing list you can always unsubscribe from ;-)
[01:51:49] <shka> maybe the real monads were the friends we made along the way
[01:52:54] <shka> "So perhaps the true value of monads lies in their exclusionary nature."
[01:53:00] <shka> Well, that's it
[01:53:17] <shka> I am adding haskell to list of communities i don't like
[02:13:01] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[02:13:13] *** Joins: shka (~herr@109.231.0.226)
[02:16:56] <drakonis> it is the essence of haskell.
[02:17:08] <drakonis> mountains of jargon in which you can hide behind
[02:24:41] <hayley> https://www.youtube.com/watch?v=t42y7xwdP4s
[02:24:41] -ixelp- 07 The Fat Lady of Limbourg - YouTube
[03:03:03] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[03:28:54] <GreaseMonkey> one thing one can't hide behind, of course, is the fact that everything which gets executed on a computer goes through opcodes anyway
[03:29:23] <GreaseMonkey> even if you pull an early PHP and interpret everything at the string level, the interpreter is in the form of opcodes
[04:21:40] <White_Flame> last I read it, the wikipedia page actually had the easiest to grok monad description of anything I'd found
[04:21:55] <hayley> You have the >>= and return and that's it
[04:24:15] <White_Flame> but why?  dot gif
[04:24:28] <White_Flame> (eg, what are they for and how are they practically used?)
[04:24:58] <White_Flame> but from most reading, it's a "pattern" so fundamental that so many things already technically are monads that it's likely a degenerate abstraction
[04:25:38] <hayley> idk
[04:32:27] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:37:48] <drakonis> why do lispers feel so strongly about scheme having #t and #f?
[04:38:16] <hayley> I don't.
[04:38:51] <drakonis> like
[04:39:08] <drakonis> apparently not having '() equals nil is bad
[04:39:10] <drakonis> lol
[04:39:51] <moon-child> drakonis: the main thing I feel strongly about is () not being self-evaluating
[04:40:28] <White_Flame> I would actually prefer the symbol NIL's constant value being (), not them being literally the same thing
[04:40:36] <moon-child> and really that's more a peeve than a practical matter
[04:40:57] <drakonis> why though?
[04:41:03] <moon-child> (though I do know in my loop port I probably messed it up at least once, cuz my scheme implementation is lax about that)
[04:41:11] <White_Flame> how is not not self-evaluating?
[04:41:24] <drakonis> i dont understand the problem
[04:41:37] <drakonis> you're trying to call a non existent procedure if you invoke ()
[04:41:44] <moon-child> drakonis: it's convention.  Objects that aren't conses or symbols should self-evaluate.  Schemers' argument is that it's really objects that aren't _lists_ or symbols.  But I do not buy it
[04:41:47] <White_Flame> () => NIL
[04:41:50] <White_Flame> at the repl
[04:41:52] <moon-child> White_Flame: in scheme, it is not specified what () evaluates to
[04:42:03] <drakonis> it is cl convention isnt it
[04:42:05] <moon-child> and many implementations make it an error
[04:42:06] <White_Flame> oh, sheem
[04:42:07] <drakonis> the lisps of olde
[04:42:50] <moon-child> White_Flame: 'I would actually prefer the symbol NIL's constant value being (), not them being literally the same thing'  I feel like, once you've made () its own object, there's no reason to have nil anymore at all
[04:43:11] <White_Flame> yes, you could make a case for that
[04:43:17] <moon-child> unless you say nil is false, but it evaluates to the empty list, in which case the wtfery just went up 600%
[04:43:35] <hayley> An empty marker, e.g. null?
[04:43:39] <moon-child> White_Flame: I mean, if you care enough to say () is not self-evaluating, you can still just write '().  So I don't see the use case for nil evaluating to it
[04:43:41] <White_Flame> you'd have to say the empty list is false
[04:43:52] <hayley> But Scheme has #<void> and #f already.
[04:44:00] <White_Flame> () is only self-evaluating because it is EQ NIL
[04:44:12] <drakonis> i feel like this is an ad hoc justification for backwards compat with the old lisps
[04:44:19] <White_Flame> moon-child: just for naming convenience, to look like a name
[04:44:36] <moon-child> White_Flame: I would say rather that () and NIL are both strings which read the same way, and that the object they read to evaluates to itself
[04:44:45] <drakonis> post hoc, that is.
[04:44:59] <aeth> hayley: Scheme doesn't have #<void>. Sounds like an implementation-specific thing.
[04:45:09] <aeth> doesn't work in Guile or Racket
[04:45:16] <hayley> Hm. No (void) or something?
[04:45:20] <aeth> (or Chibi)
[04:45:31] <hayley> Ah, (void) is a Racket thing.
[04:45:34] <aeth> hayley: No, I mean, it definitely exists, just unspecified. Some implementations literally call it #<unspecified>
[04:45:52] <drakonis> is it not in r7rs?
[04:45:53] <aeth> or, hmm, looks like you can get it in Racket
[04:46:05] <aeth> (display (display 42)) => 42#<void>
[04:46:06] <moon-child> s7 has #<unspecified> but also #<undefined> and also #<whatever-the-hell-you-want-here>
[04:46:09] <hayley> The result of (list (if #f 1))
[04:46:13] <moon-child> and it's never been clear to me when you're supposed to use which
[04:46:18] <aeth> So #<void> is what Racket uses, you just can't type it literally
[04:46:30] <aeth> And it doesn't show up in the REPL unless you force it, e.g. display
[04:46:50] <aeth> It's Guile that does #<unspecified> with display's return value
[04:47:05] <aeth> chibi uses #<undef>
[04:47:19] <aeth> I've definitely seen #<undefined> before, but I guess that's another, maybe Chicken
[04:47:45] <aeth> it's kind of a ridiculous part of Scheme
[04:47:55] <moon-child> complain to jcowan
[04:48:05] <hayley> https://groups.google.com/g/comp.lang.functional/c/pxNFpLX6hoQ/m/dgSC6RCpjB8J Pack it up, we've solved programmer self-hatred
[04:48:07] -ixelp- Applications for which functional programming is better than imperative?
[04:48:11] <aeth> CL would just return NIL (or the input variable) where Scheme returns a useless value. Kind of defeats the point of everything being an expression.
[04:48:18] <hayley> "After one semester, the Pascal people were still having trouble getting their programs to compile, and most of them never wanted to see a computer again."
[04:48:32] <hayley> No batch compiler -> no never wanting to see a computer again. Easy as.
[04:48:36] <moon-child> til lisp is functional
[04:48:48] <hayley> TIL APL is functional too.
[04:48:58] <aeth> moon-child: the cat's out of the bag as far as "unspecified" return value literally being an #<unspecified> return value whose name is, well, unspecified and implementation-specific
[04:49:05] <hayley> Ditto for Erlang, as Joe Armstrong also shows up.
[04:49:06] <aeth> and some implementations probably have more than one
[04:49:27] <aeth> moon-child: a new standard can't really fix that because it's built into the various increasingly-diverging forks of the language
[04:49:28] <moon-child> apl is function-level (cf backus) and referentially transparent
[04:49:49] <moon-child> aeth: is rnrs supposed to be compatible with rn-krs?
[04:49:56] <moon-child> I guess r7rs-large is supposed to be compatible with r7rs-small
[04:49:59] <aeth> Nothing's stopping a CL-like Scheme from using #f for the "unspecified" value to behave a lot like CL's NIL
[04:50:10] <aeth> It would, however, encourage someone to write code that breaks everywhere else in rare edge cases
[04:50:12] <drakonis> r7rs-large is going to be larger than CL lol
[04:50:14] <drakonis> gonna love that
[04:50:30] <moon-child> drakonis: yeah but they also specified threads
[04:50:33] <moon-child> and I think networking too
[04:50:42] <moon-child> things which cl lacks, and needs
[04:50:45] <drakonis> at least they'll all stop complaining about scheme not being good enough
[04:50:55] <sm2n> lol that won't happen
[04:51:09] <drakonis> i'm not sure if you're framing that as good or bad
[04:51:40] <drakonis> its still being voted on
[04:51:40] <hayley> Scheme memory model when
[04:51:53] <drakonis> memory model...
[04:51:57] <moon-child> hayley: they just copied c++^Wc lol
[04:52:16] <drakonis> its not specified
[04:52:18] <hayley> Do they allow for reading values that were never written?
[04:52:28] <aeth> I think the r7rs-large version of Scheme should include a full implementation of newLISP
[04:52:46] <hayley> If so, data races can break memory safety. Congratulations!
[04:53:25] <drakonis> don't see anything about that in r7rs-small
[04:53:44] <hayley> aeth: newLISP specification when
[04:53:45] <sm2n> aeth: Plus RFC 5322
[04:53:48] <drakonis> ah
[04:53:54] <drakonis> its under storage model i guess?
[04:54:05] <drakonis> https://small.r7rs.org/attachment/r7rs.pdf see 3.4.
[04:54:58] <drakonis> there's feature flags now
[04:54:59] <drakonis> lol
[04:55:31] <hayley> No mention of threads here.
[04:55:42] <drakonis> r7rs-large is the one you want
[04:56:12] <drakonis> https://github.com/johnwcowan/r7rs-work/blob/master/ColorDockets.md
[04:56:12] -ixelp- r7rs-work/ColorDockets.md at master · johnwcowan/r7rs-work · GitHub
[04:56:16] <drakonis> this is what's being voted on
[04:56:17] * hayley tries s/small/large and no domain name exists.
[04:57:18] <drakonis> the first two have been voted already
[04:57:21] <hayley> "Threads: SRFI 18 or SRFI 226 (comprehensive)" No mention of a memory model in either?
[04:58:25] <drakonis> 226 is a draft
[05:00:01] <drakonis> maybe the references can help
[05:00:34] <hayley> Someone might need https://web.stanford.edu/class/cs240/readings/p261-boehm.pdf still.
[05:02:25] <drakonis> yes.
[05:02:37] <moon-child> hayley: https://srfi.schemers.org/srfi-230/
[05:02:38] -ixelp- Atomic Operations
[05:03:00] <hayley> Thanks!
[05:03:17] <moon-child> it's literally just copied from c
[05:03:47] <hayley> Right. But substantially less mucho texto for the description of each ordering option.
[05:04:00] <moon-child> lol fair
[05:04:11] <moon-child> also iirc they don't support all the orderings (just seqcst and relaxed?)
[05:04:15] *** Joins: Jacobis9000 (~jonaholuf@host81-155-142-56.range81-155.btcentralplus.com)
[05:04:17] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:04:27] <moon-child> oh no they have all of them
[05:04:33] <drakonis> oh no?
[05:04:33] <hayley> However, the specification doesn't mention what happens if you over/underflow a fixnum box.
[05:04:39] <moon-child> but they skipped the contentious one
[05:04:47] <Jacobis9000> hello folks!
[05:05:01] <hayley> "The sample implementation is an R7RS implementation based on SRFI 18." 🤔
[05:05:13] <drakonis> v. incestuous
[05:05:26] <hayley> Well, I guess you just have to make everything a mutex, and so everything is sequentially consistent.
[05:07:15] <drakonis> https://github.com/johnwcowan/r7rs-work/blob/master/PackageSymbolsCowan.md this tho
[05:07:16] -ixelp- r7rs-work/PackageSymbolsCowan.md at master · johnwcowan/r7rs-work · GitHub
[05:07:29] <drakonis> give me these goods
[05:07:38] <hayley> Though it would be nice if they mentioned why there's reordering to begin with, and that it exists at all. Else it's kinda odd to see "you can reorder reads and writes with threads sometimes". 
[05:08:00] <hayley> ...all the way down in section 4.3.
[05:08:30] <hayley> "Many general-purpose programming languages like C, C++, Go, or Rust expose a standard set of atomic operations to the programmer" JMM: am I a joke to you?
[05:09:06] <hayley> moon-child: Also helps for brevity, I guess, that writes to things that aren't atomic boxes are completely unspecified(?)
[05:09:25] <hayley> i.e that doesn't really suffice for a memory model IMO
[05:10:55] <moon-child> hm, I think it suffices, it's just dumb and a pain in the ass
[05:11:51] <hayley> Sure, it is a memory model, but it's indeed a PITA if you forget to lock or use atomics.
[05:26:01] <drakonis> what is cl's memory model anyways?
[05:35:02] <hayley> Non-existent.
[05:35:13] <hayley> There are no threads, so a memory model is not necessary.
[05:37:27] <drakonis> i see
[05:37:55] * moon-child crosses his fingers c11 doesn't end up in wscl
[05:38:18] <drakonis> what exactly does wscl aim to do?
[05:38:30] <hayley> moon-child: See https://gist.github.com/Bike/a89cbfda64ace273b12eed8675dda632 for the closest thing to WSCL concurrency.
[05:38:31] -ixelp- Common Lisp extension specifying concurrency · GitHub
[05:38:50] <moon-child> oh yeah I forgot about that
[05:39:07] <drakonis> its clear it isnt a sequel to ansi cl
[05:39:15] <hayley> "Possibilities for order are :unordered, :relaxed, :acquire, :release, :acquire-release, :sequentially-consistent." RIP moon-child
[05:39:47] <drakonis> so its the exact same shit lol
[05:39:49] <drakonis> lmao
[05:39:57] <drakonis> works exactly like the srfi
[05:40:08] <hayley> "In particular, for safety reasons it is encouraged to make as many accesses as possible have at least the unordered ordering, even without the atomic macro being used." They should all be unordered by default. /me complains to Bike
[05:40:47] <hayley> OTOH "By definition, each read operation with defined behavior executed by a program has an associated write operation, such that the value written by the write is read by the read."
[05:41:09] <hayley> But then "If a program has a data race, its behavior is undefined."
[05:41:11] <hayley> Off I go to picket.
[05:41:16] <drakonis> at least that's something that can be fixed
[05:41:21] <drakonis> right, RIGHT?!
[05:43:09] <hayley> Yeah, easy fix. 
[05:43:32] <drakonis> you have far more power to improve this than the srfi
[05:43:42] <hayley> If there are multiple candidates for the associated write, then the implementation can choose one arbitrarily. Thus the resulting program is non-deterministic, but still safe.
[05:44:03] <hayley> "safe" as in "references to objects cannot be forged without a write operation publishing them", loosely.
[05:46:07] * moon-child reads 'is-atomic-p
[05:46:11] <moon-child> '
[05:46:15] * moon-child wonders that the 'is' is doing there
[05:47:24] <drakonis> ok so is wscl the r1rs?
[05:47:55] <edgar-rft> moon-child: it tests if the islamic state is atomic
[05:48:17] <moon-child> lol
[05:48:38] <drakonis> womp womp
[06:01:34] <drakonis> i'll admit that i wish the concurrency srfi had cml semantics instead
[06:01:37] <drakonis> buut
[06:01:43] <drakonis> guile has a library that does that
[06:10:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:31:04] <drakonis> https://github.com/johnwcowan/r7rs-work/blob/master/ContextsCowan.md lol
[06:31:05] -ixelp- r7rs-work/ContextsCowan.md at master · johnwcowan/r7rs-work · GitHub
[06:31:06] <drakonis> monads...
[06:40:58] <hayley> https://shipilev.net/blog/2016/close-encounters-of-jmm-kind/cart-wtf-doing.png
[06:57:13] <kakuhen> monads are making me suffer right now
[06:57:19] <kakuhen> not the ones that programmers and category theorists often think of, however
[06:57:38] <kakuhen> instead, the stupid definition in homological algebra where you have a complex A -> B -> C
[06:58:24] <kakuhen> well, there's more to it than that, you usually require B to be some sort of vector bundle, another really fun thing whose definition takes a long time to unpack.
[07:00:00] <kakuhen> my homological algebra class is graded based on your performance of 10 exercises that get assigned throughout the entire quarter, and to ensure that each problem takes you a week to solve, my professor loves to give us the most obscure constructions ever
[07:09:21] *** Quits: Jacobis9000 (~jonaholuf@host81-155-142-56.range81-155.btcentralplus.com) (Ping timeout: 256 seconds)
[07:11:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:24:24] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:31] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:14:37] *** Joins: domovod (~domovod@176.196.122.197)
[08:27:18] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:50:09] <hayley> https://www.youtube.com/watch?v=NkBXgcN3fXo
[08:50:10] -ixelp- The Surprisingly Complex Music of Wii Play's Tanks! - YouTube
[09:12:32] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[09:17:04] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[09:20:47] *** Joins: shka (~herr@109.231.0.226)
[09:31:31] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:31:53] <dave0> maw
[09:37:04] <hayley> maw
[09:37:39] <dave0> hi hayley 
[09:37:41] <dave0> https://www.dailymotion.com/video/x7umsqk
[09:37:41] -ixelp- Looney Tunes - BUGS BUNNY - Ali Baba Bunny - video Dailymotion
[09:37:59] <dave0> it's bugs bunny and daffy duck
[09:38:01] <dave0> classic
[09:42:41] <contrapunctus> maw 😄️
[09:43:04] <dave0> maw contrapunctus 
[10:14:34] <gilberth> Ok. I believe I have ^ and $ now, having \< and \> too will be easy. I could have arbitrary lookbehind, but not yet arbitrary lookahead.
[10:15:25] <hayley> How do you go about implementing those? /me still thinking of having different derivatives for other "conditions" × character sets.
[10:15:55] <gilberth> For lookbehind, I told you.
[10:16:18] * hayley checks paper
[10:16:31] * gilberth checks paper
[10:18:09] <hayley> That's lookbehind, sure, but it's not "arbitrary" like the PCRE-ish stuff is. e.g. (?<=a)b
[10:18:16] <gilberth> It's there but in a very convoluted way tailored to what lex(1) does wrt to "^".
[10:19:51] <hayley> So this β is the bastard child of α then. Sure.
[10:20:01] <gilberth> But I wrote that. You just let REs run looking for the lookbehind all the time and arrange for the corresponding (?<=..) be nullable when the lookbebind RE is nullable. Dead easy.
[10:20:17] <hayley> Right.
[10:21:02] <hayley> https://www.youtube.com/watch?v=0V3aBGp6kSc Law of headlines?
[10:21:03] -ixelp- Are These The Graphics Heroes You've Been Waiting For? - YouTube
[10:21:27] <gilberth> Anyhow, I ask myself, why I even bother, as you don't need that for scanners.
[10:21:58] <hayley> Interesting, but /me already hurts her head with the rest of regular expression compilation, and other projects.
[10:22:24] <hayley> Still not sure yet if I'm going to gain much from global value numbering.
[10:22:56] <gilberth> Well, you are only bothered by your slow CL compiler.
[10:23:17] <hayley> It also does not do an awful lot of analysis that I want.
[10:23:59] <hayley> My guess: SICL has the first compiler that implements global value numbering, where the code generator is written in Lisp (so no bailing out to the JVM, LLVM or C compiler to do it). 
[10:25:05] <gilberth> Yep, perhaps. I always thought that having a "modern" CL compiler implemented by the book, would be good thing. It's not rocket science.
[10:26:08] <gilberth> Maybe, when I am bored I'll attempt to write my own CL->CL compiler. When you browse compiler macros, you recognize that most do things, which a modern compiler would come up by its own.
[10:26:10] <hayley> But I don't think I'd get the P - blah analysis from a "generic" GVN pass.
[10:26:41] <gilberth> Yep, I believe, you don't.
[10:28:31] <gilberth> Anyhow, I wrote about the P-d thing too, didn't I?
[10:28:38] <hayley> Yes.
[10:30:08] <hayley> Seems that I've already turned like 100 registers for the dyslexia simulating RE into about 7. But I can't say until I've implemented the "fix-up code" part, which is actually pretty easy still.
[10:30:34] <hayley> And then I found for SICL that you want to run your usual dead code elimination pass after, to find much of a benefit.
[10:31:01] <hayley> (In our case, just dead assignments, i.e. transitive closure of values that are used in exit maps.)
[10:38:06] <gilberth> I wonder how there could be dead assignments at all.
[10:43:45] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:52:59] <hayley> idk, I just found I'd generate assignments which probably matter if we continue looping, but not if we exit the loop.
[10:53:15] <hayley> But I did make up half of DFA generation.
[10:54:09] <hayley> It's okay, we have compilers though. Which is amusing when you compare optimising our RE engines vs optimisations in others.
[10:55:13] <hayley> Ours look a lot more like traditional compiler optimisations. Seen someone with a Pike VM identify redundant registers or something? Probably not.
[10:56:14] <gilberth> Nah, I meant in the context of a compiler. That we generate them initially is expected.
[10:57:01] <hayley> In the context of a compiler? Sure. You do global value numbering, which (more or less, honestly) generates SSA. Then you kill assignments to values which are never used.
[10:57:05] <gilberth> That's part of the point of what we do. While matching, we don't know yet, whether a register will survive.
[10:57:41] <hayley> e.g. { x <- 0; x <- 1; x <- 2; return x } becomes { x0 <- 0; x1 <- 1; x2 <- 2; return x2 } Now you can remove x0 and x1 as they are unused.
[10:58:36] <hayley> (It's not exactly SSA, and in fact SICL generates "static few assignments" where you just have multiple assignments, rather than a phi node, but it's the same shit, really. But the "sources of values are obvious" property is common to both.)
[10:58:57] <gilberth> No, you can't! Those variables must go to the stack!!!
[10:59:50] <hayley> gilberth: Hm, I recall you have your "tags in Q' not in Q" whereas I have "tags in Q that are reachable by walking the RE without skipping over a character". The former could avoid some useless assignments that the latter doesn't.
[11:00:28] <hayley> :)
[11:00:53] <gilberth> Where do I have that? While constructing?
[11:01:35] <hayley> Yes.
[11:01:53] <gilberth> And you don't?
[11:02:03] <hayley> Scratch that, I do.
[11:02:09] <gilberth> ok
[11:03:05] <hayley> Rather there is a KEEP-USED-ASSIGNMENTS function which eliminates assignments that are obviously dead based on the next RE. It does something.
[11:04:48] <hayley> In any case, some GVN should help. But so far, emitting broken code does not seem to improve time taken in the Lisp compiler as much as hoped.
[11:05:35] <gilberth> Borken?
[11:06:13] <hayley> Yes, I currently don't generate assignments between values, which you really need to do.
[11:07:08] <hayley> But not hard. For each variable in the old state, you make sure there is an assignment from the old value to new value.
[11:07:58] <hayley> Here for SICL: <https://github.com/no-defun-allowed/SICL/blob/global-value-numbering/Code/Cleavir/HIR-transformations/Global-value-numbering/apply-gvn.lisp#L31-L57>
[11:07:58] -ixelp- SICL/apply-gvn.lisp at global-value-numbering · no-defun-allowed/SICL · GitHub
[11:09:11] <hayley> Such a situation comes up in a loop, where you merge two values upon restarting the loop. In SSA I guess you insert a phi node instead.
[11:12:03] <hayley> ...and I have an example of it happening in <https://github.com/no-defun-allowed/SICL-tools/blob/master/loop.png?raw=true> - look at what happens with VALUE-9 near the bottom right.
[11:12:16] <hayley> (Black lines are control flow, green and red are data flow.)
[11:13:44] * hayley over-explaining since she got to do this crap with Common Lisp code already. Not sure if starting with simpler RE code would have been easier.
[11:16:08] <hayley> Also fun when you fuzz test your GVN pass, but instead you find bugs in the rest of the compiler.
[11:18:12] <gilberth> Yeah, that's right. I catch a few dead assignments already during construction. I wonder, if I could skip that.
[11:18:49] <gilberth> I mean, my dataflow stuff came late.
[11:20:48] <hayley> I just have affine tags for avoiding the obvious [A <- P] -> [A_1 <- A_0] -> [A_2 <- A_1] -> ... noise. Guess I should disable that and see if it's actually a useful hack to do before GVN.
[11:22:31] <hayley> ...and due to the P - n analysis, no assignments actually appear other than fixing up between values, IIRC.
[11:27:48] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[11:31:10] *** Joins: shka (~herr@109.231.0.226)
[11:47:33] <hayley> One response to Terminal Boredom: "I think it’s a bit disingenuous to look at existing projects and say “where’s the 200 line code limit”. Projects grow 🤷‍♀️"
[11:47:54] <hayley> But such projects are still being advertised as "more or less 200 lines of code". I don't want a limit, that's dumb, I just want actually realistic marketing.
[11:48:20] <hayley> Especially when such marketing is between 5 and 30 times too small!
[11:48:38] <hayley> s/marketing is/marketing figures are/
[12:02:27] *** Joins: treflip (~user@user/treflip)
[12:05:50] <contrapunctus> In a `defsystem` , is there any way to reduce the duplication of `:components ((:file "foo/bar/a") (:file "foo/bar/b") ...)` ?
[12:06:33] <hayley> :components ((:module "foo" :components ((:file "bar") (:file "baz")))) and just nest :module for more directories.
[12:06:50] <contrapunctus> thanks ^^
[12:07:21] <contrapunctus> I saw `:module` in the manual but I wasn't sure if this was what it was meant for.
[12:21:22] <shka> 80s cheesy music https://www.youtube.com/watch?v=OKxBk4V79Co
[12:21:22] -ixelp- Rock Me Amadeus - YouTube
[12:23:05] <hayley> "550 MH/s of scrypt is a lotta hashes - either you need a lot of hardware, or Litecoin miners got really good." *checks* "Looks like both."
[12:41:30] <phoe> https://cdn.discordapp.com/attachments/532344856731975690/932562708908359731/IMG_20220117_100432.jpg
[12:41:35] <phoe> ?fbclid=
[12:43:42] <shka> phoe: splendid
[12:44:30] <phoe> shka: ?fbclid=
[12:45:58] <hayley> .oO(Do I need to rebase this shit onto newer Bitcoin? <https://www.cvedetails.com/vulnerability-list/vendor_id-12094/Bitcoin.html> suggests yes unfortunately.
[12:45:59] -ixelp- Bitcoin : Security vulnerabilities
[13:12:32] <contrapunctus> phoe: lol, just why?
[13:13:22] <contrapunctus> also...holy crap is Org mode/poly-org being buggy as hell today
[13:18:05] <hayley> Also, why the hell is the Newspeak IDE running really slowly for me today?
[13:19:33] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:25:12] <pl> mmm, cryptoshit vulnureabilities
[13:25:41] <pl> I'm tempted to build a system to automatically scan and attack ethereum contracts
[13:26:20] <hayley> Good idea!
[13:27:24] * hayley really preferred the Newspeak-on-Squeak version.
[13:28:33] <pl> hayley: the biggest FOMO of cryptoshit is from seeing all the rugpulls
[13:28:42] <pl> and wallet/contract emptying
[13:40:39] <selwyn> wallet inspector memes but irl
[13:41:39] <selwyn> https://www.youtube.com/watch?v=X6zsxsC6iZw
[13:41:40] -ixelp- The Simpsons - Wallet Inspector - YouTube
[13:43:31] <pl> yep
[13:44:04] <pl> And the fact that with many of those cases, you're going to have high probability of kicking rich fucks instead of scamming the poor?
[13:44:16] <pl> it makes it really hard to keep the white haat
[13:44:17] <pl> *hat
[13:46:39] <hayley> Basically https://www.youtube.com/watch?v=tbHix56qfG8
[13:46:40] -ixelp- The Aircrash Bureau - YouTube
[13:48:14] <shka> some people just want to see cryptos burn
[13:49:27] <selwyn> another country banned them recently
[13:49:47] <pl> I'd prefer using AGM-114R9X on miners at times
[13:51:28] <shka> 114 is hellfire, right?
[13:52:00] <shka> oh shit, that's nasty
[13:54:32] <pl> it's anti-person hellfire with combined blunt and bladed attack, yes
[13:59:16] <phoe> contrapunctus: ?fbclid=
[14:00:30] <hayley> https://ar.al/2020/08/07/what-is-the-small-web/ also makes the claim that replication is not decentralised. Hilarious!
[14:00:30] -ixelp- What is the Small Web? – Aral Balkan
[14:38:21] <contrapunctus> Something has happened to phoe 🤔
[14:42:04] <shka> zuckerberg got him
[15:00:21] <pl> someone quickly ship emergency parens supply to cracow? ;)
[15:06:37] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[15:13:43] <ck_> so that's what orphaned processes are
[15:13:46] <ck_> without parens :(
[15:18:35] <pl> :D
[15:22:38] <hayley> How big is the Ethereum blockchain these days?
[15:23:39] <hayley> About 300GB apparently. Ouch.
[15:25:26] <hayley> Lots of bytecode to poke a stick at, methinks. Though most data won't be scripts presumably.
[15:30:53] <contrapunctus> hayley: you actually use Smalltalk as an IDE? 😳️
[15:31:19] <contrapunctus> * as an IDE for non-Smalltalk programming?
[15:31:44] <hayley> Newspeak was once hosted on Squeak. Otherwise no.
[15:34:02] <contrapunctus> hayley: ah...do you consider Newspeak to be...not a Smalltalk?
[15:34:43] <hayley> It is a Smalltalk, but it is not Squeak.
[15:37:36] *** Joins: semz_ (~semz@user/semz)
[15:37:42] *** semz_ is now known as semz
[15:38:14] *** Joins: treflip (~user@user/treflip)
[15:38:26] <hayley> Or, more specifically, Squeak is somewhat compatible with the Smalltalk-80 family, whereas Newspeak is a very different language with nested classes, access control, mirror-based reflection, actors, and some more stuff.
[15:38:54] <contrapunctus> ._.
[15:40:19] <hayley> The problem I was investigating is not applicable to Squeak, because it involves access control (what happens if a public slot "overrides" a private slot?)
[15:51:43] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:15:48] <epony> you would be wondering what problems are applicable to it since it is like forgotten it ever existed
[16:17:12] <epony> from the basket of apple-gives-free-languages-marketing-2go deparment ;-) it just works™ almost
[16:18:09] <epony> new model this year, new language variant ;-) fine selling points.. big business likes it
[16:18:24] <sham1> "mirror based reflection" so what, do I need to set up physical mirrors?
[16:18:42] <epony> the difference is just cosmetic but it has maximum followup and it gets your job done so fast, you never have to go to work anymore :-D
[16:19:27] <epony> or ever..
[16:20:15] <hayley> You need to play the instrumental part of 21st Century Schizoid Man. Sorry I don't make the rules
[16:21:26] <epony> 2-3 trillion dollar hyperinflated market bubble can not find the line ending since it does fashion painting and new CPUs now.. how fun can that be
[16:22:56] <epony> the wife/lifepod warranty expires soon, you need a new one ;-) save up
[16:24:50] <epony> when alan kay is your teacher, you will eventually learn to do presentations too
[16:26:45] <epony> so wtf is "reflective" supposed to mean, then.. something like CDN and PoP and mirroring like CPAN..
[16:27:58] <epony> https://en.wikipedia.org/wiki/Reflection_(computer_science)#Security_considerations seems a bit short for the megapoop effect it causes (like disappering of languages and product lines)
[16:29:14] <epony> you know "not every idea has to be applicable, some are just there for the list of ideas"  --business2business weakly®
[16:29:20] <pl> hayley: 300GB is not much to store or downloada, and I think it would be pretty fast to filter just for contract bytecode and contract-related transactions
[16:29:59] <shka> https://www.youtube.com/watch?v=FmnYQby-hzI wow, exomoon 
[16:30:00] -ixelp- Potential Discovery of an Exomoon That's Bigger Than Planet Earth - YouTube
[16:30:40] <selwyn> til broccoli was the 'vegetable of the 80s'? was it advertised on tv or sth
[16:30:55] <selwyn> shka: i am trying to work and you are posting gems :p
[16:31:18] <shka> selwyn: sorry, discovery of exomoon got me all excited
[16:31:57] <epony> the ticket is one way ;-) save up even more
[16:38:04] <selwyn> next level statistics is so important
[16:39:53] <selwyn> but it is never really elaborated on (presumably because it is so obscure to feature in these types of video)
[16:43:58] <shka> you mean: higher order moments?
[16:49:10] <selwyn> lol
[16:57:04] <shka> selwyn: no this, was a serious question
[16:57:24] <shka> more 80s
[16:57:42] <shka> soma fm u80s keeps on giving
[16:59:23] <shka> https://www.youtube.com/watch?v=PuCrM9I3tZ0
[16:59:24] -ixelp- Chalk Circle April's Fool full LP version HQ audio & lyrics onscreen! - YouTube
[16:59:52] <shka> cool tune
[17:03:21] <selwyn> h
[17:03:24] <selwyn> oh
[17:03:57] <selwyn> i imagine that reconstructing distributions from higher order moments is a fairly vanilla task
[17:04:56] <selwyn> but what they have to do at cern or at astronomical observatories that requires such expertise, i have no idea
[17:05:05] <selwyn> exotic hypothesis testing?
[17:05:40] <shka> selwyn: i would assume that the signal reconstruction 
[17:07:03] <selwyn> probably
[17:08:23] <shka> TIL game boy lacked integer division
[17:08:38] <shka> and somebody made a tomb raider port
[17:08:56] <selwyn> iirc it wasn't that good
[17:09:00] <shka> it uses lookup tables for division result
[17:09:34] <shka> i mean, that it works at all is pretty damn impressive 
[17:09:45] <selwyn> my first gamedev book built a software rendering engine for quake style fpses 
[17:09:47] <shka> because GBA was not 3D capable even
[17:10:26] <shka> i wonder if they could do that on SNES
[17:11:06] <selwyn> it uses (in java) fixed point arithmetic
[17:11:38] <selwyn> with interpolating between divisions during scanline rendering
[17:14:09] <shka> hayley: how about this style of GC? https://www.youtube.com/watch?v=x0TKwPnHc-M :P
[17:14:10] -ixelp- Did Morrowind on the Original XBOX really reboot itself to free memory ? | MVG - YouTube
[17:15:35] <selwyn> and an ugly hack to get hotspot to inline certain rendering code
[17:18:05] <shka> it is actually memory fragmentation mitigation strategy 
[17:20:23] <selwyn> is there any other way to handle memory fragmentation
[17:20:51] <shka> selwyn: in video games?
[17:21:04] <selwyn> for example
[17:21:13] <shka> well, there are, but this is special case
[17:21:22] <selwyn> well, i guess there you can just design your manual memory allocation cleverly
[17:21:32] <shka> namely, morrowind was initially developed for windows, and then xbox popped up
[17:21:42] <shka> so they were out of time and budget
[17:21:51] <shka> hence, HACKS
[17:22:23] <shka> including rebooting console apparently :P
[17:23:00] *** Joins: kevingal (~quassel@149.157.101.196)
[17:25:29] <shka> selwyn: you don't need to be even that clever in case of morrowind
[17:25:42] <shka> but 64mb is not much 
[17:27:40] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 250 seconds)
[17:27:47] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[17:28:17] <shka> blizzard outside
[17:32:26] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 250 seconds)
[17:32:44] *** Joins: kevingal (~quassel@2001:770:c0:401:29cd:58b4:2e08:bebe)
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:38:05] <selwyn> shka: is that normal
[17:38:36] <shka> not unusual, but weather has been unstable this winter
[17:40:54] <selwyn> the coldest month of the year is often february here
[17:40:58] <selwyn> would be nice to have snow
[17:45:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:51:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:56:50] <Gnuxie> we've already had a bit of snow 
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:57:03] <Gnuxie> i had a snowball fight last year, it was fun 
[17:57:10] <selwyn> great
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:02:46] <selwyn> don't like anti snow discourse
[18:03:22] <contrapunctus> selwyn: "anti-snow discourse"?
[18:03:35] <selwyn> people who complain about the snow
[18:03:44] <selwyn> just have fun instead
[18:04:25] <contrapunctus> TFW you're a plainsdweller who has never had snow
[18:08:32] *** Quits: treflip (~user@user/treflip) (Ping timeout: 240 seconds)
[18:08:59] <ck_> "when I was young ... " there was snow so cold and a ck_ so light I could walk on the crust without sinking in
[18:16:19] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:35:57] *** Joins: treflip (~user@user/treflip)
[18:48:42] <selwyn> i can't believe how prolific kraut is
[18:48:57] <selwyn> averages one of these massive videos every month
[18:49:06] <ck_> kraut .. and tea, that guy?
[18:50:36] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[18:50:40] *** Joins: Alfr (~Alfr@user/alfr)
[18:51:05] <selwyn> kraut is a youtuber who produces documentaries at an impressive rate
[18:55:07] <ck_> this one? https://www.youtube.com/c/KrautandTea/videos
[18:55:07] -ixelp- Kraut - YouTube
[18:55:15] <selwyn> yeah
[18:55:35] <ck_> "academics please respond", I remember that story
[19:14:09] *** Joins: joes (~joes@dyndsl-095-033-032-093.ewe-ip-backbone.de)
[19:53:50] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:56:40] *** Joins: wacki (~wacki@87.123.132.123)
[20:15:13] <ck_> has your cv-consulting session happened already, selwyn ?
[20:17:48] <selwyn> not yet
[20:17:54] <selwyn> hopefully on wednesday
[20:20:13] <ck_> omicron fingers crossed
[20:21:16] <selwyn> they are online
[20:21:27] <selwyn> but the university hasn't made any appointments available yet
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:24:20] <ck_> I'm not making quality jokes, forgive me. Am a little sleep deprived
[20:25:49] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[20:26:00] *** Joins: Catie (~user@user/catie)
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:34:39] *** Quits: kevingal (~quassel@2001:770:c0:401:29cd:58b4:2e08:bebe) (Remote host closed the connection)
[20:41:05] *** Quits: joes (~joes@dyndsl-095-033-032-093.ewe-ip-backbone.de) (Changing host)
[20:41:05] *** Joins: joes (~joes@hardfought/member/joes)
[20:51:40] <contrapunctus> I made some elementary code examples for making documents in the word processor format I'm working on...just document nodes (content) and layouts (structure), since I haven't yet thought about the style markup aspect... https://paste.rs/IPm
[20:52:45] <contrapunctus> Questions/suggestions welcome 🤔️
[20:53:45] <moon-child> what are these 'id's?
[20:54:38] <contrapunctus> moon-child: node IDs are used by layouts to refer to nodes...
[20:54:42] <shka> how do you query those documents?
[20:55:06] <moon-child> why must I use an id to refer to a node?  Why not point to it directly?
[20:55:17] <moon-child> .oO(greenspun's 10th law applied to lisp)
[20:55:29] <contrapunctus> shka: that's the other thing I've not yet thought about
[20:55:47] <contrapunctus> moon-child: I suppose that's possible...
[20:55:54] <shka> also, how do you actually edit this data structure
[20:57:33] <shka> it is lisp, syntax can be whatever you want, but the real question is what operations you want to perform on the document
[21:02:23] <contrapunctus> shka: whatever you may want to do in a word processor like LO Writer... 🤔️
[21:04:00] <contrapunctus> moon-child: are objects guaranteed to have a unique identity?
[21:04:53] <moon-child> are numeric ids?
[21:07:08] <moon-child> a newly created object will never be EQ to any other object.  Obviously, you are not prevented from taking multiple pointers to the same object, any more than you are prevented from having multiple instances of the same numeric id
[21:07:30] <contrapunctus> moon-child: why wouldn't they be? But it seems the answer might be "yes"...comparing two objects of the same class, with the same slots and values using `equal` yielded `nil` ...
[21:08:12] <moon-child> equal does not compare identity, it compares structure
[21:08:48] <moon-child> (however it does _not_ consider the structure of a standard object, because slots are implementation details and the specifiers were scared of generic functions)
[21:09:49] <moon-child> EQ compares identity
[21:10:33] <moon-child> 'why wouldn't they be?'  (make-document :nodes (list (make-section 1 1 "x") (make-section 1 1 "y"))) ;oops...
[21:13:35] <contrapunctus> moon-child: how does one `read` -ably serialize a list containing node objects?
[21:14:28] <moon-child> very, very carefully
[21:14:35] <moon-child> I suggest doing your own (de)serialization
[21:14:47] <moon-child> but if you insist, use structs and set *print-circle* to t
[21:14:51] <ck_> why identify objects by id, indeed.  when ego and superego are available as well
[21:14:57] <moon-child> lol
[21:15:09] <contrapunctus> ,shoot ck_ 
[21:15:14] <selwyn> ask yourself the use case as well
[21:15:24] <selwyn> you don't have to serialise as often in lisp ime
[21:16:37] <shka> contrapunctus: the question is, how big documents you want to open, do you want to keep all in memory, do you have hyperlinks in the document, are those links go into one direction or into both, what about undo?, what about storing edit history in the document
[21:17:19] <contrapunctus> selwyn: not sure I understsand...isn't a document format meant to be saved to/loaded from disk, at the end of the day?
[21:17:43] <selwyn> yeah
[21:17:48] *** Quits: joes (~joes@hardfought/member/joes) (Quit: Leaving)
[21:17:51] <shka> how do you search? do you search the edit history as well?
[21:17:57] <selwyn> sorry, i made a dumb point
[21:18:17] <moon-child> never have to serialise in closes
[21:18:19] <moon-child> closos
[21:18:20] <selwyn> when i need to serialise, i typically just dump a lisp image
[21:18:21] <moon-child> just sayin
[21:18:28] <moon-child> or that yeah :P
[21:18:30] <selwyn> but this doesn't work here
[21:18:41] <contrapunctus> moon-child: I was going to mention CLOSOS xD
[21:18:49] <moon-child> selwyn: why not?
[21:19:01] <moon-child> if it's about external state, you can tear down the window and rebuild it again
[21:19:22] <selwyn> with a mechanism to store the external state somewhere..
[21:19:42] <selwyn> what if you want to load two documents at once
[21:19:48] <selwyn> you can't merge lisp images
[21:19:57] <moon-child> I don't see the problem
[21:20:00] <moon-child> store them both in the same image
[21:20:08] <moon-child> (defparameter *open-documents* ())
[21:20:14] <moon-child> (push (make-document) *open-documents*)
[21:20:18] <moon-child> (sb-ext:save-lisp-and-die)
[21:20:25] <selwyn> oh
[21:20:40] <selwyn> well, that works, but you are storing the state of the editor instead of documents
[21:20:50] <selwyn> hm
[21:21:05] <moon-child> again, you can tear that down and rebuild it at need
[21:21:20] <moon-child> a more pertinent consideration is that lisp images have a limited shelf life and are not portable
[21:21:29] <selwyn> yes
[21:24:49] <contrapunctus> shka: hm...probably all in memory; yes, there are hyperlinks; haven't decided on two-way links yet; the version numbers are there to provide edit history for each node or layout; the rest I haven't yet thought about...display, editing, and search all likely operate on the layout currently in use.
[21:25:48] <contrapunctus> moon-child: oh, numeric IDs had another use...to group together different versions of the same node.
[21:26:24] <contrapunctus> (Which I kind of forgot about in these examples...it's been some time since I worked on this project.)
[21:27:30] <moon-child> why not have a pointer from, say, version n of a node to version n-1?
[21:28:15] <moon-child> and: you will need something a little more sophisticated than 'grouping' if you want the undo behaviour people expect.  If I make a change to widget X, and then a change to widget Y, and then I undo twice, you have to know to undo the change to widget Y before the change to widget X (and not to undo the change to widget Y twice)
[21:28:19] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:28:29] <moon-child> tree vs linear is also something to think about
[21:28:52] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:29:58] <phoe> I have a review request for https://gist.github.com/phoe/6bdd1e78d36d3bcace5d7a209e3eee93
[21:29:58] -ixelp- The mystery of :UNINTERN · GitHub
[21:30:04] <phoe> it's an article that I want to publish soon enough
[21:30:11] <moon-child> (though, you will need some more fanagling if you want to maintain pointer stability.  But maybe you _don't_ want pointer stability; if X pointed to version n of Y, maybe it made assumptions about Y that were broken in verison n+1)
[21:30:14] <phoe> about a functionality that I consider to be highly confusing
[21:33:29] <contrapunctus> moon-child: I might save undo history separately...although, I think that's what versioning of layouts can do - for your example, it would be like going from (layout X₁ Y₁) -> (layout X₂ Y₁) -> (layout X₂ Y₂) ...I don't understand the bit about pointers and versions, though 🤔️
[21:35:25] <moon-child> so you copy everything every time somebody makes a change?
[21:35:35] <moon-child> that doesn't scale
[21:38:14] <Catie> phoe: It all makes sense to me! The question that I run into is how long should the :UNINTERN clause be included in the DEFINE-PACKAGE form? You say it's useful primarily for modifying packages in-place, which is something that should only need to happen once. Should the :UNINTERN clause be left in the DEFINE-PACKAGE form once the software is released? And for how many releases after that?
[21:38:40] <phoe> Catie: for however long you support upgrades from that old version to this current version
[21:38:55] <phoe> that's a question of upgrade paths, not of software development
[21:39:09] <contrapunctus> moon-child: each layout just contains pointers to specific node versions...changes result in new versions of layouts pointing to new versions of nodes...is that really copying? ._.
[21:39:17] <Catie> Hmm okay, that's fairly straightforward. Thank you!
[21:39:28] * phoe adds that to the article
[21:39:36] <moon-child> contrapunctus: yes
[21:39:46] <contrapunctus> yikes
[21:39:50] <moon-child> if I have (X (Y (Z))), and I want to change to Z'
[21:39:59] <moon-child> then I need a new version of Y that points to Z' instead of Z
[21:40:15] <contrapunctus> ah 😶️
[21:40:22] <moon-child> so I need a new version of X that points to Y' instead of Y
[21:40:33] <phoe> Catie: done, thanks!
[21:40:54] <contrapunctus> moon-child: drat :\
[21:40:57] <moon-child> You don't have to copy _everything_, but you still have O(depth⌈width) copies
[21:41:00] <Catie> phoe: Absolutely, thank you! It's very much appreciated
[21:41:08] <moon-child> (I think depth⌈width.  Mighta got that wrong)
[21:41:32] <edgar-rft> I've heard that Wayland might be some new version of X
[21:41:35] <moon-child> contrapunctus: you may be interested in: persistent data structures
[21:52:35] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:53:48] <contrapunctus> moon-child: reading about the subject, thanks.
[21:56:29] <White_Flame> has there been anything major published since okasaki?
[21:56:53] <White_Flame> I think clojure has had some advancements with pure functional data structures, but I'm not sure if such things have been compiled anywhere
[21:57:27] <moon-child> I don't know of anything.  My impression of clojure is that it was more the slow trickle of academia into industry than anything actually new
[21:58:17] <moon-child> (okasaki is, what, 1995?)
[21:58:24] <White_Flame> because it's a practical language, they've had to do a lot of work with performance for their datastructures
[21:58:27] <White_Flame> yeah, it's old
[22:20:29] <shka> most of data structures in clojure are radix based, not Okasaki
[22:22:43] <shka> RRB and HAMT
[22:22:52] <shka> gosh my hand grip is so weak
[22:24:10] <selwyn>   i wonder if increasing grip strength heads off rsi problems
[22:24:31] <shka> i was trying to do cardio with kettlebell
[22:24:41] <moon-child> I've noticed that generally when I exercise more I'm less likely to experience wrist pain
[22:24:50] <shka> 5 minutes in and my hands are crying for help
[22:25:30] <selwyn> nice
[22:25:39] <shka> i will try to do that everyday, maybe it will get better
[22:25:49] <moon-child> good luck!
[22:26:23] <ck_> today I'd like to tell you a tale of the artificial intelligence
[22:26:24] <shka> so 10 minutes of attempting to swing that weight and rest for jogging
[22:26:46] <ck_> a few years ago I uploaded a small video showing clim-fig and ellipses
[22:27:11] <ck_> today, the video is "not yet rated" -- maybe they looked too much like boobs?
[22:27:40] <selwyn> horny police at it again
[22:27:48] <ck_> I could also misunderstand what that means completely. I'm not out of touch! it's the children who are wrong. https://vimeo.com/342728774
[22:27:49] -ixelp- clim-fig-ellipse-undo, XQuartz on Vimeo
[22:37:33] <selwyn> reminded that i should keep up my pullups sigh
[22:37:56] <selwyn> ironically, many of my resolutions were to keep doing shit i did last year
[22:38:01] <selwyn> and so far they have been failing
[22:38:37] <ck_> the year is not even at 5%
[22:38:42] <selwyn> yes
[22:38:49] <selwyn> you are right
[22:40:06] <ck_> I'm just doing my exercises -- hand waving
[22:41:40] <selwyn> shka: the intensity seems very high to do everyday
[22:43:20] <shka> selwyn: it is just 16 kg
[22:43:48] <shka> i would not attempt this with the large weight
[22:43:59] <shka> but i thought i could manage that
[22:44:16] <shka> i am a pretty strong person, but my grip is just subpar
[22:45:34] <shka> i don't run out of breath either
[22:50:50] <shka> but i guess life long of keyboard typing does not lend itself toward strong grip
[22:55:15] <selwyn> my experience with returning to pull ups was that grip strength was the limiting factor for a while
[22:55:30] <selwyn> but not any more
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
