[00:05:14] *** Quits: Sgeo (~Sgeo@user/sgeo) (Quit: Leaving)
[00:05:42] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[00:08:13] *** Joins: Sgeo (~Sgeo@user/sgeo)
[01:06:19] *** Quits: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net) (Quit: guifa)
[01:10:50] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[01:16:45] *** Joins: vodkra (~vodkra@user/vodkra)
[01:35:59] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 255 seconds)
[01:36:00] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 255 seconds)
[01:57:50] *** Joins: monkey_ (~user@190.104.116.134)
[02:10:38] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[02:11:40] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[02:16:56] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 255 seconds)
[02:16:57] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 255 seconds)
[02:18:55] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 255 seconds)
[02:19:57] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[02:20:57] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[02:21:17] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[02:22:17] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[02:47:39] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[02:53:43] <japhb> logs.liz.nl unresponsive for anyone else?
[02:55:06] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[02:57:19] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[03:05:04] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[03:07:49] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[03:08:17] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:09:19] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[03:57:07] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (Changing host)
[03:57:07] *** Joins: phogg (~phogg@user/phogg)
[04:19:49] <raydiak> working here
[04:24:09] <raydiak> though I don't see any updates for the past 5 or 6 hours on #raku, and it is quite sluggish to respond to requests (don't recall if it's slower than usual)
[04:32:23] <japhb> Normally it's not super-slow.  It's responding now again (was timing out for a while for me).  It uses an in-memory DB, so maybe the VM was swapping ...?
[04:32:53] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:35:35] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:40:17] *** Joins: monkey_ (~user@190.104.116.134)
[04:42:02] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:43:16] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:56:55] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[04:57:35] <melezhik> .tell AlexDaniel  are latest whateverable commits missing bin/raku? https://gist.github.com/melezhik/b8559514089b4a00443118a962e90371
[04:57:36] <tellable6> melezhik, I'll pass your message to AlexDaniel
[05:03:59] *** Quits: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net) (Quit: Connection closed)
[05:23:00] <AlexDaniel> Hmmm maybe
[05:23:02] <tellable6> 2021-07-19T00:27:37Z #raku <melezhik> AlexDaniel  are latest whateverable commits missing bin/raku? https://gist.github.com/melezhik/b8559514089b4a00443118a962e90371
[05:23:29] <AlexDaniel> So only bin/perl6 and no bin/raku ?
[05:23:53] <AlexDaniel> Or .. uhm
[05:24:12] <AlexDaniel> Ah, these are failed builds I think
[05:24:37] <AlexDaniel> I see now, sry
[05:24:56] <AlexDaniel> You can check the logs, they're present in the tar as well
[05:25:30] <AlexDaniel> Sounds like something is wrong on the main branch, if that's what you're seeing for the latest commita
[05:25:38] <AlexDaniel> Commits*
[05:35:25] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 268 seconds)
[05:36:38] *** Joins: monkey_ (~user@190.104.116.134)
[05:46:50] *** Joins: pjscott (~pjscott@S0106cc32e554b9a7.gv.shawcable.net)
[05:47:22] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[06:00:56] *** Quits: pjscott (~pjscott@S0106cc32e554b9a7.gv.shawcable.net) (Quit: Ping timeout (120 seconds))
[06:46:56] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:49:01] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:53:19] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:55:02] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[07:15:32] *** Joins: pjscott (~pjscott@S0106cc32e554b9a7.gv.shawcable.net)
[07:19:50] <pjscott> Hello! Having trouble with latest rakudo.  I downloaded rakudo star 2021.04 and built from source for Linux; I then tried installing command line rakudoc from github but raku couldn't find the target of 'use Rakudoc'. It says: 
[07:20:34] <pjscott> Could not find Rakudoc in:
[07:20:34] <pjscott>     inst#/home/peter/.raku
[07:20:35] <pjscott>     inst#/home/peter/rakudo/share/perl6/site
[07:20:35] <pjscott>     inst#/home/peter/rakudo/share/perl6/vendor
[07:20:36] <pjscott>     inst#/home/peter/rakudo/share/perl6/core
[07:20:36] <pjscott>     ap#
[07:20:37] <pjscott>     nqp#
[07:20:37] <pjscott>     perl5#
[07:21:37] <pjscott> But putting Rakudoc.rakumod in that path didn't help. Yet I can 'use DBIish' and it works, but DBIsh.pm6 isn't in that path.
[07:23:28] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:26:18] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[07:30:02] <pjscott> I gather it's finding DBIish in some precompiled file, but I still don't know where to put Rakudoc.rakumod.
[07:37:40] <pjscott> I fixed it with by adding a use lib to the rakudoc script but can't help think I missed something basic.
[07:38:37] *** Joins: canw (~canw@138.199.9.161)
[07:42:02] *** Quits: canw (~canw@138.199.9.161) (Client Quit)
[07:42:29] *** Joins: canw (~canw@111.225.239.156)
[07:52:57] *** Quits: pjscott (~pjscott@S0106cc32e554b9a7.gv.shawcable.net) (Quit: Ping timeout (120 seconds))
[08:13:23] <avuserow> if I have a list @a, and want to remove all elements from @a that are in @b, is there a better way than: my $to-remove = @b.Set; @a .= grep({ $_ !(elem) $to-remove});
[08:13:53] <avuserow> I also need to preserve the ordering of the items in @a.
[08:15:08] <avuserow> m: my @a = (1, 2, 3, 4, 5); my @b = (2, 3); my $to-remove = @b.Set; @a .= grep({$_ !(elem) $to-remove}); dd @a
[08:15:08] <camelia> rakudo-moar b0caab5bf: OUTPUT: «Array @a = [1, 4, 5]␤»
[08:16:44] <lucs> m: my @a = (1, 2, 3, 4, 5); my @b = (3, 2); say @a (-) @b
[08:16:45] <camelia> rakudo-moar b0caab5bf: OUTPUT: «Set(1 4 5)␤»
[08:17:03] <lucs> https://docs.raku.org/language/operators#index-entry-Set_difference_operator
[08:21:46] <avuserow> hmm, looks nice
[08:22:14] <avuserow> but if I convert back to a list with `.keys`, then the ordering is lost, presumably when it makes the set
[08:23:04] <lucs> Hmm... Right. Maybe someone else will know.
[08:25:04] <avuserow> technically I could write it as `@a .= grep({$_ !(elem) @b.Set})` which is very nice and short, but I'd rather have the extra variable than make the extra Sets :)
[08:29:57] *** Joins: dg (~dgl@dg.wtf)
[08:30:36] <raydiak> there are many ways to do it, and I'm not sure which is fastest for your case, or which you would consider "better", but here is another with no Set and no intermediate variable:
[08:30:45] <raydiak> m: my @a = 1..5; my @b = 2, 3; @a .= grep: { !@b.first: $_ }; say @a
[08:30:45] <camelia> rakudo-moar b0caab5bf: OUTPUT: «[1 4 5]␤»
[08:35:39] <avuserow> yeah, I guess I wanted to make sure there wasn't a magic operator that I was overlooking
[08:36:16] <avuserow> or an "inverted grep" (`@a.keep({...})` or something, I dunno)
[08:37:17] <raydiak> not off the top of my head. inverted grep was something someone else speculated about in recent weeks though, not a bad idea imo
[08:40:31] <raydiak> could use a Junction...
[08:40:35] <raydiak> m: my @a = 1..5; my @b = 2, 3; @a .= grep: none @b; say @a
[08:40:35] <camelia> rakudo-moar b0caab5bf: OUTPUT: «[1 4 5]␤»
[08:40:46] <avuserow> okay, I guess my original question was thinking of something along the lines of python's `remove(value)` method for a list. but you would have to call it N times
[08:41:15] <avuserow> oh yeah, junctions are a good option
[08:47:10] <moon-child> @a .= grep: &[∊].assuming(*, @b)
[08:48:04] <moon-child> err, should be ∌
[08:48:10] <moon-child> and get rid of *, 
[08:52:25] <moon-child> or &[!(cont)] for texans
[08:56:28] <avuserow> I did some benchmarking just for kicks
[08:56:35] <avuserow> .assuming is way slow
[08:59:23] <avuserow> everything else is fairly similar, with `(@a (-) @b).List` being the fastest (if you can live with the randomized ordering)
[09:00:28] <avuserow> but all the other approaches come within 10% of each other, and sometimes it varies which one is fastest (maybe my system is not sufficiently idle to always select a consistent winner)
[09:00:31] <moon-child> oh my, .assuming is ... slightly disturbing
[09:01:01] <moon-child> https://github.com/rakudo/rakudo/blob/master/src/core.c/Code.pm6#L311
[09:01:19] <avuserow> surprisingly, creating the Set in advance (like my original approach) is not always better than just doing `@a .= grep: {$_ !(elem) @b}`
[09:01:40] <avuserow> though my data is an array of five elements and removing two, so that's on the tiny side
[09:02:32] <moon-child> yeah, hash-type collections are generally slower than arrays at such small sizes.  (The flip side, though, is that an std type should know that and use an array representation when it's small enough, so you don't have to worry about that)
[09:06:59] <mykhal> avuserow: you may realize that even in Python, list comprehension would be better than remove(), where you would have to check presence of en element as well
[09:07:11] <avuserow> though if I really needed the speed, I would change the backing database structure and just issue a DELETE FROM table WHERE id IN (...)
[09:07:11] <mykhal> m: my @a = 1..5; my @b = 2, 3; say ( $_ unless $_ (elem) @b for @a ; )
[09:07:12] <camelia> rakudo-moar b0caab5bf: OUTPUT: «(1 4 5)␤»
[09:07:45] <moon-child> avuserow: have you seen red?
[09:07:54] <avuserow> Red scares me :)
[09:08:11] <avuserow> okay, it does not scare me. it's too much magic for my application, and it is very cool
[09:08:21] <avuserow> but yes, I've seen a bit of it
[09:14:16] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[09:14:23] <Xliff> \o
[09:14:29] <Xliff> What's the best way to force GC?
[09:14:37] <Xliff> I'd like to test something in a DESTROY
[09:20:59] <avuserow> Xliff: seems like there's nqp::force_gc? or you can look at what Inline::Perl5 does in its tests: https://github.com/niner/Inline-Perl5/blob/7fb20ddf5be5af913529fa6f8f039ef3d04faefe/t/p5_object_destructor.t#L25
[09:23:45] <Xliff> avuserow: Thanks!
[09:24:57] <Xliff> Now THAT'S odd.
[09:25:27] <Xliff> When I create an object, I get a different .WHERE than I do when it is reaped in submethod DESTROY!
[09:26:25] <moon-child> compacted maybe
[09:26:34] *** Quits: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f) (Read error: Connection reset by peer)
[09:26:39] <Xliff> class A { submethod DESTROY { say "D: { self.WHERE }"; }; }; my $a = A.new; say "C: { $a.WHERE }"; $a = Nil; use nqp; nqp::force_gc; my $p = start sleep 3; await $p; say "A: { A.WHERE }"
[09:26:43] <Xliff> m: class A { submethod DESTROY { say "D: { self.WHERE }"; }; }; my $a = A.new; say "C: { $a.WHERE }"; $a = Nil; use nqp; nqp::force_gc; my $p = start sleep 3; await $p; say "A: { A.WHERE }"
[09:26:46] <camelia> rakudo-moar b0caab5bf: OUTPUT: «C: 139933773097672␤D: 139933738761072␤A: 77365192␤»
[09:26:55] *** Joins: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f)
[09:27:00] <Xliff> O_o
[09:27:05] <Xliff> I'
[09:27:15] <Xliff> I expected the C and D values to be the same.
[09:30:09] <Xliff> HAH! If  I use an attribute's WHERE, it works.
[09:30:45] <avuserow> "Please note that in the Rakudo implementation of Raku, and possibly other implementations, the memory location of an object is NOT fixed for the lifetime of the object." - https://docs.raku.org/routine/WHERE
[09:31:46] <Xliff> Aaand... it's the same value. Of course. The Attribute object, itself. :/
[09:31:57] <Xliff> I'm trying to get something instance level.
[09:38:37] <raydiak> I'd hesitate to use DESTROY at all. you can't count on it happening at any certain time (even in the middle of other code running), in any certain order, or even at all (even when the program terminates). beyond that, I'd also strongly avoid relying on underlying VM semantics. is there no clear exit path in your own code that you could use to call your own teardown methods manually?
[09:42:41] <raydiak> even with force_gc it's not guaranteed...
[09:42:47] <raydiak> m: class C { submethod DESTROY { say "DESTROY!"; } }; my $o = C.new; $o = Nil; use nqp; nqp::force_gc();
[09:42:48] <camelia> rakudo-moar b0caab5bf: ( no output )
[09:43:49] <raydiak> m: class C { submethod DESTROY { say "DESTROY!"; } }; my $o = C.new; $o = Nil; use nqp; nqp::force_gc(); sleep 0; # it seems to wait for an idle time to actually run the gc
[09:43:49] <camelia> rakudo-moar b0caab5bf: OUTPUT: «DESTROY!␤»
[09:44:24] <raydiak> and none of that is guaranteed not to change tomorrow
[09:54:41] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Read error: Connection reset by peer)
[09:54:58] *** Joins: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se)
[09:58:21] <Xliff> radiak: Thanks for telling me something I already knew! :)
[09:59:09] <Xliff> And for this use case, I only care that it happens, not WHEN. That's exactly what DESTROY was meant for, yes?
[09:59:51] <Xliff> I only asked about force_gc for testing purposes. 
[10:00:07] <Xliff> Glad I did. My initial assumption turned out to be wrong. LOL
[10:01:05] <raydiak> you can count on me to state the obvious :) 
[10:02:06] <Xliff> Haha! I get where you were coming from. You were helpful. That's all that matters. radiak++
[10:02:24] <Xliff> At any rate, crossed 600kLOC of Raku, today!
[10:03:11] <Xliff> See https://github.com/Xliff/p6-GLib/blob/master/doc/Perl6%20Projects%20Line%20Counts.xlsx?raw=true
[10:03:44] <raydiak> heh that's quite a lot
[10:06:29] <raydiak> but no, I don't believe you can always count on DESTROY running. maybe if you always call force_gc and then something else after it, but if there's a point where you can do that, then you might as well just call your own destructor methods which will always be reliable regardless of underlying VM behavior. that's why I showed that example above of it not running, so you know it won't always be called
[10:07:49] <raydiak> maybe better to at least get input from a more authoratative core dev before relying on it
[10:07:51] <raydiak> afk
[10:11:37] <Xliff> radiak: If it doesn't get called then it doesn't get called. I just need it to make a basic attempt at resource cleanu.
[10:11:44] <Xliff> Without it, I'd leak like a sieve.
[10:12:31] <Xliff> And there is NO OTHER METHOD that will work. This is not something for manual methods.
[10:27:45] *** Joins: ufobat__ (~martin@dynamic-095-118-111-044.95.118.pool.telefonica.de)
[10:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:32] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[10:35:40] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:39:47] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 265 seconds)
[10:40:15] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:43:21] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 258 seconds)
[10:56:22] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:03:36] *** Joins: patrickb (~patrickb@55d450b6.access.ecotel.net)
[11:18:17] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[11:22:20] *** Quits: ufobat__ (~martin@dynamic-095-118-111-044.95.118.pool.telefonica.de) (Ping timeout: 255 seconds)
[11:30:08] *** Quits: patrickb (~patrickb@55d450b6.access.ecotel.net) (Remote host closed the connection)
[11:32:37] *** Joins: ufobat (~martin@dynamic-095-115-123-114.95.115.pool.telefonica.de)
[11:48:09] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[11:58:06] *** Quits: canw (~canw@111.225.239.156) (Ping timeout: 258 seconds)
[12:01:20] *** Joins: keutoi (~keutoi@157.48.132.95)
[12:06:11] *** Joins: canw (~canw@111.225.239.156)
[12:06:22] *** Quits: canw (~canw@111.225.239.156) (Client Quit)
[12:09:10] <mykhal> this fries CPU and memleaks: t' or '^D'
[12:09:37] <mykhal> eh, sorry, paste issue. correct code: "" ~~ /<.ws>+/
[12:16:58] <mykhal> also with * instead of + and/or without . and/or on non-empty string on left
[12:17:59] <mykhal> (not trying to say to m, don't want to hurt camelia)
[12:21:33] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:40:45] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:40:56] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[12:42:22] <SmokeMachine> yes, that's an infinite loop, right?!
[12:42:57] <SmokeMachine> it will always find a `<ws>` on "" for ever...
[12:43:25] <SmokeMachine> m: say "" ~~ /<ws>/
[12:43:26] <camelia> rakudo-moar b0caab5bf: OUTPUT: «｢｣␤ ws => ｢｣␤»
[12:43:52] <SmokeMachine> m: say "" ~~ /<ws> ** 10/
[12:43:53] <camelia> rakudo-moar b0caab5bf: OUTPUT: «｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤ ws => ｢｣␤»
[12:48:52] <SmokeMachine> m: my token my-ws { \s* }; say "" ~~ /<my-ws> ** 10/
[12:48:52] <camelia> rakudo-moar b0caab5bf: OUTPUT: «｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤ my-ws => ｢｣␤»
[12:49:10] <SmokeMachine> mykhal: it's something like this: ^^
[12:53:00] <SmokeMachine> it will always find "no space"
[12:54:34] *** Quits: keutoi (~keutoi@157.48.132.95) (Quit: Lost terminal)
[12:56:22] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[12:56:28] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[13:02:25] <moon-child> ways, so the empty string is whitespace?  I find that counterintuitive
[13:05:46] <SmokeMachine> no...
[13:06:36] <SmokeMachine> but <ws> matches 0, 1 or more white spaces, that's matching 0 spaces
[13:06:52] <moon-child> right
[13:13:16] <SmokeMachine> and because it matches 0 spaces it do not move forward... so it will match for ever...
[13:33:53] *** Quits: charsbar (~charsbar@ik1-311-15861.vs.sakura.ne.jp) (Ping timeout: 252 seconds)
[13:34:00] *** Joins: charsbar (~charsbar@ik1-311-15861.vs.sakura.ne.jp)
[13:41:59] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 258 seconds)
[14:11:47] <mykhal> But it's just a pattern. Either should match or not, and not try to match forever
[14:13:00] <mykhal> is perl -e 'print "" =~ /^^/' should also nahg ?
[14:13:10] <moon-child> what do you think "" ~~ /[.*]*/ should do?
[14:13:13] <mykhal> s/is//; s/nahg/hang/
[14:18:40] <mykhal> initiallly i'd think that special meaning would be switched to literary in []
[14:19:18] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[14:20:25] <mykhal> i'll think more afte ma after-vacc sleep
[14:25:19] *** Joins: lealnie (~lealnie@203.205.141.39)
[14:43:26] *** Joins: hankache (~hankache@user/hankache)
[15:06:37] *** Joins: silug2 (~silug@068-188-018-154.biz.spectrum.com)
[15:06:38] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[15:06:39] *** silug2 is now known as silug
[15:09:07] *** Joins: rba[m] (~rba@2001:470:69fc:105::c2d8)
[15:26:25] *** Quits: hankache (~hankache@user/hankache) (Quit: Leaving)
[15:31:22] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:36:27] <raydiak> imo, a quantified construct matching nothing should only match once in a particular string position. this also seems to be how p5 behaves. that said, not everyone agrees, and this is a known behavior with a closed issue: https://github.com/rakudo/rakudo/issues/4438
[15:47:37] <Geth> ¦ problem-solving/master: 5 commits pushed by (Daniel Sockwell)++, (Juan Julián Merelo Guervós)++, (Elizabeth Mattijsen)++
[15:47:38] <Geth> ¦ problem-solving/master: e43a7a59a4 | clarify PS process in README 
[15:47:38] <Geth> ¦ problem-solving/master: fe9d5ca876 | Address some comments.
[15:47:38] <Geth> ¦ problem-solving/master: a91a274442 | Resolve remaining comments
[15:47:38] <Geth> ¦ problem-solving/master: e84670523f | :pencil2:
[15:47:38] <Geth> ¦ problem-solving/master: 8de09b2f29 | Merge pull request #289 from Raku/clarify-readme
[15:47:38] <Geth> ¦ problem-solving/master: review: https://github.com/Raku/problem-solving/compare/72008265ffb5...8de09b2f29c8
[15:49:43] * abraxxa is watching Liz FOSDEM talk on sets. Is there really no ascii equivalent of the negated set operators?
[15:50:12] <lizmat> !(elem)
[15:50:43] <lizmat> prefix with !
[15:51:13] <lizmat> I guess we could consider something like (!elem)
[15:52:58] <abraxxa> I see, thanks! Junst wondered because you didn't include them in the slides
[15:53:04] <lizmat> m: sub infix:<(!elem)>(\a,\b) { !(a (elem) b) }; dd 42 (!elem) ^10
[15:53:04] <camelia> rakudo-moar a2faac4bd: OUTPUT: «Bool::True␤»
[15:53:35] <abraxxa> why does a union of two arrays not return an array but a set?
[15:53:56] <abraxxa> I prefer the negation before the operator instead of another operator
[15:54:04] <lizmat> because it is a *set* operator, which always at least returns a Set
[15:54:25] <abraxxa> is there an operator for joining arrays too?
[15:54:37] <lizmat> define joining ?
[15:54:44] <abraxxa> concatenate
[15:56:03] <lizmat> m: my @a = ^5; my @b = 42,666; @a .= append: @b; dd @a
[15:56:03] <camelia> rakudo-moar a2faac4bd: OUTPUT: «Array @a = [0, 1, 2, 3, 4, 42, 666]␤»
[15:56:11] <abraxxa> like append does
[15:56:44] <lizmat> or just .append  :-)
[15:57:50] <abraxxa> so no operator, only the method?
[15:58:49] <lizmat> well, depends...
[15:58:59] <abraxxa> what Bruce Gray said in his 'Raku, the Big' talk is what I'm thinking since years: there needs to a best practise guide for what way to use when
[16:00:17] <abraxxa> why operators when there a methods for all those things? They are just hard to remember, I guess hard to suggest for a text editor and aren't as easy to understand for novices
[16:02:12] <abraxxa> what helped me in Perl 5 to remember the sigils when I learned it back then was the explanation why the characters where chosen:  like % looks like key / value
[16:02:29] <lizmat> m: sub infix:<@>(\a,\b) { slip(|a,|b) }; .say for 42,666 @ ^10
[16:02:29] <camelia> rakudo-moar a2faac4bd: OUTPUT: «42␤666␤0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»
[16:02:32] <sena_kun> I don't think operators are not easy to understand for novices, people are just ok with "5 + 5" and it is far easier to them than "5.add(5)".
[16:02:40] <abraxxa> (|) for union seems weird to me, I would have expected to be (~) because ~ is used to join strings
[16:03:09] <abraxxa> sena_kun: for mathematics everybody is used to it
[16:03:10] <sena_kun> I do agree there is a place for the tool and when the syntax complexity goes overboard, that's a bad thing in general
[16:03:15] <lizmat> abraxxa: | is "or", so it indicates elems that are either on left *or* right 
[16:03:34] <abraxxa> yes, I was also thinking  
[16:03:35] <lizmat> (&) indicates elems that are on both sides, as & is "and"
[16:03:58] <abraxxa> 'or' when I've seen it but couldn't find an explanation as what an or has to do with joining
[16:04:42] <abraxxa> lizmat: that explanation absolutely makes sense, thank you! Can it be included in the docs?
[16:11:17] <lizmat> abraxxa: probably, if someone (you?) makes a PR for that? https://github.com/Raku/doc/pulls
[16:21:25] *** Quits: juanfra (~juanfra@user/juanfra) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: cnx (~cnxhaloge@2001:470:69fc:105::61f) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: littlebenlittle[ (~littleben@2001:470:69fc:105::1eca) (Quit: Bridge terminating on SIGTERM)
[16:21:32] *** Quits: rba[m] (~rba@2001:470:69fc:105::c2d8) (Quit: Bridge terminating on SIGTERM)
[16:23:56] *** Joins: juanfra (~juanfra@user/juanfra)
[16:27:55] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[16:27:55] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[16:27:55] *** Joins: cnx (~cnxhaloge@2001:470:69fc:105::61f)
[16:27:55] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:28:07] *** Joins: littlebenlittle[ (~littleben@2001:470:69fc:105::1eca)
[16:28:07] *** Joins: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec)
[16:28:07] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[16:28:09] *** Joins: rba[m] (~rba@2001:470:69fc:105::c2d8)
[16:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:33:03] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:53:50] *** Quits: MasterDuke (~MasterDuk@2601:14c:4201:5a20:f6c5:5d83:de1e:a94c) (Ping timeout: 246 seconds)
[17:08:35] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[17:26:29] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:38:30] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Read error: Connection reset by peer)
[17:39:40] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:42:08] *** Joins: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se)
[17:46:37] *** Joins: MasterDuke (~MasterDuk@2601:14c:4201:5a20:ca58:34b1:1a1c:d8c4)
[17:47:34] *** Quits: lealnie (~lealnie@203.205.141.39) (Quit: Connection closed)
[18:08:51] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:25:24] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[18:25:44] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[19:01:09] <abraxxa> how is the Whatever * different from $_? Your example at 41:47 includes .sort(-*.value), .sort(-$_.value) would also make sense for me as $_ is the topic variable which gets set to each element of the array
[19:01:50] <Altreus> I'm pretty sure that has to be .sort({-$_.value})
[19:01:53] <sena_kun> abraxxa, `$_` won't work, as it is not a block
[19:02:06] <abraxxa> or asking differently: why was * necessary in addition to $_ for such constructs?
[19:02:06] <lizmat> what Altreus and sena_kun said :-)
[19:02:07] <Altreus> which is then .sort({ - .value })
[19:02:24] <Altreus> * becomes $_ /and makes a block/
[19:02:41] <Altreus> FSVO "becomes $_"
[19:03:07] <Altreus> I think of it more as "becomes $^a" ... or $^b or whatever Raku thinks makes sense
[19:03:44] <abraxxa> FSVO?
[19:04:43] <abraxxa> {} is a pointy block, right? what type is it when you pass -*.value to sort? I guess sort is a multi-sub?
[19:08:09] <Altreus> for some values of
[19:08:21] <Altreus> There's a WhateverCode I think?
[19:08:55] <Altreus> Ah, it's called Whatever-currying https://docs.raku.org/type/Whatever
[19:09:23] <Altreus> > which is actually a Block that can be used wherever Callables are accepted
[19:16:16] <abraxxa> so each literal text becomes a Whatever object?
[19:16:27] <abraxxa> how can I view pod6?
[19:18:01] <abraxxa> ah, rakudoc needs to be installed separately...
[19:19:28] <abraxxa> zef install rakudoc fails tests
[19:22:46] <abraxxa> lizmat: docs are hard. I've forked the docs repo. Will add some lines but it will need a review.
[19:22:53] <Altreus> hah, that's a fun one!
[19:22:58] <Altreus> What tests does it even have? :o
[19:25:44] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[19:25:44] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[19:26:35] <perlbot> abraxxa pasted a new file at https://perl.bot/p/er7c6f - rakudoc test failure
[19:26:59] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[19:28:00] <Altreus> looks like /site became /store perhaps?
[19:28:41] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[19:28:44] <ugexe> no, tests would not be assuming the directory of the zef cache directory
[19:29:17] <ugexe> (also more importantly is no such directory change has every occured in zef, so that couldnt be what they were doing)
[19:29:40] <ugexe> looks like rakudoc is incorrectly trying to see if modules are installed
[19:29:44] <ugexe> in rakudo itself
[19:29:53] <ugexe> which it should also not be doing
[19:30:14] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:30:43] <ugexe> in this case the test is written with the assumption the test dependencies are installed, but they dont have to be (they can be, and are, linked via -I/path/to/lib)
[19:31:28] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[19:31:40] <ugexe> t/04-compunit.t should be deleted entirely
[19:31:46] <Geth> ¦ doc: abraxxa++ created pull request #3919: add Set operator character explanations
[19:31:47] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3919
[19:40:25] <SmokeMachine> m: my &a = *.self; say &a.^name
[19:40:25] <camelia> rakudo-moar a2faac4bd: OUTPUT: «WhateverCode␤»
[19:46:58] <Altreus> surely that is not the way you determine whether a module is installed, whether it needs to or not
[20:08:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/07/19/2021-29-scheduled-to-3/
[20:09:23] <sena_kun> lizmat++
[20:10:44] <Altreus> a survey!
[20:10:49] <Altreus> But the first question is hard
[20:13:22] <Altreus> kind of weirdly worded throughout tbh
[20:13:48] <mykhal>  SmokeMachine, moon-child : maybe there shuld be at least some detection and warning for such infinite regex bombs
[20:21:14] <lizmat> Altreus: you can leave your comments at the end of the survey :-)
[20:21:52] *** Joins: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net)
[20:26:55] <Altreus> I saw this, but I couldn't articulate them
[20:51:25] <mykhal> so is there a reson why Raku should explode on /(.*)*/ and Perl not ?
[20:53:10] <Altreus> empirically, yes, otherwise it wouldn't
[20:55:17] <mykhal> i mean SHOULD as in e.g. RFC
[20:55:32] <mykhal> kind of
[20:55:43] <Altreus> like is it defined in such a way that it would do that?
[20:56:00] <Altreus> tu m'as posé un colle
[21:01:38] <mykhal> mr armrer, mr cncn
[21:03:08] <mykhal> Altreus: see several hours above
[21:21:52] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[21:21:52] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:22:06] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[21:23:34] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[21:35:10] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 265 seconds)
[21:38:42] <melezhik> .
[21:38:56] *** Quits: melezhik (~melezhik@c-98-198-98-197.hsd1.tx.comcast.net) (Quit: Connection closed)
[22:15:16] *** Quits: ufobat (~martin@dynamic-095-115-123-114.95.115.pool.telefonica.de) (Ping timeout: 255 seconds)
[22:32:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:35:35] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:51:09] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[22:53:28] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[23:14:28] <gfldex> m: my &b = { … }; my &wc = * - 1 + *; my &p = -> { … }; (&b, &wc, &p)».signature».say;
[23:14:28] <camelia> rakudo-moar a2faac4bd: OUTPUT: «(;; $_? is raw = OUTER::<$_>)␤(;; $whatevercode_arg_1 is raw, $whatevercode_arg_2 is raw)␤()␤»
[23:15:04] <gfldex> abraxxa: ^^^ the main difference between Block, pointy block and WhateverCode is the generates Signature. 
[23:15:28] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[23:17:35] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[23:30:01] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:e808:def6:d524:c921)
[23:56:02] *** Joins: dogbert11 (~dogbert@c83-251-249-247.bredband.tele2.se)
[23:57:36] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Ping timeout: 255 seconds)
[23:57:44] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:58:34] *** Quits: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net) (Quit: Leaving)
