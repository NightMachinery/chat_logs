[00:29:36] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-60-64-228-236-58.dsl.bell.ca) (Remote host closed the connection)
[00:45:30] *** Quits: st_iron (uid370243@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:01:32] *** Quits: rain3_ (~rain3_mob@2a02:2f09:d10a:400:1c15:54ba:27b3:ce61) (Ping timeout: 240 seconds)
[01:26:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:49:16] <copec> How do people typically do their iteration on their own construct using LOOP?
[02:00:13] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:28:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[02:29:22] <pjb> copec: computer says no.  LOOP is not extensible.
[02:30:24] <pjb> copec: loop can iterate on lists, vectors, hash-tables, or packages; so if your own construct is not one of those type, nope.
[02:30:40] <pjb> copec: either you convert your construct, or you write your own iteration macro.
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[03:17:50] *** Joins: Jing (~hedgehog@2604:a840:3::1049)
[03:18:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:31:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:45:54] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[05:49:22] *** Joins: Oladon (~olad@98.43.81.226)
[06:02:11] <White_Flame> copec: you can do (loop for item = initial then (my-next item) ...) to call your own iterator/stepper between iterations
[06:02:41] <White_Flame> you also need to add in your own while/until/etc for the exit clause somewhere
[06:31:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:38:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:58:15] *** Quits: sts-q (~sts-q@91.200.108.178) (Ping timeout: 250 seconds)
[07:11:32] *** Joins: sts-q (~sts-q@212.53.219.176)
[08:13:51] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[08:18:25] *** Joins: zagura (~zagura@user/zagura)
[08:34:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[08:50:33] <CodeBitCookie[m]> Good Morning Everyone!
[08:53:34] <CodeBitCookie[m]> mfiano: I ran a lot of tests and made some by myself. The results showed me that SDL Works normally unless I enforceit to use OpenGL version 3.3 . Using GLFW has the same results. If I dont put the 3.3 requirement , it runs fine... Without the new features. I was thinking if you run your game engine on OpenGL 3.3, 3.0 or maybe you have 2 versions, one for legacy and another for modern computers?
[08:54:20] <CodeBitCookie[m]> Sorry for the rant last time.Hope everone can forget that. @beach helped me a loy.
[08:54:40] <CodeBitCookie[m]> s/loy/lot
[08:59:21] <White_Flame> well, GUIs suck, as a global constant
[08:59:41] <White_Flame> lisp is great, but can't silver bullet the suck of GUI away completely (yet)
[09:05:16] <beach> It already helps a lot though.  Automatic memory management, closures, and generic functions are essential for that.
[09:06:16] <CodeBitCookie[m]> White_Flame: i am thinking of fixing that issue with my own retained GUI. I do have a few years of experience in OpenGL but never took it that seriously. Its going to be inspired by McCLIM since I think thats the best GUI programmer effort and functionality wise.
[09:06:49] <White_Flame> beach: yep.  But the visual communication & soft human issues involved still suck :)
[09:07:39] <White_Flame> I'm not 100% sold on the clim model, but I do need to try it more
[09:07:58] <beach> CLIM makes it very easy to do some simple GUIs.  Here is a demo for instance: http://metamodular.com/transclime-demo.mkv
[09:07:59] <White_Flame> as I get further along in programming, I'm really more drawn to more declarative systems than command/effect systems
[09:11:58] <White_Flame> beach: for the left pane in that program, how does linebreaking flow work?  is it from the original text?
[09:11:59] <beach> I fixed the slowness in loading the text, by the way.
[09:12:35] <beach> White_Flame: No, I reformatted it to make lines shorter.
[09:17:47] <beach> Oh, I think I see what you mean.  Yes, the newlines are the ones of the text that I load.  But I changed that text from what I found on the web.
[09:18:28] <mfiano> CodeBitCookie[m]: I use 3.3 on old hardware, 4.3 on new
[09:18:39] <mfiano> but I'm out, good luck
[09:18:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:19:12] <beach> So anyway, this GUI code is less than 300 lines.  And I have more examples of very short programs that are very useful.  Not necessarily beautiful enough for general consumption, of course. 
[09:22:11] <lisp123> beach: I just joined the chat and this room isn't logged, would you be able to resend the link to the GUI code?
[09:22:17] <CodeBitCookie[m]> mfiano: you said you use a 15 year old laptop, According to wikipedia, Opengl version 3.3 came out in "March 11, 2010". You then said that Modern opengl is older than I think. I didn't really get what are trying to convey here.
[09:22:28] <beach> lisp123: Sure, hold on...
[09:22:49] <beach> http://metamodular.com/transclime-demo.mkv
[09:23:44] <lisp123> Thanks!
[09:23:56] <beach> Pleasure.  Let me know what you think.
[09:24:07] <beach> lisp123: By the way, what is your native language?
[09:25:28] <lisp123> beach: English. However I don't proofread enough, so I write badly sometimes.
[09:25:39] <beach> OK.
[09:26:44] <beach> Oh, and while it may look like TransClime would be useful only for languages that separate syllables inside words by whitespace, that is not the case.  English, for instance, have several combinations of words that make sense only when considered together. 
[09:27:36] <beach> "look out", "look into", "look for", "look up", "look around", "look through".
[09:28:36] <CodeBitCookie[m]> beach: Wow, that's really impressive! A great demo to show McCLIM off as well.
[09:28:38] <lisp123> That's true
[09:29:19] <beach> CodeBitCookie[m]: Thanks.  The first version was written on the train from Bayonne to Bordeaux, in 2 hours or so.
[09:31:06] <lisp123> beach: This is VERY cool. I can imagine it would be a wonderful program for anyone trying to learn a language
[09:32:35] <beach> Here is another that shows the backtrace inspector that I use to debug SICL code running in a host Common Lisp system: http://metamodular.com/backtrace-inspector.mp4
[09:32:48] <beach> No sound.
[09:35:31] <beach> That one is less than 170 lines of code.
[09:36:05] <lisp123> What are the greens and reds meant to signify?
[09:36:25] <beach> Green is a stack frame with source information.  Red without.
[09:36:40] <beach> Red could be a host function for instance.
[09:36:59] <lisp123> Got it
[09:37:00] <beach> Or just that I did a bad job transmitting source information.  I have since improved that.
[09:38:09] <lisp123> Did you use Eclector to find the relevant parts in the source code?
[09:38:33] <lisp123> What's interesting is that you can link to code within a top-level form
[09:38:37] <beach> Absolutely.  Eclector was created as an extraction of the SICL reader, designed for just that.
[09:39:38] <beach> Another interesting thing not shown, is that I can click on an argument in the upper-left pane and start Clouseau to inspect it.
[09:40:19] <beach> That's trivial to do since Clouseau is running in the same image.
[09:40:55] <beach> Can you imagine doing that with separate processes?
[09:42:54] <lisp123> It would be quite clunky. I transfer data from CL to the main Emacs (Elisp) image and its a lot of extra code
[09:43:26] <lisp123> So I stopped trying
[09:45:05] <lisp123> Both of these applications (the videos), I could see myself using down the track. The first for a 'on-hover object browser', since I creating some form of math wiki, and the latter for code introspection
[09:45:28] <CodeBitCookie[m]> beach: Oh so you made this? That's even more amazing!
[09:46:02] <lisp123> I think the first could work quite well in a Lisp IDE (a small window in the corner which continuously gives information on the form at POINT)
[09:55:00] <beach> CodeBitCookie[m]: Yes, I made those applications.
[09:55:32] <beach> But like I said, with CLIM, you can do something like that in just a matter of a few hours.
[09:58:47] <lisp123> I would like to add math rendering (like TeX, but lispier) to CLIM
[09:59:19] <beach> lisp123: You should talk to loke then.  He wrote Climaxima with math rendering from Maxima.
[10:00:22] <beach> s/from/for/
[10:00:35] <lisp123> beach: Oh great, glad I noted that. I will reach out. I am willing to sponsor (limited budget, but I will see what I can find) its development as I have no time for it
[10:01:46] <beach> Well, loke has a full-time job, like most of us, so has neither time nor the desire to accept cash for Lisp work.
[10:02:58] <lisp123> Thanks for the heads up
[10:03:14] <beach> Sure.  He hangs out in #clim but also in #commonlisp.
[10:03:16] *** Joins: ahc (~ahc@121.98.229.241)
[10:06:36] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[10:17:21] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[10:22:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:28:48] *** Joins: st_iron (uid370243@uxbridge.irccloud.com)
[10:33:50] <lisp123> I'm writing a mini article on Mixins. A simple question on terminology: Sonja Keene describes the concept of Mixins and then Aggregate classes being the combination of a mixin class and a "base" class. What would be the right term for "base" class in this case?
[10:38:09] <White_Flame> if I were to coin a term, it'd be the cauldron class :-3
[10:39:20] <White_Flame> hmm, or maybe not.  That'd be the container where the mixing occurs, not the prime matter getting the mixin
[10:40:06] <beach> Does Sonja Keene not give a name for it?
[10:41:58] <lisp123> I will see if I can find something, but not in that passage
[10:42:40] <lisp123> She just says "The terms 'mixins' and 'aggregate' are informal designations that describe the intended purpose of the class'
[10:42:56] <beach> Maybe "main class" or "application class" or something like that.
[10:45:49] <lisp123> Hmmm ok I will try 'main' class
[10:46:05] <lisp123> thanks both
[10:56:17] <lisp123> http://www.softwarepreservation.org/projects/LISP/MIT/nnnfla1-20040122.pdf (for fans of CLOS who haven't read it before, its a summary of Flavors by its Author Howard Cannon)
[10:58:08] <White_Flame> or many "fundamental class"?
[10:58:13] <White_Flame> *maybe
[10:59:48] <lisp123> that could work
[11:01:41] <lisp123> Howard uses the term 'base flavor' = A base flavor serves as a foundation for building a family of flavors. It defines instance variables, sets up defaults, and is often not instantiable. 
[11:03:25] <White_Flame> problem is that "base class" is in reference to inheritance
[11:03:33] <lisp123> Yeah
[11:04:08] <White_Flame> another unique term that come to mind might be "substrate"
[11:04:29] <White_Flame> kinda hard to think of terms that mean "the thing that has things added to it"
[11:04:38] <White_Flame> that aren't "base"
[11:04:58] <lisp123> Yes :(
[11:05:47] <lisp123> fundamental / main currently seem the best
[11:05:58] <White_Flame> yep
[11:10:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:13:44] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:43:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:57:02] *** Quits: ahc (~ahc@121.98.229.241) (Ping timeout: 256 seconds)
[12:17:51] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:18:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:21:40] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:30:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:31:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:28:37] *** Quits: st_iron (uid370243@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:49:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:23:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[14:23:26] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[15:06:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:31:28] *** Joins: st_iron (uid370243@uxbridge.irccloud.com)
[15:37:18] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:40:34] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[15:50:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:55:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[15:56:07] <rotateq> hmm if Lambda is the ultimate GOTO, is it then also the ultimate COMEFROM ? ^^
[15:57:22] <pjb> Indeed. comefrom can be implemented in terms of goto, or lambda.
[15:57:35] <rotateq> hehe
[15:57:54] <pjb> http://paste.lisp.org/display/151257
[15:57:58] <rotateq> i read about it this morning again and thought how
[15:58:15] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[15:58:33] <rotateq> also i can't remember what gilberth told me how to emulate computable goto (just in case)
[15:58:35] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[15:58:35] *** Joins: sepanko (~sepanko@user/sepanko)
[15:58:47] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[15:58:48] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[15:59:13] <rotateq> pjb: you did do so much ^^
[16:00:29] <pjb> basicallyy (computed-go (expression))  expands to (case (expression) ((label-1) (go label-1)) ((label-2) (go label-2)) … ((label-n) (go label-n)))
[16:01:59] <rotateq> yes right like i wrote it at some place again this week
[16:03:33] <rotateq> did you also do things about continuations in the past?
[16:06:24] <pjb> A little.  I had a bout with Arnesi and jwacs.
[16:06:31] <pjb> a long time ago.
[16:08:52] <rotateq> i don't understand them fully till now, but indeed it's not easy and i don't like lying to myself
[16:09:29] <rotateq> a bit like "runtime gotos"
[16:13:41] <rotateq> i saved your comefrom code in a local file so i could try to understand how it works on the weekend ^^
[16:20:49] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[16:21:03] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[16:21:22] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[16:21:26] *** Joins: paule32 (~paule32@user/paule32)
[16:21:40] *** Parts: paule32 (~paule32@user/paule32) ()
[16:21:50] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:21:51] *** Joins: sepanko (~sepanko@user/sepanko)
[16:21:51] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[16:22:58] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[16:39:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:47:58] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:15:01] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:29:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:06:15] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[18:18:57] *** Joins: Nselm (~Nselm@p200300d56f3676456c837ffc3d1b71a9.dip0.t-ipconnect.de)
[18:31:07] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:56:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:41:44] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:48:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:51:16] *** Quits: st_iron (uid370243@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:57:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:59:31] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[20:04:03] *** Quits: Nselm (~Nselm@p200300d56f3676456c837ffc3d1b71a9.dip0.t-ipconnect.de) (Quit: Client closed)
[20:11:03] *** Joins: Nselm (~Nselm@p200300d56f3676456c837ffc3d1b71a9.dip0.t-ipconnect.de)
[20:27:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:16:24] *** Quits: Nselm (~Nselm@p200300d56f3676456c837ffc3d1b71a9.dip0.t-ipconnect.de) (Quit: Client closed)
[21:18:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:18:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:29:30] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[21:31:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:08:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:19:01] <copec> I've been naming internal package functions "function-name-2", where "function-name" will setup what is necessary to call "function-name-2", most of the time it is because it will be a recursive function. Is it acceptable to use %function-name for the internal function in this case?
[22:19:05] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:43:34] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 268 seconds)
[22:45:41] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[22:52:09] *** Joins: tyson2 (~user@198.98.115.227)
[22:53:32] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:05:02] *** Joins: greaser|q (greaser@antihype.space)
[23:06:05] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:06:05] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:16:20] *** Joins: ahc (~ahc@121.98.229.241)
[23:31:39] <pjb> copec: probably.
[23:32:17] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 268 seconds)
[23:32:45] <pjb> copec: emacs lisp code often use (defun foo  (…) … (foo-1 …))  (defun foo-1 (…) … (foo-2 …))  but it's mostly just to cut a function foo with 10,000 lines in into n functions with 1,000 lines each, ie. a very bad programming style in the first place!
[23:33:14] <pjb> copec: a function should done 1 and only 1 thing, and therefore, it should be at most a screen full long!
[23:33:43] <pjb> copec: since the function of your outer functions should be by definition different from the function of your inner function, they should have different names.
[23:34:28] <pjb> copec: The use of a private version of a function can be acceptable, eg. if it requires some specific, implementation-dependent, protocol to be called.
[23:35:24] <pjb> copec: for example, you could have a function foo, that will wrap a mutex around the call to a internal function %foo.  Client code should use foo, but internal code could use %foo, assuming it has ensure the mutex is respected.
[23:36:02] <pjb> In short, foo-1 or foo-2 is often a smell of badly structured code.
[23:36:25] <White_Flame> or, your recursive portion could be a LABELS function inside the main function-name entry point, if nothing else ever calls it
[23:40:28] *** Joins: Oladon (~olad@98.43.81.226)
[23:44:51] <copec> I usually move recursive portions into labels after I know it works, but if I have to trace it, I move it back.
[23:45:27] <copec> I came across this https://www.cliki.net/naming+conventions and was just wondering if it would be deemed okay style
[23:46:40] <copec> I think -rec at the end would probably be more okay, since it isn't low system level
[23:48:42] *** Quits: tyson2 (~user@198.98.115.227) (Remote host closed the connection)
[23:49:57] <pjb> copec: indeed, it's easier to debug toplevel functions than flet or labels functions.
[23:50:15] <pjb> Some implementations have extensions to designate inner function and trace them.
[23:51:27] <pjb> copec: in CL, one would rather write iterative functions for inner functions. 
[23:51:34] <pjb> for "efficiency".
[23:53:03] <copec> On SBCL my iterative versions have always been slower than my recursive functions with tail calls
[23:53:31] <copec> Also I've been making myself write iterative style lately to fall in with CL style
