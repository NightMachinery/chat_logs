[00:00:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[00:00:42] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[00:01:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:02:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:06:09] *** Quits: AmR (~AmREiSa@156.207.199.106) (Quit: Konversation terminated!)
[00:06:47] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:10:22] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[00:13:46] *** Joins: skapata (~Skapata@user/skapata)
[00:15:17] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 240 seconds)
[00:18:35] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[00:18:58] *** Joins: rgrinberg (~textual@187.223.144.204)
[00:20:54] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[00:27:49] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:39:38] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[00:41:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 245 seconds)
[00:42:30] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[00:48:16] *** Joins: Viewday118 (~Viewday@user/viewday)
[00:49:04] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:49:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[00:50:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:50:26] *** Viewday118 is now known as Viewday11
[00:51:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[00:51:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[00:51:46] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[00:55:32] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[00:57:41] *** Joins: wolfman2000 (~wolfman20@2600:1700:3211:4140:4137:7c2a:6239:76fc)
[00:58:41] *** Joins: rgrinberg (~textual@187.223.248.37)
[00:59:42] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:03:44] *** Joins: proller (~p@80.240.216.69)
[01:04:54] <pflanze> How can I specify a particular version of an overloaded function? In my case: std::all_of(string.begin(), string.end(), foo) where the version of foo I want it to use is `bool foo(char);`.
[01:05:41] <pflanze> I've tried passing a template parameter, but the template parameter specifying the type of the predicate function is the second one, and I don't know how to omit the first one when passing that.
[01:06:45] <pflanze> The first template argument is the iterator type, not the value type, sadly. so  `std::all_of<char>(...)` does not compile.
[01:07:24] <pflanze> And I don't know how to specify the iterator type, either, and presumably it won't be able to derive the predicate type from that anyway (not sure).
[01:08:00] <jaakkos> pflanze: decltype(string.begin())
[01:08:17] <pflanze> Ah
[01:08:50] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[01:12:17] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[01:12:38] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 260 seconds)
[01:15:22] <jaakkos> pflanze: probably worth checking out the answers here: https://stackoverflow.com/questions/2942426/how-do-i-specify-a-pointer-to-an-overloaded-function
[01:15:39] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[01:16:00] <pflanze> Thanks! I got it to work using `std::all_of<decltype(string.begin()), int (*)(int)>`
[01:16:02] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:16:37] <pflanze> Odd that I had to choose int argument and return values for choosing the right upstream isupper function, though. Expected char to bool.
[01:16:47] * pflanze checking your url
[01:17:09] <pflanze> aha, static_cast
[01:17:57] <pflanze> And yes, lambda did work, but I thought that was clunky.
[01:19:04] <pflanze> Wow trying auto approach.
[01:19:40] <pflanze> Works, heh.
[01:24:33] <pflanze> (Well, auto&&... and lambda, via their AS_LAMBDA macro definition. It's over my head, passing `auto(*)(auto&&...)` as template parameter to std::all_of does not work, "invalid use of auto in template argument".)
[01:25:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[01:26:20] *** Quits: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[01:26:33] <pflanze> If I understand right (hopefully I'm wrong), C++ committee is developing their type system in installments. `auto(*)(auto&&...)` works when used for a lambda but not a template argument.
[01:27:16] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[01:28:20] <pflanze> They actually use decltype(auto) for the return type here, and std::forward, which may be the reason my simplicistic attempt doesn't work.
[01:28:58] <pflanze> (And which I totally don't understand. But it's OK, I guess the rabbit hole goes too deep for me right now.)
[01:29:10] *** Joins: rgrinberg (~textual@187.223.250.159)
[01:32:34] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[01:39:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:51] *** ChanServ sets mode: +v npaperbot
[01:41:26] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 256 seconds)
[01:42:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[01:44:53] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[01:45:13] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[01:45:57] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:47:52] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[01:48:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[01:51:27] *** Quits: proller (~p@80.240.216.69) (Remote host closed the connection)
[01:52:26] *** Quits: irc-open-up (bounce@bounce.nastycode.com) (Ping timeout: 252 seconds)
[01:56:58] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:59:57] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[02:01:31] *** Joins: irc-open-up (~irc-open-@bounce.nastycode.com)
[02:03:15] *** Joins: proller (~p@80.240.216.69)
[02:05:40] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[02:05:48] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:07:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:13:57] *** Quits: CormacAttack (~mac@2601:449:8380:7bf0::66db) (Ping timeout: 240 seconds)
[02:14:06] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[02:14:06] *** Joins: Brewster (~Brewster@user/brewster)
[02:20:11] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:20:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[02:21:22] <RandomReader> pflanze - note if you're trying to use std::isupper directly as the last argument, that's not correct
[02:21:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:21:46] <pflanze> What do you mean?
[02:22:00] <pflanze> I mean, I do want to use that one.
[02:22:08] <pflanze> But what's not correct?
[02:22:31] <RandomReader> there are two issues: most std functions cannot be used directly that way, because they don't *have* standard overloads, which means it's not valid to attempt to coerce one
[02:22:51] <RandomReader> (they have signatures by which they can be called, but are not specified beyond that, so it's UB to obtain a pointer to one)
[02:23:19] <RandomReader> but the bigger issue is if you're trying to use isupper() on type char, which is incorrect
[02:23:34] <pflanze> Yes, I realized that char was actually wrong.
[02:23:49] <pflanze> (But I'm not sure why they chose int for the return type.)
[02:23:58] <RandomReader> I mean as input
[02:24:14] <pflanze> Yes, I realized that using char for input was wrong.
[02:24:23] <RandomReader> the typical form for using it with the algorithms is to just supply a lambda that does the correct conversion: https://en.cppreference.com/w/cpp/string/byte/isupper#Notes
[02:24:48] <RandomReader> which should also avoid all of the issues you had with deducing types
[02:25:13] <pflanze> Yes, it did, but as I mentioned I found that clunky.
[02:25:52] <RandomReader> other than a separate function entirely, there isn't anything simpler that will correctly convert from char
[02:26:10] <pflanze> The auto-resolution approach (using C++-14 features) from the SO post does work though.
[02:26:38] <pflanze> And the compilers did complain about is_upper being an overloaded function and ~not knowing which to choose.
[02:27:16] <RandomReader> no, you still don't understand why "char" is incorrect
[02:27:30] <RandomReader> see the cppreference link I provided
[02:29:11] <RandomReader> (in more common terms: the argument to isupper() must be positive or EOF, no other representation, and type char may contain negative values)
[02:31:05] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[02:31:23] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[02:31:41] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[02:32:43] <pflanze> OMG. So isupper accepts negative arguments so it can accept an EOF value? Why does std::string not use unsigned char by default, then (and why do the compilers not warn me)?
[02:33:24] *** Quits: pizdets (~pizdets@183.182.110.61) (Ping timeout: 250 seconds)
[02:33:44] *** Joins: pizdets_ (~pizdets@183.182.111.198)
[02:34:22] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[02:36:39] <RandomReader> "history", basically .. C set the tone that "char" is type used for strings, e.g. in "string literals", and all of the existing library functions above the core I/O ones use that as a basis
[02:37:08] <RandomReader> C++ built on top of that, one of std::string's traits is that it can serve as a C-style string, which is useful for interacting with those APIs
[02:37:52] <pflanze> How do you detect such a footgun? And really, I'm not sure why the compilers didn't warn.
[02:37:56] <RandomReader> as for compilers warning, there's no rule in the base language this would violate, it's just a "your input is expected to meet this criteria" API contract
[02:37:57] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[02:38:47] <pflanze> Ah, yes, since it's signed number to signed number.
[02:38:56] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:39:11] <RandomReader> (as a general pattern, I would have taken the initial trouble as reason enough to check e.g. cppreference and see the information on usage)
[02:39:21] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:39:32] <pflanze> But why would one use is_upper on a type that can include EOF? So, why not provide is_upper(char), that does the conversion?
[02:39:47] <RandomReader> but strings and language handling in general is pretty poor in stdlib, so it's a challenge regardless
[02:39:49] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:40:07] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:40:31] <RandomReader> it works with the other C-library I/O functions, such as getchar()
[02:41:27] <RandomReader> I couldn't give you a full coherent picture offhand, it's been too long since I was dealing with I/O with those functions, but it is reasonably consistent within them
[02:41:45] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:42:07] <pflanze> getchar returns an int, not a char; I'll try with a isupper(char) definition.
[02:42:15] <RandomReader> and of course these days, we know even the idea of isupper(character) isn't valid, so it's left as the existing half-hearted API it is
[02:42:42] <Oxyd> The idea of isupper(character) is valid, but isupper(single byte) is not.
[02:42:44] <pflanze> Yes, but if isupper(unsigned int) is provided as well, that should cover unicode? Or something.
[02:43:20] <RandomReader> I'm not sure that holds for all definitions of "character" actually, I seem to remember some script modifiers .. but the gist of that is true
[02:43:46] <RandomReader> it's more that languages are complex, and something being "uppercase" applies to a sequence of bytes in context
[02:44:05] <RandomReader> assuming it *has* an uppercase concept to begin with, some don't, but at least that'd just be "false" for isupper
[02:44:08] <pflanze> Sure, bytes would be wrong.
[02:44:23] <Oxyd> Unicode defines “letter, uppercase” category for code points. So that's the sense in which that would be valid.
[02:44:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:44:32] <Oxyd> Which may still be suboptimal.
[02:44:44] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[02:45:16] <RandomReader> anyway .. there is a study group looking at Unicode specifically for the C++ standard, but it'll be a while before that's reasonably complete
[02:45:35] <Oxyd> It's amazing how much of a mess string support still is.
[02:45:50] <RandomReader> so hopefully much better in the future, today we're still stuck with status quo and a ton of third-party libraries
[02:46:10] <Oxyd> You'd've thought this all would've been definitely solved by the late 90's, but apparently not.
[02:46:45] <pflanze> Providing my own bool isupper(char c) { return std::isupper((unsigned char)c);} makes the auto-resolution choose this one. So that saves my day.
[02:47:38] <pflanze> Thanks for pointing it out!
[02:47:55] <RandomReader> welcome!
[02:50:15] <pflanze> (Here's my code btw, https://gitlab.com/chchch/advent-of-code/-/blob/master/2021/12/main.cpp)
[02:50:21] <RandomReader> oh, we do have some baby steps .. e.g. std::u8string is a thing, using type char8_t, which is unsigned and capable of holding a UTF-8 code unit
[02:50:23] <pflanze> (Still just learning C++)
[02:50:48] <RandomReader> it's just that there's no surrounding library support for it .. iostreams won't take it, etc
[02:51:25] <RandomReader> (the existing ones I mean, like file and console)
[02:51:35] <pflanze> OK
[02:51:46] <pflanze> (I welcome any feedback on my code, btw.)
[02:53:07] <RandomReader> I would make use of a namespace, put at least your string utility functions in it, and then there's no need for RESOLVE
[02:53:36] <RandomReader> (since the unqualified name "isupper" would be in your namespace, and only find your function)
[02:53:37] <pflanze> Hmm, good point.
[02:54:21] <pflanze> Hmm, actually I'd want the isupper overload be available to any user, i.e. be in my lib, thus always around.
[02:54:27] <pflanze> So wouldn't I still need RESOLVE.
[02:54:49] <neshpion> your lib's functions should be namespaced though
[02:55:36] <RandomReader> it's exactly the same kind of scope search as variables in a function .. if you have a global "foo" and then make a local variable "foo", all the code inside only sees the local
[02:55:49] <RandomReader> so if all of your code is inside the namespace, same principle
[02:56:01] <RandomReader> if not, separate namespaces, well the user would want to pick yours vs std anyway
[02:56:32] <pflanze> I get that if I provide mylib::isupper(char) and I use std::all_of(..., mylib::isupper) that I won't need RESOLVE.
[02:56:33] <RandomReader> explicitly I mena
[02:56:51] <pflanze> But then I'll forget about it next time, so I better actually overload isupper generally.
[02:56:56] <RandomReader> isupper(string) should be inside the namespace too though
[02:57:13] <RandomReader> meaning you don't need to qualify anything, the name "isupper" alone only means the one inside the same scope/namespace
[02:57:13] <pflanze> Aha, fair enough about that.
[02:57:58] <pflanze> But then I'll have to provide 2 definitions, mylib::isupper(char) for local use, and isupper(char) for guest use.
[02:58:35] <RandomReader> why?
[02:59:59] <pflanze> For a guest (might be my forgetful self in the future) using mylib but not its isupper(string) function but writing an own function.
[03:00:16] * pflanze testing it out
[03:05:36] <RandomReader> oh, I forgot about isupper in global scope .. this is messy no matter how you do it
[03:06:05] <RandomReader> in general though, I would not want to see RESOLVE in code .. it's a hack, not something to strive for
[03:06:08] <pflanze> Turns out I have to use RESOLVE even if I put isupper(char) and isupper(string) into the mylib namespace, and even if I say std::all_of(..., mylib::isupper)
[03:06:14] <RandomReader> and in this particular case, there's no guarantee it's going to continue to work
[03:06:23] <RandomReader> what you have to do practically here is pick a different name
[03:06:41] <pflanze> Yes, but then it won't save my forgetful future self.
[03:07:02] <RandomReader> there's no saving your future self that doesn't read your own docs :P
[03:07:19] <pflanze> No, I mean, if I forget that I have to convert char to unsigned char.
[03:07:22] <RandomReader> RESOLVE is fragile and can easily break just on different stdlib versions, let alone systems
[03:07:29] <pflanze> Why?
[03:07:38] <RandomReader> because there's no guarantee about the overload set that is available
[03:07:53] <RandomReader> therefore no guarantee about what it will choose from that set
[03:08:08] <pflanze> Does the compiler not complain/warn if there are duplicate definitions?
[03:08:55] <RandomReader> it doesn't have to be a *duplicate* to fail here
[03:08:58] <pflanze> You mean, if there's no exact match. But, char is the smallest possible type, it will never choose my definition accidentally for say a uint16_t?
[03:09:57] <RandomReader> let me put this another way: you're trying to override a set of functions provided by the standard library, without having any guarantees about what those functions are, because the name isupper itself is effectively reserved in the global scope
[03:10:02] <RandomReader> this is fundamentally fragile
[03:10:42] <RandomReader> RESOLVE is a technique for when you know what those overload sets are and have to work around it rather than providing a better interface
[03:10:48] <RandomReader> in this case, that isn't known
[03:10:54] <pflanze> Is it more fragile then subclassing a class from a dependency?
[03:11:04] <RandomReader> what do you mean?
[03:12:20] <pflanze> Good question since I'm fuzzy about the philosophical effects of overload vs class hierarchy;
[03:12:36] <pflanze> I guess your argument is overloads are just always dangerous in that way.
[03:12:45] <RandomReader> overload sets in this case is just the number of available functions for a given name
[03:12:57] <RandomReader> you can predict which one will be chosen when you know what that set is, and this is what RESOLVE does
[03:13:07] <pflanze> Yes, understood
[03:13:31] <RandomReader> but isupper doesn't have those guarantees, the standard just reserves the entire name and says it can be called "this way"
[03:13:47] <RandomReader> unfortunately, because it's from the C library, the name doesn't only live in std:: but also lives in the global scope
[03:13:48] <pflanze> My argument is that dependencies never have guarantees.
[03:14:08] <pflanze> Hmm, interesting last point.
[03:14:18] <RandomReader> so no matter what namespace you're in, it can always see whatever ends up in global scope
[03:14:29] *** Joins: CaCode (~CaCode@user/cacode)
[03:14:40] <RandomReader> you'd need something more restrictive than just a namespace, so my original suggestion doesn't work
[03:15:00] *** Joins: rgrinberg (~textual@187.223.26.102)
[03:15:03] <pflanze> I understand that point now.
[03:15:40] * pflanze tries defining std::isupper(char)
[03:16:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:16:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:16:27] <RandomReader> that would be formally Undefined Behavior, don't do that :)
[03:16:40] <RandomReader> work with what you have, don't try to fight it
[03:17:13] <RandomReader> (the rules for customizing namespace std are at https://en.cppreference.com/w/cpp/language/extending_std if you want more details)
[03:17:30] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[03:17:49] <RandomReader> in this particular case, I'd either just choose a different name than "isupper", or I'd change the interface entirely (but I'd need to think a lot more to figure out what that looks like)
[03:19:17] *** Joins: caramel (~caramel@user/caramel)
[03:19:47] <RandomReader> looking at the rest of the code .. 71 is UB and may not even work correctly in practice, I wouldn't do that either
[03:20:01] <RandomReader> (it should also not be faster, are you seeing that in practice on optimizing compilers?)
[03:20:29] <pflanze> Yes, it's faster on both clang and g++, with -O3
[03:20:47] <pflanze> And my thinking is that I've got tests, and it's documented.
[03:21:39] <RandomReader> it would only work if the implementations make specific guarantees, and I don't think even clang and gcc will guarantee that particular construct
[03:22:05] <RandomReader> in general, type punning (pretending an object is of a different type than it really is) is forbidden in C++
[03:22:15] <pflanze> I'm using a bitfield which occupies all the bits, so what could go wrong?
[03:22:17] <RandomReader> it's possible to write the code, but the results are usually unpredictable
[03:22:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[03:22:30] <RandomReader> a lot, since there are no guarantees that it will work
[03:22:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:23:05] <RandomReader> first the implementation has to guarantee that the bitfields will be laid out appropriately, and aligned appropriately (this is possible and would be documented by them)
[03:23:27] <RandomReader> then it has to guarantee the read of the incorrect type will always definitively access those bits and only those bits on both sides, under all conditions
[03:23:48] <RandomReader> (definitely not guaranteed by the language, and I'm not aware of any clang or gcc guarantees in this area)
[03:23:49] <pflanze> AFAIK C++ guarantees that the pointer to the object is the same address as the pointer to the object's first field; and I declare that all 32 bits are following directly. So, casting that to uint32_t does look safe to me?
[03:24:15] <pflanze> Hmm.
[03:24:22] <RandomReader> no, you have three distinct bitfield objects, and that does not make a single uint32_t object
[03:24:28] *** Joins: Viewday113 (~Viewday@user/viewday)
[03:26:28] <pflanze> If it doesn't lay them out as 32 consecutive bits, the tests will fail and the docs will point to this code and one can flip the false to true there, and it will use the defined approach.
[03:26:38] *** Joins: cmj (~cmj@68.207.254.124)
[03:26:47] <RandomReader> that doesn't cover the rest of it
[03:26:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:26:50] *** Viewday113 is now known as Viewday11
[03:27:33] <pflanze> Okay, but why the heck do both compilers not keep it in a register and just do a register comparison for me, then?
[03:27:45] <RandomReader> this brings up a bit of a pattern I'm seeing in general with your approach here, and something worth highlighting about C++: observed and testable results does not mean the behavior is reliable or correct
[03:27:52] <pflanze> Its sizeof *is* 4 bytes, after all.
[03:28:11] <pflanze> Sure, which other place have you spotted?
[03:28:14] <RandomReader> it's unfortunately not the sort of language you can derive the rules of from experiments
[03:28:32] <pflanze> Sure, I know that much.
[03:28:40] <RandomReader> they might if you make the bitfields the same type, a uint32_t
[03:29:07] <RandomReader> would have to play more, bitfields are challenging because they have minimal standard rules but a lot of subtle interactions
[03:29:17] <zz> bitfield not kept in a register? sounds familiar.. /me checks
[03:29:40] <RandomReader> e.g. if they're optimizing for hardware access, they might assume it's unsafe to access them in one go
[03:29:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:30:17] <RandomReader> ("optimizing" in the sense of "bitfields are for device driver programming", not in the performance sense)
[03:30:32] <zz> pflanze: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101705
[03:30:38] <smallville7123> does g++ error thing deal with unicode or only ascii ?
[03:31:06] <RandomReader> ...ah cool, so apparently gcc just considers similar situations a bug
[03:32:38] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[03:32:59] <pflanze> RandomReader, OK, so if there's another way to make a packed struct like this I'll do, and if it's manual bit shifting, maybe I'll do that.
[03:33:11] <pflanze> It would really be nice if I wouldn't have to do the latter.
[03:33:41] <pflanze> RandomReader, if you spotted another place where I rely on UB, please tell.
[03:33:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:33:50] <RandomReader> I would try using uint32_t as the type just to see what the compilers do in practice, but otherwise, I think it would be be manual bit shifting unfortunately .. I can't think of another option that would accomplish the space saving there
[03:34:00] <RandomReader> as the type for all 3 I mean
[03:34:31] <pflanze> I'll try it.
[03:35:26] <pflanze> "a pattern I'm seeing in general with your approach here"--ah, were you referring to my IRC questions, not the linked code?
[03:35:42] *** Joins: CaCode_ (~CaCode@user/cacode)
[03:35:46] <RandomReader> oh, yes, sorry .. the whole isupper thing, playing with namespace std, and now that
[03:35:52] <RandomReader> nothing else stands out to me code-wise, it looks pretty straightforward
[03:35:59] <pflanze> OK
[03:36:25] <pflanze> Thanks for the feedback.
[03:36:29] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:36:50] <RandomReader> in case it matters, I'll note you're relying on C++20 for auto-generating operator!= from your operator==
[03:37:30] <RandomReader> if you're not specifically targeting older versions, that's totally fine
[03:39:16] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[03:39:29] <pflanze> I do compile as -std=c++20, but I wasn't aware of that, thanks.
[03:39:35] *** Quits: rgrinberg (~textual@187.223.26.102) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:39:37] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[03:41:46] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:41:48] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[03:43:25] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[03:44:48] *** Joins: CormacAttack (~mac@2601:449:8380:7bf0::66db)
[03:46:59] <pflanze> BTW, I was wondering how to make a global counter like `uint16_t next_SymbolTable_id()` and a predefined upper limit, without writing it myself. And have it be threadsafe if I specify I want that.
[03:47:01] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[03:49:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:50:17] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[03:50:33] <RandomReader> I don't think there's anything in the standard library or language that would make the basic logic simpler than what you have already .. there are some third-party libraries that provide range-limited types
[03:50:54] <pflanze> OK
[03:51:22] <RandomReader> as for threadsafe, the simple approach would be to just add a static mutex, and then start the function off with a non-static scoped_lock on it
[03:51:41] <pflanze> OK
[03:52:22] <RandomReader> the more complex approach would probably involve atomic_compare_exchange_strong and some careful validation for the range checking
[03:53:28] <RandomReader> (I'd personally just do the mutex until this became such a hot path I needed to care about potential performance improvements from atomics, it's time consuming to get right)
[03:53:54] <pflanze> Yes, this is not a hot path.
[03:53:56] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[03:54:08] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[03:54:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[03:54:58] *** Joins: jokoon (~eio@2a01:e0a:542:e160:319e:b227:c334:6b8d)
[03:57:49] <pflanze> BTW I'm using a goto here to share a common continuation inside go_b. I first used a local function via a lambda with [&], and that was a slight bit slower in clang (no change in g++), and I didn't find it more readable, so I went with C style code.
[03:57:59] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:59:20] <pflanze> I could actually avoid the goto if I put the `return 0` into an else branch. But that was also a tad slower (huh), and I kind of like the naming of the continuation (the label).
[03:59:36] <RandomReader> I'd probably just write a function, the inlining should handle it
[03:59:58] <RandomReader> a named function I mean
[04:00:53] <RandomReader> given the one-file nature of this, I'd also expect any timings related to those functions to change based on the test cases
[04:00:53] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[04:00:57] <pflanze> Then I'd have to pass all the arguments, too; and I suspect the compilers, while they inline it, don't recognize that a jump to a common code path would save code size.
[04:01:39] <RandomReader> because this is all visible it's likely to optimize for the calls made, not for the general library use case
[04:02:14] <pflanze> The tests are not compiled in, they are done by running the executable via shell.
[04:02:28] <pflanze> And I don't use trace recording.
[04:03:42] <RandomReader> go/go_b/a/b aren't static in practice?
[04:04:16] <pflanze> a, b would be public if that were a library.
[04:04:59] <RandomReader> ah
[04:05:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[04:06:10] <pflanze> This is an advents of code problem, I'm just trying to learn proper C++ coding, that's why I'm spending some efforts on it.
[04:06:52] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[04:07:39] *** Quits: magla (~gelignite@55d4d5f7.access.ecotel.net) (Quit: Stay safe!)
[04:09:59] *** Quits: jokoon (~eio@2a01:e0a:542:e160:319e:b227:c334:6b8d) (Quit: Leaving)
[04:13:17] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[04:14:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5f3:e636:9fcd:bf6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:16:47] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[04:16:52] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:19:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:20:53] <smallvil_> "In UTF-8, single bytes with values in the range of 0 to 127 map directly to Unicode code points in the ASCII range" does this mean that if a byte is > 127 then it must be unicode ?
[04:22:10] <BtbN> Just means it can't be ASCII
[04:22:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[04:27:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[04:29:25] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[04:29:43] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[04:30:46] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 245 seconds)
[04:32:20] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Client Quit)
[04:32:31] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[04:33:02] <smallvil_> how do i specify 4 byte unicode in a string such as U+10000
[04:33:32] <BtbN> That depends on the encoding. Or what do you mean?
[04:33:50] <smallvil_> as VC seems to only highlight \u1000 and when given \u10000 it does not highlight the last 0
[04:34:13] <BtbN> But does the compiler do the right thing?
[04:34:24] <smallvil_> dunno
[04:34:57] *** Quits: CormacAttack (~mac@2601:449:8380:7bf0::66db) (Ping timeout: 240 seconds)
[04:35:17] <smallvil_> should i assume \u supports all unicode combinations of any length?
[04:35:27] <RandomReader> if you're asking about character escapes in string literals, you'd use \U00010000
[04:35:28] <RandomReader> https://en.cppreference.com/w/cpp/language/escape
[04:35:34] <smallvil_> eg U+7FFFFFFF
[04:36:29] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[04:36:51] <smallvil_> RandomReader: hm ok :)
[04:37:58] <smallvil_> oof VC only highlights the first 4 parts of \u (excluding the \t itself) even if it is \U00010000
[04:38:41] <smallvil_> tho it does correctly highlight it for \U00010000 but not for \u00010000
[04:38:55] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:38:58] <smallvil_> is there a difference between \u and \U
[04:40:00] <smallvil_> and will \U10000 be the same as \U00010000
[04:40:42] <smallvil_> or do i need to explicitly use \U00010000
[04:42:17] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:43:06] *** Quits: clime (~clime@78-80-24-27.customers.tmcz.cz) (Quit: WeeChat 3.3)
[04:43:40] <pflanze> smallvil_, \u is for 16 bit codes, \U for 32 bit ones
[04:43:51] <smallvil_> oh ok
[04:44:01] <smallvil_> would this be good?
[04:44:02] <smallvil_> "1 byte unicode:\nlow=\U0000\nhigh=\U007F\n2 byte unicode:\nlow=\U0080\nhigh=\U07FF\n3 byte unicode:\nlow=\U0800\nhigh=\UFFFF\n4 byte unicode:\nlow=\U10000\nhigh=\U1FFFFF\n5 byte unicode:\nlow=\U200000\nhigh=\U3FFFFFF\n6 byte unicode:\nlow=\U4000000\nhigh=\U7FFFFFFF\n"
[04:44:31] <pflanze> I don't think so; see the link given above
[04:45:08] *** Quits: gothicserpent (~gothicser@204.152.216.121) (Ping timeout: 252 seconds)
[04:45:43] <smallvil_> this?
[04:45:44] <smallvil_> "1 byte unicode:\nlow=\U00000000\nhigh=\U0000007F\n2 byte unicode:\nlow=\U00000080\nhigh=\U000007FF\n3 byte unicode:\nlow=\U00000800\nhigh=\U0000FFFF\n4 byte unicode:\nlow=\U00010000\nhigh=\U001FFFFF\n5 byte unicode:\nlow=\U00200000\nhigh=\U03FFFFFF\n6 byte unicode:\nlow=\U04000000\nhigh=\U7FFFFFFF\n"
[04:46:21] <pflanze> I think you got it
[04:46:25] <smallvil_> yay
[04:46:28] <pflanze> wait
[04:47:14] <pflanze> Nah looks right (I thought you had just added zeroes in some cases)
[04:47:33] <pflanze> *appended
[04:48:01] <smallvil_> -_-   error: invalid universal character  \U001FFFFF
[04:48:17] <smallvil_> ;-;
[04:48:33] <smallvil_> 4 	U+10000 	U+1FFFFF 	11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	
[04:49:00] <pflanze> Not all code points are valid Unicode characters, maybe that's the reason.
[04:49:01] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[04:49:16] <smallvil_> :(
[04:49:31] <smallvil_> how do i force the compiler to accept them?
[04:49:42] <pflanze> What do you want to do with them?
[04:50:06] <smallvil_> i want to try to get a correct column and byte position for my input stream
[04:50:30] <BtbN> So use byte literalls, and not unicode ones?
[04:50:51] <BtbN> The way those unicode ones are represented as bytes is technically not 100% certain
[04:50:57] <smallvil_> i need to deal with unicode
[04:52:20] <pflanze> So you want to intersperse your text input streams with location information?
[04:52:29] <smallvil_> yes
[04:52:46] *** Joins: gothicserpent (~gothicser@89.45.90.230)
[04:52:49] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:52:51] <smallvil_> and also with location information within a unicode text
[04:53:39] <pflanze> As long as you don't use literals, and you use a decoder and encoder library that's not bothered by invalid unicode code points, you may get away with it.
[04:54:17] <pflanze> But, that's like undefined behaviour and if the unicode standard adds yet more emoticons then your chosen codepoints might get used.
[04:54:57] <smallvil_> ok
[04:55:20] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[04:56:34] *** Joins: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[04:56:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[04:56:57] *** Quits: froggyc (~froggy@2.235.241.212) (Ping timeout: 240 seconds)
[04:57:16] <pflanze> A safe solution would add a level of some kind of encoding on top of the original input.
[04:57:19] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[04:57:34] *** Joins: clime (~clime@78-80-24-27.customers.tmcz.cz)
[04:58:12] <smallvil_> could i use std::string to append byte literals?
[04:58:54] <smallvil_> like str += 0x001FFFFF
[04:59:12] <pflanze> I don't actually know.
[04:59:55] <pflanze> I mean, I don't know if that would allow invalid code points.
[05:01:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[05:02:29] <pflanze> Also, std::string surely won't, as that's std::basic_string<char>
[05:02:51] <pflanze> You probably meant std::u32string
[05:03:20] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:03:27] <pflanze> (see https://en.cppreference.com/w/cpp/string)
[05:03:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[05:04:46] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[05:05:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:05:50] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[05:06:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[05:11:13] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[05:12:05] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[05:17:12] <smallville7123> ok so casting to (wchar_t) works :)
[05:22:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:23:58] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:24:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:24:42] *** Joins: Viewday111 (~Viewday@user/viewday)
[05:26:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:26:58] *** Viewday111 is now known as Viewday11
[05:29:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:30:44] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[05:34:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[05:39:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:52] *** ChanServ sets mode: +v npaperbot
[05:41:12] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[05:44:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:48:49] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[05:49:27] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:49:36] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[05:52:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:54:10] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:59:57] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[06:01:53] *** Quits: Pook (~Pook@2001:8a0:f996:1400:598d:e7eb:c598:7da9) (Quit: Leaving)
[06:02:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:07:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[06:14:12] *** Joins: smach (~savio@177.12.46.3)
[06:14:47] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:17:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[06:18:45] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:29:11] *** Quits: smach (~savio@177.12.46.3) (Remote host closed the connection)
[06:31:31] *** Quits: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:35:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:36:16] *** Joins: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net)
[06:38:39] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:39:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:40:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[06:43:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:44:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:45:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:45:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:46:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:47:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:48:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:48:58] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 268 seconds)
[06:49:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:50:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:51:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:52:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:53:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:54:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:55:13] *** Quits: clime (~clime@78-80-24-27.customers.tmcz.cz) (Quit: WeeChat 3.3)
[06:55:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:56:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:57:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:58:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:59:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:00:13] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:00:37] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[07:00:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:01:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:02:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:04:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:05:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:06:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[07:07:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:08:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:08:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[07:08:43] *** Quits: causative (~halberd@user/causative) (Ping timeout: 250 seconds)
[07:09:18] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Quit: Leaving)
[07:09:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:09:51] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[07:10:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:11:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:13:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:13:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[07:14:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:15:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:16:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:17:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:18:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:18:36] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[07:19:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:20:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:21:16] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[07:21:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:22:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:23:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[07:23:16] *** Joins: froggyc (~froggy@2.235.241.212)
[07:24:35] *** Joins: Viewday118 (~Viewday@user/viewday)
[07:24:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:25:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:26:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:26:32] *** Viewday118 is now known as Viewday11
[07:27:53] *** Joins: causative (~halberd@user/causative)
[07:28:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:29:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:30:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:31:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:33:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:34:16] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[07:34:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:34:46] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[07:35:23] *** Joins: causative (~halberd@user/causative)
[07:35:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:36:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:37:50] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:37:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:38:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:39:30] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[07:40:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:41:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:42:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:43:21] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:43:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:43:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:44:19] *** Joins: smach (~savio@177.12.46.3)
[07:44:19] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[07:44:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:45:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:47:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:47:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:48:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:48:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[07:48:59] *** Quits: smach (~savio@177.12.46.3) (Client Quit)
[07:50:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:51:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:53:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:53:39] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:53:46] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:53:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:54:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:55:17] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[07:55:38] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Remote host closed the connection)
[07:55:47] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[07:55:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:56:23] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[07:58:31] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[08:00:24] *** Joins: causative_ (~halberd@user/causative)
[08:01:06] *** Quits: causative (~halberd@user/causative) (Ping timeout: 256 seconds)
[08:02:50] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 260 seconds)
[08:03:13] *** Quits: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:03:55] <norias> the more C++ I write
[08:04:01] <norias> the more I realize I don't know C++
[08:04:07] * norias shrugs.
[08:06:18] *** Joins: john99 (~john99@138.246.103.34.bc.googleusercontent.com)
[08:07:52] <john99> Hi i am trying to return a pointer to class, Engine* foo(uri){ return new Engine(uri); } but the values of Engine are not initialized
[08:07:57] *** Joins: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net)
[08:08:07] <john99> why?
[08:11:10] <RandomReader> norias - sadly, that's pretty common
[08:11:34] <RandomReader> john99 - initialization would be the responsibility of the Engine constructor
[08:11:44] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[08:11:56] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:12:04] <john99> ummm
[08:12:22] <john99> i am pretty sure i did that in other code... but now i dont catch the difference
[08:12:27] <john99> okay, ty
[08:12:31] <RandomReader> the function you showed will return a valid pointer to Engine, or throw an exception
[08:12:44] <john99> yes, return a valid pointer
[08:12:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[08:12:59] <RandomReader> so if you end up with a pointer to Engine, but the contents of Engine are not correct (and there's nothing else going on here), then it sounds like the Engine constructor is not doing its job
[08:13:12] <john99> and the constructor is called, but i am doing something wrong becouse the values are empty
[08:13:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:13:37] <john99> yes,same conclusion
[08:13:39] <john99> ty
[08:14:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:15:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:16:03] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[08:16:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:18:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:18:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:19:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:20:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:20:48] <john99> okay, new concept, delegating constructors....
[08:21:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:22:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:23:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:24:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:24:57] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:25:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:26:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:27:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:28:16] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 268 seconds)
[08:32:49] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:33:18] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[08:35:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:37:37] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[08:38:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[08:39:22] *** Joins: Enitin (~Enitin@82.102.22.86)
[08:41:54] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[08:46:12] *** Joins: cesello (~cesello@user/cesello)
[08:46:31] *** Quits: cesello (~cesello@user/cesello) (Client Quit)
[08:48:27] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[08:48:37] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[08:49:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:50:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:51:35] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[08:51:53] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Remote host closed the connection)
[08:53:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:53:29] *** Quits: spiri__ (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[08:54:13] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:54:40] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[08:56:54] *** Joins: epony (epony@user/epony)
[08:58:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[09:03:35] *** Joins: CormacAttack (~mac@2601:449:8380:7bf0::66db)
[09:07:55] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:13:17] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:14:50] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[09:15:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:16:04] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[09:16:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[09:16:23] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:17:07] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:17:29] *** Quits: CormacAttack (~mac@2601:449:8380:7bf0::66db) (Quit: WeeChat 3.3)
[09:23:36] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[09:24:52] *** Joins: Viewday110 (~Viewday@user/viewday)
[09:24:59] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[09:26:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:26:06] *** Viewday110 is now known as Viewday11
[09:27:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[09:32:35] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:32:56] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[09:33:15] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:34:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[09:35:52] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Remote host closed the connection)
[09:36:13] *** Joins: bauripalash (~bauripala@223.176.32.6)
[09:37:40] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[09:38:04] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[09:39:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:51] *** ChanServ sets mode: +v npaperbot
[09:42:32] *** Quits: rahl (~rahl@102.114.169.69) (Ping timeout: 256 seconds)
[09:44:00] *** Joins: rahl (~rahl@102.114.118.155)
[09:47:03] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[09:47:24] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[09:47:43] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[09:49:03] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:52:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:52:35] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[09:52:50] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:54:06] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[09:59:06] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[09:59:22] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:59:52] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Client Quit)
[10:02:39] <john99> hi, in C++ i can forze a derived class to imlement a constructor?
[10:02:44] <john99> implement*
[10:03:00] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:03:29] <john99> i can forza a derived class to implement a constructor (virtual*) from a base class?
[10:03:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[10:04:36] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:04:55] <RandomReader> each type requires its own unique constructor, the compiler may create default ones for you, but that's about it
[10:04:59] <RandomReader> constructors are not virtual and not inherited
[10:05:07] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[10:05:43] <john99> ummmokay
[10:05:46] <john99> ty
[10:05:49] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[10:06:09] <RandomReader> so the answer to that question is "no", but it's not necessary anyway: the derived type needs a constructor to be useful, and it has to choose one of the base constructors to be used during creation
[10:07:01] <RandomReader> if you do absolutely nothing the compiler will try to create/use the default constructor (no args), but if the base doesn't have one, then it can't be created and you would need to write a constructor just to use the derived type
[10:07:16] <john99> yes, but if i know each derived class will use the same data pass to constructor in a diferent way? it would be nice "force/remember you must implement this constructor"
[10:07:38] <RandomReader> you express that by making that the only constructor available on the base
[10:07:58] <john99> how i can do taht?
[10:08:02] <RandomReader> then the derived has to express that constructor in its initializer list regardless, meaning someone has to write a derived constructor that provides the base with the correct arguments
[10:08:14] <RandomReader> by simply writing only that constructor on the base
[10:08:29] <RandomReader> what's the actual problem here? what happened when you tried this?
[10:08:37] <john99> i am writting right now
[10:08:42] <john99> XD
[10:08:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[10:09:07] <RandomReader> { Derived d; }   struct Base { Base(int required_arg) {} };  struct Derived : Base { };
[10:09:07] <geordi> error: use of deleted function 'Derived::Derived()'
[10:09:59] <RandomReader> { Derived d; }   struct Base { Base(int required_arg) {} };  struct Derived : Base {  Derived() : Base(42) { } /* I have to write something like this just to make Derived constructible */  };
[10:10:00] <geordi>  
[10:10:32] <RandomReader> at that point it is my choice whether I make the Derived constructor require args too, or if I just make stuff up for the Base
[10:10:55] <RandomReader> (that example made up 42)
[10:12:06] <john99> to be honest i am not very sure waht happen, but i understand taht exist some way to force the derived class "MUST" implement some constructor to pass to base class
[10:12:18] <john99> ammmmmm
[10:12:37] <john99> okay, definig some variable that must be declared in base class
[10:12:58] <john99> okay
[10:13:02] <RandomReader> it's just composition
[10:13:18] <john99> yes, i forgot that point
[10:13:20] <RandomReader> { Base b; }   struct Base { Base(int required_arg) {} };
[10:13:20] <geordi> error: no matching function for call to 'Base::Base()'
[10:13:40] <RandomReader> Derived has this exact same problem, it must initialize Base with *something*, same as a member variable
[10:13:53] <RandomReader> and that's done in the constructor member initializer list
[10:14:05] <john99> yes, ty i understand now, thnks for your time
[10:14:06] <RandomReader> so that ends up forcing someone to write a Derived constructor
[10:14:08] <RandomReader> welcome
[10:14:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[10:17:24] <RandomReader> also remember public/protected/private applies to each constructor as well
[10:17:41] <RandomReader> so if you have delegated constructors, you can mark them private .. if you have a constructor that only Derived should use, it can be protected .. etc
[10:17:53] <RandomReader> don't have to, just an option
[10:22:25] <john99> its the correct option
[10:23:09] *** Joins: Sadale (~Sadale@user/sadale)
[10:28:40] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[10:29:04] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[10:29:15] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Remote host closed the connection)
[10:31:40] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[10:37:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[10:37:54] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[10:39:57] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:42:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[10:43:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:46:33] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[10:49:58] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[10:50:04] *** Joins: rajkohaxor (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[10:51:13] *** Quits: rajkohaxor (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[10:51:23] *** Joins: bitrot (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[10:51:26] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[10:51:31] *** Quits: bitrot (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Remote host closed the connection)
[10:52:38] *** Joins: xiongxin (~Thunderbi@113.116.33.149)
[10:55:19] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[11:02:24] *** Quits: bauripalash (~bauripala@223.176.32.6) (Remote host closed the connection)
[11:02:35] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:06:52] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[11:10:23] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:13:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:14:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[11:16:29] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[11:17:49] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Remote host closed the connection)
[11:18:00] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:19:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 260 seconds)
[11:21:10] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[11:23:51] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Client Quit)
[11:24:37] *** Joins: Viewday118 (~Viewday@user/viewday)
[11:25:32] *** Joins: rendar (~rendar@user/rendar)
[11:26:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:26:15] *** Viewday118 is now known as Viewday11
[11:26:48] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[11:27:19] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:28:39] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[11:31:11] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[11:31:29] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:31:44] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:32:02] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:32:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[11:35:40] <smallville7123> why do i get ffffff80
[11:36:19] <smallville7123> from     std::string x;   wchar_t a;    x += (a = 0x00000080);    print_hex(x[0]);
[11:37:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[11:39:34] <smallville7123> why do i get ffffff80    from     std::string x;   wchar_t a;    x += (a = 0x00000080);    std::cerr << "hex" << " " << std::hex << (int32_t)x[0] << "\n";
[11:41:24] <InPhase> { char c = (char)0x80; cout << (unsigned int)(c) , (unsigned int)(uint8_t(c)); } // smallville7123
[11:41:24] <geordi> 4294967168, 128
[11:44:04] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[11:44:44] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:45:21] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:47:49] <smallville7123> printing it as unsigned doesnt work
[11:47:50] <smallville7123> int32_t, uint32_t, unsigned int get ffffff80
[11:49:09] <smallville7123>  { char c = (char)0x80; cout << std::hex << (unsigned int)(c) << ", " << std::hex << (unsigned int)(uint8_t(c); }
[11:49:09] <geordi> error: Unexpected `}` after `uint8_t(c); `. Expected ')' or balanced code.
[11:49:19] <smallville7123>  { char c = (char)0x80; cout << std::hex << (unsigned int)(c) << ", " << std::hex << (unsigned int)(uint8_t(c)); }
[11:49:20] <geordi> ffffff80, 80
[11:49:42] <smallville7123>  { char c = (char)0x80; cout << std::hex << (unsigned int)(c) << ", " << std::hex << (unsigned int)((uint8_t) c)); }
[11:49:42] <geordi> error: Unexpected `)` after `uint8_t) c)`. Expected '}' or balanced code.
[11:50:05] <smallville7123> -_-
[11:50:13] <smallville7123>  { char c = (char)0x80; cout << std::hex << (unsigned int)(c) << ", " << std::hex << (unsigned int)((uint8_t) c))); }
[11:50:13] <geordi> Same error.
[11:50:30] *** Joins: nitrowheels (~nitrowhee@151.49.191.20)
[11:51:03] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Remote host closed the connection)
[11:51:14] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[11:51:16] <smallville7123> "18:21:02 geordi: Give up already." oof
[11:51:30] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Client Quit)
[11:54:44] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[11:55:38] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[11:56:11] <Learath2> smallville7123: char seems to be signed, 0x80 would be negative, thus the conversion to a larger type would sign extend padding it on the left with ffffff
[11:56:27] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[11:57:02] <Learath2> (to preserve the sign)
[11:59:18] <smallville7123> oh ok
[11:59:22] <smallville7123> :)
[12:03:52] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[12:06:42] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[12:07:17] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[12:08:44] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5326)))
[12:08:45] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:18:08] *** Joins: shugo__ (~shugo@user/shugo)
[12:18:16] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:18:50] <shugo__> hey is there #algorithm channel on libera ? i can'tfind it
[12:21:20] <RandomReader> #algorithms
[12:21:44] <shugo__> thanks
[12:21:48] *** Parts: shugo__ (~shugo@user/shugo) ()
[12:26:27] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:28:09] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[12:29:34] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:29:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:29:57] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[12:30:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:31:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:31:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:32:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:33:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:34:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:35:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:36:15] *** smallvil_ is now known as smallville7123
[12:37:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:37:37] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[12:38:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:39:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:39:11] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[12:40:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:41:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:42:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:42:38] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:43:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:44:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:45:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:46:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:47:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:48:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:49:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:50:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:51:02] *** Joins: smach (~savio@177.12.46.3)
[12:51:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:52:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:53:07] *** Joins: MarcoFe (~marcofe@net-5-88-237-210.cust.vodafonedsl.it)
[12:53:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[12:54:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:55:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:56:37] *** Quits: john99 (~john99@138.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[12:56:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:57:40] *** Quits: MarcoFe (~marcofe@net-5-88-237-210.cust.vodafonedsl.it) (Remote host closed the connection)
[12:57:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:57:59] *** Joins: MarcoFe (~marcofe@net-5-88-237-210.cust.vodafonedsl.it)
[12:59:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:59:56] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[13:00:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:00:41] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:01:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:02:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:03:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:04:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:04:56] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:05:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:06:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:07:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:07:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3dfc:e337:c0f:541a)
[13:07:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:08:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:08:41] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:08:47] *** Joins: jokoon (~eio@2a01:e0a:542:e160:5183:35c9:63a0:e5f3)
[13:09:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:10:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:11:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:12:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:13:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:14:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:15:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:17:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[13:18:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:18:20] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[13:19:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:19:33] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[13:20:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:21:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:22:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:23:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:24:22] *** Joins: Viewday116 (~Viewday@user/viewday)
[13:24:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:25:28] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[13:25:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:25:57] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:25:57] *** Viewday116 is now known as Viewday11
[13:26:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:27:14] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[13:27:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:28:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:28:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:29:28] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Client Quit)
[13:29:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:30:38] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[13:30:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:31:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[13:32:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:33:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:34:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:35:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:35:34] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[13:35:54] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[13:35:59] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:36:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:37:02] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[13:37:08] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Ping timeout: 256 seconds)
[13:37:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:37:34] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:38:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:39:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:39:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:39:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:52] *** ChanServ sets mode: +v npaperbot
[13:40:30] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[13:40:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:41:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:41:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:42:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:43:30] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Ping timeout: 260 seconds)
[13:43:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:44:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:45:12] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[13:45:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:46:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:47:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:48:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:49:57] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[13:50:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:51:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:52:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:52:17] *** Quits: jokoon (~eio@2a01:e0a:542:e160:5183:35c9:63a0:e5f3) (Quit: Leaving)
[13:53:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:54:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:55:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:56:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:57:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[13:58:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:58:50] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:59:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:00:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:01:42] *** Quits: chozorho (~chozorho@2601:146:300:c30:23ad:1b46:b2f9:18) (Quit: good night)
[14:01:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:02:22] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:20e5:aa8:d248:c43e)
[14:02:22] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:20e5:aa8:d248:c43e) (Changing host)
[14:02:22] *** Joins: skapata (~Skapata@user/skapata)
[14:02:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:03:49] <jason1234> how to fix this error: /usr/include/c++/6/cwchar:141:11: error: ‘::btowc’ has not be  ...
[14:04:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:05:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:05:30] <jason1234> it is the LE text editor, tired tried to be compiled under linux. LE editor.
[14:06:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:07:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:08:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:08:45] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[14:09:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:09:33] *** Joins: plastico (~plastico@neomutt/plastico)
[14:10:13] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[14:10:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:11:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:12:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:13:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:14:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:15:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:16:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:17:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:17:55] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Ping timeout: 268 seconds)
[14:18:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:19:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:20:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:22:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:23:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:24:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:24:40] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[14:25:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:25:55] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[14:26:15] <Franciman> hi all, what's the standard way to use the size_t type?
[14:26:18] <Franciman> what header should I import?
[14:26:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:27:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:28:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:28:46] <leduyquang753> https://en.cppreference.com/w/cpp/types/size_t
[14:29:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:29:42] <Franciman> ty
[14:30:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:30:57] *** Joins: Sadale_ (~Sadale@user/sadale)
[14:31:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:32:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:33:14] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[14:33:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:34:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:35:39] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[14:35:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:35:49] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.3)
[14:36:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:37:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:38:06] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 260 seconds)
[14:38:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:39:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:40:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:41:16] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Remote host closed the connection)
[14:41:38] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[14:41:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:42:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:44:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:45:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:46:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:46:28] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:47:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:48:02] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:48:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:48:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:48:47] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:49:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:50:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:51:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:52:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:53:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:54:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:54:38] *** Joins: CaCode (~CaCode@user/cacode)
[14:54:42] *** Parts: CaCode (~CaCode@user/cacode) ()
[14:55:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:55:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:56:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:57:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:58:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:58:58] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:59:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[14:59:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:00:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:01:31] *** Quits: Sadale_ (~Sadale@user/sadale) (Quit: tawa pona!)
[15:01:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:02:47] *** Joins: Sadale (~Sadale@user/sadale)
[15:03:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:04:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:05:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:06:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:07:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:07:47] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[15:08:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:09:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:09:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[15:10:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:11:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:12:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:13:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:13:37] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Ping timeout: 240 seconds)
[15:13:43] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d156:ab7b:6937:119c)
[15:14:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:15:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:16:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:17:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:18:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:18:54] *** Joins: frost (~frost@user/frost)
[15:19:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:20:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:22:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:23:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:23:50] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[15:24:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:24:27] *** Joins: Viewday111 (~Viewday@user/viewday)
[15:25:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:26:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:26:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:26:30] *** Viewday111 is now known as Viewday11
[15:27:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:28:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:29:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:30:15] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[15:30:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:30:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[15:31:31] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[15:31:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:32:47] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:32:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:32:53] *** Quits: Burgundy (~yomon@79.115.213.171) (Remote host closed the connection)
[15:33:34] *** Joins: seninha (~seninha@user/seninha)
[15:33:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:34:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:35:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:37:36] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[15:43:16] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:44:57] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[15:45:13] *** Joins: pulse (~pulse@user/pulse)
[15:47:39] *** Joins: callq (~callq@194.60.86.240)
[15:48:12] *** Joins: winningluser (~wl@2601:8c1:80:70d0::e17b)
[15:52:59] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Quit: Leaving)
[15:59:47] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:59:48] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[16:02:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:06:10] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[16:06:17] *** Quits: callq (~callq@194.60.86.240) (Ping timeout: 240 seconds)
[16:07:44] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[16:09:24] *** Joins: callq (~callq@2409:4062:2e09:a869:9cf3:f099:7831:b6a)
[16:09:57] *** Joins: sysctl (~sysctl@88.215.77.255)
[16:12:17] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[16:15:39] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[16:16:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:18:01] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:18:37] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Quit: The Lounge - https://thelounge.chat)
[16:19:08] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[16:19:09] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[16:22:17] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[16:23:20] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[16:27:06] *** mib1 is now known as mib
[16:28:11] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[16:29:07] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:41:32] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[16:43:24] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[16:48:38] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[16:49:58] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Quit: Leaving)
[16:51:33] *** Joins: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs)
[16:51:43] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[16:57:08] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:58:32] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[16:59:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:03:16] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:06:12] *** Joins: adlternative (~adl@117.32.216.73)
[17:06:58] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:07:47] *** Quits: smach (~savio@177.12.46.3) (Quit: Leaving)
[17:08:17] *** Quits: gothicserpent (~gothicser@89.45.90.230) (Ping timeout: 240 seconds)
[17:10:24] *** Joins: gothicserpent (~gothicser@89.45.90.225)
[17:14:11] *** Joins: Pook (~Pook@2001:8a0:f996:1400:8110:cdd5:5f21:6ca9)
[17:18:58] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[17:19:21] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:24:36] *** Joins: Viewday115 (~Viewday@user/viewday)
[17:26:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:26:38] *** Viewday115 is now known as Viewday11
[17:28:21] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[17:30:00] *** Quits: MarcoFe (~marcofe@net-5-88-237-210.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[17:32:18] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Read error: Connection reset by peer)
[17:32:36] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[17:32:58] *** Joins: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de)
[17:32:58] *** Quits: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de) (Client Quit)
[17:35:01] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:36:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:38:21] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:38:49] <manuels> does accessing members in a class always imply the redirectoin over the this-> pointer?
[17:39:01] <manuels> or are they optimzed
[17:39:18] <manuels> I wonder if local variables are faster in access than members
[17:39:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:52] *** ChanServ sets mode: +v npaperbot
[17:45:28] <Oxyd> C++ does not specify how fast variable access is. Implement your program first with member variables, then with local variables and measure which program is faster.
[17:45:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:48ee:b2a3:80ed:d885)
[17:47:53] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[17:48:13] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[17:50:14] <CarloWood> manuels: since the offset between this and the member is a constant and relatively small, it doesn't matter that there is a this pointer. It's just an assembly addressing method that uses two registers. You still need to use one register for the this pointer of course, but I bet you need that anyway.
[17:50:59] <CarloWood> Local variables also need a "this" pointer: the stack pointer. And the addressing happens in the same way, with a constant offset relative to that.
[17:53:14] <CarloWood> The stack pointer also needs to be "created" (you have to add something to it to allocate room for all local variables in the new scope). So no difference. In fact, member variables might be faster when they are already initialized :P. Local variables still have to be initialized. The only reason local variables might be faster is when they are optimized to exclusively use registers, and don't live on the stack at all.
[17:53:38] <CarloWood> In that case you need to load the member variable into a register first.
[17:54:39] <CarloWood> And write them back afterwards.
[17:58:37] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:59:20] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:04:17] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:04:41] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[18:07:24] *** Joins: xardas (~xardas@149.233.51.127)
[18:09:12] <xardas> Am I doing something wrong ? https://wandbox.org/permlink/ugXgPUNsAIq0Emn7
[18:09:48] <xardas> Using an IDE I get an error, but not the case with wandbox
[18:10:22] <CarloWood> yes
[18:10:49] <CarloWood> That is, no - because it compiles. But as a human I can guess you're doing something that you didn't intend to do.
[18:10:53] <CarloWood>     b1++;
[18:10:53] <CarloWood>     cout << "b0 is now at " << b0 << endl;
[18:11:52] <TinoDidriksen> b1++; but you never use b1 after that, so not sure what you expect that to do.
[18:12:11] <CarloWood> If you have to explain that then all bets are off.
[18:12:29] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:12:44] <xardas> I meant b0, my bad.
[18:13:02] <xardas> I wanted to change the value of a[0]
[18:13:05] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:13:09] <xardas> to what's inside a[1]
[18:13:20] <xardas> by advancing the pointer to the next memory address
[18:13:26] <TinoDidriksen> But you're not changing a.
[18:13:44] *** Joins: rajkohaxor (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[18:13:55] <TinoDidriksen> You're just changing a pointer into 'a'.
[18:14:48] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[18:14:55] <TinoDidriksen> You're changing a sign pointing to a city, but the city remains where it is.
[18:15:28] <xardas> I just realized my mistake.
[18:16:29] <xardas> How can I swap the values of a[0] and a[1] just using pointers ?
[18:17:00] <xardas> TinoDidriksen thx for pointing that out .
[18:17:04] *** Quits: rajkosto (~rajkosto@93-86-94-32.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:18:32] *** Joins: smach (~savio@177.12.49.3)
[18:18:58] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[18:31:46] *** Joins: gdd (~gdd@129.199.146.230)
[18:32:49] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[18:34:34] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[18:34:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[18:36:34] *** Joins: unyu (~pyon@user/pyon)
[18:38:43] *** Quits: rajkohaxor (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[18:39:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[18:40:36] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:45:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[18:48:30] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:49:01] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[18:49:37] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 240 seconds)
[18:59:19] *** Joins: plantman (~plantman@2601:405:4680:1b0::f)
[18:59:28] *** Joins: xiongxin1 (~Thunderbi@119.123.103.143)
[19:00:57] *** Quits: adlternative (~adl@117.32.216.73) (Ping timeout: 240 seconds)
[19:00:57] *** Quits: xiongxin (~Thunderbi@113.116.33.149) (Ping timeout: 240 seconds)
[19:00:57] *** xiongxin1 is now known as xiongxin
[19:01:48] *** Quits: smach (~savio@177.12.49.3) (Quit: Leaving)
[19:07:02] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:07:37] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[19:07:55] *** Quits: xiongxin (~Thunderbi@119.123.103.143) (Quit: xiongxin)
[19:13:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[19:19:39] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[19:20:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:21:55] *** Joins: leah2 (~leah@vuxu.org)
[19:22:25] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:23:28] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[19:23:32] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[19:23:45] *** Joins: Betal (~Betal@user/betal)
[19:24:38] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[19:28:35] *** Joins: ferdna (~ferdna@user/ferdna)
[19:28:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:48ee:b2a3:80ed:d885) (Ping timeout: 240 seconds)
[19:32:55] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[19:35:34] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:35:38] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[19:35:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[19:36:36] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:37:54] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[19:38:35] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Client Quit)
[19:40:56] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[19:42:57] *** Quits: rahl (~rahl@102.114.118.155) (Ping timeout: 240 seconds)
[19:44:46] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[19:44:46] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.3)
[19:49:42] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:50:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[19:52:44] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:acff:f5a2:fb9a:e3d2)
[19:54:38] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[19:55:29] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[19:56:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[20:01:44] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[20:02:44] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Quit: Leaving)
[20:03:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[20:04:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:05:36] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:09:38] *** Joins: lleo (~lleo@31-161-159-13.mobile.kpn.net)
[20:09:50] *** Parts: lleo (~lleo@31-161-159-13.mobile.kpn.net) ()
[20:09:54] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[20:09:59] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[20:11:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[20:12:59] *** Joins: r0x (~r0x@93.56.206.108)
[20:13:16] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[20:15:07] *** Quits: r0x (~r0x@93.56.206.108) (Client Quit)
[20:18:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[20:19:36] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:23:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[20:37:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:37:33] *** Joins: magla (~gelignite@55d4bf95.access.ecotel.net)
[20:42:57] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[20:44:06] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Ping timeout: 245 seconds)
[20:45:12] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[20:46:00] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[20:52:49] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[20:55:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[20:59:21] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:00:10] *** Joins: rahl (~rahl@102.114.58.55)
[21:00:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[21:01:23] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:13:20] *** Joins: AmR (~AmREiSa@156.207.199.106)
[21:14:01] *** Joins: slidercrank (~slidercra@user/slidercrank)
[21:18:09] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:29:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[21:30:03] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[21:32:38] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:32:39] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[21:35:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[21:39:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:53] *** ChanServ sets mode: +v npaperbot
[21:41:34] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[21:45:23] *** Quits: _SKiTZO (~dark@64.89-10-146.nextgentel.com) (Remote host closed the connection)
[21:49:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:51:08] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[21:52:58] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[22:04:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[22:04:26] *** Joins: kapil (~kapil@o-k.website)
[22:07:45] *** Quits: Cahaan (~Cahaan@user/cahaan) (Read error: Connection reset by peer)
[22:08:06] *** Quits: callq (~callq@2409:4062:2e09:a869:9cf3:f099:7831:b6a) (Quit: callq)
[22:08:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[22:09:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:11:58] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:12:28] *** Joins: kapil (~kapil@o-k.website)
[22:14:39] *** Joins: flynn (~mcbloch@user/flynn)
[22:18:28] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[22:22:27] *** Joins: Cahaan (~Cahaan@user/cahaan)
[22:25:53] <CarloWood> Is there a way to run over all elements of a std::stack<> ?
[22:27:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:28:44] <Oxyd> Nope. Just use std::vector instead of std::stack.
[22:28:59] <CarloWood> thx
[22:29:52] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:33:22] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:33:38] *** Joins: kapil (~kapil@o-k.website)
[22:37:04] *** Quits: kapil (~kapil@o-k.website) (Remote host closed the connection)
[22:37:46] *** Joins: kapil (~kapil@65.21.110.221)
[22:38:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[22:39:01] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:43:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[22:47:29] *** Joins: Guest3076 (~Guest30@66.115.252.46)
[22:49:12] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[22:50:22] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 268 seconds)
[22:51:28] *** Quits: kapil (~kapil@65.21.110.221) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[22:51:57] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[22:52:15] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[22:52:15] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[22:52:15] *** Joins: blinky42 (~quassel@user/blinky42)
[22:59:31] *** Joins: chozorho (~chozorho@2601:146:300:c30:b4c8:fdea:55ac:cb1a)
[23:12:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[23:16:28] *** Joins: CaCode (~CaCode@user/cacode)
[23:19:05] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[23:19:22] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:20:47] *** Joins: xkuru (~xkuru@user/xkuru)
[23:20:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[23:28:37] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:31:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:76ff:6d0a:27ec:c880)
[23:44:45] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d156:ab7b:6937:119c) (Quit: Konversation terminated!)
[23:45:50] *** Quits: nitrowheels (~nitrowhee@151.49.191.20) (Quit: Leaving)
[23:46:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:46:55] *** Joins: Burgundy (~yomon@79.115.213.171)
[23:51:19] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:3e4a:dab9:fd6f:3883)
[23:51:19] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:3e4a:dab9:fd6f:3883) (Changing host)
[23:51:19] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:55:50] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:57:14] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[23:59:14] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
