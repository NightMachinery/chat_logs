[00:03:05] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.3)
[00:10:33] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 256 seconds)
[00:10:55] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[00:15:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[00:17:00] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[00:18:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:19:47] *** Joins: k0ta (~k0ta@103.108.94.37)
[00:20:52] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:21:57] *** Quits: getynge (~getynge@2601:702:80:2fc0::b76e) (Remote host closed the connection)
[00:22:05] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[00:22:23] *** Joins: marlinc (~marlinc@user/marlinc)
[00:31:12] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:51b7:a4b5:336d:2f64)
[00:34:00] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[00:34:36] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[00:35:56] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:51b7:a4b5:336d:2f64) (Ping timeout: 252 seconds)
[00:36:16] *** Quits: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca) (Remote host closed the connection)
[00:37:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[00:38:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:40:38] *** Joins: mrig (~mrig@user/mrig)
[00:42:06] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:43:23] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Ping timeout: 268 seconds)
[00:45:53] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[00:46:20] *** Joins: converge (~converge@user/converge)
[00:47:02] <converge> Is there some good way to organise the declaration of the mocks? Like this one https://github.com/converge/interface-struct-example/blob/main/internal/service/download_test.go#L8
[00:50:59] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[00:52:46] <bpalmer> I would probably put those up at the top. (There's a whole can of worms in the naming conventions, but I'd also probably call that a fake rather than a mock)
[00:55:35] <converge> I know, Im quite bad with naming. What do you mean by up at the top..?
[00:56:06] *** Joins: rcernin (~rcernin@124.190.136.148)
[00:56:17] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:58:11] <Tv_> i'd rather use https://pkg.go.dev/net/http/httptest#Server than a http.Client mock
[01:01:52] <moldorcoder7> hi what is this syntax doing in go : right = [...]string{"test", "bla","foo"}
[01:01:56] <moldorcoder7> why the ...
[01:03:11] <converge> In this httptest wont fit, Im testing the function itself
[01:03:30] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:04:19] <bpalmer> converge: I mean at the top of the _test.go , I'd have all the fakes and mocks I need (assuming I don't have them in a separate package entirely, like httptest is to http)
[01:04:19] <zsnes> as i recall that makes a fixed size array with the size set to the number of elements you initialized it with.
[01:04:29] <bpalmer> yep, array rather than slice.
[01:04:36] <zsnes> moldorcoder7: whereas []string{...} would be a slice
[01:05:06] <zsnes> moldorcoder7: always helpful to try printing it out and see what go tells us: https://go.dev/play/p/HdyWbo6Lvya
[01:05:29] <converge> bpalmer, tks
[01:05:51] <moldorcoder7> zsnes, thanks
[01:05:53] <ikke> moldorcoder7: "The notation ... specifies an array length equal to the maximum element index plus one. "
[01:05:57] <ikke> https://go.dev/ref/spec#Slice_types
[01:09:39] <converge> Would have a better place to declare this interface that is used for the two services? https://github.com/converge/interface-struct-example/blob/main/internal/service/download.go#L8
[01:14:19] <bpalmer> converge: remember that go interfaces are not declared as something a class implements.
[01:14:50] <bpalmer> converge: so a single Do()  in its method set is not clearly outlining what it's for
[01:15:31] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:15:49] <bpalmer> but sure, having your package provide the interface that it will be accepting is perfectly reasonable.
[01:17:15] <converge> Got it, Im following that principle to keep the interface as small as possible, I only need to use the Do() from http
[01:18:30] <converge> My concern is that when the package grows, and has many services, it will have only one service that declares the interface, but it doesnt sound right to choose one of the many services to declare the interface
[01:20:01] <bpalmer> there's no one "the interface"
[01:20:52] <bpalmer> if you have two different packages foo  and bar , and foo has type FooDoer interface { Do() }  and bar has type BarDoer interface { Do() } , a type that implements the one implements the other.
[01:21:25] *** Joins: jchase (~jchase@2601:18b:8200:1f:ced9:acff:fe1f:9997)
[01:21:58] <bpalmer> I think I'm not seeing your extensibility concerns, but I've got to head out anyway.
[01:23:43] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[01:25:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:28:32] *** Quits: jchase (~jchase@2601:18b:8200:1f:ced9:acff:fe1f:9997) (Quit: Client closed)
[01:29:30] <converge> I see some projects that declares interfaces like these https://github.com/mattermost/mattermost-server/tree/master/einterfaces , is that ok?
[01:34:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:47:14] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[01:48:56] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[01:57:07] *** Quits: converge (~converge@user/converge) (Quit: Leaving)
[01:59:32] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b)
[01:59:37] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[01:59:43] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 252 seconds)
[02:05:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:05:48] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[02:06:17] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:06:50] *** Joins: fikran (~fikran@user/fikran)
[02:11:49] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[02:12:26] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[02:20:15] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[02:20:53] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:29b8:ea54:6815:6f35)
[02:23:15] *** eggsampler is now known as eggsampler_
[02:23:33] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[02:23:44] *** Joins: rcernin_ (~rcernin@124.190.136.148)
[02:25:20] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:26:22] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:29b8:ea54:6815:6f35) (Ping timeout: 268 seconds)
[02:26:46] <Tv_> that is not great code
[02:29:03] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[02:31:27] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:32:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:32:10] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:34:59] *** Joins: henry404080 (~henry4040@112-104-114-241.adsl.dynamic.seed.net.tw)
[02:36:56] *** Quits: henry40408 (~henry4040@112-105-247-102.adsl.dynamic.seed.net.tw) (Ping timeout: 252 seconds)
[02:36:56] *** henry404080 is now known as henry40408
[02:37:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:37:57] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:38:19] *** Quits: lilgopher (~textual@2601:241:8000:38f0:8143:8523:7b45:dec8) (Quit: Textual IRC Client: www.textualapp.com)
[02:41:20] *** Quits: normen (~normen@p200300d71725d60065a9ab6e56e19e7c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:41:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[02:43:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:43:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:48:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:06:03] *** Joins: normen (~normen@p200300d71725d600f42d9ad09eb3af60.dip0.t-ipconnect.de)
[03:08:28] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:10:34] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:12:57] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[03:19:46] *** Quits: KDDLB (kevin@user/kddlb) (Quit: The Lounge - https://thelounge.chat)
[03:20:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:21:36] *** Joins: KDDLB (~Kevin@user/kddlb)
[03:25:09] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[03:34:05] *** Joins: BUSY (~BUSY@user/busy)
[03:36:43] *** Quits: clee_ (~clee@tali.t0k.org) (Ping timeout: 250 seconds)
[03:38:31] <LambdaComplex> i'm afraid to click
[03:38:32] * LambdaComplex clicks
[03:39:38] *** Quits: normen (~normen@p200300d71725d600f42d9ad09eb3af60.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:41:26] <LambdaComplex> wow https://github.com/mattermost/mattermost-server/blob/master/einterfaces/metrics.go
[03:43:29] *** Joins: clee (~clee@tali.t0k.org)
[03:48:32] <bpalmer> (I skimmed mattermost's code a long time ago and, iirc, that's the one that made me decide a models/ directory in go code was an early warning sign. I don't know if it's truly good or bad, but it felt foreign)
[03:48:59] <b0nn> models is right up their with pkg
[03:49:03] <b0nn> there*
[03:53:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:55:13] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:56:48] *** Quits: rlankfo (~bob@bob.4kb.com) (Remote host closed the connection)
[03:59:39] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:1401:22a5:674e:d69b) (Quit: smeeagle)
[04:03:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:05:11] *** Joins: fikran (~fikran@user/fikran)
[04:06:55] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:07:05] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:14:39] *** Quits: adip (~adip@deq245.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[04:24:45] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:24:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:30:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:41:36] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:42:34] *** Joins: koo5_ (~quassel@51.140.155.227)
[04:43:05] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:43:32] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:31] <LambdaComplex> my gut is saying this was "okay, we have a struct, but now we need to mock it, so we're just gonna define an interface that's identical to all of that struct's methods"
[04:47:44] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:01:18] *** Joins: Atque (~Atque@user/atque)
[05:02:14] *** Joins: normen (~normen@p200300d71725d600f42d9ad09eb3af60.dip0.t-ipconnect.de)
[05:12:12] *** Joins: brooks7 (~brooks@23.157.160.131)
[05:15:16] *** Quits: brooks (~brooks@23.157.160.131) (Ping timeout: 260 seconds)
[05:22:20] *** Quits: brooks7 (~brooks@23.157.160.131) (Quit: The Lounge - https://thelounge.chat)
[05:22:29] *** Quits: rcernin_ (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[05:23:21] *** Joins: brooks7 (~brooks@23.157.160.131)
[05:33:18] *** Quits: brooks7 (~brooks@23.157.160.131) (Quit: The Lounge - https://thelounge.chat)
[05:35:08] *** Joins: brooks7 (~brooks@23.157.160.131)
[05:35:21] *** Joins: et_ (~et@user/et)
[05:36:14] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[05:36:14] *** et_ is now known as et
[05:36:18] *** Quits: normen (~normen@p200300d71725d600f42d9ad09eb3af60.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:40:21] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:44:56] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[05:48:53] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[05:51:09] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d03a:d0a9:48b6:27e3)
[05:53:48] *** Joins: neurocyte0132889 (~neurocyte@IP-185189141046.dynamic.medianet-world.de)
[05:53:49] *** Quits: neurocyte0132889 (~neurocyte@IP-185189141046.dynamic.medianet-world.de) (Changing host)
[05:53:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[05:57:27] *** Joins: fef (~thedawn@user/thedawn)
[06:02:04] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[06:03:26] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d03a:d0a9:48b6:27e3) (Ping timeout: 268 seconds)
[06:05:23] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[06:05:34] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[06:12:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:14:32] *** Joins: fikran (~fikran@user/fikran)
[06:14:44] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[06:15:12] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Quit: Gone away)
[06:15:30] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[06:25:03] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:d03a:d0a9:48b6:27e3)
[06:35:07] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:36:31] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[06:37:53] *** Joins: darkapex (~darkapex@user/darkapex)
[06:38:23] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[06:41:38] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[06:41:57] *** Joins: rcernin (~rcernin@124.190.136.148)
[06:43:31] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:d03a:d0a9:48b6:27e3) (Ping timeout: 252 seconds)
[06:44:23] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[06:54:50] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[07:02:01] *** Quits: DM4307842149 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:07:20] *** Joins: aml_ (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[07:07:32] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 240 seconds)
[07:07:38] *** Joins: DM43078421495 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[07:09:11] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[07:10:18] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[07:12:29] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 252 seconds)
[07:16:07] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[07:16:45] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Quit: Leaving)
[07:30:04] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[07:32:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:32:18] *** Joins: mooff (mooff@awful.cooking)
[07:33:01] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[07:39:43] *** Joins: rcernin (~rcernin@124.190.136.148)
[07:41:40] *** Joins: normen (~normen@p54b34baa.dip0.t-ipconnect.de)
[07:48:14] *** Quits: normen (~normen@p54b34baa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:50:07] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 256 seconds)
[07:54:06] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:3d22:9afe:2c7:5576)
[07:58:24] *** Joins: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:4efc:71e9:13d9:b8b5)
[07:59:03] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:3d22:9afe:2c7:5576) (Ping timeout: 252 seconds)
[07:59:26] *** Quits: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:4efc:71e9:13d9:b8b5) (Read error: Connection reset by peer)
[08:06:53] *** Joins: clee (~clee@tali.t0k.org)
[08:16:21] *** Joins: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:4efc:71e9:13d9:b8b5)
[08:17:16] *** Quits: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:4efc:71e9:13d9:b8b5) (Read error: Connection reset by peer)
[08:21:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:23:53] *** Joins: fikran (~fikran@user/fikran)
[08:27:47] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[08:43:46] *** Quits: whaley (~whaley@2603-6080-a301-33d1-456a-1e4c-dd86-8e17.res6.spectrum.com) (Ping timeout: 268 seconds)
[08:45:39] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[08:46:41] *** Joins: kindablue (znc@irc.tpurist.com)
[08:48:30] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[09:03:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:19:01] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[09:32:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:41:15] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:3d22:9afe:2c7:5576)
[09:46:44] *** Joins: normen (~normen@p54b34baa.dip0.t-ipconnect.de)
[09:49:40] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:54:05] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:55:50] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:3d22:9afe:2c7:5576) (Ping timeout: 252 seconds)
[10:07:23] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[10:08:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:13:25] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[10:18:23] *** Quits: normen (~normen@p54b34baa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:29:16] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[10:29:29] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[10:29:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:30:20] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:7078:7a98:2190:2777)
[10:31:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:33:14] *** Joins: fikran (~fikran@user/fikran)
[10:34:20] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:7078:7a98:2190:2777) (Ping timeout: 252 seconds)
[10:34:34] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:7078:7a98:2190:2777) (Client Quit)
[10:38:43] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f)
[10:39:42] *** Joins: whaley (~whaley@2603-6080-a301-33d1-9c26-2f90-dea9-bdff.res6.spectrum.com)
[10:41:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:43:30] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:47:55] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Quit: Leaving)
[11:01:03] *** imm__ is now known as imm_
[11:03:30] *** Joins: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a)
[11:10:47] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[11:19:27] *** Joins: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net)
[11:22:49] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:23:06] *** Joins: rendar (~rendar@user/rendar)
[11:24:52] *** Joins: arinov (~arinov@213.194.126.155)
[11:27:09] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:4d89:6967:a02d:834a)
[11:28:14] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[11:40:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:46:41] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:49:18] *** Joins: adip (~adip@deq245.neoplus.adsl.tpnet.pl)
[11:51:30] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f) (Quit: smeeagle)
[11:59:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:00:42] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[12:02:59] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[12:04:39] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:9d7:d8f:4ee:f163)
[12:07:03] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f)
[12:14:03] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:9d7:d8f:4ee:f163) (Ping timeout: 268 seconds)
[12:15:58] *** Joins: normen (~normen@p200300d71730610094afc6ec0dae93e5.dip0.t-ipconnect.de)
[12:19:31] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f) (Quit: smeeagle)
[12:27:45] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f)
[12:28:38] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f) (Client Quit)
[12:28:39] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:36:26] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[12:39:30] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:40:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:42:35] *** Joins: fikran (~fikran@user/fikran)
[12:48:21] *** Quits: normen (~normen@p200300d71730610094afc6ec0dae93e5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:53:55] *** Joins: mrig (~AdiIRC@user/mrig)
[12:56:41] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:00:50] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:06:20] *** Joins: shtirlic_ (~shtirlic@178.70.141.25)
[13:09:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:10:21] *** Quits: shtirlic (~shtirlic@178.70.141.25) (Ping timeout: 245 seconds)
[13:11:47] *** Joins: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz)
[13:11:51] *** Joins: ekangmonyet (aea9bd113d@2604:bf00:561:2000::1f7)
[13:18:50] *** Parts: ekangmonyet (aea9bd113d@2604:bf00:561:2000::1f7) ()
[13:22:53] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[13:23:06] *** Joins: mrig (~AdiIRC@user/mrig)
[13:23:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:24:00] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[13:26:25] *** Joins: arinov (~arinov@178.240.181.140)
[13:35:15] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[13:39:28] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[13:44:49] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[13:45:41] *** Joins: normen (~normen@p200300d71730610094afc6ec0dae93e5.dip0.t-ipconnect.de)
[13:50:08] *** Quits: normen (~normen@p200300d71730610094afc6ec0dae93e5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:50:13] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:4d89:6967:a02d:834a)
[13:54:34] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:4d89:6967:a02d:834a) (Ping timeout: 268 seconds)
[14:05:02] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[14:07:29] *** Joins: normen (~normen@p200300d71730610094afc6ec0dae93e5.dip0.t-ipconnect.de)
[14:12:24] *** Joins: dalan (~dalan@124.168.196.74)
[14:13:16] <dalan> `for len(x_array) != 1 && len(y_array) != 1 {  }` in the debug console, I can clearly see `len(x_array)` is `3` and yet my for loop is ending. What am I not seeing?
[14:13:57] <dalan> And `len(y_array)` is 1 in this case
[14:14:44] <dalan> Basically, I want to stop looping when both lens are 1
[14:15:26] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Ping timeout: 252 seconds)
[14:17:21] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--219.oracle-ocna.com)
[14:18:36] *** Quits: nj- (nicholas@stop.disconnecting.me) (Ping timeout: 265 seconds)
[14:20:58] <dalan> (Narrator: he needed `||` because that actually makes sense)
[14:23:18] <siXy> dalan: for the record, you're almost certainly using slices, not arrays (or len wouldn't make a whole lot of sense...) - and it's good practice not to call slices arrays, or it'll get confusing.
[14:24:09] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:24:36] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:24:56] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[14:25:30] <bookworm> while O agree the amount of times you see an array outside of packet decoding (network, crypto) approaches 0
[14:25:34] <bookworm> I*
[14:29:02] <dalan> How do I know when I'm using a slice or an array?
[14:29:29] <dalan> []int{1,2,3} is an array?
[14:29:34] <gsora> that's a slice
[14:30:06] <gsora> [3]int{1,2,3} is an array
[14:30:09] <dalan> [3]int{1,2,3}
[14:30:11] <dalan> Ahh okay
[14:30:26] <gsora> arrays have a fixed size, along other things
[14:30:26] <siXy> dalan: And in practice you basically always want a slice.
[14:30:47] <gsora> agreed
[14:30:53] <siXy> It's fine to keep using them as you have been, just suggesting you use the correct term when referring to them.
[14:31:31] <gsora> most obvious limitation of arrays: https://go.dev/play/p/qEcaznTuJBM
[14:35:38] <dalan> Is this the optimal way to convert within a slice of a type to another slice of a type? https://go.dev/play/p/sn23ELU1iZH
[14:36:02] <dalan> Very much missing list comprehensions
[14:37:13] <gsora> you could also do this (minor change, nothing like comprehensions): https://go.dev/play/p/bBqehMdfOk7
[14:37:56] <gsora> this way you're specifying the initial len() and cap() of the slice, letting you still use append() instead of specifying indexes to do assignment
[14:38:50] <dalan> Isn't that equivalent? In that the append is ultimately just filling the first non-zero space?
[14:38:55] <siXy> dalan: You say "optimal", which is a strange thing to use in this context. Do you think that list comprehensions do anything different under the hood? It's more typing, but not any less optimal in memory/compute time/etc.
[14:39:13] <dalan> I said optimal, but meant idiomatic ✨
[14:39:43] <gsora> see it this way: a for{} cycle is usually obvious to the reader, comprehensions not so much :^)
[14:40:34] <siXy> *nod* in which case, then yes, your example is fine from that perspective. If you're doing something more than just int -> string there might be better ways, though.
[14:45:44] <siXy> dalan: For example, if you have a custom type, and you are just converting to strings so that it can be displayed to humans, you can provide a String() string method, and it'll Just Work(tm): https://go.dev/play/p/_OVfcJWyzlV
[14:48:44] <krux02> ™
[14:49:19] <krux02> compose key then T M ... magic of unicode
[14:49:40] <dalan> Is that some sort of interface for Writer?
[14:50:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:50:13] <dalan> https://go.dev/play/p/P4CSlZEtlgU - here is the full example of "What I was really trying to do", just annoying to convert each element of the slice to string, then join the string, then convert to int from binary
[14:51:56] *** Joins: fikran (~fikran@user/fikran)
[14:54:10] <dalan> But I admit, I'm a recovering Pythonista
[14:55:02] <rendar> dalan, recovering? why?
[15:04:43] <krux02> he probably got burned by python :P
[15:12:11] <siXy> dalan: That's... I mean you wouldn't normally DO that. But that's because you don't usually start off with a binary value represented as a slice of individual ints. If your input is that mangled you might have to do it that way, but it's a very clunky solution.
[15:12:11] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--219.oracle-ocna.com) (Read error: Connection reset by peer)
[15:13:25] <siXy> If you're doing some sort of parsing operation and that's why you have a slice of ints that's really a single binary value, maybe fix the parsing code to not do that.
[15:16:19] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:17:40] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[15:18:39] *** Joins: jdcain (~jdcain@2600:8804:1b96:4900:c8b2:559a:9f9b:4120)
[15:22:53] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:23:09] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[15:27:37] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[15:28:46] <fizzie> Pretty sure that's for today's Advent of Code, where you do quite likely end up with a slice of bits due to the nature of the puzzle. But yeah, it's not a very realistic scenario.
[15:29:13] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[15:29:34] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[15:29:49] <fizzie> Honestly at that point it looks _simpler_ just to DIY the conversion from base 2: https://go.dev/play/p/l8YzkVlSq2L
[15:29:56] <deniska> AoC puzzles are well grounded in reality
[15:43:43] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[15:43:51] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Quit: ZNC - https://znc.in)
[15:50:42] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[15:51:54] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100f)
[15:53:37] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100f) (Client Quit)
[15:53:47] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[15:58:42] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[15:58:52] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[15:59:34] *** Joins: vanniuner (~vanniuner@40.83.97.197)
[15:59:41] *** Parts: vanniuner (~vanniuner@40.83.97.197) ()
[16:03:31] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[16:07:27] *** Joins: Giedrius (~giedrius@5.133.65.65)
[16:07:49] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[16:08:06] *** Joins: alzgh (~alzgh@user/alzgh)
[16:10:41] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:26:06] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[16:33:03] *** Joins: pepee (~pepee@user/pepee)
[16:36:41] *** Joins: nj (nicholas@stop.disconnecting.me)
[16:38:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:40:26] *** Quits: popey (~popey@ubuntu/member/popey) (Quit: The Lounge - https://thelounge.chat)
[16:42:17] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[16:59:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:00:53] <adip> I'm trying to create a copy of a []structs but modifying the copy modifies the original.
[17:01:17] *** Joins: fikran (~fikran@user/fikran)
[17:01:32] <adip> I've tried to use basic = and copy() but I'm still encountering this issue. Is there a proper way to deep copy a slice?
[17:01:32] *** Quits: zwr (~zwr@2804:d45:b966:fb00:e8f3:9015:4194:f553) (Ping timeout: 252 seconds)
[17:02:14] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c634:1c10:a560:ee24)
[17:06:41] <fizzie> There's no built-in way to make a really "deep" copy. But `make` + `copy` (or the mostly equivalent `append([]T(nil), src...)`) does make a copy of the data that's in the structs, assuming it's a slice of structs and not pointers.
[17:11:14] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:11:32] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:18:13] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[17:20:06] <adip> thanks, I manged to get append working.
[17:20:28] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[17:22:07] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:23:48] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[17:31:58] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:32:08] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[17:41:07] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:41:08] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[17:45:38] *** Joins: arinov (~arinov@178.240.181.140)
[17:55:19] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 256 seconds)
[18:05:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[18:05:01] *** Joins: TFKyle (~kyle@64.201.205.70)
[18:08:11] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:08:24] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[18:12:07] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f)
[18:14:11] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[18:16:38] *** Joins: mud (~mud@user/kadoban)
[18:19:49] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) ()
[18:20:57] *** Joins: rendar (~rendar@user/rendar)
[18:22:32] *** Joins: arinov (~arinov@212.156.215.30)
[18:23:18] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:25:14] *** Joins: alzgh (~alzgh@user/alzgh)
[18:28:39] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Quit: WeeChat 3.3)
[18:31:03] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[18:32:13] *** Joins: kochchef (~quassel@80.146.255.46)
[18:37:25] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Ping timeout: 252 seconds)
[18:37:38] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[18:39:26] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:41:11] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f) (Quit: smeeagle)
[18:41:23] *** Joins: alzgh (~alzgh@user/alzgh)
[18:44:41] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:b89c:6a13:43:321c)
[18:48:25] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:4d89:6967:a02d:834a) (Ping timeout: 252 seconds)
[18:51:32] *** Joins: huoy99 (~huoy99@gateway/vpn/pia/huoy99)
[18:53:58] *** Joins: cation21 (cation@user/cation)
[18:54:10] <huoy99> i'm having an issue with a query escaped string when i pass it to an html template. it seems to be escaping it twice. for example http%3A%2F%2F127.0.0.1%3A8000 becomes http%253A%252F%252F127.0.0.1%253A8000. does anyone know how i'm supposed to pass this to a template?
[18:54:17] *** Joins: rcernin (~rcernin@124.190.136.148)
[18:54:39] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[18:57:03] *** cation21 is now known as cation
[18:57:17] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (Quit: baakeydow)
[18:59:33] <Cork> huoy99: have you checked the string before you give it to the template? Cause i don't think it should escape it on it's own
[19:00:08] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[19:01:33] <huoy99> here's a playground example showing the issue: https://go.dev/play/p/usubss4llRi
[19:01:37] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[19:01:51] <huoy99> Cork ^
[19:02:22] <fizzie> Don't escape it manually and let the template do it? https://go.dev/play/p/5jxx065phsY
[19:02:40] <Cork> huoy99: you need to escape http:// if it is in the query section in an url
[19:02:44] <Cork> that is correct
[19:03:23] <huoy99> okay that makes sense, thanks fizzie and Cork. i didn't realize that the templates were that smart
[19:03:40] <fizzie> huoy99: Or if you have a raw, already-escaped URL from somewhere (rather than you're calling url.QueryEscape), wrap it in the right kind of type: https://go.dev/play/p/GpfbRfXC8FR
[19:04:06] <huoy99> yeah i was wondering if it was already encoded, but it isn't
[19:04:43] <fizzie> With the caveats at https://pkg.go.dev/html/template#URL -- anything inside the template.URL will be treated as trusted and safe, and included verbatim.
[19:05:45] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:06:39] <siXy> huoy99: https://go.dev/play/p/-DwMZYUteah
[19:07:08] <siXy> if you provide a template.URL it won't escape it.
[19:07:24] <huoy99> actually siXy i'd prefer it escaped but only once. thanks though
[19:07:24] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:08:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:10:38] *** Joins: fikran (~fikran@user/fikran)
[19:15:32] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 250 seconds)
[19:17:45] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[19:20:14] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[19:20:30] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[19:21:47] *** Quits: huoy99 (~huoy99@gateway/vpn/pia/huoy99) (Quit: Client closed)
[19:24:33] *** Joins: snoel (~snoel@ss12.shee-consultants.net)
[19:24:51] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 256 seconds)
[19:26:21] *** Joins: andlabs (~andlabs@2604:ca00:17b:c057:b5b0:e615:8f58:699b)
[19:30:06] *** Quits: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4) (Quit: You have been kicked for being idle)
[19:32:11] *** Joins: arinov (~arinov@178.240.181.140)
[19:34:48] *** Joins: jchase (~jchase@2601:18b:8200:1f:ef6f:65f6:a4fe:91a)
[19:36:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[19:36:44] *** Joins: lilgopher (~textual@2601:241:8000:38f0:cdf7:d65d:b907:6f36)
[19:38:28] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[19:39:20] *** Quits: nabaiste^ (~nabaiste@68.101.58.90) (Remote host closed the connection)
[19:41:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:42:38] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:44:15] *** Quits: snoel (~snoel@ss12.shee-consultants.net) (Quit: Leaving)
[19:44:41] *** Quits: cation (cation@user/cation) (Ping timeout: 256 seconds)
[19:45:57] *** Joins: cation (cation@user/cation)
[19:48:42] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[19:49:36] *** Joins: sonny88 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[19:51:30] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:52:23] *** Joins: alzgh (alzgh@user/alzgh)
[19:53:14] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:808e:8d9b:579e:330f)
[19:53:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:55:31] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[19:57:45] *** Joins: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com)
[19:58:27] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Ping timeout: 252 seconds)
[20:03:15] *** Joins: Techcable (~Techcable@168.235.93.147)
[20:03:16] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:c057:90d9:a52f:979f:2e2d)
[20:03:35] *** Joins: fef (~thedawn@user/thedawn)
[20:06:27] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[20:06:53] *** Quits: andlabs (~andlabs@2604:ca00:17b:c057:b5b0:e615:8f58:699b) (Ping timeout: 252 seconds)
[20:07:04] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:10:05] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[20:12:31] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[20:14:11] *** Joins: darkapex (~darkapex@user/darkapex)
[20:14:32] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[20:14:44] *** Joins: andlabs (~andlabs@2604:ca00:17b:c057:20eb:e840:6e4d:6ae2)
[20:14:50] *** Joins: mickey8 (~user@user/mickey)
[20:14:55] *** Quits: andlabs (~andlabs@2604:ca00:17b:c057:20eb:e840:6e4d:6ae2) (Client Quit)
[20:17:53] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:c057:90d9:a52f:979f:2e2d) (Ping timeout: 252 seconds)
[20:19:33] <xzr> hey, so there's a library that does "mostly" what I want apart from one function, defined as a part of a struct
[20:20:00] <xzr> is there a good method to override that particular function, if you can offer some key words for googling that would be quite helpful
[20:21:56] <xzr> My first instinct was to make my own version of the struct, embed the library provided struct and implement my own version of the function in my struct. But I seem to be running into some kind of a problem that when the library code executes it doesn't see the data in my struct (instantiated through make)
[20:22:48] *** Quits: jdcain (~jdcain@2600:8804:1b96:4900:c8b2:559a:9f9b:4120) (Quit: WeeChat 3.3)
[20:25:57] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:29:01] <zsnes> make? you shouldn't be using make() to create structures
[20:29:44] <zsnes> you should use new() for that
[20:30:15] *** Joins: crudo (~crudo@livredigital.com)
[20:30:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 256 seconds)
[20:31:01] <zsnes> embedding and writing your own method is the way to go for sure, if you need to pass the data to the original method you can do something like: mystruct.EmbeddedTypeName.Method()
[20:31:52] <xzr> https://go.dev/play/p/jWntXky3OZX
[20:32:00] <xzr> I think this might be nearing to the root of my problem
[20:32:33] *** Quits: tesuji (~quassel@2a02:908:180:9500:ed81:4afc:8e41:e7c1) (Ping timeout: 252 seconds)
[20:32:35] <xzr> ahh yeah the make is for a map that is part of the library structure
[20:32:56] <xzr> sorry for that, I'm slightly wet behind the ears with go still
[20:34:14] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:34:24] <xzr> that thing builds if I add the data field to OverrideBuilder but then the data in BaseBuilder that it's functions see isn't initialized
[20:35:59] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[20:38:16] <zsnes> xzr: you have to use the embedded struct to initialize the wrapper struct, ie: &OverrideBuilder{BaseBuilder{data: ....}}
[20:38:42] <zsnes> when using a composite literal like that
[20:39:41] <xzr> ahh alright I'll give it a spin
[20:40:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[20:40:23] <zsnes> you could also assign o := &OverrideBuilder{} then do o.data = make([]byte, 8)
[20:42:23] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:42:34] *** Joins: mickey8 (~user@user/mickey)
[20:47:11] *** Joins: rvalue (~rvalue@user/rvalue)
[20:48:37] <xzr> I tried that second one and tests fail on "assignment to entry in nil map" as before :/
[20:48:44] *** Joins: engest (~engest@50.53.126.29)
[20:50:46] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[20:52:19] <seebs> there's no map in your sample code
[20:52:34] <seebs> if you are writing to a map, you have to create the map, either with make or an explicit initializer
[20:53:03] <seebs> like, there is a line of code in the panic report telling you when you assigned to a map. that map was nil. make it not be nil. :)
[20:53:24] <seebs> > My first instinct was to make my own version of the struct, embed the library provided struct and implement my own version of the function in my struct. But I seem to be running into some kind of a problem that when the library code executes it doesn't see the data in my struct (instantiated through make)
[20:53:29] <seebs> yes this is normal
[20:53:31] <xzr> yeah sorry, it's work code so can't just paste it willy nilly, the example I provided has the make thing which kinda makes it similar :)
[20:53:43] <seebs> you may be thinking that embedding is inheritance-like
[20:53:52] <xzr> it could be yeah
[20:53:57] <seebs> it isn't
[20:54:03] <xzr> (my thinking could be)
[20:54:10] <xzr> :)
[20:54:15] <seebs> so, if you have a struct that has an embedded field, and you call that embedded field's methods, it doesn't get called on your object
[20:54:23] <seebs> it gets called on that one embedded field of your object
[20:54:38] <seebs> the additional data of your object is not visible or accessible
[20:55:03] <seebs> you can sometimes then provide your own method that calls the embedded thing's method, and *your* method will see the stuff, but this only works for some contexts.
[20:55:40] <seebs> in particular, it won't work for anything that's operating on the embedded thing and then calling methods. this isn't an inheritance-like thing where they're getting actually-your-object and treating it temporarily as the embedded thing, but you still have your object's method table.
[20:55:46] <seebs> they're actually getting the embedded object only.
[20:56:30] <seebs> so, in general, you can't really override methods. there's limited cases where you can if what they do is simple and you don't need to deal with other methods working on only the embedded thing, but in general you can't expect it to work.
[20:57:10] <xzr> yeah this case isn't particularly simple
[20:57:17] <xzr> guess I might have to think of some other workaround
[20:58:23] <xzr> the joys of customer having the one obscure use case that none of the available libraries implement without hacking :P
[20:59:24] <xzr> but thanks for the help seebs and zsnes, learned another thing at least
[21:00:14] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 252 seconds)
[21:00:16] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[21:06:24] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:08:27] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[21:09:35] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[21:09:53] <zsnes> xzr: if you give a better example we could probably help suggest something else.
[21:12:22] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:13:09] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:15:05] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Ping timeout: 252 seconds)
[21:18:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:19:13] *** Joins: tesuji (~quassel@2a02:908:180:9500:3852:8ba:a318:ea61)
[21:19:59] *** Joins: fikran (~fikran@user/fikran)
[21:20:05] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[21:30:51] *** Quits: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz) (Quit: Leaving)
[21:31:42] <xzr> zsnes: I think judging by seebs' explanation the kind of overriding I'm looking for in this case it just can't be done
[21:32:02] <xzr> so I've kind of reverted to just reimplementing the set of library functionality I need as a separate thing
[21:32:23] <xzr> not massive amounts of code so it's kinda fine
[21:34:36] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[21:35:00] <xzr> the problem in this case was the access to the embedded struct's fields
[21:47:02] *** Joins: arinov (~arinov@213.194.126.155)
[21:49:15] <zsnes> you can access embedded struct fields
[21:49:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:49:32] <zsnes> https://go.dev/play/p/3dLX1L0CcjA maybe this example will make things more clear
[21:50:39] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[21:51:20] *** Joins: fikran (~fikran@user/fikran)
[21:53:53] *** Parts: sonny88 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) ()
[21:55:29] <bpalmer> zsnes: the situation is type A struct { Name string} ; type B struct { *A; Name string } func (a *A) String() string { return a.Name } func main() { b := B{Name: "B"}; fmt.Println(b.String()); }
[21:55:44] <bpalmer> https://go.dev/play/p/bAw-tx0Irv3
[21:56:22] <bpalmer> where the embedded struct's methods don't access the fields from a struct that it's embedded within
[21:59:30] *** Quits: whaley (~whaley@2603-6080-a301-33d1-9c26-2f90-dea9-bdff.res6.spectrum.com) (Quit: WeeChat 3.3)
[21:59:44] *** Joins: whaley (~whaley@2603-6080-a301-33d1-8cc8-4c61-7111-8e5e.res6.spectrum.com)
[22:00:59] *** launchd is now known as BuddyTheElf
[22:01:25] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:64bd:9e89:ef7:79c5)
[22:12:00] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[22:12:21] *** Joins: mickey8 (~user@user/mickey)
[22:17:40] *** Joins: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de)
[22:21:48] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.3)
[22:25:11] <zsnes> yeah and that makes no sense, so why would yo udo that
[22:25:50] <zsnes> you should initialize the Name field in A not duplicate the field in B
[22:28:08] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:29:15] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[22:33:39] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:38:02] *** Quits: Kaivo (~Kaivo@user/kaivo) (Ping timeout: 240 seconds)
[22:38:08] *** Quits: __alex (~alex@ip1f1267ec.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[22:49:38] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:50:25] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:55:37] *** Joins: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net)
[22:56:28] *** Quits: dntreou (~yakiza@178-147-236-189.haap.dm.cosmote.net) (Client Quit)
[23:02:32] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[23:02:33] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[23:02:33] *** Joins: tane (~tane@user/tane)
[23:11:34] *** Quits: henko (~henko@62-178-187-35.cable.dynamic.surfer.at) (Quit: WeeChat 3.3)
[23:15:58] *** Joins: rvalue (~rvalue@user/rvalue)
[23:19:23] <ldiamond> Learning go, I was expecting this to work: https://go.dev/play/p/nUhxUJL4Muc
[23:20:31] <fizzie> There's no syntactical shortcut to call methods on a pointer to an interface, possibly because pointers to interfaces are very unusual.
[23:21:29] <fizzie> You would have to write `(*t).MyFunc()` to do the call, though more likely than that the function would instead take a `Test` instead of a `*Test`.
[23:23:34] <fizzie> (The type that _implements_ the interface could still be a pointer type, and often is.)
[23:24:03] <ldiamond> Ok I'll give that a try
[23:26:09] <ldiamond> Yea I'm seeing another issue `cannot call pointer method GetAnnotations on "k8s.io/apimachinery/pkg/apis/meta/v1".ObjectMeta` but if I split it in two lines then it works. Not sure what's happening here.
[23:30:57] <rewt> what's the original line, and what did you split it to?
[23:31:15] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[23:34:07] <fizzie> That's probably because the thing you wanted to call it on was a non-pointer value, and unaddressable.
[23:34:43] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.3)
[23:34:46] <b0nn> or his ObjectMeta instance is a value, not a pointer?
[23:35:06] <fizzie> That's what I said?
[23:35:18] <b0nn> Yeah but I used nicer words
[23:35:25] <b0nn> :)
[23:35:38] <fizzie> A call like `x.Method()` is automatically rewritten to `(&x).Method()` but only if it's addressable.
[23:36:07] <b0nn> ldiamond: can you do us all a solid and post come code - showing your actual use
[23:37:07] <fizzie> Which is what I'm guessing as the reason for why splitting it into two lines works; assuming that means `Foo().Bar()` => `foo := Foo(); foo.Bar()`. But perhaps we'll see.
[23:40:34] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[23:41:16] <b0nn> Hmm, when I deploy an app I want to serve a file relative to the binary - because hardcoding is bad - seebs said something a while back about relative something but I cannot find the exact comment
[23:42:01] <b0nn> nevermind https://pkg.go.dev/os#Executable is what I was thinking
[23:43:30] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:43:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:44:22] <seebs> yes. be aware that the exceptions to that working may be rare but they are real and can bite pretty badly.
[23:45:00] *** Joins: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca)
[23:45:42] <b0nn> hmm, nobody loves my code enough to use it let alone raise an issue on github, so "works on my machine" will be enough :)
[23:45:45] *** Joins: jeremychase (~jeremycha@130.115.138.34.bc.googleusercontent.com)
[23:47:26] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 245 seconds)
[23:47:49] *** Quits: jchase (~jchase@2601:18b:8200:1f:ef6f:65f6:a4fe:91a) (Quit: Client closed)
[23:47:56] *** jeremychase is now known as jchase
[23:50:31] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:53:31] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[23:53:46] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[23:58:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
