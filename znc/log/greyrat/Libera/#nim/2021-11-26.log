[00:02:27] <FromDiscord> <IsaacPaul> In reply to @IsaacPaul "Here are my tests": Updated the gist with more examples 😛
[00:05:19] <FromDiscord> <leorize> yea Nim doesn't prevent stack overuse at all
[00:06:22] <FromDiscord> <leorize> errors related to stack overuse (static array too large) is carried over to the backend where they may or may not error
[00:07:54] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3G6X
[00:08:07] <FromDiscord> <IsaacPaul> without casting
[00:08:20] <FromDiscord> <leorize> OOM in Nim is fatal
[00:08:21] <FromDiscord> <leorize> always
[00:08:35] <FromDiscord> <IsaacPaul> not in the above case
[00:08:36] <FromDiscord> <leorize> so you can't have an OOM condition in a Nim program
[00:08:51] <FromDiscord> <leorize> most OS have overcommit
[00:12:17] <FromDiscord> <leorize> also seq in Nim is not a pointer, so you can't cast it anyway \:p
[00:16:15] <FromDiscord> <IsaacPaul> oh yea you're right
[00:16:28] <FromDiscord> <IsaacPaul> I assumed it failed on the top level
[00:20:42] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[00:34:15] *** Joins: lumo_e (~enrico@151.29.48.90)
[00:36:21] <FromDiscord> <QueenFuckingAdrielle> is there a straightforward way to call a c++ function from nim?
[00:42:44] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 260 seconds)
[00:43:44] *** Joins: lumo_e (~enrico@151.29.48.90)
[00:48:06] *** Joins: rockcavera (~rc@192.12.114.192)
[00:48:07] *** Quits: rockcavera (~rc@192.12.114.192) (Changing host)
[00:48:07] *** Joins: rockcavera (~rc@user/rockcavera)
[00:54:57] <FromDiscord> <Sevos> hey @IsaacPaul
[00:55:34] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-importcpp-pragma
[00:55:36] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3G79
[01:12:26] <FromDiscord> <QueenFuckingAdrielle> In reply to @impbox "you need to define": i have a couple other questions for you if you dont mind 😄
[01:13:05] <FromDiscord> <QueenFuckingAdrielle> am i able to call a c external and a c++ external in the same program? would i still have to use the c++ backend for compilation?
[01:13:07] <FromDiscord> <impbox [ftsf]> sure, don't ask to ask, just ask =)
[01:13:31] <FromDiscord> <impbox [ftsf]> if you're calling C++ stuff you'll need to use the C++ backend unless it's extern C
[01:13:40] <FromDiscord> <impbox [ftsf]> you can call C stuff from C++
[01:13:54] <FromDiscord> <impbox [ftsf]> but calling non extern C C++ stuff from C backend I suspect won't work
[01:14:27] <FromDiscord> <QueenFuckingAdrielle> gotcha, I'd have to see if that would effect portability in terms of hardware then
[01:15:00] <FromDiscord> <impbox [ftsf]> it won't affect hardware portability, but it does mean compilers need to agree on name mangling
[01:15:16] <FromDiscord> <QueenFuckingAdrielle> also im wondering how that would interact with memory allocated on the gpu
[01:15:46] <FromDiscord> <impbox [ftsf]> eg if some stuff is compiled with VC++ trying to call stuff compiled with G++ I suspect you'll run into name mangling issues... not sure if that's a a solved problem these days
[01:15:59] <FromDiscord> <impbox [ftsf]> should have nothing to do with anything on the GPU
[01:21:28] <FromDiscord> <QueenFuckingAdrielle> are there any other options to using the c++ backend if you are calling both an extern cpp and an extern c? can you decouple the program and compile separately or something?
[01:22:05] <FromDiscord> <QueenFuckingAdrielle> effectively using nim to glue c and c++ libraries together without trying to get the c library to compile with g++ directly?
[01:28:52] *** Quits: advesperacit (~advespera@185.236.42.13) (Quit: advesperacit)
[01:29:15] <FromDiscord> <impbox [ftsf]> you could write a C wrapper for the C++ library
[01:29:49] <FromDiscord> <impbox [ftsf]> but probably best to just use the C++ backend
[01:32:39] <FromDiscord> <QueenFuckingAdrielle> gotcha, thanks thats what i figured
[02:13:36] <FromDiscord> <pyautogui> Question: might it be useful to have slices like [i..^x] or [i..x] implemented for `ropes`?
[02:14:20] <FromDiscord> <Elegantbeef> Probably not given their purpose
[02:15:48] <FromDiscord> <pyautogui> Got it. Thx.
[02:20:28] <FromDiscord> <evoalg> noob question: Why is `ref object` sometimes used at a type instead of just `object` ?  I know `ref` creates a (safe) pointer, and pointers have a many-to-one thingy going on, but why is it useful to use `ref object` ?
[02:21:03] <FromDiscord> <Elegantbeef> Depends on the use case
[02:21:13] <FromDiscord> <Elegantbeef> Might also just be the programmer's ignorance
[02:22:04] <FromDiscord> <evoalg> I should avoid them?
[02:22:33] <FromDiscord> <Elegantbeef> Unless you need them
[02:22:56] <FromDiscord> <evoalg> what's an example where I might need them?
[02:23:02] <FromDiscord> <Elegantbeef> Some people use `ref` so they dont write `var` in proc calls and stuff
[02:23:24] <FromDiscord> <evoalg> ahhh but that's not good practice I guess
[02:23:31] <FromDiscord> <Elegantbeef> Indeed
[02:24:22] <FromDiscord> <Recruit_main707> if you dont want to carry around heaving objects, you can use `ref object` and that way all your code will be passing around a reference implicitly
[02:24:30] <FromDiscord> <Recruit_main707> heavy
[02:24:37] <FromDiscord> <Elegantbeef> Ehhh that's the case even without ref
[02:24:47] <FromDiscord> <Elegantbeef> If you arent doing `var a = b` and just using proc calls
[02:25:01] <FromDiscord> <Recruit_main707> now that you mention it yeah xP
[02:25:36] <FromDiscord> <Elegantbeef> The reason for ref is that you want the semantics in one way or another, if you need a cyclical data structure, if you want to be able to reference things but store it in a collection....
[02:25:44] <FromDiscord> <Recruit_main707> never really liked that tho, its never mentioned anywhere
[02:26:05] <FromDiscord> <Recruit_main707> inheritance does need refs
[02:26:34] <FromDiscord> <Elegantbeef> I mean it's mentioned and it's a performance optimisation that has 0 effect on your code
[02:27:48] <FromDiscord> <Recruit_main707> it can, it did to me and that why i know it happens, and had to ask here to know about it
[02:28:28] <FromDiscord> <Elegantbeef> It only really matters if you try to take address of the parameters and mutate that
[02:28:53] <FromDiscord> <Elegantbeef> It shouldnt have much of an implication on the program flow or writing
[02:29:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3G7v
[02:30:04] <FromDiscord> <Recruit_main707> no, but i just wish it was to the user to decide with a flag or something (i know {.bycopy.} does this)
[02:32:00] <FromDiscord> <Zoom> If you use geany post anything here to attract attention to the PR\: https://github.com/geany/geany/pull/2988↵(@retkid)
[02:32:06] <FromDiscord> <Elegantbeef> Purposely making your code slower is interesting 😛
[02:34:41] <FromDiscord> <Elegantbeef> Does geany have linting/autocomplete yet?
[02:35:31] <FromDiscord> <Zoom> It autocompletes based on the code at hand, IIRC
[02:35:52] <FromDiscord> <Elegantbeef> it was per file auto complete the last i tried it
[02:39:26] <FromDiscord> <Zoom> I don't get why the project has 9 pages of open pull requests, though.
[02:43:14] <FromDiscord> <Zoom> It's not even code in my case, just a few keywords in the config updated. The same happened a few years ago when I tried to update the config for Rust. PR stalled for some weeks until they merged some newer one (it had more stuff in it, though).
[02:54:56] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:59:10] <NimEventer> New thread by FernandoTorres: Unicode sequences add a space (ASCII 32) character after every unicode letter in Windows, see https://forum.nim-lang.org/t/8654
[02:59:34] <FromDiscord> <tandy> is anyone here a big maths brain?
[02:59:54] <FromDiscord> <tandy> how do i calculate whether there is an integer midpoint between to coordinates?
[03:00:27] <FromDiscord> <tandy> im trying to figure out whether two coordinates are adjacent, or whether they have a gap between them
[03:01:11] <FromDiscord> <tandy> such as (5,0) and (4,1), these two are adjacent, but how can i find this mathematicaly?
[03:01:19] *** Joins: src (~src@user/src)
[03:01:31] *** Quits: src (~src@user/src) (Remote host closed the connection)
[03:02:24] *** Joins: DaiC (~DaiC@pool-108-26-63-45.syrcny.fios.verizon.net)
[03:02:46] <DaiC> Is there a built-in stack type?
[03:03:47] <FromDiscord> <impbox [ftsf]> deque
[03:04:06] <FromDiscord> <Elegantbeef> You can just do `seq.add` and `seq.pop` if you want a FILO stack
[03:04:14] <FromDiscord> <Elegantbeef> if you want a FIFO deque is what you want
[03:04:20] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/deques.html
[03:04:42] <FromDiscord> <impbox [ftsf]> yeah, seq is fine for a simple stack
[03:04:54] <FromDiscord> <DaiChimpo> Oh nice thanks
[03:05:02] <FromDiscord> <Elegantbeef> Well if you want a FILO it's the best you can do 😛
[03:05:09] <FromDiscord> <DaiChimpo> Yeah FILO is exactly what I need
[03:05:10] <FromDiscord> <impbox [ftsf]> I usually end up using deques for "decks of cards"
[03:05:14] <FromDiscord> <Elegantbeef> `O(1)` adds and \`O(1) removes
[03:05:47] <FromDiscord> <Elegantbeef> \well i guess the caveat on the `O(1)` add is that you dont need to grow the seq&
[03:05:58] <FromDiscord> <Elegantbeef> Jeezus i cannot hit the right keys today
[03:06:15] <FromDiscord> <impbox [ftsf]> it's just a bigger 1
[03:06:41] <FromDiscord> <that_dude> In reply to @tandy "such as (5,0) and": Well for checking adjacency, wouldn't something like `if (abs(a.x - b.x) <= 1) and abs(a.y - b.y) <= 1)` work? as for checking the midpoint, you could just check whether `(a.x + b.x)/2` and `(a.y + b.y)/2` are integers
[03:07:10] *** Quits: DaiC (~DaiC@pool-108-26-63-45.syrcny.fios.verizon.net) (Quit: Leaving)
[03:08:54] <FromDiscord> <impbox [ftsf]> In reply to @tandy "such as (5,0) and": they're adjacent diagonally, not orthogonally, good to be specific with adjacency
[03:09:12] <FromDiscord> <impbox [ftsf]> In reply to @that_dude "Well for checking adjacency,": that will also return true if they are the same cell
[03:09:26] <FromDiscord> <that_dude> just throw in another check then ig
[03:10:30] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:12:45] <FromDiscord> <tandy> ahhhhh↵(@that_dude)
[03:12:50] <FromDiscord> <tandy> this worked perfectly
[03:12:50] <FromDiscord> <DaiChimpo> Yeah, if a!=b, and dist(a,b) < 2
[03:13:19] <FromDiscord> <that_dude> :)
[03:14:07] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[04:06:01] *** Joins: qwr (~qwr@182-83-235-80.dyn.estpak.ee)
[04:21:04] <FromDiscord> <QueenFuckingAdrielle> does nim support inline asm on windows?
[04:21:22] <FromDiscord> <QueenFuckingAdrielle> cant get a simple helloworld to run
[04:22:17] <FromDiscord> <Elegantbeef> It should, if you're not using the GNU assembler you need to include `\n` at the end of lines
[04:22:26] <FromDiscord> <Elegantbeef> Dont know if you're referring to https://nim-lang.org/docs/manual.html#statements-and-expressions-assembler-statement
[04:22:44] <FromDiscord> <QueenFuckingAdrielle> yea thats what im referring to
[04:23:29] <FromDiscord> <QueenFuckingAdrielle> as a test i wrote compiled a helloworld.c to hello.s, denoised and added it via the asm keyword
[04:23:51] <FromDiscord> <QueenFuckingAdrielle> ugh im an idiot
[04:24:05] <FromDiscord> <QueenFuckingAdrielle> ive been flipping back and forth between a vm, i forgot
[04:24:09] <FromDiscord> <QueenFuckingAdrielle> still doesnt work though
[04:24:18] <FromDiscord> <QueenFuckingAdrielle> its an ubuntu vm
[04:24:34] <FromDiscord> <QueenFuckingAdrielle> sent a long message, see http://ix.io/3G7U
[04:25:20] <FromDiscord> <Elegantbeef> Yea i dont know anything about asm so i'm no help here
[04:25:27] <FromDiscord> <QueenFuckingAdrielle> lol kk
[04:25:37] <FromDiscord> <QueenFuckingAdrielle> im definitely playing in dangerous waters
[04:26:13] <FromDiscord> <QueenFuckingAdrielle> trying to see if i can do gcc -S something.c g++ -S something.cpp   and inline both aseemblys
[04:26:38] <FromDiscord> <QueenFuckingAdrielle> ies..
[04:26:57] <FromDiscord> <pyautogui> Sounds very interesting to me, as someone with very little experience with asm.
[04:27:36] <FromDiscord> <QueenFuckingAdrielle> the motivation is to see if i can also do it with ptx assembly (cuda assembly) and then just wrap it all with nim
[04:27:50] <FromDiscord> <QueenFuckingAdrielle> thus avoiding the c/c++ interop barriers
[04:28:05] <FromDiscord> <QueenFuckingAdrielle> probably a stupid idea, but here we are
[04:41:03] <FromDiscord> <QueenFuckingAdrielle> ive read different things about using result vs return. do we prefer using the result variable? i cant see a reason not to.
[04:41:17] <FromDiscord> <QueenFuckingAdrielle> sent a long message, see http://ix.io/3G81
[04:42:16] <FromDiscord> <QueenFuckingAdrielle> idk why id allocate an extra variable if result is already declared
[04:42:51] <FromDiscord> <QueenFuckingAdrielle> jesus i need a life
[04:43:48] <FromDiscord> <Elegantbeef> We prefer result
[04:43:51] <FromDiscord> <Elegantbeef> Or implicit result
[04:44:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3G82
[04:44:30] <FromDiscord> <Yardanico> @QueenFuckingAdrielle don't use `cast` like that btw, you can just use a type conversion like T(0)
[04:44:58] <FromDiscord> <Elegantbeef> `cast` is a free type cast which reinterprets bit per bit
[04:45:36] <FromDiscord> <Elegantbeef> `cast[int](321321d) != 321321` `int(321321d) == 321321`
[04:49:51] <FromDiscord> <QueenFuckingAdrielle> gotcha
[04:49:59] <FromDiscord> <QueenFuckingAdrielle> thanks both of you guys
[04:50:01] <FromDiscord> <QueenFuckingAdrielle> 😄
[04:50:45] <FromDiscord> <Yardanico> and yeah, as beef said, `result` is kind of preferred, although it does have some issues (mostly security and bug related), e.g. the fact that it'll be set to the default (zeroed) value of the returning type which might not be desirable
[04:51:13] <FromDiscord> <QueenFuckingAdrielle> ah i see interesting
[04:51:18] <FromDiscord> <Yardanico> and yeah, implicit result is basically - if the value of the last expression in the proc is not used and it has the same type as the proc's return type, use it as the result
[04:51:47] <FromDiscord> <QueenFuckingAdrielle> oh okay, so basically remove "result =" part and itll still pick it up right?
[04:51:58] <FromDiscord> <Yardanico> yes, as long as it's the last expression in the proc
[04:52:04] <FromDiscord> <QueenFuckingAdrielle> kk cool
[04:52:20] <FromDiscord> <Yardanico> you can even mix that with case statements and stuff, as long as they're exhaustive
[04:52:33] <FromDiscord> <QueenFuckingAdrielle> i love it
[04:52:56] <FromDiscord> <QueenFuckingAdrielle> never had any luck with my asm fiddling
[04:53:04] <FromDiscord> <QueenFuckingAdrielle> maybe ill try again later
[04:53:24] <FromDiscord> <QueenFuckingAdrielle> hoping to leverage sve2 and some other stuff that way
[04:53:24] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3G85
[04:54:17] <FromDiscord> <QueenFuckingAdrielle> thats awesome, gotta admit, at first I want to gripe about readability, but idk i think it looks really clean
[04:55:18] <FromDiscord> <QueenFuckingAdrielle> what is yall's opinion on generating gpu kernel assembly and then inlining in nim?
[04:55:22] <FromDiscord> <QueenFuckingAdrielle> is that insane?
[04:56:32] <FromDiscord> <Elegantbeef> Beyond my knowledge
[04:56:35] <FromDiscord> <QueenFuckingAdrielle> i feel like im going to get stuck by lightning for mentioning it
[04:56:42] <FromDiscord> <QueenFuckingAdrielle> (edit) "stuck" => "struck"
[04:57:24] <FromDiscord> <QueenFuckingAdrielle> oddly enough, i want to decouple my code from the change cuda/opencl/sycl/sve/avx landscape
[04:58:14] <FromDiscord> <QueenFuckingAdrielle> so i figure do a setup_my_gpu_crap.sh and compile .c, cu, etc into assembly and inline that
[05:19:34] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[05:20:38] *** Joins: xet7 (~xet7@user/xet7)
[05:43:36] *** Quits: lumo_e (~enrico@151.29.48.90) (Quit: Quit)
[05:58:55] <FromDiscord> <demotomohiro> How about to define a C or C++ function that call your gpu kernel on .cu file and create a library file (.lib, .dll, .so etc) from these cu files and link it to nim code?↵Or export C functions from your nim code, build it as library and link it to your cu file.↵I think that is simpler than inlining gpu kernel assembly in nim.
[06:08:28] <FromDiscord> <demotomohiro> If you know how to use OpenGL's compute shader, you might be able to write a code in Nim and run it on GPU.↵https://github.com/treeform/shady
[06:08:32] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:28:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:04:47] <nrds> <06Prestige99> Anyone know why jester routes use `@` for params instead of `:` ?
[07:05:05] <nrds> <06Prestige99> Looking at "/hello/@name"
[07:05:11] <nrds> <06Prestige99> https://github.com/dom96/jester#routes 
[07:05:44] <FromDiscord> <Rika> Why not? What’s the issue with that
[07:06:12] <nrds> <06Prestige99> just uncommon, everything else I've seen uses `:`
[07:07:41] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[07:09:24] <FromDiscord> <Rika> Probably it was planned to use untyped instead of string so : is a no go there
[07:09:28] <FromDiscord> <Rika> Just a guess though
[07:09:53] *** Joins: pch (~pch@66.49.131.33)
[07:11:26] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3G8C
[07:11:52] <FromDiscord> <Anonymous Poet> i want to get the value/type `byte` in the `when T is Vector` clause
[07:12:06] <FromDiscord> <Rika> Can’t you do T.T?
[07:12:33] <FromDiscord> <Anonymous Poet> 😮
[07:12:42] <FromDiscord> <Anonymous Poet> how/why does that work?
[07:12:49] <FromDiscord> <Anonymous Poet> (confirmed it works btw, thanks!)
[07:12:57] <FromDiscord> <Rika> Because the generic parameter is a “fake field” I guess?
[07:13:10] <FromDiscord> <Anonymous Poet> what do you mean?
[07:13:20] <FromDiscord> <Rika> You can access it like a field but it’s not a field
[07:13:24] <FromDiscord> <Anonymous Poet> OH
[07:13:27] <FromDiscord> <Anonymous Poet> i didnt know that
[07:13:43] <FromDiscord> <Rika> Why? Prolly because it’s convenient
[07:13:58] <FromDiscord> <Anonymous Poet> so if i renamed the generic in the definition of Vector, say to `type Vector[V] = object...`, id access it as `T.V`?
[07:14:02] <FromDiscord> <Rika> Yes
[07:14:10] <FromDiscord> <Anonymous Poet> ❤️ thats awesome, thanks!
[07:14:22] <FromDiscord> <Rika> That’s why I try to not use single letter names for generic parameters
[07:14:37] <FromDiscord> <Rika> Think it’s similar to in C++
[07:15:12] <FromDiscord> <Anonymous Poet> good to know, thanks
[07:15:14] <FromDiscord> <Elegantbeef> Generic types have generic type params which are accessible from the type
[07:15:43] <FromDiscord> <Rika> I guess they ARE field
[07:15:44] <FromDiscord> <Rika> Field s
[07:15:52] <FromDiscord> <Rika> Just fields of the type descriptor
[07:18:16] <FromDiscord> <Anonymous Poet> thats actually a fantastic phrasing, because i was making a dummy object of that type just to keep the type info
[07:18:21] <FromDiscord> <Anonymous Poet> so that simplifies a bit 😄
[07:19:13] <FromDiscord> <Rika> You can use it directly too
[07:19:25] <FromDiscord> <Rika> var x: T.V; …
[07:19:43] <FromDiscord> <Anonymous Poet> 😮 nim gets better and better!
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:06:19] <FromDiscord> <gogolxdong (liuxiaodong)> Is there anyone used nim-web3?
[08:15:44] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:16:44] *** Joins: Doraemon (~NeoCron@p200300c4cf1c0a00df145b32079df496.dip0.t-ipconnect.de)
[10:19:18] *** Quits: NeoCron (~NeoCron@p200300c4cf1ab200146a93e8f94739c9.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:58:53] <FromDiscord> <claude> am i the only one who thought `s[a..b] = []` was the way to do it and didnt know `sequtils.delete` existed? is this bad practice?
[11:00:12] <FromDiscord> <Elegantbeef> Comically i've never done a left hand slice 😀
[11:00:27] <FromDiscord> <Elegantbeef> I guess this would be called a splice
[11:01:11] <FromDiscord> <claude> its been useful a couple of times
[11:02:41] <FromDiscord> <Elegantbeef> Seems like it would be, but yea delete is more clear imo
[11:03:55] <FromDiscord> <claude> it doesnt reallocate if its shrinking apparently
[11:04:06] <FromDiscord> <Elegantbeef> Of course not
[11:04:23] <FromDiscord> <Elegantbeef> Only when you go over capacity would it reallocate
[11:04:49] <FromDiscord> <Rika> Change the capacity with set capacity if you want an explicit reallocation
[11:05:03] <FromDiscord> <Rika> Most of the time people want max speed and not max memory efficiency
[11:05:08] <FromDiscord> <Elegantbeef> There is no set capacity
[11:05:14] <FromDiscord> <Rika> Really? I forget then
[11:05:22] <FromDiscord> <Elegantbeef> there is only `newSeqWithCap` or `ofCap` always forget
[11:05:25] <FromDiscord> <Elegantbeef> you can set len
[11:05:47] <FromDiscord> <Elegantbeef> But for some reason there is 0 ability to fetch the capacity of a sequence
[11:06:25] <FromDiscord> <Rika> Because that’s an implementation detail
[11:12:15] <FromDiscord> <Elegantbeef> You're an implementation detail
[11:12:35] <FromDiscord> <Rika> Ok
[11:47:24] <FromDiscord> <hmmm> rika is core implementation and golden egg mvp :nim1:
[11:49:29] <FromDiscord> <Rika> I wish
[11:52:10] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[12:32:30] *** Joins: advesperacit (~advespera@45.12.220.238)
[13:18:20] <FromDiscord> <konsumlamm> is there a way to specify a local directory as a dependency for a nimble package?
[13:19:14] <FromDiscord> <Rika> Is it a package
[13:19:26] <FromDiscord> <Rika> Or is it just some directory
[13:20:57] <FromDiscord> <Elegantbeef> If it's a nimble package you can do `nimble develop` and it'll symlink it in nimble then you can `requires "packagename"`
[13:23:26] <FromDiscord> <konsumlamm> nice, that seems to work
[13:28:33] <FromDiscord> <konsumlamm> also, i learned that there are no private modules
[13:30:58] <FromDiscord> <tandy> does anyone know how to do sleeps on javascript / emscripten?
[13:39:00] <FromDiscord> <konsumlamm> what is the way to build a nimble library (i.e. check that everything compiles)? `nimble build` doesn't work (it seems to onl be for executables) and `nimble install` just ignores errors for soemreason
[13:41:50] <FromDiscord> <Rika> Test?
[13:42:00] <FromDiscord> <Rika> Check?
[13:43:40] <FromDiscord> <tandy> if you have a nim file where you import al the library modules, just compile that↵(@konsumlamm)
[13:44:04] <FromDiscord> <tandy> but @Rika is right, write some tests, then create a nimble test task
[13:44:29] <FromDiscord> <konsumlamm> `nimble test` also runs the tests, i just want to see if the package compiles
[13:44:39] <FromDiscord> <konsumlamm> and `nimble check` just checks the project structure
[13:44:47] <FromDiscord> <tandy> then this
[13:44:57] <FromDiscord> <konsumlamm> i wanna use nimble tho :/
[13:45:37] <FromDiscord> <Rika> Make a task then
[13:47:05] <FromDiscord> <konsumlamm> so just compiling a library is not a common enough task to have a standard nimble task for it?
[13:48:02] *** Joins: neurocyte0132889 (~neurocyte@92.119.8.11)
[13:48:02] *** Quits: neurocyte0132889 (~neurocyte@92.119.8.11) (Changing host)
[13:48:03] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:48:30] <FromDiscord> <Rika> No
[13:48:36] <FromDiscord> <Rika> Most of the time people make tests
[13:48:52] <FromDiscord> <Rika> Or use Nim and not nimble
[13:48:54] <FromDiscord> <konsumlamm> and most of the time just compiling the lib is way faster than also running the tests
[13:49:02] <FromDiscord> <Rika> I personally never use nimble for anything but package management
[13:49:08] <FromDiscord> <konsumlamm> that's just basic stuff i expect froma  package manager
[13:49:31] <FromDiscord> <Rika> Then maybe it’s issue or PR time
[13:51:44] <FromDiscord> <5271> it's probably a very dumb question ↵but how do i call a function from another file?
[13:55:23] <FromDiscord> <konsumlamm> you import the other file and then call it
[13:56:00] <FromDiscord> <5271> uhm↵how do i call a file?
[13:56:10] <FromDiscord> <5271> should i type in the relative or global path
[13:58:55] <FromDiscord> <konsumlamm> `import <name of file>` if it's in the same directory
[13:59:05] <FromDiscord> <konsumlamm> (without the `.nim` extension)
[14:02:07] <FromDiscord> <5271> import on itself doesn't give any errors↵but i can't call the function↵should i make it public or something?
[14:02:21] <FromDiscord> <konsumlamm> yes
[14:02:38] <FromDiscord> <konsumlamm> you make something public by adding a `` after it
[14:02:44] <FromDiscord> <konsumlamm> it being the name
[14:04:26] <FromDiscord> <5271> oh it works
[14:04:30] <FromDiscord> <5271> thank you :3
[14:04:37] <FromDiscord> <5271> and sorry for such a dumb question o~o
[14:21:49] <FromDiscord> <runner7mi> this is my first time looking at Nim.. why does it remind me of python
[14:22:22] <FromDiscord> <Rika> Because it has the offside rule and uses : as block starter?
[14:25:01] <FromDiscord> <haoyu> does nim's abnormal information reveal some sensitive information?
[14:25:28] <FromDiscord> <haoyu>  https://media.discordapp.net/attachments/371759389889003532/913744760504725514/unknown.png
[14:26:10] <FromDiscord> <haoyu> the whole project path or something
[14:28:06] <FromDiscord> <hotdog> In reply to @haoyu "does nim's abnormal information": Compile with `-d:release` or `--stacktrace:off`
[14:31:14] <FromDiscord> <haoyu> thx bro, perfectly solved this problem
[14:49:43] <FromDiscord> <runner7mi> In reply to @Rika "Because it has the": lack of boiler plate... import modules in the same way.. it's like a wierd wonderful mix of python, javascript and c
[14:51:27] <FromDiscord> <runner7mi> (edit) "wierd" => "weird"
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:18:48] *** Joins: jkl1337 (~jkl@user/jkl)
[15:19:58] *** Joins: fputs3 (~fputs@67.59.83.166)
[15:20:11] <FromDiscord> <dom96> In reply to @nrds "<Prestige> Anyone know why": .
[15:20:35] <FromDiscord> <dom96> Jester uses @ so that access is consistent in the routes. You wouldn't be able to have `var data = :"data"` in Nim
[15:20:54] *** Joins: MightyJoe (~joe@201.150.10.60)
[15:21:08] *** Joins: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[15:22:08] *** Server sets mode: +nt 
[15:22:20] *** Joins: laintree (~lain@172.16.254.xxx)
[15:24:21] *** Joins: madprops_ (hj8oijo@2600:3c01::f03c:91ff:fe02:60d8)
[15:25:59] *** Quits: madprops (~hj8oijo@user/madprops) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: rp1 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: cyraxjoe (~joe@201.159.96.1) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: lain (~lain@172.16.254.xxx) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: jkl (~jkl@user/jkl) (Ping timeout: 260 seconds)
[15:26:01] *** flynn8 is now known as flynn
[15:26:01] *** fputs3 is now known as fputs
[15:26:02] *** dv^_^6 is now known as dv^_^
[15:33:50] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:47] <NimEventer> New thread by Rforcen: Implicit surfaces polygonizer , see https://forum.nim-lang.org/t/8655
[15:53:27] <FromDiscord> <Rika> Ah so I was almost correct haha
[15:58:46] *** Joins: PMunch (~PMunch@user/pmunch)
[16:34:02] *** Joins: src (~src@user/src)
[16:40:55] <NimEventer> New thread by Jocker: Limit number of running threads, see https://forum.nim-lang.org/t/8656
[16:50:48] *** Joins: Guest12 (~Guest12@p200300deb73729004f21035cabc6ceb7.dip0.t-ipconnect.de)
[16:51:20] *** Quits: Guest12 (~Guest12@p200300deb73729004f21035cabc6ceb7.dip0.t-ipconnect.de) (Client Quit)
[17:11:23] *** Joins: rockcavera (~rc@192.12.113.199)
[17:11:23] *** Quits: rockcavera (~rc@192.12.113.199) (Changing host)
[17:11:23] *** Joins: rockcavera (~rc@user/rockcavera)
[17:51:45] <arkanoid> exelotl: shouldn't this list already exist and moderated by official team?
[18:02:35] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[18:02:57] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[18:09:11] <PMunch> What list?
[19:08:19] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[19:08:49] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[19:23:32] *** Joins: arkurious (~arkurious@user/arkurious)
[19:42:09] <FromDiscord> <exelotl> arkanoid: previously there was "fusion" which was a distribution of recommended packages that shipped with Nim. But it didn't really work out, so this list will be their next approach (probably for Nim 2.0 to fill in for some modules being removed from the stdlib)
[19:44:03] <FromDiscord> <exelotl> (I might not be 100% accurate with this so take my words with a grain of salt)
[19:46:11] <FromDiscord> <exelotl> PMunch: arkanoid was asking about the effects on the ecosystem if the stdlib shrinks, so I pointed him to this comment: https://forum.nim-lang.org/t/8642#56223
[19:46:24] <FromDiscord> <konsumlamm> (fusion is just a single package, with multiple modules)
[19:46:45] <FromDiscord> <exelotl> ahh right
[19:47:13] <PMunch> Ah I see
[19:54:57] <FromDiscord> <haxscramper> It didn't distribute "recommended" packages, it distributed quasi-experimental things that could as well be added to stdlib
[20:07:25] *** madprops_ is now known as madprops
[20:07:26] *** Quits: madprops (hj8oijo@2600:3c01::f03c:91ff:fe02:60d8) (Changing host)
[20:07:26] *** Joins: madprops (hj8oijo@user/madprops)
[20:09:32] <FromDiscord> <Hex08> Hello! I'm just getting started with Nim and I was trying to write something like↵`func is_prime(n: Natural): Natural = (2..^n).all_it(n % it != 0)`↵but I can't figure out how to check that a predicate is true for each element of an iterator. I only find functions that work with open_arrays but I think a lazy approach would be a better fit
[20:10:47] <FromDiscord> <Hex08> Basically I'd like to iterate over all possible divisors using `countup` and stop as soon as one element fails the test instead of allocating a big sequence
[20:13:57] <FromDiscord> <Rika> needs 3rd party lib zero functional i think
[20:14:02] <FromDiscord> <Rika> or make your own proc
[20:15:23] <FromDiscord> <Hex08> Looks good, thank you!
[20:31:43] <FromDiscord> <sjfloat (Steve Jones)> Hi, is anyone here using nimscript as provisioned by nix  on MacOS?
[20:32:06] <FromDiscord> <sjfloat (Steve Jones)> `Nim Compiler Version 1.4.8 [MacOSX: amd64]`
[20:32:45] <FromDiscord> <sjfloat (Steve Jones)> I'm trying to use `std/parsopt`, but I'm having trouble.
[20:36:02] <FromDiscord> <sjfloat (Steve Jones)> sent a code paste, see https://play.nim-lang.org/#ix=3GbV
[20:36:37] <FromDiscord> <sjfloat (Steve Jones)> sent a code paste, see https://play.nim-lang.org/#ix=3GbV
[20:37:20] <FromDiscord> <sjfloat (Steve Jones)> sent a code paste, see https://play.nim-lang.org/#ix=3GbW
[20:37:43] <FromDiscord> <sjfloat (Steve Jones)> import std/parseopt↵↵var p = initOptParser("-ab -e\:5 --foo --bar=20 file.txt")↵Gives me `Error: undeclared identifier: 'initOptParser'`
[20:38:26] <FromDiscord> <sjfloat (Steve Jones)> (sorry, I'm perpetually baffled by gitter's editor)
[20:51:12] <FromDiscord> <sjfloat (Steve Jones)> I should add that I'm trying to use that in a nimscript
[20:52:04] <FromDiscord> <sjfloat (Steve Jones)> However, I get the same error compiling.
[21:04:51] <FromDiscord> <QueenFuckingAdrielle> In reply to @demotomohiro "How about to define": I didnt see this yesterday. The whole issue with that is then I'm stuck using only the c++ OR the c backend, am I not? Also opengl is not optimized for that sort of thing, I'd be better off try to write a vulkan shader performance wise. I am mainly interested in using cuda, sve2, and avx.
[21:15:32] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[21:17:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:17:40] *** Joins: Colt (~Colt@user/colt)
[21:26:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:29:31] *** Joins: Colt (~Colt@user/colt)
[21:37:37] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:38:00] *** Joins: Colt (~Colt@user/colt)
[21:48:05] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:49:26] <arkanoid> I'm developing a collection of parsers to decode multiple non-machine-readable native stuff. I'd like to implement it in a plugin fashion, where I can drop a .so/.dll in a plugin folder and nim would use the additional functions there to try parsing the candidate file
[21:49:31] <arkanoid> how would you do this?
[22:05:10] <FromDiscord> <enthus1ast> ah reread you question.
[22:05:42] <FromDiscord> <enthus1ast> I think it depends "what is in charge", so either the loader could search for all the functions and register them,   or the module can do this
[22:06:28] <FromDiscord> <enthus1ast> so eg, it can call a "registerProc" provided my you main module
[22:07:19] <FromDiscord> <enthus1ast> then i think it depends what you wanna do or if the modules have a smilar/same interface
[22:07:35] <arkanoid> ok, but how can I load and enumerate nim function from external lib at runtime?
[22:08:23] <FromDiscord> <enthus1ast> as i said, either the loader from you main app loads each function with symAddr, or the loader loads and calls just one function where you register all your stuff
[22:13:29] <FromDiscord> <enthus1ast> sent a long message, see http://ix.io/3Gcj
[22:13:39] <arkanoid> sorry, be patient, but I'm not following. I mean, I don't get how this would solve the enumeration problem. with "loadLib" I can load the dll, with symAddr I can bind function name. I guess I can't enumerate the functions in the loaded lib and call them all (given the fact that they share same arguments)
[22:14:40] <FromDiscord> <enthus1ast> no you must either know beforehand how the function is called (the exported name), or the module must know this and tell the loader what it should "register"
[22:15:10] <FromDiscord> <enthus1ast> sent a long message, see http://ix.io/3Gck
[22:15:56] <arkanoid> got it, thanks. What if I enumerate the function as pluginFunction1, pluginFuntion2, ... inside each dll and let main loader "try" in order?
[22:16:12] <FromDiscord> <enthus1ast> sure you can do this
[22:16:27] <FromDiscord> <enthus1ast> then you must decide "what is in charge"
[22:16:31] <FromDiscord> <enthus1ast> the module, or the loader
[22:17:07] <FromDiscord> <enthus1ast> eg when the module registers themself, it can get eg the main apps object as an function parameter
[22:17:24] <FromDiscord> <enthus1ast> but then the module can do all sort of crazy stuff to the app state
[22:18:02] <FromDiscord> <enthus1ast> when the main app is "in charge" you could eg just export functions ala\: "checkFile(path\: string)\: someReturn"
[22:18:40] <FromDiscord> <enthus1ast> then the main app calls these at will, withouth the risk of a module interfere with the internals app state
[22:21:13] <arkanoid> surely the second approach
[22:21:20] <arkanoid> well, thanks!
[22:38:01] <FromDiscord> <hmmm> hey bois there is a nifty utility on github that is exactly the thing I need for my stuffs that is either in bash or perl or php format, what are my chances of gobbling one of them in nim without the hassle of translating them
[22:40:48] <FromDiscord> <enthus1ast> call it from the commanline and parse its output
[22:40:54] <FromDiscord> <enthus1ast> commandline
[22:41:12] <FromDiscord> <hmmm> yea this might be a great idea
[22:41:43] <FromDiscord> <hmmm> last time I did something like that I got stuck at the taking back the output
[22:42:13] <FromDiscord> <enthus1ast> some apps are better suited to this than others, sure
[22:42:31] <FromDiscord> <hmmm> no wait it's not a great idea if I need to share the app I can't assume people roll around with php or perl installed
[22:43:32] * qwr i sa bit confused - does hmmm wants to transpile perl/php/bash into nim or what?
[22:44:11] <FromDiscord> <hmmm> hmmm doesn't really know what he wants to do, he is trying to avoid translating by hand perl which he never digested the synthax of
[22:44:53] <FromDiscord> <hmmm> oh the other hand....it's less than 100 lines...
[22:44:59] <FromDiscord> <hmmm> how hard can it be.....
[22:45:02] <FromDiscord> <hmmm> ...
[22:54:10] <qwr> https://github.com/ycbilge/Perl2Python and https://github.com/metacraft-labs/py2nim could do it chained, but i'm somewhat doubtful about the results :)
[22:55:15] <qwr> especially as first seems very incomplete
[22:56:42] <qwr> so you'll probably better off doing it by hand
[23:00:41] *** Joins: terminalpusher (~terminalp@2a01:586:8c54:1:a391:1fef:ae1b:e7f8)
[23:02:47] *** Joins: pch (~pch@66.49.131.33)
[23:04:51] <FromDiscord> <hmmm> haha thanks it seems quite the trip, I'll just take my stab at perl
[23:58:54] <FromDiscord> <evoalg> In reply to @hmmm "haha thanks it seems": What does the Perl script actually do?  Aslo, did you say there's a bash version?
