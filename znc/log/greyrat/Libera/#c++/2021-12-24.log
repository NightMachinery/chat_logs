[00:07:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:09:45] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:10:46] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:17:46] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:19:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:20:01] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[00:20:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[00:24:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:29:17] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 240 seconds)
[00:29:21] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:30:06] *** Joins: vicfred (~vicfred@user/vicfred)
[00:32:36] *** Joins: rgrinberg (~textual@187.223.250.159)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:37:17] *** Quits: irc-open-up (~irc-open-@bounce.nastycode.com) (Ping timeout: 240 seconds)
[00:43:07] *** Joins: NEYi (~NEYi@109.251.216.38)
[00:43:29] *** Quits: kaph_ (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[00:43:45] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[00:44:17] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 252 seconds)
[00:45:33] *** Joins: rgrinberg (~textual@187.223.144.204)
[00:45:33] <CarloWood> If I implement a move constructor, but leave out most class members - then those call members get their normal move constructor called no?
[00:45:40] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:45:54] <CarloWood> { tracked::B b; }
[00:45:55] <geordi> B0* B0~
[00:46:12] <CarloWood> { std::vector<tracked::B> v(3); }
[00:46:12] <geordi> B0* B1* B2* B0~ B1~ B2~
[00:46:41] <kalven> wut?
[00:48:13] <CarloWood> { A a; f(std::move(a)); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.s) { } }; void f(A&& a) { cout << s.m_s; }
[00:48:13] <geordi> error: 'struct A' has no member named 's'
[00:48:23] <CarloWood> { A a; f(std::move(a)); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { } }; void f(A&& a) { cout << s.m_s; }
[00:48:23] <geordi> error: 's' was not declared in this scope
[00:49:03] <CarloWood> { A a; f(std::move(a)); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { } }; void f(A&& a) { cout << a.m_s; }
[00:49:03] <geordi> B0* B1* B2* hello B0~ B1~ B2~
[00:49:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-015.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[00:50:26] <CarloWood> Like in that case. Here 'v' is moved using vector<tracked::B>::vector(vector<tracked::B>&&) right? Even though the move constructor of A doesn't even mention v
[00:50:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[00:50:38] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:52:13] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[00:52:21] <CarloWood> This is weird... if the vector is moved then why is the size still 3 after the move?
[00:52:24] <CarloWood> { A a; f(std::move(a)); std::cout << ' ' << a.v.size(); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { } }; void f(A&& a) { cout << a.v.size(); }
[00:52:24] <geordi> B0* B1* B2* 3 3 B0~ B1~ B2~
[00:52:40] <kalven> it's not moved
[00:52:53] <CarloWood> I moved 'a'
[00:53:08] *** Joins: toastloopex (toastloop@user/toastloop)
[00:53:25] <CarloWood> so... afterwards 'a' should be empty, assuming all it's elements were moved.
[00:53:55] <kalven> I mean. your move constructor is never invoked there
[00:54:42] <CarloWood> Why not? *confused*
[00:54:56] <kalven> because there's never a second 'A' created
[00:54:56] <CarloWood> It is. It prints '3'
[00:55:12] <kalven> { A a; f(std::move(a)); std::cout << ' ' << a.v.size(); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { BARK; } }; void f(A&& a) { cout << a.v.size(); }
[00:55:13] <geordi> Same output.
[00:55:36] <CarloWood> Oh, it wasn't printing anything
[00:55:38] <kalven> the 'f' has a reference to the same 'a' as in main
[00:56:26] *** Quits: toastloop (toastloop@user/toastloop) (Ping timeout: 268 seconds)
[00:57:03] <CarloWood> { A a; f(std::move(a)); std::cout << ' ' << a.v.size(); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { BARK; } }; void f(A&& a) { A a2(std::move(a)); cout << a.v.size(); }
[00:57:04] <geordi> B0* B1* B2* A::A(A&&) 3 3 B0~ B1~ B2~
[00:57:23] <CarloWood> Still confused why it STILL prints 3 after returning from f() here :(
[00:57:43] <kalven> because the vector isnt moved
[00:57:57] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 240 seconds)
[00:58:01] <CarloWood> because... I'm not explicitly moving it? :/
[00:58:01] <kalven> and your 'f' is printing a.v.size, not a2.v.size
[00:58:08] <CarloWood> yeah well
[00:58:12] <CarloWood> { A a; f(std::move(a)); std::cout << ' ' << a.v.size(); } struct A { std::vector<tracked::B> v; std::string m_s; A() : v(3), m_s("hello") { } A(A&& a) : m_s(a.m_s) { BARK; } }; void f(A&& a) { A a2(std::move(a)); cout << a2.v.size(); }
[00:58:13] <geordi> B0* B1* B2* A::A(A&&) 0 3 B0~ B1~ B2~
[00:58:16] <CarloWood> Woah
[00:58:17] <kalven> yes, if you write a move ctor, you have to do everything
[00:58:29] <CarloWood> ok.. that was my question :/.
[00:58:55] <kalven> yeah I answered that 6 minutes ago :D
[00:59:01] <CarloWood> Then what my move constructor doing? It default constructs v?
[00:59:08] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 252 seconds)
[00:59:58] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:01:07] <kalven> yep
[01:03:08] *** Joins: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad)
[01:03:50] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 268 seconds)
[01:04:30] <tesuji> hi, when I have 2 concepts and 2 function overloads for each concept, can I explicitly choose which overload to call, when the argument satisfies both concepts? https://godbolt.org/z/zM79hb48W
[01:05:32] *** Joins: irc-open-up (bounce@bounce.nastycode.com)
[01:06:33] <CarloWood> I think I am missing something...
[01:06:42] <CarloWood> kalven, this works:
[01:06:51] <CarloWood> { map<int, A> m; auto r = m.emplace(42, 0); r.first->second.test(); } struct A { A* me; A(int) : me(this) { } void test() { if (me == this) cout << "OK!"; else cout << "Oops"; } };
[01:06:51] <geordi> OK!
[01:07:28] <CarloWood> But here I gave A's constructor an 'int' as parameter.  What if I want it to have no parameters?
[01:07:47] <CarloWood> { map<int, A> m; auto r = m.emplace(42, A{}); r.first->second.test(); } struct A { A* me; A() : me(this) { } void test() { if (me == this) cout << "OK!"; else cout << "Oops"; } };
[01:07:48] <geordi> Oops
[01:08:21] <CarloWood> I can't do: m.emplace(42).. it refuses that - so how to construct A 'in place' with emplace?
[01:08:58] <kalven> m[42]
[01:09:42] <CarloWood> { map<int, A> m; m[42].test(); } struct A { A* me; A() : me(this) { } void test() { if (me == this) cout << "OK!"; else cout << "Oops"; } };
[01:09:43] <geordi> OK!
[01:09:46] <CarloWood> wow
[01:11:37] <kalven> there's also this baloney:
[01:11:39] <kalven> { map<int, A> m; auto r = m.emplace(piecewise_construct, forward_as_tuple(42), forward_as_tuple()); r.first->second.test(); } struct A { A* me; A() : me(this) { } void test() { if (me == this) cout << "OK!"; else cout << "Oops"; } };
[01:11:40] <geordi> OK!
[01:12:56] <kalven> useful if you need in-place construction with an arbitrary number of parameters
[01:13:00] *** Joins: rgrinberg (~textual@187.223.250.159)
[01:13:50] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:13:56] <CarloWood> tesuji: I looked at it, but I have no idea. Seems not possible?
[01:14:40] <Alipha> i feel like PJBoy is well-versed in concepts and if anyone can answer tesuji's question, he can ;-)
[01:15:10] <tesuji> hmmm. I mean, I need to be able to get a function pointer to each overload. How is that done?
[01:15:11] <Alipha> tesuji: not what you're asking, but would this be a possibility? https://godbolt.org/z/Yqe7Trqr4
[01:15:27] <Alipha> oh
[01:15:42] <tesuji> Alipha: yeah thats quite good actually, but the second part remains
[01:16:38] <Alipha> tesuji: with my code, you then `overload<Foo>` would give you a function pointer to it
[01:16:49] <tesuji> void(*x)() = overload<??>;
[01:17:28] <tesuji> Ah true actually, the type needs to be concrete
[01:17:35] <tesuji> Thanks Alipha, that helped a lot
[01:19:46] <bpalmer>  CarloWood: incidentally, and this is something you may already know, most of the time when you move "from" something, you have no guarantees about the state the source is left in other than it's a "legal object". std::vector happens to guarantee when moved from that the source is empty()
[01:19:57] *** Quits: ckdCreations (~ckdCreati@2607:fb90:835f:f0a3:99ee:fa2e:1a24:a8e) (Ping timeout: 240 seconds)
[01:20:08] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[01:21:44] *** Quits: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:26:29] *** Joins: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net)
[01:27:05] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 250 seconds)
[01:28:07] <CarloWood> bpalmer: without looking at the standard - I think it is good practice to have A a2; { A a1(data); } (construct and destuct a1) behave exactly the same as: A a1(data); { A a2(std::move(a1)); } meaning that a1 now has to be in the same state as the a2 of the first case (or at least, that destructing both has the same side effects).
[01:30:30] *** Joins: rgrinberg (~textual@187.223.250.159)
[01:33:23] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[01:35:36] *** Joins: HvszrStykp (~X@81.171.62.82)
[01:35:59] *** Quits: rgrinberg (~textual@187.223.250.159) (Read error: Connection reset by peer)
[01:36:01] *** Quits: AmR (~AmREiSa@156.199.236.68) (Quit: Konversation terminated!)
[01:37:09] *** Joins: toastlooply (toastloop@user/toastloop)
[01:39:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:05] *** ChanServ sets mode: +v npaperbot
[01:40:23] *** Quits: toastloopex (toastloop@user/toastloop) (Ping timeout: 256 seconds)
[01:41:16] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:43:58] *** Joins: Cyp (~cyp@213.237.85.9)
[01:45:57] *** Joins: rgrinberg (~textual@187.223.144.204)
[01:47:55] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[01:48:09] *** Joins: toastloopex (~toastloop@user/toastloop)
[01:50:12] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:50:57] *** Quits: toastlooply (toastloop@user/toastloop) (Ping timeout: 240 seconds)
[01:53:59] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[01:54:09] *** Joins: stonkey2 (~stonkey@user/stonkey)
[01:54:33] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[01:56:32] *** Joins: rgrinberg (~textual@187.223.248.37)
[01:58:04] *** Joins: LunarJetman (~LunarJetm@user/zogatribe)
[02:01:13] *** Quits: ped[antix] (~pedantix]@2605:6400:30:f8b5:620c:dc25:c624:aafd) (Ping timeout: 256 seconds)
[02:07:10] <PJBoy> tesuji, just to confirm that there's no way to explicitly choose which concept overload to use
[02:07:50] <tesuji> PJBoy: yeah thanks. I realised without a concrete Foo, the template wouldnt be instatiated anyway
[02:07:52] <PJBoy> so what Alipha wrote, or a third template that requires Stringable && Jsonable
[02:08:20] <PJBoy> true
[02:08:23] <tesuji> PJBoy: that was my solution as well. Thanks
[02:09:57] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[02:10:15] *** Quits: toastloopex (~toastloop@user/toastloop) (Remote host closed the connection)
[02:10:25] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:10:36] *** Joins: toastloopex (~toastloop@user/toastloop)
[02:10:43] <LunarJetman> stringable? ew.
[02:10:52] <tesuji> LunarJetman: just an example
[02:10:59] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[02:12:41] * Alipha hangs up stringable xmas lights
[02:13:43] <zz> stringifyable, perhaps?
[02:14:23] <tesuji> then we would need a stringifyable_manager
[02:14:29] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[02:15:28] <Alipha> And a stringifyable_manager_factory
[02:15:33] <zz> and a board of directors and a union rep, and and and. Yes kids, don't overdo OOP.
[02:16:08] <Alipha> Which would inherit from an abstract_stringifyable_manager_factory
[02:16:08] <tesuji> I'm quite happy about the whole concepts thing, I can do some nice ducktyping now
[02:16:34] *** Quits: stonkey2 (~stonkey@user/stonkey) (Quit: Leaving)
[02:16:50] <tesuji> template<typename D> concept = requires (D duck) { duck.quack(); };
[02:16:54] *** Joins: stonkey (~stonkey@user/stonkey)
[02:17:07] <tesuji> +Duck
[02:17:46] <Alipha> My toy concepts project https://github.com/alipha/cpp/tree/master/a_star_search
[02:18:15] <Alipha> Probably impossible to read without documentation
[02:19:00] <tesuji> why x == x? Just to check for the existance of operator==
[02:19:01] <tesuji> ?
[02:19:42] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[02:20:22] *** Joins: netpipe (~netpipe@user/netpipe)
[02:20:37] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[02:20:43] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:21:19] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:22:55] *** Quits: LunarJetman (~LunarJetm@user/zogatribe) (Read error: Connection reset by peer)
[02:25:21] <PJBoy> yeah
[02:26:31] <PJBoy> specifically for const T
[02:26:54] <PJBoy> although that hopefully makes no difference in practice in any context
[02:27:59] *** Quits: kvik_ (~kvik@93-136-231-38.adsl.net.t-com.hr) (Ping timeout: 256 seconds)
[02:28:21] <tesuji> !rq
[02:28:21] <nolyc> tesuji: <LordKalma> maybe you wanted to say "don't mind me in your asshole"
[02:28:41] <tesuji> ew
[02:29:15] *** Joins: kvik (~kvik@93-136-231-38.adsl.net.t-com.hr)
[02:29:30] <PJBoy> bahahaha
[02:30:12] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[02:30:23] *** Joins: rgrinberg (~textual@187.223.250.159)
[02:33:37] *** Quits: pizdets (~pizdets@183.182.114.214) (Ping timeout: 240 seconds)
[02:33:50] *** Joins: pizdets_ (~pizdets@183.182.111.24)
[02:33:52] *** Quits: rgrinberg (~textual@187.223.250.159) (Client Quit)
[02:40:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:40:12] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:42:54] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[02:44:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[02:49:03] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[02:55:09] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[02:55:10] *** Joins: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[02:58:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[03:01:39] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:03:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[03:10:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:15:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:22:23] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[03:24:08] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[03:25:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:26:47] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[03:31:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[03:31:27] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[03:33:36] *** Joins: u0_a391 (~u0_a391@2600:380:8a4f:99a:88d9:890e:e823:9ce5)
[03:35:25] *** Quits: toastloopex (~toastloop@user/toastloop) (Remote host closed the connection)
[03:36:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[03:37:07] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 256 seconds)
[03:41:49] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[03:45:44] *** Joins: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[03:47:33] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[03:47:57] *** Quits: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[03:49:59] *** Quits: Guest64 (~Guest64@46.109.136.184) (Quit: Connection closed)
[03:50:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:52:24] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[03:52:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[03:53:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:53:33] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:55:30] *** Quits: magla (~gelignite@55d4c16b.access.ecotel.net) (Quit: Stay safe!)
[03:57:40] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:57:56] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[03:58:39] *** Quits: kvik (~kvik@93-136-231-38.adsl.net.t-com.hr) (Ping timeout: 256 seconds)
[03:59:57] *** Quits: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net) (Ping timeout: 240 seconds)
[04:00:45] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[04:05:36] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[04:05:52] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[04:08:46] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:52] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:13:17] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[04:14:56] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:18:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[04:18:51] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:21:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[04:26:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[04:29:21] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[04:35:02] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[04:36:22] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[04:36:49] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[04:39:22] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[04:39:42] *** Joins: Karyon (~Karyon@user/karyon)
[04:40:47] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[04:42:57] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 240 seconds)
[04:45:21] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[04:46:06] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 260 seconds)
[04:48:33] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[04:49:27] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Lost terminal)
[04:49:41] *** Joins: seninha (~seninha@user/seninha)
[04:49:46] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:49:59] *** Joins: Karyon (~Karyon@user/karyon)
[04:51:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:53:34] *** Joins: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de)
[04:54:43] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[04:54:59] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[04:56:51] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[04:59:17] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Ping timeout: 240 seconds)
[05:00:02] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:00:09] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:02:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:03:06] *** Joins: Tokamak (~Tokamak@107.116.82.18)
[05:03:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:06:39] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:751a:858f:9fad:5840) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:13:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:16:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[05:17:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[05:18:44] *** Quits: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de) (Remote host closed the connection)
[05:18:52] *** Joins: sonny (~sonny@8.6.144.252)
[05:19:49] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[05:20:16] *** Parts: sonny (~sonny@8.6.144.252) ()
[05:21:14] *** Joins: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de)
[05:25:20] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[05:28:17] *** Joins: vicfred (~vicfred@user/vicfred)
[05:29:34] *** Joins: Karyon (~Karyon@user/karyon)
[05:34:31] *** Joins: Alipha (~AliphaX@user/alipha)
[05:39:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:39:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:05] *** ChanServ sets mode: +v npaperbot
[05:40:49] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:41:12] *** Joins: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com)
[05:41:12] *** Quits: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com) (Changing host)
[05:41:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:53:17] *** Joins: LeeVeen (~LeeVeen@27.115.6.50)
[05:56:32] *** Joins: frost (~frost@user/frost)
[06:01:29] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:04:31] <Gamah> is there a nice way to know the nth index being iterated of a foreach over a vector of arbitrary type?
[06:05:02] <Gamah> for card& c :: deck...
[06:05:23] <kalven> auto index = &c - deck.data();
[06:05:25] <Gamah> card has a face and suit... but what if i want to know if it's card #8 persay
[06:05:40] <Gamah> do that inside the loop?
[06:05:55] <kalven> that's where you have your 'c', right?
[06:06:00] <RandomReader> (typically one would just do a regular for loop instead, with the index)
[06:06:09] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[06:06:10] *** Quits: darkstarx (~darkstard@50.39.115.145) (Quit: Leaving)
[06:06:11] <Gamah> is that any faster or for some reason "better" than just declaring an int outside the loop and doing x++?
[06:06:56] <RandomReader> ...why would you declare it *outside* instead of just doing a regular for loop?
[06:07:08] <RandomReader> is there some other constraint/usage you haven't mentioned?
[06:08:19] <Gamah> the vector is of arbitrary length
[06:08:44] <Gamah> and i guess i just don't like the syntax of x < vector.end() or whatever
[06:11:04] <RandomReader> practically speaking, there isn't likely to be much consequence to any of these options in performance terms
[06:11:25] <Gamah> it'll be happening billions of times
[06:11:40] <RandomReader> but for style, one thing that tends to hold in most programming languages that use scopes is that the scope of any given identifier should be as small as necessary
[06:11:54] <RandomReader> otherwise it becomes an easy way to make trivial mistakes for the programmers
[06:12:01] <Gamah> I guess I could just give the card an index value at creation...
[06:12:18] <Gamah> then just use card.index at the cost of a little more memory
[06:12:29] <RandomReader> if you haven't profiled a real situation, you don't know what it costs, so don't make silly guesses here
[06:12:42] <RandomReader> if it matters, try a couple options and profile (*not* time)
[06:12:49] <Gamah> yeah i've been profiling
[06:13:06] <Gamah> by far, i need to find a better faster? random engine for montecarlo than mt19937
[06:13:35] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:13:40] <Gamah> i'm much more interested in the "preferred" style vs performance, but ask about perf just to make sure i'm not gonna do anything egregious
[06:13:50] <Gamah> if someone wants to look over the code and give me feedback on styling... would appreciate too
[06:14:15] <kalven> I'll give you the same answer as the last 15 times you asked that question.. look into pcg or xoroshiro
[06:14:29] <Alipha> for(auto &[index, c] : enumerate(deck)) // using https://github.com/alipha/cpp/tree/master/enumerate Gamah
[06:14:35] <Gamah> pcg... i need to remmeber that, sorry
[06:14:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:16:27] <RandomReader> hah, neat option Alipha
[06:16:34] <Gamah> kalven: the problem so far with that is i have yet to understand dependencies
[06:16:40] <Gamah> or the "right" way to do that, either lol
[06:17:21] <Alipha> RandomReader: it's commonly asked for, so I made it. Had to battle with structured bindings to get it to behave properly though
[06:17:23] *** Joins: malloy1 (~jimery@116.30.221.255)
[06:17:53] <Gamah> hm.... a bit over my head still... but skimmed over it
[06:18:07] <kalven> it's a couple of headers, you can just drop them into your project
[06:19:26] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[06:20:27] *** Joins: LeeVeen_ (~LeeVeen@27.115.6.50)
[06:20:56] <Gamah> so far include is sill kinda magic to me... all i know is <> means "installed" stuff and "" means local stuff
[06:21:23] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:21:40] <RandomReader> #include is just text copy/paste of the file, the differences you're aware of are about the search paths it uses
[06:22:16] <RandomReader> but that just means you find e.g. a pcg file(s) with compatible licenses, put them next to the rest of your code, and #include the relevant bits the same way you do your own code (so with "")
[06:23:06] <RandomReader> for something relatively small like that, nothing more complicated needed
[06:23:12] *** Joins: Viewday110 (~Viewday@user/viewday)
[06:23:24] <Gamah> but i don't want to ship pcg with my project, do i? or do i...
[06:23:37] *** Quits: LeeVeen (~LeeVeen@27.115.6.50) (Ping timeout: 240 seconds)
[06:23:54] <RandomReader> it requires it, it's stable, so of course you do
[06:24:15] <Gamah> so i clone pcg, then put its entire contents into my repo...
[06:24:19] <Gamah> that just feels... extra
[06:24:28] <RandomReader> wth
[06:24:45] <RandomReader> no, that's not even remotely what we said
[06:24:51] <RandomReader> what environment are you coming from?
[06:24:55] <Gamah> from? lol
[06:25:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[06:25:02] *** Viewday110 is now known as Viewday11
[06:25:04] <Gamah> i wrote like a 100 line python bot once, 5 years ago
[06:25:11] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[06:25:16] <Gamah> i work in SQL all day... there is no concept of libraries
[06:25:33] <RandomReader> what we're talking about also are not libraries, not in any formal package sense
[06:25:49] <RandomReader> look at the instructions for them
[06:26:01] <RandomReader> they basically consist of "here's one file, put it in your project"
[06:26:21] <Gamah> include pcg_random.hpp
[06:26:38] <Gamah> so i have the header but how do i get the code that actually does the work?
[06:26:48] <Gamah> i have to "install" pcg or something?
[06:27:38] <RandomReader> install *what*?
[06:27:42] <RandomReader> it's just like your own source code
[06:27:44] <RandomReader> did you install that?
[06:28:01] <Gamah> oh the whole thing is contained in the header file...
[06:28:18] <Gamah> sorry, so i'm meant to take the header from the cloned repo and just ship it with my code?
[06:28:26] <RandomReader> yes
[06:29:22] <Gamah> this is common? or is pcg just a smaller thing i do this with? i know boost is a thing that i may some day like to use, or gtk...
[06:29:28] <Gamah> surely those aren't just copy/paste header files?
[06:29:43] <RandomReader> it's common for small things, larger things are more complex to deal with
[06:30:03] <RandomReader> and there's no one single way to manage any of this, so you'll deal with it for the particular large thing(s) you want
[06:30:18] <Gamah> forgive my ignorance.... i am surrounded by people who are way smarter than me all the time and i only remember the things that interest me
[06:30:43] <Gamah> i'm still kinda baffled my multithreading attempt went as smoothly as it did, basically first try.... once i realized i had to pass -pthread to g++
[06:31:06] <Gamah> and passining the mutex in by ref instead of declaring it on each thread, heh.
[06:31:14] <RandomReader> no worries
[06:31:28] <RandomReader> the larger things are what you've probably heard people complaining about
[06:31:41] <RandomReader> package managers, build systems, cmake, apt, etc
[06:31:59] <Gamah> i have this irrational principle of wanting to do things "right" even if nobody else will ever see or use them, because i don't wanna create bad habits in case i do try to swap careers from data to dev
[06:32:17] <Gamah> apt/ubuntu i'm pretty familiar with, not for development tho, just programs
[06:32:56] <RandomReader> in that arena there isn't really a "right" for C++, just "common in this area on this platform"
[06:33:17] <RandomReader> since C++ doesn't limit itself to any particular classes of machines, like "desktop and server on 3 OSes" or whatever
[06:33:29] <RandomReader> or kind of software being written
[06:33:45] <RandomReader> so there are tools that go full dynamic and look up every dependency online and retrieve the latest to build with
[06:34:14] <RandomReader> and tools that just remember which order the directories in your project need to be built in
[06:34:54] <RandomReader> for projects that always want the latest, and projects that are stable for years while they target some certified environment, or ship on hardware that won't be updated
[06:35:48] <RandomReader> in this case, the random algorithm isn't likely to change much, and there's only so many interesting things the code can do .. so it's stable, small, and easier to just copy than anything else
[06:36:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[06:36:19] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:36:28] <RandomReader> boost and gtk will have their own requirements to meet
[06:37:46] *** Quits: Pook (~Pook@2001:8a0:f996:1400:4c3c:1df4:18b2:5321) (Quit: Leaving)
[06:38:46] *** Joins: rgrinberg (~textual@2806:101e:1:83af:d58f:1e2d:50a:b565)
[06:40:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[06:46:57] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:47:25] *** Joins: Viewday11 (~Viewday@user/viewday)
[06:47:26] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 260 seconds)
[06:50:49] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[06:54:36] *** Quits: u0_a391 (~u0_a391@2600:380:8a4f:99a:88d9:890e:e823:9ce5) (Ping timeout: 240 seconds)
[06:55:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:58:51] <Gamah> so i should really leave the blackjack simming as it's own library
[06:58:59] <Gamah> then write something that interfaces with it that is multiplatform
[06:59:39] <Gamah> I feel like I'm leaning towards gtk, i don't need anything fancy, and i tried QT once in the past for something very simple and hated it...
[07:00:18] <Gamah> but also i'm thinking my dream may be futile.... eventually if i want to support windows and linux, i'm going to need to do and maintain platform specfic stuff somewhere in the code, right?
[07:00:41] <Gamah> hell, i'm not even sure if my code as it is would build on windows c++.... i've just been using WSL on windows machines lol
[07:00:57] <Stryyker> is it standard C++?
[07:01:02] <Gamah> so far...
[07:01:30] <Stryyker> it should build on Windows fine
[07:01:51] <Gamah> every time i try to set up a compiler i get mad and end up drinking and playing videogames instead (:
[07:03:39] <Stryyker> plenty of windows installers that do the magic for you
[07:03:50] <Gamah> i have yet to try VS again
[07:05:12] <Gamah> i was spoiled when i messed around in unity.... it was basically "don't use these specific features, and you can build to web, xbox, nintndo, linux, windows, etc"
[07:05:32] <Gamah> i wonder if i can RPC c++ form unity... hmm
[07:08:48] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:10:05] *** Quits: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de) (Remote host closed the connection)
[07:10:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:15:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 260 seconds)
[07:18:06] *** Quits: LeeVeen_ (~LeeVeen@27.115.6.50) (Quit: Leaving)
[07:22:00] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:26:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:31:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[07:34:34] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:44:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[07:47:38] *** Joins: vicfred (~vicfred@user/vicfred)
[07:48:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[08:00:22] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:02:15] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[08:02:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:06:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[08:09:35] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[08:10:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:14:47] <Gamah> something something "testing framework" is there a good paradigm for this?
[08:20:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:25:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 260 seconds)
[08:25:46] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:27:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:27:49] *** Viewday112 is now known as Viewday11
[08:29:51] *** Joins: NEYi (~NEYi@109.251.216.38)
[08:31:09] *** Joins: lalitmee (~lalitmee@180.94.32.191)
[08:34:37] *** Quits: rgrinberg (~textual@2806:101e:1:83af:d58f:1e2d:50a:b565) (Ping timeout: 240 seconds)
[08:36:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:38:09] *** Joins: athaarvaaa (~Atharva@2405:201:22:88c5:5463:9681:2a45:2418)
[08:41:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:46:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[08:50:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:50:09] *** Joins: rgrinberg (~textual@200.68.178.24)
[08:53:27] <Gamah> if i sleep() in the main context which spawned threads... the other threads don't sleep. yes?
[08:53:30] <Gamah> that feels right..
[08:54:46] <kalven> right
[08:56:01] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[08:57:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:58:34] *** Quits: rahl (~rahl@102.114.150.201) (Ping timeout: 260 seconds)
[08:58:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:00:28] *** Joins: rahl (~rahl@102.114.232.28)
[09:01:33] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:02:24] <Gamah> cout seems to not like this.... or i'm clearly missing something... ugh i hate learning lol
[09:03:49] <Stryyker> learning is good for the brain
[09:04:31] <Stryyker> if you share the issue with the channel then some may be able to help
[09:09:12] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b143:a91c:fd6c:3a89)
[09:13:41] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b143:a91c:fd6c:3a89) (Ping timeout: 245 seconds)
[09:14:38] *** Joins: Viewday116 (~Viewday@user/viewday)
[09:15:59] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:15:59] *** Viewday116 is now known as Viewday11
[09:20:35] *** Quits: rgrinberg (~textual@200.68.178.24) (Read error: Connection reset by peer)
[09:22:04] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:29:58] *** Joins: Viewday118 (~Viewday@user/viewday)
[09:31:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:31:23] *** Viewday118 is now known as Viewday11
[09:34:10] *** Joins: rajkosto (~rajkosto@93-87-197-242.dynamic.isp.telekom.rs)
[09:34:31] *** Quits: ckdCreations (~ckdCreati@147.55.133.133) (Read error: Connection reset by peer)
[09:34:53] *** Joins: ckdCreations (~ckdCreati@2607:fb90:835a:44d6:f5a4:286e:ece0:4fd0)
[09:36:41] *** Quits: athaarvaaa (~Atharva@2405:201:22:88c5:5463:9681:2a45:2418) (Quit: Leaving)
[09:39:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:05] *** ChanServ sets mode: +v npaperbot
[09:48:55] *** Joins: Viewday119 (~Viewday@user/viewday)
[09:50:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:50:26] *** Viewday119 is now known as Viewday11
[10:02:58] *** Quits: proller (~p@62.76.32.253) (Ping timeout: 260 seconds)
[10:04:24] *** Joins: AmR (~AmREiSa@156.199.236.68)
[10:12:34] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[10:13:11] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:18:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[10:21:43] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[10:22:17] *** Quits: rahl (~rahl@102.114.232.28) (Ping timeout: 256 seconds)
[10:23:57] *** Joins: rahl (~rahl@102.114.132.229)
[10:25:21] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:31:33] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:33:54] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:f42f:2a6e:3c81:2519) (Quit: Textual IRC Client: www.textualapp.com)
[10:41:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:44:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:45:21] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[10:45:24] <very_sneaky> Alipha: you should package those utilities up and distribute them with conan or something ;)
[10:46:00] <very_sneaky> that's a cool little enumerator
[10:46:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::9401) (Quit: WeeChat 3.0)
[10:47:21] *** Joins: lalitmee_ (~lalitmee@180.94.32.197)
[10:47:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[10:49:37] *** Quits: lalitmee (~lalitmee@180.94.32.191) (Ping timeout: 240 seconds)
[10:51:43] *** Joins: nicko (~iClass@222.211.30.55)
[10:54:31] <zz> Alipha: that enumarate class should probably use size_t rater than int, should it not?
[10:59:01] *** Joins: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de)
[11:02:02] *** Quits: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:07:21] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[11:07:52] *** Joins: rendar (~rendar@user/rendar)
[11:08:19] *** Quits: nicko (~iClass@222.211.30.55) (Quit: Konversation terminated!)
[11:08:37] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[11:08:45] *** Quits: Tokamak (~Tokamak@107.116.82.18) (Ping timeout: 256 seconds)
[11:09:57] *** Quits: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de) (Ping timeout: 240 seconds)
[11:10:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-048.client.tudelft.eduvpn.nl)
[11:11:36] *** Joins: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de)
[11:15:06] *** Joins: Tokamak (~Tokamak@172.58.188.51)
[11:18:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[11:20:17] *** Quits: Forsaken87 (~quassel@ip-109-43-114-39.web.vodafone.de) (Ping timeout: 240 seconds)
[11:21:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:22:00] *** Joins: Forsaken87 (~quassel@ip-109-43-115-149.web.vodafone.de)
[11:22:17] *** Joins: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr)
[11:26:16] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:27:36] *** Joins: jkl (~jkl@user/jkl)
[11:30:57] *** Quits: Forsaken87 (~quassel@ip-109-43-115-149.web.vodafone.de) (Ping timeout: 240 seconds)
[11:32:40] *** Joins: Forsaken87 (~quassel@ip-109-43-113-109.web.vodafone.de)
[11:36:13] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:38:01] <very_sneaky> wow. just discovered nodiscard. that's so useful
[11:39:08] *** Joins: rgrinberg (~textual@2806:101e:1:83af:d9bb:a7ba:7414:84f2)
[11:41:08] *** Quits: Forsaken87 (~quassel@ip-109-43-113-109.web.vodafone.de) (Remote host closed the connection)
[11:43:31] *** Joins: daswf852 (~daswf852@user/daswf852)
[11:44:10] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:54:11] *** Joins: toastloop (toastloop@user/toastloop)
[11:55:47] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 256 seconds)
[12:06:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 256 seconds)
[12:08:55] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5327)))
[12:08:56] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:11:32] *** Joins: andreasbuhr (~quassel@p549dbca1.dip0.t-ipconnect.de)
[12:12:55] *** Quits: toastloop (toastloop@user/toastloop) (Ping timeout: 268 seconds)
[12:14:39] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[12:17:55] *** Quits: montpol (montpol@fine.mouses.xyz) (Quit: The Lounge - hosted by mouses.xyz)
[12:18:13] *** Joins: montpol (montpol@fine.mouses.xyz)
[12:18:42] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:18:50] *** Quits: rajkosto (~rajkosto@93-87-197-242.dynamic.isp.telekom.rs) (Quit: Leaving)
[12:19:32] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:22:17] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:24:39] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:28:03] *** Joins: stonkey (~stonkey@user/stonkey)
[12:30:10] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: You have been kicked for being idle)
[12:40:56] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[12:41:09] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[12:41:55] *** Quits: rgrinberg (~textual@2806:101e:1:83af:d9bb:a7ba:7414:84f2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:45:52] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[12:46:10] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[12:46:53] *** zz is now known as anyone
[12:48:11] *** Joins: limubs (~limubs@cgn-89-0-4-18.nc.de)
[12:48:30] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[12:50:03] *** Quits: limubs (~limubs@cgn-89-0-4-18.nc.de) (Client Quit)
[12:51:46] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Ping timeout: 268 seconds)
[12:52:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:54:07] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:54:14] *** Quits: lru (~lru@240.ip-51-79-50.net) (Ping timeout: 268 seconds)
[13:16:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:17:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:33:15] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[13:37:07] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:38:38] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[13:39:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:06] *** ChanServ sets mode: +v npaperbot
[13:43:18] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Read error: Connection reset by peer)
[13:43:57] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[13:47:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:54:54] *** Quits: malloy1 (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[13:56:07] *** Quits: meandrain (~meandrain@2a02:2f0e:f305:2800:2423:21f3:294b:e892) (Ping timeout: 250 seconds)
[13:56:21] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:58:09] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[13:58:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[14:00:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[14:02:06] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[14:05:18] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:07:02] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[14:07:23] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:07:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:07:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:11:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:13:47] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-048.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[14:14:55] *** Joins: ko (~i.am@user/marlboro)
[14:18:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:21:16] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9d07:c192:fe0:ec1f)
[14:31:29] *** Quits: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr) (Remote host closed the connection)
[14:31:47] *** Joins: kvik (~kvik@93-142-246-187.adsl.net.t-com.hr)
[14:35:11] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[14:35:27] *** Joins: flynn (~mcbloch@user/flynn)
[14:38:28] *** Joins: KoVadim (~Vadim@130-0-36-158.broadband.tenet.odessa.ua)
[14:39:17] *** Joins: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs)
[14:39:22] *** Joins: xkuru (~xkuru@user/xkuru)
[14:43:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:44:05] *** Joins: flynn (~mcbloch@user/flynn)
[14:45:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:47:22] *** Joins: evangeline (~Eleanor@178.79.105.181)
[14:48:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.230)
[14:48:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:49:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:49:40] *** Joins: flynn (~mcbloch@user/flynn)
[14:51:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.230) (Max SendQ exceeded)
[14:52:17] *** Joins: pulse (~pulse@user/pulse)
[14:53:16] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[14:54:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:01:29] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[15:04:34] *** Quits: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[15:11:51] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (Ping timeout: 256 seconds)
[15:14:28] *** Joins: seninha (~seninha@user/seninha)
[15:20:29] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[15:20:48] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:23:49] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Client Quit)
[15:24:14] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:24:16] *** Joins: Burgundy (~yomon@79.115.213.171)
[15:26:10] *** Joins: foul_owl (~kerry@94.140.8.107)
[15:26:29] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:26:48] *** Joins: bauripalash (~bauripala@2401:4900:3820:b866:1:1:ee7e:1aa4)
[15:28:32] *** Quits: bauripalash (~bauripala@2401:4900:3820:b866:1:1:ee7e:1aa4) (Client Quit)
[15:30:57] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[15:31:14] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:31:36] *** Joins: lunix00 (~lunix00@2804:2a4c:108e:168f:2182:4653:14da:11c7)
[15:33:04] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e182:9e47:91db:c531)
[15:34:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:36:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:36:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:38:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:38:41] *** Joins: HvszrStykp (~X@81.171.62.82)
[15:43:58] *** Joins: undephin3d (~undephin3@158.181.81.227)
[15:52:52] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d)
[15:54:45] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[15:55:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e182:9e47:91db:c531) (Ping timeout: 240 seconds)
[16:03:44] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:03:48] *** Quits: ko (~i.am@user/marlboro) (Quit: the Holy Ghost shall come upon thee, and the power of the Highest shall overshadow thee)
[16:07:28] *** Joins: ko (~i.am@189.26.172.220.dynamic.adsl.gvt.net.br)
[16:07:28] *** Quits: ko (~i.am@189.26.172.220.dynamic.adsl.gvt.net.br) (Changing host)
[16:07:28] *** Joins: ko (~i.am@user/marlboro)
[16:10:48] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Read error: Connection reset by peer)
[16:11:09] *** Joins: lru (~lru@240.ip-51-79-50.net)
[16:13:02] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Lost terminal)
[16:23:07] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[16:25:42] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:34:57] *** Inline__ is now known as Inline
[16:36:35] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8c5c:6bb8:5078:50f6)
[16:36:35] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8c5c:6bb8:5078:50f6) (Changing host)
[16:36:35] *** Joins: skapata (~Skapata@user/skapata)
[16:41:19] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[16:42:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:43:39] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[16:45:30] *** Joins: jadew (~rcc@2a02:2f0a:b111:b100:ca2a:14ff:fe58:c8c0)
[16:46:11] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d) (Ping timeout: 245 seconds)
[16:46:32] *** Joins: stonkey (~stonkey@user/stonkey)
[16:46:32] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:47:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[16:48:11] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d)
[16:50:38] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[16:54:23] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:56:36] *** Joins: tesuji_ (~quassel@138.199.2.51)
[16:56:37] *** Quits: lunix00 (~lunix00@2804:2a4c:108e:168f:2182:4653:14da:11c7) (Ping timeout: 240 seconds)
[16:56:42] *** Quits: tesuji_ (~quassel@138.199.2.51) (Client Quit)
[16:56:49] *** Joins: leib (~leib@2405:201:900a:f00e:b41d:139d:a8ce:1bb6)
[16:57:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[16:58:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[16:59:37] *** Quits: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad) (Ping timeout: 240 seconds)
[17:06:26] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[17:06:43] *** Joins: flynn (~mcbloch@user/flynn)
[17:09:08] <jadew> any ideas on how to make this code work under MSVC (C++20)? https://pastebin.com/xEcm2HkA
[17:09:28] <jadew> it complains that Foo is an undefined type (when used in the concept
[17:09:30] <jadew> )
[17:10:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[17:10:48] <jadew> hmm, it looks like in that piece of code I can just move the concept under the class and that works, but it didn't in my actual code (porting something)
[17:10:56] <jadew> I'll be back with an updated broken version
[17:15:16] <PJBoy> pls fewer blank lines
[17:16:51] <PJBoy> I think what you really want there is `template <class T> concept has_bar = requires(T & t, Foo& f) { t.bar(f); };`
[17:17:05] <jadew> PJBoy, yeah, I noticed that after I posted it
[17:17:06] <PJBoy> asking for a `Foo()` requires the full definition of the class
[17:17:39] <jadew> PJBoy, yeah, moving the concept below the class works, so I don't think the concept was my original issue
[17:18:03] <PJBoy> I'm uneasy about that
[17:18:24] <PJBoy> it seems to me that has_bar should be declared before Foo::foo
[17:18:24] <jadew> it cannot be done any other way, because you cannot forward declare the concept
[17:18:38] <PJBoy> well I think my change to the concept would work
[17:18:48] <PJBoy> but not 100% sure
[17:19:13] <jadew> I'll give it a try
[17:19:44] <jadew> you're right, that worked
[17:19:58] <PJBoy> nice
[17:20:01] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[17:20:23] <PJBoy> I imagine std::declval would have worked too?
[17:20:30] <PJBoy> maybe even declaring f as a non reference parameter there
[17:20:37] <PJBoy> idk, I'm hazy on these details
[17:20:55] <PJBoy> but I know that making a Foo temporary like that requires the Foo definition
[17:21:34] <jadew> makes sense, I didn't realize that having it in the require() part would wave that constraint
[17:21:43] <jadew> waive
[17:25:26] *** Joins: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs)
[17:30:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:36:30] <jadew> PJBoy, looks like your tip + forward declaring some of the templates got my code to compile
[17:36:32] <jadew> thanks
[17:36:41] <PJBoy> excellent
[17:36:48] <PJBoy> :)
[17:39:22] *** Quits: leib (~leib@2405:201:900a:f00e:b41d:139d:a8ce:1bb6) (Quit: Leaving)
[17:39:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:07] *** ChanServ sets mode: +v npaperbot
[17:40:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:41:21] *** Joins: seninha (~seninha@user/seninha)
[17:41:35] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:42:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 240 seconds)
[17:48:49] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 256 seconds)
[17:49:50] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[17:49:50] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:52:10] *** Quits: tmm88 (~tmm88@user/tmm88) (Client Quit)
[17:53:20] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:54:02] *** Joins: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[17:54:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:01:34] *** Joins: pulse (~pulse@user/pulse)
[18:03:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[18:05:57] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[18:05:57] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:07:54] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Client Quit)
[18:08:09] *** Quits: undephin3d (~undephin3@158.181.81.227) (Quit: leaving)
[18:08:37] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:09:42] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 260 seconds)
[18:10:08] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[18:11:30] *** Joins: HvszrStykp (~X@81.171.62.82)
[18:12:02] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 260 seconds)
[18:16:20] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:19:01] *** Quits: andreasbuhr (~quassel@p549dbca1.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:21:32] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[18:21:32] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[18:22:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 268 seconds)
[18:26:50] *** Parts: CyKid128[m] (~alanjian8@2001:470:69fc:105::1:523f) ()
[18:27:17] <jadew> hmm, I seem to have a piece of code that no longer works: if constexpr (has_whatever<Foo>) f.whatever++;
[18:27:45] <jadew> in the past has_whatever was a SFINAE check
[18:28:14] <jadew> it doesn't compile with c++20 because f.whatever is not present
[18:28:48] <jadew> is there a solution for this?
[18:29:54] <ville> !give jadew testcase
[18:29:55] <nolyc> jadew: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[18:30:38] <jadew> ville, that's the test case man... replace the has_whatever<> with false
[18:31:42] <jadew> point being that even if the condition is not met, the compiler still checks for the validity of what's inside
[18:33:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[18:35:40] <jadew> somehow this worked in the past, so the question is how do I achieve that now? can I arbitrarily disable statements based on the result of a concept check?
[18:38:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[18:40:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[18:40:44] <ville> jadew: it's not a testase if you don't give me a link to wandbox and the error isn't what exactly what you want an answer for
[18:41:02] <ville> well not to me specifically
[18:41:40] <lh_mouse> geeknix, -c { string f;  if constexpr(false) increment_whatever(f);  }  template<typename T> void increment_whatever(T& t) { t.whatever ++;  }
[18:41:50] <lh_mouse> sorry wrong person.
[18:41:55] <lh_mouse> geordi, -c { string f;  if constexpr(false) increment_whatever(f);  }  template<typename T> void increment_whatever(T& t) { t.whatever ++;  }
[18:41:56] <geordi> Success
[18:42:05] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:42:53] <lh_mouse> jadew, the constexpr false branch is checked against syntactical rules; the falseness only prevents templates from instantiation.
[18:43:34] <jadew> lh_mouse, was afraid of that, so I'll need to move that to a function :/
[18:44:21] <jadew> this definitely worked in the past (although, I don't remember the particulars - which C++ version and implementation)
[18:44:57] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 240 seconds)
[18:45:09] *** Quits: rajkosto (~rajkosto@178-222-121-66.dynamic.isp.telekom.rs) (Quit: Leaving)
[18:45:43] <PJBoy> geordi, -c { string f;  increment_whatever(f);  }  template<typename T> void increment_whatever(T f) { if constexpr(false) f.whatever ++;  }
[18:45:44] <geordi> Success
[18:46:29] *** Joins: BradArmstrong (~BradArmst@97.179.189.89.sta.211.ru)
[18:47:17] *** Quits: rahl (~rahl@102.114.132.229) (Ping timeout: 240 seconds)
[18:47:24] <jadew> geordi, -c { if constexpr (false) f.whatever++; }
[18:47:24] <geordi> error: 'f' was not declared in this scope
[18:48:03] <jadew> I guess it only works in the context of a template
[18:48:06] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:48:33] <BradArmstrong> Hi to all. How I can extract keyboad scan-code from WM_KEYUP or WM_KEYDOWN message?
[18:48:49] <PJBoy> geordi, -c { string f;  increment_whatever<string>(f);  }  template<typename T> void increment_whatever(string f) { if constexpr(false) f.whatever ++;  }
[18:48:49] <geordi> error: 'string' {aka 'class string'} has no member named 'whatever'
[18:48:53] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[18:49:19] *** Joins: rahl (~rahl@102.114.140.185)
[18:49:24] <PJBoy> to be totally honest I have no idea what the rule is
[18:49:38] <PJBoy> but the expression has to be vaguely dependent on a template parameter
[18:49:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[18:50:10] <jadew> yeah, in my original code this is happening inside of a method and the class takes a template parameter
[18:50:30] <jadew> I wonder what will happen if it would work with a template method
[18:50:33] <PJBoy> geordi, -c { string f;  S<string>().increment_whatever(f);  }  template<typename T> struct S { void increment_whatever(T f) { if constexpr(false) f.whatever ++;  } };
[18:50:34] <geordi> Success
[18:50:42] <PJBoy> seems to work in that context too
[18:51:41] <jadew> let me try that on my compiler
[18:52:26] <jadew> it worked lol
[18:52:29] <PJBoy> !give BradArmstrong windows
[18:52:30] <nolyc> BradArmstrong: You should ask your Windows programming questions in #C++-general, #winapi, #windows-coding or irc://irc.efnet.org/winprog
[18:53:11] <jadew> ah ha!
[18:53:56] <jadew> geordi, -c { S<string>().increment_whatever();  }  template<typename T> struct S { void increment_whatever() { if constexpr(false) whatever ++;  } };
[18:53:56] <geordi> error: 'whatever' was not declared in this scope
[18:54:08] <jadew> yep, needs to depend on a template parameter
[18:54:17] <jadew> so that's what changed
[18:54:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 252 seconds)
[18:54:29] <jadew> I would say this is an error
[18:54:43] <jadew> because "this" depends on the template parameter
[18:55:03] <PJBoy> explicit this does
[18:55:08] <PJBoy> implicit this doesn't
[18:55:34] <PJBoy> geordi, -c { S<string>().increment_whatever();  }  template<typename T> struct S { void increment_whatever() { if constexpr(false) this->whatever ++;  } };
[18:55:35] <geordi> Success
[18:55:38] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:55:55] *** Joins: flynn (~mcbloch@user/flynn)
[18:56:09] <jadew> hmm, you'll have to explain that to me
[18:56:15] <jadew> why are they different?
[18:56:19] <PJBoy> `this->` is considered a way to opt-in to delayed evaluation
[18:56:27] <jadew> got it
[18:56:28] <jadew> thanks
[18:56:49] <jadew> so that's the solution to my troubles
[18:56:52] <jadew> thanks again!
[18:58:32] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[18:58:51] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[18:58:52] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Read error: Connection reset by peer)
[18:59:11] *** Joins: Rayke (rayke@user/rayke)
[18:59:27] <PJBoy> (supported documentation is https://en.cppreference.com/w/cpp/language/this )
[18:59:34] <PJBoy> *supporting
[19:03:58] *** Joins: u0_a3912 (~u0_a391@2600:380:8a6d:c2f7:d347:ee94:df2b:a9bc)
[19:06:05] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:07:17] *** Quits: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:10:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 245 seconds)
[19:12:41] *** Quits: lalitmee_ (~lalitmee@180.94.32.197) (Ping timeout: 256 seconds)
[19:14:46] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[19:14:52] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:15:18] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[19:15:22] <john99> Hi, how i can set free as unique_ptr deleter?https://godbolt.org/z/cKsncz3va
[19:15:35] *** Joins: flynn (~mcbloch@user/flynn)
[19:20:01] <PJBoy> like so https://godbolt.org/z/zsnb9erjd
[19:20:23] <PJBoy> notably though, you can't have a unique_ptr to const
[19:20:39] <PJBoy> because std::free doesn't take a pointer to const parameter
[19:20:44] <ville> john99: don't need lambda there
[19:20:46] <ville> err PJBoy
[19:20:54] <PJBoy> well you can't take std::free's address
[19:21:05] <PJBoy> and making a static member function seems over the top
[19:21:32] <ville> yes you can. just ignore the lunatics at the committee
[19:21:39] <PJBoy> but this is #c++
[19:21:55] <john99> ok, one second
[19:22:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:23:01] <ville> john99: anyway the problem for you was "unsigned char const" vs "unsigned char" line 7
[19:23:51] <john99> https://godbolt.org/z/zMd83o7b8
[19:23:54] <john99> like this?
[19:24:16] <john99> i want get the memory adress from a C api and mark the memory as const
[19:25:51] <PJBoy> that works
[19:25:53] <ville> john99: well if you're not going to ignore the committee lunatics then i'd use lambda like PJBoy did
[19:26:04] <PJBoy> don't think there's much you can do about the constness
[19:26:22] <john99> okay about const, i dont understand the commitee reference
[19:26:46] <PJBoy> there committee decided in C++20 that we should not be taking the address of stdlib functions
[19:26:51] <PJBoy> except for where explicitly permitted
[19:26:54] <ville> john99: in their infinite wisdom the committee has set up some funny rules regarding things in the std namespace
[19:27:18] <PJBoy> and using std::free as the deleter directly would requiring taking std::free
[19:27:21] <PJBoy> 's address
[19:27:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 250 seconds)
[19:27:38] <ville> john99: one of them is that you can't take the address of those functions. which is just ludicrous
[19:27:58] <PJBoy> at the same time not requiring a warning or error to be issued if you do take an stdlib function address >_>
[19:28:23] <PJBoy> it makes sense for some functions, but yeah
[19:28:27] <PJBoy> not so much for std::free
[19:28:31] <ville> like i said it's time to start ignoring anything these dickheads produce
[19:29:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:29:47] <PJBoy> the decision allows for things like implementing stdlib functions as callable objects, and to add additional overloads down the line
[19:29:57] *** Joins: flynn (~mcbloch@user/flynn)
[19:30:31] <PJBoy> std::free for example could get a `void free(const void*)` overload
[19:30:31] <john99> that its completly outside my level XD
[19:30:32] <john99> but i didnt saw take the address of free in the lambda example
[19:30:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b)
[19:30:56] <ville> john99: with the lambda you're not taking the address
[19:31:34] <PJBoy> yeah you're allowed to call the function, and that's about it
[19:32:03] <PJBoy> unless you don't care about this new rule
[19:32:21] <PJBoy> or unless you're willing to use the global scope `free`
[19:32:46] <anyone> << &std::free
[19:32:46] <geordi> 0x47a270
[19:32:57] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:33:09] <PJBoy> UB >_>
[19:33:10] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[19:33:14] *** Quits: baltazar (~baltazar@178-164-190-44.pool.digikabel.hu) (Ping timeout: 260 seconds)
[19:33:23] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[19:33:37] *** Quits: mitch0 (~mitch@178-164-190-44.pool.digikabel.hu) (Ping timeout: 240 seconds)
[19:33:44] <john99> i tryed get the adress but fail miserably https://godbolt.org/z/zvcsac89d
[19:34:00] <anyone> PJBoy: because of overloads? or something else?
[19:34:21] <PJBoy> the aforementioned rule about not being allowed to take the address of an stdlib function
[19:34:46] <ville> decltype(&std::free)
[19:35:03] *** Joins: baltazar (~baltazar@85-238-65-123.pool.digikabel.hu)
[19:35:15] <anyone> right, and object can go out of scope..
[19:35:27] <john99> ammmm
[19:35:37] *** Joins: mitch0 (~mitch@85-238-65-123.pool.digikabel.hu)
[19:35:39] <john99> in C++ for take the adress of a function & is mandatory?
[19:35:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[19:35:55] <ville> john99: in most context a function identifier will decay to a pointer-to-function, in the context of decltype() a function will not decay into a pointer-to-function
[19:35:58] <anyone> { auto f = ::free; } // no
[19:35:58] <geordi>  
[19:36:29] <anyone> PJBoy: but if std::free were an object, it kinda has to be live
[19:36:37] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:1841:9986:6b2b:10e6)
[19:36:47] <john99> ville, ty
[19:36:53] <PJBoy> anyone, it would need to be alive yeah
[19:37:05] <PJBoy> very alive
[19:37:14] <anyone> and even though & won't get you a function pointer but an object pointer than, you could still * and () it
[19:37:20] <anyone> (*(&(std::free)))(someptr);
[19:37:30] <PJBoy> yeah
[19:37:32] <Alipha> Unless & was overloaded
[19:37:41] <PJBoy> you just wouldn't be able to assign the result to a function pointer variable
[19:37:46] <ville> address_of
[19:37:50] <PJBoy> or cast to a function pointer type
[19:38:02] <PJBoy> and for that reason, it's not allowed at all
[19:38:15] <PJBoy> well that's one of the reasons anyway
[19:38:18] <PJBoy> the other reason was overloading
[19:39:06] *** Quits: BradArmstrong (~BradArmst@97.179.189.89.sta.211.ru) (Quit: Client closed)
[19:39:22] <PJBoy> { auto f = std_f; } void std_f(void*) {} // so far so good
[19:39:23] <geordi>  
[19:39:27] <PJBoy> { auto f = std_f; } void std_f(void*) {} void std_f(const void*) {} // oh nooooo
[19:39:27] <geordi> error: unable to deduce 'auto' from 'std_f'
[19:40:13] *** Joins: pulse (~pulse@user/pulse)
[19:41:20] <PJBoy> the paper that introduced this rule spoke about how much it sucks that we can't add overloads because it would break code like the above
[19:41:45] <PJBoy> and how much it sucks that we can't use function objects instead of functions if we wanted to
[19:42:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[19:45:06] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[19:45:49] <Alipha> Hm. What if you had the concept of a "preferred overload"?
[19:46:43] <PJBoy> would probably break code that relies on there being an error choosing amongst overloads
[19:46:57] <InPhase> Alipha: Sounds like a job for "explicit"
[19:47:23] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[19:47:54] <ville> no you want the concept of first class functions and overload sets being a real thing
[19:51:02] <anyone> { void (*p)(void *) = &f; } void f(void*); void f(const void *);
[19:51:03] <geordi> error: undefined reference to 'f(void*)'
[19:51:10] <anyone> in case of overloads, you just have to spell out the one you want
[19:51:58] <PJBoy> << is_overloaded_f<S>; template<typename S> concept is_overloaded_f = !requires { &S::f; }; struct S { void f(int) {} void f(long) {} }; // Alipha
[19:51:59] <geordi> true
[19:52:05] <PJBoy> that code would break if you made a preferred overload
[19:52:09] <InPhase> { void (*p)(void *) = &f; } void f(void*) {} void f(const void *) {} // anyone
[19:52:10] <geordi>  
[20:01:00] <InPhase> { auto p = PickConstP(f); } void f(void*) {} void f(const void *) {} template<class R, class... Args> auto PickConstP(R (*x)(const Args*...)) {return x;}
[20:01:01] <geordi>  
[20:01:18] <InPhase> I guess with enough template shenanigans you could make some selection filters.
[20:02:55] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[20:03:17] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.182)
[20:04:12] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.182) (Max SendQ exceeded)
[20:04:43] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.182)
[20:05:48] *** Quits: calm-steam (calm-steam@user/calm-steam) (Quit: WeeChat 2.8)
[20:07:00] *** Joins: calm-steam (calm-steam@user/calm-steam)
[20:10:34] *** Quits: b_jonas (~x@catv-176-63-4-47.catv.broadband.hu) (Remote host closed the connection)
[20:17:19] *** Joins: namo (~nomo@95.87.208.95)
[20:20:45] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[20:21:02] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:24:56] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:25:25] *** Quits: TomyLobo (~TomyLobo@p200300e80f006700814dd77ec0a9f818.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:26:16] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:27:30] *** Joins: rajkosto (~rajkosto@93-87-200-147.dynamic.isp.telekom.rs)
[20:30:11] *** Quits: pizdets_ (~pizdets@183.182.111.24) (Quit: pizdets)
[20:30:51] *** Joins: pizdets (~pizdets@183.182.111.24)
[20:31:26] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b640:2806:2779:8038)
[20:31:26] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b640:2806:2779:8038) (Changing host)
[20:31:26] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:32:34] *** Quits: dongcarl (~dongcarl@70.107.207.192) (Quit: Ping timeout (120 seconds))
[20:33:09] *** Quits: causative_ (~halberd@user/causative) (Remote host closed the connection)
[20:33:20] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[20:34:11] *** Joins: causative_ (~halberd@user/causative)
[20:35:12] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[20:36:07] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 268 seconds)
[20:36:16] *** RandomRead3r is now known as RandomReader
[20:38:37] *** Quits: rajkosto (~rajkosto@93-87-200-147.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[20:41:49] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[20:45:09] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:45:22] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 268 seconds)
[20:53:15] *** Joins: jimbzy (~gem@user/jimbzy)
[20:58:11] <CarloWood> How do I enter an UTF8 character literal in my code?
[20:58:21] <CarloWood> << u8'⛓'
[20:58:21] <geordi> error: Unexpected end of request. Expected any symbol.
[20:59:18] <PJBoy> { const char8_t* t = u8"⛓"; }
[20:59:19] <geordi>  
[20:59:41] <CarloWood> k, cause this didn't work:
[20:59:48] <CarloWood> << u8"⛓"
[20:59:48] <geordi> error: ambiguous overload for 'operator<<' in 'cout << "\37777777742\37777777633\37777777623"' (operand types are 'ostream' {aka 'ostream'} and 'const char8_t [4]')
[20:59:58] <PJBoy> yup, those overloads got deleted in C++20
[21:00:45] <PJBoy> geordi, use --2017
[21:00:45] <geordi> ⛓
[21:01:08] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:02:15] <InPhase> PJBoy: ...  They removed stream output for unicode why?
[21:02:20] <CarloWood> I am confused - you said they were deleted in C++20?
[21:02:37] <CarloWood> The errors complains there are too many of them: ambiguous
[21:02:40] <InPhase> Did the standards committee conclude unicode is a passing fad?
[21:02:55] <PJBoy> { const char8_t* t = u8"⛓"; cout << t; }
[21:02:55] <geordi> error: use of deleted function 'basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>&, const char8_t*) [with _Traits = char_traits<char>]'
[21:03:01] <PJBoy> it's deleted if you resolve the ambiguity
[21:03:32] <CarloWood> geordi, use --2020
[21:03:32] <geordi> error: prelude-20.hpp: No such file or directory
[21:03:48] <CarloWood> when did it switch back to C++20?
[21:04:09] <PJBoy> it uses whatever the latest standard is by default
[21:04:21] <CarloWood> geordi, use --2017
[21:04:21] <geordi> error: 'char8_t' does not name a type; did you mean 'wchar_t'? (fix known)
[21:04:45] <CarloWood> geordi: show
[21:04:46] <geordi> --2017 --2020 { const char8_t* t = u8"⛓"; cout << t; }
[21:04:52] <CarloWood> heh
[21:04:56] <CarloWood> Seems sticky
[21:05:06] <CarloWood> { const char8_t* t = u8"⛓"; cout << t; }
[21:05:06] <geordi> error: use of deleted function 'basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>&, const char8_t*) [with _Traits = char_traits<char>]'
[21:05:10] <CarloWood> geordi: show
[21:05:10] <geordi> { const char8_t* t = u8"⛓"; cout << t; }
[21:05:43] <CarloWood> So... how does one print a utf8 string literal then in C++20?
[21:05:49] <PJBoy> [p1423] // InPhase
[21:05:49] <npaperbot> P1423R3: [WG21] char8_t backward compatibility remediation <https://wg21.link/p1423r3> (by Tom Honermann) (2019-07-20) (Related: https://wg21.link/p1423r3/github)
[21:06:04] <PJBoy> with a unicode library probably
[21:06:05] *** Joins: The_Jag (~The_Jag@host-80-117-63-69.retail.telecomitalia.it)
[21:06:09] <PJBoy> or some OS specific API
[21:06:56] <CarloWood> blah - I'll just use
[21:07:10] <CarloWood> << "⛓"
[21:07:11] <geordi> ⛓
[21:08:39] <PJBoy> not much reason to use char8_t other than for overloading / specialisation
[21:09:17] <PJBoy> so char is a fine substitute until the standard gets some half decent unicode support
[21:09:37] *** Joins: chozorho (~chozorho@2601:146:300:c30::a57)
[21:10:19] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[21:10:31] <Eelis> i too have yet to be convinced that char8_t/std::byte are worthwhile, so for now i'm ignoring them
[21:11:01] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[21:12:30] <InPhase> PJBoy: That sounds like lunacy to me.
[21:12:37] *** Joins: rito_ (~rito_gh@45.112.243.69)
[21:12:44] <PJBoy> which bit, the proposal?
[21:13:03] <InPhase> PJBoy: The rationale is there were some usage problems, so they just disabled all usage??
[21:13:22] <InPhase> How about... fix it?
[21:13:46] <InPhase> utf8 is the one true character standard for text.  One should not just break it.
[21:14:09] <InPhase> That's 10 years of chaos introduced into C++ as people continue to use C++20 into 2030.
[21:14:30] <CarloWood> I think it is good they don't keep a broken implementation just for the sake of backwards compatiblity.
[21:15:04] <PJBoy> InPhase, printing a char8_t string never worked
[21:15:15] <CarloWood> I do that all the time :P.  Breaking API is good.  Forces people to fix their code.
[21:15:26] <PJBoy> it's just that u8"..." was a char array in C++17
[21:15:46] <PJBoy> and the other charN_ts printed non-sense too
[21:15:51] <PJBoy> deleting those overloads makes some sense
[21:17:11] <InPhase> PJBoy: Printing u8 strings sure worked.
[21:17:20] <PJBoy> yeah but not char8_t strings
[21:17:27] <PJBoy> char8_t didn't exist before C++20
[21:17:46] <PJBoy> u8 shouldn't have existed before char8_t
[21:17:49] <InPhase> PJBoy: Yes.  So why introduce it, covert u8 to it, and then break it?
[21:18:01] <PJBoy> because it makes sense to have char8_t
[21:18:11] <InPhase> A broken one that you can't even print makes sense how?
[21:18:15] <PJBoy> given the existence of char16_t and char32_t
[21:18:25] <PJBoy> which are also not printable
[21:18:48] <PJBoy> if you were using u8 prior to char8_t, then you're doing something wrong
[21:19:10] <PJBoy> the "fix" for it would be to implement unicode printing
[21:19:17] <InPhase> PJBoy: Why?  I got utf8 just fine with it.
[21:19:29] <PJBoy> because you should just be using char
[21:19:34] <PJBoy> which is what u8 gave you
[21:19:37] <Eelis> non-UTF8 char should just be deprecated. this ain't 1980 anymore
[21:19:38] <InPhase> Which supports utf8.
[21:19:41] <PJBoy> the u8 was actively misleading
[21:19:45] <PJBoy> if you want char, ask for char
[21:19:55] <InPhase> And when I printed it out with cout, it worked!
[21:20:02] <PJBoy> indeed
[21:20:06] <PJBoy> but it would have worked with char
[21:20:10] <PJBoy> and yeah just like
[21:20:10] <InPhase> If I put it in strings, the utf8 still worked!
[21:20:17] <PJBoy> u8 was completely meaningless before
[21:20:22] <PJBoy> in C++20 they gave it meaning
[21:21:01] <PJBoy> and that meaning is consistent with char16_t and char32_t / u and U
[21:21:03] <PJBoy> which is a good thing
[21:21:04] <InPhase> Yeah, they broke it, meaning that people who put it in there to future-proof their code with further type support guessed wrong.
[21:21:19] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[21:21:27] <PJBoy> there's no reason to think that using u8 prefix was futureproofing
[21:21:32] <InPhase> Now u8 went from works as a NOP, to broken and needing to be avoided.
[21:21:42] <PJBoy> yeah
[21:22:04] <PJBoy> but finally in C++20 you can actually use u8 et al for unicode
[21:22:19] <InPhase> It doesn't even print!
[21:22:27] <PJBoy> not via stdlib
[21:22:33] <PJBoy> yet
[21:22:46] <InPhase> That's broken.  I could print with that before.
[21:22:52] <john99> In derived class is safe call a method that was override from one pure virtual in the base class?
[21:23:05] <PJBoy> you're right that your old code is broken due to this change
[21:23:06] <john99> safe call in a destructor*
[21:23:11] <PJBoy> but it's still a worthwhile change
[21:23:20] *** Joins: HvszrStykp (~X@81.171.62.82)
[21:23:41] <PJBoy> also quite easy to fix
[21:23:44] <InPhase> PJBoy: Would "make cout process this" have been that difficult?  It's literally just do what it did before.
[21:24:00] <PJBoy> yeah
[21:24:32] <PJBoy> C++ hasn't formalised unicode in any meaningful way
[21:24:39] <PJBoy> so it can't print unicode yet
[21:25:03] <InPhase> It's utf8...  You dump it to the output strea.
[21:25:05] <InPhase> stream
[21:25:14] <PJBoy> in the future though, they might add support for printing these strings
[21:25:25] <PJBoy> in which case it was good that those overloads were reserved
[21:25:26] <InPhase> It's a byte copy.
[21:25:41] <PJBoy> maybe, maybe not
[21:27:04] <InPhase> If some platform wants to go ascii only and not support that output mode, fine.  Make it like all the other features that disappear when a platform doesn't support them.
[21:28:07] <PJBoy> I believe the committee has taken up the philosophy of "lets just not even try to do any unicode until we figure out a uniformly good solution"
[21:29:09] <PJBoy> anyways you can just reinterpret_cast to char*
[21:29:18] <PJBoy> or use char from the beginning
[21:31:16] <PJBoy> though I guess char has the issue that it's not required to have any particular character set
[21:31:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:31:58] <InPhase> Even Windows, as of last year, comes with a terminal that handles utf8.  That was pretty much the only platform that had a default console that wouldn't support direct cout of utf8, and they finally fixed it 20-some years late.
[21:32:00] <PJBoy> but if char strings ended up not acting like UTF-8, then u8"strings" wouldn't have printed as UTF-8 either
[21:33:10] <PJBoy> so yeah either char works or the old u8 code was buggy
[21:33:28] <InPhase> There's really nothing you can do if a terminal doesn't support it.  So the only solution is dump utf8 and expect platforms wanting to display it to support it.
[21:33:47] <PJBoy> I doubt C++ cares about terminals
[21:34:28] <InPhase> Output streams are only about dumping to files, which should be unmodified, and display to terminals.
[21:34:36] <PJBoy> but maybe it cares about how to deal with an error that occurs halfway through printing a unicode code point
[21:34:48] <PJBoy> which isn't a situation it has to consider with char output
[21:35:54] <PJBoy> honestly I'm not sure what the challenge is with outputting unicode
[21:36:01] <PJBoy> except for the fact that stdlib doesn't understand unicode
[21:38:41] <PJBoy> could be that the streambuf interface just fundamentally can't do unicode output
[21:39:43] <PJBoy> although output UTF-8 over a char array would seem to work
[21:39:45] <InPhase> But it can with utf8.  utf8 was already designed correctly exactly for this purpose.
[21:39:47] <PJBoy> so I dunno
[21:39:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:07] *** ChanServ sets mode: +v npaperbot
[21:40:10] <InPhase> That's basically utf8's one job.  :)
[21:40:22] <PJBoy> I'm personally happy with charN_t all acting consistently
[21:41:23] <InPhase> That would be a nice benefit later, but char32_t is basically an internal storage type.  utf8 is for unicode I/O.  And char16_t serves no purpose and doesn't need to exist.
[21:41:25] *** Quits: The_Jag (~The_Jag@host-80-117-63-69.retail.telecomitalia.it) (Quit: The_Jag)
[21:42:02] <PJBoy> char16_t is the most efficient storage for mostly non-latin text
[21:42:44] <InPhase> PJBoy: That is addressed here:  https://utf8everywhere.org/
[21:43:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:45:22] <PJBoy> > Couldn’t Asian programmers, theoretically, object dumping UTF-16—which saves them 50% of the memory per character?
[21:45:30] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[21:45:35] <PJBoy> I don't understand that string of words and punctuation
[21:45:47] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[21:46:03] <InPhase> It's missing the "to" in "object to".
[21:46:14] *** u0_a3912 is now known as Kit
[21:46:27] <PJBoy> oh
[21:46:49] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[21:46:51] <InPhase> That's a bad pair of words to miss a "to" between in a programming article.  :)
[21:47:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:47:45] *** Joins: xkuru (~xkuru@user/xkuru)
[21:48:04] <InPhase> (English is apparently not the author's native language, from the FAQ below.)
[21:48:56] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:50:18] <PJBoy> looks like a pretty good saving using utf-16
[21:50:43] <InPhase> The general numerical summary is that compactness scenarios for utf16 are actually really hard to hit, and only arise in certain nuanced selections of densely packed characters, and are only very slightly more compact in those nuanced cases.  Most of the time utf8 is more compact, and compression is how you achieve compactness when you need it.
[21:51:05] <PJBoy> I don't think asian text is that nuanced
[21:51:42] <PJBoy> UTF-8 might work better for mixed ASCII and chinese characters, sure
[21:52:22] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[21:52:26] <PJBoy> needs more experiments IMO
[21:52:40] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[21:52:44] <PJBoy> there's also the time cost of the extra decoding utf-8 has to do
[21:53:23] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:53:26] <InPhase> The only way to properly avoid decoding while having unicode support is utf-32.
[21:53:37] <InPhase> utf-16 is a half-measure.
[21:53:50] <PJBoy> utf-32 wastes almost half its space
[21:53:55] <PJBoy> it's an extreme
[21:54:12] <PJBoy> utf-16 is a measured compromise
[21:54:50] <PJBoy> just think of your poor branch predictor reading utf-8 text on asian text
[21:55:29] <PJBoy> actually wait
[21:55:36] <PJBoy> I misremembered how utf-8 is encoded
[21:56:36] <PJBoy> yeah I dunno
[21:56:42] <ville> utf-32 really isn't any better. you still aren't at "one human symbol" == code point
[21:56:43] <PJBoy> utf-8 and utf-16 are both fine
[21:57:39] <PJBoy> if we assume processing speed is roughly the same and storage size after compression is roughly the same
[21:57:41] <ville> you are still going to do funny things to index "N human symbol" offset into a buffer
[21:58:09] <PJBoy> and then if you care about storage size before compression, there's a difference you could measure if you needed to
[21:58:13] <InPhase> I don't stage any protests in the streest about utf-16 existing.  But you might as well have a flexible type and a fixed codepoint type.  Mid-flex type doesn't have a role, and does not achieve compression levels comparable to compression.
[21:58:39] <PJBoy> you're obviously not always going to always use text compressed
[21:58:50] <PJBoy> so it's still a factor to consider
[22:00:24] <kalven> what do you actually gain from having a fixed codepoint type?
[22:00:37] <InPhase> kalven: Random access of codepoints.
[22:00:45] <ville> but that's not meaningful
[22:00:49] <PJBoy> can use it for lookup tables without bitwise operations
[22:00:56] <kalven> which gives you what, exactly?
[22:01:06] <PJBoy> character traits that you might care about
[22:01:22] <ville> you want to accesss "one human symbol" things. whichs roughly extended grapheme cluster
[22:01:26] <kalven> you still have to deal with combining characters and all that
[22:01:38] <ville> err which is
[22:01:40] <PJBoy> yeah but you could quickly look up if a character is a combining one or not
[22:01:59] <InPhase> Well 32-bit storage is the native form of unicode, because that's how much the codepoints take.  So you need to get to that form at some point, whether you store it or not.  It's generally just an intermediate you would use for processing, either one codepoint at a time, a set at a time, or as an array type.
[22:02:02] <PJBoy> you only need to care about combining characters in some situations anyway, presumably
[22:02:09] <PJBoy> like graphical output
[22:02:34] <PJBoy> idk I've never touched unicode
[22:03:05] <kalven> I'm asking (or rather questioning) the actual value of getting to the Nth codepoint in some array of codepoints
[22:03:43] <PJBoy> I'm not sure if or why that kind of random access would be useful
[22:04:19] <ville> InPhase: if you see "ä" on your screen and press backspace, do you expect it to delete the whole "ä" or is deleting the dots ok operation for a human facing application?
[22:04:22] <PJBoy> my only guess was about possibly avoiding the work of combining of characters into a code point
[22:04:56] <PJBoy> I assume code points are useful somehow, so being able to get them without bitwise operations could pay off(?)
[22:05:12] <ville> PJBoy: they really aren't
[22:05:40] <PJBoy> where's Tino when you need him
[22:06:08] <ville> https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/
[22:06:11] <kalven> hopefully celebrating xmas with his family
[22:06:28] <PJBoy> oh yeah, that's a thing
[22:06:54] <ville> kalven: why would you wish such thing on anyone?
[22:08:13] <PJBoy> utf-32 might make it easier to iterate backwards
[22:08:27] <ville> no
[22:08:29] <PJBoy> going backwards by variable code point sizes sounds like a hassle
[22:08:43] <PJBoy> merely going back glyph sizes isn't so burdensome
[22:10:08] <ville> code points do not correspond to what us humans think of as a single symbol
[22:10:14] <PJBoy> I know
[22:10:25] <PJBoy> those are called glyphs right?
[22:10:28] <PJBoy> human symbols
[22:11:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:11:02] <PJBoy> either way they're composed of two layers
[22:11:13] <PJBoy> first layer being code points and second layer being the bytes that make up those code points
[22:11:45] <PJBoy> not having to iterate backwards through that second layer I think is a win
[22:12:33] <PJBoy> like how would you even do it in UTF-8, you'd look at all four bytes before the current position and figure out which one is the start of the codepoint
[22:12:37] *** Quits: rahl (~rahl@102.114.140.185) (Ping timeout: 240 seconds)
[22:12:38] <InPhase> Yeah, utf32 is basically shaving off that first layer of processing.
[22:12:56] <PJBoy> and only after doing that can you repeat that for every code point in the human symbol
[22:13:09] <InPhase> That's why utf32 is regarded as an internal intermediate storage mechanism.
[22:13:13] <PJBoy> whereas in utf-32 you just go back 4 bytes unconditionally, for every code point
[22:13:34] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[22:13:50] <PJBoy> it's like reverse stepping through ARM code vs x86
[22:13:54] <Eelis> i guess one advantage of utf-32 is that it can be ill-formed in fewer ways, because the representation rules out having half a code point
[22:14:15] <PJBoy> you can easily go backwards in ARM as its instructions are fixed length
[22:14:22] <PJBoy> in x86 you have to use heuristics
[22:16:56] <PJBoy> you don't need heuristics in utf-8 because bytes indicate if they're continuations or not
[22:16:58] <PJBoy> but it's still work
[22:20:28] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[22:26:48] *** Joins: Betal (~Betal@user/betal)
[22:28:04] <TinoDidriksen> It's only recently that UTF-8 SSE+ algorithms got efficient enough to compete with UTF-16.
[22:34:04] *** Joins: ferdna (~ferdna@user/ferdna)
[22:35:10] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:35:11] <TinoDidriksen> (also, yes I was in the middle of yule gift unpacking)
[22:35:33] <kalven> "family, you'll have to continue without me.. someone is *wrong* on the internet"
[22:35:57] *** Quits: ckdCreations (~ckdCreati@2607:fb90:835a:44d6:f5a4:286e:ece0:4fd0) (Ping timeout: 240 seconds)
[22:35:59] <TinoDidriksen> Nono, when the ping happened. I did not hear the ping.
[22:36:27] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:37:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[22:40:31] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[22:40:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:49:46] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[22:56:49] *** Joins: pulse (~pulse@user/pulse)
[23:06:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[23:07:23] *** Joins: Enitin (~Enitin@82.102.22.86)
[23:14:37] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:15:06] <anyone> Reject christmas, gifts and unpacking. Return to #C++.
[23:15:55] *** Joins: proller (~p@2a02:6b8:b081:8818::1:d)
[23:20:59] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[23:21:38] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:23:56] <TinoDidriksen> I do reject "christmas". It's Yule. Anyway, #C++-social for that kind of rant.
[23:24:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:25:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:25:09] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[23:25:26] *** Joins: rajkosto (~rajkosto@109-93-246-215.dynamic.isp.telekom.rs)
[23:25:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[23:25:57] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:26:36] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:26:36] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:27:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:c901:71e0:4716:476b) (Ping timeout: 240 seconds)
[23:28:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:34:59] *** Joins: LunarJetman (~LunarJetm@user/zogatribe)
[23:36:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[23:37:53] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[23:38:37] *** Quits: proller (~p@2a02:6b8:b081:8818::1:d) (Ping timeout: 240 seconds)
[23:43:57] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:46:18] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[23:46:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:47:01] <jadew> can template method definition be separate from the class declaration?
[23:47:16] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:48:09] <jadew> Example: template <class T> class A { void method(); };    void A<>::method() {}
[23:48:44] *** Joins: u0_a391 (~u0_a391@2600:380:5a76:77cf:b9d2:8551:d9ed:1473)
[23:49:02] <jadew> I'm trying to solve a cyclical reference issue which used to compile in MSVC's C++17, but not in C++20.
[23:50:50] *** Quits: Kit (~u0_a391@2600:380:8a6d:c2f7:d347:ee94:df2b:a9bc) (Ping timeout: 252 seconds)
[23:50:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:51:32] <PJBoy> provided it's in the header file, yeah
[23:52:05] <jadew> I remember hearing something about template implementation in the cpp file several years ago
[23:52:15] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:52:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:52:23] <PJBoy> { S<void>().f(); } template<typename T> struct S { void f(); }; template<typename T> void S<T>::f() { BARK; }
[23:52:23] <geordi> S<T>::f() [with T = void]
[23:52:24] <jadew> it doesn't help me much if I have to add it to the same header file
[23:52:42] <PJBoy> there's explicit instantiations
[23:53:04] <PJBoy> where you specify a template argument and it will upgrade the template into a real entity for you
[23:53:38] <PJBoy> but of course you can only do that for whatever concrete types you're willing to spell out
[23:54:18] <jadew> yeah, I don't think that's going to solve it either
[23:54:31] <jadew> I guess I'm forced to merge the header files
[23:54:44] <jadew> I have two classes referencing each other, in different header files
[23:56:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:56:51] <jadew> kind of like this: https://pastebin.com/dRwqw6vC
[23:58:50] <jadew> I guess I could include Header 2, in one and then define the methods
