[00:00:55] <teresko> those books are overrated to begin with
[00:01:12] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 250 seconds)
[00:01:16] <tmm88> it can talk to you telepathically and using data mining artificial intelligence gpgpu and cryptography and vr/ar/xr to talk to you telepathically and feed you with information´
[00:01:29] *** Joins: eugercek (~user@user/eugercek)
[00:01:55] *** Joins: sam_1 (~sam_1@87.51.251.118)
[00:02:46] <blueagain> the books are called a song of fire and ice.
[00:02:57] <blueagain> and the first one isn't bad, but isn't that good either.
[00:03:25] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:04:17] <mikrosis> I read the originals and haven't really watched the series
[00:04:58] <blueagain> I stopped watching about ~30 minutes into the first episode, was pretty boring.
[00:05:45] *** Quits: lara99 (~lara99@93-36-163-139.ip61.fastwebnet.it) (Quit: Client closed)
[00:05:57] *** Joins: jazzy (~jaziz@user/jaziz)
[00:06:27] <mikrosis> I read the originals and haven't really watched the series
[00:06:34] <ThePendulum> you're like my mom complaining she doesn't understand the plot 10 minutes into any movie
[00:06:35] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[00:06:40] <mikrosis> blueagain: the last season is bad lol
[00:07:12] <systemfault> I watched the first four episodes and there was still no plot... only boobies and rapes.
[00:07:13] <gde33> mikrosis: if you make a balloon a few km in diameter you get to use concrete as the shell material which allows you to pump all the air out :)
[00:07:27] <ThePendulum> systemfault: what more could you ask for?
[00:07:29] <systemfault> For boobies, there's the internet... and I'm definitely not into rapes
[00:08:02] <systemfault> A good story :p
[00:08:07] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[00:08:13] <blueagain> systemfault: that's pretty much my thoughts of it. Just too vulgar.
[00:08:49] <blueagain> A good fantasy series is Wheel of Time, but nobody needs to watch the amazon adaptation
[00:08:52] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:09:21] *** Quits: programmar (~whatever@118.69.128.37) (Ping timeout: 268 seconds)
[00:09:45] <gde33> the critical drinker on youtube does a good job explaining what happend to movies/series
[00:09:54] <teresko> ^ agreed
[00:10:13] <mikrosis> gde33: fascinating
[00:10:14] <mikrosis> lol
[00:12:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:13:14] <systemfault> gde33: They're pushing "THE MESSAGE" :)
[00:13:18] <blueagain> is he supposed to sound drunk or is he actually drunk
[00:13:55] <teresko> it's an affectation: he's *usually* sober
[00:14:07] <teresko> well, not for the long-form-streams
[00:15:12] <teresko> if you want a list of good movie recommendations: https://www.youtube.com/playlist?list=PLSSgdB2qFL6kpNx9Tdkm5MBKrdVHZsenr
[00:15:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:18:27] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[00:21:47] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Quit: ThePhilgrim)
[00:24:42] *** Joins: audio (~audio@user/audio)
[00:27:18] *** Joins: pavonia (~user@user/siracusa)
[00:28:03] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[00:30:35] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[00:31:25] *** Joins: earthToAdam (~user@84.9.160.201)
[00:31:51] <z1haze> ljharb, did you ever respond to the why vite is bad? I am genuinely curious
[00:32:09] <lmat> I'm running node in docker and doing   readFileSync('/somefile'); and I get Error: EACCES: permission denied, open '/somefile'.   The file permissions are: -rw------- 1 root root   and node is running as root, so I think it should be able to read the file? When I run /bin/bash as root, I can   cat /somefile; without problems.
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:36:12] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 240 seconds)
[00:39:34] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[00:39:50] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[00:39:59] *** Joins: sam_1 (~sam_1@87.51.251.118)
[00:41:35] <jwpapi> how is this possible? https://www.irccloud.com/pastebin/J6uxwtT3/
[00:41:47] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:44:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[00:44:31] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[00:44:46] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[00:48:29] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[00:50:17] <lmat> jwpapi: It looks like utmSerializer.serialize returns an object with keys and values... what's the problem?
[00:51:14] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:28cf:5a29:7ce3:efd1) (Remote host closed the connection)
[00:51:52] *** Joins: p-i- (~Ohmu@183.89.27.225)
[00:52:18] <lmat> FREAKING CRAP! I figured out my problem above. Apparently this docker container automatically runs as uid=1000,gid=1000!!
[00:52:23] * lmat facepalm
[00:53:25] *** Quits: Junxter (~Junxter@222.95.164.193) (Ping timeout: 240 seconds)
[00:54:36] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 240 seconds)
[00:55:06] *** Joins: polyrob (~rob@user/polyrob)
[01:04:48] *** Joins: earthToAdam (~user@84.9.160.201)
[01:06:09] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[01:13:15] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:17:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:17:42] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 252 seconds)
[01:19:09] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[01:21:01] *** Quits: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[01:21:17] *** Joins: Jigsy (~Jigsy@user/jigsy)
[01:23:15] *** Joins: hoppity (~hoppity@user/hoppity)
[01:23:46] <hoppity> Hi guys, is it really worth it to go though the hell of npm + webpack etc etc etc rather than simply using Jquery and cutting to the chase?
[01:23:54] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[01:23:58] <ljharb> hoppity: it's mandatory to do so
[01:24:01] <ljharb> hoppity: and yes
[01:24:11] <hoppity> ljharb: why mandatory? and why yes? haha
[01:24:14] <ljharb> z1haze: i was probably being a bit overdramatic. vite is new, for one, which should always make something suspect; specifically tho, vite follows webpack 5's broken behavior of not automatically polyfilling node globals/core modules, and also penalizes deps that ship CJS (ie, most javascript on the planet)
[01:24:22] <ljharb> z1haze: so there's a lot of red flags
[01:25:04] <ljharb> hoppity: first of all, modern web dev requires using modules and a bundler, and transpiling
[01:25:22] <ljharb> hoppity: also, npm isn't hell in any way; webpack config is, but luckily there's tons of tutorials out there
[01:25:34] <ljharb> hoppity: and jquery is an obsolete approach to building web apps. use react.
[01:26:04] <ljharb> gde33: an array, maybe like a million items or more? for json tho, because it goes over the wire, 1MB would be *massive*
[01:26:14] <ljharb> jaawerth: es6-shim covers that Map bug in IE 11 :-p
[01:26:20] <gde33> on the front end
[01:26:32] <gde33> a million? rly?
[01:27:14] <ljharb> gde33: why would you have json if it's only on the frontend; json is for talking to a server
[01:27:28] <ljharb> gde33: but also it's a nuanced question. why do you have an array that's even got 100k items?
[01:27:39] <z1haze> how does it penalize them? and sorry for my ignorance here but what is CJS?
[01:27:42] <z1haze> commonjs?
[01:27:48] <gde33> ljharb: its an opinion
[01:27:56] <gde33> ljharb: that is why I ask you
[01:28:15] <gde33> ljharb: take it as flattery :P
[01:28:45] <ljharb> gde33: ok
[01:28:53] <ljharb> z1haze: CJS, commonjs, yes, like `module.exports`
[01:28:57] <ljharb> z1haze: as opposed to native ESM
[01:29:08] <ljharb> (which actually has no upsides and a few downsides, so should be avoided)
[01:29:24] *** Quits: brentaarnold (~brentaarn@24.112.56.42) (Ping timeout: 240 seconds)
[01:29:26] <ljharb> note that if you're using babel or TS to transpile, you're almost certainly authoring in ESM but running/outputting CJS
[01:31:07] <z1haze> doesnt esm allow for much better treeshaking
[01:32:54] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[01:32:55] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[01:33:11] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[01:33:12] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[01:34:56] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4a7:dec3:a543:4b87) (Ping timeout: 245 seconds)
[01:38:18] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 256 seconds)
[01:38:35] *** Quits: mikrosis (~mikrosis@dynamic-046-114-155-234.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[01:40:04] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[01:40:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:42:49] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[01:42:50] *** Quits: pmercado (~pmercado@186.107.43.179) (Ping timeout: 256 seconds)
[01:44:36] *** Joins: trevors (~trevors@user/trevors)
[01:47:31] *** Quits: trevors (~trevors@user/trevors) (Client Quit)
[01:48:15] <Alexendoo> z1haze: Not inherently, most cjs usage would be just as tree shakeable
[01:48:29] <Alexendoo> Whether tools support it is a different matter
[01:48:42] *** Joins: junebug (~junebug@2600:1700:3db0:2540:584:9f2a:224e:6ba5)
[01:49:01] <ljharb> z1haze: a) no, CJS is precisely as tree-shakeable as ESM, but as Alexendoo says, many tools are too lazy to support it
[01:49:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[01:49:22] <ljharb> z1haze: b) tree-shaking only provides a benefit (an incomplete one) when you import more than you need in the first place. deep-import exactly what you need, and tree-shaking offers no benefit.
[01:49:34] <ljharb> (and, that will result in smaller bundle sizes than tree-shaking is capable of producing)
[01:50:59] <blueagain> ljharb: what are the downsides of ESM?
[01:52:57] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr) (Quit: Ping timeout (120 seconds))
[01:53:58] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr)
[01:54:58] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[01:55:44] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Client Quit)
[01:56:41] *** Joins: sam_1 (~sam_1@87.51.251.118)
[01:58:05] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr) (Quit: Ping timeout (120 seconds))
[01:59:07] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr)
[01:59:17] *** Joins: trevors (~trevors@user/trevors)
[01:59:24] *** Quits: junebug (~junebug@2600:1700:3db0:2540:584:9f2a:224e:6ba5) (Remote host closed the connection)
[01:59:50] *** Joins: junebug (~junebug@2600:1700:3db0:2540:927d:6aab:4d3b:87b8)
[02:01:08] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[02:05:31] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:c035:1eaa:808f:b1c3) (Quit: Client closed)
[02:05:50] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:07:38] <ljharb> blueagain: in browsers, or in node, or both
[02:08:29] <ljharb> blueagain: in browsers, ESM is slower by design, because of the waterfall nature of traversing the dep graph. this is unavoidable, and could only be mitigated by explicitly computing in advance a list of all the deps, and providing that "preload" info to the browser. in other words, "no build process" becomes impossible, so optimizing for no build process is harmful.
[02:08:50] <ljharb> blueagain: in node, native ESM lacks the resolution semantics CJS has, so you are forced to include extensions and "index" for relative files
[02:09:10] <ljharb> blueagain: ESM does not have a conditional static form, so either you always import something, or you have to import it asynchronously
[02:09:37] <ljharb> blueagain: ESM in browsers (and in node, hopefully temporarily) you're forced to use an import assertion to import JSON, but importers shouldn't have any knowledge about the module format of the thing they're importing.
[02:09:48] *** Joins: earthToAdam (~user@84.9.160.201)
[02:10:02] <ljharb> blueagain: in node, native ESM doesn't yet have loaders, so there's no way to do APM/mocking, and there's also no way to clear the ESM module cache for hot reloading
[02:10:24] <Slade> i am feeling i need a simple website for permalinks doing redirects..  seems trivial to write one from scratch, but is there something precanned for this?
[02:10:24] <ljharb> i could keep going but that's a lot already, considering there's no advantage over "author in ESM, transpile to CJS".
[02:10:29] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[02:10:47] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[02:10:51] <ljharb> Slade: i mean, apache has mod_rewrite, nginx has something similar
[02:11:11] <Slade> ljharb: yea. and just keep a set of rules for this. i'm betting cloudflare might have something built in..
[02:11:21] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Client Quit)
[02:11:26] <Slade> lots of ways to skin this. just thought i'd solicit opinions
[02:11:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:12:05] <ljharb> Slade: cloudflare almost certainly does
[02:12:16] <Slade> checking out bulk redirects on CF now
[02:12:34] *** Joins: brentaarnold (~brentaarn@24.112.92.157)
[02:13:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:13:59] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:14:46] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 260 seconds)
[02:15:21] <Slade> ljharb: most of these solutions are slightly less interesting if i wanna feed the hits to google ctm or something. but still super clean
[02:17:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:18:54] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:22:34] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:26:32] *** Joins: trevors (~trevors@user/trevors)
[02:27:19] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[02:27:44] *** Quits: RougeR (~rougex250@user/rouger) (Remote host closed the connection)
[02:29:34] <blueagain> ljharb: but having to including extensions is a node implementation thing, no? You could implement the same behaviour as with cjs, or is it a spec ssue?
[02:29:57] <blueagain> ljharb: also, is it problem to use dynamic imports to import something conditionally?
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:30] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:30:39] <blueagain> I'm not really convinced those are real issues, it seems to me more than it's more *convenient* to use CJS in node simply because it's been longer around.
[02:31:26] <blueagain> I use esm both for my server and client code, but the client is bundled by esbuild so effectively I don't use esm in the browser.
[02:33:15] *** Joins: sam_1 (~sam_1@87.51.251.118)
[02:33:28] <blueagain> by the way, I think the new-cap eslint rule is something broken.
[02:33:49] <blueagain> it complains about this line: return new (await import(path)).default();
[02:34:04] <FightingFalcon> https://www.defensehere.com/en/
[02:34:05] *** Joins: pizdets_ (~pizdets@183.182.111.116)
[02:34:13] <blueagain> which isn't lowercase as far as I can see...
[02:34:23] <FightingFalcon> Please visit this site and click on the green arrow buttons in the main slider. it gives a weird error
[02:34:45] <blueagain> s/something/somewhat
[02:34:54] <Slade> ljharb: as a follow up. cloudflare is limited. https://developers.cloudflare.com/rules/bulk-redirects#availability
[02:34:58] *** Quits: pizdets (~pizdets@183.182.115.20) (Ping timeout: 272 seconds)
[02:36:05] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[02:37:32] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[02:39:49] <FightingFalcon> Uncaught TypeError: Cannot read properties of null (reading 'match')
[02:39:58] <FightingFalcon> it gives this error but the code doesnt even exist
[02:40:59] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:45:06] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:46:40] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[02:48:35] *** Joins: ferdna (~ferdna@user/ferdna)
[02:48:40] *** Joins: earthToAdam (~user@84.9.160.201)
[02:48:43] *** Joins: hashfunc1818 (~user@2601:5c0:c280:7a9e:8c1e:afa3:b36b:39be)
[02:48:44] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[02:52:01] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[02:52:28] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[02:53:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com)
[02:54:12] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[02:55:35] *** Joins: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c)
[02:55:54] <twiclo> What's that array method that lets you return a boolean based off a condition for any entry in the array?
[02:56:08] <twiclo> I need to loop over and stop looping if the condition is met
[02:57:46] <twiclo> Looks to be .some()
[02:57:57] <blueagain> twiclo: some is at least, every is all
[02:58:21] *** Quits: z1haze (~z1haze@user/z1haze) (Quit: Leaving)
[02:59:14] <blueagain> they correctly to ∃(x) and ∀(x) in predicate logic
[02:59:21] <blueagain> correspond*
[02:59:33] <twiclo> Oh I need to do this on a NodeList not an array
[03:00:11] <blueagain> you can spread it, or use Array.from
[03:00:22] <twiclo> NodeList.entries().some()?
[03:00:22] <t3nj1n> .filter()?
[03:00:35] <twiclo> .filter would return a new array. I just need a bool
[03:00:56] <t3nj1n> oo
[03:00:58] <blueagain> Array.from(node_list).some(predciate)
[03:01:04] <blueagain> predicate*
[03:01:28] <t3nj1n> i don't know how many times i've tried to iterate over a nodelist like an idiot
[03:01:39] <t3nj1n> things that look like arrays but aren't :dead:
[03:01:45] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[03:01:48] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:02:06] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:02:24] <blueagain> I have no real idea why there is even a NodeList to begin with, it's too similiar to array in many things but then different.
[03:03:00] <blueagain> I guess it's because some of them are live
[03:06:42] <ljharb> blueagain: you can use extensions or omit them with CJS (best practice is to omit them) but in ESM you must include them
[03:06:48] <ljharb> blueagain: it's a problem if you need the result synchronously available
[03:07:02] <ljharb> blueagain: and yes, that "all the world's javascript" is already CJS definitely makes it more convenient
[03:07:23] <ljharb> blueagain: the new-cap rule wants you to store a constructor in a PascalCased variable first
[03:07:51] <ljharb> blueagain: meaning, `const { default: Foo } = await import(…); new Foo()`
[03:07:57] <ljharb> blueagain: which also is clearer code
[03:09:22] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[03:13:30] <twiclo> https://p.twil.cx/kul.coffee
[03:13:36] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:13:38] <twiclo> Shouldn't that last log be true?
[03:14:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:15:38] <onosendi> twiclo: Array.some expects a return value.
[03:16:49] <onosendi> n> const someAreTrue = [true, false, false].some((b) => b); someAreTrue;
[03:16:50] <jellobot> (okay) true
[03:17:43] <twiclo> Am I not returning that last line? Let me throw a return in
[03:17:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[03:17:58] <twiclo> Oh that did it
[03:18:47] <onosendi> twiclo: also, you don't want any side effects in there either.
[03:18:57] <twiclo> What do you mean?
[03:19:41] <onosendi> You're adding 'active' to the node's class list.
[03:20:16] <blueagain> ljharb: thanks
[03:21:06] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:21:26] *** Joins: viva (~viva@2601:2c7:8900:169:7c8e:903f:59e1:51c8)
[03:21:35] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[03:21:48] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 240 seconds)
[03:22:12] <onosendi> twiclo: oh nevermind, I read that wrong.
[03:22:14] <twiclo> I don't see where I'm doing that. I'm only trying to see if that value is active
[03:22:42] <viva> hi all, can someone help me with a bit of simple syntax in JS? i've code a code snip here that takes a string and splits it into two (or more?) segments... and after each .split() is it placing the value into an array? or pulling the value FROM an array? (or something else entirely?)
[03:22:52] <viva> https://jsfiddle.net/fj0hvxd6/
[03:23:01] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Client Quit)
[03:23:16] <viva> i've never seen this syntax, and i've also never seen it doubled up like that either
[03:23:47] *** Quits: NinjaKirby (Izzy@gateway/vpn/protonvpn/ninjakirby) ()
[03:23:51] <viva> i understand that stuff like this is "valid" in JS, but just because its valid certainly doesnt mean its easier to understand (especially for a newbie like me >_< coming from langs where stuff like this is NOT valid)
[03:24:02] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[03:25:57] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[03:27:30] <onosendi> twiclo: you probably want to use `contains` instead of what you're using: https://gist.github.com/onosendi/5d3983c5576a2c89241b387431039959
[03:27:37] <blueagain> yay, arch has node 17.6
[03:27:58] <blueagain> ljharb: they've been awfully fast now :)
[03:28:55] <onosendi> blueagain: n. v. m. Do it.
[03:29:00] <onosendi> :)
[03:29:48] *** Joins: llorllale (~llorllale@198.98.119.85)
[03:32:00] *** Quits: cotko_ (~cotko@155.pool85-49-78.dynamic.orange.es) (Quit: Konversation terminated!)
[03:33:23] <blueagain> onosendi: I'm going to stick to pacman and trust in its powers. Besides, it's not like I need the current version *the moment* it's out.
[03:33:35] <blueagain> But if I need another version, I'd install nvm, sure, why not.
[03:34:12] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[03:34:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2549:2ec4:27e7:2488) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:34:50] *** Joins: bambanxx (~bambanx@2800:150:106:1061:c008:90ed:2a05:281)
[03:37:51] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[03:38:36] *** Joins: sickdyd (~sickd@FL1-118-109-70-167.tky.mesh.ad.jp)
[03:39:38] <onosendi> I'm on Arch as well, and I don't want node getting upgraded every time I update my system. Sooner or later, it's going to bite you :P
[03:39:54] *** Joins: silverdust (~silverdus@user/silverdust)
[03:40:01] *** Quits: hoppity (~hoppity@user/hoppity) (Remote host closed the connection)
[03:41:08] <blueagain> onosendi: oh, it's bitten me already. I think in 17.2 they introduced json import asserts and I had a bit of rewriting to do. But I usually weather it well.
[03:41:57] <blueagain> onosendi: I usually just want to benefit from the latest v8 goodies.
[03:43:49] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[03:48:56] *** Joins: earthToAdam (~user@84.9.160.201)
[03:52:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:a97f:e3b8:dca9:f9cf)
[03:53:20] <viva> can anyone help with my simple syntax prob? https://jsfiddle.net/fj0hvxd6/
[03:53:33] <viva> i've never seen this syntax, and i've also never seen it doubled up like that either
[03:53:37] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 240 seconds)
[03:53:46] <viva> i understand that stuff like this is "valid" in JS, but just because its valid certainly doesnt mean its easier to understand (especially for a newbie like me >_< coming from langs where stuff like this is NOT valid)
[03:54:18] <onosendi> viva: the `split().split()`?
[03:54:35] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:54:36] <viva> the part where it goes split()[x].split[y]
[03:54:49] <onosendi> viva: break it down into smaller chunks.
[03:54:49] <viva> is that pulling FROM an array? pushing TO an array?
[03:54:55] *** suss` is now known as suss
[03:55:18] <onosendi> n> 'he is nice and he = cool?'.split('=');
[03:55:18] <jellobot> (okay) [ 'he is nice and he ', ' cool?' ]
[03:55:29] *** Quits: p-i- (~Ohmu@183.89.27.225) (Ping timeout: 256 seconds)
[03:55:30] <onosendi> So that has two indexes, 0 and 1.
[03:55:47] *** Joins: w0ng (~w0ng@185.218.127.57)
[03:55:47] <onosendi> n> [ 'he is nice and he ', ' cool?' ][1]
[03:55:48] <jellobot> (okay) ' cool?'
[03:55:59] <viva> oh
[03:56:12] <onosendi> That's the result from grabbing the first index. Then it's split again, and grabs index 0.
[03:56:28] <onosendi> 1 index, not first, rather.
[03:56:31] <viva> so each time split runs, it creates an array?
[03:56:34] * gde33 thinks it would have been cool if includes accepted an array as its first param
[03:56:51] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 256 seconds)
[03:57:24] <onosendi> viva: that's what split does. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
[03:57:25] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[03:57:56] <gde33> I just discover foo.split('something',1)[0]
[03:58:36] *** Quits: hashfunc1818 (~user@2601:5c0:c280:7a9e:8c1e:afa3:b36b:39be) (Ping timeout: 240 seconds)
[03:58:42] <viva> onosendi ok i understand that, i just dont understand how its storing values in an array that hasnt been "defined"
[03:58:48] <viva> is it just stored temporarily in memory?
[03:58:55] *** Joins: earthToAdam (~user@84.9.160.201)
[03:58:58] <gde33> it makes an array
[03:58:58] <viva> not associated with a variable?
[03:59:17] <gde33> you do  const foo = bar.split('')
[04:01:00] <gde33> viva: most things return something, it isn't always ellegant or even useful but you can totally something like:   a = (b = 123)
[04:01:12] <gde33> or a=b=c=d=42
[04:02:02] <viva> ok another quick question... https://jsfiddle.net/x9b23cs4/ ... in that snip when i alert(x) is the array, when referenced as its var defaulting to x[0] ?
[04:02:35] <gde33> viva: it just turns it into a string
[04:02:43] <viva> oh ok
[04:02:49] <gde33> n> [1,2,3,4,5] + " hello world"
[04:02:50] <jellobot> (okay) '1,2,3,4,5 hello world'
[04:02:59] <viva> i think this must be shorthand... and i dont think im gonna fully understand it until i see it done piece meal?
[04:03:05] <gde33> adding a string to it will also turn it into a string
[04:03:37] <gde33> viva: all you have to remember is that you should never do this :P
[04:03:56] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 256 seconds)
[04:04:01] <viva> ok, so that is cringe code right?
[04:04:06] <onosendi> lol, indeed.
[04:04:19] <gde33> n> function foo(){/*do something*/);  a = foo+ " never do this"; a
[04:04:19] <jellobot> (fail) SyntaxError: Unexpected token ')'
[04:04:32] <gde33> n> foo = function(){/*do something*/);  a = foo+ " never do this"; a
[04:04:32] <jellobot> (fail) SyntaxError: Unexpected token ')'
[04:04:42] <gde33> n> foo = function(){/*do something*/};  a = foo+ " never do this"; a
[04:04:43] <jellobot> (okay) 'function(){/*do something*/} never do this'
[04:04:49] <viva> i mean how do you even get the first part of the string out into a var when you do it like that?
[04:05:00] <viva> he is nice... you have to chop it up into two lines right?
[04:05:01] <gde33> viva: now it turned a function into a string -.-
[04:05:14] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[04:06:01] <viva> holy cow, so that type definition at run time works on things OTHER than primitives?
[04:06:22] <viva> that is what we call it right? type definition (or evaluation?) at run time? (interpret time?)
[04:06:25] <gde33> n> "hello world " + 123
[04:06:26] <jellobot> (okay) 'hello world 123'
[04:06:53] <gde33> viva: it makes the best of it :P
[04:07:32] <viva> for as much as i dont like it, i have to give it props because thats actually kinda neat that it doesnt just fail to interp
[04:08:38] <viva> im learning JS/web security via the Stanford CS 253 classes, and we built a "bank app" in js/node, and i had a few questions about syntax there too, if you dont mind... i'll paste a fiddle
[04:10:06] *** Quits: Tangent-Man (~Tang3nt-M@138.199.21.36) (Remote host closed the connection)
[04:14:23] <viva> https://jsfiddle.net/1weLgqcd/
[04:14:27] <viva> i have 2 specific questions
[04:14:31] <viva> both regarding syntax
[04:14:41] <viva> one on line 4
[04:14:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:14:59] <viva> 4+8  actually (same question, 2 examples)
[04:15:17] <viva> and one starting on line 19 but the code begins on 23
[04:16:29] *** Joins: silverdust (~silverdus@user/silverdust)
[04:16:32] <viva> regarding line 8 the var randomBytes seems so arbitrary, how can it be a valid attribute of the require('..') ?
[04:16:59] <viva> and im also unsure if this is supposed to be similar to an import statement, along with an object instantiation/initialization (all at once?)
[04:17:56] <viva> and lastly i guess i really dont understand why we encapsulated some those two vars in curly braces while we left the several other vars around them without braces?
[04:18:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:18:52] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:20:37] *** Quits: junebug (~junebug@2600:1700:3db0:2540:927d:6aab:4d3b:87b8) (Ping timeout: 240 seconds)
[04:21:17] <viva> any thots?
[04:22:58] <onosendi> viva: `const { foo } = require('bar');` is just the destructuring syntax.
[04:23:21] <viva> ok i have not heard of that before
[04:23:29] <viva> let me write that down to research
[04:25:09] <Slade> those curated list of libraries/packages etc.. whats the term for them?   i see lots of react-awesome etc
[04:25:18] <viva> its the same thing as saying const {foo = require('bar').foo ? (if that were valid) ?
[04:25:27] <onosendi> viva: https://gist.github.com/onosendi/53a13c1a9ba80ea349f23d8ff7383741
[04:25:29] <viva> and require('bar').foo actually resolves to bar.foo ?
[04:25:40] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[04:25:53] <viva> Slade: in my fiddle?
[04:25:58] <viva> or just in general?
[04:26:02] <Slade> in general
[04:26:18] <Slade> https://github.com/lukeed/awesome-cloudflare-workers   awesome-- etc.. just means curated list i  guess
[04:26:47] <viva> onosendi that just threw me for a loop... your gist
[04:27:04] <viva> it seems simple but also... im like what is this
[04:27:22] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:27:23] <viva> these are... inversions of each other?
[04:27:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:27:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:27:42] *** Joins: wroathe (~wroathe@user/wroathe)
[04:28:45] <viva> also how is your second operation there valid... i thought consts were immutable?
[04:28:55] <viva> unless JS const != java, c, etc. const?
[04:29:26] <viva> oh right
[04:29:30] <viva> a isnt changing
[04:29:51] <viva> we have a "var less" (tuple?) being initialized... this var less stuff is killing me
[04:30:35] <onosendi> viva: Here's an example of destructuring, reassigning, and setting a default: https://gist.github.com/onosendi/cdb91f89cf31040ff3acc19f1fff7aa0
[04:30:52] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[04:31:59] <viva> onosendi did you get a chance to see my line 19 where a (nameless?) function get created inside of the params of another function call? i was wondering what the "long form" equivalent of that would be as well
[04:33:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:50] <onosendi> viva: that's an anonymous function. https://gist.github.com/onosendi/2029203593521f3021aa9c5535a2ae33
[04:34:03] <onosendi> or, arrow function.
[04:34:35] <onosendi> n> const a = (arg) => arg + 1; a(5);
[04:34:35] <jellobot> (okay) 6
[04:35:01] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:35:13] <viva> ok TYVM
[04:36:19] *** Joins: earthToAdam (~user@84.9.160.201)
[04:36:37] <onosendi> viva: and as for the `const { foo } = require()` vs `const foo = require()`... it's all about how it's exported.
[04:36:59] <viva> i see
[04:37:07] <viva> (-ish)
[04:37:18] <viva> this has been really helpful tho, thanks for the help
[04:37:25] <viva> im trying to learn all this on my own
[04:37:35] <viva> and i havent taken any programming for YEARS
[04:37:44] <viva> and certainly not in this language
[04:39:55] <Neuromancer> so a node script errors out and closes, on an await line, try and catch do nothing to actually catch the error
[04:40:53] <systemfault> They do work, you're probably just misusing something
[04:41:16] <Neuromancer> ill paste a photo instead of code because you can't run it anyway
[04:41:45] <systemfault> n> try { await Promise.reject(new Error('lol')); } catch (e) { console.log(e) }
[04:41:46] <jellobot> (okay) Error: lol     at evalmachine.<anonymous>:3:26     at evalmachine.<anonymous>:7:3     at Script.runInThisContext (node:vm:129:12)     at run (/run/run.js:66:35)     at /run/run.js:155:28     at processTicksAndRejections (node:internal/process/task_queues:96:5)
[04:41:58] <Neuromancer> https://i.imgur.com/z6ijCzX.png
[04:42:07] <Neuromancer> shouldn't try or .catch do something here?
[04:42:21] <Neuromancer> seems like its maybe the lib that doesn't do correct error handling?
[04:42:26] <systemfault> No, because of that last .catch(e => e)
[04:42:33] <Neuromancer> i added that later
[04:42:43] *** Quits: bambanxx (~bambanx@2800:150:106:1061:c008:90ed:2a05:281) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:42:48] <Neuromancer> so how would you handle it?
[04:43:20] <systemfault> Your code looks good, it has to be related to the API your using
[04:43:44] <Neuromancer> damn
[04:44:10] <systemfault> That .catch(e => e) should have recovered any error from that .call() call
[04:44:25] <systemfault> So you're catching the error in two different ways and it still doesn't work
[04:44:35] *** Joins: junebug (~junebug@2600:1700:3db0:2540:87dd:f613:9bae:7f3c)
[04:44:44] <Neuromancer> yeah im trying to figure out how
[04:46:29] <onosendi> viva: no problem :)
[04:46:33] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[04:47:53] *** Joins: crashrep (~crashrep@user/crashrep)
[04:48:51] <Neuromancer> https://i.imgur.com/87Y3FXE.png
[04:48:58] <Neuromancer> this is where the lib is failing
[04:49:07] <Neuromancer> guess they have a comment at least
[04:49:15] <systemfault> Neuromancer: Is that an async function?
[04:49:27] <Neuromancer> doesn't seem like it
[04:49:37] <systemfault> Then yeah, it's bad.
[04:49:39] *** Joins: bambanxx (~bambanx@2800:150:106:1061:c008:90ed:2a05:281)
[04:49:53] <systemfault> But hey... at least, they added a comment :/
[04:50:01] <Neuromancer> yeah lol
[04:54:14] *** Quits: junebug (~junebug@2600:1700:3db0:2540:87dd:f613:9bae:7f3c) (Quit: Leaving)
[04:56:56] *** Joins: trevors (~trevors@user/trevors)
[04:58:01] *** Joins: p-i- (~Ohmu@mx-ll-183.89.30-105.dynamic.3bb.co.th)
[04:59:37] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:a97f:e3b8:dca9:f9cf) (Ping timeout: 240 seconds)
[05:05:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:07:28] *** Joins: crashrep (~crashrep@user/crashrep)
[05:09:57] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 256 seconds)
[05:10:04] *** Quits: nomic (~nomic@185.198.243.229) (Quit: Leaving)
[05:15:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:16:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:16:55] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Read error: Connection reset by peer)
[05:17:37] *** Quits: bambanxx (~bambanx@2800:150:106:1061:c008:90ed:2a05:281) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:18:17] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Remote host closed the connection)
[05:18:40] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[05:19:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:22:40] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[05:22:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[05:22:54] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[05:22:54] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[05:22:54] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[05:23:10] *** Quits: peteyboy1 (~peteyboy1@95.169.226.66) (Ping timeout: 250 seconds)
[05:23:26] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[05:24:35] *** Joins: Praise (~Fat@user/praise)
[05:24:41] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 256 seconds)
[05:25:28] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[05:25:44] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[05:27:03] *** Joins: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[05:27:22] <Neuromancer> systemfault do you think it's very bad if i use process.on('uncaughtException') ?
[05:27:33] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[05:28:18] <systemfault> I would probably try to see what makes the lib fail... but sure, you can do that
[05:31:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:34:06] *** Joins: crashrep (~crashrep@user/crashrep)
[05:35:25] <Neuromancer> yeah i'll do that eventually
[05:37:15] *** Joins: earthToAdam (~user@84.9.160.201)
[05:37:38] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[05:38:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:41:00] *** Joins: vysn (~vysn@user/vysn)
[05:41:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:42:26] *** Quits: earthToAdam (~user@84.9.160.201) (Ping timeout: 272 seconds)
[05:46:28] *** Joins: crashrep (~crashrep@user/crashrep)
[05:46:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:48:28] *** Joins: Rockwood (~Rocky@user/rocky)
[05:51:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[05:52:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:54:20] *** Joins: c4017w (~c4017@209.52.68.8)
[05:58:53] <yolo> out of curiousity I built an electron helloworld(400MB memory), I did a 'ldd electron' and found it's all linking to system libraries(gtk,etc) but I could not find any link to blink or chromium engine, why is that? isn't electron based off v8|blink engine etc
[05:59:26] <jaawerth> it's based on webkit, which blink is a fork of
[05:59:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:59:51] <yolo> no libwebit2gtk or any webkit either, must be missing something
[06:00:06] <jaawerth> actually wait I think it IS blink?
[06:00:13] <yolo> electron forks 48 threads
[06:00:18] <yolo> i believe it's blink
[06:00:18] <jaawerth> could it be statically compild?
[06:00:36] <jaawerth> as opposd to linked, I mean
[06:00:44] <yolo> good point, as electron is 150MB for a helloword in size
[06:00:52] <jaawerth> yeah, pretty sure it's all embedded
[06:01:12] <jaawerth> though if you intall it separately to launch the app via a package manager on a linux system it might link it instead
[06:01:22] * jaawerth looks at pkgbuild
[06:01:58] <yolo> you're right 'strings electron' showed lots of blink APIs, e.g. blink.mojom.WebBluetoothAdvertisementClient
[06:02:04] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[06:02:21] <jaawerth> ahh
[06:02:23] <yolo> 1427 of them
[06:02:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a068-f96d-6ad8-5504.res6.spectrum.com)
[06:02:57] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 240 seconds)
[06:03:25] <yolo> let me install the deb, i am trying to find out if electron can share blink libraries with chrome browser at runtime, if it could, some memory can be saved
[06:03:59] *** Joins: ejjfunky (~ejjfunky2@125.164.18.221)
[06:04:52] <theskillwithin> doesn't electron compile to a binary?
[06:04:57] *** Joins: crashrep (~crashrep@user/crashrep)
[06:05:06] <yolo> it does
[06:05:44] <yolo> not sure if makefile or simliar can switch to dynamic link, then, electron apps are distributed all-in-one, probably blink must be bundled to avoid compatibility issues
[06:08:12] <systemfault> Even if it was possible, no sane electron app maintainer would do that...
[06:08:47] <systemfault> One of the strength of Electron is that you develop for a specific version of LibChromiumContent
[06:09:12] <systemfault> So you know that your app is going to run the same everywhere.
[06:09:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[06:12:15] *** Joins: src (~src@user/src)
[06:14:10] *** Joins: earthToAdam (~user@84.9.160.201)
[06:14:27] <yolo> make sense
[06:14:35] <madprops> why can't i use await inside a promise?
[06:14:50] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Ping timeout: 256 seconds)
[06:16:28] <systemfault> A promise is a value... it doesn't make sense.
[06:18:20] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[06:19:20] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:25:42] *** Joins: brentaarnold (~brentaarn@24.112.92.157)
[06:27:25] *** Joins: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au)
[06:27:48] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:28:18] *** Joins: silverdust (~silverdus@user/silverdust)
[06:31:37] <codebam> why does searchParams.entries() return nothing if keys are identical? https://pb.sbehan.ca/PiFQ
[06:32:30] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[06:33:05] <codebam> I'm trying to make the addSearchParams function overwrite existing keys instead of appending them twice
[06:34:37] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[06:36:12] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Ping timeout: 240 seconds)
[06:36:29] *** Quits: earthToAdam (~user@84.9.160.201) (Remote host closed the connection)
[06:40:16] *** Quits: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Quit: WeeChat 2.8)
[06:40:46] <codebam> is it standard for the API that's taking the search params to take the last one? or is that just duckduckgo?
[06:41:10] <codebam> is the browser sending them all, or just the last one?
[06:41:27] *** Joins: junebug (~junebug@2600:1700:3db0:2540:87dd:f613:9bae:7f3c)
[06:41:59] *** Joins: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[06:42:02] <mange> It looks like you can't use .entries() like that, because it's always empty for me. Can you just use searchParams.set to overwrite existing keys?
[06:42:20] <codebam> not if I want to pass an object
[06:42:36] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 256 seconds)
[06:44:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:44:37] <codebam> even if I add another search param .entries() is empty. is it just not implemented?
[06:44:49] <mange> addSearchParams=(url, params)=>{for(const key in params)url.searchParams.set(key, params[key]);return url;} ? That's without cloning the URL, but you can do that at the start pretty easily if you want to do that, too.
[06:45:05] <codebam> it should definitely return... something
[06:47:11] <mange> Actually, Array.from(url.searchParams.entries()) and [... url.searchParams.entries()] both work for me, it's just that the Firefox console doesn't print out the elements the way I'd expected.
[06:47:37] *** Joins: silverdust (~silverdus@user/silverdust)
[06:50:18] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:f04b:4c9:8faf:c75a)
[06:51:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:51:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:51:18] *** Joins: wroathe (~wroathe@user/wroathe)
[06:52:12] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[06:55:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:55:06] <codebam> how do I turn an Iterator<[string, string]> into a Record<string, string> ?
[06:56:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:57:45] <mange> Object.fromEntries?
[06:58:31] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:59:03] *** Joins: brentaarnold (~brentaarn@24.112.92.157)
[06:59:26] <codebam> oh, thank you
[06:59:36] *** Quits: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[06:59:42] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[07:00:08] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[07:00:53] *** Joins: crashrep (~crashrep@user/crashrep)
[07:01:12] *** Joins: Maxattax97 (~max@2603:900a:1501:a7ca::77a)
[07:02:10] *** Joins: juno__ (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:02:56] *** Quits: junebug (~junebug@2600:1700:3db0:2540:87dd:f613:9bae:7f3c) (Remote host closed the connection)
[07:03:18] <theskillwithin> whats the difference between iterator and a generator?
[07:03:24] <Rockwood> theskillwithin, o/
[07:03:27] *** juno__ is now known as junebug
[07:03:30] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 272 seconds)
[07:03:36] *** Joins: silverdust (~silverdus@user/silverdust)
[07:03:41] <theskillwithin> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators
[07:03:42] <Rockwood> finally Russia starts WW
[07:03:45] *** Joins: Praise (~Fat@user/praise)
[07:03:52] <theskillwithin> o/
[07:04:06] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[07:04:20] <systemfault> Is it Russia... or the US? :)
[07:05:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[07:05:44] <Rockwood> i think this fight could be longer
[07:05:50] <theskillwithin> ahh https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator
[07:06:48] <theskillwithin> https://youtu.be/LJNtfyq3TDE
[07:06:48] <skillbot> YouTube Title: The REAL Reason Putin is Invading Ukraine
[07:07:07] <systemfault> Because he doesn't want the US in his backyard?
[07:07:28] <systemfault> Oh, a serious video
[07:07:30] <systemfault> Watching.
[07:07:41] <codebam> why does the last line create an index for the key? https://pb.sbehan.ca/GjQb
[07:07:51] <codebam> I'm trying to overwrite keys
[07:08:21] <systemfault> codebam: Seriously man... use the Playground's "Link shortener" plugin, it's a lot less painful than what you're doing right now
[07:08:40] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[07:08:41] <codebam> where is it sorry? I looked for it yesterday for a couple minutes but couldn't find it
[07:08:49] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[07:09:05] <theskillwithin> systemfault ya he's good at this kinda stuff.  and he kinda is conflicted a bit and shows it from both sides,  so its probably a good one.  but at the end of the day idk
[07:09:50] <systemfault> codebam: You need to enable the plugin in the settings
[07:10:19] <systemfault> Above the right panel, there should be a "Plugins" tab
[07:10:39] <systemfault> Scroll down that tab and you'll see "Link shortener"
[07:10:57] <systemfault> Enable the plugin, refresh the page and you'll see a new tab called "Link shortener"
[07:10:58] <mange> You're calling .entries() on an array, which gives you the index paired with the item. ['a', 'b'].entries() => [[0, 'a'], [1, 'b']].
[07:10:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:10:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:10:58] *** Joins: wroathe (~wroathe@user/wroathe)
[07:11:01] <theskillwithin> Settings > Plugins > Link Shortener by gillchristian
[07:12:01] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[07:12:10] <codebam> https://tsplay.dev/mZrAem
[07:12:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:14:06] <codebam> oh I see okay
[07:16:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:17:09] <codebam> how do I convert [string, string][] => Record<string, string>?
[07:17:30] <systemfault> How many times are we supposed to tell you about Object.fromEntries? :(
[07:17:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:17:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:17:40] *** Joins: wroathe (~wroathe@user/wroathe)
[07:18:35] <codebam> that doesn't work
[07:18:49] <codebam> if I call .entries() on an array it gives me indexes
[07:19:02] <systemfault> o_O
[07:19:17] <systemfault> const result = Object.entries(myArrayOfEntries)
[07:19:39] <codebam> https://tsplay.dev/N7PrRm
[07:20:43] <systemfault> So, what's not working in that code?
[07:20:48] <codebam> oh I don't need to call .entries() on it
[07:21:04] *** Quits: p-i- (~Ohmu@mx-ll-183.89.30-105.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[07:21:15] <systemfault> On an array? Indeed.
[07:21:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:d907:b4bf:424b:db5f)
[07:22:00] <codebam> how do I convert it back to an array?
[07:22:10] <systemfault> Convert what?
[07:22:14] <codebam> the object
[07:22:19] <systemfault> Object.entries
[07:22:48] <mange> I just feel like you're way overthinking this. Is all this converting between arrays/objects really necessary? What about this? https://tsplay.dev/NrKA1m
[07:23:34] <codebam> https://tsplay.dev/N7PrRm
[07:23:41] <codebam> I can't call .entries() on it
[07:23:53] <systemfault> Holy shit batman... I said Object.enties
[07:23:54] <mange> Object.entries(yourObject)
[07:23:57] <systemfault> *entries even
[07:23:58] <codebam> ohh
[07:24:31] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 245 seconds)
[07:25:45] *** Joins: masoudd (~masoudd@user/masoudd)
[07:26:01] <jaawerth> why are you using a template string to concatenate the URLSearchParams with the URL? You can ust do url.searchParams = searchparams
[07:26:43] <theskillwithin> =  or +=  ?
[07:26:48] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[07:27:12] <codebam> yeah but I can pass it an object now and it'll overwrite existing params
[07:28:24] <codebam> thank you for the help
[07:29:28] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[07:29:44] <jaawerth> oh. Then you'd just do like searchParams.forEach((k, v) => url.searchParams.append(k, v))
[07:30:24] <jaawerth> (or .set instead of .append if you'd rather clobber params of the same key than have multiples)
[07:31:29] <madprops> is there async version of socket.io's fetchSockets ?
[07:31:35] <madprops> a sync*
[07:33:30] <jaawerth> I haven't used socket.io in years but if it isn't documented I kinda doubt it
[07:34:07] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Read error: Connection reset by peer)
[07:34:22] *** Joins: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br)
[07:34:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:34:42] *** Joins: han-solo (~hanish@user/han-solo)
[07:38:13] *** Joins: crashrep (~crashrep@user/crashrep)
[07:39:04] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[07:42:23] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 256 seconds)
[07:42:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[07:43:15] *** Joins: g2anj (~v@58.228.230.4)
[07:44:37] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 240 seconds)
[07:46:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:48:01] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[07:49:27] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (Quit: l8r)
[07:49:44] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[07:49:54] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (Remote host closed the connection)
[07:51:21] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[07:53:14] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (Client Quit)
[07:53:57] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[07:55:22] <han-solo> hi folks, https://bpa.st/WS3A # which version is better ?
[07:55:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:56:02] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (Client Quit)
[07:56:18] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[07:56:30] <theskillwithin> i vote v1
[07:56:45] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:56:46] <han-solo> thanks
[07:58:52] <gde33> https://jsfiddle.net/gaby_de_wilde/qjbh5903/
[07:59:02] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[07:59:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:59:59] <theskillwithin> hi gde33
[07:59:59] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::77a) (Read error: Connection reset by peer)
[08:01:59] <gde33> hi
[08:09:01] *** Quits: ejjfunky (~ejjfunky2@125.164.18.221) (Quit: Leaving)
[08:09:48] *** Quits: hackers (~self@user/hackers) (Remote host closed the connection)
[08:10:20] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:14:00] <gde33> n> loc="?foo=1&bar=2&baz=3";   obj = {};    for( elms of loc.slice(1).split('&') ) {   x=elms.split('=');   obj[x[0]] = x[1]   }; obj
[08:14:00] <jellobot> (okay) { foo: '1', bar: '2', baz: '3' }
[08:18:42] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:20:06] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:20:58] <gde33> n> loc="?foo=1&bar=2&baz=3";   obj = {};    for( elms of loc.slice(1).split('&') ) {   [x,y]=elms.split('=');   obj[x] = y   }; obj
[08:20:58] <jellobot> (okay) { foo: '1', bar: '2', baz: '3' }
[08:21:37] *** Quits: stagas (~stagas@2a02:587:c41b:6388:7105:73cc:d648:a8b) (Ping timeout: 240 seconds)
[08:22:26] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:23:01] <gde33> n> fish = {}; [fish.a,fish.b] = [2,3]; fish
[08:23:02] <jellobot> (okay) { a: 2, b: 3 }
[08:23:05] <gde33> wild!
[08:28:09] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:28:53] *** Joins: onosendi (~onosendi@user/onosendi)
[08:29:04] *** Joins: silverdust (~silverdus@user/silverdust)
[08:30:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[08:31:01] <onosendi> han-solo: https://gist.github.com/onosendi/f6cfbb597078787722cd32d4c1d6d2c3
[08:31:47] *** Quits: onosendi (~onosendi@user/onosendi) (Client Quit)
[08:34:12] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[08:34:57] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 240 seconds)
[08:35:18] *** Joins: Joel (~jjshoe@user/joel)
[08:39:01] *** Joins: crashrep (~crashrep@user/crashrep)
[08:43:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[08:44:28] *** vinleod is now known as vdamewood
[08:45:09] *** Joins: wroathe (~wroathe@user/wroathe)
[08:45:21] *** Quits: karabaja4 (~karabaja4@dh207-93-84.xnet.hr) (Remote host closed the connection)
[08:46:31] *** Joins: minto (~mintograd@47.201.5.61)
[08:47:24] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:49:35] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 256 seconds)
[08:49:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:55:29] <han-solo> `reduce` has a kind of thought overhead
[08:56:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:58:46] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[08:59:22] <systemfault> If you don't mind speed, you could use .flatMap
[08:59:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:00:26] <systemfault> const foo = cameras.reduce(camera => camera.isActive ? [{ ...camera, isOnline: false }] : [])
[09:01:18] <Maxdamantus> The `reduce` version looks incorrect anyway.
[09:01:39] <systemfault> Hmm, right
[09:01:48] <systemfault> acc is not used when it's true
[09:02:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:02:25] <mange> systemfault: I think you forgot to change reduce to flatMap. :P
[09:02:26] <Maxdamantus> Maybe they were meaning to do `acc.push(..);`, but then it's one of these abuses of `reduce` that I haven't had to argue about in a few years.
[09:02:34] <systemfault> Oh lol
[09:02:42] <systemfault> const foo = cameras.flatMap(camera => camera.isActive ? [{ ...camera, isOnline: false }] : [])
[09:02:47] <systemfault> My brain is fried.
[09:03:08] <Maxdamantus> Heh. My comments weren't for systemfault's example fwiw.
[09:03:11] *** Joins: substructure (~substruct@141.98.255.147)
[09:04:22] <mange> Yeah, generally I don't like to use reduce for sequence -> sequence transformations. It's possible, but filter/map/flatMap are much easier to understand.
[09:05:21] <systemfault> .reduce is really the one you use when there's no other way
[09:05:28] <Maxdamantus> I was wondering the other day if there's a typical library used for map/reduce/flatMap that just works on iterables without constructing intermediate arrays.
[09:05:33] <Maxdamantus> Doesn't seem like there is.
[09:05:47] <Maxdamantus> Basically, something like this: https://gist.github.com/Maxdamantus/d0d584a238d95ed419aa3a63f2810aa9
[09:06:21] <systemfault> Maxdamantus: I don't know of any
[09:07:20] <systemfault> The closest thing to that are "FRP libs"... but they don't use iterators
[09:07:46] <Maxdamantus> Right, since they're not intended to be used synchronously.
[09:08:11] <banana_> hey would you consider a test that renders and tests a dumb component a unit or integration test
[09:08:31] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[09:08:32] <Maxdamantus> banana_: "unit tests" in the strict sense are a waste of time.
[09:08:48] <Maxdamantus> banana_: so I'd call that just a normal test.
[09:09:00] <banana_> oh ok
[09:09:08] <banana_> I was calling them unit tests
[09:09:18] <Maxdamantus> I might informally refer to such tests as "unit tests" just because they're normally maintained in the same way as "unit tests".
[09:09:24] <banana_> because a dumb component has the same output for the same input
[09:09:27] <Maxdamantus> (I suspect most people would too)
[09:09:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:10:05] <banana_> I'm thinking some would call them integration tests because it renders dom?
[09:10:25] <banana_> the components do, but idk if that's really an integration test
[09:10:26] <Maxdamantus> Does it render to a real browser?
[09:10:30] <Maxdamantus> If not, it's not really an integration test.
[09:10:58] <Maxdamantus> "integration test" usually means everything is running as it would be on a live system.
[09:11:05] <banana_> yeah that's a good question, whatever this build has for tests
[09:11:12] <banana_> im actually not sure
[09:11:25] *** Joins: mexen (uid495612@user/mexen)
[09:11:50] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[09:12:07] *** Joins: onosendi (~onosendi@user/onosendi)
[09:13:23] <Maxdamantus> Anyway, does it really matter what you call it? It's just a test. Hopefully it's a useful test that actually saves time in the long run.
[09:13:54] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[09:14:40] <Maxdamantus> It should do that by testing various levels of your code, and by not relying too much on implementation details (since if it relies on implementation details, you're going to have to waste more time fixing the test when refactoring, instead of being able to use the test to check that your refactoring was correct).
[09:15:15] <banana_> yeah it runs the tests on a headless browser
[09:15:21] <onosendi> Maxattax: eh, you're right, oops. https://gist.github.com/onosendi/f6cfbb597078787722cd32d4c1d6d2c3
[09:15:35] <onosendi> Maxdamantus: ^
[09:16:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:16:28] <Maxdamantus> onosendi: yeah, I guess that works, though I'd avoid using that auto-array invocation of `Array.prototype.concat`.
[09:17:03] <Maxdamantus> (I'd also avoid using `reduce` like that in general, since it's really just a `filter`/`map` or `flatMap` operation)
[09:17:26] <banana_> Maxdamantus: ah ok makes sense, unless I really need an example. but if I had to guess... test that the output is correct, as in the general output is correct let's say text and not whether the text is in arbitrary <span>'s etc
[09:17:27] <onosendi> You'd `push`, or `[...acc, { foo: 'bar' }]`?
[09:17:55] <Maxdamantus> onosendi: I mean I would prefer `arr.concat([{}])` over `arr.concat({})`.
[09:18:07] <Maxdamantus> n> [].concat({});
[09:18:08] <jellobot> (okay) [ {} ]
[09:18:11] <onosendi> Gotcha.
[09:18:11] <Maxdamantus> n> [].concat([{}]);
[09:18:12] <jellobot> (okay) [ {} ]
[09:18:53] <Maxdamantus> Since if someone decides to use an array instead of a plain object, they have to do more than replace that expression.
[09:19:52] <banana_> Like <ThatNumber num={2} /> if <ThatNumber ... /> always needed to spit out "That <number>" so you would test against "That 2"
[09:20:18] <banana_> and not test against any html that would comprise that
[09:22:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[09:25:09] <Maxdamantus> banana_: I don't think the completeness of checking the test output should decide what sort of test it is.
[09:25:50] <Maxdamantus> banana_: unit tests, integration tests, system tests could have any amount of completeness in checking the test output.
[09:26:21] <Maxdamantus> (eg, it's often quite reasonable to have a test that just runs a function to ensure that it doesn't crash)
[09:26:35] <madprops> why do I still need to provide an empty callback function to node's fs functions using await ?
[09:27:11] <Maxdamantus> madprops: node's `fs` functions don't support `await` afaik (that is, they don't return promises).
[09:27:19] <madprops> I read they do
[09:27:28] <Maxdamantus> madprops: you can use `util.promisify` to make them return promises.
[09:28:20] <Maxdamantus> madprops: hm, apparently there's "fs/promises", but that should be a separate import.
[09:29:37] <madprops> no I think you don't even need that
[09:29:52] <madprops> im already using them with the simple fs import
[09:30:08] <Maxdamantus> Then you're very likely not using functions that return promises.
[09:30:50] <Maxdamantus> So they're not things that you should be awaiting on.
[09:31:10] <madprops> hmm
[09:31:29] <Maxdamantus> If you `await` on a non-promise, it will still look like a promise, because `await x;` is the same as `await Promise.resolve(x);`
[09:31:52] <Maxdamantus> Whoever invented the promises API didn't know how to design an API that would intentionally fail when misused.
[09:31:53] <madprops> i'll try util.promisify then
[09:32:29] <Maxdamantus> Well, you should probably actually use `require("fs/promises")` or `require("fs").promises`
[09:32:37] * Maxdamantus didn't realise that they existed.
[09:36:16] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[09:37:34] *** Joins: onosendi (~onosendi@user/onosendi)
[09:37:35] <madprops> seems i need to also import the normal fs for sync functions
[09:38:10] *** Quits: onosendi (~onosendi@user/onosendi) (Client Quit)
[09:38:41] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152)
[09:39:46] <banana_> wow Im confused af now
[09:40:00] <banana_> unit tests test a unit of code though right
[09:40:06] <banana_> that's why they're unit tests
[09:40:24] <banana_> so isn't a component like a isolated unit of code?
[09:40:59] <banana_> like a function is a block of code with input and output, and testing a pure function would be considered a unit test
[09:42:01] <Maxdamantus> How isolated it is though? What if calling that pure function involves calling every function in the library?
[09:42:21] *** Quits: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Quit: WeeChat 2.8)
[09:43:48] <mange> The word "unit" is ill-defined in the term "unit test". I wouldn't worry too much about precise definitions.
[09:43:57] <Maxdamantus> Indeed.
[09:45:25] <Maxdamantus> And I wouldn't encourage aiming to make tests "unit" tests except in any sense other than that they should be able to run without external software and they should be reasonably fast to run.
[09:45:39] <Maxdamantus> s/except //
[09:46:41] <banana_> do you mean like dependencies for "External software"
[09:47:00] <banana_> like you render a react component dont you need the library to render it?
[09:47:05] <Maxdamantus> No, I mean software which needs to be run separately from the runtime environment of your language.
[09:47:07] <banana_> idk just using react as an example
[09:47:23] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) ()
[09:47:35] <banana_> oh ok
[09:47:37] <Maxdamantus> eg, if you're running tests in node, the tests shouldn't need to start a web browser, or connect to some remote service.
[09:47:50] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:48:09] <Maxdamantus> If it starts a web browser or connects to a remote service, it's more of an integration test, which should be able to be invoked separately.
[09:48:21] <banana_> ah ok so I was wrong huh
[09:48:40] *** Joins: substructure63 (~substruct@141.98.255.147)
[09:49:19] <banana_> dam the pride
[09:49:48] <banana_> ah ok
[09:50:17] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Ping timeout: 240 seconds)
[09:50:23] <banana_> thanks
[09:50:33] *** Quits: ckdCreations (~ckdCreati@147.55.133.135) (Read error: Connection reset by peer)
[09:50:47] <Maxdamantus> There are people who advocate for making strict unit tests where things are mocked out where they could very easily have just used the real implementation of something.
[09:50:52] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[09:51:02] <Maxdamantus> I'm just saying that I don't advocate for that.
[09:51:44] <banana_> wait what
[09:51:54] <Maxdamantus> If you can use the real implementation without needing to run external software (web browser, external service, database, etc), then use the real implementation. It will be a better test that will likely save time.
[09:52:01] <banana_> you're saying you dont advocate mocking stuff out
[09:52:18] <Maxdamantus> Yes. I advocate for not mocking where feasible.
[09:52:43] *** Quits: substructure (~substruct@141.98.255.147) (Ping timeout: 256 seconds)
[09:52:45] <banana_> interesting
[09:52:49] <Maxdamantus> "(not mocking) where feasible", to be clearer.
[09:53:13] <Maxdamantus> If you mock everything, you just make tests that make it harder to refactor code.
[09:53:18] <banana_> yeah even though technically it's "integrated" because your test is testing the other packages code too
[09:53:23] <Maxdamantus> eg, if you decide to swap out a depencency, you have to change your tests.
[09:53:48] <Maxdamantus> but your tests should really be there so that you *can* swap out a dependency and be reasonably confident that the code still works with that new dependency.
[09:54:22] <banana_> interesting
[09:54:37] <substructure63> How do people feel about the security of their dependency closures? Right now there isn't a way with npm to confirm the source code plus build tools result in a given package. I think there is a way to improve this situation. Let me know if there is a better place to ask this question.
[09:55:33] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:56:11] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[09:56:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:59:54] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[09:59:57] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:00:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:00:41] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[10:01:05] *** Joins: brentaarnold (~brentaarn@24.112.92.157)
[10:01:24] *** Quits: xsznix95 (~xsznix@104.14.31.126) (Ping timeout: 240 seconds)
[10:04:31] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 245 seconds)
[10:04:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[10:08:29] *** Joins: crashrep (~crashrep@user/crashrep)
[10:12:52] <theskillwithin> substructure63 dependency closures?
[10:12:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[10:13:16] *** Joins: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[10:17:54] <substructure63> The dependency closure is the set of all package versions that a package depends upon recursively. Any build tools of my dependencies are also in my dependency closure.
[10:23:42] <banana_> so transient dependencies
[10:24:24] <banana_> security of transient dependencies?
[10:25:09] *** Joins: han-solo (~hanish@user/han-solo)
[10:25:11] <banana_> or is it transitive?
[10:25:18] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[10:25:19] <banana_> I think I meant transitive dependency
[10:25:49] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[10:26:15] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[10:27:13] *** Joins: jazzy (~jaziz@user/jaziz)
[10:28:48] *** Joins: xsznix95 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[10:30:03] <banana_> idk if this helps you https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities
[10:30:39] <banana_> "npm audit checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies."
[10:31:34] *** Joins: silverdust (~silverdus@user/silverdust)
[10:33:05] *** Quits: psy1 (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Quit: WeeChat 2.8)
[10:33:40] <substructure63> The transitive dependencies in addition to the direct dependencies is what I'm aiming to discuss.
[10:35:46] <substructure63> Unfortunately npm audit cannot validate if the package version tarball was built from the source code plus build tools. This is a security issue they have not addressed.
[10:36:12] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[10:37:59] <banana_> if you stay on I'm sure someone can answer that. no idea a bit over my head
[10:40:19] <substructure63> Sounds good to me. Thanks.
[10:45:32] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:45:53] <theskillwithin> banana_ you mean over your stem?
[10:46:11] <banana_> lol
[10:47:21] <banana_> if someone knows the answer please link a medium article or whatever related article
[10:48:14] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[10:51:39] *** Joins: ejjfunky (~ejjfunky@125.164.22.188)
[10:51:39] <ThePendulum> Russia's gone full on https://www.bbc.com/news/live/world-europe-60454795
[10:51:47] <KevinX> They aren't asking for support. They want to chat about dep artifact auditing. I personally have nothing to say now about it as I'm signing off, but you're probably better off asking mid day USA
[10:53:09] *** Quits: ejjfunky (~ejjfunky@125.164.22.188) (Remote host closed the connection)
[10:53:11] <KevinX> ThePendulum that's wild. I really hate this sort of stuff
[10:53:34] *** Joins: ejjfunky (~ejjfunky@125.164.21.7)
[10:54:01] <ThePendulum> it is a bit of a buzz kill isn't it
[10:54:24] <KevinX> i hadn't realized it escalated this far
[10:54:45] <systemfault> It's probably the best timing for Russia to do that...
[10:55:11] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:55:17] <substructure63> This isn't a support channel exclusively right? I'll try asking tomorrow then.
[10:55:31] <systemfault> substructure63: No, it's a "anything about JS" channel
[10:55:43] <substructure63> perfect
[10:55:44] <systemfault> It just happens that a lot are from the US
[10:55:52] <systemfault> And now it's 2:25 on the east coast.
[10:56:23] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:56:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:56:40] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[10:56:48] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:57:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:59:54] *** Joins: blahboybaz (~blahboyba@c-67-161-98-51.hsd1.wa.comcast.net)
[11:00:12] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[11:01:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:05:41] <blahboybaz> I was here asking a question a couple nights ago and people were trying to help but I really didn't get it. I just didn't want to piss people off by being so ignoranat and I left it off. I'm doing challenges in a code camp to learn. Now, a couple challenges later, I'm smacked in the face with the same thing I didn't understand the first time - plus more. I can't begin to imagine trying to explain
[11:05:47] <blahboybaz> my question, which has multiple parts connected, using text here in the channel. I know you all have better things to do and if you can't or don't want I certainly understand - but I mad a small video trying to show the code and explain my points of confusion. I've read the documentation (sometimes several times very carefully) - MDN docs, other articles.. and it is not helping. I don't know what
[11:05:53] <blahboybaz> I"m looking for in them and end up more frustrated than when I came. If anyone is willing to take a look I would appreciate it. I'm not going to try to put that into text (it just wouldn't work).
[11:05:57] <blahboybaz> https://www.youtube.com/watch?v=kkWCaPyJ3r0
[11:05:57] <skillbot> YouTube Title: Questions About Javascript, the reduce() method and other methods with a similar feature
[11:06:17] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Ping timeout: 240 seconds)
[11:08:20] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:10:49] <systemfault> Where do you want to start? Is there any way you could put your test case on a jsfiddle or similar?
[11:11:59] <systemfault> The "init" parameter can be whatever you want, it's not an array (but can be)
[11:12:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[11:12:59] <systemfault> blahboybaz: Hey man
[11:13:16] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[11:13:38] <blahboybaz> systemfault: I guess I sound a bit worked up in that - my bad
[11:13:56] <blahboybaz> what's up man
[11:13:59] <blahboybaz> :)
[11:14:26] <systemfault> Happens... do you get reduce at the simplest level? Like... if you have an array const x = [1,2,3,4]; do you understand how you can use reduce to sum the total of the numbers in that array?
[11:14:35] <Neuromancer> blahboybaz you should check out destructuring as well
[11:14:44] <silly> n> [77].reduce((p,c,i) => console.log(p,c,i), 99)
[11:14:45] <jellobot> (okay) 99 77 0
[11:15:15] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:15:19] <silly> i remember pci as previous, current, index
[11:15:20] <ThePendulum> if you understood before you probably no longer do after that example
[11:15:36] <systemfault> n> const x = [1,2,3,4]; x.reduce((accumulator, currentValue) => accumulator + currentValue, 0)
[11:15:37] <jellobot> (okay) 10
[11:15:43] <silly> n> [77].reduce((p,c,i) => console.log(p,c,i))
[11:15:44] <jellobot> (okay) 77
[11:15:47] <systemfault> 0 is the initial value of the accumulator
[11:16:52] <silly> oh, and you're confused with destructuring too  :(
[11:17:06] <systemfault> So, here, the callback function will be called for each element of the array, whatever you _return_ from the callback will be available next time the callback will be called (next element) as the "accumulator" variable.
[11:17:15] <silly> i feel like it's best to start with es5, and then move the latter up
[11:17:39] <systemfault> silly: Destructuring... aliasing... tons of new features all at the same time, no wonder it's painfil
[11:17:42] <systemfault> *painful
[11:17:55] <silly> absolutely
[11:18:24] <silly> it's actually what i'm experiencing with c++ too
[11:18:37] <silly> too much (╯°□°)╯︵ ┻━┻
[11:19:07] <systemfault> blahboybaz: Anyway man, we're here to help.
[11:19:13] <blahboybaz> I'm gonna try to catch up in the conversation here - it might take me a few min
[11:19:20] <silly> !mdn destructuring @blahboybaz
[11:19:22] <jellobot> blahboybaz, destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. https://mdn.io/destructuring
[11:19:23] <blahboybaz> systemfault: thank you
[11:19:30] <blahboybaz> I'm stressed about it
[11:19:55] *** Joins: audio (~audio@user/audio)
[11:19:58] <blahboybaz> yes yes the square brackets instead of dot notation
[11:19:59] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[11:20:03] <systemfault> One thing at a time... otherwise, your usage of the word "fuck" will just keep increasing :)
[11:20:05] <silly> this is about { Director: director, SomethingElse: { omg: whatNow }}
[11:20:49] <theskillwithin> reduce took me the longest to learn fo sure out of all the array methods
[11:20:53] <blueagain> that's destructuring with aliases.
[11:21:41] <blueagain> It is a bit confusing here though that class case is used for objects.
[11:21:45] <blahboybaz> silly: cpp was my first (well c then c++)
[11:21:49] <blahboybaz> just saying
[11:22:18] <silly> you already know c/c++ well?
[11:22:19] <blahboybaz> maybe there's more to destructuring than I realized
[11:23:02] <systemfault> blahboybaz: const point = {x: 10, y: 20}; const {x} = point; // x is 10.    do you get that
[11:23:04] <blahboybaz> silly its been almost 15 years since I messed with it but recall some of the major features it had
[11:23:26] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:23:36] <blueagain> though I *always* see destructuring as sugar. if you don't understand it, change the code to not use so you first understand the underlying code, then add destructuring to 'prettify' it.
[11:23:54] <blueagain> not use it*
[11:23:54] <blahboybaz> systemfault: please be patient.. when I see someting said to me I often have to reallly think about it for a couple min
[11:24:48] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[11:25:12] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:25:49] <blahboybaz> systemfault: The way you're statement reads I would think that x = {x: 10, y: 20}   in the end. If x = point then it eqeals all of point not part of it
[11:27:20] <systemfault> const point = {x: 10, y: 20}; const {x} = point; : In this example, the {} is destructuring, it picks the point.x and creates a variable called x with it, the same as if you did : const point = {x: 10, y: 20}; const x = point.x;
[11:28:13] <blahboybaz> Before this I've only seen destructuring wtih [] square brackets (at least that I can recally anyway)
[11:28:24] <systemfault> You can also do that with arrays, yes
[11:28:57] <blahboybaz> Talking like this (having this convo like we are) I can think of ways to test the things I don't understand using code in a codepad
[11:29:05] <systemfault> const twoValues = [2, 4]; const [a, b] = toValues;  // a is 2 and b is 4
[11:29:28] <systemfault> const twoValues = [2, 4]; const [a, b] = twoValues;  // a is 2 and b is 4
[11:29:29] <blahboybaz> sometimes I just need to start getting engaged in a conversation about it - stimulates my brain to think
[11:29:30] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[11:30:02] <systemfault> Destructuring with objects is a bit more complicated because objects have keys
[11:30:37] <systemfault> And sometimes, you cannot simply destructure a variable called x because there's already one declared
[11:30:42] <blahboybaz> The destructuring they taught us so far was related to passing a variable name in as the identifier ( so that dot notation can not be used with that )
[11:30:59] <systemfault> const point = {x: 10, y: 20}; const x = 50;  const {x} = point;   <---- This won't work because x is already declared before
[11:31:24] <blahboybaz> I see
[11:31:33] <systemfault> But the destructuring feature offers a way to "rename/alias"
[11:31:57] <systemfault> const point = {x: 10, y: 20}; const x = 50;  const {x: myX } = point;   // OK! myX refers to point.x and is equal to 10
[11:32:15] <systemfault> You can see an example of aliasing in your reduce function
[11:32:22] <blahboybaz> What I don't get in that example is how the connections are being formed between the object property names and the object values in the object being passed into the callback in reduce
[11:32:40] *** Joins: teut (~teut@122.161.83.81)
[11:32:46] <systemfault> With reduce, the callback is called once per array element
[11:32:51] <blahboybaz> how each of the things in that object are getting tied to what activity
[11:32:52] <systemfault> So, in your case, you have movies
[11:32:56] <teut> document.querySelectorAll('#otp > *[id]')       can someone tell what this query is selecting?
[11:33:05] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[11:33:05] <blahboybaz> ok
[11:33:06] <teut> *[id]  , what's that?
[11:33:20] <systemfault> teut: Attribute selector, in this case... any element having an "id"
[11:33:39] <blahboybaz> ok
[11:34:04] <systemfault> '#otp > *[id]' means: Select every element having an "id" attribute that is a direct descendant of the element with id #otp
[11:34:13] <teut> [attribute="value"]   I knew about this syntax
[11:34:20] <systemfault> blahboybaz: so... your callback
[11:34:31] <silly> '#otp > *[id]' and '#otp > [id]' are equal
[11:34:32] <teut> didnt know that one though
[11:34:35] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[11:34:40] <blahboybaz> you can use wildcards in js code?
[11:34:46] <silly> yes
[11:34:56] <blahboybaz> oh wow
[11:35:01] <blahboybaz> I know nothing
[11:35:06] <blahboybaz> this is insane
[11:35:12] <teut> thanks systemfault
[11:35:34] <teut> https://dpaste.org/whuV
[11:35:37] <systemfault> it could be replaced with .reduce((data, movie) => { const {Director: director,  imdbRating: rating } = movie;  /*more code here*/ },  initValue)
[11:35:42] <silly> i can't thing of a good use case tho
[11:35:45] <teut> how to convert this code to react?
[11:35:52] <silly> except for, "match everything"
[11:36:06] <teut> i m using next js
[11:36:56] <systemfault> blahboybaz: it could be replaced with .reduce((data, movie) => { const {Director: director,  imdbRating: rating } = movie;  /*more code here*/ },  initValue)
[11:36:59] <ThePendulum> blahboybaz: those are css selectors, not really js syntax
[11:37:08] <blahboybaz> ok
[11:37:16] <systemfault> blahboybaz: It's the same kind of destructuring we've used with "point" earlier
[11:37:49] <systemfault> It renames movie.Director to director... and imdbRating to rating
[11:38:24] <systemfault> const {Director: director,  imdbRating: rating } = movie;  // This can be simplified to: const director = movie.Director; const rating = movie.imdbRating;
[11:38:30] <silly> oh, blahboybaz, i haven't read your question well enough, it was "wildcards in css" not js
[11:38:41] <blahboybaz> systemfault: No offense but I think I'm going to have to do some kind of debugging type activities to make the code show me what it's doing (I can't explain it but I see the vision of what I need to do to find out what I need to know). Maybe I can return in a few and be on a better foundation to talk?
[11:38:59] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:39:13] <systemfault> blahboybaz: For sure! If I'm sleeping then I'm sure someone else will be willing to help
[11:39:13] <theskillwithin> blahboybaz https://javascript30.com/
[11:39:20] <systemfault> blahboybaz: Good luck! :)
[11:39:31] <silly> !mdn destructuring
[11:39:32] <jellobot> silly, destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. https://mdn.io/destructuring
[11:39:37] <silly> this has many examples
[11:39:41] <blahboybaz> Your the best man. Thanks for talking with me
[11:39:50] <silly> best to give it an hour
[11:39:56] *** Joins: pycode (~pycode3@2001:b07:5d28:551:31d7:a35c:af98:b5d7)
[11:40:12] <silly> and come back with questions
[11:40:12] <blahboybaz> silly: I'll take that (link). thanks
[11:40:16] <Neuromancer> i'd say start with debugging if you aren't frustrated anymore, things will click, at least that's what i do
[11:40:18] <blahboybaz> for sure
[11:40:57] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[11:41:05] <blahboybaz> Well talking here made me think of how to even do that (debuggin). How and what variables to print to the console so I can peek in and see what it's going
[11:41:08] <blahboybaz> doing
[11:41:48] *** Quits: sickdyd (~sickd@FL1-118-109-70-167.tky.mesh.ad.jp) (Ping timeout: 240 seconds)
[11:42:36] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:43:29] *** Joins: l__q (~modinfo@user/modinfo)
[11:44:44] <l__q> Do you guys know how to add a custom rule to ESLint to warn on "FIXME", "TODO" or "XXX"?
[11:45:20] <l__q> If FIXME found in source, then warn
[11:45:26] <blueagain> l__q: https://eslint.org/docs/rules/no-warning-comments
[11:45:53] <blueagain> l__q: you can toy with "terms".
[11:47:17] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:47:58] <madprops> can npm show a summary of the available/new versions of my packages declared in package.json?
[11:48:19] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[11:48:42] <blueagain> madprops: https://www.npmjs.com/package/npm-check-updates
[11:48:48] <theskillwithin> ncu
[11:49:11] <systemfault> No matter what someone here says about that... I believe ncu should be built-in in NPM
[11:49:13] <blueagain> `ncu` shows, `ncu -u` updates everything
[11:49:20] <systemfault> The same way it is in yarn...
[11:49:42] <blueagain> systemfault: I agree. In fact I think npm should *warn* you whenever you use any of its commands when packages are oudated.
[11:49:59] <blahboybaz> Is the 'count' identifier on line 145 of my codepaste: https://onecompiler.com/javascript/3xu4sgnw7  the "currentIndex" parameter coming from the reduce method?  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#parameters
[11:50:22] <systemfault> Your codepaste doesn't work for me... I get a 401
[11:51:01] <blahboybaz> oh my god this happened before
[11:51:34] <blueagain> by the way, there is no *meaningful* difference between a minor and a patch change in semver, right?
[11:51:46] <l__q> blueagain: https://pastebin.com/8fiCQUTv dosent warn :(
[11:52:51] <blahboybaz> Not as good but here on a different platform (the line numbers appear to be the same so the question is still accurate): https://pastebin.com/adxiwrbN
[11:53:13] <teut> whats the simplest wat to get [1, 2, 3, 4, ...n] in js?
[11:53:14] <systemfault> So, the question is for currentIndex?
[11:53:46] <systemfault> teut: No nice way unfortunately.... the easiest way is: Array.from({ length: n }, (_, i) => i + 1)
[11:53:57] <blahboybaz> The onecompiler past may work now (I think)
[11:53:59] <systemfault> n> Array.from({ length: 10 }, (_, i) => i + 1)
[11:54:00] <jellobot> (okay) [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
[11:54:15] <systemfault> blahboybaz: It does
[11:54:15] <blueagain> l__q: I'm no expert on eslint syntax, but isn't that supposed to be ["error", { "terms": ... } ] ?
[11:54:18] <teut> why dont they give use a range ?
[11:54:27] <blueagain> l__q: error / warn
[11:54:35] <teut> even c++ did that too now
[11:54:49] <systemfault> teut: Eventually, we'll get some iterator functions to do that properly...
[11:55:04] <teut> nice
[11:55:06] <systemfault> teut: Because, let's be honest, having to allocate an array to iterate on numbers is beyond stupid
[11:55:39] <systemfault> If you want to iterate from 1 to 1M... then you allocate an array of 1M elements? Sounds dumb, right?!
[11:55:41] <teut> yep, you just need the stream
[11:55:52] *** Joins: peteyboy1 (~peteyboy1@95.169.226.66)
[11:56:03] <teut> ya, iterators and streams are the requirement
[11:56:35] <teut> but classic for loop is that iteration in js/c++ which already does that
[11:56:46] <teut> but you cant write for loop in jsx
[11:56:55] <teut> you can only use map
[11:57:04] <blahboybaz> systemfault: So then "sum" (in the paste like 145) is "currentValue" of the reduce method?
[11:57:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:58:10] <blahboybaz> In that case it seems that the parameters of the reduce method are being put into an objec on that line - or another way to put it the contents of that object are the reduce parameters
[11:58:14] <blueagain> teut: what streams are you talking about?
[11:58:23] <systemfault> blahboybaz: { sum: 0, count: 0 } is "data" in the reduce callback
[11:58:30] <teut> in java they call iterators as stream
[11:58:55] <l__q> blueagain: no, array dont work on eslint
[11:58:58] <blueagain> teut: oh. Because I was like, js doesn't have streams, unless you means the new Streams API
[11:58:59] <blahboybaz> systemfault: So data is being split into more than one thing?
[11:59:18] <blueagain> l__q: does your eslint config work otherwise (the other rules)?
[11:59:23] <systemfault> blahboybaz: No, it's always the same object that is modified at line 137/138
[11:59:50] <teut> yes I meant that only
[12:00:03] <systemfault> blahboybaz: I meant 138/139
[12:00:21] <l__q> blueagain: i try with array, but its a syntax error, my config: https://pastebin.com/8fiCQUTv
[12:01:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:01:23] <blahboybaz> Data - which would correspond to the accumulator of reduce() - must contain all 4 of the parameters of reduce() then - the parameters we are told we can use in our callback
[12:01:31] <systemfault> l__q: I'm not that familiar with eslint but that looks invalid, I'd expect something like "no-warning-comments": ["warn", { terms: ["todo", "fixme", "xxx"], location: "anywhere" } ]
[12:01:33] <l__q> blueagain: i want to this since 2 years, but I always quit, becose dosent work form me, but now i want to work
[12:02:17] *** Quits: iffraff (~quassel@2605:a601:aae0:4a00:9ec0:5086:227a:ae1d) (Ping timeout: 240 seconds)
[12:03:11] *** Joins: stagas (~stagas@2a02:587:c41b:6388:b8f6:eccb:ec9b:2747)
[12:03:53] <blahboybaz> The reducer is the entire callback function ("user-supplied reducer") in the mdn description
[12:04:18] <systemfault> myArray.reduce(reducer, initialValue)
[12:04:33] <l__q> systemfault: omg it works! https://pastebin.com/qv39b4qT
[12:04:35] <blahboybaz> I've had a fundamental misunderstanding of what is what in that thing
[12:04:46] <blahboybaz> systemfault: yep
[12:04:47] <blahboybaz> ok
[12:04:50] <l__q> systemfault: Thank you ,3
[12:04:52] <systemfault> Reducer is a function that accepts: (accumulator, currentValue, currentIndex, myArray)
[12:05:02] <l__q> systemfault: Thank you <3*
[12:05:06] <systemfault> l__q: of course, you can replace "warn" with "error" :)
[12:05:11] <systemfault> l__q: You're welcome
[12:06:12] <l__q> systemfault: I know, but warn is that was I want! Im very happy with your help! Thanks a lot! You my hero!
[12:06:30] <systemfault> <3
[12:06:35] <l__q> <3
[12:06:37] <l__q> :D
[12:06:45] <l__q> Love on IRC xD
[12:07:04] <l__q> But, I thank you very much
[12:08:17] *** Joins: Junxter (~Junxter@222.95.164.193)
[12:08:48] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Read error: Connection reset by peer)
[12:09:18] *** Joins: crashrep (~crashrep@user/crashrep)
[12:09:29] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:10:27] <theskillwithin> <3 systemfault
[12:11:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:12:43] *** Joins: Senz (whoa@ool-ad0244e9.dyn.optonline.net)
[12:13:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[12:16:18] *** Quits: flughafen (~flughafen@p579693c5.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[12:16:27] <madprops> what's a good alternative to node-fetch ?
[12:16:39] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[12:16:44] <madprops> it moving to es modules messed things up
[12:17:19] <silly> native fetch
[12:17:39] <silly> until them, use node-fetch@2 if you want cjm
[12:18:13] <systemfault> madprops: Apparently, until the next release of Node... undici
[12:18:13] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:18:17] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 272 seconds)
[12:18:55] <systemfault> If you install undici and use the "fetch" function, it will be trivial to move to the built-in node version later on
[12:18:59] <silly> it's what's the native fetch base on right?
[12:19:01] <l__q> systemfaultL thank you! <#
[12:19:07] <systemfault> silly: Yep
[12:19:09] <l__q> <3*+
[12:19:10] <silly> i must have missed its rise
[12:19:14] <systemfault> silly: For node I mean
[12:19:29] <l__q> https://skorotkiewicz.github.io/note/xxx-eslint/
[12:19:29] <systemfault> Well, it's an official nodejs.org project...
[12:19:41] <silly> oic
[12:19:51] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:b4ac:6a8f:4bfc:720a)
[12:19:52] <systemfault> https://github.com/nodejs/undici
[12:19:59] <l__q> this is my personal note,
[12:20:38] <l__q> comments & kudos are made by me <3 and are opensource
[12:20:58] <silly> l__q, all good, but please keep your pants on
[12:21:15] <l__q> ok XD
[12:21:28] <l__q> Why guys are so good in js/
[12:21:43] <blahboybaz> This thing is really wierd but I'm getting it
[12:22:21] <l__q> you help me now in my problem since 2y in 1min! wtf?!
[12:22:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[12:23:16] <l__q> im always want warning in vscode, like on geamy (linux 10years ago)
[12:23:34] <systemfault> :)
[12:24:17] <l__q> im hetero, but im love you systemfault, ale you poland?
[12:24:18] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:24:32] <l__q> you nick say my somethinh
[12:24:39] <systemfault> I'm just a french-canadian
[12:24:53] <l__q> french? not poland?
[12:24:54] <systemfault> And it's nearly 4:00 :/
[12:24:59] <systemfault> Nah
[12:25:07] <systemfault> Maybe you're confusing me with someone else
[12:25:15] <l__q> hmmm, than you have a clone in poland
[12:25:20] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[12:25:25] <systemfault> Poor him...
[12:25:33] <l__q> on #hackerspace-pl
[12:25:35] <systemfault> Being as f'ed up as I am :)
[12:25:37] <madprops> so there's no native fetch on node?
[12:25:40] <madprops> yet
[12:25:42] <systemfault> madprops: "soon"
[12:25:45] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:26:06] <l__q> i wunder, how first got this nick :D
[12:26:06] <systemfault> It's already merged I believe
[12:26:49] <systemfault> madprops: https://github.com/nodejs/node/commit/6ec225392675c92b102d3caad02ee3a157c9d1b7
[12:26:58] <l__q> omg, sorry for my english, im germany man, but born in poland. im 3 language man.
[12:27:27] <l__q> sorry :(
[12:27:46] <systemfault> No worries, english is my second language, I can relate.
[12:28:09] <l__q> systemfault: what is you secend language?
[12:28:20] <systemfault> English is my second, french is my first.
[12:28:25] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[12:28:35] <l__q> systemfault: what is you first/mother language?*
[12:28:39] <systemfault> French
[12:28:43] <systemfault> Le français!
[12:28:45] <l__q> Ooo ool
[12:28:49] <l__q> cool
[12:29:00] <l__q> im learning now spain
[12:29:13] <l__q> i was in paris 8 times xD
[12:29:13] <systemfault> It's great :)
[12:29:30] <l__q> but i dost speeek frech
[12:30:02] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[12:30:30] <l__q> but cool
[12:30:58] <l__q> we both are europa
[12:31:02] <systemfault> English is unavoidable in North America
[12:31:14] <systemfault> I'm Canadian, not from France
[12:31:20] <l__q> yes
[12:31:43] <systemfault> Canada is north of the USA, not in Europe... that's what I meant
[12:32:01] <l__q> my native language is poland, but I spek english and Germany
[12:32:07] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:33:19] <l__q> ejj, are we on #javascript now?
[12:33:27] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[12:33:41] <l__q> on need to work :( now
[12:33:57] <l__q> sry
[12:34:44] *** Quits: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br) (Ping timeout: 272 seconds)
[12:34:52] *** Quits: Junxter (~Junxter@222.95.164.193) (Quit: Leaving)
[12:34:59] <theskillwithin> no need to be sry =]
[12:35:00] <systemfault> Have a great work day!
[12:35:09] *** Joins: Junxter (~Junxter@222.95.164.193)
[12:37:12] *** Joins: fef (~thedawn@user/thedawn)
[12:37:37] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[12:37:40] <blahboybaz> How is this: " { Director: director, imdbRating: rating } " - on line 132 - renaming? It is renaming the properties in the array being operated on? In a way that mutates the array or no? And how?
[12:39:39] <silly> const { Director } =... would create a variable named `Director`
[12:39:56] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[12:40:01] <silly> const { Director: somethingelse } would create an alias instead
[12:40:11] <silly> or rename the created variable
[12:40:32] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[12:40:35] <silly> or create a differently called variable alltogether
[12:41:12] <silly> i don't like to call it renaming
[12:42:23] <silly> either way, it never does anything mutative to the input
[12:43:48] <blahboybaz> silly: Ok. I didn't know there were aliases in js
[12:44:54] <silly> i'm not sure if i'm allowed to call it alias
[12:45:14] <silly> in mdn they reefer to "renaming"
[12:45:50] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[12:46:01] <blahboybaz> silly: ok
[12:47:06] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:47:27] <blahboybaz> running " console.log({ Director: director, imdbRating: rating }); " - line 134 - seems to show that "Director" is the Director property found in each element of the array being operated on - whereas "director" is the value of the Director property in each element of the array being operated on
[12:47:32] <blahboybaz> does that sound right?
[12:47:53] *** Joins: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk)
[12:48:44] <han-solo> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#assigning_to_new_variable_names
[12:49:17] <blahboybaz> bro, that doesn't tell me what I'm trying to find out
[12:49:37] <blahboybaz> I'm trying to confirm what I'm seeing (what I think I'm seeing)
[12:49:46] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:50:06] <silly> you are creating an whole new object here:  console.log({ Director: director, imdbRating: rating });
[12:50:35] *** ChanServ sets mode: +o litharge
[12:50:35] *** litharge sets mode: -bo $a:scream litharge
[12:50:43] <silly> n> conole.log({ a: 1, b: 2 });
[12:50:44] <jellobot> (fail) ReferenceError: conole is not defined
[12:50:49] <silly> n> console.log({ a: 1, b: 2 });
[12:50:50] <jellobot> (okay) { a: 1, b: 2 }
[12:51:16] <blahboybaz> silly: Ok, is that any different than the same thing two lines up where the reduce function is defined? In it parameters?
[12:52:04] <silly> can you paste the link again?
[12:52:11] <blahboybaz> yeah
[12:52:51] <blahboybaz> If it works --> https://onecompiler.com/javascript/3xu4sgnw7  or  https://pastebin.com/adxiwrbN
[12:53:15] <silly> !repaste
[12:53:16] <jellobot> silly, I don't know the paste service at "https://onecompiler.com/javascript/3xu4sgnw7". ljharb, ping!
[12:53:31] <silly> !repaste https://pastebin.com/adxiwrbN
[12:53:32] <jellobot> silly, Failed to create gist. Possibly a rate limit
[12:53:37] <silly> !repaste
[12:53:38] <jellobot> silly, Failed to create gist. Possibly a rate limit
[12:53:39] <silly> pff
[12:53:46] <han-solo> https://pastebin.com/raw/adxiwrbN
[12:53:52] <silly> !repaste
[12:53:53] <jellobot> silly, Failed to create gist. Possibly a rate limit
[12:54:16] <han-solo> blahboybaz: the console.log one and the one in reduce is different
[12:54:46] <jaawerth> silly: lol here I'll be a bot for you ;-) http://ix.io/3QAY/js
[12:54:47] <blahboybaz> han-solo: Becuase one is in a function parameter and the other is not?
[12:55:11] <han-solo> in the console.log, you are creating a new object, in the .reduce one, the destructing and new variable assigning is happening
[12:55:30] <silly> ty jaawerth
[12:55:40] <jaawerth> also why are you listing Christopher Nolan movies leaving out the best one ;_;
[12:55:50] <silly> you could do better with the highlighting tho
[12:55:59] <blahboybaz> han-solo: So there's no way for me to print what each of those things actually are (each item inside the destructuring in the paramater)
[12:56:08] <blahboybaz> is that what I end up with?
[12:56:09] <jaawerth> haha true but ix is the easiest one to paste to without having to associate with an ccount
[12:56:16] <jaawerth> or ads
[12:56:53] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[12:57:04] <blahboybaz> { Director: director, imdbRating: rating }  as a parameter must correspond to "currentItem" then
[12:57:32] <han-solo> blahboybaz: you can just `.reduce((data, thing) => { console.log({data, thing}); if ( thing.director === '...') ...}` // if you want to see the entire `thing`
[12:57:38] <blahboybaz> I meant "currentValue"
[12:58:00] <silly> currentValue is thing here
[12:58:00] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:58:46] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:65dc:ab5d:8da2:d8b4) (Ping timeout: 260 seconds)
[12:58:51] <han-solo> s/directory/Director/
[12:58:58] <han-solo> er
[12:59:00] <han-solo> anyway
[12:59:31] <silly> he's right, tho, if destructuring confuses you, edit it away, use (p, c, i, a) => or function(p, c, i, a) {
[12:59:43] <blahboybaz> I have to learn
[12:59:48] <blahboybaz> there is not way to avoid it
[12:59:52] <silly> and name the params something you make sense of
[13:00:08] <theskillwithin> learning it with reduce is probably the hardest possible way
[13:00:17] <blueagain> destructuring is just sugar in the end.
[13:00:24] <silly> once you got it working as you want, you can simplify with destructuring
[13:00:39] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:01:17] <blahboybaz> I'm just trying to use console.log() to make it explicitly show me each and every excruciating detail - explicitly - that is going on. To actually "see" the very value of each and ever individual thing and to "link" <-- expecially important - to link each value to what is actually correlating to
[13:01:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:02:11] <silly> blahboybaz, if you want to go into each and every excruciating detail, use the debugger, set breakpoints
[13:02:15] <blahboybaz> It's not about solving a challenge anymore. I can paste that very code into the challenge and it will pass (I did not write that it is the code camp's example). I'm trying to learn from it
[13:02:38] <blahboybaz> well theres another massive learning curve that I have never even touched
[13:02:42] <silly> and DON'T use destructuring, as it hides input
[13:03:09] <theskillwithin> ehh
[13:03:13] <blahboybaz> I'll try to study on it more
[13:03:14] <blahboybaz> :)
[13:03:59] <silly> blahboybaz, you don't have to do the destructuring in your function definition, you can do it in the function body as well
[13:05:17] <silly> function(input) { const { someInfo } = input; console.log(input, someInfo);}
[13:05:19] *** Joins: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br)
[13:05:41] <silly> this will show you both, the whole input parameter and the destructured value
[13:05:43] <blahboybaz> If it can be done in the fucntion body then how would  console.log({ Director: director, imdbRating: rating });  be creating a new object rather than destructuring? Because it is a second occurance of { Director: director, imdbRating: rating } ?
[13:06:02] <jaawerth> it doesn't have to hide input, one can use rest params. it's no good to overusee it but I do like it in the function signature for doing named paramss
[13:06:06] <silly> function({ someInfo }) { console.log(someInfo);}
[13:06:30] <jaawerth> but it gets gnarly beyond a low level complexity so I agree wrt doing it in the function body when the alternative is an unreadable function signature
[13:06:35] *** Parts: Arisc (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br) ()
[13:06:43] <silly> this shows only someInfo, as the real input object is kind of hidden away and the debugger won't help you to get a look inside
[13:07:01] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:07:10] <jaawerth> you can do function foo({someInfo, ...otherInfo}) { } though
[13:07:38] <silly> oh, yes ofcourse ...rest
[13:08:02] *** Quits: Junxter (~Junxter@222.95.164.193) (Remote host closed the connection)
[13:08:19] *** Joins: Junxter (~Junxter@222.95.164.193)
[13:08:23] <blueagain> jaawerth: oh, cool, I didn't know you can destructure rest
[13:08:50] <blahboybaz> So when people are giving me these examples it is actually increasin the number of identifiere (names) in my head. My problem to begin with (the task I'm trying to accomplish) is reducing identifiers (in my code sample) by connecting them with what place they hold in the underlying function
[13:08:58] <silly> n> const boss = 'blashboybaz'; const { Director: director } = { Director: boss }; director @blahboybaz
[13:08:59] <jellobot> blahboybaz, 'blashboybaz'
[13:09:09] <blahboybaz> It's too confusing to try and follow the examples of something I don't understand
[13:09:13] *** Joins: nomic (~nomic@185.198.243.229)
[13:09:39] <jaawerth> blueagain: yep, same for array destructuring
[13:09:39] <silly> there's destructuring on the left and object creation on the right in `const { Director: director } = { Director: boss };`
[13:10:14] *** Joins: arisco (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br)
[13:10:15] <blueagain> jaawerth: so destructuring is 1:1 mirrored to structuring (creating objects)
[13:10:40] <silly> depending on the surroundings of  `{ Director: director, imdbRating: rating }` it can be both, destructuring and object creation
[13:11:00] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:11:08] <blueagain> Yeah, that's what I meant, it's context-dependent.
[13:11:19] <theskillwithin> I think for the visual learners https://beginnerjavascript.com/
[13:11:34] <blahboybaz> I'm really so sorry but I'm feeling really overwhelmed now. I came not understanding one piece of code and now I'm seeing many many more pieces of code aimed at making the first one make sense. I have to take a break I think but I really really appreciate everything everyone has said and I'll come back to it when I'm a litte
[13:11:38] <jaawerth> blahboybaz: fwiw, if you want to inspect things to that level of detail, you might find it more convenient to drop in some break points with the devtools debugger so you can step through and have it pause in places so you can do your console.log's directly
[13:12:27] <blahboybaz> jaawerth: I will try that but for me I will have to spread that out over a couple days since I have no expereince in any of the things
[13:12:35] <blahboybaz> every single thing is new
[13:12:45] <jaawerth> sure, I understand. there's good tutorials on it though and it might make things easier for you since it's more interactive
[13:13:01] <blahboybaz> I know what a lot of things are but have never used them beyond just looking at it
[13:13:05] <blahboybaz> ty
[13:15:43] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:16:12] <jaawerth> blahboybaz: a bookmmark for later - there's a lot on here but for getting your feet wet you can focus on the "lines of code breakpoints" section https://developer.chrome.com/docs/devtools/javascript/breakpoints/ - there's lots of tutorials on this stuff if you search aroudn but I find google's chrome ones are actually decent in giving the step-by-step
[13:16:25] *** Joins: crashrep (~crashrep@user/crashrep)
[13:17:25] <theskillwithin> jaawerth idk about the focus on breakpoints, I thought they were mostly trying to understand syntax
[13:17:28] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[13:17:51] <jaawerth> theskillwithin: well they mentioned how they were console.log'ing everything to get a clear picture of every step of the process
[13:17:52] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[13:18:02] <jaawerth> which would be super annoying to do if you have to rerun you code and change up the console.log every time
[13:18:13] <jaawerth> so being able to use the debugger/inspector would IMO be a better option
[13:18:23] <theskillwithin> ahh ic
[13:18:47] <jaawerth> everyone has their own way too learn stuff. personally I like to hammer things into a REPL
[13:19:04] <blahboybaz> jaawerth: cool
[13:19:24] <theskillwithin> im kind of a slow learner, it took me a long time to get where I needed to be
[13:20:00] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Read error: Connection reset by peer)
[13:20:00] <blahboybaz> theskillwithin: how did you know?
[13:20:26] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:20:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[13:21:12] <theskillwithin> blahboybaz that im a slow learner?
[13:22:05] *** shayr_ is now known as shayr
[13:22:58] <jaawerth> for me it's similarly all about taking whatever I'm reading about and simultaneously tinkering with it, hammering it, trying to break it and seing HOW it breaks, etc. partly because i just enjoy doing that in general, probably
[13:23:31] <silly> i like to read from new sources, if one doesn't explain it in a way that i can understand, i just continue to find new authors
[13:23:42] <theskillwithin> also gotta be resourceful
[13:24:34] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:24:36] <jaawerth> oh yeah. when I first learned javascript I had that giant bible-sized rhino book, a smaller one that was like.. not eloquent, elegant something? and I bounced around various sections of both. though I think things really sped up when I joined this channel and started trying to help people solve problems even i I didn't know how
[13:24:49] <jaawerth> that was.. .well it was less than a decode ago lol
[13:24:55] * jaawerth oldman
[13:25:15] <blueagain> old just means your entropy state is higher
[13:25:20] <blueagain> :)
[13:25:23] <jaawerth> nice
[13:25:32] <theskillwithin> thats one of the secrets, helping others, also helps you grow as well
[13:26:07] <blahboybaz> theskillwithin: That I (me) question my ability to do the only thing I've ever loved
[13:26:20] <blueagain> my math prof at uni used to say there are three phases to learning: learning, using and explaining it to others.
[13:26:47] <jaawerth> for me there is the 4th hidden step of destroying
[13:27:13] *** Joins: bluehoney_ (~bluehoney@gateway/vpn/pia/bluehoney)
[13:30:08] <jaawerth> blahboybaz: it'll get easier, I swear! when this stuff is new you have to bend your brain towars thinking the way programming languages want you to think but over time you start recognizing variations on a theme and have to actively think about it less and less. it can def be frustrating to get over that first hump though
[13:31:08] *** Joins: crashrep (~crashrep@user/crashrep)
[13:32:26] *** Quits: pycode (~pycode3@2001:b07:5d28:551:31d7:a35c:af98:b5d7) (Ping timeout: 245 seconds)
[13:33:33] *** Joins: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney)
[13:33:47] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2)
[13:34:02] *** Joins: voltage_ (~voltage@user/voltage)
[13:35:11] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:d907:b4bf:424b:db5f) (Ping timeout: 256 seconds)
[13:35:11] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 250 seconds)
[13:35:13] *** Joins: silverdust (~silverdus@user/silverdust)
[13:36:11] *** Quits: bluehoney_ (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 272 seconds)
[13:38:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[13:40:31] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[13:42:56] *** Joins: dingdreher (~dingdrehe@mob-194-230-147-113.cgn.sunrise.net)
[13:45:01] *** Quits: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[13:45:47] *** Joins: src_ (~src@user/src)
[13:48:40] *** Quits: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 3.4)
[13:49:18] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[13:51:45] <stenno> if you are a passionate programmer, it will happen automatically that you are willing to learn new stuff
[13:51:58] *** Joins: silverdust (~silverdus@user/silverdust)
[13:52:25] <stenno> most of the stuff i am applying at work, i learned in my free time on irc (mostly)
[13:52:59] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[13:53:51] <stenno> imo its an interesting question if advancing your skills shoudl count as work time (esp. when you are working as a fully employed person at a corporation)
[13:54:40] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[13:56:36] <blueagain> stenno: that should definitely be work time imho.
[13:57:14] <stenno> it seems obvious that it should be, but it kinda isn't imo
[13:57:17] <theskillwithin> on the flip side, I do think a full time job is the best way to advance your skills.   if your using something everyday all day your going to grow a lot faster
[13:57:37] <stenno> maybe your employee just employs you to _apply_ your knowledge
[13:57:42] <blueagain> stenno: where I work, we get half a day per work week for skill advancement.
[13:57:52] <stenno> oh wow thats awesome
[13:58:07] <stenno> but that wouldn't be enough for me lol
[13:58:14] <blueagain> It isn't for me either :)
[13:58:14] <stenno> but its really good that your employer already considers that
[13:58:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:58:33] *** Quits: l__q (~modinfo@user/modinfo) (Quit: interet cut off, write me memo! it will be send to my mail!)
[13:58:35] *** Joins: clamiax (~clamiax@net-93-147-242-222.cust.vodafonedsl.it)
[13:58:38] <silly> doesn't that happen all the time?
[13:58:46] *** Joins: rendar (~rendar@user/rendar)
[13:59:02] <stenno> what happens?
[13:59:04] <silly> like every time you have to look at documentation?
[13:59:15] <stenno> eeh
[13:59:18] <silly> skill advancement
[13:59:21] <stenno> there is a certain gray area, sure
[13:59:33] <rendar> i have a <span> and i add an event listener keydown on it, but it seems the callback gets never called, why? do the span need to get focus somehow first?
[13:59:40] <stenno> but if i look at the documentation, i don't neccessarily learn that stuff, i just know where to look it up :P
[13:59:56] <stenno> i am talking about new programming practises for example, best practises, patterns and antipatterns
[14:00:32] *** Joins: cheater (~Username@user/cheater)
[14:01:31] <stenno> most of the time my question is not 'how can i do something in programming language x/y or framework x/y', but 'what is the proper way of doing something'
[14:02:13] <stenno> i guess its what you could call 'research'
[14:02:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:03:15] <stenno> and the research is the actual skill advancement
[14:03:49] <rendar> any help?
[14:04:02] <silly> ic, well nice if you're paid for that. but there's always been the good, the bad and the ugly employers
[14:04:28] <teresko> naah, stenno, "research" is what happens when you write a post on StackOverflow starting with "Can someone give me code for .."
[14:04:33] <stenno> like if my boss asks me 'can we do this and that' my answer will almost always be 'yes, BUT i have to look how to do it properly, or if it is sensible in the first place', and basically then i do my research and give a proper reply like 'i would not do it as it is bad for the integrity of the software' or something
[14:04:35] *** Quits: dingdreher (~dingdrehe@mob-194-230-147-113.cgn.sunrise.net) (Read error: Connection reset by peer)
[14:04:48] <silly> in any other field it's normal to do all that during work hours
[14:05:41] <silly> it's only IT where it feels like you're expected to know everything
[14:05:51] <stenno> yeah its really special
[14:05:56] <blueagain> something I don't get through scrum. either the task is trivial, in this case it should be best automated/abstracted, or it's not trivial and then it's hard to estimate
[14:05:58] <stenno> rendar: yes you need focus
[14:06:09] <rendar> stenno, how can i set focus for that span?
[14:06:18] <stenno> rendar: focus on the element or a child of that element
[14:06:29] <stenno> https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
[14:07:22] <theskillwithin> idk, thats why we make good salaries.  cuz we are engineers.  we have to keep up
[14:07:42] <stenno> we make good salaries because we make our bosses money, mostly
[14:07:59] <theskillwithin> yep
[14:08:13] <rendar> stenno, nothing, also calling focus() it doesn't get events :(
[14:08:21] <silly> well, that's not always true
[14:09:26] <silly> rendar, add a tabindex attribute to your span element
[14:09:31] <stenno> also 'flexible' working hours
[14:09:44] <rendar> silly, how that would help?
[14:09:59] <stenno> is span even focusable?
[14:10:13] <silly> stenno, it will be if you add tabindex
[14:10:13] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[14:10:19] <stenno> If you call HTMLElement.focus() from a mousedown event handler, you must call event.preventDefault() to keep the focus from leaving the HTMLElement
[14:10:40] <theskillwithin> idk unlimited PTO is kinda awesome
[14:10:43] <stenno> silly: right
[14:11:20] <silly> focused elements get ugly css outline tho, you might want to fix that too
[14:11:49] <rendar> i call  HTMLElement.focus() from the js script itself, the one run at the start
[14:12:00] <theskillwithin> designer needs to make something where focused elements aren't ugly
[14:12:21] <rendar> this is what i have now https://bpa.st/72OQ
[14:13:06] *** Quits: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[14:13:41] <silly> rendar, you can also attach your keydown handler to document and do more work inside
[14:13:48] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:14:13] <rendar> i just want callback called when keydown event is triggered
[14:14:21] <silly> i'm not sure if focusing alone will help
[14:14:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[14:14:56] <rendar> :(
[14:14:58] <rendar> how to do that?
[14:15:22] <stenno> in my current app i just did that, set keydown to document
[14:15:27] <silly> document.addEventListener('keydown', handler)
[14:15:32] <stenno> its a bit nasty still
[14:15:41] <DPA> Also, don't capitalize onkeydown
[14:15:42] <rendar> silly, but it will be triggered ALWAYS!
[14:16:05] <rendar> DPA, why?
[14:16:10] <silly> rendar, DPA pointed out a crucial error in your code
[14:16:28] <silly> js is case sensitive
[14:16:58] <rendar> unbeliveable! DPA fixed the problem
[14:16:59] <rendar> thanks man
[14:17:02] <silly> onKeydown onClick are valid react props, but not valid in js
[14:17:22] <rendar> silly, but i used onKeydown on my own callback
[14:17:58] <silly> use the console to find valid props of your elements
[14:18:19] <theskillwithin> console.dir
[14:18:27] <silly> in plain js all on* properties are entirely lowercase
[14:19:04] <rendar> ok
[14:19:29] <stenno> always use addEventListener thoguh
[14:19:57] <stenno> also have fun with handling different browsers
[14:20:26] <undefined_bob> like ie6
[14:20:32] <silly> rendar, do you always know what `this` refers to in your function TerminalLine?
[14:20:40] <rendar> yep
[14:20:42] <silly> do you create instances of it with new?
[14:20:47] <theskillwithin> if you addEventListener for click, also addEventListener for touchstart so its sure to work on touch devices
[14:20:53] <rendar> silly, yes
[14:21:06] <stenno> undefined_bob: like chrome vs. firefox
[14:21:44] <rendar> wait, if i create an instance of TerminalLine with new, key handler don't work anymore
[14:21:44] <rendar> :\
[14:22:06] <silly> rendar, to avoid confusion, i'd rename this.onKeydown to this.keydownHandler
[14:22:14] <suss> does anyone know how i was not able to pass jest testing on assertions? https://pastebin.com/WyruehHT, I think that nothing is incorrect.
[14:22:20] <rendar> silly, ok
[14:22:33] <suss> thx
[14:23:22] <rendar> still, if i have `tl = new TerminalLine(null);` key handling doesn't work any more, if i remove the `new` it works again
[14:23:24] <rendar> how come?
[14:25:40] <magga> i have a li element and it has a time children. what function do i need to use with vanilla js to get a data-attribute from that time child?
[14:25:52] <magga> when clicking the li-element
[14:27:19] <silly> rendar, i'm not sure what's happening there... but this.spanLeft in line 59 is definitely not the same as in line 18, as the function from line 28 has it's own `this`
[14:28:13] <silly> and the one from line 28 should refer to the event target where the function is attached to as an event handler
[14:29:23] <rendar> silly, let's see
[14:29:32] <silly> anyway, without instantiating with new, there's no point to use `this` in TerminalLine at all
[14:29:53] <DPA> rendar: Without new, this refers to window in the non-strict mode of js. so this.onkeydown reffers to window.onkeydown, which is a valid event handler property. With new, this refers to a newly created object instead,
[14:29:53] <DPA> to which an onkeydown property has no special meaning.
[14:30:06] *** Joins: fef (~thedawn@user/thedawn)
[14:31:04] <DPA> You may be interested in custom elements: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements
[14:31:31] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:32:32] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[14:33:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[14:35:57] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[14:36:14] <rendar> thanks
[14:39:11] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:40:47] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[14:46:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[14:46:51] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[14:48:10] *** Joins: silverdust (~silverdus@user/silverdust)
[14:49:08] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:50:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[14:51:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[14:52:21] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:54:05] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[14:54:16] *** Joins: Naan (~Naan@user/naan)
[14:54:45] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[14:55:20] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 272 seconds)
[14:56:35] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:56:38] *** Quits: arisco (~ckmptnml@189-31-251-104.user3p.brasiltelecom.net.br) (Read error: Connection reset by peer)
[14:56:54] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[14:59:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:01:33] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[15:02:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:02:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:04:21] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:07:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[15:08:55] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[15:10:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:15:21] *** Joins: silverdust (~silverdus@user/silverdust)
[15:15:27] <rendar> https://bpa.st/WH5A -- i have this, i have followed all advices but still can't get keydown events
[15:15:29] <rendar> -_-
[15:15:35] <rendar> how is this possible? why its so fragile?
[15:16:14] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[15:16:51] <theskillwithin> https://keycode.info/
[15:18:02] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:19:41] *** Quits: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 256 seconds)
[15:20:22] *** Joins: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney)
[15:21:09] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 256 seconds)
[15:21:57] *** Quits: substructure63 (~substruct@141.98.255.147) (Ping timeout: 256 seconds)
[15:22:20] <theskillwithin> https://github.com/wesbos/keycodes/blob/gh-pages/scripts.js#L328
[15:26:06] *** Joins: D4mned (~D1mned@212.101.253.100)
[15:27:02] *** Joins: voltage (voltage@user/voltage)
[15:27:04] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:27:23] *** Quits: voltage_ (~voltage@user/voltage) (Killed (NickServ (GHOST command used by voltage!voltage@user/voltage)))
[15:27:27] *** voltage is now known as voltage_
[15:34:12] <rendar> anyone can help?
[15:37:03] <silly> rendar, check document.activeElement to see if your div has focus
[15:38:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[15:38:15] <silly> https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
[15:38:20] <rendar> ok i solved it
[15:38:47] <rendar> adding tabindex="0" to the div fixed the problem, but now everytime the div is focused, i will get an annoying white frame around the div
[15:38:51] <rendar> how can i suppress it?
[15:39:00] <silly> css outline
[15:39:56] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[15:40:13] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:40:24] <rendar> i guess outline-width: 0px;
[15:40:33] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:41:30] <silly> i have outline: none
[15:41:49] <silly> but dunno if that's a proper choice... just wfm
[15:42:22] <rendar> i see thanks
[15:43:15] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:44:06] *** Joins: stenno (~stenno@user/stenno)
[15:44:12] *** Joins: maroloccio (~marolocci@pousada3ja.mma.com.br)
[15:47:00] *** Quits: blahboybaz (~blahboyba@c-67-161-98-51.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[15:47:36] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[15:48:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[15:50:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:51:55] *** Joins: pmercado (~pmercado@186.107.40.57)
[15:55:53] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7)
[15:56:41] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2) (Remote host closed the connection)
[15:57:06] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[15:57:54] *** Joins: p-i- (~Ohmu@183.89.30.105)
[15:58:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[15:59:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:01:05] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:03:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:03:52] *** Joins: Guest1453 (~blahboyba@c-67-161-98-51.hsd1.wa.comcast.net)
[16:07:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[16:08:12] *** Quits: Guest1453 (~blahboyba@c-67-161-98-51.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[16:08:22] *** Joins: trevors (~trevors@user/trevors)
[16:09:58] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:11:43] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[16:14:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[16:16:12] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[16:16:19] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:21:54] *** Joins: silverdust (~silverdus@user/silverdust)
[16:25:30] *** Joins: daoudr (~daoudr@2a02:1210:52f9:b500:5043:184:7f47:92c1)
[16:26:36] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[16:26:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[16:31:22] *** Joins: pulse (~pulse@user/pulse)
[16:31:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:36:45] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Ping timeout: 256 seconds)
[16:37:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[16:38:58] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:40:17] *** Joins: Haxxa (~Haxxa@203-123-96-204.ip4.superloop.com)
[16:45:13] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[16:45:15] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[16:48:42] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Ping timeout: 272 seconds)
[16:49:35] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:53:00] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[16:53:02] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 260 seconds)
[16:53:17] <FlorianBad> Is there a way to get the clipboard text without making the whole thing async?
[16:53:48] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[16:54:02] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:54:23] *** Joins: dfinr (~dfinr@user/dfinr)
[16:56:13] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[16:57:16] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:00:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:01:24] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[17:01:42] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[17:03:07] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[17:03:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:08:47] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[17:17:15] <jaawerth> nope, the browser provides async APIs for it. In most non-extension contexts you can only access it in response to a user action anyway, though, so you're probably already going to be in callback-land
[17:17:49] <jaawerth> what's giving you issues with the async access?
[17:22:22] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:26:40] *** Joins: trevors (~trevors@user/trevors)
[17:29:07] *** Quits: nomic (~nomic@185.198.243.229) (Quit: Leaving)
[17:29:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:32:37] <FlorianBad> jaawerth: ok. It annoys me because I already coded a whole thing that doesn't involve async, and I was just trying to plug that readText in there without redesigning the whole thing
[17:33:42] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 256 seconds)
[17:34:20] *** Joins: kakashiAL (~kakashi@41.143.6.180)
[17:34:32] *** Quits: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 240 seconds)
[17:35:15] <jaawerth> yeah, part of the reason is it will probably generate a prompt for user permissions so it kinda has to be async. well plus it's io, which is nearly always async. but one heads up, there are still some pretty heavy per-browser restrictions no *reading* the clipboard - iirc firefox won't even let you outside of a webextension
[17:35:33] <jaawerth> MDN should have the deets
[17:36:20] *** Joins: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney)
[17:41:59] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[17:42:11] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[17:45:57] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[17:48:41] <FlorianBad> ok, so no regrets ;)
[17:48:48] <burakcank> Hi all, I am trying to enable foundation-abide on a dynamically added input form in a vue component binded via v-html. I tried a lot, can't seem to figure it out. Leaving an example here if you know the solution. https://codepen.io/burakcankk/pen/vYWaJeo?editors=1010
[17:49:07] <FlorianBad> jaawerth: I already decided to give up on it, people will just do some copy/paste in 500ms
[17:49:21] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:50:13] <jaawerth> yeah like, for copy it's nice but for paste, unless they're using your app/site regularly, it'd probably be more work for a user to click yes to the clipboard permission than to just do the paste themselves :)
[17:50:42] <jaawerth> I don't even like giving clipboard access to things, lol
[17:50:49] <jaawerth> who knows what could be in there?!
[17:53:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[17:54:34] *** Quits: bluehoney__ (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 272 seconds)
[17:55:45] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:56:49] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[17:58:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:27] *** Joins: wroathe (~wroathe@user/wroathe)
[18:00:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:00:57] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[18:03:13] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:04:02] <blueagain> I published debris 0.2 to npm, if anyone wants to give it a look. Added support for snapshots.
[18:04:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:07:59] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[18:09:16] *** Joins: Sal` (~Sal@151.15.126.65)
[18:10:38] <Sal`> does anyone know of a parser for cobol pics? I mean for something like: 9(6) or S9(8)V9(2)
[18:11:00] *** Quits: realies (~realies@user/realies) (Ping timeout: 240 seconds)
[18:11:21] <Sal`> that is are input masks 999999 oe -99999999.99
[18:12:15] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:13:07] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:14:20] *** Joins: Naan` (~Naan@user/naan)
[18:14:33] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[18:16:22] *** Joins: realies (~realies@user/realies)
[18:17:22] *** Quits: kakashiAL (~kakashi@41.143.6.180) (Ping timeout: 272 seconds)
[18:17:37] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[18:18:41] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:23:34] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[18:24:02] *** Joins: thelounge0690 (b9c34702@67.205.143.82)
[18:27:30] *** Quits: Sal` (~Sal@151.15.126.65) (Quit: Leaving)
[18:27:47] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7)
[18:27:51] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[18:27:58] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Read error: Connection reset by peer)
[18:30:15] <ljharb> davve: btw you’re not authed so nobody can see what you say
[18:31:08] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7) (Ping timeout: 252 seconds)
[18:32:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:28] <jaawerth> huh. I swear I used to be able to see unauthed people talking without having to actually op myself
[18:33:38] *** Parts: thelounge0690 (b9c34702@67.205.143.82) ()
[18:34:22] *** Joins: Rockwood (~Rocky@user/rocky)
[18:36:39] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[18:38:01] *** Joins: silverdust (~silverdus@user/silverdust)
[18:40:20] <ljharb> jaawerth: pretty sure nope
[18:40:33] <ljharb> jaawerth: altho in this case it was hours ago
[18:40:59] <jaawerth> I never stay opped though so if that were the case i'd never have seen it at all
[18:42:53] *** Joins: kill (~killown@user/killown)
[18:43:52] *** Quits: daoudr (~daoudr@2a02:1210:52f9:b500:5043:184:7f47:92c1) (Quit: Leaving)
[18:47:00] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[18:47:08] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[18:49:24] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[18:50:51] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:51:49] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[18:55:26] *** Quits: itsonlybinary (~iob@itsonlybinary.com) (Quit: ttfn)
[18:56:52] *** Joins: itsonlybinary (~iob@itsonlybinary.com)
[18:58:06] *** Quits: itsonlybinary (~iob@itsonlybinary.com) (Remote host closed the connection)
[18:58:24] *** Joins: itsonlybinary (~iob@itsonlybinary.com)
[18:58:32] *** Joins: jumpcutking (uid459573@id-459573.uxbridge.irccloud.com)
[19:00:43] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:00:47] *** Quits: ejjfunky (~ejjfunky@125.164.21.7) (Read error: Connection reset by peer)
[19:01:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:01:46] *** Quits: viva (~viva@2601:2c7:8900:169:7c8e:903f:59e1:51c8) (Remote host closed the connection)
[19:04:35] *** Quits: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c) (Quit: WeeChat 3.4)
[19:04:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:05:20] <gde33> there is no way to delete ellements with for..of?
[19:05:51] <gde33> except ofc if it is an array of arrays and you have a reference
[19:06:34] *** Joins: hoppity (~hoppity@user/hoppity)
[19:06:37] <gde33> I guess it is back to for(;;) for me lol
[19:06:46] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[19:06:56] <hoppity> ljharb: I'm sorry I did not respond yesterday, my IRC client did not notify me.
[19:08:04] <hoppity> ljharb: It seems to me that the use of transpilers, bundlers, modules, config files etc etc unnecessarily increase the complexity and the dependencies (and therefore potential breaking points) for an app.
[19:08:49] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:09:54] <FightingFalcon> https://www.defensehere.com/en/
[19:10:10] <FightingFalcon> Can anyone please visit this site and click the green left or right arrow in the main slider?
[19:10:21] <FightingFalcon> Uncaught TypeError: Cannot read properties of null (reading 'match')
[19:10:32] <FightingFalcon> it gives this error but the code is not even in the site
[19:10:35] <buu> hoppity: Like all abstractions, it's a trade off
[19:10:36] <blueagain> gde33: why don't you use filter?
[19:10:58] <gde33> blueagain: I dont want to loop over all the ellements more than once
[19:11:12] <gde33> and I want to not use a function
[19:11:42] <blueagain> gde33: why not?
[19:11:48] <hoppity> buu: yes but when an abstraction increased the complexity to such an extent to threaten the long term survival of your app I think it starts to make so much sense
[19:12:00] <gde33> blueagain: its dramatically slower
[19:12:15] <hoppity> buu: Object oriented programming is also an abstraction but has very few downsides.
[19:12:51] <blueagain> gde33: what is the size of your array such that the performance of the filter operation is relevant?
[19:13:00] <hoppity> buu: and sorry I meant to say: "it starts to NOT make so much sense" imho
[19:13:05] <KevinX> If you make a change to add a caching mechanism to cache rest endpoints in localstorage, would you consider that a performance improvement or something else?
[19:13:05] <gde33> blueagain: yeah
[19:13:15] <KevinX> OOP does have downsides, plenty
[19:13:17] <blueagain> gde33: that wasn't a binary question...
[19:13:34] <hoppity> KevinX: like?
[19:13:40] <gde33> blueagain: 500-1000 objects
[19:13:54] <gde33> the speed difference is 1:3
[19:14:22] <KevinX> OOP issues are well documented, and there's been a recent trend to move away from oop paradigm
[19:14:34] <blueagain> gde33: that should still be a matter of milliseconds, is that really relevant?
[19:14:40] <gde33> I could use forEach but then I would have to put the lmiit some spot at 150-300
[19:15:04] <gde33> blueagain: some computers are quite crappy
[19:15:22] <blueagain> I have cases when I go over 100-200 and filter (or any other array operation) is *never* the bottleneck
[19:16:01] <jaawerth> gde33: on what engine and device are you observing such a major speed difference with so few items? and when you say 1:3 what is the scale we're talking about here?
[19:16:13] <ljharb> hoppity: it does increase those, but very necessarily
[19:16:27] <gde33> I started out with a nice functional parser with nice ellegant functions but it calls 20 of those for each array element
[19:16:29] <ljharb> hoppity: more build time complexity results in far less runtime complexity, and that’s what actually matters
[19:16:31] <jaawerth> because that is highly irregular unless we're talking differences in, like, hundredths of maybe tenths of a second
[19:16:58] <gde33> 20 000 function calls is apparently a big deal
[19:17:19] <ljharb> what does the function do?
[19:17:36] <gde33> search and display products
[19:17:37] <ljharb> 20,000 function calls where the function is ()=>{} certainly isn’t a big deal
[19:17:53] <jaawerth> I don't see how forEach vs a loop would involve 20k function calls though
[19:17:55] <ljharb> ok but you realize that “search” is usually an O(n) operation?
[19:17:58] <jaawerth> like you'er iterating either way
[19:18:10] <blueagain> gde33: isn't that better handled by a real database?
[19:18:11] <ljharb> so if you’re performing 20k searches then obv it’s slow
[19:18:11] <gde33> foreach is just one function called every itteration
[19:18:16] <ljharb> and yes, use a real database
[19:18:30] <ljharb> you shouldn’t be doing searches in js
[19:18:31] <hoppity> ljharb: fair enough, thank you
[19:18:41] <jaawerth> or if you're gonna do it locally, I would definitely apply some of the same kinds of data structures a db would use
[19:18:46] <blueagain> just sounds like you're using the wrong tool for the job
[19:18:50] <gde33> ljharb: nah, it just has to decide things like how display the image, is the product in the basket or sold out etc
[19:18:53] <jaawerth> like, at least a btree or something
[19:19:04] <hoppity> KevinX: it took you longer to write that sentence than to simply enumerate a couple of downsides to OOP but ok
[19:19:38] <KevinX> no need to be rude, especially if you don't know how fast I can type
[19:19:43] <ljharb> gde33: then it should be fast even if called 100k times
[19:19:44] <gde33> blueagain: I dont trust databases or dynamic pages
[19:19:50] <blueagain> oh come on
[19:19:54] <jaawerth> also v8 at least optimized forEach to the point of near-parity with raw loops a while back. not sure about FF and safari but in chrome I would not expect a difference
[19:20:00] <ljharb> hoppity: and yes, OOP sucks
[19:20:01] <jaawerth> at least, not one that's going to be a bottleneck
[19:20:06] <ljharb> !classes @ hoppity
[19:20:07] <jellobot> hoppity, Class hierarchies? Don't do that! http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html (See also, !inheritance)
[19:20:12] <gde33> blueagain: I'm that old :P
[19:20:20] <ljharb> hoppity: always prefer composition over inheritance
[19:20:43] <ljharb> gde33: age doesn’t correlate to wrongness
[19:20:45] <blueagain> I see nothing per se wrong with databases, you can trust them the say way you trust either software
[19:20:49] <ljharb> ^
[19:20:50] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:20:51] *** Joins: kakashiAL (~kakashi@41.143.6.180)
[19:20:56] <blueagain> by looking at the individual product and assessing its fitness
[19:21:05] <gde33> ljharb: howmany databases have you seen that turned to crap?
[19:21:21] <buu> I trust postgres more than I trust almost any other piece of software I have to rely on
[19:21:26] <ljharb> gde33: pretty close to zero. How many software programs? Pretty close to all of them
[19:21:36] <hoppity> KevinX: I wasn't rude, just pointing out that you did not mention any of the many downsides of OOP and that it would have been a shorter answer to do so
[19:21:38] <ljharb> gde33: it’s simply no contest, objectively
[19:21:38] <gde33> that is >0
[19:21:56] <ljharb> gde33: nothing is going to be zero. That’s not the important threshold
[19:22:09] <ljharb> gde33: databases will be better than a non-database doing the same thing, virtually every single time
[19:22:18] <KevinX> hoppity don't be silly
[19:22:23] <hoppity> ljharb: I can agree on the composition vs inheritance point
[19:22:29] <hoppity> KevinX: ?.. ok
[19:22:40] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[19:22:52] <KevinX> you want me to write how a 3 second argument against OOP?
[19:23:00] <Rockwood> KevinX, o/
[19:23:22] <KevinX> write out*
[19:23:30] <KevinX> Hi Rockwood
[19:23:30] <ljharb> hoppity: maybe it’d be better if you try to justify OOP, since that’s where the burden of proof lies
[19:23:36] <hoppity> KevinX: nevermind, was simply asking you to type 1 or 2 of the many downsides of OOP that you referenced
[19:23:43] <ljharb> hoppity: considering the flaws of OOP have been well understood for about 40 years in PLT circles
[19:23:50] <gde33> ljharb: there is an overlapping point where db's are just as good as static files, beyond that db's are just better
[19:23:52] <hoppity> ljharb: I am not a proponent of OOP I do functional programing
[19:23:55] <ljharb> (that’s why FP was invented)
[19:24:02] <ljharb> gde33: that point is very low
[19:24:06] <ljharb> hoppity: alrighty then
[19:24:16] <ljharb> gde33: and you’ve long since passed it
[19:24:36] <gde33> ljharb: kinda funny how I asked your opinion the other day and you said 1 million items
[19:24:39] <gde33> heh
[19:25:01] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:25:37] *** Quits: kakashiAL (~kakashi@41.143.6.180) (Ping timeout: 256 seconds)
[19:25:39] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[19:26:05] <hoppity> ljharb: I simple said that OOP is *one* kind of abstraction that does not have as many downsides as the Javascript current build ecosystem. And KevinX repsonds: There are many downsides t o OOP. So I ask? Ok like which ones? and *no answer*
[19:26:06] <gde33> I do use a database but only for things I care about, searches and shopping baskets are not
[19:26:13] <KevinX> Quickest I can type out is maybe  that OOP inheritance fails outside of clean relationships with few variations
[19:26:32] <blueagain> gde33: so you don't care about what you're doing with this, but you care about performance?
[19:26:36] <blueagain> oO
[19:26:38] <hoppity> KevinX: fair enough
[19:26:41] <KevinX> And that's not exactly what you said lol nor what I said
[19:26:48] <hoppity> yeah I am paraphrasing not quoting
[19:27:13] <KevinX> I said it has plenty, not many
[19:27:27] <hoppity> oh pardon me then
[19:27:57] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:28:01] <hoppity> https://www.google.com/search?client=firefox-b-d&q=plrenty+synonim
[19:28:04] <gde33> blueagain: correct
[19:28:13] <hoppity> https://www.google.com/search?client=firefox-b-d&q=plrenty+synonim
[19:28:16] <KevinX> And you said it has very few downsides, not that ut doesnt have as many
[19:28:36] <blueagain> gde33: so you're trying to optimise an app you don't care about? why?
[19:28:49] <hoppity> KevinX: true, I did say that
[19:28:50] <blueagain> like that sounds really paradoxal
[19:28:56] <KevinX> you're trying to be deceptive. synonyms connote different meaning
[19:29:09] <gde33> blueagain: I don't care what the user is doing until they buy something
[19:29:15] <hoppity> no, I was paraphrasing and you are trying to be decptive lol
[19:29:17] <blueagain> paradoxal*
[19:29:26] <hoppity> and now proyecting
[19:29:33] <blueagain> er, paradoxical*
[19:29:45] <KevinX> what? lol
[19:29:54] <KevinX> ok back to work
[19:29:57] <hoppity> nevermind haha
[19:30:36] <blueagain> gde33: I don't really get it though. You have a web shop, you're selling something. It doesn't have a database?
[19:31:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:31:49] <blueagain> And apparently your web shop is running on such an old computer that filtering through 1000 items is *slow*?
[19:31:57] <blueagain> Like, what kind of contrived setup is this?
[19:31:58] *** Joins: killown (~killown@user/killown)
[19:32:21] <gde33> blueagain: the customer might be using a stone age android
[19:32:29] <ljharb> davve: you did like 6 hours ago or something
[19:32:37] <ljharb> davve: either way you need to auth and still aren’t :-)
[19:32:54] <ljharb> hoppity: OOP is far, far worse than any complexity in the js ecosystem
[19:32:58] <gde33> blueagain: look at it like this, if i didnt over optimize it I might as well use shopify
[19:33:02] <blueagain> gde33: all the more reason to shift the burden of searching from customer's android device to the backend, don't you think?
[19:33:14] <ljharb> hoppity: there is literally nothing worse than shared mutable stage. A modern JS build system is a bunch of FP transformation steps.
[19:33:22] *** Quits: kill (~killown@user/killown) (Ping timeout: 272 seconds)
[19:33:27] <ljharb> *state
[19:33:35] <gde33> blueagain: they have a static html page with everything cached
[19:34:04] <blueagain> gde33: what if you change a price whilst some is on?
[19:34:08] <hoppity> ljharb: fair opinion, not sure that that is actually true though. Would you mind to elaborate?
[19:34:11] <blueagain> what if you run out of stock?
[19:34:16] <ljharb> hoppity: on which part
[19:34:17] <gde33> blueagain: the 30 euro android comes with 1 gb data at 10 kb/s :P
[19:34:23] <hoppity> I moved away from OOP about 3 years ago and couldn't be happier personally
[19:34:42] <ljharb> gde33: a search term over the wire is small, much smaller than that phone’s cpu
[19:35:05] <gde33> ljharb: not if there are 300+ results
[19:35:12] <ljharb> gde33: especially then
[19:35:20] <hoppity> ljharb: on why OOP is worse that the JS build system. The build system is brittle, constantly changing, near impossible to keep track of, in-itself an untouchable blob etc etc
[19:35:36] <blueagain> gde33: plus, if you run it over the wire, you can cache results for common searches
[19:35:54] <hoppity> and let me say, that I am by no means an expert on JS build, I am striclty speaking based on my experience with it and the fact that projects seem to be trying to move away from it
[19:36:17] *** Joins: tex (~super@user/dix)
[19:36:18] <hoppity> like one of the projects I worked on recently moved to ESBuild
[19:36:27] <hoppity> and lives is SO much simpler
[19:36:33] <hoppity> life*
[19:36:54] <hoppity> and in engineering, simplicity means elegance, dependability and realiability
[19:37:14] <t3nj1n> maintainability
[19:37:29] <SpiceMan> and employment insecurity
[19:37:31] * SpiceMan runs
[19:37:35] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[19:37:36] <hoppity> SpiceMan: lol
[19:39:09] <jaawerth> hoppity: I mean this is just trading hand-wavy assertions without specifics. What in your experience is OOP improving on?
[19:39:31] <jaawerth> and what JS build system are you comparing it to? webpack?
[19:40:04] <hoppity> jaawerth: OOP is not a big improvement over structs. But it does speed up development up to a point where it can become unwieldily.
[19:40:20] <hoppity> jaawerth: yes, webpack/npm
[19:40:26] <gde33> blueagain ljharb: ill think about it, thanks :)
[19:41:22] <jaawerth> I'm not sure I follow. like, OOP is a pattern, so having never used ESBuild I'm having trouble tracking where it applies here when discussing alternative bundlers to webpack
[19:42:26] <ljharb> hoppity: I’m not sure what you mean. The build pipeline hasn’t changed in half a decade - Babel, bundler.
[19:42:43] <ljharb> hoppity: certainly if you hop on the new shiny trends it’ll be terrible, but - don’t do that?
[19:42:45] <hoppity> jaawerth: OOP is unrelated to webpack/bundlers. It simply came up in the conversation that webpack is an abstraction and like all abstractions has downsides. So I pointed out that OOP is also an abstraction but a helpful one (should have added - up until when it is detrimental)
[19:42:58] <blueagain> I actually recently moved from rollup+terser to esbuild. been nothing but fun, and much faster.
[19:43:01] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:43:03] <ljharb> also like all abstractions, it has upsides
[19:43:08] <ljharb> esbuild has its own problems :-)
[19:43:09] <jaawerth> ah
[19:43:12] <ljharb> and rollup was horrifically bad
[19:43:19] <ljharb> you’d be better off staying on webpack, sadly
[19:43:32] <ljharb> so tbh it sounds like a problem of your own making
[19:43:42] <ljharb> browserify and webpack remain the best choices
[19:43:54] <hoppity> maybe true, and your argument of build time complexity vs runtime complexity is a good one
[19:44:17] <ljharb> any time someone focuses on bundle size, or build speed, you can be sure they’re sacrificing correctness somewhere
[19:44:30] <jaawerth> well, as for OOP, while I do strongly prefer FP approaches in a vacuum, I'm not a purist and I also believe one has to find a compromise that best suites the host language/platform. and js, being multi-paradigm, DOES get unwieldy if you try to go full FP. like all that fantasyland stuff.. great in theory, but unless you lock your whole codebase into it as a framework you end up with messy code
[19:44:32] <jaawerth> checking the boundaries between what does and doesn't support its protocol
[19:44:34] <jaawerth> s
[19:44:39] <ljharb> totally agree there
[19:44:51] <ljharb> FP is too much, fp is awesome
[19:44:58] <ljharb> (capitalization intended)
[19:45:05] <jaawerth> I think of JS as "functionish"
[19:45:06] <blueagain> what's FP?
[19:45:19] <hoppity> purely functional programming maybe?
[19:45:23] <jaawerth> yes
[19:45:27] <ljharb> blueagain: functional programming initialism
[19:45:33] <blueagain> oh.
[19:45:37] <jaawerth> if I want to go all in on FP in a js runtime I'll either use clojurescript or something
[19:45:48] <ljharb> and the way i mean it, it’s “writing Haskell in JS” the same way OOP people write Java in JS
[19:45:50] <blueagain> some thinking of floating point when I read FP
[19:45:54] <blueagain> somehow*
[19:46:06] <ljharb> or C# in JS
[19:46:14] <jaawerth> or purescript (been a while since I checked in on that, incidentally, I've heard the compiler's gotten a lot better), or.. someday I'll actually try reasonml
[19:46:36] <jaawerth> ljharb: god, do you remember the v1 api for RxJS
[19:46:44] <jaawerth> microsoft just pooping C# apis everywhere
[19:46:59] <ljharb> lol no, i never laid it any attention then or now tbh
[19:47:00] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 240 seconds)
[19:47:02] <ljharb> paid
[19:47:07] <hoppity> I appreciate everyone who chimed in
[19:47:22] <jaawerth> well, it was fine once they made it a superset of the observables proposal
[19:47:23] <hoppity> Maybe I just miss the old days of <script> tags
[19:47:37] <ljharb> those days are gone forever
[19:47:54] <jaawerth> I think it's worth it for not having to deal with goboals and being able to write modular code
[19:48:02] <blueagain> at least till we get time travel
[19:48:03] <hoppity> ljharb: I am not entirely sure why though. Not sure it sure be that black and white
[19:48:03] <jaawerth> that said, if it were up to me I'd still be using browserify
[19:48:07] <blueagain> gonna take a while though
[19:48:17] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[19:48:48] <hoppity> it *should* be that black and white - sorry
[19:48:51] <ljharb> hoppity: the web outgrew it. You simply can’t build a good app that way anymore.
[19:48:59] <hoppity> fair enough
[19:49:03] <ljharb> should doesn’t matter, “is” does.
[19:49:19] <jaawerth> it's just hard to do real programming without some kind of module or package system
[19:49:25] <jaawerth> like, light scripting, ok sure
[19:49:30] <hoppity> ljharb: that's the thing though, I constantly build apps with script tags and the client loves them
[19:49:36] <hoppity> yes light scripting
[19:49:44] <hoppity> I don't mean like huge SPA in script tag
[19:50:13] <jaawerth> the downside is... sites use way more client-side JS than they should these days and rarely make it gracefully fallback with JS disabled. Which does cause problems.
[19:50:18] <jaawerth> not everything needs to be an App
[19:50:19] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:50:32] <jaawerth> (or at least, not an app that treats the browser as a vm to run its code)
[19:50:45] * jaawerth glares at Jira and Confluence
[19:50:48] <hoppity> I am half joking here, but sometimes I think bundlers, transpilers etc etc are there just to obfuscate code and make it more difficult for people to learn how you built what you built
[19:50:59] <hoppity> jaawerth: true
[19:51:21] <blueagain> jira? confluence? people still use these?
[19:51:39] <jaawerth> well, corporations gonna corporation
[19:52:01] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[19:52:16] <jaawerth> hoppity: that hasn't been my experience at all. I much prefer clean sources that use modern JS than code containing manual workaround and fallbacks in order to support legacy platforms
[19:52:40] <jaawerth> and I'd rather go through modules than a couple giant file. and using globals easily adds state issues to things
[19:52:50] <jaawerth> minification, though...
[19:52:54] <hoppity> jaawerth: fair enough
[19:52:56] <blueagain> myles kennedy is awesome
[19:53:06] <jaawerth> at any rate, another thing is people not bothering to create or ship sourcecmaps
[19:54:34] *** Joins: pulse (~pulse@user/pulse)
[19:55:02] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 260 seconds)
[19:55:34] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[20:01:00] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[20:01:29] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[20:01:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:02:50] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[20:05:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:05:48] *** Quits: silverdust (~silverdus@user/silverdust) (Ping timeout: 240 seconds)
[20:09:32] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[20:14:00] *** Joins: nomic (~nomic@185.198.243.229)
[20:22:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:23:14] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[20:23:57] *** Joins: kakashiAL (~kakashi@41.143.6.180)
[20:24:59] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:25:00] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[20:26:13] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[20:29:20] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:29:44] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 272 seconds)
[20:33:09] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:33:48] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:34:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:38:22] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[20:39:54] <ljharb> hoppity: that's not the metric
[20:40:18] <ljharb> hoppity: it's about long term maintenance also. and on top of that, "what clients want" is very often subpar for users, and that's who's more important
[20:40:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:40:33] *** Joins: src (~src@user/src)
[20:40:38] *** Joins: matsaman (~matsaman@user/matsaman)
[20:41:05] <hoppity> if we all did what the user wants we would be running MS DOS still
[20:41:19] <hoppity> I am being fecitious, a little bit
[20:41:28] <teresko> not really
[20:41:55] <ljharb> hoppity: henry ford, inventor of the car, said "if i'd given the customers what they wanted, i'd have made a faster horse"
[20:42:09] <hoppity> exactly my point
[20:42:12] <ljharb> the customer is always wrong :-)
[20:42:16] <hoppity> haha
[20:42:19] <hoppity> so true
[20:43:02] <ljharb> lol so then why are you arguing for script tags
[20:43:19] *** Joins: ejjfunky (~ejjfunky2@125.164.21.7)
[20:43:23] <ljharb> blueagain: lots of people do. jira's actually the best at what it does, it's just incredibly easy to configure it badly
[20:43:27] <hoppity> I just think the current build system is overly complicated and brittle
[20:43:31] *** Joins: zebrag (~chris@user/zebrag)
[20:43:37] <ljharb> hoppity: in what way do you think it's brittle?
[20:43:46] <ljharb> let's focus on that first, because it's irrelevant if it's complicated if it does the best job
[20:43:52] <hoppity> this summarizes it well:  https://www.youtube.com/watch?v=Uo3cL4nrGOk
[20:43:53] <skillbot> YouTube Title: Interview with Senior JS Developer in 2022
[20:43:55] <ljharb> (and once it's correct, it's pretty easy to optimize it)
[20:43:58] <ljharb> hoppity: that's satire
[20:44:04] <ljharb> hoppity: do you have a real argument?
[20:44:12] <hoppity> but ring true on so many levels
[20:44:17] <ljharb> that things that are hard have lots of buzzwords isn't a problem
[20:44:37] <ljharb> web dev requires more skill and rigor than most kinds of programming. it's just that it took awhile for the world to realize it. hard jobs require complex tools.
[20:44:58] <hoppity> ljharb: not really though, have you heard of the Phoenix framework?
[20:45:16] <matsaman> hoppity: heheh
[20:45:24] <ljharb> hoppity: ok so, yes really, the existence of a framework doesn't obviate my point; and two, no, but you were arguing for script tags
[20:45:38] <ljharb> hoppity: so thrice i ask, please give me a single concrete way that it is brittle
[20:45:46] <ljharb> hoppity: or else we can agree that that claim of yours is false, and move on
[20:45:53] <hoppity> I am arguing agains the unnecesarily complex JS landscape, specifically build
[20:45:57] <ljharb> (google suggests phoenix is for elixir)
[20:46:00] <ljharb> hoppity: you used the word brittle
[20:46:01] *** Joins: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39)
[20:46:05] <hoppity> I did
[20:46:06] <ljharb> hoppity: are you retracting that, or can you defend it
[20:46:08] <ljharb> pick one
[20:46:12] <hoppity> I can defend it
[20:46:19] <ljharb> then please do. i've asked three times.
[20:46:34] <hoppity> Brittle as in a dependency in *any* place of the toolchain can break your app
[20:46:41] <matsaman> I can tell you're talking with ljharb, 'cause it looks like you're talking to yourself on my screen
[20:46:44] <hoppity> and it will break your app
[20:46:47] <ljharb> hoppity: that's not what brittle means
[20:46:53] *** matsaman was kicked by ljharb (ignoring ops is not permitted)
[20:47:04] <ljharb> hoppity: any piece of every app can break your app
[20:47:06] <hoppity> ljharb: oh really? what does it mean to you?
[20:47:25] <hoppity> https://en.wikipedia.org/wiki/Software_brittleness
[20:47:31] <ljharb> hoppity: can you give me a concrete example of something that could break in a modern toolchain
[20:47:46] <ljharb> (i'm not claiming nothing can, i'm trying to discuss something concrete instead of abstract)
[20:47:55] <hoppity> From wiki: "Systems can also be brittle if the component dependencies are too rigid. One example of this is seen in the difficulties transitioning to new versions of dependencies. When one component expects another to output only a given range of values, and that range changes, then it can cause errors to ripple through the system, either during building or at runtime."
[20:48:08] <hoppity> Fair enough or no?
[20:48:18] *** Joins: matsaman (~matsaman@user/matsaman)
[20:48:38] <ljharb> hoppity: ok, but that describes basically every software API in existence
[20:48:42] <hoppity> not really
[20:48:51] <ljharb> hoppity: so instead of talking in abstract terms, can you provide a concrete example?
[20:48:59] <ljharb> doesn't have to be a real bug, a contrived but realistic one is fine
[20:49:13] <hoppity> well I can't remember exactly which dependencies I have had issues with but do you deny that this is a problem?
[20:49:28] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[20:49:31] <hoppity> I don't run into it on Python, nor on Elixir, nor on Erlang
[20:49:44] <hoppity> nad that;s a lie.. I DO run into it but not as often
[20:49:53] <hoppity> and the fix is usually way simpler than in the JS toolchain
[20:49:56] <ljharb> hoppity: i concretely deny this is a problem in practice, yes
[20:50:10] <hoppity> oh ok, then agree to disagree I guess
[20:50:12] <ljharb> hoppity: but again i'm not asking for an actual issue you've had, or a real one that exists, i'm asking for a realistic THEORETICAL one
[20:50:20] <hoppity> I see
[20:50:21] <matsaman> javascript is real popular, its fads move faster
[20:50:25] <ljharb> hoppity: if you can't even *imagine* a concrete way it could break then i'm not sure what we can discuss
[20:50:33] <hoppity> sure
[20:52:47] <hoppity> all of a sudden your app does not bundle, you get a cryptic error from webpack and you embark in a days long google/github/SO search for someone who has hopefully run into this same error message and has a some hackish solution for you
[20:52:57] <hoppity> you've never run into this?
[20:53:12] <ljharb> that's not my app being broken
[20:53:16] <ljharb> all my previously built apps work fine
[20:53:30] <hoppity> sure
[20:53:36] <hoppity> the past doesn;t change, that is obvious
[20:53:42] <ljharb> typically when this kind of thing happens, it's because of updating a dep, and so it's trivial to roll back
[20:53:44] <hoppity> we are talking about a *build* system after all
[20:53:49] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:53:50] <ljharb> since all apps should have lockfiles
[20:53:57] <hoppity> complexity
[20:54:00] <ljharb> you can `npm install --before=<yesterday>` or whatever and fix it
[20:54:08] <hoppity> more complexity
[20:54:08] <ljharb> it's not complexity, it's reproducibility
[20:54:17] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[20:54:18] <ljharb> complexity isn't inherently bad
[20:54:20] <hoppity> it is another thing to master
[20:54:28] <ljharb> complexity that simplifies other things is ideal
[20:54:29] <hoppity> another thing to keep track of
[20:54:32] <ljharb> and yes, it is another thing to master, that's right
[20:54:38] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:54:41] <ljharb> but that doesn't mean it's bad. it's actually so good that it's necessary.
[20:54:50] <hoppity> im not sure about that though
[20:54:56] *** Joins: trevors (~trevors@user/trevors)
[20:54:57] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:54:59] <ljharb> and now you're talking about managing deps, which has nothing to do with a build system
[20:55:05] <hoppity> you obvious can build good apps without webpack
[20:55:10] <ljharb> you'd have to do the exact same thing with script tags, if you updated something and things suddenly broke
[20:55:16] <ljharb> hoppity: without a bundler? no, not anymore you can't.
[20:55:19] <hoppity> um deps are integral to a build system
[20:55:27] <ljharb> deps are integral to everything
[20:55:29] <ljharb> jquery is a dep
[20:55:34] <hoppity> ljharb: what do you mean? a browser wont take a script tag any more? untrue
[20:55:38] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 268 seconds)
[20:55:38] <hoppity> of course you can
[20:55:40] <hoppity> if you want
[20:55:41] <ljharb> that's not what i said
[20:55:48] <hoppity> so you mean to say, you don't *want* to
[20:55:58] <ljharb> sure, you can. what i implied was that you can't if you want to be competent and make a web app that works well and is maintainable.
[20:56:09] <ljharb> you can also hand-write html and refuse to use any JS
[20:56:15] <hoppity> the complexity you outlined above makes apps hard to maintain
[20:56:18] <ljharb> and you can also not use computers and do math on paper
[20:56:19] <hoppity> maybe not for you
[20:56:23] <ljharb> it doesn't, actually
[20:56:24] <hoppity> but obviously for a lot of people
[20:56:28] <ljharb> no, not obviously
[20:56:38] <ljharb> since almost the entire ecosystem works this way, obviously most people find this easier to maintain overall
[20:56:43] <ljharb> but it's not a subjective thing
[20:56:52] <hoppity> google webpack issue.. and I just came up with that, I bet there will be millions of results/questions/problems
[20:56:55] <hoppity> every single day
[20:56:56] <ljharb> having dep management objectively makes a codebase easier to maintain
[20:57:00] <ljharb> sure, webpack is confusing
[20:57:07] <hoppity> and therefore a problem
[20:57:14] <banana_> ljharb: hey I scrolled and not sure someone answered, didnt see any reply, if someone did reply... at least I tried before asking this.... does anyone know the answer to:
[20:57:17] <hoppity> it is not straight forward, it gets in the way
[20:57:19] <ljharb> you keep moving the goalposts tho. webpack being hard to configure properly doesn't mean *bundlers* or *a modern build system* is inherently hard.
[20:57:37] <ljharb> fine, don't use webpack if you don't want to. that doesn't change that using a bundler and modules *objectively* makes apps easier to maintain
[20:57:38] <blueagain> esbuild is actually really nice.
[20:57:38] <hoppity> I disagree
[20:57:46] <hoppity> I think it gets in the way, big time
[20:57:46] <ljharb> you're welcome to disagree, but that doesn't change the facts
[20:57:58] <ljharb> hoppity: if that were true then everyone would be avoiding bundlers.
[20:58:00] <banana_> "<substructure63> How do people feel about the security of their dependency closures? Right now there isn't a way with npm to confirm the source code plus build tools result in a given package.  I think there is a way to improve this situation. Let me know if there is a better place to ask this question."
[20:58:01] <hoppity> the facts are what they are, your and my interpretation are just different
[20:58:07] <ljharb> hoppity: but that's not how modern apps are built. because this way is better.
[20:58:20] <ljharb> banana_: what is a "dependency closure"
[20:58:26] <hoppity> ljharb: I am not sure that it is really better
[20:58:33] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[20:58:35] <banana_> I think he meant transitive dependencies pretty sure
[20:58:37] <ljharb> hoppity: adoption equals better
[20:58:43] <ljharb> banana_: ok well if they want to ask here, have them come ask
[20:58:52] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[20:58:55] <hoppity> adoption != better
[20:58:58] <hoppity> that is a fallacy
[20:59:02] <ljharb> hoppity: if you think a different way is better, then advocate for it, and if it's better, people will adopt it
[20:59:08] <hoppity> more people use it != better
[20:59:08] <banana_> yea I'm interested in someone more of an expert's answer
[20:59:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:59:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:59:12] *** Joins: wroathe (~wroathe@user/wroathe)
[20:59:13] <ljharb> hoppity: fair, i oversimplified. adoption is a prerequisite of quality
[20:59:17] <ljharb> hoppity: things nobody uses *are* bad.
[20:59:26] <ljharb> hoppity: but certainly things everyone uses aren't necessarily good. they're just eligible to be,
[20:59:31] <matsaman> hoppity: hear hear
[20:59:32] <hoppity> ljharb: not necessarily, though I do see what you are saying
[20:59:48] <ljharb> banana_: that's not a straightforward question tho. "how do people feel" is broad. i'm not going to have a conversation with this random person through you by proxy :-)
[21:00:06] <ljharb> hoppity: and virtually nobody is still making apps in 2015, let alone 2022, with just script tags
[21:00:20] <banana_> I mentioned npm audit and linked it's page
[21:00:23] <ljharb> hoppity: that it can still be done isn't arguable. whether it *should* be done is.
[21:00:24] <banana_> but he replied:
[21:00:27] <banana_> Unfortunately npm audit cannot validate if the package version tarball was built from the source code plus build tools. This is a security issue they have not addressed."
[21:00:42] *** Joins: substructure (~substruct@141.98.255.145)
[21:00:44] <hoppity> ljharb: yeah you could have said the same about OOP at some point.. "everybody is using OOP" why you still using strucs?
[21:00:47] <ljharb> banana_: nothing can. and it's not a security issue in practice, since the largest package repository on the planet has seen an attack based on that *even once*
[21:00:55] *** Joins: sam_1 (~sam_1@87.51.251.118)
[21:00:57] <hoppity> fads are gonna fad
[21:00:58] <ljharb> banana_: iow it's the nature of JS, and that the registry doesn't do the building itself
[21:01:08] <ljharb> hoppity: yep! and at the time that was a good argument
[21:01:19] <ljharb> hoppity: just because aggregate opinions change doesn't make things "fads"
[21:01:27] <hoppity> but to me the current JS build system is brittle, cumbersome and a PITA
[21:01:37] <hoppity> ljharb: that is literally what a fad is
[21:02:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:02:01] <hoppity> https://en.wikipedia.org/wiki/Fad
[21:02:12] <ljharb> hoppity: no, it's not. and wiki isn't the source for word definitions
[21:02:14] <hoppity> the pendulum will swing back to true simplicity
[21:02:22] <ljharb> hoppity: webster says "a practice or interest followed for a time with exaggerated zeal"
[21:02:25] <hoppity> ljharb: oh ok, some guy on IRC must be then..
[21:02:28] <banana_> so he was saying a tarball could be malicious I guess? But if a package had a malicious tarball when used, wouldn't that package be considered not "trusted"
[21:02:31] <ljharb> hoppity: no, an actual dictionary
[21:02:37] <hoppity> then show me it
[21:02:40] <banana_> the tarball thing honestly went over my head
[21:02:42] <ljharb> banana_: of course it could. and yet, nobody's done it. so obviously it's not a security issue.
[21:02:52] <hoppity> https://www.dictionary.com/browse/fad
[21:02:53] <ljharb> hoppity: https://www.merriam-webster.com/dictionary/fad ? you can google things yourself
[21:02:54] <hoppity> happy?
[21:02:58] <ljharb> sure
[21:03:02] <hoppity> I did, and before you
[21:03:12] <ljharb> and the "exaggerated" part is subjective, obviously
[21:03:17] <ljharb> but OOP wasn't a fad
[21:03:17] <hoppity> sure
[21:03:27] <ljharb> it's just that now more and more people are realizing its flaws
[21:03:36] <hoppity> so a fad
[21:03:38] <ljharb> script tags weren't a fad either. it's just that the industry has moved beyond them.
[21:03:39] <ljharb> no
[21:03:41] *** Quits: kakashiAL (~kakashi@41.143.6.180) (Ping timeout: 245 seconds)
[21:03:53] <ljharb> the word is useless if everything is either eternal, or else a fad
[21:03:57] <hoppity> ljharb: I think the pendulum will swing back to true simplicity
[21:04:10] <ljharb> hoppity: you can think that all you want. and at that time, i'll be happy to tell you you're right
[21:04:14] <hoppity> and not the Home Depot multi tool aproach that it is now
[21:04:24] <ljharb> hoppity: until then, the current state is actually more simple and easier to maintain and better.
[21:04:36] <hoppity> not provably so
[21:04:39] <ljharb> my guess is that IF such a swing happens, it'll require a bunch of browser features that don't exist right now
[21:04:49] <hoppity> just look at the hundreds of tutorials on. youtube on how to begin to setup webpack
[21:04:53] <hoppity> its ridiculous
[21:04:56] <ljharb> which would mean that the current state is objectively the best way, pending those features
[21:05:03] <ljharb> the number of tutorials for a thing doesn't indicate it's bad
[21:05:04] <banana_> ljharb: so in layman's logic, if I told you about my npm package that you should use in your project, but it had a malicious tarball, you wouldn't use my package right
[21:05:12] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[21:05:22] <ljharb> hoppity: look at how many different ways there are to learn math. is math complex and thus also bad?
[21:05:30] <magga> guys im getting a JSON response that looks like this: https://bpa.st/EHQQ. i need to loop through each date. how can i do that with JavaScript? currently im storing it as json like this: "response.json().then((shifts) => {"
[21:05:31] <hoppity> ljharb: no but it's a good indicator of the fact that people are failing to figure it out
[21:05:34] <ljharb> hoppity: you're just grumpy about a thing being hard. that doesn't make it bad.
[21:05:44] <hoppity> therefore proving my point that it is not straight forward
[21:05:47] <ljharb> hoppity: and sometimes that means the thing is overly complex. but sometimes that just means that *learning is required, get over it*
[21:05:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:05:51] <hoppity> it is confusing, and unnecesarily so
[21:05:55] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[21:06:11] <banana_> anyone else can also answer that, no worries though
[21:06:18] <ljharb> most of the complaints about the way modern web dev works are just people bitter that they have to keep learning stuff
[21:06:21] <hoppity> ljharb: sure learning is required, we are not developers because we don't like to learn. Webpack jsut sucks
[21:06:30] <hoppity> unelegant, bloated, overcomplicated
[21:06:31] <ljharb> "but it doesn't work the way i learned it 30 years ago!" yep, things change, adapt or die
[21:06:31] <hoppity> simple
[21:06:44] <ljharb> hoppity: webpack sucks in a lot of ways. but *bundling* is glorious and necessary
[21:06:55] <blueagain> I do agree that there's a lot of unnecessary complexity in the js ecosystem
[21:07:02] <ljharb> show me a bundler besides browserify or webpack that does *as good a job* without all the ways webpack sucks? that's what i'll use and advocate
[21:07:06] <ljharb> but no such bundler exists
[21:07:07] <hoppity> bundle has it's benefits but the process with werbpack is terrible
[21:07:11] <hoppity> don't deny it
[21:07:13] <banana_> but what can't change or die is capitalism... or youre a subversive
[21:07:25] <ljharb> hoppity: yes, i agree. but that's a complaint about _webpack_, and not ANYTHING else.
[21:07:29] <banana_> jk </off-topic>
[21:07:40] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[21:07:42] <ljharb> hoppity: just because webpack hurt you doesn't mean you can justify slandering everything around it
[21:08:06] <hoppity> ljharb: haha webpack hurt me. I am simply pointing out that it is a thorn on the side of the JS landscape
[21:08:09] <hoppity> it will be fixed
[21:08:14] <hoppity> it just sucks at the moment
[21:08:17] <ljharb> sure, i agree with that
[21:08:22] <ljharb> but bundling is never going away
[21:08:30] <hoppity> probably not, it is a good thing
[21:08:35] <ljharb> it's just that one of these days, one of the currently-crappy bundler upstarts will end up being actually good
[21:08:40] <ljharb> and on that day, it will replace webpack
[21:08:40] <hoppity> yes
[21:08:43] <hoppity> yes
[21:08:46] <hoppity> ok we agree then
[21:08:47] <ljharb> until then, use webpack and suck it up
[21:08:50] <hoppity> at least on that point
[21:08:53] <ljharb> or, build something better
[21:08:56] <hoppity> no, I use ESbuild. F** webpack
[21:09:09] <ljharb> then good luck with all the subtle ways it will break things :-)
[21:09:35] <ljharb> esbuild's maintainers are still trying to figure out some of the standard ways bundling has worked for over a decade
[21:09:40] <hoppity> this conversation has gone lone enough haha but care to point out specific flaws with Esbuild? again I am not expert
[21:09:42] <ljharb> i'm sure they'll get there, but they aren't there yet
[21:09:49] <hoppity> I see
[21:10:07] <blueagain> esbuild works really nicely for me. I probably don't cover all edge cases, but it works for me.
[21:10:07] <ljharb> and to be fair, esbuild hasn't burned any bridges like rollup has. rollup is horrifically bad and should never be used.
[21:10:25] <blueagain> ljharb: the rollup plugins were the last nail in the coffin for me.
[21:10:30] <ljharb> for me, esbuild is in the same bucket as parcel, rollup, swc, which is "maybe it'll be good, but i'm skeptical and it's way too early to use in production"
[21:10:34] <hoppity> I've never heard of rollup
[21:10:57] <ljharb> you're better off
[21:11:04] <hoppity> haha sounds good
[21:11:09] <hoppity> anyway, thanks for the good convo
[21:11:19] <hoppity> gotta go set up an MDM server
[21:12:23] <banana_> the one thing I hate about current javascript development is youre way better off making your own build for your project
[21:12:38] <ljharb> banana_: versus what
[21:12:55] <banana_> i.e. if you know everything youre better off
[21:13:18] <banana_> some easy out of the box thing that just bundles auto-magically for you
[21:13:23] <banana_> idk
[21:13:48] <substructure> banana_: "But if a package had a malicious tarball when used, wouldn't that package be considered not "trusted"" Is this in reference to what I was saying?
[21:14:08] <ljharb> substructure: were you the one with the question?
[21:14:10] <banana_> substructure: yep ask ljhar
[21:14:19] <banana_> your question
[21:14:21] <ljharb> substructure: deps should only be installed from a registry anyways, no git or tarball sources
[21:14:44] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:14:50] <banana_> ljharb: he was yep
[21:15:11] *** Joins: rwtrecs (~rewrit3@user/rewrit3)
[21:15:14] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[21:15:20] <ljharb> substructure: but either way, since npm packages need not have a git repo *at all*, let alone a public one, it simply *doesn't matter* what the build process does. the only thing that ever matters is "what code ends up in the published package". and you can verify that without installing it.
[21:15:29] <banana_> interested in the answer that's why I reposted
[21:16:42] <banana_> ljharb: new question, how can you verify?
[21:16:46] <banana_> newb*
[21:16:58] <ljharb> banana_: unpkg.com, or just download the tarball and extract it yourself
[21:17:26] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Ping timeout: 245 seconds)
[21:18:28] <banana_> thanks taking notes
[21:19:01] *** Joins: Akiva (~Akiva@user/Akiva)
[21:21:40] <banana_> and then for the unpkg.com you would for example go to unpkg.com and e.g. go to https://unpkg.com/browse/react@17.0.2/ and make sure no malicious executables are created? sorry probably super newb question here
[21:22:05] *** Joins: Naan` (~Naan@user/naan)
[21:22:05] <substructure> I was the one with the question. I agree that dependencies should come from the registry, but to be clear what you download from the registry is package version metadata and an associated tarball. The metadata contains gpg signatures from npm and subresource integrity data of the tarball. That tarball is what was uploaded by the package owner. The
[21:22:06] <substructure> issue, as I see it, is that the tarballs used in supply chain attacks obfuscate their code. event-stream/flatmap-stream are a good example of this. I argue that the build process does matter because it has been used in attacks in the past on multiple occasions. I can provide sources.
[21:22:06] <banana_> I guess how would you use unpkg.com to "verify the code"
[21:22:42] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[21:23:30] <ljharb> banana_: yes
[21:23:49] <ljharb> substructure: nah, in that case it wasn't a build process
[21:24:09] *** Joins: diamondbond (~diamondbo@175.157.92.206)
[21:24:09] <ljharb> substructure: it was just that a legitimate owner went rogue and intentionally published malware that wasn't present in the actual build output
[21:24:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:24:39] <ljharb> substructure: and that's got nothing to do with a build process, and since "it has a repo" isn't a guarantee and never will be, it's not a security issue any more than any other package might have.
[21:26:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:26:19] <banana_> do you mean " legitimate owner" of the public repo or public npm package?
[21:28:21] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[21:29:20] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) (Quit: arthur_melo)
[21:29:35] <banana_> I'll look up that event-stream/flatmap-stream example, sorry for budding in
[21:30:06] <gde33> rendar: https://news.ycombinator.com/item?id=30454881
[21:31:14] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[21:35:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:35:24] <substructure> The payload of the event-stream attack was used to target the build process of a javascript crypto wallet. If they were able to verify their dependency closure(transitive + direct) came from public repos with verifiable build artifacts via reproducible builds and Diverse Double-Compiling (DDC) then we can at least shift the malicious code from
[21:35:24] <substructure> where it is hidden to where it is more visible. I'm looking to go beyond it having a repo to knowing with confidence that a specific commit of a repo plus build tools results in the artifact. This is not a perfect solution, but I'd like to see if there is interest in working towards this goal.
[21:36:31] <ljharb> substructure: yes, i'm quite familiar with event-stream
[21:36:51] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:36:53] <ljharb> substructure: that is an impossible goal that can't be worked towards, because npm does not (and should not, and will not) require a repository to exist
[21:37:07] <ljharb> substructure: a package doesn't have to be on github, or be public, or have a repo at all.
[21:37:09] *** Joins: _xxoxx (~Junxter@222.95.164.193)
[21:37:12] *** Joins: crashrep (~crashrep@user/crashrep)
[21:37:34] <ljharb> substructure: and, because build processes *do* exist, and because of the nature of javascript, there's simply no way to map with certainty a repo to the package contents
[21:38:15] <ljharb> substructure: and, since this wouldn't actually have stopped the event-stream attack - by attacking the build process, any verification of that build process would be similarly attacked - it's not going to help.
[21:40:29] *** Quits: Junxter (~Junxter@222.95.164.193) (Ping timeout: 256 seconds)
[21:41:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:41:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:41:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:41:36] *** Joins: wroathe (~wroathe@user/wroathe)
[21:41:50] <substructure> ljharb: Sorry for the excessive exposition then. I agree that npm will never require it and that it is a significant challenge; however a significant number of packages already have repo data. If this can be shown to work would the community not push for using packages with repos present? I'm not familiar with why repos are not listed from a
[21:41:51] <substructure> developers perspective.
[21:42:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:43:48] <substructure> ljharb: Why do you say there is not way to map with certainty a repo to the package contents? Is it the lack of lock files or reproducible build environments?
[21:44:52] <ljharb> substructure: packages shouldn't have lockfiles anyways
[21:45:10] <ljharb> substructure: but sure, a package with a lockfile, *if and only if* the build tools are determinstic, which they likely aren't, would certainly work
[21:45:21] *** Joins: zndr[m] (~zndrmatri@2001:470:69fc:105::1:c9cb)
[21:45:41] <ljharb> substructure: i can tell you that my packages alone comprise over 10% of npm's download traffic and do not have lockfiles (altho most don't have a build process). if that helps capture the scope of the problem.
[21:46:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:46:15] *** Joins: KaitoDaumoto (Frat@user/kaitodaumoto)
[21:46:21] *** Joins: diamondbond_ (~diamondbo@175.157.92.206)
[21:46:29] *** Quits: diamondbond (~diamondbo@175.157.92.206) (Ping timeout: 256 seconds)
[21:49:40] <substructure> ljharb: I agree that this shifts the attack focus from the packages to the reproducible verification process. Does this mean there is no way to mitigate these attacks? I've been looking into this for a while now and I'm not 100% sure given the highly circular dependency structure of npm package versions and the complex build setups used by various
[21:49:41] <substructure> packages. David Wheeler's paper on DDC makes me think it may be possible. https://dwheeler.com/trusting-trust/
[21:50:52] *** Quits: ckdCreations (~ckdCreati@147.55.133.139) (Read error: Connection reset by peer)
[21:51:06] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[21:53:57] *** Joins: average (uid473595@user/average)
[21:54:03] <substructure> ljharb: I agree that packages should not have lockfiles, but it does make it tricky to reproduce the artifacts. I've been looking into methods of reducing the number of builds needed to determine candidate sets of package versions. Some good heuristics are package publish date of dependencies. The older the package the larger the set of potential
[21:54:04] <substructure> package versions match their semver.
[21:54:04] <average> https://www.youtube.com/watch?v=Uo3cL4nrGOk
[21:54:04] <skillbot> YouTube Title: Interview with Senior JS Developer in 2022
[21:55:11] <ljharb> substructure: no, it doesn't mean that. it means that "linking code to package contents" can't reliably mitigate these attacks
[21:55:14] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (Ping timeout: 272 seconds)
[21:55:30] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:56:07] <ljharb> substructure: a better approach would be like what lavamoat does: OCAP. using node's "policies" feature, combined with a modified OS that watches fs and network access, and determine actual package capabilities, and then notify when those capabilities change
[21:56:13] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[21:56:21] <substructure> ljharb: What do you mean most don't have a build process? As in the package publish is just a copy of the source code? Great, that make it easy to verify. (ps. 10% is a crazy figure, I value your feedback on this)
[21:56:23] <ljharb> average: that's both useless satire and also was linked very recently
[21:56:50] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[21:57:33] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[21:58:09] <average> ljharb: your criticism is very constructive
[21:58:17] *** Joins: crashrep (~crashrep@user/crashrep)
[21:58:36] <average> ljharb: I guess I will have to cater all my messages to your tastes..
[22:00:10] *** Joins: pulse (~pulse@user/pulse)
[22:00:59] *** Joins: stenno (~stenno@user/stenno)
[22:01:55] *** Joins: sam_1 (~sam_1@87.51.251.118)
[22:01:56] <KevinX> You can make the same video about almost everything in life. Every thing has little quirks we can all relate to
[22:02:17] <rendar> i have this little snippet, https://bpa.st/ZQXA -- but it doesn't work, this._leftString will be always '' empty string, why? Even if i call .concat() :(
[22:02:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:03:17] *** Joins: silverdust (~silverdus@user/silverdust)
[22:03:45] <systemfault> rendar: strings are immutable
[22:04:00] <systemfault> It's part of the absolute basics of the language...
[22:04:27] <systemfault> !eloquent @ rendar
[22:04:27] <jellobot> rendar, Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/
[22:04:45] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Read error: Connection reset by peer)
[22:05:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:06:00] *** Joins: codebam (~codebam@user/codebam)
[22:06:36] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 245 seconds)
[22:06:47] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:06:49] <ljharb> average: certainly not. but dropping a link into chat without context, a mere hour after it was last posted, doesn't really add value :-)
[22:07:30] <ljharb> rendar: and even if they were mutable, `.concat` creates a new thing
[22:07:54] <rendar> how can i add a character to a string then?
[22:08:49] <average> ljharb: Even if I was absent from the channel when it was allegedly posted, I still appreciate your considerate feedback
[22:09:15] <average> ljharb: I have recently read a book about soft skills and diplomacy, and I am now practicing my skills with you, let me know how I'm doing
[22:09:23] <blueagain> what is skillbot for?
[22:09:31] <ljharb> blueagain: revealing youtube link titles
[22:09:40] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[22:09:42] <ljharb> average: i suppose you're doing better than the average internet response
[22:09:48] <blueagain> ljharb: oh, I thought jello did that as well
[22:09:51] <ljharb> blueagain: no
[22:09:52] <blueagain> should pay closer attention
[22:09:57] <ljharb> rendar: by making a new string
[22:10:07] <ljharb> rendar: `x = x + 'a'` or `x += 'a'`
[22:10:10] <ljharb> rendar: read eloquent
[22:10:24] <blueagain> so skill scans everything in the channel and spits out a video's title?
[22:10:29] <rendar> i see!
[22:13:00] *** Quits: p-i- (~Ohmu@183.89.30.105) (Ping timeout: 240 seconds)
[22:13:03] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2)
[22:17:51] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[22:17:53] *** Quits: ejjfunky (~ejjfunky2@125.164.21.7) (Remote host closed the connection)
[22:18:18] <ljharb> blueagain: yes
[22:18:32] *** Quits: bambanxx (~bambanx@2800:150:106:1061:20bf:ac88:1ad0:6e39) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:18:34] *** Joins: naan (~Naan@user/naan)
[22:18:36] <average> ljharb: thank. then i shall continue to read soft skills books
[22:18:52] <average> I think these days.. programming is more about soft skills..
[22:18:56] <average> and office politics
[22:19:31] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[22:19:50] <blueagain> average: programming is about programming :)
[22:19:58] *** Joins: prawnsal_ (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[22:20:14] <blueagain> but yeah, being a functional member of society usually requires some amount of communication skills
[22:20:28] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[22:20:28] <blueagain> unless you wanna end up like esr
[22:20:37] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Client Quit)
[22:20:42] <average> blueagain: how did esr end up
[22:21:03] <blueagain> pretty bad, I hear. he's practically begging for donations at the moment
[22:21:48] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[22:22:25] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[22:22:53] <KevinX> average to me it reads like you're trying to say "I'm going to be the bigger person" in a way to put ljharb down
[22:22:59] <ljharb> programming, like everything else, is about people
[22:23:05] <KevinX> which is the opposite of the intent
[22:23:12] <ljharb> it's never been about the code, nor should it be; that's the easy part
[22:23:14] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Ping timeout: 252 seconds)
[22:25:00] *** Quits: diamondbond_ (~diamondbo@175.157.92.206) (Ping timeout: 272 seconds)
[22:25:30] <average> KevinX: nah.. it only sounds like that. I'm an honest and frustrated man who is dealing with his own limitations, coping for the most part.
[22:25:43] *** Joins: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net)
[22:26:42] *** Joins: kakashiAL (~kakashi@41.143.6.180)
[22:26:48] <systemfault> You don't need to be really good at communicating... just "normal", and generally... be helpful and not an asshole.
[22:27:22] <KevinX> i really hate all of that more than anything else
[22:27:40] <systemfault> Dealing with humans is part of the job.
[22:27:45] <KevinX> Especially when you start dealing with people who are faking it, but are better communicators
[22:27:53] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[22:28:15] <KevinX> or they built some social status o appear authoritative
[22:28:19] <KevinX> to*
[22:28:22] *** Quits: nomic (~nomic@185.198.243.229) (Quit: Leaving)
[22:28:30] <blueagain> But does being a good programmer require having good communication skills?
[22:28:42] <banana_> no just logical thought process
[22:28:59] <blueagain> Because I sure know some technically excellent people who have next to zero communication skills
[22:28:59] <banana_> communication skills are just a byproduct
[22:29:11] <KevinX> the better you get the more of an asshole you're allowed to be
[22:29:17] <KevinX> or get away with
[22:29:30] <banana_> idk about that
[22:29:47] <banana_> frustrated for sure though, or probably have to fight against the frustration
[22:29:55] *** Joins: chao (~stenno@user/stenno)
[22:30:12] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[22:31:57] <ljharb> blueagain: absolutely it does
[22:32:21] <ljharb> blueagain: good code has to solve the problem well, and you can't do that unless you understand the problem well, and you can't do that without good communication skills
[22:32:27] <ljharb> you can come close, but that's just an approximation
[22:32:38] <banana_> blueagain: but if they were more rational wouldnt they have reflected "In life it seems like if you want thing done your way, and things done your way is better consequence for everyone involved, you're better off being more influential, and being a good communicator can make you more influential, therefore let's explore that avenue"
[22:32:38] <ljharb> well, maybe not good, but at least, decent
[22:32:58] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[22:33:26] <banana_> how do you know if being a good communicator gives you enough influence unless you gain that skill?
[22:33:34] <blueagain> I'm just saying because there's this guy I work with, he's really good at what he does, but he has zero social competence
[22:33:48] <banana_> maybe being a great communicator doesnt give you the influence but you just dont know until you obtain it
[22:34:45] <banana_> blueagain: yeah but the mindset that got him there was probably a bit irrational... which is totally fine because I'm not the smartest or most logical cookie either
[22:36:31] <systemfault> If you care about influence, then maybe you want to be a politician, not a developer :P
[22:37:05] <banana_> lol
[22:37:19] <systemfault> Being able to communicate in my work is about being able to get clear requirements so I can write a good product.
[22:37:49] <banana_> systemfault: you influenced me to feel less secure about my opinion, if that was your goal congrats you have enough communication skill to do what you just did
[22:38:03] <ljharb> blueagain: https://en.wikipedia.org/wiki/The_No_Asshole_Rule
[22:38:07] <banana_> i.e. you influenced me
[22:38:14] <systemfault> banana_: <3
[22:38:32] <banana_> aww now youre influencing me to feel all fuzzy
[22:38:58] <banana_> lol
[22:39:04] <blueagain> ljharb: I'm not saying it's good. I'm saying his guy found a niche where his behaviour is acceptable (he's not even a jerk by any standard).
[22:39:18] <banana_> thats literally capitalism though
[22:39:25] <banana_> I think so it works out
[22:39:26] <blueagain> and yes, it probably would be better for the company if he could communicate better; it least for the other developers
[22:39:40] <KevinX> blueagain curious if you could describe an example of asshole behavior
[22:39:56] <blueagain> KevinX: you mean by this person?
[22:40:03] <KevinX> yeah
[22:40:21] <KevinX> im just always reflecting myself if im doing acting like an asshole
[22:40:29] <banana_> communication is just one skill is empowers someone
[22:40:46] <blueagain> he's a database developer, and he often goes ahead on on a ticket and starts working *before* we properly defined APIs.
[22:40:47] <banana_> does a plumber has to be a suave speaker?
[22:41:00] <blueagain> which means we usually end up have to reiterate the ticket
[22:41:01] <systemfault> Just be friendly...
[22:41:02] <KevinX> Sometimes i feel being opinionated is something people take as asshole-ish behavior
[22:41:17] <banana_> maybe if he's a president of a huge plumbing company building an empire, but mostly I think the plumber is hired because of their plumbing ability
[22:41:52] <blueagain> KevinX: as I said, it's not a "jerk" behaviour per se. it's not he's not nice to anyone. But he doesn't consider other people's perspective, and that's probably a thing you should do in a team.
[22:42:00] <banana_> i think this is a philosophical debate
[22:42:03] <KevinX> banana_ I think everyone's goal is to rise to the top so these skills woudl contribute to that
[22:42:20] <KevinX> blueagain gotcha
[22:42:25] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:42:27] <banana_> KevinX: yeah for sure I think a person wants the most power possible
[22:42:42] <banana_> hell yeah if I "knew everything" I would be king in this channel
[22:42:52] <systemfault> Most "assholes" I've worked are simply not friendly, they're dismissive, don't care about solving a problem or helping, every time you reach out to them... you basically regret it.
[22:42:53] <KevinX> My issue is probably the opposite, I'll call people out on their takes when they don't defend them outside of "just because"
[22:43:09] *** Quits: hoppity (~hoppity@user/hoppity) ()
[22:43:14] <blueagain> KevinX: I'm pretty sure he doesn't even mean it. He's just only interested in his own world, his own segment of the stack.
[22:43:15] <banana_> probably could get you all to order food to my house because I'd have the power to help you solve anything
[22:43:31] <banana_> but in life a person is limited in their abilities, which is 100% normal and ok
[22:44:04] *** Joins: onosendi (~onosendi@user/onosendi)
[22:44:06] <ljharb> blueagain: sure
[22:44:19] <banana_> yeah don't be that asshole, but imo I think you should reflect and figure out why they act that way
[22:44:22] <ljharb> blueagain: but that still doesn't mean your company wouldn't be better off without him, or, by training him on how to communicate
[22:44:45] <ljharb> blueagain: iow, very often, people like that cost more than they provide, it's just hard to realize that
[22:44:53] <banana_> and how to mitigate genuine and good influences that make them assholes, while not being one
[22:44:55] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[22:45:23] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[22:45:48] <blueagain> ljharb: yeah, but I have no leeway here. It's not an issue major enough for me to go to the boss about it, in fact it would probably get me in trouble if I did ("trying to reeducate other people"). Not my job really.
[22:46:10] <banana_> like maybe asshole A is an asshole because the developers they interact with a lot don't know as much as them and they notice those people make it harder on them, plus theyre stuck explaining every little thing to them, so they want more power in the situation even it's not annoited by the company
[22:46:27] <banana_> so they start dismissing people and/or ignoring them without getting fired or in trouble
[22:46:38] <ljharb> blueagain: sure. but whose job is it then
[22:47:25] <banana_> blueagain: this is imo why you get better at politics, because then asshole dont matter and you interact with them and a certain way based on your best self-interest
[22:47:26] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:47:50] <blueagain> ljharb: management's
[22:47:50] <banana_> one situation you might be nice back and suck up to asshole A, or sometimes you side against them in another
[22:48:09] <jwpapi> why is all education out there just for `landing a job` in tech and not how to become an independent developer? I want to make money with coding, but not have a job lol
[22:48:38] <systemfault> jwpapi: Not everyone is like you...
[22:48:45] <ljharb> blueagain: and are they doing it?
[22:48:53] <ljharb> blueagain: who holds them accountable?
[22:49:00] <jwpapi> systemfault: But it seems like coders are overprp
[22:49:01] <systemfault> jwpapi: Some people, especially those with families.. often prefer a more stable income that a job provides
[22:49:12] <banana_> basically because developers don't rule society, that's more of a new england country club members who aren't programmers
[22:49:21] <jwpapi>  But it seems like coders are overproportionally are looking for a job
[22:49:23] <blueagain> ljharb: no. I don't think they don't care enough because money's flowing in.
[22:49:28] <banana_> if programmers were the rulers then yeah you wouldnt need a job
[22:49:31] <blueagain> ljharb: shareholders
[22:49:37] <blueagain> ljharb: who care about money flowing in.
[22:50:17] <jwpapi> systemfault: all my friends want to get out of their jobs (non-developers), while all developers want a job. While at the same time developing is in such big demand?
[22:50:32] <jwpapi> Doesn’t go well together imho.
[22:50:37] <banana_> I'm sorry but if you lived in a kingdom and the king was an asshole to you... youd probably have to suck it up
[22:50:46] <jwpapi> So either developer jobs are tremendously better than normal jobs
[22:50:50] <banana_> OR plot against him if enough people didnt like him
[22:51:10] <jwpapi> Or it is way tougher to make your own business being a developer than doing something else
[22:51:17] <banana_> it's about how you deal with assholes and why... imo
[22:51:19] <systemfault> jwpapi: Because the alternatives is having to find clients yourself.... and good luck finding a big one if you just started, you could be doing small wordpress websites for mom & pops shops for a while
[22:51:34] <jwpapi> systemfault: You could build plugins?
[22:51:38] <blueagain> banana_: yeah, but I'm not really interested in politics
[22:51:54] <jwpapi> systemfault: Yes that’s the discussion I was looking for.
[22:52:12] <banana_> blueagain: I wasnt either but yeah I dealt with a lot of assholes and jerks, a lot of them were playing politics so I was forced to adapt
[22:52:18] <jwpapi> You could also build plugins or do freelance work for like codeable for example
[22:52:21] *** Joins: nomic (~nomic@185.198.243.229)
[22:52:23] <banana_> well not actually forced but heavily influenced
[22:52:39] <systemfault> jwpapi: Does it pay the bills... that's the question here.
[22:52:49] <banana_> I can a book recommendation if youre interested in the future
[22:52:49] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:52:57] <systemfault> If it wasn't for that, I'd be doing open source every day
[22:53:04] <banana_> give a ^
[22:53:13] <jwpapi> systemfault: I mean you can start building shops and then you start building plugins out of need and then you have passive income?
[22:53:58] <jwpapi> Yeah I’m wondering, because for now I’ve never thought about getting a job tbh
[22:54:02] <blueagain> banana_: so you're like, an actual politician / an aspiring one?
[22:54:07] <jwpapi> But maybe it’s the best thing for me
[22:54:12] <banana_> no not what I mean at all
[22:54:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:54:38] <banana_> life, and especially in a society is about getting influence over people, forming relationships I think anyway
[22:54:48] <systemfault> jwpapi: If you're young with no family, take risks man... I know I should have.
[22:54:52] <KevinX> If you want to devote your life to open source, I recommend you really cut down on your expenses
[22:55:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:55:24] <jwpapi> systemfault: I have enough savings to live a couple of years and I already have 5-10k almost passive income /month
[22:55:33] <blueagain> banana_: I was also never interested in workplace politics. always felt people waste more time on complaining than getting things done.
[22:55:45] <banana_> I was just suggesting that if you're so perturbed over assholes perhaps youre missing the bigger picture
[22:55:47] <jwpapi> And I don’t really spend tons. I live in an expensive city tho
[22:55:50] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[22:56:00] <banana_> haha fail with using "perhaps"
[22:56:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:56:34] <banana_> blueagain: true funny enough this book I can recommend talks about complainers
[22:56:43] <banana_> how you should deal with them
[22:57:12] <blueagain> banana_: it's been much better since covid since I don't have to share an office with them
[22:57:22] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:f04b:4c9:8faf:c75a) (Quit: Textual IRC Client: www.textualapp.com)
[22:57:43] <systemfault> jwpapi: You already won the game, you're better off that 99% of people... take a chance
[22:57:58] <jwpapi> systemfault: so the reason so many people are looking for a job is because they have to. Not because a development job is fantastic
[22:57:58] <systemfault> (including myself)
[22:58:26] <jwpapi> I mean there is a lot of fulfillment in doing meaningful work as well. I just learned that.
[22:58:26] <systemfault> Stable income, not being good at getting clients... there are multiple reasons
[22:59:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:59:47] *** Joins: taupiqueur_ (~taupiqueu@94.144.204.77.rev.sfr.net)
[22:59:56] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[23:00:00] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[23:00:13] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:00:50] <banana_> I guess to expand the king example, why it's important your options with dealing with a hypothetical asshole king, is because your options are limited. if you complain in front of him about him you'll get executed. lets say an absolute monarch
[23:01:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:01:05] <banana_> so complaining about him in front of him isnt an option
[23:01:32] <dminuoso> Hi. I have an ISO8601 timestamp that I can parse with `new Date(str)`, what facilities should I use to obtain a timestamp `%h:%m:%s` like `19:03:03` in the current locale?
[23:01:36] <banana_> obviously you can complain in front of a coworker about him/her but your options are still limited just less limited
[23:03:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:03:22] *** Quits: nomic (~nomic@185.198.243.229) (K-Lined)
[23:04:59] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[23:05:17] <buu> Pop quiz: how do you define something that isn't political!
[23:05:24] <systemfault> dminuoso: You have to build that string yourself.
[23:05:49] <systemfault> buu: essential
[23:05:57] <buu> what
[23:06:09] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Read error: Connection reset by peer)
[23:06:29] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[23:06:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:06:50] *** Quits: taupiqueur_ (~taupiqueu@94.144.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[23:07:08] <buu> Anyway the word political has become essentially meaningless, if it ever held meaning
[23:07:15] *** Quits: rwtrecs (~rewrit3@user/rewrit3) (Remote host closed the connection)
[23:07:53] *** Joins: rwtrecs (~rewrit3@user/rewrit3)
[23:08:11] <buu> People tend to use it as "things other people do I don't like"
[23:08:20] <buu> Sort of an outgrowth of "political correctness"
[23:08:49] <buu> "Political correctness is when other people complain about something I do, politics is when they do something about it"
[23:09:12] <chao> n> Intl.DateTimeFormat(new Date(), { hour: 'numeric', minute: 'numeric', second: 'numeric' })
[23:09:13] <jellobot> (okay) DateTimeFormat [Intl.DateTimeFormat] {}
[23:09:15] <chao> oof
[23:09:24] <blueagain> buu: I agree. That's kind of why I think it's a futile attempt when people say "no politics" in a given community.
[23:09:34] <blueagain> It's like, people are political animals. They have opinions about this world.
[23:09:37] *** Parts: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Leaving)
[23:09:46] <chao> n> new (Intl.DateTimeFormat(, { hour: 'numeric', minute: 'numeric', second: 'numeric' })).format(new Date())
[23:09:47] <jellobot> (fail) SyntaxError: Unexpected token ','
[23:09:57] <chao> n> new (Intl.DateTimeFormat(undefined, { hour: 'numeric', minute: 'numeric', second: 'numeric' })).format(new Date())
[23:09:58] <jellobot> (fail) TypeError: Intl.DateTimeFormat(...).format is not a constructor
[23:10:01] <systemfault> lol
[23:10:02] <chao> fuck off man
[23:10:09] *** chao is now known as stenno
[23:10:12] <stenno> fail
[23:10:15] <systemfault> n> (Intl.DateTimeFormat(undefined, { hour: 'numeric', minute: 'numeric', second: 'numeric' })).format(new Date())
[23:10:16] <jellobot> (okay) '7:40:15 PM'
[23:10:22] <stenno> thx v_v
[23:10:38] <dminuoso> stenno: Yeah I stared at Intl for a long while, but it seems all it can do is produce things in pre-defined locale formats.
[23:10:48] <dminuoso> systemfault: The thing is, I dont want to do localization myself.
[23:10:51] <dminuoso> That's a crazy thing.
[23:10:58] <stenno> temporal when
[23:11:05] *** Quits: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br) (Ping timeout: 252 seconds)
[23:11:16] <systemfault> dminuoso: You said you want to manually specify the format using a string, no?
[23:11:27] <systemfault> dminuoso: Otherwise, stenno is right, you can use the Intl APIs
[23:12:08] <banana_> blueagain: I think there's philosophical discussions on this. afaik there's something mentioned about having a society is what makes people strive for power not possible in an unorganized existence
[23:12:15] <banana_> cant recall what im exactly referring to
[23:12:21] <dminuoso> systemfault: Does Intl give me getHours in a locale/zone?
[23:13:23] *** Quits: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:13:28] <dminuoso> The more I stare at this, Im starting to think this is fundamentally not possible in JavaScript without writing a whole localization library myself.
[23:13:28] <systemfault> n> console.log(new Intl.DateTimeFormat('en-US').format(new Date()));
[23:13:29] <jellobot> (okay) 2/24/2022
[23:13:40] <systemfault> Oops, wrong one
[23:13:58] *** Joins: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net)
[23:14:07] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:14:21] *** Quits: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[23:14:35] <systemfault> n> new Intl.DateTimeFormat('en-US').format(date);
[23:14:35] <jellobot> (fail) ReferenceError: date is not defined
[23:14:41] <systemfault> n> new Intl.DateTimeFormat('en-US').format(new Date());
[23:14:41] <jellobot> (okay) '2/24/2022'
[23:14:46] *** Joins: diamondbond_ (~diamondbo@175.157.92.206)
[23:15:05] <systemfault> I hate those APIs... but it should be this one https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat
[23:15:13] *** Joins: Arisco (~ckmptnml@189-31-251-104.fozit701.dsl.brasiltelecom.net.br)
[23:16:11] <systemfault> n> new Intl.DateTimeFormat('fr', { hour: 'numeric', hourCycle: 'h12', dayPeriod: 'long', timeZone: 'UTC' }).format(new Date())
[23:16:11] <jellobot> (okay) '7 du soir'
[23:16:14] <dminuoso> systemfault: And that thing does not seem to allow for a custom format string.
[23:16:15] <systemfault> n> new Intl.DateTimeFormat('en', { hour: 'numeric', hourCycle: 'h12', dayPeriod: 'long', timeZone: 'UTC' }).format(new Date())
[23:16:16] <jellobot> (okay) '7 in the evening'
[23:16:33] <systemfault> If it's custom then it's not localized...
[23:16:36] <systemfault> Pick one.
[23:16:39] <dminuoso> systemfault: That makes no sense.
[23:16:58] <dminuoso> systemfault: I have a point in absolute time, I want the hours and minutes in a particualr locale.
[23:17:10] <dminuoso> This seems like a *very* basic thing to ask. *shrugs*
[23:17:25] <systemfault> If you only care about the components then you use the getters and build the string yourself.
[23:17:34] <dminuoso> systemfault: again, then I have to do localization myself.
[23:17:44] <dminuoso> How would I know how many hours a given date object is in an arbitrary locale?
[23:17:59] *** Quits: substructure (~substruct@141.98.255.145) (Quit: Client closed)
[23:18:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[23:18:17] *** Joins: substructure (~substruct@141.98.255.145)
[23:18:37] <systemfault> It's always the current locale of the browser, which is usually what people want, no?
[23:20:58] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:21:00] <dminuoso> systemfault: No it does not.
[23:21:00] *** Quits: diamondbond_ (~diamondbo@175.157.92.206) (Ping timeout: 240 seconds)
[23:21:02] <dminuoso> (new Date("2012-03-29T10:05:45-06:00")).getHours()
[23:21:06] *** Joins: Betal (~Betal@user/betal)
[23:21:15] <dminuoso> This gives you the hours in the the specified timezone
[23:21:15] <systemfault> n> (new Date("2012-03-29T10:05:45-06:00")).getHours()
[23:21:15] <jellobot> (okay) 16
[23:21:29] <dminuoso> uh
[23:21:49] <dminuoso> systemfault: Ah okay. This might be acceptable, but it's still sad that someone makes the assumption that this is what I want.
[23:22:05] <systemfault> Dates are a pain... :/
[23:22:10] <dminuoso> If I wanted a locale selector dialog, I couldnt possibly do this without inventing my own localization library
[23:22:28] <systemfault> I believe you can use the Intl stuff and extract specific components
[23:22:40] <dminuoso> If I can, then I have absolutely no clue how to do this *shrugs*
[23:22:48] <buu> Aren't locale selectors built into browsers
[23:22:55] <buu> also human dates are madness
[23:23:11] <systemfault> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts Maybe?
[23:23:15] <substructure> Ijharb: "it means that "linking code to package contents" can't reliably mitigate these attacks" We'll never get perfection in security, I'm not claiming that. The goal is making it more difficult for injecting malicious code to begin with. Policy based approaches have their benefits, but we don't use them in isolation. This is analogous to running
[23:23:15] <substructure> untrusted binaries while using SELinux/AppArmor/eBPF. If we can't see all the source code how can we trust that it won't abuse allowed capabilities of the policy? (Sorry for the delay, I've read your messages a few times to try and better understand your perspective.)
[23:23:16] <substructure> "there's simply no way to map with certainty a repo to the package contents" This is currently the case, but this work specifically aims to make this possible. If you'll allow for the sake of argument that this can be done, would you then have greater confidence in the code you are running not being malicious? Would detailed examples applied to
[23:23:16] <substructure> previous attacks help persuade? Concrete examples may help me understand your reservations better.
[23:23:17] <substructure> "npm does not (and should not, and will not) require a repository to exist" Can you expand on why you feel this way? My fear would be that npm would require a specific company be used.
[23:23:46] <systemfault> I hope Temporal will be a lot better than Date + Intl
[23:23:59] <onosendi> Yeah, me too.
[23:24:24] <blueagain> Temporal seems nice
[23:24:25] *** Joins: eugercek (~user@user/eugercek)
[23:24:33] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[23:24:40] <systemfault> I haven't read the spec yet... :/
[23:24:50] <joepie91> I've found Temporal to work pretty well
[23:24:57] <joepie91> API-wise
[23:25:01] <joepie91> MUCH more sensible than Date
[23:25:27] *** Quits: rwtrecs (~rewrit3@user/rewrit3) (Quit: rwtrecs)
[23:25:35] <blueagain> It's quite promising. And I believe one of the author of momentjs was board, so probably someone who knows what he's doing
[23:25:36] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[23:25:43] <blueagain> on board*
[23:26:02] <onosendi> Isn't ljharb heavily involved in Temporal?
[23:26:38] <dminuoso> systemfault: Wouldnt know, Intl seems like it was designed by the XML fetishists. The UX is downright horrid, as its its documentation.
[23:27:06] <systemfault> Date was so bad that it was included in Java 1.0 and was already deprecated and replaced by 1.1 or 1.2
[23:27:14] <dminuoso> Im so close to just offloading this to my backend server
[23:27:26] <systemfault> (JS' Date API is a copy of the Java one)
[23:27:27] <dminuoso> because in most other languages ergonomic time/locale is a solved thing..
[23:27:38] <blueagain> systemfault: lol, was going to say just that.
[23:27:49] <ljharb> onosendi: no
[23:28:09] <ljharb> substructure: what i'm saying is, that it's a bad avenue to pursue, because it has a high risk of false positives
[23:28:26] <ljharb> substructure: and false positives in security are often far worse than false negatives, because they undermine confidence in *the security system itself*
[23:28:41] *** Quits: src (~src@user/src) (Quit: Leaving)
[23:28:50] <ljharb> substructure: i won't allow that it can be done, because the nature of javascript permanently prevents it from being done.
[23:29:21] <ljharb> substructure: yes, if npm required a repo, then they'd either force github - which isn't what anyone wants - or they'd have to allow anything, and "anything" could be "a repo that actually hides its real contents"
[23:29:26] *** Joins: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net)
[23:29:36] <ljharb> substructure: iow, "forcing github" would be the only option. and they couldn't do that retroactively on all existing packages.
[23:29:50] <blueagain> is there, by the way (sorry I'm waking sleeping dogs here), not a way to introduce breaking changes into JS in the form of opt-ins? I mean, I get the preferred way is to preserve compatibility, but was the way pursued with e.g. 'use strict' so bad?
[23:30:19] <systemfault> 'use strict, but for realz this time, I swear bro';
[23:30:37] <blueagain> asking for a friend
[23:30:42] *** Quits: naan (~Naan@user/naan) (Ping timeout: 256 seconds)
[23:31:47] <blueagain> I'm thinking it could possibly make implementations much more complex, and that's the reason it's not viable
[23:32:32] <systemfault> I believe it opens a door to a lot of shit...
[23:32:50] <systemfault> IIRC, google wanted to do that for his "typed js" thing
[23:33:50] <systemfault> Ah, it wasn't for types.. it was for a more restricted set of JS
[23:33:56] <systemfault> 'use strong';
[23:34:00] <blueagain> lol
[23:34:03] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[23:34:48] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:37:37] <dminuoso> blueagain: So this could cause strange fragmentation and hinder adoption.
[23:37:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:37:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:37:54] *** Joins: wroathe (~wroathe@user/wroathe)
[23:38:09] <dminuoso> Fragmentation in the sense that you might have to invent a new `language mode` every time you want to change something, so the language becomes extension centric if you pursue this path.
[23:38:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:38:48] <dminuoso> But there will be little incentive for people to adopt, and I reckon if you have multiple features, it can become quite challenging to define the semantics of new features in the presence of a bunch of optional features
[23:39:16] <blueagain> Yeah, I guess you're right. I'm thinking of python 2 vs 3 as a counter example, and that's immeasurable mess
[23:39:17] <dminuoso> You end up with potentially quadratic combinations of features that might be enabled..
[23:41:17] <systemfault> Hey, you end up with Haskell!
[23:41:34] <systemfault> GHC Haskell anyway :p
[23:42:03] <systemfault> Okay.. just slightly trolling here...
[23:42:52] <ljharb> blueagain: no, there's no way. we must not ever break the web.
[23:43:00] <ljharb> blueagain: and "versions" of JS would be very bad also.
[23:43:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:43:47] <ljharb> the reason strong mode was bad wasn't just that it was a new mode, it was because google determined that *the entire internet* didn't have enough type-related bugs to be worth it
[23:43:52] <ljharb> cough cough typescript
[23:44:31] <blueagain> the web is already broken
[23:44:42] <blueagain> and it's not because of JS
[23:45:10] *** Joins: crashrep (~crashrep@user/crashrep)
[23:46:01] <dminuoso> systemfault: In case of GHC Haskell extensions are not fragmentation of language standards, they are rather candidates for future language standards.
[23:46:02] <systemfault> BUT IT'S STRONG! SO STRONG!
[23:46:03] <ljharb> or a lack of static/strong typing :-)
[23:46:54] *** Joins: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net)
[23:47:26] <ezakimak> on npm, what's the diff between systeminformation and systeminformation-enhanced. I don't see anything in the docs explaining the fork
[23:49:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:49:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:49:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:49:49] *** Joins: wroathe (~wroathe@user/wroathe)
[23:49:55] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:50:11] *** Joins: johnmuhl (584df448eb@user/johnmuhl)
[23:50:13] <ljharb> ezakimak: you'd have to ask them; there's no guaranteed relationship between packages implied by them having similar names
[23:50:15] *** Quits: kakashiAL (~kakashi@41.143.6.180) (Ping timeout: 256 seconds)
[23:50:31] <ljharb> ezakimak: altho https://www.npmjs.com/package/systeminformation-enhanced doesn't exist
[23:51:30] <ezakimak> they both point to the same github
[23:51:57] <ezakimak> probably a trojan horse
[23:52:03] *** Joins: crashrep (~crashrep@user/crashrep)
[23:52:08] <ljharb> ezakimak: the second one *doesn't exist*
[23:52:12] <ljharb> ezakimak: so it doesn't point anywhere
[23:52:19] <ljharb> ezakimak: unless it's on a private registry, in which case, ask your coworkers
[23:52:27] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[23:54:29] <stenno> n> (new Date("2012-03-29T10:05:45-06:00Z")).getHours()
[23:54:30] <jellobot> (okay) NaN
[23:54:37] <stenno> n> (new Date("2012-03-29T10:05:45Z")).getHours()
[23:54:38] <jellobot> (okay) 10
[23:54:42] <stenno> n> (new Date("2012-03-29T10:05:45")).getHours()
[23:54:42] <jellobot> (okay) 10
[23:54:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:55:01] <stenno> hmm
[23:55:14] <stenno> n> (new Date()).getHours()
[23:55:15] <jellobot> (okay) 20
[23:55:19] <silly> n> (new Date("2012-03-29T10:05:45-06:00")).getHours()
[23:55:20] <jellobot> (okay) 16
[23:55:22] <stenno> utc+0
[23:55:34] <sheetjs> having fun?
[23:55:50] *** Quits: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:55:54] <stenno> yeah
[23:55:57] <stenno> dates are strange
[23:56:08] *** Joins: hojasuelta (~hojasuelt@c-76-104-207-0.hsd1.wa.comcast.net)
[23:56:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:56:45] <sheetjs> every city in the US is a date according to big G
[23:56:52] <sheetjs> n> new Date("New York NY 10022")
[23:56:53] <jellobot> (okay) +010022-01-01T00:00:00.000Z
[23:56:56] <stenno> zulu time is local time
[23:57:17] <sheetjs> n> new Date("Beverly Hills 90210")
[23:57:18] <jellobot> (okay) +090210-01-01T00:00:00.000Z
[23:57:21] <stenno> n> new Date("Hello world 23")
[23:57:21] <jellobot> (okay) Invalid Date
[23:57:32] <sheetjs> Hello world 23 is not a city in the US :P
[23:57:39] <stenno> n> new Date("Hello world 232323")
[23:57:40] <jellobot> (okay) +232323-01-01T00:00:00.000Z
[23:57:44] <stenno> ok
[23:57:48] <sheetjs> try 2 instead
[23:57:53] <sheetjs> n> new Date("Hello world 2")
[23:57:53] <jellobot> (okay) 2001-02-01T00:00:00.000Z
[23:58:08] <sheetjs> so for >= 3 digits, it interprets the number as the year
[23:58:15] <stenno> thats so stupid lol
[23:58:21] <stenno> n> new  Date('--3')
[23:58:22] <jellobot> (okay) 2001-03-01T00:00:00.000Z
[23:58:23] <sheetjs> for 1-2 digits it tries to interpret as a month
[23:58:35] <rendar> if i have a string like "AA      A" and i set that string a span's text with span.textContent = that_string;  why multiple spaces are not rendered correctly? :(
[23:58:47] <sheetjs> stenno: there are quite literally hundreds of issues in the sheetjs bug tracker that boil down to v8 date parsing being way too loose
[23:59:01] <stenno> is that v8's fault and not the specs fault?
[23:59:24] <sheetjs> it's ultimately the spec's fault for the magical phrase "implementation-dependent"
[23:59:30] <stenno> fair
[23:59:30] *** Quits: ttys000 (~ttys000@user/ttys000) (Ping timeout: 252 seconds)
[23:59:45] <sheetjs> but it's also google's fault for a lack of thought
