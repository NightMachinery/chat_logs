[00:01:07] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:04:13] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:05:57] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:06:05] *** Joins: tomathy (~jenova@user/quetzl)
[00:08:01] <tomathy> any hopes Playfair will be modernised?
[00:08:22] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[00:08:36] <tomathy> can a old broken cipher be updated?
[00:09:53] <tomathy> maybe make it a triangle
[00:09:58] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[00:11:12] *** Quits: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[00:11:30] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[00:11:42] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:21:02] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[00:21:36] <dude12312414> what
[00:22:06] <tomathy> i really like the playfair algorithm
[00:22:18] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[00:22:48] <dude12312414> i doubt anything like Playfair or other classical ciphers could get modernized (in the sense of being secure today)
[00:23:10] <tomathy> :'(
[00:23:12] <dude12312414> they are trivial to break, especially with known plaintext
[00:23:58] <tomathy> i tried to make an alg of playfair where the grid rotates on every encryption
[00:24:20] <dude12312414> that starts to sound like Enigma
[00:24:21] <tomathy> but found it too hard, it was equivalent to an iterative "all permutations" algorithm
[00:24:30] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[00:24:39] <tomathy> hmm no just the grid no other ones
[00:27:22] *** Joins: cryptopal (~cryptopal@i5E861F8B.versanet.de)
[00:28:05] <cryptopal> can you use a CRL to revoke a intermediate CA ?
[00:29:58] <Peng> If it specifies one, sure.
[00:30:02] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Ping timeout: 240 seconds)
[00:30:31] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[00:32:54] *** Hash is now known as EnchanterTim
[00:33:01] <cryptopal> so this will block all certs issued by the intermediate CA? CRL is not just for end entity certificates?
[00:33:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:59] *** Joins: izulium (~izulium@91-172-199-224.subs.proxad.net)
[00:36:16] <Peng> One, clients are poor at checking revocation.
[00:37:51] <Peng> Two, a client may try to find an alternate path that is still trusted (if the intermediate CA had multiple certificates and some remain valid).
[00:38:23] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:39:47] <Alipha> Three, (perhaps a sub bullet of One) attackers can prevent the revocation check, in which case, clients will often trust in the event of a failed check
[00:41:28] *** Quits: Mutsuhito (sid13530@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[00:42:07] *** Joins: Mutsuhito (sid13530@ilkley.irccloud.com)
[00:42:38] <cryptopal> tbh i have never used or seen such a list before, couldn't i just  create a list myself and put (intermediate) CAs in which I distrust?
[00:45:10] *** Quits: fulldecent (~textual@wikipedia/fulldecent) (Quit: Textual IRC Client: www.textualapp.com)
[00:45:10] <sarnold> cryptopal: on debian and derivatives, dpkg-reconfigure ca-certificates will probably do that
[00:45:35] <Peng> cryptopal: What are you trying to do? Do you run a CA?
[00:45:39] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[00:46:06] *** Joins: sm2n (~sm2n@user/sm2n)
[00:46:51] <cryptopal> sarnold: but only for root CAs, not intermediate ones
[00:47:05] <sarnold> ahh
[00:47:37] <cryptopal> Peng: trust a root CA while not trusting  all intermediates it signed
[00:48:01] *** Parts: rasta (~rasta@user/felco) ()
[00:48:14] <Peng> I think one of NSS's enforcement mechanisms is to add a (root or intermediate) CA and mark it explicitly distrusted.
[00:49:16] <Peng> (And then sometimes people pull a complete list of certificates and trust them without checking the trust bit...)
[00:51:06] *** EnchanterTim is now known as Hash
[00:57:25] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:58:38] *** Parts: tomathy (~jenova@user/quetzl) (Leaving)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:05:01] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[01:06:41] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[01:10:07] *** Joins: CryptoClub (~fafs@87.125.251.76)
[01:10:34] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[01:11:36] *** Joins: sm2n (~sm2n@user/sm2n)
[01:13:05] *** Quits: izulium (~izulium@91-172-199-224.subs.proxad.net) (Ping timeout: 256 seconds)
[01:13:53] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[01:14:13] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[01:14:52] *** Joins: izulium (~izulium@91-172-199-224.subs.proxad.net)
[01:17:14] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[01:25:34] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[01:37:02] *** Quits: zro (~zro@user/zro) (Ping timeout: 240 seconds)
[01:39:59] *** Quits: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:48:34] *** Church is now known as Xf
[01:49:35] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 264 seconds)
[01:52:22] <Hash> Hi guys
[01:52:32] <Hash> What means 'collission' in a hash algorithm?
[01:53:06] <Hash> H(x) hs tob e one way, collission free, fixed length output
[01:53:29] <int-e> A collision is a pair of distinct inputs x and y with the same hash: H(x) = H(y).
[01:53:37] <Hash> Does collission means if you have the two diff inputs, youget the ame exact hash
[01:54:09] <Hash> Ok thanks
[01:54:14] <Hash> That's good Enlighs.
[01:54:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:55:56] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[01:56:57] <int-e> Mathematically, collisions must exist (because inputs can be longer than the fixed length hash output). However, hash functions are required to be collision-resistant, intuitively meaning that it's impractical to find actual collisions.
[01:59:08] <Hash> I see
[01:59:24] <Alipha> SHA256 has a 256-bit hash output, so given H(x), there should be about a 1 in 2^256 chance that H(y) is the same
[01:59:38] <Hash> Input is bigger, few gb of file maybe, and hash is fixed length of it, so mathematically speaking of possibilities, collissions are still inescapable.
[02:00:11] <Hash> That's a pretty big number.
[02:00:27] <Hash> 2 ^ 256 is pretty ginormous.
[02:00:40] <Hash> It's order of magnitude higher than even ipv6
[02:00:46] <Hash> Which is 2^128 wow.
[02:01:32] *** Quits: defiant (~defiant@user/defiant) (Ping timeout: 265 seconds)
[02:01:48] <Alipha> everything in crypto is ginormous. or miniscule
[02:01:53] <Hash> Ok
[02:02:17] <Hash> On to next topic, hash salting. One thing I don't understand. Why do they store hash with the password in the db?
[02:02:32] <Hash> Doesn't that defeat the purpose if the db is hacked?
[02:02:43] <ericonr> They only store hash
[02:02:50] <Alipha> (and the salt)
[02:02:56] <int-e> Hash: Note that if you generate 2^128 hashes then they'll make about 2^255 pairs, so there's a reasonable chance that you have a collision at that point. (See: birthday paradox, birthday attack)
[02:02:56] <Hash> Not the hashed password as well?
[02:03:16] <Hash> hmm ok 
[02:03:26] <Hash> ok ill check out those
[02:03:28] <ericonr> Hash: the hash in this context is the hashed password 
[02:03:30] <Alipha> Hash: eh, "hash" = "hashed password"? or what do you think the difference is?
[02:03:41] <Hash> Ok so in the db
[02:03:47] <Hash> You store not plaintext but the hashed password
[02:03:53] <Hash> You also store the salt
[02:04:00] <int-e> (Of course 2^128 is absurdly big.)
[02:04:10] <Hash> So when you do password checking or authentication, user types in pass, you hash+salt and match against the db hash
[02:04:13] <Hash> Right?
[02:04:18] *** Joins: namkeleser (~namkelese@101.179.132.178)
[02:04:19] <ericonr> Yes
[02:04:37] <Hash> So if the attacker has access to the db, he has the hashed pass and the salt, is this insecure?
[02:04:55] <ericonr> int-e: 2^128 feels big, but ISPs giving out /64 makes it feel small to me :(
[02:05:05] <ericonr> Hash: hash functions are supposedly one way 
[02:05:11] <Hash> using that salt, for a particular user, can he still generate ranbiw tables of that hash for all the possible combinations?
[02:05:18] <int-e> the problem with that is that passwords often have very low entropy; they are guessable
[02:05:31] <Hash> I am thinking and I could be wron ghere
[02:05:43] <ericonr> Yes, it's attackable
[02:05:55] <Hash> But I am thinking guys that hash salting doesn't really prevent against a targetted attack if you have the user's salt
[02:05:59] <Hash> Ok cool
[02:06:01] <ericonr> But it's way less so than a db with raw passwords 
[02:06:02] <Hash> Thanks for confirming
[02:06:06] <ericonr> Well
[02:06:14] <ericonr> Salt protects against a general attack 
[02:06:17] <Alipha> Hash: it doesn't make sense to store a rainbow table if you're only able to use it on one user. but yes, the attacker would attempt to try all possible passwords
[02:06:18] <Hash> yup
[02:06:21] <Hash> I figured it out
[02:06:22] <Hash> Thanks 
[02:06:32] <ericonr> Ali
[02:06:34] <ericonr> Uh
[02:06:40] <Hash> That makes sense
[02:06:49] <ericonr> Alipha: if you *really* *really* hated someone, it might 
[02:06:53] <iz> the salt prevents the feasability of creating a rainbow table for every salt
[02:07:01] <ericonr> Assuming that person is dead or in a coma so you can't bust their kneecaps
[02:07:05] <Hash> Right a general attack.
[02:07:10] <iz> both in storage space and time needed
[02:07:15] <Hash> That's pretty cool
[02:07:38] <Alipha> ericonr: um, "rainbow table" implies that you're storing all possible {password} -> {hash} combinations. there's no reason to store them.
[02:08:01] <Hash> every user should have a diff unique salt.
[02:08:08] <Hash> if all users have a same salt, you defeat yourself IT hink
[02:08:10] <Hash> think*
[02:08:19] <ericonr> Alipha: me?
[02:08:48] <ericonr> Ah I see 
[02:09:00] <ericonr> It wouldn't be a rainbow table, just a brute force attack :p
[02:09:14] <Hash> rainbow is brute force, just pre generated
[02:09:22] <Hash> So you don't have to do computing power too much
[02:10:06] <Alipha> Hash: it's not often talked about (i'm not sure why), but in addition to having a per-user salt, you can have a system-wide "pepper" also: if you store the pepper separate from the database, then hopefully an attacker who discovers the db won't discover the pepper and therefore be unable to do any attacks on the password hashes
[02:10:09] <iz> you just have to do it mostly all ahead of time
[02:10:17] <Hash> *nod*
[02:10:28] <Hash> Hash must be salted and peppered to taste good.
[02:11:02] <Hash> No pepper mention in my hash chapter though
[02:11:05] <Hash> peculiar.
[02:11:10] <Hash> perhaps it's in other chapter.
[02:11:44] <Hash> The biggest problem with MD5 is that it is not collision resistant.
[02:11:53] <Hash> So SHA1 was introduced to use
[02:12:12] *** Quits: cryptopal (~cryptopal@i5E861F8B.versanet.de) (Quit: Client closed)
[02:12:52] <Hash> MD 6 uses a Merkle Tree-like structure to allow for immense parallel computation of hashes for very long inputs <- had no idea there was an md6
[02:13:01] <ericonr> Alipha: oh, that's a nice concept. One more layer to the security onion \o/
[02:13:33] <Hash> On July 1, 2009, Rivest posted a comment at NIST that MD6 is not yet ready to be a candidate for SHA-3 because of speed issues and other concerns
[02:13:36] <ericonr> If you're using something like argon2, do you just append to the salt?
[02:13:38] <Hash> 'other'.
[02:14:20] <Hash> Google recommends SHA3 for hashing. But I wonder how old my textbook is.
[02:14:43] <ioxzev1z> Hash, SHA2 is still fine, no problems with it aiui
[02:14:48] <Hash> SHA (all versions) is considered secure and collision free.
[02:14:55] <ioxzev1z> SHA3 was introduced as a separate type of hash to SHA2
[02:14:55] <Hash> Yes sir. I read it.
[02:15:05] <ioxzev1z> Just commenting on the google comment
[02:15:18] <Alipha> Hash: SHA1 is not secure
[02:15:41] <Hash> EC-Council Certified Encryption Specialist(ECES) Version 2
[02:16:09] <Hash> Courseware and Lab Manual
[02:16:12] *** yanmaani2 is now known as yanmaani
[02:16:24] <Hash> That's the book I am reading and I copy pasted it.
[02:16:34] <Hash> I'm trying to find out if my book is old.
[02:17:34] <ioxzev1z> Hash, most probably, yes.
[02:17:40] <Hash> https://duo.com/decipher/sha-1-fully-and-practically-broken-by-new-collision#:~:text=UPDATE%2D%2DSHA%2D1%2C%20the,chosen%2Dprefix%20collision%20for%20it.
[02:17:53] <Hash> I hate how it copies text when i search
[02:19:47] *** Joins: igemnace (~ian@user/igemnace)
[02:22:13] <int-e> January 7th, 2020
[02:23:01] <Hash> [Insert Publisher Location]: International Council of E-Commerce Consultants (EC Council); 2017.
[02:23:05] <Hash> Book is old. :(
[02:23:18] <Hash> Hmm. That's something I need to bring up with the college people.
[02:24:52] *** Quits: izulium (~izulium@91-172-199-224.subs.proxad.net) (Quit: Bye)
[02:27:01] <Hash> Do you think governments have secret algorithms they don't relesae to publics?
[02:27:35] <Hash> Modern cryptography is not based on keeping the algorithm secret, is one of the things
[02:29:34] <Hash> But I wonder if they do. Question 1: Consider Kerckhoff’s principle. Do you agree with this? Why or why not? What role does peer review play in the security of cryptographic algorithms?
[02:29:40] <Alipha> they do. and a little obscurity doesn't hurt either. though then you risk that your algorithm doesn't get the scrutiny of the broader community
[02:29:55] <Hash> I mean. If they don't even know your algorith, that does add a layer to it.
[02:29:59] <Hash> Right
[02:30:13] <Hash> I mean I know security by obsucirty is not recommended obviously
[02:30:31] <Hash> But I do thing it has some merit, because even in nature, obscurity is used primarily as a primary defense mechanism
[02:30:51] <Hash> Consider camoflouage. If you blend in and they can't even tell you're there, you're pretty safe.
[02:31:06] <Hash> So obscurity DOES add some security, but I think one should not rely on it completely/entirely
[02:32:38] <Hash> Reflective Questions: Question 2: Why do you think AES allows three different key sizes, rather than simply using the longest and strongest? <- for this I guess because of computation power on embedded or smaller devices?
[02:32:45] <Hash> Bigger key == more computation power used
[02:33:03] <Hash> ese questions can be used for classroom discussion or for student reflection. <- these are not test/quiz/homework.
[02:33:45] <Hash> So for smaller embedded devices doing AES encryption for example, can use smaller key size. And for bigger cpu you an use bigger key size. 
[02:33:54] <Hash> Or my thinking could be totally wrong.
[02:34:36] <Hash> Question 3: Obviously larger key sizes make brute force attacks less likely. Why do you think most symmetric algorithms use 256 bit or smaller keys? Why not use 1,024 bit keys?  <-- I think, once again, because of computation power?
[02:34:44] <Hash> It would slow things down?
[02:36:21] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[02:36:31] <Alipha> yeah
[02:38:32] <int-e> Brute force is just one possible attack vector; it makes no sense to push the cost of brute force a multitude of magnitudes over the cost of bribing somebody to give you the key. :P
[02:38:38] <MacGyver> 128 bits became the pre-quantum sweet spot where it's just physically impossible to bruteforce the keyspace.
[02:39:17] <MacGyver> 256 bits is that, but for post-quantum, because of Grover.
[02:39:37] <MacGyver> Anything beyond that is not considered required to prevent bruteforcing.
[02:40:10] <MacGyver> And by "physically impossible" I mean the kind of computation that says "there is simply not enough energy in the universe"
[02:40:18] <int-e> And larger key sizes don't come for free; encryption usually becomes more expensive; key distribution becomes more expensive...
[02:40:50] <int-e> (but you can always win 20 lotteries in a row and guess the correct key)
[02:41:19] <int-e> (of course if you actually won 20 lotteries in a row you'd be investigated for fraud, and likely be guilty of it too)
[02:43:42] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[02:54:13] <ioxzev1z> Q: if I have a 128bit key and know that the left most bit is always 1, that means the keyspace is then 127 bits instead. If I know that two bits in the middle of a 128 bit key are always 1, does that mean the keyspace is then 126 bits?
[02:54:40] <ioxzev1z> Or do you lower the keysize only when you know the bits on the left?
[02:54:42] <rk4> sure, if all bits are equal in the key
[02:55:28] <MacGyver> You don't lower key *size*, you're talking about how large the key *space* is.
[02:55:35] <ioxzev1z> e.g. xxxx xxxx is 8 bits. If I know that it will always be xxx1 1xxx does that then mean the keyspace is only 2^6?
[02:55:44] <Alipha> ioxzev1z: yes
[02:55:44] <MacGyver> Since you've now eliminated all keys from the keyspace where the middle bits are 0, yeah, it's smaller.
[02:56:10] <ioxzev1z> Sure its smaller, but it feels that knowing the left most bit is 1 is more important that knowing the right most side is 1
[02:56:15] <MacGyver> The keys are still 8 bits.
[02:56:25] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:56:25] <int-e> yes it's 126 bits, since there are 2^126 keys left to choose from
[02:56:25] <MacGyver> Yeah no, that doesn't matter at all.
[02:56:28] <rk4> is this question motivated by some real world problem you're facing, because if it is something funky is happening
[02:56:39] <ioxzev1z> rk4, just talking math
[02:56:45] <rk4> cool cool :)
[02:57:40] <ioxzev1z> 0000 0000 -> 0000 0001 is one change. 0000 0000 -> 1000 0000 is more knowledge, no?
[02:58:14] <ioxzev1z> If I know that the key is always 1xxx xxxx, I don't have to try any of the 0xxx xxxx
[02:58:28] <Hash> ok thanks 
[02:58:51] <MacGyver> ioxzev1z: But the same is true for knowing that the key is always xxxx xxx1
[02:58:52] <Hash> chapters done, now to do flash cards and then take abreak. freaking heartburn man.
[02:59:17] <MacGyver> You don't have to try any of the xxxx xxx0.
[02:59:25] <ioxzev1z> MacGyver, sure, but trying all keys up to 0000 0011, for example, is less work than trying all for 1xxx xxxx
[02:59:32] <MacGyver> No it's not.
[02:59:39] <MacGyver> Or well.
[02:59:43] <MacGyver> Yes it is, but you're doing it wrong.
[03:00:10] <MacGyver> You're forgetting that 1111 1111 is *also* a key that is valid knowing that the LSB is 1.
[03:00:19] <MacGyver> You still need to try all the keys that have LSB 1.
[03:00:39] <MacGyver> And actually generating those keys is equivalent.
[03:01:36] <ioxzev1z> So knowing any bit in a 128 bit key turns it into a 127 bit key, regardless of where the bit is?
[03:01:52] <int-e> provided you know where that bit is
[03:01:56] <MacGyver> In a sense, yes. It's still a 128-bit key. Your keyspace is 127 bits now though.
[03:02:06] <ioxzev1z> MacGyver, yeah I meant keyspace
[03:02:37] <ioxzev1z> I had the feeling that more left-er bits were more valuable
[03:02:52] <Alipha> ioxzev1z: no
[03:02:55] <int-e> Well, they aren't.
[03:03:21] <ioxzev1z> Right
[03:03:24] <Alipha> ioxzev1z: unless your keys aren't evenly distributed within your key space
[03:03:49] <MacGyver> I understand where that feeling comes from, because of other areas of computer science, but the key thing about keys is that all bits contribute equally to the "brute force factor".
[03:04:04] <MacGyver> There's no "We can forget about the lower order terms to talk about complexity" in play here.
[03:04:22] <rk4> if some ciphers have weak keys, i wonder if all the bits of a key are equal, security wise
[03:04:33] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:04:42] <MacGyver> Sure, underlying assumption is non-broken cryptography.
[03:05:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:05:20] <MacGyver> If you're dealing with broken cryptography, some bits will be more valuable than others, but then it's still not as easy as MSB > LSB.
[03:05:29] <MacGyver> (Unless someone's been *really* dumb)
[03:05:54] <int-e> or smart? you could permute the key bits accordingly ;)
[03:06:32] <rk4> is that part of a definition of a non-broken symmetric cipher? that disclosing n-bits of a k-bit key leaves you with (k-n) strength 
[03:06:34] <Alipha> If a bit is 1 only 25% of the time, then knowing that bit is 0 isn't as valuable as knowing the value of a bit that has a 50-50 chance of being 1 or 0
[03:07:39] <int-e> <3 Shannon
[03:08:28] <Alipha> Hopefully that's your wife
[03:08:35] <int-e> It's platonic.
[03:15:06] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[03:21:49] <tusko> spicy
[03:23:50] <Hash> Poor Plato.
[03:23:59] <Hash> He's like, why is everyone using my name! zomg.
[03:24:31] <Hash> The lab wants me to install and play around with cryptool, and do some ciphering
[03:24:53] <Hash> No linux version. Why do all colleges assume you're on windows?
[03:25:52] <Hash> CrypTool and CryptoBench
[03:26:00] <tusko> Please sirs will you help tusko?
[03:26:15] <Hash> These guys are tremendously helpful
[03:26:19] <Hash> Just ask your questions
[03:26:21] <tusko> it seems many are not able to think of such large numbers
[03:27:03] <Hash> Well you have to imagine, our brains are tiny
[03:27:07] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[03:27:13] <Hash> We didn't evolve to visualize large numbers.
[03:27:28] <Hash> Stars in the sky seem too much to us.
[03:27:40] <tusko> how many times must you draw at random from a pool of size N before you find an item inside a well defined range representing x/N of the total?
[03:27:52] <Hash> Numbers like 14 billion light years... what does even mean or look like, you know? Large numbers are hard to imagine/visualize.
[03:28:08] <tusko> if you do enough toad venom you can peer into the face of god
[03:28:16] <Hash> Uhhh
[03:28:21] <Hash> What?
[03:28:45] <Hash> Oh Bufotenin.
[03:28:59] <tusko> that is one thing
[03:29:30] <Hash> I thought you meant the Dermorphin frog they all go kambo crazy about.
[03:29:39] <Hash> Which isn't even a psychedelic. It's just frog abuse.
[03:29:44] <Hash> Poor toadies.
[03:30:13] <tusko> I want to know how many times I must hash sha(256) before I get a number in (0,x).
[03:30:24] <int-e> tusko: Are you trying to lure this channel into discussing proof of work schemes?
[03:30:33] <int-e> Good luck with that.
[03:30:36] <tusko> can you give me these wisdoms
[03:30:38] <tusko> its very arcane stuff
[03:30:41] <Hash> Deosn't tht depends on the hash's total hash space?
[03:30:46] <Hash> like a key has a key space
[03:31:07] <tusko> yes, every hash is independent with probability x/N of being in range
[03:31:10] <Hash> size of the hash output determines the total number of combinations and you're picking at random
[03:31:13] <Hash> I think
[03:31:19] <Hash> I'm thinking. hmm.
[03:31:46] <tusko> 2^180/2^256 specifically is the probability a single guess is in range.
[03:32:11] <tusko> for requiring 76 leading zeros, in this completely obscure and idealized example
[03:32:33] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:34:06] <sonOfRa> Heh I was considering a similar-ish problem earlier when writing a unit test: Insert a bunch of rows into a database, each entry has an ordering number attached to it. Testing whether it actually comes out of the database ordered. So I generated 10k ordering values 0 < N < 2^32, and inserted them all. Question: What is the chance that I spuriously got the right result, i.e. those 10k random numbers I sampled were monotonically increasing
[03:35:02] <sonOfRa> Kind of got stuck on the "how do I calculate how many sequences of X random integers between 0 and N are monotonically increasing", so I gave up and decided it was probably good enough :D
[03:37:14] <Alipha> tusko: you must draw N/x times, on average
[03:37:20] <int-e> C(N+X-1,X)/N^X, for selecting X (10k in your case) numbers out of a pool of N (2^32 - 1 in your case), where C computes binomial coefficients
[03:37:41] <int-e> (for sonOfRa's question)
[03:38:08] <int-e> If X is much smaller than N that's basically 1/X!, unsurprisingly.
[03:38:35] <sonOfRa> Huh. How'd you arrive there so fast? I wasn't sure how to get the "how many sequences are monotonically increasing" part
[03:38:44] <sonOfRa> The "how many sequences are there in total" was of course relatively easy
[03:42:26] <int-e> sonOfRa: If you have a non-increasing sequence of X numbers, you can add 1 to the second number, 2 to the third number, and so on, to get an increasing sequence from a larger range; increasing sequences correspond to subsets of a given size, which are standard in combinatorics. This same trick comes in several forms, see for example https://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics)
[03:42:44] <sonOfRa> ooooh
[03:43:05] <sonOfRa> Thank you!
[03:44:35] <int-e> sonOfRa: sorry, "non-increasing" should be "non-decreasing"
[03:45:21] <sonOfRa> Yeah, I made that substitution in my head, doesn't really make sense otherwise, and does with that replacement :)
[03:46:15] *** Quits: q1 (~q1@user/nunux) (Quit: q1)
[03:47:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[03:48:42] <tusko> Alipha how are you so clever?
[03:48:45] <tusko> Thank you so much
[03:50:34] <sarnold> int-e: nice wiki page, thanks :)
[04:01:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[04:02:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:21] <Alipha> tusko: i took 4th place in state in high school math league
[04:10:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:11:46] *** Joins: Wulf (~Wulf@user/wulf)
[04:12:12] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[04:26:41] *** Quits: SEP (~stephenle@71-135-151-245.lightspeed.frokca.sbcglobal.net) (Quit: Lost terminal)
[04:27:50] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[04:28:54] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[04:32:42] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Ping timeout: 260 seconds)
[05:04:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[05:06:54] *** Joins: sh4yt4n4hm4r (~sh4yt4n4h@138.199.58.73)
[05:14:34] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[05:16:06] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 260 seconds)
[05:42:56] *** Quits: enick_937 (~timmcmatr@2001:470:69fc:105::a90) (Changing host)
[05:42:56] *** Joins: enick_937 (~timmcmatr@user/timmc)
[05:54:18] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[05:55:05] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[06:03:42] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[06:09:27] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[06:10:28] *** Xf is now known as Church
[06:18:18] *** Quits: Choco93 (~Choco@host150.200-71-232.telecom.net.ar) (Quit: Client closed)
[06:41:10] *** Quits: namkeleser (~namkelese@101.179.132.178) (Ping timeout: 256 seconds)
[06:46:26] *** Joins: jtgd (~jtgd@user/jtgd)
[06:46:42] *** Joins: namkeleser (~namkelese@101.179.132.178)
[06:52:35] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 264 seconds)
[06:59:34] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[07:22:18] *** Joins: mononote (~mononote@user/mononote)
[07:23:10] *** Quits: _rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[07:23:40] *** Joins: rtypo (~alex@user/rtypo)
[07:33:53] *** Joins: yeirr (~yeirr@user/yeirr)
[07:41:11] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 264 seconds)
[07:45:14] <Hash> 3DES seems pretty silly in history
[07:47:18] <maroon> not so bad really, it would probably still be used if not for the block size being only 64bit
[07:47:29] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[07:47:44] *** Joins: mononote (~mononote@user/mononote)
[07:47:56] *** Joins: RickSanchez (~RickSanch@172.58.196.183)
[07:48:45] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:53:11] *** Quits: RickSanchez (~RickSanch@172.58.196.183) (Ping timeout: 264 seconds)
[07:54:19] <Hash> I don't fully grasp OFB and CTR
[07:54:48] <Hash> Both are used to turn block to stream, ofb synchronous stream and counter stream
[07:54:55] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (Ping timeout: 268 seconds)
[07:55:08] <Hash> How exactly do you need to do that? can't you just use a stream cipher?
[07:55:43] <Hash> And if you do use OFB or CTR, how exactly does it convert the blocks into a stream
[07:55:57] <Hash> AFAIK, stream ciphers work on bit by bit as a stream as they come in.
[07:56:05] <Hash> But block chipher works on a entire block of data.
[07:56:23] <Hash> So what would be also a use case for OFB or counter?
[07:58:32] <ericonr> CTR is neat because its security is proven by the security of AES itself
[07:59:10] <ericonr> (assuming you authenticate it somehow, I guess? idk if there's authenticated AES-CTR out there)
[07:59:34] <ericonr> you need *some* algo to generate the keystream, so might as well be AES :P
[08:00:17] <ericonr> oh wait
[08:00:29] <ericonr> AES-GCM is CTR based lol
[08:07:52] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5) (Ping timeout: 268 seconds)
[08:09:27] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[08:24:11] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:25:07] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 268 seconds)
[08:37:53] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Excess Flood)
[08:38:36] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:39:43] *** Joins: zro (~zro@user/zro)
[08:57:54] *** Joins: yeirr (~yeirr@user/yeirr)
[09:21:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:22:16] *** Quits: sh4yt4n4hm4r (~sh4yt4n4h@138.199.58.73) (Quit: Leaving)
[09:26:07] *** Joins: instantp10neer (~instantp1@user/instantp10neer)
[09:33:34] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 268 seconds)
[09:40:17] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.3)
[09:53:49] *** Joins: jtgd (~jtgd@user/jtgd)
[09:54:18] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 260 seconds)
[09:56:22] <rk4> don't forget for a while the common stream ciphers sucked *cough*rc4*cough*
[10:07:41] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[10:13:09] <Hash> yup
[10:13:12] <Hash> read about that one too
[10:13:14] <Hash> Thanks
[10:13:20] <maroon> im surprised rivest named their sha3 candidate md6, considering the bad press that md5 has gotten
[10:13:43] <Hash> Question: how does compression work with encryption
[10:13:49] <maroon> come enjoy our new cruise ship, Titanic II !
[10:14:10] <Hash> If you compress data, and then encrypt it vs. encrypt data and then compress it and encrypt it again.
[10:14:21] <maroon> you mean besides giving known plaintext due to common compression headers?
[10:14:42] <Hash> in the context of data manglig
[10:14:44] <maroon> if you encrypt first, if you can still compress the data then your encryption is crap
[10:14:52] <Hash> I see.
[10:15:04] <Hash> becuase compression works on repeated reocurring things
[10:15:21] <Hash> and you should not have any of that as it increases frequency
[10:15:46] <maroon> there's been exploits for compress-before-encryption, because the level of compression gives a clue to what's in the plaintext
[10:27:06] <Peng> And if an attacker knows or can control some of the data, they can learn about other data sharing the same compression context.
[10:27:23] <Peng> or that's exactly what you meant
[10:27:48] <yawkat> do people actually share compression context with unencrypted data?
[10:28:59] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpy3qflgc31kcwf.ipv6.telus.net) (Remote host closed the connection)
[10:30:54] <Peng> I don't know, but an attacker might know some of the other encrypted data somehow
[10:32:05] *** Quits: maroon (tinycrypt@user/maroon) (Quit: Clothes make the man. Naked people have little or no influence on society. --Mark Twain)
[10:39:05] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.3)
[10:39:24] *** Joins: jtgd (~jtgd@user/jtgd)
[10:41:23] *** Joins: mei (~mei@user/mei)
[10:42:07] *** Joins: maroon (tinycrypt@user/maroon)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[10:58:32] <Alipha> yawkat: yes. BREACH and CRIME are attacks against https and compression
[10:59:21] <Alipha> yawkat: oh, i misread that
[11:02:01] <Alipha> yawkat: no, compression context isn't shared with unencrypted data. How BREACH works is that the attacker causes the victim's browser to make thousands of requests to a website, varying what is in the url string, in order to determine authentication token values by knowing how the url parameters change the resulting web page
[11:06:09] <Alipha> Hash: if you're using AES which has 16-byte blocks, and you want to encrypt 35 bytes of data, you encrypt a block with a value of {IV + 0}, a block of {IV + 1}, and a block of {IV + 2}. You now have 48 bytes of a "keystream". Since you only need to encrypt 35 bytes, you take the first 35 bytes of the keystream and discard the rest. You then xor the keystream with the plaintext to get your ciphertext
[11:07:30] <Alipha> The only modes worth knowing are CBC, CTR, XTS, and GCM. And the only ones worth using are XTS (for drive encryption) and GCM (for everything else)
[11:08:26] <yawkat> and maybe GCM-SIV
[11:13:52] *** Joins: defiant (~defiant@user/defiant)
[11:24:22] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.3)
[11:27:08] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[11:38:45] *** Quits: Jail21 (~Jail21@190.171.113.56) (Ping timeout: 268 seconds)
[11:39:01] *** Joins: Jail21 (~Jail21@190.171.113.56)
[11:54:19] <maroon> there doesnt seem to be much written about PCBC except for wikipedia not liking it because swapping ciphertext blocks doesnt affect the remainder of the message - which would happen in CBC too. it's not clear to me how PCBC handles the IV - in CBC the iv is the prior ciphertext block. since PCBC also xor's the prior plaintext block, does it need a 2nd IV or just fixes that one at 0x00's?
[11:54:28] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[11:57:50] *** Joins: mouseghost (~draco@user/mouseghost)
[12:01:48] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:02:54] <rqsd> Speaking of SIV, what *are* the MRAE options with ChaCha20 even? Most of the MRAE attention seems to have been in block ciphers, AES in particular.
[12:03:33] <rqsd> I recall there being an abandoned Internet Draft for a more generic SIV construction and its application to ChaCha20, but that's hardly inspiring confidence
[12:06:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[12:06:30] <snappy> rqsd: check out https://eprint.iacr.org/2020/067.pdf by Riastradh (though he doesn't seem to idle here anymore)
[12:07:25] <rqsd> Yeah, I read the Daence paper, but I couldn't find it published in any conference proceedings, nor did it get any review yet (admittedly it's only been a year), so I'm equally wary of it
[12:08:01] <rqsd> The IAQs basically explain why Riastradh was looking at this, which happens to be the same reasons I'm looking at this
[12:09:48] <rqsd> Though I guess one way to force the issue would be to work on an I-D and hope the CFRG adopts it since that gets people out of the woodworks
[12:15:31] *** Joins: jtgd (~jtgd@user/jtgd)
[12:28:44] *** Joins: msfninja (~kali@user/msfninja)
[12:31:19] *** Quits: zro (~zro@user/zro) (Ping timeout: 265 seconds)
[12:33:02] *** Joins: zro (~zro@user/zro)
[12:43:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:51:07] *** Joins: finalbeta1 (~finalbeta@dD576A726.access.telenet.be)
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[12:58:24] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[13:00:19] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:02:47] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 264 seconds)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:03:58] *** Joins: d1cor (~diego@179.63.242.100)
[13:06:04] <riv> hash youre so popular on this network lmao
[13:06:32] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[13:15:03] *** Joins: namkeleser (~namkelese@101.179.132.178)
[13:29:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:30:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:31:07] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:32:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:38:22] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[13:42:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:49:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:51:31] *** PJBoy is now known as Guest3495
[13:51:48] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:55:40] *** Quits: Guest3495 (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[13:57:59] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[14:01:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:02:20] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:04:56] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[14:07:20] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[14:45:47] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[14:47:36] *** Joins: Warped (~Warped@user/warped)
[14:59:52] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[15:18:10] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:18:41] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:20:50] *** Joins: namkeleser (~namkelese@101.179.132.178)
[15:26:44] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:31:14] *** Parts: nightw0lf (~nightw0lf@77.125.126.211) ()
[15:37:13] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:37:18] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:46:38] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[16:00:13] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[16:08:44] *** Joins: Everything (~Everythin@37.115.210.35)
[16:41:03] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[16:41:31] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[16:46:16] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:49:02] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[16:50:23] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[16:56:17] *** Joins: rtypo (~alex@user/rtypo)
[17:03:32] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[17:16:59] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[17:18:22] *** Quits: mei (~mei@user/mei) (Quit: mei)
[17:19:43] *** Joins: mei (~mei@user/mei)
[17:49:00] *** Joins: somlis (~somlis@user/somlis)
[17:50:18] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[17:54:32] *** Joins: CryptoClub (~fafs@87.125.251.76)
[18:00:10] *** Joins: node1 (~node1@user/node1)
[18:39:05] *** Joins: paul0 (~paul0@179.181.87.0)
[18:57:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[19:00:06] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[19:09:55] *** Joins: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr)
[19:23:49] *** Joins: mononote (~mononote@user/mononote)
[19:26:42] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[19:30:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[19:37:27] *** Quits: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e) (Ping timeout: 265 seconds)
[19:44:37] *** Joins: voices- (~voices_@84.238.197.28)
[19:48:24] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[19:51:44] *** Joins: geeknix (~pi@147.158.227.80)
[19:58:29] *** Quits: Pythayr (~pither195@64.42.181.51) (Ping timeout: 256 seconds)
[20:10:02] *** Quits: finalbeta1 (~finalbeta@dD576A726.access.telenet.be) (Read error: Connection reset by peer)
[20:11:19] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[20:14:00] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[20:16:24] *** Joins: Pythayr (~pither195@2600:1700:82f0:2fe0:a0c8:e93a:d316:52ac)
[20:20:58] *** Joins: Pythayr` (~pither195@64.42.181.51)
[20:22:35] *** Quits: Pythayr (~pither195@2600:1700:82f0:2fe0:a0c8:e93a:d316:52ac) (Ping timeout: 264 seconds)
[20:25:51] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[20:28:44] *** Joins: voices- (~voices_@84.238.197.28)
[20:33:34] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 260 seconds)
[20:34:26] *** Joins: powftw (uid448161@lymington.irccloud.com)
[20:41:51] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: Lost terminal)
[20:42:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:51:59] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:54:14] *** X-Scale` is now known as X-Scale
[20:54:29] *** Joins: voices- (~voices_@84.238.197.28)
[20:59:18] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 260 seconds)
[21:03:31] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpw1n6m4afpgbvv.ipv6.telus.net)
[21:32:53] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:33:55] *** Joins: voices- (~voices_@84.238.197.28)
[21:35:28] *** Joins: physiology (~physiolog@199-48-94-89.rochmnaa.metronetinc.net)
[21:35:41] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 268 seconds)
[21:37:02] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[21:39:28] *** Parts: physiology (~physiolog@199-48-94-89.rochmnaa.metronetinc.net) ()
[21:41:37] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 256 seconds)
[21:53:35] *** Joins: aleck (~aleck@user/aleck)
[21:53:41] *** Joins: voices- (~voices_@84.238.197.28)
[21:55:26] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 268 seconds)
[21:58:34] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 260 seconds)
[22:13:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:13:50] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[22:15:54] *** Joins: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374)
[22:15:59] <Hash> Good day folks
[22:16:13] <Hash> Today is number theory and assymetric encryption diving into details
[22:17:21] *** Joins: rtypo (~alex@user/rtypo)
[22:18:51] *** Quits: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr) (Ping timeout: 268 seconds)
[22:25:02] *** Quits: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:27:25] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:27:42] *** Joins: voices- (~voices_@84.238.197.28)
[22:29:57] <ioxzev1z> Hash, enlighten us
[22:32:12] <Hash> I just waking up
[22:32:19] <Hash> Going to start study soon
[22:32:25] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 268 seconds)
[22:32:28] <Hash> https://gist.github.com/hashborgir/82957e6f7ac8011f5db2970c2aa13eb9
[22:32:30] <Hash> Module 3 today
[22:32:38] <Hash> You can see the list of things I have to learn here
[22:38:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[22:39:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:42:40] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[22:58:58] *** Joins: CryptoDavid (uid14990@uxbridge.irccloud.com)
[23:01:12] *** Joins: voices- (~voices_@84.238.197.28)
[23:02:01] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[23:03:05] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:05:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:06:14] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 260 seconds)
[23:10:21] <wasamasa> ass-ymetric
[23:13:08] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[23:15:48] <iz> the speed of it kinda stinks relatively
[23:23:52] *** tusko is now known as OrganicDillo
[23:33:19] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:34:59] *** Joins: voices- (~voices_@84.238.197.28)
[23:40:07] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[23:40:15] *** Quits: voices- (~voices_@84.238.197.28) (Ping timeout: 268 seconds)
[23:41:42] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[23:45:55] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:50:48] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[23:51:52] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
