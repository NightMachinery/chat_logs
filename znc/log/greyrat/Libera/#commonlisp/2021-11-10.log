[00:00:05] <Guest74> I think my brain can deal with almost anything as long as it's prefixed by the package.
[00:00:18] <mfiano> I did too, at one point, and I have no good reason as to why.
[00:00:47] <Catie> Guest74: Yeah, I think you're right. I should re-evaluate my stance then!
[00:02:58] <mfiano> To me, the confusion starts when the protocol is changing at will for the implementation.
[00:03:20] <mfiano> Maybe I'm alone here. I think good protocol design is paramount though.
[00:04:17] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:04:26] <Catie> No, I wholeheartedly agree with you on that one. Allowing incongruent lambda-lists would be convenient in some cases, but makes the whole more confusing
[00:05:32] <Guest74> I have used different keys, and keep questioning my decisions to do so.
[00:07:47] *** Joins: akoana (~ah@user/akoana)
[00:08:30] <hayley> My main problem with CL21 is that they deem ROOM useless and removed it, which makes me seriously question what they think people would do with the language.
[00:08:35] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:08:52] <Catie> Oh bonkers
[00:09:00] <hayley> If CL21 is supposed to be batch compiled, or removing image introspection features makes it "better" somehow, then I want nothing to do with it.
[00:09:32] *** Quits: mingus (~jan-magnu@auth-147-53.anyconnect.uib.no) (Ping timeout: 240 seconds)
[00:10:35] <Guest74> Do you know if it's actually used for any projects?
[00:13:30] *** Joins: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[00:13:50] <Catie> I don't see anything in any of the quicklisp systems I've got installed. That's not necessarily a good measure, but it's what I've got at the moment
[00:13:58] <Shinmera> I'm sure it is. The question is more if it's used for any projects that are used elsewhere or used by anyone but the creator.
[00:14:50] <Lycurgus> having badmouthed roswell i feel compelled to say something constructive
[00:15:31] <Lycurgus> setting an environment its man page seemed say would set an environment didn
[00:16:04] <Lycurgus> and that's the general problem it's not a nvm or virtual env or whatever
[00:16:34] <mfiano> Hi Shinmera, congrats on all the marketing opportunities and code progress as of late.
[00:16:41] <Shinmera> Thanks!
[00:16:49] <Shinmera> Though not sure about marketing opportunities?
[00:17:28] <mfiano> Well you are giving talks live and on podcasts etc from what I gathered
[00:17:46] <Shinmera> Ah. I guess, though those don't really do anything marketing wise. That's networking.
[00:17:46] <Lycurgus> *setting an environment variable (assuming that's what the typography implied)
[00:18:03] <mfiano> Seems Kandria and thus CL is reaching far
[00:18:19] <mfiano> Ok, yeah better term then.
[00:19:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:19:29] <Shinmera> So far all of these opportunities are thanks to the swiss arts council, who, as far as I know, don't even know about Lisp at all, :)
[00:20:33] <mfiano> Well hopefully they know what HTML is /s
[00:21:33] <Shinmera> Back to a tangent that's more Lispy though, I made a simple fix and Kandria now runs at ~700 FPS on my workstation. This is with practically no regard for removing CLOS or anything like that, so dispatch is all over the place.
[00:21:58] <Catie> That's some pretty intense performance
[00:22:14] <mfiano> I don't know what it was before, and still, ms/f is better for relative comparisons
[00:23:25] <Shinmera> Prior to that it was like 100 or so? It was a really dumb fix where apparently retrieving framebuffer size from GLFW on Linux is super slow, so I just cached that.
[00:23:30] <mfiano> reference for those out of the loop: http://www.mvps.org/directx/articles/fps_versus_frame_time.htm
[00:23:42] <Shinmera> On my work-workstation it went from 20 to 300.
[00:24:10] <Shinmera> Anyhoo
[00:24:33] <mfiano> Nice!
[00:24:39] <Shinmera> My point isn't that what I'm doing is super performant or whatever, just that even with so far paying barely attention to CLOS, you can still make a game that runs just fine.
[00:24:55] <Catie> That's incredibly heartening to know
[00:24:57] <Shinmera> Meaning CLOS is used aaaaall over.
[00:25:07] <mfiano> I completely agree. I took a step back and wrote gfxmath recently, as you probably saw
[00:26:02] <Shinmera> I did not see, I haven't had time to pay attention to much of anything in the Lisp world
[00:26:09] <mfiano> :D
[00:27:02] <Shinmera> Interesting
[00:27:23] <mfiano> tldr; a generic function math library to replace my super fast, 20kloc, impossible to maintain library because i stopped caring about ultimate performance
[00:27:43] <Shinmera> I was working on a new version of 3d-v/m over a year ago that would support int/uint/float/double versions of each type, with specialised functions to work on all of them, and with sbcl type inference aids and all.
[00:27:48] <Shinmera> I did not complete it though.
[00:28:03] <Shinmera> Heh!
[00:28:32] <Shinmera> I feel similarly about 3d-matrices. That code is uuuuugly
[00:29:25] <mfiano> origin is a lot of DRY violations as it uses packages for type/dimensions, and very hard to macroify the commonalities.
[00:30:00] <mfiano> but it's fast, if anyone cares about that. i care about productivity and extensibility more than anything
[00:30:13] <Shinmera> Yea
[00:31:06] <Shinmera> In other news still, I was really looking forward to attending ELS next year and possibly also writing a paper for it, but it looks like that might not be possible. GDC is /on the same days/ and I would also really like to attend that.
[00:31:46] <mfiano> Would you be talking at GDC?
[00:31:51] <Shinmera> So far I'm leaving the decision on whether we'll get sponsored to attend GDC or not.
[00:32:05] <Shinmera> mfiano: no, talk submission was in september and I didn't have anything to submit at that time.
[00:33:48] <mfiano> I think you would get more out of GDC with your current focus.
[00:34:07] <Shinmera> Yeah, I know, but I'm really burning to see friends and colleagues again at ELS.
[00:36:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:37:48] <hayley> Really specific survey question: has anyone used cons cells as keys for an EQ hash table?
[00:38:10] <Catie> I have not
[00:38:11] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:38:38] <Shinmera> hayley: maybe in the sense of a cache table to check for traversal or something.
[00:39:14] <hayley> Ah yeah, that's a good use.
[00:40:08] <mfiano> I have once or twice, but I can't remember for what.
[00:40:18] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Remote host closed the connection)
[00:40:37] <yitzi> ditto here. Don't remember what is was for.
[00:40:43] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:40:46] *** Joins: Oladon (~olad@98.43.81.226)
[00:41:10] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Client Quit)
[00:41:19] *** Quits: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 250 seconds)
[00:41:32] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 240 seconds)
[00:42:34] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:43:21] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Remote host closed the connection)
[00:43:43] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:44:04] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Client Quit)
[00:51:19] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:54:46] *** Joins: mingus (~jan-magnu@auth-147-53.anyconnect.uib.no)
[00:59:05] *** Joins: cjb (~cjbayliss@user/cjb)
[01:03:02] *** Quits: mingus (~jan-magnu@auth-147-53.anyconnect.uib.no) (Ping timeout: 240 seconds)
[01:05:52] *** Joins: pjb (~pjb@user/pjb)
[01:09:10] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:15:46] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[01:15:58] *** Quits: cjb (~cjbayliss@user/cjb) ()
[01:17:43] *** Joins: cjb (~cjbayliss@user/cjb)
[01:19:37] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::32f3) (Remote host closed the connection)
[01:22:14] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[01:30:59] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[01:33:00] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:34:09] *** Joins: notzmv (~zmv@user/notzmv)
[01:36:23] *** Quits: pve (~pve@178-55-163-195.bb.dnainternet.fi) (Quit: leaving)
[01:55:23] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:01:56] *** OlCe` is now known as OlCe
[02:06:50] <Guest74> huh, I've used cons cells in a hash for coordinates in some AOC stuff.
[02:07:31] <hayley> With the EQ test function, i.e. for pointer equality?
[02:07:33] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:07:49] <hayley> So have I, but only for structural equality.
[02:09:14] <mfiano> I mean, I doubt it buys you much in most applications, and the downside is you have to ensure immutability (unless you want different structures to hash to the original object structure)
[02:21:40] *** Quits: roelj (~user@2001:1c02:b16:3700:3718:3a46:b1ae:ba54) (Remote host closed the connection)
[02:22:22] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[02:34:06] <Guest74> hayley: actually I'm not sure, I just saw the code in my visualization stuff that destructures the key.
[02:34:17] *** Quits: gaqwas (~john@dynamic-077-007-037-221.77.7.pool.telefonica.de) (Ping timeout: 264 seconds)
[02:37:02] <Guest74> It was probably for easily finding neighbours or being able easily visualize sparse coordinates in some unknown space.
[02:37:21] *** antoni is now known as antoszka
[02:37:46] *** Joins: cleon (~Srain@43.red-80-29-166.dynamicip.rima-tde.net)
[02:40:11] <Guest74> I then switched to complex numbers as keys for unremembered reasons.
[02:52:02] <White_Flame> nothing really wrong with a :test #'equal or equalp composite key either
[02:56:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:57:27] *** Joins: srhm (~srhm@user/srhm)
[02:58:46] *** Quits: cleon (~Srain@43.red-80-29-166.dynamicip.rima-tde.net) (Remote host closed the connection)
[03:02:09] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4) (Ping timeout: 250 seconds)
[03:04:07] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Remote host closed the connection)
[03:04:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[03:09:35] *** Joins: kdlv7 (~kdlv@user/kdlv)
[03:10:32] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 240 seconds)
[03:11:27] *** Quits: kdlv (~kdlv@user/kdlv) (Ping timeout: 268 seconds)
[03:14:09] *** Quits: kdlv7 (~kdlv@user/kdlv) (Ping timeout: 256 seconds)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[03:17:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[03:17:34] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[03:25:21] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:27:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6c0:2b98:1609:4e92) (Ping timeout: 245 seconds)
[03:29:00] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:35:23] *** Quits: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Remote host closed the connection)
[03:37:02] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4)
[03:43:32] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 240 seconds)
[03:43:39] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[03:44:40] *** Joins: Inline (~Inline@aftr-37-201-240-235.unity-media.net)
[03:46:28] *** Joins: kdlv (~kdlv@user/kdlv)
[03:47:51] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[03:48:02] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4) (Ping timeout: 240 seconds)
[03:48:05] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:56:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[03:58:24] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:01:32] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 240 seconds)
[04:02:44] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:03:41] *** Quits: nature_ (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[04:11:55] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 250 seconds)
[04:30:33] *** Joins: occ (~occ@user/occ)
[04:46:09] *** Quits: jealousmonk (~user@2804:431:e7c4:7f35:7769:1f33:9572:c142) (Quit: ERC (IRC client for Emacs 27.1))
[05:02:24] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:04:27] *** Joins: nature (~nature@45.32.235.173)
[05:06:48] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:07:31] *** Joins: Bike (~Bike@71.69.170.70)
[05:07:31] *** ChanServ sets mode: +o Bike
[05:20:30] *** Quits: wheelsucker (~user@2600:8801:8c1a:5d00::ddb8) (Remote host closed the connection)
[05:37:39] *** Joins: Catie (~user@user/catie)
[05:37:52] <hayley> Here is the demonstration video I promised yesterday: https://www.youtube.com/watch?v=9TQTMvoPJJY
[05:41:49] <elderK> Hey guys, I was wondering if there's any portable way to ensure that something is allocated on the stack, and have a specific size in bytes. I figure not so much.
[05:41:49] <elderK> A related question is, say when we're doing bitwise stuff, how to ensure that we're truly operating on fixnum types?
[05:42:19] <elderK> Or, in that case, would it simply be better to use whatever intrinsics your implementation provides?
[05:43:12] <Bike> usually you can look at the disassembly and get an idea of what's happening at runtime
[05:43:55] <Bike> at high optimization levels some implementations (or at least, sbcl) will note at compile time when it has to do things like box floats that hurt efficiency
[05:44:21] <hayley> Stack allocation is an implementation issue, not a language issue.
[05:44:45] <Bike> there's no portable way to ensure that something has a given size in bytes, and i'm not sure it's reasonable to expect that. you can request objects be stack allocated with the dynamic-extent declaration but that's the limit of your power there
[05:45:11] <Bike> implementations may document what they do, e.g. sbcl's manual is very specific about how and when it stack allocates objects
[05:47:56] <elderK> Thank you :) I've been doing some hobbyist game development recently in C++ and have been toying with the idea of doing it in CL instead. I've been using a lot of bitwise tricks and stuff. Was wondering if any of them would carry over.
[05:48:44] <elderK> Like, a single integer encoding lots of fields. From my last big experiments in CL, I found bitwise arithmetic to be a little odd, mostly because integers are effectively unlimited width.
[05:48:48] <elderK> At least, that was my understanding then. Is it correct?
[05:49:09] <hayley> Yes.
[05:49:34] <hayley> But I've never found anything unexpected by using unsigned integers throughout.
[05:51:03] <elderK> Aye but say you want to have a 32bit integer that encodes two things. There's no portable way to ensure that the integer really is using only 32bits of storage, right?
[05:51:57] <hayley> I don't see how you do it generally, but practically you could expect that to be the case.
[05:53:46] <thomaslewis> Would this fit your use case?
[05:53:46] <thomaslewis> https://www.cliki.net/Binary-types
[05:58:32] *** Quits: Inline (~Inline@aftr-37-201-240-235.unity-media.net) (Ping timeout: 240 seconds)
[06:00:42] <Bike> it sounds like elderk is talking about internal operations more than external i/o
[06:03:07] <elderK> Aye, internal.
[06:03:43] <elderK> It may simply be that if I want this level of detail / control, I shouldn't use CL. Or, I can use CL and just deal with some things being "larger" than are strictly required. That's okay, too.
[06:04:15] <elderK> I'm no expert at all. I'm not even sure I'd be classed as an intermediate CLer so, you know, it's all good information to learn.
[06:05:38] <hayley> The best move would probably be to declare the right type, e.g. (unsigned-byte 32), then have the compiler decide whether that is a subtype of FIXNUM or not.
[06:05:53] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[06:06:14] <hayley> If it is, then you get fast unboxed integers. If not, you still have a working program.
[06:08:17] *** Joins: johnjay (~pi@192.142.100.50)
[06:10:56] <Bike> optimization of the runtime involves a lot of different concerns, which is why the general paradigm is to leave it up to the implementation, but also to provide hints to help the process along
[06:11:04] <Bike> if you have _demands_, that can screw a lot of things up
[06:11:53] <Bike> even c/c++ implementations aren't required to have exact bitwidth integer types
[06:12:23] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[06:13:33] *** Quits: cjb (~cjbayliss@user/cjb) ()
[06:18:26] *** Joins: s-liao (~s-liao@101.86.103.113)
[06:18:37] <Bike> of course you can sometimes get to the point where you really can make demands, but that takes some time and thought
[06:27:06] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 260 seconds)
[06:49:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:55:54] <Guest74> elderk: what kind of bitwise tricks are you using?
[07:15:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:25:39] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[07:26:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[07:31:38] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[07:48:41] <White_Flame> elderK: there are bit vectors for boolean flags, and LDB for accessing multi-bit values from inside integers
[07:50:43] <White_Flame> struct/object slots are usually all going to be full word width and tagged.  Unboxed/small values can be had in type-declared locals within a function (including local FLET/LABELS functions able to pass around unboxed values among themselves), and in :element-type specialized arrays
[07:52:04] <White_Flame> (declare (fixnum <varname>)) and (the fixnum <value>) or (logand #xffffffff <value>) style masking are going to be common in micro-optimizing various things
[07:52:22] <Bike> sbcl can do unboxed slots in structs
[07:52:40] <White_Flame> can it do smaller packed slots?
[07:53:41] *** beach` is now known as beach
[07:53:54] *** ChanServ sets mode: +o beach
[07:54:04] <Bike> don't know the exact limits off the top of my head. i don't think it does packed bitfields, but it can probably put two singles in a 64 bit word and such
[07:54:43] <beach> Good morning everyone!
[07:57:01] <Guest74> i think i read somewhere it doesn't do things like 8,16,8 , maybe 8,8,8,8, but that may have been from very old mailing list messages.
[07:57:08] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[07:57:11] *** beach sets mode: -o beach
[07:58:13] <Bike> https://github.com/sbcl/sbcl/blob/master/src/code/early-raw-slots.lisp#L99-L172 looks like it doesn't do integers shorter than words
[07:58:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 246 seconds)
[07:58:42] <Bike> don't quote me on that, this is deep in the internals obviously
[08:00:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[08:02:22] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[08:05:45] *** Joins: Oladon (~olad@98.43.81.226)
[08:07:19] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[08:11:31] <jmercouris> You are all missing the point, it’s not about = and == being confusing being true- you could take literally any statement I make and jackdaniel would take the opposite stance to try to make me look stupid
[08:12:16] <jmercouris> However, I’m not quite dumb enough to take the bait and even engage, it is a well known fact that = and == are commonly confused
[08:12:53] <White_Flame> I don't know about confused, but it can be a hard-to-notice typo
[08:13:14] <jmercouris> This is of course implied
[08:13:39] <jmercouris> I think this is obvious by the fact that I mentioned eq and setf
[08:13:41] <White_Flame> but even that is a bit novice
[08:13:59] <jmercouris> Is it though? I didn’t realize experts don’t make mistakes
[08:14:15] <jmercouris> My eyes frequently jump across letters and symbols and I misspell things
[08:14:56] <jmercouris> I often see one thing and then only see another when looking carefully
[08:26:07] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:27:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:30:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[08:32:21] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:33:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:33:14] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[08:34:48] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:35:50] <jackdaniel> jmercouris: you are clearly rude enough to publicly impy malice on my side. next time I will ban you - enough is enough. this is final warning
[08:36:15] <jmercouris> Ban me for what? Calling you out?
[08:36:29] <jmercouris> Perhaps I should ban you for your degrading comments
[08:36:43] *** jackdaniel sets mode: +b *!*sid438340@*.hampstead.irccloud.com
[08:36:57] *** jmercouris was kicked by jackdaniel (jmercouris)
[08:39:02] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[08:43:15] <beach> hayley: Nice demo!  Looks very sophisticated!
[08:43:34] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[08:43:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:44:33] <hayley> beach: Yeah, well, I didn't present it - some asshole even cut me off when I was trying to present it to the other finalist students, as we had some time between (private) presentations.
[08:45:02] <beach> Wow, why would anyone do that?  What was that person's reason for doing it?
[08:45:04] *** Joins: semz (~none@user/semz)
[08:45:21] <hayley> And, to add insult to injury, my group came a close second and we just got access to some startup funding shit. Not that the first prize of getting an internship with GitHub was appealing either.
[08:46:02] <beach> Still, that's nice!
[08:46:11] <hayley> Sure..
[08:46:40] *** Joins: user|29 (~user|29@c-98-206-88-235.hsd1.il.comcast.net)
[08:46:58] <hayley> Ironically (relative to what I mentioned in the video about "breakout rooms"), I got cut off because the organisers and judges were in another room, and were unaware of what was going on in the student room.
[08:47:02] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 240 seconds)
[08:47:27] <beach> I see.
[08:47:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[08:48:01] *** Parts: akoana (~ah@user/akoana) (Leaving)
[08:50:42] *** Quits: user|29 (~user|29@c-98-206-88-235.hsd1.il.comcast.net) (Client Quit)
[08:51:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[08:52:00] <hayley> My mistake was probably calling the solution a "virtual classroom" when describing it to my team initially, as it does not look like a classroom at all.
[08:52:39] <hayley> The only similarity to a real classroom is a physical metaphor, where you can walk up to someone and see what they did.
[08:52:57] <Guest74> more like a playground
[08:53:13] <hayley> Sure.
[08:54:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:01:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[09:01:09] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:01:50] <lisp123> I have a question - Often one uses their own package that shadows some of CL's symbols. Using IBCL as an example, this requires :use :ibcl in every package definition. Is there a way to *temporarily* hijack the CL package so that *all* forms are evaluated with the user's custom CL package (e.g. IBCL in this example)?
[09:01:55] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[09:02:27] <lisp123> (Namely in my case, to be able to load all system definitions in the context of the custom package and not :CL)
[09:02:40] <hayley> Unless IBCL is exactly the same as CL, then it is probably a bad idea.
[09:02:51] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[09:02:55] <lisp123> Its very similar, and not for 'production' I guess
[09:03:23] <hayley> But you could define a IBCL-USER package like (defpackage #:ibcl-user (:use #:ibcl)) and then evaluate forms in that package.
[09:03:37] <beach> lisp123: By the time you get to evaluation, it is too late.  The package of a symbol is determined at read time.
[09:05:02] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[09:05:37] <beach> lisp123: It ought to be possible to bind *package* before loading source code.
[09:06:12] <lisp123> beach & hayley: thanks
[09:07:34] <lisp123> (for context), so what I was thinking of doing was replacing CL with IBCL (which stores source code in a hash table). Then loading ALL of quicklisp (every package) and having available every function's source code on demand
[09:08:21] <lisp123> Now, many people will put :use :cl in their package defintion, so I think binding *package* may not work, or maybe I am mistaken?
[09:08:51] <hayley> Surely your Lisp implementation already keeps source tracking information, and Quicklisp keeps ASDF systems on disk.
[09:09:09] <lisp123> Not in a good form, lot of things get expanded out
[09:09:59] <lisp123> could i redefine cl:symbol temporarily and then replace it back to the original afterwards?
[09:10:10] <hayley> I hope not.
[09:12:10] <lisp123> Another idea could be to hijack read and replace :cl with :ibcl for example every time and also bind *package* to :ibcl?
[09:12:13] <White_Flame> can package local nicknames shadow global package names?
[09:12:29] <hayley> Another idea would be to think of a better idea.
[09:13:03] *** Joins: s-liao (~s-liao@101.86.103.113)
[09:13:54] *** Joins: user|29 (~user|29@c-98-206-88-235.hsd1.il.comcast.net)
[09:14:12] <lisp123> hmmm ok
[09:14:18] *** Quits: user|29 (~user|29@c-98-206-88-235.hsd1.il.comcast.net) (Client Quit)
[09:15:08] <lisp123> I have an alternative (although curious to know an answer to White_Flame's question) - Can one replace the standard reader of a lisp implementation with Eclector's?
[09:15:41] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[09:17:57] <lisp123> I got a solution :) So I'm good. But if anyone knows a way to shadow :cl with :some-package, that would be great
[09:18:02] <White_Flame> you should be able to change your implementation's implementation
[09:18:02] <beach> lisp123: Sure, you can create your own loader using Eclector+EVAL.  It might be a bit tricky.
[09:18:17] <White_Flame> beach: but what if that code then calls CL:READ?
[09:18:36] <beach> Hmm.
[09:18:41] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[09:19:01] <beach> You would have to configure Eclector to intern symbols in your own package rather than the CL package.
[09:19:15] <beach> Luckily, Eclector was made to be able to do stuff like that.
[09:21:26] <lisp123> beach: I will read into all of that. It would be too many questions so I will do some self-study first, but hopefully I can research and figure how to 'create a loader'
[09:22:14] <lisp123> Thanks
[09:27:45] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[09:39:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[09:43:38] <beach> Good luck.
[09:56:30] *** Joins: alvaro121_ (~akira121@201.230.126.66)
[10:01:09] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[10:01:12] <holycow> hi
[10:01:31] <hayley> hi
[10:01:48] <holycow> hi hayley
[10:01:52] <holycow> you keep crazy hours
[10:01:53] <holycow> :)
[10:02:01] <holycow> noob question
[10:02:25] <holycow> i'm playing with clog and when i run the demos, it opens up a browser and connects the app via websocket.  this is fine.
[10:02:45] <hayley> Well, it is only 5:40pm here.
[10:02:52] <holycow> however, in sbcl, it doesn't release the command prompt so i can continue evaluating forms
[10:02:56] <holycow> oh!
[10:03:29] <holycow> anyway, i noticed that if i ctrl-c in the sbcl window, it provides an interrupt option and i can abort out into a command prompt
[10:03:47] <holycow> the browser demo keeps on working but i have access to the sbcl command prompt after i abort
[10:04:16] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:04:17] <holycow> what is this ctrl-c in sbcl?  my sysadmin kickedin an had me press ctrl-c just to test.
[10:04:27] <holycow> i wasn't expecting that to do anything
[10:04:50] <holycow> hayley: oh, you are upside down?
[10:04:54] <holycow> and under lock down?
[10:04:56] <hayley> C-c invokes the debugger.
[10:05:00] <holycow> heh ;)
[10:05:03] <hayley> holycow: Yes and partly.
[10:05:23] <holycow> ohhh it does?  aha.
[10:07:31] *** Joins: doulos05 (~user@210.105.91.17)
[10:08:16] <doulos05> Hello! Is there anybody on that can help me clear a mental log jam around using LTK?
[10:08:33] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:09:10] <doulos05> This is my first attempt at building an actual GUI, and I think I'm doing it wrong.
[10:09:49] <doulos05> I've got stat block readouts of a couple of fairly complex CLOS objects that I want to put on the screen and then change as the game goes on.
[10:10:45] <doulos05> So I made a function (display-record-sheet unit target-frame) that takes the stats from the unit object, drops them into labels and other GUI widgets, and lays those out within that target frame.
[10:12:12] <doulos05> I had hoped I could just call that function again to "redraw" the record sheet, but the moment (display-record-sheet) gets called a second time, it breaks the binding on all commands I have bound to any widgets in the frame.
[10:13:30] <doulos05> I confirmed this by setting up the window, interacting with the button, and then calling the redraw function manually and interacting with it again. The calls to (print) don't output to standard-output and nothing in the record sheet updates.
[10:14:24] *** Joins: VincentVega (~user@212.241.29.8)
[10:14:29] <doulos05> DO I have to keep every single GUI widget around within scope of my main loop and setf to update them? I was trying to do it this way to simplify things.
[10:16:01] <holycow> VincentVega: what do they call a big mac in amsterdam?
[10:18:37] *** Joins: z3t0 (~z3t0@146.71.14.98)
[10:19:45] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Quit: Client limit exceeded: 20000)
[10:20:05] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: Lost terminal)
[10:24:04] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[10:25:17] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[10:28:02] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[10:29:02] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 240 seconds)
[10:29:07] <beach> doulos05: Did you consider using McCLIM instead of LTK?
[10:29:20] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[10:30:17] <doulos05> This is my first time ever attempting a GUI. Is there a good, beginner friendly tutorial for McCLIM?
[10:30:56] <beach> I know it is being worked on.  I don't recall the state of it.  But #clim is very helpful with questions.
[10:31:32] <beach> doulos05: The advantage of McCLIM is that you are working with a single safe language with established debugging tools.
[10:32:44] <doulos05> Yeah. The other question I have is "How hard is this to set up on my Mac?"
[10:33:53] <doulos05> I'll poke around there and see. I'd love to work with McCLIM if I can. I'll hop on #clim and see if anybody there has gotten it working on MacOS.
[10:33:56] <beach> I don't know.  Perhaps you have too many constraints on your GUI framework to make McCLIM feasible at this time.  I just thought I should mention it to give you the option of avoiding FFI hell.
[10:34:19] <doulos05> Avoiding FFI hell is worth jumping through a few hoops.
[10:34:31] <beach> That's what I think myself.
[10:35:06] <beach> I know there is a CLX backend and a framebuffer backend.  I suspect there is no Mac-specific backend at this point.
[10:35:20] <beach> But then, I don't use commercial operating systems, so I don't know.
[10:39:28] *** Joins: gaqwas (~john@dynamic-095-114-161-175.95.114.pool.telefonica.de)
[10:46:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:46:52] *** Parts: doulos05 (~user@210.105.91.17) (ERC (IRC client for Emacs 28.0.50))
[10:52:19] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[10:52:33] *** Joins: amb007 (~a_bakic@79.132.22.93.rev.sfr.net)
[10:52:35] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[10:52:38] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[10:52:59] *** Joins: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[10:53:02] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[10:57:07] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[11:02:26] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[11:05:02] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[11:05:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:08:32] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[11:12:04] *** Joins: aartaka (~aartaka@5.1.53.225)
[11:25:05] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:25:46] *** Joins: Cymew (~ante@host-78-79-234-106.mobileonline.telia.com)
[11:27:51] *** Quits: amb007 (~a_bakic@79.132.22.93.rev.sfr.net) (Ping timeout: 250 seconds)
[11:28:53] *** Joins: amb007 (~a_bakic@128.148.22.93.rev.sfr.net)
[11:32:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[11:35:08] *** Joins: nwoob (~apple@103.135.39.182)
[11:35:56] <nwoob> I was reading about CL and everywhere people wrote like learning Lisp gives you different perspective and enlightenment.
[11:36:18] <nwoob> Does that comes when you have very advanced understanding of CL?
[11:36:48] *** Joins: Krystof (~user@81.174.155.115)
[11:37:05] <jackdaniel> nwoob: many small pieces of "enlightenment" come from simple stuff, like incremental compilation
[11:37:06] <nwoob> or can the difference be seen and realized when a newbie start learning
[11:37:18] <jackdaniel> or metaprogramming with the operator defmacro
[11:38:20] <jackdaniel> some people get very surprised when they learn that + is implemented as a function
[11:38:30] <rotateq> :)
[11:38:39] <jackdaniel> or that it is possible to use the IF form as an rvalue
[11:38:50] <jackdaniel> (using c++ terms)
[11:39:14] <beach> nwoob: What languages do you already know?
[11:39:14] <nwoob> so I should also learn another language
[11:39:16] <jackdaniel> there are many other things that are pretty basic in common lisp but get gross really fast when you try to achieve them in some other popular languages
[11:39:25] <nwoob> beach: I know javascript
[11:39:43] <beach> I see.
[11:40:05] <nwoob> I know intermediate JS, I'm not advanced in that
[11:40:29] <beach> Yes, well, you are used to automatic memory management which is good.
[11:41:23] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[11:41:24] *** Quits: amb007 (~a_bakic@128.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:43:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:44:14] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4)
[11:44:39] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:47:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:48:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:48:35] *** Joins: s-liao (~s-liao@101.86.103.113)
[11:50:12] *** Joins: mingus (~jan-magnu@ti0135a400-2429.bb.online.no)
[11:51:41] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:58:11] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 246 seconds)
[11:58:21] *** Joins: aartaka (~aartaka@5.1.53.225)
[11:59:16] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[11:59:21] *** Joins: Jing_ (~hedgehog@2604:a840:3::1033)
[12:00:04] <beach> nwoob: We definitely encourage you to learn Common Lisp, and both #commonlisp and #clschool can answer questions that you might have.
[12:01:21] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Ping timeout: 245 seconds)
[12:02:51] *** Quits: mingus (~jan-magnu@ti0135a400-2429.bb.online.no) (Ping timeout: 256 seconds)
[12:04:32] *** Quits: gaqwas (~john@dynamic-095-114-161-175.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[12:06:51] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 250 seconds)
[12:07:15] *** Joins: mingus (~jan-magnu@ti0135a400-2429.bb.online.no)
[12:11:09] <lisp123> Are there any good examples of where CL shines?
[12:12:02] <lisp123> (short, simple, etc.). Like a small program that is much shorter / elegant in length vs. another popular language (Python seems to be all the rage)
[12:12:05] *** Quits: mingus (~jan-magnu@ti0135a400-2429.bb.online.no) (Ping timeout: 264 seconds)
[12:12:15] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[12:12:15] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Client Quit)
[12:12:55] <lisp123> Generic Functions might be a good candidate that is easier to grasp (macros seem a bit advanced for that basic "this is why CL is great")
[12:13:24] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[12:18:45] <beach> lisp123: I think the difference is more pronounced in a large software system.
[12:19:07] <beach> For small things, you can always find a language that has that particular construct built in.
[12:19:45] <beach> lisp123: For example, purely functional languages are usually more terse for simple things.
[12:20:12] <lisp123> beach: That's a good point. CL does tend to lend itself to more 'robust' and 'reliable' code
[12:20:37] <beach> Definitely.
[12:20:47] <lisp123> And given the language itself is from 1994 and still so good, that's like testament in itself :)
[12:21:01] <VincentVega> holycow: Big Mac is a Big Mac, but they dip that shit in mayonnaise.
[12:21:43] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (Quit: macaw)
[12:22:08] <beach> lisp123: While (as WSCL shows) there is a lot of undefined behavior in the standard, most implementations are fairly safe.  Which is not the case for most implementations of C or C++ for instance.
[12:22:44] <lisp123> Indeed
[12:24:34] <beach> And, as I pointed out in #clschool yesterday, as soon as you have a large program, you need conditions/exceptions.  And C doesn't have those (though it has setjmp/longjmp), and I have been told that C++ exceptions are so useless that large organizations won't use them.
[12:25:17] <VincentVega> lisp123: Since I got aquainted with lisp, I have had a certain affection for the or macro, especially if you are looking for a quick and easy showcase of prefix notation.
[12:25:29] <beach> So in a large and safe program, a lot of explicit code must be dedicated to handling exceptional situations in languages such as C or C++.
[12:26:09] <lisp123> beach: Yes, the condition system is also really good and well thought through
[12:26:53] <beach> So again, Common Lisp will shine more in code that needs that stuff, which is in larger serious systems.
[12:27:03] <lisp123> VincentVega: That's actually a great example (benefits of prefix notation, delayed evaluation)
[12:27:34] <lisp123> beach: Makes sense
[12:27:38] <VincentVega> lisp123: yeah : )
[12:36:51] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Ping timeout: 256 seconds)
[12:40:01] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 268 seconds)
[12:41:46] <rotateq> lisp123: better ask for the small amount of things where it doesn't shine directly :)
[12:42:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:43:32] *** Quits: nwoob (~apple@103.135.39.182) (Ping timeout: 240 seconds)
[12:43:44] <lisp123> rotateq: True, that will take up less heap space :)
[12:46:00] <rotateq> now this one quote comes again to my mind, and it lists many non-trivial topics
[12:51:17] *** Joins: nwoob (~apple@103.135.39.182)
[12:52:08] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[12:54:25] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[12:56:41] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 268 seconds)
[13:00:28] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[13:00:32] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[13:09:09] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[13:11:25] *** Quits: alvaro121_ (~akira121@201.230.126.66) (Ping timeout: 250 seconds)
[13:12:25] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[13:14:29] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Ping timeout: 264 seconds)
[13:18:59] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[13:39:48] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[13:41:10] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[13:46:44] *** Joins: Guest4598 (~Guest45@2a02:c7f:b086:1000:6912:6e37:da6a:23e7)
[13:46:56] *** Quits: Guest4598 (~Guest45@2a02:c7f:b086:1000:6912:6e37:da6a:23e7) (Client Quit)
[13:54:14] *** Joins: s-liao (~s-liao@101.86.103.113)
[13:54:55] *** Joins: occ (~occ@user/occ)
[14:00:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[14:11:03] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[14:15:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[14:16:26] *** Joins: amb007 (~a_bakic@144.148.22.93.rev.sfr.net)
[14:16:26] *** Quits: amb007 (~a_bakic@144.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:16:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:18:21] *** Joins: NeoCron (~NeoCron@p200300c4cf161b0075b55a4b5f100d7e.dip0.t-ipconnect.de)
[14:20:12] *** Joins: random-nick (~random-ni@87.116.176.55)
[14:21:05] *** Quits: nwoob (~apple@103.135.39.182) (Ping timeout: 264 seconds)
[14:21:53] *** Quits: NeoCron (~NeoCron@p200300c4cf161b0075b55a4b5f100d7e.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:22:11] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[14:26:16] *** paule32_ is now known as paule32
[14:30:14] *** Joins: kadir (~kadir@78.178.105.36)
[14:44:26] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 246 seconds)
[14:45:02] *** Joins: amb007 (~a_bakic@144.148.22.93.rev.sfr.net)
[14:54:11] *** Joins: nwoob (~apple@103.135.39.182)
[14:54:12] *** Quits: amb007 (~a_bakic@144.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:54:32] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:56:15] *** Quits: Cymew (~ante@host-78-79-234-106.mobileonline.telia.com) (Ping timeout: 256 seconds)
[14:59:45] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[15:03:04] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:06:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:12:59] *** Quits: VincentVega (~user@212.241.29.8) (Ping timeout: 264 seconds)
[15:20:47] *** Joins: pjb (~pjb@user/pjb)
[15:27:58] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[15:31:06] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:31:57] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[15:33:20] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:35:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:35:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:41:00] <jackdaniel> hayley: I'm not sure how much you use C, but confusing = with == for a seasoned C/C++/Java programmer is similar to confusing car and cdr for a seasoned common lisp programmer
[15:46:23] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Ping timeout: 246 seconds)
[15:50:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:51:26] <Nilby> I thought I made a mistake once, but thankfully I was mistaken.
[15:56:47] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:56:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:57:14] *** Joins: VincentVega (~user@212.241.29.8)
[15:57:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:05:29] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[16:05:39] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[16:10:30] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[16:15:27] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:16:52] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:19:33] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Ping timeout: 256 seconds)
[16:31:05] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:34:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:39:46] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[16:40:02] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:40:06] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[16:41:05] *** Quits: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[16:43:10] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[16:56:14] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[16:56:29] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:58:25] *** Joins: Cymew (~ante@host-78-79-234-106.mobileonline.telia.com)
[17:08:51] <jcowan> Historically the distinction between = and == was introduced because of the (IMHO very dubious) decision to  make assignment an expression.  In Basic, a = b = c means that a is assigned true if b and c are equal and false otherwise.  To assign both a and b to c, you write a, b = c.
[17:09:12] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 268 seconds)
[17:10:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:10:11] *** Joins: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[17:15:30] *** jackdaniel sets mode: -b *!*sid438340@*.hampstead.irccloud.com
[17:18:09] <Guest74> :)
[17:19:09] <Guest74> If I wanted to keep a base system free of external dependencies. What is the best way to provide additional functionality that has external dependencies?
[17:19:23] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[17:19:53] *** Joins: pve (~pve@178-55-111-82.bb.dnainternet.fi)
[17:20:08] <beach> An ASDF system definition?
[17:20:13] <beach> Not sure I understand the issue.
[17:20:52] <Guest74> so I have a raster package that can be used without deps.
[17:20:55] *** Joins: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no)
[17:21:02] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[17:21:15] <Guest74> and then I have additional functionallity, like loading images, or display to a screen or framebuffer.
[17:21:25] <jackdaniel> define a system "whatever" that pulls everything and depends on "whatever/core"
[17:21:34] <jackdaniel> where "whatever/core" implements vanilla functionality
[17:22:55] <Guest74> I'd like to have the core package named the package.
[17:22:55] *** Joins: aartaka (~aartaka@5.1.53.225)
[17:23:30] <jackdaniel> then name it whatever and name the full one "whatever/with-bells (and whistles)"
[17:24:09] <Guest74> I'd like it all to have the same name, but asdf doesn't like that.
[17:24:29] <jackdaniel> then how the consumer would distinguish them?
[17:24:35] <jackdaniel> you may load a module under :if-feature too
[17:24:53] *** Joins: mingus_ (~jan-magnu@auth-147-208.anyconnect.uib.no)
[17:25:00] <Guest74> oh, that sounds interesting.
[17:25:17] <jackdaniel> (defsystem "foo" :components ((:module "core" …) (:module "whistles" :if-feature (:and :bells :whistles) …))
[17:25:25] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[17:25:46] <jackdaniel> that said having separate systems would be (imo) much cleaner for potential users
[17:26:38] <Guest74> i think so too. and then you can add any features you want.
[17:27:02] <Guest74> but asdf always complains when the system name is different than the package name.
[17:27:27] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[17:27:38] <jackdaniel> no it doesn't
[17:28:00] <Guest74> it does for me.  Can never properly find the system.
[17:28:01] <jackdaniel> it complains when the base system name is different than the filename of the asd file
[17:28:34] <jackdaniel> base system name is "<whatever-comes-before-slash>" in "<whatever-comes-before-slash>/subsystem"
[17:29:02] *** Quits: nwoob (~apple@103.135.39.182) (Ping timeout: 240 seconds)
[17:29:11] <jackdaniel> if the file is named other than <whatever-comes-before-slash>.asd it will complain
[17:29:53] <jackdaniel> that was a source of a certain issues because when introduced it broke a few things, moreso it started complaining for systems named like "cl-fad-tests"
[17:30:01] *** Joins: Bike (~Bike@71.69.170.70)
[17:30:01] *** ChanServ sets mode: +o Bike
[17:30:18] <Guest74> yes, i find it inconvenient.  But i will try a longer named system with appropriately named asd and load into the core package.
[17:32:27] <jackdaniel> for Fare's defense it was to speed up locating systems (without loading all asd files along the way)
[17:32:41] <Guest74> then again, maybe I'm overthinking it and most people load everything including the kitchen sink into their images.
[17:33:59] *** Quits: mingus_ (~jan-magnu@auth-147-208.anyconnect.uib.no) (Read error: Connection reset by peer)
[17:33:59] *** Quits: mingus (~jan-magnu@auth-147-208.anyconnect.uib.no) (Read error: Connection reset by peer)
[17:34:07] <jackdaniel> I think that the most common practice is what I've mentioned, that is the main system with all features named "name" and depends on its subsystems that contain sub-functionalities, like "name/base", "name/bell", "name/whistle"
[17:34:09] <etimmons> Not just a speed up. It also prevents .asd files that aren't explicitly being searched for from running arbitrary code/loading arbitrary systems.
[17:34:42] <Guest74> I hate that slash.
[17:35:54] <jackdaniel> etimmons: well yeah, but that not even could, but /should/ be solved by writing a separate reader for asd files. I suppose that given all defmethod forms littering existing systems definitions that ship is already gone
[17:36:58] <Guest74> does clpm have a different strategy or just uses asd's?
[17:37:53] <etimmons> jackdaniel: I agree. But :defsystem-depends-on could still be a bit tricky to handle, even with a separate reader.
[17:39:05] <etimmons> Guest74: CLPM is (largely) responsible only for installing dependencies and tracking what got installed. Finding and loading systems is all ASDF's job.
[17:40:00] <Guest74> ah, so nobody is working on an asdf replacement? Or is that what Shinmera's new thing is?
[17:40:09] <Shinmera> It is.
[17:40:36] <Guest74> exciting times ahead.
[17:41:00] <Shinmera> Haven't had time to work on it recently
[17:41:10] <Guest74> understandably
[17:41:11] <Shinmera> But I'd say most of the hard bits are done
[17:41:46] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:41:53] <paule32> hello, what the topic? a new lib ?
[17:42:00] *** Joins: Bike (~Glossina@71.69.170.70)
[17:42:00] *** ChanServ sets mode: +o Bike
[17:42:35] <jackdaniel> etimmons: wouldn't that be easier though? if you have a separate parser, then you learn that the definition depends on another system and you load it beforehand. and since you don't have actual code in asd, then there shouldn't be problems with accessing package that doesn't exist yet
[17:42:36] <Guest74> I wonder what the next ecosystem shift will be? some sort of collaborative coding?
[17:43:38] <jackdaniel> you will have copilot write random c code that looks almost like its doing something correctly. sounds like a joke, but if we have stackoverflow-based coding, why not randomized-foss-laundery one?
[17:45:23] <paule32> you missing contributers ?
[17:46:56] <etimmons> jackdaniel: I was thinking more along the lines of pathological cases. Where you couldn't even tell what systems an .asd defines until the :defsystem-depends-on have been loaded. I'm pretty sure I could do something like that with ASDF right now.
[17:48:44] <etimmons> You'd either have to restrict the naming convention (what we have today) or restrict what a :defsystem-depends-on can sanely do.
[17:48:49] <jackdaniel> etimmons: if we take canonical grammar of the asdf system from the manual, then it goes like (defsystem <name> <option-name> <option-value> ...) so defsystem-depends-on could be found with a non-turing-complete-reader I think; and if we assume that asd may contain code, then I agree that it is impossible
[17:49:07] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[17:49:52] *** Joins: jealousmonk (~user@2804:431:e7c4:7f35:7769:1f33:9572:c142)
[17:52:54] <paule32> ah, okay. i already thinking about my own parser, too. but then it will break iso lisp
[17:53:49] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[17:53:53] <paule32> i began the source code in pascal
[17:54:17] <paule32> like more for a web module for the apache2.4
[17:54:36] *** Joins: nature (~nature@45.32.235.173)
[17:54:55] <etimmons> jackdaniel: What I have in mind doesn't require code in the .asd file. IIRC, Guest74 wanted children system names to be separated with #\-. It's not too much of a stretch to combine that idea with package inferred systems using some new system class.
[17:54:58] <Guest74> so :if-feature requires the feature to be set before asdf starts planning. Is it possible to set a feature for the planning stage within the system definition?
[17:55:02] <etimmons> So if you've got foo.asd and bar.lisp, bar.lisp would define the system foo-bar. How would foo-bar be found? The special parser doesn't help you here because ASDF doesn't know that bar.lisp defines the foo-bar system until foo's :defsystem-depends-on have been loaded.
[17:56:39] <etimmons> So we're back to either enforcing a naming convention or eagerly loading everything's :d-d-o
[17:56:41] <jackdaniel> etimmons: I'm ignorant regarding inferred system names so I can't keep up with the discussion :p I'll need to trust you on this
[17:56:54] *** Quits: Cymew (~ante@host-78-79-234-106.mobileonline.telia.com) (Ping timeout: 260 seconds)
[17:57:20] <jackdaniel> I'm not against the naming convention, I've mentioned a separate parser as a solution to the arbitrary code problem
[17:57:36] <jackdaniel> (when only reading system defintions)
[17:58:06] <etimmons> jackdaniel: I wish I were ignorant of them :). I regret switching a number of my projects over to them and am working to revert that.
[17:59:18] <etimmons> Totally. I'm just pointing out that, given ASDF's current model, that doesn't help you much. Because in the end, even something as simple as extracting the names of defined systems could require loading the :d-d-o.
[18:00:01] <etimmons> (or whatever defmethods users have squirreled away in the .asd)
[18:00:17] <jackdaniel> sure, that's why I think that it is not possible to fix it now
[18:01:14] <etimmons> Now maybe ASDF 4 could get away with making the .asd more declarative. But I kind of doubt it since so many things would break.
[18:01:45] <Guest74> I don't think anybody will write that.
[18:02:25] <paule32> a transpiler ?
[18:02:37] <Guest74> asdf 4
[18:03:20] *** Joins: occ (~occ@user/occ)
[18:04:15] <paule32> i have the source code of clisp, it is in C, and i had the idea to make a iso lisp system like alegro franz, but free, but i saw no interesst
[18:05:49] <Nilby> I wrote a thing that needed all the .asd's in quicklisp to be declarative, and it only failed on a few systems and I could come up with non-full-parsing workarounds for most things.
[18:06:25] <etimmons> Well, maybe it's possible... Use the special parser to read the file. Look for some marker indicating it's ASDF 4 compatible (or contains only a defsystem form with no :d-d-o). If found, register all the systems, etc. (and have access to features such as arbitrary system names). Otherwise, require the current naming convention and fall back to existing behavior.
[18:07:10] <jackdaniel> Nilby: I did the same! :)
[18:07:21] <Nilby> But I really wish for an fully declarative system defintion, and evaluation configuration to be separate.
[18:07:22] <jackdaniel> a few years back, to generate quicklisp distributions
[18:08:00] <jackdaniel> and a graph of dependencies
[18:08:20] *** Joins: asen (~Guest41@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:09:13] <etimmons> Guest74: I'm not sure, but it's possible that features set in earlier build phases (like :d-d-o ) could affect :if-feature in later phases. But in general, I do think the features need to be present before planning.
[18:10:00] <Nilby> someday maybe I'll finish my thing like debian "aptitude" for quicklisp. I have to merge my tui table widget and tree widget.
[18:10:58] <Guest74> that's unfortunate.  I've written quite a few systems that include/exclude certain things based on a future encompassing system and was kind of hoping I could just set the feature in that future system.
[18:11:33] <Guest74> kinda did that so people could use the individual systems without including my opinionated everything-and-the-kitchen-sink.
[18:13:08] <etimmons> Yeah, that's something I really like about Python/pip. You can provide options specifying which features you want installed for each package. Closest we've got to that is just separate system names.
[18:13:48] <Nilby> :d-d-o setting features for later :if-feature seems to always work for me
[18:14:10] <Nilby> not that it's elegent or anything
[18:14:15] <etimmons> I typically do either what jackdaniel suggested (foo/core foo/bells) or make systems like foo and foo+bells (in separate .asd files, of course)
[18:14:56] <jackdaniel> fun fact: if you have * in a name of the file, slime gets confused :)
[18:15:23] <etimmons> Oh, many implementations get confused by that as well
[18:15:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:15:49] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:16:02] <Guest74> my use case is cause I'm lazy and would rather have one package, e.g. my vector graphic stuff that can render svg paths, where I'd like to define the functions for display on my surfaces but also provide people the option to render on x11 windows.
[18:16:09] <jackdaniel> perhaps it is the implementation underneath what gets confused, I didn't dig into it
[18:16:11] *** Joins: Inline (~Inline@aftr-37-201-240-235.unity-media.net)
[18:16:15] <Nilby> the whole :documentation #.(slurp "REAMDE.md") is funny though
[18:17:25] *** Quits: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[18:19:01] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Read error: Connection reset by peer)
[18:19:20] <pve> lisp123w: were you able to "shadow" the CL package? (reading the logs here)
[18:20:06] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[18:21:40] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:22:53] <Guest74> nilby: I'm thinking of going the other way and just have my readme generated from the documenation. Somebody must already be doing that.
[18:23:13] <jdz> Some implementations get confused with colons in file names, too.
[18:23:39] <etimmons> jackdaniel: I thought I wrote up a list somewhere, but can't find it again. I do remember for sure that it's basically impossible to use files with wildcards in their name on ABCL and ECL.
[18:26:08] <jackdaniel> etimmons: I was about to say "who uses ecl anymore" as a joke, but got scared that too many people would nod with a serious look in their eyes :)
[18:26:12] <Guest74> ugh, i thought linux had a problem with * in the filename, but was able to create one, just can't remove it now.
[18:26:26] <jackdaniel> Guest74: rm file\*.foobar
[18:26:44] <jdz> Or single quotes.
[18:27:02] <Guest74> lol, I'm so used to the repl i used the wrong shell command.
[18:27:08] <Nilby> Guest74: Yes, that's the direction I like, but harder to get spiffy text features.
[18:27:55] <Guest74> yeah, that's been keeping me from writing anything.  Do you include some sort of markdown or not?
[18:27:55] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:28:19] <Guest74> it'd be nice if there was a way to display a docstring in different formats.
[18:28:34] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:29:17] <Guest74> or maybe decide the future is here and just ignore everybody who uses describe/documentation at the repl.
[18:29:21] <etimmons> jackdaniel: Been many years since I chatted with him, but I know a researcher that swore by ECL. Only CL implementation he would use because he really liked the C interop.
[18:29:22] <Nilby> Guest74: I don't, but it doesn't matter since there's nobody reads it.
[18:29:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:30:24] <Guest74> they will once there's a nice documentation reader!
[18:30:28] <jackdaniel> well if not anyone else, I use ecl :) (and in seriousness I'm aware of a few people using it in both commercial and foss settings)
[18:30:56] <Guest74> it can be used on android right?  it's on my to research list.
[18:31:03] <etimmons> Although SBCL is my primary, I always do my best to test on ECL as well :)
[18:31:31] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:32:10] <jackdaniel> Guest74: yes, and Polos Ruetz ported EQL5 to android too
[18:32:12] <Nilby> I use ecl all the time to compile sbcl on my phone.
[18:32:23] <jackdaniel> so you may use all of qt5 in there
[18:32:41] <jackdaniel> (including graphical repl and such)
[18:32:55] <Guest74> unfortunately my brain isn't smart enough for qt. Or it wasn't last time I looked at it.
[18:33:10] <jackdaniel> well, eql5 gives you lispy way to work with it
[18:33:36] <Guest74> my hope is to write usable systems my brain can understand and then have smarter people make them better.
[18:33:49] <jackdaniel> it is a really cool project (it is a shame that it works only under ecl, otoh that highlights some strengths of ecl)
[18:36:14] <Guest74> well at least it look s like qml is pretty compatible with my ui stuff.  Probably wouldn't be hard to write a converter.
[18:36:41] <etimmons> Speaking of testing, for the Gitlab inclined folks here I've been working on scripts for Gitlab CI that make it pretty trivial to run tests on multiple implementations. Not ready for primetime quite yet, but if you want to be a guinea pig/give feedback it's at <https://gitlab.common-lisp.net/clci/gitlab-ci>
[18:40:52] <Guest74> I just read https://blog.matthewdmiller.net/learn-common-lisp-by-example-qt-gui-with-eql5 . It does look pretty nice.
[18:42:20] <jackdaniel> Guest74: if you have questions then author reguarily hangs out and reads logs on #ecl
[18:42:41] <jackdaniel> (the software author, not the blog post)
[18:43:20] <Guest74> I'll try to keep that in mind.  must finish the linux ui stuff first.
[18:44:03] <Guest74> do any other implementations allow with-slots on structs besides sbcl?
[18:53:04] *** Quits: asen (~Guest41@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Client closed)
[18:53:59] *** Joins: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:54:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:56:43] <jackdaniel> probably most, it costs very little to define a method for slot-value-using-class
[18:58:52] <Guest74> puts trivial:with-slots onto stack.
[18:59:04] *** Joins: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[19:00:44] <Guest74> not really, someone else please write it.
[19:01:02] *** Joins: JeromeLon (~jerome@2a00:23c7:99b2:9501:6e53:a6f8:da20:c635)
[19:02:23] <Guest74> jackdaniel: do you guys use xlib:put-raw-image at all?  need some examples as doesn't seem to be working for me.
[19:03:26] <jackdaniel> I don't think that we do
[19:03:33] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[19:10:51] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[19:16:12] *** Joins: nwoob (~apple@103.135.39.182)
[19:17:49] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:22:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:27:59] *** Quits: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[19:28:16] *** Joins: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[19:28:55] *** Quits: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[19:31:53] *** Quits: nwoob (~apple@103.135.39.182) (Ping timeout: 264 seconds)
[19:36:30] *** Joins: ym (~ym@5.143.220.3)
[19:47:51] *** Joins: nwoob (~apple@103.135.39.182)
[20:03:44] <paule32> okay, i will try to provide a modern lisp, but i need a little time to working in it. the idea is, to provide a tui, and gui, but this tertier projects. i think the system have a solid basis, so i need some feedback in steps that follows, you are the guys with huge knowledge
[20:04:37] <jackdaniel> paule32: perhaps it is me being tired, but I don't understand what you are going on about from the moment you have joined
[20:05:34] <beach> paule32: Do you mean ANSI Common Lisp rather than "ISO Lisp"?  Or do you mean ISLisp?
[20:05:36] <paule32> jackdaniel: i saw you, that you discuss of changes in lisp, and i working of a module like lisp interpreter
[20:06:27] <paule32> few month ago, i began to collect informations what is need, to provide a free franz
[20:06:30] <beach> paule32: And what is the purpose of this project?  How is it different from what we have?
[20:07:04] <beach> paule32: What is a "free franz"?
[20:08:19] <paule32> simply nothing, beach, the fact is, i am not satisfied with other languages like c++, you have to compile in bigint lib if you want huge math ops. but the most langs. only provide cpu bit wide math ops (also 2^64 as limit e.g.
[20:08:26] <paule32> and lisp has it native
[20:09:02] <paule32> free franz was a little joke of me, today :-) sorry. i working on a free gui like alegro
[20:09:07] <paule32> but free
[20:09:11] *** Quits: attila_lendvai_ (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Read error: Connection reset by peer)
[20:09:45] <beach> paule32: So a GUI IDE but for an existing Common Lisp implementation?
[20:13:32] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 240 seconds)
[20:13:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:13:56] <paule32> yes
[20:14:24] <beach> paule32: For a particular Common Lisp implementation, or for any conforming Common Lisp implementation?
[20:15:02] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[20:15:06] <paule32> few months ago, i used clisp, but you tell me that i could use sbcl
[20:16:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:16:43] <paule32> this was a work, at begin to minimize lazarus pascal executables, and using modules
[20:17:02] <paule32> then i had the idea to use modules in lisp, too, to not have so big executes
[20:17:21] <paule32> like hard disk space minimizing
[20:17:55] <paule32> okay, in times of gigabyte not the thing, but i come from ms dos times, there where all bit and byte was need
[20:18:20] <paule32> and this was, and is my intention
[20:18:35] <Guest74> is retrospectiff the only tiff reading/writing library?  i thought there was another one but cliki doesn't show anything.
[20:25:40] <paule32> beach: and as result of the apache module, you can have a look at: "https://www.kallup.net/pub" there comes a creditial screen: user: paule32, pass: test3232, then i comes a bootup screen, and then a windows xp like screen with windows, that you can move, and resize: and that was the beginning... stay tunes :)
[20:25:55] *** Joins: Catie (~user@user/catie)
[20:27:10] <beach> I don't know how to use Windows, and I don't understand what the purpose is.  Sorry.
[20:29:25] <paule32> the windows things, you can see are fakes, it can be changed to linux like look and feel, but i working on a windows machine, so i inpired by windows. and the idea was to bring dos/cli applications to web applications
[20:30:15] *** Joins: notzmv (~zmv@user/notzmv)
[20:35:02] *** Joins: VincentV` (~user@212.241.29.8)
[20:36:32] *** Quits: VincentVega (~user@212.241.29.8) (Ping timeout: 240 seconds)
[20:37:39] *** Quits: nwoob (~apple@103.135.39.182) (Quit: leaving)
[20:42:16] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:49:05] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:49:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 264 seconds)
[20:50:08] <NotThatRPG> Kind of a shapeless query: I am running tests on GitHub, using SBCL where a long-running test runs for c. 10 minutes on my laptop, but on GitHub's servers it times out after 6h. Honestly, kind of at a loss about where to being to figure it out.  Any suggestions? Wondering if it might be some compilation settings issue, although on the GitHub node we are compiling with `(safety 3)`
[20:50:14] <NotThatRPG> Any suggestions/hints?
[20:53:19] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:55:05] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:55:41] *** Joins: tyson2 (~user@bras-base-toroon020aw-grc-19-184-148-172-174.dsl.bell.ca)
[21:04:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:04:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:14:44] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:15:05] *** Quits: X-Scale (~ARM@31.22.162.107) (Ping timeout: 264 seconds)
[21:16:45] *** X-Scale` is now known as X-Scale
[21:20:19] <jackdaniel> console log shows something? i.e whether it stucks somewhere?
[21:20:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:20:47] <jcowan> I have found what I think is a bug in SBCL 2.1.9 and ECL 21.2.1, or at least a questionable interpretation of the ANS.  In both systems, (= 1.1 1.1d0) returns NIL, even though the arguments have in some sense "the same value" (an undefined term).  My guess is that they are being compared as rationals, even though the contagion rules do not apply to this case.
[21:21:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:21:31] *** ski_ is now known as ski
[21:25:17] <Catie> I can replicate this behavior in CCL and CLISP. The definition and examples in the HyperSpec would indicate that this is incorrect behavior, notably that they say "(= 3.0s0 3.0d0) is true."
[21:26:06] *** Joins: alvaro121_ (~akira121@201.230.126.66)
[21:28:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:30:17] <mfiano> I would expect that to be NIL. The standard doesn't mandate how floats should be encoded, and any reasonable implementation would use IEEE-754 which are very different values, unlike 3f0 and 3d0
[21:31:46] <jcowan> Presumably examples aren't normative
[21:32:05] <mfiano> That is correct
[21:32:47] <jcowan> (We have some folks in Schemeworld who claim that at least some examples *are* normative, which annoys me.)
[21:35:08] <jcowan> But I don't agree that 1.1f0 and 1.1d0 are different values numerically.
[21:35:36] <Catie> The spec says, "These examples are not considered part of the standard," and notes that they could be removed. But it also says "the examples provide ... consistency checks for the rest of the material." Given these two things and that the definition for = reads, "The value of = is true if all numbers are the same in value; otherwise it is false", and "=, /=, <, >, <=, and >= perform necessary type conversions", I w
[21:35:37] <Catie> ould expect that 1.1 and 1.1d0 would be equal under the predicate =
[21:36:40] <mfiano> But they aren't the same in value on most implementations, only in printed representation.
[21:37:10] <Catie> I think you and I have different definitions of "value" in this case
[21:39:17] <mfiano> Perhaps
[21:39:32] <mfiano> 1.1d0 is stored as the value of (* 0.55d0 2d0)
[21:40:26] <mfiano> which also does not have an exact operand in binary
[21:40:44] <mfiano> there isnt enough guard bits in single precision
[21:41:02] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[21:41:37] <Catie> From my standpoint, mathematically the numbers are the same, even if they may have different precisions. That is, a number with a decimal point has a "value" and a "precision", and these two things are separate. Of course, I'm not a mathematician, so I might just have a completely wrong model of how numbers work
[21:46:53] <jackdaniel> Catie: would you expect 23/123456 be = to 24/123456 ?
[21:47:00] *** Joins: occ (~occ@user/occ)
[21:47:43] <Catie> jackdaniel: no, those have different "values". Why that example in particular?
[21:47:56] <jackdaniel> fact that printed representation in decimal is similar doesn't mean that floats in binary are
[21:48:24] <_death> we've been through this kind of discussion recently.. 1.1f0 is rounded by the reader to 1.10000002384185791015625, while 1.1d0 is rounded to 1.100000000000000088817841970012523233890533447265625
[21:48:36] <NotThatRPG> @jackdaniel: No, not finding anything in the console log that suggests anything. Just a list of the test names as they are run and then a timeout message.
[21:48:48] *** Joins: cosimone (~user@93-44-184-123.ip98.fastwebnet.it)
[21:48:49] <jackdaniel> i.e difference between 1.1 and 1.1d0 represented in memory may be bigger than 1/123456
[21:49:04] <jackdaniel> (of course these are made up numbers)
[21:49:07] <Catie> Oh I see, so the printed representation of a FLOAT is a truncated version of the actual value it stores
[21:49:16] <jackdaniel> yrs
[21:49:17] <Catie> s/stores/represents/
[21:49:20] <jackdaniel> yes*
[21:49:33] <mfiano> Ignoring all this, it is already a mistake to be comparing any floating point numbers for equality.
[21:49:41] <Catie> Okay, I'm seeing the disconnect now
[21:49:46] <mfiano> Without relative and/or absolute tolerances
[21:50:06] <jackdaniel> that's why you should always represent currency as ratios
[21:50:13] <Catie> mfiano: Oh I agree, it sucks as a problem
[21:51:06] <jackdaniel> and that's why floats are the biggest disaster in compiting since 1444anno domini
[21:51:15] <etimmons> NotThatRPG: How do you quit the process? If it's not explicit, maybe Github's infra is keeping stdin open or something like that.
[21:51:27] <jackdaniel> computing* (im on phone)
[21:51:29] *** Quits: tyson2 (~user@bras-base-toroon020aw-grc-19-184-148-172-174.dsl.bell.ca) (Remote host closed the connection)
[21:52:17] <Catie> Fixed-point numbers all the way
[21:52:20] <NotThatRPG> @etimmons: That's a good pointer. I should look and make sure that the tests have actually failed to complete as opposed to completing but somehow hanging before the process ends.
[21:52:42] <mfiano> Catie: Actually fixed-point numbers have different issues making them unsuitable for a lot of tasks
[21:53:08] <Catie> mfiano: please elaborate, I'm blissfully unaware of these downsides
[21:53:19] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:53:25] <mfiano> One minute, let me recollect from my notes
[21:53:39] <Catie> No worries! I really appreciate it
[21:54:10] *** Joins: X-Scale` (~ARM@31.22.202.101)
[21:56:06] *** X-Scale` is now known as X-Scale
[21:56:16] <Guest74> edify the rest of us please
[21:56:20] *** Quits: alvaro121_ (~akira121@201.230.126.66) (Ping timeout: 246 seconds)
[21:58:02] <mfiano> I regret sharing this, because I lost the citation I obtained the information from, but https://gist.github.com/mfiano/6d42aa7500e43df248a5f0a360509264
[21:58:03] <_death> if you want, you can compare (= 1.10000002384185791015625f0 1.10000002384185791015625d0) and get T since double-float subsumes single-float, numerically speaking
[21:59:28] <Bike> mfiano: i don't see how this doesn't apply to floating point as well?
[21:59:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:59:37] *** ChanServ sets mode: -o Bike
[21:59:56] <mfiano> Well that particular issue does
[22:00:25] <lisp123> Does anybody have a CLASS-EQUAL utility function (EQUALP on all slots) I can borrow? Want to check if my implementation is correct
[22:00:30] *** Joins: amb007 (~a_bakic@144.148.22.93.rev.sfr.net)
[22:01:09] <Nilby> the only non-integer number representation that isn't junk is functional generative, but humans haven't fully discovered the math yet
[22:01:24] <Guest74> ah, i misread that, thought people were talking about fixnum not fixed point.
[22:01:40] <Catie> No I was! I think I just have my terminology mixed up
[22:01:43] <Bike> yeah, i'm sure there are other rasons floating point is better, though i am not capable of articulating them
[22:02:32] <Guest74> raisins even.
[22:02:32] <_death> if you want decimals, you can use decimals (Intel has instructions for BCD.. not sure if anyone still uses them)
[22:02:35] <Catie> What's it called when, for example, you use the integer value "1000" to represent the real number "1.000"?
[22:03:53] <Bike> fixed point
[22:04:04] <Catie> Oh okay, I had it right
[22:04:05] <Bike> the decimal point is "fixed" three digits from the end
[22:04:14] <jcowan> 1.1 and 1.1d0 are the same in the sense of rationalize (assumes floats are as accurate as the format), different in the sense of rationalize (assumes floats are perfectly accurate).  Rationalize returns 11/10 for both values, but rational returns 9227469/8388608 and 2476979795053773/2251799813685248 respectively.
[22:04:19] <mfiano> _death: That lets you more accurately represent some numbers, but only 100 different fractional values compared to 256 with binary. I would say overall binary is more accurate
[22:04:40] <Bike> the "radix point", i suppose i should say
[22:04:49] <Guest74> isn't that different from fixed point if you're just using a fixnum shifted a few decimal places over.
[22:04:51] <mfiano> it indeed does accurately represent 1.3 easily though
[22:05:25] <Catie> And with bignum support, there's no real limit to the number of decimal digits you could choose to encode
[22:05:45] <_death> mfiano: different needs require different representations
[22:07:16] <mfiano> Yep
[22:07:37] <jcowan> One way to get a feel for how floats work is to look at the table at https://en.wikipedia.org/wiki/Minifloat#All_values_as_integers, which shows you one possible 8-bit IEEE float representation in which all values are integral.  It lets you represent integral numbers between -122880 and +122880 inclusive (plus infinities and NaNs) in just 8 bits at the expense of accuracy.
[22:07:37] <Nilby> cl:pi isn't π and 1/3 can't be printed except as 1/3 which is a generative notation
[22:08:10] <mfiano> fixed-point BCD is good when your fractional values are covered.
[22:09:06] <Catie> So really fixed point numbers will get you easily-understandable rounding and meaningful comparisons within a certain decimal precision, correct?
[22:09:18] <mfiano> 16-bit fixed bcd offers you 10k fractional values, 65536 with binary.
[22:10:05] <mfiano> the binary format cannot exactly represent some of the values that you can exactly represent in decimal form, the binary format does exactly represent better than six times as many values. For monetary values. once you round the result down to   cents (two digits to the right of the decimal point), you’re definitely going to get better results using the binary format.
[22:10:12] <mfiano> not that i recommend that :)
[22:10:42] <Guest74> just store money in cents not dollars.
[22:11:10] <Catie> Fixed point
[22:11:26] <jcowan> Except in times of hyperinflation
[22:11:35] <mfiano> financial software requires greater precision than cents, but yes, rationals or the smallest integral unit is best
[22:11:37] <_death> then when there are multiple currencies involved, you need to pick the least common denominator ;)
[22:11:59] <Catie> What precision does financial software require?
[22:12:09] *** Joins: roelj (~user@2001:1c02:b16:3700:3718:3a46:b1ae:ba54)
[22:12:13] <mfiano> typically 4 decimal places, as opposed to 2 with cents
[22:12:22] <Guest74> don't try and collect anything less than cents.  superman will come after you.
[22:12:51] <Catie> Huh. Still, that's far from insurmountable
[22:13:58] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:14:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:14:37] <_death> and then, when the value of currency drops considerably and new coins are introduced, you may need to change your stuff again
[22:14:54] <Catie> I'm still seething over the ERP system I had to work with that stored currency as a float, and used "round" and "truncate" interchangeably
[22:14:56] <_death> but maybe by then, you'd be unemployed and free from such issues
[22:15:01] <mfiano> There's also the scaled numeric format which scales fractional components to integer values, but of course you decrease the range of possible integer portion values
[22:15:30] <jcowan> Interest rates often are xx.99%, which given currency with cents requires 4 digits
[22:15:32] <Catie> Scaled numeric, yeah! That's what I was looking for, thank you
[22:16:07] <Catie> jcowan: Oh okay, that makes sense! I was wondering what the purpose for the extra decimal points was
[22:16:15] <Nilby> new money needs more fractional bits
[22:16:20] <jcowan> Of course, scaled bignums are also possible: the Python class Decimal works like that
[22:17:46] <mfiano> but basically, binary representation is nice if you don't know the values you'll be working with in advance
[22:18:01] <mfiano> if you do, there are several others to choose from!
[22:18:18] <jcowan> (From its introduction in 1927 to its abolition in 1946, the Hungarian pengő inflated about 10^29 times, losing half its value every 15 minutes on average.)
[22:19:00] <_death> the main issue with rationals etc. is that they are slow.. it's weird to me that CLIM uses rationals, which sometimes get out of hand
[22:19:28] <mfiano> there is another problem
[22:19:47] <Nilby> i'm kind of sad that CL doesn't have a defacto standard way to do big decimals or scaled outside of maxima
[22:19:56] <mfiano> you have the possibility to get enormous numerators or denominators, either overflowing or allocating bignums :)
[22:20:36] <jcowan> Hence the story of the student and the TA:  "My numerical program is much too slow!"  "Add a decimal point to any one number, and all will be well!"
[22:24:11] <_death> "My numerical programs gives incorrect results!" "Add a d0, and all will be well!"
[22:24:25] <Catie> For a given value of "all"
[22:25:10] <_death> or "l0" and use clisp's to extend precision until it's sufficiently correct
[22:25:21] <mfiano> reminds me i want to patch highlight-number.el...it detects eN but not fN/dN
[22:26:00] <Catie> Has anyone run into any major issues binding *read-default-float-format* to 'double-float? I've had that as my default for a while and occasionally run into issues compiling files, but that's not a big enough problem for me to switch back. Is there anything else I might want to be on the lookout for?
[22:26:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:26:40] <mfiano> If a developer assumes no suffix to be a single float, that's their problem
[22:27:03] <_death> Catie: it's often impractical, because a lot of code uses unadorned literal representations like "1.1", and also contains type declarations, assuming it's a single-float, and sometimes safety 0...
[22:27:43] <mfiano> It's unfortunate they don't adorn or wrap in with-standard-io-syntax
[22:28:00] <Catie> Ah! I can't say I love that, but it does make sense
[22:28:15] <_death> Catie: so the usefulness of *read-default-float-format* is limited only to cases where you can make good assumptions about the input to the reader
[22:28:32] <mfiano> I agree with that
[22:28:59] <_death> and I've joined the "part of the problem" crowd :).. I assume 1.1 is a single-float and don't bother with f0
[22:30:26] <mfiano> i forget, is s0 supposed to be short/half/16 for implementations that support that?
[22:30:31] <Catie> Shucks. I haven't been doing anything resource-intensive enough that it would make a difference, so I've been prioritizing accuracy. I guess I should be careful going forward
[22:30:39] <Nilby> the trouble might be when someone running your code falls through the floor where you didn't
[22:31:23] <Catie> Nilby: that makes sense as well, I didn't think of that
[22:32:47] <Nilby> e.g. clipping problems in games, 3d etc.
[22:33:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:34:15] *** NotThatRPG is now known as NotThatRPG_away
[22:35:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:38:28] <jcowan> mfiano: Short-float certainly could be 16 bits.
[22:39:41] <Guest74> I forget if it was in sbcl code or mailing list, but they were talking about doubles being able to be 8 bits.
[22:39:53] <mfiano> True. The only time I use them, I build them myself with ieee-floats for use with OpenGL half-float format
[22:40:02] *** Joins: alvaro121_ (~akira121@201.230.126.66)
[22:40:18] <Catie> Surprisingly, it looks like CLISP uses different precisions for all four float formats
[22:41:22] <Catie> Or maybe it only has three and the printer is messing with me again. But either way, three different float formats
[22:41:24] <mfiano> Catie: CLISP has infinite precision floats, which means by just binding a value, you can compute the nth pi digit...which makes me question the standard conformance since it is a "constant variable"
[22:41:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:42:14] <Catie> ECL also seems to have three distinct formats
[22:42:27] <_death> jcowan: short-float minimum is 18 bits
[22:42:35] <jcowan> ah
[22:42:40] <Bike> huh, really?
[22:42:43] <Catie> mfiano: That surprises me! Although I guess it shouldn't, it links with one of the FSF's math packages huh?
[22:42:46] <_death> clhs short-float
[22:42:46] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_short_.htm
[22:42:52] <Bike> so it is. i did not know that.
[22:42:59] <mfiano> Catie: I'm not sure about that one
[22:43:08] <_death> I think aeth complained about it in the past
[22:43:14] <Bike> clisp uses GMP for multi precision float, i think
[22:43:17] <Catie> I vaguely recall it being an option when I built it. I'll double-check!
[22:43:29] <mfiano> Oh gmp?
[22:43:33] <jcowan> float-precision is your friend for figuring out these things.
[22:43:34] <Bike> beats implementing all those numerical algorithms oneself
[22:43:36] <mfiano> SBCL has a contrib for that as well
[22:44:24] <_death> mfiano: clisp has an -ansi flag
[22:44:35] <mfiano> Oh huh
[22:45:23] <Catie> I was thinking of a different package, whoops
[22:46:01] *** Quits: Inline (~Inline@aftr-37-201-240-235.unity-media.net) (Ping timeout: 250 seconds)
[22:47:36] <_death> mfiano: hmm, though it doesn't affect the pi thing
[22:48:13] <mfiano> _death: Hmm, I always questioned if the pi thing is a conformance bug, but didn't know about the flag...now i'm thinking it is really a bug
[22:49:13] <_death> well, the fact that you need to use ext: feature for it means it may be a feature
[22:49:58] *** Quits: JeromeLon (~jerome@2a00:23c7:99b2:9501:6e53:a6f8:da20:c635) (Quit: WeeChat 3.0.1)
[22:52:07] <_death> Bike: actually, I think it's permissible to have 16-bit short floats
[22:52:45] <_death> Bike: since the clhs only speaks of "recommended" minima
[22:53:03] <Bike> oh ho.
[22:53:04] *** Quits: amb007 (~a_bakic@144.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:53:51] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:54:34] <jackdaniel> half-precision floating point is a thing
[22:55:30] <_death> usually in GPUs, no?
[22:56:01] <mfiano> Rarely used, but GL defines half-float types
[22:56:04] <jackdaniel> for sse too I think
[22:56:28] <jackdaniel> and gcc has such extension
[22:57:05] <mfiano> It is a widely known fact that double floats are a serious performance trap on the GPU. I wouldn't be surprised if half-float was too
[22:58:21] <_death> right, seems in 2012 they added some instructions for it
[22:58:35] <jackdaniel> either way it would be fun to have short-float as such pocket monster :)
[22:59:13] <jackdaniel> I've considered that at some point of time for ecl, but I've decided that this is a project without any meaning and I don't have time for it
[22:59:20] <jackdaniel> (short floats as 16bit, not ecl)
[23:01:27] <_death> if you don't utilize simd it, there's no real point I guess (storage is cheap)
[23:02:00] <Guest74> ecl has simd support doesn't it?
[23:02:55] <_death> Warning: Cannot disassemble the binary function #<compiled-function FILL 0x7fe0906889f0> because I do not have its source code.
[23:02:59] <_death> funny warning, that :)
[23:04:19] <Catie> I get that warning basically any time I try to disassemble under ECL
[23:04:57] <_death> disassemble shows C code there
[23:05:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:06:02] <_death> I tied disassembling (defun my-fill (x) (declare (type (simple-array single-float (*)) x)) (fill 0.0 x) x) though.. calls cl_fill
[23:06:51] <_death> arguments reversed, sigh
[23:06:56] <jcowan> Clisp has 17-bit short precision, LispWorks has 19-bit short precision
[23:07:37] <Guest74> huh, I didn't know about fill.
[23:09:22] <Guest74> thought it might be useful for clearing a raster but seems to only fill one element.
[23:10:01] <_death> what do you mean?
[23:10:40] <Guest74> filling a flat raster with a colour like #(#xFF 0 0 #xFF
[23:10:45] <Guest74> )
[23:10:57] <_death> do you represent each pixel as a vector?
[23:11:00] <jackdaniel> try (compile nil '(lambda () whoatever))
[23:11:10] <jackdaniel> s/compile/disassemble/
[23:11:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:11:41] <jackdaniel> it does have simd
[23:12:02] <Guest74> no, each pixel is n-channel amount of elements in the raster.
[23:13:19] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:14:28] <_death> jackdaniel: hmm, gives me that warning if I try to disassemble a function defined in "foo.lisp" after (load (compile-file "foo"))
[23:15:14] <Guest74> man clx errors are quite uninformative.  i really need to stop crashing it.
[23:15:46] <jackdaniel> _death: generally ecl can't disassemble functions compiled with C (but it can functions compiled with bytecmp)
[23:16:31] <_death> I see
[23:17:03] <jackdaniel> if you want to "disassemble" such function, you may need retain intermediate transpiled files (to see C file - compile-file has such arguments), or to disassemble .fas file with standard platform tools
[23:17:14] <jackdaniel> file.fas is a shared object (.so, .dll etc)
[23:18:39] <jackdaniel> if you want to see how a form would be compiled, just pass it to disassemble
[23:18:41] <jackdaniel> i.e (disassemble '(lambda () 42))
[23:23:15] <_death> right, ghidra works :)
[23:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:25:26] <_death> decompiler gives similar output https://plaster.tymoon.eu/view/2703#2703
[23:32:47] *** Joins: akoana (~ah@user/akoana)
[23:38:58] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[23:40:34] <|3b|> half floats can save a lot of bandwidth on GPU, for computation looks like it might be twice single float, or might be 1/64th depending on cards :/ graphics mainly cares about the bandwidth part since intermediate calculations tend to need the extra precision. neural nets like half floats (and even smaller floats) for computation though
[23:47:47] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 256 seconds)
[23:48:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:48:15] <|3b|> actually i guess mostly 2x performance for half floats, with only geforce10xx being 1/64?
[23:50:26] * |3b| wouldn't mind having 16-bit SHORT-FLOAT in CL, though most of the time i use them it is in foreign memory going to/from a GPU anyway
[23:54:13] <|3b|> though there is the question of whether one could trust the performance and numerical behavior of 16-bit floats if it isn't always mapping directly to CPU hardware.
