[00:00:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:00:26] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[00:02:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:03:03] *** Joins: morganw (~user@80.225.24.132)
[00:04:55] *** Joins: VincentV` (~user@212.97.1.64)
[00:06:02] *** Quits: VincentVega (~user@212.97.1.64) (Ping timeout: 240 seconds)
[00:08:48] <Shinmera> etimmons: regarding your blog post, the lack of a proper "community" is distressing to me as well, mostly because I maintain a *lot* of projects, many of which I just do not have the life-force to properly maintain anymore, and so far nobody has wanted to step up either. There's also many big projects that I have been almost wholly unable to find contributors for. Now, granted, these are
[00:08:50] <Shinmera> certainly very selfish reasons for being distressed, and I understand *why* there is no proper community -- there's few people spread all over the globe, all mostly doing things "for fun" and "in their way" because CL is very malleable. The piles upon piles of testing frameworks is, to me, a parallel to this. There keep being more made, either because people don't see the alternatives because
[00:08:52] <Shinmera> the ecosystem is too fragmented, or because they just want to do their own thing and don't want to bother contributing. Aside from just increasing the mass of people using CL, I don't know if there is a "fix" for this issue, and doing so brings its own problems that I personally am not very interested in solving. I'm happy, as many are, to just do my own thing for my part. I suppose that also
[00:08:55] <Shinmera> makes me part of the problem in a sense :)
[00:09:37] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:09:47] *** Quits: john__ (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de) (Remote host closed the connection)
[00:10:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:10:14] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[00:14:23] <phoe> (incf Shinmera)
[00:15:13] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:15:44] <yitzi> (incf Shinmera 10)
[00:15:49] <mfiano> (incf Shinmera)
[00:16:03] *** Joins: alvaro121_ (~aa@201.230.126.66)
[00:16:43] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[00:17:58] <EdLangley[m]> There’s always this hard question of whether to shave a yak or put up with the hairy yak
[00:18:27] <EdLangley[m]> I’ve generally been happy to use other people’s libraries that are good enough and contribute back as best I can.
[00:19:21] <EdLangley[m]> My personal annoyance is the number of different JSON libraries
[00:21:05] <phoe> this and the testing frameworks
[00:21:38] <morganw> Would someone be able to link me to the blog post? (sorry to appear and ask mid-conversation)
[00:21:39] <Shinmera> The testing framework thing is personally stinging me, because I tried to solve the issue by making something that should be malleable enough to easily make it fit whatever personal aesthetic preferences you may have
[00:21:51] <Shinmera> Unfortunately it seems I was almost entirely unsuccessful in the attempt. OH WELL.
[00:22:00] <Shinmera> morganw: https://www.timmons.dev/posts/cl-community-norms.html
[00:22:02] <phoe> to the point where Sabra needs to make blog posts that compares them all
[00:22:08] <semz> EdLangley[m]: guilty as charged on the JSON one
[00:22:14] <phoe> and, worst of all, *update* them
[00:22:14] <EdLangley[m]> I’ve started to use parachute
[00:22:20] <EdLangley[m]> I had been using 5am
[00:22:40] <EdLangley[m]> So, I’ve had bad experiences with Jonathan in particular
[00:22:47] <EdLangley[m]> It looks like it’ll be fine
[00:23:20] <EdLangley[m]> But, it has (or had) some (safety 0) stuff in its public interface that’ll give you a bad time
[00:23:32] * phoe grabs the flamethrower
[00:23:41] <Shinmera> Jonathan managed to crash my SBCL fully when I ran it for a test one time and I haven't tried it since :v
[00:23:53] <EdLangley[m]> (If you search the logs circa 2015 in the freenode channel, you’d fine details)
[00:23:59] <etimmons> Yeah, these are certainly hard issues, probably well above what any single person can tackle
[00:24:58] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[00:25:05] <phoe> well, if we ever *hypothetically* wanted to settle for a single test framework used everywhere, we'd piss off like 80% of project owners no matter which one we choose
[00:25:06] <etimmons> And I've done my share of making new projects instead of trying to modify existing ones as well.
[00:25:10] <phoe> same with JSON libraries
[00:25:15] <semz> The thing is that since many libraries are not all too complete, it's often much easier to just roll your own instead of first understanding the library and then fixing it up.
[00:25:17] <phoe> still, I think it's worth doing
[00:25:54] <phoe> semz: I actually root for jzon since it was designed with correctness from the very start, and it's one of the few libraries which have 100% test coverage for the JSON scenarios from the main test suite
[00:26:05] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:26:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:26:07] <phoe> but that's just my private bias
[00:26:27] <phoe> ;; this, and it has no (safety 0)
[00:26:29] <semz> see I didn't even know about that one before I made my own crappy one
[00:26:42] <semz> this one has (safety 0), that one doesn't handle errors properly, that one only parses objects and not literals
[00:27:14] <phoe> well, it's easy to roll your own in Lisp; the only real solution that's left is to make it infeasible to do so
[00:27:32] <EdLangley[m]> I’m a fan of yason because I’ve used it for years and have more or less figured it out
[00:27:57] <EdLangley[m]> And I like that it makes some of the “wrong” decisions but lets you adjust its behavior when it matters
[00:27:58] <Shinmera> I'm a fan of forgetting whichever it was I used last time and then getting confused and frustrated every single time
[00:28:04] <phoe> and the only way of achieving that that I know is to choose the best™ one(s) and promote it(them) in a somewhat aggressive way
[00:28:17] <phoe> and that pisses maintainers off
[00:28:22] <phoe> (understandably)
[00:28:27] <EdLangley[m]> I think turning false into nil, for example, is the right thing to do by default
[00:28:44] <EdLangley[m]> Because then (gethash “isFoo” parsed) is unsurprising
[00:29:14] <White_Flame> I decoded json arrays into cl lists, and false->nil is wrong in that scenario :)
[00:29:38] *** Joins: Oladon (~olad@98.43.81.226)
[00:29:38] <EdLangley[m]> I don’t mind the type pun
[00:29:58] <phoe> your encoder will, however, if NIL can be both false and []
[00:30:00] <EdLangley[m]> As long as there’s a way to adjust the behavior when you really care about it
[00:30:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[00:30:19] <EdLangley[m]> Sure, round-tripping is the exception here
[00:30:41] <_death> so what if there are a zillion libraries to do one thing in different ways.. some may see it as "inefficiency", others may see it as "diversity".. if you want to put effort into a single project, there's nothing stopping you.. the asdf problem is almost the opposite one.. a single implementation, where there should be a single specification and many implementations
[00:30:49] <phoe> and the worst thing is that [] is true in JS, which is at the same time acceptable, terrifying and off-topic here
[00:30:56] <EdLangley[m]> In a lot of cases you’re just trying to get the data into lisp and you don’t actually care too much
[00:31:11] <moon-child> phoe: so's #() in cl
[00:31:16] <EdLangley[m]> Because the are driven by the object key names not the types.
[00:31:23] <phoe> moon-child: that's the "acceptable" part
[00:31:28] *** Joins: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:31:33] <EdLangley[m]> *the semantics are driven
[00:31:35] *** Parts: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[00:31:43] <moon-child> I wanna know why it's terrifying though :P
[00:32:08] <phoe> _death: that's the opposite problems, yes - in Lisp it's hard to make very hard things (like system loaders) and trivial to make hard things (like JSON parsers)
[00:32:11] <_death> to me the etimmons was half weird (why drag this issue on and on? stassats already added maintainers who merged the patches) half worrying (the "let's break things" vibe)
[00:32:12] <EdLangley[m]> What’s terrifying in JavaScript is that 0 is falsy
[00:32:42] <phoe> hence people go for the easy and not the hard, and we have ten json libraries and one ASDF (I'm rooting for CPLM)
[00:32:58] <pjb> EdLangley[m]: 0 was false in LISP 1.5
[00:33:34] <semz> to be fair the thing with asdf is also that a lot of people rely on random internals
[00:33:52] <semz> (and that ever since v3 it's a mess tbh)
[00:34:05] <phoe> semz: random internals of what exactly?
[00:34:11] <phoe> I need a bit more context
[00:34:22] <semz> of asdf, or implicitly rely on uiop
[00:34:53] * semz tried to run old ASDFs for fun once
[00:34:56] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[00:35:27] <_death> actually we have more than one asdf.. there's the asdf that's bundled with sbcl and there's the asdf that continues to change.. personally I like the fact of the former one and don't care for the latter one, so my worrying about etimmons's breakage is a bit abstract
[00:35:46] <semz> my point being that even if you were to replace asdf, you'd end up reimplementing the existing one quite a bit
[00:36:00] <phoe> the main issue with the current CL world I see is that different people in it want two different things
[00:36:12] <phoe> long-term stability versus long-term progress
[00:36:13] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:36:20] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Quit: Leaving.)
[00:36:33] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:36:35] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:36:42] <EdLangley[m]> I want both
[00:36:42] <phoe> and you simply *can't* have both without effort that is impossible to maintain with the few hands that are here
[00:36:54] <yitzi> I fail to see how reducing the number of JSON or testing libraries would achieve either.
[00:36:54] <moon-child> the _language_ is not going to progress either way.  So as I see it, the people who want stability are not affected by the people who progress
[00:36:56] <phoe> hence we get thunderstorms and volcano eruptions
[00:37:08] <_death> I don't think it's an issue.. that's why "no single community" is a good thing.. everyone join the subcommunity (or not) that cares about the things they care about
[00:37:26] <phoe> hmm
[00:37:27] <EdLangley[m]> Yeah, I like CL because it’s the opposite of the JavaScript world I have to deal with professionally
[00:37:35] <phoe> maybe that's a good solution
[00:38:00] <White_Flame> "the JavaScript world" sounds like an underworld if programming was a fantasy setting
[00:38:05] <moon-child> tools, not communities
[00:38:26] <_death> because there aren't many people writing CL, sometimes it can seem lonely.. and survivorship bias results in people who don't mind
[00:38:50] <White_Flame> yeah, the size of the CL userbase is still under some critical mass point
[00:38:55] <White_Flame> IMO
[00:39:01] <moon-child> good
[00:39:12] <Shinmera> _death: What pains me is that I see it as wasted effort, at least if the project is published (if you just do it for yourself, whatever). Esp. for the testing frameworks, there's so many, and many of their differences are miniscule, that I can't help but think it would have been better to just improve an existing one instead.
[00:39:12] <moon-child> have you seen what happens to places on the internet that achieve scale?
[00:39:14] <White_Flame> but there is also the lisp curse side of things where stuff is quite easy to write yourself
[00:39:22] <White_Flame> s/quite/relatively/
[00:39:37] <Oladon> I coded JS for a long time... and stayed as far away from any kind of "JS world" as I could (which was pretty far).
[00:40:18] <Oladon> Consequently, I was able to enjoy JS as the functional-inspired Lisp derivative that it is. :)
[00:40:30] <EdLangley[m]> My professional life is continually fixing my app when a dependency breaks things
[00:40:47] <drakonis> Oladon: JS is actually not a lisp derivative
[00:40:59] <Shinmera> My professional life is continually fixing my app when I run into a bug I also wrote in the long line of shaven yaks.
[00:41:01] <drakonis> its a very impressive fabrication that has existed since its inception
[00:41:05] <_death> Shinmera: right, it may seem inefficient, especially if viewed as a collective.. but the people who wrote the test frameworks probably knew of the others and made the choice to write their own rather than fix and be dependent on others (why did you write parachute?)
[00:41:31] <phoe> _death: I don't believe that the only possible alternatives are the extremes of JS hellhole and the current CL situation
[00:41:53] <Shinmera> _death: I wrote parachute because I wanted to write one that could usurp them all. The specific goal was to write something that would be flexible enough to trivially extend to what people typically make a new one for (surface syntax changes)
[00:41:53] <drakonis> is scheme's approach not acceptable?
[00:42:23] <phoe> drakonis: scheme's approach, could you elaborate?
[00:42:41] <_death> phoe: but why do you think CL is at an extreme? there are still PRs going on.. it's just that many CL people are conservative and the language is stable so there's no pressure to break things fast
[00:42:47] <EdLangley[m]> I think the attitude “I want to replace all the alternatives” doesn’t reflect why the alternatives exist
[00:43:01] <EdLangley[m]> If I reimplement something it’s often because I want control
[00:43:03] <drakonis> CL has been frozen for ~28 years
[00:43:22] *** Joins: alvaro121_ (~aa@201.230.126.66)
[00:43:22] <aeth> not really
[00:43:25] <EdLangley[m]> Collaboration has a cost too
[00:43:29] <theothornhill> to me it looks a little like the CL world needs to open up to maintainers.  Surely there are many folks wanting to help.  But seeing issues at GH lingering for years with no answer does not inspire for someone to help/take over, I think
[00:43:31] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[00:43:35] <drakonis> scheme has reports every dozen years that serve to ratify a baseline of sorts and srfis for libraries
[00:43:40] <drakonis> aeth: please do correct me
[00:43:42] <_death> Shinmera: it's reminds me of that xkcd
[00:43:44] <aeth> drakonis: you can't write many meaningful CL applications without using de facto standards that are portably handled through libraries that deal with the differences
[00:43:47] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:837:598c:781a:3087)
[00:43:50] <drakonis> sure.
[00:43:54] <phoe> _death: xkcd standard, yes
[00:44:01] <drakonis> that i cannot deny.
[00:44:04] <aeth> FFI, threads, afaik sockets even
[00:44:06] <phoe> https://xkcd.com/927/
[00:44:14] <aeth> so you can't speak to the outside world without de facto extensions to the standard
[00:44:24] <aeth> other than through the POSIX shell, I guess
[00:44:39] <drakonis> but it is more of a commonly accepted way to do things
[00:44:51] <Shinmera> _death: Sure.
[00:45:09] <moon-child> aeth: you can write meaningful, portable _libraries_ though
[00:45:09] <Shinmera> _death: I'm just saying that was the goal, and it is not a goal I have seen other testing frameworks take, neither before I wrote it, nor now.
[00:45:17] <_death> Shinmera: anyway, personally I use parachute in my recent projects.. and the testing "frameworks" I wrote, I didn't publish.. so maybe I'm doing my part :)
[00:45:21] <drakonis> but it is not really "standardized"
[00:45:44] <drakonis> the portability matrix is basically "sbcl is the main implementation, everyone else barely exists"
[00:45:47] <aeth> drakonis: yeah, but the Scheme reports aren't ISO/ANSI/ECMA/etc. standards, either. Just non-authoritative PDFs. So an equivalent literally could just be someone specifying bordeaux-threads, CFFI, etc., in a PDF and "requiring" implementations to include that library instead of going through Quicklisp for them
[00:45:50] <Shinmera> _death: glad to hear :)
[00:45:57] <drakonis> sure
[00:46:18] <Shinmera> People have tried that kinda thing through CDR and other documents.
[00:46:29] <phoe> (multiple times)
[00:46:33] <phoe> and failed (multiple times)
[00:46:35] <drakonis> but that really shouldn't prevent a community local attempt
[00:46:46] <Shinmera> The problem is nobody really cares, so the only way to make it work is by literally doing all the legwork yourself
[00:46:46] <phoe> and there's still people longing for the CDR process (multiple people, multiple times)
[00:46:57] <drakonis> isnt it commonly held that spending millions on it is wasteful and therefore there shouldnt be sequels to ansi cl?
[00:47:04] <aeth> R7RS really is just a series of SRFIs, especially R7RS-large
[00:47:13] <moon-child> no interdependencies?
[00:47:23] <Shinmera> drakonis: The money isn't the issue. The issue is that most are complacent and there's no real problem to solve at the moment like there used to be.
[00:47:27] <etimmons> _death: I definitely don't want to "break things." I would love it if every library everyone wrote is always backward compatible. And yes, CL gives us tools to add new features while maintaining backward compatibility in most cases. But sometimes breakage is the best way forward. And I think that deserves to be acknowledged, especially when it's done right with a very long notification time.
[00:47:32] <drakonis> i see.
[00:47:34] <semz> "sbcl is the main implementation, everyone else barely exists" <- this has not been my experience
[00:47:51] <drakonis> apologies, let me reword it then
[00:47:53] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:35fe:b365:87c4:d3bd)
[00:48:02] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[00:48:05] <aeth> the only thing stopping someone from "R7RSing" the CL standard and coming up with an "authoritative" PDF is that the author wouldn't own the copyright on the spec to start building off of. So you can't just do CLHS+CDR like you can do R5RS+SRFI for R7RS
[00:48:35] <Shinmera> aeth: Nobody would care about it being authorative
[00:48:36] <drakonis> sbcl ends being the primary option
[00:48:38] <aeth> well, that, and you'd need the major implementations to take you seriously.
[00:48:49] <theothornhill> Shinmera: but if someone wants to contribute to/fix/remake hunchentoot or something else, I'd be surprised if they were allowed within two feet of the source code
[00:48:55] <Shinmera> And it's not like fragmentation in the scheme space isn't also a big problem lol
[00:49:01] <moon-child> aeth: draft spec is public domain.  And see wscl
[00:49:18] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:49:36] <aeth> Shinmera: in particular, many major Schemes seem perfectly fine with staying on R6RS instead of going to the more R5RSish R7RS
[00:49:43] <Shinmera> Does anybody even bother to write libraries that are portable in scheme?
[00:49:50] <drakonis> we have r7rs-large coming up next, so we'll see how that turns out
[00:49:54] <drakonis> Shinmera: it happens, sometimes.
[00:49:55] <aeth> Shinmera: http://snow-fort.org/pkg
[00:49:57] <Shinmera> In the same way people always hand-wring about portability in CL
[00:50:02] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[00:50:09] <moon-child> I saw one recently
[00:50:09] <aeth> snow-fort's nothing compared to any popular implementation, though
[00:50:11] <moon-child> most don't, though
[00:50:18] <drakonis> but no, the handwringing hardly happens
[00:50:24] <moon-child> they build up communities around specific implementations (chicken, gerbil, chez...)
[00:50:30] <Shinmera> Right. Anyway.
[00:50:31] <drakonis> because the implementations are all very divergent
[00:50:50] <drakonis> except where you use srfis and rnrs
[00:50:54] <Shinmera> I gotta be off to do some late-night gamedev.
[00:50:59] <aeth> drakonis: importantly, they're divergent in a way that makes it hard to rectify, in how they do libraries
[00:51:01] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[00:51:14] <drakonis> there are srfis that get extracted off the various scheme dialects
[00:51:36] <aeth> CL has DEFPACKAGE, ASDF, and Quicklisp to work off of at various levels of abstraction, as well as a culture that encourages you to do it this way
[00:52:13] <etimmons> theothornhill: I agree about opening up to maintainers. (Sorry, I had to step out for a moment and am working through the scrollback)
[00:52:17] <aeth> drakonis: and, yeah, it looks like a huge chunk of snow-fort is just (chibi something), which just means that chibi was written in a portable enough way that someone could extract it as an R7RS package
[00:52:22] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:52:29] <_death> aeth: right, same about bordeaux-threads and cffi
[00:52:38] *** Joins: xsperry (~xs@user/xsperry)
[00:52:50] <drakonis> that's correct and i'd like to point out that most of r7rs-small/large is chibi
[00:52:57] <drakonis> most of the reference implementations
[00:52:59] <drakonis> that and gambit
[00:53:00] <theothornhill> etimmons: Yeah, it just seems so futile trying to make an attempt, IMO.  At least for less experienced people
[00:53:03] <_death> aeth: all these are not perfect, but are common denominators
[00:53:05] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:53:13] <Shinmera> Clearly this frantic discussion is going to lead to a revolution in the Lisp community and encourage hundreds to start contributing and helping out with existing efforts :)
[00:53:16] <aeth> the only thing where there's no common denominator is sb-unicode
[00:53:24] <drakonis> ha
[00:53:25] <aeth> afaik, there's no equivalent to sb-unicode elsewhere
[00:53:32] <drakonis> i wish that'd ever happen
[00:53:53] <drakonis> there's lots of sharp edges in lisp that folks have become complacent
[00:53:56] *** Joins: djuber (~user@65.79.128.64)
[00:53:57] <moon-child> I think somebody did a portable unicode thing, but it is out of date and bad
[00:54:06] <drakonis> since it is so easy to paper over them
[00:54:18] <Catie> thothornhill and etimmons: I can't speak for anyone else, but this very much resonates with me. The idea of maintaining an existing project is very intimidating as someone who is new to Common Lisp
[00:54:32] <Catie> theothornhill: ^ (and I apologize for misspelling your name)
[00:54:38] <drakonis> i find it difficult to get started with cl in 2022 because of those sharp edges
[00:54:47] <theothornhill> Catie: No worries, I do it all the time
[00:54:49] <drakonis> even if you were to read all of the material, its still there.
[00:54:55] <semz> what edges are these?
[00:55:02] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[00:55:21] <drakonis> the usual when coming off from scheme
[00:55:29] <drakonis> and the kind of things that get excised in later lisps
[00:55:40] <drakonis> T and NIL, '() evaluating to nil
[00:55:52] <semz> eh
[00:55:53] <drakonis> defun/defvar/defparameter
[00:56:00] <Shinmera> That ain't no edge, that's a smoooth pillow!
[00:56:05] <EdLangley[m]> the things I like about CL?
[00:56:17] <drakonis> i mean, i can get #t and #f with schemes :V
[00:56:24] <drakonis> its confusing for newcomers
[00:56:25] <phoe> defclass/define-condition/deftype/defmacro/define-symbol-macro/define-compiler-macro too!
[00:56:30] <moon-child> drakonis: if you care about #f and #t, then use scheme
[00:56:45] <aeth> to me, what seems bad in CL is inconsistent APIs e.g. (nth index list) or (gethash key table) VS (elt sequence index) or (aref array &rest indices) ; etc
[00:56:50] <drakonis> ^
[00:56:51] <theothornhill> Catie: Yeah, this was one of the things I really liked about starting contributing to emacs.  There was always someone responding to my stupid emails when I first started out.  To me (from reading lots of cl issues) it seems like newbies often gets either pushed away, or ignored
[00:56:54] <aeth> stuff that can't really be avoided for basckwards compatibility...
[00:57:00] <phoe> (incf aeth)
[00:57:01] <Shinmera> drakonis: Your mistake was thinking they're the same
[00:57:12] <etimmons> Catie: theothornhill: an example: I was shying away from Dexador for quite a while. But now that fukamachi has added at least one more maintainer that seems motivated, I'm more likely to keep using it.
[00:57:13] <Shinmera> can't really call that "edges"
[00:57:15] <phoe> (incf theothornhill)
[00:57:25] <semz> now where is that post about how lisp dialects don't meaningfully exist
[00:57:39] <Catie> etimmons: Shying away from using it?
[00:57:39] <drakonis> they're really not, no.
[00:57:45] <moon-child> semz: lisp by the pound?
[00:57:50] <semz> yes that is the one
[00:58:06] <drakonis> i know that all three do different things :V
[00:58:07] <semz> I should keep proper track of the things I read
[00:58:39] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[00:58:59] <etimmons> Catie: Yes. It had well known bugs that I didn't have time to fix and prior experience showed that even if I did, the PR would languish for a while
[00:59:09] *** Joins: alvaro121 (~aa@201.230.126.66)
[00:59:21] * theothornhill thinks phoe deserves a shoutout for helping noobs
[00:59:25] <drakonis> aeth: that's indeed the problem
[00:59:45] <semz> I don't think these minor annoyances really have any effect. Look at the inconsistencies in stuff like Python or JS that people put up with. Or hell, PHP.
[00:59:47] * semz shudders
[01:00:00] <EdLangley[m]> Fukamachi used to be a lot more active
[01:00:23] <etimmons> Catie: But it now seems there's someone else with commit bits that is more active. Even if things don't get merged ASAP, having some activity or acknowledgement of issues keeps despair from setting in
[01:00:27] <aeth> semz: well, Python has its own problem in that it took its language's landmines, broke compatibility, and set the language adoption back a decade as the community fragmented in two
[01:00:34] *** Quits: wacki (~wacki@87.123.132.123) (Quit: Leaving.)
[01:00:34] <aeth> semz: So it does kind of show you that you can't really fix some things
[01:00:50] <semz> that kind of proves my point though doesn't it
[01:00:50] <drakonis> python recovered, in a way.
[01:00:53] <theothornhill> etimmons: Yeah, I can understand that problem, especially because forking most likely is not the solution
[01:00:55] <aeth> you just have to get it right at the start or live with it
[01:01:03] <Catie> etimmons: Very much understandable, I agree. It can be disheartening to depend on a project that may have long-standing bugs
[01:01:04] <etimmons> EdLangley[m]: Yeah, I don't mean any dig against him and I do know he/his family has some health issues.
[01:01:11] <phoe> theothornhill: *bows*
[01:01:20] <drakonis> Shinmera: everyone makes mistakes :V
[01:01:27] <etimmons> That's why I'm heartened by the fact he acknowledged that and added more people to help him out
[01:01:27] <EdLangley[m]> Yeah, I’m only saying that he used to review and accept pull requests relatively quickly
[01:01:36] <EdLangley[m]> I also think he switched jobs or something
[01:02:05] <EdLangley[m]> I’m still using drakma
[01:02:06] <aeth> drakonis: Machine learning saved Python from Python 3. Nothing came along to save Perl from the even more ambitious Perl 6 attempt. It does suggest that breaking compatibility can't really be done, though.
[01:02:07] <Shinmera> drakonis: Sure enough. I am making one right now!
[01:02:18] <_death> I don't mind my PRs languishing in other projects so much, because I just use my own fork.. if I submit a patch to a project and I get no reply, I just avoid submitting more patches, but I continue to patch my own fork
[01:02:23] <drakonis> ha, which one are you making :V
[01:02:34] <Shinmera> drakonis: making games for a living
[01:02:43] <drakonis> ah i concur there :V
[01:02:51] <EdLangley[m]> _death: did your CFFI PR ever get merged?
[01:03:02] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[01:03:04] <EdLangley[m]> The one necessary to make tree sitter usable?
[01:03:09] <drakonis> aeth: not ML alone but the scientific library stack has saved it.
[01:03:21] <drakonis> julia might kill off python in time however
[01:03:36] <EdLangley[m]> I’d like to see Julia beat Python
[01:03:47] <EdLangley[m]> Especially since it has multimethods
[01:03:58] <drakonis> julia is very interesting.
[01:04:25] <_death> EdLangley[m]: no.. the reason I submitted those in the first place was because I was asked.. but I don't mind that they weren't merged (though the other user of tree-sitter may feel differently?), and maybe there are better solutions to those problems in the future anyway
[01:04:46] <_death> EdLangley[m]: one of them breaks backwards compatibility, so indeed I hope there's a better solution
[01:05:24] <EdLangley[m]> I’ve been experimenting with tree-sitter to do some analysis of JS
[01:06:19] <EdLangley[m]> And I was happy to find your version of an API wrapper because I was running into some edge cases of passing structs around by value
[01:06:38] <seragold[m]> <aeth> "semz: well, Python has its own..." <- not so true today. everyone moved to python3 finally.  Not that that is altogether good.
[01:06:49] *** Joins: alvaro121_ (~aa@201.230.126.66)
[01:07:02] <drakonis> aeth: as far as i'm concerned, python has bigger problems than the move from 2 to 3
[01:07:39] <moon-child> jpm still has 30m lines of python code, and will continue to maintain the python2 interpreter because _it_ is only 3m lines of code
[01:07:52] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[01:08:26] <lagash> moon-child: jpm?
[01:08:31] <moon-child> jp morgan
[01:08:32] <EdLangley[m]> So, my experience with Python 2->3 is the other reason I’m anti-breaking changes
[01:08:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:09:25] <lagash> moon-child: you mean JP Flathead? :)
[01:09:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:10:00] <_death> EdLangley[m]: cool :).. I don't use tree-sitter nowadays (I wrote it one weekend when I discussed some source code transformation on another irc channel) but I think sel still makes good use of it
[01:10:39] <EdLangley[m]> It’s easier than attempting to maintain an ES6 or typescript parse
[01:10:39] <seragold[m]> much of the day job is in python. would give a lot if it would stop trying to kill lambda and would have every bloody function return something reasonable.  and if they would make the python3 special collection wrappers work as the actual collections they replaced
[01:10:48] <EdLangley[m]> Plus, GitHub is maintaining it.
[01:13:23] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[01:13:31] <lagash> seragold[m]: out of curiosity, have you tried Hylang yet?
[01:14:19] <drakonis> see also hissp
[01:14:21] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:14:24] <seragold[m]> looked at it but its almost but not quite nature made me a bit uneasy. that and the rest of the day job team would likely string me up
[01:15:58] <_death> hmm, it appears some common-lisp.net mailing lists vanished :/
[01:17:01] <_death> ok, just their urls changed.. apparently they didn't bother with a redirect
[01:17:29] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6cda:3370:1807:80a0)
[01:18:39] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:f559:3ba5:9a71:470a)
[01:18:42] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[01:18:46] <_death> looked one up because I remembered a post that made my chuckle.. https://mailman.common-lisp.net/pipermail/cello-devel/2008-November/000191.html
[01:21:27] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:22:21] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6cda:3370:1807:80a0) (Ping timeout: 250 seconds)
[01:23:04] <lagash> seragold[m]: I mean, considering it's still unstable, yeah
[01:25:32] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[01:25:43] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:27:21] <Josh_2> Teaching a fella with 0 programming experience Common Lisp using GICL
[01:27:21] <Josh_2>  
[01:27:37] <phoe> GICL?
[01:27:50] <Josh_2> GISC*
[01:27:55] <Josh_2> gentle introduction
[01:28:08] <phoe> ooh, Gentle
[01:28:08] <phoe> yes
[01:31:14] *** Joins: erjag (~user@ti0040a400-5479.bb.online.no)
[01:39:57] *** Joins: xsperry (~xs@user/xsperry)
[01:40:32] *** Quits: erjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[01:44:35] *** Quits: dre (~dre@2001:8003:c932:c301:1533:19c3:8abd:b2d5) (Quit: Leaving)
[01:54:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:56:29] <dbotton> That is what I am using to teach my kids programming
[01:56:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:59:38] <seragold[m]> One of my first CS classes was a Survey of Programming Languages and they took us to Symbolics when they were still operational for a few glorious days.  Left me rather disgruntled with the state of much of the software world ever since due to the early exposure.
[02:03:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:09:05] <lagash> Jealous!
[02:13:58] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:f559:3ba5:9a71:470a) (Read error: Network is unreachable)
[02:14:37] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:837:598c:781a:3087) (Ping timeout: 240 seconds)
[02:14:41] <seragold[m]> They even had C and Fortran running as a layer on top of Lisp!  So you had all their Lisp environment to use even working in those languages.
[02:15:50] <seragold[m]> On Lisp alludes to this "mere skin on top of Lisp" approach but was first time I saw it done.
[02:16:01] *** Joins: Everything (~Everythin@46-133-77-215.mobile.vf-ua.net)
[02:16:31] <White_Flame> technically, I don't think they converted C and Fortran to Lisp, but compiled down to its CPU code.  I could be wrong, though
[02:16:46] <EdLangley[m]> Mezzano has something like this
[02:17:09] <EdLangley[m]> Using iota, they managed to compile doom to some sort of lisp and run it on mezzano
[02:17:24] <EdLangley[m]> https://github.com/froggey/Iota
[02:18:01] <seragold[m]> I remember once upon a time there was a C or was it Objective-C interpreter that could dynamically load and reload object files.  IIRC Micro$loth bough them and the tech was never seen again.
[02:18:15] <dbotton> The C "compiler" is still available
[02:18:24] <White_Flame> yeah I'm sure that Mezzano has low-level operations exposed to lisp sexprs for C style stuff
[02:18:38] <seragold[m]> really? cool! where?
[02:18:55] <dbotton> I don't have link handy, but it is on github
[02:19:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:19:28] <dbotton> I plan on using it in future to encourage people to use CLOG with C, Python etc running on top if CL
[02:19:40] <EdLangley[m]> https://www.cliki.net/zeta-c
[02:19:49] <EdLangley[m]> This is the Symbolics one
[02:20:01] <EdLangley[m]> The issue is that it breaks some assumptions, iirc
[02:20:13] <White_Flame> ooh, neat.  though it's in the ti explorer tree for some reason?  I guess that's why I never noticed it there on bitsavers
[02:20:23] <EdLangley[m]> Like “sizeof(long) == sizeof(char)”
[02:20:38] <EdLangley[m]> Because sizeof always returns 1
[02:20:40] <EdLangley[m]> Iirc
[02:20:41] <dbotton> https://github.com/vsedach/Vacietis
[02:20:44] <seragold[m]> one of these days I should play with Clasp when it comes to bringing Lisp and llvm/clang worlds together. https://github.com/clasp-developers/clasp
[02:21:20] <EdLangley[m]> Iota translates llvm bitcode to CL, so you should be able to use any LLVM language with lisp
[02:21:27] <EdLangley[m]> Unfortunately, it’s not entirely complete
[02:21:40] <EdLangley[m]> But it works well enough
[02:21:58] <Shinmera> Iota works in the same way Emscripten/etc work -- you compile instructions to operate on some sort of byte array, and then plug whatever extra ops you need to flush the relevant memory areas to screen and plug in other i/o bytes.
[02:22:05] <EdLangley[m]> Yeah
[02:22:24] *** Joins: Common-Lisp (~eric@107-128-158-46.lightspeed.bcvloh.sbcglobal.net)
[02:22:26] <dbotton> Vacietis works by loading C code into a Common Lisp runtime as though it were Lisp code"
[02:22:31] <EdLangley[m]> The advantage being that since the target is inside Lisp, it can’t crash your lisp process or cause memory faults
[02:22:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:22:45] <EdLangley[m]> (Unless its runtime is bad)
[02:22:56] <phoe> dbotton: also see https://github.com/y2q-actionman/with-c-syntax as a half-joke attempt
[02:23:14] <seragold[m]> EdLangley[m]: It may have made since with Symbolic early support international character sets.  :)
[02:23:37] <phoe> it's half-joke until you scroll the readme down to the Duff's device - then you realize that it's half-joke half-terrifying
[02:23:50] <dbotton> There is also a similar tools for Basic
[02:24:13] <moon-child> bah.  The hard part of implementing c is aliasing
[02:24:26] <moon-child> and afaik zeta cheated with implementation-specific exts
[02:25:17] <White_Flame> it could technically all be done, just the "pointers" would get big and there'd be a ton of runtime tests to figure out what the heck is being pointed at
[02:25:29] <White_Flame> without going to a full byte array heap like webasm does
[02:26:42] <EdLangley[m]> I think vacietis is designed to exploit a bunch of UB that people assume isn’t UB
[02:27:01] <moon-child> White_Flame: yes.  Hence 'hard', not 'impossible'
[02:27:38] <dbotton> For my purposes it vacietis works, I want people to try out using CL even if they are using C to do it (or python), eventually people always want to dig more and will try the real thing
[02:28:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:28:24] <seragold[m]> s/It may have made since with Symbolic early support international character sets.  :)/It may have made sense with Symbolic early support of international character sets.  :)/
[02:28:29] <moon-child> White_Flame: NB. bytearray has its own problems.  How do you do function pointers?
[02:28:31] <EdLangley[m]> I started writing a wasm interpreter
[02:28:50] <EdLangley[m]> moon-child: offset into array?
[02:28:59] <EdLangley[m]> Nvm
[02:29:00] <White_Flame> moon-child: yeah, at least in webasm, a function pointer's value is an index into an out-of-scope array that only the runtime has access to
[02:29:08] <seragold[m]> I gave up because I tried to get into it with Rust which I found way too frustrating.
[02:29:10] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:35fe:b365:87c4:d3bd) (Remote host closed the connection)
[02:32:20] <moon-child> White_Flame: I see
[02:34:59] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 256 seconds)
[02:36:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:38:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:43:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[02:44:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:45:26] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[02:45:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:52:34] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:04:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:14:01] *** Joins: alvaro121_ (~aa@201.230.126.66)
[03:16:31] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[03:20:02] *** Quits: Common-Lisp (~eric@107-128-158-46.lightspeed.bcvloh.sbcglobal.net) (Ping timeout: 240 seconds)
[03:20:02] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[03:21:11] *** Joins: alvaro121 (~aa@201.230.126.66)
[03:23:23] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[03:25:40] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[03:26:38] *** Joins: gaqwas (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de)
[03:26:49] *** Joins: alvaro121 (~aa@201.230.126.66)
[03:26:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:29:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:30:35] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[03:33:43] *** Joins: Common-Lisp (~eric@2600:1700:94cc:c0::44)
[03:35:07] <rotateq> hey Common-Lisp :)
[03:37:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:37:45] <Josh_2> Got quite far with my new apprentice into GISC
[03:37:50] <Josh_2> 3 chapters or something
[03:38:05] <rotateq> Josh_2: what is GISC?
[03:38:17] <Josh_2> Gentle introduction to symbolic computation
[03:38:40] <Josh_2> best beginner programmer book ;)
[03:38:43] <rotateq> ahhh
[03:38:49] *** Quits: pve (~pve@87-93-187-85.bb.dnainternet.fi) (Quit: leaving)
[03:38:54] <rotateq> one of the good ones imo :)
[03:39:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:40:59] <Common-Lisp> rotateq, hello!
[03:41:52] <rotateq> hello Common-Lisp! i was curious about your nick :)
[03:42:10] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:42:23] <phoe> the legendary ANSI CL, personified
[03:42:28] <phoe> marvelous!
[03:42:48] <Common-Lisp> rotateq: It is I, Common Lisp
[03:43:23] <rotateq> hehe, so now I expect you being one of the heavy experts here ^^
[03:43:37] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[03:43:52] <rotateq> oh phoe, still awake too :) i needed i bit of a break
[03:43:58] <rotateq> *a bit
[03:44:05] * phoe actually crashes asleep now, so, see everyone tomorrow
[03:44:22] *** Joins: biog (~user1@159.224.42.85)
[03:44:43] <rotateq> oki be careful in your dreams not to be caught by the rusty crabs
[03:44:44] *** Joins: eric_ (~eric@2600:1700:94cc:cf:cec6:abc9:37c0:8449)
[03:46:57] *** Quits: Common-Lisp (~eric@2600:1700:94cc:c0::44) (Ping timeout: 240 seconds)
[03:48:12] *** Quits: gaqwas (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de) (Ping timeout: 250 seconds)
[03:48:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[03:49:51] *** eric_ is now known as Common-Lisp
[03:50:21] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 256 seconds)
[03:53:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:56:56] *** Quits: Common-Lisp (~eric@2600:1700:94cc:cf:cec6:abc9:37c0:8449) (Remote host closed the connection)
[03:58:25] *** Joins: dre (~dre@2001:8004:44f0:eb2:b102:9bd6:452b:3d18)
[04:00:52] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:02:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:03:48] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:03:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:05:24] *** Joins: les_ (~whome@user/les)
[04:05:32] *** Quits: les (znc@user/les) (Ping timeout: 268 seconds)
[04:05:32] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:05:39] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (Remote host closed the connection)
[04:05:40] <rotateq> hm if companies search for people which translate COBOL to Java it would make more sense using ABCL ^^
[04:06:09] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Ping timeout: 268 seconds)
[04:06:10] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 268 seconds)
[04:06:23] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[04:06:46] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 268 seconds)
[04:06:47] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 268 seconds)
[04:07:08] *** Joins: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449)
[04:07:37] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:07:46] <rotateq> or for writing a clever meta-compiler
[04:07:57] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[04:08:23] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[04:08:24] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[04:09:07] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[04:14:57] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:15:46] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[04:15:49] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[04:16:13] *** Quits: dre (~dre@2001:8004:44f0:eb2:b102:9bd6:452b:3d18) (Read error: Connection reset by peer)
[04:17:51] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[04:21:30] *** Joins: sepanko (~sepanko@user/sepanko)
[04:22:58] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[04:26:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:28:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:38:02] *** Quits: VincentV` (~user@212.97.1.64) (Ping timeout: 250 seconds)
[04:41:56] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[04:46:59] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Quit: Gone.)
[04:47:28] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:48:17] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[04:54:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:55:49] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[04:55:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:56:10] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[05:05:40] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[05:08:11] <fe[nl]ix> etimmons: very nice blog post
[05:14:26] *** cross_ is now known as cross
[05:15:42] <Josh_2> Wheres this poast?
[05:19:17] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:21:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[05:23:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:25:35] <Josh_2> This'n https://www.timmons.dev/posts/cl-community-norms.html ?
[05:38:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[05:39:16] <EdLangley[m]> Yeah
[05:40:35] <drakonis> it sparked a hot convo
[05:40:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:48:40] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:57:44] <Josh_2> Those dont normally go well
[05:58:50] <drakonis> especially the ones that talk about the sacred cows
[06:01:06] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:02:27] *** Joins: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net)
[06:04:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:05:05] *** Joins: s-liao43 (~s-liao@101.86.96.21)
[06:05:34] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Ping timeout: 250 seconds)
[06:05:34] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Ping timeout: 250 seconds)
[06:05:56] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net)
[06:05:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:06:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:12:34] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[06:14:15] <Common-Lisp> good write-up, interesting stuff
[06:14:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:14:23] <Common-Lisp> I'm not sure how actionable their suggestions are, though
[06:16:32] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:25:04] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:41:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:43:27] *** Quits: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233) (Quit: Leaving)
[06:45:04] *** Quits: Everything (~Everythin@46-133-77-215.mobile.vf-ua.net) (Quit: leaving)
[06:56:26] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[07:00:28] <fitzsim> I read the blog post; good suggestion to put projects on gitlab.common-lisp.net
[07:00:52] <fitzsim> I'm trying to create a project there but I get "The form contains the following error: Namespace is not valid"
[07:23:53] <fitzsim> it seems like I'm an "external" user for some reason; I'll stick to sr.ht for now, I guess
[07:24:09] <fitzsim> (for cl-starter-script)
[07:24:51] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:a9:59ba:3231:6160)
[07:27:46] *** Quits: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449) (Quit: Leaving)
[07:28:07] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 256 seconds)
[07:30:21] <beach> Good morning everyone!
[07:30:25] <Josh_2> Hey
[07:30:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:32:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:33:25] <sveit_> hi. i am trying to use both local and global inlined functions to replace macros, and was wondering if for this purpose flet or let-assigned functions are generally friendlier to the compiler (specifically SBCL)? In certain cases that I haven't been able to predict it seems the functions are not reliably inlined when using flet
[07:34:41] <sm2n> sveit_: if you need reliable inlining, isn't (declare (inline)) what you want?
[07:35:48] <beach> sveit_: How did you determine that the function wasn't inlined?  Did you read the disassembly?
[07:36:30] <beach> sveit_: And why do you absolutely want functions to be inlined?  Don't you trust the compiler to make this call?
[07:37:01] <sveit_> yes, i read the disassembly
[07:37:45] <moon-child> well, I would not trust the compiler.  But I would also not make such decisions without benchmarking
[07:38:27] <sveit_> i am doing this in some performance-sensitive code that needs to increment certain counters, so i have functions floating around like (let ((counter 0)) (flet ((incf-counter (step) (incf counter-var step))) (declare (inline incf-counter))...)) where #'incf-counter is passed to other (also inlined) functions taht only funcall it
[07:39:52] <sveit_> i /was/ doing this with macros that wrote the inner functions that would increment inner-counter, but it is much cleaner to pass such functions around. it seems that, somewhat unpredictably to me, some of the outer flets are not properly inlined
[07:40:34] <sveit_> on the other hand sometimes such things /are/ inlined, and i haven't been able to understand the pattern
[07:41:44] <EdLangley[m]> clhs inline
[07:41:44] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/d_inline.htm
[07:41:59] <EdLangley[m]> It's explicitly not required, so it's probably better to use macros here
[07:42:20] <EdLangley[m]> If it's important to ensure that the code is actually inlined.
[07:42:56] <moon-child> sveit_: sounds like you want COMPILER-MACROLET...too bad it doesn't exist!
[07:43:21] <sveit_> EdLangley[m]: i'm aware, but SBCL is intelligent enough that it would be great to trade some code clarity for trusting the compiler to do some magic :)
[07:43:30] <EdLangley[m]> Compiler macros are optional too, iirc
[07:44:18] <moon-child> sure, but if you are optimizing, you are already trusting to the performance characteristics of a given implementation or a few given implementations; so you can count on whatever behaviour they exhibit wrt compiler macros
[07:44:31] <moon-child> and, whereas inlining is a black art, compiler-macro expansion is a relatively simple matter
[07:57:25] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:01:15] <sm2n> Are there implementations worth doing performance engineering on today that don't respect (declare (inline))?
[08:02:28] <aeth> (declaim (inline foo)) unless a FLET or something
[08:02:32] *** Quits: s-liao43 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:03:19] <aeth> modern optimizing compilers (not SBCL, and not Common Lisp in general) tend to ignore this sort of thing these days because they think they know better than you
[08:03:23] <aeth> afaik
[08:03:55] <sm2n> I mean in CL
[08:04:08] <sm2n> I know C compilers ignore inline pragmas for instance
[08:05:44] <moon-child> gcc has __attribute__((always_inline)) and will actually respect it
[08:05:45] <moon-child> ffwiw
[08:05:48] <moon-child> s/f//
[08:06:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:14:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:19:09] *** Joins: dre (~dre@2001:8003:c932:c301:3dc2:f775:99d4:76ef)
[08:23:50] *** Joins: semz_ (~semz@2001:9e8:4bcb:8800:47c6:3f3c:2a4f:eb0c)
[08:23:50] *** Quits: semz_ (~semz@2001:9e8:4bcb:8800:47c6:3f3c:2a4f:eb0c) (Changing host)
[08:23:50] *** Joins: semz_ (~semz@user/semz)
[08:24:44] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:26:24] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:28:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:29:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:36:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[08:38:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:45:45] <White_Flame> sveit_: if you pass around #'incf-counter, then it becomes a closure, and closures aren't inlinable
[08:52:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:57:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:58:50] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[09:07:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[09:09:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:11:28] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 250 seconds)
[09:17:17] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[09:22:43] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[09:31:33] <beach> fe[nl]ix: I must have completely missed the fact that you seem interested in having an IDE for Common Lisp.  Are you aware of the bits and pieces being worked on by scymtym and (somewhat) myself?
[09:32:10] <beach> Maybe I need to get more organized about reading blog posts.
[09:35:22] <sveit_> are there "extra" registers in SBCL assembly? I am seeing things like writes to "NL1", which I am not familiar with and can't seem to find on google
[09:37:18] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[09:38:04] <White_Flame> can you paste it?
[09:41:34] <sveit_> sure, disassembly under SBCL HEAD for (defun my-incf (input) (declare (type fixnum input)) (+ input 7)):
[09:42:02] <sveit_> https://plaster.tymoon.eu/view/2877#2877
[09:44:58] <moon-child> what architecture are you on?
[09:45:48] <sveit_> arm (the m1 mac)
[09:46:44] <moon-child> I see
[09:46:53] <moon-child> objdump does not seem able to disassemble that instruction
[09:48:02] <moon-child> hmm, it is unable to disassemble one of them
[09:48:24] <moon-child> cmp r0, nl1  is disassembled as   cmp x10, x1  by objdump
[09:49:26] <sveit_> moon-child: not directly relevant but i'd be interested to learn how you are doing this (I assume you're copying the opcodes into some kind of file and running it through objdump?)
[09:49:30] <White_Flame> so just register aliases?
[09:49:52] <moon-child> sveit_: I used gas's .word directive
[09:50:14] <moon-child> on x86 I have more fine-grained tools, but I haven't spent much time with arm yet
[09:51:55] <moon-child> White_Flame: well, objdump knows nothing of the instruction that sbcl identifies as  stp nl1, nl0, [tmp].  So I assume something fucky is going on
[09:52:16] *** Joins: nwoob (~apple@103.135.38.247)
[09:53:14] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[09:53:40] <nwoob> I'm learning CL from David S. Touretzky book. Since I am familiar with Javascript, I am thinking to write programs mentioned in book in both JS and CL for learning.
[09:53:48] <nwoob> Is this good approach?
[09:55:12] <sveit_> i also wonder what is being computed by [THREAD, #40], but I at least have some rough idea of what is going on there
[09:55:40] <moon-child> iirc it just pegs a register as a tls pointer
[09:55:42] <White_Flame> byte offset 40 into the thread local space
[09:55:43] <moon-child> x30 maybe
[09:56:31] <moon-child> x21 looks like
[09:58:21] *** Joins: neocron (~NeoCron@p200300c4cf1b4400f695d81d4d068b5c.dip0.t-ipconnect.de)
[09:58:24] <sveit_> is there a way to just directly take the raw opcodes and disassemble them in some other tool (i am not that experienced with writing assembly)
[09:59:23] <White_Flame> there are some web-based ones
[09:59:27] <White_Flame> and I think radare does it, too
[10:00:32] *** Quits: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:09:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:10:09] <White_Flame> (I'm not very arm/m1 familiar)
[10:10:31] <White_Flame> but I think it's an appropriate question for #sbcl if nobody's jumping to answer in here
[10:12:02] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[10:12:26] <sveit_> well i put it through onlinedisassembler.com and it seems fairly consistent that NL1 really means X1. I'm sure if I were more experienced in assembly that something like this must have been going on would have been "obvious", but I'm still not comfortable with all the prefixes in front of register
[10:12:41] <sveit_> they seem to be underdocumented even in the usual case
[10:13:03] <sveit_> but i'll ask on #sbcl about whether these aliases are documented tomorrow
[10:18:45] *** Joins: pillton (~user@61-68-186-228.tpgi.com.au)
[10:27:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:34:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:35:07] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:47:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-054.client.tudelft.eduvpn.nl)
[10:49:02] *** Quits: nwoob (~apple@103.135.38.247) (Ping timeout: 240 seconds)
[10:49:49] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[10:54:41] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[10:54:55] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[11:04:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:05:40] *** Joins: shka (~herr@109.231.0.226)
[11:07:25] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:16:48] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:18:11] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a)
[11:21:32] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[11:22:04] *** Joins: nwoob (~apple@103.135.38.247)
[11:24:09] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[11:24:53] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[11:25:06] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[11:28:05] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[11:38:22] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[11:38:59] *** Quits: nwoob (~apple@103.135.38.247) (Ping timeout: 256 seconds)
[11:41:24] *** Joins: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de)
[11:44:09] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:44:34] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[11:44:47] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[11:54:45] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[11:54:58] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[12:03:32] *** Joins: treflip (~user@user/treflip)
[12:04:57] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[12:05:10] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[12:10:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:22:55] *** Joins: notzmv (~zmv@user/notzmv)
[12:24:42] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:31:21] *** Joins: nwoob (~apple@103.135.38.247)
[12:32:05] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:33:30] *** Joins: pve (~pve@178-55-97-144.bb.dnainternet.fi)
[12:34:38] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[12:34:52] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[12:36:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[12:36:47] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[12:37:07] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:37:42] <nwoob>  can someone please tell me where can I ask database related questions
[12:38:29] <phoe> #lispcafe might help you if it's tangentially related to any Lisp (or not)
[12:39:43] <nwoob> thanks phoe
[12:44:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:46:51] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:53:20] *** Quits: gaqwas (~john@dynamic-077-004-108-247.77.4.pool.telefonica.de) (Ping timeout: 250 seconds)
[12:54:49] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[12:55:03] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[12:55:35] *** Quits: pillton (~user@61-68-186-228.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[13:05:00] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[13:05:14] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[13:24:41] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[13:24:55] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[13:28:36] <mgl> If the asdf system xxx/test depends on something not yet in quicklisp, does that break xxx in quicklisp?
[13:36:39] <phoe> mgl: I don't understand the problem
[13:36:56] <phoe> the system XXX/TEST will not be included in Quicklisp if it cannot be loaded due to missing dependencies
[13:37:20] <phoe> if XXX and XXX/TEST are defined in the same file (which is very likely), it means that XXX transitively won't be included in Quicklisp either
[13:37:32] *** Parts: lisp123win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[13:37:37] <mgl> Yes, that was the question.
[13:37:43] <phoe> oh! OK, I understood then
[13:37:56] <phoe> then you'll need to include dependencies for all systems defined in xxx.asd
[13:38:46] <mgl> Thanks. If I put the test system in a different file, then it will be fine?
[13:39:45] <phoe> no idea - if it's included in the same tarball/repository then Quicklisp might nonetheless try to recognize and load it
[13:39:51] <phoe> and that'll explode anyway
[13:39:54] <phoe> so that's a question to Xach
[13:43:30] *** Joins: frgo (~frgo@195-154-180-96.rev.poneytelecom.eu)
[13:44:52] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[13:45:05] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[13:50:08] *** Quits: frgo (~frgo@195-154-180-96.rev.poneytelecom.eu) (Ping timeout: 268 seconds)
[13:55:03] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[13:55:17] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[13:56:41] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[14:01:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[14:04:44] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[14:04:58] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[14:12:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:13:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:14:06] <Krystof> sveit_: we have different names for registers because those registers have special meanings (either to Lisp-land, to the Garbage Collector, or both)
[14:14:22] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[14:14:55] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[14:15:05] *** Lord_of_Life_ is now known as Lord_of_Life
[14:15:06] <Krystof> On arm you see the results of a partitioned register set: NLx I *think* stands for Non-Lisp, but whatever the name, they're registers that are guaranteed never to hold lisp pointers.  (So the Garbage Collector can ignore them, and the compiler can put untagged data in them)
[14:15:08] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[14:15:34] <Krystof> THREAD holds a pointer to thread-local storage; NULL holds NIL; I can't remember if there is a ZERO on arm64, but if there is, it holds 0.
[14:15:55] <Krystof> CSP / CFP are "control" (i.e. Lisp) stack pointer and frame pointer
[14:15:56] <Krystof> and so on
[14:19:39] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:21:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:22:54] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[14:23:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:25:02] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[14:34:36] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[14:34:50] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[14:40:34] *** Joins: VincentVega (~user@212.97.1.64)
[14:43:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:45:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:48:31] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[14:53:57] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[14:54:39] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[14:54:47] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[14:55:00] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[14:56:50] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:57:08] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[14:57:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:59:33] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:59:54] *** Joins: lispy (~lispy4@84.69.59.93)
[15:00:46] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:02:28] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[15:02:54] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[15:04:44] <rotateq> Good morning you smart people. :)
[15:05:46] *** Joins: kevingal (~quassel@149.157.101.196)
[15:06:24] <jackdaniel> don't say that, some people take that to heart and lose healthy humbleness ;)
[15:07:08] <lispy> Good morning, thank you for acknowledging my genius
[15:07:10] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[15:07:27] <jackdaniel> :)
[15:09:16] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a) (Read error: Connection reset by peer)
[15:09:20] <sabra> nwoob: I would think so
[15:09:29] <sabra> Hello everyone
[15:09:34] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a)
[15:10:16] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 250 seconds)
[15:11:01] *** Joins: kevingal (~quassel@2001:770:c0:401:8517:a88f:26b9:2190)
[15:14:05] <phoe> hey sabra
[15:14:12] <phoe> thanks for the json update!
[15:14:58] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[15:15:12] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[15:15:29] <sabra> thank you. The original was so out of date
[15:15:37] *** Quits: nwoob (~apple@103.135.38.247) (Ping timeout: 256 seconds)
[15:16:38] <rotateq> jackdaniel: of course I didn't include myself ^^ but yes, there is always more to learn, even for a master/expert
[15:17:06] <rotateq> sabra: cl-json?
[15:17:41] <sabra> rotateq: My original review 8 years ago
[15:17:46] <phoe> rotateq: https://sabracrolleton.github.io/json-review.html
[15:18:11] <rotateq> ah okay, web stuff still is not much for me ^^
[15:20:48] <sabra> researchers I support sometimes get gigs of data in json form from who knows where. No web stuff here
[15:21:35] <rotateq> uff okay, i appreciate it much then
[15:22:54] *** Joins: VincentV` (~user@212.97.1.64)
[15:22:57] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[15:24:02] *** Quits: VincentVega (~user@212.97.1.64) (Ping timeout: 240 seconds)
[15:24:40] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[15:24:53] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[15:25:02] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[15:27:03] <rotateq> but when i see XML data format it seems to me it's a very exhausting one and that so much work is unnecessarily doubled and tripled by bringing it to a computable layout
[15:31:54] *** Joins: nwoob (~apple@103.233.122.65)
[15:39:54] *** Quits: nwoob (~apple@103.233.122.65) (Ping timeout: 268 seconds)
[15:44:51] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[15:45:05] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[15:47:55] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a) (Ping timeout: 268 seconds)
[15:48:19] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a)
[15:53:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:54:31] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:54:45] *** Joins: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[15:54:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:54:54] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 250 seconds)
[15:55:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:57:24] *** Joins: cosimone (~user@93-47-230-83.ip115.fastwebnet.it)
[15:59:50] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[16:11:09] <yitzi> sabra: Thanks for your review of shasht. I'll look into the rough edges that you did find. I appreciate the your detailed reviews as always!
[16:12:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[16:12:48] <sabra_> Yitzi: thanks. Let me know if there is anything I can do or should correct or update
[16:13:06] <yitzi> Will do!
[16:21:34] <yitzi> sabra_: Aside from the some of the issues that you mentioned that I obviously need to look at I did notice that you said that "[123.456e78]" fails...
[16:22:58] <yitzi> shasht reading of floating point is affected by `*read-default-float-format*` so setting that to 'double-float or doing `(shasht:read-json* :stream "[123.456e78]" :float-format 'double-float)` should work.
[16:23:30] <sabra_> yitzi: Thank you. Will correct today
[16:23:59] <yitzi> There could be a better way to handle that issue. I am open to suggestions/criticism.
[16:26:25] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:26:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[16:26:47] <sabra_> That works. That may work for all the other libraries that failed that as well
[16:32:23] <yitzi> Awesome. I don't think it is an ideal solution, but it does follow the core CL behavior so at least it is not unexpected.
[16:33:05] <sabra_> yitzi: That does fix that for most of the libraries. Will correct immediately.
[16:33:32] <yitzi> sabra_: Oh that is great! Glad I could help out.
[16:34:31] <sabra_> Will put a changelog at the top
[16:42:10] <yitzi> sabra_: Can you give me the test case that caused shasht to hang on nil? I am probably just being dense, but I am not seeing it.
[16:46:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:48:51] <yitzi> sabra_: nvm. I have found it.
[16:52:06] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 250 seconds)
[16:53:29] *** Joins: frodef (~frode@46.212.93.4)
[16:55:08] *** Quits: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 250 seconds)
[16:55:12] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[17:14:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:14:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:15:02] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[17:15:15] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[17:19:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:26:20] *** Quits: cosimone (~user@93-47-230-83.ip115.fastwebnet.it) (Remote host closed the connection)
[17:28:40] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:40] *** ChanServ sets mode: +o Bike
[17:29:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:34:43] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[17:34:57] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[17:35:24] *** Quits: kevingal (~quassel@2001:770:c0:401:8517:a88f:26b9:2190) (Quit: No Ping reply in 180 seconds.)
[17:36:22] <Xach> phoe: you are incorrect about transitive inclusion
[17:36:34] <Xach> phoe:  if XXX builds but XXX/TEST does not, XXX will still be included.
[17:36:41] *** Joins: kevingal (~quassel@2001:770:c0:401:896d:e00e:eb5c:d428)
[17:37:31] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[17:38:13] <phoe> Xach: TIL! thank you
[17:38:32] <phoe> if they are defined in the same ASD file, how does Quicklisp work in that situation though?
[17:38:48] <phoe> does Quicklisp automatically prune system definitions for systems that do not build?
[17:40:08] <Xach> Quicklisp tries to build every system it can find. If it builds, it is indexed in systems.txt and can be found via QL's system search function. If it doesn't, it isn't.
[17:46:59] <mgl> Xach: Thank you.
[17:52:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:52:11] *** Joins: Guest291 (~Guest29@51.138.53.46)
[17:52:20] *** Quits: Guest291 (~Guest29@51.138.53.46) (Client Quit)
[17:54:39] *** Joins: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[17:54:41] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 256 seconds)
[17:54:55] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[17:55:09] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[17:56:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:57:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:59:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:04:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:05:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:13:06] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[18:13:20] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[18:14:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:16:06] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[18:16:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:24:32] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 240 seconds)
[18:24:58] <fe[nl]ix> beach: I'm not aware of the work being done. what are you referring to ?
[18:42:25] <beach> fe[nl]ix: scymtym maintains Clouseau, the inspector.  And we are both working on Second Climacs as an editor.  I have a paper about debugging and McCLIM has a backtrace inspector "debugger".
[18:43:48] <beach> And scymtym has done work on incremental analysis of Common Lisp code.  He occasionally shows a demo here.
[18:43:58] <beach> Based on Eclector.
[18:44:36] <beach> scymtym: Any demo links for incremental syntax analysis?
[18:45:10] <beach> The main thing holding Second Climacs back is that I can't make up my mind about the data structure for computing indentation.
[18:45:11] <phoe> there was a little bit shown during one of the Online Lisp Meeting, IIRC
[18:45:35] <beach> Indeed.  But I think there are some better demos around.
[18:45:51] <phoe> that's an OLM idea!
[18:49:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:51:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:52:05] <fe[nl]ix> beach: thanks
[18:52:13] <beach> Sure.
[18:52:38] <fe[nl]ix> my interest was more in the discussion because I don't have time to work on it
[18:52:56] <beach> I can understand that.
[18:52:57] <fe[nl]ix> and the list of features I'd need in order to switch to it as my main editor is pretty large
[18:53:07] <beach> I can understand that too.
[18:53:25] <fe[nl]ix> I'll try mcclim again
[18:53:46] <fe[nl]ix> last time I tried to do anything with it I have up after 5 minutes because it was full of bugs
[18:53:52] *** Joins: treflip (~user@user/treflip)
[18:54:11] <beach> When was that?
[18:54:47] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[18:55:01] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[18:55:02] *** Quits: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 240 seconds)
[18:55:05] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[18:55:20] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:d1d:5dff:6ca7:d166)
[18:56:29] <fe[nl]ix> years ago
[18:56:50] <fe[nl]ix> perhaps around 2015
[18:57:09] <beach> It is being actively maintained and improved by jackdaniel and many others.  I am sure they would appreciate "issues" that you find.
[18:57:53] <beach> It is quite usable as it is, but there are some very nice improvements being worked on.
[18:58:29] *** Joins: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93)
[18:58:35] <foxfromabyss> Hi! I have a question :)
[18:58:36] <foxfromabyss> Let's say I have a class `(defclass point () (x y))` and a list `(list p1 p2 p3 p4)`
[18:58:36] <foxfromabyss> And I would like to splice(?) the values of the class instances into the list, so that it looks like `(list x1 y1 x2 y3 x3 y3 x4 y4)`
[18:58:37] <foxfromabyss> I initially tried to do that with `mapcar` but that obviously doesn't work, since I would need to return multiple values for that which is not supported by `mapcar` afaik
[18:58:37] <foxfromabyss> What would be a clean and concise way of doing that ^?
[18:58:53] <phoe> foxfromabyss: there's a pastebin in the channel topic; please use that one!
[18:59:03] <phoe> (at least for multiline messages)
[18:59:12] <foxfromabyss> Very sorry about that, will do that in the future
[18:59:13] <Xach> foxfromabyss: (loop for p in points collect (x p) collect (y p))
[18:59:23] <phoe> also, I'd use MAPCAN over (lambda (point) (list (point-x point) (point-y point)))
[18:59:24] <Xach> loop is the most elegant lisp construct
[18:59:29] <phoe> or loop, as Xach said
[18:59:40] <foxfromabyss> i thought loops were not The Lisp Way :D
[18:59:46] <Xach> (loop for a in approaches maximizing (elegance a))
[18:59:53] <foxfromabyss> huh :3
[18:59:55] <Xach> foxfromabyss: now you know better
[18:59:56] <phoe> LOOP is exactly *not* the lisp way
[18:59:58] <foxfromabyss> thanks!
[19:00:00] <beach> foxfromabyss: Now you know that they are.
[19:00:04] <phoe> at the same time, LOOP is exactly *very* the lisp way
[19:00:27] <phoe> it's not the lisp way because it doesn't have many parens and doesn't feel "lispy" the same way the rest of the language does
[19:00:49] <foxfromabyss> i see, thanks a lot
[19:00:54] <phoe> it's very the lisp way because CL allows you to design sublanguages meant for specific things, like iteration, formatting text, regex matching, pattern matching et al
[19:01:11] <phoe> the moment you reconcile these two approaches you will attain one of the first steps for lisp enlightenment™
[19:01:44] <foxfromabyss> hm... very smart
[19:01:57] <phoe> it's the Lisp way
[19:02:05] <phoe> absorb the paradigm that you need, and then use that paradigm
[19:02:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:02:12] <White_Flame> Schrödinger's Sexpr
[19:02:38] *** Joins: nwoob (~apple@103.233.122.65)
[19:02:44] <phoe> if you need functional programming, do it; if you need OOP, do it; if you need declarative programming, do it; if you need imperative control like GOTO, do it; if you need to mix all four, do it; if you need to design another four paradigms, just do it as well
[19:02:54] <phoe> CL is there to help you with all that
[19:03:28] <jackdaniel> except that when you join the irc channel everyone will shun you down if you don't go full-clos road (or be caustious to not speak about it:)
[19:03:36] <phoe> hey! not me
[19:03:37] *** Quits: nwoob (~apple@103.233.122.65) (Client Quit)
[19:03:47] * phoe waves his hands in futility
[19:03:49] * jackdaniel doesn't point with his finger
[19:03:56] <White_Flame> I'm a post-OO person
[19:04:36] <foxfromabyss> and here i thought CL was FP with a slice of OOP..
[19:04:37] <jackdaniel> re mcclim, I'm not sure whether these are small things, many important parts are rewritten and there may be regressions
[19:04:48] <phoe> foxfromabyss: the fun thing is that it can be
[19:04:54] <White_Flame> foxfromabyss: it's a multi-paradigm language
[19:04:56] <phoe> but doesn't have to be
[19:04:56] <random-nick> post-based OOP? isn't that called message passing?
[19:05:00] <scymtym> beach: i couldn't read the who discussion and i would like to make a new demo (in particular with some semantic highlighting), but for now https://techfak.de/~jmoringe/second-climacs-1.ogv and https://techfak.de/~jmoringe/drei-experiment-2.ogv may give an impression
[19:05:30] <rotateq> foxfromabyss: even some older professors at universities still think that or can't distinguish from generic LISP
[19:05:52] <random-nick> foxfromabyss: CL is a general purpose language with the speciality of being general purpose
[19:06:28] <beach> fe[nl]ix: Check out the links posted by scymtym.
[19:06:31] <random-nick> pretty much any paradigm can be implemented in CL or has already been implemented in CL
[19:06:41] <beach> scymtym: Thanks!
[19:07:46] <foxfromabyss> i see i see..
[19:09:37] <foxfromabyss> unrelated, is it possible to `defmethod` on a list?
[19:09:50] <jackdaniel> on a cons
[19:09:52] <jackdaniel> or null
[19:09:59] <jackdaniel> both are system classes
[19:10:04] <beach> So is LIST.
[19:10:38] <jackdaniel> oh, indeed
[19:10:55] <rotateq> yes :) but not on BIT
[19:11:07] <beach> foxfromabyss: You can specialize to anything that the standard says is a class.
[19:11:22] <foxfromabyss> gotcha, thanks
[19:11:34] <beach> Sure.
[19:13:49] <foxfromabyss> even more unrelated: i am using the Sketch library for some visualizations. Is it possible to render the image and save it to memory, instead of displaying it?
[19:14:09] <foxfromabyss> sorry if I am asking too many dumb questions, googling was not too much of a success tbh
[19:14:58] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[19:15:11] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[19:15:14] <beach> Your questions are not dumb.
[19:15:15] <rotateq> foxfromabyss: you're welcome :)
[19:15:26] <rotateq> And what beach says.
[19:17:54] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Remote host closed the connection)
[19:17:54] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[19:17:54] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[19:17:54] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[19:17:54] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:17:54] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Remote host closed the connection)
[19:17:54] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[19:17:54] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[19:17:54] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Remote host closed the connection)
[19:18:27] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:18:29] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:18:37] *** Joins: srhm (dda3db84b5@user/srhm)
[19:18:37] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[19:18:42] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[19:18:42] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[19:18:45] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[19:18:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:18:49] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[19:18:49] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[19:21:00] <phoe> looks like it should be possible to get out the contents of the foreign SDL2-WINDOW object somehow, but I have no idea how
[19:21:13] <phoe> I'd open an issue on GitHub and ask for adding that to the manual - it does sound like a good use case
[19:22:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:02] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[19:24:10] *** Joins: cosimone (~user@93-47-230-83.ip115.fastwebnet.it)
[19:25:12] <foxfromabyss> gotcha, thanks for taking a look at it.
[19:25:13] <foxfromabyss> I'll probably do just what you suggested :)
[19:29:20] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Quit: Konversation terminated!)
[19:34:39] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[19:34:53] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[19:41:35] *** Joins: Catie (~user@user/catie)
[19:42:16] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[19:45:12] <Josh_2> 'ello
[19:46:36] <rotateq> hi Josh_2
[19:50:16] *** Quits: sveit_ (~sveit@45.77.0.246) (Quit: Bye)
[19:50:42] *** Joins: sveit (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f)
[19:51:22] <hobo> Here is some generative art I made using CL: https://imgur.com/gallery/7uFY6P3
[19:51:45] <hobo> it's a great exercise for using macros
[19:52:51] <rotateq> hobo: wow, looks like cellular automatons!
[19:53:23] <rotateq> and yes, DSLs are great with them. or also combining with the power of CLOS
[19:54:50] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[19:54:51] *** semz_ is now known as semz
[19:55:03] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[19:58:43] <hobo> That was the set from the first real attempt. I've since been playing with colorizing it, generating segments of the whole image in separate threads, and have started writing some scaffolding for image analysis.
[20:01:29] <rotateq> running on GPU :)
[20:05:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:06:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:08:06] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:a9:59ba:3231:6160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:14:13] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[20:15:02] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[20:15:16] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[20:17:06] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[20:17:13] *** Joins: semz (~semz@2001:9e8:4bcb:8800:47c6:3f3c:2a4f:eb0c)
[20:17:13] *** Quits: semz (~semz@2001:9e8:4bcb:8800:47c6:3f3c:2a4f:eb0c) (Changing host)
[20:17:13] *** Joins: semz (~semz@user/semz)
[20:22:21] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[20:22:41] *** Joins: semz (~semz@user/semz)
[20:23:34] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-054.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[20:23:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:29:57] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[20:30:26] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5d2b:d9eb:b4a3:5b38)
[20:33:43] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[20:33:56] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[20:34:04] <mgl> Apart from the slightly related declaration DECLARATION, is there any support for user defined declarations in any implementation?
[20:35:12] <White_Flame> it's mostly part of the compiler infrastructure, so "support" is still going to be in the guts of things
[20:36:16] <White_Flame> what sort of thing are you looking to declare?
[20:38:41] <mgl> Nothing concrete, just wondering whether some lisps provide user defined declarations that a macro can access through its environment object.
[20:38:56] <White_Flame> ah
[20:39:42] <White_Flame> I haven't noticed that explicitly documented, but just adding to to the environment doesn't sound like it should be too difficult.
[20:40:24] <EdLangley[m]> I think all the in scope declarations are accessible in sbcl through internal APIs
[20:41:48] <EdLangley[m]> I also submitted an issue on Trucler about providing a portable interface to this functionality
[20:46:10] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8d4f:ab0b:d316:b5a)
[20:46:39] <phoe> mgl: I guess it's doable via CLTL2 interface?
[20:47:24] <phoe> see e.g. #'introspect-environment:declaration-information
[20:49:28] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:8d4f:ab0b:d316:b5a) (Ping timeout: 268 seconds)
[20:49:45] <mgl> Damn, that's a strange channel to join :-).
[20:53:08] <phoe> mgl: https://plaster.tymoon.eu/view/2878#2878
[20:56:25] <White_Flame> neat
[20:57:44] <phoe> remember that the lexenv object is of dynamic extent
[20:57:53] <phoe> and returning it outside its scope can cause magic to happen
[20:59:58] <mgl> Oh, wow. Looking at trivial-cltl2 it seems to cover most lisps with the notable exception of clisp.
[21:00:48] <phoe> probably because CLISP does not have the environment interface implemented at all
[21:02:04] <phoe> hard to write a compatibility layer over something that has no implementation support and cannot have a meaningful fallback implementation
[21:03:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:04:55] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:04:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:05:08] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:07:47] <mgl> I've just added linking to the hyperspec to mgl-pax (https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3A-2ADOCUMENT-LINK-TO-HYPERSPEC-2A-20VARIABLE-29) for most things. But to link to declarations, pax would need a declaration locative (roughly equivalent to namespec id). If there is actually a way for users to define
[21:07:48] <mgl> declarations, then it makes more sense to implement this.
[21:08:12] <mgl> s/namespec/namespace/
[21:08:21] <phoe> declaration locative, as in?
[21:08:57] <phoe> you want to get a list of all declarations? if yes, (trivial-cltl2:declaration-information 'declaration) will give you the custom-defined ones
[21:10:08] <mgl> mgl-pax terminology, sorry. Locatives specify what role of a symbol to consider. E.g. the same symbol might denote a function and compiler macro.
[21:10:21] <phoe> OK, understandable
[21:10:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:10:40] <mgl> Anyway, thanks a lot. I'll have a stab at this.
[21:10:57] <phoe> in the worst case, try calling (ignore-errors (trivial-cltl2:declaration-information symbol)) then and see what you get
[21:11:20] <phoe> and then refine it into something that isn't an ugly hack
[21:11:52] <phoe> or ask for a list of all custom declarations first via (d-i 'declaration) and check if the symbol in question is on the list first
[21:12:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:17:11] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:19:52] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:bc97:8d4f:ab0b:d316:b5a) (Read error: Connection reset by peer)
[21:20:05] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:f0fc:3609:a062:8525)
[21:20:33] *** Quits: VincentV` (~user@212.97.1.64) (Ping timeout: 256 seconds)
[21:23:16] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[21:24:36] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:24:49] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:26:28] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:f0fc:3609:a062:8525) (Ping timeout: 268 seconds)
[21:27:38] <mgl> For the record, while trivial-cltl2 has reader conditionals for major implementations, so far no lisp other than SBCL implements both define-declaration and declaration-information.
[21:28:07] <mgl> (or if they do, then declaration-information returns NIL in the previous example)
[21:32:02] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[21:33:06] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[21:34:47] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:35:01] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:38:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:40:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:43:58] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:44:11] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:47:33] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:f0fc:3609:a062:8525)
[21:49:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:52:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:53:05] *** Joins: jeosol (~jeosol@user/jeosol)
[21:53:16] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:d1d:5dff:6ca7:d166) (Ping timeout: 256 seconds)
[21:54:39] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:54:52] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[22:00:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:04:42] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:f0fc:3609:a062:8525) (Ping timeout: 268 seconds)
[22:08:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:14:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[22:14:51] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[22:15:04] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[22:15:12] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:17:56] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:35:02] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[22:35:16] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[22:35:37] <contrapunctus> I was reading demo.lisp in the Clobber repository to figure out how to use it, and I'm not sure what `clobber:define-save-info` does (other than "it defines a save-info method", from the macro definition), or why (and how) client code is supposed to use it... https://github.com/robert-strandh/Clobber/blob/master/demo.lisp#L19
[22:38:53] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:43:15] <Josh_2> Beach is probably away from his pc now
[22:43:38] <contrapunctus> Josh_2: hey ^^ I see
[22:43:51] <Josh_2> Hi contrapunctus, how's things?
[22:44:26] <contrapunctus> Josh_2: same old, how is that Matrix bot coming along? 🙂️
[22:45:10] <Josh_2> Not much has changed with the bot, I upgraded it to the second version of my matrix-api library a few days ago which has resulted in 100% uptime since. Other than that I have not done anything with it for months
[22:45:19] <Josh_2> it has been serving its purpose very effectively :)
[22:45:41] <contrapunctus> cool 😀️
[22:46:17] <EdLangley[m]> Interesting, I’ve been experimenting with writing my own matrix bot
[22:46:35] <EdLangley[m]> Where’s this api library?
[22:46:42] <Josh_2> I have written a library that wraps all of the matrix api, the admin api and the spaces api
[22:46:58] <Josh_2> EdLangley[m]: https://github.com/K1D77A/lunamech-matrix-api
[22:47:17] <Josh_2> my bot is FOSS but the documentation is old
[22:47:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[22:52:17] <Josh_2> contrapunctus: Currently I am designing a new MOP for use in my new project, the MOP is really awesome! Its great how you can encapsulate so much behaviour behind a simple class like interface
[22:54:05] <Josh_2> luv me sum compile time computing, simple az
[22:55:28] <rotateq> a new MOP? like a new CL standard what CL21 tries to do?
[22:56:16] <Josh_2> oops yes
[22:56:25] <Josh_2> my mistake, I am simply designing a protocol using metaclasses
[22:56:33] <rotateq> no problem! :)
[22:57:14] <rotateq> and hmm, first 2 years ago i found some cl21 ideas not bad, now i see that it violates things and you can't really rely anymore
[22:57:25] <Josh_2> I've never used cl21
[22:57:40] <rotateq> better leave it so then ^^
[22:57:57] <edgar-rft> we're sorry to tell that CL21 is outdated since January 1. :-)
[22:58:12] <rotateq> edgar-rft: nooo, 21st century :D
[22:58:27] <Josh_2> I like the 20th century version :P
[22:58:37] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[22:58:45] <EdLangley[m]> I have a little thing I use to get better hash table printing
[22:58:54] <EdLangley[m]> Which is probably the biggest annoyance I have with CL :)
[22:59:02] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net) (Ping timeout: 240 seconds)
[22:59:02] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net) (Ping timeout: 240 seconds)
[22:59:08] <Josh_2> Just inspect it ;)
[22:59:28] <rotateq> EdLangley[m]: fair enough :) but that is more due to implementations
[22:59:31] <rotateq> or not?
[22:59:42] * rotateq inspects edgar-rft 
[22:59:51] <EdLangley[m]> Hmm, not entirely sure
[23:00:00] <EdLangley[m]> I’d have to read about printing
[23:00:02] <EdLangley[m]> https://github.com/cjdev/aws-access/blob/master/src/pprint-setup.lisp
[23:00:11] <EdLangley[m]> Anyways, you can solve it with the pretty printer
[23:00:38] <rotateq> ah on the has-table page is this gopher link to TAoCP3 :D
[23:00:39] <EdLangley[m]> Load fset, then that file, the run the setup function
[23:01:03] <Bike> The standard doesn't require hash tables to be printed nicely or anything
[23:01:13] <Josh_2> alexandria:hash-table-plist  ezpz
[23:01:42] <rotateq> as long as it's running in 30 years still the same way. or more "i was there gandalf, 3000 years ago ..."
[23:02:04] <EdLangley[m]> Josh_2: the pretty printer lets you control the formatting of arbitrary types
[23:02:30] <EdLangley[m]> Which is pretty useful here
[23:02:54] <Josh_2> I dont think I have noticed this problem before, I just tend to inspect hash-tables
[23:03:00] <Josh_2> but I suppose that is one extra click than required
[23:03:06] <rotateq> yes with print-object generic function for example too
[23:03:08] <EdLangley[m]> Yeah
[23:03:22] <EdLangley[m]> You shouldn’t define methods for classes you don’t own
[23:03:29] <EdLangley[m]> Unless you defined the generic function
[23:03:41] <rotateq> who "owns" there? are we in C++ landscape?
[23:03:42] <Xach> EdLangley[m]: that is extremely false
[23:04:51] <Xach> On further reflection, withdrawing "extremely"!
[23:04:55] * Xach goes to reflect in a corner
[23:04:57] <gabc> Is there even a way to have methods without the generic function?
[23:05:12] <EdLangley[m]> It’s just the standard advice, right? Don’t define a method for a generic function unless you control either one of the classes in the specializers or you defined the generic function.
[23:05:16] <rotateq> (incf *defcon-level*)
[23:05:32] <Josh_2> gabc: you can define methods at runtime but I do not know if this creates the generic for you
[23:05:39] <EdLangley[m]> Otherwise you run the risk of violating other library’s expectations.
[23:05:44] <moon-child> EdLangley[m]: why?
[23:05:55] <Bike> it's not. it's common for libraries/etc to define generic functions with the expectation that they'll be extended.
[23:05:57] <Josh_2> EdLangley[m]: but this is exactly how you extend the functionality of someones library
[23:05:58] <rotateq> gabc: no methods are instances of generic functions (or do i miss some terminology?)
[23:06:20] <EdLangley[m]> Bike: yeah, but my rule doesn’t rule that out
[23:06:20] <moon-child> suppose module X defines generic function F and module Y defines class O.  I want to pass instances of O to module X.  Specialising F for O seems like the obvious thing to do
[23:06:24] <Bike> for a standard example, it's probably not an issue to define print-object or make-load-form for someone else's class.
[23:06:27] <EdLangley[m]> I think this is in LUV
[23:06:31] <gabc> rotateq: that's my assumption, and if you don't have the generic function explicit it's made implicitely
[23:06:56] <Bike> methods are not instances of generic functions, but they are attached to them
[23:07:12] <Bike> and if you use defmethod without a previous defgeneric the generic function is indeed made implicitly
[23:07:13] <rotateq> yes gabc, when calling first time DEFMETHOD and the protocol checks for it. but this way you can't have another method-combination (direectly)
[23:07:24] <rotateq> thanks Bike
[23:08:40] <Josh_2> Bike: but what if you define a method without using defmethod?
[23:09:03] <random-nick> hmm, am I reading the spec wrong or does MOP not allow for you to define a new kind of specialization and use it in a method on a standard-generic-function?
[23:09:05] <Bike> Josh_2: using make-instance? then no, it's up to you
[23:09:17] <random-nick> well, in an useful way
[23:09:18] <Bike> random-nick: a new kind of specializer, you mean?
[23:09:30] <mfiano> With the MOP, what is the way to get all of the effective slot _names_ of a finalized class?
[23:09:40] <random-nick> Bike: eg. if you wanted to define a equal-specializer
[23:09:44] <random-nick> or something like that
[23:09:54] <Bike> mfiano: (mapcar #'slot-definition-name (class-slots class)) should do it
[23:10:02] <EdLangley[m]> There’s a second proposal for that random-nick
[23:10:11] <Bike> random-nick: right. that part of mop is pretty weak, yeah. there was an extension proposal for it but i don't think it was implemented
[23:10:14] <EdLangley[m]> Only sbcl implements it, afaik
[23:10:29] <mfiano> Bike: Ah, class-slots. I was searching for a symbol containing "effective"
[23:10:43] <EdLangley[m]> (Maybe partially, I forget the details here, but I’ve seen relevant commit messages in sbcl)
[23:11:20] <Bike> https://arxiv.org/abs/1403.2765 info on the extension
[23:15:38] <rotateq> oh nice, with scymtym as one author. he seems not being soo far from me in distance ^^
[23:16:51] *** Quits: Oddity (~Oddity@user/oddity) (Remote host closed the connection)
[23:18:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:18:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:27:52] <_death> moon-child: the problem is when someone else also defines an F method specialized on O.. then you have two possibly incompatible definitions.. so one solution is to create your own class MY-O that is a subclass of O and specialize on that and make sure to pass instances of that to F
[23:35:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:41:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:13] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:47:38] <EdLangley[m]> There is a valid use-case here when you want to bridge two unrelated libraries but this is still dangerous for the reasons _death mentions
[23:48:31] <EdLangley[m]> Another option would be to create an adapter system that’s intended to be the bridge
[23:48:56] <EdLangley[m]> To work, this would require community buy-in :)
[23:49:18] <gabc> At least the definition of methods are package-local, right? So if I do them in my package they aren't global, right?
[23:49:48] <EdLangley[m]> Or use the client technique beach uses where the generic functions have an argument specifically intended to be used by the user to switch between sets of implementations
[23:49:52] <moon-child> gabc: no
[23:49:58] <moon-child> how could they be?
[23:50:39] <gabc> uh good point
[23:50:44] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5d2b:d9eb:b4a3:5b38) (Remote host closed the connection)
[23:50:47] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5dd2:b500:8434:c48a:1cdd:6dd5)
[23:51:16] *** Joins: morganw (~user@80.225.24.132)
[23:58:59] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
