[00:08:51] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[00:09:11] *** Joins: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966)
[00:10:21] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:b9d1:2b51:c9a9:d0c6) (Quit: Client closed)
[00:14:12] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[00:17:49] *** Quits: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966) (Remote host closed the connection)
[00:18:07] *** Joins: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966)
[00:19:51] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 256 seconds)
[00:25:38] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[00:25:39] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[00:25:39] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[00:36:58] *** Joins: cynomys (~cynomys@user/cynomys)
[00:55:59] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0)
[01:31:06] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 272 seconds)
[01:35:56] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:35:56] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:35:56] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:37:24] *** Quits: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966) (Ping timeout: 240 seconds)
[01:42:15] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 252 seconds)
[01:47:52] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:47:52] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:47:52] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:48:26] *** Joins: ur5us_ (~ur5us@2406:e002:6dd8:5f01:fc34:35d:f7a3:2784)
[01:49:24] *** Joins: countvajhula (~user@2601:643:867e:f90:ec30:fb87:f15e:1920)
[01:54:33] *** Joins: monkey_ (~user@190.104.116.153)
[02:35:00] *** Quits: countvajhula (~user@2601:643:867e:f90:ec30:fb87:f15e:1920) (Ping timeout: 240 seconds)
[02:40:05] *** Joins: countvajhula (~user@2601:643:867e:f90:ec30:fb87:f15e:1920)
[02:42:27] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[02:42:43] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:53:59] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Remote host closed the connection)
[02:54:31] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[02:56:02] *** Quits: rgherdt_ (~rgherdt@83.236.30.76) (Remote host closed the connection)
[02:59:36] <countvajhula> Hi, since scribblings/reference/reference.scrbl is just a particular module (scribblings.scrbl) at a particular collection path (scribblings/reference), any idea why you can't require it as (require scribblings/reference/reference)? Not for any practical purpose but just in principle - trying to understand in what way Scribble docs are treated as "special" as far as modules/collections are concerned
[03:10:08] *** Joins: monkey_ (~user@190.104.116.153)
[03:14:27] *** Quits: FreeFull (~freefull@user-94-254-175-34.play-internet.pl) ()
[03:18:16] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233)
[03:18:16] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233) (Changing host)
[03:18:16] *** Joins: skapata (~Skapata@user/skapata)
[03:33:25] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:35:22] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[03:45:48] *** Joins: badkins (~badkins@136.56.92.199)
[03:50:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:03:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[04:13:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:25:27] *** Joins: lagash (lagash@lagash.shelltalk.net)
[04:35:29] *** Joins: badkins (~badkins@136.56.92.199)
[04:40:46] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:40:56] *** Joins: badkins (~badkins@136.56.92.199)
[04:43:58] <willghatch[m]> Not 100% certain, but it may be the file extension.  If you make a scribblings.rkt instead you can likely reference it.
[04:48:13] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Remote host closed the connection)
[04:48:25] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[04:52:33] *** Joins: TCZ (~tcz@91.150.178.124)
[04:55:13] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Remote host closed the connection)
[04:55:50] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[05:00:15] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 252 seconds)
[05:01:44] *** Joins: cynomys (~cynomys@user/cynomys)
[05:12:53] *** Joins: badkins_ (~badkins@136.56.92.199)
[05:13:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:14:10] *** Quits: badkins_ (~badkins@136.56.92.199) (Remote host closed the connection)
[05:16:08] *** Joins: badkins (~badkins@136.56.92.199)
[05:20:21] *** Joins: countvaj` (~user@2601:643:867e:f90:7d38:67f7:6a15:fbf0)
[05:22:09] *** Quits: countvajhula (~user@2601:643:867e:f90:ec30:fb87:f15e:1920) (Ping timeout: 250 seconds)
[05:24:36] *** Quits: countvaj` (~user@2601:643:867e:f90:7d38:67f7:6a15:fbf0) (Ping timeout: 240 seconds)
[05:29:44] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[05:35:50] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:55:37] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[05:57:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:03:52] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:30:20] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[06:34:36] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[06:46:17] *** Joins: countvajhula (~user@2601:643:867e:f90:1:d640:3c6f:3bdc)
[06:47:07] <countvajhula> I see, yeah it does appear to be the case that a module provided at the same scribblings collection path but with a .rkt instead of a .scrbl extension is `require`able. Thanks willghatch[m] !
[06:47:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:47:36] *** Joins: badkins (~badkins@136.56.92.199)
[06:49:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:51:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:52:18] *** Joins: badkins (~badkins@136.56.92.199)
[06:57:05] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:17:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:31:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:46:52] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[07:47:48] *** Quits: ur5us_ (~ur5us@2406:e002:6dd8:5f01:fc34:35d:f7a3:2784) (Ping timeout: 240 seconds)
[07:51:18] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 252 seconds)
[07:55:00] *** Joins: countvaj` (~user@2601:643:867e:f90:29e4:f72d:435f:5046)
[07:56:36] *** Quits: countvajhula (~user@2601:643:867e:f90:1:d640:3c6f:3bdc) (Ping timeout: 240 seconds)
[07:58:03] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[07:59:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:14:08] *** Joins: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966)
[08:22:37] *** Joins: cynomys (~cynomys@user/cynomys)
[08:43:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[08:43:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:53:12] *** Joins: badkins (~badkins@136.56.92.199)
[08:57:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:01:48] *** Quits: countvaj` (~user@2601:643:867e:f90:29e4:f72d:435f:5046) (Ping timeout: 240 seconds)
[09:13:24] *** Quits: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966) (Ping timeout: 240 seconds)
[09:31:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[09:35:21] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[09:39:39] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 252 seconds)
[10:41:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:49:24] *** Quits: ASau (~user@lmpc.drb.insel.de) (Remote host closed the connection)
[10:54:16] *** Joins: badkins (~badkins@136.56.92.199)
[10:55:42] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e7:dc05:2180:3a97:1dd6:a138)
[10:58:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[11:08:35] *** Quits: wwalker (~wwalker@platinum.solid-constructs.com) (Quit: leaving)
[11:11:24] *** Joins: wwalker (~wwalker@platinum.solid-constructs.com)
[11:35:14] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0) (Quit: Client closed)
[11:39:57] *** yagamisa1o is now known as newblue
[12:07:22] *** Quits: newblue (~SingSong@120.197.255.246) (Changing host)
[12:07:22] *** Joins: newblue (~SingSong@user/yagamisato)
[12:36:15] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[13:04:48] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0) (Quit: Client closed)
[13:10:22] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[13:14:36] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[13:57:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:09:52] *** Joins: klf (~fkl@66.220.205.98)
[14:10:10] <klf> Greetings!
[14:11:14] <klf> (define (id arg ...) body ...+) is a shorthand for (define id (lambda (arg ...) body ...+))
[14:12:17] <klf> now, I want to dive deeper to gain a better understanding of how things work under the hood, but is overwhelmed by the concepts/terminologies
[14:26:31] <klf> is (id arg ...) in "(define (id arg ...) body ...+)" known as an internal-definition context?
[14:34:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:35:57] *** Joins: ASau (~user@lmpc.drb.insel.de)
[15:01:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29)
[15:01:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29) (Changing host)
[15:01:32] *** Joins: skapata (~Skapata@user/skapata)
[15:16:40] *** Joins: patrice (~patrice@user/patrice)
[15:19:38] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[15:28:19] <klf> "A top-level binding is a binding from a definition at the top-level; a module binding is a binding from a definition in a module; all other bindings are local bindings."
[15:30:53] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[15:32:22] <klf> By default, for example, is the binding for '+' a module or a top-level binding?
[15:34:08] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0)
[15:36:12] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[16:01:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:03:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:12:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:20:55] *** Quits: codingquark (~quassel@user/codingquark) (Ping timeout: 256 seconds)
[16:22:15] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 252 seconds)
[16:25:34] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[16:25:34] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[16:25:34] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[16:28:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:29:21] *** Joins: notzmv (~zmv@user/notzmv)
[16:30:35] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[16:31:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:36:13] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[16:47:53] *** Joins: codingquark (~quassel@user/codingquark)
[16:54:58] *** Joins: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs)
[17:02:02] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0) (Quit: Client closed)
[17:13:44] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0)
[17:14:05] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[17:14:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[17:15:12] <tonyg> No, an internal definition context is something else
[17:15:33] <tonyg> The binding for + is a module binding; the top-level is the *REPL*
[17:16:18] <tonyg> I'm afraid I don't have a good name for the (id arg ...) part -- it's kind of template-like I suppose? Generically, it's a "form" but then so is just about everything
[17:17:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:18:50] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:19:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:19:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:29:20] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:30:44] <klf> tonyg, when (id arg ...) get parsed it has to know that it's not in expression context
[17:31:00] <klf> otherwise it would treat it as a function call, which it isn't
[17:31:02] <tonyg> that's true. The `define` macro takes care of that
[17:31:30] <tonyg> There are generally no good names for the portions of syntax that are not "expression context", unfortunately
[17:35:55] <klf> https://docs.racket-lang.org/reference/syntax-model.html#%28tech._top._level._binding%29
[17:36:10] <klf> The only thing I still don't understand is "the top-level is the REPL".
[17:36:20] <klf> Can you elaborate on that a little more?
[17:39:39] <klf> "Within a module, references to top-level bindings are disallowed. "
[17:41:47] <klf> Is my code written inside a module (mymodule.rkt) "unde" the top-level?
[17:41:55] <klf> under*
[18:02:41] <tonyg> So the "top-level" is another name for the repl, the read-eval-print-loop; in interactive use in the repl, bindings may be created, but ALSO the module form is available, so modules can be defined at the repl (!!!)
[18:03:02] <tonyg> those modules defined at the repl are forbidden from referring to other top-level bindings (I think)
[18:03:16] <tonyg> certainly, a module in a *.rkt file is completely separate from the repl (hooray!) and so the question is moot
[18:03:38] <tonyg> there are, in that case, no top-level bindings to discuss since, at require time, there's no repl
[18:04:36] <tonyg> rudybot: eval (define x 1)
[18:04:36] <rudybot> tonyg: Done.
[18:04:41] <tonyg> rudybot: eval x
[18:04:42] <rudybot> tonyg: ; Value: 1
[18:04:51] <tonyg> rudybot: eval (module y racket (define v (+ x 1)) (provide v))
[18:04:55] <rudybot> tonyg: error: eval:1:30: x: unbound identifier in module <NEWLINE>   in: x
[18:10:52] <klf> tonyg, thank you for that example :-)
[18:11:16] <tonyg> :)
[18:22:14] <klf> what is the #' notation in #'blah ?
[18:23:27] <bremner> in common-lisp/emacs-lisp it means (function blah). I didn't know it was a thing in racket
[18:23:46] <bremner> oh wait. That means syntax, right?
[18:24:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:24:43] <klf> bremner, see the example for bound-identifier=? seehttps://docs.racket-lang.org/reference/stxcmp.html
[18:26:18] <bremner> #'foo is a reader shortcut for (syntax foo)
[18:26:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:28:30] <bremner> https://docs.racket-lang.org/reference/reader.html#%28part._parse-quote%29
[18:29:19] <bremner> that could be more discoverable, I agree
[18:45:46] *** Joins: badkins (~badkins@136.56.92.199)
[19:04:59] <klf> I am having trouble understanding the example for bound-identifier=? (https://docs.racket-lang.org/reference/stxcmp.html)
[19:05:13] <klf> why would (check-a a)
[19:05:22] <klf> yield 'no-binds
[19:08:00] <klf> the syntax-rule would transform (check-a a) -> (check a a)
[19:11:24] <klf> and so the check would be (bound-identifier=? #'a #'a), wouldn't it?
[19:16:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:18:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:29:44] <klf> The grammar for lambda forms are given here https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lambda%29%29
[19:29:44] <rudybot> https://teensy.info/FainckcmPp
[19:30:57] <klf> rudybot: (lambda ([x 4] c) (+ x c)) 
[19:31:04] <rudybot> klf: your sandbox is ready
[19:31:04] <rudybot> klf: error: eval:1:15: lambda: default-value expression missing <NEWLINE>   at: c <NEWLINE>   in: (lambda ((x 4) c) (+ x c))
[19:31:25] <klf> rudybot:  (lambda (c [x 4]) (+ x c))
[19:31:26] <rudybot> klf: ; Value: #<procedure>
[19:31:30] <klf> I find that interesting.
[19:32:25] <klf> The grammar says that arg can be either id or [id default-expr] (among others)
[19:32:48] <klf> why does the order matter here?
[19:36:31] <bremner> because of how missing parameters are detected
[19:36:43] <bremner> so everything after the first missing parameter is also missing
[19:37:09] <bremner> (just talking about positional parameters here)
[19:38:07] <klf> > "because of how missing parameters are detected"
[19:38:38] <klf> in other words, (lambda ([x 4] c) (+ x c)) actually did not violate the grammar
[19:39:53] <klf> bremner: ^
[19:39:59] <bremner> uh. Well. it doesn't make sense. Whether it violates a grammer I don't know
[19:40:13] <bremner> if you pass one parameter, is that x or c
[19:45:13] *** Quits: Guest3567 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Quit: Reconnecting)
[19:45:25] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[19:45:49] *** sudden is now known as Guest402
[19:46:15] *** Quits: Guest402 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[19:46:15] *** Joins: Guest402 (~cat@user/sudden)
[19:58:24] *** Quits: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[20:05:40] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:fe83:b55e:cbe0:41c0) (Quit: Client closed)
[20:26:44] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e7:dc05:2180:3a97:1dd6:a138) (Read error: Connection reset by peer)
[20:26:49] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341)
[20:37:13] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:39:06] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341) (Ping timeout: 252 seconds)
[20:42:41] *** Joins: badkins (~badkins@136.56.92.199)
[20:45:19] <klf> For someone who is learning about Racket, the Racket doc is cryptic.  So I come across the term "tainted identifier" and so I click on the hyperlink to the section that describes it and this is what I get:
[20:46:02] <klf> "A syntax object is tainted when it is included in an exception by the macro expander or when it is produced by a function like expand using a code inspector that is not the original code inspector. The function syntax-taint also returns a tainted syntax object."
[20:46:18] <bremner> to be fair, this is a specialized kind of "learning about racket"
[20:47:19] <bremner> but *shrug*, documentation can always be improved. Unfortunately the more specialized the documentation, the fewer people can improve it.
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[20:50:31] <klf> at which point I ask myself, should I continue to recurse into "code inspector"
[20:50:45] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[20:53:56] <samth> klf: no, you should definitely back out several steps
[20:55:18] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:58:59] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341)
[21:01:43] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e7:dc05:9dc4:6bda:33eb:c5e)
[21:01:55] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Remote host closed the connection)
[21:02:27] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[21:04:00] <klf> Yea, I don't think I'll learn what a syntax object/identifier is.  For someone who doesn't know what it is, I'd like to know when (i.e. what circumstances) the macro expander might reject it.
[21:04:50] <klf> okay https://docs.racket-lang.org/guide/stx-certs.html is a little better.
[21:05:30] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341) (Ping timeout: 252 seconds)
[21:07:48] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[21:18:45] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:4b40:bd4e:6266:bc3a)
[21:31:21] <samth> klf: (a) the guide is a good place to start, better than the reference (b) you almost certainly don't need to know what certificates are
[21:32:18] <samth> klf: if you want to know how to write macros, then learning what syntax objects are is useful -- basically, they're an s-expression representing a program together with some information about what the names in the s-expression mean and where they came from
[21:34:30] *** Quits: juanfra__ (~juanfra@user/juanfra) (Read error: Connection reset by peer)
[21:40:16] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[21:42:56] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:43:08] *** Joins: badkins (~badkins@136.56.92.199)
[21:45:01] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Remote host closed the connection)
[21:45:33] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[21:49:01] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:51:09] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 252 seconds)
[21:53:20] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: No Ping reply in 180 seconds.)
[21:54:46] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:13:08] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e7:dc05:9dc4:6bda:33eb:c5e) (Read error: Network is unreachable)
[22:21:52] *** Joins: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net)
[22:26:12] *** Quits: capfredf (~capfredf@c-68-50-14-206.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[22:27:17] <klf> samth, can you help me with an earlier question about the example for the predicate bound-identifier=?
[22:27:44] <klf> (https://docs.racket-lang.org/reference/stxcmp.html)
[22:28:15] <klf> why would (check-a a) yield 'no-binds?
[22:28:32] <klf> the syntax-rule transforms (check-a a) -> (check a a)
[22:28:41] <klf> and so the check would be (bound-identifier=? #'a #'a), wouldn't it?
[22:34:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:43:30] *** Joins: badkins (~badkins@136.56.92.199)
[22:47:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:56:47] <samth> klf: the point there is that it doesn't just transform it into `(check a a)`, instead it adds some additional information to the part of the program generated by the macro, so that the first `a` has that extra information, which `bound-identifier=?` detects
[22:57:49] <samth> klf: if you want more information about this process, I recommend this talk: https://www.youtube.com/watch?v=Or_yKiI3Ha4
[23:02:02] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:fcb0:9ced:a8db:5d63)
[23:06:30] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:fcb0:9ced:a8db:5d63) (Ping timeout: 252 seconds)
[23:17:14] <klf> samth, re: "the first `a` has that extra information".  Where is that extra information kept?  how does `bound-identifier=?` know where to look for it?  I thought `a` is just an indentifier.
[23:18:19] <samth> `a` is indeed an identifier, and that's what I was saying earlier about syntax objects -- they have extra information about what names mean, which is the extra information that `bound-identifier=?` is checking
[23:18:43] <samth> (an identifier is just a syntax object representing a name, rather than representing a number or some bigger piece of syntax)
[23:18:54] *** Joins: countvajhula (~user@2601:643:867e:f90:cd51:5d41:2418:207e)
[23:23:07] *** Joins: badkins (~badkins@136.56.92.199)
[23:23:53] <klf> I guess the lecture slide definition of a macro is too simple and lacks the detail that I need:
[23:24:06] <klf> "A macro is a function taht transforms a piece of Racket syntax into another."
[23:25:09] <samth> klf: maybe I could give a better answer if I understood more of what you're trying to learn
[23:25:35] <klf> Is it correct to say that a macro transforms one syntax object into another syntax object?
[23:26:12] <samth> yes, macros are functions from syntax objects to syntax objects
[23:27:17] <klf> just trying to get a better sense of how things work in Racket so that the Racket docs will be more useful to me,
[23:27:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:29:06] <samth> if you are relatively new to racket, you are unlikely to need `bound-identifier=?` at all
[23:29:20] <samth> (I am very much not new, and I almost never use it)
[23:29:40] *** Joins: badkins (~badkins@136.56.92.199)
[23:31:43] <klf> this was introduced in Chapter 1 while explaining what syntax objects are (https://docs.racket-lang.org/reference/syntax-model.html)
[23:33:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:48:52] *** Joins: badkins (~badkins@136.56.92.199)
[23:50:59] *** Joins: cynomys (~cynomys@user/cynomys)
[23:54:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
