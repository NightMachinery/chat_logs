[00:18:25] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:22:17] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 240 seconds)
[00:24:57] *** Joins: benin (~benin@59.88.179.150)
[00:44:43] *** Joins: jespada (~jespada@148.252.132.52)
[00:53:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:36:07] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:36:54] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:56:33] *** Joins: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk)
[02:19:52] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:29:25] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:31:32] *** Joins: jespada (~jespada@148.252.132.52)
[02:38:04] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:50:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[03:16:47] <pie_> Is themonomorphism restriction enabled or disabled by default in ghci?
[03:16:47] <pie_> if I do:
[03:16:47] <pie_> > maxBound
[03:16:47] <pie_> ()
[03:16:48] <lambdabot>  ()
[03:16:57] <pie_> that suggests its picking some type
[03:17:01] <pie_> but if I do
[03:17:10] <pie_> > :set -XNoMonomorphismRestriction
[03:17:13] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[03:17:16] <pie_> it still does the same thing
[03:17:23] <pie_> on the other hand if I do:
[03:17:27] <pie_> > :set -XMonomorphismRestriction
[03:17:29] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[03:17:45] <pie_> then I get a type error, which is what I'd expect if it doesnt resolve to a concrete thing
[03:17:51] <pie_> >:type maxBound
[03:18:20] <pie_> maxBound :: Bounded a => a
[03:19:04] <geekosaur> ghci disables t
[03:19:38] <geekosaur> that said it also adds () to the defaults, and ghc/ghci has to pick *some* type
[03:20:14] <geekosaur> monomorphism restriction controls what is the inferred type of a binding
[03:20:25] <geekosaur> an *expression* must always have a concrete type
[03:20:43] <geekosaur> you can't evaluate a Bounded a => a without picking an a
[03:22:10] <geekosaur> I mean, what result would you expect from `maxBound` without a type?
[03:23:00] <geekosaur> you probably want to read up on ExtendedDefaultRules
[03:23:57] <pie_> this was my guess, hence the the above <geekosaur> you can't evaluate a Bounded a => a without picking an a
[03:23:58] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[03:24:00] * pie_ continues processing
[03:25:06] <pie_> let me be more concrete, why does turning on NoMonomorphismRestriction _enable_ the default rules that come with the monomorphism restriction?
[03:25:18] <pie_> i probably understood something basic though, i just started reading about this
[03:26:27] <geekosaur> I have to wonder if you tweaked something else, because the monomorphism restriction doesn't affect expressions, it affects bindings with no parameter
[03:26:36] <geekosaur> % maxBound
[03:26:36] <yahb> geekosaur: ()
[03:26:48] <geekosaur> % :set MonomorphismRestriction
[03:26:48] <yahb> geekosaur: Some flags have not been recognized: MonomorphismRestriction
[03:27:02] <geekosaur> % :set -XMonomorphismRestriction
[03:27:02] <yahb> geekosaur:
[03:27:07] <geekosaur> % maxBound
[03:27:07] <yahb> geekosaur: ; <interactive>:95:1: error:; * Ambiguous type variable `a0' arising from a use of `maxBound'; prevents the constraint `(Bounded a0)' from being solved.; Relevant bindings include it :: a0 (bound at <interactive>:95:1); Probable fix: use a type annotation to specify what `a0' should be.; These potential instances exist:; instance forall a k (b :: k). Bounded a => Bound
[03:27:14] <geekosaur> hm
[03:27:16] <pie_> oh um
[03:27:24] <pie_> I enabled ScopedTypeVariables
[03:27:33] <geekosaur> that shouldn't matter either
[03:27:53] <geekosaur> hm, I wonder if this is…
[03:28:01] <geekosaur> % :set -fno-it
[03:28:02] <yahb> geekosaur:
[03:28:05] <geekosaur> % maxBound
[03:28:06] <yahb> geekosaur: ()
[03:28:16] <geekosaur> whoopsie :)
[03:28:23] <geekosaur> % :set -fit
[03:28:23] <yahb> geekosaur: Some flags have not been recognized: -fit
[03:28:30] <geekosaur> % :quit
[03:28:30] <yahb> geekosaur:
[03:28:44] <pie_> here is my full session log https://bpa.st/POFA
[03:29:18] <geekosaur> so what really happened is that ghci by default binds the result of an expression to `it`, which is a binding without a parameter and therefore triggers the monomorphism restriction
[03:29:28] <geekosaur> when I turned off binding to `it` then it worked again
[03:31:38] <geekosaur> did that make sense?
[03:42:41] <pie_> sorry, I come and go
[03:43:45] <pie_> give me a few
[03:44:37] <pie_> haha
[03:44:41] <pie_> % :set -fno-it
[03:44:42] <yahb> pie_:
[03:44:47] <pie_> % :set -fit
[03:44:47] <yahb> pie_: Some flags have not been recognized: -fit
[03:44:51] <pie_> % :set -fno-no-it
[03:44:51] <yahb> pie_:
[03:52:45] <geekosaur> yeh, I got caught by that too
[03:53:15] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-it-variable if you care
[03:59:36] <geekosaur> actually I am still confused by the fact that it had to monomorphize to print the result, but that wasn't good enough for the MMR
[03:59:58] <geekosaur> I can only guess that there's something special about how it binds `it`
[04:00:33] <geekosaur> % it' = maxBound
[04:00:34] <yahb> geekosaur:
[04:00:56] <geekosaur> :set -FMonomorphismRestriction
[04:01:02] <geekosaur> % :set -FMonomorphismRestriction
[04:01:03] <yahb> geekosaur: Some flags have not been recognized: -FMonomorphismRestriction
[04:01:07] <geekosaur> % :set -XMonomorphismRestriction
[04:01:08] <yahb> geekosaur:
[04:01:14] <geekosaur> oy. not my night, I guess :)
[04:01:19] <geekosaur> % it' = maxBound
[04:01:20] <yahb> geekosaur: ; <interactive>:7:7: error:; * Ambiguous type variable `a0' arising from a use of `maxBound'; prevents the constraint `(Bounded a0)' from being solved.; Relevant bindings include it' :: a0 (bound at <interactive>:7:1); Probable fix: use a type annotation to specify what `a0' should be.; These potential instances exist:; instance (Applicative f, Bounded a) => Bounded (A
[04:01:43] <geekosaur> % :set -XNoMonomorphismRestriction
[04:01:43] <yahb> geekosaur:
[04:02:15] <geekosaur> hm
[04:02:21] <geekosaur> % maxBound
[04:02:21] <yahb> geekosaur: ()
[04:03:08] <geekosaur> so why doesn't defaulting "solve" the MMR? guess I'm confused
[04:03:27] <geekosaur> % :t it
[04:03:27] <yahb> geekosaur: Bounded a => a
[04:04:35] <pie_> this is specifically why I tried it <geekosaur> yeh, I got caught by that too
[04:13:39] <geekosaur> so I guess there is some specific difference between resolving an expression in ghci and doing so in compiled code or a binding
[04:17:57] * pie_ reads https://stackoverflow.com/questions/32496864/what-is-the-monomorphism-restriction
[04:21:15] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[04:23:28] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:26:36] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[05:03:17] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[05:23:27] <pie_> I had to read the comments to make some sense of this https://stackoverflow.com/a/4179515
[05:23:27] <pie_> so, disabling the monomorphism restriction is going to interact strangely with IO unless you know what youre doing...
[05:23:27] <pie_> or youre going to waste perf
[05:24:51] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[05:29:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[05:52:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[05:54:21] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:13:14] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:30] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:40:30] *** Joins: joegard (~joegard@179.33.119.167)
[07:41:20] *** Quits: joegard (~joegard@179.33.119.167) (Quit: Client closed)
[07:55:22] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[08:24:12] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[08:26:09] *** Quits: benin (~benin@59.88.179.150) (Quit: Ping timeout (120 seconds))
[08:26:32] *** Joins: benin (~benin@59.88.179.150)
[09:39:00] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 240 seconds)
[09:40:41] *** Joins: benin (~benin@59.88.179.150)
[09:54:03] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 256 seconds)
[09:59:08] *** Joins: coot (~coot@213.134.190.95)
[10:21:09] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[10:29:02] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[10:35:19] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[10:41:14] *** Joins: coot (~coot@213.134.190.95)
[10:56:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[11:03:08] *** Joins: benin (~benin@59.88.179.150)
[11:04:08] *** Quits: benin (~benin@59.88.179.150) (Client Quit)
[11:05:19] *** Joins: benin (~benin@59.88.179.150)
[11:08:59] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:15:10] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 272 seconds)
[11:25:02] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[11:36:52] *** Joins: benin (~benin@59.92.239.104)
[11:59:35] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:29:46] *** Joins: jespada (~jespada@85.255.234.190)
[12:41:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:44:18] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:50:14] *** Joins: arievw (~arievw@85.148.234.95)
[12:57:07] *** Quits: arievw (~arievw@85.148.234.95) (Quit: Nettalk6 - www.ntalk.de)
[13:02:36] *** Joins: jespada_ (~jespada@85.255.234.190)
[13:02:45] *** Quits: jespada (~jespada@85.255.234.190) (Ping timeout: 256 seconds)
[13:25:58] *** Quits: polyphem (~rod@2a02:810d:840:8754:2123:9506:671d:c7f0) (Ping timeout: 250 seconds)
[13:27:03] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[13:29:02] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Client Quit)
[13:31:47] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:34:38] *** Joins: wbtd (~wbtd@2001:8b0:1381:bd32:50ec:76cc:931b:5c51)
[15:01:49] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[15:02:36] *** Quits: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk) (Ping timeout: 256 seconds)
[15:25:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:26:41] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:27:03] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[15:32:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:32:47] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:38:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:38:57] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:00:30] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[16:01:36] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:02:05] *** Joins: coot (~coot@213.134.190.95)
[16:11:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[16:12:41] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:22:31] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:23:25] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:26:33] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[16:26:52] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[16:33:50] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:37:39] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:41:34] *** Quits: jespada_ (~jespada@85.255.234.190) (Ping timeout: 260 seconds)
[17:13:21] *** Quits: benin (~benin@59.92.239.104) (Quit: The Lounge - https://thelounge.chat)
[17:13:43] *** Joins: benin (~benin@59.92.239.104)
[17:26:52] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[17:29:07] *** Joins: hololeap (~hololeap@user/hololeap)
[17:54:10] *** Quits: benin (~benin@59.92.239.104) (Ping timeout: 272 seconds)
[17:55:56] *** Joins: benin (~benin@59.92.239.104)
[18:44:44] *** Joins: hololeap_ (~hololeap@user/hololeap)
[18:47:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[18:56:21] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 256 seconds)
[18:59:19] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:59:19] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:59:19] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:02:49] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:32:06] *** Joins: joegard (~joegard@179.33.119.167)
[19:39:00] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[19:39:16] *** Joins: jespada (~jespada@85.255.234.190)
[19:42:31] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[19:42:31] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[19:42:31] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:43:28] *** Quits: joegard (~joegard@179.33.119.167) (Quit: Client closed)
[20:58:45] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:20:35] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[21:23:58] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Quit: WeeChat 3.4)
[21:33:47] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:38:32] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:03:25] *** Joins: Midjak (~Midjak@82.66.147.146)
[22:07:11] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:11:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:30:04] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[22:37:41] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[22:41:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:46:08] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:47:30] *** Joins: vicfred (~vicfred@user/vicfred)
[22:59:05] *** Joins: coot (~coot@213.134.190.95)
[23:31:40] <Midjak> Hello, is there something in haskell to get "ln" without using a third party package ?
[23:35:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:35:36] <Midjak> ok just log
[23:37:42] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:39:29] <geekosaur> https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/unix-2.7.2.2/System-Posix-Files.html#v:createSymbolicLink
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:57:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
