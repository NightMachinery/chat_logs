[00:08:01] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:02] <il> well
[00:11:55] <rotateq> well well well
[00:13:12] <bremner> a deep topic indeed
[00:13:40] <rotateq> bremner: meta-philosophy ^^
[00:14:17] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#clschool)
[00:14:32] <rotateq> *breath-out*
[00:15:37] <lisp123> time for me to sleep, nights #CLSCHOOL. Be....WELL!
[00:16:05] <rotateq> night lisp123 
[00:18:38] <lisp123> rotateq: nights
[00:30:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:56:03] *** Joins: Oladon (~olad@98.43.81.226)
[03:02:16] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[03:10:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[03:12:32] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:24:32] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[03:24:38] <seok> is there any tool with which I can a pixel map in 2 dimensional array and display it ?
[03:24:46] <seok> define*
[03:27:59] <pjb> seok: McCLIM
[03:31:17] <seok> I'm reading through the documentation but can't find anything that accepts an array of pixels
[03:33:39] <pjb> You will have to make it using draw-point.
[03:34:24] <seok> right.
[03:38:20] <pjb> seok: but the advantage of McCLIM is that it's written in CL, so you can easily add this function to it, and make it optimized.
[03:38:25] <pjb> (for the different backends).
[04:00:52] <aeth> easiest thing to do is to write a png
[04:01:23] <aeth> opticl
[04:01:44] <aeth> you are not going to display 2D information better than a third-party image viewer
[04:01:50] <aeth> and writing a png is really easy, too
[04:26:35] <seok> really ? why would displaying png be better than rendering raw pixels myself ?
[04:28:05] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:00:36] <aeth> when you just generate a png, that's all you do.
[05:01:28] <aeth> you just have 0-255 0-255 0-255 [0-255] done in an mxnx4 array (or 4xmxn or 4xnxm or who knows, but that's easy with trial and error)
[05:01:36] <aeth> and then a one line function call
[05:02:43] <aeth> the alternative is, quite literally, writing a program. So you need to handle boilerplate like "ESC" quits, etc., and you probably won't ever bother to add, say, zooming
[05:06:16] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[05:09:01] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[05:22:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:31:43] <seok-> that is true
[06:19:35] *** Quits: gnoirzox (~gnoirzox@178.170.103.136) (Changing host)
[06:19:35] *** Joins: gnoirzox (~gnoirzox@user/gnoirzox)
[06:26:59] *** Quits: gnoirzox (~gnoirzox@user/gnoirzox) (Quit: WeeChat 2.8)
[06:34:02] *** Quits: sts-q (~sts-q@212.53.219.162) (Ping timeout: 256 seconds)
[06:44:57] *** Joins: sts-q (~sts-q@91.200.108.170)
[07:23:53] *** Joins: Oladon (~olad@98.43.81.226)
[07:32:00] <beach> Good morning everyone! 
[07:32:37] *** Quits: sts-q (~sts-q@91.200.108.170) (Ping timeout: 240 seconds)
[07:45:42] *** Joins: sts-q (~sts-q@212.53.219.162)
[08:01:57] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e)
[08:17:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:22:16] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:52:18] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:23:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:54:38] *** Quits: Partmedia (~kevinz@2600:6c40:6400:2f:221:ccff:fe66:4105) (Quit: Partmedia)
[11:08:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:27:27] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[12:13:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:23:40] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:41:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:41:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:54:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:13:59] <mfiano> opopi098[\]
[13:14:02] <mfiano> \\\\
[13:33:04] <artchad> mfiano: I wholeheartedly agree.
[13:37:43] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Remote host closed the connection)
[13:42:28] *** Joins: rito_ (~rito_gh@45.112.243.206)
[13:50:04] *** Joins: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857)
[13:55:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:59:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:37:30] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:19:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:26:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da)
[15:39:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[15:40:06] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[16:15:54] <edgar-rft> mfiano: feel free to post all your passwords to the channel :-)
[16:21:09] <rotateq> 12345
[16:21:17] <rotateq> oh no, my master password leaked!
[16:21:43] <rotateq> for maximal encryption i always do rot13 TWICE
[16:40:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:50:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716)
[17:14:30] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[17:32:13] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:48:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:04:39] *** Quits: rito_ (~rito_gh@45.112.243.206) (Ping timeout: 256 seconds)
[18:41:36] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:41:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:26:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:42:19] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:45:10] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:46:04] <nij-> What's the problem with Clojure? It seems that some people in the community dislike it. I spent a whole afternoon yesterday going through some basics, and would love to learn/discuss why CL or Clojure does better in aspect XYZ.
[19:48:27] <beach> What makes you think there is a problem with Clojure?
[19:49:33] <nij-> There might not be. It just seems that some people here have opinions on it, and I'd love to learn about it.
[19:49:59] <beach> Maybe #lisp would be a better channel for that. 
[19:50:16] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59)
[19:50:34] <nij-> Ah, that's a nice advice. Thanks!
[19:52:57] <beach> Different languages support different programming paradigms.  Not everybody like every programming paradigm.  Not everybody writes code that fits nicely into a particular programming paradigm.  I suspect Clojure and Common Lisp are hard to compare, given that they support different programming paradigms. 
[19:54:48] <nij-> I see.
[19:55:38] <nij-> Can I ask why don't people use persistant data type in CL by default here?
[19:56:21] <beach> So you are saying "Why don't people use Common Lisp as if it were a functional programming language?"?
[19:56:33] <nij-> Yes, something like that.
[19:57:18] <beach> Maybe because it's kind of incompatible with the main idea of object-oriented programming, which is that object identity is important.
[19:58:45] <nij-> I see, it's about OO philosophy.
[19:59:07] <beach> Imagine "nij" is an object that represents you, and that object is contained in two different containers, say the set of people who participate in #clschool, and the set of people who ask strange questions.  
[19:59:13] <nij-> I have read a bit about DOD and FP yesterday, and are overwhelmed. As a result, I'd like to know why OO is better in some scenario.
[19:59:28] <beach> Now imagine that "nij" decides to move, so we need to update the address of that object.
[19:59:46] <rotateq> beach: Strange questions :)
[19:59:53] *** Joins: Partmedia (~kevinz@2600:6c40:6400:2f:221:ccff:fe66:4105)
[20:00:05] <nij-> (That's an acurate description :D)
[20:00:18] <beach> In a programming paradigm where object identity is important, we just have to find "nij" in one of the containers, and update the object there.
[20:00:51] <beach> In functional programming, we have to find "nij" in every container, and create a new nij in each one, and also create two new containers.
[20:01:40] <nij->   My impression is that they do it by seperating "nij" and the slot-values of "nij".
[20:01:59] <nij-> Then, they only need to create a new copy of the slot-values, and have "nij" point to that newly created piece of data.
[20:02:18] <beach> You can't alter nij to point to anything new in functional programming.
[20:02:19] <nij-> Now, it used to seem to me that it's inefficient - Why bother creating a new piece of data everytime, after all?
[20:02:45] <nij-> But it seems that they found out a way to do it efficiently.
[20:02:46] <rotateq> It's about the paradigm.
[20:02:51] <beach> So you have to make sure your new mapping is used everywhere in the future.
[20:03:39] <beach> nij-: It is not only about performance.  It is also about the style of programming that it requires, as I think rotateq is pointing out.
[20:03:51] <nij-> beach: At least in Clojure they do makes "nij" pointing to a new piece of data.
[20:04:07] <nij-> I see.
[20:04:35] <rotateq> Yes, in a great video with Brian Beckman he says it also clearly "Once you've created data, that's it and for all."
[20:04:36] <beach> I don't know Clojure, so I can't comment on that.  Maybe Clojure is not purely functional.  I was commenting more on persistent data structures. 
[20:04:39] <nij-> (But that switching of pointer is under the implementation.. so user on the surface cannot change that.)
[20:05:09] <beach> nij-: That would be very strange then.
[20:05:30] <beach> nij-: Because you would expect that if you look at "nij" in that other container, it would not have its address altered.
[20:05:54] <beach> nij-: But what you are saying is that it would.  And that's contrary to the idea of persistent data structures and functional programming.
[20:06:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:06:20] <nij-> The slide on 25:32 VS the slide on 25:33 - https://www.youtube.com/watch?v=7mbcYxHO0nM
[20:07:06] <beach> I am not sufficiently interested. 
[20:07:24] <nij-> No problem. I will keep what you said in mind. Thanks :)
[20:07:33] <beach> Pleasure. 
[20:07:54] <beach> Personally, I can't imagine programming without CLOS or something very similar to it.
[20:08:30] <beach> I don't know whether Clojure has something similar, but people might choose to avoid languages that don't have it for similar reasons. 
[20:09:33] <beach> I also can't imagine programming in a language without a condition system similar to that of Common Lisp.  Again, I don't know whether Clojure has that.  The only other language I know that does is Multics PL/I.
[20:10:25] <nij-> Yeah, these two points are killer features of CL. I do feel a bit shaky.
[20:10:47] <nij-> Also, Clojure doesn't seem to have a stable spec.. the core team can change whatever they want.
[20:11:31] <rotateq> Two of more of those points.
[20:12:37] <nij-> CLOS, condition system, wonderful and stable spec, less opinionated.. whatelse? rotateq
[20:13:22] <rotateq> More. Explore yourself.
[20:14:51] <nij-> Please don't dodge! (Jk, you do what you want.)
[20:15:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:15:35] <rotateq> Yes I do.
[20:16:10] <nij-> Yeah, I mean, if you really know something that's so great about CL than the three I listed, and would love to share, I'd be grateful.
[20:22:13] <beach> Either way, discussions like that can get kind of boring.  And that's why I don't participate in #lisp.  "Why don't all you that have chosen to program in language X use language Y instead?  Is there anything wrong with language Y?" 
[20:23:48] <rotateq> Yes indeed.
[20:25:58] <beach> "Can I ask why all you C++ programmers don't use garbage collection by default?"
[20:26:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[20:27:12] <nij-> I treat CL as a long-term language and would just like to understand its strengths and weakness. It's fine though that's not of interest. Someone interested can query me to talk about it :)
[20:30:14] <beach> Sure, we can talk about strengths and weaknesses if you like.
[20:31:12] <rotateq> beach: I remember some of those other rude entities, come in first time and immediately asking "Is the hyperspec the best possible?"
[20:31:14] <beach> But those are going to be relative to what people want to do.
[20:31:38] <beach> rotateq: Yes, we get stuff like that regularly.
[20:32:00] <nij-> A simple answer is: No. And awesome people are improving it :)
[20:33:50] <beach> nij-: Here is a weakness, not of the language itself, but of basically all the FLOSS implementations of it: the state of debugging is really dismal, and what people call a "debugger" is laughable, even in comparison with GDB.
[20:34:38] <vegai> given how common lisp predates clojure by 23 years, perhaps you should ask yourself why it was even made? :)
[20:35:00] <rotateq> vegai: And is mostly complete enslaved by Java.
[20:35:07] <beach> vegai: "it"?
[20:35:53] <vegai> beach: yes, why was common lisp created when clojure was going to be created 23 years later
[20:36:01] *** Joins: shka (~herr@109.231.0.226)
[20:36:27] <beach> Anyway, time to go fix dinner for my (admittedly small) family.  I'll be back tomorrow.
[20:36:45] <nij-> beach have a good night!
[20:38:04] <nij-> rotateq: Enslaved by Java? What do you mean?
[20:38:36] <nij-> vegai: I guess the purpose of the creation of CL was different.
[20:38:54] <nij-> I don't really see that there's a why between the creations of the two.
[20:50:33] <CodeBitCookie[m]> Hello Everyone!
[20:50:45] <CodeBitCookie[m]> I have a 2D Array and want to push some elements to it.
[20:51:06] <CodeBitCookie[m]> ARR = #2A((R G B) (R G B) (R G B) (R G B) (R G B))
[20:51:25] <CodeBitCookie[m]> ELEM = '(255 255 255)
[20:51:50] <CodeBitCookie[m]> Running `(push '((255 255 255)) *tmp*)` gives out:
[20:52:04] <CodeBitCookie[m]> s/(//, s/)//
[20:52:11] <CodeBitCookie[m]> ((255 255 255) . #2A((R G B) (R G B) (R G B) (R G B) (R G B)))
[20:52:21] <CodeBitCookie[m]> s/((255 255 255) . #2A((R G B) (R G B) (R G B) (R G B) (R G B)))/``((255 255 255) . #2A((R G B) (R G B) (R G B) (R G B) (R G B)))``/
[20:52:28] <CodeBitCookie[m]> While I wanted:
[20:53:02] <CodeBitCookie[m]> ``#2A((R G B) (R G B) (R G B) (R G B) (R G B) (255 255 255))``
[20:53:19] <CodeBitCookie[m]> I can't use `vector-push` since I don't have a vector.
[21:02:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:04:14] <rotateq> hi CodeBitCookie[m] 
[21:04:36] <CodeBitCookie[m]> hirotateq 
[21:04:50] <rotateq> right, so you answered your question yourself ;)
[21:06:05] <CodeBitCookie[m]> rotateq: no?
[21:06:34] <CodeBitCookie[m]> I mean, I still don't have a solution.
[21:06:39] <rotateq> oh noez
[21:06:59] <CodeBitCookie[m]> What?
[21:07:05] <rotateq> so pushing to a fixed size vector or an adjustable one?
[21:08:20] <CodeBitCookie[m]> I don't have a vector. I have a 2D Array (atleast as far as I can tell), but that is adjustable.
[21:08:52] <rotateq> I didn't ask what you have, but what you more specifically want.
[21:10:07] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#clschool)
[21:14:39] <CodeBitCookie[m]> I want to push to a adjustable 2d vector.
[21:14:45] <CodeBitCookie[m]> an*
[21:23:59] <lisp123> CodeBitCookie[m]: Read in detail 
[21:24:06] <lisp123> https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node157.html
[21:24:26] <lisp123> Will cover everything, but its a topic that requires full reading vs. a quick solution IMHO
[21:30:55] <rotateq> there is no 2D vector
[21:31:31] <rotateq> how about using a vector of vectors and then coercing?
[21:37:14] *** Joins: makomo (~makomo@user/makomo)
[21:49:02] <CodeBitCookie[m]> yeah, that was my mistake 
[21:49:03] <CodeBitCookie[m]> I meant array
[21:49:03] <CodeBitCookie[m]> also, I see the coercing.
[21:49:04] <CodeBitCookie[m]> makes sense.
[21:49:17] <CodeBitCookie[m]> will try
[21:54:22] *** Joins: rito_ (~rito_gh@45.112.243.149)
[22:06:11] <rotateq> and do you know how to give the type declaration for a 2D simple-array?
[22:12:48] <CodeBitCookie[m]> no
[22:13:08] <rotateq> so then, doing some homework ^^
[22:13:14] <CodeBitCookie[m]> There are some internet issues here.
[22:13:19] <rotateq> (simple-array * (* *))
[22:13:34] <CodeBitCookie[m]> so my replies are late
[22:13:41] <rotateq> it's ok
[22:14:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:19:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:23:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[22:24:37] *** Quits: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857) (Ping timeout: 240 seconds)
[22:37:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[22:41:31] *** Joins: Oladon (~olad@98.43.81.226)
[23:26:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:32:13] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[23:32:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:48:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:48:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:51:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:56:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
