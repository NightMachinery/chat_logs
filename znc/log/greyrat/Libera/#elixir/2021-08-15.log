[00:07:48] *** Joins: Sgeo (~Sgeo@user/sgeo)
[00:09:58] <nickjj> josevalim, i like it, because it feels like it would replace the assign_defaults/x pattern you might have before
[00:18:37] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:20:35] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[00:36:15] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:36:26] *** Joins: livoreno (~livoreno@user/notzmv)
[00:36:35] *** Quits: rhn_mk1 (~rhn@user/rhn) (Ping timeout: 258 seconds)
[00:48:16] *** Joins: wonko (~wjc@62.115.229.50)
[00:59:10] *** Quits: natrys (~natrys@user/natrys) (Quit: natrys)
[01:01:12] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[01:40:17] *** Joins: [deleted] (~livoreno@user/notzmv)
[01:43:40] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 258 seconds)
[01:44:06] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[02:02:58] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 268 seconds)
[02:06:02] *** Quits: Guest36 (~Guest36@p200300c8cf2276009739e07be2ed963e.dip0.t-ipconnect.de) (Quit: Client closed)
[02:22:37] *** Quits: Celeo (~Celeo@user/celeo) (Ping timeout: 245 seconds)
[02:26:09] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[02:26:27] *** Joins: livoreno (~livoreno@user/notzmv)
[02:30:42] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[02:33:04] *** Joins: hendursa1 (~weechat@user/hendursaga)
[02:46:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:47:44] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[03:02:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[03:03:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:18:01] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[03:29:02] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[03:37:57] *** Joins: [deleted] (~livoreno@user/notzmv)
[03:40:01] *** Joins: Celeo (~Celeo@user/celeo)
[03:40:10] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[03:44:39] *** Joins: ur5us_ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4)
[04:04:06] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:04:25] *** Joins: livoreno (~livoreno@user/notzmv)
[04:52:56] *** Joins: james_lavin (~jameslavi@66.189.71.2)
[05:08:14] *** Quits: ur5us_ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4) (Ping timeout: 252 seconds)
[05:17:29] *** Quits: james_lavin (~jameslavi@66.189.71.2) (Ping timeout: 248 seconds)
[05:21:11] *** Joins: james_lavin (~jameslavi@66.189.71.2)
[06:14:35] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[06:42:13] *** Joins: mhmd (~mhmd@37.48.90.208)
[07:00:56] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[07:01:02] *** Joins: maruchan (~maruchan@2400:4050:2843:8200:2ef0:5dff:fe5c:ebaa)
[07:25:29] *** Quits: james_lavin (~jameslavi@66.189.71.2) (Ping timeout: 248 seconds)
[08:09:21] *** Joins: james_lavin (~jameslavi@66.189.71.2)
[08:40:58] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:44:25] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[09:03:38] *** Quits: james_lavin (~jameslavi@66.189.71.2) (Ping timeout: 252 seconds)
[10:13:11] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[10:13:30] *** Joins: livoreno (~livoreno@user/notzmv)
[10:13:33] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[10:24:59] *** Joins: notzmv (~zmv@user/notzmv)
[11:14:39] *** Joins: rhn_mk1 (~rhn@user/rhn)
[12:09:23] *** Joins: ur5us_ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4)
[12:13:35] *** Joins: [deleted] (~livoreno@user/notzmv)
[12:13:53] *** Joins: wonko (~wjc@62.115.229.50)
[12:17:47] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[12:35:44] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:45] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[12:38:04] *** Joins: livoreno (~livoreno@user/notzmv)
[12:38:18] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:33] *** Joins: ur5us (~ur5us@203.86.198.200)
[12:40:53] *** Quits: ur5us_ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4) (Read error: Connection reset by peer)
[12:44:32] *** Quits: mahmutov (~mahmutov@176.30.235.57) (Ping timeout: 258 seconds)
[12:52:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:52:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:05:45] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 248 seconds)
[13:09:53] *** Joins: ur5us (~ur5us@203.86.198.200)
[13:13:26] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[13:16:05] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 252 seconds)
[13:17:10] *** Joins: [deleted] (~livoreno@user/notzmv)
[13:17:25] *** Joins: ur5us__ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4)
[13:20:03] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[13:20:40] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 268 seconds)
[13:26:54] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[13:29:17] *** Quits: ur5us__ (~ur5us@2406:e002:6b40:5201:1e1c:afed:873a:e5e4) (Ping timeout: 245 seconds)
[13:31:25] *** Joins: ur5us__ (~ur5us@203.86.198.200)
[13:32:20] *** Quits: Liquid_X (~lx@37.221.104.65) (Ping timeout: 272 seconds)
[13:34:48] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 272 seconds)
[13:37:12] *** Quits: amk (~amk@176.61.106.150) (Remote host closed the connection)
[13:39:43] *** Joins: amk (~amk@176.61.106.150)
[13:40:34] *** Quits: ur5us__ (~ur5us@203.86.198.200) (Ping timeout: 272 seconds)
[13:41:02] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 268 seconds)
[13:52:51] *** Joins: natrys (~natrys@user/natrys)
[13:55:23] *** Joins: Kliu (~Kliu@95.81.239.67)
[13:55:47] *** Parts: Kliu (~Kliu@95.81.239.67) ()
[14:01:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:08:29] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[14:08:48] *** Joins: livoreno (~livoreno@user/notzmv)
[14:11:53] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[14:38:29] *** Joins: phaleth (~phaleth@user/phaleth)
[15:32:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[15:33:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:50:08] *** Joins: mouseghost (~draco@user/mouseghost)
[16:44:27] *** Joins: kwmiebach (sid16855@id-16855.tinside.irccloud.com)
[16:53:46] <kwmiebach> Hello. I am starting with phoenix (postgres backend) and elixir and I am looking for a docker compose to start development quickly. Is there an official docker-compose file for this, or what is everybody using? I found several results after a quick search, but some are older, and none of them seem "official" or standard. So where should I go? I have done some elixir development before and I have experience with docker, other 
[16:53:46] <kwmiebach> frameworks and other languages  and I am looking for the fast lane entry point to get a standard phoenix  development environment quickly.  Deployment is not important at this point. What could I use? 
[16:56:55] <kwmiebach> For other stacks it is quite easy, django: https://docs.docker.com/samples/django/ rails: https://docs.docker.com/samples/rails/ but for phoenix it is a little ambigous.
[16:57:22] <rawtaz> i use my own
[16:57:30] <rawtaz> there *are* phoenix images out there though
[16:58:09] <rawtaz> kwmiebach: there's an official elixir image at least, so you really just need phoenix on top of that (with npm as well)
[16:59:20] <rawtaz> here's the core part of mine: http://pastie.org/p/47hgqLVxbAA5ejxEoexNsA
[17:00:32] <kwmiebach> of course, the problem is not that I would not  find anything, but it is not easy to choose so I am trying to avoid trying out all of them. thank you, wil spin that up :) still open for other suggestions :-) thanks
[17:02:29] <rawtaz> i had that problem too, and ended up making my own since even those that were published and was supposed to be directly usable lacked something for me
[17:03:48] <kwmiebach> I will try :-) this helps!
[17:04:24] <rawtaz> nice
[17:24:38] *** Joins: mahmutov (~mahmutov@176.30.235.57)
[18:10:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:10:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:10:55] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[18:14:57] <Zarathu> josevalim: haha no, i did it but looked at the before/after and it just looked silly. didn't want to bug you with it
[18:15:54] <Zarathu> the only line this would have affected was tag.ex:286. the string literal on line 282 would have still been present
[19:09:46] <rhn_mk1> I'm reading through the supervisor doc and can't find which way corresponds to the way my module is specified. looking at https://hexdocs.pm/elixir/Supervisor.html#module-child-specification
[19:10:22] <rhn_mk1> but I have a line that doesn't match any formats    children = [     {Plug.Cowboy, scheme: :http, plug: Foo, options: [port: 4001]},
[19:11:06] <rhn_mk1> does it actually match the example below? {Stack, [:hello]}
[19:13:57] <rhn_mk1> what is the type of the {} construct here anyway? it looks like a map and a list :S
[19:15:12] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.2)
[19:25:53] <Nicd> rhn_mk1: it's a tuple
[19:26:12] <Nicd> that is equivalent to `{Plug.Cowboy, [scheme: :http, plug: Foo, options: [port: 4001]]}`
[19:30:30] <rhn_mk1> thanks, that's confusing :P
[19:31:36] <rhn_mk1> it still doesn't seem to match the tuple child specification: the example was {module, list}, and here we have {module, map}
[19:31:46] <Nicd> that is a list
[19:31:48] <Nicd> it's a keyword list
[19:31:52] <Nicd> maps are `%{}`
[19:34:21] <rhn_mk1> is [foo: nil] meaningfully different than [:foo]?
[19:38:00] <Nicd> yes
[19:38:36] <Nicd> `[foo: nil]` is sugar for `[{:foo, nil}]` and you can see how it is different
[19:39:34] <rhn_mk1> thanks, now I get the part that I missed: keyword list is a list, not the other way around
[19:47:32] <rhn_mk1> what interface does a module need to implement to be startable as a child of a Supervisor? Agent?
[19:51:55] <rhn_mk1> I'll just read this first https://elixir-lang.org/getting-started/mix-otp/agent.html
[19:55:22] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[19:55:38] *** herme5 is now known as el_kevino
[20:19:40] <rhn_mk1> the :start key in the child specification seems to be called in the child process context, does it ever need to exit?
[20:21:00] <Nicd> if the process fails to start, sure
[20:23:46] <rhn_mk1> now I found that Genserver.start_link/3 returns {:ok, pid} if successful
[20:44:15] *** Joins: wonko (~wjc@62.115.229.50)
[21:40:47] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[21:42:41] <rhn_mk1> what do :gen and :gen_server refer to in this file? https://github.com/elixir-lang/elixir/blob/v1.12.2/lib/elixir/lib/gen_server.ex#L915
[21:47:32] <phaleth> rhn_mk1: erlang module
[21:49:05] <rhn_mk1> how do I go about finding it?
[21:50:09] <rhn_mk1> never mind, that's not the knowledge I need right now anyway
[21:52:43] *** Joins: mahmutov_ (~mahmutov@5.176.62.14)
[21:52:43] <phaleth> rhn_mk1: if you don't mind me asking, what are you trying to do?
[21:53:50] <rhn_mk1> run a process that can receive in a loop
[21:55:09] <rhn_mk1> on a higher level, populate a queue with an async call, and then flush it periodically
[21:56:13] *** Quits: mahmutov (~mahmutov@176.30.235.57) (Ping timeout: 268 seconds)
[21:56:13] <Nicd> you probably want to build on GenServer
[21:56:35] <Nicd> that's the most basic abstraction over a process with a message loop and implements things for you
[21:57:13] <Nicd> also there is a :queue module in Erlang if you need it
[21:57:26] <rhn_mk1> calls to it seem to be blocking though, and that's specifically where I see the value of having a separate process
[21:58:28] <Nicd> which you can implement with GenServer, but blocking is not always bad
[21:58:52] <Nicd> what will you do with this queue?
[21:59:33] <rhn_mk1> send to a logger, and this time I don't care if 100% messages go through
[21:59:54] <rhn_mk1> okay, genserver.cast/2 seems to be non-blocking
[22:00:34] <rhn_mk1> that's a good sign, but I think I'm close enough now that I want to see if I can send messages directly using the process API
[22:01:07] <Nicd> sure, usually you use at least GenServer
[22:01:46] <Nicd> the problem with async things is that you can overwhelm the server's mailbox
[22:01:58] <Nicd> just accumulating messages until you run out of memory
[22:02:36] <rhn_mk1> what happens then?
[22:02:44] <Nicd> OOM killer happens then :)
[22:02:49] <Nicd> depending on your OS
[22:03:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:04:04] <rhn_mk1> I was hoping for something less drastic, but I hope I'm not going to have to deal with so much spam...
[22:04:34] <rhn_mk1> is a Beam process mapped to an OS process?
[22:04:40] <Nicd> it's a single OS process
[22:05:12] <Nicd> processes can have memory limits inside BEAM too but I don't know much about it and it's really kind of a wrong solution for it
[22:05:58] <rhn_mk1> what is a better solution? It's hard to guarantee never exceeding memory limits if the system logs anything from an untrusted source
[22:06:32] <Nicd> I'm not really knowledgeable enough there. I think Logger already has solutions for dealing with too much logging
[22:22:35] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[22:26:18] <rhn_mk1> okay, I managed to spawn my process using the low-level API, and it's hopefuly supervised throughout. That took longer than expected, but seems to work
[22:28:03] <rhn_mk1> now I wonder what added value is provided by GenServer, seeing that it'd be about the same complexity
[22:45:36] <Nicd> child spec written for you, cast/call/info callbacks based on message type, timeout for call, state handling without needing to call loop yourself again, continue instructions (like continue after init), triggering a call after X time of inactivity...
[22:49:33] <rhn_mk1> debugging and hot reload sound nice too
[22:55:30] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 240 seconds)
[22:59:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[23:20:29] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[23:48:57] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[23:55:10] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[23:59:47] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[23:59:53] *** Joins: [deleted] (~livoreno@user/notzmv)
