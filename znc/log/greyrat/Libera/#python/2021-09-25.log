[00:00:38] <briian> energizer: i guess this means your stuff isnt public?
[00:01:11] <energizer> briian: nothing public comes to mind at the moment
[00:02:01] <briian> energizer: I don't see anything in the docs about the class based approach you were talking about, unless I'm just thinking about it wrong
[00:02:28] *** Joins: schumaml (~schumaml@p200300e2ef24b00053c1821a43d17d29.dip0.t-ipconnect.de)
[00:02:41] <briian> also if you have no click decorators in your main.py/cli.py filethen how do the individual modules get the arguments?
[00:02:52] <energizer> briian: not many people know about it
[00:02:52] <briian> s/modules/commands
[00:02:55] <grym> dman777: read that as "botocore requires at least python 3.5
[00:03:17] <energizer> briian: click.Command takes a callback= argument
[00:03:27] <grym> dman777: here's a version-compatible urllib3, see how they explicitly forbid 3.4 https://github.com/urllib3/urllib3/blob/9b95f29c575d73260ec4f5a8c0ea368cf242019e/setup.py#L85
[00:03:42] *** Joins: brelod (~me@90.244.150.142)
[00:03:55] *** Quits: brelod (~me@90.244.150.142) (Client Quit)
[00:04:08] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Ping timeout: 265 seconds)
[00:04:14] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 246 seconds)
[00:04:22] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[00:04:42] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[00:05:26] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[00:05:34] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:42a3:269c:f65f:2571)
[00:07:04] *** Quits: yaalon_ (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[00:10:08] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[00:12:35] *** Quits: nomic2 (~nomic@185.192.69.192) (Quit: Leaving)
[00:12:51] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[00:13:49] *** Joins: DeltaWhy (~deltawhy@user/deltawhy)
[00:13:58] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[00:14:00] *** Joins: nomic (~nomic@185.192.69.192)
[00:14:58] <briian> energizer: I'm not sure we have any interest in getting away from the decorator approach
[00:15:39] <DeltaWhy> hi all, my CI build broke due to setuptools 58 removing 2to3 support. I added a version requirement to my build-requires but 'poetry install' ignores it. what's the proper way to install build requirements from a script?
[00:15:45] <energizer> briian: well i'm not selling anything so i don't mind
[00:15:46] *** Quits: y1n (~y1n@178.115.79.56.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[00:16:03] <grym> briian: there's still wisdom in cli.py that is as utterly hollow as possible, though
[00:16:11] <grym> _vastly_ easier to test, for a start
[00:16:15] <DeltaWhy> 2to3 is used by a dependency, not my package
[00:16:38] <grym> and, as i have come to discover, it means that bolting a webapp onto the side of your code is easier since your I/O is well isolated already
[00:16:39] <briian> energizer: I just can't wrap my head around what you're saying and I can't find any documentatiion on it
[00:16:56] <briian> grym: you mean the cli.py that energizer mentioned?
[00:17:01] <grym> briian: yeah.
[00:17:11] <grym> my oxo link is Very Wrong on that front
[00:17:48] <briian> ah I didnt know typer was another cli thing
[00:18:00] <grym> it's click, in a typehinted trenchcoat
[00:18:02] *** Quits: quakeusr (~quakeusr@user/quakeusr) (Remote host closed the connection)
[00:18:16] <grym> annotated trenchcoat?
[00:18:54] <energizer> briian: the decorator vs class thing is just syntax. `@click.command();def foo(): pkg.main.foo()` vs `click.Command('foo', callback=pkg.main.foo)`. The main point is having no logic in cli.py and no click in main.py.
[00:19:25] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:19:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[00:19:56] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[00:20:05] *** Joins: wyclif (~wyclif@user/wyclif)
[00:20:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:20:42] <briian> oh ok cli.py and main.py are different. I thought you were using them interchangeably at first
[00:20:47] <briian> that makes a bit more sense now
[00:21:03] <briian> do you not use click.option/argument at all?
[00:21:29] <energizer> if using classes, i use the classes like click.Option
[00:21:56] *** Quits: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[00:21:59] *** Gustavo6046_ is now known as Gustavo6046
[00:22:53] <energizer> but like i said, the class thing is just the syntax i like, it's not important to the design
[00:23:53] <briian> I wish I understood how that works
[00:23:55] <briian> but alas
[00:24:09] <energizer> it could just as easily be @click.command(); @click.option() def foo(*a,**kw): pkg.main.foo(*a,**kw)
[00:24:25] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[00:24:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:25:02] *** Joins: junktext_ (~junktext@77.247.181.219)
[00:25:06] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[00:25:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:25:14] <energizer> er option goes on top
[00:25:21] <briian> ah ok! that makes way more sense then
[00:25:26] <briian> I was like wtf.. where is this coming from
[00:25:31] <briian> that makes a ton more sense
[00:25:33] <energizer> oh no it doesnt, i forgot
[00:25:35] *** Joins: wyclif (~wyclif@user/wyclif)
[00:25:37] <energizer> anyway whatever
[00:25:42] <briian> oh..
[00:26:17] <briian> but if you have `click.Command('foo', callback=pkg.main.foo); click.Option(...)`
[00:27:10] <briian> idk
[00:27:10] <energizer> the options list goes in params= https://click.palletsprojects.com/en/8.0.x/api/#click.Command
[00:27:30] <briian> ah ok.. now that makes sense
[00:27:39] *** Joins: trace987 (~trace@dynamic-002-247-250-105.2.247.pool.telefonica.de)
[00:27:57] *** Quits: junktext_ (~junktext@77.247.181.219) (Quit: junktext_)
[00:28:15] <briian> so your cli.py has a series of click.Command() and then your main.py or other files have the program logic
[00:28:22] <energizer> yes
[00:28:25] <energizer> that is the main point
[00:28:43] *** Joins: y1n (~y1n@84-115-64-230.wifi.dynamic.surfer.at)
[00:28:45] <briian> gonna give that a shot
[00:28:47] <energizer> but  @click.command(); @click.option() def foo(*a,**kw): pkg.main.foo(*a,**kw) is fine if you like decorators
[00:28:53] <briian> I personally do not
[00:29:03] <briian> but I'm not the only person on the project
[00:29:08] <briian> so might end up with them anywya
[00:29:09] *** Joins: junktext (~junktext@109.201.152.179)
[00:29:30] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[00:29:50] <briian> is the `*a, **kw` approach recommended in click? saw that as well somewhere else, I'd been passing in explicitly which to look for
[00:30:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:31:07] *** Joins: wyclif (~wyclif@user/wyclif)
[00:31:13] <braxas> is there a simpler version of TextIOWrapper that would work with _typeshed.SupportsWrite[str]
[00:31:14] <energizer> briian: *a,**kw only makes sense if you're just forwarding the arguments to the real function in main.py. sometimes it makes sense to do a little cli argument tweaking in a cli.py function
[00:31:20] <braxas> I mean, _typeshed.SupportsWrite[bytes]
[00:31:22] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[00:32:08] <energizer> braxas: not sure what you mean by simpler but how's io.StringIO
[00:32:18] <energizer> or BytesIO
[00:33:01] <energizer> briian: before invoking the real function
[00:34:11] <briian> ah ok gotcha
[00:34:28] <braxas> I want to basically write a function that accepts Union[_typeshed.SupportsWrite[str], _typeshed.SupportsWrite[bytes]], and returns _typeshed.SupportsWrite[str], and then any writes to the returned object should bass through to the supplied object. TextIOWrapper is close, but it uses much more than just write(), I guess actually now thinking about it there is not much I can do about that.
[00:35:57] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[00:36:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:36:36] *** Joins: wyclif (~wyclif@user/wyclif)
[00:38:05] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:39:23] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:46] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[00:39:49] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[00:40:23] *** Quits: nomic (~nomic@185.192.69.192) (Ping timeout: 265 seconds)
[00:40:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:40:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[00:41:10] *** Joins: redrum88 (~redrum88@user/redrum88)
[00:41:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:41:36] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[00:42:06] *** Joins: wyclif (~wyclif@user/wyclif)
[00:42:08] *** Lord_of_Life_ is now known as Lord_of_Life
[00:42:11] *** Joins: rkk1995 (~rkk1995@065-191-011-252.inf.spectrum.com)
[00:42:23] <rkk1995> Hi, does anyone know why these 2 operations return different values
[00:42:46] <rkk1995> ```
[00:42:48] <rkk1995> ```
[00:43:31] <rkk1995> sorry, https://dpaste.com/2FKBTF22V , these 2 statements seem equivalent to me but are returning differnt results
[00:44:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c035:9225:35dc:ef3e)
[00:44:10] *** Quits: junktext (~junktext@109.201.152.179) (Ping timeout: 260 seconds)
[00:44:38] *** Quits: y1n (~y1n@84-115-64-230.wifi.dynamic.surfer.at) (Ping timeout: 260 seconds)
[00:44:38] <dlam> i got a logger logging TWICE in my django app - its annoying,  anyone know how to debug it to find why?!
[00:44:55] <bjs> dlam: probably you added two handlers to the logger
[00:45:07] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[00:45:12] <ChrisWarrick> rkk1995: the assignment might be performed left-to-right, which means that the value of nums[0] is changed first, and then you use it to index into nums
[00:45:15] <KirkMcDonald> rkk1995: The targets of an assignment are evaluated (and assigned to) in order.
[00:45:43] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[00:45:48] *** Joins: rvgate (~rvgate@80-61-80-213.fixed.kpn.net)
[00:46:36] <rkk1995> I thought it does concurrent updates i.e. nums[1], nums[0] = nums[0], nums[1]
[00:46:37] <rkk1995>  gives me the same result as nums[0], nums[1] = nums[1], nums[0]
[00:46:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[00:47:02] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[00:47:05] <KirkMcDonald> rkk1995: Yes, because in that case, the assignment target does not depend on the structure being mutated.
[00:47:06] <phy1729> the right side is evaluated first and then the assignments happen
[00:47:37] *** Joins: wyclif (~wyclif@user/wyclif)
[00:47:52] <KirkMcDonald> rkk1995: But in the case of `nums[nums[0]]`, assigning to nums[0] will change the meaning of the assignment.
[00:48:16] <bjs> rkk1995: think about `d, d["a"] = {}, 42`
[00:48:34] <wodim> rkk1995, that kind of trick is just weird for the sake of weird
[00:49:10] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:50:14] *** Quits: trace987 (~trace@dynamic-002-247-250-105.2.247.pool.telefonica.de) (Ping timeout: 260 seconds)
[00:51:13] *** Quits: stevea (~stevea@user/stevea) (Ping timeout: 250 seconds)
[00:51:33] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-249.hsi5.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[00:52:02] *** Joins: elwisp (~elwisp@178.73.210.32)
[00:52:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:52:40] <stealth_> trick?
[00:53:02] <elwisp> anyone got any good idea of how to parse this: {'ethereum': {'usd': 2970.51}}  which gets fetched from api into only returning the value which iw 2970 in this case?
[00:53:07] *** Joins: wyclif (~wyclif@user/wyclif)
[00:53:17] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 252 seconds)
[00:53:59] *** Joins: trace987 (~trace@dynamic-002-247-250-105.2.247.pool.telefonica.de)
[00:54:11] *** Quits: Akuli (~Akuli@213.216.208.69) (Quit: Leaving)
[00:54:23] <KirkMcDonald> elwisp: I mean if that's a dict, then it's just d['ethereum']['usd']
[00:54:29] <stealth_> elwisp, probably bad but `int(holder['ethereum']['usd'])`
[00:55:03] <elwisp> i think its json
[00:55:09] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[00:55:21] <elwisp> but i am unsure
[00:55:42] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[00:55:43] <KirkMcDonald> elwisp: Is it a string or a dict, though? Because those single quotes make me think you have a dict.
[00:56:46] <elwisp> you are probably right since i use their python library
[00:57:01] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[00:57:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:57:47] *** Quits: rvgate (~rvgate@80-61-80-213.fixed.kpn.net) (Changing host)
[00:57:47] *** Joins: rvgate (~rvgate@user/rvgate)
[00:58:09] <jinsun> elwisp: you can do `type(thing)` to find out what type it is btw
[00:58:10] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[00:58:37] *** Joins: wyclif (~wyclif@user/wyclif)
[00:58:40] <elwisp> its a dict :)
[01:00:57] *** Joins: y1n (~y1n@77.119.216.22.wireless.dyn.drei.com)
[01:00:59] <elwisp> okay, that should simplify it, i was thinking i need to parse json, just need to figure out how to print one item from a dict then
[01:01:26] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 260 seconds)
[01:01:39] *** Quits: trace987 (~trace@dynamic-002-247-250-105.2.247.pool.telefonica.de) (Ping timeout: 265 seconds)
[01:02:03] <FunkyBob> if you're using their python lib to access their API, it would be absurd for it to hand you back JSON strings...
[01:02:48] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[01:02:57] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[01:03:06] *** Joins: et (~et@user/et)
[01:03:24] <elwisp> FunkyBob: i am a total noob, but what you are saying makes sense to me now
[01:03:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:04:09] *** Joins: wyclif (~wyclif@user/wyclif)
[01:06:29] *** Quits: sale (~sale@ypocit.initech.link) (Ping timeout: 252 seconds)
[01:08:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:09:40] *** Joins: wyclif (~wyclif@user/wyclif)
[01:09:46] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[01:10:09] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:12:00] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[01:14:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:14:47] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com)
[01:15:09] *** Joins: wyclif (~wyclif@user/wyclif)
[01:15:37] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[01:15:41] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:17:44] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:42a3:269c:f65f:2571) (Quit: Konversation terminated!)
[01:18:13] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[01:18:14] <ApostleInTriumph> Hello. I've two arrays. second has indices and first has values, which essentially represent some subsample from a larger array. For this subsample, I want to prune away values that has repeating indices. How do I go about?
[01:19:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c035:9225:35dc:ef3e) (Ping timeout: 252 seconds)
[01:19:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:19:44] <ChrisWarrick> ApostleInTriumph: could you show example input and output?
[01:20:35] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[01:20:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:20:56] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[01:22:14] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[01:22:35] *** Joins: ano (~ano@user/ano)
[01:23:00] *** Joins: nomic (~nomic@185.217.117.173)
[01:23:24] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[01:24:26] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:24:41] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[01:24:58] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Read error: Connection reset by peer)
[01:25:14] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 260 seconds)
[01:25:25] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[01:25:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[01:25:47] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[01:25:56] *** Quits: nomic (~nomic@185.217.117.173) (Client Quit)
[01:26:11] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:24] <ApostleInTriumph> ChrisWarrick apparently np.unique returns indices as well, that solved my problem :)
[01:27:40] *** Joins: sale (~sale@ypocit.initech.link)
[01:27:44] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[01:28:04] <ChrisWarrick> great!
[01:29:50] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:30:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[01:30:28] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:30:35] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[01:31:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:31:37] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Remote host closed the connection)
[01:31:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:31:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:32:01] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[01:32:10] *** Joins: zeden (~zeden@user/zeden)
[01:32:33] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:32:45] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[01:32:54] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[01:33:01] *** Joins: ano (~ano@user/ano)
[01:34:23] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:34:24] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[01:36:43] *** Joins: zeromule (~eric@2601:602:8d80:4e50:989c:b980:7a01:58f0)
[01:36:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:37:11] *** Quits: DeadTOm (~deadtom@2001:4b98:dc0:41:216:3eff:fe58:44d0) (Quit: DeadTOm)
[01:37:12] *** Quits: DeltaWhy (~deltawhy@user/deltawhy) (Quit: Leaving)
[01:37:13] *** Joins: wyclif (~wyclif@user/wyclif)
[01:38:13] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[01:38:39] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[01:39:09] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[01:39:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:42:06] *** Joins: fikran (~fikran@user/fikran)
[01:42:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:42:42] *** Joins: wyclif (~wyclif@user/wyclif)
[01:44:09] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[01:44:46] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[01:45:07] *** Joins: tbcr (~tbcr@user/tbcr)
[01:45:55] <zeromule> test
[01:46:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Quit: Leaving)
[01:46:17] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:46:57] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[01:47:00] *** Joins: pycurious (~Adium@user/pycurious)
[01:47:26] <rvgate> zeromule: not sure what you're testing, but i think it worked?
[01:47:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:48:12] *** Joins: wyclif (~wyclif@user/wyclif)
[01:48:14] <zeromule> haha, sorry was just making sure I was authenticated since it had also put me in python-unregistered
[01:49:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:49:45] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[01:49:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[01:50:13] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[01:50:45] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:51:56] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[01:52:10] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:53:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:53:44] *** Joins: wyclif (~wyclif@user/wyclif)
[01:54:53] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:55:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[01:56:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:57:37] *** Joins: nomic (~nomic@185.192.69.180)
[01:58:31] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[01:58:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:58:42] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[01:59:16] *** Joins: wyclif (~wyclif@user/wyclif)
[01:59:43] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[02:02:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 260 seconds)
[02:02:50] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[02:03:23] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[02:03:38] *** Quits: nbao (~nbao@187.20.181.193) (Quit: leaving)
[02:03:43] *** Joins: semeion (~semeion@user/semeion)
[02:04:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:04:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[02:04:46] *** Joins: wyclif (~wyclif@user/wyclif)
[02:09:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:10:17] *** Joins: wender (~Wender@189.37.69.108)
[02:10:18] *** Joins: wyclif (~wyclif@user/wyclif)
[02:11:54] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 260 seconds)
[02:12:05] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[02:12:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:12:58] *** Quits: computeiro (~Wender@189.37.69.108) (Ping timeout: 252 seconds)
[02:13:02] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 252 seconds)
[02:13:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:13:50] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[02:15:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:15:47] *** Joins: wyclif (~wyclif@user/wyclif)
[02:15:53] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:16:04] *** Joins: computeiro (~Wender@189.37.69.108)
[02:16:07] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[02:17:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[02:17:59] *** Quits: wender (~Wender@189.37.69.108) (Ping timeout: 252 seconds)
[02:19:04] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:20:02] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[02:20:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:20:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:20:59] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:21:17] *** Joins: wyclif (~wyclif@user/wyclif)
[02:22:05] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:22:50] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[02:23:16] *** Quits: computeiro (~Wender@189.37.69.108) (Remote host closed the connection)
[02:23:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[02:23:55] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 252 seconds)
[02:24:36] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Client Quit)
[02:25:10] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[02:26:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:26:33] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:26:50] *** Joins: wyclif (~wyclif@user/wyclif)
[02:26:59] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Client Quit)
[02:28:59] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:31:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:32:20] *** Joins: wyclif (~wyclif@user/wyclif)
[02:33:57] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:34:37] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[02:35:21] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[02:37:13] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[02:37:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:37:49] *** Joins: wyclif (~wyclif@user/wyclif)
[02:38:59] *** Quits: ikus060 (~ikus060@96.127.228.230) (Remote host closed the connection)
[02:39:17] *** Joins: ikus060 (~ikus060@96.127.228.230)
[02:39:27] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[02:39:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[02:41:44] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:43:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:44:00] *** Joins: irrgit (~irrgit@192.241.175.183)
[02:44:07] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Ping timeout: 265 seconds)
[02:44:28] <aphysically> https://www.python.org/dev/peps/pep-0597/ uhhhhhhh
[02:44:38] <aphysically> I think I've been doing this wrong maybe
[02:45:04] <aphysically> I'm not sure I'll have to look at my code again and see if there's any places where I really meant to have utf-8
[02:48:57] <gegenschein> interesting, same here. with utf-8 already being the default encoding for .encode()/.decode(), I'd think it's just a short hop to do the same for open().  (https://www.python.org/dev/peps/pep-0597/#prepare-to-change-the-default-encoding-to-utf-8)
[02:49:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:51:47] *** Joins: Wulf (~Wulf@user/wulf)
[02:52:30] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Lost terminal)
[02:54:04] <aphysically> I think utf-8 instead of utf-8-sig is a bit weird
[02:54:56] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[02:55:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:55:38] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:58:21] <gegenschein> aphysically: well I didn't know about -sig, either, but yeah, that makes sense, too. TIL, thanks
[02:58:34] *** Joins: bukata (~lev@93.152.147.68)
[02:58:41] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[02:59:47] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[03:00:00] *** Quits: bukata (~lev@93.152.147.68) (Changing host)
[03:00:00] *** Joins: bukata (~lev@user/bukata)
[03:00:28] *** Quits: bukata (~lev@user/bukata) (Quit: WeeChat 2.3)
[03:01:29] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[03:01:32] *** Joins: cth (~Cthulchu@193.194.107.250)
[03:04:25] <aphysically> I wonder if this means I can crash my text=True run/popen things with nonascii characters on windows
[03:04:27] *** Quits: netrunner (~netrunner@user/netrunner) (Quit: Leaving)
[03:04:46] <grym> aphysically: possibly
[03:04:54] <grym> or non-latin1 anyway
[03:13:49] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[03:16:05] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[03:17:10] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:17:11] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:17:35] <irrgit> Hello, anyone use flower (celery dashboard) API? How can you start a task via its API, I see it says to create a post requests to  localhost:5555/api/task/async-apply/tasks.add but I dont see how to specify the name of the tasks I want to start
[03:17:50] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[03:18:58] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[03:19:08] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[03:19:24] *** Quits: gitly (~gitly@85.255.236.215) (Ping timeout: 265 seconds)
[03:20:05] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:20:16] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[03:20:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:21:23] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:21:28] *** Joins: jazzy (~jaziz@2600:380:8426:9919:5895:c92b:8b8c:8b81)
[03:21:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[03:23:57] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:26:35] *** Joins: ano (~ano@user/ano)
[03:27:28] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[03:28:17] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 246 seconds)
[03:28:48] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:29:13] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:29:15] *** Joins: female_student_4 (~female_st@2a00:23c8:4a8b:6d00:17e:61f5:1b35:8217)
[03:29:58] *** Joins: gitly (~gitly@85.255.236.215)
[03:30:22] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Client Quit)
[03:31:36] *** Quits: nomic (~nomic@185.192.69.180) (Quit: Leaving)
[03:33:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:dca3:d542:e5e:5df)
[03:33:36] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[03:33:48] *** Quits: rkk1995 (~rkk1995@065-191-011-252.inf.spectrum.com) (Quit: Client closed)
[03:34:14] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:35:46] <aphysically> that reminds me I never looked into if I should really be buffering by line instead of the defalt on stuff I read line by line
[03:36:11] *** Quits: schumaml (~schumaml@p200300e2ef24b00053c1821a43d17d29.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[03:36:57] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:37:02] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[03:37:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[03:38:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:38:24] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[03:39:34] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:40:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 260 seconds)
[03:40:32] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:40:33] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[03:41:15] *** Joins: txtsd (~txtsd@user/txtsd)
[03:41:22] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:42:14] <aphysically> (at least from popen)
[03:43:05] *** Joins: korg815 (~korg815@user/korg815)
[03:44:46] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:44:59] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[03:45:21] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Remote host closed the connection)
[03:45:40] *** Joins: int3l (~int3l@78-83-112-86.spectrumnet.bg)
[03:45:43] *** Quits: int3l (~int3l@78-83-112-86.spectrumnet.bg) (Client Quit)
[03:46:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:46:26] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:46:54] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:dca3:d542:e5e:5df) (Quit: Leaving)
[03:47:06] <Celelibi> How do I get the real argv[0]? sys.argv[0] doesn't contain the real value, it contains the full path of the file.
[03:47:15] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[03:49:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:49:33] <grym> Celelibi: that is the real first value
[03:49:36] <Yhg1s> Celelibi: how are you executing Python, and why did you not expect it to be the full path?
[03:49:45] <female_student_4> In your opinion, what is better
[03:49:52] <female_student_4> Coding in OOP or using functions
[03:50:08] <grym> female_student_4: those are far from mutually exclusive; what do you think methods are
[03:50:11] <Celelibi> Yhg1s, because it's in my PATH, I juste type "choice" (the name of the program) and I therefore expect "choice" in argv[0].
[03:50:40] <female_student_4> grym I mean like writing an entire program using functions only as opposed to with classes too
[03:50:57] <grym> female_student_4: OOP and classes are only vaguely related
[03:51:01] <grym> frankly
[03:51:12] <female_student_4> grym What do you mean?
[03:51:26] <grym> female_student_4: python functions are objects, too
[03:51:26] *** Joins: fikran (~fikran@user/fikran)
[03:52:06] <grym> female_student_4: classes are a useful way to organize state.  they are not the be-all and end-all of tools in the toolbox
[03:52:08] <Celelibi> OOP is mostly a way to keep data and related code together.
[03:52:18] <Celelibi> Sometimes it makes a lot of sens to do this. Sometimes, not much.
[03:52:31] <female_student_4> Celelibi When does it not make sense?
[03:52:37] <female_student_4> grym Aaah okay thank you
[03:53:14] <Yhg1s> Celelibi: unfortunately because it's a shebang, Python is executed with the path to the file.
[03:53:41] <Celelibi> female_student_4, for instance see the itertools module. It's mostly a collection of functions. Or classes that you use like function.
[03:55:29] <female_student_4> Aaah okay
[03:55:29] <Celelibi> female_student_4, if you're not conceiving your code as a data structure with operations on it, then it probably should not be a class.
[03:55:42] <Celelibi> Yhg1s, I don't remember having this issue with bash.
[03:55:54] *** Joins: pkx (~pkx@user/pkx)
[03:57:36] <Celelibi> Yhg1s, Hm... my bad, it also happens with bash.
[03:57:50] <female_student_4> Celelibi So, what would you use with just functions instead?
[03:58:24] <grym> female_student_4: a place where i think classes are _great_ are dataclsses
[03:58:38] <grym> .. but i usually write functions in modules to process them
[03:58:41] *** Joins: theprophet (~theprophe@85.114.228.184)
[03:58:49] *** Joins: wyclif (~wyclif@user/wyclif)
[03:58:56] <Celelibi> female_student_4, it depends what you're doing. But sure, if you only have a bunch of algorithms, a collections of functions is fine.
[03:59:03] <Yhg1s> Celelibi: There isn't a cross-platform mechanism for getting at the original argv[0]. On e.g. linux you could use getauxval() from C, but Python doesn't expose it (and it is actualy pretty tricky to correctly interpret it in the face of, for example, relative paths and symlinks)
[03:59:32] <theprophet> can somebody please tell me in simple words for what is this used for?  -->  if __name__ == '__main__':
[03:59:47] <Celelibi> female_student_4, python is not java, ou don't have to put everything into a class. ^^
[03:59:57] <grym> theprophet: when a python file is run, all of its code is run, too.  right?
[04:00:03] <Yhg1s> theprophet: to do something when the .py file is executed, but not when it is imported as a module.
[04:00:10] *** Quits: zeromule (~eric@2601:602:8d80:4e50:989c:b980:7a01:58f0) (Ping timeout: 260 seconds)
[04:00:28] <grym> theprophet: if you have that check at the bottom, the body of the if is only run if you run the file directly, not import it (which runs everything else)
[04:00:30] <theprophet> grym yea
[04:00:53] <Celelibi> Yhg1s, I don't care about being able to do something with the path. I just want to print a message that kinda look like the command that has been used.
[04:00:58] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[04:01:26] <Celelibi> For missing or bad argument: print("usage: %s list of choices")
[04:02:34] <grym> argparse and other tools can do this for you
[04:02:43] <theprophet> so __name__ is the current python file? grym
[04:03:19] <Celelibi> It's such a small tool, I don't think using argparse is useful. This command basically does a random.choice(sys.argv[1:]).
[04:03:25] <grym> theprophet: when imported, yes; when run directly, no (it's the string "__main__" instead)
[04:03:27] <Celelibi> Yhg1s
[04:03:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:03:40] <grym> theprophet: which is why that if statement works
[04:03:42] <Celelibi> It'd just add to the load time.
[04:03:57] *** Joins: wyclif (~wyclif@user/wyclif)
[04:05:51] <theprophet> grym if i import module and i write if __name__ == '__main__':  , i am reffering to imported module, i get that, but why do i do that when i import something? cant i just import and thats it?
[04:05:56] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[04:06:34] <Swayze> *thinking emoji face*
[04:06:52] <grym> theprophet: you can.
[04:06:59] <Celelibi> theprophet, this condition tells apart the case where you run the file from the case where you import the file. That's all.
[04:07:40] *** Joins: nomic (~nomic@185.217.117.173)
[04:09:35] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[04:12:46] *** Leonarbro_ is now known as Leonarbro
[04:12:58] *** Quits: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:42] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[04:14:03] <theprophet> i still dont get it but ok thanks guys
[04:16:41] <theprophet> @grym
[04:17:33] <Repiphany> theprophet: If the file you're importing just has function definitions, then it makes no difference
[04:17:42] *** Quits: nomic (~nomic@185.217.117.173) (Remote host closed the connection)
[04:18:09] <Repiphany> But if there's code that would be run if you run the file directly, but don't want that code to run when importing, that can be done with the "if __name__ == '__main__'" block
[04:18:36] <theprophet> Repiphany https://ibb.co/JFZswXZ can i ask you from this screenshot?
[04:19:13] <Repiphany> Ask what
[04:19:14] <theprophet> Repiphany if my main file is __main__  why do i need to write if __name__ == '__main__': ?
[04:19:32] <grym> because __main__.py is not the string "__main__"
[04:19:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:19:52] <theprophet> it changes?
[04:19:57] <Swayze> let me try :-D
[04:20:38] <Swayze> theprophet: if you write a library and you want to know if your file has been called directly 'python youfile.py' or via an include file you use the if statement
[04:21:07] <Swayze> if has been called directly you might want to output some instructions or initiazle some default state
[04:21:21] <Swayze> and this is how you check your runcontext
[04:22:18] <theprophet> Swayze what is called directly?
[04:22:30] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[04:22:34] *** Joins: zeden (~zeden@user/zeden)
[04:22:47] *** Joins: ub (~Thunderbi@178.165.202.105.wireless.dyn.drei.com)
[04:22:53] <Swayze> executed as the main file
[04:23:16] *** Quits: ubert (~Thunderbi@91.141.79.118.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[04:23:16] *** ub is now known as ubert
[04:23:58] <theprophet> Swayze ok let me ask you this, is my file where i write code __main__ ?  or something else?
[04:24:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580)
[04:24:17] <Swayze> something else
[04:24:26] <Swayze> unless you writing a library file
[04:25:15] <theprophet> Swayze ok i am close to get it now
[04:25:42] <Swayze> just make some files and output __name__ variable
[04:25:54] <theprophet> Swayze wait wait please
[04:26:20] <theprophet> Swayze why do python assing __name__ variable?
[04:26:24] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[04:26:24] <theprophet> does*
[04:26:33] <Swayze> so you can check if your file is being included in another file
[04:26:35] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 250 seconds)
[04:26:35] <Repiphany> theprophet: https://bpa.st/WU2Q
[04:26:37] <Swayze> or being executed as the main file
[04:26:41] <Swayze> lol
[04:29:26] *** Quits: flokuehn (~flokuehn@i5E86B3DF.versanet.de) (Ping timeout: 252 seconds)
[04:30:00] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Quit: hej-hej!)
[04:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:27] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[04:30:32] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[04:31:03] *** Joins: flokuehn (~flokuehn@i577BC6CE.versanet.de)
[04:31:06] <theprophet> fml.. i am stupid ,.. bye.. thank you everybody for your time i wasted :)
[04:31:16] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:31:27] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583) (Ping timeout: 240 seconds)
[04:32:06] *** Joins: ironMoth (~eem@user/eem)
[04:32:23] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[04:34:34] *** Quits: ironMoth (~eem@user/eem) (Client Quit)
[04:34:36] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[04:34:55] *** Joins: ironMoth (~eem@user/eem)
[04:34:55] *** Joins: vlm (~vlm@user/vlm)
[04:35:10] *** Quits: eem (~eem@user/eem) (Ping timeout: 260 seconds)
[04:35:30] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[04:36:06] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[04:36:11] *** Quits: ironMoth (~eem@user/eem) (Client Quit)
[04:36:35] *** Joins: eem (~eem@user/eem)
[04:37:26] *** Quits: eem (~eem@user/eem) (Client Quit)
[04:37:34] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[04:38:22] *** Joins: frost (~frost@59.71.244.36)
[04:38:45] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[04:38:59] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[04:39:30] *** Joins: r3m (~launch@user/r3m)
[04:40:06] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[04:40:18] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[04:40:19] <nedbat> theprophet: when you want to try again, let us know
[04:41:22] <theprophet> nedbat something is confusing me lol :)
[04:42:01] <nedbat> theprophet: do you mean the __name__ thing?
[04:42:41] <theprophet> nedbat yes, partially i know what if __name__ == '__main__': but i am not quite sure for its purporse
[04:42:58] *** Quits: r3m (~launch@user/r3m) (Client Quit)
[04:43:07] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[04:43:17] <Repiphany> theprophet: In my example "a.py" and "b.py" files with circular importing, only one of the `if __name__ == '__main__':` blocks is executed when you run either `python a.py` or `python b.py`
[04:43:18] *** Joins: prime (~prime@173.213.88.248)
[04:43:54] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[04:43:58] <onelegend> wassup boiz
[04:44:14] <theprophet> Repiphany i am sorry that i am wasting your time, but i dont get what you're saying. what is circular importing ?
[04:44:51] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[04:44:52] <Repiphany> a.py has `import b` in it but b.py also has `import a`, so naively you might expect some infinite loop when they both keep reimporting each other
[04:45:40] <theprophet> Repiphany ok i get that now, but how is that connected to if __name__ == '__main__':?
[04:45:42] *** Joins: redrum88_ (~redrum88@user/redrum88)
[04:46:30] <Repiphany> If you run `python a.py`, you actually get two prints with "a.py: {__name__}"
[04:46:51] <Repiphany> Once from the direct execution and once from when b.py imports a again
[04:46:51] <onelegend> python is pretty dang fast nowadays
[04:46:54] <onelegend> best language
[04:47:15] <theprophet> Repiphany let me ask you something
[04:47:21] <Repiphany> Both of those cases have different `__name__`, so the if block is only executed once
[04:49:00] <theprophet> Repiphany look at that screenshot, thank you https://ibb.co/JFZswXZ and tell me, what is  if __name__ == '__main__':
[04:49:01] <theprophet>     MyApp().run() doing there?
[04:49:38] *** Quits: redrum88 (~redrum88@user/redrum88) (Ping timeout: 260 seconds)
[04:49:47] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[04:49:49] *** redrum88_ is now known as redrum88
[04:49:54] <Repiphany> The line "MyApp().run()" will be executed if you run whatever your file is called `python your_file.py`
[04:50:03] <Repiphany> but not if you do `import your_file` in another file
[04:50:22] <nedbat> theprophet: do you understand that there are two ways to run a python file?
[04:50:39] <theprophet> Repiphany ok ok i am getting this now
[04:50:45] <nedbat> theprophet: cool
[04:50:55] <theprophet> nedbat what two ways? wdym?
[04:51:14] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[04:52:02] *** Joins: pycurious (~Adium@user/pycurious)
[04:52:10] <grym> in logging, is there a way to zero-pad %(lineno)?
[04:52:26] <grym> %(lineno)-3d left-aligns but with whitespace
[04:52:53] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[04:52:58] *** Joins: Fiji (~Fiji@user/fiji)
[04:54:02] <InPhase> grym: "The style parameter can be one of ‘%’, ‘{‘ or ‘$’ and determines how the format string will be merged with its data: using one of %-formatting, str.format() or string.Template.'
[04:54:07] <InPhase> grym: So choose str.format
[04:54:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[04:54:12] <InPhase> style='{'
[04:54:14] <theprophet> Repiphany, grym, nedbat . thank you all , much much big thank you.
[04:54:23] <nedbat> theprophet: you can run it directly (python myfile.py) or you can import it (import myfile)
[04:54:24] *** Parts: ErkiS (~opera@85.253.103.121.cable.starman.ee) ()
[04:54:37] <theprophet> nedbat ah yea i know that yes.
[04:55:04] <grym> InPhase: and then use 03d, i suppose?
[04:57:03] <InPhase> grym: Yeah.
[04:57:22] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[04:57:24] <InPhase> grym: I haven't tried it...  But that is my guess.  :)
[04:57:32] <grym> i always get this sort of thing wrong
[04:58:03] <grym> %(lineno)-3d would become {lineno:03d} ?
[04:58:35] <onelegend> robot dogs
[04:59:59] <InPhase> grym: Found in docs:  "For example: a placeholder of {msecs:03d} would format a millisecond value of 4 as 004."
[05:00:40] <aphysically> okay I think I've specified utf-8 everywhere it's needed to fix non-latin1 errors on windows
[05:00:48] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[05:00:54] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 2.8)
[05:01:18] <InPhase> grym: I guess they should call it f-string style instead of str.format style.
[05:01:26] *** Quits: emf (~emf@2620:10d:c090:400::5:38ea) (Quit: emf)
[05:02:08] *** Joins: califax- (~califax@user/califx)
[05:02:13] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[05:03:58] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[05:04:15] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[05:04:39] *** Joins: brabrax (~brabrax@user/brabrax)
[05:05:19] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[05:06:23] *** Joins: r3m (~launch@user/r3m)
[05:06:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:06:39] *** califax- is now known as califax
[05:08:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580) (Quit: Leaving)
[05:08:45] *** Joins: jayjay (~jayjay@2601:18d:a81:a280:35a4:4a07:61:ba3c)
[05:08:59] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580)
[05:09:00] <jayjay> hello can someone help me with python?
[05:09:32] <nedbat> jayjay: just ask
[05:11:07] <jayjay> in this question, we've encoded a message by replacing each letter
[05:11:08] <jayjay> in the alphabet with its base-0 rank. In other words, "A" becomes 0, "B" becomes 1,
[05:11:08] <jayjay> and so forth. Write a <for> loop to translate the message in <message> as a string
[05:11:09] <jayjay> stored in <decoded>.
[05:11:09] <jayjay> """
[05:11:10] <jayjay> letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
[05:11:10] *** litharge sets mode: +q $a:jayjay
[05:11:41] *** litharge sets mode: -q $a:jayjay
[05:11:52] *** Quits: prime (~prime@173.213.88.248) (Quit: and then my friend you die)
[05:12:52] <jayjay> https://bpa.st/RJ6Q
[05:12:59] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[05:15:08] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[05:15:41] <Repiphany> jayjay: What part are you having difficulty with
[05:16:13] <jayjay> writing the code i dont even know where to start
[05:16:55] <Repiphany> Can you write something that takes a single number and gets the corresponding letter
[05:16:56] <pkx> is this your homework?
[05:17:02] <grym> jayjay: i would start by creating a quick way to look up what letter is associated with each number between 0 and 26
[05:17:48] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[05:18:05] <pkx> whoever's telling you to write a for loop for this is doing you a disservice
[05:18:21] <jayjay> it is an intro course haha
[05:18:47] <pkx> try to write code which uses each index in your "code" array to look up an index in the "characters" string
[05:19:50] <grym> pkx: depends how much wheel reinventing you want to do.  There's the python-heavy two-liner answer, certainly
[05:20:39] <grym> but that usually feels fairly mysterious compared with writing the loop out explicitly at least the first few times
[05:20:47] <pkx> fair enough
[05:21:03] <jayjay>  i assume i would write a for loop of sorts https://bpa.st/DZCQ
[05:21:46] <grym> jayjay: you need a way to associate, map, or link A-Z to 0-26, first
[05:22:19] <grym> and python has a data structure that is purpose-built for that task, hint hint
[05:22:32] <jayjay> ord?
[05:22:51] <Repiphany> Except he already has a structure that works defined in the original problem
[05:22:52] <grym> not a bad guess, but that's a function not a data structure
[05:22:54] <Repiphany> they
[05:23:02] <grym> and ord("A") isn't 0
[05:23:42] <grym> (you could subtract 64 off of everything, but that's pretty opaque)
[05:23:48] <Repiphany> jayjay: You've already shown you can index a string to get the character corresponding to that index
[05:23:58] <pkx> jayjay - in writing that for loop, you learned that you can get a character from string by index right?
[05:24:14] <grym> Repiphany: sure you could do it that way too
[05:24:37] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[05:25:20] *** Quits: female_student_4 (~female_st@2a00:23c8:4a8b:6d00:17e:61f5:1b35:8217) (Quit: Client closed)
[05:25:34] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 260 seconds)
[05:25:41] *** Joins: korg815 (~korg815@user/korg815)
[05:25:58] *** Quits: nvz (~user@nvz.farted.online) (Ping timeout: 252 seconds)
[05:26:20] *** Joins: nvz (~user@nvz.farted.online)
[05:27:42] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:30:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:31:01] <jayjay> i just tried a bunch of things but i dont think im understanding this ... sorry im a bit slow apparently
[05:31:11] <jayjay> but i tried .replace
[05:31:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:31:46] *** Joins: Samian (~Sami@user/samian)
[05:32:34] <pkx> are you able to write a loop which iterates over the code array and prints each digit?
[05:33:12] <Repiphany> jayjay: You already have a string with `letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'` in order, so the first character letters[0] == 'A', letters[1] == 'B' and so on
[05:33:21] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[05:34:26] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[05:34:42] <pkx> if you can get that written, just modify it so that each time you print a digit you instead print the result of a lookup in your letters
[05:34:59] <pkx> exactly as Repiphany described
[05:35:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[05:36:03] <Samian> It bugs me that there are so many ways to profile and benchmark python code
[05:36:12] <Samian> now I don't even know what profile and benchmark means
[05:37:07] <Samian> creating visualizations? Stats on how many registers a function used? Total time elapsed for iteration of a loop in the case of a video graphics pipeline?
[05:37:16] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-8db2-22ea-a950-11d1.res6.spectrum.com) (Read error: Connection reset by peer)
[05:37:34] <Samian> converting the instructions to some teraflops per second info?
[05:38:34] *** Quits: ckdCreations (~ckdCreati@147.55.133.129) (Read error: Connection reset by peer)
[05:38:50] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[05:38:58] * Samian googles benchmark vs profile
[05:39:07] <grym> they are terms that describe general techniques
[05:41:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:42:29] *** Joins: srhm (~srhm@user/srhm)
[05:43:52] <Samian> true, but why would a manager tell an engineer to benchmark something without stating with more specificity what that means given that it can mean so many things
[05:44:07] *** Quits: orbi (~KrisPBaco@104-12-38-21.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[05:45:49] <jayjay> thank you guys!
[05:45:58] <Samian> it also frustrating that there are so many tools to benchmark python code.   It's the same anxiety I get when I can't pick which toothpaste to buy because there are 100 options
[05:46:24] <jayjay> https://bpa.st/V4YA this is my next question
[05:46:27] <Samian> https://en.wikipedia.org/wiki/Option_Paralysis
[05:47:26] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[05:48:58] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:48:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[05:50:08] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[05:51:05] <Repiphany> Not like it really matters what tool you choose to use as long as you understand why you're using it in the first place (and can therefore use it effectively)
[05:51:49] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2.1)
[05:51:53] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Client Quit)
[05:53:49] <Samian> Repiphany well there are different flavors.  I was looking at a tool that literally times each line of python code.
[05:53:56] <Samian> By each line there's a time.
[05:54:27] <Repiphany> Is that effective for whatever you're trying to do
[05:54:37] <Samian> maybe. I'll try it tonight
[05:54:48] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:55:16] <Samian> This is my life in a nutshell. Brute force every software tool. THat's honestly 75% of my life in computers since a kid.
[05:55:18] <Samian> brute force
[05:55:21] <Repiphany> Do you care about the execution time of each line or do you care more about the lines that are run 10 million times, it all depends on what you're actually trying to do
[05:55:35] <Repiphany> If you don't know what you're trying to achieve, throwing a million tools at something won't help
[05:56:23] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:57:59] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:58:09] <Samian> Repiphany  I'll explain it
[05:58:26] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[05:58:38] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[05:59:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:59:53] <Samian> nvidia has a visualization tool to show GPU code running: https://imgur.com/a/9hzzXwX.  I want to figure out what cpu code is causing the gaps between the blocks representing gpu running functions ("kernels" as people call it).   Honestly, I first want to rule out that there are such gaps. I'm suspicious of nvidia's profiler. I won't be surprised if the gaps don't really exist. Maybe the gaps are caused the the existence of the profiler itslef
[06:00:17] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: Textual IRC Client: www.textualapp.com)
[06:00:43] <Samian> Repiphany  when I'm suspicious of a lot, then what I'm trying to accomplish turns into a decision tree.
[06:00:46] *** Joins: fikran (~fikran@user/fikran)
[06:02:54] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 260 seconds)
[06:03:39] <Samian> I'm frustrated that none of the books Fluent Python, Learning Python, and Python Tricks discuss benchmarking and profiling in any substantial manner
[06:05:09] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:06:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:07:06] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[06:07:35] <energizer> Samian: i think it's because most people don't know much about performance engineering and aren't comfortable writing about it
[06:09:01] <jayjay> https://bpa.st/V4YA can anyone help with getting me started?
[06:09:32] <energizer> Samian: there are some very interesting things to say about it. i'm no expert myself but i've at least done some reading. perhaps the first thing to ask is "how fast do i need this to be?" and if it is that fast already, just move on to the next thing
[06:10:40] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[06:11:11] <energizer> jayjay: explain how you'd go about doing it in english first
[06:11:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:13:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:14:47] <Samian> energizer well I can't thank you grym, jinsun, SnoopJ , and others enough
[06:15:12] <Samian> it's a cold world outside the walls of this channel. dog eat dog. not many helpers out there
[06:15:36] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[06:16:12] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[06:17:00] <Samian> There seems to be many line-by-line profilers out there. Any in particular you guys trust?
[06:17:00] *** Joins: Fiji_ (~Fiji@user/fiji)
[06:17:19] <Samian> I see this: https://github.com/pyutils/line_profiler
[06:18:40] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[06:18:50] <energizer> Samian: for simple benchmarking (measuring how long an operation takes), use `timeit`. if you need to get more precise than like 10%, there are fancier tools and methods but almost always not worth bothering unless you're doing something really performance sensitive. For profiling (figuring out which parts of an operation are slow/fast), there are two basic types: tracing profilers and sampling profilers.
[06:19:16] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:cdfd:5f34:fd38:89bd)
[06:19:40] <aac> hey. What happens when i want to iterator two equals list? do i need them both, or it suffices, to use only 1?
[06:19:59] <aac> like can i use the same list reading twice (not writing)
[06:20:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:20:25] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[06:20:43] <Samian> energizer  I think I need to time every line
[06:21:02] <InPhase> aac: Equal as in they contain all the same values?
[06:21:04] <energizer> Samian: i'm sure there's some stuff out there about when to choose each type but i dont have a link handy. some of the profilers are probably better than others, but mostly i think people are confused and it's hard to get good advice on this topic.
[06:21:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:21:50] <aac> yes
[06:22:06] <SnoopJ> Samian, would Scalene perhaps address your need? https://github.com/plasma-umass/scalene
[06:22:25] <Samian> hell yess
[06:22:27] <Samian>  thank you
[06:22:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:22:37] <SnoopJ> Note: it's a sampling profiler
[06:22:54] *** Joins: death916 (~death916@user/death916)
[06:23:49] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:9109:bf6f:fcac:be27) (Read error: Connection reset by peer)
[06:25:58] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:26:59] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[06:27:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[06:33:51] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:36:17] *** Quits: jayjay (~jayjay@2601:18d:a81:a280:35a4:4a07:61:ba3c) (Quit: Client closed)
[06:36:49] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[06:38:08] *** Joins: ns123 (~user@68.183.199.2)
[06:38:11] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[06:41:33] *** Joins: xiongxin (~quassel@119.123.100.167)
[06:43:54] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[06:44:00] *** Joins: masta`` (~oyster@80.49.200.59.ipv4.supernova.orange.pl)
[06:44:37] *** Quits: sale (~sale@ypocit.initech.link) (Ping timeout: 252 seconds)
[06:44:44] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Quit: ShinyCyril)
[06:45:52] <theprophet> is there a opposite keyword for a None?
[06:46:15] <phy1729> for what purpose?
[06:46:18] <InPhase> You want an Everything?
[06:46:25] <phy1729> or just   is not None  ?
[06:46:58] <theprophet> yea like everything yes
[06:47:14] <theprophet> for example         if self.title is not None:
[06:47:15] <theprophet>             return self.title
[06:47:34] <theprophet> and now image if you wanted to accept everything.
[06:47:36] <InPhase> theprophet: Everything = not None
[06:47:44] <theprophet> yes
[06:47:48] <theprophet> thats in idea
[06:47:52] <phy1729> So just add C macros to python ... /s
[06:48:03] <theprophet> if theres nothing to deny everything is acceptable i get that
[06:48:37] <theprophet> but i wonder the opposite keyword is there but i dont know?
[06:49:40] <theprophet> phy1729 so /s huh?
[06:49:49] <theprophet> ok thank you
[06:50:34] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[06:50:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:50:47] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[06:52:02] <InPhase> theprophet: https://bpa.st/AIPA
[06:53:47] <theprophet> InPhase yes i get that, thank, my question was something else. but still thank you.
[06:53:57] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:54:38] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[06:57:04] *** Joins: lethu (~lethu@user/lethu)
[07:00:02] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[07:00:50] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:03:19] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:04:54] *** Quits: masta`` (~oyster@80.49.200.59.ipv4.supernova.orange.pl) (Changing host)
[07:04:54] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[07:04:55] <energizer> theprophet: class Anything: def __eq__(self, other): return other is not None
[07:05:13] <energizer> (but probably dont do that)
[07:06:06] <theprophet> i just meand if instead of two keywords there was one word. like anything.
[07:06:13] <theprophet> meant*
[07:06:17] <theprophet> energizer
[07:07:24] <theprophet> energizer since not is not a part of None in general, and both keywords have different meanings.
[07:08:24] <theprophet> energizer and you need to actually use not None in same lane to actually point out ANYTHING , and i was asking if instead of two words there was just 1 word that could do the same.
[07:08:36] <theprophet> same line*
[07:09:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:09:26] <energizer> you can do it in one word if you define a function isanything(x)
[07:09:49] <energizer> i wouldnt bother
[07:10:14] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[07:12:07] <theprophet> @ene
[07:12:16] <theprophet> energizer you said not to, why not?
[07:12:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[07:13:14] <energizer> python has a mantra "There should be one-- and preferably only one --obvious way to do it."
[07:13:38] <energizer> other languages are more favorable to customizing things and messing with syntax etc
[07:13:46] <theprophet> energizer gotcha.
[07:13:51] *** Joins: dre (~dre@2001:8003:c932:c301:91f3:44d0:e7a2:4247)
[07:13:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:14:20] <InPhase> energizer: Which is the most laughably unachieved Python goal.  :)
[07:14:53] <theprophet> InPhase lol thats funny cause its true (oh irony)
[07:14:55] <energizer> InPhase: all languages values are about relative emphasis
[07:15:48] <InPhase> energizer: Well one of Python's strengths is that for such a beginner friendly language, is is remarkably flexible, and there are always multiple ways to do anything in case you aren't satisfied with the first 3 or 4 approaches you find.
[07:16:05] <energizer> compare to lisp or raku where there's a million ways to do anything
[07:16:40] <energizer> golang is more conformist than python tho
[07:16:48] <theprophet> energizer and thats why they are dieing.
[07:16:51] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:18:16] *** Joins: Fiji- (~Fiji@user/fiji)
[07:18:24] <energizer> eh python got successful because someone wrote numpy and scipy in like 2002
[07:18:53] <energizer> s/got successful/exploded/
[07:19:25] <theprophet> energizer , i think guido is sacrafacing goat to SQL everyday. imo.
[07:19:41] <energizer> ?
[07:20:12] <theprophet> energizer well, alot of syntaxes are borrowed from SQL
[07:20:22] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 260 seconds)
[07:20:28] <theprophet> energizer litteraly doing the same thing.
[07:20:33] <energizer> you mean 'is'?
[07:20:40] <theprophet> not only
[07:20:48] <energizer> 'not' too
[07:21:10] <theprophet> for example yes.
[07:21:36] <energizer> https://www.codesections.com/blog/raku-manifesto-3/
[07:22:08] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[07:23:01] <theprophet> i see, ill read the full article later
[07:24:20] <energizer> eh not sure about my numpy claim https://insights.stackoverflow.com/trends?tags=r%2Cpython%2Cpandas%2Cnumpy%2Cdjango%2Cflask
[07:24:44] <energizer> thought i saw some more convincing evidence of that somewhere but i cant find it
[07:24:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[07:25:03] <theprophet> haha
[07:26:27] *** Quits: Pandadub (~Barones@177.132.237.5) (Remote host closed the connection)
[07:28:19] <theprophet> energizer have you ever worked with kivy?
[07:28:23] <energizer> no
[07:28:28] <energizer> never done mobile
[07:28:56] <energizer> but i know beeware exists too
[07:28:57] <theprophet> how long you've been coding in python?
[07:29:13] <dre> I'm actually learning lisp right now lol
[07:29:16] <dre> it's a neat language
[07:29:37] <energizer> theprophet: a bunch of years anyway
[07:29:39] *** Joins: elkclone (~elkclone@user/elkclone)
[07:29:54] <theprophet> do you have apps you developed alone?
[07:30:06] <theprophet> energizer
[07:30:38] <theprophet> web or desktop ?
[07:34:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[07:35:17] *** Joins: wyclif (~wyclif@user/wyclif)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:18] *** Quits: ns123 (~user@68.183.199.2) (Quit: WeeChat 1.9.1)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:31] *** Quits: xiongxin (~quassel@119.123.100.167) (Ping timeout: 252 seconds)
[07:39:13] *** Joins: xiongxin (~quassel@113.116.32.113)
[07:40:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[07:40:44] *** Joins: wyclif (~wyclif@user/wyclif)
[07:45:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[07:45:36] *** Joins: Vonter (~Vonter@user/vonter)
[07:46:14] *** Joins: wyclif (~wyclif@user/wyclif)
[07:46:58] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[07:47:50] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[07:49:44] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 246 seconds)
[07:50:29] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[07:51:03] *** Joins: oldguy (~oldguy@user/oldguy)
[07:51:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[07:51:43] *** Quits: k162 (~k162@user/k162) (Ping timeout: 252 seconds)
[07:51:45] *** Joins: wyclif (~wyclif@user/wyclif)
[07:52:08] *** Joins: Maikel (~Maikel@130.61.63.136)
[07:53:02] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Remote host closed the connection)
[07:53:25] *** Joins: k162 (~k162@user/k162)
[07:53:26] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[07:54:15] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:57:28] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[07:58:15] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[07:58:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:00:09] *** Joins: rsrx (~rsrx@103.225.150.81)
[08:02:39] *** Quits: rsrx (~rsrx@103.225.150.81) (Client Quit)
[08:03:59] *** Quits: Brocker (~NoBody@user/brocker) (Ping timeout: 268 seconds)
[08:04:15] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:08:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[08:10:05] *** Joins: fikran (~fikran@user/fikran)
[08:11:49] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Quit: iogue)
[08:14:12] *** Joins: node1 (~node1@user/node1)
[08:23:39] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:cdfd:5f34:fd38:89bd) (Remote host closed the connection)
[08:25:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:27:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:30:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:31:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580) (Quit: Leaving)
[08:33:02] *** Joins: emf (~emf@2620:10d:c090:400::5:f81e)
[08:34:00] *** Joins: xon (~xon@host-192-net-65-160-119.mobilinkinfinity.net.pk)
[08:34:55] *** Quits: emf (~emf@2620:10d:c090:400::5:f81e) (Client Quit)
[08:35:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[08:35:23] *** Joins: pudup (~pudup@182.237.159.34)
[08:35:25] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:37:40] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:38:28] *** Quits: xon (~xon@host-192-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[08:38:39] *** Joins: Julian (~tos9@python/site-packages/Julian)
[08:39:13] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[08:40:35] *** Joins: manti7 (~manti7@176.10.104.94)
[08:45:28] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[08:46:40] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Quit: leaving)
[08:46:53] *** Joins: Samian (~Sami@user/samian)
[08:47:35] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[08:49:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:50:17] *** Joins: mei (~mei@user/mei)
[08:50:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:52:19] *** Quits: p-i-_ (~Ohmu@223.206.70.53) (Remote host closed the connection)
[08:52:54] *** Quits: LiftLeft (~LiftLeft@172.83.47.124) (Ping timeout: 265 seconds)
[08:52:55] *** Joins: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th)
[08:53:07] *** Parts: cthi (~cthi@097-082-138-151.res.spectrum.com) ()
[08:54:38] *** Quits: jazzy (~jaziz@2600:380:8426:9919:5895:c92b:8b8c:8b81) (Ping timeout: 260 seconds)
[08:55:06] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 260 seconds)
[08:55:38] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 252 seconds)
[08:57:17] *** Quits: porter (~porter@c-73-148-148-8.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[08:57:50] *** Joins: sgn (~sgn@user/sgn)
[09:00:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:02:46] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[09:04:59] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[09:07:01] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[09:07:12] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[09:07:28] *** Quits: Fiji- (~Fiji@user/fiji) (Quit: Leaving)
[09:08:39] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2.1)
[09:09:49] *** Quits: y1n (~y1n@77.119.216.22.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[09:11:16] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[09:12:41] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[09:13:30] *** Joins: jinsun (~quassel@user/jinsun)
[09:15:21] *** Quits: humbertowoody (~humbertow@2806:107e:f:e74:f152:8727:c46a:5272) (Read error: Connection reset by peer)
[09:17:05] *** Joins: humbertowoody (~humbertow@187.202.213.176)
[09:17:05] *** Quits: pudup (~pudup@182.237.159.34) (Read error: Connection reset by peer)
[09:19:39] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:79ae:6d91:1946:70f1) (Read error: Connection reset by peer)
[09:21:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:24:44] <p-i-> Suppose I wish to fire an event at exactly 1 second past the minute every minute.
[09:25:37] <p-i-> Is there a way more accurate than spinning on a loop with sleeps?
[09:27:12] <p-i-> while True: utc = arrow.utcnow() ; f = float(utc.format('ss.SSS')) ; if _f < 1.0 and f >= 1.0: break ; _f=f; sleep(0.001)
[09:28:21] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[09:33:15] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Remote host closed the connection)
[09:33:59] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[09:34:26] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:38:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:39:00] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[09:39:05] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:39:05] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[09:39:13] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Killed (NickServ (GHOST command used by Omega037-B)))
[09:39:39] <az> hi, I've a json file but it starts with something{validjson} is it a python object, and what is the proper way to deal with it?
[09:39:59] <az> so the part before {validjson} isn't valid
[09:40:40] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[09:40:59] <az> it's a python dictionary apparently
[09:42:14] *** Quits: NeoCore (~neocore@37.120.204.132) (Ping timeout: 260 seconds)
[09:42:15] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 260 seconds)
[09:42:40] <energizer> az that's not json or python
[09:43:07] <az> what is that?
[09:43:17] <energizer> can you show it https://bpa.st/
[09:43:27] *** Joins: gggp (~textual@221.219.74.187)
[09:43:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[09:44:39] <az> https://dpaste.org/XoX2
[09:45:01] *** Quits: ska (~ska@user/ska) (Ping timeout: 252 seconds)
[09:45:12] <az> `ergon:qpr3cdjh8jwcpk85gvwyr3999muvsfw2nqmu84rm00` is an address one part
[09:45:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[09:46:34] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:40] *** Quits: humbertowoody (~humbertow@187.202.213.176) (Read error: Connection reset by peer)
[09:47:03] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:47:09] *** Quits: Dotz0cat (~Dotz0cat@h153.248.19.98.static.ip.windstream.net) (Read error: Connection reset by peer)
[09:47:11] *** Joins: seednode (~seednode@user/seednode)
[09:47:13] <energizer> az that looks like a custom format of a ADDRESS COLON JSON_OBJECT
[09:47:42] <az> hmmm
[09:47:54] <az> maybe I should just use striping
[09:48:35] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:48:43] *** Joins: humbertowoody (~humbertow@187.202.213.176)
[09:50:11] *** Joins: Dotz0cat (~Dotz0cat@h234.12.31.71.dynamic.ip.windstream.net)
[09:50:22] <energizer> cut off the first part and json.loads the second part separately
[09:51:38] *** Quits: mei (~mei@user/mei) (Quit: mei)
[09:52:05] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[09:52:23] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:52:42] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[09:53:02] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[09:53:45] *** Joins: node1 (~node1@user/node1)
[09:54:29] *** Quits: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 252 seconds)
[09:55:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[09:56:42] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[09:57:41] *** Joins: ska (~ska@user/ska)
[09:57:43] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[09:57:52] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[09:59:29] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[10:00:59] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:01:52] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:04:35] *** Joins: iogue (~iogue@gateway/tor-sasl/iogue)
[10:06:47] *** Joins: rendar (~rendar@user/rendar)
[10:08:06] *** Joins: kosh (~kosh@user/kosh)
[10:08:56] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:11:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[10:13:44] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[10:14:05] <az> energizer, thanks
[10:16:38] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:17:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:18:27] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[10:19:21] *** Joins: pycode (~pycode@2001:b07:5d28:551:c701:306:bee2:2af6)
[10:19:26] *** Joins: fikran (~fikran@user/fikran)
[10:20:28] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[10:21:54] *** Quits: xiongxin (~quassel@113.116.32.113) (Ping timeout: 260 seconds)
[10:22:20] *** Joins: xiongxin (~quassel@119.123.102.171)
[10:26:00] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:28:35] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[10:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:31:38] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:35:38] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[10:35:57] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:35:58] *** Joins: Abrax (~Abrax@user/abrax)
[10:36:39] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:38:01] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:41:26] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[10:46:05] <iogue> someone recommends a good (and working) python notification script for weechat?
[10:46:51] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[10:47:55] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:47:55] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[10:48:46] *** Joins: califax (~califax@user/califx)
[10:49:11] *** Joins: brabrax (~brabrax@user/brabrax)
[10:49:22] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[10:50:14] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[10:51:24] *** Joins: peterandre (peterandre@2605:6400:c847:1524::4251)
[10:52:07] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[10:53:13] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[11:02:35] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[11:05:35] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[11:07:45] *** Quits: xiongxin (~quassel@119.123.102.171) (Ping timeout: 265 seconds)
[11:09:40] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:80f4:fffe:63e1:6112) (Remote host closed the connection)
[11:10:05] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:2365:e90f:b77d:a1a4)
[11:12:56] *** Joins: schumaml (~schumaml@p200300e2ef2c8a0053c1821a43d17d29.dip0.t-ipconnect.de)
[11:16:08] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:16:25] *** Joins: dolor_avis (~dolor_avi@user-5-173-8-92.play-internet.pl)
[11:16:59] *** Quits: dolor_avis (~dolor_avi@user-5-173-8-92.play-internet.pl) (Remote host closed the connection)
[11:19:29] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[11:20:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:22:41] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[11:23:51] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[11:27:19] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[11:28:51] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Remote host closed the connection)
[11:29:20] *** Joins: iogue (~iogue@gateway/tor-sasl/iogue)
[11:32:41] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 246 seconds)
[11:33:35] *** Joins: ali1234 (~al@user/ali1234)
[11:33:58] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[11:36:44] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[11:37:20] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 252 seconds)
[11:39:15] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Quit: iogue)
[11:39:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:21] *** Joins: xiongxin (~quassel@113.116.32.113)
[11:43:58] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:44:22] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:46:04] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 252 seconds)
[11:48:52] *** Joins: Pickchea (~private@user/pickchea)
[11:51:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:54:38] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[12:01:05] *** Joins: jamer05 (~jamer05@user/jamer05)
[12:02:55] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[12:03:28] *** Joins: eem (~eem@user/eem)
[12:03:32] *** Joins: brelod (~me@90.244.150.142)
[12:05:11] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[12:05:55] *** Quits: baloona (~baloona@mail.baloona.de) (Quit: WeeChat 2.3)
[12:05:56] *** Quits: gggp (~textual@221.219.74.187) (Ping timeout: 252 seconds)
[12:06:12] *** Joins: baloona (~baloona@mail.baloona.de)
[12:07:22] *** Joins: gggp (~textual@60.10.194.42)
[12:11:03] *** Quits: baloona (~baloona@mail.baloona.de) (Remote host closed the connection)
[12:11:19] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:11:50] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:12:00] *** Joins: baloona (~baloona@mail.baloona.de)
[12:13:08] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:15:19] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:23:31] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2.1)
[12:24:16] <Widdershins> https://github.com/mumbleskates/pybullet but they're gone already
[12:26:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:27:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[12:28:45] *** Joins: fikran (~fikran@user/fikran)
[12:29:52] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[12:33:12] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[12:34:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:35:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:35:16] *** Joins: thiras (~thiras@user/thiras)
[12:36:21] *** Joins: besnn (~besnn@user/besnn)
[12:37:16] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[12:37:27] *** Joins: Skyfire (~pyon@user/pyon)
[12:40:35] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[12:42:00] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[12:42:10] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:2365:e90f:b77d:a1a4) (Remote host closed the connection)
[12:42:35] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:1998:b26b:b79c:46bf)
[12:44:01] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:45:14] *** Joins: ns12 (~ns12@user/ns12)
[12:46:43] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[12:47:47] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Client Quit)
[12:48:47] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[12:49:25] *** Joins: pudup (~pudup@42.106.214.94)
[12:49:43] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:50:21] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:50:53] *** Quits: pudup (~pudup@42.106.214.94) (Read error: Connection reset by peer)
[12:52:50] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[12:53:42] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[12:53:43] *** Quits: pycode (~pycode@2001:b07:5d28:551:c701:306:bee2:2af6) (Ping timeout: 252 seconds)
[12:55:35] *** Joins: Adoi (~Adoi@user/adoi)
[12:56:17] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[12:57:53] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:58:14] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:58:54] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Remote host closed the connection)
[13:00:16] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[13:01:07] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:01:23] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[13:02:52] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:24] *** PJBoy is now known as Guest7756
[13:03:24] *** Quits: Guest7756 (~PJBoy@user/pjboy) (Killed (zirconium.libera.chat (Nickname regained by services)))
[13:03:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:04:23] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[13:04:29] *** Joins: dhanesh (~Dhanesh@59.88.162.138)
[13:05:05] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[13:06:24] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[13:08:23] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:08:37] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Client Quit)
[13:08:58] *** Quits: xiongxin (~quassel@113.116.32.113) (Ping timeout: 260 seconds)
[13:09:49] *** Joins: pudup (~pudup@182.237.159.34)
[13:10:01] *** Joins: xiongxin (~quassel@113.116.34.58)
[13:10:13] *** Quits: pudup (~pudup@182.237.159.34) (Quit: Quit)
[13:10:41] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[13:12:22] *** Quits: jpic (~jpic@82.142.3.250) (Ping timeout: 252 seconds)
[13:14:01] *** Joins: jpic (~jpic@82-64-233-31.subs.proxad.net)
[13:22:04] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:26:07] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[13:28:28] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[13:32:10] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:33:44] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Remote host closed the connection)
[13:33:49] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[13:37:14] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:40:47] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[13:41:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:42:44] *** Quits: xiongxin (~quassel@113.116.34.58) (Ping timeout: 252 seconds)
[13:43:06] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[13:43:11] *** Joins: xiongxin (~quassel@113.116.32.113)
[13:45:18] *** Joins: upsala (~zcb@185.213.155.160)
[13:45:29] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[13:48:38] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[13:49:04] *** Joins: mart (~vimart@148.252.132.66)
[13:50:36] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:50:57] *** mart is now known as vimart
[13:51:51] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[13:51:54] *** Quits: xiongxin (~quassel@113.116.32.113) (Ping timeout: 260 seconds)
[13:53:21] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:54:59] *** Quits: schumaml (~schumaml@p200300e2ef2c8a0053c1821a43d17d29.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[13:56:22] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:57:29] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:02:47] *** Joins: georgios (~georgios@user/georgios)
[14:03:31] *** Quits: jpic (~jpic@82-64-233-31.subs.proxad.net) (Ping timeout: 252 seconds)
[14:05:21] *** Joins: jpic (~jpic@82.142.3.250)
[14:09:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:10:09] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:11:08] *** Joins: cth (~Cthulchu@193.194.107.250)
[14:11:32] *** Quits: jamer05 (~jamer05@user/jamer05) (Quit: WeeChat 2.8)
[14:13:10] *** Joins: somlis (~somlis@user/somlis)
[14:14:48] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[14:16:27] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[14:19:11] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[14:19:38] <jinsun> hmm, https://mypy-play.net/?mypy=latest&python=3.10&gist=8b48739543e09a6927f66f534d2e5d6c
[14:20:01] <jinsun> how to make mypy realize that the tuple will have only two items
[14:20:01] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[14:20:36] <jinsun> (I could write two separate loops, but I don't like that)
[14:20:59] *** Joins: Daemonick (~Daemonick@188.4.78.83.dsl.dyn.forthnet.gr)
[14:21:12] *** Joins: somlis (~somlis@user/somlis)
[14:22:02] <Daemonick> in which thesis must I declare a variable as 'global'?
[14:22:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:22:30] <Daemonick> Inside of def or outside of them?
[14:22:39] <bjs> Daemonick: inside the def.
[14:22:43] <nedbat> Daemonick: only inside a function, and only if you assign to the name.
[14:23:06] <Daemonick> thanks guys
[14:24:17] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[14:24:52] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[14:28:01] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:29:18] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[14:31:08] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:31:12] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:31:34] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:33:24] *** Joins: kib (~kib@user/kib)
[14:33:28] *** Joins: cdown (~cdown@89.32.122.5)
[14:35:06] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:35:08] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[14:35:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[14:36:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:36:45] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[14:37:35] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[14:38:05] *** Joins: fikran (~fikran@user/fikran)
[14:38:15] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[14:38:50] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:39:56] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[14:40:29] *** Quits: davor (~davor@user/davor) (Ping timeout: 252 seconds)
[14:41:03] *** Joins: plastico (~plastico@neomutt/plastico)
[14:41:25] *** Joins: davor (~davor@user/davor)
[14:42:40] *** Joins: somlis (~somlis@user/somlis)
[14:42:50] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 265 seconds)
[14:43:28] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[14:44:38] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[14:44:50] *** Joins: sgn (~sgn@user/sgn)
[14:45:09] *** Joins: gggp (~textual@60.10.194.42)
[14:47:38] *** Quits: Makdaam (makdaam@user/makdaam) (Remote host closed the connection)
[14:47:40] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[14:48:11] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[14:48:57] *** Joins: zaquest (~notzaques@5.128.210.178)
[14:49:18] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 260 seconds)
[14:49:49] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[14:51:27] *** Quits: Strom (strom@fedora/strom) ()
[14:52:22] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[14:52:30] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 265 seconds)
[14:52:57] *** Joins: xiongxin (~quassel@113.116.34.58)
[14:53:34] *** Joins: Strom (strom@fedora/strom)
[14:54:26] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[14:55:13] *** Joins: schumaml (~schumaml@p200300e2ef2c8a0053c1821a43d17d29.dip0.t-ipconnect.de)
[14:55:33] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 276 seconds)
[14:55:59] *** Quits: gggp (~textual@60.10.194.42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:56:22] *** Quits: dumbsharka (~amirvince@user/amirvincent64) (Ping timeout: 265 seconds)
[14:56:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:57:06] *** Joins: gggp (~textual@60.10.194.42)
[14:57:49] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:00:12] *** Joins: koziad (~koz@user/koziad/x-1285628)
[15:00:59] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[15:02:29] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[15:03:28] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[15:05:53] *** Joins: gggp (~textual@221.219.74.187)
[15:06:06] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:07:29] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 265 seconds)
[15:08:23] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[15:10:28] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:12:14] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[15:13:31] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:13:54] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:15:00] *** Joins: goldfish (~goldfish@user/goldfish)
[15:15:01] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[15:15:07] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[15:15:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[15:16:22] *** Joins: wyclif (~wyclif@user/wyclif)
[15:19:29] *** Joins: sgn (~sgn@user/sgn)
[15:21:36] *** Joins: audio (~audio@2603-8081-1800-b44d-a5a4-5683-9a21-3df2.res6.spectrum.com)
[15:24:29] *** Joins: ikus060 (~ikus060@96.127.228.230)
[15:26:48] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:27:17] *** audio is now known as audiobirb
[15:28:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:28:13] *** Joins: besnn (~besnn@user/besnn)
[15:28:36] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:28:36] *** Joins: mactron (~mactron@APN-123-242-104-gprs.simobil.net)
[15:28:58] *** Quits: eem (~eem@user/eem) (Ping timeout: 260 seconds)
[15:29:51] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[15:30:00] <OliverUK> What is the point of finally: if you can just put something that isn't part of the try section below it that will run anyway?
[15:30:06] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:30:55] *** Parts: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (The Lounge - https://thelounge.chat)
[15:31:00] *** Joins: y1n (~y1n@178.115.59.197.wireless.dyn.drei.com)
[15:32:44] <The-Compiler> OliverUK: the "finally:" part will always run, even if an exception occurs, or a return
[15:32:46] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[15:33:57] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[15:34:34] *** Quits: audiobirb (~audio@2603-8081-1800-b44d-a5a4-5683-9a21-3df2.res6.spectrum.com) (Ping timeout: 260 seconds)
[15:34:51] *** Joins: KidBeta (~KidBeta@user/kidbeta)
[15:34:52] *** Joins: holgersson (~quassel@user/holgersson)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:47] <The-Compiler> jinsun: https://mypy-play.net/?mypy=latest&python=3.10&gist=123be3d853dd6035828175bc4d51e48d maybe?
[15:38:54] *** Joins: Timrit (~scott@047-012-066-084.res.spectrum.com)
[15:39:48] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[15:40:44] <gitesh> how to check if a string has any alphanumeric characters?
[15:40:56] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:40:58] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:41:04] *** Joins: sale (~sale@ypocit.initech.link)
[15:41:28] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[15:41:36] <The-Compiler> gitesh: any(c.isalnum() for c in s)
[15:42:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:42:57] <gitesh> The-Compiler: ok thanks
[15:43:17] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 264 seconds)
[15:46:34] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[15:48:12] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Client Quit)
[15:48:19] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[15:49:14] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[15:49:47] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:50:50] <jinsun> The-Compiler: oh yes, that works,thanks (dataclass also works if input is tuple and output is dataclass) I don't know why I was avoiding importing namedtuple/dataclass and trying to keep tuples only
[15:52:08] <rendar> i call task.cancel() but its state passes from 'pending' to 'pending' -- is this normal?
[15:52:15] *** Joins: oldguy (~oldguy@user/oldguy)
[15:52:24] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[15:52:32] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 252 seconds)
[15:54:04] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[15:55:00] <OliverUK> The-Compiler: Oh I see, nice, thanks
[15:55:20] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 252 seconds)
[15:55:44] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[15:56:02] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[15:56:52] *** Quits: dre (~dre@2001:8003:c932:c301:91f3:44d0:e7a2:4247) (Ping timeout: 252 seconds)
[15:58:13] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[15:58:24] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:00:07] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[16:01:23] *** Joins: ikus060 (~ikus060@96.127.228.230)
[16:02:06] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[16:02:35] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 265 seconds)
[16:03:04] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[16:05:17] *** Joins: eem (~eem@user/eem)
[16:06:49] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:08:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:08:33] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580)
[16:09:28] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 252 seconds)
[16:10:17] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 264 seconds)
[16:10:25] *** Joins: Axy (~Axy@user/axy)
[16:10:52] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[16:11:26] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[16:11:47] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:14:18] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:14:58] <graingert[m]> <rendar> "i call task.cancel() but its..." <- Is task the current task?
[16:15:13] <graingert[m]> Also the task might catch the CancelledError
[16:15:18] <rendar> nope, it's not
[16:16:29] <rendar> another task i'm cancelling passed from 'pending' to 'cancelling' but not 'cancelled' -- is this because the task to be fully cancelled needs to be run a last time, at the next await?
[16:16:44] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[16:17:34] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:18:00] *** Joins: p-i-_ (~Ohmu@223.206.70.53)
[16:18:22] <graingert[m]> A task needs to terminate for it to be cancelled
[16:18:50] <rendar> graingert[m], so i can't do: task.cancel()  task.exception() right?
[16:20:21] <rendar> graingert[m], i mean, since the task is not fully cancelled yet, i'd get  InvalidStateError  if i call task.exception() just after a cancel, right?
[16:20:27] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Read error: Connection reset by peer)
[16:20:28] *** Quits: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[16:21:05] <graingert> Yeah there's _cancel_and_wait
[16:21:30] <rendar> but that's an internal method..
[16:22:19] <graingert> https://github.com/python/cpython/blob/main/Lib/asyncio/tasks.py#L511
[16:22:24] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[16:22:25] <graingert> Yeah you have to copy it
[16:22:29] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[16:23:02] <rendar> i can't use this
[16:23:07] <rendar> because i need to cancel N tasks
[16:23:16] <rendar> i can't wait a task is fully cancelled
[16:24:36] *** Quits: Timrit (~scott@047-012-066-084.res.spectrum.com) (Quit: WeeChat 2.3)
[16:25:44] *** Joins: nomic2 (~nomic@85.203.36.16)
[16:25:56] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:26:05] *** Joins: node1 (~node1@user/node1)
[16:26:15] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Quit: ShinyCyril)
[16:26:22] *** Quits: nomic2 (~nomic@85.203.36.16) (Client Quit)
[16:28:13] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2c67:53a3:7c94:c580) (Ping timeout: 252 seconds)
[16:28:50] *** Quits: gggp (~textual@221.219.74.187) (Ping timeout: 252 seconds)
[16:29:16] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[16:29:35] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[16:29:49] <gitesh> Is any function like list compression
[16:29:55] *** Joins: kib (~kib@user/kib)
[16:29:56] <gitesh> *comprehension
[16:30:02] *** Joins: sedeki (~textual@user/sedeki)
[16:30:10] *** Joins: chenxuezhao (~chenxuezh@120.244.238.3)
[16:30:37] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[16:31:37] *** Joins: gggp (~textual@60.10.194.42)
[16:33:36] *** Joins: greknod22 (~grek@1.132.106.182)
[16:33:57] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[16:34:12] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:34:17] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 264 seconds)
[16:34:53] *** Quits: greknod2 (~grek@ppp121-45-140-199.bri-pow-que-bras31.tpg.internode.on.net) (Ping timeout: 252 seconds)
[16:34:53] *** greknod22 is now known as greknod2
[16:35:14] *** Quits: greknod2 (~grek@1.132.106.182) (Read error: Connection reset by peer)
[16:35:42] *** Quits: pkx (~pkx@user/pkx) (Ping timeout: 260 seconds)
[16:36:01] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[16:36:02] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 268 seconds)
[16:37:31] *** Joins: greknod2 (~grek@ppp121-45-128-151.bri-pow-que-bras31.tpg.internode.on.net)
[16:38:44] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[16:38:58] *** Joins: nomic (~nomic@85.203.36.16)
[16:39:41] *** Quits: nomic (~nomic@85.203.36.16) (Client Quit)
[16:39:53] *** Joins: ikus060 (~ikus060@96.127.228.230)
[16:39:55] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[16:45:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:45:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:46:00] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:46:11] *** Quits: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[16:47:25] *** Joins: fikran (~fikran@user/fikran)
[16:50:15] <jinsun> gitesh: map? `list(map(func, iterable))` is same as `[func(x) for x in iterable]`
[16:50:36] *** Joins: fassl (~fassl@2a02:8388:1987:9380:f065:d411:4557:ccdf)
[16:50:43] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[16:50:59] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:51:23] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:52:33] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:55:38] *** Joins: fanis30 (~fanis30@adsl-213.37.6.3.tellas.gr)
[16:55:45] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[16:55:52] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[16:56:04] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Quit: Leaving)
[16:56:23] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[16:58:13] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[16:58:44] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Client Quit)
[17:01:12] *** Quits: d3sync (~d3sync@62.1.158.148) (Read error: Connection reset by peer)
[17:02:56] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:03:26] *** Joins: reset (~reset@user/reset)
[17:04:11] <graingert[m]> <rendar> "i can't wait a task is fully..." <- ?
[17:04:14] <graingert[m]> Someone needs to wait for it
[17:04:50] *** Joins: Naan (~naan@user/naan)
[17:05:51] <rendar> ok right, what about cancelling all tasks and wait all of them with wait() ?
[17:07:10] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[17:07:50] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[17:10:41] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:11:04] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[17:11:34] *** Joins: brelod (~me@90.244.150.142)
[17:13:17] *** Quits: asthasr (~asthasr@162.210.28.151) (Quit: asthasr)
[17:14:25] *** Joins: nickodd (~nickodd@user/nickodd)
[17:14:55] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:14:57] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:17:23] *** Quits: chenxuezhao (~chenxuezh@120.244.238.3) (Remote host closed the connection)
[17:17:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[17:18:15] *** Joins: Timrit (~scott@047-012-066-084.res.spectrum.com)
[17:19:19] <gitesh> jinsun: I had know that
[17:21:08] *** Quits: vimart (~vimart@148.252.132.66) (Quit: WeeChat 2.8)
[17:21:13] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[17:21:24] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[17:22:25] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[17:25:25] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[17:25:32] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:28:51] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e53c-19d8-8d1c-336f.res6.spectrum.com)
[17:30:26] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:30:46] *** Joins: greknod24 (~grek@1.132.106.187)
[17:32:05] *** Quits: greknod2 (~grek@ppp121-45-128-151.bri-pow-que-bras31.tpg.internode.on.net) (Ping timeout: 252 seconds)
[17:32:05] *** greknod24 is now known as greknod2
[17:32:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:32:50] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:36:07] <Code_Bleu> return [inventory if inventory[item] > 0 else inventory[item] -= 1 for item in items]¬
[17:36:29] <Code_Bleu> why does this not work and decrement?  how should I do decrement in a list comprehension?
[17:36:46] <ChrisWarrick> Code_Bleu: you’re trying to do too much inside a list comprehension
[17:37:35] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:37:39] <Code_Bleu> I struggle with that problem of when it's ok to do regular for loops and when I can make it "leaner"  I tend to always try to reduce it down to a list comprehension :/
[17:38:26] *** Quits: p-i-_ (~Ohmu@223.206.70.53) (Read error: Connection reset by peer)
[17:39:02] *** Joins: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th)
[17:39:03] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Lost terminal)
[17:39:10] <ChrisWarrick> if the list comprehension becomes long, perhaps it’s a bad idea. if there is a lot of logic in it, perhaps move some of it to functions. I would also consider mutating any state (as this thing does) to be bad in a list comprehension.
[17:39:54] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:40:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:40:40] *** Quits: greknod2 (~grek@1.132.106.187) (Read error: Connection reset by peer)
[17:40:54] <gitesh> What does that mean that print in python 2.7 was not a function like print(), so what was it like print something?
[17:41:26] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:42:51] *** Joins: greknod2 (~grek@ppp121-45-135-247.bri-pow-que-bras31.tpg.internode.on.net)
[17:43:48] <ChrisWarrick> gitesh: yes
[17:44:11] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[17:44:37] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:44:52] *** Joins: cheater (~Username@user/cheater)
[17:46:17] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:48:27] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[17:48:38] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[17:49:16] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:49:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[17:49:45] *** Joins: paul424 (~tom@ip-37-248-157-43.multi.internet.cyfrowypolsat.pl)
[17:50:47] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:54:28] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[17:56:43] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[17:57:41] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[17:57:41] *** Joins: slav0nic (slav0nic@python.su)
[17:58:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:59:26] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[18:02:27] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[18:03:40] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[18:05:07] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[18:05:17] *** Joins: akk (~akk@75.161.146.115)
[18:06:02] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-153-142.red.bezeqint.net)
[18:07:01] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[18:09:29] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[18:10:02] *** Quits: kib (~kib@user/kib) (Ping timeout: 252 seconds)
[18:10:23] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:10:28] *** Joins: kib (~kib@user/kib)
[18:11:19] *** Joins: mactron_ (~mactron@APN-123-242-104-gprs.simobil.net)
[18:13:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:14:24] *** Joins: wyclif (~wyclif@user/wyclif)
[18:14:31] <seds> I am trying to overwrite the session on pytest in order to use a testing database during pytest. I have a `get_db` function that yields a SessionLocal(), so ideally I would need to move SessionLocal to return my testing session. For some reason, this isn't working: https://gist.github.com/benmezger/9ba6e9f4d4675a3bd1c30aec9b3a27c1
[18:14:32] *** Quits: mactron (~mactron@APN-123-242-104-gprs.simobil.net) (Ping timeout: 265 seconds)
[18:14:37] <seds> Line 88 tries to overwrite the SessionLocal and yield it on the db_session fixture. This works fine, but in the middle of the code, there is some get_db, which yield that SessionLocal
[18:14:41] <seds> so I wonder how can I also overwrite that
[18:14:50] <seds> For some reason, SessionLocal is imported from app.db.session, but the overwrite in conftest isn't propagating in all other files that import app.db.session. Ideas?
[18:14:58] <seds> SessionLocal is basically this: `SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)`
[18:15:32] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Ping timeout: 252 seconds)
[18:16:15] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[18:17:16] <seds> This approach "tries" to mimic pytest-django's testing db support
[18:19:26] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[18:21:41] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:21:49] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[18:23:49] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[18:24:12] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[18:25:28] *** Joins: LiftLeft (~LiftLeft@66.115.145.206)
[18:27:50] *** Joins: badsektor (~badsektor@user/badsektor)
[18:27:55] *** Joins: alguien (~alguien@user/alguien)
[18:29:03] <nedbat> Code_Bleu: list comprehensions might not be leaner.
[18:29:08] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[18:31:21] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:31:29] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Ping timeout: 252 seconds)
[18:33:32] <domhnall> are nested for loops too much to do in a list comprehension?
[18:34:00] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[18:35:15] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[18:35:34] *** Quits: fassl (~fassl@2a02:8388:1987:9380:f065:d411:4557:ccdf) (Quit: Leaving)
[18:36:29] <Julian> domhnall: often yes, sometimes no
[18:36:49] <Julian> domhnall: read it and judge whether someone (you in 3 months) will be able to tell what it does
[18:38:34] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[18:39:27] <domhnall> Julian: makes sense...specifically I just mean 2 levels.. i.e [for i in <iterable> for j in <iterable>]. I never thought to do more than that.
[18:39:29] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:41:05] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[18:41:18] <domhnall> I never knew  (or read about) using a function in a list comprehension was a thing. Python++
[18:41:48] *** Joins: redrum88 (~redrum88@user/redrum88)
[18:41:50] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:42:35] <leitz> What are the options for static python code analysis?
[18:42:59] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[18:43:16] <Julian> domhnall: the number of levels only indirectly matters in my mind
[18:43:25] <Julian> domhnall: but you can use it as a heuristic
[18:43:27] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[18:44:34] <Julian> leitz: mypy and pytype if you mean static type checking
[18:44:40] <Julian> leitz: flake8 and its ecosystem if you mean linting
[18:45:54] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[18:46:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:47:51] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[18:48:13] *** Joins: daaawx (~dax@2a02-a453-3298-1-6445-bac2-43ed-16f6.fixed6.kpn.net)
[18:51:55] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Read error: Connection reset by peer)
[18:52:15] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[18:52:43] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[18:53:41] *** Quits: mactron_ (~mactron@APN-123-242-104-gprs.simobil.net) (Ping timeout: 265 seconds)
[18:53:41] *** Joins: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com)
[18:54:02] *** Quits: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com) (Client Quit)
[18:54:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[18:55:56] <leitz> Julian, thanks!
[18:56:45] *** Joins: fikran (~fikran@user/fikran)
[18:57:10] *** Joins: pkx (~pkx@user/pkx)
[18:58:25] *** Joins: jewels (~jewels@2620:10d:c092:400::5:f950)
[18:58:41] *** Joins: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com)
[18:59:58] <jewels> Hi there. I have a dictionary that maps an id to a list of files. For each ID, I need to read in memory each file in the list, merge them together and then write to disk the result on a separate file.
[19:00:01] <gitesh> The way I think I should look up for help from methods is if I want to change the object
[19:00:52] <jewels> I've been using multiprocessing.Pool() to apply a function to multiple IDs at the same time. However, reading each file in the list seems to be taking a lot of time as well.
[19:01:08] <jewels> Is there any pythonic way of dealing with loading multiple files at once?
[19:02:03] <jewels> At the moment it takes 16s/it and because I have to deal with ~100K ids, it will take a long time!
[19:02:41] <jewels> The dictionary contains roughly 100K ids (keys) and for each id I have a list of files that could be ~200 items long.
[19:03:00] *** Joins: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com)
[19:04:39] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[19:05:16] *** Quits: fanis30 (~fanis30@adsl-213.37.6.3.tellas.gr) (Quit: WeeChat 3.2.1)
[19:06:33] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:06:42] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[19:06:59] <ChrisWarrick> you could profile it, but I’d guess you’re limited by the storage, you’re reading 20 million files after all
[19:08:08] <jewels> Yes but If I could parallelize in some way the process
[19:08:39] <ChrisWarrick> you’re already using multiprocessing, right?
[19:08:41] <jewels> I was thinking to have basically multiple processes that deal with each id and for each id multiple processes that read the files
[19:09:56] <jewels> I'm using multiprocessing.imap_unordered() on the keys of the dictionary. The function that I call for each of them `compress_features`, has a for loop that reads each file and merges them.
[19:10:09] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th)
[19:10:10] <jewels> Is there any way I can have nested multiprocessing Pool?
[19:10:13] <ChrisWarrick> I wouldn’t
[19:10:18] <ChrisWarrick> one process per file sounds super expensive
[19:10:22] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[19:10:36] <jewels> Then maybe a ThreadPool?
[19:11:05] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[19:11:19] *** Joins: jayjay (~jayjay@2601:18d:a81:a280:dc65:d4a:227:ece8)
[19:11:27] *** Quits: paul424 (~tom@ip-37-248-157-43.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[19:11:28] <ChrisWarrick> you could try, but if you’re limited by the storage, it won’t help — and threading/multiprocessing isn’t free
[19:11:41] *** Quits: jayjay (~jayjay@2601:18d:a81:a280:dc65:d4a:227:ece8) (Client Quit)
[19:12:16] <jewels> What do you mean by "you’re limited by the storage"?
[19:12:19] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[19:12:30] <jewels> You mean if the filesystem doesn't support this level of paralllelism?
[19:12:32] *** Quits: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th) (Ping timeout: 265 seconds)
[19:12:46] <ChrisWarrick> not the filesystem, the underlying hardware is likely the bottleneck
[19:13:01] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:13:20] <jewels> The underlying hardware should be a very fast, high throughput disk
[19:13:32] <jewels> It's in a SLURM cluster
[19:14:42] *** Quits: maxking (~maxking@user/maxking) (Quit: maxking)
[19:15:00] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[19:15:22] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[19:15:58] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[19:16:07] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:17:07] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 240 seconds)
[19:17:18] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:17:30] <rendar> should i await each task i .cancel() ?
[19:17:33] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[19:18:06] *** Quits: manuel_ (~manuel198@2a02:1748:dd5c:f290:c5b2:fdff:b718:9edf) (Remote host closed the connection)
[19:18:20] *** Joins: manuel_ (~manuel198@2a02:1748:dd5c:f290:894b:df66:de34:69)
[19:19:27] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:20:12] <zware> rendar: I would say yes, to ensure that they do actually finish how you expect them to
[19:20:26] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[19:20:41] <rendar> ok, problem is: what about there is a `while True` loop inside a task which also ignores asyncio.CancelledError ?!
[19:20:54] <rendar> the function to cancel and clean all tasks will never return..
[19:20:58] <rendar> blocking my program
[19:20:59] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[19:21:21] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[19:22:27] <jewels> So removing the multiprocessing and resorting to just ThreadPool actually works reasonably
[19:22:59] *** Quits: Yasumoto (~Yasumoto@136.152.37.118) (Remote host closed the connection)
[19:23:47] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[19:24:10] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[19:24:32] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Ping timeout: 260 seconds)
[19:26:48] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:27:24] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[19:27:49] <zware> rendar: Then you need to fix that loop to not ignore all of the CancelledErrors :)
[19:28:06] <rendar> zware, what about the code is not mine and its from another user
[19:28:20] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:28:37] <zware> rendar: Then they need to fix it ;).  Alternatively, use `await asyncio.wait_for(cancelled_task, timeout=something_reasonable)`
[19:29:06] <rendar> zware, problem is wait() and wait_for() won't *await* the task, they will just wait for its completion
[19:29:23] <rendar> but a task which has been waited from wait() doesn't change state from 'cancelling' to 'cancelled' yet
[19:31:26] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[19:31:58] *** Joins: nomic (~nomic@85.203.36.16)
[19:32:19] *** Quits: yaalon (~yaalon@rrcs-72-131-195-82.sw.biz.rr.com) (Remote host closed the connection)
[19:32:38] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Quit: ShinyCyril)
[19:33:09] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[19:34:04] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:34:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:35:06] *** Quits: xiongxin (~quassel@113.116.34.58) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:35:42] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[19:36:03] <zware> rendar: If the task is never going to finish because it's a pathological infinite loop that ignores CancelledError, how are you going to await its completion in any way?  The best you can do there is wait for some time and see if it's finished
[19:36:06] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[19:36:45] <rendar> ok, yes, that's a good solution
[19:37:03] <zware> rendar: Which is what `wait_for` does :)
[19:37:48] <rendar> what about wait_for() goes into timeout?
[19:38:35] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[19:39:15] *** Quits: nomic (~nomic@85.203.36.16) (Quit: Leaving)
[19:40:33] <zware> rendar: IIRC, if `wait_for` times out, it tries to cancel the awaited task and raises TimeoutError itself
[19:41:09] <rendar> exactly
[19:41:38] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:41:40] <rendar> no, you're wrong...it cancels tasks with CancelledError, the it raises TimeoutError?
[19:41:42] <rendar> yes
[19:41:59] *** Joins: nomic (~nomic@185.192.69.192)
[19:45:27] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[19:45:31] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[19:45:31] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:45:53] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[19:46:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:46:17] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[19:46:34] *** Joins: califax (~califax@user/califx)
[19:46:47] *** Joins: brabrax (~brabrax@user/brabrax)
[19:46:56] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:47:20] *** Quits: KidBeta (~KidBeta@user/kidbeta) (Ping timeout: 265 seconds)
[19:48:11] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:48:22] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[19:50:18] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[19:51:24] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) ()
[19:52:46] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[19:54:58] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[19:55:05] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:56:21] *** Joins: jazzy (~jaziz@2600:380:854a:af07:5c15:5702:68a5:4b72)
[19:57:40] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[19:59:54] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[19:59:54] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 265 seconds)
[20:01:39] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[20:02:07] <jamwil> What's everyone working on today?
[20:02:37] <mefistofeles> jamwil: thinking about making a conda-forge package of some software I need
[20:02:43] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:02:47] <nedbat> jamwil: over-engineering my website.  you?
[20:03:25] <jamwil> I'm hopefully finishing up a pdf contract generator with an approval workflow that ties in with Smartsheet
[20:03:30] *** Joins: magla (~gelignite@55d42346.access.ecotel.net)
[20:03:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:03:56] <jamwil> mefistofeles,nedbat: Nice!
[20:04:40] <jamwil> nedbat: btw, great to meet you. Your reputation precedes.
[20:04:56] * nedbat blushes
[20:05:19] *** Joins: xon_ (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:05:21] <rendar> nedbat, hi.. interesting, which libraries are you using, if i may ask?
[20:05:53] <nedbat> rendar: django, pillow, lxml
[20:06:11] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Lost terminal)
[20:06:18] <rendar> cool
[20:06:36] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:06:53] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:07:02] <mefistofeles> nedbat: any major changes coming for your website ?
[20:07:07] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[20:07:25] <nedbat> mefistofeles: not from the outside, but there have been big changes behind the scenes
[20:07:26] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[20:07:47] <nedbat> mefistofeles: https://nedbatchelder.com/blog/202109/real_django_site.html
[20:08:46] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[20:09:12] <mefistofeles> nedbat: nice!
[20:09:33] *** Joins: gustik (~gustik@2a01:c844:2410:9020:63ab:4bb6:83d2:e11b)
[20:09:56] *** Quits: xon_ (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[20:10:02] *** Joins: rsrx (~rsrx@103.225.150.81)
[20:10:12] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[20:10:44] <nedbat> mefistofeles: since then I've done more: now images are auto-converted on demand to .webp
[20:11:56] <mefistofeles> nedbat: that sounds "overengineerish" indeed xD any reasons why you want that?
[20:12:14] <nedbat> mefistofeles: it makes things faster, and it was an interesting thing to make
[20:12:25] <mefistofeles> nedbat: I see, nice
[20:12:42] *** Joins: ST47 (~ST47@wikimedia/st47)
[20:12:43] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:13:07] *** Joins: Vonter (~Vonter@user/vonter)
[20:14:56] <jamwil> nedbat: Do you cache the webp file once it's been generated from the source png/jpeg for subsequent requests?
[20:16:35] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[20:16:41] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:16:41] <nedbat> jamwil: yes, it's written to disk then served by apache from then on
[20:17:18] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[20:17:21] <jamwil> nedbat: Cool!
[20:17:31] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[20:17:41] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[20:18:54] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[20:19:29] *** Joins: bandit_za (~bandit_za@185.195.232.173)
[20:19:36] *** Joins: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a)
[20:19:46] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:20:16] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:21:23] *** Joins: ub (~Thunderbi@178.115.71.159.wireless.dyn.drei.com)
[20:22:15] *** Quits: cth (~Cthulchu@193.194.107.250) (Remote host closed the connection)
[20:23:06] *** Quits: y1n (~y1n@178.115.59.197.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[20:23:20] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[20:23:50] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:23:55] *** Joins: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th)
[20:24:07] *** Quits: ubert (~Thunderbi@178.165.202.105.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:24:07] *** ub is now known as ubert
[20:24:15] *** Joins: Auron (~Auron956@user/auron)
[20:24:33] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[20:24:33] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[20:25:06] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[20:26:42] *** cvmn is now known as caveman
[20:28:13] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:28:15] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[20:31:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:32:55] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[20:33:21] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[20:33:50] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Quit: ShinyCyril)
[20:35:37] <twainwek> i reinstalled my os and i'm seeing 'matplotlib is currently using agg, which is a non-gui backend, so cannot show the figure'. I have googled around and seen a couple of different proposed solutions, but i'm wondering if there is a 'correct' solution for resolving this
[20:35:38] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:36:01] *** Joins: y1n (~y1n@77.119.174.44.wireless.dyn.drei.com)
[20:36:56] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[20:37:40] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[20:38:00] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[20:38:52] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Client Quit)
[20:39:54] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[20:40:03] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[20:40:13] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-b1bf-39dc-abae-faaf.fixed6.kpn.net) (Remote host closed the connection)
[20:40:14] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[20:40:18] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[20:41:29] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-a570-cd91-5bba-ca1b.fixed6.kpn.net)
[20:42:44] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:43:13] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:1121:b56d:30:5244)
[20:43:34] <grym> twainwek: you need tk and possibly tk-dev
[20:44:53] <mattf> Any idea why flask's Flask login, remember_me param of login works on every other browser but not safari?
[20:45:23] <mattf> Once it is closed on safari the login is lost. Seems safari doesn't want to keep some cookies, but the login works
[20:45:24] <twainwek> i'm going that route, but it requires an update of glibc. one little plot may cost me an entire weekend if it fails
[20:45:32] <stewie925> hi guys, can somebody with Java knowledge convert the following line to python? `for int r = row - 1, r <= row +1, r++`
[20:46:36] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:46:53] <stewie925> I interpret it as `for r in range(row-1, ...)` but stumped with the `r <=row +1` part
[20:47:10] <Tashtari> stewie925:  I think it'd be  `for r in range(row - 1, row + 2):`
[20:47:14] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[20:47:25] <Tashtari> The <= means you include row + 1, so the upper bound on range has to be row + 2
[20:48:01] <stewie925> Tashtari:  oooh.  thank you!
[20:48:47] <Tashtari> Mind you, I'm interpreting the java you gave as `for(int r = row - 1; r <= row +1; r++)` ... if the syntax you gave is what Java is doing now, it's news to me.
[20:49:27] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:49:52] <stewie925> I'm trying to study the depth first search algorithm for my coding interview, and what's available is the Java code in YouTube...
[20:50:20] <Julian> stewie925: line-by-line conversion of algorithms from one language to another is generally not a good idea
[20:50:33] <stewie925> she explains it very well, but I m struggling with java
[20:50:37] <Julian> Languages have very different paradigms -- Python and Java particularly.
[20:50:51] <stewie925> Julian:  I sadly agree with you
[20:52:10] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[20:52:39] <ChrisWarrick> you should be able to find better sources that use Python or pseudocode
[20:52:49] <stewie925> Tashtari: it was this I am looking at https://www.youtube.com/watch?v=R4Nh-EgWjyQ
[20:53:02] <leitz> stewie925, maybe look here?   https://github.com/topics/depth-first-search?l=python
[20:53:21] <Tashtari> stewie925: https://www.youtube.com/c/CoderSnacks/videos  It's not directly related to your question, but I found this channel useful in preparing for a recent coding interview.
[20:53:45] <Tashtari> He uses Python in his solutions.
[20:53:54] <Tashtari> (Python 2.x, but you can't have everything.)
[20:54:01] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[20:54:14] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[20:54:24] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th)
[20:54:31] <Tashtari> (Also, I got the job, yay.)
[20:54:32] <stewie925> leitz: ChrisWarrick: Tashtari:  thank you guys
[20:54:55] *** Quits: y1n (~y1n@77.119.174.44.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:55:36] <stewie925> can't live without lists in coding interviews lol
[20:55:46] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[20:56:46] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[20:56:55] <leitz> Tashtari, yay! Now, let some of your success rub off on the rest of us, okay?  :)
[20:57:07] *** Quits: p-i- (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th) (Ping timeout: 240 seconds)
[20:57:22] <Tashtari> I'm sending all the good vibes.
[20:57:37] * leitz is playing with Terraform in response to a "no" response on an interview.
[20:58:12] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[20:58:27] <Tashtari> One of my interviewers commented that I clearly had used Python to get things done.  I don't know quite what he picked up on that made him think so, but I took it as quite a compliment...
[20:59:26] <stewie925> Tashtari: way to go!
[20:59:54] *** Joins: nac9 (~nac@user/nac)
[21:00:00] <leitz> Nice! I'm trying to transition from SysEng to Dev, and my ability to engineer networks and rapid-build environments seems less impressive to the folks I've talked to.
[21:00:01] <stewie925> leitz:  I hope you the best in your next code interview!
[21:00:02] *** Quits: dece (~dece@dece.space) (Quit: Quit)
[21:00:19] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[21:00:38] <stewie925> leitz:  there are so many SysEng job postings on LinkedIn and Indeed
[21:00:47] <leitz> stewie925, thank you!
[21:00:55] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Quit: ShinyCyril)
[21:01:36] *** Joins: dece (~dece@dece.space)
[21:01:37] <leitz> stewie925, a friend of mine suggested doing HashiCorp stuff to help migrate. Took me a while to realize how good of a plan that was, but I'm finally catching on.
[21:01:39] <ChrisWarrick> Tashtari: is that your first job?
[21:01:57] *** Quits: nac (~nac@user/nac) (Ping timeout: 250 seconds)
[21:01:57] *** nac9 is now known as nac
[21:02:03] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[21:02:10] <Tashtari> Not at all, I've been in the industry for a bit north of a decade...
[21:02:34] <ChrisWarrick> Tashtari: I’m wondering about the “used Python to get things done” remark
[21:02:54] <Tashtari> So am I, really.  I just know it's good.
[21:03:12] *** Quits: dhanesh (~Dhanesh@59.88.162.138) (Quit: Leaving)
[21:03:34] <ChrisWarrick> Tashtari: I could see this applying to someone who’s new to the industry or a Java convert, since it’s sometimes obvious someone doesn’t have much experience getting real stuff done, or that someone is writing Java in Python
[21:04:06] <Tashtari> Yeah, I dunno.
[21:04:15] <leitz> I put things on my resume landing page to show that I do, in fact, produce working "stuff".
[21:04:17] <stewie925> ChrisWarrick: +1 on your comment
[21:04:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:04:52] <ChrisWarrick> (feel free to replace Java with C#, C++, Rust, or <whatever>.)
[21:05:04] <leitz> ChrisWarrick, maybe the issue was that they could "see" it, instead of just be told about it. Many programmers only work on company time and some of that can't be shared in public.
[21:05:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:06:06] *** Joins: fikran (~fikran@user/fikran)
[21:06:28] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[21:06:30] *** Joins: Warped (~Warped@user/warped)
[21:06:53] <leitz> I think there's also a mental energy associated with a programming language. The more it fits the person's brain, and the more they can actually do with it, the more an interviewer sees "this person can actually do stuff".
[21:07:34] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[21:07:35] <leitz> C is a great language, but I have no mental energy for it. Thus me trying to get a C based job is probably not a great idea.
[21:08:28] <leitz> Python is my second best "language to brain" fit that I know of. The first choice has an almost negative market share.  :P
[21:08:48] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:08:48] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:11:59] <stewie925> what is your first choice? assembly language?
[21:12:03] <stewie925> :D
[21:13:31] <Koffa> must be perl (;
[21:14:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[21:15:34] *** Joins: int3l (~int3l@78-83-116-167.spectrumnet.bg)
[21:15:47] <Macuser> is there a way to append to file and add the text in a 2nd column such as one tab (/t) from the current line's text?
[21:16:01] <Macuser> so then it's just two columns of text
[21:16:13] <bjs> Macuser: well yes and no,  you can re-write the whole file to be in such a format
[21:16:30] <Macuser> i guess so. instead of running the for loops twice
[21:16:38] *** Quits: eem (~eem@user/eem) (Ping timeout: 260 seconds)
[21:17:08] <Macuser> but in my case it seems a bit complex to do it that way
[21:17:09] <leitz> stewie925, Koffa, close. Absent Rails, Ruby has about no market share. I think Assembly has more, given all the IoT buzz these days.
[21:17:14] <Macuser> because they don't map 1:1
[21:17:23] <bjs> Macuser: what do you mean
[21:17:38] <Macuser> like I'm writing elevation and azimuth data but they don't both change(increment) at the same time
[21:17:42] <leitz> And i'm actually learning Functional Programming in Perl, so plggbhth....
[21:17:52] <ChrisWarrick> leitz: nah, IoT stuff would be written in at least C
[21:18:29] <leitz> ChrisWarrick, don't they still do some of the SoC stuff in Assembly?
[21:18:31] <Macuser> i think i can figure it out
[21:18:40] <Macuser> just need 2 counters
[21:18:44] <Macuser> that should be all
[21:18:58] <ChrisWarrick> leitz: in some rare cases, some people might need to
[21:19:06] <stewie925> leitz:  I just checked - Linkedin has LOTS of Ruby job postings - but most of them in SF Bay Area but some of them may be remote (covid)
[21:19:09] <ChrisWarrick> leitz: sure, there is a non-zero amount of asm code being produced
[21:19:25] <ChrisWarrick> stewie925: are those Ruby job postings, or are those really Rails?
[21:19:35] <leitz> ChrisWarrick, which is probably more ASM than non-Rails Ruby.  :(
[21:20:01] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:20:14] <bjs> Macuser: not sure i follow, why two counters?
[21:20:39] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[21:20:42] <Macuser> I have counters that track when the next line is different from the first so that I can interpolate between all the previous ones that are the same
[21:20:43] <leitz> Not literally, but it felt that way when I was doing Ruby. Python is pretty good and has a lot of job options.
[21:21:01] <Macuser> so say the elevations are 1 1 1 1 1 1 2 2 2. It will take all those 1's and interpolate linearly and replace it
[21:21:12] <stewie925> ChrisWarrick:  the Ruby search results show either Ruby or "Ruby on Rails"
[21:21:14] <Macuser> so there's a counter that is going for that
[21:21:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[21:21:23] <Macuser> but since el and az don't map 1:1 I'll need two counters for that
[21:21:37] *** Quits: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:49] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:21:51] <stewie925> and most job "descriptions" (not title) show "Ruby on Rails"
[21:22:01] <ChrisWarrick> stewie925: yeah, so effectively zero non-rails jobs
[21:22:48] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Client Quit)
[21:23:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:23:38] <twainwek> ok so i installed tk, and matplotlib is still complaining about 'matplotlib is currently using agg, which is a non-gui backend, so cannot show the figure'
[21:23:41] *** Joins: georgios (~georgios@user/georgios)
[21:23:44] *** Joins: shalora (~quassel@2a02:810a:b40:9f4::178f)
[21:23:49] <twainwek> If i remember correctly, before i had to modify ~/.config
[21:23:58] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:24:17] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:24:22] <tk> twainwek: don't install me
[21:24:23] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:24:52] <Payam> Hi, I am trying to create a thread and run asyncio in it. https://bpa.st/MTTA Howver I don't get to the print function in `_what_is_the_thread`
[21:25:14] <twainwek> lol
[21:26:29] *** Joins: cyphase (~cyphase@user/cyphase)
[21:26:47] <twainwek> got it. i had to update ~/.config/matplotlib ... i always do this annually because my os ends up breaking after a year and i always ask the same question here because i forget the solution
[21:27:46] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[21:29:52] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:1121:b56d:30:5244) (Quit: Ping timeout (120 seconds))
[21:31:02] <Macuser> bjs i think i need to use a dictionary
[21:31:28] <Macuser> i can't tell
[21:31:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[21:32:08] <Macuser> nah this is more complicated than it shoudl be
[21:32:19] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[21:34:19] *** Quits: gustik (~gustik@2a01:c844:2410:9020:63ab:4bb6:83d2:e11b) (Quit: Leaving)
[21:34:50] <Payam> no one?
[21:34:59] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Remote host closed the connection)
[21:34:59] *** Joins: Pickchea (~private@user/pickchea)
[21:35:06] *** Joins: Ben10 (~Ben10@37.120.130.28)
[21:35:37] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[21:37:07] *** Joins: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a)
[21:37:23] <Macuser> the question is, when you use "a+" does it append with the cursor starting at the end of the last character on the line
[21:37:51] <leitz> Web server question. Here's an example of a web page for a game I have in mind.   https://gist.github.com/LeamHall/517717e2ba92df2a5327842ae5be90a7
[21:38:38] <leitz> I keep seeing references to not use bottle, or even flask, "in production". At this level of play, does that really matter? Is there any reason not to use them or something similar?
[21:39:17] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[21:39:51] <roxfan> probably depends on your use case and expected traffic
[21:40:12] <roxfan> if it's a homepage and no big deal if it's down it's probably okay
[21:40:22] <leitz> Payam, I don't know python, or threads, much. However, I'm giving it a look.
[21:40:24] <energizer> leitz: i see no advantages to bottle and flask over pyramid or starlette
[21:41:10] <KirkMcDonald> leitz: Are you sure they aren't references to not using their development servers in production? Because the actual frameworks should be fine.
[21:41:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:41:30] <energizer> oh KirkMcDonald is right
[21:41:47] <energizer> but it's still true anyway
[21:41:50] <leitz> KirkMcDonald, it seemed like they were talking about bottle/flask themselves. However, I'm getting old, and maybe not remembering well.
[21:42:07] <leitz> I like the small nature of bottle, and flask doesn't look too big.
[21:42:17] <energizer> bottle and flask have a certain design that some people (correctly, imho) don't like
[21:43:11] *** Joins: eem (~eem@user/eem)
[21:43:12] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:1998:b26b:b79c:46bf) (Remote host closed the connection)
[21:43:13] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:43:31] *** Quits: hakeem (~hakeem@user/hakeem) (Quit: Remote host closed the connection)
[21:43:38] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:88a5:2c1e:e39:26c7)
[21:43:57] <leitz> Payam, if you "print(fut)", it says:  <Future at 0x7fb687a571c0 state=pending>    Is the "await" being triggered?
[21:44:37] <Julian> bottle has plenty of things to independently dislike about it
[21:44:47] <leitz> energizer, a small route based network service provide tends to fit my needs well. I'm not a webdev at all.
[21:45:10] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[21:45:21] <Julian> (there's a difference between "componentized small web framework", which is a great idea, and "web framework without dependencies", which is a bad one)
[21:45:23] *** Joins: canurabus (~canurabus@ip-24-156-182-35.user.start.ca)
[21:45:32] *** Joins: hakeem (~hakeem@user/hakeem)
[21:45:43] <energizer> leitz: yes, pyramid and starlette do that, they are just better at it than flask and bottle
[21:46:04] *** Quits: bandit_za (~bandit_za@185.195.232.173) (Ping timeout: 256 seconds)
[21:46:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:46:40] <leitz> Julian, why is "without dependencies" bad?
[21:46:49] <roxfan> +1
[21:46:51] <KirkMcDonald> I've never even heard of Starlette. Is that new? Looks like it's an async framework, which probably explains why I've never heard of it; I haven't really worked in that space.
[21:47:22] <roxfan> you can't really have no dependencies, since you have the runtime, stdlib etc.
[21:47:45] <roxfan> but I don't seee why minimizing depencies is bad
[21:47:50] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[21:47:53] <Julian> leitz: "use the best available functionality" is a fundamental idea to modern programming, and certainly modern Python programming. There's no reason to avoid dependencies. If you're deploying to a tiny device with no memory, firstly you're still likely to be OK with dependencies, but it's a tiny tiny fraction of anyone who's in this category.
[21:47:54] <roxfan> remember left-pad?
[21:48:23] <Macuser> bjs I just wrote to two lists and used zip() to write them all. that never fails :)
[21:48:35] <energizer> KirkMcDonald: it's a couple years old now. fastAPI is built on top of it
[21:49:05] <Julian> roxfan: (don't install unpinned yankable versions in production is not a 'don't use dependencies' problem, it's a don't have bad installation mechanisms problem)
[21:49:17] <leitz> Julian, there are lots of reasons to avoid dependencies; I work in that space. For my personal code, fewer to no non-STDLIB dependencies is the end of the continuum I prefer.
[21:49:37] <Julian> leitz: I maintain this is an actively harmful sentiment in programming :)
[21:49:51] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d)
[21:50:03] <canurabus> Hi, I'm trying to deal with a "ModuleNotFoundError". I have a package "foo" installed in a system path, with the modules a.py and b.py in it. a.py imports b.py with "import b". When I try to import a.py from my source file (from foo import a), I get the error "No module named 'b'", with a stack trace that points to the "import b" statement in a.py. I am using python 3.8
[21:50:24] *** Quits: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:50:41] <canurabus> How do you write import paths in a package so that they work?
[21:51:03] <Julian> leitz: One that causes wasted effort for many, poor functionality, bugs, you name it. It's just a bad idea, and the problems involved in dependency management are nowhere near what they used to be. It's a dead sentiment in Python in 2021, that only lives on due to misguided libraries like bottle.
[21:51:03] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[21:51:05] <KirkMcDonald> canurabus: `a` can't import `b` like that. You might use a relative import: `from . import b`
[21:51:14] <Julian> leitz: You're of course free to disagree, but yeah, I think this causes active harm in the community.
[21:51:15] *** Joins: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a)
[21:51:28] <KirkMcDonald> canurabus: You might also use an absolute import, just like your source file does: `from foo import b`
[21:51:35] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:52:03] <roxfan> Julian: do you vet all your dependencies every time they change? how do you protect against fucnctionality breakage or malicious updates?
[21:52:21] <Julian> leitz: (you should know you're certainly in the minority at least)
[21:52:32] <Julian> roxfan: I do! And I have tests.
[21:52:43] <leitz> Julian, I think there are a lot of different use cases. I tend to work in the "less is better" space. Happy to be a minority.  :)
[21:52:45] <Julian> roxfan: But the point initially wasn't really about changing versions.
[21:53:13] <roxfan> it's part of the problem brought by too many dependencies
[21:53:24] <Julian> leitz: /nod -- fair enough -- it tends to come up in here more for people who are *not* in said minority and don't know the difference, which is purely why I brought it up.
[21:53:47] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:53:57] <Julian> roxfan: My original point was "a library that bills itself as 'has no dependencies' is bad"
[21:54:16] <Julian> roxfan: I never said dependencies can't cause pain, or that having lots of them more pain than less.
[21:54:22] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:88a5:2c1e:e39:26c7) (Ping timeout: 252 seconds)
[21:55:10] <leitz> Julian, roxfan, if you don't mind the perspective from Perl, here's how I view the "less is better" value:   https://perlmonks.org/?node_id=11134957
[21:55:13] *** Joins: node1 (~node1@user/node1)
[21:56:01] *** Quits: esro (~esro@2a02:1205:5036:ad50:f9ff:b40f:4d75:657a) (Ping timeout: 252 seconds)
[21:56:07] <Julian> leitz: `pip` is notably better than `cpan` (and `cpanm`), so I don't think much is going to be transferrable.
[21:56:10] <Julian> Happy to read though.
[21:56:46] <KirkMcDonald> Dang, perlmonks. ecore still running strong in 2021.
[21:57:02] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d)
[21:57:05] <energizer> ...and poetry is much better than pip
[21:57:20] <energizer> (as a user-facing tool)
[21:57:21] <Julian> leitz: 1 2 and 3 on this list don't indeed apply to Python
[21:57:45] <Julian> leitz: 4 is in increasingly better shape by the day in Python, though certainly one still has to be wary of it
[21:57:45] <roxfan> I'm not exactly a perl fan but pip is better how exactly? i don't remember it doing test on install for one
[21:58:02] <leitz> Julian, Python has a bigger issue; most Linux versions don't have to have Perl, but they depend on Python. So you're going to have to deal with mixing things.
[21:58:10] <Julian> leitz: 5 doesn't apply either to Python
[21:58:14] <leitz> And venv is not really a solution.
[21:58:19] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) ()
[21:58:42] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d) (Read error: Connection reset by peer)
[21:58:56] <Julian> leitz: Sure, that issue doesn't really have much to do with dependencies though, they apply without them as well
[21:59:02] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d)
[21:59:02] <energizer> "Moose adds roughly 900 modules to the node. Who is security checking all those dependencies? Who wants to explain each and every one of those modules to a security auditor?" i'm curious what yall's company policies are on that. do you need someone to sign off on your whole dep tree?
[21:59:38] <Julian> leitz: You're in for pain if you use the OS's python even without dependencies, because the OS installs and removes dependencies at will, or unvendors things, or does a host of things that are anti-you-the-person-deploying-a-production-app
[21:59:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d) (Ping timeout: 268 seconds)
[21:59:53] <Julian> So I agree it's an issue (and that the solution is "don't do that"), but I don't agree it's much worse with dependencies.
[22:00:24] <Julian> energizer: vuln database (multiple) + static analysis + dynamic analysis + periodic audit
[22:01:24] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:01:31] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[22:01:48] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:02:43] <energizer> Julian: that is, pyup.io, pylint + bandit, coverage, periodic manual code review?
[22:02:47] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[22:02:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:03:10] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:03:17] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:03:19] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[22:03:24] <leitz> Julian, how does pip handle installing modules that include C code? I haven't tried that at all.
[22:04:02] <Julian> leitz: Python has formats for distributing binary artifacts (and pip supports installing them)
[22:04:13] <Julian> leitz: (they're called wheels)
[22:04:38] <Julian> energizer: yes, toolwise -- though for a whole app stack, there's other stuff I meant by "dynamic analysis" that's more similar to "someone tries to pentest your app in prod"
[22:04:45] <leitz> energizer, many companies accept the vendor supplied language packages. That gives the "approval", and non-Vendor supplied code often needs more rigorous approvals.
[22:05:00] *** Joins: ano (~ano@user/ano)
[22:05:00] <energizer> if you're not an expert in python dependency management, i would suggest https://python-poetry.org/ instead of using pip
[22:05:28] <Julian> (I have no experience with poetry but I've heard the same thing ^, so it seems like reasonable advice)
[22:06:05] <leitz> Julian, so, #1 applies, because there may not be a compiled version of the modeuls. Even if there was, you the sw dev would have to store all of them since many corporate production machines can't reach the internet.
[22:06:34] <energizer> Julian: i see. thanks.
[22:06:44] <leitz> I will grant that 2 and 3 may not apply, I haven't used pip enough to doubt you.
[22:06:45] <Julian> leitz: packages-with-binary-dependencies are their own category of dependency. There's no issue if you can't reach the internet, you grab it on a machine that can.
[22:06:58] <Julian> leitz: No-compiled-one isn't an issue because you can compile one yourself even if the maintainers don't ship one.
[22:07:00] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[22:07:22] *** Joins: Milos (~Milos@user/milos)
[22:07:29] <leitz> Julian, fails for machines that can't have compilers installed.  ;)
[22:07:41] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:07:46] <Julian> leitz: No it doesn't :)
[22:07:53] <Julian> You don't need the machine you install it on to be the one you build on.
[22:08:07] <roxfan> i like how almost every answer is "no issue"
[22:08:32] <Julian> roxfan: Isn't that consistent? I'm maintaining these are things you shouldn't worry about, they're all suitably solved.
[22:08:40] <Julian> If I thought it was a problem, I wouldn't have the opinion I have.
[22:09:17] <roxfan> nevermind, go on
[22:09:26] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[22:09:50] *** Joins: cheater (~Username@user/cheater)
[22:10:02] *** Joins: han-solo (~hanish@user/han-solo)
[22:10:11] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[22:10:33] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[22:11:06] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[22:11:09] <braxas> I'm still on a goose chase regarding IO and typing. Specifically I'm trying to figure out what the best approach is for making and typing functions that accept both binary and text IO streams and then write to them, but in this, I would like examples. Are there any functions that ship with python that can work on both BinaryIO and TextIO like objects? Or maybe functions in very popular libaries that do this?
[22:11:26] <Julian> braxas: they have common parent types
[22:11:46] <leitz> Hmm...energizer's comment about pip and dependency management make me wonder if Python might have it's own versions of #2 and #3.
[22:11:48] <energizer> braxas: i'm curious what the use case is
[22:12:26] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:1121:b56d:30:5244)
[22:13:08] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[22:14:01] <braxas> energizer: well I am trying to find a way to improve RDFlib's serialize methods, there is Graph.serialize, and ResultSerializer.serialize, and currently the one operates on BinaryIO, and the other on TextIO and sometimes BinaryIO, to make them more consistent I'm thinking of just making them operate on both: https://github.com/RDFLib/rdflib/pull/1418
[22:14:09] <energizer> leitz: #2 is not an issue in python. i'm not really sure what #3 is intended to mean, but sometimes dependencies do make breaking changes.
[22:15:01] <Julian> no one forces anyone to upgrade your dependencies, so if you don't agree with "use dependencies" fully, you're free to just stick with one version forever and it's still better than using the stdlib or writing your own
[22:15:05] <braxas> What I'm thinking is to do something like this: https://gitlab.com/aucampia/issues/202109-pythonio/-/blob/master/test_as_textio_v1.py - so I make a as_textio(), and then use that to get from Union[BinaryIO,TextIO] to TextIO. Not sure if this is the right approach
[22:15:14] <energizer> braxas: why not just have one that operates on binary and leave it at that?
[22:15:25] <energizer> (or on text and leave it at that)
[22:15:44] <braxas> I would prefer to not break API
[22:15:59] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[22:16:20] *** Joins: birkoff (birkoff@user/birkoff)
[22:16:31] <roxfan> leitz: I've certainly ran into issues with package upgrades. Construct is the one I remembr vividly (they overhauled the API significantly at some point)
[22:16:33] <energizer> braxas: how about having one that converts to the other?
[22:17:04] <braxas> I will probably keep Graph.serialize as only operating on BinaryIO, but with ResultSerializer.serialize I don't think I have much of a choice to accept both if I want existing applications to keep working.
[22:17:28] <braxas> energizer: well that is what I do here: https://gitlab.com/aucampia/issues/202109-pythonio/-/blob/master/test_as_textio_v1.py - I have a function that take both, and returns TextIO
[22:17:34] *** Joins: bandit_za (~bandit_za@185.195.232.173)
[22:17:46] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[22:17:55] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:18:06] <braxas> But my question is maybe, if there is a well established pattern for doing this, I don't want to do something super weird for RDFlib
[22:18:10] <leitz> roxfan, thanks. I'm just getting back into Python and can't say either way on pip. I do dislike the virtual env stuff, but the OS vs Personal Python is still a thing to figure out.
[22:18:21] <energizer> braxas: https://lucumr.pocoo.org/ has a few old blog posts about this topic from ~5 years ago around the py2/3 transition
[22:18:28] <leitz> roxfan, I'm almost at the point of just doing development in containers.  ;)
[22:18:37] <braxas> energizer: I will look at them, thanks
[22:19:25] *** Joins: somlis (~somlis@user/somlis)
[22:19:26] <roxfan> leitz: in my experience using "python3 -m pip install --user <module>" helps somewhat but yeah it's a bit of a mess
[22:20:05] <aphysically> well this is a bit silly but whatever
[22:20:07] <aphysically> fv.ev.kf_sec = f"{int(kf_sec*10**6)/10**6:.6f}"
[22:20:26] <Julian> aphysically: yes it is
[22:20:33] <aphysically> dunno if there's a better way
[22:20:36] <leitz> aphysically, do you talk to your Momma with that keyboard?   :P
[22:20:41] <roxfan> if it's stupid but works it's not stupid
[22:21:13] <aphysically> (I'm rounding *down* to 6 digits) (number is explicitly positive)
[22:24:12] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[22:24:25] <roxfan> use fixed point
[22:24:58] *** Joins: mactron (~mactron@APN-123-246-111-gprs.simobil.net)
[22:26:39] <aphysically> kf_sec is actually a fractions.Fraction weirdly enough
[22:26:54] <jinsun> aphysically: `f"{kf_sec.7f}"[:-1]` maybe? (not really much better though)
[22:27:35] <aphysically> but for a relatively good reason, I'm using fractions.Fraction's constructor to read the r_frame_rate field from ffmpeg, which is stored explicitly as a fraction (a string of form "n/m")
[22:27:47] <jinsun> ugh put a colon in there too
[22:27:56] <aphysically> so instead of reinventing a fraction parser (not that it's complicated) I'm just using fractions.Fraction's
[22:28:11] <roxfan> cool
[22:28:21] <evidlo> is there something like 'for d in cycle(mydict): if xxx: mydict.pop(d)', where I can loop infinitely until all the items are gone?
[22:28:32] <evidlo> python doesn't like the changing dictionary size
[22:28:35] *** Parts: Ben10 (~Ben10@37.120.130.28) ()
[22:28:36] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Read error: Connection reset by peer)
[22:28:40] <aphysically> jinsun: yeah I think they're similarly bad, yours might be faster but this function isn't remotely hot or anything
[22:28:59] <aphysically> so I'm not worried about that really
[22:29:01] <energizer> evidlo: while mydict
[22:29:33] <evidlo> ok, but I still need to iterate items
[22:29:46] *** Joins: Warped (~Warped@user/warped)
[22:29:49] <evidlo> I'm looking for something with 'for'
[22:29:49] <grawity> while mydict: (k, v) = mydict.popitem(); do_something(v)
[22:30:22] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 260 seconds)
[22:30:23] <evidlo> if do_something(v) fails, I want to leave the item and move on to the next one
[22:30:43] *** Joins: nomic (~nomic@85.203.36.16)
[22:30:49] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[22:30:53] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:5149:a5ce:137d:974d) (Quit: Leaving)
[22:30:59] *** Quits: nomic (~nomic@85.203.36.16) (Client Quit)
[22:31:56] <evidlo> I can only pop the item once I check that some condition on it is true
[22:32:12] <jinsun> you can have a for loop inside while mydict
[22:32:49] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.2.1)
[22:33:09] <evidlo> yeah that works.  was just curious if there was some compact solution
[22:33:29] *** Joins: nomic (~nomic@85.203.36.16)
[22:33:35] *** Joins: paul424 (~tom@ip-37-248-159-15.multi.internet.cyfrowypolsat.pl)
[22:34:10] <aphysically> oh right, float doesn't support format specifier string, so I'd have to float() the fraction too
[22:34:14] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[22:34:19] <grawity> does it have to remain the same dict?
[22:34:23] <grawity> if not, mydict = {k: v for k, v in mydict.items() if do_something(v)}
[22:34:33] <aphysically> (actually it's a bit odd it doesn't, that could be a future python language improvemnet)
[22:34:36] <paul424> hello what is wrong with this simple code demonstrating decorators : https://bpa.st/XD5A
[22:34:39] <paul424> it prints None
[22:35:02] <grawity> your new_function doesn't actually return what old_function returned
[22:35:47] <energizer> line 3 is broken
[22:37:23] <grawity> looks like py2 'raise' syntax that was hastily adjusted to not cause syntax errors in py3 without checking whether it makes sense
[22:37:42] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[22:38:26] *** Quits: mactron (~mactron@APN-123-246-111-gprs.simobil.net) (Ping timeout: 252 seconds)
[22:38:35] <paul424> https://www.learnpython.org/en/Decorators here
[22:39:14] <grawity> yeah notice how in the "You can also make it change the output
[22:39:25] <grawity> " section the wrapper actually has to `return old_function(...)`
[22:41:30] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[22:42:06] <paul424> still don't dig what's wrong with mine code
[22:42:42] <Julian> fg
[22:43:12] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[22:43:27] <han-solo> paul424: you missed a `return` on line 4
[22:43:34] <ChrisWarrick> paul424: your decorating function doesn’t return the output of the decorated function — so you get the default return value of None
[22:44:09] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[22:44:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[22:44:17] <paul424> han-solo, oki many thanks
[22:44:43] *** Joins: semeion (~semeion@user/semeion)
[22:44:48] <han-solo> but did you understand why that was required ?
[22:45:45] *** Joins: somlis (~somlis@user/somlis)
[22:45:46] <mefistofeles> ok, isn't this how you are supposed to use argparse? Am I going crazy? https://bpa.st/YYSA
[22:46:00] <han-solo> paul424: https://realpython.com/primer-on-python-decorators/#returning-values-from-decorated-functions
[22:46:46] <jinsun> mefistofeles: `args = arg_parser.parse_args()` then access `args.target`
[22:46:57] <mefistofeles> jinsun: oh right!
[22:46:57] <mefistofeles> lol
[22:47:00] <mefistofeles> thanks
[22:48:00] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[22:48:20] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[22:48:36] *** Quits: nomic (~nomic@85.203.36.16) (Quit: Leaving)
[22:48:48] *** Joins: theocrite (~theo@april/member/theocrite)
[22:49:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[22:49:51] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[22:50:54] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 260 seconds)
[22:51:31] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[22:52:06] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[22:52:27] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[22:53:30] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[22:53:54] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 265 seconds)
[22:55:22] *** Quits: LiftLeft (~LiftLeft@66.115.145.206) (Ping timeout: 252 seconds)
[22:56:19] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[22:56:36] *** Joins: nergar (~Nergar@177.225.157.49)
[22:56:38] <theocrite> Hi all. Any idea why I get the error AttributeError: module 'shutils' has no attribute 'copyfileobj'? A dir(dir(shutils) only show dunder variables. Did I miss something?
[22:56:57] <ChrisWarrick> theocrite: the module is called `shutil`
[22:56:58] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[22:57:52] <ChrisWarrick> theocrite: there is no `shutils` module built in, but if you named your file `shutils.py`, you imported that (don’t name your files like things you import)
[22:58:56] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[22:59:41] <han-solo> https://pypi.org/project/shutils/ # may they installed this one :D
[22:59:53] <theocrite> Thanks ChrisWarrick! Didn't know it was builtin so I installed shutils with pip3. I guess I should remove it then.
[23:00:01] <ChrisWarrick> theocrite: yes, you should
[23:00:05] <theocrite> han-solo: exactly. :)
[23:00:11] <han-solo> welp
[23:00:53] <theocrite> Well having two imports with almost the same name doesn't help idiots like me that can't read correctly. :)
[23:01:59] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:03:58] *** Joins: MercilessDeth (~brad@136.49.61.2)
[23:04:10] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[23:04:43] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:05:09] *** Joins: somlis (~somlis@user/somlis)
[23:08:14] *** Quits: bandit_za (~bandit_za@185.195.232.173) (Ping timeout: 256 seconds)
[23:09:15] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[23:11:21] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:12:24] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:89bc:36a5:75e3:234f)
[23:13:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[23:14:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[23:15:25] *** Joins: fikran (~fikran@user/fikran)
[23:15:45] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:16:37] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:89bc:36a5:75e3:234f) (Remote host closed the connection)
[23:17:02] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:3940:b096:fbd6:30bf)
[23:18:47] *** Quits: ubert (~Thunderbi@178.115.71.159.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[23:19:45] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[23:21:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:21:36] *** Joins: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk)
[23:21:56] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Ping timeout: 265 seconds)
[23:22:08] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:24:15] <paul424> something strange happens here : https://bpa.st/4XGA the interpreter seems to evaluate isinstance(arg,correct_type) before the statement old_function(arg)
[23:25:56] <paul424> ahh wait ... it deduces the type of arg from the fact it's the same type of old_function argument
[23:26:17] *** Quits: xon (~xon@host-110-net-65-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[23:27:27] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[23:29:04] <jinsun> if you are using that as decorator, old_function doesn't exist anymore, it got replaced by new_function, and new_function got the arg directly
[23:29:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:29:47] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[23:29:53] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:30:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:31:37] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:31:44] <paul424> I know how decorators work ,  I was just wondering how type deduction works ...
[23:31:56] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:36:04] *** Joins: cheater (~Username@user/cheater)
[23:37:05] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[23:37:40] <trace987> how to debug if python3 and pypy3 bring different results?
[23:38:40] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[23:39:01] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:39:16] <energizer> trace987: ask #pypy
[23:39:41] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[23:42:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:42:42] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 260 seconds)
[23:43:12] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[23:43:58] <nedbat> trace987: or, tell us what the differences are, and we can help
[23:44:55] *** Quits: paul424 (~tom@ip-37-248-159-15.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:45:18] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[23:45:46] <trace987> nedbat, my program has 9500 lines of code, so that would be difficult to find out for you
[23:46:13] <nedbat> trace987: let's start with what are the observable differences in output.
[23:46:16] <trace987> I should create unit test instances
[23:46:41] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:46:52] <trace987> the output of my program is not allowed for me to show it to you
[23:47:17] <trace987> are there good libs for unit testing for python?
[23:47:54] <trace987> and I should refactor tall functions into smaller ones
[23:47:59] *** Joins: Yasumoto (~Yasumoto@136.152.37.118)
[23:48:33] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[23:49:26] <nedbat> trace987: pytest is well-loved
[23:50:25] *** Joins: spithash (~spithash@user/spithash)
[23:50:53] <trace987> Shame on me that with 9500 lines of code I still haven't built unit tests.
[23:52:30] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 260 seconds)
[23:56:50] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[23:57:42] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
