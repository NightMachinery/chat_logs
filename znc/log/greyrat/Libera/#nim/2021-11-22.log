[00:16:47] <PMunch> rem, struggling with reparenting?
[00:25:30] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[00:31:33] <FromDiscord> <ùôßùôöùô¢> yeah
[00:31:48] <FromDiscord> <ùôßùôöùô¢> took a break from it to work on my small language but  it dies when XUnmapWindow is called
[00:31:51] <FromDiscord> <ùôßùôöùô¢> which is annoying
[00:33:13] <nrds> <06Prestige99> do you have an error handler set?
[00:33:20] <FromDiscord> <ùôßùôöùô¢> no
[00:33:22] <nrds> <06Prestige99> via XSetErrorHandler
[00:34:36] <nrds> <06Prestige99> https://tronche.com/gui/x/xlib/event-handling/protocol-errors/XSetErrorHandler.html
[00:34:48] <FromDiscord> <ùôßùôöùô¢> i took a break from it but ill add this later
[00:35:00] <FromDiscord> <ùôßùôöùô¢> if u have any idea of why its not  working tho lemme know and ill fix it later
[00:35:47] <nrds> <06Prestige99> You might just need to set that handler
[00:35:50] <nrds> <06Prestige99> "he action of the default handlers is to print an explanatory message and exit."
[00:35:55] <nrds> <06Prestige99> The action*
[00:36:04] <FromDiscord> <ùôßùôöùô¢> hmm
[00:48:57] <FromDiscord> <ùôßùôöùô¢> two questions
[00:49:44] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FJp
[00:49:53] <FromDiscord> <ùôßùôöùô¢> 2) is there a way to make it so i have to do `Token.Plus`
[00:50:01] <FromDiscord> <ùôßùôöùô¢> so it doesnt clutter the namespace when i import it
[00:55:54] *** Quits: terminalpusher (~terminalp@2a01:586:12e7:1:89c3:58c2:e0e9:27cc) (Remote host closed the connection)
[01:06:37] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:12:06] <FromDiscord> <dabmlfz> for point 2, I think you can use the pure pragma
[01:12:21] <FromDiscord> <dabmlfz> from the manual: "An enum type can be marked as pure. Then access of its fields always requires full qualification."
[01:16:01] <FromDiscord> <ùôßùôöùô¢> ahh ok
[01:17:12] <FromDiscord> <ùôßùôöùô¢> @dabmlfz doesnt work
[01:17:20] <FromDiscord> <ùôßùôöùô¢> guess they removed it
[01:17:32] <FromDiscord> <Yardanico> In reply to @dabmlfz "from the manual: "An": this is no longer true, but anyway
[01:17:41] <FromDiscord> <Yardanico> @ùôßùôöùô¢ you can just always use it explicitly and won't have any issues :P
[01:17:50] <FromDiscord> <ùôßùôöùô¢> aaa ik but its annoying
[01:18:02] <FromDiscord> <ùôßùôöùô¢> having all this clutter the namespace
[01:30:56] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[01:50:54] *** Joins: yarrie (~yarrie@213.18.184.86)
[02:02:02] *** Quits: qwr (~qwr@147-106-50-84.dyn.estpak.ee) (Ping timeout: 240 seconds)
[02:03:50] *** Joins: qwr (~qwr@182-83-235-80.dyn.estpak.ee)
[02:05:57] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3FJL
[02:06:28] <FromDiscord> <Elegantbeef> Thought that's going to die away with the overridable enums
[02:09:51] <FromDiscord> <Elegantbeef> though\
[02:16:41] *** Joins: Colt (~Colt@user/colt)
[02:17:34] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:21:35] <anddam> is nim /b zig
[02:21:42] <anddam> ok that came out odd
[02:22:25] <anddam> is nim suited for releasing small GUI executables for win/lin/mac possibly embedding a small GUI frmaework (Tk, Dear ImgUI, IUP) into a single executable bundle?
[02:22:56] <FromDiscord> <Yardanico> as long as you can do it with C, you can do it with Nim, so generally the answer is yes :) if you mean having separate binaries for different OSes
[02:23:06] <anddam> and while starting to type that I decided to switch buffer to #zig, where I roughly asked the same question
[02:23:38] <anddam> Yardanico: ok, thanks
[02:24:32] <FromDiscord> <Yardanico> zig will be suitable for that too btw
[02:26:49] <FromDiscord> <huantian> In reply to @Yardanico "this is no longer": Wait pure on enums isn‚Äôt a thing anymore?
[02:27:10] <FromDiscord> <Elegantbeef> It is but it's not enforced
[02:27:28] <FromDiscord> <huantian> Oh huh
[02:27:39] <FromDiscord> <Elegantbeef> Pure now just means "Ambiguity is allowed, if it's met throw it into a namespace"
[02:28:04] <FromDiscord> <huantian> Oh that makes sense
[02:28:31] <FromDiscord> <Elegantbeef> Though with the new overridable enums it's pointless üòõ
[02:28:49] <FromDiscord> <Elegantbeef> Ambiguity is allowed and the type system is used to resolve it in many cases
[02:30:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/yzJ
[02:30:37] <anddam> Yardanico: I am trying to pick one of the two, I'll go through https://nim-lang.org/blog/2021/11/15/zen-of-nim.html and see
[02:30:51] <anddam> Nim seems a bit more mature, considering it's past 1.0
[02:31:01] <anddam> at least that has been mentioned as a drawback on #zig
[02:31:29] <FromDiscord> <Elegantbeef> Correction it needs to be `var a: HorizontalAlign = HorizontalAlign.centre` apparently
[02:32:49] <FromDiscord> <Elegantbeef> In my view they're quite different languages, Zig is more of a C replacement, and Nim a modern system language. Not to say Zig isnt modern it just doesnt lean into modern concepts as much as Nim
[02:34:31] <FromDiscord> <Yardanico> another difference is that zig is very heavy on "No hidden control flow."
[02:34:36] <anddam> I think I'll need https://github.com/nimgl/imgui and I see this is a submodule of NimGL, but why isn't the former available in the registry as well?
[02:34:37] <FromDiscord> <Yardanico> some like it, some don't
[02:34:41] <FromDiscord> <Yardanico> nim is completely different in that regard
[02:34:51] <anddam> I am specifically referring to the note at https://github.com/nimgl/imgui#nimble-download
[02:35:01] <FromDiscord> <Elegantbeef> Nim has procedure overloading, generics, automatic memory management through GCs or Arc/Orc. Zig is very much a modern C it attempts to ensure the programmer can see everything
[02:35:08] <FromDiscord> <Yardanico> In reply to @anddam "I am specifically referring": because the developer didn't want to publish it i guess
[02:35:14] <FromDiscord> <Yardanico> `nimgl` already has it as one of the submodules
[02:35:26] <FromDiscord> <Yardanico> In reply to @Elegantbeef "Nim has procedure overloading,": yeah, also metaprogramming, and Zig again is "No preprocessor, no macros."
[02:35:36] <anddam> and that would possibly have duplicate contents for people installing both?
[02:35:37] <FromDiscord> <Yardanico> so nim and zig target quite different audiences regarding language features
[02:35:45] <FromDiscord> <Elegantbeef> Nah
[02:35:57] <FromDiscord> <Elegantbeef> It'll check if you have the version you need and if so not download it
[02:36:24] <FromDiscord> <Elegantbeef> If you're a diehard C programmer you'll probably like Zig
[02:36:31] <anddam> jeez hard to follow the Discord bridge from IRC
[02:37:07] <FromDiscord> <Elegantbeef> If you like niceties of the modern age, Nim will make you happy. It gives plenty of tools to make code very readable and imo very nice to write
[02:37:07] <anddam> Elegantbeef: was the C line for me?
[02:37:20] <FromDiscord> <Elegantbeef> Pretty much everything i've said in the past bit was
[02:37:21] <anddam> ok I am sold anyway
[02:37:29] <anddam> I use Python as daily driver btw
[02:37:47] <FromDiscord> <Elegantbeef> Ah then Nim will be more your style as it's not "as low level" as Zig
[02:37:54] <FromDiscord> <Yardanico> In reply to @anddam "<@145405730571288577>: was the C": just FYI, Elegantbeef is talking from Matrix :)
[02:37:54] <anddam> can do a little C but *definitely* not diehard
[02:38:12] <FromDiscord> <Yardanico> we have Matrix <-> Discord and Discord <-> IRC
[02:38:12] <anddam> ok
[02:38:21] <anddam> yeah that's the only drawback so far
[02:38:23] <FromDiscord> <Elegantbeef> Not to say you cannot do stuff at the same level as Zig, just that most of Nim is at a higher level with less concerns about memory management and the like since it handles it for you
[02:38:42] <FromDiscord> <Elegantbeef> You can always pretend Nim is a more modern C and write it as such if you ever wish
[02:38:47] <anddam> what about packing a build with static libs and make it an executable?
[02:39:03] <anddam> I mean what are my options for that? 
[02:39:03] <FromDiscord> <Yardanico> as in?
[02:39:16] <FromDiscord> <Yardanico> i didn't quite understand the question
[02:39:20] <FromDiscord> <Elegantbeef> You do the same thing as you do with C mostly
[02:39:26] <FromDiscord> <Yardanico> if you mean static as in `.a` you can just link them together with the binary like in C
[02:39:29] <FromDiscord> <Elegantbeef> You make the static lib then tell the compiler to link it
[02:39:44] <FromDiscord> <Elegantbeef> I've never done it since i dont view dynamic libs as satan spawn
[02:39:54] <anddam> oh ok, what if I need additional resources, is there a bundler of sorta?
[02:40:02] <FromDiscord> <Yardanico> `nimble` is nim's package manager
[02:40:07] <FromDiscord> <Elegantbeef> Do you mean things like images/files?
[02:40:08] <FromDiscord> <Yardanico> there are others too, but it's the most popular one
[02:40:22] <FromDiscord> <Yardanico> or if you mean bundling files right into your binary, there are language-agnostic tools for that, or nim libraries too
[02:40:29] <FromDiscord> <Yardanico> like https://github.com/xmonader/nimassets
[02:40:30] <anddam> Elegantbeef, yep, I am thinking specifically about cx_freeze and py2exe
[02:40:42] <FromDiscord> <Yardanico> In reply to @anddam "<@145405730571288577>, yep, I am": you don't need those really, since nim is compiled anyway
[02:40:51] <FromDiscord> <Elegantbeef> Nim's got a VM for compile time evaluation, so you can use things like `Zippy` and load files into Zip into memory at compile time
[02:41:03] <FromDiscord> <Yardanico> those are needed for python because it's interpreted, so to have a standalone exe you need to bundle the interpreter along with your code together
[02:41:12] <FromDiscord> <Yardanico> in native languages you don't need that - they compile to a native binary anyway
[02:41:21] <anddam> Yardanico: but I use those to package resources (images and other files) as well
[02:41:35] <FromDiscord> <Yardanico> you can use nimassets that i've shown above as one option
[02:41:37] <FromDiscord> <Elegantbeef> So yes you can make a very self contained application in Nim
[02:41:47] <anddam> thank you so much
[02:42:19] <FromDiscord> <Elegantbeef> Nim has a built in procedure named `staticRead` which takes a file path and will read it at compile time, so you can load an image into the binary as simply as `const myFile = staticRead("somefile.png")`
[02:42:42] <FromDiscord> <Elegantbeef> Though that's not an overly impressive feat, all modern languages can do that üòÄ
[02:42:54] <FromDiscord> <Yardanico> but in case of bigger files it doesn't make much sense to do that bundling
[02:43:18] <FromDiscord> <Yardanico> in a lot of cases it's easy enough to just distribute an installer on Windows, appimage on Linux and normal macOS application on macOS :)
[02:43:30] <anddam> I gathered enough info, to the docs-reading mobile!
[02:44:07] <FromDiscord> <Elegantbeef> The one thing i'll say is dont expect "Python but compiled" cause Nim is very not just that
[02:48:36] <FromDiscord> <ajusa> In reply to @ajusa "How do I cross": Asked this earlier but didn't get a response, so I thought I'd ask again: ‚ÜµHow do I cross compile a Windows exe with SSL support? I've added all the missing DLLs and cacert.pem to the same folder as the exe but it still complains about certificates not found. After looking into this issue more, I'm starting to realize why treeform created puppy
[02:51:22] <FromDiscord> <Elegantbeef> What OS are you on?
[02:51:22] <anddam> ajusa: why do you need a cert for having SSL support?
[02:52:39] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Ping timeout: 250 seconds)
[02:52:49] <FromDiscord> <Yardanico> In reply to @ajusa "Asked this earlier but": eh, checking SSL certificates is actually very important
[02:52:56] <FromDiscord> <ajusa> Linux, and so I can make an HTTPS request?
[02:53:01] <FromDiscord> <ajusa> Specifically Fedor
[02:53:04] <FromDiscord> <ajusa> (edit) "Fedor" => "Fedora"
[02:53:34] <FromDiscord> <Yardanico> i'll check myself now if it works or not
[02:53:58] <FromDiscord> <ajusa> In reply to @Yardanico "i'll check myself now": Thanks, that'll help me figure out if my code is just bad (it does work on Linux without any issues) or if something else is wrong
[02:54:26] <FromDiscord> <ajusa> Fwiw I did try compiling that program on Windows itself on the same machine and that worked - so it must be an issue with how I'm distributing it or cross compiling it
[02:56:32] <FromDiscord> <Elegantbeef> I just cross compiled from linux to windows and tested with wine and it workedc
[02:56:41] <FromDiscord> <Elegantbeef> Are you sure the pem is in the right path?
[02:56:54] <FromDiscord> <ajusa> In reply to @Elegantbeef "I just cross compiled": Hm, what dlls did you include? And where am I supposed to put the pem?
[02:58:39] <FromDiscord> <Yardanico> yep it just works
[02:58:56] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3FK1
[02:58:57] <FromDiscord> <Elegantbeef> exe is next to the `libssl-1_1-x64.dll` `libcrypto-1_1-x64.dll` and `cacert.pem`
[02:59:09] <FromDiscord> <Elegantbeef> Yep just like yards
[03:00:28] <FromDiscord> <ajusa> Huh, that's exactly the set up I had. I'm testing this again now lol
[03:01:00] <FromDiscord> <Yardanico> you can get all the DLLs from https://nim-lang.org/download/dlls.zip btw
[03:01:06] <FromDiscord> <Yardanico> or with the nim windows distribution
[03:01:32] <FromDiscord> <ajusa> I used the Nim windows distribution the first time I tested this, I'll try it with just the DLLs.zip on a real windows machine (so not Wine)
[03:02:08] <FromDiscord> <Yardanico> i do have a win7 vm which I can test that on as well :)
[03:02:29] <FromDiscord> <Elegantbeef> If it works on wine but not windows i'll just laugh at how good windows is
[03:04:05] <FromDiscord> <Yardanico> works there as well https://media.discordapp.net/attachments/371759389889003532/912123730971463760/unknown.png
[03:04:35] <FromDiscord> <Yardanico> (and don't ask why i have a win7 vm)
[03:04:41] <anddam> imgui.nim has   {.push warning[HoleEnumConv]: off.}
[03:05:03] <anddam> and this yields a    `/home/anddam/.nimble/pkgs/imgui-1.84.2/imgui.nim(1927, 29) Error: invalid pragma: warning[HoleEnumConv]: off`  when compiling or running
[03:05:14] <FromDiscord> <Elegantbeef> You're not on 1.6
[03:05:23] <anddam> so outdated language
[03:05:32] <FromDiscord> <Elegantbeef> How'd you get the language?
[03:05:36] <anddam> yep, 1.4.8 from Void packages
[03:05:38] <FromDiscord> <Yardanico> @anddam did you perhaps install nim from your distro's package manager?
[03:05:38] <anddam> time to update that
[03:05:42] <anddam> yes
[03:05:44] <FromDiscord> <Yardanico> yeah 1.4.8 is outdated a bit
[03:05:51] <anddam> I'll update the template
[03:05:53] <FromDiscord> <Yardanico> but i'm asking because some distros have ancient nim
[03:05:54] <FromDiscord> <Yardanico> like 0.19
[03:05:55] <FromDiscord> <Elegantbeef> If it was through a package manager, uninstall it from there and install it using choosenim or gitnim
[03:06:20] <anddam> Elegantbeef any particular advantage over using the package manager?
[03:06:22] <FromDiscord> <Yardanico> debian 11 (which was released in october) only has 1.4.6 for example
[03:06:33] <FromDiscord> <Elegantbeef> You can easily move between version
[03:06:57] <FromDiscord> <dom96> I love how now that we've got the roadmap the people who were loudly complaining that there is no roadmap haven't given a single bit of feedback about it so far üòÑ
[03:07:03] <anddam> does the language/compiler move fast?
[03:07:32] <FromDiscord> <gibson> /aside I wish the only nim package in distros was `choosenim`...
[03:07:34] <FromDiscord> <ajusa> Eh, 1-2 major releases a year I think, not too fast I would say. The stdlib is pretty stable
[03:07:37] <FromDiscord> <Elegantbeef> A minor release in around 4-8 months is what i think is the average
[03:07:54] <FromDiscord> <Yardanico> In reply to @anddam "does the language/compiler move": 1.6 -  19 October 2021‚Üµ1.4.0 -  16 October 2020
[03:07:54] <FromDiscord> <Elegantbeef> 1.6 was quite a large release
[03:08:04] <FromDiscord> <Yardanico> there were 1.4.2, 1.4.4, 1.4.6, 1.4.8 meantime
[03:08:20] <FromDiscord> <Elegantbeef> I think that implies they care‚Üµ(@dom96)
[03:09:03] *** Quits: src (~src@user/src) (Quit: Leaving)
[03:09:25] <FromDiscord> <Elegantbeef> Indeed gibson any language versioning tool is better than a specific version
[03:10:48] <FromDiscord> <dom96> In reply to @Elegantbeef "I think that implies": they sure seemed to based on how loudly they kept asking for a roadmap
[03:11:29] <FromDiscord> <gibson> @ElegantBeef even so far as I wish issuing polite takedown requests for non-choosenim packages, just to unify the UX.
[03:12:00] <FromDiscord> <dom96> In reply to @gibson "/aside I wish the": are you volunteering to package it for all the distros? üôÇ
[03:12:08] <FromDiscord> <Yardanico> In reply to @gibson "<@!145405730571288577> even so far": some people like distribution package managers over language package managers :)
[03:12:17] <FromDiscord> <Yardanico> and want languages to use them instead of their own native PMs
[03:12:37] <anddam> mm did build from source change much frmo 1.4? I see it was using separate csources, nimble and fusion tarballs
[03:12:42] <FromDiscord> <gibson> I could do a few! üôÇ
[03:12:43] <FromDiscord> <Elegantbeef> That works so well for things like llvm üòÄ
[03:12:57] <anddam> now instructions have a build.sh script and then "koch"
[03:13:09] <FromDiscord> <dom96> In reply to @gibson "I could do a": you have my full support üôÇ
[03:13:14] <anddam> Elegantbeef, those tools now seems nice
[03:13:23] <FromDiscord> <Yardanico> In reply to @anddam "mm did build from": you can still build it the old way, but build_all.sh is just easier
[03:13:24] <anddam> Elegantbeef: choosenim and gitnim
[03:13:38] <FromDiscord> <Elegantbeef> I mean they're super nice since you can easily change versions and even go to develop
[03:14:00] <FromDiscord> <Elegantbeef> But it's just `./build_all.sh` and then `./koch boot -d:danger` for that slightly faster compiler
[03:14:08] <anddam> I don't particularly like having ~/nimble, can I tweak that using choosenim or gitnim?
[03:14:24] <anddam> x/nimble/ i/./
[03:14:47] <FromDiscord> <Elegantbeef> No clue if you can change it's install path
[03:15:33] <FromDiscord> <ajusa> In reply to @ajusa "I used the Nim": Alright, I just tried it myself on a windows machine. When compiling with Nim 1.6, no issues. When compiling with 1.4.2, it fails to find the certificates it seems.
[03:15:48] <FromDiscord> <ajusa> 1.4.2 is the latest on MX Linux, which is what one of my computers run
[03:15:52] <FromDiscord> <Elegantbeef> Ah yes 1.4.2 had an issue with that i believe
[03:16:10] <FromDiscord> <Elegantbeef> This is why languages on package managers suck
[03:16:16] <FromDiscord> <Yardanico> you should at least update to 1.4.8 which has bugfixes :)
[03:16:20] <FromDiscord> <Yardanico> 1.6. would be even better
[03:16:25] <FromDiscord> <ajusa> Yeah I'll try using choosenim on that machine instead in the future
[03:18:19] <FromDiscord> <dom96> anddam: https://github.com/nim-lang/nimble#configuration
[03:19:01] <FromDiscord> <dom96> choosenim reads this too (I hope)
[03:20:44] <anddam> thanks
[03:25:03] <FromDiscord> <gibson> Question for you smart folks: I'm looking at generated release c-code, is there any way I can make a `converter` apply at compile time if it is able? Like an enum to int converter operating on a literal, for instance.
[03:26:29] <FromDiscord> <Elegantbeef> I dont think so
[03:27:22] <FromDiscord> <gibson> Bummer. Thanks.
[03:29:38] <FromDiscord> <Elegantbeef> It's likely it gets inlined so it'll be cheap
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:34:45] <FromDiscord> <gibson> Yes, it just seems unnecessary, and means the syntax cleanliness comes with a non-zero cost.
[03:34:59] <anddam> considering this definition https://github.com/nimgl/imgui/blob/de9928dd091c29e4a6d9fa43e50219878730eb66/src/imgui.nim#L3016
[03:35:12] <FromDiscord> <Yardanico> In reply to @gibson "Yes, it just seems": do you mean something like int(myEnumValue) ?
[03:35:28] <FromDiscord> <gibson> @Yardanico exactly.
[03:35:29] <FromDiscord> <Yardanico> this will be zero-cost with a normal C compiler like GCC or Clang
[03:35:34] <FromDiscord> <Yardanico> or most others
[03:35:43] <FromDiscord> <gibson> Oh really? okay, great.
[03:35:45] <anddam> this block https://github.com/nimgl/imgui#usage  should actually have  `igSliderFloat("float", addr(f), 0.0f, 1.0f)`   with addr() right?
[03:35:59] <FromDiscord> <Yardanico> In reply to @anddam "this block https://github.com/nimgl/imgui#usage ": yes, that example is largely outdated
[03:36:09] <FromDiscord> <Yardanico> you should check tests/test.nim
[03:36:17] <anddam> Yardanico: ok but I have to start somewhere
[03:36:24] <anddam> oh thanks for the pointer
[03:37:54] <anddam> why does the manual refer to addr() as an operator if it's not listed at https://nim-lang.org/docs/manual.html#lexical-analysis-operators ?
[03:38:57] <FromDiscord> <Elegantbeef> Those are talking about symbol operators and `addr` is not a symbol operator üòÄ
[03:39:38] <FromDiscord> <Elegantbeef> Oh i missed the other operators, i think it's not overridable
[03:39:45] <FromDiscord> <Elegantbeef> As such it doesnt need to be mentioned there
[03:45:39] <anddam> last question (for tonight) the executables cannot load cimgui.so, shouldn't the nimgl/imgui package I installed have built that object?
[03:49:23] <FromDiscord> <Elegantbeef> I could be wrong but if you're using the C backend you need to build the shared object yourself, but when using C++ it'll work fine
[03:50:18] <FromDiscord> <Yardanico> yes, you're right
[03:50:31] <FromDiscord> <Yardanico> imgui is a C++ library and cimgui provides a C interface for that, so you need to build it yourself
[03:50:38] <FromDiscord> <Yardanico> or use Nim's C++ backend, then it'll use imgui directly
[03:58:17] <anddam> Yardanico: with cpp I then get errors since imageguie functions are not declared,  https://termbin.com/ptcj
[03:59:07] <anddam> could this possibly be due to the use of     proc igText*(fmt: cstring): void {.importc: "igText", varargs.}     in imgui.nim, so that .cimport won't work with C++ backend?
[03:59:07] <FromDiscord> <Yardanico> weird, it shouldn't use cimgui when compiling with C++
[04:00:24] <FromDiscord> <Elegantbeef> `importC` is just "importBackend" basically
[04:01:30] <anddam> I see, I built the cmimgui carried by imgui nim package
[04:01:36] <anddam> at /home/anddam/.nimble/pkgs/imgui-1.84.2/imgui/private/cimgui
[04:02:20] *** Quits: yarrie (~yarrie@213.18.184.86) (Read error: Connection reset by peer)
[04:02:48] <FromDiscord> <Yardanico> and how did you install imgui itself?
[04:03:07] <FromDiscord> <Yardanico> I just did `nimble install https://github.com/nimgl/imgui.git` . copied the example from https://github.com/nimgl/imgui/blob/master/tests/test.nim and it works with `nim cpp -r test.nim`
[04:04:01] <FromDiscord> <Yardanico> can you try adding `-f` to see if that helps? or maybe you modified any imgui files manually so that it doesn't work now?
[04:04:51] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:07:33] <anddam> I did not install imgui at all, it's in cimgui
[04:08:06] <FromDiscord> <Yardanico> huh?
[04:08:11] <FromDiscord> <Yardanico> nonono, you didn't understand
[04:08:17] <FromDiscord> <Yardanico> cimgui is only needed if you compile with the C backend
[04:08:27] <FromDiscord> <Yardanico> if you compile with the C++ backend you just install imgui and use it
[04:09:43] <anddam> Yardanico: ok, but since that did not work, with the C++ backend I tried to build cimgui and use the C backend
[04:12:23] <anddam> this is with -f  https://termbin.com/cz0s
[04:12:59] <anddam> oh, my bad, I was trying back the "minimal" example of README
[04:13:06] <anddam> test.nim does actually build
[04:13:13] <anddam> and works too
[04:15:44] <anddam> just for the sake of curiosity, I tried to build the cimgui.so object and placed it near the executable and I get a segfault
[04:15:55] <anddam> what would be a proper way to use the C backend?
[04:16:15] <FromDiscord> <Yardanico> In reply to @anddam "just for the sake": as in?
[04:16:30] <FromDiscord> <Yardanico> first of all, on Linux you also need to make it use that .so file because it doesn't search for them in the current directory
[04:16:51] <FromDiscord> <Yardanico> with LD_LIBRARY_PATH for example
[04:17:01] <FromDiscord> <Yardanico> `LD_LIBRARY_PATH=. ./mybinary`
[04:18:59] <anddam> or place some dir where ld looks
[04:19:11] <anddam> I guess ~/.local/lib fits
[04:19:38] <FromDiscord> <Yardanico> nope
[04:21:07] <anddam> LD_LIBRARY_PATH=. I get the same segfault that I do without
[04:21:25] <FromDiscord> <Yardanico> what's the error message?
[04:21:28] <FromDiscord> <Yardanico> assuming you compiled in debug mode
[04:21:42] <anddam> $ file cimgui.so
[04:21:45] <anddam> cimgui.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=7e1f2d3a229c937fe8df1c62675b9404461fcb8a, with debug_info, not stripped
[04:22:12] <anddam> https://termbin.com/ljxd
[04:22:44] <anddam> oh wait, I am a double-idiot 
[04:22:44] <FromDiscord> <Yardanico> well because the code in that readme is not valid as I've said before
[04:22:46] <FromDiscord> <Yardanico> how did you modify it?
[04:22:54] <FromDiscord> <Yardanico> did you do `var f: ptr float32` by any chance?
[04:23:12] <FromDiscord> <Yardanico> the proper way would be to do igSliderFloat("float", addr f, ...) instead and just have it the same value
[04:25:07] <anddam> I went with the latter, addr(f)
[04:25:13] <FromDiscord> <Yardanico> hm
[04:25:33] *** Joins: rockcavera (~rc@192.12.114.202)
[04:25:33] *** Quits: rockcavera (~rc@192.12.114.202) (Changing host)
[04:25:34] *** Joins: rockcavera (~rc@user/rockcavera)
[04:25:37] <FromDiscord> <Yardanico> in any case, that example is not really usable as you don't even have a drawing loop
[04:25:48] <FromDiscord> <Yardanico> it's segfaulting because you didn't set up any contexts and stuff
[04:26:18] <FromDiscord> <Yardanico> so just use the example from tests/tests.nim and simplify it to your needs
[04:27:17] <FromDiscord> <gibson> @Yardanico Re: converter and int(enum) elision, godbolt confirms that with -O3 the compiler inlines everything and reduces the code to what I was expecting. Thanks! Very nice.
[04:27:46] <anddam> Yardanico: yep, that's what the double-idiot part was from, I figured that since I can build test.nim with the C backend and cimgui.so
[04:27:48] <FromDiscord> <Yardanico> In reply to @gibson "<@!177365113899057152> Re: converter and": -O3 is what Nim passes by default when you compile with -d:release or -d:danger btw
[04:27:58] <anddam> Yardanico: so I am stripping down the example
[04:28:01] <FromDiscord> <gibson> Yup! That's why I had to check with O3.
[04:28:04] <anddam> thanks *a lot*
[04:28:44] <FromDiscord> <gibson> It wasn't clear because with -d:release nim still generates the C code function call etc.
[04:28:58] <FromDiscord> <Yardanico> In reply to @gibson "Yup! That's why I": and yeah, this is a free conversion because enums are really just integers on the C side
[04:29:02] <FromDiscord> <Yardanico> `typedef NU8 tyEnum_DataCuDfe3rZKZRY6AsMu2JJnw;`
[04:29:15] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/912145168419917844/unknown.png
[04:29:50] <FromDiscord> <gibson> ü§∑ I have long since given up claiming I "know" what the compiler is doing, and will happily defer to experts like you!
[04:30:01] <FromDiscord> <Yardanico> i'm far from being an expert :)
[04:30:17] <FromDiscord> <gibson> I scraped together all the typedefs and defines from nimbase etc. so my small example actually runs.
[04:30:32] <FromDiscord> <Yardanico> i don't know most of the stuff what compilers do either
[04:30:34] <FromDiscord> <Yardanico> In reply to @gibson "I scraped together all": heh
[04:31:07] <FromDiscord> <Yardanico> In reply to @gibson "I scraped together all": any reason you had to do that btw? godbolt supports Nim (even thought the support is far from perfect)
[04:31:18] <anddam> just as info 1.6.0 is ready to merge on Void https://github.com/void-linux/void-packages/pull/34106
[04:32:31] <FromDiscord> <gibson> @Yardanico Oh my gosh, that's awesome. Last time I checked was a couple years ago and it was not there ü§¶‚Äç‚ôÇÔ∏è should've checked again.
[04:33:00] <FromDiscord> <Yardanico> also I'd recommend you to use `-d:danger --gc:arc` when checking stuff on godbolt for minimum assembly size
[04:33:21] <FromDiscord> <Yardanico> maybe even with LTO
[04:33:24] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[04:33:31] <FromDiscord> <gibson> Good pointers, thanks.
[04:34:30] *** Joins: xet7 (~xet7@user/xet7)
[04:34:57] <FromDiscord> <Yardanico> as you can see there's no real cost, it just moves the value with zero-extend (so 8-bit becomes 64-bit) https://media.discordapp.net/attachments/371759389889003532/912146594550390794/unknown.png
[04:35:19] <FromDiscord> <Yardanico> and if you return `int8` instead it's just a simple `mov`
[04:36:04] <FromDiscord> <gibson> I was very unsure if that and the converter fn call would all get optimized away. Having this built into godbolt is great and will help a lot as I learn more.
[04:36:27] <FromDiscord> <Yardanico> but yeah, about godbolt specifically - main problem with Nim is that it only allows you to view the assembly for the main module (the one you're editing on the left), it doesn't include assembly from other files (like stdlib)
[04:36:33] <FromDiscord> <Yardanico> which might be pretty confusing
[04:37:38] <FromDiscord> <gibson> Yes, I see that. Good and bad, because it definitely reduces the output, which is nice most of the time.
[04:38:00] <FromDiscord> <Yardanico> In reply to @gibson "I was very unsure": it's not a "converter" really, it's a safe type conversion, those things are (almost) free in Nim
[04:38:15] <FromDiscord> <Yardanico> i mean, even with a couple more assembly instructions the speed will probably be the same :)
[04:40:52] <FromDiscord> <gibson> My OP question was about Nim `converter`s and if they get optimized away for literals. I knew the type-safe conversions are free, but wasn't sure if I needed to explicitly write that or if the converter fn call in the generated c code would get optimized away.
[04:41:48] <FromDiscord> <Yardanico> In reply to @gibson "My OP question was": well, `converter`s won't get optimized on the Nim side obviously, it's up to the C compiler
[04:41:56] <FromDiscord> <Yardanico> converters are what's used to implicitly convert types in Nim
[04:42:16] <FromDiscord> <Yardanico> hm, actually it might with a const, lemme see
[04:42:19] <FromDiscord> <gibson> I was naively trying to put `{.compileTime.}` on the converter.
[04:42:43] <FromDiscord> <Yardanico> that makes it only work in compileTime, so when you're compiling the program
[04:42:59] <FromDiscord> <gibson> Yeah, I wanted the literals transformed.
[04:43:28] <FromDiscord> <gibson> Anyway, thanks, all confusion resolved!
[04:55:09] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[05:12:11] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[05:13:13] <FromDiscord> <gibson> @Yardanico Interesting, Using Nim support in godbolt, I can't actually show an A/B comparison of this optimization. Using a converter on an enum for int(enum) adds 22 instructions. `-d:release --gc:arc --passL:-flto`  https://godbolt.org/z/7W9j1Prfq
[05:13:51] <FromDiscord> <Yardanico> What happens if you add {.inline.} to the converter?
[05:14:49] <FromDiscord> <gibson> Then it indeed inlines the instruction obviating a jump, but otherwise it's the same outcome.
[05:15:13] <FromDiscord> <Yardanico> well, that's to be expected, converters are normal functions except called implicitly in nim
[05:15:51] <FromDiscord> <Yardanico> Usually it's recommended to avoid them, but they can be useful, yes
[05:16:03] <FromDiscord> <gibson> What I really want is a `template converter` üòÜ
[05:17:07] <FromDiscord> <gibson> It is definitely clearer to write `int(thing)` everywhere, but starts to add visual noise.
[05:17:48] <FromDiscord> <gibson> I'll just refactor to reduce.
[05:27:29] <FromDiscord> <impbox [ftsf]> hmm so my app is segfaulting, i'd like to get a stacktrace of where it's happening, any way to do this?
[05:28:00] <FromDiscord> <impbox [ftsf]> I see there's std/segfaults i tried importing that, but i'm not sure how to use it to get something useful to track down where it's happening
[05:28:55] <FromDiscord> <Elegantbeef> best to use `gdb` or similar and build it with `--debugger:native`
[05:29:38] <FromDiscord> <impbox [ftsf]> ack, will try that
[05:29:52] <FromDiscord> <impbox [ftsf]> i seem to recall getting stacktraces for segfaults in nim in the past, or am i imagining that?
[05:30:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FKr
[05:30:52] <FromDiscord> <impbox [ftsf]> ohh, shakes fist at beef it's crashing because i uncommented my gl debug thing to test if it crashed for me too haha
[05:30:53] <FromDiscord> <Elegantbeef> So it should happen if it's caused by nim code
[05:38:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:24:39] <FromDiscord> <ùôßùôöùô¢> how do i create a table from constant data
[06:24:51] <FromDiscord> <ùôßùôöùô¢> eg this should be a table
[06:24:51] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FKz
[06:25:42] <FromDiscord> <Elegantbeef> `.toTable`
[06:26:05] <FromDiscord> <Elegantbeef> `{"a": "b"}` creates an array of tuples
[06:26:07] <FromDiscord> <ùôßùôöùô¢> does .newTable work to?
[06:26:27] <FromDiscord> <Elegantbeef> well they're different semantics
[06:26:36] <FromDiscord> <Elegantbeef> `new` implies a ref Table
[06:26:55] <FromDiscord> <Elegantbeef> the table is kinda useless anyway
[06:27:07] <FromDiscord> <ùôßùôöùô¢> ah ok
[06:27:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FKA
[06:29:46] <FromDiscord> <ùôßùôöùô¢> thats a lot better damn
[06:30:04] <FromDiscord> <ùôßùôöùô¢> im kinda doing this atm, any better way?
[06:30:09] <FromDiscord> <ùôßùôöùô¢> sorry for the spam
[06:30:11] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=3FKB
[06:30:12] <FromDiscord> <ùôßùôöùô¢> im kinda doing this atm, any better way?
[06:31:07] <FromDiscord> <Elegantbeef> `const Keywords = {tkConst..tkWhile}`  ... `of Keywords`
[06:31:18] <FromDiscord> <ùôßùôöùô¢> wdym
[06:31:32] <FromDiscord> <Elegantbeef> make a bitset for keywords instead of manually making trees
[06:31:36] <FromDiscord> <Elegantbeef> same for operators
[06:31:43] <FromDiscord> <ùôßùôöùô¢> could u give an example
[06:31:46] <FromDiscord> <Elegantbeef> `const operators = {tkPlus .. tkGreaterEqual}`
[06:32:05] <FromDiscord> <ùôßùôöùô¢> i struggle to see how this is cleaner
[06:32:22] <FromDiscord> <ùôßùôöùô¢> could u provide a full example pls?
[06:33:05] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3FKE
[06:33:21] <FromDiscord> <ùôßùôöùô¢> ah i see
[06:33:24] <FromDiscord> <ùôßùôöùô¢> thats a lot nicer
[06:34:13] <FromDiscord> <Elegantbeef> Then you can also do things like `someKind in Operators` or `someKind in Keywords` or `someKind notin (Operators + Keywords)` üòõ
[06:34:20] <FromDiscord> <ùôßùôöùô¢> ahhh
[06:34:21] <FromDiscord> <ùôßùôöùô¢> i see
[06:34:42] <FromDiscord> <Elegantbeef> It's how we do bitflags in Nim
[06:34:53] <FromDiscord> <ùôßùôöùô¢> wdym by that
[06:35:27] <FromDiscord> <Elegantbeef> Instead of `tkPlus or tkMinus or tkStar`.... we can do a set of the range which takes bit per value
[06:35:36] <FromDiscord> <ùôßùôöùô¢> ohh i see
[06:35:38] <FromDiscord> <ùôßùôöùô¢> thats cool
[06:35:52] <FromDiscord> <Elegantbeef> And then when checking if it's in it you do `tkPlus in yourSet` instead of `tkPlus and yourSet == tkPlus`
[06:36:47] <FromDiscord> <ùôßùôöùô¢> how do i check if the string is a member of keywords tho?
[06:37:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FKG
[06:38:32] <FromDiscord> <ùôßùôöùô¢> do i need to do `tkConst = "const"`
[06:38:35] <FromDiscord> <ùôßùôöùô¢> in my enum?
[06:38:37] <FromDiscord> <Elegantbeef> Yes
[06:39:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FKH
[06:40:23] <FromDiscord> <Elegantbeef> There are many ways to handle this stuff
[06:51:46] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:34:07] *** Joins: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be)
[07:34:07] *** Quits: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be) (Changing host)
[07:34:07] *** Joins: Colt2 (~Colt@user/colt)
[07:35:01] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:12] *** Quits: Colt2 (~Colt@user/colt) (Client Quit)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:01] *** Joins: Colt (~Colt@user/colt)
[07:45:55] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3FKN
[07:46:48] <FromDiscord> <Hamid Bluri> isn't it wierd : /
[07:46:51] <FromDiscord> <Hamid Bluri> (edit) "isn't it wierd : / ... " 03added "?"
[07:49:57] <FromDiscord> <Hamid Bluri> deleted my message - sorry it was a mistake
[08:18:27] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[08:18:57] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[08:33:03] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 265 seconds)
[08:36:00] *** Joins: mahlon (~mahlon@martini.nu)
[09:14:18] *** Joins: sagax (~sagax_nb@user/sagax)
[09:18:48] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:19:57] *** Joins: flynn (~mcbloch@user/flynn)
[09:24:59] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[09:24:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:25:00] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:25:00] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[09:25:00] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:25:09] *** Joins: greaser|q (greaser@antihype.space)
[09:25:28] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[09:25:35] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[09:25:35] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:27:50] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:27:50] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:27:52] *** greaser|q is now known as GreaseMonkey
[09:33:15] <FromDiscord> <creikey> Is there a difference between `pointer` and `ptr object`
[09:35:18] <FromDiscord> <Elegantbeef> What's the context?
[09:35:25] <FromDiscord> <Elegantbeef> `pointer` is a void pointer which accepts any pointer
[09:36:35] *** Joins: Ekho (~Ekho@user/ekho)
[09:37:46] <FromDiscord> <creikey> In reply to @Elegantbeef "What's the context?": https://livebook.manning.com/book/nim-in-action/chapter-8/151
[09:38:31] <FromDiscord> <creikey> difference between `proc pollEvent(event: pointer)` and `proc pollEvent(event: ptr object)`
[09:38:48] <FromDiscord> <creikey> when using the importc pragma and linking to a dynlib (sdl)
[09:39:10] <FromDiscord> <Elegantbeef> In that case `ptr object` should be a constraint of any `ptr object`
[09:39:15] <FromDiscord> <Elegantbeef> Atleast afaik
[09:40:13] <FromDiscord> <creikey> In reply to @Elegantbeef "In that case `ptr": what
[09:41:08] <FromDiscord> <creikey> my reasoning is `SdlWindow = object` was defined above as like an "opaque struct" where we don't care about its fields, so if here we need an `SDL_Event` you can just do `ptr object` instead of defining a separate typ
[09:41:10] <FromDiscord> <creikey> (edit) "typ" => "type"
[09:41:19] <FromDiscord> <Elegantbeef> `proc pollEvent(event: ptr object)` is a generic equivlent to `proc pollEvent[T](event: ptr T)`
[09:41:26] <FromDiscord> <creikey> (edit) "fields," => "fields then used later like `ptr SdlWindowPtr`,"
[09:42:02] <FromDiscord> <creikey> In reply to @Elegantbeef "`proc pollEvent*(event: ptr object)`": how does this compare to `pointer`?
[09:42:14] <FromDiscord> <Elegantbeef> pointer takes any `ptr T`
[09:42:19] <FromDiscord> <Elegantbeef> so even `ptr int`
[09:42:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FL2
[09:43:17] <FromDiscord> <Elegantbeef> B is an object definition that is a `ptr` not an alias, which i guess is confusing
[09:43:33] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3FL3
[09:43:38] <FromDiscord> <creikey> so it is ptr object
[09:43:41] <FromDiscord> <creikey> but it's not the address
[09:43:51] <FromDiscord> <creikey> but the address is ptr object so why is it not B if B is ptr object
[09:44:11] <FromDiscord> <Elegantbeef> B is a unique type
[09:44:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FL4
[09:44:37] <FromDiscord> <Elegantbeef> That's valid for instance
[09:44:58] <FromDiscord> <Elegantbeef> as a parameter `ptr object` is just like `object` it will only take a pointer to an object
[09:44:59] <FromDiscord> <creikey> In reply to @Elegantbeef "B is a unique": so `B is ptr object` but `ptr object isnot B`
[09:45:53] <FromDiscord> <Elegantbeef> just like `proc doThing(a: object)` will take any object
[09:46:05] <FromDiscord> <Elegantbeef> It's a generic in this context
[09:47:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FL5
[09:47:54] <FromDiscord> <Rika> Should have made y a string
[09:47:55] <FromDiscord> <creikey> those both work?
[09:48:21] <FromDiscord> <creikey> In reply to @Elegantbeef "It's a generic in": is it a generic like it'll generate function definitions for all valid types its used with
[09:48:27] <FromDiscord> <Elegantbeef> Yes cause `object` is a implict generic
[09:48:32] <FromDiscord> <Elegantbeef> it's a generic typeclass
[09:49:25] <FromDiscord> <Elegantbeef> Which is what `ptr object` is based on `object` is a typeclass so the proc is generic and turned into `proc doThing[T](a: ptr[T])`
[09:49:45] <FromDiscord> <creikey> so `proc doThing(a: pointer) = echo a` can take `addr(5)` but `proc doThing(a: ptr object) = echo a` can't
[09:49:55] <FromDiscord> <creikey> ptr to generic type
[09:50:42] <FromDiscord> <Elegantbeef> yep
[09:50:49] <FromDiscord> <Elegantbeef> cause `int isnot object`
[09:50:53] <FromDiscord> <creikey> right
[09:50:58] <FromDiscord> <creikey> so it's not a generic that can take any type
[09:51:01] <FromDiscord> <creikey> only things that `is object`
[09:51:38] <FromDiscord> <Elegantbeef> yea i messed up it should've been `proc doThing[T: object](a: ptr[T])`
[09:51:59] <FromDiscord> <creikey> In reply to @Elegantbeef "yea i messed up": I haven't read the metaprogramming chapter or tutorial, is there something like rust's traits for generics or java's/golang's interfaces where you specify what you want the generic type to be able to do
[09:52:12] <FromDiscord> <Rika> No
[09:52:30] <FromDiscord> <Rika> Well ‚Äúno‚Äù
[09:52:41] <FromDiscord> <Elegantbeef> There are concepts which do that
[09:52:43] <FromDiscord> <creikey> oh you gotta use objects for polymorphism
[09:52:46] <FromDiscord> <creikey> like inheritance
[09:52:52] <FromDiscord> <creikey> and there isn't multiple inheritance or interfaces
[09:53:02] <FromDiscord> <Rika> Object and others are special cases, otherwise you need to ‚Äúor‚Äù types if you want to limit them
[09:53:22] <FromDiscord> <Rika> Concepts are experimental
[09:53:26] <FromDiscord> <creikey> concepts lol
[09:53:39] <FromDiscord> <creikey> In reply to @Rika "Concepts are experimental": it's still conceptual
[09:53:50] <FromDiscord> <Rika> It is not, it is implemented
[09:54:04] <FromDiscord> <creikey> I would be very concerned if concepts aren't conceptual
[09:54:07] <FromDiscord> <creikey> then they must've done something wrong
[09:55:06] *** Joins: theoroer (~theoroer@212.252.142.249)
[09:55:10] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3FL8
[09:55:24] <theoroer> why are `dup` in `sugar` and `with` in `std/with` named differently and in different modules when they have the same implementation
[09:55:25] <FromDiscord> <creikey> then I want to make a bunch of different Thing s with different data and they each have their own draw method
[09:55:46] <FromDiscord> <Rika> They aren‚Äôt the same
[09:56:14] <FromDiscord> <Rika> In reply to @creikey "what if I have": Needs ref objects and inheritance. Concepts are compile time
[09:56:18] <FromDiscord> <Elegantbeef> Single parent inheritance might be the solutio nthere crikey
[09:56:45] <theoroer> https://github.com/nim-lang/Nim/blob/version-1-6/lib/std/with.nim#L38-L39 https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/sugar.nim#L284-L288
[09:57:18] <FromDiscord> <creikey> In reply to @Rika "Needs ref objects and": how could something like that be done at compile time? you need the vtable right
[09:57:31] <FromDiscord> <Rika> Look again, with is a statement, dup is an expression is it not?
[09:57:50] <FromDiscord> <Rika> In reply to @creikey "how could something like": It is checked on compile time. You cannot store a concept in a sequence
[09:58:06] <FromDiscord> <Rika> Concepts do not exist on runtime
[09:58:13] <theoroer> stmtlistexpr and stmtlist are semantically the same
[09:58:26] <FromDiscord> <Elegantbeef> They do different things
[09:58:48] <theoroer> but they both use an std/private module when they could just both be in the same module
[09:58:54] <FromDiscord> <Elegantbeef> with allows you to do `.things` dup takes a proc call that takes `var T` and copies inline calling it and returning the `var`
[09:59:04] <FromDiscord> <Elegantbeef> Sure they could be it's bad that they're seperated
[09:59:21] <FromDiscord> <Rika> The reason they are in other modules is because of a lot of things
[09:59:45] <theoroer> if im not mistaken you could literally define dup as a template over with
[09:59:57] <FromDiscord> <Rika> I would have personally called ‚Äúwith‚Äù ‚Äúexpand fields‚Äù instead
[10:00:31] <theoroer> what do you mean, it doesn't deal with fields at all
[10:00:58] <FromDiscord> <Rika> Am I thinking of another with then
[10:01:07] <FromDiscord> <Rika> See this is why it‚Äôs a bad name
[10:01:12] <theoroer> https://nim-lang.org/docs/with.html#with.m%2Ctyped%2Cvarargs%5Buntyped%5D
[10:03:00] <FromDiscord> <Rika> Okay yes this is a different with from what I remember
[10:03:01] <theoroer> lol, there is a nimble package named with that is different, but the std with is also in its own module for some reason
[10:03:08] <FromDiscord> <Rika> Yes
[10:03:13] <FromDiscord> <Rika> It fucks with your head
[10:03:19] <FromDiscord> <Rika> I just checked the standard with
[10:03:26] <FromDiscord> <Rika> Yeah I don‚Äôt see how this is much different from dup
[10:04:04] <theoroer> weirdest decision ever to do it like this
[10:04:18] <FromDiscord> <Rika> I assume they were implemented at other times
[10:04:26] <FromDiscord> <Rika> I mean different times
[10:05:13] <FromDiscord> <Elegantbeef> Luckily `std/with` sucks anyway afaik
[10:05:19] <FromDiscord> <Elegantbeef> Not that I have really used it
[10:07:59] <FromDiscord> <creikey>  https://media.discordapp.net/attachments/371759389889003532/912230411395006484/unknown.png
[10:08:56] *** Quits: theoroer (~theoroer@212.252.142.249) (Ping timeout: 256 seconds)
[10:09:20] <FromDiscord> <Rika> Nice
[10:10:00] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/theindex.html save yourself from an embarrassing search history üòõ
[10:10:42] <FromDiscord> <creikey> nim supports peg??
[10:10:49] <FromDiscord> <creikey> (edit) "peg??" => "peg matching??"
[10:11:41] <FromDiscord> <creikey> the code isn't even that complicatd
[10:11:43] <FromDiscord> <creikey> (edit) "complicatd" => "complicated"
[10:11:58] <FromDiscord> <Elegantbeef> There's an even cooler implementation in https://github.com/zevv/npeg
[10:12:07] <FromDiscord> <Elegantbeef> But yes the stdlib has `PEG`
[10:12:19] <FromDiscord> <creikey> it's like 2k lines and it looks just like peg but it's in nim
[10:25:37] <Zevv> 1.5k, effectively :)
[10:30:26] *** Joins: theoroer (~theoroer@78.185.241.12)
[10:50:04] *** Quits: theoroer (~theoroer@78.185.241.12) (Quit: Client closed)
[10:51:50] <FromDiscord> <claude> are identifiers as template calls documented? they're everywhere but I don't remember seeing the documentation for them anywhere
[10:52:41] <FromDiscord> <Rika> What?
[10:53:31] <FromDiscord> <Elegantbeef> Give a concrete example and we might be able to help
[10:53:38] <FromDiscord> <Elegantbeef> There are two things you may be talking about
[10:55:21] <FromDiscord> <claude> `template name: untyped = 3; echo name  3`
[10:56:01] <FromDiscord> <Elegantbeef> Ah yea that's what i thought, i dont think it's documented specifically anywhere
[10:56:01] <FromDiscord> <Rika> Why would you do that over a constant?
[10:56:15] <FromDiscord> <Elegantbeef> It's just an example rika, you can do it for anything
[10:56:22] <FromDiscord> <claude> for the sake of the example
[10:56:33] <FromDiscord> <Rika> I know but even expanding outward I do not see a reason
[10:57:12] <FromDiscord> <claude> would you have preferred i write it out longer
[10:57:18] <FromDiscord> <Elegantbeef> I use it in the nimscript interop so you dont have to do `time()`
[10:58:05] <FromDiscord> <Elegantbeef> but yea it's often needed/desired i reason, i think the case is just you cannot do `var a = someTemplate` so it only makes sense to expand macros/templates when their name appears and they take no arguments
[10:58:12] <FromDiscord> <Elegantbeef> it's not often needed/desired
[10:59:23] *** Joins: theoroer (~theoroer@78.185.241.12)
[11:02:34] *** Joins: PMunch (~PMunch@user/pmunch)
[11:56:12] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[12:00:12] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:00:38] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[12:00:39] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[12:00:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:00:48] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[12:47:36] *** Quits: theoroer (~theoroer@78.185.241.12) (Ping timeout: 256 seconds)
[12:58:34] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:58:35] *** Quits: elph (uid286227@id-286227.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:04] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[12:59:04] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 260 seconds)
[12:59:11] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:22] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** Joins: ormiret (sid314108@lymington.irccloud.com)
[13:00:23] *** Joins: elph (uid286227@lymington.irccloud.com)
[13:00:28] *** Joins: robertmeta (sid514@user/robertmeta)
[13:00:33] *** Joins: euantorano (sid180289@helmsley.irccloud.com)
[13:02:19] *** Joins: notchris (sid181145@hampstead.irccloud.com)
[13:03:13] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[13:16:44] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:30:41] <NimEventer> New Nimble package! threading - New atomics, thread primitives, channels and atomic refcounting for --gc:arc/orc., see https://github.com/nim-lang/threading
[14:03:46] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[14:18:43] *** Joins: advesperacit (~advespera@84.17.36.141)
[14:25:25] *** Joins: Guest66 (~Guest66@85.249.18.19)
[14:26:21] *** Quits: Guest66 (~Guest66@85.249.18.19) (Client Quit)
[14:26:41] *** Joins: Guest66 (~Guest66@85.249.18.19)
[14:27:42] <advesperacit> Does anyone have experience compiling statically linked binaries from nim? Using musl-gcc my code compiles but fails to run with "Dynamic loading not supported" and "could not load: libcrypto.so(.1.1|...)"
[14:29:19] <FromDiscord> <Yardanico> In reply to @advesperacit "Does anyone have experience": that's because when compiling statically with musl you won't be able to load shared libraries, and you're using httpclient with -d:ssl (or just -d:ssl with net) which requires openssl
[14:29:27] <FromDiscord> <Yardanico> so you need to also link openssl (or libressl) statically
[14:29:28] *** Quits: Guest66 (~Guest66@85.249.18.19) (Client Quit)
[14:30:29] *** Joins: sagax (~sagax_nb@user/sagax)
[14:30:37] <FromDiscord> <Yardanico> for libressl you can compile it statically and compile your nim code with flags like this
[14:30:45] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3FMi
[14:31:24] <FromDiscord> <Yardanico> (threads:on enables pthreads which seem to be required for libressl)
[14:32:14] <FromDiscord> <lenis> pretty annoying that threads:on doesnt work with librtl
[14:32:24] <advesperacit> Thanks! I'll try to get it working with that. I'm using both threads and ssl.
[14:38:43] <FromDiscord> <lenis> does anyone know how arc/orc performs relative to refc or markAndSweep
[14:39:16] <FromDiscord> <lenis> I heard that arc/orc is recommended in modern nim but i thought that GCs are generally substantially faster than simple reference countingh
[14:39:18] <FromDiscord> <lenis> (edit) "countingh" => "counting"
[14:39:21] <FromDiscord> <Yardanico> the answer is - it depends
[14:39:28] <FromDiscord> <Yardanico> see https://nim-lang.org/blog/2020/12/08/introducing-orc.html
[14:39:33] <FromDiscord> <Yardanico> arc itself is just refcounting with RAII and other nice stuff
[14:39:36] <FromDiscord> <Rika> Do you aim for latency, throughput, or (I forgot the last one)
[14:39:45] <FromDiscord> <Yardanico> In reply to @Rika "Do you aim for": memory usage
[14:39:46] <FromDiscord> <Yardanico> (edit) "usage" => "usage?"
[14:39:50] <FromDiscord> <Rika> Not sure
[14:39:55] <FromDiscord> <Rika> I think
[14:40:20] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[14:40:53] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[14:40:53] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[14:40:53] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:40:56] <FromDiscord> <lenis> memory usage should be ARC/ORC, especially with useMalloc
[14:41:03] <FromDiscord> <lenis> but i mean throughput
[14:41:32] <FromDiscord> <Yardanico> i think for throughput markAndSweep might be faster, but you should always benchmark for your specific case
[14:42:12] <FromDiscord> <Yardanico> In reply to @Yardanico "see https://nim-lang.org/blog/2020/12/08/introducin":  https://media.discordapp.net/attachments/371759389889003532/912299417871187998/unknown.png
[14:42:40] <FromDiscord> <Yardanico> this is a bit of a biased example of course, but still
[14:42:43] <FromDiscord> <Yardanico> always check for yourself :)
[14:44:47] <FromDiscord> <Yardanico> but yes, arc/orc are really good for any kind of interop or for more "weird" targets like webassembly
[14:45:02] <FromDiscord> <Yardanico> refc won't work on things like webassembly at all, not sure about m&s
[14:50:18] <FromDiscord> <lenis> lol, the first example in that post runs a full gc every 10 requests
[14:50:39] <FromDiscord> <lenis> yeah so the second is about what i'd expect. but the difference is surprisingly small
[14:50:42] <FromDiscord> <Rika> It can happen
[14:51:02] <FromDiscord> <Rika> It‚Äôs not small I‚Äôd say
[14:51:23] <FromDiscord> <Yardanico> In reply to @Rika "It‚Äôs not small I‚Äôd": it is
[14:51:30] <FromDiscord> <Yardanico> orc and m&s are very different so that difference is quite small
[14:51:32] <FromDiscord> <Rika> Is it that small?
[14:51:42] <FromDiscord> <Yardanico> 35k vs 40k req/sec in that post
[14:51:49] <FromDiscord> <Rika> Oh you mean throughput
[14:51:52] <FromDiscord> <lenis> 13% slower on ORC
[14:51:55] <FromDiscord> <Rika> Yeah I guess
[14:52:02] <FromDiscord> <Yardanico> and latency is much much lower on ORC
[14:52:04] <FromDiscord> <Yardanico> along with memory
[14:52:12] <FromDiscord> <lenis> and that benchmark is quite harsh in memory allocation
[14:52:27] <FromDiscord> <lenis> all data is allocated in the heap and short lived
[14:58:12] <FromDiscord> <lenis> I do wonder how it compares to refc with GC_step control
[14:58:30] <FromDiscord> <Rika> Benchmark time
[15:24:03] <FromDiscord> <Fish-Face> Is there type that can provide 64bit integers on the JS target? I am doing a demo for some people and could use float, but would rather use a bigint of some kind, or more explicit integer typing, because float would look unnecessarily weird and confusing in such an intro
[15:28:53] <FromDiscord> <lenis> In reply to @Rika "Benchmark time": I have been compiling wrk for the last 15 min
[15:28:54] <FromDiscord> <lenis> kms
[15:29:21] <FromDiscord> <lenis> I should have preinstalled libssl
[15:29:51] <FromDiscord> <Rika> In reply to @Fish-Face "Is there type that": https://nim-lang.github.io/Nim/jsbigints.html ?
[15:30:27] <FromDiscord> <lenis> In reply to @Fish-Face "Is there type that": I believe it was just added in nim 1.6
[15:32:18] <FromDiscord> <Yardanico> In reply to @Fish-Face "Is there type that": as I've mentioned before, you can use bigints
[15:34:57] <FromDiscord> <lenis> @RikaWow
[15:35:31] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FMC
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:03] <FromDiscord> <Yardanico> arc will leak memory
[15:36:08] <FromDiscord> <Yardanico> sent a code paste, see https://paste.rs/jP9
[15:36:14] <FromDiscord> <narimiran> Nim Community Survey 2021 is here! https://nim-lang.org/blog/2021/11/22/community-survey-2021.html
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:16] <FromDiscord> <narimiran> Everything should work, but if you notice some errors/typos, please let me know before we spread the word on reddit, twitter, hn, etc.
[15:37:22] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FMF
[15:37:22] <FromDiscord> <Yardanico> In reply to @lenis "this is with ORC": nice
[15:39:35] <FromDiscord> <lenis> ORC seems to cap out at 39.9K requests/s
[15:40:52] <FromDiscord> <lenis> ARC caps at 42.9K requests/s
[15:41:45] <FromDiscord> <lenis> REFC only 1412req/s
[15:43:20] <FromDiscord> <lenis> correction, refc can go up to 42.0K req/s
[15:43:49] <FromDiscord> <lenis> so, it seems that, in this specific benchmark. arc > refc > orc for throughput
[15:45:31] <FromDiscord> <Yardanico> In reply to @lenis "so, it seems that,": well that's obvious, because `arc` doesn't deal with cycles and async has a lot of cycles
[15:45:36] <FromDiscord> <Yardanico> orc has to actually check cycles
[15:45:39] <FromDiscord> <Yardanico> and collect them
[15:45:48] <FromDiscord> <Yardanico> so if you're fine with memory leaking, you can use arc, yes :)
[15:45:51] <FromDiscord> <Yardanico> (for async)
[15:47:40] <NimEventer> New thread by Miran: Nim Community Survey 2021, see https://forum.nim-lang.org/t/8647
[16:06:22] <FromDiscord> <lenis> In reply to @Yardanico "well that's obvious, because": Yeah you're right. I logged the memory. ORC uses ~200MB, refc and markAndSweep use ~400MB and arc uses over a GB
[16:06:28] <FromDiscord> <Yardanico> exactly :)
[16:07:17] <FromDiscord> <lenis> in the 10s test the cycle collector seems to run about 10 times
[16:07:44] <FromDiscord> <lenis> but the interesting part is that the cycle collector on refc/markAndSweep is about 30-40x slower
[16:08:24] <FromDiscord> <lenis> ORC's mac response time is just over 1ms, while refc/markAndSweep have about 35ms
[16:09:09] <FromDiscord> <lenis> I believe thats because ORC uses static analysis to detect acyclic code, and exempts that memory from the cycle collector. apparently refc and mas dont do this
[16:09:21] <FromDiscord> <Yardanico> In reply to @lenis "I believe thats because": yes, you can also give it hints yourself
[16:09:33] <FromDiscord> <Yardanico> if you mark an object that can potentially be cyclic as `{.acyclic.}` ORC won't check it for cycles
[16:11:39] <FromDiscord> <lenis> pretty awesome
[16:11:48] <FromDiscord> <lenis> I like that you can do microoptimizations like that in nim
[16:12:08] <FromDiscord> <lenis> just like how you can use `likely` to improve branch prediction
[16:12:21] <FromDiscord> <lenis> it actually makes a substantial difference on performance sensitive code
[16:12:57] <FromDiscord> <lenis> I was able to improve the performance of a big loop I had by about 30% using likely/unlikely
[16:13:47] <FromDiscord> <Yardanico> In reply to @lenis "I was able to": you should also try using PGO, it can optimize that stuff automatically
[16:14:08] <FromDiscord> <Yardanico> and yeah, `likely` is a hint to the C compiler, in some cases it can make the code slower
[16:15:02] <FromDiscord> <lenis> i was using a double for loop on a 2-dimensional plane and had an if statement that runs on the outer bound edge only
[16:15:36] <FromDiscord> <lenis> so i already know compile time there is only a 1% chance or so that it will enter that branch
[16:16:01] <FromDiscord> <Yardanico> well, with PGO you run your code with instrumentation on all workloads it usually runs on, and then use that profiling data to help the compiler know which branches are "hotter"
[16:16:08] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/6295 for clang lto + pgo
[16:17:04] *** Joins: rockcavera (~rc@192.12.114.202)
[16:17:04] *** Quits: rockcavera (~rc@192.12.114.202) (Changing host)
[16:17:04] *** Joins: rockcavera (~rc@user/rockcavera)
[16:18:33] <FromDiscord> <hmmm> bois wot is dis hint: Hint: 'parse' cannot raise 'Defect'
[16:18:53] <FromDiscord> <Yardanico> In reply to @hmmm "bois wot is dis": you specified {.raises: [Defect].} for your parse proc but it doesn't do that
[16:19:00] <FromDiscord> <Yardanico> or something similar
[16:19:11] <FromDiscord> <hmmm> I'm doing a try parse datetime except  TimeParseError and it works fine but get the hint
[16:19:17] <FromDiscord> <hmmm> no I'm not using curly braces at all
[16:19:47] <FromDiscord> <Yardanico> interesting
[16:19:52] <FromDiscord> <Yardanico> can you show the code?
[16:19:52] <FromDiscord> <hmmm> hmmm
[16:20:02] <FromDiscord> <hmmm> wait I try to clean up the mess lol
[16:21:51] <FromDiscord> <Yardanico> yeah I see the hint too
[16:22:35] <FromDiscord> <hmmm> ah ok
[16:22:52] <FromDiscord> <hmmm> how do I paste code thingies in the code block of discord
[16:23:51] <FromDiscord> <Yardanico> triple quotes newline code newline triplequotes
[16:23:56] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=1pIT
[16:24:08] <FromDiscord> <hmmm> """
[16:24:11] <FromDiscord> <hmmm> hmmm
[16:24:22] <FromDiscord> <Yardanico> backticks
[16:24:39] <FromDiscord> <Yardanico> and you don't need to post, I already found out what you're talking about
[16:24:53] <FromDiscord> <hmmm> okok it was just for general knowledge lol
[16:25:02] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=
[16:25:02] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=1pIT
[16:25:14] <FromDiscord> <hmmm> oh yiss I'm a genius
[16:31:41] <FromDiscord> <hmmm> can I name an  type thingy = enum with lowercase or nim gets angry?
[16:32:09] *** Joins: TechAspirer (~kayabaNer@user/kayabanerve)
[16:33:00] <FromDiscord> <Yardanico> yes you can
[16:33:06] <FromDiscord> <Yardanico> PascalCase for types is just a convention
[16:33:10] <FromDiscord> <Yardanico> so it's easier to understand that it's a type
[16:34:14] <FromDiscord> <hmmm> üëç
[16:34:29] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Ping timeout: 250 seconds)
[16:35:31] <PMunch> Those "hello" messages was sent over the Discord bridge as links to the playground :P
[16:37:10] <FromDiscord> <Yardanico> yeah the bridge treats all triple backticks code blocks as code pastes
[16:37:16] <FromDiscord> <Yardanico> Because they're almost always multi line
[16:37:32] <FromDiscord> <Yardanico> `we have single backticks for inline code`
[16:44:35] <PMunch> By the way, sometimes people send a short message and some code, and it all gets turned into a paste
[16:44:42] <PMunch> This is a bit awkward
[16:44:50] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3FMZ
[16:45:21] <PMunch> Case in point: https://play.nim-lang.org/#ix=3FMZ
[16:45:38] <PMunch> And why does it convert * to those weird circle things?
[16:46:04] <PMunch> It means that everything with an export marker needs to be rewritten to run on the playground
[16:46:13] <FromDiscord> <hmmm> hmm how do I print all the possible enums of an enum
[16:48:02] <PMunch> cat mycodefile.nim | grep "MyEnum = enum"
[16:50:19] <supakeen> ohno
[16:51:48] <FromDiscord> <hmmm> nu wait the real question was how do I set an enum with his ord number instead of name
[16:52:07] <PMunch> 100.MyEnum?
[16:52:19] <FromDiscord> <hmmm> hmmmmmmmmm
[16:52:26] <FromDiscord> <hmmm> maybe!
[16:52:27] <FromDiscord> <hmmm> wait
[16:54:43] <FromDiscord> <hmmm> it worked ü§®
[16:54:50] <FromDiscord> <hmmm> never imagined it would lol
[16:56:11] <PMunch> Why wouldn't it? :P
[16:56:27] *** Joins: src (~src@user/src)
[16:57:35] <FromDiscord> <hmmm> no fkn idea lol üòÖ
[17:00:52] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3FN9
[17:07:57] <PMunch> That makes no sense, 3 is an int, not an enum type
[17:08:28] <PMunch> But 3.Enummie explicitly converts it to one
[17:11:54] <FromDiscord> <ag> Has there been any improvements on Nim debugging & profiling workflow since this blog post was written?‚Üµhttps://nim-lang.org/blog/2017/10/02/documenting-profiling-and-debugging-nim-code.html‚Üµ‚ÜµI guess there is NLVM, but do we have anything else? NLVM doesn't support some useful pragmas.
[17:15:58] <FromDiscord> <ag> (I mainly use Windows)
[17:16:33] <FromDiscord> <ag> Thinking about it a bit more, I guess since Nim generates C/C++ sources it would be hard to debug. Is there a way to generate sourcemaps or something to use with the debugger? Though at that point probably the debugger would need to support that sourcemap...‚Üµ‚ÜµI guess the ideal way would be getting the Nim compiler to generate PDB & DWARF files and then using a custom linker to replace C compiler's debug symbols with those.
[17:22:12] <PMunch> Nim already outputs debugging information which means you will see Nim source lines and such in GDB
[17:22:22] <PMunch> I'm using it right now
[17:31:45] *** Joins: arkurious (~arkurious@user/arkurious)
[17:33:17] <FromDiscord> <dom96> In reply to @lenis "so, it seems that,": M&S should beat all for throughput.
[17:35:27] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[17:36:37] *** Joins: flynn (~mcbloch@user/flynn)
[17:40:04] <FromDiscord> <ag> In reply to @PMunch "Nim already outputs debugging": Yeah, but no way to debug using Visual Studio (or `cppvsdbg` on Visual Studio Code), right? The machine I'm debugging on doesn't have MinGW or GDB installed so I hoped Nim got PDB support since then.
[17:40:48] <PMunch> Hmm, I think I've seen people do that before
[18:02:51] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[18:14:05] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Changing host)
[18:14:05] *** Joins: nisstyre (~wes@user/nisstyre)
[18:30:01] <FromDiscord> <IsaacPaul> lldb works ok‚ÜµHonestly, the debugger and other nim tooling still needs _a lot_ of work. Strings don't have a preview, enums are annoying such as displaying in vscode as a char in some cases when its a number (best case would be to display a string).
[18:30:22] <FromDiscord> <IsaacPaul> (edit) "in" => "(in" | "cases" => "cases)"
[18:33:16] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:34:42] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3FNW
[18:36:07] <FromDiscord> <Rika> thats one high resolution image of text
[18:41:57] <FromDiscord> <Marisol> There are 3 nim extensions in vscode, which one is recommended?
[18:42:08] <nrds> <06Prestige99> saem's
[18:42:38] <FromDiscord> <Marisol> Oh i installed the right one then! Thanks
[18:43:12] <FromDiscord> <gdquest> sent a long message, see http://ix.io/3FO0
[18:43:32] <FromDiscord> <Recruit_main707> In reply to @Marisol "There are 3 nim": Is there one that is from Gary M?
[18:43:44] <FromDiscord> <Marisol> In reply to @Recruit_main707 "Is there one that": Yeah, why?
[18:44:25] <FromDiscord> <Recruit_main707> I used that because it fixed slight syntax highlight issues the main plugin had/(has)
[18:44:57] <FromDiscord> <Recruit_main707> I don‚Äôt know if either is up to date tho
[18:46:17] <FromDiscord> <Marisol> Just realized. Gary's one last update is 2 years ago
[18:46:36] <FromDiscord> <Marisol> saem's is the updated one
[18:47:26] <nrds> <06Prestige99> If you spot a bug in the new plugin, please make a bug report
[18:47:32] <FromDiscord> <Recruit_main707> Damn, time flies, yeah we talked about testing stuff back in 04/2020
[18:49:12] <FromDiscord> <Recruit_main707> Is this still a thing in the main plugin?‚Üµ‚Üµhttps://images-ext-2.discordapp.net/external/x2P0khfQumKHPqdNvKVuPKnX0cYE-J6ihSQ-bHt9N2I/https/i.imgur.com/5EyDre1.png
[18:51:02] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 240 seconds)
[18:57:05] <NimEventer> New post on r/nim by miran1: Nim Community Survey 2021, see https://reddit.com/r/nim/comments/qznwhm/nim_community_survey_2021/
[18:57:10] <FromDiscord> <Recruit_main707> He put a lot of effort and fixed quite a lot of minor bugs, I‚Äôd just bombard him with new errors and he kept solving them hehe
[18:59:03] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=16em
[18:59:28] <FromDiscord> <hmmm> don't know if the best way to go about it but that's my way now ü§î
[19:01:17] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[19:03:25] <FromDiscord> <Rika> doesnt work if your enum has holes
[19:03:42] <FromDiscord> <hmmm> who is the psycho that creates enums with holes
[19:03:56] <FromDiscord> <Rika> In reply to @gdquest "Do you know an": count all line breaks before a character? no other way around it
[19:04:11] <FromDiscord> <Rika> i dont think theres anything more efficient than O(n)
[19:04:13] <FromDiscord> <Rika> might be wrong of course
[19:04:20] <FromDiscord> <Rika> In reply to @hmmm "who is the psycho": plenty
[19:04:31] <FromDiscord> <Rika> i'd personally just reserve them though
[19:04:43] <FromDiscord> <Rika> if ever i do need to make a gap for some damn reaosn
[19:07:01] <NimEventer> New Nimble package! zlib - zlib wrapper for Nim, see https://github.com/status-im/nim-zlib
[19:15:49] <FromDiscord> <ag> sent a code paste, see https://play.nim-lang.org/#ix=1qeH
[19:16:54] <FromDiscord> <ag> (edit) "https://play.nim-lang.org/#ix=1qeH" => "https://play.nim-lang.org/#ix=1CzY"
[19:17:08] <FromDiscord> <hmmm> hmm
[19:17:14] <FromDiscord> <hmmm> and what would shl be?
[19:17:17] <FromDiscord> <hmmm> üëÄ
[19:17:29] <FromDiscord> <Marisol> bit shift left?
[19:17:33] <FromDiscord> <hmmm> jesus
[19:17:38] <FromDiscord> <hmmm> I'm not touching that thing
[19:18:11] <FromDiscord> <Marisol> Me too. I just guessing actually. Coming from pascal like uhh 15 years ago
[19:18:51] <FromDiscord> <ag> yeah that's bitshift left
[19:19:20] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:19:25] <FromDiscord> <Marisol> But it's like 1, 10, 100, 1000, 10000, 100000 right. Not that complicated
[19:20:25] <FromDiscord> <narimiran> In reply to @ag "Tons of people including": see https://nim-lang.org/blog/2021/11/15/zen-of-nim.html#static-typing for idiomatic nim way of doing this
[19:20:28] *** Joins: xet7 (~xet7@user/xet7)
[19:20:55] <FromDiscord> <narimiran> i.e. don't write C with Nim's syntax üòâ
[19:21:57] <FromDiscord> <ag> sent a code paste, see https://play.nim-lang.org/#ix=1FGL
[19:22:57] <FromDiscord> <ag> (edit) "https://play.nim-lang.org/#ix=1FGL" => "https://play.nim-lang.org/#ix=1MhK"
[19:25:06] <FromDiscord> <ag> In reply to @narimiran "see https://nim-lang.org/blog/2021/11/15/zen-of-nim": Very nice
[19:25:27] <FromDiscord> <Marisol> Haha cool
[19:30:44] <FromDiscord> <lenis> seems like arc/orc is pretty slow when you do a lot of ref object allocation
[19:31:08] <FromDiscord> <Rika> compared to
[19:31:13] <FromDiscord> <Rika> refc or m&s?
[19:31:32] <FromDiscord> <lenis> both
[19:32:15] <FromDiscord> <lenis> I started benchmarking with benchy instead, and showing max delta which is useful for capturing latency concerns.
[19:33:52] <FromDiscord> <lenis> markAndSweep has the best throughput but bad latency‚Üµrefc has similar throughput and amazing latency, as long as there are no reference cycles in your code.‚Üµ‚Üµorc has bad throughput in my test, half of refc/mas. and a worse latency than refc
[19:34:31] <FromDiscord> <Rika> refc's max latency is?
[19:35:53] <FromDiscord> <lenis> 1ms. avg time time is 0.1ms
[19:36:08] <FromDiscord> <lenis> but on arc/orc im getting as high as 2.5ms
[19:36:15] <FromDiscord> <lenis> and 35ms on mas
[19:37:46] <FromDiscord> <Rika> these are short lived? i assume its that since arc/orc is deterministic
[19:38:17] <FromDiscord> <Rika> so it deallocs as soon as it needs to while refc can probably defer to when its not busy (?) just a guess
[19:38:30] <FromDiscord> <Rika> needs to -> can
[19:40:49] <FromDiscord> <hmmm> Since my snippet folder is growing sizable, I realize old timers should have thousands of useful utility snippets lying around, so can we have a nim snippet festival in which people share their secret sauce stuff and lazy people like me can steal all of it?
[19:41:29] <FromDiscord> <ag> In reply to @Rika "so it deallocs as": This made me think of https://abramov.io/rust-dropping-things-in-another-thread
[19:42:34] <FromDiscord> <ag> I wonder if the same thing would work here
[19:43:00] <FromDiscord> <lenis> In reply to @Rika "these are short lived?": yes they are short lived. but im doing 100,000 iterations so refc/mas definately is working in some of those runs
[19:43:38] <FromDiscord> <lenis> in fact i can see that it did 24 gc cycles
[19:44:11] <FromDiscord> <Rika> i know
[19:44:13] <FromDiscord> <Rika> thats not what i mean
[19:44:41] <FromDiscord> <Rika> arc orc is probably doing all of those deallocs and not batching them is what i mean
[19:44:59] <FromDiscord> <Rika> still doesnt explain the max i guess
[19:45:20] <FromDiscord> <lenis> yes but even for avg its a bit disappointing
[19:45:46] <FromDiscord> <lenis> I guess if you are dealing with a lot of short-lived heap objects you are better off using refc
[19:48:44] <FromDiscord> <ag> if you know the max number of items that'll be used at the same time you could also use a memory arena
[19:49:38] <FromDiscord> <ag> (edit) "if you know the max number of items that'll be used at the same time you could also use a memory arena ... " 03added "/ pool"
[19:49:58] <FromDiscord> <ag> Fusion has a pool for that exact purpose: https://nim-lang.github.io/fusion/src/fusion/pools.html
[19:51:10] <FromDiscord> <ag> (edit) "pool for that exact purpose:" => "pool:"
[20:03:31] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[20:03:31] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[20:03:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:07:38] <FromDiscord> <gdquest> In reply to @Rika "count all line breaks": Thanks, I should've updated, I went with that, a while loop that finds line breaks and checks if each character number is between `previousLineIndex`, `nextLineIndex`
[20:08:26] <FromDiscord> <Rika> nice
[20:15:09] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=2rcS
[20:16:03] <FromDiscord> <enthus1ast> @gdquest\: i found memory mapped files really fast for this kind of workload
[20:16:21] <FromDiscord> <enthus1ast> https://github.com/enthus1ast/countFasta/blob/8127028eee4c721fbc11308deac3c414ca16af31/fastalib.nim#L8
[20:19:19] <FromDiscord> <enthus1ast> I think sort is the in place version
[20:19:41] <FromDiscord> <gdquest> Ah! I was wondering seeing the no side effect pragma in the definition
[20:19:53] <FromDiscord> <gdquest> Yeah right that's why then
[20:21:13] <FromDiscord> <gdquest> In reply to @enthus1ast "<@202865241971884032>\: i found memory": Do you know if that has any performance benefit over loading entire files and using standard input to pass them to other processes?
[20:21:13] <FromDiscord> <enthus1ast> guess you want `sorted` https://nim-lang.org/docs/algorithm.html#sorted%2CopenArray%5BT%5D%2Cproc%28T%2CT%29
[20:21:18] <FromDiscord> <gdquest> Yup thanks!
[20:22:17] <FromDiscord> <enthus1ast> what do you mean?
[20:22:48] <FromDiscord> <gdquest> I think I have different requirements than you perhaps, not sure
[20:23:20] <FromDiscord> <gdquest> So what I need is to load the file, process the content (as a string is fine), then pipe it to pandoc to output to different formats
[20:23:41] <FromDiscord> <gdquest> So I'm unsure if a memory-mapped file would have benefits over just working on strings
[20:23:52] <FromDiscord> <enthus1ast> loading entire files can be very fast as well (if they fit in your memory)
[20:24:07] <FromDiscord> <gdquest> Yeah it's all pretty small, at most a couple mb loading the entire project
[20:24:23] <FromDiscord> <enthus1ast> but eg fasta files can be very large so better not do this \:)
[20:24:33] <FromDiscord> <gdquest> Ah gotcha üôÇ Thanks for sharing
[20:25:32] <FromDiscord> <ùôßùôöùô¢> whyd i get this error
[20:25:34] <FromDiscord> <ùôßùôöùô¢> `      self.error(&"Invalid base specifier {baseSpec}, expected 0x or 0b.")‚Üµ`
[20:25:36] <FromDiscord> <ùôßùôöùô¢> wait
[20:25:39] <FromDiscord> <ùôßùôöùô¢> fucking copy paste on linux
[20:25:50] <FromDiscord> <ùôßùôöùô¢> `'scanCharLiteral' cannot raise 'LexerDefect' [XCannotRaiseY]`
[20:25:51] <FromDiscord> <ùôßùôöùô¢> this erorr
[20:26:19] <FromDiscord> <ùôßùôöùô¢> sent a code paste, see https://play.nim-lang.org/#ix=2rRp
[20:26:22] <FromDiscord> <ùôßùôöùô¢> `type LexerDefect = object of Defect`
[20:26:26] <FromDiscord> <ùôßùôöùô¢> what am i doing wrong here
[20:29:26] <FromDiscord> <ùôßùôöùô¢> ig i cant raise Defects since I changed it to be an Exception and that works fine?
[20:29:27] <FromDiscord> <ùôßùôöùô¢> weird
[20:31:12] <FromDiscord> <hmmm> ü§î
[20:31:26] <FromDiscord> <hmmm> apparently our pop is the underwhelming "delete"
[20:31:47] <FromDiscord> <hmmm> rika let's make an rfc to change delete to pop
[20:32:49] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=2tyE
[20:33:13] <FromDiscord> <Rika> defect can mean "crash the program here without letting anything catch it" in some contexts
[20:34:31] <FromDiscord> <ùôßùôöùô¢> ahhh
[20:34:43] <nrds> <06Prestige99> how is pop delete?
[20:34:45] <FromDiscord> <ùôßùôöùô¢> ill never catch this anyway because its a lexer error, if you get it you done goofed
[20:34:58] <FromDiscord> <cschardt (Christof Schardt)> [https---abramov.io-rust-dropping-things-in-another-thread.url](https://files.gitter.im/5602f03e0fc9f982beb19f61/f3eS/https---abramov.io-rust-dropping-things-in-another-thread.url)
[20:35:06] <FromDiscord> <Rika> yes, some people (namely hax i guess) are very vocal about using Defect though
[20:35:20] <FromDiscord> <Rika> someone failed copying a link it seems
[20:36:37] <FromDiscord> <haxscramper> yeah, imagine someone using your parser as a library
[20:37:08] <FromDiscord> <ùôßùôöùô¢> its for a shitty language im making
[20:37:12] <FromDiscord> <ùôßùôöùô¢> its not a library
[20:37:45] <FromDiscord> <haxscramper> then imagine unit testing for failures
[21:19:03] *** Joins: rockcavera (~rc@192.12.114.202)
[21:19:03] *** Quits: rockcavera (~rc@192.12.114.202) (Changing host)
[21:19:03] *** Joins: rockcavera (~rc@user/rockcavera)
[21:43:32] *** Joins: Raflemakt (~Skugfisk@fwa5c9b-148.bb.online.no)
[21:46:28] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[21:52:01] <NimEventer> New thread by 12398890: Seems memory leaks in protobuf-nim or nim's GC, see https://forum.nim-lang.org/t/8648
[21:59:39] <FromDiscord> <Smarc> Hello Guys, I am working on https://github.com/Smarcy/nim_chess at the moment.‚ÜµI'd like to outsource the movementPatterns (isValidMovePattern overloaded procs) to a separate file. Those were in model/board.nim before and I want them to be in movement.nim. But this is causing a circle dependency, because the movement.nim has to know what a Board is. Does anyone have any idea how to work around this?
[22:31:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:45:05] <FromDiscord> <hmmm> woa, my brain melts at 2D chess and now people want me to learn 4D chess
[22:45:16] <FromDiscord> <hmmm> it will never end üßê
[22:45:51] <FromDiscord> <hmmm> looks fun as hell tbh
[22:46:54] <FromDiscord> <hmmm> put some warp pads in the middle 4 squares to teleport pieces around and you got a blockbuster in your hands
[22:52:30] <FromDiscord> <Solitude> In reply to @Smarc "Hello Guys, I am": move Board type into separate module, maybe? you didnt commit movement.nim
[22:53:59] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.180)
[22:53:59] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.180) (Changing host)
[22:53:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:56:47] *** Quits: Raflemakt (~Skugfisk@fwa5c9b-148.bb.online.no) (Ping timeout: 256 seconds)
[22:58:26] *** Joins: Raflemakt (~Skugfisk@fwa5cce-64.bb.online.no)
[23:01:05] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[23:02:15] <FromDiscord> <IsaacPaul> I remember reading you can forward declare a ref type somehow.. there is also this pragma: `{.experimental: "codeReordering".}`
[23:02:40] <FromDiscord> <IsaacPaul> usually cyclic dependencies is a code smell
[23:02:55] *** Joins: Vladar (~Vladar@46.162.2.53)
[23:03:08] <FromDiscord> <ùôßùôöùô¢> how would i implement visitor pattern in nim idiomatically?
[23:06:53] <FromDiscord> <Smarc> In reply to @Solitude "move Board type into": You are right, my bad! It is up now!
[23:08:45] <FromDiscord> <IsaacPaul> In reply to @ùôßùôöùô¢ "how would i implement": You can build interfaces via concepts or tuple of callbacks.. I haven't used the visitor pattern before (or maybe I have without knowing) so I'm not sure how it's applied or what problem its solving.
[23:08:53] <FromDiscord> <ùôßùôöùô¢> basically this
[23:08:54] <FromDiscord> <ùôßùôöùô¢> https://www.baeldung.com/java-visitor-pattern
[23:09:00] <FromDiscord> <ùôßùôöùô¢> im tryign to write an ast for my crappy language
[23:09:14] <FromDiscord> <Solitude> In reply to @Smarc "You are right, my": move movement import below Board type
[23:11:04] <FromDiscord> <IsaacPaul> the visitor pattern to me just looks its supporting an interface within an interface.
[23:13:35] <FromDiscord> <ùôßùôöùô¢> so how would i implement this in nim
[23:13:39] <FromDiscord> <ùôßùôöùô¢> could u gimme a code example?
[23:14:19] <FromDiscord> <IsaacPaul> I can't atm; workin
[23:14:46] <FromDiscord> <ùôßùôöùô¢> could anyone else?
[23:30:02] <FromDiscord> <ag> Is visitor pattern even considered idiomatic in Nim?
[23:30:29] <FromDiscord> <ag> In reply to @ùôßùôöùô¢ "im tryign to write": Are you trying to implement the Java part of Crafting Interpreters using Nim?
[23:30:56] <FromDiscord> <ùôßùôöùô¢> not reading that book but i want to implement an AST / visitor pattenr type thing
[23:31:09] <FromDiscord> <ùôßùôöùô¢> (edit) "not reading that book but i want to implement an AST / visitor pattenr type thing ... " 03added "yes"
[23:32:58] <FromDiscord> <ag> I think the way to get a visitor-pattern double dispatch type thing in a non-OOP language is using sumtypes / tagged unions
[23:33:43] <FromDiscord> <ag> See here: https://nim-lang.org/docs/manual.html#types-object-variants
[23:33:59] <FromDiscord> <ag> That's how the AST is done in the Nim compiler I guess
[23:35:44] <FromDiscord> <ùôßùôöùô¢> hmm this would work
[23:36:03] <FromDiscord> <ùôßùôöùô¢> but how can i do smth to traverse the node or would i check the node kind?
[23:37:31] <FromDiscord> <ag> Your node would need a `kind` field in it, and you'd check that when traversing
[23:38:32] <madprops> "Have you made code contributions to the Nim project in the past?"
[23:38:37] <madprops> does it mean the compiler?
[23:38:55] <FromDiscord> <Smarc> In reply to @Solitude "move movement import below": That did the trick! Can you explain me why this is important?
[23:43:25] <FromDiscord> <Solitude> In reply to @Smarc "That did the trick!": it breaks the dependency cycle?
[23:58:01] <FromDiscord> <IsaacPaul> In reply to @madprops "does it mean the": I assumed anything in the nim repo (c2nim, nimpretty, nim, ect)
