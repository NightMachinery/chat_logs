[00:04:15] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[00:04:48] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[00:05:57] *** Joins: arktnld (~arktnld@179.186.108.236)
[00:06:18] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[00:10:40] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[00:10:59] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[00:13:47] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Client Quit)
[00:15:36] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:15:53] *** Joins: mickey (~user@user/mickey)
[00:17:05] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[00:23:52] *** Quits: arktnld (~arktnld@179.186.108.236) (Ping timeout: 252 seconds)
[00:23:56] *** Joins: crm (~crm@70.120.0.94)
[00:24:48] *** Joins: arktnld (~arktnld@177.205.39.242.dynamic.adsl.gvt.net.br)
[00:25:49] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:26:17] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 248 seconds)
[00:27:05] <toretto> For the 'net/http', how can configure the http.ListenAndServe such that it only accepts requets from a specific domain aka 'Host' header's domain. Currently I use Nginx to reverse proxy through multiple virtual hosts endpoints on the server, but I tried `http.ListenAndServe("specific.domain.com:80", nil)` but this also accepts requests from an IP (which it shouldn't because it act as virtual host). I'm
[00:27:11] <toretto> not sure how to resolve this.
[00:27:22] <toretto> Could someone tell me how to resolve this?
[00:27:59] *** Quits: aead (~aead@user/aead) (Quit: aead)
[00:28:53] *** Joins: andlabs (~andlabs@70.107.171.168)
[00:29:52] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:30:46] <toretto> Currently I listen on localhost and block the golang's port and restrict to localhost access only and reverse proxy through ngnix as front-end for virtual hosts.
[00:30:56] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:31:05] <toretto> But it's not soemthing I wanna do.
[00:31:10] <toretto> *something
[00:32:45] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[00:35:07] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[00:36:33] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 244 seconds)
[00:37:50] *** Quits: arktnld (~arktnld@177.205.39.242.dynamic.adsl.gvt.net.br) (Ping timeout: 250 seconds)
[00:38:56] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:43:25] <bookworm> look at the request path in your mux
[00:43:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[00:45:05] *** Joins: mickey0 (~user@user/mickey)
[00:45:29] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[00:45:39] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[00:45:40] *** mickey0 is now known as mickey
[00:45:51] <bookworm> (Host in this case)
[00:45:53] *** Joins: fikran (~fikran@user/fikran)
[00:47:21] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:50:39] <rudi_s> toretto: And the host in ListenAndServe only controls on which IP the service listens.
[00:54:57] <toretto> rudi_s: I see.
[00:55:07] <toretto> I don't use any multiplexers right now.
[00:55:19] *** Quits: samf (~root@159.65.228.88) (Quit: WeeChat 1.9.1)
[00:55:33] *** Joins: Snyp (~Snyp@49.207.225.119)
[00:55:48] <bookworm> you do, nil just says use the global one from the http package
[00:56:03] <toretto> This is my code, https://paste.debian.net/plain/1209693
[00:56:06] <bookworm> http DefaultServMux if my memory serves correctly
[00:56:09] <toretto> it's super simple for testing purpose
[00:56:23] *** Joins: samf (~root@159.65.228.88)
[00:56:40] *** Quits: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:56:44] <toretto> Not sure what I need to change/update to do what I want though.
[00:56:48] <toretto> It's still unclear.
[00:57:04] <bookworm> you need to code it in explicitly, add a middleware handler that checks the host
[00:57:11] <toretto> I see.
[00:57:22] <toretto> Yeah, I can do taht.
[00:58:10] *** Joins: aead (~aead@user/aead)
[00:58:19] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[01:01:06] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:05:06] <toretto> I wish golang has a way such that we can listen to a UNIX socket just like `http.ListenAndServe("unix:///tmp/foo.sock", nil)`
[01:05:18] <toretto> instead of doing buch of stuff to get this working.
[01:07:03] *** Joins: Exobitt (~DP@185.229.155.45)
[01:08:08] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[01:08:29] *** Joins: arktnld (~arktnld@177.133.7.245.dynamic.adsl.gvt.net.br)
[01:08:32] *** Joins: independent_ (~independe@95.144.68.39)
[01:09:38] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[01:10:21] *** Joins: independent56 (~independe@95.144.68.39)
[01:12:12] *** Joins: alyx (alyx@atheme/alyx)
[01:12:42] <toretto> ah, looks like gorilla multiplexer has a composible way do that host based routing.
[01:13:08] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[01:13:26] *** Joins: independent56 (~independe@95.144.68.39)
[01:16:00] <bookworm> yes, any other router will have it as well
[01:17:07] <bookworm> but it's also easy to do manually. But considering that you are then reinventing the wheel for things like method restrictions, path components and such you might be better of using an off the shelf one
[01:17:36] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[01:18:06] <bookworm> depends on how large your app is and if you are part of the only use stdlib, who needs nice things canp
[01:18:17] <bookworm> camp*
[01:20:08] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[01:22:20] <toretto> I guess, I'd try to do that manually in future since I'm super new to go.
[01:22:38] <toretto> I'd implementing a HTTP router for my C++ networking library, so I'd take inspiration from golang.
[01:25:40] *** Joins: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de)
[01:25:48] *** Quits: Exobitt (~DP@185.229.155.45) (Read error: Connection reset by peer)
[01:27:07] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[01:28:02] *** Joins: Snyp (~Snyp@49.207.225.119)
[01:28:21] <b0nn> toretto: You're going to have to implement a reverse lookup too - faking a host header is fairly trivial, so you'll be wanting to ensure that the IP matches (and even then the originating IP could be fake)
[01:28:38] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[01:28:56] *** Joins: independent56 (~independe@95.144.68.39)
[01:29:47] <toretto> reverse lookup? I'm not sure what you mean though.
[01:29:58] <toretto> You mean, ip to host lookup? why?
[01:30:08] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[01:30:11] <toretto> or, you mean something else?
[01:30:26] *** Joins: independent56 (~independe@95.144.68.39)
[01:31:46] *** Quits: sully42 (~sully@45.132.227.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:32:07] *** Quits: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:34:17] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:34:21] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[01:40:10] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[01:46:09] *** Joins: k0ta (~k0ta@151.210.169.240)
[01:46:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:48:23] *** Joins: rcernin_ (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:49:24] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Read error: Connection reset by peer)
[01:49:31] <rudi_s> toretto: Just checking the Host-Header in the request handler should be enough.
[01:51:19] *** Quits: arktnld (~arktnld@177.133.7.245.dynamic.adsl.gvt.net.br) (Ping timeout: 252 seconds)
[01:52:33] *** Joins: aead (~aead@user/aead)
[01:56:50] *** Quits: ekathva (~ekathva@88-114-118-108.elisa-laajakaista.fi) (Remote host closed the connection)
[02:03:30] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[02:06:28] *** Joins: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de)
[02:06:38] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[02:07:22] *** Joins: independent56 (~independe@95.144.68.39)
[02:11:07] *** Quits: theoceaniscool (~theoceani@213.94.16.93) (Ping timeout: 250 seconds)
[02:11:38] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[02:11:56] *** Joins: independent56 (~independe@95.144.68.39)
[02:19:22] *** Quits: rcernin_ (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[02:19:26] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[02:23:03] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[02:23:26] *** Joins: independent56 (~independe@95.144.68.39)
[02:25:53] *** Joins: crmur__ (~crm@70.120.0.94)
[02:27:18] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:29:12] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 250 seconds)
[02:30:26] *** Joins: gl (~x@pwn.lu)
[02:33:06] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[02:34:54] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[02:35:52] *** Quits: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:36:14] *** Quits: tty14 (~tty14@152.67.7.96) (Remote host closed the connection)
[02:37:10] *** Joins: tty14 (~tty14@152.67.7.96)
[02:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[02:37:50] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[02:38:46] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:b45c:3bc5:3a79:b1e7)
[02:42:07] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:95f9:342:8571:fac2) (Ping timeout: 240 seconds)
[02:44:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[02:49:37] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[02:52:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[02:53:16] *** Joins: masoudd (~masoudd@user/masoudd)
[02:55:14] *** Joins: fikran (~fikran@user/fikran)
[02:56:10] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:58:58] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:06:59] *** Joins: rcernin_ (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:07:21] *** Joins: Snyp (~Snyp@49.207.225.119)
[03:07:40] *** Quits: rcernin_ (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:07:54] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:15:46] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[03:16:04] *** Joins: Atque (~Atque@user/atque)
[03:22:37] *** Quits: __alex (~alex@95.90.254.243) (Ping timeout: 250 seconds)
[03:22:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:27:45] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[03:28:07] *** Joins: c10l (~c10l@89.34.167.207)
[03:32:05] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:29] *** Joins: jsrnop (~mark@user/jsrnop)
[03:34:13] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:34:35] *** Joins: src (~src@user/src)
[03:38:31] *** Quits: PedroG1 (~android@45.77.216.181) (Ping timeout: 252 seconds)
[03:42:33] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 244 seconds)
[03:44:54] *** Joins: PedroG1 (~android@45.77.216.181)
[03:45:24] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-587b-b151-54d8-e1c1.inf6.spectrum.com)
[03:45:40] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 252 seconds)
[03:47:39] *** Joins: danderson (~dave@tailscale/danderson)
[03:47:39] *** ChanServ sets mode: +v danderson
[03:48:22] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-8805-df60-18eb-bff7.inf6.spectrum.com) (Ping timeout: 245 seconds)
[03:51:29] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:52:19] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[03:57:35] *** Joins: prologic (~prologic@mail.mills.io)
[03:58:08] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:58:58] <prologic> Hey Tv_ that hijacking problems I was trying to solve yesterday, well I haven't solved it yet, but I thought you might like to know that https://docs.docker.com/engine/api/v1.41/#operation/ContainerAttach is what I need to build support for. Sadly I don't think the stdlib net/http/httputil.ReverseProxy supports this at all (mostly what I'm using), and I'm not sure any other implementation I can find supports this either?
[03:59:48] <Tv_> prologic: ReverseProxy is agnostic about the protocol being upgraded to
[04:00:03] <Tv_> that's the whole point of the Upgrade mechanism
[04:00:12] <prologic> And since I just pass control directly to the underlying ReverseProxy instance via .ServeHTTP() I don' thave any control over the Transport here so I'm going to have to write a custom ReverseProxy I think
[04:00:36] <prologic> it might very well be agnostic, but it ain't working in this case
[04:00:45] <prologic> that part isn't clear to me either
[04:03:00] <Tv_> it has unit tests for Upgrade
[04:03:54] <Tv_> i'd be surprised if the mechanism didn't work
[04:04:16] <Tv_> current guess: you're assuming something about docker things that aren't true, and testing a complex system instead of its components
[04:09:22] <prologic> Yeah some of what I'm doing here is old code borrowed from projects years ago, so it's bound to be either wrong or rubbish, e.g: https://git.mills.io/prologic/docker-proxy/commit/bcd196e5bce1fd5346ba124d4bc20dc79c605e58
[04:09:39] <prologic> I much prefer using your httpunix.Transport as it's much cleaner and removes a layer of complexity I need not worry about
[04:09:46] <prologic> very nice library btw 👌
[04:10:37] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:11:37] *** Joins: flynn (~mcbloch@user/flynn)
[04:11:44] <prologic> But yeah this still gets stuck, same problem. I suspect it has something to do with these lines https://git.mills.io/prologic/docker-proxy/src/branch/fix_attach/proxy/proxy.go#L74-L92 -- I _may_ be doing something credibly wrong here
[04:22:51] *** Quits: hikhvar796073809 (~thelounge@x4db4e6d8.dyn.telefonica.de) (Ping timeout: 244 seconds)
[04:24:13] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[04:30:13] <prologic> I can't do something as stupidly simple as if r.Header.Get("Connection") == "Upgrade" { go p.upstream.ServeHTTP(w, r) } now can I?
[04:30:39] <prologic> since the client _actually_ does hint at the proxy with a Connection: Upgrade header and even an Upgrade: tcp header too
[04:33:15] *** Joins: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de)
[04:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:38:04] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:51:10] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[04:52:33] *** Joins: independent56 (~independe@95.144.68.39)
[04:57:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:01:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 252 seconds)
[05:01:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[05:01:51] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 250 seconds)
[05:05:28] *** Quits: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:07:39] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[05:09:01] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[05:10:26] *** Joins: khrbt (~znc@user/khrbt)
[05:15:39] *** Quits: Kyros (~kyros@user/kyros) (Remote host closed the connection)
[05:15:58] *** Joins: Kyros (~kyros@user/kyros)
[05:16:04] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Ping timeout: 244 seconds)
[05:16:44] <prologic> https://sourcegraph.com/github.com/golang/go/-/commit/ee55f0856a3f1fed5d8c15af54c40e4799c2d32f?visible=4
[05:17:15] <prologic> Interesting... Still not sure why I can't just call ReverseProxy.ServeHTTP() from within my ServeHTTP() and expect it to work?
[05:20:44] *** Joins: Snyp (~Snyp@49.207.225.119)
[05:25:21] *** Joins: frost (~frost@59.71.240.119)
[05:30:54] *** Joins: vptr (~vptr@user/vptr)
[05:35:04] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-69a2-efd2-4950-bbeb.inf6.spectrum.com)
[05:36:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[05:37:57] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-587b-b151-54d8-e1c1.inf6.spectrum.com) (Ping timeout: 245 seconds)
[05:38:26] *** Joins: rcernin (~rcernin@pa49-182-9-170.pa.qld.optusnet.com.au)
[05:38:50] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:c009:71c2:5ab0:efb0) (Quit: Leaving)
[05:47:45] *** Joins: neurocyte3 (~neurocyte@212.232.81.2)
[05:47:45] *** Quits: neurocyte3 (~neurocyte@212.232.81.2) (Changing host)
[05:47:45] *** Joins: neurocyte3 (~neurocyte@user/neurocyte)
[05:48:19] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 252 seconds)
[05:49:57] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:49:57] *** neurocyte3 is now known as neurocyte
[05:50:35] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: Ping timeout (120 seconds))
[05:50:47] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[05:53:21] *** Joins: TUSF (~TUSF@2600:1700:7a80:2180:2803:abeb:650d:f726)
[06:07:44] *** Quits: aead (~aead@user/aead) (Ping timeout: 244 seconds)
[06:08:13] <prologic> Q: Is there a way to serve a single HTTP request on a stdio listener or pipe? (i.e: stdin/stdout)
[06:09:54] *** Joins: aead (~aead@user/aead)
[06:10:57] <foobaz> yes, you can use http.Serve() for that
[06:11:29] <prologic> I don't think it will return after the request though
[06:11:31] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[06:11:39] <prologic> at least I'm pretty sure it isn't here
[06:12:30] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:12:38] <foobaz> you need to call Shutdown() on the http.Server object
[06:12:52] <prologic> yeah this is gonna be tricky :)
[06:25:20] *** Joins: Snyp (~Snyp@49.207.225.119)
[06:36:46] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[06:36:48] <prologic> What possible reason would net/http.Server.Shutdown now work? I put a deadline around it and it takes over 3s and fails to shutdown
[06:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:38:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:38:12] <Tv_> prologic: http doesn't, in general, stop after one request. you can make a Listener that returns stdin from Accept once, then in your handler call Server.Close
[06:38:34] <Tv_> or Shutdown
[06:39:18] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Quit: ZNC 1.8.2 - https://znc.in)
[06:39:30] <Tv_> Shutdown might serve a second request, it's very polite
[06:43:42] <prologic> yeah I can see it stuck in Select()
[06:43:42] <prologic> hmm yeah
[06:43:42] <Tv_> you were talking about hijacking earlier though -- if this is hijacked, the rules change, the hijacker now owns the connection
[06:43:42] <prologic> I think I need to hack this stdio code
[06:43:42] <prologic> that's true :)
[06:43:42] <prologic> I'm just fixing bugs, refactoring generally
[06:43:42] <prologic> the overall concept works, just needs cleaning up
[06:43:42] <prologic> one of said bugs is I'm leaking ssh handler sessions
[06:43:42] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[06:43:42] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[06:43:44] *** Joins: amk (~amk@109.255.169.126)
[06:47:14] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[06:57:35] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:01:27] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:06:46] *** Joins: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de)
[07:09:30] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:13:02] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:16:46] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[07:25:06] *** Quits: sagax (~sagax@213.138.71.146) (Excess Flood)
[07:26:10] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[07:27:43] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: Textual IRC Client: www.textualapp.com)
[07:32:19] *** Quits: pts33 (~pts33@cpe-172-113-85-232.socal.res.rr.com) (Ping timeout: 252 seconds)
[07:36:07] *** Quits: normen (~normen@p200300d7173dc900609fa7c0104c5bd8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:40:08] *** Joins: pst33 (~pts33@cpe-172-113-85-232.socal.res.rr.com)
[07:41:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:42:39] *** Parts: pst33 (~pts33@cpe-172-113-85-232.socal.res.rr.com) ()
[07:42:39] *** Joins: pts33 (~pts33@cpe-172-113-85-232.socal.res.rr.com)
[07:47:43] *** Quits: alyx (alyx@atheme/alyx) (Remote host closed the connection)
[08:08:36] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:21] *** Joins: zkanda (~zkanda@box.makean.art)
[08:17:59] *** Joins: andlabs (~andlabs@70.107.171.168)
[08:20:07] *** Quits: albertito (~nil@37.228.204.251) (Ping timeout: 252 seconds)
[08:27:04] *** Joins: albertito (~nil@37.228.204.251)
[08:37:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:37:36] *** Joins: Atque (~Atque@user/atque)
[08:38:13] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:39:55] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[08:40:17] *** Quits: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35) (Quit: System Rebooting..)
[08:41:10] *** Joins: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35)
[08:42:21] *** Joins: darkapex (~darkapex@user/darkapex)
[08:44:43] *** Joins: aead (~aead@user/aead)
[08:59:29] <prologic> awesome
[08:59:42] <prologic> I finally figured out it's not my reverse proxy at all
[08:59:52] <prologic> it's my ssh server code that's bugged
[09:00:17] <prologic> some interaction between that and the stdio listener + http I've cobbled together
[09:00:18] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 244 seconds)
[09:00:32] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[09:00:47] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[09:00:47] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[09:00:57] *** Joins: masoudd (~masoudd@user/masoudd)
[09:01:12] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[09:02:05] *** Joins: alip (~alip@exherbo/developer/alip)
[09:05:59] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 244 seconds)
[09:06:22] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[09:07:32] *** Quits: k0ta (~k0ta@151.210.169.240) (Ping timeout: 244 seconds)
[09:07:43] *** Joins: k0ta (~k0ta@103.108.94.37)
[09:09:15] *** Quits: gbmor (ben@gbmor.dev) (Quit: WeeChat 3.2)
[09:09:28] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[09:13:43] <prologic> I can't see anything obviously wrong with https://git.mills.io/prologic/docker-proxy/src/branch/master/internal/ssh_server.go#L208-L242
[09:17:22] *** Joins: mei (~mei@user/mei)
[09:20:09] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[09:22:49] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 252 seconds)
[09:30:44] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:31:04] *** Joins: c10l (~c10l@89.34.167.207)
[09:33:59] *** Quits: quippy_ (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[09:38:46] *** Joins: cloudfstrife (~cloudfstr@112.65.48.253)
[09:39:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[09:42:59] *** Quits: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35) (Quit: System Rebooting..)
[09:46:04] *** Joins: kindablue (znc@irc.tpurist.com)
[09:50:46] *** Joins: Ruxnor4 (kevin@user/kddlb)
[09:51:17] *** Quits: dfch (~dfch@user/dfch) (Remote host closed the connection)
[09:51:20] *** Quits: Xizor (~Xizor@151.ip-51-68-121.eu) (Quit: ZNC 1.7.5 - https://znc.in)
[09:51:23] *** Quits: Kane (~Kane@portal.yarg.fr) (Quit: quit)
[09:51:30] *** Joins: Xizor_ (~Xizor@151.ip-51-68-121.eu)
[09:51:58] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Ping timeout: 252 seconds)
[09:52:03] *** Joins: dfch (~dfch@user/dfch)
[09:52:31] *** Quits: Ruxnor (kevin@user/kddlb) (Ping timeout: 252 seconds)
[09:52:31] *** Ruxnor4 is now known as Ruxnor
[09:53:09] *** Joins: Kane (~Kane@portal.yarg.fr)
[09:53:29] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[10:01:30] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:b45c:3bc5:3a79:b1e7) (Quit: Leaving)
[10:07:31] *** Joins: shka (~herr@109.231.62.239)
[10:07:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:10:10] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:10:49] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[10:18:52] *** Joins: gggp (~textual@111.63.14.115)
[10:19:02] *** Quits: gggp (~textual@111.63.14.115) (Client Quit)
[10:19:07] *** Joins: jpw (~jpw@user/jpw)
[10:24:33] *** Joins: kodah (~kodah@user/kodah)
[10:26:56] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[10:28:21] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:2803:abeb:650d:f726) (Quit: Leaving)
[10:35:38] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:37:59] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:45:54] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[10:55:40] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 240 seconds)
[11:00:53] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[11:04:23] *** Joins: mrig (~mrig@user/mrig)
[11:05:43] *** Quits: cloudfstrife (~cloudfstr@112.65.48.253) (Ping timeout: 252 seconds)
[11:07:20] *** Joins: cloudfstrife (~cloudfstr@112.65.61.36)
[11:08:27] *** Parts: cloudfstrife (~cloudfstr@112.65.61.36) ()
[11:21:09] *** Joins: jpw (~jpw@user/jpw)
[11:25:31] *** Quits: msk (~msk@49.207.201.57) (Ping timeout: 252 seconds)
[11:33:40] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:34:02] *** Joins: independent56 (~independe@95.144.68.39)
[11:34:37] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[11:38:24] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 244 seconds)
[11:39:04] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-85.prtc.net)
[11:39:49] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 252 seconds)
[11:42:16] *** Joins: eduardas (~eduardas@93.93.57.5)
[11:55:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:59:47] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-85.prtc.net) (Quit: Client closed)
[12:04:00] *** Quits: rcernin (~rcernin@pa49-182-9-170.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[12:05:24] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:07:48] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[12:08:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:16:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[12:18:39] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[12:22:45] *** Joins: Atque (~Atque@user/atque)
[12:24:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[12:25:04] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:27:40] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:37:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:38:02] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:41:11] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[12:46:04] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:51:20] *** Joins: minix (~nabromov@92.40.255.112.threembb.co.uk)
[12:52:37] *** Joins: msk (~msk@49.207.201.57)
[12:53:43] *** Parts: minix (~nabromov@92.40.255.112.threembb.co.uk) ()
[12:53:55] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[13:06:11] *** Joins: Atque (~Atque@user/atque)
[13:07:05] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:07:31] *** Joins: independent56 (~independe@95.144.68.39)
[13:11:00] *** Joins: banshi (~tcst@85.115.248.242)
[13:11:03] <banshi> hello all
[13:11:41] <banshi> do you use gobuffalo? Is there channel about it?
[13:28:16] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[13:33:27] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[13:37:16] *** Joins: ekathva (~ekathva@88-114-118-108.elisa-laajakaista.fi)
[13:37:29] *** Joins: oxum (~oxum@106.203.195.217)
[13:41:42] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 245 seconds)
[13:41:53] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 244 seconds)
[13:41:55] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[13:47:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[13:47:42] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[13:48:05] *** Joins: independent56 (~independe@95.144.68.39)
[13:48:09] *** Joins: flynn (~mcbloch@user/flynn)
[13:48:43] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:52:24] *** Joins: johsj (~johsj@proxy01.se.axis.com)
[13:53:03] *** Joins: Guest24 (~Guest24@adsl-72-50-4-41.prtc.net)
[13:54:47] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[13:55:05] *** Joins: independent56 (~independe@95.144.68.39)
[13:55:42] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:57:54] *** Quits: Guest4385 (~chat@194.182.165.230) (Quit: bleh!)
[13:58:10] *** Joins: eau (~chat@user/eau)
[13:58:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[14:02:46] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:04:46] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[14:17:26] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:23:56] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[14:27:00] *** Joins: Giedrius (~giedrius@5.133.65.65)
[14:30:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[14:30:43] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[14:30:50] *** Quits: Guest24 (~Guest24@adsl-72-50-4-41.prtc.net) (Quit: Client closed)
[14:31:25] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[14:36:06] *** Quits: g4wjs (~quassel@mail.classdesign.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:37:05] *** Joins: independent56 (~independe@95.144.68.39)
[14:37:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:38:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:38:14] *** Joins: g4wjs (~quassel@mail.classdesign.com)
[14:43:46] *** Joins: khrbt (~znc@user/khrbt)
[14:43:53] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 244 seconds)
[14:52:15] *** Parts: banshi (~tcst@85.115.248.242) ()
[14:53:19] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[14:56:34] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Read error: Connection reset by peer)
[14:58:03] *** Joins: mnx|aw (~nabromov@94.11.23.235)
[14:59:37] *** Joins: independent56 (~independe@95.144.68.39)
[15:00:25] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 244 seconds)
[15:08:56] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[15:23:09] *** Joins: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de)
[15:30:49] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[15:31:58] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[15:41:07] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[15:44:22] *** Joins: mouseghost (~draco@user/mouseghost)
[15:46:12] <mouseghost> how precise is go's time After?
[15:46:43] <mouseghost> func After(d Duration) <-chan Time
[15:46:44] <mouseghost> this one
[15:48:01] <sztanpet> depends on how precise is precise :)
[15:48:31] <mouseghost> hmm
[15:48:46] <mouseghost> well, i am looking for 1ms or less of deviation :P sztanpet
[15:50:43] <sztanpet> make sure to actually measure it, but i think thats reasonable provided the OS plays ball with scheduling latencies
[15:50:59] <mouseghost> hmm
[15:51:10] *** Joins: independent56 (~independe@95.144.68.39)
[15:51:28] <mouseghost> then i wonder if its possible to totally override OS scheduling and a core for myself
[15:51:42] <sztanpet> "no"
[15:51:45] <mouseghost> or at least in some specific time... but i suppose this is what RTOSs are made for
[15:51:46] <mouseghost> ha :D
[15:55:38] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 250 seconds)
[15:55:43] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:55:55] <sztanpet> mostly yes, im sure theres some black magic you can do within linux
[15:56:44] *** Joins: flynn (~mcbloch@user/flynn)
[15:57:16] <sztanpet> but measure first, and use the easy options first if not satisfactory :)
[15:57:37] <mouseghost> yes i figure :P
[16:06:22] *** Joins: normen (~normen@2a00:20:701f:2ede:c176:4704:96c8:f9db)
[16:10:11] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:14:13] *** Joins: independent56 (~independe@51.158.144.31)
[16:16:36] *** Joins: speatzle_ (~speatzles@2001:470:69fc:105::1003)
[16:17:33] *** Quits: independent56 (~independe@51.158.144.31) (Read error: Connection reset by peer)
[16:17:49] *** Joins: independent56 (~independe@51.158.144.31)
[16:17:55] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 244 seconds)
[16:22:39] *** Quits: johsj (~johsj@proxy01.se.axis.com) (Quit: Client closed)
[16:25:51] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
[16:27:25] *** Quits: independent56 (~independe@51.158.144.31) (Read error: Connection reset by peer)
[16:28:51] *** Joins: independent56 (~independe@95.144.68.39)
[16:29:40] *** Quits: normen (~normen@2a00:20:701f:2ede:c176:4704:96c8:f9db) (Ping timeout: 252 seconds)
[16:32:44] *** Joins: someuser (~user@41.44.116.27)
[16:33:25] *** Joins: gggp (~textual@111.63.14.115)
[16:34:13] *** Parts: someuser (~user@41.44.116.27) ()
[16:34:27] *** Joins: auser0 (~user@41.44.116.27)
[16:34:35] <auser0> hello everyone, i am looking at some code and i wonder why in this function, the function signature says it should be returning a pointer and i see it's not returning anything, and why was the variable declared without the `:=`
[16:34:40] <auser0> https://play.golang.org/p/-2L2_Rnaqgn
[16:35:10] <auser0> its in here too : https://gist.github.com/YairFernando67/0711f04375f2da0e9f91e4b7e9cbba05#file-helpers-go
[16:35:15] *** Quits: gggp (~textual@111.63.14.115) (Client Quit)
[16:35:20] *** Joins: johsj (~johsj@proxy01.se.axis.com)
[16:35:30] *** Quits: johsj (~johsj@proxy01.se.axis.com) (Client Quit)
[16:36:30] <ikke> In go, return values can be named
[16:36:39] <ikke> in this case, pd, which is being assigned to
[16:37:05] <ikke> so pd is not a new variable, it's the return variable, hence no :=
[16:38:01] <ikke> https://tour.golang.org/basics/7
[16:38:17] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[16:39:35] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com)
[16:39:53] *** Joins: yoonkn (~user@175.197.208.79)
[16:41:53] <auser0> ty ikke, so incase i don't want the renamed return variables, i guess i would do `*ProductDetail` instead of `pd *ProductDetail`
[16:42:58] *** Joins: normen (~normen@2a00:20:701f:2ede:94fb:3bfc:e84c:98a1)
[16:43:07] <ikke> and you need to return it
[16:43:16] <ikke> return &ProductDetail{..
[16:43:22] <auser0> yup, thank you
[16:43:25] <auser0> something else
[16:43:57] <auser0> https://i.imgur.com/KzHoIiy.png
[16:44:25] <auser0> when i have an embedded struct, shouldn't i access it using something like international.order.xxx
[16:44:42] <ikke> You can, but it's optional
[16:44:49] <auser0> i am seeing it assigning to its value without doing .order part
[16:47:13] <auser0> okay that answers it too :) thanks
[16:49:14] <auser0> i am really used to pointers, but why would someone return here a slice of pointers to productdetails instead of productdetails without pointers to them
[16:49:16] <auser0> https://i.imgur.com/0PjMY7H.png
[16:49:57] <ikke> Sometimes just to avoid copyinf by value
[16:50:34] <auser0> isn't go lang no matter what we do is always call by value ?
[16:51:13] <ikke> copying pointers is cheaper than copying the actual values
[16:51:49] <ikke> But it might be as well because the values should be able to be modified
[16:54:57] <auser0> makes sense ty
[16:58:20] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[17:01:06] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[17:01:06] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:01:07] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Ping timeout: 250 seconds)
[17:01:17] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[17:01:38] <auser0> i also wonder why in this module file i am not allowed to use ":=" either : https://i.imgur.com/DaD5EHy.png
[17:02:18] <auser0> why using var when declaring and initializing only is allowed
[17:02:46] <A_Dragon> var is required outside of function scope.
[17:04:08] <ikke> And sometimes inside a function, you want to assign the value in a deeper scope, but use it outside of that scope
[17:04:28] <A_Dragon> ^ but if you dont want to assign something to the variable
[17:04:33] <A_Dragon> otherwise := works fine for that
[17:04:54] <ikke> yes
[17:05:49] <auser0> got it so var works close to have js var works i guess?
[17:06:19] <auser0> it kinda sounds the same that it can be used inside nested {}
[17:07:26] <ikke> javascript has var lifting though
[17:07:36] <auser0> hoisting thing true
[17:07:45] <auser0> its not the same in that case then
[17:08:02] <A_Dragon> in the case of defining above ifs
[17:08:07] <A_Dragon> its quite simple
[17:08:21] <A_Dragon> the name can be used in the scope it is defined in, and any scopes below that one
[17:08:46] <A_Dragon> `var somePrimitiveOrStruct x` simply defines the name at that scope
[17:08:52] <A_Dragon> (and sets it to its zero value)
[17:09:23] <auser0> what do you mean here by above ifs ? if you can show me an example
[17:09:40] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[17:09:52] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[17:09:54] <A_Dragon> `if someThing {a := b} else { a := c }; doSomethingWith(a)`
[17:09:59] <A_Dragon> this goes bang unless a exists above
[17:12:04] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: getz[m] (~getz@2001:470:69fc:105::c85e) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: keeganza (~keeganza@2001:470:69fc:105::c842) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: freswa[m] (~freswa@2001:470:69fc:105::c1ec) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: securethemews (~securethe@2001:470:69fc:105::9b6d) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: 077AADPLU (~phoenixma@2001:470:69fc:105::f9b) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: Bridge terminating on SIGTERM)
[17:12:04] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: dngray[m] (~dngray@user/dngray) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: dec (~dec@2001:470:69fc:105::3204) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: speatzle_ (~speatzles@2001:470:69fc:105::1003) (Quit: Bridge terminating on SIGTERM)
[17:12:08] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Bridge terminating on SIGTERM)
[17:12:09] *** Quits: bfsuns2k[m] (~bfsuns2km@2001:470:69fc:105::e4ed) (Quit: Bridge terminating on SIGTERM)
[17:12:11] *** Quits: dung[m] (~dungbrocc@2001:470:69fc:105::d25b) (Quit: Bridge terminating on SIGTERM)
[17:12:11] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: hamoko (~hamoko@2001:470:69fc:105::e218) (Quit: Bridge terminating on SIGTERM)
[17:12:12] *** Quits: dpatterbee[m] (~dpatterbe@2001:470:69fc:105::3f9e) (Quit: Bridge terminating on SIGTERM)
[17:13:50] *** Joins: oxum (~oxum@106.203.195.217)
[17:13:55] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:14:33] *** Joins: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb)
[17:15:47] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[17:16:42] *** Joins: holgersson (~quassel@user/holgersson)
[17:16:46] <auser0> sorry A_Dragon  i can't understand this one, do u mind showing me what u mean in go playground?
[17:16:54] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[17:16:54] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[17:16:54] *** Joins: phoenix[m]1 (~phoenixma@2001:470:69fc:105::f9b)
[17:16:54] *** Joins: kadoban (~kadoban@user/kadoban)
[17:16:54] *** Joins: dpatterbee[m] (~dpatterbe@2001:470:69fc:105::3f9e)
[17:16:54] *** Joins: freswa[m] (~freswa@2001:470:69fc:105::c1ec)
[17:16:54] *** Joins: mambang[m] (~mambang@user/mambang)
[17:16:54] *** Joins: psydroid (~psydroid@user/psydroid)
[17:16:54] *** Joins: getz[m] (~getz@2001:470:69fc:105::c85e)
[17:16:54] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[17:16:54] *** Joins: securethemews (~securethe@2001:470:69fc:105::9b6d)
[17:16:54] *** Joins: keeganza (~keeganza@2001:470:69fc:105::c842)
[17:16:55] *** Joins: hamoko (~hamoko@2001:470:69fc:105::e218)
[17:16:59] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[17:17:01] *** Joins: bfsuns2k[m] (~bfsuns2km@2001:470:69fc:105::e4ed)
[17:17:06] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[17:17:06] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[17:17:06] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[17:17:06] *** Joins: dung[m] (~dungbrocc@2001:470:69fc:105::d25b)
[17:17:07] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[17:17:08] *** Joins: dec (~dec@2001:470:69fc:105::3204)
[17:17:08] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[17:17:08] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[17:17:08] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[17:17:09] *** Joins: dngray[m] (~dngray@user/dngray)
[17:17:31] *** Quits: normen (~normen@2a00:20:701f:2ede:94fb:3bfc:e84c:98a1) (Ping timeout: 252 seconds)
[17:17:40] *** Joins: djo (~djo@157.99.10.106)
[17:17:51] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:18:00] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:18:02] *** Joins: independent56 (~independe@95.144.68.39)
[17:18:26] <A_Dragon> ~eval var a string; if false { a = "false" } else { a = "true" }
[17:18:27] <goplay> ./prog.go:4:6: a declared but not used
[17:18:34] <A_Dragon> oh shut up bot
[17:18:36] *** Joins: Torr (~Torr@user/torr)
[17:18:38] <A_Dragon> ~eval var a string; if false { a = "false" } else { a = "true" }; _ = a
[17:18:40] <goplay> Complete, but no prints
[17:18:52] <A_Dragon> fine Ill get a link because I apparently didnt provide a link for that
[17:19:03] <auser0> ty :D
[17:19:17] <auser0> https://play.golang.org/p/O1BTFJ5Clwx this is very wrong i know but been trying
[17:19:20] * A_Dragon makes the bot share the link
[17:20:01] <auser0> https://play.golang.org/p/mCUA_RAQwe0 this seems ok
[17:20:14] *** Quits: holgersson (~quassel@user/holgersson) (Client Quit)
[17:20:34] <A_Dragon> yep, you cant use := on a name defined with `var` ( or one defined with := before)
[17:20:58] <A_Dragon> := is basically saying to the compiler "I dont want to type var name type, you figure it out"
[17:21:14] <A_Dragon> so `a := 0` becomes `var a = 0`
[17:21:20] <A_Dragon> so `a := 0` becomes `var a int = 0`
[17:21:22] <A_Dragon> sorry
[17:22:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:22:39] *** Joins: oxum (~oxum@106.203.195.217)
[17:22:40] <auser0> thanks guess i got it now heh
[17:23:10] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[17:25:52] <auser0> is it me or the whole interface{} is little confusing in go lol
[17:26:17] *** Joins: sus (thelounge@user/zeromomentum)
[17:26:22] *** Quits: sus (thelounge@user/zeromomentum) (Client Quit)
[17:26:26] <auser0> i am still learning it, it's my 2nd day, so long way to go, just confused with it so far but interfaces are okay, just the whole interface{} type
[17:26:49] *** Joins: sus (thelounge@user/zeromomentum)
[17:28:03] <fizzie> `var a = 0` was fine too, the type is optional (can be inferred) in long declarations as well.
[17:29:08] <fizzie> And some of the identifiers on the left side of an := can be existing variables declared in the same scope (that will be assigned to), as long as there's at least one new name in there.
[17:29:30] <A_Dragon> auser0: have you read though the tour of go?
[17:29:39] <A_Dragon> also, as a new user, pretend `interface{}` doesnt exist
[17:29:58] <A_Dragon> interfaces that define methods, cool, but the empty interface is something many new users fall prey to
[17:30:02] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[17:30:58] <auser0> thanks fizzie and thats true a_dragon, i was following with this udemy tutoiral https://www.udemy.com/course/go-the-complete-developers-guide and also checking the go docs and googling tbh
[17:31:00] *** Joins: andlabs (~andlabs@70.107.171.168)
[17:31:25] <A_Dragon> start with tour.golang.org
[17:31:41] *** Joins: normen (~normen@2a00:20:701f:2ede:681e:4d82:a98d:eaf6)
[17:32:22] <auser0> okay that page i came across a few times and i am sure i checked their interface snippets, was a clear one and i am sure i understood it
[17:32:24] <auser0> https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go
[17:32:39] <auser0> this one was little challenging for me and the links it has :p so i will just ignore this for now :)
[17:32:48] <A_Dragon> I recommend going though the entire tour
[17:33:06] <auser0> that part especially : https://i.imgur.com/C0Acast.png
[17:33:17] <auser0> ya will do this soon too :)
[17:33:53] <auser0> is constructed of "two words of data" wait what :D
[17:34:24] <A_Dragon> the word size of a system depends on the system
[17:34:42] <A_Dragon> on 64 bit x86 processors, its 64 bits long
[17:34:58] *** Joins: adlternative (~adl@117.32.216.71)
[17:37:29] <auser0> i am newbie when it comes to such stuff tbh, but if if i understood correctly, v interface{} will accept any concrete type, but then there is this conversion happening.. so let say i called it with an int variable, is v in the scope of a function of type interface{} or int or both :D?
[17:37:47] <A_Dragon> its an interface{}
[17:37:50] <A_Dragon> no more, no less
[17:38:14] <A_Dragon> what is *in* that interface is dependant on what you pass to it, but as far as your function is concerned, v is of type interface{}
[17:38:52] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[17:39:20] *** Joins: sus (thelounge@user/zeromomentum)
[17:40:32] *** Joins: holgersson (~quassel@user/holgersson)
[17:42:53] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:47:46] *** Joins: prologic (~prologic@mail.mills.io)
[17:48:18] <prologic> Is there anything in the stdlib or otherwise that'll wrap os.Stdin/os.Stdout into a net.Conn and a net.Listener ?
[17:48:34] <prologic> I need to rule out bugs in my own implementation
[17:51:14] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:51:33] *** Joins: independent56 (~independe@95.144.68.39)
[17:54:14] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:54:32] *** Joins: independent56 (~independe@95.144.68.39)
[17:54:46] *** Joins: adl_ (~adl@117.32.216.71)
[17:55:49] <auser0> ty
[17:56:14] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:56:34] <A_Dragon> prologic: ...what exactly are you attempting to solve by doing that?
[17:57:20] <prologic> serve a http request to an ssh server's io.ReadCloser and io.WriteCloser
[17:57:38] *** Quits: adlternative (~adl@117.32.216.71) (Ping timeout: 244 seconds)
[17:59:42] <A_Dragon> well how about use io.copy between them?
[18:00:00] <A_Dragon> you can use a two way copy that way in two goroutines, done
[18:00:12] <A_Dragon> treat the net.Conn as a io.ReadWriter
[18:00:48] <prologic> uggh no
[18:01:01] <sztanpet> auser0 dont forget, every feature of a programming language is an abstraction that is implemented somehow, the fact that an interface is two words of data is such an implementation detail
[18:01:03] <prologic> I have a io.ReaderCloser/io.WriteCloser on one side and a http.Serve
[18:01:18] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 250 seconds)
[18:01:38] <prologic> http.Server{} sorry
[18:02:16] <prologic> I wrap the io.ReadClose/io.WriteCloser (from the incoming ssh session) into a stdio.Conn and wrap that into a stdio.Listener which then gets used by http.Server.Serve(ln)
[18:02:20] *** Joins: gbmor (ben@gbmor.dev)
[18:05:21] <sztanpet> auser0 http://www.craftinginterpreters.com/ if interested, its a deep rabbit hole
[18:05:42] <auser0> thanks sztanpet and i agree on that, i was just focusing and the whole "two words of data" made no sense to me but probably just because I'm not so aware of this under the hood or little details. I was trying to wrap my head over interface for good. I'm still long way to go tho, go syntax was so good so far, just pointers and interface{} might need some more work from me
[18:06:21] <auser0> pointers i came across them in c before which i barely know, so they are ok, but they still scare me, my very first programming language was python so started with a "Wrong start" i guess haha
[18:07:02] <auser0> https://zetcode.com/golang/interface/ <-- is this good enough for interface? and what is the type assertion ? just randomly had this pinned, haven't looked deep into it
[18:07:05] *** Quits: rewt (~default@user/rewt) (Ping timeout: 248 seconds)
[18:07:19] <A_Dragon> read the go tour.
[18:07:24] <A_Dragon> it covers all the features of go.
[18:07:35] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[18:07:47] *** Joins: cryptomonad (~cryptomon@194.191.225.149)
[18:07:58] <auser0> okay thats my plan then :p just one more lecture and will go to that, i have some part of the interface section in this udemy course then channels in go and then i will check "go tour"
[18:08:06] *** Joins: rewt (~default@user/rewt)
[18:08:07] <A_Dragon> prologic: http.Server.Serve should still provide you a read/write handle for the socket
[18:08:26] <A_Dragon> auser0: https://tour.golang.org
[18:09:01] <prologic> A_Dragon sorry you'r enot getting it :) don't worry
[18:09:09] <prologic> In any case I cannot find anything myself
[18:09:42] <A_Dragon> prologic: trying :D you want to hook an http request up to an SSH session, no?
[18:09:50] <A_Dragon> or, a socket upon which there is an ssh session
[18:11:48] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[18:12:05] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:13:21] <A_Dragon> because wrapping an io.ReadWriter into a net.Conn isn't exactly a possible thing at that level. you can connect one to the other, possibly with a pipe but unless you want to implement a good few dummy methods (see `go doc net.Conn, Read, Write, Close, LocalAddr, RemoteAddr, SetDeadline, SetReadDeadline, SetWriteDeadline) you're gonna have an annoying time
[18:13:31] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:13:53] <prologic> These are the only things I can find https://github.com/search?q=language%3AGo+StdioListener&type=code
[18:14:00] <prologic> They're all fairly straight forward implemtnations
[18:14:08] <prologic> So I may be barking up the wrong tree here with my bug
[18:14:32] <prologic> [23:39:42]  <A_Dragon> prologic: trying :D you want to hook an http request up to an SSH session, no? <-- yes precisely :
[18:14:33] <prologic> :D
[18:14:38] <prologic> I've already done it, it works fine
[18:14:50] <A_Dragon> those are Listner impls not Conn :P
[18:14:55] <prologic> except for one minor cleanup bug (leaking session) and a major bug where upgraded connections don't work
[18:14:56] <A_Dragon> okay what bug are you having?
[18:15:04] <prologic> i.e: Connection: Upgrade
[18:15:40] <prologic> And yea I've implemented them all
[18:15:41] <A_Dragon> go doesnt have base support for websockets, you'll need something to handle that. As for session leaking that'd depend on where you cleanup from
[18:15:48] <prologic> or rather borrowed code
[18:15:58] <prologic> I need both :)
[18:16:05] <prologic> a net.Conn and net.Listener
[18:16:06] <prologic> obviously :)
[18:16:08] *** Joins: arktnld_ (~arktnld@179.181.126.166)
[18:16:20] <A_Dragon> I dont see why honestly
[18:16:25] <prologic> A_Dragon wait... hold up
[18:16:26] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:16:29] <prologic> Go doesn't support websockets?
[18:16:30] <prologic> Are you sure?
[18:16:31] <A_Dragon> I feel like it'd be easier to do this from the other side
[18:16:44] <A_Dragon> the stdlib http server does not have websocket support
[18:16:48] <prologic> the net/http/httputil.ReverseProxy _does_ support 101 Switching Protocols and Connection: Upgrade
[18:16:57] <prologic> I saw the commit that was merged to support this
[18:17:05] <A_Dragon> correct. but thats not http.Listen
[18:17:14] <A_Dragon> nor is it every Listener implementation
[18:17:28] *** Joins: independent56 (~independe@95.144.68.39)
[18:17:33] <prologic> well remember I"m just proxying actually
[18:17:40] <prologic> not actually being a http server per se
[18:17:57] <prologic> and intercepting requests in-between :)
[18:18:05] <prologic> Is it easier if we talk to/against sorta working code?
[18:18:24] <A_Dragon> yes but you're using http.Serve, no? but yes please share code this would be a bunch easier
[18:18:40] <prologic> may I privmsg you?
[18:18:51] <A_Dragon> are you concerned that sharing it here is a problem?
[18:19:00] <prologic> no not really :)
[18:19:06] <A_Dragon> its far better to share code in the open so other people can also chime in
[18:19:11] <prologic> https://git.mills.io/prologic/docker-proxy
[18:19:18] <prologic> specifically internal/ssh_server.go
[18:19:37] <prologic> The client here is `docker` (the cli)
[18:19:50] <prologic> And the bug here is that `docker run ...` and/or `docker attach` hangs somewhere
[18:20:02] *** Quits: normen (~normen@2a00:20:701f:2ede:681e:4d82:a98d:eaf6) (Ping timeout: 245 seconds)
[18:20:02] <prologic> I've tried to understand why with stacktraces but I've gotten nowhere
[18:20:30] *** Quits: dozn_ (uid249292@id-249292.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:20:33] <prologic> And... it's just the ssh server side, the http side works just fine (if you ignore the fact the docker cli client can do nothing else besides TLS auth :/)
[18:20:36] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-4.prtc.net)
[18:21:16] <prologic> For such requests btw, the backend responds with a 101 Switching Protocols and a Connection: tcp header
[18:21:58] <prologic> as described in https://docs.docker.com/engine/api/v1.41/#operation/ContainerAttach
[18:23:25] *** Joins: djo_ (~djo@public-nat.it.pasteur.fr)
[18:24:43] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[18:25:10] <A_Dragon> slight comment while Im poking though this; `chan struct{}` is smaller than `chan bool`
[18:25:51] <A_Dragon> so the attach traces you get
[18:26:03] <A_Dragon> are they from docker itself or your code?
[18:26:16] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 252 seconds)
[18:28:09] *** Quits: SuperLag (~akulbe@user/superlag) (Remote host closed the connection)
[18:28:14] <A_Dragon> and does it happen if you throw delve at the problem
[18:28:23] <prologic> from my code soryr
[18:28:31] <prologic> I'm assuming the `docker` cli client is perfect :D
[18:28:42] <prologic> It's had many more thousands of years of engineering effort behind it :)
[18:28:50] <A_Dragon> eh never assume code is perfect.
[18:28:51] <prologic> unlike my shitty ~2k worth of code :D
[18:28:58] <A_Dragon> hey its clean :P
[18:29:09] <prologic> haha
[18:29:10] <prologic> thanks :)
[18:29:13] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[18:29:19] <prologic> yeah I haven't tried to debug this with delve yet, sorry
[18:29:20] <A_Dragon> so is it possible
[18:29:26] <A_Dragon> because Im not seeing anything pop out in my face
[18:29:27] <prologic> I'm actually pretty rubbish at using delve
[18:29:31] <A_Dragon> that you're missing newlines?
[18:29:32] <prologic> But I know where it gets stuck
[18:29:41] <prologic> it gets stuck at p.upstream.ServeHttp(w, r) somewhere
[18:29:45] <prologic> in proxy/proxy.go
[18:29:49] <prologic> but only for the ssh server case
[18:29:59] <A_Dragon> sounds like something is waiting for data
[18:30:37] <siXy> I would definitely not assume that the docker cli client is perfect.
[18:30:41] <prologic> what doesn't sit right with me is the http -> proxy -> docker unix socket works just fine
[18:30:46] <prologic> but not ssh -> proxy -> docker unix socket
[18:30:58] <prologic> using the same proxy/proxy.go code (identically in both cases)
[18:31:02] <A_Dragon> prologic: as I said, I suspect that something in the middle is doing something funky
[18:31:04] <prologic> just the transport is different
[18:31:12] <A_Dragon> yeah but there might be extra control chars
[18:31:13] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 252 seconds)
[18:31:13] <prologic> so it smells like a bug somewhere
[18:31:19] *** Quits: cryptomonad (~cryptomon@194.191.225.149) (Read error: Connection reset by peer)
[18:31:19] <A_Dragon> or a bug in go
[18:31:28] *** Joins: cryptomonad (~cryptomon@194.191.225.149)
[18:31:32] <prologic> hmm control chars eh?
[18:31:38] <prologic> now we're thinking :)
[18:31:39] <A_Dragon> its very possible you've found a bug in go or in docker
[18:31:51] <A_Dragon> go for printfs and dump everything, at every step
[18:31:56] <A_Dragon> see where it stops, why, and how
[18:32:00] <prologic> well I've discovered a data race with github.com/gliderlabs/ssh already :)
[18:32:07] <prologic> not sure if it's impacting this
[18:32:59] <prologic> I would have to go copy the net/http/httputil.ReversProxy code so I can do that :)
[18:33:09] <prologic> might be easier to use delve. :)
[18:33:18] <A_Dragon> for testing that works, clone and rewrite, but delve is also your friend
[18:33:23] <prologic> but you're right the code is fairly straight forward from my pov
[18:33:28] <A_Dragon> if you use vscode or goland the debugger for both is delve
[18:33:32] <A_Dragon> so you can have a nice frontend
[18:33:59] <prologic> alrightly, time to keep going down rabbit holes :)
[18:34:06] <prologic> thanks for confirming my code isn't entirely insane :)
[18:34:36] *** Quits: cryptomonad (~cryptomon@194.191.225.149) (Client Quit)
[18:35:15] <siXy> prologic: Suggest making a smaller test case to reproduce this specific issue. There's too much code to review efficiently
[18:35:22] <A_Dragon> ^
[18:35:36] <prologic> ooof
[18:35:45] <prologic> I can probably do that but it won't be too much smaller to be honest
[18:35:51] <prologic> ssh_server + proxy.go basically
[18:36:14] <prologic> 384 loc which I can probably trim down further
[18:36:16] <prologic> so doable
[18:37:01] <prologic> let me do that in case any of you are interested in helping debug this, because it does smell like a bug no-with-my-code :D
[18:37:25] <A_Dragon> it still could be you misusing something, be wary
[18:37:32] <A_Dragon> I had a bug for MONTHS that I thought was a go bug
[18:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:37:49] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:39:00] <prologic> that's possible
[18:39:13] <A_Dragon> funnily enough, stdio related too
[18:39:20] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[18:39:24] <A_Dragon> but I was just expecting... flush, I think, to do something it wouldnt
[18:39:46] <Tv_> prologic: it sounds like you're trying to manually end-to-end test a complex system with many moving parts. you might never find clarity until you test the components one by one.
[18:39:57] *** arktnld_ is now known as arktnld
[18:40:01] <prologic> I wonder whether I'm getting bitten by some kind of buffered io behaviour here?
[18:40:05] *** Quits: arktnld (~arktnld@179.181.126.166) (Quit: arktnld)
[18:40:16] <A_Dragon> its possible
[18:40:39] <prologic> Tv_ as much as I appreciate the sentiment, I'm really not sure I can break this down any further :)
[18:40:48] <Tv_> yes, and *that* is the problem
[18:41:03] <prologic> Ok :)
[18:42:51] *** Joins: TUSF (~TUSF@2600:1700:7a80:2180:84f8:f67:54a3:d440)
[18:44:29] *** Joins: oxum (~oxum@106.203.195.217)
[18:44:39] *** Joins: fikran (~fikran@user/fikran)
[18:44:49] *** Joins: sully42 (~sully@107.181.155.225)
[18:45:00] *** Joins: adlternative (~adl@117.32.216.12)
[18:45:31] *** Quits: adl_ (~adl@117.32.216.71) (Ping timeout: 252 seconds)
[18:46:41] *** Quits: djo_ (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[18:47:18] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[18:47:48] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[18:48:29] <prologic> What do you make of this stack trace? https://gist.github.com/prologic/a05b556f4aa1353662c50428c7419a14
[18:49:17] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[18:50:30] <Tv_> looks like the http part was waiting for a clean shutdown, and it was otherwise idle
[18:52:19] *** Joins: djo (~djo@157.99.10.106)
[18:57:04] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 252 seconds)
[18:57:20] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[18:57:21] *** Joins: src (~src@user/src)
[18:58:59] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:02:13] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Ping timeout: 244 seconds)
[19:02:37] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[19:03:04] *** Parts: sully42 (~sully@107.181.155.225) (Textual IRC Client: www.textualapp.com)
[19:03:40] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:04:09] *** Joins: sus (thelounge@user/zeromomentum)
[19:05:17] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-4.prtc.net) (Ping timeout: 256 seconds)
[19:05:52] *** Quits: pts33 (~pts33@cpe-172-113-85-232.socal.res.rr.com) (Ping timeout: 250 seconds)
[19:10:12] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:10:27] *** Quits: adlternative (~adl@117.32.216.12) (Ping timeout: 245 seconds)
[19:10:39] *** Joins: arktnld (~arktnld@179.181.126.166)
[19:12:34] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:13:17] *** Quits: penguwin (~penguwin@fribbledom.com) (Quit: Ping timeout (120 seconds))
[19:13:50] *** Joins: penguwin (~penguwin@fribbledom.com)
[19:14:16] *** Quits: sneak (~sneak@datavi.be) (Quit: ZNC 1.7.5 - https://znc.in)
[19:15:40] *** Joins: sneak (~sneak@datavi.be)
[19:17:48] <prologic> just isolated it to a bug in proxy/proxy.go
[19:17:57] <prologic> which I now find really quite puzzling
[19:18:31] *** Joins: pepee (~user@user/pepee)
[19:18:43] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:18:52] <prologic> oh no I didn't brain fart :)
[19:18:56] <prologic> I fat fingered my test
[19:18:59] <prologic> :D
[19:19:10] *** Joins: sus (thelounge@user/zeromomentum)
[19:20:38] <prologic> I'm going to bed it's 1am here
[19:20:40] <prologic> :D
[19:20:43] <prologic> zzZZ
[19:22:25] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:9431:ac47:e213:66c4)
[19:23:26] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[19:24:43] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:25:11] *** Joins: sus (thelounge@user/zeromomentum)
[19:25:29] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-69a2-efd2-4950-bbeb.inf6.spectrum.com) (Ping timeout: 250 seconds)
[19:25:52] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:26:53] *** Joins: flynn (~mcbloch@user/flynn)
[19:33:22] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[19:34:01] *** Joins: aead (~aead@user/aead)
[19:34:38] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510)
[19:35:24] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[19:35:43] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[19:36:30] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:9431:ac47:e213:66c4) (Ping timeout: 256 seconds)
[19:38:58] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[19:39:54] *** Joins: djo (~djo@157.99.10.106)
[19:41:43] *** Joins: oxum (~oxum@106.203.195.217)
[19:42:23] *** Joins: PichuChen (~PichuChen@2001-b011-3010-3253-549e-5591-c360-b474.dynamic-ip6.hinet.net)
[19:46:33] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-44.prtc.net)
[19:47:07] *** Quits: PichuChen (~PichuChen@2001-b011-3010-3253-549e-5591-c360-b474.dynamic-ip6.hinet.net) (Ping timeout: 252 seconds)
[19:49:28] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:49:51] *** Joins: eduardas (~eduardas@93.93.57.5)
[19:50:30] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[19:50:32] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:50:37] *** Joins: mickey (~user@user/mickey)
[19:51:24] *** Joins: oxum (~oxum@106.203.195.217)
[19:53:24] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[19:54:00] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:54:04] *** Joins: oxum (~oxum@106.203.195.217)
[19:54:28] *** Joins: sus (zero@user/zeromomentum)
[19:57:17] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:84f8:f67:54a3:d440) (Quit: Leaving)
[19:57:40] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[19:58:49] *** Quits: arktnld (~arktnld@179.181.126.166) (Remote host closed the connection)
[20:00:37] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:00:38] *** Joins: oxum (~oxum@106.203.195.217)
[20:04:44] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 244 seconds)
[20:05:14] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[20:10:27] *** Joins: khrbt (~znc@user/khrbt)
[20:12:43] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-44.prtc.net) (Ping timeout: 256 seconds)
[20:14:07] *** Joins: oxum (~oxum@106.203.195.217)
[20:16:13] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 252 seconds)
[20:16:22] *** Joins: arktnld (~arktnld@179.181.126.166)
[20:16:27] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[20:17:57] *** Quits: ekathva (~ekathva@88-114-118-108.elisa-laajakaista.fi) (Ping timeout: 245 seconds)
[20:19:01] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[20:20:08] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[20:21:16] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 244 seconds)
[20:24:30] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[20:24:39] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[20:27:08] *** Quits: arktnld (~arktnld@179.181.126.166) (Quit: arktnld)
[20:28:18] *** Joins: djo (~djo@157.99.10.106)
[20:28:28] *** Joins: khrbt (~znc@user/khrbt)
[20:30:17] *** Joins: fdan (~fdan@192.146.154.3)
[20:30:21] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[20:32:38] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 244 seconds)
[20:33:07] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[20:33:29] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-199.prtc.net)
[20:34:38] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:37:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:37:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:39:55] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[20:42:55] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Quit: Leaving.)
[20:43:32] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[20:48:08] *** Quits: PedroG1 (~android@45.77.216.181) (Ping timeout: 244 seconds)
[20:51:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[20:53:20] *** Joins: independent56 (~independe@95.144.68.39)
[20:54:00] *** Joins: fikran (~fikran@user/fikran)
[20:54:05] *** Joins: TUSF (~TUSF@2600:1700:7a80:2180:7579:d96:efd:c364)
[20:54:46] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[20:55:18] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[20:56:51] <eric_hill> I wish I could write a Go program to make PowerPoint slides for me.
[20:58:59] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 244 seconds)
[21:00:46] <siXy> eric_hill: https://github.com/OfficeDev/Open-XML-SDK ;)
[21:01:50] <eric_hill> siXy: yea, the content is the hard part ;)
[21:02:06] *** Joins: darkapex_ (~darkapex@user/darkapex)
[21:03:27] *** Joins: caef^ (~caef@wsip-98-188-244-188.mc.at.cox.net)
[21:03:43] <siXy> Pfft. Just throw some machine learning at it, trained on all your previous slide decks. It'll be fiiiiiiine
[21:04:40] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[21:05:04] <eric_hill> Sounds like a great plan.  I think I'll call it Skynet.  /later... DEATH BY POWERPOINT!
[21:06:34] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-199.prtc.net) (Ping timeout: 256 seconds)
[21:06:39] <Tv_> Three years later: The AI looks at the desolate wasteland barren of life, shrugs its roboshoulders, and says: I thought he said "skin it"
[21:08:13] *** Joins: arcatech (~arcatech@user/arcatech)
[21:08:14] <Tv_> oh god i am seriously contemplating using postgres triggers and stored procedures and i'm having deja vu of horrors from 15 years ago
[21:08:35] <Tv_> it's amazing nobody has replaced that crud with anything better
[21:09:07] <lauraaah> 🤨
[21:09:48] *** Joins: me-sudoer-dentne (~me-sudoer@182.48.206.171)
[21:10:12] <Tv_> fun fact: the sanest option is to program python inside sql strings, where the text contents get schlopped into an argumentless function that sees a bunch of global variables
[21:10:20] <Tv_> good luck testing anything!
[21:10:28] <eric_hill> please god no, make it stop
[21:11:25] <Tv_> on the other hand, it seems this postgres hosting provider doesn't seem to track/bill for cpu time used in pg stored procedures. bitcoin, anyone?
[21:12:05] <eric_hill> I had the pleasure of troubleshooting an Oracle apex app the other day.  #shudder
[21:12:31] <eric_hill> Why Oracle would decide that processing HTTP requests IN THE DATABASE is beyond my level of alcohol.
[21:13:00] <Tv_> sounds on par for the old school db mindset
[21:13:05] <ikke> vendor lock-in
[21:13:15] <ikke> The more logic in the DB, the more you are tied to them
[21:13:29] <Tv_> one of the worst programming environments i've ever seen, hence the enterprise-approriate solutions provider synergistic strategy is to use it as much as possible
[21:14:21] <Tv_> to cause a fight at a bar after a tech conference, introduce the DBAs and the TDD fanatics to each other
[21:14:50] <ikke> That might lead us to WW3
[21:23:27] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:b45c:3bc5:3a79:b1e7)
[21:25:43] *** Joins: nostalgia (~treebeard@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:27:26] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:7579:d96:efd:c364) (Quit: Leaving)
[21:30:51] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:31:53] *** Joins: flynn (~mcbloch@user/flynn)
[21:33:22] *** Joins: aeadio (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[21:40:33] *** Quits: aeadio (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:41:23] *** Joins: aeadio (~aead@user/aead)
[21:43:04] *** Joins: goldfish (~goldfish@user/goldfish)
[21:45:45] *** Quits: aead (~aead@user/aead) (Quit: aead)
[21:46:00] *** aeadio is now known as aead
[21:47:32] *** Joins: ekathva (~ekathva@88-114-118-108.elisa-laajakaista.fi)
[21:49:30] *** Quits: me-sudoer-dentne (~me-sudoer@182.48.206.171) (Quit: Leaving)
[22:01:25] *** Joins: verified_human (~verified_@user/verified-human/x-8819513)
[22:14:47] *** Quits: vds (sid12483@id-12483.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[22:14:55] *** Joins: vds (sid12483@id-12483.helmsley.irccloud.com)
[22:15:07] *** Quits: meinside_ (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[22:15:10] *** Joins: TUSF (~TUSF@2600:1700:7a80:2180:3c40:19de:341a:6837)
[22:15:21] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[22:16:18] *** Joins: meinside_ (uid24933@id-24933.helmsley.irccloud.com)
[22:16:21] *** Joins: liam (sid7517@id-7517.helmsley.irccloud.com)
[22:18:22] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[22:18:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:21:51] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 250 seconds)
[22:22:40] *** Joins: jespada (~jespada@90.254.245.194)
[22:24:12] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[22:24:34] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[22:25:22] *** Quits: eric_hill (sid323132@id-323132.tinside.irccloud.com) (Ping timeout: 256 seconds)
[22:26:30] *** Joins: eric_hill (sid323132@id-323132.tinside.irccloud.com)
[22:28:59] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-5-6.prtc.net)
[22:34:34] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[22:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:38:02] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:40:26] *** Quits: caef^ (~caef@wsip-98-188-244-188.mc.at.cox.net) (Remote host closed the connection)
[22:46:41] *** Joins: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de)
[22:57:21] *** Joins: motheki (~motheki@8.20.123.121)
[23:00:10] *** Quits: theoceaniscool (~theoceani@213.94.16.93) (Ping timeout: 240 seconds)
[23:00:56] <saml> i'm building twitter clone. what's good terminology for follower/following.   is there something like ping/pong? somethign easy to draw direction of follow
[23:01:09] <saml> subscription/beingSubscribed
[23:01:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[23:01:23] <quippy> ActivityPub just uses follow
[23:01:32] <saml> subscription: I subscribe.    audience: Someone subscribes me
[23:01:35] <quippy> you don't have to come up with a synonym, it's not like they've trademarked it
[23:02:13] <quippy> but if you're going to write a Twitter clone, writing an ActivityPub one would make a lot of sense and then you can adopt their language for these kinds of decisions
[23:02:45] <saml> hrm thanks. TIL ActivityPub
[23:02:51] <quippy> but it should be noted that you have to support more than ActivityPub if you want to federate with Mastodon and Pleroma.. they implement a couple of other standards like WebFinger, too
[23:03:01] <saml> so, followers collection and following collection
[23:03:07] <quippy> right
[23:03:17] <quippy> since this is #go-nuts have a look at the library go-fed
[23:03:21] *** Joins: fikran (~fikran@user/fikran)
[23:03:28] <saml> i don't know why we're building social network
[23:03:47] <saml> but thanks to golang, I can scale massive
[23:05:54] <Tv_> massively scalable to handle both of my friends
[23:07:09] *** Quits: motheki (~motheki@8.20.123.121) (Remote host closed the connection)
[23:07:13] *** Joins: komish (~quassel@47-184-200-125.dlls.tx.frontiernet.net)
[23:07:40] <saml> maybe we should build vaccination social network for truely appreciate golang's scalability
[23:08:10] *** Quits: nixture (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[23:08:40] *** Joins: nixture (sid240036@id-240036.helmsley.irccloud.com)
[23:08:53] <saml> off-topic. more people are vaccinated than they voted in USA :P
[23:15:11] *** Joins: motheki (~motheki@8.20.123.121)
[23:28:47] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-5-6.prtc.net) (Ping timeout: 256 seconds)
[23:29:12] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 245 seconds)
[23:31:07] *** acidsys is now known as cranberry
[23:31:26] *** cranberry is now known as Lysergsaeure
[23:33:04] *** Joins: arcatech (~arcatech@user/arcatech)
[23:33:29] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[23:33:47] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[23:35:00] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[23:45:27] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[23:49:14] *** Joins: minix (~mnxaw@94.11.23.235)
[23:51:33] *** Quits: mnx|aw (~nabromov@94.11.23.235) (Ping timeout: 244 seconds)
[23:54:49] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:55:58] *** Joins: flynn (~mcbloch@user/flynn)
[23:56:55] *** Quits: motheki (~motheki@8.20.123.121) (Quit: motheki)
[23:57:10] *** Joins: motheki (~motheki@8.20.123.121)
[23:57:56] *** Quits: motheki (~motheki@8.20.123.121) (Client Quit)
[23:59:34] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 252 seconds)
