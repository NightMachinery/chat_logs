[00:00:02] <dacav> cousteau: I'd say so.  Also the same as A && B
[00:00:10] <cousteau> A ? (B ? 1 : 0) : 0 is the ?: equivalent to A && B
[00:00:48] <dacav> But if you ever use an elvis operator in place of an &&, your c*ck might fall off
[00:00:49] <cousteau> and !A ? !1 : !B ? !1 : !0 is the (weirdly written) equivalent of !(!A || !B)
[00:00:58] <cousteau> dacav: I was explaining this to bruda, not asking :)
[00:01:06] <dacav> Ahahah osrry
[00:01:13] <cousteau> but thanks for confirming
[00:01:30] <dacav> LOL
[00:01:52] <nitrix> Might be a good opportunity to point out it's named the conditional operator.
[00:02:58] <cousteau> nitrix: odd; I thought the standard didn't give operators a name
[00:03:42] <cousteau> (actually it gives *kinds of operators* a name; it just happens that the ?: operator is the only of its kind)
[00:06:08] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[00:06:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1) (Quit: Leaving)
[00:08:30] <bruda> Hotspot is slowing down. Can barely get ideone.com to load
[00:08:44] <bruda> But I reworked the solution and think I have the logic in the right order now.
[00:09:18] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[00:09:32] <cousteau> try codepad?
[00:10:37] <bruda> is that supposed to be codepad.com? I get 'welcome to nginx!' lol
[00:11:20] <bruda> https://bpa.st/PGTA
[00:11:35] <cousteau> no, .org
[00:11:46] <bruda> Again, () for a little clarification
[00:12:23] <cousteau> ok now at least the order looks correct
[00:12:30] *** Quits: i336 (~i336@101.163.197.5) (Ping timeout: 260 seconds)
[00:12:55] <bruda> Yea. Seems like an improvement. It will check the lim like it's supposed to or fail.
[00:12:59] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:11f0:11ab:7004:939b)
[00:13:01] * cousteau likes to put () around the conditions in the (a) ? b : c operator, which seems to be the tradition
[00:13:51] <cousteau> (also, i++ is a more common idiom than ++i for some reason... no idea why)
[00:14:05] *** Joins: i336 (~i336@121.217.192.178)
[00:14:24] *** Joins: Betal (~Betal@user/betal)
[00:14:28] <bruda> Yea, the book got me going with the ++i. Increment before returning the value.
[00:14:34] *** Quits: terminalpusher (~terminalp@2a01:586:12e7:1:ecac:12bf:39fa:2ed) (Remote host closed the connection)
[00:14:36] <apotheon> i++ in C has weird-feeling semantics
[00:14:49] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[00:15:03] <apotheon> In other languages, I typically see i++ with semantics like C's ++i.
[00:15:13] *** Joins: tejr (~tejr@user/tejr)
[00:15:40] <bruda> Fun exercise though. I think my brain is swelling from all the thinking lol
[00:17:06] <cousteau> well, the book uses i++ in the rest
[00:17:17] <cousteau> it uses ++i in that one example for some reason
[00:17:59] <cousteau> apotheon: in python, ++i and --i don't modify i
[00:18:10] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[00:18:11] <cousteau> and then you realize you just did +(+i) and -(-i)
[00:18:35] *** Quits: i336 (~i336@121.217.192.178) (Ping timeout: 256 seconds)
[00:18:46] *** Joins: sant (~sant@187.232.50.11)
[00:19:37] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[00:19:50] *** Joins: de-facto (~de-facto@user/de-facto)
[00:19:57] *** Joins: superdupond (~Kev@2a01cb0400149f003431aaec75954f23.ipv6.abo.wanadoo.fr)
[00:20:16] *** Joins: i336 (~i336@101.175.50.26)
[00:20:47] *** Joins: seninha (~seninha@user/seninha)
[00:22:49] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:25:39] <apotheon> cousteau: right, that's common in languages other than C, from what I recall
[00:25:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:25:58] <cousteau> maybe in "non C-style languages"
[00:26:54] *** Joins: jinsun__ (~quassel@user/jinsun)
[00:27:04] <apotheon> the consequence of having a unary - operator, method, or function with no -- operator
[00:28:22] <apotheon> cousteau: Some might argue that Ruby and Python are C-style languages.
[00:28:35] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:28:36] <cousteau> well, they are wrong
[00:28:41] <apotheon> Perl actually has a unary prefix -- operator.
[00:28:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:29:10] <cousteau> unless "any imperative language" counts as a C-like language
[00:30:04] <apotheon> cousteau: Anyway, if you narrow the definition of C-style languages that much, it doesn't change the accuracy of what I already said: that it's common in languages other than C.
[00:30:23] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[00:30:52] <cousteau> "C-like languages" being languages that use { } ; etc
[00:31:02] <cousteau> it's more a matter of how the language looks
[00:31:17] <cousteau> if () ...; else ...;
[00:31:28] <apotheon> Okay, with your definition Ruby can be written with braces.
[00:31:35] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[00:31:48] <cousteau> python has if ...: ... elif ...: ... else: ... (and weird indentation syntax)
[00:31:49] <apotheon> . . . though I don't use them for multiline blocks, generally.
[00:32:21] <cousteau> C doesn't even have `elif`, it just does magic with how `else` works so that `else if` has a meaning
[00:32:33] <apotheon> That's not very magical.
[00:33:12] <apotheon> It's actually a pretty elegant and straightforward design choice that I have long wished more languages used.
[00:34:20] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[00:34:31] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:37:08] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:38:02] *** Joins: magla (~gelignite@55d4c767.access.ecotel.net)
[00:38:09] <bruda> cousteau: does this seem a little clearer? https://ideone.com/hELOSj
[00:38:14] *** Joins: X-Scale` (~ARM@83.223.249.106)
[00:38:35] <bruda> or too many ()?
[00:38:50] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:11f0:11ab:7004:939b) (Ping timeout: 268 seconds)
[00:38:55] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[00:39:10] *** Joins: sant (~sant@187.232.50.11)
[00:40:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[00:42:41] *** X-Scale` is now known as X-Scale
[00:43:27] <nitrix> A would prefer a while loop checking a flag, with the logic for the flag inside the body.
[00:43:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:41b9:c5c1:7ca6:f7e2)
[00:43:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:41b9:c5c1:7ca6:f7e2) (Changing host)
[00:43:30] *** Joins: skapata (~Skapata@user/skapata)
[00:43:50] <bruda> , kr2-2
[00:43:50] <candide> Chapter 2: Types, Operators and Expressions; Exercise 2-2. Write a loop equivalent to the for loop above without using && or ||. [The for loop is: for (i=0; i < lim-1 && (c=getchar()) != ’\n’ && c != EOF; ++i) s[i] = c;]
[00:44:02] <bruda> ^ was doing that exercise.
[00:44:27] <bruda> Probably did it the hard way but was a fun challenge.
[00:46:13] <bruda> I figured an 'equivalent loop' would be an equivalent iterator and same body.
[00:46:47] <nitrix> That sort of loop comes up all the time, I would hardly call it a challenge.
[00:47:01] <bruda> I'm a newbie. So it was a challenge for me.
[00:47:53] <nitrix> You made it a challenge because you insisted on using the conditional operator.
[00:47:58] <bruda> And solutions online don't seem to show anything with an equivalent iterator, just moving the tests into the body of the loop. So I opted for something more challenging just for kicks.
[00:48:24] <bruda> The section also was covering operator precedence so I assumed they wanted me to use that sort of knowledge.
[00:48:36] <nitrix> I wonder if you're learning C or encouraging yourself to be stupid this way.
[00:49:20] <bruda> We already had a long conversation about my solution. Guess you missed all that. This was just me reworking it a bit for readability.
[00:50:20] *** Quits: i336 (~i336@101.175.50.26) (Ping timeout: 265 seconds)
[00:50:51] <nitrix> The inability to read it easily is what motivated my response.
[00:51:08] <bruda> Should have seen the original solution :P
[00:51:50] *** Joins: i336 (~i336@101.163.160.253)
[00:52:13] <nitrix> I'm leaning on stupid now.
[00:53:43] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 265 seconds)
[00:54:29] <bruda> Glad I'm not taking a class with you at the head of it... Dick.
[00:55:59] <nitrix> You aren't going to improve if you're given gold stars for shitting on your homework.
[00:56:55] *** Quits: aosync (~aws@mx1.aosync.me) (Quit: WeeChat 3.0)
[00:57:06] <bruda> Nobody gave me any stars. I'm just doing this for fun.
[00:57:30] <nitrix> Just like I'm not giving a class.
[00:57:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com)
[00:57:45] *** OrganicDillo is now known as DilloNoGMO
[00:57:45] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[00:59:15] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[00:59:16] *** Quits: zenstoic (uid461840@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:59:31] *** Joins: sant (~sant@187.232.50.11)
[01:00:21] * bruda puts nitrix on ignore
[01:01:52] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:07:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[01:09:19] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:10:18] <ioxzev1z> draaaaaaaaaaaaaaaaaaama
[01:10:43] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[01:11:37] *** Joins: louipc (~louipc@archlinux/fellow/louipc)
[01:11:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:11:46] <louipc> lol was dis
[01:11:53] <louipc> is this the official c channel
[01:12:26] <bruda> 'official' not so much. But a popular one for C stuff sure.
[01:13:02] <louipc> yea i got forwarded from the other chan
[01:13:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:13:08] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com)
[01:13:09] <ioxzev1z> Technically speaking this is the official C channel on the network, but you have to call it unofficial because it isn't endorsed by the people who currently handle the C language
[01:13:23] <bruda> ^
[01:13:41] <ioxzev1z> I wonder when the working group will make an irc.c.org with #c
[01:13:43] <louipc> cuz usually single # is reserved for official
[01:14:13] <nomagno> single # is reserved for official communities
[01:14:23] <pragma-> The working group does not appear to be that concerned with having a presence in or communication with the normal world.
[01:14:55] <nomagno> The C working group is an almost mythical figure at this point, and it can only be reached trough ISO bureaucracy
[01:15:24] <pragma-> The C++ WG at least has a github page.
[01:15:39] <nomagno> ISO's methodology is VERY, VERY obsolete
[01:15:44] <pragma-> The ## channel thing died with the old freenode afaik.
[01:15:45] <bruda> Given the people they have to deal with I'm sure it's easier to focus on development of the language than to deal with a community of dueling users.
[01:15:51] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[01:16:13] <nomagno> But they are doing a good job
[01:16:16] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:16:35] <nomagno> C remains the last stronghold of the fight against vendor lock-in
[01:16:45] <bruda> Freenode is where I came from before here. That network definitely went caput.
[01:16:48] <pragma-> You mean Microsoft C?
[01:17:28] <nomagno> pragma-: I mean absolute, monopoly-level vendor lock-in. Be it GNU, LLVM, Microsoft, or anyone else
[01:18:03] <nomagno> Having a field in anything not be a monopoly or oligopoly is A LOT to ask for, nowadays
[01:18:54] <ioxzev1z> nomagno, what's wrong with clang/llvm =
[01:18:55] <ioxzev1z> ?
[01:19:01] <pragma-> The money to support the field has to come from somewhere. A lot of the times it's from a corporation.
[01:19:15] <fizzie> I don't think the ## thing /entirely/ died out, they just introduced a third namespace between "project channels" (old network #channel) and "informal channels" (old network ##channel) that's called a "community channel", and most things that are the least bit organized went with one of those. But ##asm is still ##asm here, as is ##workingset.
[01:20:10] <pragma-> Libera staff have mentioned dropping ## about channels. I think the ## channels that exist now are just out of habit/muscle memory.
[01:20:14] * pragma- shrugs.
[01:20:15] <nomagno> ioxzev1z: You missed my point. I'm saying no one should be able to dominate a given field or industry.
[01:20:51] <pragma-> ,g libera channel policy
[01:20:52] <candide> pragma-: (2,130,000 results) Network policies | Libera Chat: <https://libera.chat/policies/>
[01:21:25] <pragma-> No "##" anywhere on that page.
[01:21:45] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[01:21:50] <nomagno> pragma-: you can make a ## channel for pretty much anything you want. You need to be fairly on-topic for being able to have a reasonable clame to keeping a # channel if anyone ever wants it
[01:21:54] <fizzie> pragma-: https://libera.chat/chanreg/ "Channels that begin with only a single # character are either project or community channels. Channels that begin with two # characters are informal channels."
[01:21:55] <candide> Title of fizzie's link: Channel registration | Libera Chat
[01:22:00] <nomagno> on-topic: community for a FLOSS project
[01:22:03] <pragma-> I don't think Libera makes a distinction between # and ## since the move from freenode. The staff had long been in disfavor of that naming scheme. I think they just use project registrations now.
[01:22:11] <pragma-> Oh.
[01:22:27] <pragma-> Should have ctrl-f'd for "two #" instead of just "##".
[01:22:49] <fizzie> It's also a different page (chanreg vs policies).
[01:22:51] <ioxzev1z> nomagno, I think if the thing in question is FOSS it can dominate whatever industry it wants, as it can be changed/forked/etc. The problem with vendor lock-in comes from proprietary crap
[01:24:06] <nomagno> ioxzev1z: Trust me, if a FLOSS project gains enough traction, it will turn into vendor lock-in anyways. Take a look at GNU and Linux. They just don't get many hard forks, because it is a stupid idea
[01:24:40] <pragma-> Makes sense, actually. I did register my IRC Battleship game channel under ##battleship rather than #battleship since it felt more appropriate.
[01:24:40] <nomagno> It is simply too much code to maintain. FLOSS is much better for competition, but social structures can hinder it regardless
[01:24:53] *** Quits: i336 (~i336@101.163.160.253) (Ping timeout: 256 seconds)
[01:24:55] <nomagno> Oh you have an IRC battleship game?
[01:24:57] <nomagno> lemme check it out
[01:25:21] <pragma-> nomagno: https://github.com/pragma-/pbot/blob/master/lib/PBot/Plugin/Battleship.pm
[01:25:23] <nomagno> Hm, I can't find it from the Matrix bridge
[01:25:36] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[01:25:55] <cousteau> bruda: https://ideone.com/hELOSj looks ok
[01:26:02] <ioxzev1z> nomagno, I disagree. Look at the Debian fork without systemd. It can be done, but the current state of big projects (e.g. GNU and Linux) means that things would have to go /really/ south before someone forks them. Also vendor lock-in almost always means a situation where you have no other working option than provided by the vendor. With FOSS, you can pick and choose what to use, and if there is nothing appropriate then you can just make something new.
[01:26:09] <pragma-> I do not have a clue how Matrix finds channels. The channel is named ##battleship on this network. How you find that through Matrix I couldn't say.
[01:26:17] * pragma- doesn't use Matrix or Discord.
[01:26:25] <ioxzev1z> An example being word document formats in the early 2000s, where you either used word or went without
[01:26:27] *** Joins: i336 (~i336@101.174.92.253)
[01:27:16] <nomagno> Hard forks are just really hard to justify for the very huge projects
[01:27:42] <nomagno> wait, WTF am I saying?
[01:28:00] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:28:06] <nomagno> my original point was the standards committee was doing a good job at evening the playing field
[01:28:26] <nomagno> The rest of what I said is largely orthogonal
[01:29:35] <bruda> cousteau: thanks man. 
[01:30:54] <cousteau> nitrix is right in that it's hard to read and kind of obscure... but honestly I don't know what you were supposed to do
[01:31:24] <bruda> I get that. Just didn't think he needed to be rude about it.
[01:31:25] <cousteau> other than rewriting the ???::: as a ?:?:?: as I suggested, but that barely makes it any easier to read
[01:31:45] <pragma-> Ew, nesting conditional operators.
[01:32:04] <sham1> Imagine no conditional expression other than ?:
[01:32:46] <pragma-> if/else should have been an expression instead of a statement.
[01:32:57] <bruda> heh. Given what I was attempting to do I had little option I think. But of course to move the iterator logic into the body of the loop. Which didn't seem to use much of any operator precedence knowledge from the section the exercise came from.
[01:33:08] *** Joins: ferdna (~ferdna@user/ferdna)
[01:33:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:33:35] <cousteau> louipc: single # now means "official or topical", so "the C community" would qualify for it
[01:33:36] <pragma-> I love languages whose blocks yield the value of the final expression, and whose if/else cosntructs, etc, are expressions
[01:34:06] <cousteau> it used to be reserved for official channels, but not anymore
[01:34:24] * cousteau moonwalks away
[01:34:27] <louipc> kewl
[01:34:30] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[01:34:35] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[01:34:51] <nitrix> Imagine being offended when I question the use of nested conditional operators because of their unreadability, raise that challenges like this aren't a productive way of learning C, being called a dick in return, getting ignored, yet I'm the rude one.
[01:34:51] *** Joins: sant (~sant@187.232.50.11)
[01:34:53] <pragma-> There's a word I haven't heard in decades.
[01:35:39] <pragma-> tbh you didn't merely question it. you called them stupid and said they were teaching themselves to be stupid.
[01:35:40] <DilloNoGMO> nitrix, would you like some tissue?
[01:36:23] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[01:36:32] *** Joins: aws (~aws@mx1.aosync.me)
[01:37:30] <nitrix> The definition of stupid is a lack of common sense. They're offended easily by a word that's used correctly.
[01:37:41] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:38:27] *** Quits: aws (~aws@mx1.aosync.me) (Quit: connection reset by purr)
[01:39:33] <ioxzev1z> Any C noobs watching this conversation will turn a full 360 degrees and walk away
[01:40:20] <ioxzev1z> Let's keep it friendly
[01:40:34] <bruda> I put him on ignore. Nothing good was coming from listening to him. It was discouraging but I'm not giving up that easily.
[01:40:50] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) ()
[01:40:59] <nitrix> It usually is when people don't develop an ego about their code when they asked feedback...
[01:41:09] <sham1> 360 degrees 🤔
[01:41:42] <bruda> sham1: lol
[01:41:42] <Symmetria> heh - I will say this - if you are looking for nice clean readable code where the operators look all pretty etc - can I suggest you never get into high performance highly optimized low level code - be it in C or anything else
[01:42:00] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[01:42:13] <nitrix> "How's my code?" - "It's unreadable." - "BUT BUT I'm learning C!" - "Yes, it's a stupid way to learn C.". Oh no, so offensive.
[01:42:42] <louipc> learn to read maybe
[01:43:09] <pragma-> It does seem weird to introduce ?: before if/else. What book is this again?
[01:43:12] <Symmetria> lol - when a colleague told me the other day that my code was looking nice and easy to read - I realized that he had been working with me for far 2 long 
[01:43:30] <louipc> repeat until
[01:43:37] <bruda> Symmetria: personally I think I'm far to new to C to consider performance optimization. But I do appreciate the necessity of optimization.
[01:44:14] <Red> readability > performance
[01:44:21] <bruda> pragma-: I actually stumbled accross ternary while looking up operator precedence in 'man operator' so I might have taking things out of order before I realized I hadn't covered it yet.
[01:44:28] <Symmetria> Red - until you are writing network code - where performance == it doesnt work ;p
[01:44:32] <Symmetria> lack of performance 
[01:44:38] <pragma-> ,ternary
[01:44:38] <candide> ?: is called the conditional operator. Some people refer to it as the ternary operator. This is not its name. While it is currently the only operator in C that takes three operands, this may not always be the case. It's just a description of it, not its name. It's called the conditional operator.
[01:44:39] <Red> :D:D
[01:44:59] <sham1> Readability can often be made performant
[01:45:03] <bruda> Yea, some prior knowledge came into play I guess.
[01:45:18] *** Joins: aosync (~aws@mx1.aosync.me)
[01:45:21] <sham1> A sufficiently smart compiler™ can make it performant
[01:45:32] <louipc> if you want readability go use python
[01:45:37] <Red> ew
[01:45:41] <louipc> ;)
[01:45:46] <nomagno> C is pretty readable
[01:45:50] <nomagno> Python just looks like English
[01:45:52] <bruda> But I failed to see another way to create the same iterator logic and thought of ?:.
[01:45:56] <nomagno> not necessarily bad, but meh
[01:46:01] <Red> you forgot "lack of" in that python statement
[01:46:05] <pragma-> a lot of python constructs can be very unreadable if you're unfamiliar with them
[01:46:14] <sham1> Python has problems, but the lack of readability isn't one of them
[01:46:18] *** Quits: Dotz0cat (~Dotz0cat@h203.195.186.173.dynamic.ip.windstream.net) (Ping timeout: 260 seconds)
[01:46:30] <Red> guess I am just weird then...
[01:46:31] <louipc> except when u got spaces and tabs 
[01:46:33] <pragma-> I've seen unreadable python.
[01:46:47] <sham1> A programmer can write FORTRAN in every language
[01:47:26] *** Quits: aosync (~aws@mx1.aosync.me) (Client Quit)
[01:47:32] *** Joins: Dotz0cat (~Dotz0cat@h95.88.187.173.dynamic.ip.windstream.net)
[01:47:55] <nomagno> A programmer can write Python in every language
[01:48:00] <nomagno> ... Actually, probably not
[01:48:02] <nomagno> No, DEFINITELY nto
[01:48:17] *** Joins: aws (~aws@mx1.aosync.me)
[01:48:19] <Symmetria> hrm - Im trying to figure out if there is a cleaner way to write this line of code without the compiler whining at me:  struct rte_mbuf *p = (void*)(*(__u64*)&ptr_buf[n][0]);
[01:49:43] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[01:49:47] <Symmetria> (because if I try and cast directly, it bitches about that ptr_buf[n] is an array of __u8 to make the read call work 
[01:49:57] *** Joins: sant (~sant@187.232.50.11)
[01:50:20] *** Quits: aws (~aws@mx1.aosync.me) (Client Quit)
[01:50:35] <sham1> Undefined behaviour-tastic
[01:51:11] *** Joins: aosync (~aws@mx1.aosync.me)
[01:52:43] *** jinsun__ is now known as jinsun
[01:53:11] *** Quits: aosync (~aws@mx1.aosync.me) (Client Quit)
[01:54:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:54:10] *** Quits: defiant (~defiant@user/defiant) (Ping timeout: 260 seconds)
[01:54:47] <ioxzev1z> Symmetria, that doesn't look right
[01:54:49] <Symmetria> heh - thats better - changed it so my read() wrote it &ptr_buf[n] where ptr_buf is now an array of __u64's and then just cast (void*)ptr_buf[n] wheee - passing pointers over pipes is fun
[01:55:12] <sham1> That sounds horrible
[01:55:35] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 265 seconds)
[01:55:53] <ioxzev1z> Symmetria, lemme see the code around that line
[01:56:54] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[01:57:11] <Symmetria> https://dpaste.org/AJHe
[01:57:21] *** Joins: johnnyreb (~tth@user/johnnyreb)
[01:57:42] <nitrix> Does the other process share the same memory space? If so, why are they separate processes? If not, then what's the point of sending the pointer over to them?
[01:57:42] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:58:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[01:58:33] <ioxzev1z> I don't think line 9 needs the cast, nor does 12
[01:58:39] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:58:42] <Symmetria> heh nitrix - avoiding copy - copy is death when you need performance - and rte_mbuf is basically a pointer on a ring queue 
[01:59:47] <Symmetria> line 12 definately does - you dont need it on 9 you are correct
[02:00:17] <Symmetria> (though line 12 I could just change to simplyu say p 
[02:00:20] <nitrix> Shared memory is even worse. The CPU cores have to coordonate with a protocol that has very slow throughput to ensure the cache integrity.
[02:00:48] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[02:00:53] *** Joins: aosync (~aws@mx1.aosync.me)
[02:01:15] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[02:01:19] <Symmetria> heh nitrix - in this particular case - the cpu cores here don't context switch or anything else - there is a hell of a lot of affinity stuff going on here - and - well - it works - I'm processing 100m pps using these methods
[02:02:31] <Symmetria> heh - there is a lot of pretty wierd code in here to force cpu cache pre-fetch as well 
[02:03:25] *** Quits: i336 (~i336@101.174.92.253) (Ping timeout: 256 seconds)
[02:03:32] <nitrix> I hope so. I think you're limiting yourself to threads staying on the same cores and manual fencing... I'm not even clear whether or not that'd be better than copying the data, I guess it depends on the size.
[02:03:53] <nomagno> I really want to switch my compatibility target to C11, but I think I rule out quite a few systems if I do that!
[02:03:53] *** Joins: al2o3-cr (~al2o3-cr@user/gr33n7007h)
[02:04:06] <Symmetria> https://dpaste.org/aT3K 
[02:04:09] <nomagno> The eternal debate between developer convenience and user convenience
[02:04:14] <Symmetria> heh - you can see cache pre-fetch going on there as well
[02:05:09] *** Joins: i336 (~i336@101.163.161.181)
[02:05:15] <Symmetria> heh - the cores that are running the nic polling are running so hot anyway because of the way that it works 
[02:05:29] *** Quits: al2o3-cr (~al2o3-cr@user/gr33n7007h) (Client Quit)
[02:05:44] <ioxzev1z> Symmetria, why __u32/etc over the standard uint32_t, etc ?
[02:05:44] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:d960:c213:7b57:d73e)
[02:05:55] *** Joins: gr33n7001 (~al2o3-cr@user/gr33n7007h)
[02:06:31] <Symmetria> iox *shrug* habit developed from using those on other platforms etc and in other places 
[02:06:49] <ioxzev1z> oic
[02:07:19] *** Joins: Viewday116 (~Viewday@user/viewday)
[02:07:35] <ioxzev1z> Also assuming you're not using C89, why not declare size_t i in the for loop () ?
[02:08:14] <ioxzev1z> Not sure what you're doing with the void * on line 13
[02:08:28] <ioxzev1z> And 15
[02:08:44] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4-dev)
[02:09:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:09:05] *** Viewday116 is now known as Viewday11
[02:09:10] <ioxzev1z> 24 doesn't need the (int) cast
[02:09:46] <Symmetria> heh - so - thats a rather interesting api call - rte_pktmbuf_mtod - its basically designed to return something outta another structure cast in a specific manner 
[02:09:59] *** Quits: i336 (~i336@101.163.161.181) (Ping timeout: 264 seconds)
[02:10:03] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[02:10:14] <nitrix> Symmetria, How did this end up as multiple processes and pipes instead of a single process with something like coroutines? It feels low-level enough that threads/processes/scheduling would just be in the way.
[02:10:18] *** Joins: sant (~sant@187.232.50.11)
[02:10:18] *** Joins: i336 (~i336@101.163.161.199)
[02:10:52] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[02:10:57] <Symmetria> heh nitrix its heavily heavily using something called DPDK - and its written to work well with that 
[02:10:58] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:d960:c213:7b57:d73e) (Ping timeout: 260 seconds)
[02:11:21] <nitrix> New to me. I'll educate myself ._.
[02:11:46] <ioxzev1z> Symmetria, rte_prefetch0(rte_pktmbuf_mtod(packets[i], void *)); can you explain the void * there? are you trying to get (void *) { NULL }; ?
[02:11:50] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[02:12:21] <Symmetria> #define 	rte_pktmbuf_mtod_offset(m, t, o)   ((t)((char *)(m)->buf_addr + (m)->data_off + (o)))
[02:12:21] <Symmetria> #define 	rte_pktmbuf_mtod(m, t)   rte_pktmbuf_mtod_offset(m, t, 0)
[02:12:33] <nitrix> 233 Gbps, that's nice!
[02:12:43] *** Joins: EtherNet (~ethernet@user/ethernet)
[02:12:53] <ioxzev1z> Symmetria, thanks
[02:13:05] <Symmetria> heh ioxzev1z - its basically a cast on the return in the macro
[02:13:17] <ioxzev1z> Yeah didn't realize it was a macro
[02:13:40] *** Joins: phryk (~totallyno@user/phryk)
[02:14:24] <Symmetria> heh nitrix dpdk is basically the basis for any pc based routing stuff you find anywhere - its kinda the software stack standard for building routing/firewalling/networking on pc's 
[02:14:34] <nitrix> Symmetria, Is this correct? https://doc.dpdk.org/guides/_images/kernel_nic_intf.png
[02:14:47] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[02:15:05] <Symmetria> created by intel originally - and still largely developed by them - trying to read the code behind some of the stuff in there though will give you serious headaches - because they push optimization to a wholeeee other level
[02:15:11] *** Quits: sant (~sant@187.232.50.11) (Client Quit)
[02:15:26] *** Joins: sant (~sant@187.232.50.11)
[02:15:57] <Symmetria> nitrix - without real context its hard to say - but essentially yes - you can create virtual nics and other crap in dpdk 
[02:16:24] <Symmetria> heh what dpdk basically does - is a massive series of apis for dealing with network cards via sr-iov - and bypassing the kernel on pretty much the lot 
[02:17:05] <Symmetria> because the linux kernel well - its got a lot of useful stuff - but its heavy - and you aint ever gonna get real network performance outta it - even with xdp (though xdp is only running at 25% slower than dpdk these days)
[02:17:56] <nitrix> Looks a lot like stuff I've seen done with block storage, talking directly to the hardware bypassing linux. They had rings and shared memory too. Makes sense that you'd see this is networking too.
[02:18:47] <Symmetria> heh - but put it this way - using dpdk and my code - and a machine thats got a pci-e 4 bus and the right network cards - I can run a coupla hundred gigabit a second through a pretty bog standard cheap machine 
[02:19:12] *** Joins: NEYi (~NEYi@109.251.216.38)
[02:19:25] <Symmetria> the major trick is - dont copy - and where possible - dont pull the data across the pci bus either - get the network card to forward it port to port and do it in the hardware if the hardware supports it
[02:20:17] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:20:24] <nitrix> I imagine that's only possible if you're building some kind of routing/switching equipment.
[02:20:59] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[02:21:00] *** Quits: phryk (~totallyno@user/phryk) (Remote host closed the connection)
[02:21:10] <Symmetria> heh - nitrix - you can see what I mean about core locking here: https://pasteboard.co/B4UcKbQpbGQU.png
[02:21:56] <Symmetria> heh - thats running 2 ports active right now - you got an rx core for ring population - a rx ring queue core and a tx ring queue core per port 
[02:22:18] <Symmetria> and those cores - basically are in permanent loop state - to see stuff as fast as possible 
[02:23:28] *** Joins: VincentValentine (~VincentVa@95.84.5.33)
[02:23:36] <nitrix> Looks like you have a fun job :)
[02:24:47] <Symmetria> heh nitrix I'm actually not what I would consider a programmer - I head up the R&D/Labs division of a major multi-national telco - and do a lot of work in the IETF on network protocol design etc, and well, learnt 20  years ago that if I couldn't code I couldnt do this work :)
[02:25:18] *** Quits: sant (~sant@187.232.50.11) (Quit: sant)
[02:25:32] *** Joins: sant (~sant@187.232.50.11)
[02:25:41] <Symmetria> but its a pain in the ass in some ways, because when you go into the market and you try and find people who can do this kinda code - and have the networking knowledge to go with it, you kinda hit a brick wall 
[02:26:10] <Symmetria> (the code to get the packets off the nics is one thing, understanding what to do with them and how to process them is another) haha
[02:26:58] <nitrix> Telcoms aren't particularly known for having open-source stuff so people (even the veteran C programmers) don't really know much about what goes underneath.
[02:27:52] <Symmetria> nitrix tell me about it :) its something I whine about a fair bit in the ietf - that we've gone from "running code" as the standard to "running binaries" to prove the case behind RFC's
[02:28:06] <nitrix> DPDK looks open-source though, maybe that'll help people explore that space.
[02:29:30] <Symmetria> heh the bigger trick is learning to read and understand the rfcs 
[02:30:14] <Symmetria> but, what I've seen lately in the rfcs is that vendors that wanna hide what things are really doing - are splitting things across like 20 documents - which drives me absolutely insane 
[02:32:08] <Symmetria> nitrix the other problem with this world is - because in so many ways its so closed - you end up with mistakes being made and some stuff ends up becoming standardized that has *HUGE* security problems 
[02:32:49] <Symmetria> and by the time someone wakes up to the problems - the damn protocols are already standardized - the vendors have baked support for them into silicon - and fixing them becomes a problem :)
[02:33:20] *** Quits: VincentValentine (~VincentVa@95.84.5.33) (Quit: -a- IRC for Android 2.1.54)
[02:33:22] <nitrix> I bet.
[02:33:22] <Symmetria> https://mailarchive.ietf.org/arch/msg/v6ops/GbWiie-bjQ_Bp1JKB1PlDh_fPdc/ <--- case in point ;p
[02:33:34] *** Joins: VincentValentine (~VincentVa@95.84.5.33)
[02:33:49] <Symmetria> ;p certain vendors still arent talking to me over that email haha
[02:33:50] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 260 seconds)
[02:33:52] *** Joins: pizdets_ (~pizdets@183.182.114.136)
[02:33:59] *** Quits: pizdets (~pizdets@183.182.111.207) (Ping timeout: 264 seconds)
[02:34:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[02:35:08] <nitrix> I work in graphics programming on game engines and it's a similar real-time/performance kind of environment, with workarounds for specific GPU and sloppy OpenGL bugs by vendors.
[02:35:52] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:36:17] <Symmetria> heh - I've thought about offloading network packet processing to gpus for certain purposes for ages - just never had the time to actually get around to writing anything like that
[02:37:18] <Symmetria> heh gpus I'm pretty sure would do pretty well when it comes to massive packet accounting stuff for one thing - where you need to process a few hundred million packets a second 
[02:37:19] *** Joins: sant_ (~sant@187.232.50.11)
[02:37:32] *** Quits: VincentValentine (~VincentVa@95.84.5.33) (Client Quit)
[02:37:33] *** Quits: sant_ (~sant@187.232.50.11) (Remote host closed the connection)
[02:38:04] *** Joins: VincentValentine (~VincentVa@95.84.5.33)
[02:38:40] <earnestly> Symmetria: Why do you top post
[02:40:14] <louipc> it is the corporate way
[02:40:41] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:40:45] <Symmetria> *shrug* entirely depends on what I'm posting and where - in many cases the posts are actually inline - though other than that - most of the time you open you hit reply - you close - you move on - when you reply to 500+ emails a day - being pedantic about that doesnt make any damn difference ;p
[02:40:56] *** Quits: sant (~sant@187.232.50.11) (Ping timeout: 268 seconds)
[02:41:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:41:49] <Symmetria> :) and you'll notice on the ietf lists - its a mix and match of inline, top post, bottom post - and everything inbetween 
[02:41:57] *** Joins: cruncher (~cruncher@46-127-100-145.dynamic.hispeed.ch)
[02:43:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[02:43:40] <ioxzev1z> What does top post mean?
[02:43:51] *** Quits: magla (~gelignite@55d4c767.access.ecotel.net) (Quit: Stay safe!)
[02:45:06] <Rounin> ioxzev1z: It means to reply above the text written by the others, when the custom is to reply below
[02:45:16] <ioxzev1z> Ah, thanks
[02:45:38] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:46:21] <earnestly> Well, the custom in civilised communities, quite rare in general
[02:47:22] *** Quits: i336 (~i336@101.163.161.199) (Ping timeout: 260 seconds)
[02:47:25] <Symmetria> haha - I find it amusing that you consider your preference to be the only civilized manner :) 
[02:47:32] <louipc> there are no civilized countries
[02:48:00] <Red> when did this become #c-offtopic
[02:48:43] <louipc> 10 min ago 
[02:49:00] *** Joins: i336 (~i336@101.163.162.51)
[02:49:53] <Rounin> In 4294967286 minutes
[02:50:04] <bruda> , kr2-3
[02:50:04] <candide> Chapter 2: Types, Operators and Expressions; Exercise 2-3. Write a function htoi(s), which converts a string of hexadecimal digits (including an optional 0x or 0X) into its equivalent integer value. The allowable digits are 0 through 9, a through f, and A through F.
[02:50:38] <bruda> is this exercise a trick? The same string can be printed as int or hex so it's actually kinda tricky to be sure I converted them correctly.
[02:51:38] <bruda> I used type casting in htoi() to just assign the int back to the same index in the array.
[02:51:59] <sham1> What does that even mean
[02:52:07] <ioxzev1z> bruda, given 0xFF, print it as 255
[02:52:08] <ioxzev1z> No?
[02:52:23] <pragma-> the input to htoi() is always hex
[02:52:33] <earnestly> (And always a string)
[02:53:21] *** Quits: i336 (~i336@101.163.162.51) (Ping timeout: 250 seconds)
[02:53:35] <pragma-> integer value doesn't mean decimal or hexadecimal.
[02:53:49] <bruda> the string is an array of chars? so int htoi(char s[])? Doesn't specify hex exactly.
[02:53:58] <pragma-> correct
[02:54:23] <pragma-> it's always a string of the hexadecimal digits it specified, with the optional prefix.
[02:54:40] <sham1> Well you probably want the argument to be const char *s
[02:54:44] <ioxzev1z> bruda, the input is hex, given in a string. E.g. "0xFF" is a string containing the characters '0' 'x' 'F' 'F' '\0'
[02:55:02] <bruda> Ohhh
[02:55:10] *** Joins: i336 (~i336@101.174.126.188)
[02:55:25] *** Joins: uskerine (uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[02:55:41] <bruda> Now it gets interesting. 
[02:55:47] <ioxzev1z> Given that string, you then convert it to an integer and print it. Given the above, you would then print the string "255", which contains the characters '2' '5' '5'
[02:55:50] <uskerine> hi, anyone using gcc in Windows with visual studio code? I can't see fprintf(stderr, ".... messages
[02:56:00] <ioxzev1z> and '\0'
[02:56:24] <Symmetria> errr - htonl takes a numeric - because all its doing in the longer version of what htons does: return (x<<8)|(x>>8)
[02:56:32] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0)
[02:56:43] <bruda> ioxzev1z: thanks for the clarification. I get it now. Suddenly it feels tricky.
[02:56:43] <fizzie> The exercise doesn't involve printing it.
[02:57:12] <bruda> Though printing it probably helps verify it was converted correctly eh?
[02:57:22] <earnestly> fizzie: You should interpret FIM rules lol
[02:57:25] <fizzie> Sure, but you can do the printing with a printf "%d" without feeling it's cheating.
[02:57:52] *** Joins: vysn (~vysn@user/vysn)
[02:57:56] <pragma-> it's somewhat ambiguous whether it should be converted to an int or to a string containing the integer representation
[02:58:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:58:17] <pragma-> then again the chapter contents probably clarify that
[02:58:17] *** Joins: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408)
[02:58:31] <fizzie> Well, I've read it as meaning to implement `int htoi(const char *s) { /* ... */ }`.
[02:58:45] <ioxzev1z> pragma-, it states "integer value", hence it doesn't matter how you store it, just that you get the correct value
[02:58:55] <fizzie> The chapter contents include `int atoi(char s[]) { /* ... */ }` as one of the code examples.
[02:59:08] <sham1> It also doesn't specify any base for if it had to convert it to a string with a representation of the int
[02:59:11] <fizzie> (K&R doesn't really do const.)
[02:59:24] <fizzie> (At least this early.)
[02:59:26] <ioxzev1z> bruda, read the hex string right-to-left and do some math to get to base 10
[02:59:29] <pragma-> given that k&r believes in implicit int, they probably did expect it to return int. :)
[02:59:48] <sham1> No need to go right-to-left
[03:00:09] *** Joins: f4t4l_3rr0r (~PhoenixCo@user/alien-fx-fiend/x-2328408)
[03:00:11] *** Quits: f4t4l_3rr0r (~PhoenixCo@user/alien-fx-fiend/x-2328408) (Excess Flood)
[03:00:41] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[03:01:09] <Symmetria> heh - an htonl basically does - return ((x&(__u32)0x000000FF)<<24 | ((x&(__u32)0x0000FF00)<<8) | ((x&(__u32)0x00FF0000)>>8) | ((x&(__u32)0xFF000000)>>24)
[03:01:10] <fizzie> Again, there's an `atoi` example given. The differences needed for `htoi` are only in the bit that converts each individual digit. (Plus skipping the optional "0x" or "0X".)
[03:01:22] *** Quits: cruncher (~cruncher@46-127-100-145.dynamic.hispeed.ch) (Quit: Leaving)
[03:01:23] *** Joins: phryk (~totallyno@user/phryk)
[03:01:26] <Symmetria> and so long as X is a 32 bit number - it aint gonna make a difference 
[03:01:42] <bruda> at this point I'm just contemplating how a string can be merged into a single char. Like "\x41" to '\x41'. But I guess that's what I'm supposed to figure out.
[03:01:43] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[03:01:47] <Symmetria> (though most of the time these days - what I typed above is a long form - because now days most compilers on modern cpus are gonna call bswap32()
[03:01:53] <fizzie> htonl is also entirely unrelated to the K&R exercise.
[03:02:34] <Symmetria> heh dont know the exercise in question - htonl / htons / ntohs / ntohl are primarily in my experience used in my world for endianness swaps on network data 
[03:02:55] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:03:23] *** Quits: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408) (Ping timeout: 264 seconds)
[03:03:24] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[03:03:35] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[03:03:46] <ioxzev1z> bruda, the easiest way is to walk through the string and do math on a single int variable
[03:04:21] <boreas> bruda: you can read the hexstring char by char, and convert the hex characters (e.g. 'f') to their value (e.g. 15)
[03:04:42] *** Parts: louipc (~louipc@archlinux/fellow/louipc) (part)
[03:05:27] <bruda> o.O guess I'll process that information and see what I come up with.
[03:05:45] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[03:05:48] <ioxzev1z> bruda, do you understand how to read a binary number? e.g. the binary digit positions XXXX corresponds to 8 4 2 1, such that 1111 is 8 + 4 + 2 + 1 ? 1011 is 8 + 0 + 2 + 1, and so on?
[03:06:06] <bruda> never did anything like that.
[03:06:21] <fizzie> I'm tempted to mention for the third time that /the chapter includes `atoi` as an example/.
[03:06:33] <fizzie> It goes over in detail the conversion from decimal strings to integers.
[03:06:41] <bruda> yea I saved the atoi in my code to aid in my contemplation
[03:06:52] <ioxzev1z> bruda, hex is like that but you have different quantities per position
[03:07:01] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[03:07:39] *** Quits: alch (~alch@151.34.24.5) (Ping timeout: 250 seconds)
[03:07:41] <fizzie> The conversion of hexadecimal strings to integers is exactly the same thing, process-wise, you just have 16 digits from '0' to 'f' rather than 10 digits from '0' to '9'. (And the characters are not as conveniently arranged, so you need a bit more logic than the atoi example's simple `s[i] - '0'` case.)
[03:08:48] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our community of creative supermutants at https://indiedevs.net/)
[03:09:08] <boreas> e.g. the hex number 0x123 is (1*256) + (2*16) + 3*1
[03:09:24] *** Joins: alch (~alch@151.68.53.199)
[03:09:29] <bruda> Hmm. Ok.
[03:10:20] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[03:11:57] <Rounin> bruda: Yeah, hm, you could perhaps try with decimal numbers first... It's easy enough to change it to hex later
[03:12:17] <bruda> Yea I'm thinking I need to start simple to grasp the fundamental process here.
[03:12:34] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:12:49] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[03:13:17] <Rounin> If the idea is to detect a sequence like \x and then some numbers, that can also be a separate task... Converting a single digit can also be a separate task, etc.
[03:13:33] <bruda> But I think I kinda get it. Especially looking at the atoi example. Just need to keep wrapping my head around it and play around with it.
[03:13:45] <Rounin> Come to think of it, the same digit-to-integer-function can be used for hex and decimal, so that's nice
[03:13:55] <Rounin> Only that some digits are forbidden in decimal
[03:15:57] <ioxzev1z> int d = 0; l = len(s); for c in s: d += c * 16^l; l--; or something like that, where ^ is exponent
[03:16:06] *** Quits: useretail (~useretail@185.132.19.151) (Ping timeout: 268 seconds)
[03:16:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:16:21] <ioxzev1z> Forgot to check muh order-of-operations
[03:16:30] <ioxzev1z> Actually nvm
[03:16:34] <ioxzev1z> That goes the opposite way
[03:16:36] <ioxzev1z> Ignore that
[03:17:14] <bruda> heh. It's a lot to process. But I see what atoi is doing. Though that value doesn't translate to a character per se as it won't print as one but the string is properly converted to the int.
[03:20:28] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[03:20:32] <Rounin> If you like this exercise, you might enjoy Project Euler as well, at least the first 50-100 ones or so... After that, it's a bit more "Prove the Hőgenhász-Szilenzyi conjecture for homomorphic isonymers where Σα(x, y) < ε."
[03:20:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:20:51] <Rounin> But the first ones kind of resemble the htoi one
[03:22:51] *** Joins: noord (~noord@user/noord)
[03:23:11] *** Quits: i336 (~i336@101.174.126.188) (Ping timeout: 264 seconds)
[03:24:44] *** Joins: i336 (~i336@121.217.6.202)
[03:24:51] *** Joins: dutch (~DutchIngr@user/dutch)
[03:26:36] *** Quits: AmR (~AmREiSa@41.36.24.35) (Quit: Konversation terminated!)
[03:29:48] *** Joins: shivesh (~shivesh@user/shivesh)
[03:30:38] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:31:58] *** Joins: cousteau (~cousteau@user/cousteau)
[03:33:21] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 268 seconds)
[03:34:57] *** Quits: uskerine (uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Ping timeout: 250 seconds)
[03:37:00] *** Joins: phryk (~totallyno@user/phryk)
[03:37:35] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 264 seconds)
[03:37:40] *** Quits: i336 (~i336@121.217.6.202) (Ping timeout: 268 seconds)
[03:39:01] *** Joins: i336 (~i336@101.163.201.105)
[03:40:03] *** Quits: geeknix (~pi@147.158.227.80) (Quit: WeeChat 2.3)
[03:40:24] *** Joins: geeknix (~pi@147.158.227.80)
[03:43:50] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[03:44:22] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[03:46:32] *** Quits: superdupond (~Kev@2a01cb0400149f003431aaec75954f23.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:49:19] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:50:47] *** Joins: rgrinberg (~textual@201.192.183.53)
[03:51:34] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[03:53:12] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[03:54:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[03:54:19] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[03:54:52] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[03:58:04] <Symmetria> heh
[03:58:09] <Symmetria> talking about converting string to hex
[03:58:21] <ioxzev1z> strong of hex to base 10
[03:58:24] <Symmetria> https://dpaste.org/bcK3
[03:58:25] <ioxzev1z> s/strong/string/
[03:58:28] <Symmetria> ;p thats pretty ugly code 
[03:58:41] <bruda> I got as far as stripping the string down to the essential two characters. I still find myself staring at atoi example and looking at the ascii chart trying to figure out the conversion
[03:58:48] <Symmetria> and it needs a uint16 representation (4 digits) to work 
[03:58:51] <Symmetria> but it will give you an idea 
[03:59:06] <ioxzev1z> Symmetria, why line 9?
[03:59:30] <Symmetria> ioxzev1z because I didnt wanna overrun the uint16 
[03:59:47] <Symmetria> if it was a uint32 I was working with - it would be 8 etc 
[03:59:51] <ioxzev1z> Symmetria, 2 hex characters is 8 bits, which is a legit value. I would check that it is >= to 2
[03:59:52] <Symmetria> *shrug* it was a quick hack :)
[04:00:28] <Symmetria> ioxzev1z yes - but - 4 hex characters = limit of uint16 - so it would actually be >= 2 && <= 4 
[04:00:31] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:00:32] <Symmetria> for uint16 
[04:00:40] <Symmetria> >= 2 && <= 8 for uint32 
[04:00:45] <Symmetria> otherwise you gonna overrun 
[04:01:01] <ioxzev1z> Symmetria, but the exercise doesn't specify uint16_t, it just says a string of hex characters. FFFFFFFF is a valid input
[04:01:25] <Symmetria> :) yeah I didnt read the exercise - I was just hacki9ng something together to demonstrate the principles 
[04:02:37] <bruda> haven't gotten to bit shifting yet. But that example does give me some direction.
[04:02:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[04:03:12] <Symmetria> effectively - in a sequence of hex - if the first character is a - f then (9+(6-('f'-X))<<4 and the second character same thing - without the shift or'd to the result of the first 
[04:03:18] <Symmetria> will give you the byte 
[04:03:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[04:03:55] <Symmetria> if its 0-9 just subtract the character value from the character value of 9 - and same thing - first character in the sequence of 2 gets shifted by 4 or'd to the non-shifted second character
[04:04:11] *** Lord_of_Life_ is now known as Lord_of_Life
[04:04:13] <bruda> Kinda wondering if this example should have come later or if there's an elaborate solution that uses simpler computation.
[04:06:57] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 256 seconds)
[04:09:06] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:10:30] *** Joins: Wulf (~Wulf@user/wulf)
[04:17:09] *** Quits: i336 (~i336@101.163.201.105) (Ping timeout: 256 seconds)
[04:17:42] <fizzie> There's an "obvious" verbose way that just does `if (c >= '0' && c <= '9') n += c - '0'; else if (c == 'a' || c == 'A') n += 10; else if (c == 'b' || c == 'B) n += 11; else /* ... */ if (c == 'f' || c == 'F') n += 15;`, which doesn't even assume the characters 'a'..'f' or 'A'..'F' are contiguous.
[04:18:44] *** Joins: i336 (~i336@101.174.198.127)
[04:19:42] <ioxzev1z> Could always if(isxdigit(c)) { switch(tolower(c)) { case 'a': ...; ... } }
[04:20:23] <fizzie> And there are a number of approaches around the likes of `static const char digits[] = "0123456789abcdef"; char *d = strchr(digits, tolower(c)); if (d) n += d - digits;`
[04:21:03] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[04:21:50] <bruda> Yea I was gearing up towards a solution like your if-else lineup there. I was just trying to figure out what to add to n. I think that code helps me see things a bit more clearly.
[04:22:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:24:04] <bruda> curious though, how did you come to 10 for 'a' or 'A' and such?
[04:24:30] <ioxzev1z> bruda, hex digits are 0 - 9; a - f, where a = 10, b = 11, etc
[04:25:02] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[04:25:41] <bruda> I know the 0-9 a-f thing. But the a=10 n such didn't occur to me. Heh. Maybe old age is making my brain fart too much lol
[04:27:33] <ioxzev1z> bruda, once you run out of the digits 0 - 9, you can then start assigning numeric values to other characters, as you do with hex.
[04:27:46] <bruda> Ohhhh....
[04:27:53] * bruda facepalms
[04:28:34] <bruda> My brain has been processing a lot of stress lately. I can't believe I didn't even think about that.
[04:29:10] <bruda> But now I get it. Now to whip up up the rest of this solution and test it.
[04:33:08] *** Joins: chenqisu1 (~03cia7d@183.217.201.124)
[04:33:27] *** chenqisu1 is now known as chenqisu12
[04:35:46] *** Joins: zalt (~zalt@user/zalt)
[04:36:18] <Symmetria> heh
[04:36:19] <Symmetria> bruda 
[04:36:24] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:36:25] <Symmetria> if you wanna get fancy - and I was bored ;p
[04:36:36] <Symmetria> https://dpaste.org/s0js
[04:37:14] <bruda> Fancy? Let me finish my newbie version then I'll see if I can comprehend your elite one :P
[04:37:32] <ioxzev1z> Symmetria, doesn't matter for that code, but having for(...; strlen(x); ...); means you compute the length on each loop, which adds up for long strings
[04:37:52] <ioxzev1z> s/adds up/adds time/
[04:38:01] <Symmetria> yeah - I know - as I said - Im just screwing around :) that is actually some really horrible code - its unreadable ;p
[04:39:02] *** Quits: i336 (~i336@101.174.198.127) (Ping timeout: 240 seconds)
[04:40:08] <bruda> I do like seeing other code examples though. It's interesting for me. Somehow code is fun for me to read n play with.
[04:41:35] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[04:41:37] <Symmetria> lol bruda I would generally say that - while macros can be a good idea - readable code - is also a good idea unless you got a damn good reason not to have readable code :) 
[04:42:29] <bruda> I like macros. LCTHW used a lot of them. But so far in K&R I'm not quite that far yet aside from 'magic numbers' with #define.
[04:42:47] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[04:45:26] <bruda> so far with my code 3f becomes 18. Somehow I'm not feeling like I converted the hex to the proper integer. Or is that basically all there really is to this example?
[04:46:26] <bruda> s/example/exercise/
[04:46:29] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[04:47:04] <fizzie> "3f" should yield 63 as the result.
[04:47:14] <ioxzev1z> bruda, 3f would be (3 * (16 ^ 2)) + (15 * (16 ^ 1))
[04:47:22] *** Quits: mahmutov (~mahmutov@37.155.84.125) (Ping timeout: 268 seconds)
[04:47:24] <fizzie> 3 * 16 + 15, specifically.
[04:47:29] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[04:47:38] <fizzie> If you got 18, you probably got it from 3 + 15 and missed the * 16 bit.
[04:48:21] <fizzie> (That's the `10 * n` bit in the atoi example, though of course for htoi it needs to be `16 * n`.)
[04:48:26] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:48:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:48:26] *** Joins: wroathe (~wroathe@user/wroathe)
[04:48:27] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[04:48:43] <bruda> ah. Right.
[04:48:44] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[04:49:06] <ioxzev1z> Uh my exponents were off, should have been ^ 1 and ^ 0
[04:50:02] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472)
[04:50:52] *** Quits: gr33n7001 (~al2o3-cr@user/gr33n7007h) (Quit: WeeChat 3.3)
[04:56:09] *** Joins: i336 (~i336@101.163.202.71)
[04:56:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472) (Ping timeout: 264 seconds)
[04:57:00] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:57:22] <bruda> I can add 45 to the 18 and get 63. So like 3C becomes 60 n such. Is that not a reliable way to go though?
[04:57:34] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a058:550b:9e44:5264)
[04:57:46] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[04:58:10] <Symmetria> heh so 3f 
[04:58:17] <Symmetria>     printf("%u\n",(unsigned char)((9-('9'-'3'))<<4) | 'f');
[04:58:20] <Symmetria> = 63 
[04:58:32] <cousteau> did I already mention ,{LCTHW}?
[04:58:32] <candide> Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[04:58:38] <bruda> Oh I see it won't always add up right.
[04:58:45] <Symmetria> (9-('9'-'3'))<<4 = 48 
[04:58:53] <Symmetria> 48 | 15 = 63 
[04:59:57] <fizzie> ,cc printf("%u\n",(unsigned char)((9-('9'-'3'))<<4) | 'f'); // not *literally* 63, so maybe don't imply it is
[04:59:59] <candide> fizzie: 118
[05:00:42] <cousteau> Symmetria: a nice way to iterate through all chars of a string is   for (char *p = x; *p != '\0'; p++)
[05:00:45] <cousteau> no strlen involved
[05:00:46] <pragma-> bit weird show decimal values for bitwise operations if you're goal is to teach
[05:00:58] <Symmetria> (because 3 is a numeric - so 0000 0011 in binary, which takes it to 0011 0000 before the OR - f is 15 decimal or 0000 1111 in binary - 0011 0000 | 0000 1111 = 0011 1111 = 63
[05:01:01] <cousteau> actually you're sort of doing strlen "manually" as you scan the string
[05:01:06] <pragma-> showing. your. I can't type right now.
[05:01:11] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30) (Ping timeout: 265 seconds)
[05:01:54] <Symmetria> :) what makes you think I spend way 2 much time writing network code - I think in binary :( 
[05:02:14] <fizzie> I can't get over how weird I find that whole `9-('9'-c)` and `9+(6-('f'-c))` stuff, compared to the "natural" `c-'0'` and `10+(c-'a')` ones.
[05:03:26] <cousteau> ...personally I don't quite like using a 9 there.  I'd just do x[i] - 'a' + 10
[05:03:51] <cousteau> ...why are they doing 6-('f'-x[i]) instead of x[i]-'a'?
[05:03:54] <Symmetria> heh you can do that as well :) I was just screwing around and its 4:30am - dont expect me to be thinking :)
[05:04:02] <pragma-> It always annoys me when books or classes teach you how to convert hexadecimal to decimal. It's a useless thing to know. The whole point of hexadecimal is that each digit represents 4 binary digits. Just like each octal digit represents 3 binary digits. Ain't nobody converting hexadecimal <-> decimal ever.
[05:04:36] <floatcomplex> i bet quartz's professor spent two weeks on it
[05:04:38] <cousteau> yeah I'd totally do c-'0' rather than 9-('9'-c)
[05:04:48] <zwr> classes should teach to do spell hexadecimal numbers and do algebra on them
[05:04:50] <zwr> teach to spell* ahh
[05:05:08] <cousteau> pragma-: I guess the point is to teach you what it means
[05:05:25] <cousteau> not to teach you how to do the conversion; only to understand it
[05:05:32] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[05:05:46] <pragma-> It'd be far more useful to teach how to read hexadecimal as binary without needing a pencil and paper.
[05:06:33] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[05:06:45] <pragma-> You literally just read each hexadecimal digit as 4 binary digits. 1 = 0001, 2 = 0010, 3 = 0011.  0x123 = 0001 0010 0010.
[05:07:21] <pragma-> er, 0001 0010 0011.
[05:08:26] *** Joins: Viewday112 (~Viewday@user/viewday)
[05:10:25] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:10:25] *** Viewday112 is now known as Viewday11
[05:11:12] <pragma-> That's why I always find it curious when someone uses decimal to write out bitwise operations instead of octal or hexadecimal.
[05:11:31] <pragma-> Converting decimal to binary is significantly more difficult than just reading hex or oct.
[05:11:39] <cousteau> yeah that's right
[05:11:45] <zwr> octal also feels weird imo
[05:11:57] <fluter> yes
[05:12:01] <pragma-> octal goes up to 7 which is 111 in binary, groups of 3 bits.
[05:12:01] <Symmetria> heh - I write almost everything in hex these days - purely because if I'm dealing with packet dumps which is what I spend most of my time doing - hex is way easier to work with
[05:12:01] <cousteau> I remember a former coworker who would write memory addresses in hex, but then write offsets in decimal
[05:12:09] <fluter> but why C does not have builtin ways to write binary?
[05:12:09] <pragma-> you just read octal as groups of 3 bits.
[05:12:23] <cousteau> like 0x480000 + 16384
[05:12:42] <fluter> like b0101
[05:12:49] <cousteau> fluter: yeah we want 0b0101
[05:12:49] <fluter> or 101b
[05:12:57] <zwr> I don't know, but frankly I'd rather it stay that way to encourage people to do hex
[05:12:57] <fizzie> `b0101` is an identifier.
[05:12:59] <cousteau> ugh not b0101, that'd be a variable name
[05:13:06] <cousteau> or an identifier
[05:13:12] <fluter> k
[05:13:28] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:13:33] <cousteau> Arduino had a .h with lots of #defines for binary constants like B10101 and B00110101
[05:13:39] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:13:40] <fizzie> (And `0b...` for binary literals is in the C23 drafts.)
[05:13:40] <cousteau> 510 goddamn defines
[05:13:52] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:13:54] <zwr> yeah there's a GNU extension for that cousteau 
[05:14:10] <fluter> C is not dead :P
[05:14:11] <cousteau> zwr: I know, but I wasn't sure if it was already standard
[05:14:15] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:14:24] <zwr> btw jump to page 47 of this PDF to learn to pronounce hexadecimal nubmers http://www.bitsavers.org/magazines/Datamation/196801.pdf
[05:14:25] <cousteau> fizzie suggests it will be / is
[05:14:27] <bruda> Yea the hex to int thing seems like and odd thing to learn but a fun little exercise. Here's my newbie code: https://ideone.com/qMLJ0S
[05:14:30] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[05:14:57] *** Quits: i336 (~i336@101.163.202.71) (Ping timeout: 256 seconds)
[05:15:31] <bruda> I know it could be done so much better, but at least I accomplished some working form of it I think.
[05:15:38] <cousteau> ...so eventually I think they pulled my PR that replaced the #defines with an enum, AND marked all those enums as [[deprecated]], suggesting you to use the standard 0b versions instead (which are standard C++)
[05:16:08] <cousteau> (and may be standard C in a future, and are supported by gcc)
[05:16:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com)
[05:16:32] *** Joins: i336 (~i336@121.216.194.18)
[05:17:17] <fizzie> Another thing people I think keep asking for that's included in the C23 working draft already (which of course doesn't mean it couldn't get excluded, but is *some* sort of sign) is the optional ' digit separator you can stick wherever you like.
[05:17:46] <fizzie> So 0x0123'4567'89ab'cdef and so on.
[05:17:57] <fizzie> Which I'm sure will screw up so many syntax highlighters.
[05:17:57] <floatcomplex> madness
[05:18:06] <cousteau> bruda: uh, what's going on with using hex[0] and hex[1] in lines 33-45?
[05:18:58] <cousteau> don't you mean hex[i]?
[05:19:03] <bruda> Meh. I was replacing the 2 characters with the equivalent numbers needed to calc the proper integer. I'm looking at cleaning up this code a bit. This is just the initial working example I have.
[05:19:40] <cousteau> yeah you kinda messed up the index for hex[] a bit in lines 33-45 :P
[05:20:22] <bruda> Well yea. It works.... but ugly with newbie mistakes yea.
[05:20:51] <fizzie> Well, "works"... only if you have one 0-9 digit and one a-f digit.
[05:20:52] <cousteau> doesn't really work
[05:20:59] <bruda> Well, I suppose it's broke ain it.
[05:21:11] <cousteau> well it does work for any hex with the first digit in 0-9 and the second in A-F
[05:21:14] <bruda> Ok I'll fix this. Was contemplating if an enum would help simplify things a bit.
[05:21:49] <cousteau> so 0x4F works, but 0xF4 doesn't
[05:21:55] <bruda> right I see that now.
[05:22:15] <bruda> but wait, there is no F4
[05:22:34] <bruda> the first num in the hex only goes up as high as 7.
[05:22:54] <bruda> it's only the 2nd number that goes to F.
[05:23:01] <bruda> 2nd char I mean
[05:23:02] <cousteau> I don't think an enum will help.  Enums don't have a "string representation" that may help
[05:23:09] <cousteau> but a switch () may
[05:23:24] <bruda> Switches haven't been covered yet, but good idea.
[05:23:25] <cousteau> bruda: what do you mean the first num in the hex only goes up to 7?
[05:23:46] <cousteau> that's if your function only supports hex numbers from 00 to 7F
[05:23:51] <bruda> I'm looking at the ascii chart. 127 is 7F
[05:23:52] <pragma-> hexstr should be 5 bytes long, not 4, otherwise it's not a string.
[05:23:58] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[05:24:07] <pragma-> then again, for some reason your htoi isn't walking a string.
[05:24:11] <cousteau> well, the comment in lines 3-6 says nothing about ascii
[05:24:34] <bruda> Well yea but that's the chart I was using to ensure I was coming up with a sane result.
[05:24:37] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[05:24:45] * pragma- stares at `for (i = 0; i < 2; ++i)`
[05:24:50] <cousteau> bruda: you can still mess up with 0x42
[05:25:02] <bruda> But yea I screwed up here worse than I realized lol
[05:25:38] <cousteau> not a big screw up; easy fix
[05:26:50] <cousteau> anyway, once you've got a first version working, you may want to have one that works with arbitrarily long strings, like "0x1" or "0x12345"
[05:27:03] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[05:28:07] <cousteau> (that'll require you to "build the result" digit by digit, rather than just adding 2 digits together as you're doing in line 48)
[05:28:10] <bruda> So the hex may not always come to an integer that reflects a charater based on an int?
[05:28:35] <cousteau> a hex doesn't necessarily represent a char, no
[05:28:56] <bruda> But the ones that do...should?
[05:30:11] <pragma-> The problem statement clearly specifies a string. Yet you do not pass it a string.
[05:30:50] <bruda> pragma-: char hex[4] isn't a string?
[05:31:03] <pragma-> The contents you have given it are not a string.
[05:31:04] *** Joins: nostar (~nostar@107.173.73.28)
[05:31:16] <cousteau> a string is a sequence of chars... (2nd half of definition missing)
[05:31:17] *** Joins: ferdna (~ferdna@user/ferdna)
[05:31:33] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[05:31:33] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[05:31:35] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[05:31:38] <bruda> So "0X4c" isn't a string? Double quotes?
[05:31:41] *** Joins: rgrinberg (~textual@201.192.183.53)
[05:31:56] <cousteau> the content of a char [4] is a sequence of chars, alright, but it's still missing an important condition to be a string
[05:32:00] <pragma-> How many bytes are in "0X4c"?
[05:32:02] <floatcomplex> -Wjackass
[05:32:11] *** Quits: haniaF_ (~haniaF@83.24.198.7.ipv4.supernova.orange.pl) (Ping timeout: 264 seconds)
[05:32:15] *** Joins: haniaF (~haniaF@83.24.198.7.ipv4.supernova.orange.pl)
[05:32:25] *** Joins: zalt_ (~zalt@user/zalt)
[05:32:27] <cousteau> bruda: how do you know where a string ends?
[05:32:39] <pragma-> bruda: do you know how many bytes are in "0X4c"?
[05:33:05] *** Quits: i336 (~i336@121.216.194.18) (Ping timeout: 256 seconds)
[05:33:08] <bruda> I guess not. '\0' terminates a string right?
[05:33:18] <cousteau> yep
[05:33:44] <cousteau> A string is a sequence of chars terminated in (and including) a null byte
[05:33:59] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[05:34:17] <cousteau> so... how many bytes are there in "0X4f"?
[05:34:24] <bruda> Of course from the sounds of things a hex number could be several characters long
[05:34:35] <bruda> cousteau: supposed to be 5 then?
[05:34:41] <cousteau> yep :)
[05:34:58] *** Joins: i336 (~i336@121.216.7.166)
[05:34:58] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[05:35:34] <bruda> is there a limit to the number of characters in a hex? Or could it be 100's of characters if one was going crazy with hex?
[05:35:35] <pragma-> You can just omit the size and the language will figure out how big the array should be based on the initializer.
[05:35:36] <cousteau> or if unsure, just do char hexstr[] = "0X4f" without specifying the width, and C will implicitly assign a width of 5 to accomodate the 4 explicit chars plus the implicit null
[05:36:17] <cousteau> well, technically you can have as many hex digits as you please, same as how a decimal number can have as many decimal digits as you please
[05:36:35] <bruda> Ok. Hmm. 
[05:36:40] <cousteau> obviously there is a limitation in what an int can fit
[05:36:58] <pragma-> Bit surprised you haven't just copied the atoi() example and slightly modified it into htoi() as the book implied you should...
[05:37:19] <cousteau> ...but even if it can only fit 8 hex digits (for a platform where int is 32 bits), 0x0000000000000000000000000000000069 is still a valid hex with a valid int value
[05:37:45] <pragma-> Honestly, I'm absolutely gobsmacked that there is no string-walking at all in your htoi().
[05:37:46] <bruda> yea I was looking at atoi and for some reason it didn't hit me. But now I think I might figure it out. 
[05:38:14] <cousteau> yeah, for arbitrarily long strings, you'll need to walk the string, rather than looking up fixed positions of it
[05:44:41] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:45:24] *** Joins: Klinda (~superleag@user/klinda)
[05:45:53] <bruda> So add the int values of all the characters with a-f A-F being 10-11. 
[05:47:15] <caze> bruda: Did you do the rest of the exercises in chapter 1?
[05:47:42] <bruda> so 3c gives me 18, somehow I use 16 to convert this to 60?
[05:48:53] <bruda> caze, all but the exercises pertaining to processing program code and removing comments or checking for missing braces n such. Felt like I wasn't quite ready for something like that. Especially since the book hadn't even covered input from file yet.
[05:49:23] <caze> bruda: You don't need input from file.
[05:49:58] <bruda> Hmm. Guess my interpretation of these exercises is coming out wrong across the board lol
[05:50:03] <caze> bruda: Just write the solution as if someone is typing the full program into input.
[05:50:56] <cousteau> bruda: well, you need to multiply that 3 by 16
[05:51:00] <caze> How does 3c give you 18?
[05:51:42] <bruda> using the code someone mentioned earlier. n += num added them up
[05:52:16] <cousteau> well, c is 12 and 3 is 3, so I don't see how you get to 18 from that
[05:52:21] <caze> So you don't know?
[05:52:55] <bruda> If I have a hex number 50 chars long how do I do an arbitrary calculation of all that? keep the first number separate and add the rest together?
[05:53:08] <pragma-> inb4, "oh, 3c is 15 then?"
[05:53:18] <caze> "First number"?
[05:53:36] <bruda> well in the case of hex 0x3c the first one would be 3?
[05:54:54] <bruda> 3 * 16 + n. N being what? The sum of the remaining chars as ints?
[05:55:31] <bruda> So far I haven't seen an actual formula for converting hex to int. Just various logic that includes things not covered yet in the book.
[05:55:39] <caze> 0x123abc is ((((((((((1 * 16) + 2) * 16) + 3) * 16) + 10) * 16) + 11) * 16) + 12) * 16
[05:55:50] <caze> This is like 6th grade math.
[05:55:54] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 260 seconds)
[05:56:41] <bruda> I suck at math heh. Maybe I need to grab some math books then eh?
[05:56:54] <caze> 0x3c is (3 * 16) + 12
[05:57:17] * pragma- squints.
[05:57:27] <pragma-> ,calc ((((((((((1 * 16) + 2) * 16) + 3) * 16) + 10) * 16) + 11) * 16) + 12) * 16
[05:57:28] <candide> ((((((((((1 * 16) + 2) * 16) + 3) * 16) + 10) * 16) + 11) * 16) + 12) * 16 = 19114944
[05:57:36] <pragma-> ,cc printf("%d", 0x123abc);
[05:57:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:57:39] <candide> pragma-: 1194684
[05:57:49] *** Joins: Viewday11 (~Viewday@user/viewday)
[05:58:05] <cousteau>  ,calc ((((((((((1 * 16) + 2) * 16) + 3) * 16) + 10) * 16) + 11) * 16) + 12)
[05:58:05] <candide> ((((((((((1 * 16) + 2) * 16) + 3) * 16) + 10) * 16) + 11) * 16) + 12) = 1194684
[05:58:30] <cousteau> yeah there was an extra *16 there, but whatever
[05:58:38] <caze> oic
[05:58:49] <pragma-> ,mock caze math
[05:58:50] <candide> tHiS iS lIkE 6tH gRaDe MaTh.
[05:59:00] <cousteau> well deserved :)
[05:59:05] <caze> I literally learned this in 6th grade.
[05:59:11] <cousteau> bruda: if you can't wrap your head around hex, think how it's done in decimal
[05:59:11] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:59:43] *** Quits: i336 (~i336@121.216.7.166) (Ping timeout: 256 seconds)
[05:59:49] <omegatron> bruda: just look up the various number systems (dual, octal, decimal, hexadecimal) at wikipedia to first understand their notations and calculations and what then eventually something like Base32 and Base85
[06:00:01] <omegatron> (to get the knackk of it)
[06:00:09] <cousteau> how do you go from "2021" to the number of years that represents?
[06:00:09] <bruda> Yea probably a good idea.
[06:00:32] <pragma-> smh, exercise got derailed by learning how to do a silly pointless conversion.
[06:00:41] <cousteau> wtf is dual
[06:00:46] <pragma-> There is literally no reason to ever convert hex to dec.
[06:01:08] <cousteau> pragma-: exercise succeeded at detecting a vulnerability in bruda's understanding of hexaedecimal
[06:01:22] <pragma-> and strings
[06:01:24] <bruda> pragma-: sorry. I know I'm almost a hopeless case here. Though I do enjoy coding enough to keep trying.
[06:01:28] *** Joins: i336 (~i336@101.175.195.3)
[06:01:33] <cousteau> also, that isn't converting from hex to dec, but from hex to a numeric value
[06:01:48] <pragma-> what
[06:02:02] <cousteau> nah you're not hopeless, you're just having a hard time figuring one concept, but that can be overcome
[06:02:17] <pragma-> numeric value isn't a representation
[06:02:17] <bruda> I'm old and recovering from a lot of mental and physical issues. So this is a form of therapy for my brain I guess. Trying to get back to what I could do when I was younger.
[06:02:18] <caze> pragma- thinks computers use base 10.
[06:02:20] <cousteau> with time, you'll end up adapting your mind to "think like a computer" (sorta)
[06:02:23] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[06:02:43] <pragma-> caze: the exercise calls for it.
[06:02:51] <cousteau> pragma-: well, bruda wasn't printing decimal or anything
[06:02:54] <pragma-> oh wait, integer value.
[06:02:57] <cousteau> other than with the %d thing
[06:03:06] <cousteau> caze: they do
[06:03:09] *** Joins: pony (sid524992@smol/hors)
[06:03:15] <cousteau> (for 10 in binary) :)
[06:03:21] <pragma-> I had the notion it was converting to decimal.
[06:04:19] *** Joins: Betal (~Betal@user/betal)
[06:04:22] <bruda> So the atoi example code almost has it, except that I need 16 instead of 10 and to expand the >= && <= to include the values of a-f A-F?
[06:04:35] <cousteau> converting hex to dec would be useful as an exercise to do both the baseN->int conversion and the int->baseN conversion, but I see how that base16->base10 conversion doesn't feel too useful...
[06:04:50] <cousteau> bruda: that sounds correct
[06:04:51] <pragma-> I thought that was covered in earlier conversations...
[06:05:08] <bruda> It was. I'm just now properly putting it together I think.
[06:05:19] *** Joins: monkey_ (~user@190.104.116.153)
[06:05:35] <bruda> God help me if I had to do this without the guidance in here lol
[06:05:50] <bruda> I'd probably just use google to see solutions at this point.
[06:06:07] <bruda> But I think I got it. Gonna work up the solution I'm thinking of now.
[06:06:23] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[06:06:52] <cousteau> in April 1st this year, StackOverflow implemented a javascript thing that warned you that you had a limited number of copy-pastes of the code from their site
[06:07:41] <bruda> Well I grabbed a pdf of book solutions. Though I've only used it once to get some idea of what an exercise entailed.
[06:07:53] <cousteau> that's cheating
[06:08:15] <bruda> exactly. So I avoid using it. Unless I feel like I'm just not getting it.
[06:08:44] <bruda> in this case I bounced the problem around in here and got some pointers. Even if they broke my brain for a bit.
[06:08:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[06:10:35] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 264 seconds)
[06:12:10] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[06:12:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[06:13:02] <bruda> Trying to escape from stress too. A lot going on right now. So it's hard to focus. But this is helping me distract myself. 
[06:13:44] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472)
[06:13:46] <cousteau> yeah, ain't being an easy year...
[06:13:49] <cousteau> ...or two
[06:13:52] <bruda> Right.
[06:14:08] <caze> bruda: https://ideone.com/1Lv9Mi
[06:14:11] <bruda> Among other things. Losses, complications, etc.
[06:15:49] <bruda> blah close. 4c came out to P instead of L.
[06:15:57] <bruda> in my new solution.
[06:16:25] <cousteau> that's 0x50
[06:16:46] <bruda> Yea. it's wrong. I'll show you what I came up with thus far. I think I'm close.
[06:16:46] <cousteau> you sure you didn't accidentally do 3*16+16 instead of 3*16+12 ?
[06:17:37] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[06:18:25] *** Joins: cpuid (~cpuid@co5.at)
[06:18:26] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[06:18:26] *** Joins: cpuid (~cpuid@user/cpuid)
[06:18:31] <bruda> https://ideone.com/JWdISO hope I posted this right. Tried the edit feature.
[06:18:37] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472) (Ping timeout: 268 seconds)
[06:19:00] <bruda> Oh I think I know what i did wrong, the 0x is still in there.
[06:19:14] <cousteau> uh, n += 16*n + 15 doesn't look good
[06:19:34] <bruda> Ohhh. yea forgot to take out the +'s
[06:19:40] <cousteau> why would you add 16*n+15 to n?
[06:19:45] <cousteau> aah :)
[06:20:29] <bruda> well snap. Take out the pluses I think the code is working without even considering the 0x....
[06:20:55] <cousteau> well, what happens if your code reads an X?
[06:21:15] <bruda> Check out the same link. Edited the code.
[06:21:24] <cousteau> like, what does "12X3" parse?
[06:21:32] <cousteau> (don't test it; just think what happens)
[06:21:33] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[06:21:39] <bruda> I think it ignores the x
[06:21:47] <cousteau> yep
[06:22:05] <cousteau> so "0X4c" just reads as...
[06:22:28] <bruda> it comes out to 76 from the looks of it.
[06:23:11] <cousteau> if you ignore the 'X' in "0X4c", what's left of the string?
[06:23:22] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[06:23:25] <bruda> 4c
[06:23:33] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[06:23:43] <cousteau> well, "04c"
[06:23:51] <Rounin> Hehe... That's an interesting way of handling the 0x... Just skip invalid digits, since the 0 doesn't do anything
[06:23:53] *** Joins: fentanyl (~ryan@user/sapi01)
[06:23:54] <bruda> Ah. The first 0 is > than '0'.
[06:24:01] <cousteau> like, if you have "0X4c" and remove the X, you get "04c"
[06:24:16] <bruda> errr
[06:24:40] <cousteau> but you know, 04c is the same as 4c, because a 0 on the left won't do anything to the value
[06:24:50] <bruda> ok so the first 0 is being computed, then the x is skipped, then the 4c is computed.
[06:25:31] <cousteau> so you accidentally wrote a code that works for every valid value
[06:25:36] <bruda> '0' is == '0' and the code coes n = 16 * 0 + (c - '0') which is.....zero....
[06:25:42] <cousteau> (and also some invalid ones)
[06:26:06] <bruda> s/coes/does/
[06:26:07] <cousteau> yeah, the code transforms '0' into 0
[06:26:25] <cousteau> same as how 00004c and 000000004c would all give the same value as 4c
[06:26:26] <fizzie> FTR, when I mentioned `if (c == 'a' || c == 'A') n += 10;` and such, I was imagining a separate `n *= 16` had been done in advance, as in https://ideone.com/tZQCyI
[06:26:32] <cousteau> they're the same number
[06:26:41] <Rounin> If I want to write it as "00t0yg☺4c", then that's my choice { ¦ |
[06:26:54] <bruda> fizzie: yea I brain farted on filling out the full computation.
[06:27:39] <cousteau> this approach is only invalid if you had a requirement that "on erroneous input, <do something>"
[06:27:55] <bruda> Does this mean I completed the exercise or do I fix something here?
[06:28:13] <cousteau> otherwise, you can just say "the function will work for every valid input", and simply not specify what happens on invalid input
[06:28:23] <Rounin> bruda: You could use, hm... sscanf to compare your results to that
[06:28:50] *** Joins: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[06:28:59] <Rounin> bruda: You could just generate some random numbers using rand() or whatever it's called, and... Wait a minute, if you do that, they're already ints
[06:29:18] <Rounin> bruda: New plan, generate some random ints, use printf to print them as hex, and then convert them b ack
[06:29:29] <Rounin> sprintf, that is, to get it as a string
[06:29:31] <bruda> Yea I see how it's not actually checking for hex values, just treating everything the same.
[06:29:33] <cousteau> technically the requirement is fulfilled, and you showed before that you know how to deal with the 0X, so I think you've done everything you needed to do in that exercise
[06:30:24] <bruda> so I should check for 0x then start the compute after that?
[06:30:27] <cousteau> you could try to figure out an extra requirement saying "oh and prematurely return 0 if the input contains invalid characters (not counting the optional leading "0X")", but that would be for bonus points
[06:30:53] <bruda> All hex should be valid 0xNNN format otherwise not valid hex and no compute?
[06:31:16] <cousteau> 0xNNN or NNN without the 0x
[06:31:58] <cousteau> (you may compute part of it until you reach an invalid digit; no need to scan the full string for invalid digits before you start computing)
[06:32:33] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472)
[06:32:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:32:38] <bruda> So one more else that covers 'everything not 0-9, a-f, or A-F?
[06:33:02] <bruda> If I hit that then invalid hex value?
[06:33:20] <cousteau> yeah, a final else
[06:33:46] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:34:04] <bruda> Ok. So check for 0x, and add final else. Should be easy enough.
[06:34:26] <bruda> return 0 for invalid result?
[06:34:33] <cousteau> for example, yeah :)
[06:34:36] <cousteau> or -1
[06:34:46] <bruda> or that yea was thinking about non-zero
[06:34:54] <bruda> well....ya know what I mean
[06:34:58] <cousteau> that way you know that it got an erroneous result, and not that the input was actually 0
[06:35:24] <bruda> right. makes sense
[06:35:37] <cousteau> also, inputs "" and "0x" with no further digits should be invalid
[06:36:14] *** Joins: Viewday113 (~Viewday@user/viewday)
[06:36:25] *** Joins: seninha (~seninha@user/seninha)
[06:37:08] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:1f:67de:401b:c472) (Ping timeout: 268 seconds)
[06:38:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:38:15] *** Quits: VincentValentine (~VincentVa@95.84.5.33) (Ping timeout: 256 seconds)
[06:38:16] *** Viewday113 is now known as Viewday11
[06:38:28] *** Joins: aquijoule_ (~richbridg@213-225-3-145.nat.highway.a1.net)
[06:38:51] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:41:05] *** Quits: aquijoule__ (~richbridg@213-225-12-152.nat.highway.a1.net) (Ping timeout: 256 seconds)
[06:41:27] <bruda> https://ideone.com/JWdISO ok.. think I got it. 
[06:42:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:42:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[06:42:32] <bruda> if s[0] is '0' check if s[1] is 'x'. Bump index.
[06:43:08] <bruda> And if the compute hits 'else' it returns -1.
[06:43:21] *** Quits: i336 (~i336@101.175.195.3) (Ping timeout: 256 seconds)
[06:43:47] <cousteau> you're only making i=2 if you get 0x, but you're not making i=0 if you don't
[06:44:18] <bruda> Oh. Yea. so i = n = 0?
[06:44:22] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:44:31] <cousteau> (that's dangerous, because then i is uninitialized)
[06:44:32] <bruda> start with 0, change if 0x.
[06:44:34] <cousteau> yeah that'd work
[06:45:05] <cousteau> you can also just initialize the vars.  int i=0, n=0, c;
[06:45:13] *** Joins: i336 (~i336@121.217.2.119)
[06:45:25] <danielcamiel> bruda, you're gonna be smarter than the principal at this rate
[06:45:32] <bruda> https://ideone.com/JWdISO
[06:45:50] <bruda> danielcamiel: lol is that sarcasm? 
[06:46:00] <bruda> I'm stubborn, what can I say?
[06:46:02] <cousteau> I might use a char for c rather than an int.  And declare it inside the for loop, since it's never used outside of that, and its value isn't retained between iterations
[06:46:35] <cousteau> yeah, I think that code works
[06:46:39] <bruda> hmm. The book got me on the idea of using int, but that was when it was covering EOF too
[06:47:25] <cousteau> (instead of `n=-1; break;` you could just do `return -1;` and forget about n and the for loop.  Either solution is valid.)
[06:47:29] <caze> bruda: Did you see my solution?
[06:47:52] <bruda> I didn't want to peek until I got mine worked out lol
[06:47:53] <cousteau> yeah, caze's solution was interesting
[06:48:18] <cousteau> worth a look, now that you've figured out one possible solution
[06:48:52] <bruda> https://ideone.com/JWdISO ok even got the return -1 part too. Good call.
[06:49:50] <cousteau> that sort of "early return" in a function is quite common, and an easy way to get out of a bunch of nested loops without effort
[06:50:06] <bruda> Yea makes sense.
[06:50:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:50:20] <cousteau> "ok I don't care about the rest, the answer is -1 kthxbye"
[06:50:38] <bruda> right lol
[06:50:39] *** Quits: omegatron (~some@p5484903d.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:51:24] <bruda> Well it took most of my night but was nice to come to a sensible solution.
[06:51:39] <cousteau> yeah I should go to sleep too...
[06:51:44] <bruda> Reads nice too I think,
[06:51:44] <caze> bruda: You can also do it recursively. Might make more sense to your brian.
[06:52:07] <bruda> Recursive...yea maybe. That would be another fun exercise.
[06:52:10] <bruda> Maybe for tomorrow.
[06:52:28] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:59] *** Quits: i336 (~i336@121.217.2.119) (Ping timeout: 256 seconds)
[06:53:16] <bruda> for now I'll just say I did the exercise.
[06:53:29] <cousteau> Good night y'all!
[06:53:36] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[06:53:55] <bruda> good night. thanks man'
[06:54:03] <bruda> I'm tired too... gotta get up in the morning.
[06:54:27] *** Joins: i336 (~i336@101.174.236.59)
[06:55:24] *** Quits: bruda (~bruda@172.58.63.127) (Quit: goodnight, world)
[06:58:42] *** Quits: chenqisu12 (~03cia7d@183.217.201.124) (Ping timeout: 268 seconds)
[07:01:35] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 264 seconds)
[07:06:30] *** Quits: alch (~alch@151.68.53.199) (Read error: Connection reset by peer)
[07:09:33] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[07:09:51] *** Joins: alch (~alch@151.34.37.15)
[07:10:09] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:e470:abd7:3ea8:de06)
[07:10:46] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[07:11:43] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[07:12:13] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[07:14:07] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[07:17:13] <Satin> Uh. Am I doing something wrong here? I'm telling it explicitly to look in that directory for the .so https://usercontent.irccloud-cdn.com/file/oi6NCFZS/image.png
[07:17:25] <Satin> but it keeps looking in /usr/bin/ld still
[07:18:21] <danielcamiel> -L. -lbooklib
[07:19:10] <danielcamiel> should be renamed to libbooklib.so
[07:19:10] <Satin> what does the . do if i might ask (about to try it)
[07:19:16] <Satin> oh
[07:19:23] <danielcamiel> searches the current directory for libraries
[07:20:38] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:22:28] <Satin> alright seems like that specifc bit seems to work now, thank you https://usercontent.irccloud-cdn.com/file/Z8DVh78R/okay
[07:24:43] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[07:25:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:26:19] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[07:26:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[07:30:13] <danielcamiel> oh I meant the file should be renamed to libbooklib.so the flags are still -L. -lbooklib on the commandline
[07:30:23] *** Joins: eson123 (~eson123@118.69.128.37)
[07:35:06] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:c9bb:e46c:7fac:4568)
[07:35:29] <danielcamiel> (keep in mind the space after .)
[07:35:54] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:59] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:c9bb:e46c:7fac:4568) (Ping timeout: 264 seconds)
[07:51:20] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[07:52:03] *** Joins: phryk (~totallyno@user/phryk)
[07:52:52] *** Joins: loganlee (~Thunderbi@user/loganlee)
[07:53:53] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[07:57:14] *** Joins: alefir (~alefir@cpe-70-95-198-30.san.res.rr.com)
[07:57:42] *** Quits: loganlee (~Thunderbi@user/loganlee) (Client Quit)
[08:01:32] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[08:02:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[08:03:11] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[08:08:23] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 268 seconds)
[08:08:37] *** Joins: alefir_ (~alefir@cpe-70-95-198-30.san.res.rr.com)
[08:10:46] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[08:23:49] *** Quits: i336 (~i336@101.174.236.59) (Ping timeout: 268 seconds)
[08:25:02] *** Joins: i336 (~i336@121.216.100.100)
[08:26:33] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[08:29:21] *** Quits: nostar (~nostar@107.173.73.28) (Ping timeout: 268 seconds)
[08:30:22] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[08:32:10] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:32:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:36:08] *** Quits: i336 (~i336@121.216.100.100) (Ping timeout: 268 seconds)
[08:37:25] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:cc87:cc85:f027:20a)
[08:38:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[08:40:42] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[08:41:16] *** Joins: i336 (~i336@101.175.225.232)
[08:42:33] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:cc87:cc85:f027:20a) (Ping timeout: 265 seconds)
[08:42:58] *** Joins: unix_chad (~quassel@115.97.185.132)
[08:43:06] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[08:43:29] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[08:43:45] *** Parts: unix_chad (~quassel@115.97.185.132) ()
[08:44:16] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[08:44:56] *** Quits: alefir (~alefir@cpe-70-95-198-30.san.res.rr.com) (Killed (NickServ (GHOST command used by alefir_)))
[08:45:00] *** alefir_ is now known as alefir
[08:45:41] *** Joins: alefir_ (~alefir@cpe-70-95-198-30.san.res.rr.com)
[08:49:07] *** Quits: charadon (~charadon@155.138.164.183) (Ping timeout: 250 seconds)
[08:51:46] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[08:52:40] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[08:52:51] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[08:56:28] *** Joins: vysn (~vysn@user/vysn)
[08:56:45] *** Joins: doofenshmirtz (~farawayas@103.160.128.32)
[08:58:53] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[09:13:50] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[09:14:44] *** Quits: pizdets_ (~pizdets@183.182.114.136) (Ping timeout: 250 seconds)
[09:15:32] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[09:15:36] *** Joins: pizdets (~pizdets@183.182.111.52)
[09:15:48] *** Quits: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net) (Read error: Connection reset by peer)
[09:16:05] <Satin> oh what
[09:17:04] <Satin> danielcamiel: I don't follow - the file should be renamed to libbooblib.so but gcc will automatically recognize it if I did -lbooklib?
[09:17:23] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Remote host closed the connection)
[09:17:28] <danielcamiel> yep
[09:18:07] *** Joins: frost (~frost@user/frost)
[09:19:24] <danielcamiel> it will add the lib prefix and suffix it with .a or .so, whichever the library has
[09:19:29] *** Quits: frost (~frost@user/frost) (Client Quit)
[09:20:47] <Satin> https://usercontent.irccloud-cdn.com/file/e8orKcDD/image.png
[09:21:39] <Satin> AHHHHH
[09:21:51] <Satin> i forgot to take off the .so at the end of the -lbooklib i see that.
[09:21:54] <Satin> Let me try again.
[09:23:59] *** Joins: aqua (~sid742412@user/aqua)
[09:24:02] <Satin> https://usercontent.irccloud-cdn.com/file/bkUkXECL/image.png
[09:24:06] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[09:24:16] *** Quits: aqua (~sid742412@user/aqua) (Remote host closed the connection)
[09:24:34] *** Joins: aqua (~sid742412@user/aqua)
[09:25:46] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:25:46] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[09:25:50] *** Joins: frost (~frost@user/frost)
[09:26:41] *** aqua is now known as kish`
[09:29:56] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:30:12] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:34:14] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[09:34:56] <danielcamiel> not sure about that one, maybe you need the pkg-config for glib-2.0 ?
[09:35:47] *** Joins: loganlee (~Thunderbi@user/loganlee)
[09:36:40] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:cc87:cc85:f027:20a)
[09:36:59] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Client Quit)
[09:38:44] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:39:35] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[09:39:47] <danielcamiel> `pkg-config --cflags --libs gtk4 glib-2.0`
[09:40:04] *** Joins: pulse (~pulse@user/pulse)
[09:40:16] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:41:11] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:cc87:cc85:f027:20a) (Ping timeout: 264 seconds)
[09:41:31] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[09:43:05] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[09:43:33] <Satin> https://usercontent.irccloud-cdn.com/file/iyGf6jZE/image.png
[09:44:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[09:46:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:46:33] <Satin> I guess I'll try replacing g_strdup with somethning else, presumbly it's a copy of some standard C function
[09:48:03] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:48:05] <danielcamiel> worth a shot, I'm out of ideas
[09:51:13] <Satin> https://usercontent.irccloud-cdn.com/file/D85x06GZ/image.png
[09:51:18] <Satin> now it changed to g_log lmao
[09:56:37] *** Joins: alefir__ (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:59:05] *** DilloNoGMO is now known as bluemagicmidnigh
[09:59:20] *** bluemagicmidnigh is now known as blumagicmidnite
[09:59:41] <Satin> danielcamiel: this look like i'm compiling that lib bit incorrectly? 
[09:59:43] <Satin> https://usercontent.irccloud-cdn.com/file/CYJGMJQv/image.png
[10:00:59] *** Quits: alefir__ (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[10:02:18] *** Joins: iddev5 (~iddev5@2409:4062:229f:fda5:4d9e:501c:e04a:1c9d)
[10:02:27] <danielcamiel> yep, try gcc `pkg-config --cflags gtk4` -c book-entry.c / gcc -shared -o libbooklib.so book-entry.o
[10:03:02] <danielcamiel> shouldn't need any linker flags at this stage
[10:07:40] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:391b:6915:6f86:ad4d)
[10:08:36] <Satin> No errors now during the compile linking process. https://usercontent.irccloud-cdn.com/file/yTMzgzXz/image.png
[10:09:32] <danielcamiel> good one, just need to add the path when running it... LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./book
[10:10:52] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[10:11:19] <Satin> Like, in the terminal when running ./book or to one of the compile commands?
[10:11:38] <danielcamiel> in the terminal when running it
[10:11:47] <Satin> Ah. Gotcha. https://usercontent.irccloud-cdn.com/file/ULI2K5Et/image.png
[10:12:09] <Satin> Thank you a lot! I think it's segmentation fault now because of my actual code and not because of gcc/library linking hell
[10:12:23] <danielcamiel> hopefully hehe, you're welcome :)
[10:15:20] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:16:18] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:391b:6915:6f86:ad4d) (Ping timeout: 260 seconds)
[10:19:15] *** Quits: i336 (~i336@101.175.225.232) (Ping timeout: 256 seconds)
[10:20:57] *** Joins: i336 (~i336@121.217.99.87)
[10:22:31] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[10:25:19] *** Joins: mahmutov (~mahmutov@176.30.239.193)
[10:25:28] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[10:26:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:26:31] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[10:28:27] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[10:28:33] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[10:31:30] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[10:33:43] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 265 seconds)
[10:33:50] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:36:54] *** Joins: chenqisu12 (~03cia7d@183.217.201.124)
[10:41:02] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:41:05] *** Quits: alefir (~alefir@cpe-70-95-198-30.san.res.rr.com) (Quit: alefir)
[10:41:10] *** Quits: alefir_ (~alefir@cpe-70-95-198-30.san.res.rr.com) (Remote host closed the connection)
[10:43:19] *** Quits: pucara (~i@181.93.164.73) (Quit: Lost terminal)
[10:45:38] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[10:49:09] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[10:49:35] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 264 seconds)
[10:55:13] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[10:55:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:55:52] *** Joins: gproto10 (~gproto23@user/gproto23)
[10:56:39] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:b5cf:b016:be41:263b)
[10:57:54] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 260 seconds)
[10:57:58] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Libera upgrade.)
[10:58:28] *** Joins: nitrix (~nitrix@user/nitrix)
[10:58:56] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:03:55] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[11:05:23] *** Quits: alch (~alch@151.34.37.15) (Read error: Connection reset by peer)
[11:08:47] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[11:09:23] *** Joins: alch (~alch@151.68.37.189)
[11:10:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:13:58] *** night_wulfe_ is now known as night_wulfe
[11:19:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:19:41] *** mendel_munkis is now known as munkis
[11:21:34] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[11:23:21] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[11:25:38] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[11:26:56] *** Quits: iddev5 (~iddev5@2409:4062:229f:fda5:4d9e:501c:e04a:1c9d) (Quit: iddev5)
[11:31:14] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[11:31:59] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[11:32:32] *** Joins: useretail (~useretail@185.132.19.151)
[11:34:18] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 260 seconds)
[11:36:12] *** Quits: Symmetria (Symmetria@41.60.231.132) (Ping timeout: 268 seconds)
[11:36:53] *** Quits: rahl (~rahl@102.114.83.40) (Ping timeout: 256 seconds)
[11:37:16] *** Joins: aradesh (~aradesh@user/aradesh)
[11:37:46] *** Joins: mrig (~AdiIRC@user/mrig)
[11:38:24] *** Joins: rahl (~rahl@102.114.125.200)
[11:40:04] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[11:41:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:42:39] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[11:45:29] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 250 seconds)
[11:48:51] *** Joins: ThatLinuxGuy (~Srain@58.169.20.53)
[11:52:45] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[11:54:51] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:00:18] *** Quits: aquijoule_ (~richbridg@213-225-3-145.nat.highway.a1.net) (Remote host closed the connection)
[12:00:34] *** Joins: chomwitt (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374)
[12:04:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:07:24] *** Joins: terminalpusher (~terminalp@2a01:586:12e7:1:89c3:58c2:e0e9:27cc)
[12:08:08] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[12:09:44] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 265 seconds)
[12:11:02] *** Quits: chenqisu12 (~03cia7d@183.217.201.124) (Ping timeout: 240 seconds)
[12:11:49] *** Quits: tinyweasel (~weasel@gone.under.underserver.net) (Quit: quit)
[12:11:49] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[12:13:44] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[12:14:52] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[12:15:48] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:20:40] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:23:17] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[12:23:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[12:29:34] *** Quits: gproto10 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[12:31:15] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[12:31:39] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[12:32:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[12:35:49] *** Joins: gproto10 (~gproto23@user/gproto23)
[12:36:28] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[12:36:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:37:28] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[12:37:55] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:38:35] *** Joins: Brewster (~Brewster@104.145.226.5)
[12:50:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:52:47] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[12:54:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[12:56:02] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 240 seconds)
[12:57:45] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 265 seconds)
[12:58:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[13:01:51] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[13:02:11] *** Quits: zalt_ (~zalt@user/zalt) (Ping timeout: 264 seconds)
[13:02:44] *** Joins: earnestly (~earnest@user/earnestly)
[13:04:03] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[13:07:14] *** Joins: uskerine (uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[13:09:18] *** Joins: bbju (~bbju@103.144.148.53)
[13:10:25] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:12:52] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:16:56] *** Quits: uskerine (uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Remote host closed the connection)
[13:18:23] *** Quits: bbju (~bbju@103.144.148.53) (Quit: Client closed)
[13:28:46] *** Joins: bbju (~bbju@103.144.148.51)
[13:30:05] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[13:30:42] *** Joins: justache (~justache@user/justache)
[13:30:53] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:31:31] *** Joins: VincentValentine (~VincentVa@95.84.5.33)
[13:31:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[13:32:31] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 250 seconds)
[13:36:07] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[13:36:28] <novns> why are there no predefined macro for the pointer size in the standard headers, equal to sizeof(*void) ?
[13:36:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 240 seconds)
[13:36:34] *** Quits: i336 (~i336@121.217.99.87) (Ping timeout: 260 seconds)
[13:38:23] *** Joins: i336 (~i336@121.216.192.99)
[13:39:10] *** Joins: magla (~gelignite@55d4124a.access.ecotel.net)
[13:39:15] <novns> or can pointers possibly have different sizes for different types?
[13:40:23] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[13:42:18] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:5be:28c2:b3af:e641)
[13:44:16] <novns> * sizeof(void*)
[13:44:23] *** Quits: i336 (~i336@121.216.192.99) (Ping timeout: 256 seconds)
[13:45:07] *** Joins: i336 (~i336@121.216.192.99)
[13:45:54] <nomagno> One thing that stills bother me is how you can assign structs containing arrays, but not arrays
[13:46:24] <nomagno> What kind of code would break retroactively if the ability to assign arrays without any pointer decay was ever introduced?
[13:46:32] <nomagno> I'm guessing pretty much none
[13:48:32] <nomagno> Upgrading arrays to first-class citizens sounds like the single largest QoL improvement that could be made. Perhaps with a bit of new syntax if there really was any concern about breakage
[13:48:46] <novns> nomagno, arrays can have dynamic size, compiler doesn't now at compile time
[13:48:53] <novns> *know
[13:49:51] <novns> so you just copy memory blocks, and it's your job to specify sizes at run time
[13:50:58] *** Quits: i336 (~i336@121.216.192.99) (Ping timeout: 260 seconds)
[13:51:13] *** Joins: zalt_ (~zalt@user/zalt)
[13:51:46] <novns> when you assign structs containing arrays, you just copy pointers as it is, copied arrays point to the same memory
[13:51:47] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[13:52:21] *** Joins: i336 (~i336@121.216.194.200)
[13:53:16] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[13:56:23] <trenka> novns: no
[13:56:44] <trenka> nomagno: may be http://www.bell-labs.com/usr/dmr/www/chist.html answers a bit
[13:56:44] <novns> trenka, sure?
[13:56:51] <trenka> novns: sure
[13:56:56] <novns> ok
[13:57:26] <novns> trenka, what statement is no exactly?
[13:58:55] <aosync> if you pass a struct that contains an array, by value, to a function, it will copy it 
[13:59:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:59:44] <novns> thanks
[13:59:53] <riv> nomagno: im not sure you can assign arrays like that..
[14:00:11] <riv> hmm seems you can!
[14:00:14] <trenka> ,cc struct { int a[1]; } a = {0}, b = {0}; a.a[0] = 10; b = a; a.a[0] = 20; printf("%d %d", a.a[0], b.a[0])
[14:00:17] <candide> trenka: 20 10
[14:00:24] <riv> it really copies every element of the array, how interesting
[14:00:46] <riv> I suppose you can think of the array as just being that many fields in the struct
[14:00:51] <nomagno> Yeah, the current array behaviour is not excessively justifiable
[14:01:15] <nomagno> As in, it doesn't actually break any code to support assigning arrays with =
[14:01:31] <nomagno> Even if just some
[14:01:48] <riv> i guess if you want to assign arrays, you can stick them in structs
[14:02:50] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[14:03:36] <nomagno> You can currently assign arrays passed to functions, but those are really pointers so it doesn't count
[14:05:54] *** Quits: i336 (~i336@121.216.194.200) (Ping timeout: 260 seconds)
[14:06:52] *** Joins: i336 (~i336@121.216.194.200)
[14:09:38] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[14:10:59] *** Quits: doofenshmirtz (~farawayas@103.160.128.32) (Ping timeout: 268 seconds)
[14:14:04] *** Quits: ThatLinuxGuy (~Srain@58.169.20.53) (Remote host closed the connection)
[14:15:34] *** Joins: plastico (~plastico@neomutt/plastico)
[14:20:01] *** Quits: magla (~gelignite@55d4124a.access.ecotel.net) (Read error: Connection reset by peer)
[14:20:41] *** Joins: magla (~gelignite@55d4124a.access.ecotel.net)
[14:21:35] *** Joins: Rounin (~david@84.212.130.215)
[14:26:42] *** Quits: heftig (heftig@archlinux/developer/heftig) (Quit: heftig)
[14:27:39] *** Joins: heftig (heftig@archlinux/developer/heftig)
[14:27:58] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[14:28:16] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:28:29] *** Joins: tinyweasel (~weasel@gone.under.underserver.net)
[14:28:31] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[14:29:30] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:29:43] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:39] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:31:02] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Client Quit)
[14:31:25] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[14:34:19] *** Joins: zenstoic (uid461840@hampstead.irccloud.com)
[14:36:09] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Client Quit)
[14:36:24] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[14:37:05] *** Quits: i336 (~i336@121.216.194.200) (Ping timeout: 256 seconds)
[14:38:25] *** Joins: i336 (~i336@101.174.208.210)
[14:40:21] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[14:40:23] *** Joins: kish` (~sid742412@user/aqua)
[14:41:33] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[14:43:24] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[14:44:01] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[14:44:27] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[14:44:54] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[14:45:35] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[14:45:39] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.130)
[14:47:25] *** Joins: semeion (~semeion@user/semeion)
[14:48:55] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 265 seconds)
[14:50:57] *** Joins: jscottb_ (~jscottb@cpe-173-92-212-35.carolina.res.rr.com)
[14:51:04] *** Quits: jscottb (~jscottb@cpe-173-92-212-35.carolina.res.rr.com) (Ping timeout: 268 seconds)
[14:51:07] *** Quits: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Remote host closed the connection)
[14:54:02] *** Quits: i336 (~i336@101.174.208.210) (Ping timeout: 240 seconds)
[14:54:29] *** Joins: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[14:55:25] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[14:55:45] *** Joins: i336 (~i336@101.163.208.23)
[14:59:03] *** Joins: Burgundy (~yomon@86.127.194.72)
[14:59:11] *** Quits: chomwitt (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[15:00:15] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[15:00:53] *** Quits: mahmutov (~mahmutov@176.30.239.193) (Ping timeout: 256 seconds)
[15:04:02] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 240 seconds)
[15:04:02] *** Joins: writir (~test2@81.19.223.190)
[15:05:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850)
[15:08:02] *** Quits: alch (~alch@151.68.37.189) (Ping timeout: 260 seconds)
[15:09:44] *** Joins: alch (~alch@151.68.1.179)
[15:10:49] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e15c:d2bc:9fea:d850) (Ping timeout: 268 seconds)
[15:11:13] *** Joins: zalt__ (~zalt@user/zalt)
[15:11:56] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:13:55] *** Quits: zalt_ (~zalt@user/zalt) (Ping timeout: 256 seconds)
[15:14:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[15:14:40] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[15:15:18] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[15:15:59] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:17:06] *** Quits: bbju (~bbju@103.144.148.51) (Quit: Client closed)
[15:18:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[15:19:11] *** Joins: phao (~phao@2804:d45:8e7a:de00:c041:e97e:f0c3:e6f8)
[15:19:24] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[15:19:46] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[15:20:21] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[15:20:44] *** Joins: nyah (~nyah@94.6.71.219)
[15:22:24] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:22:54] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Client Quit)
[15:23:47] *** Joins: Atque (~Atque@user/atque)
[15:24:23] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 264 seconds)
[15:25:09] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[15:25:42] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[15:27:59] <roxlu> hey, why would a library use `uint64_t` as user-data; e.g. which normally is `void*` ? 
[15:29:19] *** Joins: AmR (~AmREiSa@41.36.24.35)
[15:30:58] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:5be:28c2:b3af:e641) (Ping timeout: 265 seconds)
[15:31:22] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[15:31:31] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[15:32:26] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[15:33:15] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[15:33:18] *** Joins: cebor (~cebor@user/cebor)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:04] <dave0> roxlu: dunno, is it insufficient for you?
[15:36:41] <dave0> you can sorta stuff a pointer into an integer but it's not a good idea
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:00] <dave0> OTOH if there's no other way, it will probably work in practice
[15:37:14] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[15:37:26] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:37:35] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:b5cf:b016:be41:263b) (Ping timeout: 264 seconds)
[15:37:49] <dave0> maybe you could memcpy it from the pointer to the uint64_t
[15:37:52] <roxlu> dave0: I've never done this, but I just saw it in a 3rd party library and was wondering why they would have done that
[15:38:51] <dave0> roxlu: you could argue they made a mistake
[15:39:01] *** Joins: nf (~n@monade.li)
[15:39:11] <dave0> if you have a pointer, you could stuff a uint64_t in a struct and pass a pointer to the struct
[15:39:34] <dave0> but it's frowny to stuff a pointer into an integer variable
[15:39:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:39:57] <roxlu> ok thanks dave0 
[15:40:30] <dave0> you could use an integer as an index into an array of pointers and grab a pointer that way
[15:40:31] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[15:40:47] <dave0> but it kinda defeats the purpose of having a "userdata" parameter
[15:41:26] *** Joins: Feuermagier_ (~Feuermagi@154.28.188.151)
[15:41:56] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[15:42:08] *** Quits: Feuermagier_ (~Feuermagi@154.28.188.151) (Client Quit)
[15:42:53] *** Joins: Feuermagier_ (~Feuermagi@154.28.188.151)
[15:43:40] *** Quits: Feuermagier_ (~Feuermagi@154.28.188.151) (Remote host closed the connection)
[15:43:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[15:43:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[15:44:12] <aosync> uintX_t types not portable >:() !! (/s)
[15:44:28] <aosync> (it is true, but (/s) still)
[15:44:43] <dave0> technically they're optional
[15:44:43] *** Quits: zwr (~zwr@2804:d45:b966:fb00:8529:315f:ee39:e54c) (Ping timeout: 268 seconds)
[15:44:50] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[15:44:57] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ea44:acbc:81:aeb2)
[15:45:20] *** Quits: writir (~test2@81.19.223.190) (Ping timeout: 268 seconds)
[15:45:33] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[15:45:33] <Maxdamantus> Even if they're there, there's no guarantee that they can store pointer values.
[15:46:02] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[15:46:08] <dave0> yeah that's why i said frowny
[15:46:47] <dave0> but memcpy might be valid
[15:47:11] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 264 seconds)
[15:47:12] *** Quits: eau (~chat@user/eau) (Ping timeout: 268 seconds)
[15:48:54] <dave0> struct { ... } *a; uint64_t userdata; memcpy(&userdata, &a, something); myfunc(userdata);
[15:50:57] *** Quits: jan6 (jan6@tilde.team/user/jan6) (Quit: nopers)
[15:51:14] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[15:52:58] *** Joins: eau (~chat@user/eau)
[15:53:28] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[15:53:53] *** Joins: meator (~meator@user/meator)
[15:53:54] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:57:15] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[16:02:38] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:04:21] *** Quits: i336 (~i336@101.163.208.23) (Ping timeout: 256 seconds)
[16:05:57] *** Joins: i336 (~i336@101.174.252.160)
[16:08:18] *** Joins: masticass (~gzc@host-85-201-176-158.dynamic.voo.be)
[16:10:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[16:10:36] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 265 seconds)
[16:14:11] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.130) (Ping timeout: 264 seconds)
[16:17:25] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:8ce9:9a4:40aa:9fe2)
[16:17:56] <nomagno> Is this legal standard C? `typedef type (*name)()`
[16:17:57] <nomagno> as in, function pointer without any type signature
[16:18:41] *** Quits: masticass (~gzc@host-85-201-176-158.dynamic.voo.be) (Quit: WeeChat 3.3)
[16:19:11] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[16:19:13] <fizzie> Yes, with some caveats about what you can do with it.
[16:19:16] *** Joins: masticass (~gzc@host-85-201-176-158.dynamic.voo.be)
[16:19:39] *** Quits: i336 (~i336@101.174.252.160) (Ping timeout: 256 seconds)
[16:20:28] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:20:28] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[16:20:46] <fizzie> Specifically, you can't call a variadic function, or a function that takes and parameter affected by the default argument promotions through it.
[16:21:08] <fizzie> s/and/any/
[16:21:16] *** Joins: i336 (~i336@101.175.219.237)
[16:21:45] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[16:22:41] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:8ce9:9a4:40aa:9fe2) (Ping timeout: 265 seconds)
[16:23:07] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[16:23:33] <nomagno> Oh yeah, can confirm my compiler warns me about assigning variadic function pointers to this
[16:24:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:24:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:25:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:28:07] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:28:44] <fizzie> Re the earlier conversation about userdata, a `union userdata { intmax_t num; uintmax_t word; void *ptr; void (*func)(void); }` is probably the "friendliest" type in terms of allowing to pass most things without unnecessary allocations and/or unportable conversions.
[16:28:54] *** Joins: Atque (~Atque@user/atque)
[16:30:22] <nomagno> `struct { int ints[ARRUNIT]; unsigned int uints[ARRUNIT]; char chars[ARRUNIT]; unsigned char uchars[ARRUNIT]; char *strings[ARRUNIT*2]; void *ptrs[ARRUNIT*2]; int track; fnptr_int funcs[ARRUNIT];}`
[16:30:27] <nomagno> I am currently using something like this
[16:30:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[16:31:34] <nomagno> Almost guaranteed to be less than 4KBs on any modern architecture when ARRUNIT < 70
[16:33:47] <fizzie> Well, I was aiming for the size of a single register. ;) Though maybe a floating type might've been nice too.
[16:34:54] *** Joins: seninha (~seninha@user/seninha)
[16:35:31] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[16:36:31] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[16:37:24] *** semeion is now known as mnemonic
[16:41:11] *** Joins: abip20 (~abdullah@103.66.177.186)
[16:45:25] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:8ce9:9a4:40aa:9fe2)
[16:48:50] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[16:50:11] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 264 seconds)
[16:50:45] *** Joins: superdupond (~Kev@2a01cb0400149f0071024234821d877b.ipv6.abo.wanadoo.fr)
[16:51:36] <dave0> fizzie: pointer to a struct can do all that union-y thing
[16:51:51] <dave0> oh i guess there'd be no type checking
[16:52:44] <fizzie> That was the "without unnecessary allocations" part. Sure, in some contexts you can use a pointer to a thing with automatic storage. But not all.
[16:53:01] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[16:53:20] *** Joins: abip20 (~abdullah@103.66.177.186)
[16:54:05] *** Joins: pert (~pert@fsf/member/pert)
[16:54:12] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:54:27] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[16:54:46] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[16:55:20] <fizzie> IOW, of course a `void *` can hold an `intmax_t *`, a `uintmax_t *` or a `void (**)(void)`, or a lot of other types besides. It just can't portably hold an `intmax_t`, `uintmax_t` or a `void (*)(void)` *value*, so you need an object to point to.
[16:56:52] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:8ce9:9a4:40aa:9fe2) (Ping timeout: 268 seconds)
[16:57:31] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:45d3:5172:e85f:c128)
[17:06:40] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[17:08:32] *** Quits: abip20 (~abdullah@103.66.177.186) (Changing host)
[17:08:32] *** Joins: abip20 (~abdullah@user/abip20)
[17:09:10] *** Quits: abip20 (~abdullah@user/abip20) (Quit: Konversation terminated!)
[17:09:24] *** Joins: abip20 (~abdullah@user/abip20)
[17:09:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:11:39] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[17:13:39] *** Joins: jscottb (~jscottb@cpe-173-92-212-35.carolina.res.rr.com)
[17:14:37] *** Quits: jscottb_ (~jscottb@cpe-173-92-212-35.carolina.res.rr.com) (Ping timeout: 256 seconds)
[17:14:38] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[17:18:26] *** Quits: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Remote host closed the connection)
[17:19:10] *** Quits: abip20 (~abdullah@user/abip20) (Quit: Konversation terminated!)
[17:19:23] *** Joins: abip20 (~abdullah@user/abip20)
[17:26:51] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:27:32] *** Joins: exile8338 (~exilepilo@host86-139-14-63.range86-139.btcentralplus.com)
[17:28:25] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[17:29:51] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:30:53] *** Joins: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[17:31:33] *** Joins: shivesh (~shivesh@user/shivesh)
[17:31:44] *** Quits: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Remote host closed the connection)
[17:33:19] *** Quits: exile8338 (~exilepilo@host86-139-14-63.range86-139.btcentralplus.com) (Quit: leaving)
[17:33:52] *** Joins: zalt___ (~zalt@user/zalt)
[17:35:15] *** Quits: zalt__ (~zalt@user/zalt) (Read error: Connection reset by peer)
[17:36:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:37:00] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.3)
[17:38:19] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681)
[17:39:59] *** Quits: abip20 (~abdullah@user/abip20) (Ping timeout: 264 seconds)
[17:40:26] *** Joins: mahmutov (~mahmutov@176.30.239.193)
[17:40:35] *** zalt___ is now known as zalt
[17:40:47] *** Joins: bruda (~bruda@172.58.63.127)
[17:41:17] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:45d3:5172:e85f:c128) (Ping timeout: 268 seconds)
[17:46:35] *** Joins: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[17:48:59] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681) (Ping timeout: 264 seconds)
[17:56:15] *** Joins: abip20 (~abdullah@user/abip20)
[17:56:30] *** Quits: i336 (~i336@101.175.219.237) (Ping timeout: 260 seconds)
[17:56:54] *** Joins: i336 (~i336@101.174.116.88)
[18:01:32] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[18:03:01] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[18:06:20] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681)
[18:11:09] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681) (Ping timeout: 250 seconds)
[18:12:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:14:16] *** Joins: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi)
[18:18:14] *** Joins: ferdna (~ferdna@user/ferdna)
[18:18:32] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[18:26:35] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[18:28:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:30:02] *** Joins: HolyFishPaste91 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[18:31:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[18:31:33] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:33:04] *** Quits: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi) (Quit: Akuli)
[18:33:43] *** Joins: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi)
[18:33:45] *** Quits: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi) (Client Quit)
[18:33:46] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[18:33:59] *** Quits: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Ping timeout: 264 seconds)
[18:34:01] *** Joins: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi)
[18:34:05] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[18:39:59] *** Quits: HolyFishPaste91 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Ping timeout: 264 seconds)
[18:40:32] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[18:42:14] *** Quits: zenstoic (uid461840@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:45:26] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:49:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:51:59] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[18:53:54] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[19:01:31] *** Quits: abip20 (~abdullah@user/abip20) (Quit: Konversation terminated!)
[19:06:04] *** Quits: alch (~alch@151.68.1.179) (Read error: Connection reset by peer)
[19:10:13] *** Joins: alch (~alch@151.82.139.166)
[19:10:20] *** Joins: Klinda (~superleag@user/klinda)
[19:11:12] *** Joins: mahmutov_ (~mahmutov@37.155.50.64)
[19:11:15] *** Joins: fputs6 (~fputs@67.59.83.166)
[19:11:42] *** Joins: dohtem (uid524096@user/dohtem)
[19:12:41] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[19:12:41] *** fputs6 is now known as fputs
[19:14:11] *** Quits: mahmutov (~mahmutov@176.30.239.193) (Ping timeout: 256 seconds)
[19:14:32] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:17:22] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[19:17:43] *** Quits: bruda (~bruda@172.58.63.127) (Quit: hibernation testing)
[19:17:48] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681)
[19:19:25] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[19:19:29] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:23:32] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2c71:f3a7:2628:f681) (Ping timeout: 240 seconds)
[19:23:35] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[19:24:28] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Client Quit)
[19:24:42] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[19:25:24] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[19:25:26] *** Joins: rgrinberg (~textual@201.192.183.53)
[19:33:33] *** Joins: bruda (~bruda@172.58.63.127)
[19:41:41] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[19:43:12] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[19:45:14] *** Quits: bruda (~bruda@172.58.63.127) (Ping timeout: 260 seconds)
[19:45:38] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:46:58] *** Joins: slidercrank (~slidercra@user/slidercrank)
[19:51:34] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:52:36] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:e470:abd7:3ea8:de06) (Quit: simon323)
[19:54:23] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 265 seconds)
[19:57:48] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[19:57:55] *** Joins: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net)
[19:58:11] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 250 seconds)
[20:00:05] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[20:00:32] <nomagno> fizzie: why can't it portably hold any of those stuffs?
[20:01:30] *** Quits: soul-d (~uknown@user/soul-d) (Remote host closed the connection)
[20:02:21] *** Joins: soul-d (~uknown@user/soul-d)
[20:03:23] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 264 seconds)
[20:10:30] *** Quits: phao (~phao@2804:d45:8e7a:de00:c041:e97e:f0c3:e6f8) (Quit: Leaving)
[20:11:50] <pert> nomagno: because the ISO C standard doesn't say that it can
[20:12:10] <nomagno> Can it hold an arbitary struct pointer then?
[20:12:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:12:20] <pert> yes
[20:12:28] <nomagno> Aah, makes sense
[20:12:34] <nomagno> Seems like a bit of an oversight there
[20:12:49] <nomagno> void * would reasonably be able to hold pretty much anything you can point to
[20:14:17] <pert> more precisely, it can hold a pointer to anything you can point to (except functions)
[20:14:18] <sham1> But an intmax_t could be bigger than your pointer word size
[20:15:11] <fizzie> Like I said, it can hold an intmax_t * (a pointer to an intmax_t), but not a (converted) intmax_t value.
[20:15:15] <nomagno> pert: What is the reasoning behind explicitly not being able to hold function pointers?
[20:15:45] <fizzie> The fact that the address space for code might be different than the address space for data.
[20:16:35] <sham1> For example back in the good(?) old days of DOS, you could have near and far pointers. Near pointers point within the current segment and far pointers outside the segment
[20:17:32] <pert> in practice, on every system I know of, mixing void* and function pointers is harmless and does the right thing; some software, like GLib, requires this to work
[20:17:43] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[20:17:52] <sham1> Well it's required on POSIX
[20:17:59] <sham1> So it does make sense
[20:18:41] <pert> Actually a TR constrained the POSIX requirement: instead of requiring it to be supported in general, IIRC it is now only required to work and Do The Right Thing in the special case of the dlsym function
[20:19:14] <sham1> Hm
[20:19:17] <pert> *not a TR, I can't remember the term I'm trying to think of
[20:19:35] <pert> it was a subsequent revision to POSIX.1-2008
[20:21:24] *** Quits: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net) (Quit: Leaving)
[20:21:37] *** Joins: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net)
[20:23:59] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:25:13] *** Quits: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net) (Client Quit)
[20:25:27] *** Joins: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net)
[20:26:16] *** Quits: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net) (Client Quit)
[20:26:21] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[20:26:28] *** Joins: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net)
[20:26:30] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:27:18] *** Quits: Firebalrog (~paulbarre@ip70-180-171-125.lv.lv.cox.net) (Remote host closed the connection)
[20:27:25] *** Joins: Narrat (~omnius@p200300df5f15684606ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:27:42] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:30:09] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Remote host closed the connection)
[20:30:09] *** Quits: dohtem (uid524096@user/dohtem) (Remote host closed the connection)
[20:30:09] *** Quits: englishm (sid6629@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (Remote host closed the connection)
[20:30:10] *** Quits: sa (sid1055@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: buhman (sid411355@user/buhman) (Remote host closed the connection)
[20:30:10] *** Quits: nohit (sid334887@tinside.irccloud.com) (Remote host closed the connection)
[20:30:45] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[20:31:39] *** Joins: mrig (~mrig@user/mrig)
[20:31:39] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[20:32:11] *** Joins: charadon (~charadon@155.138.164.183)
[20:32:41] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[20:36:02] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 260 seconds)
[20:37:25] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: Satin (uid193953@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: ullbeking (sid5364@user/ullbeking) (Remote host closed the connection)
[20:37:25] *** Quits: psb_ (sid500598@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: illustris (sid211748@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Remote host closed the connection)
[20:39:36] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[20:41:51] *** Quits: ikiryo (sid109660@user/ikiryo) (Remote host closed the connection)
[20:41:51] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Remote host closed the connection)
[20:41:51] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Remote host closed the connection)
[20:41:51] *** Quits: pony (sid524992@smol/hors) (Remote host closed the connection)
[20:41:51] *** Quits: ff9527ff_ (uid527419@uxbridge.irccloud.com) (Remote host closed the connection)
[20:41:51] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (Remote host closed the connection)
[20:41:51] *** Quits: terabit (sid146285@uxbridge.irccloud.com) (Remote host closed the connection)
[20:42:04] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:42:47] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[20:43:02] *** Joins: firebalrog (~firebalro@ip70-180-171-125.lv.lv.cox.net)
[20:43:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[20:43:24] *** Lord_of_Life_ is now known as Lord_of_Life
[20:44:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 265 seconds)
[20:45:18] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:45:59] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:46:08] *** Joins: rgrinberg (~textual@201.192.183.53)
[20:48:23] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 246 seconds)
[20:48:39] *** Quits: schna (sid484866@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[20:48:40] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[20:48:52] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[20:48:52] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:49:20] *** Quits: glenfe (sid231748@user/glenfe) (Ping timeout: 260 seconds)
[20:49:26] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 246 seconds)
[20:49:26] *** Quits: decartes_ (sid240036@helmsley.irccloud.com) (Ping timeout: 246 seconds)
[20:49:57] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 250 seconds)
[20:50:34] *** Quits: subvisor (sid502026@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:51:40] *** Quits: dreamcat4 (uid157427@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[20:51:42] *** Quits: elichai2 (sid212594@hampstead.irccloud.com) (Ping timeout: 250 seconds)
[20:51:53] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 246 seconds)
[20:51:58] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[20:52:26] *** Quits: i336 (~i336@101.174.116.88) (Ping timeout: 260 seconds)
[20:52:47] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[20:53:00] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 250 seconds)
[20:53:04] *** Quits: kevinsjoberg (sid499516@lymington.irccloud.com) (Ping timeout: 260 seconds)
[20:53:04] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[20:53:04] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 260 seconds)
[20:53:25] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 250 seconds)
[20:53:32] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (Ping timeout: 260 seconds)
[20:53:38] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 246 seconds)
[20:53:51] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 250 seconds)
[20:53:52] *** Joins: i336 (~i336@101.174.207.100)
[20:54:17] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 250 seconds)
[20:54:20] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 246 seconds)
[20:54:48] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[20:55:35] *** Joins: bruda (~bruda@64.32.32.1)
[20:57:21] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a058:550b:9e44:5264) (Read error: Connection reset by peer)
[20:58:06] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a058:550b:9e44:5264)
[20:58:53] <ioxzev1z> So if you want a void pointer to any function pointer type you need to use void (*)(void), or will void *p = &f work?
[20:59:13] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[20:59:25] <ioxzev1z> Such that you can then cast p to the correct function pointer type, e.g. void (*fp)(int) = p;
[20:59:27] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[21:00:44] <riv> yes
[21:00:53] <riv> you dont even need &f, &f and f will give the same thing
[21:01:46] *** Joins: Enitin (~Enitin@82.102.22.86)
[21:02:51] <ioxzev1z> riv, right, was using & for clarity
[21:03:23] *** Quits: Narrat (~omnius@p200300df5f15684606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[21:03:48] *** Joins: Narrat (~omnius@p200300df5f15684606ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:03:53] <fizzie> You need a cast for the conversion between `void *` and a pointer-to-function type, and as just discussed, it's not guaranteed to work at all.
[21:04:15] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 250 seconds)
[21:04:31] <fizzie> (Implementations where it does work might of course as an extension also permit it without a cast.)
[21:05:54] <sham1> Although they might rightly give you a warning about it
[21:06:28] <fizzie> You don't need a cast to convert between a pointer to a *pointer* to a function and `void *`, since it's just a pointer to an object type. And that conversion is required to work. But you need a pointer-to-a-function object to point at.
[21:08:30] <fizzie> ,cc int (*fp)(const char *) = puts; void *vp = &fp; int (**fpp)(const char *) = vp; (*fpp)("strictly conforming");
[21:08:33] <candide> fizzie: strictly conforming
[21:09:40] <markand> gcc does not allow casting void * to void (*)(void) even with a cast operator if -pedantic is there
[21:09:59] <fizzie> ,cc void *vp = puts; int (*fp)(const char *) = vp; fp("not strictly conforming but commonly works");
[21:10:02] <candide> fizzie: [warning: ISO C forbids initialization between function pointer and 'void *' [-Wpedantic]  warning: ISO C forbids initialization between function pointer and 'void *' [-Wpedantic]] not strictly conforming but commonly works
[21:10:22] *** Joins: cousteau (~cousteau@user/cousteau)
[21:12:39] *** kenanmarasli_ is now known as kenanmarasli
[21:14:50] *** Quits: i336 (~i336@101.174.207.100) (Ping timeout: 260 seconds)
[21:15:45] *** Joins: monkey_ (~user@190.104.116.153)
[21:16:19] *** Joins: i336 (~i336@101.175.5.60)
[21:16:57] <fizzie> ,cc void (*fp)(void) = (void (*)(void)) puts; ((int (*)(const char *)) fp)("also strictly conforming"); // any pointer-to-function type can act as a generic function pointer, but requires explicit conversions
[21:17:00] <candide> fizzie: also strictly conforming
[21:17:02] <fizzie> ISTR though that `void (*)(void)` does get special treatment from GCC in terms of warnings, even though from the language perspective it's not special at all, and any function pointer type would do.
[21:17:37] *** Joins: metalhead (~user@user/neutral)
[21:18:03] <fizzie> ,cc void (*fp)(void) = (void (*)(void)) puts; // no warning
[21:18:06] <candide> fizzie: no output: fp = 0x4010d0 <puts@plt>
[21:18:32] <fizzie> ,cc void (*fp)() = (void (*)()) puts; // has an optional warning
[21:18:34] <candide> fizzie: [warning: cast between incompatible function types from 'int (*)(const char *)' to 'void (*)()' [-Wcast-function-type]] no output: fp = 0x4010d0 <puts@plt>
[21:19:13] *** Joins: kyle_ (~kyle@ool-457887fa.dyn.optonline.net)
[21:21:44] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[21:22:00] *** Quits: metalhead (~user@user/neutral) (Remote host closed the connection)
[21:22:24] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:58] *** Quits: firebalrog (~firebalro@ip70-180-171-125.lv.lv.cox.net) (Remote host closed the connection)
[21:23:05] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[21:25:47] *** Joins: nostar (~nostar@68.51.221.108)
[21:26:19] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[21:27:55] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[21:29:17] *** Joins: iddev5 (~iddev5@2409:4062:228c:173e:b705:83bc:3d5d:f742)
[21:29:17] *** Quits: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi) (Quit: Akuli)
[21:29:39] *** Joins: Akuli (~Akuli@82-203-160-86.bb.dnainternet.fi)
[21:30:31] *** Joins: aphysically (~aphysical@user/aphysically)
[21:30:42] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[21:31:20] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 260 seconds)
[21:31:45] <aphysically> Does anyone the historical reason why unsigned overflow was decided to be modular instead of UB like signed overflow?
[21:32:14] <aphysically> was some sort of particular bithack usage in mind? I'm not interested in whatever applications it has today, just whatever the historical thinking was at the time
[21:33:04] <aphysically> was this behavior copied from another lang perhaps?
[21:33:28] <kyle_> what is UB?
[21:33:32] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:33:45] <aphysically> undefined
[21:35:08] <kyle_> I know I'm distracting from your original question, but signed overflow is undefined?
[21:35:23] <nomagno> fizzie: you mean this is proepr defined C? `int main(){void (*fp)() = (void(*)()) printf;int a[] = {89, 0};fp(a);}`
[21:35:40] <riv> is there a table that explains all this stuff?
[21:35:47] <riv> which C things are UB, ID etc.
[21:35:58] <kyle_> ^ thatd be useful
[21:36:00] <aphysically> int overflow is UB yeah kyle_
[21:36:06] *** Joins: noarb (~noarb@user/noarb)
[21:36:25] *** Quits: AmR (~AmREiSa@41.36.24.35) (Ping timeout: 256 seconds)
[21:36:55] <kyle_> well here's your answer aphysically https://stackoverflow.com/questions/18195715/why-is-unsigned-integer-overflow-defined-behavior-but-signed-integer-overflow-is
[21:37:00] <pert> nomagno: no, you can convert function pointer types to other function pointer types, but you must not dereference the function pointer type when it doesn't correspond to the "true" type of the function
[21:37:32] <pert> there is an appendix to the ISO C standard that tries to list undefined, unspecified, and implementation-defined behaviors
[21:37:36] <aphysically> thanks I'll read I was having trouble googling since I kept getting explanations of what overflow is instead of what I wanted kyle_ :P
[21:40:00] <kyle_> oddly enough, I was just looking for a table like riv was talking about lol
[21:40:36] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[21:41:30] *** Quits: bruda (~bruda@64.32.32.1) (Quit: System updates and reboot.)
[21:41:53] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:45:28] *** Joins: slidercrank (~slidercra@user/slidercrank)
[21:46:37] *** Quits: mahmutov_ (~mahmutov@37.155.50.64) (Ping timeout: 256 seconds)
[21:49:11] *** Joins: phao (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740)
[21:49:56] *** Joins: Famine_ (~Famine@user/famine)
[21:52:17] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 256 seconds)
[21:52:38] *** Joins: rgrinberg (~textual@201.192.183.53)
[21:53:30] *** Joins: strajder (~strajder@user/strajder)
[21:56:27] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[22:00:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:00:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[22:00:32] <nomagno> kyle_, riv: Take a look at ISO C appendix J
[22:01:01] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 250 seconds)
[22:01:33] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[22:02:03] <nomagno> It covers Undefined Behaviour, Unspecified Behaviour, Implementation-Defined Behavioue, Locale-Specific Behaviour, and Common Extensions to the C language
[22:02:25] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[22:02:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:02:38] <riv> excellent
[22:04:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:07:42] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[22:09:17] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:09:33] *** Quits: iddev5 (~iddev5@2409:4062:228c:173e:b705:83bc:3d5d:f742) (Quit: iddev5)
[22:10:36] *** Joins: omegatron (~some@p5484903d.dip0.t-ipconnect.de)
[22:11:13] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:39] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[22:11:51] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a41f:3a8:4e54:50cd)
[22:11:52] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a41f:3a8:4e54:50cd) (Changing host)
[22:11:52] *** Joins: skapata (~Skapata@user/skapata)
[22:12:07] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:12:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[22:12:59] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[22:13:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[22:14:34] *** Joins: ullbeking (sid5364@user/ullbeking)
[22:14:58] *** Joins: rgrinberg (~textual@201.192.183.53)
[22:15:00] *** Lord_of_Life_ is now known as Lord_of_Life
[22:15:01] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2c81-f210-c7c4-b53c.res6.spectrum.com)
[22:15:30] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:17:36] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[22:19:24] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[22:21:04] *** Joins: ikiryo (sid109660@user/ikiryo)
[22:21:06] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[22:21:22] *** Joins: mahmutov_ (~mahmutov@176.30.186.117)
[22:22:04] *** Quits: Wulf (~Wulf@user/wulf) (Quit: leaving)
[22:22:51] <twkm> you cannot list all undefined behavior, annex j is only some.
[22:24:15] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[22:25:19] *** Joins: pony (sid524992@smol/hors)
[22:25:25] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[22:25:32] <twkm> additionally, some behaviors that aren't defined by c are defined by something else, so still ub from the perspective of c but defined from that other perspective.  e.g., posix defines things in a printf format string that are undefined in c.
[22:25:54] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[22:26:45] *** Joins: terabit (sid146285@id-146285.uxbridge.irccloud.com)
[22:26:49] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[22:26:54] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[22:27:14] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[22:27:39] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[22:27:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[22:28:01] *** Joins: celphi (sid97751@user/celphi)
[22:28:22] *** Joins: bjs (sid190364@user/bjs)
[22:28:44] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[22:28:58] *** Joins: glenfe (sid231748@user/glenfe)
[22:29:11] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[22:29:14] *** Joins: psb_ (sid500598@id-500598.ilkley.irccloud.com)
[22:29:16] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[22:29:24] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[22:30:22] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[22:30:51] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[22:31:33] *** Joins: ff9527ff_ (uid527419@id-527419.uxbridge.irccloud.com)
[22:31:42] <fizzie> nomagno: No, that's very much not. Any function pointer type can *hold* a pointer to any function, but you need to convert it to the right type (or a right enough type; it's a little subtle) before calling the function.
[22:31:52] *** Joins: Wulf (~Wulf@user/wulf)
[22:32:20] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[22:32:53] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[22:33:10] *** Joins: kaizen (sid501599@id-501599.helmsley.irccloud.com)
[22:33:46] *** Joins: BlueShark (sid10311@user/blueshark)
[22:34:20] <fizzie> (Like the `puts` example, which converted the `void (*)(void)` into `int (*)(const char *)` before the call.)
[22:35:04] *** Joins: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com)
[22:36:31] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[22:36:32] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[22:36:37] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[22:36:46] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[22:36:50] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[22:36:57] *** Joins: tpefreedom (~tpefreedo@user/tpefreedom)
[22:37:14] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[22:37:37] <fizzie> (The "right enough" there was alluding to the rules of C11 6.5.2.2p6-9 and 6.7.6.3p15, which are too involved to summarize in a single IRC message.)
[22:37:41] *** Joins: Bou_ (sid274843@user/bou)
[22:38:28] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[22:39:08] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Quit: Leaving)
[22:39:16] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[22:39:34] *** Joins: computerquip (sid423484@user/computerquip)
[22:39:48] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[22:40:14] *** Quits: Bou_ (sid274843@user/bou) (Killed (NickServ (GHOST command used by Bou!~boudewijn@user/bou)))
[22:40:25] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[22:40:28] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[22:40:37] *** Joins: subvisor (sid502026@id-502026.helmsley.irccloud.com)
[22:40:48] *** Joins: buhman (sid411355@user/buhman)
[22:41:13] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[22:41:34] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[22:42:30] *** Joins: TallonRain (sid214799@user/tallonrain)
[22:42:35] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:42:39] <ozzz> Hello!, what is direct replacement of gettimeofday in Windws?
[22:42:52] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[22:43:04] <jezebel> GetLocalTime() or GetSystemTime() iirc
[22:43:16] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[22:43:49] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[22:43:53] *** Joins: monkey_ (~user@190.104.116.153)
[22:44:34] <ozzz> jezebel: thnx, have they tv_usec?
[22:44:37] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[22:44:43] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:11] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:45:33] <jezebel> looks like it if u look inside SYSTEMTIME
[22:46:14] *** Joins: dohtem (uid524096@user/dohtem)
[22:46:21] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 245 seconds)
[22:46:38] <ozzz> thnx
[22:47:04] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:08] *** Parts: tpefreedom (~tpefreedo@user/tpefreedom) (Leaving)
[22:49:16] *** Joins: damxsa (~damx@2001:16a2:ccb7:600:d7e:3b00:4a2c:ff3c)
[22:50:06] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:52:50] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 260 seconds)
[22:54:11] *** Joins: phao_ (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740)
[22:54:48] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[22:55:02] *** Quits: phao (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740) (Remote host closed the connection)
[22:56:31] <nomagno> fizzie: hmmm, so if I read the standard right I could assign a function pointer to char (char) to a variable of type int (char), for intance
[22:59:22] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[23:00:17] <fizzie> Yes. With a cast; there's no implicit conversion. And you need to convert it back to `char (*)(char)` to call the function. Assuming that's the type of the function it's actually pointing at.
[23:00:32] *** Quits: damxsa (~damx@2001:16a2:ccb7:600:d7e:3b00:4a2c:ff3c) (Ping timeout: 240 seconds)
[23:01:31] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:01:39] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[23:04:30] *** Quits: Falconer (~ronnyma@227.84-48-191.nextgentel.com) (Read error: Connection reset by peer)
[23:04:38] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9)
[23:04:40] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[23:05:19] *** Quits: alch (~alch@151.82.139.166) (Read error: Connection reset by peer)
[23:05:42] *** Quits: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com) (Remote host closed the connection)
[23:06:59] <floatcomplex> wait what
[23:07:22] <floatcomplex> i thought function pointers and other pointers were not interchangeable outside of posix
[23:09:01] <fizzie> Yes, but this was about two function pointer types.
[23:09:34] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:100e:941d:330:91e9) (Ping timeout: 260 seconds)
[23:09:38] *** Joins: alch (~alch@bo-18-128-68.service.infuturo.it)
[23:10:11] <fizzie> (I interpreted "variable of type int (char)" as "variable of type pointer to int (char)", also known as `int (*)(char)`, because there's no such thing as a variable of function type.)
[23:10:18] *** Joins: Falconer (~ronnyma@227.84-48-191.nextgentel.com)
[23:12:16] <nomagno> fizzie: I took a bit of a terminology shortcut there, sorry. Yes, your assumption was correct
[23:13:04] *** Joins: masterbuilder (~user@user/masterbuilder)
[23:17:16] <floatcomplex> a while back we found a gcc bug where function pointers to never-called functions whose contents were __builtin_unreachable() were incorrectly being coalesced into the same value
[23:18:43] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0) (Quit: Leaving)
[23:21:18] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[23:27:17] <fizzie> IIRC there's a flag for GCC that does that deliberately.
[23:27:44] <fizzie> Right, `-fmerge-all-constants`. "In addition to -fmerge-constants this considers e.g. even constant initialized arrays or initialized constant variables with integral or floating-point types. Languages like C or C++ require each variable, including multiple instances of the same variable in recursive calls, to have distinct locations, so using this option results in non-conforming behavior."
[23:27:52] <fizzie> Well, it's about constants, not functions, but anyway.
[23:28:24] <floatcomplex> gross
[23:31:27] <fizzie> Const-qualified compound literals are explicitly permitted to not necessarily be distinct objects (C11 6.5.2.5p7), but at least based on some empirical GCC/Clang testing they don't actually seem to get merged. (String literals do though.)
[23:33:58] *** Quits: phao_ (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740) (Remote host closed the connection)
[23:34:15] *** Joins: phao (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740)
[23:34:23] *** Quits: phao (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740) (Read error: Connection reset by peer)
[23:34:33] *** Joins: phao (~phao@2804:d45:8e7a:de00:3df5:406b:6e35:d740)
[23:35:24] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892)
[23:35:43] <floatcomplex> if you can take their address, they should be distinct, right?
[23:35:59] <floatcomplex> const or not
[23:36:14] *** Parts: pony (sid524992@smol/hors) ()
[23:36:16] *** Joins: arinov (~arinov@213.194.126.155)
[23:38:59] <fizzie> I guess you could argue that logically, but that's explicitly what the paragraph allows not to be the case.
[23:39:16] <fizzie> ("String literals, and compound literals with const-qualified types, need not designate distinct objects.")
[23:39:56] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:39:59] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[23:40:04] <fizzie> Merging string literals, even partially, has pretty long history. For compound literals it maybe feels a little more weird, even though it shouldn't really need to.
[23:40:47] <fizzie> ,cc -O1 char *p = "hello world", *q = "world"; printf("%d", q == p + 6);
[23:40:49] <candide> fizzie: 1
[23:41:35] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[23:42:02] <gproto10> How can I find definitions of macros in C? I need to understand how library functions works on lower level?
[23:42:18] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[23:42:38] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 268 seconds)
[23:44:00] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[23:45:11] <sham1> You don't
[23:45:47] <nomagno> gproto10: to find definitions of macros, you just open up the headers and read the contents. It seems like an excuse to not code portably tough.
[23:46:05] <nomagno> use ifdefs and simple checks
[23:46:18] <fizzie> Not sure how those two questions are related to each other. But reasonable ways of locating specific macro definitions (beyond just reading headers) include ctags and such, asking a preprocessor to dump macros (and searching in the result), or asking a debugger to show one.
[23:47:02] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[23:51:42] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[23:53:21] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[23:53:52] *** Joins: ferdna (~ferdna@user/ferdna)
[23:55:15] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[23:57:24] *** Quits: i336 (~i336@101.175.5.60) (Ping timeout: 260 seconds)
[23:57:49] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Client Quit)
[23:58:04] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[23:59:04] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[23:59:44] *** Joins: Dreg (~Dreg@fr33project.org)
[23:59:44] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[23:59:54] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 268 seconds)
