[00:01:34] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[00:01:40] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:02:14] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[00:04:24] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[00:05:09] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[00:06:19] *** Joins: xkuru (~xkuru@user/xkuru)
[00:11:20] *** Joins: pavonia (~user@user/siracusa)
[00:12:08] <zzz> i don't know
[00:12:11] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:12:32] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 240 seconds)
[00:17:24] *** Quits: mmhat (~mmh@55d48476.access.ecotel.net) (Ping timeout: 250 seconds)
[00:18:14] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:18:43] *** Joins: lispy (~lispy4@84.69.59.93)
[00:19:13] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[00:19:41] *** Joins: ksqsf (~user@222.195.66.54)
[00:20:58] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[00:21:04] *** Quits: lispy (~lispy4@84.69.59.93) (Client Quit)
[00:21:57] *** Joins: lispy (~lispy4@84.69.59.93)
[00:22:00] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[00:22:59] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[00:24:20] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 250 seconds)
[00:31:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3) (Remote host closed the connection)
[00:34:18] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 250 seconds)
[00:35:17] *** Joins: mmhat (~mmh@55d4124f.access.ecotel.net)
[00:35:53] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:37:34] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[00:38:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3)
[00:39:24] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[00:39:49] *** Quits: _ht (~quassel@2a02:a468:b619:1:7ee4:4b51:626d:e55) (Remote host closed the connection)
[00:41:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:43:39] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:45:14] *** Joins: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d)
[00:49:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:50:58] <[exa]> zzz: you may have a look at the optimized code dump
[00:51:03] <[exa]> to be sure :D
[00:51:52] <random-jellyfish> I want to create a list of strings this way, read the first string from IO and expect a number n, then read n more string from IO and append them to the list
[00:52:16] <random-jellyfish> can I do that in a single expression?
[00:52:22] <[exa]> likely
[00:52:34] <[exa]> (spoiler: whole main function is a single expression :D )
[00:52:50] <random-jellyfish> yes, I meant in a single line of code
[00:53:00] <random-jellyfish> without many <-
[00:53:12] <[exa]> other than that I guess you can just combine readLn, >>=, replicateN, and something extra to get the job done
[00:53:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:53:27] <tomsmeding> @undo do { x <- f 1 ; y <- g 2; return x + y }
[00:53:27] <lambdabot> f 1 >>= \ x -> g 2 >>= \ y -> return x + y
[00:53:56] <[exa]> random-jellyfish: btw if you have a piece of code with <-'s we can work on it to improve it in steps
[00:54:45] <random-jellyfish> I don't have any code yet
[00:54:57] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Ping timeout: 240 seconds)
[00:55:38] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[00:56:00] <random-jellyfish> let's say you want to write an IO function that receives an Ethernet frame from a connection, somewhere in the Ethernet frame there is a field containing the length of the data contained by the frame
[00:56:10] <random-jellyfish> how would you write such a function?
[00:56:35] <random-jellyfish> first you'd have to read that length field, then fetch the rest of the data from IO
[00:57:21] <random-jellyfish> I want this to be encoded as a lazy expression
[00:58:42] <c_wraith> lazy probably doesn't mean anything useful in this context
[00:59:05] *** Quits: akegalj (~akegalj@141-136-204-193.dsl.iskon.hr) (Quit: leaving)
[00:59:44] <random-jellyfish> I would like to first code it as a lazy expression using algebraic data types, then run it through an function that translates it to IO actions
[01:00:18] <c_wraith> what does laziness add?
[01:00:46] <c_wraith> like, I'm all for laziness.  But I don't think you mean what Haskell calls laziness.
[01:02:02] <random-jellyfish> what I actually want to do is to connect haskell to an HDL simulator, and from Haskell I want to send stimulus and monitor data traffic from signals
[01:02:28] <random-jellyfish> the problem is that HDL simulators can run multiple "threads" in a simulated way
[01:02:50] <random-jellyfish> they're kind of like green threads, they use coroutines behind the scenes
[01:02:58] <random-jellyfish> I can't do that on the haskell side
[01:03:04] <c_wraith> why not?
[01:03:09] <random-jellyfish> so I have to model them
[01:03:24] <random-jellyfish> and send them to the other side where they can be executed by the HDL simulator
[01:03:32] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01) (Ping timeout: 240 seconds)
[01:04:35] <random-jellyfish> for example: Wait (10,Ns) :=: (Wait (5,Ns) :+: Write 1 $ Signal 6)
[01:04:49] <random-jellyfish> this would tell the HDL simulator to spawn 2 threads
[01:04:51] <c_wraith> Like, I'm trying to understand the problem...  You want to write code in a concurrent pattern that handles different portions of input from the simulator in each thread?
[01:05:04] <c_wraith> why not... use threads?
[01:05:09] <random-jellyfish> in one of them it just waits 10 ns, in the other one waits 5 ns then writes to a signal
[01:05:34] <random-jellyfish> because HDL threads are not the same as Haskell threads
[01:05:49] <random-jellyfish> HDL simulators have their own kernel with a thread scheduler built in
[01:06:02] <random-jellyfish> I'd have to replicate that on the haskell side and sync them
[01:06:03] <c_wraith> I still don't see where the problem is
[01:06:10] <c_wraith> why would you need to do that?
[01:07:02] <random-jellyfish> what kind of threads would you suggest I use on the haskell side?
[01:07:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:08:14] <c_wraith> well, the first thing is to just try using forkIO.
[01:08:23] <c_wraith> If it doesn't work, then you know more about why
[01:09:07] <c_wraith> If you'd rather just write an event loop that happens to appear to use concurrent access, you can use a free monad, I suppose.
[01:09:09] <random-jellyfish> it won't work, the threads have to be spawned on the HDL side
[01:09:18] <c_wraith> What?
[01:09:24] <c_wraith> How is that relevant to *anything*?
[01:10:05] <c_wraith> You're mixing what your code needs to do with how the simulator works.
[01:10:15] <c_wraith> separate them. There is no connection.
[01:10:23] <c_wraith> What does *your code* need to do?
[01:10:31] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[01:10:52] <random-jellyfish> I plan to use zeroMQ to "link" haskell and the HDL simulator
[01:11:17] <zzz> main = go 1 where go n = do ... ; go (n - 1)
[01:11:49] <davean> random-jellyfish: you could call Haskell functions from the HDL side too of course
[01:12:34] <c_wraith> Does your code need to model synchronous interactions with the hardware? In that case, you really need to run inside the HDL simulator
[01:12:53] <c_wraith> Or alternatively, run the HDL simulator as a library
[01:13:04] <random-jellyfish> I want to write the testbench in haskell
[01:13:21] <random-jellyfish> so the haskell code should be the master and the simulator side the slave
[01:13:30] *** Joins: ksqsf (~user@222.195.66.54)
[01:13:35] <random-jellyfish> not sure if it's possible
[01:13:43] <c_wraith> that sounds a lot like you need to handle everything synchronously
[01:14:17] <zzz> would there be any difference between having [] a and NonEmpty a like we have now and just having NonEmpty and Maybe NonEmpty?
[01:14:24] <c_wraith> ie, you need exactly control of the simulated time between signals and stimuli?
[01:14:48] <zzz> *NonEmpty a and Maybe (NonEmpty a)
[01:15:24] <c_wraith> zzz: well, [] and NonEmpty are both instances of Functor.  Do you really want to reach for Compose Maybe NonEmpty every time you want the equivalent of fmap on lists?
[01:15:43] <d34df00d> zzz: I guess you can build an isomoprhism between the two, so there isn't any theoretical difference.
[01:15:51] <d34df00d> But there surely is practical/convenience/usability difference.
[01:15:58] <zzz> i see
[01:16:20] <c_wraith> it's easy to have isomorphism between the shapes.  It's a lot harder for that isomorphism to preserve instances
[01:16:24] <random-jellyfish> a testbench should be able to ask the simulator to do these things: drive bits to signals, read bits from signals, consume simulation time(e.g. wait 5ns), wait for the edge of a signal(e.g. wait rise of clk)
[01:17:13] <d34df00d> c_wraith: why? Modulo Haskell expressiveness and the fact that you cannot easily write `instance Functor (Maybe . NonEmtpy)`
[01:17:20] <random-jellyfish> I was hoping to able to model these actions as primitives using an alebgraic data types and combine them with 2 operators: a :+:b and a:=: b
[01:17:32] <c_wraith> d34df00d: the instances that currently exist.
[01:17:39] <d34df00d> And modulo that too.
[01:17:44] <random-jellyfish> :+: runs two actions one after the other, :=: runs two actions in parallel
[01:17:48] <c_wraith> you mean modulo everything? :P
[01:17:56] <d34df00d> Hence the difference between "theoretically" and "practically".
[01:18:09] <random-jellyfish> so I would have a tree of these primitives combined with :+: and :
[01:18:13] <d34df00d> Nah, I mean modulo the disdain towards overlapping instances in this case.
[01:18:27] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 256 seconds)
[01:18:38] <random-jellyfish> so I would have a tree of these primitives combined with :+: and :=:, translate it to json, send the json to the hdl simulator, decode it and run it there
[01:18:51] <c_wraith> that's not just a practical difference. Data types having the same shape is only an isomorphism in code that examines them structurally. But Haskell provides theoretical mechanisms that don't map to structural examination.
[01:19:45] <c_wraith> random-jellyfish: ok, so... Why not just do that? Why involve IO?
[01:19:45] <d34df00d> Anyway, _practically_, if we're talking about instances, can't we just `newtype MaybeNonEmtpy a = MaybeNonEmpty (Maybe (NonEmpty a))`?
[01:19:52] <zzz> c_wraith: i think i get what you mean but could yu prvide a simple example?
[01:19:56] <d34df00d> Sure that's ugly as hell.
[01:21:25] <random-jellyfish> c_wraith there is one problem my solution won't solve: the situation where I have to read a number from one signal and then wait that number of units of time
[01:21:33] <d34df00d> zzz: not sure if c_wraith meant exactly that, but if you have `Maybe (NonEmtpy a)`, then you could do `fmap length`, and get `Maybe Int`. How would you translate that to plain old?
[01:21:37] <d34df00d> plain old lists that is
[01:21:45] <random-jellyfish> the output of one operation needs to be passed as input to another one
[01:22:09] <c_wraith> random-jellyfish: so how does your json handle that?
[01:22:28] <random-jellyfish> c_wraith that's where I got stuck
[01:22:39] <random-jellyfish> I don't even know how to model that in haskell
[01:22:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:23:36] <c_wraith> you have a bigger problem
[01:23:58] <c_wraith> you're creating a programming language to target a programming language that doesn't exist to target an interpreter that doesn't exist.
[01:24:08] <c_wraith> There are too many steps
[01:24:28] <c_wraith> and too many unknowns
[01:25:00] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 250 seconds)
[01:25:24] <random-jellyfish> it's a thought experiment, the first thing I'd like to find out is if it's even possible
[01:26:27] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[01:26:34] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[01:27:54] <c_wraith> Is it possible?  Sure.  But the key phrase is "programming language"
[01:28:16] <c_wraith> You're proposing creating something that needs to be a programming language as an intermediate exchange format.
[01:28:58] <c_wraith> that suggests a lot of complexity. Maybe it's not necessary.
[01:29:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:30:03] <c_wraith> Can the simulator run synchronously with an external program?  Can it be run as a library?  Can you use Haskell code as a library from the simulator?
[01:30:17] <c_wraith> any of those would allow getting rid of the intermediate representation
[01:30:52] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[01:30:53] <random-jellyfish> the haskell code and the HDL simulator will run as separate processes, and they will communicate with each other through a ZMQ socket
[01:31:13] <c_wraith> that's a lot of commandments from on high
[01:31:36] <random-jellyfish> on the HDL side I will have a whil(1) loop that will fetch json encoded commands from haskell and run them
[01:32:02] <random-jellyfish> on the haskell side I generate those commands, encode them to json and send them
[01:32:37] <random-jellyfish> I like the fact that haskell can model infinite data structures and combine them
[01:32:43] <random-jellyfish> like infinite lists, infinite trees
[01:32:58] <random-jellyfish> it can run functions on them to change them, etc.
[01:33:02] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:33:25] <lispy> I've learned a bit about several languages, but have yet to start with Haskell. 
[01:33:58] <random-jellyfish> I was hoping to be able to create some infinite stimulus in haskell then break it in chunks and send it to the HDL simulator to execute
[01:34:16] <random-jellyfish> but I also need to be able to read from signals, not just write to them
[01:34:22] <c_wraith> random-jellyfish: does that mean the simulator has to run synchronously with the IO from the queue?  If so...  there's a way to force it to run synchronously with an external program
[01:34:53] <random-jellyfish> yes, it should run in sync with the IO from the queue
[01:35:10] <random-jellyfish> but that while(true) loop will run inside an HDL thread
[01:35:37] <c_wraith> so if the queue ends up blocking for 100ms for some reason, the simulator will wait for it before running the next cycle?
[01:35:40] <random-jellyfish> and when that thread makes a context switch while running a command, the scheduler will let other HDL threads to advance as well
[01:36:59] <random-jellyfish> yes, waiting 100ms will give control to the HDL thread scheduler, which will resume other threads, and it will also update the simulation time by adding that 100ms to it
[01:37:00] *** Joins: ksqsf (~user@2001:da8:d800:611:5f:3d9d:579f:683)
[01:37:09] <random-jellyfish> it's simulated time not wall clock time
[01:37:35] <random-jellyfish> waiting time just increments a counter
[01:37:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:38:11] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[01:38:18] *** Quits: jrm (~jrm@156.34.173.250) (Read error: Connection reset by peer)
[01:38:27] *** Joins: jrm2 (~jrm@156.34.173.250)
[01:39:06] <c_wraith> Ok, I'm back to not understanding the problem. You're just writing functions of the form InternalState -> SignalOutputFromSimulator -> (SignalInputForSimulator, InternalState)
[01:39:18] *** jrm2 is now known as jrm
[01:39:57] <c_wraith> You can provide a lot of extra tools for creating those functions
[01:40:10] <c_wraith> But that's all you need as the interface
[01:41:19] <random-jellyfish> simulate $ map (WriteSignal "clk") cycle [0,1]
[01:41:21] <c_wraith> Like, if you want to do some stuff with free monads for thinking about it in terms of multiple processes? Great. But get that part working first, and remember everything more complex is built on top of that.
[01:41:28] *** Quits: ksqsf (~user@2001:da8:d800:611:5f:3d9d:579f:683) (Ping timeout: 250 seconds)
[01:41:44] <random-jellyfish> simulate $ map (WriteSignal "clk" :+: WaitTime (5,Ns) ) cycle [0,1]
[01:41:55] <random-jellyfish> this would generate a clock signal
[01:42:07] <random-jellyfish> 010101
[01:42:15] *** Joins: Pickchea (~private@user/pickchea)
[01:42:15] <random-jellyfish> with 5 ns between edges
[01:42:20] <zzz> d34df00d: `length :: NonEmpty -> Nat` where `data Nat = One | Succ Nat`. According to this methodology you could have Nat and Nat0 (which wuold be Maybe Nat :p) 
[01:42:28] <random-jellyfish> that's how I imagine I would do it
[01:42:30] <c_wraith> sure, great, whatever. Figure out how to translate that into the basic required IO type
[01:42:40] <c_wraith> err.  interface type.  No IO involved
[01:42:46] *** Joins: titusg (~user@2a00:23c6:ab8a:3c00:4d5b:fb1b:c853:9282)
[01:43:26] <c_wraith> Or you could use like...  a Mealy machine, if you don't want to have to make the internal state concrete
[01:43:43] <random-jellyfish> it will have to reach IO since I use ZMQ to communicate to the HDL side
[01:43:48] <c_wraith> irrelevant
[01:43:55] <c_wraith> You're running a pure function to calculate what to send
[01:43:58] <titusg> I'm getting an error claiming that Data.Text doesn't export elem...?
[01:44:06] <c_wraith> that's the interesting part.  The IO is just a side detail
[01:44:12] <random-jellyfish> yes, true
[01:44:13] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[01:44:46] <c_wraith> titusg: any chance the import of Data.Text has an import list that doesn't include elem?
[01:45:11] <random-jellyfish> and how to I run a pure function that calculates this: read from a signal a value n, wait n nanoseconds or any time unit ?
[01:45:35] <c_wraith> random-jellyfish: that's where the state portion I was talking about comes in.  It needs to store that information
[01:45:46] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:46:03] <titusg> c_wraith: nope, whole thing is imported (qualified)
[01:47:41] <c_wraith> titusg: next thing to check - what version of text is it using?
[01:48:51] <c_wraith> titusg: for instance, it looks like 1.2.0.0 doesn't define the function you want: https://hackage.haskell.org/package/text-1.2.0.0/docs/doc-index-E.html
[01:49:11] <c_wraith> titusg: My best remaining guess is that it's a version thing.
[01:50:03] <titusg> c_wraith: hmm, how do I check that? I'm using cabal and have no version constraints on text in the cabal file 
[01:50:58] <titusg> and it's a project I just started today so it seems odd
[01:51:46] <titusg> c_wraith: ah, so I should set the version of text that I want I guess
[01:51:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[01:52:28] <c_wraith> wow, I don't actually see a way to do that other than using cabal freeze and looking at the lock file it generates
[01:52:54] <c_wraith> ls
[01:52:57] <c_wraith> err, sorry
[01:53:32] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[01:53:45] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:54:15] <geekosaur> there should be a plan.json file with that information
[01:54:33] <geekosaur> in dist-newstyle/cache
[01:54:57] <c_wraith> yikes, that's not close to human-readable
[01:54:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[01:55:03] <geekosaur> you'll want something like jq to make its contents comprehensible
[01:56:41] <c_wraith> I think it's easier to use cabal freeze and delete the freeze file afterwards. :P
[01:56:45] <titusg> geekosaur: thx
[01:56:55] <titusg> c_wraith: I'm using 1.2.4.1 which according to the docs does have elem
[01:57:25] <c_wraith> I'm not seeing that....  https://hackage.haskell.org/package/text-1.2.4.1/docs/doc-index-E.html
[01:57:51] <geekosaur> uh? elem's right at the top
[01:58:04] <c_wraith> But not exported by Data.Text
[01:58:18] <titusg> oh yeah
[01:58:46] <c_wraith> I think you need 1.2.5.0 or 2.0.0.0
[01:58:57] <geekosaur> yeh
[01:58:58] <c_wraith> err. I guess the latter is just 2.0
[02:00:15] <c_wraith> random-jellyfish: So what you really want to be doing, I think, is figuring out how to convert a DSL to a representation that looks like a Mealy machine.
[02:00:43] <c_wraith> random-jellyfish: and you can fortunately build your DSL such that it contains enough information to do that conversion
[02:01:41] <titusg> c_wraith geekosaur : that works, thx a lot 
[02:03:36] *** Joins: ksqsf (~user@2001:da8:d800:611:2d36:20e:dcdb:8588)
[02:03:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:03:43] *** Quits: titusg (~user@2a00:23c6:ab8a:3c00:4d5b:fb1b:c853:9282) (Quit: ERC (IRC client for Emacs 26.3))
[02:04:08] <c_wraith> random-jellyfish: for reference, a Mealy machine looks like newtype Mealy in out = Mealy (in -> (out, Mealy in out)).  That representation lets you implicitly use whatever state you need in the closure returned for handling the next step.
[02:04:15] *** Joins: tavares (~tavares@187.19.212.26)
[02:04:21] *** Quits: tavares (~tavares@187.19.212.26) (Changing host)
[02:04:21] *** Joins: tavares (~tavares@user/tavares)
[02:04:31] <EvanR> so a synchronous time simulation
[02:04:41] <c_wraith> yes
[02:06:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:07:16] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-4062-cd4e-8589-7aec.emome-ip6.hinet.net)
[02:07:54] *** Quits: ksqsf (~user@2001:da8:d800:611:2d36:20e:dcdb:8588) (Ping timeout: 250 seconds)
[02:08:06] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[02:08:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[02:09:43] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[02:11:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:11:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:11:40] *** Joins: wroathe (~wroathe@user/wroathe)
[02:14:48] <EvanR> Mealy is like a resumable scanl
[02:15:21] *** Joins: cyphase (~cyphase@user/cyphase)
[02:16:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:16:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[02:19:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[02:19:11] <EvanR> wikipedia files mealy machines and moore machines under finite-state transducers
[02:19:38] <EvanR> I dunno how important the finite part is xD
[02:20:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:20:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:21:29] *** Joins: Guest|47 (~Guest|47@165.91.13.111)
[02:21:42] *** Quits: Guest|47 (~Guest|47@165.91.13.111) (Client Quit)
[02:22:21] <random-jellyfish> c_wraith thanks, I'll look into that
[02:22:47] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:27:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:28:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3) (Remote host closed the connection)
[02:32:02] *** Quits: Constraintegic (~thomasbul@2001:a61:1307:2b01:3d2f:ad9e:d1f8:1d5d) (Ping timeout: 240 seconds)
[02:34:37] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: Textual IRC Client: www.textualapp.com)
[02:36:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[02:47:12] <random-jellyfish> shouldn't Mealy be something like newtype Mealy in out = Mealy (in -> Mealy in out -> (out, Mealt in out)) ?
[02:47:32] <random-jellyfish> since output is determined by current state and input
[02:48:10] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:48:31] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[02:52:53] *** Quits: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d) (Ping timeout: 268 seconds)
[02:56:29] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[02:57:46] *** Joins: ksqsf (~user@2001:da8:d800:611:88d2:4501:124e:aebc)
[02:59:08] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[02:59:36] <mcgroin> I find this naming extremely confusing: newtype State s a = State s -> (a, s)
[02:59:51] <mcgroin> This is a state transition action
[03:00:13] <mcgroin> why not name it something like StateTransition ?
[03:01:31] <mcgroin> State is static, and yet it contains a transition action... Similar naming abound in different libraries
[03:01:51] <sclv> in this case its because it models the effect of having state
[03:02:04] *** Quits: ksqsf (~user@2001:da8:d800:611:88d2:4501:124e:aebc) (Ping timeout: 250 seconds)
[03:02:24] <sclv> so `State s a` is "an a in the context of a State s"
[03:02:40] *** Joins: Akiva (~Akiva@user/Akiva)
[03:05:18] <monochrom> "StateTransitionFunction" is too long
[03:05:45] *** Joins: notzmv (~zmv@user/notzmv)
[03:06:15] <mcgroin> monochrom: It is but these are things that really frustrates beginners I feel
[03:06:29] <geekosaur> only if they come from Java
[03:06:40] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[03:07:01] <sclv> i have heard many frustrations of beginners and, some tooling issues aside, they are far more diverse than you would imagine
[03:07:54] <mcgroin> geekosaur: so you think it's totally appropriate with this naming? I'm trying to bend my mind to look at it from various angles to make sense
[03:08:10] <monochrom> I am unsympathetic because no one complained that "class Person { String name; int age; }" is confusing. And it is. Along the same logic as yours.
[03:08:27] <geekosaur> I agree with sclv. <sclv> so `State s a` is "an a in the context of a State s"
[03:08:36] <sclv> i gave the example it makes sense from: the angle in which you see "having a State of type s" is an _effect_
[03:08:38] <monochrom> A record of name and age is clearly not a person.
[03:08:53] <geekosaur> newcomers don't have problems with that name, they have problems with the underlying concept
[03:08:56] <monochrom> A "non-confusing" name would be RecordOfPersonNameAndAge but who does that.
[03:09:00] <sclv> monochrom: full rights for records of name and age!
[03:09:09] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[03:09:12] <sclv> i'm taking this one to the supreme court
[03:09:29] <sclv> if a corporation can be a person, well
[03:09:57] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:10:17] <monochrom> Very early on everyone catches on the idea that you code up a model, you never have the real thing. And everyone has moved on.
[03:10:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:10:57] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:11:56] <mcgroin> so no one thinks StateTransition is better... I have to rethink the whole thing again
[03:12:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:12:41] <mcgroin> because that s in State s a is the actual state
[03:12:45] <monochrom> You get the OOP people to s/Person/RecordOfPersonNameAndAge/.  After that, we can talk again.
[03:13:01] <sclv> if you're not comfortable with "the statement 'state is an effect'" you should start there
[03:13:16] <sclv> and consider also if "Reader r" and "Writer w" make more sense to you or less sense or the same sense
[03:13:20] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[03:13:53] <mcgroin> sclv: i can get comfortable with redefining state and bend my mind to fit its new definition as an effect with time
[03:14:36] <sclv> i mean that the names make sense only if you start with "these are names of monads which model effects" as _why_ they should make sense
[03:14:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:15:00] <sclv> like the name is giving some abstract characterization of some concrete data
[03:15:12] *** Joins: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz)
[03:15:36] <sclv> but the nature of the abstraction in question is important to understand why that name
[03:15:53] <mcgroin> among all the features of Haskell, i find the way how it makes abstractions the most elusive
[03:16:51] <geekosaur> haskell abstracts things nothing else can. naming won't help you understand them
[03:17:14] <geekosaur> your brain needs hooks to hang the names on, and only experience will get you those hooks
[03:17:45] <mcgroin> other languages make abstractions too of course. but some how haskell abstract data types, which is really hard to get and frankly doesn't seem to be relevant in real world programming. I wonder how many programmers can make abstractions like Monad 
[03:19:04] <mcgroin> The M thing is hard to get when someone already lay it out for you, not to mention to make new abstractions like Comonad etc...
[03:19:50] <sclv> take it slow, only a few need to be learned at a time
[03:19:59] <sclv> and each one is really learning a whole new way to look at something familiar
[03:23:19] <c_wraith> random-jellyfish: the state is implicit in the function arrows in the definition of Mealy - the functions can close over whatever state they need. that's why the function returns a new Mealy machine - so it can close over new state.
[03:24:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[03:24:31] <mcgroin> sclv: Reader and Writer are more acceptable because they do imply an action in the names: the verbs read and write
[03:26:48] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[03:28:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3)
[03:28:50] *** Parts: edrx (~Eduardo@2804:56c:d2f8:7700:812f:d393:2bf3:f7a6) (Killed buffer)
[03:29:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:29:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:32:22] *** Quits: max22- (~maxime@2a01cb0883359800e05a099bb642ef66.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:32:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3) (Ping timeout: 240 seconds)
[03:40:17] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:40:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[03:42:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 240 seconds)
[03:45:59] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:46:16] *** Joins: alx741 (~alx741@157.100.93.160)
[03:54:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:54:17] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[04:01:08] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[04:03:48] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:07:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:07:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:07:21] *** Joins: wroathe (~wroathe@user/wroathe)
[04:07:30] *** Quits: vglfr (~vglfr@88.155.24.103) (Ping timeout: 268 seconds)
[04:08:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3)
[04:11:59] *** Joins: alx741 (~alx741@157.100.93.160)
[04:13:39] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[04:15:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:15:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:16:28] *** Joins: alx741 (~alx741@157.100.93.160)
[04:19:23] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[04:19:32] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[04:20:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[04:20:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:27:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[04:28:51] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 256 seconds)
[04:30:35] *** Joins: ystael (~ystael@user/ystael)
[04:31:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:554b:fd6:4afe:d593) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[04:33:04] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[04:33:57] <sshine> would it be better if it were StateKeeper?
[04:37:14] *** Joins: jespada (~jespada@87.74.36.188)
[04:37:41] *** Joins: alx741 (~alx741@157.100.93.160)
[04:37:50] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[04:38:16] <dsal> MuTator
[04:38:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:39:28] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[04:40:32] <boxscape_> Why don't Tuples have Storable instances in base? There is storable-tuple, but the fact that that package exists and seems to work without problems makes it even stranger that base doesn't have those instances
[04:40:33] <EvanR> random-jellyfish, the state is encoded in the Mealy value itself, hidden in a closure
[04:41:06] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:41:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:42:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:46:38] *** Joins: cheater (~Username@user/cheater)
[04:46:45] <sshine> boxscape_, the author seems to agree: https://hackage.haskell.org/package/storable-tuple-0.0.3.3/docs/src/Foreign-Storable-Tuple.html (line 2)
[04:48:34] <sshine> boxscape_, it seems like Storable a => Storable (Complex a) is in base. data Complex a = !a :+ !a, that's almost a tuple. :P
[04:49:10] <energizer> how does this syntax work https://i.imgur.com/6Ab4BJq.png what are `s` and `b` supposed to be?
[04:50:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:50:30] <energizer> like, are they allowed to be just any old type?
[04:50:44] <Axman6> yep
[04:50:50] <energizer> ok
[04:51:00] <boxscape_> sshine yeah, good point
[04:51:01] <Axman6> Value lets you make something of type FunC a, for any a
[04:51:39] <Axman6> and the combining constructors like If don't care what types the branches have, as long as they're the same
[04:52:45] <Axman6> energizer: The name of this syntax is GADT, or Generalised Algebraic Data Types
[04:53:05] <energizer> thanks
[04:53:46] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[04:53:48] *** Joins: vglfr (~vglfr@46.96.147.122)
[04:54:27] <boxscape_> energizer note btw that the "a" in "data FunC a where" has nothing to do with the "a"s everywhere else, that type variable name is completely decoupled from the rest. It's only purpose is to say that FunC takes one argument
[04:54:40] <energizer> oh
[04:54:53] <Axman6> yeah good point
[04:54:58] <boxscape_> s/It's/Its
[04:55:06] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[04:55:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:55:55] <sshine> energizer, the "a" in "Fst :: FunC (a, b) -> FunC a" isn't the same as the "a" in "Snd :: FunC (a, b) -> FunC b", either.
[04:56:34] <energizer> yea i guessed that one
[04:56:39] <sshine> energizer, that's how each line gets away with an arbitrary choice of variable names.
[04:57:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:57:38] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[04:57:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[04:57:58] *** Joins: vicfred (~vicfred@user/vicfred)
[04:58:43] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[05:00:13] *** Joins: alx741 (~alx741@157.100.93.160)
[05:02:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:03:03] *** Joins: benin (~benin@183.82.31.24)
[05:06:03] *** Joins: Guest|60 (~Guest|60@109.175.155.97)
[05:08:14] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[05:08:19] <Sqaure> how does one make a Word8 form a Char, if at all possible?
[05:08:47] <EvanR> > fromIntegral (ord 'c') :: Word8
[05:08:48] <lambdabot>  99
[05:09:00] <EvanR> (ord returns an Int)
[05:09:45] <EvanR> (also I answered a more specific question, how to encode Char with something like ASCII)
[05:10:09] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[05:10:32] <Sqaure> thanks!
[05:11:35] <EvanR> for general technically sloppy operations treating Char as bytes, there's Data.ByteString.Char8
[05:13:03] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:14:14] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-4062-cd4e-8589-7aec.emome-ip6.hinet.net) (Ping timeout: 250 seconds)
[05:15:06] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net)
[05:15:52] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[05:16:46] *** Quits: Guest|60 (~Guest|60@109.175.155.97) (Quit: Connection closed)
[05:17:11] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:20:42] *** Joins: alx741 (~alx741@157.100.93.160)
[05:21:02] <albet70> does String have encoding?
[05:21:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-79c6-a2ee-55d6-42c7.res6.spectrum.com)
[05:21:36] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net) (Ping timeout: 250 seconds)
[05:23:47] <EvanR> each Char is just the unicode number for that character
[05:23:59] <EvanR> even if it's technically "not a character"
[05:24:21] <EvanR> String = [Char]
[05:24:55] *** Joins: vysn (~vysn@user/vysn)
[05:25:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:26:01] <EvanR> so String is a thing you encode rather than decode, as far as text processing goes
[05:28:41] <EvanR> > succ '\1114110'
[05:28:42] <lambdabot>  '\1114111'
[05:28:45] <EvanR> > succ '\1114111'
[05:28:47] <lambdabot>  *Exception: Prelude.Enum.Char.succ: bad argument
[05:29:19] <boxscape_> > pred '\0'
[05:29:20] <lambdabot>  *Exception: Prelude.Enum.Char.pred: bad argument
[05:29:44] <EvanR> no (ab)using the extra space in the Char for fun and profit
[05:31:54] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net)
[05:42:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:42:37] *** Quits: mmhat (~mmh@55d4124f.access.ecotel.net) (Ping timeout: 240 seconds)
[05:43:14] *** Joins: alx741 (~alx741@157.100.93.160)
[05:46:36] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:47:34] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[05:47:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:49:20] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 250 seconds)
[05:50:37] *** Joins: tomku (~tomku@user/tomku)
[05:51:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:51:47] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:51:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:52:09] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 256 seconds)
[05:53:32] *** Quits: xff0x (~xff0x@2001:1a81:5332:3500:b49d:8e28:9fba:6720) (Ping timeout: 240 seconds)
[05:54:33] *** Joins: juhp (~juhp@128.106.188.82)
[05:54:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:55:23] *** Joins: xff0x (~xff0x@2001:1a81:5370:cd00:aa5:136f:1b20:712a)
[05:56:03] <albet70> String to ByteString is encooding or decoding
[05:56:15] <EvanR> encoding
[05:56:57] *** Joins: mmhat (~mmh@55d400c1.access.ecotel.net)
[05:57:08] *** Quits: ridcully_ (~ridcully@p508ac987.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:57:23] *** Quits: leungbk (~user@2603-8000-1201-2dd2-79c6-a2ee-55d6-42c7.res6.spectrum.com) (Remote host closed the connection)
[05:58:28] *** Quits: mmhat (~mmh@55d400c1.access.ecotel.net) (Client Quit)
[05:58:48] *** Joins: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de)
[05:59:39] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[06:06:14] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:bdf9:ef99:b73e:7a0a)
[06:07:26] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[06:10:14] *** Joins: razetime (~quassel@49.207.209.26)
[06:11:46] *** Joins: vicfred_ (~vicfred@user/vicfred)
[06:14:02] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 250 seconds)
[06:15:14] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[06:17:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:22:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:26:54] *** Joins: califax- (~califax@user/califx)
[06:30:48] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:30:48] *** califax- is now known as califax
[06:31:24] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:32:13] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 250 seconds)
[06:34:23] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:34:46] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:18] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[06:37:05] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[06:37:05] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[06:37:05] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[06:37:08] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:9c57:17b6:65b6:b182)
[06:39:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:39:12] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[06:41:41] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Excess Flood)
[06:41:54] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[06:41:54] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[06:41:54] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[06:45:03] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:46:29] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:46:29] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:46:29] *** finn_elija is now known as FinnElija
[06:47:06] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:47:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[06:48:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[06:49:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:50:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:52:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:57:24] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:00:21] *** Quits: td_ (~td@94.134.91.105) (Ping timeout: 256 seconds)
[07:01:52] *** Joins: td_ (~td@94.134.91.163)
[07:04:18] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Ping timeout: 250 seconds)
[07:05:10] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 250 seconds)
[07:06:18] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[07:08:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[07:08:20] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[07:10:24] *** Joins: cyphase (~cyphase@user/cyphase)
[07:16:30] <Axman6> EvanR: not with that attitude
[07:17:31] <Axman6> % fromIntegral (maxBound :: Word64) `divMod` (fromIntegral $ ord maxBound)
[07:17:31] <yahb> Axman6: (16557366432706,1037249)
[07:17:40] *** Quits: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz) (Quit: Client closed)
[07:18:36] <EvanR> you can fit 2 Chars in 1
[07:18:39] <EvanR> (at least)
[07:18:58] *** Joins: log101 (~log101@212.125.22.146)
[07:19:04] <EvanR> > 64 / 21
[07:19:06] <lambdabot>  3.0476190476190474
[07:19:17] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[07:21:00] <EvanR> UTF-3
[07:21:32] *** Joins: cynomys (~cynomys@user/cynomys)
[07:23:49] <Axman6> % fromIntegral (maxBound :: Word32) `divMod` (fromIntegral $ ord maxBound) -- what I should've written
[07:23:50] <yahb> Axman6: (3855,69390)
[07:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:25:26] <EvanR> apparently a unichar needs 20.08 bits to encode, what the hell were they thinking
[07:25:38] *** Joins: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz)
[07:26:04] <EvanR> a random char
[07:27:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:28:05] <energizer> https://i.imgur.com/FbUZSdN.png What is `type Internal a`? i dont see anything like that in https://en.wikibooks.org/wiki/Haskell/Classes_and_types
[07:28:25] <EvanR> nice font
[07:28:38] <EvanR> Internal a is an associated type synonym family
[07:28:42] <EvanR> filed under type families
[07:29:27] <energizer> ok
[07:30:17] <EvanR> sometimes they are used instead of multi-param type class + fundeps
[07:31:13] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[07:31:36] <Axman6> and often nicer to work with IMO
[07:34:39] *** Quits: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz) (Quit: Client closed)
[07:34:46] <jackdk> can associated type families have injectivity annotations?
[07:35:03] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (Remote host closed the connection)
[07:36:04] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[07:37:23] *** bravespear|2 is now known as Ranhir
[07:43:32] <EvanR> I think the latest ghc doc implies yes, but I'd try it
[07:43:58] <EvanR> >For open and closed type families it is OK to name the result but skip the injectivity annotation. This is not the case for associated type synonyms, where the named result without injectivity annotation will be interpreted as associated type synonym default.
[07:45:07] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:45:40] *** Quits: razetime (~quassel@49.207.209.26) (Read error: No route to host)
[07:45:41] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[07:46:25] *** Ranhir is now known as Ranhir|NotHere
[07:46:33] *** Ranhir|NotHere is now known as Ranhir
[07:47:07] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[07:47:17] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[07:49:16] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[07:50:23] <Axman6> Anyone ever wanted ... or patterns? case boorOrBarOrBaz of (Foo{} | Bar{}) -> one thing; Baz a b -> another; binding variables would be prohibited
[07:50:40] <dolio> Yes, they have been wanted.
[07:51:09] <Axman6> More specifically, anyone who isn't me =)
[07:51:32] <boxscape_> Axman6 https://github.com/ghc-proposals/ghc-proposals/pull/43
[07:51:37] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 240 seconds)
[07:51:43] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:52:00] <dolio> I've definitely wanted the no-variables version.
[07:52:13] <dolio> Some people want one with variables, but that's a little harder to make sense of.
[07:52:22] <boxscape_> I think java is introducing them with variables
[07:52:24] <boxscape_> so
[07:52:36] <boxscape_> you know, not good to be behind java as a language that praised itself on features that java is copying
[07:53:01] <boxscape_> (I guess it's only "behind" if you're in favor of the variable version)
[07:53:01] <energizer> does `type Internal a` have to be inside the `where` or can it be outside?
[07:53:14] <Axman6> inside
[07:53:25] <energizer> what is the difference?
[07:53:35] <Axman6> but it can be defined as a type defined elsewhere
[07:54:25] <dibblego> is _Foo || is _Bar
[07:54:46] <Axman6> every instance of Syntactic must have an associated instance of Internal, and only instances can have definitions for Internal
[07:54:48] <boxscape_> Axman6 Anyway, I think variables are actually pretty straightforward if you just require that every pattern binds the same variables, with the same type
[07:55:21] <Axman6> yeah - the example binging the same name twoce to call show on makes me unhappy
[07:55:29] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[07:55:54] <boxscape_> at different types? Yeah that could be confusing
[07:57:07] <Axman6> "233 hidden items" - well, that proposal must have been exciting!
[07:58:13] <boxscape_> ...I wish github had a "load all comments" feature
[07:58:20] <EvanR> energizer, type families can be defined on their own. But yours is in a class, so it's associated with a class and intended to map every type that's an instance to some type (and not be left undefined)
[07:59:08] <EvanR> moving it out makes it a regular type family with nothing to do with that class
[07:59:42] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[08:05:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0) (Ping timeout: 250 seconds)
[08:05:27] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[08:05:32] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[08:06:04] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[08:08:14] *** Joins: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz)
[08:10:17] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Ping timeout: 240 seconds)
[08:11:10] *** Joins: log101 (~log101@212.125.22.146)
[08:14:04] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 250 seconds)
[08:16:37] *** Joins: mbuf (~Shakthi@171.61.206.147)
[08:18:41] *** Quits: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz) (Quit: Client closed)
[08:20:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[08:34:32] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[08:36:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:36:37] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[08:37:15] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 256 seconds)
[08:41:17] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[08:41:38] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:47:38] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[08:48:18] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[08:48:36] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[08:54:08] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[09:00:08] *** Joins: rusrushal13 (~rusrushal@2401:4900:43a3:616e:36cb:f750:4e6b:4367)
[09:05:07] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:07:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:08:29] *** Joins: cynomys (~cynomys@user/cynomys)
[09:10:36] *** Joins: log101 (~log101@88.255.77.33)
[09:12:11] *** Quits: rusrushal13 (~rusrushal@2401:4900:43a3:616e:36cb:f750:4e6b:4367) (Ping timeout: 256 seconds)
[09:26:02] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net) (Ping timeout: 240 seconds)
[09:28:55] *** Joins: rusrushal13 (~rusrushal@2409:4056:15:9212:92a3:69cd:5ace:e40a)
[09:29:41] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[09:30:29] <leibniz> hi, i was wondering if anyone had any ideas about the idea about the monadic traversal?
[09:31:27] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[09:32:56] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 250 seconds)
[09:33:57] <leibniz> specifically, about the choice between 1. considering all applicatives, as per the usual traverse function, or 2. restricting to StateL to give the "scanner" class encapsulating the functionality of mapAccumL
[09:35:13] <leibniz> im not sure if offering that functionality (via the specification of the applicative) is "overly" restrictive, or actually beneficial
[09:36:03] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:36:53] <leibniz> iv never seen it done usefully with any other applicative, in terms of preserving lazyness, so the travsersals compose as if there were a "per element" rewrite, kind of factoring through the pattern matching on the constructor
[09:37:52] <leibniz> im not even sure if it works for anything other than StateL, since i dont really understand why the lazyness works in that case, other than it just not being StateR, which certainly wouldnt work for an infinite stream, or a blocking monadic tail call
[09:37:56] <leibniz> ...
[09:38:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[09:40:39] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[09:44:57] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:46:02] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 240 seconds)
[09:54:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:57:44] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[09:58:17] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[09:58:19] *** Joins: Constraintegic (~thomasbul@2001:a61:130d:ed01:d880:8422:69cf:e05c)
[10:01:05] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[10:02:37] *** Joins: cynomys (~cynomys@user/cynomys)
[10:02:50] *** Quits: Constraintegic (~thomasbul@2001:a61:130d:ed01:d880:8422:69cf:e05c) (Ping timeout: 250 seconds)
[10:03:02] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:03:15] *** Joins: califax (~califax@user/califx)
[10:06:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:10:02] <SrPx> what is the right way to install GHC on a new OSX Monteray Macbook? is `brew install ghc` still a terrible idea?
[10:10:18] *** Joins: ekai (~xusr@bl18-111-231.dsl.telepac.pt)
[10:10:45] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[10:12:56] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:13:26] <dsal> I use nix.
[10:13:33] <dsal> I've not used homebrew in a year or two.  :)
[10:13:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[10:14:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:14:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:14:46] *** Joins: wroathe (~wroathe@user/wroathe)
[10:15:33] <boxscape_> ghcup is supposed to be the universal installer, but I don't know if there are any issues on Monteray
[10:18:19] <dsal> I've not successfully used it for M1, but I think it's otherwise OK.
[10:18:53] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[10:19:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:20:37] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[10:22:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:24:34] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:27:34] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:29:36] *** Joins: _ht (~quassel@2a02:a468:b619:1:b7fa:be1e:6eb0:5ee1)
[10:36:27] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:36:42] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Client Quit)
[10:36:44] *** Joins: michalz (~michalz@185.246.204.58)
[10:37:30] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 250 seconds)
[10:43:04] *** Joins: ardell (~ardell@user/ardell)
[10:43:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:44:52] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[10:45:25] *** Joins: cheater (~Username@user/cheater)
[10:47:23] *** Quits: rusrushal13 (~rusrushal@2409:4056:15:9212:92a3:69cd:5ace:e40a) (Ping timeout: 256 seconds)
[10:47:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:04:27] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:07:45] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[11:08:17] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[11:09:09] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[11:15:35] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[11:17:01] <SrPx> ty
[11:22:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:25:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[11:25:37] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:26:29] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[11:27:41] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:28:15] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:25bb:89ab:830f:7e39)
[11:31:44] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:31:45] *** Joins: Constraintegic (~thomasbul@2001:a61:130d:ed01:8875:784f:ca4f:d8a2)
[11:33:38] <hololeap> should there be a wiki for running ghc on mac somewhere? I see a lot of questions on that
[11:33:49] *** Joins: alp (~alp@user/alp)
[11:34:22] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[11:34:24] *** Joins: chele (~chele@user/chele)
[11:36:02] *** Quits: Constraintegic (~thomasbul@2001:a61:130d:ed01:8875:784f:ca4f:d8a2) (Ping timeout: 240 seconds)
[11:39:58] *** Joins: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr)
[11:40:21] *** Quits: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr) (Client Quit)
[11:40:41] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:41:14] *** Quits: Sgeo (~Sgeo@ool-18b9875e.dyn.optonline.net) (Read error: Connection reset by peer)
[11:41:59] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:42:56] *** Quits: ekai (~xusr@bl18-111-231.dsl.telepac.pt) (Ping timeout: 250 seconds)
[11:44:12] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:46:56] *** Joins: kuribas (~user@ptr-25vy0i9v7xwr83cod1i.18120a2.ip6.access.telenet.be)
[11:52:50] *** Joins: jacoo (~jacoo@121.131.39.82)
[11:53:03] *** jacoo is now known as lionhairdino
[11:58:01] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: m4lvin)
[11:58:25] *** Joins: m4lvin (~m4lvin@w4eg.de)
[12:06:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:09:32] <lionhairdino> Haskell betrayed me. I thought there was no pointer, no memory leak. but now I met space leak.
[12:10:07] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[12:10:17] <lionhairdino> eventlog2html show too short label. so I can't find exact point
[12:13:18] *** Joins: max22- (~maxime@2a01cb0883359800a4d68ab29ac6e773.ipv6.abo.wanadoo.fr)
[12:13:27] *** Quits: log101 (~log101@88.255.77.33) (Remote host closed the connection)
[12:13:44] *** Joins: log101 (~log101@88.255.77.33)
[12:19:21] *** Quits: log101 (~log101@88.255.77.33) (Remote host closed the connection)
[12:19:38] *** Joins: log101 (~log101@88.255.77.33)
[12:20:30] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:15] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a)
[12:23:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:24:17] *** Quits: log101 (~log101@88.255.77.33) (Ping timeout: 256 seconds)
[12:25:13] <polyphem> lionhairdino: enable profiling , and look at the .prof file , it has a column on memory usage per costcenter, look for the highest numbers to get a cle where to look for your mem leak
[12:25:36] <polyphem> *clue
[12:28:49] <lionhairdino> thanks for replying. I already did. but If leaking slowly, It's not helpful.
[12:30:27] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:30:50] *** Joins: fef (~thedawn@user/thedawn)
[12:31:19] *** Joins: neurocyte0917090 (~neurocyte@45.93.108.138)
[12:31:19] *** Quits: neurocyte0917090 (~neurocyte@45.93.108.138) (Changing host)
[12:31:19] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[12:34:56] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:35:21] <lionhairdino> If I even find suspect at linechart tab, too short label is not helpful.
[12:35:50] <polyphem> lionhairdino: you could sprinkle BangPatters around "candidates" or use {-# LANGUAGE Strict #-} and {-# LANGUAHE StrictData #-} on suspect modules and see if it changes somthing to narrow down the spot
[12:37:04] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[12:37:14] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:38:30] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a)
[12:38:50] <lionhairdino> thanks, I haven't use StrictData yet. good idea!. and...is there option to add detail to the label of eventlog2html?
[12:39:35] <polyphem> about eventlog i dont' know , sorry
[12:41:37] <lionhairdino> You are my first contact in this channel. nice to meet you.
[12:42:33] <polyphem> its quite right now, usually there are more experienced people around that will give good advice :)
[12:43:38] <oak-> By the way, is the Strict language extension still experimental, or could it be considered usable for production code?
[12:43:45] <polyphem> i havent used eventlog2html , but maybe if you open web-console in browser and tinker with fontsizes of labels or so , you'd get more information ?
[12:44:16] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 268 seconds)
[12:46:30] <lionhairdino> It's plausible? idea, but raw eventlog has short label too.
[12:46:58] <lortabac> oak-: it's not experimental, all it does is adding bang patterns to all the arguments in the module
[12:47:09] <merijn> oak-: Define "usable"
[12:47:09] <lionhairdino> eventlog2html is tool to convert raw eventlog to html
[12:47:15] <polyphem> oak-: ghc docs say they exist since ghc 8.0.1 , i dont see any statement that they are experimental , https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/strict.html
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[12:47:54] <merijn> lionhairdino: Have you looked at speedscope yet?
[12:47:56] <merijn> lionhairdino: https://mpickering.github.io/posts/2019-11-07-hs-speedscope.html
[12:48:23] <lortabac> if you find yourself adding too many bang patterns, enabling Strict can save you some typing
[12:48:37] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:bdf9:ef99:b73e:7a0a) (Ping timeout: 240 seconds)
[12:48:45] *** Joins: razetime (~quassel@49.207.209.26)
[12:49:17] <oak-> https://gitlab.haskell.org/ghc/ghc/-/wikis/language-strict This says "It's an experimental extension". But the page has been last modified 2 years ago, this is why I asked is it still experimental :)
[12:49:19] <merijn> tbh, most people treat Strict/StrictData as "I no longer have to think about strictness". Which at even the most casual consideration is wrong, since strict is wrong about as often (if not more so) than lazy.
[12:49:20] <lionhairdino> yes. I Have looked. but I can't get detail position. thanks to merijn
[12:50:00] <merijn> You still have to think *exactly* as much about strictness with Strict and StrictData as you do otherwise, all you've done is flipped the defaults
[12:50:27] <merijn> Which, honestly, might be harder, since I find it much easier to predict what I *definitely* want strict then what I definitely want lazy
[12:51:31] <maerwald[m]> Strict is a saner default for many applications
[12:52:19] <kuribas> I think lazyness is overrated.
[12:52:43] <polyphem> but the original problem that lionhairdino has was he couldnt use the output of eventlog2html , because the label are truncated , this is a bug , isn't it ?
[12:52:45] <kuribas> Some kind of optional lazyness is nice though.
[12:53:00] <kuribas> like infinite streams instead of infinite lists.
[12:53:34] <lionhairdino> I thought that if I crossed the Monad Mountain, the road would open up. but space leaks are nasty. 
[12:54:04] <lionhairdino> polyphem understand me exactly.!
[12:54:21] <maerwald[m]> https://github.com/yesodweb/wai/pull/752#issuecomment-501531386
[12:54:23] <merijn> lionhairdino: tbh, I've never used the eventlog stuff too much, I usually generate graphs of heap usage
[12:55:46] <maerwald[m]> "For experience of 10-years network programming in Haskell, I don't see any benefits of lazy evaluation except..."
[12:56:57] <lionhairdino> I could find what module has leaks using tool like heap prof, eventlog.. but I couldn't find detail location. 
[12:57:48] <lionhairdino> So now, I will try to use cachegrind, can it be a solution?
[12:59:36] <lortabac> lionhairdino: I know some people here don't agree, but IMHO enabling StrictData is a good default for many applications
[13:00:10] <lionhairdino> oh, I respect maerwald. 10 years network programming in "Haskell" 
[13:00:34] <lortabac> if your data types are strict and you avoid tuples, I'm pretty sure you will never have leaks
[13:00:53] <merijn> lortabac: Thats's just replacing one form of "not thinking about strictness" with another form of "not thinking about strictness". IMO any form of "trying to avoid thinking about strictness" is doomed to failure
[13:00:57] <polyphem> lortabac: i only suggested strictness annotations to help lionhairdino narrow down the spot where his code leaks , cause eventlog2html isnt usefull in his case
[13:01:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5d8e:db89:f241:b6e3) (Remote host closed the connection)
[13:01:05] <lionhairdino> lortabac: thanks for the advice
[13:01:19] <merijn> lionhairdino: Do you have any of the heap profiling plots?
[13:01:33] <merijn> (and is the code in question public somewhere?)
[13:01:38] *** Joins: Constraintegic (~thomasbul@2001:a61:130d:ed01:3ec8:65f2:fd2c:9b7e)
[13:01:50] <lortabac> merijn: it depends on the context, in an industrial setting you don't want to spend time chasing hard-to-spot bugs
[13:02:31] <lortabac> I'd rather sacrifice some performance than precious developer time
[13:03:23] <lionhairdino> No, I don't open yet. plz wait some minutes. I will upload
[13:03:30] <lionhairdino> eventlog
[13:05:31] <lortabac> in my toy projects I have the time and freedom to think about laziness carefully, I don't need the StrictData sledgehammer
[13:08:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:08:27] <lionhairdino> http://yearit.com/eventlog.png
[13:08:57] <lionhairdino> I uploaded eventlog2html screen capture
[13:10:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:9c57:17b6:65b6:b182) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:10:45] <lionhairdino> original html page is 200MB, It't could be too large.. http://yearit.com/eventlog.html 
[13:11:03] *** Joins: fendor (~fendor@91.141.65.21.wireless.dyn.drei.com)
[13:12:04] <merijn> lionhairdino: What does the heap view look like?
[13:12:12] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 250 seconds)
[13:12:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:12:19] <lionhairdino> I have seen many articles about eventlog2html, but nobody say about finding detail source location. 
[13:13:44] <merijn> lionhairdino: The crucial first thing would be: "*what* are you leaking?" not where, but that's hard to see with the linechart view
[13:15:45] <lionhairdino> from some moment, it doesn't export heap tab. i don't know..
[13:16:29] <merijn> lionhairdino: https://ro-che.info/articles/2020-05-14-visualize-haskell-heap-profiles
[13:16:57] <lionhairdino> yellow line, pap. it grows slowly 
[13:18:14] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[13:19:35] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:a778:fc55:137:3e0)
[13:19:44] <lionhairdino> thanks for advice. hp2ps can be helpful leak large, but leaks slowly..  
[13:21:18] *** Quits: polyphem (~rod@2a02:810d:840:8754:f8cc:a01b:29d5:d0e1) (Ping timeout: 250 seconds)
[13:22:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:22:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:22:03] *** Joins: wroathe (~wroathe@user/wroathe)
[13:22:59] <lionhairdino> why would people wonder that eventlog doesn't show detail position...
[13:23:01] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[13:23:02] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[13:24:13] <lionhairdino> merijn: If you can see detailed 
[13:24:20] <lionhairdino> "detailed tab"
[13:24:29] <lionhairdino> in http://yearit.com/eventlog.html
[13:24:38] <maerwald> lortabac: StrictData is a sane default, yes. I think it's rather uncontroversial in industry settings.
[13:24:45] <merijn> tbh, I've never really used the eventlog/eventlog2html
[13:24:57] <merijn> I can check if the full log loads
[13:25:07] <lionhairdino> you can align using slope
[13:25:16] <maerwald> especially since not all your laziness problems are actually space leak issues... they can also be allocation issues in hot loops due to unnecessary laziness in data types
[13:25:37] <maerwald> so even forcing at the call site as merijn frequently suggests doesn't fix it
[13:25:51] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:25:56] <maerwald> you have to force earlier
[13:26:34] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-008.client.tudelft.eduvpn.nl)
[13:26:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:27:09] <lionhairdino> a gentle slope say that there is little memory or space leaks..
[13:27:40] <merijn> lionhairdino: What's the max residency?
[13:28:04] <lionhairdino> label says about position in intermediate language core,
[13:28:06] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:41f6:c43f:4ee1:b9fb)
[13:28:18] <maerwald> and finding these very short temporary thunk buildups in hot loops is impossible to manually reason about and also pretty hard to debug
[13:28:33] <lionhairdino> about 85MB..
[13:28:50] <merijn> 85MB max residency hardly seems worth worrying about?
[13:28:59] <merijn> Unless you have some reason to believe it should be much less?
[13:30:03] <merijn> I'm not sure what the code is doing, so it's hard to say if 85MB is the right ballpark
[13:30:06] <lionhairdino> but it up slowly..
[13:31:19] <lionhairdino> I am making torrent client and tracker for prototype of some project.
[13:32:53] <lionhairdino> Server app should not have 0.1kB leak..
[13:33:54] *** Joins: mmhat (~mmh@55d400c1.access.ecotel.net)
[13:34:27] <merijn> I'm not completely convinced there is a leak in these graphs, tbh
[13:34:41] *** Joins: cfricke (~cfricke@user/cfricke)
[13:35:08] <merijn> (also not convinced there isn't one)
[13:35:10] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[13:35:46] <lionhairdino> merijn: thanks very much! now I will try to use "haskell code spot" and cachegrind, have you used it?
[13:38:55] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:39:10] *** Quits: Constraintegic (~thomasbul@2001:a61:130d:ed01:3ec8:65f2:fd2c:9b7e) (Quit: Leaving)
[13:42:06] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:45:29] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:47:40] <maerwald> lionhairdino: did you try speedscope?
[13:48:37] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[13:50:33] <lionhairdino> merijn: https://github.com/well-typed/memory-usage-zurihac-2021 do you know hi new profiling?
[13:51:20] <lionhairdino> maerwald: yes, thank for advice!
[13:51:39] <maerwald> https://mpickering.github.io/posts/2019-11-07-hs-speedscope.html
[13:51:55] <lionhairdino> merijn: https://github.com/well-typed/memory-usage-zurihac-2021/raw/master/assets/eventlog2html-detailed-info.png this image has detail location!
[13:52:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:52:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:52:51] *** Joins: wroathe (~wroathe@user/wroathe)
[13:54:13] <lionhairdino> maerwald: thanks for good paper.
[13:54:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[13:57:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:59:52] *** Quits: vglfr (~vglfr@46.96.147.122) (Ping timeout: 250 seconds)
[13:59:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:01:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[14:05:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Ping timeout: 240 seconds)
[14:12:17] *** Joins: __monty__ (~toonn@user/toonn)
[14:15:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:16:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:18:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:20:59] *** Joins: vglfr (~vglfr@46.96.147.122)
[14:23:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:23:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:23:38] *** Joins: wroathe (~wroathe@user/wroathe)
[14:27:13] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:28:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:31:08] *** Joins: alx741 (~alx741@157.100.93.160)
[14:32:43] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:32:53] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:33:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:40:00] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[14:44:17] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:50:16] <lionhairdino> polyphem, merijn, maerwald, lortabac thanks for advice! my original question is "why would not haskeller wonder that why eventlog has too short label". too short label doesn't help...
[14:51:03] <lionhairdino> but no article says about short label.
[14:51:37] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[14:53:32] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:54:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:54:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:54:25] *** Joins: wroathe (~wroathe@user/wroathe)
[14:56:25] <polyphem_> lionhairdino: you could still ask in #ghc why eventlog only generates "short labels"
[14:56:43] *** Joins: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr)
[14:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:04] <kitzman> is there a concatMap for all traversables?
[14:59:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:59:36] <kitzman> I was thinking to do a ((Int -> Maybe Int) `concatMap` [Int] ) :: [Int]
[14:59:48] <kitzman> i don't know if it's possible/makes sense
[15:02:11] <jackdk> :t concatMap
[15:02:12] <lambdabot> Foldable t => (a -> [b]) -> t a -> [b]
[15:02:34] <jackdk> :t (=<<)
[15:02:35] <lambdabot> Monad m => (a -> m b) -> m a -> m b
[15:02:50] <jackdk> kinda?
[15:03:53] *** Quits: bjobjo (~bjobjo@user/bjobjo) (Quit: Lost terminal)
[15:04:24] <lionhairdino> polyphem: ;-) my question is "why would not haskeller wonder that"
[15:07:31] <lionhairdino> I thought that I am not the only one who wonder "short label"! . but many articles doesn't says that. it's very strange thing. 
[15:07:37] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a)
[15:08:13] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[15:09:27] <kitzman> jackdk: hm, I was thinking something like, Foldable t, Foldable r => (a -> t b) -> r b -> r b . But either way, I can always just fold or match the Maybe
[15:09:55] <lionhairdino> I thought that profiling tool saying about source's location is important.
[15:11:32] <kitzman> ( i meant -> r a -> r b not -> r b -> r b , sorry )
[15:12:47] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:13:53] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:14:00] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[15:14:45] <leibniz> hi, i was wondering if anyone could help me with an example of a "monadic traversal" other than with StateL as the applicative, which is still lazy
[15:14:50] <leibniz> ?
[15:15:46] <leibniz> it has something to do with the applicatives sequencing in a way that is lazy, which i dont understand
[15:16:24] <leibniz> the only other example i have so far, is with StateR as the applicative, which is no lazy
[15:16:33] <leibniz> not lazy*
[15:17:11] <leibniz> could anyone suggest a different Applicative, and how it works in terms of lazy monadic traversals?
[15:17:48] <leibniz> or help me understand this idea more generally?
[15:19:18] <leibniz> kitzman: it looks like what your doing is almost like using the fold to implement bind
[15:20:30] <leibniz> not sure if there is a bind implementation for all traversals. certainly for a subset of them there is
[15:20:40] <leibniz> eg. listlike things
[15:21:31] <leibniz> basically your using (++) right?
[15:21:47] <leibniz> i guess for monoids more generally
[15:22:06] <leibniz> so yeah, for traversable monoids there is a bind implementation
[15:22:56] <leibniz> and you can get the monoid for listlike things with (++) usually implemented by folding with the constructor with the second list as the basecase of the fold
[15:23:45] <leibniz> i guess you can even relax traversable to foldable and say something like "foldable monoids are monads"
[15:24:18] <leibniz> though you might get mixed up with the return implementation
[15:24:31] <leibniz> certainly they have concatMap though
[15:24:58] <leibniz> the abstraction is usually thought of in terms of lenses
[15:25:10] <leibniz> somehow encoding pattern matching on the constructor
[15:25:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:25:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:25:12] *** Joins: wroathe (~wroathe@user/wroathe)
[15:25:47] <leibniz> this can even be generalised slightly to work for trees that require an (Int,Int) structure directing index as an extra argument to the constructor
[15:30:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:31:00] <leibniz> sorry, i slightly obscured my question by answering another
[15:31:36] <leibniz> could anyone give an example of a "monadic traversal" other than with StateL as the applicative which is still lazy
[15:31:41] <leibniz> ?
[15:41:12] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[15:43:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:43:15] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[15:46:32] <[exa]> leibniz: well you can try a strict State right?
[15:47:10] <[exa]> I get it that you are searching for some examples of using `traverse` in a way that differs significantly from what can be achieved with lazy State ?
[15:48:12] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:41f6:c43f:4ee1:b9fb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:52:45] <dminuoso> Is there a kind of concatMap for map that I'm not seeing? Map k a -> (k -> a -> Map k a) -> Map k a
[15:53:46] <dminuoso> Background is I want to do `Map (A, B) V -> Map A (B, V)` elegantly
[15:54:09] <dminuoso> Or should I just roundtrip through list and use concatMap there?
[15:56:04] <dminuoso> Mmm, given that information it wouldnt work actually.
[15:56:28] <[exa]> you might get key collisions on shrinking (A,B) to A right?
[15:57:28] <dminuoso> Yeah, come to think of it I want rather something like:
[15:57:33] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[15:57:41] <[exa]> anyway even in that case you may get the stuff sorted by (A,B), which should allow you to construct the stuff from sorted (and nubbed) list in O(n)
[15:57:51] <tomsmeding> \m f -> Map.unionsWith yourCombinationFunction (map (uncurry f) (Map.toList m))
[15:57:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:58:07] <tomsmeding> probably can't get that much better asymptotically
[15:58:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:58:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:58:12] *** Joins: wroathe (~wroathe@user/wroathe)
[15:58:22] <tomsmeding> unless the keys in the produced maps are very related to the input keys somehow
[15:58:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:58:49] <tomsmeding> s/toList/assocs/ probably
[15:58:53] <dminuoso> Ah yes, I think this has expressivity that I was looking for.
[15:58:55] <dminuoso> Thanks tomsmeding.
[16:01:40] <dminuoso> unionsWith is neat :)
[16:02:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:02:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:03:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:03:37] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:04:38] *** Joins: fef (~thedawn@user/thedawn)
[16:05:06] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[16:09:20] *** Joins: slack1256 (~slack1256@191.126.99.84)
[16:09:57] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[16:11:47] <Gurkenglas> note that the f should come before the m in the argument order
[16:15:01] <Gurkenglas> to first order, because then you can say \f -> M.unionsWith foo . map (uncurry f) . M.toList
[16:15:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:15:37] <Gurkenglas> which can by the way be written as \f -> M.unionsWith foo . M.mapWithKey f
[16:16:28] <dminuoso> Oh that looks very nice indeed
[16:16:52] <Gurkenglas> tfw M.fromListWith only takes lists rather than any Foldable
[16:17:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:17:23] <dminuoso> Though Im pondering whether I can actually get away with losing information, enabling me to write: shrinkWith f s = foldr go m.empty . map (first s) . m.tolist where go (k, v) = m.insertWith f k v
[16:17:40] <dminuoso> That would avoid intermediate maps
[16:17:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[16:17:42] *** Joins: Guest|65 (~Guest|65@203.192.207.134)
[16:17:50] *** Quits: Guest|65 (~Guest|65@203.192.207.134) (Client Quit)
[16:17:57] <dminuoso> (Not entirely sure whether that would make a difference, Id have to inspect unionsWith)
[16:18:09] <Gurkenglas> else it could have been "\f -> M.fromListWith foo . M.mapWithKey djinn", where djinn can be automatically derived using @djinn, which is beautiful
[16:18:44] <Gurkenglas> @djinn (a,b) -> c -> (a, (b,c))
[16:18:44] <lambdabot> f (a, b) c = (a, (b, c))
[16:19:47] <dminuoso> Gurkenglas: why is it monomorphized to lists though?
[16:20:30] <Gurkenglas> dminuoso, I'd *guess* because someone felt it'd be confusing to newbies if the name, which they feel should stay the same, implied a monomorphicity that isn't there
[16:20:39] <dminuoso> Fair
[16:20:57] <Gurkenglas> :(
[16:21:35] <Gurkenglas> at least make a new definition that doesn't have the name issue, then!
[16:22:17] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[16:22:18] <dminuoso> This is a fundamental problem really. I wish we had uniform automatic monomorphization support in both GHC and haddock.
[16:22:42] <Gurkenglas> Aka, let newbies work with simplified types until they're ready?
[16:22:46] <dminuoso> Yes.
[16:23:10] <dminuoso> Endless bikeshedding would ensue which primitives would receive that treatment.
[16:23:40] <dminuoso> And interaction with class methods. That is, would you have fmap monomorphized to lists?
[16:23:51] <Gurkenglas> I agree, I've previously wished this. The failed website https://arbital.com/ tried to have its math posts at multiple difficulty levels.
[16:24:06] <Gurkenglas> lens would benefit.
[16:24:25] <[exa]> what about extra "show me a less polymorphic example of this variable mess" button?
[16:24:25] <dminuoso> I think the better solution to the lens design space is what optics does.
[16:25:28] <Gurkenglas> Fortunately language model advances look like we'll get a fully general solution to "show me a less incomprehensible variant of this" one of these years.
[16:25:50] <dminuoso> GHC and haddock do this in a hardcoded fashion for levity polymorphism already
[16:26:26] <dminuoso> Gurkenglas: Dunno, with linear types things appear to be moving in the opposite direction.
[16:26:57] <dminuoso> So now you have levity polymorphism, multiciplity polymorphism, type polymorphism.. all interleaved.
[16:27:03] <Gurkenglas> dminuoso, linear types are an O(1) step in the wrong direction, the autocomplete engine wizardry that's coming about should solve the entire problem.
[16:27:40] <dminuoso> What autocomplete engine are you referring to?
[16:28:31] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[16:29:05] <Gurkenglas> imagine style transfer https://miro.medium.com/max/767/1*B5zSHvNBUP6gaoOtaIy4wg.jpeg but for text! dminuoso, GPT-3. Train a predict-the-next-word network on ~the entire internet and get magic tools like https://vimeo.com/427943407/98fe5258a7 for free
[16:30:33] <dminuoso> Okay, I so didn't get the sarcasm there before. :-)
[16:30:43] <Gurkenglas> no sarcasm :( where do you see any?
[16:31:57] <dminuoso> Maybe my detector is off, but I dont think throwing more AI is realistically a solution.
[16:32:05] <dminuoso> https://news.ycombinator.com/item?id=30015810
[16:32:09] <Gurkenglas> dminuoso, https://twitter.com/michaeltefula/status/1285505897108832257/photo/2 legalese->english
[16:32:13] <dminuoso> Fun recent related bit
[16:32:15] <dminuoso> :-)
[16:33:07] <dminuoso> Gurkenglas: It's funny, you always get these n=1 stories on twitter. What if GPT-3 gives you an inaccurate or plainly wrong summary?
[16:33:26] <dminuoso> But these dont generate as much social media attention I suppose
[16:33:44] <Gurkenglas> dminuoso, i suppose the output type signature will have a small chance of being incorrectly translated. But it seems easy enough for a compiler to verify whether it's right?
[16:34:23] <dminuoso> I prefer freely available, mechanical, verifiable systems.
[16:34:29] <dminuoso> GPT-3 is none of the above.
[16:35:00] <[exa]> +1 ^
[16:35:30] <Gurkenglas> I agree that it's a bad sign that not one human knows how GPT-3 makes its decisions. I predict anyway that the tools will appear, and be used, and work well.
[16:35:44] <dminuoso> My main beef is, when the features become so complex, that you need extreme powertools like GPT-3 to even make sense of them, perhaps the fault lies in making these complicated things.
[16:35:53] <merijn> I agree with the first two of your claims
[16:36:13] <merijn> I question whether they will indeed work well
[16:36:21] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:36:37] <merijn> To me it sounds like "throwing even more complicated shit we don't understand on top of the already existing shit pile"
[16:36:54] <dminuoso> 13:54:25        [exa] | what about extra "show me a less polymorphic example of this variable mess" button?
[16:36:56] <merijn> There lies no hope in that direction
[16:36:59] <dminuoso> Perhaps this is the most pragmatic solution at the end.
[16:37:03] <Gurkenglas> merijn, does it count as working well if there's no compiler verification but the translation is wrong one in a hundred times? (which sounds like a higher success rate than when humans translate it in their head!)
[16:37:18] <dminuoso> Extra haddock (or even special type annotations) that provide multiple alternative monomorphized types, and beginners just need to learn about this.
[16:37:40] <merijn> Gurkenglas: If humans consistently get something wrong, the solution isn't "build a process that is slightly more accurate"
[16:37:46] <dminuoso> Then the author of a polymorphic thing can conceive one or more likely choices for a type variable of their type, and then just put them in
[16:37:55] <merijn> Gurkenglas: The solution is: fix the tools and process to prevent humans from making predictable fuck ups
[16:38:04] <Gurkenglas> merijn, self-driving cars.
[16:38:49] <merijn> Gurkenglas: I will go ahead that the Dutch "Sustainable Safety" policy for road design has saved *many* more lives thant self-driving cars ever will in a less principled road system
[16:38:59] <int-e> Gurkenglas: a million accidents waiting to happen
[16:39:27] <hpc> not just a million accidents
[16:39:31] <hpc> the same accident a million times
[16:39:59] <merijn> The guiding principle for road design is: "People will fuck up" and therefore two things should be done: 1) possibility of fuckups should be minimised and 2) negative outcomes of fuckups should be minimised
[16:40:02] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[16:40:08] <Gurkenglas> merijn, I will happily claim that if self-driving cars gets widely adopted they'll probably save even more lives.
[16:40:08] <hpc> there's a few roads that tesla owners know to just avoid because the sensors get confused and it consistently steers into oncoming traffic and such
[16:40:11] <merijn> Which, tbh, perfectly summarises my attitude to programming too
[16:40:25] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d0b2:5a76:adf7:9a5a) (Read error: Connection reset by peer)
[16:40:28] <merijn> Gurkenglas: Not with the way Tesla is producing them :)
[16:40:48] <dminuoso> Heck, even on airplanes (which generally dont encounter other airplanes) with extremely uniform landing strips over the world, there's mostly no autopilot landing.
[16:40:49] <merijn> Gurkenglas: And the thing is, safer road design benefits self-driving cars too
[16:40:52] <Gurkenglas> I do admit it's plausible that it'll work fine and then one day some accident hits everyone at once.
[16:41:13] *** Joins: fendor_ (~fendor@91.141.44.222.wireless.dyn.drei.com)
[16:41:13] <Gurkenglas> That might even make it not be worth it in average lives saved on net.
[16:41:16] <merijn> Gurkenglas: Since the same things that prevent/reduce human fuckups and minimise damage of fuckup will have the same effect for self-driving cars
[16:41:21] <dminuoso> I find it curious why people are so eager for self driving cars before planes and trains have become widely completely automated..
[16:41:25] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[16:41:39] <dminuoso> It's really a recipe for disaster. :)
[16:42:01] <int-e> dminuoso: are they, really, or is it mostly marketing?
[16:42:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:42:11] <merijn> My main objection to self-driving cars is: We haven't sorted out liability yet
[16:42:32] <dminuoso> merijn: Socialism to the rescue.
[16:42:52] <merijn> I don't think self-driving cars are massively more risky than some humans. But I feel manufacturers would be...let's say...more invested in safety if they were liable for errors by their self-driving cars
[16:42:53] <dminuoso> If society itself wants self driving cars, have the society be liable for its decisions.
[16:43:05] <maerwald> dminuoso: there's no autopilot that has ever saved lives in an airplane...
[16:43:06] <merijn> dminuoso: I'd prefer the manufacturer was
[16:43:14] *** Quits: dsrt^ (~dsrt@207.182.73.202) (Remote host closed the connection)
[16:43:18] <Gurkenglas> <dminuoso> Extra haddock (or even special type annotations) <- compromise: GPT-3-generated alternative haddock files, uploaded to hackage and verified by authors or the test of time
[16:43:25] <nshepperd2> aren't both planes and trains almost completely automated?
[16:43:32] <dminuoso> maerwald: Conceivably there were accidents that could have been saved by autopilots though?
[16:43:39] <maerwald> dminuoso: I don't think so
[16:43:40] <dminuoso> nshepperd2: Landings and startups on planes? No.
[16:43:47] <int-e> nshepperd2: they have humans in the loop at all times
[16:43:49] *** Quits: fendor (~fendor@91.141.65.21.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:43:54] <dminuoso> nshepperd2: almost all airlines mandate their pilots land and takeoff by hand.
[16:44:02] <nshepperd2> the NYC train system still has drivers, mostly for hysterical raisins and it sometimes kills people
[16:44:11] <Gurkenglas> merijn, Tesla stock would crash if there was a serious series of accidents, isn't that plenty incentive?
[16:44:33] <dminuoso> Gurkenglas: Out of curiosity, do you happen to be working on GPT-3 related projects at the moment?
[16:44:51] <dminuoso> Trying to understand why you're pushing for it this hard.
[16:45:00] <merijn> Gurkenglas: Oh, no, I want manufacturers terrified of a *single* accident that's their fault, not just "massive worldwide failures"
[16:45:23] *** Quits: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr) (Ping timeout: 268 seconds)
[16:45:31] <nshepperd2> it's cost effective for airlines to have pilots "just in case" though
[16:45:36] <merijn> If companies are going to make life&death decisions I want them to have *serious* skin in the game
[16:45:38] <dminuoso> It's definitely not, nshepperd2.
[16:45:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:45:44] <Gurkenglas> merijn, that sounds like liability wouldn't do it but the PR-stockprice-hype angle could
[16:46:32] <nshepperd2> dminuoso: one salary vs however much profit tens of thousands of passengers bring in per year?
[16:46:36] <merijn> Gurkenglas: I mean, Tesla has already had several fuckups where their self-driving shit fucked up. Same with ubers experiments and their bottomline seems unaffected, so I have no faith in that
[16:46:48] <maerwald> nshepperd2: I don't think an autopilot could have done the landing on the Hudson River... because it was never done before
[16:46:59] <Gurkenglas> dminuoso, not quite? I'm working on math that'd let me measure and train for the readability of neural networks, because I do expect them to become really important and I worry what happens if we still can't read them by then.
[16:47:11] <merijn> If your company produces software that (potentially) makes life & death decisions the company being financially liable is the bare minimum
[16:47:19] <nshepperd2> maerwald: sure
[16:47:23] <dminuoso> nshepperd2: Its actually a curious case, because planes *can* takeoff, fly and land all by themselves with minimal intervention. In principle all the interaction on planes could happen remotely with a bunch of pilots sitting on their couch.
[16:47:28] <nshepperd2> planes having autopilot definitely saves lives though
[16:47:36] <nshepperd2> less pilot fatigue, etc
[16:47:45] <merijn> I don't think we should rule out criminal liability for people in charge of software like this
[16:48:29] <dminuoso> liability for software.
[16:48:31] <dminuoso> haha!
[16:48:36] <dminuoso> That'd be the day.
[16:48:39] <merijn> If your code provably (in a court of law) killed someone due to criminally negligent decisions, your company should be toast
[16:49:13] <Gurkenglas> We might want them to be required to buy insurance. Because a million crashes at once would bankrupt Tesla, and so would 10 million, so there's no reason for them to guard harder against 10 million than 1 million...
[16:49:17] <merijn> dminuoso: I'm not going to argue for industry wide software liability (although I sometimes think I should, maybe people would take this shit seriously, then...). But certainlty for control systems of cars/planes/trains/etc.
[16:49:22] <dminuoso> merijn: Germany had a woman die 1-2 years ago due to gross negligence in IT security, after some cryptoware infested the hospital and she couldn't receive urgent care.
[16:49:23] <maerwald> dminuoso: mixing concrete incorrectly in germany can get you into jail, so
[16:49:54] <dminuoso> merijn: But of course no criminal prosecution, blame was all put on "evil hackers".
[16:50:00] <merijn> Gurkenglas: I mean, you realise that "putting the CEO and other officers in jail" is something you can legally do, yeah?
[16:50:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:50:14] <dminuoso> maerwald: Yes, that's the funny bit.
[16:50:16] <merijn> Gurkenglas: It's not just about financial blowback
[16:50:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5)
[16:50:32] <Gurkenglas> merijn, we can include them being put in jail in the one-million-crashes-bankruptcy
[16:50:55] <Gurkenglas> aka, we still want them to guard harder against 10 million.
[16:51:30] <int-e> Gurkenglas: we *need* the jail part. bankruptcies largely don't hit management very hard... they just need to find a new job
[16:51:33] <Gurkenglas> and the insurance helps because then ten million would bankrupt the entire insurance industry when one million wouldn't
[16:51:33] <maerwald> and in automotive and related industries, there's already functional safety engineers overseeing every single software project
[16:51:41] <merijn> Gurkenglas: 10 million crashes due to the same error is not what I'm worried about
[16:51:49] <maerwald> so it wouldn't change that much
[16:52:01] <merijn> Gurkenglas: It's thousands of one-offs due to shitty engineering I worry about
[16:52:16] <merijn> And *nothing* I've heard about the software engineering at Tesla gives me *any* faith in them
[16:52:20] <maerwald> Daimler would just pour more money into formal methods
[16:52:34] <merijn> I wouldn't trust their software engineering process to run my laptop, let alone my car...
[16:52:57] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 240 seconds)
[16:53:18] <nshepperd2> int-e: that's why you require the company to buy insurance against it, so the ongoing insurance premiums are a blight on the CEO's bonuses each year
[16:53:28] <maerwald> the funny thing is... ISO 26262 already says your projects should use formal methods... but because it's "should", not one does it
[16:53:29] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[16:53:34] <dminuoso> merijn: Would you trust Intel's process to design secure processors to execute code on your laptop? They have a stellar record of optimized silicon and super safe management engines...
[16:53:40] <nshepperd2> people are bad an assessing risk of rare events like going to jail and tend to discount it
[16:54:08] <merijn> dminuoso: I don't trust *anybody* in this goddamn industry >.<
[16:54:41] <merijn> The whole industry is *at best* wildly negligent
[16:54:45] <Gurkenglas> merijn, why do you think (afaic) they should be punished for accidents even when they have less accidents than there would be in the absence of self driving?
[16:54:50] <int-e> nshepperd2: *can* you insure that? The worst case scenario is, as hpc said, "the same accident a million times" (around the same time).
[16:54:51] <merijn> At worst it's criminally incompetent
[16:55:32] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[16:55:34] <dminuoso> If only incompetence was criminal
[16:55:37] <merijn> Gurkenglas: I don't think they should be punished for accidents. I think accidents should be investigated and they should be punished when investigation shows the accident happened due to negligent safety measures
[16:55:39] <maerwald> well, we're in a crisis, because we have no idea of what software engineering really is... and Haskell didn't fix it :p
[16:55:43] <int-e> dminuoso: ouch
[16:56:05] <merijn> dminuoso: Well, I don't know about Germany, but "gross negligence" is criminal in most jurisdictions :p
[16:56:08] <int-e> dminuoso: I mean, have you thought that through? :)
[16:56:20] <nshepperd2> hmm the insurance company would need to have deep pockets
[16:57:02] <merijn> I would argue most of the tech industry is  maybe not outright in that section, but certainly "consistently skirting the edges of gross negligence"
[16:57:10] <Gurkenglas> the entire point of insurance companies is that they deepen your hypothetical pockets. if it were only about 1-1000 accidents they could be their own insurance
[16:58:02] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 240 seconds)
[16:58:20] <merijn> Gurkenglas: The point of liability legislation is to figure out who is responsible and punish them. Currently if you have a self-driving cars manufacturers can blindly shove blame to the driver (unless manufacturing defect/failure). If we get self-driving cars, clearly we can't hold the *driver* liable, it is a computer program
[16:58:25] <int-e> But insurance companies aren't bottomless either.
[16:58:33] <merijn> So who *should* be liable? The owner? The creator of said program?
[16:59:06] <maerwald> my manager
[16:59:13] <maerwald> =)
[17:01:49] <Gurkenglas> merijn, i suppose it should be specified in the contract that the owner signed when he bought the vehicle from the employer of the creator of the program. if it's not, a judge would have to extrapolate what it would have said... which shouldn't be a deterministic decision, so in that case I'd hope both parties must pay a portion of the damages corresponding to the probabilities of how the contract would have 
[17:01:49] <Gurkenglas> looked. 
[17:02:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:02:38] <merijn> You seem to only worry about money, which is in itself worrying, tbh
[17:02:57] <Gurkenglas> Money is the unit of caring!
[17:03:23] <merijn> Gurkenglas: Sure, but also a poor deterrent against crime
[17:03:30] <merijn> There's a reason we don't punish murder with a fine
[17:03:31] <geekosaur> merijn, if it doesn't come down to money, it doesn't happen in this world
[17:03:48] <merijn> geekosaur: I mean...criminal liability is generally not about money :)
[17:03:58] <merijn> Well, depending on how corrupt your country is...
[17:04:12] <Gurkenglas> Some countries used to. But sure, we can also proportionally split up the non-monetary punishment.
[17:04:22] <geekosaur> you can generally assume maximum corruption, it just takes different shapes
[17:04:30] <maerwald> merijn: hmm... pharma companies get fined all the time for things that might be actual crimes :p
[17:04:30] <Gurkenglas> 3 whip lashes for the driver, 7 for the CEO.
[17:05:10] <geekosaur> ahah. assume that gets reversed
[17:05:43] <dminuoso> And the CEO can also spend portions of CO2 certificates as a subsitute for lashes.
[17:06:13] <dminuoso> Deductible in his or her annual tax report
[17:06:14] <Gurkenglas> those can be bought with money. if the CEO thinks the programmer was responsible, he can lash the programmer in turn.
[17:06:55] <dminuoso> It's a good thing that the question of guilt is not decided by each individual then.
[17:07:08] <Gurkenglas> the programmer should have read the employment contract fine print.
[17:07:17] <dminuoso> Gurkenglas: Though amusingly, what you just described is exactly what happened at Volswagen.
[17:07:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[17:07:25] <nshepperd2> let's all lash each other preemptively
[17:07:42] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:07:53] <dminuoso> "We didn't know anything about the emission scandal. It was some evil mid level programmers"
[17:09:38] <maerwald> dminuoso: it's usually something in between... increased deadline pressure to the point that programmers can't deliver without cutting on e.g. safety processes. I've been in such a meeting, no one said directly "yes, cut on the safety process", but everyone knew that's what we have to do
[17:10:35] <Gurkenglas> if only we could whip the coordination problem.
[17:10:39] <dminuoso> maerwald: I specifically meant the official statements from VW leadership that "the management was completely unaware, and that it was petty criminal software people who came up with it"
[17:10:58] <dminuoso> That did happen at some point.
[17:11:23] <maerwald> dminuoso: well, you could say management told them to do something that isn't possible and the employees came up with a criminal solution that management didn't WANT to know about :p
[17:11:44] <maerwald> now the question is... did they really know the specifics? Maybe not
[17:12:07] <maerwald> But they knew something unorthodox was gonna happen
[17:12:48] <dminuoso> maerwald: Considering that seemingly half the other producers in the world came up with the same idea... it seems very unconvincing.
[17:13:59] *** Joins: davros (~davros@host86-184-180-214.range86-184.btcentralplus.com)
[17:14:35] <Gurkenglas> when you always take the cheapest of three offers you will select for people willing to be criminal in order to be cheaper. maybe that itself should make you more liable.
[17:18:40] <merijn> btw
[17:19:16] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[17:19:54] <merijn> Anyone know where Gabriella got the name Dhall from?
[17:20:55] <Taneb> It's a kind of curry I think
[17:21:17] <maerwald> Dal bhat? :o
[17:23:58] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 250 seconds)
[17:26:26] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[17:28:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:32:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[17:35:39] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[17:35:45] *** Quits: slack1256 (~slack1256@191.126.99.84) (Remote host closed the connection)
[17:39:39] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:40:17] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 240 seconds)
[17:41:51] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[17:44:57] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Ping timeout: 240 seconds)
[17:48:36] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[17:51:51] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[17:54:06] *** Joins: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4)
[17:55:36] <texasmynsted> naming is difficult
[17:56:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:56:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:56:32] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:37] *** Quits: ksqsf (~user@2001:da8:d800:604:9875:4b6c:862:bfd4) (Ping timeout: 240 seconds)
[17:59:10] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[17:59:10] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Client Quit)
[17:59:38] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[18:00:07] <timCF> Hello! Any ideas why it's like this? I don't see why this is logical or correct https://gist.github.com/tim2CF/e63c7ff792e26362f356e71c47319494
[18:00:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:01:06] <merijn> interesting
[18:01:21] <merijn> @hoogle round
[18:01:21] <lambdabot> Prelude round :: (RealFrac a, Integral b) => a -> b
[18:01:21] <lambdabot> GHC.Real round :: (RealFrac a, Integral b) => a -> b
[18:01:21] <lambdabot> Test.Hspec.Discover round :: (RealFrac a, Integral b) => a -> b
[18:01:57] <merijn> oh
[18:02:40] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[18:02:43] <merijn> round's default implementation uses - the denominator
[18:02:46] *** Joins: cfricke (~cfricke@user/cfricke)
[18:03:07] <leibniz> [exe] sorry i was afk, yes, not really used to doing traversals that are not mapAccumL
[18:03:09] <merijn> I suspect that underflows, since it results in a negative numerator/denominator, which you can't have with Natural
[18:03:29] <leibniz> not really sure how else traversals are actually used...
[18:03:32] <merijn> Rational works, because Rational is "Ratio Integer" and thus does allow negative numerators/denominators
[18:04:31] <leibniz> at least its the Applicative that in question, rather than the traversable itself, which is a "monadic list" (you could have ambiguity in terms of what that means, but for now lets just consider it to be a list where the tail is wrapped in a monda)
[18:04:32] <merijn> timCF: The only way to fix that would be to change the RealFrac instance of Ratio to not use signum
[18:04:43] <merijn> timCF: Which seems like a lot of work
[18:05:27] <leibniz> the point is that for IO, the blocking tail call, eg doing a stream of server requests, should not be used with strict State
[18:05:31] <merijn> timCF: Anyway, this is why Natural is generally considered a pretty bad type to use in "real" code
[18:05:32] <dminuoso> merijn: But round has a specific implementation for `instance  (Integral a)  => RealFrac (Ratio a)  where` which does not use signum
[18:05:40] <dminuoso> Am I not seeing something here?
[18:05:53] <merijn> oh, I didn't check that far
[18:05:57] <merijn> But what does it use?
[18:06:05] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Real.html#line-522
[18:06:23] <merijn> dminuoso: Yeah, that has an obvious underflow
[18:06:42] <timCF> merijn: yeah. Spent couple of hours wondering round why my code (pure part) is blowing up
[18:06:52] <merijn> ah, wait, no, it depends on how it gets evaluated
[18:07:02] <dminuoso> merijn: What line are you looking at in particular?
[18:07:14] <leibniz> i mean, what other applicatives do people even used during a traversal?
[18:07:19] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[18:07:24] <lortabac> merijn: https://github.com/dhall-lang/dhall-lang#name
[18:07:55] <timCF> merijn: I actually like to use Natural. What is bad is not Natural itself, but Num instance of Natural..
[18:08:03] <dminuoso> leibniz: Can you restate that question?
[18:08:07] <merijn> dminuoso: I was thinking the -1 but that should be lazy
[18:08:07] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[18:08:16] <leibniz> i guess i want input since i dont want my lack of experience to lead me to think that mapAccumL is the only use case for monadic traversals, which is the current conclusion, and motivates the presentation as via "scanners" rather than the commuting constructor/monad issue
[18:08:43] <merijn> timCF: You *inevitably* want to subtract from Natural and then you're in Partialsville, population: bottom
[18:08:45] <leibniz> dminuoso: im not sure which part your referring too
[18:09:22] <leibniz> how else people coomonly use traversals?
[18:09:23] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[18:10:08] <leibniz> commonly*
[18:10:33] <dminuoso> leibniz: Dunno, the entire question is confusing and unclear to me.
[18:11:06] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[18:11:14] <leibniz> i want to know what other applicatives people use, other than StateL in mapAccumL, which is the only thing *I* use
[18:11:34] <leibniz> im not sure if there is a reason for that, based on the lazy consumption of monadic lists
[18:11:39] <leibniz> or if there is another example
[18:11:58] <lortabac> leibniz: what is StateL?
[18:11:59] <timCF> merijn: and there is no way to have simple (without Maybe/Either) subtract action over Naturals? Compiler just need to know that "a" is proven to be not less than "b"
[18:12:01] <dminuoso> Const, Identity, IO, State, List, plenty of monad transformer stacks..
[18:12:24] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:12:32] <leibniz> ok, but those dont all lazily commute with the constructor
[18:12:42] <dminuoso> What does that even mean?
[18:12:44] <leibniz> so dont cout as "lazy applicatives" or something...
[18:13:05] <leibniz> leibniz: imagine your tail is wrapped in IO, because its a server call
[18:13:13] <leibniz> then the tail call is blocking
[18:13:28] <leibniz> so you need the constructor to commute with the applicative for it to be lazy
[18:13:33] <dminuoso> I do not understand what that means.
[18:13:35] <leibniz> otherwise it tries to traverse the whole list
[18:13:37] <leibniz> which blocks
[18:14:02] <leibniz> the "tail is on a server" ? basically its that you have a "get" request, which is like head
[18:14:12] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:14:25] <leibniz> this is the whole use case for IO monadically wrapped tail lists that im working with with the scanners
[18:15:10] <leibniz> as you deconstruct it, because the tail is wrapped in IO, it captures this, since matching the tails head obviously has an IO
[18:15:26] <merijn> timCF: Just is doing *a lot* of work in that sentence ;)
[18:15:42] <dminuoso> leibniz: I give up, I can't make heads or tails (heh, that pun) of what you're sayiing.
[18:15:56] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:15:57] <dminuoso> I dont mean this offensively, but to me this reads as gibberish.
[18:15:59] <leibniz> it would be a whole lot more useful if you could at least try to explain why
[18:16:12] <dminuoso> leibniz: The entirety of what you're saying reads gibberish.
[18:16:24] <dminuoso> I feel like Im being pranked by a markov chain.
[18:16:24] <leibniz> dminuoso: its not offensive, just unhelpful.
[18:16:37] <dminuoso> leibniz: Can you give a concrete example perhaps?
[18:16:50] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 250 seconds)
[18:17:05] <leibniz> well what i said before wasnt clear to you, which i think could be because you dont specify what your asking
[18:17:10] <merijn> leibniz: eh...*which* mapAccumL?
[18:17:19] <leibniz> so, a concrete example of *what*?
[18:17:26] <merijn> leibniz: Because the mapAccumL *I* look at doesn't even use Applicative?
[18:17:28] <dminuoso> Of anything amounting to your questions?
[18:17:44] <leibniz> yeah, im sorry that your not helping
[18:17:57] <leibniz> merijn: sure it does
[18:18:01] <merijn> leibniz: No?
[18:18:15] <leibniz> its implementation is in terms of StateL, right? ill find the source hang on
[18:18:22] <merijn> "Traversable t => (s -> a -> (s, b)) -> s -> t a -> (s, t b)"
[18:18:33] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:18:57] <leibniz> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Traversable.html#mapAccumL
[18:19:04] <leibniz> mapAccumL f s t = coerce (traverse @t @(StateL s) @a @b) (flip f) t s
[18:19:20] <merijn> leibniz: Which applicative do you see in that type?
[18:19:25] <leibniz> StateL
[18:19:40] <leibniz> er, or `StateL s'
[18:19:55] <merijn> That's the implementation of mapAccumL, not something you use *with* mapAccumL?
[18:20:00] <leibniz> StateR wouldnt work with the blocking tail call
[18:20:22] <leibniz> mapAccumL is a traversable using the StateL Applicative
[18:20:27] <leibniz> a traversal*
[18:20:32] <merijn> Ok, sure
[18:20:33] <merijn> And?
[18:20:39] <leibniz> and StateR isnt Lazy
[18:20:50] <merijn> These are statements, not really questions?
[18:20:51] <leibniz> and i need examples of other useful applicatives that are
[18:20:52] <dminuoso> First lets address accuracy of the language.
[18:20:56] <dminuoso> mapAccumL is not a traversable
[18:21:17] <leibniz> this wasnt implied
[18:21:17] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 240 seconds)
[18:21:17] <dminuoso> It's `* -> *` kinded typed that can be traversable, not value level identifiers.
[18:21:27] <leibniz> im aware
[18:21:39] <dminuoso> I just want to raise some points to avoid potential confusoin down the line here.
[18:21:44] <leibniz> sure
[18:22:08] <leibniz> do you understand the question now?
[18:22:11] <merijn> leibniz: Are you asking "which Applicatives do people use with 'traverse'?", because then dminuoso already answered
[18:22:13] *** Joins: sha296 (~shakil@2409:4060:2e1a:fe17:1c57:6d0d:de58:2ca6)
[18:22:21] <merijn> i.e. "literally all of them"
[18:22:28] <leibniz> those ones arent lazy with blocking IO tails
[18:22:31] <merijn> Maybe, Either, IO, Const, State, etc.
[18:22:42] *** Joins: iteratee (~kyle@162.218.222.107)
[18:22:44] <leibniz> right, im aware other applicatives exist
[18:22:46] <dminuoso> leibniz: The expression "blocking IO tails" still confuses the heck out of me.
[18:22:47] <merijn> What is "a blocking IO tail"?
[18:23:02] <leibniz> this was "where the tail is on a server"
[18:23:10] <merijn> What tail, what server
[18:23:22] <leibniz> thats an IO opperation, server communication
[18:23:28] <merijn> You seem to be skipping a whole lot of context that just exists in your brain?
[18:23:33] <leibniz> so eg it could issue values each second
[18:23:46] <merijn> leibniz: I have no clue how those things relate to traverse, tbh
[18:23:59] <leibniz> well because if its blocking you cant traverse from the right
[18:24:13] <leibniz> thats this lazyness ~ comuting the constructor with the applicative issue
[18:24:14] <merijn> If *what* is blocking?
[18:24:18] <leibniz> the tail call!
[18:24:23] <merijn> What tail call?
[18:24:33] <leibniz> implementing traverse matching on the head
[18:24:41] <merijn> ??
[18:24:44] <leibniz> which gets the next value from the server
[18:24:44] <dminuoso> leibniz: I urge you to start anew, you're using a lot of non-conforming terminology that seems bizarre without context.
[18:25:15] <merijn> leibniz: traverse is a method implemented for types that are Traversable. Whether there is a sensible interpretation depends on the type you implement Traversable for...
[18:25:17] <dminuoso> Present a code example of what you mean by "blocking IO tails" 
[18:25:28] <lortabac> leibniz: I don't understand what you are saying, but are you sure you are not reinventing conduit/pipes/streaming?
[18:25:29] <dminuoso> And what problems you conceive
[18:25:36] <merijn> leibniz: You are mentioning things that aren't related to Traversable at all
[18:25:42] <dminuoso> lortabac: Interesting.
[18:25:43] <leibniz> well, currently the question being asked is "why have monadic lists in practice, when are they blocking, when do we need lazyness"
[18:25:44] <lortabac> this "blocking IO" thing makes me think of streaming
[18:25:50] <dminuoso> lortabac: What is a "monadic list"?
[18:25:54] <dminuoso> Err leibniz ^-
[18:26:01] <dminuoso> But yes
[18:26:05] <leibniz> you just wrap the tail in a monad
[18:26:11] <dminuoso> Sorry
[18:26:17] <dminuoso> This is too much gibberish for me now.
[18:26:27] <maerwald> "wrap the tail inn a monad"
[18:26:49] <merijn> Again, what tail? what monad?
[18:26:51] <dminuoso> I do believe you dont have bad intentions, but you're throwing so much gibberish intermixed with random haskell words around - I can literally feel the confusion in your head.
[18:26:53] <leibniz> data MList' m a = MNil | a `MCons` MList m a
[18:26:53] <leibniz> type MList m a  = m (MList' m a)
[18:26:54] <leibniz> newtype ListT m a = ListT { runListT :: MList m a }
[18:27:00] <leibniz> https://wiki.haskell.org/ListT_done_right
[18:27:05] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:4860:ab29:df65:d349)
[18:27:10] <leibniz> the archetypal monadic list implementation
[18:27:21] <merijn> leibniz: If you are asking about ListT, you should probably mention that at the start
[18:27:31] <dminuoso> But yes, I do think lortabac is on a right track
[18:27:41] <leibniz> last time i did that people suggested many other equivalent implementations
[18:27:46] <dminuoso> If I put together all the fragments I did understand from leibniz, I think they are looking for streaming libraries.
[18:28:05] <leibniz> what i mean is any one of those, these are easily described as lists where the tail is wrapped in a monad
[18:28:21] <dminuoso> leibniz: You should stop using the term "tail" here.
[18:28:22] <leibniz> dminuoso: it would be misleading to suggest that
[18:28:28] <dminuoso> I dont know.
[18:28:30] <dminuoso> You're misleading.
[18:28:47] <maerwald> leibniz: https://github.com/composewell/streamly/blob/master/docs/streamly-vs-lists.md
[18:28:55] <leibniz> im asking for examples of lazy states... not streaming libraries, which would be "why does he not need his question answered"
[18:29:10] <leibniz> and promotes comments like maerwalds
[18:29:20] <leibniz> declining which makes me seem rude
[18:29:23] <leibniz> i appologise
[18:29:47] <leibniz> ill read the link, but i think its an asside
[18:30:03] <maerwald> you asked for lists
[18:30:27] <leibniz> i didnt! i specifically asked not to have alternative implementations, ListTdone right is fine
[18:30:48] <leibniz> we are talking about a class all such things would instantiate
[18:30:53] <leibniz> im not after other instances
[18:31:06] * shapr gets the spray bottle
[18:31:07] <leibniz> its about how to express the *class*
[18:31:35] <maerwald> a class that wraps tails in a Monad?
[18:31:43] <shapr> be nice peoples
[18:31:46] <dminuoso> leibniz: Mind my asking, what is your primary language?
[18:31:53] <dminuoso> I have a feeling we have a language barrier issue at work.
[18:32:05] <leibniz> english!
[18:32:08] <dminuoso> Interesting.
[18:32:17] <leibniz> no worries
[18:32:37] <leibniz> i think this article uses a different term for what is meant for "stream"
[18:32:41] *** Quits: max22- (~maxime@2a01cb0883359800a4d68ab29ac6e773.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:33:00] <leibniz> which i have also seen used to mean "strictly infinite lists"
[18:33:20] <leibniz> which are actually a good example if you dont want to consider IO tails
[18:33:55] <leibniz> ie, it needs a "lazy applicative" (the thing im asking for other examples of other than StateL)
[18:34:02] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[18:34:06] <leibniz> since it also cannot be traversed from the right
[18:34:13] <leibniz> which is the common issue
[18:34:23] <leibniz> it not having a basecase if its strictly infinite
[18:34:34] <leibniz> similar to if the tail call is blocking
[18:34:49] <leibniz> so the constructor needs to commute with the applicative
[18:34:53] <leibniz> basically...
[18:35:12] <leibniz> im not even really sure why it works with StateL
[18:35:39] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[18:36:01] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:36:19] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:36:41] <lortabac> leibniz: when you say "traversing from the right", do you mean applying a right-associative operation as foldr does, or traversing the sequence backwards?
[18:37:38] <leibniz> i think actually im cheating when i say that, by failing to phrase this issue to do with not having access to the tail. basically what you want is that it doesnt try to traverse the whole thing
[18:38:21] <dminuoso> "access to the tail"
[18:38:22] <leibniz> for a strictly infinite list, the right associative operation would fail, right?
[18:38:44] <leibniz> dminuoso: yes, since its wrapped in a monad, it might block
[18:38:48] <leibniz> if that monad is IO
[18:38:49] <dminuoso> leibniz: No, it would not. In fact we can foldr over infinite lists just fine.
[18:38:57] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:39:05] <dminuoso> leibniz: What's wrong with blocking?
[18:39:17] <dminuoso> Seriously, can you present a concrete example?
[18:39:19] <dminuoso> Some data structure, some code
[18:39:26] <leibniz> thats what i was worried about, its not actually the right associative thing, its the "having to reach the basecase"
[18:39:38] <dminuoso> Whose basecase?
[18:39:56] <dminuoso> Let's make things less polymorphic, lets pick a particular traversable
[18:39:59] <dminuoso> Is lists okay?
[18:40:01] <leibniz> https://github.com/fog-hs/streaming-binary-files-take2
[18:40:24] <leibniz> lists is certainly not ok
[18:40:29] <leibniz> it doesnt have the issue
[18:40:52] <leibniz> if you dont like this "blocking" issue, with the IO monad, then just use a "strictly infinite list"
[18:41:17] <leibniz> data Infinite a = Cons a (Infinite a)
[18:41:39] <leibniz> the "lack of basecase" here is what i meant
[18:41:46] <leibniz> lack of empty list
[18:42:02] <leibniz> for the inductive recusion in the datatype definition, has no basecase
[18:42:29] <leibniz> sorry, i kind of assume things like that are obvious
[18:42:36] <leibniz> haskell being my first language
[18:43:07] <shapr> I'm slightly envious
[18:43:39] <merijn> Slight interlude: What's my best option for fixed-length containers with length in the type? sized-vector?
[18:43:49] <dminuoso> sized-vector is a good pick, yes
[18:44:10] *** Joins: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr)
[18:44:18] <dminuoso> merijn: Though ideally Id also ask what kind of library support you expect from functions interacting with that.
[18:44:22] <merijn> dminuoso: Ah, wrong package...I was thinking of a different one, but forget the name
[18:45:00] <dminuoso> vector-sized?
[18:45:12] <merijn> dminuoso: I am writing a data structure that needs to handle N-dimensional indices/vectors. I would like to statically enforce that a data structure operating on 3-dimensional points only accepts 3-dimensional arguments
[18:45:21] <dminuoso> Also fixed-vector
[18:45:38] <dminuoso> could be that I confused vector-sized with sized-vector as well
[18:45:46] <merijn> So I don't really need any inconvenient resizing operations
[18:46:42] <dminuoso> merijn: is this math heavy? Or could you just use a Map polymorphic over a key?
[18:47:12] <merijn> dminuoso: Map is a pain, need lots of pointwise numerics
[18:47:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:47:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:48:18] <dminuoso> merijn: What about https://hackage.haskell.org/package/tensor ?
[18:48:31] <dminuoso> havent taken a closer look, but it seems to match your description
[18:48:53] <merijn> dminuoso: vector-sized covers pretty much all I need and seems easier, though?
[18:49:19] <dminuoso> merijn: If that works, then great! :)
[18:49:59] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:51:07] *** Quits: fendor_ (~fendor@91.141.44.222.wireless.dyn.drei.com) (Remote host closed the connection)
[18:51:48] <leibniz> the thing i dont understand is about which applicatives commute with the constructor like StateL does
[18:52:16] <leibniz> this is the reason for presenting it as scanners, basically just a monadic version of mapAccumL
[18:52:28] <leibniz> instead of with this commutation condition via a superclass
[18:52:39] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:52:40] <leibniz> if i had other examples, it might motivate the more general approach
[18:53:13] <leibniz> otherwise you basically lose Traversable, and just end up with Scannable (implement the monadic version of mapAccumL)
[18:54:11] <leibniz> the "proposal", if i cant find any other examples, then just uses this StateL/Scanner thing
[18:54:32] *** Quits: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr) (Ping timeout: 240 seconds)
[18:54:35] <leibniz> and says something like "you dont traverse monadic tailed lists, you scanner them"
[18:55:16] <leibniz> "unless something something applicative commutes with the constructor" (which i havent quite developed - not having the examples im asking for)
[18:56:07] *** Joins: mmalter (~mmalter@88.126.10.237)
[18:56:22] <leibniz> obviously for something simple like Identity, you can write the commutation relation no bother
[18:56:32] <leibniz> but thats not a useful example
[18:57:20] *** Quits: sha296 (~shakil@2409:4060:2e1a:fe17:1c57:6d0d:de58:2ca6) (Quit: Leaving)
[18:57:46] <leibniz> https://github.com/fog-hs/streaming-binary-files-take2/blob/master/Stream/StackM.hs#L116
[18:58:52] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[18:59:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:00:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:02:36] <leibniz> i guess thats strictly infinite as well as monadic, since it requires (s -> a -> m ( b, s)), not (s -> a -> m (Maybe (b, s)))
[19:02:48] <leibniz> i think...
[19:03:21] <leibniz> no wait thats wrong nvm
[19:04:04] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 250 seconds)
[19:04:16] *** Joins: razetime (~quassel@49.207.209.26)
[19:04:17] *** Joins: CHUD (~CHUD@edu7895.kent.ac.uk)
[19:04:33] <leibniz> basically i think the point is that its given f :: (s -> a -> m (b, s)), instead of phrasing this using the Applicative StateL
[19:05:25] <leibniz> and it maps into the monad on line 119, and does the get + set just fine using the function g, which uses f
[19:06:31] <leibniz> the problem would be if it were some other thing, not an f of this form, which i guess is that of the applicative function in StateL
[19:06:48] <leibniz> not sure if anyone is following at this point so ill hold back for a minute
[19:18:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:19:05] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994d82e117d25e75bd889.dip0.t-ipconnect.de)
[19:19:29] *** Joins: ezyang (~ezyang@ool-18b820e3.dyn.optonline.net)
[19:19:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:19:45] <ezyang> hey everyone, for a "modern" installation of haskell, should I expect mtl to be visible
[19:20:03] <ezyang> as in, if someone takes a hs file and just runs ghci on it
[19:20:37] <dminuoso> ezyang: Mmm, in my modern installation I assume nix-style cabal projects for everything.
[19:21:06] <ezyang> trying hard not to force my students to use cabal ^^"
[19:22:08] <dminuoso> The tooling for v2- is very inadequate for this basic exploration style of "make a hs file and run it through ghci" :(
[19:22:28] <ezyang> stepping back a moment: modern installation is using ghcup, right?
[19:22:37] <dminuoso> ezyang: Id expect boot libraries to be visible as a minimum
[19:22:52] <ezyang> yeah, I thought mtl was a boot library, but maybe not anymore?
[19:22:58] <lortabac> ezyang: on GHC 8.10.7 I don't need cabal to use mtl
[19:22:58] <dminuoso> ghcup seems to be the currently preferred method based on my highly based observational skills
[19:23:10] <ezyang> hmm ok
[19:23:14] <ezyang> useful data point
[19:23:19] <dminuoso> *highly biased 
[19:23:21] <maerwald> even for ghc 9.2.1, mtl is still packaged with GHC
[19:23:33] <ezyang> on my jank ghcup install mtl was hidden
[19:23:40] <ezyang> but I had an environment file smh
[19:23:56] <ezyang> so maybe that was just self inflicted
[19:23:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:24:04] <ezyang> I also managed to install quickcheck twice into the environment file T.T
[19:24:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:25:40] <ezyang> oh nooo my template haskell code needs updating lol
[19:25:43] *** Quits: xff0x (~xff0x@2001:1a81:5370:cd00:aa5:136f:1b20:712a) (Ping timeout: 268 seconds)
[19:26:16] *** Joins: xff0x (~xff0x@port-92-193-184-123.dynamic.as20676.net)
[19:27:06] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:27:34] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 268 seconds)
[19:28:36] <merijn> ezyang: There's a compat library that's fairly easy
[19:28:43] *** Quits: CHUD (~CHUD@edu7895.kent.ac.uk) (Ping timeout: 256 seconds)
[19:28:51] <merijn> @hackage th-compat
[19:28:51] <lambdabot> https://hackage.haskell.org/package/th-compat
[19:29:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:30:02] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[19:31:18] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:33:43] <SrPx> Can I configure Rust to just show the panic message when it panics on release, instead of a long: << thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: "PANIC_MESSAGE"', src/file.rs:xx:yy >>
[19:34:18] <ezyang> wrong channel
[19:34:33] <SrPx> ops, sorry
[19:35:01] *** Joins: alp (~alp@user/alp)
[19:36:46] *** Joins: alx741 (~alx741@157.100.93.160)
[19:38:15] *** Joins: max22- (~maxime@2a01cb0883359800fbaebbbb888c1e29.ipv6.abo.wanadoo.fr)
[19:39:54] <ezyang> is there an easy way to tell what template-haskell version corresponds to what ghc version
[19:40:00] *** Joins: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr)
[19:40:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:40:46] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:25bb:89ab:830f:7e39) (Quit: WeeChat 2.8)
[19:41:08] <maerwald> ezyang: https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history
[19:41:10] <ezyang> ah the changelog
[19:41:13] <ezyang> thx!
[19:41:37] <maerwald> ghcup shows the corresponding base version only
[19:42:27] *** Quits: akegalj (~akegalj@89-172-25-196.adsl.net.t-com.hr) (Client Quit)
[19:43:57] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[19:44:09] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[19:44:28] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[19:44:35] <romesrf> hey everyone
[19:46:14] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[19:46:26] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[19:47:26] <romesrf> I was just now thinking about how my dad was saying haskell wasn't readable for programmers without functional experience, and he was looking at some program that in between some other things did: addValue x \n updateValue id y
[19:48:02] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[19:48:10] <romesrf> then i wrote updateValue' = uncurry updateValue (out of sight)
[19:48:27] <romesrf> and rewrote addValue(x) \n updateValue(id, y), and he said "oh that's much better"
[19:48:34] <romesrf> :p
[19:50:00] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:51:57] *** Quits: razetime (~quassel@49.207.209.26) (Ping timeout: 256 seconds)
[19:52:21] *** Joins: CHUD (~CHUD@edu7895.kent.ac.uk)
[19:54:15] <ezyang> merijn: actually, turns out I hadn't even gotten here yet lol
[19:54:36] <ezyang> now I'm at ghc 9 compat and ... I kind of don't wanna do it haha
[19:55:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:38] *** Joins: lispy (~lispy4@84.69.59.93)
[19:55:41] *** Joins: khanred (~khanred@user/khanred)
[19:56:47] *** Joins: alx741 (~alx741@157.100.93.160)
[19:58:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:59:19] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:59:32] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2d26) (Ping timeout: 250 seconds)
[19:59:38] *** Parts: khanred (~khanred@user/khanred) (Leaving)
[19:59:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:00:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:01:48] <merijn> ezyang: It was fairly painless for me, but I only had fairly simple code
[20:02:22] <merijn> ezyang: Mostly adding the th-compat dependency and sprinkle a handful of type synonyms/lift functions throughout
[20:04:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:06:17] <Hecate> https://twitter.com/jckarter/status/1485651876825559041
[20:06:18] <Hecate> hahahaha
[20:06:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[20:10:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:10:11] <ezyang> ok it turns out
[20:10:16] <ezyang> I was not broken by typed splice changes
[20:10:24] <ezyang> but by the generalization of quasiquote monad signature
[20:10:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Ping timeout: 240 seconds)
[20:11:08] <Hecate> oh hey ezyang :)
[20:11:20] <ezyang> sup
[20:12:06] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 250 seconds)
[20:13:00] <merijn> ezyang: That's what I was assuming :p
[20:13:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:13:15] <merijn> th-compat should make that easy to fix, though
[20:14:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:16:02] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[20:18:24] *** Joins: alx741 (~alx741@157.100.93.160)
[20:20:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:21:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[20:23:41] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[20:24:15] *** Quits: CHUD (~CHUD@edu7895.kent.ac.uk) (Ping timeout: 256 seconds)
[20:24:26] *** Joins: razetime (~quassel@49.207.209.26)
[20:27:13] *** Joins: provorny_compsog (~provornyc@2001:470:69fc:105::1:74df)
[20:28:17] <EvanR> romesrf, actually i have similar experience, before they even get to laziness, type systems, purely functionalism, immutable algebraic data types, etc etc etc etc, they can't get past the fact that foo(x,y,z) is written f x y z
[20:28:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:28:45] <EvanR> *if you think that's bad, don't try lisp*
[20:29:46] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:29:57] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[20:30:18] *** Quits: razetime (~quassel@49.207.209.26) (Ping timeout: 250 seconds)
[20:30:44] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:31:14] *** provorny_compsog is now known as Sixto[m]
[20:31:42] <EvanR> I there was some backlash in recent years at how ruby lets you write f x, y, z OR f(x,y,z) and now people demand the second one for there's one way to do it sake
[20:31:53] *** Joins: CHUD (~CHUD@edu7895.kent.ac.uk)
[20:32:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:32:16] <maerwald> at least you can have a decent formatter then
[20:32:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:33:01] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[20:35:10] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[20:35:38] *** Joins: lispy (~lispy4@84.69.59.93)
[20:36:36] *** Joins: alx741 (~alx741@157.100.93.160)
[20:38:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[20:38:41] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[20:39:06] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[20:40:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:41:07] <dsal> I thought the "no parens" thing was kind of silly as well until I realized you could also write `g = f x` and then later do stuff like `map g zs` -- the sort of thing you can' sensibly do in the languages that were more "comfortable" due to parentheses.
[20:42:47] <c_wraith> you mean in that automatic currying is weirder in languages that require parens on function calls?
[20:43:10] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:43:42] <EvanR> function f(x,y,z){...}, f.pleaseAutomaticallyCurry(x,y)...
[20:43:51] <EvanR> since f(x,y) makes z undefined
[20:44:12] *** Joins: log101 (~log101@212.125.22.146)
[20:44:39] *** Quits: ezyang (~ezyang@ool-18b820e3.dyn.optonline.net) (Ping timeout: 256 seconds)
[20:45:49] <dsal> c_wraith: Yeah.  Like, purescript does it, but you end up writing   f(x)(y)(z)  which is… better?
[20:46:24] <dsal> (not purescript the language, just the way it compiles to javascript so your JS code calling PS looks like that)
[20:46:52] <EvanR> that can't be a good way to implement curried functions in js...
[20:46:58] <EvanR> efficiency wise
[20:48:07] <dsal> The translation seems to be really straightforward.  The JS code looks a lot like how you'd imagine the PS code looking, just with more ()s and {}s.  But it did seem weird.
[20:51:32] <c_wraith> EvanR: in the case of compiling to JS, it seems like the approach that would keep your code the smallest. Otherwise you'd need different wrappers for each arity
[20:52:11] <EvanR> each arity and the eventual "unknown arity arity" like ghc
[20:53:20] <c_wraith> unknown arity gets taken care of by the 1-arity case
[20:54:25] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-b88c-5e22-9d18-391e.res6.spectrum.com)
[20:56:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[20:57:02] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:57:11] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[20:58:51] *** Joins: raym_ (~raym@user/raym)
[20:58:58] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[20:59:01] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[20:59:08] *** Joins: alx741 (~alx741@157.100.93.160)
[21:02:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:03:18] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:04:23] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:05:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:05:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:07:11] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:10:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:15:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:17:05] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[21:19:50] *** Joins: alx741 (~alx741@157.100.93.160)
[21:21:07] *** Joins: econo (uid147250@user/econo)
[21:21:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-008.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:23:25] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:23:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 268 seconds)
[21:23:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:23:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:23:51] *** Joins: wroathe (~wroathe@user/wroathe)
[21:27:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:28:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:30:33] *** Quits: CHUD (~CHUD@edu7895.kent.ac.uk) (Ping timeout: 256 seconds)
[21:30:39] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:4860:ab29:df65:d349) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:57] *** Quits: raym_ (~raym@user/raym) (Ping timeout: 240 seconds)
[21:31:56] *** Joins: raym (~raym@user/raym)
[21:34:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:35:20] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:38:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:38:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:38:01] *** Joins: wroathe (~wroathe@user/wroathe)
[21:39:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[21:40:32] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:40:43] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:41:31] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 256 seconds)
[21:42:30] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[21:43:05] *** Joins: hololeap (~hololeap@user/hololeap)
[21:43:25] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[21:45:32] *** Joins: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net)
[21:46:28] *** Joins: alx741 (~alx741@157.100.93.160)
[21:47:26] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[21:47:33] *** Quits: tom_ (~tom@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[21:48:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:49:49] *** Quits: yauhsien (~yauhsien@61-231-58-250.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:52:27] *** Joins: Akiva (~Akiva@user/Akiva)
[21:52:37] *** Joins: neceve (~quassel@2.26.93.228)
[21:53:07] *** Joins: log101 (~log101@212.125.22.146)
[21:53:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:54:24] *** polyphem_ is now known as polyphem
[21:56:02] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[21:57:28] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:57:43] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::5d55)
[22:00:28] *** Joins: machinedgod (~machinedg@24.105.81.50)
[22:00:35] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[22:01:55] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:02:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:03:00] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:04:28] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::5d55) (Remote host closed the connection)
[22:05:34] *** Joins: alx741 (~alx741@157.100.93.160)
[22:05:46] *** Quits: iteratee (~kyle@162.218.222.107) (Read error: Connection reset by peer)
[22:07:01] *** Quits: log101 (~log101@212.125.22.146) (Read error: Connection reset by peer)
[22:07:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:08:27] *** Quits: mbuf (~Shakthi@171.61.206.147) (Quit: Leaving)
[22:09:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:13:50] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:14:33] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:14:41] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[22:14:49] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[22:15:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:15:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:15:46] *** Joins: wroathe (~wroathe@user/wroathe)
[22:17:17] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[22:17:30] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930:5437:e43a:e44a:1d0d)
[22:17:50] <polyphem> i have this code, how could one improve it ? https://paste.tomsmeding.com/eJrHywZc 
[22:19:57] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 240 seconds)
[22:19:59] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930:5437:e43a:e44a:1d0d) (Remote host closed the connection)
[22:20:09] <lagash> Rewrite it in Rust! /s
[22:20:13] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:20:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:20:18] *** Joins: iteratee (~kyle@162.218.222.107)
[22:20:37] <[exa]> polyphem: you may remove BangPatterns by using 'det () `seq` pure ()` but well, why improve?
[22:22:12] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[22:22:17] <[exa]> also the \()-> is const
[22:23:13] <polyphem> ok improve, was wrong wording , maybe "extend" ... ?
[22:23:13] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[22:23:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:24:57] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 256 seconds)
[22:25:14] *** Joins: iteratee (~kyle@162.218.222.107)
[22:25:57] <tomsmeding> polyphem: why produce a function taking () ?
[22:26:11] <maerwald> could GHC rewrite all function of the form `f x y = ...` to `f = \x -> \y -> ...`?
[22:26:24] <monochrom> Each "\()" can be replaced by "\_" for both generality and non-strictness.
[22:26:38] <tomsmeding> maerwald: iirc that difference has an influence on inlining behaviour
[22:26:44] <maerwald> tomsmeding: yes
[22:26:44] *** Joins: alx741 (~alx741@157.100.93.160)
[22:26:46] <maerwald> that's why I ask
[22:27:27] <[exa]> polyphem: extend in what direction? (you might autoderive Enum for the fail cases and autoselect a random one, but still, why)
[22:27:35] <geekosaur> also the monomorphism restriction
[22:27:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:28:10] <monochrom> You can also delete all of the "`seq` ()", and instead, in explode, use "evaluate (arm d)".
[22:28:42] *** Quits: zaquest (~notzaques@5.130.79.72) (Read error: Connection reset by peer)
[22:28:46] *** Joins: gentauro (~gentauro@user/gentauro)
[22:28:59] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:29:15] <monochrom> Or rather, "evaluate (arm d ())"
[22:29:17] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[22:29:31] <geekosaur> anyway I think currently ghc is careful *not* to do such rewriting
[22:29:41] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:29:47] <geekosaur> you might ask in #ghc about why/what you might do about it
[22:30:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:30:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:31:09] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:31:09] *** Joins: Brandon_IX (~brandon@178-79-138-117.ip.linodeusercontent.com)
[22:31:44] <polyphem> geekosaur: monomorphism restriction ?
[22:32:23] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (Quit: No Ping reply in 180 seconds.)
[22:33:14] <geekosaur> if a binding has no parameters it will be forced to be monomorphic instead of polymorphic by default, so that sharing works
[22:33:30] <tomsmeding> % :set -XMonomorphismRestriction
[22:33:30] <yahb> tomsmeding: 
[22:33:35] <tomsmeding> % f x = x + 1
[22:33:35] <yahb> tomsmeding: 
[22:33:39] <tomsmeding> % g = \x -> x + 1
[22:33:39] <yahb> tomsmeding: 
[22:33:40] <geekosaur> https://wiki.haskell.org/Monomorphism_restriction
[22:33:40] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[22:33:41] <tomsmeding> % :t f
[22:33:41] <yahb> tomsmeding: Num a => a -> a
[22:33:42] <tomsmeding> % :t g
[22:33:42] <yahb> tomsmeding: Integer -> Integer
[22:34:00] <tomsmeding> (the monomorphism restriction is off by default in ghci, but on by default in a source file)
[22:38:44] *** Quits: benin (~benin@183.82.31.24) (Quit: The Lounge - https://thelounge.chat)
[22:39:00] <polyphem> https://paste.tomsmeding.com/yBWgK3C0
[22:39:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:40:00] <polyphem> monomorphism restriction is "default typing" ?!
[22:40:32] <geekosaur> defaulting is default typing. it helps ghc when it wants to monomorphize and can't do so otherwise
[22:40:56] <geekosaur> `default (Integer, Double)` is the "default default"
[22:41:21] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:41:44] <geekosaur> ghci adds () so the empty list typechecks as *something* when it'd otherwise be ambiguous (see ExtendedDefaultRules)
[22:42:07] <polyphem> ok i see ghc does default typing becase monomorphism restriction has to monomorphize to a concrete type and if none can be infered ghc defaults , right ? 
[22:42:28] <geekosaur> there are also some rules as to which typeclasses defaulting will operate through, which are relaxed under ExtendedDefaultRules
[22:42:33] <geekosaur> yes
[22:42:45] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[22:43:16] <polyphem> i had an vague intuition already, no it has come clear
[22:43:22] <polyphem> now
[22:43:23] *** Joins: alp (~alp@user/alp)
[22:46:13] *** Joins: zaquest (~notzaques@5.130.79.72)
[22:47:14] *** Joins: alx741 (~alx741@157.100.93.160)
[22:47:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-037.wadham.ox.ac.uk)
[22:47:53] <geekosaur> defaulting is also used when ghc or ghci needs to assign *some* type and can't for some reason, e.g. a simple program that does math but never specifies any type signature will get inferred as Integer or Double depending on whether it does division (Double) or not (Integer)
[22:48:25] <geekosaur> since ghc usually can't proceed without assigning some type to an expression
[22:48:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:49:19] <polyphem> geekosaur: yeah , once in a while it has to stick to concrete types
[22:49:42] *** Joins: cynomys (~cynomys@user/cynomys)
[22:50:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:50:05] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 256 seconds)
[22:51:17] <geekosaur> ultimately it has to resolve to a concrete type. for example (+) for Integer is different from (+) for Int is different from (+) for Float is different from (+) for Double. so defaulting helps it resolve the type(s) down to something concrete there is a dictionary for
[22:51:47] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:52:10] <geekosaur> very rarely you will see situations where it doesn't actually need a concrete type, and a weird "type" called Any will pop up
[22:52:11] <polyphem> i had a map of exitential values with some typeclass constraints , and wanted to return the values and pass it on to a polymorphic function with the same constraints , but it didn't let me do it i had to coerce it to a concrete type first .... 
[22:53:15] <polyphem> :t Any
[22:53:16] <lambdabot> Bool -> Any
[22:53:47] <geekosaur> not the same Any, that one is a newtype wrapper for a monoid iirc
[22:54:02] <geekosaur> GHC.Types.Any is a magic type family these days, but used to be even mroe magical
[22:54:08] <polyphem> ok , i wondered for a moment
[22:54:12] <polyphem> :9
[22:56:15] <geekosaur> it's not supposed to be exposed, but every so often it leaks out
[22:56:34] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-b88c-5e22-9d18-391e.res6.spectrum.com) (Remote host closed the connection)
[22:56:57] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-40df-b781-ef29-193a.res6.spectrum.com)
[22:57:41] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/ghc-prim-0.8.0/GHC-Types.html#t:Any
[22:57:59] <polyphem> i am reading the documentation, right now with hdc : unsafeCoerce (unsafeCoerce x :: Any) :: t is equivalent to x.
[22:58:56] <polyphem> do you know hdc , https://lazamar.github.io/haskell-documentation-in-the-command-line/ its fantastic
[23:00:14] <[exa]> ok that's cute
[23:00:56] <polyphem> tmux 3 panes vim/ghcid/hdc ... best ide ever :)
[23:04:41] <xerox> polyphem: what's hdc?
[23:05:19] <polyphem> xerox: haskell-documentation-in-the-command-line ^
[23:05:35] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994d82e117d25e75bd889.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:06:14] <xerox> ah very nice, gonna try it out
[23:07:01] *** Joins: alx741 (~alx741@157.100.93.160)
[23:07:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:07:05] <monochrom> Ugh "solving" the window-switching problem by the terminal-switching "solution".
[23:07:17] <polyphem> one can pich up its usage , quite easy ..
[23:07:48] <polyphem> monochrom: hmm
[23:07:59] <monochrom> I say that https://hackage.haskell.org/package/manatee is the only thing that comes close to being a solution.
[23:08:04] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:08:31] <monochrom> One single environment that has an editor, a browser, and an IRC client so you can talk to #haskell.
[23:08:54] <xerox> cute!
[23:09:32] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[23:09:47] *** Joins: cynomys (~cynomys@user/cynomys)
[23:09:53] <monochrom> It has probably bitrotted. The author landed a real-world job.
[23:10:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:10:36] <xerox> 🪦
[23:11:06] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:11:07] <maerwald> monochrom: that's usually the worst that can happen to hackers, yes
[23:11:47] <monochrom> But anyone today who want to solve the too-much-switching problem should be doing something similar to manatee, not shoehorning more things into 1960s terminals.
[23:11:54] <monochrom> Think outside the terminal.
[23:12:00] <maerwald> but honestly... it's kinda pointless when using a good tiling wm
[23:12:05] <sm> vs code + hoogle extension + terminal pane running emacs, erc or whatever can also work well, even if not maximally integrated
[23:13:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:13:35] <sm> (the gtoolkit thing I posted on reddit goes further away from terminals)
[23:14:25] <sm> maybe manatee should be revived ?
[23:14:55] <polyphem> whats also nice is GOYO for vim : https://github.com/junegunn/goyo.vim
[23:15:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:16:58] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 268 seconds)
[23:18:38] *** Joins: cyphase (~cyphase@user/cyphase)
[23:20:35] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[23:21:34] <polyphem> i have no mouse only touchpad, i like not switching  mouse/keyboard
[23:22:04] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930:40c5:3263:848f:5ae1)
[23:23:19] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:24:10] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:24:10] <maerwald> sm: too much work for something that a window manager does better
[23:24:29] <geekosaur> yes, it's bitrotted. I tried to build it a year ago
[23:24:44] <geekosaur> looked really neat, but sadly…
[23:25:08] <maerwald> polyphem: and mouse use is really unhealthy
[23:25:48] <sm> I'm talking about a highly integrated environment, not just managing windows
[23:26:15] <maerwald> well, that's the same problem
[23:26:21] <sm> the haskell version of smalltalk or a lisp machine or emacs
[23:26:32] <maerwald> emacs is a window manager 
[23:26:51] <geekosaur> pretty lousy one imo
[23:26:54] <polyphem> https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar
[23:27:16] *** Joins: alx741 (~alx741@157.100.93.160)
[23:32:35] <sm> I find it a pretty useful one! in the specific situation of remote shells. Combined with workgroups2 for saving layouts and dtach/mosh for
[23:32:35] <sm> connecting 
[23:34:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:35:20] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:41:53] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[23:42:18] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:43:24] <maerwald> hmm... I think I need a GHC 7.2.2 for manatee
[23:44:06] <monochrom> Yeah it's pretty old. cabal-v2 didn't exist.
[23:44:14] <monochrom> (for example)
[23:44:32] <monochrom> and gtk2hs was all the rage, as another example.
[23:48:09] <EvanR> what's the current state of the art for gtk in haskell?
[23:48:27] <geekosaur> gi?
[23:48:55] *** Quits: finsternis (~X@23.226.237.192) (Quit: Changing server)
[23:49:00] <geekosaur> https://hackage.haskell.org/package/gi-gtk
[23:49:19] *** Joins: finsternis (~X@23.226.237.192)
[23:49:35] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:49:45] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[23:50:14] <EvanR> gnarly
[23:51:58] <maerwald> I like gtk2hs better
[23:52:07] <maerwald> there are some API differences
[23:52:45] *** Joins: alx741 (~alx741@157.100.93.160)
[23:54:00] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:54:30] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[23:54:35] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 268 seconds)
[23:55:45] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:56:10] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[23:56:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Remote host closed the connection)
[23:56:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:56:57] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:57:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:57:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:57:35] *** Joins: wroathe (~wroathe@user/wroathe)
[23:57:46] <monochrom> Haha nice https://github.com/haskell-gi/haskell-gi/wiki/Using-threads-in-Gdk-and-Gtk--programs references my threading-and-FFI article
[23:58:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[23:59:21] <EvanR> "gdk and by extension gtk+ are not thread safe" good to know
