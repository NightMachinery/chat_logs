[00:00:28] <random-nick> Guest74: mem-aref seems to have a compiler macro which eventually directly calls SBCL's function for accessing memory when the type is constant
[00:00:50] <random-nick> which presumably compiles to efficient machine code
[00:01:04] *** Joins: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de)
[00:01:13] <random-nick> frgo: weird that the manual for CFFI has no mention of :array
[00:01:50] <frgo> Well, the real manual is the source code.
[00:02:21] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:02:35] <Bike> the internal workings of marray seem... exciting
[00:03:16] <random-nick> waaf-cffi seems to be a different approach to what static-vectors does?
[00:03:43] *** Quits: random-nick (~random-ni@87.116.180.220) (Quit: quit)
[00:03:58] *** Joins: random-nick (~random-ni@87.116.165.83)
[00:04:34] <_death> the limitations are not inherent, the interface was just sufficient to what I wanted at the time so I didn't bother removing them.. but if the idea makes sense, then one could imagine more powerful mmapped array facility.. say for IPC
[00:09:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[00:13:32] <random-nick> hmm, why does WITH-ACCESSORS not have the simple variant of slot-entry like WITH-SLOTS does?
[00:14:31] <pjb> because accessor names are often longer than what you'd want for a variable name.
[00:14:50] <pjb> (with-accessors ((x point-x) (c point-color)) (incf x) (setf c 'red))
[00:15:01] <pjb> + pt in the middle.
[00:16:28] <random-nick> was the accessor naming style where you don't use a prefix not popular when the standard was written?
[00:17:46] <pjb> still (with-accessors ((n name) (c color)) p  (print n) (setf c 'red))
[00:18:13] <pjb> otherwise, you're a big boy, you're a lisp programmer, write your own macro!
[00:18:22] <yitzi> Generics were a lot less popular
[00:20:57] <Catie> What's the vibe on generics nowadays, have they come around? Or are they still a bit frowned upon?
[00:21:01] <Shinmera> varjag: the one I made
[00:23:00] <hayley> I agree, Shinmera's one is better.
[00:24:45] <pdietz> The short name style is nicer with package local nicknames, as you can avoid name collision and use the PLN as the prefix.
[00:25:41] <yitzi> Catie: generics are the bomb.
[00:25:58] <Shinmera> Catie: "generics" meaning what? Generic functions?
[00:27:11] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:28:42] <yitzi> Shinmera: Yes, we were referring to generic functions.
[00:29:04] <Shinmera> I don't know who ever frowned upon generic functions, but whoever it was they were probably making a bad judgement call.
[00:29:05] <Catie> Generic functions, in particular slot accessors without the class name prefixed to them
[00:29:50] <yitzi> Paul Graham maybe?
[00:29:59] <Shinmera> lol
[00:30:17] <mfiano> Prefixing generic functions sounds like a misuse of packages and protocols.
[00:31:36] <jackdaniel> (first:name object) (sur:name object) ,)
[00:31:56] <Xach> (iso:8859 ...)
[00:32:08] <mfiano> gasp
[00:32:31] <yitzi> Shinmera: hehe....Arc isn't object oriented cause I know better!
[00:33:43] <hayley> Everyone who first learns CLOS apparently thinks they really need a reader macro for SLOT-VALUE. Then, hopefully they learn CLOS.
[00:34:17] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[00:35:30] <jackdaniel> novices don't use clos because they don't understand it, experts don't use clos because they do - or something like that
[00:36:04] <jackdaniel> (in truth most cl programmers use generic functions and clos protocols some way or another)
[00:36:16] *** Quits: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca) (Remote host closed the connection)
[00:36:51] <yitzi> How about: Novices see objects and slots, experts see generic functions and accessors?
[00:37:08] <jackdaniel> gurus see slot-location's
[00:37:11] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[00:37:21] <yitzi> Nice.
[00:37:26] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[00:38:02] <jackdaniel> thanks :)
[00:38:36] *** Joins: Oladon (~olad@98.43.81.226)
[00:38:37] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[00:38:43] <edgar-rft> all slots but mommy :-)
[00:42:26] *** Quits: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de) (Read error: No route to host)
[00:42:50] *** Joins: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de)
[00:43:34] *** Quits: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de) (Remote host closed the connection)
[00:43:51] <rotateq> jackdaniel: plz tell me more about slot-locations :)
[00:44:46] *** Joins: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de)
[00:44:52] <pve> careful, you might become a guru
[00:46:14] <rotateq> pve: I'll take that risk. :) first I shall master the state of being a sorcerers apprentice to the next step
[00:46:22] <jackdaniel> I'm not a guru, I can't see it ,)
[00:47:20] <jackdaniel> slot-definition-location is advertised by amop authors as a way to optimize important bits implemented with standard classes (to avoid unnecessary function calls)
[00:47:24] <rotateq> okay but anyway you also have high respect by me
[00:47:48] <jackdaniel> heh
[00:47:55] <rotateq> ah okay, so i should go on reading and working through it, but wanted it anyway
[00:48:05] *** Quits: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de) (Remote host closed the connection)
[00:48:20] <rotateq> jackdaniel: but you're one of the McCLIM _and_ ECL gurus :)
[00:48:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:48:36] *** Joins: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de)
[00:48:48] <varjag> Shinmera: alright then
[00:49:06] <jackdaniel> they say that to hack something interesting you either need experience, talent or patience. I'm in the last group. thanks though!
[00:49:18] <jackdaniel> and good night \o (it is late here already)
[00:49:32] <rotateq> pve: there's a nice quote starting "if programming languages were like religions, LISP would be like Buddhism". I think that is one of the timeless points which attract me so much.
[00:50:11] <rotateq> see you soon again
[00:50:22] *** Joins: aeth (~aeth@user/aeth)
[00:50:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:50:59] <pve> rotateq: heh, nice
[00:52:01] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[00:57:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:59:15] <pdietz> Generic functions for slot access can be nice because you can combine other methods with them.Â  :around, :before, :after
[00:59:41] *** Joins: aeth (~aeth@user/aeth)
[00:59:42] <pdietz> Another nice idea is to define slot-unbound methods to lazily populate slots.
[01:02:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:03:11] <rotateq> in the beginning of the week i realized a bit more how/when the other method-combinations could be effectively used or that it can be useful the when having SETFs also generic the dispatch can go to the new-value too if needed
[01:03:20] *** Quits: pve (~pve@188-67-23-226.bb.dnainternet.fi) (Quit: leaving)
[01:04:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:05:56] *** Joins: aeth (~aeth@user/aeth)
[01:09:19] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:10:44] *** Joins: TMA (tma@twin.jikos.cz)
[01:10:46] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[01:13:30] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[01:14:56] <NotThatRPG> Allegro offers `EXCL:RECORD-SOURCE-FILE` so that one can record where new kinds of things are defined. E.g., I am making FIVEAM do (excl:record-source-file ',name :fiveam-test) inside fiveam:def-test.  Question: do CCL and SBCL have any equivalent of this?
[01:22:41] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[01:23:39] <Shinmera> Not sure, but that reminds me it would be great if someone added more backends to https://github.com/shinmera/defititions
[01:23:47] <Shinmera> ech
[01:23:53] <Shinmera> https://github.com/shinmera/definitions
[01:25:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:25:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:25:57] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c51c:8b94:b576:7052)
[01:27:19] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[01:27:32] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c51c:8b94:b576:7052) (Read error: Connection reset by peer)
[01:27:51] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c51c:8b94:b576:7052)
[01:33:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:38:52] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:44:18] <NotThatRPG> Shinmera: If this supported Allegro, too, I'd be more excited -- Allegro, SBCL, and CCL are my target implementations....
[01:45:37] <fe[nl]ix> if Franz gave free licences to developers, that would be nice too
[01:45:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:46:36] <Shinmera> NotThatRPG: you, too, can contribute to open source
[01:46:52] <Shinmera> don't let your dreams be dreams
[01:46:58] <fe[nl]ix> hahaha
[01:47:40] *** Joins: igemnace (~ian@user/igemnace)
[01:53:07] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 256 seconds)
[01:56:50] <NotThatRPG> Shinmera: I'm already contributing quite enough to CL open source! I'm tapped out...
[01:58:47] <Shinmera> *shrug* Oh well...
[02:00:00] <NotThatRPG> I would have thought there would be an interface to SBCL's source recording but... apparently not?
[02:01:56] <NotThatRPG> There is a CCL:record-source-file
[02:02:34] <Shinmera> That reminds me that I initially created https://portability.cl in the faint hopes it would drive people to try and improve the situation on either library or implementation sides, but as far as I can tell it actually changed nothing at all.
[02:03:33] <Shinmera> So far my impression writing several of these libraries is that unless you do the painful work of aggregating the info for 90% of the implementations out there that you don't even use, nobody'll bother contributing a backend for even one more.
[02:04:08] <Shinmera> Or maybe I'm just impatient
[02:05:23] <Bike> i did a few from the implementation end, but i guess that's not quite the same
[02:05:31] <Bike> i should submit PRs, since i added a cltl2 interface in clasp
[02:05:56] <Shinmera> Yeah Clasp has been an outlier. You folks have been doing a tremendous job increasing support coverage.
[02:06:24] <NotThatRPG> Shinmera: If you look into the crawling horror that is the ASDF source, you will see what it takes... I don't know that anyone besides Fare has the energy to fight through testing on all the various implementations out there.
[02:06:52] <Krystof> (sb-c:source-location) gets you a source location for that form in sbcl, I think
[02:06:59] <Shinmera> NotThatRPG: I have, and as I said I've also written many of these libraries myself.
[02:07:32] <Shinmera> I'm not aiming my laments at anyone in particular, to be clear
[02:07:43] <Shinmera> Just woes about the general state of affairs, nothing new :)
[02:08:29] <Bike> a lot of these aren't actually that bad assuming the implementation has support. trivial-extensible-sequences support on sbcl consists of #+sbcl #:sb-sequence for example
[02:08:54] <Bike> but in that case there's a well defined protocol people pretty much go with, which is not the case with e.g. all the compile-file extensions asdf tries to herd
[02:09:03] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[02:09:24] <NotThatRPG> Krystof: Does that let me set the source location myself?  I will look again -- I was apropos-ing with source-file, so wouldn't have found any source-location symbols.
[02:13:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:13:34] <Krystof> the pattern we use is something like (defmacro deffoo (...) `(%deffoo ... (source-location))) (defun %deffoo (... source-location) <store source-location wherever you like> ...)
[02:13:50] <Krystof> then whatever consumes your source locations needs to know where you've stored them; I don't think we have a protocol for that
[02:15:16] <NotThatRPG> Ah. So one *calls* source location, and it gives you back the source location to do with what you will.
[02:15:20] <NotThatRPG> Thanks!
[02:16:35] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[02:20:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[02:21:47] <Fare> Crawling horror? It's not THAT bad, for what it does.
[02:24:46] *** Joins: NotThatRPG_ (~NotThatRP@mail.sift.net)
[02:24:48] *** Quits: luis (~luis@lisp/luis) (Quit: The Lounge - https://thelounge.chat)
[02:24:49] <NotThatRPG_> I didn't mean to imply that it's more awful than it needed to be. But awful it did need to be.
[02:24:57] <NotThatRPG_> Anyway, must dash! Goodnight all!
[02:25:01] *** Quits: NotThatRPG_ (~NotThatRP@mail.sift.net) (Client Quit)
[02:25:03] <Fare> Gnite!
[02:26:29] <Fare> The awfulest parts are those that deal with portability across 17 implementations, in UIOP. Especially the portable run-program facility.
[02:26:29] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Ping timeout: 252 seconds)
[02:26:45] <Fare> or the pathname support.
[02:26:45] *** Joins: luis (~luis@lisp/luis)
[02:26:45] *** ChanServ sets mode: +o luis
[02:26:53] <Shinmera> Yeah, run-program/launch-program are yikes
[02:26:56] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[02:28:43] <Fare> pathnames are a mindfuck, though. There is a wide gap between that the standard specifies and what is common practice in today's world.
[02:29:04] <Fare> with plenty of undefined behavior that every implementation does in subtly different ways.
[02:30:41] <Shinmera> I have often thought about starting a thing for a secondary path mechanism that's more tailored towards modern systems, and adding support for that to implementations, but doing so is too much effort even for me.
[02:32:07] <Fare> iolib tried to do that...
[02:32:21] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[02:32:25] <Fare> but then you have to hook it up into LOAD and all other primitives that deal with paths.
[02:32:33] <Shinmera> did it? My idea would have been to allow using cl:open/etc with this new path type.
[02:32:42] <Shinmera> Right.
[02:32:47] <Fare> yeah, that's the part that's definitely not portable.
[02:35:08] <Fare> Also, anything that binds wrapped low-level resources to high-level variables introduces "interesting" issues to make your program async-safe. No one tries to do that because it's too hard (except for the Erlang guys maybe), but I wonder what an async-safe lisp would look like.
[02:35:32] <Shinmera> doing async in lisp is depressing in many ways :(
[02:36:06] <Shinmera> I'd give a lot to have the kinds of convenience that exists in JS and C# with the async keyword.
[02:37:24] <tyson2> Does Clojure do async well?
[02:37:48] <Fare> Shinmera, or use Gambit Scheme like me :-)
[02:37:57] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:38:15] <Shinmera> I wasn't aware that Gambit supported all my 100+ libraries, wow!
[02:38:18] <Fare> (well, I use Gerbil on top of Gambit, but it inherits Gambit's relatively good async behavior)
[02:38:21] <rotateq> tyson2: as i heard clojure shall be well for concurrency
[02:38:26] <Fare> Shinmera, it doesn't :-(
[02:38:31] <Shinmera> Oh well...
[02:38:39] <etimmons> One of these days I want to add environment variable support to run/launch-program. Gonna probably take a while to get it right, though
[02:39:03] <Fare> That said, sometimes I wonder about porting CL to Gambit, or things like that.
[02:39:43] <Fare> etimmons, even more "interesting" to get right portably. You may have to punt on many implementations and/or extend them properly.
[02:40:06] <rotateq> and how do C# and JS do the async stuff? a friend told me in Rust the async is with some kind of continuations, but idk
[02:40:10] <Fare> etimmons, a fallback of course, on Unix, is to exec env... but what about Windows?
[02:40:25] <rotateq> oh noez windows
[02:40:28] <etimmons> Yeah, that's why I haven't even tried yet
[02:40:47] <Fare> debugging UIOP on Windows was... interesting.
[02:42:36] <tyson2> thanks, rotateq
[02:43:34] <etimmons> Fare: I bet
[02:43:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:44:43] <Shinmera> rotateq: marking a function async causes its return value to be a kinda closure. The await keyword within an async function marks a continuation/closure chain point. So async foo(){ x = await bar(); } returns a closure that should be called when bar() completes. when invoked, the function then resumes, binding x to the result of bar().
[02:45:11] <etimmons> Fare: by the way, I don't know how much you've checked out of gitlab emails, but I opened a merge request on reader-interception yesterday
[02:45:15] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[02:45:25] <Shinmera> rotateq: This makes async programming 1000x less painful because you can essentially pretend it's still imperative in most cases.
[02:45:47] <Shinmera> You could potentially do something like this in CL but it would definitely require code walking, and yikes.
[02:47:15] *** Quits: cosimone (~user@93-44-186-55.ip98.fastwebnet.it) (Remote host closed the connection)
[02:47:56] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c51c:8b94:b576:7052) (Ping timeout: 252 seconds)
[02:48:06] <rotateq> yes but in itself one of the really powerful concepts
[02:49:12] <random-nick> Shinmera: I think you can do something like that with cl-async and green-threads
[02:49:13] <rotateq> and of course, if scheme can have it ...
[02:49:13] *** Quits: gaqwas (~john@dynamic-077-004-093-176.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:49:18] <random-nick> green-threads doing the code walking
[02:50:06] <random-nick> rotateq: scheme's spec requires call/cc, which means that most implementations support it and/or some saner alternative
[02:50:17] <hayley> Yeah nah, you would probably mess up dynamic bindings with async/await.
[02:50:22] <random-nick> so it's probably trivial to implement
[02:50:57] <hayley> And then you have a whole lot of synchronous CL code to deal with, so you won't get very far with async colouring.
[02:51:02] <random-nick> I think you can implement coroutines using sleeping OS threads, but that is not exactly resource efficient
[02:51:15] <rotateq> "probably trivial" soso :)
[02:52:00] <random-nick> hayley: well that's an issue with any language which adds async later on, no?
[02:52:21] <hayley> Yes.
[02:52:25] <hayley> IOW give me green threads or give me death.
[02:57:30] *** Spawns_Carpet is now known as Spawns
[03:03:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[03:04:39] <mzan> hi, I'm blocked on this "problem". I'm not able to optimize CL code using series. It is not converted to normal loops, and it uses all the RAM. This is an example https://0bin.net/paste/n7fhjDxt#7SLnyit7-VDat6Ae5okgznwv5p1vbRmzqVylJWqK8+1
[03:04:52] <mzan> Probably I'm missing some simple/naive setting in some place.
[03:05:33] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[03:06:49] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[03:11:17] <mzan> Shinmera: I don't know if this can help, because I'm a newbie, but there were this interesting discussion about asyncs https://news.ycombinator.com/item?id=29016796
[03:12:10] <mzan> They suggested to use lpar + futures
[03:12:24] <mfiano> What color is your function? ;)
[03:12:25] <mzan> *lparalel
[03:12:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:14:10] *** Joins: aeth (~aeth@user/aeth)
[03:18:04] <hayley> mfiano: https://www.youtube.com/watch?v=DySNnz5N9WA
[03:19:22] <mfiano> hayley: Hehe, I was referring to Robert Nystrom's article, but I can't argue with the Floyd.
[03:19:33] <hayley> I am aware, but I decided to make the joke anyway.
[03:20:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:20:46] <_73> Question about exporting symbols that are only used as arguments to a function: http://dpaste.com/HVTYXNY9G
[03:21:44] <mfiano> Keyword symbols
[03:22:30] <mfiano> Keyword symbols are self-referential, and suite uses like enum variant testing such as this well, and need not be qualified.
[03:22:37] <mfiano> suit*
[03:23:10] <_73> ohh ok of course. Now that I think of it this is probably a perfect use case.
[03:23:25] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[03:23:38] *** Joins: abrahms (~abrahms@75.164.87.141)
[03:28:05] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:30:19] *** Quits: s-liao (~s-liao@101.86.99.70) (Client Quit)
[03:32:29] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 252 seconds)
[03:33:35] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:39:09] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[03:44:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:45:41] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[03:48:26] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[03:49:36] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[04:01:45] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[04:02:00] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[04:10:36] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[04:12:04] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[04:18:51] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[04:22:31] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[04:22:58] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[04:35:03] *** Spawns is now known as Spawns_Carpeting
[04:49:16] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[04:52:10] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[04:54:12] *** Joins: notzmv (~zmv@user/notzmv)
[04:54:50] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:58:19] *** Joins: akoana (~ah@user/akoana)
[05:01:06] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:14:24] <Xach>      
[05:14:24] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[05:14:24] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[05:14:28] <Xach> (oops)
[05:14:37] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[05:15:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[05:32:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:34:24] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:51:10] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:52:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:56:35] <hayley> The function COMMON-LISP-USER::OOPS is undefined.
[06:03:56] <dre> lel
[06:04:02] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[06:07:27] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:07:33] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[06:08:12] <semz_> I'm not happy to ask this, but does there exist a CL implementation that compiles to Javascript?
[06:08:18] *** semz_ is now known as semz
[06:09:28] <Guest74> _death: while interesting it wouldn't work.  This would be for reading/writing to dumb buffers gotten from drm.
[06:10:02] <hayley> semz_: https://jscl-project.github.io/
[06:11:02] *** Joins: unyu (~pyon@user/pyon)
[06:12:10] <Guest74> bike: shouldn't it be possible to have the header in lisp and simply have the pointer to the data point to foreign memory? Or header and data are contiguous?
[06:12:43] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:12:54] <Bike> usually they're contiguous
[06:13:08] <Bike> i mean, why wouldn't they be, right?
[06:13:22] <Bike> it would just b e adding an indirextion for no reason
[06:14:58] <Guest74> well, normally.  Except for this reason.
[06:16:23] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[06:18:53] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[06:21:18] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[06:21:48] *** Joins: Oladon (~olad@98.43.81.226)
[06:30:02] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:31:30] *** Joins: sander (~sander@user/sander)
[06:43:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[06:43:18] <semz> hayley: thanks
[06:43:28] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[06:44:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:45:29] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:45:36] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:48:21] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[06:53:25] *** Joins: s-liao (~s-liao@101.86.99.70)
[07:09:33] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[07:09:49] *** Joins: s-liao (~s-liao@101.86.99.70)
[07:13:02] <dbotton> Wanted to share very early work on CLOGs GUI/Web Builder https://usercontent.irccloud-cdn.com/file/yq1ZLK9b/Screenshot%20(2).png
[07:13:23] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[07:20:31] <dbotton> That is all running in a web browser, of course can run "native" by using electron / ceramic, or add the panels to any web page of any framework of any language by a simple include.
[07:22:54] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[07:28:32] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:30:36] <beach> Good morning everyone!
[07:31:54] <Lycurgus> hello beach
[07:35:44] <semz> good morning
[07:37:54] <_death> Guest74: why wouldn't it work?
[07:38:38] <Guest74> your readme says the mapping is read only.
[07:39:09] <Guest74> and private.  I think dumb buffers are shared.
[07:42:46] <_death> like I said, these limitations are not inherent to the approach.. but looking at DRM dumb buffers, it indeed might not work, because you don't get to pick the buffer's offset
[07:44:16] <_death> maybe you could create an alias mapping, not looked into it
[07:44:53] <Guest74> ah, I just read the readme and haven't looked at the code yet.  It might be useful for clx though. X allows you to provide the mmap.
[07:45:00] *** Joins: Catie (~user@user/catie)
[07:47:02] <Guest74> it's just something that would be interesting for the future. copying the array to foreign is sort of a poor mans double buffering.
[07:47:15] <_death> the way it works is to have a page before the pages of interest where the last bytes are the array's header
[07:47:36] <Guest74> that makes sense
[07:51:06] <Guest74> that will probably work really nice for x if there's no problem pinning it.
[07:51:46] <Guest74> I was just thinking of the shared memory extension, but sounds like it'd possibly work for the buffer as well.
[07:51:47] <_death> it's foreign memory, so no need for pinning
[07:53:56] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[07:54:40] <_death> but this header creation etc. really belongs to the implementation.. so it should probably be a contrib or something
[07:56:14] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[07:57:49] <Guest74> I think I eventually need to run on something besides sbcl.  Maybe once everything is working smoothly.
[08:14:33] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:16:01] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:18:04] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:20:57] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:28:56] *** Joins: semz (~none@user/semz)
[08:38:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:58:30] *** Joins: abrahms` (~user@75.164.87.141)
[09:00:32] <abrahms`> Hi all. I'm trying to figure out how to iterate across the Nth item of a bunch of lists.  I have a list of lists. I want to process the first element of each list, then the second item of each list. I feel like there should be a way to do this without setting a variable and looping index by index.
[09:00:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:03:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:05:20] *** Joins: Inline (~Inline@aftr-37-201-240-188.unity-media.net)
[09:05:22] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[09:05:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:05:28] *** Quits: Inline (~Inline@aftr-37-201-240-188.unity-media.net) (Remote host closed the connection)
[09:07:11] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:07:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[09:20:00] <akater[m]> abrahms`: apply mapcar or apply mapc, or it's unclear what you want, show a form&result snippet.
[09:20:49] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[09:21:14] <abrahms`> (group-by-column '((1 2 3 4) (5 6 7 8)))
[09:21:15] <abrahms`> =>  '((1 5) (2 6) (3 7) (4 8))
[09:21:15] <abrahms`>  
[09:21:46] <abrahms`> Then I would want to map over the result, so if it's combined with map, that's great.
[09:24:20] <dre> I am smashing out this aoc :D
[09:24:36] <dre> I mean it's not going to be neat but I'm getting better.
[09:24:51] <abrahms`> T_T   I'm terrible at this right now. Spent 2.5hrs on it yesterday in what would have taken me ~20m in python.
[09:25:27] <abrahms`> I conceptually know what I want to have happen, and I'm fairly certain it's doable (and maybe even a good idea?) in lisp.. I just don't know the incantation for it.
[09:25:56] <Guest74> like akater said, apply mapcar #'list if you want a list.  Is this for AoC?
[09:26:40] <abrahms`> Guest74: Yes. Didn't occur to me that it may spoil things for others until you just asked. :-/
[09:27:30] <Guest74> The test examples help to find stupid errors.  I keep forgetting that and wasting time, finally got it after using the test data.
[09:28:12] <abrahms`> Is there a repl command for "give me the docs on this thing"?
[09:28:47] <Guest74> describe or documentation
[09:29:08] <Catie> Documentation is gonna work across more implementations, but it's more unweildy
[09:29:53] <Guest74> and of course if you're on emacs and it's setup C-c C-d h will take you to clhs.
[09:30:11] <abrahms`> I was hoping the docs were more clear than clhs :-/
[09:30:59] <akater[m]> abrahms`: btw If you have only two list elements, maybe just write a loop with 2 for clauses.
[09:31:16] <abrahms`> akater[m]: thx. I have many, but just trying to keep the example small.
[09:33:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[09:34:14] <Guest74> is there an easy way to turn a bit array into an integer?  I have a horrible kludge.
[09:34:43] <Catie> Guest74: My understanding is that you just have to iterate over the whole bit vector
[09:35:33] *** Joins: aeth (~aeth@user/aeth)
[09:36:21] <Guest74> that's what I'm doing and it looks horrible. even moreso with lsb
[09:36:22] <dre> day 3 day 3 https://gist.github.com/Dotrar/dcd4bf24dc4dcec0f11eeb1cfaea2583
[09:36:35] <dre> abrahms`, day one totally screweed me over
[09:36:45] <dre> I'm also more of a python developer
[09:36:49] <beach> Catie: What made you think that generic functions were not used much?
[09:37:37] <mfiano> beach: She was talking about their naming in class accessors if you read more.
[09:38:03] <beach> Oh!  Misunderstood!  Thanks.
[09:38:17] <Catie> No worries! It definitely reads that way in context
[09:38:24] <abrahms`> Day one was mostly fine. I was struggling to figure out how to load in a test runner.  Day two was spent figuring out how to correctly convert a string into a callable symbol. I had forgotten about funcall. :-/
[09:39:52] <Guest74> radix 2, hm, I probably could have used that and just ldb.
[09:40:17] <dre> oh shit
[09:40:32] <dre> the test input is 5 binary digits, but the real input is like 10
[09:40:38] <dre> 12
[09:40:40] <Catie> Guest74: This is what I came up with, I don't think it looks that bad: http://ix.io/3GQq
[09:41:00] <Catie> I wouldn't necessarily call it efficient though
[09:41:12] <dre> how do i convert my count-ones-per-position into a more generic function?
[09:42:03] <Guest74> catie: reverse!  why didn't i think of that.  Summing also looks nicer, I was dpb'ing bits.
[09:44:21] <dre> oh damn this really has me a bit stumped.
[09:44:37] <dre> how did others do the "count for each position" ?
[09:44:50] <Catie> dre: maybe this? http://ix.io/3GQr
[09:44:54] <dre> originally I just hard-coded first second third .. etc.
[09:45:33] <dre> Catie, ??? that's count in that row, but I want to count in the column.
[09:46:13] <dre> transpose? is that possible? no idea
[09:46:37] <mfiano> Here's an idea. Store an array of integers if you actually need an integer
[09:47:08] <mfiano> bit vectors don't really buy you anything over a fixnum, except more bits, and lots of consing using the result of a bignum
[09:47:54] <dre> is that to me?
[09:48:13] <dre> I've got the test solution worked out, https://gist.github.com/Dotrar/dcd4bf24dc4dcec0f11eeb1cfaea2583
[09:48:25] <dre> I just need to re-do that top count-ones-per-position function
[09:48:50] <dre> something like nthcar for each index of the first element?
[09:49:05] <Catie> mapcar'ing over many lists in parallel processes their elements in order, similar to how you hard-coded first, second, etc
[09:49:47] <dre> and just store the int/counts?
[09:50:02] <beach> dre: You need to start paying more attention to your code layout.  Sometimes LET is followed by 1 space, sometimes by 2, sometimes by 0.  Sometimes COERCE is followed by a newline, sometimes not.
[09:50:07] <dre> wait no, we could just mapcar, then sum
[09:50:38] <beach> dre: You want to avoid distracting the person reading your code with small stuff like that.
[09:50:40] <dre> yeah sorry about that, still battling edit
[09:50:46] <dre> editor *
[09:50:54] <dre> will improve. getting somewhere
[09:56:41] *** Joins: igemnace (~ian@user/igemnace)
[10:02:58] <dre> ok, so I can get to a '((0 1 0) (1 1 1) (0 0 1)) list, but how can I sum that into => (1 2 2) ?
[10:03:09] <dre> (apply '+ list) doesn't work
[10:03:13] *** Quits: abrahms` (~user@75.164.87.141) (Remote host closed the connection)
[10:03:26] *** Joins: abrahms` (~user@75.164.87.141)
[10:04:28] <Catie> (apply #'mapcar #'+ list)
[10:05:52] * dre 's mind blows *
[10:14:40] <dre> Catie, thanks :)
[10:15:15] <Catie> Any time!
[10:17:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:19:20] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:25:36] *** Joins: gaqwas (~john@dynamic-077-007-008-097.77.7.pool.telefonica.de)
[10:27:16] <susam> Good morning, #commonlisp! Hope you all are having a great Friday! :)
[10:29:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:31:24] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[10:34:27] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:35:50] *** Joins: nature (~nature@45.32.235.173)
[10:48:26] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[10:48:51] <dre> ;;;_;;; I've had two beers and now I'm lost
[10:53:09] *** Quits: Catie (~user@user/catie) (Quit: sleepy)
[10:55:24] <pjb> dre: time to read and understand: http://www.99-bottles-of-beer.net/language-common-lisp-114.html
[10:55:36] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[10:56:09] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:08:07] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:10:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:13:43] *** Joins: pve (~pve@176-93-15-207.bb.dnainternet.fi)
[11:13:49] <flip214> I guess that (mapcar (alexandria:curry #'reduce #'+) '((0 1 0) ...)) would scale better than an apply
[11:15:13] <pjb> Indeed.
[11:15:56] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:9148:627f:8d41:a3b0)
[11:17:43] *** Joins: notzmv (~zmv@user/notzmv)
[11:19:59] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[11:22:25] <dre> how can I use the debugger effectively? trying to run my code, I come up to an error but if i use BACKTRACE -- I don't know how to parse the output
[11:22:55] <dre> 13: ((FLET "WITHOUT-INTERRUPTS-BODY-14" :IN SAVE-LISP-AND-DIE))
[11:23:50] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 252 seconds)
[11:24:00] *** Joins: amb007 (~a_bakic@134.150.22.93.rev.sfr.net)
[11:24:12] <pjb> dre: assumedly, in the function save-lisp-and-die, there's a function defined with flet, perhaps WITHOUT-INTERRUPTS-BODY-14, and that frame corresponds to the activation of that local function.
[11:24:24] <lisp123> https://common-lisp.net/project/slime/doc/html/Debugger.html
[11:25:02] <dre> I get that
[11:25:07] <dre> the answer really is use slime innit
[11:25:17] <dre> ah geez
[11:30:33] *** Quits: gaqwas (~john@dynamic-077-007-008-097.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[11:30:50] <dre> OK cool, slime doesn't make things much easier :P
[11:32:26] <abrahms`> dre: https://gist.github.com/justinabrahms/d9d110c55ad5f53288a56d0cc882aa1e - this was may day 3 part 1.
[11:33:29] <abrahms`> s/may/my/
[11:33:31] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[11:36:43] <dre> that looks nice actually, blows my mind more than mine. I'm trying to not use packages ( by ignorance, not by intention :P) https://gist.github.com/Dotrar/dcd4bf24dc4dcec0f11eeb1cfaea2583
[11:36:48] <dre> I'm working on part 2 right now
[11:36:56] <dre> but I'm fighting the debugger.
[11:37:11] <dre> I still get "unknown location" on an error and I have no idea where it is.
[11:37:36] <abrahms`> the packages are literally for writing small tests & logging (b/c I didn't know there was a print function)
[11:38:32] <dre> oh right XD
[11:38:52] <abrahms`> I'm trying to do this without just writing a for loop.  Think I might be in over my head for #2.
[11:39:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:39:35] <dre> I've sorta got it. part 2 is interesting when you get through the cruft of it
[11:40:42] <dre> when you get the gamma binary value, you use that as a filter on the list, down to single values. so if the gamma is 10101, filter all the items that start with '1', have you got 1 left? no? then filter down all the items that have '0' in the second spot,  have you got 1 left? no? then ....
[11:43:18] <dre> this is what I've got so far for number 2: ( just updated gist, refresh) https://gist.github.com/Dotrar/dcd4bf24dc4dcec0f11eeb1cfaea2583
[11:43:36] <abrahms`> going to not click it yet. Haven't given up hope, but the clock is against me b/c I'm tired.
[11:43:45] <dre> Yeah same, I'm turning off.
[11:43:59] <dre> good luck abrahms` ~~ fresh mind tomorrow.
[11:44:09] *** Quits: amb007 (~a_bakic@134.150.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[11:44:16] <abrahms`> I'm hoping to get this mostly done tonight so I don't just think about this all day at work tomorrow.
[11:44:49] *** Joins: amb007 (~a_bakic@100.151.22.93.rev.sfr.net)
[11:44:50] <dre> does anyone know where my error might be? so when I run the "aoc-process-part-2" - I get past the "princ binary-commons" bit, but somewhere in the filter-down-to-one I get an error.
[11:45:17] <dre> abrahms`, tbh I was sad that I couldn't chew on yesterday's problem. I solved day-2 too fast.
[11:45:37] <dre> and this one just seems to be fighting some compilation error :(
[11:45:37] <abrahms`> day 2 took me like 2.5 hours b/c I couldn't figure out how to turn a string into a callable symbol.
[11:45:59] * dre still doesn't know how to do that
[11:46:14] <dre> coerce-function or something? xD
[11:46:28] <dre> actually I think that's in one of my books. I think land of lisp does it
[11:46:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[11:46:41] <abrahms`> https://gist.github.com/justinabrahms/30eb516358bc72a7e16b802136b8b025 - Learned about destructuring-bind when I showed it to someone.
[11:47:02] <abrahms`> funcall + find-symbol
[11:54:27] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:02:55] *** Quits: amb007 (~a_bakic@100.151.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[12:03:06] *** Joins: amb007 (~a_bakic@127.39.22.93.rev.sfr.net)
[12:04:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:05:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:07:32] <lisp123> suprised how many people are doing advent of code -- didn't know it was such a huge thing
[12:11:41] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[12:11:42] *** Quits: amb007 (~a_bakic@127.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:12:27] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:14:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:17:44] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:22:31] <flip214> I've got a DEFPACKAGE that does (:IMPORT-FROM  ...); during compilation of that package.lisp file I get an error that these symbols do not exist (yet), because I don't want to export them.
[12:22:44] <flip214> Can I only import symbols that are exported within one package file?
[12:23:30] <flip214> well, just doing (:import-from  <package>  <package>::symbol...) works of course, because then they're defined when DEFPACKAGE runs
[12:23:32] <beach> abrahms`: Please try to lay out your code according to conventions.  A closing parenthesis should not be preceded by whitespace.
[12:24:06] <beach> abrahms`: And there is no reason for a blank line inside a top-level expression.
[12:24:30] <beach> abrahms`: Nor for two consecutive blank lines.
[12:24:46] <abrahms`> beach: is there a handy linter you recommend?
[12:25:13] <beach> I am unaware of one.
[12:25:56] <beach> Also, your use of (caddr acc) as a Boolean value is a violation of the rules stated on page 13 of the LUV slides by Norvig and Pitman.
[12:26:02] <abrahms`> Ah. I tend to be a bit of a pain in that I gave up arguing about code style and now I just insist that there's either a tool or no one cares enough for it to matter to me.
[12:26:17] <abrahms`> tbh, I'm 20% sure you're trolling me right now.
[12:26:18] <beach> And your PROGN is unnecessary if it has a single form in its body.
[12:27:23] <abrahms`> How do you prefer to do nil checks if not using their presence as a boolean?
[12:27:25] <flip214> abrahms`: well, the indentation rules are built into the "important" editors emacs (and vim), so it takes work to get it wrong... therefore there's no linter
[12:27:45] <beach> abrahms`: Not at all.  When you submit code for others to read, it is important to follow conventions, or you are going to waste the time of people reading your code, simply because they are going to be distracted by all those cases where conventions are not followed.
[12:27:47] <abrahms`> flip214: I wrote all of that code w/ emacs, so.. ?
[12:28:12] <abrahms`> beach: the thing that threw me off was the quoting of the rules. :) Sounds very serious business.
[12:28:33] <beach> abrahms`: If it is a true Boolean, then in an IF it is fine.  But if it is NIL as a default value, then (NULL <that value>) is preferable.
[12:29:12] <abrahms`> The code alternates between there being a function there and there being a nil. That denotes whether we're waiting on an incoming command or an incoming integer.
[12:29:37] <beach> That doesn't alter what Norvig and Pitman describe.
[12:30:51] <beach> abrahms`: Note that I am not talking about language semantics here.  It is about the message that you send to the person reading your code.
[12:31:19] <beach> abrahms`: And since you are submitting your code for others to read, I am giving you the feedback as one such person.
[12:32:57] <abrahms`> beach: Cool. I appreciate the feedback.  I'm not clear on how my use of if to check if something is nil or a function violates the "be as specific as your data abstractions warrant" from slide 13. http://www.norvig.com/luv-slides.pdf
[12:33:49] <AndrewYu> p,
[12:33:54] <AndrewYu> oops sry
[12:37:04] <lisp123> abrahms`: You could try (defun function-exists-p (acc) (caddr acc)) or something like that. Although I would put it as a local function if its not meant to be used elsewhere
[12:38:01] <lisp123> Just looking at the code, I would have no idea what (caddr acc) means (i'm not even sure if its function-exists-p, but I'm guess based on this chat), and in a few months you might also forget ;)
[12:38:27] <lisp123> At least from my personal experience, I found it better to write very clear code vs. having to spend hours later trying to figure out WTF i did
[12:39:07] <abrahms`> It's a good callout. I haven't gone back and edited it, but after showing this to someone, they told me about destructuring bind which simplifies some of the shenanigans in there.
[12:39:30] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:40:19] <lisp123> Yeah, destructuring-bind is useful for these situations
[12:41:07] *** Joins: hhdave (~hhdave@213.205.194.223)
[12:42:24] <lisp123> Although I personally have been avoiding its use to some degree, I think it might cause interface & implementation to overlap
[12:43:23] <lisp123> Since you are assuming a list structure. If later you wanted to use a structure or class to represent the data object, then you will have to go back and rewrite all parts of your code that rely on it being alist
[12:43:55] <beach> abrahms`: What lisp123 says.  If your value can be a function or NIL, then you can use FUNCTIONP or NULL to test one way or the other.  If it is a Boolean, i.e., it is either true or false, using it directly in the TEST of an IF is fine.
[12:44:10] <abrahms`> I haven't played much w/ the non-list data types in a long while. I did PCL ~5+ years ago and I don't use common lisp regularly. Just picked it up for advent of code.
[12:44:41] <beach> And, yes, CADDR is not a great abstraction.
[12:47:59] <lisp123> abrahms`: Hopefully you are enjoying it and will use it much more :)
[12:48:41] <abrahms`> lisp123: It's mind-bending and difficult currently. I'm dramatically faster in my primary languages.. with time & effort I'm sure it'll improve.
[12:51:36] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[12:55:07] <lisp123> abrahms`: Yeah, I think we have all felt that to a degree. For me certainly, but I've learnt a lot and glad I stumbled upon it. And even if you don't program in lisp too much in the future, you can re-use some of its concepts in other languages
[12:57:08] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:58:00] <lisp123> Recursion, higher-order functions and the CLOS approach to OO programming were the main things I picked up
[13:02:24] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:02:53] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[13:07:05] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[13:10:51] <abrahms`> Totally. I've got a solid grasp on recursion & higher order functions.. I haven't played with CLOS at all though. Anyhow.. I'm off to bed. g'night.
[13:10:57] *** Quits: abrahms` (~user@75.164.87.141) (Quit: ERC (IRC client for Emacs 27.2))
[13:16:20] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[13:21:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:22:49] <beach> I keep being puzzled by this phenomenon.  Even some professional programmers seem to be unaware of the existence of coding conventions.  Is it that the existence of such conventions is not taught?  Or is it that these professional programmers have not had any training?  I am not talking specific coding conventions for specific languages, but even the very existence of conventions seems to be questioned here from time to time.
[13:25:53] <susam> If you observe this phenomenon in younger programmers, it totally makes sense. I don't say this with the intention of being disrespectful. It's just the reality today. A lot of people who get into programming these days, get into it with motives different than what we had when we were younger. For example, for many programming might just be a way to earn money and they do not care about it beyond their
[13:25:59] <susam> job.
[13:26:32] *** Joins: cranium (~cranium@user/cranium)
[13:26:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:26:41] <hayley> Can't reproduce that here, sorry.
[13:26:53] <beach> That, I understand.  What I don't understand is how these people managed to get hired to become professional programmers.
[13:27:14] <hayley> For some people, perhaps, but they're older than me (but then, say 25 is "older" for me, and not for you two).
[13:28:14] <susam> Because hiring at many company these days focuses on solving leetcode type problems and some system design round. None of these really evaluates exposure to "programming culture".
[13:28:45] <beach> Hmm.
[13:30:09] <susam> I remember, 15 years ago, when I was conducting an interview, I used to ask the candidates if they have developed any side projects using their technology of interest. I wanted to know what kind of passion they have for programming. I considered asking such questions completely fine back then.
[13:30:25] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[13:30:26] <hayley> I guess. I've thought to myself that those people would be better off growing vegetables (or literally participating in any other profession), since otherwise they seem to think very negatively of programming.
[13:31:04] <hayley> *participating in literally any other profession; word scheduling is important there.
[13:31:11] <susam> But today I think such questions may be considered controversial. In fact, I myself find it controversial. One might argue, what side projects they do is none of my business. One might argue, that I must focus on what they do on job only.
[13:32:48] <lisp123> Eh, this all sounds elitism to be honest. There's no right way and most of these subpar programmers are producing useful code, however inefficient it may be written
[13:32:53] <hayley> Well, short of some uninteresting very short jobs I had in high school, the rÃ©sumÃ© I wrote but never used only has side projects arguably.
[13:33:02] <beach> I can understand why one can aspire to a profession without being passionate about it, but it is truly shocking to me that there is no filtering process.
[13:33:27] <hayley> lisp123: It's unrelated to being a subpar programmer or not, though the people I am thinking of seem to actively encourage rubbish programming style.
[13:33:50] <susam> lisp123: I see your point and it can indeed sound like elitism and that's why I don't share this often with others. But in my heart, I know I feel disappointed to see the craftmanship in this field gradually eroding.
[13:34:21] <beach> lisp123: I am frequently accused of being elitist, but when I see the bugs in devices like the TV decoder or the microwave oven, I think there is a huge problem in the industry.
[13:34:36] <susam> lisp123: By the way, are you ab....22 on HN?
[13:35:30] <lisp123> hayley: In 'theory' there is definitely a clear divide between good code vs. bad code, good programming style vs. bad programming style. But often it might be because they were optimising for something else (less time to study / learn, spending more time on getting a proof of concept)
[13:35:40] <hayley> My motives involve using the computer as a means of self-expression, and as a device to slack off all day. The latter part incidentally requires that I don't write bad code, else I would be stuck spending more time maintaining it.
[13:35:43] <cranium> don't know about craftsmanship, but it's silly to expect professional programmers, i.e. people who already do this all day, to have side projects.
[13:35:47] <Nilby> I've worked with many programmers in industry and academia, and my observation is following coding conventions is highly correlated with some ineffable personality traits, but not practical skill or education. Even when it's attempted to be enforced, it can fail.
[13:36:25] <lisp123> (So I agree with all of your comments, but (not related at this group), often its not because said programmers or professionals were doing a 'bad' job, but they were focusing on different things)
[13:36:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:36:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:37:08] <lisp123> beach: But your code quality is very high, can't expect that from everyone IMO.
[13:37:29] <susam> Nilby: I have enforced coding conventions in my teams and it has worked. At least 3 of those engineers have told me after a year that while they hated it initially, they love it now and they see the benefits of following coding conventions.
[13:37:49] <hayley> lisp123: I think those targets for optimisation are subjective too. With regards on getting a proof of concept: I have heard some people to write buggy code to illustrate a point. Some other people, like Leslie Lamport, argue that having a mathematical model suffices as a proof of concept, and if such a model can be checked, it is probably not buggy too.
[13:37:55] <beach> lisp123: You misunderstood my opinion.  I expect no such thing.  I merely expect people to recognize that there is such a thing as coding conventions, separate from the concept of semantics.
[13:37:56] * rotateq experienced some filtering: "Oh, you can't do Java or some of our other mainstream web/app technologies and just understand things well we don't know? Then we cannot use you."
[13:38:24] <pve> It may be that if someone is trying to learn a new language by themselves, they do not prioritize learning conventions early on, even if they know such a thing exists. It only becomes a problem when they go on irc and try to show their code.
[13:38:36] <cranium> what kind of code conventions? Formatting stuff, review process, design things...?
[13:38:37] *** Quits: hhdave (~hhdave@213.205.194.223) (Ping timeout: 256 seconds)
[13:38:53] <hayley> What are we talking about again?
[13:39:02] <beach> pve: But the phenomenon I describe is that people don't even recognize that there is such a thing, or at least not the importance of conventions.
[13:39:04] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:39:33] <cranium> Things like the former two should be done/enforced by tools. Configure your code formatter, add it to vcs and forget about the topic.
[13:39:40] *** Lord_of_Life_ is now known as Lord_of_Life
[13:40:05] <beach> cranium: Code layout is the most basic stuff.  But then there is naming conventions, organizing the code into modules, simplifying maintenance by making the code easier to read, etc.
[13:40:49] <beach> cranium: The "Boolean vs. default value" issue can hardly be automated.
[13:41:12] <hayley> Once I went and looked at some automated code "quality" tool (which did not support Common Lisp, of course), and looked at the warnings it produced. The warnings consisted of stuff like "There is a line with nothing but spaces on it." Who actually cares about that?
[13:41:13] <rotateq> So things like those Norvig covers in his style guide.
[13:41:15] <lisp123> susam: No idea on that
[13:41:39] <pve> beach: I understand. Though, I could see someone considering Lisp so alien in the beginning, that the notion of "conventions" flies out the window.
[13:41:54] <susam> lisp123: No idea about? Sorry, I couldn't figure which message you are replying to.
[13:41:54] <beach> Hmm.
[13:41:55] <lisp123> hayley: Sure, I think the argument goes both ways. "My code was bad because I was focusing on "business"", when it was just bad
[13:42:32] <hayley> lisp123: Your business is damned if you do nitpick your code, and damned if you don't.
[13:43:09] <mzan> The best solution is like "go fmt". You code is formatted automatically by a tool.
[13:43:24] <susam> Haha! That's quite true, hayley! I love it and I am going to steal your line and use it in future.
[13:43:41] <lisp123> beach: Sorry, I was probably slightly confused. I think that following good coding conventions is positively correlated to good code quality, so one should expect poor adherence to coding conventions in the same way one should expect poor code quality (because it does and will keep happening)
[13:46:09] <mzan> Hi, I'm stuck on this https://dpaste.com/9G6666P3K The function using "series" is not compiled to an efficient loop.
[13:46:38] <mzan> I'm using CL for AoC 2021, and I'm trying to use "series" whenever possible.
[13:47:38] <hayley> I'm not too familiar with Series, so what does COLLECT-LAST do?
[13:47:38] <mzan> The code is working, but I'm not happy knowing that if the input file is too big, it will crash, because it should be compiled to an efficient loop working on streams.
[13:47:54] <mzan> hayley: collect-last take the last element of a series
[13:48:18] <mzan> So it should be a loop on all elements of the series (i.e. random numbers), discard them, and then return the last element.
[13:48:27] <hayley> Why even produce N random integers then?
[13:48:36] <mzan> Because I tried to isolate the problem.
[13:48:49] <mzan> I have the same problem on real code, but with a lot more complex series.
[13:50:34] <mzan> I like series because I used  Haskell a lot in the past, and so they seems rather natural for me. It seems also a way to create more useable code respect an explicit loop.
[13:50:56] <mzan> s/useable/reusable   (or composable)
[13:51:01] <lisp123> beach: Thinking about it more. I think perhaps the blame should lie on all the teachers (online blogs / videos / fellow coders / (perhaps universities, but I wouldn't know since I didn't do a CS degree)) --> Had there been a stronger teaching of the importance of various concepts, some of these bad practices wouldn't propagate as much
[13:52:57] <susam> I doubt any CS degree has ever taught what I call the "hacker culture". It is something we used to pick up by working with other developers and seeing how well established open source projects are executed. For example, when I sent my first patches to an Apache project some 15 years ago, there were multiple rounds of reviews and I learnt a lot about the culture. Other sources were just browsing online
[13:53:03] <susam> and searching and reading about things.
[13:53:44] <lisp123> susam: Isn't that the issue though? It should have taught these things properly vs. you finding them own as you were passionate / intelligent / hard working. Because we can't expect all to be the same
[13:54:52] <mzan> susam: in fact some folks suggests to follow the pull-request workflow of goo OSS projects. Studying the code is useful, but reading the pull-requests can give many hints about the standards they are following.
[13:55:13] <lisp123> I programmed as a side hobby during school and later on, but I only learnt about interface vs. implementation from #CLSCHOOL and studying lisp --> Is that a failing of myself or of the system
[13:55:57] <susam> lisp123: I agree that there is an issue but I am not sure where the solution lies. For example, I don't have a CS degree, so even if they did teach these things as part of a degree, most people like me wouldn't learn it.
[13:56:10] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[13:56:12] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:56:55] <hayley> I just don't think computer science courses ever make anything seem fun. Say, one assignment might be about a made-up Mr. Robert who had an idiot intern mess up his database which seems awfully poorly constructed just so that you get to practise one particular aspect of your programming language. If it's supposed to give industrial experience, it comes off an awful like an old fable, where the entire world is constructed to teach one stupid
[13:56:55] <hayley> lesson to the audience.
[13:58:06] <hayley> Speaking of, the two "hackathons" I participated in were devoid of any hacking, and they were solely to come up with ideas to impress someone from a big tech company, who might even hire you to let them steal your idea if you're lucky.
[13:58:21] <susam> I just think it is a dilution and erosion of craftmanship which is natural when a field grows so much that it attracts everyone (the passionate and the dispassionate). Say, playing piano was as hot a field as computing is today. Say, anyone who can write a 30 second jingle with some basic notes gets a job and earns money. I am willing to bet that we would see the same erosion of craftmanship in that
[13:58:27] <susam> field too.
[13:58:39] <lisp123> hayley: I dropped out of my IT degree aeons ago because it was so removed from actual programming :( I blame myself but I know what you mean
[13:59:35] <hayley> A month ago or so I watched some videos of the late Seymour Papert teaching programming. His audience was much younger children, but I still felt robbed of any actually engaging materials.
[13:59:46] <pjb> lisp123: try https://42.fr/en/homepage/
[14:01:55] <lisp123> pjb: Thanks for the link, it looks very cool
[14:01:58] <susam> hayley: Was he teaching Logo?
[14:03:04] <hayley> I got the same feeling from reports on early use of Smalltalk, which Adele Goldberg and Alan Kay taught to children. In "Personal dynamic media" <http://www.newmediareader.com/book_samples/nmr-26-kay.pdf> there are quite a few brilliant programs...written by children. It's really insulting when I was 18 upon entering university, and spent a whole semester writing programs which would read and write crap into a hash table, more or less.
[14:03:09] <hayley> semz: Right, yes.
[14:04:53] <hayley> I believe someone wrote something similar about teaching mathematics...
[14:05:16] <hayley> "A mathematician's lament" <https://www.maa.org/external_archive/devlin/LockhartsLament.pdf>
[14:06:32] <hayley> The first page is quite ironic for me, because I dropped out of music classes at high school because I was terrible with music theory.
[14:06:52] *** Joins: igemnace (~ian@user/igemnace)
[14:07:20] <susam> Logo has had a big impact on my life. I have written a small post about it here: https://susam.in/blog/fd-100.html
[14:08:27] <hayley> Here is one such video: <https://www.youtube.com/watch?v=ZG9cYhekB8A>
[14:09:07] <lisp123> susam: very cool diagrams for 1990s
[14:11:06] <susam> lisp123: Yes, indeed. Imagine the joy of a childhood kid getting excited drawing those stuff on an otherwise boring monochrome CRT display. The video link shared by Hayley is pretty cool too. I indeed used to spend a lot of time drawing those random raft patterns showed at 10:40 of the video.
[14:11:12] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:eca1:6dc5:130:b5b5)
[14:15:31] <beach> lisp123: Sure, but you can't be an expert from day 1, so it takes time to learn about the conventions.  But you can't learn if you don't even acknowledge the existence of such conventions.
[14:16:37] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:18:09] <lisp123> That's true
[14:19:22] <cranium> I mean it's impossible to not acknowledge their existence.
[14:20:01] <beach> cranium: As I started by saying, that is very close to the attitude that I sometimes see.
[14:20:28] <Nilby> There's another impossible thing I've done today.
[14:21:34] <cranium> *to not acknowledge their existence when pointed out.
[14:21:53] <beach> You would be surprised.
[14:22:18] <cranium> yeah I was thinking of people acting in good faith.
[14:22:40] <beach> Oh, I think they seriously think they are right.
[14:23:10] <susam> On the topic of conventions, I have observed for a long time that (1) hayley always enclosed the URLs with angle brackets (<>). (2) beach always uses double spaces after full stop. :)
[14:23:21] <susam> s/enclosed/encloses/
[14:23:51] <beach> susam: Old Emacs habit.
[14:23:52] <hayley> Some combinations of IRC clients and/or terminals decide to include punctuation in URLs if you don't use angle brackets.
[14:24:22] <beach> Anyway, time to go fix lunch for my (admittedly small) family and my favorite coauthor.
[14:25:02] <cranium> bon appÃ©tit beach
[14:27:30] <susam> hayley: Yes, I agree. I like the <> convention and I used to use it in emails for a long time.
[14:33:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:42:22] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[14:42:44] <hayley> Reminds me of the worst part of my CS education: the final exam required one to justify the use of Hungarian notation. I recall writing that beach wrote that it was mean to Hungarian people.
[14:44:22] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:44:38] <hayley> Something similar with a record-based database (cause this is the 60s and we still have tapes, and not SQL or graph databases or whatever else). They wanted the exam taker to describe why one should use binary search to find a user record by ID. I didn't, and I wrote that, if IDs were made contiguous, you could do the equivalent of id * sizeof(user_t) in C to find a user, more or less.
[14:44:57] * hayley got a better mark on the maths test, of course.
[14:50:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:52:46] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:53:54] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:55:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:56:17] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[15:00:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:00:59] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[15:02:18] *** Joins: igemnace (~ian@user/igemnace)
[15:16:31] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:18:47] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:18:52] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:25:52] *** Joins: adlai (~adlai@80.244.243.194)
[15:26:29] <semz> <susam> I just think it is a dilution and erosion of craftmanship which is natural when a field grows so much that it attracts everyone << I think this is right on the money, and exacerbated by how bad programming seems to increase demand, which lowers standards further, driving even more demand.
[15:27:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:9148:627f:8d41:a3b0) (Ping timeout: 240 seconds)
[15:28:34] <semz> how many programming jobs boil down to cleaning up after the programmer who came before?
[15:36:00] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[15:41:30] <jackdaniel> semz: essentially all, but 90% of cases is the case when the "new guy" underestimates the problem complexity
[15:42:13] <jackdaniel> so often "cleaning" leads to code in even worse shape, with less features and more bugs
[15:44:47] <pve> I admit to being the "new guy" once.
[15:47:18] <pve> I advocated rewriting some old CL code in <superior language>.
[15:47:33] <pve> And now look where I am :)
[15:48:09] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:48:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:52:45] <pjb> semz: when the programmer's population double every 5 years, the average experience of programmers is 5 years.  That said, the rate of growth of the programmer population has reduced, we're in the top of the sigmoid, at about doubling every 40 years.
[15:53:55] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:9148:627f:8d41:a3b0)
[15:59:08] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:eca1:6dc5:130:b5b5) (Ping timeout: 268 seconds)
[16:00:41] *** Joins: hhdave (~hhdave@162.43.194.14)
[16:06:22] <flip214> pjb: we're doubling every 40 years? I'm eating a lot, but not *that much*
[16:06:48] <flip214> (No need to reply, I know what you mean)
[16:07:36] <rotateq> pve: which "old" CL code?
[16:08:28] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[16:08:31] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[16:10:23] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[16:11:01] *** Quits: etiago (~etiago@user/etiago) (Quit: ZNC 1.8.2 - https://znc.in)
[16:11:47] *** Joins: etiago (~etiago@user/etiago)
[16:24:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[16:27:54] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:29:54] *** Quits: dre (~dre@2001:8003:c932:c301:8916:3a5f:8275:217d) (Quit: Leaving)
[16:38:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:44:56] *** Joins: Bike (~Glossina@71.69.170.70)
[16:44:56] *** ChanServ sets mode: +o Bike
[16:59:23] *** Quits: hhdave (~hhdave@162.43.194.14) (Quit: hhdave)
[17:00:28] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[17:01:58] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Client Quit)
[17:05:33] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:06:53] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:17:07] *** Joins: s-liao (~s-liao@101.86.99.70)
[17:33:46] <pdietz> @jackdaniel: the cleanup I like to do is supportive: is the code adequately tested?Â  Â If not, are there bugs revealed by new tests?Â  Too much software is still in the "good enough, ship it" state and could use firming up.
[17:38:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:39:21] <akater[m]> mzan:  1. Are you sure defun* knows anything about declare optimizable-series-function?  series has its own defun to treat it.  2. sometimes series won't optimize poorly written code, by design.
[17:40:41] <jackdaniel> pdietz: I'm not saying that all cleanups are futile, only that often people mistake necessary complexity with mess
[17:43:23] <mzan> akater[m]: Thanks. I will check. BTW I made the first exsercise of AoC with series, the second with loop and with the third I'm using "iterate". Up to date I like very much "iterate", but probably some "series" based code is more reusable/composable.
[17:43:49] <mzan> At the end of the AoC exsercise, I will check.
[17:45:03] <mzan> Ah, maybe later I can test also generators http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/html/cltl/clm/node362.html
[17:45:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:46:24] <lisp123> What's the best way to generate / extract a unique id for a lisp object?
[17:49:36] <jackdaniel> the object itself is an unique id
[17:49:49] <lisp123> I am thinking GENSYM. But also considering whether its possible to get the number e.g. in #<TEST2 {1009F8F2F3}>
[17:50:05] <lisp123> That's a memory address so is subject to change? Or is it relatively constant
[17:50:11] <mfiano> That number can change at any time
[17:50:29] <lisp123> Thought so. I guess gensym it is
[17:51:00] <mfiano> THat isn't anymore of a unique ID than the object itself.
[17:51:13] <lisp123> for an external process (outside of Lisp) it would be
[17:51:27] <mfiano> Not really. There's sxhash
[17:52:24] <lisp123> How likely are collisons?
[17:52:57] <lisp123> Perhaps I should just send an equivalent of the form itself (e.g. specify each attribute) if that's a big issue
[17:53:22] <mfiano> That depends on the implementation.
[17:54:33] <mfiano> Will the external process outlive the lisp image, or is it possible that it could?
[17:54:59] <lisp123> No they would run together
[17:55:03] <lisp123> and end together
[17:55:26] <mfiano> Which external process?
[17:55:31] <_death> a simple counter will do?
[17:55:53] <lisp123> _death: Very good idea!! Much better than gensym
[17:55:58] <mfiano> Yes, a timestamp/serial number/simple counter is a good choice.
[17:56:00] <random-nick> I have a related question, what is the best way to round-trip a CL object over CFFI? specifically, when a C library excepts a function pointer and a data pointer to use as a callback, how do you pass a closure over the data pointer to the CFFI callback which gets passed as the function pointer?
[17:56:25] <lisp123> mfiano: Yes, timestamp is also very good. I think I will do that
[17:56:55] *** Joins: hhdave (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net)
[17:56:57] <mfiano> lisp123: I didn't mean timestamp literally. That is a term given to an increasing number, also sometimes called a counter or serial number.
[17:57:27] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:57:49] <mfiano> But that will also do.
[17:58:54] <jackdaniel> literal timestamp has a limitation that you have to wait i.e 1s to create a next one
[17:59:12] <jackdaniel> otherwise you have duplicates
[17:59:51] <Bike> random-nick: not my area of expertise, but could you pass #'funcall as the function pointer and the closure as the data
[18:01:11] *** Joins: hhdave_ (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net)
[18:01:51] *** Quits: hhdave (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net) (Ping timeout: 252 seconds)
[18:01:51] *** hhdave_ is now known as hhdave
[18:02:14] <lisp123> jackdaniel: True. The LOCAL-TIME library seems to support millisecond / microsecond, but I'm not sure how stable that is
[18:03:18] <lisp123> Will have a think, thanks all! :)
[18:03:24] <jackdaniel> use a counter
[18:03:41] <jackdaniel> and all your problems are gone
[18:03:50] <lisp123> Ok :)
[18:04:02] <mfiano> Except perhaps the ABA problem :)
[18:07:37] <jackdaniel> aba problem?
[18:09:27] <mfiano> If you ever need to reclaim identifiers representing since deleted objects, you could run into a scenario where the new data looks like the old data.
[18:14:02] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[18:16:42] <pve> rotateq: I remembered wrong, it was actually a Perl script that was to be rewritten, I advocated doing it in <superior language>, while CL was kind of the default choice since a lot of other code there was written in CL.
[18:18:49] *** Joins: treflip (~user@95.79.32.99)
[18:19:12] *** Joins: parjanya (~esb@2804:14c:1ad:8b70::1000)
[18:19:39] <pve> rotateq: I ended up writing it in CL on the job, and because it was a fairly small script, and I was curious, in the other language in my own time.
[18:21:49] <pve> rotateq: I remember being blown away when the CL version (written by me, a newbie) outperformed the version written in the other language.
[18:23:51] <random-nick> Bike: the trouble with that is that the closure might also get moved
[18:24:15] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11db:cd2:9148:627f:8d41:a3b0)
[18:24:47] <Bike> you'd have to pin it, i guess
[18:24:54] <random-nick> on ECL you don't have to do anything since the GC isn't moving, on SBCL you can pin it...
[18:24:59] <Bike> but isn't that a problem any time you pass a lisp object to C
[18:25:09] <random-nick> but I can't find anything in CFFI which wraps that functionality
[18:25:38] <random-nick> yes, but you usually pass C objects to C
[18:26:32] <_death> a simple counter will do?
[18:27:17] <etimmons> Typically i store the CL data in a hashtable with an integer id. Pass the id as the data, and then the callback knows to look up the true data in the hash table
[18:27:26] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d4:3994:9148:627f:8d41:a3b0) (Ping timeout: 245 seconds)
[18:30:10] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[18:35:40] <random-nick> _death, etimmons: that's what I was thinking, and overflowing even a 32-bit pointer probably isn't going to happen much, right?
[18:35:56] <_death> do you use a 32-bit machine?
[18:36:45] <_death> in that case, you can't have 2^32 objects anyway ;)
[18:37:12] <_death> well, you can over time I guess.. then you need some recycling
[18:37:13] <random-nick> you don't need 2^32 objects alive at once
[18:38:11] <random-nick> but yes it's still unlikely to overflow
[18:54:30] <rotateq> pve: good to hear
[18:56:24] *** Quits: hhdave (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net) (Quit: hhdave)
[18:56:32] *** Quits: raeda (~raeda@72.49.249.241) (Read error: Connection reset by peer)
[18:56:52] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[18:56:58] *** Joins: raeda (~raeda@72.49.249.241)
[18:59:46] *** Joins: raeda_ (~raeda@72.49.249.241)
[19:01:37] *** Quits: raeda (~raeda@72.49.249.241) (Ping timeout: 252 seconds)
[19:03:50] <jackdaniel> mfiano: thanks
[19:06:29] *** Joins: Alfr (~Alfr@user/alfr)
[19:07:28] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Read error: Connection reset by peer)
[19:16:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:18:00] <Guest74> beach: I think part of the problem lies in the fact that very few Lisp learning materials mention any conventions at all.  I recall one talking about formatting and the gist was, use emacs.  The other part of the problem seems to be in other languages you just run your code through a linter.
[19:18:31] <rotateq> there's also a style guide by Google
[19:20:58] <Guest74> So what's the json parser de jour?  Looking for something simple to just parse responses from weather apis.
[19:21:31] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 256 seconds)
[19:22:28] *** Quits: xsperry (~xs@user/xsperry) ()
[19:23:34] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[19:23:53] *** Joins: etiago (~etiago@user/etiago)
[19:26:01] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:36:12] *** Joins: makomo (~makomo@user/makomo)
[19:40:10] *** Joins: notzmv (~zmv@user/notzmv)
[19:41:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:41:26] <beach> Guest74: Again, I am not surprised that specific conventions for specific languages, including Common Lisp, are not known by relative newbies.  And that is not a problem either, because those conventions can be learned.  My surprise is that some people don't acknowledge that there is such a thing as conventions in software development, so they don't understand the importance of such conventions.
[19:45:12] <jackdaniel> do we take convention as something that is the most commonly used or something that would be considered "more correct" under /some/ criteria?
[19:45:43] <jackdaniel> i.e using #+nil to disable code seems to represent the former and using #+(or) the latter
[19:45:56] <yitzi> Guest74:  https://github.com/sabracrolleton/sabracrolleton.github.io/blob/master/json-review.md and https://github.com/yitzchak/shasht#benchmarks and https://yitzchak.github.io/shasht/parsing.html
[19:46:02] <Guest74> seems to also depend which decade of code you're looking at.
[19:46:17] <Guest74> thanks yitzi:
[19:47:48] <Guest74> that last link doesn't look so good.
[19:48:25] <yitzi> Oh, what do you mean?
[19:49:20] <Guest74> lots of dark blue.
[19:50:04] <yitzi> It only shows differences. Tests are compliant are not shown. There is like 300 tests as a I recall.
[19:50:24] <yitzi> Or maybe 1000. It is a lot.
[19:51:01] <yitzi> There is another library which aims for compliance in addition to the one I wrote (shasht) ... looking for the link
[19:51:08] <mfiano> jzon
[19:51:32] <Guest74> is that the new one?  I see the tests on first link are for 2016.
[19:51:32] <yitzi> mfiano: Thanks
[19:52:09] <yitzi> yitzi: https://github.com/Zulu-Inuoe/jzon was written about the same time as I wrote shasht. I think we were unaware of each others efforts.
[19:52:58] <yitzi> No idea if there have been updates to the first link
[19:54:01] <Guest74> huh, jzon isn't on ql.
[19:54:34] <mfiano> Zulu does not like submitting his work to Quicklisp.
[19:54:54] <mfiano> Something about more responsibility than he has time for.
[19:55:08] <yitzi> And blue doesn't mean bad. Yellow and orange are the really bad indicators.
[19:55:43] <Guest74> well, I consider failed parsing bad.
[19:56:44] <yitzi> Not all JSON is valid. Plus JSON is very ill defined.
[20:00:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:01:03] <Guest74> I just need something simple, for decoding only, that can preferably read from byte arrays. Which jzon does, but no ql is probably a problem.
[20:02:29] <Guest74> ah, seems I can get drakma to return it as a string.
[20:02:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[20:03:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:06:56] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:15:17] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:20:14] *** Joins: yewscion (~yewscion@2604:ca00:14a:ab8d::a60:7c54)
[20:42:28] <NotThatRPG> Krystof: Yesterday you told me that SBCL provided a way to collect the source file for an entity, but that left it as an exercise to the reader to do something with that information (store it, make it retrievable) -- do I understand you correctly?
[20:46:31] <Krystof> That's my understanding
[20:47:41] <lisp123> NotThatRPG: Is there something you want to do in particular?
[20:47:44] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[20:48:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:50:46] <NotThatRPG> lisp123: I have added source file recording for FiveAM tests, suites, and fixtures, which works on CCL and Allegro. I would like to make it work on SBCL, as well.
[20:51:56] *** Joins: sbodin (~sbodin@185.12.224.98)
[20:52:45] <NotThatRPG> I was looking into what SLY does to find source locations on SBCL to try to identify how this stuff is looked up.
[20:52:57] *** Joins: gaqwas (~john@dynamic-077-007-008-097.77.7.pool.telefonica.de)
[20:53:05] <lisp123> You want to find the files in which a given function or symbol is defined?
[20:54:59] <lisp123> If so, use something like this https://pastebin.com/rB7z95Vg
[20:55:20] <NotThatRPG> lisp123: Well sort of -- the FiveAM entities have symbols for names, and I would like to look them up akin to the way I do on Allegro (CCL is similar): (excl:source-file 'add-2 :fiveam-test)
[20:56:21] <NotThatRPG> On Allegro and CCL there's a protocol to invoke source file recording, e.g., when doing macroexpansion of a defining form.
[20:56:23] <lisp123> sb-introspect:find-definition-source and equivalent functions will help. Look at the sb-introspect.lisp (I think that's what its called) package to figure out which ones you need to use
[20:56:44] <NotThatRPG> lisp123: Thanks, will do!
[20:58:44] <lisp123> Yeah looks like that is what you are after, play around with it and then use it as you want...since a symbol can refer to variables / functions / etc., SBCL will return a list of source locations, so you need to parse that list to get what you are after
[20:59:45] <lisp123> https://github.com/sbcl/sbcl/blob/25904be20ae41d10f0842b8f16b7c19f1c34ec8f/contrib/sb-introspect/introspect.lisp#L203 here you go :)
[21:00:04] *** Quits: sbodin (~sbodin@185.12.224.98) (Ping timeout: 256 seconds)
[21:02:00] <NotThatRPG> lisp123: Ugh. It's written so that the set of types it can track is not extensible (they are hard-coded into a big CASE expression)
[21:02:46] <NotThatRPG> Would be a lot nicer if that were a generic function with EQL dispatch or something.
[21:03:21] <lisp123> Be the change you want to see ;) Send me the generic function if you do write it, so I can use it :)
[21:03:34] *** Joins: Catie (~user@user/catie)
[21:04:17] <lisp123> If you look at the code I sent earlier (I do it for generic functions / macros / functions, but not other types of symbols), there's another function called find-definition-source that is more helpful, but expects you give it a lisp object and not a name
[21:04:19] <lisp123> IIRC
[21:05:06] <NotThatRPG> Looks like line 406
[21:05:13] <NotThatRPG> (at least in my copy)
[21:05:21] <lisp123> yes, that's the one
[21:05:54] <NotThatRPG> Also hard-coded. This time typecase.
[21:06:40] <NotThatRPG> Turning those into generic functions seems like a reasonable move, but potentially a total waste of time if the maintainers were not interested in seeing such a change.
[21:07:04] <lisp123> TBH I think that function is pretty good already
[21:07:25] <lisp123> you need to ultimately supply a lisp object right
[21:07:38] <NotThatRPG> yes, but it has to be one of a known set of classes.
[21:07:59] <NotThatRPG> The protocol offered by CCL and ACL seems significantly preferable
[21:07:59] <lisp123> I think it covers nearly all cases no?
[21:08:22] <lisp123> This is the magic line (find-definition-source (class-of object))
[21:09:05] <lisp123> By all means, if there is a way to improve it, please do let them know as it would be very useful for a lot of us. I assumed it worked well
[21:10:04] <NotThatRPG> lisp123: Give me a minute, and I will make a pastebin for you to see the comparison
[21:12:15] <Krystof> I think my thought is that the consumer of the definition sources is not generic
[21:12:22] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:12:24] <Krystof> so having a generic function in the middle isn't particularly helpful
[21:13:40] <Krystof> I'd like to see the comparison with the CCL/ACL protocol but it should also cover retrieving and using the source location
[21:13:43] <Bike> NotThatRPG: is this protocol documented somewhere?
[21:16:01] <NotThatRPG> Krystof, lisp123, @Bike : Here's a pastebin that shows use of the protocol -- TL;DR: it works like the protocol for CL:DOCUMENTATION https://pastebin.com/NVkGiJFy
[21:16:37] <NotThatRPG> Franz has very good docs about source file recording: https://franz.com/support/documentation/current/doc/source-file-recording.htm
[21:17:30] <NotThatRPG> I couldn't find anything comparable for CCL (but I might easily have overlooked something). It was pretty easy to adapt the ACL method, except that it required an additional step of registering a new definition type.
[21:17:43] <NotThatRPG> (this is shown in the paste)
[21:17:45] <Krystof> ok, but my point stands: there's no actual advantage to a generic excl:source-file if you never call it with a variable second argument
[21:18:31] <NotThatRPG> Krystof: You mean like (excl:source-file 'add-2 :fiveam-test) ? I'm not sure I follow the question.
[21:18:49] <jackdaniel> it is excl:record-source-file name :type type) <--
[21:18:57] <jackdaniel> clearly a keyword, you don't specialize on keyword parameters
[21:19:00] <Krystof> I mean like (defun find-add-2-definitions (x) (excl:source-file 'add-2 x))
[21:19:12] <Bike> i think what Krystof means it that if a consumer (slime, say) doesn't know :fiveam-test is valid, it will never do it, so what's the point
[21:19:18] <Krystof> right
[21:19:31] <jackdaniel> nvm me :)
[21:19:45] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[21:19:54] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[21:20:09] <Krystof> If the set of all possible types is exposed somewhere, which it might be, I can imagine a totally-generic "definition source navigator" providing an interface to that, so this is not a complete "no"
[21:20:20] <Bike> ACL's "source-file" function has an optional type argument, like jackdaniel said, and if it's T it returns an alist of all info regardless of type
[21:20:41] <Bike> which seems like exactly what you'd want for something like slime
[21:20:50] <Krystof> but I bet in those circumstances you would want something to convert :fiveam-test into "FiveAM test"
[21:21:05] <NotThatRPG> I already use this a lot for Domain Specific Languages to look up program constructs generated by various macros and parsers
[21:21:37] <Krystof> Bike: I think it's some of what you'd want for something like slime / a clim "definition inspector", but in practice I think you'd want more
[21:21:38] <NotThatRPG> It's simple and elegant, and ... I don't see how I would do anything like it with SB-INTROSPECT.
[21:22:03] <lisp123> NotThatRPG: Thanks for the links, I will think about it later. It's an interesting thought for sure (and as a side, Franz has great documentation)
[21:22:07] <NotThatRPG> Maybe it's possible, but the source isn't enough to tell me how to do it.
[21:22:12] <Bike> yeah, you'd probably want to print it more nicely, true, but having the info at all seems likea  necessary starting point
[21:22:45] <lisp123> Although I'm still missing what SB-INTROSPECT cant' do
[21:23:02] <lisp123> It looks up the lisp object, which should be unique
[21:23:18] <jackdaniel> lisp123: 'foo may represent a function, a class etc
[21:23:37] <lisp123> jackdaniel: Yeah, so one has to pass in the right object
[21:23:39] <jackdaniel> and NotThatRPG wants it to be able to introspect also a 'foo test suite (that is not defined in cl standard)
[21:23:57] <Krystof> (defmacro record-source-file (name type) #+sbcl (setf (getf name type) (source-location))) (flet ((source-file (obj type) (source-location-file (getf name type)))) ...)
[21:24:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:24:06] <lisp123> Is that a class? If so, it should work
[21:24:11] <NotThatRPG> lisp123: What if the lisp object is a symbol that names an object? I don't ever touch the internals of FiveAM structures.
[21:24:47] <Krystof> sprinkle appropriate ` into the macro
[21:24:48] *** Joins: amb007 (~a_bakic@127.39.22.93.rev.sfr.net)
[21:24:56] <NotThatRPG> lisp123: One never touches the objects internal to FiveAM
[21:25:15] <NotThatRPG> There's some complex lookup process which I don't know at all, and should not have to.
[21:25:36] <Krystof> I don't think sb-introspect is relevant, for what it's worth
[21:25:36] <lisp123> NotThatRPG: But that lookup process is the very essence of Lisp, a symbol can name different things
[21:26:05] <lisp123> NotThatRPG: I will read those things, never mind me :) TBC when I do
[21:26:05] *** Quits: amb007 (~a_bakic@127.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:26:10] <NotThatRPG> lisp123: But my not having to get anywhere near an object is the very essence of data abstraction! ;-)
[21:26:25] *** Joins: amb007 (~a_bakic@127.39.22.93.rev.sfr.net)
[21:26:25] *** Quits: amb007 (~a_bakic@127.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:26:38] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 252 seconds)
[21:26:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:26:49] <Krystof> put data on symbol-plists, if you have names, and/or in hash tables keyed by the object, if you have (find-thing <name>) or just the objects themselves; you don't need the internals of anything
[21:27:36] <jackdaniel> lisp123: this is to allow questions like: tell me where I can find the source code of a test named 'clever-test (and that test is not a class)
[21:27:42] <Krystof> (excl:source-file name type) is just a lookup of a piece of data associated with a name; store that however you like
[21:27:45] <NotThatRPG> Krystof: Yes, I agree, the PLIST is the way to go. But then I have something that won't work with SLIME, right? Because it uses the SB-INTROSPECT API which seems (as far as I can tell) not to be extensible
[21:29:02] <NotThatRPG> If I knew how to use function wrappers in SBCL, then I would be able to do this, I suppose.
[21:29:06] <Krystof> possibly
[21:29:19] <Krystof> so, yes, the support for this in slime is not generic
[21:29:29] <Krystof> (sbcl's swank, that is; it might be elsewhere)
[21:29:35] <NotThatRPG> Still seems like making SB-INTROSPECT hookable would be handy
[21:30:37] <lisp123> jackdaniel: Thanks, that helped
[21:30:53] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:31:01] <jackdaniel> great :)
[21:31:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:31:41] *** Joins: amb007 (~a_bakic@127.39.22.93.rev.sfr.net)
[21:32:48] <Krystof> with a set of standardized definition types, downstream code can make UIs to those types that are suitably adapted.  Example: if for nothing else, being able to map a symbol to a user-acceptable name, but possibly other things.
[21:32:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:33:53] <Krystof> with arbitrary user-specifiable symbol-names for types of definition, you gain a bit of genericity but lose the ability (without having additional mechanisms) to have anything else
[21:34:29] <NotThatRPG> Krystof: If one is building something with a domain specific language, having an extensible set of definition types seems critical. I'd rather have just a symbol naming the type, instead of being shackled to a fixed set of definition types.
[21:34:41] <Krystof> without a protocol, how can slime know how to display a heading for your fiveam definition locations (other than :fiveam-fixture)
[21:34:52] <Bike> it doesn't seem like a loss, since without the hook you have nothing and slime knows nothing
[21:35:05] <Bike> nowhere to go but up
[21:35:23] <Krystof> if you're building a domain-specific language, I would venture to suggest that you don't want all the definition sources displayed, you probably want only your domain-specific definitions displayed
[21:35:43] <NotThatRPG> Krystof: Since FiveAM fixtures, tests, and test suites can share names in a lisp-2 ish way, even just having the symbol to distinguish between different types of definition in a cross-reference list would be helpful
[21:36:23] *** Quits: amb007 (~a_bakic@127.39.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:36:40] *** Joins: amb007 (~a_bakic@238.14.23.93.rev.sfr.net)
[21:37:17] <Krystof> Yes, and you can have that.  What you can't currently have, and what I'm questioning, is whether you want your user-defined definition types shown in the same place as standard definition types, with no ability to do any intercession
[21:37:35] <Krystof> why don't you have a "show-fiveam-definitions" operation?
[21:38:12] <NotThatRPG> Because then I couldn't use SLIME or SLY to jump to the source location (which I can with ACL or CCL), without additional programming (if I'm still following you)
[21:38:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:38:52] <NotThatRPG> It just seems to me that DOCUMENTATION is a good guide to what one might want to do here.
[21:39:07] <Krystof> Well, I think that documentation is poorly-specified and painful to use in practice
[21:39:57] <Bike> with the addition of some mechanism to get all possible metadata about an object regardless of type, the protocol seems roughly fine
[21:39:59] <Krystof> its contents are not well-specified enough (you get a string!  Woot.  Good luck using it) and you specifically can't find out about all the different kinds of entities supported
[21:40:06] <NotThatRPG> Yes, but that is because of a number of other issues (like how documentation is to be displayed), the fact that SLY and SLIME have crummy interfaces to DOCUMENTATION, etc.  The lisp machines had great documentation
[21:40:51] <Krystof> the lisp machines did not define their documentation based on the DOCUMENTATION generic function
[21:40:59] <NotThatRPG> Right.
[21:41:15] <Krystof> so, why are you suggesting that the DOCUMENTATION generic function is a good guide?  I think it's a terrible guide
[21:41:18] <NotThatRPG> This is something Python (at least Numpy-style) does a lot better.
[21:41:25] *** Joins: clhelp (~clhelp@2602:61:7432:3d01:c20:bfe9:3010:3cbc)
[21:41:32] <NotThatRPG> Krystof: I don't think the extensibility is what is bad about DOCUMENTATION
[21:41:45] <clhelp> hey, weird question, but how do i remove dotted pair notation from the cl reader?
[21:41:51] <Krystof> documentation can be made useful with substantial additional protocol (agreements on what should look like a hyperlink, ability to introspect, ...)
[21:42:03] <Bike> clhelp: not possible
[21:42:08] <Krystof> if you define a new documentation type, how can a third-party find out about it?
[21:42:08] <clhelp> i'm writing a shell macro and it's messing with it...
[21:42:19] <clhelp> Bike oh, that's unfortunate
[21:42:25] <Bike> let me double check, though
[21:42:39] <clhelp> I tried to write a reader macro to override it, but it doesn't look like it's defined via SET-MACRO-CHARACTER
[21:42:42] <NotThatRPG> Krystof: I don't think that the terribleness of DOCUMENTATION is because it allows new types of documentation. It's because we don't have any conventions
[21:42:46] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[21:43:30] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[21:44:23] <clhelp> (side question: what is the point of dotted pairs? that is, they don't seem more useful than a prefix representation, but i could be wrong)
[21:44:39] <Bike> what do you mean by "a prefix representation"
[21:44:52] <clhelp> like '(. 3 3)
[21:44:58] <clhelp> instead of '(3 . 3)
[21:45:02] <Bike> how would you write (4 5 . 3)?
[21:45:12] <clhelp> oh, hm
[21:45:28] <jackdaniel> (. 4 5 3) perhaps
[21:45:37] <clhelp> i guess you'd have '.' make a list out of all of its arguments, yeah
[21:45:41] <jackdaniel> and (. 4 5 3 nil) would be the same as (list 4 5 3)
[21:45:43] <Bike> okay, yeah, i double checked, i don't think there's any way to customize the dot. that's kind of interesting
[21:45:55] <Bike> what you could do is completely replace the ( reader macro so that it doesn't understand the consing dot
[21:46:02] *** Quits: clhelp (~clhelp@2602:61:7432:3d01:c20:bfe9:3010:3cbc) (Client Quit)
[21:46:07] <Bike> okay.
[21:46:12] <lisp123> lol
[21:46:14] *** Joins: clhelp (~clhelp@2602:61:7432:3d01:34b0:b9fd:d8a3:7083)
[21:46:16] <clhelp> (or a bunch of car cells, actually)
[21:46:43] <Bike> clhelp: "okay, yeah, i double checked, i don't think there's any way to customize the dot. that's kind of itneresting. what you could do is completely replace the ( reader macro so that it doesn't understand the consing dot."
[21:47:18] <clhelp> oh, i wasn't aware that ( was a reader macro! yeah, i guess i can try that. thanks!
[21:47:24] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[21:47:37] <fe[nl]ix> NotThatRPG: what's the problem exactly ? that you can't M-. a Fiveam test ?
[21:47:44] <NotThatRPG> Yep.
[21:47:53] *** Quits: clhelp (~clhelp@2602:61:7432:3d01:34b0:b9fd:d8a3:7083) (Client Quit)
[21:48:02] <lisp123> clhelp: I would avoid ... ehhh too late already left
[21:48:16] *** Joins: clhelp (~clhelp@2602:61:7432:3d01:7247:cd89:2019:3abe)
[21:48:37] <lisp123> clhelp: I would avoid playing around with reader macros too much tbh
[21:49:08] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:49:30] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[21:50:00] *** Joins: clhelp80 (~clhelp@97-116-50-61.mpls.qwest.net)
[21:50:23] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[21:50:29] <clhelp80> (ack, my network is spotty...)
[21:51:53] <clhelp80> well, thanks for the help-- seeya!
[21:51:58] *** Quits: clhelp80 (~clhelp@97-116-50-61.mpls.qwest.net) (Client Quit)
[21:52:18] *** Quits: clhelp (~clhelp@2602:61:7432:3d01:7247:cd89:2019:3abe) (Client Quit)
[21:58:32] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[21:59:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:03:31] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[22:04:26] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:10:48] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[22:12:06] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[22:16:20] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:27:22] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[22:27:24] *** Quits: amb007 (~a_bakic@238.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:28:41] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:29:31] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11db:cd2:9148:627f:8d41:a3b0) (Ping timeout: 245 seconds)
[22:30:07] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:38:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:47:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:48:27] *** Joins: tfeb (~tfb@88.98.95.237)
[22:50:25] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:53:27] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:58:22] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:01:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:05:50] <_death> you can use list*
[23:06:11] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[23:06:59] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[23:06:59] *** ChanServ sets mode: +o MichaelRaskin
[23:15:58] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:16:23] <Guest74> anybody know what format puri takes for :query?
[23:16:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[23:25:20] <Guest74> nevermind, seems it has no facility to build queries. quri it is.  Would have been nice to use quri as drakma accepts that.
[23:28:44] <kagevf> semz: parenscript is a sub-set of CL that produces javascript
[23:36:24] <Guest74> any reasons to prefer drakma over dexador?
[23:42:08] *** Joins: dre (~dre@2001:8003:c932:c301:4931:2ba9:a613:d21a)
[23:42:48] <jackdaniel> it has a cooler name
[23:43:56] <jackdaniel> on top of that it has a good documentation and (most likely) its source code is more readable / hackable (knowing both authors style)
[23:44:52] *** Joins: tyson2 (~user@bras-base-toroon0240w-grc-46-64-228-134-62.dsl.bell.ca)
[23:46:42] *** Joins: Oladon (~olad@98.43.81.226)
[23:51:13] <Guest74> I actually don't see anything wrong with the dexador documentation.
[23:51:29] <Guest74> source seems fine.
[23:54:13] <Guest74> Anyways, if anybody knows any real issues I'll read the logs.  Seems easier to use with easier query construction with quri.
[23:54:43] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:57:09] *** Quits: gaqwas (~john@dynamic-077-007-008-097.77.7.pool.telefonica.de) (Ping timeout: 252 seconds)
