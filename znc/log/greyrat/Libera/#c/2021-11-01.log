[00:00:08] *** Quits: h2409 (~h2409@2607:fea8:3d81:3d00::f699) (Client Quit)
[00:03:50] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[00:05:10] <nomagno> Why are preprocessor statements newline-terminated?
[00:05:41] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[00:05:41] *** Joins: rgrinberg (~textual@190.113.111.74)
[00:06:04] <nomagno> As in, I don't know how old the preprocessor is, but I really struggle to find a reason it couldn't be terminated by a less whitespace-y token, like the rest of the language
[00:08:01] *** Quits: AmR (~AmREiSa@156.199.244.83) (Ping timeout: 245 seconds)
[00:08:11] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[00:08:21] *** Quits: V-T60 (~v@91.203.24.166) (Read error: Connection reset by peer)
[00:08:34] *** Joins: V-T60 (~v@91.203.24.166)
[00:12:59] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:13:11] *** Joins: zlg (~zlg@user/zlg)
[00:14:45] <rcf> nomagno: the preprocessor is really its own thing, much dumber than C proper. 
[00:15:33] <nomagno> rcf: At least it could have gotten a non-newline terminator between 1989 and 2021 :(
[00:15:50] <rcf> That would probably be annoying more than anything else 
[00:16:10] <nomagno> Well, something like 0xTERMINATE123 ? :P
[00:16:22] <rcf> People now rely on this dumbness to do weird things. 
[00:16:39] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[00:17:09] <nomagno> Even better UNDERSCORE-TERMINATE-nonewline-nonewline-TERMINATE-UNDERSCODE
[00:17:14] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[00:17:21] <nomagno> Impossible to mistake!
[00:17:28] <simpl_e> they could add #begin #end
[00:17:42] <rcf> Impossible to mistake, too annoying to actually use. 
[00:17:47] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[00:17:56] <nomagno> #begin and #end definitely sound like reasonable features
[00:18:07] <nomagno> Though too annoying, same problem
[00:18:51] <nomagno> I am looking for some kind of clear documentation on what Objective-C adds on top of C
[00:19:13] <nomagno> But apple seems to hate the world, so all documentation is a mess that can not be separated from their vendor-specific stuff
[00:20:56] *** Quits: superboot (~agentgasm@user/superboot) (Remote host closed the connection)
[00:20:57] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2)
[00:21:07] *** Joins: pulse_ (~pulse@user/pulse)
[00:23:31] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Read error: Connection reset by peer)
[00:23:45] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[00:23:52] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Remote host closed the connection)
[00:24:08] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[00:24:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[00:24:42] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 260 seconds)
[00:29:26] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 260 seconds)
[00:32:19] *** Parts: kish` (~aqua@user/aqua) (Leaving)
[00:34:14] *** Quits: pulse_ (~pulse@user/pulse) (Quit: pulse_)
[00:40:16] *** Joins: darklands (~darklands@69.43.65.116)
[00:40:16] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[00:40:29] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[00:41:32] <De4nWhit3> Hello everyone!
[00:42:47] *** Quits: darklands (~darklands@69.43.65.116) (Remote host closed the connection)
[00:43:54] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Ping timeout: 260 seconds)
[00:46:19] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:47:37] *** Joins: neu__ (~neuterion@user/neuterion)
[00:49:28] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[00:51:46] *** Quits: neuterion (~neuterion@user/neuterion) (Ping timeout: 260 seconds)
[00:51:48] *** Joins: crankslider (~slidercra@user/slidercrank)
[00:52:49] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[00:55:04] *** Joins: neuterion (~neuterion@user/neuterion)
[00:56:08] <LangerJan> hi
[00:56:54] *** Quits: neu__ (~neuterion@user/neuterion) (Ping timeout: 260 seconds)
[00:57:41] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[00:57:46] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[00:59:18] *** Quits: geeknix (~pi@180.74.191.0) (Ping timeout: 260 seconds)
[01:01:15] *** Quits: strajder (~strajder@user/strajder) (Quit: nn)
[01:02:35] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:02:53] <twkm> moo.
[01:09:18] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:10:00] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:12:10] *** Joins: korg815 (~korg815@user/korg815)
[01:13:27] *** Joins: geeknix (~pi@2001:e68:5432:c96:3ce2:cddf:6be2:8763)
[01:14:49] *** Joins: Viewday4 (~Viewday@user/viewday)
[01:17:02] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 260 seconds)
[01:17:02] *** Viewday4 is now known as Viewday
[01:19:02] <carrar> w00t!
[01:20:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[01:21:13] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:22:22] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[01:25:43] *** Quits: Akuli (~Akuli@82-203-164-223.bb.dnainternet.fi) (Quit: Leaving)
[01:37:12] *** Joins: moatx (~moatx@46.152.146.185)
[01:39:48] *** Quits: moatx (~moatx@46.152.146.185) (Client Quit)
[01:40:01] *** kplant_ is now known as kplant
[01:45:39] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[01:45:57] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[01:46:35] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[01:50:35] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:52:43] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[01:57:27] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:01:15] *** Joins: humky_ (~humky@user/humky)
[02:01:59] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Quit: Reconnecting)
[02:02:26] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[02:03:26] *** Quits: humky (~humky@user/humky) (Ping timeout: 245 seconds)
[02:03:52] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[02:05:09] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:06:42] *** Quits: humky_ (~humky@user/humky) (Remote host closed the connection)
[02:06:58] *** Joins: humky (~humky@user/humky)
[02:07:48] *** Joins: moose (~moose@user/moose)
[02:10:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:13:34] *** Joins: kurahaupo_ (~kurahaupo@pa49-179-224-230.pa.nsw.optusnet.com.au)
[02:14:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:15:46] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[02:15:50] *** Quits: neuterion (~neuterion@user/neuterion) (Quit: Leaving)
[02:16:42] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[02:17:08] *** Quits: soliste (~soliste@88.164.90.135) (Remote host closed the connection)
[02:17:49] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[02:20:26] *** Quits: kurahaupo_ (~kurahaupo@pa49-179-224-230.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[02:20:47] *** Joins: Klinda_ping (~superleag@user/klinda)
[02:21:14] *** Joins: humky_ (~humky@user/humky)
[02:22:43] *** Joins: gtlsgamr (~gtlsgamr@38.87.162.138)
[02:22:45] *** jinsun__ is now known as jinsun
[02:23:42] *** Quits: humky (~humky@user/humky) (Ping timeout: 260 seconds)
[02:24:10] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[02:24:23] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2) (Ping timeout: 260 seconds)
[02:26:29] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[02:26:29] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[02:28:10] *** Joins: useretail (~useretail@185.132.19.151)
[02:29:29] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-b958-97b0-ca4d-4603.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:32:11] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 264 seconds)
[02:33:16] *** Quits: pizdets (~pizdets@183.182.115.247) (Ping timeout: 250 seconds)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.111.19)
[02:35:01] *** Joins: yopp (~kyle@ool-457887fa.dyn.optonline.net)
[02:36:47] *** Joins: rgrinberg (~textual@190.113.111.74)
[02:37:18] *** Quits: Sos (~Sos@d42-155.icpnet.pl) (Quit: Leaving)
[02:37:30] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[02:37:31] *** Quits: humky_ (~humky@user/humky) (Quit: Leaving)
[02:37:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e007:8711:e7b4:2641) (Ping timeout: 246 seconds)
[02:37:56] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Quit: Leaving)
[02:38:07] *** Parts: yopp (~kyle@ool-457887fa.dyn.optonline.net) ()
[02:38:29] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[02:39:04] *** Quits: soapsudsxx (~soapsudsx@209.221.40.155) (Remote host closed the connection)
[02:40:20] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:40:21] *** Quits: magla (~gelignite@55d47dc5.access.ecotel.net) (Quit: Stay safe!)
[02:42:11] *** Joins: teepee (~teepee@openscad/teepee)
[02:46:26] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[02:46:38] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[02:48:12] *** Joins: useretail (~useretail@185.132.19.151)
[02:50:34] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[02:53:47] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[02:54:21] *** Quits: Klinda_ping (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:54:26] *** Joins: NovumDXW (~NovumDXW@113.91.34.220)
[02:54:39] *** Joins: Klinda (~superleag@user/klinda)
[02:55:46] *** Quits: u1_ (~u1@95.54.115.226) (Quit: Leaving)
[02:55:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:55:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:55:58] *** Joins: wroathe (~wroathe@user/wroathe)
[03:03:12] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:05:46] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:06:26] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Read error: Connection reset by peer)
[03:06:45] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[03:07:18] *** Joins: useretail (~useretail@185.132.19.151)
[03:11:46] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[03:12:58] *** Joins: johnjay (~pi@192.142.100.50)
[03:14:12] *** Quits: rkta (~kt@62.113.246.111) (Remote host closed the connection)
[03:14:21] *** Joins: rkta (~kt@62.113.246.111)
[03:19:35] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:01] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:23:13] *** Joins: X-Scale` (~ARM@92.250.98.212)
[03:26:14] *** Quits: X-Scale (~ARM@31.22.147.35) (Ping timeout: 260 seconds)
[03:27:03] *** X-Scale` is now known as X-Scale
[03:27:24] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[03:27:49] *** Joins: seninha (~seninha@user/seninha)
[03:29:50] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[03:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[03:30:04] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:13] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:30:14] *** Joins: useretail (~useretail@185.132.19.151)
[03:30:25] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 265 seconds)
[03:30:29] *** Joins: thing (~thing@user/thing)
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:37] *** Quits: neunon (~neunon@user/neunon) (Quit: ZNC 1.8.2 - https://znc.in)
[03:30:55] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:31:02] *** Joins: zopsi (~zopsi@irc.dir.ac)
[03:31:12] *** Joins: neunon (~neunon@user/neunon)
[03:44:19] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[03:45:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[03:47:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[03:47:43] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[03:48:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:48:10] *** Joins: useretail (~useretail@185.132.19.151)
[03:48:33] *** deadk is now known as edk
[03:49:59] *** Joins: Atque (~Atque@user/atque)
[03:50:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:51:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:55] *** Lord_of_Life_ is now known as Lord_of_Life
[03:54:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:56:12] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:58:37] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[03:58:47] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[03:58:54] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:00:22] *** Joins: Wulf (~Wulf@user/wulf)
[04:00:45] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[04:01:16] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[04:04:41] *** Joins: phao (~phao@2804:d45:8e7a:de00:c61:159f:5613:e6cf)
[04:08:39] *** Joins: earnestly (~earnest@user/earnestly)
[04:10:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:11:33] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[04:14:07] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[04:15:42] *** Joins: useretail (~useretail@185.132.19.151)
[04:25:25] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[04:27:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:27:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:27:34] *** Joins: wroathe (~wroathe@user/wroathe)
[04:28:35] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[04:30:21] *** Joins: humky (~humky@user/humky)
[04:30:36] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:32:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[04:33:44] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:36:51] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:37:49] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[04:38:10] *** Joins: useretail (~useretail@185.132.19.151)
[04:38:41] *** Quits: phao (~phao@2804:d45:8e7a:de00:c61:159f:5613:e6cf) (Quit: Leaving)
[04:40:01] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[04:57:41] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[04:59:12] *** Joins: useretail (~useretail@185.132.19.151)
[04:59:53] *** tafama is now known as tafa
[05:01:21] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:05:06] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[05:05:52] *** Quits: NovumDXW (~NovumDXW@113.91.34.220) (Read error: Connection reset by peer)
[05:06:17] *** Joins: NovumDXW (~NovumDXW@113.91.34.220)
[05:10:24] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[05:10:36] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[05:12:00] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:13:15] *** Quits: MrSpooky (Ben@mrbenc.net) (Ping timeout: 260 seconds)
[05:13:41] *** Quits: NovumDXW (~NovumDXW@113.91.34.220) (Quit: Leaving)
[05:24:23] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Read error: Connection reset by peer)
[05:25:18] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[05:29:30] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 260 seconds)
[05:32:43] *** Quits: busybusybusy (~BUSY@user/busy) (Read error: Connection reset by peer)
[05:36:23] *** Joins: rgrinberg (~textual@190.113.111.74)
[05:39:42] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[05:41:49] *** Joins: Oxfuxxx (~Smugdun@83.97.23.29)
[05:42:27] *** Quits: Oxfuxxx (~Smugdun@83.97.23.29) (Client Quit)
[05:43:58] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:44:16] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[05:47:21] *** Joins: pucara (~i@181.92.84.206)
[05:47:33] *** Joins: MrC (Ben@mrbenc.net)
[05:48:27] *** Quits: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[05:52:17] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:56:06] *** Joins: codeminster (~codemin@212.102.63.33)
[05:58:34] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:00:13] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[06:00:37] *** Quits: codeminster (~codemin@212.102.63.33) (Client Quit)
[06:03:30] *** Joins: wo0f (~wo0f@user/wo0f)
[06:09:55] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[06:11:04] *** Joins: jbauer (~jbauer@146.71.11.98)
[06:11:39] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Read error: Connection reset by peer)
[06:13:23] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:16:28] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[06:17:25] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[06:17:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:17:54] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[06:17:57] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[06:19:40] *** Joins: useretail (~useretail@185.132.19.151)
[06:20:46] *** Joins: The_Jag_ (~The_Jag@host-87-16-87-93.retail.telecomitalia.it)
[06:20:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 264 seconds)
[06:21:42] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[06:23:34] *** Quits: The_Jag (~The_Jag@host-82-56-115-92.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[06:34:22] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:34:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:35:42] *** Joins: HaMsTeRs (~Thunderbi@14-0-171-244.static.pccw-hkt.com)
[06:38:06] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 260 seconds)
[06:43:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:44:37] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[06:50:02] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[06:52:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:54:10] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[07:04:56] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[07:09:09] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[07:12:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:12:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:12:13] *** Joins: wroathe (~wroathe@user/wroathe)
[07:15:03] *** Quits: lenni1 (~lenni@user/lenni) (Quit: WeeChat 1.4)
[07:19:27] *** Quits: engest (~engest@50.39.176.86) (Read error: Connection timed out)
[07:19:55] *** Joins: engest (~engest@50.39.176.86)
[07:24:48] *** Quits: themasterbuilder (~user@89.17.155.85) (Remote host closed the connection)
[07:26:30] *** Quits: AbleBacon_ (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[07:26:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[07:33:57] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Quit: Leaving)
[07:35:48] *** Joins: soapsudsxx (~soapsudsx@209.221.40.155)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:12] *** Joins: mexijoe (~Android@97.115.177.65)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:05] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 260 seconds)
[07:39:24] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[07:39:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[07:39:59] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[07:41:56] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:42:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:43:06] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:43:22] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:43:49] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[07:44:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[07:44:14] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[07:44:16] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:44:33] *** Joins: tejr (~tejr@user/tejr)
[07:45:06] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 245 seconds)
[07:45:13] *** Quits: HaMsTeRs (~Thunderbi@14-0-171-244.static.pccw-hkt.com) (Read error: Connection reset by peer)
[07:45:29] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[07:47:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[07:48:34] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[07:48:41] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:48:44] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[07:48:58] *** Joins: thing (~thing@user/thing)
[07:50:50] *** Quits: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[07:54:47] *** Joins: kuku (~kuku@user/kuku)
[07:55:05] *** Parts: mexijoe (~Android@97.115.177.65) ()
[07:58:15] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[07:58:40] *** Joins: useretail (~useretail@185.132.19.151)
[07:59:42] *** Joins: kuku01 (~kuku@user/kuku)
[08:01:46] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 245 seconds)
[08:04:35] *** Joins: larry87 (~quassel@98.40.245.193)
[08:04:56] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:08:13] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[08:09:14] *** Joins: dmaroo (~dhruv@2409:4070:2e06:4854:5d99:c555:b8ae:f231)
[08:09:22] <Ox151> if i am sending writing and reading a number of bytes in a char array, do i have to loop over the buffer and re-asign each value the conversion for the byte order or can you convert it all at once? htonl, ntohl.   
[08:09:40] *** Joins: useretail (~useretail@185.132.19.151)
[08:10:31] *** Joins: kuku (~kuku@user/kuku)
[08:10:54] *** Quits: kuku01 (~kuku@user/kuku) (Ping timeout: 260 seconds)
[08:11:11] <Wulf> Ox151: make up your mind on what you've git. chars? bytes? larger numbers?
[08:12:13] <Wulf> Ox151: if you want to serialize integers into bytes (array of utf8 or unsigned char), I suggest you write a tiny function for it. Your compiler should optimize it.
[08:13:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:13:48] <SamuelMarks> hi
[08:14:19] <SamuelMarks> How do I read a file line by line without ASans failing? - All these fgets solutions provide "AddressSanitizer:DEADLYSIGNAL" https://stackoverflow.com/a/64406356
[08:15:07] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[08:15:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[08:16:06] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 260 seconds)
[08:17:50] *** presonic is now known as highrate
[08:18:13] <Wulf> Ox151: https://bpa.st/IAHA is converted to a single "movbel" instruction on my little endian system.
[08:26:46] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[08:26:46] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[08:27:10] *** Joins: useretail (~useretail@185.132.19.151)
[08:28:50] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[08:29:12] *** Joins: useretail (~useretail@185.132.19.151)
[08:29:32] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:30:58] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[08:38:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[08:39:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:40:50] *** Quits: engest (~engest@50.39.176.86) (Ping timeout: 260 seconds)
[08:41:59] *** Joins: HaMsTeRs (~Thunderbi@14-0-171-069.static.pccw-hkt.com)
[08:42:26] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[08:45:03] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[08:45:45] *** Joins: vaio (~gary@user/ghost)
[08:46:13] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[08:47:40] *** Joins: useretail (~useretail@185.132.19.151)
[08:51:22] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[08:51:40] *** Joins: useretail (~useretail@185.132.19.151)
[08:52:45] *** Joins: V-T60 (~v@91.203.24.166)
[08:54:09] *** Quits: wo0f (~wo0f@user/wo0f) (Remote host closed the connection)
[08:54:15] *** Quits: V-T60 (~v@91.203.24.166) (Client Quit)
[08:54:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:59:04] *** Joins: missogra (~missogra@dynamic-095-112-062-157.95.112.pool.telefonica.de)
[09:09:02] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[09:11:47] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:11:47] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:12:13] *** Joins: tejr (~tejr@user/tejr)
[09:13:38] *** Joins: dohtem (uid524096@user/dohtem)
[09:22:33] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[09:22:33] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Changing host)
[09:22:33] *** Joins: wo0f (~wo0f@user/wo0f)
[09:22:47] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[09:24:12] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[09:24:12] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[09:24:12] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (*.net *.split)
[09:24:12] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[09:24:12] *** Quits: cpuid (~cpuid@2a01:4f8:c0c:9ffd:cafe:cafe:cafe:dead) (*.net *.split)
[09:24:12] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (*.net *.split)
[09:24:12] *** Quits: heftig (heftig@archlinux/developer/heftig) (*.net *.split)
[09:24:12] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[09:24:12] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[09:24:12] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[09:24:12] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[09:24:12] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (*.net *.split)
[09:24:12] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[09:24:12] *** Quits: kevinsjoberg (sid499516@lymington.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: englishm (sid6629@tinside.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: terabit (sid146285@uxbridge.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: elichai2 (sid212594@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: aesin (~aesin@81.211.127.107) (*.net *.split)
[09:24:12] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:24:12] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[09:24:12] *** Quits: int (~int@0x4.cx) (*.net *.split)
[09:24:12] *** Quits: spike_spiegel3 (~spike_spi@static.200.4.251.148.clients.your-server.de) (*.net *.split)
[09:24:12] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[09:24:12] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[09:24:12] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:24:12] *** Quits: tobiasu (~tobiasu@user/tobiasu) (*.net *.split)
[09:24:12] *** Quits: buffet (~buffet@buffet.sh) (*.net *.split)
[09:24:12] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[09:24:12] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (*.net *.split)
[09:24:12] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[09:24:12] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[09:24:12] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[09:24:12] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[09:24:12] *** Quits: buzel (~buzel@fsf/member/buzel) (*.net *.split)
[09:24:12] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[09:24:12] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[09:24:12] *** Quits: Aighearach (~paris@user/aighearach) (*.net *.split)
[09:24:12] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[09:24:12] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[09:24:12] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (*.net *.split)
[09:24:12] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[09:24:12] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[09:24:12] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[09:24:12] *** Quits: adinf (~ariel@2001:19f0:5:5337:5400:3ff:fe6c:38e9) (*.net *.split)
[09:24:12] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[09:24:12] *** Quits: oj (quassel@user/oj) (*.net *.split)
[09:24:12] *** Quits: f0xb4t (~mac@78.46.13.69) (*.net *.split)
[09:24:12] *** Quits: eletrotupi (eletrotupi@user/eletrotupi) (*.net *.split)
[09:24:12] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[09:24:12] *** Quits: francis (francis@user/francis) (*.net *.split)
[09:24:12] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[09:24:21] *** Joins: francis (francis@user/francis)
[09:24:21] *** Joins: clockworkgirl (sophie@funkykitty.net)
[09:24:21] *** Joins: f0xb4t (~mac@78.46.13.69)
[09:24:22] *** Joins: spike_spiegel3 (~spike_spi@static.200.4.251.148.clients.your-server.de)
[09:24:22] *** Joins: eletrotupi (eletrotupi@2600:3c02::f03c:92ff:febb:2d7a)
[09:24:24] *** Joins: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de)
[09:24:25] *** Joins: tm512 (~tm512@50.53.132.213)
[09:24:26] *** Joins: oj (oj@user/oj)
[09:24:26] *** Joins: lonjil (~quassel@user/lonjil)
[09:24:26] *** Joins: aesin (~aesin@81.211.127.107)
[09:24:26] *** Joins: Riviera (Riviera@user/riviera)
[09:24:27] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[09:24:27] *** Joins: Soni (~quassel@autistic.space)
[09:24:28] *** Joins: andi_ (~andi@2a01:4f8:c0c:a014::2)
[09:24:29] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[09:24:29] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[09:24:29] *** Joins: bleb (~cm@user/bleb)
[09:24:29] *** Joins: heftig (heftig@archlinux/developer/heftig)
[09:24:31] *** Joins: cpuid (~cpuid@2a01:4f8:c0c:9ffd:cafe:cafe:cafe:dead)
[09:24:32] *** Quits: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de) (Changing host)
[09:24:32] *** Joins: Ragnor (~Ragnor@user/ragnor)
[09:24:33] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[09:24:35] *** Joins: Aighearach (~paris@c-71-63-160-210.hsd1.or.comcast.net)
[09:24:36] *** Quits: clockworkgirl (sophie@funkykitty.net) (Changing host)
[09:24:36] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[09:24:43] *** Joins: jan6 (jan6@tilde.team)
[09:24:45] *** Quits: andi_ (~andi@2a01:4f8:c0c:a014::2) (Changing host)
[09:24:45] *** Joins: andi_ (~andi@user/andi/x-3467420)
[09:24:47] *** Quits: Aighearach (~paris@c-71-63-160-210.hsd1.or.comcast.net) (Changing host)
[09:24:47] *** Joins: Aighearach (~paris@user/aighearach)
[09:24:50] *** Joins: tobiasu (~tobiasu@atom.tmux.org)
[09:24:51] *** Joins: adinf (~ariel@2001:19f0:5:5337:5400:3ff:fe6c:38e9)
[09:24:52] *** Joins: terabit (sid146285@id-146285.uxbridge.irccloud.com)
[09:24:52] *** Joins: ornxka (~ornxka@47.241.5.177)
[09:24:55] *** Joins: cust (amaama@blackbox.amaama.org)
[09:24:56] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[09:24:58] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[09:25:02] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[09:25:02] *** Quits: tm512 (~tm512@50.53.132.213) (Changing host)
[09:25:02] *** Joins: tm512 (~tm512@user/tm512)
[09:25:06] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[09:25:14] *** Joins: jancoow (~jancoow@user/jancoow)
[09:25:18] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[09:25:19] *** Joins: Fleck (~fleck@user/fleck)
[09:25:26] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[09:25:38] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[09:25:41] *** tobiasu is now known as Guest227
[09:25:42] *** Joins: wyre (~wyre@user/wyre)
[09:25:42] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[09:25:50] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[09:25:53] *** Joins: buzel (~buzel@fsf/member/buzel)
[09:25:57] *** Joins: hexology (~hexology@user/hexology)
[09:26:01] *** Joins: fakenullie (~nullie@london.nullie.name)
[09:26:06] *** Joins: int (~int@0x4.cx)
[09:26:30] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[09:26:30] *** Joins: energizer (~energizer@user/energizer)
[09:26:52] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[09:26:53] *** Joins: jbauer (~jbauer@146.71.11.98)
[09:27:32] *** Quits: wo0f (~wo0f@user/wo0f) (Quit: Leaving)
[09:28:13] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[09:28:13] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Changing host)
[09:28:13] *** Joins: wo0f (~wo0f@user/wo0f)
[09:28:39] *** Joins: wo0f_ (~wo0f@vps-7f6eecbb.vps.ovh.net)
[09:28:48] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[09:29:24] *** Joins: divine (~divine@2001:470:8247:1::31)
[09:29:29] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[09:29:46] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[09:29:57] *** Joins: easior (~easior@58.247.140.206)
[09:31:47] *** Quits: easior (~easior@58.247.140.206) (Client Quit)
[09:31:53] *** Quits: wo0f (~wo0f@user/wo0f) (Client Quit)
[09:32:00] *** Joins: wo0f__ (~wo0f@vps-7f6eecbb.vps.ovh.net)
[09:32:50] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[09:32:50] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (*.net *.split)
[09:32:50] *** Quits: prepro[m] (~prepromat@2001:470:69fc:105::1:68) (*.net *.split)
[09:32:50] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[09:32:50] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (*.net *.split)
[09:32:50] *** Quits: cwve[m] (~cwvematri@2001:470:69fc:105::1:1495) (*.net *.split)
[09:32:50] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[09:32:50] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (*.net *.split)
[09:32:50] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[09:32:50] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[09:32:50] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[09:32:50] *** Quits: mirai (~mirai@2001:bc8:630:161::1) (*.net *.split)
[09:32:50] *** Quits: krychu_ (~krychu@2a01:4f8:210:50c5::2) (*.net *.split)
[09:32:50] *** Quits: dos1 (~dos@dosowisko.net) (*.net *.split)
[09:32:50] *** Quits: herrhotzenplotz (~herrhotze@user/herrhotzenplotz) (*.net *.split)
[09:32:50] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (*.net *.split)
[09:32:50] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[09:32:50] *** Quits: koollman (samson_t@user/koollman) (*.net *.split)
[09:32:50] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[09:32:50] *** Quits: sicelo (~sicelo@user/sicelo) (*.net *.split)
[09:32:50] *** Quits: gdarko (~me@dg.mk) (*.net *.split)
[09:32:50] *** Quits: mhi (~mhi@user/mhi) (*.net *.split)
[09:32:50] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[09:32:50] *** Quits: nomn (nomn@user/nomn) (*.net *.split)
[09:32:50] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[09:32:50] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:32:58] *** Joins: koollman (samson_t@sp1.kooll.org)
[09:32:59] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[09:33:00] *** Joins: jda (~jadra@chai.0xbad.coffee)
[09:33:01] *** Joins: ifreund (~ifreund@user/ifreund)
[09:33:03] *** Quits: wo0f__ (~wo0f@vps-7f6eecbb.vps.ovh.net) (Client Quit)
[09:33:08] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[09:33:10] *** Quits: wo0f_ (~wo0f@vps-7f6eecbb.vps.ovh.net) (Client Quit)
[09:33:16] *** Joins: mhi (~mhi@46.23.94.209)
[09:33:17] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:33:19] *** Joins: V (~v@anomalous.eu)
[09:33:22] *** Joins: nomn (nomn@tilde.team)
[09:33:23] *** Joins: dragonmaster (dragonmast@mail4.animalcules.com)
[09:33:27] *** Quits: nomn (nomn@tilde.team) (Signing in (nomn))
[09:33:27] *** Joins: nomn (nomn@user/nomn)
[09:33:27] *** Joins: herrhotzenplotz (~herrhotze@user/herrhotzenplotz)
[09:33:29] *** Joins: dos (~dos@dosowisko.net)
[09:33:43] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[09:33:45] *** Joins: grumble (grumble@user/grumble)
[09:33:58] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[09:34:00] *** Joins: gdarko (~me@dg.mk)
[09:34:29] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Remote host closed the connection)
[09:34:36] *** Joins: sicelo (~sicelo@vm8.ganeti.dyne.org)
[09:34:36] *** Quits: sicelo (~sicelo@vm8.ganeti.dyne.org) (Changing host)
[09:34:36] *** Joins: sicelo (~sicelo@user/sicelo)
[09:35:03] *** Joins: mirai (~mirai@2001:bc8:630:161::1)
[09:35:09] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[09:35:57] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[09:36:17] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[09:36:37] *** Quits: HaMsTeRs (~Thunderbi@14-0-171-069.static.pccw-hkt.com) (Quit: HaMsTeRs)
[09:38:06] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[09:39:43] *** Joins: cwve[m] (~cwvematri@2001:470:69fc:105::1:1495)
[09:40:45] *** Joins: psydroid (~psydroid@user/psydroid)
[09:40:56] *** Joins: prepro[m] (~prepromat@2001:470:69fc:105::1:68)
[09:41:06] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[09:42:23] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[09:42:58] *** Joins: krzych (krzych@nroot.pl)
[09:47:37] *** Joins: Muzer (~muzer@tim32.org)
[09:48:06] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[09:48:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[09:50:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:52:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:54:56] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:01:34] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[10:02:06] *** Joins: vaio (~gary@user/ghost)
[10:10:27] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[10:10:51] *** Joins: malloy (~jimery@116.30.221.89)
[10:13:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[10:16:36] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:18:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[10:21:34] *** Quits: rahl (~rahl@102.114.153.205) (Ping timeout: 260 seconds)
[10:22:06] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:22:36] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:bcd3:5e4:1639:b404)
[10:23:13] *** Joins: rahl (~rahl@102.114.10.77)
[10:24:19] *** Joins: k000 (~k000@179.104.109.102)
[10:30:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:30:12] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[10:31:44] *** Joins: vaio (~gary@user/ghost)
[10:36:33] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:38:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[10:39:35] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:42:22] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[10:43:07] *** Quits: missogra (~missogra@dynamic-095-112-062-157.95.112.pool.telefonica.de) (Remote host closed the connection)
[10:43:37] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[10:44:16] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b) (Ping timeout: 245 seconds)
[10:44:36] *** Joins: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b)
[10:48:32] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[10:54:50] *** Joins: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee)
[10:55:28] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:58:23] *** Joins: crankslider (~slidercra@user/slidercrank)
[10:59:48] *** Joins: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de)
[11:00:00] *** crankslider is now known as slidercrank
[11:00:51] *** Joins: k000_ (~k000@179.104.107.233)
[11:00:53] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 265 seconds)
[11:01:29] *** Quits: k000 (~k000@179.104.109.102) (Ping timeout: 268 seconds)
[11:05:41] *** Joins: mrig (~AdiIRC@user/mrig)
[11:06:54] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[11:10:06] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:bcd3:5e4:1639:b404) (Ping timeout: 260 seconds)
[11:10:16] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:14:27] *** Quits: rahl (~rahl@102.114.10.77) (Ping timeout: 268 seconds)
[11:19:00] *** k000_ is now known as k000
[11:20:06] *** Joins: magla (~gelignite@55d4d950.access.ecotel.net)
[11:23:05] *** Joins: lleo (~leo@89-200-10-72.mobile.kpn.net)
[11:23:10] *** Quits: kts (~kts@103.73.237.175) (Quit: Konversation terminated!)
[11:24:23] *** Quits: zwr (~zwr@2804:d45:b966:fb00:89e0:7784:2ef:7ccd) (Ping timeout: 264 seconds)
[11:24:53] *** Joins: zwr (~zwr@2804:d45:b966:fb00:fafc:e229:eaa8:5125)
[11:26:11] *** Joins: rahl (~rahl@102.114.57.215)
[11:28:38] *** Quits: lleo (~leo@89-200-10-72.mobile.kpn.net) (Ping timeout: 268 seconds)
[11:33:03] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[11:36:46] <varaindemian> Bou: Maybe if I build (somehow) that string in the memory and then use the check_password() against the location in the memory? I am still talking about that old problem. https://github.com/abs0lut3pwn4g3/RootersCTF2019-challenges/blob/master/rev/ch05%20-%20easy_licensing/easy_licensing.c
[11:37:06] <varaindemian> Bou: Trying to give it a different "spin"
[11:37:16] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:e454:7f8c:9a2e:2fc2)
[11:37:24] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[11:46:25] *** LiaoTao_ is now known as LiaoTao
[11:47:07] *** Joins: Rounin (~david@84.212.130.215)
[11:48:46] <Bou> "that string", enc_flag or the password?
[11:50:42] <supakeen> That 'problem' has already been solved extensively here in various ways shapes and forms. You should really do it as it's meant to be (even if it's seriously flawed) and do it with the binary only :)
[11:50:42] <Bou> if check_password is a strong hashing function, and you can't read enc_flag, and you can't modify the code, you can only call check_password
[11:51:15] <Bou> then you'd need something to call check_password("") check_password("A") check_password("B") etc etc
[11:55:02] *** Joins: brelod (~me@90.244.150.142)
[12:00:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee) (Quit: Leaving)
[12:00:37] <varaindemian> Bou: I am referring to the enc_flag variable
[12:00:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee)
[12:01:50] <varaindemian> Bou: Build it in memory and then alter those addresses so the player will be forced to rewrite the code (apply a patch).
[12:03:38] *** Joins: V-T60 (~v@91.203.24.166)
[12:04:46] *** Quits: k000 (~k000@179.104.107.233) (Remote host closed the connection)
[12:05:25] <Bou> What is the goal, passing the password check or retrieving the password?
[12:06:04] <Bou> I could simply use a strong hashing function and you'll never get the password
[12:08:33] *** Quits: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[12:08:40] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[12:10:30] <varaindemian> Bou: For now my goal is to make use of `__attribute__((constructor));` in a way that will modify the enc_flag so that the player will be forced to rewrite the binary. This means that I'll need another check_password() function, right?
[12:10:46] <varaindemian> https://www.irccloud.com/pastebin/28dSsXhO/
[12:10:57] <supakeen> did you fix the entire 'empty password is valid', stuff?
[12:11:06] <varaindemian> supakeen: no
[12:11:15] <supakeen> (or, 'single character password is good enough', etc)
[12:11:24] <supakeen> if you are going to turn this into a proper challenge
[12:11:36] <supakeen> do that as well :)
[12:12:12] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[12:12:42] <supakeen> and at the very least rewrite it so it actually prints out the flag instead of the goal being an exit code of 0 without needing the flag to do so
[12:13:25] <supakeen> because the goal and the flag do not align and you can have a long discussion with the organizers about if your '' is a valid answer and should be accepted ;)
[12:13:56] <varaindemian> supakeen: it will be a valid answer
[12:14:03] <varaindemian> but that will not be the flag
[12:14:12] <varaindemian> the flag is inside the enc_password
[12:14:24] <varaindemian> enc_flag*
[12:15:05] <supakeen> yes and we already solved it in two different ways the last time we spoke about it, commutative xor and the failed length check right?
[12:16:05] <varaindemian> supakeen: yes
[12:16:34] <varaindemian> I know the solver. Failed length check won't give them the flag
[12:19:11] <supakeen> so what do you actually want to do :)
[12:19:57] *** Joins: arinov (~arinov@213.194.126.155)
[12:22:22] <varaindemian> supakeen: sorry for not being completeley clear :D 1) Can I use `__attribute__((constructor))` as a way of modifying enc_flag? 2) Can I store the enc_flag in memory and then break that memory location so that the `check_password()` will fail even for `single character password`?
[12:23:45] *** Joins: John99 (~johnny@87.200.94.90.dynamic.jazztel.es)
[12:24:08] <Bou> If you can add __atrribute__((constructor)) you can modify anything
[12:24:51] <Bou> So then you can just change if(checkpassword) to if (3<5)
[12:27:17] *** Joins: Guest396 (~Guest39@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[12:28:50] <varaindemian> Bou: you mean `if(auth)` 
[12:28:58] <varaindemian> line 47
[12:29:08] *** Joins: extern (~archer@185.32.176.202)
[12:29:20] <supakeen> it's not entirely clear what the goal you wish to achieve is; if you're asking if you can change memory while the executable is running: sure.
[12:31:20] <Bou> Even the executable code itself
[12:32:28] <katnis> greetings, irccloud user.
[12:32:41] <Bou> I'm currently underneath a car fixing an exhaust so my apologies for not reading your source, again xD
[12:36:11] *** Quits: extern (~archer@185.32.176.202) (Remote host closed the connection)
[12:38:37] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:38:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[12:42:48] *** Joins: extern (~archer@141.226.58.38)
[12:43:24] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[12:46:35] <varaindemian> https://www.irccloud.com/pastebin/GVm0Qk5O/
[12:47:11] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Ping timeout: 245 seconds)
[12:47:21] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[12:48:25] *** Parts: ifreund (~ifreund@user/ifreund) (WeeChat 3.3)
[12:52:08] <supakeen> Did you try it?
[12:52:55] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[12:53:02] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:c9c9:9450:c028:8dd0) (Quit: ZNC 1.8.2 - https://znc.in)
[12:53:15] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:1b5c:1bd6:918c:5122)
[12:53:41] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:54:29] <varaindemian> supakeen: yeah, I changed it to `void das_constructor(void) __attribute__((constructor));`
[12:55:00] <varaindemian> supakeen: but I am not sure if if that value is actually created and then overwritten
[12:55:14] <supakeen> Time to start your GDB :)
[12:57:50] <sham1> Using a debugger should always be the first choice. Although it's not always that convenient to use :/
[12:57:57] <sham1> Especially if one needs to use it remotely
[13:01:09] <supakeen> The code you pasted won't work at least since you're doing `return *foo` instead of just `return foo` hence asking if you tried it.
[13:01:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:04:21] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[13:04:46] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[13:06:40] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[13:08:13] <varaindemian> https://www.irccloud.com/pastebin/IDaYuGOe/
[13:08:23] <varaindemian> supakeen: now it looks like this
[13:10:28] <varaindemian> supakeen: but I guess this will not generate a variable before main (as I want to)
[13:12:51] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:13:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:13:14] *** Quits: malloy (~jimery@116.30.221.89) (Read error: Connection reset by peer)
[13:13:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:16:21] *** Joins: soliste (~soliste@88.164.90.135)
[13:18:28] *** Joins: malloy (~jimery@116.30.220.108)
[13:20:06] <varaindemian> I also get `: error: â€˜enc_flagâ€™ undeclared (first use in this function)` if `enc_flag` is declared only inside the constructor
[13:20:23] *** Joins: Ioupek (~mlin@ip-37-248-155-146.multi.internet.cyfrowypolsat.pl)
[13:21:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[13:21:55] <LiaoTao> varaindemian, Don't you think this is biting off a bit more than you can chew? If you're essentially having someone else write your code for you because you don't understand what it does, I mean.
[13:22:30] *** Joins: Nselm (~Nselm@p200300d56f33701bd5af8b7f509b6273.dip0.t-ipconnect.de)
[13:22:34] *** Joins: aradesh (~aradesh@user/aradesh)
[13:23:29] <varaindemian> LiaoTao: trying to figure it out
[13:24:11] <Bou> By randomly trying things.
[13:25:43] <Bou> That last function makes a local variable which is then immediately forgotten
[13:25:51] <LiaoTao> Bou, Surely a million monkeys with typewriters can't all be wrong
[13:27:33] *** Joins: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net)
[13:29:06] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[13:29:14] <Bou> You can change the value of the global enc_flag pointer (as in: change what it points to), you won't be able to change the value of what it currently points to though (string literal)
[13:29:19] *** Joins: mrig (~AdiIRC@user/mrig)
[13:31:43] *** Quits: extern (~archer@141.226.58.38) (Quit: WeeChat 3.3)
[13:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[13:33:14] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:33:53] <varaindemian> Bou: that means that if I change what it points to using `__attribute__((constructor));` it will be only in a local context?
[13:36:51] <Nselm> Hi. I am completely new (~1 week) to C. I tried to implement a quicksort but I get segfaults and am unable to find the error on my own. Comments and help appreciated, also on general stuff like style etc.
[13:37:03] <Nselm> https://bpa.st/CSYQ
[13:38:06] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 260 seconds)
[13:38:52] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Quit: awwww)
[13:39:10] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[13:39:57] <varaindemian> Bou: The constructor makes it so that a function is called automatically while the execution enters main(). It was originally published on https://www.apriorit.com/
[13:39:59] <candide> Title of varaindemian's link: Apriorit â€“ Software Outsourcing Company: Driver Developers, C++ Programmers, Reverse Engineers for Hire
[13:40:29] <varaindemian> Bou: can that constructor manipulate global vars?
[13:42:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[13:42:58] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:43:58] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:47:23] *** Joins: cursey (~cursey@user/cursey)
[13:50:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:50:53] <supakeen> That is the entire point of one, isn't it?
[13:51:09] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[13:51:41] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 268 seconds)
[13:51:43] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[13:55:42] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:00:05] <nomagno> Someone posted an example on how to use functions inside structs here the other day, but I forgot how to do it
[14:00:10] <nomagno> Any resources/simple examples for this?
[14:00:48] *** Joins: kts (~kts@103.73.237.224)
[14:01:13] *** Joins: cartman (~i.am@191.32.92.1)
[14:02:28] <varaindemian> supakeen: I think so. but I don't know how to do that. I only see that it does changes only locally
[14:03:04] *** Joins: Arthuria (~Arthuria@user/arthuria)
[14:04:36] <trenka> nomagno: what do you mean? Fields of function pointer type?
[14:05:06] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[14:05:57] <nomagno> trenka: Yeah, figured it out though. That was quick :P
[14:06:04] *** Joins: Klinda (~superleag@user/klinda)
[14:06:08] <rkta> Nselm: Your recursive calls never return.
[14:06:23] <nomagno> I am basically trying to macro my way into an Objective-C like extension
[14:06:33] <nomagno> Working well enough for now
[14:07:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[14:11:35] <simpl_e> ,cc struct type { int (*fp)(int); }; int inc(int i) { return i + 1; } { struct type a = {inc}; printf("%d\n", a.fp(42)); }
[14:11:38] <candide> simpl_e: 43
[14:14:49] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 633 seconds)
[14:14:59] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:15:02] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[14:15:07] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:17:38] <cadmio> Hello/j #gtk
[14:17:48] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[14:19:06] <trenka> simpl_e: int (*fp)(struct type *, int) a bit more practical :)
[14:21:53] *** Joins: mniip (mniip@libera/staff/mniip)
[14:22:40] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Quit: awwww)
[14:23:18] *** Joins: arinov (~arinov@178.240.160.150)
[14:25:58] *** Quits: Nselm (~Nselm@p200300d56f33701bd5af8b7f509b6273.dip0.t-ipconnect.de) (Quit: Client closed)
[14:30:22] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:07] *** Joins: csrf (~csrf@user/csrf)
[14:31:26] *** Joins: thing (~thing@user/thing)
[14:31:44] *** Joins: corelax (~corelax@user/corelax)
[14:32:55] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[14:33:27] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:35:11] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[14:36:45] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:37:02] *** Joins: krissmaster (~kriss@213.239.83.90)
[14:37:40] *** Quits: Guest396 (~Guest39@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[14:38:31] *** Joins: AmR (~AmREiSa@41.232.235.167)
[14:40:34] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[14:41:05] *** Joins: plastico (~plastico@neomutt/plastico)
[14:41:58] *** Quits: arinov (~arinov@178.240.160.150) (Ping timeout: 260 seconds)
[14:45:13] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[14:45:44] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[14:46:19] <varaindemian> you see what I am trying to do here? https://www.irccloud.com/pastebin/w0VDGi8f/
[14:46:35] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[14:46:57] <varaindemian> I keep getting `[1]    25263 segmentation fault (core dumped) `
[14:46:59] *** Quits: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca) (Quit: quit)
[14:47:12] *** Joins: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca)
[14:47:13] <varaindemian> when I try to run the binary
[14:50:02] <fizzie> It's undefined to try to modify the contents of a string literal.
[14:50:23] <fizzie> (And `enc_flag` is a pointer to a string literal, and line 12 modifies the contents of it.)
[14:51:24] <fizzie> Your comment says "change pointer", but it's not changing the *pointer*, it's (attempting to) change the object the pointer points at.
[14:52:19] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:53:29] <NRK[m]> instead of a pointer you can use an array
[14:54:04] <NRK[m]> ,cc a[] = "hello"; a[0] = 'H'; puts(a);
[14:54:06] <candide> NRK[m]: error: 'a' undeclared
[14:54:25] <NRK[m]> ,cc char a[] = "hello"; a[0] = 'H'; puts(a);
[14:54:28] <candide> NRK[m]: Hello
[14:54:37] <NRK[m]> ,cc char *a = "hello"; a[0] = 'H'; puts(a);
[14:54:40] <candide> NRK[m]: Program received signal SIGSEGV, Segmentation fault at statement: a[0] = 'H' ; <local variables: a = 0x403033 "hello">
[14:59:09] *** Joins: arinov (~arinov@213.194.126.155)
[14:59:29] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[15:01:05] <varaindemian> fizzie: any idea how I can achieve what I was trying there? (make `enc_flag` point to something else)
[15:01:13] *** Joins: lovelace (~Elspeth@2.24.23.175)
[15:02:20] <nomagno> https://termbin.com/930o
[15:02:23] <fizzie> `enc_flag = <something else>;` instead of `*enc_flag = <something else>;`.
[15:02:35] <nomagno> Trying to make a very vaguely object-oriented macro system for C ^
[15:02:43] <nomagno> any suggestions to make it suck a bit less?
[15:03:14] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[15:03:33] <dave0> varaindemian: what should it point to?
[15:04:10] <dave0> varaindemian: there's nothing else in that paste that you could point to
[15:04:46] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:04:54] <varaindemian> dave0: a different `enc_flag`
[15:05:32] <dave0> that's not a thing
[15:05:36] <fizzie> You could certainly point it at a different string literal.
[15:06:04] *** Joins: thing (~thing@user/thing)
[15:06:42] <varaindemian> fizzie: using `void das_constructor() __attribute__((constructor));`?
[15:06:52] <NRK[m]> nomagno: are you just doing it for fun! or are you planning to actually use that?
[15:07:43] <nomagno> NRK: I am doing it for fun, but if I manage to get something usable out of it with just a few macros, I might actually use it for some projects
[15:07:45] <fizzie> varaindemian: I imagine so. You'd just do `enc_flag = "whatever";` to assign the address of the new string literal to the pointer.
[15:08:07] <nomagno> This is basically me going "Objective-C requiring a runtime is dumb. Boooo!"
[15:08:18] <trenka> nomagno: there is no sence in it for C programmers 
[15:08:49] <trenka> nomagno: but you can, probably, read books like 'Object Oriented Programming in C' and 'Modern C'
[15:09:28] <dave0> isn't oop in c just a bunch of function pointers in a struct?
[15:09:44] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4-dev)
[15:09:48] *** Quits: jan6 (jan6@tilde.team) (Quit: WeeChat 3.3)
[15:09:57] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[15:10:12] *** Joins: Darkcoal (~user@139.64.42.148)
[15:11:01] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[15:12:16] *** Joins: EtherNet (~ethernet@user/ethernet)
[15:12:40] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[15:15:05] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[15:15:07] <varaindemian> fizzie: uh, finally!
[15:15:14] <varaindemian> thanks!
[15:15:54] <varaindemian> Bou: thank you!
[15:16:36] *** Joins: lovelace (~Elspeth@2.24.23.175)
[15:17:05] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e844e-131.dhcp.inet.fi)
[15:24:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8)
[15:25:05] *** Joins: Guest10 (~Guest10@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:26:06] <nomagno> Just stumbled upon this:
[15:26:06] <nomagno> https://stackoverflow.com/questions/3046889/optional-parameters-with-c-macros/8814003#8814003
[15:26:59] <nomagno> This is definitely 20x as flexible a macro as anything I have ever come up with.
[15:27:41] *** Joins: seninha (~seninha@user/seninha)
[15:27:50] <fizzie> Just as a comment, though, the special treatment of `, ## __VA_ARGS__` is nonstandard.
[15:29:29] <supakeen> There's a second post there that posits a version that is 'standards compliant' under c99.
[15:29:39] <supakeen> But, I just feel it's a whole lot of weird macros :)
[15:30:36] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[15:31:09] <fizzie> *Everything* along those lines ends up as "a whole lot of weird macros" eventually.
[15:32:22] *** Quits: Arthuria (~Arthuria@user/arthuria) (Remote host closed the connection)
[15:32:59] <fizzie> For the simple cases where you just want to forward on 0 or more arguments, though, it would be nice if they'd add a standard way. C++20 introduced a standard `__VA_OPT__(x)` macro that expands to no tokens if the variadic part of the argument list had 0 arguments, and to `x` otherwise, meaning the `, ## __VA_ARGS__` construction can be written as `__VA_OPT__(,) __VA_ARGS__`.
[15:33:33] <sham1> Is that coming to C23 perchance
[15:34:18] <nomagno> Well this kind of fully variadic macro allows for unlimited "reformatting of arguments", which is a very powerful tool to get rid of boilerplate
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:41] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[15:41:29] <sham1> Hmm, I don't see it in the drafts at least. Irritating
[15:41:53] *** Quits: Guest10 (~Guest10@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[15:42:02] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e844e-131.dhcp.inet.fi) (Quit: WeeChat 2.8)
[15:45:31] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[15:46:04] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Remote host closed the connection)
[15:46:52] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[15:47:39] *** Joins: Arthuria (~Arthuria@user/arthuria)
[15:48:16] *** Joins: nitro__ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[15:48:40] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Client Quit)
[15:48:40] *** Quits: nitro__ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net) (Client Quit)
[15:48:56] *** Joins: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[15:49:33] *** Quits: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net) (Remote host closed the connection)
[15:51:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:52:33] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:52:55] <nomagno> It seems the final standard of C23 is going to be much smaller than the drafts, if I interpreted the stuff I've read correctly
[15:52:56] <nomagno> which is VERY irritating
[15:55:21] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:56:15] <sham1> Well as long as 2's complement and binary literals get in, I'll be happy. It'll make a lot of things easer
[16:00:24] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[16:07:21] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[16:08:09] *** Quits: Arthuria (~Arthuria@user/arthuria) (Remote host closed the connection)
[16:11:10] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:17:01] *** Quits: koollman (samson_t@sp1.kooll.org) (Changing host)
[16:17:01] *** Joins: koollman (samson_t@user/koollman)
[16:17:33] <John99> i miss defer and lambdas 
[16:17:42] <John99> and typeof
[16:18:03] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:18:42] <John99> and well, they trully added "generic function for check overflow" that was a must for long time
[16:21:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:23:34] <nomagno> typeof isn't the most useful operator in the world, because, in the end, you are restricted by C's complete type-safety. You can not declare a thingy with no type then check its type.
[16:24:11] <nomagno> If you could check the type of a thingy with no type at runtime, then build a struct based on that or something, you have JavaScript, not C
[16:25:21] <nomagno> (Well it's not that it's impossible to do any of these things at runtime, but definitely not even a remote similarity to doing them at compile-time)
[16:25:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:26:14] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:26:15] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 260 seconds)
[16:26:28] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:28:06] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[16:28:32] *** Joins: frost (~frost@user/frost)
[16:32:11] <veltas> Missing typeof is a blunder
[16:32:46] <veltas> It would have been useful writing generic code, maybe it would have been abused a bit, it's something every compiler essentially supports or would support with minimal changes otherwise
[16:33:18] <sham1> I'd wish either statement expressions, which they don't seem to want to add even though we've seen from GCC and Clang that they can work wonders, or lambdas, even if they can't be returned or hold state. For example, macros would become just so much nicer with that
[16:33:48] <sham1> Especially with typeof. I'm once again remenicing about the possibility of getting closer to an ISO C compatible container_of being the same as what the Linux kernel has
[16:33:51] *** Joins: Arthuria (~Arthuria@user/arthuria)
[16:34:33] <veltas> Mature programming language standards all seem to go the same way eventually
[16:34:37] <sham1> It can already be done, without much if at all UB thanks to offsetof being in the standard, but type-safety makes it a bit irritating
[16:34:48] *** Quits: Arthuria (~Arthuria@user/arthuria) (Remote host closed the connection)
[16:35:07] <veltas> Statement expressions are definitely a logical step, and not earth-shattering for compilers
[16:36:47] *** Joins: sooty (~sooty@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[16:36:58] <sham1> Yeah. Lambda support would be nice but I could do without. But statement expressions would make a lot more things viable, especially with macrks
[16:37:00] <sham1> Macros
[16:39:44] <veltas> The big issue for lambda support is there isn't a dominant/obvious syntax for it
[16:40:02] <veltas> So it doesn't really meet the criteria for adding
[16:40:31] <veltas> But I think if they're going to be bold with anything, that is something worth being bold with. And yeah keeping it dumb/stateless
[16:41:40] <sooty> know of any tools that can monitor a file while its open in another programand on file change, save a copy, because LDD crashes and has no file recovery or autosave
[16:41:42] <sooty> ?
[16:41:56] <fizzie> I have an ISO C compatible `container_of` that's pretty much as type-safe as the Linux kernel one.
[16:42:00] <sooty> the file is a C file
[16:42:12] <sooty> so my question is on topic :P
[16:42:29] <fizzie> sham1: #define container_of(ptr, type, member) ((type *)((char *)(1 ? (ptr) : &((type *)0)->member) - offsetof(type, member)))
[16:43:22] <edk> i remember the conversation where that came up
[16:43:32] <edk> i guess whoever was asking about it never did get it into linux, then
[16:44:07] <fizzie> I imagine removing GNU-isms (especially those well-supported by Clang) isn't a priority.
[16:44:46] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:45:01] *** Quits: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:45:01] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:45:11] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:e454:7f8c:9a2e:2fc2) (Quit: Leaving)
[16:45:51] <fizzie> At any rate, the "type safety" in that is from the constraint on the two branches of the conditional operator; the type of the (unevaluated) `&((type *)0)->member` expression is "checked" against the type of `(ptr)`. I think it might not be *quite* equivalent, but it's close enough.
[16:46:30] *** Quits: kts (~kts@103.73.237.224) (Quit: Konversation terminated!)
[16:47:16] <sham1> Probably would get constant folded to the same lea or subtract or whatever either way
[16:48:07] <edk> one would hope
[16:48:20] <fizzie> Well, equivalent in terms of the constraints (and/or the sort of warnings provided be implementations) on the types.
[16:48:27] <sham1> Although, wouldn't that ((type*)0)->member technically still be UB even though it is unevaluated and should never cause any trouble
[16:48:30] *** Quits: dutch (~DutchIngr@user/dutch) (Ping timeout: 260 seconds)
[16:48:56] <fizzie> Not as far as I know.
[16:49:13] <fizzie> For reference, the "standard" container_of is a statement expression with `typeof (((type *)0)->member) *__mptr = (ptr)` in it.
[16:49:24] <sham1> Hum
[16:49:46] *** Joins: kts (~kts@103.73.237.224)
[16:49:56] <edk> if unevaluated UB is still UB, wouldn't if (p) *p; also be UB when p == NULL?
[16:50:15] <sham1> Good point, didn't even think of that
[16:50:25] *** Joins: reset (~reset@user/reset)
[16:50:36] <fizzie> (Or the `T *p = malloc(sizeof *p)` idiom, which relies on the operand of `sizeof` not being evaluated.)
[16:51:41] <sham1> Well doesn't the standard guarantee that the argument isn't evaluated assuming it's not a VLA
[16:52:31] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:52:45] <edk> yes
[16:52:56] <edk> but it makes the same guarantee about the branch of ?: that isn't taken
[16:53:00] <sham1> Although I'm not sure if it would need to evaluate the argument evening it were a VLA since the compiler knows statically whether it's a VLA
[16:53:03] <sham1> Fair
[16:53:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:53:51] <sooty> how do I eval a paramater to a function to an array to a 
[16:54:04] <sham1> What
[16:54:04] <sooty> enum to a struct to a global to a loop
[16:54:10] <fizzie> ,cc int n = 10; int (*p)[n] = NULL; p = malloc(sizeof *p); // possibly undefined?
[16:54:13] <sooty> to a linked list to a union
[16:54:13] <candide> fizzie: no output: n = 10; p = 0x41de10
[16:54:54] *** Joins: strajder (~strajder@user/strajder)
[16:55:38] *** Joins: pulse (~pulse@user/pulse)
[16:56:42] <sham1> Well I would think that since the compiler knows that p is a pointer to a VLA, the compiler could just calculate that to be n*sizeof(int) (and in this case just constant fold that expression away)
[16:56:56] *** Joins: dutch (~DutchIngr@user/dutch)
[16:57:21] <edk> as for the sizeof VLA things, you can write sizeofs that could not have a value without evaluating the operand
[16:57:22] <edk> ,cc size_t a = sizeof (*(int(*)[rand()])0);
[16:57:25] <candide> edk: no output: a = 7217157532
[16:57:45] <edk> although that number is suspicious
[16:58:40] <edk> ,cc srand(time(0)); size_t a = sizeof (*(int(*)[rand()])0);
[16:58:43] <candide> edk: no output: a = 6871910732
[16:59:43] <edk> the standard doesn't worry about exactly which VLA sizeofs need to be evaluated, it just says that they always are
[17:00:01] <edk> i think this might be due to change?
[17:03:02] <fizzie> Sort of on that topic, there's an interesting rule in the bit about array declarators, C11 6.7.6.2p5: "Where a size expression [of an array declarator] is part of the operand of a `sizeof` operator and changing the value of the size expression would not affect the result of the operator, it is unspecified whether or not the size expression is evaluated."
[17:03:04] *** Joins: Arthuria (~Arthuria@user/arthuria)
[17:04:28] <John99> speaking about vla, if i do this? struct foo {char a[]}; struct foo a,b; /*initialization*/ a = b; a b have diferent sizes i can be sure the values of b is copied to a?
[17:04:29] <John99> https://compiler-explorer.com/z/qTcfvv9ez
[17:04:30] <candide> Title of John99's link: Compiler Explorer
[17:04:32] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[17:04:35] <John99> technically is working
[17:04:46] <nomagno> fizzie: Whenever I read "this is unspecified", I interpret "John the Idiot over at Corporate HQ Trademark coded this dumb behaviour up pre-standardization, and now commercial code depends on iut"
[17:05:07] <John99> uf
[17:05:09] <John99> error
[17:05:12] <sham1> That's also technically not VLAs
[17:05:13] <John99> forget taht XD
[17:05:20] <John99> i miss *a = *b
[17:05:20] *** Joins: hiroshi_ (~freedom@151.57.86.163)
[17:05:37] <John99> okay, no, its not working
[17:05:44] <fizzie> Struct assignment won't copy the FAM part of a struct; the flexible array member is ignored in almost all cases.
[17:05:44] <John99> arg,, tupid fail
[17:05:53] <John99> okay, ty for the aclaration
[17:06:01] <sham1> Yeah, I wouldn't imagine assigning a struct with a flexible array member working
[17:06:32] *** Joins: engest (~engest@50.126.100.152)
[17:06:33] *** Parts: gtlsgamr (~gtlsgamr@38.87.162.138) ()
[17:08:01] <fizzie> C11 6.7.2.1p18: "In most situations, the flexible array member is ignored." Followed by the only two exceptions: the size of the structure may have more trailing padding than it otherwise would, and using the . or the -> operator with the FAM "behaves as if that member were replaced with the longest array -- that would not make the structure larger than the object being accessed".
[17:12:13] *** Quits: kts (~kts@103.73.237.224) (Quit: Konversation terminated!)
[17:12:46] *** Joins: masterbuilder (~user@89.17.155.85)
[17:17:30] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:19:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:19:31] *** Parts: sooty (~sooty@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[17:20:02] *** Quits: dragonmaster (dragonmast@mail4.animalcules.com) (Changing host)
[17:20:02] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[17:21:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:24:14] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[17:26:18] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[17:27:07] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[17:29:18] *** Quits: Guest227 (~tobiasu@atom.tmux.org) (Quit: WeeChat 3.0)
[17:29:32] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[17:30:02] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[17:30:32] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[17:31:24] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[17:32:25] *** Joins: klf (~fkl@135.12.180.212)
[17:32:27] *** Quits: Darkcoal (~user@139.64.42.148) (Ping timeout: 268 seconds)
[17:32:49] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:33:06] <klf> uint8_t hexspeak[8] = 0xdeadbeef;
[17:33:20] <klf> how can I initialize hexspeak with 0xdeadbeef?
[17:33:46] <fizzie> A weird thing, because there's 32 bits in 0xdeadbeef but 64 in an `uint8_t[8]`.
[17:34:19] *** Joins: Darkcoal (~user@51.158.144.32)
[17:34:52] <sham1> Might want the rest of them to be zero though
[17:35:04] <sham1> Anyway, can't initialise the array like that
[17:35:11] <fizzie> Other than that, depends on what you mean by "initialize with 0xdeadbeef"... do you want the object representation of that value in some (larger) integer type, or just the bytes 0xde, 0xad, 0xbe, 0xef in that order? 
[17:35:14] <klf> sure.  uint8_t[4].
[17:35:32] <klf> the bytes in that order
[17:35:37] <fizzie> uint8_t hexspeak[4] = {0xde, 0xad, 0xbe, 0xef} then.
[17:35:38] <sham1> The best one could do without something like memcpy is { 0xef, 0xbe, â€¦ }
[17:35:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:35:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:35:55] *** Joins: wroathe (~wroathe@user/wroathe)
[17:36:26] *** Quits: John99 (~johnny@87.200.94.90.dynamic.jazztel.es) (Remote host closed the connection)
[17:36:34] <sham1> And with memcpy from a uint32_t let's say, one would need to worry about the endianness potentially
[17:36:46] <fizzie> Or *possibly* `uint8_t hexspeak[4] = "\xde\xad\xbe\xef";` but that's assuming uint8_t is a character type, which is maybe not quite guaranteed.
[17:36:49] *** Quits: qwerty (~qwerty@user/badkarma) (Changing host)
[17:36:49] *** Joins: qwerty (~qwerty@user/badwolf)
[17:42:58] *** Quits: Darkcoal (~user@51.158.144.32) (Read error: Connection reset by peer)
[17:43:58] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:44:47] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[17:46:44] *** Joins: kts (~kts@103.73.237.57)
[17:47:48] *** Quits: hiroshi_ (~freedom@151.57.86.163) (Quit: hiroshi_)
[17:51:25] *** Joins: superboot (~agentgasm@user/superboot)
[17:53:47] *** Quits: alien_lappy (~alien@user/alien) (Ping timeout: 264 seconds)
[18:01:35] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[18:02:42] *** Quits: klf (~fkl@135.12.180.212) (Quit: leaving)
[18:04:06] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[18:05:01] *** Joins: Dreg (~Dreg@fr33project.org)
[18:07:49] *** Joins: mikess (~sam@user/mikess)
[18:10:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:12:14] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[18:16:38] *** Joins: V-T60 (~v@91.203.24.166)
[18:17:07] *** Joins: rgrinberg (~textual@190.113.111.74)
[18:18:50] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:25:06] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[18:25:30] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[18:26:35] *** Joins: alch (~alch@151.44.54.14)
[18:26:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:26:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:26:51] *** Joins: wroathe (~wroathe@user/wroathe)
[18:27:22] *** Joins: johnjay (~pi@192.142.100.50)
[18:29:31] *** Quits: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:31:05] *** Quits: soliste (~soliste@88.164.90.135) (Quit: leaving)
[18:31:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:32:48] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[18:33:01] *** Joins: serbest (~serbest@user/serbest)
[18:34:32] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:d29:7f9f:ec16:1313)
[18:36:30] *** Joins: neutral (~user@user/neutral)
[18:36:33] *** Joins: monkey_ (~user@190.104.116.31)
[18:39:10] *** Quits: serbest (~serbest@user/serbest) (Quit: IRLing.)
[18:40:53] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[18:44:15] *** Joins: cart_man (~rynot@host-78-144-120-137.as13285.net)
[18:45:40] *** Joins: zys (~zys@116.21.145.62)
[18:50:08] *** Joins: meator (~meator@user/meator)
[18:51:42] *** Quits: zys (~zys@116.21.145.62) (Ping timeout: 260 seconds)
[18:58:08] *** Joins: rsjw (~quassel@pool-173-66-166-55.washdc.fios.verizon.net)
[19:01:47] *** Joins: quartz (~quartz@user/quartz)
[19:05:34] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:08:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[19:13:52] *** Quits: mikess (~sam@user/mikess) (Quit: leaving)
[19:16:02] *** Joins: mahmutov (~mahmutov@176.30.172.0)
[19:18:25] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:23:12] *** Quits: monkey_ (~user@190.104.116.31) (Remote host closed the connection)
[19:23:27] <nomagno> How can I throw an error at compile-time with a #ifdef ?
[19:24:14] <sham1> #error
[19:24:55] *** Joins: nuno (~user@83.223.248.101)
[19:24:59] <sham1> Although I remember reading at least from the GNU standard that some compilers might have at some point just had #error be a warning instead. I don't know if that's accurate anymore, but yeah. #error should be the first choice if at all possible
[19:25:06] <sham1> GNU coding standard that is
[19:25:07] <nomagno> Alright, wrong question. Is there a way to use #define to throw an error?
[19:25:34] <sham1> Well #define, erm, defines things. What kind of an error are you thinking about?
[19:26:28] <nomagno> Well, I have a situation where the only (sane) way to error something would be by defining a keyword as some code that can throw an error.
[19:26:38] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[19:26:57] <nomagno> I COULD write fully, 100% horrendous guaranteed-to-error code there, but that is not the best solution is it?
[19:27:21] <slidercrank> you can write any syntactically incorrect text and it will stop compilation. 
[19:27:33] <sham1> you lose;
[19:27:46] <nomagno> Wrong usage;
[19:27:51] <nomagno> Sounds about right
[19:27:53] <sham1> Yeah
[19:28:14] <sham1> You lose; was actually a thing Emacs did for MS-DOS builds if one didn't have all the necessary compilation stuff set up properly
[19:31:13] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:31:53] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:32:46] <fizzie> ,cc typedef int you; you lose = 123;
[19:32:49] <candide> fizzie: no output: lose = 123
[19:33:59] *** Joins: serbest (~serbest@user/serbest)
[19:34:18] <fizzie> Anyway, if you can assume C11 or later, `#define error_if_used ((void) (struct { int dummy; _Static_assert(0, "you lose"); }){0} )`.
[19:34:50] <fizzie> ,cc #define error_if_used ((void) (struct { int dummy; _Static_assert(0, "you lose"); }){0} ) \n error_if_used; // for example
[19:34:52] <candide> fizzie: error: static assertion failed: "you lose"  note: in expansion of macro 'error_if_used'
[19:34:58] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[19:35:41] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:36:15] <fizzie> The struct-in-a-compound-literal wrapper there is to make it syntactically legal even in a place where a _Static_assert(...) declaration alone wouldn't be legal, such as right after a label. If you *only* care about it failing to compile, that doesn't necessarily matter, but arguably it's nice that it always fails "the right way".
[19:37:02] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:47:10] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:48:12] *** Parts: nuno (~user@83.223.248.101) (Leaving)
[19:48:45] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[19:51:12] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 268 seconds)
[19:52:24] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[19:53:59] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[19:55:42] *** Joins: rcm888 (~u1@95.54.115.226)
[19:55:57] <rcm888> what is -g option in gcc?
[19:56:35] <fizzie> https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html
[19:57:33] <supakeen> "Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this debugging information." from `man gcc`.
[19:57:56] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[19:58:14] <rcm888> ah ok
[20:05:07] *** Joins: monkey_ (~user@190.104.116.31)
[20:06:15] <quartz> Hello. I'm trying to read data in from a binary file where each entry in the database lists a name and message. Each entry is always 40 bytes. I want to store each entry (which are contained in structure, with fileds char name and char msg), into a linked list.
[20:07:12] <quartz> When writing the loop to read all the entries of the database into the linked list, I know I need to use fread(), but I'm unsure when to stop the loop. Should I somehow use ferror() here?
[20:07:27] *** Joins: V-T60 (~v@91.203.24.166)
[20:08:22] <quartz> Because I want to read 40 bytes at a time, I wanted the loop to return only 1 "object" and so I wrote the loop like while(fread(data, 40, 1, file) != 1) ...
[20:08:44] <sham1> Do you not have any kind of "entity count" kind of field in your thing?
[20:09:12] <quartz> sham1: There is no field for that specifically, but yes, the entries are all numbered.
[20:09:59] <quartz> This is the struct that makes up the database: https://bpa.st/RY7A
[20:10:52] *** imm__ is now known as imm_
[20:11:14] <quartz> I guess what I'm asking is, I'm not sure how ferror() factors into reading in data from a file, while using fread()
[20:11:39] <quartz> Because fread will stop once it can't read in exactly 1 object.
[20:12:34] <fizzie> ferror() is a function you can use *after* a fread (or some other similar) call has failed, to figure out whether it failed because of end-of-file or because of an error.
[20:13:41] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[20:14:05] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:14:49] <quartz> fizzie: Ok thanks. So I don't really need it to read in a file. I just need fread. But I suppose it's good to incorporate ferror() somehow in the code to ensure fread() reached the end of file.
[20:15:40] <fizzie> It's a reasonable thing to do, though in practice there's probably a *lot* of programs out there that just treat EOF and read error identically.
[20:17:04] <quartz> OK
[20:17:10] <fizzie> But you can certainly have an `if (ferror(f)) { /* warn or terminate or whatever is appropriate */ }` chunk after your read loop.
[20:20:20] <quartz> fizzie: OK thanks :)
[20:21:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[20:22:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:23:16] *** Quits: rcm888 (~u1@95.54.115.226) (Ping timeout: 268 seconds)
[20:23:23] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:25:41] *** Parts: Ox151 (~user@user/ox151) (ERC (IRC client for Emacs 27.2))
[20:27:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:27:56] *** Joins: rcm888 (~u1@95.54.115.226)
[20:31:19] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[20:31:45] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:32:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[20:32:37] <drew> strsep is giving me  Unable to handle kernel write to read-only memory at virtual address fffffffefe6e4372 when I try to split up a string in a kernel module
[20:32:54] <drew> this is the function I am trying to put together, and I can see that it panics at line 25 https://dpaste.org/17cx
[20:33:12] <drew> an example log when trying this is here: https://dpaste.org/qx6f
[20:33:50] <drew> would anyone know why I am seeing this when trying to delimit by "=" ? I don't understand why it fails at = and not earlier when separating by " ", for exmaple
[20:35:25] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:36:46] *** Quits: kuku (~kuku@user/kuku) (Remote host closed the connection)
[20:38:11] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[20:38:42] *** Joins: lovelace (~Elspeth@2.24.23.175)
[20:42:00] *** Joins: kuku (~kuku@user/kuku)
[20:42:23] *** Quits: monkey_ (~user@190.104.116.31) (Remote host closed the connection)
[20:42:57] <fizzie> "write to read-only memory" sure sounds like you've got a string you're not supposed to modify, and of course `strsep` does modify the input string.
[20:43:25] <fizzie> As for why it'd break for "=" but not " ", maybe there's no spaces in the string, so the earlier strsep doesn't *need* to modify anything.
[20:43:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:64b5:fc80:8eb8:cf03)
[20:43:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:64b5:fc80:8eb8:cf03) (Changing host)
[20:43:46] *** Joins: skapata (~Skapata@user/skapata)
[20:45:08] <drew> these are strings that are initiated in the scope of this function, though, and they aren't const, so shouldn't I be able to modify them?
[20:45:47] <drew> declared and initialized, not initiated
[20:45:54] <fizzie> You're getting a pointer from something called `of_property_read_string`. Whether it's modifiable or not depends entirely on what that points at.
[20:46:49] <fizzie> The documentation of which says: "Search for a property in a device tree node and retrieve a null terminated string value (pointer to data, not a copy)."
[20:47:00] <fizzie> So since it's "pointer to data, not a copy", chances are you shouldn't be modifying it.
[20:47:12] <fizzie> Also, the third parameter should be a `const char **out_string`.
[20:47:51] <fizzie> Oh, and your bootargs_str *is* const-qualified too.
[20:48:10] <fizzie> You're just discarding the qualifier by "laundering" it through strnstr.
[20:48:28] <fizzie> But just dropping a qualifier from a pointer doesn't magically make a string safe to modify.
[20:48:46] <drew> oh I see! I need to copy from bootargs_str to something local then, as I'm just passing this pointer to the device tree data around instead of making a local string to mess around with
[20:49:28] <fizzie> Yes, or not modify the string (i.e., use something else than strsep).
[20:51:10] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[20:51:35] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[20:51:59] <drew> it looks like strtok also replaces the delimiter with \0. Do you know of another approach I could take here?
[20:52:55] *** lkor is now known as lionkor
[20:53:09] *** Joins: ghoust (~ghoust@178.73.192.138)
[20:53:36] <fizzie> Sure, you can use functions like strchr / strpbrk / strcspn to just *find* the delimiter, as long as you don't need the extracted part as a '\0'-terminated string, but are okay just with a pointer and a length.
[20:53:54] <fizzie> For example, if you want to print a substring, you can use the "%.*s" format specifier.
[20:56:14] <drew> thank you very much fizzie 
[20:57:39] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[20:58:29] *** Quits: ghoust (~ghoust@178.73.192.138) (Quit: ghoust)
[21:00:07] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:00:17] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[21:01:35] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 264 seconds)
[21:03:43] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:07:09] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[21:07:27] *** Quits: TVH76 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (Quit: The Lounge - https://thelounge.chat)
[21:08:13] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[21:09:43] *** Joins: moheb2000 (~moheb2000@87.107.84.2)
[21:09:58] *** Quits: moheb2000 (~moheb2000@87.107.84.2) (Client Quit)
[21:10:00] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[21:10:05] *** Joins: serbest (~serbest@user/serbest)
[21:11:12] *** Quits: serbest (~serbest@user/serbest) (Client Quit)
[21:11:24] *** Quits: kman (~kman@45.77.144.136) (Quit: ZNC 1.8.2 - https://znc.in)
[21:11:36] *** Joins: carlavilla (~carlavill@188.26.219.172)
[21:13:02] *** Joins: kman (~kman@45.77.144.136)
[21:13:54] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[21:17:56] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:26:53] *** Joins: node1 (~node1@user/node1)
[21:27:50] *** Joins: Tenn0 (~Tenn0@167.98.27.226)
[21:29:00] *** Quits: Tenn0 (~Tenn0@167.98.27.226) (Client Quit)
[21:31:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:32:52] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[21:34:04] <LeoNerd> Is it an error to pass (f)printf() more args than the format string wants? I want to do  fprintf(stderr, name ? "name=<%s>" : "name=NULL", name);
[21:34:17] <LeoNerd> So in the NULL case, the format string won't attempt to consume the NULL
[21:34:47] <masterbuilder> I do believe that is UB
[21:35:05] <LeoNerd> Hrm.. Upsetting
[21:35:29] <apotheon> wrapper function, maybe
[21:35:34] <masterbuilder> But I also think it's better to have more arguments than less
[21:35:40] <masterbuilder> probably nothing bad will happen but, you're on your own
[21:36:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8) (Ping timeout: 260 seconds)
[21:36:33] <Klinda> yes it's bad passing more args than the format string wants
[21:37:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6)
[21:38:55] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:39:07] *** Quits: carlavilla (~carlavill@188.26.219.172) (Ping timeout: 268 seconds)
[21:39:47] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:43:44] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:44:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[21:45:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:45:17] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[21:46:00] <fizzie> LeoNerd: I seemed to recall it was explicitly allowed.
[21:46:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:46:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:46:44] <fizzie> LeoNerd: C11 7.21.6.1p2: "If the format is exhausted while arguments remain, the excess arguments are evaluated (as always) but are otherwise ignored."
[21:46:46] <fizzie> IOW, it's fine.
[21:47:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6) (Ping timeout: 268 seconds)
[21:47:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:48:14] *** Joins: wo0f (~wo0f@user/wo0f)
[21:48:21] *** Joins: serbest (~serbest@user/serbest)
[21:48:32] <caze> Yes, it's fine.
[21:48:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:48:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:49:11] *** Quits: ornxka (~ornxka@47.241.5.177) (Quit: WeeChat 3.3)
[21:49:18] *** Joins: Atque (~Atque@user/atque)
[21:49:46] <caze> It's UB to cause fprintf to try call va_arg more times than there are arguments, but it's perfectly okay to call va_end early, before all the arguments are consumed.
[21:50:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:50:11] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:51:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[21:53:51] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[21:54:36] <fizzie> I don't think (pre-C23) printf and friends are *required* to act exactly as if they were using va_start/arg/end to consume the variadic arguments. In particular, while it's explicitly allowed to use `va_arg` with the "wrong" type in two cases (corresponding signed/unsigned integer types & value representable in both, and `void *` vs. `char *`), it's unclear whether that's also true for printf, where
[21:54:38] <fizzie> (C11 7.21.6.1p9) if "any argument is not the correct type for the corresponding conversion specification, the behavior is undefined". But that's just re any `va_arg`-based argument; the "too many arguments" case is also explicitly allowed (as quoted).
[21:55:08] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Client Quit)
[21:55:26] <fizzie> Current C23 drafts actually fix that; N2596 7.21.6.1p9 goes: "`fprintf` shall behave as if it uses `va_arg` with a type argument naming the type resulting from applying the default argument promotions to the type corresponding to the conversion specification --".
[21:55:41] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[21:55:44] *** Joins: kri (~debian@snf-55691.vm.okeanos-global.grnet.gr)
[21:55:52] <fizzie> Meaning it's finally entirely unambiguous that `printf("%u", 0);` must print "0".
[21:56:01] <kri> hello
[21:56:33] *** Joins: Famine (~Famine@user/famine)
[22:03:29] *** Quits: llh (~llh@user/llh) (Ping timeout: 268 seconds)
[22:03:59] *** Quits: Jong (~Jong@174.27.107.153) (Ping timeout: 264 seconds)
[22:04:58] *** Quits: serbest (~serbest@user/serbest) (Remote host closed the connection)
[22:07:32] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[22:07:32] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:08:43] *** Quits: alch (~alch@151.44.54.14) (Ping timeout: 268 seconds)
[22:10:00] *** Joins: Akuli (~Akuli@82-203-161-164.bb.dnainternet.fi)
[22:10:15] *** Joins: alch (~alch@151.46.63.148)
[22:11:12] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:11:34] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[22:11:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:12:28] *** Joins: serbest (~serbest@user/serbest)
[22:12:31] *** Joins: chasmo77 (~chas77@71.63.241.168)
[22:12:56] *** Parts: neutral (~user@user/neutral) (ERC (IRC client for Emacs 27.2))
[22:18:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:18:54] <SamuelMarks> hi
[22:21:57] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[22:22:59] *** Joins: buffet (~buffet@buffet.sh)
[22:26:22] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[22:27:10] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:28:24] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[22:28:30] *** Joins: oriba (~oriba@dynamic-089-012-132-051.89.12.pool.telefonica.de)
[22:30:34] *** Quits: kts (~kts@103.73.237.57) (Ping timeout: 250 seconds)
[22:33:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:37:11] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700)
[22:37:57] *** Joins: quartz (~quartz@user/quartz)
[22:40:57] *** Joins: V-T60 (~v@91.203.24.166)
[22:41:06] *** Joins: soul-d (~uknown@user/soul-d)
[22:41:10] <quartz> Hi. Sorry for the noob questions, but if I have a "void *data" pointer and I have another pointer struct MdbRec *entry (based off this structure https://bpa.st/RY7A) and I do data = entry;  will data "become" a pointer of type struct MdbRec, or do I need to cast it?
[22:41:32] <quartz> Because the way I understand void pointers, they can essentially become any type.
[22:44:17] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[22:45:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:46:24] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:46:35] <sham1> quartz: you can assign a void-pointer to any other data pointer without an explicit cast. Of course if you do something like `int *foo; void *bar = foo; float *baz = bar;` then you're commiting undefined behaviour
[22:47:40] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:48:07] <quartz> sham1: Right, got it. Thanks!
[22:49:12] <nomagno> https://termbin.com/yg2x
[22:49:18] <nomagno> Is this looking like a sane OOP abstraction over C?
[22:53:44] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[22:53:59] <sham1> For some definition of sane. Now of course, trying to abstract OO in C is like trying to put an ellipsoidal peg into a square hole
[22:54:30] <bparker> a big enough square hole will fit just fine
[22:54:45] <sham1> It's of course been done before (see: C++) but even that used its own preprocessing thing instead of trying to cram things into macros
[22:54:46] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:54:55] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:55:26] *** Joins: u1_ (~u1@95.54.114.13)
[22:57:01] <nomagno> I'm going to call this a reasonable tradeoff between no OOP and a million extensions over the C language (the macros take up a total of 200 lines)
[22:57:01] <bparker> 19:16 < sham1> quartz: you can assign a void-pointer to any other data pointer without an explicit cast. <- surely there is a compiler that will warn about this ?
[22:58:03] *** Quits: rcm888 (~u1@95.54.115.226) (Ping timeout: 268 seconds)
[22:58:36] <caze> bparker: Is there a compiler that will warn about this: float f = 3.14; int i = f;
[22:58:44] *** Joins: kts (~kts@103.73.237.57)
[23:00:31] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[23:00:38] <sham1> ,cc int foo = 1; void *bar = &foo; float *baz = bar;
[23:00:41] <candide> sham1: no output: foo = 1; baz = 0x7fffffffe28c; bar = 0x7fffffffe28c
[23:00:50] <sham1> Well, gcc won't, it seems
[23:00:58] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[23:01:13] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:01:29] <sham1> bparker: wait, no. It won't complain. A void pointer is explicitly assignable to a data pointer of any other type, it's in the spec
[23:02:58] <sham1> It's just that assigning it to a type other than the one you got the void * from is UB
[23:03:00] <caze> I mean it could still issue a warning. It just has to still produce the correct code.
[23:03:10] <sham1> It could, but apparently it doesn't
[23:03:28] <caze> I mean an implementation is allowed to.
[23:03:39] <caze> Not talking specifically about gcc.
[23:03:41] <sham1> Yes
[23:03:44] *** Quits: kts (~kts@103.73.237.57) (Quit: Konversation terminated!)
[23:04:54] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:05:07] <SamuelMarks> How do I reference a function that is linked later?
[23:05:16] <SamuelMarks> ,extern int g(); int (*f(void))(int) { return g; }; /* later */ int g() {return 5;}
[23:05:44] <sham1> How much later is /* later */
[23:06:01] <sham1> Because the linker will resolve that most likely
[23:06:16] <caze> SamuelMarks: By its name.
[23:07:04] *** Joins: vicfred (~vicfred@user/vicfred)
[23:07:29] <caze> SamuelMarks: int (*f(void))(int) { return g; }; Can you say what you're doing there?
[23:09:15] *** Joins: thelounge75 (~thelounge@67.59.83.166)
[23:11:06] *** thelounge75 is now known as fputs
[23:11:33] *** Joins: seninha (~seninha@user/seninha)
[23:15:53] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:17:03] *** Server sets mode: +Cntz 
[23:17:51] *** Joins: Foaly (~Foaly@user/foaly)
[23:18:09] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[23:19:08] <SamuelMarks> caze - I want to return the resolved function g such that I can do f()() and get 5
[23:19:39] <SamuelMarks> (possibly with an intermediate variable, but you get the idea)
[23:20:13] *** Quits: serbest (~serbest@user/serbest) (Quit: IRLing.)
[23:20:31] *** Quits: u1_ (~u1@95.54.114.13) (Read error: No route to host)
[23:20:35] *** Joins: rcm888 (~u1@95.54.114.13)
[23:20:36] <SamuelMarks> sham1 - Actually my project generates a single amalgamated header, I just don't want to have to parse through and push the implementation of `f` below `g` explicitly
[23:21:13] <sham1> You don't need to 
[23:21:34] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[23:21:41] <sham1> As long as you have g's definition before f, you can do that
[23:21:56] <SamuelMarks> hmmm
[23:22:04] <caze> SamuelMarks: Well your prototype for f is wrong. You specify that f returns a pointer to a function taking int, returning int, but that does not match up with youre declaration with g.
[23:22:29] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:23:11] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[23:23:20] *** Quits: steve__ (~steve@ool-182c2aa4.dyn.optonline.net) (Read error: Connection reset by peer)
[23:23:24] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Read error: Connection reset by peer)
[23:23:26] <mcf> a declaration of g has to come before f, but not necessarily the definition
[23:23:37] *** Joins: steve__ (~steve@ool-182c2aa4.dyn.optonline.net)
[23:23:50] <caze> SamuelMarks: https://ideone.com/q7zw1v
[23:23:50] <sham1> Whichever would just be the prototype, yeah, that can come first
[23:24:05] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[23:25:08] *** Joins: Tenn0 (~Tenn0@88.97.110.231)
[23:26:44] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[23:28:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:30:01] *** Joins: seninha (~seninha@user/seninha)
[23:30:05] *** Quits: dmaroo (~dhruv@2409:4070:2e06:4854:5d99:c555:b8ae:f231) (Quit: Konversation terminated!)
[23:31:48] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[23:31:59] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[23:34:21] *** Joins: rgrinberg (~textual@190.113.111.74)
[23:34:22] *** Joins: tech_exorcist_ (txrcst@user/tech-exorcist/x-0447479)
[23:36:03] *** Joins: pucara (~i@181.92.84.206)
[23:43:04] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[23:43:23] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:45:43] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.121)
[23:48:29] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[23:53:38] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.121) (Ping timeout: 260 seconds)
[23:55:23] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.118)
[23:55:35] *** Quits: Foaly (~Foaly@user/foaly) (Quit: Foaly)
