[00:01:47] *** Quits: nexeq (~nexeq@94.25.176.105) (Quit: Quit)
[00:02:03] *** Joins: nexeq (~nexeq@94.25.176.105)
[00:05:55] *** Quits: nexeq (~nexeq@94.25.176.105) (Client Quit)
[00:06:10] *** Joins: nexeq (~nexeq@94.25.176.105)
[00:12:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:48:15] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:51:07] *** Joins: ilmu (~ilmu@176.76.240.11)
[01:54:51] <ilmu> hi, I'm looking for some help with asdf, you can see my system definitions here: https://git.sr.ht/~ilmu/sbcl-tala if you have guix then you can get my error by doing ./shell.sh and then (asdf:make :tala/main) .. (or whatever :tala... I'm not exactly sure what to change so I'm here)
[02:16:14] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[02:17:43] *** Joins: nexeq (~nexeq@94.25.176.105)
[02:21:31] *** Joins: dra (~dra@2a04:4540:6409:ed00:28b8:fa9b:c517:3cd1)
[02:29:54] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[02:32:04] *** Quits: nexeq (~nexeq@94.25.176.105) (Quit: Quit)
[02:32:26] *** Joins: nexeq (~nexeq@94.25.176.105)
[02:33:27] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Client Quit)
[02:33:42] *** nexeq is now known as nexeq-pc
[02:35:31] *** Joins: nexeq-pc_ (~nexeq-pc@94.25.176.105)
[02:35:31] *** Quits: nexeq-pc_ (~nexeq-pc@94.25.176.105) (Client Quit)
[02:35:44] *** Quits: nexeq-pc (~nexeq@94.25.176.105) (Client Quit)
[02:36:03] *** Joins: nexeq (~nexeq@94.25.176.105)
[02:36:25] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[02:45:06] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Quit: leaving)
[02:45:27] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[02:47:28] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Read error: Connection reset by peer)
[02:47:29] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[02:48:57] *** Joins: nexeq (~nexeq@94.25.176.105)
[02:49:12] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[02:51:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:11:12] *** Joins: Oladon (~olad@98.43.81.226)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:28:17] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[03:28:17] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Read error: Connection reset by peer)
[03:29:54] *** Joins: nexeq (~nexeq@94.25.176.105)
[03:30:14] <bremner> ilmu: what is your error? (no guix here).
[03:31:48] <bremner> also, it might be better if you showed the whole asd file
[03:32:09] <bremner> Oh, I guess it's probably there if I poke about.
[03:33:21] <bremner> at least for me, the things in :depends-on are #:foo keywords, not strings. Dunno if that is a problem.
[03:33:33] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[03:46:39] *** Joins: dra_ (~dra@2a04:4540:6401:7800:28b8:fa9b:c517:3cd1)
[03:48:57] *** Quits: dra (~dra@2a04:4540:6409:ed00:28b8:fa9b:c517:3cd1) (Ping timeout: 240 seconds)
[03:50:23] *** Quits: dra_ (~dra@2a04:4540:6401:7800:28b8:fa9b:c517:3cd1) (Remote host closed the connection)
[04:12:13] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[04:18:12] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:20:21] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Read error: Connection reset by peer)
[04:20:21] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[04:21:19] *** Joins: nexeq (~nexeq@94.25.176.105)
[04:25:18] *** Joins: nexeq-pc (~nexeq-pc@94.25.176.105)
[04:27:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:30:51] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[04:39:55] *** Quits: nexeq-pc (~nexeq-pc@94.25.176.105) (Quit: Lost terminal)
[05:01:33] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:11:37] *** Quits: ilmu (~ilmu@176.76.240.11) (Ping timeout: 240 seconds)
[05:15:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:21:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:24:01] *** Joins: ilmu (~ilmu@176.76.240.11)
[05:24:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[05:47:30] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[06:04:39] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[06:06:29] *** Joins: nexeq (~nexeq@94.25.176.105)
[06:27:10] <ilmu> bremner: I changed it but the problem (which I will make clearer shortly) remains.
[06:43:15] *** Joins: jstoddard (~user@2600:8801:a400:5a00::d374)
[06:46:29] <rotateq> jstoddard: do you read me? :)
[06:46:37] <rotateq> *over*
[06:52:37] *** Quits: sts-q (~sts-q@212.53.219.153) (Ping timeout: 256 seconds)
[06:58:50] *** Joins: sts-q (~sts-q@91.200.108.235)
[07:30:41] <beach> Good morning everyone! 
[07:35:00] <dre> Good morning beach! 
[08:13:58] *** Quits: dre (~dre@2001:8003:c932:c301:58d1:88a7:d83f:4266) (Quit: Leaving)
[09:46:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[10:15:45] *** Quits: ilmu (~ilmu@176.76.240.11) (Ping timeout: 268 seconds)
[10:26:34] *** Parts: jstoddard (~user@2600:8801:a400:5a00::d374) (ERC (IRC client for Emacs 27.1))
[10:53:25] *** Joins: treflip (~user@user/treflip)
[11:19:35] <CodeBitCookie[m]> Good Morning Everyone!
[11:19:44] <CodeBitCookie[m]> Good Morning beach!
[11:37:27] *** Joins: shka (~herr@109.231.0.226)
[11:45:05] *** Joins: ilmu (~ilmu@176.76.242.169)
[11:59:23] <lisp123> I'm trying to figure out the best way to handle the following situation: Lets say I have a TEST function that returns CLASS-A if true and perhaps signals the test failed if false. However, it is not really an error situation - a test may pass 70% of the time, perhaps fail 30% of the time.
[12:00:49] <lisp123> Should I use the condition system, or should I think of returning the fail result as a value that is then analysed by the calling function (the most common example most people use is to use NIL to indicate failure and then (null ...) to test for success/failer
[12:00:51] <lisp123> failure*
[12:02:10] <lisp123> The benefit of the condition system is that one can pass some additional information on why the test failed. 
[12:02:41] <lisp123> The downside is that it adds a fair bit of boilerplate into something that can be mostly be covered by simply returning nil
[12:05:20] <lisp123> One approach could be to use the condition system where there is an explicit way for the user to intervene and "handle" the condition, and to use NIL or some similar alternative for other cases
[12:10:45] <lisp123> Hmmm I am thinking just to use conditions and leave them unhandled where not necessary. Seems a more hygienic solution that way as it leaves the option later to modify the codebase and also is a bit more explicit in explaining what is happening
[12:13:59] <lisp123> Logging off, for those celebrating - have a very merry xmas or happy holidays otherwise!
[12:14:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:27:48] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[12:31:35] *** Joins: rain3_ (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[12:34:12] *** Quits: rain3_ (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Client Quit)
[13:08:37] <pjb> lisp123: the condition system allows for conditions that are not errors.  So you can still use it, even for not really an error situations.
[13:16:16] <beach> CodeBitCookie[m]: Are you here?
[13:16:37] <CodeBitCookie[m]> Yes
[13:16:39] <CodeBitCookie[m]>  * beach: Yes
[13:16:49] <beach> Is it OK if we continue here.
[13:17:04] <CodeBitCookie[m]> Yeah, perfectly fine!
[13:17:14] <beach> I am *really* tired of being told I am wrong every time I utter something.
[13:17:44] <beach> If the size of the documents manipulated is limited, then you can just draw the entire document for each key.
[13:17:48] <CodeBitCookie[m]> beach: Did I say something wrong?
[13:17:54] <beach> no, not you.
[13:18:01] <CodeBitCookie[m]> moon-child?
[13:18:09] <beach> I prefer not to comment.
[13:18:18] <CodeBitCookie[m]> I see.
[13:18:27] <CodeBitCookie[m]> Well sorry on their behalf.
[13:18:38] <beach> It has become a recurring problem.
[13:18:55] <CodeBitCookie[m]> I just ignore someone else entering into the conversation and making the topic even more confusing
[13:19:15] <CodeBitCookie[m]> I usually continue to talk to the person who I started with
[13:19:36] <beach> Let's discuss your problem instead.
[13:20:24] <beach> I think the main design decision you need to consider is the data structure that you manipulate, and how each type of keystroke will impact the data structure.
[13:20:31] <beach> The GUI part is going to be very simple.
[13:21:18] <beach> And I think the data structure is going to be more complex than that of a text editor.
[13:21:49] <beach> For instance, you may want a certain keystroke to mean different things in different positions in the data structure.
[13:23:01] <beach> For the drawing part, you can just traverse the data structure and produce the entire output in one go.
[13:28:15] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:29:09] *** Joins: treflip (~user@user/treflip)
[13:29:46] <beach> CodeBitCookie[m]: Did you vanish?
[13:31:03] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:34:54] *** Joins: treflip (~user@user/treflip)
[14:17:25] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[14:18:22] *** Joins: nexeq (~nexeq@94.25.176.105)
[14:38:47] *** Joins: neceve (~quassel@2.26.93.228)
[15:20:53] <CodeBitCookie[m]> beach: yes I did. I am really sorry. I had some guests over and now I’m doing the laundry.
[15:21:07] <CodeBitCookie[m]> I am still a child.
[15:21:28] <CodeBitCookie[m]> 👶
[15:22:04] <CodeBitCookie[m]> I can still talk to you though
[15:23:22] <CodeBitCookie[m]> beach: I really like that idea for the structure thing
[15:23:53] <CodeBitCookie[m]> The question could now become, how am I going to do the backend.
[15:24:23] <CodeBitCookie[m]> Like in sentences? CLOS for different types? This is going to be quite complicated.
[15:25:55] <CodeBitCookie[m]> beach: Someone suggested that I should create a backend for McCLIM in OpenGL instead of trying to copy McCLIM’s front end
[15:26:16] <CodeBitCookie[m]> How much of a viable option is that?
[15:26:44] <CodeBitCookie[m]> I mean it feels impure and OpenGL seems pure
[15:26:44] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:27:14] <CodeBitCookie[m]> s/seems/feels
[15:27:31] <CodeBitCookie[m]> Ok brb in 5 mins
[15:46:29] <CodeBitCookie[m]> Okay 5 more mins
[15:47:18] <CodeBitCookie[m]> Maybe 10
[16:07:42] <CodeBitCookie[m]> I’m back
[16:17:38] <CodeBitCookie[m]> * a child. :)
[16:28:32] <ilmu> CodeBitCookie what are you trying to do?
[16:29:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:31:29] <CodeBitCookie[m]> ilmu: I am trying to make a program in which a big part is helping teachers making worksheets very fast by auto-formatting everything for them.
[16:32:29] <CodeBitCookie[m]> This includes, auto-completion, indenting, marks, alignement, quick changes, fonts, characters, etc.
[16:33:51] <CodeBitCookie[m]> A lot of structure into the mix as well.
[16:41:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:49:50] <beach> An OpenGL backend is certainly possible, but I am not sure that's going to further your goal.
[17:16:41] <CodeBitCookie[m]> beach: Want to make my application cross platform and look good. Although Availability > Appearance.
[17:17:02] <CodeBitCookie[m]> So am trying to solve in that order.
[17:28:08] <beach> Sure.  I have no objections.
[17:30:56] <rotateq> And beach, sad to read you often feel this way what you mentioned (the supposed to being wrong thing). You kind of a master Yoda for us, very metaphorically speaking of course. :)
[17:31:57] <CodeBitCookie[m]> rotateq: same.
[17:33:11] <rotateq> Sure, many respectable people also here of course with much know-how and experience, but the council of Jedi masters also has more than one member.
[17:35:31] <beach> What I object to is when some person keeps quiet, without giving any advice to someone asking for it, in this case CodeBitCookie[m], and instead just seems to wait for the person that gives advice, in this case me, just to object to the advice I givec.  
[17:35:39] <beach> give.
[17:36:18] <beach> It would be a much better idea to give their advice directly to the person asking for it if they know so much about the subject.
[17:37:08] <rotateq> I'm often not able to give (good) advice and try being honest with myself.
[17:37:12] <CodeBitCookie[m]> beach: Yeah, I totally agree with you.
[17:38:33] <beach> The other day in #sicl, it was really bad.  I advocated more precision in some documentation or comment.  Two people objected that, since language is ambiguous anyway, we should not attempt more precision, and in particular, my advice was wrong.
[17:38:40] <rotateq> And I see it the way, we're not many, thus harmony is important.
[17:39:44] <rotateq> beach: So they could read up what literate programming means, especially for a system like SICL.
[18:01:02] <CodeBitCookie[m]> Anyways, going away from the topic for a bit, I have a question; I want to load a file in as a string and am currently using `alexandria:read-file-into-string`. The file I want to read is always going to be in the same directory as or a sub-directory of the lisp file. 
[18:01:53] <CodeBitCookie[m]> The problem comes up when SBCL is not in the same directory as the lisp file. It can't find the lisp file. I want to specify a reletive path. What can I do/
[18:01:54] <CodeBitCookie[m]> s///?/
[18:03:08] <beach> You can specify it relative to an ASDF system.
[18:03:13] <beach> ... if that's practical.
[18:03:25] <CodeBitCookie[m]> how?
[18:04:09] <CodeBitCookie[m]> I also want this application to be installable for normal people
[18:04:36] <beach> (asdf:system-relative-pathname <asdf-system-name> <relative-pathname>)
[18:12:37] <rain3> CodeBitCookie[m]: sure it can be done
[18:16:56] <rain3> use asdf:system-relative-pathname for now, no need don't bother with the deployment before you have the app . You want it "relatively to the lisp file" but when the app is deployed, there is no lisp file any more, just an executable
[18:17:20] <CodeBitCookie[m]> rain3: true
[18:49:50] *** Joins: Achylles (~Achylles_@2804:431:d725:86fc:abf6:fa73:2a9e:707b)
[18:54:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:57:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[19:01:20] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:06:27] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[19:35:38] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[19:40:31] *** Joins: nexeq (~nexeq@94.25.176.105)
[19:40:57] *** Quits: nexeq (~nexeq@94.25.176.105) (Client Quit)
[19:41:16] *** Joins: nexeq (~nexeq@94.25.176.105)
[19:53:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:53:58] *** Joins: ilmu1 (~ilmu@176.76.240.33)
[19:54:03] *** Quits: ilmu (~ilmu@176.76.242.169) (Ping timeout: 256 seconds)
[20:53:42] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[20:53:57] *** Joins: nexeq (~nexeq@94.25.176.105)
[20:58:03] <ilmu1> CodeBitCookie: sounds cool, what is your very first / next step?
[20:59:12] *** Joins: panji (~panji@120.188.1.145)
[20:59:29] *** Quits: Achylles (~Achylles_@2804:431:d725:86fc:abf6:fa73:2a9e:707b) (Remote host closed the connection)
[21:00:30] *** Quits: panji (~panji@120.188.1.145) (Read error: Connection reset by peer)
[21:01:14] *** ilmu1 is now known as ilmu
[21:02:37] *** Joins: panji (~panji@120.188.1.145)
[21:03:24] <ilmu> alright it wasn't shortly but I am still a bit stuck with asdf, fwict the guix part works correctly so I must be misunderstanding what asdf does with the data I've given it ... git.sr.ht/~ilmu/sbcl-tala
[21:04:33] <ilmu> I did change from strings to keywords like bremner suggested but afaict they are equivalent and I was not having any troubles with the dependencies from the beginning, the issue is that it doesn't work to do asdf:make or asdf:compile-system
[21:04:54] <bremner> ilmu: did you paste the actual error message somewhere?
[21:05:33] <ilmu> sec
[21:06:09] <ilmu> honestly it's not about the error it's about asdf, I 'd like to understand what it does when I do make or compile -system
[21:11:22] *** Quits: panji (~panji@120.188.1.145) (Quit: Leaving.)
[21:12:37] *** Joins: rito_ (~rito_gh@45.112.243.69)
[21:16:44] <beach> ilmu: You typically want to use asdf:load-system, because it is possible that the compilation of one file depends on having a preceding file in the dependency loaded.
[21:17:16] <beach> For example if that preceding file contains the definition of a macro or a special variable that might be referred to in files to be compiled later.
[21:17:22] *** Quits: nexeq (~nexeq@94.25.176.105) (Read error: Connection reset by peer)
[21:17:42] *** Joins: nexeq (~nexeq@94.25.176.105)
[21:33:24] <etimmons> ilmu: it's hard to tell what the issue is. Given what I see, asdf:make will dump an executable for you. There are a myriad number of ways that (or load-system) can fail on guix if you need foreign libs
[21:34:12] <etimmons> ilmu: one thing that does catch my eye is your defpackage form in main looks bogus. There is no :depends-on clause
[21:48:28] <etimmons> beach: I can't confirm (not at computer), but I think compile-system  will basically load every dependency and every file except the last. But totally agree that compile-system is rarely, is ever, what someone wants
[22:20:53] *** Quits: nexeq (~nexeq@94.25.176.105) (Changing host)
[22:20:53] *** Joins: nexeq (~nexeq@user/nexeq)
[22:23:32] *** Quits: nexeq (~nexeq@user/nexeq) (Quit: Way to go, Superstar)
[22:23:48] *** Joins: nexeq (~nexeq@user/nexeq)
[22:29:56] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[22:45:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:49:46] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[22:51:14] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Quit: Leaving)
[23:29:23] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[23:33:39] *** Joins: random-nick (~random-ni@87.116.180.98)
[23:55:27] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:55:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
