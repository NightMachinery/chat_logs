[00:00:03] *** Joins: craekz (~craekz@user/craekz)
[00:00:12] <ioxzev1z> constxd, what about the fds => 5000
[00:00:14] <ioxzev1z> ?
[00:00:29] <constxd> presumably there are none
[00:01:52] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:03:46] *** Joins: Lumia (~alice@208.64.158.255)
[00:04:40] <cryptonector> dmlloyd: because unfortunately that doesn't always work: many apps forget to set O_CLOEXEC, and in a threaded app you really need all code to use newer system calls that let you specify O_CLOEXEC before the FD gets created
[00:04:50] <dmlloyd> yes
[00:05:19] *** Quits: Darkcoal (~user@139.64.51.226) (Quit: Darkcoal)
[00:05:59] <cryptonector> if you're writing a monolythic app, threaded or otherwise, its not really a problem, but if you are using libraries that might be using pipe(2) or what have you, or if you're writing a library that's going to fork off child processes, then you have a problem
[00:06:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:06:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:06:09] *** Joins: wroathe (~wroathe@user/wroathe)
[00:06:29] <constxd> are you suggesting that one thread may open a file, and a second thread may call exec() before the first thread sets O_CLOEXEC
[00:06:36] <cryptonector> yes
[00:06:37] <cryptonector> that
[00:06:50] <cryptonector> this is the reason that Illumos has closefrom(3C)
[00:06:54] <constxd> sounds like there's a lot more wrong than just the wrong system call
[00:07:05] <cryptonector> no
[00:07:19] <dmlloyd> posix itself is deficient in this way
[00:07:29] <cryptonector> yes, POSIX is the problem
[00:07:32] <dmlloyd> but the holes are slowly closing
[00:07:34] <dmlloyd> so to speak
[00:07:43] <constxd> i can't imagine a scenario in a multi-threaded application where i'd want one thread to just be able to call exec() at any time
[00:07:48] <cryptonector> even w/o threads if you have signal handlers that fork/exec then you have a problem
[00:07:58] <dmlloyd> linux for example has syscalls that can atomically open and set CLOEXEC
[00:08:05] <cryptonector> constxd: it happens
[00:08:30] <dmlloyd> I can't imagine a Java application with less than 4 or 5 threads :)
[00:08:39] <sham1> I can
[00:08:48] <cryptonector> as dmlloyd says, there's new pipe2(2), accept4(2), etc. syscalls that let you set O_CLOEXEC atomically, and there's an fopen() flag char ('e') for it as well
[00:08:49] <dmlloyd> it must not have garbage collection then!
[00:09:17] <cryptonector> sham1: in Java land people still write thread-per-client servers
[00:09:19] <constxd> what is that some kind of glibc extension
[00:09:31] <dmlloyd> posix_spawn helps a little too
[00:09:32] <sham1> cryptonector: I know. I have to work with these people
[00:09:33] <cryptonector> constxd: yes, it's a glibc extension
[00:09:46] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Remote host closed the connection)
[00:09:50] <cryptonector> sham1: me too
[00:10:12] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:10:15] <cryptonector> dmlloyd: posix_spawn can't help the race to set O_CLOEXEC
[00:10:24] <cryptonector> and it'd better use vfork() or be a proper syscall
[00:10:25] <dmlloyd> it's not really about thread-per-client these days, it's more about thread-per-CPU
[00:10:36] <cryptonector> dmlloyd: yes, but not yet in Java lnd
[00:10:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:10:52] <cryptonector> writing async I/O code in Java land is surprisingly hard still
[00:10:54] <dmlloyd> yes, that's what the "reactive" hubbub is about
[00:11:12] <dmlloyd> I don't say it's better, but no use denying it exists :)
[00:11:33] <cryptonector> there's what exists and what's used
[00:11:47] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Ping timeout: 256 seconds)
[00:11:59] <dmlloyd> I think practically speaking most things are using a hybrid approach, where I/O is handled in per-CPU threads and requests are handled in thread pools
[00:12:34] <dmlloyd> or a mix of thread pools and per-CPU threads, for frameworks which support both sync and async request handling
[00:13:35] <constxd> based
[00:13:37] <cryptonector> that works for some things
[00:13:56] <cryptonector> ideally you'd have all-async code using thread-per-CPU and done
[00:14:08] <cryptonector> and preferably uio_ring type APIs
[00:14:21] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:14:35] <cryptonector> we've known about C10K for 30 years and we're still not there
[00:14:48] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:15:19] <dmlloyd> the practical problem in Java is that you need some context associated with the request
[00:15:40] *** Joins: aighearach (~paris@user/aighearach)
[00:15:45] <dmlloyd> in a thread-per-request model, the context can live happily on the thread stack where it can be allocated "for free" with no GC cost for that
[00:16:14] <dmlloyd> but in an async model you have to put the context somewhere else, generally the heap where it incurs allocation and GC overhead, and context switching can be complex if there are a lot of kinds of context
[00:16:30] <dmlloyd> so, it can be a difficult tradeoff
[00:16:41] <cryptonector> the context has to be a heap object in an async I/O model
[00:16:53] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 256 seconds)
[00:17:25] <cryptonector> in a threaded model you have the per-request state smeared over a large stack (with an even larger virtual memory allocation)
[00:17:26] <dmlloyd> sometimes you can avoid the problem because (for example) your requests are small and you can always process them in one go, which gives really nice perf
[00:17:48] <cryptonector> in a CPS async model you have explicit state, "compressed" because not smeared over the stack
[00:17:56] *** ewwegweg_ is now known as ewwegweg
[00:18:01] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[00:18:09] <cryptonector> so memory footprint is lower, and so is cache thrashing
[00:18:19] <cryptonector> and you can serve more clients
[00:18:50] <dmlloyd> in C or other languages you have a lot more options (for example you can allocate the state object from a dedicated fast allocator, things like that)
[00:19:00] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:19:03] <dmlloyd> but in Java, it's the stack or the single GC'd heap
[00:19:22] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:19:41] <cryptonector> but the state has to be in the heap because which thread picks up the request next is anyone's guess, and even if you bind requests to threads, you'll still end up putting the state on the heap
[00:19:52] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:20:07] <cryptonector> but it's compressed state, and you can dealloc/finalize explicitly, so manual memory management looks pretty good
[00:20:23] <cryptonector> this is why Rust is the future
[00:20:32] <sham1> Well either the context doesn't survive a single GC cycle in which case it will just get allocated on the nursery and the generational hypothesis holds, or it survives and needs to be looked at with a lower frequency
[00:20:39] <dmlloyd> yeah rust is good with this kind of thing
[00:21:05] <aighearach> Rust can be great at this or that and still not be "the future."
[00:21:06] <dmlloyd> sham1, even so, allocations put pressure on the GC
[00:21:27] <cryptonector> aighearach: it's also the future because C is super dangerous
[00:21:33] <aighearach> C is great at it too, some people just catch cooties really easy, and those people don't use C unless they have to.
[00:21:46] <constxd> s/dangerous/based/
[00:21:49] <dmlloyd> I took "rust is the future" as a subjective statement of opinion; it seemed evident
[00:21:52] <aighearach> C is not "dangerous." That's hyperbole, not observation.
[00:21:55] <dmlloyd> so there's really no need to argue against it
[00:22:29] <aighearach> People who blame C for their dangerous code are dangerous.
[00:22:39] <dmlloyd> along the lines of "internet people are terrible" :)
[00:22:55] <Learath2> not really, rust preachers are fairly benign, like mormons
[00:23:13] <aighearach> Learath2: they're dangerous when they're writing C
[00:23:21] <Learath2> they can get pretty passionate but they are not dangerous, you can just stop replying whenever :D
[00:23:22] *** Quits: mikoto-chan (~mikoto-ch@dsl-olubng12-54fa07-26.dhcp.inet.fi) (Quit: mikoto-chan)
[00:24:32] <aighearach> Poorly written code that wished it had a babysitter does care if you're passionate or not, it will still eat your cat and set fire to your network interface
[00:25:12] <constxd> that's why we need rustc
[00:25:35] <constxd> to save the cats
[00:25:35] *** Quits: unknow (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:25:39] <dmlloyd> OTOH being 10x more verbose in order to be safe is soul-crushing... it's not reasonable to expect people to do that
[00:25:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:25:54] <constxd> yes
[00:26:03] <dmlloyd> eventually human nature intrudes
[00:26:27] <supakeen> i doubt that anything programming or computer related can be 'human nature'
[00:26:39] <dmlloyd> a programming language is a human interface
[00:26:57] <dmlloyd> otherwise we'd just be emitting the bits :)
[00:27:36] <constxd> imagine telling someone hey there's this new language replacing C, it has a rich standard library full of type-generic collections and various useful associated operations, filesystem/io libraries, built-in support for concurrency, pattern matching, and first-class functions
[00:28:06] <dmlloyd> and you don't have to worry about closing all FDs above 4, ever :)
[00:28:06] <supakeen> so many c programmers would cry out in sunk cost :(
[00:28:07] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:28:12] <constxd> they'll say oh wow i bet my programs will be much shorter
[00:28:17] *** Joins: trampel (~trampel@2601:602:9c00:921:ebe6:c9ca:2006:616)
[00:28:25] <sham1> constxd: I agree. Common Lisp is nice
[00:28:55] <ioxzev1z> Just curious but isn't C10K solved? Surely modern servers can handle 10k clients at a time
[00:29:01] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[00:29:07] <cryptonector> ioxzev1z: because Java
[00:29:08] <supakeen> ah the one true judge of programming, terseness :)
[00:29:16] <ioxzev1z> Isn't it like C1M now?
[00:29:32] <constxd> C10M
[00:29:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:29:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:29:57] *** Joins: wroathe (~wroathe@user/wroathe)
[00:30:13] <cryptonector> having worked on codebases with tens of millions of lines of C code, and maintaining and/or contributing to codebases that add up to 1mloc of C now, I firmly believe we should replace C with Rust
[00:30:30] <constxd> what about the other options
[00:30:43] <cryptonector> C10M == unikernels or similar, but in them you'd still be doing C10K things
[00:30:48] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[00:31:07] <cryptonector> constxd: other options are ok, but Rust is the better systems programming language
[00:31:11] <constxd> zig, modern c++
[00:31:49] <constxd> it kinda seems like
[00:31:55] <constxd> rust and c++ are converging
[00:32:02] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:32:03] <constxd> the way c++23 is looking
[00:32:14] <trampel> Any hints as to why (c99) "error: ‘M_PI’ undeclared" when i've included <math.h> and it's defined in there? yes, i can #define M_PI 3.141...  but why is that necessary? (something "ansi"?) thank you!
[00:32:48] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:33:11] <constxd> M_PI is a GNU thing
[00:33:37] <constxd> actually might be POSIX
[00:33:41] <constxd> regardless, not standard C
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:04] <trampel> ok.  but i've "#define _GNU_SOURCE" and the error is still there.
[00:34:10] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[00:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:37:10] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[00:37:17] <constxd> trampel: that's odd
[00:37:20] <constxd> works for me
[00:37:31] <constxd> did you define that before including math.h?
[00:37:33] *** Joins: Betal (~Betal@user/betal)
[00:38:15] <trampel> interesting (thank you) ...what i did was use it in a subsequent #define "#define degToRad(angleInDegrees) ((angleInDegrees) * M_PI / 180.0)"  are all #defines resolved before #includes?
[00:38:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:39:16] *** Quits: Torr (~Torr@user/torr) ()
[00:39:35] <constxd> no
[00:39:45] <sham1> They're all done in order
[00:40:14] <trampel> and it works for you in gcc? or c99? or both?
[00:40:15] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:40:48] <constxd> ,cc -noheaders -std=c99 #include <math.h>\n#define A M_PI\n int main(void) { }
[00:40:50] <candide> constxd: Success (no output).
[00:41:02] <constxd> i'm retarded
[00:41:13] <constxd> ,cc -noheaders -std=c99 #include <math.h>\n#define A M_PI\n int main(void) { float pi = A; }
[00:41:14] <candide> constxd: error: 'M_PI' undeclared  note: in expansion of macro 'A'    note: in expansion of macro 'A'
[00:41:22] <trampel> fascinating!  thank you.  (now i have a real mystery)
[00:41:24] <constxd> ,cc -noheaders -D_GNU_SOURCE -std=c99 #include <math.h>\n#define A M_PI\n int main(void) { float pi = A; }
[00:41:26] <candide> constxd: Success (no output).
[00:41:29] <constxd> ^
[00:41:39] <constxd> adding -D_GNU_SOURCE worked there
[00:42:01] <trampel> oh, i'll try that ("#define _GNU_SOURCE" didn't work)
[00:43:27] <dmlloyd> you'd have to `#define _GNU_SOURCE` before any `#include`
[00:43:34] <trampel> yes. that works. (what the...??)  ok, does it have to be "#define _GNU_SOURCE" something, like "#define _GNU_SOURCE 1" ?
[00:43:43] <constxd> no
[00:43:54] <Learath2> ,cc -noheaders -std=c99 #define _GNU_SOURCE\n#include <math.h>\n#define A M_PI\n int main(void) { float pi = A; }
[00:43:56] <candide> Learath2: Success (no output).
[00:43:57] <constxd> you're 100% including the math header before it's defined
[00:44:09] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[00:44:31] <trampel> that did it!  thank you all!  i was "#define _GNU_SOURCE" too low down in the code.
[00:44:44] <trampel> thank you thank you! may your camels spit nothing but dates!
[00:45:08] <sham1> Always put _GNU_SOURCE or POSIX_C_SOURCE as the first thing
[00:45:21] <sham1> Depending on if you want Posix or GNU-isms
[00:45:36] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: leaving)
[00:45:41] <trampel> sham1, that's apparently exactly the problem. thank you.
[00:45:46] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[00:45:50] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[00:46:42] <trampel> (can't believe i spent so much time on that little knot ...sheesh)
[00:49:59] *** Quits: jollygood2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[00:53:29] <cryptonector> or _DEFAULT_SOURCE, or BSD_SOURCE, or whatever it is
[00:53:33] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:53:37] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 240 seconds)
[00:54:33] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:55:36] <trampel> as the gormless user there's some surprising standards defense against a little thing like #define M_PI 3.141... but i'm sure there's some good reason to it.
[00:58:47] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[01:00:21] *** Joins: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net)
[01:00:49] <constxd> I'm quite happy with the result. 3425 lines of mostly C have been replaced with 3413 lines of Rust. The new version exports the same ABI, so for C programs and FFI users (Python, Java, etc.) it's a drop-in replacement. The new code uses the same algorithm, but there are minor differences from adaptation to Rust's idioms.
[01:01:00] <constxd> LMAOOO
[01:02:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:02:38] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[01:03:07] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:06:37] *** Quits: mahmutov (~mahmutov@37.155.2.41) (Ping timeout: 240 seconds)
[01:09:13] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:09:48] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b)
[01:12:43] *** Joins: kish` (~aqua@user/aqua)
[01:13:55] *** Quits: magla (~gelignite@55d453bf.access.ecotel.net) (Quit: Stay safe!)
[01:17:46] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it)
[01:17:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[01:19:54] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Read error: Connection reset by peer)
[01:19:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:21:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 240 seconds)
[01:21:44] *** Quits: trampel (~trampel@2601:602:9c00:921:ebe6:c9ca:2006:616) (Quit: Leaving)
[01:21:57] *** Quits: brad_mssw (~bhouse@2620:134:c001:100:28f3:c9a0:4ee9:63c1) (Ping timeout: 268 seconds)
[01:28:13] *** Triskelios is now known as trisk\
[01:28:15] *** trisk\ is now known as trisk
[01:29:25] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[01:31:55] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:32:14] *** Quits: snappy (~snappy@user/snappy) (Read error: Connection reset by peer)
[01:32:39] *** Quits: ewwegweg (~ewwegweg@user/ewwegweg) (Ping timeout: 276 seconds)
[01:35:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Ping timeout: 256 seconds)
[01:36:17] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[01:37:32] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[01:37:49] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[01:43:28] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[01:44:41] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Read error: Connection reset by peer)
[01:44:57] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[01:47:02] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[01:50:40] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[01:50:51] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Read error: Connection reset by peer)
[01:51:33] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (Ping timeout: 268 seconds)
[01:51:45] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[01:56:36] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8347:64cf:195d:8ed7:2d37:fded)
[02:03:41] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[02:03:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:03:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:03:42] *** Joins: wroathe (~wroathe@user/wroathe)
[02:04:43] *** Quits: Lumia (~alice@208.64.158.255) (Quit: ,-)
[02:08:38] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[02:08:55] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Remote host closed the connection)
[02:10:36] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:26] <NRK[m]> constxd: what are you talking about?
[02:13:09] <tk> he's citing an article
[02:15:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:15:27] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:15:53] <omegatron> it's pngquant ..  wow, another software for my bin ..
[02:17:25] <omegatron> I really need a rust-to-c converter this year  -_-
[02:17:43] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[02:17:56] <tk> I think llvm can do that indirectly
[02:18:17] *** Quits: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net) (Ping timeout: 240 seconds)
[02:18:23] <omegatron> yeah .. need to test that, how good the output is
[02:18:50] <tk> the issue with rust is not that it's not C
[02:18:59] <tk> the issue with rust is that you can't find a compiler which will compile it
[02:19:02] <omegatron> I run everything through my code 'beautifier' anyway .. but the dependencies .. -_-
[02:20:09] <omegatron> the issue with rust is, that someone wants to shove a big binary blob from unknown source and quality down your throat, before you can start
[02:21:32] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 252 seconds)
[02:22:32] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[02:23:36] *** Joins: inlight (~inlight@157.42.205.240)
[02:23:36] *** Quits: inlight (~inlight@157.42.205.240) (Changing host)
[02:23:36] *** Joins: inlight (~inlight@user/inlight)
[02:23:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:25:45] <sham1> Rust to C compiler. Deoxit? That'd be a nice name
[02:26:52] *** Joins: immibis (~hexchat@62.156.144.218)
[02:28:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:29:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[02:31:45] <omegatron> maybe ...  WD-42 ?  =D
[02:32:53] *** Quits: pizdets (~pizdets@183.182.115.6) (Ping timeout: 256 seconds)
[02:33:49] *** Joins: pizdets (~pizdets@183.182.114.218)
[02:34:42] *** Joins: trafficjam (~trafficja@119.17.42.59)
[02:35:02] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:35:23] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:36:05] <trafficjam> hey guys, is a compiler basically a program that parses source code (i.e. extracts some structure from the source) and then converts it to machine code / binary (i know they're not the same thing)
[02:36:25] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[02:36:34] <omegatron> yes, basically
[02:36:44] <supakeen> if you told me that sentence i'd guess you mean a compiler
[02:36:46] <supakeen> so close enough
[02:36:51] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:37:57] <rsjw> in common english, a compiler is something or someone that brings disparate resources into one, but I'm not sure how these two meanings are historically related
[02:38:32] <omegatron> that sounds like anyone, who may marry two people
[02:38:34] <trafficjam> i guess each "disparate resource" are the different source files
[02:39:23] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:39:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:40:34] <sham1> Yeah, I'd say that the etymology is relevant
[02:40:38] <rsjw> trafficjam: yeah it seems to be but I don't have any reference that claims to that effect
[02:41:36] *** Quits: p0g0_ (~p0g0@216.211.153.38) (Quit: p0g0_)
[02:42:29] <trafficjam> Are compilers normally huge programs? i.e. > 1 million LOC?
[02:42:42] <trafficjam> for example anyone know how many LOC cc is?
[02:42:44] <omegatron> they come in any size
[02:42:53] <trafficjam> (cc is just a C compiler right?)
[02:43:25] <omegatron> https://en.wikipedia.org/wiki/Tiny_C_Compiler   this is quite a small C compiler
[02:43:27] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[02:43:32] <sham1> cc is the traditional name of a C compiler, yes
[02:43:53] <omegatron> today 'cc' is often just a symbolic link to gcc or clang
[02:44:34] <trafficjam> oh ok, thought it was a separate compiler
[02:44:58] <trafficjam> anyone know where the tcc source is located? can't seem to find it on the website
[02:45:38] <omegatron> https://bellard.org/tcc/
[02:45:40] <candide> Title of omegatron's link: TCC : Tiny C Compiler
[02:46:14] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b) (Read error: Connection reset by peer)
[02:46:26] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[02:46:27] <trafficjam> thanks
[02:46:49] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:47:49] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b)
[02:48:33] <cryptonector> sham1: that would be called Reducer
[02:48:47] <trafficjam> hmm seems like tcc is ~50K lines of code
[02:49:06] <omegatron> which IS small
[02:49:18] <sham1> It's been so long since I've thought about chemistry enough to remember that
[02:49:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:50:35] <trafficjam> tcc.c is itself 11K LOC and i have no idea what any of it does lol
[02:51:06] <omegatron> what do you want to achieve ?
[02:51:19] <omegatron> find the smallest still functional c compiler available ?
[02:51:30] <trafficjam> i want to build a compiler (that's the end goal anyway, first i need to learn C)
[02:51:59] *** Joins: snappy (~snappy@user/snappy)
[02:52:15] <omegatron> ... what the world, needs now, is love, sweet love (eh, sorry, I meant more compilers)
[02:52:32] <trafficjam> well the ultimate goal is to understand computer systems from the ground up
[02:52:35] <omegatron> but ok, if you want to learn from this, sure go ahead
[02:52:42] <cryptonector> trafficjam: find a project like Lua or a Lisp or Haskell or jq or some such
[02:52:51] <cryptonector> those are a great way to learn compilers
[02:53:10] <trafficjam> oh ok, thanks for the tip
[02:53:15] <trafficjam> might go with lisp then
[02:53:25] <trafficjam> what's the title of that famous lisp book?
[02:53:38] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[02:53:51] <omegatron> you ought to improve your google-fu
[02:53:55] <X-Scale> LiSP == Lisp in Small Pieces
[02:53:56] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[02:54:02] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[02:54:06] <rsjw> there are books dedicated to the topic of compiler construction
[02:54:22] <cryptonector> trafficjam: there's lots of ways to learn
[02:54:36] <cryptonector> you could dive in and learn theory later, or learn theory first and dive in later
[02:54:53] <omegatron> and no, I won't give you the source code of my purely bash-based c compiler  =D
[02:54:54] <cryptonector> the second part of either of those might never happen
[02:54:54] <sham1> Compiler theory is *heavy*
[02:55:06] <cryptonector> sham1: well, I meant programming language theory
[02:55:13] <cryptonector> but, close enough
[02:55:17] <sham1> Well that too
[02:55:23] <sham1> That's also heavy AF
[02:55:43] <trafficjam> i don't need to be an expert in the field, but at least have a good understanding of what's going on
[02:56:02] <cryptonector> it's... not that heavy
[02:56:38] <rsjw> afaik, programming language theory isn't used that much in compiler construction
[02:56:53] <rsjw> correct me if I'm wrong
[02:56:58] <cryptonector> LISP in Small Pieces is awesome, and I would also highly recommend Types and Programming Languages, by Bejamin C. Pierce
[02:56:59] <cryptonector> also
[02:57:14] <cryptonector> I highly recommend Paul Graham's On Lisp and Common Lisp
[02:57:26] <cryptonector> those two are very small books and very fun reads
[02:57:33] <cryptonector> and sometimes small and fun is best
[02:57:43] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:57:49] <cryptonector> because that can whet your appetitue for a deeper dive
[02:58:19] <cryptonector> Graham's books are out of print, but you can get the ebooks for free (I have print copies, originals at that, and very leafed)
[02:58:35] <omegatron> text -> list of words -> check for errors -> translate to ast -> check for other errors -> ... try to understand ... ->  if having a clue, generate machine code -> optimize if requested -> link if requested      yeah, compilers are simple enough
[02:58:38] <pragma-> I've been enjoying recently https://digitalcommons.newhaven.edu/cgi/viewcontent.cgi?article=1000&context=electricalcomputerengineering-books
[02:58:42] <rsjw> I found this lisp introduction extremely easy to read: https://www.cs.cmu.edu/~dst/LispBook/
[02:58:44] <candide> Title of rsjw's link: Common Lisp: A Gentle Introduction to Symbolic Computation
[02:58:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:59:33] <cryptonector> IMO the most important thing is to understand functions, closures, continuations -- once you got those three things, everything else will fit
[02:59:33] <pragma-> The book I linked is very easy to read and it explains things quite thoroughly.
[03:00:14] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[03:00:24] <cryptonector> also, compilers are really just very recursive programs, so once you have one working, extending it can be much much less work and very fun because once you get the new base cases working it all just works
[03:00:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:00:35] <cryptonector> which is why starting with an existing compiler is a good idea
[03:01:09] <cryptonector> that way you don't have to learn everything first in order to get started, and can just add a little feature, then a larger feature, then finally do your own thing
[03:01:32] <cryptonector> > i don't need to be an expert in the field, but at least have a good understanding of what's going on
[03:01:42] <cryptonector> all the more reason to just study one compiler or three
[03:01:50] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Read error: Connection reset by peer)
[03:01:57] <trafficjam> ok cool, i guess i'll focus on lisp for learning compilers then
[03:02:09] <trafficjam> is `Build your own Lisp` any good?
[03:02:10] <pragma-> I also recommend https://craftinginterpreters.com/
[03:02:17] <pragma-> It's easy to read as well.
[03:02:28] <pragma-> Not dense like the dragon book or pierce's book.
[03:03:05] <pragma-> read it for free: https://craftinginterpreters.com/contents.html
[03:03:06] <candide> Title of pragma-'s link: Table of Contents · Crafting Interpreters
[03:03:07] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[03:03:22] <trafficjam> ah i was thinking of SIOCP
[03:03:29] <pragma-> now that's a dense book
[03:03:36] <cryptonector> what's nice about Lisp is you can start with interpreters and build your way up to compilers.  LiSP covers that in tons of detail, starting with interpretation and adding more and more kinds of compilation as it goes
[03:03:38] <trafficjam> worth reading?
[03:04:29] <cryptonector> On Lisp or Common Lisp (I forget which of the two) shows how to use macros to build a toy Scheme in CL that has continuations by compiling into CPS, but doing so with a bit of help from the programmer
[03:05:28] <pragma-> SICP is highly regarded.
[03:06:08] <pragma-> Hm, SICP doesn't look as dense as I remember it being.
[03:06:36] <pragma-> I'm flipping through the pages on its website.
[03:06:57] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:07:08] <pragma-> I actually own the physical book and the teacher's companion to it.
[03:07:27] <pragma-> The book's typesetting is pretty compact and makes it look like there's a lot more information on each page than the website does.
[03:07:32] <trafficjam> that's a lot of books you guys have recommend, which should i start with? SICP or LispBook?
[03:07:43] <cryptonector> trafficjam: do you know Lisp?
[03:08:00] <cryptonector> if not, I say: start with On Lisp -- short, fun, sweet, you'll learn a lot
[03:08:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[03:08:04] <trafficjam> not much, i played around with it many years ago, although i do have some experience with functional languges
[03:08:04] <rsjw> I do think there's something to be said for the "dense" books like the dragon book or http://www.r-5.org/files/books/computers/compilers/writing/Keith_Cooper_Linda_Torczon-Engineering_a_Compiler-EN.pdf which go into how to parse things too, and not just deal with the syntax tree already formed like you would in lisp. parsing can be useful in many other contexts as well, because parsing is basically about reading hierarchially structured data
[03:08:07] <cryptonector> if yes then LiSP
[03:08:09] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[03:09:12] <cryptonector> ah yes, one of the nice things about Lisp is you don't need to know yacc/bison/any of that -- you can just hand-code a tokenizer and parser because recursive descent is perfectly fine
[03:10:16] <trafficjam> Build your own Lisp looks pretty good as well actually
[03:10:42] <trafficjam> Guess i'll do On Lisp -> SICP -> Build your own Lisp
[03:11:42] <trafficjam> thanks for the help guys
[03:11:53] <pragma-> build your own lisp seems more beginner friendly than sicp
[03:12:12] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:12:47] <cryptonector> trafficjam: have fun!
[03:13:55] <pragma-> "I want to teach people C... how can I do this... I know! I'll teach them how to make a lisp!"
[03:14:05] <trafficjam> pragma-: does SICP also teach you how to build a compiler?
[03:14:20] <pragma-> smh "Mike Tyson, your typical Lisp user"
[03:14:44] <trafficjam> my reasoning was that SICP would give me a good understanding of Lisp, and then building a compiler would be easier if i understood everything that's going on
[03:14:53] <pragma-> trafficjam: see for yourself what it teaches: https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%_toc_start
[03:14:54] <candide> Title of pragma-'s link: Structure and Interpretation of Computer Programs
[03:15:37] <trafficjam> well it has a small part on compilers at least
[03:15:41] *** Joins: karakedi (~eAC53C340@user/karakedi)
[03:15:45] <trafficjam> SICP is way lower level than i expected it would be
[03:16:27] <trafficjam> neat
[03:17:33] *** Quits: Akuli (~Akuli@87-94-110-193.bb.dnainternet.fi) (Quit: Akuli)
[03:17:43] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:03] <ferdna> i have this... const char *replaceIllegalChars(char *inStr){ }
[03:19:13] <ferdna> how do i append to inStr?
[03:19:23] <pragma-> I have such a love/hate relationship with programming language theory. It's a lot of fun thinking of clever ideas and concepts and then implementing them. Then after a few weeks of living in a cave working on your ideas, you stick your head out and look around and see that other people have done it already and so much better too.
[03:19:55] <omegatron> ferdna: depends on what inStr actually references ..
[03:19:57] <pragma-> Everybody's inventing the same languages over and over too.
[03:19:59] <ferdna> i am trying with strcat but it just doesnt work...
[03:20:13] <ferdna> omegatron, it is a string
[03:20:17] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[03:20:35] <omegatron> well, yes, but does it have enough space to hold your additional bytes ?
[03:20:37] <trafficjam> pragma-: lol i suppose there's only a certain amount of discovery possible when it comes to programming languages
[03:21:03] <slayne> quit
[03:21:05] <slayne> exit
[03:21:09] <slayne> lol bye
[03:21:11] *** Quits: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:21:49] *** Joins: rgrinberg (~textual@177.246.218.103)
[03:22:26] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:22:27] <ferdna> omegatron, ohhh
[03:23:38] <omegatron> C isn't a script language .. if you want to append some characters to others, you have to know/calculate the required length, allocate a memory chunk of this length and then copy, cat, whatever as you like, as long you stay inside this boundary - if you need more memory, you can use realloc
[03:24:44] <omegatron> C gives you complete control, but whit great power comes great responsibility  =D
[03:24:56] <omegatron> /whit/with/
[03:25:06] <jaeckel_> if you only write for GNU libc there's also `asprintf()` which helps a lot
[03:25:59] <cryptonector> pragma-: true; really, I want a Haskell that's a little bit stack happier (probably a variation on linear types), or a Rust that makes using the heap a bit less obnoxious
[03:26:08] <cryptonector> but I don't really want a new language
[03:26:14] <cryptonector> we have enough of those
[03:26:26] <cryptonector> then again, DSLs like jq come along and they're just _fun_
[03:26:48] <omegatron> are you sure? the alphabet has letters left for plenty of them
[03:27:14] <cryptonector> jaeckel_: it's trivial to implement asprintf() if you don't have a libc that sports it
[03:27:25] <cryptonector> omegatron: Unicode is large
[03:27:39] <jaeckel_> and if you combine that with `__attribute__((__cleanup__()))` your stream handling becomes a pleasure IMO
[03:27:49] <jaeckel_> s/stream/string/
[03:27:59] <trafficjam> what about EOPL?
[03:28:05] <cryptonector> then you're leaving C behind
[03:28:44] <omegatron> sure, let's expand to Unicode ... I call my next language Ⲥ  (Coptic Capital Letter Sima) !
[03:28:57] <omegatron> noone will see the difference
[03:29:14] <cryptonector> all you need is $40k to buy a seat at the UC and you're good to go omegatron
[03:30:49] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[03:30:55] <ferdna> omegatron, ohhh cool...
[03:30:59] <ferdna> i guess i have more reading to do
[03:31:01] <ferdna> thanks!
[03:31:06] <omegatron> sure
[03:31:43] *** Joins: pulse_ (~pulse@user/pulse)
[03:31:51] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[03:32:28] <trafficjam> hey guys, does a C compiler basically just convert c source code to the equivalent assembler code?
[03:32:29] <cryptonector> ferdna: well, any Unicode string processing in C is going to be _hard_
[03:32:43] <cryptonector> in any language, Unicode string processing is a very linear task
[03:32:45] <ferdna> really?
[03:32:49] <ferdna> ohhh
[03:32:50] <cryptonector> yes
[03:33:06] <cryptonector> you need to iterate all codepoints or glyphs (depending on what you're doing)
[03:33:07] <rsjw> pragma-: everybody tries to go more high level, but it doesn't seem to occur to anybody to go more low-level
[03:33:14] <omegatron> better use some of the available Unicode libraries ..
[03:33:36] <cryptonector> a codepoint can require more than a code unit in UTF-8 or UTF-16, and a glyph can require more than one codepoint in any case
[03:33:43] <cryptonector> (then there's grapheme clusters...)
[03:33:56] <trafficjam> i guess i need to understand assembly as well, further down the rabbit hole
[03:33:57] <rsjw> pragma-: I think there might be space to explore with a language that allows you to go more low level
[03:34:05] <cryptonector> what omegatron said -- use an off-the-shelf Unicode library
[03:34:06] <omegatron> yeah .. better use UTF-32 from the beginning!  =D
[03:34:16] <cryptonector> nah, UTF-32 is not worth it
[03:34:36] <apotheon> Please just use UTF-8.
[03:34:39] <cryptonector> you get to address codepoints randomly if you want, but you still don't get to address _characters_ randomly
[03:34:44] <omegatron> ... we are entering the age of 100 TB desktop pcs ...   -_-
[03:34:46] <cryptonector> yes, death to UTF-16
[03:34:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:37:31] *** Joins: missogra (~missogra@dynamic-095-116-219-141.95.116.pool.telefonica.de)
[03:38:28] <jaeckel_> if we're already down there... what should we do with `wchar_t`? ;)
[03:38:37] *** Quits: alch (~alch@151.36.31.19) (Ping timeout: 256 seconds)
[03:39:08] <omegatron> kill it, before it can procreate
[03:39:09] <twkm> most anything you can think do with a char.
[03:39:30] *** Quits: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:40:13] *** Joins: alch (~alch@151.36.68.2)
[03:41:29] *** Joins: haasn (~nand@haasn.dev)
[03:42:47] <trafficjam> should i use prototype functions or just define functions before `main`?
[03:42:51] *** Quits: missogra (~missogra@dynamic-095-116-219-141.95.116.pool.telefonica.de) (Quit: Leaving)
[03:42:56] <trafficjam> what's the convention?
[03:43:43] <omegatron> design a clean API in a header file (along with datatypes and constants), which you then include
[03:43:53] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[03:44:07] <twkm> you want prototypes even if the function precedes main.
[03:44:07] <trafficjam> ah, haven't learned about header files yet
[03:44:18] <trafficjam> oh ok, thanks
[03:45:18] <haasn> What actually happens in the function declaration `int foo(int a[10])`? Does this differ in any way whatsoever from `int foo(int *a)`?
[03:46:04] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:46:15] <haasn> I noticed that the compiler does not even warn me about `return a[20];`
[03:46:41] <trafficjam> does C use camelcase or underscores for variable and function names?
[03:46:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[03:47:02] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:47:02] *** Joins: masterbuilder (~user@user/masterbuilder)
[03:47:08] *** pulse_ is now known as pulse
[03:47:19] <omegatron> C identifiers have some rules, but otherwise, you what you want
[03:47:25] <omegatron> /you/use/
[03:47:32] <trafficjam> what do you use?
[03:47:36] <omegatron> though, they should be human readable
[03:47:47] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[03:47:57] <omegatron> underscore as a divider between words
[03:48:14] <omegatron> camelcase is hard to read with long identifiers
[03:48:41] <trafficjam> ok, so basically underscore for both variable and function names?
[03:49:21] <omegatron> consider   'output_HTTP_HTML_BODY_Invoice_Detail_TabView_Content_Sum_Create'   and  'outputHTTPHTMLBODYInvoiceDetailTabViewContentSumCreate'  as an example  =)
[03:49:39] <trafficjam> oh, so a combination of the two, interesting
[03:50:00] <omegatron> no, it was to show that camelcase is not good with long identifiers
[03:50:23] <omegatron> for variables I have another scheme
[03:52:32] <omegatron> but it's personal taste - just make it, so that in the end the code is readable by humans (the machine/compiler doesn't care for additional whitespace/characters)
[03:52:41] <trafficjam> fair enough
[03:53:05] <jaeckel_> what's the reasoning for defining an API in headers files if you don't need it? I'm with you and think a header file should (must) contain the API, but that's not necessarily all functions that exist.
[03:53:49] <omegatron> private functions can reside within the compilation unit (the *.c file), but should still be at the start of the file and just look like an public API
[03:53:59] <rsjw> haasn: they are the same. it first dimension of an array, when used as a function argument, is considered to be a pointer instead
[03:54:06] <jaeckel_> omegatron: +1
[03:54:10] <jaeckel_> and they should be statis
[03:54:18] <jaeckel_> s/statis/static
[03:54:19] <rsjw> s/it/the/
[03:54:26] <omegatron> so that, if you would compile with  -E   your pre-processed source file has a nice look-and-feel
[03:55:01] <trafficjam> am i unable to do an inline instantiation? for (int i = 0; ...)
[03:55:33] <omegatron> you can do that in C, but I wouldn't recommend it - I declare all variables at the start of a function
[03:55:49] <trafficjam> ok
[03:56:08] <omegatron> besides, I also always use variable identifiers of at least 4 characters length
[03:56:27] <omegatron> if you name a variable 'i' and want to perform some search-and-replace on your code ...   -_-
[03:56:42] <trafficjam> yeah good point
[03:57:04] <rsjw> s/function argument/function parameter/
[03:57:47] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[03:58:13] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:58:32] <jaeckel_> omegatron: but you're also only creating pretty short function bodys I guess?
[03:59:30] <omegatron> depends - but I try to avoid functions which are longer then the size of my screen in my editor ..  (about 120 lines)
[03:59:35] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[03:59:43] <omegatron> /size/height/
[04:01:26] <omegatron> if a function is longer and not just a large look-up-table for example, then I split it into logical sub-functions and call them .. this also makes logging/debugging easier, because I see the calls with the respective function parameters in my log files
[04:02:55] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[04:03:18] <jaeckel_> again +1 to what omegatron says, but I prefer to instatiate variables at their use, i.e. I use `for (size_t n = 0...)` or `char *foo = strdup(bar);` within the function body
[04:03:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:03:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:03:58] *** Joins: wroathe (~wroathe@user/wroathe)
[04:05:07] <trafficjam> is recursion usually slower than loops?
[04:05:29] <omegatron> calling functions has some overhead, sure
[04:05:45] <trafficjam> interesting, thansk
[04:05:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:07:21] <jaeckel_> oh that brings me to a question I don't know the answer to ... how does loop unrolling and recursion interact?
[04:07:39] *** Joins: Wulf (~Wulf@user/wulf)
[04:08:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:08:30] <jaeckel_> do compilers try to unroll bounded loops that call e.g. a static function?
[04:09:16] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[04:09:26] <omegatron> you mean like having in the end somethin like :   func1(), func1(), func1(), func1(), ... ?
[04:09:49] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[04:10:07] <omegatron> just not as a loop, but put each after the one before ..
[04:10:14] <jaeckel_> I mean like having in the end something like `instructions of func1() * n`
[04:10:35] <jaeckel_> without the function call overhead
[04:10:59] <omegatron> if fun1 is inline (and inlinable), they would (in most cases, I guess)
[04:11:19] <omegatron> don't know if loop unrolling would have the same effect
[04:11:53] <omegatron> but since -O3 is even more aggressive than -O2 and might include loop unrolling ..
[04:12:13] <omegatron> if you tell the compiler to squeeze out what's possible, it will try its best/worts
[04:12:16] <omegatron> worst
[04:13:31] <jaeckel_> cool
[04:14:36] <omegatron> that's why the llvm approach is quite interesting in contrast to gcc
[04:14:55] <omegatron> but they have both their positive and negative sides
[04:15:11] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:16:19] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:18:03] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:20:00] <jaeckel_> I would really like to continue this chat, but I have to go to bed :)
[04:20:25] <jaeckel_> nn
[04:20:27] <omegatron> o/
[04:21:57] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: Lost terminal)
[04:22:47] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[04:23:38] <jaeckel_> sorry, but it seems I missed that one ... what does o/ mean?
[04:23:47] <omegatron> *wave*
[04:24:11] <omegatron> a head, raising an arm to waive (to you)
[04:24:17] <jaeckel_> ty :) o/
[04:25:04] *** Quits: moberg1 (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[04:25:35] <omegatron> /waive/wave/    *sigh*  maybe I should quit today too
[04:25:36] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[04:28:45] <omegatron> on the other hand, listening to the Diablo II LoD soundtrack is just relaxing ..
[04:28:58] *** Joins: mven0 (~mven@ip68-104-39-54.lv.lv.cox.net)
[04:29:11] *** Joins: gco (~gco@2601:647:4c80:2424:418a:abd4:7537:fe66)
[04:29:19] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:29:56] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Read error: Connection reset by peer)
[04:29:57] *** mven0 is now known as mven
[04:32:14] <trafficjam> how can i stop this annoying "%" that always shows at the end of a program if i haven't appended a "\n" to printf?
[04:32:30] <trafficjam> ah it's caused by zsh
[04:33:41] <omegatron> sounds like you may want to change your program to always printf a NEWLINE before it exits
[04:34:02] <trafficjam> it's just ugly lol
[04:34:26] <omegatron> but you are not talking about the command prompt?
[04:34:49] <omegatron> which is configurable by changing the PS1 variable (at least in bash)
[04:35:31] <trafficjam> there is some difference between zsh and bash that causes a c program to output "%" if there is no newline character
[04:35:41] <trafficjam> bash doesn't have the issue
[04:35:47] <omegatron> I see
[04:35:51] <omegatron> strange shell
[04:35:53] <nomagno> Successfully abstracted over both SDL and X11/xcb/sndio with the same basic interface for RGBA5551 pixel blitting, input, and sound playing
[04:36:11] <nomagno> End result: Insanely portable software-rendered game engine getting closer!
[04:36:17] <omegatron> nice ...
[04:37:17] <omegatron> will this be some open-source software ?
[04:37:38] <nomagno> Ah yes, I'm pushing the changes tomorrow most likely
[04:37:39] <nomagno> https://gitea.com/Nomagno/Half-World
[04:38:53] <nomagno> I've been using public source forges as clear-window FLOSS personal project hosting for a while now
[04:39:05] <nomagno> Teaches you discipline and to keep your commits clean
[04:40:27] <trafficjam> is it possible to extract the digit components of a number without using strings? Not looking for a solution, but want to know if it's possible. For example, given the number "128", i want to extract the numbers 1, 2, and 8
[04:40:35] <trafficjam> Also needs to be without using arrays
[04:40:42] <omegatron> sure
[04:42:17] <omegatron> 128 % 10 -> 8, 128 - 8 -> 120, 120 / 10 -> 12, repeat
[04:42:41] <omegatron> I think you get the basic idea
[04:43:05] <omegatron> % is the Modulo operator
[04:43:09] <fizzie> (Well, 128 / 10 is also 12.)
[04:43:27] <trafficjam> how is 128 / 10  = 12?
[04:43:35] <omegatron> integer division
[04:43:35] <trafficjam> ah /, not %
[04:43:44] <nomagno> trafficjam: integer division in C truncates
[04:43:59] <trafficjam> got it, thanks
[04:45:29] <trafficjam> omegatron: awesome, thanks
[04:45:34] <trafficjam> very neat little algorithm
[04:47:18] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[04:47:32] *** Quits: rgrinberg (~textual@177.246.218.103) (Read error: Connection reset by peer)
[04:47:50] <trafficjam> is that quite a common algorithm in cs?
[04:48:17] *** Joins: Leonard (~Administr@114.55.127.80)
[04:48:26] *** Joins: mcinglis (~mcinglis@user/mcinglis)
[04:49:20] <omegatron> using modulo to prevent the loss of information when truncating integer division is involved is the usual approach
[04:50:13] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:51:53] <nomagno> omegatron: Already pushed, if you're interested (I develop from my phone often enough I never leave a single thing without pushing)
[04:52:10] <nomagno> I only pushed the part I'm sure is working properly though
[04:52:19] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:52:20] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:52:25] <omegatron> you .. write source code .. with your phone .. ?
[04:52:39] <nomagno> Yes, Termux
[04:52:45] <trafficjam> based
[04:52:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:52:51] <omegatron> that's disgusting and astonishing at the same time
[04:53:14] <nomagno> Eh, it's the results of months upon months of fine-tuning
[04:53:27] <omegatron> with a keyboard attached to the phone ?
[04:53:47] <nomagno> Sometimes, sometimes not. I do keep a wireless keyboard and OTG cable around
[04:54:00] <omegatron> ok, that's another case
[04:54:13] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[04:54:24] <nomagno> I do also edit with touchscren sometimes
[04:54:37] <trafficjam> omegatron: is there a name for that algorithm?
[04:55:14] <omegatron> aside from screen real estate, I would miss everything I like about sitting in front of my computer .. syntax coloring, text processing, etc. - not to mention, that i'm used to work with three keyboards and a mouse
[04:55:47] <nomagno> omegatron: I'm using termux, I use my regular CLI editor
[04:55:50] <nomagno> micro, in this case
[04:55:54] <nomagno> but also nano if need be
[04:56:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[04:56:45] <nomagno> I wouldn't complain too much if I had to get by on POSIX Vi with syntax coloring sprinkled
[04:56:45] <pragma-> heh, I read an article the other week that said that the vast majority of people on the internet these days are connected via mobile phones and tablets.
[04:57:13] <nomagno> Sounds about right
[04:57:34] <pragma-> Progress of the Eternal September
[04:57:49] <omegatron> trafficjam: don't know; but like there is http://oeis.org/ , I wouldn't be surprised if there is somewhere on the web a list of typical designations for typical algorithms
[04:57:50] <candide> Title of omegatron's link: The On-Line Encyclopedia of Integer Sequences® (OEIS®)
[04:58:10] <trafficjam> cool, thanks
[04:59:05] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Quit: Connection error?!)
[05:00:55] <omegatron> maybe this:  https://xlinux.nist.gov/dads/
[05:00:56] <candide> Title of omegatron's link: Dictionary of Algorithms and Data Structures
[05:01:56] <omegatron> but I guess many algorithms may have more than one designation, depending on who looks for them
[05:02:57] *** Quits: Brainium (~brainium@user/brainium) (Ping timeout: 240 seconds)
[05:03:45] <trafficjam> fair enough, i haven't really studied algorithms yet
[05:04:06] <trafficjam> is it possible to return multiple values from a function?
[05:04:21] <trafficjam> e.g. int func() { return 1, 2; }
[05:04:25] <omegatron> no
[05:04:48] <rsjw> but you can return a struct
[05:05:03] <omegatron> or you can return a pointer to whatever
[05:05:31] <omegatron> except function local variables
[05:05:33] <rsjw> or pass in a pointer to some memory and write to it in your function
[05:05:59] <trafficjam> damn, im trying to write that modulo function and want to pass the digits 1..n-1, n
[05:06:11] *** Joins: constxd (~brad@142.134.38.68)
[05:06:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:06:16] <trafficjam> i could write another function that returns the 1..n-1 component but it seems a bit wasteful
[05:06:51] <trafficjam> or could i just do n-1 / 10?
[05:06:55] <rsjw> of pass in a pointer to a pointer, allocate memory in your function, and assign the memory location pointed to by the pointer to pointer to have the value of the pointer to your allocated memory
[05:07:11] <rsjw> s/of/or/
[05:07:33] *** Quits: MrFantastik (~f@2607:f598:bbda:250:b0ab:6263:8d63:381b) (Remote host closed the connection)
[05:07:51] *** Joins: MrFantastik (~f@2607:f598:bbda:250:11ec:887:b829:c932)
[05:08:30] *** Quits: masterbuilder (~user@user/masterbuilder) (Read error: Connection reset by peer)
[05:08:40] <omegatron> as a side note, in case you see it in source code somewhere: such a pointer to a pointer is sometimes called a handle (mach kernel or certain microsoft software for example)
[05:08:45] *** Kit is now known as retrosenator2
[05:09:39] <nomagno> trafficjam: You can return a struct with an int array by value
[05:10:03] <trafficjam> nomagno: haven't learned about structs or arrays yet, so trying to do it without using them
[05:10:06] *** retrosenator2 is now known as Kit
[05:10:26] <omegatron> in your case, if you know you always want to return ten digits, you could just do   unsigned char * digits = calloc ( 10 ) ; calculate the digits and put into the array ; return the array ;
[05:11:32] <nomagno> Malloc'ed pointers are arrays, or are normally accessed with array semantics anyways. No way to escape arrays
[05:11:47] <nomagno> You can use pointer arithmetic, I guess
[05:12:04] <omegatron> well there is one:  use global/static variables and return nothing
[05:12:27] <nomagno> Also an option^
[05:12:54] <nomagno> Do return something. Then use protothreads to conquer the world!
[05:13:42] <nomagno> Oops sorry, miscalculated computing power of protothreads
[05:14:14] <nomagno> You could probably conquer the world with a hypercomputation turing machine that uses time loops, but that's a stretch
[05:14:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:14:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:14:58] *** Joins: wroathe (~wroathe@user/wroathe)
[05:15:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:16:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[05:16:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:19:12] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[05:19:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:20:11] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:24:53] <omegatron> *gnarf*  with all this involvement in this channel in the past 2 hours, i'm starting to write C syntax in this PHP file ..
[05:25:21] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[05:25:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:28:37] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[05:28:44] <trafficjam> abandon php, return to c
[05:29:44] <omegatron> believe me, I feel filthy, but it's a job for a customer and pays good
[05:29:51] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Quit: Leaving)
[05:29:52] <trafficjam> lol fair enough
[05:29:58] <omegatron> I hate php
[05:30:31] <omegatron> it's diametral to my love for c
[05:30:32] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[05:30:32] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[05:30:37] *** Parts: haasn (~nand@haasn.dev) (WeeChat 3.3)
[05:30:43] <trafficjam> is c your favorite language?
[05:30:55] *** Joins: kish` (~aqua@user/aqua)
[05:30:59] <omegatron> more or less
[05:32:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:33:30] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:35:08] *** Joins: malina (~malina@user/malina)
[05:35:42] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[05:36:05] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:38:00] <constxd> cringe
[05:38:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:40:47] <danielcamiel> mario
[05:46:54] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[05:47:02] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[05:47:25] *** Joins: kish` (~aqua@user/aqua)
[05:48:55] *** Joins: Leonard (~Administr@114.55.127.80)
[05:51:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[05:51:04] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8347:64cf:195d:8ed7:2d37:fded) (Quit: Leaving)
[05:53:01] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[05:54:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[05:55:08] *** Quits: sdk_ (~x@shell.codevoid.de) (Ping timeout: 268 seconds)
[05:56:23] <trafficjam> i didn't necessarily use to not like it, i just wasn't used to using such low level languages
[05:56:38] <trafficjam> but as i understand it more, it becomes more enjoyable
[05:57:12] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Client Quit)
[05:57:43] *** Joins: Quest32 (~idiot@c-71-236-47-182.hsd1.tn.comcast.net)
[05:57:45] <Quest32> hey
[05:58:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[05:58:13] <Quest32> i'm registering multiple sighandlers using the signal(...) function from signal.h, but it seems only the first signal registered is actually set
[05:58:28] <Quest32> is this true? if not, are there some possible things that could cause this?
[05:59:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:59:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:59:22] *** Joins: wroathe (~wroathe@user/wroathe)
[06:00:33] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[06:02:37] *** Joins: fe23 (~fe23@2409:8a34:464:4990:b57e:2147:9c70:8fe4)
[06:02:43] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[06:03:27] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:06:35] <omegatron> is there a specific reason why you use signal() instead of sigaction() ?
[06:06:38] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f0a6)
[06:06:43] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[06:07:33] <danielcamiel> constxd: const car star const
[06:07:57] *** Joins: manjaroi3 (~manjaro-i@125.131.114.50)
[06:08:15] <Quest32> omegatron: i used it because it seemed there were less places to mess up
[06:08:27] <Quest32> does signal() have a limitation?
[06:08:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:09:11] <omegatron> according to my man page, it has portability issues and various across unix and linux versions
[06:09:23] <Quest32> omegatron: hmm, okay
[06:09:24] <omegatron> .. and should be avoided
[06:09:47] <omegatron> just saying ..  I don't want to discourage you to use signal()
[06:10:05] <Quest32> well, it's not working, so might as well
[06:11:12] <omegatron> are you registering multiple handlers for different signals or the same signal ?
[06:12:13] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[06:12:36] <Quest32> different signals
[06:13:08] <Quest32> well, i have a single handling function, but it reads the sigid and acts accordingly
[06:13:14] <trafficjam> wow there's no array.size function in C?
[06:13:38] <Quest32> trafficjam: depends on waht you want to do
[06:13:52] <trafficjam> trying to iterate over an array
[06:13:55] <Quest32> if you want to get the number of elements, sizeof arr / sizeof arr[0]
[06:15:23] <trafficjam> ah thanks
[06:16:29] *** Quits: gce108_ (~gce@64-250-5-223.gvec.net) (Quit: Leaving)
[06:17:30] *** Joins: gce108 (~gce@user/gce108)
[06:17:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:18:33] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[06:19:37] <Quest32> hmm, now the signals arn't registered at all
[06:20:05] <dodobrain> Quest32, might be useful to paste a testcase of your code somewhere
[06:20:29] *** Joins: loganlee (~Thunderbi@user/loganlee)
[06:21:01] <Quest32> https://ttm.sh/e-z.txt here you go
[06:21:23] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:21:38] <Quest32> ptr->signal is an int with the signal code
[06:24:04] <omegatron> shouldn't it be    sigaction(ptr->signal, action, NULL);    to install your handler?
[06:24:34] *** Quits: gco (~gco@2601:647:4c80:2424:418a:abd4:7537:fe66) (Quit: ZZZzzz…)
[06:25:25] <Quest32> yeah, it should, but it seems that I have the same issue as before
[06:25:50] <Quest32> i'm registering signals 31 and 7, in that order
[06:26:05] <Quest32> and killing with -31 does work, but -7 gets no response
[06:26:24] <Quest32> so the signalhandler does work
[06:28:06] <Quest32> just not sure why it doesnt
[06:28:48] <omegatron> hm, strange
[06:29:41] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 268 seconds)
[06:29:47] *** Joins: critr (~critr@user/critr)
[06:31:05] <Quest32> btw I was using this page https://www.gnu.org/software/libc/manual/html_node/Sigaction-Function-Example.html
[06:31:11] *** Joins: joo-_ (~joo-_@87-49-147-115-mobile.dk.customer.tdc.net)
[06:31:11] *** Quits: joo-_ (~joo-_@87-49-147-115-mobile.dk.customer.tdc.net) (Changing host)
[06:31:11] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[06:33:09] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:32] <trafficjam> what's the difference between `&value` and `value`?
[06:35:34] <omegatron> signal 7 is SIGBUS (at least here) - is it possible at all to generate that manually?  meaning, it maybe is only recognized when the kernel issues it
[06:35:56] <omegatron> but the man page should contain such information ..
[06:35:59] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[06:36:06] <Quest32> omegatron: um yeah, kill -7 <pid>
[06:36:07] *** Quits: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[06:36:12] <Quest32> trafficjam: where?
[06:36:35] <trafficjam> just generally
[06:36:46] <Quest32> where do you see it
[06:37:02] <Quest32> oh, &value is a pointer to value
[06:37:04] <nicode> trafficjam: &value is a pointer to value
[06:37:07] <omegatron> yeah, I know the kill command, but last time I did a similar thing, I remember that despite I could give the kill any number, my test program didn't receive all of them, too
[06:37:21] <Quest32> omegatron: hmm, hold up
[06:37:27] <trafficjam> and a pointer returns the address of the object?
[06:37:30] <omegatron>  s/the kill/the kill program/
[06:37:44] <nicode> trafficjam: correct
[06:38:05] <Quest32> so my signals are now sig 31 (SIGSYS, known working from kill) and sig 10 (SIGUSR1)
[06:38:07] <trafficjam> so why does scanf use a pointer to set the value of the object and not the object itself?
[06:39:08] <trafficjam> i.e. why scanf("%d", &value) and not scanf("%d", value);
[06:39:12] <Quest32> trafficjam: it needs the address to modify, instead of the actual value
[06:39:14] <nicode> trafficjam:  because variables/objects are passed by value when you supply them as function parameters
[06:39:57] <Quest32> re: previous only 31 works, it was initialized first
[06:40:01] <Quest32> this is a puzzler
[06:40:09] <nicode> if you want a function to modify a variable you need to pass it a reference.
[06:40:22] <trafficjam> oh i get it, thanks guys
[06:40:23] <Quest32> if I change the initialization order, now sig10 works
[06:40:37] *** Joins: Leonard (~Administr@114.55.127.80)
[06:41:04] <trafficjam> so when i do `value = a`, all that does is change where the identifier `value` is pointing towards?
[06:41:20] <trafficjam> (i.e. it changes it to the address of `a`)
[06:41:22] <Quest32> no
[06:41:52] <Quest32> the variable value is set to the value of a
[06:42:12] <Quest32> if you want it set to the address of a, `value = &a`
[06:42:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[06:42:19] <omegatron> side note:  scanf("%d", &value) ;    wouldn't be a good idea anyway .. you want to use  "%p"  most likely, if you want to see the address of a variable or the contents of a pointer
[06:42:19] <trafficjam> oh ok
[06:42:46] <omegatron> man 3 printf    shows all the format specifiers
[06:43:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[06:43:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[06:44:00] <Quest32> follow up with the signal() fiasco: does anyone have any idea on this?
[06:44:07] <dodobrain> Quest32, wheres your testcase?
[06:44:35] <dodobrain> lemme give you a testcase
[06:45:01] <nicode> Can someone explain what lines 120 and 121 are doing in the following? Specifically what does ##name do on line 121? I gather it's a substitution of some sort but I haven't learned the ## syntax yet https://github.com/FFmpeg/FFmpeg/blob/3a9861e22c636d843c10e23f5585196d1f3400dd/libavfilter/af_silencedetect.c#L120
[06:45:03] <Quest32> dodobrain: i posted it earlier
[06:45:15] <dodobrain> no, thats part of a testcase
[06:45:32] <omegatron> nicode: text concatenation of the c preprocessor
[06:46:24] <nicode> omegatron: ok, so how do I find what it's concatenating?
[06:47:21] <omegatron> well, the macro's parameters
[06:47:26] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:47:27] <nicode> I see
[06:47:50] <nicode> I'll go back and read up on macro's then, thx omegatron.
[06:47:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[06:48:02] <omegatron> line 153 would yield    static void silencedetect_dlb(SilenceDetectContext .....
[06:48:24] <omegatron> eh,   static void silencedetect_dbl( ...       of course
[06:48:44] <omegatron> and the next line    static void silencedetect_flt(SilenceDetectContext   ....
[06:49:14] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[06:49:25] <nicode> ok, so it's inserting the type where ##name was up above (e.g. line 121), right?
[06:50:45] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[06:51:01] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[06:51:06] <omegatron> ##name  is replaced by the value of the  'name' parameter, when the macro is replaced by the preprocessor ; as it would be with 'type' in line 140 for example. the reason why '##' is used in line 135 is, because there is no whitespace before 'name'
[06:51:49] <dodobrain> Quest32, http://sprunge.us/zqvwYe
[06:51:49] <Quest32> dodobrain: https://0x0.st/ozMa.c
[06:51:52] <Quest32> here's the testcase
[06:51:55] <Quest32> oh
[06:51:55] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[06:51:56] <Quest32> what
[06:52:06] <dodobrain> lol
[06:52:08] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Read error: Connection reset by peer)
[06:52:09] *** Joins: soapsudsxx_ (~soapsudsx@141.193.188.151)
[06:52:52] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:01] <Quest32> dodobrain, so we have a structure with a module name and the cooresponding signal, and the function create_sighandler_from_table registers all the sighandlers in the table to sighandle, which does basically a switch(...) case on the signal recived to determine the module to execute
[06:53:26] <Quest32> aha, I see the problem with the sigaction
[06:55:01] <Quest32> okay, so I modified the code, and it has the same problem
[06:55:46] <Quest32> here's the modification, dodobrain https://0x0.st/ozMS.c
[06:55:46] *** Joins: Satin (uid193953@user/Seten)
[06:57:49] *** Joins: emacspenguin (~emacspeng@45.144.113.83)
[06:58:06] <emacspenguin> how do I check my battery percentage in c
[06:58:13] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-92.cspire.com) (Read error: Connection reset by peer)
[06:58:38] <omegatron> use a library which provides such a function ..
[06:58:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:59:22] <emacspenguin> omegatron: do you know of one?
[06:59:33] <omegatron> which OS?
[06:59:47] <Quest32> emacspenguin: if you're on linux, read /sys/class/power_supply/<bat>/capacity
[06:59:59] <nitrix> On Windows you #include <winbase.h> and use GetSystemPowerStatus().
[07:00:19] *** Joins: Leonard (~Administr@114.55.127.80)
[07:00:24] <omegatron> on mac you use the sysctl API
[07:01:02] <emacspenguin> TY, I did not know that it was just a file! That is really cool!
[07:01:36] <Quest32> on unix, "everything is a file"
[07:02:33] <Quest32> dodobrain: I fail to see how the your code handling sighandlers and mine is functionally different
[07:02:45] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[07:02:55] <Quest32> the only real difference is the implimentation of the registration; I'm looping over elements and you're just outright naming them
[07:03:06] <dodobrain> ,testcase
[07:03:06] <candide> A testcase is a minimal, compilable, runnable example exhibiting your symptoms. "Minimal" means just the bare essentials required to illustrate your question. "Compilable and runnable" means that there is enough code to compile, link, and execute it on our machines, and therefore use our debuggers. Please paste a testcase at http://ideone.com or http://codepad.org to help us assist you.
[07:03:28] *** Joins: Everything (~Everythin@37.115.210.35)
[07:03:47] <dodobrain> anyway, reduce out the garbase in your testcase and hardcode a stand-in "table" and see what happens
[07:04:14] *** Quits: emacspenguin (~emacspeng@45.144.113.83) (Quit: WeeChat 3.4)
[07:05:01] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[07:05:35] <dodobrain> please keep in mind about testcases in the future.. some people on irc have issues when a testcase is pasted and it cannot be compiled :)
[07:10:44] <Quest32> dodobrain: thanks, I made a testcase, and the problem solved itself :)
[07:11:01] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[07:11:13] <dodobrain> wonderful, hope some of the advantage of a proper testcase have become evident :)
[07:11:14] *** Joins: frost (~frost@user/frost)
[07:11:38] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[07:12:10] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[07:12:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[07:13:02] *** Joins: cpuid (~cpuid@co5.at)
[07:13:02] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[07:13:02] *** Joins: cpuid (~cpuid@user/cpuid)
[07:13:17] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[07:14:20] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:15:16] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:16:17] *** Quits: MrFantastik (~f@2607:f598:bbda:250:11ec:887:b829:c932) (Ping timeout: 240 seconds)
[07:16:37] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-92.cspire.com)
[07:16:51] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:17:37] *** Joins: RAMIII (~ramiii@2601:8c:801:c600::f02a)
[07:17:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:20:42] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[07:21:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[07:21:56] <Quest32> okay, i'm back to my old problem again
[07:22:41] <Quest32> the testcase works, but in application, my code does not
[07:22:53] <Quest32> and the values i'm passing to it are exactly the same
[07:23:02] *** Joins: constxd (~brad@142.134.38.68)
[07:23:33] <twkm> so there's some other difference you didn't include in the test case.
[07:24:55] <Quest32> yup, i'm dumb
[07:28:39] <Quest32> oh my goodness, i'm dumber than I thought
[07:33:25] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:34:00] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[07:35:02] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:35:08] *** Joins: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:35:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:35:58] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:37:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:37:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:38:13] *** Quits: alch (~alch@151.36.68.2) (Ping timeout: 240 seconds)
[07:40:28] *** Joins: alch (~alch@151.36.61.200)
[07:41:49] *** Quits: Quest32 (~idiot@c-71-236-47-182.hsd1.tn.comcast.net) (Quit: WeeChat 3.0)
[07:42:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:43:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[07:48:53] *** Joins: Leonard (~Administr@114.55.127.80)
[07:51:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:51:11] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:55:03] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[07:55:27] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[07:57:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:59:24] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:1e3:2fc9:933:23f2)
[08:00:35] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 250 seconds)
[08:02:41] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[08:05:49] *** Quits: moog (~moog@107.126.53.244) (Remote host closed the connection)
[08:07:14] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:09:24] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:09:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[08:10:43] *** Joins: shric (~chris@ip-103-85-39-45.syd.xi.com.au)
[08:11:58] <shric> morning
[08:12:53] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:12:58] <dave0> maw
[08:15:41] *** Joins: davros (~davros@host86-185-61-39.range86-185.btcentralplus.com)
[08:15:48] *** Quits: RAMIII (~ramiii@2601:8c:801:c600::f02a) (Quit: Konversation terminated!)
[08:18:55] *** Joins: Leonard (~Administr@114.55.127.80)
[08:21:23] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:21:39] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:22:39] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[08:22:47] *** Joins: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[08:23:11] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:29:05] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[08:31:14] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:35:33] *** Quits: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:41:25] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[08:42:04] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[08:44:05] *** Joins: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[08:44:26] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:45:11] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:45:35] <trafficjam> what is the syntax for accepting a multidimensional array of unknown size in a function?
[08:45:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:45:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:45:59] *** Joins: wroathe (~wroathe@user/wroathe)
[08:47:17] <shric> There's no such syntax
[08:47:47] <trafficjam> so how do i achieve the equivalent?
[08:48:01] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:48:57] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:49:41] *** Joins: DnaDno (~DnaDno@pool-151-200-246-144.washdc.fios.verizon.net)
[08:50:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[08:50:15] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[08:50:18] <trafficjam> surely people need to pass unknown sized arrays between functions no?
[08:50:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[08:50:35] *** Quits: DnaDno (~DnaDno@pool-151-200-246-144.washdc.fios.verizon.net) (Client Quit)
[08:51:05] <rsjw> you can pass it as one long flat array and do the indexing arithmetic yourself
[08:51:40] <rsjw> or you could change data structures and use an array of pointers instead, where each pointer points to a one dimensional array
[08:51:53] <trafficjam> er so [[1,2,3], [4,5,6]] becomes [1,2,3,4,5,6] as well as some index array? (telling you where to split it)
[08:52:13] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:52:45] <rsjw> if you have int myarray[3][3] = {{1,2,3},{4,5,6}}; then that is already laid out in memory in a defined way.
[08:53:15] <trafficjam> that was an example, it could also be a 3x3 matrix
[08:53:43] <trafficjam> as in a 3 dimensional matrix
[08:53:55] <rsjw> err yeah. int myarray[2][3] = { ... }
[08:54:41] <dave0> trafficjam: you can use VLA variable length array to achieve that..  int foo(int width, int height, int array[width][height])
[08:55:05] <rsjw> the elements in an array are all right next to each other, in order, so it'd be 1,2,3,4,5,6 in memory
[08:55:36] <dave0> trafficjam: i prefer the earlier way of an array of pointers
[08:56:24] <rsjw> so if int *p = &myarray[0][0];, then myarray[i][j] == p[i*sizeof(myarray[0]) + j]
[08:56:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[08:56:38] <trafficjam> hmm ok, and also how do i define a return type of int array[2][3]?
[08:56:48] <trafficjam> `int [2][3]` doesn't seem to work
[08:57:05] <trafficjam> i.e. `int [2][3] myFunc()`
[08:57:11] <dave0> int foo(int width, int height, int **array)       int y[10*20]; int *x[10]; for(a=0; a<10; a++) x[a] = &y[a*20]; foo(10, 20, x);
[08:57:32] <dave0> trafficjam: can't return arrays... can wrap them in a struct, or return pointer-to-pointer
[08:57:39] <rsjw> why would you need to return it? you're not passing it to the function by value
[08:58:12] <trafficjam> for my `int [2][3] addMatrices(int a1[2][3], int a2[2][3]);` function
[08:58:33] *** Joins: kurahaupo1 (~martin@115.69.27.211)
[08:58:42] <dave0> trafficjam: usual way for that is pass a "result" matrix as an argument ie. one that will be filled in
[08:58:57] <trafficjam> ah ok
[08:59:21] <dave0> trafficjam: int addmatrices(int a[2][3], int b[2][3], int result[2][3]) { result[x][y]=a[x][y]+b[x][y] };
[09:00:11] <rsjw> if you do void f(int a1[2][3]); then only the first dimension is unknown, but the second dimension is fixed. a peculiarity of C makes it such that the prefious function is equivalent to void f(int (*a1)[3]);
[09:00:22] <rsjw> *previoud
[09:00:25] <rsjw> *previous
[09:00:50] <kurahaupo1> (Matrices and multiprecision arithmetic seem like the ideal use-case for C++, where you can do ordinary arithmetic on types that are not built-ins. Having to do object management in client code just to do math sucks.)
[09:01:19] *** Joins: gco (~gco@2601:647:4c80:2424:418a:abd4:7537:fe66)
[09:01:20] <trafficjam> don't a lot of c programs have this requirement though?
[09:02:08] <dave0> i thought fortran was the go-to langauge for fast parallel math stuff
[09:02:20] <dave0> parallel or vector or whatever
[09:02:31] <kurahaupo1> trafficjam: They do, because it's inherent in using C. I don't like C++ a lot of the time, but for advanced maths it's a lot cleaner than C
[09:02:35] <wroathe> Nah. Pretty sure PHP is the standard.
[09:02:43] <wroathe> You can trust me. I'm a scientist.
[09:03:07] <dave0> i'm wearing a lab coat with a stethescope around my neck, you should listen to me
[09:03:09] <kurahaupo1> wroathe: if you like PHP, obviously you're a botanist
[09:03:18] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[09:03:34] * kurahaupo1 wonders why dave0 has a lab coat around his neck
[09:03:35] <trafficjam> we'll i'm never going to learn c++, so it's either go or rust if i ever need to do a lot of matrix coding
[09:03:51] <trafficjam> don't a lot of python data libraries use c libraries under the hood though?
[09:03:57] <trafficjam> like numpy, pandas, etc
[09:04:09] <trafficjam> and they all have matrix algebra functionality
[09:05:18] <kurahaupo1> trafficjam: you don't really need to "learn" C++; you can (almost) code exactly as if it's C (well, C89), and treat Matrix<double,3,3> as if it was a built-in arithmetic type
[09:05:36] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600::d434)
[09:05:49] <trafficjam> ah so c++ is a superset of C?
[09:06:15] <kurahaupo1> trafficjam: It was very close to that in C89, but they've diverged since.
[09:07:26] <wroathe> I have no context on this, but what's stopping you from adding matrices in C?
[09:08:10] <dave0> he's having trouble passing variable sized arrays to the function
[09:08:35] <wroathe> Has he considered passing the lengths along with the arrays?
[09:09:00] <trafficjam> yeah someone suggested that earlier, i'm just not used to having to do this sort of thing
[09:09:09] <trafficjam> coming from a dynamic language background
[09:10:09] <wroathe> trafficjam: For ergonomics you can define a struct that contains the length and either a pointer to an array or a flexible array member
[09:10:35] <wroathe> Then you'd just need to define routines to initialize objects of that struct type, and routines that define the operations you can perform on it
[09:10:54] <trafficjam> would you mind pasting an example? I still haven't covered structs yet in my studies of C
[09:11:12] <kurahaupo1> If you're passing the dimensions as separate parameters, you can just use double* or double _Complex* for the data parameters. And of course, to do a matrix multiplication, you only need 3 dimension parameters.
[09:11:13] *** Joins: Leonard (~Administr@114.55.127.80)
[09:12:33] <wroathe> Well, I'm not mathy, but for a single dimension it'd be something like struct array { size_t length; double *items; }
[09:12:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:13:01] <wroathe> Or struct array { size_t length; double items[]; } for a flexible array member approach
[09:13:23] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[09:13:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:13:49] <wroathe> Or you could define a matrix struct
[09:14:19] <wroathe> A struct is just a grouping of fields of potentially disparate types in an order, and so it's really up to you
[09:16:48] *** Joins: kadavul (~vazha@103.165.21.189)
[09:18:53] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:19:08] *** Quits: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:19:27] *** Joins: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[09:19:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[09:22:09] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:24:44] <dave0> ,cc void add(int W, int H, double a[W][H], double b[W][H], double r[W][H]) { for(int x=0; x<W; x++) for(int y=0; y<H; y++) r[x][y] = a[x][y] + b[x][y]; } int main(void) { double test[2][2] = { {1.0,2.0},{3.0,4.0} }, r[2][2]; add(2, 2, test, test, r); printf("%f %f %f %f ", r[0][0],r[1][0],r[0][1],r[1][1]); return 0; }
[09:24:46] <candide> dave0: 2.000000 6.000000 4.000000 8.000000
[09:24:47] *** Joins: ts (~ts@114.254.0.140)
[09:24:55] <dave0> it's a lot of code but it works
[09:25:07] *** ts is now known as Guest3672
[09:26:41] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[09:27:07] <trafficjam> oh neat, you can pass parameters into other parameters in a function
[09:27:35] <trafficjam> so this function will take any sized 2D arrays?
[09:28:13] <dave0> yep
[09:28:57] *** Quits: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:29:00] <trafficjam> sweet
[09:35:37] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 256 seconds)
[09:35:37] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:36:21] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:36:36] *** fluter- is now known as fluter
[09:36:43] *** Joins: Leonard (~Administr@114.55.127.80)
[09:39:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:41:54] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[09:42:13] *** Quits: kadavul (~vazha@103.165.21.189) (Ping timeout: 240 seconds)
[09:42:18] *** Joins: k4davul (~vazha@103.165.21.189)
[09:46:47] *** Joins: Mentor (~Ionut@92.86.217.127)
[09:47:05] *** Quits: Mentor (~Ionut@92.86.217.127) (Client Quit)
[09:47:20] *** Joins: Mentor (~Ionut@92.86.217.127)
[09:47:39] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[09:48:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:49:47] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[09:50:28] *** Quits: gco (~gco@2601:647:4c80:2424:418a:abd4:7537:fe66) (Quit: ZZZzzz…)
[09:52:11] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:52:45] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[09:54:18] *** Joins: ts_ (~ts@114.254.0.140)
[09:56:28] *** Quits: Guest3672 (~ts@114.254.0.140) (Read error: Connection reset by peer)
[09:56:47] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:57:32] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[09:58:57] *** Quits: k4davul (~vazha@103.165.21.189) (Ping timeout: 240 seconds)
[10:00:34] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[10:02:00] *** Joins: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr)
[10:03:38] *** Joins: ReimuHakurei (~Reimu@2607:5600:26d:4:de:ad:be:ef)
[10:05:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:06:08] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[10:07:27] *** Joins: Leonard (~Administr@114.55.127.80)
[10:08:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:08:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:09:25] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[10:13:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:15:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:15:54] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Read error: Connection reset by peer)
[10:16:58] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[10:18:13] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[10:22:12] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:22:24] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[10:24:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:25:41] *** Joins: Leonard (~Administr@114.55.127.80)
[10:26:05] *** Quits: Fairy (~Fairy@ti0004a400-3806.bb.online.no) (Ping timeout: 252 seconds)
[10:26:25] *** Joins: teepee (~teepee@openscad/teepee)
[10:27:05] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600::d434) (Ping timeout: 268 seconds)
[10:28:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:28:54] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:28:59] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[10:33:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[10:35:37] *** Quits: ReimuHakurei (~Reimu@2607:5600:26d:4:de:ad:be:ef) (Ping timeout: 240 seconds)
[10:37:16] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[10:37:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:39:01] *** Quits: manjaroi3 (~manjaro-i@125.131.114.50) (Ping timeout: 240 seconds)
[10:40:11] *** Joins: Leonard (~Administr@114.55.127.80)
[10:40:55] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 256 seconds)
[10:42:29] *** Joins: Betal (~Betal@user/betal)
[10:42:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:43:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[10:43:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[10:43:49] *** Joins: ts__ (~ts@114.254.0.140)
[10:46:27] *** Quits: ts_ (~ts@114.254.0.140) (Ping timeout: 256 seconds)
[10:47:40] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:47:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:47:59] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[10:48:21] *** Quits: soapsudsxx_ (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[10:49:46] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:49:53] *** Joins: hiovoltage50 (~hiovoltag@78.186.68.182)
[10:51:37] *** Quits: Teckla (~Teckla@user/teckla) (Ping timeout: 240 seconds)
[10:52:41] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[10:53:41] *** Joins: kadavul (~vazha@103.165.21.189)
[10:53:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:54:05] *** Joins: k4davul (~vazha@103.165.21.189)
[10:57:49] *** Quits: kadavul (~vazha@103.165.21.189) (Ping timeout: 240 seconds)
[10:58:15] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.214)
[10:58:42] <trafficjam> why does an allocated array's elements have a reverse address order?
[10:59:08] <pony> wdym
[10:59:51] <trafficjam> ah maybe not... when i print the addresses of int array[5] = {1,2,3,4,5}, i get -1281818320
[10:59:52] <trafficjam> -1281818316
[11:00:09] <trafficjam> -1281818320, -1281818316, -1281818312, ...
[11:00:26] <trafficjam> not sure why addresses have a negative as well
[11:00:30] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:00:54] <trafficjam> i guess that makes it in the correct order, but i don't understand why the addresses have negative values
[11:02:22] <pony> the correct format specifier would be %p
[11:05:25] *** Joins: Leonard (~Administr@114.55.127.80)
[11:07:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[11:07:35] <trafficjam> ah of course, thanks pony
[11:07:54] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:08:58] <pony> what are you trying to do?
[11:09:05] <dave0> addresses are sort of unsigned, but amd64 is a bit weird
[11:10:16] <dave0> if i ever print out addresses it's usually in hex and usually without a sign
[11:10:38] <pony> well pointers aren't even numbers
[11:10:45] <dave0> see hexdump -C
[11:10:53] <pony> and you'll get bitten if you assume they behave as such
[11:11:22] <dave0> at the machine level they're just a pattern of bits
[11:12:10] <dave0> probably the most common place you'd see raw addresses is in the debugger
[11:12:50] <dave0> maybe if you looked at the assembly output    gcc -S prog.c
[11:15:23] *** Joins: manjaroi3 (~manjaro-i@125.131.114.50)
[11:15:39] <dave0> trafficjam: if you're learning c it might be worthwhile looking at pointers and addresses just to see what's going on, but most of the time you don't concern yourself with it, c abstracts them away for you
[11:16:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.214) (Ping timeout: 256 seconds)
[11:19:19] *** Joins: ihopeyourot (~ihopeyour@31.142.224.22)
[11:19:32] *** Quits: ihopeyourot (~ihopeyour@31.142.224.22) (Remote host closed the connection)
[11:21:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:23:11] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[11:24:13] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[11:27:40] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[11:28:15] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:29:18] *** Joins: ts_ (~ts@114.254.0.140)
[11:31:37] *** Quits: ts__ (~ts@114.254.0.140) (Ping timeout: 240 seconds)
[11:34:56] *** Quits: beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.3)
[11:35:16] *** Joins: Beastie (~lcu@user/thebeastie)
[11:35:21] *** Joins: Leonard (~Administr@114.55.127.80)
[11:35:33] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[11:35:37] *** Quits: alch (~alch@151.36.61.200) (Read error: Connection reset by peer)
[11:35:58] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:36:53] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:37:49] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[11:37:50] *** Joins: vikn (~vikn@46-162-82-40.cust.bredband2.com)
[11:37:58] *** Joins: boB_K7IQ (~boB_K7IQ@c-67-161-96-40.hsd1.wa.comcast.net)
[11:39:42] *** Joins: alch (~alch@151.38.69.109)
[11:40:53] *** Joins: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr)
[11:42:10] *** Quits: vikn (~vikn@46-162-82-40.cust.bredband2.com) (Remote host closed the connection)
[11:43:15] *** Quits: k4davul (~vazha@103.165.21.189) (Ping timeout: 256 seconds)
[11:44:56] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:45:25] *** Joins: kadavul (~vazha@103.165.21.189)
[11:46:04] *** Joins: k4davul (~vazha@103.165.21.189)
[11:47:18] *** Quits: k4davul (~vazha@103.165.21.189) (Client Quit)
[11:47:38] *** Joins: mrig (~mrig@user/mrig)
[11:47:51] *** Joins: Rounin (~david@84.212.130.215)
[11:48:10] *** Joins: fz (~fz@2408:844e:53e0:cb6:7111:b663:b1fa:2f95)
[11:48:44] *** Joins: Teckla (~Teckla@user/teckla)
[11:48:56] *** Quits: fz (~fz@2408:844e:53e0:cb6:7111:b663:b1fa:2f95) (Quit: Leaving)
[11:48:58] *** Joins: strajder (~strajder@user/strajder)
[11:49:25] *** Quits: kadavul (~vazha@103.165.21.189) (Ping timeout: 240 seconds)
[11:49:47] *** Joins: aradesh (~aradesh@user/aradesh)
[11:55:20] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:58:56] *** Joins: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net)
[11:59:20] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[11:59:53] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[12:00:08] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:01:26] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[12:01:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[12:03:35] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:04:31] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[12:05:19] *** Joins: sdk_ (~x@shell.codevoid.de)
[12:05:38] *** Joins: stonkey (~stonkey@user/stonkey)
[12:06:48] *** Quits: Tempesta (~Tempesta@user/tempesta) (Read error: Connection reset by peer)
[12:09:11] *** Joins: Tempesta (Tempesta@183.98.39.112)
[12:09:12] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[12:09:12] *** Joins: Tempesta (Tempesta@user/tempesta)
[12:09:13] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[12:10:24] *** Joins: Tempesta (Tempesta@183.98.39.112)
[12:10:25] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[12:10:25] *** Joins: Tempesta (Tempesta@user/tempesta)
[12:10:37] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Ping timeout: 250 seconds)
[12:10:58] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[12:11:46] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[12:12:50] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[12:13:25] *** Quits: boB_K7IQ (~boB_K7IQ@c-67-161-96-40.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:13:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:14:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:15:23] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:1e3:2fc9:933:23f2) (Quit: Leaving)
[12:18:15] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:19:03] *** Joins: mrig (~mrig@user/mrig)
[12:20:24] *** Joins: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net)
[12:21:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:21:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:21:36] *** Joins: wroathe (~wroathe@user/wroathe)
[12:22:10] *** Joins: retroid_ (~retro@5ec2ec1d.skybroadband.com)
[12:22:16] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[12:22:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:22:49] <lisbeths> I have a char* foo of size > sizeof(void*). I want to store a char* at the address that foo is pointing to. Then I want to advance the address by sizeof(void*) characters.
[12:23:36] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[12:24:26] *** Joins: retro_ (~retro@5ec2ec1d.skybroadband.com)
[12:24:40] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[12:25:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:26:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:27:20] *** Quits: retroid_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:28:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:29:17] *** Joins: malloy (~jimery@116.30.220.175)
[12:31:00] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:31:33] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[12:32:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:32:51] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[12:32:53] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[12:33:43] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[12:34:04] <mcf> lisbeths: not sure if this is what you mean, but maybe void *addr = ...; memcpy(foo, &addr, sizeof addr); foo += sizeof addr;?
[12:35:15] *** Joins: Leonard (~Administr@114.55.127.80)
[12:35:21] *** Quits: retro_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:35:27] <lisbeths> I have this: https://www.toptal.com/developers/hastebin/raw/demepifava
[12:35:31] *** Joins: tejr (~tejr@user/tejr)
[12:36:00] <sham1> Where's the void*
[12:36:26] <lisbeths> sizeof(void*) == sizeof(char*)
[12:36:31] *** Joins: retroid_ (~retro@5ec2ec1d.skybroadband.com)
[12:37:01] *** Quits: alch (~alch@151.38.69.109) (Ping timeout: 240 seconds)
[12:37:32] <sham1> Not necessarily
[12:37:40] <dave0> lisbeths: stop using an array of pointers as your stack, use an array of unsigned long
[12:37:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:38:54] <lisbeths> the pointer is a universal mechanism for representing data
[12:38:59] *** Joins: alch (~alch@mi-18-14-251.service.infuturo.it)
[12:39:26] <gl> what?
[12:40:02] <dave0> lisbeths: how can you code `add` with an array of pointers?   add() { char *a = pop(); char *b = pop(); /* oops a + b has no meaning in c */ push(a + b); }
[12:40:33] <lisbeths> My integers are base 10 strings
[12:41:17] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:59::a06d)
[12:41:28] <dave0> so what's you add() ?
[12:41:31] *** Quits: retroid_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:41:40] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[12:41:43] <lisbeths> add is not implemented right now
[12:41:57] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 240 seconds)
[12:42:05] <lisbeths> I am not going to be adding two pointers together
[12:42:33] <lisbeths> a bigint in my language can be "934805843095843095830985098435093850938504375943875943759843759437594387593487598437598437598437598437598437598437598437598437598437598345984375093485435439847594385873249587324985764329856832659832765987436593286593284762943"
[12:43:14] <dave0> what is foo? char *foo ... is that a pointer to a bignum aswell?
[12:43:22] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[12:43:28] <lisbeths> all the data in my language are represented as strings
[12:43:32] <mcf> sham1: it's always true, actually. C11 6.2.5p28 "A pointer to void shall have the same representation and alignment requirements as a pointer to a character type"
[12:43:36] *** Joins: malloy (~jimery@116.30.220.175)
[12:43:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:44:21] <sham1> Well then
[12:44:55] <lisbeths> pointers are almost as good as closures but are not identicla
[12:45:04] <lisbeths> because function pointers do not interop with them
[12:45:12] <dave0> lisbeths: so foo points to a string?
[12:45:25] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[12:45:50] <lisbeths> yes it is a char*
[12:45:54] <dave0> lisbeths: you can't store a char* there
[12:46:18] <lisbeths> a char* is just sizeof(char*) characters
[12:46:32] <mcf> you can store the representation of a char*, though
[12:46:34] <mcf> with memcpy
[12:46:38] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[12:47:37] <lisbeths> yeah memcpy answers my question
[12:47:41] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 268 seconds)
[12:47:57] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 240 seconds)
[12:48:18] <lisbeths> mcf I dont see why i can't cast char* to char** though
[12:48:21] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[12:48:22] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[12:48:53] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[12:48:56] <mcf> the char* might not be aligned properly to access as char **
[12:49:07] <dave0> am i misunderting something? is this what you're asking?    char temp[] = "1234"; char *foo = temp; char *something=???; *(char **)foo = something;
[12:49:20] <lisbeths> I do not fully understand how these work []
[12:49:50] *** Joins: stonkey (~stonkey@user/stonkey)
[12:50:05] <nitrix> Don't you find it a bit ridiculous to be implementing a new language when you can't even be bothered to learn the language that you chose to implement your language within?
[12:50:30] <lisbeths> c has alot of moving parts. Thats why I want to create a language with fewer parts so I can understand it all the way through
[12:50:42] *** Joins: retro_ (~retro@2e40edd9.skybroadband.com)
[12:51:01] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[12:51:08] <lisbeths> so no
[12:51:23] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 268 seconds)
[12:52:33] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[12:54:24] <dave0> it's actually interesting to implement a forth with bignums... i don't think i've seen it
[12:54:38] <lisbeths> gnu dc
[12:54:57] <kurahaupo1> lisbeths: Do you understand that a statement like «**x=5;» involves accessing THREE object? (Reading from x, reading from *x, and writing to **x.) So what exactly would you expect casting a (char*) to a (char**) to actually DO?
[12:55:01] <dave0> doesn't quite have the power... forth can write to arbitrary addresses
[12:55:01] *** Joins: kish` (~aqua@user/aqua)
[12:55:23] <sham1> Forth also has loops and conditional branches
[12:55:29] <lisbeths> << >> I don't know what you are doing with these
[12:55:35] <nitrix> dave0, It's not new, I made one. https://github.com/ncfavier/ni
[12:55:36] <candide> Title of nitrix's link: GitHub - ncfavier/ni: A stack-based concatenative programming language
[12:55:45] <dave0> nitrix: oh cool!
[12:56:35] <nitrix> ni has had so many iterations, it's not even a concatenative language anymore.
[12:56:57] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 240 seconds)
[12:57:00] <kurahaupo1> C prior to C89 was like FORTH: its memory model was flat, and you could read and (try to) write any memory location. C since no longer assumes a flat memory model (except where necessary for memcpy to make sense.)
[12:57:29] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:57:40] *** Quits: ts_ (~ts@114.254.0.140) (Quit: Leaving)
[12:57:58] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[12:58:14] <nitrix> lisbeths, I understood that much; no one is willingly working on something they think serves no purpose. I'm just worried that you could make just as equally bad design decisions without understanding why C is the way it is in the first place.
[12:59:48] <sham1> I mean you can still read from and write to arbitrary memory locations in an implementation-defined manner
[13:00:05] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 630 seconds)
[13:00:54] *** Joins: aqua (~aqua@user/aqua)
[13:01:01] <lisbeths> nitrix: the whole reason I ask so many quetions about c memory is exactly so that I will understand the way c is
[13:02:32] *** Joins: lou (~lou@rrcs-24-43-84-163.west.biz.rr.com)
[13:02:34] *** Joins: ewwegweg (~ewwegweg@user/ewwegweg)
[13:03:06] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[13:03:11] <nitrix> lisbeths, Yeah, but you're putting the horse before the carriage. Yes, C pointers are confusing, but the underlaying semantics that is indirection is universal and even your understand of that is out of whack.
[13:03:13] <kurahaupo1> lisbeths: C started in the mid 1970's and has been evolving since, mostly trying to maintain backwards compatibility. The old =* operators were removed a long time ago (mid 1980's) but it's only recently that the old-style function definitions have been removed.
[13:03:46] <NRK[m]> they were kinda cozy tbh
[13:03:50] <lisbeths> I understand c is meant to be coded in a certain set of ways. I want to map my understanding to that. It just takes time.
[13:04:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[13:04:17] *** Joins: Darkcoal (~user@139.64.51.226)
[13:04:22] <sham1> NRK[m]: what, the K&R function definitions?
[13:04:24] *** Quits: lou (~lou@rrcs-24-43-84-163.west.biz.rr.com) (Quit: Konversation terminated!)
[13:04:35] <sham1> You mean those ones that are untyped
[13:04:49] <NRK[m]> yeah, `fun(a) int a;` fun times
[13:04:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:05:34] <NRK[m]> kurahaupo1: what exactly changed in c99 that no longer assumes flat memory?
[13:05:52] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[13:06:10] <kurahaupo1> C (now) intentionally avoids requiring the programmer to think in terms of memory addresses. If your code is full of pointer casts, either you're a writing a low-level memory allocator, or there are better ways of writing the same thing that don't need casts.
[13:06:39] <sham1> Well, memory allocator or a driver for some very legacy device
[13:06:50] <kurahaupo1> NRK[m]: it was already gone by 1989. You could no longer assume that 2 consecutive variables were at consecutive addresses
[13:07:18] <NRK[m]> yes, which is why i'm asking what you mean by c89 assumes flat memory
[13:07:25] <lisbeths> mcf is the reason I have to use mcpy instead of casting to char* that the memory model might not be flat
[13:07:39] <kurahaupo1> And you can't assume that, given « int A[B][C]; » that A[0][C] is a valid way to access A[1][0]
[13:07:41] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[13:07:50] <kurahaupo1> That sort of thing was completely fine before C89
[13:08:15] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[13:08:15] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:08:16] <kurahaupo1> (Well, by the time they were writing C89, it was frowned on, but not forbidden.)
[13:08:31] <nitrix> I think the issue is two fold: (1) You need to know C very well and have quite a lot of experience with it to recognize the more serious problems on a fundamental level before attempting to fix them. Most senior C developers knows those problems; the reason they aren't address isn't because we don't know how, but because there is too much important code written in C to risk changing it. Aka, things are the way they are for practical reasons.
[13:08:35] *** Joins: mrig (~mrig@user/mrig)
[13:08:38] <NRK[m]> it's not forbidden now either kurahaupo1
[13:08:55] <NRK[m]> just UB
[13:09:01] *** Quits: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr) (Ping timeout: 240 seconds)
[13:09:35] <kurahaupo1> NRK[m]: The pointer values compare equal, but UB, because A[0][C] could trap with a range error.
[13:10:16] <kurahaupo1> So the addresses aren't flat. They look flat, but there can be hidden bits that you can't see
[13:10:38] <lisbeths> this is where my issue is is I thought the memory in c was flat like forth
[13:10:41] *** Quits: ewwegweg (~ewwegweg@user/ewwegweg) (Remote host closed the connection)
[13:11:00] *** Joins: ewwegweg (~ewwegweg@user/ewwegweg)
[13:11:04] <NRK[m]> yes, afaik that's UB even in C89. which is why i was curious what you meant that c89 assumes flat memory
[13:11:13] <sham1> Well C memory is as flat as the processor memory
[13:11:21] <sham1> As in, not
[13:11:25] <nitrix> I don't think Forth's memory model is flat either.
[13:11:26] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:1e3:2fc9:933:23f2)
[13:11:30] <kurahaupo1> lisbeths: C started with a flat memory model, but has been trying to get away from it for 40 years, without breaking existing code. (And yes, that's as impossible as it sounds.)
[13:11:37] <sham1> nitrix: I think so yeah
[13:12:01] <sham1> Relevant article: https://queue.acm.org/detail.cfm?id=3212479
[13:12:04] <candide> Title of sham1's link: C Is Not a Low-level Language - ACM Queue
[13:12:04] <dave0> if not flat... segmented?
[13:12:13] <kurahaupo1> dave0: That's also an option
[13:12:14] <sham1> oh no
[13:12:29] <NRK[m]> there's also this `struct string { size_t len; char str[1]; };`
[13:12:58] <nitrix> str[] is enough.
[13:13:00] <sham1> Thankfully we now have nice things
[13:13:09] <sham1> nitrix: that wasn't an option back in the day
[13:13:14] <NRK[m]> and then you malloc as much as you need and do stuff like `l.str[10]`
[13:13:23] <NRK[m]> nitrix: not in C89
[13:13:31] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:32] <kurahaupo1> NRK[m]: the bytes assigned by a malloc are flat, and suitably aligned for any type, so you can lay a FAM into it as long as it's big enough.
[13:13:34] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Ping timeout: 260 seconds)
[13:13:36] <NRK[m]> flexiable array are c99 addition afaik
[13:13:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f) (Quit: Quit)
[13:13:43] *** Joins: badsektor (~badsektor@user/badsektor)
[13:13:49] <dave0> lisbeths: which forth operation are you trying to write?
[13:13:50] <nitrix> Why are we talking about C89 though?
[13:13:53] <NRK[m]> kurahaupo1: yes, but it's still UB
[13:13:53] <kurahaupo1> NRK[m]: making up for existing practice...
[13:14:01] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[13:14:19] <NRK[m]> although will work under most if not all practical situation due to how malloc works
[13:14:20] <kurahaupo1> nitrix: we're talking about "why C is the way it is", which includes C74 as well
[13:14:28] <kurahaupo1> heck, it includes BCPL
[13:14:40] <NRK[m]> sham1: i don't like that article tbh
[13:14:56] *** Joins: dcreator (~kjell@208.92-221-37.customer.lyse.net)
[13:15:16] <NRK[m]> it's informative, but it also contains many misleading things
[13:15:32] <NRK[m]> which if you're a newbie, you won't catch
[13:15:51] <kurahaupo1> C allows an implementation to use "fat pointers", where a pointer describes the entire array and the offset into; that's why A[0][C] is allowed to trap.
[13:16:09] <NRK[m]> nitrix: because someone said that c89 assumes flat memory
[13:16:27] <nitrix> How is `struct string { size_t len; char str[1]; };` related to flat memory?
[13:16:29] <kurahaupo1> NRK[m]: I said that prior to C89 flat memory was assumed,
[13:16:41] <NRK[m]> oh?
[13:16:49] <NRK[m]> did i misread
[13:17:07] <NRK[m]> yes i did :)
[13:17:23] <NRK[m]> oh well, then you're correct.
[13:17:28] *** Joins: BCMM (~BCMM@user/bcmm)
[13:17:58] <kurahaupo1> (20 minutes ago) kurahaupo1: C prior to C89 was like FORTH: its memory model was flat, ...
[13:19:52] <kurahaupo1> Ironically the horrors of dealing with 80286 segmented memory was a key driver for C getting away from assuming a single linear address space.
[13:20:16] <dave0> i've never heard someone say segmented is better ;-)
[13:20:58] <kurahaupo1> Having only 64k segments was a problem. If you could put every object in its own segment, the compiler could catch a lot more runtime errors.
[13:21:57] <kurahaupo1> If you want to see how far C still has to go, try making a compiler than can compile C to JVM byte code
[13:23:26] <kurahaupo1> At least, the compiler for some other language could catch more errors. A compiler for C is going to have to play so fast and loose with the hardware's object model that it will thwart nearly all hardware assisted bounds checking.
[13:23:49] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[13:24:01] <sham1> Graal
[13:24:14] <NRK[m]> nitrix: because doing `string->str[2]` would be UB in C
[13:24:37] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 240 seconds)
[13:25:29] *** Joins: Leonard (~Administr@114.55.127.80)
[13:26:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[13:27:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:28:18] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Quit: leaving)
[13:28:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:28:55] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[13:31:55] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[13:32:02] *** Joins: Praise- (~Fat@user/praise)
[13:33:36] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:34:27] *** Joins: trafficjam (~trafficja@119.17.42.59)
[13:34:31] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[13:34:41] <trafficjam> how is rust faster than C?
[13:35:35] <dave0> how is something something something than anything?
[13:35:36] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[13:36:04] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[13:36:46] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[13:38:33] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[13:38:55] <trafficjam> hmm seems to depend on the benchmark actually
[13:39:08] *** Joins: inomoz (~inomoz@176.59.115.63)
[13:39:36] <sham1> One way Rust seems to be faster is that it does more aggressive optimisations in certain places
[13:39:59] <sham1> Since the "safe" language (as opposed to "unsafe") has stronger invariants that the compiler can exploit
[13:40:59] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:42:13] *** Quits: cvitak (~cvitak@83-245-250-171-nat-p.elisa-mobile.fi) (Ping timeout: 240 seconds)
[13:48:20] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:48:44] *** Joins: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr)
[13:48:46] *** Joins: mrig_ (~mrig@amarseille-658-1-164-58.w86-198.abo.wanadoo.fr)
[13:49:36] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[13:49:37] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 240 seconds)
[13:49:49] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[13:49:57] *** Quits: shalok (~shalok@user/shalok) (Ping timeout: 240 seconds)
[13:50:16] *** Joins: shalok (~shalok@user/shalok)
[13:50:17] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[13:50:17] *** Quits: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 240 seconds)
[13:50:18] *** Quits: kaichiuc1u (~kaichiuch@user/kaichiuchu) (Read error: Connection reset by peer)
[13:50:26] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[13:50:36] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[13:50:37] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 240 seconds)
[13:50:40] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[13:50:52] *** Quits: etolier (~somewhere@202-144-174-137.ip4.superloop.com) (Remote host closed the connection)
[13:50:53] *** Joins: sebito91 (~sborza@45.55.74.66)
[13:50:56] *** Joins: bkhl (~bkhl@user/bkhl)
[13:51:01] *** Joins: dmgk (~dmgk@user/dmgk)
[13:51:17] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:51:17] *** Quits: Phil-Work (~phil@62.3.100.20) (Ping timeout: 240 seconds)
[13:51:20] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[13:51:37] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 240 seconds)
[13:51:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[13:52:06] *** Joins: etolier (~somewhere@202-144-174-137.ip4.superloop.com)
[13:53:16] *** Quits: mrig_ (~mrig@amarseille-658-1-164-58.w86-198.abo.wanadoo.fr) (Changing host)
[13:53:16] *** Joins: mrig_ (~mrig@user/mrig)
[13:53:16] *** mrig_ is now known as mrig
[13:54:21] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:54:45] *** Joins: BCMM_ (~BCMM@user/bcmm)
[13:55:09] *** Quits: BCMM (~BCMM@user/bcmm) (Ping timeout: 256 seconds)
[13:58:21] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[13:58:33] *** Joins: katsuragi (katsuragi@tilde.institute)
[13:59:51] *** Joins: pucara (~i@181.91.29.65)
[14:00:08] *** Joins: unknow (~i.am@user/marlboro)
[14:00:52] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:01:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:02:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:03:32] *** Quits: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Ping timeout: 268 seconds)
[14:04:22] *** Lord_of_Life_ is now known as Lord_of_Life
[14:04:39] *** Joins: Klinda (~superleag@user/klinda)
[14:05:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:06:43] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[14:08:45] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[14:13:17] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[14:15:55] *** aqua is now known as kish`
[14:18:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:22:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:22:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:22:23] *** Joins: wroathe (~wroathe@user/wroathe)
[14:24:11] *** Quits: manjaroi3 (~manjaro-i@125.131.114.50) (Ping timeout: 256 seconds)
[14:25:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[14:25:41] <NRK[m]> imo, benchmarks are pointless. it only demonstrates who micro-optimized for that specific benchmark.
[14:26:13] *** Joins: Leonard (~Administr@114.55.127.80)
[14:26:21] <NRK[m]> a "fast language" in my definition is one where idiomatic code can be easily optimized.
[14:26:21] *** Joins: Major_Biscuit (~MajorBisc@c-001-005-014.client.tudelft.eduvpn.nl)
[14:27:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:28:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[14:28:36] <NRK[m]> trafficjam: also if we're thinking of the same benchmark, the C code in there isn't even C. it's filled with intrinsics. which goes back to what i said, benchmarks only demonstrates who micro optimized.
[14:29:25] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:57] *** Joins: csrf (~csrf@user/csrf)
[14:34:26] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:34:31] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:35:00] *** Quits: sebag1 (~guest@91.245.82.2) (Ping timeout: 268 seconds)
[14:36:49] *** Joins: seninha (~seninha@user/seninha)
[14:37:14] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[14:37:38] *** Joins: seninha (~seninha@user/seninha)
[14:38:50] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:40:29] *** Quits: simontime (~simontime@irc.simonti.me) (Ping timeout: 256 seconds)
[14:40:35] *** Joins: earnest (~earnest@user/earnestly)
[14:40:36] *** Joins: bbju (~bbju@103.144.149.53)
[14:42:54] *** Joins: simontime (~simontime@irc.simonti.me)
[14:43:32] *** Joins: Bitflux (~byte@byteflux.net)
[14:43:38] *** Quits: Byteflux (~byte@byteflux.net) (Ping timeout: 268 seconds)
[14:46:04] *** Quits: Bitflux (~byte@byteflux.net) (Excess Flood)
[14:47:37] *** Quits: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr) (Ping timeout: 240 seconds)
[14:49:37] *** Quits: simontime (~simontime@irc.simonti.me) (Quit: ZNC 1.8.0 - https://znc.in)
[14:50:16] *** Joins: simontime (~simontime@irc.simonti.me)
[14:50:45] *** Joins: Byteflux (~byte@byteflux.net)
[14:51:50] *** Joins: keinbock (uid6451@id-6451.helmsley.irccloud.com)
[14:52:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:53:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:53:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:53:12] *** Joins: wroathe (~wroathe@user/wroathe)
[14:53:20] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[14:56:33] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:56:44] *** Joins: z14 (~alzee@user/alzee)
[14:57:17] *** Quits: Byteflux (~byte@byteflux.net) (Ping timeout: 240 seconds)
[14:58:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:58:21] *** Joins: Prof_Dumbledore (~Prof_Dumb@152.57.193.53)
[14:59:08] *** Quits: ozzz (~oz@46.49.41.80) (Read error: Connection reset by peer)
[14:59:09] *** Joins: Byteflux (~byte@byteflux.net)
[14:59:40] <sham1> Benchmarks often are like that
[15:00:23] <NRK[m]> often? i'd say always.
[15:02:14] *** Quits: critr (~critr@user/critr) (Quit: .)
[15:04:24] <sham1> I didn't want to say it in that kind of an absolute way, but yes
[15:05:01] *** Quits: Byteflux (~byte@byteflux.net) (Ping timeout: 240 seconds)
[15:05:34] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:06:11] *** Joins: Pr_Dumbledore (~Prof_Dumb@152.57.193.53)
[15:06:21] *** Joins: Leonard (~Administr@114.55.127.80)
[15:06:29] *** Joins: ozzz (~oz@46.49.41.80)
[15:08:48] <|smlckz|> ,cc int x; int *p = &x; printf("%u ", p); printf("%lu", p);
[15:08:49] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:08:50] <candide> |smlckz|: [warning: format '%u' expects argument of type 'unsigned i​nt', but argument 2 has type 'i​nt *' [-Wformat=]  warning: format '%lu' expects argument of type 'long unsigned i​nt', but argument 2 has type 'i​nt *' [-Wformat=]] 4294959764 140737488347796
[15:09:25] *** Quits: Prof_Dumbledore (~Prof_Dumb@152.57.193.53) (Ping timeout: 240 seconds)
[15:10:22] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[15:10:38] *** Joins: Byteflux (~byte@byteflux.net)
[15:10:54] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:11:19] <|smlckz|> as printf is a variadic function, how does the type conversion take place?
[15:14:17] *** Quits: simontime (~simontime@irc.simonti.me) (Ping timeout: 240 seconds)
[15:14:29] *** Joins: simontime (~simontime@irc.simonti.me)
[15:15:57] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:18:20] <dave0> that's a question for the standard... where's fizzie? he's the standards guru
[15:18:43] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:18:46] <dave0> |smlckz|: because i don't know the rules, my policy is cast it
[15:19:11] *** Joins: kish` (~aqua@user/aqua)
[15:19:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:19:49] <dave0> ,cc int x; int *p = &x; printf("%u ", (unsigned int)p); printf("%lu ", (unsigned long)p);
[15:19:51] <candide> dave0: [warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]] 4294959764 140737488347796
[15:19:59] <dave0> even that warns.. oh well
[15:20:05] <NRK[m]> you can take a look into the openbsd or musl source for printf
[15:20:36] <dave0> i don't care to learn all the printf flags either
[15:20:55] <Learath2> What are you trying to do?
[15:21:09] *** Quits: Pr_Dumbledore (~Prof_Dumb@152.57.193.53) (Read error: Connection reset by peer)
[15:21:23] <dave0> |smlckz| wants to know how varargs promotes types
[15:21:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[15:21:47] <fizzie> There's no change to `int *` from the default argument promotions.
[15:22:17] <fizzie> (And passing an `int *` as the corresponding argument of a %u or a %lu conversion specifier is of course just undefined.)
[15:22:25] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:22:31] <|smlckz|> fizzie: ah
[15:22:47] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[15:23:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:23:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:23:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:23:57] *** Joins: wroathe (~wroathe@user/wroathe)
[15:24:05] <|smlckz|> btw, what are the default argument promotions?
[15:24:53] <fizzie> The integer promotions, plus a conversion of all `float` arguments to `double`. From C11 6.5.2.2p6.
[15:25:28] <|smlckz|> thanks for the pointer.. ;)
[15:25:39] <Learath2> How are you so damn fast fizzie? I still was flipping through the index :D
[15:26:09] <dave0> he's my goto standards guy :-)
[15:26:44] <fizzie> The /default argument promotions/ are what happens to any arguments in a function call where the expression that denotes the called function has no prototype, or has a prototype that ends in `...` (and the argument is at or after the `...`, of course).
[15:26:54] <fizzie> And I used the search function just for once.
[15:27:01] <Learath2> I knew I was looking for postfix operators -> function call, I only got to 6.5.2 :D
[15:28:18] <fizzie> Integer promotions are described in 6.3.1.1p2, for the record. They convert all integer types with a conversion rank less than `int` / `unsigned int` to either `int` (if it can represent all values of the original type) or `unsigned int`.
[15:28:47] *** Joins: aerysh (~aerysh@2a0a:b640:1:5b::a08d)
[15:29:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:30:02] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:31:07] <fizzie> Fun trivia fact: current C23 drafts add an extra "`fprintf` shall behave as if it uses `va_arg`" nuance to the current "using the wrong type is wrong" printf argument type rule, so it will finally become unambiguously correct to print a `char *` with %p, or pass values between 0 and INT_MAX as `int` to %u or as `unsigned int` to %d.
[15:31:49] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:59::a06d) (Ping timeout: 240 seconds)
[15:35:34] <|smlckz|> ,cc printf("%d", 1u << 31 + 1);
[15:35:35] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[15:35:37] <candide> |smlckz|: [warning: left shift count >= width of type [-Wshift-count-overflow]  warning: suggest parentheses around '+' inside '<<' [-Wparentheses]]  runtime error: shift exponent 32 is too large for 32-bit type 'unsigned i​nt' 0
[15:35:37] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:01] *** Joins: Leonard (~Administr@114.55.127.80)
[15:36:03] <dave0> oops precedent order :-p
[15:36:09] <|smlckz|> ''runtime error''?
[15:36:10] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[15:36:15] <dave0> ,prec 1u << 31 + 1
[15:36:16] <candide> dave0: 1u << (31 + 1)
[15:36:25] <fizzie> The "runtime error" part is from UBSan.
[15:36:26] <sham1> Yes, runtime error
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:37] <|smlckz|> oh
[15:37:01] *** Quits: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net) (Ping timeout: 240 seconds)
[15:37:05] <sham1> Similarly, my favourite example
[15:37:38] <fizzie> (-fsanitize=undefined, or more specifically -fsanitize=shift-exponent.)
[15:37:49] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[15:37:57] <sham1> ,cc bool b; memcpy(&b, &(uint8_t){2}, sizeof(bool)); printf("%d", b);
[15:38:00] <candide> sham1:  runtime error: load of value 2, which is not a valid value for type '_Bool' 0
[15:38:15] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[15:38:21] <sham1> UBSan rightly complains
[15:38:34] <dave0> good one, ansi .. we nearly got rid of trap values
[15:39:18] <sham1> Well what should a byte of value 2 mean in _Bool when it's memcpy'd in place
[15:40:15] <dave0> the question should be what's the point of _Bool
[15:40:29] <NRK[m]> ,cc bool b; memcpy(&b, &(uint8_t){!!2}, sizeof(bool)); printf("%d", b);
[15:40:31] <candide> NRK[m]: 1
[15:40:35] <NRK[m]> yay
[15:40:42] <sham1> At least _Bool is a great example of an unsigned integer with padding bits even on architectures like x86
[15:40:57] <dave0> the only example
[15:41:08] <sham1> Yes
[15:41:14] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[15:41:15] <NRK[m]> bools are bloat
[15:41:28] <sham1> Bools are useful
[15:41:47] <NRK[m]> barely
[15:41:49] <dave0> maybe if (pun!) if and while required bools but they don't
[15:41:59] <dave0> there might have been some advantage
[15:41:59] <fizzie> It doesn't need to be a trap representation, FWIW. It can also just be a redundant representation of 0.
[15:42:43] <sham1> Having semantic types is a good thing I'd say
[15:42:59] <fizzie> Given how... special the conversion from other integer types to _Bool is, I do think it'd be better off not being an integer type in the first place, but that's probably too big a change to retrofit to the language.
[15:43:13] <Learath2> how dare you insult bools, wtf, the bestest type of them all
[15:43:18] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:43:20] <dave0> they behave unintuitively when you treat them as integers.. they save no memory.. there's no type check from if/while
[15:43:32] <sham1> ,cc bool b; memcpy(&b, &(uint8_t){3}, sizeof(bool)); printf("%d", b);
[15:43:35] <candide> sham1:  runtime error: load of value 3, which is not a valid value for type '_Bool' 1
[15:43:50] <markand> bools are so useless
[15:43:50] <dave0> they brought padding and trap values to something that didn't have them
[15:44:00] <fizzie> ,cc bool b = 0.1; int i = 0.1; printf("%d %d", b, i); // another classic bool thing
[15:44:03] <candide> fizzie: 1 0
[15:44:04] <markand> they are less performant when passing/returning
[15:44:35] <dodobrain> do people actually use the bool type ?
[15:44:35] <sham1> They get passed by register in most architectures like any other integer value
[15:44:42] <dodobrain> i dont even know why it got added
[15:44:43] <NRK[m]> i don't think sizeof _Bool is even defined. so it should be perfectly valid is some compiler want's to use 64bit for it
[15:45:00] <Learath2> I can't believe what I'm hearing right now. ITT C programmers complaining something is unintuitive
[15:45:23] <Learath2> The entire language is filled to the brim with unintuitive small quirks, bool is like a triviality lol
[15:45:30] *** Joins: manjaroi3 (~manjaro-i@14.138.218.201)
[15:45:45] <dodobrain> Learath2, but was it needed? thats my question really
[15:45:55] <dave0> what's one more?
[15:45:59] <dodobrain> lawl
[15:45:59] <sham1> Is anything needed except for int
[15:46:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:46:20] <dave0> <3 int
[15:46:41] <dodobrain> anyone remember the motivations given for the addition ?
[15:46:44] <markand> sham1,       typedef sf_count_t  (*sf_vio_get_filelen) (void *user_data) ;
[15:46:44] <markand>       typedef sf_count_t  (*sf_vio_seek)        (sf_count_t offset, int whence, void *user_data) ;
[15:46:47] <markand>       typedef sf_count_t  (*sf_vio_read)        (void *ptr, sf_count_t count, void *user_data) ;
[15:46:50] <markand>       typedef sf_count_t  (*sf_vio_write)       (const void *ptr, sf_count_t count, void *user_data) ;
[15:46:53] <markand> oops
[15:46:55] <markand> sham1, https://godbolt.org/z/v7bf7Ghcq
[15:46:56] <Learath2> I personally only use one single type, unsigned char. All other types are useless since computers operate on bytes
[15:47:00] <earnest> dodobrain: There was a underhanded C contest winner who used what they called 'disney dollar APIs' such as those which typedef int as bool.  This allowed him to store data in the additional space provided by int to toggle encryption
[15:47:04] *** Joins: u0_a391 (~u0_a391@2600:380:a42e:5999:c786:7119:ed8c:ee08)
[15:47:21] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[15:47:30] <earnest> It was an AES implementation, I'll try find it
[15:47:35] *** u0_a391 is now known as kit-ten
[15:47:41] <dodobrain> earnest, underhanded C contest? do you mean ioccc ?
[15:47:46] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[15:48:02] <earnest> No
[15:48:10] <earnest> dodobrain: Here's the text explanation of it: https://0x0.st/ozQV.txt
[15:48:16] <gl> http://www.underhanded-c.org/
[15:48:27] <earnest> It looks like from the 2007 contest
[15:48:38] <dodobrain> oho.. i had not heard of this underhanded c contest before today
[15:48:45] <earnest> gl: I got it wrong, it was underhanded crypto (not c)
[15:48:46] <sham1> markand: you forgot optimisation. With -O2 and I'd presume even -O1, those compile to the same thing
[15:49:15] <gl> right
[15:49:18] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Remote host closed the connection)
[15:49:28] *** Joins: Furai (~Furai@furai.pl)
[15:49:56] <sham1> Also you had godbolt set to C++, tsk tsk
[15:49:57] <Learath2> It's baffling that you think arguably the most fundamental type in computing is useless. Who even thinks of logic in terms of integers?
[15:50:37] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 240 seconds)
[15:51:10] <earnest> dodobrain: Sorry, took awhile, fumbled a bit: https://underhandedcrypto.com/2015/03/07/announcing-the-underhanded-champs/ it's the tinyaesctr (first one)
[15:52:28] <markand> https://godbolt.org/z/4e96ac3oT
[15:52:31] <markand> still more assembly
[15:52:33] *** Joins: marlboro (~i.am@191.32.94.253)
[15:52:33] *** Quits: marlboro (~i.am@191.32.94.253) (Changing host)
[15:52:33] *** Joins: marlboro (~i.am@user/marlboro)
[15:52:45] *** Quits: inomoz (~inomoz@176.59.115.63) (Remote host closed the connection)
[15:52:55] <markand> oh wait, forgot to put -O2 again :P
[15:52:56] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:53:15] <NRK[m]> for me, it's -Ofast :)
[15:53:26] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:53:27] <markand> why the non-optimized code is longer given the bool/int types?
[15:53:43] *** Quits: manjaroi3 (~manjaro-i@14.138.218.201) (Ping timeout: 256 seconds)
[15:54:05] <|smlckz|> longer != slower..
[15:54:09] *** Quits: unknow (~i.am@user/marlboro) (Ping timeout: 256 seconds)
[15:54:10] <earnest> dodobrain: This is why bool should exist
[15:54:13] <sham1> Because the compiler is dumb when not optimizing. Also that
[15:54:42] <sham1> Like -Ofast can very well generate more instructions but it could very well be faster
[15:55:26] <markand> int ftw anyway, no #include <stdbool.h> required nor ugly _Bool :PP
[15:55:40] <NRK[m]> it can also be slower due to blowing up the instruction cache
[15:55:51] <sham1> Are you also against sized integers because you need stdint.h
[15:56:00] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[15:56:01] <NRK[m]> actually yes
[15:56:23] <NRK[m]> i just use stuff like (unsigned) int/long
[15:56:24] <markand> I try to stick with int/unsigned int as much as I can unless I really need other types
[15:56:32] <NRK[m]> they have minimum width gurantees
[15:56:41] <markand> which is probably 90% of what a program should look like
[15:56:45] <dave0> int and unsigned char, short if it saves real memory
[15:56:47] <NRK[m]> very rarely i need exact bits
[15:57:09] <markand> especially since (u)intN_t are supposed to be optional
[15:58:00] <sham1> I suppose it does depend on what you're doing. I tend to do use {u,}int{,_least,_fast}{8,16,32,64}_t quite often
[15:58:01] *** Quits: Darkcoal (~user@139.64.51.226) (Quit: Darkcoal)
[15:58:04] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:58:16] *** Joins: Darkcoal (~user@139.64.51.226)
[15:58:20] <dave0> intN_fast_t seems pointless
[15:58:34] <dave0> what's the least ones?
[15:58:34] <NRK[m]> anyways, is there any standard conformant way to check for the alignment of a pointer?
[15:58:45] <sham1> It has at least the amount of bytes
[15:59:04] <sham1> NRK[m]: alignof? Or do you mean if the content is aligned?
[15:59:18] <sham1> Err, the pointer is aligned properly for the content
[15:59:20] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[15:59:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:59:27] <NRK[m]> i was reading the memcpy of glibc
[15:59:28] <|smlckz|> sham1: what are some usecases for _least and _fast variants?
[15:59:37] *** kit-ten is now known as kit
[15:59:55] <NRK[m]> they're shaving off stuff until it's aligned
[16:00:02] <NRK[m]> instead of doing byte by byte copy
[16:00:34] <sham1> |smlckz|: when you want code with guarantees that you get the amount of value bits you want, optionally with the fastest applicable type
[16:00:47] <sham1> Maximum portability
[16:01:01] <NRK[m]> https://github.com/bminor/glibc/blob/f4f70c2895e3d325188a42c10eb7bb4335be6773/string/memcpy.c#L38-L40
[16:02:19] <NRK[m]> i guess you can cast to uintptr_t , but isn't that optional?
[16:02:29] *** Beastie is now known as beastie
[16:02:49] <fizzie> It's not only optional, the result need not have anything to do with the alignment of the pointer.
[16:02:57] <fizzie> (I don't think there's a portable way to do it.)
[16:03:20] <sham1> That's also optional. I can't imagine why, since you can already store object pointers somehow anyway, but I suppose it could be because you might need two registers for a pointer and just don't want to deal with this stuff
[16:03:22] <NRK[m]> yeah, unfortunate
[16:04:05] <sham1> I can only imagine that segmentation and such is why we can't have uintptr_t everywhere
[16:04:20] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:1e3:2fc9:933:23f2) (Remote host closed the connection)
[16:04:21] <sham1> Because conversions from object pointers might not be good integers
[16:04:26] <fizzie> Of course the whole notion of using a non-character type to access arbitrary bytes is pretty much non-portable.
[16:04:35] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:6820:6a32:87c0:9491)
[16:04:42] *** Quits: Darkcoal (~user@139.64.51.226) (Quit: Darkcoal)
[16:05:05] *** Joins: Darkcoal (~user@139.64.51.226)
[16:05:07] <sham1> But x86 allows it, so it's fine, right? (No, it's not)
[16:05:32] <fizzie> So all those glibc tricks of using wider types to do "more bytes at a time" only work on sane systems, not the DS9k.
[16:05:33] <NRK[m]> under c99, or does strict aliasing apply to c89 as well?
[16:05:59] <sham1> Deep Space 9000
[16:06:19] <dave0> a rule of thumb is   address % sizeof(pointer *) == 0
[16:06:43] *** Joins: Leonard (~Administr@114.55.127.80)
[16:06:45] <fizzie> C89 isn't really any different re the strict aliasing rules, but it also assumes no padding in the integer type.
[16:07:22] <fizzie> Err, I mean, the trick of using a wide type to copy memory does, not C89. In retrospect, the "it" was a little ambiguous there.
[16:08:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:08:40] <sham1> Gotta love unportable assumptions. Of course GNU doesn't care because they target systems where those assumptions are correct
[16:09:38] <NRK[m]> i think they even have optimized asm code for certain archs
[16:09:44] <dave0> can you even compile glibc with something other than gcc?
[16:10:01] <sham1> Like doesn't POSIX mandate that you have no padding bits even
[16:10:14] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[16:10:48] <koollman> I don't think posix mandate anything regarding that
[16:10:54] <NRK[m]> so depending on your arch, many of your libc functions may as well not be even written in C but in pure asm.
[16:11:32] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (Quit: Lost terminal)
[16:11:46] <sham1> Of course assembly doesn't care about undefined behaviour, aside from stuff of the ISA, so as long as the result is correct and compliant then w/e
[16:12:01] *** Joins: _4p3 (~ape@kanonenjagd.panzer.ninja)
[16:14:33] *** Quits: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:15:39] <fizzie> POSIX doesn't mandate anything about the representations of the standard integer types (as far as I know), but it _does_ require (u)int{8,16,32}_t, which in general must not have any padding bits or trap representations (or not-2's-complement representation for the signed types), which I guess would provide a type for a wider memcpy where that isn't a problem.
[16:17:13] <fizzie> (It only requires the 64-bit versions "if an implementation provides integer types with width 64 that meet these requirements", same as standard C.)
[16:19:17] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:22:20] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[16:22:31] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[16:26:05] *** Quits: johnjaye (~pi@154.6.152.74) (Read error: No route to host)
[16:26:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:26:29] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[16:27:30] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[16:27:33] *** Joins: shivesh (~shivesh@user/shivesh)
[16:27:52] *** Joins: bindu (~bindu@user/bindu)
[16:30:22] *** Joins: johnjaye (~pi@154.6.152.74)
[16:33:05] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[16:35:03] *** Joins: inomoz (~inomoz@176.59.115.63)
[16:35:30] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:35:48] *** Joins: de-facto (~de-facto@user/de-facto)
[16:36:03] *** Quits: alch (~alch@mi-18-14-251.service.infuturo.it) (Read error: Connection reset by peer)
[16:36:05] *** Joins: Leonard (~Administr@114.55.127.80)
[16:36:17] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[16:36:29] *** Joins: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8)
[16:37:25] *** Joins: p0g0 (~p0g0@216.211.153.38)
[16:38:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[16:39:01] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[16:39:13] *** Quits: nicko (~iClass@222.211.30.113) (Read error: Connection reset by peer)
[16:39:43] *** Joins: nicko (~iClass@222.211.30.113)
[16:40:20] *** Joins: alch (~alch@151.82.81.187)
[16:42:27] <rcf> It does go beyond the standard in specifying required widths (32-bit int is required, size_t is fixed to the width of long, etc.) but that wouldn't apply much here.
[16:47:57] <sham1> But long is 32-bits even on 64 bit systems
[16:48:16] <sham1> ,cc printf("%zu", sizeof(long));
[16:48:19] <candide> sham1: 8
[16:48:22] <sham1> Oh
[16:48:26] <sham1> I was mitaken
[16:48:50] <sham1> Oh wait, it's Windows that does this whole long is 32 bits
[16:50:00] <NRK[m]> it's win32 api or smth
[16:50:11] <NRK[m]> i think it's 64bit on their new api
[16:50:19] <NRK[m]> idk though. so don't quote me
[16:50:37] *** Quits: aerysh (~aerysh@2a0a:b640:1:5b::a08d) (Ping timeout: 240 seconds)
[16:50:43] <sham1> I could check but I'm too lazy to open visual studio on my laptop
[16:51:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:51:46] <rcf> sham1: POSIX allows the Windows approach as well.
[16:52:24] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:52:41] <sham1> On 64 bits as well? Well, assuming that long is 32 bits there
[16:53:06] <sham1> Because if so, and it mandates that size_t be the same size as long, you'd be in interesting waters
[16:53:08] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:53:19] <rcf> That is allowed, yes.
[16:53:29] <sham1> Although now that I think of it, yeah
[16:53:33] <NRK[m]> ,cc printf("%zu", sizeof(void (*)(void)));
[16:53:35] <candide> NRK[m]: 8
[16:53:50] <NRK[m]> hmm, is this aloud? or undefined
[16:54:20] <fizzie> It's fine. Pointers to functions are just a regular object type themselves.
[16:54:32] <sham1> That is indeed what you can do, since size_t just has to be as wide as to store the max size of an object, and it doesn't need to be 64 bits for 64 bit systems
[16:55:07] <rcf> sham1: see "Programming Environments" in https://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html
[16:55:53] <NRK[m]> fizzie: thanks.
[16:56:11] <sham1> Now I wonder just how much software is written that assumes that size_t has to be 64 bit on a 64 bit system
[16:56:29] *** Quits: rapier (~rapier@user/rapier) (Ping timeout: 256 seconds)
[16:56:31] <sham1> Or that ssize_t is a proper signed integer since we're talking about POSIX
[16:56:32] <rcf> sham1: as for an actual system that does that, there was that x32 ABI for x86-64 systems. Not sure if anyone bothers anymore. But it was a thing.
[16:56:55] <sham1> Yeah, it was. I liked the design but I understand why it's not really a thing anymore
[16:58:12] <rcf> ssize_t must be a signed integer type under POSIX.
[16:58:29] <sham1> I thought that it has to just provide -1
[16:58:53] <rcf> That's the required range, yes.
[16:59:01] *** Quits: kriss (~kriss@213.239.83.90) (Remote host closed the connection)
[16:59:02] <fizzie> I don't think a C integer type could provide -1 without being signed.
[16:59:42] *** Joins: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net)
[16:59:43] <sham1> And so while it might be signed, doing something like read() < 0 is unportable because an implementation can return some non--1 value and still have a success
[17:00:09] <sham1> Reading however many bytes it may, that it has to go to the negative range of ssize_t
[17:00:39] <fizzie> I mean, not if you're careful to only pass values <= SSIZE_MAX as the size argument for the read.
[17:00:52] <rcf> It warns you against doing that if you want to be portable.
[17:01:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:01:12] <rcf> (reading more than SSIZE_MAX, I mean)
[17:01:15] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:01:17] <fizzie> "If the value of /nbyte/ is greater than `SSIZE_MAX`, the result is implementation-defined."
[17:01:29] <sham1> I suppose that makes sense
[17:01:30] *** Joins: rapier (~rapier@user/rapier)
[17:01:30] <fizzie> SSIZE_MAX bytes should be enough for anyone.
[17:01:30] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:6820:6a32:87c0:9491) (Quit: Leaving)
[17:01:39] *** Joins: brad_mssw (~bhouse@2620:134:c001:100:49a9:b490:b06f:94b5)
[17:01:47] <sham1> Well how much would that be, let's see
[17:01:49] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[17:01:49] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[17:02:04] <sham1> ,cc printf("%zd", SSIZE_MAX);
[17:02:07] <candide> sham1: 9223372036854775807
[17:02:09] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:02:19] <sham1> ,cc printf("%zx", SSIZE_MAX);
[17:02:22] <candide> sham1: 7fffffffffffffff
[17:02:27] <sham1> Fair
[17:02:43] *** Joins: krissmaster (~kriss@213.239.83.90)
[17:02:55] <fizzie> Apparently the POSIX-guaranteed lower bound is only 32767 though.
[17:03:54] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[17:04:10] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[17:04:11] <fizzie> https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html → SSIZE_MAX → "Minimum Acceptable Value: _POSIX_SSIZE_MAX" → _POSIX_SSIZE_MAX → "Value: 32767".
[17:04:29] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:04:53] <sham1> Of course one tends to read with more sensible buffer sizes like 1024 anyhow
[17:05:00] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[17:05:31] <constxo> why is that sensible
[17:05:34] *** Quits: hiovoltage50 (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[17:05:46] <sham1> It's not half the address space
[17:06:12] <rcf> fizzie: while true, the more pressing concern would be assuming that any read > PIPE_BUF is going to be atomic anyhow, regardless of SSIZE_MAX
[17:06:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:06:44] <sham1> ,cc printf("%zx", PIPE_BUF);
[17:06:46] <candide> sham1: [warning: format '%zx' expects argument of type 'size_t', but argument 2 has type 'i​nt' [-Wformat=]] 1000
[17:06:54] <constxo> cringe
[17:07:10] <sham1> ,cc printf("%d", PIPE_BUF);
[17:07:13] <candide> sham1: 4096
[17:07:16] <sham1> That's not a lot
[17:07:33] <NRK[m]> what's the point of `auto` in C
[17:07:42] <constxo> nothing it's obsolete
[17:07:45] <sham1> It was inherited from B
[17:07:59] <constxo> 'auto int x;' is just 'int x;'
[17:08:00] <pragma-> make auto great again
[17:08:05] <NRK[m]> `register` also seems useless
[17:08:11] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:08:26] <pragma-> auto should do type inference
[17:08:28] * pragma- nods
[17:08:30] <sham1> register is less useless, although you often don't need it because the compiler can make better usage of registers
[17:08:34] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[17:08:44] <constxo> nice thing about C is you don't need type inference
[17:08:59] <constxo> because you don't have types that are 500 characters long
[17:09:00] <pragma-> nice thing about haskell is you don't need type inference
[17:09:18] <fizzie> Unsurprisingly, "the" type infedence proposal does propose repurposing `auto` for that (like C++ did).
[17:09:20] <rcf> sham1: in practice, one uses some read_full() wrapper around read() if getting a large amount of data in one go is required.
[17:09:34] <constxo> i wouldn't want to be writing haskell types by hand
[17:09:39] <pragma-> er, you don't need to write types
[17:09:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[17:09:41] <sham1> rcf: mmhm
[17:09:44] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:09:45] * pragma- throws his hands in the air
[17:09:49] <pragma-> you know what I meant!
[17:10:15] <sham1> You need to write types at the top level because HM type inference can't into typeclasses properly
[17:10:32] <sham1> Or rather, you should write types at the top level
[17:10:41] <constxo> yeah but you pretty much want to do that anyway
[17:10:53] <sham1> Of course
[17:11:02] <rcf> The malloc() idiom often cited here is an argument in favor of type inference in C, really.
[17:11:22] <rcf> Even getting it right twice is too much for some people.
[17:11:40] <sham1> I'd like type inference just for making anonymous structs for return types not suck
[17:11:42] <NRK[m]> register is useless now that we have good optimizing compilers
[17:11:53] <rcf> Indeed
[17:12:05] <NRK[m]> i assume it might've been useful back in the old days
[17:12:19] <NRK[m]> but `auto` ? im failing to see it's use
[17:12:31] <constxo> it's a storage class specifier bro
[17:12:35] <sham1> Again, inherited from B
[17:12:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f)
[17:12:48] <constxo> it's just that it happens to be the default storage class so you don't have to write it
[17:13:11] <rcf> register was useful before compilers themselves bothered to keep track of the use of &some_variable.
[17:13:11] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:13:18] <caze> register is useful if you want to guarantee that the & operator can't be used.
[17:13:34] <constxo> true
[17:13:50] <katsuragi> I spent 5 hours searching for a missing '&' that kept causing segfaults. Time well spent
[17:14:04] <rcf> Much like 'static', the actual meaning of the word is truly and completely lost at this point when it comes to C.
[17:14:04] <sham1> Nice
[17:14:31] <constxo> if someone else comes to modify a function you wrote and you were careful not to use & so the compiler would put it in a register, the register keyword is a nice way to signal to them that they shouldn't fuck it up
[17:14:55] *** Joins: pulse (~pulse@user/pulse)
[17:15:19] <constxo> u see the new use for auto in c++23
[17:15:21] <rcf> constxo: of course those people might now be asking you to implement functionality that requires taking the address, so it's just an annoyance to remove the keyword.
[17:15:25] <NRK[m]> oh, u meant "addressof" operator i was thinking it's bitwise and
[17:15:31] <katsuragi> register is a request, not a demand
[17:15:52] <rcf> kassle: it's a request to the compiler, a demand to the programmer.
[17:15:57] <sham1> Well it's a demand in so far as it makes taking the address not possible
[17:16:03] <constxo> it's a demand in the sense that you are demanding the compiler emit a diagnostic if you accidentally use the & operator
[17:16:26] <constxo> well actually idk if it's required to do that
[17:16:43] <sham1> And it makes types like the following officially useless: register _Bool packed_bools[8];
[17:17:06] <constxo> is applying & to a register variable UB? or does the standard say a diagnostic will be generated
[17:17:09] <NRK[m]> ,cc register int a; printf("%p", &a);
[17:17:10] <candide> NRK[m]: error: address of register variable 'a' requested
[17:17:24] <NRK[m]> it is an error iirc
[17:17:36] <rcf> It's a constraint violation, not UB.
[17:17:42] <sham1> packed_bools could very well be 8 booleans packed into a byte, but one can't take advantage of it since it's register
[17:18:05] <kurahaupo_> Unfortunately that means that « register int a[1]; » is useless.
[17:18:14] <sham1> Yeah
[17:18:42] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[17:18:52] <sham1> Although, if using it wil booleans would be possible, it'd make _Bools useful now wouldn't it ;)
[17:19:08] <NRK[m]> ,c99 6.5.3.2p1
[17:19:08] <candide> http://www.iso-9899.info/n1256.html#6.5.3.2p1 [Address and indirection operators] The operand of the unary & operator shall be either a function designator, the result of a [] or unary * operator, or an lvalue that designates an object that is not a bit-field and is not declared with the register storage-class specifier.
[17:19:53] <rcf> I suppose I"ve never encountered a situation where the idea of register arrays makes even the slightest bit of sense.
[17:20:34] <NRK[m]> still seems useless tbh, i fail to see why you'd want to forbid using the address of an object.
[17:21:21] <rcf> (obviously SIMD may involve literal register arrays but that's nothing to do with standard C)
[17:21:30] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[17:21:53] <sham1> Well disallowing the taking of an address does mean that the compiler can do interesting optimisations, like packing the aforementioned booleans tightly into a byte, or something like that
[17:22:09] <sham1> Since an address can only address chars
[17:22:19] <sham1> Same with bitfields
[17:23:20] <NRK[m]> i doubt it matters for local vars
[17:23:30] <NRK[m]> compilers are good enough to deduct that
[17:24:20] <sham1> Unless they escape in which case their hands are tied
[17:24:45] *** Quits: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[17:25:42] <rcf> I suppose they could pull a static and repurpose register to designate not-quite-arrays
[17:26:24] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[17:26:37] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Remote host closed the connection)
[17:26:39] <sham1> Would be nice
[17:26:53] <sham1> And make auto do type inference while they're at it
[17:27:10] <sham1> Would save some typing
[17:27:19] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[17:27:22] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[17:27:49] <Learath2> Given breaking old code is completely unacceptable to wg14 it's quite unlikely
[17:27:56] <NRK[m]> i don't even think you gain anything from packing bools on the stack
[17:28:08] <NRK[m]> and possible loose performance even
[17:28:36] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[17:28:36] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:28:41] <NRK[m]> possibly*
[17:29:16] <sham1> That it would do because RMW
[17:29:55] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:31:19] <fizzie> Oh, look, there's a v5 of the standalone type-inference proposal now. http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2891.pdf
[17:31:31] <fizzie> (Dated appropriately on December 25th.)
[17:32:34] <constxo> that is a neat trick
[17:32:55] <constxo> using X + Y as the controlling expression for _Generic
[17:33:07] <constxo> not sure if it's called controlling expression but i'm calling it that
[17:33:54] <sham1> It is now
[17:34:13] <earnest> So much for "the devil you know", Mr. Holzmann
[17:34:21] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:35:26] *** Joins: lunix00 (~lunix00@179.232.161.86)
[17:36:20] *** Joins: Leonard (~Administr@114.55.127.80)
[17:36:43] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[17:36:56] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[17:37:51] *** BCMM_ is now known as BCMM
[17:38:08] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f439:b353:9768:d2)
[17:38:08] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f439:b353:9768:d2) (Changing host)
[17:38:08] *** Joins: skapata (~Skapata@user/skapata)
[17:38:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:38:47] *** Quits: Leonard (~Administr@114.55.127.80) (Max SendQ exceeded)
[17:39:12] *** Quits: lunix00 (~lunix00@179.232.161.86) (Client Quit)
[17:39:16] *** Joins: Leonard (~Administr@114.55.127.80)
[17:40:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:41:51] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[17:43:47] *** Joins: mrig_ (~mrig@2a01:cb1c:abc:de00:7d2d:b0c5:64f6:f48f)
[17:45:11] <sham1> ,cc -args=c2x struct { int a; } foo(int a) { return (typeof(foo(a))){.a = a,}; } typeof(foo(1)) a = foo(1);
[17:45:13] <candide> sham1: warning: ISO C forbids nested functions [-Wpedantic]  In function 'foo':  warning: implicit declaration of function 'typeof' [-Wimplicit-function-declaration]  error: incompatible types when returning type 'i​nt' but 'struct <anonymous>' was expected
[17:45:28] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[17:46:37] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[17:47:05] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[17:48:15] *** Quits: mrig_ (~mrig@2a01:cb1c:abc:de00:7d2d:b0c5:64f6:f48f) (Changing host)
[17:48:15] *** Joins: mrig_ (~mrig@user/mrig)
[17:48:15] *** mrig_ is now known as mrig
[17:50:51] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[17:51:31] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[17:51:48] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:52:58] *** Joins: Furai (~Furai@furai.pl)
[17:53:44] *** Joins: rsjw (~quassel@user/rsjw)
[17:54:07] *** Joins: Brainium (~brainium@user/brainium)
[17:57:09] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[17:57:56] *** Joins: mniip (mniip@libera/staff/mniip)
[17:58:05] *** Joins: magla (~gelignite@55d4ca9b.access.ecotel.net)
[17:58:41] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[17:58:54] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[17:58:59] *** Joins: agonhajdari (~textual@user/agonhajdari)
[18:02:39] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:05:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:05:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:05:32] *** Joins: badsektor (~badsektor@user/badsektor)
[18:06:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:06:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:06:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:24] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[18:06:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:06:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:07:43] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:08:13] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[18:08:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:09:44] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:11:22] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[18:12:12] *** Joins: cpuid (~cpuid@co5.at)
[18:12:12] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[18:12:12] *** Joins: cpuid (~cpuid@user/cpuid)
[18:17:34] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Read error: Connection reset by peer)
[18:20:09] *** Joins: Leonard (~Administr@114.55.127.80)
[18:21:01] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[18:21:32] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[18:22:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[18:23:57] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[18:24:45] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[18:25:08] *** Quits: bbju (~bbju@103.144.149.53) (Quit: Client closed)
[18:25:10] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[18:27:03] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[18:30:32] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:31:09] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4f71:e483:695e:a1c3) (Quit: Leaving)
[18:32:48] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Quit: Leaving)
[18:33:37] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 240 seconds)
[18:35:01] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Ping timeout: 240 seconds)
[18:35:24] *** Joins: u0_a391 (~u0_a391@64.85.173.130)
[18:35:28] *** Joins: bud (~bud@user/bud)
[18:36:12] <bud> hello #C
[18:36:22] <bud> im looking at this: https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Option-Example.html
[18:37:31] <bud> and was wondering: why the static struct option long_option[]= ... is being declared inside the loop.
[18:37:55] <clarity> For minimizing scope
[18:38:07] <clarity> If it's not used outside of the loop, why declare it outside of the loop?
[18:38:34] <bud> to not having it declared for each loop iteration?
[18:38:37] *** Quits: marlboro (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:38:44] <omegatron> hence 'static'
[18:38:46] <fizzie> What's the problem with that? It's not like it costs anything.
[18:39:07] <clarity> declarations are not a runtime construct
[18:39:17] *** Quits: kit (~u0_a391@2600:380:a42e:5999:c786:7119:ed8c:ee08) (Ping timeout: 240 seconds)
[18:39:20] <pragma-> Unless you're using an unoptimized C interpreter.
[18:39:20] <fizzie> The object it declares has static storage duration, so it's still initialized only once, "before program startup".
[18:39:24] <clarity> Yeah.
[18:39:47] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:39:53] <clarity> And VLAs maybe.
[18:40:16] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[18:40:28] <bud> great answers , thanks!
[18:40:55] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[18:41:28] <bud> i am experimenting with a boilerplate makefile thing, where i am about to autogenerate that getopt thing depending on what options are defined and such.
[18:42:02] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:42:43] <bud> defined in an external file in a option synopsis.
[18:42:47] <fizzie> I don't think there'd be anything particularly wrong with having a top-level file-scope list of options, though. Yes, it's only "needed" inside the loop, but it can arguably be clearer and more declarative-looking and self-documenting to have it at file scope.
[18:43:15] <sham1> Besides, centralising option handling to a file might be better in some way
[18:43:58] <bud> yeah, that would suit me better i think, since this stuff will be in autogenerated files, and including that inside main() is a bit ugly.
[18:44:23] *** Quits: ewwegweg (~ewwegweg@user/ewwegweg) (Remote host closed the connection)
[18:44:23] *** Joins: de-facto_ (~de-facto@user/de-facto)
[18:45:25] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 240 seconds)
[18:45:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:46:02] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[18:46:37] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[18:47:07] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Ping timeout: 256 seconds)
[18:47:33] *** de-facto_ is now known as de-facto
[18:48:01] *** u0_a391 is now known as Kit
[18:48:25] <Kit> `%512[^\r]\r\n` should match everything up to a CRLF or up to 512 chars, right
[18:51:01] <Kit> nvm i found the issue
[18:51:39] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Ping timeout: 256 seconds)
[18:52:33] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[18:52:35] *** Quits: Whatshisface (~jon@user/Whatshisface) (Quit: BitchX-1.3-git -- just do it.)
[18:54:00] *** Quits: BCMM (~BCMM@user/bcmm) (Quit: Konversation terminated!)
[18:58:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:58:13] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-92.cspire.com) (Read error: Connection reset by peer)
[19:00:13] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[19:00:13] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (*.net *.split)
[19:00:13] *** Quits: rsjw (~quassel@user/rsjw) (*.net *.split)
[19:00:13] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[19:00:13] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (*.net *.split)
[19:00:13] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[19:00:13] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (*.net *.split)
[19:00:13] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[19:00:13] *** Quits: rapier (~rapier@user/rapier) (*.net *.split)
[19:00:13] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (*.net *.split)
[19:00:13] *** Quits: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net) (*.net *.split)
[19:00:13] *** Quits: alch (~alch@151.82.81.187) (*.net *.split)
[19:00:14] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (*.net *.split)
[19:00:14] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (*.net *.split)
[19:00:14] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[19:00:14] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[19:00:14] *** Quits: random-nick (~random-ni@87.116.167.125) (*.net *.split)
[19:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[19:00:14] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (*.net *.split)
[19:00:14] *** Quits: Klinda (~superleag@user/klinda) (*.net *.split)
[19:00:14] *** Quits: pucara (~i@181.91.29.65) (*.net *.split)
[19:00:14] *** Quits: katsuragi (katsuragi@tilde.institute) (*.net *.split)
[19:00:14] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (*.net *.split)
[19:00:14] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[19:00:14] *** Quits: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (*.net *.split)
[19:00:14] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (*.net *.split)
[19:00:14] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[19:00:14] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (*.net *.split)
[19:00:14] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[19:00:14] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (*.net *.split)
[19:00:14] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[19:00:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[19:00:14] *** Quits: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr) (*.net *.split)
[19:00:14] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (*.net *.split)
[19:00:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[19:00:14] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[19:00:14] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[19:00:14] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[19:00:14] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it) (*.net *.split)
[19:00:14] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (*.net *.split)
[19:00:14] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (*.net *.split)
[19:00:14] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[19:00:14] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[19:00:14] *** Quits: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869) (*.net *.split)
[19:00:14] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[19:00:14] *** Quits: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4) (*.net *.split)
[19:00:14] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[19:00:14] *** Quits: heftig (heftig@archlinux/developer/heftig) (*.net *.split)
[19:00:14] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[19:00:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[19:00:14] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (*.net *.split)
[19:00:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[19:00:14] *** Quits: Radionova327 (~TStaley@097-070-031-249.res.spectrum.com) (*.net *.split)
[19:00:14] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[19:00:14] *** Quits: noonien (~noonien@86.127.212.246) (*.net *.split)
[19:00:14] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (*.net *.split)
[19:00:14] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[19:00:14] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (*.net *.split)
[19:00:14] *** Quits: Akawama[m] (~akawama@user/akawama) (*.net *.split)
[19:00:15] *** Quits: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f) (*.net *.split)
[19:00:15] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (*.net *.split)
[19:00:15] *** Quits: gnoo (gnoo@user/gnoo) (*.net *.split)
[19:00:15] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (*.net *.split)
[19:00:15] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[19:00:15] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[19:00:15] *** Quits: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (*.net *.split)
[19:00:15] *** Quits: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net) (*.net *.split)
[19:00:15] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[19:00:15] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[19:00:15] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[19:00:15] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (*.net *.split)
[19:00:15] *** Quits: tobiasu (~tobiasu@user/tobiasu) (*.net *.split)
[19:00:15] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[19:00:15] *** Quits: jenkins (jenkins@user/jenkins) (*.net *.split)
[19:00:15] *** Quits: ikiryo (sid109660@user/ikiryo) (*.net *.split)
[19:00:15] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[19:00:15] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[19:00:15] *** Quits: meowray (MaskRay@2600:3c01::f03c:91ff:fea1:e018) (*.net *.split)
[19:00:15] *** Quits: sirdidymus (~sirdidymu@sorcsys.net) (*.net *.split)
[19:00:15] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[19:00:15] *** Quits: glider (~glider@user/glider) (*.net *.split)
[19:00:15] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[19:00:15] *** Quits: domve (~dom@user/domve) (*.net *.split)
[19:00:15] *** Quits: dhch (~dhch@185.213.154.165) (*.net *.split)
[19:00:15] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[19:00:15] *** Quits: koollman (samson_t@user/koollman) (*.net *.split)
[19:00:15] *** Quits: gerogerigegege (gauze@entropy.tmok.com) (*.net *.split)
[19:00:15] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[19:00:15] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[19:00:15] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (*.net *.split)
[19:00:15] *** Quits: carrar (~tim@osburn.jp) (*.net *.split)
[19:00:15] *** Quits: Tordek (tordek@triton.blinkenshell.org) (*.net *.split)
[19:00:15] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (*.net *.split)
[19:00:15] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[19:00:15] *** Quits: Ckat (~Ckat@xn--z7x.xn--6frz82g) (*.net *.split)
[19:00:15] *** Quits: nate (NBishop@o.apocaleaps.com) (*.net *.split)
[19:00:15] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[19:00:15] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (*.net *.split)
[19:00:15] *** Quits: Leonard (~Administr@114.55.127.80) (*.net *.split)
[19:00:15] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[19:00:16] *** Quits: inomoz (~inomoz@176.59.115.63) (*.net *.split)
[19:00:16] *** Quits: BSaboia (~bsaboia@177.37.198.83) (*.net *.split)
[19:00:16] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[19:00:16] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[19:00:16] *** Quits: earnest (~earnest@user/earnestly) (*.net *.split)
[19:00:16] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[19:00:16] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (*.net *.split)
[19:00:16] *** Quits: Praise- (~Fat@user/praise) (*.net *.split)
[19:00:16] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (*.net *.split)
[19:00:16] *** Quits: stonkey (~stonkey@user/stonkey) (*.net *.split)
[19:00:16] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[19:00:16] *** Quits: davros (~davros@host86-185-61-39.range86-185.btcentralplus.com) (*.net *.split)
[19:00:16] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[19:00:16] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[19:00:16] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[19:00:16] *** Quits: Teukka (~teukka@user/Teukka) (*.net *.split)
[19:00:16] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (*.net *.split)
[19:00:16] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[19:00:16] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (*.net *.split)
[19:00:16] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[19:00:16] *** Quits: rany (~rany@user/rany) (*.net *.split)
[19:00:16] *** Quits: LuKaRo (~LuKaRo@p4fc32532.dip0.t-ipconnect.de) (*.net *.split)
[19:00:16] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[19:00:16] *** Quits: Chpy0 (~chpy@30-8-178-69.static.gci.net) (*.net *.split)
[19:00:16] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (*.net *.split)
[19:00:16] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[19:00:16] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (*.net *.split)
[19:00:16] *** Quits: moose (~moose@user/moose) (*.net *.split)
[19:00:16] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[19:00:16] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[19:00:16] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[19:00:16] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[19:00:16] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[19:00:16] *** Quits: haniaF (~haniaF@83.24.197.161.ipv4.supernova.orange.pl) (*.net *.split)
[19:00:16] *** Quits: dsrt^ (~dsrt@207.5.21.20) (*.net *.split)
[19:00:16] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[19:00:16] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[19:00:16] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[19:00:16] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[19:00:16] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[19:00:16] *** Quits: asd (~noname@user/asd) (*.net *.split)
[19:00:16] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (*.net *.split)
[19:00:16] *** Quits: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net) (*.net *.split)
[19:00:16] *** Quits: csjp (~csjp@user/csjp) (*.net *.split)
[19:00:16] *** Quits: llh (~llh@user/llh) (*.net *.split)
[19:00:16] *** Quits: tbcr (~tbcr@107.13.189.161) (*.net *.split)
[19:00:16] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[19:00:16] *** Quits: noose (~noose@user/noose) (*.net *.split)
[19:00:16] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[19:00:16] *** Quits: eht (~eht@user/eht) (*.net *.split)
[19:00:16] *** Quits: ColdKeyb- (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[19:00:16] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[19:00:16] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[19:00:16] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[19:00:16] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (*.net *.split)
[19:00:16] *** Quits: citrons_ (~citrons@alt.mondecitronne.com) (*.net *.split)
[19:00:16] *** Quits: avarab (avar@vm.nix.is) (*.net *.split)
[19:00:16] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[19:00:16] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[19:00:16] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[19:00:16] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[19:00:16] *** Quits: Guest4084 (~vin@user/crash) (*.net *.split)
[19:00:16] *** Quits: th1 (~th@test.secomondo.dk) (*.net *.split)
[19:00:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[19:00:16] *** Quits: xcm___ (~xcm@user/xcm) (*.net *.split)
[19:00:16] *** Quits: alicef (~none@gentoo/developer/alicef) (*.net *.split)
[19:00:16] *** Quits: zlg_ (~zlg@user/zlg) (*.net *.split)
[19:00:16] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[19:00:16] *** Quits: Cyp (~cyp@213.237.85.9) (*.net *.split)
[19:00:16] *** Quits: dos (~dos@dosowisko.net) (*.net *.split)
[19:00:16] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (*.net *.split)
[19:00:16] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[19:00:16] *** Quits: remedan_ (~remedan@octo.cafe) (*.net *.split)
[19:00:16] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[19:00:16] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (*.net *.split)
[19:00:16] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[19:00:16] *** Quits: fstd_ (~fstd@xdsl-78-35-82-60.nc.de) (*.net *.split)
[19:00:17] *** Quits: coruja (~coruja@user/coruja) (*.net *.split)
[19:00:17] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[19:00:17] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[19:00:17] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[19:00:17] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[19:00:17] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[19:00:17] *** Quits: amorel_ (~amorel@mx.mompl.net) (*.net *.split)
[19:00:17] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (*.net *.split)
[19:00:17] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[19:00:17] *** Quits: e36freak (~e36freak@user/e36freak) (*.net *.split)
[19:00:17] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[19:00:17] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[19:00:17] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[19:00:17] *** Quits: root____ (~root@157.245.144.252) (*.net *.split)
[19:00:17] *** Quits: GyrosGeier (~geier@185.27.255.155) (*.net *.split)
[19:00:17] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[19:00:17] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[19:00:17] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[19:00:17] *** Quits: nukedclx (nukedclx@shell.k4be.pl) (*.net *.split)
[19:00:17] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[19:00:17] *** Quits: phroa (~phroa@user/phroa) (*.net *.split)
[19:00:17] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[19:00:17] *** Quits: clarity (~clarity@user/clarity) (*.net *.split)
[19:00:17] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[19:00:17] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (*.net *.split)
[19:00:17] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (*.net *.split)
[19:00:17] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (*.net *.split)
[19:00:17] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[19:00:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[19:00:17] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (*.net *.split)
[19:00:17] *** Quits: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3) (*.net *.split)
[19:00:17] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (*.net *.split)
[19:00:17] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (*.net *.split)
[19:00:17] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[19:00:17] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[19:00:17] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[19:00:17] *** Quits: oldlaptop (~quassel@45.63.78.126) (*.net *.split)
[19:00:17] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[19:00:17] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[19:00:17] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[19:00:17] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[19:00:17] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (*.net *.split)
[19:00:17] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[19:00:17] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[19:00:17] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[19:00:17] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[19:00:17] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[19:00:17] *** Quits: stilbruch (~stilbruch@157.245.122.124) (*.net *.split)
[19:00:17] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[19:00:17] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[19:00:17] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[19:00:17] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (*.net *.split)
[19:00:17] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: selikolg (~selikolg@178.62.2.76) (*.net *.split)
[19:00:18] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[19:00:18] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[19:00:18] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: glenfe (sid231748@user/glenfe) (*.net *.split)
[19:00:18] *** Quits: jellie (~luv_panda@user/jellie) (*.net *.split)
[19:00:18] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[19:00:18] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[19:00:18] *** Quits: eau (~chat@user/eau) (*.net *.split)
[19:00:18] *** Quits: avrdude (~avrdude@user/avrdude) (*.net *.split)
[19:00:18] *** Quits: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2) (*.net *.split)
[19:00:18] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[19:00:18] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[19:00:18] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[19:00:18] *** Quits: veltas (~veltas@104.236.34.215) (*.net *.split)
[19:00:18] *** Quits: livestradamus (~quassel@user/livestradamus) (*.net *.split)
[19:00:18] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[19:00:18] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (*.net *.split)
[19:00:18] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[19:00:18] *** Quits: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793) (*.net *.split)
[19:00:18] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (*.net *.split)
[19:00:18] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (*.net *.split)
[19:00:18] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[19:00:18] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (*.net *.split)
[19:00:18] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (*.net *.split)
[19:00:18] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[19:00:18] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[19:00:18] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[19:00:18] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[19:00:18] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[19:00:18] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[19:00:18] *** Quits: neunon (~neunon@user/neunon) (*.net *.split)
[19:00:19] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[19:00:19] *** Quits: keinbock (uid6451@id-6451.helmsley.irccloud.com) (*.net *.split)
[19:00:19] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[19:00:19] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[19:00:19] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (*.net *.split)
[19:00:19] *** Quits: lemontree (~chat@user/lemontree) (*.net *.split)
[19:00:19] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[19:00:19] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[19:00:19] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[19:00:19] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[19:00:19] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (*.net *.split)
[19:00:19] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[19:00:19] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[19:00:19] *** Quits: subvisor (sid502026@2a03:5180:f:1::7:a90a) (*.net *.split)
[19:00:19] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[19:00:19] *** Quits: tom5760 (73d4025b14@user/tom5760) (*.net *.split)
[19:00:19] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[19:00:19] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (*.net *.split)
[19:00:19] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[19:00:19] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (*.net *.split)
[19:00:19] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[19:00:19] *** Quits: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com) (*.net *.split)
[19:00:19] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[19:00:19] *** Quits: hoho (hoho@user/hoho) (*.net *.split)
[19:00:19] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (*.net *.split)
[19:00:19] *** Quits: nf (~n@monade.li) (*.net *.split)
[19:00:19] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[19:00:19] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[19:00:19] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[19:00:19] *** Quits: supernov1h (~supernova@mail.ijk.nz) (*.net *.split)
[19:00:19] *** Quits: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[19:00:19] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[19:00:19] *** Quits: knittl (~knittl@user/knittl) (*.net *.split)
[19:00:19] *** Quits: savy_ (~z@io.tl) (*.net *.split)
[19:00:19] *** Quits: herrhotzenplotz (~herrhotze@user/herrhotzenplotz) (*.net *.split)
[19:00:19] *** Quits: z14 (~alzee@user/alzee) (*.net *.split)
[19:00:19] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[19:00:19] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[19:00:19] *** Quits: danieln (~danieln@erebor.danieln.de) (*.net *.split)
[19:00:19] *** Quits: caze (~caze@user/caze) (*.net *.split)
[19:00:19] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[19:00:19] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[19:00:19] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[19:00:19] *** Quits: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d) (*.net *.split)
[19:00:20] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[19:00:20] *** Quits: tarzeau (~alex@mail.aiei.ch) (*.net *.split)
[19:00:20] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[19:00:20] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[19:00:20] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[19:00:20] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[19:00:20] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[19:00:20] *** Quits: ripsquid (~ripsquid@user/ripsquid) (*.net *.split)
[19:00:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[19:00:20] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[19:00:20] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[19:00:20] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (*.net *.split)
[19:00:20] *** Quits: bebyx (~Thunderbi@user/bebyx) (*.net *.split)
[19:00:20] *** Quits: go4godvin (~go4godvin@user/go4godvin) (*.net *.split)
[19:00:20] *** Quits: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196) (*.net *.split)
[19:00:20] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[19:00:20] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (*.net *.split)
[19:00:20] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (*.net *.split)
[19:00:20] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[19:00:21] *** Quits: daurn (~daurnimat@vultr.daurnimator.com) (*.net *.split)
[19:00:21] *** Quits: randm (~randm@user/randm) (*.net *.split)
[19:00:21] *** Quits: xse (~xse@user/xse) (*.net *.split)
[19:00:21] *** Quits: epony (epony@user/epony) (*.net *.split)
[19:00:21] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[19:00:21] *** Quits: g1n (~g1n@user/g1n) (*.net *.split)
[19:00:21] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[19:00:21] *** Quits: defjam (~eb0t@90.198.61.46) (*.net *.split)
[19:00:21] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[19:00:21] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[19:00:21] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[19:00:21] *** Quits: armin (~armin@unix.porn) (*.net *.split)
[19:00:21] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[19:00:21] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[19:00:21] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[19:00:21] *** Quits: APic (apic@apic.name) (*.net *.split)
[19:00:21] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[19:00:21] *** Quits: thiccdaddy (~o_O@user/thiccdaddy) (*.net *.split)
[19:00:21] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: kplant (~kplant@user/kplant) (*.net *.split)
[19:00:21] *** Quits: welt (~welt@willow.spiderden.net) (*.net *.split)
[19:00:21] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[19:00:22] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[19:00:22] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[19:00:22] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[19:00:22] *** Quits: Freman (~Freman@flatus.fremnet.net) (*.net *.split)
[19:00:22] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[19:00:22] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[19:00:22] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[19:00:22] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (*.net *.split)
[19:00:22] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[19:00:22] *** Quits: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d) (*.net *.split)
[19:00:22] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (*.net *.split)
[19:00:22] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[19:00:22] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (*.net *.split)
[19:00:22] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[19:00:22] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[19:00:22] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[19:00:22] *** Quits: kristian84 (~asdf@ti0037a400-4119.bb.online.no) (*.net *.split)
[19:00:23] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (*.net *.split)
[19:00:23] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[19:00:23] *** Quits: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[19:00:23] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[19:00:23] *** Quits: buzel (~buzel@fsf/member/buzel) (*.net *.split)
[19:00:23] *** Quits: homura (uid398348@user/homura) (*.net *.split)
[19:00:23] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[19:00:23] *** Quits: englishm (sid6629@id-6629.tinside.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[19:00:23] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[19:00:23] *** Quits: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce) (*.net *.split)
[19:00:23] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[19:00:23] *** Quits: zalt (~zalt@user/zalt) (*.net *.split)
[19:00:23] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[19:00:23] *** Quits: samir_ (~azureuser@user/samir) (*.net *.split)
[19:00:23] *** Quits: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net) (*.net *.split)
[19:00:23] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[19:00:23] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[19:00:23] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[19:00:23] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[19:00:23] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (*.net *.split)
[19:00:23] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[19:00:23] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (*.net *.split)
[19:00:23] *** Quits: routeveg_ (~lee@197.ip-51-195-136.eu) (*.net *.split)
[19:00:23] *** Quits: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch) (*.net *.split)
[19:00:23] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[19:00:23] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[19:00:23] *** Quits: edr (~edr@user/edr) (*.net *.split)
[19:00:23] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[19:00:24] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[19:00:24] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[19:00:24] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[19:00:24] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[19:00:24] *** Quits: jason1234 (fltk@thunix.net) (*.net *.split)
[19:00:24] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[19:00:24] *** Quits: koisoke (xef4@epilogue.org) (*.net *.split)
[19:00:24] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (*.net *.split)
[19:00:24] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (*.net *.split)
[19:00:24] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (*.net *.split)
[19:00:24] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[19:00:24] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[19:00:24] *** Quits: summonner (~summonner@188.26.74.156) (*.net *.split)
[19:00:24] *** Quits: deflected (~deflected@user/deflected) (*.net *.split)
[19:00:24] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[19:00:24] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[19:00:24] *** Quits: PaulePanter (~paul@mail.gw90.de) (*.net *.split)
[19:00:24] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[19:00:24] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[19:00:24] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[19:00:24] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[19:00:24] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[19:00:24] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[19:00:25] *** Quits: jimboj1m (~jimboj1m@96.234.171.7) (*.net *.split)
[19:00:25] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[19:00:25] *** Quits: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu) (*.net *.split)
[19:00:25] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[19:00:25] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (*.net *.split)
[19:00:25] *** Quits: int (~int@0x4.cx) (*.net *.split)
[19:00:25] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[19:00:25] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[19:00:25] *** Quits: houze (~houze@user/houze) (*.net *.split)
[19:00:25] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[19:00:25] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[19:00:25] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (*.net *.split)
[19:00:25] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[19:00:25] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (*.net *.split)
[19:00:25] *** Quits: les (znc@user/les) (*.net *.split)
[19:00:25] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[19:00:25] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[19:00:25] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[19:00:26] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[19:00:26] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (*.net *.split)
[19:00:26] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[19:00:26] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[19:00:26] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[19:00:26] *** Quits: Seng (~nick@hurtig.ninja) (*.net *.split)
[19:00:26] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[19:00:26] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[19:00:26] *** Quits: tempora (~tempus@user/tempora) (*.net *.split)
[19:00:26] *** Quits: sebbu (~sebbu@user/sebbu) (*.net *.split)
[19:00:26] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[19:00:26] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (*.net *.split)
[19:00:26] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[19:00:26] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (*.net *.split)
[19:00:26] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[19:00:26] *** Quits: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12) (*.net *.split)
[19:00:26] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[19:00:26] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[19:00:26] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[19:00:26] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[19:00:26] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[19:00:27] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[19:00:27] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[19:00:27] *** Quits: Elladan (~elladan@user/elladan) (*.net *.split)
[19:00:27] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[19:00:27] *** Quits: mrec_ (~markus@sundtek.de) (*.net *.split)
[19:00:27] *** Quits: Mindiell (~Mindiell@82-64-206-161.subs.proxad.net) (*.net *.split)
[19:00:27] *** Quits: novns (~novns@user/novns) (*.net *.split)
[19:00:27] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[19:00:27] *** Quits: m0shbear (~nope@205.185.119.231) (*.net *.split)
[19:00:27] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[19:00:27] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[19:00:27] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[19:00:27] *** Quits: MrAureliusR_ (~MrAureliu@user/mraureliusr) (*.net *.split)
[19:00:27] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[19:00:27] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[19:00:27] *** Quits: joev1 (~joev@user/joev) (*.net *.split)
[19:00:27] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[19:00:27] *** Quits: ChoHag_ (~mking@81.187.183.71) (*.net *.split)
[19:00:27] *** Quits: cation (cation@user/cation) (*.net *.split)
[19:00:27] *** Quits: Xgc (~Xgc@user/xgc) (*.net *.split)
[19:00:27] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[19:00:27] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[19:00:27] *** Quits: Echoz_ (~chris@user/echoz) (*.net *.split)
[19:00:27] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[19:00:27] *** Quits: dansan_ (~daniel@75.81.148.51) (*.net *.split)
[19:00:27] *** Quits: pony (sid524992@smol/hors) (*.net *.split)
[19:00:27] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[19:00:27] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[19:00:27] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[19:00:27] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[19:00:27] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[19:00:27] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[19:00:27] *** Quits: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net) (*.net *.split)
[19:00:27] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[19:00:27] *** Quits: kernelc (~kornel@46.101.204.33) (*.net *.split)
[19:00:27] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[19:00:27] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[19:00:27] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[19:00:27] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[19:00:27] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[19:00:28] *** Quits: shokara (8a599707f6@198.108.77.17) (*.net *.split)
[19:00:28] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[19:00:28] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[19:00:28] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[19:00:28] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[19:00:28] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[19:00:28] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[19:00:28] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[19:00:28] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[19:00:28] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[19:00:28] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[19:00:28] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[19:00:28] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[19:00:28] *** Quits: gemelen (~gemelen@zooey.gemelen.net) (*.net *.split)
[19:00:28] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[19:00:28] *** Quits: Justin_T (~Justin@user/justin-t/x-2449983) (*.net *.split)
[19:00:28] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[19:00:28] *** Quits: trafficjam (~trafficja@119.17.42.59) (*.net *.split)
[19:00:28] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[19:00:28] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[19:00:28] *** Quits: kish` (~aqua@user/aqua) (*.net *.split)
[19:00:28] *** Quits: tejr (~tejr@user/tejr) (*.net *.split)
[19:00:28] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[19:00:28] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[19:00:28] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[19:00:28] *** Quits: diiirt (~diiirt@user/diiirt) (*.net *.split)
[19:00:28] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (*.net *.split)
[19:00:28] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[19:00:28] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (*.net *.split)
[19:00:28] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[19:01:13] *** Joins: Tom (~Tom^@98.128.186.114)
[19:01:13] *** Joins: cpuid (~cpuid@user/cpuid)
[19:01:13] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[19:01:13] *** Joins: rsjw (~quassel@user/rsjw)
[19:01:13] *** Joins: Furai (~Furai@furai.pl)
[19:01:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:01:13] *** Joins: skapata (~Skapata@user/skapata)
[19:01:13] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[19:01:13] *** Joins: pulse (~pulse@user/pulse)
[19:01:13] *** Joins: rapier (~rapier@user/rapier)
[19:01:13] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:01:13] *** Joins: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net)
[19:01:13] *** Joins: alch (~alch@151.82.81.187)
[19:01:13] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[19:01:13] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[19:01:13] *** Joins: Byteflux (~byte@byteflux.net)
[19:01:13] *** Joins: ozzz (~oz@46.49.41.80)
[19:01:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[19:01:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:01:13] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[19:01:13] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[19:01:13] *** Joins: Klinda (~superleag@user/klinda)
[19:01:13] *** Joins: pucara (~i@181.91.29.65)
[19:01:13] *** Joins: katsuragi (katsuragi@tilde.institute)
[19:01:13] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[19:01:13] *** Joins: bkhl (~bkhl@user/bkhl)
[19:01:13] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[19:01:13] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[19:01:13] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[19:01:13] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:01:13] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[19:01:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[19:01:13] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:01:13] *** Joins: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr)
[19:01:13] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[19:01:13] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[19:01:13] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[19:01:13] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[19:01:13] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[19:01:13] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it)
[19:01:13] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[19:01:13] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:01:13] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[19:01:13] *** Joins: vysn (~vysn@user/vysn)
[19:01:13] *** Joins: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869)
[19:01:13] *** Joins: cebor (~cebor@user/cebor)
[19:01:13] *** Joins: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4)
[19:01:13] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[19:01:13] *** Joins: heftig (heftig@archlinux/developer/heftig)
[19:01:13] *** Joins: Soni (~quassel@autistic.space)
[19:01:13] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[19:01:13] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[19:01:13] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[19:01:13] *** Joins: leah2 (~leah@vuxu.org)
[19:01:13] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:01:13] *** Joins: Radionova327 (~TStaley@097-070-031-249.res.spectrum.com)
[19:01:13] *** Joins: noonien (~noonien@86.127.212.246)
[19:01:13] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[19:01:47] *** Joins: trafficjam (~trafficja@119.17.42.59)
[19:01:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:01:58] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[19:01:58] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[19:01:58] *** Joins: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d)
[19:01:58] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[19:01:58] *** Joins: Karyon (~Karyon@user/karyon)
[19:01:58] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[19:01:58] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[19:01:58] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[19:01:58] *** Joins: Epakai (Epakai@drislock.org)
[19:01:58] *** Joins: Trashlord (~trash@user/trashlord)
[19:01:58] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[19:01:58] *** Joins: kristian84 (~asdf@ti0037a400-4119.bb.online.no)
[19:01:58] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[19:01:58] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[19:01:58] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[19:01:58] *** Joins: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:01:58] *** Joins: zalt (~zalt@user/zalt)
[19:01:58] *** Joins: gshumway (~gshumway@user/gshumway)
[19:01:58] *** Joins: buzel (~buzel@fsf/member/buzel)
[19:01:58] *** Joins: homura (uid398348@user/homura)
[19:01:58] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[19:01:58] *** Joins: FragByte (~christian@user/fragbyte)
[19:01:58] *** Joins: aosync (~aws@mx1.aosync.me)
[19:01:58] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[19:01:58] *** Joins: asm (~alexander@user/asm)
[19:01:58] *** Joins: Ragnor (~Ragnor@user/ragnor)
[19:01:58] *** Joins: Zenton (~user@user/zenton)
[19:01:58] *** Joins: samir_ (~azureuser@user/samir)
[19:01:58] *** Joins: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net)
[19:01:58] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[19:01:58] *** Joins: Luke (~ldm@hacksoc/member)
[19:01:58] *** Joins: divine (~divine@2001:470:8247:1::31)
[19:01:58] *** Joins: strudl (~strudl@user/strudl)
[19:01:58] *** Joins: omegatron (~some@p5484973e.dip0.t-ipconnect.de)
[19:01:58] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[19:01:58] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[19:01:58] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[19:01:58] *** Joins: routeveg_ (~lee@197.ip-51-195-136.eu)
[19:01:58] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[19:01:58] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[19:01:58] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[19:01:58] *** Joins: con3 (~con3@143.198.53.32)
[19:01:58] *** Joins: edr (~edr@user/edr)
[19:01:58] *** Joins: reda_ (~reda@user/reda)
[19:01:58] *** Joins: dzz007 (~dzz007@user/dzz007)
[19:01:58] *** Joins: bone (~bone@user/mbo)
[19:01:58] *** Joins: Stx (stx@libera/staff/stx)
[19:01:58] *** Joins: kline (~freedom0@libera/staff/kline)
[19:01:58] *** Joins: koisoke (xef4@epilogue.org)
[19:01:58] *** Joins: shachaf (~shachaf@user/shachaf)
[19:01:58] *** Joins: jason1234 (fltk@thunix.net)
[19:02:03] *** Joins: ripsquid (~ripsquid@user/ripsquid)
[19:02:03] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[19:02:03] *** Joins: gl (~x@pwn.lu)
[19:02:03] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[19:02:03] *** Joins: laris (undead@37.221.209.36)
[19:02:07] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:02:07] *** Joins: _4p3 (~ape@kanonenjagd.panzer.ninja)
[19:02:07] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:02:07] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[19:02:07] *** Joins: g1n (~g1n@user/g1n)
[19:02:07] *** Joins: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196)
[19:02:07] *** Joins: paulo (paulo@user/paulo/x-9032687)
[19:02:07] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[19:02:07] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[19:02:07] *** Joins: g2anj (~v@58.228.230.4)
[19:02:07] *** Joins: daurn (~daurnimat@vultr.daurnimator.com)
[19:02:07] *** Joins: randm (~randm@user/randm)
[19:02:07] *** Joins: xse (~xse@user/xse)
[19:02:07] *** Joins: epony (epony@user/epony)
[19:02:07] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[19:02:07] *** Joins: OverCoder (~OverCoder@user/overcoder)
[19:02:07] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[19:02:07] *** Joins: defjam (~eb0t@90.198.61.46)
[19:02:07] *** Joins: armin (~armin@unix.porn)
[19:02:07] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[19:02:07] *** Joins: DonRichie (~DonRichie@ricl.de)
[19:02:07] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:02:07] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[19:02:07] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[19:02:07] *** Joins: gonogo (~gonogo@167.88.62.87)
[19:02:07] *** Joins: APic (apic@apic.name)
[19:02:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[19:02:07] *** Joins: thiccdaddy (~o_O@user/thiccdaddy)
[19:02:07] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[19:02:07] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[19:02:07] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[19:02:07] *** Joins: kplant (~kplant@user/kplant)
[19:02:07] *** Joins: welt (~welt@willow.spiderden.net)
[19:02:07] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[19:02:07] *** Joins: trenka (~ykaliuta@user/trenka)
[19:02:07] *** Joins: sudden (~cat@user/sudden)
[19:02:07] *** Joins: TallonRain (sid214799@user/tallonrain)
[19:02:07] *** Joins: leosilva (~leosilva@canonical/leosilva)
[19:02:07] *** Joins: Freman (~Freman@flatus.fremnet.net)
[19:02:07] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[19:02:07] *** Joins: n1000 (~n1000@user/n1000)
[19:02:08] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Max SendQ exceeded)
[19:02:10] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[19:02:10] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Max SendQ exceeded)
[19:02:15] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[19:02:15] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[19:02:15] *** Joins: PaulePanter (~paul@mail.gw90.de)
[19:02:15] *** Joins: JanC (~janc@user/janc)
[19:02:15] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[19:02:15] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[19:02:15] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[19:02:15] *** Joins: summonner (~summonner@188.26.74.156)
[19:02:15] *** Joins: deflected (~deflected@user/deflected)
[19:02:15] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[19:02:15] *** Joins: edk (edk@libera/staff/edk)
[19:02:15] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[19:02:15] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[19:02:15] *** Joins: noarb (~noarb@user/noarb)
[19:02:15] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[19:02:15] *** Joins: Seng (~nick@hurtig.ninja)
[19:02:15] *** Joins: jancoow (~jancoow@user/jancoow)
[19:02:15] *** Joins: jimboj1m (~jimboj1m@96.234.171.7)
[19:02:15] *** Joins: finsternis (~X@23.226.237.192)
[19:02:15] *** Joins: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu)
[19:02:15] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[19:02:15] *** Joins: phryk (~totallyno@user/phryk)
[19:02:15] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[19:02:15] *** Joins: int (~int@0x4.cx)
[19:02:15] *** Joins: krzych (krzych@nroot.pl)
[19:02:15] *** Joins: houze (~houze@user/houze)
[19:02:15] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[19:02:15] *** Joins: FLHerne (flh@flherne.uk)
[19:02:15] *** Joins: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu)
[19:02:15] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[19:02:15] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[19:02:15] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[19:02:15] *** Joins: les (znc@user/les)
[19:02:15] *** Joins: markand (~markand@markand.fr)
[19:02:15] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[19:02:15] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[19:02:15] *** Joins: Emil (emil@emil.fi)
[19:02:15] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[19:02:15] *** Joins: fizzie (irc@selene.zem.fi)
[19:02:15] *** Joins: chiptuner (~bobby@user/chiptuner)
[19:02:15] *** Joins: enyc (~enyc@user/enyc)
[19:02:15] *** Joins: trn (jhj@sourcehut/user/trn)
[19:02:15] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[19:02:15] *** Joins: tempora (~tempus@user/tempora)
[19:02:15] *** Joins: sebbu (~sebbu@user/sebbu)
[19:02:15] *** Joins: MrC (Ben@mrbenc.net)
[19:02:16] *** Quits: enyc (~enyc@user/enyc) (Max SendQ exceeded)
[19:02:16] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[19:02:21] *** Joins: z14 (~alzee@user/alzee)
[19:02:21] *** Joins: keinbock (uid6451@id-6451.helmsley.irccloud.com)
[19:02:21] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[19:02:21] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[19:02:21] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[19:02:21] *** Joins: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793)
[19:02:21] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[19:02:21] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[19:02:21] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[19:02:21] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[19:02:21] *** Joins: hussam (~hussam@user/hussam)
[19:02:21] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[19:02:21] *** Joins: tafa (~tafa@user/tafa)
[19:02:21] *** Joins: kapil- (~kapil@2a01:4f9:c010:c9c3::1)
[19:02:21] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[19:02:21] *** Joins: baloona (~baloona@mail.baloona.de)
[19:02:21] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[19:02:21] *** Joins: neunon (~neunon@user/neunon)
[19:02:21] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[19:02:21] *** Joins: knittl (~knittl@user/knittl)
[19:02:21] *** Joins: gdd (~gdd@129.199.146.230)
[19:02:21] *** Joins: jda (~jadra@chai.0xbad.coffee)
[19:02:21] *** Joins: nf (~n@monade.li)
[19:02:21] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:02:21] *** Joins: hoho (hoho@user/hoho)
[19:02:21] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[19:02:21] *** Joins: lemontree (~chat@user/lemontree)
[19:02:21] *** Joins: dme2 (~dme2@67.205.140.199)
[19:02:21] *** Joins: klys (~mdasoh@show.op8.us)
[19:02:21] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[19:02:21] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[19:02:21] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[19:02:21] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:02:21] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[19:02:21] *** Joins: subvisor (sid502026@2a03:5180:f:1::7:a90a)
[19:02:21] *** Joins: tom5760 (73d4025b14@user/tom5760)
[19:02:21] *** Joins: Riviera (Riviera@user/riviera)
[19:02:21] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[19:02:21] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[19:02:21] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[19:02:21] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[19:02:21] *** Joins: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com)
[19:02:21] *** Joins: useretail (~useretail@185.132.19.151)
[19:02:21] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[19:02:21] *** Joins: tarzeau (~alex@mail.aiei.ch)
[19:02:21] *** Joins: mgocobachi (~m@ancrae.com)
[19:02:21] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[19:02:21] *** Joins: danieln (~danieln@erebor.danieln.de)
[19:02:21] *** Joins: Isthmusi (~Isthmus@user/isveni)
[19:02:21] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[19:02:21] *** Joins: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[19:02:21] *** Joins: supernov1h (~supernova@mail.ijk.nz)
[19:02:21] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[19:02:21] *** Joins: savy_ (~z@io.tl)
[19:02:21] *** Joins: herrhotzenplotz (~herrhotze@user/herrhotzenplotz)
[19:02:21] *** Joins: Cienisty (Cienisty@user/cienisty)
[19:02:21] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[19:02:21] *** Joins: caze (~caze@user/caze)
[19:02:21] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[19:02:21] *** Joins: vancz (~vancz@user/vancz)
[19:02:21] *** Joins: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d)
[19:02:21] *** Joins: lowin (~lowin@user/lowin)
[19:02:21] *** Joins: Muzer (~muzer@tim32.org)
[19:02:21] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[19:02:21] *** Joins: zacts (~zacts@user/zacts)
[19:02:27] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[19:02:27] *** Joins: Akawama[m] (~akawama@user/akawama)
[19:02:27] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[19:02:27] *** Joins: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f)
[19:02:27] *** Joins: gnoo (gnoo@user/gnoo)
[19:02:27] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[19:02:27] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:02:27] *** Joins: cust_ (amaama@blackbox.amaama.org)
[19:02:27] *** Joins: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[19:02:27] *** Joins: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net)
[19:02:27] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[19:02:27] *** Joins: greenbagels (~gb@user/greenbagels)
[19:02:27] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[19:02:27] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[19:02:27] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[19:02:27] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[19:02:27] *** Joins: jenkins (jenkins@user/jenkins)
[19:02:27] *** Joins: ikiryo (sid109660@user/ikiryo)
[19:02:27] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[19:02:27] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[19:02:27] *** Joins: meowray (MaskRay@2600:3c01::f03c:91ff:fea1:e018)
[19:02:27] *** Joins: sirdidymus (~sirdidymu@sorcsys.net)
[19:02:27] *** Joins: tazle (tazle@kapsi.fi)
[19:02:27] *** Joins: glider (~glider@user/glider)
[19:02:27] *** Joins: Exa (exa@irc.moe)
[19:02:27] *** Joins: domve (~dom@user/domve)
[19:02:27] *** Joins: dhch (~dhch@185.213.154.165)
[19:02:27] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[19:02:27] *** Joins: koollman (samson_t@user/koollman)
[19:02:27] *** Joins: gerogerigegege (gauze@entropy.tmok.com)
[19:02:27] *** Joins: taru9 (~realTaru9@user/taru9)
[19:02:27] *** Joins: Retr0id (~Retr0id@user/retr0id)
[19:02:27] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[19:02:27] *** Joins: carrar (~tim@osburn.jp)
[19:02:27] *** Joins: Tordek (tordek@triton.blinkenshell.org)
[19:02:27] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[19:02:27] *** Joins: Spydar007 (~spydar007@user/spydar007)
[19:02:27] *** Joins: Ckat (~Ckat@xn--z7x.xn--6frz82g)
[19:02:27] *** Joins: nate (NBishop@o.apocaleaps.com)
[19:02:27] *** Joins: Chaser (~Chaser@user/chaser)
[19:02:27] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[19:02:28] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Max SendQ exceeded)
[19:02:34] *** Tom is now known as Guest7936
[19:02:43] *** Joins: de-facto (~de-facto@user/de-facto)
[19:02:43] *** Joins: bindu (~bindu@user/bindu)
[19:02:43] *** Joins: kish` (~aqua@user/aqua)
[19:02:43] *** Joins: tejr (~tejr@user/tejr)
[19:02:43] *** Joins: teepee (~teepee@openscad/teepee)
[19:02:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:02:43] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:02:43] *** Joins: diiirt (~diiirt@user/diiirt)
[19:02:43] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[19:02:43] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:02:43] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[19:02:43] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:02:45] *** Joins: enyc (~enyc@user/enyc)
[19:02:46] *** Quits: bindu (~bindu@user/bindu) (Max SendQ exceeded)
[19:02:47] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[19:02:49] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[19:02:49] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[19:02:49] *** Joins: jinsun_ (~jinsun@user/jinsun)
[19:02:49] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[19:02:49] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[19:02:49] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[19:02:49] *** Joins: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3)
[19:02:49] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[19:02:49] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[19:02:49] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[19:02:49] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[19:02:49] *** Joins: justIrresolute (~justache@user/justache)
[19:02:49] *** Joins: oldlaptop (~quassel@45.63.78.126)
[19:02:49] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[19:02:49] *** Joins: vinay (~Vinay@user/vinay-keshava)
[19:02:49] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[19:02:49] *** Joins: synbiose (~synbiose@user/synbiose)
[19:02:49] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[19:02:49] *** Joins: Artea (~Lufia@artea.com.pt)
[19:02:49] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[19:02:49] *** Joins: cehteh (~ct@git.pipapo.org)
[19:02:49] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[19:02:49] *** Joins: buhman (sid411355@user/buhman)
[19:02:49] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[19:02:49] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[19:02:49] *** Joins: Learath2 (~learath2@user/learath2)
[19:02:49] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[19:02:49] *** Joins: eof (~eof@tty3.dev)
[19:02:49] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[19:02:49] *** Joins: selikolg (~selikolg@178.62.2.76)
[19:02:49] *** Joins: bparker (~nobody@user/bparker)
[19:02:49] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[19:02:49] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[19:02:49] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:02:49] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[19:02:49] *** Joins: glenfe (sid231748@user/glenfe)
[19:02:49] *** Joins: jellie (~luv_panda@user/jellie)
[19:02:49] *** Joins: twkm (twkm@rfc1459.net)
[19:02:49] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[19:02:49] *** Joins: eau (~chat@user/eau)
[19:02:49] *** Joins: avrdude (~avrdude@user/avrdude)
[19:02:49] *** Joins: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2)
[19:02:49] *** Joins: Celelibi (celelibi@user/celelibi)
[19:02:49] *** Joins: DCTWD (~dc@uz.utmappro.com)
[19:02:49] *** Joins: fakenullie (~nullie@london.nullie.name)
[19:02:49] *** Joins: veltas (~veltas@104.236.34.215)
[19:02:49] *** Joins: livestradamus (~quassel@user/livestradamus)
[19:02:51] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Max SendQ exceeded)
[19:02:51] *** Quits: jinsun_ (~jinsun@user/jinsun) (Max SendQ exceeded)
[19:02:51] *** Quits: justIrresolute (~justache@user/justache) (Max SendQ exceeded)
[19:02:51] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Ping timeout: 245 seconds)
[19:02:54] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[19:02:57] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: hussam (~hussam@user/hussam) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 250 seconds)
[19:03:02] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Ping timeout: 240 seconds)
[19:03:02] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Ping timeout: 240 seconds)
[19:03:05] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[19:03:05] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[19:03:05] *** Joins: ChoHag_ (~mking@81.187.183.71)
[19:03:05] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[19:03:05] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[19:03:05] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[19:03:05] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[19:03:05] *** Joins: abraham (~abraham@143.244.185.86)
[19:03:05] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[19:03:05] *** Joins: Elladan (~elladan@user/elladan)
[19:03:05] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[19:03:05] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[19:03:05] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[19:03:05] *** Joins: celphi (sid97751@user/celphi)
[19:03:05] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[19:03:05] *** Joins: mrec_ (~markus@sundtek.de)
[19:03:05] *** Joins: Mindiell (~Mindiell@82-64-206-161.subs.proxad.net)
[19:03:05] *** Joins: novns (~novns@user/novns)
[19:03:05] *** Joins: ra4king (~ra4king@roiatalla.com)
[19:03:05] *** Joins: m0shbear (~nope@205.185.119.231)
[19:03:05] *** Joins: dcx (~dcx@user/dac)
[19:03:05] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[19:03:05] *** Joins: EtherNet (~ethernet@user/ethernet)
[19:03:05] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[19:03:05] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[19:03:05] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[19:03:05] *** Joins: joev1 (~joev@user/joev)
[19:03:05] *** Joins: tm512 (~tm512@user/tm512)
[19:03:05] *** Joins: cation (cation@user/cation)
[19:03:05] *** Joins: Xgc (~Xgc@user/xgc)
[19:03:05] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[19:03:05] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[19:03:05] *** Joins: Echoz_ (~chris@user/echoz)
[19:03:05] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[19:03:05] *** Joins: dansan_ (~daniel@75.81.148.51)
[19:03:05] *** Joins: pony (sid524992@smol/hors)
[19:03:05] *** Joins: kurfen (~kurfen@176.119.195.10)
[19:03:05] *** Joins: Telvana (~capo@user/telvana)
[19:03:05] *** Joins: Albright (~Albright@149.28.13.173)
[19:03:05] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[19:03:05] *** Joins: BlueShark (sid10311@user/blueshark)
[19:03:05] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[19:03:05] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[19:03:05] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[19:03:05] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[19:03:05] *** Joins: kernelc (~kornel@46.101.204.33)
[19:03:05] *** Joins: bleb (~cm@user/bleb)
[19:03:05] *** Joins: elemongw (~elemongw@20.107.36.50)
[19:03:05] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[19:03:05] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[19:03:05] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[19:03:05] *** Joins: shokara (8a599707f6@198.108.77.17)
[19:03:05] *** Joins: [R] (~rs@genoce.org)
[19:03:05] *** Joins: grumble (grumble@user/grumble)
[19:03:05] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[19:03:05] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[19:03:05] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[19:03:05] *** Joins: mweckbecker (~matthias@weckbecker.name)
[19:03:05] *** Joins: computerquip (sid423484@user/computerquip)
[19:03:05] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[19:03:05] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[19:03:05] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[19:03:05] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[19:03:05] *** Joins: Justin_T (~Justin@user/justin-t/x-2449983)
[19:03:05] *** Joins: orkim (~orkim@user/orkim)
[19:03:05] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[19:03:05] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[19:03:05] *** Joins: lonjil (~quassel@user/lonjil)
[19:03:05] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Ping timeout: 252 seconds)
[19:03:05] *** Quits: Akawama[m] (~akawama@user/akawama) (Ping timeout: 252 seconds)
[19:03:06] *** Joins: bindu (~bindu@user/bindu)
[19:03:07] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (Max SendQ exceeded)
[19:03:07] *** Quits: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12) (Max SendQ exceeded)
[19:03:07] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[19:03:07] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Ping timeout: 260 seconds)
[19:03:09] *** Quits: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d) (Ping timeout: 250 seconds)
[19:03:09] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Ping timeout: 250 seconds)
[19:03:16] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Ping timeout: 268 seconds)
[19:03:16] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Ping timeout: 268 seconds)
[19:03:17] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[19:03:17] *** Joins: Leonard (~Administr@114.55.127.80)
[19:03:17] *** Joins: mniip (mniip@libera/staff/mniip)
[19:03:17] *** Joins: inomoz (~inomoz@176.59.115.63)
[19:03:17] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:03:17] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:03:17] *** Joins: simontime (~simontime@irc.simonti.me)
[19:03:17] *** Joins: earnest (~earnest@user/earnestly)
[19:03:17] *** Joins: seninha (~seninha@user/seninha)
[19:03:17] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[19:03:17] *** Joins: Praise- (~Fat@user/praise)
[19:03:17] *** Joins: dcreator (~kjell@208.92-221-37.customer.lyse.net)
[19:03:17] *** Joins: stonkey (~stonkey@user/stonkey)
[19:03:17] *** Joins: Teckla (~Teckla@user/teckla)
[19:03:17] *** Joins: davros (~davros@host86-185-61-39.range86-185.btcentralplus.com)
[19:03:17] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[19:03:17] *** Joins: Wulf (~Wulf@user/wulf)
[19:03:17] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[19:03:17] *** Joins: Teukka (~teukka@user/Teukka)
[19:03:17] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[19:03:17] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:03:17] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[19:03:17] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[19:03:17] *** Joins: xsperry (~xs@user/xsperry)
[19:03:17] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[19:03:17] *** Joins: rany (~rany@user/rany)
[19:03:17] *** Joins: LuKaRo (~LuKaRo@p4fc32532.dip0.t-ipconnect.de)
[19:03:17] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[19:03:17] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[19:03:17] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[19:03:17] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[19:03:17] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[19:03:17] *** Joins: moose (~moose@user/moose)
[19:03:17] *** Joins: digilink (~digilink@user/digilink)
[19:03:17] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[19:03:17] *** Joins: mixfix41 (~homefame@user/mixfix41)
[19:03:17] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[19:03:17] *** Joins: haniaF (~haniaF@83.24.197.161.ipv4.supernova.orange.pl)
[19:03:17] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[19:03:17] *** Joins: foul_owl (~kerry@94.140.8.107)
[19:03:17] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[19:03:17] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[19:03:17] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[19:03:17] *** Joins: koolazer (~koo@user/koolazer)
[19:03:17] *** Joins: asd (~noname@user/asd)
[19:03:17] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[19:03:17] *** Joins: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net)
[19:03:17] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[19:03:17] *** Joins: csjp (~csjp@user/csjp)
[19:03:17] *** Joins: llh (~llh@user/llh)
[19:03:17] *** Joins: tbcr (~tbcr@107.13.189.161)
[19:03:17] *** Joins: BUSY (~BUSY@user/busy)
[19:03:17] *** Joins: noose (~noose@user/noose)
[19:03:17] *** Joins: LangerJan (~jan@user/langerjan)
[19:03:17] *** Joins: eht (~eht@user/eht)
[19:03:17] *** Joins: ColdKeyb- (~ColdKeybo@user/coldkeyboard)
[19:03:17] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[19:03:17] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[19:03:17] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[19:03:17] *** Joins: nortoh (~nortoh@user/nortoh)
[19:03:17] *** Joins: citrons_ (~citrons@alt.mondecitronne.com)
[19:03:17] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[19:03:17] *** Joins: avarab (avar@vm.nix.is)
[19:03:17] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[19:03:17] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[19:03:17] *** Joins: Guest4084 (~vin@user/crash)
[19:03:17] *** Joins: alip (~alip@exherbo/developer/alip)
[19:03:17] *** Joins: dstein64 (~dstein64@dannyadam.com)
[19:03:17] *** Joins: xcm___ (~xcm@user/xcm)
[19:03:17] *** Joins: alicef (~none@gentoo/developer/alicef)
[19:03:17] *** Joins: zlg_ (~zlg@user/zlg)
[19:03:17] *** Joins: Dreg (~Dreg@fr33project.org)
[19:03:17] *** Joins: Cyp (~cyp@213.237.85.9)
[19:03:17] *** Joins: dos (~dos@dosowisko.net)
[19:03:17] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[19:03:17] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[19:03:17] *** Joins: remedan_ (~remedan@octo.cafe)
[19:03:17] *** Joins: SoF (~skius@user/skius)
[19:03:17] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:03:17] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:03:17] *** Joins: fstd_ (~fstd@xdsl-78-35-82-60.nc.de)
[19:03:17] *** Joins: coruja (~coruja@user/coruja)
[19:03:17] *** Joins: majors_ (~majors@user/majors)
[19:03:17] *** Joins: fluter (~fluter@user/fluter)
[19:03:17] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[19:03:17] *** Joins: polyrob (~rob@user/polyrob)
[19:03:17] *** Joins: jkl1337 (~jkl@user/jkl)
[19:03:17] *** Joins: amorel_ (~amorel@mx.mompl.net)
[19:03:17] *** Joins: GyrosGeier (~geier@185.27.255.155)
[19:03:17] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[19:03:17] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[19:03:17] *** Joins: e36freak (~e36freak@user/e36freak)
[19:03:17] *** Joins: root____ (~root@157.245.144.252)
[19:03:17] *** Joins: sunyour (~sunyour@129.226.182.99)
[19:03:17] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[19:03:17] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[19:03:17] *** Joins: Teacup (~teacup@user/teacup)
[19:03:17] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[19:03:17] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[19:03:17] *** Joins: nukedclx (nukedclx@shell.k4be.pl)
[19:03:17] *** Joins: regulate (~regulate@koduro.com)
[19:03:17] *** Joins: phroa (~phroa@user/phroa)
[19:03:17] *** Joins: Dijky (~Dijky@user/dijky)
[19:03:17] *** Joins: clarity (~clarity@user/clarity)
[19:03:17] *** Joins: sivoais (~zaki@199.19.225.239)
[19:03:17] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 268 seconds)
[19:03:18] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[19:03:19] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Max SendQ exceeded)
[19:03:19] *** Quits: Leonard (~Administr@114.55.127.80) (Max SendQ exceeded)
[19:03:19] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Max SendQ exceeded)
[19:03:19] *** Quits: SoF (~skius@user/skius) (Max SendQ exceeded)
[19:03:19] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Max SendQ exceeded)
[19:03:19] *** Quits: dos (~dos@dosowisko.net) (Max SendQ exceeded)
[19:03:19] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Ping timeout: 245 seconds)
[19:03:19] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[19:03:19] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:03:20] *** Joins: justIrresolute5 (~justache@user/justache)
[19:03:22] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[19:03:23] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Ping timeout: 250 seconds)
[19:03:25] *** Joins: xcm (~xcm@user/xcm)
[19:03:34] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[19:03:35] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (Ping timeout: 250 seconds)
[19:03:38] *** Quits: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (Ping timeout: 252 seconds)
[19:03:41] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Ping timeout: 245 seconds)
[19:04:02] *** Joins: Leonard (~Administr@114.55.127.80)
[19:04:10] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[19:04:22] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[19:04:28] *** Quits: GyrosGeier (~geier@185.27.255.155) (Remote host closed the connection)
[19:04:29] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 268 seconds)
[19:04:31] *** Joins: th1 (~th@test.secomondo.dk)
[19:04:33] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (Ping timeout: 256 seconds)
[19:04:35] *** Joins: GyrosGeier (~geier@185.27.255.155)
[19:04:54] *** Joins: rany8 (~rany@user/rany)
[19:04:54] *** Quits: rany (~rany@user/rany) (Killed (zirconium.libera.chat (Nickname regained by services)))
[19:04:54] *** rany8 is now known as rany
[19:04:54] *** Joins: grange_c0 (~grange_c@vps-9763379d.vps.ovh.net)
[19:04:58] *** Joins: SoF (~skius@user/skius)
[19:05:05] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[19:05:07] *** Quits: nukedclx (nukedclx@shell.k4be.pl) (Ping timeout: 240 seconds)
[19:05:21] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:05:24] *** Quits: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Remote host closed the connection)
[19:05:39] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[19:05:41] *** Quits: remedan_ (~remedan@octo.cafe) (Ping timeout: 256 seconds)
[19:05:41] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:06:09] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:06:13] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Ping timeout: 240 seconds)
[19:06:15] *** Quits: xcm___ (~xcm@user/xcm) (Ping timeout: 256 seconds)
[19:06:27] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[19:06:49] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (Ping timeout: 256 seconds)
[19:06:49] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (Ping timeout: 256 seconds)
[19:06:49] *** grange_c0 is now known as grange_c
[19:06:51] *** Joins: dos (~dos@dosowisko.net)
[19:07:23] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[19:07:37] *** Joins: remedan (~remedan@octo.cafe)
[19:07:47] *** Joins: BCMM (~BCMM@user/bcmm)
[19:07:57] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 256 seconds)
[19:08:56] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[19:09:26] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[19:09:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:09:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:09:54] *** Joins: wroathe (~wroathe@user/wroathe)
[19:10:03] *** Quits: zalt (~zalt@user/zalt) (Quit: WeeChat 3.3)
[19:10:21] *** Joins: zalt (~zalt@user/zalt)
[19:11:27] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:13:11] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 256 seconds)
[19:13:29] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[19:13:45] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Ping timeout: 256 seconds)
[19:14:06] *** Joins: ai (nukedclx@2001:41d0:8:6153:ffff::1)
[19:15:01] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:16:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-92.cspire.com)
[19:19:47] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: brb)
[19:19:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:24] *** Joins: koolazer (~koo@user/koolazer)
[19:21:00] *** Quits: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:23:08] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[19:25:10] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[19:25:32] *** Quits: trafficjam (~trafficja@119.17.42.59) (Ping timeout: 256 seconds)
[19:25:43] *** Joins: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro)
[19:25:57] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[19:26:05] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[19:26:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:26:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:26:10] *** Joins: wroathe (~wroathe@user/wroathe)
[19:27:12] *** Joins: Leonard (~Administr@114.55.127.80)
[19:27:55] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Remote host closed the connection)
[19:28:41] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8347:64cf:c14b:f8f0:3eaa:6b26)
[19:29:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[19:29:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:34:07] *** Joins: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8)
[19:37:31] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[19:37:33] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[19:38:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:38:36] *** Joins: hussam (~hussam@user/hussam)
[19:38:59] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[19:39:10] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[19:39:11] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[19:39:29] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[19:39:41] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[19:39:43] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[19:40:49] *** Joins: pulse (~pulse@user/pulse)
[19:41:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:41:31] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:42:05] *** Quits: orkim (~orkim@user/orkim) (Read error: Connection reset by peer)
[19:42:25] *** Joins: orkim (~orkim@user/orkim)
[19:43:09] *** Joins: AmR (~AmREiSa@156.199.28.131)
[19:43:58] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[19:47:21] *** Quits: orkim (~orkim@user/orkim) (Read error: Connection reset by peer)
[19:47:23] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[19:47:26] *** Guest7936 is now known as Tom^
[19:47:44] *** Quits: Tom^ (~Tom^@98.128.186.114) (Changing host)
[19:47:44] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[19:49:13] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[19:49:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:50:03] *** Quits: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:40] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[19:51:10] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[19:51:27] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[19:51:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:51:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:51:31] *** Joins: wroathe (~wroathe@user/wroathe)
[19:51:55] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[19:52:10] *** Joins: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d)
[19:52:23] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[19:52:37] *** Joins: alefir_ (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[19:53:25] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 240 seconds)
[19:53:33] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[19:54:31] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[19:55:09] *** Joins: Lumia (~Lumia@208.64.158.255)
[19:56:38] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[19:57:03] *** Joins: Tom (~Tom^@user/tom/x-0773808)
[19:57:16] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[19:57:49] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Ping timeout: 240 seconds)
[19:58:27] *** Tom is now known as Guest7627
[19:58:27] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[19:58:33] *** Joins: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793)
[19:58:46] *** Guest7627 is now known as Tom^
[19:59:06] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[19:59:24] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[19:59:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:59:37] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[19:59:46] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:59:50] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[20:00:27] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[20:00:32] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[20:02:06] *** Quits: heiner__ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[20:02:06] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[20:02:22] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:03:35] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[20:04:31] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[20:05:42] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[20:07:40] *** Joins: Guest65 (~Guest65@37.78.55.54)
[20:07:40] *** Joins: seninha (~seninha@user/seninha)
[20:07:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:07:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:07:52] *** Joins: wroathe (~wroathe@user/wroathe)
[20:08:09] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[20:09:07] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600::f02a)
[20:09:13] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[20:09:16] *** Joins: rick123 (~rick123@157.245.192.96)
[20:10:10] *** Joins: johnjaye (~pi@154.6.152.74)
[20:10:32] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:11:20] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[20:11:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f) (Quit: Quit)
[20:12:35] *** Joins: Akawama[m] (~akawama@user/akawama)
[20:12:39] <rick123> I see there is a list of books in the topic, but if I had to ask for one resource to refer to, to learn C well, which one would that be ?
[20:12:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:12:51] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[20:12:55] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[20:13:09] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[20:13:24] *** Joins: orkim (~orkim@user/orkim)
[20:14:28] *** Joins: jinsun_ (~jinsun@user/jinsun)
[20:15:42] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[20:18:07] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:18:09] <kurahaupo1> rick123: Since your background almost certainly differs from mine, I hesitate to offer my own recommendation. My advice would be to outline your background, and ask people who started with a similar background to say how useful they found each of the books mentioned.
[20:18:37] *** Quits: reduce (~reduce@cpc144486-stap13-2-0-cust39.12-2.cable.virginm.net) (Ping timeout: 240 seconds)
[20:18:39] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[20:18:49] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:19:02] *** Quits: alefir_ (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 240 seconds)
[20:19:07] *** Quits: Guest65 (~Guest65@37.78.55.54) (Quit: Client closed)
[20:19:40] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[20:20:45] *** Joins: kadavul (~vazha@103.165.21.235)
[20:21:01] <bkhl> I'm having a good time currently with the C track on Exercism.org
[20:21:17] *** Joins: Phil-Work (~phil@62.3.100.20)
[20:21:20] *** Quits: kadavul (~vazha@103.165.21.235) (Max SendQ exceeded)
[20:21:28] <bkhl> But that's obviously just a complement to some book or course.
[20:21:46] *** Joins: kadavul (~vazha@103.165.21.235)
[20:22:59] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[20:23:03] *** Quits: kadavul (~vazha@103.165.21.235) (Client Quit)
[20:23:21] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[20:23:35] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[20:25:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[20:27:10] *** Joins: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f)
[20:27:46] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Client Quit)
[20:30:09] *** Joins: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8)
[20:31:09] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[20:32:35] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:35:36] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[20:35:36] *** Joins: psydroid (~psydroid@user/psydroid)
[20:35:42] *** Quits: alch (~alch@151.82.81.187) (Read error: Connection reset by peer)
[20:35:45] *** Joins: Leonard (~Administr@114.55.127.80)
[20:36:38] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.19)
[20:38:02] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[20:40:35] *** Joins: alch (~alch@to-18-87-185.service.infuturo.it)
[20:41:40] *** Quits: fe23 (~fe23@2409:8a34:464:4990:b57e:2147:9c70:8fe4) (Quit: fe23)
[20:42:23] *** Joins: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net)
[20:42:48] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[20:44:24] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:46:41] *** Joins: hanzo (uid532183@user/hanzo)
[20:48:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:48:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[20:51:32] *** Quits: xse (~xse@user/xse) (Ping timeout: 240 seconds)
[20:51:58] *** Joins: MrFantastik (~f@2607:f598:bbda:250:b5bd:958d:19c8:c578)
[20:52:27] *** Joins: xse (~xse@user/xse)
[20:54:01] *** Joins: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3)
[20:55:25] *** Joins: morte_ (~user@181.114.17.106)
[20:55:45] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 256 seconds)
[20:57:27] *** morte_ is now known as monkey_
[20:57:42] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[20:58:33] *** Quits: HisShadow_ (~HisShadow@user/hisshadow) (Ping timeout: 268 seconds)
[20:58:46] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[21:00:33] *** Joins: kadavul (~vazha@103.165.21.235)
[21:02:04] *** Joins: mahmutov (~mahmutov@5.176.11.249)
[21:02:20] *** Joins: missogra (~missogra@dynamic-095-112-215-093.95.112.pool.telefonica.de)
[21:02:28] *** Quits: missogra (~missogra@dynamic-095-112-215-093.95.112.pool.telefonica.de) (Client Quit)
[21:02:58] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:03:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[21:03:49] *** Quits: BCMM (~BCMM@user/bcmm) (Ping timeout: 240 seconds)
[21:05:25] *** Quits: kadavul (~vazha@103.165.21.235) (Client Quit)
[21:06:15] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[21:06:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:07:37] *** Quits: Major_Biscuit (~MajorBisc@c-001-005-014.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:07:51] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[21:07:51] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[21:09:44] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[21:09:55] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[21:12:02] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[21:13:25] *** Quits: meowray (MaskRay@2600:3c01::f03c:91ff:fea1:e018) (Changing host)
[21:13:25] *** Joins: meowray (MaskRay@user/meowray)
[21:16:47] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:18:46] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:18:54] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[21:18:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:20:43] *** Joins: pulse_ (~pulse@user/pulse)
[21:21:21] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Client Quit)
[21:23:53] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[21:25:29] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807)
[21:27:58] *** Joins: rgrinberg (~textual@187.223.134.131)
[21:28:24] *** Joins: Whatshisface (~jon@user/Whatshisface)
[21:28:52] *** Joins: WAR10CK (~WAR10CK@14.223.181.174)
[21:29:52] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:43] *** Joins: ns12 (~ns12@user/ns12)
[21:31:16] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:9d65:6181:29ef:f807) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:32:01] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:34:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:36:41] *** Joins: Atque (~Atque@user/atque)
[21:36:47] *** Joins: Leonard (~Administr@114.55.127.80)
[21:37:30] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:38:39] *** Joins: Figworm (~inoor@user/figworm)
[21:38:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[21:42:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:43:21] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[21:45:52] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[21:46:57] *** Joins: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[21:48:53] <ioxzev1z> rick123, "Modern C" is good
[21:49:29] *** Quits: magla (~gelignite@55d4ca9b.access.ecotel.net) (Quit: Stay safe!)
[21:49:57] *** pulse_ is now known as pulse
[21:51:36] *** Joins: BCMM (~BCMM@user/bcmm)
[21:52:37] <APic> 220105 19:22:18 candide> No such factoid 'o0(Good'; did you mean [#bash] good; [global] good?
[21:52:40] <APic> ww
[21:54:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:55:12] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:56:57] *** Quits: Kit (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[21:57:04] *** Joins: u0_a391 (~u0_a391@2600:380:a42e:5999:328d:e190:fd04:8ace)
[21:57:09] <ioxzev1z> wat
[21:57:19] <APic> *shrug*
[21:57:23] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.19) (Ping timeout: 256 seconds)
[21:57:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[21:59:07] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[21:59:49] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[22:01:13] <sham1> candide just wants to be included
[22:01:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1d28:97e7:e951:1b26) (Ping timeout: 240 seconds)
[22:02:17] *** Joins: zwr (~zwr@2804:d45:b966:fb00:dc36:d82f:f864:4cfe)
[22:02:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[22:03:37] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:03:39] *** pretty_dumm_guy is now known as pretty_dumm_guy_
[22:04:08] *** pretty_dumm_guy_ is now known as pdg_afk
[22:04:53] <pragma-> APic is playing around in #c-offtopic and accidentally sent that here.
[22:04:54] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:04:58] <APic> Indeed.
[22:05:06] <APic> candide > *
[22:05:06] <candide> * is the multiplication binary operator. It is also the unary pointer dereference operator. It is also used in declarations to declare a variable which is a pointer to a type: <type> *p;
[22:05:08] <APic> srsly
[22:05:10] <APic> Whoah.
[22:05:11] <APic> Good one.
[22:05:13] <APic> B-)
[22:06:59] *** Joins: Leonard (~Administr@114.55.127.80)
[22:07:04] <sdk_> **right
[22:07:46] <APic> Aight.
[22:08:09] *** pdg_afk is now known as pretty_dumm_guy
[22:08:35] *** Joins: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr)
[22:09:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:11:02] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[22:11:52] <APic> Oh!
[22:11:58] <APic> Ph!
[22:12:01] <APic> s/P/O/
[22:12:13] <APic> ,o0(So where the Heck is the Regexp-Bot here?)
[22:12:26] <candide> A​Pic, Not likely!
[22:14:07] <ioxzev1z> ,regex
[22:14:30] <ioxzev1z> Need a user account for that? say whaaaaaaaaaaaat?
[22:14:42] <sham1> ,regex
[22:16:51] <APic> ,o0(220105 19:46:20 k> . o O ( why don't airports have movie theaters )
[22:17:03] <candide> A​Pic, Most assuredly.
[22:17:16] <ioxzev1z> Is that an actual command?
[22:17:22] <ioxzev1z> ,o0(muh what)
[22:17:36] <ioxzev1z> " No such factoid 'o0(muh'; no similar matches."
[22:17:48] <ioxzev1z> APic, how does that work?
[22:18:53] <ioxzev1z> ,o0(211231 19:40:50>
[22:19:05] <ioxzev1z> "No such factoid 'o0(211231'; no similar matches."
[22:19:31] <APic> ioxzev1z: How shall _i_ know?
[22:19:37] <APic> ioxzev1z: Ask the pragma-s.
[22:19:55] <ioxzev1z> I can't get it to reply on a ,o0(> like you do
[22:20:05] <ioxzev1z> Do I need the . o O ?
[22:20:14] <supakeen> You can private message candide so you don't have to test in channel.
[22:20:23] <ioxzev1z> supakeen, yeah
[22:20:43] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:20:58] *** gallup is now known as otherouestbillie
[22:21:04] <pragma-> What is going on in here?
[22:21:11] *** Quits: otherouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:21:27] <ioxzev1z> pragma-, teach me the magic of ,o0(> pls
[22:22:01] <ioxzev1z> pragma-, APic manages to get candide to reply on that format
[22:22:09] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:22:53] <pragma-> That isn't a thing. The comma is the bot trigger. ",foo" tells candide to invoke a command `foo`. ",o0(whatever" tells it to invoke `o0(whatever` which usually isn't a known command to the bot.
[22:23:08] <APic> Yup
[22:23:25] <ioxzev1z> pragma-, I know the rules but not sure why he got a reply on ,o0
[22:23:31] <APic> Just that my Thoughts all start with „,o0()“ instead of with „.oO()“
[22:23:35] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8347:64cf:c14b:f8f0:3eaa:6b26) (Ping timeout: 250 seconds)
[22:23:36] <APic> Very epically sorry for that.
[22:23:38] <APic> srsly
[22:23:38] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[22:23:40] <ioxzev1z> lol
[22:23:51] <APic> ,o0(You know the Rules. And so do i.)
[22:23:53] <ioxzev1z> pragma-, also why does ,regex need an account?
[22:23:54] <APic> ,o0(RICKROLL'd)
[22:23:58] <candide> A​Pic, That would be clever.
[22:23:58] <APic> lol
[22:24:05] <ioxzev1z> See there he goes with the reply
[22:24:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:24:13] <pragma-> lol
[22:24:58] *** Joins: lunix00 (~lunix00@179.232.161.86)
[22:25:02] <pragma-> If there's no matching keyword command then the bot will go over a list of regular expressions. There are several regular expressions that invoke a generic response.
[22:25:35] <pragma-> Only when no keywords and no regular expressions match will it finally say "No such command"
[22:25:41] <ioxzev1z> Ah
[22:25:47] <APic> Oh
[22:26:01] <APic> Indeed
[22:26:06] <APic> pragma- > *
[22:26:10] <APic> ,o0(srsly)
[22:26:10] <pragma-> In APic's case:
[22:26:14] <pragma-> Wed Jan  5 2022 10:53:51.166 :: 17717 :: === [0] Got command: (#c) APic!apic@apic.name: o0(You know the Rules. And so do i.)
[22:26:20] <pragma-> Wed Jan  5 2022 10:53:51.186 :: 17717 :: [o0(You know the Rules. And so do i.)] matches [\bdo\b.*] - calling [8ball]
[22:26:28] <pragma-> Wed Jan  5 2022 10:53:51.211 :: 17717 :: (6 seconds delay) /say APic, That would be clever.
[22:26:34] <APic> ktnx
[22:26:35] <pragma-> (select lines from the log)
[22:26:37] *** Joins: ckdCreations (~ckdCreati@2607:fb90:834c:942f:2470:d16a:8d4d:35df)
[22:26:40] <APic> /say > *
[22:26:42] <APic> srsly
[22:26:49] <APic> ,o0(Sorry for that Thought, once again.)
[22:27:02] <candide> A​Pic, That's alright.
[22:27:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:27:37] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:28:20] <APic> ,o0(Construct moar Bots. All the Time.)
[22:28:27] <APic> ,o0(Especially Repraps.)
[22:30:09] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[22:30:27] <APic> *purrrrrrrrrrrrrrrrrr*
[22:30:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:31:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:34:19] *** Joins: vicfred_ (~vicfred@user/vicfred)
[22:34:32] <pragma-> ioxzev1z: oh. ,regex needs an account because it adds regular expression triggers to the bot, which it uses to match against messages containing unknown commands.
[22:34:52] <pragma-> I didn't think it would be a good idea to let anybody add such things.
[22:35:01] <ioxzev1z> Ah, makes sense
[22:35:43] *** Quits: rgrinberg (~textual@187.223.134.131) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:36:00] <pragma-> ,cmdset regex
[22:36:00] <candide> [Command metadata] regex keys: help: Manages regular expression commands. See https://github.com/pragma-/pbot/blob/master/doc/Commands.md#regex; requires_cap: 1
[22:36:01] <APic> ,o0(Hunger!)
[22:36:15] <APic> pragma-: Yes, publish everything at once!
[22:36:17] <APic> 😸
[22:36:19] <APic> cul8r
[22:36:23] *** u0_a391 is now known as Kit
[22:36:35] <ioxzev1z> pragma-, does that execute regexes in the command, or is that used for other commands?
[22:36:53] <ioxzev1z> Like ,cc compiles and executes the code
[22:36:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[22:36:59] <pragma-> the `requires_cap: 1` there means the command requires that the user has the can-<command-name> capability (can-regex, in this case)
[22:37:04] *** Joins: mrig (~mrig@user/mrig)
[22:37:06] <pragma-> https://github.com/pragma-/pbot/blob/master/doc/Admin.md#user-capabilities
[22:37:09] <pragma-> I'm rather proud of that.
[22:37:25] *** Joins: Leonard (~Administr@114.55.127.80)
[22:37:56] <pragma-> It used to use a dumb "admin-levels" system where you'd get an integer level set on your account. Commands had to be given a level and the user had to be greater than the commands level in order to invoke it.
[22:38:11] <pragma-> But now it uses this user-capabilities system that is fine-grained.
[22:38:15] <pragma-> I'm really happy about that.
[22:38:31] <pragma-> ioxzev1z: I'm not sure I understand that question.
[22:38:36] *** Joins: Betal (~Betal@user/betal)
[22:39:05] <APic> https://xkcd.com/2564/
[22:39:06] <candide> Title of APic's link: xkcd: Sunshield
[22:39:09] <APic> Ok, Time for the Bathtubs.  <3
[22:39:26] *** Quits: Darkcoal (~user@139.64.51.226) (Quit: Darkcoal)
[22:39:38] <ioxzev1z> pragma-, is ,regex a command where you give some regex and candide executes it, much like ,cc, or is it something bot related?
[22:39:53] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:39:56] <pragma-> bot related
[22:39:58] <ioxzev1z> Ah
[22:40:11] <cryptonector> are there C compilers that parallelize building of large source files?  I'm thinking of the SQLite3 amalgamation...
[22:40:18] *** Joins: u0_a391 (~u0_a391@2600:380:a42e:5999:aeec:d4bb:c8d:6230)
[22:40:19] <pragma-> It adds a new command of type `regex` to candide's list of known commands
[22:40:35] <ioxzev1z> pragma-, that makes sense, wondered a little about it needing permissions
[22:40:36] <cryptonector> (my guess is "no")
[22:40:52] <ioxzev1z> cryptonector, not sure about "source files", but you can compile in parallel
[22:41:08] <ioxzev1z> Not sure how the compiler would split a single source into pieces to compile in parallel
[22:42:37] *** Joins: Akiva (~Akiva@user/Akiva)
[22:42:48] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[22:42:51] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[22:42:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[22:42:56] <cryptonector> I'm thinking that any time the compiler happens on a function it could parse it to the end of the function and hand it off to a worker thread pool to compile it; if the function is a static function the compiler would have to add a declaration for the code that follows if there hadn't been a forward decl before going on
[22:43:13] <cryptonector> but... a lot of optimizations probably wouldn't be possible
[22:43:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:43:58] <ioxzev1z> cryptonector, not really sure if a single c source (even very large one) needs to be split. Even with a source of > 10K SLOC I doubt a modern computer would have trouble with it
[22:44:06] *** Quits: Kit (~u0_a391@2600:380:a42e:5999:328d:e190:fd04:8ace) (Ping timeout: 245 seconds)
[22:44:15] <cryptonector> ioxzev1z: ever built the sqlite3 amalgamation?
[22:44:21] <ioxzev1z> But if you parallelize compilation it would probably be to do e.g. 16 files at the same time or something
[22:44:23] <ioxzev1z> cryptonector, no
[22:44:29] <ioxzev1z> cryptonector, elaborate on that pls
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:18] <slayne> Hey everyone, I'm in a bit of a pickle :)
[22:45:28] <apotheon> I loathe pickles.
[22:45:42] <cryptonector> SQLite3 is large.  To make it easy to embed the SQLite devs publish not just an autoconf-based project tarball, but also a two-file "amalgamation" of the whole thing: the public header file and a concatenation of all the sources in the right order
[22:45:50] <slayne> Yep, same here, my sister-in-law eats it like peanuts though..
[22:46:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:46:17] <ioxzev1z> cryptonector, so you get a single file to compile?
[22:46:17] <cryptonector> ioxzev1z: the SQLite3 amalgamation is ~8MB
[22:46:23] <cryptonector> yes
[22:46:29] <ioxzev1z> Ok, that's new to me
[22:46:46] <cryptonector> now, if you want parallelism you can just build the tarball, natch
[22:47:06] *** Joins: agonhajdari (~textual@user/agonhajdari)
[22:47:18] <cryptonector> so SQLite3 is not really the reason to want single-file parallelism
[22:47:25] <cryptonector> it's just an example
[22:47:29] <slayne> I'm working on a linked list and was trying to access struct members through a void pointer. Can somebody points out what I'm doing wrong in the following code ? https://bpa.st/FRQQ
[22:47:34] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:01] <ioxzev1z> cryptonector, so for your single file parallel build, you would parse the file, find certain sections inside (e.g. functions), compile them in parallel, such that it would be similar to opening a set of files and doing normal parallel compilation?
[22:48:52] <cryptonector> I maintain an ASN.1 compiler that has the option to compile each type to a separate C source file, and I wanted to remove that feature and make it output a single source file every time, but one of my colleagues objects on the grounds of parallelization, so that made me wonder: are there C compilers that can parallelize large source file compilation?
[22:49:07] <cryptonector> ioxzev1z: yes, something like that
[22:49:12] <ioxzev1z> slayne, 67 should be malloc(sizeof *new_node)
[22:49:35] <ioxzev1z> slayne, though it doesn't answer your question
[22:49:40] <ioxzev1z> Still going through the source
[22:49:40] <cryptonector> anyways, the answer must be "no", but it's fun to think about
[22:50:32] <slayne> ioxzeviz: Thanks, corrected that :)
[22:51:43] <ioxzev1z> Also 42 should be malloc(sizeof *inv.items)
[22:51:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:51:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:51:44] *** Joins: wroathe (~wroathe@user/wroathe)
[22:52:05] <ioxzev1z> slayne, what probelms are you having with the code exactly=
[22:52:10] *** Quits: MrFantastik (~f@2607:f598:bbda:250:b5bd:958d:19c8:c578) (Quit: Leaving)
[22:52:14] <ioxzev1z> Not sure where I should be looking if I don't know why you asked
[22:53:04] <ioxzev1z> 53 doesn't need the (char *) cast
[22:54:12] <slayne> Yeah, the problem is that I can access the Items's struct members in the follwoing code:
[22:54:23] <slayne> 2     for (Node *tmp = inv.items->head; tmp != NULL; tmp = tmp->next) {
[22:54:26] <slayne>  53         printf("Value: %s\n", (char*)tmp->data);
[22:54:28] <slayne>  54     }
[22:54:30] <slayne>  55
[22:54:30] <ioxzev1z> ,cc int i = 0; if(i++ < 1) { puts("A"); }
[22:54:32] <candide> ioxzev1z: A
[22:55:23] <ioxzev1z> slayne, why is accessing tmp->data a problem?
[22:55:26] <Klinda> what does it mean that a region is partially adressable?
[22:55:33] <Klinda> why do I have a heap overflow?
[22:56:28] <slayne> ioxzeviz: tmp->data is a void* to my Items struct, I'd like to be able to access it members, like tmp->data->name, tmp->data->value, etc..
[22:56:35] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[22:56:57] <Klinda> =>0x0c087fffab70: fa fa 00 00 00 00[03]fa fa fa fa fa fa fa fa fa
[22:57:33] <ioxzev1z> slayne, ((struct Item *) tmp->data)->name, possibly?
[22:57:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:58:11] <ioxzev1z> Item i = tmp->data; i->name; etc
[22:58:14] *** Joins: Atque (~Atque@user/atque)
[22:58:27] <ioxzev1z> Uh, Items *i = tmp->data; i->name
[22:59:00] <fizzie> Klinda: Usually that means an off-by-one error somewhere. "Partially addressable" means not all the 8 bytes represented by each of the ASan shadow byte map are valid to reference, only some of them.
[22:59:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[22:59:41] <slayne> ioxzeviz: You're a genius, thank you so much, it works now :D
[22:59:47] <badsektor> i think C is so beautiful, if the universe is a simulation then God must have coded it in C
[22:59:56] <ioxzev1z> slayne, can I give some advice?
[23:00:10] <slayne> ioxzeviz: Absolutely, I'm open for that !
[23:00:43] *** Joins: Akuli (~Akuli@87-94-108-130.bb.dnainternet.fi)
[23:01:10] <ioxzev1z> Don't use typedef for structs (struct foo; reads better than just foo), also (IMO) avoid capitals
[23:01:54] <ioxzev1z> If you have just "foo" it can be pretty much anything, if you always write "struct foo" when using that struct it is easier to parse
[23:02:06] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[23:02:17] <Klinda> fizzie: thank you, so if I go to right it's 1 byte? from a 00 location to another?
[23:02:34] <Klinda> it's 8 byte because you count the 03 3 times or what?
[23:02:43] <fizzie> Each byte in the map represents 8 actual application bytes.
[23:02:59] <fizzie> So each of those 00s represents 8 addressable application bytes.
[23:03:43] <fizzie> Given that they use 01 through to 07 to represent partially addressable regions, I'd _guess_ it has something to do with how many of those 8 bytes are addressable, but I've never actually checked if that's documented somewhere.
[23:04:08] <ioxzev1z> slayne, also remember what I said about malloc. <type> *foo = malloc(sizeof *foo) means that you only have to change the type once (in the decl) whereas if you use <type> *foo = malloc(sizeof <type>); you have to keep track of two changes
[23:04:09] *** Quits: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net) (Excess Flood)
[23:04:10] <slayne> ioxzeviz: Noted, it makes sense, I was divided between using typedef or not.
[23:04:15] *** Joins: xse (~xse@user/xse)
[23:04:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:04:27] <Klinda> ok fizzie and something like this =>0x0c0c7fff92d0: 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa fa, means what ?
[23:04:34] <ioxzev1z> If you change the type, that is
[23:04:56] <Klinda> that you go after the 8 byte of the last 00 ?
[23:05:02] <slayne> ioxzeviz: So true!
[23:05:15] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[23:05:56] *** Joins: theglass (~glass@user/theglass)
[23:06:23] <fizzie> Klinda: Yeah, that means the valid region of memory ended on an 8-byte boundary, and the faulting address was in the first 8-byte chunk right after it ended.
[23:06:26] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[23:06:47] <ioxzev1z> slayne, and final point unrelated to C, the Items struct contains data on one item but the name is plural
[23:06:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:06:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:06:50] *** Joins: wroathe (~wroathe@user/wroathe)
[23:06:56] <fizzie> Usually the output before the shadow byte map gives some information as well.
[23:06:59] <ioxzev1z> But other than that, good job with what you have
[23:07:33] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:4c57:7bc8:1484:fbaf)
[23:07:33] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:4c57:7bc8:1484:fbaf) (Changing host)
[23:07:33] *** Joins: skapate (~Skapata@user/skapata)
[23:07:34] <Klinda> so it's a tiny buffer overflow
[23:07:37] <Klinda> fizzie ?
[23:07:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:07:52] <Klinda> Heap left redzone:       fa
[23:08:01] <fizzie> It traps on the first invalid access, so you can't really say how "tiny" it would have been.
[23:08:01] <Klinda> I don't know what does it mean, this is the legend
[23:08:13] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:08:20] <Klinda> 8 byte is like 2 ints ? xD
[23:08:39] <fizzie> That's just some of the space ASan's reserved for catching those invalid accesses. And each of those single-byte entries still represent an 8-byte chunk.
[23:08:46] <slayne> ioxzeviz: Yeah, I'm a bit of a grammar-nazi, how could I let that slide ? :P
[23:08:55] <fizzie> It's a map, it's not the real thing. You could even say it's an 1:8 scale map.
[23:08:56] *** Joins: u0_a3911 (~u0_a391@64.85.173.130)
[23:09:02] <slayne> ioxzeviz: Thanks, much appreciated!
[23:09:08] <ioxzev1z> slayne, actually wait
[23:09:09] *** Quits: u0_a3911 (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[23:09:10] <ioxzev1z> one last point
[23:09:17] *** Joins: u0_a3911 (~u0_a391@64.85.173.130)
[23:09:37] <Klinda> ah understand fizzie so could be a huge buffer overflow?
[23:09:42] <fizzie> But look at the other output first, and the map only if that's not clear enough. Usually there's something like, "WRITE/READ of size X at Y -- is located Z bytes to the right of W-byte region [P, Q) allocated by --" and so on.
[23:09:59] <ioxzev1z> line 25 is wrong. You have a pointer to a list of items, but the List struct is not used as a pointer from what I can tell
[23:10:29] <ioxzev1z> 25 should be struct List items, not *items
[23:11:00] <fizzie> I don't know how you'd measure the size of one. But yes in the sense that even if you do something like `char *p = malloc(16); memset(p, 0, 16*1024*1024);`, it'll look much the same, because ASan will barf at the first write past the end of the tiny buffer.
[23:11:18] <fizzie> Even if really the "size" of the overflow is 16 megs or so.
[23:11:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:11:52] <ioxzev1z> slayne, sorry it gets malloced
[23:11:59] <ioxzev1z> No problem
[23:12:11] <Klinda> fizzie: ==2505==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x604000015bb2 at pc 0x5593211d0874 bp 0x7ffec2a20430 sp                   |||||              0x7ffec2a20420 0x604000015bb3 is located 0 bytes to the right of 35-byte region [0x604000015b90,0x604000015bb3)
[23:12:14] <ioxzev1z> slayne, why are you mallocing it though?
[23:12:46] <Klinda> there what does it mean?
[23:12:56] <ioxzev1z> struct list l; l.head = 0; l.tail = 0; l.size = 0; add_to_list(&l, blah); etc seems more logical
[23:13:01] <ioxzev1z> No reason for the malloc
[23:13:02] *** Quits: u0_a391 (~u0_a391@2600:380:a42e:5999:aeec:d4bb:c8d:6230) (Ping timeout: 240 seconds)
[23:13:14] <theglass> Klinda: inspect the code!
[23:13:17] <theglass> :)
[23:14:02] <fizzie> Klinda: Right. That means there was the equivalent of malloc(35) somewhere (often it can tell you where the allocation happened, too), that ended up reserving the addresses 0x604000015b90...0x604000015bb2, and then the offending code at 0x5593211d0874 attempted to write to immediately past the end of the buffer.
[23:15:00] *** Joins: monkey_` (~user@181.114.17.106)
[23:16:37] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 240 seconds)
[23:17:03] *** monkey_` is now known as monkey_
[23:17:41] <slayne> ioxzeviz: There's much I need to learn, I don't fully understand pointers yet, hence why my code is inconsistent. But thanks for pointing those mistakes and best practices, I took some notes ;)
[23:18:09] <ioxzev1z> slayne, yeah pointers can be hard to understand but if you're just beginning try to avoid malloc if it's not needed
[23:18:32] <ioxzev1z> Every malloc needs a free(), which is a little hard to keep track of
[23:19:11] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[23:20:03] <fizzie> And the way that would look like in the shadow byte map is `... 00 00 00 00[03]fa fa fa ...` where the four `00`s represent the 4*8 = 32 fully addressable blocks (0x..5b90 to 0x..5baf), the `03` represents the 8 bytes 0x..5bb0 to 0x..5bb7 of which only the first 3 are valid, and it's highlighted because the first invalid address was there, and the `fa`s are space reserved for catching problems like
[23:20:04] <fizzie> that.
[23:20:20] <ioxzev1z> slayne, you made some mistakes but the code makes logical sense, so keep reading and you'll get it working just fine
[23:21:14] <slayne> ioxzeviz: Thanks, appreciated!
[23:24:21] *** Joins: magla (~gelignite@55d4ca9b.access.ecotel.net)
[23:25:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:25:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:25:35] *** Joins: wroathe (~wroathe@user/wroathe)
[23:26:59] <sham1> Only by experimenting and making mistakes can one learn
[23:28:34] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[23:28:37] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[23:29:01] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:29:37] *** Quits: ckdCreations (~ckdCreati@2607:fb90:834c:942f:2470:d16a:8d4d:35df) (Ping timeout: 240 seconds)
[23:30:13] *** Joins: moog (~moog@107.126.53.20)
[23:31:45] *** Quits: lunix00 (~lunix00@179.232.161.86) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:33:54] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[23:35:32] *** Joins: morte_ (~user@181.114.17.106)
[23:36:28] <apotheon> sham1: or sometimes one can learn from others' mistakes
[23:36:33] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:37:05] *** Joins: Leonard (~Administr@114.55.127.80)
[23:38:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[23:39:23] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:42:13] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[23:42:34] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:43:20] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Quit: Konversation terminated!)
[23:43:21] *** Quits: BCMM (~BCMM@user/bcmm) (Ping timeout: 256 seconds)
[23:43:32] *** Joins: vysn (~vysn@user/vysn)
[23:45:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:45:10] <Klinda> fizzie: but so the "overflow" is small or not, if it's contained in the "8 byte cell" or is valid as you said that this is a "scale" map ?
[23:45:40] <Klinda> should I inspect the code to realize that?
[23:47:35] <Klinda> in a case like this 0x0c227fff8090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]   0x0c227fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
[23:48:12] <Klinda> to me seems like it's not a bigger overflow because it's just go to the first fa, and not the others (for example)
[23:48:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:49:51] *** Joins: nbits (~nbits@user/nbits)
[23:53:30] *** Joins: critr (~critr@user/critr)
[23:53:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:53:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:53:42] *** Joins: wroathe (~wroathe@user/wroathe)
[23:53:57] *** Quits: nbits (~nbits@user/nbits) (Client Quit)
[23:54:16] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[23:58:13] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[23:59:37] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
