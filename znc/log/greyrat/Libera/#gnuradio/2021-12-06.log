[00:08:32] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370) (Quit: uros)
[00:14:55] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:27:15] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Read error: Connection reset by peer)
[00:29:42] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:29:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:34:10] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:302f:f3db:d6a5:3714) (Quit: Leaving)
[01:00:05] * Macuser wonders if he can point the tx antennas away from Earth in gps-sdr-sim
[01:18:27] <willcode4[m]> Have you read the code?
[01:19:53] <willcode4[m]> It would not have that as an explicit feature, but it's a simulator so you can change it to do whatever you want.
[01:24:42] <Macuser> i have
[01:25:01] <Macuser> I found SatVisibility function just equal to > elevation (= 0)
[01:25:28] <Macuser> so it's based on if it's above the local horizon
[01:26:50] *** Joins: jemius (~jemius@p200300d9673a3000b37ed3949e8ddfa7.dip0.t-ipconnect.de)
[01:34:18] *** Quits: greenriot (~greenriot@user/gr33nr10t) (Read error: Connection reset by peer)
[01:35:31] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[01:37:18] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[01:40:41] * Yamakaja[m] uploaded an image: (89KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/aa6a592eb8f7ee7a61a0541725edb1ded855050b/DeepinScreenshot_select-area_20211205231017.png >
[01:45:28] *** Quits: IanW_ (~IceChat9@arcanum.force9.co.uk) (Quit: Bye)
[01:59:39] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Ping timeout: 276 seconds)
[02:00:39] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[02:04:26] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:18:59] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:56] *** Quits: jemius (~jemius@p200300d9673a3000b37ed3949e8ddfa7.dip0.t-ipconnect.de) (Quit: Leaving)
[02:37:38] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:38:01] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[02:47:04] *** Joins: Guest36 (~Guest36@64.224.81.27)
[02:49:14] <Guest36> hello again gnuradio engineers, today I am here to ask for a little bit of insight into https://wiki.gnuradio.org/index.php/Frequency_Selective_Fading_Model the frequency selective fading model. I have successfully imported some samples and SDR device sources into gnu radio and done some experimenting with various kinds of impairment modules in my
[02:49:15] <Guest36> quest to simulate noise and reception damage caused by various effects in the real world.
[02:49:55] <Guest36> https://www.everythingrf.com/community/what-are-the-different-types-of-fading as I understand and have experienced fading and loss on ionospheric reflection, the FSFM module appears to function a little different than I expected.
[02:51:46] <Guest36> Rather, the complex effects of gnuradio plotting are not linear in application. I was able to simulate a phenomena that resembled fading as a waterfall might see it, but this was not logically or algorithmically consistent with a clear causal relationship, and rather suggest complex mathematic convolutions at resonant frequencies of multiple
[02:51:46] <Guest36> different GR blocks. I was able to make some very nice, cute noises, I would just love to share them.
[02:53:08] <Guest36> I then approached the fading block exclusively from an Empiric basis and proceeded to add gnuradio QT sliders to each of the variables so that I could simulate fading, by itself, on a solitary input to a solitary sink.
[02:54:41] <Guest36> Try as I might, I was completely unable to make "fading" happen, instead, as i convoluted the variables, the output went from pure noise to various modulation effects and then finally to sinusoidal distortion where the source was repeated multiple times with different sinusoidal distortion applied to each copy. I vaguely understand that this is in
[02:54:41] <Guest36> some way related to Num Sinusoidals. Am I using this thing wrong?
[02:55:23] <Guest36> perhaps it is meant to be used in an additive or subtractive(or multiplicative way) such that it is on a different input chain and is then multiplexed with the primary signal chain to achieve distortion.
[02:56:59] <Guest36> I would also like to know if there is a convenient way others have used to create a virtual sink that can be received by other SDR applications. presently I am using decimation on output using the rational block and sending it over to audio, and then receiving this using the softrock driver in other SDR programs.
[02:57:56] <Guest36> ideally, if I could use soapySDR to sink the complex output directly to a virtualized RTL-SDR device, I could then import this anywhere else I wished
[02:58:25] <Jacob[m]123> For proof of concept raw data files are pretty easy to move into other applications. not following most of what you said though, you will probably get better help if you post images of your flowgraphs and the specific behaviors that you find problematic
[02:59:59] <Guest36> Raw data files are not too hard to use ie with sox.exe and import elsewhere, but it certainly is more convenient to have it available as a virtualized device. Then multiple SDR programs can be used to realize a visualization of modifications done to the flowgraph as quickly as it takes to kill, build, and execute again
[03:00:38] <Guest36> my flowgraph is literally just the fading model(with or without frequency selective) and a raw sink and a sdr source
[03:01:14] <Jacob[m]123> There are various network blocks GR includes
[03:02:36] <Guest36> i assume you're responding to my question about convenient outputs. I've looked them over, and I think without some investment of time it will not be possible to use them for convenient SDR access. I'd need to port and adapt a SDR driver, and I was primarily interested if anything like that is already in use so that I could copy someone elses work
[03:02:59] <Guest36> ie they have to detect an installed device? and only transmit-capable devices are sinks? idk
[03:04:48] <Jacob[m]123> I'm not following what you want to do. Can you be more specific? Pass data from GR directly to ??
[03:05:08] <Guest36> cubicsdr, sdr#, etc
[03:11:03] <Jacob[m]123> I'm not familiar with how those tools would accept data over network
[03:15:02] <Guest36> oh, i dont mean over network, i mean on same machine using piped complex data flow
[03:15:14] <Guest36> passing data from GR directly to another SDR program
[03:17:13] <sammp[m]> What's the format that the SDR programs expect?
[03:17:48] <Guest36> I believe they use drivers for that, but internally they process the data as complex IQ samples
[03:18:19] <Guest36> I'm really suprised that you'd use GR and not use other SDR programs, seems like there would be a huge overlap between the use of them
[03:20:25] <Guest36> the best candidate would likely be RTL_SDR tcp, but even so, i'm incredibly suprised someone hasnt already done it- given the thousands or tens of thousands of GR users, and since ALL of them, by default, and exclusively, use GR for SDR type activities, since GR is a SDR program itself, I'm suprised that there isnt other people who would naturally
[03:20:26] <Guest36> wish to control and process the output of GR Radio through other SDR programs
[03:21:00] <Jacob[m]123> Most applications and frameworks (GR included) accept data from file, network, or in the case of direct acquisition via radio driver (UHD, soapy, libsidekiq, etc)
[03:21:51] <Guest36> They generally accept data from files, and some SDR programs have network servers for certain SDR models
[03:22:48] <Guest36> but, for example, within the pothos subproject to create a useful environment for use with GR, there's pothos flow and cubicsdr included, but neither of them appear to be able to be used with GR itself
[03:25:24] <Jacob[m]123> This is not a very common use case but I'm sure you could write a pothos sink block if you wanted
[03:26:35] <Jacob[m]123> Or really any software that communicates via IP
[03:27:29] <Jacob[m]123> It appears there is a gr-pothos already
[03:28:01] <Guest36> The bindings allow the blocks to be used within the Pothos framework API and with the Pothos GUI.
[03:28:55] <Guest36> some gnu radio blocks do show up in the pothos interface, but even pothos flow is a similar tool which cannot itself directly talk to a running gnuradio python script instance without additional modifications made to both
[03:30:04] <Jacob[m]123> Like I said this isn't super common. Why do you want to do this?
[03:30:26] <Guest36> so that I can use sdr# in a pipeline with GR
[03:30:53] <Jacob[m]123> To do what. You may just be able to use GR
[03:31:02] <Guest36> GR is a project to provide signal processing blocks for simulation and processing of signals. It is not unreasonable that it be used to process signals for use by other programs.
[03:31:27] <Guest36> otherwise, how could all of the useful things it does be applied to other uses, outside of those strictly limited to a GR-exclusive environment?
[03:32:15] <Jacob[m]123> Jacob[m]123: ☝️
[03:32:37] <Guest36> GR is also used for debugging radio applications. Some radio applications are software defined radio programs
[03:35:05] <Guest36> if GR cannot simulate a radio device, then how does one chain together multiple GR instances? it would necessitate incorporating all components into one master workflow. This, may, of course, be practical- but for example- and to be clear this is not a project I am working on nor will ever work on. But let us say that there is a phased array radio
[03:35:05] <Guest36> system involving krakensdr type systems, which is combined with a RPI cluster.
[03:37:16] <Jacob[m]123> As I told you, you can use the native network blocks to pass data between applications
[03:37:24] <Guest36> perhaps this is exclusively a question for soapysdr. as long as GR maintains that sinks to soapysdr are possible, then it's a question for me to ask soapysdr if they will develop a virtual receiver sink for use with a network server.
[03:39:04] <Guest36> I see now a "tcp sink" and a " udp sink" that are in a category called networking tools. I will attempt to use them along with something called "socket PDU". please forgive me if I am a bit foreign to these mechanisms, i am used to drivers, devices , and servers, such as are used by shortwave SDR listeners and to process audio samples
[03:39:06] <Jacob[m]123> You need support for the other application to receive data in a format GR uses, or a gnuradio sink block that provides data in a format the other application can understand
[03:40:35] <Jacob[m]123> Also must be a compatible transport (file, pipe, tcp, udp, etc)
[03:42:22] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:53:59] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:56:29] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[04:46:40] *** Joins: Macuser (~Macuser@216.30.159.201)
[05:08:59] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:22:01] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:31:20] *** Quits: Elzington__ (~Elzington@static-68-235-44-10.cust.tzulo.com) (Quit: Leaving)
[05:32:15] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[05:40:09] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 252 seconds)
[05:40:31] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[05:46:23] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Ping timeout: 252 seconds)
[05:57:33] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[06:14:15] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:22:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:30:09] *** Quits: bandnyquist (~Rheanna@123.158.85.29) (K-Lined)
[06:40:54] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[06:59:39] <Guest36> jacob there is no way to do that.
[07:01:26] <Jacob[m]123> It's certainly possible, and folks do that all the time.
[07:01:50] <Guest36> There's no way for me to use one of : sdr++, sdr#, sdr-console, cubicsdr to receive the output from TCP Sink.
[07:02:53] <Guest36> They all rely on one of : Spyserver, SoapySDR, rtl_tcp project networking protocol formats to indicate timestamps, I/Q samples, device characteristics and more.
[07:03:35] <Guest36> Marcus Müller in 2016 states" To be completely honest, I always felt the tcp_sink and _source were but incomplete hacks,"
[07:05:10] <Guest36> perhaps that is only true of the characteristics of the TCP implementation, for which either custom or UDP might better serve certain constraints of reliability and output
[07:08:09] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 252 seconds)
[07:09:25] <Guest36> there's some research from 2017 into a module that is used to export IQ data to linrad, and it seems like that's the only such driver, and it's out of tree
[07:11:48] <Jacob[m]123> as ive told you several times, what you are describing is not common.
[07:12:53] <Jacob[m]123> while it is very possible to interface external applications; the tools you are describing are really not adding much to GR
[07:13:31] <Guest36> it would require too much work. That's why gnu radio doesn't even pass timestamps
[07:13:42] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[07:14:13] <Jacob[m]123> im not even sure what that means. GR is more than capable of passing time information and whatever metadata you want over the network
[07:14:31] <Jacob[m]123> or to hardware drivers. this is very common
[07:14:44] <Guest36> tcp sink is a small wrapper around the file_descriptor_sink
[07:15:03] <Guest36> files do not store metadata, to transmit metadata, you have to use a file metadata sink
[07:15:27] <Jacob[m]123> most networked applications i am aware of use the zmq blocks
[07:15:29] <Guest36> as i understood it, timestamps are a form of metadata. I might be wrong, but, then, I dont really know much, and the deeper I go, the more complex things become
[07:16:09] <Jacob[m]123> software radio is indeed a complex subject
[07:17:49] <Jacob[m]123> thats why folks here have been attempting to help you by understanding why you are making the choices you are. its has not been particularly productive.
[07:18:43] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[07:19:20] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:44cc:250c:d83c:ecd)
[07:19:23] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[07:19:52] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[07:20:07] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:59df:891c:fb78:4885)
[07:21:41] <muaddib[m]> <Guest36> "it would require too much work..." <- All due respect, Both of these statements are false. To echo what Jacob said, timestamps are absolutely something that is implemented in GNU radio and yours is a very rare situation.  I Happened to have had a rare situation like this though. I changed one line of code in a program that wanted to received from rtl_tcp and I was able to stream data into it from GNURadio. 
[07:21:41] <muaddib[m]> Anything that uses rtl_tcp expects a flag from that server. The smart way would’ve been to add the flag to GNURadio. I opted to do the hack and remove the need for the flag in the downstream program. Again one line of code.
[07:24:10] <Guest36> Muad'Dib, I only know what I have read. I have only been forensically exploring the data from all angles. https://lists.gnu.org/archive/html/discuss-gnuradio/2017-03/msg00014.html
[07:24:20] <Guest36> This suggested that the files would not contain certain metadata.
[07:27:23] <Jacob[m]123> files are not the primary ICD for moving data between signal processing functions
[07:27:29] <Jacob[m]123> s/ICD/interface/, s/functions/functionse/
[07:27:33] <Jacob[m]123> s/ICD/interface/
[07:27:55] <Guest36> Tcp sink is a file descriptor wrapper
[07:29:58] <Jacob[m]123> the tcp sink is not the primary interface for moving data between signal processing functions either, its a simple way to push IQ data around though, and metadata needs to be handled on an application specific basis; there isnt a universal way to do this
[07:29:59] <Guest36> when I attempted to use tcp sink with sdr#, it was just jumbled noise. Perhaps, if I put more time into this, and do the research required to identify how to convert GR's  32-bit floating point I,Q,I,Q format into 16 bit or 8 bit float, I will manage. RTL tcp outputs uint8 data, which is apparently 8 bit.
[07:30:03] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[07:30:06] <Jacob[m]123> stares at vita49
[07:31:02] <Jacob[m]123> you are going to be very frustrated if you dont put the time into some of the basics on sampling theory and data manipulation for software radio. i highly suggest pysdr.org
[07:31:07] <Guest36> Well, there's the possibility of simply emulating a virtual soapysdr device and using soapysdrserver
[07:31:40] <Jacob[m]123> s/suggest/recommend/
[07:32:03] <muaddib[m]> Guest36: That was the used case as well. Taking data in from a usrp and Scaling the data from complex32 to uint8. It was a hack but it worked
[07:32:21] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[07:32:27] <Guest36> if I truly understood the difficulty of the challenge, i would probably give up. As it stands, I'm going to continue until I achieve something, and once I achieve something, I will decide if additional invested time has a ROI which I care for, and make a strategic decision then. I used to program in C++, java, python, the rest. I now barely
[07:32:28] <Guest36> program, and I prefer to sleep. But this neural network thing has me interested, and I'm going to accomplish something
[07:33:03] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[07:33:12] <Guest36> I will probably have to develop a scaling block anyway because one of the later experiments I want to do has to do with turning a 16bit source(32bit inside of GR) into an 8bit output and training the network to try to reconstitute the 16bit
[07:33:48] <Jacob[m]123> this is all trivial with gnuradio
[07:33:51] <Guest36> This is, of course, possible, otherwise superresolution image networks couldnt cost hundreds of dollars to upscale your jpegs. is it just hallucinating the details? yea to some degree, but your ears wont notice
[07:34:21] <muaddib[m]> Guest36: Existing blocks can do this very simply.
[07:37:50] <Guest36> I see the complex to Ishort block. that's 32 to 16.
[07:38:42] <Guest36> and the scale factor variable
[07:39:53] <Jacob[m]123> I really enjoy talking with folks and getting them pointed in the right direction (and i am just a little bit invested in deep learning as it applies to RF signals), but honestly its quite frustrating that you are so incredibly opposed to investing a very small amount of hours in reading some basic resources that have been suggested, but have no issue engaging users here with hours of uninformed back and forth.
[07:40:02] <Jacob[m]123> Ive seen many people pick software radio up over the years and none of them have been remotely successful without investing time to learn some basic fundamentals. I really encourage you to consider that.
[07:40:18] <Guest36> I've been reading for several days
[07:40:32] <Jacob[m]123> take three hours and read over pysdr.org. it will save you 300 of trying to self-start everything
[07:41:34] <Guest36> this will require a lot more than three hours to understand
[07:41:41] <Guest36> perhaps several years more
[07:43:04] <Guest36> i learn visually and by example. I'm strongly able to infer things and arrive at correlation, but novel concepts take a lot of time. i guess im a little bit like an autoencoder myself.
[07:43:24] <Guest36> Some of this i find useful and i thank you, i'll go over parts of this later when understanding how to model noise of different qualities
[07:43:37] <Guest36> for now, i'm going to keep working on setting up the workflow, so that i have tools i can use
[07:44:07] <Guest36> for certain chapters 7 and 12 are going to be instrumental to me producing any kind of useful work
[08:00:30] <Guest36> complex to int.. nope gotta write it
[08:02:35] <Guest36> oh, its called a char. where in the rest of the world a char is.. a type of character storage
[08:03:32] <muaddib[m]> Eureka
[08:04:27] <Guest36> the rational resampler does not like using decimal values to indicate decimation
[08:04:48] <muaddib[m]> That’s because it’s rational
[08:06:24] <Guest36> the thing is, i'm guessing i have to decimate the sdr i'm using into the other sdr program
[08:07:30] <Guest36> and they're not the same, so now i have an airspy outputting 256K into GR and i'm piping that to SDRsharp which expects an rtlrtcp of exactly 250k, i guess if i study the pysdr software for a while i can figure out if this is why it's all scrambled up, but i assume, since it's the only thing different between them, that this is the case
[08:08:28] <muaddib[m]> Is 256k a design choice or a limitation of your hardware?
[08:08:59] <muaddib[m]> Can you post your flowgraph?
[08:09:17] <Guest36> limitation of hardware
[08:09:56] <Guest36> i'm right now testing out an airspy discovery, but i'm going to help out a little and hack at the soapysdr support for RX-888 and see if i can't get it in there, since the FFT is entirely done on the PC , it supports arbitrary sample rates
[08:10:15] <Guest36> flowgraph is source -> complex to ichar -> tcp sink
[08:11:18] <Guest36> some of the decimators seem like they'd work simply but they all want integer decimation. but decimating 256 to 250k might be the only remaining thing.
[08:13:03] <Guest36> the fractional resampler takes a float, but claims that 0.9765625(the ratio of 250/256) is invalid syntax
[08:13:51] <Guest36> oh, thats backwards, il fix it
[08:14:45] <Guest36> ok, the error is that i left the phase shift field empty. on the interface it shows 0 so the user assumes that it has been set to 0, but that is incorrect, the block does not populate a default value
[08:33:17] <Jacob[m]123> Empty block field checking doesn't seem to be in 3.9. It works correctly in 3.10
[08:34:07] <Jacob[m]123> Might be a relatively recent bug actually, I seem to remember it working 
[08:45:55] <muaddib[m]> Guest36: not discouraging polyphase fractional resampler, but you could do this with the rational resampler
[08:56:29] *** Quits: Peanut (~paul@user/peanut) (*.net *.split)
[08:56:29] *** Quits: nickoe (~quassel@5b96fc67.rev.stofanet.dk) (*.net *.split)
[08:56:29] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: koma (~koma@user/koma) (*.net *.split)
[08:56:30] *** Quits: miaoski (~miaoski@2001-b011-0001-6a07-31d4-de95-b92b-6126.dynamic-ip6.hinet.net) (*.net *.split)
[08:56:30] *** Quits: fredy (~fredy@193.234.224.97) (*.net *.split)
[08:56:30] *** Quits: willcode4 (~willcode4@user/willcode4) (*.net *.split)
[08:56:30] *** Quits: aidanmontare[m] (~aidanmont@2001:470:69fc:105::1:42c9) (*.net *.split)
[08:56:30] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[08:56:30] *** Quits: mybit (~wow@192.241.202.241) (*.net *.split)
[08:56:30] *** Quits: ablutor_ (~quassel@145.131.24.183) (*.net *.split)
[08:56:30] *** Quits: ChrisKocks[m] (~cgkocksgn@2001:470:69fc:105::ff33) (*.net *.split)
[08:56:30] *** Quits: kristoff-on1arf[ (~krbonnegn@2001:470:69fc:105::eae9) (*.net *.split)
[08:56:30] *** Quits: Crofton[m] (~croftongn@2001:470:69fc:105::9a7) (*.net *.split)
[08:56:30] *** Quits: sameerab[m] (~sameerabg@2001:470:69fc:105::1:3342) (*.net *.split)
[08:56:30] *** Quits: instian[m] (~instiangn@2001:470:69fc:105::1:32fa) (*.net *.split)
[08:56:30] *** Quits: HkonVgsether[m] (~haakovgnu@2001:470:69fc:105::e14e) (*.net *.split)
[08:56:30] *** Quits: devector[m] (~devectorg@2001:470:69fc:105::1:3514) (*.net *.split)
[08:56:30] *** Quits: citizenrich[m] (~citizenri@2001:470:69fc:105::e76f) (*.net *.split)
[08:56:30] *** Quits: SanShi (rene@vm-140-107.netclusive.cloud) (*.net *.split)
[08:56:31] *** Quits: yesno (~yesno@109.98.151.179) (*.net *.split)
[08:56:31] *** Quits: Alexer (~alexer@85.17.122.98) (*.net *.split)
[08:56:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[08:56:31] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (*.net *.split)
[08:56:31] *** Quits: superkuh (~superkuh@user/superkuh) (*.net *.split)
[08:56:32] *** Quits: alexfanqi (~alexfan@72.19.13.156) (*.net *.split)
[08:56:32] *** Quits: Malvolio (~Malvolio@user/malvolio) (*.net *.split)
[08:56:32] *** Quits: M0x2b3bfa0[m] (~M0x2b3bfa@2001:470:69fc:105::1:43e9) (*.net *.split)
[08:56:32] *** Quits: AdaBull[m] (~alexander@2001:470:69fc:105::e702) (*.net *.split)
[08:56:32] *** Quits: jsallay[m] (~jsallaygn@2001:470:69fc:105::e161) (*.net *.split)
[08:56:32] *** Quits: locheltree[m] (~locheltre@2001:470:69fc:105::1:33e) (*.net *.split)
[08:56:32] *** Quits: tikhonov[m] (~tikhonovg@2001:470:69fc:105::1:224a) (*.net *.split)
[08:56:32] *** Quits: TD-Linux (~Thomas@user/td-linux) (*.net *.split)
[08:56:32] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (*.net *.split)
[08:56:32] *** Quits: jacekowski (jacekowski@jacekowski.org) (*.net *.split)
[08:56:32] *** Quits: noc0lour (~noc0lour@tarazed.atrz.de) (*.net *.split)
[08:56:32] *** Quits: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne) (*.net *.split)
[08:56:32] *** Quits: dionys (dionys@user/dionys) (*.net *.split)
[08:56:33] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[08:56:33] *** Quits: duude__ (~duude__@user/duude/x-4676560) (*.net *.split)
[08:56:33] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (*.net *.split)
[08:56:33] *** Quits: jamie9898 (~jamie9898@173.199.70.206) (*.net *.split)
[08:56:33] *** Quits: ishan_khare[m] (~ishankhar@2001:470:69fc:105::1:3512) (*.net *.split)
[08:56:33] *** Quits: lounge[m] (~loungegnu@2001:470:69fc:105::1:303d) (*.net *.split)
[08:56:33] *** Quits: hfmoodmodulation (~hfmoodmod@2001:470:69fc:105::1:3354) (*.net *.split)
[08:56:33] *** Quits: ChrisKuethe[m] (~ckuethegn@2001:470:69fc:105::e770) (*.net *.split)
[08:56:33] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[08:56:33] *** Quits: mitsh_ (~mitsh@63.ip-51-254-200.eu) (*.net *.split)
[08:56:34] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[08:56:34] *** Quits: Sout_ (~Sout@user/sout) (*.net *.split)
[08:56:34] *** Quits: bpadalino (~bpadalino@107.191.125.107) (*.net *.split)
[08:56:34] *** Quits: psydruid (~psydruid@2001:470:69fc:105::6fd) (*.net *.split)
[08:56:34] *** Quits: cleverca22[m] (~cleverca2@2001:470:69fc:105::9a0) (*.net *.split)
[08:56:34] *** Quits: wcoburn[m] (~wcoburngn@2001:470:69fc:105::1:961) (*.net *.split)
[08:56:34] *** Quits: tobiaswerner[m] (~tobiaswer@2001:470:69fc:105::ec4c) (*.net *.split)
[08:56:34] *** Quits: rodrirq[m] (~rodrirqgn@2001:470:69fc:105::ebdb) (*.net *.split)
[08:56:34] *** Quits: mspears-VE3AGS[m (~mspearsgn@2001:470:69fc:105::eb5e) (*.net *.split)
[08:56:34] *** Quits: kd8oxt[m] (~kd8oxtgnu@2001:470:69fc:105::1:2af1) (*.net *.split)
[08:56:34] *** Quits: wanliu[m] (~wanliugnu@2001:470:69fc:105::e1b1) (*.net *.split)
[08:56:34] *** Quits: SebastianKoslows (~skoslowsk@2001:470:69fc:105::e1a4) (*.net *.split)
[08:56:34] *** Quits: Yamakaja[m] (~yamakajag@2001:470:69fc:105::e1b5) (*.net *.split)
[08:56:34] *** Quits: mait[m] (~maitrforg@2001:470:69fc:105::e170) (*.net *.split)
[08:56:34] *** Quits: ghostop14[m] (~ghostop14@2001:470:69fc:105::e14c) (*.net *.split)
[08:56:34] *** Quits: neelpandeya[m] (~neelpande@2001:470:69fc:105::e17f) (*.net *.split)
[08:56:34] *** Quits: matt_mills[m] (~f0urtyfiv@2001:470:69fc:105::e142) (*.net *.split)
[08:56:34] *** Quits: GVardakis[m] (~vardakism@2001:470:69fc:105::2e4a) (*.net *.split)
[08:56:34] *** Quits: StVM[m] (~staticvoi@2001:470:69fc:105::1:1a6a) (*.net *.split)
[08:56:34] *** Quits: romanblanco[m] (~romanblan@2001:470:69fc:105::150f) (*.net *.split)
[08:56:34] *** Quits: DerekKozel[m] (~dkozelgnu@2001:470:69fc:105::2f14) (*.net *.split)
[08:56:34] *** Quits: willcode4[m] (~willcode4@2001:470:69fc:105::e1b3) (*.net *.split)
[08:56:34] *** Quits: vomoniyi[m] (~vomoniyig@2001:470:69fc:105::3023) (*.net *.split)
[08:56:34] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:56:34] *** Quits: linge93[m] (~linge93gn@2001:470:69fc:105::eb07) (*.net *.split)
[08:56:34] *** Quits: mk[m]12 (~mkgnuradi@2001:470:69fc:105::1:4106) (*.net *.split)
[08:56:35] *** Quits: itstexmex[m] (~itstexmex@2001:470:69fc:105::1:3891) (*.net *.split)
[08:56:35] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[08:56:35] *** Quits: radio[m] (~radiognur@2001:470:69fc:105::1:3f9f) (*.net *.split)
[08:56:35] *** Quits: faithruse[m] (~faithruse@2001:470:69fc:105::1:3e68) (*.net *.split)
[08:56:35] *** Quits: LOWWer (~LOWWer@128-245-53.fonira.net) (*.net *.split)
[08:56:35] *** Quits: danny[m]12 (~dannygnur@2001:470:69fc:105::1:2eb1) (*.net *.split)
[08:56:35] *** Quits: frnot[m]1 (~frnotmatr@2001:470:69fc:105::dd34) (*.net *.split)
[08:56:35] *** Quits: jordens[m] (~jordensma@2001:470:69fc:105::1:2e95) (*.net *.split)
[08:56:35] *** Quits: danidubok777[m] (~danidubok@2001:470:69fc:105::1:1fad) (*.net *.split)
[08:56:35] *** Quits: Troy__Bates[m] (~moonduckg@2001:470:69fc:105::eb51) (*.net *.split)
[08:56:35] *** Quits: berkays[m] (~berkaysgn@2001:470:69fc:105::e73e) (*.net *.split)
[08:56:35] *** Quits: anwesh[m] (~anweshgnu@2001:470:69fc:105::1:34dd) (*.net *.split)
[08:56:35] *** Quits: Jacob[m]123 (~jacobgilb@2001:470:69fc:105::e156) (*.net *.split)
[08:56:35] *** Quits: AaronGiles[m] (~scangeekg@2001:470:69fc:105::e1a1) (*.net *.split)
[08:56:35] *** Quits: ClaytonargiloVE3 (~argilognu@2001:470:69fc:105::e120) (*.net *.split)
[08:56:35] *** Quits: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d) (*.net *.split)
[08:56:35] *** Quits: funkylab[m] (~funkylabg@2001:470:69fc:105::e148) (*.net *.split)
[08:56:35] *** Quits: danlayne[m] (~danlayneg@2001:470:69fc:105::1:433f) (*.net *.split)
[08:56:35] *** Quits: JoshMorman[m] (~mormjgnur@2001:470:69fc:105::e17a) (*.net *.split)
[08:56:35] *** Quits: JDemel[m] (~johannesd@2001:470:69fc:105::e15d) (*.net *.split)
[08:56:35] *** Quits: {null}[m] (~nullkdeor@2001:470:69fc:105::3f37) (*.net *.split)
[08:56:35] *** Quits: fredy[m] (~fredymatr@2001:470:69fc:105::2d41) (*.net *.split)
[08:56:35] *** Quits: marotoby[m] (~marotobyg@2001:470:69fc:105::1:403a) (*.net *.split)
[08:56:36] *** Quits: MrCircuitMatt- (~max@toxik.info) (*.net *.split)
[08:56:36] *** Quits: tnt (~tnt@osmocom/tnt) (*.net *.split)
[08:56:36] *** Quits: joa[m] (~joagnurad@2001:470:69fc:105::1:3dca) (*.net *.split)
[08:56:36] *** Quits: Martin[m]123456 (~martinmat@2001:470:69fc:105::1:3c0f) (*.net *.split)
[08:56:36] *** Quits: cparker[m] (~cparker@2001:470:69fc:105::1973) (*.net *.split)
[08:56:36] *** Quits: gidget[m] (~gidgetgnu@2001:470:69fc:105::1:327c) (*.net *.split)
[08:56:36] *** Quits: kylie[m] (~kyliegnur@2001:470:69fc:105::1:23a9) (*.net *.split)
[08:56:36] *** Quits: vladis[m] (~vladisgnu@2001:470:69fc:105::1:3213) (*.net *.split)
[08:56:36] *** Quits: ro81[m] (~ro81matri@2001:470:69fc:105::1:8f) (*.net *.split)
[08:56:36] *** Quits: bhilburn[m] (~bhilburng@2001:470:69fc:105::e127) (*.net *.split)
[08:56:36] *** Quits: sergforce[m] (~sergforce@2001:470:69fc:105::fd39) (*.net *.split)
[08:56:36] *** Quits: Maescool[m] (~pietermae@2001:470:69fc:105::14a2) (*.net *.split)
[08:56:36] *** Quits: lyes[m] (~lyesgnura@2001:470:69fc:105::1:353b) (*.net *.split)
[08:56:36] *** Quits: kieranlevin[m] (~kieranlev@2001:470:69fc:105::eae8) (*.net *.split)
[08:56:36] *** Quits: geraman21[m] (~geraman21@2001:470:69fc:105::e79d) (*.net *.split)
[08:56:36] *** Quits: Sam[m]123456 (~samwhitin@2001:470:69fc:105::e217) (*.net *.split)
[08:56:36] *** Quits: evs09816[m] (~evs09816g@2001:470:69fc:105::e140) (*.net *.split)
[08:56:36] *** Quits: douggeiger[m] (~douggeige@2001:470:69fc:105::e137) (*.net *.split)
[08:56:36] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[08:56:36] *** Quits: beewe[m] (~beewegnur@2001:470:69fc:105::1:45f4) (*.net *.split)
[08:56:36] *** Quits: ampledataW2GMD[m (~ampledata@2001:470:69fc:105::1:41b3) (*.net *.split)
[08:56:36] *** Quits: MarcLichtman[m] (~marcgnura@2001:470:69fc:105::e172) (*.net *.split)
[08:56:36] *** Quits: frainz[m] (~frainzfai@2001:470:69fc:105::ea2e) (*.net *.split)
[08:56:36] *** Quits: wiml[m] (~wimlmatri@2001:470:69fc:105::ec8b) (*.net *.split)
[08:56:36] *** Quits: joejoejoe[m] (~joemvicma@2001:470:69fc:105::1:18d8) (*.net *.split)
[08:56:37] *** Quits: funkylab (~Funkylab@hostalia.de) (*.net *.split)
[08:56:37] *** Quits: atluxity (~atluxity@178.63.28.77) (*.net *.split)
[08:56:37] *** Quits: joj (~joj@jojeee.xyz) (*.net *.split)
[08:56:37] *** Quits: beau[m] (~beaugnura@2001:470:69fc:105::1:3fdd) (*.net *.split)
[08:56:37] *** Quits: ra1nb0w (~rainbow@user/rainbow) (*.net *.split)
[08:56:37] *** Quits: mcan06[m] (~mcan06gnu@2001:470:69fc:105::eb3a) (*.net *.split)
[08:56:37] *** Quits: junagarhi1[m] (~junagarhi@2001:470:69fc:105::1:3ad4) (*.net *.split)
[08:56:37] *** Quits: murrayn (~murray@user/murrayn) (*.net *.split)
[08:56:37] *** Quits: promach[m] (~promach@2001:470:69fc:105::ca1) (*.net *.split)
[08:56:37] *** Quits: merit (~merit@2001:470:69fc:105::5ae) (*.net *.split)
[08:56:37] *** Quits: rfjohnso[m]1 (~rfjohnsom@2001:470:69fc:105::1:1d01) (*.net *.split)
[08:56:37] *** Quits: IvanRodriguez[m] (~viktoriva@2001:470:69fc:105::ec6f) (*.net *.split)
[08:56:37] *** Quits: blue94[m] (~blue94gnu@2001:470:69fc:105::1:3004) (*.net *.split)
[08:56:37] *** Quits: ascialdo[m] (~ascialdog@2001:470:69fc:105::1:2ea9) (*.net *.split)
[08:56:37] *** Quits: Hash[m] (~bitbangin@2001:470:69fc:105::e748) (*.net *.split)
[08:56:37] *** Quits: SEhrhard[m] (~typeregnu@2001:470:69fc:105::ec5d) (*.net *.split)
[08:56:37] *** Quits: CillianODriscoll (~odriscign@2001:470:69fc:105::eb88) (*.net *.split)
[08:56:37] *** Quits: frnot[m] (~frnotgnur@2001:470:69fc:105::ea36) (*.net *.split)
[08:56:37] *** Quits: risenrob[m] (~risenrobg@2001:470:69fc:105::1:2dc9) (*.net *.split)
[08:56:37] *** Quits: pomeroy3[m] (~pomeroy3g@2001:470:69fc:105::1:230f) (*.net *.split)
[08:56:37] *** Quits: Notou[m] (~notougnur@2001:470:69fc:105::e185) (*.net *.split)
[08:56:37] *** Quits: sammp[m] (~sammpgnur@2001:470:69fc:105::ebef) (*.net *.split)
[08:56:37] *** Quits: Aang23[m] (~aang23alt@2001:470:69fc:105::c8a1) (*.net *.split)
[08:56:37] *** Quits: noc0lour_ (~noc0lour@2001:470:69fc:105::32f4) (*.net *.split)
[08:56:37] *** Quits: halfy (~halfy@goodboy/halfy) (*.net *.split)
[08:56:37] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[08:56:37] *** Quits: roox (~roox@blackhole.pmtu.de) (*.net *.split)
[08:56:38] *** Quits: melfvelin[m] (~melfvelin@2001:470:69fc:105::eb37) (*.net *.split)
[08:56:38] *** Quits: drmpeg[m] (~drmpeggnu@2001:470:69fc:105::e139) (*.net *.split)
[08:56:38] *** Quits: z[m]1234 (~zgnuradio@2001:470:69fc:105::1:40e9) (*.net *.split)
[08:56:38] *** Quits: flash[m] (~flashgnur@2001:470:69fc:105::e302) (*.net *.split)
[08:56:38] *** Quits: miek[m]1 (~miekgnura@2001:470:69fc:105::fe35) (*.net *.split)
[08:56:38] *** Quits: esden (sid32455@id-32455.hampstead.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: sndrfrbr[m] (~sndrfrbrm@2001:470:69fc:105::ec10) (*.net *.split)
[08:56:38] *** Quits: miallema[m] (~miallemag@2001:470:69fc:105::1:373c) (*.net *.split)
[08:56:38] *** Quits: rlh157[m] (~rlh157gnu@2001:470:69fc:105::1:2eec) (*.net *.split)
[08:56:38] *** Quits: rjc150[m] (~rjc150gnu@2001:470:69fc:105::1:2eeb) (*.net *.split)
[08:56:38] *** Quits: amlangford[m] (~amlangfor@2001:470:69fc:105::ffeb) (*.net *.split)
[08:56:38] *** Quits: throwaway127[m] (~throwaway@2001:470:69fc:105::e85b) (*.net *.split)
[08:56:38] *** Quits: Jayaraj[m] (~jyjnairma@2001:470:69fc:105::8590) (*.net *.split)
[08:56:38] *** Quits: Gabriel[m]1234 (~gabriel22@2001:470:69fc:105::ea37) (*.net *.split)
[08:56:38] *** Quits: ejk[m] (~ejkgnurad@2001:470:69fc:105::e13d) (*.net *.split)
[08:56:38] *** Quits: neil[m] (~neilglasg@2001:470:69fc:105::642) (*.net *.split)
[08:56:38] *** Quits: [Sec] (~Sec@user/sec/x-9569764) (*.net *.split)
[08:56:39] *** Quits: blackbit (blackbit@ghost.xx.vu) (*.net *.split)
[08:56:39] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[08:56:39] *** Quits: lab91932[m] (~lab91932g@2001:470:69fc:105::1:3f2e) (*.net *.split)
[08:56:39] *** Quits: barjac (~quassel@94.197.170.57.threembb.co.uk) (*.net *.split)
[08:56:39] *** Quits: junagarhi[m] (~junagarhi@2001:470:69fc:105::eaca) (*.net *.split)
[08:56:39] *** Quits: jason[m]123 (~jasongnur@2001:470:69fc:105::1:2602) (*.net *.split)
[08:56:39] *** Quits: ldplayer[m] (~ldplayerg@2001:470:69fc:105::1:2a74) (*.net *.split)
[08:56:39] *** Quits: kraxel[m] (~kraxelgnu@2001:470:69fc:105::1:2c89) (*.net *.split)
[08:56:39] *** Quits: courtarro[m] (~courtarro@2001:470:69fc:105::1:32df) (*.net *.split)
[08:56:39] *** Quits: eniac[m] (~eniacgnur@2001:470:69fc:105::1:54) (*.net *.split)
[08:56:39] *** Quits: Bewe[m] (~bewegnura@2001:470:69fc:105::e744) (*.net *.split)
[08:56:39] *** Quits: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f) (*.net *.split)
[08:56:39] *** Quits: mwk088[m] (~mwk088gnu@2001:470:69fc:105::f040) (*.net *.split)
[08:56:39] *** Quits: rsundar[m] (~rsundargn@2001:470:69fc:105::ebe8) (*.net *.split)
[08:56:39] *** Quits: baronsaturday[m] (~baronsatu@2001:470:69fc:105::1:3148) (*.net *.split)
[08:56:39] *** Quits: RyanVolz[m] (~ryanvolzm@2001:470:69fc:105::e19c) (*.net *.split)
[08:56:39] *** Quits: eph123[m] (~eph123gnu@2001:470:69fc:105::e13e) (*.net *.split)
[08:56:39] *** Quits: Donflamewires[m] (~flamewire@2001:470:69fc:105::e144) (*.net *.split)
[08:56:39] *** Quits: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927) (*.net *.split)
[08:56:39] *** Quits: dsorber[m] (~dsorbergn@2001:470:69fc:105::e13a) (*.net *.split)
[08:56:39] *** Quits: flynn378[m] (~flynn378g@2001:470:69fc:105::e145) (*.net *.split)
[08:56:39] *** Quits: thoth[m] (~thoth1010@2001:470:69fc:105::20c2) (*.net *.split)
[08:56:39] *** Quits: troycurtisjr[m] (~troycurti@2001:470:69fc:105::f156) (*.net *.split)
[08:56:39] *** Quits: jholtom (~holly@user/jholtom) (*.net *.split)
[08:56:39] *** Quits: dreamerchrisMO[m (~dreamerch@2001:470:69fc:105::795c) (*.net *.split)
[08:56:39] *** Quits: nki (~nki@adsl-89-217-141-227.adslplus.ch) (*.net *.split)
[08:56:40] *** Quits: Crofton (sid401373@id-401373.lymington.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: sarbog[m] (~sarboggnu@2001:470:69fc:105::1:3bf2) (*.net *.split)
[08:56:40] *** Quits: n00p (~n0p@2a01:4f8:c2c:b82d::1) (*.net *.split)
[08:56:40] *** Quits: luisherasme[m] (~luisheras@2001:470:69fc:105::1:3008) (*.net *.split)
[08:56:40] *** Quits: hu6o[m] (~hu6ognura@2001:470:69fc:105::1:2c46) (*.net *.split)
[08:56:40] *** Quits: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc) (*.net *.split)
[08:56:40] *** Quits: beroset[m]1 (~berosetgn@2001:470:69fc:105::e742) (*.net *.split)
[08:56:40] *** Quits: dmiller[m] (~dmillergn@2001:470:69fc:105::e9f6) (*.net *.split)
[08:56:40] *** Quits: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4) (*.net *.split)
[08:56:40] *** Quits: broadcrap[m] (~broadcrap@2001:470:69fc:105::e756) (*.net *.split)
[08:56:40] *** Quits: VasilVelichkov[m (~vvvelichk@2001:470:69fc:105::e1af) (*.net *.split)
[08:56:40] *** Quits: vossiam[m] (~vossiamgn@2001:470:69fc:105::e1ae) (*.net *.split)
[08:56:40] *** Quits: thewyliestcoyote (~thewylies@2001:470:69fc:105::e1ab) (*.net *.split)
[08:56:40] *** Quits: mbr0wn[m] (~mbr0wngnu@2001:470:69fc:105::e175) (*.net *.split)
[08:56:40] *** Quits: bastibl[m] (~bastiblgn@2001:470:69fc:105::e125) (*.net *.split)
[08:56:40] *** Quits: sdh11[m] (~sdh11gnur@2001:470:69fc:105::e1a2) (*.net *.split)
[08:56:40] *** Quits: JacobHoltom[m] (~jholtomgn@2001:470:69fc:105::e159) (*.net *.split)
[08:56:40] *** Quits: anderskaloer[m] (~anderskal@2001:470:69fc:105::2e24) (*.net *.split)
[08:56:40] *** Quits: shayanmajumder[m (~shayanmaj@2001:470:69fc:105::c3a5) (*.net *.split)
[08:56:40] *** Quits: Reventlov[m] (~rgrunblam@2001:470:69fc:105::b26) (*.net *.split)
[08:56:40] *** Quits: ljakab_ (~lori@falco.icanhas.net) (*.net *.split)
[08:56:40] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[08:56:40] *** Quits: schneider (~schneider@irc2.xtort.eu) (*.net *.split)
[08:56:40] *** Quits: Zero_Chaos (~zerochaos@gentoo/developer/pentoo/zerochaos) (*.net *.split)
[08:56:40] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[08:56:40] *** Quits: Guest36 (~Guest36@64.224.81.27) (*.net *.split)
[08:56:40] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (*.net *.split)
[08:56:41] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[08:58:12] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[08:58:12] *** Joins: Colt (~Colt@user/colt)
[08:58:12] *** Joins: Guest36 (~Guest36@64.224.81.27)
[08:58:12] *** Joins: Malvolio (~Malvolio@user/malvolio)
[08:58:12] *** Joins: yesno (~yesno@109.98.151.179)
[08:58:12] *** Joins: Alexer (~alexer@85.17.122.98)
[08:58:12] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:58:12] *** Joins: koma (~koma@user/koma)
[08:58:12] *** Joins: beewe[m] (~beewegnur@2001:470:69fc:105::1:45f4)
[08:58:12] *** Joins: melfvelin[m] (~melfvelin@2001:470:69fc:105::eb37)
[08:58:12] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[08:58:12] *** Joins: M0x2b3bfa0[m] (~M0x2b3bfa@2001:470:69fc:105::1:43e9)
[08:58:12] *** Joins: miaoski (~miaoski@2001-b011-0001-6a07-31d4-de95-b92b-6126.dynamic-ip6.hinet.net)
[08:58:12] *** Joins: fredy (~fredy@193.234.224.97)
[08:58:12] *** Joins: danlayne[m] (~danlayneg@2001:470:69fc:105::1:433f)
[08:58:12] *** Joins: spithash (~spithash@user/spithash)
[08:58:12] *** Joins: willcode4 (~willcode4@user/willcode4)
[08:58:12] *** Joins: aidanmontare[m] (~aidanmont@2001:470:69fc:105::1:42c9)
[08:58:12] *** Joins: superkuh (~superkuh@user/superkuh)
[08:58:12] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[08:58:12] *** Joins: mybit (~wow@192.241.202.241)
[08:58:12] *** Joins: ablutor_ (~quassel@145.131.24.183)
[08:58:12] *** Joins: AdaBull[m] (~alexander@2001:470:69fc:105::e702)
[08:58:12] *** Joins: ampledataW2GMD[m (~ampledata@2001:470:69fc:105::1:41b3)
[08:58:12] *** Joins: ChrisKocks[m] (~cgkocksgn@2001:470:69fc:105::ff33)
[08:58:12] *** Joins: JoshMorman[m] (~mormjgnur@2001:470:69fc:105::e17a)
[08:58:12] *** Joins: MarcLichtman[m] (~marcgnura@2001:470:69fc:105::e172)
[08:58:12] *** Joins: ishan_khare[m] (~ishankhar@2001:470:69fc:105::1:3512)
[08:58:12] *** Joins: kristoff-on1arf[ (~krbonnegn@2001:470:69fc:105::eae9)
[08:58:12] *** Joins: drmpeg[m] (~drmpeggnu@2001:470:69fc:105::e139)
[08:58:12] *** Joins: frainz[m] (~frainzfai@2001:470:69fc:105::ea2e)
[08:58:12] *** Joins: wiml[m] (~wimlmatri@2001:470:69fc:105::ec8b)
[08:58:12] *** Joins: linge93[m] (~linge93gn@2001:470:69fc:105::eb07)
[08:58:12] *** Joins: Crofton[m] (~croftongn@2001:470:69fc:105::9a7)
[08:58:12] *** Joins: mk[m]12 (~mkgnuradi@2001:470:69fc:105::1:4106)
[08:58:12] *** Joins: JDemel[m] (~johannesd@2001:470:69fc:105::e15d)
[08:58:12] *** Joins: sameerab[m] (~sameerabg@2001:470:69fc:105::1:3342)
[08:58:12] *** Joins: lounge[m] (~loungegnu@2001:470:69fc:105::1:303d)
[08:58:12] *** Joins: hfmoodmodulation (~hfmoodmod@2001:470:69fc:105::1:3354)
[08:58:12] *** Joins: instian[m] (~instiangn@2001:470:69fc:105::1:32fa)
[08:58:12] *** Joins: {null}[m] (~nullkdeor@2001:470:69fc:105::3f37)
[08:58:12] *** Joins: jsallay[m] (~jsallaygn@2001:470:69fc:105::e161)
[08:58:12] *** Joins: locheltree[m] (~locheltre@2001:470:69fc:105::1:33e)
[08:58:12] *** Joins: HkonVgsether[m] (~haakovgnu@2001:470:69fc:105::e14e)
[08:58:12] *** Joins: z[m]1234 (~zgnuradio@2001:470:69fc:105::1:40e9)
[08:58:12] *** Joins: joejoejoe[m] (~joemvicma@2001:470:69fc:105::1:18d8)
[08:58:12] *** Joins: flash[m] (~flashgnur@2001:470:69fc:105::e302)
[08:58:12] *** Joins: ChrisKuethe[m] (~ckuethegn@2001:470:69fc:105::e770)
[08:58:12] *** Joins: tikhonov[m] (~tikhonovg@2001:470:69fc:105::1:224a)
[08:58:12] *** Joins: miek[m]1 (~miekgnura@2001:470:69fc:105::fe35)
[08:58:12] *** Joins: devector[m] (~devectorg@2001:470:69fc:105::1:3514)
[08:58:12] *** Joins: citizenrich[m] (~citizenri@2001:470:69fc:105::e76f)
[08:58:12] *** Joins: fredy[m] (~fredymatr@2001:470:69fc:105::2d41)
[08:58:12] *** Joins: itstexmex[m] (~itstexmex@2001:470:69fc:105::1:3891)
[08:58:12] *** Joins: SanShi (rene@vm-140-107.netclusive.cloud)
[08:58:12] *** Joins: funkylab (~Funkylab@hostalia.de)
[08:58:12] *** Joins: atluxity (~atluxity@178.63.28.77)
[08:58:12] *** Joins: joj (~joj@jojeee.xyz)
[08:58:12] *** Joins: Isthmusi (~Isthmus@user/isveni)
[08:58:12] *** Joins: TD-Linux (~Thomas@user/td-linux)
[08:58:12] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[08:58:12] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[08:58:12] *** Joins: jacekowski (jacekowski@jacekowski.org)
[08:58:12] *** Joins: noc0lour (~noc0lour@tarazed.atrz.de)
[08:58:12] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[08:58:12] *** Joins: marotoby[m] (~marotobyg@2001:470:69fc:105::1:403a)
[08:58:12] *** Joins: alexfanqi (~alexfan@72.19.13.156)
[08:58:12] *** Joins: beau[m] (~beaugnura@2001:470:69fc:105::1:3fdd)
[08:58:12] *** Joins: blackbit (blackbit@ghost.xx.vu)
[08:58:12] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[08:58:12] *** Joins: radio[m] (~radiognur@2001:470:69fc:105::1:3f9f)
[08:58:12] *** Joins: StVM[m] (~staticvoi@2001:470:69fc:105::1:1a6a)
[08:58:12] *** Joins: lab91932[m] (~lab91932g@2001:470:69fc:105::1:3f2e)
[08:58:12] *** Joins: barjac (~quassel@94.197.170.57.threembb.co.uk)
[08:58:12] *** Joins: esden (sid32455@id-32455.hampstead.irccloud.com)
[08:58:12] *** Joins: junagarhi[m] (~junagarhi@2001:470:69fc:105::eaca)
[08:58:12] *** Joins: sndrfrbr[m] (~sndrfrbrm@2001:470:69fc:105::ec10)
[08:58:12] *** Joins: faithruse[m] (~faithruse@2001:470:69fc:105::1:3e68)
[08:58:12] *** Joins: dionys (dionys@user/dionys)
[08:58:12] *** Joins: MrCircuitMatt- (~max@toxik.info)
[08:58:12] *** Joins: tnt (~tnt@osmocom/tnt)
[08:58:12] *** Joins: mitsh_ (~mitsh@63.ip-51-254-200.eu)
[08:58:12] *** Joins: ra1nb0w (~rainbow@user/rainbow)
[08:58:12] *** Joins: Cienisty (Cienisty@user/cienisty)
[08:58:12] *** Joins: joa[m] (~joagnurad@2001:470:69fc:105::1:3dca)
[08:58:12] *** Joins: Ara (~Ara@user/ara)
[08:58:12] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[08:58:12] *** Joins: Martin[m]123456 (~martinmat@2001:470:69fc:105::1:3c0f)
[08:58:12] *** Joins: Crofton (sid401373@id-401373.lymington.irccloud.com)
[08:58:12] *** Joins: sarbog[m] (~sarboggnu@2001:470:69fc:105::1:3bf2)
[08:58:12] *** Joins: mcan06[m] (~mcan06gnu@2001:470:69fc:105::eb3a)
[08:58:12] *** Joins: merit (~merit@2001:470:69fc:105::5ae)
[08:58:12] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[08:58:12] *** Joins: junagarhi1[m] (~junagarhi@2001:470:69fc:105::1:3ad4)
[08:58:12] *** Joins: Sout_ (~Sout@user/sout)
[08:58:12] *** Joins: jamie9898 (~jamie9898@173.199.70.206)
[08:58:12] *** Joins: bpadalino (~bpadalino@107.191.125.107)
[08:58:12] *** Joins: murrayn (~murray@user/murrayn)
[08:58:12] *** Joins: n00p (~n0p@2a01:4f8:c2c:b82d::1)
[08:58:12] *** Joins: LOWWer (~LOWWer@128-245-53.fonira.net)
[08:58:12] *** Joins: cleverca22[m] (~cleverca2@2001:470:69fc:105::9a0)
[08:58:12] *** Joins: cparker[m] (~cparker@2001:470:69fc:105::1973)
[08:58:12] *** Joins: psydruid (~psydruid@2001:470:69fc:105::6fd)
[08:58:12] *** Joins: promach[m] (~promach@2001:470:69fc:105::ca1)
[08:58:12] *** Joins: jason[m]123 (~jasongnur@2001:470:69fc:105::1:2602)
[08:58:12] *** Joins: rfjohnso[m]1 (~rfjohnsom@2001:470:69fc:105::1:1d01)
[08:58:12] *** Joins: frnot[m]1 (~frnotmatr@2001:470:69fc:105::dd34)
[08:58:12] *** Joins: danny[m]12 (~dannygnur@2001:470:69fc:105::1:2eb1)
[08:58:12] *** Joins: blue94[m] (~blue94gnu@2001:470:69fc:105::1:3004)
[08:58:12] *** Joins: IvanRodriguez[m] (~viktoriva@2001:470:69fc:105::ec6f)
[08:58:12] *** Joins: courtarro[m] (~courtarro@2001:470:69fc:105::1:32df)
[08:58:12] *** Joins: kraxel[m] (~kraxelgnu@2001:470:69fc:105::1:2c89)
[08:58:12] *** Joins: ldplayer[m] (~ldplayerg@2001:470:69fc:105::1:2a74)
[08:58:12] *** Joins: vladis[m] (~vladisgnu@2001:470:69fc:105::1:3213)
[08:58:12] *** Joins: kylie[m] (~kyliegnur@2001:470:69fc:105::1:23a9)
[08:58:12] *** Joins: gidget[m] (~gidgetgnu@2001:470:69fc:105::1:327c)
[08:58:12] *** Joins: miallema[m] (~miallemag@2001:470:69fc:105::1:373c)
[08:58:12] *** Joins: hu6o[m] (~hu6ognura@2001:470:69fc:105::1:2c46)
[08:58:12] *** Joins: luisherasme[m] (~luisheras@2001:470:69fc:105::1:3008)
[08:58:12] *** Joins: rjc150[m] (~rjc150gnu@2001:470:69fc:105::1:2eeb)
[08:58:12] *** Joins: rlh157[m] (~rlh157gnu@2001:470:69fc:105::1:2eec)
[08:58:12] *** Joins: wcoburn[m] (~wcoburngn@2001:470:69fc:105::1:961)
[08:58:12] *** Joins: Hash[m] (~bitbangin@2001:470:69fc:105::e748)
[08:58:12] *** Joins: ascialdo[m] (~ascialdog@2001:470:69fc:105::1:2ea9)
[08:58:12] *** Joins: ro81[m] (~ro81matri@2001:470:69fc:105::1:8f)
[08:58:12] *** Joins: bhilburn[m] (~bhilburng@2001:470:69fc:105::e127)
[08:58:12] *** Joins: eniac[m] (~eniacgnur@2001:470:69fc:105::1:54)
[08:58:12] *** Joins: jordens[m] (~jordensma@2001:470:69fc:105::1:2e95)
[08:58:12] *** Joins: danidubok777[m] (~danidubok@2001:470:69fc:105::1:1fad)
[08:58:12] *** Joins: Bewe[m] (~bewegnura@2001:470:69fc:105::e744)
[08:58:12] *** Joins: sergforce[m] (~sergforce@2001:470:69fc:105::fd39)
[08:58:12] *** Joins: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f)
[08:58:12] *** Joins: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc)
[08:58:12] *** Joins: evs09816[m] (~evs09816g@2001:470:69fc:105::e140)
[08:58:12] *** Joins: VasilVelichkov[m (~vvvelichk@2001:470:69fc:105::e1af)
[08:58:12] *** Joins: pomeroy3[m] (~pomeroy3g@2001:470:69fc:105::1:230f)
[08:58:12] *** Joins: GVardakis[m] (~vardakism@2001:470:69fc:105::2e4a)
[08:58:12] *** Joins: thewyliestcoyote (~thewylies@2001:470:69fc:105::e1ab)
[08:58:12] *** Joins: amlangford[m] (~amlangfor@2001:470:69fc:105::ffeb)
[08:58:12] *** Joins: mwk088[m] (~mwk088gnu@2001:470:69fc:105::f040)
[08:58:12] *** Joins: ejk[m] (~ejkgnurad@2001:470:69fc:105::e13d)
[08:58:12] *** Joins: ClaytonargiloVE3 (~argilognu@2001:470:69fc:105::e120)
[08:58:12] *** Joins: SEhrhard[m] (~typeregnu@2001:470:69fc:105::ec5d)
[08:58:12] *** Joins: throwaway127[m] (~throwaway@2001:470:69fc:105::e85b)
[08:58:12] *** Joins: tobiaswerner[m] (~tobiaswer@2001:470:69fc:105::ec4c)
[08:58:12] *** Joins: rsundar[m] (~rsundargn@2001:470:69fc:105::ebe8)
[08:58:12] *** Joins: rodrirq[m] (~rodrirqgn@2001:470:69fc:105::ebdb)
[08:58:12] *** Joins: flynn378[m] (~flynn378g@2001:470:69fc:105::e145)
[08:58:12] *** Joins: dreamerchrisMO[m (~dreamerch@2001:470:69fc:105::795c)
[08:58:12] *** Joins: ghostop14[m] (~ghostop14@2001:470:69fc:105::e14c)
[08:58:12] *** Joins: eph123[m] (~eph123gnu@2001:470:69fc:105::e13e)
[08:58:12] *** Joins: Donflamewires[m] (~flamewire@2001:470:69fc:105::e144)
[08:58:12] *** Joins: troycurtisjr[m] (~troycurti@2001:470:69fc:105::f156)
[08:58:12] *** Joins: Maescool[m] (~pietermae@2001:470:69fc:105::14a2)
[08:58:12] *** Joins: CillianODriscoll (~odriscign@2001:470:69fc:105::eb88)
[08:58:12] *** Joins: Yamakaja[m] (~yamakajag@2001:470:69fc:105::e1b5)
[08:58:12] *** Joins: willcode4[m] (~willcode4@2001:470:69fc:105::e1b3)
[08:58:12] *** Joins: wanliu[m] (~wanliugnu@2001:470:69fc:105::e1b1)
[08:58:12] *** Joins: vossiam[m] (~vossiamgn@2001:470:69fc:105::e1ae)
[08:58:12] *** Joins: vomoniyi[m] (~vomoniyig@2001:470:69fc:105::3023)
[08:58:12] *** Joins: thoth[m] (~thoth1010@2001:470:69fc:105::20c2)
[08:58:12] *** Joins: SebastianKoslows (~skoslowsk@2001:470:69fc:105::e1a4)
[08:58:12] *** Joins: shayanmajumder[m (~shayanmaj@2001:470:69fc:105::c3a5)
[08:58:12] *** Joins: AaronGiles[m] (~scangeekg@2001:470:69fc:105::e1a1)
[08:58:12] *** Joins: Sam[m]123456 (~samwhitin@2001:470:69fc:105::e217)
[08:58:12] *** Joins: sammp[m] (~sammpgnur@2001:470:69fc:105::ebef)
[08:58:12] *** Joins: RyanVolz[m] (~ryanvolzm@2001:470:69fc:105::e19c)
[08:58:12] *** Joins: romanblanco[m] (~romanblan@2001:470:69fc:105::150f)
[08:58:12] *** Joins: Troy__Bates[m] (~moonduckg@2001:470:69fc:105::eb51)
[08:58:12] *** Joins: mspears-VE3AGS[m (~mspearsgn@2001:470:69fc:105::eb5e)
[08:58:12] *** Joins: lyes[m] (~lyesgnura@2001:470:69fc:105::1:353b)
[08:58:12] *** Joins: Reventlov[m] (~rgrunblam@2001:470:69fc:105::b26)
[08:58:12] *** Joins: kieranlevin[m] (~kieranlev@2001:470:69fc:105::eae8)
[08:58:12] *** Joins: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d)
[08:58:12] *** Joins: noc0lour_ (~noc0lour@2001:470:69fc:105::32f4)
[08:58:12] *** Joins: neil[m] (~neilglasg@2001:470:69fc:105::642)
[08:58:12] *** Joins: neelpandeya[m] (~neelpande@2001:470:69fc:105::e17f)
[08:58:12] *** Joins: Jayaraj[m] (~jyjnairma@2001:470:69fc:105::8590)
[08:58:12] *** Joins: Gabriel[m]1234 (~gabriel22@2001:470:69fc:105::ea37)
[08:58:12] *** Joins: frnot[m] (~frnotgnur@2001:470:69fc:105::ea36)
[08:58:12] *** Joins: geraman21[m] (~geraman21@2001:470:69fc:105::e79d)
[08:58:12] *** Joins: dmiller[m] (~dmillergn@2001:470:69fc:105::e9f6)
[08:58:12] *** Joins: beroset[m]1 (~berosetgn@2001:470:69fc:105::e742)
[08:58:12] *** Joins: berkays[m] (~berkaysgn@2001:470:69fc:105::e73e)
[08:58:12] *** Joins: baronsaturday[m] (~baronsatu@2001:470:69fc:105::1:3148)
[08:58:12] *** Joins: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4)
[08:58:12] *** Joins: anwesh[m] (~anweshgnu@2001:470:69fc:105::1:34dd)
[08:58:12] *** Joins: kd8oxt[m] (~kd8oxtgnu@2001:470:69fc:105::1:2af1)
[08:58:12] *** Joins: risenrob[m] (~risenrobg@2001:470:69fc:105::1:2dc9)
[08:58:12] *** Joins: broadcrap[m] (~broadcrap@2001:470:69fc:105::e756)
[08:58:12] *** Joins: mbr0wn[m] (~mbr0wngnu@2001:470:69fc:105::e175)
[08:58:12] *** Joins: mait[m] (~maitrforg@2001:470:69fc:105::e170)
[08:58:12] *** Joins: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927)
[08:58:12] *** Joins: Jacob[m]123 (~jacobgilb@2001:470:69fc:105::e156)
[08:58:12] *** Joins: halfy (~halfy@goodboy/halfy)
[08:58:12] *** Joins: funkylab[m] (~funkylabg@2001:470:69fc:105::e148)
[08:58:12] *** Joins: dsorber[m] (~dsorbergn@2001:470:69fc:105::e13a)
[08:58:12] *** Joins: DerekKozel[m] (~dkozelgnu@2001:470:69fc:105::2f14)
[08:58:12] *** Joins: bastibl[m] (~bastiblgn@2001:470:69fc:105::e125)
[08:58:12] *** Joins: anderskaloer[m] (~anderskal@2001:470:69fc:105::2e24)
[08:58:12] *** Joins: Aang23[m] (~aang23alt@2001:470:69fc:105::c8a1)
[08:58:12] *** Joins: douggeiger[m] (~douggeige@2001:470:69fc:105::e137)
[08:58:12] *** Joins: sdh11[m] (~sdh11gnur@2001:470:69fc:105::e1a2)
[08:58:12] *** Joins: Notou[m] (~notougnur@2001:470:69fc:105::e185)
[08:58:12] *** Joins: JacobHoltom[m] (~jholtomgn@2001:470:69fc:105::e159)
[08:58:12] *** Joins: matt_mills[m] (~f0urtyfiv@2001:470:69fc:105::e142)
[08:58:12] *** Joins: clever (~clever@99.192.114.98)
[08:58:12] *** Joins: jholtom (~holly@user/jholtom)
[08:58:12] *** Joins: Peanut (~paul@user/peanut)
[08:58:12] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:58:12] *** Joins: nickoe (~quassel@5b96fc67.rev.stofanet.dk)
[08:58:12] *** Joins: rigid (~rigid@user/rigid)
[08:58:12] *** Joins: chiptuner (~bobby@user/chiptuner)
[08:58:12] *** Joins: roox (~roox@blackhole.pmtu.de)
[08:58:12] *** Joins: [Sec] (~Sec@user/sec/x-9569764)
[08:58:12] *** Joins: nki (~nki@adsl-89-217-141-227.adslplus.ch)
[08:58:12] *** Joins: ljakab_ (~lori@falco.icanhas.net)
[08:58:12] *** Joins: Zero_Chaos (~zerochaos@gentoo/developer/pentoo/zerochaos)
[08:58:12] *** Joins: opcode (~nathan@user/opcode)
[08:58:12] *** Joins: schneider (~schneider@irc2.xtort.eu)
[08:58:12] *** Joins: ebb (ebb@user/ebb)
[08:58:26] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:58:28] *** Malvolio is now known as Guest3259
[08:58:28] *** Quits: Guest3259 (~Malvolio@user/malvolio) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[08:59:01] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Remote host closed the connection)
[08:59:28] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:00:02] *** Quits: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d) (Ping timeout: 240 seconds)
[09:00:05] *** Quits: fredy[m] (~fredymatr@2001:470:69fc:105::2d41) (Ping timeout: 250 seconds)
[09:00:09] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:00:54] <Guest36> the only thing i have managed to do with any resampler is to experiment with resampling
[09:01:09] <Guest36> which works when outputting over audio sink, but hasnt resulted in being able to use rtl_tcp emulation
[09:01:51] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.30)
[09:02:52] *** Joins: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d)
[09:02:55] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[09:03:21] *** Joins: Malvolio (~Malvolio@user/malvolio)
[09:03:30] *** Joins: fredy[m] (~fredymatr@2001:470:69fc:105::2d41)
[09:07:33] *** Quits: blackbit (blackbit@ghost.xx.vu) (*.net *.split)
[09:07:33] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[09:07:33] *** Quits: lab91932[m] (~lab91932g@2001:470:69fc:105::1:3f2e) (*.net *.split)
[09:07:33] *** Quits: barjac (~quassel@94.197.170.57.threembb.co.uk) (*.net *.split)
[09:07:33] *** Quits: junagarhi[m] (~junagarhi@2001:470:69fc:105::eaca) (*.net *.split)
[09:07:33] *** Quits: jason[m]123 (~jasongnur@2001:470:69fc:105::1:2602) (*.net *.split)
[09:07:33] *** Quits: ldplayer[m] (~ldplayerg@2001:470:69fc:105::1:2a74) (*.net *.split)
[09:07:33] *** Quits: kraxel[m] (~kraxelgnu@2001:470:69fc:105::1:2c89) (*.net *.split)
[09:07:33] *** Quits: courtarro[m] (~courtarro@2001:470:69fc:105::1:32df) (*.net *.split)
[09:07:33] *** Quits: eniac[m] (~eniacgnur@2001:470:69fc:105::1:54) (*.net *.split)
[09:07:33] *** Quits: Bewe[m] (~bewegnura@2001:470:69fc:105::e744) (*.net *.split)
[09:07:33] *** Quits: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f) (*.net *.split)
[09:07:33] *** Quits: mwk088[m] (~mwk088gnu@2001:470:69fc:105::f040) (*.net *.split)
[09:07:33] *** Quits: rsundar[m] (~rsundargn@2001:470:69fc:105::ebe8) (*.net *.split)
[09:07:33] *** Quits: baronsaturday[m] (~baronsatu@2001:470:69fc:105::1:3148) (*.net *.split)
[09:07:33] *** Quits: RyanVolz[m] (~ryanvolzm@2001:470:69fc:105::e19c) (*.net *.split)
[09:07:33] *** Quits: eph123[m] (~eph123gnu@2001:470:69fc:105::e13e) (*.net *.split)
[09:07:33] *** Quits: Donflamewires[m] (~flamewire@2001:470:69fc:105::e144) (*.net *.split)
[09:07:33] *** Quits: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927) (*.net *.split)
[09:07:33] *** Quits: dsorber[m] (~dsorbergn@2001:470:69fc:105::e13a) (*.net *.split)
[09:07:33] *** Quits: flynn378[m] (~flynn378g@2001:470:69fc:105::e145) (*.net *.split)
[09:07:33] *** Quits: thoth[m] (~thoth1010@2001:470:69fc:105::20c2) (*.net *.split)
[09:07:33] *** Quits: troycurtisjr[m] (~troycurti@2001:470:69fc:105::f156) (*.net *.split)
[09:07:33] *** Quits: jholtom (~holly@user/jholtom) (*.net *.split)
[09:07:33] *** Quits: dreamerchrisMO[m (~dreamerch@2001:470:69fc:105::795c) (*.net *.split)
[09:07:33] *** Quits: nki (~nki@adsl-89-217-141-227.adslplus.ch) (*.net *.split)
[09:07:50] *** Joins: barjac (~quassel@94.197.170.57.threembb.co.uk)
[09:08:01] *** Joins: jholtom (~holly@user/jholtom)
[09:08:13] *** Joins: nki (~nki@adsl-89-217-141-227.adslplus.ch)
[09:08:50] *** Joins: Yamakaja (~yamakaja@vps.pub.yamakaja.me)
[09:08:51] *** Quits: Yamakaja (~yamakaja@vps.pub.yamakaja.me) (Changing host)
[09:08:51] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[09:10:02] *** Joins: thoth[m] (~thoth1010@2001:470:69fc:105::20c2)
[09:10:51] *** Joins: dsorber[m] (~dsorbergn@2001:470:69fc:105::e13a)
[09:10:54] *** Joins: mwk088[m] (~mwk088gnu@2001:470:69fc:105::f040)
[09:10:55] *** Joins: ldplayer[m] (~ldplayerg@2001:470:69fc:105::1:2a74)
[09:10:55] *** Joins: baronsaturday[m] (~baronsatu@2001:470:69fc:105::1:3148)
[09:11:32] *** Joins: Donflamewires[m] (~flamewire@2001:470:69fc:105::e144)
[09:12:09] *** Joins: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f)
[09:12:21] *** Joins: blackbit (blackbit@ghost.xx.vu)
[09:12:42] *** Joins: Bewe[m] (~bewegnura@2001:470:69fc:105::e744)
[09:13:21] *** Joins: junagarhi[m] (~junagarhi@2001:470:69fc:105::eaca)
[09:13:39] *** Joins: kraxel[m] (~kraxelgnu@2001:470:69fc:105::1:2c89)
[09:14:01] *** Joins: eniac[m] (~eniacgnur@2001:470:69fc:105::1:54)
[09:14:08] *** Joins: lab91932[m] (~lab91932g@2001:470:69fc:105::1:3f2e)
[09:14:14] *** Joins: eph123[m] (~eph123gnu@2001:470:69fc:105::e13e)
[09:14:25] *** Joins: flynn378[m] (~flynn378g@2001:470:69fc:105::e145)
[09:14:26] *** Joins: rsundar[m] (~rsundargn@2001:470:69fc:105::ebe8)
[09:14:31] *** Joins: courtarro[m] (~courtarro@2001:470:69fc:105::1:32df)
[09:15:06] *** Joins: troycurtisjr[m] (~troycurti@2001:470:69fc:105::f156)
[09:15:47] *** Joins: RyanVolz[m] (~ryanvolzm@2001:470:69fc:105::e19c)
[09:15:55] *** Joins: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927)
[09:15:57] *** Joins: jason[m]123 (~jasongnur@2001:470:69fc:105::1:2602)
[09:16:42] *** Joins: dreamerchrisMO[m (~dreamerch@2001:470:69fc:105::795c)
[09:19:05] * muaddib[m] posted a file: (25KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/e4c1c22f97d7aa019a670de082fc1bd2d8655718/fc32_to_uint8.grc >
[09:19:39] <muaddib[m]> Guest36: try this. it will give you a decent starting point
[09:20:16] <muaddib[m]>  * Guest36: try this. it will give you a decent starting point
[09:20:16] <muaddib[m]> you'll of course need to swap out the UHD source for you radio's block
[09:20:28] *** Quits: Crofton (sid401373@id-401373.lymington.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: sarbog[m] (~sarboggnu@2001:470:69fc:105::1:3bf2) (*.net *.split)
[09:20:28] *** Quits: n00p (~n0p@2a01:4f8:c2c:b82d::1) (*.net *.split)
[09:20:28] *** Quits: luisherasme[m] (~luisheras@2001:470:69fc:105::1:3008) (*.net *.split)
[09:20:28] *** Quits: hu6o[m] (~hu6ognura@2001:470:69fc:105::1:2c46) (*.net *.split)
[09:20:28] *** Quits: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc) (*.net *.split)
[09:20:28] *** Quits: beroset[m]1 (~berosetgn@2001:470:69fc:105::e742) (*.net *.split)
[09:20:28] *** Quits: dmiller[m] (~dmillergn@2001:470:69fc:105::e9f6) (*.net *.split)
[09:20:28] *** Quits: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4) (*.net *.split)
[09:20:28] *** Quits: broadcrap[m] (~broadcrap@2001:470:69fc:105::e756) (*.net *.split)
[09:20:28] *** Quits: VasilVelichkov[m (~vvvelichk@2001:470:69fc:105::e1af) (*.net *.split)
[09:20:28] *** Quits: vossiam[m] (~vossiamgn@2001:470:69fc:105::e1ae) (*.net *.split)
[09:20:28] *** Quits: thewyliestcoyote (~thewylies@2001:470:69fc:105::e1ab) (*.net *.split)
[09:20:28] *** Quits: mbr0wn[m] (~mbr0wngnu@2001:470:69fc:105::e175) (*.net *.split)
[09:20:28] *** Quits: bastibl[m] (~bastiblgn@2001:470:69fc:105::e125) (*.net *.split)
[09:20:28] *** Quits: sdh11[m] (~sdh11gnur@2001:470:69fc:105::e1a2) (*.net *.split)
[09:20:28] *** Quits: JacobHoltom[m] (~jholtomgn@2001:470:69fc:105::e159) (*.net *.split)
[09:20:28] *** Quits: anderskaloer[m] (~anderskal@2001:470:69fc:105::2e24) (*.net *.split)
[09:20:28] *** Quits: shayanmajumder[m (~shayanmaj@2001:470:69fc:105::c3a5) (*.net *.split)
[09:20:28] *** Quits: Reventlov[m] (~rgrunblam@2001:470:69fc:105::b26) (*.net *.split)
[09:20:29] *** Quits: ljakab_ (~lori@falco.icanhas.net) (*.net *.split)
[09:20:29] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[09:20:29] *** Quits: schneider (~schneider@irc2.xtort.eu) (*.net *.split)
[09:20:29] *** Quits: Zero_Chaos (~zerochaos@gentoo/developer/pentoo/zerochaos) (*.net *.split)
[09:20:29] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[09:20:38] *** Joins: n0p (~n0p@static.139.237.203.116.clients.your-server.de)
[09:20:43] *** Joins: ljakab (~lori@falco.icanhas.net)
[09:20:58] *** Joins: schneider (~schneider@irc2.xtort.eu)
[09:21:02] *** Joins: opcode (~nathan@2607:5300:60:f18::)
[09:21:06] *** Joins: Crofton (sid401373@id-401373.lymington.irccloud.com)
[09:21:18] *** Quits: opcode (~nathan@2607:5300:60:f18::) (Signing in (opcode))
[09:21:18] *** Joins: opcode (~nathan@user/opcode)
[09:21:22] * muaddib[m] uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/11e66671935f19a4abb5eb3121432028b98d7f28/image.png >
[09:21:33] <Guest36> thank you my good person i am trying it now
[09:21:36] *** Joins: ebb (ebb@user/ebb)
[09:21:44] *** Joins: luisherasme[m] (~luisheras@2001:470:69fc:105::1:3008)
[09:21:58] *** Joins: hu6o[m] (~hu6ognura@2001:470:69fc:105::1:2c46)
[09:21:59] *** Joins: thewyliestcoyote (~thewylies@2001:470:69fc:105::e1ab)
[09:22:00] *** Joins: bastibl[m] (~bastiblgn@2001:470:69fc:105::e125)
[09:22:07] *** Joins: vossiam[m] (~vossiamgn@2001:470:69fc:105::e1ae)
[09:22:17] *** Joins: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4)
[09:22:32] *** Joins: beroset[m]1 (~berosetgn@2001:470:69fc:105::e742)
[09:22:35] *** Joins: broadcrap[m] (~broadcrap@2001:470:69fc:105::e756)
[09:22:35] *** Joins: dmiller[m] (~dmillergn@2001:470:69fc:105::e9f6)
[09:22:35] *** Joins: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc)
[09:23:08] <muaddib[m]> sure thing. the TCP sink is still going to have the same issue i mentioned before
[09:23:45] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:25:19] <muaddib[m]> it's not going to be a full rtl_tcp emulator cause it's missing the flag rtl_tcp sends to the downstream software. This might still work if your software just connects to an arbitrary tcp stream. the decimation you're doing can naturally be before the complex to float block.
[09:25:51] *** Joins: Zero_Chaos (~zerochaos@gentoo/developer/pentoo/zerochaos)
[09:26:47] <muaddib[m]>  * sure thing. the TCP sink is still going to have the same issue i mentioned before
[09:26:47] <muaddib[m]> it's not going to be a full rtl_tcp emulator cause it's missing the flag rtl_tcp sends to the downstream software. This might still work if your software just connects to an arbitrary tcp stream. the decimation you're doing can naturally be before the complex to float block.
[09:27:17] *** Joins: ebb (ebb@user/ebb)
[09:29:02] *** Joins: shayanmajumder[m (~shayanmaj@2001:470:69fc:105::c3a5)
[09:29:06] *** Joins: JacobHoltom[m] (~jholtomgn@2001:470:69fc:105::e159)
[09:29:09] *** Joins: sarbog[m] (~sarboggnu@2001:470:69fc:105::1:3bf2)
[09:29:11] *** Joins: anderskaloer[m] (~anderskal@2001:470:69fc:105::2e24)
[09:29:12] *** Joins: mbr0wn[m] (~mbr0wngnu@2001:470:69fc:105::e175)
[09:29:36] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:29:38] *** Joins: VasilVelichkov[m (~vvvelichk@2001:470:69fc:105::e1af)
[09:29:39] *** Joins: sdh11[m] (~sdh11gnur@2001:470:69fc:105::e1a2)
[09:29:39] *** Joins: Reventlov[m] (~rgrunblam@2001:470:69fc:105::b26)
[09:30:08] *** Joins: ebb (ebb@user/ebb)
[09:30:32] <Guest36> they both connect and then simply display a single line in the center of the watefall
[09:30:54] <Guest36> I guess i'll have to try recompiling sdr# or sdr++
[09:32:29] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:33:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:33:05] *** Joins: ebb (ebb@user/ebb)
[09:35:21] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:35:45] <Guest36> this also teaches me a little bit about how to resample both channels, so this workflow is reusable
[09:35:53] *** Joins: ebb (ebb@user/ebb)
[09:38:17] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:38:51] *** Joins: ebb (ebb@user/ebb)
[09:40:53] <muaddib[m]> Guest36: since you said you learn visually I thought i'd try to help. I don't think i really put together how simple it was until I saw it in GNURadio
[09:41:23] <Guest36> this teaches me how to resample. i now understand resampling on fixed basis of 32, 16, and 8 bit.
[09:41:25] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:41:52] <muaddib[m]> Guest36: this teaches you how to reSCALE
[09:42:00] *** Joins: ebb (ebb@user/ebb)
[09:42:03] <muaddib[m]> the number of samples is still the same
[09:42:33] <Guest36> resampling is also a term often used in the audio community to refer to the bit depth.
[09:42:50] <Guest36> rescale is the correct term, of course
[09:42:56] <Guest36> because we are talking about resolution
[09:44:21] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:44:29] <Guest36> but resolution, in term, is often a measure of the overall dimensions of an object. in terms of a picture, the pixel dimensions would be the resolution. in radio frequency terms it would be comparable to bandwidth. Meanwhile bandwidth in a picture would refer to the dynamic range.
[09:44:51] *** Joins: ebb (ebb@user/ebb)
[09:45:19] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[09:45:54] <muaddib[m]> I worked in the audio recording and broadcast field for about 15 years so i'm familiar. I always referred to the bitdepth as the resolution which implied the number of digital amplitude steps between max and min. When I resampled something it usually meant I was converting from 48k to 44.1k
[09:46:01] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[09:46:30] <muaddib[m]> any experience you have with audio will be helpful, that helped me a LOT in RF and eventually DSP
[09:47:00] <Guest36> I have some experience with audio processing, phasing, VST stuff, it kind of translates
[09:47:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:47:58] *** Joins: ebb (ebb@user/ebb)
[09:48:59] <muaddib[m]> agreed, 'kind of' is still a better starting place than nothing at all. just be willing to relearn a few things. Baseband representation of RF signals is what gets a lot of folks right off the bat. The GNURadio Tutorials talk about that as does pysdr as I'm sure you've seen.
[09:50:32] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:51:07] *** Joins: ebb (ebb@user/ebb)
[09:53:31] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:54:03] *** Joins: ebb (ebb@user/ebb)
[09:54:40] <Guest36> well the use of the term baseband isn't something im familiar with at all
[09:54:49] <Guest36> i'm used to a "spectrum" and to "carriers"
[09:55:41] <Guest36> the I/Q distinction is relatable to this also, although its more complex, it still involves carrier modulation of signals, and that information is used with both time and frequency domain FFT methods to extrapolate desired signals into a usable form
[09:56:24] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:56:58] *** Joins: ebb (ebb@user/ebb)
[09:57:08] <Guest36> i guess you could say that baseband is the carrier of carrier signals
[09:59:34] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:00:07] *** Joins: ebb (ebb@user/ebb)
[10:01:11] <muaddib[m]> It's explained better than I can in the first paragraph here, I also tend to like pictures:
[10:01:11] <muaddib[m]> https://pysdr.org/content/sampling.html#baseband-and-bandpass-signals
[10:02:52] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:03:25] *** Joins: ebb (ebb@user/ebb)
[10:05:50] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:06:13] <Guest36> right. you have your 10mhz or 27mhz or whatever have you clock and mixer, you take your input signal, and you mix it to the desired frequency modulation.
[10:06:32] *** Joins: ebb (ebb@user/ebb)
[10:06:33] <Guest36> the baseband is your reference, whether you are using superhetrodyne, hetrodyne, or direct ? i guess thats a thing
[10:06:53] <Guest36> i mean DDC for receive sure is but i bet those AM radio stations are using something more like a waveguide and a clock
[10:08:58] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:09:31] *** Joins: ebb (ebb@user/ebb)
[10:12:16] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:13:01] *** Joins: ebb (ebb@user/ebb)
[10:15:20] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[10:15:26] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:15:59] *** Joins: ebb (ebb@user/ebb)
[10:16:26] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[10:18:43] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:19:02] <muaddib[m]> For low frequency I'm sure that's an option. With an SDR it's just downshifting then digitizing whatever you've asked for because It's often impossible to do direct sampling of RF signals due to hardware limitations. If your target frequency is lower than the maximum sampling rate of the device, you can sometimes do direct RF sampling if your receiver allows for that. There are people on here far more educated on RF ADC/DAC who can correct
[10:19:02] <muaddib[m]> my explanation. A soundcard does direct sampling because sampling at 2x the maximum audible frequency for humans is not particularly hardware intensive. 
[10:19:18] *** Joins: ebb (ebb@user/ebb)
[10:21:53] <muaddib[m]> That's where 44.1kHz came from as the Compact Disc sampling rate, at least that's the coolest explananation i've heard for it :D
[10:22:09] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:22:11] <Guest36> right. the rx-888 can do DDC up to 120mhz
[10:22:22] <Guest36> various adcs with various bit depth exist, of course
[10:22:42] *** Joins: ebb (ebb@user/ebb)
[10:22:57] <Guest36> and then you just use FFT to over/under/decimate to the correct amount
[10:23:49] <Guest36> but then, see, you do FFT all over again after decimation to get the audio out, and then you encode it, and by this point you've thrown away maybe 5% of the useful information in the original sample
[10:24:17] <Guest36> not enough for people to miss, but i might be able to use it
[10:25:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:25:52] *** Joins: ebb (ebb@user/ebb)
[10:27:44] <muaddib[m]> sounds like your plan is taking shape. 
[10:28:15] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:28:47] *** Joins: ebb (ebb@user/ebb)
[10:28:54] <Guest36> I havnt gotten anywhere except understanding the tools at my disposal a little bit better and successfully setting up the neural modeling environment
[10:29:48] *** Quits: yesno (~yesno@109.98.151.179) (Remote host closed the connection)
[10:30:05] <Guest36> hopefully by the time i'm done with stage one i'll have a python program that runs using command line instructions to control it and can be scripted to dynamically create a variety of samples with correct labeling
[10:30:57] <Guest36> from there i'll have to learn a lot more about PyRF and develop the mechanism to feed them to the beast
[10:31:08] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:31:42] *** Joins: ebb (ebb@user/ebb)
[10:32:07] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:32:22] * muaddib[m] uploaded an image: (69KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/98af633113d982ed9b8e87ae3363a2366b32f8d6/image.png >
[10:32:23] <muaddib[m]> Understanding and selecting tools is the first step always. 
[10:32:24] <muaddib[m]> I hope the flowgraph was helpful for you. 
[10:32:24] <muaddib[m]> FYI, if you look at the server client exchange between rtl_tcp and an rtl_tcp compatible application, you'll see that it sends the device ID in a 12 bit message. this may be why the flowgraph doesn't work with client applications looking for an rtl_tcp server. I never got around to modifying the TCP server block in GNURadio because it was simpler to modify the client application to just ignore the id and  connect. 
[10:33:57] <Guest36> I've gotten nowhere. I cant even make useful file samples
[10:34:21] <Guest36> it would be better if I just forward the request to soapySDR and then gnuradio can have a shim for it using soapy sink
[10:34:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:34:55] *** Joins: ebb (ebb@user/ebb)
[10:34:57] <Guest36> that way i can save everything as complex values in a raw file named appropriately and import them using python directly by just calling gnuradio libraries
[10:35:52] <Guest36> in turn, the neural network will be expected to output 32 bit values also, which is a larger overhead, but eliminates any confusion, i'll just abandon trying to convert it into other formats
[10:37:30] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:38:04] *** Joins: ebb (ebb@user/ebb)
[10:39:54] <muaddib[m]> If you're just doing the data conversion for basic visualization/audio demod in SDR#,  GNURadio has all the stuff you need. The flowgraph I gave you uses several of the GUI widgets and it has adjustments for the radio. If you're also trying to generate a signal, record it, change the signal, record it, etc. That's also very do-able in GNURadio. I do that kind of thing all the time. Learning the plumbing of GNURadio isn't too bad, just takes
[10:39:54] <muaddib[m]> a bit to get familiar. 
[10:40:18] <Guest36> well, the funny thing is sources, they allow the use of different complex formats like int and char
[10:40:27] <Guest36> but the output is Uint and Uchar and you cant do anything with them
[10:40:44] <Guest36> so you literally can't build a signal chain that operates in the 16 bit domain
[10:40:58] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:41:12] <muaddib[m]> To which sources are you referring? 
[10:41:14] <Guest36> the most you can do is export at 16 bits and perhaps some processing with floats that have been shaved down to 16 bits
[10:41:32] *** Joins: ebb (ebb@user/ebb)
[10:41:33] <Guest36> Rf sources
[10:41:48] <Guest36> they can output complex float32, int16, and complex byte
[10:42:05] <Guest36> called in code sc16 and sc8
[10:42:49] <muaddib[m]> Why is the 16 bit processing part important? What's the issue with complex32 processing?
[10:43:52] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:43:58] <Guest36> realtime processing on consumer hardware for the trained model entails constraints that I attempted to estimate before believing the project worth any investment, so that i could decide if it is doable
[10:44:26] *** Joins: ebb (ebb@user/ebb)
[10:44:32] <Guest36> we are now at the point where convolutional autoencoders can process a 600x400 pixel video to denoise it at a rate of 8 seconds per frame
[10:45:29] <Guest36> with further optimization and the correct hardware, that time drops to under a second, and the related thing here is - if we can make it realtime, it's useful
[10:45:41] <Guest36> if it cant be realtime then it still might have use to some people, but realtime will be very useful
[10:46:34] <Guest36> the amount of data that the network is confronted with determines how much computation it has to do
[10:46:47] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:47:21] *** Joins: ebb (ebb@user/ebb)
[10:48:01] <muaddib[m]> I see and your constraints involved 16bit data processing?
[10:48:27] <Guest36> it's more an attempt to measure the data flow rate and estimate data = time. the smaller the "image" the faster it can run
[10:48:50] <Guest36> "small" in terms of the overall size in raw bytes or bits
[10:49:15] <Guest36> if it is a comparable workload, with a comparable network, then it will deliver comparable results, not necessarily in terms of effectiveness, but time that it expends
[10:49:49] <Guest36> ultimately it needs to be able to process a 50ms chunk in less than 50ms
[10:50:16] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:50:25] <Guest36> but the sample size needs to be big enough to give it effective access to information, otherwise it wont do as good of a job
[10:50:49] *** Joins: ebb (ebb@user/ebb)
[10:51:23] <Guest36> and the bandwidth needs to be big enough to cover most signals and noise spectra outside that bandwidth, or it wont be able to as intelligently determine what is noise
[10:52:31] <Guest36> even if I never make use of it, if the network functions with 32khz or 44.1khz of bandwidth, then others can do some more complex science to simulate station overlap for example on AM
[10:53:10] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:53:11] <Guest36> this can be intelligently removed, its currently removed by a co-canceler in some programs, and it works well enough but there's probably better ways to do it
[10:53:41] <muaddib[m]> i can follow that for the most part, my ML knowledge is very minimal but I see what your saying. 
[10:53:41] <muaddib[m]> I guess i'm still unclear as to why 16 bit processing of the RF is essential. 
[10:53:42] *** Joins: ebb (ebb@user/ebb)
[10:54:09] <Guest36> a neural network can do amazing things- for example let's say you're receiving whisper, you're participating in the great race with WJ-X or whatever have you contesting your ability to receive/send on pskexplorer
[10:55:02] <Guest36> and there's this neighbor who always transmits really strongly. well, in that bin, if there are others underneath him, you're going to have a harder time of picking them up, but a ML could learn far better than any FFT to dynamically strip it out as spurious leaving behind residue that could translate to other signals that were just underneath it
[10:55:34] <Guest36> even a 1hz difference can, in the hands of a linrad user, be used to identify a hidden signal carrier, and a neural network could do this intuitively
[10:55:47] <Guest36> uh, 16 bit is simply due to constraints attempting to achieve realtime
[10:56:25] <Guest36> the "larger" the input the bigger the network "frame" ie its like your eyes and how big they are. you need more cones not only to make out more detail but more variation in intensity, although rods do more of the work
[10:56:29] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:57:04] *** Joins: ebb (ebb@user/ebb)
[10:57:35] <Guest36> i assume all of this, my ML learning is also kind of minimal just as of yet
[10:58:11] <Guest36> like i read the whitepapers but i don't really understand the science, i understand what a resnet is and what an an activation function is and what a convolutional layer is and what a skip connection is
[10:58:17] <Guest36> and i KIND of understand how they work
[10:58:40] <Guest36>  but this is certainly the year for machine learning, everyone and everything has hopped on board
[10:59:41] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:59:47] *** Joins: adrianlam0ho[m] (~adrianlam@2001:470:69fc:105::1:4781)
[11:00:14] *** Joins: ebb (ebb@user/ebb)
[11:02:46] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:03:23] *** Joins: ebb (ebb@user/ebb)
[11:04:46] <muaddib[m]> I see. I'd suggest you entertain doing whatever DSP is needed as complex32, see how bad the processor load really is.  
[11:05:42] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:06:03] <muaddib[m]> At least as a starting point. 
[11:06:11] *** Joins: ebb (ebb@user/ebb)
[11:06:20] <muaddib[m]> anyways. i'm hopping off. best of luck. 
[11:08:44] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:09:22] *** Joins: ebb (ebb@user/ebb)
[11:11:53] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:12:31] *** Joins: ebb (ebb@user/ebb)
[11:15:06] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:15:39] *** Joins: ebb (ebb@user/ebb)
[11:16:08] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[11:16:48] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[11:18:14] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:18:47] *** Joins: ebb (ebb@user/ebb)
[11:21:26] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:21:59] *** Joins: ebb (ebb@user/ebb)
[11:24:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:24:59] *** Joins: ebb (ebb@user/ebb)
[11:27:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:27:53] *** Joins: ebb (ebb@user/ebb)
[11:50:23] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:1044:446b:4199:c370)
[12:04:46] *** Joins: yesno (~yesno@109.98.151.179)
[12:20:02] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[12:20:25] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[12:22:42] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Quit: ZNC 1.7.4 - https://znc.in)
[12:23:28] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[12:25:30] *** Joins: wirehead (~wirehead@121.223.155.188)
[12:28:43] *** Quits: wirehead (~wirehead@121.223.155.188) (Quit: Lost terminal)
[12:30:09] *** Quits: danidubok777[m] (~danidubok@2001:470:69fc:105::1:1fad) (Quit: You have been kicked for being idle)
[12:30:24] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[12:41:09] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 256 seconds)
[12:51:15] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[12:57:04] *** Joins: jemius (~jemius@p200300d96706ad0038536bb935e02fd8.dip0.t-ipconnect.de)
[13:03:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:09:12] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[13:28:52] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[13:29:53] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[14:10:56] <Guest36> 1 byte per 8bit adc per hz of bandwidth per second of time.. theoretical limit of information transfer suggests that three am radio stations(we have, what 70? a hundred?) of them in the USA could be repurposed for a 56k baud dialup modem RF channel. That's a lotta bandwidth!
[14:13:02] <Yamakaja[m]> If you want to know the actual capacity limit check out the Shannon–Hartley theorem
[14:13:42] <Guest36> in binary of just on/off it's 1 bit per hz per second.
[14:14:08] <Guest36> the rest is all sensitivity. guess that's why they say sensitive people are more understanding.
[14:15:12] <Yamakaja[m]> Depends on a lot of things. The theoretical limit is 1 bit per Hz, but you probably want to use a sinc as your pulse shape, nor do you want to work without FEC
[14:15:21] <Guest36> In other news, there is an incredible amount of information in even a 2500hz wide sample of 16 bit depth lasting 300ms. it is enough to capture any syllable in full resolution.
[14:15:26] <Yamakaja[m]> For BPSK*
[14:15:44] <Yamakaja[m]> s/Depends on a lot of things. The theoretical limit is 1 bit per Hz, but you probably want to use a sinc as your pulse shape, nor do you want to work without FEC/Depends on a lot of things. The _theoretical limit_ is 1 bit per Hz, but you probably don't want to use a sinc as your pulse shape, nor do you want to work without FEC/
[14:16:06] <Guest36> The noise present and the physical limitations of human machines, which must use pulses and clocks, prevent us from utilizing it. But the information is necessarily there.
[14:16:32] <Guest36> That is to say, the pixels are there. the spaces are there, devoid of the information. the canvas is there, with sparse scattering of paint.
[14:17:10] <Guest36> given a sufficiently sensitive SDR, the information is all there, obfuscated by a cloud of dust. how well we can penetrate that cloud of dust is defined by the size of the motes and the sensitivity of the receiver.
[14:18:03] <Guest36> In other words, if I want to attempt to convert 8bit data to 16 bit data, it will simply not be possible unless the signal is already strong enough to be within the middle of the sensitivity range of the receiver. And the comparable neural network would be something that attempts to make photos HDR, it will always be simulated dynamic range.
[14:19:24] <Guest36> and if i want to drastically improve the quality of a voice recording, it wont matter either, since 16 bits is all about fidelity, and voice data on shortwave is more than fully measured within the range of 8 bits for human hearing purposes
[14:20:11] <Guest36> but, if I capture an 16 bit recording, with the effective bandwidth of the signals present, its readily plausible that the noise can be reduced quite a bit more than even the best current algorithms
[14:22:57] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:23:21] <Yamakaja[m]> You know why it is usually in the realm of PhDs and beyond to develop techniques which improve the algorithms that we currently have available to us? Because they spent years getting to know the *current* state of the art. I really don't understand how you can throw around assertions like "its readily plausible that the noise can be reduced quite a bit more than even the best current algorithms" without basic knowledge of signal theory
[14:23:59] <Guest36> I believe that's a sunk cost fallacy
[14:24:19] <Guest36> For core engineering principles, their understanding is profoundly deep and important to their work.
[14:25:26] <Guest36> But, for a lot of the computer engineering stuff, especially algorithms research, it's not the amount of education that matters. I recently read about this person who came up with a solution to a classical mathematics problem that was unsolved using computer science methods that hadn't been considered.
[14:25:57] <Guest36> "quite a bit more" is purely a term of human consideration, for human ears.
[14:26:37] <Guest36> An audible signal, with noise typical to the spectrum given the conditions, receives interference to a given energy level, which can be removed better than current algorithms.
[14:27:36] <Guest36> in terms of the measure of energy where we are talking a decade or more, no. But 1, maybe 2dbm of noise reduction at -140dbm? yes.
[14:31:13] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[14:32:14] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[14:55:38] <funkylab[m]> <Guest36> "But, for a lot of the computer..." <- anecdotal evidence is the best evidence.
[14:55:38] <funkylab[m]> Really, not to rain on your parade, since one of the missions of GNU Radio as I see it is that you don't need a PhD in Signal Processing to use it, but you have to see the academic system with all it flaws as what it's designed to do, and not *that* horrible at: to teach people a compatible set of tools and language to allow them to consume the understanding that others before them already had, to lead to progress. 
[14:55:38] <funkylab[m]> DEFINITELY not like you need to have studied to do state-of-the-art stuff; in fact, a lot of people in any field are often coming from wildly different background, but the whole existence of a framework for knowledge exchange is what makes for the vast majority of progress. Genius and accidental discover, people just being very good at picking up complex material that they've not met before? Definitely happens all the time, but on its own,
[14:55:38] <funkylab[m]> wouldn't have remotely brought us this far. We just like to think of beacons and solitary giants, but it's honestly offices and hard-working people talking to each other most of the time.
[14:58:58] <funkylab[m]> <Guest36> "in terms of the measure of..." <- this really shows how far removed you are from an understanding of what communications engineering has been doing for the last 3 decades, AND it neglects that there's really a rich corpus of machine learning-based comms engineering. The big progresses there are made by people with *excellent* domain knowledge, because ML does not absolve you of the need to actually state the thing your Neural
[14:58:58] <funkylab[m]> Network learning optimizes. "Throw a DNN at it!" is very much "early 2010"s ML gold rush ;)
[15:02:09] <funkylab[m]> especially, we've got very nice voice codecs based on ML / NNs. These minimize the amount of bits you need to transport voice. Less bits = more energy for redundancy; together with interleaving and channel coding, that equates to high robustness. 
[15:02:20] <funkylab[m]> now, you've got a really interesting problem!
[15:03:27] <funkylab[m]> quite possibly, the RF noise you've got isn't overly well-covered by common noise models, which typically consist of completely uncorrelated noise (AWGN), narrowband interferers, and complete erasure impulse noise
[15:03:47] <funkylab[m]> so these are things for which transmission systems are already optimized for. 
[15:04:35] <funkylab[m]> if you can work out in which way your noise is different than such a simple model, in a way that can be meaningfully exploited to have more info about the input at the output of the noisy channel, then you'll make something awesome: progress!
[15:06:14] <funkylab[m]> (not to dampen your expectations too much, but that won't be integer dB compared to state of the art, probably – interleaving/whitening does a relatively good job at converting any kind of noise to things that look very AWGN, and for these we have good methods, even if continuous-valed AWGN is information-theoretical a worst case.)
[15:08:20] *** Joins: uros1 (~Thunderbi@2001:8a0:6074:ad00:d528:bc1e:5d9a:61cc)
[15:13:33] <Guest36> DNN is not CNN
[15:17:18] <Guest36> https://arxiv.org/pdf/2107.14803.pdf
[15:17:36] <funkylab[m]> your point being?
[15:17:37] <Guest36> if CNN can do this, it can very well denoise RF.
[15:17:58] <funkylab[m]> that is a false claim
[15:18:31] <Guest36> a certain lord kelvin once said airplanes couldnt exist too
[15:18:39] <funkylab[m]> oh bullshit, honestly
[15:19:18] <funkylab[m]> for every scientist who was wrong there's been a dozen great ideas that don't work
[15:19:36] <Guest36> https://ieeexplore.ieee.org/document/9476003 well considering they already did it last month
[15:20:03] <Guest36> you are not only wrong, you are ignorant to booty
[15:20:12] <Guest36> and therefore, your booty is mine
[15:20:47] <funkylab[m]> what?
[15:21:16] <funkylab[m]> seriously, "Gauss could invent calculus, so I can definitely build a flying pig" has about as much modesty and sense :)
[15:21:23] <Guest36> " In the anti-fading stage, we adopt the anti-fading convolution neural network (AF-CNN) to eliminate the effects of channel fading. In the noise suppression stage, noise suppression CNN (NS-CNN) subnet and unsupervised denoising block are used parallelly to further improve the performance and the generalization ability. In addition, we present the
[15:21:24] <Guest36> optimal topological relations of noise suppression and anti-fading modules by comparison and analysis. Experimental results show that applying the AF-CNN subnet before noise suppression can effectively help recover the weak speech components. Moreover, in terms of objective intelligibility and quality scores, the overall performance of the proposed
[15:21:24] <Guest36> method outperforms the typical methods that only consider noise suppression."
[15:21:28] <Guest36> the flying pig already exists.
[15:21:48] <Guest36> it is already a reality, so really, your discouragement is all about your perception of MY limitations now
[15:22:34] <funkylab[m]> seriously, if this is all this easy, then go ahead and implement it. I venture that if it takes a couple of decades and a group people that are both renowned for their comms engineering and ML background, then it's going to be super easy for you :)
[15:22:52] <Guest36> i didnt say it was going to be easy. but you suggested it was impossible.
[15:23:07] <Guest36> so, slowly, with a lot of pain, the wheel of progress turns, with 10 people in front of it and one behind it
[15:23:13] <funkylab[m]> I'm not trying to discourage you, I'm trying to encourage you to try and understand what background you might want to build up to be successful
[15:23:24] <Guest36> That's saying quit because you dont know how
[15:23:42] <funkylab[m]> no, that's literally the opposite of what my last sentence says. Please read it again.
[15:24:16] <Guest36> build up your background is the same thing as saying go away and try again in 10 years when you're experienced
[15:25:03] <Guest36> besides, you said it couldnt be done
[15:25:14] <Guest36> funkylab[m] 05:47:58
[15:25:14] <Guest36> that is a false claim
[15:25:22] <Guest36> it was a true claim, and you were wrong.
[15:25:36] <Guest36> if you were wrong about that, you might be wrong about everything
[15:26:00] <funkylab[m]> no. It means: "this is hard stuff, you won't get incredibly far without some background, but that's something that's up to you to fix".
[15:26:01] <funkylab[m]> Anyway, you just *want* to keep up a picture in your head where people tell you "it's going to be hard" means people are against you. 
[15:26:01] <funkylab[m]> "That is a false claim" was referring to "if it works on pictures, it works on RF", and that is simply not the case. 
[15:26:01] <funkylab[m]> I'm done arguing with you, I've got actual research to do :) 
[15:26:24] <Guest36> listen, boss, can i just get a soapysdr sink
[15:27:04] <Guest36> i'll do the rest on my own, but that's something you should provide. gnu-radio should interoperate a little better with other SDR programs. It's time to get with the future and provide a virtual SDR device output.
[15:27:25] <funkylab[m]> huh?
[15:27:35] <funkylab[m]> GNU Radio brings the soapysdr sink
[15:27:39] <funkylab[m]> it's literally part of GNU Radio
[15:27:52] <funkylab[m]> Also GNU Radio is a library to build SDR programs upon.
[15:28:20] <funkylab[m]> Not quite sure what you're referring to, but honestly, you've got an exceedingly abrasive style, so: good luck!
[15:30:07] *** Joins: Andr[m] (~aandretu-@2001:470:69fc:105::1:47a2)
[15:34:53] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Ping timeout: 252 seconds)
[15:36:53] <Guest36> only one battery included
[15:38:14] <Guest36> but if you want to use it for radio astronomy, it's got batteries And a handy travel case
[15:40:32] <Guest36> deepwave digital is sponsoring gnu radio,  and quite possibly is ironically using it in the same way that i am going to us it but everyones like "thats super hard" and" these are unusual uses"
[15:42:31] <Guest36> sometimes people have dreams that dont come with the dedication required for a lifetime committment
[15:42:36] <Guest36> and that should be ok
[15:44:20] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[15:44:57] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[15:44:58] <funkylab[m]> did it occur to you that deepwave might be up to the brim full with domain experts?
[15:45:11] <Guest36> so?
[15:45:21] <Guest36> so is microsoft
[15:45:27] <funkylab[m]> it's fully OK to have a dream, and I'd like to encourage you to pursue it, but don't assume that things that people do are easy. 
[15:45:28] <Guest36> so are all these other closed off worlds
[15:45:36] <Guest36> I never assumed anything was easy
[15:45:47] <Guest36> i only said it could be done; when others said it couldnt
[15:46:11] <funkylab[m]> seriously, if there's any research community that publishes their stuff religiously and works in the open, it's ML; you're barking at the wrong people for the wrong reasons, please stop.
[15:46:46] <Guest36> whose barking, I simply have asked for specific things related to how gnu radio works that are within gnu radio's domain
[15:53:44] <funkylab[m]> I honestly don't understand why you're communicating with me the way you do; all I did was come in here, say, "hey, it's maybe not that easy, and having background helps, please don't be so dismissive about knowing what one's talking about", then I tried to point out that you *can* achieve something if you start investigating what you're about; and all the time you've not been very nice to me. Don't really know how I deserve that, but
[15:53:44] <funkylab[m]> honestly, I don't think I *can* help you – you don't need GNU Radio expertise, it seems.
[15:54:03] <Guest36> you're not the only one who said this to me
[15:54:22] <funkylab[m]> :)
[15:54:41] *** Quits: barjac (~quassel@94.197.170.57.threembb.co.uk) (Ping timeout: 252 seconds)
[15:56:39] <Guest36> I have spent at least a week now investigating. I know how a digital synthesis system works, what an IFFT does, how decimation works
[15:59:59] *** Joins: barjac (~quassel@92.40.9.235.threembb.co.uk)
[16:06:42] *** Quits: Guest36 (~Guest36@64.224.81.27) (Quit: Client closed)
[16:15:41] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[16:16:20] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[16:23:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:10:49] *** Quits: jemius (~jemius@p200300d96706ad0038536bb935e02fd8.dip0.t-ipconnect.de) (Quit: Leaving)
[17:39:16] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:44cc:250c:d83c:ecd) (Read error: Connection reset by peer)
[17:39:37] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:59df:891c:fb78:4885) (Read error: Connection reset by peer)
[17:42:40] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[17:48:18] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Read error: Connection reset by peer)
[18:06:18] <patchvonbraun[m]> Guest36: "Gnuradio should inter-operate better with other SDR programs".   You DO realize that GR has been around LONGER than essentially ALL other SDR programs out there?   If other programs cannot "understand" an I/Q stream, formatted in any of several different ways that GR can format them, then, I would claim that's the other software's fault, not GRs.   That the "SDR industry" hasn't established standards for interoperability
[18:06:18] <patchvonbraun[m]> isn't, again, GR's fault.   GR is NOT "an SDR application with a lot of knobs to tweak. It's a specialized software development environment.  So, no surprise, some software-development expertise will be required to be broadly successful with it.  That's shouldn't, at this point, be a shock to anyone.
[18:07:55] <patchvonbraun[m]> I worked in international technical standards for almost 15 years.  Interoperability standards don't "just happen".  They take a lot of work, and a lot of altruistic cooperation among entitites that would in other contexts be "enemies".   Without committment by all these "enemies" interop standards simply don't happen.
[18:09:00] <Jacob[m]123> or they are infinitely configurable (v49) and thus self defeating as a standard interface
[18:09:37] <patchvonbraun[m]> X.509.  Shudder.
[18:19:23] <Jacob[m]123> https://xkcd.com/927/
[18:20:14] <patchvonbraun[m]> Since it's inception ca 2004 or so, GR has allowed literally thousands of people to become successful in the world of SDR and Digital Signal Processing.  Most of the most-successful of those already had a background in at least one of the related disciplines--software development, electronics, radio, signals, signal processing.  If you approach it with a "how hard could this be?" attitude, you'll be less successful.  If its "world
[18:20:14] <patchvonbraun[m]> view" consistently "rubs your cognitive processes the wrong way", then may it isn't for you.
[18:20:33] <patchvonbraun[m]> Jacob: Yup.
[18:20:41] <Hoernchen> oh no it goes on and on...
[18:23:24] <Andr[m]> Hi, the commit message of https://github.com/gnuradio/gnuradio/commit/39b093b482f9f13793f582afc70fd3758aced1bb mentions a GRC-based image builder. Where can I find information about this image builder?
[18:23:56] <patchvonbraun[m]> Hoernchen: https://www.youtube.com/watch?v=6_y_QRprQLY
[18:26:14] <patchvonbraun[m]> André: The author of that commit is on here...   funkylab to the white courtesy telephone...
[18:28:33] <funkylab[m]> haha, no, the honor is fully on mbr0wn's side
[18:36:12] *** Quits: arch3r (~ben@185.66.194.79) (Read error: Connection reset by peer)
[18:38:35] *** Joins: arch3r (~ben@185.66.194.78)
[18:41:12] <patchvonbraun[m]> funkylab: So, even I'm curious.  What is meant by "GRC-based image builder"?
[18:41:23] <funkylab[m]> I don't know!
[18:42:45] <patchvonbraun[m]> I mean, that would be cool.  No Xilinx tools or Vivado.  Click "build" in GRC, and voila, an FPGA image.  But I'm 99.9% certain that's not what was meant...
[18:59:46] <funkylab[m]> so, not quite like that, but primercuervo wrote the tooling for basically that:
[18:59:48] <muaddib[m]> I used the image builder
[18:59:58] <muaddib[m]> It’s actually kind of cool
[19:00:04] <funkylab[m]> you define which RFNoC things are supposed to be in there, and then run the image builder, and it builds an image
[19:00:06] <funkylab[m]> yep
[19:00:22] <funkylab[m]> I just didn't know it had an interface to GRC
[19:00:44] <muaddib[m]> Yea, it was demo’ed briefly at GRCON2019
[19:02:55] <jholtom> huh thats kinda cool that it is available in GRC
[19:03:12] <jholtom> I've written loads of the yml to define it and the HDL but thats super convenient to do it from GRC
[19:03:26] <muaddib[m]> Basically, it does what funkylab already said. You can point image_builder to a GRC file and it will parse the info and build the config. Since the image builder configs are yaml, it probably wasn’t too bad to implement
[19:04:23] <muaddib[m]> If nothing else it’s a good way to make sure you have all the connections you want.
[19:04:33] <patchvonbraun[m]> muaddib: ah. That makes some sense.
[19:05:10] <patchvonbraun[m]> muaddib: indeed it’s easy to miss some housekeeping steps if you do things manually
[19:06:05] <muaddib[m]> For sure. 
[19:06:05] <muaddib[m]> As long as of course your only desire in RFNoC is the single use case of using an X310 with a DDC and an FFT in the FPGA the GRC option is great :)
[19:06:30] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[19:10:03] <muaddib[m]> Its sad that gr-ettus became a stale project because of how much excitement it generated (at least for me).
[19:11:27] <muaddib[m]> I really enjoyed learning it. Hopefully they’ll pick it back up. I’ve heard that it’s on the roadmap.
[19:15:22] <patchvonbraun[m]> I thought this new stuff with 4.0 replaced gr-Ettus.
[19:23:29] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 256 seconds)
[19:24:47] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[19:29:51] *** Joins: Malvolio (~Malvolio@user/malvolio)
[19:46:03] *** Quits: ssbm (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 252 seconds)
[19:46:23] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[20:00:27] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[20:01:13] *** Quits: mitsh_ (~mitsh@63.ip-51-254-200.eu) (Quit: leaving)
[20:02:20] *** Joins: mitsh (~mitsh@63.ip-51-254-200.eu)
[20:37:59] *** Joins: jemius (~imperator@2001:16b8:2dce:b600:3c1e:71ce:d54b:41bd)
[20:47:49] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Ping timeout: 240 seconds)
[20:49:51] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[20:50:54] <patchvonbraun[m]> So can anyone point me at an example of using the "command" port on a UHD source *VIA GRC*??
[20:52:52] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[20:53:57] *** Joins: Oxygene (~Oxygene@lfbn-lil-1-421-45.w81-49.abo.wanadoo.fr)
[21:04:17] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:17:18] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:17:56] <willcode4[m]> There's a uhd_msg_tune.grc.
[21:18:05] <willcode4[m]> example in the source.
[21:40:55] <patchvonbraun[m]> Thanks.  I was missing a whole lot of clue.   Like "pmt.to_pmt" and that you then construct a fairly-boring dictionary.  The gr-uhd documentation is currently written from the C++ perspective, and the mapping between the Python universe and that is, well, not immediately obvious...
[21:45:27] <patchvonbraun[m]> In unrelated news, we got a dumposaurus of snow last night, and despite my best efforts to play "struggling old fogey" while shovelling out my driveway this morning, no ambitious and kind kid came up and offered to do it for me for a quarter....the world has gone to hell, I tell you.
[21:49:35] <drmpeg> My neighbors kids wanted to make some quick money for some reason and asked me if they could mow my lawn. However, they had never mowed a lawn before and I had to teach them how.
[21:50:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:51:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:52:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:52:40] <patchvonbraun[m]> drmpeg: It's a little bit like when I get offered summer intern students to help out at CCERA--with some vague notion that they'll help with software.  Yeah.  Sure.  Undergraduate astrophysics students.  I'll let me muck with the software.  No problem....
[21:52:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:54:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:54:35] <patchvonbraun[m]> s/me/them/
[21:54:49] <drmpeg> They're two twins and I like to give them a hard time by calling them names they've never heard of like Heckle and Jeckle, Pixie and Dixie and Frick and Frack.
[21:55:02] *** Joins: beenao (~beenao@user/beenao)
[21:55:19] <patchvonbraun[m]> Tweedle Dum and Tweedle Dumber :)
[21:55:48] <patchvonbraun[m]> I'm a twin.  I can't remember what people referred to me and my brother as, in the collective sense.
[22:24:53] <muaddib[m]> <drmpeg> "They're two twins and I like..." <- I call a couple of our junior staff at work Frick and Frack
[22:36:21] <muaddib[m]> <patchvonbraun[m]> "I thought this new stuff with 4...." <- No, when they released 4.0 at GRCON2019 they did a rehash of the original RFNoC which omitted the double copy and added some cool features. I haven’t seen any RFNoC ‘blocks’ Integrated into GRC without gr-Ettus (I’m using UHD 4). The main branch of gr-ettus is... (full message at
[22:36:22] <muaddib[m]> https://libera.ems.host/_matrix/media/r0/download/libera.chat/60f19f2da257425e0c969fec20054973a0a50fbd)
[22:42:52] <patchvonbraun[m]> It may be the case that with OSS FPGA "compilers" like SymbiFlow and the Vivado-type thingy that Derek Kozel talked about the other day, that FPGA-based "coprocessing" might become easier with Gnu Radio in general, and not just for UHD hardware.   I dunno.  It's a world I'm not that familiar with.
[22:45:11] <patchvonbraun[m]> LiteX.  That was the environment that Derek was talking about.  
[22:47:44] <DerekKozel[m]> I'm in bed so this is short, but there are lots of RFNoC blocks with GRC in private use. Publicly I think it's just the Therano? Cores, mentioned at GRCon19. 
[22:50:24] <DerekKozel[m]> Patch: LiteX is a system on chip generator that produces Verilog, then uses Yosys and either a proprietary place and route tool like Verilog or FOSS like nextpnr too create a bitstream. 
[22:51:45] <DerekKozel[m]> So I'm using Yosys+Vivado because there isn't FOSS PCIe IP primitives for Xilinx 7 series, but I've generated bitstreams for Xilinx using full FOSS. 
[22:52:05] <DerekKozel[m]> It's limited currently, but getting better at a moderate pace
[22:53:12] <DerekKozel[m]> Miek authored the Amalthea project which has significantly trailblazed for the gr-litex setup that Victor and I have been writing
[22:58:08] <DerekKozel[m]> muaddib: add spp=$(MTU_SIZE/bytes_per_sample) to the device arguments in RFNoC and the commands correctly passthrough blocks in RFNoC 4
[23:00:56] <patchvonbraun[m]> Derek Kozel: The thing that I think has been missing is the ability for non-proprietary tools to produce meaningfully-useful bitstreams for arbitrary FPGA hardware.   I had the impression that parts of Xilinx were very much "walled garden" so generating fully-useful bitstreams for them was not impossible, but truly ugly...
[23:02:41] <DerekKozel[m]> Check out project XRay, 
[23:02:41] <DerekKozel[m]> https://symbiflow.github.io/prjxray-db/
[23:03:40] <DerekKozel[m]> It's mostly a question of dev time to implement things at this point more than a lack of knowledge. The fear of getting sued is also a hinderance
[23:04:24] <patchvonbraun[m]> Depends on whether any required reverse-engineering was "clean" and whether any of it is protected by patent.   But, I'm not a lawyer...
[23:05:50] <DerekKozel[m]> What's legal and what people are hesitant about are also different
[23:06:01] <patchvonbraun[m]> Derek Kozel: Understood
[23:06:45] <patchvonbraun[m]> Hell, I have encountered a person in my life who felt that Open Source in general should be illegal.  As in jack-booted thugs knocking your door down if you use or produce the stuff.  So, yeah....
[23:07:16] *** Joins: irfantariq[m] (~irfantari@2001:470:69fc:105::1:4815)
[23:08:19] <patchvonbraun[m]> I wonder about things like a boardful of cheap(er) FPGAs supporting a flexible and open co-processor architecture for GR, and whether you'd run into the same problems as with GPUs--the latency of getting data into/out-of them, and how well they fit into the streaming architecture of GR...
[23:12:23] <DerekKozel[m]> LiteX supports a setup like that. https://github.com/enjoy-digital/liteiclink
[23:13:51] <DerekKozel[m]> Streaming and bandwidth aren't problems, I'm at 250 MS/s sc16, but latency I don't have figures for
[23:15:59] <DerekKozel[m]> I want to get a PCIe card to fit a second Artix 7 into my desktop. LitePCIe supports DMA between cards
[23:16:01] <patchvonbraun[m]> Latency and "batch size" are important factors I think when you're trying to plug these things into the middle of a real-time flow.   
[23:16:20] <DerekKozel[m]> For some applications, certainly
[23:19:15] <patchvonbraun[m]> It's why GPUs have been so frustrating, in general, in real-time DSP flows. Unless you run pretty-much the entire thing on the GPU, squeezing advantage out of them is really hard.
[23:21:32] <bpadalino> might be time for someone to try to see if cupy helps with that .. maybe python blocks actually can be used for decent processing and use gpu's to do work
[23:27:16] <DerekKozel[m]> The new GR custom buffers for CUDA help specifically with that
[23:27:43] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[23:44:45] *** Quits: Oxygene (~Oxygene@lfbn-lil-1-421-45.w81-49.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[23:51:20] <patchvonbraun[m]> Running a coherent de-dispersion pipeline in real-time for FRBs would be cool.
[23:52:41] *** irfantariq[m] is now known as irfan[m]
[23:53:52] <bpadalino> patchvonbraun[m]: if you can model it in python using numpy then i think you just s/numpy/cupy/g and can run a profile on some data .. if you have a cuda based gpu i guess is the other caveat
