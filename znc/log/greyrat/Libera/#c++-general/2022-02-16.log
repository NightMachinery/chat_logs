[00:00:32] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[00:06:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:10:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[00:19:02] <LordKalma> what's going on /r/cpp?
[00:19:28] <LordKalma> ah P2300
[00:19:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:21:04] <LordKalma> what a nice thread
[00:21:13] <LordKalma> so the discussion is, as always, everything is shit :)
[00:22:23] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[00:24:25] <PJBoy> when you write a thread title like "X is DEAD !!!!!"
[00:24:36] <PJBoy> you're gonna attract some negative personalities
[00:25:06] <LordKalma> it's clear from the comments that Vinnie loves ASIO (of course he does)
[00:25:09] <LordKalma> oh, I mean
[00:25:11] <LordKalma> "network TS"
[00:25:12] <PJBoy> and then the post content is "we're still not ready, certainly not for C++23"
[00:25:21] <PJBoy> so it's not dead at all
[00:25:38] <LordKalma> the title says "dead for 23"
[00:25:58] <PJBoy> that's like saying I'm dead until tomorrow instead of going to sleep
[00:26:00] <LordKalma> "Asio’s executors were created because the standards committee asked for them. Prior to the standardisation process there was an io_context."
[00:26:02] <LordKalma> wut?
[00:26:38] <LordKalma> regardles afaik net.TS doesn't have all of asio, namely it' mostly network, so fuck that
[00:26:49] <kalven> fuck what?
[00:27:02] <LordKalma> standardizing only half of things :)
[00:27:22] <PJBoy> I'm surprised he even wants his thing in stdlib
[00:27:36] <LordKalma> it's bragging rights I guess?
[00:28:11] <rpav> it's definitely arguable whether net ought to be either way
[00:28:33] <LordKalma> honestly ASIO is just fine
[00:28:45] <LordKalma> it's just one of those things "dependencies are so hard people just want shit in the stdlib"
[00:29:02] <PJBoy> post from 3 months ago "The Christopher Kohlhoff vision of Net.TS is effectively dead - Eric, Kirk, Lewis, and nVIDIA are now in control of what networking will look like in C++. Fortunately you can still use Asio and the design and performance which it brings, as an external library."
[00:29:27] <PJBoy> so it sounds like he does indeed not really care I think
[00:29:29] <kalven> vinnie is just very emotionally invested in asio
[00:29:37] <LordKalma> clearly
[00:29:39] <PJBoy> I assume he just wants to complain about the committee like everyone else
[00:30:02] <xkoncek> i don't think c++ would get worse if they just straight-up started adopting interfaces from python
[00:30:09] <LordKalma> but that's the difference between ASIO and net.ts that triggered that post from 3 months ago?
[00:30:15] <xkoncek> like asyncio
[00:30:28] <kalven> xkoncek: who are "they" ?
[00:30:28] *** Joins: angelacrust (~angelacru@182.68.208.211)
[00:30:34] <xkoncek> comitee
[00:30:34] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:30:46] <kalven> and which c++ lib should they adopt?
[00:30:49] <xkoncek> i mean standard c++
[00:31:30] <PJBoy> so which proposal did Vinne like?
[00:31:39] <PJBoy> P2300?
[00:31:49] <kalven> vinnie hates p2300
[00:31:58] <LordKalma> PJBoy, dude, Vinnie is a major ASIO author
[00:32:10] <PJBoy> oh so he's happy P2300 is dead?
[00:32:17] <LordKalma> did you even read the thread?
[00:32:19] <PJBoy> (until it gets undead)
[00:32:31] <PJBoy> yeah I skimmed it a bit
[00:32:39] <PJBoy> but I don't know anything about networking in C++
[00:33:01] <kalven> he's unhappy that something popped up that made people reconsider adopting the networking ts
[00:33:02] <LordKalma> you just need to know Vinnie is big in ASIO, and supporter of net.TS
[00:33:06] <PJBoy> like I dunno what a sender or receiver is
[00:33:10] <PJBoy> or what net.ts is
[00:33:18] <LordKalma> networking TS
[00:33:21] <kalven> I think he would have liked to just see it get adopted without much discussion
[00:33:39] <PJBoy> the post makes it look like he's gutted that P2300 was postponed
[00:33:44] *** Quits: paul424 (~tom@ip-37-248-159-53.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:33:50] <LordKalma> he loves that it is
[00:33:52] <angelacrust> https://bpa.st/Y7HQ --> error: No such file or directory. Bash shell returns 1.
[00:33:53] <kalven> but (for starters) people were like "there's a concept of executors here that is worth thinking more about"
[00:34:01] <LordKalma> because it's a competing architecture so to speak
[00:34:02] <angelacrust> What have I done wrong?
[00:34:23] <PJBoy> hrm, well that renders all my previous comments invalid
[00:34:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:35:18] <PJBoy> there was consensus against the net.ts/asio model from the committee a small while ago
[00:35:35] <PJBoy> and strong consensus for the sender/receiver stuff
[00:35:36] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Ping timeout: 252 seconds)
[00:35:42] <LordKalma> ASIO is very opinionated C++
[00:35:48] <LordKalma> the API is very much its own thing
[00:35:58] <LordKalma> with lots of shared_from_this idioms and strands and whatever
[00:36:07] <LordKalma> I bet that is a turn off for the standard
[00:36:20] <LordKalma> because it's a very coherent library
[00:36:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[00:36:31] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:36:45] <PJBoy> that's a bit of a turnoff for me too
[00:37:03] <PJBoy> shared_from_this strikes me as super hacky
[00:37:18] <LordKalma> but well, watch Vinnie's talk "get rich quick with ASIO" on cppcon
[00:37:21] <PJBoy> but idk what the sender/receiver stuff is
[00:37:22] <LordKalma> and you'll understand :)
[00:37:22] <kalven> oh great.. niall douglas has a "soon to land networking proposal for c++26"
[00:37:24] <PJBoy> it could be good
[00:37:32] <LordKalma> kalven, ffs *facepalm*
[00:37:43] <LordKalma> PJBoy, well, sometimes objects ought to manage their own lifetime
[00:37:45] <PJBoy> also I figured there would be some cool coroutine version of networking
[00:37:56] <LordKalma> that's another thing
[00:37:58] <PJBoy> like other languages do
[00:38:02] <xkoncek> too bad there won't be c++69
[00:38:11] <LordKalma> ASIO's API is already well established and it's own asyncronous
[00:38:13] <LordKalma> !grab xkoncek
[00:38:13] <nolyc> LordKalma: The operation succeeded.
[00:38:18] <kalven> asio has coroutine support
[00:38:20] <angelacrust> At least let me know if I asked the question in the wrong channel.
[00:38:20] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:38:44] <PJBoy> alright well having coroutine support is a pretty good standing
[00:38:44] <LordKalma> angelacrust, sorry, we get lost ranting about stuff
[00:38:51] <kalven> https://www.boost.org/doc/libs/1_78_0/doc/html/boost_asio/overview/core/cpp20_coroutines.html
[00:38:52] <angelacrust> No, that's fine
[00:39:12] <LordKalma> angelacrust, in IRC you ought to expect answers to be asynchronous :D
[00:39:24] <angelacrust> :)
[00:39:31] <PJBoy> you don't have a carriage return at the end of your line do you?
[00:39:42] <xkoncek> you may even get answers half-a-day later
[00:39:45] <angelacrust> I do
[00:39:54] <PJBoy> well that's a big problem
[00:39:59] <angelacrust> I'm using that in a Vim keybinding
[00:40:01] <LordKalma> `< % && ./%< < inp<CR>` whaat the hell is this sorcery?
[00:40:20] <PJBoy> oh it's a vim thing
[00:40:24] <PJBoy> I thought it was a makefile thing
[00:40:45] <LordKalma> well, I'm going to pull a StackOverflow-class of answer and say "use an actual build system"
[00:40:51] <PJBoy> still, everything in linux hates carriage returns
[00:40:51] <angelacrust> hehe
[00:40:56] <PJBoy> there's no way that should be there
[00:41:18] <angelacrust> What would an appropriate build system then?
[00:41:26] <LordKalma> depends on who you ask
[00:41:38] <angelacrust> ...?
[00:41:43] <LordKalma> we have stronger opinions on that than on networking TS
[00:41:48] <LordKalma> so imagine the firestorm :D
[00:41:50] <PJBoy> that bare % sign can't be right can it?
[00:41:59] <angelacrust> It is right...
[00:42:06] <PJBoy> surely it should be %@ or %^ or %& or something
[00:42:09] <angelacrust> It takes in the filename as param
[00:42:21] <xkoncek> scons is the true build system
[00:42:27] <LordKalma> angelacrust, cmake if you want to be lawful good, make if you want to be neutral, anything else if you're lawful evil.
[00:42:27] <PJBoy> dang percent on its own is a real thing?
[00:42:32] <xkoncek> it is like make but in python
[00:42:56] <angelacrust> LordKalma I love this answer
[00:43:30] <xkoncek> well honestly cmake is probably better if you target both windows and linux
[00:44:04] <angelacrust> I'm new to C/C++ and still learning. What tips would you give to me?
[00:44:06] <LordKalma> cmake is probably better always
[00:44:15] <LordKalma> angelacrust, run away
[00:44:39] <angelacrust> Running away from the problem isn't the best thing to do
[00:45:03] <LordKalma> anyway, learncpp.com to learn actual c++, and then you need to learn the c++ *ecosystem*
[00:45:09] <LordKalma> namely how to build anything that's not a single file
[00:45:14] *** Joins: troller (~p@80.240.216.69)
[00:45:15] <LordKalma> and for that you use cmake
[00:45:19] <LordKalma> ignore any other advice :p
[00:46:10] <angelacrust> I have ordered this book--C Programming: A Modern Approach by King
[00:46:13] <PJBoy> switch to windows and use visual studio
[00:46:17] <angelacrust> LOL
[00:46:36] <PJBoy> you laugh, but it has the most complete C++20 support
[00:46:49] <angelacrust> I know, I know. I love VSCode
[00:46:56] <angelacrust> (y)
[00:47:06] <PJBoy> and a vim hotkeys extension
[00:47:09] *** Quits: proller (~p@2a02:6b8:b081:16::1:24) (Ping timeout: 252 seconds)
[00:47:21] <angelacrust> I laughed because I don't deal with large codebases yet...
[00:47:50] <PJBoy> yeah avoid those
[00:47:55] <PJBoy> :)
[00:48:07] <angelacrust> ?
[00:48:14] <PJBoy> large codebases
[00:48:21] <PJBoy> they're the worst things ever
[00:48:21] <angelacrust> Why
[00:48:41] <pulse> inflexibility
[00:48:43] <PJBoy> even worse than Vinnie Falco's opinions
[00:48:51] <angelacrust> I see
[00:49:26] <PJBoy> they tend to be hard to navigate, risky to edit, hard to update
[00:49:40] <PJBoy> slow to build/test, hard to build
[00:49:52] <angelacrust> I hope I will reach that stage where I can say the same
[00:49:57] <angelacrust> yeah
[00:49:57] <PJBoy> bad practices because the code becomes incomprehensible
[00:50:09] <angelacrust> how much C should you know before working with C++?
[00:50:12] <PJBoy> full of technical debt
[00:50:14] <PJBoy> ideally none
[00:50:24] <PJBoy> any amount of C you know will be a detriment to C++
[00:50:24] <angelacrust> Right
[00:50:36] <kalven> what you want to do is work on a small library with no users. then you never have to make any tough choices
[00:50:44] <PJBoy> although knowing C helps you master the more advanced C++ stuff
[00:51:00] <PJBoy> also you'll have to interface with C libraries in C++ world
[00:51:01] <angelacrust> I see
[00:51:08] <PJBoy> so I guess some C is better than none
[00:51:51] <angelacrust> I have g++ on my PC, is it any good?
[00:52:06] <angelacrust> I was planning to install cmake, but I didn't know how to do that
[00:52:07] <PJBoy> gcc, clang and msvc are all industry standard
[00:52:11] <angelacrust> nice
[00:52:17] <PJBoy> gcc being the most conventional choice for linux
[00:52:29] <LordKalma> It's better to learn c++ without c but it's nice to know it a bit after
[00:52:30] <PJBoy> also has the best C++20 support on linux
[00:52:45] <angelacrust> LordKalma Why is that so?
[00:53:01] <PJBoy> yeah I agree with that statement
[00:53:12] <pulse> C is delightfully dangerous though
[00:53:19] <pulse> it's fun
[00:53:19] <PJBoy> I think the C and C++ idioms go against each other
[00:53:47] <PJBoy> so if you have the C++ idioms under your belt, learning C isn't so detrimental anymore
[00:54:05] <angelacrust> I do have a C++ book by Schildt. I can probably start learning C++ atm
[00:54:20] <angelacrust> Linus Torvalds doesn't like C++ right?
[00:54:28] <PJBoy> not one bit
[00:54:39] <PJBoy> your book must be newer than 2011 at minimum
[00:54:46] <PJBoy> ideally newer than 2017
[00:54:55] <angelacrust> let me check
[00:55:21] <angelacrust> 35th edition 15th reprint
[00:55:26] <angelacrust> 2015*
[00:55:31] <PJBoy> holy shit 35
[00:55:41] <angelacrust> ?
[00:55:50] <PJBoy> that just sounds like a big number to me
[00:55:57] <PJBoy> imagine making the 35th edition of your book
[00:56:09] <angelacrust> I have a math book that is currently at 83rd edition
[00:56:15] <PJBoy> jesus christ
[00:56:48] <angelacrust> yeah....
[00:57:04] <pulse> if only books could update automatically
[00:57:24] <PJBoy> Schildt's not on the book list, hm
[00:57:52] <angelacrust> What do you mean?
[00:58:16] <PJBoy> !books
[00:58:18] <nolyc> A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[00:58:21] <PJBoy> we have a book list
[00:58:30] <angelacrust> whoa! thank you
[00:59:05] <angelacrust> C++ Primer then?
[01:00:42] <PJBoy> I struggle to agree with getting a book that doesn't cover C++17
[01:01:42] <angelacrust> yeah, so can you recommend me a book that goes into great depth and covers all the dimensions of C++?
[01:01:48] <PJBoy> however, that does seem like a strong choice from that list
[01:02:27] <PJBoy> I've never read any of the C++ books, so I'm bad at book recommendatiosn
[01:02:41] <angelacrust> Oh okay
[01:02:53] <PJBoy> I advocate for learncpp.com generally
[01:04:23] <PJBoy> then I make sure to follow up that advocation with a caution to not take absolutist statements like "avoid unsigned integers" seriously
[01:04:31] <PJBoy> v_v
[01:06:37] <LordKalma> yes, it has some random crap in the meanwhile
[01:06:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:09:22] <PJBoy> one day I'll make my own tutorial
[01:09:30] <LordKalma> with blackjack and hookers?
[01:09:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[01:09:42] <PJBoy> more than you could possibly imagine
[01:09:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[01:10:15] <PJBoy> with cmake and conan
[01:10:19] <PJBoy> and sanitisers
[01:10:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:11:00] <PJBoy> and poor SEO
[01:11:03] <angelacrust> i see
[01:11:06] <PJBoy> because all good websites have poor SEO
[01:11:20] <angelacrust> does it cover all info about C++?
[01:11:22] <angelacrust> learncpp.com
[01:11:31] <LordKalma> all you'll need in the next two months
[01:11:34] <PJBoy> it covers everything you need to learn
[01:11:39] <PJBoy> and then there's cppreference for everything else
[01:12:18] <PJBoy> also stack overflow, but you'll need your salt grains aplenty
[01:12:45] <angelacrust> only 2 months?
[01:12:51] <angelacrust> that's awesome
[01:13:21] <LordKalma> stackoverflow is a forbidden place to learn cmake
[01:13:31] <PJBoy> 2 months sounds suspicious
[01:13:57] <PJBoy> 2 months *not* including time spent writing and debugging your own code perhaps
[01:14:15] <PJBoy> which you absolutely should be doing
[01:14:15] <LordKalma> you're too literal
[01:14:25] <PJBoy> well see, idk
[01:14:34] <PJBoy> it's hard to gauge how long it would take
[01:14:48] <PJBoy> two months sounds about right to read every chapter
[01:15:49] <PJBoy> back when I was reading that site, I'd read an article a day
[01:15:59] <PJBoy> but I was juggling school and other hobbies at the time
[01:16:09] *** Joins: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:16:14] *** Quits: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Write error: Connection reset by peer)
[01:17:51] *** Quits: angelacrust (~angelacru@182.68.208.211) (Ping timeout: 256 seconds)
[01:17:57] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:18:56] *** Quits: magla (~gelignite@d536370e.access.ecotel.net) (Quit: Stay safe!)
[01:19:23] <PJBoy> also you can learn a fair bit of C++ just hanging around here
[01:19:44] <PJBoy> and #c++-basic
[01:19:53] *** Joins: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:22:42] *** Joins: markong (~kvirc@213.146.188.203)
[01:23:38] <angelacrust> Is Modern C++ a good book for beginners?
[01:24:27] <LordKalma> there are probably 50 books with that title
[01:24:35] <angelacrust> !h books
[01:24:36] <nolyc> angelacrust: Error: "h" is not a valid command.
[01:24:39] <LordKalma> !books
[01:24:41] <nolyc> A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[01:24:47] <angelacrust> yes, it's mentioned in there
[01:26:52] <rpav> Adjective C++
[01:27:37] <rpav> why not just read learncpp.com then write some C++
[01:27:49] <LordKalma> yeah, it's a good way to start
[01:28:08] <rpav> i mean there was a time when like, TC++SL was a highly useful book because there wasn't cppreference.com, but that time is long past
[01:28:32] <LordKalma> you mean TC++PL?
[01:28:39] <rpav> PL?
[01:28:48] <LordKalma> the c++ programming language?
[01:28:49] <rpav> the c++ standard library, josuttis
[01:28:52] <LordKalma> by bjarne
[01:28:53] <LordKalma> ah ok
[01:29:07] <rpav> that one probably a good second if you didn't have other language books
[01:29:08] <angelacrust> Modern C++ Design
[01:29:22] <rpav> i mean, probably a good _first_ if you didn't have other c++ books
[01:29:29] <angelacrust> Yep, I'm planning to do learncpp.com and read some reference books
[01:29:38] <angelacrust> I do have one by Schildt
[01:30:02] <rpav> i do'nt think i'd spend $50-60 on a C++ book today
[01:30:08] <rpav> or any$
[01:30:23] <angelacrust> What should I do then?
[01:30:36] <rpav> read learncpp.com and then write a lot of C++ ;)
[01:30:49] <LordKalma> yeah, having an actual problem is great to lean :)
[01:30:54] <angelacrust> Alright
[01:30:56] <rpav> really you should have some small but realistic project to tackle
[01:30:57] <angelacrust> That's what I will do
[01:31:00] <rpav> yeah
[01:31:04] <rpav> angelacrust: do you know C?
[01:31:10] <rpav> grok pointers, mostly
[01:31:16] <rpav> i think that's the big hurdle
[01:31:18] <angelacrust> yep, spent past 3 months learing C
[01:31:20] <angelacrust> *learning
[01:31:23] <rpav> 🤔
[01:31:27] <LordKalma> yeah, not unlearn all of it
[01:31:30] <LordKalma> exept pointer semantics
[01:31:35] <LordKalma> for real, C is evil shit
[01:31:41] <angelacrust> why?
[01:31:45] <LordKalma> in C++ we have actual idioms :D
[01:31:52] <rpav> yeah .. well as long as you basically have an idea how pointers work, that's probably the "hard" part of C++, besides all the other ones
[01:31:54] <LordKalma> !C
[01:31:55] <nolyc> C is an old byte processing language without templates, exceptions, namespaces, constructors/destructors (and therefore RAII), virtual function polymorphism, references, operator/function overloading, reusable standard generic containers, or explicitly named casts.
[01:32:28] <angelacrust> I do know pointers very well but I still get scared whenever there's something with multiple *'s in front of it
[01:32:35] <rpav> the important bits of C++ are the automation, and still some access to the bits and bytes
[01:32:41] <kalven> look.. C has like 2 or 3 ways to initialize something. Those are rookie numbers. C++ has more than 58 ways to initialize an object.
[01:32:50] <angelacrust> damn...
[01:32:52] <rpav> that's fine, pointers-to-pointers are rarely used
[01:32:54] <LordKalma> mandatory http://josuttis.com/cpp/c++initialization.pdf
[01:33:01] <angelacrust> 58...how am I going to remember all of  those?
[01:33:07] <LordKalma> angelacrust, don't be scared
[01:33:19] <LordKalma> we're just like those communities that are self aware and deprecating hah
[01:33:34] <LordKalma> reddit meme "our language is shit. yes" between two chads
[01:33:36] <xkoncek> i don't think i use virtual in my codebase
[01:33:42] <rpav> yeah don't worry about it; no one actually knows all of this stuff anyway, we just type code and occasionally it compiles, so we ship it ;)
[01:33:50] <LordKalma> !compiles
[01:33:51] <nolyc> It compiles?! SHIP IT!!
[01:33:57] <angelacrust> It's actually good if you're introduced to the real industrial standards as a beginner
[01:34:08] <LordKalma> angelacrust, the number of random shitpost we have on the channel bot should be a clue
[01:34:13] <angelacrust> hmm
[01:34:23] <LordKalma> hahahah industrial standards? I'm not even a programmer
[01:34:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:35:04] <rpav> i'm not sure what counts as "industrial standard," 240v? ;)
[01:35:22] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[01:35:23] <angelacrust> I'm currently learning 3 languages... 1. C as our introductory course in college, 2. python (a college course), 3. C++ (because I have been always been fascinated by it)
[01:35:29] <rpav> man i am so not braining this stuff today
[01:35:36] <LordKalma> bah, college C is crap
[01:35:44] <angelacrust> yes it is crap
[01:35:49] <rpav> all college stuff is crap, but it introduces you to the stuff that's there
[01:35:52] <angelacrust> I looked at git's codebase and I lose all hope
[01:36:36] <xkoncek> java is honestly quite useful
[01:36:44] <xkoncek> python as well
[01:36:46] <rpav> depends on what you need
[01:36:53] <LordKalma> python was my first language in college
[01:36:57] <rpav> really you shouldn't hesitate to learn any of the things; they all suck in different ways
[01:37:02] <LordKalma> and it's my ${DAYTIME_JOB} workhorse
[01:37:06] <angelacrust> hm
[01:37:16] <rpav> python has a lot of use, but (and?) it's generally terrible
[01:37:24] <angelacrust> C++ is super fast tho
[01:37:36] <rpav> it's around so much you should definitely be able to at least hack some out if you need to
[01:37:39] <rpav> eh
[01:37:42] <xkoncek> java is extremely oop yet with old C-syntax, but the build tooling and the standarad library are much better
[01:37:44] <rpav> i mean it can be, but it can also not be
[01:38:02] <angelacrust> most competitive programmers use C++
[01:38:03] <rpav> java is very classroom oop, but don't think that's the only oop
[01:38:23] <xkoncek> nowadays java is very much "fast-enough" unless you are doing numerical computing
[01:38:36] <rpav> fast enough is fast enough
[01:38:49] <kenanmarasli> well they have their own rules to be careful about, that's for sure. I don't use Java but in C# structs are stored at stack and classes at heap
[01:39:18] <angelacrust> hmm
[01:39:32] <xkoncek> to truly make c++ fast, you would have to roll your own memory management and stuff, java does some clever heuristics for you
[01:39:32] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[01:39:55] <rpav> C++ is nice for a lot of things not (just) because of its potential speed, but because it's easy to make and clean up temporaries on the stack and directly/easily make structs with specific memory-layouts
[01:39:58] <angelacrust> that's a nice privilege to have ngl
[01:40:12] <rpav> like you _can_ in python or other things, it's just usually not as nice
[01:40:23] <xkoncek> and also note that openjdk's hotspot is written in c++
[01:40:48] <rpav> but that's mostly useful if you want ot like, set up a GL buffer object and fill out memory bits you're going to be shipping off to the GPU or something
[01:41:28] <angelacrust> but all great software have been built in c++
[01:41:33] <rpav> nah
[01:41:37] <rpav> plenty was written in C too
[01:41:38] * rpav runs
[01:41:50] <angelacrust> yes I mean C/C++
[01:42:16] <xkoncek> like c++ is the real deal, but other languages make programming faster
[01:42:24] <rpav> oh right this is just C++, no "but <this great software no one uses and you've never heard of> was written it (rust|haskell|lisp|...)
[01:42:26] <xkoncek> and you only have one life
[01:42:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:40] *** ChanServ sets mode: +v npaperbot
[01:42:51] <rpav> learn all the things
[01:42:53] <angelacrust> true, vim is written in lisp
[01:42:55] <angelacrust> and I love it
[01:43:04] <rpav> i've hacked out things in raw postscript before that got used for years and years
[01:43:15] <rpav> vim was C; emacs is lisp
[01:43:25] <angelacrust> is it possible to build a website with C++?
[01:43:29] <angelacrust> oh
[01:43:33] <rpav> "yes but"
[01:43:53] <LordKalma> it's possible to build a website backend, a "server"
[01:44:03] <rpav> these days you can have a pretty hard separation between web backend data stuff where you never touch much string processing or html generation, so C++ isn't really "hard" as a backend
[01:44:11] <angelacrust> hm
[01:44:12] <rpav> pretty sure facebook and google both do a lot of C++
[01:44:15] <TinoDidriksen> C++ can take the place of PHP and any other server-side processor.
[01:44:15] <LordKalma> bah, django is just faster
[01:44:22] <LordKalma> (to develop on)
[01:44:44] <angelacrust> just write in assembly if you're really concerned about speed
[01:45:02] <rpav> dunno, i like node for web stuff because it's easy enough to share code backend/frontend, but if you need some high perf stuff, C++
[01:45:20] <angelacrust> I see
[01:45:26] <rpav> nah, compilers can probably generate better asm these days
[01:45:37] <LordKalma> angelacrust, there's a saying around the web that says "how much faster is this in C++? 2 months slower"
[01:45:39] <kenanmarasli> not necessarily, you may need to do many tweaks to pipeline assembly efficiently, especially after adding some code in-between
[01:45:49] <angelacrust> Lol
[01:45:58] <LordKalma> and yes, your compiler will 100% make better assembly than you can
[01:46:19] <rpav> plus if you tweak some asm for some specific cpu, the next cpu is going to likely need different tweaking, but your compiler will probably already do better automatically
[01:46:33] <kenanmarasli> I like this saying LordKalma, might use it later :'D
[01:46:36] *** Quits: MatSharrow (~matthew@60.102.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[01:46:48] <angelacrust> I don't understand this saying tho
[01:46:53] <angelacrust> can someone please explain
[01:47:02] <LordKalma> C++ development is slow generally
[01:47:23] <angelacrust> just increase your typing speed
[01:47:29] <LordKalma> you can achieve 90% of the performance with java or C# with 50% of time :)
[01:47:38] <LordKalma> and companies with actual stakeholders have to take that into consideration
[01:47:44] <angelacrust> Is Java faster than C?
[01:47:52] <LordKalma> to write, yes
[01:48:05] <LordKalma> like, for example
[01:48:09] <rpav> eh
[01:48:13] <LordKalma> I have couple python scripts I use all the time at work
[01:48:19] <LordKalma> they are pretty slow at processing soem data
[01:48:30] <angelacrust> python is the simplest girl in the town
[01:48:34] <LordKalma> BUT if I were to write them in c++ I wouldn't have anything yet
[01:48:44] <LordKalma> so python was 6 months faster than c++ :P
[01:48:53] <LordKalma> waiting couple minutes every time is worth it
[01:49:17] <rpav> java "speed" of dev might depend on API .. there are some good C apis
[01:49:48] <rpav> ("not-") java's android APIs are ok but the original sun stuff was terrible
[01:49:53] <angelacrust> those who conduct interviews would probably not accept a submission in Python...
[01:50:02] <rpav> depends
[01:50:20] <kenanmarasli> hr would accept html
[01:50:24] <LordKalma> yes, java isn't a particularly good example because java loves them LoggerFactory.getFactory().getLogger().getLogFactory().getLogInputter()
[01:50:26] <rpav> if it's a python position, they would probably be fine; if it's entry-level C++ and you're expected to train on the job, it's probably fine too
[01:50:36] <angelacrust> hmm
[01:50:44] <rpav> just don't be a one-trick python pony
[01:51:19] <rpav> but if you've done C and python already, it's a good start .. but check out all the things oto
[01:51:32] <angelacrust> what if you know C++ and the interviewer asks you a question in Java?
[01:51:42] <angelacrust> other things? like?
[01:51:42] <LordKalma> then you're in the wrong interview
[01:51:46] <angelacrust> hmm
[01:52:15] <kenanmarasli> yeah I don't think asking syntax makes sense
[01:52:18] <rpav> it doesn't hurt to have some java proficiency
[01:52:25] <LordKalma> I prefer C# myself :p
[01:52:31] <rpav> or C#
[01:52:36] <angelacrust> how easy it is for a C programmer to learn Java?
[01:52:47] <angelacrust> or vice-verse
[01:52:47] <rpav> depends on how rigidly they think in C
[01:52:49] <angelacrust> *versa
[01:52:54] <rpav> ...or how rigidly they think in java ;)
[01:52:59] <angelacrust> I see
[01:53:07] <LordKalma> since java is purely OOP and C is purely imperative...
[01:53:11] <LordKalma> it's a mindset change
[01:53:14] <rpav> java's not purely oop
[01:53:21] <LordKalma> it's not?!
[01:53:21] <rpav> annoyingly
[01:53:25] <rpav> nah it has base types
[01:53:33] <rpav> int / float / etc are not objects
[01:53:33] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:d5ab:7fde:910:2e6b) (Ping timeout: 256 seconds)
[01:53:37] <angelacrust> hm
[01:53:43] <LordKalma> C# > Java confirmed
[01:53:45] <kenanmarasli> which also inherit from something like object, doesn't it?
[01:53:49] <rpav> yeah
[01:54:17] <rpav> LordKalma: C# base types are objects?
[01:54:20] *** Quits: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Quit: Client closed)
[01:54:31] <LordKalma> they have methods at least
[01:54:35] <rpav> it's nice that in C++ if you want you can _also_ make "base" types that aren't any less efficient
[01:54:35] <LordKalma> but I'd have to confirm
[01:54:49] <rpav> ah well as long as it fakes it to a useful degree
[01:55:00] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[01:55:18] <LordKalma> in Python everything inherits from `Object` except `Object` itself, which inherits from `type`
[01:55:37] <LordKalma> `type` (not to be confused with the function type()) is the only object using lower case in python
[01:55:43] <kenanmarasli> rpav: yeah it converts to the base `Object` via boxing
[01:55:57] <LordKalma> and then `type` inherits from `Object` :D (yesm, it's a mindfuck)
[01:56:02] <kenanmarasli> meaning, when you want it to act like Object, it does
[01:56:19] <LordKalma> ah yes, boxing
[01:56:20] <rpav> bootstrapping oop stuff is weird
[01:56:25] <LordKalma> C#'s fancy name for void* :D
[01:56:29] <kenanmarasli> :D
[01:57:03] <LordKalma> well, type-safe void*, but you know what I meant
[01:57:27] <kenanmarasli> hmm, I see that it is `Integer` to "box" int
[01:57:34] <kenanmarasli> in java
[02:00:20] <LordKalma> at least C# doesn't have loggers with random code execution with remote server querying
[02:03:15] *** Joins: badone (~badone@209.132.189.152)
[02:04:52] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[02:05:02] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:05:37] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[02:07:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:09:24] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[02:10:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:13:02] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[02:13:56] <PJBoy> C# though
[02:14:18] <PJBoy> I'm pretty sure that language is harder to learn than C++
[02:14:29] <LordKalma> the stdlibrary is
[02:14:49] *** Joins: Donno (~donno@58.84.206.182)
[02:17:43] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[02:20:27] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:20:51] *** Joins: Donno (~donno@58.84.206.182)
[02:23:23] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:eca0:5756:a32a:9258) (Quit: Konversation terminated!)
[02:25:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:27:52] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[02:28:03] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:31:50] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Client Quit)
[02:34:02] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[02:35:03] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:36:11] *** Joins: malloy (~jimery@116.30.220.175)
[02:36:20] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[02:48:58] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[02:49:48] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd60:a941:ddd9:4bbf) (Ping timeout: 252 seconds)
[02:51:28] *** Quits: arch-angel (~quassel@user/arch-angel) (*.net *.split)
[02:51:28] *** Quits: foul_owl (~kerry@207.244.125.36) (*.net *.split)
[02:51:28] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[02:51:28] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[02:51:28] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[02:51:28] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[02:51:28] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[02:51:28] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[02:51:28] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[02:51:28] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[02:51:28] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[02:51:28] *** Quits: rg (~r-g@51.15.187.53) (*.net *.split)
[02:51:28] *** Quits: johnny (~johnny@user/johnny) (*.net *.split)
[02:51:28] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[02:51:28] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[02:51:28] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[02:51:28] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (*.net *.split)
[02:51:28] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[02:51:28] *** Quits: Shell (~shell@user/shell) (*.net *.split)
[02:51:28] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[02:51:28] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[02:51:28] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[02:51:28] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[02:51:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3480:cfe2:f4a2:e96)
[02:52:02] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[02:53:46] *** Joins: arch-angel (~quassel@user/arch-angel)
[02:53:46] *** Joins: foul_owl (~kerry@207.244.125.36)
[02:53:46] *** Joins: plastico (~plastico@neomutt/plastico)
[02:53:46] *** Joins: miklcct (~quassel@vps.miklcct.com)
[02:53:46] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[02:53:46] *** Joins: bjs (sid190364@user/bjs)
[02:53:46] *** Joins: jessicara (~shirogits@user/jessicara)
[02:53:46] *** Joins: greenbagels (~gb@user/greenbagels)
[02:53:46] *** Joins: montpol (montpol@fine.mouses.xyz)
[02:53:46] *** Joins: taiyu (~taiyu@user/taiyu)
[02:53:46] *** Joins: jancoow (~jancoow@user/jancoow)
[02:53:46] *** Joins: rg (~r-g@51.15.187.53)
[02:53:46] *** Joins: johnny (~johnny@user/johnny)
[02:53:46] *** Joins: talisein (~talisein@user/talisein)
[02:53:46] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[02:53:46] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[02:53:46] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[02:53:46] *** Joins: Trollmann (~Trollmann@user/trollmann)
[02:53:46] *** Joins: Shell (~shell@user/shell)
[02:53:46] *** Joins: zagura (~zagura@user/zagura)
[02:53:46] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[02:53:46] *** Joins: Dragoon (~Dragoon@user/dragoon)
[02:53:46] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[02:53:47] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[02:54:05] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[02:55:44] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[02:55:55] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:57:23] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[02:59:21] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[03:01:54] *** Quits: jsbach (~jsbach@2a01:c23:5c78:5300:87e1:6293:e798:e67c) (Ping timeout: 252 seconds)
[03:05:12] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[03:05:49] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:05:56] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[03:06:20] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[03:07:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:08:00] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[03:12:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[03:15:55] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:19:29] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:d5ab:7fde:910:2e6b)
[03:19:52] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:28:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[03:29:51] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[03:30:16] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[03:33:48] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[03:40:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[03:52:09] *** Joins: ferdna (~ferdna@user/ferdna)
[04:08:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:09:13] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:11:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:14:10] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:23:52] *** Quits: irrenhaus3 (~xenon@ip-046-005-003-239.um12.pools.vodafone-ip.de) (Quit: Lost terminal)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:29:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3480:cfe2:f4a2:e96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:33:30] *** Quits: DSpider (~DSpider@82.79.237.2) (Quit: Leaving)
[04:35:08] <great_taste> << void(0)
[04:35:08] <geordi> error: no match for 'operator<<' in 'cout << (void)0' (operand types are 'ostream' {aka 'ostream'} and 'void')
[04:35:19] <great_taste> what's the meaning of `void(0)`?
[04:36:18] <PJBoy> not much
[04:36:56] <PJBoy> 0 is evaluated and then the result cast to void
[04:37:29] <PJBoy> only thing that comes to mind as useful for that is avoiding operator, overloads
[04:38:02] <PJBoy> `a, b` might call some operator,(T, U)
[04:38:15] <PJBoy> but `void(a), b` has the usual comma semantics
[04:38:23] <great_taste> { bool b = true; b ? foo() : void(0); } void foo() { std::cout << "bbb"; }
[04:38:24] <geordi> bbb
[04:40:04] <great_taste> I do that in fold expressions
[04:40:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:40:23] <PJBoy> yeah so that void(0) is just there to make a void result so the ternary compiles
[04:43:35] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[04:45:36] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[04:59:59] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:d5ab:7fde:910:2e6b) (Ping timeout: 256 seconds)
[05:03:27] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 252 seconds)
[05:04:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[05:06:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:06:38] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[05:07:57] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[05:08:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:12:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:12:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[05:17:08] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6)
[05:17:08] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6) (Changing host)
[05:17:08] *** Joins: skapate (~Skapata@user/skapata)
[05:18:51] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[05:30:41] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:34:25] *** Joins: RazielZ (~Raziel@user/raziel)
[05:37:06] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[05:37:40] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 272 seconds)
[05:37:47] *** Joins: arch-angel (~quassel@user/arch-angel)
[05:40:59] <Alipha> PJBoy: that's clever @ avoiding overloaded operator,
[05:41:38] <Alipha> Though if you have to worry about overloaded comma operator, you're in the wrong code base :-/
[05:42:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:43] *** ChanServ sets mode: +v npaperbot
[05:44:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:49:55] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:51:24] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:51:55] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:52:53] *** Joins: p-i-_ (~Ohmu@183.89.27.225)
[05:56:40] *** Quits: p-i- (~Ohmu@183.89.27.225) (Ping timeout: 272 seconds)
[05:59:59] *** Quits: darkoccultist (~darkone@user/darkoccultist) (Read error: Connection reset by peer)
[06:09:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:13:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[06:16:37] <johnny> is that just because C++ has no ?: ?
[06:23:11] <Friithian> ?:?
[06:23:39] <johnny> the elvis operator
[06:24:26] <johnny> although for thatexample it'd be b ?: foo()
[06:24:43] <johnny> err !b
[06:26:07] <johnny> it's a gcc extension it seems. i never looked into it. although of course one shouldn't rely on it in C/C++ land because of that. and it seems to be reversed there
[06:28:13] *** Joins: rajkosto (~rajkosto@109-93-43-201.dynamic.isp.telekom.rs)
[06:39:28] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:47:02] *** Joins: adeliktas6 (~adeliktas@i59F52959.versanet.de)
[06:49:03] *** Quits: adeliktas (~adeliktas@i59F5FF2F.versanet.de) (Ping timeout: 252 seconds)
[06:49:03] *** adeliktas6 is now known as adeliktas
[07:07:34] *** Joins: Azem (~haise01@user/haise01)
[07:09:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:10:30] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 252 seconds)
[07:13:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:17:26] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[07:25:08] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:49:16] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[07:52:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[08:01:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:08:36] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[08:10:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:13:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:17:32] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[08:20:04] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[08:26:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:29:20] *** Joins: immibis_ (~hexchat@62.156.144.218)
[08:31:48] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Ping timeout: 240 seconds)
[08:37:13] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[08:41:58] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 272 seconds)
[08:50:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:52:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:08:18] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:10:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:14:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:20:05] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[09:23:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:24:59] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[09:31:24] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[09:37:01] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Read error: Connection reset by peer)
[09:37:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[09:37:27] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[09:37:41] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[09:37:51] *** Joins: Leone (~Leo@108.175.224.215)
[09:37:53] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[09:38:31] *** Quits: rajkosto (~rajkosto@109-93-43-201.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[09:39:05] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:39:19] *** Quits: immibis_ (~hexchat@62.156.144.218) (Remote host closed the connection)
[09:39:26] *** Joins: immibis_ (~hexchat@62.156.144.218)
[09:39:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 240 seconds)
[09:40:36] *** Quits: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu) (Ping timeout: 240 seconds)
[09:40:36] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[09:41:00] *** Quits: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu) (Ping timeout: 240 seconds)
[09:41:44] *** Joins: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu)
[09:41:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[09:42:01] *** Joins: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu)
[09:42:37] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[09:42:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:41] *** ChanServ sets mode: +v npaperbot
[09:43:09] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[09:44:02] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 260 seconds)
[09:44:43] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 250 seconds)
[09:45:55] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[09:53:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:54:40] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:04:02] *** Quits: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1) (Ping timeout: 240 seconds)
[10:05:20] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[10:05:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[10:06:33] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:08:07] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:11:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:12:09] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:14:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:15:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[10:15:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[10:16:04] *** Joins: foul_owl (~kerry@23.105.36.232)
[10:17:46] <antto> !fact
[10:17:47] <nolyc> antto: Class ctype encapsulates the C library &lt;cctype> features.
[10:28:07] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:32:35] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:35:22] *** Joins: teepee (~teepee@openscad/teepee)
[10:50:07] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:51:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:51:25] *** Joins: sigma_ (~sigma@86.57.125.5)
[10:55:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:69a1:71c1:c043:2acb)
[10:55:22] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[11:01:39] *** Quits: letto (~letto@188.26.157.245) (Quit: Konversation terminated!)
[11:02:25] *** Joins: letto (~letto@188.26.157.245)
[11:04:48] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 252 seconds)
[11:10:48] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:11:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:11:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:12:21] *** Joins: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de)
[11:15:52] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:16:22] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[11:17:24] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:605e)
[11:18:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:18:29] *** Joins: paul424 (~tom@ip-5-172-238-4.multi.internet.cyfrowypolsat.pl)
[11:37:23] *** Joins: bobb_ (~bobb_@dslb-088-066-156-137.088.066.pools.vodafone-ip.de)
[11:40:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:42:50] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:43:44] *** Joins: MatSharrow (~matthew@60.102.9.51.dyn.plus.net)
[11:45:34] *** Quits: bobb_ (~bobb_@dslb-088-066-156-137.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[11:47:55] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:48:08] *** Joins: rwb (~augh@209.141.39.190)
[11:49:43] *** Quits: rb (~augh@209.141.39.190) (Read error: Connection reset by peer)
[12:04:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:04:54] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:10:35] *** Joins: KillAnimals (~anon@199-7-159-87.eng.wind.ca)
[12:12:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:14:31] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[12:15:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:16:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Ping timeout: 252 seconds)
[12:22:16] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:22:49] *** Joins: jsbach (~jsbach@2a01:c22:b1aa:6f00:d06b:554:9eaa:3358)
[12:26:48] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[12:29:25] *** Joins: robod34 (~Username@79.113.227.62)
[12:30:42] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[12:35:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:38:55] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[12:48:09] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[12:49:45] *** Quits: HvszrStykp (~X@81.171.62.84) (Ping timeout: 256 seconds)
[12:50:17] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[12:51:02] <Svitkona>  &lt;cctype>
[12:51:47] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[12:53:00] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[13:00:43] <Haohmaru> Svitkona your browser is leaking into your IRC socket o_O
[13:01:42] <LordKalma> they were refering to
[13:01:42] <LordKalma> <nolyc> antto: Class ctype encapsulates the C library &lt;cctype> features.
[13:01:53] <LordKalma> that !fact spit out
[13:02:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:05:36] *** Joins: pulse (~pulse@user/pulse)
[13:05:59] <Haohmaru> i know
[13:06:02] <Haohmaru> ;P~
[13:06:20] <Haohmaru> ^ that was me, you know
[13:08:53] <LordKalma> ah?
[13:10:38] *** Joins: Burgundy (~NA@86.121.143.206)
[13:12:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:14:20] *** Quits: p-i-_ (~Ohmu@183.89.27.225) (Remote host closed the connection)
[13:15:04] *** Joins: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th)
[13:16:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[13:20:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:21:48] <Haohmaru> you didn't know?
[13:22:13] <LordKalma> you're antoo?
[13:22:15] <LordKalma> I didn't know
[13:22:37] <Haohmaru> who else could i be
[13:26:33] <LordKalma> Haohmaru, Haohmaru?
[13:27:27] * Haohmaru is actually just an instance
[13:28:05] <Haohmaru> !fact
[13:28:06] <nolyc> Haohmaru: A virtual member function is odr-used if it is not pure.
[13:32:41] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 272 seconds)
[13:40:44] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[13:42:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:41] *** ChanServ sets mode: +v npaperbot
[13:48:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:49:03] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[13:52:04] *** Joins: angelacrust (~angelacru@182.68.130.113)
[13:54:50] *** Quits: KillAnimals (~anon@199-7-159-87.eng.wind.ca) (Ping timeout: 272 seconds)
[13:55:36] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Quit: ERR_NOWITTYQUITMESSAGE)
[13:57:00] *** Quits: foul_owl (~kerry@23.105.36.232) (Ping timeout: 240 seconds)
[14:00:35] <LordKalma> if you have a class that inherits from some ABC and implements said ABC's interface, but use said class only directly, never trough ABC*, does it have vtable overhead?
[14:01:15] <LordKalma> when you call its methods, I mean, I guess the vtable generation itself is to be expected
[14:11:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:13:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:14:59] <PJBoy> yeah
[14:15:09] *** Joins: foul_owl (~kerry@23.82.193.104)
[14:15:10] <PJBoy> unless devirtualisation optimisation occurs
[14:15:20] <PJBoy> which would be likely if you declared the class as final
[14:15:56] <LordKalma> shame
[14:16:16] <LordKalma> so you can't like create a library where you have classes that share both an interface AND no overhead :(
[14:16:25] <LordKalma> zero overhead language my ass :p
[14:16:45] <PJBoy> I think final achieves that
[14:16:53] <PJBoy> I just haven't checked to be 100% sure
[14:16:57] <LordKalma> no sane library should mark its classes as final
[14:17:31] <PJBoy> if they have classes that needn't be derived from
[14:17:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:17:42] <LordKalma> that's not for the library author to say :p
[14:17:48] <PJBoy> sure it is
[14:17:52] <LordKalma> users are unpredictable
[14:18:08] <PJBoy> even in the worst case design scenario, you can have a class that's final and fast as well as a class that's non-final and derivable
[14:18:33] <PJBoy> and you'd name them SomeImpl and SomeImplMixin or something
[14:19:10] <PJBoy> where SomeImpl is probably just `class SomeImpl : SomeImplMixin final`
[14:19:21] *** Joins: seninha (~seninha@user/seninha)
[14:19:21] <LordKalma> it's an option
[14:21:29] *** Joins: troller (~p@2a02:6b8:0:40c:8a54:baea:d917:c94c)
[14:28:28] *** Joins: theArthurDent (~user@user/theArthurDent)
[14:29:17] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Quit: Quit)
[14:31:06] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:33:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:33:48] *** Quits: paul424 (~tom@ip-5-172-238-4.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:37:10] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[14:41:13] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[14:44:17] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[14:50:50] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:56:02] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[14:56:20] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[15:00:20] *** Joins: HvszrStykp (~X@81.171.62.84)
[15:01:11] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[15:01:34] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[15:02:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[15:06:01] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 256 seconds)
[15:08:16] *** Joins: unyu (~pyon@user/pyon)
[15:13:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:17:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[15:18:12] *** Joins: markong (~kvirc@213.146.188.203)
[15:25:31] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3933:29:5fe1:cb6b)
[15:26:47] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[15:29:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 256 seconds)
[15:29:41] *** gentooclimax is now known as climax
[15:29:47] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[15:30:59] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:31:21] <ville> LordKalma: you misunderstand what the "zero-overhead abstraction" quote is. you need to read the full version of it
[15:31:39] <LordKalma> you take me too literally :)
[15:31:59] <ville> there is no such thing as too literal!
[15:33:17] <ville> 100% literal is the goal to strive for, but to faciliate succesful human-to-human communication it's better to allow less than perfect
[15:33:45] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[15:33:59] *** Joins: seninha (~seninha@user/seninha)
[15:34:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:37:52] *** climax is now known as gentooclimax
[15:42:19] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: update)
[15:43:03] <PJBoy> found the lawyer
[15:49:09] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[15:55:37] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:59:33] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[16:02:17] *** Quits: troller (~p@2a02:6b8:0:40c:8a54:baea:d917:c94c) (Remote host closed the connection)
[16:03:29] *** Joins: proller (~p@2a02:6b8:0:40c:55a1:e487:196:1c7a)
[16:04:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[16:14:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:18:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:45:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:51:59] *** Joins: seninha_ (~seninha@user/seninha)
[16:52:07] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[16:52:11] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[16:54:49] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[16:56:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:57:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[16:59:12] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:59:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Client Quit)
[17:01:13] *** Joins: pulse (~pulse@user/pulse)
[17:01:32] *** Quits: HvszrStykp (~X@81.171.62.84) (Read error: Connection reset by peer)
[17:04:25] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[17:09:52] <Haohmaru> quickest way to compare whether string A (which is typically very short) matches only the beginning of string B?
[17:10:20] <Haohmaru> because my silly substr() feels dumb
[17:10:21] <rpav> no different than comparing it to the rest (;
[17:10:36] <Haohmaru> eh?
[17:10:53] <rpav> oh, you want to see whether it's an actual match to the beginning
[17:10:55] <CarloWood> Haohmaru: https://en.cppreference.com/w/cpp/string/basic_string/starts_with
[17:10:55] <sonOfRa> b.find(A) == 0?
[17:11:29] <rpav> ah, starts_with is c++20, i was like "since when the hell is there starts_with"
[17:11:32] <rpav> but also there's string_view
[17:11:43] <rpav> and string_view can make a view-substring you can compare against
[17:11:50] <Haohmaru> too fancy, i wanna keep it C++17 for now
[17:11:52] <rpav> easy backport to 11
[17:11:59] <rpav> or native if you're 17
[17:12:40] <Haohmaru> { string A = "zz", B = "zzOMG"; cout << B.find(A); }
[17:12:42] <geordi> 0
[17:13:02] <Haohmaru> { string A = "zz", B = "zombieszzOMG"; cout << B.find(A); }
[17:13:03] <geordi> 7
[17:13:06] <rpav> there's also find_first_of with pos=0 and count=b.size()
[17:13:28] *** Joins: HvszrStykp (~X@81.171.62.84)
[17:13:39] <PJBoy> starts_with is real nice
[17:13:41] <rpav> which is a trivial implementation of starts_with i think
[17:13:48] <PJBoy> although many people would complain that it's a member function
[17:14:25] <PJBoy> and not an std::algorithm
[17:14:29] <Haohmaru> { string A = "zz", B = "zombieszzOMG"; cout << B.find_first_of(A); }
[17:14:30] <geordi> 0
[17:14:55] <rpav> { string A = "zz", B = "zombiezz!"; cout << B.find_first_of(A, 0, B.size()); }
[17:14:56] <geordi> error: no matching function for call to 'string::find_first_of(string&, int, string::size_type)'
[17:14:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:15:12] <rpav> { string A = "zz", B = "zombiezz!"; cout << B.find_first_of(A.data(), 0, B.size()); }
[17:15:13] <geordi> 0
[17:15:18] <rpav> er what
[17:15:42] <rpav> oh A.size() sorry i am 9/10ths asleep
[17:16:05] <CarloWood> { string A = "zz", B = "zombieszzOMG"; cout << starts_with(B, A); } bool starts_with(string_view const& s1, string_view const& s2) { return s1.substr(0, s2.length()) == s2; }
[17:16:06] <geordi> false
[17:16:26] <CarloWood> geordi: replace zombieszzOMG with zzombiesOMG
[17:16:27] <geordi> true
[17:16:36] <rpav> substr 🤣
[17:16:39] <CarloWood> Faster than find
[17:17:02] <rpav> oh you're taking string_view god i can't read right now
[17:17:11] <ville> Haohmaru: asking for anything-est is a tall order. it's all very dependent on lot of finicky details
[17:17:59] <ville> Haohmaru: can you guarantee your data is aligned specifically?
[17:18:12] <Haohmaru> could string_view be made out of a part of a string, so that no extra allocation happens?
[17:18:29] *** Quits: HvszrStykp (~X@81.171.62.84) (Quit: leaving)
[17:18:32] <CarloWood> string_view doesn't allocate anything
[17:18:37] <Haohmaru> like, substr() but minus making an actual string
[17:18:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:18:53] <rpav> CarloWood: yeah no i can't read, that's basically a nice proper implementation
[17:19:01] <PJBoy> I would take string_view by value
[17:19:06] <rpav> ^ though
[17:20:05] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[17:20:27] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[17:22:41] <Haohmaru> { string B = "zzOMG"; auto test = string_view(B).substr(0,2); cout << test; }
[17:22:42] <geordi> zz
[17:22:50] <Haohmaru> perhaps this ^
[17:24:26] <rpav> that's what CarloWood said but written as the function you're after
[17:25:33] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:26:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529)
[17:26:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529) (Changing host)
[17:26:03] *** Joins: skapata (~Skapata@user/skapata)
[17:26:51] <CarloWood> Haohmaru: a string_view is just a { char const* ptr; size_t len; } pair.  So, creating one from a string gets B.begin() and B.size(). The substr just set len to 2, and the compare with A is then just a memcmp for that length.
[17:27:26] <Haohmaru> yeah, that's perfect
[17:27:31] <CarloWood> The only faster way would be to construct the string_view directly with the right length.
[17:27:43] <ville> ...and it's not going to be the quickest.
[17:27:46] <CarloWood> But if it optimizes then that should already happen.
[17:28:07] <Haohmaru> it doesn't have to win all races, that's plenty good
[17:28:13] <ville> you asked for the quickest
[17:28:15] <Haohmaru> i just didn't want extra allocations here
[17:28:48] <Haohmaru> huh, i truely said "quickEST" /o\
[17:29:34] <CarloWood> The substr will also do a std::min I guess - in case the size of B is less than that of A.
[17:30:01] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[17:30:08] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[17:30:21] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[17:32:03] <Haohmaru> that's all fine
[17:33:20] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[17:33:39] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 252 seconds)
[17:33:40] *** Joins: kevr (~kevr@user/kevr)
[17:33:44] *** kenanmarasli_ is now known as kenanmarasli
[17:34:39] *** Joins: fldme (~fldme@178.49.152.151)
[17:35:42] *** MBrod208 is now known as MBrod208z
[17:35:58] *** Azem is now known as Emet-Selch
[17:37:33] *** MBrod208z is now known as MBrod208
[17:41:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:42:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:43] *** ChanServ sets mode: +v npaperbot
[17:43:40] *** Joins: gehn (~gehn@user/gehn)
[17:47:47] <fldme> is c++ a good first language?
[17:48:32] *** Joins: txtsd (~txtsd@user/txtsd)
[17:48:43] <rpav> you can, maybe not the best but there are worse
[17:49:08] <fldme> people usually recommend pascal or assembly
[17:49:16] <rpav> you maybe have a few more things to learn at once with C++ but it's better than it used to be that way
[17:49:56] <rpav> maybe in the 70s :P
[17:50:30] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[17:50:48] <rpav> asm _might_ not be a terrible first choice, but it'd be dependent on the course
[17:51:04] <rpav> pascal is sortof irrelevant .. if you want a higher-level language, there are many better choices today
[17:52:24] <fldme> people argue that even hello world in c/c++ contain many concepts which cannot be adequately explained in the first lesson
[17:53:30] *** Joins: xkuru (~xkuru@user/xkuru)
[17:53:38] <rpav> eh kinda
[17:53:42] <ville> fldme: i'd go with c
[17:54:07] <rpav> nah C is a terrible first choice as you have to unlearn a bunch of stuff
[17:54:17] <artok> ..and if going with c++, don't follow tutorials that are old
[17:54:34] <rpav> asm might not be just because you actually see how things work fundamentally without hiding of things C does
[17:55:09] <ville> fldme: having said that, i'd start that off with doing the the first 4 chapters from this book: http://ftp.acc.umu.se/mirror/gnu.org/savannah/pgubook/ProgrammingGroundUp-1-0-booksize.pdf in parallel
[17:55:12] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:55:36] <rpav> artok: how up to date is learncpp.com? you've seen Kate Gregory's talk presumably
[17:55:40] <PJBoy> C++ is a great language to learn at some point
[17:55:47] <PJBoy> hard to say if it's a good first language
[17:56:10] <PJBoy> it was my first language after assembly though, so I would tend to recommend it
[17:56:33] <PJBoy> learncpp's sufficiently up to date
[17:56:39] <ville> fldme: that book will give you insight into why things are the way they are in c
[17:56:47] <rpav> asm teaches you all the _basic_ stuff though with a very simple vocabulary that's hard to mess up
[17:56:59] <rpav> and you see how fundamentally a system works
[17:57:08] <fldme> we had pascal, c/c++, java, prolog and finally lisp
[17:57:15] <PJBoy> learncpp doesn't cover variant/optional or concepts
[17:57:23] <fldme> (and assembly after c)
[17:57:50] <PJBoy> but does cover auto and constexpr and whatnot
[17:58:26] <PJBoy> move semantics, smart pointers
[17:58:44] <rpav> sure but few people use optional/variant/concepts vs auto/constexpr
[17:59:16] <rpav> though concepts will undoubtedly get covered at some point, but C++ world moves slowly
[18:00:35] <PJBoy> indeed
[18:05:50] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:07:48] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:2f5d:2ac3:7181:23e6) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:08:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:09:22] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:15ea:f475:c9df:f1a)
[18:09:23] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[18:10:08] *** Joins: txtsd (~txtsd@user/txtsd)
[18:10:29] *** Joins: unyu (~pyon@user/pyon)
[18:12:43] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:13:00] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[18:13:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[18:15:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:16:58] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[18:19:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:25:16] <rpav> hm
[18:26:08] <rpav> "once-off" for loops so you can break are annoyingly useful
[18:26:30] <rpav> i'm not sure i've tried them for optional but they might also work
[18:28:07] <PJBoy> like `do { ... break; ... } while (false);`?
[18:28:23] <rpav> yeah though that's even worse to type and harder to macro
[18:28:51] *** Joins: ivii (~ivan@user/ivii)
[18:28:56] <PJBoy> or `[&] { ... return; ...}();` would be somewhat equivalent
[18:29:04] <rpav> true
[18:29:50] <rpav> still no way to like, `x || return`
[18:29:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[18:30:56] <rpav> need continuations heh
[18:31:24] <rpav> you could do it with a "local longjmp" but that sucks for all the reasons
[18:34:03] <rpav> probably "nicest syntax" would just be `auto x = foo() || break;` .. i.e. allowing break/return to be a "non-returning expression"
[18:34:43] <rpav> though that would require || in this case return the value and not the bool cast
[18:34:46] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[18:37:33] *** Joins: pulse (~pulse@user/pulse)
[18:38:17] <ashafq> Is there a tool in C++ to remove unnecessary include files?
[18:38:27] <rpav> there was that one
[18:38:39] <rpav> https://github.com/include-what-you-use/include-what-you-use
[18:38:40] *** Joins: AmR (~AmREiSa@156.199.14.65)
[18:39:01] <rpav> i haven't tried it so i can't tell you how it works
[18:39:03] <ashafq> rpav: oh thanks
[18:39:13] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[18:39:27] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[18:39:40] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[18:40:00] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[18:42:58] *** RazielZ is now known as Raziel
[18:46:23] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 250 seconds)
[18:53:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[18:53:52] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:55:23] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[18:56:08] <rpav> LordKalma: this guy's definition of composability seems to be weird and non-sequitur and not for the most part what i think composability would be to most people
[18:56:27] <lh_mouse> In this snippet, I define two structs. The only difference between them is that one has a constexpr constructor, and the other has an implicit one:  https://gcc.godbolt.org/z/jEaEEWY4b
[18:56:58] <rpav> like his point about "why does code work" being "we can reason about it" is probably right on the mark but then he sortof jumps to "composability!"
[18:57:15] <lh_mouse> The constexpr constructor of `data_1` does not initialize padding bytes, while in the other case, value-initialization causes padding bytes to be filled with zeroes.
[18:57:59] <lh_mouse> The former apparently results in suboptimal code. Is there any way to tell GCC or Clang to always fill padding bytes?
[18:58:50] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[18:59:07] <rpav> and there are definitely a few forms of "composition" of which you have data composition (structs) or "functionality composition" (use multiple types/functions/etc in proximity?) or syntactic composition (for/zip), but all of these things involve "use multiple things together harmoniously"
[18:59:25] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[18:59:43] <Haohmaru> can a function alias be made for std::min<some_type> ?
[18:59:58] <rpav> his log filtering example is more like, ok you can configure things .. i was expecting it to go more in the direction of "logical composition" but it wasn't solidly there
[18:59:59] <Haohmaru> i tried "using blah = std::min<some_type>;" but nope
[19:00:13] <PJBoy> `auto blah = min<blah_t>;`
[19:00:52] <PJBoy> I guess that doesn't work because it's still an overload set
[19:00:52] <Haohmaru> { auto blah = std::min<int16_t>; cout << blah(3,7); }
[19:00:53] <geordi> error: unable to deduce 'auto' from 'min<int16_t>'
[19:01:14] <rpav> min is a function not a type
[19:01:20] <Haohmaru> i know
[19:01:50] <Haohmaru> why doesn't it deduce the type from the mere arguments tho
[19:01:59] <rpav> auto blah = [](const auto& a, const auto& b) { return std::min<int16_t>(a,b); }
[19:02:01] <rpav> ;
[19:02:09] <Haohmaru> x_x
[19:02:14] <rpav> or make it a named function of course ;)
[19:02:19] <Haohmaru> right
[19:02:22] <Haohmaru> oh well
[19:02:33] <PJBoy> { auto mint = static_cast<const int&(&)(const int&, const int&)>(min<int>); cout << TYPE<decltype(mint)>, mint(4, 5); }
[19:02:33] <geordi> const int& (*)(const int&, const int&), 4
[19:02:40] <PJBoy> technically UB, but hey
[19:02:56] <rpav> you need to make a new function; there aren't a lot of options syntactically for this
[19:03:05] <PJBoy> I would make a named function too
[19:03:41] <PJBoy> even if it's a function template that just forwards its parameters to the overload of min you want
[19:03:52] <PJBoy> then you can use `auto mint = my_min<int>;` without all the nonsense
[19:04:18] <rpav> more things ought to be functor structs probably for this reason
[19:05:02] <PJBoy> save you the effort of writing a lambda
[19:05:08] <PJBoy> I guess
[19:05:33] <PJBoy> ranges::min is like that
[19:05:35] <rpav> although i'm not sure you could syntax it so both work
[19:05:55] <PJBoy> but you can't specify its template arguments, so I guess it's besides the point
[19:06:11] <rpav> oh _value_ template variable as ever
[19:06:40] <rpav> template<typename T> constexpr auto min = min_s<T>();
[19:07:11] <rpav> then you could my_min = min<int16_t>; and min<float>(a,b); i think but i'm not sure if it can deduce
[19:07:40] <PJBoy> I still don't get what the deal with the ranges functions is
[19:07:49] <PJBoy> where they're all "neibloids"
[19:08:06] <OnlineCop> What's the C++20 style for a ranged-for loop to start at element 1 instead of 0?
[19:08:09] <rpav> you can't solve problems without giving fancy unintelligible names to all the trivial things
[19:08:12] <PJBoy> they don't get looked up by ADL, idk if that's remotely useful
[19:12:00] <OnlineCop> This is how I typically write a non-ranged for loop in C++11: https://wandbox.org/permlink/soKXNaufkpFbFAKD and was wondering how I'd do this in C++20?
[19:13:25] <OnlineCop> Whoops: https://wandbox.org/permlink/myASe5eznXmL2qO5 (derp on incrementing the iterator).
[19:13:45] <rpav> for(auto&& e : slice(v, 1)) ...
[19:13:52] <rpav> oh wait that's not std ;)
[19:15:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:17:06] *** Quits: fldme (~fldme@178.49.152.151) (Quit: Client closed)
[19:17:41] <ezzieyguywuf> I'm trying to review this change - I'd like your thoughts on the `cursors.erase` that is done while iterating through `cursors`. Is this ok to do as-is? I see that a copy of the iterator is made, but I'd imagine that the copy would be as invalid as the original after the erase operation https://github.com/mobile-shell/mosh/commit/8ac80db41980a98f99c4e077d8ec436095f7490c
[19:18:12] <ezzieyguywuf> this is the specific line I'm asking about https://github.com/mobile-shell/mosh/commit/8ac80db41980a98f99c4e077d8ec436095f7490c#diff-c2f3edb73f86fe7b20ec2c48ea96a07b46af59cbec47a5182edb390a6d40edd1R385
[19:19:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:21:55] <OnlineCop> Wouldn't cursors.cbegin() and cursors.cend() be const_iterators?
[19:23:06] <ezzieyguywuf> After reading the cppreference page ot std::vector::erase, it seems that what we _should_ be doing is something like `it = cursors.erase(it)`
[19:23:15] <ezzieyguywuf> regarding cbegin and cend yes I believe you're right
[19:26:27] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[19:28:07] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[19:28:29] <OnlineCop> `cursors_type::const_iterator it_next = it; it_next++;` seems like std::next() might be useful? `cursors_type::const_iterator it_next = std::next(it);`
[19:29:54] <OnlineCop> Correct about `it = cursors.erase(it);` though. `if (...) { it = cursors.erase( it ); } else it = it_next;` I would assume.
[19:31:17] <OnlineCop> I wonder whether a ternary would even be valid there? `it = ( it->tentative( epoch - 1 )) ? cursors.erase( it ) : it_next;` :D
[19:32:29] <ezzieyguywuf> oh yea, that looks great :-D
[19:35:00] <rpav> when will c++ support utf-8 strings?!
[19:35:16] <rpav> and by utf-8 strings i mean `auto x = “foo”;`
[19:35:17] * rpav runs
[19:35:34] <OnlineCop> Strings or quotes?
[19:35:36] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:35:57] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[19:36:15] <OnlineCop> That's just a simple `operator“”()` overload, isn't it?
[19:36:23] <rpav> haha
[19:36:34] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:38:35] <OnlineCop> Not right right channel for this, but markdown: 3 backticks followed by "c++" highlights my C++ code... is there a way to also specify a "starting" line number? Probably not ```c++11``` to start on line 11, but ```c++:11``` ?
[19:39:10] <rpav> i've not seen that as an extension though probably some things have something
[19:40:59] <PJBoy> I haven't seen any unicode progress in C++
[19:41:03] <PJBoy> ever, relaly
[19:41:05] <PJBoy> *really
[19:41:31] <rpav> they made unicode alphabetic characters valid for identifiers at some point
[19:41:48] <rpav> or perhaps restricted non-identifier characters from being valid, i'm not sure
[19:42:30] <OnlineCop> Unicode characters for ThePonyHeComes would be valid variable names, right?
[19:42:41] <PJBoy> all I see on npaperbot is [P1953]
[19:42:41] <npaperbot> P1953R0: [SG7, SG16] Unicode Identifiers And Unicode <https://wg21.link/p1953r0> (by Corentin Jabot) (2019-11-11) (Related: https://wg21.link/p1953r0/github)
[19:42:51] <rpav> that's probably the only thing
[19:43:01] <PJBoy> also a compilation of all meeting notes about unicode
[19:43:25] *** Joins: sigma__ (~sigma@86.57.93.233)
[19:43:26] <PJBoy> of which there are many
[19:43:26] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[19:44:15] *** Quits: sigma_ (~sigma@86.57.125.5) (Ping timeout: 256 seconds)
[19:50:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:52:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:54:55] *** Joins: angelacrust (~angelacru@182.68.130.113)
[19:55:41] <LordKalma> rpav, ikr? it's weird
[19:55:53] *** Joins: paul424 (~tom@ip-5-172-232-107.multi.internet.cyfrowypolsat.pl)
[19:56:39] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[19:57:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:59:17] <rpav> { 𝒾𝓃𝓉 x = 𝟢; } using 𝒾𝓃𝓉 = int;
[19:59:17] <geordi> error: Unexpected `𝟢` after `𝒾𝓃𝓉 x = `. Expected '}' or balanced code.
[19:59:43] <PJBoy> use --2017
[19:59:46] <rpav> { 𝒾𝓃𝓉 x = 1; } using 𝒾𝓃𝓉 = int;
[19:59:47] <geordi>  
[19:59:49] *** Quits: AmR (~AmREiSa@156.199.14.65) (Quit: Konversation terminated!)
[19:59:55] <PJBoy> oh
[20:00:04] <LordKalma> wuuuuuttttt?!?!?!?
[20:00:05] <riv> wtf Lol
[20:00:07] <rpav> nah, C++ just doesn't support 0
[20:00:11] <PJBoy> yeah
[20:00:13] <rpav> (;
[20:00:27] <LordKalma> ah I just noticed
[20:00:29] <LordKalma> sorry :)
[20:00:55] <rpav> it was a last-minute feint .. i half-expected those to work though
[20:01:36] <ashafq> rpav: how did you get italic _int_ ?
[20:01:46] <LordKalma> that's unicode for you
[20:01:53] <ashafq> wow!
[20:01:57] <rpav> ashafq: https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode
[20:02:01] <PJBoy> mathematical script
[20:02:07] <rpav> {} class MyClass™ {};
[20:02:07] <geordi> error: extended character ™ is not valid in an identifier
[20:02:24] <rpav> hm this gcc compiles that
[20:02:25] <ashafq> So can I finally have greek letters in my math formula in C++?
[20:02:40] <rpav> yeah
[20:02:41] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[20:02:45] <LordKalma> ⤀⤀⤀⤀⤀⤀⤀⤀⤀⤀⤀⤀⤀
[20:02:46] <ashafq> yes!
[20:02:58] <PJBoy> you could anyway
[20:03:07] <PJBoy> the compiler gets to choose the source character set
[20:04:19] <rpav> this compiler will also allow `#define λ [&]()` but i'm not sure
[20:04:24] <ashafq> { auto 𝛂 = 0.99; }
[20:04:25] <geordi>  
[20:04:36] <ashafq> { auto 𝛂 = 0.99; cout << 𝛂; }
[20:04:37] <geordi> 0.99
[20:04:40] <ashafq> yes!
[20:04:53] <rpav> yeah it's just a bit hard to type and sortof unnecessary
[20:05:05] <angelacrust> nice
[20:05:24] <PJBoy> we need trigraphs for all unicode characters
[20:05:33] <LordKalma> !grab PJBoy
[20:05:33] <nolyc> LordKalma: The operation succeeded.
[20:05:36] <rpav> heheh
[20:05:54] <angelacrust> how's everyone doing
[20:05:56] <angelacrust> I had a question
[20:06:01] <LordKalma> !rq
[20:06:01] <nolyc> LordKalma: <kalven> I mean who doesn't like to unwind with godbolt?
[20:06:15] <angelacrust> Is there a good book that I can follow for DSA (that's written in C)?
[20:06:20] <LordKalma> poor family man
[20:06:26] <LordKalma> what's DSA?
[20:06:31] <PJBoy> data structs and algo
[20:06:34] <angelacrust> Data Structures and Algorithms
[20:06:39] <LordKalma> ah
[20:06:41] <angelacrust> yes
[20:06:45] <LordKalma> I had that crap in college
[20:07:06] <angelacrust> wow, you called DSA crap
[20:07:09] <angelacrust> it's not crap
[20:07:25] <PJBoy> DSA courses often are though
[20:07:30] <rpav> https://www.amazon.com/dp/0262033844/ <- probably everyone has/should acquired a copy of this at some point
[20:07:49] <LordKalma> uhhhh this is a linked list and this is a binary tree // my DSA course
[20:07:57] <PJBoy> there's also DSA the Digital Signature Algorithm
[20:07:59] <PJBoy> which does suck
[20:08:20] <angelacrust> I've already ordered that book my friend rpav
[20:08:38] <angelacrust> I got this advice that CLRS is the "bible" of DSA
[20:08:40] <rpav> there are others but you probably want to get into some more specific field before investing too heavily .. e.g. "real-time collision detection" is great but very specific
[20:08:46] <PJBoy> CLRS is overrated
[20:08:50] <PJBoy> but nonetheless
[20:08:55] <rpav> which is clrs
[20:09:01] <PJBoy> the one you linked
[20:09:02] <angelacrust> Robert Wayne is also very good
[20:09:15] <PJBoy> Cormen, Leiserson, Rivest, Stein
[20:09:20] <angelacrust> Yep
[20:09:21] <rpav> ah
[20:09:34] <LordKalma> I prefer Rammstein
[20:09:45] <PJBoy> the same Rivest that helped write RSA
[20:09:54] <angelacrust> Damn
[20:09:58] <angelacrust> I love RSA
[20:10:00] <rpav> i dunno if i'd consider it overrated, but i would also not consider it much more than an incidental reference to some decent basics / intermediate things
[20:10:32] <angelacrust> RSA is that encryption algo right?
[20:10:43] <PJBoy> CLRS might only be overrated in the academic world
[20:11:01] <PJBoy> RSA is asymmetric crypto algorithm, yeah
[20:11:14] <PJBoy> it does encryption, signing
[20:11:20] <Alipha> PJBoy: we'd probably need quadgraphs for unicode...
[20:11:35] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:11:37] <angelacrust> there's a better algo than RSA tho
[20:11:40] <angelacrust> ed25519
[20:12:03] <rpav> i thought the general consensus was to not trust anything elliptic-curve
[20:12:09] <angelacrust> I don't know if I've typed its name correctly
[20:12:51] <angelacrust> yep, it's correct
[20:12:54] <PJBoy> no, elliptic curves are good
[20:13:05] <PJBoy> they let your reduce your key size significantly
[20:13:16] <PJBoy> most embedded stuff is gonna use elliptic curve crypto
[20:13:47] <angelacrust> He must be a really smart kid to have written an algo like RSA...
[20:14:06] <Alipha> OnlineCop: just write a traditional for loop if you need to not start at element 0. traditional for loops still serve a purpose :-P
[20:14:14] <rpav> https://crypto.stackexchange.com/questions/10263/should-we-trust-the-nist-recommended-ecc-parameters
[20:14:22] *** Joins: seninha (~seninha@user/seninha)
[20:14:31] <Alipha> rpav: then use ec25519, not the nist ones ;-)
[20:15:53] <Alipha> RSA is also so much more difficult to implement correctly. and even a correct implementation still has timing/power-consumption attacks (unless you use a super slow algorithm that doesn't have such attacks)
[20:16:02] <rpav> Schneier seems to concur and i don't see any more recent retractions
[20:16:05] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[20:16:21] *** Joins: HvszrStykp (~X@81.171.62.86)
[20:16:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:16:32] <PJBoy> side channels are a whole other world
[20:16:45] <rpav> i dunno
[20:17:01] <PJBoy> side channel analysis and resistance is another arms race
[20:17:54] <PJBoy> I wish we studied it more :(
[20:17:56] <rpav> Alipha: i thought the problem was it was hard to verify that _anything_ wasn't backdoorable but i guess it's part of TLS 1.3 so if it's not secure, everything else is also insecure
[20:19:39] <Alipha> I thought the ed25519 had justification for all its parameters, unlike the nist curves where the nsa just said "here they are"
[20:19:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:20:05] <rpav> probably but isn't the bigger problem you can't verify lack of weakness
[20:20:34] <rpav> i am definitely not a crypto or math person so i dunno
[20:23:43] <Alipha> Concerns of intentional backdooring is alleviated by using either justifiable or "nothing up my sleeve" numbers. Accidental weaknesses are likely to be found and publicized by the community. I mean, there is a chance that the nsa or someone finds something and keeps it secret. But I would think the community would eventually find it too
[20:23:51] *** Joins: jokoon (~eio@2a01:e0a:542:e160:3d9c:f044:e5e7:d254)
[20:24:16] <PJBoy> there's a paper on maliciously chosen curves
[20:24:47] <rpav> side channels seem like the much lower-hanging fruit in any case
[20:25:01] *** Joins: txtsd (~txtsd@user/txtsd)
[20:25:22] <Alipha> *cough* Dual EC DRBG
[20:25:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:29:02] *** Quits: txtsd (~txtsd@user/txtsd) (Client Quit)
[20:29:18] *** Joins: txtsd (~txtsd@user/txtsd)
[20:31:16] *** Quits: jokoon (~eio@2a01:e0a:542:e160:3d9c:f044:e5e7:d254) (Quit: Leaving)
[20:31:20] <PJBoy> https://eprint.iacr.org/2018/023 was the paper I had in mind
[20:31:53] *** Quits: txtsd (~txtsd@user/txtsd) (Client Quit)
[20:32:12] *** Joins: txtsd (~txtsd@user/txtsd)
[20:33:30] <PJBoy> man crypto's hard
[20:34:25] <PJBoy> "here's how we use abstract algebra and group theory to say 'fuck you' and your subverted parameters"
[20:35:26] *** Quits: txtsd (~txtsd@user/txtsd) (Client Quit)
[20:35:42] *** Joins: txtsd (~txtsd@user/txtsd)
[20:36:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:36:57] <PJBoy> it touches on why dual EC was bad
[20:37:10] <PJBoy> and seems to suggest that ed25519 was alright
[20:37:43] <rpav> crypto is hard to the point that i just don't want to have to touch anything that deals with it
[20:38:08] <rpav> likely no small part of the reason we're all still using https
[20:38:39] <PJBoy> yeah crypto is stupid hard
[20:38:40] <rpav> like even using SSL directly has a lot of opportunity for error
[20:39:50] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[20:47:45] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[20:50:24] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[20:51:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:52:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:53:31] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:58:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:59:04] *** Joins: yolo100 (~yolo@rrcs-67-79-221-188.sw.biz.rr.com)
[20:59:24] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:01:19] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[21:01:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:03:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:04:17] <angelacrust> I saw a syntax in an online resource which I vaguely remember now. `for (int i, cin >> n; i < n; i++)` something like that
[21:04:27] <angelacrust> Please correct me. I know I've written it wrongly
[21:07:18] *** Quits: theArthurDent (~user@user/theArthurDent) (Remote host closed the connection)
[21:07:19] <PJBoy> no
[21:07:22] <PJBoy> >:(
[21:10:23] <Raziel> I concur
[21:10:25] <Raziel> >:[
[21:10:56] <angelacrust> F
[21:13:20] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[21:14:54] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[21:15:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:16:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:17:00] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Ping timeout: 240 seconds)
[21:17:11] <Alipha> `int i = 0, n; for(i = 0, cin >> n; i < n; i++)` would work, but please don't do that
[21:17:27] <Alipha> oh, i guess that first `= 0` is redundant
[21:17:41] <Friithian> that looks evil
[21:18:02] *** Joins: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[21:18:20] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Read error: Connection reset by peer)
[21:19:04] <rpav> cinners, repent
[21:19:47] <rpav> i wonder if you could do it with range-based for
[21:20:15] <angelacrust> wow
[21:20:29] <angelacrust> Alipha nice, I guess that's what I was looking for
[21:20:29] <Raziel> you can also do for(int i = 0, n = std::cin.get(); i < n; i++)
[21:20:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:20:36] <Raziel> but, uh, that takes the ascii value
[21:20:41] <Raziel> also don't do either of those plz.
[21:20:53] <angelacrust> We can do `- '0'` to turn that into an integer
[21:20:57] <Raziel> yeah
[21:21:04] <angelacrust> Yep
[21:21:18] <Raziel> but for realsies, why are you doing that? lol
[21:21:20] <rpav> for only 9 values, assuming ascii
[21:21:51] <angelacrust> I'm creating my signature template for online programming contests
[21:22:11] <Raziel> your whatnow
[21:22:38] <angelacrust> like this:
[21:22:53] <Raziel> and also, is readable, non-evil code disallowed in online programming contests?
[21:22:56] <angelacrust> yeah
[21:23:01] <Raziel> well cock
[21:23:07] <angelacrust> it should look different and readability doesn't matter
[21:25:07] <Raziel> not something you should get used to
[21:25:08] <Raziel> >_>
[21:25:34] <Raziel> assuming you'll want to code for a living, at least
[21:25:57] <angelacrust> That's correct
[21:26:09] <rpav> some clever template code would be unreadable but not ick like iostreams
[21:26:14] <angelacrust> https://bpa.st/ZHVA
[21:26:20] <angelacrust> Here's what I've done so far
[21:26:24] <Friithian> imagine, you start a new job, you start looking at the codebase, and you see that evil forloop
[21:26:44] <angelacrust> why is it evil if I can ask?
[21:27:12] <Raziel> i = 1; i <= TET; is also evil
[21:27:19] <Raziel> just do i = 0; i < TET :p
[21:27:28] <Raziel> we dun like starting at 1 in cppland
[21:27:31] <angelacrust> that's correct
[21:27:37] <angelacrust> I will change it
[21:27:57] *** Quits: proller (~p@2a02:6b8:0:40c:55a1:e487:196:1c7a) (Ping timeout: 252 seconds)
[21:28:02] <Raziel> I mean, there are cases in which you more or less have to start at 1 for reasons, but this does not look like one of them
[21:28:22] <angelacrust> Yep, starting at 0 till < n also works
[21:28:52] <angelacrust> I wanted to make this template look somewhat different than what's available on the internet
[21:29:09] <rpav> { int 𝟢 = 1; cout << 𝟢; }
[21:29:09] <geordi> error: Unexpected `𝟢` after `{ int `. Expected '}' or balanced code.
[21:29:18] <rpav> bah
[21:29:36] <rpav> wait this is clang-13 that compiles it
[21:29:54] <angelacrust> ?
[21:30:32] <angelacrust> I should follow good coding practices or I will become a very bad programmer... :(
[21:31:07] <Raziel> well if you want some more pointed out
[21:31:24] <Raziel> typedef long long ll;
[21:31:24] <Raziel>  < these are also evil, use stdint ones
[21:31:34] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[21:32:34] <angelacrust> like ?
[21:32:51] <angelacrust> I'm new to C++
[21:33:37] <angelacrust> should I use `#define` to map long long?
[21:33:50] <angelacrust> if `typedef` is not correct
[21:34:03] <Raziel> int64_t in cstdint/stdint.h
[21:34:04] <Raziel> https://en.cppreference.com/w/cpp/types/integer
[21:34:08] *** Quits: letto (~letto@188.26.157.245) (Quit: Konversation terminated!)
[21:34:08] <TinoDidriksen> You should use typedef or "using" to map types, not #define
[21:34:26] <TinoDidriksen> Avoid #define as much as you can. Don't use it for types or constants.
[21:34:28] <angelacrust> okay
[21:34:43] <Raziel> typedef in that context is fine, but using typedef for basic types like that is questionable
[21:35:14] <hnOsmium0001[m]> that's a very subjective conclusion
[21:35:30] <angelacrust> typing `long long` is time consuming though
[21:35:39] <Raziel> which is why you'd type int64_t instead
[21:35:39] <Raziel> :p
[21:35:53] <hnOsmium0001[m]> well actually typedef long long ll; is questionable in a real project, it's very common in programming competitions
[21:36:16] *** Joins: letto (~letto@188.26.157.245)
[21:36:24] <Raziel> hnOsmium0001[m], right, I was just trying to point out questionable practice from a real project standpoint, even though this is for a competition
[21:36:34] <Raziel> just so they know what kind of stuff they should maybe not get used to
[21:36:35] <rpav> things like having to type out stuff isn't really a real problem in real code
[21:37:05] <hnOsmium0001[m]> but IMO typedef long long i64; is completely reasonable for a variety of possible reasons, even in a real project
[21:37:28] <hnOsmium0001[m]> e.g. consistency with other parts of the codebase, legacy reasons, or even just personal preference
[21:37:29] <Raziel> long double is also a questionable thing, through its mere existence. no idea if it's common or mandated in competitions or what
[21:37:38] <rpav> it's annoyingly noisy really
[21:37:48] <angelacrust> Yep, I got it. I will follow standard procedures to write code for a real project
[21:37:49] <hnOsmium0001[m]> are long doubles even implemented in half of the platforms?
[21:37:51] <rpav> i64 u64 i32 f32 f64
[21:37:56] <rpav> blegh
[21:38:09] <Raziel> I mean, if I see those I'll probably know what they are at least
[21:38:11] <Alipha> angelacrust: prrefer `using foo = long long;` instead of `typedef long long foo;` and especially don't do `#define foo long long`
[21:38:16] <hnOsmium0001[m]> things are starting to oxidize a bit
[21:38:18] <Raziel> but still a bit blegh
[21:38:37] <angelacrust> okay, so I'll replace typdefs with `using` from now on
[21:38:55] <angelacrust> thanks for pointing that out
[21:39:09] <Raziel> yeah, using is the newer way of doing it which is now considered preferred
[21:39:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[21:40:03] <angelacrust> Gotcha (y) =D
[21:40:20] *** Quits: mort (~mort@188.166.114.29) (Quit: The Lounge - https://thelounge.chat)
[21:41:04] *** Joins: mort (~mort@188.166.114.29)
[21:42:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:44] *** ChanServ sets mode: +v npaperbot
[21:45:26] *** Quits: yolo100 (~yolo@rrcs-67-79-221-188.sw.biz.rr.com) (Quit: Client closed)
[21:45:49] <angelacrust> https://bpa.st/QEZA what does this error mean?
[21:46:26] <Raziel> it means you have more than one main, probably
[21:46:48] <angelacrust> https://bpa.st/DK7A  here's the code
[21:47:59] <Raziel> well there's nothing wrong with that code, are you trying to link more than just that file?
[21:48:06] <Alipha> angelacrust: do you have multiple cpp files in your project?
[21:48:36] <OnlineCop> Does it make more sense to put Doxygen comments in an interface, or within the derived classes?
[21:48:55] <angelacrust> nope Alipha
[21:49:19] <angelacrust> I have a C file in that directory
[21:49:35] <Alipha> angelacrust: how are you compiling/linking?
[21:50:17] <angelacrust> `g++ -fsanitize=address -std=c++17 -Wall -Wextra -Wshadow -DPREDWN -O2 % -o %:r % && ./%:r < input.txt<CR>`
[21:51:56] <Alipha> angelacrust: you have ` % ` twice, so you're compiling the same file twice
[21:52:48] <angelacrust> so the first `%` for the cpp file, and then `%:r` is for `filename` without the `cpp` extension so that it creates an executable
[21:53:24] <Friithian> what about the third one, after the :r
[21:53:39] <angelacrust> to run `./filename`
[21:53:47] <angelacrust> the executable which was created
[21:54:28] <angelacrust> and this is bound to a vim keymapping so I've removed that out of the compilation flag
[21:55:00] <Friithian> ok, so you have …-O2 % (the input file) -o %:r (output file without cpp) % (????) && ./%:r (run the compiled stuff)
[21:55:07] <Alipha> angelacrust: `./%r` is the 4th one
[21:55:19] <angelacrust> ohh
[21:55:26] <angelacrust> there's an extra `%`
[21:55:45] <Alipha> angelacrust: i added some additional flags while i was at it ;-)
[21:55:47] <Alipha> `g++ -fsanitize=leak,address,undefined -std=c++17 -Wall -Wextra -Wshadow -pedantic -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -DPREDWN -O2 % -o %:r && ./%:r < input.txt<CR>`
[21:56:16] <angelacrust> nice!
[21:56:27] <angelacrust> can I use that in my setup?
[21:56:33] <Alipha> sure
[21:56:42] <angelacrust> and what more can it do?
[21:57:07] <Raziel> yells at you harder
[21:57:20] <angelacrust> Right...
[21:58:01] <Raziel> well, that is what it does. enables even more warnings and checks.
[21:59:10] <angelacrust> that's a good thing, right?
[21:59:57] <Friithian> yes
[22:00:28] <angelacrust> Okay
[22:03:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80::d7) (Remote host closed the connection)
[22:03:58] <angelacrust> nice, I think there was a cpp file (with a main function) in Vim's buffer which was not deleted. Restarting Vim helped.
[22:04:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[22:05:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Client Quit)
[22:06:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[22:06:11] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:07:35] *** Joins: proller (~p@80.240.216.69)
[22:10:25] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[22:12:44] *** Joins: seninha (~seninha@user/seninha)
[22:17:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:21:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[22:22:08] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[22:27:35] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[22:28:06] *** Joins: eck (~root@user/eck)
[22:28:28] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[22:28:40] *** Joins: plastico (~plastico@neomutt/plastico)
[22:31:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:34:52] *** Joins: AmR (~AmREiSa@156.199.14.65)
[22:34:53] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[22:36:12] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[22:41:04] *** Joins: proller (~p@2a02:6b8:b081:4::1:3b)
[22:44:39] *** Joins: magla (~gelignite@55d40b59.access.ecotel.net)
[22:45:29] *** Joins: pulse (~pulse@user/pulse)
[22:50:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:51:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:55:05] *** Joins: Cyp_ (~cyp@213.237.87.172)
[22:55:19] *** Quits: Cyp (~cyp@213.237.87.172) (Read error: Connection reset by peer)
[23:17:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:20:01] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th)
[23:21:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:23:24] *** Quits: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th) (Ping timeout: 240 seconds)
[23:23:46] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:cf7:316a:d226:c21f)
[23:29:23] <pulse> i will never understand people who insist on type *name :P
[23:30:00] <Alipha> pulse doesn't understand me
[23:30:06] <pulse> :S :s
[23:30:15] <Alipha> `int *x, y;` IS WHY
[23:30:22] <pulse> type* name; // pointer to _type_
[23:30:25] <pulse> yeah that old excuse eh
[23:30:28] *** Quits: paul424 (~tom@ip-5-172-232-107.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:30:44] <pulse> int* x; int* y; looks better anyway :p
[23:31:02] <Alipha> the thing though, is i type `T&&... args` because `T &&...args;` looks weird
[23:31:50] <Alipha> i "never" declare multiple variables in one statement anyway
[23:31:58] <pulse> me neither
[23:32:00] <pulse> i think
[23:32:05] *** Joins: CarloWood_ (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[23:32:08] <Alipha> so even less reason i should do `int *x`
[23:32:25] <pulse> it just never made sense to me
[23:33:09] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:33:33] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[23:34:03] <Alipha> `int* x` is misrepresenting how that expression is parsed (again, illustrated by how `int* x, y;` is parsed)
[23:34:09] <Alipha> that's my justification
[23:34:56] <pulse> yeah but it makes more sense semantically
[23:35:04] <pulse> because the pointer is attached to the type not the value
[23:35:51] <Alipha> or you can be like PJBoy and use `std::add_pointer_t<int> x, y;`
[23:36:22] <PJBoy> :)
[23:37:00] <PJBoy> if I do declare multiple pointers on a line, I write `T* p, *q, *r;`
[23:37:24] <Alipha> lol, yay consistency!
[23:37:56] <pulse> hmm
[23:37:57] <Alipha> granted, i'm not much better with `void foo(auto &x, auto&&... rest)`
[23:37:59] <PJBoy> well you have to pay special attention on making sure you don't omit the * token
[23:38:05] <PJBoy> so I like that it stands out
[23:38:16] <pulse> not sure if crazy or genius
[23:38:43] <rpav> using T_ptr = T*; T_ptr a, b, c;
[23:38:43] <PJBoy> crazy like a fox, or crazy like fox news
[23:38:48] <LordKalma> !rq
[23:38:48] <nolyc> LordKalma: <kkd> The Q in QVariant is for "Questionable"
[23:39:07] <kkd> I have been summoned!
[23:39:11] <pulse> rpav, that's pretty good
[23:39:23] <rpav> not really ;/
[23:39:29] <rpav> ptr<T> a, b, c; // is good though
[23:39:41] <rpav> another reason to have a ptr<T>
[23:39:52] <PJBoy> we have ptr<T>
[23:39:53] <ashafq> rpav: or unique_ptr<T>
[23:39:55] <PJBoy> it's just spelt differently
[23:40:09] <rpav> ashafq: different semantics
[23:40:11] *** Quits: CarloWood_ (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[23:40:21] <ashafq> true...
[23:40:29] <rpav> my ptr<T> is an initializing, non-owning pointer value class
[23:40:31] <LordKalma> raw pointers are fine and have their uses
[23:41:13] <rpav> LordKalma: yeah absolutely
[23:41:20] <rpav> but that's what ptr<T> still is
[23:41:20] <ashafq> I have another question: There's a C library that I am working on where there is an init() function which initializes function pointers depending on CPU arch
[23:41:23] <PJBoy> they're iterators for a start
[23:41:37] <PJBoy> and everyone agrees that iterators are useful
[23:41:43] <ashafq> How do I manage that with C++ inside a wrapper class?
[23:41:49] <rpav> but it's things like "you want a const pointer to a T, or a pointer to a const T, or a const pointer to a const T .. how do you write it?" and ptr<const T> is unquestionably obvious
[23:42:14] <PJBoy> yeah I agree with that
[23:42:26] <ashafq> I was thinking of using a static atomic member, but I want to know if there are more standard ways of doing this
[23:42:53] <rpav> that doesn't seem like something that needs atomics
[23:43:09] <rpav> maybe settle for conventional weapons
[23:43:19] <ashafq> static bool member?
[23:43:35] <rpav> ashafq: wait, what's the actual problem here
[23:44:05] <PJBoy> presumably init() needs to be called before anything the class does
[23:44:09] <PJBoy> and only ever called once
[23:44:13] <ashafq> Yes ^
[23:44:44] <ville> ashafq: why are you writing a c++ wrapper in the first place?
[23:44:45] <ashafq> And since it overwrites function pointers, it may not be thread safe (well, I don't know)
[23:45:17] <rpav> i'd just static a member that returns a pointer to that static struct and rely on the builtin locking
[23:45:18] <ashafq> ville: To make things easier in C++, because it is one of the wrapper library
[23:45:35] <rpav> i mean you'd basically be doing the same anyway so why reimplement it
[23:45:46] <PJBoy> in a similar situation, I've had my class' ctors all call a static member function named something like `setup()`
[23:46:05] <PJBoy> and in setup() you initialise a static local variable using init()
[23:46:07] <rpav> the alternative would be if you could call it during initialization once
[23:46:08] <ashafq> Can the constructor call setup() in that sense?
[23:46:21] <rpav> yeah
[23:46:27] <PJBoy> something like `static int x = init(), 0;`
[23:46:56] <ville> ashafq: it's hardly ever worth the effort to be writing c++ wrappers: "just because the library is c"
[23:47:06] <rpav> you _might_ be able to do `class C { static const auto* _FUNCS = the_init_func(); ... };`
[23:47:35] <rpav> of course 1) obviously beware SIOF 2) this may not be possible if it needs some other context, obviously
[23:47:50] <ashafq> SIOF?
[23:47:56] <rpav> static initialization order fiasco
[23:47:57] <PJBoy> !siof
[23:47:58] <nolyc> PJBoy: Error: "siof" is not a valid command.
[23:48:00] <PJBoy> wow
[23:48:06] <rpav> it ought to be
[23:48:11] <rpav> maybe it's not initialized yet
[23:48:37] <rpav> ashafq: if you need to make/use/etc the class also during initialization, it's a problem
[23:48:50] <rpav> static member singleton thing is still the safest/easiest
[23:52:30] <ashafq> rpav: https://godbolt.org/z/K663YvqGr
[23:52:31] *** Joins: Xardas (~Xardas@149.233.51.127)
[23:52:43] <ashafq> I guess something like this? it isn't working tho
[23:55:31] <Alipha> ashafq: simplified it for you: https://godbolt.org/z/hebxdo6Y8
[23:56:01] <rpav> https://godbolt.org/z/b38hKMoE4
[23:56:07] <rpav> or that yea
[23:57:05] <rpav> actually i'm not 100% sure if you get locking around anything but the initialization of the_thing so that might have to be one statement
[23:57:44] <rpav> yeah no guard_acquire unless you do
[23:58:42] *** Quits: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:58:51] <rpav> if you need to pass it a struct to initialize, you'd need what Alipha wrote plus an additional static, but it shouldn't be hard
[23:59:26] <rpav> everytime i do this it's with a map and directly initialized ;/
