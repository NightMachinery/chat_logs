[00:00:37] *** Joins: urdh (~urdh@user/urdh)
[00:00:39] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[00:03:22] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[00:06:19] *** Joins: urdh (~urdh@user/urdh)
[00:06:21] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[00:10:03] <c_wraith> timCF: https://hackage.haskell.org/package/template-haskell-2.18.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter
[00:10:25] <c_wraith> timCF: quoteExp specified Q Exp
[00:10:50] <c_wraith> timCF: So no, you can't use inference across the quote mechanism.
[00:11:43] <c_wraith> timCF: you need typed template haskell to manage that.
[00:12:50] <c_wraith> timCF: I'd say your best options are either moving that information into the String somehow (fragile, but maybe good enough) or using a typed template haskell splice (it can work well, but it just went through a massive API change with GHC 9, making it hard to write portably)
[00:13:02] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[00:15:10] *** Joins: urdh (~urdh@user/urdh)
[00:15:11] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[00:15:13] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[00:17:09] *** Joins: urdh (~urdh@user/urdh)
[00:17:11] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[00:17:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:21:11] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[00:22:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:22:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:22:46] *** Joins: wroathe (~wroathe@user/wroathe)
[00:23:43] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[00:25:39] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[00:25:53] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[00:26:23] <Las[m]> I've heard that Backpack isn't likely to be supported in GHC going forward, how true is this?
[00:27:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[00:27:52] *** Quits: xsperry (~xs@user/xsperry) ()
[00:28:27] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[00:28:35] <geekosaur> this is probably not the best place to ask that question, but given that stack still shows no signs of supporting it and excluding ~half the ecosystem from it is a bad plan, and nobody seems to have stepped forward to support it in future ghcs, I'd suspect it's likely
[00:29:44] <EvanR> oof
[00:29:57] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:30:24] *** Joins: urdh (~urdh@user/urdh)
[00:30:41] *** Quits: urdh (~urdh@user/urdh) (Client Quit)
[00:32:15] <mjrosenb> backpack?
[00:32:25] *** Joins: pavonia (~user@user/siracusa)
[00:32:41] <EvanR> kind of like a module system for haskell
[00:32:57] *** Quits: n3rdy1 (~n3rdy1@c-73-14-53-56.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[00:34:05] *** Joins: urdh (~urdh@user/urdh)
[00:34:08] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[00:34:12] <geekosaur> yeh, backpack was intended to be like SML functors (parameterized modules)
[00:34:42] <Las[m]> geekosaur: Can you elaborate on the "stepped up" part?
[00:34:46] <Las[m]> Is the original contributor not active anymore?
[00:35:00] <geekosaur> it was a PhD thesis, they've since moved on
[00:35:58] <geekosaur> iirc hvr stepped forward for a while but he's vanished as well
[00:36:01] <Las[m]> That is quite unfortunate.
[00:36:54] <Las[m]> Perhaps I should just use CPP for my simple use case.
[00:37:13] <sm> everyone says that, but it seems nobody cares about it that much
[00:37:15] *** Joins: urdh (~urdh@user/urdh)
[00:37:19] <Las[m]> I just want to switch have "production" and "development" modes.
[00:37:21] <geekosaur> also I think what's implemented is only part of the full system, but again nobody seems to be interested in finishing it
[00:37:47] <Las[m]> I think it's likely that 99% of the people who think it is unfortunate are not comfortable enough with GHC to contribute.
[00:38:03] <geekosaur> not sure backpack is worth the effort for that; I'd just use cpp
[00:38:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:38:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:38:07] *** Joins: wroathe (~wroathe@user/wroathe)
[00:38:13] <Las[m]> AFAICT it's limited compared to SML functors, was this supposed to be fixed/improved upon?
[00:38:23] <Las[m]> It just seemed like a neat chance to use Backpack finally.
[00:38:26] <geekosaur> as I said, I think it's incomplete
[00:39:00] <sm> I think people who want it generally don't consider the maintenance, complexity, ecosystem costs
[00:39:16] <geekosaur> and, well, with stack not supporting it I think a largeish number of Haskell folks are excluded form it anyway
[00:40:04] <sm> those are what have discouraged expert devs from pushing it further, I suspect
[00:40:43] <EvanR> was backpack a ghc plugin, or more than that
[00:40:51] <geekosaur> more than that
[00:40:52] <Las[m]> No it's integrated into GHC.
[00:41:07] <Las[m]> Thanks for the information, it's really neat though.
[00:41:13] <EvanR> can it be a plugin
[00:41:17] <Las[m]> Much more "FP" than CPP and Cabal flags.
[00:41:25] <geekosaur> too deeply woven in, I'm pretty sure
[00:41:44] <geekosaur> even with the somewhat expanded plugin system in ghc9+
[00:42:41] <geekosaur> suppose someone can try to get in touch with ezyang and find out his opinion on continued maintenance and maybe what's needed to complete it
[00:43:05] <geekosaur> and whether there's any chance of supporting it via plugins (and what kind of changes the plugin system might need to pull that off)
[00:43:18] <timCF> c_wraith: thanks for reply!
[00:43:36] <mjrosenb> ooh, I do like the sound of SML-style functors.
[00:43:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:43:46] <mjrosenb> I've always felt they were missing from haskell.
[00:44:40] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[00:45:05] <EvanR> you can parameterize records, but records can't hold instances or local classes. And you can't "open" a record
[00:45:38] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[00:46:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[00:46:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:47:25] <geekosaur> not sure backpack even notionally supported "open" though
[00:48:09] <geekosaur> that might have been part of why backpack never caught on, in fact
[00:48:29] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[00:49:39] <Las[m]> https://gitlab.haskell.org/ghc/ghc/-/wikis/Backpack-refactoring !
[00:49:51] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[01:01:25] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[01:02:25] <ProfSimm> I'm wondering has anyone ever thought if we have no mutable state and side-effects, is it possible to tweak Haskell so it can run in reverse, i.e. feed output to a function, it gives you the inputs?
[01:03:10] <ProfSimm> Obviously this won't work with many existing functions, but you can tweak the output to produce part of the input necessary to compute in reverse, 5 + 6 => 11, 6     11 - 6 => 5, 6
[01:03:25] *** Joins: jespada (~jespada@87.74.33.157)
[01:04:16] <EvanR> you're getting reversibility which most functions aren't, because they aren't injective
[01:04:21] <EvanR> forgetting*
[01:04:30] <Las[m]> ProfSimm: In a dependently typed language you could probably define a type for a reversible function.
[01:04:30] <geekosaur> yeh
[01:05:06] <EvanR> and many functions should be reversible but aren't thanks to floating point :'(
[01:05:29] <geekosaur> and worth noting is that in many cases you'd end up needing state to make a function injective
[01:05:42] <geekosaur> so the premise may be wrong
[01:07:20] <Las[m]> `reversible a b = DPair (a -> b) $ \f => DPair (b -> a) $ \g => ((x : a) -> g (f x) === x)` or something in Idris 2
[01:07:31] <EvanR> any function can be made reversible by promoting the domain and range from A -> B to (A,B) -> (B,A) and tracking what argument you used
[01:09:47] <EvanR> I'm wrong!
[01:10:26] <geekosaur> I was wondering if running them in Writer might help
[01:10:52] <ProfSimm> A, B -> C  to A, B -> B, C
[01:11:23] <EvanR> can't parse
[01:11:27] <geekosaur> of course they'd have to tell appropriately
[01:12:34] <EvanR> any function can be made reversible by promoting the codomain to a pair that saves what argument you used, and so if the computations aren't naturally reversible, you get a lot of space usage for remembering
[01:15:44] <EvanR> xor can be made reversible by adding 1 more bit to the output, but and and or can't
[01:18:16] <dsal> > 727477226272  `mod` 13
[01:18:17] <lambdabot>  4
[01:21:03] <mjrosenb> you could also probably get away with a weaker form of reversibility, which is just a function that returns *an* input that results in the desired output.
[01:22:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[01:22:35] <mjrosenb> ok, so, awkward gaps in my knowledge time: what happened to `cabal sandbox` in v2?
[01:23:13] <sirlensalot> nix-style builds are now the default
[01:23:31] <sclv> sandbox is gone entirely
[01:23:56] <sclv> it stuck around for a bit, but in the last major release it got removed entirely to clean up the codebase
[01:27:43] <mjrosenb> I'm not sure how nix-style builds have replced a sandbox.
[01:28:41] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[01:29:06] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[01:29:37] <monochrom> Maybe this helps: Imagine sandboxes but if it is safe to share a built dependency then it's shared so you save some build time.
[01:30:29] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[01:31:11] <monochrom> So when using v2 you can just treat your "project" directory as an automatic sandbox.
[01:33:03] <sm> like a sandbox that uses a layered filesystem
[01:33:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:33:47] <geekosaur> yeh, v2 is automatic sandboxing, sandboxes were an attempt to keep v1 builds under control without it
[01:34:31] <geekosaur> the only place where I've had problems is xmonad which kinda expects to be globally (or at least user) available, but we have solutions there as well
[01:34:55] <geekosaur> and I'm noodling how to extend the automatic stack support in 0.17.0 to cabal v2
[01:39:23] <monochrom> How to gain reversibility depends on why you want reversibility.
[01:40:09] <monochrom> "because I want quantum computing" is very different from "because I want an educational algorithm visualizer that has a bidirectional slider".
[01:41:11] *** Joins: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de)
[01:43:34] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[01:43:34] <monochrom> There is a third one. "because I want to reduce waste heat"
[01:44:52] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:46:38] *** Quits: MoC (~moc@user/moc) (Ping timeout: 260 seconds)
[01:47:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:47:21] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:47:35] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[01:48:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:50:17] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[01:53:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:53:43] *** Joins: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net)
[01:53:53] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[01:55:57] <mjrosenb> monochrom: makes sense.
[01:59:31] *** Joins: notzmv (~zmv@user/notzmv)
[02:01:16] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[02:02:18] *** Joins: deadmarshal (~deadmarsh@95.38.229.126)
[02:06:37] *** Quits: deadmarshal (~deadmarsh@95.38.229.126) (Ping timeout: 240 seconds)
[02:07:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:08:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:08:24] *** Joins: vicfred (~vicfred@user/vicfred)
[02:09:08] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:10:25] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:13:29] <otherwise> LYAH introduces @ without any explanation :(.  map (\l@(x:xs) -> (x,length l)) [[1,1,1,1,1],[2,2],[4],[5],[000]]
[02:14:11] <geekosaur> "as-pattern"
[02:14:42] <geekosaur> the value of the expression matched by pattern on the right is bound by the identifier on the left
[02:15:10] <geekosaur> so in this case you get the whole list as l, in addition to its head and tail as x and xs
[02:16:04] <otherwise> cool! thanks, that is clear
[02:16:36] <hpc> you can pop it into ghci as well
[02:16:49] <hpc> and experiment with it
[02:17:02] <hpc> (probably a good idea on all the other code samples too)
[02:20:26] <otherwise> kind of strange to me why :t @, :doc @ and :def @ all show nothing
[02:21:09] <EvanR> if you want the type of an operator you have to put ( )
[02:21:17] <geekosaur> becuase it has no type
[02:21:17] <EvanR> :t (!!)
[02:21:18] <lambdabot> [a] -> Int -> a
[02:21:22] <otherwise> hpc: that is what I love so much about haskell, is ghc makes experimentation so accessible. :)
[02:21:42] <geekosaur> and is built into the compiler, as opposed to bei8ng defined somewhere that has documentation for :doc
[02:21:45] <mjrosenb> well, ghci
[02:22:05] <otherwise> mjrosenb yes, forgot the i
[02:23:41] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[02:23:47] <hpc> ghc too, with holes
[02:24:17] <monochrom> @ is a reserved word, not an identifier.  :t :doc etc do not known reserved words.  No one has any expectation over ":type if".
[02:25:14] <hpc> i was going to suggest hoogle, but it seems to not give results for syntax anymore :(
[02:25:31] <hpc> you used to be able to hoogle things like "data" or "type" and get a paragraph or two
[02:27:04] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:27:48] <EvanR> have to say I had a hard time reading LYAH back in the day
[02:28:05] <EvanR> like, the information to nonsense ratio was low
[02:28:36] <EvanR> you've been reading it for how many weeks and you just got to @ ?
[02:28:36] <dsal> I find it a bit weird.  I'm still trying to decide how much work I want to put into zippers.  heh
[02:28:45] <dsal> (the chapter on zippers came up in a search)
[02:29:00] <mjrosenb> so far, my experience with haskell-language-server has proved it to be very good at showing me reserved keywords, and not so much at anything else.
[02:29:41] <mjrosenb> zippers are nice to understand, and will be useful every once in a while.  If it is useful, use it, if it isn't don't shoehorn it into a good solution.
[02:29:47] <monochrom> If you just want to learn practical zippers, just having seen the list example and a binary tree example, you can already extrapolate to all practice use cases.
[02:30:31] <monochrom> If you want to dive into the theory, that's a rabbit hole of doing formal differentiation on type expressions >:)
[02:30:39] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[02:30:50] <EvanR> "the zipper design pattern" chapter by gang of λ
[02:30:53] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[02:31:32] *** Quits: hiato (~op_4@user/op-4/x-9116473) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:32:11] *** Joins: op_4 (~op_4@user/op-4/x-9116473)
[02:32:50] <dsal> It's more tedious than I'd like.
[02:34:59] <dsal> In particular, I can't randomly jump between points.
[02:35:22] <EvanR> if it's a static structure, you can put all possible zippers in a map
[02:36:01] <dsal> The problem is that I need to modify a few different parts.
[02:36:10] *** Joins: biberu\ (~biberu@user/biberu)
[02:36:35] <dsal> I started by making an iterator that would do the thing, which was pretty easy, but if I replace a hole, I get a new zipper and can't just replace holes in others and have it do something meaningful.
[02:36:44] <EvanR> then zippering around seems absolutely necessary given how haskell data works
[02:36:57] <EvanR> rather, how it gets modified
[02:37:11] <monochrom> Zipper jumps to adjacent places only, yeah.
[02:37:26] <monochrom> For random access, consider lenses and optics.
[02:37:48] <dsal> The problem is that I want a logically adjacent node in a tree.
[02:38:58] <dsal> When iterating, it's pretty easy because I can just keep recursing down and right and eventually visit everything.  But if I find something interesting and want to find the previous value, I have to go up until I can go left and then go down and right to find the value just to the left.
[02:39:18] <EvanR> find something interesting and the previous value
[02:39:24] <EvanR> screams "zip ap tail"
[02:39:57] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[02:39:57] *** biberu\ is now known as biberu
[02:40:01] * geekosaur wonders about comonad
[02:40:03] <dsal> Yeah, it was easy to do this when I flattened things into a list, but then I can't modify both values.
[02:40:06] <EvanR> that too
[02:40:08] <dsal> (three values in this case)
[02:40:26] <glguy> I did a version of https://adventofcode.com/2021/day/18 with zippers (just on the topic of things to do with them)
[02:40:49] <dsal> glguy: Yeah, that's what reminded me that they existed.  :)  I'm trying to do the thing with a uniplate zipper and it mostly just seems more tedious.
[02:41:15] <dsal> "trying" in this case is mostly a concern of effort and motivation and less on possibility.  It just doesn't seem easier.
[02:41:20] <EvanR> i used a zipper for the guts of a command line text buffer
[02:41:24] <EvanR> worked
[02:41:29] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[02:41:48] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:41:55] <dsal> zipper was super easy for split on day 18, though.
[02:44:09] <glguy> How that aoc is over for the year I've been updating all the past years to use my current aoc library and get more and more haddocks written https://glguy.net/advent/ 
[02:44:54] <dsal> I should do that.  My aoc library has some gross parts I keep reusing that could be a lot better.  I'm still not done with all the years.
[02:45:54] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:56:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:57:36] <dsal> I guess I'm going to stop with this zipper for exploding.  I can't seem to make it not be a lot more code that just numbering.  This is one of those cases where the problem is so small it doesn't really matter. but it's tedious to find the right spot, fix it up, then wander up until I can wander left and then wander down and to the right to find the left thing.  And then from there wander back up twice to get to the next spot.
[02:58:10] <EvanR> just numbering... or wrapping in the relevant exploding data
[02:59:39] <dsal> Numbering was a one-liner.  The splitting was smaller with a zipper than the original thing I did.  That could've also been smaller, but the zipper was really nice there.
[03:00:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[03:00:32] <EvanR> wrapped in the relevant split data, which was a bool
[03:00:46] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:01:12] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[03:02:10] <otherwise> ghci let me do g s@(x:xs) = x:s.    but if I let that be a function in main.hs, it is not allowed. weird...
[03:03:07] <EvanR> that's funny
[03:03:09] <geekosaur> "not allowed" in what way?
[03:04:11] <EvanR> > let g ones@(x:xs) = x:ones in g (1:undefined)
[03:04:12] <lambdabot>  [1,1*Exception: Prelude.undefined
[03:04:19] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:04:45] <EvanR> 🤡
[03:05:50] <otherwise> https://paste.tomsmeding.com/lkQj1j5f
[03:06:25] <EvanR> what else is in that file
[03:06:55] <geekosaur> ^
[03:06:58] *** Joins: Sgeo (~Sgeo@user/sgeo)
[03:07:10] <geekosaur> looks like the real problem is on the line of code immediately before that definition
[03:08:01] <otherwise> i wrote file.hs, but i'm reloading modules.hs
[03:08:19] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 250 seconds)
[03:11:42] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 268 seconds)
[03:12:33] <monochrom> This is why tech support is hard without remote rootkit.
[03:13:37] <otherwise> okay so it did work when I put it into its own file..
[03:14:12] <EvanR> probably messed up indentation or mismatched parentheses
[03:14:19] <EvanR> (earlier in the file)
[03:14:43] <monochrom> http://www.vex.net/~trebla/humour/tautologies.html #4
[03:15:32] *** Joins: xsperry (~xs@user/xsperry)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:37] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:19:32] <otherwise> okay, it as just a missed parentheses, thats embarrassing. Also it means haskell works, so thats good!
[03:19:57] *** Joins: ksqsf (~user@134.209.106.31)
[03:21:26] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:22:53] <EvanR> yeah someone probably would have noticed if correct parentheses gave that error
[03:23:11] <EvanR> (and indentation)
[03:24:09] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[03:26:58] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 260 seconds)
[03:28:03] <otherwise> monochrom: yes, I was the cause to why the code I wrote caused an error. :)
[03:28:36] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[03:28:42] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:9005:8349:e7c7:a7ad)
[03:28:44] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[03:31:37] *** Quits: max22- (~maxime@2a01cb088335980068088847c57fd3ba.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:37:16] <monochrom> Well, it is always important to consider the whole file.
[03:37:43] <monochrom> Equivalently, if other people can't reproduce the error, no one can diagnose it.
[03:39:26] *** Quits: rito_ (~rito_gh@45.112.243.151) (Ping timeout: 268 seconds)
[03:39:46] *** Joins: stef204 (~stef204@user/stef204)
[03:41:06] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[03:41:45] *** dan-so is now known as danso
[03:41:50] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[03:47:28] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[03:49:39] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[03:50:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:52:51] <madjestic> edwardk: do you know a code example, using Capretta's iterative monad? https://hackage.haskell.org/package/free-5.1.7/docs/Control-Monad-Trans-Iter.html#g:2 
[03:55:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:55:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:55:35] *** Joins: wroathe (~wroathe@user/wroathe)
[03:56:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:56:32] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[03:58:57] *** Quits: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[03:59:23] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[04:03:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:04:23] *** Joins: otherwise (~otherwise@2601:602:880:90f0:a9ed:d903:65ec:579d)
[04:10:32] *** Joins: ksqsf (~user@134.209.106.31)
[04:11:02] <edwardk> madjestic: interleaving computations is always a winner
[04:11:33] <edwardk> also running 'divergent' computations with a fixed amount of gas.
[04:11:42] <edwardk> er potentially divergent
[04:15:02] <madjestic> edwardk: that sounds cool.  I noticed that there's a link to a paper on the topic, is that the best source of relevant code examples?
[04:17:38] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[04:22:02] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 240 seconds)
[04:26:57] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Ping timeout: 240 seconds)
[04:27:21] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:30:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:32:11] <ksqsf> just discovered #haskell-in-depth, but it does not appear to have any public logging?
[04:34:16] <geekosaur> only #haskell ever has
[04:34:46] <geekosaur> it could probably be added but it doesn't get used much, was basically copied over from freenode where it also wasn't used much
[04:35:09] <ksqsf> :(
[04:35:18] <geekosaur> it was an attempt to get the category theory / dependent types / etc. folks to leave #haskell alone, which failed
[04:38:15] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[04:38:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[04:38:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:41:54] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[04:42:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:43:13] *** Quits: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:47:02] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[04:47:23] *** Joins: nattiestnate (~nate@114.122.107.61)
[04:47:35] <davean> Oooh, this is where we can talk about Linear Haskell?
[04:47:55] <monochrom> Yeah! :)
[04:48:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:16] <albet70> how to split a list [1..6] to [[1,2], [3,4]...]
[04:48:36] <geekosaur> > chunksOf 2 [1..6]
[04:48:38] <lambdabot>  [[1,2],[3,4],[5,6]]
[04:48:54] <geekosaur> (Data.List/Split in the split package)
[04:49:04] <geekosaur> er. Data.List.Split
[04:51:39] <albet70> thanks
[04:52:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[04:56:06] <dsal> > let chunky n = unfoldr (\b -> if null b then Nothing else let (x,xs) = splitAt n b in Just (x,xs))   in   chunk 2 [1..9]
[04:56:08] <lambdabot>  [[1,2],[3,4],[5,6],[7,8],[9]]
[04:56:30] <dsal> :t chunk
[04:56:31] <lambdabot> Int -> [e] -> [[e]]
[04:56:33] <dsal> ha.  weird
[04:56:42] <dsal> > let chunky n = unfoldr (\b -> if null b then Nothing else let (x,xs) = splitAt n b in Just (x,xs))   in   chunky 2 [1..9]
[04:56:44] <lambdabot>  [[1,2],[3,4],[5,6],[7,8],[9]]
[04:57:47] <dsal> > let chunky n = unfoldr (\b -> if null b then Nothing else Just (splitAt n b))   in   chunky 2 [1..9]
[04:57:48] <lambdabot>  [[1,2],[3,4],[5,6],[7,8],[9]]
[04:59:34] <dsal> That if is not very satisfying.
[04:59:46] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[05:01:15] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[05:01:38] *** Joins: nattiestnate (~nate@114.122.107.61)
[05:03:29] <albet70> > let _ arr = foldl1 (<>) $ (\x -> [x,x]) <$> [1..6] in (chunksOf 2) . init . tail $ _arr
[05:03:31] <lambdabot>  <hint>:1:5: error: Parse error in pattern: _
[05:04:04] <albet70> > let _arr = foldl1 (<>) $ (\x -> [x,x]) <$> [1..6] in (chunksOf 2) . init . tail $ _arr
[05:04:06] <lambdabot>  [[1,2],[2,3],[3,4],[4,5],[5,6]]
[05:05:09] <dsal> > let l = [1..6] in zipWith (\a b -> [a,b]) l (tail l)
[05:05:11] <lambdabot>  [[1,2],[2,3],[3,4],[4,5],[5,6]]
[05:05:30] <dsal> > let l = [1..6] in zip l (tail l)   -- I'd just do this, though.
[05:05:31] <lambdabot>  [(1,2),(2,3),(3,4),(4,5),(5,6)]
[05:07:14] <ksqsf> smth like well-founded recursion will probably be useful
[05:07:21] <ksqsf> chunksOf n = wf_recurse (take n) (drop n)
[05:07:43] <dsal> @hoogle wf_recurse
[05:07:44] <lambdabot> No results found
[05:07:52] <ksqsf> i just made it up
[05:08:04] <dsal> heh.  I assumed, because who'd put a _ in a function name?  :)
[05:08:45] <dsal> The anamorphism that I initially thought of above seems like a good starting point.  That's basically splitAt.
[05:11:31] <dsal> > let  wf_recurse f1 f2  = unfoldr (\b -> if null b then Nothing else Just (f1 b, f2 b)) ;   cwf n = wf_recurse (take n) (drop n)  in cwf 2 [1..6]
[05:11:33] <lambdabot>  [[1,2],[3,4],[5,6]]
[05:12:38] <albet70> zip is better
[05:13:49] <dsal> Sure, zip will do the exact pairings thing, but this is more a series of thought experiments on reusable abstractions.  :)
[05:16:02] <albet70> zip l (tail l) could express by <=< ?
[05:16:15] <albet70> :t (<=<)
[05:16:16] <lambdabot> Monad m => (b -> m c) -> (a -> m b) -> a -> m c
[05:17:15] <albet70> or >>=
[05:20:31] <dsal> > let l = [1..6]   in   [(a,b) | (a:xs) <- l, b <- xs] 
[05:20:32] <lambdabot>  error:
[05:20:32] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_116’
[05:20:32] <lambdabot>      • In the expression: e_116
[05:20:35] <dsal> doh.
[05:20:46] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[05:21:27] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[05:21:50] <dsal> That requires listing the list elements.
[05:22:50] <albet70> (tail >>= zip) l == zip (tail l) l, how to change it to zip l (tail l)? flip (tail >>= zip) l?
[05:23:01] *** Joins: ksqsf (~user@134.209.106.31)
[05:24:23] <pfurla-matrix> `(a:xs) <- l` is the same as `(a:xs) <- [1..6]`, do you see the problem here?
[05:24:34] <otherwise> is it possible to collapse comment blocks in .hs file? by this I mean, make them expandable and collapsable (like in Matlab) ?
[05:24:57] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 240 seconds)
[05:25:21] <pfurla-matrix> otherwise: this on the editor not the language
[05:25:28] <otherwise> im using vim, so maybe that would be a feature in vim, rather than haskell specific?
[05:26:04] <pfurla-matrix> yep
[05:26:05] <otherwise> pfurla-matrix: aww, you beat me to it. yeah that makes sense.
[05:26:17] <albet70> f >>= g = \a -> g (f a) a, is there a function do \a -> g a (f a)?
[05:32:52] <ksqsf> :t (<*>) @((->) _)
[05:32:53] <lambdabot> error: parse error on input ‘->’
[05:34:26] <dsal> @pl \a -> g a (f a)
[05:34:27] <lambdabot> ap g f
[05:34:37] <ksqsf> but it should parse though :(
[05:34:58] <ksqsf> this is the S combinator from SKI, and it corresponds to Applicative's (<*>)
[05:35:02] <otherwise> if you had to decide what the math prerequisites are for learning haskell, what would be your decree?
[05:35:20] <dsal> otherwise: I can barely add
[05:35:46] <dsal> :t ap
[05:35:47] <lambdabot> Monad m => m (a -> b) -> m a -> m b
[05:35:53] <otherwise> dsal says addition, fair enough.
[05:35:59] <dsal> :t (<@>)
[05:36:00] <lambdabot> error:
[05:36:00] <lambdabot>     • Variable not in scope: <@>
[05:36:00] <lambdabot>     • Perhaps you meant one of these:
[05:36:08] <monochrom> otherwise: My http://www.vex.net/~trebla/haskell/prerequisite.xhtml
[05:36:12] <dsal> Argh.  Phone coding is hard
[05:36:28] <monochrom> "You can barely type." >:)
[05:36:36] <dsal> :t (<$>)
[05:36:37] <lambdabot> Functor f => (a -> b) -> f a -> f b
[05:36:43] <dsal> monochrom: ++
[05:39:36] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[05:41:32] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[05:43:32] *** Quits: mmhat (~mmh@55d4c35d.access.ecotel.net) (Ping timeout: 240 seconds)
[05:44:29] <albet70> dsl, what is ap? applicative?
[05:45:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:47:05] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:51:06] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi) (Quit: Leaving.)
[05:52:31] <otherwise> > rand(1)
[05:52:32] <lambdabot>  error:
[05:52:32] <lambdabot>      • Variable not in scope: rand :: t0 -> t
[05:52:32] <lambdabot>      • Perhaps you meant ‘and’ (imported from Data.List)
[05:55:49] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[05:56:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 240 seconds)
[05:57:11] *** Joins: mmhat (~mmh@55d4bdde.access.ecotel.net)
[06:07:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[06:09:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:16:57] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[06:17:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:17:18] *** Quits: xff0x (~xff0x@2001:1a81:5206:b200:83f6:7a30:b822:7720) (Ping timeout: 268 seconds)
[06:17:45] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:18:06] *** Joins: nattiestnate (~nate@114.122.107.61)
[06:18:38] *** Joins: jinsun (~quassel@user/jinsun)
[06:18:46] *** Joins: xff0x (~xff0x@2001:1a81:5243:1200:5225:5648:394c:3e8f)
[06:25:41] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[06:25:47] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[06:28:02] <dsal> albet70: It's related, but the constraint is Monad
[06:28:50] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[06:30:22] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 260 seconds)
[06:31:04] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[06:31:29] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[06:31:55] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[06:34:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:36:17] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 240 seconds)
[06:39:45] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[06:44:22] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[06:50:59] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[06:51:34] *** Quits: mmhat (~mmh@55d4bdde.access.ecotel.net) (Quit: WeeChat 3.4)
[06:51:39] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:53:00] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:53:09] *** Quits: nattiestnate (~nate@114.122.107.61) (Quit: WeeChat 3.4)
[06:55:06] *** Joins: nattiestnate (~nate@114.122.104.173)
[06:56:01] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[06:57:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:01:17] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 240 seconds)
[07:02:08] <albet70> dsal, ap is related to >>=?
[07:02:12] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:02:12] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:02:12] *** finn_elija is now known as FinnElija
[07:02:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:03:22] *** Joins: ksqsf (~user@134.209.106.31)
[07:06:43] *** Joins: mbuf (~Shakthi@27.58.131.180)
[07:08:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:13:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[07:14:44] *** Joins: zebrag (~chris@user/zebrag)
[07:15:39] <dsal> albet70: ap is <*> with different constraints.
[07:17:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[07:17:15] *** Joins: ksqsf (~user@134.209.106.31)
[07:19:19] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[07:21:02] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[07:22:40] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[07:26:20] <albet70> dsal, ap g f = \a -> g a (f a), f >>= g = \a -> g (f a) a, how similar
[07:27:15] *** Quits: td_ (~td@muedsl-82-207-238-177.citykom.de) (Ping timeout: 256 seconds)
[07:27:40] <albet70> g a (f a) = flip g (f a) a
[07:28:01] *** Joins: jinsun (~quassel@user/jinsun)
[07:28:37] <albet70> wonder if >>= can be expressed with ap
[07:28:50] *** Joins: td_ (~td@muedsl-82-207-238-009.citykom.de)
[07:29:54] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[07:30:27] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[07:31:18] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:33:53] *** Quits: nattiestnate (~nate@114.122.104.173) (Quit: WeeChat 3.4)
[07:38:42] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[07:39:13] *** Joins: ksqsf (~user@134.209.106.31)
[07:42:15] <dsal> albet70: monadic binding is more restrictive than applicative applicatating.
[07:44:52] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[07:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:48:41] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 250 seconds)
[07:55:33] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:56:27] *** Joins: ksqsf (~user@134.209.106.31)
[07:58:05] *** Joins: kotshie (~kotshie@68.72.208.140)
[07:59:26] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[07:59:51] *** Joins: ksqsf (~user@134.209.106.31)
[07:59:57] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 240 seconds)
[08:02:14] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[08:08:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:09:33] <mjrosenb> what's the relationship between haskell-language-server and ghcide?
[08:10:11] *** Quits: hud (~hud@uwyo-129-72-161-67.uwyo.edu) (Ping timeout: 256 seconds)
[08:10:45] <mjrosenb> I'm asking in the context of bugs on hls discussing if something should go into ghcide or hls.
[08:17:35] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[08:22:30] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[08:27:38] *** Joins: dolio (~dolio@130.44.130.54)
[08:30:17] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:30:22] *** Joins: machinedgod (~machinedg@24.105.81.50)
[08:31:14] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[08:33:06] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[08:34:27] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[08:35:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:43:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[08:45:54] *** Joins: spaceseller (~spacesell@31.147.205.13)
[08:46:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:53:35] <otherwise> can we make type declarations in prelude?
[08:55:40] <dsal> otherwise: sure, but things are going to get painful
[08:56:06] <dsal> (although… what do you mean by "prelude" here?")
[08:56:14] <dsal> Do you mean you want to modify Prelude?
[08:56:29] <otherwise> as in, with no .hs file loaded
[08:56:35] <dsal> You  mean ghci?
[08:57:15] <otherwise> yes, in ghci
[08:57:38] <dsal> I assumed that's what you meant.  You can do it, but you really shouldn't.  Just do things in files.  If you try to do things in ghci, it starts getting painful really quickly.
[08:57:40] <otherwise> I'm thinking "what else is there?", cause i'm a noob
[08:58:38] <dsal> ghci is just the interactive environment for messing around.  It works similarly to what you might expect from a real program, but it's not the same, and it's not how you write useful programs.
[08:59:23] <otherwise> isnt ghci also what runs the real program? as in, the .hs file
[09:00:51] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 250 seconds)
[09:01:00] <dsal> No, none of my programs run using ghci.
[09:01:41] <dsal> A .hs file just defines a module.  A program may consist of many modules which are compiled and tied together with a Main module which has a main function where execution begins.
[09:02:53] <otherwise> ... so do you execute you programs directly in terminal?
[09:02:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:9005:8349:e7c7:a7ad) (Ping timeout: 240 seconds)
[09:03:14] <monochrom> Are you asking the equivalent of: If you are learning C, you ask "can I modify my copy of /usr/include/stdio.h to add my own declarations so that every time I #include <stdio.h> I get my own additional declarations too so that I don't have to create my own .h file in my own directory and add a 2nd #include for it"
[09:03:57] <monochrom> The answer would be "it's your computer, but why such a fragile method" in the case of C.
[09:04:29] <monochrom> In the case of GHC, not easily.
[09:05:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:01] <otherwise> Hmm, I didn't really understand that to be honest.  i figured since :t it shows the last value, there must be a similar memory bank in ghci that I can update with a type declaration for the sole purpose of practicing writing type declarartions.
[09:07:20] <otherwise> But it is easy enough to just make a new .hs file and mess around that way. 
[09:07:43] <monochrom> You can enter "data F = G1 | G2 Int" into ghci.
[09:07:57] <monochrom> That is still not adding to Prelude.
[09:08:03] <monochrom> What an XY problem.
[09:08:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[09:08:17] <otherwise> I'm afraid to based on dsals warning. haha
[09:08:42] <monochrom> Oh, I don't like to suggest it either. It doesn't scale.
[09:09:57] <otherwise> although data f = ... doesnt look like a type declaration that I recognize. I would have expected it to be data f :: ...
[09:10:02] *** Quits: xff0x (~xff0x@2001:1a81:5243:1200:5225:5648:394c:3e8f) (Ping timeout: 240 seconds)
[09:10:57] *** Joins: xff0x (~xff0x@2001:1a81:5243:1200:1c6b:9a74:5f29:30c0)
[09:11:42] <otherwise> i'm abandoning that idea for now. haha. There are better things to work on than that
[09:13:01] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[09:14:41] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[09:16:15] *** Joins: deadmarshal (~deadmarsh@95.38.229.126)
[09:19:13] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[09:19:23] <dsal> otherwise: You just want to do it in a file.  Same as other language with repls.  You can do a lot of stuff in a python repl, but you don't run your program in a python repl.
[09:20:53] <dsal> But when you actually want to run a program, you'll compile it and have a normal binary like any other compiled language.
[09:21:53] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[09:25:00] *** Quits: xff0x (~xff0x@2001:1a81:5243:1200:1c6b:9a74:5f29:30c0) (Ping timeout: 240 seconds)
[09:25:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:25:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:25:24] *** Joins: wroathe (~wroathe@user/wroathe)
[09:26:09] *** Joins: xff0x (~xff0x@2001:1a81:5243:1200:5779:89a5:a3f8:38a5)
[09:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:32:27] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[09:35:29] *** Joins: alfonsox (~quassel@103.92.42.90)
[09:38:11] <otherwise> weird, I just did ghc file.hs. then ./file  to run the executable, but I wasnt able to interact with it at all, it just printed a single line of text and I couldn't call any of the functions.
[09:38:43] <dsal> otherwise: What did you write your program to do?
[09:38:46] <dsal> Did you write a repl? 
[09:38:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:40:29] <otherwise> https://paste.tomsmeding.com/ZDhJxIVt
[09:40:41] <otherwise> just a print line and a quicksort function
[09:40:49] <dsal> > putStrLn "Hello World"
[09:40:50] <lambdabot>  <IO ()>
[09:40:55] <dsal> % putStrLn "Hello World"
[09:40:56] <yahb> dsal: Hello World
[09:41:02] <dsal> That's all your program is instructed to do.
[09:41:17] <dsal> It's not going to do things you don't tell it to do.  :)
[09:41:53] <otherwise> Why doesn't it know what I want!
[09:41:57] <otherwise> j/k
[09:42:12] <dsal> If you want to write a repl for something, that's a harder problem.
[09:42:21] <dsal> Even ghci doesn't work correctly on my machine right now.  :)
[09:48:42] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 260 seconds)
[10:01:33] <ksqsf> otherwise: It's much easier to use ghci in a properly configured editor. Like in Emacs, you can open a .hs file anywhere and press C-c C-l to start a ghci session.
[10:01:36] *** Joins: KvL (~KvL@user/KvL)
[10:02:07] <otherwise> well, I tried to use emacs, yesterday, but now it is perpetually frozen open
[10:02:17] <otherwise> so my first impressions of emacs are not good
[10:02:23] *** Quits: stef204 (~stef204@user/stef204) (Ping timeout: 268 seconds)
[10:02:40] <otherwise> I homebrew installed it, opened it, and then it was frozen
[10:03:50] <otherwise> ksqsf: despite my complaining, I'll certainly give a try what you explained, that sounds useful.
[10:04:28] *** Joins: notzmv (~zmv@user/notzmv)
[10:05:10] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:05:32] <otherwise> for now I have Emacs minimized and I act like its not there, frozen...
[10:09:41] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[10:12:25] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[10:17:12] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[10:19:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:22:07] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[10:24:47] <mjrosenb> otherwise: I've found graphical emacs on MacOS to be a bit fiddly.
[10:24:57] <mjrosenb> otherwise: it works great in the terminal though.
[10:25:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:25:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[10:28:21] <otherwise> oh I didnt know I could load in terminal. thanks! :)
[10:30:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[10:32:22] <mjrosenb> emacs -nw will open it in the terminal.
[10:32:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[10:32:28] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[10:32:58] *** Joins: burnsidesLlama (~burnsides@client-8-79.eduroam.oxuni.org.uk)
[10:34:44] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:36:26] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[10:37:32] *** Quits: burnsidesLlama (~burnsides@client-8-79.eduroam.oxuni.org.uk) (Ping timeout: 268 seconds)
[10:41:37] <otherwise> mjrosenb: it works! :)
[10:41:53] <mjrosenb> Is there a way to "tweak" the show instance auto-generated by deriving Show?  I have a datatype with like 20 cases, 19 of which I want the default, and the other one, I need some custom logic.
[10:42:47] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:75de:a4d8:aac6:c5de)
[10:46:45] <cheater> deriving via?
[10:52:21] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 268 seconds)
[10:53:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:54:00] * mjrosenb investigates deriving via
[10:54:36] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[11:01:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[11:05:42] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 260 seconds)
[11:07:31] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[11:09:30] *** Joins: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[11:14:09] <alfonsox> what is correct way to load read say first 10 lines from txt file in ghci ?
[11:14:32] <alfonsox> im <- readFile "hello.txt"
[11:14:38] <alfonsox> above line works
[11:14:55] <xerox> :t \filename -> take 10 . lines <$> readFile filename
[11:14:56] <alfonsox>  take 10 $ lines im
[11:14:57] <lambdabot> FilePath -> IO [String]
[11:15:00] <alfonsox> this also works
[11:15:40] <alfonsox> but the moment I try to assign it to some var using let, I get error.
[11:15:58] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:16:16] <alfonsox> let ilines =  take 10 $ lines im
[11:16:21] <alfonsox> then I get parse error
[11:17:05] <xerox> alfonsox: something like this? https://pastebin.com/raw/wHZSYdVB
[11:19:28] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[11:19:52] *** Joins: alan[m]1 (~alangmatr@2001:470:69fc:105::b489)
[11:20:48] <alfonsox> thanks. that works. 
[11:23:54] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:24:03] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[11:24:50] <xerox> wonder what was going wrong for you, I did the same thing you said
[11:26:12] *** Joins: amk (~amk@109.255.169.126)
[11:26:54] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:28:29] <alfonsox> running ghci in emacs
[11:28:42] <alfonsox> was not working first time
[11:29:29] *** Joins: paolino (~paolo@5.157.115.53)
[11:30:17] *** Quits: paolino (~paolo@5.157.115.53) (Client Quit)
[11:32:12] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:32:20] *** alan[m]1 is now known as grabb0id[m]
[11:32:43] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 250 seconds)
[11:35:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:37:29] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[11:39:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[11:42:04] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[11:57:05] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:57:17] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Ping timeout: 240 seconds)
[11:57:22] <albet70> f >>= g = \a -> g (f a) a, is there \a -> g a (f a)
[11:59:52] *** Joins: ksqsf (~user@134.209.106.31)
[12:00:05] <albet70> ap f g = \a -> f a (g a), is there \a -> f (g a) a?
[12:01:13] <ksqsf> @pl \a -> f (g a) a
[12:01:13] <lambdabot> f =<< g
[12:02:22] <albet70> @pl \a -> g a (f a)
[12:02:22] <lambdabot> ap g f
[12:02:24] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[12:02:37] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:09:25] <dibblego> f <*> g
[12:09:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:10:00] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[12:13:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:13:40] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[12:13:51] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:19:38] *** Joins: nhatanh02 (~satori@123.24.172.30)
[12:25:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:26:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:26:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:26:29] *** Joins: wroathe (~wroathe@user/wroathe)
[12:30:53] *** Joins: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de)
[12:31:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:32:10] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[12:32:27] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[12:32:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:33:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:38:55] *** Quits: vglfr (~vglfr@46.96.129.172) (Ping timeout: 256 seconds)
[12:44:35] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[12:44:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:47:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:45] *** allbery_b is now known as geekosaur
[12:49:11] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[12:53:17] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[12:55:11] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:55:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:58:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[12:59:41] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:00:27] *** Quits: deadmarshal (~deadmarsh@95.38.229.126) (Ping timeout: 256 seconds)
[13:00:40] *** Quits: SoF (~skius@user/skius) (Remote host closed the connection)
[13:00:50] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:00:53] *** Joins: deadmarshal (~deadmarsh@95.38.116.44)
[13:11:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[13:15:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:16:36] *** Joins: max22- (~maxime@2a01cb08833598005a91b2768a285f6e.ipv6.abo.wanadoo.fr)
[13:19:19] *** Joins: spaceseller (~spacesell@31.147.205.13)
[13:19:24] *** Quits: spaceseller (~spacesell@31.147.205.13) (Remote host closed the connection)
[13:19:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[13:20:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:25:43] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[13:26:51] *** Joins: MoC (~moc@user/moc)
[13:30:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:30:53] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[13:33:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:36:57] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 240 seconds)
[13:37:44] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:39:08] *** Joins: joo-_ (~joo-_@80-62-117-1-mobile.dk.customer.tdc.net)
[13:39:08] *** Quits: joo-_ (~joo-_@80-62-117-1-mobile.dk.customer.tdc.net) (Changing host)
[13:39:08] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[13:41:41] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[13:48:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[13:49:13] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 250 seconds)
[13:55:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:56:32] *** Joins: cfricke (~cfricke@user/cfricke)
[13:56:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:56:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[13:57:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:50] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 260 seconds)
[13:59:13] *** Joins: nhatanh02 (~satori@123.24.172.30)
[14:05:36] *** Joins: __monty__ (~toonn@user/toonn)
[14:08:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:13:46] *** Joins: rito_ (~rito_gh@45.112.243.151)
[14:13:52] *** Quits: otherwise (~otherwise@2601:602:880:90f0:a9ed:d903:65ec:579d) ()
[14:15:58] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[14:16:06] *** Joins: cstml (~cstml@2a02:a58:8561:af00:11b5:cd98:e383:e8bd)
[14:17:12] *** Quits: cstml (~cstml@2a02:a58:8561:af00:11b5:cd98:e383:e8bd) (Client Quit)
[14:18:09] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[14:20:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:21:15] *** Joins: coolnickname (uid531864@user/coolnickname)
[14:23:15] *** Joins: jinsun (~quassel@user/jinsun)
[14:25:40] *** Joins: cstml (~cstml@2a02:a58:8561:af00:11b5:cd98:e383:e8bd)
[14:27:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:27:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:27:16] *** Joins: wroathe (~wroathe@user/wroathe)
[14:31:12] *** Quits: cstml (~cstml@2a02:a58:8561:af00:11b5:cd98:e383:e8bd) (Quit: WeeChat 2.9)
[14:31:32] *** Quits: foul_owl (~kerry@212.102.47.57) (Ping timeout: 252 seconds)
[14:32:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:32:44] *** Joins: otherwise (~otherwise@2601:602:880:90f0:a9ed:d903:65ec:579d)
[14:33:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:34:34] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi)
[14:35:49] *** Quits: otherwise (~otherwise@2601:602:880:90f0:a9ed:d903:65ec:579d) (Client Quit)
[14:38:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:38:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[14:39:46] *** Joins: SoF (~skius@user/skius)
[14:48:36] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:52:34] *** Joins: arjun (~arjun@user/arjun)
[14:53:58] <arjun> is there a prefered library to make http(s) requests? i see a bunch on hackage
[14:57:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:58:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:58:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:58:04] *** Joins: wroathe (~wroathe@user/wroathe)
[15:01:39] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[15:02:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:03:50] *** Joins: vglfr (~vglfr@88.155.24.19)
[15:05:30] *** Joins: foul_owl (~kerry@212.102.47.57)
[15:06:15] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:07:39] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:07:53] *** Quits: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:09:08] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:10:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:10:43] *** Quits: vglfr (~vglfr@88.155.24.19) (Ping timeout: 268 seconds)
[15:11:31] *** Joins: vglfr (~vglfr@88.155.24.19)
[15:11:49] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:13:59] <Taneb> arjun: probably http-client/http-client-tls
[15:14:19] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Max SendQ exceeded)
[15:16:06] <arjun> i see, thx Taneb 
[15:16:58] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[15:18:40] *** Joins: fef (~thedawn@user/thedawn)
[15:19:02] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[15:19:37] *** Joins: jco (~jco@90-228-194-139-no542.tbcn.telia.com)
[15:22:32] <maerwald[m]> arjun: https://hackage.haskell.org/package/http-client-openssl
[15:22:44] <maerwald[m]> I'd not use http-client-tls
[15:23:17] <maerwald[m]> haskell tls is not audited and there's not enough research whether it's even an appropriate language for that
[15:23:53] *** Quits: syrkis (~syrkis@82.192.167.70) (Quit: Client closed)
[15:24:00] <jco> Hello, trying to learn some basics about GADTs, and I'm running into a problem when trying to add a type class constraint. It works when adding a type class constraint like `(Eq a =>)` or `(Show a =>)`, but when trying to use my own type class, it gives a compilation error that I don't really understand. Gist here: https://gist.github.com/joncol/50461ec618fe1fb7b7245c5d7869e3ed
[15:28:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:28:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:28:52] *** Joins: wroathe (~wroathe@user/wroathe)
[15:31:05] <jco> Oh, it seems to be related to my `(a :: Subject)` restriction in the type class itself... Interesting.
[15:32:07] *** Joins: mmhat (~mmh@55d4bdde.access.ecotel.net)
[15:32:07] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:32:35] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[15:33:10] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[15:33:36] *** Joins: biberu\ (~biberu@user/biberu)
[15:33:37] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[15:33:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[15:33:40] *** Joins: Jing (~hedgehog@125.105.9.103)
[15:34:13] *** Joins: Vajb (~Vajb@2001:999:62:e042:be01:afcc:85c5:1e46)
[15:34:33] *** biberu\ is now known as biberu
[15:34:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[15:35:04] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7898:e7cb:a448:daff)
[15:35:29] *** Quits: Jing (~hedgehog@125.105.9.103) (Client Quit)
[15:35:50] *** Quits: forell (~forell@user/forell) (Quit: ZNC - https://znc.in)
[15:36:11] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Client Quit)
[15:36:45] *** Joins: forell (~forell@user/forell)
[15:38:51] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:41:30] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[15:43:10] *** Quits: phma (phma@2001:5b0:211c:1148:bf01:ab8f:863f:c9a8) (Read error: Connection reset by peer)
[15:44:37] *** Joins: phma (~phma@2001:5b0:211f:d0f8:a0d5:904f:4002:7904)
[15:45:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:49:00] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[15:50:54] *** Joins: tv1 (~tv@user/tv)
[15:51:01] *** Quits: tv (~tv@user/tv) (Ping timeout: 256 seconds)
[15:54:36] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[15:55:02] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 260 seconds)
[15:59:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:59:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:59:39] *** Joins: wroathe (~wroathe@user/wroathe)
[16:00:08] *** Joins: Rum (~bourbon@user/rum)
[16:00:52] *** Joins: cfricke (~cfricke@user/cfricke)
[16:01:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:04:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[16:04:59] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[16:08:20] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[16:11:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[16:14:40] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:19:35] *** Quits: max22- (~maxime@2a01cb08833598005a91b2768a285f6e.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:19:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:21:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:23:21] *** Joins: hololeap (~hololeap@user/hololeap)
[16:35:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:36:27] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:37:20] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[16:39:32] *** Joins: ubert (~Thunderbi@p200300ecdf099447b83e75261410a8dd.dip0.t-ipconnect.de)
[16:39:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[16:40:53] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[16:41:21] *** Joins: spaceseller (~spacesell@31.147.205.13)
[16:41:22] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[16:42:50] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:46:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:46:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:46:31] *** Joins: wroathe (~wroathe@user/wroathe)
[16:51:01] *** Joins: nhatanh02 (~satori@123.24.172.30)
[16:51:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[16:55:43] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[16:58:01] *** Quits: tv1 (~tv@user/tv) (Quit: derp)
[16:58:15] *** Joins: tv (~tv@user/tv)
[17:00:27] <albet70> what Reader Applicative is used for? like fmap is function compose about Reader, what <*> mean?
[17:05:11] <int-e> Hmm, it's the S combinator.
[17:06:42] <int-e> > ((-) <$> (`div` 100) <*> (`mod` 100)) 4223
[17:06:43] <lambdabot>  19
[17:07:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:09:12] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[17:09:33] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[17:11:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:12:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[17:12:32] *** Quits: ubert (~Thunderbi@p200300ecdf099447b83e75261410a8dd.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:13:17] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:15:08] *** Joins: stef204 (~stef204@user/stef204)
[17:16:28] <jco> > ((\x y -> x + y) <*> (\x -> x*10)) 100
[17:16:29] <lambdabot>  1100
[17:17:23] <jco> S combinator = fusion function that reduces the number of occurrences of a variable from several to a single one: S f g x = (f x) (g x)
[17:18:37] *** Quits: tv (~tv@user/tv) (Ping timeout: 240 seconds)
[17:20:14] <geekosaur> not that I'd say it's used often
[17:20:30] <geekosaur> sometimes a type or typeclass instance is just a stepping stone to something else
[17:20:57] <geekosaur> the Reader Monad is widely used, but you have to define the Applicative to get there
[17:22:25] *** Joins: max22- (~maxime@2a01cb0883359800fee411993e60211d.ipv6.abo.wanadoo.fr)
[17:24:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:26:01] *** Joins: tv (~tv@user/tv)
[17:28:42] *** Joins: alx741 (~alx741@157.100.93.160)
[17:33:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:33:23] *** Joins: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net)
[17:33:54] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:35:45] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[17:36:08] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:36:21] *** Joins: fef (~thedawn@user/thedawn)
[17:38:43] *** Quits: yauhsien (~yauhsien@118-167-42-25.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:39:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:43:09] <alfonsox> any one using this setting in emacs > -- To disable popups, customize `haskell-interactive-popup-errors' ?
[17:43:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:44:00] <alfonsox> new buffer opens up in emacs when there is error in emacs ghci shell
[17:44:18] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:50:23] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[17:51:14] *** Joins: alx741 (~alx741@157.100.93.160)
[17:56:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:57:15] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:00:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 240 seconds)
[18:00:42] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:02:01] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[18:02:44] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:03:45] *** Joins: ksqsf (~user@134.209.106.31)
[18:06:34] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:13:32] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[18:13:44] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:14:21] *** Quits: mmhat (~mmh@55d4bdde.access.ecotel.net) (Quit: WeeChat 3.4)
[18:14:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:14:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:14:25] *** Joins: wroathe (~wroathe@user/wroathe)
[18:14:47] *** Joins: mmhat (~mmh@55d4bdde.access.ecotel.net)
[18:14:54] *** Joins: alx741 (~alx741@157.100.93.160)
[18:15:41] *** Quits: mmhat (~mmh@55d4bdde.access.ecotel.net) (Client Quit)
[18:16:00] *** Joins: mmhat (~mmh@55d4bdde.access.ecotel.net)
[18:16:12] *** Quits: mmhat (~mmh@55d4bdde.access.ecotel.net) (Client Quit)
[18:16:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:16:43] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[18:17:37] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 240 seconds)
[18:19:11] *** Quits: max22- (~maxime@2a01cb0883359800fee411993e60211d.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[18:23:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:23:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:23:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:24:08] <tomsmeding> jco: in your example, what's going wrong is that the constraint 'MathOrEnglish a' means that the kind of 'a' is 'Subject', but you're also taking an argument of type 'a' -- which means that 'a' has kind 'Type'. Type is not Subject, hence kind error.
[18:24:28] <tomsmeding> in other words, if 'a' is MathOrEnglish, then the type 'a' doesn't have any values!
[18:26:26] <tomsmeding> even without the argument of type 'a', it still won't work if you don't remove the existing Student constructor, since the kind of the type variable 'a' of 'User' is not polymorphic: it's either Type or Subject, and then two constructors let ghc infer two different kinds. Writing 'data User (a :: k) where' fixes that, because now 'a' is poly-kinded!
[18:32:31] <albet70> "jco :S combinator = fusion function that reduces the number of occurrences of a variable from several to a single one: S f g x = (f x) (g x)", S f g = \x -> f x (g x)
[18:32:51] <tomsmeding> same thing, different notation :)
[18:32:59] *** Joins: Kaiepi (~Kaiepi@216.208.243.198)
[18:33:23] <tomsmeding> @pl \f g x -> f x (g x)
[18:33:23] <lambdabot> ap
[18:34:20] <albet70> so ap is <*> like (.) is <$>?
[18:34:21] <int-e> @pl heralds from the monadic age
[18:34:41] <int-e> so it knows about `ap` but not `<*>` ;)
[18:35:19] <int-e> ap = <*> should hold for law-abiding Monad instances
[18:36:11] <albet70> @pl \x -> f (g x) x
[18:36:11] <lambdabot> f =<< g
[18:38:00] <tomsmeding> albet70: ap = <*> is actually true for law-abiding Monad/Applicative instances as int-e says; (.) is the implementation of (<$>) = fmap for the reader monad (r ->)
[18:38:12] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:41:31] *** Joins: alx741 (~alx741@157.100.93.160)
[18:42:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[18:43:03] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:45:43] <albet70> 42 - (42 +1) == (-) <*> (+1) $ 42
[18:46:16] <albet70> (42 +1) - 42 == (+1) >>= (-) $ 42
[18:46:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:46:47] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:46:57] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[18:47:17] <xerox> . being an fmap is also the basis for lens
[18:47:38] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:48:18] *** Joins: max22- (~maxime@2a01cb0883359800f9d8f30ac05a4f67.ipv6.abo.wanadoo.fr)
[18:49:37] *** Quits: jco (~jco@90-228-194-139-no542.tbcn.telia.com) (Ping timeout: 240 seconds)
[18:49:49] <tomsmeding> :t fmap fmap fmap
[18:49:51] <lambdabot> (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
[18:49:51] *** Joins: xsperry (~xs@user/xsperry)
[18:50:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:51:14] *** shapr` is now known as shapr
[18:52:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:52:47] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 252 seconds)
[18:56:40] <albet70> (42 + 21) - 21 == ((+) >=> (-)) 42 $ 21
[18:56:53] <albet70> this seems pointless...
[19:02:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:05:11] *** Joins: alx741 (~alx741@157.100.93.160)
[19:05:32] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[19:05:56] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:07:12] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:51] <albet70> what's wrong with (-) <*> ((-2) <$> (+1)) $ 42?
[19:09:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:10:10] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[19:13:27] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[19:16:37] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:18:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:19:53] <albet70> oh flip
[19:22:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:22:42] *** Joins: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de)
[19:24:59] <tomsmeding> albet70: the point is not that this is more readable than the direct alternative, but that the reader monad is useful and induces (<*>) = ap :p
[19:26:21] *** Joins: alx741 (~alx741@157.100.93.160)
[19:26:55] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[19:27:31] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:27:49] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:31:03] <albet70> ok
[19:34:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[19:36:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:36:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:36:04] *** Joins: wroathe (~wroathe@user/wroathe)
[19:36:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:39:09] *** Joins: ksqsf (~user@134.209.106.31)
[19:39:51] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:40:50] *** Joins: nschoe (~quassel@178.251.84.79)
[19:40:58] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[19:41:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:41:32] *** Joins: zebrag (~chris@user/zebrag)
[19:41:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:41:44] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:41:44] *** Joins: wroathe (~wroathe@user/wroathe)
[19:45:03] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[19:46:59] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[19:47:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:50:40] *** Joins: gdd (~gdd@129.199.146.230)
[19:53:54] *** Joins: alx741 (~alx741@157.100.93.160)
[19:57:23] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[19:58:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:59:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:03:01] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:11:22] *** Joins: jco (~jco@90-228-194-139-no542.tbcn.telia.com)
[20:12:56] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:13:07] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:15:03] *** Joins: alx741 (~alx741@157.100.93.160)
[20:17:57] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[20:18:21] *** Joins: ksqsf (~user@134.209.106.31)
[20:19:41] *** Quits: vglfr (~vglfr@88.155.24.19) (Ping timeout: 252 seconds)
[20:19:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:20:10] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[20:20:13] *** Joins: vglfr (~vglfr@88.155.24.19)
[20:20:29] *** Joins: kmein (~weechat@user/kmein)
[20:21:12] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:21:34] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:21:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:22:09] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[20:23:29] *** Joins: Morrow (~quassel@5.28.131.86)
[20:23:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80) (Ping timeout: 250 seconds)
[20:24:06] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 245 seconds)
[20:24:53] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[20:25:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:25:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[20:26:30] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[20:27:16] *** Joins: euandreh (~euandreh@191.181.59.160)
[20:28:18] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[20:31:57] *** Joins: zebrag (~chris@user/zebrag)
[20:34:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[20:36:32] *** Quits: Vajb (~Vajb@2001:999:62:e042:be01:afcc:85c5:1e46) (Ping timeout: 240 seconds)
[20:37:00] *** Joins: Vajb (~Vajb@nabiicwveotvxswi5-2.v6.elisa-mobile.fi)
[20:43:24] *** Joins: spaceseller (~spacesell@31.147.205.13)
[20:43:30] *** Joins: alx741 (~alx741@157.100.93.160)
[20:44:00] *** Quits: alfonsox (~quassel@103.92.42.90) (Remote host closed the connection)
[20:46:09] *** Joins: Akiva (~Akiva@user/Akiva)
[20:46:45] <glguy> For anyone who did AoC 2021 day 22 (the one with commands that turned on/off cuboids of lights) I think I've got a solution that breaks it down into pretty simple steps: https://glguy.net/advent/sln_2021_22/Main.html (I've just been hammering on this one and I'm pretty happy with where it's gotten to)
[20:46:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:48:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:48:16] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[20:51:19] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:53:40] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[20:58:00] <int-e> glguy: Hmm, how hard would it be to modify that to produce at most 2 extra pieces per dimension when cutting boxes? (after splitting in one dimension, only one of the resulting parts will overlap with the `overlap`)
[20:59:14] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:59:27] <int-e> (not really hard, but I think it doesn't quite fit the `traverseBox2` abstraction)
[21:00:25] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 256 seconds)
[21:00:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:01:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:02:37] <g>  I'll have to think about it, maybe I can treat the first dimension specially
[21:04:06] <lechner> Thanks to whomever worked on the UTF-8 implementation of Data::Text! I'm sure it was a tough thing to do.   https://discourse.haskell.org/t/text-2-0-with-utf8-is-finally-released/3840
[21:06:01] *** Joins: alx741 (~alx741@157.100.93.160)
[21:06:09] <g> int-e: it runs in 70ms so I haven't tried any optimizations yet
[21:07:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:08:27] *** Joins: ksqsf (~user@134.209.106.31)
[21:12:09] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:12:38] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:14:01] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[21:14:49] *** Joins: ksqsf (~user@134.209.106.31)
[21:15:16] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[21:15:34] *** Joins: kmein (~weechat@user/kmein)
[21:15:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:18:17] *** Quits: xff0x (~xff0x@2001:1a81:5243:1200:5779:89a5:a3f8:38a5) (Ping timeout: 240 seconds)
[21:18:21] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:19:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[21:19:20] *** Joins: xff0x (~xff0x@2001:1a81:5243:1200:68a2:b42f:5a9a:d157)
[21:19:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:19:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:19:20] *** Joins: wroathe (~wroathe@user/wroathe)
[21:20:09] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[21:20:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:20:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[21:21:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:21:46] <int-e> g: completely untested: https://paste.tomsmeding.com/EMK8rNF0
[21:23:01] <glguy> int-e:   Time (mean ± σ):      41.3 ms ±   3.1 ms    [User: 25.1 ms, System: 5.2 ms]
[21:23:07] <glguy> (and the answer is preserved
[21:23:28] <int-e> g: Yeah it doesn't really make a difference for the task... in my input, I got only about 3x more boxes from splitting in all dimensions simultaneously. When generalizing to more dimensions though this should pay off quickly
[21:24:07] <glguy> Oh, I was thinking it makes a noticable difference, not that it made none :)
[21:24:30] <int-e> well it's both "instantaneous"
[21:24:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:24:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[21:25:59] <mjrosenb> is this the AoC cube problem?
[21:26:06] <int-e> yes
[21:26:32] <int-e> well, cuboid... unless you mean the Dirac dice one ;)
[21:29:19] <mjrosenb> a coworker of mine was actually on the leaderboard for that problem, he didn't really do splitting.
[21:31:17] <int-e> I did wonder whether inclusion/exclusion would work out well (because it only needs intersections, no splitting), but the presence of both deletions and additions put me off.
[21:31:38] <glguy> inclusion/exclusion ends up being more complicated and slower, from what I've seen people do
[21:32:44] *** Quits: acidjnk (~acidjnk@p200300d0c7271e865819ff1869a0a668.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:33:07] *** Joins: acidjnk (~acidjnk@p200300d0c7271e860dd3763164487397.dip0.t-ipconnect.de)
[21:33:35] *** Joins: alx741 (~alx741@157.100.93.160)
[21:34:02] <monochrom> Ugh Dirac dice, is that like dice that is uniformly random almost everywhere under a Dirac measure? >:)
[21:34:15] <int-e> The stupidest thing I've got to work is http://paste.debian.net/1225160/ (which starts with a [-2^20...2^20]^3 box and subdivides it evenly until the box is added and deleted uniformly by the sequence of operations
[21:34:32] <int-e> And it's slow, takes several minutes to finish.
[21:35:07] *** Quits: mbuf (~Shakthi@27.58.131.180) (Quit: Leaving)
[21:35:14] <int-e> monochrom: no, it just spawns parallel universes for each outcome
[21:35:53] <monochrom> That's like a pop sci version of a quantum interpretation >_>
[21:36:18] <int-e> we like our wave functions discrete
[21:37:49] *** Quits: acidjnk (~acidjnk@p200300d0c7271e860dd3763164487397.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:38:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:38:49] *** jinsun__ is now known as jinsun
[21:40:37] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[21:41:39] <mjrosenb> I may have over-optimized my dirac dice.
[21:42:01] <monochrom> It now always gives 4 as per the xkcd? :)
[21:42:16] <mjrosenb> it was able to handle games that lasted until score 500 in a reasonable amount of time
[21:42:44] *** Joins: Megant (megant@user/megant)
[21:42:47] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:47:27] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[21:49:35] <int-e> mjrosenb: Is that dynamic programming with about (500*10)^2 values?
[21:51:30] <mjrosenb> it is not super dynamic, and it uss (500*10)*2 values
[21:52:35] <int-e> I did something weird that effectively adds the current turn number to the state space.
[21:52:41] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:52:55] <int-e> And unsurprisingly that causes it to scale worse :)
[21:53:37] <glguy> int-e: minor tweak that threads the intersection cube through (it's not faster, but it's fewer tokens) https://gist.github.com/glguy/c51bb1e01e964f780e9255eaad77ca69
[21:54:26] <int-e> Ah, no min/max anymore. makes sense.
[21:55:38] *** Joins: alx741 (~alx741@157.100.93.160)
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:55:46] <EvanR> I tried to solve the cuboids of lights with algebra
[21:56:08] <EvanR> but it's too slow
[21:57:10] <EvanR> figured the superfast method I ended up with is what everyone else did
[21:59:56] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:00:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:00:51] <int-e> mjrosenb: Oh can you exploit the independence of the two players? Hmmmmm. Of course you can.
[22:02:51] <EvanR> monochrom, the dice only result in 1 2 or 3...
[22:03:06] <EvanR> 3 sided dice
[22:03:13] *** Joins: ksqsf (~user@134.209.106.31)
[22:03:23] <EvanR> plato would like a word
[22:03:24] <int-e> KISS resulted in [d1,d2,d3] <- replicateM 3 [1..3] for me
[22:03:30] * geekosaur wonders what kind of geometry leads to that
[22:03:53] <int-e> (3^3 is 27, that's a small constant factor ;-) )
[22:04:24] <int-e> > M.assocs $ M.fromListWith (+) [(d1+d2+d3, 1) | [d1,d2,d3] <- replicateM 3 [1..3]]
[22:04:25] <lambdabot>  [(3,1),(4,3),(5,6),(6,7),(7,6),(8,3),(9,1)]
[22:04:38] <int-e> > 27/7
[22:04:39] <lambdabot>  3.857142857142857
[22:04:40] <EvanR> nice bell curve
[22:06:06] <glguy> int-e: OH, I wasn't even *using* the first argument to subtractBox'
[22:06:30] <int-e> oh, hehe
[22:06:52] <int-e> (I missed that too, despite checking the code)
[22:07:20] <glguy> updated gist
[22:07:26] <int-e> But it makes sense, since the overlap is all we're really removing, so who cares about the original box at that point
[22:09:26] <monochrom> In Flatland you can have 3-sided dice. :)
[22:09:30] <EvanR> the three cases for applying a cuboid to the existing cuboids are "totally outside" "totally inside" and "it's complicated", it's complicate is the only one where any real work happens
[22:10:01] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[22:10:41] <EvanR> a subset b, b subset a, or neither
[22:10:50] <EvanR> wait no
[22:10:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:11:24] <EvanR> subset, empty intersection, or other
[22:12:23] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[22:16:34] *** Joins: alx741 (~alx741@157.100.93.160)
[22:18:33] <glguy> int-e: thanks. updated https://glguy.net/advent/sln_2021_22/Main.html and credited your insight in the commit
[22:20:44] *** Joins: econo (uid147250@user/econo)
[22:21:09] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[22:21:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:22:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[22:24:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:25:27] <lechner> Hi, what do the words "in anger" mean on this website, please?    https://github.com/haskell-works/avro#native-haskell-implementation-of-avro
[22:26:08] <dsal> lechner: it's a colloquialism that means "I needed this in a real situation"
[22:26:12] <geekosaur> it's a britishism. originally7 "used in anger" meant "used in battle", now it's somewhat more general
[22:26:49] <EvanR> needed in a real situation? hmmmm not how I read it
[22:27:17] <geekosaur> seems a sensible interpretation to me
[22:27:28] <dsal> It's the opposite of using it in an exercise just to try it out.
[22:27:54] <geekosaur> https://www.google.com/search?q=used+in+anger&oq=used+in+anger&aqs=chrome.0.0i512l2j0i22i30l7j0i22i30i457.2019j0j1&sourceid=chrome&ie=UTF-8
[22:28:06] <dsal> Like, I got angry trying to use a zipper to solve part of an AoC thing, but I've never used a zipper in anger.
[22:28:08] <lechner> tfd lists "Obs. grief; trouble."    https://www.thefreedictionary.com/anger
[22:28:33] <geekosaur> that's just the word anger, though. the phrase "used in anger" has a colloquial meaning
[22:28:55] <EvanR> ah britishisms stackoverflow
[22:29:03] <lechner> dsal got it   http://onlineslangdictionary.com/meaning-definition-of/use-in-anger
[22:29:28] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:32:03] <lechner> thanks so much, everyone! you made me feel a lot better
[22:33:00] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:33:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:34:32] *** Joins: Akiva (~Akiva@user/Akiva)
[22:34:34] <int-e> mjrosenb: that's pretty cool, https://paste.tomsmeding.com/9wVXFc8h runs in under 10 seconds for me compiled
[22:37:27] <int-e> (for day 21)
[22:37:37] *** Joins: neurocyte0132889 (~neurocyte@94.46.64.245)
[22:37:37] *** Quits: neurocyte0132889 (~neurocyte@94.46.64.245) (Changing host)
[22:37:37] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:39:06] *** Joins: alx741 (~alx741@157.100.93.160)
[22:39:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:42:47] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:43:47] <int-e> oh line 19 isn't needed
[22:43:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:45:20] <mjrosenb> that is way more compact than mine was :-O
[22:50:26] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:50:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[22:52:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.44) (Ping timeout: 256 seconds)
[22:57:17] *** Quits: Morrow (~quassel@5.28.131.86) (Ping timeout: 240 seconds)
[22:59:11] <Henson> I'm encountering a problem with a Haskell program I'm writing that interfaces with a camera.  The images are captured by the camera and placed in a doubly-linked list I made that uses TVars.  The images are then read from this list and information is printed.  The cameras time out 7 times out of 10 when operating with this TVar buffer.  However, when I print information about the image size...
[23:00:03] *** Joins: alx741 (~alx741@157.100.93.160)
[23:00:19] <Henson> BEFORE adding it to the TVar linked list, it works perfectly and times out 0 out of 10 times.  There is something happening with Haskell's laziness that is causing a problem here.  Does anybody have any suggestions?  I've tried using BangPatterns to evaluate the camera image data type, and using "seq" to evaluate the image size, but that doesn't help.  Printing the size to the screen does help.
[23:01:14] <geekosaur> note that seq only helps if the value on the right is evaluated in a timely way
[23:01:20] <Henson> but obviously I don't want to print information to the screen just to resolve this problem, there's something else that I'm missing that will have the same effect
[23:01:24] <geekosaur> so we'd have to see some code
[23:03:21] <sm> the dumb workaround: print the length to /dev/null :)
[23:03:41] <EvanR> I'm sure a doubly linked list of TVars is possible but I'm skeptical it's worth it
[23:03:47] <Henson> geekosaur: unfortunately the code is proprietary, so I can't share it.  I thought seq forced the evaluation to HWNF of whatever variable was its first argument.
[23:04:21] <EvanR> a `seq` b will at best only evaluate a if a `seq` b itself is evaluated
[23:04:33] <Henson> EvanR: the purpose for the double-linked TVar list is to allow concurrent readers to a list that is being written to, and for searching forward and backward in a potentially large list.
[23:04:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:04:53] <EvanR> you can do that with a Data.Sequence
[23:04:59] <EvanR> or other structure in a single TVar
[23:06:23] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:08:46] <Henson> are there any other options other than seq, or suggestions of the kinds of things I should be looking for to track down this problem?
[23:09:57] <Henson> anything equivalent to evaluating a variable for printing that doesn't involve printing it?
[23:10:23] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:10:41] <EvanR> another way to evaluate something is to use evaluate from Control.Exception
[23:11:03] <EvanR> it has no other side effect
[23:11:29] <monochrom> Control.DeepSeq has rnf and friends. Combine with Control.Exception's evaluate if necessary.
[23:11:55] <EvanR> DeepSeq seems especially inappropriate here since everything is linked through TVar contents
[23:12:06] <EvanR> force can't see that
[23:12:29] <monochrom> Perhaps the content is a huge lazy expression.
[23:12:39] <EvanR> but yeah, too bad we can't get the code
[23:12:51] <monochrom> Perhaps I shouldn't answer.
[23:13:20] <monochrom> Nothing good comes out of answering a question that requires double blind answering.
[23:13:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[23:15:17] <geekosaur> to expand on what EvanR said, a `seq` b means that a will be evaluated when b is. If b never gets evaluated, now you have *two* big thunks
[23:15:19] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:15:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[23:16:10] <Henson> geekosaur: ahh, I didn't know that
[23:16:19] <Henson> I'm trying to evaluate function now
[23:17:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:17:45] <geekosaur> there are also sledgehammer approaches: you can try {-# LANGUAGE StrictData #-}
[23:18:12] <glguy> int-e: inlining "segments" into Box takes the runtime down from 41 to 33ms (and all the old segment definitions were used at exactly one place before, so there was no duplication from inlining
[23:18:35] <EvanR> in clojure they like to put entire databases into their equivalent of a tvar
[23:18:52] <EvanR> (rather than N TVars referencing each other)
[23:19:42] <monochrom> Most of us get close to doing that too. Not an entire database but certainly an entire Map for example.
[23:20:29] <monochrom> Atomicity comes for free if the content is an immutable data structure. (So, true of both Clojure users and Haskell users.)
[23:20:35] <Henson> EvanR: the Data.Sequence doesn't seem to be quite what I'm looking for.  The purpose of the TVar doubly-linked list was to allow constant time appending, and constant time reading of items off the list from multiple concurrent readers.
[23:20:55] <EvanR> well, Sequence has constant time appending
[23:21:08] <EvanR> and constant time ... starting to read the list
[23:21:12] *** Joins: alx741 (~alx741@157.100.93.160)
[23:21:19] <EvanR> reading the whole thing depends on the size of the list of course
[23:21:22] <geekosaur> but it has only one focal point, not one per reader which seems implied
[23:22:45] <Henson> EvanR: it's similar to this library https://hackage.haskell.org/package/stm-linkedlist but for some reason I can't recall at the moment that library didn't do what I wanted, so I wrote my own.
[23:23:29] <EvanR> what are the exact features needed?
[23:23:46] <EvanR> append to the end and
[23:25:52] <int-e> glguy: "inlining"... oh you're changing the datatype, as in this? (:*) :: {-# UNPACK #-} !Seg -> Box n -> Box ('S n)
[23:25:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:26:54] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:27:17] <int-e> glguy: Maybe I'll just wait for the inevitable commit to land :P
[23:27:54] <glguy> int-e: https://glguy.net/advent/sln_2021_22/Main.html
[23:29:34] <int-e> I guess I guessed correctly then
[23:30:32] <EvanR> that's really cool
[23:30:47] <EvanR> type level number for fun and profit
[23:31:00] <glguy> it made sense to me to split out segments when the logic was on segments that just "happened" to be stacked up into boxes
[23:31:12] <glguy> with with this more efficient box subtraction the value is lost
[23:31:50] <int-e> sorry :)
[23:33:32] <EvanR> to subdivide a 3D box I didn't end up using 2D support ... I wonder if you could so you can justify induction xD
[23:33:39] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[23:34:11] <EvanR> my 2D code went unused
[23:35:02] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:38:26] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:35] <glguy> I don't understand what you mean
[23:39:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:40:13] <EvanR> hmm maybe the subdivision could just work for any dimension
[23:40:18] <EvanR> like everything else
[23:40:49] <EvanR> still, keeping the dimensions straight with the type level number is cool
[23:42:51] <glguy> yeah, the subtraction works for any dimension, and tracking the dimension in the type ensures that only n-d things can be subtracted from n-d things
[23:43:05] <glguy> the recursive case happens at a lower dimension
[23:43:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:43:44] *** Joins: alx741 (~alx741@157.100.93.160)
[23:44:00] <glguy> so subtracting cuboids is in terms of subtracting squares is in terms of subtracting segments is in terms of subtracting single points
[23:45:58] <EvanR> i avoided fencepost issues imagining only cuboids, in 1D they would be line segments centered on the index
[23:46:38] <EvanR> size = b - a + 1
[23:46:41] <glguy> I avoided fencepost issues by using an inclusive lower bound and exclusive upper bound
[23:46:46] <EvanR> i saw that
[23:46:53] <EvanR> sounds confusing xD
[23:47:46] <Henson> ugh, when I replace the complex TVar buffer with just a simple list inside a single TVar, the same problem happens.
[23:47:50] <glguy> it's the most common way to do ranges, really
[23:48:08] <glguy> note how Python does range(), how Rust does its .. enumeration
[23:48:34] <glguy> C arrays, etc
[23:48:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:49:43] <EvanR> makes sense for topology, you can juxtapose a doubly closed interval without overlapping
[23:49:47] <EvanR> can't*
[23:49:55] <int-e> EvanR: it's not confusing if you treat the boundaries as *real* coordinates of cuboids (composed from unit cubes)
[23:50:24] <EvanR> since we're not on the real line, it seems more like school blocks lined up
[23:50:28] <int-e> EvanR: which also means we're computing an actual volume rather than counting lattice points
[23:50:47] <EvanR> me too, b - a + 1
[23:51:03] <EvanR> I'm working with volumes xD
[23:51:09] <EvanR> not points
[23:51:31] <EvanR> (since the problem went out of their way to describe it like that)
[23:51:55] <int-e> EvanR: but you're doing it wrong :-D
[23:51:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:52:17] *** Quits: jco (~jco@90-228-194-139-no542.tbcn.telia.com) (Ping timeout: 240 seconds)
[23:52:29] <int-e> (I added 1 to all upper bounds because I was afraid of fencepost errors. YMMV)
[23:52:35] <EvanR> > [0..10]
[23:52:37] <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10]
[23:52:49] <EvanR> I'm so glad haskell does it wrong, I hate the python way
[23:52:57] <int-e> I didn't do it for part 1 though
[23:53:12] <int-e> EvanR: have you seen the Rust way?
[23:53:15] <EvanR> no
[23:53:18] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[23:53:40] <int-e> they have two types of ranges: a..b excludes b; a..=b includes b
[23:53:48] <int-e> awkward... well... until you get used to it
[23:53:50] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[23:55:00] <kuribas> > init [0..10]
[23:55:03] <lambdabot>  [0,1,2,3,4,5,6,7,8,9]
[23:55:18] <EvanR> > [(-1) .. 1]
[23:55:19] <lambdabot>  [-1,0,1]
[23:55:25] <EvanR> nicely symmetric
[23:55:43] <EvanR> IT JUST MAKES SENSE
[23:56:03] <int-e> > [-1..1]
[23:56:04] <lambdabot>  [-1,0,1]
[23:56:18] <geekosaur> > [ 0.01 .. 0.1 ]
[23:56:20] <lambdabot>  [1.0e-2]
[23:56:33] <EvanR> > [-(1..1)]
[23:56:33] <int-e> > [-2.. -1] -- this is the nasty case
[23:56:34] <geekosaur> > [ 0.01, 0.02 .. 0.1 ]
[23:56:34] <lambdabot>  [-2,-1]
[23:56:34] <lambdabot>  <hint>:1:5: error: parse error on input ‘..’
[23:56:36] <lambdabot>  [1.0e-2,2.0e-2,3.0e-2,4.0e-2,5.0e-2,6.0000000000000005e-2,6.999999999999999e...
[23:56:48] <EvanR> -2 to -1 worked
[23:57:05] <int-e> > [-2..-1] -- well, consider this
[23:57:07] <lambdabot>  error:
[23:57:07] <lambdabot>      • Variable not in scope: (..-) :: t0 -> t1 -> a
[23:57:07] <lambdabot>      • Perhaps you meant ‘...’ (imported from Control.Lens)
[23:57:13] <EvanR> oof
[23:57:17] <int-e> EvanR: I avoided the trap
[23:57:40] <glguy> > [2, 1 .. 1]
[23:57:42] <lambdabot>  [2,1]
[23:57:47] <glguy> I wish we had a nicer syntax for counting down
[23:58:08] <geekosaur> even more fun is when you trip parsing of .. as qualified (.)
[23:58:11] <int-e> geekosaur: yeah the behavior on floats is kind of awful
[23:58:27] <glguy> I think I've only ever wanted to provide the delta rather than the next element forcing the code to then recompute the delta for me
[23:58:28] <geekosaur> > [False..True] -- ick
[23:58:30] <lambdabot>  error:
[23:58:30] <lambdabot>      Not in scope: ‘False..’
[23:58:30] <lambdabot>      No module named ‘False’ is imported.error:
[23:58:43] <glguy> especially since I'm almost always computing the next element by adding  the delta manually
[23:58:46] <int-e> geekosaur: yeah that one also gets me on occasion
[23:59:04] <glguy> [x, x+1, ..] --- and then the library has to do: x-(x+1) to get the 1 back when I had the 1 in the first place
[23:59:08] <EvanR> yes [1, 3, ..] is cool but gimmicky
[23:59:23] <glguy> I'd much rather write something like:  [1, +2 ..]
[23:59:33] <int-e> too mant commas
[23:59:36] <int-e> *many
[23:59:38] <EvanR> yes
[23:59:42] *** Quits: kuribas (~user@ptr-25vy0i81bhacxv5d2f4.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:59:43] <EvanR> caught too late
[23:59:48] <geekosaur> also with the float one I was hoping to trigger the overshoot behavior with floats, but lb chopped it off
