[00:02:03] <White_Flame> ecraven: as far as I know, he's the person hired to work on it
[00:10:36] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de) (Ping timeout: 240 seconds)
[00:11:16] <hashfunc1e68> i have a macro. in my macro is a `cond` expression. i get warnings from macro-expansions that will never happen (does that make sense?). is there a strategy to avoid this?
[00:11:29] <phoe> hashfunc1e68: you mean "deleting unreachable code"?
[00:12:09] <hashfunc1e68> phoe: that's partly what the compiler says
[00:12:52] <hashfunc1e68> "caught WARNING: The function ARRAY is undefined ..."
[00:13:04] <phoe> ...wait a second
[00:13:07] <phoe> you are doing something wrong then
[00:13:13] <hashfunc1e68> like it makes sense that it would generate that warning. but that branch of the cond isn't going to be executed
[00:13:15] <phoe> why are you trying to call a function named ARRAY
[00:13:31] <hashfunc1e68> it's in the `parenscript` library
[00:13:41] <ecraven> White_Flame: so there are plans to make it available in some form?
[00:15:19] <hashfunc1e68> phoe: specifying the first symbol in a list as ARRAY is just something that a macro is using to interpolate the rest of the list. it's not actually calling a function persay
[00:15:55] <phoe> hashfunc1e68: I think it is - otherwise the compiler would not warn you about it
[00:16:02] <phoe> show the code please? and the macroexpansion?
[00:16:24] <hashfunc1e68> phoe: i just thought of something. maybe i need to `, the cond away
[00:16:36] <hashfunc1e68> it's something that's known at compile-time
[00:16:57] <phoe> I want to see the macroexpansion though, trust me :D
[00:17:07] <hashfunc1e68> phoe: ok
[00:25:24] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[00:25:32] <White_Flame> ecraven: apparently, just kinda hearsay
[00:25:47] <ecraven> still, good news ;)
[00:27:39] <hashfunc1e68> phoe: https://plaster.tymoon.eu/view/2953
[00:30:45] <White_Flame> hashfunc1e68: since the language is an unevaluated source code literal, you could perform the cond at macroexpansion time instead of generating a runtime cond
[00:31:23] <jackdaniel> composing rotation matrices with translation is a disaster (float aproximation wise) - is there some state of the art remedy for it or transformation must be kept separate and applied in turn?
[00:32:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:34:09] <hashfunc1e68> White_Flame: would putting the backtick at location `(format ... be the best place to put it? (with the comma obviously being put before the cond expression). i struggle with finding the best backtick placement in forms
[00:34:41] <White_Flame> hand-write the form you want to return
[00:34:45] <phoe> hashfunc1e68: what is CREATE?
[00:34:49] <White_Flame> wherever the beginning of that is is where your backtick goes
[00:35:04] <White_Flame> so I'm pretty sure you want to generate (with-open-file ... (format str ...
[00:37:02] <White_Flame> `(with-open-file ... (format str ... ,(cond ((eq a b) `(form to generate the parameter)))))
[00:38:31] <White_Flame> hmm, and (format stream "~a" <string>) can also be replaced by (princ <string> stream), a bit more direct
[00:38:51] <hashfunc1e68> White_Flame: the part i'm struggling with is nested backticks and commas. since i have ... (eq ',language 'html) ... and what not
[00:38:53] <semz> jackdaniel: I'm far from an expert in that topic, but how are you representing your transformations right now? I'm a little surprised to hear that affine functions don't compose well.
[00:40:06] <White_Flame> your output is (eq 'html 'html), so you need to shove the first HTML after the quote
[00:40:07] <hashfunc1e68> phoe: CREATE is and implementation detail of a macro
[00:40:23] <White_Flame> hence quote, then escape out to the variable value
[00:40:39] <phoe> hashfunc1e68: no it's not
[00:40:48] <phoe> the resulting macroexpansion calls it as a function
[00:40:52] <phoe> so obviously it survives macroexpansion
[00:41:04] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:42:11] <hashfunc1e68> phoe: it survives slime-expand-1, one round of macro expansion (not a recursive expansion). `ps` is the macro. `create` is an implementation detail of said macro
[00:42:49] <phoe> I mean
[00:42:57] <phoe> if the CL compiler emits a warning about an undefined function CREATE
[00:43:05] <hashfunc1e68> in the context yes
[00:43:08] <hashfunc1e68> the compiler is correct
[00:43:09] <phoe> then CREATE survives the FULL macroexpansion
[00:43:32] <phoe> and is called like a function in the resulting macroexpansion
[00:43:39] <phoe> uhhh, sorry, not CREATE but ARRAY
[00:43:48] <hashfunc1e68> White_Flame: i'm not quite wrapping my head around your last two messages tbh
[00:44:04] <White_Flame> (eq '<lang> 'html)
[00:44:27] <White_Flame> in order to shove that LANG value in there, you need a quote first, then escape out to the value of lang
[00:44:37] <White_Flame> so `(eq ',lang 'html)
[00:44:49] <White_Flame> quotes whatever the value of LANG is
[00:45:08] <White_Flame> technically, it's `(eq (quote ,lang) 'html)
[00:45:09] <_death> PS:CREATE is not a CL macro, it is a parenscript macro..
[00:45:14] <White_Flame> which might be a bit more readable at the moment
[00:45:32] *** Joins: jeosol (~jeosol@user/jeosol)
[00:46:28] <hashfunc1e68> White_Flame: i'm trying to wrap my head around how that relates to our conversation of nested backticks
[00:46:48] <hashfunc1e68> *conversation about nested backticks
[00:46:53] <White_Flame> oh, well it's the form you brought up
[00:47:08] <White_Flame> and you're not actually nesting backticks, `,`, is still just 1 level deep
[00:47:27] <White_Flame> (for various definitions of "nesting")
[00:47:55] <White_Flame> it's when you have ``( ',@',foo) or whatever that really starts hurting neurons
[00:47:55] <hashfunc1e68> White_Flame: ok, so is that where i'm going wrong? attempting to nest backticks? i thought that was the way to go.
[00:48:57] <White_Flame> what exactly is going wrong again?  was it a warning abotu unused COND branches?
[00:49:20] <jackdaniel> semz: as a matrix of double floats. when you compose rotation with translation, then you mix mulitply relatively big floats with small ones
[00:49:41] <hashfunc1e68> White_Flame: I'll repost it all again in a legible pastbin with all the details
[00:49:53] <semz> Oh, as n+1 x n+1 matrices?
[00:50:01] <jackdaniel> right
[00:50:15] <jackdaniel> for now I'm just keeping matrices separate and apply them separately
[00:54:26] <hashfunc1e68> White_Flame: https://pastebin.com/T9BxNPub
[00:54:36] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[00:57:41] <White_Flame> with (ps (create ...)) saying create isn't known, that means PS isn't evaluating as a macro, so it's trying to evaluate the parameters for making a function call
[01:00:00] <White_Flame> did you :use the parenscript package or just import individual symbols?
[01:00:42] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[01:01:25] <hashfunc1e68> White_Flame: i used :use. `(defpackage :program (:use #:cl #:cl-who #:parenscript))` funny you should ask. package idioms is another thing i'm going to research today
[01:02:41] <hashfunc1e68> these fricken backticks tho. are backticks read inside-out or outside-in? or is that even a valid question? idk i'm just trying to develop an intuition around all  this
[01:02:51] <White_Flame> it's just a list template
[01:02:58] <White_Flame> equivalent to a normal quote, but can be escaped
[01:03:14] <White_Flame> anyway, you don't have a PS around your HTML branch's CREATE
[01:04:04] *** Joins: Brucio-61 (~Brucio-52@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:04:10] <White_Flame> '(foo bar) == `(foo bar)
[01:04:19] <White_Flame> `(foo ,(+ 1 2)) = (list 'foo (+ 1 2))
[01:04:57] <White_Flame> (although `(foo bar) might differ in creating a list every time?)
[01:05:20] <White_Flame> (whereas '(foo bar) is a literal piece of source code that's reused as data every time that expression is used)
[01:09:06] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[01:09:35] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:10:15] <hashfunc1e68> White_Flame: ok i understand all the above. but the example you gave earlier ... ``( ',@',foo) ... i just cannot rationlize. when i slime-expand-1, i get ... (LIST 'SB-INT:QUASIQUOTE (LIST (LIST 'QUOTE (SB-IMPL::UNQUOTE-SPLICE (LIST 'QUOTE FOO))))) ...
[01:10:28] <White_Flame> oh, that was literal nonsense :-P
[01:10:29] <hashfunc1e68> i feel like if i understand that example, i'll "get it"
[01:10:46] <hashfunc1e68> but it's actually not lol. it's perfectly valid code
[01:11:03] <White_Flame> syntactically, yes :)
[01:11:41] <hashfunc1e68> and i don't understand it haha. BUT if i can wrap my head around that, i think i'll be set in regards to quasiquotes
[01:11:50] <White_Flame> if ,foo were BAR, then it'd evaluate to `(',@'bar), which would be a real mess of QUOTEs
[01:13:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:14:51] *** Joins: aeth (~aeth@user/aeth)
[01:17:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:18:35] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ede5:6357:bb4:e959) (Remote host closed the connection)
[01:19:07] *** Quits: silasfox (~sbv@p200300cec712b400b45e618d2b7703c5.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[01:19:27] <hashfunc1e68> White_Flame: ok. so assuming ,foo is BAR. does the reduction process (according to normal evaluation rules) go as follows? ... ``(',@',foo) => `(',@'BAR) => (''BAR) => ('BAR) => BAR
[01:19:46] *** Joins: patrice (~patrice@user/patrice)
[01:22:28] <White_Flame> `(',@'bar) => `((quote . (quote bar))) => ((quote quote bar))
[01:23:04] <White_Flame> no, wait, the latter is evaluated, so ((quote . bar))
[01:23:18] <White_Flame> ,@'bar =>  . bar
[01:23:42] <White_Flame> (when it's last in the list, otherwise spliced in which there's no standard syntax for)
[01:24:44] <White_Flame> yep, repl confirms
[01:25:07] <White_Flame> (let ((foo 'bar)) (eval ``(',@',foo))) => ((QUOTE . BAR))
[01:25:15] *** Joins: Brucio-52 (~Brucio-52@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:25:38] <hashfunc1e68> White_Flame: ok. ^ i'm gonna have to look at this a few times to see the patterns
[01:25:48] <hashfunc1e68> White_Flame: thanks for the help
[01:25:49] <White_Flame> liek I said, I just typed in random balanced nonsense :)
[01:26:05] <White_Flame> also, this sort of thing might be more appropriate for #clschool
[01:26:41] <hashfunc1e68> didn't even know that channel existed. i'll add it to the list
[01:27:10] <hashfunc1e68> pun intended
[01:30:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[01:33:10] *** Quits: wacki (~wacki@87.122.87.153) (Quit: Leaving.)
[01:37:14] *** Quits: Brucio-52 (~Brucio-52@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Quit: Testing)
[01:38:12] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[01:38:15] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:43:19] *** Quits: hashfunc1e68 (~user@162.254.115.155) (Ping timeout: 256 seconds)
[01:50:37] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:60ac:5115:d501:c1e2) (Ping timeout: 240 seconds)
[01:56:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:58:11] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[02:15:24] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[02:27:24] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Ping timeout: 240 seconds)
[02:33:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:34:44] *** Quits: pve (~pve@37-136-79-78.rev.dnainternet.fi) (Quit: leaving)
[02:35:25] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[02:39:48] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[02:46:37] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Remote host closed the connection)
[02:52:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[03:01:25] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:09:00] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[03:13:21] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:15:40] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[03:24:39] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[03:25:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[03:29:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[03:31:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:37:45] *** Joins: mepy_ (~mepy@37.100.156.164)
[03:39:48] *** Quits: mepy (~mepy@37.100.156.164) (Ping timeout: 240 seconds)
[03:43:46] *** Joins: Oladon (~olad@98.43.81.226)
[04:15:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[04:15:29] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:32:55] *** Joins: pillton (~user@203-219-148-125.tpgi.com.au)
[04:50:24] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 250 seconds)
[04:56:17] *** Quits: VincentVega (~user@212.97.1.15) (Ping timeout: 256 seconds)
[04:59:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:08:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:11:37] *** Joins: Bike (~Bike@71.69.170.70)
[05:27:36] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c52d:7d43:3699:c92e) (Quit: Konversation terminated!)
[05:36:19] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[05:40:57] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 240 seconds)
[06:05:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:07:07] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:26:04] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:36:23] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[06:36:39] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[06:47:14] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:48:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[06:50:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:57:01] *** Joins: Oladon (~olad@98.43.81.226)
[07:03:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[07:06:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:10:00] *** Joins: SR-71 (~user@user/SR-71)
[07:18:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:21:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:27:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:29:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:30:41] <beach> Good morning everyone!
[07:36:48] <SR-71> Good morning.
[07:36:49] <SR-71>  
[08:06:14] *** Joins: unyu (~pyon@user/pyon)
[08:06:47] *** Joins: semz_ (~semz@user/semz)
[08:08:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:09:17] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[08:15:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:17:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:20:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[08:25:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:29:07] *** Joins: notzmv (~zmv@user/notzmv)
[08:37:19] *** Joins: dre (~dre@2001:8003:c932:c301:147f:456a:d163:a87f)
[09:04:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:06:24] <char[m]> Hi, is there any function in ANSI CL that takes a function as an argument and returns an function?
[09:07:21] <beach> Sure.
[09:07:37] <beach> clhs identity
[09:07:37] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_identi.htm
[09:07:41] <beach> That's one.
[09:10:49] <beach> char[m]: But perhaps you want the value to have a more complicated relation to the argument?
[09:12:01] <char[m]> Actually, for my purposes, IDENTITY is perfect, I can't believe I did not think of it. Thanks beach.
[09:12:10] <beach> Sure.
[09:13:38] <char[m]> something more simmilar to alexandria:compose would be nice though.
[09:17:27] <aeth> complement also exists
[09:17:33] <beach> True.
[09:18:30] <beach> Since Common Lisp is not a purely functional language, you won't find the battery of function-manipulating functions that are common in such languages.
[09:18:33] <aeth> If you're using alexandria, you might want curry/rcurry
[09:19:03] <aeth> (funcall (alexandria:curry #'+ 1) 2) => 3
[09:19:19] <aeth> (obviously #'1+ exists for that particular example)
[09:19:49] <aeth> perhaps more usefully... (mapcar (alexandria:curry #'+ 2) '(1 2 3)) => 3 4 5
[09:19:51] <char[m]> thanks. I know, I'm just trying to produce a simple example that I do need any libraries for.
[09:20:40] <aeth> char[m]: maybe this? (mapcar (complement #'evenp) '(1 2 3)) => (T NIL T)
[09:20:58] <aeth> Because then you can make the obvious observation that (complement #'evenp) should behave the same as #'oddp
[09:21:16] <aeth> And then you can use another function that doesn't have a built-in complement as your next example
[09:21:49] <char[m]> very nice
[09:32:43] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[09:33:01] *** Joins: robin (~robin@user/terpri)
[10:26:59] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:39:46] *** anticomputer_ is now known as anticomputer
[10:55:25] *** Joins: wacki (~wacki@87.122.84.8)
[11:12:20] *** Joins: hashfuncf15 (~user@162.254.115.155)
[11:13:35] <hashfuncf15> is there a way to be verbose about reader macros?
[11:14:15] <hashfuncf15> like, in the repl, if i type ... 'hello ... that it will print ... (quote hello) ... ?
[11:14:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:19:04] *** semz_ is now known as semz
[11:19:38] *** Joins: shka (~herr@109.231.3.55)
[11:25:14] *** Quits: pillton (~user@203-219-148-125.tpgi.com.au) (Remote host closed the connection)
[11:26:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[11:31:29] <beach> hashfuncf15: Well, if it is the REPL, it will be evaluated, so the value will be printed at the end, and the value is not (QUOTE HELLO) but HELLO.
[11:35:03] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[11:35:16] <moon-child> hashfuncf15: you may type (read-from-string "'hello")
[11:35:30] <moon-child> alternately (and somewhat more practically), you can simply quote again, as in ''hello
[11:35:45] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:36:34] <beach> I think the idea was to avoid that the printer uses the short form.
[11:37:12] <hashfuncf15> beach: yes that's the idea
[11:37:39] <hashfuncf15> & my fault. i meant if i type ... ''hello ... that the repl will print ... (quote hello) ...
[11:37:49] <moon-child> right
[11:38:39] <hashfuncf15> i'm wondering if there's some sort of verbose printing variable or function that i'm unaware of
[11:38:52] <moon-child> I don't know of a way.  You may do (type-of ''hello), which will evaluate to CONS, hinting that you can look at (car ''hello) and (cdr ''hello)
[11:44:53] <hashfuncf15> moon-child: ok thanks for the help
[11:53:41] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[12:03:52] *** Joins: pve (~pve@37-136-32-80.rev.dnainternet.fi)
[12:35:06] <White_Flame> hashfuncf15: if you set *print-pretty* to nil, then it'll print (QUOTE HELLO) instead of 'HELLO
[12:38:26] <White_Flame> as well as (FUNCTION FOO) instead of #'FOO etc
[12:39:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:40:43] *** Joins: treflip (~user@user/treflip)
[12:42:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[12:43:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:43:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[12:44:22] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b668:8e8:f292:8d7c)
[12:45:08] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[12:45:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:58:51] <hashfuncf15> White_Flame: thanks. that's what i was looking for
[12:59:14] <hashfuncf15> ``hello ... prints: ... (SB-INT:QUASIQUOTE HELLO)
[13:08:59] <qhong> Is there a way to tell SBCL that any objects allocated within a dynamic extent will become garbage outside that extent? (declare dynamic-extent) seems to work only for values bound at the boundary of the dynamic extent? E.g. (let ((x (list nil))) (setf x (list 1))), is there a way to tell SBCL the second list live only shortly?
[13:09:07] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[13:09:51] <qhong> I guess it can't be stack allocated anyway, it is best handled by some memory pool, does SBCL have such facility?
[13:11:20] <semz> If I remember correctly, (let ((x (list nil)) (declare (dynamic-extent x)) (setf x (list 1))) already declares the (1) as of dynamic extent, provided that no other variable refers to it, because it will be otherwise inaccessible.
[13:14:18] <qhong> `time' tells me that it CONSes. This makes sense, as in the body of the code there's in general no way to how many times `list' get called, it might even get called infinity times. So there's no way to know how much stack space to reserve for it.
[13:14:32] <qhong> So I'm asking for a memory pool.
[13:16:14] <qhong> (replace-string "no way to how many" "no way to know how many")
[13:19:30] <beach> qhong: Does your application use a lot of time in the garbage collector?
[13:22:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:24:31] <qhong> beach: empirically not a lot, but in a previous iteration I source-coded/compressed heap-allocated vector into (unsigned-byte 64) and it's 5 times faster
[13:24:44] <beach> I am asking because the programmer is often wrong about the liveness of objects, which is why there are so many memory leaks and premature deallocations in languages without automatic memory management.
[13:24:58] <qhong> I think it might be 1. allocating itself is not so fast, or 2. cache locality
[13:25:30] <beach> Plus, liveness changes as a result of maintenance, which, if the programmer handles it manually, will typically introduce bugs that are hard to find.  This is why we have automatic memory management in the first place, of course.
[13:26:12] *** Joins: notzmv (~zmv@user/notzmv)
[13:26:25] <qhong> Yes I'm big fan of GC I always want to yeet stack all together and heap-allocate activation records in my own (hypothetical) language
[13:26:35] <qhong> Just in this case I happen to need some extra performance
[13:26:36] *** Quits: hashfuncf15 (~user@162.254.115.155) (Ping timeout: 240 seconds)
[13:33:34] <moon-child> why heap-allocate activation records
[13:33:36] <moon-child> ?
[13:33:40] <moon-child> continuations or ?
[13:34:06] <qhong> yes and environment
[13:39:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[13:40:30] *** Joins: aeth (~aeth@user/aeth)
[13:42:30] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:50:49] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[13:55:06] *** Joins: eugercek (~user@user/eugercek)
[13:55:07] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Client Quit)
[13:56:20] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:10e6:6f1c:f240:581)
[13:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[13:59:31] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:10e6:6f1c:f240:581) (Client Quit)
[14:06:13] *** Joins: nature (~nature@45.32.235.173)
[14:10:25] *** Joins: cosimone (~user@93-47-228-207.ip115.fastwebnet.it)
[14:11:07] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Remote host closed the connection)
[14:12:07] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:31:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:31:44] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[14:48:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:59:33] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[15:09:16] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[15:09:43] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[15:21:46] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:22:26] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:23:47] <mfiano> What's a decent way to create a list of 1 or 2 elements, from 2 variables: if both bindings have the same value, it is 1 element, if not, the list is the first value followed by the second value?
[15:24:53] <mfiano> I was trying to be clever without branching. Maybe I should abort to what comes naturally
[15:25:38] <semz> I don't see how you could avoid branching.
[15:26:15] <phoe> you need to conditionalize on (eq x y) anyway
[15:26:39] <semz> (remove-duplicates (list a b)) ; :-)
[15:26:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:27:38] <mfiano> Well now I feel dumb
[15:28:08] <phoe> this hides the EQL test inside REMOVE-DUPLICATES and always conses two cells instead of maybe just one
[15:28:10] <semz> It's still branching of course, but maybe it's more readable
[15:28:20] <mfiano> Yes it certainly is
[15:36:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[15:37:00] *** Joins: amb007 (~a_bakic@158.13.23.93.rev.sfr.net)
[15:48:11] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[15:52:18] *** Quits: amb007 (~a_bakic@158.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:52:54] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:56:27] *** Joins: random-nick (~random-ni@87.116.179.129)
[16:20:59] <_death> another is (adjoin a (list b))
[16:25:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:42:08] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:46:06] <phoe> _death: I actually like that one
[16:46:11] <phoe> I didn't think of using ADJOIN
[16:47:35] <mfiano> That's the one I was trying to remember!
[16:50:13] *** Joins: razetime (~quassel@117.254.35.46)
[17:06:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:08:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[17:15:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:23:21] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[17:25:33] *** Joins: danieli (~danieli@user/danieli)
[18:03:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:05:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:13:54] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[18:31:08] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[18:31:52] *** Joins: treflip (~user@user/treflip)
[18:32:07] *** Joins: amb007 (~a_bakic@176.13.23.93.rev.sfr.net)
[18:33:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:39:02] <dieggsy> anyone know how ctags knows about e.g. defclass (and even a custom define-class macro) when i can find no mention of it in the sources? https://github.com/universal-ctags/ctags
[18:42:41] <dieggsy> but then not slots. ...interesting lol
[18:44:11] <phoe> dieggsy: uhh, is this a #common-lisp question?
[18:44:42] <phoe> plus I didn't really understand what you are asking about
[18:45:32] <dieggsy> I mean it's related to common lisp since I'm asking about using ctags with common lisp. Happy to move it elsewhere if it's not welcome I suppose
[18:46:06] <phoe> what's a ctag?
[18:46:35] <phoe> oh, some sort of code navigation thing
[18:47:00] <phoe> I use slime's navigation instead
[18:47:05] <mfiano> It's for people that don't know about our tooling.
[18:47:12] <dieggsy> lol
[18:47:14] <dieggsy> I use slime too guys
[18:47:24] <dieggsy> sometimes i need to look up a symbol that's not loaded into slime though
[18:47:41] <mfiano> You must be using it wrong. ctags cannot possibly know information dynamic to the runtime.
[18:47:42] <gjvc> ctags is cross-language though and very fast.  i've used it to shame a few smug java developers in the past
[18:47:46] *** Joins: jeosol (~jeosol@user/jeosol)
[18:48:06] <gjvc> "multi-language" i mean
[18:48:10] <dieggsy> mfiano: i must be using which wrong?
[18:48:30] <mfiano> If your code is not loaded into your image, then I would say you are not using Common Lisp correctly, as it is an interactive language.
[18:49:08] <mfiano> If it is loaded into your image, then SLIME/SLY will offer you much more introspection capabilities.
[18:51:53] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 256 seconds)
[18:52:53] <dieggsy> mfiano: Most of the time, my code is loaded into my image. Sometimes, there is code that is not. I'd say our code base at work probably does not use common lisp correctly - there are two separate (very large) packages with a lot of dependencies and shared code that can't be loaded together without breakage. i'm working to fix this, but I can't do much about it in its current state
[18:53:14] <dieggsy> so i was exploring ctags. no harm in exploring other tools, even if they are inferior
[18:53:43] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b)
[19:21:20] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[19:25:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Ping timeout: 252 seconds)
[19:28:16] <phoe> well, I have no idea if ctags are anyhow supported in CL
[19:28:24] <phoe> one reason is the popularity of slime/sly
[19:29:05] <phoe> another is the fact that in the general case you don't know what symbols and definitions you're going to have until you evaluate your Lisp code
[19:31:17] <dieggsy> phoe: correct. there is a very limited form of support - namely what you can clean from static analysis, and even that is vastly incomplete. but (probably due to a bug), it somehow simultaneously correctly finds both more (and less, i guess) than i would expect it to
[19:31:52] <dieggsy> in any case, i wouldn't want to continue to ramble off topic if it's disruptive, so i'm happy to move past it. no worries. i appreciate the conversation
[19:38:56] *** Joins: ldb (~user@user/ldb)
[19:39:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:40:56] *** Joins: aeth (~aeth@user/aeth)
[19:42:58] *** Joins: tane (~tane@user/tane)
[20:06:11] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:08:49] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[20:10:11] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:14:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:16:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:38:44] *** Quits: razetime (~quassel@117.254.35.46) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:07] *** Joins: razetime (~quassel@117.254.35.46)
[20:40:39] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[20:43:44] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:00] *** Joins: razetime (~quassel@117.254.35.46)
[20:44:10] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:44:33] *** Joins: razetime (~quassel@117.254.35.46)
[20:45:05] *** Quits: razetime (~quassel@117.254.35.46) (Client Quit)
[20:49:19] <Guest74> so in my dreams I came across a journal article entitled 'the non-extensibility of P'.  Which got me thinking.  In lisp i think we could extend the object itself by doing such things as injecting superclasses, but most 'extensions' seem to come by adding functions that add the ability to interpret or use the object in a different manner.  In
[20:49:20] <Guest74> what sorts of situations is it best to mangle the object instead of adding functionality through functions?
[20:49:20] *** Quits: amb007 (~a_bakic@176.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:50:27] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:04:12] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[21:04:36] *** Joins: amb007 (~a_bakic@169.15.23.93.rev.sfr.net)
[21:20:25] <phoe> it's a hard question to answer generally, since ultimately all concrete behavior is defined by methods
[21:20:44] <phoe> even harder in Common Lisp because of CHANGE-CLASS which is yet another way of mangling an object
[21:21:20] <phoe> except it one that can directly influence the applicable methods
[21:21:28] <phoe> s/it/it's/
[21:21:56] *** Quits: amb007 (~a_bakic@169.15.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[21:22:39] <Guest74> yeah, change-class is one of the one's I'm not sure about when, if at all, it's good to use.  Not sure about the injecting superclasses either. like, has anybody actually used that in production code?
[21:23:58] <phoe> change-class is fun for programmatic use when you have a set of classes that will not be extended by the user - then, instead of setting and conditionalizing on a flag inside an object, you simply change its class and this way the dispatch mechanism becomes the conditionalizer
[21:24:23] <phoe> like in Cluffer, https://github.com/robert-strandh/Cluffer/blob/4aad29c276a58a593064e79972ee4d77cae0af4a/Standard-line/edit-protocol-implementation.lisp#L53
[21:25:30] <phoe> injecting superclasses is super-fun for custom metaclasses, do you mean something like https://github.com/robert-strandh/Stealth-mixin/blob/master/stealth-mixin.lisp ?
[21:26:18] <Guest74> I think stealth is the only one I've heard of.  But I've never heard of someone using it.
[21:26:33] <phoe> mostly because this technique is easy to reinvent
[21:26:52] <Guest74> the cluffer one is interesting.  I'll have to think about that.
[21:27:04] <phoe> my recent example is https://github.com/phoe-trash/value-semantics-utils/blob/main/src/always-bound-class.lisp
[21:27:11] *** Joins: amb007 (~a_bakic@103.144.204.77.rev.sfr.net)
[21:27:29] <phoe> where a superclass ALWAYS-BOUND-OBJECT is always added to instances of an ALWAYS-BOUND-CLASS
[21:27:33] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: Leaving)
[21:27:55] <Shinmera> My favourite uses of change-class are twofold: 1) in cl-markless I eagerly create a parse-tree from the source markless text. If an eager parse is noticed to be invalid at a later point, instead of unwinding I change-class the relevant node into one without semantics and carry on. 2) in Trial I let objects refer to resources such as texture before they're even generated from sources like model
[21:27:56] <Shinmera> files. Once the asset that generates them is loaded, I change-class this placeholder resource into the actual texture resource that carries the data and information. This avoids having to do a repeated lookup at runtime of the resource, or having to somehow re-traverse the scene graph and patch up references to resources now that they've been properly generated.
[21:29:52] <Guest74> 2 sounds interesting.  Any particular file I can look at to see how you do it?
[21:29:56] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 256 seconds)
[21:30:07] <Shinmera> 1) isn't interesting? That makes me sad
[21:30:28] <phoe> Guest74: ever heard about forward-referenced-class?
[21:30:42] <phoe> 2) seems similar to the concept
[21:30:48] <Guest74> i was just going to write, maybe I should think about 1.  I haven't parsed to classes because of that catch, this might be a way to change that.
[21:31:15] <Shinmera> anyway, sure https://github.com/Shirakumo/trial/blob/master/asset.lisp  https://github.com/Shirakumo/trial/blob/master/assets/image.lisp
[21:31:16] <Guest74> phoe: nope, I have no comp sci education.
[21:31:25] <phoe> Guest74: it's a Common Lisp MOP term
[21:31:39] <Guest74> i have no mop education :)
[21:31:42] <Shinmera> I don't think it'll be immediately clear how it works from those files. Not that the trick is very hard to implement, either.
[21:31:47] <phoe> the one that allows you to (defclass foo (bar) ()) without BAR defined
[21:32:12] <phoe> in particular, see (defclass foo (bar) ()) (find-class 'bar)
[21:32:37] <Guest74> Shinmera: code always helps me to visualize it, at least something to follow a trail.
[21:35:21] <Guest74> I know I certainly need to change my parsing tools. I feel I should have something more generalizable instead of extremely format specific.
[21:43:32] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[21:45:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:47:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:48:19] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:02:00] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:02:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:07:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:09:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:11:31] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:9e4:e295:e419:65fb)
[22:18:02] *** Joins: akoana (~ah@user/akoana)
[22:23:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:25:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:35:40] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[22:44:06] *** Joins: McParen (~McParen@user/mcparen)
[22:51:29] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:53:26] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[23:05:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[23:09:16] <shka> change-class is fine and useful tool
[23:10:05] <shka> i usually use it in cases as described by Shinmera in 1)
[23:10:20] <shka> never actually thought about 2) but it makes sense after reading it
[23:12:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:14:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:14:13] *** Lord_of_Life_ is now known as Lord_of_Life
[23:15:27] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 252 seconds)
[23:21:32] *** Joins: notzmv (~zmv@user/notzmv)
[23:24:41] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[23:27:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[23:32:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:32:54] *** Joins: aun (~aun@8186-7fce-aa3c-6ca9-1d00-846c-07d0-2001.dyn.estpak.ee)
[23:34:02] *** Quits: amb007 (~a_bakic@103.144.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[23:37:32] <Guest74> I have a naming question. In transforming c headers to lisp for ioctl requests, I thought I'd just do the standard constant naming and muff them with '+.  However, some of them take parameters, such as length of supplied buffer.
[23:38:25] <phoe> this sounds like function calls rather than constants
[23:38:26] <Guest74> So since they're macros or functions(can't decide), should I remove the muffs?  But then it seems inconsistent with the other requests.
[23:38:34] <phoe> what are the other requests?
[23:38:44] <Guest74> constants
[23:39:07] <phoe> zero-arg functions, then, maybe?
[23:39:40] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:5498:b740:82c3:302e)
[23:39:47] <Guest74> they're really constants.  There's a calculation involved, but they end up 32 bit integers.
[23:40:05] <phoe> how do they take parameters if they are constants
[23:40:44] <Guest74> you said the other requests.  There's the constants, and there's the ones that take parameters.  In C they're just defines present all uppercase.
[23:41:03] <phoe> oh, I misunderstood - OK
[23:41:23] <phoe> so, in C, some of them are like FOO, while others are BAR(...)?
[23:41:38] <Guest74> I'm thinking maybe remove all the muffs for consistency.  but then besides slime telling you, how would you know it takes a parameter?
[23:41:39] <phoe> could you point to the C sources?
[23:42:17] <Guest74> sure, if you're on linux /usr/include/linux/input.h is one that takes args
[23:43:08] <Guest74> e.g. EVIOCGNAME
[23:43:30] <phoe> yes, I see, IMO that's a naming inconsistency on linux side
[23:43:41] <phoe> these are actually zero-argument macros that omit their empty parentheses
[23:43:41] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[23:44:26] <phoe> I would have all of them be functions and have some of them take zero arguments, even if just for consistency
[23:44:31] <Guest74> but in lisp I think they're best translated as constants.
[23:44:52] <Guest74> because they're just 32bit constants.
[23:45:16] <phoe> but then you would need to have calls like (+eviocgmtslots+ len) which would confuse me a lot
[23:45:21] <phoe> and I guess they would also confuse other people
[23:46:05] <Guest74> yeah, though this is just low level, so my library for this won't expose any of that.
[23:46:16] <phoe> like, the final result might be an (unsigned-byte 32) but in general a value cannot be a constant if it depends on its arguments
[23:46:40] <Guest74> thinking if somebody else wants to use the ioctl macros as well as the header parsers, so figuring out what the parser should spit out.
[23:47:24] <phoe> if anything, I could imagine a call like (ioctl +eviocsff+)
[23:47:40] <phoe> or (ioctl +eviocgkey+ len)
[23:48:11] <pjb> Or, instead of thinking in terms of functions and constant variables and other CL stuff, you could think in terms of the problem domain, and invent your own mini DSL.
[23:48:13] <Guest74> That's pretty much what the function calls I wrote look like.
[23:48:21] <phoe> oh, good
[23:48:26] <phoe> then, well, that's what I would do
[23:48:27] <Guest74> at a low level.
[23:48:36] <Guest74> higher level is evdev:get-key
[23:48:52] <pjb> So you can choose any convenient syntax.
[23:48:54] <phoe> the ioctl "types" themselves are constants, and then arguments can "modify" these constants in some way, depending on the sort of ioctl that is being issued
[23:50:52] <Guest74> though only some can be modified, and in this case only those that return strings.  So maybe I could just hardcode a max string buffer and have them all constants.
[23:51:37] <Guest74> ugh, no, that doesn't work, some take events.
[23:52:04] <Guest74> I guess I'll just leave the low level inconsistent.
[23:53:09] <Guest74> pjb: I'd rather something that maps quite easily to the header files.  That way I don't really have to write anything, just parse the header into lisp that looks pretty much the same.
[23:55:42] <Guest74> e.g. (defconstant +EVIOCSFF+   (_IOW #\E #x80 ff_effect)  "send a force effect to a force feedback device")
[23:58:31] *** Quits: cosimone (~user@93-47-228-207.ip115.fastwebnet.it) (Remote host closed the connection)
