[00:00:18] <Inline> a char pointer has an underlying size (as a pointer) (it has a pointing threshold beyond which it can't point)
[00:00:58] <Inline> a char pointer has also an underlying type constraint to what it points to in addition
[00:01:17] <fossforus> any time I enter a function call in C, everything before the function call (assuming no globals) goes out of scope, but when the function returns the data is still there
[00:01:36] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.205) (Ping timeout: 272 seconds)
[00:01:49] <tusko> I just don't understand where my particular error is. The code seems to run correctly. Obviously array_put or array_get are not writing or reading. But I can't determine which
[00:02:06] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:02:20] <tusko> dereferencing or dequeing in the read/write instructions, in thos functions, only produces errors
[00:03:10] <shiroyasha> tusko: You seem to be using `strncpy` on unallocated `char *`.
[00:03:46] *** Joins: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder)
[00:03:54] *** Joins: Oddity (~Oddity@user/oddity)
[00:05:47] *** Joins: oxfuxxx (~oxfuxxx@194.110.84.27)
[00:05:48] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[00:05:49] <fossforus> strncpy is almost always wrong, btw
[00:05:57] <fossforus> since it doesn't guarantee null termination
[00:06:13] <tusko> Oh, man people told me the opposite becuase of buffer overflows
[00:06:43] <tusko> because strcpy doesn't take a size
[00:07:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[00:08:07] <fossforus> yes, this is generally where I'd use memcpy if you're taking the size anyways
[00:08:11] <NRK> the entire C standard string library is a disaster
[00:08:44] <Inline> what about memmove ?
[00:08:51] <fossforus> strncpy is primarily meant to be used when you know the max size of your string, but not the min size, but also want to null terminate
[00:09:07] <fossforus> unix file strings are the primary usecase iirc
[00:09:27] <pragma-> strncpy is primarily meant to be used to fill fixed-width strings
[00:09:43] <fossforus> inline: memmove is just memcpy but without restrict qualification
[00:10:00] <fossforus> ITT always slower unless your buffers need to overlap
[00:10:04] <Inline> if there's overlap between source and dest!
[00:10:05] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[00:10:28] *** Joins: jonathanschlink (jonathansc@shelltalk.net)
[00:10:32] <NRK> memccpy(d, s, 0, sizeof(d)); d[sizeof(d) - 1] = 0;
[00:11:00] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:11:20] *** Parts: jonathanschlink (jonathansc@shelltalk.net) ()
[00:11:49] <fossforus> strncpy is a very niche tool that somehow managed to get notoriety as being more secure than strcpy
[00:11:49] <fossforus> stackexchange and its consequences has been a disaster for the human race
[00:12:01] <tusko> I made all those changes but this still produces no output https://onlinegdb.com/Sz3oGjf4M
[00:12:08] <fossforus> that being said, if you know the size of your string, don't use strcpy either
[00:12:09] <tusko> I just don't get it
[00:12:28] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:12:35] <fossforus> and if you don't know the size, you probably don't want to use strcpy especially if it's a user-provided string
[00:12:47] <tusko> I moved to memcpy but I also have MAX_NAME_LENGTH
[00:13:14] <tusko> The longest name I will take is a V3 Onion address
[00:13:21] <tusko> 56 bytes
[00:13:32] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[00:14:22] <fossforus> strncpy might actually make sense then if you intend to use null termination, but you have to still manually set the last byte to null
[00:14:36] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 252 seconds)
[00:15:02] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[00:15:18] *** Joins: tusko (~yeurt@user/tusko)
[00:15:23] <tusko> Yeah, if memcpy is more secure I am cool with using that, too
[00:15:25] <fossforus> 57 byte array, set array[56] = '\0' after strncpy
[00:15:35] *** Quits: oxfuxxx (~oxfuxxx@194.110.84.27) (Read error: Connection reset by peer)
[00:15:37] <shiroyasha> tusko: https://termbin.com/dgqw
[00:15:47] <fossforus> memcpy just makes more sense in most usecases, but if you're parsing a url strncpy might make sense
[00:15:58] <fossforus> with a fixed max size
[00:16:53] <tusko> Yeah, if memcpy is more secure I am cool with using that, too
[00:17:19] <tusko> I just don't understand why I get no output tho
[00:17:45] <tusko> shiroyasha, thank you I'm gonna go gtive this a run. Do you think the get is threadsafe though?
[00:17:51] <tusko> I'd worry it gets overwritten before my consumer resolved it
[00:20:04] <tusko> yeah, it definitely works though
[00:20:19] <tusko> now I'm going to give this a god in my multithreaded setup
[00:21:17] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:22:35] <tusko> shiroyasha, fossforus thank you very much
[00:23:50] *** Quits: parrott (~parrott@2607:fb90:1772:1f51:0:55:6796:c001) (Read error: Connection reset by peer)
[00:24:09] *** Joins: parrott (~parrott@158.59.127.103)
[00:24:47] *** Quits: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[00:25:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:26:07] *** Joins: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder)
[00:28:55] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[00:31:22] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[00:32:51] *** Quits: parrott (~parrott@158.59.127.103) (Read error: Connection reset by peer)
[00:33:33] *** Joins: parrott (~parrott@158.59.127.103)
[00:34:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:37:48] *** Quits: parrott (~parrott@158.59.127.103) (Ping timeout: 240 seconds)
[00:38:45] <twkm> hmm, secure.  beware of strncpy.
[00:39:14] *** Joins: parrott (~parrott@2607:fb90:1772:1f51:0:55:6796:c001)
[00:39:48] <shiroyasha> tusko: My patch is missing a `free(dest);` in `main`. Whoever calls `array_get (&a, &dest);` is responsible for calling `free(dest);`.
[00:40:20] *** Quits: phaise (~phaise@gateway/tor-sasl/phaise) (Remote host closed the connection)
[00:40:35] <tusko> Yeah, I caught that. I have my resolvers free the dest memory before they exit.
[00:41:03] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:41:08] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[00:42:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:43:47] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:09] *** Quits: kubrickdave_ (~kubrickda@80-121-90-104.adsl.highway.telekom.at) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:45:15] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[00:45:34] *** flooded is now known as _flood
[00:45:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:45:40] *** Quits: ztx (~ztx@user/ztx) (Quit: WeeChat 3.4.1)
[00:45:55] *** Joins: kubrickdave (~kubrickda@80-121-90-104.adsl.highway.telekom.at)
[00:46:44] *** Quits: z4r4 (~z4r4@89.36.78.228) (Quit: Leaving.)
[00:46:56] *** Quits: magla (~gelignite@d536552c.access.ecotel.net) (Quit: Stay safe!)
[00:47:11] *** Joins: fspax (~fspax@46.148.141.211)
[00:47:18] *** Joins: KinLux (~workspace@tmo-096-112.customers.d1-online.com)
[00:47:56] *** Quits: fspax (~fspax@46.148.141.211) (Client Quit)
[00:48:12] *** Joins: fspax (~fspax@46.148.141.211)
[00:48:18] <tusko> I'm not sure why but valgrind complains I'm writing past the end of a heap block and corrupting heap metadata
[00:48:22] *** Joins: Guest69 (~Guest69@169.150.196.112)
[00:48:31] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:49:51] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[00:50:00] *** Quits: Guest69 (~Guest69@169.150.196.112) (Client Quit)
[00:51:21] <tusko> oh duh
[00:51:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:52:47] *** Quits: slimbo (~slimbo@user/slimbo) (Quit: slimbo)
[00:53:37] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8973:823e:aea0:3392)
[00:55:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:56:00] <fossforus> tusko: what was it?
[00:56:29] <tusko> I had calloc(sizeof(MAX_NAME_LENGTH +1), sizeof(char))
[00:56:42] <tusko> slowly getting it to work. At least now it only deadlocks
[00:57:16] <twkm> long assed way of writing ,1
[00:57:30] <fossforus> shouldn't those be reversed?
[00:57:43] <twkm> the order is immaterial.
[00:58:13] <twkm> anything*1 and 1*anything yield the same results.
[00:58:17] *** Joins: xbkkd (~F0@user/xbkkd)
[00:58:57] <tusko> yeah calloc(57, 1) works too
[00:59:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[01:00:21] <tusko> I wish valgrind could tell me why it deadlocks
[01:00:23] <twkm> the computed length is fine, the sizeof (char) is the long way to write 1.
[01:02:13] <fossforus> twkm: for some reason I thought it batched the operations nmemb times, read the function source and it does just multiply them (in my libc anyways)
[01:02:27] <fossforus> maybe that's how fwrite/read does it
[01:02:34] <tusko> idk, I had to remove sizeof(MAX_NAME_LENGTH + 1) to just MAX_NAME_LENGTH + 1. The other way was making C very unhappy
[01:03:09] <twkm> in all standard libraries.  fread and fwrite might eventually, but they do things in terms of the element size where calloc does not.
[01:03:30] <twkm> sizeof (int) seems unreasonable.
[01:04:01] <twkm> (perhaps long, even intmax_t likely isn't very large)
[01:04:31] *** Joins: korg815 (~korg815@user/korg815)
[01:04:43] <twkm> i.e., sizeof (56 + 1) is the same as sizeof (int).
[01:04:46] <fossforus> tusko: you were doing sizeof(56)
[01:04:49] <fossforus> ^^
[01:05:03] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:53ff:9449:f6d:aa8c)
[01:05:12] <fossforus> macros expand, they aren't values or variables of their own (unless you make them expand to that)
[01:05:13] <tusko> yeah, exactly
[01:05:27] <tusko> you know how people are about magic number though
[01:05:30] *** Quits: oriba (~oriba@dynamic-077-013-007-140.77.13.pool.telefonica.de) (Remote host closed the connection)
[01:05:36] <tusko> they'd rather have 15 million macros
[01:05:54] <twkm> sizeof yields the size in bytes of a type, the type of 56+1 is int.
[01:05:56] <fossforus> magic number + comment is usually suitable if it's only done once
[01:06:02] <fossforus> if it's a repeated value I use a macro
[01:06:40] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Quit: Leaving)
[01:07:03] <fossforus> --s/values/objects/
[01:07:08] <twkm> random utterance: i seldom use calloc.
[01:07:29] <fossforus> calloc is good for like
[01:07:30] <fossforus> rgb data
[01:08:06] <tusko> These are my threads btw https://bpa.st/M5CQ
[01:08:23] <tusko> they're a little chonky. my structs are a mess
[01:09:24] <twkm> threading introduces much complexity.  if you are new to c you probably shouldn't
[01:09:42] <tusko> got no choice fam
[01:09:57] *** Quits: fspax (~fspax@46.148.141.211) (Quit: Leaving)
[01:10:01] <tusko> sometimes you just have to become a man, even at the tender age of 27
[01:10:25] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:10:51] <apotheon> tusko: Why do you seldom use calloc?
[01:11:10] <tusko> I use calloc all the time. Others were saying they don't use it much.
[01:11:14] <twkm> avoiding threading can help you debug the logic without the surprises that threading can introduce.
[01:13:09] <tusko> twkm, I take in a variable number of threads so I could always set either to 0
[01:13:20] <tusko> and the othyer to 1 to have single threaded performance
[01:13:31] <twkm> i find that i tend to write all the allocated area anyway, at least for non-string data.  and for string data i find careful handling, i.e., not praying calloc will save me, to be better.
[01:15:21] <twkm> ewww, casts.
[01:16:17] <twkm> can't say i like the while (!feof(...)) either.
[01:17:50] *** Quits: fossforus (~stan@174.99.70.146) (Ping timeout: 252 seconds)
[01:18:40] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:24:09] <twkm> you seem to be changing shared storage without protection.  of course you don't show array_* so that's a wag not a certainty.
[01:24:58] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:25:13] <twkm> ewww, assuming pthread_t's type.
[01:26:05] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[01:26:09] *** Quits: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder_)
[01:26:37] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-221.cspire.com)
[01:27:07] *** Joins: soapsudsxx (~soapsudsx@141.193.188.145)
[01:27:11] <tusko> I'm really catching it right now
[01:28:17] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 256 seconds)
[01:32:52] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk)
[01:35:47] <twkm> so are you protecting against simultaneous access?  do you have to use sem_*?  for single process threading i'd use a pthread mutex, not that that would necessarily solve your issue though an error checking mutex would indicate if you're attempting to relock rather than deadlocking if attempted.
[01:37:12] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[01:37:27] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[01:39:25] <tusko> Yeah, I do a lot of that. I'm not sure how to show you though.
[01:39:37] <tusko> I wrapped everything I can think of in a mutex, except stdout
[01:39:38] *** Quits: eotdsea^ (~eotdsea@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[01:39:41] <tusko> or stderr
[01:41:52] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[01:42:13] *** Joins: Filystyn (~piotr@user/filystyn)
[01:42:15] <Filystyn> hello
[01:42:46] <twkm> moo.
[01:46:02] <Filystyn> I seen something in code that was very unexpected not my code so No idea if this is common. For me it was very messy.
[01:46:22] <Filystyn> main.c calls function
[01:47:24] <Filystyn> it includes header which only declares it: function( void );  let us call it header.h
[01:47:48] *** Quits: zwr (~zwr@2804:d45:b966:fb00:e8a7:8c67:601:f50b) (Ping timeout: 240 seconds)
[01:47:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[01:48:02] <Filystyn> and than we have other.c which declares function( void ) { what it does )
[01:48:02] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:48:19] <Filystyn> other includes  header.h only
[01:48:36] <nitrix> Sounds pretty normal.
[01:48:41] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f2b3:3aeb:5464:99ac)
[01:48:53] <parrott> Oink.
[01:49:52] <ioxzev1z> Filystyn, in a header you declare something exists, then in the .c you define how it works
[01:50:07] <parrott> Blah
[01:50:23] <parrott> Convention.
[01:50:51] <Filystyn> and we have now compliation main.c -o main;  header.c -o header; other.c -o other;  finally we link everything
[01:51:05] <parrott> Nop
[01:51:05] <Filystyn> but other.h is never included in main so I am not sure
[01:51:23] <Filystyn> how the hell is that suppoosed to cooperate
[01:51:24] *** Joins: cthi (~cthi@065-190-217-105.inf.spectrum.com)
[01:51:30] <Filystyn> there is no other.h
[01:51:47] <Filystyn> only header.h
[01:52:12] <parrott> It's just a paperback
[01:52:14] <twkm> why would main.c need to know that function exists?  does it call it?
[01:52:16] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-221.cspire.com) (Quit: Leaving)
[01:52:33] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-221.cspire.com)
[01:52:35] <nitrix> Translation units aren't aware of other translation units. The compiler needs a declaration before it can invoke a function, regardless of where the symbol is actually defined. It will need to be visible to get linked though.
[01:52:50] <Filystyn> yes main.c calls function that is declared in header.h but is defined in other.c
[01:52:56] <parrott> Blegh
[01:53:33] <Filystyn> just a second
[01:53:56] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-221.cspire.com) (Client Quit)
[01:54:04] <Filystyn> I will show part of that code simply
[01:54:25] <nitrix> In case it's not clear; the name of those files are completely irrelevant.
[01:54:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:54:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:55:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:56:07] *** Joins: KinLux1 (~workspace@tmo-096-112.customers.d1-online.com)
[01:56:17] <twkm> header.c defines function that's declared in other.h and used by main.c -- perfectly normal, though i'll grant that header.h would have declarations for things provided by header.c.
[01:56:41] <twkm> ... would normally have ...
[01:57:37] *** Quits: KinLux (~workspace@tmo-096-112.customers.d1-online.com) (Ping timeout: 240 seconds)
[01:57:50] <nitrix> Maybe that's what throws them off. There almost seem to be a language barrier at play.
[01:58:23] *** Quits: KinLux1 (~workspace@tmo-096-112.customers.d1-online.com) (Read error: No route to host)
[02:00:40] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[02:00:43] <Filystyn> https://termbin.com/x98g   https://termbin.com/6hsv   https://termbin.com/hlgo   https://termbin.com/fyli    So i guess what i thought is that linker won't look into other objects for definition if they are not included in source
[02:00:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:00:57] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[02:01:58] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:02:05] <Filystyn> Instead after saying it exists it in code it  checks every object that was passed
[02:02:16] <twkm> the linker never looks at source files.
[02:02:39] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:03:25] <twkm> yes, linking is the what the linker does.
[02:03:44] <Filystyn> Ok.. well it was not obvious for me
[02:03:47] <nitrix> The pastes didn't add anything new to the question for me and my answer remains the same.
[02:04:10] <Filystyn> nyway i understand now what is happening
[02:04:15] <Filystyn> So thanks for help
[02:04:18] *** Joins: oxfuxxx (~oxfuxxx@194.110.84.27)
[02:04:55] *** Joins: oriba (~oriba@dynamic-077-013-007-140.77.13.pool.telefonica.de)
[02:04:55] <Filystyn> Great hack, give a declaration of a function and yeah - provide it your self user
[02:06:17] <twkm> the .c that defines a function/object should always #include any .h that has a declaration for same.
[02:06:49] <tusko> twkm, this is the best I could come up with but it doesn't exactly let you call the program which is defined in main.c with files https://www.onlinegdb.com/Bw4zqWv7b
[02:07:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8973:823e:aea0:3392) (Quit: Quit)
[02:08:16] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[02:08:54] *** Quits: oxfuxxx (~oxfuxxx@194.110.84.27) (Ping timeout: 272 seconds)
[02:09:26] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[02:13:03] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:13:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[02:13:46] *** Quits: MerrinX (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.4.1)
[02:14:27] *** Joins: Guest86 (~Guest86@188.210.213.243)
[02:14:33] <Filystyn> goodnight!
[02:14:37] *** Quits: Filystyn (~piotr@user/filystyn) (Quit: leaving)
[02:16:30] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[02:18:23] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:18:43] *** Quits: cthi (~cthi@065-190-217-105.inf.spectrum.com) (Ping timeout: 260 seconds)
[02:20:07] *** Quits: mahmutov (~mahmutov@5.176.33.215) (Ping timeout: 260 seconds)
[02:21:49] *** Quits: drew (~drew@user/drew) (Quit: Quit)
[02:23:46] <twkm> ewww, strncpy.  yay, getaddrinfo.
[02:24:03] *** Joins: drew (~drew@user/drew)
[02:26:32] <twkm> ewww, inet_ntop.
[02:27:15] *** Joins: echo (uid504326@user/echosmile)
[02:29:10] *** Quits: jack_rabbit (~knusbaum@89.187.180.40) (Ping timeout: 272 seconds)
[02:29:19] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:29:51] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[02:31:51] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.236)
[02:32:38] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[02:33:07] *** Quits: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:34:05] <tusko> lol
[02:34:36] <tusko> I tar'd the whol thing up, with the makefile and well-formed input files in an input dir
[02:36:17] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[02:36:56] *** Quits: Akuli (~Akuli@87-94-108-152.bb.dnainternet.fi) (Quit: Akuli)
[02:36:58] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[02:37:36] *** Quits: alch (~alch@151.38.242.169) (Ping timeout: 252 seconds)
[02:39:41] *** Joins: alch (~alch@151.82.182.165)
[02:42:01] *** Joins: pulse (~pulse@user/pulse)
[02:43:06] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 252 seconds)
[02:43:10] <tusko> if I can figure out how to share that I will. It would make it very easy to run on the actual data
[02:43:26] *** Joins: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:43:33] <tusko> As it stands it opens files and then a requester thread and then it just hangs
[02:43:38] <tusko> I assume due to deadlock
[02:43:52] *** Joins: rgrinberg (~textual@177.248.144.104)
[02:43:54] <tusko> or maybe I should spawn requesters and resolvers simultaneously
[02:45:47] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:49:11] *** Quits: Guest86 (~Guest86@188.210.213.243) (Quit: Client closed)
[02:49:43] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk) (Read error: Connection reset by peer)
[02:51:08] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk)
[02:54:39] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[02:55:04] *** Joins: Enitin (~Enitin@82.180.145.226)
[02:56:28] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:59:35] *** Joins: Arthuria (~Arthuria@user/arthuria)
[02:59:53] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[03:04:37] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[03:05:39] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 252 seconds)
[03:06:24] *** Joins: jack_rabbit (knusbaum@gateway/vpn/protonvpn/knusbaum)
[03:07:07] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 256 seconds)
[03:10:39] *** Joins: karakedi (~eAC53C340@user/karakedi)
[03:11:41] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:11:57] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:13:47] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[03:15:33] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 252 seconds)
[03:15:34] *** Quits: greeter (fresh@2604:180:2:117:cafe:babe:dead:beef) (Read error: Connection reset by peer)
[03:17:14] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[03:17:20] *** Joins: boB_K7IQ (~boB_K7IQ@c-67-161-96-203.hsd1.wa.comcast.net)
[03:18:30] <twkm> if you have error checking pthread mutexes i suggest switching to them, which will indicate if you are doing something "wrong" with it that would deadlock a normal mutex.
[03:19:04] *** Joins: seninha (~seninha@user/seninha)
[03:20:47] *** Joins: greeter (fresh@2604:180:2:117:cafe:babe:dead:beef)
[03:20:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:22:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[03:25:00] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[03:25:24] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:27:38] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[03:28:45] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[03:31:32] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[03:31:49] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Client Quit)
[03:32:10] *** Joins: trumae (~trumae@45.170.74.100)
[03:32:27] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.236) (Ping timeout: 260 seconds)
[03:33:09] *** Quits: xbkkd (~F0@user/xbkkd) (Quit:  )
[03:33:48] *** Joins: pizdets (~pizdets@183.182.115.192)
[03:34:23] *** Quits: pizdets_ (~pizdets@183.182.110.13) (Ping timeout: 265 seconds)
[03:34:24] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[03:40:55] *** Joins: Torr (~Torr@user/torr)
[03:43:40] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:45:37] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 240 seconds)
[03:45:58] *** Quits: hvitol (~hvitol@218-145-17-89.fiber.hringdu.is) (Quit: WeeChat 3.4)
[03:48:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[03:49:35] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[03:50:12] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[03:51:18] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:51:50] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk) (Remote host closed the connection)
[03:52:11] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.104.threembb.co.uk)
[03:53:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:55:51] *** Quits: llh (~UPP@user/llh) (Quit: :::: ( UPP ) ::::)
[04:03:12] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[04:05:58] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[04:06:16] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[04:06:20] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:07:25] *** Joins: Torr (~Torr@user/torr)
[04:08:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[04:09:35] *** Quits: soapsudsxx (~soapsudsx@141.193.188.145) (Remote host closed the connection)
[04:09:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:12:10] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[04:17:20] *** Joins: coaxing (~coaxing@user/coaxing)
[04:20:47] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:21:05] *** Joins: archdark (~archdark@2804:14d:4280:513::1001)
[04:21:19] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.104.threembb.co.uk) (Read error: Connection reset by peer)
[04:21:49] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[04:22:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:22:16] *** Joins: Wulf (~Wulf@user/wulf)
[04:26:25] *** Joins: EekTheCat (~EekTheCat@47.155.62.184)
[04:27:49] *** Joins: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl)
[04:30:17] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:42] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:30:46] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[04:30:57] *** Quits: mzxtuelkl (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 240 seconds)
[04:31:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[04:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[04:36:34] *** Joins: seifeslimene (~seifeslim@102.156.202.190)
[04:37:34] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:37:49] *** Quits: msk (~Thunderbi@89.205.124.19) (Quit: msk)
[04:38:12] *** Joins: msk (~Thunderbi@89.205.124.40)
[04:45:12] *** Quits: EekTheCat (~EekTheCat@47.155.62.184) (Quit: Leaving)
[04:46:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[04:47:53] *** Joins: pulse (~pulse@user/pulse)
[04:49:50] *** Joins: malina (~malina@user/malina)
[04:51:36] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[04:53:39] *** Quits: adip (~adip@dii229.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[04:56:13] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:59:39] *** Joins: afterdark (~afterdark@ool-182cdb24.dyn.optonline.net)
[05:00:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[05:03:42] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[05:05:11] <wingsorc> I have a compound literal of a struct where I initialize some of its fields (but not all). What happens to the fields I didn't specify? Are they going to be zero?
[05:05:20] <wingsorc> according to the c standard
[05:07:05] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[05:08:09] <owensjrw> Evening everyone.. I am playing with the advent of code 2021 only on day 2 part 2 but I keep getting the wrong answer.
[05:08:20] <owensjrw> Here is the code I am using: https://pastebin.com/umjzjURh
[05:08:38] <fizzie> wingsorc: Yes, they're zeroed.
[05:08:43] <owensjrw> Here is the text with the data: https://adventofcode.com/2021/day/2/input
[05:09:38] <owensjrw> What am I doing wrong? I come up with 1178003463 as an answer.
[05:10:05] *** Quits: seifeslimene (~seifeslim@102.156.202.190) (Ping timeout: 256 seconds)
[05:10:55] <owensjrw> The instructions for the puzzle https://adventofcode.com/2021/day/2#part2
[05:10:58] <fizzie> Compound literal initialization is the same as regular aggregate initialization, for which C11 6.7.9p21: "If there are fewer initializers in a brace-enclosed list [than elements/members], the remainder of the aggregate shall be initialized implicitly the same as objects that have static storage duration."
[05:11:10] <seninha> Hi, do you know a good reference/book/tutorial on (n)curses?
[05:14:06] *** Quits: afterdark (~afterdark@ool-182cdb24.dyn.optonline.net) (Remote host closed the connection)
[05:15:30] <fizzie> owensjrw: The input is not the same for everyone, you know. In any case, for part 2 you're not supposed to change depth for d/u; they only change the aim.
[05:15:46] *** Joins: cthi (~cthi@065-190-217-105.inf.spectrum.com)
[05:17:56] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[05:18:01] *** Quits: boB_K7IQ (~boB_K7IQ@c-67-161-96-203.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:18:52] <owensjrw> fizzie -- I did not know the input changed for everyone, thats actually pretty cool.
[05:19:32] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[05:20:14] <owensjrw> So don't keep the instructions from part 1 of these puzzles only the instructions for the particular part. ie d/u dont change depth.
[05:21:15] <owensjrw> Thanks again my friends.
[05:22:36] *** Quits: oriba (~oriba@dynamic-077-013-007-140.77.13.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:23:50] <owensjrw> Yep comment out the depth in d/u and I get the correct answer. You all rock...
[05:24:49] *** Joins: meandrain (~meandrain@2a02:2f0e:f708:1200:ace9:8e52:80af:8a8c)
[05:31:19] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:33:11] <fizzie> Sometimes the part 2 builds on top of part 1 more, sometimes less. But the text hints at that too. ("The commands also mean something entirely different than you first thought: --")
[05:33:19] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 260 seconds)
[05:36:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[05:37:18] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[05:38:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:38:32] *** Quits: jack_rabbit (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 272 seconds)
[05:40:18] <owensjrw> fizzie do I need to be saving all my codes to finish the puzzle?
[05:41:41] <owensjrw> also I seen on another message system other were doing this min multiple languages I planned to try and complete it all in C. Is is possible?
[05:41:59] <owensjrw> *min -> in
[05:43:47] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[05:44:42] *** Joins: malloy (~jimery@116.30.222.122)
[05:48:08] *** Joins: fossforus (~stan@69-218-221-16.lightspeed.rlghnc.sbcglobal.net)
[05:49:01] *** eldritch_ is now known as eldritch
[05:51:29] <fizzie> Oh, it's certainly possible, and I'm sure there's people doing AoC in C. Whether you want to keep your solutions is up to you. Occasionally there's things you can reuse from previous solutions. Especially "Intcode" in 2019. Nothing that much in 2021 though.
[05:55:35] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[05:56:39] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 260 seconds)
[05:56:46] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:57:36] *** Joins: teepee (~teepee@openscad/teepee)
[05:58:16] <owensjrw> Thank you.
[06:02:37] *** Joins: Soni (~quassel@autistic.space)
[06:02:57] *** Quits: reset (~reset@user/reset) (Quit: reset)
[06:02:57] *** Joins: rampart (~rampart@2607:fb90:a239:6f9e:bc2f:d06d:9220:b7c)
[06:03:52] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[06:03:55] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[06:04:41] *** Joins: csrf (~csrf@user/csrf)
[06:05:24] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[06:05:41] *** Joins: tusko (~yeurt@user/tusko)
[06:07:53] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[06:09:06] *** Joins: korg815 (~korg815@user/korg815)
[06:09:48] *** Joins: rgrinberg (~textual@177.248.144.104)
[06:10:13] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 240 seconds)
[06:15:19] *** Parts: CCCG2022 (~dell@120.245.30.14) ()
[06:19:09] *** Joins: RETRO100 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[06:19:18] <owensjrw> One last question tonight I had something odd happen I did something like: char first[x]; char second[x]; printf("Print first %s\t print second %s\n", first, second);
[06:19:19] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[06:19:33] <owensjrw> the output was: output: Print first firstsecond     print second second
[06:19:50] <owensjrw> why did firstsecond come up on the first %s?
[06:20:22] <owensjrw> nevermind just thought about it I never added a \0 to the strings
[06:20:38] <owensjrw> Thanks for listening though, you all still rock...
[06:20:39] <twkm> they aren't strings without one.
[06:20:39] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:20:59] <owensjrw> still compiled and ran though
[06:21:34] <owensjrw> i did initialize with char name[x] = {0};
[06:22:02] <owensjrw> but I used all x spaces allocated.
[06:22:06] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[06:22:08] <owensjrw> with chars
[06:22:39] <owensjrw> I need to add another memory space and add a terminating \0 to it.
[06:22:47] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[06:23:15] *** Joins: fstd (~fstd@xdsl-89-0-80-77.nc.de)
[06:23:39] *** Quits: RETRO100 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Client Quit)
[06:25:34] <owensjrw> yep fixed it. Its getting scary now I think I might be past noobie stage.. whats my new title :-)
[06:25:59] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[06:26:00] *** Joins: RETRO46 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[06:26:17] *** Quits: fstd_ (~fstd@xdsl-78-35-89-30.nc.de) (Ping timeout: 240 seconds)
[06:26:35] *** Joins: Inline__ (~Inline@p200300cd47094800372fcc81f701114e.dip0.t-ipconnect.de)
[06:27:04] *** Joins: eck (~root@user/eck)
[06:27:43] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[06:27:56] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 272 seconds)
[06:29:19] *** Quits: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:32:37] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[06:34:06] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 252 seconds)
[06:36:19] *** Quits: alch (~alch@151.82.182.165) (Read error: Connection reset by peer)
[06:36:51] *** Joins: soapsudsxx (~soapsudsx@209.221.40.132)
[06:38:11] *** Joins: DSee (~DSee@45.87.214.246)
[06:40:03] *** Joins: alch (~alch@ca-18-210-115.service.infuturo.it)
[06:41:14] *** Quits: RETRO46 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[06:41:55] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[06:43:52] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Read error: Connection reset by peer)
[06:44:46] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4.1)
[06:46:55] *** Joins: CCCG2022 (~dell@120.245.30.14)
[06:46:59] *** Parts: CCCG2022 (~dell@120.245.30.14) ()
[06:47:06] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[06:47:50] <tusko> What's the easiest way to remove a newline character from the end of a char*
[06:48:00] <tusko> elegant solutions only, none of this willy foo foo shit
[06:48:44] <pnbeast> dunning-krugerjrw?
[06:48:51] *** Joins: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl)
[06:48:54] <twkm> char* is so wrong-think.  anyway, overwrite it with a null character.
[06:49:20] *** Joins: zer0x (~zer0x@1.55.210.186)
[06:50:12] <tusko> char* is how we refer to strings when we become elite, mult-threaded embeded rtos programming engineers
[06:50:28] <tusko> didn't mean to hurt anyone
[06:50:55] <tusko> see how I optimized unecessary letters from that statement, even
[06:52:00] *** Quits: cthi (~cthi@065-190-217-105.inf.spectrum.com) (Ping timeout: 272 seconds)
[06:52:12] *** Quits: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 240 seconds)
[06:53:52] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[06:54:49] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:58:02] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[06:59:15] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[07:02:42] <twkm> if you understand that strings are a data format then a newline the end of the string means just prior to the terminating null character so overwriting it with a null character causes the string to end one character earlier leaving the only issue being a test to see if it is in fact a newline.
[07:03:53] <twkm> wag: if you are discarding a newline from an fgets it is usually better to know whether one was present than to blindly discard it.
[07:06:11] *** Joins: RooftopJoe (~RooftopJo@85.186.15.245)
[07:13:03] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[07:14:14] *** Joins: xiongxin (~Thunderbi@2409:8954:3814:5943:4c51:c061:a965:2878)
[07:15:32] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[07:16:16] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[07:18:07] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[07:18:36] *** Quits: xiongxin (~Thunderbi@2409:8954:3814:5943:4c51:c061:a965:2878) (Ping timeout: 240 seconds)
[07:19:58] *** Quits: rampart (~rampart@2607:fb90:a239:6f9e:bc2f:d06d:9220:b7c) (Remote host closed the connection)
[07:21:02] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[07:23:55] *** Quits: DSee (~DSee@45.87.214.246) (Ping timeout: 260 seconds)
[07:25:47] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 260 seconds)
[07:30:18] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:31:00] *** Joins: EekTheCat (~EekTheCat@47.155.62.184)
[07:35:25] <fowl> damn what can I use instead of decltype in c?
[07:38:05] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[07:38:42] <RooftopJoe> fowl: that makes no sense in C since C has no templates
[07:38:54] <RooftopJoe> whatever you are trying to do is wrong
[07:40:05] <fossforus> most non-data "type" system anti-patterns are wrong
[07:40:09] <fossforus> s/most/all
[07:40:28] *** Quits: trumae (~trumae@45.170.74.100) (Remote host closed the connection)
[07:42:23] *** Joins: begriffs (~begriffs@user/begriffs)
[07:51:38] <fowl> my goal is something like `#define CHECK_CALL(fn, ...) void* fnx = (fn); if(fnx) ((decltype(fn))fnx)(__VA_ARGS__);` just to avoid evaluating fn twice
[07:56:07] <RooftopJoe> That's... not how any of that works. And you can't even use that macro more than once per scope since you'll be declaring fnx a bunch of times.
[07:56:14] <RooftopJoe> Maybe you should read about what macros do.
[07:56:26] <fowl> what if its inside do{ }while(0)
[07:57:16] <RooftopJoe> First of all, what is the purpose of this?
[07:57:30] <RooftopJoe> This CHECK_CALL thing.
[07:57:45] <fossforus> evil and villainry, I presume
[07:57:49] <RooftopJoe> Why don't you know what it is you're calling?
[07:58:04] <RooftopJoe> Again, there is no generic programming in C so I can't even imagine a valid use case.
[07:58:10] *** MrAureliusR_ is now known as MrAureliusR
[07:58:12] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[07:58:16] <fossforus> well, there is a _Generic in c11...
[07:58:32] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[07:58:42] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:58:48] <fossforus> and I think c2x might ratify it as a standard keyword?
[07:59:37] <ent58> fossforus: I've always wanted to play around with that, I know it's only really generic selection, but how far can you go with it?
[07:59:41] *** Joins: RETRO87 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[08:00:03] <fossforus> idk I haven't touched it, I just skimmed the standard and saw it
[08:01:02] <fowl> fn is a function pointer in this case that takes the rest of the arguments
[08:01:47] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[08:02:15] <ent58> If I recall it's just allowing you to have "overloads" that map to one generic expression, so that `abs()`; for example can take float, double, char, int, etc. and map them to real functions fabs, fabsd, absi, or something like that
[08:03:08] <fowl> well the macro works fine if I just use `fn` twice, so I will just keep doing that
[08:03:25] *** Quits: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[08:04:53] <fossforus> make another macro to pass fn twice to the first macro
[08:05:00] <fossforus> wee
[08:05:09] *** Quits: RooftopJoe (~RooftopJo@85.186.15.245) (Quit: Client closed)
[08:06:10] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:08:07] *** Joins: trumae (~trumae@45.170.74.100)
[08:12:11] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[08:14:18] <tusko> man, I have a jacked up error.
[08:15:15] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[08:15:21] <ent58> sounds hydraulic
[08:15:42] <dave0> could be a rap song
[08:16:07] <tusko> https://bpa.st/CAKQ
[08:16:18] <tusko> Does anything jump out. It references nothing I've written
[08:16:51] <tusko> obviously I think its related to some stuff I dynamically allocated, but who knows where
[08:16:59] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:17:06] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[08:17:35] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[08:17:50] <tusko> I'm running valgrind -s --show-leak-kinds=all --leak-check=full  ./multi-lookup 10 10 requested.txt resolved.txt input/names*
[08:17:57] <tusko> can valgrind tell me more?
[08:18:42] <ent58> all of that looks like a trace of dynamic loader code doing dynamic loader things, does your code work with dl~ and friends directly or
[08:19:08] <tusko> I haven't used dl ever in my life that I know of
[08:19:24] <RETRO87> hi I didnt join this channel
[08:19:31] <fossforus> yes you did
[08:19:33] <RETRO87> it joined me
[08:19:36] <fossforus> how are you talking in here then
[08:19:37] <fossforus> dang
[08:19:38] <fossforus> that's deep
[08:19:42] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 252 seconds)
[08:20:22] <dave0> tusko: what's the code?
[08:21:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[08:22:02] <dave0> it's not impossible that a library allocates some memory and never frees it
[08:23:02] <fossforus> I don't even get a totally clean valgrind memcheck with just my libc
[08:23:11] <fossforus> it's probably nothing
[08:23:14] <dave0> it might allocate a buffer that is used during the entire execution
[08:23:16] <dave0> yeah
[08:23:23] <dave0> i think the timezone stuff does that
[08:23:58] <tusko> dave0 https://onlinegdb.com/huE-VCIwL
[08:23:59] <fossforus> I think there's a flag you can pass to valgrind to ignore dynlibs
[08:24:42] <fossforus> or even better, a flag you can pass to a developer to fix the dynlibs
[08:28:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:28:44] <tusko> for real
[08:31:53] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[08:32:38] *** Joins: Bandicoot (~bandicoot@212.58.114.93)
[08:33:14] *** Parts: RETRO87 (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[08:38:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:39:09] <fossforus> is there a max size for _Alignof? I assume it should always fit in a uint8_t, because I don't think there are any base types larger than 128 bits...?
[08:39:37] <fossforus> I guess if you took the alignment of a massive struct lol
[08:40:09] <fossforus> or an array
[08:41:20] <fossforus> but assuming no compound data types, then it should be safe I'd think
[08:41:33] <fossforus> maybe I should assume that because I use compound data types all the time
[08:42:14] *** Joins: ekathva (~ekathva@2001:999:230:5e27:e9e2:3092:814c:5841)
[08:42:38] <fossforus> printf time
[08:42:57] <dave0> a large struct doesn't necessarily mean large alignment
[08:44:00] <dave0> we had this discussion the other day.. it was agreed that the alignment of a struct is as strict as the alignment of each member
[08:44:12] <fossforus> I see
[08:44:40] <dave0> so if you had a struct of ints and doubles, and int alignment is 4 but double alignment is 8, the struct alignment would be the same as double
[08:45:15] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:45:36] <dave0> also _Alignof counts in bytes, not bits
[08:45:43] <fossforus> yes
[08:45:57] <fossforus> so uint8_t should be safe practically everywhere
[08:45:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:46:13] <dave0> yup
[08:46:28] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[08:46:41] <dave0> we disagreed on the usefulness of knowing the alignment, but oh well :-)
[08:47:56] <caze> fossforus: ,c11 6.2.8p4
[08:47:57] <candide> fossforus: http://www.iso-9899.info/n1570.html#6.2.8p4 [Alignment of objects] Alignments are represented as values of the type size_t. Valid alignments include only those values returned by an _Alignof expression for fundamental types, plus an additional implementation-defined set of values, which may be empty. Every valid alignment value shall be a nonnegative integral power of two.
[08:49:57] *** Quits: Torr (~Torr@user/torr) ()
[08:50:33] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:50:53] <fossforus> tested with a int[69] array, still aligns 4; I'm just gonna put it in uint8_t
[08:50:54] *** Quits: Bandicoot (~bandicoot@212.58.114.93) (Quit: Leaving)
[08:50:59] <fossforus> no idea why the standards says that needs size_t
[08:51:09] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:51:44] <tusko> I guess pthread_exit(NULL) was creating the leaks
[08:51:55] *** Joins: aerysh (~aerysh@94.198.43.93)
[08:52:18] <dave0> fossforus: if i was in charge, i'd just make everything int
[08:52:19] *** Quits: aerysh (~aerysh@94.198.43.93) (Client Quit)
[08:52:51] *** Joins: aerysh (~aerysh@2a0a:b640:1:5a::a07d)
[08:53:11] <dave0> alas no
[08:53:26] <caze> fossforus: I think you misunderstand alignment if you place any value on that particular test.
[08:54:29] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:54:32] <fossforus> caze: probably do
[08:54:35] <caze> (An array of any number of ints still has the same alignment as int)
[08:54:52] <fossforus> I'm writing an arena allocator, so there will be separate types in one buffer object
[08:55:12] <dave0> i think there's a maxalign
[08:55:13] <caze> Maybe proceed no further until you understand alignment?
[08:55:29] <ent58> union through-casts here we come
[08:55:30] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[08:55:38] <fossforus> I will proceed with printf, cautiously
[08:55:41] <fossforus> and fail
[08:55:43] <fossforus> as I always do
[08:55:51] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[08:55:57] <caze> fossforus: Also, "testing" doesn't really work with C.
[08:56:07] <caze> ,tias
[08:56:08] <candide> "Try It And See" may work in other languages, but not in C due to the nature of undefined behavior/unportable code. Such coding-by-experimentation often leads to situations such as "But it worked fine earlier!" and/or "But it worked on my machine!". https://ramblings.implicit.net/c/2014/04/20/c-is-not-a-try-it-and-see-language.html
[08:56:25] <dave0> fossforus: https://en.cppreference.com/w/c/types/max_align_t
[08:57:32] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[08:57:53] <caze> dave0: Why can't you just ctrl-f the standard?
[08:58:03] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:58:35] <fossforus> minus the ctrl-
[08:59:29] <caze> dave0: What do you think of this sentence in the link you pasted? "max_align_t is usually synonymous with the largest scalar type, which is long double on most platforms, and its alignment requirement is either 8 or 16."
[08:59:37] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[08:59:46] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:00:18] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[09:00:39] <ent58> too bad if you're working with larger vector types! You can't even check the alignment of a pointer in a manner which isn't UB either
[09:01:04] <ent58> I've learned to live on the sword of UB though, because I guess what the secret agents never tell you
[09:01:12] <dave0> i found something
[09:01:26] <ent58> is that there's UB that's violating a constraint, and UB that isn't
[09:01:28] <fossforus> ent58: you can check the alignment of the vector's type though, right?
[09:01:41] <caze> The trick is to contain the UB.
[09:01:49] <ent58> You can, but at runtime, you can't verify a pointer is aligned
[09:01:51] <dave0> caze: oh you already made the bot do 6.2.8
[09:01:56] <ent58> not without UB
[09:02:27] <dave0> ,c11 6.2.8p2
[09:02:27] <candide> http://www.iso-9899.info/n1570.html#6.2.8p2 [Alignment of objects] A fundamental alignment is represented by an alignment less than or equal to the greatest alignment supported by the implementation in all contexts, which is equal to _Alignof (max_align_t).
[09:03:19] <caze> dave0: "max_align_t is usually synonymous with the largest scalar type" What do you think this means?
[09:03:46] <caze> dave0: It seems to be saying that alignments are floating point values.
[09:04:14] <fossforus> ent58: wouldn't this be relevant only for a vector of pointers? or do I misunderstand
[09:04:30] <ent58> sort of like how `void *p = (void *)(void (*)(void));` is UB but the behavior is exactly what you would expect on any platform that's POSIX, and even most that aren't
[09:04:31] <dave0> don't overload me with too much information, it was my first quote of the standard ever
[09:05:04] <caze> dave0: Yes, good job. That's not from the standard however, that's from the first link you pasted.
[09:05:38] <caze> dave0: (which is nonsense)
[09:05:45] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[09:05:45] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[09:05:45] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[09:05:45] *** Quits: n1000_ (~n1000@user/n1000) (*.net *.split)
[09:05:45] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:05:45] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[09:05:45] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[09:05:45] *** Quits: aesin (~aesin@81.211.127.107) (*.net *.split)
[09:05:46] <tusko> should i just ignore the leak from pthread_exit(NULL) using dl_open() or is there a way to fix it?
[09:05:48] *** Quits: epony (epony@user/epony) (*.net *.split)
[09:05:49] *** Quits: kaichiuchi (uid547644@user/kaichiuchi) (*.net *.split)
[09:05:49] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[09:05:49] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:05:49] *** Quits: high_ground (~high_grou@user/high-ground/x-5722129) (*.net *.split)
[09:05:49] *** Quits: axon (~x@tetra.plasm.in) (*.net *.split)
[09:05:49] *** Quits: w41_ (~w41@45.76.32.7) (*.net *.split)
[09:05:50] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (*.net *.split)
[09:05:51] *** Joins: biotty (~coien@li35-173.members.linode.com)
[09:05:57] *** Joins: w41 (~w41@45.76.32.7)
[09:05:59] *** Joins: aesin (~aesin@81.211.127.107)
[09:06:01] *** Joins: kaichiuchi (sid547644@user/kaichiuchi)
[09:06:02] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[09:06:04] *** Joins: Epakai (Epakai@drislock.org)
[09:06:05] *** Joins: axon (~x@tetra.plasm.in)
[09:06:08] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[09:06:09] *** Joins: sudden (~cat@user/sudden)
[09:06:14] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:06:25] *** Joins: n1000_ (~n1000@user/n1000)
[09:06:39] *** Joins: high_ground (~high_grou@user/high-ground/x-5722129)
[09:07:09] <tusko> perhaps pthread_detach() somewhere
[09:09:12] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:09:46] *** Joins: Guest6037 (epony@lz2.eu)
[09:09:49] <ent58> fossforus: what I mean is that if you receive pointers to memory from sources that cannot guarantee more than `max_align_t` alignment, and you want to ensure it's aligned for, say, a 32 byte vector type
[09:10:01] <ent58> you can't do that without UB
[09:10:06] <ent58> but it's "soft UB"
[09:10:57] <caze> ent58: UB is UB.
[09:11:38] <caze> ent58: It's sort of moot to discuss UB in the same context as "32 byte vector types".
[09:12:18] <caze> (C doesn't have vector types, so you've already left the realm of standard C, which is the only context where UB has any relevance)
[09:12:51] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 245 seconds)
[09:13:00] *** Quits: archdark (~archdark@2804:14d:4280:513::1001) (Remote host closed the connection)
[09:13:35] *** Quits: aerysh (~aerysh@2a0a:b640:1:5a::a07d) (Quit: Leaving)
[09:13:35] <caze> UB is a term use by the standard, for things which the standard does not concern itself with.
[09:14:08] <fossforus> ent58: makes sense, other than the UBsoft part
[09:14:11] <caze> Just because your implementation extends behaviors does not make it standard behavior.
[09:16:53] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[09:17:01] <fossforus> I think I understand alignment now
[09:17:35] <nitrix> _Alignof(understand_t)
[09:20:12] <fossforus> if I create a byte buffer with unsigned char * with the intent to store other types, do I need to initialize the byte buffer with posix_memalign to ensure the alignment of the first datatype I store in it?
[09:21:02] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-24-107.pa.qld.optusnet.com.au)
[09:22:18] <nitrix> Your can read and write with an `unsigned char *` all your want; the challenge is when you convert it to other pointer types.
[09:23:20] <ent58> fossforus: Union type punning is specfically allowed, with the caveat that you're sure you've done it in an aligned fashion...I can't remember if it's non-normative or not
[09:23:30] *** Quits: kurahaupo (~kurahaupo@pa49-182-133-2.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[09:24:00] *** Quits: soapsudsxx (~soapsudsx@209.221.40.132) (Ping timeout: 272 seconds)
[09:24:38] <nitrix> The objects within your buffer needs to be padded accordingly, otherwise the pointers will work with unaligned addresses on strange boundaries.
[09:24:40] <caze> fossforus: malloc already returns maximally aligned memory.
[09:24:57] <fossforus> I see, so I should align to a union with all the types I should expect to store in the buffer?
[09:25:04] *** Quits: EekTheCat (~EekTheCat@47.155.62.184) (Remote host closed the connection)
[09:25:09] *** Quits: Jong (~Jong@184-99-74-148.boid.qwest.net) (Ping timeout: 252 seconds)
[09:25:22] <fossforus> or just whatever is standardized to have the largest alignment
[09:25:23] <nitrix> structs are also padded at the end such that an array of them will remain aligned.
[09:25:45] <dave0> fossforus: are you just rolling your own malloc as an exercise?
[09:26:06] <fossforus> I'm writing a regional/arena allocator https://www.gingerbill.org/article/2019/02/08/memory-allocation-strategies-002/
[09:26:11] <nitrix> Actually, literally every type gets padded for that very reason.
[09:26:32] <fossforus> I could just pack the types, but I want to align them
[09:26:54] <fossforus> and I'm wondering if I should use posix_memalign on the byte buffer for the initial alignment to the largest alignment I will have in the buffer
[09:27:11] <nitrix> You don't need posix. C11 has everything you need.
[09:27:27] <caze> fossforus: Where are you getting the memory from?
[09:28:03] <ent58> caze: I think this is where I want to understand more about the philosophy behind leaving something undefined, not the fact that it is. It seems like a lot of basic systems-level operations are UB, which makes sense, but how do I know when, as an example, casting a function pointer to void * will work as I expect?
[09:28:13] <fossforus> I don't know, though if I requested a specific alignment I'd think that'd let me know
[09:28:35] <caze> ent58: By reading the standard.
[09:28:35] <fossforus> <heap>
[09:28:46] <caze> > fossforus: malloc already returns maximally aligned memory.
[09:29:51] <caze> ent58: ,c11 6.3.2.3p1
[09:29:51] <candide> ent58: http://www.iso-9899.info/n1570.html#6.3.2.3p1 [Pointers] A pointer to void may be converted to or from a pointer to any object type. A pointer to any object type may be converted to a pointer to void and back again; the result shall compare equal to the original pointer.
[09:30:11] <caze> ent58: Note it says specifically *object* type.
[09:30:19] <ent58> if I malloc a `struct { double data[4]; };`, on a lot of implementations where max_align_t is 16, it won't give me the required alignment of 32...I've ran into that. I know there's a C11 allocation function that does allow you to specify overaligned sizes, so that's just a minor thing
[09:30:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:31:20] <caze> ent58: Why would the alignment for that be 32?
[09:31:47] <ent58> loading aligned in a 256 bit register, as a common case
[09:31:53] <fossforus> because double data[4] was secretly defined to a 32 byte vector type
[09:32:30] <dave0> you could let the user of your library specify the alignment
[09:32:40] <dave0> init_arena(int alignment);
[09:32:52] <ent58> unless I'm entirely mistaken and max_align_t takes into account hardware maximal alignment per the implementation
[09:33:10] <ent58> so on any architecture with avx/avx2, as an example
[09:33:11] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[09:33:19] <ent58> max_align_t would always be 32+
[09:33:26] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[09:33:51] <dave0> c doesn't have simd types that would be an extension, and who knows how that works
[09:35:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:35:15] *** Joins: Viewday1152 (~Viewday@user/viewday)
[09:35:18] <ent58> Ah right, that...makes complete sense. There's no way to actually use that data in a way that would require 32 byte alignment in standard C
[09:35:26] <ent58> I'm learning
[09:35:27] <ent58> I swear
[09:35:27] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:36:11] <ent58> (assuming max_align_t commonly 16, for scalar `long double` which is usually the max)
[09:36:36] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[09:36:39] *** Viewday1152 is now known as Viewday115
[09:36:49] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[09:36:50] *** Quits: echo (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[09:37:39] <fossforus> so the article I linked on arena allocation is wrong since malloc will always max align, and there's no reason to correct the alignment?
[09:37:49] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[09:37:52] <fossforus> if so, that makes my life easy
[09:38:07] <ent58> Is there a way to figure out what extensions you are using at compile time?
[09:40:00] <caze> ent58: That's what configure and friends are for.
[09:40:26] <fossforus> well, the article doesn't assume you use malloc
[09:40:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:40:38] *** Quits: malina (~malina@user/malina) (Quit: malina)
[09:40:45] <caze> fossforus: If you do use malloc. If you do unsigned char backing_buffer[256]; then all bets are off.
[09:41:38] <dave0> ent58: yeah ,{predef}
[09:41:38] <candide> ent58: predef is http://predef.sourceforge.net/ -- the Pre-defined C/C++ Compiler Macros project
[09:41:44] <ent58> if you _Alignas(max_align_t) that buffer, would you think be okay?
[09:41:49] <fossforus> if I plan to store int, float, and long in the arena, I could save memory by aligning long with posix_memalign instead of malloc, no?
[09:41:50] <ent58> then*
[09:42:01] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[09:42:18] *** Joins: Viewday115 (~Viewday@user/viewday)
[09:42:22] <caze> fossforus: How much do you think you'd save?
[09:42:27] <dave0> ent58: you can use those macros to figure out which compiler you're using, then you could use compiler-specific things
[09:42:33] <fossforus> enough to justify 1 time boiler plate code :>
[09:42:44] *** Quits: nq_ (~nq@2a02:2f08:e015:a900:541c:4edd:d976:8aa) (Ping timeout: 252 seconds)
[09:43:09] <fossforus> but, exactly max_align_t - _Alignof(long), more specifically
[09:43:30] <fossforus> s/max_align_t/sizeof(&)
[09:43:56] <caze> fossforus: Safe to say you would save less than the number of bytes it would take in your source code to implement it.
[09:44:05] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:44:38] <fossforus> sounds like a good deal to me
[09:44:54] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[09:46:07] <ent58> dave0: thanks:)  I will take a look, this way I can rest about my code hitting a compiler that doesn't support something needed. I use pragmas to prevent -Wpedantic and friends from screaming at specific places in my code, and I wanted to make sure I'm doing that while also having at least attempted to verify that it's defined for the
[09:46:08] <ent58> implementation
[09:46:08] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:47:06] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:47:43] <dave0> ent58: i don't think predef goes into that much detail, but you could read the documentation on your compiler
[09:47:49] <fossforus> well I've learned a lot today, big kudos for caze
[09:48:01] <dave0> i know gcc sets some preprocessor macros to indicate SSE and AVX and stuff
[09:48:32] <caze> All I did was point out things you don't know.
[09:48:50] <fossforus> I mean, that's the entire point of education if you think about it :)
[09:49:34] <ent58> dave0: I think that's just it, I want to be able to support multiple compilers
[09:49:42] <ent58> perhaps I should drop that idea
[09:49:58] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:51:14] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[09:51:25] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:52:21] *** Joins: malina (~malina@user/malina)
[09:52:37] *** Joins: kdc (~kdc@196-210-1-81.dynamic.isadsl.co.za)
[09:52:47] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[09:52:51] <ent58> hmm...yeah from the outset, I've wanted to support multiple compilers, multiple OSes, but having the granularity to know if some element of UB is defined for the implementation the code's being compiled it
[09:52:52] <ent58> in*
[09:53:13] *** Quits: kdc (~kdc@196-210-1-81.dynamic.isadsl.co.za) (Max SendQ exceeded)
[09:53:20] <ent58> like the common case of dlsym(),
[09:53:23] <ent58> or other goodies
[09:53:36] <ent58> (GetProcAddress, etc)
[09:53:42] *** Joins: kdc (~kdc@196-210-1-81.dynamic.isadsl.co.za)
[09:58:14] *** Joins: vartan (~vartan@047-028-106-153.res.spectrum.com)
[10:03:14] <fossforus> so I'm reading the main disadvantage of aligned_alloc and friends is an initial slow allocation, and should be used sparingly, only for large long-lived buffers
[10:03:20] <fossforus> which is exactly what I'm doing, so I will
[10:03:52] <fossforus> I'm guessing finding the alignment is slow
[10:03:53] *** Quits: trumae (~trumae@45.170.74.100) (Remote host closed the connection)
[10:08:02] *** Joins: moog_ (~moog@98.97.84.173)
[10:08:04] *** Joins: inversed_ (~inversed@94.13.111.159)
[10:08:39] *** Quits: inversed (~inversed@94.13.111.159) (Ping timeout: 260 seconds)
[10:10:40] <fossforus> vertex data for a graphical program
[10:10:48] *** Quits: moog__ (~moog@98.97.84.79) (Ping timeout: 252 seconds)
[10:11:26] *** Joins: moog (~moog@98.97.83.73)
[10:11:35] <fossforus> though I'd think finding something aligned max_align_t would take longer (?)
[10:13:24] *** Quits: moog_ (~moog@98.97.84.173) (Ping timeout: 240 seconds)
[10:13:33] *** Joins: moog__ (~moog@98.97.83.73)
[10:15:43] <dave0> if you really want some alignment it's easy enough to do    int mask = (1 << alignment)-1; char *ptr = malloc(size + mask); ptr = (ptr + mask) & ~mask; return ptr;
[10:15:55] <ent58> UB
[10:16:25] *** Quits: moog (~moog@98.97.83.73) (Ping timeout: 246 seconds)
[10:16:35] <dave0> yeah probably
[10:16:39] <dave0> oh well
[10:17:58] <ent58> I've dealt with the exact same problem, verifying addresses from other sources, and from what I can find, there's no way to do that in a standard fashion
[10:18:33] <ent58> even conversion to uintptr_t doesn't help because it's not guaranteed to even make sense in the way you would expect (could be segmented representation, could be addresses that don't map linearly to the object, etc)
[10:19:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:22:01] *** Quits: moog__ (~moog@98.97.83.73) (Ping timeout: 246 seconds)
[10:25:03] <ent58> best form I've found is
[10:26:32] <ent58> `((uintptr_t)((const void *)ptr)) % (alignment) == 0;`
[10:27:07] *** Quits: vartan (~vartan@047-028-106-153.res.spectrum.com) (Quit: Leaving)
[10:27:09] *** Quits: malloy (~jimery@116.30.222.122) (Ping timeout: 265 seconds)
[10:27:30] <ent58> any object pointer can be converted to void *, void * can be converted to uintptr_t in an implementation defined way, and then you can play with any bits
[10:28:01] <dave0> i'm not afraid to cast a pointer to an int
[10:28:12] <supakeen> dave "the wild one" 0
[10:28:20] <dave0> :-p
[10:28:22] <ent58> a legend
[10:28:34] <ent58> he who tests the standard.
[10:29:01] *** Joins: malloy (~jimery@116.30.222.122)
[10:29:13] <ent58> I'm certain there's not a compiler in the universe that would do something like a pointer cast to unsigned long incorrectly
[10:29:21] <ent58> but the standard sayeth
[10:29:30] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:30:18] *** Joins: Jong (~Jong@2620:10d:c090:400::5:bdbd)
[10:31:10] *** Joins: SR-71 (~user@user/SR-71)
[10:31:44] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[10:32:29] <rcf> ent58: quite a few actually.
[10:32:37] <rcf> Notably Windows.
[10:33:33] <supakeen> Which part is the undefined part, pointer arithmetic on a non-uintptr?
[10:33:57] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[10:33:57] <supakeen> Or the conversion?
[10:34:41] *** Joins: Enitin (~Enitin@82.180.145.226)
[10:34:49] <ent58> ah yeah, so....`sizeof(integer_type) != sizeof(void *)` notwithstanding
[10:34:54] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[10:35:01] <rcf> On Windows it would be wrong because sizeof(long) is still 4 on 64-bit
[10:35:10] <ent58> right
[10:35:21] <dave0> windows having long=32 bits is no sillier than having int!=64 bits
[10:35:27] <ent58> size_t would be sufficient, uintptr_t is the correct answer
[10:35:41] *** Quits: alch (~alch@ca-18-210-115.service.infuturo.it) (Read error: Connection reset by peer)
[10:35:49] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[10:36:04] <rcf> dave0: I'm not saying it's silly, but it is silly using arbitrary int types for pointers, and a cause of many bugs
[10:36:19] <ent58> supakeen: it's left undefined what the conversion to uintptr_t "means"
[10:36:39] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 252 seconds)
[10:37:04] <ent58> so while you think you're and masking the end bits to get an alignment value, it could be that you're barking up an entirely incorrect tree e.g. the layout is not flat
[10:37:04] <rcf> Which is necessary to allow for lossless conversions given more exotic addressing schemes
[10:38:28] <supakeen> Right 🙂
[10:38:48] <ent58> What I would like to say
[10:39:06] <ent58> is that on any implementation where the address space IS flat, that operation WILL work
[10:39:20] <ent58> but that's not a guarantee I think can be made
[10:40:19] *** Joins: alch (~alch@ca-18-210-246.service.infuturo.it)
[10:40:27] <rcf> You could design an architecture that is particularly hostile to have a flat address space, but tag pointers using the LSB
[10:40:44] <ent58> yep
[10:41:19] *** Joins: plastico (~plastico@neomutt/plastico)
[10:41:22] <ent58> I have code that uses low bits of pointers for things, and it's all a brittle house of cards
[10:41:26] <ent58> it makes me sad
[10:41:38] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[10:42:31] <rcf> Thankfully C11 rectifies all of this
[10:42:35] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[10:42:36] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[10:42:38] <ent58> what O.O
[10:42:44] <rcf> Well, the original problem
[10:42:50] <rcf> You get aligned_alloc()
[10:42:54] <ent58> ah
[10:45:02] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[10:45:21] *** Joins: nate1 (~nate@98.45.167.61)
[10:47:29] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[10:49:57] *** Joins: fe23 (~fe23@2409:8a34:466:6010:f4fd:eac0:60cb:c468)
[10:50:01] *** Quits: nate1 (~nate@98.45.167.61) (Ping timeout: 246 seconds)
[10:51:21] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:51:34] *** Joins: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru)
[10:53:58] *** Joins: xiongxin (~Thunderbi@117.136.33.130)
[10:55:50] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[10:56:05] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[11:00:01] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[11:02:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[11:06:28] *** Joins: VoidSync (~sync@user/voidsync)
[11:12:10] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[11:12:15] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[11:12:31] *** Joins: tusko (~yeurt@user/tusko)
[11:12:37] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 250 seconds)
[11:13:43] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[11:14:41] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[11:16:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:18:05] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:19:30] *** Joins: Enitin (~Enitin@82.180.145.230)
[11:22:00] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[11:28:01] *** Joins: adip (~adip@dev80.neoplus.adsl.tpnet.pl)
[11:34:05] *** Parts: VoidSync (~sync@user/voidsync) ()
[11:34:32] <amosbird> Hello! what does "robust" mean when describing robust condition variables?
[11:38:16] <rindolf> amosbird: hi
[11:39:04] <rindolf> amosbird: it means 'reliable'
[11:41:57] <amosbird> rindolf: Hmm, any formal definition?
[11:42:05] *** Quits: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a) (Ping timeout: 252 seconds)
[11:42:08] <amosbird> like what does it break when not robust
[11:42:28] <amosbird> Is it UB to use condvar across different processes?
[11:42:36] <amosbird> with SHM of course
[11:43:12] <rindolf> amosbird: nevermind
[11:44:40] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:07] *** Joins: Rounin (~david@84.212.130.215)
[11:49:46] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: hussam (~hussam@user/hussam) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: Akawama[m] (~akawama@user/akawama) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: james[m]1 (~jamesjame@2001:470:69fc:105::1:5aa1) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: bobgnarly[m] (~bobgnarly@2001:470:69fc:105::1:cfee) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: drflashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: gruekun[m] (~gruekunbo@2001:470:69fc:105::1:e059) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: predawn[m] (~amkematri@2001:470:69fc:105::1:bdaf) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: lole[m]1 (~lolecfxre@2001:470:69fc:105::1:dffe) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: qazo[m] (~qazomatri@2001:470:69fc:105::1:e344) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: anom777[m] (~anom777hi@2001:470:69fc:105::1:e598) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: tlp[m] (~tlphaloge@2001:470:69fc:105::1:e10c) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: kaji (~kajiryoji@2001:470:69fc:105::405b) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: jwoe324 (~jwoe324@2001:470:69fc:105::1:1a67) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5) (Quit: Bridge terminating on SIGTERM)
[11:49:58] *** Quits: sss123next[m] (~sss123nex@2001:470:69fc:105::1:ceac) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: salty_hermes[m] (~saltyherm@2001:470:69fc:105::1:76a4) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: crystalfrost[m] (~crystalfr@2001:470:69fc:105::1:d9b8) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: trinityyy[m] (~trinityyy@2001:470:69fc:105::1:cefa) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: iink[m] (~iink@2001:470:69fc:105::1:cf6f) (Quit: Bridge terminating on SIGTERM)
[11:51:02] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[11:51:02] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
[11:51:18] *** Joins: useretail (~useretail@185.132.19.151)
[11:51:28] *** Joins: alex11 (~alex11@user/alex11)
[11:53:40] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[11:53:56] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[11:54:00] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[11:54:06] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 272 seconds)
[11:54:15] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[11:54:35] *** Quits: phaise (~phaise@gateway/tor-sasl/phaise) (Ping timeout: 240 seconds)
[11:54:37] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 240 seconds)
[11:54:44] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:54:58] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[11:56:00] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[11:58:00] *** Quits: eddybilley (~freddieti@217.119.232.174) (Quit: WeeChat 3.4)
[12:07:05] *** Joins: eddybilley (~freddieti@217.119.232.174)
[12:08:50] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[12:08:50] *** Joins: hussam (~hussam@user/hussam)
[12:08:50] *** Joins: james[m]1 (~jamesjame@2001:470:69fc:105::1:5aa1)
[12:08:50] *** Joins: NRK (~nrkmatrix@2001:470:69fc:105::4e30)
[12:08:50] *** Joins: psydroid (~psydroid@user/psydroid)
[12:08:50] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[12:08:50] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[12:08:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[12:08:50] *** Joins: drflashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[12:08:50] *** Joins: jinsun_ (~jinsun@user/jinsun)
[12:08:50] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[12:08:50] *** Joins: lole[m]1 (~lolecfxre@2001:470:69fc:105::1:dffe)
[12:08:50] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[12:08:50] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[12:08:50] *** Joins: kaji (~kajiryoji@2001:470:69fc:105::405b)
[12:08:50] *** Joins: qazo[m] (~qazomatri@2001:470:69fc:105::1:e344)
[12:08:50] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[12:08:50] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[12:08:50] *** Joins: trinityyy[m] (~trinityyy@2001:470:69fc:105::1:cefa)
[12:08:50] *** Joins: salty_hermes[m] (~saltyherm@2001:470:69fc:105::1:76a4)
[12:08:50] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[12:08:50] *** Joins: iink[m] (~iink@2001:470:69fc:105::1:cf6f)
[12:08:50] *** Joins: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de)
[12:08:50] *** Joins: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37)
[12:08:50] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[12:08:50] *** Joins: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[12:08:51] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[12:08:51] *** Joins: Akawama[m] (~akawama@user/akawama)
[12:08:51] *** Joins: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9)
[12:08:51] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[12:08:51] *** Joins: anom777[m] (~anom777hi@2001:470:69fc:105::1:e598)
[12:08:51] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[12:08:51] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[12:08:51] *** Joins: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5)
[12:08:51] *** Joins: crystalfrost[m] (~crystalfr@2001:470:69fc:105::1:d9b8)
[12:08:51] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[12:08:51] *** Joins: predawn[m] (~amkematri@2001:470:69fc:105::1:bdaf)
[12:09:03] *** Joins: gruekun[m] (~gruekunbo@2001:470:69fc:105::1:e059)
[12:09:03] *** Joins: bobgnarly[m] (~bobgnarly@2001:470:69fc:105::1:cfee)
[12:09:03] *** Joins: tlp[m] (~tlphaloge@2001:470:69fc:105::1:e10c)
[12:16:06] *** Joins: john99 (~john99@134.238.222.5)
[12:17:32] <john99> Hi guys, https://godbolt.org/z/EonEv7jrc why i need specify char in the generic?
[12:17:33] *** Joins: jwoe324 (~jwoe324@2001:470:69fc:105::1:1a67)
[12:17:36] <john99> https://godbolt.org/z/EonEv7jrc
[12:18:16] <john99> https://godbolt.org/z/T9qEEexzG
[12:18:19] <john99> bad example
[12:19:52] <dave0> john99: oh character constants 'x' are type `int` in c
[12:20:05] <john99> lol XD
[12:20:23] <john99> a bit error prone no? XD
[12:20:25] <dave0> john99: does the 2nd int_char work without the cast?
[12:20:30] <john99> yes
[12:20:49] <dave0> oh okay cool
[12:21:14] <dave0> i suspected it was promoting the char to an int, but no that's not correct
[12:21:41] <dave0> john99: c standard says character constants are type `int` so that's what it is. the standard has spoken.
[12:22:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:22:17] <john99> well, i am be bad person and not put that "in the documentation" let see how many time passuntil someone raise the concern
[12:22:26] <john99> and i will not put *
[12:22:33] <john99> XD
[12:23:45] *** Joins: data68 (~data@2a02:908:a65:3d80:5d46:48e:53c1:f62)
[12:25:01] *** Joins: talin (~talin@c6478BF51.dhcp.as2116.net)
[12:25:18] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.137)
[12:25:39] <talin> hello. how do you wrap a very long #define? i have a line that says #define OPTIONS { OPTION1, OPTION2, ... }
[12:25:51] <clarity> \
[12:28:33] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[12:28:45] <findingnemoeggfr> ok boys, today is the day I learn gdb
[12:28:47] <Bou> pragma-: ,cc -Wno-multichar printf("%x", '🥸'); char c = '🥸'; printf("%x", c);
[12:28:48] <candide> pragma-: [warning: overflow in conversion from 'int' to 'char' changes value from '-257972808' to '-72' [-Woverflow]] malformed UTF-8 character in JSON string, at character offset 19 (before "\x{fffd}'\\n"}") at /usr/local/bin/guest-gdb line 156, <GEN1> line 117.   [Exit 25]
[12:29:36] <markand> findingnemoeggfr, have a look at lldb also
[12:29:36] *** Joins: iomari891 (~iomari891@102.89.33.175)
[12:30:39] <findingnemoeggfr> what's the difference? I'm using gdb bc it has built-in emacs interface & I already use gcc
[12:31:20] <dave0> once i debugged a segfault with gdb
[12:31:31] <findingnemoeggfr> how was it?
[12:31:37] <dave0> it worked!
[12:33:47] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[12:35:25] <markand> lldb has bettern viewing and license, it will take over gdb at some point (not mentioning it's extensibility)
[12:36:43] *** Joins: sheldon (~sheldon@user/sheldon)
[12:39:01] *** Joins: Enitin (~Enitin@82.180.145.228)
[12:50:31] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[12:54:14] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:55:17] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-24-107.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[12:56:23] *** Joins: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net)
[12:58:58] *** Joins: Phil-Work (~phil@62.3.100.20)
[13:01:14] *** Joins: fspax (~fspax@46.148.141.211)
[13:01:18] *** Quits: Cyp (~cyp@213.237.85.100) (Read error: Connection reset by peer)
[13:03:03] *** Joins: Cyp (~cyp@213.237.84.236)
[13:07:00] *** Quits: fe23 (~fe23@2409:8a34:466:6010:f4fd:eac0:60cb:c468) (Ping timeout: 240 seconds)
[13:07:20] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[13:07:36] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[13:07:43] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:36fc:f177:e967:2de3:80eb)
[13:08:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[13:09:16] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[13:10:43] *** Quits: xiongxin (~Thunderbi@117.136.33.130) (Ping timeout: 246 seconds)
[13:11:23] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:155:24cb:e9df:d924:87eb)
[13:12:13] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:36fc:f177:e967:2de3:80eb) (Ping timeout: 250 seconds)
[13:12:46] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[13:12:49] <john99> someone know a good project to contribute in C?
[13:13:26] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[13:15:22] *** Joins: MajorBiscuit (~MajorBisc@86.88.79.148)
[13:16:32] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[13:17:17] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[13:17:29] <markand> john99, there are many, depends on what you like
[13:18:23] *** Joins: BUSY (~BUSY@user/busy)
[13:18:50] <john99> idealmente uno que no este eescrito en codigo magico como libc y que sea as o menos friendly para empezar a conribuir
[13:19:07] <john99> ideally one that is not written in magic code like libc and that is as or less friendly to start contributing.
[13:19:09] <john99> fuck
[13:19:14] <john99> i wrote in spanish
[13:20:36] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:155:24cb:e9df:d924:87eb) (Ping timeout: 240 seconds)
[13:20:37] *** Joins: malina (~malina@user/malina)
[13:24:22] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[13:25:02] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[13:26:03] *** Quits: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net) (Ping timeout: 260 seconds)
[13:26:39] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[13:27:17] *** Joins: nostoi (~nostoi@254.red-83-60-236.dynamicip.rima-tde.net)
[13:27:42] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[13:28:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:28:58] <findingnemoeggfr> okay here's a question
[13:29:07] *** Quits: sheldon (~sheldon@user/sheldon) (Quit: Computer going to sleep...)
[13:29:15] <findingnemoeggfr> I have this https://bpa.st/RDUQ piece of code that solves k&r problem 1.18
[13:29:15] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[13:29:23] <findingnemoeggfr> and it segfaults
[13:29:58] <findingnemoeggfr> I tried running it in gdb, and it says that the segfault happens on line 16, where I assign line[i] = c;
[13:30:06] *** Quits: jwoe324 (~jwoe324@2001:470:69fc:105::1:1a67) (Quit: You have been kicked for being idle)
[13:30:36] <findingnemoeggfr> So the problem should probably be in that I access the wrong part of the array or smth, but i is set at 0. What am I doing wrong?
[13:31:13] *** Joins: akselmo (~akselmo@user/akselmo)
[13:31:39] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:32:49] *** Joins: sheldon (~sheldon@user/sheldon)
[13:33:23] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:34:25] *** Joins: MerrinX (~merrinx@ti0028a400-3686.bb.online.no)
[13:35:11] <fizzie> That inner loop (lines 12-21) will loop forever with the same `c`, and if it's not newline or space, is guaranteed to run past the end of the array.
[13:35:31] <findingnemoeggfr> wait a second...
[13:35:44] <findingnemoeggfr> (gdb) p line
[13:35:44] <findingnemoeggfr> $1 = 's' <repeats 1000 times>
[13:35:48] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[13:35:55] *** Joins: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net)
[13:35:59] <findingnemoeggfr> oh right
[13:36:03] *** Joins: Viewday115 (~Viewday@user/viewday)
[13:36:09] <findingnemoeggfr> nested loops are confusing as hell
[13:36:15] <findingnemoeggfr> thank you, fizzie
[13:36:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:37:01] *** Quits: nostoi (~nostoi@254.red-83-60-236.dynamicip.rima-tde.net) (Read error: No route to host)
[13:37:15] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 260 seconds)
[13:37:46] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Read error: Connection reset by peer)
[13:38:26] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[13:38:53] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[13:40:22] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Remote host closed the connection)
[13:40:57] *** Quits: LuKaRo (~LuKaRo@p200300dfa732173cc4814602d73ef0b9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[13:42:40] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[13:44:48] *** Joins: LuKaRo_ (~LuKaRo@p57b15bd8.dip0.t-ipconnect.de)
[13:44:55] *** Quits: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru) (Remote host closed the connection)
[13:44:59] *** Joins: xiongxin (~Thunderbi@117.136.40.172)
[13:45:02] *** Joins: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru)
[13:48:56] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:53:13] *** Quits: fspax (~fspax@46.148.141.211) (Quit: Leaving)
[13:53:34] *** Joins: fe23 (~fe23@2409:8a34:466:6010:e450:a807:7ddd:9d33)
[13:55:24] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[13:55:52] *** Joins: Furai (~Furai@furai.pl)
[13:56:13] *** Quits: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru) (Ping timeout: 246 seconds)
[13:59:02] *** Joins: jellie (~luv_panda@user/jellie)
[13:59:30] *** Joins: Klinda (~superleag@user/klinda)
[14:04:30] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[14:05:40] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.137) (Ping timeout: 246 seconds)
[14:06:12] *** Quits: raym (~raym@user/raym) (Ping timeout: 252 seconds)
[14:08:00] *** Joins: raym (~raym@user/raym)
[14:09:39] *** Joins: CFP- (~CFP-@2a02:c7f:180d:e500:84a6:1d07:1d35:a842)
[14:09:42] *** Quits: MerrinX (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.4.1)
[14:10:41] *** Joins: MerrinX (~merrinx@ti0028a400-3686.bb.online.no)
[14:12:08] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:14:59] *** Joins: Atque (~Atque@user/atque)
[14:17:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[14:19:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Client Quit)
[14:20:03] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:20:16] <Cyp> [11:36:37] <Th|ef> can anyone in #c please seek an unbanning, I dont know how as im banned lol?
[14:20:28] <Cyp> This is $a:h4x0r
[14:20:39] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[14:20:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[14:22:50] *** Joins: iomari892 (~iomari891@197.210.79.98)
[14:23:25] *** Quits: iomari891 (~iomari891@102.89.33.175) (Read error: Connection reset by peer)
[14:25:10] *** Joins: Atque (~Atque@user/atque)
[14:28:12] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:21e7:3c97:3b7b:5477:b92)
[14:30:29] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[14:30:56] *** Quits: Guest6037 (epony@lz2.eu) (Quit: QUIT)
[14:31:51] *** Quits: xiongxin (~Thunderbi@117.136.40.172) (Ping timeout: 260 seconds)
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:36] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[14:34:20] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 272 seconds)
[14:34:59] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:21e7:3c97:3b7b:5477:b92) (Ping timeout: 250 seconds)
[14:36:11] *** Quits: alch (~alch@ca-18-210-246.service.infuturo.it) (Read error: Connection reset by peer)
[14:37:16] <talin> i am looking for a less ugly way to do something. i have a.c where i parse cli arguments and then i have some function pointers that get set based on said arguments. these functions are made in b.c. i needed to pass some more stuff to b.c so i had to modify one of the function pointers to add an extra parameter. now i want to avoid modifying a.c too much
[14:37:49] <talin> now i need to access the information i received by sending it into the first function pointer function in a second function in b.c
[14:38:41] <talin> i don't want to mess about with a.c, so i am looking for a way to share this object between two functions in b.c. i could make a file scope pointer and set that in the function that is called first... is this terrible? such that the second function can access it
[14:39:22] <dave0> it's not "terrible" but it can be tricky to understand
[14:39:43] *** Joins: alch (~alch@pa-18-171-207.service.infuturo.it)
[14:39:58] <dave0> if you keep the global variables to a minimum it could be okay
[14:40:19] <dave0> maybe make a fresh header file that is just shared between a.c and b.c
[14:40:19] *** Joins: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru)
[14:40:28] <talin> dave0: thank you. the file b.c. is sort of an extension i've made, so i want to touch a.c as little as possible
[14:41:00] <talin> dave0: ooh, i can share this data via a header file.
[14:41:24] <dave0> yep
[14:41:39] <dave0> you'd have to add an #include line to a.c
[14:42:14] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:42:31] *** Joins: bindu (~bindu@user/bindu)
[14:42:52] <talin> dave0: hmm, they already have a shared header file for my module. i've mostly made declarations in my headers
[14:43:50] <dave0> if it's variables shared only between a.c and b.c i would make a fresh header file that only a.c & b.c #include
[14:45:04] *** Joins: epony (epony@user/epony)
[14:49:15] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[14:50:09] *** Joins: cursey (~cursey@user/cursey)
[14:50:11] <talin> so option 1 is to define the variable in a shared header file as "extern"(?) and option 2 is to have a static pointer in b.c that gets set but x() so it can be accessed by y()
[14:50:26] *** Joins: epony (epony@user/epony)
[14:50:27] <talin> by x() i mean
[14:51:12] <dave0> it's not ideal to have global variables :-/
[14:52:05] <dave0> talin: how much do you have to share between a.c and b.c ?
[14:53:28] <dave0> i think a function call might be more flexible, but i don't really know.. i think it comes down to style
[14:57:32] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[14:58:59] *** Joins: xiongxin (~Thunderbi@117.136.40.176)
[15:00:18] *** Joins: X-Scale` (~ARM@140.218.137.78.rev.vodafone.pt)
[15:02:12] *** Quits: X-Scale (~ARM@80.199.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[15:02:13] *** X-Scale` is now known as X-Scale
[15:02:22] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[15:02:28] *** Joins: fspax (~fspax@46.148.141.211)
[15:04:51] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[15:06:39] *** Joins: unknow (~i.am@user/marlboro)
[15:08:38] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:238c:7f88:ea0:54ea:d5a)
[15:10:19] <findingnemoeggfr> you can't pass character arrays as function arguments, right?
[15:10:38] <talin> dave0: it's just a struct
[15:11:18] <talin> dave0: i will try to make a static pointer to the struct in b.c, then in the first function pointer called from a.c i will set this pointer and then in the second function pointer i can access it and use it
[15:11:35] <findingnemoeggfr> I don't know structs yet lol
[15:12:03] *** Quits: xiongxin (~Thunderbi@117.136.40.176) (Ping timeout: 250 seconds)
[15:12:03] *** xiongxin1 is now known as xiongxin
[15:12:56] *** Joins: kts (~kts@103.73.237.187)
[15:13:08] <dave0> talin: that'll work
[15:13:23] *** Joins: seninha (~seninha@user/seninha)
[15:13:41] <dave0> findingnemoeggfr: you can think of passing an array to a function as "nearly pass-by-reference"
[15:14:25] <dave0> findingnemoeggfr:    int thing(int array[10]) { array[0] = 3; array[1] = 1; array[2] = 4; }
[15:14:39] <dave0> this modifies the array that you called 'thing' with
[15:16:00] <dave0> this is different to     int thing(int a, int b, int c) { a = 3; b = 1; c = 4; }     this does nothing to the arguments you passed from the caller
[15:16:43] *** Quits: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net) (Ping timeout: 246 seconds)
[15:16:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[15:16:51] <dave0> findingnemoeggfr: technically with the array, it's a pointer, but you probably haven't learnt pointers yet
[15:17:24] *** Quits: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru) (Ping timeout: 272 seconds)
[15:17:56] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[15:18:01] *** Joins: Enitin (~Enitin@82.180.145.223)
[15:18:03] *** Quits: data68 (~data@2a02:908:a65:3d80:5d46:48e:53c1:f62) (Ping timeout: 260 seconds)
[15:20:47] *** Joins: data68 (~data@2a02:908:a65:3d80:5d46:48e:53c1:f62)
[15:22:46] *** Joins: Vrganj (~Vrganj@93-136-3-241.adsl.net.t-com.hr)
[15:23:55] <Vrganj> Creating a little tcp proxy that will only ever handle one connection. Does it make more sense to use e.g. poll or epoll, or to have 2 threads?
[15:24:05] <kilobyte_ch> Someone experienced with KissFFT or similar FFT Library? I want to create a Audio Spectrum of a sampled Signal but don't know where to start.
[15:27:27] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 260 seconds)
[15:28:37] *** Joins: Enitin (~Enitin@82.180.145.226)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:27] *** Joins: xbkkd (~F0@user/xbkkd)
[15:31:06] *** Joins: csrf (~csrf@user/csrf)
[15:31:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:31:15] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[15:31:33] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:238c:7f88:ea0:54ea:d5a) (Ping timeout: 260 seconds)
[15:34:12] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[15:34:45] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:35:01] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: User was banned)
[15:35:03] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: User was banned)
[15:35:05] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (Quit: User was banned)
[15:35:07] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Quit: User was banned)
[15:35:10] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: User was banned)
[15:35:11] *** Quits: hussam (~hussam@user/hussam) (Quit: User was banned)
[15:35:13] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: User was banned)
[15:35:14] *** Quits: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083) (Quit: User was banned)
[15:35:14] *** Quits: salty_hermes[m] (~saltyherm@2001:470:69fc:105::1:76a4) (Quit: User was banned)
[15:35:16] *** Quits: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de) (Quit: User was banned)
[15:35:18] *** Quits: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac) (Quit: User was banned)
[15:35:19] *** Quits: iink[m] (~iink@2001:470:69fc:105::1:cf6f) (Quit: User was banned)
[15:35:21] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: User was banned)
[15:35:25] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: User was banned)
[15:35:29] *** Quits: Akawama[m] (~akawama@user/akawama) (Quit: User was banned)
[15:35:29] *** Quits: trinityyy[m] (~trinityyy@2001:470:69fc:105::1:cefa) (Quit: User was banned)
[15:35:36] *** Quits: crystalfrost[m] (~crystalfr@2001:470:69fc:105::1:d9b8) (Quit: User was banned)
[15:35:39] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: User was banned)
[15:35:39] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: User was banned)
[15:35:40] *** Quits: akselmo (~akselmo@user/akselmo) (Quit: User was banned)
[15:35:41] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: User was banned)
[15:35:41] *** Quits: drflashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Quit: User was banned)
[15:35:44] *** Quits: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9) (Quit: User was banned)
[15:35:45] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: User was banned)
[15:35:46] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: User was banned)
[15:35:47] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: User was banned)
[15:35:51] *** Quits: james[m]1 (~jamesjame@2001:470:69fc:105::1:5aa1) (Quit: User was banned)
[15:35:55] *** Quits: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5) (Quit: User was banned)
[15:35:58] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[15:36:17] *** Quits: kaji (~kajiryoji@2001:470:69fc:105::405b) (Quit: User was banned)
[15:36:35] *** Quits: anom777[m] (~anom777hi@2001:470:69fc:105::1:e598) (Quit: User was banned)
[15:36:37] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Quit: User was banned)
[15:36:42] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Quit: User was banned)
[15:36:46] *** Quits: qazo[m] (~qazomatri@2001:470:69fc:105::1:e344) (Quit: User was banned)
[15:37:05] *** Quits: lole[m]1 (~lolecfxre@2001:470:69fc:105::1:dffe) (Quit: User was banned)
[15:37:06] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Quit: User was banned)
[15:37:20] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Quit: User was banned)
[15:37:27] *** Quits: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37) (Quit: User was banned)
[15:37:29] *** Quits: predawn[m] (~amkematri@2001:470:69fc:105::1:bdaf) (Quit: User was banned)
[15:37:33] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Quit: User was banned)
[15:37:39] *** Quits: gruekun[m] (~gruekunbo@2001:470:69fc:105::1:e059) (Quit: User was banned)
[15:37:39] *** Quits: bobgnarly[m] (~bobgnarly@2001:470:69fc:105::1:cfee) (Quit: User was banned)
[15:37:39] *** Quits: tlp[m] (~tlphaloge@2001:470:69fc:105::1:e10c) (Quit: User was banned)
[15:38:22] <Vrganj> what just happened
[15:39:25] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:45:25] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Ping timeout: 250 seconds)
[15:46:03] <vdamewood> aMaybe matrix vomited all over itself.
[15:46:05] <twkm> looks like someonee fucked up a network ban.
[15:47:55] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.236)
[15:48:21] *** Joins: xiongxin (~Thunderbi@117.136.33.131)
[15:49:08] *** Joins: epony (epony@user/epony)
[15:50:14] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[15:50:44] *** Quits: fspax (~fspax@46.148.141.211) (Quit: Leaving)
[15:54:07] <twkm> here they come...
[15:55:52] *** Joins: gareppa (~gareppa@user/gareppa)
[15:58:01] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[15:58:10] <vdamewood> #libera claims it's on Matrix's side.
[15:58:17] *** Quits: CFP- (~CFP-@2a02:c7f:180d:e500:84a6:1d07:1d35:a842) (Quit: Client closed)
[16:00:13] *** Joins: coaxing (~coaxing@user/coaxing)
[16:04:03] *** Joins: zer0x (~zer0x@1.55.210.186)
[16:04:16] *** Quits: yggdrasil (~yggdrasil@67-0-74-166.albq.qwest.net) (Ping timeout: 272 seconds)
[16:05:27] *** Joins: yggdrasil (~yggdrasil@75-161-10-156.albq.qwest.net)
[16:07:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[16:10:33] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[16:11:18] *** Quits: xiongxin (~Thunderbi@117.136.33.131) (Read error: Connection reset by peer)
[16:18:06] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Quit: leaving)
[16:19:40] <owensjrw> Good morning all. Can I create a char *array with data like {word1, null, word3, word2, null, word5} then use qsort to {word1, word2, word3, word4, word5, null, null}
[16:21:33] <dave0> owensjrw: yes, you will have to check for null in your comparison function, and then strcmp for words
[16:22:12] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:22:17] <owensjrw> dave, thank you.
[16:23:53] *** Joins: cart_ (~cart@2a01:4c8:41:b099:7245:f891:7095:a01)
[16:29:18] <dave0> ,cc int cmp(const void *aa, const void *bb) { const char *a = *(const char **)aa, *b = *(const char **)bb; if(a == NULL && b == NULL) return 0; if(a == NULL) return +1; if(b == NULL) return -1; return strcmp(a, b); }     char*array[6]={"word1",NULL,"word3","word2",NULL,"word5"};int main(void){ qsort(array, 6, sizeof(*array), cmp); for(int a=0;a<6;a++)puts(array[a]?:"nil");}
[16:29:19] <candide> dave0: [warning: ISO C forbids omitting the middle term of a '?:' expression [-Wpedantic]] word1 word2 word3 word5 nil nil
[16:29:46] <dave0> so that's my version of the comparison function... it should put things in the order you said
[16:30:40] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:133b:d7a1:eab5:64b4:5441)
[16:31:41] *** Quits: kts (~kts@103.73.237.187) (Quit: Konversation terminated!)
[16:31:52] *** Quits: malina (~malina@user/malina) (Quit: malina)
[16:32:54] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[16:36:53] *** Quits: nf (~n@monade.li) (Ping timeout: 252 seconds)
[16:38:44] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[16:38:47] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[16:38:52] *** Joins: nf (~n@monade.li)
[16:39:22] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.236) (Ping timeout: 260 seconds)
[16:41:03] *** Maxdaman1us is now known as Maxdamantus
[16:42:25] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[16:45:10] *** Quits: Senicar9 (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[16:45:25] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[16:49:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:53:27] *** Quits: cart_ (~cart@2a01:4c8:41:b099:7245:f891:7095:a01) (Remote host closed the connection)
[16:53:44] *** Joins: cart_ (~cart@2a01:4c8:41:b099:3884:dcae:9d37:cfea)
[16:54:17] *** Joins: constxd (~brad@142.134.78.128)
[16:56:38] *** Joins: seninha (~seninha@user/seninha)
[16:57:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:133b:d7a1:eab5:64b4:5441) (Ping timeout: 256 seconds)
[17:02:47] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[17:04:53] <markand> currently playing with zephyr OS to program a nucleo board
[17:05:14] <markand> quite large toolchain/sdk but overall it's pretty nice and clean C API
[17:05:15] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:08:16] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:08:42] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[17:08:58] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[17:10:51] *** Joins: edk (edk@libera/staff/edk)
[17:11:53] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[17:12:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:12:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:12:17] *** Quits: cart_ (~cart@2a01:4c8:41:b099:3884:dcae:9d37:cfea) (Ping timeout: 250 seconds)
[17:14:57] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Read error: Connection reset by peer)
[17:15:11] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 260 seconds)
[17:15:55] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[17:16:56] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[17:17:07] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:19:37] *** Joins: mkv (~znc@ubuntu/member/m4v)
[17:19:47] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 252 seconds)
[17:19:48] *** Joins: danisanti (~daniel@user/danisanti)
[17:20:08] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[17:20:33] *** Joins: X-Scale` (~ARM@89.214.146.40)
[17:20:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:20:54] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 272 seconds)
[17:20:55] *** mkv is now known as m4v
[17:21:24] *** Quits: X-Scale (~ARM@140.218.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[17:22:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[17:22:55] *** X-Scale` is now known as X-Scale
[17:24:54] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:25:57] *** Quits: chomwitt (~chomwitt@2a02:587:dc18:da00:e2ec:eb52:4039:9bfe) (Ping timeout: 256 seconds)
[17:25:58] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 272 seconds)
[17:26:05] *** Joins: chomwitt (~chomwitt@athedsl-352218.home.otenet.gr)
[17:30:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:31:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[17:35:22] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Quit: ZNC - https://znc.in)
[17:35:41] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[17:35:41] *** Joins: hussam (~hussam@user/hussam)
[17:35:41] *** Joins: james[m] (~jamesjame@2001:470:69fc:105::1:5aa1)
[17:35:41] *** Joins: NRK (~nrkmatrix@2001:470:69fc:105::4e30)
[17:35:41] *** Joins: psydroid (~psydroid@user/psydroid)
[17:35:41] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[17:35:41] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[17:35:41] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[17:35:41] *** Joins: drflashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[17:35:41] *** Joins: jinsun_ (~jinsun@user/jinsun)
[17:35:41] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[17:35:41] *** Joins: lole[m]1 (~lolecfxre@2001:470:69fc:105::1:dffe)
[17:35:41] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[17:35:41] *** Joins: kaji (~kajiryoji@2001:470:69fc:105::405b)
[17:35:41] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[17:35:41] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[17:35:41] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[17:35:42] *** Joins: salty_hermes[m] (~saltyherm@2001:470:69fc:105::1:76a4)
[17:35:42] *** Joins: trinityyy[m] (~trinityyy@2001:470:69fc:105::1:cefa)
[17:35:42] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[17:35:42] *** Joins: iink[m] (~iink@2001:470:69fc:105::1:cf6f)
[17:35:42] *** Joins: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de)
[17:35:42] *** Joins: qazo[m] (~qazomatri@2001:470:69fc:105::1:e344)
[17:35:42] *** Joins: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37)
[17:35:42] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[17:35:42] *** Joins: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[17:35:42] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[17:35:42] *** Joins: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9)
[17:35:42] *** Joins: Akawama[m] (~akawama@user/akawama)
[17:35:42] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[17:35:42] *** Joins: anom777[m] (~anom777hi@2001:470:69fc:105::1:e598)
[17:35:42] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[17:35:42] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[17:35:42] *** Joins: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5)
[17:35:42] *** Joins: crystalfrost[m] (~crystalfr@2001:470:69fc:105::1:d9b8)
[17:35:42] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[17:35:42] *** Joins: akselmo (~akselmo@user/akselmo)
[17:35:42] *** Joins: predawn[m] (~amkematri@2001:470:69fc:105::1:bdaf)
[17:35:54] *** Joins: tlp[m] (~tlphaloge@2001:470:69fc:105::1:e10c)
[17:35:54] *** Joins: bobgnarly[m] (~bobgnarly@2001:470:69fc:105::1:cfee)
[17:35:54] *** Joins: gruekun[m] (~gruekunbo@2001:470:69fc:105::1:e059)
[17:36:56] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[17:37:17] *** Joins: aerysh (~aerysh@2a0a:b640:1:5a::a07d)
[17:37:32] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[17:41:07] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[17:42:46] *** Quits: chomwitt (~chomwitt@athedsl-352218.home.otenet.gr) (Read error: Connection reset by peer)
[17:43:23] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[17:43:31] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[17:46:14] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[17:53:53] *** Quits: MajorBiscuit (~MajorBisc@86.88.79.148) (Ping timeout: 260 seconds)
[17:54:27] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:56:44] *** Quits: ekathva (~ekathva@2001:999:230:5e27:e9e2:3092:814c:5841) (Ping timeout: 260 seconds)
[17:57:05] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:57:20] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-e5fc-36e0-a649-f5c8.inf6.spectrum.com)
[17:57:57] *** Quits: trenka (~ykaliuta@user/trenka) (Ping timeout: 240 seconds)
[17:59:03] *** Joins: ekathva (~ekathva@2001:999:230:5e27:a0b1:eaf6:c841:8439)
[17:59:06] *** Joins: trenka (~ykaliuta@82-181-192-55.bb.dnainternet.fi)
[17:59:06] *** Quits: trenka (~ykaliuta@82-181-192-55.bb.dnainternet.fi) (Changing host)
[17:59:06] *** Joins: trenka (~ykaliuta@user/trenka)
[17:59:46] *** Joins: that_guy_who_fig (~that_guy_@ool-182cdb24.dyn.optonline.net)
[18:00:14] *** Joins: cart_ (~cart@2a01:4c8:41:b099:e74c:a09b:8c02:7da6)
[18:01:02] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 260 seconds)
[18:05:01] *** Quits: talin (~talin@c6478BF51.dhcp.as2116.net) (Ping timeout: 240 seconds)
[18:06:02] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[18:06:08] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 260 seconds)
[18:06:41] *** Joins: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru)
[18:07:52] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Ping timeout: 260 seconds)
[18:08:03] *** Quits: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru) (Remote host closed the connection)
[18:08:19] *** Joins: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru)
[18:10:12] *** Joins: talin (~talin@c6478BF51.dhcp.as2116.net)
[18:12:41] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[18:13:01] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[18:13:05] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:13:49] *** Joins: bindu (~bindu@user/bindu)
[18:14:39] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[18:15:52] *** Joins: xiongxin1 (~Thunderbi@117.136.39.222)
[18:16:34] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-e5fc-36e0-a649-f5c8.inf6.spectrum.com) (Read error: Connection reset by peer)
[18:17:16] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-e5fc-36e0-a649-f5c8.inf6.spectrum.com)
[18:17:19] *** Quits: danisanti (~daniel@user/danisanti) (Remote host closed the connection)
[18:17:52] *** Joins: ddakx (~ddakx@user/ddakx)
[18:18:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:19:11] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Ping timeout: 252 seconds)
[18:19:11] *** xiongxin1 is now known as xiongxin
[18:20:21] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Ping timeout: 245 seconds)
[18:24:43] *** Joins: oxfuxxx (~oxfuxxx@45.228.209.174)
[18:25:10] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.65)
[18:28:28] *** Joins: strajder (~strajder@user/strajder)
[18:29:02] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[18:29:23] *** Quits: findingnemoeggfr (~findingne@h95-110-106-48.dyn.bashtel.ru) (Ping timeout: 260 seconds)
[18:29:27] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:30:17] *** Joins: aghast (~aghast@2607:fb91:bd11:74a7:db7c:a110:d227:1765)
[18:30:30] *** Quits: oxfuxxx (~oxfuxxx@45.228.209.174) (Read error: Connection reset by peer)
[18:33:10] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[18:33:43] *** Quits: justOkay (~justache@user/justache) (Remote host closed the connection)
[18:34:21] *** Joins: justOkay (~justache@user/justache)
[18:34:56] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[18:35:18] *** Quits: alch (~alch@pa-18-171-207.service.infuturo.it) (Read error: Connection reset by peer)
[18:35:40] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-e5fc-36e0-a649-f5c8.inf6.spectrum.com)
[18:36:02] *** Joins: Akiva (~Akiva@user/Akiva)
[18:37:35] *** Joins: Arthuria (~Arthuria@user/arthuria)
[18:37:58] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 246 seconds)
[18:38:13] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-e5fc-36e0-a649-f5c8.inf6.spectrum.com) (Ping timeout: 260 seconds)
[18:40:01] *** Joins: alch (~alch@151.82.195.131)
[18:40:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[18:41:06] *** Quits: Arthuria (~Arthuria@user/arthuria) (Read error: Connection reset by peer)
[18:41:23] *** Joins: Arthuria (~Arthuria@user/arthuria)
[18:43:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:47:46] *** Quits: xiongxin (~Thunderbi@117.136.39.222) (Read error: Connection reset by peer)
[18:49:03] *** Joins: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407)
[18:50:35] *** Joins: reset (~reset@user/reset)
[18:53:30] *** Joins: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec)
[18:53:50] *** Quits: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407) (Ping timeout: 252 seconds)
[18:54:59] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[18:56:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Quit: Leaving)
[18:57:43] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[18:57:56] *** Joins: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a)
[18:58:19] *** Quits: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec) (Ping timeout: 256 seconds)
[18:58:38] *** Joins: nf (~n@monade.li)
[18:58:41] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[19:00:35] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[19:01:15] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Client Quit)
[19:02:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[19:04:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:07:39] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[19:08:31] *** Quits: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a) (Ping timeout: 256 seconds)
[19:10:12] *** Joins: Enitin (~Enitin@82.180.145.228)
[19:10:17] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[19:11:14] <cassepipe> Just stumbled upon the function strdupa ... How does that work ? When ft_strdupa returns the string stops being valid memory according to man alloca
[19:11:18] *** Joins: oxfuxxx (~oxfuxxx@138.199.16.104)
[19:11:28] <cassepipe> What's the use ? What am I not understanding ?
[19:11:32] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:12:15] <cassepipe> Or is it a macro that declares a buffer of the right size and then passes to __strdup_with_buffer() ?
[19:13:54] <Pentode> cassepipe: it duplicates the string in it's own new place in memory and returns a pointer to it
[19:13:55] <aghast> Note that "strdup_with_buffer" would be "strcpy". ;-)
[19:14:03] *** Joins: zeenk (~zeenk@79.115.191.105)
[19:14:11] <twkm> you might find the documentation useful.
[19:14:14] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:14:50] <aghast> And yeah, when the caller returns, memory obtained from alloca goes away. That's useful if you only need it during the execution of one function.
[19:14:58] <twkm> as an aside, strdupa isn't standard, which likely you don't care about.
[19:15:28] <cassepipe> Pentode: When you get the returned pointer from strdupa, then it should not point no valid memomry no more
[19:15:38] <cassepipe> is what I don't understand
[19:15:49] <clarity> You're ignoring that it doensn't have to be defined in C
[19:15:55] <cassepipe> twkm: if found it rather unuseful on the matter
[19:16:05] <twkm> it points to new memory with the content taken from the argument.
[19:16:31] <clarity> musl happens to implement is as a macro, but one could use a compiler extension (or built-in) or straight assembly for it.. it's all implementation details
[19:16:36] <aghast> cassepipe, suppose you want to force a string to uppercase or lowercase. You need a different string, exactly the same length as the first.
[19:16:47] <twkm> you don't need to free it as it is alloca'd memory.
[19:17:00] <cassepipe> So memory allocated with alloca does not goes away after a function returns is what I understand
[19:17:08] <aghast> false.
[19:17:24] <twkm> it does, that's why you don't have to free it.
[19:17:32] <cassepipe> Well then I don't have an answer  to my question
[19:17:40] <clarity> I just answered it.
[19:18:00] <cassepipe> clarity: Missed it, thanks
[19:18:09] <Inline__> https://onlinegdb.com/Vvx7AN7Rm
[19:18:10] <twkm> understand alloca first.  then think of strdup using alloca'd storage rather than malloc'd.
[19:18:40] *** Inline__ is now known as Inline
[19:19:07] <pragma-> strdup uses alloca now? I distinctly remember needing to manually free strdup'd things.
[19:19:12] <cassepipe> twkm: I do understand the strdupa is strdup with alloca'd storage instead of malloc'ed, what I don't understand is how it is possible
[19:19:12] <clarity> strupda
[19:19:16] <clarity> strdupa
[19:19:25] <pragma-> Oh.
[19:19:43] <Inline> where is char *host_name = "www.libera.chat\n"; stored ?
[19:19:56] <Inline> it's in stack right ?
[19:20:08] *** Joins: zer0x (~zer0x@1.55.210.186)
[19:20:12] <cassepipe> Inline: No, BSS
[19:20:14] <twkm> surely the macro is similar to: p = alloca(strlen(arg)+1); if (p) strcpy(p,arg); which seems pretty clear.
[19:20:17] <clarity> It depends on the implementation.
[19:20:19] <cassepipe> Inline: Static storage
[19:20:29] <Inline> BSS is for non initialized stuff
[19:20:56] <cassepipe> Inline: I meant ROM
[19:21:01] <Inline> cassepipe: is static storage not writable ?
[19:21:04] <twkm> sheesh.
[19:21:08] <dave0> cassepipe: maybe strdupa is not a function?
[19:21:25] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:21:50] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:22:15] <cassepipe> dave0: Yes apparently it can be a macro (or somthing else that is not a function apparently) which was my initial question
[19:22:30] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[19:22:48] <Inline> hmm, size_t size should be rather ptrdiff_t size
[19:23:06] <Inline> since it's subtracting pointers
[19:23:14] <Inline> welp
[19:23:32] <dave0> cassepipe: could even be a compiler builtin
[19:24:05] <Inline> no idea but yesterday someone confused was trying some stuff....
[19:24:12] *** Joins: meator (~meator@user/meator)
[19:24:22] <cassepipe> dave0: clarity Yup. Thanks for your answers.
[19:24:29] <Inline> without making sure his array_init was working correctly... meh
[19:24:58] <Inline> and then blaming something else on it
[19:24:59] <pragma-> Bou: :(
[19:25:09] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:25:17] <Inline> like lock race or some such....
[19:27:15] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Ping timeout: 260 seconds)
[19:28:23] *** Quits: that_guy_who_fig (~that_guy_@ool-182cdb24.dyn.optonline.net) (Quit: Leaving)
[19:28:38] <Inline> btw my memcpy always uses memmove underneath it seems
[19:28:51] <Inline> heh
[19:29:10] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[19:29:39] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[19:30:12] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[19:30:39] <twkm> people were often idiots and used memcpy where it wasn't appropriate.  some vendors "fixed" that by always using memmove even though it might be lower performance.
[19:30:40] <markand> oh noes, time to kill myself. they sold a commercial support for a SQL Server access into our application
[19:30:52] <markand> looks like I'll have to use freetds and unixodbc
[19:31:20] <Inline> right the manual mentions it too
[19:31:48] *** Quits: kektagen (~kektagen@kektagen.org) (Remote host closed the connection)
[19:32:00] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 272 seconds)
[19:32:36] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:36:39] *** Parts: aghast (~aghast@2607:fb91:bd11:74a7:db7c:a110:d227:1765) (Leaving)
[19:37:19] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:37:24] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:37:41] <Bou> pragma-: idk how I broke it, somehow `,cc -Wno-multichar printf("%x ", '🥸'); puts("hello world 🤪"); // 😻` works but `char c = '🤡'` doesn't
[19:38:09] *** Parts: meator (~meator@user/meator) (Leaving)
[19:38:19] <pragma-> No clown face?!  NOOOOOoooooooo...
[19:38:33] <pragma-> ,cc char c = '🤡';
[19:38:34] *** Joins: pulse (~pulse@user/pulse)
[19:38:35] <candide> pragma-: [warning: multi-character character constant [-Wmultichar]  warning: overflow in conversion from 'int' to 'char' changes value from '-257973087' to '-95' [-Woverflow]] malformed UTF-8 character in JSON string, at character offset 19 (before "\x{fffd}'\\n"}") at /usr/local/bin/guest-gdb line 156, <GEN1> line 119.   [Exit 25]
[19:39:19] <pragma-> ,cc char c = L'🤡';
[19:39:21] *** Joins: kektagen (~kektagen@kektagen.org)
[19:39:21] <candide> pragma-: [warning: overflow in conversion from 'int' to 'char' changes value from '129313' to '33' [-Woverflow]] no output: c = 33 '!'
[19:39:33] <pragma-> Er, what's the one for utf8 again... u?
[19:39:35] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Remote host closed the connection)
[19:39:45] <markand> ,cc uint32_t c = U'🤡';
[19:39:47] <candide> markand: no output: c = 129313
[19:40:03] <markand> (char32_t preferably if uchar.h is available)
[19:40:10] <pragma-> ,cc wchar_t c = U'🤡';
[19:40:12] <candide> pragma-: no output: c = 129313 L'🤡'
[19:40:29] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:59::a06d)
[19:40:37] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 260 seconds)
[19:42:29] *** Joins: rgrinberg (~textual@177.248.148.38)
[19:43:38] <pragma-> ,english L'a'; U'b'; u'
[19:43:38] <candide> pragma-: error: missing terminating ' character error: stray 'u' in program
[19:43:41] <pragma-> ,english L'a'; U'b'; u'C';
[19:43:42] <candide> pragma-: A wide character 'a'. Then a 32-bit character 'b'. Finally, a 16-bit character 'C'.
[19:43:57] *** Quits: aerysh (~aerysh@2a0a:b640:1:5a::a07d) (Ping timeout: 250 seconds)
[19:44:28] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:59::a06d) (Client Quit)
[19:44:55] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[19:45:30] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:46:47] <Bou> odd, any overflow when assigning to char causes the json error. `,cc int i = 1264381763487348964;` doesn't but `,cc char c = 1234` does
[19:47:09] *** Joins: mixfix41 (~homefame@user/mixfix41)
[19:48:05] <pragma-> best not to overflow char then!
[19:49:15] <NRK> ,cc char c = 🥴; putchar(c);
[19:49:16] <candide> NRK: error: '🥴' undeclared
[19:49:33] <NRK> ,cc char c = '🥴'; putchar(c);
[19:49:35] <candide> NRK: [warning: multi-character character constant [-Wmultichar]  warning: overflow in conversion from 'int' to 'char' changes value from '-257972812' to '-76' [-Woverflow]] malformed UTF-8 character in JSON string, at character offset 19 (before "\x{fffd}'\\n"}") at /usr/local/bin/guest-gdb line 156, <GEN1> line 141.   [Exit 255]
[19:52:10] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 246 seconds)
[19:52:55] <pragma-> NRK: ,cc wchar_t c = L'🥴'; putwchar(c);
[19:52:58] <candide> NRK: 🥴
[19:53:56] <pragma-> do you even encode, bro?
[19:54:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[19:54:57] <pragma-> ,cc paste
[19:55:02] <candide> pragma-: https://0x0.st/oquf.txt
[19:55:14] * pragma- nods.
[19:58:33] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[20:00:13] *** Joins: strajder (~strajder@user/strajder)
[20:00:33] <twkm> hahahaha, unicode solves everything!  (actually almost nothing)
[20:00:59] *** Joins: pehaef (~pehaef@user/pehaef)
[20:07:29] <pragma-> utf8 seems to work pretty well
[20:08:08] <pragma-> aside from missing fonts or terminal bugs :(
[20:09:15] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 260 seconds)
[20:09:37] * pragma- is annoyed that many terminals STILL display zero-width space characters as visible spaces
[20:10:34] *** Joins: inlight (~n0ise@user/inlight)
[20:10:49] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 250 seconds)
[20:12:58] *** Joins: otty (~arun@49.15.202.67)
[20:13:16] <fikran> This is an odd error to me, I am setting this: /usr/src/sys/dev/athn/usb/if_athn_usb.c:970:9: error: variable 'error' is used uninitialized whenever 'while' loop exits because its condition is false [-Werror,-Wsometimes-uninitialized]
[20:13:18] <fikran>         while (size > 0) {
[20:13:20] <fikran> The line above I am doing size = fw->datasize;
[20:13:22] <fikran> fdfgdfg
[20:13:32] <fikran> whoa, sorry for the jibberish at the end! my terminal froze!
[20:14:31] <Inline> ok now it's ok https://onlinegdb.com/JTBXDRIzZ
[20:15:22] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[20:15:45] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-84d9-8dc5-97-fe21.fixed6.kpn.net)
[20:16:19] <NRK> pragma-: yesterday when i was playing around with libgrapheme, my terminal literally started trolling me and wouldn't let me insert the ending `"` cus i pasted some unicode.
[20:16:30] <NRK> i had to `sed -i` my way out 🥴
[20:16:56] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:17:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:17:59] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[20:18:48] *** Joins: Enitin (~Enitin@82.180.145.223)
[20:19:05] <NRK> i was about to send my test code. but when i pasted it into dpaste it didn't fully paste the entire thing.
[20:19:09] <Bou> fikran: what if `fw->datasize` is 0, then `size > 0` is false the first time and the while loop will never run, leaving error uninitialized
[20:19:11] <NRK> I thought, "huh, I guess i didn't copy the entire thing."
[20:19:30] <NRK> turns out, unicode killed dpaste...
[20:19:55] <NRK> i can't paste multi-codepoint grapheme clusters into it, it seems...
[20:20:12] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-84d9-8dc5-97-fe21.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:21:04] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:22:23] *** Quits: cart_ (~cart@2a01:4c8:41:b099:e74c:a09b:8c02:7da6) (Ping timeout: 252 seconds)
[20:22:31] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[20:23:34] *** Joins: xiongxin (~Thunderbi@117.136.40.183)
[20:24:28] <NRK> .oO( how many irc clients will i murder if i paste it in here... )
[20:25:03] <NRK> ,cc char *s = "মৌ"; puts(s);
[20:25:04] *** Quits: xiongxin (~Thunderbi@117.136.40.183) (Read error: Connection reset by peer)
[20:25:05] <candide> NRK: মৌ
[20:25:33] *** Quits: otty (~arun@49.15.202.67) (Quit: WeeChat 3.0)
[20:25:43] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:1922:b0bb:f21:d408:d79e)
[20:26:32] *** Joins: Tangent-Man (~Tang3nt-M@213.205.240.3)
[20:26:54] *** Joins: otty (~arun@49.15.202.67)
[20:27:29] *** Quits: Tangent-Man (~Tang3nt-M@213.205.240.3) (Remote host closed the connection)
[20:27:48] *** Quits: sheldon (~sheldon@user/sheldon) (Quit: sheldon)
[20:27:51] *** Joins: Tangent-Man (~Tang3nt-M@213.205.240.3)
[20:28:33] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[20:28:49] <Inline> i don't think it's utf-8 at fault there, locally it's probably utf-8 thereover, but the http/https stream might not be utf-8 aware ?
[20:30:01] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Remote host closed the connection)
[20:30:12] <Inline> multi-grapheme or not, normally it works with utf-8 too right ?
[20:30:22] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:31:22] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:32:27] *** Joins: danisanti (~daniel@user/danisanti)
[20:35:02] *** Quits: oxfuxxx (~oxfuxxx@138.199.16.104) (Ping timeout: 252 seconds)
[20:35:18] <pragma-> https://i.imgur.com/NvmeKXO.png  -- I'm on my 7 inch tablet using connectbot terminal to ssh into my screen session. Works fine here!
[20:36:12] <Bou> does 🫱🏾‍🫲🏼 though? (handshake with two different skin tones, 5 codepoints)
[20:36:21] <pragma-> no
[20:36:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[20:36:45] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[20:36:49] <pragma-> probably displays fine on my desktop pc
[20:36:52] <Inline> 4 were displayed and none of them render the glyphs
[20:37:17] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:37:35] *** Joins: cart_ (~cart@2a01:4c8:41:b099:7972:53f1:da15:3fd2)
[20:37:37] <Inline> 01FAF1 01F3FE 01FAF2 01F3FC
[20:37:47] <pragma-> i might have uploaded that imgur in lowest quality
[20:38:40] <Bou> Inline: no zero-width joiner in the middle? weird.
[20:38:52] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[20:40:14] <Bou> huh, it doesn't show in my DOM tree here either (using irccloud, web client)... but somehow it renders correctly.
[20:40:47] <pragma-> web browsers are using the dark arts
[20:42:55] <Inline> lol
[20:43:10] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:44:31] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:1922:b0bb:f21:d408:d79e) (Ping timeout: 245 seconds)
[20:44:41] <Inline> ok, now it looks really fine
[20:44:42] <Inline> https://onlinegdb.com/7crU_eljx
[20:45:16] *** Quits: john99 (~john99@134.238.222.5) (Quit: Client closed)
[20:45:26] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[20:46:58] <Inline> and maybe change similar naming sound too in the code hmmm
[20:47:00] *** Joins: Tempesta (~Tempesta@user/tempesta)
[20:47:14] *** Quits: otty (~arun@49.15.202.67) (Quit: WeeChat 3.0)
[20:47:14] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[20:47:16] <Inline> err maybe change similar named things too in the code
[20:47:49] *** Joins: rawley (~rawley@142.99.241.242)
[20:48:22] <Inline> like *hostname in array_put as *dest and **hostname in array_get as **source
[20:51:07] *** Joins: BCMM (~BCMM@user/bcmm)
[20:52:33] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:52:50] <Inline> right
[20:52:52] <Inline> https://onlinegdb.com/F7NnwZMqa
[20:52:59] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:53:36] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Quit: WeeChat 3.0)
[20:53:42] <Inline> or other way around and use short names in parameter lists and change char *dest to char *destination in main()
[20:53:58] <Inline> hmm, that sounds even better
[20:55:33] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:55:49] <Bou> trying to understand, this `char **buff` thing needs to hold how many strings?
[20:58:29] <Bou> you allocate it with `calloc(sizeof(MAX_NAME_LENGTH), sizeof(char))`, it appears to me like you want `calloc(SIZE, sizeof(char*))`
[21:01:03] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 260 seconds)
[21:02:34] *** Joins: Enitin (~Enitin@82.180.145.223)
[21:04:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:04:23] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[21:04:36] <Inline> https://onlinegdb.com/AHiEeiJSs
[21:04:41] <Inline> yep, better
[21:05:24] <Bou> hm, no, your SIZE is `sizeof(ptrdiff_t)`, this makes no sense
[21:05:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:06:13] *** Joins: coaxing (~coaxing@user/coaxing)
[21:06:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:06:35] <Inline> ptrdiff_t size (array *q)  return (q->head - q->tail);} it's pointer subtraction
[21:06:46] <Inline> so it's ok
[21:08:01] <Bou> but... it says `sizeof()`, not size()
[21:08:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:08:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:08:41] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 250 seconds)
[21:09:32] <Inline> it's just allocating room for a string
[21:09:51] <Inline> but zeroing it all
[21:09:56] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[21:10:23] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 260 seconds)
[21:11:59] <Bou> your preprocessor is going to turn `sizeof(MAX_NAME_LENGTH)` into `sizeof(56)`, what do you think that does?
[21:13:10] <Inline> ah sorry
[21:13:34] *** Joins: inlight (~n0ise@user/inlight)
[21:14:28] <Inline> https://onlinegdb.com/BDKloP9-u
[21:14:30] <Inline> ok
[21:14:56] <Inline> i named parameter names according to their roles where it (maybe) matters
[21:15:12] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[21:15:13] *** Joins: mahmutov (~mahmutov@5.176.38.47)
[21:15:45] <constxd> there is still a lot wrong with this
[21:15:48] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[21:15:49] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[21:15:49] *** Joins: nortoh (~nortoh@user/nortoh)
[21:15:53] <Bou> now you allocate a string, but you assign it to buff which is a char**
[21:15:53] <Inline> name some
[21:16:08] <Inline> constxd ?
[21:16:59] <constxd> ptrdiff_t makes no sense, you're subtracting two values of type size_t
[21:17:30] <constxd> memcpy is not what you want, you're copying 56 bytes regardless of the size of the input string, which is going to result in UB when the input string is fewer than 56 bytes
[21:17:54] <constxd> e.g., "www.libera.chat\n"
[21:17:55] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[21:18:25] *** Quits: cart_ (~cart@2a01:4c8:41:b099:7972:53f1:da15:3fd2) (Ping timeout: 250 seconds)
[21:18:40] <constxd> but also what Bou has said: the way you're using `buff` makes no sense
[21:18:56] <twkm> size_t being unsigned the result must be as well.  ptrdiff_t is signed, so assigning to such might yield a surprise.
[21:19:42] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:20:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:20:56] <Inline> ahh
[21:21:13] <Inline> so my first version was correct then
[21:21:14] <Inline> meh
[21:21:16] <constxd> also you're allocating a buffer for the result of array_get, but then inside that function you're overwriting the pointer to that buffer with a newly allocated one, so the first one is now unreachable
[21:21:56] <constxd> probably you should leave the allocation up to the caller, and array_get should just accept `char *`, not `char **`
[21:22:29] <constxd> so char *dest = malloc(...); ... array_get(a, dest);
[21:23:27] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[21:23:28] <Bou> tbh I'm not even sure what this code is supposed to do
[21:24:15] *** Joins: noarb (~noarb@user/noarb)
[21:25:27] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[21:30:14] *** Quits: ekathva (~ekathva@2001:999:230:5e27:a0b1:eaf6:c841:8439) (Remote host closed the connection)
[21:31:29] <Inline> constxd: doesn't work, i already tried, i get garbage back
[21:31:42] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 272 seconds)
[21:31:43] <constxd> what?
[21:32:16] <Inline> constxd: i.e. when array_get should accept just char * and not char**
[21:32:25] <constxd> then you did it wrong
[21:32:30] <Inline> i already tried
[21:32:34] <Inline> i get garbage
[21:32:40] <constxd> lmao
[21:32:44] <Inline> consistently garbage
[21:32:48] <constxd> then you had an error
[21:33:28] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:33:50] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[21:33:57] *** Joins: vekay (~vekay@user/vekay)
[21:34:28] <Inline> oh, that garbage was due to the extra malloc that you mentioned, now it works ok
[21:35:53] <Inline> ok with respect to the magic number therein, it's not my code, i was just trying to get my head around it and make it work, it was even more buggy, calloc was not called at the right place etc...
[21:36:42] <Bou> This is going to be a circular buffer or strings, right? And it owns the strings (allocates memory, makes its own copies)
[21:36:55] *** Joins: Tempesta (~Tempesta@user/tempesta)
[21:37:16] <Bou> So when it's full it will need to free the old strings it's overwriting. This code will leak memory
[21:37:39] <Inline> no idea
[21:37:47] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[21:38:08] <Inline> someone was yesterday claiming it had todo with deadlocking
[21:38:21] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 256 seconds)
[21:38:31] <Bou> Get it to work single-threaded first
[21:39:20] *** Joins: cryptonector (~nico@24.28.108.183)
[21:39:22] *** Quits: buzel (~buzel@fsf/member/buzel) (Quit: bye)
[21:39:38] <Inline> https://onlinegdb.com/RMqFhzRWo ok
[21:39:49] <Inline> with respect to leakage
[21:40:01] <Inline> i have no idea how that code was intended to be used
[21:40:34] <Inline> it's just i noticed the whole array_init thing was flawed to begin with
[21:40:56] *** Joins: alunity (~alunity@user/alunity)
[21:41:56] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:4358:9254:3cea:bb79)
[21:42:15] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[21:43:22] *** Parts: alunity (~alunity@user/alunity) (Konversation terminated!)
[21:43:32] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:43:55] *** Joins: inlight (~n0ise@user/inlight)
[21:45:28] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b8d6:aaba:d42d:fbd1)
[21:45:28] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b8d6:aaba:d42d:fbd1) (Changing host)
[21:45:28] *** Joins: skapata (~Skapata@user/skapata)
[21:49:04] *** Quits: noteness_ (~noteness@user/noteness) (Remote host closed the connection)
[21:49:47] *** Joins: noteness (~noteness@user/noteness)
[21:50:01] *** Joins: buzel (~buzel@fsf/member/buzel)
[21:53:30] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[21:58:36] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[21:59:46] <owensjrw> Think I am going backwords on this. I am trying to read the file to see how many lines it contains to make an array of char *data[13] that will hold unknown number of char[13] until the read of the file. This is my first time trying to char *array[x]. What am I not doing right? https://pastebin.com/6nK4AXb6
[22:00:25] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:00:32] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:01:57] <nitrix> Line #34, the asymmetric malloc is a dead giveaway.     number = malloc(sizeof(*data) * lines);
[22:01:58] <Bou> number is a `char*`, so one single string of sizeof(*data) * lines
[22:02:17] <nitrix> ,tell owensjrw about mallocidiom
[22:02:17] <candide> owensjrw: T *p = malloc(sizeof *p) is more robust than T *p = malloc(sizeof (T)) because sizeof *p will always be the correct size of T and it prevents unnecessarily repeating the T (DRY principle). If sizeof (T) is used and later one of the T's is changed there will be a mismatch. T *p = malloc(sizeof *p) is more concise and easier to read, especially when T is a compound type.
[22:02:44] <Bou> you want a `char**` and then allocate each number[i] with malloc(...)
[22:04:11] *** Quits: zeenk (~zeenk@79.115.191.105) (Quit: Konversation terminated!)
[22:08:16] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[22:08:17] *** Quits: pehaef (~pehaef@user/pehaef) (Quit: leaving)
[22:08:19] *** Quits: iomari892 (~iomari891@197.210.79.98) (Quit: WeeChat 3.3)
[22:08:33] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[22:08:35] <owensjrw> Hmmm .. so to make  {data[13], data[13], data[13], .... } within numbers I have to char **numbers; numbers = malloc(*data) * lines;
[22:09:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:10:25] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:10:25] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:10:55] *** Joins: Oddity (~Oddity@user/oddity)
[22:11:20] *** Joins: kts (~kts@103.73.237.29)
[22:12:19] *** Quits: kts (~kts@103.73.237.29) (Client Quit)
[22:12:45] *** Joins: kts (~kts@103.73.237.29)
[22:13:56] <Bou> no, *data is a char, that's just one character. you want "lines" pointers
[22:15:42] <nitrix> If you allocate some storage and assign it to something of type `T*`, then malloc needs to allocate a `T`.
[22:16:38] <nitrix> I'm not sure why you're mixing `numbers` and `data` in that allocation, they shouldn't have anything to do with one another.
[22:17:07] <nitrix> Fix the type of `numbers` if it's not the type that you want (should probably be `char (*)[13]` instead), but yeah.
[22:19:55] <tusko> some say C isn't really a programming language
[22:20:30] <nitrix> By the way, char [13] is actually one of the very few good uses for a typedef.
[22:21:32] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[22:21:48] <nitrix> If it's going to get repeated a lot and don't want to litter the codebase with the magic number 13, nor some FOO_SIZE constant, you might as well have some proper alias for it.
[22:21:54] *** Quits: kts (~kts@103.73.237.29) (Quit: Konversation terminated!)
[22:22:00] <edk> yes, but otoh array typedefs tend to confuse people
[22:22:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[22:22:36] *** Joins: raym (~raym@user/raym)
[22:24:00] <tusko> !how define macro function?
[22:24:26] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[22:25:29] <koollman> never write the number the same way twice. keep the reader guessing. [7+6]. then [14-1], then [0x000D]. then [26>>2]. Job security. (maybe don't apply my advice :) )
[22:25:38] <nitrix> tusko, C11 6.10.3p10 for the syntax.
[22:25:46] <tusko> woah
[22:25:54] <tusko> where you looking this stuff up fam
[22:26:03] <nitrix> ,c11 6.10.3p10
[22:26:05] <candide> http://www.iso-9899.info/n1570.html#6.10.3p10 [Macro replacement] A preprocessing directive of the form # define identifier lparen identifier-listopt ) replacement-list new-line # define identifier lparen ... ) replacement-list new-line # define identifier lparen identifier-list , ... ) replacement-list new-line defines a function-like macro with parameters, whose use is similar syntactically to a functio... <truncated; https://0x0.st/oqSD.txt>
[22:26:11] <nitrix> The Standard...
[22:26:19] <tusko> I will remember this
[22:26:30] <tusko> your kindness that is
[22:27:41] <nitrix> There are three different forms and the paragraph goes well into details for each one of them.
[22:29:37] *** Quits: xbkkd (~F0@user/xbkkd) (Remote host closed the connection)
[22:32:49] *** Joins: llh (~UPP@user/llh)
[22:33:13] *** Joins: cart_ (~cart@2a01:4c8:41:b099:1f21:f804:55ea:95b5)
[22:34:34] <owensjrw> Thank you all. Going to rework that.
[22:36:04] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:38:25] *** Quits: alch (~alch@151.82.195.131) (Ping timeout: 246 seconds)
[22:39:33] <owensjrw> You might think this is silly but where I am going with this, is I am trying the AOC and I am only on day 3 part 2. My idea was to create a list of the "string" binaries such that numbers{100101110110, 100101111010, 101001110110, etc} then filter out the items not needed by replacing it with NULL until I only have one "string" left. Then I can convert that string into the required decimal number for the multiplication. I know I am thinking about
[22:39:33] <owensjrw> this in a way to difficult manner.
[22:39:54] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:40:19] *** Joins: alch (~alch@bo-18-135-193.service.infuturo.it)
[22:42:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:48:27] *** Joins: bick (~kotaman@94.46.203.147)
[22:48:27] *** Quits: bick (~kotaman@94.46.203.147) (Client Quit)
[22:48:59] *** Quits: data68 (~data@2a02:908:a65:3d80:5d46:48e:53c1:f62) (Ping timeout: 250 seconds)
[22:50:11] *** Joins: v4mp (~v4mp@user/v4mp)
[22:51:08] *** Quits: fe23 (~fe23@2409:8a34:466:6010:e450:a807:7ddd:9d33) (Quit: fe23)
[22:58:02] <Bou> owensjrw: that would work
[22:58:52] <Bou> one thing to consider is to simply replace all newlines with '\0', you'll end up with an array of strings with a lot less work
[23:00:40] *** Joins: gareppa (~gareppa@user/gareppa)
[23:00:43] *** Quits: cart_ (~cart@2a01:4c8:41:b099:1f21:f804:55ea:95b5) (Ping timeout: 260 seconds)
[23:02:07] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[23:02:34] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 246 seconds)
[23:04:31] <owensjrw> so after getline(&line, &len, stream) I need to strcpy (*line, data); line[13] = '\0'; is what you are saying Bou?
[23:05:07] <owensjrw> *edit line[12] = '\0'
[23:05:11] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[23:07:38] <Bou> I meant read the whole file with one fread, into one buffer (it's only a few kilobytes), and then use pointers into that
[23:08:43] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[23:11:12] *** Joins: drbeco (~beco@user/beco)
[23:12:01] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[23:13:49] *** Joins: vicfred (~vicfred@user/vicfred)
[23:14:56] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 272 seconds)
[23:16:37] *** Quits: malloy (~jimery@116.30.222.122) (Ping timeout: 265 seconds)
[23:18:24] *** Joins: malloy (~jimery@116.30.222.122)
[23:19:24] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Remote host closed the connection)
[23:19:28] *** Joins: mixfix41 (~homefame@user/mixfix41)
[23:20:12] <caze> owensjrw: You don't even need a buffer at all. Just have some counters.
[23:20:33] <NRK> what was d3?
[23:20:42] <Bou> and you can do it in O(log n) time (spoiler alert: https://bpa.st/ZTOA)
[23:21:06] <Bou> eh n log n
[23:21:11] <caze> Wait, what's part 2?
[23:21:25] <Bou> part 2 becomes visible after solving part 1
[23:21:34] <caze> Well I don't want to login.
[23:22:19] *** Joins: xbkkd (~F0@user/xbkkd)
[23:22:28] <NRK> oh i remember doing it in shell script
[23:23:14] <Bou> caze: https://bpa.st/raw/JMOA
[23:23:17] <owensjrw> I'm still learning C yaw'll.... not ganna look at the spoiler.. I can do this..
[23:23:49] *** Joins: Waynes (~Waynes@user/waynes)
[23:23:57] <NRK> looking at the shell script now
[23:24:01] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:24:05] <NRK> i have no clue what it's doing
[23:24:41] <Bou> haha I had the same with my code "wtf, was that clown doing"... 3 months after writing it
[23:24:42] *** Joins: justOkay (~justache@user/justache)
[23:28:49] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[23:29:10] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[23:29:40] <Waynes> good code is written for the reader first and for the computer second
[23:30:44] <Bou> in normal situations, yes, but on a programming contest you're allowed to go nuts
[23:30:46] *** Quits: inlight (~n0ise@user/inlight) (Quit: WeeChat 3.3)
[23:31:20] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:31:45] *** Joins: magla (~gelignite@d53668d6.access.ecotel.net)
[23:32:15] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.65) (Ping timeout: 260 seconds)
[23:33:00] <NRK> readability is subjective
[23:33:26] *** Quits: Waynes (~Waynes@user/waynes) (Remote host closed the connection)
[23:33:26] *** Joins: Akuli (~Akuli@87-94-109-66.bb.dnainternet.fi)
[23:33:37] *** Joins: Waynes (~Waynes@user/waynes)
[23:34:13] <Bou> NRK: indeed, https://bpa.st/LYTA
[23:35:39] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:37:45] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:38:17] *** Quits: xbkkd (~F0@user/xbkkd) (Remote host closed the connection)
[23:38:46] <twkm> some contests include maintainability as a factor.
[23:40:06] *** Quits: v4mp (~v4mp@user/v4mp) ()
[23:41:04] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 246 seconds)
[23:45:07] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[23:45:31] *** Joins: VoidSync (~sync@user/voidsync)
[23:47:10] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[23:49:34] <owensjrw> Bou can you walk me through that code at LYTA I did not understand most of it. You all are awesome but always reminding me I have so very much to learn.
[23:50:28] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 260 seconds)
[23:52:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:53:05] <Bou> owensjrw: that was for day 1, and intentionally written badly
[23:54:00] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[23:54:28] <Inline> ok, i'm done for today, i'll look for more gory details tomorrow and how to improve and make it more correct etc.
[23:55:53] <NRK> owensjrw: there's no end to learning. so i just tend to focus on stuff which are interesting to me.
[23:58:42] *** Joins: fikran (~fikran@user/fikran)
[23:59:07] <fikran> I'm sorry! I asked a question and the power went off in my house.
