[00:38:59] *** Quits: fputs (~thelounge@67.59.83.166) (Quit: The Lounge - https://thelounge.chat)
[00:39:19] *** Joins: fputs (~fputs@67.59.83.166)
[01:23:13] <NimEventer> New thread by Giaco: Arraymancer `in` operator, see https://forum.nim-lang.org/t/8580
[01:55:01] *** Joins: klil (~klil@213.246.15.64)
[01:55:09] <klil> welcome
[01:55:15] <klil> hello
[01:55:23] <klil> can you help me
[01:55:26] <klil> nim
[01:56:27] *** Quits: klil (~klil@213.246.15.64) (Client Quit)
[02:09:46] <FromDiscord> <dom96> don't ask to ask
[02:09:50] <FromDiscord> <dom96> just ask your question
[02:25:16] <FromDiscord> <sealmove> wtf: https://github.com/nim-works/nimskull
[02:27:13] <arkanoid> sealmove, exactly
[02:27:28] <FromDiscord> <sealmove> almost seems like a hoax
[02:30:42] <arkanoid> you think?
[02:31:58] <FromDiscord> <sealmove> I don't understand >< help me
[02:32:25] <arkanoid> I can't
[02:32:48] <FromDiscord> <sealmove> Maybe he made it in April 1st?
[02:33:18] <FromDiscord> <leorize> it's a nim fork
[02:33:39] <FromDiscord> <leorize> that's all to it right now
[02:34:04] <FromDiscord> <sealmove> but I see a lot of big names contributing
[02:34:15] <FromDiscord> <sealmove> what's the rational?
[02:34:54] <FromDiscord> <leorize> we got tired of the way Nim is going
[02:35:06] <FromDiscord> <sealmove> which is?
[02:35:20] <FromDiscord> <sealmove> you mean the development process?
[02:36:00] <FromDiscord> <leorize> mostly, yeah
[02:36:41] <FromDiscord> <sealmove> sorry not trying to hit a vein here >< I'm truly ignorant, just saw the repo for the first time
[02:36:54] <FromDiscord> <leorize> don't worry \:p
[02:37:26] <arkanoid> is there a statement somewhere on the original nim channels about this? It's something the community should be aware of?
[02:37:36] <FromDiscord> <leorize> it's just been established and not a lot has happened yet
[02:37:52] <FromDiscord> <leorize> which is why it wasn't advertised, but somehow y'all caught on it \:p
[02:38:10] <FromDiscord> <Elegantbeef> We'll put the blame on me 😛
[02:38:12] <FromDiscord> <sealmove> github feed algorithm lol
[02:38:18] <FromDiscord> <sealmove> it's not just facebook or instagram
[02:38:25] <FromDiscord> <Elegantbeef> I'm just such a likeable person people follow me!
[02:38:49] <FromDiscord> <sealmove> actually it was disruptek for me, he starred it
[02:39:08] <arkanoid> I also got it from github feed
[02:39:18] <FromDiscord> <leorize> you can check the project tab for a roadmap
[02:39:43] <FromDiscord> <leorize> but functionally we haven't deviated yet
[02:40:11] <FromDiscord> <leorize> discussions is also open if y'all are interested in helping out
[02:40:21] <FromDiscord> <leorize> no chatroom yet, the thing is barely a week old
[02:41:28] <arkanoid> sure, thing, but the first topic would be what's the future of the community and general direction
[02:43:25] <FromDiscord> <leorize> [saem](https://matrix.to/#/@saem:matrix.org) should be the best person to provide a brief on this
[02:44:02] <FromDiscord> <leorize> afaict the direction right now is to fix the architecture of the compiler
[02:44:08] <FromDiscord> <Elegantbeef> My description would be a less tech debt filled compiler that enables "correct" code
[02:45:38] <FromDiscord> <leorize> what the project mean for the community would be a more robust compiler and a more streamlined process for getting stuff done
[02:46:04] <FromDiscord> <RattleyCooper> Having a good description will be important for people who don't know much about how nim works behind the curtain (totally not talking about me 👀)
[02:46:15] <FromDiscord> <leorize> with that said, consider the current state to be pre-pre-alpha \:p
[02:46:26] <FromDiscord> <leorize> more details will come on a later date
[02:46:35] <FromDiscord> <Elegantbeef> Yea we're more interested in contributors than a community \:d
[02:47:34] <FromDiscord> <RattleyCooper> In reply to @Elegantbeef "Yea we're more interested": Fine! 😢
[02:47:34] <FromDiscord> <leorize> currently we are driven by a few nim devs who work in their free time (on weekends only)
[02:47:41] <FromDiscord> <sealmove> So from what I understand after taking a better look, it looks like the compiler code was copied over and it's getting refactored to incorporate better testing.
[02:48:24] <FromDiscord> <Elegantbeef> Well that's the first step
[02:48:25] <FromDiscord> <leorize> yea, as I said, it's barely changed from mainline
[02:48:42] <FromDiscord> <Elegantbeef> It will change over time but right now it needs legs to stand on
[02:50:13] <FromDiscord> <sealmove> But it's 6-year old? And you sound like you came up with the idea yesterday
[02:50:23] <FromDiscord> <Elegantbeef> It's not 6 years old
[02:50:30] <FromDiscord> <Elegantbeef> It's a fork of the nim compiler
[02:50:33] <FromDiscord> <leorize> it's a week old lol
[02:50:44] <FromDiscord> <sealmove> ah ok x)
[02:51:03] <FromDiscord> <sealmove> I am stupid and forget how github forks work
[02:51:07] <FromDiscord> <Elegantbeef> We're not rebuilding from the ground up, we're modifying the already existent compiler
[02:51:34] <FromDiscord> <sealmove> Yes that's easy inferable looking at the repo
[02:51:42] <FromDiscord> <sealmove> (edit) "easy" => "easily"
[02:52:02] <arkanoid> is the plan to merge it later on?
[02:52:27] <FromDiscord> <Elegantbeef> Well we have changes that are incompatible with Nim so no
[02:52:31] <FromDiscord> <leorize> that's not planned right now
[02:52:35] <FromDiscord> <sealmove> <secretly doubt it :3>
[02:52:50] <FromDiscord> <Elegantbeef> I personally will try to port everything to both until i cannot
[02:53:01] <FromDiscord> <Elegantbeef> But at some point it's gotta be one or the other
[02:53:12] <FromDiscord> <leorize> one of the reason for the fork was that we disagree with the current development process after all \:p
[02:53:40] <arkanoid> k, got the idea. Well, I'm very happy to see experienced programmers willing to fork and improve. What scares me is that this could split the already small community
[02:53:58] <FromDiscord> <RattleyCooper> ngl I'm excited but also nervous bc I just "learned" nim lol.  Guess it'll be a ways down the road.
[02:54:12] <FromDiscord> <Elegantbeef> Eh it's not going to change much in regards to syntax
[02:54:22] <FromDiscord> <Elegantbeef> New features will be added/some removed but the we love the syntax/language
[02:54:31] <FromDiscord> <leorize> having good tools has never break a language \:p
[02:54:32] <FromDiscord> <Elegantbeef> Or atleast intended language
[02:55:17] <FromDiscord> <RattleyCooper> Perfect.  Yeah, that's what I love about nim as well so that's good to hear.  Excited to see what happens.  Can someone invite me to chat once it's up and running or I will a link be on the github page at some point?
[02:55:30] <FromDiscord> <RattleyCooper> (edit) 04removed "I"
[02:55:46] <FromDiscord> <Elegantbeef> There will be a link eventually, when it's sufficiently progressed
[02:55:52] <FromDiscord> <RattleyCooper> Cool cool!
[02:56:13] <FromDiscord> <Elegantbeef> Presently we're more interested in people contributing than growing a community, so if you want to see it sooner, get on helping hax with language spec tests
[02:57:05] <FromDiscord> <sealmove> "spec testing"... looks like just more tests :P
[02:57:06] <FromDiscord> <Elegantbeef> It's a relatively simple thing anyone should be able to handle, chip away at a few tests and make a PR
[02:57:23] <FromDiscord> <Elegantbeef> It's establishing the language through tests instead of words
[02:58:45] <FromDiscord> <Elegantbeef> In saem's words you should be able to learn the language from reading the spec tests
[02:59:08] <FromDiscord> <sealmove> That's a curious idea, never heard of something similar
[02:59:17] <FromDiscord> <leorize> and most importantly it will be the basis for some of the large refactoring planned
[02:59:54] <FromDiscord> <Elegantbeef> Yep, plus feature additions can be written in the test spec and used to test it workiing
[03:00:10] <FromDiscord> <tandy> i saw hc's issue/pr this is a great plan
[03:00:20] <FromDiscord> <tandy> how will this be done?
[03:00:48] <arkanoid> apart from making the language more testable, which breaking improvements are you willing to add at the end of the refactoring?
[03:01:02] <FromDiscord> <leorize> nkError is the first step, of which you can see the pipeline in the projects tab
[03:01:03] <FromDiscord> <tandy> at the moment you learn nim by seeing it / being involved etc but having this kind of document would be invaluable
[03:01:16] <FromDiscord> <tandy> also means less time writing documentation!
[03:01:54] <FromDiscord> <tandy> would this feature be mergeable into nim?
[03:01:56] <FromDiscord> <Elegantbeef> We have some language changes for bad for human parts of nim (Distincts/hooks)
[03:02:04] <FromDiscord> <tandy> has there been any communication with nim dev team?
[03:02:13] <FromDiscord> <sealmove> Can it really replace documentation? Some concepts can't be explained through code
[03:02:19] <FromDiscord> <leorize> but, uh remember that this is a week old and we work on weekends only
[03:02:32] <FromDiscord> <Elegantbeef> Some of us only work on weekends 😛
[03:02:38] <FromDiscord> <Elegantbeef> Some of use dont even work on it
[03:02:40] <FromDiscord> <tandy> i think for a lot of things it can help, which is where nim is lacking on documentation atm↵(@sealmove)
[03:02:42] <FromDiscord> <Elegantbeef> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/904875612479565895): Some of us dont even work on it
[03:02:58] <FromDiscord> <Elegantbeef> I mean it's not just tests, there are also comments included with the tests
[03:03:02] <FromDiscord> <tandy> if i wasnt a student id send u guys money lol
[03:03:04] <FromDiscord> <Elegantbeef> So you have words + code
[03:03:45] <FromDiscord> <leorize> replacing docs is not the final goal of the spec tests, mind you \:p
[03:03:46] <FromDiscord> <Elegantbeef> Donations accepted include adding tests 😛
[03:04:04] <FromDiscord> <leorize> the major refactorings will break things and we need extra tests to cover ourselves
[03:04:26] <FromDiscord> <tandy> il start contributing when i finish in 6 months
[03:04:28] <FromDiscord> <tandy> \:))
[03:04:45] <FromDiscord> <tandy> its defo a nice bonus tho \:)
[03:05:22] <FromDiscord> <tandy> one slightly irelevant thing, is infrastructure available to measure regressions through CI?
[03:05:44] <FromDiscord> <tandy> like i know benchmarking with ci is bad but maybe it could be useful for this kind of scale ..
[03:06:31] <FromDiscord> <leorize> not yet
[03:07:01] <FromDiscord> <leorize> there might be something, but I can't promise that
[03:07:46] <FromDiscord> <tandy> i was more talking in general, about whether some solution existed
[03:07:51] <FromDiscord> <tandy> would b nice to have
[03:08:53] <FromDiscord> <leorize> maybe in the very far future we will get a server rack to run benchmark on
[03:09:07] <FromDiscord> <leorize> but, again, this thing is a week old so please wait \:p
[03:09:47] <arkanoid> are you expecting a discussion with araq and other core devs?
[03:10:22] <FromDiscord> <tandy> yes, haha
[03:11:21] <arkanoid> splitting nim won't help people like me trying to push nim into production
[03:12:03] <FromDiscord> <tandy> tell that to the core team↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[03:12:19] <FromDiscord> <tandy> not these guys who are putting effort into making nim a community effort
[03:14:37] <FromDiscord> <sealmove> This will help LSP?
[03:15:00] <FromDiscord> <sealmove> If so it's the main selling point imo
[03:15:26] <FromDiscord> <sealmove> <leorize feeling the pressure :>>
[03:15:59] <FromDiscord> <leorize> I'm alternating between cooking and chatting \:p
[03:16:24] <FromDiscord> <leorize> and it doesn't help that y'all are asking a lot out of the week old project \:p
[03:17:28] <FromDiscord> <sealmove> you can't be this insurrectional and expect no questions
[03:17:50] <FromDiscord> <leorize> I'd say that more info will come as more work is put in
[03:18:11] <FromDiscord> <leorize> there isn't much that I can say right now, the project has more than just me \:p
[03:18:42] <FromDiscord> <sealmove> I am almost persuaded to help :3
[03:20:11] <FromDiscord> <sealmove> rn as far as nim is concerned, i would like to contribute to anything that bring us closer to having advanced ide tooling
[03:20:29] <arkanoid> agree
[03:22:11] <FromDiscord> <sealmove> I suspect key tooling components are hard to build right now because the compiler is not modular enough rn, but I could be completely wrong since I don't understand much of the compiler code.
[03:27:42] <FromDiscord> <evoalg> So the aim isn't just for a different compiler, but a new language? Similar but different? So tutorials / books will be written eventually?
[03:28:27] *** Joins: brain-soup (~Srain@c-73-1-122-89.hsd1.fl.comcast.net)
[03:29:08] <FromDiscord> <sealmove> No it's the same language
[03:30:10] <FromDiscord> <sealmove> Just more well defined spec through excessive testing, which might lead to slight language changes to make it more _correct_. At least that's my take.
[03:31:08] <FromDiscord> <evoalg> ok ... I guess I was trying to get a feel of the extent of where it says "Ultimately this will mean a different community, language, standard library, and much more."
[03:32:35] <FromDiscord> <sealmove> different community, though it doesn't have to be this way. Different language, no. Different standard library, kind of, yes.
[03:32:36] <FromDiscord> <Elegantbeef> Well features will be added/changed but the overall language will be "the same but different"
[03:33:50] <FromDiscord> <evoalg> just don't take "collect" away! 😉
[03:34:05] <FromDiscord> <Elegantbeef> I mean collect is a macro 😛
[03:34:16] <FromDiscord> <Elegantbeef> Saem personally doesnt like macros but has no plan of removing them
[03:34:22] *** Parts: brain-soup (~Srain@c-73-1-122-89.hsd1.fl.comcast.net) (Leave.)
[03:35:34] *** Joins: brain-soup (~Srain@2001:558:6030:32:7005:beb7:eb36:a267)
[03:36:11] <FromDiscord> <evoalg> ohhhh ... ahh ok I know so little ... but then again, from a noob's perspective learning nim, "collect" is absolutely part of the language. Oh interesting that Saem doesn't like macro's when from what i can gather they are all the fashion ... I've been trying to avoid them thus far
[03:38:56] <FromDiscord> <evoalg> I'm someone trying to learn & use nim without having to know C or the having to know difference between the stack & the heap, and not having to know what functional programming is ... you can tell I've mainly used python 😉 ... but I've read that I don't have to know that stuff unless I'm doing something tricky like interfacing with some hardware using a c lib or something
[03:39:13] <FromDiscord> <Elegantbeef> To be fair though leorize we're not compatible with Nim already 😛 We no longer have marshal in the VM and no longer have importutils
[03:40:14] <arkanoid> every time I tried using collect, I ended up in a corner where it was better not using it. As an extensive user of python comprehensions and c# linq expressions, I would say that collect macro is not up to the task
[03:40:30] <FromDiscord> <Elegantbeef> Well saem doesnt like them since they're obfuscation engines practically, it's hard to audit what's going on internally with them
[03:40:37] <FromDiscord> <Elegantbeef> Eh i use collect a lot it does it's job well imo
[03:40:54] <FromDiscord> <leorize> but luckily saem isn't the only dev \:p
[03:41:22] <FromDiscord> <Elegantbeef> I mean he's the odd one out with that view
[03:42:13] <FromDiscord> <evoalg> I used to like python LC's, but now I'm so in love with collect
[03:42:38] <FromDiscord> <leorize> macros as the compiler implement it might change though
[03:43:03] <FromDiscord> <Elegantbeef> My view will always be list comprehensions are backwards
[03:43:16] <FromDiscord> <Elegantbeef> it's just an unintuitive to read mess
[03:43:57] <FromDiscord> <evoalg> exactly
[03:43:59] <FromDiscord> <leorize> nim's collect is pretty easy to read
[03:44:06] <FromDiscord> <leorize> the impl is just horrendous though
[03:44:17] <FromDiscord> <Elegantbeef> Yea collect is much more imperative which fits better
[03:44:43] <FromDiscord> <Elegantbeef> What's the issue with collect?
[03:46:15] <FromDiscord> <leorize> try to read the impl
[03:46:22] <FromDiscord> <Elegantbeef> Oh ok i see
[03:52:07] <FromDiscord> <Elegantbeef> Uh oh saem read all the messages, scatter!
[03:54:13] <FromDiscord> <KimJongUnstoppable> Anyone have issues using writeFile on Windows? Every file I try to write to, I get an IO error, regardless of directory I'm in. Even if I'm using an admin elevated command prompt, I still get failures. The only directory I can write to is the temp directory.
[03:54:24] <FromDiscord> <KimJongUnstoppable> Wondering if it's a me issue or an OS thing.
[03:54:51] <FromDiscord> <Elegantbeef> Have you read the IoError message?
[03:56:03] <FromDiscord> <KimJongUnstoppable> Unhandled Exception, cannot open, [IO error] are the basics of it, aside from the file name and location
[03:57:19] <FromDiscord> <Elegantbeef> I can only imagine you're trying to write in a location you dont have user permissions for
[03:57:59] <FromDiscord> <KimJongUnstoppable> Which is the confusing part, since I've tried the documents folder, the desktop, a drive I use only for storage, and I tried all that from an admin-elevated command prompt, and elevating the binary as admin. None of it worked.
[03:58:35] <FromDiscord> <KimJongUnstoppable> Typing this out is making me think it's an issue with my machine or copy of windows rather than a package issue with std/io
[03:59:03] <FromDiscord> <leorize> if every other applications work, then it might be an issue with nim
[03:59:26] <FromDiscord> <KimJongUnstoppable> I've never experienced any issues writing to any of those directories before, in python or in general
[03:59:58] <FromDiscord> <leorize> can you try running a nim compile outputting to that directory?
[04:00:12] <FromDiscord> <leorize> if that works then it might just be your code bugging somehow
[04:00:17] <FromDiscord> <KimJongUnstoppable> it compiles fine into the directory I was testing from and then when I run the executable I made it won't write to any files in that directory
[04:00:41] <FromDiscord> <leorize> do you mind sharing the part that was erroring?
[04:00:49] <FromDiscord> <KimJongUnstoppable> I'll spend some more time testing and try to see if I can find a more specific issue than just "IO error" and come back
[04:01:11] <FromDiscord> <leorize> and please keep in mind about win32 special names
[04:04:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:20:32] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[04:26:07] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[05:33:55] *** Quits: krux02 (~krux02@p54932344.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:50:01] <FromDiscord> <evoalg> I'm just checking ... for a variable I use "var", but if it doesn't change I can use "let" (which has to be resolved at compile time), but even if it doesn't change, instead of using "let" I can use "var" if I want to, and the code will probably run just as fast either way, but using "let" will catch if I inadvertently try to change it later in the code, so it's more thing of good programming practice to use let when it doesn't change - ha
[05:50:37] <FromDiscord> <Elegantbeef> Nope let does not have to be resolved at compile time
[05:50:50] <FromDiscord> <Elegantbeef> `let` is a runtime immutable, `const` is a compile time constant
[05:51:08] <FromDiscord> <evoalg> ahhh ok! ... have I got the rest of it right?
[05:51:23] <FromDiscord> <Elegantbeef> My rule is `const -> let -> var`
[05:51:27] <FromDiscord> <Elegantbeef> If it can be constant make it as such, if it needs runtime info, use let, otherwise use var
[05:51:51] <FromDiscord> <Elegantbeef> But yes let/var is just a typesystem thing and has 0 effect on runtime speed
[05:52:21] <FromDiscord> <Rika> Why does skull not have import utils ?
[05:56:43] <FromDiscord> <Elegantbeef> Oh it actually still does, guess i just tried compiling wrong
[06:07:45] <FromDiscord> <evoalg> for something declared as with var, I can call a variable, but do name should I use for something declared as a let? ... it's not a variable, right? or is it a variable, just an immutable variable?
[06:08:11] <FromDiscord> <Elegantbeef> it's an immutable variable
[06:08:38] <FromDiscord> <Rika> If you want to really make it sound sensible you can prolly use names value
[06:08:40] <FromDiscord> <Rika> Named
[06:11:23] <FromDiscord> <evoalg> I don't know what you mean Rika?
[06:12:46] <FromDiscord> <Rika> Instead of “variable”, “named value”
[06:13:05] <FromDiscord> <evoalg> ahhh ok 😉
[06:15:37] <FromDiscord> <evoalg> so I don't have to pass const's to proc's / func's which is nice, but for other variable I do, and sometimes I have to pass lots of them! ... is this a case where I should bundle them up into something like an object or a tuple, to save on typing really long proc parameter lines?
[06:17:40] <FromDiscord> <Rika> usually yeah pretty much
[06:18:02] <FromDiscord> <evoalg> Thank you!
[06:31:18] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:38:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:52:00] <FromDiscord> <evoalg> instead of a func, I could call it proc instead and it wouldn't change anything (if that's the only change I made) right? The reason we would use func is to catch any side effects that we might introduce inadvertently later, so it's more of a good programming practice thing to do? ... but I could run a proc as a func and it wouldn't change the speed of the program?
[08:57:53] <FromDiscord> <Rika> Yes
[09:13:50] *** Joins: Guest62 (~Guest62@n220246097068.netvigator.com)
[09:14:04] *** Quits: Guest62 (~Guest62@n220246097068.netvigator.com) (Client Quit)
[09:14:17] *** Joins: Guest62 (~Guest62@n220246097068.netvigator.com)
[09:14:29] *** Quits: Guest62 (~Guest62@n220246097068.netvigator.com) (Client Quit)
[09:33:20] <FromDiscord> <dangbinghoo> hi, we should have a "Packages" link on nim-lang.org for  https://nimble.directory/
[09:50:36] <FromDiscord> <demotomohiro> There is a link to nimble directory in: https://nim-lang.org/documentation.html
[10:04:53] <FromDiscord> <dangbinghoo> home page is more convenient
[10:05:26] <FromDiscord> <Elegantbeef> something about PRs welcome here
[10:05:52] <FromDiscord> <narimiran> something about bookmark the documentation page, and then it is as convenient as home page
[10:06:29] <FromDiscord> <Elegantbeef> Shit you got me
[10:07:22] <FromDiscord> <narimiran> (but don't bookmark nimble.directory, that's too convenient!)
[10:07:44] <FromDiscord> <Elegantbeef> Yea two clicks are better than one
[10:07:54] <FromDiscord> <Elegantbeef> Twice as satisfying to hear
[10:08:29] <FromDiscord> <Elegantbeef> And certainly dont make a rofi frontend to search the registry
[10:42:47] *** Quits: anjovi (~userf@gateway/tor-sasl/mantisfan) (Remote host closed the connection)
[10:43:11] *** Joins: anjovi (~userf@gateway/tor-sasl/mantisfan)
[11:16:16] <FromDiscord> <dangbinghoo> https://tenor.com/view/bunnies-what-confused-meh-gif-13712192
[11:16:42] <FromDiscord> <dangbinghoo> 🙃
[11:32:44] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[11:32:44] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[11:32:44] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:38:56] *** Quits: anjovi (~userf@gateway/tor-sasl/mantisfan) (Remote host closed the connection)
[11:39:18] *** Joins: anjovi (~userf@gateway/tor-sasl/mantisfan)
[11:43:10] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 260 seconds)
[11:43:13] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:20:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[12:21:44] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[12:21:44] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[12:21:44] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:48:30] *** Joins: mahlon (~mahlon@martini.nu)
[14:14:26] <NimEventer> New thread by FernandoTorres: Overloaded array operator allows changing the indexing sequence for objects, but not for tuples., see https://forum.nim-lang.org/t/8581
[15:28:24] <FromDiscord> <hmmm> hey what is the nim equivalent of python list.index("element")
[15:29:42] <FromDiscord> <haxscramper> `list.find("element")`
[15:29:42] <FromDiscord> <ynfle (ynfle)> find
[15:29:47] <FromDiscord> <Yardanico> https://nim-lang.org/docs/system.html#find%2CT%2CS
[15:29:50] <FromDiscord> <Yardanico> xd
[15:30:17] <FromDiscord> <hmmm> good boys
[15:30:34] <FromDiscord> <enthus1ast> but when you have to find in a seq that often, better use another data type, eg table
[15:30:57] <FromDiscord> <enthus1ast> or when the seq ist huge
[15:31:18] <FromDiscord> <enthus1ast> or HashSet
[15:31:34] <FromDiscord> <hmmm> hmm let's see where index takes me, if it becomes painful I'll change data structure
[15:32:17] <FromDiscord> <enthus1ast> for small datasets i might even be faster than hash lookup
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:28] <FromDiscord> <Rika> you?
[15:44:21] <FromDiscord> <dom96> we should all be using O(enthus1ast) lookups
[15:44:50] <FromDiscord> <enthus1ast> \:)
[15:45:08] <FromDiscord> <enthus1ast> somehow my keyboard is dirty i guess
[15:45:28] <FromDiscord> <dom96> huh, we went to 12.1k stars pretty fast on the Nim repo
[15:45:52] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:58:56] <FromDiscord> <Goel> It was me making thousands of fake accounts to star Nim :nimble:  _lies_
[16:06:20] <FromDiscord> <Rika> "lies"
[16:25:59] <FromDiscord> <krsh> There is a library for parsing and analyzing ELF files? Like pyelftools and Lief
[16:26:03] <madprops> https://nim-lang.org/docs/nre.html
[16:26:18] <madprops> does find in nre return an Option[RegexMatch] or Option[string] ?
[16:26:32] <PMunch> @dom96, not really a crazy increase in stargazers: https://star-history.t9t.io/#nim-lang/nim
[16:26:56] <madprops> nvm
[16:31:49] <PMunch> @krsh, not sure if we have a library, but this might be helpful: https://formats.kaitai.io/elf/nim.html
[16:32:48] <madprops> so system.quit is not recommended, what's the best way to quietly quit a program?
[16:38:03] <FromDiscord> <haxscramper> I don't know what is wrong with `quit()`
[16:38:17] <FromDiscord> <haxscramper> Well, I would raise an exception and let the program terminate as usual
[16:38:26] <FromDiscord> <haxscramper> `setExitCode()` from exitprocs IIRC
[16:38:40] <FromDiscord> <haxscramper> https://nim-lang.org/docs/exitprocs.html#setProgramResult%2Cint
[16:50:40] <FromDiscord> <dom96> PMunch: that chart is so tiny lol
[16:50:55] <PMunch> So tiny?
[16:51:10] <FromDiscord> <dom96> I mean: doesn’t have a lot of data points.
[16:51:19] <FromDiscord> <dom96> So hard to drill into the recent increase
[16:52:27] <FromDiscord> <dom96> In reply to @haxscramper "I don't know what": Problem with quit is when it’s used in some library code. I don’t want my libraries to terminate my app.
[16:53:22] <FromDiscord> <dom96> So I would say it’s an anti-pattern in apps too. Eventually you’ll refactor into some libraries and run into issues.
[16:53:39] <FromDiscord> <dom96> Exceptions are indeed the way to go
[16:55:15] <PMunch> True. Do you have another which is more high-res?
[17:15:21] <NimEventer> New thread by Miran: This Month with Nim - October 2021, see https://forum.nim-lang.org/t/8582
[17:20:52] <PMunch> Ah damn it, forgot to submit Futhark..
[17:21:05] <PMunch> Yardanico, did you ever try it out with Sciter?
[17:21:31] <FromDiscord> <Yardanico> Sorry, not yet :( thanks for reminding me, I'll try tomorrow
[17:28:28] <PMunch> Sweet, so far it's running smoothly for everything I've used it for :)
[17:43:08] <FromDiscord> <dom96> We should fix this heh https://media.discordapp.net/attachments/371759389889003532/905097194594504714/IMG_7926.png
[17:43:46] <FromDiscord> <IsaacPaul> The squished photo?
[17:44:03] <FromDiscord> <dom96> yep
[17:47:24] <NimEventer> New thread by IvanS:  Error: type mismatch: got <type string> / expected <string> but got <type string> (fidget), see https://forum.nim-lang.org/t/8583
[17:49:44] <FromDiscord> <IsaacPaul> Some pretty cool projects this month
[17:51:09] <FromDiscord> <IsaacPaul> kinda wish changer followed this format: https://keepachangelog.com/en/1.0.0/
[17:53:09] <FromDiscord> <dom96> ooh changer is indeed cool
[18:20:04] <FromDiscord> <tandy> no mention of nimskull \:\>)↵(<@709044657232936960_=4eim=45venter=5b=49=52=43=5d>)
[18:24:56] <FromDiscord> <Yardanico> @tandy ?
[18:25:06] <FromDiscord> <Yardanico> TMWN is user-made content
[18:35:32] <NimEventer> New thread by Aclough: Nim snap status?, see https://forum.nim-lang.org/t/8584
[18:41:51] <PMunch> Hmm, even with `nimble build -y -d:debug --lineDir:on --debuginfo --debugger:native` I don't get debug symbols in my generated so file..
[18:42:23] <PMunch> I have --app:lib --threads:on --gc:orc in my nim.cfg file
[18:42:24] <FromDiscord> <Yardanico> huh
[18:42:35] <FromDiscord> <Yardanico> also generally you don't need anything other that --debugger:native for nim source lines to appear, do you
[18:43:01] <PMunch> Dunno, gdb just keeps saying the library doesn't have debug symbols
[18:43:25] <PMunch> And objdump --syms <file> | grep debug shows nada
[18:47:29] <FromDiscord> <Yardanico> are you trying to debug the library on the same machine where you compiled it?
[18:47:51] <FromDiscord> <Yardanico> but yeah, here it works, gdb just says "Reading symbols from libtest.so..."
[18:48:22] <FromDiscord> <Yardanico> try ` objdump -h libtest.so | grep .debug`
[18:49:23] <FromDiscord> <tandy> technicaly nimskul is user-made↵(@Yardanico)
[18:49:30] <FromDiscord> <Yardanico> you didn't get my point
[18:49:43] <FromDiscord> <Yardanico> TMWN is made from people submitting their projects
[18:49:51] <FromDiscord> <Yardanico> if nimskull is "not there" it means that no one submitted it to TMWN
[18:50:11] <FromDiscord> <tandy> yee i know it was a joke
[18:50:15] <FromDiscord> <dom96> PMunch: make sure Nimble is passing those options by using `--debug`
[18:50:35] <FromDiscord> <dom96> passing those options to Nim
[18:53:00] <PMunch> By the way, when building a dynamically linked library with nimble it doesn't name it libX.so
[18:53:48] <PMunch> Wait, I might've been an idiot and copied the wrong file
[18:54:23] <FromDiscord> <haxscramper> We certainly have a good number of projects to spam tmwn for months, don't worry
[18:54:41] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:55:09] <FromDiscord> <haxscramper> idk, I can automatically churn out library wrappers and auto-submit them
[18:57:02] <FromDiscord> <tandy> nice \:)
[18:57:35] <FromDiscord> <tandy> is there any plan to add union to the nimskull stdlib? i know u guys wanna keep it lean so id imagine no
[18:58:19] <FromDiscord> <haxscramper> it depends ..., but I personally would be glad to see `Result[]`, `union` and more fp-stuff in stdlinb
[18:58:33] <FromDiscord> <tandy> sweet
[18:58:43] <FromDiscord> <haxscramper> since we don't have any opposition on form of "Option is dumb" etc.
[18:59:27] <FromDiscord> <kevin> Stuck on an error in my code: `Warning: 'write' is not GC-safe as it calls 'len'` where write is (https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/streams.nim#L346)
[18:59:44] <FromDiscord> <haxscramper> > ↵> Warning↵>
[18:59:57] <FromDiscord> <kevin> I get an error for my function
[19:00:03] <FromDiscord> <kevin> That's the warning right before it errors
[19:00:13] <FromDiscord> <haxscramper> Then what is the error?
[19:00:17] <FromDiscord> <kevin> `Error: 'serialize' is not GC-safe as it calls 'write'`
[19:00:28] <FromDiscord> <kevin> where serialize is my own function
[19:00:52] <FromDiscord> <kevin> I don't believe something like `len` would actually not be gc-safe by default
[19:08:15] <FromDiscord> <hmmm> hey what was the magic incantation to stuff two seqs in a std/tables
[19:09:46] <FromDiscord> <haxscramper> `for k, v in zip(seq1, seq2): table[k] = v`
[19:10:12] <FromDiscord> <hmmm> this looks like a winner, I'll try it
[19:18:02] <FromDiscord> <IsaacPaul> In reply to @kevin "`Error: 'serialize' is not": You can ignore it by annotating your proc with a pragma: `{.gcsafe.}` but I'd find a gc safe way to use write
[19:19:44] <FromDiscord> <IsaacPaul> Perhaps your stream is a global variable?
[19:19:54] <FromDiscord> <kevin> In reply to @IsaacPaul "You can ignore it": It's a proc local variable
[19:20:33] <FromDiscord> <kevin> Guess I'm confused on how Nim thinks `write` or `len` are not gcsafe
[19:22:44] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3DJ4
[19:22:55] <FromDiscord> <IsaacPaul> may or may not help you.. I'm no expect 😅
[19:23:01] <FromDiscord> <IsaacPaul> (edit) "expect" => "expert"
[19:24:35] <FromDiscord> <kevin> Thanks! 😄
[19:41:36] <FromDiscord> <hmmm> hexxy is strange if I use your magic formula I get a ginormous type error but if I use the standard formula in the docs it works just fine: for pairs in zip(x,y):↵    let (first,second) = pairs↵    q[first] = second
[19:43:14] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[19:45:43] <FromDiscord> <haxscramper> well, read the error idk
[19:45:54] <FromDiscord> <hmmm> yea I'm on it
[19:45:57] <FromDiscord> <haxscramper> or `for (k, v) in zip(x, y)`
[19:46:03] <FromDiscord> <hmmm> I want to use yours because it's comfier
[19:46:19] <FromDiscord> <haxscramper> `for (k, v) in zip(x, y): table[k] = v`
[19:47:51] <FromDiscord> <hmmm> yay it werks
[19:48:01] <FromDiscord> <hmmm> ty 👑
[19:48:38] <FromDiscord> <haxscramper> ah, `zip` is not an iterator
[19:48:42] <FromDiscord> <haxscramper> why it is not an iterator ...
[19:50:59] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/Ibe
[19:51:19] <FromDiscord> <haxscramper> basically `sequtils.zip` creates a new sequence, so `for k, v in sequtils.zip()` is the same as `for k, v in pairs(sequtils.zip())`, that's why you get `k` as int and `v` as `(S1, S2)` that you can't put in the table
[19:51:33] <FromDiscord> <haxscramper> I completely fail to understand why zip is not an iterator
[19:59:18] *** Joins: sagax (~sagax_nb@user/sagax)
[20:30:00] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3DJB
[20:30:46] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3DJE
[20:30:49] <FromDiscord> <haxscramper> index + zipped tuples
[20:31:24] <FromDiscord> <IsaacPaul> ah that's your custom zip function
[20:34:44] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[20:35:57] <FromDiscord> <IsaacPaul> yea the current zip returns a seq of tuples with no index... using `for k, v in` just automatically adds the index as k instead of destructing the tuple
[20:36:21] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[20:37:33] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3DJL
[20:38:03] <FromDiscord> <IsaacPaul> the sdk zip procedure
[20:40:07] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3DJM
[20:44:51] <FromDiscord> <IsaacPaul> Yea I agree it should be an iterator
[20:45:44] <FromDiscord> <Elegantbeef> There should atleast be an iterator variant of all(most) of the procs in sequtils
[20:46:39] <FromDiscord> <IsaacPaul> What's interesting is that being an iterator allows you to bypass destructing the tuple... there seems to be a not so obvious difference in behaviors.
[20:47:05] <FromDiscord> <IsaacPaul> but I'm not new, I'm not sure whats _expected_
[20:47:13] <FromDiscord> <IsaacPaul> (edit) 04removed "not"
[20:48:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3DJS
[20:50:37] <FromDiscord> <IsaacPaul> ah I'm dumb one is actually returning a tuple and the other is returning a seq of tuples which results in the difference of behavior
[20:50:44] <FromDiscord> <IsaacPaul> 1 is
[20:50:47] <FromDiscord> <Elegantbeef> Which also applies to your for loop over a tuple of elements just `k, v` calls `pairs` and `(k, v)` destructors the given value
[20:51:21] <FromDiscord> <Elegantbeef> Uhh
[20:51:38] <FromDiscord> <Elegantbeef> I dont think that's the case
[21:06:53] <nrds> <06Prestige99> Elegantbeef: You have any experience wrapping c++ libraries? I need a box2d wrapper
[21:07:07] <nrds> <06Prestige99> not sure how decent the interop will be
[21:07:33] <FromDiscord> <IsaacPaul> I think there are different implementations of pairs. It seems like most that apply to sequences or strings automatically assign an index to k. The ones that apply to tables just map the left value to k. I'm not sure if a tuple is a table or not tho.. 😂  either way I gotta get back to work T.T
[21:09:05] <FromDiscord> <Elegantbeef> What's C++ is that something you eat?
[21:09:22] <nrds> <06Prestige99> I tried once but threw up
[21:09:58] <FromDiscord> <haxscramper> damn box2d is huge
[21:10:25] <nrds> <06Prestige99> If I can't find someone to write a wrapper I honestly might just port it to Nim
[21:10:38] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[21:10:41] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[21:10:42] *** Quits: kinkinkijkin (~pch@66.49.131.33) (Remote host closed the connection)
[21:11:10] <FromDiscord> <Elegantbeef> Arent you just making a platformer?
[21:11:17] <nrds> <06Prestige99> no I'm making a game engine
[21:11:25] <FromDiscord> <haxscramper> You can wrap only needed parts
[21:11:40] <FromDiscord> <haxscramper> But in general I don't think there is any tool that would be able to properly process all of this
[21:11:50] <FromDiscord> <haxscramper> you can try c2nim maybe
[21:12:07] <FromDiscord> <haxscramper> it "has successfully wrapped thousands of lines of C++ code", so you might have a chance
[21:12:09] *** Joins: pch (~pch@66.49.131.33)
[21:12:20] <nrds> <06Prestige99> I did, it ate 16GB ram and almost all my swap before I killed it lol
[21:15:06] <FromDiscord> <haxscramper> holy
[21:15:06] <FromDiscord> <haxscramper> I thought it is a simple code transform, what is it doing even
[21:16:39] <nrds> <06Prestige99> 🤷
[21:16:55] <nrds> <06Prestige99> infinite loop maybe
[21:17:05] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:23:09] <FromDiscord> <IsaacPaul> comment half the file until you find the culprit :3
[21:23:11] *** Joins: arkurious (~arkurious@user/arkurious)
[21:24:04] <FromDiscord> <Elegantbeef> Manual binary search
[21:25:50] <nrds> <06Prestige99> Would be damn nice if it were just in pure Nim tbh
[21:26:13] <nrds> <06Prestige99> maybe I'm crazy enough
[21:26:27] <FromDiscord> <Elegantbeef> Well physics is complex so i'll see you in a few years
[21:26:28] <FromDiscord> <IsaacPaul> Yea, but then someone's gotta maintain it..
[21:26:48] <nrds> <06Prestige99> I mean just porting it 1 to 1
[21:28:00] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[21:28:00] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[21:28:00] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:30:25] <FromDiscord> <haxscramper> it is impossible
[21:30:33] <FromDiscord> <haxscramper> 1\:1 from C++ to nim is a dead end
[21:30:51] <FromDiscord> <haxscramper> for example you get 10x+ drop in method performance, so you have use custom vtable imp
[21:30:59] <FromDiscord> <haxscramper> with arc you get like 400x drop
[21:31:01] <FromDiscord> <haxscramper> for methods
[21:31:07] <FromDiscord> <haxscramper> Unless that was fixed
[21:31:21] <nrds> <06Prestige99> wow really that bad?
[21:31:21] <FromDiscord> <haxscramper> and this library seems to be oop-heavy
[21:32:37] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/issues/18612
[21:32:38] <FromDiscord> <Elegantbeef> Well there is an idea to make it not that bad but it's pretty bad with --newRuntime
[21:32:51] <FromDiscord> <haxscramper> 18x slower than before↵nearly 100x slower than regular procs
[21:32:53] *** Joins: vicfred (~vicfred@user/vicfred)
[21:33:06] <FromDiscord> <haxscramper> I was testing hot dispatch loop for the interpreter
[21:33:16] <FromDiscord> <haxscramper> just to see which methods are best
[21:33:31] <FromDiscord> <haxscramper> and I had slowdown for 100s for times
[21:34:01] <FromDiscord> <Elegantbeef> Plus 1\:1 C++ -\> Nim isnt going to be idiomatic Nim 😀
[21:34:35] <FromDiscord> <haxscramper> anyway, methods are almost useless
[21:34:52] <nrds> <06Prestige99> Could get away with concepts if they're usable, I think..
[21:34:54] <FromDiscord> <haxscramper> I use them only when I know I won't be calling into them with any reasonable frequency
[21:35:25] <nrds> <06Prestige99> that's embarrassingly slow though
[21:35:32] <FromDiscord> <Elegantbeef> Or function pointers since it's a onetime cost
[21:36:01] <nrds> <06Prestige99> are "new concepts" out?
[21:36:25] <FromDiscord> <haxscramper> not yet
[21:36:39] <Amun-Ra> speaking of new concepts, what's the equivalent of T.foo is int?
[21:37:13] <FromDiscord> <Elegantbeef> It's more limited in some regards so i dont think there is an equivlent, since that could be a proc or a field
[21:37:24] <FromDiscord> <haxscramper> Well, if `T.foo is int` does not work you can also try `default(T).foo is int`
[21:38:08] <FromDiscord> <Elegantbeef> For new concepts though hax that still wont work?
[21:38:46] <FromDiscord> <haxscramper> ah
[21:38:51] <FromDiscord> <hmmm> boyz what should I know about importing my own modules apart from marking with star  all the stuff I want to use?
[21:38:52] <FromDiscord> <haxscramper> I missed concept
[21:38:56] <nrds> <06Prestige99> man that speed slowdown for methods is depressing
[21:38:57] <FromDiscord> <haxscramper> context\
[21:39:18] <FromDiscord> <haxscramper> Nothing really. Depends on what you want to do↵(@hmmm)
[21:39:18] <FromDiscord> <hmmm> can I leave all the redundant std imports for testing or should I clean it up?
[21:39:36] <FromDiscord> <haxscramper> For new concepts field checks are not implemented IIRC↵(<@709044657232936960_=41mun-=52a=5b=49=52=43=5d>)
[21:40:43] <FromDiscord> <haxscramper> I don't understand the question. If you have some imports you use then leave them, if they are warned with UnusedImport then remove them↵(@hmmm)
[21:40:51] <FromDiscord> <hmmm> star  import works only on procs or it works on data structures too?
[21:41:08] <FromDiscord> <haxscramper> types, fields, procs iterators, toplevel variables
[21:41:16] <Amun-Ra> I mean: https://play.nim-lang.org/#ix=3DK9
[21:41:16] <FromDiscord> <hmmm> perfect
[21:41:18] <FromDiscord> <hmmm> ty hexxy
[21:41:19] <FromDiscord> <haxscramper> any named entity
[21:41:56] <FromDiscord> <Elegantbeef> Yea like we said there isnt an equivalent that we know of
[21:42:39] <Amun-Ra> ah, I see
[22:00:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:06:06] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[22:06:07] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[22:06:07] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:16:03] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[22:17:46] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[22:23:11] *** Joins: krux02 (~krux02@p200300e817076e0044b6cdb56690220d.dip0.t-ipconnect.de)
[22:29:48] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[22:43:45] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:44:27] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[22:44:27] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[22:44:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:09:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[23:29:20] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[23:29:20] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[23:29:20] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
