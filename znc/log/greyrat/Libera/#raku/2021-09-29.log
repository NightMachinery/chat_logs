[00:04:00] *** Quits: patrickb (~quassel@55d40d0b.access.ecotel.net) (Quit: Quit.)
[00:30:33] <Geth> ¦ doc/unordered-enums: cf3b74226a | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6
[00:30:33] <Geth> ¦ doc/unordered-enums: Correct statement re: cause of unordered iteration
[00:30:33] <Geth> ¦ doc/unordered-enums: 
[00:30:33] <Geth> ¦ doc/unordered-enums: My previous commit stated that `enum`s provide unordered iteration because they 
[00:30:33] <Geth> ¦ doc/unordered-enums: _are_ `Map`s.  That is incorrect.  `enum`s provide unordered iteration because the
[00:30:33] <Geth> ¦ doc/unordered-enums: relevant iteration methods _create_ a corresponding `Map` to iterate over.
[00:30:33] <Geth> ¦ doc/unordered-enums: 
[00:30:35] <Geth> ¦ doc/unordered-enums: This commit corrects that misstatement.
[00:30:37] <Geth> ¦ doc/unordered-enums: review: https://github.com/Raku/doc/commit/cf3b74226a
[01:04:00] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:04:00] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:05:04] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[02:05:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:05:15] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[02:07:02] *** Joins: jess (~jess@libera/staff/jess)
[02:14:50] <ugexe> codesections: i think one way to know if a react block is setup is to set a flag at the end of the react block
[02:15:04] <ugexe> not exactly elegant
[02:15:36] <ugexe> start  { react { whenever $supplier { say $_ }; $ready = True }; }
[02:15:38] <ugexe> await start { while not $ready { } };
[02:30:17] *** Quits: clarkema (~clarkema@ipv6two.tilde.club) (Quit: WeeChat 3.3)
[02:34:53] *** Quits: xinming (~xinming@115.219.38.236) (Ping timeout: 264 seconds)
[02:36:35] *** Joins: xinming (~xinming@115.219.38.236)
[02:36:38] <jjido> ugexe I have no issue with that pattern. Looks fine
[03:05:30] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:26:07] *** Quits: pierrot (~pi@user/pierrot) (Ping timeout: 240 seconds)
[03:27:28] *** Joins: pierrot (~pi@user/pierrot)
[03:28:02] *** Quits: grondilu (~grondilu@91-164-198-91.subs.proxad.net) (Ping timeout: 260 seconds)
[03:29:25] *** Joins: grondilu (~grondilu@91-164-198-91.subs.proxad.net)
[03:32:50] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:44:41] *** Quits: pierrot (~pi@user/pierrot) (Ping timeout: 246 seconds)
[03:44:45] *** Joins: pierrot_ (~pi@user/pierrot)
[03:59:44] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 246 seconds)
[04:24:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:35:56] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:18:25] *** Joins: bdju (~bard@user/bdju)
[05:54:23] *** Joins: frost (~frost@59.71.244.36)
[06:08:19] *** Parts: unixcat647 (hyperreal@envs.net) (the lounge - https://webirc.envs.net)
[06:10:27] *** Joins: hyperreal (hyperreal@fedora/hyperreal)
[06:33:00] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[06:58:30] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[07:58:31] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:31] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:49:53] *** Quits: xinming (~xinming@115.219.38.236) (Ping timeout: 264 seconds)
[08:50:15] *** Joins: xinming (~xinming@115.219.38.236)
[08:54:14] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 260 seconds)
[08:59:55] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:00:50] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:03:31] *** Quits: dwarring (~dwarring@115-188-57-40-vdsl.sparkbb.co.nz) (Quit: Connection closed)
[09:32:37] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:34:07] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:40:40] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[09:45:16] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 250 seconds)
[09:45:53] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:45:53] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:45:53] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:45:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:45:53] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:46:11] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[10:46:13] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:46:24] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[10:46:25] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:46:38] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[10:46:39] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:47:29] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[10:47:35] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[10:48:04] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:48:41] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[10:48:49] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:26:55] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:44:27] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[11:46:10] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:47:18] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[11:47:50] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:52:25] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: juanfra (~juanfra@user/juanfra) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: cnx (~cnx@2001:470:69fc:105::61f) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[11:56:14] *** Joins: juanfra (~juanfra@user/juanfra)
[12:07:44] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[12:13:59] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[12:17:47] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[12:17:47] *** Joins: cnx (~cnx@2001:470:69fc:105::61f)
[12:17:47] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[12:17:47] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[12:18:01] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[12:19:03] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[12:20:31] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 245 seconds)
[12:23:41] *** Quits: gordonfish- (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[12:46:27] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[12:48:31] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[12:52:10] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[12:52:19] *** Joins: silug7 (~silug@068-188-018-154.biz.spectrum.com)
[12:56:34] *** Quits: silug7 (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[12:58:07] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[13:02:40] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 265 seconds)
[13:03:05] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[13:07:41] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[13:07:54] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[13:14:01] *** Joins: wz (~wz@171.22.137.155)
[13:18:51] *** Quits: wz (~wz@171.22.137.155) (Client Quit)
[13:20:21] *** Joins: wz (~wz@171.22.137.155)
[13:20:58] *** Quits: wz (~wz@171.22.137.155) (Client Quit)
[13:47:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[13:47:46] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[13:57:55] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[14:01:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:47:42] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[14:48:41] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[15:02:14] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:04:19] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:24:23] *** Joins: whatnext (~whatnext@212.250.5.220)
[15:25:55] <whatnext> hello everybody :)  today's question: any idea what would cause this error: "Error while compiling... Cannot find method 'EXISTS-KEY' on 'BOOTHash': no method cache and no .^find_method" ?
[15:26:44] <whatnext> I have a module that is identical apart from name (boilerplate classes which don't yet have anything much in them) which seems to compile just fine
[15:27:03] <whatnext> ?
[15:31:15] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[15:32:33] <[Coke]> No idea, but is your program small enough to show a gist of it?
[15:32:45] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:37:49] <whatnext> actually not really - but hang on I am concocting a snippet
[15:39:08] <[Coke]> m: 'something small enough to show here?'.say
[15:39:08] <camelia> rakudo-moar ba15173fd: OUTPUT: «something small enough to show here?␤»
[15:44:50] <whatnext> https://gist.github.com/whatnext/87c22a266f05d6f799ab5d2b01b610d3
[15:47:00] <[Coke]> there are multiple 'unit class' in that file?
[15:47:51] <[Coke]> (or is that a concat of multiple files?)
[15:48:00] <lizmat> whatnext: can you run with --ll-exception and gist the backtrace ?
[15:48:42] <whatnext> they are in separate files - I just put them inline for the gist
[15:52:26] <whatnext> lizmat I commented the backtrace on the gist 
[15:53:16] <[Coke]> if you use --ll-exception you'll get a bigger trace.
[15:53:23] <[Coke]> you *should*, I mean.
[15:53:50] <lizmat> feels like an issue in Inline::Python ?
[15:54:00] <whatnext> bigger than the one I posted?
[15:55:27] *** Joins: wz (~wz@171.22.137.155)
[15:55:35] <[Coke]> Try it and see.
[15:55:39] <[Coke]> (but yes)
[15:55:55] <[Coke]> it reports on things that are "internal"
[15:56:04] <whatnext> I did use --ll-exception - that's the output I got from doing that
[15:57:38] <whatnext> lizmat I would be happy to believe it was Inline::Python - but it doesn't seem to throw an error the first time around
[15:57:47] <lizmat> hmmm
[15:58:10] <lizmat> must admit I'm too distracted atm to look at it deeper  :-(
[15:58:23] <whatnext> no worries
[15:58:47] <whatnext> was just asking in case anyone had seen it before
[16:07:37] <whatnext> will post a solution if I find one :)
[16:09:04] <lizmat> m: use nqp; nqp::hash.EXISTS-KEY("a")   # the ultimate golf
[16:09:04] <camelia> rakudo-moar ba15173fd: OUTPUT: «Cannot find method 'EXISTS-KEY' on 'BOOTHash': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»
[16:09:25] <lizmat> now, the error is legit: an nqp::hash does not have an EXISTS-KEY method
[16:09:56] <lizmat> so somewhere an nqp::hash is not being hllized to a Raku Hash object
[16:12:25] *** Joins: clarkema (~clarkema@ipv6two.tilde.club)
[16:16:24] *** Joins: Eddward (~Eddward@207.138.204.132)
[16:23:57] <wz> We are conducting a research on image label generation on the docker hub platform. We apply natural language processing technology and text mining technology to implement our method.
[16:23:58] <wz> In order to be able to give a reasonable evaluation to the tags generated by our method, we sincerely hope that you, as the developers of rakudo-star, can make an evaluation. Your evaluation is very important to us.
[16:23:58] <wz> The tags for rakudo-star are as follows:
[16:23:59] <wz> compiler, apline, rakudo, perl, development tools, small, virtual machine, linux
[16:23:59] <wz> If the tags are reasonable or not, please reply in form of, "Good tags: ***, ***; Bad tags: ***, ***"
[16:24:00] <wz> It will be a great help if you can give us a feedback
[16:24:00] <wz> Thank you so much for you precious time.
[16:27:13] <lizmat> Bad tags: perl, small
[16:27:31] <wz> thank you so much
[16:27:46] <lizmat> wtf is apline ?
[16:27:59] <whatnext> so lizmat... I'm just trying to understand what that means 
[16:28:26] <whatnext> not really being familiar with what's going on under the hood
[16:28:30] <wz> Damn algorithm generated
[16:29:34] <lizmat> Good tags: raku, programming language, ecosystem
[16:30:09] <lizmat> whatnext: something is being naughty using nqp, and has been caught  :-)
[16:30:13] <lizmat> afk for a few hours&
[16:30:26] <whatnext> yeah i understood that much
[16:30:51] <wz> Ha ha
[16:31:25] <whatnext> but nqp is part of the compiler correct - so just means something went wrong somewhere in the compiler?
[16:32:10] <wz> maybe
[16:33:44] *** Quits: wz (~wz@171.22.137.155) (Quit: Connection closed)
[16:39:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[16:40:53] *** Quits: cnx (~cnx@2001:470:69fc:105::61f) (Ping timeout: 264 seconds)
[16:41:38] *** Quits: whatnext (~whatnext@212.250.5.220) (Ping timeout: 252 seconds)
[16:42:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Client Quit)
[16:52:12] *** Joins: patrickb (~patrickb@85-22-61-234.ip.dokom21.de)
[16:53:22] *** Joins: whatnext (~whatnext@212.250.5.220)
[16:57:57] <[Coke]> I'm guessing a 3rd party module you're using is using nqp internals that it should not be.
[16:58:10] <[Coke]> m: use nqp; nqp::say(3);
[16:58:10] <camelia> rakudo-moar ba15173fd: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»
[16:58:39] <[Coke]> as an example of something you can do from rakudo, using NQP directly, that someone might expect to work but doesn't.
[17:09:39] *** Quits: whatnext (~whatnext@212.250.5.220) (Ping timeout: 265 seconds)
[17:32:33] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:54:35] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[18:24:35] *** Quits: xinming (~xinming@115.219.38.236) (Ping timeout: 246 seconds)
[18:26:46] *** Joins: xinming (~xinming@115.219.36.157)
[18:35:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:38:53] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:40:06] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[18:46:51] *** Quits: patrickb (~patrickb@85-22-61-234.ip.dokom21.de) (Remote host closed the connection)
[18:48:12] <ugexe> im guessing its more that they seen to be using `use lib ...` along with dynamically loading modules
[18:48:42] <ugexe> not that you shouldnt (of course i never `use lib ...`), just that that combination + the stack trace makes it seem like it
[18:55:39] <discord-raku-bot> <avuserow#1203> lizmat: apline is presumably a typo for alpine, a linux distro that's popular in making minimal docker images
[18:57:10] *** Joins: zacts (~zak@user/zacts)
[19:27:30] *** Joins: ufobat (~martin@dynamic-077-007-133-249.77.7.pool.telefonica.de)
[19:27:45] *** Quits: ufobat (~martin@dynamic-077-007-133-249.77.7.pool.telefonica.de) (Client Quit)
[19:53:08] <[Coke]> anyone building from master, new-disp just dropped.
[20:12:21] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 265 seconds)
[20:14:18] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[20:19:32] *** Joins: nige (~nige@195.244.2.179)
[20:19:36] *** Quits: nige (~nige@195.244.2.179) (Client Quit)
[20:19:48] *** Joins: nige (~nige@195.244.2.179)
[20:24:41] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 264 seconds)
[20:31:43] *** Quits: nige (~nige@195.244.2.179) (Quit: nige)
[20:31:54] *** Joins: nige (~nige@195.244.2.179)
[20:36:14] *** Quits: nige (~nige@195.244.2.179) (Client Quit)
[20:36:25] *** Joins: nige (~nige@195.244.2.179)
[20:38:50] <tonyo> new disp?
[20:39:59] <Altai-man> new disp!
[20:41:48] <[Coke]> https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/
[20:44:09] <lizmat> weekly: https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/
[20:44:09] <notable6> lizmat, Noted! (weekly)
[21:19:19] <Juerd> So I checked out blead hoping to see some improvements in the regex heavy benchmark that I've been doing
[21:19:25] <Juerd> But it's really really slow :(
[21:20:45] <Juerd> 7 seconds with 2021.04 that I had, 43 seconds with current :(
[21:21:15] <Juerd> Code: https://github.com/Juerd/p6-mqtt/blob/master/t/regex.t
[21:28:59] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:32:35] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:35:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:41:44] <lizmat> Juerd: that's... disappointing
[21:42:39] <lizmat> ah...  EVAL $_ ???
[21:43:29] <Juerd> It's slow all over, not just line 146
[21:43:53] <lizmat> well... indeed...
[21:44:12] <lizmat> but what I would do, is set up a list of Captures and pass that to pattern_test ?
[21:44:26] <Juerd> Oh, there are a gazillion ways to improve the code to make it faster I'm sure
[21:45:44] <Juerd> But this is a near literal port of Perl code, which makes it suitable for comparisons
[21:46:19] <lizmat> well... that's debatable...  :-)
[21:46:31] <Juerd> I'm not saying the Perl original or this port is good code, but it has been my go-to thing to check whether Raku is "ready" yet, for years
[21:47:05] <Juerd> Because I write many one-offs that do make use of generated regexes, eval, etc, to then process lots of data. That's something I can't do with raku yet :|
[21:47:37] <Juerd> Well I could perhaps, but I'd have to do everything completely differently
[21:47:50] <Juerd> In any case, if the regression by itself is not interesting, feel free to ignore it :)
[21:49:01] <Juerd> This code is basically frozen anyway, I'm probably not going to improve anything ever, since leont's Protocol::MQTT does everything this does, and much more.
[21:49:45] <Juerd> I haven't tested whether his port of the same tests has improved with new dist - https://github.com/Leont/raku-protocol-mqtt/blob/master/t/01-filter.rakutest
[22:01:43] *** Quits: nige (~nige@195.244.2.179) (Quit: nige)
[22:01:54] *** Joins: nige (~nige@195.244.2.179)
[22:05:19] <lizmat> Juerd: looking at filter-as-regex code: that's basically screaming RakuAST to me  :-)
[22:06:14] *** Quits: nige (~nige@195.244.2.179) (Client Quit)
[22:06:26] *** Joins: nige (~nige@195.244.2.179)
[22:07:15] <Juerd> Yes, it does
[22:07:38] <Juerd> But I'm not really interested in fixing this code, no matter how hard it screams
[22:08:00] <Juerd> For me, it serves a good purpose of being a benchmark, and it's showing a regression
[22:09:42] *** Quits: nige (~nige@195.244.2.179) (Client Quit)
[22:10:03] <lizmat> indeed it does  :-)
[22:10:55] <lizmat> Juerd: are you aware of the Str.subst method ?
[22:11:42] <Juerd> I know it exists
[22:12:12] <lizmat>         $str ~~ s:g[\W+] = "'$/'";
[22:12:12] <lizmat>         return $str;
[22:12:34] <lizmat> could be rewritten as: return $str.subst(/\W+/, { "'$/'" }, :global)
[22:12:53] <Juerd> Look, I'm into timtowtdi, not really into the "there are 15 ways to do this, but only one performs well so I guess you'll have to use that one" :)
[22:13:07] <Juerd> That's kinda why I'm not using Raku for anything real yet.
[22:15:16] <lizmat> well, true.  It's just that a lot of worn in Perl habits are counter intuitive wrt performance in Raku
[22:15:24] <lizmat> like using hashes instead of proper classes
[22:15:57] <Juerd> I'm hoping it will get there at some point, but I note that whether on irc or reddit or stackoverflow, if someone complains that naively written code performs worse than similar code on another platform, people jump to providing help to improve the code. That's nice, and community wise really cool, but it won't ever scale to anything that can be used in production. No programming language's community
[22:16:00] <Juerd> can ever scale to fixing everyone's code.
[22:16:37] <lizmat> that is true...
[22:17:18] <lizmat> we're all trying to learn to go with the flow of Raku, rather than trying to go upstream with it because of old habits :-)
[22:17:37] <Juerd> Dumb code has to perform reasonably well too
[22:18:37] <Juerd> If I have to write int instead of Int to come close to what Perl or Python does, I'm not saving much time by using the fancy new thing, and I can just as well keep using the old tools. I know Raku's improving all the time, which is why I keep trying from time to time.
[22:18:52] <lizmat> indeed... but e.g. using a Real type in a recent floating point benchmark, rather than just a num, is like...  well....  
[22:19:24] <lizmat> I mean, it's a "floating point" benchmark...
[22:19:32] <lizmat> why would you want to use Reals ?
[22:19:36] <Juerd> I saw that one and was amused too
[22:20:11] <Juerd> But tbh, it speaks to an issue with naming that exists in Raku
[22:20:50] <lizmat> yeah, num should probably have been called "float"  I have no idea why num was chosen
[22:20:52] <Juerd> I've ranted about the names of numeric types before so I won't repeat that, as it's set in stone anyway :)
[22:21:19] <lizmat> in any case, looks like the MQTT::Client code is triggering some megamorphic callsite mitigation code
[22:21:25] <lizmat> in the new dispatcher logic
[22:21:43] <Juerd> If only I had some clue what megamorphic meant :)
[22:21:52] <lizmat> the test will be a good case for improving that
[22:23:39] <lizmat> Juerd: https://www.google.com/search?rls=en&q=megamorphic+call+site 
[22:23:42] <lizmat> :-)
[22:32:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[22:40:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:46:46] *** Quits: jjatria (~jjatria@68.183.32.235) (Ping timeout: 252 seconds)
[22:46:58] *** Joins: jjatria (~jjatria@68.183.32.235)
[22:47:16] *** Quits: Scotteh (~Scotteh@user/scotteh) (Ping timeout: 252 seconds)
[22:47:32] *** Joins: Scotteh (~Scotteh@user/scotteh)
[22:58:06] <codesections> Juerd this is totally speculative, but I'm (cautiously) *very* optimistic about RakuAST helping with the performance cliff between the 15 different ways of saying the same thing.   
[22:58:33] <codesections> (in the medium/long term, I mean, not on the day it's merged)
[22:58:46] <Juerd> That would be nice
[23:00:48] <codesections> If two (or 15) statements have exactly the same semantics, then in theory out static optimizer ought to be able to pick the best-performing one.  Theory isn't practice, and that sort of transform can be hard,  especially Raku's dynamism 
[23:03:06] <codesections> But rAST will make it easier.  Personally, I'm hopping we can at least optimize things like $some-string ~~ /^foo/  to have the same performance as $some-string.starts-with('foo')
[23:29:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[23:29:32] *** Quits: spacekookie (~kookie@hyperion.kookie.space) (Quit: No Ping reply in 60 seconds.)
[23:30:46] *** Joins: spacekookie (~kookie@hyperion.kookie.space)
