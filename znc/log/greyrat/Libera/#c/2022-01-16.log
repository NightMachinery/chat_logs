[00:00:07] *** Joins: john99 (~john99@175.246.103.34.bc.googleusercontent.com)
[00:01:59] <twkm> i dislike the underscore prefix.
[00:02:30] <twkm> and typedef's for that matter.
[00:03:55] *** Joins: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[00:04:24] <dan_pena> twkm: I used underscore to precise that it's internal function
[00:04:32] <dan_pena> not supposed to be used by the user
[00:05:04] <ChoHag> What's ugly about it?
[00:05:14] <ChoHag> Apart from the declarations in the middle and the slight verbosity of names?
[00:05:32] <dan_pena> ChoHag: I think I can reduce the while loop
[00:05:43] <dan_pena> I feel like there is a lot of repetition
[00:05:44] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:07:07] <ChoHag> I don't know. Try changing all the variables to single letters and see if it still looks ugly.
[00:07:35] <dan_pena> ChoHag: No it will be unreadable in this way
[00:07:36] <ChoHag> Not that it should stay that way but as an aestheticsism test.
[00:07:50] <dan_pena> but I'm not talking about verbose and so on
[00:08:04] <ChoHag> You said ugly.
[00:08:28] <dan_pena> I'm talking about the size of the function and code duplication in if statement
[00:08:47] <ChoHag> That's what my suggestion is hoping to highlight.
[00:08:58] <ChoHag> How much of the length is algorithm vs. verbosity?
[00:15:14] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:1540:ed2d:f2e:b890) (Quit: Leaving)
[00:16:32] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[00:20:59] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[00:21:11] *** Joins: Alhazred (~Alhazred@ool-3f8fc192.dyn.optonline.net)
[00:21:11] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:22:47] *** Joins: pehaef (~pehaef@user/pehaef)
[00:23:35] *** Quits: pehaef (~pehaef@user/pehaef) (Client Quit)
[00:24:48] *** Quits: ShmoSeph (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:25:40] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[00:25:41] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:25:41] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:25:41] *** Joins: Teukka (~teukka@user/Teukka)
[00:33:03] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4)
[00:34:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:34:12] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:34:27] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:34:35] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[00:35:47] *** Quits: ahmed (~ahmed@154.101.128.122) (Ping timeout: 256 seconds)
[00:37:49] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[00:38:52] <Xgc> dan_pena: Logic around &nodes[_NR_CHAR_ACCEPTED] seems to require understanding that could be abstracted in some way.  C isn't very good at this.  It's understandable to have these issues.
[00:39:12] *** Quits: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[00:39:24] <dan_pena> https://bpa.st/KZNA , I find a way to reduce the code size but now I want to kick this condition
[00:39:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:39:39] <dan_pena> I don't know if there is a better way than this one || condition
[00:39:44] *** Joins: baltazaar (~baltazar@84-236-20-10.pool.digikabel.hu)
[00:40:18] *** Joins: andai (~andai@86.32.46.227)
[00:40:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:40:47] *** Joins: pehaef (~pehaef@user/pehaef)
[00:40:47] *** Quits: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu) (Quit: still here as baltazaar)
[00:40:56] *** Quits: pehaef (~pehaef@user/pehaef) (Client Quit)
[00:42:12] <Xgc> dan_pena: The code is easy enough to read.  That isn't a problem.  But the assumptions / goals are completely hidden / unknown.  It's tough to comment on correctness.  One has to just assume it's correct as written and then make suggestions.
[00:42:40] *** Joins: skapata (~Skapata@191.177.185.183)
[00:42:40] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[00:42:40] *** Joins: skapata (~Skapata@user/skapata)
[00:42:44] <Xgc> dan_pena: Better suggests the goal is known.
[00:43:19] <dan_pena> Xgc: The code is right I did a lof of testing, but I want to just refactor it
[00:43:23] *** Joins: ethrl (~ethereal@user/doforlove33)
[00:43:47] *** Joins: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu)
[00:43:51] *** Joins: pehaef (~pehaef@user/pehaef)
[00:43:55] <dan_pena> Xgc: Maybe I should send the full project ?
[00:44:06] <Xgc> dan_pena: Of course you think it's right.  That was my point.  There's no independent way to verify that.  The goal / intent is completely unknown.
[00:44:45] *** Quits: baltazaar (~baltazar@84-236-20-10.pool.digikabel.hu) (Quit: still here as baltazar)
[00:44:47] <Xgc> dan_pena: You wanted comments on the posted code.  These are my comments.  The code is a black box to any reader who isn't you.
[00:44:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:44:52] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[00:45:09] <dan_pena> Xgc: because there is just one function?
[00:45:15] <dan_pena> you probably need all the source code
[00:45:57] <Xgc> dan_pena: No. You shouldn't need all the code to read one function.  What is the intent?  Did you consider adding notes around this function?
[00:45:58] <andai> Is there an elegant way to directly parse bytes from a text file, ie. without a temporary int? (I tried passing pointers to chars directly to sscanf but the results were very peculiar.)
[00:46:05] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[00:46:39] *** Joins: magla (~gelignite@55d476aa.access.ecotel.net)
[00:46:55] <dan_pena> Xgc: by the function name you should understand that it builds an huffman tree no?
[00:47:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:47:09] <dan_pena> But yeah I haven't commented my code
[00:47:19] <dan_pena> It's something that I should do you are right
[00:47:24] <Xgc> dan_pena: Just to read the function requires lots of hidden detail.  But my initial comment was more about the code structure.  Is there an abstraction that would make &nodes[_NR_CHAR_ACCEPTED] less brittle?
[00:47:32] *** Quits: Alhazred (~Alhazred@ool-3f8fc192.dyn.optonline.net) (Ping timeout: 240 seconds)
[00:48:58] <dan_pena> Xgc: _NR_CHAR_ACCEPTED = UCHAR_MAX + 1 and nodes is an array of nodes of the size 2 * _NR_CHAR_ACCEPTED - 1 because it's the maximum number of nodes that we can have for the tree
[00:49:19] <dan_pena> I'm trying to think about an abstraction
[00:50:50] <dan_pena> nodes[_NR_CHAR_ACCEPTED] is the post of the first node that isn't a leaf
[00:51:14] <dan_pena> the _NR_CHAR_ACCEPTED first nodes in the array are leaves and the rest if nodes
[00:51:32] *** Joins: LeoNerd (~leo@2a03:b0c0:1:d0::feb:5001)
[00:51:43] *** Joins: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5)
[00:52:26] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[00:52:39] *** Joins: System_Error (~SystemErr@user/systemerror)
[00:52:52] <Xgc> dan_pena: Maybe you could hide that "find last node - 1" calculation.  It would be easier if that were just get_current_node_ptr or get_last_node_ptr, etc.   You really don't want everyone who needs to use that kind of logic to know about that internal detail.
[00:53:02] *** Quits: pehaef (~pehaef@user/pehaef) (Quit: leaving)
[00:53:22] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[00:54:00] *** Joins: pehaef (~pehaef@user/pehaef)
[00:54:07] <Xgc> dan_pena: I imagine you need that type of logic all over.  Without the clear abstraction, if that changes in the slightest, you need to find/correct code everywhere.
[00:54:20] <dan_pena> I see
[00:55:29] <dan_pena> Xgc: won't the code be too verbose ?
[00:55:35] <Xgc> Just a thought. Overall, the basic code seems clean and easy to read, even though not impossible to tell if it's correct.
[00:55:44] <Xgc> s/not//
[00:55:47] <Xgc> impossible to tell.
[00:56:14] <Xgc> dan_pena: That's a fight with the C language we all have.  C isn't very good at clean abstractions.
[00:57:00] <dan_pena> okey I will try to rewrite that in a better way
[00:57:04] <Xgc> dan_pena: We still need to do what we can to find a proper level of abstraction.
[00:57:29] <dan_pena> Xgc: would you be interested in watching all the code that is actually made on my gitlab? (when the changes will be made)
[00:57:50] <Xgc> dan_pena: I'm not sure "rewrite" is necessary.  You may just need to replace expressions with abstractions, where possible.
[00:58:50] <dan_pena> Xgc: yeah sorry that's what I wanted to say
[00:59:41] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[01:00:09] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Client Quit)
[01:00:15] *** Quits: andai (~andai@86.32.46.227) (Quit: Client closed)
[01:00:30] <Xgc> dan_pena: Like, we might rather have a look that does: while(more_nodes_remain(root_ptr)) { ... } kind of expression, without knowing the details of what it takes to know we're at the end.
[01:00:39] <Xgc> s/look/loop/
[01:01:35] *** Joins: Alhazred (~Alhazred@ool-3f8fc192.dyn.optonline.net)
[01:01:54] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Quit: Quit)
[01:02:37] <Xgc> dan_pena: Like I said, C doesn't lend itself well to nice abstractions.  We do what we can.
[01:06:11] *** Quits: pehaef (~pehaef@user/pehaef) (Quit: leaving)
[01:08:00] *** Quits: cosimone` (~user@93-44-186-112.ip98.fastwebnet.it) (Remote host closed the connection)
[01:08:17] <Xgc> dan_pena: You may find that passing state_ptr to your extra abstractions is usually enough, since that seems to hold everything you need, current *node_ptr value, etc.
[01:08:27] *** Joins: pehaef (~pehaef@user/pehaef)
[01:08:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:09:16] *** Quits: pehaef (~pehaef@user/pehaef) (Client Quit)
[01:10:15] <Xgc> Sorry.  I meant current *root_ptr value.
[01:12:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:12:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:12:25] *** Joins: wroathe (~wroathe@user/wroathe)
[01:12:28] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[01:13:10] <Xgc> dan_pena: I agree with your comment.  That last condition probably isn't necessary.. or can be hidden behind an abstraction.  That's one of the benefits of the abstraction.  You don't need to worry as much when the problem expression exists once for everyone to use.  You replace it any time you wish.
[01:14:14] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[01:15:18] *** Quits: Alhazred (~Alhazred@ool-3f8fc192.dyn.optonline.net) (Ping timeout: 250 seconds)
[01:17:07] *** Quits: joev (~joev@user/joev) (Quit: WeeChat 2.3)
[01:19:02] *** Joins: joev (~joev@user/joev)
[01:23:23] *** Quits: alch (~alch@151.68.145.161) (Read error: Connection reset by peer)
[01:23:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[01:27:08] *** Joins: alch (~alch@151.34.207.137)
[01:28:26] *** Quits: random-nick (~random-ni@87.116.181.150) (Read error: Connection reset by peer)
[01:32:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:32:38] *** Quits: mahmutov (~mahmutov@37.155.74.26) (Ping timeout: 250 seconds)
[01:32:55] *** Joins: Praise (~Fat@user/praise)
[01:36:15] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[01:37:24] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 250 seconds)
[01:40:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:43:32] <dan_pena> Xgc: I changed it everywhere, so I past this part of the code again
[01:43:34] <dan_pena> https://bpa.st/PP5A
[01:44:23] <dan_pena> Xgc: is it better ?
[01:46:26] <omegatron> 8 spaces per indentation level ..   -_-
[01:46:39] <omegatron> you seem to have a lot of screen real estate  =D
[01:47:25] <Xgc> dan_pena: Why is the on_left detail exposed?
[01:47:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:47:38] <dan_pena> Xgc: it's a binary tree
[01:47:49] <Xgc> dan_pena: I didn't ask that.
[01:47:49] <dan_pena> on_left = time to fill the left child
[01:47:53] <dan_pena> oh
[01:47:59] <dan_pena> I see
[01:48:30] <Xgc> dan_pena: Why can't on_left be within root_ptr and then used by your abstractions.
[01:48:58] <Xgc> Sorry. Within your state structure.
[01:49:01] <dan_pena> Xgc: be within root_ptr ?
[01:49:08] <dan_pena> because it's only used there
[01:49:13] <dan_pena> it's not related to the state of the program
[01:49:40] <Xgc> dan_pena: Your function changes state and on_left is part of that state detail.
[01:49:42] <dan_pena> it's related to this func not to the state of my program
[01:50:00] <dan_pena> yeah but I will never use this parameter in something else
[01:50:07] <Xgc> dan_pena: It can be help in state.  It seems to belong there.
[01:50:11] <Xgc> held
[01:50:13] <dan_pena> it's just a way for me to loop left - right
[01:50:35] <Xgc> dan_pena: You are moving through all the nodes until done.  left/right is part of that.
[01:50:59] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[01:51:25] <Xgc> dan_pena: That's also how you will remove the on_left detail from your while condition.
[01:52:37] <Xgc> dan_pena: It's never a requirement that every user of state use all the members of state.
[01:53:26] <Xgc> It's hard to believe there's no other logic that walks through nodes of the tree.
[01:53:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:53:59] *** Quits: kurahaupo (~kurahaupo@pa49-182-35-223.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[01:55:07] <Xgc> Even if there is not other need for on_left, it's part of state.
[01:55:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:55:27] <dan_pena> difficult for me to understand this part
[01:55:34] <dan_pena> but I will try to do it
[01:56:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:56:46] <Xgc> dan_pena: Try to write the loop like while((node = next_node(state) != NULL)  or some such.
[01:57:01] *** Quits: p0g0_ (~p0g0@216.211.153.38) (Ping timeout: 240 seconds)
[01:57:55] <Xgc> Remove all the state detail that only the walk logic needs.... and if you need to use any of that state detail, use the state structure directly.  Don't bother storing anything locally that isn't relatively static with respect to this function.
[01:58:29] <Xgc> "static" in the sense of unchanging.
[02:01:04] <dan_pena> Xgc: I stored it locally to avoid having a too verbose code
[02:01:18] <dan_pena> with too much access to pointer
[02:02:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:02:51] <Xgc> dan_pena: But you're exposing detail that your abstraction should be hiding.
[02:03:43] <Xgc> or that the abstraction needs to access.
[02:06:43] <dan_pena> yeah I understand you want to have an iterator on the object
[02:07:13] <dan_pena> like if I wee using a mathode within the object
[02:07:54] <Xgc> dan_pena: Basically, yes.  state_ptr->tree is held.  state_ptr->on_left can also be held.  Now we can do node = next_node(state)  directly.
[02:08:27] <Xgc> s/state/state_ptr/
[02:08:55] *** Joins: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com)
[02:09:02] <dan_pena> yes but during the run I don't want to change the position of tree
[02:09:16] <dan_pena> or maybe I can since I have the pointer to root
[02:09:36] <Xgc> dan_pena: You already are doing this: *root_ptr = *root_ptr + 1;
[02:09:49] *** Quits: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com) (Read error: Connection reset by peer)
[02:10:18] *** Joins: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com)
[02:10:37] <pony> is that ub?
[02:10:53] <Xgc> dan_pena: That's a pointer into state.
[02:11:07] <dan_pena> pony: ub?
[02:11:13] <Xgc> into state->tree, that is.
[02:11:45] <Xgc> pony: It's a pointer to pointer.
[02:11:54] *** Quits: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com) (Read error: Connection reset by peer)
[02:12:17] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:14:01] *** jonbryan_ is now known as jonbryan
[02:14:14] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 250 seconds)
[02:14:22] <dan_pena> (just asking any idea on the font and font size used on bpa.st? seems easier to read than on my editor)
[02:14:55] <Xgc> This function is going to reduce to something tiny, most likely.  The add_node and smallest logic will likely be hidden.
[02:18:00] <dan_pena> I got what you mean but I don't know I'm lost doing it XD
[02:18:08] <dan_pena> I get*
[02:21:33] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[02:21:49] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:22:18] <Xgc> dan_pena: Doesn't on_left reduce to just whether we have an odd or even node from the start of the array/list of nodes?
[02:22:28] *** Quits: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Quit: Leaving)
[02:24:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:25:12] <dan_pena> Xgc: yes
[02:25:27] <dan_pena> i think you are right
[02:26:24] <Xgc> dan_pena: on_left = !on_left;  might be less verbose, since you're worried about that.
[02:27:11] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:28:23] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:28:31] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:5143:664b:aeb1:9527) (Read error: Connection reset by peer)
[02:28:58] <dan_pena> Xgc: I think I will sleep and re-try to think about what you said tomorrow morning
[02:29:19] <dan_pena> it's probably a better way to do things like you said
[02:29:51] *** Joins: random-nick (~random-ni@87.116.167.125)
[02:30:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:30:03] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:31:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[02:32:31] *** Quits: pizdets (~pizdets@183.182.111.149) (Ping timeout: 256 seconds)
[02:32:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[02:32:43] *** Joins: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[02:33:31] *** vinleod is now known as vdamewood
[02:33:49] *** Joins: pizdets (~pizdets@183.182.110.138)
[02:33:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[02:33:57] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:35:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[02:35:45] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:38:30] <Xgc> dan_pena: It's only one function.  So I can't really tell if these specific changes, in this form, will be that helpful.  My guess is some of this logic could be reused, if done while considering other similar logic.
[02:39:31] <Xgc> Each smaller fragment may be clearer and the main function easier to read, without having to know anything about on_left and similar details.
[02:40:33] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4)
[02:42:42] <Xgc> There will be just one insert_node function, which uses the current state to do its work.  The build_tree function will have no knowledge of that detail.
[02:42:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Ping timeout: 250 seconds)
[02:45:56] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:46:19] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:46:53] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[02:47:15] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:51:01] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[02:51:03] *** thrall is now known as thiccdaddy
[02:51:56] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[02:56:45] *** Quits: Sampuka (~Sampuka@5.186.126.2.cgn.fibianet.dk) (Read error: Connection reset by peer)
[02:56:52] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[02:57:34] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[02:57:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[02:57:49] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[03:01:21] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:02:02] *** Joins: noarb (~noarb@user/noarb)
[03:04:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[03:04:57] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 240 seconds)
[03:05:56] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[03:06:36] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:07:02] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[03:07:08] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[03:07:20] *** Quits: magla (~gelignite@55d476aa.access.ecotel.net) (Quit: Stay safe!)
[03:09:23] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:09:52] *** Joins: p0g0 (~p0g0@216.211.153.38)
[03:10:45] *** Joins: serbest (~ike@user/serbest)
[03:17:56] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:18:15] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:18:59] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:18:59] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:19:16] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:19:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[03:20:23] *** Joins: davros (~davros@host86-185-99-167.range86-185.btcentralplus.com)
[03:21:48] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[03:22:05] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:22:14] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[03:23:28] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Client Quit)
[03:23:46] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:23:58] *** Joins: liba (~liba@user/liba)
[03:24:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:24:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:25:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:30:55] *** Quits: Akuli (~Akuli@82-203-164-116.bb.dnainternet.fi) (Quit: Akuli)
[03:33:15] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[03:33:42] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:34:24] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[03:43:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:47:28] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:53:55] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:56:30] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[03:57:22] *** Quits: inomoz (~inomoz@176.59.121.150) (Ping timeout: 250 seconds)
[04:03:18] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:03:18] *** fcresende_ is now known as fcresende
[04:06:11] *** Joins: p1u10nia7 (~p1u10nia7@185.176.220.17)
[04:09:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:13:51] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:16:00] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[04:17:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[04:22:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:22:57] *** Quits: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5) (Ping timeout: 240 seconds)
[04:24:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:24:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:25:30] *** Joins: Wulf (~Wulf@user/wulf)
[04:25:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[04:36:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[04:38:24] *** Joins: nostar (~nostar@37.19.212.3)
[04:42:30] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Quit: Lost terminal)
[04:46:06] *** Joins: newpy (~newpy@206.168.231.90)
[04:46:28] <newpy> what happens if you call pthread_mutex_unlock() without having first acquired the lock?
[04:47:25] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[04:49:49] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[04:52:02] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:55:56] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[05:05:02] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Quit: Peace!)
[05:06:33] <kurahaupo> newpy: What does the man page say?
[05:07:49] *** Quits: john99 (~john99@175.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[05:08:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[05:09:29] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[05:10:19] *** Joins: duplox (~duplox@137.220.127.235)
[05:11:18] <kurahaupo> newpy: short answer: it depends on the mutex mode. long answer: If a thread attempts to unlock a mutex that it has not locked or a mutex which is unlocked, pthread_mutex_unlock() shall behave as described in the Unlock When Not Owner column of the following table.
[05:11:42] <kurahaupo> Read the man page for the table
[05:16:18] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[05:19:21] *** Joins: rsjw (~quassel@user/rsjw)
[05:20:39] *** Joins: vysn (~vysn@user/vysn)
[05:21:26] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 250 seconds)
[05:22:52] *** Quits: alch (~alch@151.34.207.137) (Read error: Connection reset by peer)
[05:26:35] *** Joins: alch (~alch@151.68.179.85)
[05:27:49] *** Quits: EtherNet (~ethernet@user/ethernet) (Ping timeout: 240 seconds)
[05:29:36] *** Quits: p1u10nia7 (~p1u10nia7@185.176.220.17) (Quit: Leaving)
[05:30:28] *** Joins: EtherNet (~ethernet@user/ethernet)
[05:31:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:32:41] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:34:29] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[05:38:30] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[05:38:46] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Ping timeout: 250 seconds)
[05:39:38] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[05:44:09] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[05:54:11] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:57:12] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:58:54] *** Joins: jaggz (~jaggz@user/jaggz)
[05:59:11] <jaggz> How can I get the sizeof() this, without needing to assign it to an array?
[05:59:11] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[05:59:15] <jaggz> #define MAGIC_ST { 0101, 0132, 0102 }  // start packet bundle magic
[05:59:40] <jaggz> currently, I'm later doing: uint8_t stmag[]=MAGIC_ST;  and then using sizeof(stmag)
[05:59:51] <Kit> theres no way to tell the size of something without it having a type
[06:00:34] <Kit> unless you explicitly tell the compiler that each thing is uint8_t or smth theres no way to get the size
[06:00:56] <newpy> how might one check whether a pthread_mutex_lock is already acquired?
[06:01:11] <Kit> if you do set it tho you probably should just be able to do `sizeof (MAGIC_ST)`
[06:01:46] <jaggz> kit, like, maybe I can cast it inline?
[06:01:55] <Kit> probably, idk
[06:01:58] <Kit> uh
[06:02:57] <Kit> probably like `(uint8_t) { 0101, 0132, 0102 }`
[06:03:11] <Kit> if not then just cast each member individually
[06:06:04] <jaggz> hmm
[06:06:06] <jaggz> error: expected â€˜;â€™ before â€˜}â€™ token
[06:06:38] <jaggz> https://paste.debian.net/1227268/
[06:06:59] <jaggz> code at https://paste.debian.net/1227269/
[06:07:06] <jaggz> hey don't we have a paste site that compiles the stuff
[06:07:08] <jaggz> !paste
[06:07:12] <jaggz> !pastebin
[06:08:45] <jaggz> printf("%d\n", sizeof((uint8_t)({ 0375, 003, 0374; })));
[06:08:48] <jaggz> heh.. sizeof() returns 1
[06:09:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:09:54] <fizzie> (uint8_t){ ... } is a scalar. Of course it does. You'll want a compound literal with an array type for that.
[06:10:25] <jaggz> fizzie, if I change it to (uint8_t *) it errors too.. I don't know what it sees {} as
[06:10:35] <fizzie> That's a pointer. Like I said, you need an array.
[06:10:36] <jaggz> what is the { ... } part?
[06:10:37] <fizzie> ,cc printf("%zu", sizeof (char[]){ 0375, 003, 0374 });
[06:10:40] <candide> fizzie: 3
[06:11:02] <fizzie> In `(T){...}`, the `{...}` part is an initializer list for the compound literal.
[06:11:32] <jaggz> error: cast specifies array type
[06:11:32] <jaggz>   printf("%d\n", sizeof((uint8_t[])({ 0375, 003, 0374; })));
[06:11:48] <jaggz> i tried that.. what's different between yours and mine?
[06:11:52] <fizzie> You have an extra pair of parentheses in there. It must be `(T){...}`, not `(T)({...})`.
[06:11:58] <jaggz> thanks :)
[06:11:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:12:21] <jaggz> so {} is a "compound literal"..
[06:12:26] <jaggz> like "" is a string literal
[06:12:29] <fizzie> {} depends on where {} is.
[06:12:33] <jaggz> right .. :)  thanks
[06:12:42] <jaggz> [in this case]
[06:13:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:13:35] <jaggz> thanks a bunch
[06:13:42] <fizzie> `(T)({ 1, 2, 3; })` isn't really anything in standard C, although as a GNU C extension it would be a statement expression with a single expression statement containing some comma operators, with a cast applied to the result.
[06:13:49] *** Joins: Jeaton (~hybrid@user/Jeaton)
[06:14:44] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[06:14:53] <jaggz> and without the semicolon it'd be the same, but a syntax error because of the missing ; ?
[06:15:03] <fizzie> Think so, yes.
[06:15:12] <jaggz> thanks again :) :)
[06:15:19] <fizzie> More verbosely, `({ ... })` is a GNU extension that lets you execute a block of statements inside an expression; its value is the value of the last expression of the block.
[06:16:15] <fizzie> ,cc -std=gnu11 /* candide defaults to more strict standards compliance */ printf("%d", ({ int s = 0; for (int i = 0; i < 10; i++) s += i; s; }));
[06:16:18] <candide> fizzie: 45
[06:19:32] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:21:01] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[06:21:15] *** Joins: pert (~pert@fsf/member/pert)
[06:21:48] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[06:21:57] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[06:22:15] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:24:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:27:38] <jaggz> ,cc -std=gnu11 printf("%d", ({ 1, 2, 3; }));
[06:27:40] <candide> jaggz: 3
[06:28:06] *** Quits: beg (~begriffs@user/begriffs) (Remote host closed the connection)
[06:28:27] *** Joins: beg (~begriffs@user/begriffs)
[06:29:17] <fizzie> In that case, the comma there is just the usual comma operator, which evaluates its left operand and discards the result, then evaluates the right operand and yields its value.
[06:29:58] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:30:44] <jaggz> yeah
[06:31:11] <jaggz> i just thought I recalled , separated statements' order was not actually specified in the [older] specs
[06:31:16] <jaggz> evaluation-order
[06:31:46] <jaggz> figured I'd see what it was doing in this case just for kicks (reading the specs would obviously be better)
[06:32:04] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[06:32:47] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:32] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[06:36:34] <caze> You're thinking of function arguments.
[06:36:43] <caze> Which are distinct from the comma oeprator.
[06:38:49] * oldlaptop wishes those could have been different characters
[06:40:30] *** Joins: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca)
[06:42:36] *** Quits: beg (~begriffs@user/begriffs) (Remote host closed the connection)
[06:42:57] *** Joins: beg (~begriffs@user/begriffs)
[06:43:51] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:44:32] <caze> jaggz: https://ideone.com/yIgwgD
[06:44:55] <Jeaton> is "c programming language k&r" a good book to learn c, or would you suggest a different book or some online tutorial?
[06:45:46] <caze> Jeaton: Yes.
[06:46:22] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[06:46:40] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:48:23] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[06:48:46] <jaggz> error: missing binary operator before token "("
[06:48:46] <jaggz>    25 | #if sizeof(stmag) != sizeof(enmag)
[06:48:47] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[06:48:57] <jaggz> uint8_t stmag[]=MAGIC_ST;
[06:49:05] <caze> jaggz: Did you know that sizeof isn't a function?
[06:49:08] <jaggz> yes
[06:49:17] <jaggz> that's why I was trying to get it to work in an #if
[06:49:38] <jaggz> since that stmag size is known at compile time
[06:50:39] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[06:51:20] <caze> "known at compile time" isn't the requirement.
[06:52:22] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:30] <jaggz> error: missing binary operator before token "stmag"
[06:55:30] <jaggz>    33 | #if sizeof stmag != sizeof enmag
[06:55:58] <jaggz> error: missing binary operator before token "("
[06:55:58] <jaggz>    34 | #if sizeof (uint8_t[])MAGIC_ST != sizeof (uint8_t[])MAGIC_EN
[06:56:02] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[06:56:10] <bparker> you cannot use sizeof in a preprocessor statement
[06:56:17] * jaggz shakes fist
[06:56:27] *** Quits: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca) (Quit: Rebooting...)
[06:56:49] <bparker> https://stackoverflow.com/questions/4079243/how-can-i-use-sizeof-in-a-preprocessor-macro
[06:56:53] <jaggz> #warning "Sizes of magic sequences may or may not match. Be responsible. Wear a mask."
[06:57:12] <jaggz> coool
[06:57:14] <jaggz> thanks bparker
[06:57:52] <System_Error> <jaggz> that's why I was trying to get it to work in an #if <- preprocessor isn't compiler, unfortunately.
[06:59:01] *** Joins: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca)
[06:59:54] *** Joins: NotApplicable (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[06:59:56] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1d:7713:457:353) (Ping timeout: 245 seconds)
[07:00:29] <caze> It is, just a very early stage of the translation process.
[07:00:39] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[07:00:53] *** Joins: zwr (~zwr@2804:d45:b966:fb00:a05f:6b33:f679:bb49)
[07:01:37] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:01:57] *** Quits: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:02:10] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[07:03:02] *** Joins: pert (~pert@fsf/member/pert)
[07:03:11] *** Joins: nf (~n@monade.li)
[07:03:11] <jaggz> good point(s)
[07:05:28] <rsjw> actually at one point there was a compiler but no preprocessor, so you certainly don't have to adopt the viewpoint that they are one and the same
[07:05:41] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:05:51] <rsjw> and they commonly are not the same
[07:05:57] <jaggz> error: static assertion failed: Let's keep MAGIC_ST and MAGIC_EN the same length
[07:05:57] <jaggz>    36 | static_assert(sizeof((uint8_t[])MAGIC_ST) != sizeof((uint8_t[])MAGIC_ST), "Let's keep MA... length");
[07:06:39] <System_Error> caze: it can even be separate program and it would be valid IIRC.
[07:07:09] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[07:07:18] *** Quits: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca) (Quit: rebooting - again :p)
[07:07:41] <jaggz> static_assert( 1 == 1, "1 is not 1" );  <-- that did not fail though
[07:09:03] <caze> System_Error: How the compiler achieves all the translation phases is immaterial.
[07:09:18] *** Joins: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca)
[07:12:59] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:13:09] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:13:23] *** nf is now known as yoneda
[07:16:05] <oldlaptop> the preprocessor historically was a different program
[07:16:30] <oldlaptop> (but that is an irrelevant implementation detail)
[07:16:43] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[07:18:32] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[07:20:25] *** Joins: Wulf (~Wulf@user/wulf)
[07:20:46] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:21:19] <rsjw> whether it's irrelevant depends on what you're trying to do. (in the context of this discussion, yes, it's probably irrelevant)
[07:21:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:21:55] <rsjw> for instance, if you want to change out the preprocessor for a different program, it could be very relevant
[07:27:15] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:27:23] <Guest49> I'm looking for answers to the following because I haven't been able to get the correct solution yet https://bpa.st/CA2A and https://bpa.st/CPFA Any ideas?
[07:27:55] <System_Error> guess preprocessor knows nothing of "types" and so "sizeof".
[07:31:06] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:31:54] *** Quits: Jeaton (~hybrid@user/Jeaton) (Read error: Connection reset by peer)
[07:33:23] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:34:58] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[07:35:11] *** Joins: malina (~malina@user/malina)
[07:35:15] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:35:31] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:37] *** Joins: Guest49 (~Guest49@2600:387:b:f::bb)
[07:36:55] *** Quits: j-james (~apropos@dhcp-206-87-156-228.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[07:39:53] *** Joins: hanzo (uid532183@user/hanzo)
[07:41:26] <Guest49> Anyone know how to answer the following https://bpa.st/CA2A ?
[07:49:53] *** Quits: Guest49 (~Guest49@2600:387:b:f::bb) (Quit: Client closed)
[07:52:31] *** Quits: puke (~puke@user/puke) (Read error: Connection reset by peer)
[07:52:51] *** Joins: puke (~puke@user/puke)
[07:53:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[07:55:15] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 250 seconds)
[07:55:33] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:56:57] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 240 seconds)
[07:56:57] *** jmiehe1 is now known as jmiehe
[07:58:54] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:59:32] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:02:22] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[08:03:04] *** Quits: nicode (~nic@2607:f2c0:946d:3800:da6f:ffbd:5d89:a11f) (Ping timeout: 250 seconds)
[08:05:01] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:05:24] *** Joins: NEYi (~NEYi@109.251.216.38)
[08:07:05] <caze> Guest903: That isn't C.
[08:08:15] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[08:09:28] <Rounin> Guest903: The answer to that depends not only on the processor, but also on the particular choices made by the developers of the software running on it.... For instance, C++ has multiple calling conventions even on x86, and x86-64 has at least one or two conventions of its own
[08:09:30] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[08:09:44] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:10:34] <Rounin> Guest903: Though since local variables and function arguments etc. have very different uses, it might be that there's only one sensible answer, if one sits down and thinks about the order in which those things are used
[08:10:48] <Rounin> Not to mention what the source of each of those values is etc.
[08:11:34] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[08:11:44] <Rounin> I can imagine that the return address would be pushed first, for instance, as it's the last thing used by the function before returning
[08:11:53] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[08:12:23] <Rounin> That's sort of a qualified guess, anyway... There might be different reasons why one can pin down the other ones
[08:12:47] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[08:14:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:14:08] *** Joins: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[08:14:09] <Rounin> Anyway, whatever will be used last in the function should be pushed first, and whatever will be used first should be pushed last, for most stacks
[08:14:31] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[08:15:02] *** aleph is now known as Church
[08:15:10] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[08:15:15] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[08:15:24] <Rounin> The frame pointer (stack pointer?) is probably pushed onto the stack in order to restore it before returning, but I don't remember the specifics of when and how that's done
[08:15:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:15:47] <Rounin> I guess most enterprise backend programmers don't get to do assembly every day
[08:16:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:19:34] *** Joins: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4)
[08:20:53] *** Quits: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4) (Client Quit)
[08:23:37] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[08:30:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Read error: Connection reset by peer)
[08:32:05] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[08:33:22] *** Joins: loganlee (~Thunderbi@user/loganlee)
[08:37:31] *** Parts: rsjw (~quassel@user/rsjw) ()
[08:39:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:40:25] <Kerr> what would be the correct way to get the sizeof a struct's member? sizeof(mystruct.mystructmember) doesn't seem to work
[08:42:06] <Kerr> while I could just sizeof(single) or whatever, It seems like it would be better to do something like sizeof(mystruct.member) in case the type of the member ever changes.
[08:42:28] *** Joins: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1)
[08:46:27] <ericonr> Kerr: does sizeof ((struct mystruct){0}.member) work?
[08:46:38] <ericonr> I remember something like that being necessary
[08:47:39] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[08:47:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:49:26] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[08:49:50] <Kerr> No, but mainly because my first struct member isn't compatible with int.
[08:51:04] <Kerr> I have a *mystruct that the function is taking in that I can use for sizeof(structinstance->structmember) to make it work, just seems crufty
[08:52:05] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:53:51] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:54:02] <ericonr> {0} is a universal initializer, it always works
[08:54:08] <ericonr> Regardless of your struct definition
[08:56:09] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:57:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:00:16] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:00:44] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Read error: Connection reset by peer)
[09:02:06] *** Joins: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d)
[09:05:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:05:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:05:37] *** Joins: wroathe (~wroathe@user/wroathe)
[09:06:17] <Kerr> ericonr strange, I can't reproduce the compiler message (invalid conversion from int to...) in compiler explorer
[09:08:32] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:09:16] <Kerr> ericonr, the first type in my struct is an enum (SDL_WINDOWFLAGS, although that's unimportant) and the compiler gives an error. If I add another first member, such as int or double, then that works
[09:10:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:10:38] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[09:12:57] <ericonr> Hm
[09:13:18] <ericonr> Well, it could work with just {} but that's not actually portable (at least for now)
[09:13:31] <dave0> what's the problem?
[09:14:59] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:15:25] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:19:47] *** Quits: rcf (rcf@iceland.sdf.org) (Ping timeout: 256 seconds)
[09:19:52] *** Quits: Sos (~Sos@d107-222.icpnet.pl) (Quit: Leaving)
[09:20:08] *** Joins: ahmed (~ahmed@154.101.128.122)
[09:25:02] *** Quits: alch (~alch@151.68.179.85) (Ping timeout: 240 seconds)
[09:26:33] *** Joins: rcf (~rcf@024-217-141-241.res.spectrum.com)
[09:26:54] *** Joins: alch (~alch@151.34.199.211)
[09:29:14] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:29:58] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[09:31:07] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[09:32:37] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[09:33:02] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:33:25] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[09:37:27] *** Quits: Torr (~Torr@user/torr) (Read error: Connection reset by peer)
[09:37:55] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (Ping timeout: 256 seconds)
[09:40:07] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:40:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[09:43:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[09:46:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[09:46:31] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[09:47:15] *** Joins: rcf1 (rcf@iceland.sdf.org)
[09:47:40] *** Quits: malina (~malina@user/malina) (Quit: malina)
[09:51:33] *** Joins: malina (~malina@user/malina)
[09:51:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:02:37] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:03:53] <Kerr> ericonr why isn't it portable?
[10:12:43] <jaggz> ,cc -DAAA=1 -iassert.h static_assert(1==2, "It does not");
[10:12:45] <candide> jaggz: gcc: error: unrecognized command-line option '-iassert.h'; did you mean '--assert'?
[10:12:53] <jaggz> ,cc -DAAA=1 -include assert.h static_assert(1==2, "It does not");
[10:12:55] <candide> jaggz: error: static assertion failed: "It does not"
[10:13:00] <jaggz> ,cc -DAAA=1 -include assert.h static_assert(1==1, "It does not");
[10:13:03] <candide> jaggz: Success (no output).
[10:13:35] <ChoHag> struct mystruct nonexistentvariable; sizeof (nonexistentvariable.member)
[10:14:17] <ChoHag> nonexistentvariable will cease to occupy any time or space with even the most rudimentary compiler optimisation.
[10:14:33] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[10:15:14] <jaggz> ,cc -DAA='{ 0101, 0132 }' -DBB='{ 0102, 0133 }' -include assert.h static_assert(sizeof((char[])AA) == sizeof((char[])BB), "It should, but doesn't.");
[10:15:15] <candide> jaggz: error: expected ';' before '}' token  At top level:  warning: character constant too long for its type  error: expected identifier or '(' before '\x4442423d'  warning: character constant too long for its type  error: expected identifier or '(' before '\x6f65736e'  warning: missing terminating " character  error: missing terminating " character  error: expected identifier or '(' before '}' token
[10:16:34] <jaggz> ,cc --std=gnu17 -DAA='{ 0101, 0132 }' -DBB='{ 0102, 0133 }' -include assert.h static_assert(sizeof((char[])AA) == sizeof((char[])BB), "It should, but doesn't.");
[10:16:35] <candide> jaggz: Same output.
[10:16:54] <jaggz> ah HAW..
[10:17:32] <jaggz> ,cc --std=gnu++17 -DAA='{ 0101, 0132 }' -DBB='{ 0102, 0133 }' -include assert.h static_assert(sizeof((char[])AA) == sizeof((char[])BB), "It should, but doesn't.");
[10:17:35] <candide> jaggz: cc1: warning: command-line option '-std=gnu++17' is valid for C++/ObjC++ but not for C error: expected ';' before '}' token  At top level:  warning: character constant too long for its type  error: expected identifier or '(' before '\x4442423d'  warning: character constant too long for its type  error: expected identifier or '(' before '\x6f65736e'  warning: missing terminating " character  error: ... <truncated; https://0x0.st/o-6Y.txt>
[10:21:23] *** Joins: kdc (~kdc@196.211.197.178)
[10:22:05] <jaggz> ,cc -lang=c++ --std=gnu++17 -DAA='{ 0101, 0132 }' -DBB='{ 0102, 0133 }' -include assert.h static_assert(sizeof((char[])AA) == sizeof((char[])BB), "It should, but doesn't.");
[10:22:08] <candide> jaggz:  warning: character constant too long for its type  warning: character constant too long for its type  warning: missing terminating " character  error: missing terminating " character  In function 'int main(int, char**)':  error: expected ';' before '}' token  At global scope:  error: expected unqualified-id before '\x4442423d'  error: expected unqualified-id before user-defined character literal  ... <truncated; https://0x0.st/o-6E.txt>
[10:22:35] <jaggz> okay.. forget this stuff.  I'll just use some char[] buffers I assigned those #defines to.. sigh
[10:23:22] *** Joins: liba (~liba@user/liba)
[10:23:45] *** Parts: liba (~liba@user/liba) ()
[10:23:51] *** Joins: liba (~liba@user/liba)
[10:24:17] *** Joins: stblaha (~stblaha@user/stblaha)
[10:26:55] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:27:04] <dave0> ,cc static_assert(sizeof( (char[]){ 0101,0132 } ) == sizeof( (char[]){ 0102,0133 } ), "It should, but doesn't.");
[10:27:07] <candide> dave0: Success (no output).
[10:27:13] <dave0> robot seems happy with that
[10:29:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:30:00] <jaggz> dave0, unfortunately it's arduino.. I forgot it wants this all c++
[10:30:26] <jaggz> they use gnu++17 in their command lines (at least for this microcontroller)
[10:30:32] <jaggz> (esp8266)
[10:30:52] <dave0> eh the only way i know to use c++ is to write it as c and hope it works
[10:30:59] <jaggz> more on that I guess should go to #c++ .. but I'm getting it to compile now so I'll just leave it at that
[10:31:12] <jaggz> oh, the bot's docs say -t supports -lang=c++
[10:31:26] <dave0> ,c++ cout << "nope";
[10:31:26] <candide> If you are using a C++ compiler then your code is not C -- even if you're only using the "C subset". As soon as you invoke a C++ compiler instead of a C compiler, all the rules and idiosyncrasies of the C++ specification come into play, which have subtle differences in certain semantics. Please ask ##c++ or switch to a C compiler.
[10:31:30] <dave0> oops
[10:31:33] <dave0> ,g++ cout << "nope";
[10:31:35] <candide> dave0:  fatal error: prelude.hpp: No such file or directory
[10:31:38] <jaggz> but it looks like gnu++17 doesn't support that {} syntax
[10:31:39] <jaggz> lol
[10:31:53] <jaggz> ,cc -lang=c++ cout << "nope";
[10:31:55] <candide> jaggz:  fatal error: prelude.hpp: No such file or directory
[10:32:02] <jaggz> :}
[10:32:10] <dave0> i can dig it
[10:32:13] <pony> private:
[10:32:17] <liba> Hello. I have a question about the c 'safe' string functions (strcat_s). Are they part of a standard library like <string.h>? Or are they somewhere else?
[10:32:18] <pony> poos
[10:32:20] <pony> public:
[10:32:21] <pony> toilet
[10:32:25] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:32:43] <jaggz> liba, hrm.. I have no man strcat_s
[10:32:47] *** rcf is now known as garp
[10:32:56] <jaggz> linux
[10:33:00] *** Joins: Tempesta_ (~Tempesta@183.98.39.112)
[10:33:02] *** Quits: Tempesta_ (~Tempesta@183.98.39.112) (Remote host closed the connection)
[10:33:06] *** Joins: mahmutov (~mahmutov@37.155.21.12)
[10:33:17] *** garp is now known as Guest9534
[10:33:22] *** Guest9534 is now known as rcf
[10:33:38] *** Joins: malina (~malina@user/malina)
[10:33:53] <jaggz> dave0, interesting that my earlier long -lang=c++ --std=gnu++17 worked (but errored still)
[10:34:19] <liba> I'm new to c. It was mentioned in a learn c on pluralsight. I can't find it in my /usr/include/string.h either. I'll keep digging around, maybe it is third party.
[10:34:24] <jaggz> ,cc -lang=c++ -std=gnu++17 cout << "nope";
[10:34:26] <candide> jaggz: Same output.
[10:34:36] *** Joins: sonde (~sonde@user/sonde)
[10:35:10] <jaggz> ,cc -lang=c++ -std=gnu++17 cout << "nope" << std::eol;
[10:35:11] <candide> jaggz: Same output.
[10:35:19] <jaggz> ,cc -lang=c++ -std=gnu++17 cout << "yup" << std::eol;
[10:35:21] <candide> jaggz: Same output.
[10:35:23] <jaggz> what
[10:35:32] *** Joins: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[10:35:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:35:48] <jaggz> maybe it's just complaining about the error?
[10:36:03] <jaggz> I mean, it's seeing the error output as the same each time
[10:36:25] <dave0> liba: https://en.wikipedia.org/wiki/C_string_handling   says microsoft invented the safe string stuff, it was put into the c standard c11 but optional, and the article predicts they'll be removed
[10:36:31] <jaggz> the prelude error
[10:36:56] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[10:37:58] <dave0> jaggz: afaik pragma- hasn't implemented it, which makes total sense because here in c, we hate c++
[10:38:06] <jaggz> heh
[10:38:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:38:23] <liba> dave0: Thank you. Saved me some searching. That makes sense, the instructor was using Windows, VS Code and compiling with the Microsoft c compiler.
[10:38:48] <dave0> liba: have you been taught printf ?
[10:39:12] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[10:39:16] <dave0> liba: and also have you been taught malloc ?
[10:39:26] <liba> dave0: yep, however I've been having fun with putchar() and puts() too
[10:39:38] <liba> not up to malloc yet.
[10:39:44] <dave0> ah okay
[10:40:33] <jaggz> it's like seeing young lovers in love
[10:41:18] <jaggz> (someone beginning the love of C coding)
[10:41:44] <jaggz> it's somehow not as nice as when they're learning stuff like python and whatnot
[10:41:53] <liba> I'm coming from c#, so not having the .net library do everything has been nice. Each problem requires a more thought out solution.
[10:42:19] <jaggz> learning the core functionality is nice.. so you know how to do stuff
[10:42:40] <jaggz> liba, it's also good to learn (not right now necessarily), some assembly language..
[10:42:43] *** Quits: rcf (~rcf@024-217-141-241.res.spectrum.com) (Quit: WeeChat 3.2.1)
[10:42:48] *** rcf1 is now known as rcf
[10:42:55] <jaggz> it gives you a good feeling for what's going on internally in computers
[10:43:05] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[10:43:37] <jaggz> like how the cpu has registers, and the values might be put into a register, then used
[10:44:36] <jaggz> or the address of a string.. that memory location put in a register, or added to the end of some memory (the 'stack'), and the stack pointer moved up
[10:44:57] <jaggz> and then it jmp's to the location of the function's code itself
[10:45:06] <liba> jaggz: I've played around a little bit with x86 asm. I'd need to put a decent amount of study into it however. I'm still rusty on the flags that are checked depending on op code etc.
[10:45:40] <jaggz> it's good to have at least some minimal exposure.. maybe you've had enough :)
[10:46:19] <jaggz> oh, and then all this historical stuff we're left with, like the return value, in the case of x86, going into the ax register (or whatever)
[10:46:25] <jaggz> and hence, you can return only that one thing
[10:47:18] <jaggz> and later you get to appreciate things like python letting you return multiple values, and other conveniences..  but also then, back in C, passing the address, of storage locations, as function parameters, as one way of the function returning other data
[10:47:23] <jaggz> anyhoo.. enjoy
[10:47:32] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Ping timeout: 240 seconds)
[10:47:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:48:36] <liba> thanks :)
[10:53:24] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:54:25] <liba> I will say I was glad to find out about memset. I didn't know that setting up a char str[sizeof foo]; gave me memory that was filled with other gibberish. so my strcat() would append after the gibberish giving me funny results.
[10:56:14] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:56:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:01:37] <jaggz> liba, char str[sizeof foo]=""; works to init it
[11:01:54] *** Joins: epony (epony@user/epony)
[11:01:59] <jaggz> reserves the full size, but puts the NUL there at the start
[11:02:01] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[11:02:17] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[11:03:36] <jaggz> (also, see strncat() for handling length safety)
[11:03:58] <liba> I tried that and = NULL; and got this error: error: variable-sized object may not be initialized
[11:04:26] <jaggz> and when you get to malloc(), calloc() is an option to initialize it
[11:04:40] <jaggz> in general, I use it only as needed (when I truly want to set it all to 0's)
[11:05:00] <jaggz> otherwise, the efficiency of malloc(), to reserve some uninitialized memory is fine
[11:05:16] <jaggz> use whatever you need, but just know what it's doing so you can choose your weapon.
[11:05:59] <liba> jaggz: any ideas why it won't let me use =""?
[11:06:36] <jaggz> ,cc char s[10]=""; printf("{%s}\n", s);
[11:06:39] <candide> jaggz: {}
[11:06:44] <jaggz> won't let you?
[11:07:01] <jaggz> ,cc char s[10]="hi"; printf("{%s}\n", s);
[11:07:04] <candide> jaggz: {hi}
[11:07:20] <liba> error: variable-sized object may not be initialized
[11:07:38] <liba>  char lineOfStars[sizeof paddedString -1] = "";
[11:09:40] <jaggz> what's padded string?
[11:09:52] <liba>  char paddedString[strlen(str) + 5 ];
[11:10:26] <jaggz> so you're using a lot of somewhat newer C capabilities, like potential runtime string length calculations
[11:10:44] <jaggz> and what's str?
[11:10:58] <liba> char str[] = "Random String Goes here!";
[11:11:25] <jaggz> liba, oh, btw, if worse comes to worse, you can just do char str[sizeof foo];  str[0]=0;
[11:11:42] <jaggz> just to get that one NUL there, and your strcat will work
[11:12:46] <liba> https://pastebin.com/pzedpR83
[11:14:12] <jaggz> ,cc char str[]="rando";  char paddy[sizeof(str) + 5];  char line[sizeof(paddy)  - 1] = "";
[11:14:14] <candide> jaggz: no output: str = "rando"; line = ""; paddy = ""
[11:14:39] <jaggz> ,cc char str[]="rando";  char paddy[sizeof(str) + 5];  char line[sizeof(paddy)  - 1] = "";  puts(line);
[11:14:42] <candide> jaggz: no output: str = "rando"; paddy = ""; line = ""
[11:14:58] <jaggz> ,cc char str[]="rando";  char paddy[sizeof(str) + 5];  char line[strlen(paddy)  - 1] = "";  puts(line);
[11:14:59] <candide> jaggz: error: variable-sized object may not be initialized
[11:15:38] <liba> I will remember your str[0]=0; that is a good tip and likely more performant than memset (I'd assume).
[11:15:39] <jaggz> since strlen() is possibly runtime, it gets upset about the variable-size.
[11:15:51] <jaggz> in general, consider strlen() runtime, although optimization can detect and remove that stuff
[11:16:03] <jaggz> liba, and it's easier to just type *str=0; :)
[11:16:49] <liba> thanks for troubleshooting that. it makes sense.
[11:17:06] <jaggz> both say "stick a 0, of the type *str, at the address pointed to (contained) by str
[11:17:35] *** Joins: inomoz (~inomoz@176.59.121.150)
[11:17:50] <jaggz> there are other little things to know, like sometimes pointers aren't necessarily a variable in memory with an address stored in it
[11:18:00] <jaggz> it might just be some number, literally put into the asm
[11:18:22] <jaggz> (it might come from some lookup table stored by the compiler during compilation then used)
[11:18:28] <jaggz> anyway
[11:18:52] <jaggz> i'm not 100% sure when that's done.. like maybe it's not done for char *str;  but is done for char str[];
[11:19:00] <jaggz> the later not being assignable to a new location
[11:19:24] <jaggz> ,cc char str[];  str="hello"; /* I'll fail */
[11:19:25] <candide> jaggz: error: array size missing in 'str'
[11:19:31] <jaggz> oh.. genius
[11:19:36] <jaggz> ,cc char str[6];  str="hello"; /* I'll fail */
[11:19:38] <candide> jaggz: error: assignment to expression with array type
[11:19:51] <jaggz> ,cc char *str;  str="hello"; /* I'll succeed */
[11:19:53] <candide> jaggz: no output: str = 0x40302c "hello"
[11:20:06] <jaggz> alright.. enough of me going through basic c junk
[11:20:38] *** Joins: Viewday11 (~Viewday@user/viewday)
[11:20:55] <liba> I know of * and &. still learning about when to use them. thanks again for all your help. given me some things to look into. cheers.
[11:23:18] <nitrix> The reason why `char str[] = "hi";` succeeds and `char str[3]; str = "hi";` doesn't is because they have different semantics.
[11:24:15] <nitrix> The former is an initialization, while the latter is an assignment. You cannot assign to an array, it's not an lvalue. The elements are.
[11:25:34] <nitrix> As for why you're allowed to initialize arrays with string literals, it's a special case for convenience.
[11:25:36] <nitrix> ,c11 6.7.9p14
[11:25:37] <candide> http://www.iso-9899.info/n1570.html#6.7.9p14 [Initialization] An array of character type may be initialized by a character string literal or UTF-8 string literal, optionally enclosed in braces. Successive bytes of the string literal (including the terminating null character if there is room or if the array is of unknown size) initialize the elements of the array.
[11:26:16] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[11:26:24] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[11:26:54] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-110-65.mobile.abo.orange.fr)
[11:27:11] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-110-65.mobile.abo.orange.fr) (Client Quit)
[11:27:54] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[11:28:16] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[11:30:30] <nitrix> Related, Variable Length Arrays (VLAs like `char str[n];` where the `n` isn't constant) cannot be initialized either. It's also not guaranteed that your compiler supports VLAs.
[11:31:29] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:32:10] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:32:34] <dave0> i asked about printf and malloc, because if you reformulate all your string handling into what printf can do, you can use asprintf which is vastly easier than stringing (pun!) together a bunch of strcpy/strcat
[11:34:21] <dave0> naturally it's not standard and requires memory management
[11:35:45] *** Jmtrix- is now known as Jmtrix
[11:35:46] *** Quits: Jmtrix (~qed@2604:180:2:72d::497d) (Changing host)
[11:35:46] *** Joins: Jmtrix (~qed@user/jmtrix)
[11:35:55] *** Joins: aradesh (~aradesh@user/aradesh)
[11:36:55] <nitrix> We have an asprintf that's not entirely bad.
[11:36:58] <nitrix> ,asprintf
[11:36:58] <candide> asprintf is char *ASPrintF(const char *format, ...) { va_list ap; va_start(ap, format); int size = vsnprintf(0, 0, format, ap) + 1; va_end(ap); /* count string */ char *string = 0; if(size > 0) string = malloc(size); /* allocate string */ va_start(ap, format); if(string != 0) vsnprintf(string, size, format, ap); va_end(ap); /* print string */ return string; }
[11:37:15] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[11:39:32] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[11:40:56] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[11:40:58] *** Joins: Tempesta (~Tempesta@user/tempesta)
[11:41:31] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[11:42:02] <dave0> nitrix: thats mine :-)
[11:42:11] <dave0> i even debugged it
[11:42:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Ping timeout: 240 seconds)
[11:42:55] <dave0> so i'm biased :-p
[11:43:21] <System_Error> nitrix: C99 compilers guaranteed to support that.
[11:43:47] <System_Error> whether one really wants to use it is another queston
[11:43:57] <dave0> 'not entirely bad' leaves open 'possibly good'
[11:44:14] <nitrix> It's back to being an optional feature past C99, so I don't see how that pertinent.
[11:47:28] <sham1> Parts of if will be in C2023 again, but having them on automatic storage duration will be optional. And good riddance
[11:47:36] <nitrix> "It's also not guaranteed that your compiler supports VLAs." is logically stable. If you consider the set of all compilers and the set of compilers that guarantees to support VLAs, it's immediately obvious that one is a superset of the other and my advice remains valid.
[11:48:37] *** Joins: boB_K7IQ (~boB_K7IQ@108.60.52.242)
[11:48:40] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[11:48:48] <dave0> they add marginal features and ignore the elephant in the room of signed overflow
[11:49:13] <sham1> They could have done something for it, since they will drop everything but 2's complement
[11:49:21] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:49:30] <sham1> Although, I do wonder what they could do for it
[11:50:00] <sham1> ,cc printf("%d", INT_MAX + 1);
[11:50:03] <candide> sham1: [warning: integer overflow in expression of type 'int' results in '-2147483648' [-Woverflow]] -2147483648
[11:50:08] <dave0> it's too hard to code around it and causes real world exploits
[11:50:38] <sham1> Damn it. That got compile time evaluated and thus UBSan didn't whine about it
[11:50:54] <sham1> ,cc -O0 printf("%d", INT_MAX + 1);
[11:50:56] <candide> sham1: Same output.
[11:51:18] <dave0> even if it said "either wrapv or trapv it's up to you to pick" is still really useful
[11:51:30] <nitrix> âˆ€ c, c âˆˆ A, c âˆˆ B, B âŠ† A âˆ© B, something like that?
[11:52:01] <nitrix> I suck with sets.
[11:52:31] <sham1> B = A
[11:53:08] <sham1> Well, technically not since B could also have elements not in A, but there's not enough information to confirm
[11:53:39] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[11:53:57] <sham1> So actually A \subseteq B
[11:54:51] <sham1> But yeah, A \cap B = B
[11:55:29] <sham1> At least with this information
[11:59:21] <System_Error> <nitrix> It's back to being an optional feature past C99 <- yet, if one can use that they can declare its C99 source and use C99 compliant compiler. But its quite specific feature and I'd think twice before using it.
[11:59:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:00:01] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[12:00:17] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[12:03:42] <dave0> what made them change their mind, and make it optional in later standards?
[12:04:03] <sham1> MSFT IIRC
[12:06:28] <nitrix> The more general warning that not every compiler supports the feature seems a lot more useful than pointing out that one older standard required compilers to support it.
[12:07:01] <nitrix> Again, supersets, you can't even claim that all compilers supports C99 so that's already out of the window.
[12:08:08] <nitrix> Yeah. I'm perfectly happy with how I worded it.
[12:09:12] *** Joins: mrig (~mrig@user/mrig)
[12:12:18] <dave0> oops it looks like australia is gonna deport djokovic
[12:12:38] <dave0> we suck :-)
[12:14:04] *** Quits: ahmed (~ahmed@154.101.128.122) (Read error: Connection reset by peer)
[12:14:23] <nitrix> I'm very out of touch with news. Googling a bit, it seems like "processes" are the reason again.
[12:18:26] *** Joins: soul-d (~uknown@user/soul-d)
[12:20:24] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[12:21:17] <dave0> djokovic wasn't vaccinated and our border rules require people to be fully vaccinated ... it was pretty simple and the govt fucked it up and made themselves look stupid
[12:23:04] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:24:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[12:24:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Remote host closed the connection)
[12:25:37] <nitrix> Makes sense.
[12:25:52] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[12:27:14] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Client Quit)
[12:31:13] *** Joins: ahmed (~ahmed@105.238.248.116)
[12:35:56] <NRK[m]> fugg man, just spent 20 mins debugging bullshit
[12:36:13] <NRK[m]> used `idx` inside loop instead of `i`
[12:36:31] <dave0> nice
[12:36:37] <NRK[m]> i was trying to debug the logic, but the logic was fine!
[12:36:38] <nomagno> That sounds like a weird error alright.
[12:37:11] <nomagno> When in doubt, add printfs for every variable you can think of is involved
[12:37:15] <dave0> once i spent 2 hours to find 32678
[12:37:51] <nomagno> dave0: Wut? You wrote a wasteful algorithm or
[12:38:14] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[12:38:20] <dave0> i swapped the 6 and 7 .. it was supposed to be 32768 :-p
[12:38:57] <Maxdamantus> ,cc return 1 << 15;
[12:39:00] <candide> Maxdamantus: Success (no output).
[12:39:11] <NRK[m]> gonna adding `"%d: unreachable", __LINE__` into my code from now on
[12:39:31] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Read error: Connection reset by peer)
[12:39:51] <NRK[m]> s/adding/start adding/
[12:39:58] <dave0> Maxdamantus: writing it as 0x8000 would have helped too :-p
[12:40:22] <nomagno> ^
[12:43:20] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[12:44:34] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff)
[12:49:10] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:50:05] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5181:5bae:9b9e:9cff) (Read error: Connection reset by peer)
[12:52:17] *** Joins: inlight (~inlight@157.35.7.112)
[12:52:17] *** Quits: inlight (~inlight@157.35.7.112) (Changing host)
[12:52:17] *** Joins: inlight (~inlight@user/inlight)
[12:53:50] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 250 seconds)
[12:54:40] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:55:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e160:8c45:e86d:6d90)
[12:58:09] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[12:58:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[13:01:11] *** Joins: liba (~liba@user/liba)
[13:05:17] *** Joins: seninha (~seninha@user/seninha)
[13:10:45] *** Quits: puke (~puke@user/puke) (Read error: Connection reset by peer)
[13:10:59] *** Joins: puke (~puke@user/puke)
[13:12:16] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[13:14:12] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[13:14:15] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:17:39] *** Joins: meator (~meator@user/meator)
[13:18:05] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:20:03] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 256 seconds)
[13:21:02] *** Joins: cosimone (~user@93-47-231-31.ip115.fastwebnet.it)
[13:23:19] *** Quits: alch (~alch@151.34.199.211) (Read error: Connection reset by peer)
[13:27:13] *** Joins: alch (~alch@151.34.220.101)
[13:28:03] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[13:30:35] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[13:32:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:34:01] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[13:35:44] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:35:56] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:36:54] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:37:04] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:37:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:37:17] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[13:38:13] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:38:26] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[13:38:54] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[13:39:26] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[13:40:19] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[13:40:43] <dan_pena> will the fgetc function will be impacted by the encoding of the file (ascii, utf-8, unicode, ...)?
[13:40:54] <dan_pena> or you always extract a char?
[13:42:09] <supakeen> you get a char
[13:42:58] <supakeen> promoted to int, since you might get eof as well but hey
[13:43:01] *** Joins: fluter (~fluter@user/fluter)
[13:45:02] *** Joins: humky (~humky@user/humky)
[13:45:56] <dave0> dan_pena: it can also depend on if you fopen with the 'b' option..  file = fopen("words.txt", "r");  or   file = fopen("image.xxx", "rb");   it makes a difference in windows
[13:46:49] <dave0> dan_pena: fgetc will give you a byte, cast to an int
[13:52:21] <dan_pena> dan_pena: what's the difference in windows?
[13:52:30] <dan_pena> if you open using 'b' or 'rb'
[13:54:11] *** Joins: meator (~meator@user/meator)
[13:55:09] <dave0> windows changes line endings from CR/LF (13 10) to LF (10) which is what unix expects
[13:55:13] <dave0> with text files
[13:55:38] <dave0> i think it also recognizes CTRL-Z as end of file but i'm not 100% about that
[13:56:31] <dave0> dan_pena: linux ignores b and r/rb is the same
[13:56:31] <nomagno> No, 'b' is not documented anywhere
[13:56:48] <dave0> yes it is
[13:57:08] <nomagno> I couldn't find it over at Microsoft's docs, nor IMB's
[13:57:10] <nomagno> Soooo
[13:57:19] <nomagno> 'rb' is documented
[13:57:19] <dave0> https://pubs.opengroup.org/onlinepubs/9699919799/functions/fopen.html
[13:57:20] *** Quits: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Quit: Leaving)
[13:57:24] <dave0> oh
[13:57:35] <dave0> okay you meant just b by itself
[13:57:41] <dave0> i thought you meant as a modifier
[13:57:47] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[13:57:53] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:57:58] <nomagno> Yeah it doesn't seem to be valid
[13:58:10] <dave0> it's a no-op in posix
[13:58:49] <nomagno> rb is kinda useless in *nix, since the only file type is "binary" already
[13:59:06] <nomagno> I guess if you made a wrapper over stdio.h that used MIME types...
[13:59:09] <nomagno> But why
[14:00:39] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[14:03:18] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Remote host closed the connection)
[14:07:13] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[14:07:58] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[14:10:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:10:42] *** Joins: plastico (~plastico@neomutt/plastico)
[14:11:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:12:54] *** Lord_of_Life_ is now known as Lord_of_Life
[14:13:53] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35)
[14:14:00] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[14:15:38] *** Quits: inomoz (~inomoz@176.59.121.150) (Remote host closed the connection)
[14:17:49] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:18:43] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[14:19:22] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[14:20:34] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Client Quit)
[14:21:55] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[14:24:22] *** Joins: liba (~liba@user/liba)
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:32:13] *** Joins: fe23 (~fe23@2409:8a34:464:4990:183e:af34:4e4f:b5de)
[14:35:24] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[14:36:19] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:36:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:36:58] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[14:39:32] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[14:40:52] *** Joins: Atque (~Atque@user/atque)
[14:41:05] *** Quits: ra4king (~ra4king@roiatalla.com) (Quit: Take a byte out of this!)
[14:41:14] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[14:41:17] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[14:41:24] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[14:42:37] *** Joins: Atque (~Atque@user/atque)
[14:43:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[14:45:10] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Read error: Connection reset by peer)
[14:45:36] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:48:30] *** Joins: ra4king (~ra4king@roiatalla.com)
[14:51:58] <dan_pena> do you usually add a '_ptr' to a var when it's a pointer?
[14:52:09] *** Joins: ahmed_ (~ahmed@105.238.248.116)
[14:52:11] <dan_pena> or we don't care, it's understandable by watching the type?
[14:53:02] *** Quits: ahmed (~ahmed@105.238.248.116) (Ping timeout: 240 seconds)
[14:54:22] *** Joins: Nixkernal (~Nixkernal@2a02:1210:2e52:8b00:39ef:4f8c:43c7:e976)
[14:55:25] <sham1> No Hungarian notation pls
[14:55:33] *** Joins: pert (~pert@fsf/member/pert)
[14:55:40] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[14:58:00] <DarkUranium> What sham1 said.
[14:58:38] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 250 seconds)
[14:59:09] <dan_pena> hmm
[14:59:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:00:42] <dan_pena> sham1: I'm reading and hungarian notation is like show intention or kind. So for example : ind_smallest_leaf is this var name wrong since I explain that this is used as an index?
[15:01:45] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[15:01:49] <sham1> There are two types of Hungarian notation
[15:02:13] <sham1> Adding `_ptr` to the end of a pointer is Systems Hungarian
[15:03:29] <dan_pena> sham1: but I mean the var name should explain the intention no?
[15:03:43] <sham1> Saying that a variable is a pointer is not intention
[15:04:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:04:18] <dan_pena> sham1: yeah but I'm talking about this var name for example `ind_smallest_leaf`
[15:04:22] <sham1> That's fine
[15:04:27] <dan_pena> okey!
[15:05:07] <dan_pena> Another question : if in my function if I do a lot of call `my_obj->x`, is it better to set a pointer to `x` at the beginning of the function?
[15:05:16] <dan_pena> Than calling the `->` each time
[15:05:50] <sham1> Depends on what you want to do with `x` and what is clearer in the specific situation
[15:06:50] <dan_pena> For example : int *array_ptr[10]; is that Hungarian notation?
[15:06:51] <dave0> dan_pena: it could make a slight difference
[15:07:11] <NRK[m]> dan_pena: single char var name for local variables
[15:07:25] <NRK[m]> globals should be descriptive.
[15:07:45] <dan_pena> single char :O
[15:07:51] <sham1> Yeah nah
[15:08:15] <dave0> dan_pena: in general, make it as readable and simple as you can.. which usually means don't optimize to a pointer.. yet
[15:08:16] <NRK[m]> https://www.kernel.org/doc/html/v5.12/process/coding-style.html#naming
[15:09:25] <dave0> dan_pena: int *x = &obj->x; *x = 42; printf("%d ", *x);    is worse than   obj->x = 42; printf("%d ", obj->x);
[15:09:51] <sham1> Things like `i`, `j` and such make sense for things like loop counters, but otherwise one should have more letters than one. `tmp` is a good name
[15:10:20] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[15:10:44] <dave0> dan_pena: but if, after you finish writing your program, you find that something is too slow... then you could perhaps optimize to a pointer ... but keep in mind it may not make any difference at all, and just be harder to read/understand
[15:10:46] *** Joins: john99 (~john99@138.246.103.34.bc.googleusercontent.com)
[15:11:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:12:24] *** Joins: malina (~malina@user/malina)
[15:12:47] <dave0> dan_pena: int *x = &obj->x;   at best eliminates an add .. which is already terribly fast on todays cpu's
[15:13:10] <sham1> &obj->x probably gets optimized into a `lea` if even that
[15:13:38] <dave0> sham1: also when you use it..  *x = 42;  vs  obj->x = 42;
[15:13:43] *** Joins: Macuser (~Macuser@216.30.159.201)
[15:14:05] <dave0> it's   mov [bx],42   vs.   mov [bx+n],42
[15:14:06] <dan_pena> I see
[15:14:09] <dan_pena> Thank you guys
[15:14:44] <dave0> dan_pena: at first just make it as simple and easy to read as you can
[15:15:30] *** Joins: warremkaw (~warremkaw@user/warremkaw)
[15:16:09] <sham1> The C compilers are very smart about optimizing stuff
[15:16:50] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:17:40] <dave0> the rule of thumb is 10% of your code takes 90% of the time
[15:18:07] <sham1> Wouldn't it be 20% taking 80% of time
[15:18:16] *** Joins: Klinda (~superleag@user/klinda)
[15:18:19] <dave0> oh i dunno :-p
[15:18:23] <dave0> it's some crazy number
[15:18:40] <dave0> make the other 80% of the code easy to read
[15:19:42] <NRK[m]> Pareto's law
[15:20:53] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:21:20] <dan_pena> int **array_ptr is valid no? if it was int**array_ptr_ptr it was hungarian notation right?
[15:21:53] <sham1> That's not a descriptive name at all
[15:22:33] <dan_pena> sham1: what do you mean?
[15:22:55] <dan_pena> I mean it's a pointer to an array of ptr
[15:23:13] *** Joins: magla (~gelignite@55d4ed71.access.ecotel.net)
[15:23:21] <sham1> Sure, but why
[15:23:23] <dave0> naming things is hard
[15:23:32] <sham1> What purpose does this pointer to an array have
[15:24:24] <dave0> dan_pena: try to name it after what's in it, not what type it is
[15:24:41] <NRK[m]> ^
[15:25:01] <dan_pena> for example in my array is an array of pointer to leaves. I will call it struct leaf **leaves_ptr;
[15:25:09] <dan_pena> s/in/if/
[15:25:10] <NRK[m]> so something like `int *four_bytes` would be better
[15:25:16] <NRK[m]> :)
[15:25:17] <sham1> I'd name that `struct leaf **leaves`
[15:25:23] <dan_pena> okey
[15:25:45] <sham1> The plural implies an array-like structure.
[15:25:55] <dan_pena> the dev is supposed to understand by reading the type and not the name of the var
[15:26:11] <dan_pena> i see
[15:26:19] <sham1> struct leaf *leaves[];
[15:26:23] <NRK[m]> you can just go to the decel to see the type
[15:26:28] <dave0> you can infer the type by how you use it...   leaves[x][y]   is a strong hint that it's a 2d array
[15:26:46] <NRK[m]> and the compiler will warn you if you do something weird anyways
[15:26:54] <sham1> Or if you want to be really fancy, `struct leaf *(*leaves)[]`;
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:56] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:39:13] *** Joins: ludwhe (~ludwhe@user/ludwhe)
[15:40:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:41:02] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[15:41:06] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[15:45:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:46:27] *** Quits: ludwhe (~ludwhe@user/ludwhe) (Quit: Quit)
[15:53:20] *** Joins: lleo (~leo@188-206-106-40.mobile.kpn.net)
[15:53:30] *** Quits: lleo (~leo@188-206-106-40.mobile.kpn.net) (Read error: Connection reset by peer)
[15:56:44] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:58:09] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[15:58:34] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:58:43] *** Joins: lleo (~leo@188-206-106-40.mobile.kpn.net)
[16:00:05] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:00:23] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[16:01:41] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:03:51] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:05:28] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[16:11:55] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:12:21] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:19:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc)
[16:19:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0c:5cd6:41ba:a0fc) (Changing host)
[16:19:49] *** Joins: skapata (~Skapata@user/skapata)
[16:22:04] *** Joins: malina (~malina@user/malina)
[16:22:29] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[16:24:30] *** Joins: FragByte (~christian@user/fragbyte)
[16:28:32] *** Quits: adip (~adip@aedr186.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[16:30:24] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:31:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:32:20] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[16:34:23] *** Joins: FragByte (~christian@user/fragbyte)
[16:37:00] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 250 seconds)
[16:38:48] *** Joins: Guest1715 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:41:04] *** Joins: pulse (~pulse@user/pulse)
[16:48:39] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[16:52:32] <Kerr> Assuming the intent here is understandable, is there any reasonable way to do: if (!strcmp(args[i], "-no_config")) config->no_config = true, continue;
[16:52:57] <Kerr> That is, get two statements out of an if without using {}
[16:53:53] <Kerr> The main motivation being able to do the dozen or so of these on a single line each, instead of 5 lines each to otherwise match the typical style.
[16:58:35] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[16:58:44] <sham1> I'd do `if (strcmp(args[i], "-no_config") == 0) { config->no_config = true; continue; }` for clarity. That is, have the braces on the same line as the condition
[16:59:02] *** Joins: APic (apic@apic.name)
[16:59:09] <sham1> Also a bike shedding thing, but I'd name the option "-no-config"
[16:59:56] <sham1> And maybe use -- unless long options already use - in the application for some convention reason
[17:02:33] <dave0> how many years is there unix and the syntax of command line arguments is not standard?
[17:03:42] <sham1> We have a standard way of doing arguments, POSIX, it's just that there's no standard for long options
[17:03:49] *** Quits: llh (~llh@user/llh) (Ping timeout: 240 seconds)
[17:04:01] <sham1> As much as I am not a fan, the way GNU does it is nice
[17:04:12] *** Joins: strajder (~strajder@user/strajder)
[17:04:56] *** Joins: Rite (~Rite@31.206.192.210)
[17:05:01] <dave0> i know of two ways to do long options.. gnu and x-windows
[17:05:13] <dave0> ./myprog -display :0
[17:05:17] <dave0> ./myprog --display :0
[17:05:19] <sham1> There's also dd
[17:05:19] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[17:05:28] <dave0> oh yeah haha
[17:05:36] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[17:05:42] *** Joins: llh (~llh@user/llh)
[17:05:44] <sham1> Things like `if`, `bs` and so on are long options technically
[17:06:00] <sham1> `conv`
[17:06:08] <dave0> where'd that come from? it cant be from unix
[17:06:31] <sham1> It was originally a some kind of a parody of an IBM tool or another
[17:06:37] <dave0> nice
[17:06:57] <dave0> it filled a niche so we still got it
[17:07:11] <sham1> The length of command line switches isn't that crucial on a mainframe
[17:07:43] <dave0> i like that undelete is the opposite of rm (not unrm ;-)
[17:08:11] *** Joins: Burgundy (~yomon@82.76.72.88)
[17:08:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:10:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:11:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:12:08] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com)
[17:13:19] *** Quits: Guest1715 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[17:14:19] *** Joins: Vrganj (~vrganj@93-138-69-45.adsl.net.t-com.hr)
[17:14:20] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com) (Read error: Connection reset by peer)
[17:18:06] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[17:20:09] *** Joins: FragByte (~christian@user/fragbyte)
[17:20:46] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 250 seconds)
[17:21:37] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[17:22:36] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[17:23:33] *** Quits: alch (~alch@151.34.220.101) (Read error: Connection reset by peer)
[17:23:59] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[17:25:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:27:25] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[17:27:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:29:28] *** Joins: FragByte (~christian@user/fragbyte)
[17:31:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:32:12] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:32:23] *** Quits: Rite (~Rite@31.206.192.210) (Quit: Leaving)
[17:32:39] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:41:20] *** Joins: stonkey (~stonkey@user/stonkey)
[17:44:46] *** Joins: Rounin (~david@84.212.130.215)
[17:46:10] *** Joins: nyah (~nyah@94.6.71.219)
[17:47:05] *** Quits: warremkaw (~warremkaw@user/warremkaw) (Remote host closed the connection)
[17:47:17] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.2)
[17:51:13] *** NotApplicable is now known as Kit
[17:54:32] *** Joins: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de)
[17:57:44] *** Joins: tforever (~Terabyte@95.7.165.79)
[17:59:33] *** Joins: jkotra3 (~jkotra@122.169.214.214)
[17:59:44] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:00:40] *** Joins: inlight (~inlight@157.42.231.188)
[18:00:40] *** Quits: inlight (~inlight@157.42.231.188) (Changing host)
[18:00:40] *** Joins: inlight (~inlight@user/inlight)
[18:00:58] *** Quits: tforever (~Terabyte@95.7.165.79) (Client Quit)
[18:01:30] *** Quits: jkotra (~jkotra@122.181.66.41) (Ping timeout: 250 seconds)
[18:01:31] *** jkotra3 is now known as jkotra
[18:01:32] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[18:02:02] *** Quits: lleo (~leo@188-206-106-40.mobile.kpn.net) (Ping timeout: 240 seconds)
[18:02:27] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:02:36] *** Joins: meator (~meator@user/meator)
[18:04:27] *** Joins: Rite (~Rite@31.206.192.210)
[18:07:41] *** Joins: kish` (~aqua@user/aqua)
[18:10:20] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[18:15:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:21:57] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[18:25:50] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[18:28:36] *** Joins: warremkaw (~warremkaw@user/warremkaw)
[18:34:38] *** Quits: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:36:41] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[18:36:46] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:39:36] *** Quits: sonde (~sonde@user/sonde) (Quit: leaving)
[18:39:57] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[18:41:07] *** Joins: hlauk (~hlauk@176.33.97.244)
[18:41:09] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[18:48:32] *** Quits: mahmutov (~mahmutov@37.155.21.12) (Ping timeout: 240 seconds)
[18:51:06] *** Joins: jinie (~jimmy@188.114.173.150)
[18:52:27] *** Quits: inlight (~inlight@user/inlight) (Read error: Connection reset by peer)
[18:52:40] *** Joins: Everything (~Everythin@37.115.210.35)
[18:52:51] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:54:24] *** Joins: Narrat (~omnius@p200300df5f3a232706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[18:56:34] *** Joins: alch (~alch@151.68.165.126)
[19:00:15] *** Joins: inlight (~inlight@157.42.231.188)
[19:00:15] *** Quits: inlight (~inlight@157.42.231.188) (Changing host)
[19:00:15] *** Joins: inlight (~inlight@user/inlight)
[19:00:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:00:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:00:51] *** Joins: wroathe (~wroathe@user/wroathe)
[19:02:16] *** Quits: jinie (~jimmy@188.114.173.150) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:02:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:04:47] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca) (Quit: WeeChat 3.4)
[19:05:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:09:50] *** Joins: nicode (~nic@2607:f2c0:946d:3800:5978:3a37:ee84:d8cb)
[19:12:53] *** Joins: mahmutov (~mahmutov@37.155.52.244)
[19:14:11] *** Joins: rsjw (~quassel@user/rsjw)
[19:15:11] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:21:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:21:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:21:15] *** Joins: wroathe (~wroathe@user/wroathe)
[19:23:01] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[19:23:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[19:23:16] *** Joins: terminalpusher (~terminalp@2a01:586:875c:1:18dd:c6d:2987:1281)
[19:25:02] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:75c4:4cd7:1a62:95cc) (Ping timeout: 240 seconds)
[19:25:45] *** Joins: shivesh (~shivesh@user/shivesh)
[19:28:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:29:21] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:e975:abba:2e19:6082)
[19:31:36] *** kplant_ is now known as kplant
[19:33:42] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[19:34:34] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:35:40] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[19:36:44] *** Joins: Alhazred (~Alhazred@86.106.74.38)
[19:38:05] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[19:38:30] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[19:39:21] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[19:39:40] *** Joins: stonkey (~stonkey@user/stonkey)
[19:39:45] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[19:40:21] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:e975:abba:2e19:6082) (Quit: Leaving)
[19:41:10] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Ping timeout: 250 seconds)
[19:42:43] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:47:26] *** Joins: trampel (~trampel@2601:602:9a00:49d:dcea:51c3:85c8:4fbd)
[19:47:43] *** Quits: Narrat (~omnius@p200300df5f3a232706ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[19:48:13] *** Quits: hlauk (~hlauk@176.33.97.244) (Ping timeout: 256 seconds)
[19:48:23] *** Joins: Jong (~Jong@2620:10d:c090:400::5:44d9)
[19:49:31] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[19:51:31] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com)
[19:53:23] *** Joins: graywolf (~wolf@user/graywolf)
[19:54:55] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[19:55:58] *** Quits: nostar (~nostar@37.19.212.3) (Quit: Leaving)
[19:58:34] *** Quits: Rite (~Rite@31.206.192.210) (Quit: Leaving)
[19:58:45] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[19:59:02] *** Joins: Macuser- (Macuser@here.for-the.chat)
[19:59:59] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[20:00:03] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[20:00:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:00:51] *** Joins: nostar (~nostar@68.51.221.108)
[20:06:12] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Quit: WeeChat 3.0.1)
[20:06:45] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:10:30] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com) (Read error: Connection reset by peer)
[20:12:11] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[20:13:30] *** Joins: mrig (~mrig@user/mrig)
[20:14:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:17:49] *** Joins: meator (~meator@user/meator)
[20:20:07] *** Quits: stblaha (~stblaha@user/stblaha) (Ping timeout: 256 seconds)
[20:22:06] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[20:23:16] *** Joins: shanto05 (~shanto05@103.118.76.134)
[20:24:49] *** Joins: hlauk (~hlauk@176.33.97.244)
[20:26:14] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[20:26:27] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:26:46] *** Quits: trampel (~trampel@2601:602:9a00:49d:dcea:51c3:85c8:4fbd) (Quit: Leaving)
[20:29:19] *** Joins: lleo (~leo@188-206-106-40.mobile.kpn.net)
[20:30:37] *** Quits: shanto05 (~shanto05@103.118.76.134) (Quit: Leaving)
[20:30:48] *** Quits: Thymo_ (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[20:30:48] *** Joins: Thymo_ (~Thymo@NASSP/developer/Thymo)
[20:31:04] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[20:31:14] *** Joins: shanto05 (~shanto05@103.118.76.134)
[20:31:26] *** Quits: john99 (~john99@138.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[20:31:38] *** Thymo_ is now known as Thymo
[20:35:54] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:36:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[20:40:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:42:42] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 250 seconds)
[20:44:14] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca)
[20:45:29] *** Joins: ajf_ (~ajf_@user/ajf/x-9593112)
[20:46:38] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[20:47:19] *** Quits: shanto05 (~shanto05@103.118.76.134) (Quit: Leaving)
[20:47:54] *** Quits: llh (~llh@user/llh) (Ping timeout: 250 seconds)
[20:49:36] *** Joins: llh (~llh@user/llh)
[20:50:20] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[20:51:58] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[20:53:32] *** Joins: coruja (~coruja@user/coruja)
[20:54:58] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[20:54:58] *** Quits: fe23 (~fe23@2409:8a34:464:4990:183e:af34:4e4f:b5de) (Quit: fe23)
[20:55:18] *** Quits: hlauk (~hlauk@176.33.97.244) (Quit: Leaving)
[20:56:44] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[20:58:03] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:00:02] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Ping timeout: 240 seconds)
[21:02:18] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:841f:4d2d:96db:3f6d)
[21:03:04] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[21:03:36] *** Quits: terminalpusher (~terminalp@2a01:586:875c:1:18dd:c6d:2987:1281) (Remote host closed the connection)
[21:03:46] *** Joins: kit_ten (~u0_a391@2600:380:a43d:1c52:7818:8bea:e74b:70b)
[21:05:14] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[21:05:22] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[21:06:06] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[21:06:19] *** Joins: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com)
[21:06:34] *** Quits: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com) (Max SendQ exceeded)
[21:07:17] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[21:08:32] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.3)
[21:08:59] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[21:10:46] *** Quits: Jong (~Jong@2620:10d:c090:400::5:44d9) (Quit: Textual IRC Client: www.textualapp.com)
[21:11:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:12:09] *** Joins: cousteau (~cousteau@user/cousteau)
[21:12:42] *** Joins: kexec (~kexec@user/kexec)
[21:19:32] *** Quits: Vrganj (~vrganj@93-138-69-45.adsl.net.t-com.hr) (Ping timeout: 250 seconds)
[21:21:40] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[21:22:37] *** Quits: alch (~alch@151.68.165.126) (Read error: Connection reset by peer)
[21:22:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[21:23:57] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Client Quit)
[21:24:35] <nomagno> https://gitea.com/Nomagno/Half-World
[21:25:27] <nomagno> Just pushed a change that separates into include and src directories. Any suggestions on how to further improve the organization of the code and interfaces?
[21:27:26] *** Joins: alch (~alch@151.82.209.171)
[21:28:59] <cousteau> file system-wise, or "what should go on a .c file, a .h file, or be split across multiple .c/.h files"-wise?
[21:29:27] *** Joins: adip (~adip@aedr186.neoplus.adsl.tpnet.pl)
[21:30:36] *** Macuser- is now known as Macuser
[21:31:01] *** Quits: lleo (~leo@188-206-106-40.mobile.kpn.net) (Quit: beyond time space in laws)
[21:31:29] <cousteau> nomagno: to begin with... your #includes seem to include "halfworld/" in the path, but there's no such directory in the project.  That normal?
[21:31:31] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[21:32:35] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:33:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:35:59] <cousteau> I'm also wondering about the explicit use of `extern` with function declarations.  To this date, I'm still not 100% sure it has any meaning (beyond explicitly reminding the programmer that function declarations are extern by default)
[21:37:40] <nomagno> cousteau: File-system wise. Hm, well I guess it is an issue, yes. The way I use it right now is symlinking the include folder to a path with halfworld in it
[21:38:00] <cousteau> ah, well no wonder you weren't getting any errors :)
[21:38:08] <nomagno> I think if I want it to keep the verbosity in including I could just make a subfolder?
[21:38:20] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[21:38:57] <nomagno> cousteau: I know this won't work out of the box, I was just wondering in general, as in, how to split files and if there are any obvious issues with my organizational scheme.
[21:39:05] <cousteau> file system wise I doubt I'll be of much help because my usual way to go is just to put all .c and .h files together in the same directory (and if that seems untidy for you, you should see what my desk looks like...)
[21:39:15] <nomagno> I will make a subfolder
[21:39:36] <APic> Is this not rather something for ##workingset?
[21:39:42] <nomagno> cousteau: Well yeah, I was doing that but I found it too messy from the third-party interface implementor point of view...
[21:40:00] <nomagno> ... Are third-party interface implementors a common thing?
[21:40:20] <nomagno> APic: Well I guess it's not related to the C language, but it also doesn't have much to do with anything in workingset
[21:40:29] <nomagno> it's a meta C question
[21:40:30] <APic> Good.
[21:40:40] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[21:40:48] <cousteau> nomagno: is this some sort of API?  Because if not it doesn't make much sense to put everything inside its own include subdirectory
[21:42:07] <cousteau> in fact, I would imagine that the way to go is to have an include/ directory, put your main header files there, along with the ones you'll only be using internally, and when installing the project you'll be copying those headers from <project>/include/ to <prefix>/include/
[21:42:29] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[21:42:50] <cousteau> or rather, from <project>/include/ to <prefix>/include/projectname/
[21:42:50] <nomagno> cousteau: The whole point of the project is to provide specifications, interfaces, and implementations for those interfaces, in a lightweight and portable way. But I guess I do mean to have each of the headers be its own API, and have a single reference implementation of an engine to combine it all
[21:43:37] <cousteau> and your .c files inside <project>/src/ would refer to those include files simply as #include "some_header.h", rather than #include <project_name/some_header.h>
[21:44:42] <cousteau> I think you'll probably want to separate the headers your project needs in order to compile the library from the headers the end user will need in order to write code targeting the library, unless the two are pretty much the same
[21:44:52] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[21:45:35] <nomagno> I mean, they're the same. It's explicitly written to be a modular implementation of a series of specifications
[21:45:44] *** Joins: Betal (~Betal@user/betal)
[21:46:02] <nomagno> The top-level interface will be that of the actual game engine, which will still not really be frontend in the traditional sense
[21:46:10] <nomagno> And each of the parts will definitely work in isolation
[21:46:48] <cousteau> so the goal is not to write a library, but a bunch of copyable files that other users will merge into their C project?
[21:47:38] <nomagno> Uh... No, it's a buncha libraries that combine together to make a game engine, and the game engine is also a library, then possibly you can make a wrapper for the game engine
[21:47:43] <cousteau> typically what I see for most projects is a library (.so or .a or both) which is compiled from the C sources, plus a collection of header files
[21:48:34] <nomagno> The top-level engine library itself will definitely allow easy access to all interfaces the engine uses both internally and externally. Mainly because they're ALL designed to be useful
[21:48:54] <nomagno> So the .a/.so bundle approach sounds appropiate
[21:49:06] <cousteau> so if someone wants to use that library in their program, they need to have the .a/.so plus all the .h files in order to compile the program
[21:49:08] *** Joins: smoke (~smoke@user/smoke)
[21:49:36] <nomagno> Well yeah, ideally I'd provide a makefile at sound point
[21:50:15] <nomagno> But that's when I actually get to implementing all of the halfive.h interfaces, which is the physics engine and basic backend functionality part
[21:50:29] <cousteau> you'll typically provide a makefile that runs `gcc -c` and `ar` to create the .a, and that may also have a `make install` option that copies those (plus the headers) to the specified location under /usr or whatever
[21:51:08] <sham1> $PREFIX
[21:51:14] *** Joins: bkhl (~bkhl@user/bkhl)
[21:51:46] <sham1> ${DESTDIR}${PREFIX} specifically, with $DESTDIR being by default empty, since that's used by package management stuff for building the packages for a "fake root" of sorts
[21:51:47] <cousteau> yeah... whatever it's called; probably the guys at #workingset know it better than me
[21:52:38] <cousteau> but my point is, the end user of the library won't see your .c files (except when compiling the library itself), only the resulting library and necessary headers
[21:52:44] <nomagno> Yeah that's a bit out of the scope of my consult
[21:52:47] <nomagno> Thanks though!
[21:53:48] <nomagno> The most time-consuming part of the project remains to choose clean data structures and interfaces...
[21:54:12] *** Quits: bkhl (~bkhl@user/bkhl) (Client Quit)
[21:54:14] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:55:07] <cousteau> although I guess that if you're gonna use the same .h files for compiling the library and for using it later, they need to include other headers as `#include <halfworld/blah.h>` rather than `#include "blah.h"` anyway
[21:55:22] *** Joins: bkhl (~bkhl@user/bkhl)
[21:55:45] <nomagno> Well yes, I had that in mind
[21:55:46] <cousteau> in that case, it seems convenient to put all headers in [project]/include/halfworld/
[21:56:03] <cousteau> so you don't have to do nasty symlink stuff to workaround that
[21:56:03] <nomagno> Already pushed that change, yeah
[21:56:28] <omegatron> and any private header in [project]/include/halfworld-private  for example
[21:56:51] <cousteau> well, if there are going to be any private headers
[21:57:05] <cousteau> (they could even be in [project]/src/ directly)
[21:57:16] <nomagno> Hm, would y'all say the project is creeping out of the 'toy' class? Long way to be useful, but
[21:57:17] <omegatron> yeah - it's a matter of taste
[21:57:28] <nomagno> There are not any private headers, no
[21:57:37] *** Quits: bkhl (~bkhl@user/bkhl) (Client Quit)
[21:58:07] <cousteau> nomagno: I'd say the more you worry now to get it done elegantly, the less you'll have to worry later about not having done it elegantly, and the more practice you'll get :)
[21:58:09] <nomagno> Well I do have a header that contains string handling functions, borrowed from Plan9
[21:58:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:58:12] *** Joins: bkhl (~bkhl@user/bkhl)
[21:58:51] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:59:07] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:59:26] <nomagno> Notice how there is essentially zero dependency on hosted libc, except for the few example main() functions on things like the VM assembly execution
[21:59:58] *** Joins: stonkey (~stonkey@user/stonkey)
[22:00:01] <cousteau> another thing to consider: there's nothing wrong in having headers refer to each other relatively, e.g. include/halfworld/header1.h may contain `#include "header2.h"` rather than `#include <halfworld/header2.h>`
[22:00:16] <cousteau> I think that's how it works in most cases.  Let me have a look at SDL
[22:00:54] <cousteau> where's my SDL stuff??
[22:02:16] <nomagno> I should probably add a note that if there are ANY assumptions made about the target not marked out in hwreq.h, it will be immediately fixed on notice
[22:02:35] <cousteau> ok... so /usr/include/GL/ seems to use absolute paths, but I could swear that SDL headers (which I thought I had installed) use relative includes
[22:05:37] *** Joins: evocatus (~evocatus@62.182.77.224)
[22:05:43] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[22:06:24] <cousteau> ok yes.  So SDL includes ALL indirectly-included files as `#include "SDL_something.h"` rather than `#include <SDL2/SDL_something.h>`, which kinda makes sense because that way it doesn't matter how the dir with all the SDL headers is called; you just take care to include the "master" SDL.h header in your program and it'll include all the other ones by relative reference
[22:07:18] <cousteau> so, the only place where it makes sense to use `#include <halfworld/...>` instead of `#include "..."` is in the documentation :)
[22:07:48] <nomagno> cousteau: Hm, now that you have SDL installed, you mind uncommenting the main function in hwvi.c, running the thingy, and checking if you get a sound playing and a nice striped pattern on a window?
[22:08:13] <nomagno> I'm really paranoid since I don't have many systems to test that part out on comfortably
[22:08:13] <cousteau> argh, I fell on a trap :)
[22:08:41] <nomagno> Yeah you have to run 70 tests before I let you pass to the next room, sorry
[22:08:44] <nomagno> :P
[22:10:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com)
[22:10:47] <cousteau> what's the compile command?
[22:11:39] <nomagno> Ugh... You can try gcc -L../../include/halfworld/ hwvi.c hwstring.c
[22:11:57] <nomagno> Or clang, you get the idea.
[22:12:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:12:29] <cousteau> ok, wasn't sure if I needed any other file... no -lSDL2?
[22:12:45] <nomagno> Yes, -lSDL2
[22:12:46] <nomagno> My bad
[22:13:05] *** Quits: boB_K7IQ (~boB_K7IQ@108.60.52.242) ()
[22:13:07] *** Joins: seninha (~seninha@user/seninha)
[22:13:22] <cousteau> also it's -I../../include/ (-I, not -L) :)  (and without the /halfworld)
[22:14:16] <nomagno> It is -L on my version of gcc
[22:14:35] <cousteau> that's for searching libraries, not headers, right?
[22:14:52] <nomagno> -l is for libs, -L is for headers
[22:15:05] *** Joins: jinie (~jimmy@188.114.173.150)
[22:15:13] *** Quits: jinie (~jimmy@188.114.173.150) (Client Quit)
[22:16:01] <cousteau> no, -l is "link this lib", -L is "here's where libs are", -i is "include this header", -I is "here's where headers are"
[22:16:24] <cousteau> unless they changed something in the latest version, in a very weird and backward-incompatible way...
[22:16:25] <nomagno> Oh
[22:16:28] <nomagno> -I
[22:16:31] <nomagno> My font
[22:16:38] <cousteau> haha
[22:16:38] *** Joins: pyook (~pyook@user/puke)
[22:16:41] <nomagno> Couldn't distinguish lowercase L from uppercase I
[22:16:51] <nomagno> Dammit android
[22:16:59] <cousteau> yeah that's why I use a monospaced font for IRC (that, and because it was the default)
[22:17:25] <nomagno> I'm on a matrix client on android
[22:17:27] <cousteau> (...well not in Android, but at least there I use a kinda nice Samsung font where I and l look different)
[22:17:31] <nomagno> I'll see what I can do, but probably just switch to the desktop client...
[22:18:01] <cousteau> I'm getting "undefined reference to main"... dude, gcc, it's there, I can see it
[22:18:14] <cousteau> ah wait it's commented, duh
[22:18:31] <nomagno> I said uncomment first thing :P
[22:18:41] <nomagno> <Hm, now that you have SDL installed, you mind uncommenting the main function in hwvi.c...>
[22:18:57] <cousteau> yeah I kinda forgot how to read
[22:19:16] <nomagno> In theory you could compile without libc
[22:19:21] <cousteau> I hear no- oh holy damn, I hear horses!
[22:19:31] <cousteau> and see a weird pattern; not sure if it's working or broken
[22:19:33] <nomagno> It's clapping
[22:19:36] <cousteau> ah
[22:19:38] <nomagno> At a low bitrate
[22:19:52] <cousteau> I thought it was horses, Monty Python coconut style
[22:19:55] <ChoHag> Not clopping?
[22:20:42] <nomagno> cousteau: Public domain sound... The pattern is probably fine, let me send a screenshot just in case
[22:21:05] <cousteau> ok so visually I saw a bunch of 1 or 2 px wide vertical lines, interleaved with diagonal (45Â°, \-shaped) lines moving to the right
[22:21:38] <cousteau> gotta go now.  Hope that executable didn't install a virus or something because I didn't check anything... :P
[22:21:50] <cousteau> well I'll wait for that screenshot
[22:21:55] <nomagno> https://0x0.st/o-0q.png
[22:22:00] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[22:22:09] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[22:22:24] <cousteau> ok yes that's what I saw.  Couldn't tell if it was working or if the screen was doing something weird
[22:22:49] <cousteau> Bye!  Good luck with the project :)
[22:23:08] <nomagno> It took me a while to find a visually distinct pattern that wasn't probable cause for convulsions on a fraction of the population... a long while
[22:23:09] <nomagno> Bye! Thanks
[22:24:21] <cousteau> maybe a checkerboard pattern would've been more obvious.  For me, 45Â° diagonals are synonym for "the pixel array is 1px too narrow and these were supposed to be vertical" :P
[22:24:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:24:30] <cousteau> but yeah it did work :)
[22:24:32] <cousteau> bye!
[22:24:41] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: â™« I can't forget the day I shot that network down â™«)
[22:24:47] <nomagno> Bye!
[22:24:58] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 250 seconds)
[22:26:10] *** Quits: ahmed_ (~ahmed@105.238.248.116) (Quit: Leaving)
[22:30:19] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:33:51] <nomagno> Does the C standard say anything about main() being allowed NOT to be the entry point on freestanding C libraries?
[22:33:58] <nomagno> Because it seems almost every implementation does that
[22:34:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:34:13] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:35:22] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[22:36:28] <sham1> It's implementation defined
[22:36:33] *** Joins: Akuli (~Akuli@82-203-164-95.bb.dnainternet.fi)
[22:36:52] <sham1> But for most freestanding environments `main` doesn't really make sense as such
[22:37:21] <nomagno> Well, it's a real pain honestly
[22:37:32] <nomagno> I'd prefer main() being allowed to be an implicit call to the init code
[22:37:50] *** Joins: tforever (~Terabyte@95.7.165.79)
[22:38:14] <nomagno> Though in all fairness you can't have I/O without implementation-specific code anyways
[22:38:35] <nomagno> So main() as a concept isn't very useful on freestanding, you're right
[22:40:39] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:41:36] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:41:40] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:44:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[22:44:19] <sham1> Yeah. No arguments necessarily either
[22:44:36] <sham1> And returning can be dubious in a freestanding context as well
[22:45:06] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:18] <ChoHag> main is (usually) a concept freestanding needs to *provide*.
[22:47:55] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:48:36] *** Quits: tforever (~Terabyte@95.7.165.79) (Quit: Segmentation fault (core dumped))
[22:48:59] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[22:50:39] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:51:42] *** Joins: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net)
[22:53:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[22:54:00] *** Joins: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae)
[22:54:12] <APic> At least Discussion about main() are much moar ontopic here than in ##workingset â˜º
[22:54:14] <APic> +s
[22:54:20] <APic> s/Dis/dis/
[22:54:21] <APic> sorry
[22:54:24] <APic> s/so/So/
[22:56:02] <APic> ,o0(Why does candide not do regexps?)
[22:56:10] <candide> Aâ€‹Pic, I'm not sure, let me check.
[22:56:23] <APic> ,s/sorry/Sorry/
[22:56:34] <candide> Aâ€‹Pic, It's okay.
[22:56:48] <APic> candide: Uhmkay.
[22:57:28] <nomagno> Uh what
[22:57:38] <nomagno> candide: reveal yourself!
[22:59:02] <sham1> I wonder if candide is the one passing the turing test or you two are failing it
[22:59:44] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:59:47] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[23:01:55] *** Joins: RAMIII (~RAMIII@2601:6c1:4000:7a40:bad0:4bc9:ae8b:e4f1)
[23:02:14] <nomagno> ,cc printf("I am not a bot, fellow Homo Sapiens dumb monkey thingies\n");
[23:02:17] <candide> nomagno: I am not a bot, fellow Homo Sapiens dumb monkey thingies
[23:04:05] *** Joins: ferdna (~ferdna@user/ferdna)
[23:04:37] <APic> sham1: I only know that candide is better than its Creator
[23:04:44] *** Parts: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net) (Leaving)
[23:06:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[23:06:44] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[23:08:00] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[23:08:24] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[23:09:51] *** Quits: RAMIII (~RAMIII@2601:6c1:4000:7a40:bad0:4bc9:ae8b:e4f1) (Quit: WeeChat 2.8)
[23:09:53] *** Joins: Nutte35 (~Nutte@202.153.81.148)
[23:11:52] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:12:12] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[23:13:04] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[23:13:18] *** Joins: smoke (~smoke@user/smoke)
[23:13:30] *** Quits: Nutte35 (~Nutte@202.153.81.148) (Client Quit)
[23:13:47] *** Joins: Nutte35 (~Nutte@202.153.81.148)
[23:14:21] *** Joins: hlauk (~hlauk@176.33.97.244)
[23:15:46] *** _nuxil_ is now known as nuxil
[23:16:24] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[23:20:47] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:21:02] *** Quits: Nutte35 (~Nutte@202.153.81.148) (Ping timeout: 240 seconds)
[23:21:45] *** Joins: Nutte35 (~Nutte@202.153.81.63)
[23:21:57] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:22:20] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[23:23:51] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[23:25:23] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[23:28:04] *** Quits: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net) (Quit: WeeChat 3.3)
[23:28:39] *** Joins: stonkey2 (~stonkey@user/stonkey)
[23:29:06] <Amun-Ra> to the contrary
[23:29:20] *** Joins: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net)
[23:29:36] *** bedouin_ is now known as de
[23:29:42] <APic> In _Your_ personal Perspective.
[23:29:45] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[23:29:47] *** de is now known as megeve
[23:30:21] <KillerWasp> mmmm... wikipedia bragging about wikipedia. Nobody can ban him for self-advertising anymore.
[23:30:32] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[23:31:59] <APic> *shrug*
[23:32:25] <APic> KillerWasp: Please move that Conversation over to #c-offtopic
[23:33:30] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:35:10] *** Quits: Nixkernal (~Nixkernal@2a02:1210:2e52:8b00:39ef:4f8c:43c7:e976) (Quit: Leaving)
[23:37:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:39:27] *** Quits: hlauk (~hlauk@176.33.97.244) (Quit: Leaving)
[23:40:45] *** Joins: gaude (~gaude@114-39-142-46.pool.kielnet.net)
[23:41:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[23:45:02] *** Quits: kdc (~kdc@196.211.197.178) (Quit: Leaving)
[23:46:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:46:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:46:14] *** Joins: wroathe (~wroathe@user/wroathe)
[23:48:56] *** Joins: stonkey (~stonkey@user/stonkey)
[23:50:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:50:55] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[23:52:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:52:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:54:32] *** Quits: mahmutov (~mahmutov@37.155.52.244) (Ping timeout: 240 seconds)
[23:54:40] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[23:56:24] <Amun-Ra> APic: same as in *your* personal perspective
[23:56:29] <APic> Ok
[23:56:32] <Amun-Ra> Â¯\(ãƒ„)/Â¯ï»¿
[23:56:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:56:40] <APic> May i still capitalize You in here?
[23:57:05] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:57:31] <Amun-Ra> you haven't even ask what my pronouns are
[23:57:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Ping timeout: 250 seconds)
[23:57:46] <Amun-Ra> ed*
[23:58:32] <APic> Good
[23:58:34] <APic> So i will
[23:58:35] <APic> ;=P
[23:58:56] <Amun-Ra> ;>
[23:59:07] <APic> ðŸ˜¸
[23:59:08] <APic> *purrrrrr*
[23:59:35] *** Joins: skapata (~Skapata@user/skapata)
[23:59:36] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[23:59:44] *** Joins: teut (~teut@2401:4900:1c68:6b85:8d9c:5c88:1fa7:34f3)
