[00:00:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:00:17] *** Quits: cnihelton (~cnihelton@2804:431:c7f1:71ba:2ce4:3fa:6eb1:ed9d) (Quit: cnihelton)
[00:00:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[00:00:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:01:27] <anyone> 1.0e12 is quite a lot
[00:01:55] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:01:56] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:02:20] <anyone> like, 17 terabytes if one represents each address in the usual form of 0xabababababababab
[00:02:42] <ville> vin: you can always just grab an array of bytes?
[00:03:55] <vin> ville: I was thinking the same, but wondered if a cpp feature would make it easier
[00:05:14] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:08:04] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:09:49] *** Joins: xkuru (xkuru@user/xkuru)
[00:10:14] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:10:14] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:10:25] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:10:28] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:11:08] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[00:11:39] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:12:07] *** Joins: undephin3d (~undephin3@158.181.72.102)
[00:13:24] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:14:32] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:14:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:15:24] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:16:24] <kalven> vin: with a non-standard attribute: https://gcc.godbolt.org/z/3Yf3K1qhz
[00:16:44] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:18:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:22:36] *** Joins: badone (~badone@209.132.189.152)
[00:24:31] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:28:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:29:16] *** Joins: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy)
[00:29:42] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:29:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:31:49] *** Joins: Viewday115 (~Viewday@user/viewday)
[00:36:23] *** Quits: z3t0_alt (~z3t0@146.71.14.98) (Quit: Connection closed)
[00:38:25] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[00:38:36] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[00:40:37] *** Quits: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy) (Quit: Leaving)
[00:42:36] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[00:46:43] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:46:43] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:46:56] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:46:57] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[00:47:05] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[00:47:06] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:47:38] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:47:58] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:48:17] *** Quits: ville (~ville@user/ville) (Quit: ville)
[00:48:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:49:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:50:51] *** Quits: nq (~nq@2a02:2f08:e015:a900:cafd:3575:1a3d:974) (Ping timeout: 252 seconds)
[00:51:05] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d0e9:aad1:55a7:81ee)
[00:52:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[00:54:14] *** Joins: wakeup (~wakeup@user/wakeup)
[00:54:24] <AliceMeows> Could std::formatter be specialized for move only types?
[00:57:38] *** Joins: ville (~ville@user/ville)
[00:57:40] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[00:59:03] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:01:04] *** Joins: cation21 (cation@user/cation)
[01:01:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:01:48] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:02:29] *** Quits: Guest9 (~Guest9@cpe-174-102-106-83.columbus.res.rr.com) (Ping timeout: 256 seconds)
[01:04:26] *** cation21 is now known as cation
[01:07:43] *** Joins: xkuru (~xkuru@user/xkuru)
[01:08:20] <vin> kalven: so I basically did this https://godbolt.org/z/6P5W3zqsa
[01:09:11] *** Joins: x_kuru (~xkuru@user/xkuru)
[01:09:20] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[01:10:06] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[01:10:06] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:11:10] *** Joins: cation21 (cation@user/cation)
[01:11:32] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:12:41] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:12:47] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[01:13:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:14:13] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[01:14:29] *** cation21 is now known as cation
[01:15:05] *** Joins: xkuru (~xkuru@user/xkuru)
[01:17:52] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:18:37] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:19:48] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[01:22:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:26:32] *** Joins: ski (~ski@remote12.chalmers.se)
[01:29:52] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:30:32] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[01:30:56] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:34:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:36:02] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:40:58] *** Quits: magla (~gelignite@d5362120.access.ecotel.net) (Quit: Stay safe!)
[01:40:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:12] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Quit: Client closed)
[01:41:39] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:43:36] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:43:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:44:00] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:44:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:44:05] *** ChanServ sets mode: +v npaperbot
[01:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[01:45:26] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:45:53] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:46:02] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:48:03] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:48:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[01:48:36] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:49:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:49:41] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:49:50] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:51:39] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:51:41] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Write error: Broken pipe)
[01:51:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:52:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[01:52:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:56:11] *** Quits: malloy (~jimery@120.235.172.170) (Quit: WeeChat 3.0)
[01:58:08] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[02:06:18] *** Joins: x_kuru (xkuru@user/xkuru)
[02:07:12] *** Joins: x_kuru_ (xkuru@user/xkuru)
[02:08:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:10:03] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[02:10:32] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:11:07] *** Joins: xkuru (xkuru@user/xkuru)
[02:11:32] *** Quits: x_kuru_ (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:12:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:14:08] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[02:15:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:16:29] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:17:52] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[02:18:59] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:20:53] <Ali_A> So, I am trying to implement my own allocator, on top of Windows VirtualAlloc, I want to implement Arena Allocator and if possible Pool allocators, any ideas where can I read/watch/learn about those two? (or any other common type of memory allocators for game engines) right now, I am allocator and deallocating as I need to but that is very
[02:20:53] <Ali_A> wasteful, I want to allocate 1GB or so at the program start and just implement my own allocator on top it
[02:20:54] <Ali_A> thanks!
[02:24:22] *** ik is now known as kleiner
[02:27:42] *** Joins: galik (~galik@217.138.195.27)
[02:27:59] *** Quits: galik (~galik@217.138.195.27) (Client Quit)
[02:28:43] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:32:06] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Remote host closed the connection)
[02:32:57] *** Quits: pizdets (~pizdets@183.182.115.244) (Ping timeout: 240 seconds)
[02:33:28] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[02:33:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.188)
[02:36:12] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:38:02] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 240 seconds)
[02:38:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[02:39:05] *** Joins: Betal (~Betal@user/betal)
[02:39:41] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:39:54] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:41:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:42:05] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:44:44] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[02:48:01] *** Quits: tapeworm (~tapeworm@188.168.50.119) (Quit: Leaving)
[02:48:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[02:48:25] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[02:48:38] *** Quits: clime (~clime@37-48-56-199.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[02:49:40] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:52:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:54:27] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:55:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:58:37] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[02:59:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:04:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:07:31] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[03:10:33] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d0e9:aad1:55a7:81ee) (Ping timeout: 252 seconds)
[03:11:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:13:22] <evangeline> Is there anyway to determine if the type inside template is a fundamental type and use sizeof(T) for such a type, otherwise ise T::GetSize() : https://godbolt.org/z/d185h5KcT (maybe with enable_if)?
[03:13:54] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[03:15:19] <kalven> evangeline: slap a `constexpr` after the `if` on line 21
[03:15:22] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:16:34] <ville> (and yes you could have also involved sfinae for no reason to solve it)
[03:17:15] <evangeline> kalven, thank you that works in C++17 ; how can I do it in C++14 (just interested, since some modules are still C++14)
[03:17:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:18:15] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:18:38] <kalven> you can use enable_if for something like that
[03:20:17] *** Quits: proller (~p@2a02:6b8:b081:8803::1:2f) (Ping timeout: 240 seconds)
[03:21:10] <evangeline> kalven, do I need to make a class template specialization or can I use enable_if inside a single class template
[03:24:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:25:07] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:26:24] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf)
[03:26:24] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf) (Changing host)
[03:26:24] *** Joins: skapata (~Skapata@user/skapata)
[03:29:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:30:27] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:34:06] *** Joins: proller (~p@80.240.216.69)
[03:34:27] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[03:40:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:41:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:41:43] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 256 seconds)
[03:45:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[03:45:57] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:50:13] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:52:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[03:52:54] *** Joins: slidercrank (~slidercra@user/slidercrank)
[03:54:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:55:41] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[03:59:16] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[03:59:48] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:00:11] *** Joins: proller (~p@2a02:6b8:b081:b503::1:24)
[04:01:04] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[04:09:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:10:23] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:08] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:16:40] *** Joins: meandrain (~meandrain@2a02:2f0e:f70f:6e00:4045:d48f:1f91:ed31)
[04:18:34] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:21:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:23:24] *** Quits: undephin3d (~undephin3@158.181.72.102) (Ping timeout: 240 seconds)
[04:24:28] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[04:25:37] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 240 seconds)
[04:26:02] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[04:28:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:31:10] *** Quits: Gamah (~quassel@gamah.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:48] *** Joins: Gamah (~quassel@gamah.net)
[04:32:20] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:32:53] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[04:33:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:34:47] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[04:45:45] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:46:05] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:48:36] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:50:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:51:59] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:53:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:54:17] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Remote host closed the connection)
[04:55:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:56:17] *** Joins: malloy (~jimery@120.235.172.170)
[04:59:04] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:03:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:08:44] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[05:13:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:14:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:19:40] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[05:20:43] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:21:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[05:21:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:23:50] *** Joins: irf21k (~irf21k@2401:4900:336e:1da1:1:0:4fb8:9ff0)
[05:28:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[05:28:53] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Read error: Connection reset by peer)
[05:28:59] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:f427:a52:115a:e946:8de6)
[05:29:11] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[05:29:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:31:02] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a66009957729108fab4e2.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[05:31:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[05:33:40] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:35:02] *** Joins: bindu_ (~bindu@user/bindu)
[05:35:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[05:36:48] *** bindu_ is now known as bindu
[05:38:25] *** Joins: r0c1n4nt3_ (~r0c1n4nt3@177.96.8.114)
[05:38:38] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Remote host closed the connection)
[05:41:12] *** Quits: r0c1n4nt3_ (~r0c1n4nt3@177.96.8.114) (Quit: Leaving)
[05:43:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:44:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:44:05] *** ChanServ sets mode: +v npaperbot
[05:45:22] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[05:45:32] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:45:56] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[05:46:12] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[05:48:52] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[05:50:33] *** Joins: peacefulman (~prich@107-190-110-80.cpe.teksavvy.com)
[05:50:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:50:51] *** Joins: zer0x (~zer0x@58.186.50.2)
[05:53:47] *** Joins: Rynn (~rynn@216.30.158.198)
[05:53:54] <bpalmer> Responding to my own question about sfinae, while I still am struggling to craft it myself in C++17, it looks like C++20 makes checking for things like having a member variable/type/function straightforward with requires expressions.
[05:54:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:54:23] <bpalmer> without actually having to delve into concepts
[05:56:58] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:59:10] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[05:59:31] *** Quits: pizdets (~pizdets@183.182.110.188) (Ping timeout: 265 seconds)
[06:00:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:01:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:04:39] *** Joins: pizdets (~pizdets@183.182.110.150)
[06:04:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:06:05] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:07:11] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Remote host closed the connection)
[06:09:20] *** Joins: Inline__ (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[06:09:36] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:f427:a52:115a:e946:8de6) (Quit: Leaving)
[06:10:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:795e:a75c:8fe1:c5f2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:11:52] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[06:12:13] *** Quits: Inline (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:12:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:14:36] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:16:57] *** Quits: peacefulman (~prich@107-190-110-80.cpe.teksavvy.com) (Quit: leaving)
[06:17:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:17:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Read error: Connection reset by peer)
[06:17:43] *** Joins: ed (~ed@mlk-174-186.tm.net.my)
[06:22:13] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[06:22:57] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[06:25:46] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[06:29:38] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:30:02] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:35:18] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:37:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:40:37] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:43:24] <hnOsmium0001[m]> tip if you want to use concepts and is on windows: upgrade to VS 2022, 2019 claims to be c++20 "feature complete", but lacks quite a bit of things such as using `requires() {}` outside of concept defintions
[06:45:09] *** Joins: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b)
[06:45:56] *** Joins: smeso (~smeso@user/smeso)
[06:51:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:51:26] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:53:23] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:54:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:54:57] *** Joins: abode (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5)
[07:00:52] *** Joins: W (~W@90.250.59.88)
[07:01:14] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:02:00] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 268 seconds)
[07:02:39] <W> if I have a function void f(&T x); and I have a T x that I wish to be copied into the input of f then how do I do it without declaring T y = x; f(y); Or is that the only way to do it?
[07:07:23] *** Joins: millido (~millido@84.210.150.128)
[07:12:04] <ncwbqcfe> &T type is not possible
[07:16:13] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[07:17:34] <W> I meant a generic type.
[07:17:40] <W> so T = int or something.
[07:18:41] <ncwbqcfe> I meant you got lvalue ref syntax backwards
[07:18:55] <ncwbqcfe> there's T&, not &T
[07:19:23] <ncwbqcfe> in your f function declaration
[07:19:31] <Gamah> why pass by reference if you want a copy?
[07:20:07] <ncwbqcfe> because the function is just like that, and they just wish to know how
[07:20:22] <Gamah> T func(T x){return x}; T newT func(oldT);
[07:20:27] <ncwbqcfe> ...
[07:20:53] <ncwbqcfe> check the preconditions
[07:20:55] <W> Ah my bad, and yes: I'm mostly curious.
[07:21:31] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[07:21:34] <ncwbqcfe> if I have void f(T& x), then how to pass with a copy but without an assignment.
[07:21:41] <ncwbqcfe> it's a pretty valid question
[07:21:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:22:21] <bpalmer> Technically, f(*(new T(x))) , but it's pretty useless.
[07:22:23] <ncwbqcfe> assignment declaration*
[07:22:39] <bpalmer> (and, of course, it leaks)
[07:24:28] <bpalmer> oh, of course, f(*(std::make_unique<T>(x).get())); should be safe.
[07:25:25] <ncwbqcfe> {int x = 42; f(lvalue(int{x}));} template<class T> void f(T &x) {} template <typename T> constexpr T &lvalue(T &&r) noexcept { return r; }
[07:25:25] <geordi>  
[07:28:45] <W> thanks, oh and one more question. Is it safe to store std::string::iterators in a class?
[07:29:18] <W> Or should I just store positions, if so what is the justification?
[07:29:37] <W> s/if so/if not
[07:30:13] <bpalmer> W: you have to be careful about anything that might invalidate the iterators.
[07:31:56] <bpalmer> accordingly, it's far safer to store positions.
[07:37:31] *** Joins: Himim (~alex@197.241.9.227)
[07:40:33] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[07:42:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:47:09] *** Joins: lainon_ (~lainon@2601:7c0:c500:4d20::e723)
[07:47:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:51:49] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:53:57] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:55:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:56:02] <hachikuji[m]> <W> "thanks, oh and one more question..." <- it's completely fine, as long as you never ever for any reason touch the original object with any mutating operation for any reason whatsoever,   it's probably best to think again if you really need to do this
[08:02:16] <xisop> what issues do c++ 20 concepts solve?
[08:02:58] *** Joins: callq (~callq@157.41.137.81)
[08:03:17] *** Joins: frost (~frost@user/frost)
[08:04:18] <W> thanks, that helped.
[08:04:30] <W> both answers that is.
[08:05:51] <ncwbqcfe> xisop: less SFINAE hacks, better compiler error messages
[08:06:30] <xisop> ah, so less template code to write (potentially)?
[08:06:46] <ncwbqcfe> yep
[08:07:19] <ncwbqcfe> it's much more intuitive to deal with than SFINAE
[08:08:17] <xisop> the template system is a functional language right? so would concepts be considered guards?
[08:08:28] *** Quits: Himim (~alex@197.241.9.227) (Quit: Leaving)
[08:08:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:09:08] <ncwbqcfe> more like typeclasses?
[08:09:20] <ncwbqcfe> what's is "guards" in FP? I ignore.
[08:10:41] <hachikuji[m]> reminds me of interfaces, but the concepts can require and "subclass", for a lack of a better word,  other concepts which is nice
[08:12:14] <ncwbqcfe> FP wording in this sense is generally "typeclasses" rather than "interfaces" which is well known in OP languages like java, c#, etc
[08:14:05] <ncwbqcfe> and, interfaces in c++ is not concepts, it's more associated with dynamic polymorphism, through abstract classes.
[08:15:18] <abode> Hello guys, every PCB I did to this date is a 2-layers PCB and I want to do more
[08:15:26] <abode> any resources?
[08:15:43] <ncwbqcfe> !topic
[08:15:45] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[08:15:54] <abode> oh sorry
[08:16:03] <abode> wrong room
[08:16:04] <abode> lol
[08:16:09] <ncwbqcfe> indeed
[08:16:18] <abode> hmmm, thanks
[08:22:43] *** Quits: abode (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[08:27:14] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:29:32] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[08:31:03] *** Quits: sreve_ (~quassel@p549d70f6.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:31:14] *** Quits: lainon_ (~lainon@2601:7c0:c500:4d20::e723) (Quit: Leaving)
[08:31:15] *** Joins: sreve (~quassel@p4ff44633.dip0.t-ipconnect.de)
[08:31:57] *** Joins: emerent_ (~quassel@p200300cd5743c3ebba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:57] *** Quits: emerent (~quassel@p200300cd5743c36fba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (zinc.libera.chat (Nickname regained by services)))
[08:31:57] *** emerent_ is now known as emerent
[08:32:09] *** Joins: CCCG2022 (~dell@120.245.30.75)
[08:39:57] *** Quits: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b) (Quit: Leaving)
[08:43:46] *** Joins: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[08:47:25] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[08:48:43] <W> If I pass f(std::make_shared<T>()), is it safe?
[08:52:15] <bpalmer> yes. the temporary object exists up until the end of the full expression in which they are created (in this case, the function call)
[08:52:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:52:47] <W> thank you very much
[08:53:12] *** Quits: martiert_work (~martiert_@2001:420:44c1:2617:cbd6:972c:422:e9e3) (Ping timeout: 252 seconds)
[08:53:36] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[08:53:36] *** Joins: martiert_work (~martiert_@2001:420:44c1:2617:cbd6:972c:422:e9e3)
[08:56:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[09:01:38] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[09:08:03] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[09:08:52] *** gentooclimax is now known as climax
[09:14:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:16:15] *** climax is now known as gentooclimax
[09:18:31] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[09:21:02] *** Joins: zer0x (~zer0x@58.186.50.2)
[09:23:21] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[09:23:35] *** Quits: W (~W@90.250.59.88) (Quit: leaving)
[09:23:40] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:26:16] *** gentooclimax is now known as climax
[09:27:56] *** climax is now known as gentooclimax
[09:32:15] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[09:35:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:36:22] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:37:56] *** gentooclimax is now known as climax
[09:43:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:06] *** ChanServ sets mode: +v npaperbot
[09:47:16] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:50:36] *** peeps[zen] is now known as peepsalot
[09:53:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:53:18] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[09:56:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:56:49] *** Quits: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[10:08:00] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[10:12:33] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:15:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:18:02] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[10:24:05] *** Joins: xkuru (~xkuru@user/xkuru)
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:31:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[10:32:53] *** Joins: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4)
[10:34:10] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:36:04] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:36:17] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[10:36:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[10:38:13] *** Joins: Guest87 (~Guest87@193.85.203.185)
[10:38:18] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.153)
[10:39:34] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[10:46:21] *** Joins: Atque (~Atque@user/atque)
[10:50:37] *** oliver1 is now known as cromwell
[10:50:49] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:51:26] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[10:52:33] <Guest87> Hello, everyone, I am having issues with std::vector.push_back() somehow overwriting memory, specifically on line 100, https://wandbox.org/permlink/0WpGnehJgiKWVKtx
[10:52:51] <Guest87> I do apologize for the quality of the code in advance, but I would like to get the basics running before cleaning it up and optimizing it.
[10:53:08] <Guest87> Also, on my phone it runs without issue, but on my Windows computer it crashes with a segmentation fault.
[10:53:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:54:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.153) (Ping timeout: 240 seconds)
[10:54:42] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:54:46] <TinoDidriksen> .push_back() copies the inserted object, and it may reallocate the whole vector.
[10:54:58] <TinoDidriksen> Run your code in a debugger, see what happens.
[10:57:18] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Quit: Client closed)
[10:57:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:57:38] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[10:57:56] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:04] *** Joins: Kerr_ (~quassel@2601:602:ce80:df10::b76e)
[10:58:04] <Guest87> TinoDikriksen: So the vector reallocates, but because we're still running code that's from before when the vector reallocated, this points to an invalid location?
[10:58:27] *** Quits: Kerr_ (~quassel@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:29] <TinoDidriksen> Potentially. Again, use a debugger to see exactly what's going on.
[10:58:45] *** Joins: Kerr (~quassel@2601:602:ce80:df10::b76e)
[10:58:51] *** Quits: cromwell (~oliver@thunix.net) (Quit: WeeChat 3.4)
[10:59:05] *** Joins: oliver1 (oliver@thunix.net)
[10:59:22] <Guest87> I am using a debugger and the `this` variable's value changes when the push_back is called, so the vector reallocates, `this` points to an invalid location, which would explain why `grid` and `size` also show garbage values.
[10:59:25] *** oliver1 is now known as cromwell
[10:59:31] <TinoDidriksen> Yup
[10:59:48] <Guest87> Thank you for the help, guess I'll temporarily solve it by adding to the vector at the end.
[11:00:25] *** climax is now known as gentooclimax
[11:00:59] *** Joins: andreasbuhr (~quassel@p549db611.dip0.t-ipconnect.de)
[11:07:28] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:07:47] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.153)
[11:07:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:09:28] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:09:32] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:10:02] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[11:12:20] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:12:53] *** Joins: xkuru (~xkuru@user/xkuru)
[11:13:08] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:13:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:15:06] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:15:30] *** Quits: Guest87 (~Guest87@193.85.203.185) (Quit: Connection closed)
[11:15:57] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 240 seconds)
[11:17:51] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:18:26] *** Joins: xkuru (~xkuru@user/xkuru)
[11:18:57] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:19:43] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:20:23] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[11:20:55] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:23:26] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:24:18] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:25:12] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[11:25:36] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:25:53] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[11:29:05] *** Joins: zer0x (~zer0x@58.186.50.2)
[11:30:20] *** Joins: foul_owl (~kerry@23.82.193.89)
[11:36:55] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[11:38:23] <fluter> hi, if exceptions is disabled, is there possible that new operator will return nullptr when allocation failed?
[11:38:35] <fluter> which is the same behavior as malloc,
[11:38:44] <fluter> or it would terminate the program?
[11:39:51] <TinoDidriksen> Anything is possible in non-standard code. If you really want null returned, there is a different new(std::nothrow) for that.
[11:40:17] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:41:21] <fluter> TinoDidriksen: but it seems only possible with operator new? https://en.cppreference.com/w/cpp/memory/new/operator_new
[11:41:48] <fluter> so i need to do void* p = ::operator new(1000, std::nothrow); sth like this?
[11:41:48] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:41:51] <hachikuji[m]> fluter: instead of guessing, you should use `new(std::nothrow)`, which is guaranteed to return null on failure
[11:42:06] <fluter> void *p = new (1000, std::nothrow); <--- is this ok?
[11:42:16] <TinoDidriksen> { auto x = new(nothrow) int[500]; }
[11:42:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:42:17] <geordi>  
[11:42:28] <fluter> hackkitten: is that a function call or a keyword call?
[11:42:37] <fluter> ah i see, thanks TinoDidriksen :P
[11:44:48] *** Joins: epony (epony@user/epony)
[11:45:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[11:48:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6457:bfc9:b18d:cf5)
[11:48:53] <fluter> is this the new (placement-params) syntax?
[11:49:04] <fluter> why does it not mentioned here: https://en.cppreference.com/w/cpp/language/new
[11:49:22] <TinoDidriksen> It is, briefly.
[11:50:46] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:51:25] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:51:32] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[11:54:13] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:54:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:54:48] *** Joins: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b)
[11:55:46] *** Joins: nb-ben (~ben@user/nb-ben)
[11:55:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed8e:eff0:febb:d703)
[11:56:15] <nb-ben> is it guaranteed that objects created with `new` are zeroed?
[11:57:14] <nb-ben> i.e. if I have a class with a member int, and then I instantiate it using `new`, without initializing that member in the constructor, am I guaranteed that the value of this member will be 0?
[11:58:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:58:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:00:47] *** Joins: Miyu (~hackkitte@94.31.104.136)
[12:01:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[12:02:44] <fluter> nb-ben: i don't think so, if the member is not initialized in the ctor, it's value is undetermined.
[12:02:48] <fluter> or undefined.
[12:03:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:03:22] <nb-ben> upon reading a bit more about `new` it seems like this is at the discretion of the underlying allocator
[12:03:28] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 272 seconds)
[12:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:06:59] <fluter> ok
[12:07:11] <fluter> how can you specify the allocator to be used when using new?
[12:07:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 250 seconds)
[12:08:34] <nb-ben> that's what I'm looking up now
[12:08:49] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:48] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[12:10:07] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[12:17:30] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:17:33] *** JohnMS_AWAY is now known as JohnMS_WORK
[12:18:03] *** Miyu is now known as hackkitten
[12:30:34] *** Joins: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[12:36:20] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[12:37:18] *** gentooclimax is now known as climax
[12:37:21] *** Joins: msk (~msk@103.213.213.65)
[12:39:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:39:21] *** Quits: [R] (~rs@genoce.org) (Read error: Connection reset by peer)
[12:40:04] <ville> fluter: consult your compiler documentation to know what happens when you use its features such as turning off exceptioons. or ask -general. it's not a c++ issue
[12:40:36] <fluter> ville: hmm, why is this not a standard defined behavior?
[12:40:47] <fluter> i think compiler should follow the standard
[12:41:36] *** Joins: vitimiti (~Celtor@2a01:4c8:c8d:8627:d206:a343:5362:ba3d)
[12:41:44] *** Joins: malloy (~jimery@120.235.172.170)
[12:43:53] <ville> fluter: constructors can't fail. so any standard library type that may do something in its ctor that could fail with an exception should then do what?
[12:44:52] <ville> fluter: for example any of std::vector's ctors that may allocate memory. with exceptions they throw of course, what happens when you turn off exceptions?
[12:44:54] <fluter> ville: throw when exception is enabled, and terminate when exception is disabled
[12:45:49] <ville> fluter: it would "double" the implementation cost and bifurcate the language
[12:45:58] <fluter> ville: why?
[12:46:27] <ville> now you've 50% of idiots using exception and 50% of idiots not using exceptions
[12:46:59] <fluter> hmm
[12:47:11] <fluter> i mean, what else can be done when exception is disabled, other than terminate
[12:47:16] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[12:48:04] <ville> they could have chosen to leave every object in an undefined state, in a zombie state that may be detected but it's upto the user, or implement every member operation that checks it and becomes a noop on a zombie
[12:48:11] *** climax is now known as gentooclimax
[12:48:25] <ville> and more option would have been tries to recover from the zombie state if possible
[12:48:33] <fluter> lol
[12:48:50] *** Joins: tapeworm (~tapeworm@188.168.50.119)
[12:48:58] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:49:06] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:49:15] <ville> and yes you may configure various compilers to try to follow the standard. _none_ of them do out of the box. and even if you pass all the flags you can muster you've sill bugs that make them not follow the standard
[12:49:17] <ville> at least
[12:50:27] <ville> nb-ben: it is not guaranteed. as always c++ makes it difficult to reason about this kind of thing locally. it might be
[12:51:16] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[12:51:37] <ville> nb-ben: so don't rely on things like that is probably the answer. auto x = new aa; vs auto x = new aa{}; at least tries to be somewhat explicit about what's going on, but even then you can't know.
[12:52:08] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[12:53:22] *** Joins: Miyu (~hackkitte@94.31.104.136)
[12:54:06] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 252 seconds)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:55:20] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:56:04] *** Miyu is now known as hackkitten
[12:56:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 250 seconds)
[12:57:46] *** Joins: undephin3d (~undephin3@158.181.75.126)
[12:58:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:00:38] <ville> fluter: if you intend to code flavour of c++ with exceptions turned off, then i suggest you limit your self to the c-part of the standard library pretty much, and write your own versions of everything else or use someone else's
[13:00:58] <fluter> ville: not even the containers?
[13:01:21] <ville> especially not those. they indicate all their errors with exceptions
[13:01:27] <fluter> ville: i think pretty much of our code base compiled by exception off
[13:01:34] <fluter> hmm :(
[13:01:44] <fluter> looks there could be big problems
[13:03:00] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:04:34] <ville> well you could write non-member functions that wrap every operation on a container like: error_code push_back(std::vector<T>& xs, T const& x) { try { xs.push_back(x); } catch(...) { return error_code{}; } }, but then you still have the constructor problem
[13:06:05] <ville> and then have to invent some measures to guarantee none ever calls the member versions that aren't wrapped
[13:07:10] <ville> life is just easier if you just drink the kool-aid, stop fighting the language and use exceptions
[13:11:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:37] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 268 seconds)
[13:21:39] <nb-ben> ville: I'm just trying to argue for that some variable needs to be initialized in some DJI library
[13:21:49] *** gentooclimax is now known as climax
[13:22:18] <nb-ben> ville: I can see that number initialized to random value in my code that runs in a JNI environment (java virtual machine), but can't reproduce this in plain C++ code
[13:22:28] *** Joins: zer0x (~zer0x@58.186.50.2)
[13:22:58] <nb-ben> so I get a segmentation fault every now and then in my application, but can't make it happen in their example code
[13:23:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[13:23:55] <nb-ben> sorry, I expressed this poorly
[13:26:18] *** climax is now known as gentooclimax
[13:28:06] <ville> nb-ben: yes everything* should be initialized before you read from it. *) even that is not true
[13:28:57] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:29:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[13:29:36] <ville> nb-ben: the point is that c++'s initialization rules are very complex. they basically prevent you from reasoning anything locally by looking at a single line: int x;
[13:29:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:30:37] <ville> nb-ben: so as a defensive measure to hope for defined behaviour in code you write i can suggest few things, but you need everyone to buy into the idea
[13:35:03] <ville> have you tried sanitizer build or valgrind? they're usually pretty good at catching uninitialized reads
[13:36:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:08] *** ChanServ sets mode: +v npaperbot
[13:44:45] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[13:45:00] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:46:04] *** Joins: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr)
[13:47:36] *** Quits: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr) (Client Quit)
[13:48:41] <nb-ben> it's not my library
[13:49:04] <nb-ben> I forked and fixed my own build, but I want them to merge it in
[13:50:31] <fluter> sorry a different question, is it possible to have default parameter after parameter pack? i'm seeing template argument deduction/substitution failed error in this case
[13:50:31] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[13:50:32] <nb-ben> I'll probably rewrite the whole thing in Java at some point
[13:50:54] *** Joins: ville (~ville@user/ville)
[13:51:14] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:51:30] <fluter> the function is like : template<typename First, typename... Args> void fun(First&& first, Args... args, allocator * allocator = nullptr)
[13:51:45] <fluter> fun(foo, bar) fails to compile
[13:51:59] <fluter> is this an invalid declaration?
[13:53:39] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[13:54:13] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:56:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:57:02] <ville> !testcase
[13:57:03] <nolyc> A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[13:57:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 260 seconds)
[13:57:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:59:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:00:14] <fluter> ville: https://www.godbolt.org/z/3aT6na3Gf
[14:01:31] *** Joins: unknow (~i.am@user/marlboro)
[14:02:41] *** Joins: zibolo (~quassel@global-deiInside018.dei.polimi.it)
[14:02:51] <nq> "Raw<Foo, Bar>(Foo {}, Bar {});" ?
[14:03:48] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:04:39] <fluter> nq: i wanna template argument to be implicit
[14:05:11] <nq> then probably something like "using Raw_?? = Raw<Foo, Bar>;"
[14:05:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:06:33] <nq> I suppose you actually want something that automatically specializes your template list based on your (function call) parameter list
[14:07:39] <fluter> yes
[14:07:49] <fluter> but there could be a lot of different Raw invokes
[14:07:55] <nq> so not just an alias for template specialziation, which you'd have to manually write
[14:08:06] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 250 seconds)
[14:09:59] <zibolo> Hi everyone! Will the following code wait until the mutex is released or it may be optimized out? { std::lock_guard(my_mtx); } . Also the fact that I want to do this makes me feel I'm doing somethink logically wrong, but can't understand what
[14:10:22] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com)
[14:11:03] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6457:bfc9:b18d:cf5) (Ping timeout: 256 seconds)
[14:11:37] <mitch0> zibolo: you probably want a std::condition_variable instead
[14:12:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:13:38] *** gentooclimax is now known as climax
[14:17:26] <zibolo> mitch0: I know about condition variable, but can't find a smart way to use them in this case. From the previous code, I have the guarantee that if the mutex is not locked now, it will never be locked again. If it is currently locked, when it will be unlocked it will never be locked again. Saying this implies that I can just wait until the mutex is released (or no wait at all if the mutex is already not locked) without the use of a CV
[14:18:02] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:18:55] <zibolo> Moreover, if I use a condition variable + a boolean variable "isLocked" as a predicate to wait on, the value of "isLocked" will always be false when checked by cv.wait() (since the mutex shoudl be unlocked when the prediacte is checked)
[14:24:13] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[14:24:58] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:26:22] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[14:28:51] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[14:30:00] *** Joins: aLeSD_ (~aLeSD@91.126.33.194)
[14:30:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 240 seconds)
[14:31:42] *** Joins: Himim (~alex@41.189.236.82)
[14:32:10] *** Quits: Himim (~alex@41.189.236.82) (Client Quit)
[14:33:14] <ville> fluter: as a side note perhaps don't want to default the allocator to anything. at least that's what i've discovered. if you're passing down allocators from the top through N-levels with a defaulted allocator argument it becomes annoyingly simple to break the chain and switch to whatever the default is
[14:38:43] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[14:42:33] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:47:36] *** Joins: wakeup (~wakeup@user/wakeup)
[14:48:05] *** GrecKo_ is now known as GrecKo
[14:48:12] *** Joins: Enitin (~Enitin@82.180.145.226)
[14:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:54:10] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:55:20] *** Joins: nightw0lf (~nightw0lf@77.125.126.151)
[14:56:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:57:11] *** Quits: vitimiti (~Celtor@2a01:4c8:c8d:8627:d206:a343:5362:ba3d) (Remote host closed the connection)
[14:58:34] *** Joins: vitimiti (~Celtor@2a01:4c8:c8d:8627:9f20:fc29:71af:2960)
[14:59:24] *** Quits: nightw0lf (~nightw0lf@77.125.126.151) (Client Quit)
[14:59:32] *** Joins: cK (~cK@77.125.126.151)
[14:59:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:00:20] *** Quits: cK (~cK@77.125.126.151) (Remote host closed the connection)
[15:02:28] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:04:31] *** Quits: osXnut (~osXnut@77.125.126.151) (Remote host closed the connection)
[15:04:34] *** Joins: Brainium (~brainium@user/brainium)
[15:04:48] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:06:15] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 256 seconds)
[15:15:12] *** osXnut is now known as osXnuts
[15:16:03] *** osXnuts is now known as osXnut
[15:16:27] *** Quits: osXnut (~osXnut@77.125.126.151) (Quit: leaving)
[15:17:17] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[15:18:55] *** Quits: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[15:20:02] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[15:26:00] *** Joins: cren (cren@tilde.team)
[15:26:17] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[15:28:50] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:29:11] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[15:30:10] *** Joins: Enitin (~Enitin@82.180.145.228)
[15:30:45] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[15:32:26] *** Joins: vitimiti_ (~Celtor@2a01:4c8:c8d:8627:665c:c4a2:cda9:6b00)
[15:34:01] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:34:17] *** Joins: furrymcgee (~devuan@cgn-213-196-210-225.nc.de)
[15:35:15] *** Quits: proller (~p@2a02:6b8:b081:b503::1:24) (Ping timeout: 252 seconds)
[15:35:17] *** Joins: vitimiti__ (~Celtor@2a01:4c8:c8d:8627:7004:f361:be86:ad28)
[15:36:49] <fluter> ok, i just found this: https://www.cppstories.com/2021/non-terminal-variadic-args/
[15:36:52] <fluter> looks interesting
[15:36:54] *** Quits: vitimiti (~Celtor@2a01:4c8:c8d:8627:9f20:fc29:71af:2960) (Ping timeout: 252 seconds)
[15:36:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[15:37:10] <fluter> esp. this one: 3. Deduction Guides
[15:38:32] <fluter> but it looks only support class template, not function template :(
[15:39:18] <PJBoy> deduction guides use function template deduction to deduce class template arguments
[15:39:39] *** Quits: vitimiti_ (~Celtor@2a01:4c8:c8d:8627:665c:c4a2:cda9:6b00) (Ping timeout: 252 seconds)
[15:39:51] <PJBoy> so it isn't something you want, it's something you don't realise you don't need
[15:41:20] *** Quits: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[15:41:49] <fluter> oh
[15:44:33] *** Joins: SorryBeauty (~SorryBeau@103.25.241.104)
[15:44:36] *** Quits: vitimiti__ (~Celtor@2a01:4c8:c8d:8627:7004:f361:be86:ad28) (Ping timeout: 252 seconds)
[15:45:11] <PJBoy> except now I'm confused about why that default argument stops function template argument deduction from working
[15:46:50] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[15:47:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:53:28] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[15:53:53] *** Joins: kevr (~kevr@user/kevr)
[15:56:39] *** Joins: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr)
[15:57:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:59:37] *** Joins: clime (~clime@37-48-56-199.nat.epc.tmcz.cz)
[16:01:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:03:30] *** Quits: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[16:03:45] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:15:53] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[16:17:29] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[16:18:28] *** Joins: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr)
[16:23:23] *** Quits: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr) (Max SendQ exceeded)
[16:25:54] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[16:27:42] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:37:16] *** Joins: constxd (~brad@142.134.78.128)
[16:39:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[16:43:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:44:01] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[16:45:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:46:33] *** Joins: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net)
[16:47:24] *** Joins: malloy (~jimery@120.235.172.170)
[16:50:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[16:51:52] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:51:58] *** Joins: darkbit (~db@136.158.8.67)
[16:54:25] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b461:63e9:52c:68dc)
[16:55:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:58:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:01:17] *** Joins: Alipha (~AliphaX@user/alipha)
[17:01:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:03:39] *** Joins: Rynn (~rynn@216.30.158.198)
[17:06:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:06:27] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b461:63e9:52c:68dc) (Remote host closed the connection)
[17:06:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[17:10:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:11:50] *** Quits: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[17:20:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[17:29:42] *** Joins: pulse (~pulse@user/pulse)
[17:30:10] *** Joins: wakeup (~wakeup@user/wakeup)
[17:31:40] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:32:30] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:39:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[17:41:33] *** Quits: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4) (Quit: Leaving)
[17:41:35] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:43:40] <acidtonic__> Any recommendations for state of the art with regards to management of large volume of both symmetric and asymmetric keys, expiry checking, strength checks, searching for bad/weak keys in the store, etc? Does this exist?
[17:43:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:03] <acidtonic__> Prefer C++ interface, figured maybe someone knows. Otherwise going to roll my own
[17:44:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:07] *** ChanServ sets mode: +v npaperbot
[17:48:56] *** Joins: tungki (~tungki@subs20-114-142-172-21.three.co.id)
[17:54:22] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[17:57:23] <TinoDidriksen> acidtonic__, none in Standard C++ - maybe ask #C++-general or #openssl or #wolfssl or even #crypto
[17:57:35] *** Joins: tungki60 (~tungki@subs21-114-142-173-48.three.co.id)
[17:58:39] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:58:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:59:39] *** Quits: tungki (~tungki@subs20-114-142-172-21.three.co.id) (Ping timeout: 256 seconds)
[18:01:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:02:58] *** Quits: callq (~callq@157.41.137.81) (Ping timeout: 250 seconds)
[18:13:54] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Quit: Konversation terminated!)
[18:14:17] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[18:15:31] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[18:15:45] *** Joins: rvalue (~rvalue@user/rvalue)
[18:19:02] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 240 seconds)
[18:20:43] *** Joins: mgaunard (~mgaunard@ec2-52-210-158-23.eu-west-1.compute.amazonaws.com)
[18:24:02] *** Quits: mgaunard (~mgaunard@ec2-52-210-158-23.eu-west-1.compute.amazonaws.com) (Client Quit)
[18:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:26:51] *** Quits: tungki60 (~tungki@subs21-114-142-173-48.three.co.id) (Ping timeout: 256 seconds)
[18:28:44] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[18:37:32] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[18:38:22] *** Joins: slavfox (~slavfox@93.158.232.111)
[18:39:28] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[18:43:26] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a)
[18:43:26] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a) (Changing host)
[18:43:26] *** Joins: skapata (~Skapata@user/skapata)
[18:45:16] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:45:24] *** Quits: irf21k (~irf21k@2401:4900:336e:1da1:1:0:4fb8:9ff0) (Ping timeout: 240 seconds)
[18:46:52] <fluter> hi, when is operator=(Foo&&) noexcept operator will called?
[18:47:02] <fluter> i have Foo f = std::move(bar);
[18:47:23] <fluter> this calls Foo(Foo&&) move ctro, not the assign operator,
[18:47:25] <fluter> why?
[18:47:44] <T`aZ> because that's init, not an assignement
[18:47:48] *** climax is now known as gentooclimax
[18:48:08] <fluter> oh
[18:48:10] <fluter> right
[18:49:27] <hachikuji[m]> <acidtonic__> "Any recommendations for state of..." <- Your best bet will be existing libraries that implement OpenPGP standard https://wiki.gnupg.org/OtherFreeSoftwareOpenPGP, very little to do with C++ as a whole and most if not all code will be C.
[18:49:37] <fluter> Foo f;  f = std::move(...); this will call the assignment operator
[18:49:39] <fluter> :D
[18:50:17] <hachikuji[m]> at the same time, it will call default init before it, which is usually not what you want
[18:50:30] <fluter> right
[18:50:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[18:50:39] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:50:41] <fluter> i just want to know the difference :D
[18:51:03] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 252 seconds)
[18:51:05] <anyone> subtract t
[18:51:25] *** slavfox_ is now known as slavfox
[18:51:35] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:52:46] <hachikuji[m]> fluter: the difference is that constructor is for init, while assignment is for moving and/or reusing existing objects
[18:52:47] <fluter> ?
[18:53:01] <fluter> hachikuji[m]: yep
[18:55:59] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 252 seconds)
[18:56:03] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:57:50] *** gentooclimax is now known as climax
[18:59:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:59:52] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:00:00] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:00:29] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:01:32] *** Joins: callq (~callq@2409:4062:4e9a:a9bd:d23:3204:52b:f841)
[19:02:22] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[19:02:46] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[19:02:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[19:03:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[19:03:32] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[19:03:50] *** Joins: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de)
[19:04:13] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[19:05:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[19:05:22] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[19:08:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:08:27] *** Joins: slavfox (~slavfox@93.158.232.111)
[19:11:03] *** Quits: SorryBeauty (~SorryBeau@103.25.241.104) (Ping timeout: 256 seconds)
[19:12:18] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:13:22] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[19:14:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:17:56] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 250 seconds)
[19:18:52] *** Joins: zen_coder (~zen_coder@ip5f5bf686.dynamic.kabel-deutschland.de)
[19:20:59] *** Joins: pulse (~pulse@user/pulse)
[19:22:35] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:22:55] *** Joins: bindu (~bindu@user/bindu)
[19:31:45] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 252 seconds)
[19:32:10] *** Quits: ed (~ed@mlk-174-186.tm.net.my) (Quit: Konversation terminated!)
[19:34:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[19:41:09] *** Joins: retux (~user@dyndsl-085-016-036-243.ewe-ip-backbone.de)
[19:42:57] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (Ping timeout: 240 seconds)
[19:44:35] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[19:44:46] *** Joins: wakeup (~wakeup@user/wakeup)
[19:45:11] <retux> I'm trying to link libpython statically. If I do, I get the following warnings: https://pastebin.com/pT7ALadF. Also, loading my Python module results in a segmentation fault. Has someone experience with this kind of issues?
[19:45:44] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:49:34] <GyrosGeier> pastebin is broken for me, but my expectation is that linking statically will break dynamic linking
[19:50:16] <GyrosGeier> basically, dynamic linking uses the in-memory interpreter
[19:50:29] <GyrosGeier> if the program is statically linked, no interpreter is loaded
[19:51:29] <Alipha> fluter: note also, which catches people up sometimes, is that `Foo f; const Foo g; f = std::move(g);` will call the copy assignment operator instead, since g is const and therefore not movable
[19:52:07] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[19:52:13] <retux> Well, I would like to link it statically because on MacOS the path to libpython.dylib is hardcoded into the binary. I know that I can use rpath and the like, but linking libpython statically seems to be the more versatile approach.
[19:52:32] <Alipha> If Foo doesn't have a copy assignment operator, then that'll error, of course. But if it does, then it'll compile and silently not actually move
[19:52:36] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Quit: WeeChat 3.3)
[19:54:06] *** Quits: msk (~msk@103.213.213.65) (Ping timeout: 260 seconds)
[19:56:29] *** Quits: ville (~ville@user/ville) (Quit: ville)
[19:57:15] *** Joins: ville (~ville@user/ville)
[19:57:48] <GyrosGeier> retux, but modules that are loaded later will need to link against that library too
[19:59:32] <GyrosGeier> and they either link against the dynamic libpython, so you end up with two possibly inconsistent copies of libpython in one process, or they are missing symbols
[19:59:57] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[20:00:10] <retux> So what should I do about the hardcoded path to libpython.dylib in my binary?
[20:00:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:00:57] <retux> Is rpath really the only solution. That makes the distribution of pre-built binaries somehow awkward.
[20:01:50] <retux> I mean only for MacOS. On Linux linking python can be omitted. On Windows, there is no absolute path encoded into the binary.
[20:03:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:08:42] <furrymcgee> most versatile is executing python.exe
[20:09:53] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:09:55] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (Remote host closed the connection)
[20:10:32] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[20:11:00] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 240 seconds)
[20:11:29] <furrymcgee> maybe better to ask #python how to embed it into another language
[20:13:02] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[20:14:45] *** Joins: AmR (~AmREiSa@156.207.194.71)
[20:18:25] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (Excess Flood)
[20:20:32] <GyrosGeier> yes
[20:20:56] <GyrosGeier> you can probably also take a look at how KiCad on Mac is packaged
[20:21:18] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[20:21:25] <GyrosGeier> -> https://gitlab.com/kicad/packaging/kicad-mac-builder
[20:21:41] <GyrosGeier> because that would have the exact same problems
[20:24:41] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[20:24:54] *** Joins: Rynn (~rynn@216.30.158.198)
[20:25:48] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[20:27:57] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[20:31:41] *** Quits: the_lanetly_052 (~the_lanet@194.135.169.153) (Ping timeout: 252 seconds)
[20:32:17] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:34:42] *** Joins: JakeSays_ (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[20:35:38] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[20:35:52] *** Joins: Enitin (~Enitin@82.180.145.226)
[20:37:13] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[20:37:22] <retux> Maybe we have a misunderstanding here. I talk about a C++ library for which I created Python binding via SWIG. The shared library needs to be linked against libpython.
[20:38:09] *** JakeSays_ is now known as JakeSays
[20:38:24] *** Joins: magla (~gelignite@d5364d83.access.ecotel.net)
[20:39:49] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[20:40:35] <GyrosGeier> yes
[20:40:39] <GyrosGeier> same as in KiCad
[20:41:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:41:36] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:41:38] *** Joins: Enitin (~Enitin@82.180.145.230)
[20:43:01] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:43:18] <retux> Ok I'll have a look, thanks.
[20:45:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:51:39] *** Joins: Octarine (~Octarine@p0299789-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp)
[20:51:57] *** Quits: callq (~callq@2409:4062:4e9a:a9bd:d23:3204:52b:f841) (Ping timeout: 240 seconds)
[20:56:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:57:54] *** Quits: aLeSD_ (~aLeSD@91.126.33.194) (Remote host closed the connection)
[21:00:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:01:02] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 240 seconds)
[21:02:02] *** Quits: undephin3d (~undephin3@158.181.75.126) (Ping timeout: 240 seconds)
[21:02:16] *** Joins: Betal (~Betal@user/betal)
[21:02:48] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[21:03:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:08:41] *** Quits: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b) (Ping timeout: 256 seconds)
[21:09:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:11:05] <Octarine> Hi, anyone can recommend a channel for code snippet code review?
[21:11:14] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:71b7)
[21:11:32] <Guest54> is it possible to `move` something that is `const` prefixed?
[21:11:37] <Guest54> https://stackoverflow.com/questions/28595117/why-can-we-use-stdmove-on-a-const-object
[21:11:53] <Guest54> my understand is no, you can't, std::move() just creates a copy on const things
[21:11:57] <Guest54> but I want to confirm
[21:14:42] <bpalmer> std::move casts a value; it doesn't actually do anything itself.
[21:14:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:15:08] <bpalmer> the default move constructor is T(T&&) , so it won't match a const.
[21:15:51] <bpalmer> but if you have a move constructor like T(const T&&), it'll be invoked when std::move casts `const T` to `const T&&`
[21:16:14] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[21:16:33] <bpalmer> (and if T(T&&) doesn't match, then it will try on the copy constructor, T(const T&), which will match).
[21:17:11] <ville> Guest54: std::move() doesn't do anything to its argument object. it changes the expression's type
[21:17:21] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[21:17:37] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:17:53] <ville> Guest54: function overload resolution works based on whatever the type of the expressions used as arguments
[21:18:21] <ville> Guest54: thing such as: T(T const&) and T(T&&) are overloads of the same function
[21:18:57] <Guest54> I see thanks for clarifying folks
[21:20:20] <ville> so yes, you can use std::move() on a const object. but when you see the result of std::move() expression used to pick an overload it probably pick the overload you "Intended
[21:20:42] <ville> err won't pcick
[21:20:49] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:21:09] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[21:21:25] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:21:34] <hachikuji[m]> yeah it will just resort to a copy, if not error
[21:22:40] <Guest54> "This warns you when your code uses std::move(x) and x is const-qualified. This means it will be copied and not moved-from."
[21:22:53] <Guest54> we have a coding guideline that says this...^ -- it's inaccurate right?
[21:23:07] <Guest54> doesn't always have to be copied if there is a proper overload for it
[21:23:15] <bpalmer> Guest54: it's not technically accurate but it's accurate enough to be a good warning.
[21:23:32] <ville> do you want the nitpick answer or
[21:24:09] <bpalmer> Guest54: void f(const T&t) { ... }    f(std::move(T));  <-- technically it neither copies nor moves. But it's a pointless thing so the programmer probably made a mistake.
[21:24:25] <Alipha> And no one actually writes a T(const T&&) overload though, unless they're deleting it
[21:25:21] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:25:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:26:14] <ville> Guest54: warning about std::move() on a const object it self is bit early. it's about two steps too early. but probably good enough approximation and catches some silly mistakes
[21:26:58] <Guest54> so basically I'm looking at a snippet like so: `for (auto &&r: result_map) { std::move(r.first)} ` where `first` is `std::string` type and result_map is `std::map<string, int> &&`
[21:27:03] *** Quits: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:27:26] <bpalmer> Guest54: that will do nothing; std::move is just a cast.
[21:27:43] <Guest54> ahh ok i think I get it now
[21:28:11] <Guest54> we're casting first and then passing itÂ  into `emplace` api of map
[21:28:15] <bpalmer> it's very close to for (int i = 0 ; i < 10; i++) { (long)i; }
[21:28:22] <Guest54> (sorry I can't show too much code becase proprietary)
[21:28:45] <ville> Guest54: f(expr); how do you know what version of f() is picked?
[21:29:05] <ville> Guest54: or to put it another way how do you control what version of f() is picked?
[21:29:18] <ville> Guest54: by controlling the type of expr
[21:29:32] <ville> Guest54: that's what std::move() does
[21:30:05] <Guest54> right ok. So for `f(std::move(something)`, I have to check if there is a proper overload for `f` that can accept a `const T&&`
[21:30:42] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[21:31:08] *** Joins: eck (~root@user/eck)
[21:31:18] <Guest54> in my case, the `f` the emplace() in `std::map` -- I'll have a look into that
[21:31:51] <T`aZ> just to repeat what ville said, that's never the case, because it makes no sense to have const T&&
[21:32:00] <bpalmer> Guest54: it's a very unusual bit of code that does anything with const T&&, as alipha said.
[21:32:37] <bpalmer> Guest54: so in almost cases, it will just fall back to const T& or T (pass by const reference or make a copy)
[21:32:40] <T`aZ> (s/ville/alipha/ indeed sorry)
[21:32:49] *** Quits: Octarine (~Octarine@p0299789-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp) (Quit: Client closed)
[21:32:50] <Guest54> ahh i see. It's unusual because it would involve "deleting" (not sure what the word is) the original the cost thing, right?
[21:32:55] <Guest54> const*
[21:33:02] <Guest54> so that there's no copy
[21:33:36] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:34:00] *** Joins: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df)
[21:34:10] <Guest54> my monkey python brain has a hard time comprehending c++ concepts, thanks again folks for the all pointers and guidance
[21:34:25] <bpalmer> It's unusual because what you can do with a const T&& is almost exactly what you'd do with a const T&, and the const T& is more useful.
[21:35:59] <bpalmer> Mostly they're around to be deleted, although I'm imagining something involving "move"-like semantics with `mutable` fields in an const object (perhaps some cached optimizations with weak pointer like semantics)
[21:36:17] <Guest54> bpalmer but if you want to be evil, you can create you own const T&& overload and confuse people when they accidentally move a const object right?
[21:36:33] <bpalmer> yes.
[21:37:00] <Guest54> ok that makes sense. So it doesn't make any sense for stdlib apis to have a `const T &&` overload
[21:37:20] <Guest54> so when users do sth like std::move(some_const_thing)`, this is implicitly coped
[21:37:34] <Guest54> so yeah, I can see how a warning is useuful
[21:38:00] <bpalmer> Well, it's not that it will be implicitly copied, but when you use it, it will almost certainly not be moved from.
[21:38:06] <bpalmer> So std::move is just misleading.
[21:39:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[21:39:50] <bpalmer> f(std::move(some_const_thing));   <-- you need to look at the entire overload set for f to see what's invoked, whether that be that it's passed by const lvalue ref, passed by const rvalue ref, or copied.
[21:40:12] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[21:40:50] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:71b7) (Quit: Client closed)
[21:41:33] *** Quits: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df) (Ping timeout: 252 seconds)
[21:41:45] *** Joins: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3)
[21:43:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[21:43:11] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[21:44:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:08] *** ChanServ sets mode: +v npaperbot
[21:47:32] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[21:48:08] *** Joins: irf21k (~irf21k@2401:4900:32b5:d37d::122d:224a)
[21:48:45] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Remote host closed the connection)
[21:51:01] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[21:54:47] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:55:09] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:55:57] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[21:56:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:56:16] *** Quits: mitch0 (~mitch@178-164-184-5.pool.digikabel.hu) (Ping timeout: 272 seconds)
[21:56:18] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:57:29] *** Joins: mitch0 (~mitch@84-236-97-135.pool.digikabel.hu)
[21:57:46] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[21:58:36] *** Quits: irf21k (~irf21k@2401:4900:32b5:d37d::122d:224a) (Ping timeout: 240 seconds)
[21:58:55] *** Joins: irf21k (~irf21k@2401:4900:32b5:d3e1::122e:9ae9)
[21:59:34] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[22:00:06] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[22:01:07] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:01:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:04:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:06:41] *** Inline__ is now known as Inline
[22:06:51] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Quit: Leaving)
[22:07:43] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[22:08:16] <hachikuji[m]> `std::move` is inherently misleading regardless of case, after all it just creates an rvalue and does nothing else
[22:08:27] <hachikuji[m]> s/case/context/
[22:09:05] <hachikuji[m]>  * `std::move` is inherently misleading regardless of context, after all it is just a cast to an rvalue and does nothing else
[22:10:34] <bpalmer> yet it expresses the intent in a way that an explicit rvalue cast wouldn't
[22:10:48] * bpalmer has slowly grown to favor std::move
[22:11:33] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[22:12:05] <hachikuji[m]> iirc it was added because standard prohibits implicit lvalue to rvalue conversion, named rvalue reference is just treated as lvalue unless you use std::move or cast it
[22:12:06] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:08] <hachikuji[m]> * cast it explicitly
[22:12:39] <hachikuji[m]> so that's a bit annoying to explain to someone who doesn't already know
[22:13:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:13:57] *** Joins: Enitin (~Enitin@82.180.145.228)
[22:14:42] <hachikuji[m]> hachikuji[m]: and by this I mean that if you get an rvalue, in a function, this is precisely the place where you need to use `std::forward` if you want to keep the rvalue and not have it treated as lvalue...
[22:15:19] <hachikuji[m]> > <@hachikuji:midov.pl> iirc it was added because standard prohibits implicit lvalue to rvalue conversion, named rvalue reference is just treated as lvalue unless you use std::move or cast it explicitly
[22:15:19] <hachikuji[m]>  * and by this I mean that if you get an rvalue, from somewhere, as a parameter, this is precisely the place where you need to use `std::forward` if you want to keep the rvalue and not have it treated as lvalue...
[22:16:21] <bpalmer> Of course, people also routinely ignore that std::move is not guaranteed to move anything (the value being moved from has no particular guarantees)
[22:16:32] <hachikuji[m]>  * and by this I mean that if you get an rvalue, from somewhere, as a parameter, this is precisely the place where you also need to use `std::move`, or perhaps even `std::forward` if you want to keep the rvalue and not have it treated as lvalue...
[22:16:41] <bpalmer> So in that respect, std::move(x) doing nothing is consistent.
[22:17:11] <hachikuji[m]> well yes, the guarantees are in the constructors available
[22:27:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:28:23] *** Joins: osXnut (~osXnut@77.125.126.151)
[22:29:05] *** Joins: abode (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5)
[22:32:43] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[22:38:48] *** Joins: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[22:39:01] *** Quits: zen_coder (~zen_coder@ip5f5bf686.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:44:15] *** Joins: Rynn (~rynn@216.30.158.198)
[22:45:49] *** Joins: darkbit (~db@152.32.100.99)
[22:48:23] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[22:48:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 245 seconds)
[22:49:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:50:11] <CarloWood> Why is 'register' still a keyword? :/  I want OFTEN to use it as a function name.
[22:51:31] <AliceMeows> I'm pretty sure it was already removed
[22:51:43] <CarloWood> { A a; a.register(42); } struct A { void register(int) {} };
[22:51:44] <geordi> error: expected unqualified-id before 'int'
[22:52:16] <anyone> {} int register;
[22:52:16] <geordi> error: declaration does not declare anything
[22:52:21] <anyone> That's the error you're looking for.
[22:52:38] <anyone> basically, the standard may have removed it, but g++ didn't.
[22:52:44] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:53:49] <AliceMeows> clang seem to already remove it
[22:54:22] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Read error: Connection reset by peer)
[22:55:14] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.4)
[22:56:35] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[22:56:41] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[23:00:32] <hachikuji[m]> isn't it reserved?
[23:01:02] <CarloWood> Yes, it is reversed for future standards - so the deprecation in C++ doesn't help me.
[23:01:09] <AliceMeows> It used to bee not anymore
[23:01:16] <CarloWood> reserved too
[23:01:17] <AliceMeows> I thought it was removed entirely?
[23:01:35] <CarloWood> Can you have geordi use clang?
[23:01:40] <AliceMeows> Yes
[23:01:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:01:46] <CarloWood> how?
[23:01:59] <AliceMeows> I don't remember but I know it can be used
[23:02:10] <CarloWood> geordi: --clang {}
[23:02:10] <geordi> exception: execv
[23:02:14] <Alipha> TinoDidriksen (who maintains geordi, iirc) no longer maintains geordi to work with clang
[23:02:34] * hachikuji[m] uploaded an image: (26KiB) < https://libera.ems.host/_matrix/media/r0/download/midov.pl/ZVXBZRzOdbDgonHzViDsBJlV/image.png >
[23:02:43] <hachikuji[m]> well it appears to be reserved indefinitely
[23:03:02] <hachikuji[m]> not sure what standard exactly says about this
[23:03:09] <TinoDidriksen> Eelis maintains the geordi code; I just build and run it. The LLVM codebase got out of sync, and it's a bother to rebase it.
[23:03:37] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:03:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:04:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:06:21] <CarloWood> I need a synonym for register then.. but I can't find any on www.thesaurus.com that sounds right.  In a derived class I implement a virtual function that has to "register" the std::vector's that it will fill by calling a method of the base class with those vectors. Ie: create_info.register(my_vector1); create_info.register(my_vector2);
[23:06:50] <nb-ben> what does this function actually do
[23:06:53] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[23:06:57] <CarloWood> What would be a good alternative?  Must be all lowercase and no leading or trailing underscores or something like that :/
[23:07:12] <Alipha> CarloWood: what is it registering? can you call it register_foo?
[23:07:19] <hachikuji[m]> CarloWood: just add?
[23:07:20] <CarloWood> It tells the base class that those are the vectors it will fill.
[23:07:29] <nb-ben> CarloWood: setVectors
[23:07:42] <nb-ben> CarloWood: fillVectors
[23:08:08] <nb-ben> CarloWood: useVectors, use
[23:08:10] <CarloWood> hachikuji[m]: yeah.... I've been using 'add' so often everywhere though, it's getting a bit whatstheword
[23:08:46] <nb-ben> CarloWood: add is a good name for methods/functions that add stuff
[23:08:50] <nb-ben> :p
[23:09:02] <AliceMeows> C++ doesn't have methods
[23:09:05] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:09:48] <CarloWood> There is only one really good name and that is "register" ... I am not English so I can't come up with a synonym :/.  thesaurus.com suggests 'enroll', but that doesn't sound right.
[23:10:08] <nb-ben> CarloWood: you're the only one who knows what your function is actually doing
[23:10:17] <nb-ben> CarloWood: so it's hard to help
[23:11:03] <CarloWood> nb-ben: I guess... it's hard to explain though.
[23:11:26] <nb-ben> I've seen many codebases over the past couple of decades and I can't say I found something where using "register" was preferrable
[23:11:49] <nb-ben> maybe in libraries where there's an API call to register to some service
[23:11:58] <CarloWood> I could show the conversation that I had with someone that lead to this design idea - but I'm sure you don't have the time to read it all :p
[23:11:59] <nb-ben> like, register a user
[23:12:35] <nb-ben> just name the thing as what it's actually doing, you see, you're telling me "register", I have no idea what it does -- therefore it's likely not a good name
[23:12:51] <nb-ben> if you called it something like addVector or setVectors, then I'd have a clue
[23:13:07] <nb-ben> (given it adds or sets)
[23:14:46] <CarloWood> In details though - the base class maintains several vectors of vector pointers; ie std::vector<vector<Foo>*> m_foo_vectors;  and the same for Bar, etc.  Then a derived class calls -say-  register(std::vector<Foo>& foo_vector) which pushes back the pointer to that to m_foo_vectors.
[23:15:22] <nb-ben> why not call it push?
[23:15:51] <CarloWood> It (the derived class) then gets multiple callbacks in which is fills/changes its vector(s) and the base class collects all data of all Foo vectors to make it into a single vector before processing it.
[23:16:10] <AliceMeows> So it flattens it
[23:16:21] <CarloWood> I guess
[23:17:08] *** Joins: immibis (~hexchat@62.156.144.218)
[23:17:34] <CarloWood> nb-ben: I think the use of push_back on m_foo_vectors is an implementation detail. What happens is that the derived class registers it's vector with the base class :/
[23:18:22] <AliceMeows> .assign() maybe?
[23:19:58] <nb-ben> I couldn't fully understand what you meant there, but if this is all about "registering" for callbacks, perhaps a better word would be "subscribe"
[23:23:17] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[23:26:36] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Ping timeout: 240 seconds)
[23:27:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:28:32] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:29:00] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[23:33:10] *** Quits: tlophd_becky__ (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Ping timeout: 250 seconds)
[23:35:00] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:38:07] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[23:39:17] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[23:40:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[23:50:12] *** Quits: retux (~user@dyndsl-085-016-036-243.ewe-ip-backbone.de) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[23:50:45] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:52:44] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[23:54:24] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[23:54:26] <xuxx> hello
[23:54:40] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[23:54:47] <xuxx> I'm looking for good ressources about low latency C++
[23:54:55] <xuxx> If some of you have good links!
[23:55:22] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66001194d010dbb9f0be.ipv6.abo.wanadoo.fr)
[23:55:44] <BurumaSerafuku>  C++ is low latency already
[23:55:44] <AliceMeows> Try asking in general
[23:55:55] <BurumaSerafuku> C++ is closer to the hardware
[23:56:59] <CarloWood> AliceMeows: what about .subscribe() ?
[23:57:10] <AliceMeows> It wasn't my idea
[23:57:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:57:58] <CarloWood> Oh lol - I found it myself - didn't see that nb-ben had suggested it too.
[23:58:54] <CarloWood> Or I could just do #define register Register
[23:58:56] <CarloWood> :/
[23:59:17] <AliceMeows> I'm pretty sure that's considered UB
[23:59:25] <CarloWood> nah
[23:59:43] <CarloWood> preprocessor runs before whatever decides that register is a keyword
